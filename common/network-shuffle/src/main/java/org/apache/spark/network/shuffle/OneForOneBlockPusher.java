/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.spark.network.shuffle;

import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.spark.network.buffer.ManagedBuffer;
import org.apache.spark.network.buffer.NioManagedBuffer;
import org.apache.spark.network.client.RpcResponseCallback;
import org.apache.spark.network.client.TransportClient;
import org.apache.spark.network.shuffle.protocol.BlockTransferMessage;
import org.apache.spark.network.shuffle.protocol.PushBlockStream;

/**
 * Similar to {@link OneForOneBlockFetcher}, but for pushing blocks to remote shuffle service to
 * be merged instead of for fetching them from remote shuffle services. This is used by
 * ShuffleWriter when the block push process is initiated. The supplied BlockFetchingListener
 * is used to handle the success or failure in pushing each blocks.
 */
public class OneForOneBlockPusher {
  private static final Logger logger = LoggerFactory.getLogger(OneForOneBlockPusher.class);

  private final TransportClient client;
  private final String appId;
  private final String[] blockIds;
  private final BlockFetchingListener listener;
  private final RpcResponseCallback callback;
  private final Map<String, ManagedBuffer> buffers;

  public OneForOneBlockPusher(
      TransportClient client,
      String appId,
      String[] blockIds,
      BlockFetchingListener listener,
      Map<String, ManagedBuffer> buffers) {
    this.client = client;
    this.appId = appId;
    this.blockIds = blockIds;
    this.listener = listener;
    this.callback = new BlockPushCallback();
    this.buffers = buffers;
  }

  private class BlockPushCallback implements RpcResponseCallback {

    @Override
    public void onSuccess(ByteBuffer response) {
      BlockTransferMessage msgObj = BlockTransferMessage.Decoder.fromByteBuffer(response);
      if (msgObj instanceof PushBlockStream) {
        PushBlockStream respMsg = (PushBlockStream) msgObj;
        // On receipt of a successful block push
        listener.onBlockFetchSuccess(respMsg.blockId,
            new NioManagedBuffer(ByteBuffer.allocate(0)));
      } else {
        throw new UnsupportedOperationException("Unexpected response: " + msgObj);
      }
    }

    @Override
    public void onFailure(Throwable e) {
      // Decode PushBlockStream header information from the exception message
      BlockPushException decodedExp = BlockPushException.decodeException(e.getMessage());
      PushBlockStream respMsg = decodedExp.getHeader();
      if (respMsg != null) {
        // If a PushBlockStream header can be decoded from the exception message, this exception
        // is generated by the server, and thus is not retriable. Instead of failing all remaining
        // requests, we only fail the one that's actually failed.
        String[] targetBlockId = Arrays.copyOfRange(blockIds, respMsg.index, respMsg.index + 1);
        failRemainingBlocks(targetBlockId, decodedExp);
      } else {
        // If a PushBlockStream header cannot be decoded from the exception message, this
        // exception is not generated by the server when processing a PushBlockStream request.
        // In this case, the exception could potentially be handled by retry. Since we do not
        // have access to index in this case, we have to retry the entire batch.
        failRemainingBlocks(blockIds, e);
      }
    }
  }

  private void failRemainingBlocks(String[] failedBlockIds, Throwable e) {
    for (String blockId : failedBlockIds) {
      try {
        listener.onBlockFetchFailure(blockId, e);
      } catch (Exception e2) {
        logger.error("Error in block push failure callback", e2);
      }
    }
  }

  /**
   * Begins the block pushing process, calling the listener with every block pushed.
   */
  public void start() {
    logger.debug("Start pushing {} blocks", blockIds.length);
    for (int i = 0; i < blockIds.length; i++) {
      if (!buffers.containsKey(blockIds[i])) {
        logger.warn("Ignore block push request for block id {} since no buffer "
            + "is found for this block.", blockIds[i]);
      } else {
        ByteBuffer header = new PushBlockStream(appId, blockIds[i], i).toByteBuffer();
        client.uploadStream(new NioManagedBuffer(header), buffers.get(blockIds[i]), callback);
      }
    }
  }
}
