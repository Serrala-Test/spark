/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.spark.ml.feature

import scala.collection.mutable
import scala.util.Random

import org.apache.spark.annotation.{Experimental, Since}
import org.apache.spark.ml.linalg.{Vector, Vectors, VectorUDT}
import org.apache.spark.ml.param.{IntParam, Params, ParamValidators}
import org.apache.spark.ml.param.shared.HasSeed
import org.apache.spark.ml.util.{Identifiable, SchemaUtils}
import org.apache.spark.sql.types.StructType


/**
 * :: Experimental ::
 * Params for [[BitSampling]].
 */
@Since("2.1.0")
private[ml] trait BitSamplingParams extends Params {

  /**
   * The number of sampling bits, a larger sample size lowers the false negative rate.
   * @group param
   */
  @Since("2.1.0")
  val sampleSize: IntParam = new IntParam(this, "sampleSize",
    "The number of sampling bits, a larger sample size lowers the false negative rate.",
    ParamValidators.inRange(0, 64, false, false))

  /** @group getParam */
  @Since("2.1.0")
  final def getSampleSize: Double = $(sampleSize)
}


/**
 * :: Experimental ::
 * Model produced by [[BitSampling]]
 * @param sampleIndices An array of seqs of sample indices. Each seq represents a hash function.
 */
@Experimental
@Since("2.1.0")
class BitSamplingModel private[ml] (override val uid: String, sampleIndices: Array[Seq[Int]])
  extends LSHModel[BitSamplingModel] with BitSamplingParams {

  @Since("2.1.0")
  override protected[this] val hashFunction: Vector => Vector = {
    key: Vector =>
      val hashValues: Array[Double] = sampleIndices.map({ indices: Seq[Int] =>
        val bits = indices.map(key(_))
        // Use a numeric number to represent the hash value.
        var hashValue = 0x0L
        bits.indices.foreach({ i: Int =>
          if (bits(i) != 0) hashValue |= 0x1L << i
        })
        hashValue.toDouble
      })
      Vectors.dense(hashValues)
  }

  @Since("2.1.0")
  override protected[ml] def keyDistance(x: Vector, y: Vector): Double = {
    val xSet = x.toSparse.indices.toSet
    val ySet = y.toSparse.indices.toSet
    val intersectionSize = xSet.intersect(ySet).size.toDouble
    val unionSize = xSet.size + ySet.size - intersectionSize
    unionSize - intersectionSize
  }

  @Since("2.1.0")
  override protected[ml] def hashDistance(x: Vector, y: Vector): Double = {
    // Since it's generated by hashing, it will be a pair of dense vectors.
    x.toDense.values.zip(y.toDense.values)
      .map(pair => java.lang.Long.bitCount(pair._1.toLong ^ pair._2.toLong)).min
  }
}

/**
 * :: Experimental ::
 * LSH class for Hamming distance.
 *
 * The input can be dense or sparse vectors, each dimension represents one bit. For example,
 *    `Vectors.sparse(10, Array[(2, 1.0), (3, 1.0), (5, 1.0)])`
 * means this is a 10-bit input with value = 1 for index 2, 3, 5; value = 0 for other indices.
 * Also, all non-zero values are treated as binary "1" values.
 */
@Experimental
@Since("2.1.0")
class BitSampling(override val uid: String) extends LSH[BitSamplingModel]
  with BitSamplingParams with HasSeed {

  @Since("2.1.0")
  override def setInputCol(value: String): this.type = super.setInputCol(value)

  @Since("2.1.0")
  override def setOutputCol(value: String): this.type = super.setOutputCol(value)

  @Since("2.1.0")
  override def setOutputDim(value: Int): this.type = super.setOutputDim(value)

  @Since("2.1.0")
  def this() = {
    this(Identifiable.randomUID("min hash"))
  }

  /** @group setParam */
  @Since("2.1.0")
  def setSeed(value: Long): this.type = set(seed, value)

  /** @group setParam */
  @Since("2.1.0")
  def setSampleSize(value: Int): this.type = set(sampleSize, value)

  private[this] def sampleWithoutReplacement(rand: Random, n: Int, k: Int): Seq[Int] = {
    // Fisher-Yates method for sampling without replacement
    var remainingSize = n
    // Keep an map, where keys are all used, and values are all unused.
    val indexMap: mutable.Map[Int, Int] = mutable.Map.empty
    Seq.fill(k)({
      val index = rand.nextInt(remainingSize)
      val result = indexMap.getOrElse(index, index)
      remainingSize -= 1
      // The index has been used. If it's likely to be chosen in the future, let it point to an
      // unused value.
      val valueToMove = indexMap.getOrElse(remainingSize, remainingSize)
      if (index < valueToMove) indexMap.put(index, valueToMove)
      result
    })
  }

  @Since("2.1.0")
  override protected[this] def createRawLSHModel(inputDim: Int): BitSamplingModel = {
    require($(sampleSize) <= inputDim, "sampleSize cannot be larger than the input dimension")
    val rand = new Random($(seed))
    val sampleIndices: Array[Seq[Int]] = Array.fill($(outputDim))({
      sampleWithoutReplacement(rand, inputDim, $(sampleSize))
    })
    new BitSamplingModel(uid, sampleIndices)
  }

  @Since("2.1.0")
  override def transformSchema(schema: StructType): StructType = {
    SchemaUtils.checkColumnType(schema, $(inputCol), new VectorUDT)
    validateAndTransformSchema(schema)
  }
}
