1. GridPartitioner
  (1) There is one class and one object both called "GridPartitioner"
  (2) The class GridPartitioner
    [1] It is a package-private class which can only be accessed under directory mllib. By default, classes (and its members) and objects are all public.
	[2] "val" means the variable cannot change its value after first assignment (like constant variable), while "var" means the variable can change its value many times (like dynamic variable).
	[3] You can extend a base scala class in similar way in Java but there are two restrictions: (i) method overriding requires the "override" keyword; (ii) only the primary constructor can pass parameters to the base constructor
	[4] This class extends a Spark base class called "Partitioner":
		i) The class Partitioner is in path "core/src/main/scala/org/apache/spark/Partitioner.scala"
		ii) It is an abstract class that defines how the elements in a key-value pair RDD are partitioned by key. It maps each key to a partition ID, from 0 to numPartitions-1
		iii) It has two member methods:
		iv) Other existing classes in Spark extending Partitioner:
  (3) The object "GridPartitioner"

2. BlockMatrix

3. External package