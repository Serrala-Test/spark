/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.spark.graphx.api.java

import java.lang.{Long => JLong}
import java.util.{List => JList}

import org.apache.spark.api.java.JavaRDDLike
import org.apache.spark.api.java.function.{Function => JFunction, Function2 => JFunction2, Function3 => JFunction3}
import org.apache.spark.graphx._
import org.apache.spark.graphx.impl.ShippableVertexPartition
import org.apache.spark.rdd.RDD
import org.apache.spark.{Partition, TaskContext}

import scala.language.implicitConversions
import scala.reflect.ClassTag

trait JavaVertexRDDLike[VD, This <: JavaVertexRDDLike[VD, This, R],
  R <: JavaRDDLike[(VertexId, VD), R]]
  extends Serializable {

  implicit val classTag: ClassTag[VD]

  // The type of the RDD is (VertexId, VD)
  def vertexRDD: VertexRDD[VD]

  def wrapRDD(in: RDD[(VertexId, VD)]): R

  /**
   * Return a new single long element generated by counting all elements in the vertex RDD
   */
  def count(): JLong = vertexRDD.count()

  /**
   * Construct a new VertexRDD that is indexed by only the visible vertices. The resulting
   * VertexRDD will be based on a different index and can no longer be quickly joined with this
   * RDD.
   */
//  def reindex(): JavaVertexRDD[VD] = new JavaVertexRDD(vertexRDD.reindex())

  def setName(name: String) = vertexRDD.setName(name)

  def compute(part: Partition, context: TaskContext): Iterator[(VertexId, VD)] = {
    vertexRDD.compute(part, context)
  }

  def mapVertexPartitions[VD2: ClassTag](
    f: ShippableVertexPartition[VD] => ShippableVertexPartition[VD2]): JavaVertexRDD[VD] = {
    vertexRDD.mapVertexPartitions(f).asInstanceOf[JavaVertexRDD[VD]]
  }

  def reindex() : JavaVertexRDD[VD] =
    JavaVertexRDD(vertexRDD.reindex())

  /** Return a new DStream containing only the elements that satisfy a predicate. */
  def filter(pred: Tuple2[VertexId, VD] => Boolean): JavaVertexRDD[VD] =
    JavaVertexRDD(vertexRDD.filter(pred))

  def mapVertexPartitions()
  def mapValues()
  def diff()
  def leftZipJoin()
  def leftJoin()
  def innerZipJoin()
  def innerJoin()
  def aggregateUsingIndex()

  def fromEdges()
}
