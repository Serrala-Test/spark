/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.spark.graphx.api.java

import java.lang.{Long => JLong}
import java.util.{List => JList}

import org.apache.spark.api.java.JavaRDDLike
import org.apache.spark.api.java.function.{Function => JFunction, Function2 => JFunction2, Function3 => JFunction3}
import org.apache.spark.graphx._
import org.apache.spark.graphx.impl.ShippableVertexPartition
import org.apache.spark.rdd.RDD
import org.apache.spark.storage.StorageLevel

import scala.language.implicitConversions
import scala.reflect.ClassTag

trait JavaVertexRDDLike[T, This <: JavaVertexRDDLike[T, This, R], R <: JavaRDDLike[T, R]]
  extends Serializable {
  implicit val classTag: ClassTag[T]

  def vertexRDD: VertexRDD[T]

  def wrapRDD(in: RDD[T]): R

  /**
   * Return a new single long element generated by counting all elements in the vertex RDD
   */
  def count(): JLong = vertexRDD.count()

  /**
   * Construct a new VertexRDD that is indexed by only the visible vertices. The resulting
   * VertexRDD will be based on a different index and can no longer be quickly joined with this
   * RDD.
   */
  def reindex(): JavaVertexRDD[T] = new JavaVertexRDD(vertexRDD.reindex())

  def setName(name: String) = vertexRDD.setName(name)

  def persist(newLevel: StorageLevel) : JavaVertexRDD[T] = {
    new JavaVertexRDD(vertexRDD.persist(newLevel))
  }

  def cache() : JavaVertexRDD[T] = new JavaVertexRDD(vertexRDD.cache())


  def mapVertexPartitions[VD2: ClassTag](
      f: ShippableVertexPartition[T] => ShippableVertexPartition[VD2]) : JavaVertexRDD[VD2] = {
    new JavaVertexRDD(vertexRDD.mapVertexPartitions[VD2](f))
  }

  def mapValues[VD2: ClassTag](f: T => VD2) : JavaVertexRDD[VD2] =
    new JavaVertexRDD(vertexRDD.mapValues(f))

  def filter(pred: Tuple2[VertexId, T] => Boolean): JavaVertexRDD[T] =
    this.mapVertexPartitions(_.filter(Function.untupled(pred)))
}
