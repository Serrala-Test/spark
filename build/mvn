#!/usr/bin/env bash

# Determine the current working directory
_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Installs any application tarball given a URL, the expected tarball name,
# and, optionally, a checkable binary path to determine if the binary has
# already been installed
## Arg1 - URL
## Arg2 - Tarball Name
## Arg3 - Checkable Binary
install_app() {
  local remote_tarball="$1/$2"
  local local_tarball="${_DIR}/$2"
  local binary="${_DIR}/$3"
  if [ -z "$3" -o ! -f "$binary" ]; then
    # check if we already have the tarball
    # check if we have curl installed
    # download application
    [ ! -f "${local_tarball}" ] && [ -n "`which curl 2>/dev/null`" ] && \
      curl "${remote_tarball}" > "${local_tarball}"
    # if the file still doesn't exist, lets try `wget` and cross our fingers
    [ ! -f "${local_tarball}" ] && [ -n "`which wget 2>/dev/null`" ] && \
      wget -O "${local_tarball}" "${remote_tarball}"
    # if both were unsuccessful, exit
    [ ! -f "${local_tarball}" ] && \
      echo -n "ERROR: Cannot download $2 with cURL or wget; " && \
      echo "please install manually and try again." && \
      exit 2
    cd "${_DIR}" && tar -xzf "$2"
    rm -rf "$local_tarball"
  fi
}

# Install maven under the build/ folder
install_mvn() {
  install_app \
    "http://apache.claz.org/maven/maven-3/3.2.3/binaries" \
    "apache-maven-3.2.3-bin.tar.gz" \
    "apache-maven-3.2.3/bin/mvn"
  MVN_BIN="${_DIR}/apache-maven-3.2.3/bin/mvn"
}

# Install zinc under the build/ folder
install_zinc() {
  ZINC_INSTALL_FLAG=1
  install_app \
    "http://downloads.typesafe.com/zinc/0.3.5.3" \
    "zinc-0.3.5.3.tgz" \
    "zinc-0.3.5.3/bin/zinc"
  ZINC_BIN="${_DIR}/zinc-0.3.5.3/bin/zinc"
}

# Determine the Scala version from the root pom.xml file, set the Scala URL,
# and, with that, download the specific version of Scala necessary under
# the build/ folder
install_scala() {
  [ -z "`which python 2>/dev/null`" ] && \
    echo "ERROR: Found no `python` package; please install one and try again." && \
    exit 1
  # determine the Scala version used in Spark
  local scala_version=`python -c "
from xml.dom import minidom
print(minidom.parse('${_DIR}/../pom.xml').getElementsByTagName('scala.version')[0].firstChild.data)"`
  local scala_bin="${_DIR}/scala-${scala_version}/bin/scala"

  install_app \
    "http://downloads.typesafe.com/scala/${scala_version}" \
    "scala-${scala_version}.tgz" \
    "scala-${scala_version}/bin/scala"

  SCALA_COMPILER="$(cd "$(dirname ${scala_bin})/../lib" && pwd)/scala-compiler.jar"
  SCALA_LIBRARY="$(cd "$(dirname ${scala_bin})/../lib" && pwd)/scala-library.jar"
}

# Determines if a given application is already installed. If not, will attempt
# to install if the -f (forced install) flag was set from the command line
# options.
# Leverages the build/packages directory for package install files which
# cater installation of a given application across various operating systems.
# - Current supported operating systems are Linux, Solaris, BSD, and OSX
## Arg1 - application name
check_and_install_app() {
  # create the local environment variable in uppercase
  local app_bin="`echo $1 | awk '{print toupper(\$0)}'`_BIN"
  # some black magic to set the generated app variable (i.e. MVN_BIN) into the
  # environment
  eval "${app_bin}=`which $1 2>/dev/null`"

  if [ -z "`which $1 2>/dev/null`" ]; then
    install_$1
  fi
}

# Setup healthy defaults for the Zinc port if none were provided from
# the environment
ZINC_PORT=${ZINC_PORT:-"3030"}

# Check and install all applications necessary to build Spark
check_and_install_app "mvn"
check_and_install_app "zinc"

# Check and download the proper version of Scala for the build
install_scala

# Reset the current working directory
cd "${_DIR}/.."

# Now that zinc is ensured to be installed, check its status and, if its
# not running, start it
if [ -n "${ZINC_INSTALL_FLAG}" -o -z "`${ZINC_BIN} -status`" ]; then
  ${ZINC_BIN} -shutdown
  ${ZINC_BIN} -start -port ${ZINC_PORT} \
    -scala-compiler "${SCALA_COMPILER}" \
    -scala-library "${SCALA_LIBRARY}" &>/dev/null
fi

# Last, call the `mvn` command as usual
${MVN_BIN} "$@"
