/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = 'proto3';

package spark.connect;

import "spark/connect/relations.proto";

option java_multiple_files = true;
option java_package = "org.apache.spark.connect.proto";


message RemoteCall {
  oneof call_type {
    ConstructObject construct_object = 1;
    DestructObject destruct_object = 2;
    CallMethod call_method = 3;
    CallFunction call_function = 4;
  }

  message ArgValue {
    oneof arg_type {
      int32 int32_value = 1;
      int64 int64_value = 2;
      float float_value = 3;
      double double_value = 4;
      bool bool_value = 5;
      string string_value = 6;
      List list = 7;
      Map map = 8;
      Relation relation = 9;
      RemoteObject remote_object = 10;
    }
  }

  message List {
    repeated ArgValue element = 1;
  }
  message Map {
    map<string, ArgValue> map = 1;
  }
  message RemoteObject {
    int64 id = 1;
  }

  message ConstructObject {
    string className = 1;
    repeated ArgValue arg_values = 2;
  }

  message DestructObject {
    RemoteObject remote_object = 1;
  }

  message CallMethod {
    RemoteObject remote_object = 1;
    string method_name = 2;
    repeated ArgValue arg_values = 3;
  }

  message CallFunction {
    string module_name = 1;
    string function_name = 2;
    repeated ArgValue arg_values = 3;
  }
}


message MlCommand {
  oneof op_type {
    ConstructStage construct_stage = 1;
    DestructObject destruct_object = 2;
    Fit fit = 3;
    Transform transform = 4;
    TransferParamsToServer transfer_params_to_server = 5;
    TransferParamsFromServer transfer_params_from_server = 6;
  }

  message ParamValue {
    oneof value {
      int64 long_val = 1;
      int32 int_val = 2;
      double double_val = 3;
      float float_val = 4;
      bool bool_val = 5;
      string str_val = 6;
      DoubleArray double_array = 7;
      FloatArray float_array = 8;
      LongArray long_array = 9;
      IntArray int_array = 10;
      StringArray str_array = 11;
      BoolArray bool_array = 12;
    }
    message DoubleArray {
      repeated double element = 1;
    }
    message FloatArray {
      repeated float element = 1;
    }
    message LongArray {
      repeated int64 element = 1;
    }
    message IntArray {
      repeated int32 element = 1;
    }
    message StringArray {
      repeated string element = 1;
    }
    message BoolArray {
      repeated bool element = 1;
    }
  }

  message Params {
    map<string, ParamValue> params = 1;
    map<string, ParamValue> default_params = 2;
  }

  message ConstructStage {
    // stage (estimator / transformer) uid.
    string uid = 1;
    string class_name = 2;
  }

  message DestructObject {
    // unique id of java object in server side
    int64 id = 1;
  }

  message Fit {
    // id of server side estimator java object
    int64 id = 1;
    Relation input = 2;
  }

  message Transform {
    // id of server side transformer / model java object
    int64 id = 1;
    Relation input = 2;
  }

  message TransferParamsToServer {
    // id of server side estimator / transformer / model java object
    int64 id = 1;
    Params params = 2;
  }

  message TransferParamsFromServer {
    int64 id = 1;
  }
}
