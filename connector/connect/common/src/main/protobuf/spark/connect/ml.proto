/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = 'proto3';

package spark.connect;

import "spark/connect/relations.proto";

option java_multiple_files = true;
option java_package = "org.apache.spark.connect.proto";


message RemoteCall {
  oneof call_type {
    ConstructObject construct_object = 1;
    DestructObject destruct_object = 2;
    CallMethod call_method = 3;
    CallFunction call_function = 4;
  }

  message ArgValue {
    oneof arg_type {
      int32 int32_value = 1;
      int64 int64_value = 2;
      float float_value = 3;
      double double_value = 4;
      bool bool_value = 5;
      string string_value = 6;
      List list = 7;
      Map map = 8;
      Relation relation = 9;
      RemoteObject remote_object = 10;
      Vector vector = 11;
      Matrix matrix = 12;
    }
  }

  message List {
    repeated ArgValue element = 1;
  }
  message Map {
    map<string, ArgValue> map = 1;
  }
  message RemoteObject {
    int64 id = 1;
    // optional field: class_name, used for attaching class information
    // when server side returning object
    string class_name = 2;
  }
  message Vector {
    // TODO: support sparse Vector
    repeated double element = 1;
  }
  message Matrix {
    // TODO: support sparse Maxtrix
    int32 num_rows = 1;
    int32 num_cols = 2;
    repeated double element = 3;
  }

  message ConstructObject {
    string class_name = 1;
    repeated ArgValue arg_values = 2;
  }

  message DestructObject {
    RemoteObject remote_object = 1;
  }

  message CallMethod {
    RemoteObject remote_object = 1;
    string method_name = 2;
    repeated ArgValue arg_values = 3;
  }

  message CallFunction {
    string module_name = 1;
    string function_name = 2;
    repeated ArgValue arg_values = 3;
  }
}
