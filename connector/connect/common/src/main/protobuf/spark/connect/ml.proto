/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = 'proto3';

package spark.connect;

import "google/protobuf/any.proto";
import "spark/connect/expressions.proto";
import "spark/connect/types.proto";
import "spark/connect/relations.proto";

option java_multiple_files = true;
option java_package = "org.apache.spark.connect.proto";


message Params {
  map<string, Expression.Literal> params = 1;
  map<string, Expression.Literal> default_params = 2;
}

message Stage {
  string name = 1;
  Params params = 2;
  string uid = 3;
  StageType type = 4;
  enum StageType {
      ESTIMATOR = 0;
      TRANSFORMER = 1;
  }
}

message Evaluator {
  string name = 1;
  Params params = 2;
  string uid = 3;
}

message ModelAttr {
  int64 model_ref_id = 1;
  string name = 2;
}

message ModelSummaryAttr {
  int64 model_ref_id = 1;
  string name = 2;
  Params params = 3;

  // Evaluation dataset that it uses to computes
  // the summary attribute
  // If not set, get attributes from
  // model.summary (i.e. the summary on training dataset)
  optional Relation evaluation_dataset = 4;
}

message MlCommand {
  oneof ml_command_type {
    Fit fit = 1;
    ModelAttr get_model_attr = 2;
    ModelSummaryAttr get_model_summary_attr = 3;
    LoadModel load_model = 4;
    SaveModel save_model = 5;
    Evaluate evaluate = 6;
  }

  message Fit {
    Stage estimator = 1;
    Relation dataset = 2;
  }

  message Evaluate {
    Evaluator evaluator = 1;
  }

  message LoadModel {
    string name = 1;
    string path = 2;
  }

  message SaveModel {
    int64 model_ref_id = 1;
    string path = 2; // saving path
    bool overwrite = 3;
    map<string, string> options = 4; // saving options
  }
}


message MlCommandResponse {
  oneof ml_command_response_type {
    Expression.Literal literal = 1;
    ModelInfo model_info = 2;
    Vector vector = 3;
    Matrix matrix = 4;
  }
  message ModelInfo {
    int64 model_ref_id = 1;
    string model_uid = 2;
  }
}


message MlRelation {
  oneof ml_relation_type {
    ModelTransform model_transform = 1;
    FeatureTransform feature_transform = 2;
    ModelAttr model_attr = 3;
    ModelSummaryAttr model_summary_attr = 4;
  }
  message ModelTransform {
    Relation input = 1;
    int64 model_ref_id = 2;
    Params params = 3;
  }
  message FeatureTransform {
    Relation input = 1;
    Stage transformer = 2;
  }
}

message Vector {
  oneof one_of {
    Dense dense = 1;
    Sparse sparse = 2;
  }
  message Dense {
    repeated double values = 1;
  }
  message Sparse {
    int32 size = 1;
    repeated double indices = 2;
    repeated double values = 3;
  }
}

message Matrix {
  oneof one_of {
    Dense dense = 1;
    Sparse sparse = 2;
  }
  message Dense {
    int32 num_rows = 1;
    int32 num_cols = 2;
    repeated double values = 3;
  }
  message Sparse {
    int32 num_rows = 1;
    int32 num_cols = 2;
    repeated double colptrs = 3;
    repeated double row_indices = 4;
    repeated double values = 5;
    bool is_transposed = 6;
  }
}
