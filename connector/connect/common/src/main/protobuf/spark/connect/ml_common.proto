/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = 'proto3';

package spark.connect;

import "spark/connect/expressions.proto";

option java_multiple_files = true;
option java_package = "org.apache.spark.connect.proto";


// MlParams stores param settings for
// ML Estimator / Transformer / Model / Evaluator
message MlParams {
  // user-supplied params
  map<string, ParamValue> params = 1;
  // default params
  map<string, ParamValue> default_params = 2;

  message ParamValue {
    oneof param_value_type {
      Expression.Literal literal = 1;
      Vector vector = 2;
      Matrix matrix = 3;
    }
  }
}

// MlStage stores ML stage data (Estimator or Transformer)
message MlStage {
  // The name of the stage in the registry
  string name = 1;
  // param settings for the stage
  MlParams params = 2;
  // unique id of the stage
  string uid = 3;
  StageType type = 4;
  enum StageType {
    STAGE_TYPE_UNSPECIFIED = 0;
    STAGE_TYPE_ESTIMATOR = 1;
    STAGE_TYPE_TRANSFORMER = 2;
  }
}

// ModelRef represents a reference to server side `Model` instance
message ModelRef {
  // The ID is used to lookup the model instance in server side.
  string id = 1;
}

message Vector {
  oneof one_of {
    Dense dense = 1;
    Sparse sparse = 2;
  }
  message Dense {
    repeated double value = 1;
  }
  message Sparse {
    int32 size = 1;
    repeated double index = 2;
    repeated double value = 3;
  }
}

message Matrix {
  oneof one_of {
    Dense dense = 1;
    Sparse sparse = 2;
  }
  message Dense {
    int32 num_rows = 1;
    int32 num_cols = 2;
    repeated double value = 3;
    bool is_transposed = 4;
  }
  message Sparse {
    int32 num_rows = 1;
    int32 num_cols = 2;
    repeated double colptr = 3;
    repeated double row_index = 4;
    repeated double value = 5;
    bool is_transposed = 6;
  }
}
