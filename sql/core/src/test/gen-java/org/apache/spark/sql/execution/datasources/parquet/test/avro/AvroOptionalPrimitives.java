/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.spark.sql.execution.datasources.parquet.test.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroOptionalPrimitives extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4196203931828149877L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroOptionalPrimitives\",\"namespace\":\"org.apache.spark.sql.execution.datasources.parquet.test.avro\",\"fields\":[{\"name\":\"maybe_bool_column\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"maybe_int_column\",\"type\":[\"null\",\"int\"]},{\"name\":\"maybe_long_column\",\"type\":[\"null\",\"long\"]},{\"name\":\"maybe_float_column\",\"type\":[\"null\",\"float\"]},{\"name\":\"maybe_double_column\",\"type\":[\"null\",\"double\"]},{\"name\":\"maybe_binary_column\",\"type\":[\"null\",\"bytes\"]},{\"name\":\"maybe_string_column\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"maybe_fixed_column\",\"type\":[\"null\",{\"type\":\"fixed\",\"name\":\"FixedType\",\"size\":8}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Boolean maybe_bool_column;
  @Deprecated public java.lang.Integer maybe_int_column;
  @Deprecated public java.lang.Long maybe_long_column;
  @Deprecated public java.lang.Float maybe_float_column;
  @Deprecated public java.lang.Double maybe_double_column;
  @Deprecated public java.nio.ByteBuffer maybe_binary_column;
  @Deprecated public java.lang.String maybe_string_column;
  @Deprecated public org.apache.spark.sql.execution.datasources.parquet.test.avro.FixedType maybe_fixed_column;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroOptionalPrimitives() {}

  /**
   * All-args constructor.
   * @param maybe_bool_column The new value for maybe_bool_column
   * @param maybe_int_column The new value for maybe_int_column
   * @param maybe_long_column The new value for maybe_long_column
   * @param maybe_float_column The new value for maybe_float_column
   * @param maybe_double_column The new value for maybe_double_column
   * @param maybe_binary_column The new value for maybe_binary_column
   * @param maybe_string_column The new value for maybe_string_column
   * @param maybe_fixed_column The new value for maybe_fixed_column
   */
  public AvroOptionalPrimitives(java.lang.Boolean maybe_bool_column, java.lang.Integer maybe_int_column, java.lang.Long maybe_long_column, java.lang.Float maybe_float_column, java.lang.Double maybe_double_column, java.nio.ByteBuffer maybe_binary_column, java.lang.String maybe_string_column, org.apache.spark.sql.execution.datasources.parquet.test.avro.FixedType maybe_fixed_column) {
    this.maybe_bool_column = maybe_bool_column;
    this.maybe_int_column = maybe_int_column;
    this.maybe_long_column = maybe_long_column;
    this.maybe_float_column = maybe_float_column;
    this.maybe_double_column = maybe_double_column;
    this.maybe_binary_column = maybe_binary_column;
    this.maybe_string_column = maybe_string_column;
    this.maybe_fixed_column = maybe_fixed_column;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return maybe_bool_column;
    case 1: return maybe_int_column;
    case 2: return maybe_long_column;
    case 3: return maybe_float_column;
    case 4: return maybe_double_column;
    case 5: return maybe_binary_column;
    case 6: return maybe_string_column;
    case 7: return maybe_fixed_column;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: maybe_bool_column = (java.lang.Boolean)value$; break;
    case 1: maybe_int_column = (java.lang.Integer)value$; break;
    case 2: maybe_long_column = (java.lang.Long)value$; break;
    case 3: maybe_float_column = (java.lang.Float)value$; break;
    case 4: maybe_double_column = (java.lang.Double)value$; break;
    case 5: maybe_binary_column = (java.nio.ByteBuffer)value$; break;
    case 6: maybe_string_column = (java.lang.String)value$; break;
    case 7: maybe_fixed_column = (org.apache.spark.sql.execution.datasources.parquet.test.avro.FixedType)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'maybe_bool_column' field.
   * @return The value of the 'maybe_bool_column' field.
   */
  public java.lang.Boolean getMaybeBoolColumn() {
    return maybe_bool_column;
  }

  /**
   * Sets the value of the 'maybe_bool_column' field.
   * @param value the value to set.
   */
  public void setMaybeBoolColumn(java.lang.Boolean value) {
    this.maybe_bool_column = value;
  }

  /**
   * Gets the value of the 'maybe_int_column' field.
   * @return The value of the 'maybe_int_column' field.
   */
  public java.lang.Integer getMaybeIntColumn() {
    return maybe_int_column;
  }

  /**
   * Sets the value of the 'maybe_int_column' field.
   * @param value the value to set.
   */
  public void setMaybeIntColumn(java.lang.Integer value) {
    this.maybe_int_column = value;
  }

  /**
   * Gets the value of the 'maybe_long_column' field.
   * @return The value of the 'maybe_long_column' field.
   */
  public java.lang.Long getMaybeLongColumn() {
    return maybe_long_column;
  }

  /**
   * Sets the value of the 'maybe_long_column' field.
   * @param value the value to set.
   */
  public void setMaybeLongColumn(java.lang.Long value) {
    this.maybe_long_column = value;
  }

  /**
   * Gets the value of the 'maybe_float_column' field.
   * @return The value of the 'maybe_float_column' field.
   */
  public java.lang.Float getMaybeFloatColumn() {
    return maybe_float_column;
  }

  /**
   * Sets the value of the 'maybe_float_column' field.
   * @param value the value to set.
   */
  public void setMaybeFloatColumn(java.lang.Float value) {
    this.maybe_float_column = value;
  }

  /**
   * Gets the value of the 'maybe_double_column' field.
   * @return The value of the 'maybe_double_column' field.
   */
  public java.lang.Double getMaybeDoubleColumn() {
    return maybe_double_column;
  }

  /**
   * Sets the value of the 'maybe_double_column' field.
   * @param value the value to set.
   */
  public void setMaybeDoubleColumn(java.lang.Double value) {
    this.maybe_double_column = value;
  }

  /**
   * Gets the value of the 'maybe_binary_column' field.
   * @return The value of the 'maybe_binary_column' field.
   */
  public java.nio.ByteBuffer getMaybeBinaryColumn() {
    return maybe_binary_column;
  }

  /**
   * Sets the value of the 'maybe_binary_column' field.
   * @param value the value to set.
   */
  public void setMaybeBinaryColumn(java.nio.ByteBuffer value) {
    this.maybe_binary_column = value;
  }

  /**
   * Gets the value of the 'maybe_string_column' field.
   * @return The value of the 'maybe_string_column' field.
   */
  public java.lang.String getMaybeStringColumn() {
    return maybe_string_column;
  }

  /**
   * Sets the value of the 'maybe_string_column' field.
   * @param value the value to set.
   */
  public void setMaybeStringColumn(java.lang.String value) {
    this.maybe_string_column = value;
  }

  /**
   * Gets the value of the 'maybe_fixed_column' field.
   * @return The value of the 'maybe_fixed_column' field.
   */
  public org.apache.spark.sql.execution.datasources.parquet.test.avro.FixedType getMaybeFixedColumn() {
    return maybe_fixed_column;
  }

  /**
   * Sets the value of the 'maybe_fixed_column' field.
   * @param value the value to set.
   */
  public void setMaybeFixedColumn(org.apache.spark.sql.execution.datasources.parquet.test.avro.FixedType value) {
    this.maybe_fixed_column = value;
  }

  /**
   * Creates a new AvroOptionalPrimitives RecordBuilder.
   * @return A new AvroOptionalPrimitives RecordBuilder
   */
  public static org.apache.spark.sql.execution.datasources.parquet.test.avro.AvroOptionalPrimitives.Builder newBuilder() {
    return new org.apache.spark.sql.execution.datasources.parquet.test.avro.AvroOptionalPrimitives.Builder();
  }

  /**
   * Creates a new AvroOptionalPrimitives RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroOptionalPrimitives RecordBuilder
   */
  public static org.apache.spark.sql.execution.datasources.parquet.test.avro.AvroOptionalPrimitives.Builder newBuilder(org.apache.spark.sql.execution.datasources.parquet.test.avro.AvroOptionalPrimitives.Builder other) {
    return new org.apache.spark.sql.execution.datasources.parquet.test.avro.AvroOptionalPrimitives.Builder(other);
  }

  /**
   * Creates a new AvroOptionalPrimitives RecordBuilder by copying an existing AvroOptionalPrimitives instance.
   * @param other The existing instance to copy.
   * @return A new AvroOptionalPrimitives RecordBuilder
   */
  public static org.apache.spark.sql.execution.datasources.parquet.test.avro.AvroOptionalPrimitives.Builder newBuilder(org.apache.spark.sql.execution.datasources.parquet.test.avro.AvroOptionalPrimitives other) {
    return new org.apache.spark.sql.execution.datasources.parquet.test.avro.AvroOptionalPrimitives.Builder(other);
  }

  /**
   * RecordBuilder for AvroOptionalPrimitives instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroOptionalPrimitives>
    implements org.apache.avro.data.RecordBuilder<AvroOptionalPrimitives> {

    private java.lang.Boolean maybe_bool_column;
    private java.lang.Integer maybe_int_column;
    private java.lang.Long maybe_long_column;
    private java.lang.Float maybe_float_column;
    private java.lang.Double maybe_double_column;
    private java.nio.ByteBuffer maybe_binary_column;
    private java.lang.String maybe_string_column;
    private org.apache.spark.sql.execution.datasources.parquet.test.avro.FixedType maybe_fixed_column;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.spark.sql.execution.datasources.parquet.test.avro.AvroOptionalPrimitives.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.maybe_bool_column)) {
        this.maybe_bool_column = data().deepCopy(fields()[0].schema(), other.maybe_bool_column);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.maybe_int_column)) {
        this.maybe_int_column = data().deepCopy(fields()[1].schema(), other.maybe_int_column);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.maybe_long_column)) {
        this.maybe_long_column = data().deepCopy(fields()[2].schema(), other.maybe_long_column);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.maybe_float_column)) {
        this.maybe_float_column = data().deepCopy(fields()[3].schema(), other.maybe_float_column);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.maybe_double_column)) {
        this.maybe_double_column = data().deepCopy(fields()[4].schema(), other.maybe_double_column);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.maybe_binary_column)) {
        this.maybe_binary_column = data().deepCopy(fields()[5].schema(), other.maybe_binary_column);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.maybe_string_column)) {
        this.maybe_string_column = data().deepCopy(fields()[6].schema(), other.maybe_string_column);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.maybe_fixed_column)) {
        this.maybe_fixed_column = data().deepCopy(fields()[7].schema(), other.maybe_fixed_column);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AvroOptionalPrimitives instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.spark.sql.execution.datasources.parquet.test.avro.AvroOptionalPrimitives other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.maybe_bool_column)) {
        this.maybe_bool_column = data().deepCopy(fields()[0].schema(), other.maybe_bool_column);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.maybe_int_column)) {
        this.maybe_int_column = data().deepCopy(fields()[1].schema(), other.maybe_int_column);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.maybe_long_column)) {
        this.maybe_long_column = data().deepCopy(fields()[2].schema(), other.maybe_long_column);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.maybe_float_column)) {
        this.maybe_float_column = data().deepCopy(fields()[3].schema(), other.maybe_float_column);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.maybe_double_column)) {
        this.maybe_double_column = data().deepCopy(fields()[4].schema(), other.maybe_double_column);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.maybe_binary_column)) {
        this.maybe_binary_column = data().deepCopy(fields()[5].schema(), other.maybe_binary_column);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.maybe_string_column)) {
        this.maybe_string_column = data().deepCopy(fields()[6].schema(), other.maybe_string_column);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.maybe_fixed_column)) {
        this.maybe_fixed_column = data().deepCopy(fields()[7].schema(), other.maybe_fixed_column);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'maybe_bool_column' field.
      * @return The value.
      */
    public java.lang.Boolean getMaybeBoolColumn() {
      return maybe_bool_column;
    }

    /**
      * Sets the value of the 'maybe_bool_column' field.
      * @param value The value of 'maybe_bool_column'.
      * @return This builder.
      */
    public org.apache.spark.sql.execution.datasources.parquet.test.avro.AvroOptionalPrimitives.Builder setMaybeBoolColumn(java.lang.Boolean value) {
      validate(fields()[0], value);
      this.maybe_bool_column = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'maybe_bool_column' field has been set.
      * @return True if the 'maybe_bool_column' field has been set, false otherwise.
      */
    public boolean hasMaybeBoolColumn() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'maybe_bool_column' field.
      * @return This builder.
      */
    public org.apache.spark.sql.execution.datasources.parquet.test.avro.AvroOptionalPrimitives.Builder clearMaybeBoolColumn() {
      maybe_bool_column = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'maybe_int_column' field.
      * @return The value.
      */
    public java.lang.Integer getMaybeIntColumn() {
      return maybe_int_column;
    }

    /**
      * Sets the value of the 'maybe_int_column' field.
      * @param value The value of 'maybe_int_column'.
      * @return This builder.
      */
    public org.apache.spark.sql.execution.datasources.parquet.test.avro.AvroOptionalPrimitives.Builder setMaybeIntColumn(java.lang.Integer value) {
      validate(fields()[1], value);
      this.maybe_int_column = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'maybe_int_column' field has been set.
      * @return True if the 'maybe_int_column' field has been set, false otherwise.
      */
    public boolean hasMaybeIntColumn() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'maybe_int_column' field.
      * @return This builder.
      */
    public org.apache.spark.sql.execution.datasources.parquet.test.avro.AvroOptionalPrimitives.Builder clearMaybeIntColumn() {
      maybe_int_column = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'maybe_long_column' field.
      * @return The value.
      */
    public java.lang.Long getMaybeLongColumn() {
      return maybe_long_column;
    }

    /**
      * Sets the value of the 'maybe_long_column' field.
      * @param value The value of 'maybe_long_column'.
      * @return This builder.
      */
    public org.apache.spark.sql.execution.datasources.parquet.test.avro.AvroOptionalPrimitives.Builder setMaybeLongColumn(java.lang.Long value) {
      validate(fields()[2], value);
      this.maybe_long_column = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'maybe_long_column' field has been set.
      * @return True if the 'maybe_long_column' field has been set, false otherwise.
      */
    public boolean hasMaybeLongColumn() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'maybe_long_column' field.
      * @return This builder.
      */
    public org.apache.spark.sql.execution.datasources.parquet.test.avro.AvroOptionalPrimitives.Builder clearMaybeLongColumn() {
      maybe_long_column = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'maybe_float_column' field.
      * @return The value.
      */
    public java.lang.Float getMaybeFloatColumn() {
      return maybe_float_column;
    }

    /**
      * Sets the value of the 'maybe_float_column' field.
      * @param value The value of 'maybe_float_column'.
      * @return This builder.
      */
    public org.apache.spark.sql.execution.datasources.parquet.test.avro.AvroOptionalPrimitives.Builder setMaybeFloatColumn(java.lang.Float value) {
      validate(fields()[3], value);
      this.maybe_float_column = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'maybe_float_column' field has been set.
      * @return True if the 'maybe_float_column' field has been set, false otherwise.
      */
    public boolean hasMaybeFloatColumn() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'maybe_float_column' field.
      * @return This builder.
      */
    public org.apache.spark.sql.execution.datasources.parquet.test.avro.AvroOptionalPrimitives.Builder clearMaybeFloatColumn() {
      maybe_float_column = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'maybe_double_column' field.
      * @return The value.
      */
    public java.lang.Double getMaybeDoubleColumn() {
      return maybe_double_column;
    }

    /**
      * Sets the value of the 'maybe_double_column' field.
      * @param value The value of 'maybe_double_column'.
      * @return This builder.
      */
    public org.apache.spark.sql.execution.datasources.parquet.test.avro.AvroOptionalPrimitives.Builder setMaybeDoubleColumn(java.lang.Double value) {
      validate(fields()[4], value);
      this.maybe_double_column = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'maybe_double_column' field has been set.
      * @return True if the 'maybe_double_column' field has been set, false otherwise.
      */
    public boolean hasMaybeDoubleColumn() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'maybe_double_column' field.
      * @return This builder.
      */
    public org.apache.spark.sql.execution.datasources.parquet.test.avro.AvroOptionalPrimitives.Builder clearMaybeDoubleColumn() {
      maybe_double_column = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'maybe_binary_column' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getMaybeBinaryColumn() {
      return maybe_binary_column;
    }

    /**
      * Sets the value of the 'maybe_binary_column' field.
      * @param value The value of 'maybe_binary_column'.
      * @return This builder.
      */
    public org.apache.spark.sql.execution.datasources.parquet.test.avro.AvroOptionalPrimitives.Builder setMaybeBinaryColumn(java.nio.ByteBuffer value) {
      validate(fields()[5], value);
      this.maybe_binary_column = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'maybe_binary_column' field has been set.
      * @return True if the 'maybe_binary_column' field has been set, false otherwise.
      */
    public boolean hasMaybeBinaryColumn() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'maybe_binary_column' field.
      * @return This builder.
      */
    public org.apache.spark.sql.execution.datasources.parquet.test.avro.AvroOptionalPrimitives.Builder clearMaybeBinaryColumn() {
      maybe_binary_column = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'maybe_string_column' field.
      * @return The value.
      */
    public java.lang.String getMaybeStringColumn() {
      return maybe_string_column;
    }

    /**
      * Sets the value of the 'maybe_string_column' field.
      * @param value The value of 'maybe_string_column'.
      * @return This builder.
      */
    public org.apache.spark.sql.execution.datasources.parquet.test.avro.AvroOptionalPrimitives.Builder setMaybeStringColumn(java.lang.String value) {
      validate(fields()[6], value);
      this.maybe_string_column = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'maybe_string_column' field has been set.
      * @return True if the 'maybe_string_column' field has been set, false otherwise.
      */
    public boolean hasMaybeStringColumn() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'maybe_string_column' field.
      * @return This builder.
      */
    public org.apache.spark.sql.execution.datasources.parquet.test.avro.AvroOptionalPrimitives.Builder clearMaybeStringColumn() {
      maybe_string_column = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'maybe_fixed_column' field.
      * @return The value.
      */
    public org.apache.spark.sql.execution.datasources.parquet.test.avro.FixedType getMaybeFixedColumn() {
      return maybe_fixed_column;
    }

    /**
      * Sets the value of the 'maybe_fixed_column' field.
      * @param value The value of 'maybe_fixed_column'.
      * @return This builder.
      */
    public org.apache.spark.sql.execution.datasources.parquet.test.avro.AvroOptionalPrimitives.Builder setMaybeFixedColumn(org.apache.spark.sql.execution.datasources.parquet.test.avro.FixedType value) {
      validate(fields()[7], value);
      this.maybe_fixed_column = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'maybe_fixed_column' field has been set.
      * @return True if the 'maybe_fixed_column' field has been set, false otherwise.
      */
    public boolean hasMaybeFixedColumn() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'maybe_fixed_column' field.
      * @return This builder.
      */
    public org.apache.spark.sql.execution.datasources.parquet.test.avro.AvroOptionalPrimitives.Builder clearMaybeFixedColumn() {
      maybe_fixed_column = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    public AvroOptionalPrimitives build() {
      try {
        AvroOptionalPrimitives record = new AvroOptionalPrimitives();
        record.maybe_bool_column = fieldSetFlags()[0] ? this.maybe_bool_column : (java.lang.Boolean) defaultValue(fields()[0]);
        record.maybe_int_column = fieldSetFlags()[1] ? this.maybe_int_column : (java.lang.Integer) defaultValue(fields()[1]);
        record.maybe_long_column = fieldSetFlags()[2] ? this.maybe_long_column : (java.lang.Long) defaultValue(fields()[2]);
        record.maybe_float_column = fieldSetFlags()[3] ? this.maybe_float_column : (java.lang.Float) defaultValue(fields()[3]);
        record.maybe_double_column = fieldSetFlags()[4] ? this.maybe_double_column : (java.lang.Double) defaultValue(fields()[4]);
        record.maybe_binary_column = fieldSetFlags()[5] ? this.maybe_binary_column : (java.nio.ByteBuffer) defaultValue(fields()[5]);
        record.maybe_string_column = fieldSetFlags()[6] ? this.maybe_string_column : (java.lang.String) defaultValue(fields()[6]);
        record.maybe_fixed_column = fieldSetFlags()[7] ? this.maybe_fixed_column : (org.apache.spark.sql.execution.datasources.parquet.test.avro.FixedType) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
