== Physical Plan ==
TakeOrderedAndProject (48)
+- * Project (47)
   +- * BroadcastHashJoin Inner BuildRight (46)
      :- * Project (22)
      :  +- * BroadcastHashJoin Inner BuildRight (21)
      :     :- * Project (15)
      :     :  +- * BroadcastHashJoin Inner BuildRight (14)
      :     :     :- * HashAggregate (9)
      :     :     :  +- Exchange (8)
      :     :     :     +- * HashAggregate (7)
      :     :     :        +- * Project (6)
      :     :     :           +- * BroadcastHashJoin Inner BuildRight (5)
      :     :     :              :- * Filter (3)
      :     :     :              :  +- * ColumnarToRow (2)
      :     :     :              :     +- Scan parquet default.store_sales (1)
      :     :     :              +- ReusedExchange (4)
      :     :     +- BroadcastExchange (13)
      :     :        +- * Filter (12)
      :     :           +- * ColumnarToRow (11)
      :     :              +- Scan parquet default.store (10)
      :     +- BroadcastExchange (20)
      :        +- * Project (19)
      :           +- * Filter (18)
      :              +- * ColumnarToRow (17)
      :                 +- Scan parquet default.date_dim (16)
      +- BroadcastExchange (45)
         +- * Project (44)
            +- * BroadcastHashJoin Inner BuildRight (43)
               :- * Project (37)
               :  +- * BroadcastHashJoin Inner BuildRight (36)
               :     :- * HashAggregate (31)
               :     :  +- Exchange (30)
               :     :     +- * HashAggregate (29)
               :     :        +- * Project (28)
               :     :           +- * BroadcastHashJoin Inner BuildRight (27)
               :     :              :- * Filter (25)
               :     :              :  +- * ColumnarToRow (24)
               :     :              :     +- Scan parquet default.store_sales (23)
               :     :              +- ReusedExchange (26)
               :     +- BroadcastExchange (35)
               :        +- * Filter (34)
               :           +- * ColumnarToRow (33)
               :              +- Scan parquet default.store (32)
               +- BroadcastExchange (42)
                  +- * Project (41)
                     +- * Filter (40)
                        +- * ColumnarToRow (39)
                           +- Scan parquet default.date_dim (38)


(1) Scan parquet default.store_sales
Output [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]

(3) Filter [codegen id : 2]
Input [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(4) ReusedExchange [Reuses operator id: 52]
Output [3]: [d_date_sk#5, d_week_seq#6, d_day_name#7]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join condition: None

(6) Project [codegen id : 2]
Output [4]: [ss_store_sk#1, ss_sales_price#2, d_week_seq#6, d_day_name#7]
Input [6]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3, d_date_sk#5, d_week_seq#6, d_day_name#7]

(7) HashAggregate [codegen id : 2]
Input [4]: [ss_store_sk#1, ss_sales_price#2, d_week_seq#6, d_day_name#7]
Keys [2]: [d_week_seq#6, ss_store_sk#1]
Functions [7]: [partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday   ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday   ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Tuesday  ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday   ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday ) THEN ss_sales_price#2 END))]
Aggregate Attributes [7]: [sum#8, sum#9, sum#10, sum#11, sum#12, sum#13, sum#14]
Results [9]: [d_week_seq#6, ss_store_sk#1, sum#15, sum#16, sum#17, sum#18, sum#19, sum#20, sum#21]

(8) Exchange
Input [9]: [d_week_seq#6, ss_store_sk#1, sum#15, sum#16, sum#17, sum#18, sum#19, sum#20, sum#21]
Arguments: hashpartitioning(d_week_seq#6, ss_store_sk#1, 5), ENSURE_REQUIREMENTS, [id=#22]

(9) HashAggregate [codegen id : 10]
Input [9]: [d_week_seq#6, ss_store_sk#1, sum#15, sum#16, sum#17, sum#18, sum#19, sum#20, sum#21]
Keys [2]: [d_week_seq#6, ss_store_sk#1]
Functions [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday   ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday   ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Tuesday  ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday   ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday ) THEN ss_sales_price#2 END))]
Aggregate Attributes [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday   ) THEN ss_sales_price#2 END))#23, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday   ) THEN ss_sales_price#2 END))#24, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Tuesday  ) THEN ss_sales_price#2 END))#25, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#2 END))#26, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday ) THEN ss_sales_price#2 END))#27, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday   ) THEN ss_sales_price#2 END))#28, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday ) THEN ss_sales_price#2 END))#29]
Results [9]: [d_week_seq#6, ss_store_sk#1, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday   ) THEN ss_sales_price#2 END))#23,17,2) AS sun_sales#30, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday   ) THEN ss_sales_price#2 END))#24,17,2) AS mon_sales#31, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Tuesday  ) THEN ss_sales_price#2 END))#25,17,2) AS tue_sales#32, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#2 END))#26,17,2) AS wed_sales#33, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday ) THEN ss_sales_price#2 END))#27,17,2) AS thu_sales#34, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday   ) THEN ss_sales_price#2 END))#28,17,2) AS fri_sales#35, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday ) THEN ss_sales_price#2 END))#29,17,2) AS sat_sales#36]

(10) Scan parquet default.store
Output [3]: [s_store_sk#37, s_store_id#38, s_store_name#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_store_id)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>

(11) ColumnarToRow [codegen id : 3]
Input [3]: [s_store_sk#37, s_store_id#38, s_store_name#39]

(12) Filter [codegen id : 3]
Input [3]: [s_store_sk#37, s_store_id#38, s_store_name#39]
Condition : (isnotnull(s_store_sk#37) AND isnotnull(s_store_id#38))

(13) BroadcastExchange
Input [3]: [s_store_sk#37, s_store_id#38, s_store_name#39]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#40]

(14) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#37]
Join condition: None

(15) Project [codegen id : 10]
Output [10]: [d_week_seq#6, sun_sales#30, mon_sales#31, tue_sales#32, wed_sales#33, thu_sales#34, fri_sales#35, sat_sales#36, s_store_id#38, s_store_name#39]
Input [12]: [d_week_seq#6, ss_store_sk#1, sun_sales#30, mon_sales#31, tue_sales#32, wed_sales#33, thu_sales#34, fri_sales#35, sat_sales#36, s_store_sk#37, s_store_id#38, s_store_name#39]

(16) Scan parquet default.date_dim
Output [2]: [d_month_seq#41, d_week_seq#42]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1185), LessThanOrEqual(d_month_seq,1196), IsNotNull(d_week_seq)]
ReadSchema: struct<d_month_seq:int,d_week_seq:int>

(17) ColumnarToRow [codegen id : 4]
Input [2]: [d_month_seq#41, d_week_seq#42]

(18) Filter [codegen id : 4]
Input [2]: [d_month_seq#41, d_week_seq#42]
Condition : (((isnotnull(d_month_seq#41) AND (d_month_seq#41 >= 1185)) AND (d_month_seq#41 <= 1196)) AND isnotnull(d_week_seq#42))

(19) Project [codegen id : 4]
Output [1]: [d_week_seq#42]
Input [2]: [d_month_seq#41, d_week_seq#42]

(20) BroadcastExchange
Input [1]: [d_week_seq#42]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#43]

(21) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [d_week_seq#6]
Right keys [1]: [d_week_seq#42]
Join condition: None

(22) Project [codegen id : 10]
Output [10]: [s_store_name#39 AS s_store_name1#44, d_week_seq#6 AS d_week_seq1#45, s_store_id#38 AS s_store_id1#46, sun_sales#30 AS sun_sales1#47, mon_sales#31 AS mon_sales1#48, tue_sales#32 AS tue_sales1#49, wed_sales#33 AS wed_sales1#50, thu_sales#34 AS thu_sales1#51, fri_sales#35 AS fri_sales1#52, sat_sales#36 AS sat_sales1#53]
Input [11]: [d_week_seq#6, sun_sales#30, mon_sales#31, tue_sales#32, wed_sales#33, thu_sales#34, fri_sales#35, sat_sales#36, s_store_id#38, s_store_name#39, d_week_seq#42]

(23) Scan parquet default.store_sales
Output [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_sales_price:decimal(7,2)>

(24) ColumnarToRow [codegen id : 6]
Input [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]

(25) Filter [codegen id : 6]
Input [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(26) ReusedExchange [Reuses operator id: 52]
Output [3]: [d_date_sk#5, d_week_seq#6, d_day_name#7]

(27) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join condition: None

(28) Project [codegen id : 6]
Output [4]: [ss_store_sk#1, ss_sales_price#2, d_week_seq#6, d_day_name#7]
Input [6]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3, d_date_sk#5, d_week_seq#6, d_day_name#7]

(29) HashAggregate [codegen id : 6]
Input [4]: [ss_store_sk#1, ss_sales_price#2, d_week_seq#6, d_day_name#7]
Keys [2]: [d_week_seq#6, ss_store_sk#1]
Functions [6]: [partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday   ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday   ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday   ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday ) THEN ss_sales_price#2 END))]
Aggregate Attributes [6]: [sum#54, sum#55, sum#56, sum#57, sum#58, sum#59]
Results [8]: [d_week_seq#6, ss_store_sk#1, sum#60, sum#61, sum#62, sum#63, sum#64, sum#65]

(30) Exchange
Input [8]: [d_week_seq#6, ss_store_sk#1, sum#60, sum#61, sum#62, sum#63, sum#64, sum#65]
Arguments: hashpartitioning(d_week_seq#6, ss_store_sk#1, 5), ENSURE_REQUIREMENTS, [id=#66]

(31) HashAggregate [codegen id : 9]
Input [8]: [d_week_seq#6, ss_store_sk#1, sum#60, sum#61, sum#62, sum#63, sum#64, sum#65]
Keys [2]: [d_week_seq#6, ss_store_sk#1]
Functions [6]: [sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday   ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday   ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday   ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday ) THEN ss_sales_price#2 END))]
Aggregate Attributes [6]: [sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday   ) THEN ss_sales_price#2 END))#23, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday   ) THEN ss_sales_price#2 END))#24, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#2 END))#26, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday ) THEN ss_sales_price#2 END))#27, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday   ) THEN ss_sales_price#2 END))#28, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday ) THEN ss_sales_price#2 END))#29]
Results [8]: [d_week_seq#6, ss_store_sk#1, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday   ) THEN ss_sales_price#2 END))#23,17,2) AS sun_sales#30, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday   ) THEN ss_sales_price#2 END))#24,17,2) AS mon_sales#31, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#2 END))#26,17,2) AS wed_sales#33, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday ) THEN ss_sales_price#2 END))#27,17,2) AS thu_sales#34, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday   ) THEN ss_sales_price#2 END))#28,17,2) AS fri_sales#35, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday ) THEN ss_sales_price#2 END))#29,17,2) AS sat_sales#36]

(32) Scan parquet default.store
Output [2]: [s_store_sk#67, s_store_id#68]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_store_id)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(33) ColumnarToRow [codegen id : 7]
Input [2]: [s_store_sk#67, s_store_id#68]

(34) Filter [codegen id : 7]
Input [2]: [s_store_sk#67, s_store_id#68]
Condition : (isnotnull(s_store_sk#67) AND isnotnull(s_store_id#68))

(35) BroadcastExchange
Input [2]: [s_store_sk#67, s_store_id#68]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69]

(36) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#67]
Join condition: None

(37) Project [codegen id : 9]
Output [8]: [d_week_seq#6, sun_sales#30, mon_sales#31, wed_sales#33, thu_sales#34, fri_sales#35, sat_sales#36, s_store_id#68]
Input [10]: [d_week_seq#6, ss_store_sk#1, sun_sales#30, mon_sales#31, wed_sales#33, thu_sales#34, fri_sales#35, sat_sales#36, s_store_sk#67, s_store_id#68]

(38) Scan parquet default.date_dim
Output [2]: [d_month_seq#70, d_week_seq#71]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1197), LessThanOrEqual(d_month_seq,1208), IsNotNull(d_week_seq)]
ReadSchema: struct<d_month_seq:int,d_week_seq:int>

(39) ColumnarToRow [codegen id : 8]
Input [2]: [d_month_seq#70, d_week_seq#71]

(40) Filter [codegen id : 8]
Input [2]: [d_month_seq#70, d_week_seq#71]
Condition : (((isnotnull(d_month_seq#70) AND (d_month_seq#70 >= 1197)) AND (d_month_seq#70 <= 1208)) AND isnotnull(d_week_seq#71))

(41) Project [codegen id : 8]
Output [1]: [d_week_seq#71]
Input [2]: [d_month_seq#70, d_week_seq#71]

(42) BroadcastExchange
Input [1]: [d_week_seq#71]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#72]

(43) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [d_week_seq#6]
Right keys [1]: [d_week_seq#71]
Join condition: None

(44) Project [codegen id : 9]
Output [8]: [d_week_seq#6 AS d_week_seq2#73, s_store_id#68 AS s_store_id2#74, sun_sales#30 AS sun_sales2#75, mon_sales#31 AS mon_sales2#76, wed_sales#33 AS wed_sales2#77, thu_sales#34 AS thu_sales2#78, fri_sales#35 AS fri_sales2#79, sat_sales#36 AS sat_sales2#80]
Input [9]: [d_week_seq#6, sun_sales#30, mon_sales#31, wed_sales#33, thu_sales#34, fri_sales#35, sat_sales#36, s_store_id#68, d_week_seq#71]

(45) BroadcastExchange
Input [8]: [d_week_seq2#73, s_store_id2#74, sun_sales2#75, mon_sales2#76, wed_sales2#77, thu_sales2#78, fri_sales2#79, sat_sales2#80]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true], (input[0, int, true] - 52)),false), [id=#81]

(46) BroadcastHashJoin [codegen id : 10]
Left keys [2]: [s_store_id1#46, d_week_seq1#45]
Right keys [2]: [s_store_id2#74, (d_week_seq2#73 - 52)]
Join condition: None

(47) Project [codegen id : 10]
Output [10]: [s_store_name1#44, s_store_id1#46, d_week_seq1#45, CheckOverflow((promote_precision(sun_sales1#47) / promote_precision(sun_sales2#75)), DecimalType(37,20), true) AS (sun_sales1 / sun_sales2)#82, CheckOverflow((promote_precision(mon_sales1#48) / promote_precision(mon_sales2#76)), DecimalType(37,20), true) AS (mon_sales1 / mon_sales2)#83, CheckOverflow((promote_precision(tue_sales1#49) / promote_precision(tue_sales1#49)), DecimalType(37,20), true) AS (tue_sales1 / tue_sales1)#84, CheckOverflow((promote_precision(wed_sales1#50) / promote_precision(wed_sales2#77)), DecimalType(37,20), true) AS (wed_sales1 / wed_sales2)#85, CheckOverflow((promote_precision(thu_sales1#51) / promote_precision(thu_sales2#78)), DecimalType(37,20), true) AS (thu_sales1 / thu_sales2)#86, CheckOverflow((promote_precision(fri_sales1#52) / promote_precision(fri_sales2#79)), DecimalType(37,20), true) AS (fri_sales1 / fri_sales2)#87, CheckOverflow((promote_precision(sat_sales1#53) / promote_precision(sat_sales2#80)), DecimalType(37,20), true) AS (sat_sales1 / sat_sales2)#88]
Input [18]: [s_store_name1#44, d_week_seq1#45, s_store_id1#46, sun_sales1#47, mon_sales1#48, tue_sales1#49, wed_sales1#50, thu_sales1#51, fri_sales1#52, sat_sales1#53, d_week_seq2#73, s_store_id2#74, sun_sales2#75, mon_sales2#76, wed_sales2#77, thu_sales2#78, fri_sales2#79, sat_sales2#80]

(48) TakeOrderedAndProject
Input [10]: [s_store_name1#44, s_store_id1#46, d_week_seq1#45, (sun_sales1 / sun_sales2)#82, (mon_sales1 / mon_sales2)#83, (tue_sales1 / tue_sales1)#84, (wed_sales1 / wed_sales2)#85, (thu_sales1 / thu_sales2)#86, (fri_sales1 / fri_sales2)#87, (sat_sales1 / sat_sales2)#88]
Arguments: 100, [s_store_name1#44 ASC NULLS FIRST, s_store_id1#46 ASC NULLS FIRST, d_week_seq1#45 ASC NULLS FIRST], [s_store_name1#44, s_store_id1#46, d_week_seq1#45, (sun_sales1 / sun_sales2)#82, (mon_sales1 / mon_sales2)#83, (tue_sales1 / tue_sales1)#84, (wed_sales1 / wed_sales2)#85, (thu_sales1 / thu_sales2)#86, (fri_sales1 / fri_sales2)#87, (sat_sales1 / sat_sales2)#88]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (52)
+- * Filter (51)
   +- * ColumnarToRow (50)
      +- Scan parquet default.date_dim (49)


(49) Scan parquet default.date_dim
Output [3]: [d_date_sk#5, d_week_seq#6, d_day_name#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk), IsNotNull(d_week_seq)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int,d_day_name:string>

(50) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#5, d_week_seq#6, d_day_name#7]

(51) Filter [codegen id : 1]
Input [3]: [d_date_sk#5, d_week_seq#6, d_day_name#7]
Condition : (isnotnull(d_date_sk#5) AND isnotnull(d_week_seq#6))

(52) BroadcastExchange
Input [3]: [d_date_sk#5, d_week_seq#6, d_day_name#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#89]

Subquery:2 Hosting operator id = 23 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4


