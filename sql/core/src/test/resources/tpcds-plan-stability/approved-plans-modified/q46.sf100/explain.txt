== Physical Plan ==
TakeOrderedAndProject (49)
+- * Project (48)
   +- * SortMergeJoin Inner (47)
      :- * Sort (41)
      :  +- Exchange (40)
      :     +- CartesianProduct Inner (39)
      :        :- * HashAggregate (35)
      :        :  +- * HashAggregate (34)
      :        :     +- * Project (33)
      :        :        +- * BroadcastHashJoin Inner BuildRight (32)
      :        :           :- * Project (26)
      :        :           :  +- * BroadcastHashJoin Inner BuildRight (25)
      :        :           :     :- * Project (19)
      :        :           :     :  +- * BroadcastHashJoin Inner BuildRight (18)
      :        :           :     :     :- * Project (12)
      :        :           :     :     :  +- * SortMergeJoin Inner (11)
      :        :           :     :     :     :- * Sort (5)
      :        :           :     :     :     :  +- Exchange (4)
      :        :           :     :     :     :     +- * Filter (3)
      :        :           :     :     :     :        +- * ColumnarToRow (2)
      :        :           :     :     :     :           +- Scan parquet default.store_sales (1)
      :        :           :     :     :     +- * Sort (10)
      :        :           :     :     :        +- Exchange (9)
      :        :           :     :     :           +- * Filter (8)
      :        :           :     :     :              +- * ColumnarToRow (7)
      :        :           :     :     :                 +- Scan parquet default.customer_address (6)
      :        :           :     :     +- BroadcastExchange (17)
      :        :           :     :        +- * Project (16)
      :        :           :     :           +- * Filter (15)
      :        :           :     :              +- * ColumnarToRow (14)
      :        :           :     :                 +- Scan parquet default.household_demographics (13)
      :        :           :     +- BroadcastExchange (24)
      :        :           :        +- * Project (23)
      :        :           :           +- * Filter (22)
      :        :           :              +- * ColumnarToRow (21)
      :        :           :                 +- Scan parquet default.store (20)
      :        :           +- BroadcastExchange (31)
      :        :              +- * Project (30)
      :        :                 +- * Filter (29)
      :        :                    +- * ColumnarToRow (28)
      :        :                       +- Scan parquet default.date_dim (27)
      :        +- * Filter (38)
      :           +- * ColumnarToRow (37)
      :              +- Scan parquet default.customer_address (36)
      +- * Sort (46)
         +- Exchange (45)
            +- * Filter (44)
               +- * ColumnarToRow (43)
                  +- Scan parquet default.customer (42)


(1) Scan parquet default.store_sales
Output [8]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [In(ss_sold_date_sksNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_coupon_amt:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [8]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]

(3) Filter [codegen id : 1]
Input [8]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]
Condition : (((((ss_sold_date_sk#1 INSET (2451790,2451609,2451294,2451658,2452099,2451482,2451700,2452035,2452274,2451258,2451847,2451714,2451937,2451860,2451601,2451573,2451686,2452008,2451454,2451882,2451832,2452259,2451671,2451903,2451497,2452162,2451322,2451517,2451434,2451273,2451405,2452105,2451924,2452050,2452126,2452203,2451818,2451559,2451853,2451238,2451209,2451357,2451959,2452239,2451608,2452141,2452252,2451623,2451867,2451504,2451910,2452232,2451874,2451581,2451329,2451223,2451783,2452267,2452042,2451895,2451986,2452091,2451693,2451265,2451678,2451825,2451244,2451490,2451287,2451419,2451546,2451245,2451713,2452070,2451189,2451804,2451468,2451525,2451902,2452077,2452161,2451378,2451567,2451931,2451699,2451251,2451840,2452253,2451938,2451510,2452231,2452036,2451616,2451230,2452112,2451846,2451966,2451538,2451819,2452140,2452183,2451496,2451791,2451595,2451574,2451363,2451994,2451917,2451602,2452273,2451237,2451350,2451685,2451259,2451286,2451972,2452224,2451370,2452245,2451643,2451993,2451315,2451301,2451560,2451433,2452225,2451532,2451755,2451854,2451545,2451210,2451587,2451987,2451447,2452197,2451552,2451896,2451679,2452147,2451735,2452022,2451707,2451868,2451398,2451777,2451181,2451503,2451839,2452175,2451441,2452154,2452029,2452196,2451952,2451805,2451965,2451539,2452001,2451833,2451392,2451524,2451461,2452133,2451448,2451307,2451615,2451769,2451412,2451349,2451651,2451763,2451203,2452064,2451980,2451748,2451637,2452182,2451279,2451231,2451734,2451692,2452071,2451336,2451300,2451727,2451630,2452189,2451875,2451973,2451328,2452084,2451399,2451944,2452204,2451385,2451776,2451384,2451272,2451812,2451749,2451566,2451182,2451945,2451420,2451930,2452057,2451756,2451644,2451314,2451364,2452007,2451798,2451475,2452015,2451440,2452000,2451588,2452148,2451195,2452217,2451371,2452176,2451531,2452134,2452211,2451462,2451188,2451741,2452119,2451342,2451580,2451672,2451889,2451280,2451406,2451293,2451217,2452049,2452106,2451321,2451335,2451483,2452260,2451657,2451979,2451518,2451629,2451728,2451923,2451861,2451951,2452246,2451455,2451356,2451224,2452210,2452021,2451427,2451202,2452098,2452168,2451553,2451391,2451706,2452155,2451196,2451770,2452127,2451762,2452078,2451958,2451721,2451665,2452120,2451252,2452085,2452092,2451476,2452218,2452169,2451797,2451650,2451881,2451511,2451469,2451888,2452043,2452266,2451664,2452014,2451343,2452056,2452190,2452063,2451636,2451742,2451811,2451720,2451308,2451489,2451413,2451216,2451594,2452238,2451784,2451426,2451622,2451916,2452113,2451909,2451266,2451826,2451377,2452028) AND isnotnull(ss_sold_date_sk#1)) AND isnotnull(ss_store_sk#5)) AND isnotnull(ss_hdemo_sk#3)) AND isnotnull(ss_addr_sk#4)) AND isnotnull(ss_customer_sk#2))

(4) Exchange
Input [8]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]
Arguments: hashpartitioning(ss_addr_sk#4, 5), ENSURE_REQUIREMENTS, [id=#9]

(5) Sort [codegen id : 2]
Input [8]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]
Arguments: [ss_addr_sk#4 ASC NULLS FIRST], false, 0

(6) Scan parquet default.customer_address
Output [2]: [ca_address_sk#10, ca_city#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_city)]
ReadSchema: struct<ca_address_sk:int,ca_city:string>

(7) ColumnarToRow [codegen id : 3]
Input [2]: [ca_address_sk#10, ca_city#11]

(8) Filter [codegen id : 3]
Input [2]: [ca_address_sk#10, ca_city#11]
Condition : (isnotnull(ca_address_sk#10) AND isnotnull(ca_city#11))

(9) Exchange
Input [2]: [ca_address_sk#10, ca_city#11]
Arguments: hashpartitioning(ca_address_sk#10, 5), ENSURE_REQUIREMENTS, [id=#12]

(10) Sort [codegen id : 4]
Input [2]: [ca_address_sk#10, ca_city#11]
Arguments: [ca_address_sk#10 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_addr_sk#4]
Right keys [1]: [ca_address_sk#10]
Join condition: None

(12) Project [codegen id : 8]
Output [9]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, ca_city#11]
Input [10]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, ca_address_sk#10, ca_city#11]

(13) Scan parquet default.household_demographics
Output [3]: [hd_demo_sk#13, hd_dep_count#14, hd_vehicle_count#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [Or(EqualTo(hd_dep_count,5),EqualTo(hd_vehicle_count,3)), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>

(14) ColumnarToRow [codegen id : 5]
Input [3]: [hd_demo_sk#13, hd_dep_count#14, hd_vehicle_count#15]

(15) Filter [codegen id : 5]
Input [3]: [hd_demo_sk#13, hd_dep_count#14, hd_vehicle_count#15]
Condition : (((hd_dep_count#14 = 5) OR (hd_vehicle_count#15 = 3)) AND isnotnull(hd_demo_sk#13))

(16) Project [codegen id : 5]
Output [1]: [hd_demo_sk#13]
Input [3]: [hd_demo_sk#13, hd_dep_count#14, hd_vehicle_count#15]

(17) BroadcastExchange
Input [1]: [hd_demo_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(18) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_hdemo_sk#3]
Right keys [1]: [hd_demo_sk#13]
Join condition: None

(19) Project [codegen id : 8]
Output [8]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, ca_city#11]
Input [10]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, ca_city#11, hd_demo_sk#13]

(20) Scan parquet default.store
Output [2]: [s_store_sk#17, s_city#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [In(s_city, [Midway,Concord,Spring Hill,Brownsville,Greenville]), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_city:string>

(21) ColumnarToRow [codegen id : 6]
Input [2]: [s_store_sk#17, s_city#18]

(22) Filter [codegen id : 6]
Input [2]: [s_store_sk#17, s_city#18]
Condition : (s_city#18 IN (Midway,Concord,Spring Hill,Brownsville,Greenville) AND isnotnull(s_store_sk#17))

(23) Project [codegen id : 6]
Output [1]: [s_store_sk#17]
Input [2]: [s_store_sk#17, s_city#18]

(24) BroadcastExchange
Input [1]: [s_store_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#19]

(25) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_store_sk#5]
Right keys [1]: [s_store_sk#17]
Join condition: None

(26) Project [codegen id : 8]
Output [7]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_addr_sk#4, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, ca_city#11]
Input [9]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, ca_city#11, s_store_sk#17]

(27) Scan parquet default.date_dim
Output [3]: [d_date_sk#20, d_year#21, d_dow#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_dow, [6,0]), In(d_year, [1999,2000,2001]), In(d_date_sksNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int>

(28) ColumnarToRow [codegen id : 7]
Input [3]: [d_date_sk#20, d_year#21, d_dow#22]

(29) Filter [codegen id : 7]
Input [3]: [d_date_sk#20, d_year#21, d_dow#22]
Condition : (((d_dow#22 IN (6,0) AND d_year#21 IN (1999,2000,2001)) AND d_date_sk#20 INSET (2451790,2451609,2451294,2451658,2452099,2451482,2451700,2452035,2452274,2451258,2451847,2451714,2451937,2451860,2451601,2451573,2451686,2452008,2451454,2451882,2451832,2452259,2451671,2451903,2451497,2452162,2451322,2451517,2451434,2451273,2451405,2452105,2451924,2452050,2452126,2452203,2451818,2451559,2451853,2451238,2451209,2451357,2451959,2452239,2451608,2452141,2452252,2451623,2451867,2451504,2451910,2452232,2451874,2451581,2451329,2451223,2451783,2452267,2452042,2451895,2451986,2452091,2451693,2451265,2451678,2451825,2451244,2451490,2451287,2451419,2451546,2451245,2451713,2452070,2451189,2451804,2451468,2451525,2451902,2452077,2452161,2451378,2451567,2451931,2451699,2451251,2451840,2452253,2451938,2451510,2452231,2452036,2451616,2451230,2452112,2451846,2451966,2451538,2451819,2452140,2452183,2451496,2451791,2451595,2451574,2451363,2451994,2451917,2451602,2452273,2451237,2451350,2451685,2451259,2451286,2451972,2452224,2451370,2452245,2451643,2451993,2451315,2451301,2451560,2451433,2452225,2451532,2451755,2451854,2451545,2451210,2451587,2451987,2451447,2452197,2451552,2451896,2451679,2452147,2451735,2452022,2451707,2451868,2451398,2451777,2451181,2451503,2451839,2452175,2451441,2452154,2452029,2452196,2451952,2451805,2451965,2451539,2452001,2451833,2451392,2451524,2451461,2452133,2451448,2451307,2451615,2451769,2451412,2451349,2451651,2451763,2451203,2452064,2451980,2451748,2451637,2452182,2451279,2451231,2451734,2451692,2452071,2451336,2451300,2451727,2451630,2452189,2451875,2451973,2451328,2452084,2451399,2451944,2452204,2451385,2451776,2451384,2451272,2451812,2451749,2451566,2451182,2451945,2451420,2451930,2452057,2451756,2451644,2451314,2451364,2452007,2451798,2451475,2452015,2451440,2452000,2451588,2452148,2451195,2452217,2451371,2452176,2451531,2452134,2452211,2451462,2451188,2451741,2452119,2451342,2451580,2451672,2451889,2451280,2451406,2451293,2451217,2452049,2452106,2451321,2451335,2451483,2452260,2451657,2451979,2451518,2451629,2451728,2451923,2451861,2451951,2452246,2451455,2451356,2451224,2452210,2452021,2451427,2451202,2452098,2452168,2451553,2451391,2451706,2452155,2451196,2451770,2452127,2451762,2452078,2451958,2451721,2451665,2452120,2451252,2452085,2452092,2451476,2452218,2452169,2451797,2451650,2451881,2451511,2451469,2451888,2452043,2452266,2451664,2452014,2451343,2452056,2452190,2452063,2451636,2451742,2451811,2451720,2451308,2451489,2451413,2451216,2451594,2452238,2451784,2451426,2451622,2451916,2452113,2451909,2451266,2451826,2451377,2452028)) AND isnotnull(d_date_sk#20))

(30) Project [codegen id : 7]
Output [1]: [d_date_sk#20]
Input [3]: [d_date_sk#20, d_year#21, d_dow#22]

(31) BroadcastExchange
Input [1]: [d_date_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#23]

(32) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#20]
Join condition: None

(33) Project [codegen id : 8]
Output [6]: [ss_customer_sk#2, ss_addr_sk#4, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, ca_city#11]
Input [8]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_addr_sk#4, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, ca_city#11, d_date_sk#20]

(34) HashAggregate [codegen id : 8]
Input [6]: [ss_customer_sk#2, ss_addr_sk#4, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, ca_city#11]
Keys [4]: [ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, ca_city#11]
Functions [2]: [partial_sum(UnscaledValue(ss_coupon_amt#7)), partial_sum(UnscaledValue(ss_net_profit#8))]
Aggregate Attributes [2]: [sum#24, sum#25]
Results [6]: [ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, ca_city#11, sum#26, sum#27]

(35) HashAggregate [codegen id : 8]
Input [6]: [ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, ca_city#11, sum#26, sum#27]
Keys [4]: [ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, ca_city#11]
Functions [2]: [sum(UnscaledValue(ss_coupon_amt#7)), sum(UnscaledValue(ss_net_profit#8))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_coupon_amt#7))#28, sum(UnscaledValue(ss_net_profit#8))#29]
Results [5]: [ss_ticket_number#6, ss_customer_sk#2, ca_city#11 AS bought_city#30, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#7))#28,17,2) AS amt#31, MakeDecimal(sum(UnscaledValue(ss_net_profit#8))#29,17,2) AS profit#32]

(36) Scan parquet default.customer_address
Output [2]: [ca_address_sk#10, ca_city#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_city)]
ReadSchema: struct<ca_address_sk:int,ca_city:string>

(37) ColumnarToRow [codegen id : 9]
Input [2]: [ca_address_sk#10, ca_city#11]

(38) Filter [codegen id : 9]
Input [2]: [ca_address_sk#10, ca_city#11]
Condition : (isnotnull(ca_address_sk#10) AND isnotnull(ca_city#11))

(39) CartesianProduct
Join condition: NOT (ca_city#11 = bought_city#30)

(40) Exchange
Input [7]: [ss_ticket_number#6, ss_customer_sk#2, bought_city#30, amt#31, profit#32, ca_address_sk#10, ca_city#11]
Arguments: hashpartitioning(ss_customer_sk#2, ca_address_sk#10, 5), ENSURE_REQUIREMENTS, [id=#33]

(41) Sort [codegen id : 10]
Input [7]: [ss_ticket_number#6, ss_customer_sk#2, bought_city#30, amt#31, profit#32, ca_address_sk#10, ca_city#11]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST, ca_address_sk#10 ASC NULLS FIRST], false, 0

(42) Scan parquet default.customer
Output [4]: [c_customer_sk#34, c_current_addr_sk#35, c_first_name#36, c_last_name#37]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string>

(43) ColumnarToRow [codegen id : 11]
Input [4]: [c_customer_sk#34, c_current_addr_sk#35, c_first_name#36, c_last_name#37]

(44) Filter [codegen id : 11]
Input [4]: [c_customer_sk#34, c_current_addr_sk#35, c_first_name#36, c_last_name#37]
Condition : (isnotnull(c_customer_sk#34) AND isnotnull(c_current_addr_sk#35))

(45) Exchange
Input [4]: [c_customer_sk#34, c_current_addr_sk#35, c_first_name#36, c_last_name#37]
Arguments: hashpartitioning(c_customer_sk#34, c_current_addr_sk#35, 5), ENSURE_REQUIREMENTS, [id=#38]

(46) Sort [codegen id : 12]
Input [4]: [c_customer_sk#34, c_current_addr_sk#35, c_first_name#36, c_last_name#37]
Arguments: [c_customer_sk#34 ASC NULLS FIRST, c_current_addr_sk#35 ASC NULLS FIRST], false, 0

(47) SortMergeJoin [codegen id : 13]
Left keys [2]: [ss_customer_sk#2, ca_address_sk#10]
Right keys [2]: [c_customer_sk#34, c_current_addr_sk#35]
Join condition: None

(48) Project [codegen id : 13]
Output [7]: [c_last_name#37, c_first_name#36, ca_city#11, bought_city#30, ss_ticket_number#6, amt#31, profit#32]
Input [11]: [ss_ticket_number#6, ss_customer_sk#2, bought_city#30, amt#31, profit#32, ca_address_sk#10, ca_city#11, c_customer_sk#34, c_current_addr_sk#35, c_first_name#36, c_last_name#37]

(49) TakeOrderedAndProject
Input [7]: [c_last_name#37, c_first_name#36, ca_city#11, bought_city#30, ss_ticket_number#6, amt#31, profit#32]
Arguments: 100, [c_last_name#37 ASC NULLS FIRST, c_first_name#36 ASC NULLS FIRST, ca_city#11 ASC NULLS FIRST, bought_city#30 ASC NULLS FIRST, ss_ticket_number#6 ASC NULLS FIRST], [c_last_name#37, c_first_name#36, ca_city#11, bought_city#30, ss_ticket_number#6, amt#31, profit#32]

