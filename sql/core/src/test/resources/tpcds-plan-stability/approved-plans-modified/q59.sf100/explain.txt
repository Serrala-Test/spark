== Physical Plan ==
TakeOrderedAndProject (46)
+- * Project (45)
   +- * BroadcastHashJoin Inner BuildRight (44)
      :- * Project (21)
      :  +- * BroadcastHashJoin Inner BuildRight (20)
      :     :- * Project (18)
      :     :  +- * BroadcastHashJoin Inner BuildRight (17)
      :     :     :- * HashAggregate (12)
      :     :     :  +- Exchange (11)
      :     :     :     +- * HashAggregate (10)
      :     :     :        +- * Project (9)
      :     :     :           +- * BroadcastHashJoin Inner BuildRight (8)
      :     :     :              :- * Filter (3)
      :     :     :              :  +- * ColumnarToRow (2)
      :     :     :              :     +- Scan parquet spark_catalog.default.store_sales (1)
      :     :     :              +- BroadcastExchange (7)
      :     :     :                 +- * Filter (6)
      :     :     :                    +- * ColumnarToRow (5)
      :     :     :                       +- Scan parquet spark_catalog.default.date_dim (4)
      :     :     +- BroadcastExchange (16)
      :     :        +- * Filter (15)
      :     :           +- * ColumnarToRow (14)
      :     :              +- Scan parquet spark_catalog.default.store (13)
      :     +- ReusedExchange (19)
      +- BroadcastExchange (43)
         +- * Project (42)
            +- * BroadcastHashJoin Inner BuildRight (41)
               :- * Project (39)
               :  +- * BroadcastHashJoin Inner BuildRight (38)
               :     :- * HashAggregate (33)
               :     :  +- Exchange (32)
               :     :     +- * HashAggregate (31)
               :     :        +- * Project (30)
               :     :           +- * BroadcastHashJoin Inner BuildRight (29)
               :     :              :- * Filter (24)
               :     :              :  +- * ColumnarToRow (23)
               :     :              :     +- Scan parquet spark_catalog.default.store_sales (22)
               :     :              +- BroadcastExchange (28)
               :     :                 +- * Filter (27)
               :     :                    +- * ColumnarToRow (26)
               :     :                       +- Scan parquet spark_catalog.default.date_dim (25)
               :     +- BroadcastExchange (37)
               :        +- * Filter (36)
               :           +- * ColumnarToRow (35)
               :              +- Scan parquet spark_catalog.default.store (34)
               +- ReusedExchange (40)


(1) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]

(3) Filter [codegen id : 2]
Input [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(4) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#4, d_week_seq#5, d_day_name#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk), IsNotNull(d_week_seq)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int,d_day_name:string>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#4, d_week_seq#5, d_day_name#6]

(6) Filter [codegen id : 1]
Input [3]: [d_date_sk#4, d_week_seq#5, d_day_name#6]
Condition : ((isnotnull(d_date_sk#4) AND isnotnull(d_week_seq#5)) AND might_contain(runtimefilterexpression(Subquery scalar-subquery#7, [id=#8]), xxhash64(d_week_seq#5, 42)))

(7) BroadcastExchange
Input [3]: [d_date_sk#4, d_week_seq#5, d_day_name#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#4]
Join type: Inner
Join condition: None

(9) Project [codegen id : 2]
Output [4]: [ss_store_sk#1, ss_sales_price#2, d_week_seq#5, d_day_name#6]
Input [6]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3, d_date_sk#4, d_week_seq#5, d_day_name#6]

(10) HashAggregate [codegen id : 2]
Input [4]: [ss_store_sk#1, ss_sales_price#2, d_week_seq#5, d_day_name#6]
Keys [2]: [d_week_seq#5, ss_store_sk#1]
Functions [7]: [partial_sum(UnscaledValue(CASE WHEN (d_day_name#6 = Sunday   ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#6 = Monday   ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#6 = Tuesday  ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#6 = Wednesday) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#6 = Thursday ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#6 = Friday   ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#6 = Saturday ) THEN ss_sales_price#2 END))]
Aggregate Attributes [7]: [sum#9, sum#10, sum#11, sum#12, sum#13, sum#14, sum#15]
Results [9]: [d_week_seq#5, ss_store_sk#1, sum#16, sum#17, sum#18, sum#19, sum#20, sum#21, sum#22]

(11) Exchange
Input [9]: [d_week_seq#5, ss_store_sk#1, sum#16, sum#17, sum#18, sum#19, sum#20, sum#21, sum#22]
Arguments: hashpartitioning(d_week_seq#5, ss_store_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(12) HashAggregate [codegen id : 10]
Input [9]: [d_week_seq#5, ss_store_sk#1, sum#16, sum#17, sum#18, sum#19, sum#20, sum#21, sum#22]
Keys [2]: [d_week_seq#5, ss_store_sk#1]
Functions [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#6 = Sunday   ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#6 = Monday   ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#6 = Tuesday  ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#6 = Wednesday) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#6 = Thursday ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#6 = Friday   ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#6 = Saturday ) THEN ss_sales_price#2 END))]
Aggregate Attributes [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#6 = Sunday   ) THEN ss_sales_price#2 END))#23, sum(UnscaledValue(CASE WHEN (d_day_name#6 = Monday   ) THEN ss_sales_price#2 END))#24, sum(UnscaledValue(CASE WHEN (d_day_name#6 = Tuesday  ) THEN ss_sales_price#2 END))#25, sum(UnscaledValue(CASE WHEN (d_day_name#6 = Wednesday) THEN ss_sales_price#2 END))#26, sum(UnscaledValue(CASE WHEN (d_day_name#6 = Thursday ) THEN ss_sales_price#2 END))#27, sum(UnscaledValue(CASE WHEN (d_day_name#6 = Friday   ) THEN ss_sales_price#2 END))#28, sum(UnscaledValue(CASE WHEN (d_day_name#6 = Saturday ) THEN ss_sales_price#2 END))#29]
Results [9]: [d_week_seq#5, ss_store_sk#1, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#6 = Sunday   ) THEN ss_sales_price#2 END))#23,17,2) AS sun_sales#30, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#6 = Monday   ) THEN ss_sales_price#2 END))#24,17,2) AS mon_sales#31, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#6 = Tuesday  ) THEN ss_sales_price#2 END))#25,17,2) AS tue_sales#32, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#6 = Wednesday) THEN ss_sales_price#2 END))#26,17,2) AS wed_sales#33, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#6 = Thursday ) THEN ss_sales_price#2 END))#27,17,2) AS thu_sales#34, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#6 = Friday   ) THEN ss_sales_price#2 END))#28,17,2) AS fri_sales#35, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#6 = Saturday ) THEN ss_sales_price#2 END))#29,17,2) AS sat_sales#36]

(13) Scan parquet spark_catalog.default.store
Output [3]: [s_store_sk#37, s_store_id#38, s_store_name#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_store_id)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>

(14) ColumnarToRow [codegen id : 3]
Input [3]: [s_store_sk#37, s_store_id#38, s_store_name#39]

(15) Filter [codegen id : 3]
Input [3]: [s_store_sk#37, s_store_id#38, s_store_name#39]
Condition : (isnotnull(s_store_sk#37) AND isnotnull(s_store_id#38))

(16) BroadcastExchange
Input [3]: [s_store_sk#37, s_store_id#38, s_store_name#39]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(17) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#37]
Join type: Inner
Join condition: None

(18) Project [codegen id : 10]
Output [10]: [d_week_seq#5, sun_sales#30, mon_sales#31, tue_sales#32, wed_sales#33, thu_sales#34, fri_sales#35, sat_sales#36, s_store_id#38, s_store_name#39]
Input [12]: [d_week_seq#5, ss_store_sk#1, sun_sales#30, mon_sales#31, tue_sales#32, wed_sales#33, thu_sales#34, fri_sales#35, sat_sales#36, s_store_sk#37, s_store_id#38, s_store_name#39]

(19) ReusedExchange [Reuses operator id: 51]
Output [1]: [d_week_seq#40]

(20) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [d_week_seq#5]
Right keys [1]: [d_week_seq#40]
Join type: Inner
Join condition: None

(21) Project [codegen id : 10]
Output [10]: [s_store_name#39 AS s_store_name1#41, d_week_seq#5 AS d_week_seq1#42, s_store_id#38 AS s_store_id1#43, sun_sales#30 AS sun_sales1#44, mon_sales#31 AS mon_sales1#45, tue_sales#32 AS tue_sales1#46, wed_sales#33 AS wed_sales1#47, thu_sales#34 AS thu_sales1#48, fri_sales#35 AS fri_sales1#49, sat_sales#36 AS sat_sales1#50]
Input [11]: [d_week_seq#5, sun_sales#30, mon_sales#31, tue_sales#32, wed_sales#33, thu_sales#34, fri_sales#35, sat_sales#36, s_store_id#38, s_store_name#39, d_week_seq#40]

(22) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_store_sk#51, ss_sales_price#52, ss_sold_date_sk#53]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#53)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_sales_price:decimal(7,2)>

(23) ColumnarToRow [codegen id : 6]
Input [3]: [ss_store_sk#51, ss_sales_price#52, ss_sold_date_sk#53]

(24) Filter [codegen id : 6]
Input [3]: [ss_store_sk#51, ss_sales_price#52, ss_sold_date_sk#53]
Condition : isnotnull(ss_store_sk#51)

(25) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#54, d_week_seq#55, d_day_name#56]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk), IsNotNull(d_week_seq)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int,d_day_name:string>

(26) ColumnarToRow [codegen id : 5]
Input [3]: [d_date_sk#54, d_week_seq#55, d_day_name#56]

(27) Filter [codegen id : 5]
Input [3]: [d_date_sk#54, d_week_seq#55, d_day_name#56]
Condition : ((isnotnull(d_date_sk#54) AND isnotnull(d_week_seq#55)) AND might_contain(runtimefilterexpression(Subquery scalar-subquery#57, [id=#58]), xxhash64(d_week_seq#55, 42)))

(28) BroadcastExchange
Input [3]: [d_date_sk#54, d_week_seq#55, d_day_name#56]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=4]

(29) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#53]
Right keys [1]: [d_date_sk#54]
Join type: Inner
Join condition: None

(30) Project [codegen id : 6]
Output [4]: [ss_store_sk#51, ss_sales_price#52, d_week_seq#55, d_day_name#56]
Input [6]: [ss_store_sk#51, ss_sales_price#52, ss_sold_date_sk#53, d_date_sk#54, d_week_seq#55, d_day_name#56]

(31) HashAggregate [codegen id : 6]
Input [4]: [ss_store_sk#51, ss_sales_price#52, d_week_seq#55, d_day_name#56]
Keys [2]: [d_week_seq#55, ss_store_sk#51]
Functions [6]: [partial_sum(UnscaledValue(CASE WHEN (d_day_name#56 = Sunday   ) THEN ss_sales_price#52 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#56 = Monday   ) THEN ss_sales_price#52 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#56 = Wednesday) THEN ss_sales_price#52 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#56 = Thursday ) THEN ss_sales_price#52 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#56 = Friday   ) THEN ss_sales_price#52 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#56 = Saturday ) THEN ss_sales_price#52 END))]
Aggregate Attributes [6]: [sum#59, sum#60, sum#61, sum#62, sum#63, sum#64]
Results [8]: [d_week_seq#55, ss_store_sk#51, sum#65, sum#66, sum#67, sum#68, sum#69, sum#70]

(32) Exchange
Input [8]: [d_week_seq#55, ss_store_sk#51, sum#65, sum#66, sum#67, sum#68, sum#69, sum#70]
Arguments: hashpartitioning(d_week_seq#55, ss_store_sk#51, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(33) HashAggregate [codegen id : 9]
Input [8]: [d_week_seq#55, ss_store_sk#51, sum#65, sum#66, sum#67, sum#68, sum#69, sum#70]
Keys [2]: [d_week_seq#55, ss_store_sk#51]
Functions [6]: [sum(UnscaledValue(CASE WHEN (d_day_name#56 = Sunday   ) THEN ss_sales_price#52 END)), sum(UnscaledValue(CASE WHEN (d_day_name#56 = Monday   ) THEN ss_sales_price#52 END)), sum(UnscaledValue(CASE WHEN (d_day_name#56 = Wednesday) THEN ss_sales_price#52 END)), sum(UnscaledValue(CASE WHEN (d_day_name#56 = Thursday ) THEN ss_sales_price#52 END)), sum(UnscaledValue(CASE WHEN (d_day_name#56 = Friday   ) THEN ss_sales_price#52 END)), sum(UnscaledValue(CASE WHEN (d_day_name#56 = Saturday ) THEN ss_sales_price#52 END))]
Aggregate Attributes [6]: [sum(UnscaledValue(CASE WHEN (d_day_name#56 = Sunday   ) THEN ss_sales_price#52 END))#23, sum(UnscaledValue(CASE WHEN (d_day_name#56 = Monday   ) THEN ss_sales_price#52 END))#24, sum(UnscaledValue(CASE WHEN (d_day_name#56 = Wednesday) THEN ss_sales_price#52 END))#26, sum(UnscaledValue(CASE WHEN (d_day_name#56 = Thursday ) THEN ss_sales_price#52 END))#27, sum(UnscaledValue(CASE WHEN (d_day_name#56 = Friday   ) THEN ss_sales_price#52 END))#28, sum(UnscaledValue(CASE WHEN (d_day_name#56 = Saturday ) THEN ss_sales_price#52 END))#29]
Results [8]: [d_week_seq#55, ss_store_sk#51, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#56 = Sunday   ) THEN ss_sales_price#52 END))#23,17,2) AS sun_sales#71, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#56 = Monday   ) THEN ss_sales_price#52 END))#24,17,2) AS mon_sales#72, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#56 = Wednesday) THEN ss_sales_price#52 END))#26,17,2) AS wed_sales#73, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#56 = Thursday ) THEN ss_sales_price#52 END))#27,17,2) AS thu_sales#74, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#56 = Friday   ) THEN ss_sales_price#52 END))#28,17,2) AS fri_sales#75, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#56 = Saturday ) THEN ss_sales_price#52 END))#29,17,2) AS sat_sales#76]

(34) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#77, s_store_id#78]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_store_id)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(35) ColumnarToRow [codegen id : 7]
Input [2]: [s_store_sk#77, s_store_id#78]

(36) Filter [codegen id : 7]
Input [2]: [s_store_sk#77, s_store_id#78]
Condition : (isnotnull(s_store_sk#77) AND isnotnull(s_store_id#78))

(37) BroadcastExchange
Input [2]: [s_store_sk#77, s_store_id#78]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=6]

(38) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#51]
Right keys [1]: [s_store_sk#77]
Join type: Inner
Join condition: None

(39) Project [codegen id : 9]
Output [8]: [d_week_seq#55, sun_sales#71, mon_sales#72, wed_sales#73, thu_sales#74, fri_sales#75, sat_sales#76, s_store_id#78]
Input [10]: [d_week_seq#55, ss_store_sk#51, sun_sales#71, mon_sales#72, wed_sales#73, thu_sales#74, fri_sales#75, sat_sales#76, s_store_sk#77, s_store_id#78]

(40) ReusedExchange [Reuses operator id: 61]
Output [1]: [d_week_seq#79]

(41) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [d_week_seq#55]
Right keys [1]: [d_week_seq#79]
Join type: Inner
Join condition: None

(42) Project [codegen id : 9]
Output [8]: [d_week_seq#55 AS d_week_seq2#80, s_store_id#78 AS s_store_id2#81, sun_sales#71 AS sun_sales2#82, mon_sales#72 AS mon_sales2#83, wed_sales#73 AS wed_sales2#84, thu_sales#74 AS thu_sales2#85, fri_sales#75 AS fri_sales2#86, sat_sales#76 AS sat_sales2#87]
Input [9]: [d_week_seq#55, sun_sales#71, mon_sales#72, wed_sales#73, thu_sales#74, fri_sales#75, sat_sales#76, s_store_id#78, d_week_seq#79]

(43) BroadcastExchange
Input [8]: [d_week_seq2#80, s_store_id2#81, sun_sales2#82, mon_sales2#83, wed_sales2#84, thu_sales2#85, fri_sales2#86, sat_sales2#87]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true], (input[0, int, true] - 52)),false), [plan_id=7]

(44) BroadcastHashJoin [codegen id : 10]
Left keys [2]: [s_store_id1#43, d_week_seq1#42]
Right keys [2]: [s_store_id2#81, (d_week_seq2#80 - 52)]
Join type: Inner
Join condition: None

(45) Project [codegen id : 10]
Output [10]: [s_store_name1#41, s_store_id1#43, d_week_seq1#42, (sun_sales1#44 / sun_sales2#82) AS (sun_sales1 / sun_sales2)#88, (mon_sales1#45 / mon_sales2#83) AS (mon_sales1 / mon_sales2)#89, (tue_sales1#46 / tue_sales1#46) AS (tue_sales1 / tue_sales1)#90, (wed_sales1#47 / wed_sales2#84) AS (wed_sales1 / wed_sales2)#91, (thu_sales1#48 / thu_sales2#85) AS (thu_sales1 / thu_sales2)#92, (fri_sales1#49 / fri_sales2#86) AS (fri_sales1 / fri_sales2)#93, (sat_sales1#50 / sat_sales2#87) AS (sat_sales1 / sat_sales2)#94]
Input [18]: [s_store_name1#41, d_week_seq1#42, s_store_id1#43, sun_sales1#44, mon_sales1#45, tue_sales1#46, wed_sales1#47, thu_sales1#48, fri_sales1#49, sat_sales1#50, d_week_seq2#80, s_store_id2#81, sun_sales2#82, mon_sales2#83, wed_sales2#84, thu_sales2#85, fri_sales2#86, sat_sales2#87]

(46) TakeOrderedAndProject
Input [10]: [s_store_name1#41, s_store_id1#43, d_week_seq1#42, (sun_sales1 / sun_sales2)#88, (mon_sales1 / mon_sales2)#89, (tue_sales1 / tue_sales1)#90, (wed_sales1 / wed_sales2)#91, (thu_sales1 / thu_sales2)#92, (fri_sales1 / fri_sales2)#93, (sat_sales1 / sat_sales2)#94]
Arguments: 100, [s_store_name1#41 ASC NULLS FIRST, s_store_id1#43 ASC NULLS FIRST, d_week_seq1#42 ASC NULLS FIRST], [s_store_name1#41, s_store_id1#43, d_week_seq1#42, (sun_sales1 / sun_sales2)#88, (mon_sales1 / mon_sales2)#89, (tue_sales1 / tue_sales1)#90, (wed_sales1 / wed_sales2)#91, (thu_sales1 / thu_sales2)#92, (fri_sales1 / fri_sales2)#93, (sat_sales1 / sat_sales2)#94]

===== Subqueries =====

Subquery:1 Hosting operator id = 6 Hosting Expression = Subquery scalar-subquery#7, [id=#8]
ObjectHashAggregate (56)
+- Exchange (55)
   +- ObjectHashAggregate (54)
      +- BroadcastExchangeExecProxy (53)


(47) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_month_seq#95, d_week_seq#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1185), LessThanOrEqual(d_month_seq,1196), IsNotNull(d_week_seq)]
ReadSchema: struct<d_month_seq:int,d_week_seq:int>

(48) ColumnarToRow [codegen id : 1]
Input [2]: [d_month_seq#95, d_week_seq#40]

(49) Filter [codegen id : 1]
Input [2]: [d_month_seq#95, d_week_seq#40]
Condition : (((isnotnull(d_month_seq#95) AND (d_month_seq#95 >= 1185)) AND (d_month_seq#95 <= 1196)) AND isnotnull(d_week_seq#40))

(50) Project [codegen id : 1]
Output [1]: [d_week_seq#40]
Input [2]: [d_month_seq#95, d_week_seq#40]

(51) BroadcastExchange
Input [1]: [d_week_seq#40]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

(52) SubqueryBroadcast
Input [1]: [d_week_seq#40]
Arguments: runtimefilter#7, 0, [d_week_seq#40], [id=#96]

(53) BroadcastExchangeExecProxy
Input [1]: [d_week_seq#97]
Arguments: [d_week_seq#40]

(54) ObjectHashAggregate
Input [1]: [d_week_seq#40]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(d_week_seq#40, 42), 335, 8990, 0, 0)]
Aggregate Attributes [1]: [buf#98]
Results [1]: [buf#99]

(55) Exchange
Input [1]: [buf#99]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=9]

(56) ObjectHashAggregate
Input [1]: [buf#99]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(d_week_seq#40, 42), 335, 8990, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(d_week_seq#40, 42), 335, 8990, 0, 0)#100]
Results [1]: [bloom_filter_agg(xxhash64(d_week_seq#40, 42), 335, 8990, 0, 0)#100 AS bloomFilter#101]

Subquery:2 Hosting operator id = 27 Hosting Expression = Subquery scalar-subquery#57, [id=#58]
ObjectHashAggregate (66)
+- Exchange (65)
   +- ObjectHashAggregate (64)
      +- BroadcastExchangeExecProxy (63)


(57) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_month_seq#102, d_week_seq#79]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1197), LessThanOrEqual(d_month_seq,1208), IsNotNull(d_week_seq)]
ReadSchema: struct<d_month_seq:int,d_week_seq:int>

(58) ColumnarToRow [codegen id : 1]
Input [2]: [d_month_seq#102, d_week_seq#79]

(59) Filter [codegen id : 1]
Input [2]: [d_month_seq#102, d_week_seq#79]
Condition : (((isnotnull(d_month_seq#102) AND (d_month_seq#102 >= 1197)) AND (d_month_seq#102 <= 1208)) AND isnotnull(d_week_seq#79))

(60) Project [codegen id : 1]
Output [1]: [d_week_seq#79]
Input [2]: [d_month_seq#102, d_week_seq#79]

(61) BroadcastExchange
Input [1]: [d_week_seq#79]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=10]

(62) SubqueryBroadcast
Input [1]: [d_week_seq#79]
Arguments: runtimefilter#57, 0, [d_week_seq#79], [id=#103]

(63) BroadcastExchangeExecProxy
Input [1]: [d_week_seq#104]
Arguments: [d_week_seq#79]

(64) ObjectHashAggregate
Input [1]: [d_week_seq#79]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(d_week_seq#79, 42), 335, 8990, 0, 0)]
Aggregate Attributes [1]: [buf#105]
Results [1]: [buf#106]

(65) Exchange
Input [1]: [buf#106]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=11]

(66) ObjectHashAggregate
Input [1]: [buf#106]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(d_week_seq#79, 42), 335, 8990, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(d_week_seq#79, 42), 335, 8990, 0, 0)#107]
Results [1]: [bloom_filter_agg(xxhash64(d_week_seq#79, 42), 335, 8990, 0, 0)#107 AS bloomFilter#108]


