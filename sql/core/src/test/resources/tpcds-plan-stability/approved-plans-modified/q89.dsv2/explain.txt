== Physical Plan ==
TakeOrderedAndProject (30)
+- * Project (29)
   +- * Filter (28)
      +- Window (27)
         +- * Sort (26)
            +- Exchange (25)
               +- * HashAggregate (24)
                  +- Exchange (23)
                     +- * HashAggregate (22)
                        +- * Project (21)
                           +- * BroadcastHashJoin Inner BuildRight (20)
                              :- * Project (15)
                              :  +- * BroadcastHashJoin Inner BuildRight (14)
                              :     :- * Project (9)
                              :     :  +- * BroadcastHashJoin Inner BuildLeft (8)
                              :     :     :- BroadcastExchange (4)
                              :     :     :  +- * Project (3)
                              :     :     :     +- * Filter (2)
                              :     :     :        +- BatchScan default.item (1)
                              :     :     +- * Project (7)
                              :     :        +- * Filter (6)
                              :     :           +- BatchScan default.store_sales (5)
                              :     +- BroadcastExchange (13)
                              :        +- * Project (12)
                              :           +- * Filter (11)
                              :              +- BatchScan default.date_dim (10)
                              +- BroadcastExchange (19)
                                 +- * Project (18)
                                    +- * Filter (17)
                                       +- BatchScan default.store (16)


(1) BatchScan default.item
Output [4]: [i_item_sk#1, i_brand#2, i_class#3, i_category#4]
DataFilters: [((i_category#4 IN (Home                                              ,Books                                             ,Electronics                                       ) AND i_class#3 IN (wallpaper                                         ,parenting                                         ,musical                                           )) OR (i_category#4 IN (Shoes                                             ,Jewelry                                           ,Men                                               ) AND i_class#3 IN (womens                                            ,birdal                                            ,pants                                             ))), isnotnull(i_item_sk#1)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [Or(And(In(i_category, [Books                                             ,Electronics                                       ,Home                                              ]),In(i_class, [musical                                           ,parenting                                         ,wallpaper                                         ])),And(In(i_category, [Jewelry                                           ,Men                                               ,Shoes                                             ]),In(i_class, [birdal                                            ,pants                                             ,womens                                            ]))), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string>

(2) Filter [codegen id : 1]
Input [4]: [i_item_sk#1, i_brand#2, i_class#3, i_category#4]
Condition : (((i_category#4 IN (Home                                              ,Books                                             ,Electronics                                       ) AND i_class#3 IN (wallpaper                                         ,parenting                                         ,musical                                           )) OR (i_category#4 IN (Shoes                                             ,Jewelry                                           ,Men                                               ) AND i_class#3 IN (womens                                            ,birdal                                            ,pants                                             ))) AND isnotnull(i_item_sk#1))

(3) Project [codegen id : 1]
Output [4]: [i_item_sk#1, i_brand#2, i_class#3, i_category#4]
Input [4]: [i_item_sk#1, i_brand#2, i_class#3, i_category#4]

(4) BroadcastExchange
Input [4]: [i_item_sk#1, i_brand#2, i_class#3, i_category#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(5) BatchScan default.store_sales
Output [4]: [ss_item_sk#5, ss_store_sk#6, ss_sales_price#7, ss_sold_date_sk#8]
DataFilters: [isnotnull(ss_item_sk#5), isnotnull(ss_store_sk#6)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_sales]
PartitionFilters: [isnotnull(ss_sold_date_sk#8), (ss_sold_date_sk#8 >= 2451545), (ss_sold_date_sk#8 <= 2451910)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(6) Filter
Input [4]: [ss_item_sk#5, ss_store_sk#6, ss_sales_price#7, ss_sold_date_sk#8]
Condition : (isnotnull(ss_item_sk#5) AND isnotnull(ss_store_sk#6))

(7) Project
Output [4]: [ss_item_sk#5, ss_store_sk#6, ss_sales_price#7, ss_sold_date_sk#8]
Input [4]: [ss_item_sk#5, ss_store_sk#6, ss_sales_price#7, ss_sold_date_sk#8]

(8) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [i_item_sk#1]
Right keys [1]: [ss_item_sk#5]
Join type: Inner
Join condition: None

(9) Project [codegen id : 4]
Output [6]: [i_brand#2, i_class#3, i_category#4, ss_store_sk#6, ss_sales_price#7, ss_sold_date_sk#8]
Input [8]: [i_item_sk#1, i_brand#2, i_class#3, i_category#4, ss_item_sk#5, ss_store_sk#6, ss_sales_price#7, ss_sold_date_sk#8]

(10) BatchScan default.date_dim
Output [3]: [d_date_sk#9, d_year#10, d_moy#11]
DataFilters: [isnotnull(d_year#10), (d_year#10 = 2000), (d_date_sk#9 >= 2451545), (d_date_sk#9 <= 2451910), isnotnull(d_date_sk#9)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), GreaterThanOrEqual(d_date_sk,2451545), LessThanOrEqual(d_date_sk,2451910), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(11) Filter [codegen id : 2]
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]
Condition : ((((isnotnull(d_year#10) AND (d_year#10 = 2000)) AND (d_date_sk#9 >= 2451545)) AND (d_date_sk#9 <= 2451910)) AND isnotnull(d_date_sk#9))

(12) Project [codegen id : 2]
Output [2]: [d_date_sk#9, d_moy#11]
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]

(13) BroadcastExchange
Input [2]: [d_date_sk#9, d_moy#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(14) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#9]
Join type: Inner
Join condition: None

(15) Project [codegen id : 4]
Output [6]: [i_brand#2, i_class#3, i_category#4, ss_store_sk#6, ss_sales_price#7, d_moy#11]
Input [8]: [i_brand#2, i_class#3, i_category#4, ss_store_sk#6, ss_sales_price#7, ss_sold_date_sk#8, d_date_sk#9, d_moy#11]

(16) BatchScan default.store
Output [3]: [s_store_sk#12, s_store_name#13, s_company_name#14]
DataFilters: [isnotnull(s_store_sk#12)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_company_name:string>

(17) Filter [codegen id : 3]
Input [3]: [s_store_sk#12, s_store_name#13, s_company_name#14]
Condition : isnotnull(s_store_sk#12)

(18) Project [codegen id : 3]
Output [3]: [s_store_sk#12, s_store_name#13, s_company_name#14]
Input [3]: [s_store_sk#12, s_store_name#13, s_company_name#14]

(19) BroadcastExchange
Input [3]: [s_store_sk#12, s_store_name#13, s_company_name#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(20) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#6]
Right keys [1]: [s_store_sk#12]
Join type: Inner
Join condition: None

(21) Project [codegen id : 4]
Output [7]: [i_brand#2, i_class#3, i_category#4, ss_sales_price#7, d_moy#11, s_store_name#13, s_company_name#14]
Input [9]: [i_brand#2, i_class#3, i_category#4, ss_store_sk#6, ss_sales_price#7, d_moy#11, s_store_sk#12, s_store_name#13, s_company_name#14]

(22) HashAggregate [codegen id : 4]
Input [7]: [i_brand#2, i_class#3, i_category#4, ss_sales_price#7, d_moy#11, s_store_name#13, s_company_name#14]
Keys [6]: [i_category#4, i_class#3, i_brand#2, s_store_name#13, s_company_name#14, d_moy#11]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#7))]
Aggregate Attributes [1]: [sum#15]
Results [7]: [i_category#4, i_class#3, i_brand#2, s_store_name#13, s_company_name#14, d_moy#11, sum#16]

(23) Exchange
Input [7]: [i_category#4, i_class#3, i_brand#2, s_store_name#13, s_company_name#14, d_moy#11, sum#16]
Arguments: hashpartitioning(i_category#4, i_class#3, i_brand#2, s_store_name#13, s_company_name#14, d_moy#11, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(24) HashAggregate [codegen id : 5]
Input [7]: [i_category#4, i_class#3, i_brand#2, s_store_name#13, s_company_name#14, d_moy#11, sum#16]
Keys [6]: [i_category#4, i_class#3, i_brand#2, s_store_name#13, s_company_name#14, d_moy#11]
Functions [1]: [sum(UnscaledValue(ss_sales_price#7))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#7))#17]
Results [8]: [i_category#4, i_class#3, i_brand#2, s_store_name#13, s_company_name#14, d_moy#11, MakeDecimal(sum(UnscaledValue(ss_sales_price#7))#17,17,2) AS sum_sales#18, MakeDecimal(sum(UnscaledValue(ss_sales_price#7))#17,17,2) AS _w0#19]

(25) Exchange
Input [8]: [i_category#4, i_class#3, i_brand#2, s_store_name#13, s_company_name#14, d_moy#11, sum_sales#18, _w0#19]
Arguments: hashpartitioning(i_category#4, i_brand#2, s_store_name#13, s_company_name#14, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(26) Sort [codegen id : 6]
Input [8]: [i_category#4, i_class#3, i_brand#2, s_store_name#13, s_company_name#14, d_moy#11, sum_sales#18, _w0#19]
Arguments: [i_category#4 ASC NULLS FIRST, i_brand#2 ASC NULLS FIRST, s_store_name#13 ASC NULLS FIRST, s_company_name#14 ASC NULLS FIRST], false, 0

(27) Window
Input [8]: [i_category#4, i_class#3, i_brand#2, s_store_name#13, s_company_name#14, d_moy#11, sum_sales#18, _w0#19]
Arguments: [avg(_w0#19) windowspecdefinition(i_category#4, i_brand#2, s_store_name#13, s_company_name#14, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#20], [i_category#4, i_brand#2, s_store_name#13, s_company_name#14]

(28) Filter [codegen id : 7]
Input [9]: [i_category#4, i_class#3, i_brand#2, s_store_name#13, s_company_name#14, d_moy#11, sum_sales#18, _w0#19, avg_monthly_sales#20]
Condition : CASE WHEN NOT (avg_monthly_sales#20 = 0.000000) THEN ((abs((sum_sales#18 - avg_monthly_sales#20)) / avg_monthly_sales#20) > 0.1000000000000000) END

(29) Project [codegen id : 7]
Output [8]: [i_category#4, i_class#3, i_brand#2, s_store_name#13, s_company_name#14, d_moy#11, sum_sales#18, avg_monthly_sales#20]
Input [9]: [i_category#4, i_class#3, i_brand#2, s_store_name#13, s_company_name#14, d_moy#11, sum_sales#18, _w0#19, avg_monthly_sales#20]

(30) TakeOrderedAndProject
Input [8]: [i_category#4, i_class#3, i_brand#2, s_store_name#13, s_company_name#14, d_moy#11, sum_sales#18, avg_monthly_sales#20]
Arguments: 100, [(sum_sales#18 - avg_monthly_sales#20) ASC NULLS FIRST, s_store_name#13 ASC NULLS FIRST], [i_category#4, i_class#3, i_brand#2, s_store_name#13, s_company_name#14, d_moy#11, sum_sales#18, avg_monthly_sales#20]

