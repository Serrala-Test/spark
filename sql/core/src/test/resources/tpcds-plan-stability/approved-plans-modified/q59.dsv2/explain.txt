== Physical Plan ==
TakeOrderedAndProject (55)
+- * Project (54)
   +- * SortMergeJoin Inner (53)
      :- * Sort (26)
      :  +- Exchange (25)
      :     +- * Project (24)
      :        +- * BroadcastHashJoin Inner BuildRight (23)
      :           :- * Project (18)
      :           :  +- * BroadcastHashJoin Inner BuildRight (17)
      :           :     :- * HashAggregate (12)
      :           :     :  +- Exchange (11)
      :           :     :     +- * HashAggregate (10)
      :           :     :        +- * Project (9)
      :           :     :           +- * BroadcastHashJoin Inner BuildRight (8)
      :           :     :              :- * Project (3)
      :           :     :              :  +- * Filter (2)
      :           :     :              :     +- BatchScan default.store_sales (1)
      :           :     :              +- BroadcastExchange (7)
      :           :     :                 +- * Project (6)
      :           :     :                    +- * Filter (5)
      :           :     :                       +- BatchScan default.date_dim (4)
      :           :     +- BroadcastExchange (16)
      :           :        +- * Project (15)
      :           :           +- * Filter (14)
      :           :              +- BatchScan default.store (13)
      :           +- BroadcastExchange (22)
      :              +- * Project (21)
      :                 +- * Filter (20)
      :                    +- BatchScan default.date_dim (19)
      +- * Sort (52)
         +- Exchange (51)
            +- * Project (50)
               +- * BroadcastHashJoin Inner BuildRight (49)
                  :- * Project (44)
                  :  +- * BroadcastHashJoin Inner BuildRight (43)
                  :     :- * HashAggregate (38)
                  :     :  +- Exchange (37)
                  :     :     +- * HashAggregate (36)
                  :     :        +- * Project (35)
                  :     :           +- * BroadcastHashJoin Inner BuildRight (34)
                  :     :              :- * Project (29)
                  :     :              :  +- * Filter (28)
                  :     :              :     +- BatchScan default.store_sales (27)
                  :     :              +- BroadcastExchange (33)
                  :     :                 +- * Project (32)
                  :     :                    +- * Filter (31)
                  :     :                       +- BatchScan default.date_dim (30)
                  :     +- BroadcastExchange (42)
                  :        +- * Project (41)
                  :           +- * Filter (40)
                  :              +- BatchScan default.store (39)
                  +- BroadcastExchange (48)
                     +- * Project (47)
                        +- * Filter (46)
                           +- BatchScan default.date_dim (45)


(1) BatchScan default.store_sales
Output [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]
DataFilters: [isnotnull(ss_store_sk#1)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_sales]
PartitionFilters: [isnotnull(ss_sold_date_sk#3)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_sales_price:decimal(7,2)>

(2) Filter [codegen id : 2]
Input [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(3) Project [codegen id : 2]
Output [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]
Input [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]

(4) BatchScan default.date_dim
Output [3]: [d_date_sk#4, d_week_seq#5, d_day_name#6]
DataFilters: [isnotnull(d_date_sk#4), isnotnull(d_week_seq#5)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk), IsNotNull(d_week_seq)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int,d_day_name:string>

(5) Filter [codegen id : 1]
Input [3]: [d_date_sk#4, d_week_seq#5, d_day_name#6]
Condition : ((isnotnull(d_date_sk#4) AND isnotnull(d_week_seq#5)) AND might_contain(Subquery scalar-subquery#7, [id=#8], xxhash64(d_week_seq#5, 42)))

(6) Project [codegen id : 1]
Output [3]: [d_date_sk#4, d_week_seq#5, d_day_name#6]
Input [3]: [d_date_sk#4, d_week_seq#5, d_day_name#6]

(7) BroadcastExchange
Input [3]: [d_date_sk#4, d_week_seq#5, d_day_name#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#4]
Join type: Inner
Join condition: None

(9) Project [codegen id : 2]
Output [4]: [ss_store_sk#1, ss_sales_price#2, d_week_seq#5, d_day_name#6]
Input [6]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3, d_date_sk#4, d_week_seq#5, d_day_name#6]

(10) HashAggregate [codegen id : 2]
Input [4]: [ss_store_sk#1, ss_sales_price#2, d_week_seq#5, d_day_name#6]
Keys [2]: [d_week_seq#5, ss_store_sk#1]
Functions [7]: [partial_sum(UnscaledValue(CASE WHEN (d_day_name#6 = Sunday   ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#6 = Monday   ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#6 = Tuesday  ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#6 = Wednesday) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#6 = Thursday ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#6 = Friday   ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#6 = Saturday ) THEN ss_sales_price#2 END))]
Aggregate Attributes [7]: [sum#9, sum#10, sum#11, sum#12, sum#13, sum#14, sum#15]
Results [9]: [d_week_seq#5, ss_store_sk#1, sum#16, sum#17, sum#18, sum#19, sum#20, sum#21, sum#22]

(11) Exchange
Input [9]: [d_week_seq#5, ss_store_sk#1, sum#16, sum#17, sum#18, sum#19, sum#20, sum#21, sum#22]
Arguments: hashpartitioning(d_week_seq#5, ss_store_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(12) HashAggregate [codegen id : 5]
Input [9]: [d_week_seq#5, ss_store_sk#1, sum#16, sum#17, sum#18, sum#19, sum#20, sum#21, sum#22]
Keys [2]: [d_week_seq#5, ss_store_sk#1]
Functions [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#6 = Sunday   ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#6 = Monday   ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#6 = Tuesday  ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#6 = Wednesday) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#6 = Thursday ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#6 = Friday   ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#6 = Saturday ) THEN ss_sales_price#2 END))]
Aggregate Attributes [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#6 = Sunday   ) THEN ss_sales_price#2 END))#23, sum(UnscaledValue(CASE WHEN (d_day_name#6 = Monday   ) THEN ss_sales_price#2 END))#24, sum(UnscaledValue(CASE WHEN (d_day_name#6 = Tuesday  ) THEN ss_sales_price#2 END))#25, sum(UnscaledValue(CASE WHEN (d_day_name#6 = Wednesday) THEN ss_sales_price#2 END))#26, sum(UnscaledValue(CASE WHEN (d_day_name#6 = Thursday ) THEN ss_sales_price#2 END))#27, sum(UnscaledValue(CASE WHEN (d_day_name#6 = Friday   ) THEN ss_sales_price#2 END))#28, sum(UnscaledValue(CASE WHEN (d_day_name#6 = Saturday ) THEN ss_sales_price#2 END))#29]
Results [9]: [d_week_seq#5, ss_store_sk#1, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#6 = Sunday   ) THEN ss_sales_price#2 END))#23,17,2) AS sun_sales#30, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#6 = Monday   ) THEN ss_sales_price#2 END))#24,17,2) AS mon_sales#31, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#6 = Tuesday  ) THEN ss_sales_price#2 END))#25,17,2) AS tue_sales#32, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#6 = Wednesday) THEN ss_sales_price#2 END))#26,17,2) AS wed_sales#33, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#6 = Thursday ) THEN ss_sales_price#2 END))#27,17,2) AS thu_sales#34, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#6 = Friday   ) THEN ss_sales_price#2 END))#28,17,2) AS fri_sales#35, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#6 = Saturday ) THEN ss_sales_price#2 END))#29,17,2) AS sat_sales#36]

(13) BatchScan default.store
Output [3]: [s_store_sk#37, s_store_id#38, s_store_name#39]
DataFilters: [isnotnull(s_store_sk#37), isnotnull(s_store_id#38)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_store_id)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>

(14) Filter [codegen id : 3]
Input [3]: [s_store_sk#37, s_store_id#38, s_store_name#39]
Condition : (isnotnull(s_store_sk#37) AND isnotnull(s_store_id#38))

(15) Project [codegen id : 3]
Output [3]: [s_store_sk#37, s_store_id#38, s_store_name#39]
Input [3]: [s_store_sk#37, s_store_id#38, s_store_name#39]

(16) BroadcastExchange
Input [3]: [s_store_sk#37, s_store_id#38, s_store_name#39]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(17) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#37]
Join type: Inner
Join condition: None

(18) Project [codegen id : 5]
Output [10]: [d_week_seq#5, sun_sales#30, mon_sales#31, tue_sales#32, wed_sales#33, thu_sales#34, fri_sales#35, sat_sales#36, s_store_id#38, s_store_name#39]
Input [12]: [d_week_seq#5, ss_store_sk#1, sun_sales#30, mon_sales#31, tue_sales#32, wed_sales#33, thu_sales#34, fri_sales#35, sat_sales#36, s_store_sk#37, s_store_id#38, s_store_name#39]

(19) BatchScan default.date_dim
Output [2]: [d_month_seq#40, d_week_seq#41]
DataFilters: [isnotnull(d_month_seq#40), (d_month_seq#40 >= 1185), (d_month_seq#40 <= 1196), isnotnull(d_week_seq#41)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1185), LessThanOrEqual(d_month_seq,1196), IsNotNull(d_week_seq)]
ReadSchema: struct<d_month_seq:int,d_week_seq:int>

(20) Filter [codegen id : 4]
Input [2]: [d_month_seq#40, d_week_seq#41]
Condition : (((isnotnull(d_month_seq#40) AND (d_month_seq#40 >= 1185)) AND (d_month_seq#40 <= 1196)) AND isnotnull(d_week_seq#41))

(21) Project [codegen id : 4]
Output [1]: [d_week_seq#41]
Input [2]: [d_month_seq#40, d_week_seq#41]

(22) BroadcastExchange
Input [1]: [d_week_seq#41]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(23) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [d_week_seq#5]
Right keys [1]: [d_week_seq#41]
Join type: Inner
Join condition: None

(24) Project [codegen id : 5]
Output [10]: [s_store_name#39 AS s_store_name1#42, d_week_seq#5 AS d_week_seq1#43, s_store_id#38 AS s_store_id1#44, sun_sales#30 AS sun_sales1#45, mon_sales#31 AS mon_sales1#46, tue_sales#32 AS tue_sales1#47, wed_sales#33 AS wed_sales1#48, thu_sales#34 AS thu_sales1#49, fri_sales#35 AS fri_sales1#50, sat_sales#36 AS sat_sales1#51]
Input [11]: [d_week_seq#5, sun_sales#30, mon_sales#31, tue_sales#32, wed_sales#33, thu_sales#34, fri_sales#35, sat_sales#36, s_store_id#38, s_store_name#39, d_week_seq#41]

(25) Exchange
Input [10]: [s_store_name1#42, d_week_seq1#43, s_store_id1#44, sun_sales1#45, mon_sales1#46, tue_sales1#47, wed_sales1#48, thu_sales1#49, fri_sales1#50, sat_sales1#51]
Arguments: hashpartitioning(s_store_id1#44, d_week_seq1#43, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(26) Sort [codegen id : 6]
Input [10]: [s_store_name1#42, d_week_seq1#43, s_store_id1#44, sun_sales1#45, mon_sales1#46, tue_sales1#47, wed_sales1#48, thu_sales1#49, fri_sales1#50, sat_sales1#51]
Arguments: [s_store_id1#44 ASC NULLS FIRST, d_week_seq1#43 ASC NULLS FIRST], false, 0

(27) BatchScan default.store_sales
Output [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]
DataFilters: [isnotnull(ss_store_sk#1)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_sales]
PartitionFilters: [isnotnull(ss_sold_date_sk#3)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_sales_price:decimal(7,2)>

(28) Filter [codegen id : 8]
Input [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(29) Project [codegen id : 8]
Output [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]
Input [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]

(30) BatchScan default.date_dim
Output [3]: [d_date_sk#4, d_week_seq#5, d_day_name#6]
DataFilters: [isnotnull(d_date_sk#4), isnotnull(d_week_seq#5)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk), IsNotNull(d_week_seq)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int,d_day_name:string>

(31) Filter [codegen id : 7]
Input [3]: [d_date_sk#4, d_week_seq#5, d_day_name#6]
Condition : ((isnotnull(d_date_sk#4) AND isnotnull(d_week_seq#5)) AND might_contain(Subquery scalar-subquery#52, [id=#53], xxhash64(d_week_seq#5, 42)))

(32) Project [codegen id : 7]
Output [3]: [d_date_sk#4, d_week_seq#5, d_day_name#6]
Input [3]: [d_date_sk#4, d_week_seq#5, d_day_name#6]

(33) BroadcastExchange
Input [3]: [d_date_sk#4, d_week_seq#5, d_day_name#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

(34) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#4]
Join type: Inner
Join condition: None

(35) Project [codegen id : 8]
Output [4]: [ss_store_sk#1, ss_sales_price#2, d_week_seq#5, d_day_name#6]
Input [6]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3, d_date_sk#4, d_week_seq#5, d_day_name#6]

(36) HashAggregate [codegen id : 8]
Input [4]: [ss_store_sk#1, ss_sales_price#2, d_week_seq#5, d_day_name#6]
Keys [2]: [d_week_seq#5, ss_store_sk#1]
Functions [6]: [partial_sum(UnscaledValue(CASE WHEN (d_day_name#6 = Sunday   ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#6 = Monday   ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#6 = Wednesday) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#6 = Thursday ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#6 = Friday   ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#6 = Saturday ) THEN ss_sales_price#2 END))]
Aggregate Attributes [6]: [sum#54, sum#55, sum#56, sum#57, sum#58, sum#59]
Results [8]: [d_week_seq#5, ss_store_sk#1, sum#60, sum#61, sum#62, sum#63, sum#64, sum#65]

(37) Exchange
Input [8]: [d_week_seq#5, ss_store_sk#1, sum#60, sum#61, sum#62, sum#63, sum#64, sum#65]
Arguments: hashpartitioning(d_week_seq#5, ss_store_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(38) HashAggregate [codegen id : 11]
Input [8]: [d_week_seq#5, ss_store_sk#1, sum#60, sum#61, sum#62, sum#63, sum#64, sum#65]
Keys [2]: [d_week_seq#5, ss_store_sk#1]
Functions [6]: [sum(UnscaledValue(CASE WHEN (d_day_name#6 = Sunday   ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#6 = Monday   ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#6 = Wednesday) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#6 = Thursday ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#6 = Friday   ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#6 = Saturday ) THEN ss_sales_price#2 END))]
Aggregate Attributes [6]: [sum(UnscaledValue(CASE WHEN (d_day_name#6 = Sunday   ) THEN ss_sales_price#2 END))#23, sum(UnscaledValue(CASE WHEN (d_day_name#6 = Monday   ) THEN ss_sales_price#2 END))#24, sum(UnscaledValue(CASE WHEN (d_day_name#6 = Wednesday) THEN ss_sales_price#2 END))#26, sum(UnscaledValue(CASE WHEN (d_day_name#6 = Thursday ) THEN ss_sales_price#2 END))#27, sum(UnscaledValue(CASE WHEN (d_day_name#6 = Friday   ) THEN ss_sales_price#2 END))#28, sum(UnscaledValue(CASE WHEN (d_day_name#6 = Saturday ) THEN ss_sales_price#2 END))#29]
Results [8]: [d_week_seq#5, ss_store_sk#1, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#6 = Sunday   ) THEN ss_sales_price#2 END))#23,17,2) AS sun_sales#30, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#6 = Monday   ) THEN ss_sales_price#2 END))#24,17,2) AS mon_sales#31, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#6 = Wednesday) THEN ss_sales_price#2 END))#26,17,2) AS wed_sales#33, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#6 = Thursday ) THEN ss_sales_price#2 END))#27,17,2) AS thu_sales#34, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#6 = Friday   ) THEN ss_sales_price#2 END))#28,17,2) AS fri_sales#35, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#6 = Saturday ) THEN ss_sales_price#2 END))#29,17,2) AS sat_sales#36]

(39) BatchScan default.store
Output [2]: [s_store_sk#66, s_store_id#67]
DataFilters: [isnotnull(s_store_sk#66), isnotnull(s_store_id#67)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_store_id)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(40) Filter [codegen id : 9]
Input [2]: [s_store_sk#66, s_store_id#67]
Condition : (isnotnull(s_store_sk#66) AND isnotnull(s_store_id#67))

(41) Project [codegen id : 9]
Output [2]: [s_store_sk#66, s_store_id#67]
Input [2]: [s_store_sk#66, s_store_id#67]

(42) BroadcastExchange
Input [2]: [s_store_sk#66, s_store_id#67]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

(43) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#66]
Join type: Inner
Join condition: None

(44) Project [codegen id : 11]
Output [8]: [d_week_seq#5, sun_sales#30, mon_sales#31, wed_sales#33, thu_sales#34, fri_sales#35, sat_sales#36, s_store_id#67]
Input [10]: [d_week_seq#5, ss_store_sk#1, sun_sales#30, mon_sales#31, wed_sales#33, thu_sales#34, fri_sales#35, sat_sales#36, s_store_sk#66, s_store_id#67]

(45) BatchScan default.date_dim
Output [2]: [d_month_seq#68, d_week_seq#69]
DataFilters: [isnotnull(d_month_seq#68), (d_month_seq#68 >= 1197), (d_month_seq#68 <= 1208), isnotnull(d_week_seq#69)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1197), LessThanOrEqual(d_month_seq,1208), IsNotNull(d_week_seq)]
ReadSchema: struct<d_month_seq:int,d_week_seq:int>

(46) Filter [codegen id : 10]
Input [2]: [d_month_seq#68, d_week_seq#69]
Condition : (((isnotnull(d_month_seq#68) AND (d_month_seq#68 >= 1197)) AND (d_month_seq#68 <= 1208)) AND isnotnull(d_week_seq#69))

(47) Project [codegen id : 10]
Output [1]: [d_week_seq#69]
Input [2]: [d_month_seq#68, d_week_seq#69]

(48) BroadcastExchange
Input [1]: [d_week_seq#69]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

(49) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [d_week_seq#5]
Right keys [1]: [d_week_seq#69]
Join type: Inner
Join condition: None

(50) Project [codegen id : 11]
Output [8]: [d_week_seq#5 AS d_week_seq2#70, s_store_id#67 AS s_store_id2#71, sun_sales#30 AS sun_sales2#72, mon_sales#31 AS mon_sales2#73, wed_sales#33 AS wed_sales2#74, thu_sales#34 AS thu_sales2#75, fri_sales#35 AS fri_sales2#76, sat_sales#36 AS sat_sales2#77]
Input [9]: [d_week_seq#5, sun_sales#30, mon_sales#31, wed_sales#33, thu_sales#34, fri_sales#35, sat_sales#36, s_store_id#67, d_week_seq#69]

(51) Exchange
Input [8]: [d_week_seq2#70, s_store_id2#71, sun_sales2#72, mon_sales2#73, wed_sales2#74, thu_sales2#75, fri_sales2#76, sat_sales2#77]
Arguments: hashpartitioning(s_store_id2#71, (d_week_seq2#70 - 52), 5), ENSURE_REQUIREMENTS, [plan_id=10]

(52) Sort [codegen id : 12]
Input [8]: [d_week_seq2#70, s_store_id2#71, sun_sales2#72, mon_sales2#73, wed_sales2#74, thu_sales2#75, fri_sales2#76, sat_sales2#77]
Arguments: [s_store_id2#71 ASC NULLS FIRST, (d_week_seq2#70 - 52) ASC NULLS FIRST], false, 0

(53) SortMergeJoin [codegen id : 13]
Left keys [2]: [s_store_id1#44, d_week_seq1#43]
Right keys [2]: [s_store_id2#71, (d_week_seq2#70 - 52)]
Join type: Inner
Join condition: None

(54) Project [codegen id : 13]
Output [10]: [s_store_name1#42, s_store_id1#44, d_week_seq1#43, (sun_sales1#45 / sun_sales2#72) AS (sun_sales1 / sun_sales2)#78, (mon_sales1#46 / mon_sales2#73) AS (mon_sales1 / mon_sales2)#79, (tue_sales1#47 / tue_sales1#47) AS (tue_sales1 / tue_sales1)#80, (wed_sales1#48 / wed_sales2#74) AS (wed_sales1 / wed_sales2)#81, (thu_sales1#49 / thu_sales2#75) AS (thu_sales1 / thu_sales2)#82, (fri_sales1#50 / fri_sales2#76) AS (fri_sales1 / fri_sales2)#83, (sat_sales1#51 / sat_sales2#77) AS (sat_sales1 / sat_sales2)#84]
Input [18]: [s_store_name1#42, d_week_seq1#43, s_store_id1#44, sun_sales1#45, mon_sales1#46, tue_sales1#47, wed_sales1#48, thu_sales1#49, fri_sales1#50, sat_sales1#51, d_week_seq2#70, s_store_id2#71, sun_sales2#72, mon_sales2#73, wed_sales2#74, thu_sales2#75, fri_sales2#76, sat_sales2#77]

(55) TakeOrderedAndProject
Input [10]: [s_store_name1#42, s_store_id1#44, d_week_seq1#43, (sun_sales1 / sun_sales2)#78, (mon_sales1 / mon_sales2)#79, (tue_sales1 / tue_sales1)#80, (wed_sales1 / wed_sales2)#81, (thu_sales1 / thu_sales2)#82, (fri_sales1 / fri_sales2)#83, (sat_sales1 / sat_sales2)#84]
Arguments: 100, [s_store_name1#42 ASC NULLS FIRST, s_store_id1#44 ASC NULLS FIRST, d_week_seq1#43 ASC NULLS FIRST], [s_store_name1#42, s_store_id1#44, d_week_seq1#43, (sun_sales1 / sun_sales2)#78, (mon_sales1 / mon_sales2)#79, (tue_sales1 / tue_sales1)#80, (wed_sales1 / wed_sales2)#81, (thu_sales1 / thu_sales2)#82, (fri_sales1 / fri_sales2)#83, (sat_sales1 / sat_sales2)#84]

===== Subqueries =====

Subquery:1 Hosting operator id = 5 Hosting Expression = Subquery scalar-subquery#7, [id=#8]
ObjectHashAggregate (61)
+- Exchange (60)
   +- ObjectHashAggregate (59)
      +- * Project (58)
         +- * Filter (57)
            +- BatchScan default.date_dim (56)


(56) BatchScan default.date_dim
Output [2]: [d_month_seq#40, d_week_seq#41]
DataFilters: [isnotnull(d_month_seq#40), (d_month_seq#40 >= 1185), (d_month_seq#40 <= 1196), isnotnull(d_week_seq#41)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1185), LessThanOrEqual(d_month_seq,1196), IsNotNull(d_week_seq)]
ReadSchema: struct<d_month_seq:int,d_week_seq:int>

(57) Filter [codegen id : 1]
Input [2]: [d_month_seq#40, d_week_seq#41]
Condition : (((isnotnull(d_month_seq#40) AND (d_month_seq#40 >= 1185)) AND (d_month_seq#40 <= 1196)) AND isnotnull(d_week_seq#41))

(58) Project [codegen id : 1]
Output [1]: [d_week_seq#41]
Input [2]: [d_month_seq#40, d_week_seq#41]

(59) ObjectHashAggregate
Input [1]: [d_week_seq#41]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(d_week_seq#41, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#85]
Results [1]: [buf#86]

(60) Exchange
Input [1]: [buf#86]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=11]

(61) ObjectHashAggregate
Input [1]: [buf#86]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(d_week_seq#41, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(d_week_seq#41, 42), 1000000, 8388608, 0, 0)#87]
Results [1]: [bloom_filter_agg(xxhash64(d_week_seq#41, 42), 1000000, 8388608, 0, 0)#87 AS bloomFilter#88]

Subquery:2 Hosting operator id = 31 Hosting Expression = Subquery scalar-subquery#52, [id=#53]
ObjectHashAggregate (67)
+- Exchange (66)
   +- ObjectHashAggregate (65)
      +- * Project (64)
         +- * Filter (63)
            +- BatchScan default.date_dim (62)


(62) BatchScan default.date_dim
Output [2]: [d_month_seq#68, d_week_seq#69]
DataFilters: [isnotnull(d_month_seq#68), (d_month_seq#68 >= 1197), (d_month_seq#68 <= 1208), isnotnull(d_week_seq#69)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1197), LessThanOrEqual(d_month_seq,1208), IsNotNull(d_week_seq)]
ReadSchema: struct<d_month_seq:int,d_week_seq:int>

(63) Filter [codegen id : 1]
Input [2]: [d_month_seq#68, d_week_seq#69]
Condition : (((isnotnull(d_month_seq#68) AND (d_month_seq#68 >= 1197)) AND (d_month_seq#68 <= 1208)) AND isnotnull(d_week_seq#69))

(64) Project [codegen id : 1]
Output [1]: [d_week_seq#69]
Input [2]: [d_month_seq#68, d_week_seq#69]

(65) ObjectHashAggregate
Input [1]: [d_week_seq#69]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(d_week_seq#69, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#89]
Results [1]: [buf#90]

(66) Exchange
Input [1]: [buf#90]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=12]

(67) ObjectHashAggregate
Input [1]: [buf#90]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(d_week_seq#69, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(d_week_seq#69, 42), 1000000, 8388608, 0, 0)#91]
Results [1]: [bloom_filter_agg(xxhash64(d_week_seq#69, 42), 1000000, 8388608, 0, 0)#91 AS bloomFilter#92]


