== Physical Plan ==
TakeOrderedAndProject (29)
+- * Project (28)
   +- * BroadcastHashJoin Inner BuildLeft (27)
      :- BroadcastExchange (24)
      :  +- * Project (23)
      :     +- * BroadcastHashJoin Inner BuildLeft (22)
      :        :- BroadcastExchange (19)
      :        :  +- * Project (18)
      :        :     +- * BroadcastHashJoin Inner BuildRight (17)
      :        :        :- * Filter (10)
      :        :        :  +- * HashAggregate (9)
      :        :        :     +- Exchange (8)
      :        :        :        +- * HashAggregate (7)
      :        :        :           +- * Project (6)
      :        :        :              +- * BroadcastHashJoin Inner BuildRight (5)
      :        :        :                 :- * Filter (3)
      :        :        :                 :  +- * ColumnarToRow (2)
      :        :        :                 :     +- Scan parquet default.store_sales (1)
      :        :        :                 +- ReusedExchange (4)
      :        :        +- BroadcastExchange (16)
      :        :           +- * HashAggregate (15)
      :        :              +- Exchange (14)
      :        :                 +- * HashAggregate (13)
      :        :                    +- * HashAggregate (12)
      :        :                       +- ReusedExchange (11)
      :        +- * ColumnarToRow (21)
      :           +- Scan parquet default.store (20)
      +- * ColumnarToRow (26)
         +- Scan parquet default.item (25)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), (ss_sold_date_sk#4 >= 2451911), (ss_sold_date_sk#4 <= 2452275), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_store_sk#2)

(4) ReusedExchange [Reuses operator id: 34]
Output [1]: [d_date_sk#6]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(6) Project [codegen id : 2]
Output [3]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4, d_date_sk#6]

(7) HashAggregate [codegen id : 2]
Input [3]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3]
Keys [2]: [ss_store_sk#2, ss_item_sk#1]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#3))]
Aggregate Attributes [1]: [sum#7]
Results [3]: [ss_store_sk#2, ss_item_sk#1, sum#8]

(8) Exchange
Input [3]: [ss_store_sk#2, ss_item_sk#1, sum#8]
Arguments: hashpartitioning(ss_store_sk#2, ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#9]

(9) HashAggregate [codegen id : 7]
Input [3]: [ss_store_sk#2, ss_item_sk#1, sum#8]
Keys [2]: [ss_store_sk#2, ss_item_sk#1]
Functions [1]: [sum(UnscaledValue(ss_sales_price#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#3))#10]
Results [3]: [ss_store_sk#2, ss_item_sk#1, MakeDecimal(sum(UnscaledValue(ss_sales_price#3))#10,17,2) AS revenue#11]

(10) Filter [codegen id : 7]
Input [3]: [ss_store_sk#2, ss_item_sk#1, revenue#11]
Condition : isnotnull(revenue#11)

(11) ReusedExchange [Reuses operator id: 8]
Output [3]: [ss_store_sk#12, ss_item_sk#13, sum#14]

(12) HashAggregate [codegen id : 5]
Input [3]: [ss_store_sk#12, ss_item_sk#13, sum#14]
Keys [2]: [ss_store_sk#12, ss_item_sk#13]
Functions [1]: [sum(UnscaledValue(ss_sales_price#15))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#15))#16]
Results [2]: [ss_store_sk#12, MakeDecimal(sum(UnscaledValue(ss_sales_price#15))#16,17,2) AS revenue#17]

(13) HashAggregate [codegen id : 5]
Input [2]: [ss_store_sk#12, revenue#17]
Keys [1]: [ss_store_sk#12]
Functions [1]: [partial_avg(revenue#17)]
Aggregate Attributes [2]: [sum#18, count#19]
Results [3]: [ss_store_sk#12, sum#20, count#21]

(14) Exchange
Input [3]: [ss_store_sk#12, sum#20, count#21]
Arguments: hashpartitioning(ss_store_sk#12, 5), ENSURE_REQUIREMENTS, [id=#22]

(15) HashAggregate [codegen id : 6]
Input [3]: [ss_store_sk#12, sum#20, count#21]
Keys [1]: [ss_store_sk#12]
Functions [1]: [avg(revenue#17)]
Aggregate Attributes [1]: [avg(revenue#17)#23]
Results [2]: [ss_store_sk#12, avg(revenue#17)#23 AS ave#24]

(16) BroadcastExchange
Input [2]: [ss_store_sk#12, ave#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#25]

(17) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [ss_store_sk#12]
Join condition: (cast(revenue#11 as decimal(23,7)) <= CheckOverflow((0.100000 * promote_precision(ave#24)), DecimalType(23,7), true))

(18) Project [codegen id : 7]
Output [3]: [ss_store_sk#2, ss_item_sk#1, revenue#11]
Input [5]: [ss_store_sk#2, ss_item_sk#1, revenue#11, ss_store_sk#12, ave#24]

(19) BroadcastExchange
Input [3]: [ss_store_sk#2, ss_item_sk#1, revenue#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#26]

(20) Scan parquet default.store
Output [2]: [s_store_sk#27, s_store_name#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
ReadSchema: struct<s_store_sk:int,s_store_name:string>

(21) ColumnarToRow
Input [2]: [s_store_sk#27, s_store_name#28]

(22) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#27]
Join condition: None

(23) Project [codegen id : 8]
Output [3]: [ss_item_sk#1, revenue#11, s_store_name#28]
Input [5]: [ss_store_sk#2, ss_item_sk#1, revenue#11, s_store_sk#27, s_store_name#28]

(24) BroadcastExchange
Input [3]: [ss_item_sk#1, revenue#11, s_store_name#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(25) Scan parquet default.item
Output [5]: [i_item_sk#30, i_item_desc#31, i_current_price#32, i_wholesale_cost#33, i_brand#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
ReadSchema: struct<i_item_sk:int,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand:string>

(26) ColumnarToRow
Input [5]: [i_item_sk#30, i_item_desc#31, i_current_price#32, i_wholesale_cost#33, i_brand#34]

(27) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#30]
Join condition: None

(28) Project [codegen id : 9]
Output [6]: [s_store_name#28, i_item_desc#31, revenue#11, i_current_price#32, i_wholesale_cost#33, i_brand#34]
Input [8]: [ss_item_sk#1, revenue#11, s_store_name#28, i_item_sk#30, i_item_desc#31, i_current_price#32, i_wholesale_cost#33, i_brand#34]

(29) TakeOrderedAndProject
Input [6]: [s_store_name#28, i_item_desc#31, revenue#11, i_current_price#32, i_wholesale_cost#33, i_brand#34]
Arguments: 100, [s_store_name#28 ASC NULLS FIRST, i_item_desc#31 ASC NULLS FIRST], [s_store_name#28, i_item_desc#31, revenue#11, i_current_price#32, i_wholesale_cost#33, i_brand#34]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (34)
+- * Project (33)
   +- * Filter (32)
      +- * ColumnarToRow (31)
         +- Scan parquet default.date_dim (30)


(30) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_month_seq#35]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), GreaterThanOrEqual(d_date_sk,2451911), LessThanOrEqual(d_date_sk,2452275)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(31) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#6, d_month_seq#35]

(32) Filter [codegen id : 1]
Input [2]: [d_date_sk#6, d_month_seq#35]
Condition : ((((d_month_seq#35 >= 1212) AND (d_month_seq#35 <= 1223)) AND (d_date_sk#6 >= 2451911)) AND (d_date_sk#6 <= 2452275))

(33) Project [codegen id : 1]
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_month_seq#35]

(34) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#36]


