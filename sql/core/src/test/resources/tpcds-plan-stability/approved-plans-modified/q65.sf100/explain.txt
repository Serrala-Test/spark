== Physical Plan ==
TakeOrderedAndProject (42)
+- * Project (41)
   +- * BroadcastHashJoin Inner BuildRight (40)
      :- * Project (26)
      :  +- * BroadcastHashJoin Inner BuildRight (25)
      :     :- * Project (20)
      :     :  +- * BroadcastHashJoin Inner BuildLeft (19)
      :     :     :- BroadcastExchange (15)
      :     :     :  +- * Filter (14)
      :     :     :     +- * HashAggregate (13)
      :     :     :        +- Exchange (12)
      :     :     :           +- * HashAggregate (11)
      :     :     :              +- * Project (10)
      :     :     :                 +- * BroadcastHashJoin Inner BuildRight (9)
      :     :     :                    :- * Filter (3)
      :     :     :                    :  +- * ColumnarToRow (2)
      :     :     :                    :     +- Scan parquet default.store_sales (1)
      :     :     :                    +- BroadcastExchange (8)
      :     :     :                       +- * Project (7)
      :     :     :                          +- * Filter (6)
      :     :     :                             +- * ColumnarToRow (5)
      :     :     :                                +- Scan parquet default.date_dim (4)
      :     :     +- * Filter (18)
      :     :        +- * ColumnarToRow (17)
      :     :           +- Scan parquet default.item (16)
      :     +- BroadcastExchange (24)
      :        +- * Filter (23)
      :           +- * ColumnarToRow (22)
      :              +- Scan parquet default.store (21)
      +- BroadcastExchange (39)
         +- * HashAggregate (38)
            +- Exchange (37)
               +- * HashAggregate (36)
                  +- * HashAggregate (35)
                     +- Exchange (34)
                        +- * HashAggregate (33)
                           +- * Project (32)
                              +- * BroadcastHashJoin Inner BuildRight (31)
                                 :- * Filter (29)
                                 :  +- * ColumnarToRow (28)
                                 :     +- Scan parquet default.store_sales (27)
                                 +- ReusedExchange (30)


(1) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_sales_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), GreaterThanOrEqual(ss_sold_date_sk,2451911), LessThanOrEqual(ss_sold_date_sk,2452275), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_sales_price#4]

(3) Filter [codegen id : 2]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_sales_price#4]
Condition : ((((isnotnull(ss_sold_date_sk#1) AND (ss_sold_date_sk#1 >= 2451911)) AND (ss_sold_date_sk#1 <= 2452275)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_item_sk#2))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), GreaterThanOrEqual(d_date_sk,2451911), LessThanOrEqual(d_date_sk,2452275), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#5, d_month_seq#6]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#5, d_month_seq#6]
Condition : (((((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1212)) AND (d_month_seq#6 <= 1223)) AND (d_date_sk#5 >= 2451911)) AND (d_date_sk#5 <= 2452275)) AND isnotnull(d_date_sk#5))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#5]
Input [2]: [d_date_sk#5, d_month_seq#6]

(8) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#7]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#5]
Join condition: None

(10) Project [codegen id : 2]
Output [3]: [ss_item_sk#2, ss_store_sk#3, ss_sales_price#4]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_sales_price#4, d_date_sk#5]

(11) HashAggregate [codegen id : 2]
Input [3]: [ss_item_sk#2, ss_store_sk#3, ss_sales_price#4]
Keys [2]: [ss_store_sk#3, ss_item_sk#2]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#4))]
Aggregate Attributes [1]: [sum#8]
Results [3]: [ss_store_sk#3, ss_item_sk#2, sum#9]

(12) Exchange
Input [3]: [ss_store_sk#3, ss_item_sk#2, sum#9]
Arguments: hashpartitioning(ss_store_sk#3, ss_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#10]

(13) HashAggregate [codegen id : 3]
Input [3]: [ss_store_sk#3, ss_item_sk#2, sum#9]
Keys [2]: [ss_store_sk#3, ss_item_sk#2]
Functions [1]: [sum(UnscaledValue(ss_sales_price#4))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#4))#11]
Results [3]: [ss_store_sk#3, ss_item_sk#2, MakeDecimal(sum(UnscaledValue(ss_sales_price#4))#11,17,2) AS revenue#12]

(14) Filter [codegen id : 3]
Input [3]: [ss_store_sk#3, ss_item_sk#2, revenue#12]
Condition : isnotnull(revenue#12)

(15) BroadcastExchange
Input [3]: [ss_store_sk#3, ss_item_sk#2, revenue#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#13]

(16) Scan parquet default.item
Output [5]: [i_item_sk#14, i_item_desc#15, i_current_price#16, i_wholesale_cost#17, i_brand#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand:string>

(17) ColumnarToRow
Input [5]: [i_item_sk#14, i_item_desc#15, i_current_price#16, i_wholesale_cost#17, i_brand#18]

(18) Filter
Input [5]: [i_item_sk#14, i_item_desc#15, i_current_price#16, i_wholesale_cost#17, i_brand#18]
Condition : isnotnull(i_item_sk#14)

(19) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#14]
Join condition: None

(20) Project [codegen id : 9]
Output [6]: [ss_store_sk#3, revenue#12, i_item_desc#15, i_current_price#16, i_wholesale_cost#17, i_brand#18]
Input [8]: [ss_store_sk#3, ss_item_sk#2, revenue#12, i_item_sk#14, i_item_desc#15, i_current_price#16, i_wholesale_cost#17, i_brand#18]

(21) Scan parquet default.store
Output [2]: [s_store_sk#19, s_store_name#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string>

(22) ColumnarToRow [codegen id : 4]
Input [2]: [s_store_sk#19, s_store_name#20]

(23) Filter [codegen id : 4]
Input [2]: [s_store_sk#19, s_store_name#20]
Condition : isnotnull(s_store_sk#19)

(24) BroadcastExchange
Input [2]: [s_store_sk#19, s_store_name#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#21]

(25) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#19]
Join condition: None

(26) Project [codegen id : 9]
Output [7]: [ss_store_sk#3, revenue#12, i_item_desc#15, i_current_price#16, i_wholesale_cost#17, i_brand#18, s_store_name#20]
Input [8]: [ss_store_sk#3, revenue#12, i_item_desc#15, i_current_price#16, i_wholesale_cost#17, i_brand#18, s_store_sk#19, s_store_name#20]

(27) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#22, ss_item_sk#23, ss_store_sk#24, ss_sales_price#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), GreaterThanOrEqual(ss_sold_date_sk,2451911), LessThanOrEqual(ss_sold_date_sk,2452275), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(28) ColumnarToRow [codegen id : 6]
Input [4]: [ss_sold_date_sk#22, ss_item_sk#23, ss_store_sk#24, ss_sales_price#25]

(29) Filter [codegen id : 6]
Input [4]: [ss_sold_date_sk#22, ss_item_sk#23, ss_store_sk#24, ss_sales_price#25]
Condition : (((isnotnull(ss_sold_date_sk#22) AND (ss_sold_date_sk#22 >= 2451911)) AND (ss_sold_date_sk#22 <= 2452275)) AND isnotnull(ss_store_sk#24))

(30) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#5]

(31) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#22]
Right keys [1]: [d_date_sk#5]
Join condition: None

(32) Project [codegen id : 6]
Output [3]: [ss_item_sk#23, ss_store_sk#24, ss_sales_price#25]
Input [5]: [ss_sold_date_sk#22, ss_item_sk#23, ss_store_sk#24, ss_sales_price#25, d_date_sk#5]

(33) HashAggregate [codegen id : 6]
Input [3]: [ss_item_sk#23, ss_store_sk#24, ss_sales_price#25]
Keys [2]: [ss_store_sk#24, ss_item_sk#23]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#25))]
Aggregate Attributes [1]: [sum#26]
Results [3]: [ss_store_sk#24, ss_item_sk#23, sum#27]

(34) Exchange
Input [3]: [ss_store_sk#24, ss_item_sk#23, sum#27]
Arguments: hashpartitioning(ss_store_sk#24, ss_item_sk#23, 5), ENSURE_REQUIREMENTS, [id=#28]

(35) HashAggregate [codegen id : 7]
Input [3]: [ss_store_sk#24, ss_item_sk#23, sum#27]
Keys [2]: [ss_store_sk#24, ss_item_sk#23]
Functions [1]: [sum(UnscaledValue(ss_sales_price#25))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#25))#29]
Results [2]: [ss_store_sk#24, MakeDecimal(sum(UnscaledValue(ss_sales_price#25))#29,17,2) AS revenue#30]

(36) HashAggregate [codegen id : 7]
Input [2]: [ss_store_sk#24, revenue#30]
Keys [1]: [ss_store_sk#24]
Functions [1]: [partial_avg(revenue#30)]
Aggregate Attributes [2]: [sum#31, count#32]
Results [3]: [ss_store_sk#24, sum#33, count#34]

(37) Exchange
Input [3]: [ss_store_sk#24, sum#33, count#34]
Arguments: hashpartitioning(ss_store_sk#24, 5), ENSURE_REQUIREMENTS, [id=#35]

(38) HashAggregate [codegen id : 8]
Input [3]: [ss_store_sk#24, sum#33, count#34]
Keys [1]: [ss_store_sk#24]
Functions [1]: [avg(revenue#30)]
Aggregate Attributes [1]: [avg(revenue#30)#36]
Results [2]: [ss_store_sk#24, avg(revenue#30)#36 AS ave#37]

(39) BroadcastExchange
Input [2]: [ss_store_sk#24, ave#37]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#38]

(40) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [ss_store_sk#24]
Join condition: (cast(revenue#12 as decimal(23,7)) <= CheckOverflow((0.100000 * promote_precision(ave#37)), DecimalType(23,7), true))

(41) Project [codegen id : 9]
Output [6]: [s_store_name#20, i_item_desc#15, revenue#12, i_current_price#16, i_wholesale_cost#17, i_brand#18]
Input [9]: [ss_store_sk#3, revenue#12, i_item_desc#15, i_current_price#16, i_wholesale_cost#17, i_brand#18, s_store_name#20, ss_store_sk#24, ave#37]

(42) TakeOrderedAndProject
Input [6]: [s_store_name#20, i_item_desc#15, revenue#12, i_current_price#16, i_wholesale_cost#17, i_brand#18]
Arguments: 100, [s_store_name#20 ASC NULLS FIRST, i_item_desc#15 ASC NULLS FIRST], [s_store_name#20, i_item_desc#15, revenue#12, i_current_price#16, i_wholesale_cost#17, i_brand#18]

