== Physical Plan ==
TakeOrderedAndProject (33)
+- * Project (32)
   +- * Filter (31)
      +- Window (30)
         +- * Sort (29)
            +- Exchange (28)
               +- * HashAggregate (27)
                  +- Exchange (26)
                     +- * HashAggregate (25)
                        +- * Project (24)
                           +- * BroadcastHashJoin Inner BuildRight (23)
                              :- * Project (17)
                              :  +- * BroadcastHashJoin Inner BuildRight (16)
                              :     :- * Project (10)
                              :     :  +- * BroadcastHashJoin Inner BuildRight (9)
                              :     :     :- * Project (4)
                              :     :     :  +- * Filter (3)
                              :     :     :     +- * ColumnarToRow (2)
                              :     :     :        +- Scan parquet default.item (1)
                              :     :     +- BroadcastExchange (8)
                              :     :        +- * Filter (7)
                              :     :           +- * ColumnarToRow (6)
                              :     :              +- Scan parquet default.store_sales (5)
                              :     +- BroadcastExchange (15)
                              :        +- * Project (14)
                              :           +- * Filter (13)
                              :              +- * ColumnarToRow (12)
                              :                 +- Scan parquet default.date_dim (11)
                              +- BroadcastExchange (22)
                                 +- * Project (21)
                                    +- * Filter (20)
                                       +- * ColumnarToRow (19)
                                          +- Scan parquet default.store (18)


(1) Scan parquet default.item
Output [4]: [i_item_sk#1, i_brand#2, i_class#3, i_category#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string>

(2) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#1, i_brand#2, i_class#3, i_category#4]

(3) Filter [codegen id : 4]
Input [4]: [i_item_sk#1, i_brand#2, i_class#3, i_category#4]
Condition : (((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#4, 50, false, true) IN (Home                                              ,Books                                             ,Electronics                                       ) AND staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_class#3, 50, false, true) IN (wallpaper                                         ,parenting                                         ,musical                                           )) OR (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#4, 50, false, true) IN (Shoes                                             ,Jewelry                                           ,Men                                               ) AND staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_class#3, 50, false, true) IN (womens                                            ,birdal                                            ,pants                                             ))) AND isnotnull(i_item_sk#1))

(4) Project [codegen id : 4]
Output [4]: [i_item_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_brand#2, 50, false, true) AS i_brand#5, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_class#3, 50, false, true) AS i_class#6, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#4, 50, false, true) AS i_category#7]
Input [4]: [i_item_sk#1, i_brand#2, i_class#3, i_category#4]

(5) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#8, ss_item_sk#9, ss_store_sk#10, ss_sales_price#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), GreaterThanOrEqual(ss_sold_date_sk,2451545), LessThanOrEqual(ss_sold_date_sk,2451910), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(6) ColumnarToRow [codegen id : 1]
Input [4]: [ss_sold_date_sk#8, ss_item_sk#9, ss_store_sk#10, ss_sales_price#11]

(7) Filter [codegen id : 1]
Input [4]: [ss_sold_date_sk#8, ss_item_sk#9, ss_store_sk#10, ss_sales_price#11]
Condition : ((((isnotnull(ss_sold_date_sk#8) AND (ss_sold_date_sk#8 >= 2451545)) AND (ss_sold_date_sk#8 <= 2451910)) AND isnotnull(ss_item_sk#9)) AND isnotnull(ss_store_sk#10))

(8) BroadcastExchange
Input [4]: [ss_sold_date_sk#8, ss_item_sk#9, ss_store_sk#10, ss_sales_price#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#12]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [i_item_sk#1]
Right keys [1]: [ss_item_sk#9]
Join condition: None

(10) Project [codegen id : 4]
Output [6]: [i_brand#5, i_class#6, i_category#7, ss_sold_date_sk#8, ss_store_sk#10, ss_sales_price#11]
Input [8]: [i_item_sk#1, i_brand#5, i_class#6, i_category#7, ss_sold_date_sk#8, ss_item_sk#9, ss_store_sk#10, ss_sales_price#11]

(11) Scan parquet default.date_dim
Output [3]: [d_date_sk#13, d_year#14, d_moy#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), GreaterThanOrEqual(d_date_sk,2451545), LessThanOrEqual(d_date_sk,2451910), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(12) ColumnarToRow [codegen id : 2]
Input [3]: [d_date_sk#13, d_year#14, d_moy#15]

(13) Filter [codegen id : 2]
Input [3]: [d_date_sk#13, d_year#14, d_moy#15]
Condition : ((((isnotnull(d_year#14) AND (d_year#14 = 2000)) AND (d_date_sk#13 >= 2451545)) AND (d_date_sk#13 <= 2451910)) AND isnotnull(d_date_sk#13))

(14) Project [codegen id : 2]
Output [2]: [d_date_sk#13, d_moy#15]
Input [3]: [d_date_sk#13, d_year#14, d_moy#15]

(15) BroadcastExchange
Input [2]: [d_date_sk#13, d_moy#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(16) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#13]
Join condition: None

(17) Project [codegen id : 4]
Output [6]: [i_brand#5, i_class#6, i_category#7, ss_store_sk#10, ss_sales_price#11, d_moy#15]
Input [8]: [i_brand#5, i_class#6, i_category#7, ss_sold_date_sk#8, ss_store_sk#10, ss_sales_price#11, d_date_sk#13, d_moy#15]

(18) Scan parquet default.store
Output [3]: [s_store_sk#17, s_store_name#18, s_company_name#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_company_name:string>

(19) ColumnarToRow [codegen id : 3]
Input [3]: [s_store_sk#17, s_store_name#18, s_company_name#19]

(20) Filter [codegen id : 3]
Input [3]: [s_store_sk#17, s_store_name#18, s_company_name#19]
Condition : isnotnull(s_store_sk#17)

(21) Project [codegen id : 3]
Output [3]: [s_store_sk#17, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_store_name#18, 50, false, true) AS s_store_name#20, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_company_name#19, 50, false, true) AS s_company_name#21]
Input [3]: [s_store_sk#17, s_store_name#18, s_company_name#19]

(22) BroadcastExchange
Input [3]: [s_store_sk#17, s_store_name#20, s_company_name#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22]

(23) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#10]
Right keys [1]: [s_store_sk#17]
Join condition: None

(24) Project [codegen id : 4]
Output [7]: [i_brand#5, i_class#6, i_category#7, ss_sales_price#11, d_moy#15, s_store_name#20, s_company_name#21]
Input [9]: [i_brand#5, i_class#6, i_category#7, ss_store_sk#10, ss_sales_price#11, d_moy#15, s_store_sk#17, s_store_name#20, s_company_name#21]

(25) HashAggregate [codegen id : 4]
Input [7]: [i_brand#5, i_class#6, i_category#7, ss_sales_price#11, d_moy#15, s_store_name#20, s_company_name#21]
Keys [6]: [i_category#7, i_class#6, i_brand#5, s_store_name#20, s_company_name#21, d_moy#15]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#11))]
Aggregate Attributes [1]: [sum#23]
Results [7]: [i_category#7, i_class#6, i_brand#5, s_store_name#20, s_company_name#21, d_moy#15, sum#24]

(26) Exchange
Input [7]: [i_category#7, i_class#6, i_brand#5, s_store_name#20, s_company_name#21, d_moy#15, sum#24]
Arguments: hashpartitioning(i_category#7, i_class#6, i_brand#5, s_store_name#20, s_company_name#21, d_moy#15, 5), ENSURE_REQUIREMENTS, [id=#25]

(27) HashAggregate [codegen id : 5]
Input [7]: [i_category#7, i_class#6, i_brand#5, s_store_name#20, s_company_name#21, d_moy#15, sum#24]
Keys [6]: [i_category#7, i_class#6, i_brand#5, s_store_name#20, s_company_name#21, d_moy#15]
Functions [1]: [sum(UnscaledValue(ss_sales_price#11))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#11))#26]
Results [8]: [i_category#7, i_class#6, i_brand#5, s_store_name#20, s_company_name#21, d_moy#15, MakeDecimal(sum(UnscaledValue(ss_sales_price#11))#26,17,2) AS sum_sales#27, MakeDecimal(sum(UnscaledValue(ss_sales_price#11))#26,17,2) AS _w0#28]

(28) Exchange
Input [8]: [i_category#7, i_class#6, i_brand#5, s_store_name#20, s_company_name#21, d_moy#15, sum_sales#27, _w0#28]
Arguments: hashpartitioning(i_category#7, i_brand#5, s_store_name#20, s_company_name#21, 5), ENSURE_REQUIREMENTS, [id=#29]

(29) Sort [codegen id : 6]
Input [8]: [i_category#7, i_class#6, i_brand#5, s_store_name#20, s_company_name#21, d_moy#15, sum_sales#27, _w0#28]
Arguments: [i_category#7 ASC NULLS FIRST, i_brand#5 ASC NULLS FIRST, s_store_name#20 ASC NULLS FIRST, s_company_name#21 ASC NULLS FIRST], false, 0

(30) Window
Input [8]: [i_category#7, i_class#6, i_brand#5, s_store_name#20, s_company_name#21, d_moy#15, sum_sales#27, _w0#28]
Arguments: [avg(_w0#28) windowspecdefinition(i_category#7, i_brand#5, s_store_name#20, s_company_name#21, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#30], [i_category#7, i_brand#5, s_store_name#20, s_company_name#21]

(31) Filter [codegen id : 7]
Input [9]: [i_category#7, i_class#6, i_brand#5, s_store_name#20, s_company_name#21, d_moy#15, sum_sales#27, _w0#28, avg_monthly_sales#30]
Condition : ((isnotnull(avg_monthly_sales#30) AND NOT (avg_monthly_sales#30 = 0.000000)) AND (CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#27 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#30 as decimal(22,6)))), DecimalType(22,6), true))) / promote_precision(cast(avg_monthly_sales#30 as decimal(22,6)))), DecimalType(38,16), true) > 0.1000000000000000))

(32) Project [codegen id : 7]
Output [8]: [i_category#7, i_class#6, i_brand#5, s_store_name#20, s_company_name#21, d_moy#15, sum_sales#27, avg_monthly_sales#30]
Input [9]: [i_category#7, i_class#6, i_brand#5, s_store_name#20, s_company_name#21, d_moy#15, sum_sales#27, _w0#28, avg_monthly_sales#30]

(33) TakeOrderedAndProject
Input [8]: [i_category#7, i_class#6, i_brand#5, s_store_name#20, s_company_name#21, d_moy#15, sum_sales#27, avg_monthly_sales#30]
Arguments: 100, [CheckOverflow((promote_precision(cast(sum_sales#27 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#30 as decimal(22,6)))), DecimalType(22,6), true) ASC NULLS FIRST, s_store_name#20 ASC NULLS FIRST], [i_category#7, i_class#6, i_brand#5, s_store_name#20, s_company_name#21, d_moy#15, sum_sales#27, avg_monthly_sales#30]

