== Physical Plan ==
TakeOrderedAndProject (56)
+- * HashAggregate (55)
   +- Exchange (54)
      +- * HashAggregate (53)
         +- * Project (52)
            +- * BroadcastHashJoin Inner BuildLeft (51)
               :- BroadcastExchange (47)
               :  +- * Project (46)
               :     +- * BroadcastHashJoin Inner BuildRight (45)
               :        :- * Project (39)
               :        :  +- * BroadcastHashJoin LeftSemi BuildRight (38)
               :        :     :- * BroadcastHashJoin LeftSemi BuildRight (26)
               :        :     :  :- * Filter (3)
               :        :     :  :  +- * ColumnarToRow (2)
               :        :     :  :     +- Scan parquet default.customer (1)
               :        :     :  +- BroadcastExchange (25)
               :        :     :     +- Union (24)
               :        :     :        :- * Project (13)
               :        :     :        :  +- * BroadcastHashJoin Inner BuildLeft (12)
               :        :     :        :     :- BroadcastExchange (7)
               :        :     :        :     :  +- * Filter (6)
               :        :     :        :     :     +- * ColumnarToRow (5)
               :        :     :        :     :        +- Scan parquet default.web_sales (4)
               :        :     :        :     +- * Project (11)
               :        :     :        :        +- * Filter (10)
               :        :     :        :           +- * ColumnarToRow (9)
               :        :     :        :              +- Scan parquet default.date_dim (8)
               :        :     :        +- * Project (23)
               :        :     :           +- * BroadcastHashJoin Inner BuildLeft (22)
               :        :     :              :- BroadcastExchange (17)
               :        :     :              :  +- * Filter (16)
               :        :     :              :     +- * ColumnarToRow (15)
               :        :     :              :        +- Scan parquet default.catalog_sales (14)
               :        :     :              +- * Project (21)
               :        :     :                 +- * Filter (20)
               :        :     :                    +- * ColumnarToRow (19)
               :        :     :                       +- Scan parquet default.date_dim (18)
               :        :     +- BroadcastExchange (37)
               :        :        +- * Project (36)
               :        :           +- * BroadcastHashJoin Inner BuildLeft (35)
               :        :              :- BroadcastExchange (30)
               :        :              :  +- * Filter (29)
               :        :              :     +- * ColumnarToRow (28)
               :        :              :        +- Scan parquet default.store_sales (27)
               :        :              +- * Project (34)
               :        :                 +- * Filter (33)
               :        :                    +- * ColumnarToRow (32)
               :        :                       +- Scan parquet default.date_dim (31)
               :        +- BroadcastExchange (44)
               :           +- * Project (43)
               :              +- * Filter (42)
               :                 +- * ColumnarToRow (41)
               :                    +- Scan parquet default.customer_address (40)
               +- * Filter (50)
                  +- * ColumnarToRow (49)
                     +- Scan parquet default.customer_demographics (48)


(1) Scan parquet default.customer
Output [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 8]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(3) Filter [codegen id : 8]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Condition : ((isnotnull(c_customer_sk#1) AND isnotnull(c_current_addr_sk#3)) AND isnotnull(c_current_cdemo_sk#2))

(4) Scan parquet default.web_sales
Output [2]: [ws_bill_customer_sk#4, ws_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#5), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [ws_bill_customer_sk#4, ws_sold_date_sk#5]

(6) Filter [codegen id : 1]
Input [2]: [ws_bill_customer_sk#4, ws_sold_date_sk#5]
Condition : isnotnull(ws_bill_customer_sk#4)

(7) BroadcastExchange
Input [2]: [ws_bill_customer_sk#4, ws_sold_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#6]

(8) Scan parquet default.date_dim
Output [3]: [d_date_sk#7, d_year#8, d_moy#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2002), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,7), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(9) ColumnarToRow
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]

(10) Filter
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]
Condition : (((((isnotnull(d_year#8) AND isnotnull(d_moy#9)) AND (d_year#8 = 2002)) AND (d_moy#9 >= 4)) AND (d_moy#9 <= 7)) AND isnotnull(d_date_sk#7))

(11) Project
Output [1]: [d_date_sk#7]
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]

(12) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_sold_date_sk#5]
Right keys [1]: [d_date_sk#7]
Join condition: None

(13) Project [codegen id : 2]
Output [1]: [ws_bill_customer_sk#4 AS customer_sk#10]
Input [3]: [ws_bill_customer_sk#4, ws_sold_date_sk#5, d_date_sk#7]

(14) Scan parquet default.catalog_sales
Output [2]: [cs_ship_customer_sk#11, cs_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#12), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(cs_ship_customer_sk)]
ReadSchema: struct<cs_ship_customer_sk:int>

(15) ColumnarToRow [codegen id : 3]
Input [2]: [cs_ship_customer_sk#11, cs_sold_date_sk#12]

(16) Filter [codegen id : 3]
Input [2]: [cs_ship_customer_sk#11, cs_sold_date_sk#12]
Condition : isnotnull(cs_ship_customer_sk#11)

(17) BroadcastExchange
Input [2]: [cs_ship_customer_sk#11, cs_sold_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#13]

(18) Scan parquet default.date_dim
Output [3]: [d_date_sk#7, d_year#8, d_moy#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2002), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,7), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(19) ColumnarToRow
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]

(20) Filter
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]
Condition : (((((isnotnull(d_year#8) AND isnotnull(d_moy#9)) AND (d_year#8 = 2002)) AND (d_moy#9 >= 4)) AND (d_moy#9 <= 7)) AND isnotnull(d_date_sk#7))

(21) Project
Output [1]: [d_date_sk#7]
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]

(22) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#12]
Right keys [1]: [d_date_sk#7]
Join condition: None

(23) Project [codegen id : 4]
Output [1]: [cs_ship_customer_sk#11 AS customer_sk#14]
Input [3]: [cs_ship_customer_sk#11, cs_sold_date_sk#12, d_date_sk#7]

(24) Union

(25) BroadcastExchange
Input [1]: [customer_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15]

(26) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [customer_sk#10]
Join condition: None

(27) Scan parquet default.store_sales
Output [2]: [ss_customer_sk#16, ss_sold_date_sk#17]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#17), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int>

(28) ColumnarToRow [codegen id : 5]
Input [2]: [ss_customer_sk#16, ss_sold_date_sk#17]

(29) Filter [codegen id : 5]
Input [2]: [ss_customer_sk#16, ss_sold_date_sk#17]
Condition : isnotnull(ss_customer_sk#16)

(30) BroadcastExchange
Input [2]: [ss_customer_sk#16, ss_sold_date_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#18]

(31) Scan parquet default.date_dim
Output [3]: [d_date_sk#7, d_year#8, d_moy#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2002), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,7), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(32) ColumnarToRow
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]

(33) Filter
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]
Condition : (((((isnotnull(d_year#8) AND isnotnull(d_moy#9)) AND (d_year#8 = 2002)) AND (d_moy#9 >= 4)) AND (d_moy#9 <= 7)) AND isnotnull(d_date_sk#7))

(34) Project
Output [1]: [d_date_sk#7]
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]

(35) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#17]
Right keys [1]: [d_date_sk#7]
Join condition: None

(36) Project [codegen id : 6]
Output [1]: [ss_customer_sk#16 AS customer_sk#19]
Input [3]: [ss_customer_sk#16, ss_sold_date_sk#17, d_date_sk#7]

(37) BroadcastExchange
Input [1]: [customer_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#20]

(38) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [customer_sk#19]
Join condition: None

(39) Project [codegen id : 8]
Output [2]: [c_current_cdemo_sk#2, c_current_addr_sk#3]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(40) Scan parquet default.customer_address
Output [2]: [ca_address_sk#21, ca_county#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_county, [Walker County,Richland County,Gaines County,Douglas County,Dona Ana County]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(41) ColumnarToRow [codegen id : 7]
Input [2]: [ca_address_sk#21, ca_county#22]

(42) Filter [codegen id : 7]
Input [2]: [ca_address_sk#21, ca_county#22]
Condition : (ca_county#22 IN (Walker County,Richland County,Gaines County,Douglas County,Dona Ana County) AND isnotnull(ca_address_sk#21))

(43) Project [codegen id : 7]
Output [1]: [ca_address_sk#21]
Input [2]: [ca_address_sk#21, ca_county#22]

(44) BroadcastExchange
Input [1]: [ca_address_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#23]

(45) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [c_current_addr_sk#3]
Right keys [1]: [ca_address_sk#21]
Join condition: None

(46) Project [codegen id : 8]
Output [1]: [c_current_cdemo_sk#2]
Input [3]: [c_current_cdemo_sk#2, c_current_addr_sk#3, ca_address_sk#21]

(47) BroadcastExchange
Input [1]: [c_current_cdemo_sk#2]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#24]

(48) Scan parquet default.customer_demographics
Output [9]: [cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_purchase_estimate:int,cd_credit_rating:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(49) ColumnarToRow
Input [9]: [cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]

(50) Filter
Input [9]: [cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Condition : isnotnull(cd_demo_sk#25)

(51) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_current_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#25]
Join condition: None

(52) Project [codegen id : 9]
Output [8]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Input [10]: [c_current_cdemo_sk#2, cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]

(53) HashAggregate [codegen id : 9]
Input [8]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Keys [8]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#34]
Results [9]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33, count#35]

(54) Exchange
Input [9]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33, count#35]
Arguments: hashpartitioning(cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33, 5), ENSURE_REQUIREMENTS, [id=#36]

(55) HashAggregate [codegen id : 10]
Input [9]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33, count#35]
Keys [8]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#37]
Results [14]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, count(1)#37 AS cnt1#38, cd_purchase_estimate#29, count(1)#37 AS cnt2#39, cd_credit_rating#30, count(1)#37 AS cnt3#40, cd_dep_count#31, count(1)#37 AS cnt4#41, cd_dep_employed_count#32, count(1)#37 AS cnt5#42, cd_dep_college_count#33, count(1)#37 AS cnt6#43]

(56) TakeOrderedAndProject
Input [14]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cnt1#38, cd_purchase_estimate#29, cnt2#39, cd_credit_rating#30, cnt3#40, cd_dep_count#31, cnt4#41, cd_dep_employed_count#32, cnt5#42, cd_dep_college_count#33, cnt6#43]
Arguments: 100, [cd_gender#26 ASC NULLS FIRST, cd_marital_status#27 ASC NULLS FIRST, cd_education_status#28 ASC NULLS FIRST, cd_purchase_estimate#29 ASC NULLS FIRST, cd_credit_rating#30 ASC NULLS FIRST, cd_dep_count#31 ASC NULLS FIRST, cd_dep_employed_count#32 ASC NULLS FIRST, cd_dep_college_count#33 ASC NULLS FIRST], [cd_gender#26, cd_marital_status#27, cd_education_status#28, cnt1#38, cd_purchase_estimate#29, cnt2#39, cd_credit_rating#30, cnt3#40, cd_dep_count#31, cnt4#41, cd_dep_employed_count#32, cnt5#42, cd_dep_college_count#33, cnt6#43]

