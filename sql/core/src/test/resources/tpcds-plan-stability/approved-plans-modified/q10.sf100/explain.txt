== Physical Plan ==
TakeOrderedAndProject (52)
+- * HashAggregate (51)
   +- Exchange (50)
      +- * HashAggregate (49)
         +- * Project (48)
            +- * BroadcastHashJoin Inner BuildLeft (47)
               :- BroadcastExchange (43)
               :  +- * Project (42)
               :     +- * BroadcastHashJoin Inner BuildLeft (41)
               :        :- BroadcastExchange (5)
               :        :  +- * Project (4)
               :        :     +- * Filter (3)
               :        :        +- * ColumnarToRow (2)
               :        :           +- Scan parquet default.customer_address (1)
               :        +- * Project (40)
               :           +- SortMergeJoin LeftSemi (39)
               :              :- SortMergeJoin LeftSemi (30)
               :              :  :- * Sort (10)
               :              :  :  +- Exchange (9)
               :              :  :     +- * Filter (8)
               :              :  :        +- * ColumnarToRow (7)
               :              :  :           +- Scan parquet default.customer (6)
               :              :  +- * Sort (29)
               :              :     +- Exchange (28)
               :              :        +- Union (27)
               :              :           :- * Project (20)
               :              :           :  +- * BroadcastHashJoin Inner BuildRight (19)
               :              :           :     :- * Filter (13)
               :              :           :     :  +- * ColumnarToRow (12)
               :              :           :     :     +- Scan parquet default.web_sales (11)
               :              :           :     +- BroadcastExchange (18)
               :              :           :        +- * Project (17)
               :              :           :           +- * Filter (16)
               :              :           :              +- * ColumnarToRow (15)
               :              :           :                 +- Scan parquet default.date_dim (14)
               :              :           +- * Project (26)
               :              :              +- * BroadcastHashJoin Inner BuildRight (25)
               :              :                 :- * Filter (23)
               :              :                 :  +- * ColumnarToRow (22)
               :              :                 :     +- Scan parquet default.catalog_sales (21)
               :              :                 +- ReusedExchange (24)
               :              +- * Sort (38)
               :                 +- Exchange (37)
               :                    +- * Project (36)
               :                       +- * BroadcastHashJoin Inner BuildRight (35)
               :                          :- * Filter (33)
               :                          :  +- * ColumnarToRow (32)
               :                          :     +- Scan parquet default.store_sales (31)
               :                          +- ReusedExchange (34)
               +- * Filter (46)
                  +- * ColumnarToRow (45)
                     +- Scan parquet default.customer_demographics (44)


(1) Scan parquet default.customer_address
Output [2]: [ca_address_sk#1, ca_county#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_county, [Walker County,Richland County,Gaines County,Douglas County,Dona Ana County]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(2) ColumnarToRow [codegen id : 1]
Input [2]: [ca_address_sk#1, ca_county#2]

(3) Filter [codegen id : 1]
Input [2]: [ca_address_sk#1, ca_county#2]
Condition : (ca_county#2 IN (Walker County,Richland County,Gaines County,Douglas County,Dona Ana County) AND isnotnull(ca_address_sk#1))

(4) Project [codegen id : 1]
Output [1]: [ca_address_sk#1]
Input [2]: [ca_address_sk#1, ca_county#2]

(5) BroadcastExchange
Input [1]: [ca_address_sk#1]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#3]

(6) Scan parquet default.customer
Output [3]: [c_customer_sk#4, c_current_cdemo_sk#5, c_current_addr_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(7) ColumnarToRow [codegen id : 2]
Input [3]: [c_customer_sk#4, c_current_cdemo_sk#5, c_current_addr_sk#6]

(8) Filter [codegen id : 2]
Input [3]: [c_customer_sk#4, c_current_cdemo_sk#5, c_current_addr_sk#6]
Condition : ((isnotnull(c_customer_sk#4) AND isnotnull(c_current_addr_sk#6)) AND isnotnull(c_current_cdemo_sk#5))

(9) Exchange
Input [3]: [c_customer_sk#4, c_current_cdemo_sk#5, c_current_addr_sk#6]
Arguments: hashpartitioning(c_customer_sk#4, 5), true, [id=#7]

(10) Sort [codegen id : 3]
Input [3]: [c_customer_sk#4, c_current_cdemo_sk#5, c_current_addr_sk#6]
Arguments: [c_customer_sk#4 ASC NULLS FIRST], false, 0

(11) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#8, ws_bill_customer_sk#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int>

(12) ColumnarToRow [codegen id : 5]
Input [2]: [ws_sold_date_sk#8, ws_bill_customer_sk#9]

(13) Filter [codegen id : 5]
Input [2]: [ws_sold_date_sk#8, ws_bill_customer_sk#9]
Condition : (isnotnull(ws_sold_date_sk#8) AND isnotnull(ws_bill_customer_sk#9))

(14) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2002), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,7), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(15) ColumnarToRow [codegen id : 4]
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]

(16) Filter [codegen id : 4]
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]
Condition : (((((isnotnull(d_year#11) AND isnotnull(d_moy#12)) AND (d_year#11 = 2002)) AND (d_moy#12 >= 4)) AND (d_moy#12 <= 7)) AND isnotnull(d_date_sk#10))

(17) Project [codegen id : 4]
Output [1]: [d_date_sk#10]
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]

(18) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13]

(19) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ws_sold_date_sk#8]
Right keys [1]: [d_date_sk#10]
Join condition: None

(20) Project [codegen id : 5]
Output [1]: [ws_bill_customer_sk#9 AS customer_sk#14]
Input [3]: [ws_sold_date_sk#8, ws_bill_customer_sk#9, d_date_sk#10]

(21) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#15, cs_ship_customer_sk#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_ship_customer_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_ship_customer_sk:int>

(22) ColumnarToRow [codegen id : 7]
Input [2]: [cs_sold_date_sk#15, cs_ship_customer_sk#16]

(23) Filter [codegen id : 7]
Input [2]: [cs_sold_date_sk#15, cs_ship_customer_sk#16]
Condition : (isnotnull(cs_sold_date_sk#15) AND isnotnull(cs_ship_customer_sk#16))

(24) ReusedExchange [Reuses operator id: 18]
Output [1]: [d_date_sk#10]

(25) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cs_sold_date_sk#15]
Right keys [1]: [d_date_sk#10]
Join condition: None

(26) Project [codegen id : 7]
Output [1]: [cs_ship_customer_sk#16 AS customer_sk#17]
Input [3]: [cs_sold_date_sk#15, cs_ship_customer_sk#16, d_date_sk#10]

(27) Union

(28) Exchange
Input [1]: [customer_sk#14]
Arguments: hashpartitioning(customer_sk#14, 5), true, [id=#18]

(29) Sort [codegen id : 8]
Input [1]: [customer_sk#14]
Arguments: [customer_sk#14 ASC NULLS FIRST], false, 0

(30) SortMergeJoin
Left keys [1]: [c_customer_sk#4]
Right keys [1]: [customer_sk#14]
Join condition: None

(31) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#19, ss_customer_sk#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int>

(32) ColumnarToRow [codegen id : 10]
Input [2]: [ss_sold_date_sk#19, ss_customer_sk#20]

(33) Filter [codegen id : 10]
Input [2]: [ss_sold_date_sk#19, ss_customer_sk#20]
Condition : (isnotnull(ss_sold_date_sk#19) AND isnotnull(ss_customer_sk#20))

(34) ReusedExchange [Reuses operator id: 18]
Output [1]: [d_date_sk#10]

(35) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#19]
Right keys [1]: [d_date_sk#10]
Join condition: None

(36) Project [codegen id : 10]
Output [1]: [ss_customer_sk#20 AS customer_sk#21]
Input [3]: [ss_sold_date_sk#19, ss_customer_sk#20, d_date_sk#10]

(37) Exchange
Input [1]: [customer_sk#21]
Arguments: hashpartitioning(customer_sk#21, 5), true, [id=#22]

(38) Sort [codegen id : 11]
Input [1]: [customer_sk#21]
Arguments: [customer_sk#21 ASC NULLS FIRST], false, 0

(39) SortMergeJoin
Left keys [1]: [c_customer_sk#4]
Right keys [1]: [customer_sk#21]
Join condition: None

(40) Project
Output [2]: [c_current_cdemo_sk#5, c_current_addr_sk#6]
Input [3]: [c_customer_sk#4, c_current_cdemo_sk#5, c_current_addr_sk#6]

(41) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ca_address_sk#1]
Right keys [1]: [c_current_addr_sk#6]
Join condition: None

(42) Project [codegen id : 12]
Output [1]: [c_current_cdemo_sk#5]
Input [3]: [ca_address_sk#1, c_current_cdemo_sk#5, c_current_addr_sk#6]

(43) BroadcastExchange
Input [1]: [c_current_cdemo_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#23]

(44) Scan parquet default.customer_demographics
Output [9]: [cd_demo_sk#24, cd_gender#25, cd_marital_status#26, cd_education_status#27, cd_purchase_estimate#28, cd_credit_rating#29, cd_dep_count#30, cd_dep_employed_count#31, cd_dep_college_count#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_purchase_estimate:int,cd_credit_rating:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(45) ColumnarToRow
Input [9]: [cd_demo_sk#24, cd_gender#25, cd_marital_status#26, cd_education_status#27, cd_purchase_estimate#28, cd_credit_rating#29, cd_dep_count#30, cd_dep_employed_count#31, cd_dep_college_count#32]

(46) Filter
Input [9]: [cd_demo_sk#24, cd_gender#25, cd_marital_status#26, cd_education_status#27, cd_purchase_estimate#28, cd_credit_rating#29, cd_dep_count#30, cd_dep_employed_count#31, cd_dep_college_count#32]
Condition : isnotnull(cd_demo_sk#24)

(47) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [c_current_cdemo_sk#5]
Right keys [1]: [cd_demo_sk#24]
Join condition: None

(48) Project [codegen id : 13]
Output [8]: [cd_gender#25, cd_marital_status#26, cd_education_status#27, cd_purchase_estimate#28, cd_credit_rating#29, cd_dep_count#30, cd_dep_employed_count#31, cd_dep_college_count#32]
Input [10]: [c_current_cdemo_sk#5, cd_demo_sk#24, cd_gender#25, cd_marital_status#26, cd_education_status#27, cd_purchase_estimate#28, cd_credit_rating#29, cd_dep_count#30, cd_dep_employed_count#31, cd_dep_college_count#32]

(49) HashAggregate [codegen id : 13]
Input [8]: [cd_gender#25, cd_marital_status#26, cd_education_status#27, cd_purchase_estimate#28, cd_credit_rating#29, cd_dep_count#30, cd_dep_employed_count#31, cd_dep_college_count#32]
Keys [8]: [cd_gender#25, cd_marital_status#26, cd_education_status#27, cd_purchase_estimate#28, cd_credit_rating#29, cd_dep_count#30, cd_dep_employed_count#31, cd_dep_college_count#32]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#33]
Results [9]: [cd_gender#25, cd_marital_status#26, cd_education_status#27, cd_purchase_estimate#28, cd_credit_rating#29, cd_dep_count#30, cd_dep_employed_count#31, cd_dep_college_count#32, count#34]

(50) Exchange
Input [9]: [cd_gender#25, cd_marital_status#26, cd_education_status#27, cd_purchase_estimate#28, cd_credit_rating#29, cd_dep_count#30, cd_dep_employed_count#31, cd_dep_college_count#32, count#34]
Arguments: hashpartitioning(cd_gender#25, cd_marital_status#26, cd_education_status#27, cd_purchase_estimate#28, cd_credit_rating#29, cd_dep_count#30, cd_dep_employed_count#31, cd_dep_college_count#32, 5), true, [id=#35]

(51) HashAggregate [codegen id : 14]
Input [9]: [cd_gender#25, cd_marital_status#26, cd_education_status#27, cd_purchase_estimate#28, cd_credit_rating#29, cd_dep_count#30, cd_dep_employed_count#31, cd_dep_college_count#32, count#34]
Keys [8]: [cd_gender#25, cd_marital_status#26, cd_education_status#27, cd_purchase_estimate#28, cd_credit_rating#29, cd_dep_count#30, cd_dep_employed_count#31, cd_dep_college_count#32]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#36]
Results [14]: [cd_gender#25, cd_marital_status#26, cd_education_status#27, count(1)#36 AS cnt1#37, cd_purchase_estimate#28, count(1)#36 AS cnt2#38, cd_credit_rating#29, count(1)#36 AS cnt3#39, cd_dep_count#30, count(1)#36 AS cnt4#40, cd_dep_employed_count#31, count(1)#36 AS cnt5#41, cd_dep_college_count#32, count(1)#36 AS cnt6#42]

(52) TakeOrderedAndProject
Input [14]: [cd_gender#25, cd_marital_status#26, cd_education_status#27, cnt1#37, cd_purchase_estimate#28, cnt2#38, cd_credit_rating#29, cnt3#39, cd_dep_count#30, cnt4#40, cd_dep_employed_count#31, cnt5#41, cd_dep_college_count#32, cnt6#42]
Arguments: 100, [cd_gender#25 ASC NULLS FIRST, cd_marital_status#26 ASC NULLS FIRST, cd_education_status#27 ASC NULLS FIRST, cd_purchase_estimate#28 ASC NULLS FIRST, cd_credit_rating#29 ASC NULLS FIRST, cd_dep_count#30 ASC NULLS FIRST, cd_dep_employed_count#31 ASC NULLS FIRST, cd_dep_college_count#32 ASC NULLS FIRST], [cd_gender#25, cd_marital_status#26, cd_education_status#27, cnt1#37, cd_purchase_estimate#28, cnt2#38, cd_credit_rating#29, cnt3#39, cd_dep_count#30, cnt4#40, cd_dep_employed_count#31, cnt5#41, cd_dep_college_count#32, cnt6#42]

