== Physical Plan ==
TakeOrderedAndProject (59)
+- * HashAggregate (58)
   +- Exchange (57)
      +- * HashAggregate (56)
         +- * Project (55)
            +- * SortMergeJoin Inner (54)
               :- * Sort (47)
               :  +- Exchange (46)
               :     +- * Project (45)
               :        +- * SortMergeJoin Inner (44)
               :           :- * Sort (37)
               :           :  +- Exchange (36)
               :           :     +- * Project (35)
               :           :        +- SortMergeJoin LeftSemi (34)
               :           :           :- SortMergeJoin LeftSemi (25)
               :           :           :  :- * Sort (5)
               :           :           :  :  +- Exchange (4)
               :           :           :  :     +- * Filter (3)
               :           :           :  :        +- * ColumnarToRow (2)
               :           :           :  :           +- Scan parquet default.customer (1)
               :           :           :  +- * Sort (24)
               :           :           :     +- Exchange (23)
               :           :           :        +- Union (22)
               :           :           :           :- * Project (15)
               :           :           :           :  +- * BroadcastHashJoin Inner BuildRight (14)
               :           :           :           :     :- * Filter (8)
               :           :           :           :     :  +- * ColumnarToRow (7)
               :           :           :           :     :     +- Scan parquet default.web_sales (6)
               :           :           :           :     +- BroadcastExchange (13)
               :           :           :           :        +- * Project (12)
               :           :           :           :           +- * Filter (11)
               :           :           :           :              +- * ColumnarToRow (10)
               :           :           :           :                 +- Scan parquet default.date_dim (9)
               :           :           :           +- * Project (21)
               :           :           :              +- * BroadcastHashJoin Inner BuildRight (20)
               :           :           :                 :- * Filter (18)
               :           :           :                 :  +- * ColumnarToRow (17)
               :           :           :                 :     +- Scan parquet default.catalog_sales (16)
               :           :           :                 +- ReusedExchange (19)
               :           :           +- * Sort (33)
               :           :              +- Exchange (32)
               :           :                 +- * Project (31)
               :           :                    +- * BroadcastHashJoin Inner BuildRight (30)
               :           :                       :- * Filter (28)
               :           :                       :  +- * ColumnarToRow (27)
               :           :                       :     +- Scan parquet default.store_sales (26)
               :           :                       +- ReusedExchange (29)
               :           +- * Sort (43)
               :              +- Exchange (42)
               :                 +- * Project (41)
               :                    +- * Filter (40)
               :                       +- * ColumnarToRow (39)
               :                          +- Scan parquet default.customer_address (38)
               +- * Sort (53)
                  +- Exchange (52)
                     +- * Project (51)
                        +- * Filter (50)
                           +- * ColumnarToRow (49)
                              +- Scan parquet default.customer_demographics (48)


(1) Scan parquet default.customer
Output [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(3) Filter [codegen id : 1]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Condition : ((isnotnull(c_customer_sk#1) AND isnotnull(c_current_addr_sk#3)) AND isnotnull(c_current_cdemo_sk#2))

(4) Exchange
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: hashpartitioning(c_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#4]

(5) Sort [codegen id : 2]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#5, ws_bill_customer_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ws_sold_date_sk#5, ws_bill_customer_sk#6]

(8) Filter [codegen id : 4]
Input [2]: [ws_sold_date_sk#5, ws_bill_customer_sk#6]
Condition : (isnotnull(ws_sold_date_sk#5) AND isnotnull(ws_bill_customer_sk#6))

(9) Scan parquet default.date_dim
Output [3]: [d_date_sk#7, d_year#8, d_moy#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2002), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,7), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(10) ColumnarToRow [codegen id : 3]
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]

(11) Filter [codegen id : 3]
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]
Condition : (((((isnotnull(d_year#8) AND isnotnull(d_moy#9)) AND (d_year#8 = 2002)) AND (d_moy#9 >= 4)) AND (d_moy#9 <= 7)) AND isnotnull(d_date_sk#7))

(12) Project [codegen id : 3]
Output [1]: [d_date_sk#7]
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]

(13) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#10]

(14) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ws_sold_date_sk#5]
Right keys [1]: [d_date_sk#7]
Join condition: None

(15) Project [codegen id : 4]
Output [1]: [ws_bill_customer_sk#6 AS customer_sk#11]
Input [3]: [ws_sold_date_sk#5, ws_bill_customer_sk#6, d_date_sk#7]

(16) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#12, cs_ship_customer_sk#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_ship_customer_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_ship_customer_sk:int>

(17) ColumnarToRow [codegen id : 6]
Input [2]: [cs_sold_date_sk#12, cs_ship_customer_sk#13]

(18) Filter [codegen id : 6]
Input [2]: [cs_sold_date_sk#12, cs_ship_customer_sk#13]
Condition : (isnotnull(cs_sold_date_sk#12) AND isnotnull(cs_ship_customer_sk#13))

(19) ReusedExchange [Reuses operator id: 13]
Output [1]: [d_date_sk#7]

(20) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#12]
Right keys [1]: [d_date_sk#7]
Join condition: None

(21) Project [codegen id : 6]
Output [1]: [cs_ship_customer_sk#13 AS customer_sk#14]
Input [3]: [cs_sold_date_sk#12, cs_ship_customer_sk#13, d_date_sk#7]

(22) Union

(23) Exchange
Input [1]: [customer_sk#11]
Arguments: hashpartitioning(customer_sk#11, 5), ENSURE_REQUIREMENTS, [id=#15]

(24) Sort [codegen id : 7]
Input [1]: [customer_sk#11]
Arguments: [customer_sk#11 ASC NULLS FIRST], false, 0

(25) SortMergeJoin
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [customer_sk#11]
Join condition: None

(26) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#16, ss_customer_sk#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int>

(27) ColumnarToRow [codegen id : 9]
Input [2]: [ss_sold_date_sk#16, ss_customer_sk#17]

(28) Filter [codegen id : 9]
Input [2]: [ss_sold_date_sk#16, ss_customer_sk#17]
Condition : (isnotnull(ss_sold_date_sk#16) AND isnotnull(ss_customer_sk#17))

(29) ReusedExchange [Reuses operator id: 13]
Output [1]: [d_date_sk#7]

(30) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_sold_date_sk#16]
Right keys [1]: [d_date_sk#7]
Join condition: None

(31) Project [codegen id : 9]
Output [1]: [ss_customer_sk#17 AS customer_sk#18]
Input [3]: [ss_sold_date_sk#16, ss_customer_sk#17, d_date_sk#7]

(32) Exchange
Input [1]: [customer_sk#18]
Arguments: hashpartitioning(customer_sk#18, 5), ENSURE_REQUIREMENTS, [id=#19]

(33) Sort [codegen id : 10]
Input [1]: [customer_sk#18]
Arguments: [customer_sk#18 ASC NULLS FIRST], false, 0

(34) SortMergeJoin
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [customer_sk#18]
Join condition: None

(35) Project [codegen id : 11]
Output [2]: [c_current_cdemo_sk#2, c_current_addr_sk#3]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(36) Exchange
Input [2]: [c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: hashpartitioning(c_current_addr_sk#3, 5), ENSURE_REQUIREMENTS, [id=#20]

(37) Sort [codegen id : 12]
Input [2]: [c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: [c_current_addr_sk#3 ASC NULLS FIRST], false, 0

(38) Scan parquet default.customer_address
Output [2]: [ca_address_sk#21, ca_county#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(39) ColumnarToRow [codegen id : 13]
Input [2]: [ca_address_sk#21, ca_county#22]

(40) Filter [codegen id : 13]
Input [2]: [ca_address_sk#21, ca_county#22]
Condition : (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_county#22, 30, false, true) IN (Walker County,Richland County,Gaines County,Douglas County,Dona Ana County) AND isnotnull(ca_address_sk#21))

(41) Project [codegen id : 13]
Output [1]: [ca_address_sk#21]
Input [2]: [ca_address_sk#21, ca_county#22]

(42) Exchange
Input [1]: [ca_address_sk#21]
Arguments: hashpartitioning(ca_address_sk#21, 5), ENSURE_REQUIREMENTS, [id=#23]

(43) Sort [codegen id : 14]
Input [1]: [ca_address_sk#21]
Arguments: [ca_address_sk#21 ASC NULLS FIRST], false, 0

(44) SortMergeJoin [codegen id : 15]
Left keys [1]: [c_current_addr_sk#3]
Right keys [1]: [ca_address_sk#21]
Join condition: None

(45) Project [codegen id : 15]
Output [1]: [c_current_cdemo_sk#2]
Input [3]: [c_current_cdemo_sk#2, c_current_addr_sk#3, ca_address_sk#21]

(46) Exchange
Input [1]: [c_current_cdemo_sk#2]
Arguments: hashpartitioning(c_current_cdemo_sk#2, 5), ENSURE_REQUIREMENTS, [id=#24]

(47) Sort [codegen id : 16]
Input [1]: [c_current_cdemo_sk#2]
Arguments: [c_current_cdemo_sk#2 ASC NULLS FIRST], false, 0

(48) Scan parquet default.customer_demographics
Output [9]: [cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_purchase_estimate:int,cd_credit_rating:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(49) ColumnarToRow [codegen id : 17]
Input [9]: [cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]

(50) Filter [codegen id : 17]
Input [9]: [cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Condition : isnotnull(cd_demo_sk#25)

(51) Project [codegen id : 17]
Output [9]: [cd_demo_sk#25, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_gender#26, 1, false, true) AS cd_gender#34, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_marital_status#27, 1, false, true) AS cd_marital_status#35, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_education_status#28, 20, false, true) AS cd_education_status#36, cd_purchase_estimate#29, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_credit_rating#30, 10, false, true) AS cd_credit_rating#37, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Input [9]: [cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]

(52) Exchange
Input [9]: [cd_demo_sk#25, cd_gender#34, cd_marital_status#35, cd_education_status#36, cd_purchase_estimate#29, cd_credit_rating#37, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Arguments: hashpartitioning(cd_demo_sk#25, 5), ENSURE_REQUIREMENTS, [id=#38]

(53) Sort [codegen id : 18]
Input [9]: [cd_demo_sk#25, cd_gender#34, cd_marital_status#35, cd_education_status#36, cd_purchase_estimate#29, cd_credit_rating#37, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Arguments: [cd_demo_sk#25 ASC NULLS FIRST], false, 0

(54) SortMergeJoin [codegen id : 19]
Left keys [1]: [c_current_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#25]
Join condition: None

(55) Project [codegen id : 19]
Output [8]: [cd_gender#34, cd_marital_status#35, cd_education_status#36, cd_purchase_estimate#29, cd_credit_rating#37, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Input [10]: [c_current_cdemo_sk#2, cd_demo_sk#25, cd_gender#34, cd_marital_status#35, cd_education_status#36, cd_purchase_estimate#29, cd_credit_rating#37, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]

(56) HashAggregate [codegen id : 19]
Input [8]: [cd_gender#34, cd_marital_status#35, cd_education_status#36, cd_purchase_estimate#29, cd_credit_rating#37, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Keys [8]: [cd_gender#34, cd_marital_status#35, cd_education_status#36, cd_purchase_estimate#29, cd_credit_rating#37, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#39]
Results [9]: [cd_gender#34, cd_marital_status#35, cd_education_status#36, cd_purchase_estimate#29, cd_credit_rating#37, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33, count#40]

(57) Exchange
Input [9]: [cd_gender#34, cd_marital_status#35, cd_education_status#36, cd_purchase_estimate#29, cd_credit_rating#37, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33, count#40]
Arguments: hashpartitioning(cd_gender#34, cd_marital_status#35, cd_education_status#36, cd_purchase_estimate#29, cd_credit_rating#37, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33, 5), ENSURE_REQUIREMENTS, [id=#41]

(58) HashAggregate [codegen id : 20]
Input [9]: [cd_gender#34, cd_marital_status#35, cd_education_status#36, cd_purchase_estimate#29, cd_credit_rating#37, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33, count#40]
Keys [8]: [cd_gender#34, cd_marital_status#35, cd_education_status#36, cd_purchase_estimate#29, cd_credit_rating#37, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#42]
Results [14]: [cd_gender#34, cd_marital_status#35, cd_education_status#36, count(1)#42 AS cnt1#43, cd_purchase_estimate#29, count(1)#42 AS cnt2#44, cd_credit_rating#37, count(1)#42 AS cnt3#45, cd_dep_count#31, count(1)#42 AS cnt4#46, cd_dep_employed_count#32, count(1)#42 AS cnt5#47, cd_dep_college_count#33, count(1)#42 AS cnt6#48]

(59) TakeOrderedAndProject
Input [14]: [cd_gender#34, cd_marital_status#35, cd_education_status#36, cnt1#43, cd_purchase_estimate#29, cnt2#44, cd_credit_rating#37, cnt3#45, cd_dep_count#31, cnt4#46, cd_dep_employed_count#32, cnt5#47, cd_dep_college_count#33, cnt6#48]
Arguments: 100, [cd_gender#34 ASC NULLS FIRST, cd_marital_status#35 ASC NULLS FIRST, cd_education_status#36 ASC NULLS FIRST, cd_purchase_estimate#29 ASC NULLS FIRST, cd_credit_rating#37 ASC NULLS FIRST, cd_dep_count#31 ASC NULLS FIRST, cd_dep_employed_count#32 ASC NULLS FIRST, cd_dep_college_count#33 ASC NULLS FIRST], [cd_gender#34, cd_marital_status#35, cd_education_status#36, cnt1#43, cd_purchase_estimate#29, cnt2#44, cd_credit_rating#37, cnt3#45, cd_dep_count#31, cnt4#46, cd_dep_employed_count#32, cnt5#47, cd_dep_college_count#33, cnt6#48]

