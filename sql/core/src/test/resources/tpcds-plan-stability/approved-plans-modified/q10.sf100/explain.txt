== Physical Plan ==
TakeOrderedAndProject (50)
+- * HashAggregate (49)
   +- Exchange (48)
      +- * HashAggregate (47)
         +- * Project (46)
            +- * SortMergeJoin LeftSemi (45)
               :- * Sort (36)
               :  +- Exchange (35)
               :     +- * Project (34)
               :        +- * BroadcastHashJoin Inner BuildLeft (33)
               :           :- BroadcastExchange (29)
               :           :  +- * Project (28)
               :           :     +- * BroadcastHashJoin Inner BuildRight (27)
               :           :        :- * SortMergeJoin LeftSemi (21)
               :           :        :  :- * Sort (5)
               :           :        :  :  +- Exchange (4)
               :           :        :  :     +- * Filter (3)
               :           :        :  :        +- * ColumnarToRow (2)
               :           :        :  :           +- Scan parquet spark_catalog.default.customer (1)
               :           :        :  +- * Sort (20)
               :           :        :     +- Exchange (19)
               :           :        :        +- Union (18)
               :           :        :           :- * Project (11)
               :           :        :           :  +- * BroadcastHashJoin Inner BuildRight (10)
               :           :        :           :     :- * Filter (8)
               :           :        :           :     :  +- * ColumnarToRow (7)
               :           :        :           :     :     +- Scan parquet spark_catalog.default.web_sales (6)
               :           :        :           :     +- ReusedExchange (9)
               :           :        :           +- * Project (17)
               :           :        :              +- * BroadcastHashJoin Inner BuildRight (16)
               :           :        :                 :- * Filter (14)
               :           :        :                 :  +- * ColumnarToRow (13)
               :           :        :                 :     +- Scan parquet spark_catalog.default.catalog_sales (12)
               :           :        :                 +- ReusedExchange (15)
               :           :        +- BroadcastExchange (26)
               :           :           +- * Project (25)
               :           :              +- * Filter (24)
               :           :                 +- * ColumnarToRow (23)
               :           :                    +- Scan parquet spark_catalog.default.customer_address (22)
               :           +- * Filter (32)
               :              +- * ColumnarToRow (31)
               :                 +- Scan parquet spark_catalog.default.customer_demographics (30)
               +- * Sort (44)
                  +- Exchange (43)
                     +- * Project (42)
                        +- * BroadcastHashJoin Inner BuildRight (41)
                           :- * Filter (39)
                           :  +- * ColumnarToRow (38)
                           :     +- Scan parquet spark_catalog.default.store_sales (37)
                           +- ReusedExchange (40)


(1) Scan parquet spark_catalog.default.customer
Output [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(3) Filter [codegen id : 1]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Condition : (((isnotnull(c_customer_sk#1) AND isnotnull(c_current_addr_sk#3)) AND isnotnull(c_current_cdemo_sk#2)) AND might_contain(Subquery scalar-subquery#4, [id=#5], xxhash64(c_current_addr_sk#3, 42)))

(4) Exchange
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: hashpartitioning(c_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_bill_customer_sk#6, ws_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#7), dynamicpruningexpression(ws_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ws_bill_customer_sk#6, ws_sold_date_sk#7]

(8) Filter [codegen id : 4]
Input [2]: [ws_bill_customer_sk#6, ws_sold_date_sk#7]
Condition : isnotnull(ws_bill_customer_sk#6)

(9) ReusedExchange [Reuses operator id: 62]
Output [1]: [d_date_sk#9]

(10) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ws_sold_date_sk#7]
Right keys [1]: [d_date_sk#9]
Join type: Inner
Join condition: None

(11) Project [codegen id : 4]
Output [1]: [ws_bill_customer_sk#6 AS customer_sk#10]
Input [3]: [ws_bill_customer_sk#6, ws_sold_date_sk#7, d_date_sk#9]

(12) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_ship_customer_sk#11, cs_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#12), dynamicpruningexpression(cs_sold_date_sk#12 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(cs_ship_customer_sk)]
ReadSchema: struct<cs_ship_customer_sk:int>

(13) ColumnarToRow [codegen id : 6]
Input [2]: [cs_ship_customer_sk#11, cs_sold_date_sk#12]

(14) Filter [codegen id : 6]
Input [2]: [cs_ship_customer_sk#11, cs_sold_date_sk#12]
Condition : isnotnull(cs_ship_customer_sk#11)

(15) ReusedExchange [Reuses operator id: 62]
Output [1]: [d_date_sk#13]

(16) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#12]
Right keys [1]: [d_date_sk#13]
Join type: Inner
Join condition: None

(17) Project [codegen id : 6]
Output [1]: [cs_ship_customer_sk#11 AS customer_sk#14]
Input [3]: [cs_ship_customer_sk#11, cs_sold_date_sk#12, d_date_sk#13]

(18) Union

(19) Exchange
Input [1]: [customer_sk#10]
Arguments: hashpartitioning(customer_sk#10, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(20) Sort [codegen id : 7]
Input [1]: [customer_sk#10]
Arguments: [customer_sk#10 ASC NULLS FIRST], false, 0

(21) SortMergeJoin [codegen id : 9]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [customer_sk#10]
Join type: LeftSemi
Join condition: None

(22) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#15, ca_county#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_county, [Dona Ana County,Douglas County,Gaines County,Richland County,Walker County]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(23) ColumnarToRow [codegen id : 8]
Input [2]: [ca_address_sk#15, ca_county#16]

(24) Filter [codegen id : 8]
Input [2]: [ca_address_sk#15, ca_county#16]
Condition : (ca_county#16 IN (Walker County,Richland County,Gaines County,Douglas County,Dona Ana County) AND isnotnull(ca_address_sk#15))

(25) Project [codegen id : 8]
Output [1]: [ca_address_sk#15]
Input [2]: [ca_address_sk#15, ca_county#16]

(26) BroadcastExchange
Input [1]: [ca_address_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(27) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_current_addr_sk#3]
Right keys [1]: [ca_address_sk#15]
Join type: Inner
Join condition: None

(28) Project [codegen id : 9]
Output [2]: [c_customer_sk#1, c_current_cdemo_sk#2]
Input [4]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3, ca_address_sk#15]

(29) BroadcastExchange
Input [2]: [c_customer_sk#1, c_current_cdemo_sk#2]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=4]

(30) Scan parquet spark_catalog.default.customer_demographics
Output [9]: [cd_demo_sk#17, cd_gender#18, cd_marital_status#19, cd_education_status#20, cd_purchase_estimate#21, cd_credit_rating#22, cd_dep_count#23, cd_dep_employed_count#24, cd_dep_college_count#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_purchase_estimate:int,cd_credit_rating:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(31) ColumnarToRow
Input [9]: [cd_demo_sk#17, cd_gender#18, cd_marital_status#19, cd_education_status#20, cd_purchase_estimate#21, cd_credit_rating#22, cd_dep_count#23, cd_dep_employed_count#24, cd_dep_college_count#25]

(32) Filter
Input [9]: [cd_demo_sk#17, cd_gender#18, cd_marital_status#19, cd_education_status#20, cd_purchase_estimate#21, cd_credit_rating#22, cd_dep_count#23, cd_dep_employed_count#24, cd_dep_college_count#25]
Condition : isnotnull(cd_demo_sk#17)

(33) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [c_current_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#17]
Join type: Inner
Join condition: None

(34) Project [codegen id : 10]
Output [9]: [c_customer_sk#1, cd_gender#18, cd_marital_status#19, cd_education_status#20, cd_purchase_estimate#21, cd_credit_rating#22, cd_dep_count#23, cd_dep_employed_count#24, cd_dep_college_count#25]
Input [11]: [c_customer_sk#1, c_current_cdemo_sk#2, cd_demo_sk#17, cd_gender#18, cd_marital_status#19, cd_education_status#20, cd_purchase_estimate#21, cd_credit_rating#22, cd_dep_count#23, cd_dep_employed_count#24, cd_dep_college_count#25]

(35) Exchange
Input [9]: [c_customer_sk#1, cd_gender#18, cd_marital_status#19, cd_education_status#20, cd_purchase_estimate#21, cd_credit_rating#22, cd_dep_count#23, cd_dep_employed_count#24, cd_dep_college_count#25]
Arguments: hashpartitioning(c_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(36) Sort [codegen id : 11]
Input [9]: [c_customer_sk#1, cd_gender#18, cd_marital_status#19, cd_education_status#20, cd_purchase_estimate#21, cd_credit_rating#22, cd_dep_count#23, cd_dep_employed_count#24, cd_dep_college_count#25]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(37) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_customer_sk#26, ss_sold_date_sk#27]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#27), dynamicpruningexpression(ss_sold_date_sk#27 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int>

(38) ColumnarToRow [codegen id : 13]
Input [2]: [ss_customer_sk#26, ss_sold_date_sk#27]

(39) Filter [codegen id : 13]
Input [2]: [ss_customer_sk#26, ss_sold_date_sk#27]
Condition : isnotnull(ss_customer_sk#26)

(40) ReusedExchange [Reuses operator id: 62]
Output [1]: [d_date_sk#28]

(41) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_sold_date_sk#27]
Right keys [1]: [d_date_sk#28]
Join type: Inner
Join condition: None

(42) Project [codegen id : 13]
Output [1]: [ss_customer_sk#26 AS customer_sk#29]
Input [3]: [ss_customer_sk#26, ss_sold_date_sk#27, d_date_sk#28]

(43) Exchange
Input [1]: [customer_sk#29]
Arguments: hashpartitioning(customer_sk#29, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(44) Sort [codegen id : 14]
Input [1]: [customer_sk#29]
Arguments: [customer_sk#29 ASC NULLS FIRST], false, 0

(45) SortMergeJoin [codegen id : 15]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [customer_sk#29]
Join type: LeftSemi
Join condition: None

(46) Project [codegen id : 15]
Output [8]: [cd_gender#18, cd_marital_status#19, cd_education_status#20, cd_purchase_estimate#21, cd_credit_rating#22, cd_dep_count#23, cd_dep_employed_count#24, cd_dep_college_count#25]
Input [9]: [c_customer_sk#1, cd_gender#18, cd_marital_status#19, cd_education_status#20, cd_purchase_estimate#21, cd_credit_rating#22, cd_dep_count#23, cd_dep_employed_count#24, cd_dep_college_count#25]

(47) HashAggregate [codegen id : 15]
Input [8]: [cd_gender#18, cd_marital_status#19, cd_education_status#20, cd_purchase_estimate#21, cd_credit_rating#22, cd_dep_count#23, cd_dep_employed_count#24, cd_dep_college_count#25]
Keys [8]: [cd_gender#18, cd_marital_status#19, cd_education_status#20, cd_purchase_estimate#21, cd_credit_rating#22, cd_dep_count#23, cd_dep_employed_count#24, cd_dep_college_count#25]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#30]
Results [9]: [cd_gender#18, cd_marital_status#19, cd_education_status#20, cd_purchase_estimate#21, cd_credit_rating#22, cd_dep_count#23, cd_dep_employed_count#24, cd_dep_college_count#25, count#31]

(48) Exchange
Input [9]: [cd_gender#18, cd_marital_status#19, cd_education_status#20, cd_purchase_estimate#21, cd_credit_rating#22, cd_dep_count#23, cd_dep_employed_count#24, cd_dep_college_count#25, count#31]
Arguments: hashpartitioning(cd_gender#18, cd_marital_status#19, cd_education_status#20, cd_purchase_estimate#21, cd_credit_rating#22, cd_dep_count#23, cd_dep_employed_count#24, cd_dep_college_count#25, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(49) HashAggregate [codegen id : 16]
Input [9]: [cd_gender#18, cd_marital_status#19, cd_education_status#20, cd_purchase_estimate#21, cd_credit_rating#22, cd_dep_count#23, cd_dep_employed_count#24, cd_dep_college_count#25, count#31]
Keys [8]: [cd_gender#18, cd_marital_status#19, cd_education_status#20, cd_purchase_estimate#21, cd_credit_rating#22, cd_dep_count#23, cd_dep_employed_count#24, cd_dep_college_count#25]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#32]
Results [14]: [cd_gender#18, cd_marital_status#19, cd_education_status#20, count(1)#32 AS cnt1#33, cd_purchase_estimate#21, count(1)#32 AS cnt2#34, cd_credit_rating#22, count(1)#32 AS cnt3#35, cd_dep_count#23, count(1)#32 AS cnt4#36, cd_dep_employed_count#24, count(1)#32 AS cnt5#37, cd_dep_college_count#25, count(1)#32 AS cnt6#38]

(50) TakeOrderedAndProject
Input [14]: [cd_gender#18, cd_marital_status#19, cd_education_status#20, cnt1#33, cd_purchase_estimate#21, cnt2#34, cd_credit_rating#22, cnt3#35, cd_dep_count#23, cnt4#36, cd_dep_employed_count#24, cnt5#37, cd_dep_college_count#25, cnt6#38]
Arguments: 100, [cd_gender#18 ASC NULLS FIRST, cd_marital_status#19 ASC NULLS FIRST, cd_education_status#20 ASC NULLS FIRST, cd_purchase_estimate#21 ASC NULLS FIRST, cd_credit_rating#22 ASC NULLS FIRST, cd_dep_count#23 ASC NULLS FIRST, cd_dep_employed_count#24 ASC NULLS FIRST, cd_dep_college_count#25 ASC NULLS FIRST], [cd_gender#18, cd_marital_status#19, cd_education_status#20, cnt1#33, cd_purchase_estimate#21, cnt2#34, cd_credit_rating#22, cnt3#35, cd_dep_count#23, cnt4#36, cd_dep_employed_count#24, cnt5#37, cd_dep_college_count#25, cnt6#38]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#4, [id=#5]
ObjectHashAggregate (57)
+- Exchange (56)
   +- ObjectHashAggregate (55)
      +- * Project (54)
         +- * Filter (53)
            +- * ColumnarToRow (52)
               +- Scan parquet spark_catalog.default.customer_address (51)


(51) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#15, ca_county#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_county, [Dona Ana County,Douglas County,Gaines County,Richland County,Walker County]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(52) ColumnarToRow [codegen id : 1]
Input [2]: [ca_address_sk#15, ca_county#16]

(53) Filter [codegen id : 1]
Input [2]: [ca_address_sk#15, ca_county#16]
Condition : (ca_county#16 IN (Walker County,Richland County,Gaines County,Douglas County,Dona Ana County) AND isnotnull(ca_address_sk#15))

(54) Project [codegen id : 1]
Output [1]: [ca_address_sk#15]
Input [2]: [ca_address_sk#15, ca_county#16]

(55) ObjectHashAggregate
Input [1]: [ca_address_sk#15]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(ca_address_sk#15, 42), 2555, 20440, 0, 0)]
Aggregate Attributes [1]: [buf#39]
Results [1]: [buf#40]

(56) Exchange
Input [1]: [buf#40]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=8]

(57) ObjectHashAggregate
Input [1]: [buf#40]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(ca_address_sk#15, 42), 2555, 20440, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(ca_address_sk#15, 42), 2555, 20440, 0, 0)#41]
Results [1]: [bloom_filter_agg(xxhash64(ca_address_sk#15, 42), 2555, 20440, 0, 0)#41 AS bloomFilter#42]

Subquery:2 Hosting operator id = 6 Hosting Expression = ws_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (62)
+- * Project (61)
   +- * Filter (60)
      +- * ColumnarToRow (59)
         +- Scan parquet spark_catalog.default.date_dim (58)


(58) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#9, d_year#43, d_moy#44]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2002), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,7), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(59) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#9, d_year#43, d_moy#44]

(60) Filter [codegen id : 1]
Input [3]: [d_date_sk#9, d_year#43, d_moy#44]
Condition : (((((isnotnull(d_year#43) AND isnotnull(d_moy#44)) AND (d_year#43 = 2002)) AND (d_moy#44 >= 4)) AND (d_moy#44 <= 7)) AND isnotnull(d_date_sk#9))

(61) Project [codegen id : 1]
Output [1]: [d_date_sk#9]
Input [3]: [d_date_sk#9, d_year#43, d_moy#44]

(62) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

Subquery:3 Hosting operator id = 12 Hosting Expression = cs_sold_date_sk#12 IN dynamicpruning#8

Subquery:4 Hosting operator id = 37 Hosting Expression = ss_sold_date_sk#27 IN dynamicpruning#8


