== Physical Plan ==
TakeOrderedAndProject (44)
+- * HashAggregate (43)
   +- Exchange (42)
      +- * HashAggregate (41)
         +- * Project (40)
            +- * BroadcastHashJoin Inner BuildRight (39)
               :- * Project (33)
               :  +- * SortMergeJoin Inner (32)
               :     :- * Sort (26)
               :     :  +- Exchange (25)
               :     :     +- * Project (24)
               :     :        +- * BroadcastHashJoin Inner BuildRight (23)
               :     :           :- * Project (18)
               :     :           :  +- * SortMergeJoin Inner (17)
               :     :           :     :- * Sort (12)
               :     :           :     :  +- Exchange (11)
               :     :           :     :     +- * Project (10)
               :     :           :     :        +- * BroadcastHashJoin Inner BuildLeft (9)
               :     :           :     :           :- BroadcastExchange (5)
               :     :           :     :           :  +- * Project (4)
               :     :           :     :           :     +- * Filter (3)
               :     :           :     :           :        +- * ColumnarToRow (2)
               :     :           :     :           :           +- Scan parquet default.date_dim (1)
               :     :           :     :           +- * Filter (8)
               :     :           :     :              +- * ColumnarToRow (7)
               :     :           :     :                 +- Scan parquet default.store_sales (6)
               :     :           :     +- * Sort (16)
               :     :           :        +- Exchange (15)
               :     :           :           +- * ColumnarToRow (14)
               :     :           :              +- Scan parquet default.customer (13)
               :     :           +- BroadcastExchange (22)
               :     :              +- * Filter (21)
               :     :                 +- * ColumnarToRow (20)
               :     :                    +- Scan parquet default.store (19)
               :     +- * Sort (31)
               :        +- Exchange (30)
               :           +- * Filter (29)
               :              +- * ColumnarToRow (28)
               :                 +- Scan parquet default.customer_address (27)
               +- BroadcastExchange (38)
                  +- * Project (37)
                     +- * Filter (36)
                        +- * ColumnarToRow (35)
                           +- Scan parquet default.item (34)


(1) Scan parquet default.date_dim
Output [3]: [d_date_sk#1, d_year#2, d_moy#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [EqualTo(d_moy,11), EqualTo(d_year,1999), GreaterThanOrEqual(d_date_sk,2451484), LessThanOrEqual(d_date_sk,2451513)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]

(3) Filter [codegen id : 1]
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]
Condition : ((((d_moy#3 = 11) AND (d_year#2 = 1999)) AND (d_date_sk#1 >= 2451484)) AND (d_date_sk#1 <= 2451513))

(4) Project [codegen id : 1]
Output [1]: [d_date_sk#1]
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]

(5) BroadcastExchange
Input [1]: [d_date_sk#1]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#4]

(6) Scan parquet default.store_sales
Output [5]: [ss_item_sk#5, ss_customer_sk#6, ss_store_sk#7, ss_ext_sales_price#8, ss_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#9), (ss_sold_date_sk#9 >= 2451484), (ss_sold_date_sk#9 <= 2451513), dynamicpruningexpression(ss_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2)>

(7) ColumnarToRow
Input [5]: [ss_item_sk#5, ss_customer_sk#6, ss_store_sk#7, ss_ext_sales_price#8, ss_sold_date_sk#9]

(8) Filter
Input [5]: [ss_item_sk#5, ss_customer_sk#6, ss_store_sk#7, ss_ext_sales_price#8, ss_sold_date_sk#9]
Condition : (isnotnull(ss_customer_sk#6) AND isnotnull(ss_store_sk#7))

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [d_date_sk#1]
Right keys [1]: [ss_sold_date_sk#9]
Join condition: None

(10) Project [codegen id : 2]
Output [4]: [ss_item_sk#5, ss_customer_sk#6, ss_store_sk#7, ss_ext_sales_price#8]
Input [6]: [d_date_sk#1, ss_item_sk#5, ss_customer_sk#6, ss_store_sk#7, ss_ext_sales_price#8, ss_sold_date_sk#9]

(11) Exchange
Input [4]: [ss_item_sk#5, ss_customer_sk#6, ss_store_sk#7, ss_ext_sales_price#8]
Arguments: hashpartitioning(ss_customer_sk#6, 5), ENSURE_REQUIREMENTS, [id=#11]

(12) Sort [codegen id : 3]
Input [4]: [ss_item_sk#5, ss_customer_sk#6, ss_store_sk#7, ss_ext_sales_price#8]
Arguments: [ss_customer_sk#6 ASC NULLS FIRST], false, 0

(13) Scan parquet default.customer
Output [2]: [c_customer_sk#12, c_current_addr_sk#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(14) ColumnarToRow [codegen id : 4]
Input [2]: [c_customer_sk#12, c_current_addr_sk#13]

(15) Exchange
Input [2]: [c_customer_sk#12, c_current_addr_sk#13]
Arguments: hashpartitioning(c_customer_sk#12, 5), ENSURE_REQUIREMENTS, [id=#14]

(16) Sort [codegen id : 5]
Input [2]: [c_customer_sk#12, c_current_addr_sk#13]
Arguments: [c_customer_sk#12 ASC NULLS FIRST], false, 0

(17) SortMergeJoin [codegen id : 7]
Left keys [1]: [ss_customer_sk#6]
Right keys [1]: [c_customer_sk#12]
Join condition: None

(18) Project [codegen id : 7]
Output [4]: [ss_item_sk#5, ss_store_sk#7, ss_ext_sales_price#8, c_current_addr_sk#13]
Input [6]: [ss_item_sk#5, ss_customer_sk#6, ss_store_sk#7, ss_ext_sales_price#8, c_customer_sk#12, c_current_addr_sk#13]

(19) Scan parquet default.store
Output [2]: [s_store_sk#15, s_zip#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_zip:string>

(20) ColumnarToRow [codegen id : 6]
Input [2]: [s_store_sk#15, s_zip#16]

(21) Filter [codegen id : 6]
Input [2]: [s_store_sk#15, s_zip#16]
Condition : isnotnull(s_zip#16)

(22) BroadcastExchange
Input [2]: [s_store_sk#15, s_zip#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#17]

(23) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_store_sk#7]
Right keys [1]: [s_store_sk#15]
Join condition: None

(24) Project [codegen id : 7]
Output [4]: [ss_item_sk#5, ss_ext_sales_price#8, c_current_addr_sk#13, s_zip#16]
Input [6]: [ss_item_sk#5, ss_store_sk#7, ss_ext_sales_price#8, c_current_addr_sk#13, s_store_sk#15, s_zip#16]

(25) Exchange
Input [4]: [ss_item_sk#5, ss_ext_sales_price#8, c_current_addr_sk#13, s_zip#16]
Arguments: hashpartitioning(c_current_addr_sk#13, 5), ENSURE_REQUIREMENTS, [id=#18]

(26) Sort [codegen id : 8]
Input [4]: [ss_item_sk#5, ss_ext_sales_price#8, c_current_addr_sk#13, s_zip#16]
Arguments: [c_current_addr_sk#13 ASC NULLS FIRST], false, 0

(27) Scan parquet default.customer_address
Output [2]: [ca_address_sk#19, ca_zip#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_zip)]
ReadSchema: struct<ca_address_sk:int,ca_zip:string>

(28) ColumnarToRow [codegen id : 9]
Input [2]: [ca_address_sk#19, ca_zip#20]

(29) Filter [codegen id : 9]
Input [2]: [ca_address_sk#19, ca_zip#20]
Condition : isnotnull(ca_zip#20)

(30) Exchange
Input [2]: [ca_address_sk#19, ca_zip#20]
Arguments: hashpartitioning(ca_address_sk#19, 5), ENSURE_REQUIREMENTS, [id=#21]

(31) Sort [codegen id : 10]
Input [2]: [ca_address_sk#19, ca_zip#20]
Arguments: [ca_address_sk#19 ASC NULLS FIRST], false, 0

(32) SortMergeJoin [codegen id : 12]
Left keys [1]: [c_current_addr_sk#13]
Right keys [1]: [ca_address_sk#19]
Join condition: NOT (substr(ca_zip#20, 1, 5) = substr(s_zip#16, 1, 5))

(33) Project [codegen id : 12]
Output [2]: [ss_item_sk#5, ss_ext_sales_price#8]
Input [6]: [ss_item_sk#5, ss_ext_sales_price#8, c_current_addr_sk#13, s_zip#16, ca_address_sk#19, ca_zip#20]

(34) Scan parquet default.item
Output [6]: [i_item_sk#22, i_brand_id#23, i_brand#24, i_manufact_id#25, i_manufact#26, i_manager_id#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,7)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manufact_id:int,i_manufact:string,i_manager_id:int>

(35) ColumnarToRow [codegen id : 11]
Input [6]: [i_item_sk#22, i_brand_id#23, i_brand#24, i_manufact_id#25, i_manufact#26, i_manager_id#27]

(36) Filter [codegen id : 11]
Input [6]: [i_item_sk#22, i_brand_id#23, i_brand#24, i_manufact_id#25, i_manufact#26, i_manager_id#27]
Condition : (isnotnull(i_manager_id#27) AND (i_manager_id#27 = 7))

(37) Project [codegen id : 11]
Output [5]: [i_item_sk#22, i_brand_id#23, i_brand#24, i_manufact_id#25, i_manufact#26]
Input [6]: [i_item_sk#22, i_brand_id#23, i_brand#24, i_manufact_id#25, i_manufact#26, i_manager_id#27]

(38) BroadcastExchange
Input [5]: [i_item_sk#22, i_brand_id#23, i_brand#24, i_manufact_id#25, i_manufact#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28]

(39) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ss_item_sk#5]
Right keys [1]: [i_item_sk#22]
Join condition: None

(40) Project [codegen id : 12]
Output [5]: [ss_ext_sales_price#8, i_brand_id#23, i_brand#24, i_manufact_id#25, i_manufact#26]
Input [7]: [ss_item_sk#5, ss_ext_sales_price#8, i_item_sk#22, i_brand_id#23, i_brand#24, i_manufact_id#25, i_manufact#26]

(41) HashAggregate [codegen id : 12]
Input [5]: [ss_ext_sales_price#8, i_brand_id#23, i_brand#24, i_manufact_id#25, i_manufact#26]
Keys [4]: [i_brand#24, i_brand_id#23, i_manufact_id#25, i_manufact#26]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#8))]
Aggregate Attributes [1]: [sum#29]
Results [5]: [i_brand#24, i_brand_id#23, i_manufact_id#25, i_manufact#26, sum#30]

(42) Exchange
Input [5]: [i_brand#24, i_brand_id#23, i_manufact_id#25, i_manufact#26, sum#30]
Arguments: hashpartitioning(i_brand#24, i_brand_id#23, i_manufact_id#25, i_manufact#26, 5), ENSURE_REQUIREMENTS, [id=#31]

(43) HashAggregate [codegen id : 13]
Input [5]: [i_brand#24, i_brand_id#23, i_manufact_id#25, i_manufact#26, sum#30]
Keys [4]: [i_brand#24, i_brand_id#23, i_manufact_id#25, i_manufact#26]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#8))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#8))#32]
Results [5]: [i_brand_id#23 AS brand_id#33, i_brand#24 AS brand#34, i_manufact_id#25, i_manufact#26, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#8))#32,17,2) AS ext_price#35]

(44) TakeOrderedAndProject
Input [5]: [brand_id#33, brand#34, i_manufact_id#25, i_manufact#26, ext_price#35]
Arguments: 100, [ext_price#35 DESC NULLS LAST, brand#34 ASC NULLS FIRST, brand_id#33 ASC NULLS FIRST, i_manufact_id#25 ASC NULLS FIRST, i_manufact#26 ASC NULLS FIRST], [brand_id#33, brand#34, i_manufact_id#25, i_manufact#26, ext_price#35]

===== Subqueries =====

Subquery:1 Hosting operator id = 6 Hosting Expression = ss_sold_date_sk#9 IN dynamicpruning#10
ReusedExchange (45)


(45) ReusedExchange [Reuses operator id: 5]
Output [1]: [d_date_sk#1]


