== Physical Plan ==
TakeOrderedAndProject (42)
+- * HashAggregate (41)
   +- Exchange (40)
      +- * HashAggregate (39)
         +- * Project (38)
            +- * BroadcastHashJoin Inner BuildRight (37)
               :- * Project (32)
               :  +- * SortMergeJoin Inner (31)
               :     :- * Sort (25)
               :     :  +- Exchange (24)
               :     :     +- * Project (23)
               :     :        +- * BroadcastHashJoin Inner BuildLeft (22)
               :     :           :- BroadcastExchange (18)
               :     :           :  +- * Project (17)
               :     :           :     +- * BroadcastHashJoin Inner BuildLeft (16)
               :     :           :        :- BroadcastExchange (11)
               :     :           :        :  +- * Project (10)
               :     :           :        :     +- * BroadcastHashJoin Inner BuildRight (9)
               :     :           :        :        :- * Project (4)
               :     :           :        :        :  +- * Filter (3)
               :     :           :        :        :     +- * ColumnarToRow (2)
               :     :           :        :        :        +- Scan parquet default.date_dim (1)
               :     :           :        :        +- BroadcastExchange (8)
               :     :           :        :           +- * Filter (7)
               :     :           :        :              +- * ColumnarToRow (6)
               :     :           :        :                 +- Scan parquet default.store_sales (5)
               :     :           :        +- * Project (15)
               :     :           :           +- * Filter (14)
               :     :           :              +- * ColumnarToRow (13)
               :     :           :                 +- Scan parquet default.item (12)
               :     :           +- * Filter (21)
               :     :              +- * ColumnarToRow (20)
               :     :                 +- Scan parquet default.customer (19)
               :     +- * Sort (30)
               :        +- Exchange (29)
               :           +- * Filter (28)
               :              +- * ColumnarToRow (27)
               :                 +- Scan parquet default.customer_address (26)
               +- BroadcastExchange (36)
                  +- * Filter (35)
                     +- * ColumnarToRow (34)
                        +- Scan parquet default.store (33)


(1) Scan parquet default.date_dim
Output [3]: [d_date_sk#1, d_year#2, d_moy#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1999), GreaterThanOrEqual(d_date_sk,2451484), LessThanOrEqual(d_date_sk,2451513), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(2) ColumnarToRow [codegen id : 2]
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]

(3) Filter [codegen id : 2]
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]
Condition : ((((((isnotnull(d_moy#3) AND isnotnull(d_year#2)) AND (d_moy#3 = 11)) AND (d_year#2 = 1999)) AND (d_date_sk#1 >= 2451484)) AND (d_date_sk#1 <= 2451513)) AND isnotnull(d_date_sk#1))

(4) Project [codegen id : 2]
Output [1]: [d_date_sk#1]
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]

(5) Scan parquet default.store_sales
Output [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), (ss_sold_date_sk#8 >= 2451484), (ss_sold_date_sk#8 <= 2451513), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2)>

(6) ColumnarToRow [codegen id : 1]
Input [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, ss_sold_date_sk#8]

(7) Filter [codegen id : 1]
Input [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, ss_sold_date_sk#8]
Condition : ((isnotnull(ss_item_sk#4) AND isnotnull(ss_customer_sk#5)) AND isnotnull(ss_store_sk#6))

(8) BroadcastExchange
Input [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, ss_sold_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[4, int, true] as bigint)),false), [id=#9]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [d_date_sk#1]
Right keys [1]: [ss_sold_date_sk#8]
Join condition: None

(10) Project [codegen id : 2]
Output [4]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7]
Input [6]: [d_date_sk#1, ss_item_sk#4, ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, ss_sold_date_sk#8]

(11) BroadcastExchange
Input [4]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#10]

(12) Scan parquet default.item
Output [6]: [i_item_sk#11, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15, i_manager_id#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,7), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manufact_id:int,i_manufact:string,i_manager_id:int>

(13) ColumnarToRow
Input [6]: [i_item_sk#11, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15, i_manager_id#16]

(14) Filter
Input [6]: [i_item_sk#11, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15, i_manager_id#16]
Condition : ((isnotnull(i_manager_id#16) AND (i_manager_id#16 = 7)) AND isnotnull(i_item_sk#11))

(15) Project
Output [5]: [i_item_sk#11, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15]
Input [6]: [i_item_sk#11, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15, i_manager_id#16]

(16) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#4]
Right keys [1]: [i_item_sk#11]
Join condition: None

(17) Project [codegen id : 3]
Output [7]: [ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15]
Input [9]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, i_item_sk#11, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15]

(18) BroadcastExchange
Input [7]: [ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#17]

(19) Scan parquet default.customer
Output [2]: [c_customer_sk#18, c_current_addr_sk#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(20) ColumnarToRow
Input [2]: [c_customer_sk#18, c_current_addr_sk#19]

(21) Filter
Input [2]: [c_customer_sk#18, c_current_addr_sk#19]
Condition : (isnotnull(c_customer_sk#18) AND isnotnull(c_current_addr_sk#19))

(22) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_customer_sk#5]
Right keys [1]: [c_customer_sk#18]
Join condition: None

(23) Project [codegen id : 4]
Output [7]: [ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15, c_current_addr_sk#19]
Input [9]: [ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15, c_customer_sk#18, c_current_addr_sk#19]

(24) Exchange
Input [7]: [ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15, c_current_addr_sk#19]
Arguments: hashpartitioning(c_current_addr_sk#19, 5), ENSURE_REQUIREMENTS, [id=#20]

(25) Sort [codegen id : 5]
Input [7]: [ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15, c_current_addr_sk#19]
Arguments: [c_current_addr_sk#19 ASC NULLS FIRST], false, 0

(26) Scan parquet default.customer_address
Output [2]: [ca_address_sk#21, ca_zip#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_zip)]
ReadSchema: struct<ca_address_sk:int,ca_zip:string>

(27) ColumnarToRow [codegen id : 6]
Input [2]: [ca_address_sk#21, ca_zip#22]

(28) Filter [codegen id : 6]
Input [2]: [ca_address_sk#21, ca_zip#22]
Condition : (isnotnull(ca_address_sk#21) AND isnotnull(ca_zip#22))

(29) Exchange
Input [2]: [ca_address_sk#21, ca_zip#22]
Arguments: hashpartitioning(ca_address_sk#21, 5), ENSURE_REQUIREMENTS, [id=#23]

(30) Sort [codegen id : 7]
Input [2]: [ca_address_sk#21, ca_zip#22]
Arguments: [ca_address_sk#21 ASC NULLS FIRST], false, 0

(31) SortMergeJoin [codegen id : 9]
Left keys [1]: [c_current_addr_sk#19]
Right keys [1]: [ca_address_sk#21]
Join condition: None

(32) Project [codegen id : 9]
Output [7]: [ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15, ca_zip#22]
Input [9]: [ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15, c_current_addr_sk#19, ca_address_sk#21, ca_zip#22]

(33) Scan parquet default.store
Output [2]: [s_store_sk#24, s_zip#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_zip), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_zip:string>

(34) ColumnarToRow [codegen id : 8]
Input [2]: [s_store_sk#24, s_zip#25]

(35) Filter [codegen id : 8]
Input [2]: [s_store_sk#24, s_zip#25]
Condition : (isnotnull(s_zip#25) AND isnotnull(s_store_sk#24))

(36) BroadcastExchange
Input [2]: [s_store_sk#24, s_zip#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#26]

(37) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#6]
Right keys [1]: [s_store_sk#24]
Join condition: NOT (substr(ca_zip#22, 1, 5) = substr(s_zip#25, 1, 5))

(38) Project [codegen id : 9]
Output [5]: [ss_ext_sales_price#7, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15]
Input [9]: [ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15, ca_zip#22, s_store_sk#24, s_zip#25]

(39) HashAggregate [codegen id : 9]
Input [5]: [ss_ext_sales_price#7, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15]
Keys [4]: [i_brand#13, i_brand_id#12, i_manufact_id#14, i_manufact#15]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#7))]
Aggregate Attributes [1]: [sum#27]
Results [5]: [i_brand#13, i_brand_id#12, i_manufact_id#14, i_manufact#15, sum#28]

(40) Exchange
Input [5]: [i_brand#13, i_brand_id#12, i_manufact_id#14, i_manufact#15, sum#28]
Arguments: hashpartitioning(i_brand#13, i_brand_id#12, i_manufact_id#14, i_manufact#15, 5), ENSURE_REQUIREMENTS, [id=#29]

(41) HashAggregate [codegen id : 10]
Input [5]: [i_brand#13, i_brand_id#12, i_manufact_id#14, i_manufact#15, sum#28]
Keys [4]: [i_brand#13, i_brand_id#12, i_manufact_id#14, i_manufact#15]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#7))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#7))#30]
Results [5]: [i_brand_id#12 AS brand_id#31, i_brand#13 AS brand#32, i_manufact_id#14, i_manufact#15, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#7))#30,17,2) AS ext_price#33]

(42) TakeOrderedAndProject
Input [5]: [brand_id#31, brand#32, i_manufact_id#14, i_manufact#15, ext_price#33]
Arguments: 100, [ext_price#33 DESC NULLS LAST, brand#32 ASC NULLS FIRST, brand_id#31 ASC NULLS FIRST, i_manufact_id#14 ASC NULLS FIRST, i_manufact#15 ASC NULLS FIRST], [brand_id#31, brand#32, i_manufact_id#14, i_manufact#15, ext_price#33]

