== Physical Plan ==
TakeOrderedAndProject (49)
+- * Project (48)
   +- * SortMergeJoin Inner (47)
      :- * Sort (41)
      :  +- Exchange (40)
      :     +- * Project (39)
      :        +- * BroadcastHashJoin Inner BuildLeft (38)
      :           :- BroadcastExchange (34)
      :           :  +- * HashAggregate (33)
      :           :     +- Exchange (32)
      :           :        +- * HashAggregate (31)
      :           :           +- * Project (30)
      :           :              +- * BroadcastHashJoin Inner BuildLeft (29)
      :           :                 :- BroadcastExchange (24)
      :           :                 :  +- * Project (23)
      :           :                 :     +- * BroadcastHashJoin Inner BuildLeft (22)
      :           :                 :        :- BroadcastExchange (17)
      :           :                 :        :  +- * Project (16)
      :           :                 :        :     +- * BroadcastHashJoin Inner BuildLeft (15)
      :           :                 :        :        :- BroadcastExchange (10)
      :           :                 :        :        :  +- * Project (9)
      :           :                 :        :        :     +- * BroadcastHashJoin Inner BuildLeft (8)
      :           :                 :        :        :        :- BroadcastExchange (4)
      :           :                 :        :        :        :  +- * Filter (3)
      :           :                 :        :        :        :     +- * ColumnarToRow (2)
      :           :                 :        :        :        :        +- Scan parquet default.store_sales (1)
      :           :                 :        :        :        +- * Filter (7)
      :           :                 :        :        :           +- * ColumnarToRow (6)
      :           :                 :        :        :              +- Scan parquet default.customer_address (5)
      :           :                 :        :        +- * Project (14)
      :           :                 :        :           +- * Filter (13)
      :           :                 :        :              +- * ColumnarToRow (12)
      :           :                 :        :                 +- Scan parquet default.household_demographics (11)
      :           :                 :        +- * Project (21)
      :           :                 :           +- * Filter (20)
      :           :                 :              +- * ColumnarToRow (19)
      :           :                 :                 +- Scan parquet default.store (18)
      :           :                 +- * Project (28)
      :           :                    +- * Filter (27)
      :           :                       +- * ColumnarToRow (26)
      :           :                          +- Scan parquet default.date_dim (25)
      :           +- * Filter (37)
      :              +- * ColumnarToRow (36)
      :                 +- Scan parquet default.customer (35)
      +- * Sort (46)
         +- Exchange (45)
            +- * Filter (44)
               +- * ColumnarToRow (43)
                  +- Scan parquet default.customer_address (42)


(1) Scan parquet default.store_sales
Output [9]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ss_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [ss_sold_date_sk#9 INSET 2451180, 2451181, 2451211, 2451212, 2451239, 2451240, 2451270, 2451271, 2451300, 2451301, 2451331, 2451332, 2451361, 2451362, 2451392, 2451393, 2451423, 2451424, 2451453, 2451454, 2451484, 2451485, 2451514, 2451515, 2451545, 2451546, 2451576, 2451577, 2451605, 2451606, 2451636, 2451637, 2451666, 2451667, 2451697, 2451698, 2451727, 2451728, 2451758, 2451759, 2451789, 2451790, 2451819, 2451820, 2451850, 2451851, 2451880, 2451881, 2451911, 2451912, 2451942, 2451943, 2451970, 2451971, 2452001, 2452002, 2452031, 2452032, 2452062, 2452063, 2452092, 2452093, 2452123, 2452124, 2452154, 2452155, 2452184, 2452185, 2452215, 2452216, 2452245, 2452246, isnotnull(ss_sold_date_sk#9), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_ext_sales_price:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [9]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ss_sold_date_sk#9]

(3) Filter [codegen id : 1]
Input [9]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ss_sold_date_sk#9]
Condition : (((isnotnull(ss_store_sk#4) AND isnotnull(ss_hdemo_sk#2)) AND isnotnull(ss_addr_sk#3)) AND isnotnull(ss_customer_sk#1))

(4) BroadcastExchange
Input [9]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ss_sold_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, false] as bigint)),false), [id=#10]

(5) Scan parquet default.customer_address
Output [2]: [ca_address_sk#11, ca_city#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_city)]
ReadSchema: struct<ca_address_sk:int,ca_city:string>

(6) ColumnarToRow
Input [2]: [ca_address_sk#11, ca_city#12]

(7) Filter
Input [2]: [ca_address_sk#11, ca_city#12]
Condition : (isnotnull(ca_address_sk#11) AND isnotnull(ca_city#12))

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_addr_sk#3]
Right keys [1]: [ca_address_sk#11]
Join condition: None

(9) Project [codegen id : 2]
Output [10]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ss_sold_date_sk#9, ca_city#12]
Input [11]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ss_sold_date_sk#9, ca_address_sk#11, ca_city#12]

(10) BroadcastExchange
Input [10]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ss_sold_date_sk#9, ca_city#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#13]

(11) Scan parquet default.household_demographics
Output [3]: [hd_demo_sk#14, hd_dep_count#15, hd_vehicle_count#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [Or(EqualTo(hd_dep_count,5),EqualTo(hd_vehicle_count,3)), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>

(12) ColumnarToRow
Input [3]: [hd_demo_sk#14, hd_dep_count#15, hd_vehicle_count#16]

(13) Filter
Input [3]: [hd_demo_sk#14, hd_dep_count#15, hd_vehicle_count#16]
Condition : (((hd_dep_count#15 = 5) OR (hd_vehicle_count#16 = 3)) AND isnotnull(hd_demo_sk#14))

(14) Project
Output [1]: [hd_demo_sk#14]
Input [3]: [hd_demo_sk#14, hd_dep_count#15, hd_vehicle_count#16]

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_hdemo_sk#2]
Right keys [1]: [hd_demo_sk#14]
Join condition: None

(16) Project [codegen id : 3]
Output [9]: [ss_customer_sk#1, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ss_sold_date_sk#9, ca_city#12]
Input [11]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ss_sold_date_sk#9, ca_city#12, hd_demo_sk#14]

(17) BroadcastExchange
Input [9]: [ss_customer_sk#1, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ss_sold_date_sk#9, ca_city#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#17]

(18) Scan parquet default.store
Output [2]: [s_store_sk#18, s_city#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [In(s_city, [Fairview,Midway]), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_city:string>

(19) ColumnarToRow
Input [2]: [s_store_sk#18, s_city#19]

(20) Filter
Input [2]: [s_store_sk#18, s_city#19]
Condition : (s_city#19 IN (Midway,Fairview) AND isnotnull(s_store_sk#18))

(21) Project
Output [1]: [s_store_sk#18]
Input [2]: [s_store_sk#18, s_city#19]

(22) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [s_store_sk#18]
Join condition: None

(23) Project [codegen id : 4]
Output [8]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ss_sold_date_sk#9, ca_city#12]
Input [10]: [ss_customer_sk#1, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ss_sold_date_sk#9, ca_city#12, s_store_sk#18]

(24) BroadcastExchange
Input [8]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ss_sold_date_sk#9, ca_city#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[6, int, true] as bigint)),false), [id=#20]

(25) Scan parquet default.date_dim
Output [3]: [d_date_sk#21, d_year#22, d_dom#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_dom), GreaterThanOrEqual(d_dom,1), LessThanOrEqual(d_dom,2), In(d_year, [1999,2000,2001]), In(d_date_sk, [2451180,2451181,2451211,2451212,2451239,2451240,2451270,2451271,2451300,2451301,2451331,2451332,2451361,2451362,2451392,2451393,2451423,2451424,2451453,2451454,2451484,2451485,2451514,2451515,2451545,2451546,2451576,2451577,2451605,2451606,2451636,2451637,2451666,2451667,2451697,2451698,2451727,2451728,2451758,2451759,2451789,2451790,2451819,2451820,2451850,2451851,2451880,2451881,2451911,2451912,2451942,2451943,2451970,2451971,2452001,2452002,2452031,2452032,2452062,2452063,2452092,2452093,2452123,2452124,2452154,2452155,2452184,2452185,2452215,2452216,2452245,2452246]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_dom:int>

(26) ColumnarToRow
Input [3]: [d_date_sk#21, d_year#22, d_dom#23]

(27) Filter
Input [3]: [d_date_sk#21, d_year#22, d_dom#23]
Condition : (((((isnotnull(d_dom#23) AND (d_dom#23 >= 1)) AND (d_dom#23 <= 2)) AND d_year#22 IN (1999,2000,2001)) AND d_date_sk#21 INSET 2451180, 2451181, 2451211, 2451212, 2451239, 2451240, 2451270, 2451271, 2451300, 2451301, 2451331, 2451332, 2451361, 2451362, 2451392, 2451393, 2451423, 2451424, 2451453, 2451454, 2451484, 2451485, 2451514, 2451515, 2451545, 2451546, 2451576, 2451577, 2451605, 2451606, 2451636, 2451637, 2451666, 2451667, 2451697, 2451698, 2451727, 2451728, 2451758, 2451759, 2451789, 2451790, 2451819, 2451820, 2451850, 2451851, 2451880, 2451881, 2451911, 2451912, 2451942, 2451943, 2451970, 2451971, 2452001, 2452002, 2452031, 2452032, 2452062, 2452063, 2452092, 2452093, 2452123, 2452124, 2452154, 2452155, 2452184, 2452185, 2452215, 2452216, 2452245, 2452246) AND isnotnull(d_date_sk#21))

(28) Project
Output [1]: [d_date_sk#21]
Input [3]: [d_date_sk#21, d_year#22, d_dom#23]

(29) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#9]
Right keys [1]: [d_date_sk#21]
Join condition: None

(30) Project [codegen id : 5]
Output [7]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ca_city#12]
Input [9]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ss_sold_date_sk#9, ca_city#12, d_date_sk#21]

(31) HashAggregate [codegen id : 5]
Input [7]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ca_city#12]
Keys [4]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#12]
Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#6)), partial_sum(UnscaledValue(ss_ext_list_price#7)), partial_sum(UnscaledValue(ss_ext_tax#8))]
Aggregate Attributes [3]: [sum#24, sum#25, sum#26]
Results [7]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#12, sum#27, sum#28, sum#29]

(32) Exchange
Input [7]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#12, sum#27, sum#28, sum#29]
Arguments: hashpartitioning(ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#12, 5), ENSURE_REQUIREMENTS, [id=#30]

(33) HashAggregate [codegen id : 6]
Input [7]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#12, sum#27, sum#28, sum#29]
Keys [4]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#12]
Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#6)), sum(UnscaledValue(ss_ext_list_price#7)), sum(UnscaledValue(ss_ext_tax#8))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_ext_sales_price#6))#31, sum(UnscaledValue(ss_ext_list_price#7))#32, sum(UnscaledValue(ss_ext_tax#8))#33]
Results [6]: [ss_ticket_number#5, ss_customer_sk#1, ca_city#12 AS bought_city#34, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#6))#31,17,2) AS extended_price#35, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#7))#32,17,2) AS list_price#36, MakeDecimal(sum(UnscaledValue(ss_ext_tax#8))#33,17,2) AS extended_tax#37]

(34) BroadcastExchange
Input [6]: [ss_ticket_number#5, ss_customer_sk#1, bought_city#34, extended_price#35, list_price#36, extended_tax#37]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#38]

(35) Scan parquet default.customer
Output [4]: [c_customer_sk#39, c_current_addr_sk#40, c_first_name#41, c_last_name#42]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string>

(36) ColumnarToRow
Input [4]: [c_customer_sk#39, c_current_addr_sk#40, c_first_name#41, c_last_name#42]

(37) Filter
Input [4]: [c_customer_sk#39, c_current_addr_sk#40, c_first_name#41, c_last_name#42]
Condition : (isnotnull(c_customer_sk#39) AND isnotnull(c_current_addr_sk#40))

(38) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#39]
Join condition: None

(39) Project [codegen id : 7]
Output [8]: [ss_ticket_number#5, bought_city#34, extended_price#35, list_price#36, extended_tax#37, c_current_addr_sk#40, c_first_name#41, c_last_name#42]
Input [10]: [ss_ticket_number#5, ss_customer_sk#1, bought_city#34, extended_price#35, list_price#36, extended_tax#37, c_customer_sk#39, c_current_addr_sk#40, c_first_name#41, c_last_name#42]

(40) Exchange
Input [8]: [ss_ticket_number#5, bought_city#34, extended_price#35, list_price#36, extended_tax#37, c_current_addr_sk#40, c_first_name#41, c_last_name#42]
Arguments: hashpartitioning(c_current_addr_sk#40, 5), ENSURE_REQUIREMENTS, [id=#43]

(41) Sort [codegen id : 8]
Input [8]: [ss_ticket_number#5, bought_city#34, extended_price#35, list_price#36, extended_tax#37, c_current_addr_sk#40, c_first_name#41, c_last_name#42]
Arguments: [c_current_addr_sk#40 ASC NULLS FIRST], false, 0

(42) Scan parquet default.customer_address
Output [2]: [ca_address_sk#44, ca_city#45]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_city)]
ReadSchema: struct<ca_address_sk:int,ca_city:string>

(43) ColumnarToRow [codegen id : 9]
Input [2]: [ca_address_sk#44, ca_city#45]

(44) Filter [codegen id : 9]
Input [2]: [ca_address_sk#44, ca_city#45]
Condition : (isnotnull(ca_address_sk#44) AND isnotnull(ca_city#45))

(45) Exchange
Input [2]: [ca_address_sk#44, ca_city#45]
Arguments: hashpartitioning(ca_address_sk#44, 5), ENSURE_REQUIREMENTS, [id=#46]

(46) Sort [codegen id : 10]
Input [2]: [ca_address_sk#44, ca_city#45]
Arguments: [ca_address_sk#44 ASC NULLS FIRST], false, 0

(47) SortMergeJoin [codegen id : 11]
Left keys [1]: [c_current_addr_sk#40]
Right keys [1]: [ca_address_sk#44]
Join condition: NOT (ca_city#45 = bought_city#34)

(48) Project [codegen id : 11]
Output [8]: [c_last_name#42, c_first_name#41, ca_city#45, bought_city#34, ss_ticket_number#5, extended_price#35, extended_tax#37, list_price#36]
Input [10]: [ss_ticket_number#5, bought_city#34, extended_price#35, list_price#36, extended_tax#37, c_current_addr_sk#40, c_first_name#41, c_last_name#42, ca_address_sk#44, ca_city#45]

(49) TakeOrderedAndProject
Input [8]: [c_last_name#42, c_first_name#41, ca_city#45, bought_city#34, ss_ticket_number#5, extended_price#35, extended_tax#37, list_price#36]
Arguments: 100, [c_last_name#42 ASC NULLS FIRST, ss_ticket_number#5 ASC NULLS FIRST], [c_last_name#42, c_first_name#41, ca_city#45, bought_city#34, ss_ticket_number#5, extended_price#35, extended_tax#37, list_price#36]

