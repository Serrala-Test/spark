== Physical Plan ==
TakeOrderedAndProject (30)
+- * Project (29)
   +- * SortMergeJoin Inner (28)
      :- * Sort (25)
      :  +- Exchange (24)
      :     +- * HashAggregate (23)
      :        +- Exchange (22)
      :           +- * HashAggregate (21)
      :              +- * Project (20)
      :                 +- * BroadcastHashJoin Inner BuildRight (19)
      :                    :- * Project (13)
      :                    :  +- * BroadcastHashJoin Inner BuildRight (12)
      :                    :     :- * Project (6)
      :                    :     :  +- * BroadcastHashJoin Inner BuildRight (5)
      :                    :     :     :- * Filter (3)
      :                    :     :     :  +- * ColumnarToRow (2)
      :                    :     :     :     +- Scan parquet spark_catalog.default.store_sales (1)
      :                    :     :     +- ReusedExchange (4)
      :                    :     +- BroadcastExchange (11)
      :                    :        +- * Project (10)
      :                    :           +- * Filter (9)
      :                    :              +- * ColumnarToRow (8)
      :                    :                 +- Scan parquet spark_catalog.default.household_demographics (7)
      :                    +- BroadcastExchange (18)
      :                       +- * Project (17)
      :                          +- * Filter (16)
      :                             +- * ColumnarToRow (15)
      :                                +- Scan parquet spark_catalog.default.store (14)
      +- * Sort (27)
         +- ReusedExchange (26)


(1) Scan parquet spark_catalog.default.store_sales
Output [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), (ss_sold_date_sk#8 >= 2450819), (ss_sold_date_sk#8 <= 2451904), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_coupon_amt:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ss_sold_date_sk#8]

(3) Filter [codegen id : 4]
Input [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ss_sold_date_sk#8]
Condition : (((isnotnull(ss_store_sk#4) AND isnotnull(ss_hdemo_sk#2)) AND isnotnull(ss_customer_sk#1)) AND might_contain(Subquery scalar-subquery#10, [id=#11], xxhash64(ss_customer_sk#1, 42), false))

(4) ReusedExchange [Reuses operator id: 42]
Output [1]: [d_date_sk#12]

(5) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#12]
Join type: Inner
Join condition: None

(6) Project [codegen id : 4]
Output [7]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7]
Input [9]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ss_sold_date_sk#8, d_date_sk#12]

(7) Scan parquet spark_catalog.default.household_demographics
Output [3]: [hd_demo_sk#13, hd_dep_count#14, hd_vehicle_count#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [Or(EqualTo(hd_dep_count,8),GreaterThan(hd_vehicle_count,0)), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>

(8) ColumnarToRow [codegen id : 2]
Input [3]: [hd_demo_sk#13, hd_dep_count#14, hd_vehicle_count#15]

(9) Filter [codegen id : 2]
Input [3]: [hd_demo_sk#13, hd_dep_count#14, hd_vehicle_count#15]
Condition : (((hd_dep_count#14 = 8) OR (hd_vehicle_count#15 > 0)) AND isnotnull(hd_demo_sk#13))

(10) Project [codegen id : 2]
Output [1]: [hd_demo_sk#13]
Input [3]: [hd_demo_sk#13, hd_dep_count#14, hd_vehicle_count#15]

(11) BroadcastExchange
Input [1]: [hd_demo_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(12) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_hdemo_sk#2]
Right keys [1]: [hd_demo_sk#13]
Join type: Inner
Join condition: None

(13) Project [codegen id : 4]
Output [6]: [ss_customer_sk#1, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7]
Input [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, hd_demo_sk#13]

(14) Scan parquet spark_catalog.default.store
Output [3]: [s_store_sk#16, s_number_employees#17, s_city#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_number_employees), GreaterThanOrEqual(s_number_employees,200), LessThanOrEqual(s_number_employees,295), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_number_employees:int,s_city:string>

(15) ColumnarToRow [codegen id : 3]
Input [3]: [s_store_sk#16, s_number_employees#17, s_city#18]

(16) Filter [codegen id : 3]
Input [3]: [s_store_sk#16, s_number_employees#17, s_city#18]
Condition : (((isnotnull(s_number_employees#17) AND (s_number_employees#17 >= 200)) AND (s_number_employees#17 <= 295)) AND isnotnull(s_store_sk#16))

(17) Project [codegen id : 3]
Output [2]: [s_store_sk#16, s_city#18]
Input [3]: [s_store_sk#16, s_number_employees#17, s_city#18]

(18) BroadcastExchange
Input [2]: [s_store_sk#16, s_city#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(19) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [s_store_sk#16]
Join type: Inner
Join condition: None

(20) Project [codegen id : 4]
Output [6]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, s_city#18]
Input [8]: [ss_customer_sk#1, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, s_store_sk#16, s_city#18]

(21) HashAggregate [codegen id : 4]
Input [6]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, s_city#18]
Keys [4]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, s_city#18]
Functions [2]: [partial_sum(UnscaledValue(ss_coupon_amt#6)), partial_sum(UnscaledValue(ss_net_profit#7))]
Aggregate Attributes [2]: [sum#19, sum#20]
Results [6]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, s_city#18, sum#21, sum#22]

(22) Exchange
Input [6]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, s_city#18, sum#21, sum#22]
Arguments: hashpartitioning(ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, s_city#18, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(23) HashAggregate [codegen id : 5]
Input [6]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, s_city#18, sum#21, sum#22]
Keys [4]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, s_city#18]
Functions [2]: [sum(UnscaledValue(ss_coupon_amt#6)), sum(UnscaledValue(ss_net_profit#7))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_coupon_amt#6))#23, sum(UnscaledValue(ss_net_profit#7))#24]
Results [5]: [ss_ticket_number#5, ss_customer_sk#1, s_city#18, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#6))#23,17,2) AS amt#25, MakeDecimal(sum(UnscaledValue(ss_net_profit#7))#24,17,2) AS profit#26]

(24) Exchange
Input [5]: [ss_ticket_number#5, ss_customer_sk#1, s_city#18, amt#25, profit#26]
Arguments: hashpartitioning(ss_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(25) Sort [codegen id : 6]
Input [5]: [ss_ticket_number#5, ss_customer_sk#1, s_city#18, amt#25, profit#26]
Arguments: [ss_customer_sk#1 ASC NULLS FIRST], false, 0

(26) ReusedExchange [Reuses operator id: 34]
Output [3]: [c_customer_sk#27, c_first_name#28, c_last_name#29]

(27) Sort [codegen id : 8]
Input [3]: [c_customer_sk#27, c_first_name#28, c_last_name#29]
Arguments: [c_customer_sk#27 ASC NULLS FIRST], false, 0

(28) SortMergeJoin [codegen id : 9]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#27]
Join type: Inner
Join condition: None

(29) Project [codegen id : 9]
Output [7]: [c_last_name#29, c_first_name#28, substr(s_city#18, 1, 30) AS substr(s_city, 1, 30)#30, ss_ticket_number#5, amt#25, profit#26, s_city#18]
Input [8]: [ss_ticket_number#5, ss_customer_sk#1, s_city#18, amt#25, profit#26, c_customer_sk#27, c_first_name#28, c_last_name#29]

(30) TakeOrderedAndProject
Input [7]: [c_last_name#29, c_first_name#28, substr(s_city, 1, 30)#30, ss_ticket_number#5, amt#25, profit#26, s_city#18]
Arguments: 100, [c_last_name#29 ASC NULLS FIRST, c_first_name#28 ASC NULLS FIRST, substr(s_city#18, 1, 30) ASC NULLS FIRST, profit#26 ASC NULLS FIRST], [c_last_name#29, c_first_name#28, substr(s_city, 1, 30)#30, ss_ticket_number#5, amt#25, profit#26]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#10, [id=#11]
ObjectHashAggregate (37)
+- Exchange (36)
   +- ObjectHashAggregate (35)
      +- Exchange (34)
         +- * Filter (33)
            +- * ColumnarToRow (32)
               +- Scan parquet spark_catalog.default.customer (31)


(31) Scan parquet spark_catalog.default.customer
Output [3]: [c_customer_sk#27, c_first_name#28, c_last_name#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(32) ColumnarToRow [codegen id : 1]
Input [3]: [c_customer_sk#27, c_first_name#28, c_last_name#29]

(33) Filter [codegen id : 1]
Input [3]: [c_customer_sk#27, c_first_name#28, c_last_name#29]
Condition : isnotnull(c_customer_sk#27)

(34) Exchange
Input [3]: [c_customer_sk#27, c_first_name#28, c_last_name#29]
Arguments: hashpartitioning(c_customer_sk#27, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(35) ObjectHashAggregate
Input [3]: [c_customer_sk#27, c_first_name#28, c_last_name#29]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(c_customer_sk#27, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [buf#31]
Results [1]: [buf#32]

(36) Exchange
Input [1]: [buf#32]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=6]

(37) ObjectHashAggregate
Input [1]: [buf#32]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(c_customer_sk#27, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(c_customer_sk#27, 42), 2000000, 16000000, 0, 0)#33]
Results [1]: [bloom_filter_agg(xxhash64(c_customer_sk#27, 42), 2000000, 16000000, 0, 0)#33 AS bloomFilter#34]

Subquery:2 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (42)
+- * Project (41)
   +- * Filter (40)
      +- * ColumnarToRow (39)
         +- Scan parquet spark_catalog.default.date_dim (38)


(38) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#12, d_year#35, d_dow#36]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_dow), EqualTo(d_dow,1), In(d_year, [1998,1999,2000]), GreaterThanOrEqual(d_date_sk,2450819), LessThanOrEqual(d_date_sk,2451904), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int>

(39) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#12, d_year#35, d_dow#36]

(40) Filter [codegen id : 1]
Input [3]: [d_date_sk#12, d_year#35, d_dow#36]
Condition : (((((isnotnull(d_dow#36) AND (d_dow#36 = 1)) AND d_year#35 IN (1998,1999,2000)) AND (d_date_sk#12 >= 2450819)) AND (d_date_sk#12 <= 2451904)) AND isnotnull(d_date_sk#12))

(41) Project [codegen id : 1]
Output [1]: [d_date_sk#12]
Input [3]: [d_date_sk#12, d_year#35, d_dow#36]

(42) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]


