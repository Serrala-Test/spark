== Physical Plan ==
TakeOrderedAndProject (212)
+- * HashAggregate (211)
   +- Exchange (210)
      +- * HashAggregate (209)
         +- Union (208)
            :- * HashAggregate (131)
            :  +- Exchange (130)
            :     +- * HashAggregate (129)
            :        +- Union (128)
            :           :- * Project (89)
            :           :  +- * Filter (88)
            :           :     +- * HashAggregate (87)
            :           :        +- Exchange (86)
            :           :           +- * HashAggregate (85)
            :           :              +- * Project (84)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (83)
            :           :                    :- * Project (73)
            :           :                    :  +- * BroadcastHashJoin Inner BuildRight (72)
            :           :                    :     :- SortMergeJoin LeftSemi (66)
            :           :                    :     :  :- * Sort (5)
            :           :                    :     :  :  +- Exchange (4)
            :           :                    :     :  :     +- * Filter (3)
            :           :                    :     :  :        +- * ColumnarToRow (2)
            :           :                    :     :  :           +- Scan parquet default.store_sales (1)
            :           :                    :     :  +- * Sort (65)
            :           :                    :     :     +- Exchange (64)
            :           :                    :     :        +- * Project (63)
            :           :                    :     :           +- * BroadcastHashJoin Inner BuildRight (62)
            :           :                    :     :              :- * Filter (8)
            :           :                    :     :              :  +- * ColumnarToRow (7)
            :           :                    :     :              :     +- Scan parquet default.item (6)
            :           :                    :     :              +- BroadcastExchange (61)
            :           :                    :     :                 +- * BroadcastHashJoin LeftSemi BuildRight (60)
            :           :                    :     :                    :- * HashAggregate (46)
            :           :                    :     :                    :  +- * HashAggregate (45)
            :           :                    :     :                    :     +- * BroadcastHashJoin LeftSemi BuildRight (44)
            :           :                    :     :                    :        :- * HashAggregate (27)
            :           :                    :     :                    :        :  +- Exchange (26)
            :           :                    :     :                    :        :     +- * HashAggregate (25)
            :           :                    :     :                    :        :        +- * Project (24)
            :           :                    :     :                    :        :           +- * BroadcastHashJoin Inner BuildRight (23)
            :           :                    :     :                    :        :              :- * Project (18)
            :           :                    :     :                    :        :              :  +- * BroadcastHashJoin Inner BuildRight (17)
            :           :                    :     :                    :        :              :     :- * Filter (11)
            :           :                    :     :                    :        :              :     :  +- * ColumnarToRow (10)
            :           :                    :     :                    :        :              :     :     +- Scan parquet default.store_sales (9)
            :           :                    :     :                    :        :              :     +- BroadcastExchange (16)
            :           :                    :     :                    :        :              :        +- * Project (15)
            :           :                    :     :                    :        :              :           +- * Filter (14)
            :           :                    :     :                    :        :              :              +- * ColumnarToRow (13)
            :           :                    :     :                    :        :              :                 +- Scan parquet default.date_dim (12)
            :           :                    :     :                    :        :              +- BroadcastExchange (22)
            :           :                    :     :                    :        :                 +- * Filter (21)
            :           :                    :     :                    :        :                    +- * ColumnarToRow (20)
            :           :                    :     :                    :        :                       +- Scan parquet default.item (19)
            :           :                    :     :                    :        +- BroadcastExchange (43)
            :           :                    :     :                    :           +- * HashAggregate (42)
            :           :                    :     :                    :              +- Exchange (41)
            :           :                    :     :                    :                 +- * HashAggregate (40)
            :           :                    :     :                    :                    +- * Project (39)
            :           :                    :     :                    :                       +- * BroadcastHashJoin Inner BuildRight (38)
            :           :                    :     :                    :                          :- * Project (33)
            :           :                    :     :                    :                          :  +- * BroadcastHashJoin Inner BuildRight (32)
            :           :                    :     :                    :                          :     :- * Filter (30)
            :           :                    :     :                    :                          :     :  +- * ColumnarToRow (29)
            :           :                    :     :                    :                          :     :     +- Scan parquet default.catalog_sales (28)
            :           :                    :     :                    :                          :     +- ReusedExchange (31)
            :           :                    :     :                    :                          +- BroadcastExchange (37)
            :           :                    :     :                    :                             +- * Filter (36)
            :           :                    :     :                    :                                +- * ColumnarToRow (35)
            :           :                    :     :                    :                                   +- Scan parquet default.item (34)
            :           :                    :     :                    +- BroadcastExchange (59)
            :           :                    :     :                       +- * HashAggregate (58)
            :           :                    :     :                          +- Exchange (57)
            :           :                    :     :                             +- * HashAggregate (56)
            :           :                    :     :                                +- * Project (55)
            :           :                    :     :                                   +- * BroadcastHashJoin Inner BuildRight (54)
            :           :                    :     :                                      :- * Project (52)
            :           :                    :     :                                      :  +- * BroadcastHashJoin Inner BuildRight (51)
            :           :                    :     :                                      :     :- * Filter (49)
            :           :                    :     :                                      :     :  +- * ColumnarToRow (48)
            :           :                    :     :                                      :     :     +- Scan parquet default.web_sales (47)
            :           :                    :     :                                      :     +- ReusedExchange (50)
            :           :                    :     :                                      +- ReusedExchange (53)
            :           :                    :     +- BroadcastExchange (71)
            :           :                    :        +- * Project (70)
            :           :                    :           +- * Filter (69)
            :           :                    :              +- * ColumnarToRow (68)
            :           :                    :                 +- Scan parquet default.date_dim (67)
            :           :                    +- BroadcastExchange (82)
            :           :                       +- SortMergeJoin LeftSemi (81)
            :           :                          :- * Sort (78)
            :           :                          :  +- Exchange (77)
            :           :                          :     +- * Filter (76)
            :           :                          :        +- * ColumnarToRow (75)
            :           :                          :           +- Scan parquet default.item (74)
            :           :                          +- * Sort (80)
            :           :                             +- ReusedExchange (79)
            :           :- * Project (108)
            :           :  +- * Filter (107)
            :           :     +- * HashAggregate (106)
            :           :        +- Exchange (105)
            :           :           +- * HashAggregate (104)
            :           :              +- * Project (103)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (102)
            :           :                    :- * Project (100)
            :           :                    :  +- * BroadcastHashJoin Inner BuildRight (99)
            :           :                    :     :- SortMergeJoin LeftSemi (97)
            :           :                    :     :  :- * Sort (94)
            :           :                    :     :  :  +- Exchange (93)
            :           :                    :     :  :     +- * Filter (92)
            :           :                    :     :  :        +- * ColumnarToRow (91)
            :           :                    :     :  :           +- Scan parquet default.catalog_sales (90)
            :           :                    :     :  +- * Sort (96)
            :           :                    :     :     +- ReusedExchange (95)
            :           :                    :     +- ReusedExchange (98)
            :           :                    +- ReusedExchange (101)
            :           +- * Project (127)
            :              +- * Filter (126)
            :                 +- * HashAggregate (125)
            :                    +- Exchange (124)
            :                       +- * HashAggregate (123)
            :                          +- * Project (122)
            :                             +- * BroadcastHashJoin Inner BuildRight (121)
            :                                :- * Project (119)
            :                                :  +- * BroadcastHashJoin Inner BuildRight (118)
            :                                :     :- SortMergeJoin LeftSemi (116)
            :                                :     :  :- * Sort (113)
            :                                :     :  :  +- Exchange (112)
            :                                :     :  :     +- * Filter (111)
            :                                :     :  :        +- * ColumnarToRow (110)
            :                                :     :  :           +- Scan parquet default.web_sales (109)
            :                                :     :  +- * Sort (115)
            :                                :     :     +- ReusedExchange (114)
            :                                :     +- ReusedExchange (117)
            :                                +- ReusedExchange (120)
            :- * HashAggregate (150)
            :  +- Exchange (149)
            :     +- * HashAggregate (148)
            :        +- * HashAggregate (147)
            :           +- Exchange (146)
            :              +- * HashAggregate (145)
            :                 +- Union (144)
            :                    :- * Project (135)
            :                    :  +- * Filter (134)
            :                    :     +- * HashAggregate (133)
            :                    :        +- ReusedExchange (132)
            :                    :- * Project (139)
            :                    :  +- * Filter (138)
            :                    :     +- * HashAggregate (137)
            :                    :        +- ReusedExchange (136)
            :                    +- * Project (143)
            :                       +- * Filter (142)
            :                          +- * HashAggregate (141)
            :                             +- ReusedExchange (140)
            :- * HashAggregate (169)
            :  +- Exchange (168)
            :     +- * HashAggregate (167)
            :        +- * HashAggregate (166)
            :           +- Exchange (165)
            :              +- * HashAggregate (164)
            :                 +- Union (163)
            :                    :- * Project (154)
            :                    :  +- * Filter (153)
            :                    :     +- * HashAggregate (152)
            :                    :        +- ReusedExchange (151)
            :                    :- * Project (158)
            :                    :  +- * Filter (157)
            :                    :     +- * HashAggregate (156)
            :                    :        +- ReusedExchange (155)
            :                    +- * Project (162)
            :                       +- * Filter (161)
            :                          +- * HashAggregate (160)
            :                             +- ReusedExchange (159)
            :- * HashAggregate (188)
            :  +- Exchange (187)
            :     +- * HashAggregate (186)
            :        +- * HashAggregate (185)
            :           +- Exchange (184)
            :              +- * HashAggregate (183)
            :                 +- Union (182)
            :                    :- * Project (173)
            :                    :  +- * Filter (172)
            :                    :     +- * HashAggregate (171)
            :                    :        +- ReusedExchange (170)
            :                    :- * Project (177)
            :                    :  +- * Filter (176)
            :                    :     +- * HashAggregate (175)
            :                    :        +- ReusedExchange (174)
            :                    +- * Project (181)
            :                       +- * Filter (180)
            :                          +- * HashAggregate (179)
            :                             +- ReusedExchange (178)
            +- * HashAggregate (207)
               +- Exchange (206)
                  +- * HashAggregate (205)
                     +- * HashAggregate (204)
                        +- Exchange (203)
                           +- * HashAggregate (202)
                              +- Union (201)
                                 :- * Project (192)
                                 :  +- * Filter (191)
                                 :     +- * HashAggregate (190)
                                 :        +- ReusedExchange (189)
                                 :- * Project (196)
                                 :  +- * Filter (195)
                                 :     +- * HashAggregate (194)
                                 :        +- ReusedExchange (193)
                                 +- * Project (200)
                                    +- * Filter (199)
                                       +- * HashAggregate (198)
                                          +- ReusedExchange (197)


(1) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(4) Exchange
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Arguments: hashpartitioning(ss_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#5]

(5) Sort [codegen id : 2]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Arguments: [ss_item_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 15]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(8) Filter [codegen id : 15]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(9) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(10) ColumnarToRow [codegen id : 5]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]

(11) Filter [codegen id : 5]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(12) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(13) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]

(14) Filter [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1999)) AND (d_year#11 <= 2001)) AND isnotnull(d_date_sk#10))

(15) Project [codegen id : 3]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(16) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(17) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(18) Project [codegen id : 5]
Output [1]: [ss_item_sk#2]
Input [3]: [ss_sold_date_sk#1, ss_item_sk#2, d_date_sk#10]

(19) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(20) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(21) Filter [codegen id : 4]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : (((isnotnull(i_item_sk#6) AND isnotnull(i_brand_id#7)) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(22) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13]

(23) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#6]
Join condition: None

(24) Project [codegen id : 5]
Output [3]: [i_brand_id#7 AS brand_id#14, i_class_id#8 AS class_id#15, i_category_id#9 AS category_id#16]
Input [5]: [ss_item_sk#2, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(25) HashAggregate [codegen id : 5]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(26) Exchange
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: hashpartitioning(brand_id#14, class_id#15, category_id#16, 5), ENSURE_REQUIREMENTS, [id=#17]

(27) HashAggregate [codegen id : 14]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(28) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#18, cs_item_sk#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int>

(29) ColumnarToRow [codegen id : 8]
Input [2]: [cs_sold_date_sk#18, cs_item_sk#19]

(30) Filter [codegen id : 8]
Input [2]: [cs_sold_date_sk#18, cs_item_sk#19]
Condition : (isnotnull(cs_item_sk#19) AND isnotnull(cs_sold_date_sk#18))

(31) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#10]

(32) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#10]
Join condition: None

(33) Project [codegen id : 8]
Output [1]: [cs_item_sk#19]
Input [3]: [cs_sold_date_sk#18, cs_item_sk#19, d_date_sk#10]

(34) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(35) ColumnarToRow [codegen id : 7]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(36) Filter [codegen id : 7]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : isnotnull(i_item_sk#6)

(37) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#20]

(38) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [i_item_sk#6]
Join condition: None

(39) Project [codegen id : 8]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [cs_item_sk#19, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(40) HashAggregate [codegen id : 8]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]

(41) Exchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#21]

(42) HashAggregate [codegen id : 9]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]

(43) BroadcastExchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#22]

(44) BroadcastHashJoin [codegen id : 14]
Left keys [6]: [coalesce(brand_id#14, 0), isnull(brand_id#14), coalesce(class_id#15, 0), isnull(class_id#15), coalesce(category_id#16, 0), isnull(category_id#16)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join condition: None

(45) HashAggregate [codegen id : 14]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(46) HashAggregate [codegen id : 14]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(47) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#23, ws_item_sk#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int>

(48) ColumnarToRow [codegen id : 12]
Input [2]: [ws_sold_date_sk#23, ws_item_sk#24]

(49) Filter [codegen id : 12]
Input [2]: [ws_sold_date_sk#23, ws_item_sk#24]
Condition : (isnotnull(ws_item_sk#24) AND isnotnull(ws_sold_date_sk#23))

(50) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#10]

(51) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ws_sold_date_sk#23]
Right keys [1]: [d_date_sk#10]
Join condition: None

(52) Project [codegen id : 12]
Output [1]: [ws_item_sk#24]
Input [3]: [ws_sold_date_sk#23, ws_item_sk#24, d_date_sk#10]

(53) ReusedExchange [Reuses operator id: 37]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(54) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ws_item_sk#24]
Right keys [1]: [i_item_sk#6]
Join condition: None

(55) Project [codegen id : 12]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [ws_item_sk#24, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(56) HashAggregate [codegen id : 12]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]

(57) Exchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#25]

(58) HashAggregate [codegen id : 13]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]

(59) BroadcastExchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#26]

(60) BroadcastHashJoin [codegen id : 14]
Left keys [6]: [coalesce(brand_id#14, 0), isnull(brand_id#14), coalesce(class_id#15, 0), isnull(class_id#15), coalesce(category_id#16, 0), isnull(category_id#16)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join condition: None

(61) BroadcastExchange
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#27]

(62) BroadcastHashJoin [codegen id : 15]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#14, class_id#15, category_id#16]
Join condition: None

(63) Project [codegen id : 15]
Output [1]: [i_item_sk#6 AS ss_item_sk#28]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#14, class_id#15, category_id#16]

(64) Exchange
Input [1]: [ss_item_sk#28]
Arguments: hashpartitioning(ss_item_sk#28, 5), ENSURE_REQUIREMENTS, [id=#29]

(65) Sort [codegen id : 16]
Input [1]: [ss_item_sk#28]
Arguments: [ss_item_sk#28 ASC NULLS FIRST], false, 0

(66) SortMergeJoin
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [ss_item_sk#28]
Join condition: None

(67) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(68) ColumnarToRow [codegen id : 17]
Input [3]: [d_date_sk#10, d_year#11, d_moy#30]

(69) Filter [codegen id : 17]
Input [3]: [d_date_sk#10, d_year#11, d_moy#30]
Condition : ((((isnotnull(d_year#11) AND isnotnull(d_moy#30)) AND (d_year#11 = 2000)) AND (d_moy#30 = 11)) AND isnotnull(d_date_sk#10))

(70) Project [codegen id : 17]
Output [1]: [d_date_sk#10]
Input [3]: [d_date_sk#10, d_year#11, d_moy#30]

(71) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#31]

(72) BroadcastHashJoin [codegen id : 34]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(73) Project [codegen id : 34]
Output [3]: [ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4, d_date_sk#10]

(74) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(75) ColumnarToRow [codegen id : 18]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(76) Filter [codegen id : 18]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : isnotnull(i_item_sk#6)

(77) Exchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(i_item_sk#6, 5), ENSURE_REQUIREMENTS, [id=#32]

(78) Sort [codegen id : 19]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: [i_item_sk#6 ASC NULLS FIRST], false, 0

(79) ReusedExchange [Reuses operator id: 64]
Output [1]: [ss_item_sk#28]

(80) Sort [codegen id : 33]
Input [1]: [ss_item_sk#28]
Arguments: [ss_item_sk#28 ASC NULLS FIRST], false, 0

(81) SortMergeJoin
Left keys [1]: [i_item_sk#6]
Right keys [1]: [ss_item_sk#28]
Join condition: None

(82) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#33]

(83) BroadcastHashJoin [codegen id : 34]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#6]
Join condition: None

(84) Project [codegen id : 34]
Output [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ss_item_sk#2, ss_quantity#3, ss_list_price#4, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(85) HashAggregate [codegen id : 34]
Input [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#34, isEmpty#35, count#36]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#37, isEmpty#38, count#39]

(86) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#37, isEmpty#38, count#39]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#40]

(87) HashAggregate [codegen id : 35]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#37, isEmpty#38, count#39]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#41, count(1)#42]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#41 AS sales#43, count(1)#42 AS number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#41 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#45]

(88) Filter [codegen id : 35]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#45]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#45) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#45 as decimal(32,6)) > cast(Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(89) Project [codegen id : 35]
Output [6]: [store AS channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#45]

(90) Scan parquet default.catalog_sales
Output [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#49, cs_list_price#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(91) ColumnarToRow [codegen id : 36]
Input [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#49, cs_list_price#50]

(92) Filter [codegen id : 36]
Input [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#49, cs_list_price#50]
Condition : (isnotnull(cs_item_sk#19) AND isnotnull(cs_sold_date_sk#18))

(93) Exchange
Input [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#49, cs_list_price#50]
Arguments: hashpartitioning(cs_item_sk#19, 5), ENSURE_REQUIREMENTS, [id=#51]

(94) Sort [codegen id : 37]
Input [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#49, cs_list_price#50]
Arguments: [cs_item_sk#19 ASC NULLS FIRST], false, 0

(95) ReusedExchange [Reuses operator id: 64]
Output [1]: [ss_item_sk#28]

(96) Sort [codegen id : 51]
Input [1]: [ss_item_sk#28]
Arguments: [ss_item_sk#28 ASC NULLS FIRST], false, 0

(97) SortMergeJoin
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [ss_item_sk#28]
Join condition: None

(98) ReusedExchange [Reuses operator id: 71]
Output [1]: [d_date_sk#10]

(99) BroadcastHashJoin [codegen id : 69]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#10]
Join condition: None

(100) Project [codegen id : 69]
Output [3]: [cs_item_sk#19, cs_quantity#49, cs_list_price#50]
Input [5]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#49, cs_list_price#50, d_date_sk#10]

(101) ReusedExchange [Reuses operator id: 82]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(102) BroadcastHashJoin [codegen id : 69]
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [i_item_sk#6]
Join condition: None

(103) Project [codegen id : 69]
Output [5]: [cs_quantity#49, cs_list_price#50, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [cs_item_sk#19, cs_quantity#49, cs_list_price#50, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(104) HashAggregate [codegen id : 69]
Input [5]: [cs_quantity#49, cs_list_price#50, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#52, isEmpty#53, count#54]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#55, isEmpty#56, count#57]

(105) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#55, isEmpty#56, count#57]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#58]

(106) HashAggregate [codegen id : 70]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#55, isEmpty#56, count#57]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#59, count(1)#60]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#59 AS sales#61, count(1)#60 AS number_sales#62, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#59 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#63]

(107) Filter [codegen id : 70]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#61, number_sales#62, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#63]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#63) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#63 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(108) Project [codegen id : 70]
Output [6]: [catalog AS channel#64, i_brand_id#7, i_class_id#8, i_category_id#9, sales#61, number_sales#62]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#61, number_sales#62, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#63]

(109) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#23, ws_item_sk#24, ws_quantity#65, ws_list_price#66]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(110) ColumnarToRow [codegen id : 71]
Input [4]: [ws_sold_date_sk#23, ws_item_sk#24, ws_quantity#65, ws_list_price#66]

(111) Filter [codegen id : 71]
Input [4]: [ws_sold_date_sk#23, ws_item_sk#24, ws_quantity#65, ws_list_price#66]
Condition : (isnotnull(ws_item_sk#24) AND isnotnull(ws_sold_date_sk#23))

(112) Exchange
Input [4]: [ws_sold_date_sk#23, ws_item_sk#24, ws_quantity#65, ws_list_price#66]
Arguments: hashpartitioning(ws_item_sk#24, 5), ENSURE_REQUIREMENTS, [id=#67]

(113) Sort [codegen id : 72]
Input [4]: [ws_sold_date_sk#23, ws_item_sk#24, ws_quantity#65, ws_list_price#66]
Arguments: [ws_item_sk#24 ASC NULLS FIRST], false, 0

(114) ReusedExchange [Reuses operator id: 64]
Output [1]: [ss_item_sk#28]

(115) Sort [codegen id : 86]
Input [1]: [ss_item_sk#28]
Arguments: [ss_item_sk#28 ASC NULLS FIRST], false, 0

(116) SortMergeJoin
Left keys [1]: [ws_item_sk#24]
Right keys [1]: [ss_item_sk#28]
Join condition: None

(117) ReusedExchange [Reuses operator id: 71]
Output [1]: [d_date_sk#10]

(118) BroadcastHashJoin [codegen id : 104]
Left keys [1]: [ws_sold_date_sk#23]
Right keys [1]: [d_date_sk#10]
Join condition: None

(119) Project [codegen id : 104]
Output [3]: [ws_item_sk#24, ws_quantity#65, ws_list_price#66]
Input [5]: [ws_sold_date_sk#23, ws_item_sk#24, ws_quantity#65, ws_list_price#66, d_date_sk#10]

(120) ReusedExchange [Reuses operator id: 82]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(121) BroadcastHashJoin [codegen id : 104]
Left keys [1]: [ws_item_sk#24]
Right keys [1]: [i_item_sk#6]
Join condition: None

(122) Project [codegen id : 104]
Output [5]: [ws_quantity#65, ws_list_price#66, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ws_item_sk#24, ws_quantity#65, ws_list_price#66, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(123) HashAggregate [codegen id : 104]
Input [5]: [ws_quantity#65, ws_list_price#66, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#68, isEmpty#69, count#70]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#71, isEmpty#72, count#73]

(124) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#71, isEmpty#72, count#73]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#74]

(125) HashAggregate [codegen id : 105]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#71, isEmpty#72, count#73]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#75, count(1)#76]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#75 AS sales#77, count(1)#76 AS number_sales#78, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#75 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#79]

(126) Filter [codegen id : 105]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#77, number_sales#78, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#79]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#79) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#79 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(127) Project [codegen id : 105]
Output [6]: [web AS channel#80, i_brand_id#7, i_class_id#8, i_category_id#9, sales#77, number_sales#78]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#77, number_sales#78, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#79]

(128) Union

(129) HashAggregate [codegen id : 106]
Input [6]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44]
Keys [4]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(sales#43), partial_sum(number_sales#44)]
Aggregate Attributes [3]: [sum#81, isEmpty#82, sum#83]
Results [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#84, isEmpty#85, sum#86]

(130) Exchange
Input [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#84, isEmpty#85, sum#86]
Arguments: hashpartitioning(channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#87]

(131) HashAggregate [codegen id : 107]
Input [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#84, isEmpty#85, sum#86]
Keys [4]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#43), sum(number_sales#44)]
Aggregate Attributes [2]: [sum(sales#43)#88, sum(number_sales#44)#89]
Results [6]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum(sales#43)#88 AS sum_sales#90, sum(number_sales#44)#89 AS number_sales#91]

(132) ReusedExchange [Reuses operator id: 86]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#92, isEmpty#93, count#94]

(133) HashAggregate [codegen id : 142]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#92, isEmpty#93, count#94]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#95, count(1)#96]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#95 AS sales#43, count(1)#96 AS number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#95 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#97]

(134) Filter [codegen id : 142]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#97]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#97) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#97 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(135) Project [codegen id : 142]
Output [6]: [store AS channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#97]

(136) ReusedExchange [Reuses operator id: 105]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#98, isEmpty#99, count#100]

(137) HashAggregate [codegen id : 177]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#98, isEmpty#99, count#100]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#101, count(1)#102]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#101 AS sales#61, count(1)#102 AS number_sales#62, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#101 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#103]

(138) Filter [codegen id : 177]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#61, number_sales#62, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#103]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#103) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#103 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(139) Project [codegen id : 177]
Output [6]: [catalog AS channel#104, i_brand_id#7, i_class_id#8, i_category_id#9, sales#61, number_sales#62]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#61, number_sales#62, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#103]

(140) ReusedExchange [Reuses operator id: 124]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#105, isEmpty#106, count#107]

(141) HashAggregate [codegen id : 212]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#105, isEmpty#106, count#107]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#108, count(1)#109]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#108 AS sales#77, count(1)#109 AS number_sales#78, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#108 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#110]

(142) Filter [codegen id : 212]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#77, number_sales#78, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#110]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#110) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#110 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(143) Project [codegen id : 212]
Output [6]: [web AS channel#111, i_brand_id#7, i_class_id#8, i_category_id#9, sales#77, number_sales#78]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#77, number_sales#78, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#110]

(144) Union

(145) HashAggregate [codegen id : 213]
Input [6]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44]
Keys [4]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(sales#43), partial_sum(number_sales#44)]
Aggregate Attributes [3]: [sum#112, isEmpty#113, sum#114]
Results [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#115, isEmpty#116, sum#117]

(146) Exchange
Input [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#115, isEmpty#116, sum#117]
Arguments: hashpartitioning(channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#118]

(147) HashAggregate [codegen id : 214]
Input [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#115, isEmpty#116, sum#117]
Keys [4]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#43), sum(number_sales#44)]
Aggregate Attributes [2]: [sum(sales#43)#119, sum(number_sales#44)#120]
Results [5]: [channel#48, i_brand_id#7, i_class_id#8, sum(sales#43)#119 AS sum_sales#90, sum(number_sales#44)#120 AS number_sales#91]

(148) HashAggregate [codegen id : 214]
Input [5]: [channel#48, i_brand_id#7, i_class_id#8, sum_sales#90, number_sales#91]
Keys [3]: [channel#48, i_brand_id#7, i_class_id#8]
Functions [2]: [partial_sum(sum_sales#90), partial_sum(number_sales#91)]
Aggregate Attributes [3]: [sum#121, isEmpty#122, sum#123]
Results [6]: [channel#48, i_brand_id#7, i_class_id#8, sum#124, isEmpty#125, sum#126]

(149) Exchange
Input [6]: [channel#48, i_brand_id#7, i_class_id#8, sum#124, isEmpty#125, sum#126]
Arguments: hashpartitioning(channel#48, i_brand_id#7, i_class_id#8, 5), ENSURE_REQUIREMENTS, [id=#127]

(150) HashAggregate [codegen id : 215]
Input [6]: [channel#48, i_brand_id#7, i_class_id#8, sum#124, isEmpty#125, sum#126]
Keys [3]: [channel#48, i_brand_id#7, i_class_id#8]
Functions [2]: [sum(sum_sales#90), sum(number_sales#91)]
Aggregate Attributes [2]: [sum(sum_sales#90)#128, sum(number_sales#91)#129]
Results [6]: [channel#48, i_brand_id#7, i_class_id#8, null AS i_category_id#130, sum(sum_sales#90)#128 AS sum(sum_sales)#131, sum(number_sales#91)#129 AS sum(number_sales)#132]

(151) ReusedExchange [Reuses operator id: 86]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#133, isEmpty#134, count#135]

(152) HashAggregate [codegen id : 250]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#133, isEmpty#134, count#135]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#136, count(1)#137]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#136 AS sales#43, count(1)#137 AS number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#136 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#138]

(153) Filter [codegen id : 250]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#138]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#138) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#138 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(154) Project [codegen id : 250]
Output [6]: [store AS channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#138]

(155) ReusedExchange [Reuses operator id: 105]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#139, isEmpty#140, count#141]

(156) HashAggregate [codegen id : 285]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#139, isEmpty#140, count#141]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#142, count(1)#143]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#142 AS sales#61, count(1)#143 AS number_sales#62, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#142 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#144]

(157) Filter [codegen id : 285]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#61, number_sales#62, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#144]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#144) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#144 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(158) Project [codegen id : 285]
Output [6]: [catalog AS channel#145, i_brand_id#7, i_class_id#8, i_category_id#9, sales#61, number_sales#62]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#61, number_sales#62, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#144]

(159) ReusedExchange [Reuses operator id: 124]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#146, isEmpty#147, count#148]

(160) HashAggregate [codegen id : 320]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#146, isEmpty#147, count#148]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#149, count(1)#150]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#149 AS sales#77, count(1)#150 AS number_sales#78, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#149 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#151]

(161) Filter [codegen id : 320]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#77, number_sales#78, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#151]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#151) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#151 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(162) Project [codegen id : 320]
Output [6]: [web AS channel#152, i_brand_id#7, i_class_id#8, i_category_id#9, sales#77, number_sales#78]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#77, number_sales#78, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#151]

(163) Union

(164) HashAggregate [codegen id : 321]
Input [6]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44]
Keys [4]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(sales#43), partial_sum(number_sales#44)]
Aggregate Attributes [3]: [sum#153, isEmpty#154, sum#155]
Results [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#156, isEmpty#157, sum#158]

(165) Exchange
Input [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#156, isEmpty#157, sum#158]
Arguments: hashpartitioning(channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#159]

(166) HashAggregate [codegen id : 322]
Input [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#156, isEmpty#157, sum#158]
Keys [4]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#43), sum(number_sales#44)]
Aggregate Attributes [2]: [sum(sales#43)#160, sum(number_sales#44)#161]
Results [4]: [channel#48, i_brand_id#7, sum(sales#43)#160 AS sum_sales#90, sum(number_sales#44)#161 AS number_sales#91]

(167) HashAggregate [codegen id : 322]
Input [4]: [channel#48, i_brand_id#7, sum_sales#90, number_sales#91]
Keys [2]: [channel#48, i_brand_id#7]
Functions [2]: [partial_sum(sum_sales#90), partial_sum(number_sales#91)]
Aggregate Attributes [3]: [sum#162, isEmpty#163, sum#164]
Results [5]: [channel#48, i_brand_id#7, sum#165, isEmpty#166, sum#167]

(168) Exchange
Input [5]: [channel#48, i_brand_id#7, sum#165, isEmpty#166, sum#167]
Arguments: hashpartitioning(channel#48, i_brand_id#7, 5), ENSURE_REQUIREMENTS, [id=#168]

(169) HashAggregate [codegen id : 323]
Input [5]: [channel#48, i_brand_id#7, sum#165, isEmpty#166, sum#167]
Keys [2]: [channel#48, i_brand_id#7]
Functions [2]: [sum(sum_sales#90), sum(number_sales#91)]
Aggregate Attributes [2]: [sum(sum_sales#90)#169, sum(number_sales#91)#170]
Results [6]: [channel#48, i_brand_id#7, null AS i_class_id#171, null AS i_category_id#172, sum(sum_sales#90)#169 AS sum(sum_sales)#173, sum(number_sales#91)#170 AS sum(number_sales)#174]

(170) ReusedExchange [Reuses operator id: 86]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#175, isEmpty#176, count#177]

(171) HashAggregate [codegen id : 358]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#175, isEmpty#176, count#177]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#178, count(1)#179]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#178 AS sales#43, count(1)#179 AS number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#178 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#180]

(172) Filter [codegen id : 358]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#180]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#180) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#180 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(173) Project [codegen id : 358]
Output [6]: [store AS channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#180]

(174) ReusedExchange [Reuses operator id: 105]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#181, isEmpty#182, count#183]

(175) HashAggregate [codegen id : 393]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#181, isEmpty#182, count#183]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#184, count(1)#185]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#184 AS sales#61, count(1)#185 AS number_sales#62, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#184 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#186]

(176) Filter [codegen id : 393]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#61, number_sales#62, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#186]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#186) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#186 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(177) Project [codegen id : 393]
Output [6]: [catalog AS channel#187, i_brand_id#7, i_class_id#8, i_category_id#9, sales#61, number_sales#62]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#61, number_sales#62, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#186]

(178) ReusedExchange [Reuses operator id: 124]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#188, isEmpty#189, count#190]

(179) HashAggregate [codegen id : 428]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#188, isEmpty#189, count#190]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#191, count(1)#192]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#191 AS sales#77, count(1)#192 AS number_sales#78, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#191 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#193]

(180) Filter [codegen id : 428]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#77, number_sales#78, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#193]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#193) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#193 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(181) Project [codegen id : 428]
Output [6]: [web AS channel#194, i_brand_id#7, i_class_id#8, i_category_id#9, sales#77, number_sales#78]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#77, number_sales#78, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#193]

(182) Union

(183) HashAggregate [codegen id : 429]
Input [6]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44]
Keys [4]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(sales#43), partial_sum(number_sales#44)]
Aggregate Attributes [3]: [sum#195, isEmpty#196, sum#197]
Results [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#198, isEmpty#199, sum#200]

(184) Exchange
Input [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#198, isEmpty#199, sum#200]
Arguments: hashpartitioning(channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#201]

(185) HashAggregate [codegen id : 430]
Input [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#198, isEmpty#199, sum#200]
Keys [4]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#43), sum(number_sales#44)]
Aggregate Attributes [2]: [sum(sales#43)#202, sum(number_sales#44)#203]
Results [3]: [channel#48, sum(sales#43)#202 AS sum_sales#90, sum(number_sales#44)#203 AS number_sales#91]

(186) HashAggregate [codegen id : 430]
Input [3]: [channel#48, sum_sales#90, number_sales#91]
Keys [1]: [channel#48]
Functions [2]: [partial_sum(sum_sales#90), partial_sum(number_sales#91)]
Aggregate Attributes [3]: [sum#204, isEmpty#205, sum#206]
Results [4]: [channel#48, sum#207, isEmpty#208, sum#209]

(187) Exchange
Input [4]: [channel#48, sum#207, isEmpty#208, sum#209]
Arguments: hashpartitioning(channel#48, 5), ENSURE_REQUIREMENTS, [id=#210]

(188) HashAggregate [codegen id : 431]
Input [4]: [channel#48, sum#207, isEmpty#208, sum#209]
Keys [1]: [channel#48]
Functions [2]: [sum(sum_sales#90), sum(number_sales#91)]
Aggregate Attributes [2]: [sum(sum_sales#90)#211, sum(number_sales#91)#212]
Results [6]: [channel#48, null AS i_brand_id#213, null AS i_class_id#214, null AS i_category_id#215, sum(sum_sales#90)#211 AS sum(sum_sales)#216, sum(number_sales#91)#212 AS sum(number_sales)#217]

(189) ReusedExchange [Reuses operator id: 86]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#218, isEmpty#219, count#220]

(190) HashAggregate [codegen id : 466]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#218, isEmpty#219, count#220]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#221, count(1)#222]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#221 AS sales#43, count(1)#222 AS number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#221 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#223]

(191) Filter [codegen id : 466]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#223]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#223) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#223 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(192) Project [codegen id : 466]
Output [6]: [store AS channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#223]

(193) ReusedExchange [Reuses operator id: 105]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#224, isEmpty#225, count#226]

(194) HashAggregate [codegen id : 501]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#224, isEmpty#225, count#226]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#227, count(1)#228]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#227 AS sales#61, count(1)#228 AS number_sales#62, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#227 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#229]

(195) Filter [codegen id : 501]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#61, number_sales#62, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#229]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#229) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#229 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(196) Project [codegen id : 501]
Output [6]: [catalog AS channel#230, i_brand_id#7, i_class_id#8, i_category_id#9, sales#61, number_sales#62]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#61, number_sales#62, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#229]

(197) ReusedExchange [Reuses operator id: 124]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#231, isEmpty#232, count#233]

(198) HashAggregate [codegen id : 536]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#231, isEmpty#232, count#233]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#234, count(1)#235]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#234 AS sales#77, count(1)#235 AS number_sales#78, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#234 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#236]

(199) Filter [codegen id : 536]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#77, number_sales#78, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#236]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#236) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#236 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(200) Project [codegen id : 536]
Output [6]: [web AS channel#237, i_brand_id#7, i_class_id#8, i_category_id#9, sales#77, number_sales#78]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#77, number_sales#78, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#236]

(201) Union

(202) HashAggregate [codegen id : 537]
Input [6]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44]
Keys [4]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(sales#43), partial_sum(number_sales#44)]
Aggregate Attributes [3]: [sum#238, isEmpty#239, sum#240]
Results [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#241, isEmpty#242, sum#243]

(203) Exchange
Input [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#241, isEmpty#242, sum#243]
Arguments: hashpartitioning(channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#244]

(204) HashAggregate [codegen id : 538]
Input [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#241, isEmpty#242, sum#243]
Keys [4]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#43), sum(number_sales#44)]
Aggregate Attributes [2]: [sum(sales#43)#245, sum(number_sales#44)#246]
Results [2]: [sum(sales#43)#245 AS sum_sales#90, sum(number_sales#44)#246 AS number_sales#91]

(205) HashAggregate [codegen id : 538]
Input [2]: [sum_sales#90, number_sales#91]
Keys: []
Functions [2]: [partial_sum(sum_sales#90), partial_sum(number_sales#91)]
Aggregate Attributes [3]: [sum#247, isEmpty#248, sum#249]
Results [3]: [sum#250, isEmpty#251, sum#252]

(206) Exchange
Input [3]: [sum#250, isEmpty#251, sum#252]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#253]

(207) HashAggregate [codegen id : 539]
Input [3]: [sum#250, isEmpty#251, sum#252]
Keys: []
Functions [2]: [sum(sum_sales#90), sum(number_sales#91)]
Aggregate Attributes [2]: [sum(sum_sales#90)#254, sum(number_sales#91)#255]
Results [6]: [null AS channel#256, null AS i_brand_id#257, null AS i_class_id#258, null AS i_category_id#259, sum(sum_sales#90)#254 AS sum(sum_sales)#260, sum(number_sales#91)#255 AS sum(number_sales)#261]

(208) Union

(209) HashAggregate [codegen id : 540]
Input [6]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#90, number_sales#91]
Keys [6]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#90, number_sales#91]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#90, number_sales#91]

(210) Exchange
Input [6]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#90, number_sales#91]
Arguments: hashpartitioning(channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#90, number_sales#91, 5), ENSURE_REQUIREMENTS, [id=#262]

(211) HashAggregate [codegen id : 541]
Input [6]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#90, number_sales#91]
Keys [6]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#90, number_sales#91]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#90, number_sales#91]

(212) TakeOrderedAndProject
Input [6]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#90, number_sales#91]
Arguments: 100, [channel#48 ASC NULLS FIRST, i_brand_id#7 ASC NULLS FIRST, i_class_id#8 ASC NULLS FIRST, i_category_id#9 ASC NULLS FIRST], [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#90, number_sales#91]

===== Subqueries =====

Subquery:1 Hosting operator id = 88 Hosting Expression = Subquery scalar-subquery#46, [id=#47]
* HashAggregate (242)
+- Exchange (241)
   +- * HashAggregate (240)
      +- Union (239)
         :- * Project (222)
         :  +- * BroadcastHashJoin Inner BuildRight (221)
         :     :- * Filter (215)
         :     :  +- * ColumnarToRow (214)
         :     :     +- Scan parquet default.store_sales (213)
         :     +- BroadcastExchange (220)
         :        +- * Project (219)
         :           +- * Filter (218)
         :              +- * ColumnarToRow (217)
         :                 +- Scan parquet default.date_dim (216)
         :- * Project (232)
         :  +- * BroadcastHashJoin Inner BuildRight (231)
         :     :- * Filter (225)
         :     :  +- * ColumnarToRow (224)
         :     :     +- Scan parquet default.catalog_sales (223)
         :     +- BroadcastExchange (230)
         :        +- * Project (229)
         :           +- * Filter (228)
         :              +- * ColumnarToRow (227)
         :                 +- Scan parquet default.date_dim (226)
         +- * Project (238)
            +- * BroadcastHashJoin Inner BuildRight (237)
               :- * Filter (235)
               :  +- * ColumnarToRow (234)
               :     +- Scan parquet default.web_sales (233)
               +- ReusedExchange (236)


(213) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(214) ColumnarToRow [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]

(215) Filter [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Condition : isnotnull(ss_sold_date_sk#1)

(216) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(217) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]

(218) Filter [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1999)) AND (d_year#11 <= 2001)) AND isnotnull(d_date_sk#10))

(219) Project [codegen id : 1]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(220) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#263]

(221) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(222) Project [codegen id : 2]
Output [2]: [ss_quantity#3 AS quantity#264, ss_list_price#4 AS list_price#265]
Input [4]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, d_date_sk#10]

(223) Scan parquet default.catalog_sales
Output [3]: [cs_sold_date_sk#18, cs_quantity#49, cs_list_price#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(224) ColumnarToRow [codegen id : 4]
Input [3]: [cs_sold_date_sk#18, cs_quantity#49, cs_list_price#50]

(225) Filter [codegen id : 4]
Input [3]: [cs_sold_date_sk#18, cs_quantity#49, cs_list_price#50]
Condition : isnotnull(cs_sold_date_sk#18)

(226) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(227) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]

(228) Filter [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1998)) AND (d_year#11 <= 2000)) AND isnotnull(d_date_sk#10))

(229) Project [codegen id : 3]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(230) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#266]

(231) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#10]
Join condition: None

(232) Project [codegen id : 4]
Output [2]: [cs_quantity#49 AS quantity#267, cs_list_price#50 AS list_price#268]
Input [4]: [cs_sold_date_sk#18, cs_quantity#49, cs_list_price#50, d_date_sk#10]

(233) Scan parquet default.web_sales
Output [3]: [ws_sold_date_sk#23, ws_quantity#65, ws_list_price#66]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(234) ColumnarToRow [codegen id : 6]
Input [3]: [ws_sold_date_sk#23, ws_quantity#65, ws_list_price#66]

(235) Filter [codegen id : 6]
Input [3]: [ws_sold_date_sk#23, ws_quantity#65, ws_list_price#66]
Condition : isnotnull(ws_sold_date_sk#23)

(236) ReusedExchange [Reuses operator id: 230]
Output [1]: [d_date_sk#10]

(237) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#23]
Right keys [1]: [d_date_sk#10]
Join condition: None

(238) Project [codegen id : 6]
Output [2]: [ws_quantity#65 AS quantity#269, ws_list_price#66 AS list_price#270]
Input [4]: [ws_sold_date_sk#23, ws_quantity#65, ws_list_price#66, d_date_sk#10]

(239) Union

(240) HashAggregate [codegen id : 7]
Input [2]: [quantity#264, list_price#265]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#264 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#265 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#271, count#272]
Results [2]: [sum#273, count#274]

(241) Exchange
Input [2]: [sum#273, count#274]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#275]

(242) HashAggregate [codegen id : 8]
Input [2]: [sum#273, count#274]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#264 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#265 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#264 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#265 as decimal(12,2)))), DecimalType(18,2), true))#276]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#264 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#265 as decimal(12,2)))), DecimalType(18,2), true))#276 AS average_sales#277]

Subquery:2 Hosting operator id = 107 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:3 Hosting operator id = 126 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:4 Hosting operator id = 134 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:5 Hosting operator id = 138 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:6 Hosting operator id = 142 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:7 Hosting operator id = 153 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:8 Hosting operator id = 157 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:9 Hosting operator id = 161 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:10 Hosting operator id = 172 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:11 Hosting operator id = 176 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:12 Hosting operator id = 180 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:13 Hosting operator id = 191 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:14 Hosting operator id = 195 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:15 Hosting operator id = 199 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]


