== Physical Plan ==
TakeOrderedAndProject (226)
+- * HashAggregate (225)
   +- Exchange (224)
      +- * HashAggregate (223)
         +- Union (222)
            :- * HashAggregate (145)
            :  +- Exchange (144)
            :     +- * HashAggregate (143)
            :        +- Union (142)
            :           :- * Project (93)
            :           :  +- * Filter (92)
            :           :     +- * HashAggregate (91)
            :           :        +- Exchange (90)
            :           :           +- * HashAggregate (89)
            :           :              +- * Project (88)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (87)
            :           :                    :- * Project (81)
            :           :                    :  +- * BroadcastHashJoin Inner BuildLeft (80)
            :           :                    :     :- BroadcastExchange (71)
            :           :                    :     :  +- SortMergeJoin LeftSemi (70)
            :           :                    :     :     :- * Sort (5)
            :           :                    :     :     :  +- Exchange (4)
            :           :                    :     :     :     +- * Filter (3)
            :           :                    :     :     :        +- * ColumnarToRow (2)
            :           :                    :     :     :           +- Scan parquet default.store_sales (1)
            :           :                    :     :     +- * Sort (69)
            :           :                    :     :        +- Exchange (68)
            :           :                    :     :           +- * Project (67)
            :           :                    :     :              +- * BroadcastHashJoin Inner BuildLeft (66)
            :           :                    :     :                 :- BroadcastExchange (9)
            :           :                    :     :                 :  +- * Filter (8)
            :           :                    :     :                 :     +- * ColumnarToRow (7)
            :           :                    :     :                 :        +- Scan parquet default.item (6)
            :           :                    :     :                 +- * HashAggregate (65)
            :           :                    :     :                    +- Exchange (64)
            :           :                    :     :                       +- * HashAggregate (63)
            :           :                    :     :                          +- SortMergeJoin LeftSemi (62)
            :           :                    :     :                             :- * Sort (47)
            :           :                    :     :                             :  +- Exchange (46)
            :           :                    :     :                             :     +- * HashAggregate (45)
            :           :                    :     :                             :        +- Exchange (44)
            :           :                    :     :                             :           +- * HashAggregate (43)
            :           :                    :     :                             :              +- SortMergeJoin LeftSemi (42)
            :           :                    :     :                             :                 :- * Sort (27)
            :           :                    :     :                             :                 :  +- Exchange (26)
            :           :                    :     :                             :                 :     +- * Project (25)
            :           :                    :     :                             :                 :        +- * BroadcastHashJoin Inner BuildRight (24)
            :           :                    :     :                             :                 :           :- * Project (18)
            :           :                    :     :                             :                 :           :  +- * BroadcastHashJoin Inner BuildLeft (17)
            :           :                    :     :                             :                 :           :     :- BroadcastExchange (13)
            :           :                    :     :                             :                 :           :     :  +- * Filter (12)
            :           :                    :     :                             :                 :           :     :     +- * ColumnarToRow (11)
            :           :                    :     :                             :                 :           :     :        +- Scan parquet default.store_sales (10)
            :           :                    :     :                             :                 :           :     +- * Filter (16)
            :           :                    :     :                             :                 :           :        +- * ColumnarToRow (15)
            :           :                    :     :                             :                 :           :           +- Scan parquet default.item (14)
            :           :                    :     :                             :                 :           +- BroadcastExchange (23)
            :           :                    :     :                             :                 :              +- * Project (22)
            :           :                    :     :                             :                 :                 +- * Filter (21)
            :           :                    :     :                             :                 :                    +- * ColumnarToRow (20)
            :           :                    :     :                             :                 :                       +- Scan parquet default.date_dim (19)
            :           :                    :     :                             :                 +- * Sort (41)
            :           :                    :     :                             :                    +- Exchange (40)
            :           :                    :     :                             :                       +- * Project (39)
            :           :                    :     :                             :                          +- * BroadcastHashJoin Inner BuildRight (38)
            :           :                    :     :                             :                             :- * Project (36)
            :           :                    :     :                             :                             :  +- * BroadcastHashJoin Inner BuildLeft (35)
            :           :                    :     :                             :                             :     :- BroadcastExchange (31)
            :           :                    :     :                             :                             :     :  +- * Filter (30)
            :           :                    :     :                             :                             :     :     +- * ColumnarToRow (29)
            :           :                    :     :                             :                             :     :        +- Scan parquet default.catalog_sales (28)
            :           :                    :     :                             :                             :     +- * Filter (34)
            :           :                    :     :                             :                             :        +- * ColumnarToRow (33)
            :           :                    :     :                             :                             :           +- Scan parquet default.item (32)
            :           :                    :     :                             :                             +- ReusedExchange (37)
            :           :                    :     :                             +- * Sort (61)
            :           :                    :     :                                +- Exchange (60)
            :           :                    :     :                                   +- * Project (59)
            :           :                    :     :                                      +- * BroadcastHashJoin Inner BuildRight (58)
            :           :                    :     :                                         :- * Project (56)
            :           :                    :     :                                         :  +- * BroadcastHashJoin Inner BuildLeft (55)
            :           :                    :     :                                         :     :- BroadcastExchange (51)
            :           :                    :     :                                         :     :  +- * Filter (50)
            :           :                    :     :                                         :     :     +- * ColumnarToRow (49)
            :           :                    :     :                                         :     :        +- Scan parquet default.web_sales (48)
            :           :                    :     :                                         :     +- * Filter (54)
            :           :                    :     :                                         :        +- * ColumnarToRow (53)
            :           :                    :     :                                         :           +- Scan parquet default.item (52)
            :           :                    :     :                                         +- ReusedExchange (57)
            :           :                    :     +- SortMergeJoin LeftSemi (79)
            :           :                    :        :- * Sort (76)
            :           :                    :        :  +- Exchange (75)
            :           :                    :        :     +- * Filter (74)
            :           :                    :        :        +- * ColumnarToRow (73)
            :           :                    :        :           +- Scan parquet default.item (72)
            :           :                    :        +- * Sort (78)
            :           :                    :           +- ReusedExchange (77)
            :           :                    +- BroadcastExchange (86)
            :           :                       +- * Project (85)
            :           :                          +- * Filter (84)
            :           :                             +- * ColumnarToRow (83)
            :           :                                +- Scan parquet default.date_dim (82)
            :           :- * Project (117)
            :           :  +- * Filter (116)
            :           :     +- * HashAggregate (115)
            :           :        +- Exchange (114)
            :           :           +- * HashAggregate (113)
            :           :              +- * Project (112)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (111)
            :           :                    :- * Project (109)
            :           :                    :  +- * BroadcastHashJoin Inner BuildLeft (108)
            :           :                    :     :- BroadcastExchange (102)
            :           :                    :     :  +- SortMergeJoin LeftSemi (101)
            :           :                    :     :     :- * Sort (98)
            :           :                    :     :     :  +- Exchange (97)
            :           :                    :     :     :     +- * Filter (96)
            :           :                    :     :     :        +- * ColumnarToRow (95)
            :           :                    :     :     :           +- Scan parquet default.catalog_sales (94)
            :           :                    :     :     +- * Sort (100)
            :           :                    :     :        +- ReusedExchange (99)
            :           :                    :     +- SortMergeJoin LeftSemi (107)
            :           :                    :        :- * Sort (104)
            :           :                    :        :  +- ReusedExchange (103)
            :           :                    :        +- * Sort (106)
            :           :                    :           +- ReusedExchange (105)
            :           :                    +- ReusedExchange (110)
            :           +- * Project (141)
            :              +- * Filter (140)
            :                 +- * HashAggregate (139)
            :                    +- Exchange (138)
            :                       +- * HashAggregate (137)
            :                          +- * Project (136)
            :                             +- * BroadcastHashJoin Inner BuildRight (135)
            :                                :- * Project (133)
            :                                :  +- * BroadcastHashJoin Inner BuildLeft (132)
            :                                :     :- BroadcastExchange (126)
            :                                :     :  +- SortMergeJoin LeftSemi (125)
            :                                :     :     :- * Sort (122)
            :                                :     :     :  +- Exchange (121)
            :                                :     :     :     +- * Filter (120)
            :                                :     :     :        +- * ColumnarToRow (119)
            :                                :     :     :           +- Scan parquet default.web_sales (118)
            :                                :     :     +- * Sort (124)
            :                                :     :        +- ReusedExchange (123)
            :                                :     +- SortMergeJoin LeftSemi (131)
            :                                :        :- * Sort (128)
            :                                :        :  +- ReusedExchange (127)
            :                                :        +- * Sort (130)
            :                                :           +- ReusedExchange (129)
            :                                +- ReusedExchange (134)
            :- * HashAggregate (164)
            :  +- Exchange (163)
            :     +- * HashAggregate (162)
            :        +- * HashAggregate (161)
            :           +- Exchange (160)
            :              +- * HashAggregate (159)
            :                 +- Union (158)
            :                    :- * Project (149)
            :                    :  +- * Filter (148)
            :                    :     +- * HashAggregate (147)
            :                    :        +- ReusedExchange (146)
            :                    :- * Project (153)
            :                    :  +- * Filter (152)
            :                    :     +- * HashAggregate (151)
            :                    :        +- ReusedExchange (150)
            :                    +- * Project (157)
            :                       +- * Filter (156)
            :                          +- * HashAggregate (155)
            :                             +- ReusedExchange (154)
            :- * HashAggregate (183)
            :  +- Exchange (182)
            :     +- * HashAggregate (181)
            :        +- * HashAggregate (180)
            :           +- Exchange (179)
            :              +- * HashAggregate (178)
            :                 +- Union (177)
            :                    :- * Project (168)
            :                    :  +- * Filter (167)
            :                    :     +- * HashAggregate (166)
            :                    :        +- ReusedExchange (165)
            :                    :- * Project (172)
            :                    :  +- * Filter (171)
            :                    :     +- * HashAggregate (170)
            :                    :        +- ReusedExchange (169)
            :                    +- * Project (176)
            :                       +- * Filter (175)
            :                          +- * HashAggregate (174)
            :                             +- ReusedExchange (173)
            :- * HashAggregate (202)
            :  +- Exchange (201)
            :     +- * HashAggregate (200)
            :        +- * HashAggregate (199)
            :           +- Exchange (198)
            :              +- * HashAggregate (197)
            :                 +- Union (196)
            :                    :- * Project (187)
            :                    :  +- * Filter (186)
            :                    :     +- * HashAggregate (185)
            :                    :        +- ReusedExchange (184)
            :                    :- * Project (191)
            :                    :  +- * Filter (190)
            :                    :     +- * HashAggregate (189)
            :                    :        +- ReusedExchange (188)
            :                    +- * Project (195)
            :                       +- * Filter (194)
            :                          +- * HashAggregate (193)
            :                             +- ReusedExchange (192)
            +- * HashAggregate (221)
               +- Exchange (220)
                  +- * HashAggregate (219)
                     +- * HashAggregate (218)
                        +- Exchange (217)
                           +- * HashAggregate (216)
                              +- Union (215)
                                 :- * Project (206)
                                 :  +- * Filter (205)
                                 :     +- * HashAggregate (204)
                                 :        +- ReusedExchange (203)
                                 :- * Project (210)
                                 :  +- * Filter (209)
                                 :     +- * HashAggregate (208)
                                 :        +- ReusedExchange (207)
                                 +- * Project (214)
                                    +- * Filter (213)
                                       +- * HashAggregate (212)
                                          +- ReusedExchange (211)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 3]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(8) Filter [codegen id : 3]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(9) BroadcastExchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(input[1, int, false], input[2, int, false], input[3, int, false]),false), [id=#11]

(10) Scan parquet default.store_sales
Output [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(11) ColumnarToRow [codegen id : 4]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]

(12) Filter [codegen id : 4]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(13) BroadcastExchange
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13]

(14) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(15) ColumnarToRow
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(16) Filter
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : (((isnotnull(i_item_sk#7) AND isnotnull(i_brand_id#8)) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(17) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join condition: None

(18) Project [codegen id : 6]
Output [4]: [ss_sold_date_sk#4, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [6]: [ss_item_sk#1, ss_sold_date_sk#4, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(19) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(20) ColumnarToRow [codegen id : 5]
Input [2]: [d_date_sk#14, d_year#15]

(21) Filter [codegen id : 5]
Input [2]: [d_date_sk#14, d_year#15]
Condition : (((isnotnull(d_year#15) AND (d_year#15 >= 1999)) AND (d_year#15 <= 2001)) AND isnotnull(d_date_sk#14))

(22) Project [codegen id : 5]
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#15]

(23) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(24) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#14]
Join condition: None

(25) Project [codegen id : 6]
Output [3]: [i_brand_id#8 AS brand_id#17, i_class_id#9 AS class_id#18, i_category_id#10 AS category_id#19]
Input [5]: [ss_sold_date_sk#4, i_brand_id#8, i_class_id#9, i_category_id#10, d_date_sk#14]

(26) Exchange
Input [3]: [brand_id#17, class_id#18, category_id#19]
Arguments: hashpartitioning(coalesce(brand_id#17, 0), isnull(brand_id#17), coalesce(class_id#18, 0), isnull(class_id#18), coalesce(category_id#19, 0), isnull(category_id#19), 5), ENSURE_REQUIREMENTS, [id=#20]

(27) Sort [codegen id : 7]
Input [3]: [brand_id#17, class_id#18, category_id#19]
Arguments: [coalesce(brand_id#17, 0) ASC NULLS FIRST, isnull(brand_id#17) ASC NULLS FIRST, coalesce(class_id#18, 0) ASC NULLS FIRST, isnull(class_id#18) ASC NULLS FIRST, coalesce(category_id#19, 0) ASC NULLS FIRST, isnull(category_id#19) ASC NULLS FIRST], false, 0

(28) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#21, cs_sold_date_sk#22]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#22), dynamicpruningexpression(cs_sold_date_sk#22 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(29) ColumnarToRow [codegen id : 8]
Input [2]: [cs_item_sk#21, cs_sold_date_sk#22]

(30) Filter [codegen id : 8]
Input [2]: [cs_item_sk#21, cs_sold_date_sk#22]
Condition : isnotnull(cs_item_sk#21)

(31) BroadcastExchange
Input [2]: [cs_item_sk#21, cs_sold_date_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#23]

(32) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(33) ColumnarToRow
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(34) Filter
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : isnotnull(i_item_sk#7)

(35) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_item_sk#21]
Right keys [1]: [i_item_sk#7]
Join condition: None

(36) Project [codegen id : 10]
Output [4]: [cs_sold_date_sk#22, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [6]: [cs_item_sk#21, cs_sold_date_sk#22, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(37) ReusedExchange [Reuses operator id: 23]
Output [1]: [d_date_sk#14]

(38) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#22]
Right keys [1]: [d_date_sk#14]
Join condition: None

(39) Project [codegen id : 10]
Output [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Input [5]: [cs_sold_date_sk#22, i_brand_id#8, i_class_id#9, i_category_id#10, d_date_sk#14]

(40) Exchange
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10), 5), ENSURE_REQUIREMENTS, [id=#24]

(41) Sort [codegen id : 11]
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [coalesce(i_brand_id#8, 0) ASC NULLS FIRST, isnull(i_brand_id#8) ASC NULLS FIRST, coalesce(i_class_id#9, 0) ASC NULLS FIRST, isnull(i_class_id#9) ASC NULLS FIRST, coalesce(i_category_id#10, 0) ASC NULLS FIRST, isnull(i_category_id#10) ASC NULLS FIRST], false, 0

(42) SortMergeJoin
Left keys [6]: [coalesce(brand_id#17, 0), isnull(brand_id#17), coalesce(class_id#18, 0), isnull(class_id#18), coalesce(category_id#19, 0), isnull(category_id#19)]
Right keys [6]: [coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10)]
Join condition: None

(43) HashAggregate [codegen id : 12]
Input [3]: [brand_id#17, class_id#18, category_id#19]
Keys [3]: [brand_id#17, class_id#18, category_id#19]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#17, class_id#18, category_id#19]

(44) Exchange
Input [3]: [brand_id#17, class_id#18, category_id#19]
Arguments: hashpartitioning(brand_id#17, class_id#18, category_id#19, 5), ENSURE_REQUIREMENTS, [id=#25]

(45) HashAggregate [codegen id : 13]
Input [3]: [brand_id#17, class_id#18, category_id#19]
Keys [3]: [brand_id#17, class_id#18, category_id#19]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#17, class_id#18, category_id#19]

(46) Exchange
Input [3]: [brand_id#17, class_id#18, category_id#19]
Arguments: hashpartitioning(coalesce(brand_id#17, 0), isnull(brand_id#17), coalesce(class_id#18, 0), isnull(class_id#18), coalesce(category_id#19, 0), isnull(category_id#19), 5), ENSURE_REQUIREMENTS, [id=#26]

(47) Sort [codegen id : 14]
Input [3]: [brand_id#17, class_id#18, category_id#19]
Arguments: [coalesce(brand_id#17, 0) ASC NULLS FIRST, isnull(brand_id#17) ASC NULLS FIRST, coalesce(class_id#18, 0) ASC NULLS FIRST, isnull(class_id#18) ASC NULLS FIRST, coalesce(category_id#19, 0) ASC NULLS FIRST, isnull(category_id#19) ASC NULLS FIRST], false, 0

(48) Scan parquet default.web_sales
Output [2]: [ws_item_sk#27, ws_sold_date_sk#28]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#28), dynamicpruningexpression(ws_sold_date_sk#28 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(49) ColumnarToRow [codegen id : 15]
Input [2]: [ws_item_sk#27, ws_sold_date_sk#28]

(50) Filter [codegen id : 15]
Input [2]: [ws_item_sk#27, ws_sold_date_sk#28]
Condition : isnotnull(ws_item_sk#27)

(51) BroadcastExchange
Input [2]: [ws_item_sk#27, ws_sold_date_sk#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(52) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(53) ColumnarToRow
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(54) Filter
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : isnotnull(i_item_sk#7)

(55) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_item_sk#27]
Right keys [1]: [i_item_sk#7]
Join condition: None

(56) Project [codegen id : 17]
Output [4]: [ws_sold_date_sk#28, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [6]: [ws_item_sk#27, ws_sold_date_sk#28, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(57) ReusedExchange [Reuses operator id: 23]
Output [1]: [d_date_sk#14]

(58) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_sold_date_sk#28]
Right keys [1]: [d_date_sk#14]
Join condition: None

(59) Project [codegen id : 17]
Output [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Input [5]: [ws_sold_date_sk#28, i_brand_id#8, i_class_id#9, i_category_id#10, d_date_sk#14]

(60) Exchange
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10), 5), ENSURE_REQUIREMENTS, [id=#30]

(61) Sort [codegen id : 18]
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [coalesce(i_brand_id#8, 0) ASC NULLS FIRST, isnull(i_brand_id#8) ASC NULLS FIRST, coalesce(i_class_id#9, 0) ASC NULLS FIRST, isnull(i_class_id#9) ASC NULLS FIRST, coalesce(i_category_id#10, 0) ASC NULLS FIRST, isnull(i_category_id#10) ASC NULLS FIRST], false, 0

(62) SortMergeJoin
Left keys [6]: [coalesce(brand_id#17, 0), isnull(brand_id#17), coalesce(class_id#18, 0), isnull(class_id#18), coalesce(category_id#19, 0), isnull(category_id#19)]
Right keys [6]: [coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10)]
Join condition: None

(63) HashAggregate [codegen id : 19]
Input [3]: [brand_id#17, class_id#18, category_id#19]
Keys [3]: [brand_id#17, class_id#18, category_id#19]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#17, class_id#18, category_id#19]

(64) Exchange
Input [3]: [brand_id#17, class_id#18, category_id#19]
Arguments: hashpartitioning(brand_id#17, class_id#18, category_id#19, 5), ENSURE_REQUIREMENTS, [id=#31]

(65) HashAggregate
Input [3]: [brand_id#17, class_id#18, category_id#19]
Keys [3]: [brand_id#17, class_id#18, category_id#19]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#17, class_id#18, category_id#19]

(66) BroadcastHashJoin [codegen id : 20]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#17, class_id#18, category_id#19]
Join condition: None

(67) Project [codegen id : 20]
Output [1]: [i_item_sk#7 AS ss_item_sk#32]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#17, class_id#18, category_id#19]

(68) Exchange
Input [1]: [ss_item_sk#32]
Arguments: hashpartitioning(ss_item_sk#32, 5), ENSURE_REQUIREMENTS, [id=#33]

(69) Sort [codegen id : 21]
Input [1]: [ss_item_sk#32]
Arguments: [ss_item_sk#32 ASC NULLS FIRST], false, 0

(70) SortMergeJoin
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#32]
Join condition: None

(71) BroadcastExchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#34]

(72) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(73) ColumnarToRow [codegen id : 22]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(74) Filter [codegen id : 22]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : isnotnull(i_item_sk#7)

(75) Exchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(i_item_sk#7, 5), ENSURE_REQUIREMENTS, [id=#35]

(76) Sort [codegen id : 23]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [i_item_sk#7 ASC NULLS FIRST], false, 0

(77) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#32]

(78) Sort [codegen id : 42]
Input [1]: [ss_item_sk#32]
Arguments: [ss_item_sk#32 ASC NULLS FIRST], false, 0

(79) SortMergeJoin
Left keys [1]: [i_item_sk#7]
Right keys [1]: [ss_item_sk#32]
Join condition: None

(80) BroadcastHashJoin [codegen id : 44]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join condition: None

(81) Project [codegen id : 44]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(82) Scan parquet default.date_dim
Output [3]: [d_date_sk#14, d_year#15, d_moy#36]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(83) ColumnarToRow [codegen id : 43]
Input [3]: [d_date_sk#14, d_year#15, d_moy#36]

(84) Filter [codegen id : 43]
Input [3]: [d_date_sk#14, d_year#15, d_moy#36]
Condition : ((((isnotnull(d_year#15) AND isnotnull(d_moy#36)) AND (d_year#15 = 2000)) AND (d_moy#36 = 11)) AND isnotnull(d_date_sk#14))

(85) Project [codegen id : 43]
Output [1]: [d_date_sk#14]
Input [3]: [d_date_sk#14, d_year#15, d_moy#36]

(86) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#37]

(87) BroadcastHashJoin [codegen id : 44]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#14]
Join condition: None

(88) Project [codegen id : 44]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#8, i_class_id#9, i_category_id#10, d_date_sk#14]

(89) HashAggregate [codegen id : 44]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#38, isEmpty#39, count#40]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#41, isEmpty#42, count#43]

(90) Exchange
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#41, isEmpty#42, count#43]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#44]

(91) HashAggregate [codegen id : 45]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#41, isEmpty#42, count#43]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#45, count(1)#46]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#45 AS sales#47, count(1)#46 AS number_sales#48, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#45 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#49]

(92) Filter [codegen id : 45]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#47, number_sales#48, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#49]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#49) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#49 as decimal(32,6)) > cast(Subquery scalar-subquery#50, [id=#51] as decimal(32,6))))

(93) Project [codegen id : 45]
Output [6]: [store AS channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sales#47, number_sales#48]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#47, number_sales#48, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#49]

(94) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#21, cs_quantity#53, cs_list_price#54, cs_sold_date_sk#22]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#22), dynamicpruningexpression(cs_sold_date_sk#22 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(95) ColumnarToRow [codegen id : 46]
Input [4]: [cs_item_sk#21, cs_quantity#53, cs_list_price#54, cs_sold_date_sk#22]

(96) Filter [codegen id : 46]
Input [4]: [cs_item_sk#21, cs_quantity#53, cs_list_price#54, cs_sold_date_sk#22]
Condition : isnotnull(cs_item_sk#21)

(97) Exchange
Input [4]: [cs_item_sk#21, cs_quantity#53, cs_list_price#54, cs_sold_date_sk#22]
Arguments: hashpartitioning(cs_item_sk#21, 5), ENSURE_REQUIREMENTS, [id=#55]

(98) Sort [codegen id : 47]
Input [4]: [cs_item_sk#21, cs_quantity#53, cs_list_price#54, cs_sold_date_sk#22]
Arguments: [cs_item_sk#21 ASC NULLS FIRST], false, 0

(99) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#32]

(100) Sort [codegen id : 66]
Input [1]: [ss_item_sk#32]
Arguments: [ss_item_sk#32 ASC NULLS FIRST], false, 0

(101) SortMergeJoin
Left keys [1]: [cs_item_sk#21]
Right keys [1]: [ss_item_sk#32]
Join condition: None

(102) BroadcastExchange
Input [4]: [cs_item_sk#21, cs_quantity#53, cs_list_price#54, cs_sold_date_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#56]

(103) ReusedExchange [Reuses operator id: 75]
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(104) Sort [codegen id : 68]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [i_item_sk#7 ASC NULLS FIRST], false, 0

(105) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#32]

(106) Sort [codegen id : 87]
Input [1]: [ss_item_sk#32]
Arguments: [ss_item_sk#32 ASC NULLS FIRST], false, 0

(107) SortMergeJoin
Left keys [1]: [i_item_sk#7]
Right keys [1]: [ss_item_sk#32]
Join condition: None

(108) BroadcastHashJoin [codegen id : 89]
Left keys [1]: [cs_item_sk#21]
Right keys [1]: [i_item_sk#7]
Join condition: None

(109) Project [codegen id : 89]
Output [6]: [cs_quantity#53, cs_list_price#54, cs_sold_date_sk#22, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [8]: [cs_item_sk#21, cs_quantity#53, cs_list_price#54, cs_sold_date_sk#22, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(110) ReusedExchange [Reuses operator id: 86]
Output [1]: [d_date_sk#14]

(111) BroadcastHashJoin [codegen id : 89]
Left keys [1]: [cs_sold_date_sk#22]
Right keys [1]: [d_date_sk#14]
Join condition: None

(112) Project [codegen id : 89]
Output [5]: [cs_quantity#53, cs_list_price#54, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [7]: [cs_quantity#53, cs_list_price#54, cs_sold_date_sk#22, i_brand_id#8, i_class_id#9, i_category_id#10, d_date_sk#14]

(113) HashAggregate [codegen id : 89]
Input [5]: [cs_quantity#53, cs_list_price#54, i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#57, isEmpty#58, count#59]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#60, isEmpty#61, count#62]

(114) Exchange
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#60, isEmpty#61, count#62]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#63]

(115) HashAggregate [codegen id : 90]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#60, isEmpty#61, count#62]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#64, count(1)#65]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#64 AS sales#66, count(1)#65 AS number_sales#67, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#64 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#68]

(116) Filter [codegen id : 90]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#66, number_sales#67, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#68]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#68) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#68 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#50, [id=#51] as decimal(32,6))))

(117) Project [codegen id : 90]
Output [6]: [catalog AS channel#69, i_brand_id#8, i_class_id#9, i_category_id#10, sales#66, number_sales#67]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#66, number_sales#67, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#68]

(118) Scan parquet default.web_sales
Output [4]: [ws_item_sk#27, ws_quantity#70, ws_list_price#71, ws_sold_date_sk#28]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#28), dynamicpruningexpression(ws_sold_date_sk#28 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(119) ColumnarToRow [codegen id : 91]
Input [4]: [ws_item_sk#27, ws_quantity#70, ws_list_price#71, ws_sold_date_sk#28]

(120) Filter [codegen id : 91]
Input [4]: [ws_item_sk#27, ws_quantity#70, ws_list_price#71, ws_sold_date_sk#28]
Condition : isnotnull(ws_item_sk#27)

(121) Exchange
Input [4]: [ws_item_sk#27, ws_quantity#70, ws_list_price#71, ws_sold_date_sk#28]
Arguments: hashpartitioning(ws_item_sk#27, 5), ENSURE_REQUIREMENTS, [id=#72]

(122) Sort [codegen id : 92]
Input [4]: [ws_item_sk#27, ws_quantity#70, ws_list_price#71, ws_sold_date_sk#28]
Arguments: [ws_item_sk#27 ASC NULLS FIRST], false, 0

(123) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#32]

(124) Sort [codegen id : 111]
Input [1]: [ss_item_sk#32]
Arguments: [ss_item_sk#32 ASC NULLS FIRST], false, 0

(125) SortMergeJoin
Left keys [1]: [ws_item_sk#27]
Right keys [1]: [ss_item_sk#32]
Join condition: None

(126) BroadcastExchange
Input [4]: [ws_item_sk#27, ws_quantity#70, ws_list_price#71, ws_sold_date_sk#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#73]

(127) ReusedExchange [Reuses operator id: 75]
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(128) Sort [codegen id : 113]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [i_item_sk#7 ASC NULLS FIRST], false, 0

(129) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#32]

(130) Sort [codegen id : 132]
Input [1]: [ss_item_sk#32]
Arguments: [ss_item_sk#32 ASC NULLS FIRST], false, 0

(131) SortMergeJoin
Left keys [1]: [i_item_sk#7]
Right keys [1]: [ss_item_sk#32]
Join condition: None

(132) BroadcastHashJoin [codegen id : 134]
Left keys [1]: [ws_item_sk#27]
Right keys [1]: [i_item_sk#7]
Join condition: None

(133) Project [codegen id : 134]
Output [6]: [ws_quantity#70, ws_list_price#71, ws_sold_date_sk#28, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [8]: [ws_item_sk#27, ws_quantity#70, ws_list_price#71, ws_sold_date_sk#28, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(134) ReusedExchange [Reuses operator id: 86]
Output [1]: [d_date_sk#14]

(135) BroadcastHashJoin [codegen id : 134]
Left keys [1]: [ws_sold_date_sk#28]
Right keys [1]: [d_date_sk#14]
Join condition: None

(136) Project [codegen id : 134]
Output [5]: [ws_quantity#70, ws_list_price#71, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [7]: [ws_quantity#70, ws_list_price#71, ws_sold_date_sk#28, i_brand_id#8, i_class_id#9, i_category_id#10, d_date_sk#14]

(137) HashAggregate [codegen id : 134]
Input [5]: [ws_quantity#70, ws_list_price#71, i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#74, isEmpty#75, count#76]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#77, isEmpty#78, count#79]

(138) Exchange
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#77, isEmpty#78, count#79]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#80]

(139) HashAggregate [codegen id : 135]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#77, isEmpty#78, count#79]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#81, count(1)#82]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#81 AS sales#83, count(1)#82 AS number_sales#84, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#81 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#85]

(140) Filter [codegen id : 135]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#83, number_sales#84, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#85]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#85) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#85 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#50, [id=#51] as decimal(32,6))))

(141) Project [codegen id : 135]
Output [6]: [web AS channel#86, i_brand_id#8, i_class_id#9, i_category_id#10, sales#83, number_sales#84]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#83, number_sales#84, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#85]

(142) Union

(143) HashAggregate [codegen id : 136]
Input [6]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sales#47, number_sales#48]
Keys [4]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(sales#47), partial_sum(number_sales#48)]
Aggregate Attributes [3]: [sum#87, isEmpty#88, sum#89]
Results [7]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sum#90, isEmpty#91, sum#92]

(144) Exchange
Input [7]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sum#90, isEmpty#91, sum#92]
Arguments: hashpartitioning(channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#93]

(145) HashAggregate [codegen id : 137]
Input [7]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sum#90, isEmpty#91, sum#92]
Keys [4]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(sales#47), sum(number_sales#48)]
Aggregate Attributes [2]: [sum(sales#47)#94, sum(number_sales#48)#95]
Results [6]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sum(sales#47)#94 AS sum_sales#96, sum(number_sales#48)#95 AS number_sales#97]

(146) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#98, isEmpty#99, count#100]

(147) HashAggregate [codegen id : 182]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#98, isEmpty#99, count#100]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#101, count(1)#102]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#101 AS sales#47, count(1)#102 AS number_sales#48, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#101 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#103]

(148) Filter [codegen id : 182]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#47, number_sales#48, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#103]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#103) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#103 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#50, [id=#51] as decimal(32,6))))

(149) Project [codegen id : 182]
Output [6]: [store AS channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sales#47, number_sales#48]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#47, number_sales#48, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#103]

(150) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#104, isEmpty#105, count#106]

(151) HashAggregate [codegen id : 227]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#104, isEmpty#105, count#106]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#107, count(1)#108]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#107 AS sales#66, count(1)#108 AS number_sales#67, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#107 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#109]

(152) Filter [codegen id : 227]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#66, number_sales#67, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#109]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#109) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#109 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#50, [id=#51] as decimal(32,6))))

(153) Project [codegen id : 227]
Output [6]: [catalog AS channel#110, i_brand_id#8, i_class_id#9, i_category_id#10, sales#66, number_sales#67]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#66, number_sales#67, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#109]

(154) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#111, isEmpty#112, count#113]

(155) HashAggregate [codegen id : 272]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#111, isEmpty#112, count#113]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#114, count(1)#115]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#114 AS sales#83, count(1)#115 AS number_sales#84, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#114 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#116]

(156) Filter [codegen id : 272]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#83, number_sales#84, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#116]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#116) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#116 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#50, [id=#51] as decimal(32,6))))

(157) Project [codegen id : 272]
Output [6]: [web AS channel#117, i_brand_id#8, i_class_id#9, i_category_id#10, sales#83, number_sales#84]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#83, number_sales#84, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#116]

(158) Union

(159) HashAggregate [codegen id : 273]
Input [6]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sales#47, number_sales#48]
Keys [4]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(sales#47), partial_sum(number_sales#48)]
Aggregate Attributes [3]: [sum#118, isEmpty#119, sum#120]
Results [7]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sum#121, isEmpty#122, sum#123]

(160) Exchange
Input [7]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sum#121, isEmpty#122, sum#123]
Arguments: hashpartitioning(channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#124]

(161) HashAggregate [codegen id : 274]
Input [7]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sum#121, isEmpty#122, sum#123]
Keys [4]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(sales#47), sum(number_sales#48)]
Aggregate Attributes [2]: [sum(sales#47)#125, sum(number_sales#48)#126]
Results [5]: [channel#52, i_brand_id#8, i_class_id#9, sum(sales#47)#125 AS sum_sales#96, sum(number_sales#48)#126 AS number_sales#97]

(162) HashAggregate [codegen id : 274]
Input [5]: [channel#52, i_brand_id#8, i_class_id#9, sum_sales#96, number_sales#97]
Keys [3]: [channel#52, i_brand_id#8, i_class_id#9]
Functions [2]: [partial_sum(sum_sales#96), partial_sum(number_sales#97)]
Aggregate Attributes [3]: [sum#127, isEmpty#128, sum#129]
Results [6]: [channel#52, i_brand_id#8, i_class_id#9, sum#130, isEmpty#131, sum#132]

(163) Exchange
Input [6]: [channel#52, i_brand_id#8, i_class_id#9, sum#130, isEmpty#131, sum#132]
Arguments: hashpartitioning(channel#52, i_brand_id#8, i_class_id#9, 5), ENSURE_REQUIREMENTS, [id=#133]

(164) HashAggregate [codegen id : 275]
Input [6]: [channel#52, i_brand_id#8, i_class_id#9, sum#130, isEmpty#131, sum#132]
Keys [3]: [channel#52, i_brand_id#8, i_class_id#9]
Functions [2]: [sum(sum_sales#96), sum(number_sales#97)]
Aggregate Attributes [2]: [sum(sum_sales#96)#134, sum(number_sales#97)#135]
Results [6]: [channel#52, i_brand_id#8, i_class_id#9, null AS i_category_id#136, sum(sum_sales#96)#134 AS sum(sum_sales)#137, sum(number_sales#97)#135 AS sum(number_sales)#138]

(165) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#139, isEmpty#140, count#141]

(166) HashAggregate [codegen id : 320]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#139, isEmpty#140, count#141]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#142, count(1)#143]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#142 AS sales#47, count(1)#143 AS number_sales#48, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#142 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#144]

(167) Filter [codegen id : 320]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#47, number_sales#48, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#144]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#144) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#144 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#50, [id=#51] as decimal(32,6))))

(168) Project [codegen id : 320]
Output [6]: [store AS channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sales#47, number_sales#48]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#47, number_sales#48, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#144]

(169) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#145, isEmpty#146, count#147]

(170) HashAggregate [codegen id : 365]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#145, isEmpty#146, count#147]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#148, count(1)#149]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#148 AS sales#66, count(1)#149 AS number_sales#67, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#148 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#150]

(171) Filter [codegen id : 365]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#66, number_sales#67, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#150]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#150) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#150 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#50, [id=#51] as decimal(32,6))))

(172) Project [codegen id : 365]
Output [6]: [catalog AS channel#151, i_brand_id#8, i_class_id#9, i_category_id#10, sales#66, number_sales#67]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#66, number_sales#67, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#150]

(173) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#152, isEmpty#153, count#154]

(174) HashAggregate [codegen id : 410]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#152, isEmpty#153, count#154]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#155, count(1)#156]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#155 AS sales#83, count(1)#156 AS number_sales#84, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#155 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#157]

(175) Filter [codegen id : 410]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#83, number_sales#84, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#157]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#157) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#157 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#50, [id=#51] as decimal(32,6))))

(176) Project [codegen id : 410]
Output [6]: [web AS channel#158, i_brand_id#8, i_class_id#9, i_category_id#10, sales#83, number_sales#84]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#83, number_sales#84, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#157]

(177) Union

(178) HashAggregate [codegen id : 411]
Input [6]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sales#47, number_sales#48]
Keys [4]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(sales#47), partial_sum(number_sales#48)]
Aggregate Attributes [3]: [sum#159, isEmpty#160, sum#161]
Results [7]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sum#162, isEmpty#163, sum#164]

(179) Exchange
Input [7]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sum#162, isEmpty#163, sum#164]
Arguments: hashpartitioning(channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#165]

(180) HashAggregate [codegen id : 412]
Input [7]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sum#162, isEmpty#163, sum#164]
Keys [4]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(sales#47), sum(number_sales#48)]
Aggregate Attributes [2]: [sum(sales#47)#166, sum(number_sales#48)#167]
Results [4]: [channel#52, i_brand_id#8, sum(sales#47)#166 AS sum_sales#96, sum(number_sales#48)#167 AS number_sales#97]

(181) HashAggregate [codegen id : 412]
Input [4]: [channel#52, i_brand_id#8, sum_sales#96, number_sales#97]
Keys [2]: [channel#52, i_brand_id#8]
Functions [2]: [partial_sum(sum_sales#96), partial_sum(number_sales#97)]
Aggregate Attributes [3]: [sum#168, isEmpty#169, sum#170]
Results [5]: [channel#52, i_brand_id#8, sum#171, isEmpty#172, sum#173]

(182) Exchange
Input [5]: [channel#52, i_brand_id#8, sum#171, isEmpty#172, sum#173]
Arguments: hashpartitioning(channel#52, i_brand_id#8, 5), ENSURE_REQUIREMENTS, [id=#174]

(183) HashAggregate [codegen id : 413]
Input [5]: [channel#52, i_brand_id#8, sum#171, isEmpty#172, sum#173]
Keys [2]: [channel#52, i_brand_id#8]
Functions [2]: [sum(sum_sales#96), sum(number_sales#97)]
Aggregate Attributes [2]: [sum(sum_sales#96)#175, sum(number_sales#97)#176]
Results [6]: [channel#52, i_brand_id#8, null AS i_class_id#177, null AS i_category_id#178, sum(sum_sales#96)#175 AS sum(sum_sales)#179, sum(number_sales#97)#176 AS sum(number_sales)#180]

(184) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#181, isEmpty#182, count#183]

(185) HashAggregate [codegen id : 458]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#181, isEmpty#182, count#183]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#184, count(1)#185]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#184 AS sales#47, count(1)#185 AS number_sales#48, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#184 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#186]

(186) Filter [codegen id : 458]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#47, number_sales#48, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#186]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#186) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#186 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#50, [id=#51] as decimal(32,6))))

(187) Project [codegen id : 458]
Output [6]: [store AS channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sales#47, number_sales#48]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#47, number_sales#48, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#186]

(188) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#187, isEmpty#188, count#189]

(189) HashAggregate [codegen id : 503]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#187, isEmpty#188, count#189]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#190, count(1)#191]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#190 AS sales#66, count(1)#191 AS number_sales#67, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#190 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#192]

(190) Filter [codegen id : 503]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#66, number_sales#67, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#192]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#192) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#192 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#50, [id=#51] as decimal(32,6))))

(191) Project [codegen id : 503]
Output [6]: [catalog AS channel#193, i_brand_id#8, i_class_id#9, i_category_id#10, sales#66, number_sales#67]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#66, number_sales#67, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#192]

(192) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#194, isEmpty#195, count#196]

(193) HashAggregate [codegen id : 548]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#194, isEmpty#195, count#196]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#197, count(1)#198]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#197 AS sales#83, count(1)#198 AS number_sales#84, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#197 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#199]

(194) Filter [codegen id : 548]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#83, number_sales#84, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#199]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#199) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#199 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#50, [id=#51] as decimal(32,6))))

(195) Project [codegen id : 548]
Output [6]: [web AS channel#200, i_brand_id#8, i_class_id#9, i_category_id#10, sales#83, number_sales#84]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#83, number_sales#84, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#199]

(196) Union

(197) HashAggregate [codegen id : 549]
Input [6]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sales#47, number_sales#48]
Keys [4]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(sales#47), partial_sum(number_sales#48)]
Aggregate Attributes [3]: [sum#201, isEmpty#202, sum#203]
Results [7]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sum#204, isEmpty#205, sum#206]

(198) Exchange
Input [7]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sum#204, isEmpty#205, sum#206]
Arguments: hashpartitioning(channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#207]

(199) HashAggregate [codegen id : 550]
Input [7]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sum#204, isEmpty#205, sum#206]
Keys [4]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(sales#47), sum(number_sales#48)]
Aggregate Attributes [2]: [sum(sales#47)#208, sum(number_sales#48)#209]
Results [3]: [channel#52, sum(sales#47)#208 AS sum_sales#96, sum(number_sales#48)#209 AS number_sales#97]

(200) HashAggregate [codegen id : 550]
Input [3]: [channel#52, sum_sales#96, number_sales#97]
Keys [1]: [channel#52]
Functions [2]: [partial_sum(sum_sales#96), partial_sum(number_sales#97)]
Aggregate Attributes [3]: [sum#210, isEmpty#211, sum#212]
Results [4]: [channel#52, sum#213, isEmpty#214, sum#215]

(201) Exchange
Input [4]: [channel#52, sum#213, isEmpty#214, sum#215]
Arguments: hashpartitioning(channel#52, 5), ENSURE_REQUIREMENTS, [id=#216]

(202) HashAggregate [codegen id : 551]
Input [4]: [channel#52, sum#213, isEmpty#214, sum#215]
Keys [1]: [channel#52]
Functions [2]: [sum(sum_sales#96), sum(number_sales#97)]
Aggregate Attributes [2]: [sum(sum_sales#96)#217, sum(number_sales#97)#218]
Results [6]: [channel#52, null AS i_brand_id#219, null AS i_class_id#220, null AS i_category_id#221, sum(sum_sales#96)#217 AS sum(sum_sales)#222, sum(number_sales#97)#218 AS sum(number_sales)#223]

(203) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#224, isEmpty#225, count#226]

(204) HashAggregate [codegen id : 596]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#224, isEmpty#225, count#226]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#227, count(1)#228]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#227 AS sales#47, count(1)#228 AS number_sales#48, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#227 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#229]

(205) Filter [codegen id : 596]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#47, number_sales#48, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#229]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#229) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#229 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#50, [id=#51] as decimal(32,6))))

(206) Project [codegen id : 596]
Output [6]: [store AS channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sales#47, number_sales#48]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#47, number_sales#48, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#229]

(207) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#230, isEmpty#231, count#232]

(208) HashAggregate [codegen id : 641]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#230, isEmpty#231, count#232]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#233, count(1)#234]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#233 AS sales#66, count(1)#234 AS number_sales#67, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#233 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#235]

(209) Filter [codegen id : 641]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#66, number_sales#67, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#235]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#235) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#235 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#50, [id=#51] as decimal(32,6))))

(210) Project [codegen id : 641]
Output [6]: [catalog AS channel#236, i_brand_id#8, i_class_id#9, i_category_id#10, sales#66, number_sales#67]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#66, number_sales#67, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#235]

(211) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#237, isEmpty#238, count#239]

(212) HashAggregate [codegen id : 686]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#237, isEmpty#238, count#239]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#240, count(1)#241]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#240 AS sales#83, count(1)#241 AS number_sales#84, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#240 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#242]

(213) Filter [codegen id : 686]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#83, number_sales#84, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#242]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#242) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#242 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#50, [id=#51] as decimal(32,6))))

(214) Project [codegen id : 686]
Output [6]: [web AS channel#243, i_brand_id#8, i_class_id#9, i_category_id#10, sales#83, number_sales#84]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#83, number_sales#84, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#242]

(215) Union

(216) HashAggregate [codegen id : 687]
Input [6]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sales#47, number_sales#48]
Keys [4]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(sales#47), partial_sum(number_sales#48)]
Aggregate Attributes [3]: [sum#244, isEmpty#245, sum#246]
Results [7]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sum#247, isEmpty#248, sum#249]

(217) Exchange
Input [7]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sum#247, isEmpty#248, sum#249]
Arguments: hashpartitioning(channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#250]

(218) HashAggregate [codegen id : 688]
Input [7]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sum#247, isEmpty#248, sum#249]
Keys [4]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(sales#47), sum(number_sales#48)]
Aggregate Attributes [2]: [sum(sales#47)#251, sum(number_sales#48)#252]
Results [2]: [sum(sales#47)#251 AS sum_sales#96, sum(number_sales#48)#252 AS number_sales#97]

(219) HashAggregate [codegen id : 688]
Input [2]: [sum_sales#96, number_sales#97]
Keys: []
Functions [2]: [partial_sum(sum_sales#96), partial_sum(number_sales#97)]
Aggregate Attributes [3]: [sum#253, isEmpty#254, sum#255]
Results [3]: [sum#256, isEmpty#257, sum#258]

(220) Exchange
Input [3]: [sum#256, isEmpty#257, sum#258]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#259]

(221) HashAggregate [codegen id : 689]
Input [3]: [sum#256, isEmpty#257, sum#258]
Keys: []
Functions [2]: [sum(sum_sales#96), sum(number_sales#97)]
Aggregate Attributes [2]: [sum(sum_sales#96)#260, sum(number_sales#97)#261]
Results [6]: [null AS channel#262, null AS i_brand_id#263, null AS i_class_id#264, null AS i_category_id#265, sum(sum_sales#96)#260 AS sum(sum_sales)#266, sum(number_sales#97)#261 AS sum(number_sales)#267]

(222) Union

(223) HashAggregate [codegen id : 690]
Input [6]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#96, number_sales#97]
Keys [6]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#96, number_sales#97]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#96, number_sales#97]

(224) Exchange
Input [6]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#96, number_sales#97]
Arguments: hashpartitioning(channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#96, number_sales#97, 5), ENSURE_REQUIREMENTS, [id=#268]

(225) HashAggregate [codegen id : 691]
Input [6]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#96, number_sales#97]
Keys [6]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#96, number_sales#97]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#96, number_sales#97]

(226) TakeOrderedAndProject
Input [6]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#96, number_sales#97]
Arguments: 100, [channel#52 ASC NULLS FIRST, i_brand_id#8 ASC NULLS FIRST, i_class_id#9 ASC NULLS FIRST, i_category_id#10 ASC NULLS FIRST], [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#96, number_sales#97]

===== Subqueries =====

Subquery:1 Hosting operator id = 92 Hosting Expression = Subquery scalar-subquery#50, [id=#51]
* HashAggregate (257)
+- Exchange (256)
   +- * HashAggregate (255)
      +- Union (254)
         :- * Project (235)
         :  +- * BroadcastHashJoin Inner BuildLeft (234)
         :     :- BroadcastExchange (229)
         :     :  +- * ColumnarToRow (228)
         :     :     +- Scan parquet default.store_sales (227)
         :     +- * Project (233)
         :        +- * Filter (232)
         :           +- * ColumnarToRow (231)
         :              +- Scan parquet default.date_dim (230)
         :- * Project (244)
         :  +- * BroadcastHashJoin Inner BuildLeft (243)
         :     :- BroadcastExchange (238)
         :     :  +- * ColumnarToRow (237)
         :     :     +- Scan parquet default.catalog_sales (236)
         :     +- * Project (242)
         :        +- * Filter (241)
         :           +- * ColumnarToRow (240)
         :              +- Scan parquet default.date_dim (239)
         +- * Project (253)
            +- * BroadcastHashJoin Inner BuildLeft (252)
               :- BroadcastExchange (247)
               :  +- * ColumnarToRow (246)
               :     +- Scan parquet default.web_sales (245)
               +- * Project (251)
                  +- * Filter (250)
                     +- * ColumnarToRow (249)
                        +- Scan parquet default.date_dim (248)


(227) Scan parquet default.store_sales
Output [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(true)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(228) ColumnarToRow [codegen id : 1]
Input [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(229) BroadcastExchange
Input [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#269]

(230) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(231) ColumnarToRow
Input [2]: [d_date_sk#14, d_year#15]

(232) Filter
Input [2]: [d_date_sk#14, d_year#15]
Condition : (((isnotnull(d_year#15) AND (d_year#15 >= 1999)) AND (d_year#15 <= 2001)) AND isnotnull(d_date_sk#14))

(233) Project
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#15]

(234) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#14]
Join condition: None

(235) Project [codegen id : 2]
Output [2]: [ss_quantity#2 AS quantity#270, ss_list_price#3 AS list_price#271]
Input [4]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#14]

(236) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#53, cs_list_price#54, cs_sold_date_sk#22]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#22), dynamicpruningexpression(true)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(237) ColumnarToRow [codegen id : 3]
Input [3]: [cs_quantity#53, cs_list_price#54, cs_sold_date_sk#22]

(238) BroadcastExchange
Input [3]: [cs_quantity#53, cs_list_price#54, cs_sold_date_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#272]

(239) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(240) ColumnarToRow
Input [2]: [d_date_sk#14, d_year#15]

(241) Filter
Input [2]: [d_date_sk#14, d_year#15]
Condition : (((isnotnull(d_year#15) AND (d_year#15 >= 1998)) AND (d_year#15 <= 2000)) AND isnotnull(d_date_sk#14))

(242) Project
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#15]

(243) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#22]
Right keys [1]: [d_date_sk#14]
Join condition: None

(244) Project [codegen id : 4]
Output [2]: [cs_quantity#53 AS quantity#273, cs_list_price#54 AS list_price#274]
Input [4]: [cs_quantity#53, cs_list_price#54, cs_sold_date_sk#22, d_date_sk#14]

(245) Scan parquet default.web_sales
Output [3]: [ws_quantity#70, ws_list_price#71, ws_sold_date_sk#28]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#28), dynamicpruningexpression(true)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(246) ColumnarToRow [codegen id : 5]
Input [3]: [ws_quantity#70, ws_list_price#71, ws_sold_date_sk#28]

(247) BroadcastExchange
Input [3]: [ws_quantity#70, ws_list_price#71, ws_sold_date_sk#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#275]

(248) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(249) ColumnarToRow
Input [2]: [d_date_sk#14, d_year#15]

(250) Filter
Input [2]: [d_date_sk#14, d_year#15]
Condition : (((isnotnull(d_year#15) AND (d_year#15 >= 1998)) AND (d_year#15 <= 2000)) AND isnotnull(d_date_sk#14))

(251) Project
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#15]

(252) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#28]
Right keys [1]: [d_date_sk#14]
Join condition: None

(253) Project [codegen id : 6]
Output [2]: [ws_quantity#70 AS quantity#276, ws_list_price#71 AS list_price#277]
Input [4]: [ws_quantity#70, ws_list_price#71, ws_sold_date_sk#28, d_date_sk#14]

(254) Union

(255) HashAggregate [codegen id : 7]
Input [2]: [quantity#270, list_price#271]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#270 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#271 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#278, count#279]
Results [2]: [sum#280, count#281]

(256) Exchange
Input [2]: [sum#280, count#281]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#282]

(257) HashAggregate [codegen id : 8]
Input [2]: [sum#280, count#281]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#270 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#271 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#270 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#271 as decimal(12,2)))), DecimalType(18,2), true))#283]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#270 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#271 as decimal(12,2)))), DecimalType(18,2), true))#283 AS average_sales#284]

Subquery:2 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (258)


(258) ReusedExchange [Reuses operator id: 86]
Output [1]: [d_date_sk#14]

Subquery:3 Hosting operator id = 10 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#12
ReusedExchange (259)


(259) ReusedExchange [Reuses operator id: 23]
Output [1]: [d_date_sk#14]

Subquery:4 Hosting operator id = 28 Hosting Expression = cs_sold_date_sk#22 IN dynamicpruning#12

Subquery:5 Hosting operator id = 48 Hosting Expression = ws_sold_date_sk#28 IN dynamicpruning#12

Subquery:6 Hosting operator id = 116 Hosting Expression = ReusedSubquery Subquery scalar-subquery#50, [id=#51]

Subquery:7 Hosting operator id = 94 Hosting Expression = cs_sold_date_sk#22 IN dynamicpruning#5

Subquery:8 Hosting operator id = 140 Hosting Expression = ReusedSubquery Subquery scalar-subquery#50, [id=#51]

Subquery:9 Hosting operator id = 118 Hosting Expression = ws_sold_date_sk#28 IN dynamicpruning#5

Subquery:10 Hosting operator id = 148 Hosting Expression = ReusedSubquery Subquery scalar-subquery#50, [id=#51]

Subquery:11 Hosting operator id = 152 Hosting Expression = ReusedSubquery Subquery scalar-subquery#50, [id=#51]

Subquery:12 Hosting operator id = 156 Hosting Expression = ReusedSubquery Subquery scalar-subquery#50, [id=#51]

Subquery:13 Hosting operator id = 167 Hosting Expression = ReusedSubquery Subquery scalar-subquery#50, [id=#51]

Subquery:14 Hosting operator id = 171 Hosting Expression = ReusedSubquery Subquery scalar-subquery#50, [id=#51]

Subquery:15 Hosting operator id = 175 Hosting Expression = ReusedSubquery Subquery scalar-subquery#50, [id=#51]

Subquery:16 Hosting operator id = 186 Hosting Expression = ReusedSubquery Subquery scalar-subquery#50, [id=#51]

Subquery:17 Hosting operator id = 190 Hosting Expression = ReusedSubquery Subquery scalar-subquery#50, [id=#51]

Subquery:18 Hosting operator id = 194 Hosting Expression = ReusedSubquery Subquery scalar-subquery#50, [id=#51]

Subquery:19 Hosting operator id = 205 Hosting Expression = ReusedSubquery Subquery scalar-subquery#50, [id=#51]

Subquery:20 Hosting operator id = 209 Hosting Expression = ReusedSubquery Subquery scalar-subquery#50, [id=#51]

Subquery:21 Hosting operator id = 213 Hosting Expression = ReusedSubquery Subquery scalar-subquery#50, [id=#51]


