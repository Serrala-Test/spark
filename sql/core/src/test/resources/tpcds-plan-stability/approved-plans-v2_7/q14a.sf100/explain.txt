== Physical Plan ==
TakeOrderedAndProject (135)
+- * HashAggregate (134)
   +- Exchange (133)
      +- * HashAggregate (132)
         +- Union (131)
            :- * HashAggregate (110)
            :  +- Exchange (109)
            :     +- * HashAggregate (108)
            :        +- Union (107)
            :           :- * Filter (70)
            :           :  +- * HashAggregate (69)
            :           :     +- Exchange (68)
            :           :        +- * HashAggregate (67)
            :           :           +- * Project (66)
            :           :              +- * BroadcastHashJoin Inner BuildRight (65)
            :           :                 :- * Project (63)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (62)
            :           :                 :     :- * SortMergeJoin LeftSemi (60)
            :           :                 :     :  :- * Sort (5)
            :           :                 :     :  :  +- Exchange (4)
            :           :                 :     :  :     +- * Filter (3)
            :           :                 :     :  :        +- * ColumnarToRow (2)
            :           :                 :     :  :           +- Scan parquet default.store_sales (1)
            :           :                 :     :  +- * Sort (59)
            :           :                 :     :     +- Exchange (58)
            :           :                 :     :        +- * Project (57)
            :           :                 :     :           +- * BroadcastHashJoin Inner BuildRight (56)
            :           :                 :     :              :- * Filter (8)
            :           :                 :     :              :  +- * ColumnarToRow (7)
            :           :                 :     :              :     +- Scan parquet default.item (6)
            :           :                 :     :              +- BroadcastExchange (55)
            :           :                 :     :                 +- * SortMergeJoin LeftSemi (54)
            :           :                 :     :                    :- * Sort (42)
            :           :                 :     :                    :  +- Exchange (41)
            :           :                 :     :                    :     +- * HashAggregate (40)
            :           :                 :     :                    :        +- Exchange (39)
            :           :                 :     :                    :           +- * HashAggregate (38)
            :           :                 :     :                    :              +- * Project (37)
            :           :                 :     :                    :                 +- * BroadcastHashJoin Inner BuildRight (36)
            :           :                 :     :                    :                    :- * Project (14)
            :           :                 :     :                    :                    :  +- * BroadcastHashJoin Inner BuildRight (13)
            :           :                 :     :                    :                    :     :- * Filter (11)
            :           :                 :     :                    :                    :     :  +- * ColumnarToRow (10)
            :           :                 :     :                    :                    :     :     +- Scan parquet default.store_sales (9)
            :           :                 :     :                    :                    :     +- ReusedExchange (12)
            :           :                 :     :                    :                    +- BroadcastExchange (35)
            :           :                 :     :                    :                       +- * SortMergeJoin LeftSemi (34)
            :           :                 :     :                    :                          :- * Sort (19)
            :           :                 :     :                    :                          :  +- Exchange (18)
            :           :                 :     :                    :                          :     +- * Filter (17)
            :           :                 :     :                    :                          :        +- * ColumnarToRow (16)
            :           :                 :     :                    :                          :           +- Scan parquet default.item (15)
            :           :                 :     :                    :                          +- * Sort (33)
            :           :                 :     :                    :                             +- Exchange (32)
            :           :                 :     :                    :                                +- * Project (31)
            :           :                 :     :                    :                                   +- * BroadcastHashJoin Inner BuildRight (30)
            :           :                 :     :                    :                                      :- * Project (25)
            :           :                 :     :                    :                                      :  +- * BroadcastHashJoin Inner BuildRight (24)
            :           :                 :     :                    :                                      :     :- * Filter (22)
            :           :                 :     :                    :                                      :     :  +- * ColumnarToRow (21)
            :           :                 :     :                    :                                      :     :     +- Scan parquet default.catalog_sales (20)
            :           :                 :     :                    :                                      :     +- ReusedExchange (23)
            :           :                 :     :                    :                                      +- BroadcastExchange (29)
            :           :                 :     :                    :                                         +- * Filter (28)
            :           :                 :     :                    :                                            +- * ColumnarToRow (27)
            :           :                 :     :                    :                                               +- Scan parquet default.item (26)
            :           :                 :     :                    +- * Sort (53)
            :           :                 :     :                       +- Exchange (52)
            :           :                 :     :                          +- * Project (51)
            :           :                 :     :                             +- * BroadcastHashJoin Inner BuildRight (50)
            :           :                 :     :                                :- * Project (48)
            :           :                 :     :                                :  +- * BroadcastHashJoin Inner BuildRight (47)
            :           :                 :     :                                :     :- * Filter (45)
            :           :                 :     :                                :     :  +- * ColumnarToRow (44)
            :           :                 :     :                                :     :     +- Scan parquet default.web_sales (43)
            :           :                 :     :                                :     +- ReusedExchange (46)
            :           :                 :     :                                +- ReusedExchange (49)
            :           :                 :     +- ReusedExchange (61)
            :           :                 +- ReusedExchange (64)
            :           :- * Filter (88)
            :           :  +- * HashAggregate (87)
            :           :     +- Exchange (86)
            :           :        +- * HashAggregate (85)
            :           :           +- * Project (84)
            :           :              +- * BroadcastHashJoin Inner BuildRight (83)
            :           :                 :- * Project (81)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (80)
            :           :                 :     :- * SortMergeJoin LeftSemi (78)
            :           :                 :     :  :- * Sort (75)
            :           :                 :     :  :  +- Exchange (74)
            :           :                 :     :  :     +- * Filter (73)
            :           :                 :     :  :        +- * ColumnarToRow (72)
            :           :                 :     :  :           +- Scan parquet default.catalog_sales (71)
            :           :                 :     :  +- * Sort (77)
            :           :                 :     :     +- ReusedExchange (76)
            :           :                 :     +- ReusedExchange (79)
            :           :                 +- ReusedExchange (82)
            :           +- * Filter (106)
            :              +- * HashAggregate (105)
            :                 +- Exchange (104)
            :                    +- * HashAggregate (103)
            :                       +- * Project (102)
            :                          +- * BroadcastHashJoin Inner BuildRight (101)
            :                             :- * Project (99)
            :                             :  +- * BroadcastHashJoin Inner BuildRight (98)
            :                             :     :- * SortMergeJoin LeftSemi (96)
            :                             :     :  :- * Sort (93)
            :                             :     :  :  +- Exchange (92)
            :                             :     :  :     +- * Filter (91)
            :                             :     :  :        +- * ColumnarToRow (90)
            :                             :     :  :           +- Scan parquet default.web_sales (89)
            :                             :     :  +- * Sort (95)
            :                             :     :     +- ReusedExchange (94)
            :                             :     +- ReusedExchange (97)
            :                             +- ReusedExchange (100)
            :- * HashAggregate (115)
            :  +- Exchange (114)
            :     +- * HashAggregate (113)
            :        +- * HashAggregate (112)
            :           +- ReusedExchange (111)
            :- * HashAggregate (120)
            :  +- Exchange (119)
            :     +- * HashAggregate (118)
            :        +- * HashAggregate (117)
            :           +- ReusedExchange (116)
            :- * HashAggregate (125)
            :  +- Exchange (124)
            :     +- * HashAggregate (123)
            :        +- * HashAggregate (122)
            :           +- ReusedExchange (121)
            +- * HashAggregate (130)
               +- Exchange (129)
                  +- * HashAggregate (128)
                     +- * HashAggregate (127)
                        +- ReusedExchange (126)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 19]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(8) Filter [codegen id : 19]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(9) Scan parquet default.store_sales
Output [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(10) ColumnarToRow [codegen id : 11]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]

(11) Filter [codegen id : 11]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Condition : isnotnull(ss_item_sk#11)

(12) ReusedExchange [Reuses operator id: 169]
Output [1]: [d_date_sk#14]

(13) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_sold_date_sk#12]
Right keys [1]: [d_date_sk#14]
Join condition: None

(14) Project [codegen id : 11]
Output [1]: [ss_item_sk#11]
Input [3]: [ss_item_sk#11, ss_sold_date_sk#12, d_date_sk#14]

(15) Scan parquet default.item
Output [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(16) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(17) Filter [codegen id : 4]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Condition : (((isnotnull(i_item_sk#15) AND isnotnull(i_brand_id#16)) AND isnotnull(i_class_id#17)) AND isnotnull(i_category_id#18))

(18) Exchange
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: hashpartitioning(coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18), 5), ENSURE_REQUIREMENTS, [id=#19]

(19) Sort [codegen id : 5]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: [coalesce(i_brand_id#16, 0) ASC NULLS FIRST, isnull(i_brand_id#16) ASC NULLS FIRST, coalesce(i_class_id#17, 0) ASC NULLS FIRST, isnull(i_class_id#17) ASC NULLS FIRST, coalesce(i_category_id#18, 0) ASC NULLS FIRST, isnull(i_category_id#18) ASC NULLS FIRST], false, 0

(20) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#20, cs_sold_date_sk#21]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#21), dynamicpruningexpression(cs_sold_date_sk#21 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(21) ColumnarToRow [codegen id : 8]
Input [2]: [cs_item_sk#20, cs_sold_date_sk#21]

(22) Filter [codegen id : 8]
Input [2]: [cs_item_sk#20, cs_sold_date_sk#21]
Condition : isnotnull(cs_item_sk#20)

(23) ReusedExchange [Reuses operator id: 169]
Output [1]: [d_date_sk#22]

(24) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#21]
Right keys [1]: [d_date_sk#22]
Join condition: None

(25) Project [codegen id : 8]
Output [1]: [cs_item_sk#20]
Input [3]: [cs_item_sk#20, cs_sold_date_sk#21, d_date_sk#22]

(26) Scan parquet default.item
Output [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(27) ColumnarToRow [codegen id : 7]
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]

(28) Filter [codegen id : 7]
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Condition : isnotnull(i_item_sk#23)

(29) BroadcastExchange
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(30) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_item_sk#20]
Right keys [1]: [i_item_sk#23]
Join condition: None

(31) Project [codegen id : 8]
Output [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Input [5]: [cs_item_sk#20, i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]

(32) Exchange
Input [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: hashpartitioning(coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26), 5), ENSURE_REQUIREMENTS, [id=#28]

(33) Sort [codegen id : 9]
Input [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: [coalesce(i_brand_id#24, 0) ASC NULLS FIRST, isnull(i_brand_id#24) ASC NULLS FIRST, coalesce(i_class_id#25, 0) ASC NULLS FIRST, isnull(i_class_id#25) ASC NULLS FIRST, coalesce(i_category_id#26, 0) ASC NULLS FIRST, isnull(i_category_id#26) ASC NULLS FIRST], false, 0

(34) SortMergeJoin [codegen id : 10]
Left keys [6]: [coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18)]
Right keys [6]: [coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26)]
Join condition: None

(35) BroadcastExchange
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(36) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#11]
Right keys [1]: [i_item_sk#15]
Join condition: None

(37) Project [codegen id : 11]
Output [3]: [i_brand_id#16 AS brand_id#30, i_class_id#17 AS class_id#31, i_category_id#18 AS category_id#32]
Input [5]: [ss_item_sk#11, i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(38) HashAggregate [codegen id : 11]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(39) Exchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: hashpartitioning(brand_id#30, class_id#31, category_id#32, 5), ENSURE_REQUIREMENTS, [id=#33]

(40) HashAggregate [codegen id : 12]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(41) Exchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: hashpartitioning(coalesce(brand_id#30, 0), isnull(brand_id#30), coalesce(class_id#31, 0), isnull(class_id#31), coalesce(category_id#32, 0), isnull(category_id#32), 5), ENSURE_REQUIREMENTS, [id=#34]

(42) Sort [codegen id : 13]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: [coalesce(brand_id#30, 0) ASC NULLS FIRST, isnull(brand_id#30) ASC NULLS FIRST, coalesce(class_id#31, 0) ASC NULLS FIRST, isnull(class_id#31) ASC NULLS FIRST, coalesce(category_id#32, 0) ASC NULLS FIRST, isnull(category_id#32) ASC NULLS FIRST], false, 0

(43) Scan parquet default.web_sales
Output [2]: [ws_item_sk#35, ws_sold_date_sk#36]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#36), dynamicpruningexpression(ws_sold_date_sk#36 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(44) ColumnarToRow [codegen id : 16]
Input [2]: [ws_item_sk#35, ws_sold_date_sk#36]

(45) Filter [codegen id : 16]
Input [2]: [ws_item_sk#35, ws_sold_date_sk#36]
Condition : isnotnull(ws_item_sk#35)

(46) ReusedExchange [Reuses operator id: 169]
Output [1]: [d_date_sk#37]

(47) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_sold_date_sk#36]
Right keys [1]: [d_date_sk#37]
Join condition: None

(48) Project [codegen id : 16]
Output [1]: [ws_item_sk#35]
Input [3]: [ws_item_sk#35, ws_sold_date_sk#36, d_date_sk#37]

(49) ReusedExchange [Reuses operator id: 29]
Output [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(50) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_item_sk#35]
Right keys [1]: [i_item_sk#38]
Join condition: None

(51) Project [codegen id : 16]
Output [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Input [5]: [ws_item_sk#35, i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(52) Exchange
Input [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Arguments: hashpartitioning(coalesce(i_brand_id#39, 0), isnull(i_brand_id#39), coalesce(i_class_id#40, 0), isnull(i_class_id#40), coalesce(i_category_id#41, 0), isnull(i_category_id#41), 5), ENSURE_REQUIREMENTS, [id=#42]

(53) Sort [codegen id : 17]
Input [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Arguments: [coalesce(i_brand_id#39, 0) ASC NULLS FIRST, isnull(i_brand_id#39) ASC NULLS FIRST, coalesce(i_class_id#40, 0) ASC NULLS FIRST, isnull(i_class_id#40) ASC NULLS FIRST, coalesce(i_category_id#41, 0) ASC NULLS FIRST, isnull(i_category_id#41) ASC NULLS FIRST], false, 0

(54) SortMergeJoin [codegen id : 18]
Left keys [6]: [coalesce(brand_id#30, 0), isnull(brand_id#30), coalesce(class_id#31, 0), isnull(class_id#31), coalesce(category_id#32, 0), isnull(category_id#32)]
Right keys [6]: [coalesce(i_brand_id#39, 0), isnull(i_brand_id#39), coalesce(i_class_id#40, 0), isnull(i_class_id#40), coalesce(i_category_id#41, 0), isnull(i_category_id#41)]
Join condition: None

(55) BroadcastExchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#43]

(56) BroadcastHashJoin [codegen id : 19]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#30, class_id#31, category_id#32]
Join condition: None

(57) Project [codegen id : 19]
Output [1]: [i_item_sk#7 AS ss_item_sk#44]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#30, class_id#31, category_id#32]

(58) Exchange
Input [1]: [ss_item_sk#44]
Arguments: hashpartitioning(ss_item_sk#44, 5), ENSURE_REQUIREMENTS, [id=#45]

(59) Sort [codegen id : 20]
Input [1]: [ss_item_sk#44]
Arguments: [ss_item_sk#44 ASC NULLS FIRST], false, 0

(60) SortMergeJoin [codegen id : 23]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#44]
Join condition: None

(61) ReusedExchange [Reuses operator id: 164]
Output [1]: [d_date_sk#46]

(62) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#46]
Join condition: None

(63) Project [codegen id : 23]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#46]

(64) ReusedExchange [Reuses operator id: 29]
Output [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]

(65) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#47]
Join condition: None

(66) Project [codegen id : 23]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#48, i_class_id#49, i_category_id#50]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]

(67) HashAggregate [codegen id : 23]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#48, i_class_id#49, i_category_id#50]
Keys [3]: [i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)]
Aggregate Attributes [3]: [sum#51, isEmpty#52, count#53]
Results [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#54, isEmpty#55, count#56]

(68) Exchange
Input [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#54, isEmpty#55, count#56]
Arguments: hashpartitioning(i_brand_id#48, i_class_id#49, i_category_id#50, 5), ENSURE_REQUIREMENTS, [id=#57]

(69) HashAggregate [codegen id : 24]
Input [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#54, isEmpty#55, count#56]
Keys [3]: [i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2))), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2)))#58, count(1)#59]
Results [6]: [store AS channel#60, i_brand_id#48, i_class_id#49, i_category_id#50, sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2)))#58 AS sales#61, count(1)#59 AS number_sales#62]

(70) Filter [codegen id : 24]
Input [6]: [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50, sales#61, number_sales#62]
Condition : (isnotnull(sales#61) AND (cast(sales#61 as decimal(32,6)) > cast(Subquery scalar-subquery#63, [id=#64] as decimal(32,6))))

(71) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#65, cs_quantity#66, cs_list_price#67, cs_sold_date_sk#68]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#68), dynamicpruningexpression(cs_sold_date_sk#68 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(72) ColumnarToRow [codegen id : 25]
Input [4]: [cs_item_sk#65, cs_quantity#66, cs_list_price#67, cs_sold_date_sk#68]

(73) Filter [codegen id : 25]
Input [4]: [cs_item_sk#65, cs_quantity#66, cs_list_price#67, cs_sold_date_sk#68]
Condition : isnotnull(cs_item_sk#65)

(74) Exchange
Input [4]: [cs_item_sk#65, cs_quantity#66, cs_list_price#67, cs_sold_date_sk#68]
Arguments: hashpartitioning(cs_item_sk#65, 5), ENSURE_REQUIREMENTS, [id=#69]

(75) Sort [codegen id : 26]
Input [4]: [cs_item_sk#65, cs_quantity#66, cs_list_price#67, cs_sold_date_sk#68]
Arguments: [cs_item_sk#65 ASC NULLS FIRST], false, 0

(76) ReusedExchange [Reuses operator id: 58]
Output [1]: [ss_item_sk#44]

(77) Sort [codegen id : 44]
Input [1]: [ss_item_sk#44]
Arguments: [ss_item_sk#44 ASC NULLS FIRST], false, 0

(78) SortMergeJoin [codegen id : 47]
Left keys [1]: [cs_item_sk#65]
Right keys [1]: [ss_item_sk#44]
Join condition: None

(79) ReusedExchange [Reuses operator id: 164]
Output [1]: [d_date_sk#70]

(80) BroadcastHashJoin [codegen id : 47]
Left keys [1]: [cs_sold_date_sk#68]
Right keys [1]: [d_date_sk#70]
Join condition: None

(81) Project [codegen id : 47]
Output [3]: [cs_item_sk#65, cs_quantity#66, cs_list_price#67]
Input [5]: [cs_item_sk#65, cs_quantity#66, cs_list_price#67, cs_sold_date_sk#68, d_date_sk#70]

(82) ReusedExchange [Reuses operator id: 29]
Output [4]: [i_item_sk#71, i_brand_id#72, i_class_id#73, i_category_id#74]

(83) BroadcastHashJoin [codegen id : 47]
Left keys [1]: [cs_item_sk#65]
Right keys [1]: [i_item_sk#71]
Join condition: None

(84) Project [codegen id : 47]
Output [5]: [cs_quantity#66, cs_list_price#67, i_brand_id#72, i_class_id#73, i_category_id#74]
Input [7]: [cs_item_sk#65, cs_quantity#66, cs_list_price#67, i_item_sk#71, i_brand_id#72, i_class_id#73, i_category_id#74]

(85) HashAggregate [codegen id : 47]
Input [5]: [cs_quantity#66, cs_list_price#67, i_brand_id#72, i_class_id#73, i_category_id#74]
Keys [3]: [i_brand_id#72, i_class_id#73, i_category_id#74]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cs_quantity#66 as decimal(12,2))) * promote_precision(cast(cs_list_price#67 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)]
Aggregate Attributes [3]: [sum#75, isEmpty#76, count#77]
Results [6]: [i_brand_id#72, i_class_id#73, i_category_id#74, sum#78, isEmpty#79, count#80]

(86) Exchange
Input [6]: [i_brand_id#72, i_class_id#73, i_category_id#74, sum#78, isEmpty#79, count#80]
Arguments: hashpartitioning(i_brand_id#72, i_class_id#73, i_category_id#74, 5), ENSURE_REQUIREMENTS, [id=#81]

(87) HashAggregate [codegen id : 48]
Input [6]: [i_brand_id#72, i_class_id#73, i_category_id#74, sum#78, isEmpty#79, count#80]
Keys [3]: [i_brand_id#72, i_class_id#73, i_category_id#74]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cs_quantity#66 as decimal(12,2))) * promote_precision(cast(cs_list_price#67 as decimal(12,2)))), DecimalType(18,2))), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cs_quantity#66 as decimal(12,2))) * promote_precision(cast(cs_list_price#67 as decimal(12,2)))), DecimalType(18,2)))#82, count(1)#83]
Results [6]: [catalog AS channel#84, i_brand_id#72, i_class_id#73, i_category_id#74, sum(CheckOverflow((promote_precision(cast(cs_quantity#66 as decimal(12,2))) * promote_precision(cast(cs_list_price#67 as decimal(12,2)))), DecimalType(18,2)))#82 AS sales#85, count(1)#83 AS number_sales#86]

(88) Filter [codegen id : 48]
Input [6]: [channel#84, i_brand_id#72, i_class_id#73, i_category_id#74, sales#85, number_sales#86]
Condition : (isnotnull(sales#85) AND (cast(sales#85 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#63, [id=#64] as decimal(32,6))))

(89) Scan parquet default.web_sales
Output [4]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, ws_sold_date_sk#90]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#90), dynamicpruningexpression(ws_sold_date_sk#90 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(90) ColumnarToRow [codegen id : 49]
Input [4]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, ws_sold_date_sk#90]

(91) Filter [codegen id : 49]
Input [4]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, ws_sold_date_sk#90]
Condition : isnotnull(ws_item_sk#87)

(92) Exchange
Input [4]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, ws_sold_date_sk#90]
Arguments: hashpartitioning(ws_item_sk#87, 5), ENSURE_REQUIREMENTS, [id=#91]

(93) Sort [codegen id : 50]
Input [4]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, ws_sold_date_sk#90]
Arguments: [ws_item_sk#87 ASC NULLS FIRST], false, 0

(94) ReusedExchange [Reuses operator id: 58]
Output [1]: [ss_item_sk#44]

(95) Sort [codegen id : 68]
Input [1]: [ss_item_sk#44]
Arguments: [ss_item_sk#44 ASC NULLS FIRST], false, 0

(96) SortMergeJoin [codegen id : 71]
Left keys [1]: [ws_item_sk#87]
Right keys [1]: [ss_item_sk#44]
Join condition: None

(97) ReusedExchange [Reuses operator id: 164]
Output [1]: [d_date_sk#92]

(98) BroadcastHashJoin [codegen id : 71]
Left keys [1]: [ws_sold_date_sk#90]
Right keys [1]: [d_date_sk#92]
Join condition: None

(99) Project [codegen id : 71]
Output [3]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89]
Input [5]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, ws_sold_date_sk#90, d_date_sk#92]

(100) ReusedExchange [Reuses operator id: 29]
Output [4]: [i_item_sk#93, i_brand_id#94, i_class_id#95, i_category_id#96]

(101) BroadcastHashJoin [codegen id : 71]
Left keys [1]: [ws_item_sk#87]
Right keys [1]: [i_item_sk#93]
Join condition: None

(102) Project [codegen id : 71]
Output [5]: [ws_quantity#88, ws_list_price#89, i_brand_id#94, i_class_id#95, i_category_id#96]
Input [7]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, i_item_sk#93, i_brand_id#94, i_class_id#95, i_category_id#96]

(103) HashAggregate [codegen id : 71]
Input [5]: [ws_quantity#88, ws_list_price#89, i_brand_id#94, i_class_id#95, i_category_id#96]
Keys [3]: [i_brand_id#94, i_class_id#95, i_category_id#96]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(ws_quantity#88 as decimal(12,2))) * promote_precision(cast(ws_list_price#89 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)]
Aggregate Attributes [3]: [sum#97, isEmpty#98, count#99]
Results [6]: [i_brand_id#94, i_class_id#95, i_category_id#96, sum#100, isEmpty#101, count#102]

(104) Exchange
Input [6]: [i_brand_id#94, i_class_id#95, i_category_id#96, sum#100, isEmpty#101, count#102]
Arguments: hashpartitioning(i_brand_id#94, i_class_id#95, i_category_id#96, 5), ENSURE_REQUIREMENTS, [id=#103]

(105) HashAggregate [codegen id : 72]
Input [6]: [i_brand_id#94, i_class_id#95, i_category_id#96, sum#100, isEmpty#101, count#102]
Keys [3]: [i_brand_id#94, i_class_id#95, i_category_id#96]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(ws_quantity#88 as decimal(12,2))) * promote_precision(cast(ws_list_price#89 as decimal(12,2)))), DecimalType(18,2))), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(ws_quantity#88 as decimal(12,2))) * promote_precision(cast(ws_list_price#89 as decimal(12,2)))), DecimalType(18,2)))#104, count(1)#105]
Results [6]: [web AS channel#106, i_brand_id#94, i_class_id#95, i_category_id#96, sum(CheckOverflow((promote_precision(cast(ws_quantity#88 as decimal(12,2))) * promote_precision(cast(ws_list_price#89 as decimal(12,2)))), DecimalType(18,2)))#104 AS sales#107, count(1)#105 AS number_sales#108]

(106) Filter [codegen id : 72]
Input [6]: [channel#106, i_brand_id#94, i_class_id#95, i_category_id#96, sales#107, number_sales#108]
Condition : (isnotnull(sales#107) AND (cast(sales#107 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#63, [id=#64] as decimal(32,6))))

(107) Union

(108) HashAggregate [codegen id : 73]
Input [6]: [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50, sales#61, number_sales#62]
Keys [4]: [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [partial_sum(sales#61), partial_sum(number_sales#62)]
Aggregate Attributes [3]: [sum#109, isEmpty#110, sum#111]
Results [7]: [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50, sum#112, isEmpty#113, sum#114]

(109) Exchange
Input [7]: [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50, sum#112, isEmpty#113, sum#114]
Arguments: hashpartitioning(channel#60, i_brand_id#48, i_class_id#49, i_category_id#50, 5), ENSURE_REQUIREMENTS, [id=#115]

(110) HashAggregate [codegen id : 74]
Input [7]: [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50, sum#112, isEmpty#113, sum#114]
Keys [4]: [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [sum(sales#61), sum(number_sales#62)]
Aggregate Attributes [2]: [sum(sales#61)#116, sum(number_sales#62)#117]
Results [6]: [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50, sum(sales#61)#116 AS sum_sales#118, sum(number_sales#62)#117 AS number_sales#119]

(111) ReusedExchange [Reuses operator id: 109]
Output [7]: [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50, sum#112, isEmpty#113, sum#114]

(112) HashAggregate [codegen id : 148]
Input [7]: [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50, sum#112, isEmpty#113, sum#114]
Keys [4]: [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [sum(sales#61), sum(number_sales#62)]
Aggregate Attributes [2]: [sum(sales#61)#116, sum(number_sales#62)#117]
Results [5]: [channel#60, i_brand_id#48, i_class_id#49, sum(sales#61)#116 AS sum_sales#118, sum(number_sales#62)#117 AS number_sales#119]

(113) HashAggregate [codegen id : 148]
Input [5]: [channel#60, i_brand_id#48, i_class_id#49, sum_sales#118, number_sales#119]
Keys [3]: [channel#60, i_brand_id#48, i_class_id#49]
Functions [2]: [partial_sum(sum_sales#118), partial_sum(number_sales#119)]
Aggregate Attributes [3]: [sum#120, isEmpty#121, sum#122]
Results [6]: [channel#60, i_brand_id#48, i_class_id#49, sum#123, isEmpty#124, sum#125]

(114) Exchange
Input [6]: [channel#60, i_brand_id#48, i_class_id#49, sum#123, isEmpty#124, sum#125]
Arguments: hashpartitioning(channel#60, i_brand_id#48, i_class_id#49, 5), ENSURE_REQUIREMENTS, [id=#126]

(115) HashAggregate [codegen id : 149]
Input [6]: [channel#60, i_brand_id#48, i_class_id#49, sum#123, isEmpty#124, sum#125]
Keys [3]: [channel#60, i_brand_id#48, i_class_id#49]
Functions [2]: [sum(sum_sales#118), sum(number_sales#119)]
Aggregate Attributes [2]: [sum(sum_sales#118)#127, sum(number_sales#119)#128]
Results [6]: [channel#60, i_brand_id#48, i_class_id#49, null AS i_category_id#129, sum(sum_sales#118)#127 AS sum(sum_sales)#130, sum(number_sales#119)#128 AS sum(number_sales)#131]

(116) ReusedExchange [Reuses operator id: 109]
Output [7]: [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50, sum#112, isEmpty#113, sum#114]

(117) HashAggregate [codegen id : 223]
Input [7]: [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50, sum#112, isEmpty#113, sum#114]
Keys [4]: [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [sum(sales#61), sum(number_sales#62)]
Aggregate Attributes [2]: [sum(sales#61)#116, sum(number_sales#62)#117]
Results [4]: [channel#60, i_brand_id#48, sum(sales#61)#116 AS sum_sales#118, sum(number_sales#62)#117 AS number_sales#119]

(118) HashAggregate [codegen id : 223]
Input [4]: [channel#60, i_brand_id#48, sum_sales#118, number_sales#119]
Keys [2]: [channel#60, i_brand_id#48]
Functions [2]: [partial_sum(sum_sales#118), partial_sum(number_sales#119)]
Aggregate Attributes [3]: [sum#132, isEmpty#133, sum#134]
Results [5]: [channel#60, i_brand_id#48, sum#135, isEmpty#136, sum#137]

(119) Exchange
Input [5]: [channel#60, i_brand_id#48, sum#135, isEmpty#136, sum#137]
Arguments: hashpartitioning(channel#60, i_brand_id#48, 5), ENSURE_REQUIREMENTS, [id=#138]

(120) HashAggregate [codegen id : 224]
Input [5]: [channel#60, i_brand_id#48, sum#135, isEmpty#136, sum#137]
Keys [2]: [channel#60, i_brand_id#48]
Functions [2]: [sum(sum_sales#118), sum(number_sales#119)]
Aggregate Attributes [2]: [sum(sum_sales#118)#139, sum(number_sales#119)#140]
Results [6]: [channel#60, i_brand_id#48, null AS i_class_id#141, null AS i_category_id#142, sum(sum_sales#118)#139 AS sum(sum_sales)#143, sum(number_sales#119)#140 AS sum(number_sales)#144]

(121) ReusedExchange [Reuses operator id: 109]
Output [7]: [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50, sum#112, isEmpty#113, sum#114]

(122) HashAggregate [codegen id : 298]
Input [7]: [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50, sum#112, isEmpty#113, sum#114]
Keys [4]: [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [sum(sales#61), sum(number_sales#62)]
Aggregate Attributes [2]: [sum(sales#61)#116, sum(number_sales#62)#117]
Results [3]: [channel#60, sum(sales#61)#116 AS sum_sales#118, sum(number_sales#62)#117 AS number_sales#119]

(123) HashAggregate [codegen id : 298]
Input [3]: [channel#60, sum_sales#118, number_sales#119]
Keys [1]: [channel#60]
Functions [2]: [partial_sum(sum_sales#118), partial_sum(number_sales#119)]
Aggregate Attributes [3]: [sum#145, isEmpty#146, sum#147]
Results [4]: [channel#60, sum#148, isEmpty#149, sum#150]

(124) Exchange
Input [4]: [channel#60, sum#148, isEmpty#149, sum#150]
Arguments: hashpartitioning(channel#60, 5), ENSURE_REQUIREMENTS, [id=#151]

(125) HashAggregate [codegen id : 299]
Input [4]: [channel#60, sum#148, isEmpty#149, sum#150]
Keys [1]: [channel#60]
Functions [2]: [sum(sum_sales#118), sum(number_sales#119)]
Aggregate Attributes [2]: [sum(sum_sales#118)#152, sum(number_sales#119)#153]
Results [6]: [channel#60, null AS i_brand_id#154, null AS i_class_id#155, null AS i_category_id#156, sum(sum_sales#118)#152 AS sum(sum_sales)#157, sum(number_sales#119)#153 AS sum(number_sales)#158]

(126) ReusedExchange [Reuses operator id: 109]
Output [7]: [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50, sum#112, isEmpty#113, sum#114]

(127) HashAggregate [codegen id : 373]
Input [7]: [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50, sum#112, isEmpty#113, sum#114]
Keys [4]: [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [sum(sales#61), sum(number_sales#62)]
Aggregate Attributes [2]: [sum(sales#61)#116, sum(number_sales#62)#117]
Results [2]: [sum(sales#61)#116 AS sum_sales#118, sum(number_sales#62)#117 AS number_sales#119]

(128) HashAggregate [codegen id : 373]
Input [2]: [sum_sales#118, number_sales#119]
Keys: []
Functions [2]: [partial_sum(sum_sales#118), partial_sum(number_sales#119)]
Aggregate Attributes [3]: [sum#159, isEmpty#160, sum#161]
Results [3]: [sum#162, isEmpty#163, sum#164]

(129) Exchange
Input [3]: [sum#162, isEmpty#163, sum#164]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#165]

(130) HashAggregate [codegen id : 374]
Input [3]: [sum#162, isEmpty#163, sum#164]
Keys: []
Functions [2]: [sum(sum_sales#118), sum(number_sales#119)]
Aggregate Attributes [2]: [sum(sum_sales#118)#166, sum(number_sales#119)#167]
Results [6]: [null AS channel#168, null AS i_brand_id#169, null AS i_class_id#170, null AS i_category_id#171, sum(sum_sales#118)#166 AS sum(sum_sales)#172, sum(number_sales#119)#167 AS sum(number_sales)#173]

(131) Union

(132) HashAggregate [codegen id : 375]
Input [6]: [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#118, number_sales#119]
Keys [6]: [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#118, number_sales#119]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#118, number_sales#119]

(133) Exchange
Input [6]: [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#118, number_sales#119]
Arguments: hashpartitioning(channel#60, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#118, number_sales#119, 5), ENSURE_REQUIREMENTS, [id=#174]

(134) HashAggregate [codegen id : 376]
Input [6]: [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#118, number_sales#119]
Keys [6]: [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#118, number_sales#119]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#118, number_sales#119]

(135) TakeOrderedAndProject
Input [6]: [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#118, number_sales#119]
Arguments: 100, [channel#60 ASC NULLS FIRST, i_brand_id#48 ASC NULLS FIRST, i_class_id#49 ASC NULLS FIRST, i_category_id#50 ASC NULLS FIRST], [channel#60, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#118, number_sales#119]

===== Subqueries =====

Subquery:1 Hosting operator id = 70 Hosting Expression = Subquery scalar-subquery#63, [id=#64]
* HashAggregate (154)
+- Exchange (153)
   +- * HashAggregate (152)
      +- Union (151)
         :- * Project (140)
         :  +- * BroadcastHashJoin Inner BuildRight (139)
         :     :- * ColumnarToRow (137)
         :     :  +- Scan parquet default.store_sales (136)
         :     +- ReusedExchange (138)
         :- * Project (145)
         :  +- * BroadcastHashJoin Inner BuildRight (144)
         :     :- * ColumnarToRow (142)
         :     :  +- Scan parquet default.catalog_sales (141)
         :     +- ReusedExchange (143)
         +- * Project (150)
            +- * BroadcastHashJoin Inner BuildRight (149)
               :- * ColumnarToRow (147)
               :  +- Scan parquet default.web_sales (146)
               +- ReusedExchange (148)


(136) Scan parquet default.store_sales
Output [3]: [ss_quantity#175, ss_list_price#176, ss_sold_date_sk#177]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#177), dynamicpruningexpression(ss_sold_date_sk#177 IN dynamicpruning#13)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(137) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#175, ss_list_price#176, ss_sold_date_sk#177]

(138) ReusedExchange [Reuses operator id: 169]
Output [1]: [d_date_sk#178]

(139) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#177]
Right keys [1]: [d_date_sk#178]
Join condition: None

(140) Project [codegen id : 2]
Output [2]: [ss_quantity#175 AS quantity#179, ss_list_price#176 AS list_price#180]
Input [4]: [ss_quantity#175, ss_list_price#176, ss_sold_date_sk#177, d_date_sk#178]

(141) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#181, cs_list_price#182, cs_sold_date_sk#183]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#183), dynamicpruningexpression(cs_sold_date_sk#183 IN dynamicpruning#184)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(142) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#181, cs_list_price#182, cs_sold_date_sk#183]

(143) ReusedExchange [Reuses operator id: 159]
Output [1]: [d_date_sk#185]

(144) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#183]
Right keys [1]: [d_date_sk#185]
Join condition: None

(145) Project [codegen id : 4]
Output [2]: [cs_quantity#181 AS quantity#186, cs_list_price#182 AS list_price#187]
Input [4]: [cs_quantity#181, cs_list_price#182, cs_sold_date_sk#183, d_date_sk#185]

(146) Scan parquet default.web_sales
Output [3]: [ws_quantity#188, ws_list_price#189, ws_sold_date_sk#190]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#190), dynamicpruningexpression(ws_sold_date_sk#190 IN dynamicpruning#184)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(147) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#188, ws_list_price#189, ws_sold_date_sk#190]

(148) ReusedExchange [Reuses operator id: 159]
Output [1]: [d_date_sk#191]

(149) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#190]
Right keys [1]: [d_date_sk#191]
Join condition: None

(150) Project [codegen id : 6]
Output [2]: [ws_quantity#188 AS quantity#192, ws_list_price#189 AS list_price#193]
Input [4]: [ws_quantity#188, ws_list_price#189, ws_sold_date_sk#190, d_date_sk#191]

(151) Union

(152) HashAggregate [codegen id : 7]
Input [2]: [quantity#179, list_price#180]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(quantity#179 as decimal(12,2))) * promote_precision(cast(list_price#180 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#194, count#195]
Results [2]: [sum#196, count#197]

(153) Exchange
Input [2]: [sum#196, count#197]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#198]

(154) HashAggregate [codegen id : 8]
Input [2]: [sum#196, count#197]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(quantity#179 as decimal(12,2))) * promote_precision(cast(list_price#180 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(quantity#179 as decimal(12,2))) * promote_precision(cast(list_price#180 as decimal(12,2)))), DecimalType(18,2)))#199]
Results [1]: [avg(CheckOverflow((promote_precision(cast(quantity#179 as decimal(12,2))) * promote_precision(cast(list_price#180 as decimal(12,2)))), DecimalType(18,2)))#199 AS average_sales#200]

Subquery:2 Hosting operator id = 136 Hosting Expression = ss_sold_date_sk#177 IN dynamicpruning#13

Subquery:3 Hosting operator id = 141 Hosting Expression = cs_sold_date_sk#183 IN dynamicpruning#184
BroadcastExchange (159)
+- * Project (158)
   +- * Filter (157)
      +- * ColumnarToRow (156)
         +- Scan parquet default.date_dim (155)


(155) Scan parquet default.date_dim
Output [2]: [d_date_sk#185, d_year#201]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(156) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#185, d_year#201]

(157) Filter [codegen id : 1]
Input [2]: [d_date_sk#185, d_year#201]
Condition : (((isnotnull(d_year#201) AND (d_year#201 >= 1998)) AND (d_year#201 <= 2000)) AND isnotnull(d_date_sk#185))

(158) Project [codegen id : 1]
Output [1]: [d_date_sk#185]
Input [2]: [d_date_sk#185, d_year#201]

(159) BroadcastExchange
Input [1]: [d_date_sk#185]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#202]

Subquery:4 Hosting operator id = 146 Hosting Expression = ws_sold_date_sk#190 IN dynamicpruning#184

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (164)
+- * Project (163)
   +- * Filter (162)
      +- * ColumnarToRow (161)
         +- Scan parquet default.date_dim (160)


(160) Scan parquet default.date_dim
Output [3]: [d_date_sk#46, d_year#203, d_moy#204]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(161) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#46, d_year#203, d_moy#204]

(162) Filter [codegen id : 1]
Input [3]: [d_date_sk#46, d_year#203, d_moy#204]
Condition : ((((isnotnull(d_year#203) AND isnotnull(d_moy#204)) AND (d_year#203 = 2000)) AND (d_moy#204 = 11)) AND isnotnull(d_date_sk#46))

(163) Project [codegen id : 1]
Output [1]: [d_date_sk#46]
Input [3]: [d_date_sk#46, d_year#203, d_moy#204]

(164) BroadcastExchange
Input [1]: [d_date_sk#46]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#205]

Subquery:6 Hosting operator id = 9 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#13
BroadcastExchange (169)
+- * Project (168)
   +- * Filter (167)
      +- * ColumnarToRow (166)
         +- Scan parquet default.date_dim (165)


(165) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#206]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(166) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#206]

(167) Filter [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#206]
Condition : (((isnotnull(d_year#206) AND (d_year#206 >= 1999)) AND (d_year#206 <= 2001)) AND isnotnull(d_date_sk#14))

(168) Project [codegen id : 1]
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#206]

(169) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#207]

Subquery:7 Hosting operator id = 20 Hosting Expression = cs_sold_date_sk#21 IN dynamicpruning#13

Subquery:8 Hosting operator id = 43 Hosting Expression = ws_sold_date_sk#36 IN dynamicpruning#13

Subquery:9 Hosting operator id = 88 Hosting Expression = ReusedSubquery Subquery scalar-subquery#63, [id=#64]

Subquery:10 Hosting operator id = 71 Hosting Expression = cs_sold_date_sk#68 IN dynamicpruning#5

Subquery:11 Hosting operator id = 106 Hosting Expression = ReusedSubquery Subquery scalar-subquery#63, [id=#64]

Subquery:12 Hosting operator id = 89 Hosting Expression = ws_sold_date_sk#90 IN dynamicpruning#5


