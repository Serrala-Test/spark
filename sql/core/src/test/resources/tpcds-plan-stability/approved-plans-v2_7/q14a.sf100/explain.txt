== Physical Plan ==
TakeOrderedAndProject (136)
+- * HashAggregate (135)
   +- Exchange (134)
      +- * HashAggregate (133)
         +- Union (132)
            :- * HashAggregate (111)
            :  +- Exchange (110)
            :     +- * HashAggregate (109)
            :        +- Union (108)
            :           :- * Filter (77)
            :           :  +- * HashAggregate (76)
            :           :     +- Exchange (75)
            :           :        +- * HashAggregate (74)
            :           :           +- * Project (73)
            :           :              +- * BroadcastHashJoin Inner BuildRight (72)
            :           :                 :- * Project (65)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (64)
            :           :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (62)
            :           :                 :     :  :- * Filter (3)
            :           :                 :     :  :  +- * ColumnarToRow (2)
            :           :                 :     :  :     +- Scan parquet default.store_sales (1)
            :           :                 :     :  +- BroadcastExchange (61)
            :           :                 :     :     +- * HashAggregate (60)
            :           :                 :     :        +- Exchange (59)
            :           :                 :     :           +- * HashAggregate (58)
            :           :                 :     :              +- * Project (57)
            :           :                 :     :                 +- * BroadcastHashJoin Inner BuildRight (56)
            :           :                 :     :                    :- * Filter (6)
            :           :                 :     :                    :  +- * ColumnarToRow (5)
            :           :                 :     :                    :     +- Scan parquet default.item (4)
            :           :                 :     :                    +- BroadcastExchange (55)
            :           :                 :     :                       +- * HashAggregate (54)
            :           :                 :     :                          +- * HashAggregate (53)
            :           :                 :     :                             +- * BroadcastHashJoin LeftSemi BuildRight (52)
            :           :                 :     :                                :- * HashAggregate (38)
            :           :                 :     :                                :  +- Exchange (37)
            :           :                 :     :                                :     +- * HashAggregate (36)
            :           :                 :     :                                :        +- * Project (35)
            :           :                 :     :                                :           +- * BroadcastHashJoin Inner BuildRight (34)
            :           :                 :     :                                :              :- * Project (12)
            :           :                 :     :                                :              :  +- * BroadcastHashJoin Inner BuildRight (11)
            :           :                 :     :                                :              :     :- * Filter (9)
            :           :                 :     :                                :              :     :  +- * ColumnarToRow (8)
            :           :                 :     :                                :              :     :     +- Scan parquet default.store_sales (7)
            :           :                 :     :                                :              :     +- ReusedExchange (10)
            :           :                 :     :                                :              +- BroadcastExchange (33)
            :           :                 :     :                                :                 +- * BroadcastHashJoin LeftSemi BuildRight (32)
            :           :                 :     :                                :                    :- * Filter (15)
            :           :                 :     :                                :                    :  +- * ColumnarToRow (14)
            :           :                 :     :                                :                    :     +- Scan parquet default.item (13)
            :           :                 :     :                                :                    +- BroadcastExchange (31)
            :           :                 :     :                                :                       +- * HashAggregate (30)
            :           :                 :     :                                :                          +- Exchange (29)
            :           :                 :     :                                :                             +- * HashAggregate (28)
            :           :                 :     :                                :                                +- * Project (27)
            :           :                 :     :                                :                                   +- * BroadcastHashJoin Inner BuildRight (26)
            :           :                 :     :                                :                                      :- * Project (21)
            :           :                 :     :                                :                                      :  +- * BroadcastHashJoin Inner BuildRight (20)
            :           :                 :     :                                :                                      :     :- * Filter (18)
            :           :                 :     :                                :                                      :     :  +- * ColumnarToRow (17)
            :           :                 :     :                                :                                      :     :     +- Scan parquet default.catalog_sales (16)
            :           :                 :     :                                :                                      :     +- ReusedExchange (19)
            :           :                 :     :                                :                                      +- BroadcastExchange (25)
            :           :                 :     :                                :                                         +- * Filter (24)
            :           :                 :     :                                :                                            +- * ColumnarToRow (23)
            :           :                 :     :                                :                                               +- Scan parquet default.item (22)
            :           :                 :     :                                +- BroadcastExchange (51)
            :           :                 :     :                                   +- * HashAggregate (50)
            :           :                 :     :                                      +- Exchange (49)
            :           :                 :     :                                         +- * HashAggregate (48)
            :           :                 :     :                                            +- * Project (47)
            :           :                 :     :                                               +- * BroadcastHashJoin Inner BuildRight (46)
            :           :                 :     :                                                  :- * Project (44)
            :           :                 :     :                                                  :  +- * BroadcastHashJoin Inner BuildRight (43)
            :           :                 :     :                                                  :     :- * Filter (41)
            :           :                 :     :                                                  :     :  +- * ColumnarToRow (40)
            :           :                 :     :                                                  :     :     +- Scan parquet default.web_sales (39)
            :           :                 :     :                                                  :     +- ReusedExchange (42)
            :           :                 :     :                                                  +- ReusedExchange (45)
            :           :                 :     +- ReusedExchange (63)
            :           :                 +- BroadcastExchange (71)
            :           :                    +- * BroadcastHashJoin LeftSemi BuildRight (70)
            :           :                       :- * Filter (68)
            :           :                       :  +- * ColumnarToRow (67)
            :           :                       :     +- Scan parquet default.item (66)
            :           :                       +- ReusedExchange (69)
            :           :- * Filter (92)
            :           :  +- * HashAggregate (91)
            :           :     +- Exchange (90)
            :           :        +- * HashAggregate (89)
            :           :           +- * Project (88)
            :           :              +- * BroadcastHashJoin Inner BuildRight (87)
            :           :                 :- * Project (85)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (84)
            :           :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (82)
            :           :                 :     :  :- * Filter (80)
            :           :                 :     :  :  +- * ColumnarToRow (79)
            :           :                 :     :  :     +- Scan parquet default.catalog_sales (78)
            :           :                 :     :  +- ReusedExchange (81)
            :           :                 :     +- ReusedExchange (83)
            :           :                 +- ReusedExchange (86)
            :           +- * Filter (107)
            :              +- * HashAggregate (106)
            :                 +- Exchange (105)
            :                    +- * HashAggregate (104)
            :                       +- * Project (103)
            :                          +- * BroadcastHashJoin Inner BuildRight (102)
            :                             :- * Project (100)
            :                             :  +- * BroadcastHashJoin Inner BuildRight (99)
            :                             :     :- * BroadcastHashJoin LeftSemi BuildRight (97)
            :                             :     :  :- * Filter (95)
            :                             :     :  :  +- * ColumnarToRow (94)
            :                             :     :  :     +- Scan parquet default.web_sales (93)
            :                             :     :  +- ReusedExchange (96)
            :                             :     +- ReusedExchange (98)
            :                             +- ReusedExchange (101)
            :- * HashAggregate (116)
            :  +- Exchange (115)
            :     +- * HashAggregate (114)
            :        +- * HashAggregate (113)
            :           +- ReusedExchange (112)
            :- * HashAggregate (121)
            :  +- Exchange (120)
            :     +- * HashAggregate (119)
            :        +- * HashAggregate (118)
            :           +- ReusedExchange (117)
            :- * HashAggregate (126)
            :  +- Exchange (125)
            :     +- * HashAggregate (124)
            :        +- * HashAggregate (123)
            :           +- ReusedExchange (122)
            +- * HashAggregate (131)
               +- Exchange (130)
                  +- * HashAggregate (129)
                     +- * HashAggregate (128)
                        +- ReusedExchange (127)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 31]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 31]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 13]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(6) Filter [codegen id : 13]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(7) Scan parquet default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 7]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]

(9) Filter [codegen id : 7]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(10) ReusedExchange [Reuses operator id: 170]
Output [1]: [d_date_sk#13]

(11) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#13]
Join condition: None

(12) Project [codegen id : 7]
Output [1]: [ss_item_sk#10]
Input [3]: [ss_item_sk#10, ss_sold_date_sk#11, d_date_sk#13]

(13) Scan parquet default.item
Output [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(14) ColumnarToRow [codegen id : 6]
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]

(15) Filter [codegen id : 6]
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Condition : (((isnotnull(i_item_sk#14) AND isnotnull(i_brand_id#15)) AND isnotnull(i_class_id#16)) AND isnotnull(i_category_id#17))

(16) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#18, cs_sold_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#19), dynamicpruningexpression(cs_sold_date_sk#19 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(17) ColumnarToRow [codegen id : 4]
Input [2]: [cs_item_sk#18, cs_sold_date_sk#19]

(18) Filter [codegen id : 4]
Input [2]: [cs_item_sk#18, cs_sold_date_sk#19]
Condition : isnotnull(cs_item_sk#18)

(19) ReusedExchange [Reuses operator id: 170]
Output [1]: [d_date_sk#20]

(20) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#19]
Right keys [1]: [d_date_sk#20]
Join condition: None

(21) Project [codegen id : 4]
Output [1]: [cs_item_sk#18]
Input [3]: [cs_item_sk#18, cs_sold_date_sk#19, d_date_sk#20]

(22) Scan parquet default.item
Output [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(23) ColumnarToRow [codegen id : 3]
Input [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]

(24) Filter [codegen id : 3]
Input [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]
Condition : isnotnull(i_item_sk#21)

(25) BroadcastExchange
Input [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#25]

(26) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_item_sk#18]
Right keys [1]: [i_item_sk#21]
Join condition: None

(27) Project [codegen id : 4]
Output [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Input [5]: [cs_item_sk#18, i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]

(28) HashAggregate [codegen id : 4]
Input [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Keys [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]

(29) Exchange
Input [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Arguments: hashpartitioning(i_brand_id#22, i_class_id#23, i_category_id#24, 5), ENSURE_REQUIREMENTS, [id=#26]

(30) HashAggregate [codegen id : 5]
Input [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Keys [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]

(31) BroadcastExchange
Input [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#27]

(32) BroadcastHashJoin [codegen id : 6]
Left keys [6]: [coalesce(i_brand_id#15, 0), isnull(i_brand_id#15), coalesce(i_class_id#16, 0), isnull(i_class_id#16), coalesce(i_category_id#17, 0), isnull(i_category_id#17)]
Right keys [6]: [coalesce(i_brand_id#22, 0), isnull(i_brand_id#22), coalesce(i_class_id#23, 0), isnull(i_class_id#23), coalesce(i_category_id#24, 0), isnull(i_category_id#24)]
Join condition: None

(33) BroadcastExchange
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28]

(34) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_item_sk#10]
Right keys [1]: [i_item_sk#14]
Join condition: None

(35) Project [codegen id : 7]
Output [3]: [i_brand_id#15 AS brand_id#29, i_class_id#16 AS class_id#30, i_category_id#17 AS category_id#31]
Input [5]: [ss_item_sk#10, i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]

(36) HashAggregate [codegen id : 7]
Input [3]: [brand_id#29, class_id#30, category_id#31]
Keys [3]: [brand_id#29, class_id#30, category_id#31]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#29, class_id#30, category_id#31]

(37) Exchange
Input [3]: [brand_id#29, class_id#30, category_id#31]
Arguments: hashpartitioning(brand_id#29, class_id#30, category_id#31, 5), ENSURE_REQUIREMENTS, [id=#32]

(38) HashAggregate [codegen id : 12]
Input [3]: [brand_id#29, class_id#30, category_id#31]
Keys [3]: [brand_id#29, class_id#30, category_id#31]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#29, class_id#30, category_id#31]

(39) Scan parquet default.web_sales
Output [2]: [ws_item_sk#33, ws_sold_date_sk#34]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#34), dynamicpruningexpression(ws_sold_date_sk#34 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(40) ColumnarToRow [codegen id : 10]
Input [2]: [ws_item_sk#33, ws_sold_date_sk#34]

(41) Filter [codegen id : 10]
Input [2]: [ws_item_sk#33, ws_sold_date_sk#34]
Condition : isnotnull(ws_item_sk#33)

(42) ReusedExchange [Reuses operator id: 170]
Output [1]: [d_date_sk#35]

(43) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_sold_date_sk#34]
Right keys [1]: [d_date_sk#35]
Join condition: None

(44) Project [codegen id : 10]
Output [1]: [ws_item_sk#33]
Input [3]: [ws_item_sk#33, ws_sold_date_sk#34, d_date_sk#35]

(45) ReusedExchange [Reuses operator id: 25]
Output [4]: [i_item_sk#36, i_brand_id#37, i_class_id#38, i_category_id#39]

(46) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_item_sk#33]
Right keys [1]: [i_item_sk#36]
Join condition: None

(47) Project [codegen id : 10]
Output [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Input [5]: [ws_item_sk#33, i_item_sk#36, i_brand_id#37, i_class_id#38, i_category_id#39]

(48) HashAggregate [codegen id : 10]
Input [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Keys [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]

(49) Exchange
Input [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Arguments: hashpartitioning(i_brand_id#37, i_class_id#38, i_category_id#39, 5), ENSURE_REQUIREMENTS, [id=#40]

(50) HashAggregate [codegen id : 11]
Input [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Keys [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]

(51) BroadcastExchange
Input [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#41]

(52) BroadcastHashJoin [codegen id : 12]
Left keys [6]: [coalesce(brand_id#29, 0), isnull(brand_id#29), coalesce(class_id#30, 0), isnull(class_id#30), coalesce(category_id#31, 0), isnull(category_id#31)]
Right keys [6]: [coalesce(i_brand_id#37, 0), isnull(i_brand_id#37), coalesce(i_class_id#38, 0), isnull(i_class_id#38), coalesce(i_category_id#39, 0), isnull(i_category_id#39)]
Join condition: None

(53) HashAggregate [codegen id : 12]
Input [3]: [brand_id#29, class_id#30, category_id#31]
Keys [3]: [brand_id#29, class_id#30, category_id#31]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#29, class_id#30, category_id#31]

(54) HashAggregate [codegen id : 12]
Input [3]: [brand_id#29, class_id#30, category_id#31]
Keys [3]: [brand_id#29, class_id#30, category_id#31]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#29, class_id#30, category_id#31]

(55) BroadcastExchange
Input [3]: [brand_id#29, class_id#30, category_id#31]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#42]

(56) BroadcastHashJoin [codegen id : 13]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#29, class_id#30, category_id#31]
Join condition: None

(57) Project [codegen id : 13]
Output [1]: [i_item_sk#6 AS ss_item_sk#43]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#29, class_id#30, category_id#31]

(58) HashAggregate [codegen id : 13]
Input [1]: [ss_item_sk#43]
Keys [1]: [ss_item_sk#43]
Functions: []
Aggregate Attributes: []
Results [1]: [ss_item_sk#43]

(59) Exchange
Input [1]: [ss_item_sk#43]
Arguments: hashpartitioning(ss_item_sk#43, 5), ENSURE_REQUIREMENTS, [id=#44]

(60) HashAggregate [codegen id : 14]
Input [1]: [ss_item_sk#43]
Keys [1]: [ss_item_sk#43]
Functions: []
Aggregate Attributes: []
Results [1]: [ss_item_sk#43]

(61) BroadcastExchange
Input [1]: [ss_item_sk#43]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#45]

(62) BroadcastHashJoin [codegen id : 31]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#43]
Join condition: None

(63) ReusedExchange [Reuses operator id: 165]
Output [1]: [d_date_sk#46]

(64) BroadcastHashJoin [codegen id : 31]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#46]
Join condition: None

(65) Project [codegen id : 31]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#46]

(66) Scan parquet default.item
Output [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(67) ColumnarToRow [codegen id : 30]
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]

(68) Filter [codegen id : 30]
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Condition : isnotnull(i_item_sk#47)

(69) ReusedExchange [Reuses operator id: 61]
Output [1]: [ss_item_sk#43]

(70) BroadcastHashJoin [codegen id : 30]
Left keys [1]: [i_item_sk#47]
Right keys [1]: [ss_item_sk#43]
Join condition: None

(71) BroadcastExchange
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#51]

(72) BroadcastHashJoin [codegen id : 31]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#47]
Join condition: None

(73) Project [codegen id : 31]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#48, i_class_id#49, i_category_id#50]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]

(74) HashAggregate [codegen id : 31]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#48, i_class_id#49, i_category_id#50]
Keys [3]: [i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#52, isEmpty#53, count#54]
Results [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#55, isEmpty#56, count#57]

(75) Exchange
Input [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#55, isEmpty#56, count#57]
Arguments: hashpartitioning(i_brand_id#48, i_class_id#49, i_category_id#50, 5), ENSURE_REQUIREMENTS, [id=#58]

(76) HashAggregate [codegen id : 32]
Input [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#55, isEmpty#56, count#57]
Keys [3]: [i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#59, count(1)#60]
Results [6]: [store AS channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#59 AS sales#62, count(1)#60 AS number_sales#63]

(77) Filter [codegen id : 32]
Input [6]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sales#62, number_sales#63]
Condition : (isnotnull(sales#62) AND (cast(sales#62 as decimal(32,6)) > cast(Subquery scalar-subquery#64, [id=#65] as decimal(32,6))))

(78) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#66, cs_quantity#67, cs_list_price#68, cs_sold_date_sk#69]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#69), dynamicpruningexpression(cs_sold_date_sk#69 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(79) ColumnarToRow [codegen id : 63]
Input [4]: [cs_item_sk#66, cs_quantity#67, cs_list_price#68, cs_sold_date_sk#69]

(80) Filter [codegen id : 63]
Input [4]: [cs_item_sk#66, cs_quantity#67, cs_list_price#68, cs_sold_date_sk#69]
Condition : isnotnull(cs_item_sk#66)

(81) ReusedExchange [Reuses operator id: 61]
Output [1]: [ss_item_sk#43]

(82) BroadcastHashJoin [codegen id : 63]
Left keys [1]: [cs_item_sk#66]
Right keys [1]: [ss_item_sk#43]
Join condition: None

(83) ReusedExchange [Reuses operator id: 165]
Output [1]: [d_date_sk#70]

(84) BroadcastHashJoin [codegen id : 63]
Left keys [1]: [cs_sold_date_sk#69]
Right keys [1]: [d_date_sk#70]
Join condition: None

(85) Project [codegen id : 63]
Output [3]: [cs_item_sk#66, cs_quantity#67, cs_list_price#68]
Input [5]: [cs_item_sk#66, cs_quantity#67, cs_list_price#68, cs_sold_date_sk#69, d_date_sk#70]

(86) ReusedExchange [Reuses operator id: 71]
Output [4]: [i_item_sk#71, i_brand_id#72, i_class_id#73, i_category_id#74]

(87) BroadcastHashJoin [codegen id : 63]
Left keys [1]: [cs_item_sk#66]
Right keys [1]: [i_item_sk#71]
Join condition: None

(88) Project [codegen id : 63]
Output [5]: [cs_quantity#67, cs_list_price#68, i_brand_id#72, i_class_id#73, i_category_id#74]
Input [7]: [cs_item_sk#66, cs_quantity#67, cs_list_price#68, i_item_sk#71, i_brand_id#72, i_class_id#73, i_category_id#74]

(89) HashAggregate [codegen id : 63]
Input [5]: [cs_quantity#67, cs_list_price#68, i_brand_id#72, i_class_id#73, i_category_id#74]
Keys [3]: [i_brand_id#72, i_class_id#73, i_category_id#74]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#68 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#75, isEmpty#76, count#77]
Results [6]: [i_brand_id#72, i_class_id#73, i_category_id#74, sum#78, isEmpty#79, count#80]

(90) Exchange
Input [6]: [i_brand_id#72, i_class_id#73, i_category_id#74, sum#78, isEmpty#79, count#80]
Arguments: hashpartitioning(i_brand_id#72, i_class_id#73, i_category_id#74, 5), ENSURE_REQUIREMENTS, [id=#81]

(91) HashAggregate [codegen id : 64]
Input [6]: [i_brand_id#72, i_class_id#73, i_category_id#74, sum#78, isEmpty#79, count#80]
Keys [3]: [i_brand_id#72, i_class_id#73, i_category_id#74]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#68 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#82, count(1)#83]
Results [6]: [catalog AS channel#84, i_brand_id#72, i_class_id#73, i_category_id#74, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#82 AS sales#85, count(1)#83 AS number_sales#86]

(92) Filter [codegen id : 64]
Input [6]: [channel#84, i_brand_id#72, i_class_id#73, i_category_id#74, sales#85, number_sales#86]
Condition : (isnotnull(sales#85) AND (cast(sales#85 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#64, [id=#65] as decimal(32,6))))

(93) Scan parquet default.web_sales
Output [4]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, ws_sold_date_sk#90]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#90), dynamicpruningexpression(ws_sold_date_sk#90 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(94) ColumnarToRow [codegen id : 95]
Input [4]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, ws_sold_date_sk#90]

(95) Filter [codegen id : 95]
Input [4]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, ws_sold_date_sk#90]
Condition : isnotnull(ws_item_sk#87)

(96) ReusedExchange [Reuses operator id: 61]
Output [1]: [ss_item_sk#43]

(97) BroadcastHashJoin [codegen id : 95]
Left keys [1]: [ws_item_sk#87]
Right keys [1]: [ss_item_sk#43]
Join condition: None

(98) ReusedExchange [Reuses operator id: 165]
Output [1]: [d_date_sk#91]

(99) BroadcastHashJoin [codegen id : 95]
Left keys [1]: [ws_sold_date_sk#90]
Right keys [1]: [d_date_sk#91]
Join condition: None

(100) Project [codegen id : 95]
Output [3]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89]
Input [5]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, ws_sold_date_sk#90, d_date_sk#91]

(101) ReusedExchange [Reuses operator id: 71]
Output [4]: [i_item_sk#92, i_brand_id#93, i_class_id#94, i_category_id#95]

(102) BroadcastHashJoin [codegen id : 95]
Left keys [1]: [ws_item_sk#87]
Right keys [1]: [i_item_sk#92]
Join condition: None

(103) Project [codegen id : 95]
Output [5]: [ws_quantity#88, ws_list_price#89, i_brand_id#93, i_class_id#94, i_category_id#95]
Input [7]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, i_item_sk#92, i_brand_id#93, i_class_id#94, i_category_id#95]

(104) HashAggregate [codegen id : 95]
Input [5]: [ws_quantity#88, ws_list_price#89, i_brand_id#93, i_class_id#94, i_category_id#95]
Keys [3]: [i_brand_id#93, i_class_id#94, i_category_id#95]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#88 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#89 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#96, isEmpty#97, count#98]
Results [6]: [i_brand_id#93, i_class_id#94, i_category_id#95, sum#99, isEmpty#100, count#101]

(105) Exchange
Input [6]: [i_brand_id#93, i_class_id#94, i_category_id#95, sum#99, isEmpty#100, count#101]
Arguments: hashpartitioning(i_brand_id#93, i_class_id#94, i_category_id#95, 5), ENSURE_REQUIREMENTS, [id=#102]

(106) HashAggregate [codegen id : 96]
Input [6]: [i_brand_id#93, i_class_id#94, i_category_id#95, sum#99, isEmpty#100, count#101]
Keys [3]: [i_brand_id#93, i_class_id#94, i_category_id#95]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#88 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#89 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#88 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#89 as decimal(12,2)))), DecimalType(18,2), true))#103, count(1)#104]
Results [6]: [web AS channel#105, i_brand_id#93, i_class_id#94, i_category_id#95, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#88 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#89 as decimal(12,2)))), DecimalType(18,2), true))#103 AS sales#106, count(1)#104 AS number_sales#107]

(107) Filter [codegen id : 96]
Input [6]: [channel#105, i_brand_id#93, i_class_id#94, i_category_id#95, sales#106, number_sales#107]
Condition : (isnotnull(sales#106) AND (cast(sales#106 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#64, [id=#65] as decimal(32,6))))

(108) Union

(109) HashAggregate [codegen id : 97]
Input [6]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sales#62, number_sales#63]
Keys [4]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [partial_sum(sales#62), partial_sum(number_sales#63)]
Aggregate Attributes [3]: [sum#108, isEmpty#109, sum#110]
Results [7]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum#111, isEmpty#112, sum#113]

(110) Exchange
Input [7]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum#111, isEmpty#112, sum#113]
Arguments: hashpartitioning(channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, 5), ENSURE_REQUIREMENTS, [id=#114]

(111) HashAggregate [codegen id : 98]
Input [7]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum#111, isEmpty#112, sum#113]
Keys [4]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [sum(sales#62), sum(number_sales#63)]
Aggregate Attributes [2]: [sum(sales#62)#115, sum(number_sales#63)#116]
Results [6]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum(sales#62)#115 AS sum_sales#117, sum(number_sales#63)#116 AS number_sales#118]

(112) ReusedExchange [Reuses operator id: 110]
Output [7]: [channel#61, i_brand_id#119, i_class_id#120, i_category_id#121, sum#122, isEmpty#123, sum#124]

(113) HashAggregate [codegen id : 196]
Input [7]: [channel#61, i_brand_id#119, i_class_id#120, i_category_id#121, sum#122, isEmpty#123, sum#124]
Keys [4]: [channel#61, i_brand_id#119, i_class_id#120, i_category_id#121]
Functions [2]: [sum(sales#62), sum(number_sales#63)]
Aggregate Attributes [2]: [sum(sales#62)#125, sum(number_sales#63)#126]
Results [5]: [channel#61, i_brand_id#119, i_class_id#120, sum(sales#62)#125 AS sum_sales#117, sum(number_sales#63)#126 AS number_sales#118]

(114) HashAggregate [codegen id : 196]
Input [5]: [channel#61, i_brand_id#119, i_class_id#120, sum_sales#117, number_sales#118]
Keys [3]: [channel#61, i_brand_id#119, i_class_id#120]
Functions [2]: [partial_sum(sum_sales#117), partial_sum(number_sales#118)]
Aggregate Attributes [3]: [sum#127, isEmpty#128, sum#129]
Results [6]: [channel#61, i_brand_id#119, i_class_id#120, sum#130, isEmpty#131, sum#132]

(115) Exchange
Input [6]: [channel#61, i_brand_id#119, i_class_id#120, sum#130, isEmpty#131, sum#132]
Arguments: hashpartitioning(channel#61, i_brand_id#119, i_class_id#120, 5), ENSURE_REQUIREMENTS, [id=#133]

(116) HashAggregate [codegen id : 197]
Input [6]: [channel#61, i_brand_id#119, i_class_id#120, sum#130, isEmpty#131, sum#132]
Keys [3]: [channel#61, i_brand_id#119, i_class_id#120]
Functions [2]: [sum(sum_sales#117), sum(number_sales#118)]
Aggregate Attributes [2]: [sum(sum_sales#117)#134, sum(number_sales#118)#135]
Results [6]: [channel#61, i_brand_id#119, i_class_id#120, null AS i_category_id#136, sum(sum_sales#117)#134 AS sum(sum_sales)#137, sum(number_sales#118)#135 AS sum(number_sales)#138]

(117) ReusedExchange [Reuses operator id: 110]
Output [7]: [channel#61, i_brand_id#139, i_class_id#140, i_category_id#141, sum#142, isEmpty#143, sum#144]

(118) HashAggregate [codegen id : 295]
Input [7]: [channel#61, i_brand_id#139, i_class_id#140, i_category_id#141, sum#142, isEmpty#143, sum#144]
Keys [4]: [channel#61, i_brand_id#139, i_class_id#140, i_category_id#141]
Functions [2]: [sum(sales#62), sum(number_sales#63)]
Aggregate Attributes [2]: [sum(sales#62)#145, sum(number_sales#63)#146]
Results [4]: [channel#61, i_brand_id#139, sum(sales#62)#145 AS sum_sales#117, sum(number_sales#63)#146 AS number_sales#118]

(119) HashAggregate [codegen id : 295]
Input [4]: [channel#61, i_brand_id#139, sum_sales#117, number_sales#118]
Keys [2]: [channel#61, i_brand_id#139]
Functions [2]: [partial_sum(sum_sales#117), partial_sum(number_sales#118)]
Aggregate Attributes [3]: [sum#147, isEmpty#148, sum#149]
Results [5]: [channel#61, i_brand_id#139, sum#150, isEmpty#151, sum#152]

(120) Exchange
Input [5]: [channel#61, i_brand_id#139, sum#150, isEmpty#151, sum#152]
Arguments: hashpartitioning(channel#61, i_brand_id#139, 5), ENSURE_REQUIREMENTS, [id=#153]

(121) HashAggregate [codegen id : 296]
Input [5]: [channel#61, i_brand_id#139, sum#150, isEmpty#151, sum#152]
Keys [2]: [channel#61, i_brand_id#139]
Functions [2]: [sum(sum_sales#117), sum(number_sales#118)]
Aggregate Attributes [2]: [sum(sum_sales#117)#154, sum(number_sales#118)#155]
Results [6]: [channel#61, i_brand_id#139, null AS i_class_id#156, null AS i_category_id#157, sum(sum_sales#117)#154 AS sum(sum_sales)#158, sum(number_sales#118)#155 AS sum(number_sales)#159]

(122) ReusedExchange [Reuses operator id: 110]
Output [7]: [channel#61, i_brand_id#160, i_class_id#161, i_category_id#162, sum#163, isEmpty#164, sum#165]

(123) HashAggregate [codegen id : 394]
Input [7]: [channel#61, i_brand_id#160, i_class_id#161, i_category_id#162, sum#163, isEmpty#164, sum#165]
Keys [4]: [channel#61, i_brand_id#160, i_class_id#161, i_category_id#162]
Functions [2]: [sum(sales#62), sum(number_sales#63)]
Aggregate Attributes [2]: [sum(sales#62)#166, sum(number_sales#63)#167]
Results [3]: [channel#61, sum(sales#62)#166 AS sum_sales#117, sum(number_sales#63)#167 AS number_sales#118]

(124) HashAggregate [codegen id : 394]
Input [3]: [channel#61, sum_sales#117, number_sales#118]
Keys [1]: [channel#61]
Functions [2]: [partial_sum(sum_sales#117), partial_sum(number_sales#118)]
Aggregate Attributes [3]: [sum#168, isEmpty#169, sum#170]
Results [4]: [channel#61, sum#171, isEmpty#172, sum#173]

(125) Exchange
Input [4]: [channel#61, sum#171, isEmpty#172, sum#173]
Arguments: hashpartitioning(channel#61, 5), ENSURE_REQUIREMENTS, [id=#174]

(126) HashAggregate [codegen id : 395]
Input [4]: [channel#61, sum#171, isEmpty#172, sum#173]
Keys [1]: [channel#61]
Functions [2]: [sum(sum_sales#117), sum(number_sales#118)]
Aggregate Attributes [2]: [sum(sum_sales#117)#175, sum(number_sales#118)#176]
Results [6]: [channel#61, null AS i_brand_id#177, null AS i_class_id#178, null AS i_category_id#179, sum(sum_sales#117)#175 AS sum(sum_sales)#180, sum(number_sales#118)#176 AS sum(number_sales)#181]

(127) ReusedExchange [Reuses operator id: 110]
Output [7]: [channel#61, i_brand_id#182, i_class_id#183, i_category_id#184, sum#185, isEmpty#186, sum#187]

(128) HashAggregate [codegen id : 493]
Input [7]: [channel#61, i_brand_id#182, i_class_id#183, i_category_id#184, sum#185, isEmpty#186, sum#187]
Keys [4]: [channel#61, i_brand_id#182, i_class_id#183, i_category_id#184]
Functions [2]: [sum(sales#62), sum(number_sales#63)]
Aggregate Attributes [2]: [sum(sales#62)#188, sum(number_sales#63)#189]
Results [2]: [sum(sales#62)#188 AS sum_sales#117, sum(number_sales#63)#189 AS number_sales#118]

(129) HashAggregate [codegen id : 493]
Input [2]: [sum_sales#117, number_sales#118]
Keys: []
Functions [2]: [partial_sum(sum_sales#117), partial_sum(number_sales#118)]
Aggregate Attributes [3]: [sum#190, isEmpty#191, sum#192]
Results [3]: [sum#193, isEmpty#194, sum#195]

(130) Exchange
Input [3]: [sum#193, isEmpty#194, sum#195]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#196]

(131) HashAggregate [codegen id : 494]
Input [3]: [sum#193, isEmpty#194, sum#195]
Keys: []
Functions [2]: [sum(sum_sales#117), sum(number_sales#118)]
Aggregate Attributes [2]: [sum(sum_sales#117)#197, sum(number_sales#118)#198]
Results [6]: [null AS channel#199, null AS i_brand_id#200, null AS i_class_id#201, null AS i_category_id#202, sum(sum_sales#117)#197 AS sum(sum_sales)#203, sum(number_sales#118)#198 AS sum(number_sales)#204]

(132) Union

(133) HashAggregate [codegen id : 495]
Input [6]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#117, number_sales#118]
Keys [6]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#117, number_sales#118]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#117, number_sales#118]

(134) Exchange
Input [6]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#117, number_sales#118]
Arguments: hashpartitioning(channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#117, number_sales#118, 5), ENSURE_REQUIREMENTS, [id=#205]

(135) HashAggregate [codegen id : 496]
Input [6]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#117, number_sales#118]
Keys [6]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#117, number_sales#118]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#117, number_sales#118]

(136) TakeOrderedAndProject
Input [6]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#117, number_sales#118]
Arguments: 100, [channel#61 ASC NULLS FIRST, i_brand_id#48 ASC NULLS FIRST, i_class_id#49 ASC NULLS FIRST, i_category_id#50 ASC NULLS FIRST], [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#117, number_sales#118]

===== Subqueries =====

Subquery:1 Hosting operator id = 77 Hosting Expression = Subquery scalar-subquery#64, [id=#65]
* HashAggregate (155)
+- Exchange (154)
   +- * HashAggregate (153)
      +- Union (152)
         :- * Project (141)
         :  +- * BroadcastHashJoin Inner BuildRight (140)
         :     :- * ColumnarToRow (138)
         :     :  +- Scan parquet default.store_sales (137)
         :     +- ReusedExchange (139)
         :- * Project (146)
         :  +- * BroadcastHashJoin Inner BuildRight (145)
         :     :- * ColumnarToRow (143)
         :     :  +- Scan parquet default.catalog_sales (142)
         :     +- ReusedExchange (144)
         +- * Project (151)
            +- * BroadcastHashJoin Inner BuildRight (150)
               :- * ColumnarToRow (148)
               :  +- Scan parquet default.web_sales (147)
               +- ReusedExchange (149)


(137) Scan parquet default.store_sales
Output [3]: [ss_quantity#206, ss_list_price#207, ss_sold_date_sk#208]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#208), dynamicpruningexpression(ss_sold_date_sk#208 IN dynamicpruning#12)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(138) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#206, ss_list_price#207, ss_sold_date_sk#208]

(139) ReusedExchange [Reuses operator id: 170]
Output [1]: [d_date_sk#209]

(140) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#208]
Right keys [1]: [d_date_sk#209]
Join condition: None

(141) Project [codegen id : 2]
Output [2]: [ss_quantity#206 AS quantity#210, ss_list_price#207 AS list_price#211]
Input [4]: [ss_quantity#206, ss_list_price#207, ss_sold_date_sk#208, d_date_sk#209]

(142) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#212, cs_list_price#213, cs_sold_date_sk#214]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#214), dynamicpruningexpression(cs_sold_date_sk#214 IN dynamicpruning#215)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(143) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#212, cs_list_price#213, cs_sold_date_sk#214]

(144) ReusedExchange [Reuses operator id: 160]
Output [1]: [d_date_sk#216]

(145) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#214]
Right keys [1]: [d_date_sk#216]
Join condition: None

(146) Project [codegen id : 4]
Output [2]: [cs_quantity#212 AS quantity#217, cs_list_price#213 AS list_price#218]
Input [4]: [cs_quantity#212, cs_list_price#213, cs_sold_date_sk#214, d_date_sk#216]

(147) Scan parquet default.web_sales
Output [3]: [ws_quantity#219, ws_list_price#220, ws_sold_date_sk#221]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#221), dynamicpruningexpression(ws_sold_date_sk#221 IN dynamicpruning#215)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(148) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#219, ws_list_price#220, ws_sold_date_sk#221]

(149) ReusedExchange [Reuses operator id: 160]
Output [1]: [d_date_sk#222]

(150) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#221]
Right keys [1]: [d_date_sk#222]
Join condition: None

(151) Project [codegen id : 6]
Output [2]: [ws_quantity#219 AS quantity#223, ws_list_price#220 AS list_price#224]
Input [4]: [ws_quantity#219, ws_list_price#220, ws_sold_date_sk#221, d_date_sk#222]

(152) Union

(153) HashAggregate [codegen id : 7]
Input [2]: [quantity#210, list_price#211]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#210 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#211 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#225, count#226]
Results [2]: [sum#227, count#228]

(154) Exchange
Input [2]: [sum#227, count#228]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#229]

(155) HashAggregate [codegen id : 8]
Input [2]: [sum#227, count#228]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#210 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#211 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#210 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#211 as decimal(12,2)))), DecimalType(18,2), true))#230]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#210 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#211 as decimal(12,2)))), DecimalType(18,2), true))#230 AS average_sales#231]

Subquery:2 Hosting operator id = 137 Hosting Expression = ss_sold_date_sk#208 IN dynamicpruning#12

Subquery:3 Hosting operator id = 142 Hosting Expression = cs_sold_date_sk#214 IN dynamicpruning#215
BroadcastExchange (160)
+- * Project (159)
   +- * Filter (158)
      +- * ColumnarToRow (157)
         +- Scan parquet default.date_dim (156)


(156) Scan parquet default.date_dim
Output [2]: [d_date_sk#216, d_year#232]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(157) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#216, d_year#232]

(158) Filter [codegen id : 1]
Input [2]: [d_date_sk#216, d_year#232]
Condition : (((isnotnull(d_year#232) AND (d_year#232 >= 1998)) AND (d_year#232 <= 2000)) AND isnotnull(d_date_sk#216))

(159) Project [codegen id : 1]
Output [1]: [d_date_sk#216]
Input [2]: [d_date_sk#216, d_year#232]

(160) BroadcastExchange
Input [1]: [d_date_sk#216]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#233]

Subquery:4 Hosting operator id = 147 Hosting Expression = ws_sold_date_sk#221 IN dynamicpruning#215

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (165)
+- * Project (164)
   +- * Filter (163)
      +- * ColumnarToRow (162)
         +- Scan parquet default.date_dim (161)


(161) Scan parquet default.date_dim
Output [3]: [d_date_sk#46, d_year#234, d_moy#235]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(162) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#46, d_year#234, d_moy#235]

(163) Filter [codegen id : 1]
Input [3]: [d_date_sk#46, d_year#234, d_moy#235]
Condition : ((((isnotnull(d_year#234) AND isnotnull(d_moy#235)) AND (d_year#234 = 2000)) AND (d_moy#235 = 11)) AND isnotnull(d_date_sk#46))

(164) Project [codegen id : 1]
Output [1]: [d_date_sk#46]
Input [3]: [d_date_sk#46, d_year#234, d_moy#235]

(165) BroadcastExchange
Input [1]: [d_date_sk#46]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#236]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (170)
+- * Project (169)
   +- * Filter (168)
      +- * ColumnarToRow (167)
         +- Scan parquet default.date_dim (166)


(166) Scan parquet default.date_dim
Output [2]: [d_date_sk#13, d_year#237]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(167) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#13, d_year#237]

(168) Filter [codegen id : 1]
Input [2]: [d_date_sk#13, d_year#237]
Condition : (((isnotnull(d_year#237) AND (d_year#237 >= 1999)) AND (d_year#237 <= 2001)) AND isnotnull(d_date_sk#13))

(169) Project [codegen id : 1]
Output [1]: [d_date_sk#13]
Input [2]: [d_date_sk#13, d_year#237]

(170) BroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#238]

Subquery:7 Hosting operator id = 16 Hosting Expression = cs_sold_date_sk#19 IN dynamicpruning#12

Subquery:8 Hosting operator id = 39 Hosting Expression = ws_sold_date_sk#34 IN dynamicpruning#12

Subquery:9 Hosting operator id = 92 Hosting Expression = ReusedSubquery Subquery scalar-subquery#64, [id=#65]

Subquery:10 Hosting operator id = 78 Hosting Expression = cs_sold_date_sk#69 IN dynamicpruning#5

Subquery:11 Hosting operator id = 107 Hosting Expression = ReusedSubquery Subquery scalar-subquery#64, [id=#65]

Subquery:12 Hosting operator id = 93 Hosting Expression = ws_sold_date_sk#90 IN dynamicpruning#5


