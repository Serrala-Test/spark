== Physical Plan ==
TakeOrderedAndProject (133)
+- * HashAggregate (132)
   +- Exchange (131)
      +- * HashAggregate (130)
         +- Union (129)
            :- * HashAggregate (108)
            :  +- Exchange (107)
            :     +- * HashAggregate (106)
            :        +- Union (105)
            :           :- * Filter (72)
            :           :  +- * HashAggregate (71)
            :           :     +- Exchange (70)
            :           :        +- * HashAggregate (69)
            :           :           +- * Project (68)
            :           :              +- * BroadcastHashJoin Inner BuildRight (67)
            :           :                 :- * Project (60)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (59)
            :           :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (57)
            :           :                 :     :  :- * Filter (3)
            :           :                 :     :  :  +- * ColumnarToRow (2)
            :           :                 :     :  :     +- Scan parquet spark_catalog.default.store_sales (1)
            :           :                 :     :  +- BroadcastExchange (56)
            :           :                 :     :     +- * Project (55)
            :           :                 :     :        +- * BroadcastHashJoin Inner BuildRight (54)
            :           :                 :     :           :- * Filter (6)
            :           :                 :     :           :  +- * ColumnarToRow (5)
            :           :                 :     :           :     +- Scan parquet spark_catalog.default.item (4)
            :           :                 :     :           +- BroadcastExchange (53)
            :           :                 :     :              +- * SortMergeJoin LeftSemi (52)
            :           :                 :     :                 :- * Sort (40)
            :           :                 :     :                 :  +- Exchange (39)
            :           :                 :     :                 :     +- * HashAggregate (38)
            :           :                 :     :                 :        +- Exchange (37)
            :           :                 :     :                 :           +- * HashAggregate (36)
            :           :                 :     :                 :              +- * SortMergeJoin LeftSemi (35)
            :           :                 :     :                 :                 :- * Sort (20)
            :           :                 :     :                 :                 :  +- Exchange (19)
            :           :                 :     :                 :                 :     +- * Project (18)
            :           :                 :     :                 :                 :        +- * BroadcastHashJoin Inner BuildRight (17)
            :           :                 :     :                 :                 :           :- * Project (12)
            :           :                 :     :                 :                 :           :  +- * BroadcastHashJoin Inner BuildRight (11)
            :           :                 :     :                 :                 :           :     :- * Filter (9)
            :           :                 :     :                 :                 :           :     :  +- * ColumnarToRow (8)
            :           :                 :     :                 :                 :           :     :     +- Scan parquet spark_catalog.default.store_sales (7)
            :           :                 :     :                 :                 :           :     +- ReusedExchange (10)
            :           :                 :     :                 :                 :           +- BroadcastExchange (16)
            :           :                 :     :                 :                 :              +- * Filter (15)
            :           :                 :     :                 :                 :                 +- * ColumnarToRow (14)
            :           :                 :     :                 :                 :                    +- Scan parquet spark_catalog.default.item (13)
            :           :                 :     :                 :                 +- * Sort (34)
            :           :                 :     :                 :                    +- Exchange (33)
            :           :                 :     :                 :                       +- * Project (32)
            :           :                 :     :                 :                          +- * BroadcastHashJoin Inner BuildRight (31)
            :           :                 :     :                 :                             :- * Project (26)
            :           :                 :     :                 :                             :  +- * BroadcastHashJoin Inner BuildRight (25)
            :           :                 :     :                 :                             :     :- * Filter (23)
            :           :                 :     :                 :                             :     :  +- * ColumnarToRow (22)
            :           :                 :     :                 :                             :     :     +- Scan parquet spark_catalog.default.catalog_sales (21)
            :           :                 :     :                 :                             :     +- ReusedExchange (24)
            :           :                 :     :                 :                             +- BroadcastExchange (30)
            :           :                 :     :                 :                                +- * Filter (29)
            :           :                 :     :                 :                                   +- * ColumnarToRow (28)
            :           :                 :     :                 :                                      +- Scan parquet spark_catalog.default.item (27)
            :           :                 :     :                 +- * Sort (51)
            :           :                 :     :                    +- Exchange (50)
            :           :                 :     :                       +- * Project (49)
            :           :                 :     :                          +- * BroadcastHashJoin Inner BuildRight (48)
            :           :                 :     :                             :- * Project (46)
            :           :                 :     :                             :  +- * BroadcastHashJoin Inner BuildRight (45)
            :           :                 :     :                             :     :- * Filter (43)
            :           :                 :     :                             :     :  +- * ColumnarToRow (42)
            :           :                 :     :                             :     :     +- Scan parquet spark_catalog.default.web_sales (41)
            :           :                 :     :                             :     +- ReusedExchange (44)
            :           :                 :     :                             +- ReusedExchange (47)
            :           :                 :     +- ReusedExchange (58)
            :           :                 +- BroadcastExchange (66)
            :           :                    +- * BroadcastHashJoin LeftSemi BuildRight (65)
            :           :                       :- * Filter (63)
            :           :                       :  +- * ColumnarToRow (62)
            :           :                       :     +- Scan parquet spark_catalog.default.item (61)
            :           :                       +- ReusedExchange (64)
            :           :- * Project (88)
            :           :  +- * Filter (87)
            :           :     +- * HashAggregate (86)
            :           :        +- Exchange (85)
            :           :           +- * HashAggregate (84)
            :           :              +- * Project (83)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (82)
            :           :                    :- * Project (80)
            :           :                    :  +- * BroadcastHashJoin Inner BuildRight (79)
            :           :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (77)
            :           :                    :     :  :- * Filter (75)
            :           :                    :     :  :  +- * ColumnarToRow (74)
            :           :                    :     :  :     +- Scan parquet spark_catalog.default.catalog_sales (73)
            :           :                    :     :  +- ReusedExchange (76)
            :           :                    :     +- ReusedExchange (78)
            :           :                    +- ReusedExchange (81)
            :           +- * Project (104)
            :              +- * Filter (103)
            :                 +- * HashAggregate (102)
            :                    +- Exchange (101)
            :                       +- * HashAggregate (100)
            :                          +- * Project (99)
            :                             +- * BroadcastHashJoin Inner BuildRight (98)
            :                                :- * Project (96)
            :                                :  +- * BroadcastHashJoin Inner BuildRight (95)
            :                                :     :- * BroadcastHashJoin LeftSemi BuildRight (93)
            :                                :     :  :- * Filter (91)
            :                                :     :  :  +- * ColumnarToRow (90)
            :                                :     :  :     +- Scan parquet spark_catalog.default.web_sales (89)
            :                                :     :  +- ReusedExchange (92)
            :                                :     +- ReusedExchange (94)
            :                                +- ReusedExchange (97)
            :- * HashAggregate (113)
            :  +- Exchange (112)
            :     +- * HashAggregate (111)
            :        +- * HashAggregate (110)
            :           +- ReusedExchange (109)
            :- * HashAggregate (118)
            :  +- Exchange (117)
            :     +- * HashAggregate (116)
            :        +- * HashAggregate (115)
            :           +- ReusedExchange (114)
            :- * HashAggregate (123)
            :  +- Exchange (122)
            :     +- * HashAggregate (121)
            :        +- * HashAggregate (120)
            :           +- ReusedExchange (119)
            +- * HashAggregate (128)
               +- Exchange (127)
                  +- * HashAggregate (126)
                     +- * HashAggregate (125)
                        +- ReusedExchange (124)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 37]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 37]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 17]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(6) Filter [codegen id : 17]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(7) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 3]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]

(9) Filter [codegen id : 3]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(10) ReusedExchange [Reuses operator id: 167]
Output [1]: [d_date_sk#11]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(12) Project [codegen id : 3]
Output [1]: [ss_item_sk#1]
Input [3]: [ss_item_sk#1, ss_sold_date_sk#4, d_date_sk#11]

(13) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(14) ColumnarToRow [codegen id : 2]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(15) Filter [codegen id : 2]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : (((isnotnull(i_item_sk#6) AND isnotnull(i_brand_id#7)) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(16) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(17) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(18) Project [codegen id : 3]
Output [3]: [i_brand_id#7 AS brand_id#12, i_class_id#8 AS class_id#13, i_category_id#9 AS category_id#14]
Input [5]: [ss_item_sk#1, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(19) Exchange
Input [3]: [brand_id#12, class_id#13, category_id#14]
Arguments: hashpartitioning(coalesce(brand_id#12, 0), isnull(brand_id#12), coalesce(class_id#13, 0), isnull(class_id#13), coalesce(category_id#14, 0), isnull(category_id#14), 5), ENSURE_REQUIREMENTS, [plan_id=2]

(20) Sort [codegen id : 4]
Input [3]: [brand_id#12, class_id#13, category_id#14]
Arguments: [coalesce(brand_id#12, 0) ASC NULLS FIRST, isnull(brand_id#12) ASC NULLS FIRST, coalesce(class_id#13, 0) ASC NULLS FIRST, isnull(class_id#13) ASC NULLS FIRST, coalesce(category_id#14, 0) ASC NULLS FIRST, isnull(category_id#14) ASC NULLS FIRST], false, 0

(21) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_item_sk#15, cs_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#16), dynamicpruningexpression(cs_sold_date_sk#16 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(22) ColumnarToRow [codegen id : 7]
Input [2]: [cs_item_sk#15, cs_sold_date_sk#16]

(23) Filter [codegen id : 7]
Input [2]: [cs_item_sk#15, cs_sold_date_sk#16]
Condition : isnotnull(cs_item_sk#15)

(24) ReusedExchange [Reuses operator id: 167]
Output [1]: [d_date_sk#11]

(25) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(26) Project [codegen id : 7]
Output [1]: [cs_item_sk#15]
Input [3]: [cs_item_sk#15, cs_sold_date_sk#16, d_date_sk#11]

(27) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(28) ColumnarToRow [codegen id : 6]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(29) Filter [codegen id : 6]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : isnotnull(i_item_sk#6)

(30) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(31) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cs_item_sk#15]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(32) Project [codegen id : 7]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [cs_item_sk#15, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(33) Exchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9), 5), ENSURE_REQUIREMENTS, [plan_id=4]

(34) Sort [codegen id : 8]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: [coalesce(i_brand_id#7, 0) ASC NULLS FIRST, isnull(i_brand_id#7) ASC NULLS FIRST, coalesce(i_class_id#8, 0) ASC NULLS FIRST, isnull(i_class_id#8) ASC NULLS FIRST, coalesce(i_category_id#9, 0) ASC NULLS FIRST, isnull(i_category_id#9) ASC NULLS FIRST], false, 0

(35) SortMergeJoin [codegen id : 9]
Left keys [6]: [coalesce(brand_id#12, 0), isnull(brand_id#12), coalesce(class_id#13, 0), isnull(class_id#13), coalesce(category_id#14, 0), isnull(category_id#14)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join type: LeftSemi
Join condition: None

(36) HashAggregate [codegen id : 9]
Input [3]: [brand_id#12, class_id#13, category_id#14]
Keys [3]: [brand_id#12, class_id#13, category_id#14]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#12, class_id#13, category_id#14]

(37) Exchange
Input [3]: [brand_id#12, class_id#13, category_id#14]
Arguments: hashpartitioning(brand_id#12, class_id#13, category_id#14, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(38) HashAggregate [codegen id : 10]
Input [3]: [brand_id#12, class_id#13, category_id#14]
Keys [3]: [brand_id#12, class_id#13, category_id#14]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#12, class_id#13, category_id#14]

(39) Exchange
Input [3]: [brand_id#12, class_id#13, category_id#14]
Arguments: hashpartitioning(coalesce(brand_id#12, 0), isnull(brand_id#12), coalesce(class_id#13, 0), isnull(class_id#13), coalesce(category_id#14, 0), isnull(category_id#14), 5), ENSURE_REQUIREMENTS, [plan_id=6]

(40) Sort [codegen id : 11]
Input [3]: [brand_id#12, class_id#13, category_id#14]
Arguments: [coalesce(brand_id#12, 0) ASC NULLS FIRST, isnull(brand_id#12) ASC NULLS FIRST, coalesce(class_id#13, 0) ASC NULLS FIRST, isnull(class_id#13) ASC NULLS FIRST, coalesce(category_id#14, 0) ASC NULLS FIRST, isnull(category_id#14) ASC NULLS FIRST], false, 0

(41) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_item_sk#17, ws_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#18), dynamicpruningexpression(ws_sold_date_sk#18 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(42) ColumnarToRow [codegen id : 14]
Input [2]: [ws_item_sk#17, ws_sold_date_sk#18]

(43) Filter [codegen id : 14]
Input [2]: [ws_item_sk#17, ws_sold_date_sk#18]
Condition : isnotnull(ws_item_sk#17)

(44) ReusedExchange [Reuses operator id: 167]
Output [1]: [d_date_sk#11]

(45) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_sold_date_sk#18]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(46) Project [codegen id : 14]
Output [1]: [ws_item_sk#17]
Input [3]: [ws_item_sk#17, ws_sold_date_sk#18, d_date_sk#11]

(47) ReusedExchange [Reuses operator id: 30]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(48) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_item_sk#17]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(49) Project [codegen id : 14]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [ws_item_sk#17, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(50) Exchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9), 5), ENSURE_REQUIREMENTS, [plan_id=7]

(51) Sort [codegen id : 15]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: [coalesce(i_brand_id#7, 0) ASC NULLS FIRST, isnull(i_brand_id#7) ASC NULLS FIRST, coalesce(i_class_id#8, 0) ASC NULLS FIRST, isnull(i_class_id#8) ASC NULLS FIRST, coalesce(i_category_id#9, 0) ASC NULLS FIRST, isnull(i_category_id#9) ASC NULLS FIRST], false, 0

(52) SortMergeJoin [codegen id : 16]
Left keys [6]: [coalesce(brand_id#12, 0), isnull(brand_id#12), coalesce(class_id#13, 0), isnull(class_id#13), coalesce(category_id#14, 0), isnull(category_id#14)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join type: LeftSemi
Join condition: None

(53) BroadcastExchange
Input [3]: [brand_id#12, class_id#13, category_id#14]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [plan_id=8]

(54) BroadcastHashJoin [codegen id : 17]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#12, class_id#13, category_id#14]
Join type: Inner
Join condition: None

(55) Project [codegen id : 17]
Output [1]: [i_item_sk#6 AS ss_item_sk#19]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#12, class_id#13, category_id#14]

(56) BroadcastExchange
Input [1]: [ss_item_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

(57) BroadcastHashJoin [codegen id : 37]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#19]
Join type: LeftSemi
Join condition: None

(58) ReusedExchange [Reuses operator id: 162]
Output [1]: [d_date_sk#11]

(59) BroadcastHashJoin [codegen id : 37]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(60) Project [codegen id : 37]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#11]

(61) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(62) ColumnarToRow [codegen id : 36]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(63) Filter [codegen id : 36]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : isnotnull(i_item_sk#6)

(64) ReusedExchange [Reuses operator id: 56]
Output [1]: [ss_item_sk#19]

(65) BroadcastHashJoin [codegen id : 36]
Left keys [1]: [i_item_sk#6]
Right keys [1]: [ss_item_sk#19]
Join type: LeftSemi
Join condition: None

(66) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=10]

(67) BroadcastHashJoin [codegen id : 37]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(68) Project [codegen id : 37]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(69) HashAggregate [codegen id : 37]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), partial_count(1)]
Aggregate Attributes [3]: [sum#20, isEmpty#21, count#22]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#23, isEmpty#24, count#25]

(70) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#23, isEmpty#24, count#25]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(71) HashAggregate [codegen id : 38]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#23, isEmpty#24, count#25]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#26, count(1)#27]
Results [6]: [store AS channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#26 AS sales#29, count(1)#27 AS number_sales#30]

(72) Filter [codegen id : 38]
Input [6]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sales#29, number_sales#30]
Condition : (isnotnull(sales#29) AND (cast(sales#29 as decimal(32,6)) > cast(Subquery scalar-subquery#31, [id=#32] as decimal(32,6))))

(73) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_item_sk#15, cs_quantity#33, cs_list_price#34, cs_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#16), dynamicpruningexpression(cs_sold_date_sk#16 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(74) ColumnarToRow [codegen id : 75]
Input [4]: [cs_item_sk#15, cs_quantity#33, cs_list_price#34, cs_sold_date_sk#16]

(75) Filter [codegen id : 75]
Input [4]: [cs_item_sk#15, cs_quantity#33, cs_list_price#34, cs_sold_date_sk#16]
Condition : isnotnull(cs_item_sk#15)

(76) ReusedExchange [Reuses operator id: 56]
Output [1]: [ss_item_sk#19]

(77) BroadcastHashJoin [codegen id : 75]
Left keys [1]: [cs_item_sk#15]
Right keys [1]: [ss_item_sk#19]
Join type: LeftSemi
Join condition: None

(78) ReusedExchange [Reuses operator id: 162]
Output [1]: [d_date_sk#11]

(79) BroadcastHashJoin [codegen id : 75]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(80) Project [codegen id : 75]
Output [3]: [cs_item_sk#15, cs_quantity#33, cs_list_price#34]
Input [5]: [cs_item_sk#15, cs_quantity#33, cs_list_price#34, cs_sold_date_sk#16, d_date_sk#11]

(81) ReusedExchange [Reuses operator id: 66]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(82) BroadcastHashJoin [codegen id : 75]
Left keys [1]: [cs_item_sk#15]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(83) Project [codegen id : 75]
Output [5]: [cs_quantity#33, cs_list_price#34, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [cs_item_sk#15, cs_quantity#33, cs_list_price#34, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(84) HashAggregate [codegen id : 75]
Input [5]: [cs_quantity#33, cs_list_price#34, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum((cast(cs_quantity#33 as decimal(10,0)) * cs_list_price#34)), partial_count(1)]
Aggregate Attributes [3]: [sum#35, isEmpty#36, count#37]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#38, isEmpty#39, count#40]

(85) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#38, isEmpty#39, count#40]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(86) HashAggregate [codegen id : 76]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#38, isEmpty#39, count#40]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum((cast(cs_quantity#33 as decimal(10,0)) * cs_list_price#34)), count(1)]
Aggregate Attributes [2]: [sum((cast(cs_quantity#33 as decimal(10,0)) * cs_list_price#34))#41, count(1)#42]
Results [5]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum((cast(cs_quantity#33 as decimal(10,0)) * cs_list_price#34))#41 AS sales#43, count(1)#42 AS number_sales#44]

(87) Filter [codegen id : 76]
Input [5]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44]
Condition : (isnotnull(sales#43) AND (cast(sales#43 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#31, [id=#32] as decimal(32,6))))

(88) Project [codegen id : 76]
Output [6]: [catalog AS channel#45, i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44]
Input [5]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44]

(89) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#17, ws_quantity#46, ws_list_price#47, ws_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#18), dynamicpruningexpression(ws_sold_date_sk#18 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(90) ColumnarToRow [codegen id : 113]
Input [4]: [ws_item_sk#17, ws_quantity#46, ws_list_price#47, ws_sold_date_sk#18]

(91) Filter [codegen id : 113]
Input [4]: [ws_item_sk#17, ws_quantity#46, ws_list_price#47, ws_sold_date_sk#18]
Condition : isnotnull(ws_item_sk#17)

(92) ReusedExchange [Reuses operator id: 56]
Output [1]: [ss_item_sk#19]

(93) BroadcastHashJoin [codegen id : 113]
Left keys [1]: [ws_item_sk#17]
Right keys [1]: [ss_item_sk#19]
Join type: LeftSemi
Join condition: None

(94) ReusedExchange [Reuses operator id: 162]
Output [1]: [d_date_sk#11]

(95) BroadcastHashJoin [codegen id : 113]
Left keys [1]: [ws_sold_date_sk#18]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(96) Project [codegen id : 113]
Output [3]: [ws_item_sk#17, ws_quantity#46, ws_list_price#47]
Input [5]: [ws_item_sk#17, ws_quantity#46, ws_list_price#47, ws_sold_date_sk#18, d_date_sk#11]

(97) ReusedExchange [Reuses operator id: 66]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(98) BroadcastHashJoin [codegen id : 113]
Left keys [1]: [ws_item_sk#17]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(99) Project [codegen id : 113]
Output [5]: [ws_quantity#46, ws_list_price#47, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ws_item_sk#17, ws_quantity#46, ws_list_price#47, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(100) HashAggregate [codegen id : 113]
Input [5]: [ws_quantity#46, ws_list_price#47, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum((cast(ws_quantity#46 as decimal(10,0)) * ws_list_price#47)), partial_count(1)]
Aggregate Attributes [3]: [sum#48, isEmpty#49, count#50]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#51, isEmpty#52, count#53]

(101) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#51, isEmpty#52, count#53]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(102) HashAggregate [codegen id : 114]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#51, isEmpty#52, count#53]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum((cast(ws_quantity#46 as decimal(10,0)) * ws_list_price#47)), count(1)]
Aggregate Attributes [2]: [sum((cast(ws_quantity#46 as decimal(10,0)) * ws_list_price#47))#54, count(1)#55]
Results [5]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum((cast(ws_quantity#46 as decimal(10,0)) * ws_list_price#47))#54 AS sales#56, count(1)#55 AS number_sales#57]

(103) Filter [codegen id : 114]
Input [5]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#56, number_sales#57]
Condition : (isnotnull(sales#56) AND (cast(sales#56 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#31, [id=#32] as decimal(32,6))))

(104) Project [codegen id : 114]
Output [6]: [web AS channel#58, i_brand_id#7, i_class_id#8, i_category_id#9, sales#56, number_sales#57]
Input [5]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#56, number_sales#57]

(105) Union

(106) HashAggregate [codegen id : 115]
Input [6]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sales#29, number_sales#30]
Keys [4]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(sales#29), partial_sum(number_sales#30)]
Aggregate Attributes [3]: [sum#59, isEmpty#60, sum#61]
Results [7]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum#62, isEmpty#63, sum#64]

(107) Exchange
Input [7]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum#62, isEmpty#63, sum#64]
Arguments: hashpartitioning(channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(108) HashAggregate [codegen id : 116]
Input [7]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum#62, isEmpty#63, sum#64]
Keys [4]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#29), sum(number_sales#30)]
Aggregate Attributes [2]: [sum(sales#29)#65, sum(number_sales#30)#66]
Results [6]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum(sales#29)#65 AS sum_sales#67, sum(number_sales#30)#66 AS number_sales#68]

(109) ReusedExchange [Reuses operator id: 107]
Output [7]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum#62, isEmpty#63, sum#64]

(110) HashAggregate [codegen id : 232]
Input [7]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum#62, isEmpty#63, sum#64]
Keys [4]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#29), sum(number_sales#30)]
Aggregate Attributes [2]: [sum(sales#29)#65, sum(number_sales#30)#66]
Results [5]: [channel#28, i_brand_id#7, i_class_id#8, sum(sales#29)#65 AS sum_sales#67, sum(number_sales#30)#66 AS number_sales#68]

(111) HashAggregate [codegen id : 232]
Input [5]: [channel#28, i_brand_id#7, i_class_id#8, sum_sales#67, number_sales#68]
Keys [3]: [channel#28, i_brand_id#7, i_class_id#8]
Functions [2]: [partial_sum(sum_sales#67), partial_sum(number_sales#68)]
Aggregate Attributes [3]: [sum#69, isEmpty#70, sum#71]
Results [6]: [channel#28, i_brand_id#7, i_class_id#8, sum#72, isEmpty#73, sum#74]

(112) Exchange
Input [6]: [channel#28, i_brand_id#7, i_class_id#8, sum#72, isEmpty#73, sum#74]
Arguments: hashpartitioning(channel#28, i_brand_id#7, i_class_id#8, 5), ENSURE_REQUIREMENTS, [plan_id=15]

(113) HashAggregate [codegen id : 233]
Input [6]: [channel#28, i_brand_id#7, i_class_id#8, sum#72, isEmpty#73, sum#74]
Keys [3]: [channel#28, i_brand_id#7, i_class_id#8]
Functions [2]: [sum(sum_sales#67), sum(number_sales#68)]
Aggregate Attributes [2]: [sum(sum_sales#67)#75, sum(number_sales#68)#76]
Results [6]: [channel#28, i_brand_id#7, i_class_id#8, null AS i_category_id#77, sum(sum_sales#67)#75 AS sum(sum_sales)#78, sum(number_sales#68)#76 AS sum(number_sales)#79]

(114) ReusedExchange [Reuses operator id: 107]
Output [7]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum#62, isEmpty#63, sum#64]

(115) HashAggregate [codegen id : 349]
Input [7]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum#62, isEmpty#63, sum#64]
Keys [4]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#29), sum(number_sales#30)]
Aggregate Attributes [2]: [sum(sales#29)#65, sum(number_sales#30)#66]
Results [4]: [channel#28, i_brand_id#7, sum(sales#29)#65 AS sum_sales#67, sum(number_sales#30)#66 AS number_sales#68]

(116) HashAggregate [codegen id : 349]
Input [4]: [channel#28, i_brand_id#7, sum_sales#67, number_sales#68]
Keys [2]: [channel#28, i_brand_id#7]
Functions [2]: [partial_sum(sum_sales#67), partial_sum(number_sales#68)]
Aggregate Attributes [3]: [sum#80, isEmpty#81, sum#82]
Results [5]: [channel#28, i_brand_id#7, sum#83, isEmpty#84, sum#85]

(117) Exchange
Input [5]: [channel#28, i_brand_id#7, sum#83, isEmpty#84, sum#85]
Arguments: hashpartitioning(channel#28, i_brand_id#7, 5), ENSURE_REQUIREMENTS, [plan_id=16]

(118) HashAggregate [codegen id : 350]
Input [5]: [channel#28, i_brand_id#7, sum#83, isEmpty#84, sum#85]
Keys [2]: [channel#28, i_brand_id#7]
Functions [2]: [sum(sum_sales#67), sum(number_sales#68)]
Aggregate Attributes [2]: [sum(sum_sales#67)#86, sum(number_sales#68)#87]
Results [6]: [channel#28, i_brand_id#7, null AS i_class_id#88, null AS i_category_id#89, sum(sum_sales#67)#86 AS sum(sum_sales)#90, sum(number_sales#68)#87 AS sum(number_sales)#91]

(119) ReusedExchange [Reuses operator id: 107]
Output [7]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum#62, isEmpty#63, sum#64]

(120) HashAggregate [codegen id : 466]
Input [7]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum#62, isEmpty#63, sum#64]
Keys [4]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#29), sum(number_sales#30)]
Aggregate Attributes [2]: [sum(sales#29)#65, sum(number_sales#30)#66]
Results [3]: [channel#28, sum(sales#29)#65 AS sum_sales#67, sum(number_sales#30)#66 AS number_sales#68]

(121) HashAggregate [codegen id : 466]
Input [3]: [channel#28, sum_sales#67, number_sales#68]
Keys [1]: [channel#28]
Functions [2]: [partial_sum(sum_sales#67), partial_sum(number_sales#68)]
Aggregate Attributes [3]: [sum#92, isEmpty#93, sum#94]
Results [4]: [channel#28, sum#95, isEmpty#96, sum#97]

(122) Exchange
Input [4]: [channel#28, sum#95, isEmpty#96, sum#97]
Arguments: hashpartitioning(channel#28, 5), ENSURE_REQUIREMENTS, [plan_id=17]

(123) HashAggregate [codegen id : 467]
Input [4]: [channel#28, sum#95, isEmpty#96, sum#97]
Keys [1]: [channel#28]
Functions [2]: [sum(sum_sales#67), sum(number_sales#68)]
Aggregate Attributes [2]: [sum(sum_sales#67)#98, sum(number_sales#68)#99]
Results [6]: [channel#28, null AS i_brand_id#100, null AS i_class_id#101, null AS i_category_id#102, sum(sum_sales#67)#98 AS sum(sum_sales)#103, sum(number_sales#68)#99 AS sum(number_sales)#104]

(124) ReusedExchange [Reuses operator id: 107]
Output [7]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum#62, isEmpty#63, sum#64]

(125) HashAggregate [codegen id : 583]
Input [7]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum#62, isEmpty#63, sum#64]
Keys [4]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#29), sum(number_sales#30)]
Aggregate Attributes [2]: [sum(sales#29)#65, sum(number_sales#30)#66]
Results [2]: [sum(sales#29)#65 AS sum_sales#67, sum(number_sales#30)#66 AS number_sales#68]

(126) HashAggregate [codegen id : 583]
Input [2]: [sum_sales#67, number_sales#68]
Keys: []
Functions [2]: [partial_sum(sum_sales#67), partial_sum(number_sales#68)]
Aggregate Attributes [3]: [sum#105, isEmpty#106, sum#107]
Results [3]: [sum#108, isEmpty#109, sum#110]

(127) Exchange
Input [3]: [sum#108, isEmpty#109, sum#110]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=18]

(128) HashAggregate [codegen id : 584]
Input [3]: [sum#108, isEmpty#109, sum#110]
Keys: []
Functions [2]: [sum(sum_sales#67), sum(number_sales#68)]
Aggregate Attributes [2]: [sum(sum_sales#67)#111, sum(number_sales#68)#112]
Results [6]: [null AS channel#113, null AS i_brand_id#114, null AS i_class_id#115, null AS i_category_id#116, sum(sum_sales#67)#111 AS sum(sum_sales)#117, sum(number_sales#68)#112 AS sum(number_sales)#118]

(129) Union

(130) HashAggregate [codegen id : 585]
Input [6]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#67, number_sales#68]
Keys [6]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#67, number_sales#68]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#67, number_sales#68]

(131) Exchange
Input [6]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#67, number_sales#68]
Arguments: hashpartitioning(channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#67, number_sales#68, 5), ENSURE_REQUIREMENTS, [plan_id=19]

(132) HashAggregate [codegen id : 586]
Input [6]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#67, number_sales#68]
Keys [6]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#67, number_sales#68]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#67, number_sales#68]

(133) TakeOrderedAndProject
Input [6]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#67, number_sales#68]
Arguments: 100, [channel#28 ASC NULLS FIRST, i_brand_id#7 ASC NULLS FIRST, i_class_id#8 ASC NULLS FIRST, i_category_id#9 ASC NULLS FIRST], [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#67, number_sales#68]

===== Subqueries =====

Subquery:1 Hosting operator id = 72 Hosting Expression = Subquery scalar-subquery#31, [id=#32]
* HashAggregate (152)
+- Exchange (151)
   +- * HashAggregate (150)
      +- Union (149)
         :- * Project (138)
         :  +- * BroadcastHashJoin Inner BuildRight (137)
         :     :- * ColumnarToRow (135)
         :     :  +- Scan parquet spark_catalog.default.store_sales (134)
         :     +- ReusedExchange (136)
         :- * Project (143)
         :  +- * BroadcastHashJoin Inner BuildRight (142)
         :     :- * ColumnarToRow (140)
         :     :  +- Scan parquet spark_catalog.default.catalog_sales (139)
         :     +- ReusedExchange (141)
         +- * Project (148)
            +- * BroadcastHashJoin Inner BuildRight (147)
               :- * ColumnarToRow (145)
               :  +- Scan parquet spark_catalog.default.web_sales (144)
               +- ReusedExchange (146)


(134) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#10)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(135) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(136) ReusedExchange [Reuses operator id: 167]
Output [1]: [d_date_sk#11]

(137) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(138) Project [codegen id : 2]
Output [2]: [ss_quantity#2 AS quantity#119, ss_list_price#3 AS list_price#120]
Input [4]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#11]

(139) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_quantity#33, cs_list_price#34, cs_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#16), dynamicpruningexpression(cs_sold_date_sk#16 IN dynamicpruning#121)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(140) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#33, cs_list_price#34, cs_sold_date_sk#16]

(141) ReusedExchange [Reuses operator id: 157]
Output [1]: [d_date_sk#11]

(142) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(143) Project [codegen id : 4]
Output [2]: [cs_quantity#33 AS quantity#122, cs_list_price#34 AS list_price#123]
Input [4]: [cs_quantity#33, cs_list_price#34, cs_sold_date_sk#16, d_date_sk#11]

(144) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_quantity#46, ws_list_price#47, ws_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#18), dynamicpruningexpression(ws_sold_date_sk#18 IN dynamicpruning#121)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(145) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#46, ws_list_price#47, ws_sold_date_sk#18]

(146) ReusedExchange [Reuses operator id: 157]
Output [1]: [d_date_sk#11]

(147) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#18]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(148) Project [codegen id : 6]
Output [2]: [ws_quantity#46 AS quantity#124, ws_list_price#47 AS list_price#125]
Input [4]: [ws_quantity#46, ws_list_price#47, ws_sold_date_sk#18, d_date_sk#11]

(149) Union

(150) HashAggregate [codegen id : 7]
Input [2]: [quantity#119, list_price#120]
Keys: []
Functions [1]: [partial_avg((cast(quantity#119 as decimal(10,0)) * list_price#120))]
Aggregate Attributes [2]: [sum#126, count#127]
Results [2]: [sum#128, count#129]

(151) Exchange
Input [2]: [sum#128, count#129]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=20]

(152) HashAggregate [codegen id : 8]
Input [2]: [sum#128, count#129]
Keys: []
Functions [1]: [avg((cast(quantity#119 as decimal(10,0)) * list_price#120))]
Aggregate Attributes [1]: [avg((cast(quantity#119 as decimal(10,0)) * list_price#120))#130]
Results [1]: [avg((cast(quantity#119 as decimal(10,0)) * list_price#120))#130 AS average_sales#131]

Subquery:2 Hosting operator id = 134 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#10

Subquery:3 Hosting operator id = 139 Hosting Expression = cs_sold_date_sk#16 IN dynamicpruning#121
BroadcastExchange (157)
+- * Project (156)
   +- * Filter (155)
      +- * ColumnarToRow (154)
         +- Scan parquet spark_catalog.default.date_dim (153)


(153) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#11, d_year#132]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(154) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#11, d_year#132]

(155) Filter [codegen id : 1]
Input [2]: [d_date_sk#11, d_year#132]
Condition : (((isnotnull(d_year#132) AND (d_year#132 >= 1998)) AND (d_year#132 <= 2000)) AND isnotnull(d_date_sk#11))

(156) Project [codegen id : 1]
Output [1]: [d_date_sk#11]
Input [2]: [d_date_sk#11, d_year#132]

(157) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=21]

Subquery:4 Hosting operator id = 144 Hosting Expression = ws_sold_date_sk#18 IN dynamicpruning#121

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (162)
+- * Project (161)
   +- * Filter (160)
      +- * ColumnarToRow (159)
         +- Scan parquet spark_catalog.default.date_dim (158)


(158) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#11, d_year#132, d_moy#133]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(159) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#11, d_year#132, d_moy#133]

(160) Filter [codegen id : 1]
Input [3]: [d_date_sk#11, d_year#132, d_moy#133]
Condition : ((((isnotnull(d_year#132) AND isnotnull(d_moy#133)) AND (d_year#132 = 2000)) AND (d_moy#133 = 11)) AND isnotnull(d_date_sk#11))

(161) Project [codegen id : 1]
Output [1]: [d_date_sk#11]
Input [3]: [d_date_sk#11, d_year#132, d_moy#133]

(162) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=22]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#10
BroadcastExchange (167)
+- * Project (166)
   +- * Filter (165)
      +- * ColumnarToRow (164)
         +- Scan parquet spark_catalog.default.date_dim (163)


(163) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#11, d_year#132]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(164) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#11, d_year#132]

(165) Filter [codegen id : 1]
Input [2]: [d_date_sk#11, d_year#132]
Condition : (((isnotnull(d_year#132) AND (d_year#132 >= 1999)) AND (d_year#132 <= 2001)) AND isnotnull(d_date_sk#11))

(166) Project [codegen id : 1]
Output [1]: [d_date_sk#11]
Input [2]: [d_date_sk#11, d_year#132]

(167) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=23]

Subquery:7 Hosting operator id = 21 Hosting Expression = cs_sold_date_sk#16 IN dynamicpruning#10

Subquery:8 Hosting operator id = 41 Hosting Expression = ws_sold_date_sk#18 IN dynamicpruning#10

Subquery:9 Hosting operator id = 87 Hosting Expression = ReusedSubquery Subquery scalar-subquery#31, [id=#32]

Subquery:10 Hosting operator id = 73 Hosting Expression = cs_sold_date_sk#16 IN dynamicpruning#5

Subquery:11 Hosting operator id = 103 Hosting Expression = ReusedSubquery Subquery scalar-subquery#31, [id=#32]

Subquery:12 Hosting operator id = 89 Hosting Expression = ws_sold_date_sk#18 IN dynamicpruning#5


