== Physical Plan ==
TakeOrderedAndProject (212)
+- * HashAggregate (211)
   +- Exchange (210)
      +- * HashAggregate (209)
         +- Union (208)
            :- * HashAggregate (131)
            :  +- Exchange (130)
            :     +- * HashAggregate (129)
            :        +- Union (128)
            :           :- * Project (89)
            :           :  +- * Filter (88)
            :           :     +- * HashAggregate (87)
            :           :        +- Exchange (86)
            :           :           +- * HashAggregate (85)
            :           :              +- * Project (84)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (83)
            :           :                    :- * Project (73)
            :           :                    :  +- * BroadcastHashJoin Inner BuildRight (72)
            :           :                    :     :- SortMergeJoin LeftSemi (66)
            :           :                    :     :  :- * Sort (5)
            :           :                    :     :  :  +- Exchange (4)
            :           :                    :     :  :     +- * Filter (3)
            :           :                    :     :  :        +- * ColumnarToRow (2)
            :           :                    :     :  :           +- Scan parquet default.store_sales (1)
            :           :                    :     :  +- * Sort (65)
            :           :                    :     :     +- Exchange (64)
            :           :                    :     :        +- * Project (63)
            :           :                    :     :           +- * BroadcastHashJoin Inner BuildRight (62)
            :           :                    :     :              :- * Filter (8)
            :           :                    :     :              :  +- * ColumnarToRow (7)
            :           :                    :     :              :     +- Scan parquet default.item (6)
            :           :                    :     :              +- BroadcastExchange (61)
            :           :                    :     :                 +- * HashAggregate (60)
            :           :                    :     :                    +- * HashAggregate (59)
            :           :                    :     :                       +- * HashAggregate (58)
            :           :                    :     :                          +- Exchange (57)
            :           :                    :     :                             +- * HashAggregate (56)
            :           :                    :     :                                +- * BroadcastHashJoin LeftSemi BuildRight (55)
            :           :                    :     :                                   :- * BroadcastHashJoin LeftSemi BuildRight (41)
            :           :                    :     :                                   :  :- * Project (24)
            :           :                    :     :                                   :  :  +- * BroadcastHashJoin Inner BuildRight (23)
            :           :                    :     :                                   :  :     :- * Project (18)
            :           :                    :     :                                   :  :     :  +- * BroadcastHashJoin Inner BuildRight (17)
            :           :                    :     :                                   :  :     :     :- * Filter (11)
            :           :                    :     :                                   :  :     :     :  +- * ColumnarToRow (10)
            :           :                    :     :                                   :  :     :     :     +- Scan parquet default.store_sales (9)
            :           :                    :     :                                   :  :     :     +- BroadcastExchange (16)
            :           :                    :     :                                   :  :     :        +- * Project (15)
            :           :                    :     :                                   :  :     :           +- * Filter (14)
            :           :                    :     :                                   :  :     :              +- * ColumnarToRow (13)
            :           :                    :     :                                   :  :     :                 +- Scan parquet default.date_dim (12)
            :           :                    :     :                                   :  :     +- BroadcastExchange (22)
            :           :                    :     :                                   :  :        +- * Filter (21)
            :           :                    :     :                                   :  :           +- * ColumnarToRow (20)
            :           :                    :     :                                   :  :              +- Scan parquet default.item (19)
            :           :                    :     :                                   :  +- BroadcastExchange (40)
            :           :                    :     :                                   :     +- * HashAggregate (39)
            :           :                    :     :                                   :        +- Exchange (38)
            :           :                    :     :                                   :           +- * HashAggregate (37)
            :           :                    :     :                                   :              +- * Project (36)
            :           :                    :     :                                   :                 +- * BroadcastHashJoin Inner BuildRight (35)
            :           :                    :     :                                   :                    :- * Project (30)
            :           :                    :     :                                   :                    :  +- * BroadcastHashJoin Inner BuildRight (29)
            :           :                    :     :                                   :                    :     :- * Filter (27)
            :           :                    :     :                                   :                    :     :  +- * ColumnarToRow (26)
            :           :                    :     :                                   :                    :     :     +- Scan parquet default.catalog_sales (25)
            :           :                    :     :                                   :                    :     +- ReusedExchange (28)
            :           :                    :     :                                   :                    +- BroadcastExchange (34)
            :           :                    :     :                                   :                       +- * Filter (33)
            :           :                    :     :                                   :                          +- * ColumnarToRow (32)
            :           :                    :     :                                   :                             +- Scan parquet default.item (31)
            :           :                    :     :                                   +- BroadcastExchange (54)
            :           :                    :     :                                      +- * HashAggregate (53)
            :           :                    :     :                                         +- Exchange (52)
            :           :                    :     :                                            +- * HashAggregate (51)
            :           :                    :     :                                               +- * Project (50)
            :           :                    :     :                                                  +- * BroadcastHashJoin Inner BuildRight (49)
            :           :                    :     :                                                     :- * Project (47)
            :           :                    :     :                                                     :  +- * BroadcastHashJoin Inner BuildRight (46)
            :           :                    :     :                                                     :     :- * Filter (44)
            :           :                    :     :                                                     :     :  +- * ColumnarToRow (43)
            :           :                    :     :                                                     :     :     +- Scan parquet default.web_sales (42)
            :           :                    :     :                                                     :     +- ReusedExchange (45)
            :           :                    :     :                                                     +- ReusedExchange (48)
            :           :                    :     +- BroadcastExchange (71)
            :           :                    :        +- * Project (70)
            :           :                    :           +- * Filter (69)
            :           :                    :              +- * ColumnarToRow (68)
            :           :                    :                 +- Scan parquet default.date_dim (67)
            :           :                    +- BroadcastExchange (82)
            :           :                       +- SortMergeJoin LeftSemi (81)
            :           :                          :- * Sort (78)
            :           :                          :  +- Exchange (77)
            :           :                          :     +- * Filter (76)
            :           :                          :        +- * ColumnarToRow (75)
            :           :                          :           +- Scan parquet default.item (74)
            :           :                          +- * Sort (80)
            :           :                             +- ReusedExchange (79)
            :           :- * Project (108)
            :           :  +- * Filter (107)
            :           :     +- * HashAggregate (106)
            :           :        +- Exchange (105)
            :           :           +- * HashAggregate (104)
            :           :              +- * Project (103)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (102)
            :           :                    :- * Project (100)
            :           :                    :  +- * BroadcastHashJoin Inner BuildRight (99)
            :           :                    :     :- SortMergeJoin LeftSemi (97)
            :           :                    :     :  :- * Sort (94)
            :           :                    :     :  :  +- Exchange (93)
            :           :                    :     :  :     +- * Filter (92)
            :           :                    :     :  :        +- * ColumnarToRow (91)
            :           :                    :     :  :           +- Scan parquet default.catalog_sales (90)
            :           :                    :     :  +- * Sort (96)
            :           :                    :     :     +- ReusedExchange (95)
            :           :                    :     +- ReusedExchange (98)
            :           :                    +- ReusedExchange (101)
            :           +- * Project (127)
            :              +- * Filter (126)
            :                 +- * HashAggregate (125)
            :                    +- Exchange (124)
            :                       +- * HashAggregate (123)
            :                          +- * Project (122)
            :                             +- * BroadcastHashJoin Inner BuildRight (121)
            :                                :- * Project (119)
            :                                :  +- * BroadcastHashJoin Inner BuildRight (118)
            :                                :     :- SortMergeJoin LeftSemi (116)
            :                                :     :  :- * Sort (113)
            :                                :     :  :  +- Exchange (112)
            :                                :     :  :     +- * Filter (111)
            :                                :     :  :        +- * ColumnarToRow (110)
            :                                :     :  :           +- Scan parquet default.web_sales (109)
            :                                :     :  +- * Sort (115)
            :                                :     :     +- ReusedExchange (114)
            :                                :     +- ReusedExchange (117)
            :                                +- ReusedExchange (120)
            :- * HashAggregate (150)
            :  +- Exchange (149)
            :     +- * HashAggregate (148)
            :        +- * HashAggregate (147)
            :           +- Exchange (146)
            :              +- * HashAggregate (145)
            :                 +- Union (144)
            :                    :- * Project (135)
            :                    :  +- * Filter (134)
            :                    :     +- * HashAggregate (133)
            :                    :        +- ReusedExchange (132)
            :                    :- * Project (139)
            :                    :  +- * Filter (138)
            :                    :     +- * HashAggregate (137)
            :                    :        +- ReusedExchange (136)
            :                    +- * Project (143)
            :                       +- * Filter (142)
            :                          +- * HashAggregate (141)
            :                             +- ReusedExchange (140)
            :- * HashAggregate (169)
            :  +- Exchange (168)
            :     +- * HashAggregate (167)
            :        +- * HashAggregate (166)
            :           +- Exchange (165)
            :              +- * HashAggregate (164)
            :                 +- Union (163)
            :                    :- * Project (154)
            :                    :  +- * Filter (153)
            :                    :     +- * HashAggregate (152)
            :                    :        +- ReusedExchange (151)
            :                    :- * Project (158)
            :                    :  +- * Filter (157)
            :                    :     +- * HashAggregate (156)
            :                    :        +- ReusedExchange (155)
            :                    +- * Project (162)
            :                       +- * Filter (161)
            :                          +- * HashAggregate (160)
            :                             +- ReusedExchange (159)
            :- * HashAggregate (188)
            :  +- Exchange (187)
            :     +- * HashAggregate (186)
            :        +- * HashAggregate (185)
            :           +- Exchange (184)
            :              +- * HashAggregate (183)
            :                 +- Union (182)
            :                    :- * Project (173)
            :                    :  +- * Filter (172)
            :                    :     +- * HashAggregate (171)
            :                    :        +- ReusedExchange (170)
            :                    :- * Project (177)
            :                    :  +- * Filter (176)
            :                    :     +- * HashAggregate (175)
            :                    :        +- ReusedExchange (174)
            :                    +- * Project (181)
            :                       +- * Filter (180)
            :                          +- * HashAggregate (179)
            :                             +- ReusedExchange (178)
            +- * HashAggregate (207)
               +- Exchange (206)
                  +- * HashAggregate (205)
                     +- * HashAggregate (204)
                        +- Exchange (203)
                           +- * HashAggregate (202)
                              +- Union (201)
                                 :- * Project (192)
                                 :  +- * Filter (191)
                                 :     +- * HashAggregate (190)
                                 :        +- ReusedExchange (189)
                                 :- * Project (196)
                                 :  +- * Filter (195)
                                 :     +- * HashAggregate (194)
                                 :        +- ReusedExchange (193)
                                 +- * Project (200)
                                    +- * Filter (199)
                                       +- * HashAggregate (198)
                                          +- ReusedExchange (197)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 15]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(8) Filter [codegen id : 15]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(9) Scan parquet default.store_sales
Output [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#11)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(10) ColumnarToRow [codegen id : 13]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]

(11) Filter [codegen id : 13]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(12) Scan parquet default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(13) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#12, d_year#13]

(14) Filter [codegen id : 3]
Input [2]: [d_date_sk#12, d_year#13]
Condition : (((isnotnull(d_year#13) AND (d_year#13 >= 1999)) AND (d_year#13 <= 2001)) AND isnotnull(d_date_sk#12))

(15) Project [codegen id : 3]
Output [1]: [d_date_sk#12]
Input [2]: [d_date_sk#12, d_year#13]

(16) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(17) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#12]
Join condition: None

(18) Project [codegen id : 13]
Output [1]: [ss_item_sk#1]
Input [3]: [ss_item_sk#1, ss_sold_date_sk#4, d_date_sk#12]

(19) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(20) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(21) Filter [codegen id : 4]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : (((isnotnull(i_item_sk#7) AND isnotnull(i_brand_id#8)) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(22) BroadcastExchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#15]

(23) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join condition: None

(24) Project [codegen id : 13]
Output [3]: [i_brand_id#8 AS brand_id#16, i_class_id#9 AS class_id#17, i_category_id#10 AS category_id#18]
Input [5]: [ss_item_sk#1, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(25) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#19, cs_sold_date_sk#20]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#20), dynamicpruningexpression(cs_sold_date_sk#20 IN dynamicpruning#11)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(26) ColumnarToRow [codegen id : 7]
Input [2]: [cs_item_sk#19, cs_sold_date_sk#20]

(27) Filter [codegen id : 7]
Input [2]: [cs_item_sk#19, cs_sold_date_sk#20]
Condition : isnotnull(cs_item_sk#19)

(28) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#12]

(29) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cs_sold_date_sk#20]
Right keys [1]: [d_date_sk#12]
Join condition: None

(30) Project [codegen id : 7]
Output [1]: [cs_item_sk#19]
Input [3]: [cs_item_sk#19, cs_sold_date_sk#20, d_date_sk#12]

(31) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(32) ColumnarToRow [codegen id : 6]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(33) Filter [codegen id : 6]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : isnotnull(i_item_sk#7)

(34) BroadcastExchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#21]

(35) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [i_item_sk#7]
Join condition: None

(36) Project [codegen id : 7]
Output [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Input [5]: [cs_item_sk#19, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(37) HashAggregate [codegen id : 7]
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]

(38) Exchange
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#22]

(39) HashAggregate [codegen id : 8]
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]

(40) BroadcastExchange
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#23]

(41) BroadcastHashJoin [codegen id : 13]
Left keys [6]: [coalesce(brand_id#16, 0), isnull(brand_id#16), coalesce(class_id#17, 0), isnull(class_id#17), coalesce(category_id#18, 0), isnull(category_id#18)]
Right keys [6]: [coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10)]
Join condition: None

(42) Scan parquet default.web_sales
Output [2]: [ws_item_sk#24, ws_sold_date_sk#25]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#25), dynamicpruningexpression(ws_sold_date_sk#25 IN dynamicpruning#11)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(43) ColumnarToRow [codegen id : 11]
Input [2]: [ws_item_sk#24, ws_sold_date_sk#25]

(44) Filter [codegen id : 11]
Input [2]: [ws_item_sk#24, ws_sold_date_sk#25]
Condition : isnotnull(ws_item_sk#24)

(45) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#12]

(46) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ws_sold_date_sk#25]
Right keys [1]: [d_date_sk#12]
Join condition: None

(47) Project [codegen id : 11]
Output [1]: [ws_item_sk#24]
Input [3]: [ws_item_sk#24, ws_sold_date_sk#25, d_date_sk#12]

(48) ReusedExchange [Reuses operator id: 34]
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(49) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ws_item_sk#24]
Right keys [1]: [i_item_sk#7]
Join condition: None

(50) Project [codegen id : 11]
Output [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Input [5]: [ws_item_sk#24, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(51) HashAggregate [codegen id : 11]
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]

(52) Exchange
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#26]

(53) HashAggregate [codegen id : 12]
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]

(54) BroadcastExchange
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#27]

(55) BroadcastHashJoin [codegen id : 13]
Left keys [6]: [coalesce(brand_id#16, 0), isnull(brand_id#16), coalesce(class_id#17, 0), isnull(class_id#17), coalesce(category_id#18, 0), isnull(category_id#18)]
Right keys [6]: [coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10)]
Join condition: None

(56) HashAggregate [codegen id : 13]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Keys [3]: [brand_id#16, class_id#17, category_id#18]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#16, class_id#17, category_id#18]

(57) Exchange
Input [3]: [brand_id#16, class_id#17, category_id#18]
Arguments: hashpartitioning(brand_id#16, class_id#17, category_id#18, 5), ENSURE_REQUIREMENTS, [id=#28]

(58) HashAggregate [codegen id : 14]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Keys [3]: [brand_id#16, class_id#17, category_id#18]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#16, class_id#17, category_id#18]

(59) HashAggregate [codegen id : 14]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Keys [3]: [brand_id#16, class_id#17, category_id#18]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#16, class_id#17, category_id#18]

(60) HashAggregate [codegen id : 14]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Keys [3]: [brand_id#16, class_id#17, category_id#18]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#16, class_id#17, category_id#18]

(61) BroadcastExchange
Input [3]: [brand_id#16, class_id#17, category_id#18]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#29]

(62) BroadcastHashJoin [codegen id : 15]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#16, class_id#17, category_id#18]
Join condition: None

(63) Project [codegen id : 15]
Output [1]: [i_item_sk#7 AS ss_item_sk#30]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#16, class_id#17, category_id#18]

(64) Exchange
Input [1]: [ss_item_sk#30]
Arguments: hashpartitioning(ss_item_sk#30, 5), ENSURE_REQUIREMENTS, [id=#31]

(65) Sort [codegen id : 16]
Input [1]: [ss_item_sk#30]
Arguments: [ss_item_sk#30 ASC NULLS FIRST], false, 0

(66) SortMergeJoin
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#30]
Join condition: None

(67) Scan parquet default.date_dim
Output [3]: [d_date_sk#12, d_year#13, d_moy#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(68) ColumnarToRow [codegen id : 17]
Input [3]: [d_date_sk#12, d_year#13, d_moy#32]

(69) Filter [codegen id : 17]
Input [3]: [d_date_sk#12, d_year#13, d_moy#32]
Condition : ((((isnotnull(d_year#13) AND isnotnull(d_moy#32)) AND (d_year#13 = 2000)) AND (d_moy#32 = 11)) AND isnotnull(d_date_sk#12))

(70) Project [codegen id : 17]
Output [1]: [d_date_sk#12]
Input [3]: [d_date_sk#12, d_year#13, d_moy#32]

(71) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#33]

(72) BroadcastHashJoin [codegen id : 34]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#12]
Join condition: None

(73) Project [codegen id : 34]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#12]

(74) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(75) ColumnarToRow [codegen id : 18]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(76) Filter [codegen id : 18]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : isnotnull(i_item_sk#7)

(77) Exchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(i_item_sk#7, 5), ENSURE_REQUIREMENTS, [id=#34]

(78) Sort [codegen id : 19]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [i_item_sk#7 ASC NULLS FIRST], false, 0

(79) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#30]

(80) Sort [codegen id : 33]
Input [1]: [ss_item_sk#30]
Arguments: [ss_item_sk#30 ASC NULLS FIRST], false, 0

(81) SortMergeJoin
Left keys [1]: [i_item_sk#7]
Right keys [1]: [ss_item_sk#30]
Join condition: None

(82) BroadcastExchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#35]

(83) BroadcastHashJoin [codegen id : 34]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join condition: None

(84) Project [codegen id : 34]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(85) HashAggregate [codegen id : 34]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#36, isEmpty#37, count#38]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#39, isEmpty#40, count#41]

(86) Exchange
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#39, isEmpty#40, count#41]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#42]

(87) HashAggregate [codegen id : 35]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#39, isEmpty#40, count#41]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#43, count(1)#44]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#43 AS sales#45, count(1)#44 AS number_sales#46, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#43 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#47]

(88) Filter [codegen id : 35]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#45, number_sales#46, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#47]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#47) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#47 as decimal(32,6)) > cast(Subquery scalar-subquery#48, [id=#49] as decimal(32,6))))

(89) Project [codegen id : 35]
Output [6]: [store AS channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sales#45, number_sales#46]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#45, number_sales#46, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#47]

(90) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#19, cs_quantity#51, cs_list_price#52, cs_sold_date_sk#20]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#20), dynamicpruningexpression(cs_sold_date_sk#20 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(91) ColumnarToRow [codegen id : 36]
Input [4]: [cs_item_sk#19, cs_quantity#51, cs_list_price#52, cs_sold_date_sk#20]

(92) Filter [codegen id : 36]
Input [4]: [cs_item_sk#19, cs_quantity#51, cs_list_price#52, cs_sold_date_sk#20]
Condition : isnotnull(cs_item_sk#19)

(93) Exchange
Input [4]: [cs_item_sk#19, cs_quantity#51, cs_list_price#52, cs_sold_date_sk#20]
Arguments: hashpartitioning(cs_item_sk#19, 5), ENSURE_REQUIREMENTS, [id=#53]

(94) Sort [codegen id : 37]
Input [4]: [cs_item_sk#19, cs_quantity#51, cs_list_price#52, cs_sold_date_sk#20]
Arguments: [cs_item_sk#19 ASC NULLS FIRST], false, 0

(95) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#30]

(96) Sort [codegen id : 51]
Input [1]: [ss_item_sk#30]
Arguments: [ss_item_sk#30 ASC NULLS FIRST], false, 0

(97) SortMergeJoin
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [ss_item_sk#30]
Join condition: None

(98) ReusedExchange [Reuses operator id: 71]
Output [1]: [d_date_sk#12]

(99) BroadcastHashJoin [codegen id : 69]
Left keys [1]: [cs_sold_date_sk#20]
Right keys [1]: [d_date_sk#12]
Join condition: None

(100) Project [codegen id : 69]
Output [3]: [cs_item_sk#19, cs_quantity#51, cs_list_price#52]
Input [5]: [cs_item_sk#19, cs_quantity#51, cs_list_price#52, cs_sold_date_sk#20, d_date_sk#12]

(101) ReusedExchange [Reuses operator id: 82]
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(102) BroadcastHashJoin [codegen id : 69]
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [i_item_sk#7]
Join condition: None

(103) Project [codegen id : 69]
Output [5]: [cs_quantity#51, cs_list_price#52, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [7]: [cs_item_sk#19, cs_quantity#51, cs_list_price#52, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(104) HashAggregate [codegen id : 69]
Input [5]: [cs_quantity#51, cs_list_price#52, i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#54, isEmpty#55, count#56]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#57, isEmpty#58, count#59]

(105) Exchange
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#57, isEmpty#58, count#59]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#60]

(106) HashAggregate [codegen id : 70]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#57, isEmpty#58, count#59]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#61, count(1)#62]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#61 AS sales#63, count(1)#62 AS number_sales#64, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#61 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#65]

(107) Filter [codegen id : 70]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#63, number_sales#64, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#65]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#65) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#65 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#48, [id=#49] as decimal(32,6))))

(108) Project [codegen id : 70]
Output [6]: [catalog AS channel#66, i_brand_id#8, i_class_id#9, i_category_id#10, sales#63, number_sales#64]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#63, number_sales#64, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#65]

(109) Scan parquet default.web_sales
Output [4]: [ws_item_sk#24, ws_quantity#67, ws_list_price#68, ws_sold_date_sk#25]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#25), dynamicpruningexpression(ws_sold_date_sk#25 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(110) ColumnarToRow [codegen id : 71]
Input [4]: [ws_item_sk#24, ws_quantity#67, ws_list_price#68, ws_sold_date_sk#25]

(111) Filter [codegen id : 71]
Input [4]: [ws_item_sk#24, ws_quantity#67, ws_list_price#68, ws_sold_date_sk#25]
Condition : isnotnull(ws_item_sk#24)

(112) Exchange
Input [4]: [ws_item_sk#24, ws_quantity#67, ws_list_price#68, ws_sold_date_sk#25]
Arguments: hashpartitioning(ws_item_sk#24, 5), ENSURE_REQUIREMENTS, [id=#69]

(113) Sort [codegen id : 72]
Input [4]: [ws_item_sk#24, ws_quantity#67, ws_list_price#68, ws_sold_date_sk#25]
Arguments: [ws_item_sk#24 ASC NULLS FIRST], false, 0

(114) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#30]

(115) Sort [codegen id : 86]
Input [1]: [ss_item_sk#30]
Arguments: [ss_item_sk#30 ASC NULLS FIRST], false, 0

(116) SortMergeJoin
Left keys [1]: [ws_item_sk#24]
Right keys [1]: [ss_item_sk#30]
Join condition: None

(117) ReusedExchange [Reuses operator id: 71]
Output [1]: [d_date_sk#12]

(118) BroadcastHashJoin [codegen id : 104]
Left keys [1]: [ws_sold_date_sk#25]
Right keys [1]: [d_date_sk#12]
Join condition: None

(119) Project [codegen id : 104]
Output [3]: [ws_item_sk#24, ws_quantity#67, ws_list_price#68]
Input [5]: [ws_item_sk#24, ws_quantity#67, ws_list_price#68, ws_sold_date_sk#25, d_date_sk#12]

(120) ReusedExchange [Reuses operator id: 82]
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(121) BroadcastHashJoin [codegen id : 104]
Left keys [1]: [ws_item_sk#24]
Right keys [1]: [i_item_sk#7]
Join condition: None

(122) Project [codegen id : 104]
Output [5]: [ws_quantity#67, ws_list_price#68, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [7]: [ws_item_sk#24, ws_quantity#67, ws_list_price#68, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(123) HashAggregate [codegen id : 104]
Input [5]: [ws_quantity#67, ws_list_price#68, i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#70, isEmpty#71, count#72]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#73, isEmpty#74, count#75]

(124) Exchange
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#73, isEmpty#74, count#75]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#76]

(125) HashAggregate [codegen id : 105]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#73, isEmpty#74, count#75]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#77, count(1)#78]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#77 AS sales#79, count(1)#78 AS number_sales#80, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#77 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#81]

(126) Filter [codegen id : 105]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#79, number_sales#80, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#81]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#81) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#81 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#48, [id=#49] as decimal(32,6))))

(127) Project [codegen id : 105]
Output [6]: [web AS channel#82, i_brand_id#8, i_class_id#9, i_category_id#10, sales#79, number_sales#80]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#79, number_sales#80, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#81]

(128) Union

(129) HashAggregate [codegen id : 106]
Input [6]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sales#45, number_sales#46]
Keys [4]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(sales#45), partial_sum(number_sales#46)]
Aggregate Attributes [3]: [sum#83, isEmpty#84, sum#85]
Results [7]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sum#86, isEmpty#87, sum#88]

(130) Exchange
Input [7]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sum#86, isEmpty#87, sum#88]
Arguments: hashpartitioning(channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#89]

(131) HashAggregate [codegen id : 107]
Input [7]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sum#86, isEmpty#87, sum#88]
Keys [4]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(sales#45), sum(number_sales#46)]
Aggregate Attributes [2]: [sum(sales#45)#90, sum(number_sales#46)#91]
Results [6]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sum(sales#45)#90 AS sum_sales#92, sum(number_sales#46)#91 AS number_sales#93]

(132) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#94, isEmpty#95, count#96]

(133) HashAggregate [codegen id : 142]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#94, isEmpty#95, count#96]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#97, count(1)#98]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#97 AS sales#45, count(1)#98 AS number_sales#46, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#97 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#99]

(134) Filter [codegen id : 142]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#45, number_sales#46, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#99]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#99) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#99 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#48, [id=#49] as decimal(32,6))))

(135) Project [codegen id : 142]
Output [6]: [store AS channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sales#45, number_sales#46]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#45, number_sales#46, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#99]

(136) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#100, isEmpty#101, count#102]

(137) HashAggregate [codegen id : 177]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#100, isEmpty#101, count#102]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#103, count(1)#104]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#103 AS sales#63, count(1)#104 AS number_sales#64, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#103 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#105]

(138) Filter [codegen id : 177]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#63, number_sales#64, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#105]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#105) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#105 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#48, [id=#49] as decimal(32,6))))

(139) Project [codegen id : 177]
Output [6]: [catalog AS channel#106, i_brand_id#8, i_class_id#9, i_category_id#10, sales#63, number_sales#64]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#63, number_sales#64, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#105]

(140) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#107, isEmpty#108, count#109]

(141) HashAggregate [codegen id : 212]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#107, isEmpty#108, count#109]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#110, count(1)#111]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#110 AS sales#79, count(1)#111 AS number_sales#80, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#110 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#112]

(142) Filter [codegen id : 212]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#79, number_sales#80, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#112]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#112) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#112 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#48, [id=#49] as decimal(32,6))))

(143) Project [codegen id : 212]
Output [6]: [web AS channel#113, i_brand_id#8, i_class_id#9, i_category_id#10, sales#79, number_sales#80]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#79, number_sales#80, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#112]

(144) Union

(145) HashAggregate [codegen id : 213]
Input [6]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sales#45, number_sales#46]
Keys [4]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(sales#45), partial_sum(number_sales#46)]
Aggregate Attributes [3]: [sum#114, isEmpty#115, sum#116]
Results [7]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sum#117, isEmpty#118, sum#119]

(146) Exchange
Input [7]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sum#117, isEmpty#118, sum#119]
Arguments: hashpartitioning(channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#120]

(147) HashAggregate [codegen id : 214]
Input [7]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sum#117, isEmpty#118, sum#119]
Keys [4]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(sales#45), sum(number_sales#46)]
Aggregate Attributes [2]: [sum(sales#45)#121, sum(number_sales#46)#122]
Results [5]: [channel#50, i_brand_id#8, i_class_id#9, sum(sales#45)#121 AS sum_sales#92, sum(number_sales#46)#122 AS number_sales#93]

(148) HashAggregate [codegen id : 214]
Input [5]: [channel#50, i_brand_id#8, i_class_id#9, sum_sales#92, number_sales#93]
Keys [3]: [channel#50, i_brand_id#8, i_class_id#9]
Functions [2]: [partial_sum(sum_sales#92), partial_sum(number_sales#93)]
Aggregate Attributes [3]: [sum#123, isEmpty#124, sum#125]
Results [6]: [channel#50, i_brand_id#8, i_class_id#9, sum#126, isEmpty#127, sum#128]

(149) Exchange
Input [6]: [channel#50, i_brand_id#8, i_class_id#9, sum#126, isEmpty#127, sum#128]
Arguments: hashpartitioning(channel#50, i_brand_id#8, i_class_id#9, 5), ENSURE_REQUIREMENTS, [id=#129]

(150) HashAggregate [codegen id : 215]
Input [6]: [channel#50, i_brand_id#8, i_class_id#9, sum#126, isEmpty#127, sum#128]
Keys [3]: [channel#50, i_brand_id#8, i_class_id#9]
Functions [2]: [sum(sum_sales#92), sum(number_sales#93)]
Aggregate Attributes [2]: [sum(sum_sales#92)#130, sum(number_sales#93)#131]
Results [6]: [channel#50, i_brand_id#8, i_class_id#9, null AS i_category_id#132, sum(sum_sales#92)#130 AS sum(sum_sales)#133, sum(number_sales#93)#131 AS sum(number_sales)#134]

(151) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#135, isEmpty#136, count#137]

(152) HashAggregate [codegen id : 250]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#135, isEmpty#136, count#137]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#138, count(1)#139]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#138 AS sales#45, count(1)#139 AS number_sales#46, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#138 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#140]

(153) Filter [codegen id : 250]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#45, number_sales#46, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#140]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#140) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#140 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#48, [id=#49] as decimal(32,6))))

(154) Project [codegen id : 250]
Output [6]: [store AS channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sales#45, number_sales#46]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#45, number_sales#46, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#140]

(155) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#141, isEmpty#142, count#143]

(156) HashAggregate [codegen id : 285]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#141, isEmpty#142, count#143]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#144, count(1)#145]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#144 AS sales#63, count(1)#145 AS number_sales#64, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#144 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#146]

(157) Filter [codegen id : 285]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#63, number_sales#64, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#146]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#146) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#146 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#48, [id=#49] as decimal(32,6))))

(158) Project [codegen id : 285]
Output [6]: [catalog AS channel#147, i_brand_id#8, i_class_id#9, i_category_id#10, sales#63, number_sales#64]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#63, number_sales#64, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#146]

(159) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#148, isEmpty#149, count#150]

(160) HashAggregate [codegen id : 320]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#148, isEmpty#149, count#150]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#151, count(1)#152]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#151 AS sales#79, count(1)#152 AS number_sales#80, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#151 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#153]

(161) Filter [codegen id : 320]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#79, number_sales#80, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#153]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#153) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#153 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#48, [id=#49] as decimal(32,6))))

(162) Project [codegen id : 320]
Output [6]: [web AS channel#154, i_brand_id#8, i_class_id#9, i_category_id#10, sales#79, number_sales#80]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#79, number_sales#80, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#153]

(163) Union

(164) HashAggregate [codegen id : 321]
Input [6]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sales#45, number_sales#46]
Keys [4]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(sales#45), partial_sum(number_sales#46)]
Aggregate Attributes [3]: [sum#155, isEmpty#156, sum#157]
Results [7]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sum#158, isEmpty#159, sum#160]

(165) Exchange
Input [7]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sum#158, isEmpty#159, sum#160]
Arguments: hashpartitioning(channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#161]

(166) HashAggregate [codegen id : 322]
Input [7]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sum#158, isEmpty#159, sum#160]
Keys [4]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(sales#45), sum(number_sales#46)]
Aggregate Attributes [2]: [sum(sales#45)#162, sum(number_sales#46)#163]
Results [4]: [channel#50, i_brand_id#8, sum(sales#45)#162 AS sum_sales#92, sum(number_sales#46)#163 AS number_sales#93]

(167) HashAggregate [codegen id : 322]
Input [4]: [channel#50, i_brand_id#8, sum_sales#92, number_sales#93]
Keys [2]: [channel#50, i_brand_id#8]
Functions [2]: [partial_sum(sum_sales#92), partial_sum(number_sales#93)]
Aggregate Attributes [3]: [sum#164, isEmpty#165, sum#166]
Results [5]: [channel#50, i_brand_id#8, sum#167, isEmpty#168, sum#169]

(168) Exchange
Input [5]: [channel#50, i_brand_id#8, sum#167, isEmpty#168, sum#169]
Arguments: hashpartitioning(channel#50, i_brand_id#8, 5), ENSURE_REQUIREMENTS, [id=#170]

(169) HashAggregate [codegen id : 323]
Input [5]: [channel#50, i_brand_id#8, sum#167, isEmpty#168, sum#169]
Keys [2]: [channel#50, i_brand_id#8]
Functions [2]: [sum(sum_sales#92), sum(number_sales#93)]
Aggregate Attributes [2]: [sum(sum_sales#92)#171, sum(number_sales#93)#172]
Results [6]: [channel#50, i_brand_id#8, null AS i_class_id#173, null AS i_category_id#174, sum(sum_sales#92)#171 AS sum(sum_sales)#175, sum(number_sales#93)#172 AS sum(number_sales)#176]

(170) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#177, isEmpty#178, count#179]

(171) HashAggregate [codegen id : 358]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#177, isEmpty#178, count#179]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#180, count(1)#181]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#180 AS sales#45, count(1)#181 AS number_sales#46, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#180 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#182]

(172) Filter [codegen id : 358]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#45, number_sales#46, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#182]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#182) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#182 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#48, [id=#49] as decimal(32,6))))

(173) Project [codegen id : 358]
Output [6]: [store AS channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sales#45, number_sales#46]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#45, number_sales#46, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#182]

(174) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#183, isEmpty#184, count#185]

(175) HashAggregate [codegen id : 393]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#183, isEmpty#184, count#185]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#186, count(1)#187]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#186 AS sales#63, count(1)#187 AS number_sales#64, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#186 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#188]

(176) Filter [codegen id : 393]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#63, number_sales#64, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#188]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#188) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#188 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#48, [id=#49] as decimal(32,6))))

(177) Project [codegen id : 393]
Output [6]: [catalog AS channel#189, i_brand_id#8, i_class_id#9, i_category_id#10, sales#63, number_sales#64]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#63, number_sales#64, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#188]

(178) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#190, isEmpty#191, count#192]

(179) HashAggregate [codegen id : 428]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#190, isEmpty#191, count#192]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#193, count(1)#194]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#193 AS sales#79, count(1)#194 AS number_sales#80, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#193 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#195]

(180) Filter [codegen id : 428]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#79, number_sales#80, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#195]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#195) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#195 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#48, [id=#49] as decimal(32,6))))

(181) Project [codegen id : 428]
Output [6]: [web AS channel#196, i_brand_id#8, i_class_id#9, i_category_id#10, sales#79, number_sales#80]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#79, number_sales#80, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#195]

(182) Union

(183) HashAggregate [codegen id : 429]
Input [6]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sales#45, number_sales#46]
Keys [4]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(sales#45), partial_sum(number_sales#46)]
Aggregate Attributes [3]: [sum#197, isEmpty#198, sum#199]
Results [7]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sum#200, isEmpty#201, sum#202]

(184) Exchange
Input [7]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sum#200, isEmpty#201, sum#202]
Arguments: hashpartitioning(channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#203]

(185) HashAggregate [codegen id : 430]
Input [7]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sum#200, isEmpty#201, sum#202]
Keys [4]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(sales#45), sum(number_sales#46)]
Aggregate Attributes [2]: [sum(sales#45)#204, sum(number_sales#46)#205]
Results [3]: [channel#50, sum(sales#45)#204 AS sum_sales#92, sum(number_sales#46)#205 AS number_sales#93]

(186) HashAggregate [codegen id : 430]
Input [3]: [channel#50, sum_sales#92, number_sales#93]
Keys [1]: [channel#50]
Functions [2]: [partial_sum(sum_sales#92), partial_sum(number_sales#93)]
Aggregate Attributes [3]: [sum#206, isEmpty#207, sum#208]
Results [4]: [channel#50, sum#209, isEmpty#210, sum#211]

(187) Exchange
Input [4]: [channel#50, sum#209, isEmpty#210, sum#211]
Arguments: hashpartitioning(channel#50, 5), ENSURE_REQUIREMENTS, [id=#212]

(188) HashAggregate [codegen id : 431]
Input [4]: [channel#50, sum#209, isEmpty#210, sum#211]
Keys [1]: [channel#50]
Functions [2]: [sum(sum_sales#92), sum(number_sales#93)]
Aggregate Attributes [2]: [sum(sum_sales#92)#213, sum(number_sales#93)#214]
Results [6]: [channel#50, null AS i_brand_id#215, null AS i_class_id#216, null AS i_category_id#217, sum(sum_sales#92)#213 AS sum(sum_sales)#218, sum(number_sales#93)#214 AS sum(number_sales)#219]

(189) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#220, isEmpty#221, count#222]

(190) HashAggregate [codegen id : 466]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#220, isEmpty#221, count#222]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#223, count(1)#224]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#223 AS sales#45, count(1)#224 AS number_sales#46, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#223 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#225]

(191) Filter [codegen id : 466]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#45, number_sales#46, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#225]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#225) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#225 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#48, [id=#49] as decimal(32,6))))

(192) Project [codegen id : 466]
Output [6]: [store AS channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sales#45, number_sales#46]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#45, number_sales#46, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#225]

(193) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#226, isEmpty#227, count#228]

(194) HashAggregate [codegen id : 501]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#226, isEmpty#227, count#228]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#229, count(1)#230]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#229 AS sales#63, count(1)#230 AS number_sales#64, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#229 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#231]

(195) Filter [codegen id : 501]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#63, number_sales#64, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#231]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#231) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#231 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#48, [id=#49] as decimal(32,6))))

(196) Project [codegen id : 501]
Output [6]: [catalog AS channel#232, i_brand_id#8, i_class_id#9, i_category_id#10, sales#63, number_sales#64]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#63, number_sales#64, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#231]

(197) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#233, isEmpty#234, count#235]

(198) HashAggregate [codegen id : 536]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#233, isEmpty#234, count#235]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#236, count(1)#237]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#236 AS sales#79, count(1)#237 AS number_sales#80, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#236 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#238]

(199) Filter [codegen id : 536]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#79, number_sales#80, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#238]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#238) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#238 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#48, [id=#49] as decimal(32,6))))

(200) Project [codegen id : 536]
Output [6]: [web AS channel#239, i_brand_id#8, i_class_id#9, i_category_id#10, sales#79, number_sales#80]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#79, number_sales#80, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#238]

(201) Union

(202) HashAggregate [codegen id : 537]
Input [6]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sales#45, number_sales#46]
Keys [4]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(sales#45), partial_sum(number_sales#46)]
Aggregate Attributes [3]: [sum#240, isEmpty#241, sum#242]
Results [7]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sum#243, isEmpty#244, sum#245]

(203) Exchange
Input [7]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sum#243, isEmpty#244, sum#245]
Arguments: hashpartitioning(channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#246]

(204) HashAggregate [codegen id : 538]
Input [7]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sum#243, isEmpty#244, sum#245]
Keys [4]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(sales#45), sum(number_sales#46)]
Aggregate Attributes [2]: [sum(sales#45)#247, sum(number_sales#46)#248]
Results [2]: [sum(sales#45)#247 AS sum_sales#92, sum(number_sales#46)#248 AS number_sales#93]

(205) HashAggregate [codegen id : 538]
Input [2]: [sum_sales#92, number_sales#93]
Keys: []
Functions [2]: [partial_sum(sum_sales#92), partial_sum(number_sales#93)]
Aggregate Attributes [3]: [sum#249, isEmpty#250, sum#251]
Results [3]: [sum#252, isEmpty#253, sum#254]

(206) Exchange
Input [3]: [sum#252, isEmpty#253, sum#254]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#255]

(207) HashAggregate [codegen id : 539]
Input [3]: [sum#252, isEmpty#253, sum#254]
Keys: []
Functions [2]: [sum(sum_sales#92), sum(number_sales#93)]
Aggregate Attributes [2]: [sum(sum_sales#92)#256, sum(number_sales#93)#257]
Results [6]: [null AS channel#258, null AS i_brand_id#259, null AS i_class_id#260, null AS i_category_id#261, sum(sum_sales#92)#256 AS sum(sum_sales)#262, sum(number_sales#93)#257 AS sum(number_sales)#263]

(208) Union

(209) HashAggregate [codegen id : 540]
Input [6]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#92, number_sales#93]
Keys [6]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#92, number_sales#93]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#92, number_sales#93]

(210) Exchange
Input [6]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#92, number_sales#93]
Arguments: hashpartitioning(channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#92, number_sales#93, 5), ENSURE_REQUIREMENTS, [id=#264]

(211) HashAggregate [codegen id : 541]
Input [6]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#92, number_sales#93]
Keys [6]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#92, number_sales#93]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#92, number_sales#93]

(212) TakeOrderedAndProject
Input [6]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#92, number_sales#93]
Arguments: 100, [channel#50 ASC NULLS FIRST, i_brand_id#8 ASC NULLS FIRST, i_class_id#9 ASC NULLS FIRST, i_category_id#10 ASC NULLS FIRST], [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sum_sales#92, number_sales#93]

===== Subqueries =====

Subquery:1 Hosting operator id = 88 Hosting Expression = Subquery scalar-subquery#48, [id=#49]
* HashAggregate (239)
+- Exchange (238)
   +- * HashAggregate (237)
      +- Union (236)
         :- * Project (221)
         :  +- * BroadcastHashJoin Inner BuildRight (220)
         :     :- * ColumnarToRow (214)
         :     :  +- Scan parquet default.store_sales (213)
         :     +- BroadcastExchange (219)
         :        +- * Project (218)
         :           +- * Filter (217)
         :              +- * ColumnarToRow (216)
         :                 +- Scan parquet default.date_dim (215)
         :- * Project (230)
         :  +- * BroadcastHashJoin Inner BuildRight (229)
         :     :- * ColumnarToRow (223)
         :     :  +- Scan parquet default.catalog_sales (222)
         :     +- BroadcastExchange (228)
         :        +- * Project (227)
         :           +- * Filter (226)
         :              +- * ColumnarToRow (225)
         :                 +- Scan parquet default.date_dim (224)
         +- * Project (235)
            +- * BroadcastHashJoin Inner BuildRight (234)
               :- * ColumnarToRow (232)
               :  +- Scan parquet default.web_sales (231)
               +- ReusedExchange (233)


(213) Scan parquet default.store_sales
Output [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#265)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(214) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(215) Scan parquet default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(216) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#12, d_year#13]

(217) Filter [codegen id : 1]
Input [2]: [d_date_sk#12, d_year#13]
Condition : (((isnotnull(d_year#13) AND (d_year#13 >= 1999)) AND (d_year#13 <= 2001)) AND isnotnull(d_date_sk#12))

(218) Project [codegen id : 1]
Output [1]: [d_date_sk#12]
Input [2]: [d_date_sk#12, d_year#13]

(219) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#266]

(220) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#12]
Join condition: None

(221) Project [codegen id : 2]
Output [2]: [ss_quantity#2 AS quantity#267, ss_list_price#3 AS list_price#268]
Input [4]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#12]

(222) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#51, cs_list_price#52, cs_sold_date_sk#20]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#20), dynamicpruningexpression(cs_sold_date_sk#20 IN dynamicpruning#269)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(223) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#51, cs_list_price#52, cs_sold_date_sk#20]

(224) Scan parquet default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(225) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#12, d_year#13]

(226) Filter [codegen id : 3]
Input [2]: [d_date_sk#12, d_year#13]
Condition : (((isnotnull(d_year#13) AND (d_year#13 >= 1998)) AND (d_year#13 <= 2000)) AND isnotnull(d_date_sk#12))

(227) Project [codegen id : 3]
Output [1]: [d_date_sk#12]
Input [2]: [d_date_sk#12, d_year#13]

(228) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#270]

(229) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#20]
Right keys [1]: [d_date_sk#12]
Join condition: None

(230) Project [codegen id : 4]
Output [2]: [cs_quantity#51 AS quantity#271, cs_list_price#52 AS list_price#272]
Input [4]: [cs_quantity#51, cs_list_price#52, cs_sold_date_sk#20, d_date_sk#12]

(231) Scan parquet default.web_sales
Output [3]: [ws_quantity#67, ws_list_price#68, ws_sold_date_sk#25]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#25), dynamicpruningexpression(ws_sold_date_sk#25 IN dynamicpruning#269)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(232) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#67, ws_list_price#68, ws_sold_date_sk#25]

(233) ReusedExchange [Reuses operator id: 228]
Output [1]: [d_date_sk#12]

(234) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#25]
Right keys [1]: [d_date_sk#12]
Join condition: None

(235) Project [codegen id : 6]
Output [2]: [ws_quantity#67 AS quantity#273, ws_list_price#68 AS list_price#274]
Input [4]: [ws_quantity#67, ws_list_price#68, ws_sold_date_sk#25, d_date_sk#12]

(236) Union

(237) HashAggregate [codegen id : 7]
Input [2]: [quantity#267, list_price#268]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#267 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#268 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#275, count#276]
Results [2]: [sum#277, count#278]

(238) Exchange
Input [2]: [sum#277, count#278]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#279]

(239) HashAggregate [codegen id : 8]
Input [2]: [sum#277, count#278]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#267 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#268 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#267 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#268 as decimal(12,2)))), DecimalType(18,2), true))#280]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#267 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#268 as decimal(12,2)))), DecimalType(18,2), true))#280 AS average_sales#281]

Subquery:2 Hosting operator id = 213 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#265
ReusedExchange (240)


(240) ReusedExchange [Reuses operator id: 219]
Output [1]: [d_date_sk#12]

Subquery:3 Hosting operator id = 222 Hosting Expression = cs_sold_date_sk#20 IN dynamicpruning#269
ReusedExchange (241)


(241) ReusedExchange [Reuses operator id: 228]
Output [1]: [d_date_sk#12]

Subquery:4 Hosting operator id = 231 Hosting Expression = ws_sold_date_sk#25 IN dynamicpruning#269

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (242)


(242) ReusedExchange [Reuses operator id: 71]
Output [1]: [d_date_sk#12]

Subquery:6 Hosting operator id = 9 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#11
ReusedExchange (243)


(243) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#12]

Subquery:7 Hosting operator id = 25 Hosting Expression = cs_sold_date_sk#20 IN dynamicpruning#11

Subquery:8 Hosting operator id = 42 Hosting Expression = ws_sold_date_sk#25 IN dynamicpruning#11

Subquery:9 Hosting operator id = 107 Hosting Expression = ReusedSubquery Subquery scalar-subquery#48, [id=#49]

Subquery:10 Hosting operator id = 90 Hosting Expression = cs_sold_date_sk#20 IN dynamicpruning#5

Subquery:11 Hosting operator id = 126 Hosting Expression = ReusedSubquery Subquery scalar-subquery#48, [id=#49]

Subquery:12 Hosting operator id = 109 Hosting Expression = ws_sold_date_sk#25 IN dynamicpruning#5

Subquery:13 Hosting operator id = 134 Hosting Expression = ReusedSubquery Subquery scalar-subquery#48, [id=#49]

Subquery:14 Hosting operator id = 138 Hosting Expression = ReusedSubquery Subquery scalar-subquery#48, [id=#49]

Subquery:15 Hosting operator id = 142 Hosting Expression = ReusedSubquery Subquery scalar-subquery#48, [id=#49]

Subquery:16 Hosting operator id = 153 Hosting Expression = ReusedSubquery Subquery scalar-subquery#48, [id=#49]

Subquery:17 Hosting operator id = 157 Hosting Expression = ReusedSubquery Subquery scalar-subquery#48, [id=#49]

Subquery:18 Hosting operator id = 161 Hosting Expression = ReusedSubquery Subquery scalar-subquery#48, [id=#49]

Subquery:19 Hosting operator id = 172 Hosting Expression = ReusedSubquery Subquery scalar-subquery#48, [id=#49]

Subquery:20 Hosting operator id = 176 Hosting Expression = ReusedSubquery Subquery scalar-subquery#48, [id=#49]

Subquery:21 Hosting operator id = 180 Hosting Expression = ReusedSubquery Subquery scalar-subquery#48, [id=#49]

Subquery:22 Hosting operator id = 191 Hosting Expression = ReusedSubquery Subquery scalar-subquery#48, [id=#49]

Subquery:23 Hosting operator id = 195 Hosting Expression = ReusedSubquery Subquery scalar-subquery#48, [id=#49]

Subquery:24 Hosting operator id = 199 Hosting Expression = ReusedSubquery Subquery scalar-subquery#48, [id=#49]


