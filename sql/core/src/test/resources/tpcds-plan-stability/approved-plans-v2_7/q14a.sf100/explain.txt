== Physical Plan ==
TakeOrderedAndProject (126)
+- * HashAggregate (125)
   +- Exchange (124)
      +- * HashAggregate (123)
         +- Union (122)
            :- * HashAggregate (101)
            :  +- Exchange (100)
            :     +- * HashAggregate (99)
            :        +- Union (98)
            :           :- * Filter (67)
            :           :  +- * HashAggregate (66)
            :           :     +- Exchange (65)
            :           :        +- * HashAggregate (64)
            :           :           +- * Project (63)
            :           :              +- * BroadcastHashJoin Inner BuildRight (62)
            :           :                 :- * Project (60)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (59)
            :           :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (57)
            :           :                 :     :  :- * Filter (3)
            :           :                 :     :  :  +- * ColumnarToRow (2)
            :           :                 :     :  :     +- Scan parquet spark_catalog.default.store_sales (1)
            :           :                 :     :  +- BroadcastExchange (56)
            :           :                 :     :     +- * Project (55)
            :           :                 :     :        +- * BroadcastHashJoin Inner BuildRight (54)
            :           :                 :     :           :- * Filter (6)
            :           :                 :     :           :  +- * ColumnarToRow (5)
            :           :                 :     :           :     +- Scan parquet spark_catalog.default.item (4)
            :           :                 :     :           +- BroadcastExchange (53)
            :           :                 :     :              +- * SortMergeJoin LeftSemi (52)
            :           :                 :     :                 :- * Sort (40)
            :           :                 :     :                 :  +- Exchange (39)
            :           :                 :     :                 :     +- * HashAggregate (38)
            :           :                 :     :                 :        +- Exchange (37)
            :           :                 :     :                 :           +- * HashAggregate (36)
            :           :                 :     :                 :              +- * Project (35)
            :           :                 :     :                 :                 +- * BroadcastHashJoin Inner BuildRight (34)
            :           :                 :     :                 :                    :- * Project (12)
            :           :                 :     :                 :                    :  +- * BroadcastHashJoin Inner BuildRight (11)
            :           :                 :     :                 :                    :     :- * Filter (9)
            :           :                 :     :                 :                    :     :  +- * ColumnarToRow (8)
            :           :                 :     :                 :                    :     :     +- Scan parquet spark_catalog.default.store_sales (7)
            :           :                 :     :                 :                    :     +- ReusedExchange (10)
            :           :                 :     :                 :                    +- BroadcastExchange (33)
            :           :                 :     :                 :                       +- * SortMergeJoin LeftSemi (32)
            :           :                 :     :                 :                          :- * Sort (17)
            :           :                 :     :                 :                          :  +- Exchange (16)
            :           :                 :     :                 :                          :     +- * Filter (15)
            :           :                 :     :                 :                          :        +- * ColumnarToRow (14)
            :           :                 :     :                 :                          :           +- Scan parquet spark_catalog.default.item (13)
            :           :                 :     :                 :                          +- * Sort (31)
            :           :                 :     :                 :                             +- Exchange (30)
            :           :                 :     :                 :                                +- * Project (29)
            :           :                 :     :                 :                                   +- * BroadcastHashJoin Inner BuildRight (28)
            :           :                 :     :                 :                                      :- * Project (23)
            :           :                 :     :                 :                                      :  +- * BroadcastHashJoin Inner BuildRight (22)
            :           :                 :     :                 :                                      :     :- * Filter (20)
            :           :                 :     :                 :                                      :     :  +- * ColumnarToRow (19)
            :           :                 :     :                 :                                      :     :     +- Scan parquet spark_catalog.default.catalog_sales (18)
            :           :                 :     :                 :                                      :     +- ReusedExchange (21)
            :           :                 :     :                 :                                      +- BroadcastExchange (27)
            :           :                 :     :                 :                                         +- * Filter (26)
            :           :                 :     :                 :                                            +- * ColumnarToRow (25)
            :           :                 :     :                 :                                               +- Scan parquet spark_catalog.default.item (24)
            :           :                 :     :                 +- * Sort (51)
            :           :                 :     :                    +- Exchange (50)
            :           :                 :     :                       +- * Project (49)
            :           :                 :     :                          +- * BroadcastHashJoin Inner BuildRight (48)
            :           :                 :     :                             :- * Project (46)
            :           :                 :     :                             :  +- * BroadcastHashJoin Inner BuildRight (45)
            :           :                 :     :                             :     :- * Filter (43)
            :           :                 :     :                             :     :  +- * ColumnarToRow (42)
            :           :                 :     :                             :     :     +- Scan parquet spark_catalog.default.web_sales (41)
            :           :                 :     :                             :     +- ReusedExchange (44)
            :           :                 :     :                             +- ReusedExchange (47)
            :           :                 :     +- ReusedExchange (58)
            :           :                 +- ReusedExchange (61)
            :           :- * Filter (82)
            :           :  +- * HashAggregate (81)
            :           :     +- Exchange (80)
            :           :        +- * HashAggregate (79)
            :           :           +- * Project (78)
            :           :              +- * BroadcastHashJoin Inner BuildRight (77)
            :           :                 :- * Project (75)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (74)
            :           :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (72)
            :           :                 :     :  :- * Filter (70)
            :           :                 :     :  :  +- * ColumnarToRow (69)
            :           :                 :     :  :     +- Scan parquet spark_catalog.default.catalog_sales (68)
            :           :                 :     :  +- ReusedExchange (71)
            :           :                 :     +- ReusedExchange (73)
            :           :                 +- ReusedExchange (76)
            :           +- * Filter (97)
            :              +- * HashAggregate (96)
            :                 +- Exchange (95)
            :                    +- * HashAggregate (94)
            :                       +- * Project (93)
            :                          +- * BroadcastHashJoin Inner BuildRight (92)
            :                             :- * Project (90)
            :                             :  +- * BroadcastHashJoin Inner BuildRight (89)
            :                             :     :- * BroadcastHashJoin LeftSemi BuildRight (87)
            :                             :     :  :- * Filter (85)
            :                             :     :  :  +- * ColumnarToRow (84)
            :                             :     :  :     +- Scan parquet spark_catalog.default.web_sales (83)
            :                             :     :  +- ReusedExchange (86)
            :                             :     +- ReusedExchange (88)
            :                             +- ReusedExchange (91)
            :- * HashAggregate (106)
            :  +- Exchange (105)
            :     +- * HashAggregate (104)
            :        +- * HashAggregate (103)
            :           +- ReusedExchange (102)
            :- * HashAggregate (111)
            :  +- Exchange (110)
            :     +- * HashAggregate (109)
            :        +- * HashAggregate (108)
            :           +- ReusedExchange (107)
            :- * HashAggregate (116)
            :  +- Exchange (115)
            :     +- * HashAggregate (114)
            :        +- * HashAggregate (113)
            :           +- ReusedExchange (112)
            +- * HashAggregate (121)
               +- Exchange (120)
                  +- * HashAggregate (119)
                     +- * HashAggregate (118)
                        +- ReusedExchange (117)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 20]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 20]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 17]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(6) Filter [codegen id : 17]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : (((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9)) AND isnotnull(i_item_sk#6))

(7) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 9]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]

(9) Filter [codegen id : 9]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(10) ReusedExchange [Reuses operator id: 160]
Output [1]: [d_date_sk#13]

(11) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#13]
Join type: Inner
Join condition: None

(12) Project [codegen id : 9]
Output [1]: [ss_item_sk#10]
Input [3]: [ss_item_sk#10, ss_sold_date_sk#11, d_date_sk#13]

(13) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(14) ColumnarToRow [codegen id : 2]
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]

(15) Filter [codegen id : 2]
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Condition : (((isnotnull(i_item_sk#14) AND isnotnull(i_brand_id#15)) AND isnotnull(i_class_id#16)) AND isnotnull(i_category_id#17))

(16) Exchange
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Arguments: hashpartitioning(coalesce(i_brand_id#15, 0), isnull(i_brand_id#15), coalesce(i_class_id#16, 0), isnull(i_class_id#16), coalesce(i_category_id#17, 0), isnull(i_category_id#17), 5), ENSURE_REQUIREMENTS, [plan_id=1]

(17) Sort [codegen id : 3]
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Arguments: [coalesce(i_brand_id#15, 0) ASC NULLS FIRST, isnull(i_brand_id#15) ASC NULLS FIRST, coalesce(i_class_id#16, 0) ASC NULLS FIRST, isnull(i_class_id#16) ASC NULLS FIRST, coalesce(i_category_id#17, 0) ASC NULLS FIRST, isnull(i_category_id#17) ASC NULLS FIRST], false, 0

(18) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_item_sk#18, cs_sold_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#19), dynamicpruningexpression(cs_sold_date_sk#19 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(19) ColumnarToRow [codegen id : 6]
Input [2]: [cs_item_sk#18, cs_sold_date_sk#19]

(20) Filter [codegen id : 6]
Input [2]: [cs_item_sk#18, cs_sold_date_sk#19]
Condition : isnotnull(cs_item_sk#18)

(21) ReusedExchange [Reuses operator id: 160]
Output [1]: [d_date_sk#20]

(22) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#19]
Right keys [1]: [d_date_sk#20]
Join type: Inner
Join condition: None

(23) Project [codegen id : 6]
Output [1]: [cs_item_sk#18]
Input [3]: [cs_item_sk#18, cs_sold_date_sk#19, d_date_sk#20]

(24) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(25) ColumnarToRow [codegen id : 5]
Input [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]

(26) Filter [codegen id : 5]
Input [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]
Condition : isnotnull(i_item_sk#21)

(27) BroadcastExchange
Input [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(28) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_item_sk#18]
Right keys [1]: [i_item_sk#21]
Join type: Inner
Join condition: None

(29) Project [codegen id : 6]
Output [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Input [5]: [cs_item_sk#18, i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]

(30) Exchange
Input [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Arguments: hashpartitioning(coalesce(i_brand_id#22, 0), isnull(i_brand_id#22), coalesce(i_class_id#23, 0), isnull(i_class_id#23), coalesce(i_category_id#24, 0), isnull(i_category_id#24), 5), ENSURE_REQUIREMENTS, [plan_id=3]

(31) Sort [codegen id : 7]
Input [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Arguments: [coalesce(i_brand_id#22, 0) ASC NULLS FIRST, isnull(i_brand_id#22) ASC NULLS FIRST, coalesce(i_class_id#23, 0) ASC NULLS FIRST, isnull(i_class_id#23) ASC NULLS FIRST, coalesce(i_category_id#24, 0) ASC NULLS FIRST, isnull(i_category_id#24) ASC NULLS FIRST], false, 0

(32) SortMergeJoin [codegen id : 8]
Left keys [6]: [coalesce(i_brand_id#15, 0), isnull(i_brand_id#15), coalesce(i_class_id#16, 0), isnull(i_class_id#16), coalesce(i_category_id#17, 0), isnull(i_category_id#17)]
Right keys [6]: [coalesce(i_brand_id#22, 0), isnull(i_brand_id#22), coalesce(i_class_id#23, 0), isnull(i_class_id#23), coalesce(i_category_id#24, 0), isnull(i_category_id#24)]
Join type: LeftSemi
Join condition: None

(33) BroadcastExchange
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=4]

(34) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#10]
Right keys [1]: [i_item_sk#14]
Join type: Inner
Join condition: None

(35) Project [codegen id : 9]
Output [3]: [i_brand_id#15 AS brand_id#25, i_class_id#16 AS class_id#26, i_category_id#17 AS category_id#27]
Input [5]: [ss_item_sk#10, i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]

(36) HashAggregate [codegen id : 9]
Input [3]: [brand_id#25, class_id#26, category_id#27]
Keys [3]: [brand_id#25, class_id#26, category_id#27]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#25, class_id#26, category_id#27]

(37) Exchange
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: hashpartitioning(brand_id#25, class_id#26, category_id#27, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(38) HashAggregate [codegen id : 10]
Input [3]: [brand_id#25, class_id#26, category_id#27]
Keys [3]: [brand_id#25, class_id#26, category_id#27]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#25, class_id#26, category_id#27]

(39) Exchange
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: hashpartitioning(coalesce(brand_id#25, 0), isnull(brand_id#25), coalesce(class_id#26, 0), isnull(class_id#26), coalesce(category_id#27, 0), isnull(category_id#27), 5), ENSURE_REQUIREMENTS, [plan_id=6]

(40) Sort [codegen id : 11]
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: [coalesce(brand_id#25, 0) ASC NULLS FIRST, isnull(brand_id#25) ASC NULLS FIRST, coalesce(class_id#26, 0) ASC NULLS FIRST, isnull(class_id#26) ASC NULLS FIRST, coalesce(category_id#27, 0) ASC NULLS FIRST, isnull(category_id#27) ASC NULLS FIRST], false, 0

(41) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_item_sk#28, ws_sold_date_sk#29]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#29), dynamicpruningexpression(ws_sold_date_sk#29 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(42) ColumnarToRow [codegen id : 14]
Input [2]: [ws_item_sk#28, ws_sold_date_sk#29]

(43) Filter [codegen id : 14]
Input [2]: [ws_item_sk#28, ws_sold_date_sk#29]
Condition : isnotnull(ws_item_sk#28)

(44) ReusedExchange [Reuses operator id: 160]
Output [1]: [d_date_sk#30]

(45) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_sold_date_sk#29]
Right keys [1]: [d_date_sk#30]
Join type: Inner
Join condition: None

(46) Project [codegen id : 14]
Output [1]: [ws_item_sk#28]
Input [3]: [ws_item_sk#28, ws_sold_date_sk#29, d_date_sk#30]

(47) ReusedExchange [Reuses operator id: 27]
Output [4]: [i_item_sk#31, i_brand_id#32, i_class_id#33, i_category_id#34]

(48) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_item_sk#28]
Right keys [1]: [i_item_sk#31]
Join type: Inner
Join condition: None

(49) Project [codegen id : 14]
Output [3]: [i_brand_id#32, i_class_id#33, i_category_id#34]
Input [5]: [ws_item_sk#28, i_item_sk#31, i_brand_id#32, i_class_id#33, i_category_id#34]

(50) Exchange
Input [3]: [i_brand_id#32, i_class_id#33, i_category_id#34]
Arguments: hashpartitioning(coalesce(i_brand_id#32, 0), isnull(i_brand_id#32), coalesce(i_class_id#33, 0), isnull(i_class_id#33), coalesce(i_category_id#34, 0), isnull(i_category_id#34), 5), ENSURE_REQUIREMENTS, [plan_id=7]

(51) Sort [codegen id : 15]
Input [3]: [i_brand_id#32, i_class_id#33, i_category_id#34]
Arguments: [coalesce(i_brand_id#32, 0) ASC NULLS FIRST, isnull(i_brand_id#32) ASC NULLS FIRST, coalesce(i_class_id#33, 0) ASC NULLS FIRST, isnull(i_class_id#33) ASC NULLS FIRST, coalesce(i_category_id#34, 0) ASC NULLS FIRST, isnull(i_category_id#34) ASC NULLS FIRST], false, 0

(52) SortMergeJoin [codegen id : 16]
Left keys [6]: [coalesce(brand_id#25, 0), isnull(brand_id#25), coalesce(class_id#26, 0), isnull(class_id#26), coalesce(category_id#27, 0), isnull(category_id#27)]
Right keys [6]: [coalesce(i_brand_id#32, 0), isnull(i_brand_id#32), coalesce(i_class_id#33, 0), isnull(i_class_id#33), coalesce(i_category_id#34, 0), isnull(i_category_id#34)]
Join type: LeftSemi
Join condition: None

(53) BroadcastExchange
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [plan_id=8]

(54) BroadcastHashJoin [codegen id : 17]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#25, class_id#26, category_id#27]
Join type: Inner
Join condition: None

(55) Project [codegen id : 17]
Output [1]: [i_item_sk#6 AS ss_item_sk#35]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#25, class_id#26, category_id#27]

(56) BroadcastExchange
Input [1]: [ss_item_sk#35]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

(57) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#35]
Join type: LeftSemi
Join condition: None

(58) ReusedExchange [Reuses operator id: 155]
Output [1]: [d_date_sk#36]

(59) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#36]
Join type: Inner
Join condition: None

(60) Project [codegen id : 20]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#36]

(61) ReusedExchange [Reuses operator id: 27]
Output [4]: [i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]

(62) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#37]
Join type: Inner
Join condition: None

(63) Project [codegen id : 20]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#38, i_class_id#39, i_category_id#40]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]

(64) HashAggregate [codegen id : 20]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#38, i_class_id#39, i_category_id#40]
Keys [3]: [i_brand_id#38, i_class_id#39, i_category_id#40]
Functions [2]: [partial_sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), partial_count(1)]
Aggregate Attributes [3]: [sum#41, isEmpty#42, count#43]
Results [6]: [i_brand_id#38, i_class_id#39, i_category_id#40, sum#44, isEmpty#45, count#46]

(65) Exchange
Input [6]: [i_brand_id#38, i_class_id#39, i_category_id#40, sum#44, isEmpty#45, count#46]
Arguments: hashpartitioning(i_brand_id#38, i_class_id#39, i_category_id#40, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(66) HashAggregate [codegen id : 21]
Input [6]: [i_brand_id#38, i_class_id#39, i_category_id#40, sum#44, isEmpty#45, count#46]
Keys [3]: [i_brand_id#38, i_class_id#39, i_category_id#40]
Functions [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#47, count(1)#48]
Results [6]: [store AS channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#47 AS sales#50, count(1)#48 AS number_sales#51]

(67) Filter [codegen id : 21]
Input [6]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sales#50, number_sales#51]
Condition : (isnotnull(sales#50) AND (cast(sales#50 as decimal(32,6)) > cast(Subquery scalar-subquery#52, [id=#53] as decimal(32,6))))

(68) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_item_sk#54, cs_quantity#55, cs_list_price#56, cs_sold_date_sk#57]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#57), dynamicpruningexpression(cs_sold_date_sk#57 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(69) ColumnarToRow [codegen id : 41]
Input [4]: [cs_item_sk#54, cs_quantity#55, cs_list_price#56, cs_sold_date_sk#57]

(70) Filter [codegen id : 41]
Input [4]: [cs_item_sk#54, cs_quantity#55, cs_list_price#56, cs_sold_date_sk#57]
Condition : isnotnull(cs_item_sk#54)

(71) ReusedExchange [Reuses operator id: 56]
Output [1]: [ss_item_sk#35]

(72) BroadcastHashJoin [codegen id : 41]
Left keys [1]: [cs_item_sk#54]
Right keys [1]: [ss_item_sk#35]
Join type: LeftSemi
Join condition: None

(73) ReusedExchange [Reuses operator id: 155]
Output [1]: [d_date_sk#58]

(74) BroadcastHashJoin [codegen id : 41]
Left keys [1]: [cs_sold_date_sk#57]
Right keys [1]: [d_date_sk#58]
Join type: Inner
Join condition: None

(75) Project [codegen id : 41]
Output [3]: [cs_item_sk#54, cs_quantity#55, cs_list_price#56]
Input [5]: [cs_item_sk#54, cs_quantity#55, cs_list_price#56, cs_sold_date_sk#57, d_date_sk#58]

(76) ReusedExchange [Reuses operator id: 27]
Output [4]: [i_item_sk#59, i_brand_id#60, i_class_id#61, i_category_id#62]

(77) BroadcastHashJoin [codegen id : 41]
Left keys [1]: [cs_item_sk#54]
Right keys [1]: [i_item_sk#59]
Join type: Inner
Join condition: None

(78) Project [codegen id : 41]
Output [5]: [cs_quantity#55, cs_list_price#56, i_brand_id#60, i_class_id#61, i_category_id#62]
Input [7]: [cs_item_sk#54, cs_quantity#55, cs_list_price#56, i_item_sk#59, i_brand_id#60, i_class_id#61, i_category_id#62]

(79) HashAggregate [codegen id : 41]
Input [5]: [cs_quantity#55, cs_list_price#56, i_brand_id#60, i_class_id#61, i_category_id#62]
Keys [3]: [i_brand_id#60, i_class_id#61, i_category_id#62]
Functions [2]: [partial_sum((cast(cs_quantity#55 as decimal(10,0)) * cs_list_price#56)), partial_count(1)]
Aggregate Attributes [3]: [sum#63, isEmpty#64, count#65]
Results [6]: [i_brand_id#60, i_class_id#61, i_category_id#62, sum#66, isEmpty#67, count#68]

(80) Exchange
Input [6]: [i_brand_id#60, i_class_id#61, i_category_id#62, sum#66, isEmpty#67, count#68]
Arguments: hashpartitioning(i_brand_id#60, i_class_id#61, i_category_id#62, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(81) HashAggregate [codegen id : 42]
Input [6]: [i_brand_id#60, i_class_id#61, i_category_id#62, sum#66, isEmpty#67, count#68]
Keys [3]: [i_brand_id#60, i_class_id#61, i_category_id#62]
Functions [2]: [sum((cast(cs_quantity#55 as decimal(10,0)) * cs_list_price#56)), count(1)]
Aggregate Attributes [2]: [sum((cast(cs_quantity#55 as decimal(10,0)) * cs_list_price#56))#69, count(1)#70]
Results [6]: [catalog AS channel#71, i_brand_id#60, i_class_id#61, i_category_id#62, sum((cast(cs_quantity#55 as decimal(10,0)) * cs_list_price#56))#69 AS sales#72, count(1)#70 AS number_sales#73]

(82) Filter [codegen id : 42]
Input [6]: [channel#71, i_brand_id#60, i_class_id#61, i_category_id#62, sales#72, number_sales#73]
Condition : (isnotnull(sales#72) AND (cast(sales#72 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#52, [id=#53] as decimal(32,6))))

(83) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#74, ws_quantity#75, ws_list_price#76, ws_sold_date_sk#77]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#77), dynamicpruningexpression(ws_sold_date_sk#77 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(84) ColumnarToRow [codegen id : 62]
Input [4]: [ws_item_sk#74, ws_quantity#75, ws_list_price#76, ws_sold_date_sk#77]

(85) Filter [codegen id : 62]
Input [4]: [ws_item_sk#74, ws_quantity#75, ws_list_price#76, ws_sold_date_sk#77]
Condition : isnotnull(ws_item_sk#74)

(86) ReusedExchange [Reuses operator id: 56]
Output [1]: [ss_item_sk#35]

(87) BroadcastHashJoin [codegen id : 62]
Left keys [1]: [ws_item_sk#74]
Right keys [1]: [ss_item_sk#35]
Join type: LeftSemi
Join condition: None

(88) ReusedExchange [Reuses operator id: 155]
Output [1]: [d_date_sk#78]

(89) BroadcastHashJoin [codegen id : 62]
Left keys [1]: [ws_sold_date_sk#77]
Right keys [1]: [d_date_sk#78]
Join type: Inner
Join condition: None

(90) Project [codegen id : 62]
Output [3]: [ws_item_sk#74, ws_quantity#75, ws_list_price#76]
Input [5]: [ws_item_sk#74, ws_quantity#75, ws_list_price#76, ws_sold_date_sk#77, d_date_sk#78]

(91) ReusedExchange [Reuses operator id: 27]
Output [4]: [i_item_sk#79, i_brand_id#80, i_class_id#81, i_category_id#82]

(92) BroadcastHashJoin [codegen id : 62]
Left keys [1]: [ws_item_sk#74]
Right keys [1]: [i_item_sk#79]
Join type: Inner
Join condition: None

(93) Project [codegen id : 62]
Output [5]: [ws_quantity#75, ws_list_price#76, i_brand_id#80, i_class_id#81, i_category_id#82]
Input [7]: [ws_item_sk#74, ws_quantity#75, ws_list_price#76, i_item_sk#79, i_brand_id#80, i_class_id#81, i_category_id#82]

(94) HashAggregate [codegen id : 62]
Input [5]: [ws_quantity#75, ws_list_price#76, i_brand_id#80, i_class_id#81, i_category_id#82]
Keys [3]: [i_brand_id#80, i_class_id#81, i_category_id#82]
Functions [2]: [partial_sum((cast(ws_quantity#75 as decimal(10,0)) * ws_list_price#76)), partial_count(1)]
Aggregate Attributes [3]: [sum#83, isEmpty#84, count#85]
Results [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum#86, isEmpty#87, count#88]

(95) Exchange
Input [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum#86, isEmpty#87, count#88]
Arguments: hashpartitioning(i_brand_id#80, i_class_id#81, i_category_id#82, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(96) HashAggregate [codegen id : 63]
Input [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum#86, isEmpty#87, count#88]
Keys [3]: [i_brand_id#80, i_class_id#81, i_category_id#82]
Functions [2]: [sum((cast(ws_quantity#75 as decimal(10,0)) * ws_list_price#76)), count(1)]
Aggregate Attributes [2]: [sum((cast(ws_quantity#75 as decimal(10,0)) * ws_list_price#76))#89, count(1)#90]
Results [6]: [web AS channel#91, i_brand_id#80, i_class_id#81, i_category_id#82, sum((cast(ws_quantity#75 as decimal(10,0)) * ws_list_price#76))#89 AS sales#92, count(1)#90 AS number_sales#93]

(97) Filter [codegen id : 63]
Input [6]: [channel#91, i_brand_id#80, i_class_id#81, i_category_id#82, sales#92, number_sales#93]
Condition : (isnotnull(sales#92) AND (cast(sales#92 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#52, [id=#53] as decimal(32,6))))

(98) Union

(99) HashAggregate [codegen id : 64]
Input [6]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sales#50, number_sales#51]
Keys [4]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40]
Functions [2]: [partial_sum(sales#50), partial_sum(number_sales#51)]
Aggregate Attributes [3]: [sum#94, isEmpty#95, sum#96]
Results [7]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum#97, isEmpty#98, sum#99]

(100) Exchange
Input [7]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum#97, isEmpty#98, sum#99]
Arguments: hashpartitioning(channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(101) HashAggregate [codegen id : 65]
Input [7]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum#97, isEmpty#98, sum#99]
Keys [4]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40]
Functions [2]: [sum(sales#50), sum(number_sales#51)]
Aggregate Attributes [2]: [sum(sales#50)#100, sum(number_sales#51)#101]
Results [6]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum(sales#50)#100 AS sum_sales#102, sum(number_sales#51)#101 AS number_sales#103]

(102) ReusedExchange [Reuses operator id: 100]
Output [7]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum#97, isEmpty#98, sum#99]

(103) HashAggregate [codegen id : 130]
Input [7]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum#97, isEmpty#98, sum#99]
Keys [4]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40]
Functions [2]: [sum(sales#50), sum(number_sales#51)]
Aggregate Attributes [2]: [sum(sales#50)#100, sum(number_sales#51)#101]
Results [5]: [channel#49, i_brand_id#38, i_class_id#39, sum(sales#50)#100 AS sum_sales#102, sum(number_sales#51)#101 AS number_sales#103]

(104) HashAggregate [codegen id : 130]
Input [5]: [channel#49, i_brand_id#38, i_class_id#39, sum_sales#102, number_sales#103]
Keys [3]: [channel#49, i_brand_id#38, i_class_id#39]
Functions [2]: [partial_sum(sum_sales#102), partial_sum(number_sales#103)]
Aggregate Attributes [3]: [sum#104, isEmpty#105, sum#106]
Results [6]: [channel#49, i_brand_id#38, i_class_id#39, sum#107, isEmpty#108, sum#109]

(105) Exchange
Input [6]: [channel#49, i_brand_id#38, i_class_id#39, sum#107, isEmpty#108, sum#109]
Arguments: hashpartitioning(channel#49, i_brand_id#38, i_class_id#39, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(106) HashAggregate [codegen id : 131]
Input [6]: [channel#49, i_brand_id#38, i_class_id#39, sum#107, isEmpty#108, sum#109]
Keys [3]: [channel#49, i_brand_id#38, i_class_id#39]
Functions [2]: [sum(sum_sales#102), sum(number_sales#103)]
Aggregate Attributes [2]: [sum(sum_sales#102)#110, sum(number_sales#103)#111]
Results [6]: [channel#49, i_brand_id#38, i_class_id#39, null AS i_category_id#112, sum(sum_sales#102)#110 AS sum(sum_sales)#113, sum(number_sales#103)#111 AS sum(number_sales)#114]

(107) ReusedExchange [Reuses operator id: 100]
Output [7]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum#97, isEmpty#98, sum#99]

(108) HashAggregate [codegen id : 196]
Input [7]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum#97, isEmpty#98, sum#99]
Keys [4]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40]
Functions [2]: [sum(sales#50), sum(number_sales#51)]
Aggregate Attributes [2]: [sum(sales#50)#100, sum(number_sales#51)#101]
Results [4]: [channel#49, i_brand_id#38, sum(sales#50)#100 AS sum_sales#102, sum(number_sales#51)#101 AS number_sales#103]

(109) HashAggregate [codegen id : 196]
Input [4]: [channel#49, i_brand_id#38, sum_sales#102, number_sales#103]
Keys [2]: [channel#49, i_brand_id#38]
Functions [2]: [partial_sum(sum_sales#102), partial_sum(number_sales#103)]
Aggregate Attributes [3]: [sum#115, isEmpty#116, sum#117]
Results [5]: [channel#49, i_brand_id#38, sum#118, isEmpty#119, sum#120]

(110) Exchange
Input [5]: [channel#49, i_brand_id#38, sum#118, isEmpty#119, sum#120]
Arguments: hashpartitioning(channel#49, i_brand_id#38, 5), ENSURE_REQUIREMENTS, [plan_id=15]

(111) HashAggregate [codegen id : 197]
Input [5]: [channel#49, i_brand_id#38, sum#118, isEmpty#119, sum#120]
Keys [2]: [channel#49, i_brand_id#38]
Functions [2]: [sum(sum_sales#102), sum(number_sales#103)]
Aggregate Attributes [2]: [sum(sum_sales#102)#121, sum(number_sales#103)#122]
Results [6]: [channel#49, i_brand_id#38, null AS i_class_id#123, null AS i_category_id#124, sum(sum_sales#102)#121 AS sum(sum_sales)#125, sum(number_sales#103)#122 AS sum(number_sales)#126]

(112) ReusedExchange [Reuses operator id: 100]
Output [7]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum#97, isEmpty#98, sum#99]

(113) HashAggregate [codegen id : 262]
Input [7]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum#97, isEmpty#98, sum#99]
Keys [4]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40]
Functions [2]: [sum(sales#50), sum(number_sales#51)]
Aggregate Attributes [2]: [sum(sales#50)#100, sum(number_sales#51)#101]
Results [3]: [channel#49, sum(sales#50)#100 AS sum_sales#102, sum(number_sales#51)#101 AS number_sales#103]

(114) HashAggregate [codegen id : 262]
Input [3]: [channel#49, sum_sales#102, number_sales#103]
Keys [1]: [channel#49]
Functions [2]: [partial_sum(sum_sales#102), partial_sum(number_sales#103)]
Aggregate Attributes [3]: [sum#127, isEmpty#128, sum#129]
Results [4]: [channel#49, sum#130, isEmpty#131, sum#132]

(115) Exchange
Input [4]: [channel#49, sum#130, isEmpty#131, sum#132]
Arguments: hashpartitioning(channel#49, 5), ENSURE_REQUIREMENTS, [plan_id=16]

(116) HashAggregate [codegen id : 263]
Input [4]: [channel#49, sum#130, isEmpty#131, sum#132]
Keys [1]: [channel#49]
Functions [2]: [sum(sum_sales#102), sum(number_sales#103)]
Aggregate Attributes [2]: [sum(sum_sales#102)#133, sum(number_sales#103)#134]
Results [6]: [channel#49, null AS i_brand_id#135, null AS i_class_id#136, null AS i_category_id#137, sum(sum_sales#102)#133 AS sum(sum_sales)#138, sum(number_sales#103)#134 AS sum(number_sales)#139]

(117) ReusedExchange [Reuses operator id: 100]
Output [7]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum#97, isEmpty#98, sum#99]

(118) HashAggregate [codegen id : 328]
Input [7]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum#97, isEmpty#98, sum#99]
Keys [4]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40]
Functions [2]: [sum(sales#50), sum(number_sales#51)]
Aggregate Attributes [2]: [sum(sales#50)#100, sum(number_sales#51)#101]
Results [2]: [sum(sales#50)#100 AS sum_sales#102, sum(number_sales#51)#101 AS number_sales#103]

(119) HashAggregate [codegen id : 328]
Input [2]: [sum_sales#102, number_sales#103]
Keys: []
Functions [2]: [partial_sum(sum_sales#102), partial_sum(number_sales#103)]
Aggregate Attributes [3]: [sum#140, isEmpty#141, sum#142]
Results [3]: [sum#143, isEmpty#144, sum#145]

(120) Exchange
Input [3]: [sum#143, isEmpty#144, sum#145]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=17]

(121) HashAggregate [codegen id : 329]
Input [3]: [sum#143, isEmpty#144, sum#145]
Keys: []
Functions [2]: [sum(sum_sales#102), sum(number_sales#103)]
Aggregate Attributes [2]: [sum(sum_sales#102)#146, sum(number_sales#103)#147]
Results [6]: [null AS channel#148, null AS i_brand_id#149, null AS i_class_id#150, null AS i_category_id#151, sum(sum_sales#102)#146 AS sum(sum_sales)#152, sum(number_sales#103)#147 AS sum(number_sales)#153]

(122) Union

(123) HashAggregate [codegen id : 330]
Input [6]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum_sales#102, number_sales#103]
Keys [6]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum_sales#102, number_sales#103]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum_sales#102, number_sales#103]

(124) Exchange
Input [6]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum_sales#102, number_sales#103]
Arguments: hashpartitioning(channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum_sales#102, number_sales#103, 5), ENSURE_REQUIREMENTS, [plan_id=18]

(125) HashAggregate [codegen id : 331]
Input [6]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum_sales#102, number_sales#103]
Keys [6]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum_sales#102, number_sales#103]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum_sales#102, number_sales#103]

(126) TakeOrderedAndProject
Input [6]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum_sales#102, number_sales#103]
Arguments: 100, [channel#49 ASC NULLS FIRST, i_brand_id#38 ASC NULLS FIRST, i_class_id#39 ASC NULLS FIRST, i_category_id#40 ASC NULLS FIRST], [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum_sales#102, number_sales#103]

===== Subqueries =====

Subquery:1 Hosting operator id = 67 Hosting Expression = Subquery scalar-subquery#52, [id=#53]
* HashAggregate (145)
+- Exchange (144)
   +- * HashAggregate (143)
      +- Union (142)
         :- * Project (131)
         :  +- * BroadcastHashJoin Inner BuildRight (130)
         :     :- * ColumnarToRow (128)
         :     :  +- Scan parquet spark_catalog.default.store_sales (127)
         :     +- ReusedExchange (129)
         :- * Project (136)
         :  +- * BroadcastHashJoin Inner BuildRight (135)
         :     :- * ColumnarToRow (133)
         :     :  +- Scan parquet spark_catalog.default.catalog_sales (132)
         :     +- ReusedExchange (134)
         +- * Project (141)
            +- * BroadcastHashJoin Inner BuildRight (140)
               :- * ColumnarToRow (138)
               :  +- Scan parquet spark_catalog.default.web_sales (137)
               +- ReusedExchange (139)


(127) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_quantity#154, ss_list_price#155, ss_sold_date_sk#156]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#156), dynamicpruningexpression(ss_sold_date_sk#156 IN dynamicpruning#12)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(128) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#154, ss_list_price#155, ss_sold_date_sk#156]

(129) ReusedExchange [Reuses operator id: 160]
Output [1]: [d_date_sk#157]

(130) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#156]
Right keys [1]: [d_date_sk#157]
Join type: Inner
Join condition: None

(131) Project [codegen id : 2]
Output [2]: [ss_quantity#154 AS quantity#158, ss_list_price#155 AS list_price#159]
Input [4]: [ss_quantity#154, ss_list_price#155, ss_sold_date_sk#156, d_date_sk#157]

(132) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_quantity#160, cs_list_price#161, cs_sold_date_sk#162]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#162), dynamicpruningexpression(cs_sold_date_sk#162 IN dynamicpruning#163)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(133) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#160, cs_list_price#161, cs_sold_date_sk#162]

(134) ReusedExchange [Reuses operator id: 150]
Output [1]: [d_date_sk#164]

(135) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#162]
Right keys [1]: [d_date_sk#164]
Join type: Inner
Join condition: None

(136) Project [codegen id : 4]
Output [2]: [cs_quantity#160 AS quantity#165, cs_list_price#161 AS list_price#166]
Input [4]: [cs_quantity#160, cs_list_price#161, cs_sold_date_sk#162, d_date_sk#164]

(137) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_quantity#167, ws_list_price#168, ws_sold_date_sk#169]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#169), dynamicpruningexpression(ws_sold_date_sk#169 IN dynamicpruning#163)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(138) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#167, ws_list_price#168, ws_sold_date_sk#169]

(139) ReusedExchange [Reuses operator id: 150]
Output [1]: [d_date_sk#170]

(140) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#169]
Right keys [1]: [d_date_sk#170]
Join type: Inner
Join condition: None

(141) Project [codegen id : 6]
Output [2]: [ws_quantity#167 AS quantity#171, ws_list_price#168 AS list_price#172]
Input [4]: [ws_quantity#167, ws_list_price#168, ws_sold_date_sk#169, d_date_sk#170]

(142) Union

(143) HashAggregate [codegen id : 7]
Input [2]: [quantity#158, list_price#159]
Keys: []
Functions [1]: [partial_avg((cast(quantity#158 as decimal(10,0)) * list_price#159))]
Aggregate Attributes [2]: [sum#173, count#174]
Results [2]: [sum#175, count#176]

(144) Exchange
Input [2]: [sum#175, count#176]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=19]

(145) HashAggregate [codegen id : 8]
Input [2]: [sum#175, count#176]
Keys: []
Functions [1]: [avg((cast(quantity#158 as decimal(10,0)) * list_price#159))]
Aggregate Attributes [1]: [avg((cast(quantity#158 as decimal(10,0)) * list_price#159))#177]
Results [1]: [avg((cast(quantity#158 as decimal(10,0)) * list_price#159))#177 AS average_sales#178]

Subquery:2 Hosting operator id = 127 Hosting Expression = ss_sold_date_sk#156 IN dynamicpruning#12

Subquery:3 Hosting operator id = 132 Hosting Expression = cs_sold_date_sk#162 IN dynamicpruning#163
BroadcastExchange (150)
+- * Project (149)
   +- * Filter (148)
      +- * ColumnarToRow (147)
         +- Scan parquet spark_catalog.default.date_dim (146)


(146) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#164, d_year#179]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(147) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#164, d_year#179]

(148) Filter [codegen id : 1]
Input [2]: [d_date_sk#164, d_year#179]
Condition : (((isnotnull(d_year#179) AND (d_year#179 >= 1998)) AND (d_year#179 <= 2000)) AND isnotnull(d_date_sk#164))

(149) Project [codegen id : 1]
Output [1]: [d_date_sk#164]
Input [2]: [d_date_sk#164, d_year#179]

(150) BroadcastExchange
Input [1]: [d_date_sk#164]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=20]

Subquery:4 Hosting operator id = 137 Hosting Expression = ws_sold_date_sk#169 IN dynamicpruning#163

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (155)
+- * Project (154)
   +- * Filter (153)
      +- * ColumnarToRow (152)
         +- Scan parquet spark_catalog.default.date_dim (151)


(151) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#36, d_year#180, d_moy#181]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(152) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#36, d_year#180, d_moy#181]

(153) Filter [codegen id : 1]
Input [3]: [d_date_sk#36, d_year#180, d_moy#181]
Condition : ((((isnotnull(d_year#180) AND isnotnull(d_moy#181)) AND (d_year#180 = 2000)) AND (d_moy#181 = 11)) AND isnotnull(d_date_sk#36))

(154) Project [codegen id : 1]
Output [1]: [d_date_sk#36]
Input [3]: [d_date_sk#36, d_year#180, d_moy#181]

(155) BroadcastExchange
Input [1]: [d_date_sk#36]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=21]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (160)
+- * Project (159)
   +- * Filter (158)
      +- * ColumnarToRow (157)
         +- Scan parquet spark_catalog.default.date_dim (156)


(156) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#13, d_year#182]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(157) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#13, d_year#182]

(158) Filter [codegen id : 1]
Input [2]: [d_date_sk#13, d_year#182]
Condition : (((isnotnull(d_year#182) AND (d_year#182 >= 1999)) AND (d_year#182 <= 2001)) AND isnotnull(d_date_sk#13))

(159) Project [codegen id : 1]
Output [1]: [d_date_sk#13]
Input [2]: [d_date_sk#13, d_year#182]

(160) BroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=22]

Subquery:7 Hosting operator id = 18 Hosting Expression = cs_sold_date_sk#19 IN dynamicpruning#12

Subquery:8 Hosting operator id = 41 Hosting Expression = ws_sold_date_sk#29 IN dynamicpruning#12

Subquery:9 Hosting operator id = 82 Hosting Expression = ReusedSubquery Subquery scalar-subquery#52, [id=#53]

Subquery:10 Hosting operator id = 68 Hosting Expression = cs_sold_date_sk#57 IN dynamicpruning#5

Subquery:11 Hosting operator id = 97 Hosting Expression = ReusedSubquery Subquery scalar-subquery#52, [id=#53]

Subquery:12 Hosting operator id = 83 Hosting Expression = ws_sold_date_sk#77 IN dynamicpruning#5


