== Physical Plan ==
TakeOrderedAndProject (134)
+- * HashAggregate (133)
   +- Exchange (132)
      +- * HashAggregate (131)
         +- Union (130)
            :- * HashAggregate (109)
            :  +- Exchange (108)
            :     +- * HashAggregate (107)
            :        +- Union (106)
            :           :- * Filter (75)
            :           :  +- * HashAggregate (74)
            :           :     +- Exchange (73)
            :           :        +- * HashAggregate (72)
            :           :           +- * Project (71)
            :           :              +- * BroadcastHashJoin Inner BuildRight (70)
            :           :                 :- * Project (63)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (62)
            :           :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (60)
            :           :                 :     :  :- * Filter (3)
            :           :                 :     :  :  +- * ColumnarToRow (2)
            :           :                 :     :  :     +- Scan parquet default.store_sales (1)
            :           :                 :     :  +- BroadcastExchange (59)
            :           :                 :     :     +- * Project (58)
            :           :                 :     :        +- * BroadcastHashJoin LeftSemi BuildRight (57)
            :           :                 :     :           :- * Filter (6)
            :           :                 :     :           :  +- * ColumnarToRow (5)
            :           :                 :     :           :     +- Scan parquet default.item (4)
            :           :                 :     :           +- BroadcastExchange (56)
            :           :                 :     :              +- * HashAggregate (55)
            :           :                 :     :                 +- Exchange (54)
            :           :                 :     :                    +- * HashAggregate (53)
            :           :                 :     :                       +- * SortMergeJoin LeftSemi (52)
            :           :                 :     :                          :- * Sort (40)
            :           :                 :     :                          :  +- Exchange (39)
            :           :                 :     :                          :     +- * HashAggregate (38)
            :           :                 :     :                          :        +- Exchange (37)
            :           :                 :     :                          :           +- * HashAggregate (36)
            :           :                 :     :                          :              +- * Project (35)
            :           :                 :     :                          :                 +- * BroadcastHashJoin Inner BuildRight (34)
            :           :                 :     :                          :                    :- * Project (12)
            :           :                 :     :                          :                    :  +- * BroadcastHashJoin Inner BuildRight (11)
            :           :                 :     :                          :                    :     :- * Filter (9)
            :           :                 :     :                          :                    :     :  +- * ColumnarToRow (8)
            :           :                 :     :                          :                    :     :     +- Scan parquet default.store_sales (7)
            :           :                 :     :                          :                    :     +- ReusedExchange (10)
            :           :                 :     :                          :                    +- BroadcastExchange (33)
            :           :                 :     :                          :                       +- * SortMergeJoin LeftSemi (32)
            :           :                 :     :                          :                          :- * Sort (17)
            :           :                 :     :                          :                          :  +- Exchange (16)
            :           :                 :     :                          :                          :     +- * Filter (15)
            :           :                 :     :                          :                          :        +- * ColumnarToRow (14)
            :           :                 :     :                          :                          :           +- Scan parquet default.item (13)
            :           :                 :     :                          :                          +- * Sort (31)
            :           :                 :     :                          :                             +- Exchange (30)
            :           :                 :     :                          :                                +- * Project (29)
            :           :                 :     :                          :                                   +- * BroadcastHashJoin Inner BuildRight (28)
            :           :                 :     :                          :                                      :- * Project (23)
            :           :                 :     :                          :                                      :  +- * BroadcastHashJoin Inner BuildRight (22)
            :           :                 :     :                          :                                      :     :- * Filter (20)
            :           :                 :     :                          :                                      :     :  +- * ColumnarToRow (19)
            :           :                 :     :                          :                                      :     :     +- Scan parquet default.catalog_sales (18)
            :           :                 :     :                          :                                      :     +- ReusedExchange (21)
            :           :                 :     :                          :                                      +- BroadcastExchange (27)
            :           :                 :     :                          :                                         +- * Filter (26)
            :           :                 :     :                          :                                            +- * ColumnarToRow (25)
            :           :                 :     :                          :                                               +- Scan parquet default.item (24)
            :           :                 :     :                          +- * Sort (51)
            :           :                 :     :                             +- Exchange (50)
            :           :                 :     :                                +- * Project (49)
            :           :                 :     :                                   +- * BroadcastHashJoin Inner BuildRight (48)
            :           :                 :     :                                      :- * Project (46)
            :           :                 :     :                                      :  +- * BroadcastHashJoin Inner BuildRight (45)
            :           :                 :     :                                      :     :- * Filter (43)
            :           :                 :     :                                      :     :  +- * ColumnarToRow (42)
            :           :                 :     :                                      :     :     +- Scan parquet default.web_sales (41)
            :           :                 :     :                                      :     +- ReusedExchange (44)
            :           :                 :     :                                      +- ReusedExchange (47)
            :           :                 :     +- ReusedExchange (61)
            :           :                 +- BroadcastExchange (69)
            :           :                    +- * BroadcastHashJoin LeftSemi BuildRight (68)
            :           :                       :- * Filter (66)
            :           :                       :  +- * ColumnarToRow (65)
            :           :                       :     +- Scan parquet default.item (64)
            :           :                       +- ReusedExchange (67)
            :           :- * Filter (90)
            :           :  +- * HashAggregate (89)
            :           :     +- Exchange (88)
            :           :        +- * HashAggregate (87)
            :           :           +- * Project (86)
            :           :              +- * BroadcastHashJoin Inner BuildRight (85)
            :           :                 :- * Project (83)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (82)
            :           :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (80)
            :           :                 :     :  :- * Filter (78)
            :           :                 :     :  :  +- * ColumnarToRow (77)
            :           :                 :     :  :     +- Scan parquet default.catalog_sales (76)
            :           :                 :     :  +- ReusedExchange (79)
            :           :                 :     +- ReusedExchange (81)
            :           :                 +- ReusedExchange (84)
            :           +- * Filter (105)
            :              +- * HashAggregate (104)
            :                 +- Exchange (103)
            :                    +- * HashAggregate (102)
            :                       +- * Project (101)
            :                          +- * BroadcastHashJoin Inner BuildRight (100)
            :                             :- * Project (98)
            :                             :  +- * BroadcastHashJoin Inner BuildRight (97)
            :                             :     :- * BroadcastHashJoin LeftSemi BuildRight (95)
            :                             :     :  :- * Filter (93)
            :                             :     :  :  +- * ColumnarToRow (92)
            :                             :     :  :     +- Scan parquet default.web_sales (91)
            :                             :     :  +- ReusedExchange (94)
            :                             :     +- ReusedExchange (96)
            :                             +- ReusedExchange (99)
            :- * HashAggregate (114)
            :  +- Exchange (113)
            :     +- * HashAggregate (112)
            :        +- * HashAggregate (111)
            :           +- ReusedExchange (110)
            :- * HashAggregate (119)
            :  +- Exchange (118)
            :     +- * HashAggregate (117)
            :        +- * HashAggregate (116)
            :           +- ReusedExchange (115)
            :- * HashAggregate (124)
            :  +- Exchange (123)
            :     +- * HashAggregate (122)
            :        +- * HashAggregate (121)
            :           +- ReusedExchange (120)
            +- * HashAggregate (129)
               +- Exchange (128)
                  +- * HashAggregate (127)
                     +- * HashAggregate (126)
                        +- ReusedExchange (125)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 39]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 39]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 18]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(6) Filter [codegen id : 18]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(7) Scan parquet default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 9]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]

(9) Filter [codegen id : 9]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(10) ReusedExchange [Reuses operator id: 168]
Output [1]: [d_date_sk#13]

(11) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#13]
Join condition: None

(12) Project [codegen id : 9]
Output [1]: [ss_item_sk#10]
Input [3]: [ss_item_sk#10, ss_sold_date_sk#11, d_date_sk#13]

(13) Scan parquet default.item
Output [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(14) ColumnarToRow [codegen id : 2]
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]

(15) Filter [codegen id : 2]
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Condition : (((isnotnull(i_item_sk#14) AND isnotnull(i_brand_id#15)) AND isnotnull(i_class_id#16)) AND isnotnull(i_category_id#17))

(16) Exchange
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Arguments: hashpartitioning(coalesce(i_brand_id#15, 0), isnull(i_brand_id#15), coalesce(i_class_id#16, 0), isnull(i_class_id#16), coalesce(i_category_id#17, 0), isnull(i_category_id#17), 5), ENSURE_REQUIREMENTS, [id=#18]

(17) Sort [codegen id : 3]
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Arguments: [coalesce(i_brand_id#15, 0) ASC NULLS FIRST, isnull(i_brand_id#15) ASC NULLS FIRST, coalesce(i_class_id#16, 0) ASC NULLS FIRST, isnull(i_class_id#16) ASC NULLS FIRST, coalesce(i_category_id#17, 0) ASC NULLS FIRST, isnull(i_category_id#17) ASC NULLS FIRST], false, 0

(18) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#19, cs_sold_date_sk#20]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#20), dynamicpruningexpression(cs_sold_date_sk#20 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(19) ColumnarToRow [codegen id : 6]
Input [2]: [cs_item_sk#19, cs_sold_date_sk#20]

(20) Filter [codegen id : 6]
Input [2]: [cs_item_sk#19, cs_sold_date_sk#20]
Condition : isnotnull(cs_item_sk#19)

(21) ReusedExchange [Reuses operator id: 168]
Output [1]: [d_date_sk#21]

(22) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#20]
Right keys [1]: [d_date_sk#21]
Join condition: None

(23) Project [codegen id : 6]
Output [1]: [cs_item_sk#19]
Input [3]: [cs_item_sk#19, cs_sold_date_sk#20, d_date_sk#21]

(24) Scan parquet default.item
Output [4]: [i_item_sk#22, i_brand_id#23, i_class_id#24, i_category_id#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(25) ColumnarToRow [codegen id : 5]
Input [4]: [i_item_sk#22, i_brand_id#23, i_class_id#24, i_category_id#25]

(26) Filter [codegen id : 5]
Input [4]: [i_item_sk#22, i_brand_id#23, i_class_id#24, i_category_id#25]
Condition : isnotnull(i_item_sk#22)

(27) BroadcastExchange
Input [4]: [i_item_sk#22, i_brand_id#23, i_class_id#24, i_category_id#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#26]

(28) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [i_item_sk#22]
Join condition: None

(29) Project [codegen id : 6]
Output [3]: [i_brand_id#23, i_class_id#24, i_category_id#25]
Input [5]: [cs_item_sk#19, i_item_sk#22, i_brand_id#23, i_class_id#24, i_category_id#25]

(30) Exchange
Input [3]: [i_brand_id#23, i_class_id#24, i_category_id#25]
Arguments: hashpartitioning(coalesce(i_brand_id#23, 0), isnull(i_brand_id#23), coalesce(i_class_id#24, 0), isnull(i_class_id#24), coalesce(i_category_id#25, 0), isnull(i_category_id#25), 5), ENSURE_REQUIREMENTS, [id=#27]

(31) Sort [codegen id : 7]
Input [3]: [i_brand_id#23, i_class_id#24, i_category_id#25]
Arguments: [coalesce(i_brand_id#23, 0) ASC NULLS FIRST, isnull(i_brand_id#23) ASC NULLS FIRST, coalesce(i_class_id#24, 0) ASC NULLS FIRST, isnull(i_class_id#24) ASC NULLS FIRST, coalesce(i_category_id#25, 0) ASC NULLS FIRST, isnull(i_category_id#25) ASC NULLS FIRST], false, 0

(32) SortMergeJoin [codegen id : 8]
Left keys [6]: [coalesce(i_brand_id#15, 0), isnull(i_brand_id#15), coalesce(i_class_id#16, 0), isnull(i_class_id#16), coalesce(i_category_id#17, 0), isnull(i_category_id#17)]
Right keys [6]: [coalesce(i_brand_id#23, 0), isnull(i_brand_id#23), coalesce(i_class_id#24, 0), isnull(i_class_id#24), coalesce(i_category_id#25, 0), isnull(i_category_id#25)]
Join condition: None

(33) BroadcastExchange
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28]

(34) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#10]
Right keys [1]: [i_item_sk#14]
Join condition: None

(35) Project [codegen id : 9]
Output [3]: [i_brand_id#15 AS brand_id#29, i_class_id#16 AS class_id#30, i_category_id#17 AS category_id#31]
Input [5]: [ss_item_sk#10, i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]

(36) HashAggregate [codegen id : 9]
Input [3]: [brand_id#29, class_id#30, category_id#31]
Keys [3]: [brand_id#29, class_id#30, category_id#31]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#29, class_id#30, category_id#31]

(37) Exchange
Input [3]: [brand_id#29, class_id#30, category_id#31]
Arguments: hashpartitioning(brand_id#29, class_id#30, category_id#31, 5), ENSURE_REQUIREMENTS, [id=#32]

(38) HashAggregate [codegen id : 10]
Input [3]: [brand_id#29, class_id#30, category_id#31]
Keys [3]: [brand_id#29, class_id#30, category_id#31]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#29, class_id#30, category_id#31]

(39) Exchange
Input [3]: [brand_id#29, class_id#30, category_id#31]
Arguments: hashpartitioning(coalesce(brand_id#29, 0), isnull(brand_id#29), coalesce(class_id#30, 0), isnull(class_id#30), coalesce(category_id#31, 0), isnull(category_id#31), 5), ENSURE_REQUIREMENTS, [id=#33]

(40) Sort [codegen id : 11]
Input [3]: [brand_id#29, class_id#30, category_id#31]
Arguments: [coalesce(brand_id#29, 0) ASC NULLS FIRST, isnull(brand_id#29) ASC NULLS FIRST, coalesce(class_id#30, 0) ASC NULLS FIRST, isnull(class_id#30) ASC NULLS FIRST, coalesce(category_id#31, 0) ASC NULLS FIRST, isnull(category_id#31) ASC NULLS FIRST], false, 0

(41) Scan parquet default.web_sales
Output [2]: [ws_item_sk#34, ws_sold_date_sk#35]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#35), dynamicpruningexpression(ws_sold_date_sk#35 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(42) ColumnarToRow [codegen id : 14]
Input [2]: [ws_item_sk#34, ws_sold_date_sk#35]

(43) Filter [codegen id : 14]
Input [2]: [ws_item_sk#34, ws_sold_date_sk#35]
Condition : isnotnull(ws_item_sk#34)

(44) ReusedExchange [Reuses operator id: 168]
Output [1]: [d_date_sk#36]

(45) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_sold_date_sk#35]
Right keys [1]: [d_date_sk#36]
Join condition: None

(46) Project [codegen id : 14]
Output [1]: [ws_item_sk#34]
Input [3]: [ws_item_sk#34, ws_sold_date_sk#35, d_date_sk#36]

(47) ReusedExchange [Reuses operator id: 27]
Output [4]: [i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]

(48) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_item_sk#34]
Right keys [1]: [i_item_sk#37]
Join condition: None

(49) Project [codegen id : 14]
Output [3]: [i_brand_id#38, i_class_id#39, i_category_id#40]
Input [5]: [ws_item_sk#34, i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]

(50) Exchange
Input [3]: [i_brand_id#38, i_class_id#39, i_category_id#40]
Arguments: hashpartitioning(coalesce(i_brand_id#38, 0), isnull(i_brand_id#38), coalesce(i_class_id#39, 0), isnull(i_class_id#39), coalesce(i_category_id#40, 0), isnull(i_category_id#40), 5), ENSURE_REQUIREMENTS, [id=#41]

(51) Sort [codegen id : 15]
Input [3]: [i_brand_id#38, i_class_id#39, i_category_id#40]
Arguments: [coalesce(i_brand_id#38, 0) ASC NULLS FIRST, isnull(i_brand_id#38) ASC NULLS FIRST, coalesce(i_class_id#39, 0) ASC NULLS FIRST, isnull(i_class_id#39) ASC NULLS FIRST, coalesce(i_category_id#40, 0) ASC NULLS FIRST, isnull(i_category_id#40) ASC NULLS FIRST], false, 0

(52) SortMergeJoin [codegen id : 16]
Left keys [6]: [coalesce(brand_id#29, 0), isnull(brand_id#29), coalesce(class_id#30, 0), isnull(class_id#30), coalesce(category_id#31, 0), isnull(category_id#31)]
Right keys [6]: [coalesce(i_brand_id#38, 0), isnull(i_brand_id#38), coalesce(i_class_id#39, 0), isnull(i_class_id#39), coalesce(i_category_id#40, 0), isnull(i_category_id#40)]
Join condition: None

(53) HashAggregate [codegen id : 16]
Input [3]: [brand_id#29, class_id#30, category_id#31]
Keys [3]: [brand_id#29, class_id#30, category_id#31]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#29, class_id#30, category_id#31]

(54) Exchange
Input [3]: [brand_id#29, class_id#30, category_id#31]
Arguments: hashpartitioning(brand_id#29, class_id#30, category_id#31, 5), ENSURE_REQUIREMENTS, [id=#42]

(55) HashAggregate [codegen id : 17]
Input [3]: [brand_id#29, class_id#30, category_id#31]
Keys [3]: [brand_id#29, class_id#30, category_id#31]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#29, class_id#30, category_id#31]

(56) BroadcastExchange
Input [3]: [brand_id#29, class_id#30, category_id#31]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#43]

(57) BroadcastHashJoin [codegen id : 18]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#29, class_id#30, category_id#31]
Join condition: None

(58) Project [codegen id : 18]
Output [1]: [i_item_sk#6 AS ss_item_sk#44]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(59) BroadcastExchange
Input [1]: [ss_item_sk#44]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#45]

(60) BroadcastHashJoin [codegen id : 39]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#44]
Join condition: None

(61) ReusedExchange [Reuses operator id: 163]
Output [1]: [d_date_sk#46]

(62) BroadcastHashJoin [codegen id : 39]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#46]
Join condition: None

(63) Project [codegen id : 39]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#46]

(64) Scan parquet default.item
Output [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(65) ColumnarToRow [codegen id : 38]
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]

(66) Filter [codegen id : 38]
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Condition : isnotnull(i_item_sk#47)

(67) ReusedExchange [Reuses operator id: 59]
Output [1]: [ss_item_sk#44]

(68) BroadcastHashJoin [codegen id : 38]
Left keys [1]: [i_item_sk#47]
Right keys [1]: [ss_item_sk#44]
Join condition: None

(69) BroadcastExchange
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#51]

(70) BroadcastHashJoin [codegen id : 39]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#47]
Join condition: None

(71) Project [codegen id : 39]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#48, i_class_id#49, i_category_id#50]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]

(72) HashAggregate [codegen id : 39]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#48, i_class_id#49, i_category_id#50]
Keys [3]: [i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#52, isEmpty#53, count#54]
Results [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#55, isEmpty#56, count#57]

(73) Exchange
Input [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#55, isEmpty#56, count#57]
Arguments: hashpartitioning(i_brand_id#48, i_class_id#49, i_category_id#50, 5), ENSURE_REQUIREMENTS, [id=#58]

(74) HashAggregate [codegen id : 40]
Input [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#55, isEmpty#56, count#57]
Keys [3]: [i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#59, count(1)#60]
Results [6]: [store AS channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#59 AS sales#62, count(1)#60 AS number_sales#63]

(75) Filter [codegen id : 40]
Input [6]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sales#62, number_sales#63]
Condition : (isnotnull(sales#62) AND (cast(sales#62 as decimal(32,6)) > cast(Subquery scalar-subquery#64, [id=#65] as decimal(32,6))))

(76) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#66, cs_quantity#67, cs_list_price#68, cs_sold_date_sk#69]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#69), dynamicpruningexpression(cs_sold_date_sk#69 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(77) ColumnarToRow [codegen id : 79]
Input [4]: [cs_item_sk#66, cs_quantity#67, cs_list_price#68, cs_sold_date_sk#69]

(78) Filter [codegen id : 79]
Input [4]: [cs_item_sk#66, cs_quantity#67, cs_list_price#68, cs_sold_date_sk#69]
Condition : isnotnull(cs_item_sk#66)

(79) ReusedExchange [Reuses operator id: 59]
Output [1]: [ss_item_sk#44]

(80) BroadcastHashJoin [codegen id : 79]
Left keys [1]: [cs_item_sk#66]
Right keys [1]: [ss_item_sk#44]
Join condition: None

(81) ReusedExchange [Reuses operator id: 163]
Output [1]: [d_date_sk#70]

(82) BroadcastHashJoin [codegen id : 79]
Left keys [1]: [cs_sold_date_sk#69]
Right keys [1]: [d_date_sk#70]
Join condition: None

(83) Project [codegen id : 79]
Output [3]: [cs_item_sk#66, cs_quantity#67, cs_list_price#68]
Input [5]: [cs_item_sk#66, cs_quantity#67, cs_list_price#68, cs_sold_date_sk#69, d_date_sk#70]

(84) ReusedExchange [Reuses operator id: 69]
Output [4]: [i_item_sk#71, i_brand_id#72, i_class_id#73, i_category_id#74]

(85) BroadcastHashJoin [codegen id : 79]
Left keys [1]: [cs_item_sk#66]
Right keys [1]: [i_item_sk#71]
Join condition: None

(86) Project [codegen id : 79]
Output [5]: [cs_quantity#67, cs_list_price#68, i_brand_id#72, i_class_id#73, i_category_id#74]
Input [7]: [cs_item_sk#66, cs_quantity#67, cs_list_price#68, i_item_sk#71, i_brand_id#72, i_class_id#73, i_category_id#74]

(87) HashAggregate [codegen id : 79]
Input [5]: [cs_quantity#67, cs_list_price#68, i_brand_id#72, i_class_id#73, i_category_id#74]
Keys [3]: [i_brand_id#72, i_class_id#73, i_category_id#74]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#68 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#75, isEmpty#76, count#77]
Results [6]: [i_brand_id#72, i_class_id#73, i_category_id#74, sum#78, isEmpty#79, count#80]

(88) Exchange
Input [6]: [i_brand_id#72, i_class_id#73, i_category_id#74, sum#78, isEmpty#79, count#80]
Arguments: hashpartitioning(i_brand_id#72, i_class_id#73, i_category_id#74, 5), ENSURE_REQUIREMENTS, [id=#81]

(89) HashAggregate [codegen id : 80]
Input [6]: [i_brand_id#72, i_class_id#73, i_category_id#74, sum#78, isEmpty#79, count#80]
Keys [3]: [i_brand_id#72, i_class_id#73, i_category_id#74]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#68 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#82, count(1)#83]
Results [6]: [catalog AS channel#84, i_brand_id#72, i_class_id#73, i_category_id#74, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#82 AS sales#85, count(1)#83 AS number_sales#86]

(90) Filter [codegen id : 80]
Input [6]: [channel#84, i_brand_id#72, i_class_id#73, i_category_id#74, sales#85, number_sales#86]
Condition : (isnotnull(sales#85) AND (cast(sales#85 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#64, [id=#65] as decimal(32,6))))

(91) Scan parquet default.web_sales
Output [4]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, ws_sold_date_sk#90]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#90), dynamicpruningexpression(ws_sold_date_sk#90 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(92) ColumnarToRow [codegen id : 119]
Input [4]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, ws_sold_date_sk#90]

(93) Filter [codegen id : 119]
Input [4]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, ws_sold_date_sk#90]
Condition : isnotnull(ws_item_sk#87)

(94) ReusedExchange [Reuses operator id: 59]
Output [1]: [ss_item_sk#44]

(95) BroadcastHashJoin [codegen id : 119]
Left keys [1]: [ws_item_sk#87]
Right keys [1]: [ss_item_sk#44]
Join condition: None

(96) ReusedExchange [Reuses operator id: 163]
Output [1]: [d_date_sk#91]

(97) BroadcastHashJoin [codegen id : 119]
Left keys [1]: [ws_sold_date_sk#90]
Right keys [1]: [d_date_sk#91]
Join condition: None

(98) Project [codegen id : 119]
Output [3]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89]
Input [5]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, ws_sold_date_sk#90, d_date_sk#91]

(99) ReusedExchange [Reuses operator id: 69]
Output [4]: [i_item_sk#92, i_brand_id#93, i_class_id#94, i_category_id#95]

(100) BroadcastHashJoin [codegen id : 119]
Left keys [1]: [ws_item_sk#87]
Right keys [1]: [i_item_sk#92]
Join condition: None

(101) Project [codegen id : 119]
Output [5]: [ws_quantity#88, ws_list_price#89, i_brand_id#93, i_class_id#94, i_category_id#95]
Input [7]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, i_item_sk#92, i_brand_id#93, i_class_id#94, i_category_id#95]

(102) HashAggregate [codegen id : 119]
Input [5]: [ws_quantity#88, ws_list_price#89, i_brand_id#93, i_class_id#94, i_category_id#95]
Keys [3]: [i_brand_id#93, i_class_id#94, i_category_id#95]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#88 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#89 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#96, isEmpty#97, count#98]
Results [6]: [i_brand_id#93, i_class_id#94, i_category_id#95, sum#99, isEmpty#100, count#101]

(103) Exchange
Input [6]: [i_brand_id#93, i_class_id#94, i_category_id#95, sum#99, isEmpty#100, count#101]
Arguments: hashpartitioning(i_brand_id#93, i_class_id#94, i_category_id#95, 5), ENSURE_REQUIREMENTS, [id=#102]

(104) HashAggregate [codegen id : 120]
Input [6]: [i_brand_id#93, i_class_id#94, i_category_id#95, sum#99, isEmpty#100, count#101]
Keys [3]: [i_brand_id#93, i_class_id#94, i_category_id#95]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#88 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#89 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#88 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#89 as decimal(12,2)))), DecimalType(18,2), true))#103, count(1)#104]
Results [6]: [web AS channel#105, i_brand_id#93, i_class_id#94, i_category_id#95, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#88 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#89 as decimal(12,2)))), DecimalType(18,2), true))#103 AS sales#106, count(1)#104 AS number_sales#107]

(105) Filter [codegen id : 120]
Input [6]: [channel#105, i_brand_id#93, i_class_id#94, i_category_id#95, sales#106, number_sales#107]
Condition : (isnotnull(sales#106) AND (cast(sales#106 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#64, [id=#65] as decimal(32,6))))

(106) Union

(107) HashAggregate [codegen id : 121]
Input [6]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sales#62, number_sales#63]
Keys [4]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [partial_sum(sales#62), partial_sum(number_sales#63)]
Aggregate Attributes [3]: [sum#108, isEmpty#109, sum#110]
Results [7]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum#111, isEmpty#112, sum#113]

(108) Exchange
Input [7]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum#111, isEmpty#112, sum#113]
Arguments: hashpartitioning(channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, 5), ENSURE_REQUIREMENTS, [id=#114]

(109) HashAggregate [codegen id : 122]
Input [7]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum#111, isEmpty#112, sum#113]
Keys [4]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [sum(sales#62), sum(number_sales#63)]
Aggregate Attributes [2]: [sum(sales#62)#115, sum(number_sales#63)#116]
Results [6]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum(sales#62)#115 AS sum_sales#117, sum(number_sales#63)#116 AS number_sales#118]

(110) ReusedExchange [Reuses operator id: 108]
Output [7]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum#111, isEmpty#112, sum#113]

(111) HashAggregate [codegen id : 244]
Input [7]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum#111, isEmpty#112, sum#113]
Keys [4]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [sum(sales#62), sum(number_sales#63)]
Aggregate Attributes [2]: [sum(sales#62)#115, sum(number_sales#63)#116]
Results [5]: [channel#61, i_brand_id#48, i_class_id#49, sum(sales#62)#115 AS sum_sales#117, sum(number_sales#63)#116 AS number_sales#118]

(112) HashAggregate [codegen id : 244]
Input [5]: [channel#61, i_brand_id#48, i_class_id#49, sum_sales#117, number_sales#118]
Keys [3]: [channel#61, i_brand_id#48, i_class_id#49]
Functions [2]: [partial_sum(sum_sales#117), partial_sum(number_sales#118)]
Aggregate Attributes [3]: [sum#119, isEmpty#120, sum#121]
Results [6]: [channel#61, i_brand_id#48, i_class_id#49, sum#122, isEmpty#123, sum#124]

(113) Exchange
Input [6]: [channel#61, i_brand_id#48, i_class_id#49, sum#122, isEmpty#123, sum#124]
Arguments: hashpartitioning(channel#61, i_brand_id#48, i_class_id#49, 5), ENSURE_REQUIREMENTS, [id=#125]

(114) HashAggregate [codegen id : 245]
Input [6]: [channel#61, i_brand_id#48, i_class_id#49, sum#122, isEmpty#123, sum#124]
Keys [3]: [channel#61, i_brand_id#48, i_class_id#49]
Functions [2]: [sum(sum_sales#117), sum(number_sales#118)]
Aggregate Attributes [2]: [sum(sum_sales#117)#126, sum(number_sales#118)#127]
Results [6]: [channel#61, i_brand_id#48, i_class_id#49, null AS i_category_id#128, sum(sum_sales#117)#126 AS sum(sum_sales)#129, sum(number_sales#118)#127 AS sum(number_sales)#130]

(115) ReusedExchange [Reuses operator id: 108]
Output [7]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum#111, isEmpty#112, sum#113]

(116) HashAggregate [codegen id : 367]
Input [7]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum#111, isEmpty#112, sum#113]
Keys [4]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [sum(sales#62), sum(number_sales#63)]
Aggregate Attributes [2]: [sum(sales#62)#115, sum(number_sales#63)#116]
Results [4]: [channel#61, i_brand_id#48, sum(sales#62)#115 AS sum_sales#117, sum(number_sales#63)#116 AS number_sales#118]

(117) HashAggregate [codegen id : 367]
Input [4]: [channel#61, i_brand_id#48, sum_sales#117, number_sales#118]
Keys [2]: [channel#61, i_brand_id#48]
Functions [2]: [partial_sum(sum_sales#117), partial_sum(number_sales#118)]
Aggregate Attributes [3]: [sum#131, isEmpty#132, sum#133]
Results [5]: [channel#61, i_brand_id#48, sum#134, isEmpty#135, sum#136]

(118) Exchange
Input [5]: [channel#61, i_brand_id#48, sum#134, isEmpty#135, sum#136]
Arguments: hashpartitioning(channel#61, i_brand_id#48, 5), ENSURE_REQUIREMENTS, [id=#137]

(119) HashAggregate [codegen id : 368]
Input [5]: [channel#61, i_brand_id#48, sum#134, isEmpty#135, sum#136]
Keys [2]: [channel#61, i_brand_id#48]
Functions [2]: [sum(sum_sales#117), sum(number_sales#118)]
Aggregate Attributes [2]: [sum(sum_sales#117)#138, sum(number_sales#118)#139]
Results [6]: [channel#61, i_brand_id#48, null AS i_class_id#140, null AS i_category_id#141, sum(sum_sales#117)#138 AS sum(sum_sales)#142, sum(number_sales#118)#139 AS sum(number_sales)#143]

(120) ReusedExchange [Reuses operator id: 108]
Output [7]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum#111, isEmpty#112, sum#113]

(121) HashAggregate [codegen id : 490]
Input [7]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum#111, isEmpty#112, sum#113]
Keys [4]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [sum(sales#62), sum(number_sales#63)]
Aggregate Attributes [2]: [sum(sales#62)#115, sum(number_sales#63)#116]
Results [3]: [channel#61, sum(sales#62)#115 AS sum_sales#117, sum(number_sales#63)#116 AS number_sales#118]

(122) HashAggregate [codegen id : 490]
Input [3]: [channel#61, sum_sales#117, number_sales#118]
Keys [1]: [channel#61]
Functions [2]: [partial_sum(sum_sales#117), partial_sum(number_sales#118)]
Aggregate Attributes [3]: [sum#144, isEmpty#145, sum#146]
Results [4]: [channel#61, sum#147, isEmpty#148, sum#149]

(123) Exchange
Input [4]: [channel#61, sum#147, isEmpty#148, sum#149]
Arguments: hashpartitioning(channel#61, 5), ENSURE_REQUIREMENTS, [id=#150]

(124) HashAggregate [codegen id : 491]
Input [4]: [channel#61, sum#147, isEmpty#148, sum#149]
Keys [1]: [channel#61]
Functions [2]: [sum(sum_sales#117), sum(number_sales#118)]
Aggregate Attributes [2]: [sum(sum_sales#117)#151, sum(number_sales#118)#152]
Results [6]: [channel#61, null AS i_brand_id#153, null AS i_class_id#154, null AS i_category_id#155, sum(sum_sales#117)#151 AS sum(sum_sales)#156, sum(number_sales#118)#152 AS sum(number_sales)#157]

(125) ReusedExchange [Reuses operator id: 108]
Output [7]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum#111, isEmpty#112, sum#113]

(126) HashAggregate [codegen id : 613]
Input [7]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum#111, isEmpty#112, sum#113]
Keys [4]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [sum(sales#62), sum(number_sales#63)]
Aggregate Attributes [2]: [sum(sales#62)#115, sum(number_sales#63)#116]
Results [2]: [sum(sales#62)#115 AS sum_sales#117, sum(number_sales#63)#116 AS number_sales#118]

(127) HashAggregate [codegen id : 613]
Input [2]: [sum_sales#117, number_sales#118]
Keys: []
Functions [2]: [partial_sum(sum_sales#117), partial_sum(number_sales#118)]
Aggregate Attributes [3]: [sum#158, isEmpty#159, sum#160]
Results [3]: [sum#161, isEmpty#162, sum#163]

(128) Exchange
Input [3]: [sum#161, isEmpty#162, sum#163]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#164]

(129) HashAggregate [codegen id : 614]
Input [3]: [sum#161, isEmpty#162, sum#163]
Keys: []
Functions [2]: [sum(sum_sales#117), sum(number_sales#118)]
Aggregate Attributes [2]: [sum(sum_sales#117)#165, sum(number_sales#118)#166]
Results [6]: [null AS channel#167, null AS i_brand_id#168, null AS i_class_id#169, null AS i_category_id#170, sum(sum_sales#117)#165 AS sum(sum_sales)#171, sum(number_sales#118)#166 AS sum(number_sales)#172]

(130) Union

(131) HashAggregate [codegen id : 615]
Input [6]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#117, number_sales#118]
Keys [6]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#117, number_sales#118]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#117, number_sales#118]

(132) Exchange
Input [6]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#117, number_sales#118]
Arguments: hashpartitioning(channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#117, number_sales#118, 5), ENSURE_REQUIREMENTS, [id=#173]

(133) HashAggregate [codegen id : 616]
Input [6]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#117, number_sales#118]
Keys [6]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#117, number_sales#118]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#117, number_sales#118]

(134) TakeOrderedAndProject
Input [6]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#117, number_sales#118]
Arguments: 100, [channel#61 ASC NULLS FIRST, i_brand_id#48 ASC NULLS FIRST, i_class_id#49 ASC NULLS FIRST, i_category_id#50 ASC NULLS FIRST], [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum_sales#117, number_sales#118]

===== Subqueries =====

Subquery:1 Hosting operator id = 75 Hosting Expression = Subquery scalar-subquery#64, [id=#65]
* HashAggregate (153)
+- Exchange (152)
   +- * HashAggregate (151)
      +- Union (150)
         :- * Project (139)
         :  +- * BroadcastHashJoin Inner BuildRight (138)
         :     :- * ColumnarToRow (136)
         :     :  +- Scan parquet default.store_sales (135)
         :     +- ReusedExchange (137)
         :- * Project (144)
         :  +- * BroadcastHashJoin Inner BuildRight (143)
         :     :- * ColumnarToRow (141)
         :     :  +- Scan parquet default.catalog_sales (140)
         :     +- ReusedExchange (142)
         +- * Project (149)
            +- * BroadcastHashJoin Inner BuildRight (148)
               :- * ColumnarToRow (146)
               :  +- Scan parquet default.web_sales (145)
               +- ReusedExchange (147)


(135) Scan parquet default.store_sales
Output [3]: [ss_quantity#174, ss_list_price#175, ss_sold_date_sk#176]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#176), dynamicpruningexpression(ss_sold_date_sk#176 IN dynamicpruning#12)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(136) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#174, ss_list_price#175, ss_sold_date_sk#176]

(137) ReusedExchange [Reuses operator id: 168]
Output [1]: [d_date_sk#177]

(138) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#176]
Right keys [1]: [d_date_sk#177]
Join condition: None

(139) Project [codegen id : 2]
Output [2]: [ss_quantity#174 AS quantity#178, ss_list_price#175 AS list_price#179]
Input [4]: [ss_quantity#174, ss_list_price#175, ss_sold_date_sk#176, d_date_sk#177]

(140) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#180, cs_list_price#181, cs_sold_date_sk#182]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#182), dynamicpruningexpression(cs_sold_date_sk#182 IN dynamicpruning#183)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(141) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#180, cs_list_price#181, cs_sold_date_sk#182]

(142) ReusedExchange [Reuses operator id: 158]
Output [1]: [d_date_sk#184]

(143) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#182]
Right keys [1]: [d_date_sk#184]
Join condition: None

(144) Project [codegen id : 4]
Output [2]: [cs_quantity#180 AS quantity#185, cs_list_price#181 AS list_price#186]
Input [4]: [cs_quantity#180, cs_list_price#181, cs_sold_date_sk#182, d_date_sk#184]

(145) Scan parquet default.web_sales
Output [3]: [ws_quantity#187, ws_list_price#188, ws_sold_date_sk#189]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#189), dynamicpruningexpression(ws_sold_date_sk#189 IN dynamicpruning#183)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(146) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#187, ws_list_price#188, ws_sold_date_sk#189]

(147) ReusedExchange [Reuses operator id: 158]
Output [1]: [d_date_sk#190]

(148) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#189]
Right keys [1]: [d_date_sk#190]
Join condition: None

(149) Project [codegen id : 6]
Output [2]: [ws_quantity#187 AS quantity#191, ws_list_price#188 AS list_price#192]
Input [4]: [ws_quantity#187, ws_list_price#188, ws_sold_date_sk#189, d_date_sk#190]

(150) Union

(151) HashAggregate [codegen id : 7]
Input [2]: [quantity#178, list_price#179]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#178 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#179 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#193, count#194]
Results [2]: [sum#195, count#196]

(152) Exchange
Input [2]: [sum#195, count#196]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#197]

(153) HashAggregate [codegen id : 8]
Input [2]: [sum#195, count#196]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#178 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#179 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#178 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#179 as decimal(12,2)))), DecimalType(18,2), true))#198]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#178 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#179 as decimal(12,2)))), DecimalType(18,2), true))#198 AS average_sales#199]

Subquery:2 Hosting operator id = 135 Hosting Expression = ss_sold_date_sk#176 IN dynamicpruning#12

Subquery:3 Hosting operator id = 140 Hosting Expression = cs_sold_date_sk#182 IN dynamicpruning#183
BroadcastExchange (158)
+- * Project (157)
   +- * Filter (156)
      +- * ColumnarToRow (155)
         +- Scan parquet default.date_dim (154)


(154) Scan parquet default.date_dim
Output [2]: [d_date_sk#184, d_year#200]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(155) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#184, d_year#200]

(156) Filter [codegen id : 1]
Input [2]: [d_date_sk#184, d_year#200]
Condition : (((isnotnull(d_year#200) AND (d_year#200 >= 1998)) AND (d_year#200 <= 2000)) AND isnotnull(d_date_sk#184))

(157) Project [codegen id : 1]
Output [1]: [d_date_sk#184]
Input [2]: [d_date_sk#184, d_year#200]

(158) BroadcastExchange
Input [1]: [d_date_sk#184]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#201]

Subquery:4 Hosting operator id = 145 Hosting Expression = ws_sold_date_sk#189 IN dynamicpruning#183

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (163)
+- * Project (162)
   +- * Filter (161)
      +- * ColumnarToRow (160)
         +- Scan parquet default.date_dim (159)


(159) Scan parquet default.date_dim
Output [3]: [d_date_sk#46, d_year#202, d_moy#203]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(160) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#46, d_year#202, d_moy#203]

(161) Filter [codegen id : 1]
Input [3]: [d_date_sk#46, d_year#202, d_moy#203]
Condition : ((((isnotnull(d_year#202) AND isnotnull(d_moy#203)) AND (d_year#202 = 2000)) AND (d_moy#203 = 11)) AND isnotnull(d_date_sk#46))

(162) Project [codegen id : 1]
Output [1]: [d_date_sk#46]
Input [3]: [d_date_sk#46, d_year#202, d_moy#203]

(163) BroadcastExchange
Input [1]: [d_date_sk#46]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#204]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (168)
+- * Project (167)
   +- * Filter (166)
      +- * ColumnarToRow (165)
         +- Scan parquet default.date_dim (164)


(164) Scan parquet default.date_dim
Output [2]: [d_date_sk#13, d_year#205]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(165) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#13, d_year#205]

(166) Filter [codegen id : 1]
Input [2]: [d_date_sk#13, d_year#205]
Condition : (((isnotnull(d_year#205) AND (d_year#205 >= 1999)) AND (d_year#205 <= 2001)) AND isnotnull(d_date_sk#13))

(167) Project [codegen id : 1]
Output [1]: [d_date_sk#13]
Input [2]: [d_date_sk#13, d_year#205]

(168) BroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#206]

Subquery:7 Hosting operator id = 18 Hosting Expression = cs_sold_date_sk#20 IN dynamicpruning#12

Subquery:8 Hosting operator id = 41 Hosting Expression = ws_sold_date_sk#35 IN dynamicpruning#12

Subquery:9 Hosting operator id = 90 Hosting Expression = ReusedSubquery Subquery scalar-subquery#64, [id=#65]

Subquery:10 Hosting operator id = 76 Hosting Expression = cs_sold_date_sk#69 IN dynamicpruning#5

Subquery:11 Hosting operator id = 105 Hosting Expression = ReusedSubquery Subquery scalar-subquery#64, [id=#65]

Subquery:12 Hosting operator id = 91 Hosting Expression = ws_sold_date_sk#90 IN dynamicpruning#5


