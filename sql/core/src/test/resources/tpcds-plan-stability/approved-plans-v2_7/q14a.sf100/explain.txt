== Physical Plan ==
TakeOrderedAndProject (149)
+- * HashAggregate (148)
   +- Exchange (147)
      +- * HashAggregate (146)
         +- Union (145)
            :- * HashAggregate (124)
            :  +- Exchange (123)
            :     +- * HashAggregate (122)
            :        +- Union (121)
            :           :- * Project (82)
            :           :  +- * Filter (81)
            :           :     +- * HashAggregate (80)
            :           :        +- Exchange (79)
            :           :           +- * HashAggregate (78)
            :           :              +- * Project (77)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (76)
            :           :                    :- * Project (66)
            :           :                    :  +- * BroadcastHashJoin Inner BuildRight (65)
            :           :                    :     :- * SortMergeJoin LeftSemi (63)
            :           :                    :     :  :- * Sort (5)
            :           :                    :     :  :  +- Exchange (4)
            :           :                    :     :  :     +- * Filter (3)
            :           :                    :     :  :        +- * ColumnarToRow (2)
            :           :                    :     :  :           +- Scan parquet default.store_sales (1)
            :           :                    :     :  +- * Sort (62)
            :           :                    :     :     +- Exchange (61)
            :           :                    :     :        +- * Project (60)
            :           :                    :     :           +- * BroadcastHashJoin Inner BuildRight (59)
            :           :                    :     :              :- * Filter (8)
            :           :                    :     :              :  +- * ColumnarToRow (7)
            :           :                    :     :              :     +- Scan parquet default.item (6)
            :           :                    :     :              +- BroadcastExchange (58)
            :           :                    :     :                 +- * HashAggregate (57)
            :           :                    :     :                    +- Exchange (56)
            :           :                    :     :                       +- * HashAggregate (55)
            :           :                    :     :                          +- * SortMergeJoin LeftSemi (54)
            :           :                    :     :                             :- * Sort (42)
            :           :                    :     :                             :  +- Exchange (41)
            :           :                    :     :                             :     +- * HashAggregate (40)
            :           :                    :     :                             :        +- Exchange (39)
            :           :                    :     :                             :           +- * HashAggregate (38)
            :           :                    :     :                             :              +- * Project (37)
            :           :                    :     :                             :                 +- * BroadcastHashJoin Inner BuildRight (36)
            :           :                    :     :                             :                    :- * Project (14)
            :           :                    :     :                             :                    :  +- * BroadcastHashJoin Inner BuildRight (13)
            :           :                    :     :                             :                    :     :- * Filter (11)
            :           :                    :     :                             :                    :     :  +- * ColumnarToRow (10)
            :           :                    :     :                             :                    :     :     +- Scan parquet default.store_sales (9)
            :           :                    :     :                             :                    :     +- ReusedExchange (12)
            :           :                    :     :                             :                    +- BroadcastExchange (35)
            :           :                    :     :                             :                       +- * SortMergeJoin LeftSemi (34)
            :           :                    :     :                             :                          :- * Sort (19)
            :           :                    :     :                             :                          :  +- Exchange (18)
            :           :                    :     :                             :                          :     +- * Filter (17)
            :           :                    :     :                             :                          :        +- * ColumnarToRow (16)
            :           :                    :     :                             :                          :           +- Scan parquet default.item (15)
            :           :                    :     :                             :                          +- * Sort (33)
            :           :                    :     :                             :                             +- Exchange (32)
            :           :                    :     :                             :                                +- * Project (31)
            :           :                    :     :                             :                                   +- * BroadcastHashJoin Inner BuildRight (30)
            :           :                    :     :                             :                                      :- * Project (25)
            :           :                    :     :                             :                                      :  +- * BroadcastHashJoin Inner BuildRight (24)
            :           :                    :     :                             :                                      :     :- * Filter (22)
            :           :                    :     :                             :                                      :     :  +- * ColumnarToRow (21)
            :           :                    :     :                             :                                      :     :     +- Scan parquet default.catalog_sales (20)
            :           :                    :     :                             :                                      :     +- ReusedExchange (23)
            :           :                    :     :                             :                                      +- BroadcastExchange (29)
            :           :                    :     :                             :                                         +- * Filter (28)
            :           :                    :     :                             :                                            +- * ColumnarToRow (27)
            :           :                    :     :                             :                                               +- Scan parquet default.item (26)
            :           :                    :     :                             +- * Sort (53)
            :           :                    :     :                                +- Exchange (52)
            :           :                    :     :                                   +- * Project (51)
            :           :                    :     :                                      +- * BroadcastHashJoin Inner BuildRight (50)
            :           :                    :     :                                         :- * Project (48)
            :           :                    :     :                                         :  +- * BroadcastHashJoin Inner BuildRight (47)
            :           :                    :     :                                         :     :- * Filter (45)
            :           :                    :     :                                         :     :  +- * ColumnarToRow (44)
            :           :                    :     :                                         :     :     +- Scan parquet default.web_sales (43)
            :           :                    :     :                                         :     +- ReusedExchange (46)
            :           :                    :     :                                         +- ReusedExchange (49)
            :           :                    :     +- ReusedExchange (64)
            :           :                    +- BroadcastExchange (75)
            :           :                       +- * SortMergeJoin LeftSemi (74)
            :           :                          :- * Sort (71)
            :           :                          :  +- Exchange (70)
            :           :                          :     +- * Filter (69)
            :           :                          :        +- * ColumnarToRow (68)
            :           :                          :           +- Scan parquet default.item (67)
            :           :                          +- * Sort (73)
            :           :                             +- ReusedExchange (72)
            :           :- * Project (101)
            :           :  +- * Filter (100)
            :           :     +- * HashAggregate (99)
            :           :        +- Exchange (98)
            :           :           +- * HashAggregate (97)
            :           :              +- * Project (96)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (95)
            :           :                    :- * Project (93)
            :           :                    :  +- * BroadcastHashJoin Inner BuildRight (92)
            :           :                    :     :- * SortMergeJoin LeftSemi (90)
            :           :                    :     :  :- * Sort (87)
            :           :                    :     :  :  +- Exchange (86)
            :           :                    :     :  :     +- * Filter (85)
            :           :                    :     :  :        +- * ColumnarToRow (84)
            :           :                    :     :  :           +- Scan parquet default.catalog_sales (83)
            :           :                    :     :  +- * Sort (89)
            :           :                    :     :     +- ReusedExchange (88)
            :           :                    :     +- ReusedExchange (91)
            :           :                    +- ReusedExchange (94)
            :           +- * Project (120)
            :              +- * Filter (119)
            :                 +- * HashAggregate (118)
            :                    +- Exchange (117)
            :                       +- * HashAggregate (116)
            :                          +- * Project (115)
            :                             +- * BroadcastHashJoin Inner BuildRight (114)
            :                                :- * Project (112)
            :                                :  +- * BroadcastHashJoin Inner BuildRight (111)
            :                                :     :- * SortMergeJoin LeftSemi (109)
            :                                :     :  :- * Sort (106)
            :                                :     :  :  +- Exchange (105)
            :                                :     :  :     +- * Filter (104)
            :                                :     :  :        +- * ColumnarToRow (103)
            :                                :     :  :           +- Scan parquet default.web_sales (102)
            :                                :     :  +- * Sort (108)
            :                                :     :     +- ReusedExchange (107)
            :                                :     +- ReusedExchange (110)
            :                                +- ReusedExchange (113)
            :- * HashAggregate (129)
            :  +- Exchange (128)
            :     +- * HashAggregate (127)
            :        +- * HashAggregate (126)
            :           +- ReusedExchange (125)
            :- * HashAggregate (134)
            :  +- Exchange (133)
            :     +- * HashAggregate (132)
            :        +- * HashAggregate (131)
            :           +- ReusedExchange (130)
            :- * HashAggregate (139)
            :  +- Exchange (138)
            :     +- * HashAggregate (137)
            :        +- * HashAggregate (136)
            :           +- ReusedExchange (135)
            +- * HashAggregate (144)
               +- Exchange (143)
                  +- * HashAggregate (142)
                     +- * HashAggregate (141)
                        +- ReusedExchange (140)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 20]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(8) Filter [codegen id : 20]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(9) Scan parquet default.store_sales
Output [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(10) ColumnarToRow [codegen id : 11]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]

(11) Filter [codegen id : 11]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Condition : isnotnull(ss_item_sk#11)

(12) ReusedExchange [Reuses operator id: 183]
Output [1]: [d_date_sk#14]

(13) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_sold_date_sk#12]
Right keys [1]: [d_date_sk#14]
Join condition: None

(14) Project [codegen id : 11]
Output [1]: [ss_item_sk#11]
Input [3]: [ss_item_sk#11, ss_sold_date_sk#12, d_date_sk#14]

(15) Scan parquet default.item
Output [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(16) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(17) Filter [codegen id : 4]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Condition : (((isnotnull(i_item_sk#15) AND isnotnull(i_brand_id#16)) AND isnotnull(i_class_id#17)) AND isnotnull(i_category_id#18))

(18) Exchange
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: hashpartitioning(coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18), 5), ENSURE_REQUIREMENTS, [id=#19]

(19) Sort [codegen id : 5]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: [coalesce(i_brand_id#16, 0) ASC NULLS FIRST, isnull(i_brand_id#16) ASC NULLS FIRST, coalesce(i_class_id#17, 0) ASC NULLS FIRST, isnull(i_class_id#17) ASC NULLS FIRST, coalesce(i_category_id#18, 0) ASC NULLS FIRST, isnull(i_category_id#18) ASC NULLS FIRST], false, 0

(20) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#20, cs_sold_date_sk#21]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#21), dynamicpruningexpression(cs_sold_date_sk#21 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(21) ColumnarToRow [codegen id : 8]
Input [2]: [cs_item_sk#20, cs_sold_date_sk#21]

(22) Filter [codegen id : 8]
Input [2]: [cs_item_sk#20, cs_sold_date_sk#21]
Condition : isnotnull(cs_item_sk#20)

(23) ReusedExchange [Reuses operator id: 183]
Output [1]: [d_date_sk#22]

(24) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#21]
Right keys [1]: [d_date_sk#22]
Join condition: None

(25) Project [codegen id : 8]
Output [1]: [cs_item_sk#20]
Input [3]: [cs_item_sk#20, cs_sold_date_sk#21, d_date_sk#22]

(26) Scan parquet default.item
Output [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(27) ColumnarToRow [codegen id : 7]
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]

(28) Filter [codegen id : 7]
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Condition : isnotnull(i_item_sk#23)

(29) BroadcastExchange
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(30) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_item_sk#20]
Right keys [1]: [i_item_sk#23]
Join condition: None

(31) Project [codegen id : 8]
Output [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Input [5]: [cs_item_sk#20, i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]

(32) Exchange
Input [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: hashpartitioning(coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26), 5), ENSURE_REQUIREMENTS, [id=#28]

(33) Sort [codegen id : 9]
Input [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: [coalesce(i_brand_id#24, 0) ASC NULLS FIRST, isnull(i_brand_id#24) ASC NULLS FIRST, coalesce(i_class_id#25, 0) ASC NULLS FIRST, isnull(i_class_id#25) ASC NULLS FIRST, coalesce(i_category_id#26, 0) ASC NULLS FIRST, isnull(i_category_id#26) ASC NULLS FIRST], false, 0

(34) SortMergeJoin [codegen id : 10]
Left keys [6]: [coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18)]
Right keys [6]: [coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26)]
Join condition: None

(35) BroadcastExchange
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(36) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#11]
Right keys [1]: [i_item_sk#15]
Join condition: None

(37) Project [codegen id : 11]
Output [3]: [i_brand_id#16 AS brand_id#30, i_class_id#17 AS class_id#31, i_category_id#18 AS category_id#32]
Input [5]: [ss_item_sk#11, i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(38) HashAggregate [codegen id : 11]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(39) Exchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: hashpartitioning(brand_id#30, class_id#31, category_id#32, 5), ENSURE_REQUIREMENTS, [id=#33]

(40) HashAggregate [codegen id : 12]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(41) Exchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: hashpartitioning(coalesce(brand_id#30, 0), isnull(brand_id#30), coalesce(class_id#31, 0), isnull(class_id#31), coalesce(category_id#32, 0), isnull(category_id#32), 5), ENSURE_REQUIREMENTS, [id=#34]

(42) Sort [codegen id : 13]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: [coalesce(brand_id#30, 0) ASC NULLS FIRST, isnull(brand_id#30) ASC NULLS FIRST, coalesce(class_id#31, 0) ASC NULLS FIRST, isnull(class_id#31) ASC NULLS FIRST, coalesce(category_id#32, 0) ASC NULLS FIRST, isnull(category_id#32) ASC NULLS FIRST], false, 0

(43) Scan parquet default.web_sales
Output [2]: [ws_item_sk#35, ws_sold_date_sk#36]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#36), dynamicpruningexpression(ws_sold_date_sk#36 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(44) ColumnarToRow [codegen id : 16]
Input [2]: [ws_item_sk#35, ws_sold_date_sk#36]

(45) Filter [codegen id : 16]
Input [2]: [ws_item_sk#35, ws_sold_date_sk#36]
Condition : isnotnull(ws_item_sk#35)

(46) ReusedExchange [Reuses operator id: 183]
Output [1]: [d_date_sk#37]

(47) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_sold_date_sk#36]
Right keys [1]: [d_date_sk#37]
Join condition: None

(48) Project [codegen id : 16]
Output [1]: [ws_item_sk#35]
Input [3]: [ws_item_sk#35, ws_sold_date_sk#36, d_date_sk#37]

(49) ReusedExchange [Reuses operator id: 29]
Output [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(50) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_item_sk#35]
Right keys [1]: [i_item_sk#38]
Join condition: None

(51) Project [codegen id : 16]
Output [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Input [5]: [ws_item_sk#35, i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(52) Exchange
Input [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Arguments: hashpartitioning(coalesce(i_brand_id#39, 0), isnull(i_brand_id#39), coalesce(i_class_id#40, 0), isnull(i_class_id#40), coalesce(i_category_id#41, 0), isnull(i_category_id#41), 5), ENSURE_REQUIREMENTS, [id=#42]

(53) Sort [codegen id : 17]
Input [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Arguments: [coalesce(i_brand_id#39, 0) ASC NULLS FIRST, isnull(i_brand_id#39) ASC NULLS FIRST, coalesce(i_class_id#40, 0) ASC NULLS FIRST, isnull(i_class_id#40) ASC NULLS FIRST, coalesce(i_category_id#41, 0) ASC NULLS FIRST, isnull(i_category_id#41) ASC NULLS FIRST], false, 0

(54) SortMergeJoin [codegen id : 18]
Left keys [6]: [coalesce(brand_id#30, 0), isnull(brand_id#30), coalesce(class_id#31, 0), isnull(class_id#31), coalesce(category_id#32, 0), isnull(category_id#32)]
Right keys [6]: [coalesce(i_brand_id#39, 0), isnull(i_brand_id#39), coalesce(i_class_id#40, 0), isnull(i_class_id#40), coalesce(i_category_id#41, 0), isnull(i_category_id#41)]
Join condition: None

(55) HashAggregate [codegen id : 18]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(56) Exchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: hashpartitioning(brand_id#30, class_id#31, category_id#32, 5), ENSURE_REQUIREMENTS, [id=#43]

(57) HashAggregate [codegen id : 19]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(58) BroadcastExchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#44]

(59) BroadcastHashJoin [codegen id : 20]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#30, class_id#31, category_id#32]
Join condition: None

(60) Project [codegen id : 20]
Output [1]: [i_item_sk#7 AS ss_item_sk#45]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#30, class_id#31, category_id#32]

(61) Exchange
Input [1]: [ss_item_sk#45]
Arguments: hashpartitioning(ss_item_sk#45, 5), ENSURE_REQUIREMENTS, [id=#46]

(62) Sort [codegen id : 21]
Input [1]: [ss_item_sk#45]
Arguments: [ss_item_sk#45 ASC NULLS FIRST], false, 0

(63) SortMergeJoin [codegen id : 45]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#45]
Join condition: None

(64) ReusedExchange [Reuses operator id: 178]
Output [1]: [d_date_sk#47]

(65) BroadcastHashJoin [codegen id : 45]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#47]
Join condition: None

(66) Project [codegen id : 45]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#47]

(67) Scan parquet default.item
Output [4]: [i_item_sk#48, i_brand_id#49, i_class_id#50, i_category_id#51]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(68) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#48, i_brand_id#49, i_class_id#50, i_category_id#51]

(69) Filter [codegen id : 23]
Input [4]: [i_item_sk#48, i_brand_id#49, i_class_id#50, i_category_id#51]
Condition : isnotnull(i_item_sk#48)

(70) Exchange
Input [4]: [i_item_sk#48, i_brand_id#49, i_class_id#50, i_category_id#51]
Arguments: hashpartitioning(i_item_sk#48, 5), ENSURE_REQUIREMENTS, [id=#52]

(71) Sort [codegen id : 24]
Input [4]: [i_item_sk#48, i_brand_id#49, i_class_id#50, i_category_id#51]
Arguments: [i_item_sk#48 ASC NULLS FIRST], false, 0

(72) ReusedExchange [Reuses operator id: 61]
Output [1]: [ss_item_sk#45]

(73) Sort [codegen id : 43]
Input [1]: [ss_item_sk#45]
Arguments: [ss_item_sk#45 ASC NULLS FIRST], false, 0

(74) SortMergeJoin [codegen id : 44]
Left keys [1]: [i_item_sk#48]
Right keys [1]: [ss_item_sk#45]
Join condition: None

(75) BroadcastExchange
Input [4]: [i_item_sk#48, i_brand_id#49, i_class_id#50, i_category_id#51]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#53]

(76) BroadcastHashJoin [codegen id : 45]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#48]
Join condition: None

(77) Project [codegen id : 45]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#49, i_class_id#50, i_category_id#51]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#48, i_brand_id#49, i_class_id#50, i_category_id#51]

(78) HashAggregate [codegen id : 45]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#49, i_class_id#50, i_category_id#51]
Keys [3]: [i_brand_id#49, i_class_id#50, i_category_id#51]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#54, isEmpty#55, count#56]
Results [6]: [i_brand_id#49, i_class_id#50, i_category_id#51, sum#57, isEmpty#58, count#59]

(79) Exchange
Input [6]: [i_brand_id#49, i_class_id#50, i_category_id#51, sum#57, isEmpty#58, count#59]
Arguments: hashpartitioning(i_brand_id#49, i_class_id#50, i_category_id#51, 5), ENSURE_REQUIREMENTS, [id=#60]

(80) HashAggregate [codegen id : 46]
Input [6]: [i_brand_id#49, i_class_id#50, i_category_id#51, sum#57, isEmpty#58, count#59]
Keys [3]: [i_brand_id#49, i_class_id#50, i_category_id#51]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#61, count(1)#62]
Results [6]: [i_brand_id#49, i_class_id#50, i_category_id#51, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#61 AS sales#63, count(1)#62 AS number_sales#64, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#61 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#65]

(81) Filter [codegen id : 46]
Input [6]: [i_brand_id#49, i_class_id#50, i_category_id#51, sales#63, number_sales#64, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#65]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#65) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#65 as decimal(32,6)) > cast(Subquery scalar-subquery#66, [id=#67] as decimal(32,6))))

(82) Project [codegen id : 46]
Output [6]: [store AS channel#68, i_brand_id#49, i_class_id#50, i_category_id#51, sales#63, number_sales#64]
Input [6]: [i_brand_id#49, i_class_id#50, i_category_id#51, sales#63, number_sales#64, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#65]

(83) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#69, cs_quantity#70, cs_list_price#71, cs_sold_date_sk#72]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#72), dynamicpruningexpression(cs_sold_date_sk#72 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(84) ColumnarToRow [codegen id : 47]
Input [4]: [cs_item_sk#69, cs_quantity#70, cs_list_price#71, cs_sold_date_sk#72]

(85) Filter [codegen id : 47]
Input [4]: [cs_item_sk#69, cs_quantity#70, cs_list_price#71, cs_sold_date_sk#72]
Condition : isnotnull(cs_item_sk#69)

(86) Exchange
Input [4]: [cs_item_sk#69, cs_quantity#70, cs_list_price#71, cs_sold_date_sk#72]
Arguments: hashpartitioning(cs_item_sk#69, 5), ENSURE_REQUIREMENTS, [id=#73]

(87) Sort [codegen id : 48]
Input [4]: [cs_item_sk#69, cs_quantity#70, cs_list_price#71, cs_sold_date_sk#72]
Arguments: [cs_item_sk#69 ASC NULLS FIRST], false, 0

(88) ReusedExchange [Reuses operator id: 61]
Output [1]: [ss_item_sk#45]

(89) Sort [codegen id : 67]
Input [1]: [ss_item_sk#45]
Arguments: [ss_item_sk#45 ASC NULLS FIRST], false, 0

(90) SortMergeJoin [codegen id : 91]
Left keys [1]: [cs_item_sk#69]
Right keys [1]: [ss_item_sk#45]
Join condition: None

(91) ReusedExchange [Reuses operator id: 178]
Output [1]: [d_date_sk#74]

(92) BroadcastHashJoin [codegen id : 91]
Left keys [1]: [cs_sold_date_sk#72]
Right keys [1]: [d_date_sk#74]
Join condition: None

(93) Project [codegen id : 91]
Output [3]: [cs_item_sk#69, cs_quantity#70, cs_list_price#71]
Input [5]: [cs_item_sk#69, cs_quantity#70, cs_list_price#71, cs_sold_date_sk#72, d_date_sk#74]

(94) ReusedExchange [Reuses operator id: 75]
Output [4]: [i_item_sk#75, i_brand_id#76, i_class_id#77, i_category_id#78]

(95) BroadcastHashJoin [codegen id : 91]
Left keys [1]: [cs_item_sk#69]
Right keys [1]: [i_item_sk#75]
Join condition: None

(96) Project [codegen id : 91]
Output [5]: [cs_quantity#70, cs_list_price#71, i_brand_id#76, i_class_id#77, i_category_id#78]
Input [7]: [cs_item_sk#69, cs_quantity#70, cs_list_price#71, i_item_sk#75, i_brand_id#76, i_class_id#77, i_category_id#78]

(97) HashAggregate [codegen id : 91]
Input [5]: [cs_quantity#70, cs_list_price#71, i_brand_id#76, i_class_id#77, i_category_id#78]
Keys [3]: [i_brand_id#76, i_class_id#77, i_category_id#78]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#71 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#79, isEmpty#80, count#81]
Results [6]: [i_brand_id#76, i_class_id#77, i_category_id#78, sum#82, isEmpty#83, count#84]

(98) Exchange
Input [6]: [i_brand_id#76, i_class_id#77, i_category_id#78, sum#82, isEmpty#83, count#84]
Arguments: hashpartitioning(i_brand_id#76, i_class_id#77, i_category_id#78, 5), ENSURE_REQUIREMENTS, [id=#85]

(99) HashAggregate [codegen id : 92]
Input [6]: [i_brand_id#76, i_class_id#77, i_category_id#78, sum#82, isEmpty#83, count#84]
Keys [3]: [i_brand_id#76, i_class_id#77, i_category_id#78]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#71 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#86, count(1)#87]
Results [6]: [i_brand_id#76, i_class_id#77, i_category_id#78, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#86 AS sales#88, count(1)#87 AS number_sales#89, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#86 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#90]

(100) Filter [codegen id : 92]
Input [6]: [i_brand_id#76, i_class_id#77, i_category_id#78, sales#88, number_sales#89, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#90]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#90) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#90 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#66, [id=#67] as decimal(32,6))))

(101) Project [codegen id : 92]
Output [6]: [catalog AS channel#91, i_brand_id#76, i_class_id#77, i_category_id#78, sales#88, number_sales#89]
Input [6]: [i_brand_id#76, i_class_id#77, i_category_id#78, sales#88, number_sales#89, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#90]

(102) Scan parquet default.web_sales
Output [4]: [ws_item_sk#92, ws_quantity#93, ws_list_price#94, ws_sold_date_sk#95]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#95), dynamicpruningexpression(ws_sold_date_sk#95 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(103) ColumnarToRow [codegen id : 93]
Input [4]: [ws_item_sk#92, ws_quantity#93, ws_list_price#94, ws_sold_date_sk#95]

(104) Filter [codegen id : 93]
Input [4]: [ws_item_sk#92, ws_quantity#93, ws_list_price#94, ws_sold_date_sk#95]
Condition : isnotnull(ws_item_sk#92)

(105) Exchange
Input [4]: [ws_item_sk#92, ws_quantity#93, ws_list_price#94, ws_sold_date_sk#95]
Arguments: hashpartitioning(ws_item_sk#92, 5), ENSURE_REQUIREMENTS, [id=#96]

(106) Sort [codegen id : 94]
Input [4]: [ws_item_sk#92, ws_quantity#93, ws_list_price#94, ws_sold_date_sk#95]
Arguments: [ws_item_sk#92 ASC NULLS FIRST], false, 0

(107) ReusedExchange [Reuses operator id: 61]
Output [1]: [ss_item_sk#45]

(108) Sort [codegen id : 113]
Input [1]: [ss_item_sk#45]
Arguments: [ss_item_sk#45 ASC NULLS FIRST], false, 0

(109) SortMergeJoin [codegen id : 137]
Left keys [1]: [ws_item_sk#92]
Right keys [1]: [ss_item_sk#45]
Join condition: None

(110) ReusedExchange [Reuses operator id: 178]
Output [1]: [d_date_sk#97]

(111) BroadcastHashJoin [codegen id : 137]
Left keys [1]: [ws_sold_date_sk#95]
Right keys [1]: [d_date_sk#97]
Join condition: None

(112) Project [codegen id : 137]
Output [3]: [ws_item_sk#92, ws_quantity#93, ws_list_price#94]
Input [5]: [ws_item_sk#92, ws_quantity#93, ws_list_price#94, ws_sold_date_sk#95, d_date_sk#97]

(113) ReusedExchange [Reuses operator id: 75]
Output [4]: [i_item_sk#98, i_brand_id#99, i_class_id#100, i_category_id#101]

(114) BroadcastHashJoin [codegen id : 137]
Left keys [1]: [ws_item_sk#92]
Right keys [1]: [i_item_sk#98]
Join condition: None

(115) Project [codegen id : 137]
Output [5]: [ws_quantity#93, ws_list_price#94, i_brand_id#99, i_class_id#100, i_category_id#101]
Input [7]: [ws_item_sk#92, ws_quantity#93, ws_list_price#94, i_item_sk#98, i_brand_id#99, i_class_id#100, i_category_id#101]

(116) HashAggregate [codegen id : 137]
Input [5]: [ws_quantity#93, ws_list_price#94, i_brand_id#99, i_class_id#100, i_category_id#101]
Keys [3]: [i_brand_id#99, i_class_id#100, i_category_id#101]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#93 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#94 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#102, isEmpty#103, count#104]
Results [6]: [i_brand_id#99, i_class_id#100, i_category_id#101, sum#105, isEmpty#106, count#107]

(117) Exchange
Input [6]: [i_brand_id#99, i_class_id#100, i_category_id#101, sum#105, isEmpty#106, count#107]
Arguments: hashpartitioning(i_brand_id#99, i_class_id#100, i_category_id#101, 5), ENSURE_REQUIREMENTS, [id=#108]

(118) HashAggregate [codegen id : 138]
Input [6]: [i_brand_id#99, i_class_id#100, i_category_id#101, sum#105, isEmpty#106, count#107]
Keys [3]: [i_brand_id#99, i_class_id#100, i_category_id#101]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#93 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#94 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#93 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#94 as decimal(12,2)))), DecimalType(18,2), true))#109, count(1)#110]
Results [6]: [i_brand_id#99, i_class_id#100, i_category_id#101, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#93 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#94 as decimal(12,2)))), DecimalType(18,2), true))#109 AS sales#111, count(1)#110 AS number_sales#112, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#93 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#94 as decimal(12,2)))), DecimalType(18,2), true))#109 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#93 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#94 as decimal(12,2)))), DecimalType(18,2), true))#113]

(119) Filter [codegen id : 138]
Input [6]: [i_brand_id#99, i_class_id#100, i_category_id#101, sales#111, number_sales#112, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#93 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#94 as decimal(12,2)))), DecimalType(18,2), true))#113]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#93 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#94 as decimal(12,2)))), DecimalType(18,2), true))#113) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#93 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#94 as decimal(12,2)))), DecimalType(18,2), true))#113 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#66, [id=#67] as decimal(32,6))))

(120) Project [codegen id : 138]
Output [6]: [web AS channel#114, i_brand_id#99, i_class_id#100, i_category_id#101, sales#111, number_sales#112]
Input [6]: [i_brand_id#99, i_class_id#100, i_category_id#101, sales#111, number_sales#112, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#93 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#94 as decimal(12,2)))), DecimalType(18,2), true))#113]

(121) Union

(122) HashAggregate [codegen id : 139]
Input [6]: [channel#68, i_brand_id#49, i_class_id#50, i_category_id#51, sales#63, number_sales#64]
Keys [4]: [channel#68, i_brand_id#49, i_class_id#50, i_category_id#51]
Functions [2]: [partial_sum(sales#63), partial_sum(number_sales#64)]
Aggregate Attributes [3]: [sum#115, isEmpty#116, sum#117]
Results [7]: [channel#68, i_brand_id#49, i_class_id#50, i_category_id#51, sum#118, isEmpty#119, sum#120]

(123) Exchange
Input [7]: [channel#68, i_brand_id#49, i_class_id#50, i_category_id#51, sum#118, isEmpty#119, sum#120]
Arguments: hashpartitioning(channel#68, i_brand_id#49, i_class_id#50, i_category_id#51, 5), ENSURE_REQUIREMENTS, [id=#121]

(124) HashAggregate [codegen id : 140]
Input [7]: [channel#68, i_brand_id#49, i_class_id#50, i_category_id#51, sum#118, isEmpty#119, sum#120]
Keys [4]: [channel#68, i_brand_id#49, i_class_id#50, i_category_id#51]
Functions [2]: [sum(sales#63), sum(number_sales#64)]
Aggregate Attributes [2]: [sum(sales#63)#122, sum(number_sales#64)#123]
Results [6]: [channel#68, i_brand_id#49, i_class_id#50, i_category_id#51, sum(sales#63)#122 AS sum_sales#124, sum(number_sales#64)#123 AS number_sales#125]

(125) ReusedExchange [Reuses operator id: 123]
Output [7]: [channel#68, i_brand_id#126, i_class_id#127, i_category_id#128, sum#129, isEmpty#130, sum#131]

(126) HashAggregate [codegen id : 280]
Input [7]: [channel#68, i_brand_id#126, i_class_id#127, i_category_id#128, sum#129, isEmpty#130, sum#131]
Keys [4]: [channel#68, i_brand_id#126, i_class_id#127, i_category_id#128]
Functions [2]: [sum(sales#63), sum(number_sales#64)]
Aggregate Attributes [2]: [sum(sales#63)#132, sum(number_sales#64)#133]
Results [5]: [channel#68, i_brand_id#126, i_class_id#127, sum(sales#63)#132 AS sum_sales#124, sum(number_sales#64)#133 AS number_sales#125]

(127) HashAggregate [codegen id : 280]
Input [5]: [channel#68, i_brand_id#126, i_class_id#127, sum_sales#124, number_sales#125]
Keys [3]: [channel#68, i_brand_id#126, i_class_id#127]
Functions [2]: [partial_sum(sum_sales#124), partial_sum(number_sales#125)]
Aggregate Attributes [3]: [sum#134, isEmpty#135, sum#136]
Results [6]: [channel#68, i_brand_id#126, i_class_id#127, sum#137, isEmpty#138, sum#139]

(128) Exchange
Input [6]: [channel#68, i_brand_id#126, i_class_id#127, sum#137, isEmpty#138, sum#139]
Arguments: hashpartitioning(channel#68, i_brand_id#126, i_class_id#127, 5), ENSURE_REQUIREMENTS, [id=#140]

(129) HashAggregate [codegen id : 281]
Input [6]: [channel#68, i_brand_id#126, i_class_id#127, sum#137, isEmpty#138, sum#139]
Keys [3]: [channel#68, i_brand_id#126, i_class_id#127]
Functions [2]: [sum(sum_sales#124), sum(number_sales#125)]
Aggregate Attributes [2]: [sum(sum_sales#124)#141, sum(number_sales#125)#142]
Results [6]: [channel#68, i_brand_id#126, i_class_id#127, null AS i_category_id#143, sum(sum_sales#124)#141 AS sum(sum_sales)#144, sum(number_sales#125)#142 AS sum(number_sales)#145]

(130) ReusedExchange [Reuses operator id: 123]
Output [7]: [channel#68, i_brand_id#146, i_class_id#147, i_category_id#148, sum#149, isEmpty#150, sum#151]

(131) HashAggregate [codegen id : 421]
Input [7]: [channel#68, i_brand_id#146, i_class_id#147, i_category_id#148, sum#149, isEmpty#150, sum#151]
Keys [4]: [channel#68, i_brand_id#146, i_class_id#147, i_category_id#148]
Functions [2]: [sum(sales#63), sum(number_sales#64)]
Aggregate Attributes [2]: [sum(sales#63)#152, sum(number_sales#64)#153]
Results [4]: [channel#68, i_brand_id#146, sum(sales#63)#152 AS sum_sales#124, sum(number_sales#64)#153 AS number_sales#125]

(132) HashAggregate [codegen id : 421]
Input [4]: [channel#68, i_brand_id#146, sum_sales#124, number_sales#125]
Keys [2]: [channel#68, i_brand_id#146]
Functions [2]: [partial_sum(sum_sales#124), partial_sum(number_sales#125)]
Aggregate Attributes [3]: [sum#154, isEmpty#155, sum#156]
Results [5]: [channel#68, i_brand_id#146, sum#157, isEmpty#158, sum#159]

(133) Exchange
Input [5]: [channel#68, i_brand_id#146, sum#157, isEmpty#158, sum#159]
Arguments: hashpartitioning(channel#68, i_brand_id#146, 5), ENSURE_REQUIREMENTS, [id=#160]

(134) HashAggregate [codegen id : 422]
Input [5]: [channel#68, i_brand_id#146, sum#157, isEmpty#158, sum#159]
Keys [2]: [channel#68, i_brand_id#146]
Functions [2]: [sum(sum_sales#124), sum(number_sales#125)]
Aggregate Attributes [2]: [sum(sum_sales#124)#161, sum(number_sales#125)#162]
Results [6]: [channel#68, i_brand_id#146, null AS i_class_id#163, null AS i_category_id#164, sum(sum_sales#124)#161 AS sum(sum_sales)#165, sum(number_sales#125)#162 AS sum(number_sales)#166]

(135) ReusedExchange [Reuses operator id: 123]
Output [7]: [channel#68, i_brand_id#167, i_class_id#168, i_category_id#169, sum#170, isEmpty#171, sum#172]

(136) HashAggregate [codegen id : 562]
Input [7]: [channel#68, i_brand_id#167, i_class_id#168, i_category_id#169, sum#170, isEmpty#171, sum#172]
Keys [4]: [channel#68, i_brand_id#167, i_class_id#168, i_category_id#169]
Functions [2]: [sum(sales#63), sum(number_sales#64)]
Aggregate Attributes [2]: [sum(sales#63)#173, sum(number_sales#64)#174]
Results [3]: [channel#68, sum(sales#63)#173 AS sum_sales#124, sum(number_sales#64)#174 AS number_sales#125]

(137) HashAggregate [codegen id : 562]
Input [3]: [channel#68, sum_sales#124, number_sales#125]
Keys [1]: [channel#68]
Functions [2]: [partial_sum(sum_sales#124), partial_sum(number_sales#125)]
Aggregate Attributes [3]: [sum#175, isEmpty#176, sum#177]
Results [4]: [channel#68, sum#178, isEmpty#179, sum#180]

(138) Exchange
Input [4]: [channel#68, sum#178, isEmpty#179, sum#180]
Arguments: hashpartitioning(channel#68, 5), ENSURE_REQUIREMENTS, [id=#181]

(139) HashAggregate [codegen id : 563]
Input [4]: [channel#68, sum#178, isEmpty#179, sum#180]
Keys [1]: [channel#68]
Functions [2]: [sum(sum_sales#124), sum(number_sales#125)]
Aggregate Attributes [2]: [sum(sum_sales#124)#182, sum(number_sales#125)#183]
Results [6]: [channel#68, null AS i_brand_id#184, null AS i_class_id#185, null AS i_category_id#186, sum(sum_sales#124)#182 AS sum(sum_sales)#187, sum(number_sales#125)#183 AS sum(number_sales)#188]

(140) ReusedExchange [Reuses operator id: 123]
Output [7]: [channel#68, i_brand_id#189, i_class_id#190, i_category_id#191, sum#192, isEmpty#193, sum#194]

(141) HashAggregate [codegen id : 703]
Input [7]: [channel#68, i_brand_id#189, i_class_id#190, i_category_id#191, sum#192, isEmpty#193, sum#194]
Keys [4]: [channel#68, i_brand_id#189, i_class_id#190, i_category_id#191]
Functions [2]: [sum(sales#63), sum(number_sales#64)]
Aggregate Attributes [2]: [sum(sales#63)#195, sum(number_sales#64)#196]
Results [2]: [sum(sales#63)#195 AS sum_sales#124, sum(number_sales#64)#196 AS number_sales#125]

(142) HashAggregate [codegen id : 703]
Input [2]: [sum_sales#124, number_sales#125]
Keys: []
Functions [2]: [partial_sum(sum_sales#124), partial_sum(number_sales#125)]
Aggregate Attributes [3]: [sum#197, isEmpty#198, sum#199]
Results [3]: [sum#200, isEmpty#201, sum#202]

(143) Exchange
Input [3]: [sum#200, isEmpty#201, sum#202]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#203]

(144) HashAggregate [codegen id : 704]
Input [3]: [sum#200, isEmpty#201, sum#202]
Keys: []
Functions [2]: [sum(sum_sales#124), sum(number_sales#125)]
Aggregate Attributes [2]: [sum(sum_sales#124)#204, sum(number_sales#125)#205]
Results [6]: [null AS channel#206, null AS i_brand_id#207, null AS i_class_id#208, null AS i_category_id#209, sum(sum_sales#124)#204 AS sum(sum_sales)#210, sum(number_sales#125)#205 AS sum(number_sales)#211]

(145) Union

(146) HashAggregate [codegen id : 705]
Input [6]: [channel#68, i_brand_id#49, i_class_id#50, i_category_id#51, sum_sales#124, number_sales#125]
Keys [6]: [channel#68, i_brand_id#49, i_class_id#50, i_category_id#51, sum_sales#124, number_sales#125]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#68, i_brand_id#49, i_class_id#50, i_category_id#51, sum_sales#124, number_sales#125]

(147) Exchange
Input [6]: [channel#68, i_brand_id#49, i_class_id#50, i_category_id#51, sum_sales#124, number_sales#125]
Arguments: hashpartitioning(channel#68, i_brand_id#49, i_class_id#50, i_category_id#51, sum_sales#124, number_sales#125, 5), ENSURE_REQUIREMENTS, [id=#212]

(148) HashAggregate [codegen id : 706]
Input [6]: [channel#68, i_brand_id#49, i_class_id#50, i_category_id#51, sum_sales#124, number_sales#125]
Keys [6]: [channel#68, i_brand_id#49, i_class_id#50, i_category_id#51, sum_sales#124, number_sales#125]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#68, i_brand_id#49, i_class_id#50, i_category_id#51, sum_sales#124, number_sales#125]

(149) TakeOrderedAndProject
Input [6]: [channel#68, i_brand_id#49, i_class_id#50, i_category_id#51, sum_sales#124, number_sales#125]
Arguments: 100, [channel#68 ASC NULLS FIRST, i_brand_id#49 ASC NULLS FIRST, i_class_id#50 ASC NULLS FIRST, i_category_id#51 ASC NULLS FIRST], [channel#68, i_brand_id#49, i_class_id#50, i_category_id#51, sum_sales#124, number_sales#125]

===== Subqueries =====

Subquery:1 Hosting operator id = 81 Hosting Expression = Subquery scalar-subquery#66, [id=#67]
* HashAggregate (168)
+- Exchange (167)
   +- * HashAggregate (166)
      +- Union (165)
         :- * Project (154)
         :  +- * BroadcastHashJoin Inner BuildRight (153)
         :     :- * ColumnarToRow (151)
         :     :  +- Scan parquet default.store_sales (150)
         :     +- ReusedExchange (152)
         :- * Project (159)
         :  +- * BroadcastHashJoin Inner BuildRight (158)
         :     :- * ColumnarToRow (156)
         :     :  +- Scan parquet default.catalog_sales (155)
         :     +- ReusedExchange (157)
         +- * Project (164)
            +- * BroadcastHashJoin Inner BuildRight (163)
               :- * ColumnarToRow (161)
               :  +- Scan parquet default.web_sales (160)
               +- ReusedExchange (162)


(150) Scan parquet default.store_sales
Output [3]: [ss_quantity#213, ss_list_price#214, ss_sold_date_sk#215]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#215), dynamicpruningexpression(ss_sold_date_sk#215 IN dynamicpruning#13)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(151) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#213, ss_list_price#214, ss_sold_date_sk#215]

(152) ReusedExchange [Reuses operator id: 183]
Output [1]: [d_date_sk#216]

(153) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#215]
Right keys [1]: [d_date_sk#216]
Join condition: None

(154) Project [codegen id : 2]
Output [2]: [ss_quantity#213 AS quantity#217, ss_list_price#214 AS list_price#218]
Input [4]: [ss_quantity#213, ss_list_price#214, ss_sold_date_sk#215, d_date_sk#216]

(155) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#219, cs_list_price#220, cs_sold_date_sk#221]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#221), dynamicpruningexpression(cs_sold_date_sk#221 IN dynamicpruning#222)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(156) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#219, cs_list_price#220, cs_sold_date_sk#221]

(157) ReusedExchange [Reuses operator id: 173]
Output [1]: [d_date_sk#223]

(158) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#221]
Right keys [1]: [d_date_sk#223]
Join condition: None

(159) Project [codegen id : 4]
Output [2]: [cs_quantity#219 AS quantity#224, cs_list_price#220 AS list_price#225]
Input [4]: [cs_quantity#219, cs_list_price#220, cs_sold_date_sk#221, d_date_sk#223]

(160) Scan parquet default.web_sales
Output [3]: [ws_quantity#226, ws_list_price#227, ws_sold_date_sk#228]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#228), dynamicpruningexpression(ws_sold_date_sk#228 IN dynamicpruning#222)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(161) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#226, ws_list_price#227, ws_sold_date_sk#228]

(162) ReusedExchange [Reuses operator id: 173]
Output [1]: [d_date_sk#229]

(163) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#228]
Right keys [1]: [d_date_sk#229]
Join condition: None

(164) Project [codegen id : 6]
Output [2]: [ws_quantity#226 AS quantity#230, ws_list_price#227 AS list_price#231]
Input [4]: [ws_quantity#226, ws_list_price#227, ws_sold_date_sk#228, d_date_sk#229]

(165) Union

(166) HashAggregate [codegen id : 7]
Input [2]: [quantity#217, list_price#218]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#217 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#218 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#232, count#233]
Results [2]: [sum#234, count#235]

(167) Exchange
Input [2]: [sum#234, count#235]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#236]

(168) HashAggregate [codegen id : 8]
Input [2]: [sum#234, count#235]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#217 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#218 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#217 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#218 as decimal(12,2)))), DecimalType(18,2), true))#237]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#217 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#218 as decimal(12,2)))), DecimalType(18,2), true))#237 AS average_sales#238]

Subquery:2 Hosting operator id = 150 Hosting Expression = ss_sold_date_sk#215 IN dynamicpruning#13

Subquery:3 Hosting operator id = 155 Hosting Expression = cs_sold_date_sk#221 IN dynamicpruning#222
BroadcastExchange (173)
+- * Project (172)
   +- * Filter (171)
      +- * ColumnarToRow (170)
         +- Scan parquet default.date_dim (169)


(169) Scan parquet default.date_dim
Output [2]: [d_date_sk#223, d_year#239]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(170) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#223, d_year#239]

(171) Filter [codegen id : 1]
Input [2]: [d_date_sk#223, d_year#239]
Condition : (((isnotnull(d_year#239) AND (d_year#239 >= 1998)) AND (d_year#239 <= 2000)) AND isnotnull(d_date_sk#223))

(172) Project [codegen id : 1]
Output [1]: [d_date_sk#223]
Input [2]: [d_date_sk#223, d_year#239]

(173) BroadcastExchange
Input [1]: [d_date_sk#223]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#240]

Subquery:4 Hosting operator id = 160 Hosting Expression = ws_sold_date_sk#228 IN dynamicpruning#222

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (178)
+- * Project (177)
   +- * Filter (176)
      +- * ColumnarToRow (175)
         +- Scan parquet default.date_dim (174)


(174) Scan parquet default.date_dim
Output [3]: [d_date_sk#47, d_year#241, d_moy#242]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(175) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#47, d_year#241, d_moy#242]

(176) Filter [codegen id : 1]
Input [3]: [d_date_sk#47, d_year#241, d_moy#242]
Condition : ((((isnotnull(d_year#241) AND isnotnull(d_moy#242)) AND (d_year#241 = 2000)) AND (d_moy#242 = 11)) AND isnotnull(d_date_sk#47))

(177) Project [codegen id : 1]
Output [1]: [d_date_sk#47]
Input [3]: [d_date_sk#47, d_year#241, d_moy#242]

(178) BroadcastExchange
Input [1]: [d_date_sk#47]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#243]

Subquery:6 Hosting operator id = 9 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#13
BroadcastExchange (183)
+- * Project (182)
   +- * Filter (181)
      +- * ColumnarToRow (180)
         +- Scan parquet default.date_dim (179)


(179) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#244]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(180) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#244]

(181) Filter [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#244]
Condition : (((isnotnull(d_year#244) AND (d_year#244 >= 1999)) AND (d_year#244 <= 2001)) AND isnotnull(d_date_sk#14))

(182) Project [codegen id : 1]
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#244]

(183) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#245]

Subquery:7 Hosting operator id = 20 Hosting Expression = cs_sold_date_sk#21 IN dynamicpruning#13

Subquery:8 Hosting operator id = 43 Hosting Expression = ws_sold_date_sk#36 IN dynamicpruning#13

Subquery:9 Hosting operator id = 100 Hosting Expression = ReusedSubquery Subquery scalar-subquery#66, [id=#67]

Subquery:10 Hosting operator id = 83 Hosting Expression = cs_sold_date_sk#72 IN dynamicpruning#5

Subquery:11 Hosting operator id = 119 Hosting Expression = ReusedSubquery Subquery scalar-subquery#66, [id=#67]

Subquery:12 Hosting operator id = 102 Hosting Expression = ws_sold_date_sk#95 IN dynamicpruning#5


