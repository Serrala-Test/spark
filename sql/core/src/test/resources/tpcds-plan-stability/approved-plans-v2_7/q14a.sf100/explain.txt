== Physical Plan ==
TakeOrderedAndProject (165)
+- * HashAggregate (164)
   +- Exchange (163)
      +- * HashAggregate (162)
         +- Union (161)
            :- * HashAggregate (140)
            :  +- Exchange (139)
            :     +- * HashAggregate (138)
            :        +- Union (137)
            :           :- * Filter (100)
            :           :  +- * HashAggregate (99)
            :           :     +- Exchange (98)
            :           :        +- * HashAggregate (97)
            :           :           +- * Project (96)
            :           :              +- * BroadcastHashJoin Inner BuildRight (95)
            :           :                 :- * Project (76)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (75)
            :           :                 :     :- * SortMergeJoin LeftSemi (73)
            :           :                 :     :  :- * Sort (5)
            :           :                 :     :  :  +- Exchange (4)
            :           :                 :     :  :     +- * Filter (3)
            :           :                 :     :  :        +- * ColumnarToRow (2)
            :           :                 :     :  :           +- Scan parquet default.store_sales (1)
            :           :                 :     :  +- * Sort (72)
            :           :                 :     :     +- Exchange (71)
            :           :                 :     :        +- * Project (70)
            :           :                 :     :           +- * BroadcastHashJoin Inner BuildRight (69)
            :           :                 :     :              :- * Filter (8)
            :           :                 :     :              :  +- * ColumnarToRow (7)
            :           :                 :     :              :     +- Scan parquet default.item (6)
            :           :                 :     :              +- BroadcastExchange (68)
            :           :                 :     :                 +- * HashAggregate (67)
            :           :                 :     :                    +- Exchange (66)
            :           :                 :     :                       +- * HashAggregate (65)
            :           :                 :     :                          +- * SortMergeJoin LeftSemi (64)
            :           :                 :     :                             :- * Sort (49)
            :           :                 :     :                             :  +- Exchange (48)
            :           :                 :     :                             :     +- * HashAggregate (47)
            :           :                 :     :                             :        +- Exchange (46)
            :           :                 :     :                             :           +- * HashAggregate (45)
            :           :                 :     :                             :              +- * Project (44)
            :           :                 :     :                             :                 +- * BroadcastHashJoin Inner BuildRight (43)
            :           :                 :     :                             :                    :- * Project (14)
            :           :                 :     :                             :                    :  +- * BroadcastHashJoin Inner BuildRight (13)
            :           :                 :     :                             :                    :     :- * Filter (11)
            :           :                 :     :                             :                    :     :  +- * ColumnarToRow (10)
            :           :                 :     :                             :                    :     :     +- Scan parquet default.store_sales (9)
            :           :                 :     :                             :                    :     +- ReusedExchange (12)
            :           :                 :     :                             :                    +- BroadcastExchange (42)
            :           :                 :     :                             :                       +- * SortMergeJoin LeftSemi (41)
            :           :                 :     :                             :                          :- * Sort (19)
            :           :                 :     :                             :                          :  +- Exchange (18)
            :           :                 :     :                             :                          :     +- * Filter (17)
            :           :                 :     :                             :                          :        +- * ColumnarToRow (16)
            :           :                 :     :                             :                          :           +- Scan parquet default.item (15)
            :           :                 :     :                             :                          +- * Sort (40)
            :           :                 :     :                             :                             +- Exchange (39)
            :           :                 :     :                             :                                +- * BroadcastHashJoin LeftSemi BuildRight (38)
            :           :                 :     :                             :                                   :- * Project (31)
            :           :                 :     :                             :                                   :  +- * BroadcastHashJoin Inner BuildRight (30)
            :           :                 :     :                             :                                   :     :- * Project (25)
            :           :                 :     :                             :                                   :     :  +- * BroadcastHashJoin Inner BuildRight (24)
            :           :                 :     :                             :                                   :     :     :- * Filter (22)
            :           :                 :     :                             :                                   :     :     :  +- * ColumnarToRow (21)
            :           :                 :     :                             :                                   :     :     :     +- Scan parquet default.catalog_sales (20)
            :           :                 :     :                             :                                   :     :     +- ReusedExchange (23)
            :           :                 :     :                             :                                   :     +- BroadcastExchange (29)
            :           :                 :     :                             :                                   :        +- * Filter (28)
            :           :                 :     :                             :                                   :           +- * ColumnarToRow (27)
            :           :                 :     :                             :                                   :              +- Scan parquet default.item (26)
            :           :                 :     :                             :                                   +- BroadcastExchange (37)
            :           :                 :     :                             :                                      +- Exchange (36)
            :           :                 :     :                             :                                         +- * Project (35)
            :           :                 :     :                             :                                            +- * Filter (34)
            :           :                 :     :                             :                                               +- * ColumnarToRow (33)
            :           :                 :     :                             :                                                  +- Scan parquet default.item (32)
            :           :                 :     :                             +- * Sort (63)
            :           :                 :     :                                +- Exchange (62)
            :           :                 :     :                                   +- * BroadcastHashJoin LeftSemi BuildRight (61)
            :           :                 :     :                                      :- * Project (58)
            :           :                 :     :                                      :  +- * BroadcastHashJoin Inner BuildRight (57)
            :           :                 :     :                                      :     :- * Project (55)
            :           :                 :     :                                      :     :  +- * BroadcastHashJoin Inner BuildRight (54)
            :           :                 :     :                                      :     :     :- * Filter (52)
            :           :                 :     :                                      :     :     :  +- * ColumnarToRow (51)
            :           :                 :     :                                      :     :     :     +- Scan parquet default.web_sales (50)
            :           :                 :     :                                      :     :     +- ReusedExchange (53)
            :           :                 :     :                                      :     +- ReusedExchange (56)
            :           :                 :     :                                      +- BroadcastExchange (60)
            :           :                 :     :                                         +- ReusedExchange (59)
            :           :                 :     +- ReusedExchange (74)
            :           :                 +- BroadcastExchange (94)
            :           :                    +- * SortMergeJoin LeftSemi (93)
            :           :                       :- * Sort (81)
            :           :                       :  +- Exchange (80)
            :           :                       :     +- * Filter (79)
            :           :                       :        +- * ColumnarToRow (78)
            :           :                       :           +- Scan parquet default.item (77)
            :           :                       +- * Sort (92)
            :           :                          +- Exchange (91)
            :           :                             +- * BroadcastHashJoin LeftSemi BuildRight (90)
            :           :                                :- * Project (87)
            :           :                                :  +- * BroadcastHashJoin Inner BuildRight (86)
            :           :                                :     :- * Filter (84)
            :           :                                :     :  +- * ColumnarToRow (83)
            :           :                                :     :     +- Scan parquet default.item (82)
            :           :                                :     +- ReusedExchange (85)
            :           :                                +- BroadcastExchange (89)
            :           :                                   +- ReusedExchange (88)
            :           :- * Filter (118)
            :           :  +- * HashAggregate (117)
            :           :     +- Exchange (116)
            :           :        +- * HashAggregate (115)
            :           :           +- * Project (114)
            :           :              +- * BroadcastHashJoin Inner BuildRight (113)
            :           :                 :- * Project (111)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (110)
            :           :                 :     :- * SortMergeJoin LeftSemi (108)
            :           :                 :     :  :- * Sort (105)
            :           :                 :     :  :  +- Exchange (104)
            :           :                 :     :  :     +- * Filter (103)
            :           :                 :     :  :        +- * ColumnarToRow (102)
            :           :                 :     :  :           +- Scan parquet default.catalog_sales (101)
            :           :                 :     :  +- * Sort (107)
            :           :                 :     :     +- ReusedExchange (106)
            :           :                 :     +- ReusedExchange (109)
            :           :                 +- ReusedExchange (112)
            :           +- * Filter (136)
            :              +- * HashAggregate (135)
            :                 +- Exchange (134)
            :                    +- * HashAggregate (133)
            :                       +- * Project (132)
            :                          +- * BroadcastHashJoin Inner BuildRight (131)
            :                             :- * Project (129)
            :                             :  +- * BroadcastHashJoin Inner BuildRight (128)
            :                             :     :- * SortMergeJoin LeftSemi (126)
            :                             :     :  :- * Sort (123)
            :                             :     :  :  +- Exchange (122)
            :                             :     :  :     +- * Filter (121)
            :                             :     :  :        +- * ColumnarToRow (120)
            :                             :     :  :           +- Scan parquet default.web_sales (119)
            :                             :     :  +- * Sort (125)
            :                             :     :     +- ReusedExchange (124)
            :                             :     +- ReusedExchange (127)
            :                             +- ReusedExchange (130)
            :- * HashAggregate (145)
            :  +- Exchange (144)
            :     +- * HashAggregate (143)
            :        +- * HashAggregate (142)
            :           +- ReusedExchange (141)
            :- * HashAggregate (150)
            :  +- Exchange (149)
            :     +- * HashAggregate (148)
            :        +- * HashAggregate (147)
            :           +- ReusedExchange (146)
            :- * HashAggregate (155)
            :  +- Exchange (154)
            :     +- * HashAggregate (153)
            :        +- * HashAggregate (152)
            :           +- ReusedExchange (151)
            +- * HashAggregate (160)
               +- Exchange (159)
                  +- * HashAggregate (158)
                     +- * HashAggregate (157)
                        +- ReusedExchange (156)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 32]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(8) Filter [codegen id : 32]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(9) Scan parquet default.store_sales
Output [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(10) ColumnarToRow [codegen id : 12]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]

(11) Filter [codegen id : 12]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Condition : isnotnull(ss_item_sk#11)

(12) ReusedExchange [Reuses operator id: 199]
Output [1]: [d_date_sk#14]

(13) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ss_sold_date_sk#12]
Right keys [1]: [d_date_sk#14]
Join condition: None

(14) Project [codegen id : 12]
Output [1]: [ss_item_sk#11]
Input [3]: [ss_item_sk#11, ss_sold_date_sk#12, d_date_sk#14]

(15) Scan parquet default.item
Output [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(16) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(17) Filter [codegen id : 4]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Condition : (((isnotnull(i_item_sk#15) AND isnotnull(i_brand_id#16)) AND isnotnull(i_class_id#17)) AND isnotnull(i_category_id#18))

(18) Exchange
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: hashpartitioning(coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18), 5), ENSURE_REQUIREMENTS, [id=#19]

(19) Sort [codegen id : 5]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: [coalesce(i_brand_id#16, 0) ASC NULLS FIRST, isnull(i_brand_id#16) ASC NULLS FIRST, coalesce(i_class_id#17, 0) ASC NULLS FIRST, isnull(i_class_id#17) ASC NULLS FIRST, coalesce(i_category_id#18, 0) ASC NULLS FIRST, isnull(i_category_id#18) ASC NULLS FIRST], false, 0

(20) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#20, cs_sold_date_sk#21]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#21), dynamicpruningexpression(cs_sold_date_sk#21 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(21) ColumnarToRow [codegen id : 9]
Input [2]: [cs_item_sk#20, cs_sold_date_sk#21]

(22) Filter [codegen id : 9]
Input [2]: [cs_item_sk#20, cs_sold_date_sk#21]
Condition : isnotnull(cs_item_sk#20)

(23) ReusedExchange [Reuses operator id: 199]
Output [1]: [d_date_sk#22]

(24) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_sold_date_sk#21]
Right keys [1]: [d_date_sk#22]
Join condition: None

(25) Project [codegen id : 9]
Output [1]: [cs_item_sk#20]
Input [3]: [cs_item_sk#20, cs_sold_date_sk#21, d_date_sk#22]

(26) Scan parquet default.item
Output [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(27) ColumnarToRow [codegen id : 7]
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]

(28) Filter [codegen id : 7]
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Condition : isnotnull(i_item_sk#23)

(29) BroadcastExchange
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(30) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#20]
Right keys [1]: [i_item_sk#23]
Join condition: None

(31) Project [codegen id : 9]
Output [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Input [5]: [cs_item_sk#20, i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]

(32) Scan parquet default.item
Output [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(33) ColumnarToRow [codegen id : 8]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(34) Filter [codegen id : 8]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Condition : (((isnotnull(i_item_sk#15) AND isnotnull(i_brand_id#16)) AND isnotnull(i_class_id#17)) AND isnotnull(i_category_id#18))

(35) Project [codegen id : 8]
Output [3]: [i_brand_id#16, i_class_id#17, i_category_id#18]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(36) Exchange
Input [3]: [i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: hashpartitioning(coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18), 5), ENSURE_REQUIREMENTS, [id=#28]

(37) BroadcastExchange
Input [3]: [i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#29]

(38) BroadcastHashJoin [codegen id : 9]
Left keys [6]: [coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26)]
Right keys [6]: [coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18)]
Join condition: None

(39) Exchange
Input [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: hashpartitioning(coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26), 5), ENSURE_REQUIREMENTS, [id=#30]

(40) Sort [codegen id : 10]
Input [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: [coalesce(i_brand_id#24, 0) ASC NULLS FIRST, isnull(i_brand_id#24) ASC NULLS FIRST, coalesce(i_class_id#25, 0) ASC NULLS FIRST, isnull(i_class_id#25) ASC NULLS FIRST, coalesce(i_category_id#26, 0) ASC NULLS FIRST, isnull(i_category_id#26) ASC NULLS FIRST], false, 0

(41) SortMergeJoin [codegen id : 11]
Left keys [6]: [coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18)]
Right keys [6]: [coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26)]
Join condition: None

(42) BroadcastExchange
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#31]

(43) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ss_item_sk#11]
Right keys [1]: [i_item_sk#15]
Join condition: None

(44) Project [codegen id : 12]
Output [3]: [i_brand_id#16 AS brand_id#32, i_class_id#17 AS class_id#33, i_category_id#18 AS category_id#34]
Input [5]: [ss_item_sk#11, i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(45) HashAggregate [codegen id : 12]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Keys [3]: [brand_id#32, class_id#33, category_id#34]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#32, class_id#33, category_id#34]

(46) Exchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: hashpartitioning(brand_id#32, class_id#33, category_id#34, 5), ENSURE_REQUIREMENTS, [id=#35]

(47) HashAggregate [codegen id : 13]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Keys [3]: [brand_id#32, class_id#33, category_id#34]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#32, class_id#33, category_id#34]

(48) Exchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: hashpartitioning(coalesce(brand_id#32, 0), isnull(brand_id#32), coalesce(class_id#33, 0), isnull(class_id#33), coalesce(category_id#34, 0), isnull(category_id#34), 5), ENSURE_REQUIREMENTS, [id=#36]

(49) Sort [codegen id : 14]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: [coalesce(brand_id#32, 0) ASC NULLS FIRST, isnull(brand_id#32) ASC NULLS FIRST, coalesce(class_id#33, 0) ASC NULLS FIRST, isnull(class_id#33) ASC NULLS FIRST, coalesce(category_id#34, 0) ASC NULLS FIRST, isnull(category_id#34) ASC NULLS FIRST], false, 0

(50) Scan parquet default.web_sales
Output [2]: [ws_item_sk#37, ws_sold_date_sk#38]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#38), dynamicpruningexpression(ws_sold_date_sk#38 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(51) ColumnarToRow [codegen id : 28]
Input [2]: [ws_item_sk#37, ws_sold_date_sk#38]

(52) Filter [codegen id : 28]
Input [2]: [ws_item_sk#37, ws_sold_date_sk#38]
Condition : isnotnull(ws_item_sk#37)

(53) ReusedExchange [Reuses operator id: 199]
Output [1]: [d_date_sk#39]

(54) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [ws_sold_date_sk#38]
Right keys [1]: [d_date_sk#39]
Join condition: None

(55) Project [codegen id : 28]
Output [1]: [ws_item_sk#37]
Input [3]: [ws_item_sk#37, ws_sold_date_sk#38, d_date_sk#39]

(56) ReusedExchange [Reuses operator id: 29]
Output [4]: [i_item_sk#40, i_brand_id#41, i_class_id#42, i_category_id#43]

(57) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [ws_item_sk#37]
Right keys [1]: [i_item_sk#40]
Join condition: None

(58) Project [codegen id : 28]
Output [3]: [i_brand_id#41, i_class_id#42, i_category_id#43]
Input [5]: [ws_item_sk#37, i_item_sk#40, i_brand_id#41, i_class_id#42, i_category_id#43]

(59) ReusedExchange [Reuses operator id: 48]
Output [3]: [brand_id#32, class_id#33, category_id#34]

(60) BroadcastExchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#44]

(61) BroadcastHashJoin [codegen id : 28]
Left keys [6]: [coalesce(i_brand_id#41, 0), isnull(i_brand_id#41), coalesce(i_class_id#42, 0), isnull(i_class_id#42), coalesce(i_category_id#43, 0), isnull(i_category_id#43)]
Right keys [6]: [coalesce(brand_id#32, 0), isnull(brand_id#32), coalesce(class_id#33, 0), isnull(class_id#33), coalesce(category_id#34, 0), isnull(category_id#34)]
Join condition: None

(62) Exchange
Input [3]: [i_brand_id#41, i_class_id#42, i_category_id#43]
Arguments: hashpartitioning(coalesce(i_brand_id#41, 0), isnull(i_brand_id#41), coalesce(i_class_id#42, 0), isnull(i_class_id#42), coalesce(i_category_id#43, 0), isnull(i_category_id#43), 5), ENSURE_REQUIREMENTS, [id=#45]

(63) Sort [codegen id : 29]
Input [3]: [i_brand_id#41, i_class_id#42, i_category_id#43]
Arguments: [coalesce(i_brand_id#41, 0) ASC NULLS FIRST, isnull(i_brand_id#41) ASC NULLS FIRST, coalesce(i_class_id#42, 0) ASC NULLS FIRST, isnull(i_class_id#42) ASC NULLS FIRST, coalesce(i_category_id#43, 0) ASC NULLS FIRST, isnull(i_category_id#43) ASC NULLS FIRST], false, 0

(64) SortMergeJoin [codegen id : 30]
Left keys [6]: [coalesce(brand_id#32, 0), isnull(brand_id#32), coalesce(class_id#33, 0), isnull(class_id#33), coalesce(category_id#34, 0), isnull(category_id#34)]
Right keys [6]: [coalesce(i_brand_id#41, 0), isnull(i_brand_id#41), coalesce(i_class_id#42, 0), isnull(i_class_id#42), coalesce(i_category_id#43, 0), isnull(i_category_id#43)]
Join condition: None

(65) HashAggregate [codegen id : 30]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Keys [3]: [brand_id#32, class_id#33, category_id#34]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#32, class_id#33, category_id#34]

(66) Exchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: hashpartitioning(brand_id#32, class_id#33, category_id#34, 5), ENSURE_REQUIREMENTS, [id=#46]

(67) HashAggregate [codegen id : 31]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Keys [3]: [brand_id#32, class_id#33, category_id#34]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#32, class_id#33, category_id#34]

(68) BroadcastExchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#47]

(69) BroadcastHashJoin [codegen id : 32]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#32, class_id#33, category_id#34]
Join condition: None

(70) Project [codegen id : 32]
Output [1]: [i_item_sk#7 AS ss_item_sk#48]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#32, class_id#33, category_id#34]

(71) Exchange
Input [1]: [ss_item_sk#48]
Arguments: hashpartitioning(ss_item_sk#48, 5), ENSURE_REQUIREMENTS, [id=#49]

(72) Sort [codegen id : 33]
Input [1]: [ss_item_sk#48]
Arguments: [ss_item_sk#48 ASC NULLS FIRST], false, 0

(73) SortMergeJoin [codegen id : 70]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#48]
Join condition: None

(74) ReusedExchange [Reuses operator id: 194]
Output [1]: [d_date_sk#50]

(75) BroadcastHashJoin [codegen id : 70]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#50]
Join condition: None

(76) Project [codegen id : 70]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#50]

(77) Scan parquet default.item
Output [4]: [i_item_sk#51, i_brand_id#52, i_class_id#53, i_category_id#54]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(78) ColumnarToRow [codegen id : 35]
Input [4]: [i_item_sk#51, i_brand_id#52, i_class_id#53, i_category_id#54]

(79) Filter [codegen id : 35]
Input [4]: [i_item_sk#51, i_brand_id#52, i_class_id#53, i_category_id#54]
Condition : isnotnull(i_item_sk#51)

(80) Exchange
Input [4]: [i_item_sk#51, i_brand_id#52, i_class_id#53, i_category_id#54]
Arguments: hashpartitioning(i_item_sk#51, 5), ENSURE_REQUIREMENTS, [id=#55]

(81) Sort [codegen id : 36]
Input [4]: [i_item_sk#51, i_brand_id#52, i_class_id#53, i_category_id#54]
Arguments: [i_item_sk#51 ASC NULLS FIRST], false, 0

(82) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(83) ColumnarToRow [codegen id : 67]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(84) Filter [codegen id : 67]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(85) ReusedExchange [Reuses operator id: 68]
Output [3]: [brand_id#32, class_id#33, category_id#34]

(86) BroadcastHashJoin [codegen id : 67]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#32, class_id#33, category_id#34]
Join condition: None

(87) Project [codegen id : 67]
Output [1]: [i_item_sk#7 AS ss_item_sk#48]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#32, class_id#33, category_id#34]

(88) ReusedExchange [Reuses operator id: 80]
Output [4]: [i_item_sk#51, i_brand_id#52, i_class_id#53, i_category_id#54]

(89) BroadcastExchange
Input [4]: [i_item_sk#51, i_brand_id#52, i_class_id#53, i_category_id#54]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#56]

(90) BroadcastHashJoin [codegen id : 67]
Left keys [1]: [ss_item_sk#48]
Right keys [1]: [i_item_sk#51]
Join condition: None

(91) Exchange
Input [1]: [ss_item_sk#48]
Arguments: hashpartitioning(ss_item_sk#48, 5), ENSURE_REQUIREMENTS, [id=#57]

(92) Sort [codegen id : 68]
Input [1]: [ss_item_sk#48]
Arguments: [ss_item_sk#48 ASC NULLS FIRST], false, 0

(93) SortMergeJoin [codegen id : 69]
Left keys [1]: [i_item_sk#51]
Right keys [1]: [ss_item_sk#48]
Join condition: None

(94) BroadcastExchange
Input [4]: [i_item_sk#51, i_brand_id#52, i_class_id#53, i_category_id#54]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#58]

(95) BroadcastHashJoin [codegen id : 70]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#51]
Join condition: None

(96) Project [codegen id : 70]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#52, i_class_id#53, i_category_id#54]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#51, i_brand_id#52, i_class_id#53, i_category_id#54]

(97) HashAggregate [codegen id : 70]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#52, i_class_id#53, i_category_id#54]
Keys [3]: [i_brand_id#52, i_class_id#53, i_category_id#54]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#59, isEmpty#60, count#61]
Results [6]: [i_brand_id#52, i_class_id#53, i_category_id#54, sum#62, isEmpty#63, count#64]

(98) Exchange
Input [6]: [i_brand_id#52, i_class_id#53, i_category_id#54, sum#62, isEmpty#63, count#64]
Arguments: hashpartitioning(i_brand_id#52, i_class_id#53, i_category_id#54, 5), ENSURE_REQUIREMENTS, [id=#65]

(99) HashAggregate [codegen id : 71]
Input [6]: [i_brand_id#52, i_class_id#53, i_category_id#54, sum#62, isEmpty#63, count#64]
Keys [3]: [i_brand_id#52, i_class_id#53, i_category_id#54]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#66, count(1)#67]
Results [6]: [store AS channel#68, i_brand_id#52, i_class_id#53, i_category_id#54, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#66 AS sales#69, count(1)#67 AS number_sales#70]

(100) Filter [codegen id : 71]
Input [6]: [channel#68, i_brand_id#52, i_class_id#53, i_category_id#54, sales#69, number_sales#70]
Condition : (isnotnull(sales#69) AND (cast(sales#69 as decimal(32,6)) > cast(Subquery scalar-subquery#71, [id=#72] as decimal(32,6))))

(101) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#76), dynamicpruningexpression(cs_sold_date_sk#76 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(102) ColumnarToRow [codegen id : 72]
Input [4]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76]

(103) Filter [codegen id : 72]
Input [4]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76]
Condition : isnotnull(cs_item_sk#73)

(104) Exchange
Input [4]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76]
Arguments: hashpartitioning(cs_item_sk#73, 5), ENSURE_REQUIREMENTS, [id=#77]

(105) Sort [codegen id : 73]
Input [4]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76]
Arguments: [cs_item_sk#73 ASC NULLS FIRST], false, 0

(106) ReusedExchange [Reuses operator id: 71]
Output [1]: [ss_item_sk#48]

(107) Sort [codegen id : 104]
Input [1]: [ss_item_sk#48]
Arguments: [ss_item_sk#48 ASC NULLS FIRST], false, 0

(108) SortMergeJoin [codegen id : 141]
Left keys [1]: [cs_item_sk#73]
Right keys [1]: [ss_item_sk#48]
Join condition: None

(109) ReusedExchange [Reuses operator id: 194]
Output [1]: [d_date_sk#78]

(110) BroadcastHashJoin [codegen id : 141]
Left keys [1]: [cs_sold_date_sk#76]
Right keys [1]: [d_date_sk#78]
Join condition: None

(111) Project [codegen id : 141]
Output [3]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75]
Input [5]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76, d_date_sk#78]

(112) ReusedExchange [Reuses operator id: 94]
Output [4]: [i_item_sk#79, i_brand_id#80, i_class_id#81, i_category_id#82]

(113) BroadcastHashJoin [codegen id : 141]
Left keys [1]: [cs_item_sk#73]
Right keys [1]: [i_item_sk#79]
Join condition: None

(114) Project [codegen id : 141]
Output [5]: [cs_quantity#74, cs_list_price#75, i_brand_id#80, i_class_id#81, i_category_id#82]
Input [7]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, i_item_sk#79, i_brand_id#80, i_class_id#81, i_category_id#82]

(115) HashAggregate [codegen id : 141]
Input [5]: [cs_quantity#74, cs_list_price#75, i_brand_id#80, i_class_id#81, i_category_id#82]
Keys [3]: [i_brand_id#80, i_class_id#81, i_category_id#82]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#83, isEmpty#84, count#85]
Results [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum#86, isEmpty#87, count#88]

(116) Exchange
Input [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum#86, isEmpty#87, count#88]
Arguments: hashpartitioning(i_brand_id#80, i_class_id#81, i_category_id#82, 5), ENSURE_REQUIREMENTS, [id=#89]

(117) HashAggregate [codegen id : 142]
Input [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum#86, isEmpty#87, count#88]
Keys [3]: [i_brand_id#80, i_class_id#81, i_category_id#82]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true))#90, count(1)#91]
Results [6]: [catalog AS channel#92, i_brand_id#80, i_class_id#81, i_category_id#82, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true))#90 AS sales#93, count(1)#91 AS number_sales#94]

(118) Filter [codegen id : 142]
Input [6]: [channel#92, i_brand_id#80, i_class_id#81, i_category_id#82, sales#93, number_sales#94]
Condition : (isnotnull(sales#93) AND (cast(sales#93 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#71, [id=#72] as decimal(32,6))))

(119) Scan parquet default.web_sales
Output [4]: [ws_item_sk#95, ws_quantity#96, ws_list_price#97, ws_sold_date_sk#98]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#98), dynamicpruningexpression(ws_sold_date_sk#98 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(120) ColumnarToRow [codegen id : 143]
Input [4]: [ws_item_sk#95, ws_quantity#96, ws_list_price#97, ws_sold_date_sk#98]

(121) Filter [codegen id : 143]
Input [4]: [ws_item_sk#95, ws_quantity#96, ws_list_price#97, ws_sold_date_sk#98]
Condition : isnotnull(ws_item_sk#95)

(122) Exchange
Input [4]: [ws_item_sk#95, ws_quantity#96, ws_list_price#97, ws_sold_date_sk#98]
Arguments: hashpartitioning(ws_item_sk#95, 5), ENSURE_REQUIREMENTS, [id=#99]

(123) Sort [codegen id : 144]
Input [4]: [ws_item_sk#95, ws_quantity#96, ws_list_price#97, ws_sold_date_sk#98]
Arguments: [ws_item_sk#95 ASC NULLS FIRST], false, 0

(124) ReusedExchange [Reuses operator id: 71]
Output [1]: [ss_item_sk#48]

(125) Sort [codegen id : 175]
Input [1]: [ss_item_sk#48]
Arguments: [ss_item_sk#48 ASC NULLS FIRST], false, 0

(126) SortMergeJoin [codegen id : 212]
Left keys [1]: [ws_item_sk#95]
Right keys [1]: [ss_item_sk#48]
Join condition: None

(127) ReusedExchange [Reuses operator id: 194]
Output [1]: [d_date_sk#100]

(128) BroadcastHashJoin [codegen id : 212]
Left keys [1]: [ws_sold_date_sk#98]
Right keys [1]: [d_date_sk#100]
Join condition: None

(129) Project [codegen id : 212]
Output [3]: [ws_item_sk#95, ws_quantity#96, ws_list_price#97]
Input [5]: [ws_item_sk#95, ws_quantity#96, ws_list_price#97, ws_sold_date_sk#98, d_date_sk#100]

(130) ReusedExchange [Reuses operator id: 94]
Output [4]: [i_item_sk#101, i_brand_id#102, i_class_id#103, i_category_id#104]

(131) BroadcastHashJoin [codegen id : 212]
Left keys [1]: [ws_item_sk#95]
Right keys [1]: [i_item_sk#101]
Join condition: None

(132) Project [codegen id : 212]
Output [5]: [ws_quantity#96, ws_list_price#97, i_brand_id#102, i_class_id#103, i_category_id#104]
Input [7]: [ws_item_sk#95, ws_quantity#96, ws_list_price#97, i_item_sk#101, i_brand_id#102, i_class_id#103, i_category_id#104]

(133) HashAggregate [codegen id : 212]
Input [5]: [ws_quantity#96, ws_list_price#97, i_brand_id#102, i_class_id#103, i_category_id#104]
Keys [3]: [i_brand_id#102, i_class_id#103, i_category_id#104]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#96 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#97 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#105, isEmpty#106, count#107]
Results [6]: [i_brand_id#102, i_class_id#103, i_category_id#104, sum#108, isEmpty#109, count#110]

(134) Exchange
Input [6]: [i_brand_id#102, i_class_id#103, i_category_id#104, sum#108, isEmpty#109, count#110]
Arguments: hashpartitioning(i_brand_id#102, i_class_id#103, i_category_id#104, 5), ENSURE_REQUIREMENTS, [id=#111]

(135) HashAggregate [codegen id : 213]
Input [6]: [i_brand_id#102, i_class_id#103, i_category_id#104, sum#108, isEmpty#109, count#110]
Keys [3]: [i_brand_id#102, i_class_id#103, i_category_id#104]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#96 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#97 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#96 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#97 as decimal(12,2)))), DecimalType(18,2), true))#112, count(1)#113]
Results [6]: [web AS channel#114, i_brand_id#102, i_class_id#103, i_category_id#104, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#96 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#97 as decimal(12,2)))), DecimalType(18,2), true))#112 AS sales#115, count(1)#113 AS number_sales#116]

(136) Filter [codegen id : 213]
Input [6]: [channel#114, i_brand_id#102, i_class_id#103, i_category_id#104, sales#115, number_sales#116]
Condition : (isnotnull(sales#115) AND (cast(sales#115 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#71, [id=#72] as decimal(32,6))))

(137) Union

(138) HashAggregate [codegen id : 214]
Input [6]: [channel#68, i_brand_id#52, i_class_id#53, i_category_id#54, sales#69, number_sales#70]
Keys [4]: [channel#68, i_brand_id#52, i_class_id#53, i_category_id#54]
Functions [2]: [partial_sum(sales#69), partial_sum(number_sales#70)]
Aggregate Attributes [3]: [sum#117, isEmpty#118, sum#119]
Results [7]: [channel#68, i_brand_id#52, i_class_id#53, i_category_id#54, sum#120, isEmpty#121, sum#122]

(139) Exchange
Input [7]: [channel#68, i_brand_id#52, i_class_id#53, i_category_id#54, sum#120, isEmpty#121, sum#122]
Arguments: hashpartitioning(channel#68, i_brand_id#52, i_class_id#53, i_category_id#54, 5), ENSURE_REQUIREMENTS, [id=#123]

(140) HashAggregate [codegen id : 215]
Input [7]: [channel#68, i_brand_id#52, i_class_id#53, i_category_id#54, sum#120, isEmpty#121, sum#122]
Keys [4]: [channel#68, i_brand_id#52, i_class_id#53, i_category_id#54]
Functions [2]: [sum(sales#69), sum(number_sales#70)]
Aggregate Attributes [2]: [sum(sales#69)#124, sum(number_sales#70)#125]
Results [6]: [channel#68, i_brand_id#52, i_class_id#53, i_category_id#54, sum(sales#69)#124 AS sum_sales#126, sum(number_sales#70)#125 AS number_sales#127]

(141) ReusedExchange [Reuses operator id: 139]
Output [7]: [channel#68, i_brand_id#128, i_class_id#129, i_category_id#130, sum#131, isEmpty#132, sum#133]

(142) HashAggregate [codegen id : 430]
Input [7]: [channel#68, i_brand_id#128, i_class_id#129, i_category_id#130, sum#131, isEmpty#132, sum#133]
Keys [4]: [channel#68, i_brand_id#128, i_class_id#129, i_category_id#130]
Functions [2]: [sum(sales#69), sum(number_sales#70)]
Aggregate Attributes [2]: [sum(sales#69)#134, sum(number_sales#70)#135]
Results [5]: [channel#68, i_brand_id#128, i_class_id#129, sum(sales#69)#134 AS sum_sales#126, sum(number_sales#70)#135 AS number_sales#127]

(143) HashAggregate [codegen id : 430]
Input [5]: [channel#68, i_brand_id#128, i_class_id#129, sum_sales#126, number_sales#127]
Keys [3]: [channel#68, i_brand_id#128, i_class_id#129]
Functions [2]: [partial_sum(sum_sales#126), partial_sum(number_sales#127)]
Aggregate Attributes [3]: [sum#136, isEmpty#137, sum#138]
Results [6]: [channel#68, i_brand_id#128, i_class_id#129, sum#139, isEmpty#140, sum#141]

(144) Exchange
Input [6]: [channel#68, i_brand_id#128, i_class_id#129, sum#139, isEmpty#140, sum#141]
Arguments: hashpartitioning(channel#68, i_brand_id#128, i_class_id#129, 5), ENSURE_REQUIREMENTS, [id=#142]

(145) HashAggregate [codegen id : 431]
Input [6]: [channel#68, i_brand_id#128, i_class_id#129, sum#139, isEmpty#140, sum#141]
Keys [3]: [channel#68, i_brand_id#128, i_class_id#129]
Functions [2]: [sum(sum_sales#126), sum(number_sales#127)]
Aggregate Attributes [2]: [sum(sum_sales#126)#143, sum(number_sales#127)#144]
Results [6]: [channel#68, i_brand_id#128, i_class_id#129, null AS i_category_id#145, sum(sum_sales#126)#143 AS sum(sum_sales)#146, sum(number_sales#127)#144 AS sum(number_sales)#147]

(146) ReusedExchange [Reuses operator id: 139]
Output [7]: [channel#68, i_brand_id#148, i_class_id#149, i_category_id#150, sum#151, isEmpty#152, sum#153]

(147) HashAggregate [codegen id : 646]
Input [7]: [channel#68, i_brand_id#148, i_class_id#149, i_category_id#150, sum#151, isEmpty#152, sum#153]
Keys [4]: [channel#68, i_brand_id#148, i_class_id#149, i_category_id#150]
Functions [2]: [sum(sales#69), sum(number_sales#70)]
Aggregate Attributes [2]: [sum(sales#69)#154, sum(number_sales#70)#155]
Results [4]: [channel#68, i_brand_id#148, sum(sales#69)#154 AS sum_sales#126, sum(number_sales#70)#155 AS number_sales#127]

(148) HashAggregate [codegen id : 646]
Input [4]: [channel#68, i_brand_id#148, sum_sales#126, number_sales#127]
Keys [2]: [channel#68, i_brand_id#148]
Functions [2]: [partial_sum(sum_sales#126), partial_sum(number_sales#127)]
Aggregate Attributes [3]: [sum#156, isEmpty#157, sum#158]
Results [5]: [channel#68, i_brand_id#148, sum#159, isEmpty#160, sum#161]

(149) Exchange
Input [5]: [channel#68, i_brand_id#148, sum#159, isEmpty#160, sum#161]
Arguments: hashpartitioning(channel#68, i_brand_id#148, 5), ENSURE_REQUIREMENTS, [id=#162]

(150) HashAggregate [codegen id : 647]
Input [5]: [channel#68, i_brand_id#148, sum#159, isEmpty#160, sum#161]
Keys [2]: [channel#68, i_brand_id#148]
Functions [2]: [sum(sum_sales#126), sum(number_sales#127)]
Aggregate Attributes [2]: [sum(sum_sales#126)#163, sum(number_sales#127)#164]
Results [6]: [channel#68, i_brand_id#148, null AS i_class_id#165, null AS i_category_id#166, sum(sum_sales#126)#163 AS sum(sum_sales)#167, sum(number_sales#127)#164 AS sum(number_sales)#168]

(151) ReusedExchange [Reuses operator id: 139]
Output [7]: [channel#68, i_brand_id#169, i_class_id#170, i_category_id#171, sum#172, isEmpty#173, sum#174]

(152) HashAggregate [codegen id : 862]
Input [7]: [channel#68, i_brand_id#169, i_class_id#170, i_category_id#171, sum#172, isEmpty#173, sum#174]
Keys [4]: [channel#68, i_brand_id#169, i_class_id#170, i_category_id#171]
Functions [2]: [sum(sales#69), sum(number_sales#70)]
Aggregate Attributes [2]: [sum(sales#69)#175, sum(number_sales#70)#176]
Results [3]: [channel#68, sum(sales#69)#175 AS sum_sales#126, sum(number_sales#70)#176 AS number_sales#127]

(153) HashAggregate [codegen id : 862]
Input [3]: [channel#68, sum_sales#126, number_sales#127]
Keys [1]: [channel#68]
Functions [2]: [partial_sum(sum_sales#126), partial_sum(number_sales#127)]
Aggregate Attributes [3]: [sum#177, isEmpty#178, sum#179]
Results [4]: [channel#68, sum#180, isEmpty#181, sum#182]

(154) Exchange
Input [4]: [channel#68, sum#180, isEmpty#181, sum#182]
Arguments: hashpartitioning(channel#68, 5), ENSURE_REQUIREMENTS, [id=#183]

(155) HashAggregate [codegen id : 863]
Input [4]: [channel#68, sum#180, isEmpty#181, sum#182]
Keys [1]: [channel#68]
Functions [2]: [sum(sum_sales#126), sum(number_sales#127)]
Aggregate Attributes [2]: [sum(sum_sales#126)#184, sum(number_sales#127)#185]
Results [6]: [channel#68, null AS i_brand_id#186, null AS i_class_id#187, null AS i_category_id#188, sum(sum_sales#126)#184 AS sum(sum_sales)#189, sum(number_sales#127)#185 AS sum(number_sales)#190]

(156) ReusedExchange [Reuses operator id: 139]
Output [7]: [channel#68, i_brand_id#191, i_class_id#192, i_category_id#193, sum#194, isEmpty#195, sum#196]

(157) HashAggregate [codegen id : 1078]
Input [7]: [channel#68, i_brand_id#191, i_class_id#192, i_category_id#193, sum#194, isEmpty#195, sum#196]
Keys [4]: [channel#68, i_brand_id#191, i_class_id#192, i_category_id#193]
Functions [2]: [sum(sales#69), sum(number_sales#70)]
Aggregate Attributes [2]: [sum(sales#69)#197, sum(number_sales#70)#198]
Results [2]: [sum(sales#69)#197 AS sum_sales#126, sum(number_sales#70)#198 AS number_sales#127]

(158) HashAggregate [codegen id : 1078]
Input [2]: [sum_sales#126, number_sales#127]
Keys: []
Functions [2]: [partial_sum(sum_sales#126), partial_sum(number_sales#127)]
Aggregate Attributes [3]: [sum#199, isEmpty#200, sum#201]
Results [3]: [sum#202, isEmpty#203, sum#204]

(159) Exchange
Input [3]: [sum#202, isEmpty#203, sum#204]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#205]

(160) HashAggregate [codegen id : 1079]
Input [3]: [sum#202, isEmpty#203, sum#204]
Keys: []
Functions [2]: [sum(sum_sales#126), sum(number_sales#127)]
Aggregate Attributes [2]: [sum(sum_sales#126)#206, sum(number_sales#127)#207]
Results [6]: [null AS channel#208, null AS i_brand_id#209, null AS i_class_id#210, null AS i_category_id#211, sum(sum_sales#126)#206 AS sum(sum_sales)#212, sum(number_sales#127)#207 AS sum(number_sales)#213]

(161) Union

(162) HashAggregate [codegen id : 1080]
Input [6]: [channel#68, i_brand_id#52, i_class_id#53, i_category_id#54, sum_sales#126, number_sales#127]
Keys [6]: [channel#68, i_brand_id#52, i_class_id#53, i_category_id#54, sum_sales#126, number_sales#127]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#68, i_brand_id#52, i_class_id#53, i_category_id#54, sum_sales#126, number_sales#127]

(163) Exchange
Input [6]: [channel#68, i_brand_id#52, i_class_id#53, i_category_id#54, sum_sales#126, number_sales#127]
Arguments: hashpartitioning(channel#68, i_brand_id#52, i_class_id#53, i_category_id#54, sum_sales#126, number_sales#127, 5), ENSURE_REQUIREMENTS, [id=#214]

(164) HashAggregate [codegen id : 1081]
Input [6]: [channel#68, i_brand_id#52, i_class_id#53, i_category_id#54, sum_sales#126, number_sales#127]
Keys [6]: [channel#68, i_brand_id#52, i_class_id#53, i_category_id#54, sum_sales#126, number_sales#127]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#68, i_brand_id#52, i_class_id#53, i_category_id#54, sum_sales#126, number_sales#127]

(165) TakeOrderedAndProject
Input [6]: [channel#68, i_brand_id#52, i_class_id#53, i_category_id#54, sum_sales#126, number_sales#127]
Arguments: 100, [channel#68 ASC NULLS FIRST, i_brand_id#52 ASC NULLS FIRST, i_class_id#53 ASC NULLS FIRST, i_category_id#54 ASC NULLS FIRST], [channel#68, i_brand_id#52, i_class_id#53, i_category_id#54, sum_sales#126, number_sales#127]

===== Subqueries =====

Subquery:1 Hosting operator id = 100 Hosting Expression = Subquery scalar-subquery#71, [id=#72]
* HashAggregate (184)
+- Exchange (183)
   +- * HashAggregate (182)
      +- Union (181)
         :- * Project (170)
         :  +- * BroadcastHashJoin Inner BuildRight (169)
         :     :- * ColumnarToRow (167)
         :     :  +- Scan parquet default.store_sales (166)
         :     +- ReusedExchange (168)
         :- * Project (175)
         :  +- * BroadcastHashJoin Inner BuildRight (174)
         :     :- * ColumnarToRow (172)
         :     :  +- Scan parquet default.catalog_sales (171)
         :     +- ReusedExchange (173)
         +- * Project (180)
            +- * BroadcastHashJoin Inner BuildRight (179)
               :- * ColumnarToRow (177)
               :  +- Scan parquet default.web_sales (176)
               +- ReusedExchange (178)


(166) Scan parquet default.store_sales
Output [3]: [ss_quantity#215, ss_list_price#216, ss_sold_date_sk#217]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#217), dynamicpruningexpression(ss_sold_date_sk#217 IN dynamicpruning#13)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(167) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#215, ss_list_price#216, ss_sold_date_sk#217]

(168) ReusedExchange [Reuses operator id: 199]
Output [1]: [d_date_sk#218]

(169) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#217]
Right keys [1]: [d_date_sk#218]
Join condition: None

(170) Project [codegen id : 2]
Output [2]: [ss_quantity#215 AS quantity#219, ss_list_price#216 AS list_price#220]
Input [4]: [ss_quantity#215, ss_list_price#216, ss_sold_date_sk#217, d_date_sk#218]

(171) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#221, cs_list_price#222, cs_sold_date_sk#223]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#223), dynamicpruningexpression(cs_sold_date_sk#223 IN dynamicpruning#224)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(172) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#221, cs_list_price#222, cs_sold_date_sk#223]

(173) ReusedExchange [Reuses operator id: 189]
Output [1]: [d_date_sk#225]

(174) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#223]
Right keys [1]: [d_date_sk#225]
Join condition: None

(175) Project [codegen id : 4]
Output [2]: [cs_quantity#221 AS quantity#226, cs_list_price#222 AS list_price#227]
Input [4]: [cs_quantity#221, cs_list_price#222, cs_sold_date_sk#223, d_date_sk#225]

(176) Scan parquet default.web_sales
Output [3]: [ws_quantity#228, ws_list_price#229, ws_sold_date_sk#230]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#230), dynamicpruningexpression(ws_sold_date_sk#230 IN dynamicpruning#224)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(177) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#228, ws_list_price#229, ws_sold_date_sk#230]

(178) ReusedExchange [Reuses operator id: 189]
Output [1]: [d_date_sk#231]

(179) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#230]
Right keys [1]: [d_date_sk#231]
Join condition: None

(180) Project [codegen id : 6]
Output [2]: [ws_quantity#228 AS quantity#232, ws_list_price#229 AS list_price#233]
Input [4]: [ws_quantity#228, ws_list_price#229, ws_sold_date_sk#230, d_date_sk#231]

(181) Union

(182) HashAggregate [codegen id : 7]
Input [2]: [quantity#219, list_price#220]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#219 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#220 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#234, count#235]
Results [2]: [sum#236, count#237]

(183) Exchange
Input [2]: [sum#236, count#237]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#238]

(184) HashAggregate [codegen id : 8]
Input [2]: [sum#236, count#237]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#219 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#220 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#219 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#220 as decimal(12,2)))), DecimalType(18,2), true))#239]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#219 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#220 as decimal(12,2)))), DecimalType(18,2), true))#239 AS average_sales#240]

Subquery:2 Hosting operator id = 166 Hosting Expression = ss_sold_date_sk#217 IN dynamicpruning#13

Subquery:3 Hosting operator id = 171 Hosting Expression = cs_sold_date_sk#223 IN dynamicpruning#224
BroadcastExchange (189)
+- * Project (188)
   +- * Filter (187)
      +- * ColumnarToRow (186)
         +- Scan parquet default.date_dim (185)


(185) Scan parquet default.date_dim
Output [2]: [d_date_sk#225, d_year#241]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(186) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#225, d_year#241]

(187) Filter [codegen id : 1]
Input [2]: [d_date_sk#225, d_year#241]
Condition : (((isnotnull(d_year#241) AND (d_year#241 >= 1998)) AND (d_year#241 <= 2000)) AND isnotnull(d_date_sk#225))

(188) Project [codegen id : 1]
Output [1]: [d_date_sk#225]
Input [2]: [d_date_sk#225, d_year#241]

(189) BroadcastExchange
Input [1]: [d_date_sk#225]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#242]

Subquery:4 Hosting operator id = 176 Hosting Expression = ws_sold_date_sk#230 IN dynamicpruning#224

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (194)
+- * Project (193)
   +- * Filter (192)
      +- * ColumnarToRow (191)
         +- Scan parquet default.date_dim (190)


(190) Scan parquet default.date_dim
Output [3]: [d_date_sk#50, d_year#243, d_moy#244]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(191) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#50, d_year#243, d_moy#244]

(192) Filter [codegen id : 1]
Input [3]: [d_date_sk#50, d_year#243, d_moy#244]
Condition : ((((isnotnull(d_year#243) AND isnotnull(d_moy#244)) AND (d_year#243 = 2000)) AND (d_moy#244 = 11)) AND isnotnull(d_date_sk#50))

(193) Project [codegen id : 1]
Output [1]: [d_date_sk#50]
Input [3]: [d_date_sk#50, d_year#243, d_moy#244]

(194) BroadcastExchange
Input [1]: [d_date_sk#50]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#245]

Subquery:6 Hosting operator id = 9 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#13
BroadcastExchange (199)
+- * Project (198)
   +- * Filter (197)
      +- * ColumnarToRow (196)
         +- Scan parquet default.date_dim (195)


(195) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#246]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(196) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#246]

(197) Filter [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#246]
Condition : (((isnotnull(d_year#246) AND (d_year#246 >= 1999)) AND (d_year#246 <= 2001)) AND isnotnull(d_date_sk#14))

(198) Project [codegen id : 1]
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#246]

(199) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#247]

Subquery:7 Hosting operator id = 20 Hosting Expression = cs_sold_date_sk#21 IN dynamicpruning#13

Subquery:8 Hosting operator id = 50 Hosting Expression = ws_sold_date_sk#38 IN dynamicpruning#13

Subquery:9 Hosting operator id = 118 Hosting Expression = ReusedSubquery Subquery scalar-subquery#71, [id=#72]

Subquery:10 Hosting operator id = 101 Hosting Expression = cs_sold_date_sk#76 IN dynamicpruning#5

Subquery:11 Hosting operator id = 136 Hosting Expression = ReusedSubquery Subquery scalar-subquery#71, [id=#72]

Subquery:12 Hosting operator id = 119 Hosting Expression = ws_sold_date_sk#98 IN dynamicpruning#5


