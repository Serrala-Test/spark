== Physical Plan ==
TakeOrderedAndProject (210)
+- * HashAggregate (209)
   +- Exchange (208)
      +- * HashAggregate (207)
         +- Union (206)
            :- * HashAggregate (129)
            :  +- Exchange (128)
            :     +- * HashAggregate (127)
            :        +- Union (126)
            :           :- * Project (87)
            :           :  +- * Filter (86)
            :           :     +- * HashAggregate (85)
            :           :        +- Exchange (84)
            :           :           +- * HashAggregate (83)
            :           :              +- * Project (82)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (81)
            :           :                    :- * Project (71)
            :           :                    :  +- * BroadcastHashJoin Inner BuildRight (70)
            :           :                    :     :- SortMergeJoin LeftSemi (64)
            :           :                    :     :  :- * Sort (5)
            :           :                    :     :  :  +- Exchange (4)
            :           :                    :     :  :     +- * Filter (3)
            :           :                    :     :  :        +- * ColumnarToRow (2)
            :           :                    :     :  :           +- Scan parquet default.store_sales (1)
            :           :                    :     :  +- * Sort (63)
            :           :                    :     :     +- Exchange (62)
            :           :                    :     :        +- * Project (61)
            :           :                    :     :           +- * BroadcastHashJoin Inner BuildRight (60)
            :           :                    :     :              :- * Filter (8)
            :           :                    :     :              :  +- * ColumnarToRow (7)
            :           :                    :     :              :     +- Scan parquet default.item (6)
            :           :                    :     :              +- BroadcastExchange (59)
            :           :                    :     :                 +- * HashAggregate (58)
            :           :                    :     :                    +- Exchange (57)
            :           :                    :     :                       +- * HashAggregate (56)
            :           :                    :     :                          +- * Project (55)
            :           :                    :     :                             +- * BroadcastHashJoin Inner BuildRight (54)
            :           :                    :     :                                :- * Project (18)
            :           :                    :     :                                :  +- * BroadcastHashJoin Inner BuildRight (17)
            :           :                    :     :                                :     :- * Filter (11)
            :           :                    :     :                                :     :  +- * ColumnarToRow (10)
            :           :                    :     :                                :     :     +- Scan parquet default.store_sales (9)
            :           :                    :     :                                :     +- BroadcastExchange (16)
            :           :                    :     :                                :        +- * Project (15)
            :           :                    :     :                                :           +- * Filter (14)
            :           :                    :     :                                :              +- * ColumnarToRow (13)
            :           :                    :     :                                :                 +- Scan parquet default.date_dim (12)
            :           :                    :     :                                +- BroadcastExchange (53)
            :           :                    :     :                                   +- * BroadcastHashJoin LeftSemi BuildRight (52)
            :           :                    :     :                                      :- * BroadcastHashJoin LeftSemi BuildRight (38)
            :           :                    :     :                                      :  :- * Filter (21)
            :           :                    :     :                                      :  :  +- * ColumnarToRow (20)
            :           :                    :     :                                      :  :     +- Scan parquet default.item (19)
            :           :                    :     :                                      :  +- BroadcastExchange (37)
            :           :                    :     :                                      :     +- * HashAggregate (36)
            :           :                    :     :                                      :        +- Exchange (35)
            :           :                    :     :                                      :           +- * HashAggregate (34)
            :           :                    :     :                                      :              +- * Project (33)
            :           :                    :     :                                      :                 +- * BroadcastHashJoin Inner BuildRight (32)
            :           :                    :     :                                      :                    :- * Project (27)
            :           :                    :     :                                      :                    :  +- * BroadcastHashJoin Inner BuildRight (26)
            :           :                    :     :                                      :                    :     :- * Filter (24)
            :           :                    :     :                                      :                    :     :  +- * ColumnarToRow (23)
            :           :                    :     :                                      :                    :     :     +- Scan parquet default.catalog_sales (22)
            :           :                    :     :                                      :                    :     +- ReusedExchange (25)
            :           :                    :     :                                      :                    +- BroadcastExchange (31)
            :           :                    :     :                                      :                       +- * Filter (30)
            :           :                    :     :                                      :                          +- * ColumnarToRow (29)
            :           :                    :     :                                      :                             +- Scan parquet default.item (28)
            :           :                    :     :                                      +- BroadcastExchange (51)
            :           :                    :     :                                         +- * HashAggregate (50)
            :           :                    :     :                                            +- Exchange (49)
            :           :                    :     :                                               +- * HashAggregate (48)
            :           :                    :     :                                                  +- * Project (47)
            :           :                    :     :                                                     +- * BroadcastHashJoin Inner BuildRight (46)
            :           :                    :     :                                                        :- * Project (44)
            :           :                    :     :                                                        :  +- * BroadcastHashJoin Inner BuildRight (43)
            :           :                    :     :                                                        :     :- * Filter (41)
            :           :                    :     :                                                        :     :  +- * ColumnarToRow (40)
            :           :                    :     :                                                        :     :     +- Scan parquet default.web_sales (39)
            :           :                    :     :                                                        :     +- ReusedExchange (42)
            :           :                    :     :                                                        +- ReusedExchange (45)
            :           :                    :     +- BroadcastExchange (69)
            :           :                    :        +- * Project (68)
            :           :                    :           +- * Filter (67)
            :           :                    :              +- * ColumnarToRow (66)
            :           :                    :                 +- Scan parquet default.date_dim (65)
            :           :                    +- BroadcastExchange (80)
            :           :                       +- SortMergeJoin LeftSemi (79)
            :           :                          :- * Sort (76)
            :           :                          :  +- Exchange (75)
            :           :                          :     +- * Filter (74)
            :           :                          :        +- * ColumnarToRow (73)
            :           :                          :           +- Scan parquet default.item (72)
            :           :                          +- * Sort (78)
            :           :                             +- ReusedExchange (77)
            :           :- * Project (106)
            :           :  +- * Filter (105)
            :           :     +- * HashAggregate (104)
            :           :        +- Exchange (103)
            :           :           +- * HashAggregate (102)
            :           :              +- * Project (101)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (100)
            :           :                    :- * Project (98)
            :           :                    :  +- * BroadcastHashJoin Inner BuildRight (97)
            :           :                    :     :- SortMergeJoin LeftSemi (95)
            :           :                    :     :  :- * Sort (92)
            :           :                    :     :  :  +- Exchange (91)
            :           :                    :     :  :     +- * Filter (90)
            :           :                    :     :  :        +- * ColumnarToRow (89)
            :           :                    :     :  :           +- Scan parquet default.catalog_sales (88)
            :           :                    :     :  +- * Sort (94)
            :           :                    :     :     +- ReusedExchange (93)
            :           :                    :     +- ReusedExchange (96)
            :           :                    +- ReusedExchange (99)
            :           +- * Project (125)
            :              +- * Filter (124)
            :                 +- * HashAggregate (123)
            :                    +- Exchange (122)
            :                       +- * HashAggregate (121)
            :                          +- * Project (120)
            :                             +- * BroadcastHashJoin Inner BuildRight (119)
            :                                :- * Project (117)
            :                                :  +- * BroadcastHashJoin Inner BuildRight (116)
            :                                :     :- SortMergeJoin LeftSemi (114)
            :                                :     :  :- * Sort (111)
            :                                :     :  :  +- Exchange (110)
            :                                :     :  :     +- * Filter (109)
            :                                :     :  :        +- * ColumnarToRow (108)
            :                                :     :  :           +- Scan parquet default.web_sales (107)
            :                                :     :  +- * Sort (113)
            :                                :     :     +- ReusedExchange (112)
            :                                :     +- ReusedExchange (115)
            :                                +- ReusedExchange (118)
            :- * HashAggregate (148)
            :  +- Exchange (147)
            :     +- * HashAggregate (146)
            :        +- * HashAggregate (145)
            :           +- Exchange (144)
            :              +- * HashAggregate (143)
            :                 +- Union (142)
            :                    :- * Project (133)
            :                    :  +- * Filter (132)
            :                    :     +- * HashAggregate (131)
            :                    :        +- ReusedExchange (130)
            :                    :- * Project (137)
            :                    :  +- * Filter (136)
            :                    :     +- * HashAggregate (135)
            :                    :        +- ReusedExchange (134)
            :                    +- * Project (141)
            :                       +- * Filter (140)
            :                          +- * HashAggregate (139)
            :                             +- ReusedExchange (138)
            :- * HashAggregate (167)
            :  +- Exchange (166)
            :     +- * HashAggregate (165)
            :        +- * HashAggregate (164)
            :           +- Exchange (163)
            :              +- * HashAggregate (162)
            :                 +- Union (161)
            :                    :- * Project (152)
            :                    :  +- * Filter (151)
            :                    :     +- * HashAggregate (150)
            :                    :        +- ReusedExchange (149)
            :                    :- * Project (156)
            :                    :  +- * Filter (155)
            :                    :     +- * HashAggregate (154)
            :                    :        +- ReusedExchange (153)
            :                    +- * Project (160)
            :                       +- * Filter (159)
            :                          +- * HashAggregate (158)
            :                             +- ReusedExchange (157)
            :- * HashAggregate (186)
            :  +- Exchange (185)
            :     +- * HashAggregate (184)
            :        +- * HashAggregate (183)
            :           +- Exchange (182)
            :              +- * HashAggregate (181)
            :                 +- Union (180)
            :                    :- * Project (171)
            :                    :  +- * Filter (170)
            :                    :     +- * HashAggregate (169)
            :                    :        +- ReusedExchange (168)
            :                    :- * Project (175)
            :                    :  +- * Filter (174)
            :                    :     +- * HashAggregate (173)
            :                    :        +- ReusedExchange (172)
            :                    +- * Project (179)
            :                       +- * Filter (178)
            :                          +- * HashAggregate (177)
            :                             +- ReusedExchange (176)
            +- * HashAggregate (205)
               +- Exchange (204)
                  +- * HashAggregate (203)
                     +- * HashAggregate (202)
                        +- Exchange (201)
                           +- * HashAggregate (200)
                              +- Union (199)
                                 :- * Project (190)
                                 :  +- * Filter (189)
                                 :     +- * HashAggregate (188)
                                 :        +- ReusedExchange (187)
                                 :- * Project (194)
                                 :  +- * Filter (193)
                                 :     +- * HashAggregate (192)
                                 :        +- ReusedExchange (191)
                                 +- * Project (198)
                                    +- * Filter (197)
                                       +- * HashAggregate (196)
                                          +- ReusedExchange (195)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 15]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(8) Filter [codegen id : 15]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(9) Scan parquet default.store_sales
Output [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(10) ColumnarToRow [codegen id : 13]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]

(11) Filter [codegen id : 13]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Condition : isnotnull(ss_item_sk#11)

(12) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(13) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#14, d_year#15]

(14) Filter [codegen id : 3]
Input [2]: [d_date_sk#14, d_year#15]
Condition : (((isnotnull(d_year#15) AND (d_year#15 >= 1999)) AND (d_year#15 <= 2001)) AND isnotnull(d_date_sk#14))

(15) Project [codegen id : 3]
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#15]

(16) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(17) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_sold_date_sk#12]
Right keys [1]: [d_date_sk#14]
Join condition: None

(18) Project [codegen id : 13]
Output [1]: [ss_item_sk#11]
Input [3]: [ss_item_sk#11, ss_sold_date_sk#12, d_date_sk#14]

(19) Scan parquet default.item
Output [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(20) ColumnarToRow [codegen id : 12]
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]

(21) Filter [codegen id : 12]
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Condition : (((isnotnull(i_item_sk#17) AND isnotnull(i_brand_id#18)) AND isnotnull(i_class_id#19)) AND isnotnull(i_category_id#20))

(22) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#21, cs_sold_date_sk#22]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#22), dynamicpruningexpression(cs_sold_date_sk#22 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(23) ColumnarToRow [codegen id : 6]
Input [2]: [cs_item_sk#21, cs_sold_date_sk#22]

(24) Filter [codegen id : 6]
Input [2]: [cs_item_sk#21, cs_sold_date_sk#22]
Condition : isnotnull(cs_item_sk#21)

(25) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#23]

(26) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#22]
Right keys [1]: [d_date_sk#23]
Join condition: None

(27) Project [codegen id : 6]
Output [1]: [cs_item_sk#21]
Input [3]: [cs_item_sk#21, cs_sold_date_sk#22, d_date_sk#23]

(28) Scan parquet default.item
Output [4]: [i_item_sk#24, i_brand_id#25, i_class_id#26, i_category_id#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(29) ColumnarToRow [codegen id : 5]
Input [4]: [i_item_sk#24, i_brand_id#25, i_class_id#26, i_category_id#27]

(30) Filter [codegen id : 5]
Input [4]: [i_item_sk#24, i_brand_id#25, i_class_id#26, i_category_id#27]
Condition : isnotnull(i_item_sk#24)

(31) BroadcastExchange
Input [4]: [i_item_sk#24, i_brand_id#25, i_class_id#26, i_category_id#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28]

(32) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_item_sk#21]
Right keys [1]: [i_item_sk#24]
Join condition: None

(33) Project [codegen id : 6]
Output [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]
Input [5]: [cs_item_sk#21, i_item_sk#24, i_brand_id#25, i_class_id#26, i_category_id#27]

(34) HashAggregate [codegen id : 6]
Input [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]
Keys [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]

(35) Exchange
Input [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]
Arguments: hashpartitioning(i_brand_id#25, i_class_id#26, i_category_id#27, 5), ENSURE_REQUIREMENTS, [id=#29]

(36) HashAggregate [codegen id : 7]
Input [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]
Keys [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]

(37) BroadcastExchange
Input [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#30]

(38) BroadcastHashJoin [codegen id : 12]
Left keys [6]: [coalesce(i_brand_id#18, 0), isnull(i_brand_id#18), coalesce(i_class_id#19, 0), isnull(i_class_id#19), coalesce(i_category_id#20, 0), isnull(i_category_id#20)]
Right keys [6]: [coalesce(i_brand_id#25, 0), isnull(i_brand_id#25), coalesce(i_class_id#26, 0), isnull(i_class_id#26), coalesce(i_category_id#27, 0), isnull(i_category_id#27)]
Join condition: None

(39) Scan parquet default.web_sales
Output [2]: [ws_item_sk#31, ws_sold_date_sk#32]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#32), dynamicpruningexpression(ws_sold_date_sk#32 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(40) ColumnarToRow [codegen id : 10]
Input [2]: [ws_item_sk#31, ws_sold_date_sk#32]

(41) Filter [codegen id : 10]
Input [2]: [ws_item_sk#31, ws_sold_date_sk#32]
Condition : isnotnull(ws_item_sk#31)

(42) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#33]

(43) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_sold_date_sk#32]
Right keys [1]: [d_date_sk#33]
Join condition: None

(44) Project [codegen id : 10]
Output [1]: [ws_item_sk#31]
Input [3]: [ws_item_sk#31, ws_sold_date_sk#32, d_date_sk#33]

(45) ReusedExchange [Reuses operator id: 31]
Output [4]: [i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]

(46) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_item_sk#31]
Right keys [1]: [i_item_sk#34]
Join condition: None

(47) Project [codegen id : 10]
Output [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Input [5]: [ws_item_sk#31, i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]

(48) HashAggregate [codegen id : 10]
Input [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Keys [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]

(49) Exchange
Input [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Arguments: hashpartitioning(i_brand_id#35, i_class_id#36, i_category_id#37, 5), ENSURE_REQUIREMENTS, [id=#38]

(50) HashAggregate [codegen id : 11]
Input [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Keys [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]

(51) BroadcastExchange
Input [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#39]

(52) BroadcastHashJoin [codegen id : 12]
Left keys [6]: [coalesce(i_brand_id#18, 0), isnull(i_brand_id#18), coalesce(i_class_id#19, 0), isnull(i_class_id#19), coalesce(i_category_id#20, 0), isnull(i_category_id#20)]
Right keys [6]: [coalesce(i_brand_id#35, 0), isnull(i_brand_id#35), coalesce(i_class_id#36, 0), isnull(i_class_id#36), coalesce(i_category_id#37, 0), isnull(i_category_id#37)]
Join condition: None

(53) BroadcastExchange
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#40]

(54) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_item_sk#11]
Right keys [1]: [i_item_sk#17]
Join condition: None

(55) Project [codegen id : 13]
Output [3]: [i_brand_id#18 AS brand_id#41, i_class_id#19 AS class_id#42, i_category_id#20 AS category_id#43]
Input [5]: [ss_item_sk#11, i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]

(56) HashAggregate [codegen id : 13]
Input [3]: [brand_id#41, class_id#42, category_id#43]
Keys [3]: [brand_id#41, class_id#42, category_id#43]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#41, class_id#42, category_id#43]

(57) Exchange
Input [3]: [brand_id#41, class_id#42, category_id#43]
Arguments: hashpartitioning(brand_id#41, class_id#42, category_id#43, 5), ENSURE_REQUIREMENTS, [id=#44]

(58) HashAggregate [codegen id : 14]
Input [3]: [brand_id#41, class_id#42, category_id#43]
Keys [3]: [brand_id#41, class_id#42, category_id#43]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#41, class_id#42, category_id#43]

(59) BroadcastExchange
Input [3]: [brand_id#41, class_id#42, category_id#43]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#45]

(60) BroadcastHashJoin [codegen id : 15]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#41, class_id#42, category_id#43]
Join condition: None

(61) Project [codegen id : 15]
Output [1]: [i_item_sk#7 AS ss_item_sk#46]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#41, class_id#42, category_id#43]

(62) Exchange
Input [1]: [ss_item_sk#46]
Arguments: hashpartitioning(ss_item_sk#46, 5), ENSURE_REQUIREMENTS, [id=#47]

(63) Sort [codegen id : 16]
Input [1]: [ss_item_sk#46]
Arguments: [ss_item_sk#46 ASC NULLS FIRST], false, 0

(64) SortMergeJoin
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#46]
Join condition: None

(65) Scan parquet default.date_dim
Output [3]: [d_date_sk#48, d_year#49, d_moy#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(66) ColumnarToRow [codegen id : 17]
Input [3]: [d_date_sk#48, d_year#49, d_moy#50]

(67) Filter [codegen id : 17]
Input [3]: [d_date_sk#48, d_year#49, d_moy#50]
Condition : ((((isnotnull(d_year#49) AND isnotnull(d_moy#50)) AND (d_year#49 = 2000)) AND (d_moy#50 = 11)) AND isnotnull(d_date_sk#48))

(68) Project [codegen id : 17]
Output [1]: [d_date_sk#48]
Input [3]: [d_date_sk#48, d_year#49, d_moy#50]

(69) BroadcastExchange
Input [1]: [d_date_sk#48]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#51]

(70) BroadcastHashJoin [codegen id : 34]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#48]
Join condition: None

(71) Project [codegen id : 34]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#48]

(72) Scan parquet default.item
Output [4]: [i_item_sk#52, i_brand_id#53, i_class_id#54, i_category_id#55]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(73) ColumnarToRow [codegen id : 18]
Input [4]: [i_item_sk#52, i_brand_id#53, i_class_id#54, i_category_id#55]

(74) Filter [codegen id : 18]
Input [4]: [i_item_sk#52, i_brand_id#53, i_class_id#54, i_category_id#55]
Condition : isnotnull(i_item_sk#52)

(75) Exchange
Input [4]: [i_item_sk#52, i_brand_id#53, i_class_id#54, i_category_id#55]
Arguments: hashpartitioning(i_item_sk#52, 5), ENSURE_REQUIREMENTS, [id=#56]

(76) Sort [codegen id : 19]
Input [4]: [i_item_sk#52, i_brand_id#53, i_class_id#54, i_category_id#55]
Arguments: [i_item_sk#52 ASC NULLS FIRST], false, 0

(77) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#46]

(78) Sort [codegen id : 33]
Input [1]: [ss_item_sk#46]
Arguments: [ss_item_sk#46 ASC NULLS FIRST], false, 0

(79) SortMergeJoin
Left keys [1]: [i_item_sk#52]
Right keys [1]: [ss_item_sk#46]
Join condition: None

(80) BroadcastExchange
Input [4]: [i_item_sk#52, i_brand_id#53, i_class_id#54, i_category_id#55]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#57]

(81) BroadcastHashJoin [codegen id : 34]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#52]
Join condition: None

(82) Project [codegen id : 34]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#53, i_class_id#54, i_category_id#55]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#52, i_brand_id#53, i_class_id#54, i_category_id#55]

(83) HashAggregate [codegen id : 34]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#53, i_class_id#54, i_category_id#55]
Keys [3]: [i_brand_id#53, i_class_id#54, i_category_id#55]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#58, isEmpty#59, count#60]
Results [6]: [i_brand_id#53, i_class_id#54, i_category_id#55, sum#61, isEmpty#62, count#63]

(84) Exchange
Input [6]: [i_brand_id#53, i_class_id#54, i_category_id#55, sum#61, isEmpty#62, count#63]
Arguments: hashpartitioning(i_brand_id#53, i_class_id#54, i_category_id#55, 5), ENSURE_REQUIREMENTS, [id=#64]

(85) HashAggregate [codegen id : 35]
Input [6]: [i_brand_id#53, i_class_id#54, i_category_id#55, sum#61, isEmpty#62, count#63]
Keys [3]: [i_brand_id#53, i_class_id#54, i_category_id#55]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#65, count(1)#66]
Results [6]: [i_brand_id#53, i_class_id#54, i_category_id#55, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#65 AS sales#67, count(1)#66 AS number_sales#68, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#65 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#69]

(86) Filter [codegen id : 35]
Input [6]: [i_brand_id#53, i_class_id#54, i_category_id#55, sales#67, number_sales#68, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#69]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#69) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#69 as decimal(32,6)) > cast(Subquery scalar-subquery#70, [id=#71] as decimal(32,6))))

(87) Project [codegen id : 35]
Output [6]: [store AS channel#72, i_brand_id#53, i_class_id#54, i_category_id#55, sales#67, number_sales#68]
Input [6]: [i_brand_id#53, i_class_id#54, i_category_id#55, sales#67, number_sales#68, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#69]

(88) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#76), dynamicpruningexpression(cs_sold_date_sk#76 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(89) ColumnarToRow [codegen id : 36]
Input [4]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76]

(90) Filter [codegen id : 36]
Input [4]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76]
Condition : isnotnull(cs_item_sk#73)

(91) Exchange
Input [4]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76]
Arguments: hashpartitioning(cs_item_sk#73, 5), ENSURE_REQUIREMENTS, [id=#77]

(92) Sort [codegen id : 37]
Input [4]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76]
Arguments: [cs_item_sk#73 ASC NULLS FIRST], false, 0

(93) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#46]

(94) Sort [codegen id : 51]
Input [1]: [ss_item_sk#46]
Arguments: [ss_item_sk#46 ASC NULLS FIRST], false, 0

(95) SortMergeJoin
Left keys [1]: [cs_item_sk#73]
Right keys [1]: [ss_item_sk#46]
Join condition: None

(96) ReusedExchange [Reuses operator id: 69]
Output [1]: [d_date_sk#78]

(97) BroadcastHashJoin [codegen id : 69]
Left keys [1]: [cs_sold_date_sk#76]
Right keys [1]: [d_date_sk#78]
Join condition: None

(98) Project [codegen id : 69]
Output [3]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75]
Input [5]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76, d_date_sk#78]

(99) ReusedExchange [Reuses operator id: 80]
Output [4]: [i_item_sk#79, i_brand_id#80, i_class_id#81, i_category_id#82]

(100) BroadcastHashJoin [codegen id : 69]
Left keys [1]: [cs_item_sk#73]
Right keys [1]: [i_item_sk#79]
Join condition: None

(101) Project [codegen id : 69]
Output [5]: [cs_quantity#74, cs_list_price#75, i_brand_id#80, i_class_id#81, i_category_id#82]
Input [7]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, i_item_sk#79, i_brand_id#80, i_class_id#81, i_category_id#82]

(102) HashAggregate [codegen id : 69]
Input [5]: [cs_quantity#74, cs_list_price#75, i_brand_id#80, i_class_id#81, i_category_id#82]
Keys [3]: [i_brand_id#80, i_class_id#81, i_category_id#82]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#83, isEmpty#84, count#85]
Results [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum#86, isEmpty#87, count#88]

(103) Exchange
Input [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum#86, isEmpty#87, count#88]
Arguments: hashpartitioning(i_brand_id#80, i_class_id#81, i_category_id#82, 5), ENSURE_REQUIREMENTS, [id=#89]

(104) HashAggregate [codegen id : 70]
Input [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum#86, isEmpty#87, count#88]
Keys [3]: [i_brand_id#80, i_class_id#81, i_category_id#82]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true))#90, count(1)#91]
Results [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true))#90 AS sales#92, count(1)#91 AS number_sales#93, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true))#90 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true))#94]

(105) Filter [codegen id : 70]
Input [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sales#92, number_sales#93, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true))#94]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true))#94) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true))#94 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#70, [id=#71] as decimal(32,6))))

(106) Project [codegen id : 70]
Output [6]: [catalog AS channel#95, i_brand_id#80, i_class_id#81, i_category_id#82, sales#92, number_sales#93]
Input [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sales#92, number_sales#93, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true))#94]

(107) Scan parquet default.web_sales
Output [4]: [ws_item_sk#96, ws_quantity#97, ws_list_price#98, ws_sold_date_sk#99]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#99), dynamicpruningexpression(ws_sold_date_sk#99 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(108) ColumnarToRow [codegen id : 71]
Input [4]: [ws_item_sk#96, ws_quantity#97, ws_list_price#98, ws_sold_date_sk#99]

(109) Filter [codegen id : 71]
Input [4]: [ws_item_sk#96, ws_quantity#97, ws_list_price#98, ws_sold_date_sk#99]
Condition : isnotnull(ws_item_sk#96)

(110) Exchange
Input [4]: [ws_item_sk#96, ws_quantity#97, ws_list_price#98, ws_sold_date_sk#99]
Arguments: hashpartitioning(ws_item_sk#96, 5), ENSURE_REQUIREMENTS, [id=#100]

(111) Sort [codegen id : 72]
Input [4]: [ws_item_sk#96, ws_quantity#97, ws_list_price#98, ws_sold_date_sk#99]
Arguments: [ws_item_sk#96 ASC NULLS FIRST], false, 0

(112) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#46]

(113) Sort [codegen id : 86]
Input [1]: [ss_item_sk#46]
Arguments: [ss_item_sk#46 ASC NULLS FIRST], false, 0

(114) SortMergeJoin
Left keys [1]: [ws_item_sk#96]
Right keys [1]: [ss_item_sk#46]
Join condition: None

(115) ReusedExchange [Reuses operator id: 69]
Output [1]: [d_date_sk#101]

(116) BroadcastHashJoin [codegen id : 104]
Left keys [1]: [ws_sold_date_sk#99]
Right keys [1]: [d_date_sk#101]
Join condition: None

(117) Project [codegen id : 104]
Output [3]: [ws_item_sk#96, ws_quantity#97, ws_list_price#98]
Input [5]: [ws_item_sk#96, ws_quantity#97, ws_list_price#98, ws_sold_date_sk#99, d_date_sk#101]

(118) ReusedExchange [Reuses operator id: 80]
Output [4]: [i_item_sk#102, i_brand_id#103, i_class_id#104, i_category_id#105]

(119) BroadcastHashJoin [codegen id : 104]
Left keys [1]: [ws_item_sk#96]
Right keys [1]: [i_item_sk#102]
Join condition: None

(120) Project [codegen id : 104]
Output [5]: [ws_quantity#97, ws_list_price#98, i_brand_id#103, i_class_id#104, i_category_id#105]
Input [7]: [ws_item_sk#96, ws_quantity#97, ws_list_price#98, i_item_sk#102, i_brand_id#103, i_class_id#104, i_category_id#105]

(121) HashAggregate [codegen id : 104]
Input [5]: [ws_quantity#97, ws_list_price#98, i_brand_id#103, i_class_id#104, i_category_id#105]
Keys [3]: [i_brand_id#103, i_class_id#104, i_category_id#105]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#97 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#98 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#106, isEmpty#107, count#108]
Results [6]: [i_brand_id#103, i_class_id#104, i_category_id#105, sum#109, isEmpty#110, count#111]

(122) Exchange
Input [6]: [i_brand_id#103, i_class_id#104, i_category_id#105, sum#109, isEmpty#110, count#111]
Arguments: hashpartitioning(i_brand_id#103, i_class_id#104, i_category_id#105, 5), ENSURE_REQUIREMENTS, [id=#112]

(123) HashAggregate [codegen id : 105]
Input [6]: [i_brand_id#103, i_class_id#104, i_category_id#105, sum#109, isEmpty#110, count#111]
Keys [3]: [i_brand_id#103, i_class_id#104, i_category_id#105]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#97 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#98 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#97 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#98 as decimal(12,2)))), DecimalType(18,2), true))#113, count(1)#114]
Results [6]: [i_brand_id#103, i_class_id#104, i_category_id#105, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#97 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#98 as decimal(12,2)))), DecimalType(18,2), true))#113 AS sales#115, count(1)#114 AS number_sales#116, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#97 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#98 as decimal(12,2)))), DecimalType(18,2), true))#113 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#97 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#98 as decimal(12,2)))), DecimalType(18,2), true))#117]

(124) Filter [codegen id : 105]
Input [6]: [i_brand_id#103, i_class_id#104, i_category_id#105, sales#115, number_sales#116, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#97 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#98 as decimal(12,2)))), DecimalType(18,2), true))#117]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#97 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#98 as decimal(12,2)))), DecimalType(18,2), true))#117) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#97 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#98 as decimal(12,2)))), DecimalType(18,2), true))#117 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#70, [id=#71] as decimal(32,6))))

(125) Project [codegen id : 105]
Output [6]: [web AS channel#118, i_brand_id#103, i_class_id#104, i_category_id#105, sales#115, number_sales#116]
Input [6]: [i_brand_id#103, i_class_id#104, i_category_id#105, sales#115, number_sales#116, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#97 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#98 as decimal(12,2)))), DecimalType(18,2), true))#117]

(126) Union

(127) HashAggregate [codegen id : 106]
Input [6]: [channel#72, i_brand_id#53, i_class_id#54, i_category_id#55, sales#67, number_sales#68]
Keys [4]: [channel#72, i_brand_id#53, i_class_id#54, i_category_id#55]
Functions [2]: [partial_sum(sales#67), partial_sum(number_sales#68)]
Aggregate Attributes [3]: [sum#119, isEmpty#120, sum#121]
Results [7]: [channel#72, i_brand_id#53, i_class_id#54, i_category_id#55, sum#122, isEmpty#123, sum#124]

(128) Exchange
Input [7]: [channel#72, i_brand_id#53, i_class_id#54, i_category_id#55, sum#122, isEmpty#123, sum#124]
Arguments: hashpartitioning(channel#72, i_brand_id#53, i_class_id#54, i_category_id#55, 5), ENSURE_REQUIREMENTS, [id=#125]

(129) HashAggregate [codegen id : 107]
Input [7]: [channel#72, i_brand_id#53, i_class_id#54, i_category_id#55, sum#122, isEmpty#123, sum#124]
Keys [4]: [channel#72, i_brand_id#53, i_class_id#54, i_category_id#55]
Functions [2]: [sum(sales#67), sum(number_sales#68)]
Aggregate Attributes [2]: [sum(sales#67)#126, sum(number_sales#68)#127]
Results [6]: [channel#72, i_brand_id#53, i_class_id#54, i_category_id#55, sum(sales#67)#126 AS sum_sales#128, sum(number_sales#68)#127 AS number_sales#129]

(130) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#130, i_class_id#131, i_category_id#132, sum#133, isEmpty#134, count#135]

(131) HashAggregate [codegen id : 142]
Input [6]: [i_brand_id#130, i_class_id#131, i_category_id#132, sum#133, isEmpty#134, count#135]
Keys [3]: [i_brand_id#130, i_class_id#131, i_category_id#132]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#136 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#137 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#136 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#137 as decimal(12,2)))), DecimalType(18,2), true))#138, count(1)#139]
Results [6]: [i_brand_id#130, i_class_id#131, i_category_id#132, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#136 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#137 as decimal(12,2)))), DecimalType(18,2), true))#138 AS sales#67, count(1)#139 AS number_sales#68, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#136 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#137 as decimal(12,2)))), DecimalType(18,2), true))#138 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#136 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#137 as decimal(12,2)))), DecimalType(18,2), true))#140]

(132) Filter [codegen id : 142]
Input [6]: [i_brand_id#130, i_class_id#131, i_category_id#132, sales#67, number_sales#68, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#136 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#137 as decimal(12,2)))), DecimalType(18,2), true))#140]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#136 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#137 as decimal(12,2)))), DecimalType(18,2), true))#140) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#136 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#137 as decimal(12,2)))), DecimalType(18,2), true))#140 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#70, [id=#71] as decimal(32,6))))

(133) Project [codegen id : 142]
Output [6]: [store AS channel#72, i_brand_id#130, i_class_id#131, i_category_id#132, sales#67, number_sales#68]
Input [6]: [i_brand_id#130, i_class_id#131, i_category_id#132, sales#67, number_sales#68, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#136 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#137 as decimal(12,2)))), DecimalType(18,2), true))#140]

(134) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#141, i_class_id#142, i_category_id#143, sum#144, isEmpty#145, count#146]

(135) HashAggregate [codegen id : 177]
Input [6]: [i_brand_id#141, i_class_id#142, i_category_id#143, sum#144, isEmpty#145, count#146]
Keys [3]: [i_brand_id#141, i_class_id#142, i_category_id#143]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#147 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#148 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#147 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#148 as decimal(12,2)))), DecimalType(18,2), true))#149, count(1)#150]
Results [6]: [i_brand_id#141, i_class_id#142, i_category_id#143, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#147 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#148 as decimal(12,2)))), DecimalType(18,2), true))#149 AS sales#92, count(1)#150 AS number_sales#93, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#147 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#148 as decimal(12,2)))), DecimalType(18,2), true))#149 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#147 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#148 as decimal(12,2)))), DecimalType(18,2), true))#151]

(136) Filter [codegen id : 177]
Input [6]: [i_brand_id#141, i_class_id#142, i_category_id#143, sales#92, number_sales#93, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#147 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#148 as decimal(12,2)))), DecimalType(18,2), true))#151]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#147 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#148 as decimal(12,2)))), DecimalType(18,2), true))#151) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#147 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#148 as decimal(12,2)))), DecimalType(18,2), true))#151 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#70, [id=#71] as decimal(32,6))))

(137) Project [codegen id : 177]
Output [6]: [catalog AS channel#95, i_brand_id#141, i_class_id#142, i_category_id#143, sales#92, number_sales#93]
Input [6]: [i_brand_id#141, i_class_id#142, i_category_id#143, sales#92, number_sales#93, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#147 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#148 as decimal(12,2)))), DecimalType(18,2), true))#151]

(138) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#152, i_class_id#153, i_category_id#154, sum#155, isEmpty#156, count#157]

(139) HashAggregate [codegen id : 212]
Input [6]: [i_brand_id#152, i_class_id#153, i_category_id#154, sum#155, isEmpty#156, count#157]
Keys [3]: [i_brand_id#152, i_class_id#153, i_category_id#154]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#158 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#159 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#158 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#159 as decimal(12,2)))), DecimalType(18,2), true))#160, count(1)#161]
Results [6]: [i_brand_id#152, i_class_id#153, i_category_id#154, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#158 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#159 as decimal(12,2)))), DecimalType(18,2), true))#160 AS sales#115, count(1)#161 AS number_sales#116, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#158 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#159 as decimal(12,2)))), DecimalType(18,2), true))#160 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#158 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#159 as decimal(12,2)))), DecimalType(18,2), true))#162]

(140) Filter [codegen id : 212]
Input [6]: [i_brand_id#152, i_class_id#153, i_category_id#154, sales#115, number_sales#116, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#158 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#159 as decimal(12,2)))), DecimalType(18,2), true))#162]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#158 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#159 as decimal(12,2)))), DecimalType(18,2), true))#162) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#158 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#159 as decimal(12,2)))), DecimalType(18,2), true))#162 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#70, [id=#71] as decimal(32,6))))

(141) Project [codegen id : 212]
Output [6]: [web AS channel#118, i_brand_id#152, i_class_id#153, i_category_id#154, sales#115, number_sales#116]
Input [6]: [i_brand_id#152, i_class_id#153, i_category_id#154, sales#115, number_sales#116, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#158 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#159 as decimal(12,2)))), DecimalType(18,2), true))#162]

(142) Union

(143) HashAggregate [codegen id : 213]
Input [6]: [channel#72, i_brand_id#130, i_class_id#131, i_category_id#132, sales#67, number_sales#68]
Keys [4]: [channel#72, i_brand_id#130, i_class_id#131, i_category_id#132]
Functions [2]: [partial_sum(sales#67), partial_sum(number_sales#68)]
Aggregate Attributes [3]: [sum#163, isEmpty#164, sum#165]
Results [7]: [channel#72, i_brand_id#130, i_class_id#131, i_category_id#132, sum#166, isEmpty#167, sum#168]

(144) Exchange
Input [7]: [channel#72, i_brand_id#130, i_class_id#131, i_category_id#132, sum#166, isEmpty#167, sum#168]
Arguments: hashpartitioning(channel#72, i_brand_id#130, i_class_id#131, i_category_id#132, 5), ENSURE_REQUIREMENTS, [id=#169]

(145) HashAggregate [codegen id : 214]
Input [7]: [channel#72, i_brand_id#130, i_class_id#131, i_category_id#132, sum#166, isEmpty#167, sum#168]
Keys [4]: [channel#72, i_brand_id#130, i_class_id#131, i_category_id#132]
Functions [2]: [sum(sales#67), sum(number_sales#68)]
Aggregate Attributes [2]: [sum(sales#67)#170, sum(number_sales#68)#171]
Results [5]: [channel#72, i_brand_id#130, i_class_id#131, sum(sales#67)#170 AS sum_sales#128, sum(number_sales#68)#171 AS number_sales#129]

(146) HashAggregate [codegen id : 214]
Input [5]: [channel#72, i_brand_id#130, i_class_id#131, sum_sales#128, number_sales#129]
Keys [3]: [channel#72, i_brand_id#130, i_class_id#131]
Functions [2]: [partial_sum(sum_sales#128), partial_sum(number_sales#129)]
Aggregate Attributes [3]: [sum#172, isEmpty#173, sum#174]
Results [6]: [channel#72, i_brand_id#130, i_class_id#131, sum#175, isEmpty#176, sum#177]

(147) Exchange
Input [6]: [channel#72, i_brand_id#130, i_class_id#131, sum#175, isEmpty#176, sum#177]
Arguments: hashpartitioning(channel#72, i_brand_id#130, i_class_id#131, 5), ENSURE_REQUIREMENTS, [id=#178]

(148) HashAggregate [codegen id : 215]
Input [6]: [channel#72, i_brand_id#130, i_class_id#131, sum#175, isEmpty#176, sum#177]
Keys [3]: [channel#72, i_brand_id#130, i_class_id#131]
Functions [2]: [sum(sum_sales#128), sum(number_sales#129)]
Aggregate Attributes [2]: [sum(sum_sales#128)#179, sum(number_sales#129)#180]
Results [6]: [channel#72, i_brand_id#130, i_class_id#131, null AS i_category_id#181, sum(sum_sales#128)#179 AS sum(sum_sales)#182, sum(number_sales#129)#180 AS sum(number_sales)#183]

(149) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#184, i_class_id#185, i_category_id#186, sum#187, isEmpty#188, count#189]

(150) HashAggregate [codegen id : 250]
Input [6]: [i_brand_id#184, i_class_id#185, i_category_id#186, sum#187, isEmpty#188, count#189]
Keys [3]: [i_brand_id#184, i_class_id#185, i_category_id#186]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#190 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#191 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#190 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#191 as decimal(12,2)))), DecimalType(18,2), true))#192, count(1)#193]
Results [6]: [i_brand_id#184, i_class_id#185, i_category_id#186, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#190 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#191 as decimal(12,2)))), DecimalType(18,2), true))#192 AS sales#67, count(1)#193 AS number_sales#68, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#190 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#191 as decimal(12,2)))), DecimalType(18,2), true))#192 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#190 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#191 as decimal(12,2)))), DecimalType(18,2), true))#194]

(151) Filter [codegen id : 250]
Input [6]: [i_brand_id#184, i_class_id#185, i_category_id#186, sales#67, number_sales#68, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#190 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#191 as decimal(12,2)))), DecimalType(18,2), true))#194]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#190 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#191 as decimal(12,2)))), DecimalType(18,2), true))#194) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#190 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#191 as decimal(12,2)))), DecimalType(18,2), true))#194 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#70, [id=#71] as decimal(32,6))))

(152) Project [codegen id : 250]
Output [6]: [store AS channel#72, i_brand_id#184, i_class_id#185, i_category_id#186, sales#67, number_sales#68]
Input [6]: [i_brand_id#184, i_class_id#185, i_category_id#186, sales#67, number_sales#68, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#190 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#191 as decimal(12,2)))), DecimalType(18,2), true))#194]

(153) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#195, i_class_id#196, i_category_id#197, sum#198, isEmpty#199, count#200]

(154) HashAggregate [codegen id : 285]
Input [6]: [i_brand_id#195, i_class_id#196, i_category_id#197, sum#198, isEmpty#199, count#200]
Keys [3]: [i_brand_id#195, i_class_id#196, i_category_id#197]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#201 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#202 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#201 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#202 as decimal(12,2)))), DecimalType(18,2), true))#203, count(1)#204]
Results [6]: [i_brand_id#195, i_class_id#196, i_category_id#197, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#201 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#202 as decimal(12,2)))), DecimalType(18,2), true))#203 AS sales#92, count(1)#204 AS number_sales#93, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#201 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#202 as decimal(12,2)))), DecimalType(18,2), true))#203 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#201 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#202 as decimal(12,2)))), DecimalType(18,2), true))#205]

(155) Filter [codegen id : 285]
Input [6]: [i_brand_id#195, i_class_id#196, i_category_id#197, sales#92, number_sales#93, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#201 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#202 as decimal(12,2)))), DecimalType(18,2), true))#205]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#201 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#202 as decimal(12,2)))), DecimalType(18,2), true))#205) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#201 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#202 as decimal(12,2)))), DecimalType(18,2), true))#205 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#70, [id=#71] as decimal(32,6))))

(156) Project [codegen id : 285]
Output [6]: [catalog AS channel#95, i_brand_id#195, i_class_id#196, i_category_id#197, sales#92, number_sales#93]
Input [6]: [i_brand_id#195, i_class_id#196, i_category_id#197, sales#92, number_sales#93, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#201 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#202 as decimal(12,2)))), DecimalType(18,2), true))#205]

(157) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#206, i_class_id#207, i_category_id#208, sum#209, isEmpty#210, count#211]

(158) HashAggregate [codegen id : 320]
Input [6]: [i_brand_id#206, i_class_id#207, i_category_id#208, sum#209, isEmpty#210, count#211]
Keys [3]: [i_brand_id#206, i_class_id#207, i_category_id#208]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#212 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#213 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#212 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#213 as decimal(12,2)))), DecimalType(18,2), true))#214, count(1)#215]
Results [6]: [i_brand_id#206, i_class_id#207, i_category_id#208, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#212 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#213 as decimal(12,2)))), DecimalType(18,2), true))#214 AS sales#115, count(1)#215 AS number_sales#116, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#212 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#213 as decimal(12,2)))), DecimalType(18,2), true))#214 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#212 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#213 as decimal(12,2)))), DecimalType(18,2), true))#216]

(159) Filter [codegen id : 320]
Input [6]: [i_brand_id#206, i_class_id#207, i_category_id#208, sales#115, number_sales#116, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#212 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#213 as decimal(12,2)))), DecimalType(18,2), true))#216]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#212 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#213 as decimal(12,2)))), DecimalType(18,2), true))#216) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#212 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#213 as decimal(12,2)))), DecimalType(18,2), true))#216 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#70, [id=#71] as decimal(32,6))))

(160) Project [codegen id : 320]
Output [6]: [web AS channel#118, i_brand_id#206, i_class_id#207, i_category_id#208, sales#115, number_sales#116]
Input [6]: [i_brand_id#206, i_class_id#207, i_category_id#208, sales#115, number_sales#116, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#212 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#213 as decimal(12,2)))), DecimalType(18,2), true))#216]

(161) Union

(162) HashAggregate [codegen id : 321]
Input [6]: [channel#72, i_brand_id#184, i_class_id#185, i_category_id#186, sales#67, number_sales#68]
Keys [4]: [channel#72, i_brand_id#184, i_class_id#185, i_category_id#186]
Functions [2]: [partial_sum(sales#67), partial_sum(number_sales#68)]
Aggregate Attributes [3]: [sum#217, isEmpty#218, sum#219]
Results [7]: [channel#72, i_brand_id#184, i_class_id#185, i_category_id#186, sum#220, isEmpty#221, sum#222]

(163) Exchange
Input [7]: [channel#72, i_brand_id#184, i_class_id#185, i_category_id#186, sum#220, isEmpty#221, sum#222]
Arguments: hashpartitioning(channel#72, i_brand_id#184, i_class_id#185, i_category_id#186, 5), ENSURE_REQUIREMENTS, [id=#223]

(164) HashAggregate [codegen id : 322]
Input [7]: [channel#72, i_brand_id#184, i_class_id#185, i_category_id#186, sum#220, isEmpty#221, sum#222]
Keys [4]: [channel#72, i_brand_id#184, i_class_id#185, i_category_id#186]
Functions [2]: [sum(sales#67), sum(number_sales#68)]
Aggregate Attributes [2]: [sum(sales#67)#224, sum(number_sales#68)#225]
Results [4]: [channel#72, i_brand_id#184, sum(sales#67)#224 AS sum_sales#128, sum(number_sales#68)#225 AS number_sales#129]

(165) HashAggregate [codegen id : 322]
Input [4]: [channel#72, i_brand_id#184, sum_sales#128, number_sales#129]
Keys [2]: [channel#72, i_brand_id#184]
Functions [2]: [partial_sum(sum_sales#128), partial_sum(number_sales#129)]
Aggregate Attributes [3]: [sum#226, isEmpty#227, sum#228]
Results [5]: [channel#72, i_brand_id#184, sum#229, isEmpty#230, sum#231]

(166) Exchange
Input [5]: [channel#72, i_brand_id#184, sum#229, isEmpty#230, sum#231]
Arguments: hashpartitioning(channel#72, i_brand_id#184, 5), ENSURE_REQUIREMENTS, [id=#232]

(167) HashAggregate [codegen id : 323]
Input [5]: [channel#72, i_brand_id#184, sum#229, isEmpty#230, sum#231]
Keys [2]: [channel#72, i_brand_id#184]
Functions [2]: [sum(sum_sales#128), sum(number_sales#129)]
Aggregate Attributes [2]: [sum(sum_sales#128)#233, sum(number_sales#129)#234]
Results [6]: [channel#72, i_brand_id#184, null AS i_class_id#235, null AS i_category_id#236, sum(sum_sales#128)#233 AS sum(sum_sales)#237, sum(number_sales#129)#234 AS sum(number_sales)#238]

(168) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#239, i_class_id#240, i_category_id#241, sum#242, isEmpty#243, count#244]

(169) HashAggregate [codegen id : 358]
Input [6]: [i_brand_id#239, i_class_id#240, i_category_id#241, sum#242, isEmpty#243, count#244]
Keys [3]: [i_brand_id#239, i_class_id#240, i_category_id#241]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#245 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#246 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#245 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#246 as decimal(12,2)))), DecimalType(18,2), true))#247, count(1)#248]
Results [6]: [i_brand_id#239, i_class_id#240, i_category_id#241, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#245 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#246 as decimal(12,2)))), DecimalType(18,2), true))#247 AS sales#67, count(1)#248 AS number_sales#68, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#245 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#246 as decimal(12,2)))), DecimalType(18,2), true))#247 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#245 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#246 as decimal(12,2)))), DecimalType(18,2), true))#249]

(170) Filter [codegen id : 358]
Input [6]: [i_brand_id#239, i_class_id#240, i_category_id#241, sales#67, number_sales#68, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#245 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#246 as decimal(12,2)))), DecimalType(18,2), true))#249]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#245 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#246 as decimal(12,2)))), DecimalType(18,2), true))#249) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#245 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#246 as decimal(12,2)))), DecimalType(18,2), true))#249 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#70, [id=#71] as decimal(32,6))))

(171) Project [codegen id : 358]
Output [6]: [store AS channel#72, i_brand_id#239, i_class_id#240, i_category_id#241, sales#67, number_sales#68]
Input [6]: [i_brand_id#239, i_class_id#240, i_category_id#241, sales#67, number_sales#68, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#245 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#246 as decimal(12,2)))), DecimalType(18,2), true))#249]

(172) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#250, i_class_id#251, i_category_id#252, sum#253, isEmpty#254, count#255]

(173) HashAggregate [codegen id : 393]
Input [6]: [i_brand_id#250, i_class_id#251, i_category_id#252, sum#253, isEmpty#254, count#255]
Keys [3]: [i_brand_id#250, i_class_id#251, i_category_id#252]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#256 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#257 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#256 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#257 as decimal(12,2)))), DecimalType(18,2), true))#258, count(1)#259]
Results [6]: [i_brand_id#250, i_class_id#251, i_category_id#252, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#256 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#257 as decimal(12,2)))), DecimalType(18,2), true))#258 AS sales#92, count(1)#259 AS number_sales#93, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#256 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#257 as decimal(12,2)))), DecimalType(18,2), true))#258 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#256 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#257 as decimal(12,2)))), DecimalType(18,2), true))#260]

(174) Filter [codegen id : 393]
Input [6]: [i_brand_id#250, i_class_id#251, i_category_id#252, sales#92, number_sales#93, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#256 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#257 as decimal(12,2)))), DecimalType(18,2), true))#260]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#256 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#257 as decimal(12,2)))), DecimalType(18,2), true))#260) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#256 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#257 as decimal(12,2)))), DecimalType(18,2), true))#260 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#70, [id=#71] as decimal(32,6))))

(175) Project [codegen id : 393]
Output [6]: [catalog AS channel#95, i_brand_id#250, i_class_id#251, i_category_id#252, sales#92, number_sales#93]
Input [6]: [i_brand_id#250, i_class_id#251, i_category_id#252, sales#92, number_sales#93, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#256 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#257 as decimal(12,2)))), DecimalType(18,2), true))#260]

(176) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#261, i_class_id#262, i_category_id#263, sum#264, isEmpty#265, count#266]

(177) HashAggregate [codegen id : 428]
Input [6]: [i_brand_id#261, i_class_id#262, i_category_id#263, sum#264, isEmpty#265, count#266]
Keys [3]: [i_brand_id#261, i_class_id#262, i_category_id#263]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#267 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#268 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#267 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#268 as decimal(12,2)))), DecimalType(18,2), true))#269, count(1)#270]
Results [6]: [i_brand_id#261, i_class_id#262, i_category_id#263, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#267 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#268 as decimal(12,2)))), DecimalType(18,2), true))#269 AS sales#115, count(1)#270 AS number_sales#116, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#267 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#268 as decimal(12,2)))), DecimalType(18,2), true))#269 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#267 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#268 as decimal(12,2)))), DecimalType(18,2), true))#271]

(178) Filter [codegen id : 428]
Input [6]: [i_brand_id#261, i_class_id#262, i_category_id#263, sales#115, number_sales#116, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#267 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#268 as decimal(12,2)))), DecimalType(18,2), true))#271]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#267 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#268 as decimal(12,2)))), DecimalType(18,2), true))#271) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#267 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#268 as decimal(12,2)))), DecimalType(18,2), true))#271 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#70, [id=#71] as decimal(32,6))))

(179) Project [codegen id : 428]
Output [6]: [web AS channel#118, i_brand_id#261, i_class_id#262, i_category_id#263, sales#115, number_sales#116]
Input [6]: [i_brand_id#261, i_class_id#262, i_category_id#263, sales#115, number_sales#116, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#267 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#268 as decimal(12,2)))), DecimalType(18,2), true))#271]

(180) Union

(181) HashAggregate [codegen id : 429]
Input [6]: [channel#72, i_brand_id#239, i_class_id#240, i_category_id#241, sales#67, number_sales#68]
Keys [4]: [channel#72, i_brand_id#239, i_class_id#240, i_category_id#241]
Functions [2]: [partial_sum(sales#67), partial_sum(number_sales#68)]
Aggregate Attributes [3]: [sum#272, isEmpty#273, sum#274]
Results [7]: [channel#72, i_brand_id#239, i_class_id#240, i_category_id#241, sum#275, isEmpty#276, sum#277]

(182) Exchange
Input [7]: [channel#72, i_brand_id#239, i_class_id#240, i_category_id#241, sum#275, isEmpty#276, sum#277]
Arguments: hashpartitioning(channel#72, i_brand_id#239, i_class_id#240, i_category_id#241, 5), ENSURE_REQUIREMENTS, [id=#278]

(183) HashAggregate [codegen id : 430]
Input [7]: [channel#72, i_brand_id#239, i_class_id#240, i_category_id#241, sum#275, isEmpty#276, sum#277]
Keys [4]: [channel#72, i_brand_id#239, i_class_id#240, i_category_id#241]
Functions [2]: [sum(sales#67), sum(number_sales#68)]
Aggregate Attributes [2]: [sum(sales#67)#279, sum(number_sales#68)#280]
Results [3]: [channel#72, sum(sales#67)#279 AS sum_sales#128, sum(number_sales#68)#280 AS number_sales#129]

(184) HashAggregate [codegen id : 430]
Input [3]: [channel#72, sum_sales#128, number_sales#129]
Keys [1]: [channel#72]
Functions [2]: [partial_sum(sum_sales#128), partial_sum(number_sales#129)]
Aggregate Attributes [3]: [sum#281, isEmpty#282, sum#283]
Results [4]: [channel#72, sum#284, isEmpty#285, sum#286]

(185) Exchange
Input [4]: [channel#72, sum#284, isEmpty#285, sum#286]
Arguments: hashpartitioning(channel#72, 5), ENSURE_REQUIREMENTS, [id=#287]

(186) HashAggregate [codegen id : 431]
Input [4]: [channel#72, sum#284, isEmpty#285, sum#286]
Keys [1]: [channel#72]
Functions [2]: [sum(sum_sales#128), sum(number_sales#129)]
Aggregate Attributes [2]: [sum(sum_sales#128)#288, sum(number_sales#129)#289]
Results [6]: [channel#72, null AS i_brand_id#290, null AS i_class_id#291, null AS i_category_id#292, sum(sum_sales#128)#288 AS sum(sum_sales)#293, sum(number_sales#129)#289 AS sum(number_sales)#294]

(187) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#295, i_class_id#296, i_category_id#297, sum#298, isEmpty#299, count#300]

(188) HashAggregate [codegen id : 466]
Input [6]: [i_brand_id#295, i_class_id#296, i_category_id#297, sum#298, isEmpty#299, count#300]
Keys [3]: [i_brand_id#295, i_class_id#296, i_category_id#297]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#301 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#302 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#301 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#302 as decimal(12,2)))), DecimalType(18,2), true))#303, count(1)#304]
Results [6]: [i_brand_id#295, i_class_id#296, i_category_id#297, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#301 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#302 as decimal(12,2)))), DecimalType(18,2), true))#303 AS sales#67, count(1)#304 AS number_sales#68, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#301 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#302 as decimal(12,2)))), DecimalType(18,2), true))#303 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#301 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#302 as decimal(12,2)))), DecimalType(18,2), true))#305]

(189) Filter [codegen id : 466]
Input [6]: [i_brand_id#295, i_class_id#296, i_category_id#297, sales#67, number_sales#68, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#301 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#302 as decimal(12,2)))), DecimalType(18,2), true))#305]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#301 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#302 as decimal(12,2)))), DecimalType(18,2), true))#305) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#301 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#302 as decimal(12,2)))), DecimalType(18,2), true))#305 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#70, [id=#71] as decimal(32,6))))

(190) Project [codegen id : 466]
Output [6]: [store AS channel#72, i_brand_id#295, i_class_id#296, i_category_id#297, sales#67, number_sales#68]
Input [6]: [i_brand_id#295, i_class_id#296, i_category_id#297, sales#67, number_sales#68, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#301 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#302 as decimal(12,2)))), DecimalType(18,2), true))#305]

(191) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#306, i_class_id#307, i_category_id#308, sum#309, isEmpty#310, count#311]

(192) HashAggregate [codegen id : 501]
Input [6]: [i_brand_id#306, i_class_id#307, i_category_id#308, sum#309, isEmpty#310, count#311]
Keys [3]: [i_brand_id#306, i_class_id#307, i_category_id#308]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#312 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#313 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#312 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#313 as decimal(12,2)))), DecimalType(18,2), true))#314, count(1)#315]
Results [6]: [i_brand_id#306, i_class_id#307, i_category_id#308, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#312 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#313 as decimal(12,2)))), DecimalType(18,2), true))#314 AS sales#92, count(1)#315 AS number_sales#93, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#312 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#313 as decimal(12,2)))), DecimalType(18,2), true))#314 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#312 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#313 as decimal(12,2)))), DecimalType(18,2), true))#316]

(193) Filter [codegen id : 501]
Input [6]: [i_brand_id#306, i_class_id#307, i_category_id#308, sales#92, number_sales#93, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#312 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#313 as decimal(12,2)))), DecimalType(18,2), true))#316]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#312 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#313 as decimal(12,2)))), DecimalType(18,2), true))#316) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#312 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#313 as decimal(12,2)))), DecimalType(18,2), true))#316 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#70, [id=#71] as decimal(32,6))))

(194) Project [codegen id : 501]
Output [6]: [catalog AS channel#95, i_brand_id#306, i_class_id#307, i_category_id#308, sales#92, number_sales#93]
Input [6]: [i_brand_id#306, i_class_id#307, i_category_id#308, sales#92, number_sales#93, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#312 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#313 as decimal(12,2)))), DecimalType(18,2), true))#316]

(195) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#317, i_class_id#318, i_category_id#319, sum#320, isEmpty#321, count#322]

(196) HashAggregate [codegen id : 536]
Input [6]: [i_brand_id#317, i_class_id#318, i_category_id#319, sum#320, isEmpty#321, count#322]
Keys [3]: [i_brand_id#317, i_class_id#318, i_category_id#319]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#323 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#324 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#323 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#324 as decimal(12,2)))), DecimalType(18,2), true))#325, count(1)#326]
Results [6]: [i_brand_id#317, i_class_id#318, i_category_id#319, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#323 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#324 as decimal(12,2)))), DecimalType(18,2), true))#325 AS sales#115, count(1)#326 AS number_sales#116, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#323 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#324 as decimal(12,2)))), DecimalType(18,2), true))#325 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#323 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#324 as decimal(12,2)))), DecimalType(18,2), true))#327]

(197) Filter [codegen id : 536]
Input [6]: [i_brand_id#317, i_class_id#318, i_category_id#319, sales#115, number_sales#116, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#323 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#324 as decimal(12,2)))), DecimalType(18,2), true))#327]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#323 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#324 as decimal(12,2)))), DecimalType(18,2), true))#327) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#323 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#324 as decimal(12,2)))), DecimalType(18,2), true))#327 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#70, [id=#71] as decimal(32,6))))

(198) Project [codegen id : 536]
Output [6]: [web AS channel#118, i_brand_id#317, i_class_id#318, i_category_id#319, sales#115, number_sales#116]
Input [6]: [i_brand_id#317, i_class_id#318, i_category_id#319, sales#115, number_sales#116, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#323 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#324 as decimal(12,2)))), DecimalType(18,2), true))#327]

(199) Union

(200) HashAggregate [codegen id : 537]
Input [6]: [channel#72, i_brand_id#295, i_class_id#296, i_category_id#297, sales#67, number_sales#68]
Keys [4]: [channel#72, i_brand_id#295, i_class_id#296, i_category_id#297]
Functions [2]: [partial_sum(sales#67), partial_sum(number_sales#68)]
Aggregate Attributes [3]: [sum#328, isEmpty#329, sum#330]
Results [7]: [channel#72, i_brand_id#295, i_class_id#296, i_category_id#297, sum#331, isEmpty#332, sum#333]

(201) Exchange
Input [7]: [channel#72, i_brand_id#295, i_class_id#296, i_category_id#297, sum#331, isEmpty#332, sum#333]
Arguments: hashpartitioning(channel#72, i_brand_id#295, i_class_id#296, i_category_id#297, 5), ENSURE_REQUIREMENTS, [id=#334]

(202) HashAggregate [codegen id : 538]
Input [7]: [channel#72, i_brand_id#295, i_class_id#296, i_category_id#297, sum#331, isEmpty#332, sum#333]
Keys [4]: [channel#72, i_brand_id#295, i_class_id#296, i_category_id#297]
Functions [2]: [sum(sales#67), sum(number_sales#68)]
Aggregate Attributes [2]: [sum(sales#67)#335, sum(number_sales#68)#336]
Results [2]: [sum(sales#67)#335 AS sum_sales#128, sum(number_sales#68)#336 AS number_sales#129]

(203) HashAggregate [codegen id : 538]
Input [2]: [sum_sales#128, number_sales#129]
Keys: []
Functions [2]: [partial_sum(sum_sales#128), partial_sum(number_sales#129)]
Aggregate Attributes [3]: [sum#337, isEmpty#338, sum#339]
Results [3]: [sum#340, isEmpty#341, sum#342]

(204) Exchange
Input [3]: [sum#340, isEmpty#341, sum#342]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#343]

(205) HashAggregate [codegen id : 539]
Input [3]: [sum#340, isEmpty#341, sum#342]
Keys: []
Functions [2]: [sum(sum_sales#128), sum(number_sales#129)]
Aggregate Attributes [2]: [sum(sum_sales#128)#344, sum(number_sales#129)#345]
Results [6]: [null AS channel#346, null AS i_brand_id#347, null AS i_class_id#348, null AS i_category_id#349, sum(sum_sales#128)#344 AS sum(sum_sales)#350, sum(number_sales#129)#345 AS sum(number_sales)#351]

(206) Union

(207) HashAggregate [codegen id : 540]
Input [6]: [channel#72, i_brand_id#53, i_class_id#54, i_category_id#55, sum_sales#128, number_sales#129]
Keys [6]: [channel#72, i_brand_id#53, i_class_id#54, i_category_id#55, sum_sales#128, number_sales#129]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#72, i_brand_id#53, i_class_id#54, i_category_id#55, sum_sales#128, number_sales#129]

(208) Exchange
Input [6]: [channel#72, i_brand_id#53, i_class_id#54, i_category_id#55, sum_sales#128, number_sales#129]
Arguments: hashpartitioning(channel#72, i_brand_id#53, i_class_id#54, i_category_id#55, sum_sales#128, number_sales#129, 5), ENSURE_REQUIREMENTS, [id=#352]

(209) HashAggregate [codegen id : 541]
Input [6]: [channel#72, i_brand_id#53, i_class_id#54, i_category_id#55, sum_sales#128, number_sales#129]
Keys [6]: [channel#72, i_brand_id#53, i_class_id#54, i_category_id#55, sum_sales#128, number_sales#129]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#72, i_brand_id#53, i_class_id#54, i_category_id#55, sum_sales#128, number_sales#129]

(210) TakeOrderedAndProject
Input [6]: [channel#72, i_brand_id#53, i_class_id#54, i_category_id#55, sum_sales#128, number_sales#129]
Arguments: 100, [channel#72 ASC NULLS FIRST, i_brand_id#53 ASC NULLS FIRST, i_class_id#54 ASC NULLS FIRST, i_category_id#55 ASC NULLS FIRST], [channel#72, i_brand_id#53, i_class_id#54, i_category_id#55, sum_sales#128, number_sales#129]

===== Subqueries =====

Subquery:1 Hosting operator id = 86 Hosting Expression = Subquery scalar-subquery#70, [id=#71]
* HashAggregate (237)
+- Exchange (236)
   +- * HashAggregate (235)
      +- Union (234)
         :- * Project (219)
         :  +- * BroadcastHashJoin Inner BuildRight (218)
         :     :- * ColumnarToRow (212)
         :     :  +- Scan parquet default.store_sales (211)
         :     +- BroadcastExchange (217)
         :        +- * Project (216)
         :           +- * Filter (215)
         :              +- * ColumnarToRow (214)
         :                 +- Scan parquet default.date_dim (213)
         :- * Project (228)
         :  +- * BroadcastHashJoin Inner BuildRight (227)
         :     :- * ColumnarToRow (221)
         :     :  +- Scan parquet default.catalog_sales (220)
         :     +- BroadcastExchange (226)
         :        +- * Project (225)
         :           +- * Filter (224)
         :              +- * ColumnarToRow (223)
         :                 +- Scan parquet default.date_dim (222)
         +- * Project (233)
            +- * BroadcastHashJoin Inner BuildRight (232)
               :- * ColumnarToRow (230)
               :  +- Scan parquet default.web_sales (229)
               +- ReusedExchange (231)


(211) Scan parquet default.store_sales
Output [3]: [ss_quantity#353, ss_list_price#354, ss_sold_date_sk#355]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#355), dynamicpruningexpression(ss_sold_date_sk#355 IN dynamicpruning#356)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(212) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#353, ss_list_price#354, ss_sold_date_sk#355]

(213) Scan parquet default.date_dim
Output [2]: [d_date_sk#357, d_year#358]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(214) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#357, d_year#358]

(215) Filter [codegen id : 1]
Input [2]: [d_date_sk#357, d_year#358]
Condition : (((isnotnull(d_year#358) AND (d_year#358 >= 1999)) AND (d_year#358 <= 2001)) AND isnotnull(d_date_sk#357))

(216) Project [codegen id : 1]
Output [1]: [d_date_sk#357]
Input [2]: [d_date_sk#357, d_year#358]

(217) BroadcastExchange
Input [1]: [d_date_sk#357]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#359]

(218) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#355]
Right keys [1]: [d_date_sk#357]
Join condition: None

(219) Project [codegen id : 2]
Output [2]: [ss_quantity#353 AS quantity#360, ss_list_price#354 AS list_price#361]
Input [4]: [ss_quantity#353, ss_list_price#354, ss_sold_date_sk#355, d_date_sk#357]

(220) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#362, cs_list_price#363, cs_sold_date_sk#364]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#364), dynamicpruningexpression(cs_sold_date_sk#364 IN dynamicpruning#365)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(221) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#362, cs_list_price#363, cs_sold_date_sk#364]

(222) Scan parquet default.date_dim
Output [2]: [d_date_sk#366, d_year#367]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(223) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#366, d_year#367]

(224) Filter [codegen id : 3]
Input [2]: [d_date_sk#366, d_year#367]
Condition : (((isnotnull(d_year#367) AND (d_year#367 >= 1998)) AND (d_year#367 <= 2000)) AND isnotnull(d_date_sk#366))

(225) Project [codegen id : 3]
Output [1]: [d_date_sk#366]
Input [2]: [d_date_sk#366, d_year#367]

(226) BroadcastExchange
Input [1]: [d_date_sk#366]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#368]

(227) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#364]
Right keys [1]: [d_date_sk#366]
Join condition: None

(228) Project [codegen id : 4]
Output [2]: [cs_quantity#362 AS quantity#369, cs_list_price#363 AS list_price#370]
Input [4]: [cs_quantity#362, cs_list_price#363, cs_sold_date_sk#364, d_date_sk#366]

(229) Scan parquet default.web_sales
Output [3]: [ws_quantity#371, ws_list_price#372, ws_sold_date_sk#373]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#373), dynamicpruningexpression(ws_sold_date_sk#373 IN dynamicpruning#365)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(230) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#371, ws_list_price#372, ws_sold_date_sk#373]

(231) ReusedExchange [Reuses operator id: 226]
Output [1]: [d_date_sk#374]

(232) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#373]
Right keys [1]: [d_date_sk#374]
Join condition: None

(233) Project [codegen id : 6]
Output [2]: [ws_quantity#371 AS quantity#375, ws_list_price#372 AS list_price#376]
Input [4]: [ws_quantity#371, ws_list_price#372, ws_sold_date_sk#373, d_date_sk#374]

(234) Union

(235) HashAggregate [codegen id : 7]
Input [2]: [quantity#360, list_price#361]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#360 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#361 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#377, count#378]
Results [2]: [sum#379, count#380]

(236) Exchange
Input [2]: [sum#379, count#380]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#381]

(237) HashAggregate [codegen id : 8]
Input [2]: [sum#379, count#380]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#360 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#361 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#360 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#361 as decimal(12,2)))), DecimalType(18,2), true))#382]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#360 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#361 as decimal(12,2)))), DecimalType(18,2), true))#382 AS average_sales#383]

Subquery:2 Hosting operator id = 211 Hosting Expression = ss_sold_date_sk#355 IN dynamicpruning#356
ReusedExchange (238)


(238) ReusedExchange [Reuses operator id: 217]
Output [1]: [d_date_sk#357]

Subquery:3 Hosting operator id = 220 Hosting Expression = cs_sold_date_sk#364 IN dynamicpruning#365
ReusedExchange (239)


(239) ReusedExchange [Reuses operator id: 226]
Output [1]: [d_date_sk#366]

Subquery:4 Hosting operator id = 229 Hosting Expression = ws_sold_date_sk#373 IN dynamicpruning#365

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (240)


(240) ReusedExchange [Reuses operator id: 69]
Output [1]: [d_date_sk#48]

Subquery:6 Hosting operator id = 9 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#13
ReusedExchange (241)


(241) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#14]

Subquery:7 Hosting operator id = 22 Hosting Expression = cs_sold_date_sk#22 IN dynamicpruning#13

Subquery:8 Hosting operator id = 39 Hosting Expression = ws_sold_date_sk#32 IN dynamicpruning#13

Subquery:9 Hosting operator id = 105 Hosting Expression = ReusedSubquery Subquery scalar-subquery#70, [id=#71]

Subquery:10 Hosting operator id = 88 Hosting Expression = cs_sold_date_sk#76 IN dynamicpruning#5

Subquery:11 Hosting operator id = 124 Hosting Expression = ReusedSubquery Subquery scalar-subquery#70, [id=#71]

Subquery:12 Hosting operator id = 107 Hosting Expression = ws_sold_date_sk#99 IN dynamicpruning#5

Subquery:13 Hosting operator id = 132 Hosting Expression = ReusedSubquery Subquery scalar-subquery#70, [id=#71]

Subquery:14 Hosting operator id = 136 Hosting Expression = ReusedSubquery Subquery scalar-subquery#70, [id=#71]

Subquery:15 Hosting operator id = 140 Hosting Expression = ReusedSubquery Subquery scalar-subquery#70, [id=#71]

Subquery:16 Hosting operator id = 151 Hosting Expression = ReusedSubquery Subquery scalar-subquery#70, [id=#71]

Subquery:17 Hosting operator id = 155 Hosting Expression = ReusedSubquery Subquery scalar-subquery#70, [id=#71]

Subquery:18 Hosting operator id = 159 Hosting Expression = ReusedSubquery Subquery scalar-subquery#70, [id=#71]

Subquery:19 Hosting operator id = 170 Hosting Expression = ReusedSubquery Subquery scalar-subquery#70, [id=#71]

Subquery:20 Hosting operator id = 174 Hosting Expression = ReusedSubquery Subquery scalar-subquery#70, [id=#71]

Subquery:21 Hosting operator id = 178 Hosting Expression = ReusedSubquery Subquery scalar-subquery#70, [id=#71]

Subquery:22 Hosting operator id = 189 Hosting Expression = ReusedSubquery Subquery scalar-subquery#70, [id=#71]

Subquery:23 Hosting operator id = 193 Hosting Expression = ReusedSubquery Subquery scalar-subquery#70, [id=#71]

Subquery:24 Hosting operator id = 197 Hosting Expression = ReusedSubquery Subquery scalar-subquery#70, [id=#71]


