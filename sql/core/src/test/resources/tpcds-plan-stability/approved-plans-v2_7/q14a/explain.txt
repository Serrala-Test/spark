== Physical Plan ==
TakeOrderedAndProject (120)
+- * HashAggregate (119)
   +- Exchange (118)
      +- * HashAggregate (117)
         +- Union (116)
            :- * HashAggregate (95)
            :  +- Exchange (94)
            :     +- * HashAggregate (93)
            :        +- Union (92)
            :           :- * Filter (61)
            :           :  +- * HashAggregate (60)
            :           :     +- Exchange (59)
            :           :        +- * HashAggregate (58)
            :           :           +- * Project (57)
            :           :              +- * BroadcastHashJoin Inner BuildRight (56)
            :           :                 :- * Project (54)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (53)
            :           :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (51)
            :           :                 :     :  :- * Filter (3)
            :           :                 :     :  :  +- * ColumnarToRow (2)
            :           :                 :     :  :     +- Scan parquet default.store_sales (1)
            :           :                 :     :  +- BroadcastExchange (50)
            :           :                 :     :     +- * Project (49)
            :           :                 :     :        +- * BroadcastHashJoin Inner BuildRight (48)
            :           :                 :     :           :- * Filter (6)
            :           :                 :     :           :  +- * ColumnarToRow (5)
            :           :                 :     :           :     +- Scan parquet default.item (4)
            :           :                 :     :           +- BroadcastExchange (47)
            :           :                 :     :              +- * BroadcastHashJoin LeftSemi BuildRight (46)
            :           :                 :     :                 :- * HashAggregate (35)
            :           :                 :     :                 :  +- Exchange (34)
            :           :                 :     :                 :     +- * HashAggregate (33)
            :           :                 :     :                 :        +- * Project (32)
            :           :                 :     :                 :           +- * BroadcastHashJoin Inner BuildRight (31)
            :           :                 :     :                 :              :- * Project (29)
            :           :                 :     :                 :              :  +- * BroadcastHashJoin Inner BuildRight (28)
            :           :                 :     :                 :              :     :- * Filter (9)
            :           :                 :     :                 :              :     :  +- * ColumnarToRow (8)
            :           :                 :     :                 :              :     :     +- Scan parquet default.store_sales (7)
            :           :                 :     :                 :              :     +- BroadcastExchange (27)
            :           :                 :     :                 :              :        +- * BroadcastHashJoin LeftSemi BuildRight (26)
            :           :                 :     :                 :              :           :- * Filter (12)
            :           :                 :     :                 :              :           :  +- * ColumnarToRow (11)
            :           :                 :     :                 :              :           :     +- Scan parquet default.item (10)
            :           :                 :     :                 :              :           +- BroadcastExchange (25)
            :           :                 :     :                 :              :              +- * Project (24)
            :           :                 :     :                 :              :                 +- * BroadcastHashJoin Inner BuildRight (23)
            :           :                 :     :                 :              :                    :- * Project (21)
            :           :                 :     :                 :              :                    :  +- * BroadcastHashJoin Inner BuildRight (20)
            :           :                 :     :                 :              :                    :     :- * Filter (15)
            :           :                 :     :                 :              :                    :     :  +- * ColumnarToRow (14)
            :           :                 :     :                 :              :                    :     :     +- Scan parquet default.catalog_sales (13)
            :           :                 :     :                 :              :                    :     +- BroadcastExchange (19)
            :           :                 :     :                 :              :                    :        +- * Filter (18)
            :           :                 :     :                 :              :                    :           +- * ColumnarToRow (17)
            :           :                 :     :                 :              :                    :              +- Scan parquet default.item (16)
            :           :                 :     :                 :              :                    +- ReusedExchange (22)
            :           :                 :     :                 :              +- ReusedExchange (30)
            :           :                 :     :                 +- BroadcastExchange (45)
            :           :                 :     :                    +- * Project (44)
            :           :                 :     :                       +- * BroadcastHashJoin Inner BuildRight (43)
            :           :                 :     :                          :- * Project (41)
            :           :                 :     :                          :  +- * BroadcastHashJoin Inner BuildRight (40)
            :           :                 :     :                          :     :- * Filter (38)
            :           :                 :     :                          :     :  +- * ColumnarToRow (37)
            :           :                 :     :                          :     :     +- Scan parquet default.web_sales (36)
            :           :                 :     :                          :     +- ReusedExchange (39)
            :           :                 :     :                          +- ReusedExchange (42)
            :           :                 :     +- ReusedExchange (52)
            :           :                 +- ReusedExchange (55)
            :           :- * Filter (76)
            :           :  +- * HashAggregate (75)
            :           :     +- Exchange (74)
            :           :        +- * HashAggregate (73)
            :           :           +- * Project (72)
            :           :              +- * BroadcastHashJoin Inner BuildRight (71)
            :           :                 :- * Project (69)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (68)
            :           :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (66)
            :           :                 :     :  :- * Filter (64)
            :           :                 :     :  :  +- * ColumnarToRow (63)
            :           :                 :     :  :     +- Scan parquet default.catalog_sales (62)
            :           :                 :     :  +- ReusedExchange (65)
            :           :                 :     +- ReusedExchange (67)
            :           :                 +- ReusedExchange (70)
            :           +- * Filter (91)
            :              +- * HashAggregate (90)
            :                 +- Exchange (89)
            :                    +- * HashAggregate (88)
            :                       +- * Project (87)
            :                          +- * BroadcastHashJoin Inner BuildRight (86)
            :                             :- * Project (84)
            :                             :  +- * BroadcastHashJoin Inner BuildRight (83)
            :                             :     :- * BroadcastHashJoin LeftSemi BuildRight (81)
            :                             :     :  :- * Filter (79)
            :                             :     :  :  +- * ColumnarToRow (78)
            :                             :     :  :     +- Scan parquet default.web_sales (77)
            :                             :     :  +- ReusedExchange (80)
            :                             :     +- ReusedExchange (82)
            :                             +- ReusedExchange (85)
            :- * HashAggregate (100)
            :  +- Exchange (99)
            :     +- * HashAggregate (98)
            :        +- * HashAggregate (97)
            :           +- ReusedExchange (96)
            :- * HashAggregate (105)
            :  +- Exchange (104)
            :     +- * HashAggregate (103)
            :        +- * HashAggregate (102)
            :           +- ReusedExchange (101)
            :- * HashAggregate (110)
            :  +- Exchange (109)
            :     +- * HashAggregate (108)
            :        +- * HashAggregate (107)
            :           +- ReusedExchange (106)
            +- * HashAggregate (115)
               +- Exchange (114)
                  +- * HashAggregate (113)
                     +- * HashAggregate (112)
                        +- ReusedExchange (111)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 14]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 14]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(6) Filter [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(7) Scan parquet default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 6]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]

(9) Filter [codegen id : 6]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(10) Scan parquet default.item
Output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(12) Filter [codegen id : 4]
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Condition : (((isnotnull(i_item_sk#13) AND isnotnull(i_brand_id#14)) AND isnotnull(i_class_id#15)) AND isnotnull(i_category_id#16))

(13) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(cs_sold_date_sk#18 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(14) ColumnarToRow [codegen id : 3]
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]

(15) Filter [codegen id : 3]
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Condition : isnotnull(cs_item_sk#17)

(16) Scan parquet default.item
Output [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(17) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]

(18) Filter [codegen id : 1]
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Condition : isnotnull(i_item_sk#19)

(19) BroadcastExchange
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#23]

(20) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_item_sk#17]
Right keys [1]: [i_item_sk#19]
Join condition: None

(21) Project [codegen id : 3]
Output [4]: [cs_sold_date_sk#18, i_brand_id#20, i_class_id#21, i_category_id#22]
Input [6]: [cs_item_sk#17, cs_sold_date_sk#18, i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]

(22) ReusedExchange [Reuses operator id: 154]
Output [1]: [d_date_sk#24]

(23) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#24]
Join condition: None

(24) Project [codegen id : 3]
Output [3]: [i_brand_id#20, i_class_id#21, i_category_id#22]
Input [5]: [cs_sold_date_sk#18, i_brand_id#20, i_class_id#21, i_category_id#22, d_date_sk#24]

(25) BroadcastExchange
Input [3]: [i_brand_id#20, i_class_id#21, i_category_id#22]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#25]

(26) BroadcastHashJoin [codegen id : 4]
Left keys [6]: [coalesce(i_brand_id#14, 0), isnull(i_brand_id#14), coalesce(i_class_id#15, 0), isnull(i_class_id#15), coalesce(i_category_id#16, 0), isnull(i_category_id#16)]
Right keys [6]: [coalesce(i_brand_id#20, 0), isnull(i_brand_id#20), coalesce(i_class_id#21, 0), isnull(i_class_id#21), coalesce(i_category_id#22, 0), isnull(i_category_id#22)]
Join condition: None

(27) BroadcastExchange
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#26]

(28) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#10]
Right keys [1]: [i_item_sk#13]
Join condition: None

(29) Project [codegen id : 6]
Output [4]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16]
Input [6]: [ss_item_sk#10, ss_sold_date_sk#11, i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(30) ReusedExchange [Reuses operator id: 154]
Output [1]: [d_date_sk#27]

(31) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#27]
Join condition: None

(32) Project [codegen id : 6]
Output [3]: [i_brand_id#14 AS brand_id#28, i_class_id#15 AS class_id#29, i_category_id#16 AS category_id#30]
Input [5]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16, d_date_sk#27]

(33) HashAggregate [codegen id : 6]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(34) Exchange
Input [3]: [brand_id#28, class_id#29, category_id#30]
Arguments: hashpartitioning(brand_id#28, class_id#29, category_id#30, 5), ENSURE_REQUIREMENTS, [id=#31]

(35) HashAggregate [codegen id : 10]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(36) Scan parquet default.web_sales
Output [2]: [ws_item_sk#32, ws_sold_date_sk#33]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#33), dynamicpruningexpression(ws_sold_date_sk#33 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(37) ColumnarToRow [codegen id : 9]
Input [2]: [ws_item_sk#32, ws_sold_date_sk#33]

(38) Filter [codegen id : 9]
Input [2]: [ws_item_sk#32, ws_sold_date_sk#33]
Condition : isnotnull(ws_item_sk#32)

(39) ReusedExchange [Reuses operator id: 19]
Output [4]: [i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]

(40) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_item_sk#32]
Right keys [1]: [i_item_sk#34]
Join condition: None

(41) Project [codegen id : 9]
Output [4]: [ws_sold_date_sk#33, i_brand_id#35, i_class_id#36, i_category_id#37]
Input [6]: [ws_item_sk#32, ws_sold_date_sk#33, i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]

(42) ReusedExchange [Reuses operator id: 154]
Output [1]: [d_date_sk#38]

(43) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_sold_date_sk#33]
Right keys [1]: [d_date_sk#38]
Join condition: None

(44) Project [codegen id : 9]
Output [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Input [5]: [ws_sold_date_sk#33, i_brand_id#35, i_class_id#36, i_category_id#37, d_date_sk#38]

(45) BroadcastExchange
Input [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#39]

(46) BroadcastHashJoin [codegen id : 10]
Left keys [6]: [coalesce(brand_id#28, 0), isnull(brand_id#28), coalesce(class_id#29, 0), isnull(class_id#29), coalesce(category_id#30, 0), isnull(category_id#30)]
Right keys [6]: [coalesce(i_brand_id#35, 0), isnull(i_brand_id#35), coalesce(i_class_id#36, 0), isnull(i_class_id#36), coalesce(i_category_id#37, 0), isnull(i_category_id#37)]
Join condition: None

(47) BroadcastExchange
Input [3]: [brand_id#28, class_id#29, category_id#30]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#40]

(48) BroadcastHashJoin [codegen id : 11]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#28, class_id#29, category_id#30]
Join condition: None

(49) Project [codegen id : 11]
Output [1]: [i_item_sk#6 AS ss_item_sk#41]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#28, class_id#29, category_id#30]

(50) BroadcastExchange
Input [1]: [ss_item_sk#41]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#42]

(51) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(52) ReusedExchange [Reuses operator id: 19]
Output [4]: [i_item_sk#43, i_brand_id#44, i_class_id#45, i_category_id#46]

(53) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#43]
Join condition: None

(54) Project [codegen id : 14]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#44, i_class_id#45, i_category_id#46]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#43, i_brand_id#44, i_class_id#45, i_category_id#46]

(55) ReusedExchange [Reuses operator id: 149]
Output [1]: [d_date_sk#47]

(56) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#47]
Join condition: None

(57) Project [codegen id : 14]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#44, i_class_id#45, i_category_id#46]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#44, i_class_id#45, i_category_id#46, d_date_sk#47]

(58) HashAggregate [codegen id : 14]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#44, i_class_id#45, i_category_id#46]
Keys [3]: [i_brand_id#44, i_class_id#45, i_category_id#46]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)]
Aggregate Attributes [3]: [sum#48, isEmpty#49, count#50]
Results [6]: [i_brand_id#44, i_class_id#45, i_category_id#46, sum#51, isEmpty#52, count#53]

(59) Exchange
Input [6]: [i_brand_id#44, i_class_id#45, i_category_id#46, sum#51, isEmpty#52, count#53]
Arguments: hashpartitioning(i_brand_id#44, i_class_id#45, i_category_id#46, 5), ENSURE_REQUIREMENTS, [id=#54]

(60) HashAggregate [codegen id : 15]
Input [6]: [i_brand_id#44, i_class_id#45, i_category_id#46, sum#51, isEmpty#52, count#53]
Keys [3]: [i_brand_id#44, i_class_id#45, i_category_id#46]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2))), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2)))#55, count(1)#56]
Results [6]: [store AS channel#57, i_brand_id#44, i_class_id#45, i_category_id#46, sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2)))#55 AS sales#58, count(1)#56 AS number_sales#59]

(61) Filter [codegen id : 15]
Input [6]: [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46, sales#58, number_sales#59]
Condition : (isnotnull(sales#58) AND (cast(sales#58 as decimal(32,6)) > cast(Subquery scalar-subquery#60, [id=#61] as decimal(32,6))))

(62) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#62, cs_quantity#63, cs_list_price#64, cs_sold_date_sk#65]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#65), dynamicpruningexpression(cs_sold_date_sk#65 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(63) ColumnarToRow [codegen id : 29]
Input [4]: [cs_item_sk#62, cs_quantity#63, cs_list_price#64, cs_sold_date_sk#65]

(64) Filter [codegen id : 29]
Input [4]: [cs_item_sk#62, cs_quantity#63, cs_list_price#64, cs_sold_date_sk#65]
Condition : isnotnull(cs_item_sk#62)

(65) ReusedExchange [Reuses operator id: 50]
Output [1]: [ss_item_sk#41]

(66) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [cs_item_sk#62]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(67) ReusedExchange [Reuses operator id: 19]
Output [4]: [i_item_sk#66, i_brand_id#67, i_class_id#68, i_category_id#69]

(68) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [cs_item_sk#62]
Right keys [1]: [i_item_sk#66]
Join condition: None

(69) Project [codegen id : 29]
Output [6]: [cs_quantity#63, cs_list_price#64, cs_sold_date_sk#65, i_brand_id#67, i_class_id#68, i_category_id#69]
Input [8]: [cs_item_sk#62, cs_quantity#63, cs_list_price#64, cs_sold_date_sk#65, i_item_sk#66, i_brand_id#67, i_class_id#68, i_category_id#69]

(70) ReusedExchange [Reuses operator id: 149]
Output [1]: [d_date_sk#70]

(71) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [cs_sold_date_sk#65]
Right keys [1]: [d_date_sk#70]
Join condition: None

(72) Project [codegen id : 29]
Output [5]: [cs_quantity#63, cs_list_price#64, i_brand_id#67, i_class_id#68, i_category_id#69]
Input [7]: [cs_quantity#63, cs_list_price#64, cs_sold_date_sk#65, i_brand_id#67, i_class_id#68, i_category_id#69, d_date_sk#70]

(73) HashAggregate [codegen id : 29]
Input [5]: [cs_quantity#63, cs_list_price#64, i_brand_id#67, i_class_id#68, i_category_id#69]
Keys [3]: [i_brand_id#67, i_class_id#68, i_category_id#69]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cs_quantity#63 as decimal(12,2))) * promote_precision(cast(cs_list_price#64 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)]
Aggregate Attributes [3]: [sum#71, isEmpty#72, count#73]
Results [6]: [i_brand_id#67, i_class_id#68, i_category_id#69, sum#74, isEmpty#75, count#76]

(74) Exchange
Input [6]: [i_brand_id#67, i_class_id#68, i_category_id#69, sum#74, isEmpty#75, count#76]
Arguments: hashpartitioning(i_brand_id#67, i_class_id#68, i_category_id#69, 5), ENSURE_REQUIREMENTS, [id=#77]

(75) HashAggregate [codegen id : 30]
Input [6]: [i_brand_id#67, i_class_id#68, i_category_id#69, sum#74, isEmpty#75, count#76]
Keys [3]: [i_brand_id#67, i_class_id#68, i_category_id#69]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cs_quantity#63 as decimal(12,2))) * promote_precision(cast(cs_list_price#64 as decimal(12,2)))), DecimalType(18,2))), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cs_quantity#63 as decimal(12,2))) * promote_precision(cast(cs_list_price#64 as decimal(12,2)))), DecimalType(18,2)))#78, count(1)#79]
Results [6]: [catalog AS channel#80, i_brand_id#67, i_class_id#68, i_category_id#69, sum(CheckOverflow((promote_precision(cast(cs_quantity#63 as decimal(12,2))) * promote_precision(cast(cs_list_price#64 as decimal(12,2)))), DecimalType(18,2)))#78 AS sales#81, count(1)#79 AS number_sales#82]

(76) Filter [codegen id : 30]
Input [6]: [channel#80, i_brand_id#67, i_class_id#68, i_category_id#69, sales#81, number_sales#82]
Condition : (isnotnull(sales#81) AND (cast(sales#81 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#60, [id=#61] as decimal(32,6))))

(77) Scan parquet default.web_sales
Output [4]: [ws_item_sk#83, ws_quantity#84, ws_list_price#85, ws_sold_date_sk#86]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#86), dynamicpruningexpression(ws_sold_date_sk#86 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(78) ColumnarToRow [codegen id : 44]
Input [4]: [ws_item_sk#83, ws_quantity#84, ws_list_price#85, ws_sold_date_sk#86]

(79) Filter [codegen id : 44]
Input [4]: [ws_item_sk#83, ws_quantity#84, ws_list_price#85, ws_sold_date_sk#86]
Condition : isnotnull(ws_item_sk#83)

(80) ReusedExchange [Reuses operator id: 50]
Output [1]: [ss_item_sk#41]

(81) BroadcastHashJoin [codegen id : 44]
Left keys [1]: [ws_item_sk#83]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(82) ReusedExchange [Reuses operator id: 19]
Output [4]: [i_item_sk#87, i_brand_id#88, i_class_id#89, i_category_id#90]

(83) BroadcastHashJoin [codegen id : 44]
Left keys [1]: [ws_item_sk#83]
Right keys [1]: [i_item_sk#87]
Join condition: None

(84) Project [codegen id : 44]
Output [6]: [ws_quantity#84, ws_list_price#85, ws_sold_date_sk#86, i_brand_id#88, i_class_id#89, i_category_id#90]
Input [8]: [ws_item_sk#83, ws_quantity#84, ws_list_price#85, ws_sold_date_sk#86, i_item_sk#87, i_brand_id#88, i_class_id#89, i_category_id#90]

(85) ReusedExchange [Reuses operator id: 149]
Output [1]: [d_date_sk#91]

(86) BroadcastHashJoin [codegen id : 44]
Left keys [1]: [ws_sold_date_sk#86]
Right keys [1]: [d_date_sk#91]
Join condition: None

(87) Project [codegen id : 44]
Output [5]: [ws_quantity#84, ws_list_price#85, i_brand_id#88, i_class_id#89, i_category_id#90]
Input [7]: [ws_quantity#84, ws_list_price#85, ws_sold_date_sk#86, i_brand_id#88, i_class_id#89, i_category_id#90, d_date_sk#91]

(88) HashAggregate [codegen id : 44]
Input [5]: [ws_quantity#84, ws_list_price#85, i_brand_id#88, i_class_id#89, i_category_id#90]
Keys [3]: [i_brand_id#88, i_class_id#89, i_category_id#90]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(ws_quantity#84 as decimal(12,2))) * promote_precision(cast(ws_list_price#85 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)]
Aggregate Attributes [3]: [sum#92, isEmpty#93, count#94]
Results [6]: [i_brand_id#88, i_class_id#89, i_category_id#90, sum#95, isEmpty#96, count#97]

(89) Exchange
Input [6]: [i_brand_id#88, i_class_id#89, i_category_id#90, sum#95, isEmpty#96, count#97]
Arguments: hashpartitioning(i_brand_id#88, i_class_id#89, i_category_id#90, 5), ENSURE_REQUIREMENTS, [id=#98]

(90) HashAggregate [codegen id : 45]
Input [6]: [i_brand_id#88, i_class_id#89, i_category_id#90, sum#95, isEmpty#96, count#97]
Keys [3]: [i_brand_id#88, i_class_id#89, i_category_id#90]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(ws_quantity#84 as decimal(12,2))) * promote_precision(cast(ws_list_price#85 as decimal(12,2)))), DecimalType(18,2))), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(ws_quantity#84 as decimal(12,2))) * promote_precision(cast(ws_list_price#85 as decimal(12,2)))), DecimalType(18,2)))#99, count(1)#100]
Results [6]: [web AS channel#101, i_brand_id#88, i_class_id#89, i_category_id#90, sum(CheckOverflow((promote_precision(cast(ws_quantity#84 as decimal(12,2))) * promote_precision(cast(ws_list_price#85 as decimal(12,2)))), DecimalType(18,2)))#99 AS sales#102, count(1)#100 AS number_sales#103]

(91) Filter [codegen id : 45]
Input [6]: [channel#101, i_brand_id#88, i_class_id#89, i_category_id#90, sales#102, number_sales#103]
Condition : (isnotnull(sales#102) AND (cast(sales#102 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#60, [id=#61] as decimal(32,6))))

(92) Union

(93) HashAggregate [codegen id : 46]
Input [6]: [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46, sales#58, number_sales#59]
Keys [4]: [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46]
Functions [2]: [partial_sum(sales#58), partial_sum(number_sales#59)]
Aggregate Attributes [3]: [sum#104, isEmpty#105, sum#106]
Results [7]: [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46, sum#107, isEmpty#108, sum#109]

(94) Exchange
Input [7]: [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46, sum#107, isEmpty#108, sum#109]
Arguments: hashpartitioning(channel#57, i_brand_id#44, i_class_id#45, i_category_id#46, 5), ENSURE_REQUIREMENTS, [id=#110]

(95) HashAggregate [codegen id : 47]
Input [7]: [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46, sum#107, isEmpty#108, sum#109]
Keys [4]: [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46]
Functions [2]: [sum(sales#58), sum(number_sales#59)]
Aggregate Attributes [2]: [sum(sales#58)#111, sum(number_sales#59)#112]
Results [6]: [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46, sum(sales#58)#111 AS sum_sales#113, sum(number_sales#59)#112 AS number_sales#114]

(96) ReusedExchange [Reuses operator id: 94]
Output [7]: [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46, sum#107, isEmpty#108, sum#109]

(97) HashAggregate [codegen id : 94]
Input [7]: [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46, sum#107, isEmpty#108, sum#109]
Keys [4]: [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46]
Functions [2]: [sum(sales#58), sum(number_sales#59)]
Aggregate Attributes [2]: [sum(sales#58)#111, sum(number_sales#59)#112]
Results [5]: [channel#57, i_brand_id#44, i_class_id#45, sum(sales#58)#111 AS sum_sales#113, sum(number_sales#59)#112 AS number_sales#114]

(98) HashAggregate [codegen id : 94]
Input [5]: [channel#57, i_brand_id#44, i_class_id#45, sum_sales#113, number_sales#114]
Keys [3]: [channel#57, i_brand_id#44, i_class_id#45]
Functions [2]: [partial_sum(sum_sales#113), partial_sum(number_sales#114)]
Aggregate Attributes [3]: [sum#115, isEmpty#116, sum#117]
Results [6]: [channel#57, i_brand_id#44, i_class_id#45, sum#118, isEmpty#119, sum#120]

(99) Exchange
Input [6]: [channel#57, i_brand_id#44, i_class_id#45, sum#118, isEmpty#119, sum#120]
Arguments: hashpartitioning(channel#57, i_brand_id#44, i_class_id#45, 5), ENSURE_REQUIREMENTS, [id=#121]

(100) HashAggregate [codegen id : 95]
Input [6]: [channel#57, i_brand_id#44, i_class_id#45, sum#118, isEmpty#119, sum#120]
Keys [3]: [channel#57, i_brand_id#44, i_class_id#45]
Functions [2]: [sum(sum_sales#113), sum(number_sales#114)]
Aggregate Attributes [2]: [sum(sum_sales#113)#122, sum(number_sales#114)#123]
Results [6]: [channel#57, i_brand_id#44, i_class_id#45, null AS i_category_id#124, sum(sum_sales#113)#122 AS sum(sum_sales)#125, sum(number_sales#114)#123 AS sum(number_sales)#126]

(101) ReusedExchange [Reuses operator id: 94]
Output [7]: [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46, sum#107, isEmpty#108, sum#109]

(102) HashAggregate [codegen id : 142]
Input [7]: [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46, sum#107, isEmpty#108, sum#109]
Keys [4]: [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46]
Functions [2]: [sum(sales#58), sum(number_sales#59)]
Aggregate Attributes [2]: [sum(sales#58)#111, sum(number_sales#59)#112]
Results [4]: [channel#57, i_brand_id#44, sum(sales#58)#111 AS sum_sales#113, sum(number_sales#59)#112 AS number_sales#114]

(103) HashAggregate [codegen id : 142]
Input [4]: [channel#57, i_brand_id#44, sum_sales#113, number_sales#114]
Keys [2]: [channel#57, i_brand_id#44]
Functions [2]: [partial_sum(sum_sales#113), partial_sum(number_sales#114)]
Aggregate Attributes [3]: [sum#127, isEmpty#128, sum#129]
Results [5]: [channel#57, i_brand_id#44, sum#130, isEmpty#131, sum#132]

(104) Exchange
Input [5]: [channel#57, i_brand_id#44, sum#130, isEmpty#131, sum#132]
Arguments: hashpartitioning(channel#57, i_brand_id#44, 5), ENSURE_REQUIREMENTS, [id=#133]

(105) HashAggregate [codegen id : 143]
Input [5]: [channel#57, i_brand_id#44, sum#130, isEmpty#131, sum#132]
Keys [2]: [channel#57, i_brand_id#44]
Functions [2]: [sum(sum_sales#113), sum(number_sales#114)]
Aggregate Attributes [2]: [sum(sum_sales#113)#134, sum(number_sales#114)#135]
Results [6]: [channel#57, i_brand_id#44, null AS i_class_id#136, null AS i_category_id#137, sum(sum_sales#113)#134 AS sum(sum_sales)#138, sum(number_sales#114)#135 AS sum(number_sales)#139]

(106) ReusedExchange [Reuses operator id: 94]
Output [7]: [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46, sum#107, isEmpty#108, sum#109]

(107) HashAggregate [codegen id : 190]
Input [7]: [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46, sum#107, isEmpty#108, sum#109]
Keys [4]: [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46]
Functions [2]: [sum(sales#58), sum(number_sales#59)]
Aggregate Attributes [2]: [sum(sales#58)#111, sum(number_sales#59)#112]
Results [3]: [channel#57, sum(sales#58)#111 AS sum_sales#113, sum(number_sales#59)#112 AS number_sales#114]

(108) HashAggregate [codegen id : 190]
Input [3]: [channel#57, sum_sales#113, number_sales#114]
Keys [1]: [channel#57]
Functions [2]: [partial_sum(sum_sales#113), partial_sum(number_sales#114)]
Aggregate Attributes [3]: [sum#140, isEmpty#141, sum#142]
Results [4]: [channel#57, sum#143, isEmpty#144, sum#145]

(109) Exchange
Input [4]: [channel#57, sum#143, isEmpty#144, sum#145]
Arguments: hashpartitioning(channel#57, 5), ENSURE_REQUIREMENTS, [id=#146]

(110) HashAggregate [codegen id : 191]
Input [4]: [channel#57, sum#143, isEmpty#144, sum#145]
Keys [1]: [channel#57]
Functions [2]: [sum(sum_sales#113), sum(number_sales#114)]
Aggregate Attributes [2]: [sum(sum_sales#113)#147, sum(number_sales#114)#148]
Results [6]: [channel#57, null AS i_brand_id#149, null AS i_class_id#150, null AS i_category_id#151, sum(sum_sales#113)#147 AS sum(sum_sales)#152, sum(number_sales#114)#148 AS sum(number_sales)#153]

(111) ReusedExchange [Reuses operator id: 94]
Output [7]: [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46, sum#107, isEmpty#108, sum#109]

(112) HashAggregate [codegen id : 238]
Input [7]: [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46, sum#107, isEmpty#108, sum#109]
Keys [4]: [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46]
Functions [2]: [sum(sales#58), sum(number_sales#59)]
Aggregate Attributes [2]: [sum(sales#58)#111, sum(number_sales#59)#112]
Results [2]: [sum(sales#58)#111 AS sum_sales#113, sum(number_sales#59)#112 AS number_sales#114]

(113) HashAggregate [codegen id : 238]
Input [2]: [sum_sales#113, number_sales#114]
Keys: []
Functions [2]: [partial_sum(sum_sales#113), partial_sum(number_sales#114)]
Aggregate Attributes [3]: [sum#154, isEmpty#155, sum#156]
Results [3]: [sum#157, isEmpty#158, sum#159]

(114) Exchange
Input [3]: [sum#157, isEmpty#158, sum#159]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#160]

(115) HashAggregate [codegen id : 239]
Input [3]: [sum#157, isEmpty#158, sum#159]
Keys: []
Functions [2]: [sum(sum_sales#113), sum(number_sales#114)]
Aggregate Attributes [2]: [sum(sum_sales#113)#161, sum(number_sales#114)#162]
Results [6]: [null AS channel#163, null AS i_brand_id#164, null AS i_class_id#165, null AS i_category_id#166, sum(sum_sales#113)#161 AS sum(sum_sales)#167, sum(number_sales#114)#162 AS sum(number_sales)#168]

(116) Union

(117) HashAggregate [codegen id : 240]
Input [6]: [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#113, number_sales#114]
Keys [6]: [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#113, number_sales#114]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#113, number_sales#114]

(118) Exchange
Input [6]: [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#113, number_sales#114]
Arguments: hashpartitioning(channel#57, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#113, number_sales#114, 5), ENSURE_REQUIREMENTS, [id=#169]

(119) HashAggregate [codegen id : 241]
Input [6]: [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#113, number_sales#114]
Keys [6]: [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#113, number_sales#114]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#113, number_sales#114]

(120) TakeOrderedAndProject
Input [6]: [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#113, number_sales#114]
Arguments: 100, [channel#57 ASC NULLS FIRST, i_brand_id#44 ASC NULLS FIRST, i_class_id#45 ASC NULLS FIRST, i_category_id#46 ASC NULLS FIRST], [channel#57, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#113, number_sales#114]

===== Subqueries =====

Subquery:1 Hosting operator id = 61 Hosting Expression = Subquery scalar-subquery#60, [id=#61]
* HashAggregate (139)
+- Exchange (138)
   +- * HashAggregate (137)
      +- Union (136)
         :- * Project (125)
         :  +- * BroadcastHashJoin Inner BuildRight (124)
         :     :- * ColumnarToRow (122)
         :     :  +- Scan parquet default.store_sales (121)
         :     +- ReusedExchange (123)
         :- * Project (130)
         :  +- * BroadcastHashJoin Inner BuildRight (129)
         :     :- * ColumnarToRow (127)
         :     :  +- Scan parquet default.catalog_sales (126)
         :     +- ReusedExchange (128)
         +- * Project (135)
            +- * BroadcastHashJoin Inner BuildRight (134)
               :- * ColumnarToRow (132)
               :  +- Scan parquet default.web_sales (131)
               +- ReusedExchange (133)


(121) Scan parquet default.store_sales
Output [3]: [ss_quantity#170, ss_list_price#171, ss_sold_date_sk#172]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#172), dynamicpruningexpression(ss_sold_date_sk#172 IN dynamicpruning#12)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(122) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#170, ss_list_price#171, ss_sold_date_sk#172]

(123) ReusedExchange [Reuses operator id: 154]
Output [1]: [d_date_sk#173]

(124) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#172]
Right keys [1]: [d_date_sk#173]
Join condition: None

(125) Project [codegen id : 2]
Output [2]: [ss_quantity#170 AS quantity#174, ss_list_price#171 AS list_price#175]
Input [4]: [ss_quantity#170, ss_list_price#171, ss_sold_date_sk#172, d_date_sk#173]

(126) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#176, cs_list_price#177, cs_sold_date_sk#178]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#178), dynamicpruningexpression(cs_sold_date_sk#178 IN dynamicpruning#179)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(127) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#176, cs_list_price#177, cs_sold_date_sk#178]

(128) ReusedExchange [Reuses operator id: 144]
Output [1]: [d_date_sk#180]

(129) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#178]
Right keys [1]: [d_date_sk#180]
Join condition: None

(130) Project [codegen id : 4]
Output [2]: [cs_quantity#176 AS quantity#181, cs_list_price#177 AS list_price#182]
Input [4]: [cs_quantity#176, cs_list_price#177, cs_sold_date_sk#178, d_date_sk#180]

(131) Scan parquet default.web_sales
Output [3]: [ws_quantity#183, ws_list_price#184, ws_sold_date_sk#185]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#185), dynamicpruningexpression(ws_sold_date_sk#185 IN dynamicpruning#179)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(132) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#183, ws_list_price#184, ws_sold_date_sk#185]

(133) ReusedExchange [Reuses operator id: 144]
Output [1]: [d_date_sk#186]

(134) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#185]
Right keys [1]: [d_date_sk#186]
Join condition: None

(135) Project [codegen id : 6]
Output [2]: [ws_quantity#183 AS quantity#187, ws_list_price#184 AS list_price#188]
Input [4]: [ws_quantity#183, ws_list_price#184, ws_sold_date_sk#185, d_date_sk#186]

(136) Union

(137) HashAggregate [codegen id : 7]
Input [2]: [quantity#174, list_price#175]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(quantity#174 as decimal(12,2))) * promote_precision(cast(list_price#175 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#189, count#190]
Results [2]: [sum#191, count#192]

(138) Exchange
Input [2]: [sum#191, count#192]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#193]

(139) HashAggregate [codegen id : 8]
Input [2]: [sum#191, count#192]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(quantity#174 as decimal(12,2))) * promote_precision(cast(list_price#175 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(quantity#174 as decimal(12,2))) * promote_precision(cast(list_price#175 as decimal(12,2)))), DecimalType(18,2)))#194]
Results [1]: [avg(CheckOverflow((promote_precision(cast(quantity#174 as decimal(12,2))) * promote_precision(cast(list_price#175 as decimal(12,2)))), DecimalType(18,2)))#194 AS average_sales#195]

Subquery:2 Hosting operator id = 121 Hosting Expression = ss_sold_date_sk#172 IN dynamicpruning#12

Subquery:3 Hosting operator id = 126 Hosting Expression = cs_sold_date_sk#178 IN dynamicpruning#179
BroadcastExchange (144)
+- * Project (143)
   +- * Filter (142)
      +- * ColumnarToRow (141)
         +- Scan parquet default.date_dim (140)


(140) Scan parquet default.date_dim
Output [2]: [d_date_sk#180, d_year#196]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(141) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#180, d_year#196]

(142) Filter [codegen id : 1]
Input [2]: [d_date_sk#180, d_year#196]
Condition : (((isnotnull(d_year#196) AND (d_year#196 >= 1998)) AND (d_year#196 <= 2000)) AND isnotnull(d_date_sk#180))

(143) Project [codegen id : 1]
Output [1]: [d_date_sk#180]
Input [2]: [d_date_sk#180, d_year#196]

(144) BroadcastExchange
Input [1]: [d_date_sk#180]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#197]

Subquery:4 Hosting operator id = 131 Hosting Expression = ws_sold_date_sk#185 IN dynamicpruning#179

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (149)
+- * Project (148)
   +- * Filter (147)
      +- * ColumnarToRow (146)
         +- Scan parquet default.date_dim (145)


(145) Scan parquet default.date_dim
Output [3]: [d_date_sk#47, d_year#198, d_moy#199]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(146) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#47, d_year#198, d_moy#199]

(147) Filter [codegen id : 1]
Input [3]: [d_date_sk#47, d_year#198, d_moy#199]
Condition : ((((isnotnull(d_year#198) AND isnotnull(d_moy#199)) AND (d_year#198 = 2000)) AND (d_moy#199 = 11)) AND isnotnull(d_date_sk#47))

(148) Project [codegen id : 1]
Output [1]: [d_date_sk#47]
Input [3]: [d_date_sk#47, d_year#198, d_moy#199]

(149) BroadcastExchange
Input [1]: [d_date_sk#47]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#200]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (154)
+- * Project (153)
   +- * Filter (152)
      +- * ColumnarToRow (151)
         +- Scan parquet default.date_dim (150)


(150) Scan parquet default.date_dim
Output [2]: [d_date_sk#27, d_year#201]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(151) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#27, d_year#201]

(152) Filter [codegen id : 1]
Input [2]: [d_date_sk#27, d_year#201]
Condition : (((isnotnull(d_year#201) AND (d_year#201 >= 1999)) AND (d_year#201 <= 2001)) AND isnotnull(d_date_sk#27))

(153) Project [codegen id : 1]
Output [1]: [d_date_sk#27]
Input [2]: [d_date_sk#27, d_year#201]

(154) BroadcastExchange
Input [1]: [d_date_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#202]

Subquery:7 Hosting operator id = 13 Hosting Expression = cs_sold_date_sk#18 IN dynamicpruning#12

Subquery:8 Hosting operator id = 36 Hosting Expression = ws_sold_date_sk#33 IN dynamicpruning#12

Subquery:9 Hosting operator id = 76 Hosting Expression = ReusedSubquery Subquery scalar-subquery#60, [id=#61]

Subquery:10 Hosting operator id = 62 Hosting Expression = cs_sold_date_sk#65 IN dynamicpruning#5

Subquery:11 Hosting operator id = 91 Hosting Expression = ReusedSubquery Subquery scalar-subquery#60, [id=#61]

Subquery:12 Hosting operator id = 77 Hosting Expression = ws_sold_date_sk#86 IN dynamicpruning#5


