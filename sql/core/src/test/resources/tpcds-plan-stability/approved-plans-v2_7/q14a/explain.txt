== Physical Plan ==
TakeOrderedAndProject (204)
+- * HashAggregate (203)
   +- Exchange (202)
      +- * HashAggregate (201)
         +- Union (200)
            :- * HashAggregate (180)
            :  +- Exchange (179)
            :     +- * HashAggregate (178)
            :        +- Union (177)
            :           :- * HashAggregate (157)
            :           :  +- Exchange (156)
            :           :     +- * HashAggregate (155)
            :           :        +- Union (154)
            :           :           :- * HashAggregate (134)
            :           :           :  +- Exchange (133)
            :           :           :     +- * HashAggregate (132)
            :           :           :        +- Union (131)
            :           :           :           :- * HashAggregate (111)
            :           :           :           :  +- Exchange (110)
            :           :           :           :     +- * HashAggregate (109)
            :           :           :           :        +- Union (108)
            :           :           :           :           :- * Project (75)
            :           :           :           :           :  +- * Filter (74)
            :           :           :           :           :     +- * HashAggregate (73)
            :           :           :           :           :        +- Exchange (72)
            :           :           :           :           :           +- * HashAggregate (71)
            :           :           :           :           :              +- * Project (70)
            :           :           :           :           :                 +- * BroadcastHashJoin Inner BuildRight (69)
            :           :           :           :           :                    :- * Project (63)
            :           :           :           :           :                    :  +- * BroadcastHashJoin Inner BuildRight (62)
            :           :           :           :           :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (55)
            :           :           :           :           :                    :     :  :- * Filter (3)
            :           :           :           :           :                    :     :  :  +- * ColumnarToRow (2)
            :           :           :           :           :                    :     :  :     +- Scan parquet default.store_sales (1)
            :           :           :           :           :                    :     :  +- BroadcastExchange (54)
            :           :           :           :           :                    :     :     +- * Project (53)
            :           :           :           :           :                    :     :        +- * BroadcastHashJoin Inner BuildRight (52)
            :           :           :           :           :                    :     :           :- * Filter (6)
            :           :           :           :           :                    :     :           :  +- * ColumnarToRow (5)
            :           :           :           :           :                    :     :           :     +- Scan parquet default.item (4)
            :           :           :           :           :                    :     :           +- BroadcastExchange (51)
            :           :           :           :           :                    :     :              +- * HashAggregate (50)
            :           :           :           :           :                    :     :                 +- Exchange (49)
            :           :           :           :           :                    :     :                    +- * HashAggregate (48)
            :           :           :           :           :                    :     :                       +- * BroadcastHashJoin LeftSemi BuildRight (47)
            :           :           :           :           :                    :     :                          :- * BroadcastHashJoin LeftSemi BuildRight (36)
            :           :           :           :           :                    :     :                          :  :- * Project (22)
            :           :           :           :           :                    :     :                          :  :  +- * BroadcastHashJoin Inner BuildRight (21)
            :           :           :           :           :                    :     :                          :  :     :- * Project (15)
            :           :           :           :           :                    :     :                          :  :     :  +- * BroadcastHashJoin Inner BuildRight (14)
            :           :           :           :           :                    :     :                          :  :     :     :- * Filter (9)
            :           :           :           :           :                    :     :                          :  :     :     :  +- * ColumnarToRow (8)
            :           :           :           :           :                    :     :                          :  :     :     :     +- Scan parquet default.store_sales (7)
            :           :           :           :           :                    :     :                          :  :     :     +- BroadcastExchange (13)
            :           :           :           :           :                    :     :                          :  :     :        +- * Filter (12)
            :           :           :           :           :                    :     :                          :  :     :           +- * ColumnarToRow (11)
            :           :           :           :           :                    :     :                          :  :     :              +- Scan parquet default.item (10)
            :           :           :           :           :                    :     :                          :  :     +- BroadcastExchange (20)
            :           :           :           :           :                    :     :                          :  :        +- * Project (19)
            :           :           :           :           :                    :     :                          :  :           +- * Filter (18)
            :           :           :           :           :                    :     :                          :  :              +- * ColumnarToRow (17)
            :           :           :           :           :                    :     :                          :  :                 +- Scan parquet default.date_dim (16)
            :           :           :           :           :                    :     :                          :  +- BroadcastExchange (35)
            :           :           :           :           :                    :     :                          :     +- * Project (34)
            :           :           :           :           :                    :     :                          :        +- * BroadcastHashJoin Inner BuildRight (33)
            :           :           :           :           :                    :     :                          :           :- * Project (31)
            :           :           :           :           :                    :     :                          :           :  +- * BroadcastHashJoin Inner BuildRight (30)
            :           :           :           :           :                    :     :                          :           :     :- * Filter (25)
            :           :           :           :           :                    :     :                          :           :     :  +- * ColumnarToRow (24)
            :           :           :           :           :                    :     :                          :           :     :     +- Scan parquet default.catalog_sales (23)
            :           :           :           :           :                    :     :                          :           :     +- BroadcastExchange (29)
            :           :           :           :           :                    :     :                          :           :        +- * Filter (28)
            :           :           :           :           :                    :     :                          :           :           +- * ColumnarToRow (27)
            :           :           :           :           :                    :     :                          :           :              +- Scan parquet default.item (26)
            :           :           :           :           :                    :     :                          :           +- ReusedExchange (32)
            :           :           :           :           :                    :     :                          +- BroadcastExchange (46)
            :           :           :           :           :                    :     :                             +- * Project (45)
            :           :           :           :           :                    :     :                                +- * BroadcastHashJoin Inner BuildRight (44)
            :           :           :           :           :                    :     :                                   :- * Project (42)
            :           :           :           :           :                    :     :                                   :  +- * BroadcastHashJoin Inner BuildRight (41)
            :           :           :           :           :                    :     :                                   :     :- * Filter (39)
            :           :           :           :           :                    :     :                                   :     :  +- * ColumnarToRow (38)
            :           :           :           :           :                    :     :                                   :     :     +- Scan parquet default.web_sales (37)
            :           :           :           :           :                    :     :                                   :     +- ReusedExchange (40)
            :           :           :           :           :                    :     :                                   +- ReusedExchange (43)
            :           :           :           :           :                    :     +- BroadcastExchange (61)
            :           :           :           :           :                    :        +- * BroadcastHashJoin LeftSemi BuildRight (60)
            :           :           :           :           :                    :           :- * Filter (58)
            :           :           :           :           :                    :           :  +- * ColumnarToRow (57)
            :           :           :           :           :                    :           :     +- Scan parquet default.item (56)
            :           :           :           :           :                    :           +- ReusedExchange (59)
            :           :           :           :           :                    +- BroadcastExchange (68)
            :           :           :           :           :                       +- * Project (67)
            :           :           :           :           :                          +- * Filter (66)
            :           :           :           :           :                             +- * ColumnarToRow (65)
            :           :           :           :           :                                +- Scan parquet default.date_dim (64)
            :           :           :           :           :- * Project (91)
            :           :           :           :           :  +- * Filter (90)
            :           :           :           :           :     +- * HashAggregate (89)
            :           :           :           :           :        +- Exchange (88)
            :           :           :           :           :           +- * HashAggregate (87)
            :           :           :           :           :              +- * Project (86)
            :           :           :           :           :                 +- * BroadcastHashJoin Inner BuildRight (85)
            :           :           :           :           :                    :- * Project (83)
            :           :           :           :           :                    :  +- * BroadcastHashJoin Inner BuildRight (82)
            :           :           :           :           :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (80)
            :           :           :           :           :                    :     :  :- * Filter (78)
            :           :           :           :           :                    :     :  :  +- * ColumnarToRow (77)
            :           :           :           :           :                    :     :  :     +- Scan parquet default.catalog_sales (76)
            :           :           :           :           :                    :     :  +- ReusedExchange (79)
            :           :           :           :           :                    :     +- ReusedExchange (81)
            :           :           :           :           :                    +- ReusedExchange (84)
            :           :           :           :           +- * Project (107)
            :           :           :           :              +- * Filter (106)
            :           :           :           :                 +- * HashAggregate (105)
            :           :           :           :                    +- Exchange (104)
            :           :           :           :                       +- * HashAggregate (103)
            :           :           :           :                          +- * Project (102)
            :           :           :           :                             +- * BroadcastHashJoin Inner BuildRight (101)
            :           :           :           :                                :- * Project (99)
            :           :           :           :                                :  +- * BroadcastHashJoin Inner BuildRight (98)
            :           :           :           :                                :     :- * BroadcastHashJoin LeftSemi BuildRight (96)
            :           :           :           :                                :     :  :- * Filter (94)
            :           :           :           :                                :     :  :  +- * ColumnarToRow (93)
            :           :           :           :                                :     :  :     +- Scan parquet default.web_sales (92)
            :           :           :           :                                :     :  +- ReusedExchange (95)
            :           :           :           :                                :     +- ReusedExchange (97)
            :           :           :           :                                +- ReusedExchange (100)
            :           :           :           +- * HashAggregate (130)
            :           :           :              +- Exchange (129)
            :           :           :                 +- * HashAggregate (128)
            :           :           :                    +- * HashAggregate (127)
            :           :           :                       +- Exchange (126)
            :           :           :                          +- * HashAggregate (125)
            :           :           :                             +- Union (124)
            :           :           :                                :- * Project (115)
            :           :           :                                :  +- * Filter (114)
            :           :           :                                :     +- * HashAggregate (113)
            :           :           :                                :        +- ReusedExchange (112)
            :           :           :                                :- * Project (119)
            :           :           :                                :  +- * Filter (118)
            :           :           :                                :     +- * HashAggregate (117)
            :           :           :                                :        +- ReusedExchange (116)
            :           :           :                                +- * Project (123)
            :           :           :                                   +- * Filter (122)
            :           :           :                                      +- * HashAggregate (121)
            :           :           :                                         +- ReusedExchange (120)
            :           :           +- * HashAggregate (153)
            :           :              +- Exchange (152)
            :           :                 +- * HashAggregate (151)
            :           :                    +- * HashAggregate (150)
            :           :                       +- Exchange (149)
            :           :                          +- * HashAggregate (148)
            :           :                             +- Union (147)
            :           :                                :- * Project (138)
            :           :                                :  +- * Filter (137)
            :           :                                :     +- * HashAggregate (136)
            :           :                                :        +- ReusedExchange (135)
            :           :                                :- * Project (142)
            :           :                                :  +- * Filter (141)
            :           :                                :     +- * HashAggregate (140)
            :           :                                :        +- ReusedExchange (139)
            :           :                                +- * Project (146)
            :           :                                   +- * Filter (145)
            :           :                                      +- * HashAggregate (144)
            :           :                                         +- ReusedExchange (143)
            :           +- * HashAggregate (176)
            :              +- Exchange (175)
            :                 +- * HashAggregate (174)
            :                    +- * HashAggregate (173)
            :                       +- Exchange (172)
            :                          +- * HashAggregate (171)
            :                             +- Union (170)
            :                                :- * Project (161)
            :                                :  +- * Filter (160)
            :                                :     +- * HashAggregate (159)
            :                                :        +- ReusedExchange (158)
            :                                :- * Project (165)
            :                                :  +- * Filter (164)
            :                                :     +- * HashAggregate (163)
            :                                :        +- ReusedExchange (162)
            :                                +- * Project (169)
            :                                   +- * Filter (168)
            :                                      +- * HashAggregate (167)
            :                                         +- ReusedExchange (166)
            +- * HashAggregate (199)
               +- Exchange (198)
                  +- * HashAggregate (197)
                     +- * HashAggregate (196)
                        +- Exchange (195)
                           +- * HashAggregate (194)
                              +- Union (193)
                                 :- * Project (184)
                                 :  +- * Filter (183)
                                 :     +- * HashAggregate (182)
                                 :        +- ReusedExchange (181)
                                 :- * Project (188)
                                 :  +- * Filter (187)
                                 :     +- * HashAggregate (186)
                                 :        +- ReusedExchange (185)
                                 +- * Project (192)
                                    +- * Filter (191)
                                       +- * HashAggregate (190)
                                          +- ReusedExchange (189)


(1) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 25]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]

(3) Filter [codegen id : 25]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(4) Scan parquet default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 11]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(6) Filter [codegen id : 11]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : ((isnotnull(i_brand_id#6) AND isnotnull(i_class_id#7)) AND isnotnull(i_category_id#8))

(7) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(8) ColumnarToRow [codegen id : 9]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]

(9) Filter [codegen id : 9]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(10) Scan parquet default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(12) Filter [codegen id : 1]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : (((isnotnull(i_item_sk#5) AND isnotnull(i_brand_id#6)) AND isnotnull(i_class_id#7)) AND isnotnull(i_category_id#8))

(13) BroadcastExchange
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9]

(14) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#5]
Join condition: None

(15) Project [codegen id : 9]
Output [4]: [ss_sold_date_sk#1, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(16) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(17) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#10, d_year#11]

(18) Filter [codegen id : 2]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1999)) AND (d_year#11 <= 2001)) AND isnotnull(d_date_sk#10))

(19) Project [codegen id : 2]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(20) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(21) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(22) Project [codegen id : 9]
Output [3]: [i_brand_id#6 AS brand_id#13, i_class_id#7 AS class_id#14, i_category_id#8 AS category_id#15]
Input [5]: [ss_sold_date_sk#1, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(23) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#16, cs_item_sk#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int>

(24) ColumnarToRow [codegen id : 5]
Input [2]: [cs_sold_date_sk#16, cs_item_sk#17]

(25) Filter [codegen id : 5]
Input [2]: [cs_sold_date_sk#16, cs_item_sk#17]
Condition : (isnotnull(cs_item_sk#17) AND isnotnull(cs_sold_date_sk#16))

(26) Scan parquet default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(27) ColumnarToRow [codegen id : 3]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(28) Filter [codegen id : 3]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : isnotnull(i_item_sk#5)

(29) BroadcastExchange
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#18]

(30) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_item_sk#17]
Right keys [1]: [i_item_sk#5]
Join condition: None

(31) Project [codegen id : 5]
Output [4]: [cs_sold_date_sk#16, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [6]: [cs_sold_date_sk#16, cs_item_sk#17, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(32) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#10]

(33) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#10]
Join condition: None

(34) Project [codegen id : 5]
Output [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Input [5]: [cs_sold_date_sk#16, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(35) BroadcastExchange
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#19]

(36) BroadcastHashJoin [codegen id : 9]
Left keys [6]: [coalesce(brand_id#13, 0), isnull(brand_id#13), coalesce(class_id#14, 0), isnull(class_id#14), coalesce(category_id#15, 0), isnull(category_id#15)]
Right keys [6]: [coalesce(i_brand_id#6, 0), isnull(i_brand_id#6), coalesce(i_class_id#7, 0), isnull(i_class_id#7), coalesce(i_category_id#8, 0), isnull(i_category_id#8)]
Join condition: None

(37) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#20, ws_item_sk#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int>

(38) ColumnarToRow [codegen id : 8]
Input [2]: [ws_sold_date_sk#20, ws_item_sk#21]

(39) Filter [codegen id : 8]
Input [2]: [ws_sold_date_sk#20, ws_item_sk#21]
Condition : (isnotnull(ws_item_sk#21) AND isnotnull(ws_sold_date_sk#20))

(40) ReusedExchange [Reuses operator id: 29]
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(41) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ws_item_sk#21]
Right keys [1]: [i_item_sk#5]
Join condition: None

(42) Project [codegen id : 8]
Output [4]: [ws_sold_date_sk#20, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [6]: [ws_sold_date_sk#20, ws_item_sk#21, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(43) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#10]

(44) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ws_sold_date_sk#20]
Right keys [1]: [d_date_sk#10]
Join condition: None

(45) Project [codegen id : 8]
Output [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Input [5]: [ws_sold_date_sk#20, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(46) BroadcastExchange
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#22]

(47) BroadcastHashJoin [codegen id : 9]
Left keys [6]: [coalesce(brand_id#13, 0), isnull(brand_id#13), coalesce(class_id#14, 0), isnull(class_id#14), coalesce(category_id#15, 0), isnull(category_id#15)]
Right keys [6]: [coalesce(i_brand_id#6, 0), isnull(i_brand_id#6), coalesce(i_class_id#7, 0), isnull(i_class_id#7), coalesce(i_category_id#8, 0), isnull(i_category_id#8)]
Join condition: None

(48) HashAggregate [codegen id : 9]
Input [3]: [brand_id#13, class_id#14, category_id#15]
Keys [3]: [brand_id#13, class_id#14, category_id#15]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#13, class_id#14, category_id#15]

(49) Exchange
Input [3]: [brand_id#13, class_id#14, category_id#15]
Arguments: hashpartitioning(brand_id#13, class_id#14, category_id#15, 5), true, [id=#23]

(50) HashAggregate [codegen id : 10]
Input [3]: [brand_id#13, class_id#14, category_id#15]
Keys [3]: [brand_id#13, class_id#14, category_id#15]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#13, class_id#14, category_id#15]

(51) BroadcastExchange
Input [3]: [brand_id#13, class_id#14, category_id#15]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#24]

(52) BroadcastHashJoin [codegen id : 11]
Left keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Right keys [3]: [brand_id#13, class_id#14, category_id#15]
Join condition: None

(53) Project [codegen id : 11]
Output [1]: [i_item_sk#5 AS ss_item_sk#25]
Input [7]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8, brand_id#13, class_id#14, category_id#15]

(54) BroadcastExchange
Input [1]: [ss_item_sk#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#26]

(55) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [ss_item_sk#25]
Join condition: None

(56) Scan parquet default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(57) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(58) Filter [codegen id : 23]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : isnotnull(i_item_sk#5)

(59) ReusedExchange [Reuses operator id: 54]
Output [1]: [ss_item_sk#25]

(60) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [i_item_sk#5]
Right keys [1]: [ss_item_sk#25]
Join condition: None

(61) BroadcastExchange
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(62) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#5]
Join condition: None

(63) Project [codegen id : 25]
Output [6]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(64) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(65) ColumnarToRow [codegen id : 24]
Input [3]: [d_date_sk#10, d_year#11, d_moy#28]

(66) Filter [codegen id : 24]
Input [3]: [d_date_sk#10, d_year#11, d_moy#28]
Condition : ((((isnotnull(d_year#11) AND isnotnull(d_moy#28)) AND (d_year#11 = 2000)) AND (d_moy#28 = 11)) AND isnotnull(d_date_sk#10))

(67) Project [codegen id : 24]
Output [1]: [d_date_sk#10]
Input [3]: [d_date_sk#10, d_year#11, d_moy#28]

(68) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#29]

(69) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(70) Project [codegen id : 25]
Output [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [7]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(71) HashAggregate [codegen id : 25]
Input [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#30, isEmpty#31, count#32]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#33, isEmpty#34, count#35]

(72) Exchange
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#33, isEmpty#34, count#35]
Arguments: hashpartitioning(i_brand_id#6, i_class_id#7, i_category_id#8, 5), true, [id=#36]

(73) HashAggregate [codegen id : 26]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#33, isEmpty#34, count#35]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#37, count(1)#38]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#37 AS sales#39, count(1)#38 AS number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#37 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#41]

(74) Filter [codegen id : 26]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#41]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#41) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#41 as decimal(32,6)) > cast(Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(75) Project [codegen id : 26]
Output [6]: [store AS channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#41]

(76) Scan parquet default.catalog_sales
Output [4]: [cs_sold_date_sk#16, cs_item_sk#17, cs_quantity#45, cs_list_price#46]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(77) ColumnarToRow [codegen id : 51]
Input [4]: [cs_sold_date_sk#16, cs_item_sk#17, cs_quantity#45, cs_list_price#46]

(78) Filter [codegen id : 51]
Input [4]: [cs_sold_date_sk#16, cs_item_sk#17, cs_quantity#45, cs_list_price#46]
Condition : (isnotnull(cs_item_sk#17) AND isnotnull(cs_sold_date_sk#16))

(79) ReusedExchange [Reuses operator id: 54]
Output [1]: [ss_item_sk#25]

(80) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#17]
Right keys [1]: [ss_item_sk#25]
Join condition: None

(81) ReusedExchange [Reuses operator id: 61]
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(82) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#17]
Right keys [1]: [i_item_sk#5]
Join condition: None

(83) Project [codegen id : 51]
Output [6]: [cs_sold_date_sk#16, cs_quantity#45, cs_list_price#46, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [8]: [cs_sold_date_sk#16, cs_item_sk#17, cs_quantity#45, cs_list_price#46, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(84) ReusedExchange [Reuses operator id: 68]
Output [1]: [d_date_sk#10]

(85) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#10]
Join condition: None

(86) Project [codegen id : 51]
Output [5]: [cs_quantity#45, cs_list_price#46, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [7]: [cs_sold_date_sk#16, cs_quantity#45, cs_list_price#46, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(87) HashAggregate [codegen id : 51]
Input [5]: [cs_quantity#45, cs_list_price#46, i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#47, isEmpty#48, count#49]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#50, isEmpty#51, count#52]

(88) Exchange
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#50, isEmpty#51, count#52]
Arguments: hashpartitioning(i_brand_id#6, i_class_id#7, i_category_id#8, 5), true, [id=#53]

(89) HashAggregate [codegen id : 52]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#50, isEmpty#51, count#52]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#54, count(1)#55]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#54 AS sales#56, count(1)#55 AS number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#54 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#58]

(90) Filter [codegen id : 52]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#58]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#58) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#58 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(91) Project [codegen id : 52]
Output [6]: [catalog AS channel#59, i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#58]

(92) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#20, ws_item_sk#21, ws_quantity#60, ws_list_price#61]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(93) ColumnarToRow [codegen id : 77]
Input [4]: [ws_sold_date_sk#20, ws_item_sk#21, ws_quantity#60, ws_list_price#61]

(94) Filter [codegen id : 77]
Input [4]: [ws_sold_date_sk#20, ws_item_sk#21, ws_quantity#60, ws_list_price#61]
Condition : (isnotnull(ws_item_sk#21) AND isnotnull(ws_sold_date_sk#20))

(95) ReusedExchange [Reuses operator id: 54]
Output [1]: [ss_item_sk#25]

(96) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#21]
Right keys [1]: [ss_item_sk#25]
Join condition: None

(97) ReusedExchange [Reuses operator id: 61]
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(98) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#21]
Right keys [1]: [i_item_sk#5]
Join condition: None

(99) Project [codegen id : 77]
Output [6]: [ws_sold_date_sk#20, ws_quantity#60, ws_list_price#61, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [8]: [ws_sold_date_sk#20, ws_item_sk#21, ws_quantity#60, ws_list_price#61, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(100) ReusedExchange [Reuses operator id: 68]
Output [1]: [d_date_sk#10]

(101) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_sold_date_sk#20]
Right keys [1]: [d_date_sk#10]
Join condition: None

(102) Project [codegen id : 77]
Output [5]: [ws_quantity#60, ws_list_price#61, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [7]: [ws_sold_date_sk#20, ws_quantity#60, ws_list_price#61, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(103) HashAggregate [codegen id : 77]
Input [5]: [ws_quantity#60, ws_list_price#61, i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#62, isEmpty#63, count#64]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#65, isEmpty#66, count#67]

(104) Exchange
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#65, isEmpty#66, count#67]
Arguments: hashpartitioning(i_brand_id#6, i_class_id#7, i_category_id#8, 5), true, [id=#68]

(105) HashAggregate [codegen id : 78]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#65, isEmpty#66, count#67]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#69, count(1)#70]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#69 AS sales#71, count(1)#70 AS number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#69 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#73]

(106) Filter [codegen id : 78]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#73]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#73) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#73 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(107) Project [codegen id : 78]
Output [6]: [web AS channel#74, i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#73]

(108) Union

(109) HashAggregate [codegen id : 79]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40]
Keys [4]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(sales#39), partial_sum(number_sales#40)]
Aggregate Attributes [3]: [sum#75, isEmpty#76, sum#77]
Results [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#78, isEmpty#79, sum#80]

(110) Exchange
Input [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#78, isEmpty#79, sum#80]
Arguments: hashpartitioning(channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, 5), true, [id=#81]

(111) HashAggregate [codegen id : 80]
Input [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#78, isEmpty#79, sum#80]
Keys [4]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(sales#39), sum(number_sales#40)]
Aggregate Attributes [2]: [sum(sales#39)#82, sum(number_sales#40)#83]
Results [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum(sales#39)#82 AS sum_sales#84, sum(number_sales#40)#83 AS number_sales#85]

(112) ReusedExchange [Reuses operator id: 72]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#86, isEmpty#87, count#88]

(113) HashAggregate [codegen id : 106]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#86, isEmpty#87, count#88]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#89, count(1)#90]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#89 AS sales#39, count(1)#90 AS number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#89 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#91]

(114) Filter [codegen id : 106]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#91]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#91) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#91 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(115) Project [codegen id : 106]
Output [6]: [store AS channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#91]

(116) ReusedExchange [Reuses operator id: 88]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#92, isEmpty#93, count#94]

(117) HashAggregate [codegen id : 132]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#92, isEmpty#93, count#94]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#95, count(1)#96]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#95 AS sales#56, count(1)#96 AS number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#95 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#97]

(118) Filter [codegen id : 132]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#97]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#97) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#97 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(119) Project [codegen id : 132]
Output [6]: [catalog AS channel#98, i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#97]

(120) ReusedExchange [Reuses operator id: 104]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#99, isEmpty#100, count#101]

(121) HashAggregate [codegen id : 158]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#99, isEmpty#100, count#101]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#102, count(1)#103]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#102 AS sales#71, count(1)#103 AS number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#102 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#104]

(122) Filter [codegen id : 158]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#104]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#104) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#104 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(123) Project [codegen id : 158]
Output [6]: [web AS channel#105, i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#104]

(124) Union

(125) HashAggregate [codegen id : 159]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40]
Keys [4]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(sales#39), partial_sum(number_sales#40)]
Aggregate Attributes [3]: [sum#106, isEmpty#107, sum#108]
Results [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#109, isEmpty#110, sum#111]

(126) Exchange
Input [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#109, isEmpty#110, sum#111]
Arguments: hashpartitioning(channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, 5), true, [id=#112]

(127) HashAggregate [codegen id : 160]
Input [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#109, isEmpty#110, sum#111]
Keys [4]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(sales#39), sum(number_sales#40)]
Aggregate Attributes [2]: [sum(sales#39)#113, sum(number_sales#40)#114]
Results [5]: [channel#44, i_brand_id#6, i_class_id#7, sum(sales#39)#113 AS sum_sales#84, sum(number_sales#40)#114 AS number_sales#85]

(128) HashAggregate [codegen id : 160]
Input [5]: [channel#44, i_brand_id#6, i_class_id#7, sum_sales#84, number_sales#85]
Keys [3]: [channel#44, i_brand_id#6, i_class_id#7]
Functions [2]: [partial_sum(sum_sales#84), partial_sum(number_sales#85)]
Aggregate Attributes [3]: [sum#115, isEmpty#116, sum#117]
Results [6]: [channel#44, i_brand_id#6, i_class_id#7, sum#118, isEmpty#119, sum#120]

(129) Exchange
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, sum#118, isEmpty#119, sum#120]
Arguments: hashpartitioning(channel#44, i_brand_id#6, i_class_id#7, 5), true, [id=#121]

(130) HashAggregate [codegen id : 161]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, sum#118, isEmpty#119, sum#120]
Keys [3]: [channel#44, i_brand_id#6, i_class_id#7]
Functions [2]: [sum(sum_sales#84), sum(number_sales#85)]
Aggregate Attributes [2]: [sum(sum_sales#84)#122, sum(number_sales#85)#123]
Results [6]: [channel#44, i_brand_id#6, i_class_id#7, null AS i_category_id#124, sum(sum_sales#84)#122 AS sum(sum_sales)#125, sum(number_sales#85)#123 AS sum(number_sales)#126]

(131) Union

(132) HashAggregate [codegen id : 162]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Keys [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

(133) Exchange
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Arguments: hashpartitioning(channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85, 5), true, [id=#127]

(134) HashAggregate [codegen id : 163]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Keys [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

(135) ReusedExchange [Reuses operator id: 72]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#128, isEmpty#129, count#130]

(136) HashAggregate [codegen id : 189]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#128, isEmpty#129, count#130]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#131, count(1)#132]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#131 AS sales#39, count(1)#132 AS number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#131 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#133]

(137) Filter [codegen id : 189]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#133]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#133) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#133 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(138) Project [codegen id : 189]
Output [6]: [store AS channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#133]

(139) ReusedExchange [Reuses operator id: 88]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#134, isEmpty#135, count#136]

(140) HashAggregate [codegen id : 215]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#134, isEmpty#135, count#136]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#137, count(1)#138]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#137 AS sales#56, count(1)#138 AS number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#137 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#139]

(141) Filter [codegen id : 215]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#139]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#139) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#139 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(142) Project [codegen id : 215]
Output [6]: [catalog AS channel#140, i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#139]

(143) ReusedExchange [Reuses operator id: 104]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#141, isEmpty#142, count#143]

(144) HashAggregate [codegen id : 241]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#141, isEmpty#142, count#143]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#144, count(1)#145]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#144 AS sales#71, count(1)#145 AS number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#144 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#146]

(145) Filter [codegen id : 241]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#146]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#146) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#146 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(146) Project [codegen id : 241]
Output [6]: [web AS channel#147, i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#146]

(147) Union

(148) HashAggregate [codegen id : 242]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40]
Keys [4]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(sales#39), partial_sum(number_sales#40)]
Aggregate Attributes [3]: [sum#148, isEmpty#149, sum#150]
Results [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#151, isEmpty#152, sum#153]

(149) Exchange
Input [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#151, isEmpty#152, sum#153]
Arguments: hashpartitioning(channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, 5), true, [id=#154]

(150) HashAggregate [codegen id : 243]
Input [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#151, isEmpty#152, sum#153]
Keys [4]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(sales#39), sum(number_sales#40)]
Aggregate Attributes [2]: [sum(sales#39)#155, sum(number_sales#40)#156]
Results [4]: [channel#44, i_brand_id#6, sum(sales#39)#155 AS sum_sales#84, sum(number_sales#40)#156 AS number_sales#85]

(151) HashAggregate [codegen id : 243]
Input [4]: [channel#44, i_brand_id#6, sum_sales#84, number_sales#85]
Keys [2]: [channel#44, i_brand_id#6]
Functions [2]: [partial_sum(sum_sales#84), partial_sum(number_sales#85)]
Aggregate Attributes [3]: [sum#157, isEmpty#158, sum#159]
Results [5]: [channel#44, i_brand_id#6, sum#160, isEmpty#161, sum#162]

(152) Exchange
Input [5]: [channel#44, i_brand_id#6, sum#160, isEmpty#161, sum#162]
Arguments: hashpartitioning(channel#44, i_brand_id#6, 5), true, [id=#163]

(153) HashAggregate [codegen id : 244]
Input [5]: [channel#44, i_brand_id#6, sum#160, isEmpty#161, sum#162]
Keys [2]: [channel#44, i_brand_id#6]
Functions [2]: [sum(sum_sales#84), sum(number_sales#85)]
Aggregate Attributes [2]: [sum(sum_sales#84)#164, sum(number_sales#85)#165]
Results [6]: [channel#44, i_brand_id#6, null AS i_class_id#166, null AS i_category_id#167, sum(sum_sales#84)#164 AS sum(sum_sales)#168, sum(number_sales#85)#165 AS sum(number_sales)#169]

(154) Union

(155) HashAggregate [codegen id : 245]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Keys [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

(156) Exchange
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Arguments: hashpartitioning(channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85, 5), true, [id=#170]

(157) HashAggregate [codegen id : 246]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Keys [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

(158) ReusedExchange [Reuses operator id: 72]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#171, isEmpty#172, count#173]

(159) HashAggregate [codegen id : 272]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#171, isEmpty#172, count#173]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#174, count(1)#175]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#174 AS sales#39, count(1)#175 AS number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#174 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#176]

(160) Filter [codegen id : 272]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#176]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#176) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#176 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(161) Project [codegen id : 272]
Output [6]: [store AS channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#176]

(162) ReusedExchange [Reuses operator id: 88]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#177, isEmpty#178, count#179]

(163) HashAggregate [codegen id : 298]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#177, isEmpty#178, count#179]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#180, count(1)#181]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#180 AS sales#56, count(1)#181 AS number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#180 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#182]

(164) Filter [codegen id : 298]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#182]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#182) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#182 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(165) Project [codegen id : 298]
Output [6]: [catalog AS channel#183, i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#182]

(166) ReusedExchange [Reuses operator id: 104]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#184, isEmpty#185, count#186]

(167) HashAggregate [codegen id : 324]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#184, isEmpty#185, count#186]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#187, count(1)#188]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#187 AS sales#71, count(1)#188 AS number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#187 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#189]

(168) Filter [codegen id : 324]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#189]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#189) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#189 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(169) Project [codegen id : 324]
Output [6]: [web AS channel#190, i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#189]

(170) Union

(171) HashAggregate [codegen id : 325]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40]
Keys [4]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(sales#39), partial_sum(number_sales#40)]
Aggregate Attributes [3]: [sum#191, isEmpty#192, sum#193]
Results [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#194, isEmpty#195, sum#196]

(172) Exchange
Input [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#194, isEmpty#195, sum#196]
Arguments: hashpartitioning(channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, 5), true, [id=#197]

(173) HashAggregate [codegen id : 326]
Input [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#194, isEmpty#195, sum#196]
Keys [4]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(sales#39), sum(number_sales#40)]
Aggregate Attributes [2]: [sum(sales#39)#198, sum(number_sales#40)#199]
Results [3]: [channel#44, sum(sales#39)#198 AS sum_sales#84, sum(number_sales#40)#199 AS number_sales#85]

(174) HashAggregate [codegen id : 326]
Input [3]: [channel#44, sum_sales#84, number_sales#85]
Keys [1]: [channel#44]
Functions [2]: [partial_sum(sum_sales#84), partial_sum(number_sales#85)]
Aggregate Attributes [3]: [sum#200, isEmpty#201, sum#202]
Results [4]: [channel#44, sum#203, isEmpty#204, sum#205]

(175) Exchange
Input [4]: [channel#44, sum#203, isEmpty#204, sum#205]
Arguments: hashpartitioning(channel#44, 5), true, [id=#206]

(176) HashAggregate [codegen id : 327]
Input [4]: [channel#44, sum#203, isEmpty#204, sum#205]
Keys [1]: [channel#44]
Functions [2]: [sum(sum_sales#84), sum(number_sales#85)]
Aggregate Attributes [2]: [sum(sum_sales#84)#207, sum(number_sales#85)#208]
Results [6]: [channel#44, null AS i_brand_id#209, null AS i_class_id#210, null AS i_category_id#211, sum(sum_sales#84)#207 AS sum(sum_sales)#212, sum(number_sales#85)#208 AS sum(number_sales)#213]

(177) Union

(178) HashAggregate [codegen id : 328]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Keys [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

(179) Exchange
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Arguments: hashpartitioning(channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85, 5), true, [id=#214]

(180) HashAggregate [codegen id : 329]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Keys [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

(181) ReusedExchange [Reuses operator id: 72]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#215, isEmpty#216, count#217]

(182) HashAggregate [codegen id : 355]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#215, isEmpty#216, count#217]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#218, count(1)#219]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#218 AS sales#39, count(1)#219 AS number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#218 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#220]

(183) Filter [codegen id : 355]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#220]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#220) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#220 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(184) Project [codegen id : 355]
Output [6]: [store AS channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#220]

(185) ReusedExchange [Reuses operator id: 88]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#221, isEmpty#222, count#223]

(186) HashAggregate [codegen id : 381]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#221, isEmpty#222, count#223]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#224, count(1)#225]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#224 AS sales#56, count(1)#225 AS number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#224 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#226]

(187) Filter [codegen id : 381]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#226]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#226) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#226 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(188) Project [codegen id : 381]
Output [6]: [catalog AS channel#227, i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#56, number_sales#57, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#46 as decimal(12,2)))), DecimalType(18,2), true))#226]

(189) ReusedExchange [Reuses operator id: 104]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#228, isEmpty#229, count#230]

(190) HashAggregate [codegen id : 407]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#228, isEmpty#229, count#230]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#231, count(1)#232]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#231 AS sales#71, count(1)#232 AS number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#231 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#233]

(191) Filter [codegen id : 407]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#233]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#233) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#233 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#42, [id=#43] as decimal(32,6))))

(192) Project [codegen id : 407]
Output [6]: [web AS channel#234, i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#71, number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#61 as decimal(12,2)))), DecimalType(18,2), true))#233]

(193) Union

(194) HashAggregate [codegen id : 408]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sales#39, number_sales#40]
Keys [4]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(sales#39), partial_sum(number_sales#40)]
Aggregate Attributes [3]: [sum#235, isEmpty#236, sum#237]
Results [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#238, isEmpty#239, sum#240]

(195) Exchange
Input [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#238, isEmpty#239, sum#240]
Arguments: hashpartitioning(channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, 5), true, [id=#241]

(196) HashAggregate [codegen id : 409]
Input [7]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum#238, isEmpty#239, sum#240]
Keys [4]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(sales#39), sum(number_sales#40)]
Aggregate Attributes [2]: [sum(sales#39)#242, sum(number_sales#40)#243]
Results [2]: [sum(sales#39)#242 AS sum_sales#84, sum(number_sales#40)#243 AS number_sales#85]

(197) HashAggregate [codegen id : 409]
Input [2]: [sum_sales#84, number_sales#85]
Keys: []
Functions [2]: [partial_sum(sum_sales#84), partial_sum(number_sales#85)]
Aggregate Attributes [3]: [sum#244, isEmpty#245, sum#246]
Results [3]: [sum#247, isEmpty#248, sum#249]

(198) Exchange
Input [3]: [sum#247, isEmpty#248, sum#249]
Arguments: SinglePartition, true, [id=#250]

(199) HashAggregate [codegen id : 410]
Input [3]: [sum#247, isEmpty#248, sum#249]
Keys: []
Functions [2]: [sum(sum_sales#84), sum(number_sales#85)]
Aggregate Attributes [2]: [sum(sum_sales#84)#251, sum(number_sales#85)#252]
Results [6]: [null AS channel#253, null AS i_brand_id#254, null AS i_class_id#255, null AS i_category_id#256, sum(sum_sales#84)#251 AS sum(sum_sales)#257, sum(number_sales#85)#252 AS sum(number_sales)#258]

(200) Union

(201) HashAggregate [codegen id : 411]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Keys [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

(202) Exchange
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Arguments: hashpartitioning(channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85, 5), true, [id=#259]

(203) HashAggregate [codegen id : 412]
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Keys [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

(204) TakeOrderedAndProject
Input [6]: [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]
Arguments: 100, [channel#44 ASC NULLS FIRST, i_brand_id#6 ASC NULLS FIRST, i_class_id#7 ASC NULLS FIRST, i_category_id#8 ASC NULLS FIRST], [channel#44, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#84, number_sales#85]

===== Subqueries =====

Subquery:1 Hosting operator id = 74 Hosting Expression = Subquery scalar-subquery#42, [id=#43]
* HashAggregate (234)
+- Exchange (233)
   +- * HashAggregate (232)
      +- Union (231)
         :- * Project (214)
         :  +- * BroadcastHashJoin Inner BuildRight (213)
         :     :- * Filter (207)
         :     :  +- * ColumnarToRow (206)
         :     :     +- Scan parquet default.store_sales (205)
         :     +- BroadcastExchange (212)
         :        +- * Project (211)
         :           +- * Filter (210)
         :              +- * ColumnarToRow (209)
         :                 +- Scan parquet default.date_dim (208)
         :- * Project (224)
         :  +- * BroadcastHashJoin Inner BuildRight (223)
         :     :- * Filter (217)
         :     :  +- * ColumnarToRow (216)
         :     :     +- Scan parquet default.catalog_sales (215)
         :     +- BroadcastExchange (222)
         :        +- * Project (221)
         :           +- * Filter (220)
         :              +- * ColumnarToRow (219)
         :                 +- Scan parquet default.date_dim (218)
         +- * Project (230)
            +- * BroadcastHashJoin Inner BuildRight (229)
               :- * Filter (227)
               :  +- * ColumnarToRow (226)
               :     +- Scan parquet default.web_sales (225)
               +- ReusedExchange (228)


(205) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(206) ColumnarToRow [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]

(207) Filter [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Condition : isnotnull(ss_sold_date_sk#1)

(208) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(209) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]

(210) Filter [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1999)) AND (d_year#11 <= 2001)) AND isnotnull(d_date_sk#10))

(211) Project [codegen id : 1]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(212) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#260]

(213) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(214) Project [codegen id : 2]
Output [2]: [ss_quantity#3 AS quantity#261, ss_list_price#4 AS list_price#262]
Input [4]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, d_date_sk#10]

(215) Scan parquet default.catalog_sales
Output [3]: [cs_sold_date_sk#16, cs_quantity#45, cs_list_price#46]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(216) ColumnarToRow [codegen id : 4]
Input [3]: [cs_sold_date_sk#16, cs_quantity#45, cs_list_price#46]

(217) Filter [codegen id : 4]
Input [3]: [cs_sold_date_sk#16, cs_quantity#45, cs_list_price#46]
Condition : isnotnull(cs_sold_date_sk#16)

(218) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(219) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]

(220) Filter [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1998)) AND (d_year#11 <= 2000)) AND isnotnull(d_date_sk#10))

(221) Project [codegen id : 3]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(222) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#263]

(223) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#10]
Join condition: None

(224) Project [codegen id : 4]
Output [2]: [cs_quantity#45 AS quantity#264, cs_list_price#46 AS list_price#265]
Input [4]: [cs_sold_date_sk#16, cs_quantity#45, cs_list_price#46, d_date_sk#10]

(225) Scan parquet default.web_sales
Output [3]: [ws_sold_date_sk#20, ws_quantity#60, ws_list_price#61]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(226) ColumnarToRow [codegen id : 6]
Input [3]: [ws_sold_date_sk#20, ws_quantity#60, ws_list_price#61]

(227) Filter [codegen id : 6]
Input [3]: [ws_sold_date_sk#20, ws_quantity#60, ws_list_price#61]
Condition : isnotnull(ws_sold_date_sk#20)

(228) ReusedExchange [Reuses operator id: 222]
Output [1]: [d_date_sk#10]

(229) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#20]
Right keys [1]: [d_date_sk#10]
Join condition: None

(230) Project [codegen id : 6]
Output [2]: [ws_quantity#60 AS quantity#266, ws_list_price#61 AS list_price#267]
Input [4]: [ws_sold_date_sk#20, ws_quantity#60, ws_list_price#61, d_date_sk#10]

(231) Union

(232) HashAggregate [codegen id : 7]
Input [2]: [quantity#261, list_price#262]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#261 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#262 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#268, count#269]
Results [2]: [sum#270, count#271]

(233) Exchange
Input [2]: [sum#270, count#271]
Arguments: SinglePartition, true, [id=#272]

(234) HashAggregate [codegen id : 8]
Input [2]: [sum#270, count#271]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#261 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#262 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#261 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#262 as decimal(12,2)))), DecimalType(18,2), true))#273]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#261 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#262 as decimal(12,2)))), DecimalType(18,2), true))#273 AS average_sales#274]

Subquery:2 Hosting operator id = 90 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]

Subquery:3 Hosting operator id = 106 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]

Subquery:4 Hosting operator id = 114 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]

Subquery:5 Hosting operator id = 118 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]

Subquery:6 Hosting operator id = 122 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]

Subquery:7 Hosting operator id = 137 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]

Subquery:8 Hosting operator id = 141 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]

Subquery:9 Hosting operator id = 145 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]

Subquery:10 Hosting operator id = 160 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]

Subquery:11 Hosting operator id = 164 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]

Subquery:12 Hosting operator id = 168 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]

Subquery:13 Hosting operator id = 183 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]

Subquery:14 Hosting operator id = 187 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]

Subquery:15 Hosting operator id = 191 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]


