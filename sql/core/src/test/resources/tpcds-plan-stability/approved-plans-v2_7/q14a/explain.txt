== Physical Plan ==
TakeOrderedAndProject (200)
+- * HashAggregate (199)
   +- Exchange (198)
      +- * HashAggregate (197)
         +- Union (196)
            :- * HashAggregate (119)
            :  +- Exchange (118)
            :     +- * HashAggregate (117)
            :        +- Union (116)
            :           :- * Project (83)
            :           :  +- * Filter (82)
            :           :     +- * HashAggregate (81)
            :           :        +- Exchange (80)
            :           :           +- * HashAggregate (79)
            :           :              +- * Project (78)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (77)
            :           :                    :- * Project (71)
            :           :                    :  +- * BroadcastHashJoin Inner BuildRight (70)
            :           :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (63)
            :           :                    :     :  :- * Filter (3)
            :           :                    :     :  :  +- * ColumnarToRow (2)
            :           :                    :     :  :     +- Scan parquet default.store_sales (1)
            :           :                    :     :  +- BroadcastExchange (62)
            :           :                    :     :     +- * Project (61)
            :           :                    :     :        +- * BroadcastHashJoin Inner BuildRight (60)
            :           :                    :     :           :- * Filter (6)
            :           :                    :     :           :  +- * ColumnarToRow (5)
            :           :                    :     :           :     +- Scan parquet default.item (4)
            :           :                    :     :           +- BroadcastExchange (59)
            :           :                    :     :              +- * BroadcastHashJoin LeftSemi BuildRight (58)
            :           :                    :     :                 :- * HashAggregate (44)
            :           :                    :     :                 :  +- * HashAggregate (43)
            :           :                    :     :                 :     +- * BroadcastHashJoin LeftSemi BuildRight (42)
            :           :                    :     :                 :        :- * HashAggregate (25)
            :           :                    :     :                 :        :  +- Exchange (24)
            :           :                    :     :                 :        :     +- * HashAggregate (23)
            :           :                    :     :                 :        :        +- * Project (22)
            :           :                    :     :                 :        :           +- * BroadcastHashJoin Inner BuildRight (21)
            :           :                    :     :                 :        :              :- * Project (15)
            :           :                    :     :                 :        :              :  +- * BroadcastHashJoin Inner BuildRight (14)
            :           :                    :     :                 :        :              :     :- * Filter (9)
            :           :                    :     :                 :        :              :     :  +- * ColumnarToRow (8)
            :           :                    :     :                 :        :              :     :     +- Scan parquet default.store_sales (7)
            :           :                    :     :                 :        :              :     +- BroadcastExchange (13)
            :           :                    :     :                 :        :              :        +- * Filter (12)
            :           :                    :     :                 :        :              :           +- * ColumnarToRow (11)
            :           :                    :     :                 :        :              :              +- Scan parquet default.item (10)
            :           :                    :     :                 :        :              +- BroadcastExchange (20)
            :           :                    :     :                 :        :                 +- * Project (19)
            :           :                    :     :                 :        :                    +- * Filter (18)
            :           :                    :     :                 :        :                       +- * ColumnarToRow (17)
            :           :                    :     :                 :        :                          +- Scan parquet default.date_dim (16)
            :           :                    :     :                 :        +- BroadcastExchange (41)
            :           :                    :     :                 :           +- * HashAggregate (40)
            :           :                    :     :                 :              +- Exchange (39)
            :           :                    :     :                 :                 +- * HashAggregate (38)
            :           :                    :     :                 :                    +- * Project (37)
            :           :                    :     :                 :                       +- * BroadcastHashJoin Inner BuildRight (36)
            :           :                    :     :                 :                          :- * Project (34)
            :           :                    :     :                 :                          :  +- * BroadcastHashJoin Inner BuildRight (33)
            :           :                    :     :                 :                          :     :- * Filter (28)
            :           :                    :     :                 :                          :     :  +- * ColumnarToRow (27)
            :           :                    :     :                 :                          :     :     +- Scan parquet default.catalog_sales (26)
            :           :                    :     :                 :                          :     +- BroadcastExchange (32)
            :           :                    :     :                 :                          :        +- * Filter (31)
            :           :                    :     :                 :                          :           +- * ColumnarToRow (30)
            :           :                    :     :                 :                          :              +- Scan parquet default.item (29)
            :           :                    :     :                 :                          +- ReusedExchange (35)
            :           :                    :     :                 +- BroadcastExchange (57)
            :           :                    :     :                    +- * HashAggregate (56)
            :           :                    :     :                       +- Exchange (55)
            :           :                    :     :                          +- * HashAggregate (54)
            :           :                    :     :                             +- * Project (53)
            :           :                    :     :                                +- * BroadcastHashJoin Inner BuildRight (52)
            :           :                    :     :                                   :- * Project (50)
            :           :                    :     :                                   :  +- * BroadcastHashJoin Inner BuildRight (49)
            :           :                    :     :                                   :     :- * Filter (47)
            :           :                    :     :                                   :     :  +- * ColumnarToRow (46)
            :           :                    :     :                                   :     :     +- Scan parquet default.web_sales (45)
            :           :                    :     :                                   :     +- ReusedExchange (48)
            :           :                    :     :                                   +- ReusedExchange (51)
            :           :                    :     +- BroadcastExchange (69)
            :           :                    :        +- * BroadcastHashJoin LeftSemi BuildRight (68)
            :           :                    :           :- * Filter (66)
            :           :                    :           :  +- * ColumnarToRow (65)
            :           :                    :           :     +- Scan parquet default.item (64)
            :           :                    :           +- ReusedExchange (67)
            :           :                    +- BroadcastExchange (76)
            :           :                       +- * Project (75)
            :           :                          +- * Filter (74)
            :           :                             +- * ColumnarToRow (73)
            :           :                                +- Scan parquet default.date_dim (72)
            :           :- * Project (99)
            :           :  +- * Filter (98)
            :           :     +- * HashAggregate (97)
            :           :        +- Exchange (96)
            :           :           +- * HashAggregate (95)
            :           :              +- * Project (94)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (93)
            :           :                    :- * Project (91)
            :           :                    :  +- * BroadcastHashJoin Inner BuildRight (90)
            :           :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (88)
            :           :                    :     :  :- * Filter (86)
            :           :                    :     :  :  +- * ColumnarToRow (85)
            :           :                    :     :  :     +- Scan parquet default.catalog_sales (84)
            :           :                    :     :  +- ReusedExchange (87)
            :           :                    :     +- ReusedExchange (89)
            :           :                    +- ReusedExchange (92)
            :           +- * Project (115)
            :              +- * Filter (114)
            :                 +- * HashAggregate (113)
            :                    +- Exchange (112)
            :                       +- * HashAggregate (111)
            :                          +- * Project (110)
            :                             +- * BroadcastHashJoin Inner BuildRight (109)
            :                                :- * Project (107)
            :                                :  +- * BroadcastHashJoin Inner BuildRight (106)
            :                                :     :- * BroadcastHashJoin LeftSemi BuildRight (104)
            :                                :     :  :- * Filter (102)
            :                                :     :  :  +- * ColumnarToRow (101)
            :                                :     :  :     +- Scan parquet default.web_sales (100)
            :                                :     :  +- ReusedExchange (103)
            :                                :     +- ReusedExchange (105)
            :                                +- ReusedExchange (108)
            :- * HashAggregate (138)
            :  +- Exchange (137)
            :     +- * HashAggregate (136)
            :        +- * HashAggregate (135)
            :           +- Exchange (134)
            :              +- * HashAggregate (133)
            :                 +- Union (132)
            :                    :- * Project (123)
            :                    :  +- * Filter (122)
            :                    :     +- * HashAggregate (121)
            :                    :        +- ReusedExchange (120)
            :                    :- * Project (127)
            :                    :  +- * Filter (126)
            :                    :     +- * HashAggregate (125)
            :                    :        +- ReusedExchange (124)
            :                    +- * Project (131)
            :                       +- * Filter (130)
            :                          +- * HashAggregate (129)
            :                             +- ReusedExchange (128)
            :- * HashAggregate (157)
            :  +- Exchange (156)
            :     +- * HashAggregate (155)
            :        +- * HashAggregate (154)
            :           +- Exchange (153)
            :              +- * HashAggregate (152)
            :                 +- Union (151)
            :                    :- * Project (142)
            :                    :  +- * Filter (141)
            :                    :     +- * HashAggregate (140)
            :                    :        +- ReusedExchange (139)
            :                    :- * Project (146)
            :                    :  +- * Filter (145)
            :                    :     +- * HashAggregate (144)
            :                    :        +- ReusedExchange (143)
            :                    +- * Project (150)
            :                       +- * Filter (149)
            :                          +- * HashAggregate (148)
            :                             +- ReusedExchange (147)
            :- * HashAggregate (176)
            :  +- Exchange (175)
            :     +- * HashAggregate (174)
            :        +- * HashAggregate (173)
            :           +- Exchange (172)
            :              +- * HashAggregate (171)
            :                 +- Union (170)
            :                    :- * Project (161)
            :                    :  +- * Filter (160)
            :                    :     +- * HashAggregate (159)
            :                    :        +- ReusedExchange (158)
            :                    :- * Project (165)
            :                    :  +- * Filter (164)
            :                    :     +- * HashAggregate (163)
            :                    :        +- ReusedExchange (162)
            :                    +- * Project (169)
            :                       +- * Filter (168)
            :                          +- * HashAggregate (167)
            :                             +- ReusedExchange (166)
            +- * HashAggregate (195)
               +- Exchange (194)
                  +- * HashAggregate (193)
                     +- * HashAggregate (192)
                        +- Exchange (191)
                           +- * HashAggregate (190)
                              +- Union (189)
                                 :- * Project (180)
                                 :  +- * Filter (179)
                                 :     +- * HashAggregate (178)
                                 :        +- ReusedExchange (177)
                                 :- * Project (184)
                                 :  +- * Filter (183)
                                 :     +- * HashAggregate (182)
                                 :        +- ReusedExchange (181)
                                 +- * Project (188)
                                    +- * Filter (187)
                                       +- * HashAggregate (186)
                                          +- ReusedExchange (185)


(1) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 29]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]

(3) Filter [codegen id : 29]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(4) Scan parquet default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 13]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(6) Filter [codegen id : 13]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : ((isnotnull(i_brand_id#6) AND isnotnull(i_class_id#7)) AND isnotnull(i_category_id#8))

(7) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(8) ColumnarToRow [codegen id : 3]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]

(9) Filter [codegen id : 3]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(10) Scan parquet default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(12) Filter [codegen id : 1]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : (((isnotnull(i_item_sk#5) AND isnotnull(i_brand_id#6)) AND isnotnull(i_class_id#7)) AND isnotnull(i_category_id#8))

(13) BroadcastExchange
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9]

(14) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#5]
Join condition: None

(15) Project [codegen id : 3]
Output [4]: [ss_sold_date_sk#1, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(16) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(17) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#10, d_year#11]

(18) Filter [codegen id : 2]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1999)) AND (d_year#11 <= 2001)) AND isnotnull(d_date_sk#10))

(19) Project [codegen id : 2]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(20) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(21) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(22) Project [codegen id : 3]
Output [3]: [i_brand_id#6 AS brand_id#13, i_class_id#7 AS class_id#14, i_category_id#8 AS category_id#15]
Input [5]: [ss_sold_date_sk#1, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(23) HashAggregate [codegen id : 3]
Input [3]: [brand_id#13, class_id#14, category_id#15]
Keys [3]: [brand_id#13, class_id#14, category_id#15]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#13, class_id#14, category_id#15]

(24) Exchange
Input [3]: [brand_id#13, class_id#14, category_id#15]
Arguments: hashpartitioning(brand_id#13, class_id#14, category_id#15, 5), ENSURE_REQUIREMENTS, [id=#16]

(25) HashAggregate [codegen id : 12]
Input [3]: [brand_id#13, class_id#14, category_id#15]
Keys [3]: [brand_id#13, class_id#14, category_id#15]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#13, class_id#14, category_id#15]

(26) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#17, cs_item_sk#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int>

(27) ColumnarToRow [codegen id : 6]
Input [2]: [cs_sold_date_sk#17, cs_item_sk#18]

(28) Filter [codegen id : 6]
Input [2]: [cs_sold_date_sk#17, cs_item_sk#18]
Condition : (isnotnull(cs_item_sk#18) AND isnotnull(cs_sold_date_sk#17))

(29) Scan parquet default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(30) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(31) Filter [codegen id : 4]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : isnotnull(i_item_sk#5)

(32) BroadcastExchange
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#19]

(33) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_item_sk#18]
Right keys [1]: [i_item_sk#5]
Join condition: None

(34) Project [codegen id : 6]
Output [4]: [cs_sold_date_sk#17, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [6]: [cs_sold_date_sk#17, cs_item_sk#18, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(35) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#10]

(36) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#17]
Right keys [1]: [d_date_sk#10]
Join condition: None

(37) Project [codegen id : 6]
Output [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Input [5]: [cs_sold_date_sk#17, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(38) HashAggregate [codegen id : 6]
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]

(39) Exchange
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: hashpartitioning(i_brand_id#6, i_class_id#7, i_category_id#8, 5), ENSURE_REQUIREMENTS, [id=#20]

(40) HashAggregate [codegen id : 7]
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]

(41) BroadcastExchange
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#21]

(42) BroadcastHashJoin [codegen id : 12]
Left keys [6]: [coalesce(brand_id#13, 0), isnull(brand_id#13), coalesce(class_id#14, 0), isnull(class_id#14), coalesce(category_id#15, 0), isnull(category_id#15)]
Right keys [6]: [coalesce(i_brand_id#6, 0), isnull(i_brand_id#6), coalesce(i_class_id#7, 0), isnull(i_class_id#7), coalesce(i_category_id#8, 0), isnull(i_category_id#8)]
Join condition: None

(43) HashAggregate [codegen id : 12]
Input [3]: [brand_id#13, class_id#14, category_id#15]
Keys [3]: [brand_id#13, class_id#14, category_id#15]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#13, class_id#14, category_id#15]

(44) HashAggregate [codegen id : 12]
Input [3]: [brand_id#13, class_id#14, category_id#15]
Keys [3]: [brand_id#13, class_id#14, category_id#15]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#13, class_id#14, category_id#15]

(45) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#22, ws_item_sk#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int>

(46) ColumnarToRow [codegen id : 10]
Input [2]: [ws_sold_date_sk#22, ws_item_sk#23]

(47) Filter [codegen id : 10]
Input [2]: [ws_sold_date_sk#22, ws_item_sk#23]
Condition : (isnotnull(ws_item_sk#23) AND isnotnull(ws_sold_date_sk#22))

(48) ReusedExchange [Reuses operator id: 32]
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(49) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_item_sk#23]
Right keys [1]: [i_item_sk#5]
Join condition: None

(50) Project [codegen id : 10]
Output [4]: [ws_sold_date_sk#22, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [6]: [ws_sold_date_sk#22, ws_item_sk#23, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(51) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#10]

(52) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_sold_date_sk#22]
Right keys [1]: [d_date_sk#10]
Join condition: None

(53) Project [codegen id : 10]
Output [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Input [5]: [ws_sold_date_sk#22, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(54) HashAggregate [codegen id : 10]
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]

(55) Exchange
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: hashpartitioning(i_brand_id#6, i_class_id#7, i_category_id#8, 5), ENSURE_REQUIREMENTS, [id=#24]

(56) HashAggregate [codegen id : 11]
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]

(57) BroadcastExchange
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#25]

(58) BroadcastHashJoin [codegen id : 12]
Left keys [6]: [coalesce(brand_id#13, 0), isnull(brand_id#13), coalesce(class_id#14, 0), isnull(class_id#14), coalesce(category_id#15, 0), isnull(category_id#15)]
Right keys [6]: [coalesce(i_brand_id#6, 0), isnull(i_brand_id#6), coalesce(i_class_id#7, 0), isnull(i_class_id#7), coalesce(i_category_id#8, 0), isnull(i_category_id#8)]
Join condition: None

(59) BroadcastExchange
Input [3]: [brand_id#13, class_id#14, category_id#15]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#26]

(60) BroadcastHashJoin [codegen id : 13]
Left keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Right keys [3]: [brand_id#13, class_id#14, category_id#15]
Join condition: None

(61) Project [codegen id : 13]
Output [1]: [i_item_sk#5 AS ss_item_sk#27]
Input [7]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8, brand_id#13, class_id#14, category_id#15]

(62) BroadcastExchange
Input [1]: [ss_item_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#28]

(63) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [ss_item_sk#27]
Join condition: None

(64) Scan parquet default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(65) ColumnarToRow [codegen id : 27]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(66) Filter [codegen id : 27]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : isnotnull(i_item_sk#5)

(67) ReusedExchange [Reuses operator id: 62]
Output [1]: [ss_item_sk#27]

(68) BroadcastHashJoin [codegen id : 27]
Left keys [1]: [i_item_sk#5]
Right keys [1]: [ss_item_sk#27]
Join condition: None

(69) BroadcastExchange
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(70) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#5]
Join condition: None

(71) Project [codegen id : 29]
Output [6]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(72) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(73) ColumnarToRow [codegen id : 28]
Input [3]: [d_date_sk#10, d_year#11, d_moy#30]

(74) Filter [codegen id : 28]
Input [3]: [d_date_sk#10, d_year#11, d_moy#30]
Condition : ((((isnotnull(d_year#11) AND isnotnull(d_moy#30)) AND (d_year#11 = 2000)) AND (d_moy#30 = 11)) AND isnotnull(d_date_sk#10))

(75) Project [codegen id : 28]
Output [1]: [d_date_sk#10]
Input [3]: [d_date_sk#10, d_year#11, d_moy#30]

(76) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#31]

(77) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(78) Project [codegen id : 29]
Output [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [7]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(79) HashAggregate [codegen id : 29]
Input [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#32, isEmpty#33, count#34]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#35, isEmpty#36, count#37]

(80) Exchange
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#35, isEmpty#36, count#37]
Arguments: hashpartitioning(i_brand_id#6, i_class_id#7, i_category_id#8, 5), ENSURE_REQUIREMENTS, [id=#38]

(81) HashAggregate [codegen id : 30]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#35, isEmpty#36, count#37]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#39, count(1)#40]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#39 AS sales#41, count(1)#40 AS number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#39 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#43]

(82) Filter [codegen id : 30]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#41, number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#43]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#43) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#43 as decimal(32,6)) > cast(Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(83) Project [codegen id : 30]
Output [6]: [store AS channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sales#41, number_sales#42]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#41, number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#43]

(84) Scan parquet default.catalog_sales
Output [4]: [cs_sold_date_sk#17, cs_item_sk#18, cs_quantity#47, cs_list_price#48]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(85) ColumnarToRow [codegen id : 59]
Input [4]: [cs_sold_date_sk#17, cs_item_sk#18, cs_quantity#47, cs_list_price#48]

(86) Filter [codegen id : 59]
Input [4]: [cs_sold_date_sk#17, cs_item_sk#18, cs_quantity#47, cs_list_price#48]
Condition : (isnotnull(cs_item_sk#18) AND isnotnull(cs_sold_date_sk#17))

(87) ReusedExchange [Reuses operator id: 62]
Output [1]: [ss_item_sk#27]

(88) BroadcastHashJoin [codegen id : 59]
Left keys [1]: [cs_item_sk#18]
Right keys [1]: [ss_item_sk#27]
Join condition: None

(89) ReusedExchange [Reuses operator id: 69]
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(90) BroadcastHashJoin [codegen id : 59]
Left keys [1]: [cs_item_sk#18]
Right keys [1]: [i_item_sk#5]
Join condition: None

(91) Project [codegen id : 59]
Output [6]: [cs_sold_date_sk#17, cs_quantity#47, cs_list_price#48, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [8]: [cs_sold_date_sk#17, cs_item_sk#18, cs_quantity#47, cs_list_price#48, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(92) ReusedExchange [Reuses operator id: 76]
Output [1]: [d_date_sk#10]

(93) BroadcastHashJoin [codegen id : 59]
Left keys [1]: [cs_sold_date_sk#17]
Right keys [1]: [d_date_sk#10]
Join condition: None

(94) Project [codegen id : 59]
Output [5]: [cs_quantity#47, cs_list_price#48, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [7]: [cs_sold_date_sk#17, cs_quantity#47, cs_list_price#48, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(95) HashAggregate [codegen id : 59]
Input [5]: [cs_quantity#47, cs_list_price#48, i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#49, isEmpty#50, count#51]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#52, isEmpty#53, count#54]

(96) Exchange
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#52, isEmpty#53, count#54]
Arguments: hashpartitioning(i_brand_id#6, i_class_id#7, i_category_id#8, 5), ENSURE_REQUIREMENTS, [id=#55]

(97) HashAggregate [codegen id : 60]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#52, isEmpty#53, count#54]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#56, count(1)#57]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#56 AS sales#58, count(1)#57 AS number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#56 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#60]

(98) Filter [codegen id : 60]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#58, number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#60]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#60) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#60 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(99) Project [codegen id : 60]
Output [6]: [catalog AS channel#61, i_brand_id#6, i_class_id#7, i_category_id#8, sales#58, number_sales#59]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#58, number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#60]

(100) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#22, ws_item_sk#23, ws_quantity#62, ws_list_price#63]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(101) ColumnarToRow [codegen id : 89]
Input [4]: [ws_sold_date_sk#22, ws_item_sk#23, ws_quantity#62, ws_list_price#63]

(102) Filter [codegen id : 89]
Input [4]: [ws_sold_date_sk#22, ws_item_sk#23, ws_quantity#62, ws_list_price#63]
Condition : (isnotnull(ws_item_sk#23) AND isnotnull(ws_sold_date_sk#22))

(103) ReusedExchange [Reuses operator id: 62]
Output [1]: [ss_item_sk#27]

(104) BroadcastHashJoin [codegen id : 89]
Left keys [1]: [ws_item_sk#23]
Right keys [1]: [ss_item_sk#27]
Join condition: None

(105) ReusedExchange [Reuses operator id: 69]
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(106) BroadcastHashJoin [codegen id : 89]
Left keys [1]: [ws_item_sk#23]
Right keys [1]: [i_item_sk#5]
Join condition: None

(107) Project [codegen id : 89]
Output [6]: [ws_sold_date_sk#22, ws_quantity#62, ws_list_price#63, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [8]: [ws_sold_date_sk#22, ws_item_sk#23, ws_quantity#62, ws_list_price#63, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(108) ReusedExchange [Reuses operator id: 76]
Output [1]: [d_date_sk#10]

(109) BroadcastHashJoin [codegen id : 89]
Left keys [1]: [ws_sold_date_sk#22]
Right keys [1]: [d_date_sk#10]
Join condition: None

(110) Project [codegen id : 89]
Output [5]: [ws_quantity#62, ws_list_price#63, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [7]: [ws_sold_date_sk#22, ws_quantity#62, ws_list_price#63, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(111) HashAggregate [codegen id : 89]
Input [5]: [ws_quantity#62, ws_list_price#63, i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#64, isEmpty#65, count#66]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#67, isEmpty#68, count#69]

(112) Exchange
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#67, isEmpty#68, count#69]
Arguments: hashpartitioning(i_brand_id#6, i_class_id#7, i_category_id#8, 5), ENSURE_REQUIREMENTS, [id=#70]

(113) HashAggregate [codegen id : 90]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#67, isEmpty#68, count#69]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#71, count(1)#72]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#71 AS sales#73, count(1)#72 AS number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#71 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#75]

(114) Filter [codegen id : 90]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#73, number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#75]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#75) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#75 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(115) Project [codegen id : 90]
Output [6]: [web AS channel#76, i_brand_id#6, i_class_id#7, i_category_id#8, sales#73, number_sales#74]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#73, number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#75]

(116) Union

(117) HashAggregate [codegen id : 91]
Input [6]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sales#41, number_sales#42]
Keys [4]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(sales#41), partial_sum(number_sales#42)]
Aggregate Attributes [3]: [sum#77, isEmpty#78, sum#79]
Results [7]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sum#80, isEmpty#81, sum#82]

(118) Exchange
Input [7]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sum#80, isEmpty#81, sum#82]
Arguments: hashpartitioning(channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, 5), ENSURE_REQUIREMENTS, [id=#83]

(119) HashAggregate [codegen id : 92]
Input [7]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sum#80, isEmpty#81, sum#82]
Keys [4]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(sales#41), sum(number_sales#42)]
Aggregate Attributes [2]: [sum(sales#41)#84, sum(number_sales#42)#85]
Results [6]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sum(sales#41)#84 AS sum_sales#86, sum(number_sales#42)#85 AS number_sales#87]

(120) ReusedExchange [Reuses operator id: 80]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#88, isEmpty#89, count#90]

(121) HashAggregate [codegen id : 122]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#88, isEmpty#89, count#90]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#91, count(1)#92]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#91 AS sales#41, count(1)#92 AS number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#91 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#93]

(122) Filter [codegen id : 122]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#41, number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#93]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#93) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#93 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(123) Project [codegen id : 122]
Output [6]: [store AS channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sales#41, number_sales#42]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#41, number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#93]

(124) ReusedExchange [Reuses operator id: 96]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#94, isEmpty#95, count#96]

(125) HashAggregate [codegen id : 152]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#94, isEmpty#95, count#96]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#97, count(1)#98]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#97 AS sales#58, count(1)#98 AS number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#97 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#99]

(126) Filter [codegen id : 152]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#58, number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#99]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#99) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#99 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(127) Project [codegen id : 152]
Output [6]: [catalog AS channel#100, i_brand_id#6, i_class_id#7, i_category_id#8, sales#58, number_sales#59]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#58, number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#99]

(128) ReusedExchange [Reuses operator id: 112]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#101, isEmpty#102, count#103]

(129) HashAggregate [codegen id : 182]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#101, isEmpty#102, count#103]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#104, count(1)#105]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#104 AS sales#73, count(1)#105 AS number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#104 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#106]

(130) Filter [codegen id : 182]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#73, number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#106]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#106) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#106 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(131) Project [codegen id : 182]
Output [6]: [web AS channel#107, i_brand_id#6, i_class_id#7, i_category_id#8, sales#73, number_sales#74]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#73, number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#106]

(132) Union

(133) HashAggregate [codegen id : 183]
Input [6]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sales#41, number_sales#42]
Keys [4]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(sales#41), partial_sum(number_sales#42)]
Aggregate Attributes [3]: [sum#108, isEmpty#109, sum#110]
Results [7]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sum#111, isEmpty#112, sum#113]

(134) Exchange
Input [7]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sum#111, isEmpty#112, sum#113]
Arguments: hashpartitioning(channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, 5), ENSURE_REQUIREMENTS, [id=#114]

(135) HashAggregate [codegen id : 184]
Input [7]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sum#111, isEmpty#112, sum#113]
Keys [4]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(sales#41), sum(number_sales#42)]
Aggregate Attributes [2]: [sum(sales#41)#115, sum(number_sales#42)#116]
Results [5]: [channel#46, i_brand_id#6, i_class_id#7, sum(sales#41)#115 AS sum_sales#86, sum(number_sales#42)#116 AS number_sales#87]

(136) HashAggregate [codegen id : 184]
Input [5]: [channel#46, i_brand_id#6, i_class_id#7, sum_sales#86, number_sales#87]
Keys [3]: [channel#46, i_brand_id#6, i_class_id#7]
Functions [2]: [partial_sum(sum_sales#86), partial_sum(number_sales#87)]
Aggregate Attributes [3]: [sum#117, isEmpty#118, sum#119]
Results [6]: [channel#46, i_brand_id#6, i_class_id#7, sum#120, isEmpty#121, sum#122]

(137) Exchange
Input [6]: [channel#46, i_brand_id#6, i_class_id#7, sum#120, isEmpty#121, sum#122]
Arguments: hashpartitioning(channel#46, i_brand_id#6, i_class_id#7, 5), ENSURE_REQUIREMENTS, [id=#123]

(138) HashAggregate [codegen id : 185]
Input [6]: [channel#46, i_brand_id#6, i_class_id#7, sum#120, isEmpty#121, sum#122]
Keys [3]: [channel#46, i_brand_id#6, i_class_id#7]
Functions [2]: [sum(sum_sales#86), sum(number_sales#87)]
Aggregate Attributes [2]: [sum(sum_sales#86)#124, sum(number_sales#87)#125]
Results [6]: [channel#46, i_brand_id#6, i_class_id#7, null AS i_category_id#126, sum(sum_sales#86)#124 AS sum(sum_sales)#127, sum(number_sales#87)#125 AS sum(number_sales)#128]

(139) ReusedExchange [Reuses operator id: 80]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#129, isEmpty#130, count#131]

(140) HashAggregate [codegen id : 215]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#129, isEmpty#130, count#131]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#132, count(1)#133]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#132 AS sales#41, count(1)#133 AS number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#132 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#134]

(141) Filter [codegen id : 215]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#41, number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#134]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#134) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#134 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(142) Project [codegen id : 215]
Output [6]: [store AS channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sales#41, number_sales#42]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#41, number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#134]

(143) ReusedExchange [Reuses operator id: 96]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#135, isEmpty#136, count#137]

(144) HashAggregate [codegen id : 245]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#135, isEmpty#136, count#137]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#138, count(1)#139]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#138 AS sales#58, count(1)#139 AS number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#138 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#140]

(145) Filter [codegen id : 245]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#58, number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#140]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#140) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#140 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(146) Project [codegen id : 245]
Output [6]: [catalog AS channel#141, i_brand_id#6, i_class_id#7, i_category_id#8, sales#58, number_sales#59]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#58, number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#140]

(147) ReusedExchange [Reuses operator id: 112]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#142, isEmpty#143, count#144]

(148) HashAggregate [codegen id : 275]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#142, isEmpty#143, count#144]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#145, count(1)#146]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#145 AS sales#73, count(1)#146 AS number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#145 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#147]

(149) Filter [codegen id : 275]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#73, number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#147]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#147) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#147 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(150) Project [codegen id : 275]
Output [6]: [web AS channel#148, i_brand_id#6, i_class_id#7, i_category_id#8, sales#73, number_sales#74]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#73, number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#147]

(151) Union

(152) HashAggregate [codegen id : 276]
Input [6]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sales#41, number_sales#42]
Keys [4]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(sales#41), partial_sum(number_sales#42)]
Aggregate Attributes [3]: [sum#149, isEmpty#150, sum#151]
Results [7]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sum#152, isEmpty#153, sum#154]

(153) Exchange
Input [7]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sum#152, isEmpty#153, sum#154]
Arguments: hashpartitioning(channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, 5), ENSURE_REQUIREMENTS, [id=#155]

(154) HashAggregate [codegen id : 277]
Input [7]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sum#152, isEmpty#153, sum#154]
Keys [4]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(sales#41), sum(number_sales#42)]
Aggregate Attributes [2]: [sum(sales#41)#156, sum(number_sales#42)#157]
Results [4]: [channel#46, i_brand_id#6, sum(sales#41)#156 AS sum_sales#86, sum(number_sales#42)#157 AS number_sales#87]

(155) HashAggregate [codegen id : 277]
Input [4]: [channel#46, i_brand_id#6, sum_sales#86, number_sales#87]
Keys [2]: [channel#46, i_brand_id#6]
Functions [2]: [partial_sum(sum_sales#86), partial_sum(number_sales#87)]
Aggregate Attributes [3]: [sum#158, isEmpty#159, sum#160]
Results [5]: [channel#46, i_brand_id#6, sum#161, isEmpty#162, sum#163]

(156) Exchange
Input [5]: [channel#46, i_brand_id#6, sum#161, isEmpty#162, sum#163]
Arguments: hashpartitioning(channel#46, i_brand_id#6, 5), ENSURE_REQUIREMENTS, [id=#164]

(157) HashAggregate [codegen id : 278]
Input [5]: [channel#46, i_brand_id#6, sum#161, isEmpty#162, sum#163]
Keys [2]: [channel#46, i_brand_id#6]
Functions [2]: [sum(sum_sales#86), sum(number_sales#87)]
Aggregate Attributes [2]: [sum(sum_sales#86)#165, sum(number_sales#87)#166]
Results [6]: [channel#46, i_brand_id#6, null AS i_class_id#167, null AS i_category_id#168, sum(sum_sales#86)#165 AS sum(sum_sales)#169, sum(number_sales#87)#166 AS sum(number_sales)#170]

(158) ReusedExchange [Reuses operator id: 80]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#171, isEmpty#172, count#173]

(159) HashAggregate [codegen id : 308]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#171, isEmpty#172, count#173]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#174, count(1)#175]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#174 AS sales#41, count(1)#175 AS number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#174 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#176]

(160) Filter [codegen id : 308]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#41, number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#176]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#176) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#176 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(161) Project [codegen id : 308]
Output [6]: [store AS channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sales#41, number_sales#42]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#41, number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#176]

(162) ReusedExchange [Reuses operator id: 96]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#177, isEmpty#178, count#179]

(163) HashAggregate [codegen id : 338]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#177, isEmpty#178, count#179]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#180, count(1)#181]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#180 AS sales#58, count(1)#181 AS number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#180 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#182]

(164) Filter [codegen id : 338]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#58, number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#182]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#182) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#182 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(165) Project [codegen id : 338]
Output [6]: [catalog AS channel#183, i_brand_id#6, i_class_id#7, i_category_id#8, sales#58, number_sales#59]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#58, number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#182]

(166) ReusedExchange [Reuses operator id: 112]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#184, isEmpty#185, count#186]

(167) HashAggregate [codegen id : 368]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#184, isEmpty#185, count#186]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#187, count(1)#188]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#187 AS sales#73, count(1)#188 AS number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#187 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#189]

(168) Filter [codegen id : 368]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#73, number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#189]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#189) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#189 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(169) Project [codegen id : 368]
Output [6]: [web AS channel#190, i_brand_id#6, i_class_id#7, i_category_id#8, sales#73, number_sales#74]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#73, number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#189]

(170) Union

(171) HashAggregate [codegen id : 369]
Input [6]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sales#41, number_sales#42]
Keys [4]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(sales#41), partial_sum(number_sales#42)]
Aggregate Attributes [3]: [sum#191, isEmpty#192, sum#193]
Results [7]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sum#194, isEmpty#195, sum#196]

(172) Exchange
Input [7]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sum#194, isEmpty#195, sum#196]
Arguments: hashpartitioning(channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, 5), ENSURE_REQUIREMENTS, [id=#197]

(173) HashAggregate [codegen id : 370]
Input [7]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sum#194, isEmpty#195, sum#196]
Keys [4]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(sales#41), sum(number_sales#42)]
Aggregate Attributes [2]: [sum(sales#41)#198, sum(number_sales#42)#199]
Results [3]: [channel#46, sum(sales#41)#198 AS sum_sales#86, sum(number_sales#42)#199 AS number_sales#87]

(174) HashAggregate [codegen id : 370]
Input [3]: [channel#46, sum_sales#86, number_sales#87]
Keys [1]: [channel#46]
Functions [2]: [partial_sum(sum_sales#86), partial_sum(number_sales#87)]
Aggregate Attributes [3]: [sum#200, isEmpty#201, sum#202]
Results [4]: [channel#46, sum#203, isEmpty#204, sum#205]

(175) Exchange
Input [4]: [channel#46, sum#203, isEmpty#204, sum#205]
Arguments: hashpartitioning(channel#46, 5), ENSURE_REQUIREMENTS, [id=#206]

(176) HashAggregate [codegen id : 371]
Input [4]: [channel#46, sum#203, isEmpty#204, sum#205]
Keys [1]: [channel#46]
Functions [2]: [sum(sum_sales#86), sum(number_sales#87)]
Aggregate Attributes [2]: [sum(sum_sales#86)#207, sum(number_sales#87)#208]
Results [6]: [channel#46, null AS i_brand_id#209, null AS i_class_id#210, null AS i_category_id#211, sum(sum_sales#86)#207 AS sum(sum_sales)#212, sum(number_sales#87)#208 AS sum(number_sales)#213]

(177) ReusedExchange [Reuses operator id: 80]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#214, isEmpty#215, count#216]

(178) HashAggregate [codegen id : 401]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#214, isEmpty#215, count#216]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#217, count(1)#218]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#217 AS sales#41, count(1)#218 AS number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#217 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#219]

(179) Filter [codegen id : 401]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#41, number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#219]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#219) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#219 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(180) Project [codegen id : 401]
Output [6]: [store AS channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sales#41, number_sales#42]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#41, number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#219]

(181) ReusedExchange [Reuses operator id: 96]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#220, isEmpty#221, count#222]

(182) HashAggregate [codegen id : 431]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#220, isEmpty#221, count#222]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#223, count(1)#224]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#223 AS sales#58, count(1)#224 AS number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#223 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#225]

(183) Filter [codegen id : 431]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#58, number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#225]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#225) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#225 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(184) Project [codegen id : 431]
Output [6]: [catalog AS channel#226, i_brand_id#6, i_class_id#7, i_category_id#8, sales#58, number_sales#59]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#58, number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#225]

(185) ReusedExchange [Reuses operator id: 112]
Output [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#227, isEmpty#228, count#229]

(186) HashAggregate [codegen id : 461]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#227, isEmpty#228, count#229]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#230, count(1)#231]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#230 AS sales#73, count(1)#231 AS number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#230 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#232]

(187) Filter [codegen id : 461]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#73, number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#232]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#232) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#232 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(188) Project [codegen id : 461]
Output [6]: [web AS channel#233, i_brand_id#6, i_class_id#7, i_category_id#8, sales#73, number_sales#74]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#73, number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#232]

(189) Union

(190) HashAggregate [codegen id : 462]
Input [6]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sales#41, number_sales#42]
Keys [4]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(sales#41), partial_sum(number_sales#42)]
Aggregate Attributes [3]: [sum#234, isEmpty#235, sum#236]
Results [7]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sum#237, isEmpty#238, sum#239]

(191) Exchange
Input [7]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sum#237, isEmpty#238, sum#239]
Arguments: hashpartitioning(channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, 5), ENSURE_REQUIREMENTS, [id=#240]

(192) HashAggregate [codegen id : 463]
Input [7]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sum#237, isEmpty#238, sum#239]
Keys [4]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(sales#41), sum(number_sales#42)]
Aggregate Attributes [2]: [sum(sales#41)#241, sum(number_sales#42)#242]
Results [2]: [sum(sales#41)#241 AS sum_sales#86, sum(number_sales#42)#242 AS number_sales#87]

(193) HashAggregate [codegen id : 463]
Input [2]: [sum_sales#86, number_sales#87]
Keys: []
Functions [2]: [partial_sum(sum_sales#86), partial_sum(number_sales#87)]
Aggregate Attributes [3]: [sum#243, isEmpty#244, sum#245]
Results [3]: [sum#246, isEmpty#247, sum#248]

(194) Exchange
Input [3]: [sum#246, isEmpty#247, sum#248]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#249]

(195) HashAggregate [codegen id : 464]
Input [3]: [sum#246, isEmpty#247, sum#248]
Keys: []
Functions [2]: [sum(sum_sales#86), sum(number_sales#87)]
Aggregate Attributes [2]: [sum(sum_sales#86)#250, sum(number_sales#87)#251]
Results [6]: [null AS channel#252, null AS i_brand_id#253, null AS i_class_id#254, null AS i_category_id#255, sum(sum_sales#86)#250 AS sum(sum_sales)#256, sum(number_sales#87)#251 AS sum(number_sales)#257]

(196) Union

(197) HashAggregate [codegen id : 465]
Input [6]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#86, number_sales#87]
Keys [6]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#86, number_sales#87]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#86, number_sales#87]

(198) Exchange
Input [6]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#86, number_sales#87]
Arguments: hashpartitioning(channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#86, number_sales#87, 5), ENSURE_REQUIREMENTS, [id=#258]

(199) HashAggregate [codegen id : 466]
Input [6]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#86, number_sales#87]
Keys [6]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#86, number_sales#87]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#86, number_sales#87]

(200) TakeOrderedAndProject
Input [6]: [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#86, number_sales#87]
Arguments: 100, [channel#46 ASC NULLS FIRST, i_brand_id#6 ASC NULLS FIRST, i_class_id#7 ASC NULLS FIRST, i_category_id#8 ASC NULLS FIRST], [channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, sum_sales#86, number_sales#87]

===== Subqueries =====

Subquery:1 Hosting operator id = 82 Hosting Expression = Subquery scalar-subquery#44, [id=#45]
* HashAggregate (230)
+- Exchange (229)
   +- * HashAggregate (228)
      +- Union (227)
         :- * Project (210)
         :  +- * BroadcastHashJoin Inner BuildRight (209)
         :     :- * Filter (203)
         :     :  +- * ColumnarToRow (202)
         :     :     +- Scan parquet default.store_sales (201)
         :     +- BroadcastExchange (208)
         :        +- * Project (207)
         :           +- * Filter (206)
         :              +- * ColumnarToRow (205)
         :                 +- Scan parquet default.date_dim (204)
         :- * Project (220)
         :  +- * BroadcastHashJoin Inner BuildRight (219)
         :     :- * Filter (213)
         :     :  +- * ColumnarToRow (212)
         :     :     +- Scan parquet default.catalog_sales (211)
         :     +- BroadcastExchange (218)
         :        +- * Project (217)
         :           +- * Filter (216)
         :              +- * ColumnarToRow (215)
         :                 +- Scan parquet default.date_dim (214)
         +- * Project (226)
            +- * BroadcastHashJoin Inner BuildRight (225)
               :- * Filter (223)
               :  +- * ColumnarToRow (222)
               :     +- Scan parquet default.web_sales (221)
               +- ReusedExchange (224)


(201) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(202) ColumnarToRow [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]

(203) Filter [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Condition : isnotnull(ss_sold_date_sk#1)

(204) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(205) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]

(206) Filter [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1999)) AND (d_year#11 <= 2001)) AND isnotnull(d_date_sk#10))

(207) Project [codegen id : 1]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(208) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#259]

(209) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(210) Project [codegen id : 2]
Output [2]: [ss_quantity#3 AS quantity#260, ss_list_price#4 AS list_price#261]
Input [4]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, d_date_sk#10]

(211) Scan parquet default.catalog_sales
Output [3]: [cs_sold_date_sk#17, cs_quantity#47, cs_list_price#48]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(212) ColumnarToRow [codegen id : 4]
Input [3]: [cs_sold_date_sk#17, cs_quantity#47, cs_list_price#48]

(213) Filter [codegen id : 4]
Input [3]: [cs_sold_date_sk#17, cs_quantity#47, cs_list_price#48]
Condition : isnotnull(cs_sold_date_sk#17)

(214) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(215) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]

(216) Filter [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1998)) AND (d_year#11 <= 2000)) AND isnotnull(d_date_sk#10))

(217) Project [codegen id : 3]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(218) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#262]

(219) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#17]
Right keys [1]: [d_date_sk#10]
Join condition: None

(220) Project [codegen id : 4]
Output [2]: [cs_quantity#47 AS quantity#263, cs_list_price#48 AS list_price#264]
Input [4]: [cs_sold_date_sk#17, cs_quantity#47, cs_list_price#48, d_date_sk#10]

(221) Scan parquet default.web_sales
Output [3]: [ws_sold_date_sk#22, ws_quantity#62, ws_list_price#63]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(222) ColumnarToRow [codegen id : 6]
Input [3]: [ws_sold_date_sk#22, ws_quantity#62, ws_list_price#63]

(223) Filter [codegen id : 6]
Input [3]: [ws_sold_date_sk#22, ws_quantity#62, ws_list_price#63]
Condition : isnotnull(ws_sold_date_sk#22)

(224) ReusedExchange [Reuses operator id: 218]
Output [1]: [d_date_sk#10]

(225) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#22]
Right keys [1]: [d_date_sk#10]
Join condition: None

(226) Project [codegen id : 6]
Output [2]: [ws_quantity#62 AS quantity#265, ws_list_price#63 AS list_price#266]
Input [4]: [ws_sold_date_sk#22, ws_quantity#62, ws_list_price#63, d_date_sk#10]

(227) Union

(228) HashAggregate [codegen id : 7]
Input [2]: [quantity#260, list_price#261]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#260 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#261 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#267, count#268]
Results [2]: [sum#269, count#270]

(229) Exchange
Input [2]: [sum#269, count#270]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#271]

(230) HashAggregate [codegen id : 8]
Input [2]: [sum#269, count#270]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#260 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#261 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#260 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#261 as decimal(12,2)))), DecimalType(18,2), true))#272]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#260 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#261 as decimal(12,2)))), DecimalType(18,2), true))#272 AS average_sales#273]

Subquery:2 Hosting operator id = 98 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:3 Hosting operator id = 114 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:4 Hosting operator id = 122 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:5 Hosting operator id = 126 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:6 Hosting operator id = 130 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:7 Hosting operator id = 141 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:8 Hosting operator id = 145 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:9 Hosting operator id = 149 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:10 Hosting operator id = 160 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:11 Hosting operator id = 164 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:12 Hosting operator id = 168 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:13 Hosting operator id = 179 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:14 Hosting operator id = 183 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:15 Hosting operator id = 187 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]


