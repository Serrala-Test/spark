== Physical Plan ==
TakeOrderedAndProject (127)
+- * HashAggregate (126)
   +- Exchange (125)
      +- * HashAggregate (124)
         +- Union (123)
            :- * HashAggregate (102)
            :  +- Exchange (101)
            :     +- * HashAggregate (100)
            :        +- Union (99)
            :           :- * Filter (66)
            :           :  +- * HashAggregate (65)
            :           :     +- Exchange (64)
            :           :        +- * HashAggregate (63)
            :           :           +- * Project (62)
            :           :              +- * BroadcastHashJoin Inner BuildRight (61)
            :           :                 :- * Project (59)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (58)
            :           :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (51)
            :           :                 :     :  :- * Filter (3)
            :           :                 :     :  :  +- * ColumnarToRow (2)
            :           :                 :     :  :     +- Scan parquet spark_catalog.default.store_sales (1)
            :           :                 :     :  +- BroadcastExchange (50)
            :           :                 :     :     +- * Project (49)
            :           :                 :     :        +- * BroadcastHashJoin Inner BuildRight (48)
            :           :                 :     :           :- * Filter (6)
            :           :                 :     :           :  +- * ColumnarToRow (5)
            :           :                 :     :           :     +- Scan parquet spark_catalog.default.item (4)
            :           :                 :     :           +- BroadcastExchange (47)
            :           :                 :     :              +- * BroadcastHashJoin LeftSemi BuildRight (46)
            :           :                 :     :                 :- * HashAggregate (35)
            :           :                 :     :                 :  +- Exchange (34)
            :           :                 :     :                 :     +- * HashAggregate (33)
            :           :                 :     :                 :        +- * BroadcastHashJoin LeftSemi BuildRight (32)
            :           :                 :     :                 :           :- * Project (18)
            :           :                 :     :                 :           :  +- * BroadcastHashJoin Inner BuildRight (17)
            :           :                 :     :                 :           :     :- * Project (15)
            :           :                 :     :                 :           :     :  +- * BroadcastHashJoin Inner BuildRight (14)
            :           :                 :     :                 :           :     :     :- * Filter (9)
            :           :                 :     :                 :           :     :     :  +- * ColumnarToRow (8)
            :           :                 :     :                 :           :     :     :     +- Scan parquet spark_catalog.default.store_sales (7)
            :           :                 :     :                 :           :     :     +- BroadcastExchange (13)
            :           :                 :     :                 :           :     :        +- * Filter (12)
            :           :                 :     :                 :           :     :           +- * ColumnarToRow (11)
            :           :                 :     :                 :           :     :              +- Scan parquet spark_catalog.default.item (10)
            :           :                 :     :                 :           :     +- ReusedExchange (16)
            :           :                 :     :                 :           +- BroadcastExchange (31)
            :           :                 :     :                 :              +- * Project (30)
            :           :                 :     :                 :                 +- * BroadcastHashJoin Inner BuildRight (29)
            :           :                 :     :                 :                    :- * Project (27)
            :           :                 :     :                 :                    :  +- * BroadcastHashJoin Inner BuildRight (26)
            :           :                 :     :                 :                    :     :- * Filter (21)
            :           :                 :     :                 :                    :     :  +- * ColumnarToRow (20)
            :           :                 :     :                 :                    :     :     +- Scan parquet spark_catalog.default.catalog_sales (19)
            :           :                 :     :                 :                    :     +- BroadcastExchange (25)
            :           :                 :     :                 :                    :        +- * Filter (24)
            :           :                 :     :                 :                    :           +- * ColumnarToRow (23)
            :           :                 :     :                 :                    :              +- Scan parquet spark_catalog.default.item (22)
            :           :                 :     :                 :                    +- ReusedExchange (28)
            :           :                 :     :                 +- BroadcastExchange (45)
            :           :                 :     :                    +- * Project (44)
            :           :                 :     :                       +- * BroadcastHashJoin Inner BuildRight (43)
            :           :                 :     :                          :- * Project (41)
            :           :                 :     :                          :  +- * BroadcastHashJoin Inner BuildRight (40)
            :           :                 :     :                          :     :- * Filter (38)
            :           :                 :     :                          :     :  +- * ColumnarToRow (37)
            :           :                 :     :                          :     :     +- Scan parquet spark_catalog.default.web_sales (36)
            :           :                 :     :                          :     +- ReusedExchange (39)
            :           :                 :     :                          +- ReusedExchange (42)
            :           :                 :     +- BroadcastExchange (57)
            :           :                 :        +- * BroadcastHashJoin LeftSemi BuildRight (56)
            :           :                 :           :- * Filter (54)
            :           :                 :           :  +- * ColumnarToRow (53)
            :           :                 :           :     +- Scan parquet spark_catalog.default.item (52)
            :           :                 :           +- ReusedExchange (55)
            :           :                 +- ReusedExchange (60)
            :           :- * Project (82)
            :           :  +- * Filter (81)
            :           :     +- * HashAggregate (80)
            :           :        +- Exchange (79)
            :           :           +- * HashAggregate (78)
            :           :              +- * Project (77)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (76)
            :           :                    :- * Project (74)
            :           :                    :  +- * BroadcastHashJoin Inner BuildRight (73)
            :           :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (71)
            :           :                    :     :  :- * Filter (69)
            :           :                    :     :  :  +- * ColumnarToRow (68)
            :           :                    :     :  :     +- Scan parquet spark_catalog.default.catalog_sales (67)
            :           :                    :     :  +- ReusedExchange (70)
            :           :                    :     +- ReusedExchange (72)
            :           :                    +- ReusedExchange (75)
            :           +- * Project (98)
            :              +- * Filter (97)
            :                 +- * HashAggregate (96)
            :                    +- Exchange (95)
            :                       +- * HashAggregate (94)
            :                          +- * Project (93)
            :                             +- * BroadcastHashJoin Inner BuildRight (92)
            :                                :- * Project (90)
            :                                :  +- * BroadcastHashJoin Inner BuildRight (89)
            :                                :     :- * BroadcastHashJoin LeftSemi BuildRight (87)
            :                                :     :  :- * Filter (85)
            :                                :     :  :  +- * ColumnarToRow (84)
            :                                :     :  :     +- Scan parquet spark_catalog.default.web_sales (83)
            :                                :     :  +- ReusedExchange (86)
            :                                :     +- ReusedExchange (88)
            :                                +- ReusedExchange (91)
            :- * HashAggregate (107)
            :  +- Exchange (106)
            :     +- * HashAggregate (105)
            :        +- * HashAggregate (104)
            :           +- ReusedExchange (103)
            :- * HashAggregate (112)
            :  +- Exchange (111)
            :     +- * HashAggregate (110)
            :        +- * HashAggregate (109)
            :           +- ReusedExchange (108)
            :- * HashAggregate (117)
            :  +- Exchange (116)
            :     +- * HashAggregate (115)
            :        +- * HashAggregate (114)
            :           +- ReusedExchange (113)
            +- * HashAggregate (122)
               +- Exchange (121)
                  +- * HashAggregate (120)
                     +- * HashAggregate (119)
                        +- ReusedExchange (118)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(6) Filter [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(7) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 6]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]

(9) Filter [codegen id : 6]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(10) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(12) Filter [codegen id : 1]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : (((isnotnull(i_item_sk#6) AND isnotnull(i_brand_id#7)) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(13) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(14) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(15) Project [codegen id : 6]
Output [4]: [ss_sold_date_sk#4, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [6]: [ss_item_sk#1, ss_sold_date_sk#4, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(16) ReusedExchange [Reuses operator id: 161]
Output [1]: [d_date_sk#11]

(17) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(18) Project [codegen id : 6]
Output [3]: [i_brand_id#7 AS brand_id#12, i_class_id#8 AS class_id#13, i_category_id#9 AS category_id#14]
Input [5]: [ss_sold_date_sk#4, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#11]

(19) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_item_sk#15, cs_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#16), dynamicpruningexpression(cs_sold_date_sk#16 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(20) ColumnarToRow [codegen id : 5]
Input [2]: [cs_item_sk#15, cs_sold_date_sk#16]

(21) Filter [codegen id : 5]
Input [2]: [cs_item_sk#15, cs_sold_date_sk#16]
Condition : isnotnull(cs_item_sk#15)

(22) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(23) ColumnarToRow [codegen id : 3]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(24) Filter [codegen id : 3]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : isnotnull(i_item_sk#6)

(25) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(26) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_item_sk#15]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(27) Project [codegen id : 5]
Output [4]: [cs_sold_date_sk#16, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [6]: [cs_item_sk#15, cs_sold_date_sk#16, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(28) ReusedExchange [Reuses operator id: 161]
Output [1]: [d_date_sk#11]

(29) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(30) Project [codegen id : 5]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [cs_sold_date_sk#16, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#11]

(31) BroadcastExchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=3]

(32) BroadcastHashJoin [codegen id : 6]
Left keys [6]: [coalesce(brand_id#12, 0), isnull(brand_id#12), coalesce(class_id#13, 0), isnull(class_id#13), coalesce(category_id#14, 0), isnull(category_id#14)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join type: LeftSemi
Join condition: None

(33) HashAggregate [codegen id : 6]
Input [3]: [brand_id#12, class_id#13, category_id#14]
Keys [3]: [brand_id#12, class_id#13, category_id#14]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#12, class_id#13, category_id#14]

(34) Exchange
Input [3]: [brand_id#12, class_id#13, category_id#14]
Arguments: hashpartitioning(brand_id#12, class_id#13, category_id#14, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(35) HashAggregate [codegen id : 10]
Input [3]: [brand_id#12, class_id#13, category_id#14]
Keys [3]: [brand_id#12, class_id#13, category_id#14]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#12, class_id#13, category_id#14]

(36) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_item_sk#17, ws_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#18), dynamicpruningexpression(ws_sold_date_sk#18 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(37) ColumnarToRow [codegen id : 9]
Input [2]: [ws_item_sk#17, ws_sold_date_sk#18]

(38) Filter [codegen id : 9]
Input [2]: [ws_item_sk#17, ws_sold_date_sk#18]
Condition : isnotnull(ws_item_sk#17)

(39) ReusedExchange [Reuses operator id: 25]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(40) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_item_sk#17]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(41) Project [codegen id : 9]
Output [4]: [ws_sold_date_sk#18, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [6]: [ws_item_sk#17, ws_sold_date_sk#18, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(42) ReusedExchange [Reuses operator id: 161]
Output [1]: [d_date_sk#11]

(43) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_sold_date_sk#18]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(44) Project [codegen id : 9]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [ws_sold_date_sk#18, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#11]

(45) BroadcastExchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=5]

(46) BroadcastHashJoin [codegen id : 10]
Left keys [6]: [coalesce(brand_id#12, 0), isnull(brand_id#12), coalesce(class_id#13, 0), isnull(class_id#13), coalesce(category_id#14, 0), isnull(category_id#14)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join type: LeftSemi
Join condition: None

(47) BroadcastExchange
Input [3]: [brand_id#12, class_id#13, category_id#14]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [plan_id=6]

(48) BroadcastHashJoin [codegen id : 11]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#12, class_id#13, category_id#14]
Join type: Inner
Join condition: None

(49) Project [codegen id : 11]
Output [1]: [i_item_sk#6 AS ss_item_sk#19]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#12, class_id#13, category_id#14]

(50) BroadcastExchange
Input [1]: [ss_item_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

(51) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#19]
Join type: LeftSemi
Join condition: None

(52) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(53) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(54) Filter [codegen id : 23]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : isnotnull(i_item_sk#6)

(55) ReusedExchange [Reuses operator id: 50]
Output [1]: [ss_item_sk#19]

(56) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [i_item_sk#6]
Right keys [1]: [ss_item_sk#19]
Join type: LeftSemi
Join condition: None

(57) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=8]

(58) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(59) Project [codegen id : 25]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(60) ReusedExchange [Reuses operator id: 156]
Output [1]: [d_date_sk#11]

(61) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(62) Project [codegen id : 25]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#11]

(63) HashAggregate [codegen id : 25]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), partial_count(1)]
Aggregate Attributes [3]: [sum#20, isEmpty#21, count#22]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#23, isEmpty#24, count#25]

(64) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#23, isEmpty#24, count#25]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(65) HashAggregate [codegen id : 26]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#23, isEmpty#24, count#25]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#26, count(1)#27]
Results [6]: [store AS channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#26 AS sales#29, count(1)#27 AS number_sales#30]

(66) Filter [codegen id : 26]
Input [6]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sales#29, number_sales#30]
Condition : (isnotnull(sales#29) AND (cast(sales#29 as decimal(32,6)) > cast(Subquery scalar-subquery#31, [id=#32] as decimal(32,6))))

(67) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_item_sk#15, cs_quantity#33, cs_list_price#34, cs_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#16), dynamicpruningexpression(cs_sold_date_sk#16 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(68) ColumnarToRow [codegen id : 51]
Input [4]: [cs_item_sk#15, cs_quantity#33, cs_list_price#34, cs_sold_date_sk#16]

(69) Filter [codegen id : 51]
Input [4]: [cs_item_sk#15, cs_quantity#33, cs_list_price#34, cs_sold_date_sk#16]
Condition : isnotnull(cs_item_sk#15)

(70) ReusedExchange [Reuses operator id: 50]
Output [1]: [ss_item_sk#19]

(71) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#15]
Right keys [1]: [ss_item_sk#19]
Join type: LeftSemi
Join condition: None

(72) ReusedExchange [Reuses operator id: 57]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(73) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#15]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(74) Project [codegen id : 51]
Output [6]: [cs_quantity#33, cs_list_price#34, cs_sold_date_sk#16, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [8]: [cs_item_sk#15, cs_quantity#33, cs_list_price#34, cs_sold_date_sk#16, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(75) ReusedExchange [Reuses operator id: 156]
Output [1]: [d_date_sk#11]

(76) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(77) Project [codegen id : 51]
Output [5]: [cs_quantity#33, cs_list_price#34, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [cs_quantity#33, cs_list_price#34, cs_sold_date_sk#16, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#11]

(78) HashAggregate [codegen id : 51]
Input [5]: [cs_quantity#33, cs_list_price#34, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum((cast(cs_quantity#33 as decimal(10,0)) * cs_list_price#34)), partial_count(1)]
Aggregate Attributes [3]: [sum#35, isEmpty#36, count#37]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#38, isEmpty#39, count#40]

(79) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#38, isEmpty#39, count#40]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(80) HashAggregate [codegen id : 52]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#38, isEmpty#39, count#40]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum((cast(cs_quantity#33 as decimal(10,0)) * cs_list_price#34)), count(1)]
Aggregate Attributes [2]: [sum((cast(cs_quantity#33 as decimal(10,0)) * cs_list_price#34))#41, count(1)#42]
Results [5]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum((cast(cs_quantity#33 as decimal(10,0)) * cs_list_price#34))#41 AS sales#43, count(1)#42 AS number_sales#44]

(81) Filter [codegen id : 52]
Input [5]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44]
Condition : (isnotnull(sales#43) AND (cast(sales#43 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#31, [id=#32] as decimal(32,6))))

(82) Project [codegen id : 52]
Output [6]: [catalog AS channel#45, i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44]
Input [5]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44]

(83) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#17, ws_quantity#46, ws_list_price#47, ws_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#18), dynamicpruningexpression(ws_sold_date_sk#18 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(84) ColumnarToRow [codegen id : 77]
Input [4]: [ws_item_sk#17, ws_quantity#46, ws_list_price#47, ws_sold_date_sk#18]

(85) Filter [codegen id : 77]
Input [4]: [ws_item_sk#17, ws_quantity#46, ws_list_price#47, ws_sold_date_sk#18]
Condition : isnotnull(ws_item_sk#17)

(86) ReusedExchange [Reuses operator id: 50]
Output [1]: [ss_item_sk#19]

(87) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#17]
Right keys [1]: [ss_item_sk#19]
Join type: LeftSemi
Join condition: None

(88) ReusedExchange [Reuses operator id: 57]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(89) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#17]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(90) Project [codegen id : 77]
Output [6]: [ws_quantity#46, ws_list_price#47, ws_sold_date_sk#18, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [8]: [ws_item_sk#17, ws_quantity#46, ws_list_price#47, ws_sold_date_sk#18, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(91) ReusedExchange [Reuses operator id: 156]
Output [1]: [d_date_sk#11]

(92) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_sold_date_sk#18]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(93) Project [codegen id : 77]
Output [5]: [ws_quantity#46, ws_list_price#47, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ws_quantity#46, ws_list_price#47, ws_sold_date_sk#18, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#11]

(94) HashAggregate [codegen id : 77]
Input [5]: [ws_quantity#46, ws_list_price#47, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum((cast(ws_quantity#46 as decimal(10,0)) * ws_list_price#47)), partial_count(1)]
Aggregate Attributes [3]: [sum#48, isEmpty#49, count#50]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#51, isEmpty#52, count#53]

(95) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#51, isEmpty#52, count#53]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(96) HashAggregate [codegen id : 78]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#51, isEmpty#52, count#53]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum((cast(ws_quantity#46 as decimal(10,0)) * ws_list_price#47)), count(1)]
Aggregate Attributes [2]: [sum((cast(ws_quantity#46 as decimal(10,0)) * ws_list_price#47))#54, count(1)#55]
Results [5]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum((cast(ws_quantity#46 as decimal(10,0)) * ws_list_price#47))#54 AS sales#56, count(1)#55 AS number_sales#57]

(97) Filter [codegen id : 78]
Input [5]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#56, number_sales#57]
Condition : (isnotnull(sales#56) AND (cast(sales#56 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#31, [id=#32] as decimal(32,6))))

(98) Project [codegen id : 78]
Output [6]: [web AS channel#58, i_brand_id#7, i_class_id#8, i_category_id#9, sales#56, number_sales#57]
Input [5]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#56, number_sales#57]

(99) Union

(100) HashAggregate [codegen id : 79]
Input [6]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sales#29, number_sales#30]
Keys [4]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(sales#29), partial_sum(number_sales#30)]
Aggregate Attributes [3]: [sum#59, isEmpty#60, sum#61]
Results [7]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum#62, isEmpty#63, sum#64]

(101) Exchange
Input [7]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum#62, isEmpty#63, sum#64]
Arguments: hashpartitioning(channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(102) HashAggregate [codegen id : 80]
Input [7]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum#62, isEmpty#63, sum#64]
Keys [4]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#29), sum(number_sales#30)]
Aggregate Attributes [2]: [sum(sales#29)#65, sum(number_sales#30)#66]
Results [6]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum(sales#29)#65 AS sum_sales#67, sum(number_sales#30)#66 AS number_sales#68]

(103) ReusedExchange [Reuses operator id: 101]
Output [7]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum#62, isEmpty#63, sum#64]

(104) HashAggregate [codegen id : 160]
Input [7]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum#62, isEmpty#63, sum#64]
Keys [4]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#29), sum(number_sales#30)]
Aggregate Attributes [2]: [sum(sales#29)#65, sum(number_sales#30)#66]
Results [5]: [channel#28, i_brand_id#7, i_class_id#8, sum(sales#29)#65 AS sum_sales#67, sum(number_sales#30)#66 AS number_sales#68]

(105) HashAggregate [codegen id : 160]
Input [5]: [channel#28, i_brand_id#7, i_class_id#8, sum_sales#67, number_sales#68]
Keys [3]: [channel#28, i_brand_id#7, i_class_id#8]
Functions [2]: [partial_sum(sum_sales#67), partial_sum(number_sales#68)]
Aggregate Attributes [3]: [sum#69, isEmpty#70, sum#71]
Results [6]: [channel#28, i_brand_id#7, i_class_id#8, sum#72, isEmpty#73, sum#74]

(106) Exchange
Input [6]: [channel#28, i_brand_id#7, i_class_id#8, sum#72, isEmpty#73, sum#74]
Arguments: hashpartitioning(channel#28, i_brand_id#7, i_class_id#8, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(107) HashAggregate [codegen id : 161]
Input [6]: [channel#28, i_brand_id#7, i_class_id#8, sum#72, isEmpty#73, sum#74]
Keys [3]: [channel#28, i_brand_id#7, i_class_id#8]
Functions [2]: [sum(sum_sales#67), sum(number_sales#68)]
Aggregate Attributes [2]: [sum(sum_sales#67)#75, sum(number_sales#68)#76]
Results [6]: [channel#28, i_brand_id#7, i_class_id#8, null AS i_category_id#77, sum(sum_sales#67)#75 AS sum(sum_sales)#78, sum(number_sales#68)#76 AS sum(number_sales)#79]

(108) ReusedExchange [Reuses operator id: 101]
Output [7]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum#62, isEmpty#63, sum#64]

(109) HashAggregate [codegen id : 241]
Input [7]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum#62, isEmpty#63, sum#64]
Keys [4]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#29), sum(number_sales#30)]
Aggregate Attributes [2]: [sum(sales#29)#65, sum(number_sales#30)#66]
Results [4]: [channel#28, i_brand_id#7, sum(sales#29)#65 AS sum_sales#67, sum(number_sales#30)#66 AS number_sales#68]

(110) HashAggregate [codegen id : 241]
Input [4]: [channel#28, i_brand_id#7, sum_sales#67, number_sales#68]
Keys [2]: [channel#28, i_brand_id#7]
Functions [2]: [partial_sum(sum_sales#67), partial_sum(number_sales#68)]
Aggregate Attributes [3]: [sum#80, isEmpty#81, sum#82]
Results [5]: [channel#28, i_brand_id#7, sum#83, isEmpty#84, sum#85]

(111) Exchange
Input [5]: [channel#28, i_brand_id#7, sum#83, isEmpty#84, sum#85]
Arguments: hashpartitioning(channel#28, i_brand_id#7, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(112) HashAggregate [codegen id : 242]
Input [5]: [channel#28, i_brand_id#7, sum#83, isEmpty#84, sum#85]
Keys [2]: [channel#28, i_brand_id#7]
Functions [2]: [sum(sum_sales#67), sum(number_sales#68)]
Aggregate Attributes [2]: [sum(sum_sales#67)#86, sum(number_sales#68)#87]
Results [6]: [channel#28, i_brand_id#7, null AS i_class_id#88, null AS i_category_id#89, sum(sum_sales#67)#86 AS sum(sum_sales)#90, sum(number_sales#68)#87 AS sum(number_sales)#91]

(113) ReusedExchange [Reuses operator id: 101]
Output [7]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum#62, isEmpty#63, sum#64]

(114) HashAggregate [codegen id : 322]
Input [7]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum#62, isEmpty#63, sum#64]
Keys [4]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#29), sum(number_sales#30)]
Aggregate Attributes [2]: [sum(sales#29)#65, sum(number_sales#30)#66]
Results [3]: [channel#28, sum(sales#29)#65 AS sum_sales#67, sum(number_sales#30)#66 AS number_sales#68]

(115) HashAggregate [codegen id : 322]
Input [3]: [channel#28, sum_sales#67, number_sales#68]
Keys [1]: [channel#28]
Functions [2]: [partial_sum(sum_sales#67), partial_sum(number_sales#68)]
Aggregate Attributes [3]: [sum#92, isEmpty#93, sum#94]
Results [4]: [channel#28, sum#95, isEmpty#96, sum#97]

(116) Exchange
Input [4]: [channel#28, sum#95, isEmpty#96, sum#97]
Arguments: hashpartitioning(channel#28, 5), ENSURE_REQUIREMENTS, [plan_id=15]

(117) HashAggregate [codegen id : 323]
Input [4]: [channel#28, sum#95, isEmpty#96, sum#97]
Keys [1]: [channel#28]
Functions [2]: [sum(sum_sales#67), sum(number_sales#68)]
Aggregate Attributes [2]: [sum(sum_sales#67)#98, sum(number_sales#68)#99]
Results [6]: [channel#28, null AS i_brand_id#100, null AS i_class_id#101, null AS i_category_id#102, sum(sum_sales#67)#98 AS sum(sum_sales)#103, sum(number_sales#68)#99 AS sum(number_sales)#104]

(118) ReusedExchange [Reuses operator id: 101]
Output [7]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum#62, isEmpty#63, sum#64]

(119) HashAggregate [codegen id : 403]
Input [7]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum#62, isEmpty#63, sum#64]
Keys [4]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#29), sum(number_sales#30)]
Aggregate Attributes [2]: [sum(sales#29)#65, sum(number_sales#30)#66]
Results [2]: [sum(sales#29)#65 AS sum_sales#67, sum(number_sales#30)#66 AS number_sales#68]

(120) HashAggregate [codegen id : 403]
Input [2]: [sum_sales#67, number_sales#68]
Keys: []
Functions [2]: [partial_sum(sum_sales#67), partial_sum(number_sales#68)]
Aggregate Attributes [3]: [sum#105, isEmpty#106, sum#107]
Results [3]: [sum#108, isEmpty#109, sum#110]

(121) Exchange
Input [3]: [sum#108, isEmpty#109, sum#110]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=16]

(122) HashAggregate [codegen id : 404]
Input [3]: [sum#108, isEmpty#109, sum#110]
Keys: []
Functions [2]: [sum(sum_sales#67), sum(number_sales#68)]
Aggregate Attributes [2]: [sum(sum_sales#67)#111, sum(number_sales#68)#112]
Results [6]: [null AS channel#113, null AS i_brand_id#114, null AS i_class_id#115, null AS i_category_id#116, sum(sum_sales#67)#111 AS sum(sum_sales)#117, sum(number_sales#68)#112 AS sum(number_sales)#118]

(123) Union

(124) HashAggregate [codegen id : 405]
Input [6]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#67, number_sales#68]
Keys [6]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#67, number_sales#68]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#67, number_sales#68]

(125) Exchange
Input [6]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#67, number_sales#68]
Arguments: hashpartitioning(channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#67, number_sales#68, 5), ENSURE_REQUIREMENTS, [plan_id=17]

(126) HashAggregate [codegen id : 406]
Input [6]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#67, number_sales#68]
Keys [6]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#67, number_sales#68]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#67, number_sales#68]

(127) TakeOrderedAndProject
Input [6]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#67, number_sales#68]
Arguments: 100, [channel#28 ASC NULLS FIRST, i_brand_id#7 ASC NULLS FIRST, i_class_id#8 ASC NULLS FIRST, i_category_id#9 ASC NULLS FIRST], [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#67, number_sales#68]

===== Subqueries =====

Subquery:1 Hosting operator id = 66 Hosting Expression = Subquery scalar-subquery#31, [id=#32]
* HashAggregate (146)
+- Exchange (145)
   +- * HashAggregate (144)
      +- Union (143)
         :- * Project (132)
         :  +- * BroadcastHashJoin Inner BuildRight (131)
         :     :- * ColumnarToRow (129)
         :     :  +- Scan parquet spark_catalog.default.store_sales (128)
         :     +- ReusedExchange (130)
         :- * Project (137)
         :  +- * BroadcastHashJoin Inner BuildRight (136)
         :     :- * ColumnarToRow (134)
         :     :  +- Scan parquet spark_catalog.default.catalog_sales (133)
         :     +- ReusedExchange (135)
         +- * Project (142)
            +- * BroadcastHashJoin Inner BuildRight (141)
               :- * ColumnarToRow (139)
               :  +- Scan parquet spark_catalog.default.web_sales (138)
               +- ReusedExchange (140)


(128) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#10)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(129) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(130) ReusedExchange [Reuses operator id: 161]
Output [1]: [d_date_sk#11]

(131) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(132) Project [codegen id : 2]
Output [2]: [ss_quantity#2 AS quantity#119, ss_list_price#3 AS list_price#120]
Input [4]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#11]

(133) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_quantity#33, cs_list_price#34, cs_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#16), dynamicpruningexpression(cs_sold_date_sk#16 IN dynamicpruning#121)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(134) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#33, cs_list_price#34, cs_sold_date_sk#16]

(135) ReusedExchange [Reuses operator id: 151]
Output [1]: [d_date_sk#11]

(136) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(137) Project [codegen id : 4]
Output [2]: [cs_quantity#33 AS quantity#122, cs_list_price#34 AS list_price#123]
Input [4]: [cs_quantity#33, cs_list_price#34, cs_sold_date_sk#16, d_date_sk#11]

(138) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_quantity#46, ws_list_price#47, ws_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#18), dynamicpruningexpression(ws_sold_date_sk#18 IN dynamicpruning#121)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(139) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#46, ws_list_price#47, ws_sold_date_sk#18]

(140) ReusedExchange [Reuses operator id: 151]
Output [1]: [d_date_sk#11]

(141) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#18]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(142) Project [codegen id : 6]
Output [2]: [ws_quantity#46 AS quantity#124, ws_list_price#47 AS list_price#125]
Input [4]: [ws_quantity#46, ws_list_price#47, ws_sold_date_sk#18, d_date_sk#11]

(143) Union

(144) HashAggregate [codegen id : 7]
Input [2]: [quantity#119, list_price#120]
Keys: []
Functions [1]: [partial_avg((cast(quantity#119 as decimal(10,0)) * list_price#120))]
Aggregate Attributes [2]: [sum#126, count#127]
Results [2]: [sum#128, count#129]

(145) Exchange
Input [2]: [sum#128, count#129]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=18]

(146) HashAggregate [codegen id : 8]
Input [2]: [sum#128, count#129]
Keys: []
Functions [1]: [avg((cast(quantity#119 as decimal(10,0)) * list_price#120))]
Aggregate Attributes [1]: [avg((cast(quantity#119 as decimal(10,0)) * list_price#120))#130]
Results [1]: [avg((cast(quantity#119 as decimal(10,0)) * list_price#120))#130 AS average_sales#131]

Subquery:2 Hosting operator id = 128 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#10

Subquery:3 Hosting operator id = 133 Hosting Expression = cs_sold_date_sk#16 IN dynamicpruning#121
BroadcastExchange (151)
+- * Project (150)
   +- * Filter (149)
      +- * ColumnarToRow (148)
         +- Scan parquet spark_catalog.default.date_dim (147)


(147) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#11, d_year#132]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(148) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#11, d_year#132]

(149) Filter [codegen id : 1]
Input [2]: [d_date_sk#11, d_year#132]
Condition : (((isnotnull(d_year#132) AND (d_year#132 >= 1998)) AND (d_year#132 <= 2000)) AND isnotnull(d_date_sk#11))

(150) Project [codegen id : 1]
Output [1]: [d_date_sk#11]
Input [2]: [d_date_sk#11, d_year#132]

(151) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=19]

Subquery:4 Hosting operator id = 138 Hosting Expression = ws_sold_date_sk#18 IN dynamicpruning#121

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (156)
+- * Project (155)
   +- * Filter (154)
      +- * ColumnarToRow (153)
         +- Scan parquet spark_catalog.default.date_dim (152)


(152) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#11, d_year#132, d_moy#133]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(153) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#11, d_year#132, d_moy#133]

(154) Filter [codegen id : 1]
Input [3]: [d_date_sk#11, d_year#132, d_moy#133]
Condition : ((((isnotnull(d_year#132) AND isnotnull(d_moy#133)) AND (d_year#132 = 2000)) AND (d_moy#133 = 11)) AND isnotnull(d_date_sk#11))

(155) Project [codegen id : 1]
Output [1]: [d_date_sk#11]
Input [3]: [d_date_sk#11, d_year#132, d_moy#133]

(156) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=20]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#10
BroadcastExchange (161)
+- * Project (160)
   +- * Filter (159)
      +- * ColumnarToRow (158)
         +- Scan parquet spark_catalog.default.date_dim (157)


(157) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#11, d_year#132]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(158) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#11, d_year#132]

(159) Filter [codegen id : 1]
Input [2]: [d_date_sk#11, d_year#132]
Condition : (((isnotnull(d_year#132) AND (d_year#132 >= 1999)) AND (d_year#132 <= 2001)) AND isnotnull(d_date_sk#11))

(160) Project [codegen id : 1]
Output [1]: [d_date_sk#11]
Input [2]: [d_date_sk#11, d_year#132]

(161) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=21]

Subquery:7 Hosting operator id = 19 Hosting Expression = cs_sold_date_sk#16 IN dynamicpruning#10

Subquery:8 Hosting operator id = 36 Hosting Expression = ws_sold_date_sk#18 IN dynamicpruning#10

Subquery:9 Hosting operator id = 81 Hosting Expression = ReusedSubquery Subquery scalar-subquery#31, [id=#32]

Subquery:10 Hosting operator id = 67 Hosting Expression = cs_sold_date_sk#16 IN dynamicpruning#5

Subquery:11 Hosting operator id = 97 Hosting Expression = ReusedSubquery Subquery scalar-subquery#31, [id=#32]

Subquery:12 Hosting operator id = 83 Hosting Expression = ws_sold_date_sk#18 IN dynamicpruning#5


