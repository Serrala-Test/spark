== Physical Plan ==
TakeOrderedAndProject (130)
+- * HashAggregate (129)
   +- Exchange (128)
      +- * HashAggregate (127)
         +- Union (126)
            :- * HashAggregate (105)
            :  +- Exchange (104)
            :     +- * HashAggregate (103)
            :        +- Union (102)
            :           :- * Project (69)
            :           :  +- * Filter (68)
            :           :     +- * HashAggregate (67)
            :           :        +- Exchange (66)
            :           :           +- * HashAggregate (65)
            :           :              +- * Project (64)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (63)
            :           :                    :- * Project (61)
            :           :                    :  +- * BroadcastHashJoin Inner BuildRight (60)
            :           :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (53)
            :           :                    :     :  :- * Filter (3)
            :           :                    :     :  :  +- * ColumnarToRow (2)
            :           :                    :     :  :     +- Scan parquet default.store_sales (1)
            :           :                    :     :  +- BroadcastExchange (52)
            :           :                    :     :     +- * Project (51)
            :           :                    :     :        +- * BroadcastHashJoin Inner BuildRight (50)
            :           :                    :     :           :- * Filter (6)
            :           :                    :     :           :  +- * ColumnarToRow (5)
            :           :                    :     :           :     +- Scan parquet default.item (4)
            :           :                    :     :           +- BroadcastExchange (49)
            :           :                    :     :              +- * HashAggregate (48)
            :           :                    :     :                 +- * HashAggregate (47)
            :           :                    :     :                    +- * BroadcastHashJoin LeftSemi BuildRight (46)
            :           :                    :     :                       :- * HashAggregate (35)
            :           :                    :     :                       :  +- Exchange (34)
            :           :                    :     :                       :     +- * HashAggregate (33)
            :           :                    :     :                       :        +- * Project (32)
            :           :                    :     :                       :           +- * BroadcastHashJoin Inner BuildRight (31)
            :           :                    :     :                       :              :- * Project (29)
            :           :                    :     :                       :              :  +- * BroadcastHashJoin Inner BuildRight (28)
            :           :                    :     :                       :              :     :- * Filter (9)
            :           :                    :     :                       :              :     :  +- * ColumnarToRow (8)
            :           :                    :     :                       :              :     :     +- Scan parquet default.store_sales (7)
            :           :                    :     :                       :              :     +- BroadcastExchange (27)
            :           :                    :     :                       :              :        +- * BroadcastHashJoin LeftSemi BuildRight (26)
            :           :                    :     :                       :              :           :- * Filter (12)
            :           :                    :     :                       :              :           :  +- * ColumnarToRow (11)
            :           :                    :     :                       :              :           :     +- Scan parquet default.item (10)
            :           :                    :     :                       :              :           +- BroadcastExchange (25)
            :           :                    :     :                       :              :              +- * Project (24)
            :           :                    :     :                       :              :                 +- * BroadcastHashJoin Inner BuildRight (23)
            :           :                    :     :                       :              :                    :- * Project (21)
            :           :                    :     :                       :              :                    :  +- * BroadcastHashJoin Inner BuildRight (20)
            :           :                    :     :                       :              :                    :     :- * Filter (15)
            :           :                    :     :                       :              :                    :     :  +- * ColumnarToRow (14)
            :           :                    :     :                       :              :                    :     :     +- Scan parquet default.catalog_sales (13)
            :           :                    :     :                       :              :                    :     +- BroadcastExchange (19)
            :           :                    :     :                       :              :                    :        +- * Filter (18)
            :           :                    :     :                       :              :                    :           +- * ColumnarToRow (17)
            :           :                    :     :                       :              :                    :              +- Scan parquet default.item (16)
            :           :                    :     :                       :              :                    +- ReusedExchange (22)
            :           :                    :     :                       :              +- ReusedExchange (30)
            :           :                    :     :                       +- BroadcastExchange (45)
            :           :                    :     :                          +- * Project (44)
            :           :                    :     :                             +- * BroadcastHashJoin Inner BuildRight (43)
            :           :                    :     :                                :- * Project (41)
            :           :                    :     :                                :  +- * BroadcastHashJoin Inner BuildRight (40)
            :           :                    :     :                                :     :- * Filter (38)
            :           :                    :     :                                :     :  +- * ColumnarToRow (37)
            :           :                    :     :                                :     :     +- Scan parquet default.web_sales (36)
            :           :                    :     :                                :     +- ReusedExchange (39)
            :           :                    :     :                                +- ReusedExchange (42)
            :           :                    :     +- BroadcastExchange (59)
            :           :                    :        +- * BroadcastHashJoin LeftSemi BuildRight (58)
            :           :                    :           :- * Filter (56)
            :           :                    :           :  +- * ColumnarToRow (55)
            :           :                    :           :     +- Scan parquet default.item (54)
            :           :                    :           +- ReusedExchange (57)
            :           :                    +- ReusedExchange (62)
            :           :- * Project (85)
            :           :  +- * Filter (84)
            :           :     +- * HashAggregate (83)
            :           :        +- Exchange (82)
            :           :           +- * HashAggregate (81)
            :           :              +- * Project (80)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (79)
            :           :                    :- * Project (77)
            :           :                    :  +- * BroadcastHashJoin Inner BuildRight (76)
            :           :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (74)
            :           :                    :     :  :- * Filter (72)
            :           :                    :     :  :  +- * ColumnarToRow (71)
            :           :                    :     :  :     +- Scan parquet default.catalog_sales (70)
            :           :                    :     :  +- ReusedExchange (73)
            :           :                    :     +- ReusedExchange (75)
            :           :                    +- ReusedExchange (78)
            :           +- * Project (101)
            :              +- * Filter (100)
            :                 +- * HashAggregate (99)
            :                    +- Exchange (98)
            :                       +- * HashAggregate (97)
            :                          +- * Project (96)
            :                             +- * BroadcastHashJoin Inner BuildRight (95)
            :                                :- * Project (93)
            :                                :  +- * BroadcastHashJoin Inner BuildRight (92)
            :                                :     :- * BroadcastHashJoin LeftSemi BuildRight (90)
            :                                :     :  :- * Filter (88)
            :                                :     :  :  +- * ColumnarToRow (87)
            :                                :     :  :     +- Scan parquet default.web_sales (86)
            :                                :     :  +- ReusedExchange (89)
            :                                :     +- ReusedExchange (91)
            :                                +- ReusedExchange (94)
            :- * HashAggregate (110)
            :  +- Exchange (109)
            :     +- * HashAggregate (108)
            :        +- * HashAggregate (107)
            :           +- ReusedExchange (106)
            :- * HashAggregate (115)
            :  +- Exchange (114)
            :     +- * HashAggregate (113)
            :        +- * HashAggregate (112)
            :           +- ReusedExchange (111)
            :- * HashAggregate (120)
            :  +- Exchange (119)
            :     +- * HashAggregate (118)
            :        +- * HashAggregate (117)
            :           +- ReusedExchange (116)
            +- * HashAggregate (125)
               +- Exchange (124)
                  +- * HashAggregate (123)
                     +- * HashAggregate (122)
                        +- ReusedExchange (121)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(6) Filter [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(7) Scan parquet default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 6]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]

(9) Filter [codegen id : 6]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(10) Scan parquet default.item
Output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(12) Filter [codegen id : 4]
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Condition : (((isnotnull(i_item_sk#13) AND isnotnull(i_brand_id#14)) AND isnotnull(i_class_id#15)) AND isnotnull(i_category_id#16))

(13) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(cs_sold_date_sk#18 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(14) ColumnarToRow [codegen id : 3]
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]

(15) Filter [codegen id : 3]
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Condition : isnotnull(cs_item_sk#17)

(16) Scan parquet default.item
Output [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(17) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]

(18) Filter [codegen id : 1]
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Condition : isnotnull(i_item_sk#19)

(19) BroadcastExchange
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#23]

(20) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_item_sk#17]
Right keys [1]: [i_item_sk#19]
Join condition: None

(21) Project [codegen id : 3]
Output [4]: [cs_sold_date_sk#18, i_brand_id#20, i_class_id#21, i_category_id#22]
Input [6]: [cs_item_sk#17, cs_sold_date_sk#18, i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]

(22) ReusedExchange [Reuses operator id: 164]
Output [1]: [d_date_sk#24]

(23) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#24]
Join condition: None

(24) Project [codegen id : 3]
Output [3]: [i_brand_id#20, i_class_id#21, i_category_id#22]
Input [5]: [cs_sold_date_sk#18, i_brand_id#20, i_class_id#21, i_category_id#22, d_date_sk#24]

(25) BroadcastExchange
Input [3]: [i_brand_id#20, i_class_id#21, i_category_id#22]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#25]

(26) BroadcastHashJoin [codegen id : 4]
Left keys [6]: [coalesce(i_brand_id#14, 0), isnull(i_brand_id#14), coalesce(i_class_id#15, 0), isnull(i_class_id#15), coalesce(i_category_id#16, 0), isnull(i_category_id#16)]
Right keys [6]: [coalesce(i_brand_id#20, 0), isnull(i_brand_id#20), coalesce(i_class_id#21, 0), isnull(i_class_id#21), coalesce(i_category_id#22, 0), isnull(i_category_id#22)]
Join condition: None

(27) BroadcastExchange
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#26]

(28) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#10]
Right keys [1]: [i_item_sk#13]
Join condition: None

(29) Project [codegen id : 6]
Output [4]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16]
Input [6]: [ss_item_sk#10, ss_sold_date_sk#11, i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(30) ReusedExchange [Reuses operator id: 164]
Output [1]: [d_date_sk#27]

(31) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#27]
Join condition: None

(32) Project [codegen id : 6]
Output [3]: [i_brand_id#14 AS brand_id#28, i_class_id#15 AS class_id#29, i_category_id#16 AS category_id#30]
Input [5]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16, d_date_sk#27]

(33) HashAggregate [codegen id : 6]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(34) Exchange
Input [3]: [brand_id#28, class_id#29, category_id#30]
Arguments: hashpartitioning(brand_id#28, class_id#29, category_id#30, 5), ENSURE_REQUIREMENTS, [id=#31]

(35) HashAggregate [codegen id : 10]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(36) Scan parquet default.web_sales
Output [2]: [ws_item_sk#32, ws_sold_date_sk#33]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#33), dynamicpruningexpression(ws_sold_date_sk#33 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(37) ColumnarToRow [codegen id : 9]
Input [2]: [ws_item_sk#32, ws_sold_date_sk#33]

(38) Filter [codegen id : 9]
Input [2]: [ws_item_sk#32, ws_sold_date_sk#33]
Condition : isnotnull(ws_item_sk#32)

(39) ReusedExchange [Reuses operator id: 19]
Output [4]: [i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]

(40) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_item_sk#32]
Right keys [1]: [i_item_sk#34]
Join condition: None

(41) Project [codegen id : 9]
Output [4]: [ws_sold_date_sk#33, i_brand_id#35, i_class_id#36, i_category_id#37]
Input [6]: [ws_item_sk#32, ws_sold_date_sk#33, i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]

(42) ReusedExchange [Reuses operator id: 164]
Output [1]: [d_date_sk#38]

(43) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_sold_date_sk#33]
Right keys [1]: [d_date_sk#38]
Join condition: None

(44) Project [codegen id : 9]
Output [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Input [5]: [ws_sold_date_sk#33, i_brand_id#35, i_class_id#36, i_category_id#37, d_date_sk#38]

(45) BroadcastExchange
Input [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#39]

(46) BroadcastHashJoin [codegen id : 10]
Left keys [6]: [coalesce(brand_id#28, 0), isnull(brand_id#28), coalesce(class_id#29, 0), isnull(class_id#29), coalesce(category_id#30, 0), isnull(category_id#30)]
Right keys [6]: [coalesce(i_brand_id#35, 0), isnull(i_brand_id#35), coalesce(i_class_id#36, 0), isnull(i_class_id#36), coalesce(i_category_id#37, 0), isnull(i_category_id#37)]
Join condition: None

(47) HashAggregate [codegen id : 10]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(48) HashAggregate [codegen id : 10]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(49) BroadcastExchange
Input [3]: [brand_id#28, class_id#29, category_id#30]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#40]

(50) BroadcastHashJoin [codegen id : 11]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#28, class_id#29, category_id#30]
Join condition: None

(51) Project [codegen id : 11]
Output [1]: [i_item_sk#6 AS ss_item_sk#41]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#28, class_id#29, category_id#30]

(52) BroadcastExchange
Input [1]: [ss_item_sk#41]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#42]

(53) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(54) Scan parquet default.item
Output [4]: [i_item_sk#43, i_brand_id#44, i_class_id#45, i_category_id#46]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(55) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#43, i_brand_id#44, i_class_id#45, i_category_id#46]

(56) Filter [codegen id : 23]
Input [4]: [i_item_sk#43, i_brand_id#44, i_class_id#45, i_category_id#46]
Condition : isnotnull(i_item_sk#43)

(57) ReusedExchange [Reuses operator id: 52]
Output [1]: [ss_item_sk#41]

(58) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [i_item_sk#43]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(59) BroadcastExchange
Input [4]: [i_item_sk#43, i_brand_id#44, i_class_id#45, i_category_id#46]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#47]

(60) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#43]
Join condition: None

(61) Project [codegen id : 25]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#44, i_class_id#45, i_category_id#46]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#43, i_brand_id#44, i_class_id#45, i_category_id#46]

(62) ReusedExchange [Reuses operator id: 159]
Output [1]: [d_date_sk#48]

(63) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#48]
Join condition: None

(64) Project [codegen id : 25]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#44, i_class_id#45, i_category_id#46]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#44, i_class_id#45, i_category_id#46, d_date_sk#48]

(65) HashAggregate [codegen id : 25]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#44, i_class_id#45, i_category_id#46]
Keys [3]: [i_brand_id#44, i_class_id#45, i_category_id#46]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#49, isEmpty#50, count#51]
Results [6]: [i_brand_id#44, i_class_id#45, i_category_id#46, sum#52, isEmpty#53, count#54]

(66) Exchange
Input [6]: [i_brand_id#44, i_class_id#45, i_category_id#46, sum#52, isEmpty#53, count#54]
Arguments: hashpartitioning(i_brand_id#44, i_class_id#45, i_category_id#46, 5), ENSURE_REQUIREMENTS, [id=#55]

(67) HashAggregate [codegen id : 26]
Input [6]: [i_brand_id#44, i_class_id#45, i_category_id#46, sum#52, isEmpty#53, count#54]
Keys [3]: [i_brand_id#44, i_class_id#45, i_category_id#46]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#56, count(1)#57]
Results [6]: [i_brand_id#44, i_class_id#45, i_category_id#46, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#56 AS sales#58, count(1)#57 AS number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#56 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#60]

(68) Filter [codegen id : 26]
Input [6]: [i_brand_id#44, i_class_id#45, i_category_id#46, sales#58, number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#60]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#60) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#60 as decimal(32,6)) > cast(Subquery scalar-subquery#61, [id=#62] as decimal(32,6))))

(69) Project [codegen id : 26]
Output [6]: [store AS channel#63, i_brand_id#44, i_class_id#45, i_category_id#46, sales#58, number_sales#59]
Input [6]: [i_brand_id#44, i_class_id#45, i_category_id#46, sales#58, number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#60]

(70) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#64, cs_quantity#65, cs_list_price#66, cs_sold_date_sk#67]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#67), dynamicpruningexpression(cs_sold_date_sk#67 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(71) ColumnarToRow [codegen id : 51]
Input [4]: [cs_item_sk#64, cs_quantity#65, cs_list_price#66, cs_sold_date_sk#67]

(72) Filter [codegen id : 51]
Input [4]: [cs_item_sk#64, cs_quantity#65, cs_list_price#66, cs_sold_date_sk#67]
Condition : isnotnull(cs_item_sk#64)

(73) ReusedExchange [Reuses operator id: 52]
Output [1]: [ss_item_sk#41]

(74) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#64]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(75) ReusedExchange [Reuses operator id: 59]
Output [4]: [i_item_sk#68, i_brand_id#69, i_class_id#70, i_category_id#71]

(76) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#64]
Right keys [1]: [i_item_sk#68]
Join condition: None

(77) Project [codegen id : 51]
Output [6]: [cs_quantity#65, cs_list_price#66, cs_sold_date_sk#67, i_brand_id#69, i_class_id#70, i_category_id#71]
Input [8]: [cs_item_sk#64, cs_quantity#65, cs_list_price#66, cs_sold_date_sk#67, i_item_sk#68, i_brand_id#69, i_class_id#70, i_category_id#71]

(78) ReusedExchange [Reuses operator id: 159]
Output [1]: [d_date_sk#72]

(79) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_sold_date_sk#67]
Right keys [1]: [d_date_sk#72]
Join condition: None

(80) Project [codegen id : 51]
Output [5]: [cs_quantity#65, cs_list_price#66, i_brand_id#69, i_class_id#70, i_category_id#71]
Input [7]: [cs_quantity#65, cs_list_price#66, cs_sold_date_sk#67, i_brand_id#69, i_class_id#70, i_category_id#71, d_date_sk#72]

(81) HashAggregate [codegen id : 51]
Input [5]: [cs_quantity#65, cs_list_price#66, i_brand_id#69, i_class_id#70, i_category_id#71]
Keys [3]: [i_brand_id#69, i_class_id#70, i_category_id#71]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#66 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#73, isEmpty#74, count#75]
Results [6]: [i_brand_id#69, i_class_id#70, i_category_id#71, sum#76, isEmpty#77, count#78]

(82) Exchange
Input [6]: [i_brand_id#69, i_class_id#70, i_category_id#71, sum#76, isEmpty#77, count#78]
Arguments: hashpartitioning(i_brand_id#69, i_class_id#70, i_category_id#71, 5), ENSURE_REQUIREMENTS, [id=#79]

(83) HashAggregate [codegen id : 52]
Input [6]: [i_brand_id#69, i_class_id#70, i_category_id#71, sum#76, isEmpty#77, count#78]
Keys [3]: [i_brand_id#69, i_class_id#70, i_category_id#71]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#66 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#80, count(1)#81]
Results [6]: [i_brand_id#69, i_class_id#70, i_category_id#71, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#80 AS sales#82, count(1)#81 AS number_sales#83, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#80 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#84]

(84) Filter [codegen id : 52]
Input [6]: [i_brand_id#69, i_class_id#70, i_category_id#71, sales#82, number_sales#83, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#84]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#84) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#84 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#61, [id=#62] as decimal(32,6))))

(85) Project [codegen id : 52]
Output [6]: [catalog AS channel#85, i_brand_id#69, i_class_id#70, i_category_id#71, sales#82, number_sales#83]
Input [6]: [i_brand_id#69, i_class_id#70, i_category_id#71, sales#82, number_sales#83, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#84]

(86) Scan parquet default.web_sales
Output [4]: [ws_item_sk#86, ws_quantity#87, ws_list_price#88, ws_sold_date_sk#89]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#89), dynamicpruningexpression(ws_sold_date_sk#89 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(87) ColumnarToRow [codegen id : 77]
Input [4]: [ws_item_sk#86, ws_quantity#87, ws_list_price#88, ws_sold_date_sk#89]

(88) Filter [codegen id : 77]
Input [4]: [ws_item_sk#86, ws_quantity#87, ws_list_price#88, ws_sold_date_sk#89]
Condition : isnotnull(ws_item_sk#86)

(89) ReusedExchange [Reuses operator id: 52]
Output [1]: [ss_item_sk#41]

(90) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#86]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(91) ReusedExchange [Reuses operator id: 59]
Output [4]: [i_item_sk#90, i_brand_id#91, i_class_id#92, i_category_id#93]

(92) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#86]
Right keys [1]: [i_item_sk#90]
Join condition: None

(93) Project [codegen id : 77]
Output [6]: [ws_quantity#87, ws_list_price#88, ws_sold_date_sk#89, i_brand_id#91, i_class_id#92, i_category_id#93]
Input [8]: [ws_item_sk#86, ws_quantity#87, ws_list_price#88, ws_sold_date_sk#89, i_item_sk#90, i_brand_id#91, i_class_id#92, i_category_id#93]

(94) ReusedExchange [Reuses operator id: 159]
Output [1]: [d_date_sk#94]

(95) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_sold_date_sk#89]
Right keys [1]: [d_date_sk#94]
Join condition: None

(96) Project [codegen id : 77]
Output [5]: [ws_quantity#87, ws_list_price#88, i_brand_id#91, i_class_id#92, i_category_id#93]
Input [7]: [ws_quantity#87, ws_list_price#88, ws_sold_date_sk#89, i_brand_id#91, i_class_id#92, i_category_id#93, d_date_sk#94]

(97) HashAggregate [codegen id : 77]
Input [5]: [ws_quantity#87, ws_list_price#88, i_brand_id#91, i_class_id#92, i_category_id#93]
Keys [3]: [i_brand_id#91, i_class_id#92, i_category_id#93]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#87 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#88 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#95, isEmpty#96, count#97]
Results [6]: [i_brand_id#91, i_class_id#92, i_category_id#93, sum#98, isEmpty#99, count#100]

(98) Exchange
Input [6]: [i_brand_id#91, i_class_id#92, i_category_id#93, sum#98, isEmpty#99, count#100]
Arguments: hashpartitioning(i_brand_id#91, i_class_id#92, i_category_id#93, 5), ENSURE_REQUIREMENTS, [id=#101]

(99) HashAggregate [codegen id : 78]
Input [6]: [i_brand_id#91, i_class_id#92, i_category_id#93, sum#98, isEmpty#99, count#100]
Keys [3]: [i_brand_id#91, i_class_id#92, i_category_id#93]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#87 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#88 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#87 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#88 as decimal(12,2)))), DecimalType(18,2), true))#102, count(1)#103]
Results [6]: [i_brand_id#91, i_class_id#92, i_category_id#93, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#87 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#88 as decimal(12,2)))), DecimalType(18,2), true))#102 AS sales#104, count(1)#103 AS number_sales#105, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#87 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#88 as decimal(12,2)))), DecimalType(18,2), true))#102 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#87 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#88 as decimal(12,2)))), DecimalType(18,2), true))#106]

(100) Filter [codegen id : 78]
Input [6]: [i_brand_id#91, i_class_id#92, i_category_id#93, sales#104, number_sales#105, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#87 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#88 as decimal(12,2)))), DecimalType(18,2), true))#106]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#87 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#88 as decimal(12,2)))), DecimalType(18,2), true))#106) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#87 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#88 as decimal(12,2)))), DecimalType(18,2), true))#106 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#61, [id=#62] as decimal(32,6))))

(101) Project [codegen id : 78]
Output [6]: [web AS channel#107, i_brand_id#91, i_class_id#92, i_category_id#93, sales#104, number_sales#105]
Input [6]: [i_brand_id#91, i_class_id#92, i_category_id#93, sales#104, number_sales#105, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#87 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#88 as decimal(12,2)))), DecimalType(18,2), true))#106]

(102) Union

(103) HashAggregate [codegen id : 79]
Input [6]: [channel#63, i_brand_id#44, i_class_id#45, i_category_id#46, sales#58, number_sales#59]
Keys [4]: [channel#63, i_brand_id#44, i_class_id#45, i_category_id#46]
Functions [2]: [partial_sum(sales#58), partial_sum(number_sales#59)]
Aggregate Attributes [3]: [sum#108, isEmpty#109, sum#110]
Results [7]: [channel#63, i_brand_id#44, i_class_id#45, i_category_id#46, sum#111, isEmpty#112, sum#113]

(104) Exchange
Input [7]: [channel#63, i_brand_id#44, i_class_id#45, i_category_id#46, sum#111, isEmpty#112, sum#113]
Arguments: hashpartitioning(channel#63, i_brand_id#44, i_class_id#45, i_category_id#46, 5), ENSURE_REQUIREMENTS, [id=#114]

(105) HashAggregate [codegen id : 80]
Input [7]: [channel#63, i_brand_id#44, i_class_id#45, i_category_id#46, sum#111, isEmpty#112, sum#113]
Keys [4]: [channel#63, i_brand_id#44, i_class_id#45, i_category_id#46]
Functions [2]: [sum(sales#58), sum(number_sales#59)]
Aggregate Attributes [2]: [sum(sales#58)#115, sum(number_sales#59)#116]
Results [6]: [channel#63, i_brand_id#44, i_class_id#45, i_category_id#46, sum(sales#58)#115 AS sum_sales#117, sum(number_sales#59)#116 AS number_sales#118]

(106) ReusedExchange [Reuses operator id: 104]
Output [7]: [channel#63, i_brand_id#119, i_class_id#120, i_category_id#121, sum#122, isEmpty#123, sum#124]

(107) HashAggregate [codegen id : 160]
Input [7]: [channel#63, i_brand_id#119, i_class_id#120, i_category_id#121, sum#122, isEmpty#123, sum#124]
Keys [4]: [channel#63, i_brand_id#119, i_class_id#120, i_category_id#121]
Functions [2]: [sum(sales#58), sum(number_sales#59)]
Aggregate Attributes [2]: [sum(sales#58)#125, sum(number_sales#59)#126]
Results [5]: [channel#63, i_brand_id#119, i_class_id#120, sum(sales#58)#125 AS sum_sales#117, sum(number_sales#59)#126 AS number_sales#118]

(108) HashAggregate [codegen id : 160]
Input [5]: [channel#63, i_brand_id#119, i_class_id#120, sum_sales#117, number_sales#118]
Keys [3]: [channel#63, i_brand_id#119, i_class_id#120]
Functions [2]: [partial_sum(sum_sales#117), partial_sum(number_sales#118)]
Aggregate Attributes [3]: [sum#127, isEmpty#128, sum#129]
Results [6]: [channel#63, i_brand_id#119, i_class_id#120, sum#130, isEmpty#131, sum#132]

(109) Exchange
Input [6]: [channel#63, i_brand_id#119, i_class_id#120, sum#130, isEmpty#131, sum#132]
Arguments: hashpartitioning(channel#63, i_brand_id#119, i_class_id#120, 5), ENSURE_REQUIREMENTS, [id=#133]

(110) HashAggregate [codegen id : 161]
Input [6]: [channel#63, i_brand_id#119, i_class_id#120, sum#130, isEmpty#131, sum#132]
Keys [3]: [channel#63, i_brand_id#119, i_class_id#120]
Functions [2]: [sum(sum_sales#117), sum(number_sales#118)]
Aggregate Attributes [2]: [sum(sum_sales#117)#134, sum(number_sales#118)#135]
Results [6]: [channel#63, i_brand_id#119, i_class_id#120, null AS i_category_id#136, sum(sum_sales#117)#134 AS sum(sum_sales)#137, sum(number_sales#118)#135 AS sum(number_sales)#138]

(111) ReusedExchange [Reuses operator id: 104]
Output [7]: [channel#63, i_brand_id#139, i_class_id#140, i_category_id#141, sum#142, isEmpty#143, sum#144]

(112) HashAggregate [codegen id : 241]
Input [7]: [channel#63, i_brand_id#139, i_class_id#140, i_category_id#141, sum#142, isEmpty#143, sum#144]
Keys [4]: [channel#63, i_brand_id#139, i_class_id#140, i_category_id#141]
Functions [2]: [sum(sales#58), sum(number_sales#59)]
Aggregate Attributes [2]: [sum(sales#58)#145, sum(number_sales#59)#146]
Results [4]: [channel#63, i_brand_id#139, sum(sales#58)#145 AS sum_sales#117, sum(number_sales#59)#146 AS number_sales#118]

(113) HashAggregate [codegen id : 241]
Input [4]: [channel#63, i_brand_id#139, sum_sales#117, number_sales#118]
Keys [2]: [channel#63, i_brand_id#139]
Functions [2]: [partial_sum(sum_sales#117), partial_sum(number_sales#118)]
Aggregate Attributes [3]: [sum#147, isEmpty#148, sum#149]
Results [5]: [channel#63, i_brand_id#139, sum#150, isEmpty#151, sum#152]

(114) Exchange
Input [5]: [channel#63, i_brand_id#139, sum#150, isEmpty#151, sum#152]
Arguments: hashpartitioning(channel#63, i_brand_id#139, 5), ENSURE_REQUIREMENTS, [id=#153]

(115) HashAggregate [codegen id : 242]
Input [5]: [channel#63, i_brand_id#139, sum#150, isEmpty#151, sum#152]
Keys [2]: [channel#63, i_brand_id#139]
Functions [2]: [sum(sum_sales#117), sum(number_sales#118)]
Aggregate Attributes [2]: [sum(sum_sales#117)#154, sum(number_sales#118)#155]
Results [6]: [channel#63, i_brand_id#139, null AS i_class_id#156, null AS i_category_id#157, sum(sum_sales#117)#154 AS sum(sum_sales)#158, sum(number_sales#118)#155 AS sum(number_sales)#159]

(116) ReusedExchange [Reuses operator id: 104]
Output [7]: [channel#63, i_brand_id#160, i_class_id#161, i_category_id#162, sum#163, isEmpty#164, sum#165]

(117) HashAggregate [codegen id : 322]
Input [7]: [channel#63, i_brand_id#160, i_class_id#161, i_category_id#162, sum#163, isEmpty#164, sum#165]
Keys [4]: [channel#63, i_brand_id#160, i_class_id#161, i_category_id#162]
Functions [2]: [sum(sales#58), sum(number_sales#59)]
Aggregate Attributes [2]: [sum(sales#58)#166, sum(number_sales#59)#167]
Results [3]: [channel#63, sum(sales#58)#166 AS sum_sales#117, sum(number_sales#59)#167 AS number_sales#118]

(118) HashAggregate [codegen id : 322]
Input [3]: [channel#63, sum_sales#117, number_sales#118]
Keys [1]: [channel#63]
Functions [2]: [partial_sum(sum_sales#117), partial_sum(number_sales#118)]
Aggregate Attributes [3]: [sum#168, isEmpty#169, sum#170]
Results [4]: [channel#63, sum#171, isEmpty#172, sum#173]

(119) Exchange
Input [4]: [channel#63, sum#171, isEmpty#172, sum#173]
Arguments: hashpartitioning(channel#63, 5), ENSURE_REQUIREMENTS, [id=#174]

(120) HashAggregate [codegen id : 323]
Input [4]: [channel#63, sum#171, isEmpty#172, sum#173]
Keys [1]: [channel#63]
Functions [2]: [sum(sum_sales#117), sum(number_sales#118)]
Aggregate Attributes [2]: [sum(sum_sales#117)#175, sum(number_sales#118)#176]
Results [6]: [channel#63, null AS i_brand_id#177, null AS i_class_id#178, null AS i_category_id#179, sum(sum_sales#117)#175 AS sum(sum_sales)#180, sum(number_sales#118)#176 AS sum(number_sales)#181]

(121) ReusedExchange [Reuses operator id: 104]
Output [7]: [channel#63, i_brand_id#182, i_class_id#183, i_category_id#184, sum#185, isEmpty#186, sum#187]

(122) HashAggregate [codegen id : 403]
Input [7]: [channel#63, i_brand_id#182, i_class_id#183, i_category_id#184, sum#185, isEmpty#186, sum#187]
Keys [4]: [channel#63, i_brand_id#182, i_class_id#183, i_category_id#184]
Functions [2]: [sum(sales#58), sum(number_sales#59)]
Aggregate Attributes [2]: [sum(sales#58)#188, sum(number_sales#59)#189]
Results [2]: [sum(sales#58)#188 AS sum_sales#117, sum(number_sales#59)#189 AS number_sales#118]

(123) HashAggregate [codegen id : 403]
Input [2]: [sum_sales#117, number_sales#118]
Keys: []
Functions [2]: [partial_sum(sum_sales#117), partial_sum(number_sales#118)]
Aggregate Attributes [3]: [sum#190, isEmpty#191, sum#192]
Results [3]: [sum#193, isEmpty#194, sum#195]

(124) Exchange
Input [3]: [sum#193, isEmpty#194, sum#195]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#196]

(125) HashAggregate [codegen id : 404]
Input [3]: [sum#193, isEmpty#194, sum#195]
Keys: []
Functions [2]: [sum(sum_sales#117), sum(number_sales#118)]
Aggregate Attributes [2]: [sum(sum_sales#117)#197, sum(number_sales#118)#198]
Results [6]: [null AS channel#199, null AS i_brand_id#200, null AS i_class_id#201, null AS i_category_id#202, sum(sum_sales#117)#197 AS sum(sum_sales)#203, sum(number_sales#118)#198 AS sum(number_sales)#204]

(126) Union

(127) HashAggregate [codegen id : 405]
Input [6]: [channel#63, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#117, number_sales#118]
Keys [6]: [channel#63, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#117, number_sales#118]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#63, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#117, number_sales#118]

(128) Exchange
Input [6]: [channel#63, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#117, number_sales#118]
Arguments: hashpartitioning(channel#63, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#117, number_sales#118, 5), ENSURE_REQUIREMENTS, [id=#205]

(129) HashAggregate [codegen id : 406]
Input [6]: [channel#63, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#117, number_sales#118]
Keys [6]: [channel#63, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#117, number_sales#118]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#63, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#117, number_sales#118]

(130) TakeOrderedAndProject
Input [6]: [channel#63, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#117, number_sales#118]
Arguments: 100, [channel#63 ASC NULLS FIRST, i_brand_id#44 ASC NULLS FIRST, i_class_id#45 ASC NULLS FIRST, i_category_id#46 ASC NULLS FIRST], [channel#63, i_brand_id#44, i_class_id#45, i_category_id#46, sum_sales#117, number_sales#118]

===== Subqueries =====

Subquery:1 Hosting operator id = 68 Hosting Expression = Subquery scalar-subquery#61, [id=#62]
* HashAggregate (149)
+- Exchange (148)
   +- * HashAggregate (147)
      +- Union (146)
         :- * Project (135)
         :  +- * BroadcastHashJoin Inner BuildRight (134)
         :     :- * ColumnarToRow (132)
         :     :  +- Scan parquet default.store_sales (131)
         :     +- ReusedExchange (133)
         :- * Project (140)
         :  +- * BroadcastHashJoin Inner BuildRight (139)
         :     :- * ColumnarToRow (137)
         :     :  +- Scan parquet default.catalog_sales (136)
         :     +- ReusedExchange (138)
         +- * Project (145)
            +- * BroadcastHashJoin Inner BuildRight (144)
               :- * ColumnarToRow (142)
               :  +- Scan parquet default.web_sales (141)
               +- ReusedExchange (143)


(131) Scan parquet default.store_sales
Output [3]: [ss_quantity#206, ss_list_price#207, ss_sold_date_sk#208]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#208), dynamicpruningexpression(ss_sold_date_sk#208 IN dynamicpruning#12)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(132) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#206, ss_list_price#207, ss_sold_date_sk#208]

(133) ReusedExchange [Reuses operator id: 164]
Output [1]: [d_date_sk#209]

(134) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#208]
Right keys [1]: [d_date_sk#209]
Join condition: None

(135) Project [codegen id : 2]
Output [2]: [ss_quantity#206 AS quantity#210, ss_list_price#207 AS list_price#211]
Input [4]: [ss_quantity#206, ss_list_price#207, ss_sold_date_sk#208, d_date_sk#209]

(136) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#212, cs_list_price#213, cs_sold_date_sk#214]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#214), dynamicpruningexpression(cs_sold_date_sk#214 IN dynamicpruning#215)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(137) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#212, cs_list_price#213, cs_sold_date_sk#214]

(138) ReusedExchange [Reuses operator id: 154]
Output [1]: [d_date_sk#216]

(139) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#214]
Right keys [1]: [d_date_sk#216]
Join condition: None

(140) Project [codegen id : 4]
Output [2]: [cs_quantity#212 AS quantity#217, cs_list_price#213 AS list_price#218]
Input [4]: [cs_quantity#212, cs_list_price#213, cs_sold_date_sk#214, d_date_sk#216]

(141) Scan parquet default.web_sales
Output [3]: [ws_quantity#219, ws_list_price#220, ws_sold_date_sk#221]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#221), dynamicpruningexpression(ws_sold_date_sk#221 IN dynamicpruning#215)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(142) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#219, ws_list_price#220, ws_sold_date_sk#221]

(143) ReusedExchange [Reuses operator id: 154]
Output [1]: [d_date_sk#222]

(144) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#221]
Right keys [1]: [d_date_sk#222]
Join condition: None

(145) Project [codegen id : 6]
Output [2]: [ws_quantity#219 AS quantity#223, ws_list_price#220 AS list_price#224]
Input [4]: [ws_quantity#219, ws_list_price#220, ws_sold_date_sk#221, d_date_sk#222]

(146) Union

(147) HashAggregate [codegen id : 7]
Input [2]: [quantity#210, list_price#211]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#210 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#211 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#225, count#226]
Results [2]: [sum#227, count#228]

(148) Exchange
Input [2]: [sum#227, count#228]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#229]

(149) HashAggregate [codegen id : 8]
Input [2]: [sum#227, count#228]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#210 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#211 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#210 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#211 as decimal(12,2)))), DecimalType(18,2), true))#230]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#210 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#211 as decimal(12,2)))), DecimalType(18,2), true))#230 AS average_sales#231]

Subquery:2 Hosting operator id = 131 Hosting Expression = ss_sold_date_sk#208 IN dynamicpruning#12

Subquery:3 Hosting operator id = 136 Hosting Expression = cs_sold_date_sk#214 IN dynamicpruning#215
BroadcastExchange (154)
+- * Project (153)
   +- * Filter (152)
      +- * ColumnarToRow (151)
         +- Scan parquet default.date_dim (150)


(150) Scan parquet default.date_dim
Output [2]: [d_date_sk#216, d_year#232]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(151) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#216, d_year#232]

(152) Filter [codegen id : 1]
Input [2]: [d_date_sk#216, d_year#232]
Condition : (((isnotnull(d_year#232) AND (d_year#232 >= 1998)) AND (d_year#232 <= 2000)) AND isnotnull(d_date_sk#216))

(153) Project [codegen id : 1]
Output [1]: [d_date_sk#216]
Input [2]: [d_date_sk#216, d_year#232]

(154) BroadcastExchange
Input [1]: [d_date_sk#216]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#233]

Subquery:4 Hosting operator id = 141 Hosting Expression = ws_sold_date_sk#221 IN dynamicpruning#215

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (159)
+- * Project (158)
   +- * Filter (157)
      +- * ColumnarToRow (156)
         +- Scan parquet default.date_dim (155)


(155) Scan parquet default.date_dim
Output [3]: [d_date_sk#48, d_year#234, d_moy#235]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(156) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#48, d_year#234, d_moy#235]

(157) Filter [codegen id : 1]
Input [3]: [d_date_sk#48, d_year#234, d_moy#235]
Condition : ((((isnotnull(d_year#234) AND isnotnull(d_moy#235)) AND (d_year#234 = 2000)) AND (d_moy#235 = 11)) AND isnotnull(d_date_sk#48))

(158) Project [codegen id : 1]
Output [1]: [d_date_sk#48]
Input [3]: [d_date_sk#48, d_year#234, d_moy#235]

(159) BroadcastExchange
Input [1]: [d_date_sk#48]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#236]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (164)
+- * Project (163)
   +- * Filter (162)
      +- * ColumnarToRow (161)
         +- Scan parquet default.date_dim (160)


(160) Scan parquet default.date_dim
Output [2]: [d_date_sk#27, d_year#237]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(161) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#27, d_year#237]

(162) Filter [codegen id : 1]
Input [2]: [d_date_sk#27, d_year#237]
Condition : (((isnotnull(d_year#237) AND (d_year#237 >= 1999)) AND (d_year#237 <= 2001)) AND isnotnull(d_date_sk#27))

(163) Project [codegen id : 1]
Output [1]: [d_date_sk#27]
Input [2]: [d_date_sk#27, d_year#237]

(164) BroadcastExchange
Input [1]: [d_date_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#238]

Subquery:7 Hosting operator id = 13 Hosting Expression = cs_sold_date_sk#18 IN dynamicpruning#12

Subquery:8 Hosting operator id = 36 Hosting Expression = ws_sold_date_sk#33 IN dynamicpruning#12

Subquery:9 Hosting operator id = 84 Hosting Expression = ReusedSubquery Subquery scalar-subquery#61, [id=#62]

Subquery:10 Hosting operator id = 70 Hosting Expression = cs_sold_date_sk#67 IN dynamicpruning#5

Subquery:11 Hosting operator id = 100 Hosting Expression = ReusedSubquery Subquery scalar-subquery#61, [id=#62]

Subquery:12 Hosting operator id = 86 Hosting Expression = ws_sold_date_sk#89 IN dynamicpruning#5


