== Physical Plan ==
TakeOrderedAndProject (200)
+- * HashAggregate (199)
   +- Exchange (198)
      +- * HashAggregate (197)
         +- Union (196)
            :- * HashAggregate (119)
            :  +- Exchange (118)
            :     +- * HashAggregate (117)
            :        +- Union (116)
            :           :- * Project (83)
            :           :  +- * Filter (82)
            :           :     +- * HashAggregate (81)
            :           :        +- Exchange (80)
            :           :           +- * HashAggregate (79)
            :           :              +- * Project (78)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (77)
            :           :                    :- * Project (71)
            :           :                    :  +- * BroadcastHashJoin Inner BuildRight (70)
            :           :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (63)
            :           :                    :     :  :- * Filter (3)
            :           :                    :     :  :  +- * ColumnarToRow (2)
            :           :                    :     :  :     +- Scan parquet default.store_sales (1)
            :           :                    :     :  +- BroadcastExchange (62)
            :           :                    :     :     +- * Project (61)
            :           :                    :     :        +- * BroadcastHashJoin Inner BuildRight (60)
            :           :                    :     :           :- * Filter (6)
            :           :                    :     :           :  +- * ColumnarToRow (5)
            :           :                    :     :           :     +- Scan parquet default.item (4)
            :           :                    :     :           +- BroadcastExchange (59)
            :           :                    :     :              +- * BroadcastHashJoin LeftSemi BuildRight (58)
            :           :                    :     :                 :- * HashAggregate (44)
            :           :                    :     :                 :  +- * HashAggregate (43)
            :           :                    :     :                 :     +- * BroadcastHashJoin LeftSemi BuildRight (42)
            :           :                    :     :                 :        :- * HashAggregate (25)
            :           :                    :     :                 :        :  +- Exchange (24)
            :           :                    :     :                 :        :     +- * HashAggregate (23)
            :           :                    :     :                 :        :        +- * Project (22)
            :           :                    :     :                 :        :           +- * BroadcastHashJoin Inner BuildRight (21)
            :           :                    :     :                 :        :              :- * Project (15)
            :           :                    :     :                 :        :              :  +- * BroadcastHashJoin Inner BuildRight (14)
            :           :                    :     :                 :        :              :     :- * Filter (9)
            :           :                    :     :                 :        :              :     :  +- * ColumnarToRow (8)
            :           :                    :     :                 :        :              :     :     +- Scan parquet default.store_sales (7)
            :           :                    :     :                 :        :              :     +- BroadcastExchange (13)
            :           :                    :     :                 :        :              :        +- * Filter (12)
            :           :                    :     :                 :        :              :           +- * ColumnarToRow (11)
            :           :                    :     :                 :        :              :              +- Scan parquet default.item (10)
            :           :                    :     :                 :        :              +- BroadcastExchange (20)
            :           :                    :     :                 :        :                 +- * Project (19)
            :           :                    :     :                 :        :                    +- * Filter (18)
            :           :                    :     :                 :        :                       +- * ColumnarToRow (17)
            :           :                    :     :                 :        :                          +- Scan parquet default.date_dim (16)
            :           :                    :     :                 :        +- BroadcastExchange (41)
            :           :                    :     :                 :           +- * HashAggregate (40)
            :           :                    :     :                 :              +- Exchange (39)
            :           :                    :     :                 :                 +- * HashAggregate (38)
            :           :                    :     :                 :                    +- * Project (37)
            :           :                    :     :                 :                       +- * BroadcastHashJoin Inner BuildRight (36)
            :           :                    :     :                 :                          :- * Project (34)
            :           :                    :     :                 :                          :  +- * BroadcastHashJoin Inner BuildRight (33)
            :           :                    :     :                 :                          :     :- * Filter (28)
            :           :                    :     :                 :                          :     :  +- * ColumnarToRow (27)
            :           :                    :     :                 :                          :     :     +- Scan parquet default.catalog_sales (26)
            :           :                    :     :                 :                          :     +- BroadcastExchange (32)
            :           :                    :     :                 :                          :        +- * Filter (31)
            :           :                    :     :                 :                          :           +- * ColumnarToRow (30)
            :           :                    :     :                 :                          :              +- Scan parquet default.item (29)
            :           :                    :     :                 :                          +- ReusedExchange (35)
            :           :                    :     :                 +- BroadcastExchange (57)
            :           :                    :     :                    +- * HashAggregate (56)
            :           :                    :     :                       +- Exchange (55)
            :           :                    :     :                          +- * HashAggregate (54)
            :           :                    :     :                             +- * Project (53)
            :           :                    :     :                                +- * BroadcastHashJoin Inner BuildRight (52)
            :           :                    :     :                                   :- * Project (50)
            :           :                    :     :                                   :  +- * BroadcastHashJoin Inner BuildRight (49)
            :           :                    :     :                                   :     :- * Filter (47)
            :           :                    :     :                                   :     :  +- * ColumnarToRow (46)
            :           :                    :     :                                   :     :     +- Scan parquet default.web_sales (45)
            :           :                    :     :                                   :     +- ReusedExchange (48)
            :           :                    :     :                                   +- ReusedExchange (51)
            :           :                    :     +- BroadcastExchange (69)
            :           :                    :        +- * BroadcastHashJoin LeftSemi BuildRight (68)
            :           :                    :           :- * Filter (66)
            :           :                    :           :  +- * ColumnarToRow (65)
            :           :                    :           :     +- Scan parquet default.item (64)
            :           :                    :           +- ReusedExchange (67)
            :           :                    +- BroadcastExchange (76)
            :           :                       +- * Project (75)
            :           :                          +- * Filter (74)
            :           :                             +- * ColumnarToRow (73)
            :           :                                +- Scan parquet default.date_dim (72)
            :           :- * Project (99)
            :           :  +- * Filter (98)
            :           :     +- * HashAggregate (97)
            :           :        +- Exchange (96)
            :           :           +- * HashAggregate (95)
            :           :              +- * Project (94)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (93)
            :           :                    :- * Project (91)
            :           :                    :  +- * BroadcastHashJoin Inner BuildRight (90)
            :           :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (88)
            :           :                    :     :  :- * Filter (86)
            :           :                    :     :  :  +- * ColumnarToRow (85)
            :           :                    :     :  :     +- Scan parquet default.catalog_sales (84)
            :           :                    :     :  +- ReusedExchange (87)
            :           :                    :     +- ReusedExchange (89)
            :           :                    +- ReusedExchange (92)
            :           +- * Project (115)
            :              +- * Filter (114)
            :                 +- * HashAggregate (113)
            :                    +- Exchange (112)
            :                       +- * HashAggregate (111)
            :                          +- * Project (110)
            :                             +- * BroadcastHashJoin Inner BuildRight (109)
            :                                :- * Project (107)
            :                                :  +- * BroadcastHashJoin Inner BuildRight (106)
            :                                :     :- * BroadcastHashJoin LeftSemi BuildRight (104)
            :                                :     :  :- * Filter (102)
            :                                :     :  :  +- * ColumnarToRow (101)
            :                                :     :  :     +- Scan parquet default.web_sales (100)
            :                                :     :  +- ReusedExchange (103)
            :                                :     +- ReusedExchange (105)
            :                                +- ReusedExchange (108)
            :- * HashAggregate (138)
            :  +- Exchange (137)
            :     +- * HashAggregate (136)
            :        +- * HashAggregate (135)
            :           +- Exchange (134)
            :              +- * HashAggregate (133)
            :                 +- Union (132)
            :                    :- * Project (123)
            :                    :  +- * Filter (122)
            :                    :     +- * HashAggregate (121)
            :                    :        +- ReusedExchange (120)
            :                    :- * Project (127)
            :                    :  +- * Filter (126)
            :                    :     +- * HashAggregate (125)
            :                    :        +- ReusedExchange (124)
            :                    +- * Project (131)
            :                       +- * Filter (130)
            :                          +- * HashAggregate (129)
            :                             +- ReusedExchange (128)
            :- * HashAggregate (157)
            :  +- Exchange (156)
            :     +- * HashAggregate (155)
            :        +- * HashAggregate (154)
            :           +- Exchange (153)
            :              +- * HashAggregate (152)
            :                 +- Union (151)
            :                    :- * Project (142)
            :                    :  +- * Filter (141)
            :                    :     +- * HashAggregate (140)
            :                    :        +- ReusedExchange (139)
            :                    :- * Project (146)
            :                    :  +- * Filter (145)
            :                    :     +- * HashAggregate (144)
            :                    :        +- ReusedExchange (143)
            :                    +- * Project (150)
            :                       +- * Filter (149)
            :                          +- * HashAggregate (148)
            :                             +- ReusedExchange (147)
            :- * HashAggregate (176)
            :  +- Exchange (175)
            :     +- * HashAggregate (174)
            :        +- * HashAggregate (173)
            :           +- Exchange (172)
            :              +- * HashAggregate (171)
            :                 +- Union (170)
            :                    :- * Project (161)
            :                    :  +- * Filter (160)
            :                    :     +- * HashAggregate (159)
            :                    :        +- ReusedExchange (158)
            :                    :- * Project (165)
            :                    :  +- * Filter (164)
            :                    :     +- * HashAggregate (163)
            :                    :        +- ReusedExchange (162)
            :                    +- * Project (169)
            :                       +- * Filter (168)
            :                          +- * HashAggregate (167)
            :                             +- ReusedExchange (166)
            +- * HashAggregate (195)
               +- Exchange (194)
                  +- * HashAggregate (193)
                     +- * HashAggregate (192)
                        +- Exchange (191)
                           +- * HashAggregate (190)
                              +- Union (189)
                                 :- * Project (180)
                                 :  +- * Filter (179)
                                 :     +- * HashAggregate (178)
                                 :        +- ReusedExchange (177)
                                 :- * Project (184)
                                 :  +- * Filter (183)
                                 :     +- * HashAggregate (182)
                                 :        +- ReusedExchange (181)
                                 +- * Project (188)
                                    +- * Filter (187)
                                       +- * HashAggregate (186)
                                          +- ReusedExchange (185)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 29]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 29]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 13]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(6) Filter [codegen id : 13]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(7) Scan parquet default.store_sales
Output [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 3]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]

(9) Filter [codegen id : 3]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(10) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(12) Filter [codegen id : 1]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : (((isnotnull(i_item_sk#6) AND isnotnull(i_brand_id#7)) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(13) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#11]

(14) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join condition: None

(15) Project [codegen id : 3]
Output [4]: [ss_sold_date_sk#4, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [6]: [ss_item_sk#1, ss_sold_date_sk#4, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(16) Scan parquet default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(17) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#12, d_year#13]

(18) Filter [codegen id : 2]
Input [2]: [d_date_sk#12, d_year#13]
Condition : (((isnotnull(d_year#13) AND (d_year#13 >= 1999)) AND (d_year#13 <= 2001)) AND isnotnull(d_date_sk#12))

(19) Project [codegen id : 2]
Output [1]: [d_date_sk#12]
Input [2]: [d_date_sk#12, d_year#13]

(20) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(21) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#12]
Join condition: None

(22) Project [codegen id : 3]
Output [3]: [i_brand_id#7 AS brand_id#15, i_class_id#8 AS class_id#16, i_category_id#9 AS category_id#17]
Input [5]: [ss_sold_date_sk#4, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#12]

(23) HashAggregate [codegen id : 3]
Input [3]: [brand_id#15, class_id#16, category_id#17]
Keys [3]: [brand_id#15, class_id#16, category_id#17]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#15, class_id#16, category_id#17]

(24) Exchange
Input [3]: [brand_id#15, class_id#16, category_id#17]
Arguments: hashpartitioning(brand_id#15, class_id#16, category_id#17, 5), ENSURE_REQUIREMENTS, [id=#18]

(25) HashAggregate [codegen id : 12]
Input [3]: [brand_id#15, class_id#16, category_id#17]
Keys [3]: [brand_id#15, class_id#16, category_id#17]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#15, class_id#16, category_id#17]

(26) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#19, cs_sold_date_sk#20]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#20), dynamicpruningexpression(cs_sold_date_sk#20 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(27) ColumnarToRow [codegen id : 6]
Input [2]: [cs_item_sk#19, cs_sold_date_sk#20]

(28) Filter [codegen id : 6]
Input [2]: [cs_item_sk#19, cs_sold_date_sk#20]
Condition : isnotnull(cs_item_sk#19)

(29) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(30) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(31) Filter [codegen id : 4]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : isnotnull(i_item_sk#6)

(32) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#21]

(33) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [i_item_sk#6]
Join condition: None

(34) Project [codegen id : 6]
Output [4]: [cs_sold_date_sk#20, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [6]: [cs_item_sk#19, cs_sold_date_sk#20, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(35) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#12]

(36) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#20]
Right keys [1]: [d_date_sk#12]
Join condition: None

(37) Project [codegen id : 6]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [cs_sold_date_sk#20, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#12]

(38) HashAggregate [codegen id : 6]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]

(39) Exchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#22]

(40) HashAggregate [codegen id : 7]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]

(41) BroadcastExchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#23]

(42) BroadcastHashJoin [codegen id : 12]
Left keys [6]: [coalesce(brand_id#15, 0), isnull(brand_id#15), coalesce(class_id#16, 0), isnull(class_id#16), coalesce(category_id#17, 0), isnull(category_id#17)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join condition: None

(43) HashAggregate [codegen id : 12]
Input [3]: [brand_id#15, class_id#16, category_id#17]
Keys [3]: [brand_id#15, class_id#16, category_id#17]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#15, class_id#16, category_id#17]

(44) HashAggregate [codegen id : 12]
Input [3]: [brand_id#15, class_id#16, category_id#17]
Keys [3]: [brand_id#15, class_id#16, category_id#17]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#15, class_id#16, category_id#17]

(45) Scan parquet default.web_sales
Output [2]: [ws_item_sk#24, ws_sold_date_sk#25]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#25), dynamicpruningexpression(ws_sold_date_sk#25 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(46) ColumnarToRow [codegen id : 10]
Input [2]: [ws_item_sk#24, ws_sold_date_sk#25]

(47) Filter [codegen id : 10]
Input [2]: [ws_item_sk#24, ws_sold_date_sk#25]
Condition : isnotnull(ws_item_sk#24)

(48) ReusedExchange [Reuses operator id: 32]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(49) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_item_sk#24]
Right keys [1]: [i_item_sk#6]
Join condition: None

(50) Project [codegen id : 10]
Output [4]: [ws_sold_date_sk#25, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [6]: [ws_item_sk#24, ws_sold_date_sk#25, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(51) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#12]

(52) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_sold_date_sk#25]
Right keys [1]: [d_date_sk#12]
Join condition: None

(53) Project [codegen id : 10]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [ws_sold_date_sk#25, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#12]

(54) HashAggregate [codegen id : 10]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]

(55) Exchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#26]

(56) HashAggregate [codegen id : 11]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]

(57) BroadcastExchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#27]

(58) BroadcastHashJoin [codegen id : 12]
Left keys [6]: [coalesce(brand_id#15, 0), isnull(brand_id#15), coalesce(class_id#16, 0), isnull(class_id#16), coalesce(category_id#17, 0), isnull(category_id#17)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join condition: None

(59) BroadcastExchange
Input [3]: [brand_id#15, class_id#16, category_id#17]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#28]

(60) BroadcastHashJoin [codegen id : 13]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#15, class_id#16, category_id#17]
Join condition: None

(61) Project [codegen id : 13]
Output [1]: [i_item_sk#6 AS ss_item_sk#29]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#15, class_id#16, category_id#17]

(62) BroadcastExchange
Input [1]: [ss_item_sk#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#30]

(63) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#29]
Join condition: None

(64) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(65) ColumnarToRow [codegen id : 27]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(66) Filter [codegen id : 27]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : isnotnull(i_item_sk#6)

(67) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#29]

(68) BroadcastHashJoin [codegen id : 27]
Left keys [1]: [i_item_sk#6]
Right keys [1]: [ss_item_sk#29]
Join condition: None

(69) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#31]

(70) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join condition: None

(71) Project [codegen id : 29]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(72) Scan parquet default.date_dim
Output [3]: [d_date_sk#12, d_year#13, d_moy#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(73) ColumnarToRow [codegen id : 28]
Input [3]: [d_date_sk#12, d_year#13, d_moy#32]

(74) Filter [codegen id : 28]
Input [3]: [d_date_sk#12, d_year#13, d_moy#32]
Condition : ((((isnotnull(d_year#13) AND isnotnull(d_moy#32)) AND (d_year#13 = 2000)) AND (d_moy#32 = 11)) AND isnotnull(d_date_sk#12))

(75) Project [codegen id : 28]
Output [1]: [d_date_sk#12]
Input [3]: [d_date_sk#12, d_year#13, d_moy#32]

(76) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#33]

(77) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#12]
Join condition: None

(78) Project [codegen id : 29]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#12]

(79) HashAggregate [codegen id : 29]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#34, isEmpty#35, count#36]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#37, isEmpty#38, count#39]

(80) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#37, isEmpty#38, count#39]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#40]

(81) HashAggregate [codegen id : 30]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#37, isEmpty#38, count#39]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#41, count(1)#42]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#41 AS sales#43, count(1)#42 AS number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#41 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#45]

(82) Filter [codegen id : 30]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#45]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#45) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#45 as decimal(32,6)) > cast(Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(83) Project [codegen id : 30]
Output [6]: [store AS channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#45]

(84) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#19, cs_quantity#49, cs_list_price#50, cs_sold_date_sk#20]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#20), dynamicpruningexpression(cs_sold_date_sk#20 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(85) ColumnarToRow [codegen id : 59]
Input [4]: [cs_item_sk#19, cs_quantity#49, cs_list_price#50, cs_sold_date_sk#20]

(86) Filter [codegen id : 59]
Input [4]: [cs_item_sk#19, cs_quantity#49, cs_list_price#50, cs_sold_date_sk#20]
Condition : isnotnull(cs_item_sk#19)

(87) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#29]

(88) BroadcastHashJoin [codegen id : 59]
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [ss_item_sk#29]
Join condition: None

(89) ReusedExchange [Reuses operator id: 69]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(90) BroadcastHashJoin [codegen id : 59]
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [i_item_sk#6]
Join condition: None

(91) Project [codegen id : 59]
Output [6]: [cs_quantity#49, cs_list_price#50, cs_sold_date_sk#20, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [8]: [cs_item_sk#19, cs_quantity#49, cs_list_price#50, cs_sold_date_sk#20, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(92) ReusedExchange [Reuses operator id: 76]
Output [1]: [d_date_sk#12]

(93) BroadcastHashJoin [codegen id : 59]
Left keys [1]: [cs_sold_date_sk#20]
Right keys [1]: [d_date_sk#12]
Join condition: None

(94) Project [codegen id : 59]
Output [5]: [cs_quantity#49, cs_list_price#50, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [cs_quantity#49, cs_list_price#50, cs_sold_date_sk#20, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#12]

(95) HashAggregate [codegen id : 59]
Input [5]: [cs_quantity#49, cs_list_price#50, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#51, isEmpty#52, count#53]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#54, isEmpty#55, count#56]

(96) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#54, isEmpty#55, count#56]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#57]

(97) HashAggregate [codegen id : 60]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#54, isEmpty#55, count#56]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#58, count(1)#59]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#58 AS sales#60, count(1)#59 AS number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#58 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#62]

(98) Filter [codegen id : 60]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#62]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#62) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#62 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(99) Project [codegen id : 60]
Output [6]: [catalog AS channel#63, i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#62]

(100) Scan parquet default.web_sales
Output [4]: [ws_item_sk#24, ws_quantity#64, ws_list_price#65, ws_sold_date_sk#25]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#25), dynamicpruningexpression(ws_sold_date_sk#25 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(101) ColumnarToRow [codegen id : 89]
Input [4]: [ws_item_sk#24, ws_quantity#64, ws_list_price#65, ws_sold_date_sk#25]

(102) Filter [codegen id : 89]
Input [4]: [ws_item_sk#24, ws_quantity#64, ws_list_price#65, ws_sold_date_sk#25]
Condition : isnotnull(ws_item_sk#24)

(103) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#29]

(104) BroadcastHashJoin [codegen id : 89]
Left keys [1]: [ws_item_sk#24]
Right keys [1]: [ss_item_sk#29]
Join condition: None

(105) ReusedExchange [Reuses operator id: 69]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(106) BroadcastHashJoin [codegen id : 89]
Left keys [1]: [ws_item_sk#24]
Right keys [1]: [i_item_sk#6]
Join condition: None

(107) Project [codegen id : 89]
Output [6]: [ws_quantity#64, ws_list_price#65, ws_sold_date_sk#25, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [8]: [ws_item_sk#24, ws_quantity#64, ws_list_price#65, ws_sold_date_sk#25, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(108) ReusedExchange [Reuses operator id: 76]
Output [1]: [d_date_sk#12]

(109) BroadcastHashJoin [codegen id : 89]
Left keys [1]: [ws_sold_date_sk#25]
Right keys [1]: [d_date_sk#12]
Join condition: None

(110) Project [codegen id : 89]
Output [5]: [ws_quantity#64, ws_list_price#65, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ws_quantity#64, ws_list_price#65, ws_sold_date_sk#25, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#12]

(111) HashAggregate [codegen id : 89]
Input [5]: [ws_quantity#64, ws_list_price#65, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#66, isEmpty#67, count#68]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#69, isEmpty#70, count#71]

(112) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#69, isEmpty#70, count#71]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#72]

(113) HashAggregate [codegen id : 90]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#69, isEmpty#70, count#71]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#73, count(1)#74]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#73 AS sales#75, count(1)#74 AS number_sales#76, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#73 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#77]

(114) Filter [codegen id : 90]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#75, number_sales#76, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#77]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#77) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#77 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(115) Project [codegen id : 90]
Output [6]: [web AS channel#78, i_brand_id#7, i_class_id#8, i_category_id#9, sales#75, number_sales#76]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#75, number_sales#76, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#77]

(116) Union

(117) HashAggregate [codegen id : 91]
Input [6]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44]
Keys [4]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(sales#43), partial_sum(number_sales#44)]
Aggregate Attributes [3]: [sum#79, isEmpty#80, sum#81]
Results [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#82, isEmpty#83, sum#84]

(118) Exchange
Input [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#82, isEmpty#83, sum#84]
Arguments: hashpartitioning(channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#85]

(119) HashAggregate [codegen id : 92]
Input [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#82, isEmpty#83, sum#84]
Keys [4]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#43), sum(number_sales#44)]
Aggregate Attributes [2]: [sum(sales#43)#86, sum(number_sales#44)#87]
Results [6]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum(sales#43)#86 AS sum_sales#88, sum(number_sales#44)#87 AS number_sales#89]

(120) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#90, isEmpty#91, count#92]

(121) HashAggregate [codegen id : 122]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#90, isEmpty#91, count#92]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#93, count(1)#94]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#93 AS sales#43, count(1)#94 AS number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#93 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#95]

(122) Filter [codegen id : 122]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#95]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#95) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#95 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(123) Project [codegen id : 122]
Output [6]: [store AS channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#95]

(124) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#96, isEmpty#97, count#98]

(125) HashAggregate [codegen id : 152]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#96, isEmpty#97, count#98]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#99, count(1)#100]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#99 AS sales#60, count(1)#100 AS number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#99 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#101]

(126) Filter [codegen id : 152]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#101]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#101) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#101 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(127) Project [codegen id : 152]
Output [6]: [catalog AS channel#102, i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#101]

(128) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#103, isEmpty#104, count#105]

(129) HashAggregate [codegen id : 182]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#103, isEmpty#104, count#105]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#106, count(1)#107]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#106 AS sales#75, count(1)#107 AS number_sales#76, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#106 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#108]

(130) Filter [codegen id : 182]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#75, number_sales#76, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#108]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#108) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#108 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(131) Project [codegen id : 182]
Output [6]: [web AS channel#109, i_brand_id#7, i_class_id#8, i_category_id#9, sales#75, number_sales#76]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#75, number_sales#76, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#108]

(132) Union

(133) HashAggregate [codegen id : 183]
Input [6]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44]
Keys [4]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(sales#43), partial_sum(number_sales#44)]
Aggregate Attributes [3]: [sum#110, isEmpty#111, sum#112]
Results [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#113, isEmpty#114, sum#115]

(134) Exchange
Input [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#113, isEmpty#114, sum#115]
Arguments: hashpartitioning(channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#116]

(135) HashAggregate [codegen id : 184]
Input [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#113, isEmpty#114, sum#115]
Keys [4]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#43), sum(number_sales#44)]
Aggregate Attributes [2]: [sum(sales#43)#117, sum(number_sales#44)#118]
Results [5]: [channel#48, i_brand_id#7, i_class_id#8, sum(sales#43)#117 AS sum_sales#88, sum(number_sales#44)#118 AS number_sales#89]

(136) HashAggregate [codegen id : 184]
Input [5]: [channel#48, i_brand_id#7, i_class_id#8, sum_sales#88, number_sales#89]
Keys [3]: [channel#48, i_brand_id#7, i_class_id#8]
Functions [2]: [partial_sum(sum_sales#88), partial_sum(number_sales#89)]
Aggregate Attributes [3]: [sum#119, isEmpty#120, sum#121]
Results [6]: [channel#48, i_brand_id#7, i_class_id#8, sum#122, isEmpty#123, sum#124]

(137) Exchange
Input [6]: [channel#48, i_brand_id#7, i_class_id#8, sum#122, isEmpty#123, sum#124]
Arguments: hashpartitioning(channel#48, i_brand_id#7, i_class_id#8, 5), ENSURE_REQUIREMENTS, [id=#125]

(138) HashAggregate [codegen id : 185]
Input [6]: [channel#48, i_brand_id#7, i_class_id#8, sum#122, isEmpty#123, sum#124]
Keys [3]: [channel#48, i_brand_id#7, i_class_id#8]
Functions [2]: [sum(sum_sales#88), sum(number_sales#89)]
Aggregate Attributes [2]: [sum(sum_sales#88)#126, sum(number_sales#89)#127]
Results [6]: [channel#48, i_brand_id#7, i_class_id#8, null AS i_category_id#128, sum(sum_sales#88)#126 AS sum(sum_sales)#129, sum(number_sales#89)#127 AS sum(number_sales)#130]

(139) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#131, isEmpty#132, count#133]

(140) HashAggregate [codegen id : 215]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#131, isEmpty#132, count#133]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#134, count(1)#135]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#134 AS sales#43, count(1)#135 AS number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#134 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#136]

(141) Filter [codegen id : 215]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#136]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#136) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#136 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(142) Project [codegen id : 215]
Output [6]: [store AS channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#136]

(143) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#137, isEmpty#138, count#139]

(144) HashAggregate [codegen id : 245]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#137, isEmpty#138, count#139]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#140, count(1)#141]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#140 AS sales#60, count(1)#141 AS number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#140 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#142]

(145) Filter [codegen id : 245]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#142]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#142) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#142 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(146) Project [codegen id : 245]
Output [6]: [catalog AS channel#143, i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#142]

(147) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#144, isEmpty#145, count#146]

(148) HashAggregate [codegen id : 275]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#144, isEmpty#145, count#146]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#147, count(1)#148]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#147 AS sales#75, count(1)#148 AS number_sales#76, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#147 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#149]

(149) Filter [codegen id : 275]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#75, number_sales#76, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#149]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#149) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#149 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(150) Project [codegen id : 275]
Output [6]: [web AS channel#150, i_brand_id#7, i_class_id#8, i_category_id#9, sales#75, number_sales#76]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#75, number_sales#76, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#149]

(151) Union

(152) HashAggregate [codegen id : 276]
Input [6]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44]
Keys [4]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(sales#43), partial_sum(number_sales#44)]
Aggregate Attributes [3]: [sum#151, isEmpty#152, sum#153]
Results [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#154, isEmpty#155, sum#156]

(153) Exchange
Input [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#154, isEmpty#155, sum#156]
Arguments: hashpartitioning(channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#157]

(154) HashAggregate [codegen id : 277]
Input [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#154, isEmpty#155, sum#156]
Keys [4]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#43), sum(number_sales#44)]
Aggregate Attributes [2]: [sum(sales#43)#158, sum(number_sales#44)#159]
Results [4]: [channel#48, i_brand_id#7, sum(sales#43)#158 AS sum_sales#88, sum(number_sales#44)#159 AS number_sales#89]

(155) HashAggregate [codegen id : 277]
Input [4]: [channel#48, i_brand_id#7, sum_sales#88, number_sales#89]
Keys [2]: [channel#48, i_brand_id#7]
Functions [2]: [partial_sum(sum_sales#88), partial_sum(number_sales#89)]
Aggregate Attributes [3]: [sum#160, isEmpty#161, sum#162]
Results [5]: [channel#48, i_brand_id#7, sum#163, isEmpty#164, sum#165]

(156) Exchange
Input [5]: [channel#48, i_brand_id#7, sum#163, isEmpty#164, sum#165]
Arguments: hashpartitioning(channel#48, i_brand_id#7, 5), ENSURE_REQUIREMENTS, [id=#166]

(157) HashAggregate [codegen id : 278]
Input [5]: [channel#48, i_brand_id#7, sum#163, isEmpty#164, sum#165]
Keys [2]: [channel#48, i_brand_id#7]
Functions [2]: [sum(sum_sales#88), sum(number_sales#89)]
Aggregate Attributes [2]: [sum(sum_sales#88)#167, sum(number_sales#89)#168]
Results [6]: [channel#48, i_brand_id#7, null AS i_class_id#169, null AS i_category_id#170, sum(sum_sales#88)#167 AS sum(sum_sales)#171, sum(number_sales#89)#168 AS sum(number_sales)#172]

(158) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#173, isEmpty#174, count#175]

(159) HashAggregate [codegen id : 308]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#173, isEmpty#174, count#175]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#176, count(1)#177]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#176 AS sales#43, count(1)#177 AS number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#176 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#178]

(160) Filter [codegen id : 308]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#178]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#178) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#178 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(161) Project [codegen id : 308]
Output [6]: [store AS channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#178]

(162) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#179, isEmpty#180, count#181]

(163) HashAggregate [codegen id : 338]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#179, isEmpty#180, count#181]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#182, count(1)#183]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#182 AS sales#60, count(1)#183 AS number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#182 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#184]

(164) Filter [codegen id : 338]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#184]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#184) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#184 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(165) Project [codegen id : 338]
Output [6]: [catalog AS channel#185, i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#184]

(166) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#186, isEmpty#187, count#188]

(167) HashAggregate [codegen id : 368]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#186, isEmpty#187, count#188]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#189, count(1)#190]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#189 AS sales#75, count(1)#190 AS number_sales#76, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#189 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#191]

(168) Filter [codegen id : 368]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#75, number_sales#76, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#191]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#191) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#191 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(169) Project [codegen id : 368]
Output [6]: [web AS channel#192, i_brand_id#7, i_class_id#8, i_category_id#9, sales#75, number_sales#76]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#75, number_sales#76, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#191]

(170) Union

(171) HashAggregate [codegen id : 369]
Input [6]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44]
Keys [4]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(sales#43), partial_sum(number_sales#44)]
Aggregate Attributes [3]: [sum#193, isEmpty#194, sum#195]
Results [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#196, isEmpty#197, sum#198]

(172) Exchange
Input [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#196, isEmpty#197, sum#198]
Arguments: hashpartitioning(channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#199]

(173) HashAggregate [codegen id : 370]
Input [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#196, isEmpty#197, sum#198]
Keys [4]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#43), sum(number_sales#44)]
Aggregate Attributes [2]: [sum(sales#43)#200, sum(number_sales#44)#201]
Results [3]: [channel#48, sum(sales#43)#200 AS sum_sales#88, sum(number_sales#44)#201 AS number_sales#89]

(174) HashAggregate [codegen id : 370]
Input [3]: [channel#48, sum_sales#88, number_sales#89]
Keys [1]: [channel#48]
Functions [2]: [partial_sum(sum_sales#88), partial_sum(number_sales#89)]
Aggregate Attributes [3]: [sum#202, isEmpty#203, sum#204]
Results [4]: [channel#48, sum#205, isEmpty#206, sum#207]

(175) Exchange
Input [4]: [channel#48, sum#205, isEmpty#206, sum#207]
Arguments: hashpartitioning(channel#48, 5), ENSURE_REQUIREMENTS, [id=#208]

(176) HashAggregate [codegen id : 371]
Input [4]: [channel#48, sum#205, isEmpty#206, sum#207]
Keys [1]: [channel#48]
Functions [2]: [sum(sum_sales#88), sum(number_sales#89)]
Aggregate Attributes [2]: [sum(sum_sales#88)#209, sum(number_sales#89)#210]
Results [6]: [channel#48, null AS i_brand_id#211, null AS i_class_id#212, null AS i_category_id#213, sum(sum_sales#88)#209 AS sum(sum_sales)#214, sum(number_sales#89)#210 AS sum(number_sales)#215]

(177) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#216, isEmpty#217, count#218]

(178) HashAggregate [codegen id : 401]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#216, isEmpty#217, count#218]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#219, count(1)#220]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#219 AS sales#43, count(1)#220 AS number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#219 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#221]

(179) Filter [codegen id : 401]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#221]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#221) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#221 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(180) Project [codegen id : 401]
Output [6]: [store AS channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#221]

(181) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#222, isEmpty#223, count#224]

(182) HashAggregate [codegen id : 431]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#222, isEmpty#223, count#224]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#225, count(1)#226]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#225 AS sales#60, count(1)#226 AS number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#225 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#227]

(183) Filter [codegen id : 431]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#227]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#227) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#227 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(184) Project [codegen id : 431]
Output [6]: [catalog AS channel#228, i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#60, number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#227]

(185) ReusedExchange [Reuses operator id: unknown]
Output [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#229, isEmpty#230, count#231]

(186) HashAggregate [codegen id : 461]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#229, isEmpty#230, count#231]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#232, count(1)#233]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#232 AS sales#75, count(1)#233 AS number_sales#76, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#232 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#234]

(187) Filter [codegen id : 461]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#75, number_sales#76, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#234]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#234) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#234 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(188) Project [codegen id : 461]
Output [6]: [web AS channel#235, i_brand_id#7, i_class_id#8, i_category_id#9, sales#75, number_sales#76]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#75, number_sales#76, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#234]

(189) Union

(190) HashAggregate [codegen id : 462]
Input [6]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44]
Keys [4]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(sales#43), partial_sum(number_sales#44)]
Aggregate Attributes [3]: [sum#236, isEmpty#237, sum#238]
Results [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#239, isEmpty#240, sum#241]

(191) Exchange
Input [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#239, isEmpty#240, sum#241]
Arguments: hashpartitioning(channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#242]

(192) HashAggregate [codegen id : 463]
Input [7]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum#239, isEmpty#240, sum#241]
Keys [4]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(sales#43), sum(number_sales#44)]
Aggregate Attributes [2]: [sum(sales#43)#243, sum(number_sales#44)#244]
Results [2]: [sum(sales#43)#243 AS sum_sales#88, sum(number_sales#44)#244 AS number_sales#89]

(193) HashAggregate [codegen id : 463]
Input [2]: [sum_sales#88, number_sales#89]
Keys: []
Functions [2]: [partial_sum(sum_sales#88), partial_sum(number_sales#89)]
Aggregate Attributes [3]: [sum#245, isEmpty#246, sum#247]
Results [3]: [sum#248, isEmpty#249, sum#250]

(194) Exchange
Input [3]: [sum#248, isEmpty#249, sum#250]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#251]

(195) HashAggregate [codegen id : 464]
Input [3]: [sum#248, isEmpty#249, sum#250]
Keys: []
Functions [2]: [sum(sum_sales#88), sum(number_sales#89)]
Aggregate Attributes [2]: [sum(sum_sales#88)#252, sum(number_sales#89)#253]
Results [6]: [null AS channel#254, null AS i_brand_id#255, null AS i_class_id#256, null AS i_category_id#257, sum(sum_sales#88)#252 AS sum(sum_sales)#258, sum(number_sales#89)#253 AS sum(number_sales)#259]

(196) Union

(197) HashAggregate [codegen id : 465]
Input [6]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#88, number_sales#89]
Keys [6]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#88, number_sales#89]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#88, number_sales#89]

(198) Exchange
Input [6]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#88, number_sales#89]
Arguments: hashpartitioning(channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#88, number_sales#89, 5), ENSURE_REQUIREMENTS, [id=#260]

(199) HashAggregate [codegen id : 466]
Input [6]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#88, number_sales#89]
Keys [6]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#88, number_sales#89]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#88, number_sales#89]

(200) TakeOrderedAndProject
Input [6]: [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#88, number_sales#89]
Arguments: 100, [channel#48 ASC NULLS FIRST, i_brand_id#7 ASC NULLS FIRST, i_class_id#8 ASC NULLS FIRST, i_category_id#9 ASC NULLS FIRST], [channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, sum_sales#88, number_sales#89]

===== Subqueries =====

Subquery:1 Hosting operator id = 82 Hosting Expression = Subquery scalar-subquery#46, [id=#47]
* HashAggregate (227)
+- Exchange (226)
   +- * HashAggregate (225)
      +- Union (224)
         :- * Project (209)
         :  +- * BroadcastHashJoin Inner BuildRight (208)
         :     :- * ColumnarToRow (202)
         :     :  +- Scan parquet default.store_sales (201)
         :     +- BroadcastExchange (207)
         :        +- * Project (206)
         :           +- * Filter (205)
         :              +- * ColumnarToRow (204)
         :                 +- Scan parquet default.date_dim (203)
         :- * Project (218)
         :  +- * BroadcastHashJoin Inner BuildRight (217)
         :     :- * ColumnarToRow (211)
         :     :  +- Scan parquet default.catalog_sales (210)
         :     +- BroadcastExchange (216)
         :        +- * Project (215)
         :           +- * Filter (214)
         :              +- * ColumnarToRow (213)
         :                 +- Scan parquet default.date_dim (212)
         +- * Project (223)
            +- * BroadcastHashJoin Inner BuildRight (222)
               :- * ColumnarToRow (220)
               :  +- Scan parquet default.web_sales (219)
               +- ReusedExchange (221)


(201) Scan parquet default.store_sales
Output [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#261)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(202) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(203) Scan parquet default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(204) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#12, d_year#13]

(205) Filter [codegen id : 1]
Input [2]: [d_date_sk#12, d_year#13]
Condition : (((isnotnull(d_year#13) AND (d_year#13 >= 1999)) AND (d_year#13 <= 2001)) AND isnotnull(d_date_sk#12))

(206) Project [codegen id : 1]
Output [1]: [d_date_sk#12]
Input [2]: [d_date_sk#12, d_year#13]

(207) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#262]

(208) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#12]
Join condition: None

(209) Project [codegen id : 2]
Output [2]: [ss_quantity#2 AS quantity#263, ss_list_price#3 AS list_price#264]
Input [4]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#12]

(210) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#49, cs_list_price#50, cs_sold_date_sk#20]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#20), dynamicpruningexpression(cs_sold_date_sk#20 IN dynamicpruning#265)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(211) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#49, cs_list_price#50, cs_sold_date_sk#20]

(212) Scan parquet default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(213) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#12, d_year#13]

(214) Filter [codegen id : 3]
Input [2]: [d_date_sk#12, d_year#13]
Condition : (((isnotnull(d_year#13) AND (d_year#13 >= 1998)) AND (d_year#13 <= 2000)) AND isnotnull(d_date_sk#12))

(215) Project [codegen id : 3]
Output [1]: [d_date_sk#12]
Input [2]: [d_date_sk#12, d_year#13]

(216) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#266]

(217) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#20]
Right keys [1]: [d_date_sk#12]
Join condition: None

(218) Project [codegen id : 4]
Output [2]: [cs_quantity#49 AS quantity#267, cs_list_price#50 AS list_price#268]
Input [4]: [cs_quantity#49, cs_list_price#50, cs_sold_date_sk#20, d_date_sk#12]

(219) Scan parquet default.web_sales
Output [3]: [ws_quantity#64, ws_list_price#65, ws_sold_date_sk#25]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#25), dynamicpruningexpression(ws_sold_date_sk#25 IN dynamicpruning#265)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(220) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#64, ws_list_price#65, ws_sold_date_sk#25]

(221) ReusedExchange [Reuses operator id: 216]
Output [1]: [d_date_sk#12]

(222) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#25]
Right keys [1]: [d_date_sk#12]
Join condition: None

(223) Project [codegen id : 6]
Output [2]: [ws_quantity#64 AS quantity#269, ws_list_price#65 AS list_price#270]
Input [4]: [ws_quantity#64, ws_list_price#65, ws_sold_date_sk#25, d_date_sk#12]

(224) Union

(225) HashAggregate [codegen id : 7]
Input [2]: [quantity#263, list_price#264]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#263 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#264 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#271, count#272]
Results [2]: [sum#273, count#274]

(226) Exchange
Input [2]: [sum#273, count#274]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#275]

(227) HashAggregate [codegen id : 8]
Input [2]: [sum#273, count#274]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#263 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#264 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#263 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#264 as decimal(12,2)))), DecimalType(18,2), true))#276]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#263 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#264 as decimal(12,2)))), DecimalType(18,2), true))#276 AS average_sales#277]

Subquery:2 Hosting operator id = 201 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#261
ReusedExchange (228)


(228) ReusedExchange [Reuses operator id: 207]
Output [1]: [d_date_sk#12]

Subquery:3 Hosting operator id = 210 Hosting Expression = cs_sold_date_sk#20 IN dynamicpruning#265
ReusedExchange (229)


(229) ReusedExchange [Reuses operator id: 216]
Output [1]: [d_date_sk#12]

Subquery:4 Hosting operator id = 219 Hosting Expression = ws_sold_date_sk#25 IN dynamicpruning#265

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (230)


(230) ReusedExchange [Reuses operator id: 76]
Output [1]: [d_date_sk#12]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#10
ReusedExchange (231)


(231) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#12]

Subquery:7 Hosting operator id = 26 Hosting Expression = cs_sold_date_sk#20 IN dynamicpruning#10

Subquery:8 Hosting operator id = 45 Hosting Expression = ws_sold_date_sk#25 IN dynamicpruning#10

Subquery:9 Hosting operator id = 98 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:10 Hosting operator id = 84 Hosting Expression = cs_sold_date_sk#20 IN dynamicpruning#5

Subquery:11 Hosting operator id = 114 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:12 Hosting operator id = 100 Hosting Expression = ws_sold_date_sk#25 IN dynamicpruning#5

Subquery:13 Hosting operator id = 122 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:14 Hosting operator id = 126 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:15 Hosting operator id = 130 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:16 Hosting operator id = 141 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:17 Hosting operator id = 145 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:18 Hosting operator id = 149 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:19 Hosting operator id = 160 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:20 Hosting operator id = 164 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:21 Hosting operator id = 168 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:22 Hosting operator id = 179 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:23 Hosting operator id = 183 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:24 Hosting operator id = 187 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]


