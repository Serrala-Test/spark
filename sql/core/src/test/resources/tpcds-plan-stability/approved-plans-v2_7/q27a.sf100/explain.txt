== Physical Plan ==
TakeOrderedAndProject (71)
+- Union (70)
   :- * HashAggregate (27)
   :  +- Exchange (26)
   :     +- * HashAggregate (25)
   :        +- * Project (24)
   :           +- * BroadcastHashJoin Inner BuildRight (23)
   :              :- * Project (19)
   :              :  +- * BroadcastHashJoin Inner BuildRight (18)
   :              :     :- * Project (13)
   :              :     :  +- * BroadcastHashJoin Inner BuildRight (12)
   :              :     :     :- * Project (10)
   :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (9)
   :              :     :     :     :- * Filter (3)
   :              :     :     :     :  +- * ColumnarToRow (2)
   :              :     :     :     :     +- Scan parquet default.store_sales (1)
   :              :     :     :     +- BroadcastExchange (8)
   :              :     :     :        +- * Project (7)
   :              :     :     :           +- * Filter (6)
   :              :     :     :              +- * ColumnarToRow (5)
   :              :     :     :                 +- Scan parquet default.customer_demographics (4)
   :              :     :     +- ReusedExchange (11)
   :              :     +- BroadcastExchange (17)
   :              :        +- * Filter (16)
   :              :           +- * ColumnarToRow (15)
   :              :              +- Scan parquet default.store (14)
   :              +- BroadcastExchange (22)
   :                 +- * ColumnarToRow (21)
   :                    +- Scan parquet default.item (20)
   :- * HashAggregate (49)
   :  +- Exchange (48)
   :     +- * HashAggregate (47)
   :        +- * Project (46)
   :           +- * BroadcastHashJoin Inner BuildRight (45)
   :              :- * Project (43)
   :              :  +- * BroadcastHashJoin Inner BuildRight (42)
   :              :     :- * Project (40)
   :              :     :  +- * BroadcastHashJoin Inner BuildRight (39)
   :              :     :     :- * Project (33)
   :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (32)
   :              :     :     :     :- * Filter (30)
   :              :     :     :     :  +- * ColumnarToRow (29)
   :              :     :     :     :     +- Scan parquet default.store_sales (28)
   :              :     :     :     +- ReusedExchange (31)
   :              :     :     +- BroadcastExchange (38)
   :              :     :        +- * Project (37)
   :              :     :           +- * Filter (36)
   :              :     :              +- * ColumnarToRow (35)
   :              :     :                 +- Scan parquet default.store (34)
   :              :     +- ReusedExchange (41)
   :              +- ReusedExchange (44)
   +- * HashAggregate (69)
      +- Exchange (68)
         +- * HashAggregate (67)
            +- * Project (66)
               +- * BroadcastHashJoin Inner BuildRight (65)
                  :- * Project (61)
                  :  +- * BroadcastHashJoin Inner BuildRight (60)
                  :     :- * Project (58)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (57)
                  :     :     :- * Project (55)
                  :     :     :  +- * BroadcastHashJoin Inner BuildRight (54)
                  :     :     :     :- * Filter (52)
                  :     :     :     :  +- * ColumnarToRow (51)
                  :     :     :     :     +- Scan parquet default.store_sales (50)
                  :     :     :     +- ReusedExchange (53)
                  :     :     +- ReusedExchange (56)
                  :     +- ReusedExchange (59)
                  +- BroadcastExchange (64)
                     +- * ColumnarToRow (63)
                        +- Scan parquet default.item (62)


(1) Scan parquet default.store_sales
Output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 5]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]

(3) Filter [codegen id : 5]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Condition : (isnotnull(ss_cdemo_sk#2) AND isnotnull(ss_store_sk#3))

(4) Scan parquet default.customer_demographics
Output [4]: [cd_demo_sk#10, cd_gender#11, cd_marital_status#12, cd_education_status#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [EqualTo(cd_gender,F), EqualTo(cd_marital_status,W), EqualTo(cd_education_status,Primary             )]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>

(5) ColumnarToRow [codegen id : 1]
Input [4]: [cd_demo_sk#10, cd_gender#11, cd_marital_status#12, cd_education_status#13]

(6) Filter [codegen id : 1]
Input [4]: [cd_demo_sk#10, cd_gender#11, cd_marital_status#12, cd_education_status#13]
Condition : (((cd_gender#11 = F) AND (cd_marital_status#12 = W)) AND (cd_education_status#13 = Primary             ))

(7) Project [codegen id : 1]
Output [1]: [cd_demo_sk#10]
Input [4]: [cd_demo_sk#10, cd_gender#11, cd_marital_status#12, cd_education_status#13]

(8) BroadcastExchange
Input [1]: [cd_demo_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14]

(9) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#10]
Join condition: None

(10) Project [codegen id : 5]
Output [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Input [9]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, cd_demo_sk#10]

(11) ReusedExchange [Reuses operator id: 76]
Output [1]: [d_date_sk#15]

(12) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#15]
Join condition: None

(13) Project [codegen id : 5]
Output [6]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, d_date_sk#15]

(14) Scan parquet default.store
Output [2]: [s_store_sk#16, s_state#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(15) ColumnarToRow [codegen id : 3]
Input [2]: [s_store_sk#16, s_state#17]

(16) Filter [codegen id : 3]
Input [2]: [s_store_sk#16, s_state#17]
Condition : (isnotnull(s_state#17) AND (s_state#17 = TN))

(17) BroadcastExchange
Input [2]: [s_store_sk#16, s_state#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#18]

(18) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#16]
Join condition: None

(19) Project [codegen id : 5]
Output [6]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#17]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_store_sk#16, s_state#17]

(20) Scan parquet default.item
Output [2]: [i_item_sk#19, i_item_id#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(21) ColumnarToRow [codegen id : 4]
Input [2]: [i_item_sk#19, i_item_id#20]

(22) BroadcastExchange
Input [2]: [i_item_sk#19, i_item_id#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#21]

(23) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#19]
Join condition: None

(24) Project [codegen id : 5]
Output [6]: [i_item_id#20, s_state#17, ss_quantity#4 AS agg1#22, ss_list_price#5 AS agg2#23, ss_coupon_amt#7 AS agg3#24, ss_sales_price#6 AS agg4#25]
Input [8]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#17, i_item_sk#19, i_item_id#20]

(25) HashAggregate [codegen id : 5]
Input [6]: [i_item_id#20, s_state#17, agg1#22, agg2#23, agg3#24, agg4#25]
Keys [2]: [i_item_id#20, s_state#17]
Functions [4]: [partial_avg(agg1#22), partial_avg(UnscaledValue(agg2#23)), partial_avg(UnscaledValue(agg3#24)), partial_avg(UnscaledValue(agg4#25))]
Aggregate Attributes [8]: [sum#26, count#27, sum#28, count#29, sum#30, count#31, sum#32, count#33]
Results [10]: [i_item_id#20, s_state#17, sum#34, count#35, sum#36, count#37, sum#38, count#39, sum#40, count#41]

(26) Exchange
Input [10]: [i_item_id#20, s_state#17, sum#34, count#35, sum#36, count#37, sum#38, count#39, sum#40, count#41]
Arguments: hashpartitioning(i_item_id#20, s_state#17, 5), ENSURE_REQUIREMENTS, [id=#42]

(27) HashAggregate [codegen id : 6]
Input [10]: [i_item_id#20, s_state#17, sum#34, count#35, sum#36, count#37, sum#38, count#39, sum#40, count#41]
Keys [2]: [i_item_id#20, s_state#17]
Functions [4]: [avg(agg1#22), avg(UnscaledValue(agg2#23)), avg(UnscaledValue(agg3#24)), avg(UnscaledValue(agg4#25))]
Aggregate Attributes [4]: [avg(agg1#22)#43, avg(UnscaledValue(agg2#23))#44, avg(UnscaledValue(agg3#24))#45, avg(UnscaledValue(agg4#25))#46]
Results [7]: [i_item_id#20, s_state#17, 0 AS g_state#47, avg(agg1#22)#43 AS agg1#48, cast((avg(UnscaledValue(agg2#23))#44 / 100.0) as decimal(11,6)) AS agg2#49, cast((avg(UnscaledValue(agg3#24))#45 / 100.0) as decimal(11,6)) AS agg3#50, cast((avg(UnscaledValue(agg4#25))#46 / 100.0) as decimal(11,6)) AS agg4#51]

(28) Scan parquet default.store_sales
Output [8]: [ss_item_sk#52, ss_cdemo_sk#53, ss_store_sk#54, ss_quantity#55, ss_list_price#56, ss_sales_price#57, ss_coupon_amt#58, ss_sold_date_sk#59]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#59), dynamicpruningexpression(ss_sold_date_sk#59 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(29) ColumnarToRow [codegen id : 11]
Input [8]: [ss_item_sk#52, ss_cdemo_sk#53, ss_store_sk#54, ss_quantity#55, ss_list_price#56, ss_sales_price#57, ss_coupon_amt#58, ss_sold_date_sk#59]

(30) Filter [codegen id : 11]
Input [8]: [ss_item_sk#52, ss_cdemo_sk#53, ss_store_sk#54, ss_quantity#55, ss_list_price#56, ss_sales_price#57, ss_coupon_amt#58, ss_sold_date_sk#59]
Condition : (isnotnull(ss_cdemo_sk#53) AND isnotnull(ss_store_sk#54))

(31) ReusedExchange [Reuses operator id: 8]
Output [1]: [cd_demo_sk#60]

(32) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_cdemo_sk#53]
Right keys [1]: [cd_demo_sk#60]
Join condition: None

(33) Project [codegen id : 11]
Output [7]: [ss_item_sk#52, ss_store_sk#54, ss_quantity#55, ss_list_price#56, ss_sales_price#57, ss_coupon_amt#58, ss_sold_date_sk#59]
Input [9]: [ss_item_sk#52, ss_cdemo_sk#53, ss_store_sk#54, ss_quantity#55, ss_list_price#56, ss_sales_price#57, ss_coupon_amt#58, ss_sold_date_sk#59, cd_demo_sk#60]

(34) Scan parquet default.store
Output [2]: [s_store_sk#61, s_state#62]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(35) ColumnarToRow [codegen id : 8]
Input [2]: [s_store_sk#61, s_state#62]

(36) Filter [codegen id : 8]
Input [2]: [s_store_sk#61, s_state#62]
Condition : (isnotnull(s_state#62) AND (s_state#62 = TN))

(37) Project [codegen id : 8]
Output [1]: [s_store_sk#61]
Input [2]: [s_store_sk#61, s_state#62]

(38) BroadcastExchange
Input [1]: [s_store_sk#61]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#63]

(39) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_store_sk#54]
Right keys [1]: [s_store_sk#61]
Join condition: None

(40) Project [codegen id : 11]
Output [6]: [ss_item_sk#52, ss_quantity#55, ss_list_price#56, ss_sales_price#57, ss_coupon_amt#58, ss_sold_date_sk#59]
Input [8]: [ss_item_sk#52, ss_store_sk#54, ss_quantity#55, ss_list_price#56, ss_sales_price#57, ss_coupon_amt#58, ss_sold_date_sk#59, s_store_sk#61]

(41) ReusedExchange [Reuses operator id: 76]
Output [1]: [d_date_sk#64]

(42) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_sold_date_sk#59]
Right keys [1]: [d_date_sk#64]
Join condition: None

(43) Project [codegen id : 11]
Output [5]: [ss_item_sk#52, ss_quantity#55, ss_list_price#56, ss_sales_price#57, ss_coupon_amt#58]
Input [7]: [ss_item_sk#52, ss_quantity#55, ss_list_price#56, ss_sales_price#57, ss_coupon_amt#58, ss_sold_date_sk#59, d_date_sk#64]

(44) ReusedExchange [Reuses operator id: 22]
Output [2]: [i_item_sk#65, i_item_id#66]

(45) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#52]
Right keys [1]: [i_item_sk#65]
Join condition: None

(46) Project [codegen id : 11]
Output [5]: [i_item_id#66, ss_quantity#55 AS agg1#22, ss_list_price#56 AS agg2#23, ss_coupon_amt#58 AS agg3#24, ss_sales_price#57 AS agg4#25]
Input [7]: [ss_item_sk#52, ss_quantity#55, ss_list_price#56, ss_sales_price#57, ss_coupon_amt#58, i_item_sk#65, i_item_id#66]

(47) HashAggregate [codegen id : 11]
Input [5]: [i_item_id#66, agg1#22, agg2#23, agg3#24, agg4#25]
Keys [1]: [i_item_id#66]
Functions [4]: [partial_avg(agg1#22), partial_avg(UnscaledValue(agg2#23)), partial_avg(UnscaledValue(agg3#24)), partial_avg(UnscaledValue(agg4#25))]
Aggregate Attributes [8]: [sum#67, count#68, sum#69, count#70, sum#71, count#72, sum#73, count#74]
Results [9]: [i_item_id#66, sum#75, count#76, sum#77, count#78, sum#79, count#80, sum#81, count#82]

(48) Exchange
Input [9]: [i_item_id#66, sum#75, count#76, sum#77, count#78, sum#79, count#80, sum#81, count#82]
Arguments: hashpartitioning(i_item_id#66, 5), ENSURE_REQUIREMENTS, [id=#83]

(49) HashAggregate [codegen id : 12]
Input [9]: [i_item_id#66, sum#75, count#76, sum#77, count#78, sum#79, count#80, sum#81, count#82]
Keys [1]: [i_item_id#66]
Functions [4]: [avg(agg1#22), avg(UnscaledValue(agg2#23)), avg(UnscaledValue(agg3#24)), avg(UnscaledValue(agg4#25))]
Aggregate Attributes [4]: [avg(agg1#22)#84, avg(UnscaledValue(agg2#23))#85, avg(UnscaledValue(agg3#24))#86, avg(UnscaledValue(agg4#25))#87]
Results [7]: [i_item_id#66, null AS s_state#88, 1 AS g_state#89, avg(agg1#22)#84 AS agg1#90, cast((avg(UnscaledValue(agg2#23))#85 / 100.0) as decimal(11,6)) AS agg2#91, cast((avg(UnscaledValue(agg3#24))#86 / 100.0) as decimal(11,6)) AS agg3#92, cast((avg(UnscaledValue(agg4#25))#87 / 100.0) as decimal(11,6)) AS agg4#93]

(50) Scan parquet default.store_sales
Output [8]: [ss_item_sk#94, ss_cdemo_sk#95, ss_store_sk#96, ss_quantity#97, ss_list_price#98, ss_sales_price#99, ss_coupon_amt#100, ss_sold_date_sk#101]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#101), dynamicpruningexpression(ss_sold_date_sk#101 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(51) ColumnarToRow [codegen id : 17]
Input [8]: [ss_item_sk#94, ss_cdemo_sk#95, ss_store_sk#96, ss_quantity#97, ss_list_price#98, ss_sales_price#99, ss_coupon_amt#100, ss_sold_date_sk#101]

(52) Filter [codegen id : 17]
Input [8]: [ss_item_sk#94, ss_cdemo_sk#95, ss_store_sk#96, ss_quantity#97, ss_list_price#98, ss_sales_price#99, ss_coupon_amt#100, ss_sold_date_sk#101]
Condition : (isnotnull(ss_cdemo_sk#95) AND isnotnull(ss_store_sk#96))

(53) ReusedExchange [Reuses operator id: 8]
Output [1]: [cd_demo_sk#102]

(54) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_cdemo_sk#95]
Right keys [1]: [cd_demo_sk#102]
Join condition: None

(55) Project [codegen id : 17]
Output [7]: [ss_item_sk#94, ss_store_sk#96, ss_quantity#97, ss_list_price#98, ss_sales_price#99, ss_coupon_amt#100, ss_sold_date_sk#101]
Input [9]: [ss_item_sk#94, ss_cdemo_sk#95, ss_store_sk#96, ss_quantity#97, ss_list_price#98, ss_sales_price#99, ss_coupon_amt#100, ss_sold_date_sk#101, cd_demo_sk#102]

(56) ReusedExchange [Reuses operator id: 38]
Output [1]: [s_store_sk#103]

(57) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_store_sk#96]
Right keys [1]: [s_store_sk#103]
Join condition: None

(58) Project [codegen id : 17]
Output [6]: [ss_item_sk#94, ss_quantity#97, ss_list_price#98, ss_sales_price#99, ss_coupon_amt#100, ss_sold_date_sk#101]
Input [8]: [ss_item_sk#94, ss_store_sk#96, ss_quantity#97, ss_list_price#98, ss_sales_price#99, ss_coupon_amt#100, ss_sold_date_sk#101, s_store_sk#103]

(59) ReusedExchange [Reuses operator id: 76]
Output [1]: [d_date_sk#104]

(60) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_sold_date_sk#101]
Right keys [1]: [d_date_sk#104]
Join condition: None

(61) Project [codegen id : 17]
Output [5]: [ss_item_sk#94, ss_quantity#97, ss_list_price#98, ss_sales_price#99, ss_coupon_amt#100]
Input [7]: [ss_item_sk#94, ss_quantity#97, ss_list_price#98, ss_sales_price#99, ss_coupon_amt#100, ss_sold_date_sk#101, d_date_sk#104]

(62) Scan parquet default.item
Output [1]: [i_item_sk#105]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
ReadSchema: struct<i_item_sk:int>

(63) ColumnarToRow [codegen id : 16]
Input [1]: [i_item_sk#105]

(64) BroadcastExchange
Input [1]: [i_item_sk#105]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#106]

(65) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_item_sk#94]
Right keys [1]: [i_item_sk#105]
Join condition: None

(66) Project [codegen id : 17]
Output [4]: [ss_quantity#97 AS agg1#22, ss_list_price#98 AS agg2#23, ss_coupon_amt#100 AS agg3#24, ss_sales_price#99 AS agg4#25]
Input [6]: [ss_item_sk#94, ss_quantity#97, ss_list_price#98, ss_sales_price#99, ss_coupon_amt#100, i_item_sk#105]

(67) HashAggregate [codegen id : 17]
Input [4]: [agg1#22, agg2#23, agg3#24, agg4#25]
Keys: []
Functions [4]: [partial_avg(agg1#22), partial_avg(UnscaledValue(agg2#23)), partial_avg(UnscaledValue(agg3#24)), partial_avg(UnscaledValue(agg4#25))]
Aggregate Attributes [8]: [sum#107, count#108, sum#109, count#110, sum#111, count#112, sum#113, count#114]
Results [8]: [sum#115, count#116, sum#117, count#118, sum#119, count#120, sum#121, count#122]

(68) Exchange
Input [8]: [sum#115, count#116, sum#117, count#118, sum#119, count#120, sum#121, count#122]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#123]

(69) HashAggregate [codegen id : 18]
Input [8]: [sum#115, count#116, sum#117, count#118, sum#119, count#120, sum#121, count#122]
Keys: []
Functions [4]: [avg(agg1#22), avg(UnscaledValue(agg2#23)), avg(UnscaledValue(agg3#24)), avg(UnscaledValue(agg4#25))]
Aggregate Attributes [4]: [avg(agg1#22)#124, avg(UnscaledValue(agg2#23))#125, avg(UnscaledValue(agg3#24))#126, avg(UnscaledValue(agg4#25))#127]
Results [7]: [null AS i_item_id#128, null AS s_state#129, 1 AS g_state#130, avg(agg1#22)#124 AS agg1#131, cast((avg(UnscaledValue(agg2#23))#125 / 100.0) as decimal(11,6)) AS agg2#132, cast((avg(UnscaledValue(agg3#24))#126 / 100.0) as decimal(11,6)) AS agg3#133, cast((avg(UnscaledValue(agg4#25))#127 / 100.0) as decimal(11,6)) AS agg4#134]

(70) Union

(71) TakeOrderedAndProject
Input [7]: [i_item_id#20, s_state#17, g_state#47, agg1#48, agg2#49, agg3#50, agg4#51]
Arguments: 100, [i_item_id#20 ASC NULLS FIRST, s_state#17 ASC NULLS FIRST], [i_item_id#20, s_state#17, g_state#47, agg1#48, agg2#49, agg3#50, agg4#51]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (76)
+- * Project (75)
   +- * Filter (74)
      +- * ColumnarToRow (73)
         +- Scan parquet default.date_dim (72)


(72) Scan parquet default.date_dim
Output [2]: [d_date_sk#15, d_year#135]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [EqualTo(d_year,1998)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(73) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#15, d_year#135]

(74) Filter [codegen id : 1]
Input [2]: [d_date_sk#15, d_year#135]
Condition : (d_year#135 = 1998)

(75) Project [codegen id : 1]
Output [1]: [d_date_sk#15]
Input [2]: [d_date_sk#15, d_year#135]

(76) BroadcastExchange
Input [1]: [d_date_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#136]

Subquery:2 Hosting operator id = 28 Hosting Expression = ss_sold_date_sk#59 IN dynamicpruning#9

Subquery:3 Hosting operator id = 50 Hosting Expression = ss_sold_date_sk#101 IN dynamicpruning#9


