== Physical Plan ==
TakeOrderedAndProject (79)
+- Union (78)
   :- * HashAggregate (37)
   :  +- Exchange (36)
   :     +- * HashAggregate (35)
   :        +- * Project (34)
   :           +- * BroadcastHashJoin Inner BuildRight (33)
   :              :- * Project (27)
   :              :  +- * BroadcastHashJoin Inner BuildRight (26)
   :              :     :- * Project (20)
   :              :     :  +- * SortMergeJoin Inner (19)
   :              :     :     :- * Sort (12)
   :              :     :     :  +- Exchange (11)
   :              :     :     :     +- * Project (10)
   :              :     :     :        +- * BroadcastHashJoin Inner BuildRight (9)
   :              :     :     :           :- * Filter (3)
   :              :     :     :           :  +- * ColumnarToRow (2)
   :              :     :     :           :     +- Scan parquet default.store_sales (1)
   :              :     :     :           +- BroadcastExchange (8)
   :              :     :     :              +- * Project (7)
   :              :     :     :                 +- * Filter (6)
   :              :     :     :                    +- * ColumnarToRow (5)
   :              :     :     :                       +- Scan parquet default.date_dim (4)
   :              :     :     +- * Sort (18)
   :              :     :        +- Exchange (17)
   :              :     :           +- * Project (16)
   :              :     :              +- * Filter (15)
   :              :     :                 +- * ColumnarToRow (14)
   :              :     :                    +- Scan parquet default.customer_demographics (13)
   :              :     +- BroadcastExchange (25)
   :              :        +- * Project (24)
   :              :           +- * Filter (23)
   :              :              +- * ColumnarToRow (22)
   :              :                 +- Scan parquet default.store (21)
   :              +- BroadcastExchange (32)
   :                 +- * Project (31)
   :                    +- * Filter (30)
   :                       +- * ColumnarToRow (29)
   :                          +- Scan parquet default.item (28)
   :- * HashAggregate (62)
   :  +- Exchange (61)
   :     +- * HashAggregate (60)
   :        +- * Project (59)
   :           +- * BroadcastHashJoin Inner BuildRight (58)
   :              :- * Project (56)
   :              :  +- * SortMergeJoin Inner (55)
   :              :     :- * Sort (52)
   :              :     :  +- Exchange (51)
   :              :     :     +- * Project (50)
   :              :     :        +- * BroadcastHashJoin Inner BuildRight (49)
   :              :     :           :- * Project (43)
   :              :     :           :  +- * BroadcastHashJoin Inner BuildRight (42)
   :              :     :           :     :- * Filter (40)
   :              :     :           :     :  +- * ColumnarToRow (39)
   :              :     :           :     :     +- Scan parquet default.store_sales (38)
   :              :     :           :     +- ReusedExchange (41)
   :              :     :           +- BroadcastExchange (48)
   :              :     :              +- * Project (47)
   :              :     :                 +- * Filter (46)
   :              :     :                    +- * ColumnarToRow (45)
   :              :     :                       +- Scan parquet default.store (44)
   :              :     +- * Sort (54)
   :              :        +- ReusedExchange (53)
   :              +- ReusedExchange (57)
   +- * HashAggregate (77)
      +- Exchange (76)
         +- * HashAggregate (75)
            +- * Project (74)
               +- * BroadcastHashJoin Inner BuildRight (73)
                  :- * Project (68)
                  :  +- * SortMergeJoin Inner (67)
                  :     :- * Sort (64)
                  :     :  +- ReusedExchange (63)
                  :     +- * Sort (66)
                  :        +- ReusedExchange (65)
                  +- BroadcastExchange (72)
                     +- * Filter (71)
                        +- * ColumnarToRow (70)
                           +- Scan parquet default.item (69)


(1) Scan parquet default.store_sales
Output [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]

(3) Filter [codegen id : 2]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Condition : (((isnotnull(ss_cdemo_sk#3) AND isnotnull(ss_sold_date_sk#1)) AND isnotnull(ss_store_sk#4)) AND isnotnull(ss_item_sk#2))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#9, d_year#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#10]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#10]
Condition : ((isnotnull(d_year#10) AND (d_year#10 = 1998)) AND isnotnull(d_date_sk#9))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#9]
Input [2]: [d_date_sk#9, d_year#10]

(8) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#11]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#9]
Join condition: None

(10) Project [codegen id : 2]
Output [7]: [ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Input [9]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, d_date_sk#9]

(11) Exchange
Input [7]: [ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Arguments: hashpartitioning(ss_cdemo_sk#3, 5), ENSURE_REQUIREMENTS, [id=#12]

(12) Sort [codegen id : 3]
Input [7]: [ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Arguments: [ss_cdemo_sk#3 ASC NULLS FIRST], false, 0

(13) Scan parquet default.customer_demographics
Output [4]: [cd_demo_sk#13, cd_gender#14, cd_marital_status#15, cd_education_status#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>

(14) ColumnarToRow [codegen id : 4]
Input [4]: [cd_demo_sk#13, cd_gender#14, cd_marital_status#15, cd_education_status#16]

(15) Filter [codegen id : 4]
Input [4]: [cd_demo_sk#13, cd_gender#14, cd_marital_status#15, cd_education_status#16]
Condition : ((((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_gender#14, 1, false, true) = F) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_marital_status#15, 1, false, true) = W)) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_education_status#16, 20, false, true) = Primary             )) AND isnotnull(cd_demo_sk#13))

(16) Project [codegen id : 4]
Output [1]: [cd_demo_sk#13]
Input [4]: [cd_demo_sk#13, cd_gender#14, cd_marital_status#15, cd_education_status#16]

(17) Exchange
Input [1]: [cd_demo_sk#13]
Arguments: hashpartitioning(cd_demo_sk#13, 5), ENSURE_REQUIREMENTS, [id=#17]

(18) Sort [codegen id : 5]
Input [1]: [cd_demo_sk#13]
Arguments: [cd_demo_sk#13 ASC NULLS FIRST], false, 0

(19) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#13]
Join condition: None

(20) Project [codegen id : 8]
Output [6]: [ss_item_sk#2, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Input [8]: [ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, cd_demo_sk#13]

(21) Scan parquet default.store
Output [2]: [s_store_sk#18, s_state#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(22) ColumnarToRow [codegen id : 6]
Input [2]: [s_store_sk#18, s_state#19]

(23) Filter [codegen id : 6]
Input [2]: [s_store_sk#18, s_state#19]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#19, 2, false, true) = TN) AND isnotnull(s_store_sk#18))

(24) Project [codegen id : 6]
Output [2]: [s_store_sk#18, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#19, 2, false, true) AS s_state#20]
Input [2]: [s_store_sk#18, s_state#19]

(25) BroadcastExchange
Input [2]: [s_store_sk#18, s_state#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21]

(26) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [s_store_sk#18]
Join condition: None

(27) Project [codegen id : 8]
Output [6]: [ss_item_sk#2, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, s_state#20]
Input [8]: [ss_item_sk#2, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, s_store_sk#18, s_state#20]

(28) Scan parquet default.item
Output [2]: [i_item_sk#22, i_item_id#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(29) ColumnarToRow [codegen id : 7]
Input [2]: [i_item_sk#22, i_item_id#23]

(30) Filter [codegen id : 7]
Input [2]: [i_item_sk#22, i_item_id#23]
Condition : isnotnull(i_item_sk#22)

(31) Project [codegen id : 7]
Output [2]: [i_item_sk#22, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_item_id#23, 16, false, true) AS i_item_id#24]
Input [2]: [i_item_sk#22, i_item_id#23]

(32) BroadcastExchange
Input [2]: [i_item_sk#22, i_item_id#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#25]

(33) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#22]
Join condition: None

(34) Project [codegen id : 8]
Output [6]: [i_item_id#24, s_state#20, ss_quantity#5 AS agg1#26, ss_list_price#6 AS agg2#27, ss_coupon_amt#8 AS agg3#28, ss_sales_price#7 AS agg4#29]
Input [8]: [ss_item_sk#2, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, s_state#20, i_item_sk#22, i_item_id#24]

(35) HashAggregate [codegen id : 8]
Input [6]: [i_item_id#24, s_state#20, agg1#26, agg2#27, agg3#28, agg4#29]
Keys [2]: [i_item_id#24, s_state#20]
Functions [4]: [partial_avg(cast(agg1#26 as bigint)), partial_avg(UnscaledValue(agg2#27)), partial_avg(UnscaledValue(agg3#28)), partial_avg(UnscaledValue(agg4#29))]
Aggregate Attributes [8]: [sum#30, count#31, sum#32, count#33, sum#34, count#35, sum#36, count#37]
Results [10]: [i_item_id#24, s_state#20, sum#38, count#39, sum#40, count#41, sum#42, count#43, sum#44, count#45]

(36) Exchange
Input [10]: [i_item_id#24, s_state#20, sum#38, count#39, sum#40, count#41, sum#42, count#43, sum#44, count#45]
Arguments: hashpartitioning(i_item_id#24, s_state#20, 5), ENSURE_REQUIREMENTS, [id=#46]

(37) HashAggregate [codegen id : 9]
Input [10]: [i_item_id#24, s_state#20, sum#38, count#39, sum#40, count#41, sum#42, count#43, sum#44, count#45]
Keys [2]: [i_item_id#24, s_state#20]
Functions [4]: [avg(cast(agg1#26 as bigint)), avg(UnscaledValue(agg2#27)), avg(UnscaledValue(agg3#28)), avg(UnscaledValue(agg4#29))]
Aggregate Attributes [4]: [avg(cast(agg1#26 as bigint))#47, avg(UnscaledValue(agg2#27))#48, avg(UnscaledValue(agg3#28))#49, avg(UnscaledValue(agg4#29))#50]
Results [7]: [i_item_id#24, s_state#20, 0 AS g_state#51, avg(cast(agg1#26 as bigint))#47 AS agg1#52, cast((avg(UnscaledValue(agg2#27))#48 / 100.0) as decimal(11,6)) AS agg2#53, cast((avg(UnscaledValue(agg3#28))#49 / 100.0) as decimal(11,6)) AS agg3#54, cast((avg(UnscaledValue(agg4#29))#50 / 100.0) as decimal(11,6)) AS agg4#55]

(38) Scan parquet default.store_sales
Output [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(39) ColumnarToRow [codegen id : 12]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]

(40) Filter [codegen id : 12]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Condition : (((isnotnull(ss_cdemo_sk#3) AND isnotnull(ss_sold_date_sk#1)) AND isnotnull(ss_store_sk#4)) AND isnotnull(ss_item_sk#2))

(41) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#9]

(42) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#9]
Join condition: None

(43) Project [codegen id : 12]
Output [7]: [ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Input [9]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, d_date_sk#9]

(44) Scan parquet default.store
Output [2]: [s_store_sk#18, s_state#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(45) ColumnarToRow [codegen id : 11]
Input [2]: [s_store_sk#18, s_state#19]

(46) Filter [codegen id : 11]
Input [2]: [s_store_sk#18, s_state#19]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#19, 2, false, true) = TN) AND isnotnull(s_store_sk#18))

(47) Project [codegen id : 11]
Output [1]: [s_store_sk#18]
Input [2]: [s_store_sk#18, s_state#19]

(48) BroadcastExchange
Input [1]: [s_store_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#56]

(49) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [s_store_sk#18]
Join condition: None

(50) Project [codegen id : 12]
Output [6]: [ss_item_sk#2, ss_cdemo_sk#3, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Input [8]: [ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, s_store_sk#18]

(51) Exchange
Input [6]: [ss_item_sk#2, ss_cdemo_sk#3, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Arguments: hashpartitioning(ss_cdemo_sk#3, 5), ENSURE_REQUIREMENTS, [id=#57]

(52) Sort [codegen id : 13]
Input [6]: [ss_item_sk#2, ss_cdemo_sk#3, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Arguments: [ss_cdemo_sk#3 ASC NULLS FIRST], false, 0

(53) ReusedExchange [Reuses operator id: 17]
Output [1]: [cd_demo_sk#13]

(54) Sort [codegen id : 15]
Input [1]: [cd_demo_sk#13]
Arguments: [cd_demo_sk#13 ASC NULLS FIRST], false, 0

(55) SortMergeJoin [codegen id : 17]
Left keys [1]: [ss_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#13]
Join condition: None

(56) Project [codegen id : 17]
Output [5]: [ss_item_sk#2, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Input [7]: [ss_item_sk#2, ss_cdemo_sk#3, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, cd_demo_sk#13]

(57) ReusedExchange [Reuses operator id: 32]
Output [2]: [i_item_sk#22, i_item_id#58]

(58) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#22]
Join condition: None

(59) Project [codegen id : 17]
Output [5]: [i_item_id#58, ss_quantity#5 AS agg1#26, ss_list_price#6 AS agg2#27, ss_coupon_amt#8 AS agg3#28, ss_sales_price#7 AS agg4#29]
Input [7]: [ss_item_sk#2, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_sk#22, i_item_id#58]

(60) HashAggregate [codegen id : 17]
Input [5]: [i_item_id#58, agg1#26, agg2#27, agg3#28, agg4#29]
Keys [1]: [i_item_id#58]
Functions [4]: [partial_avg(cast(agg1#26 as bigint)), partial_avg(UnscaledValue(agg2#27)), partial_avg(UnscaledValue(agg3#28)), partial_avg(UnscaledValue(agg4#29))]
Aggregate Attributes [8]: [sum#59, count#60, sum#61, count#62, sum#63, count#64, sum#65, count#66]
Results [9]: [i_item_id#58, sum#67, count#68, sum#69, count#70, sum#71, count#72, sum#73, count#74]

(61) Exchange
Input [9]: [i_item_id#58, sum#67, count#68, sum#69, count#70, sum#71, count#72, sum#73, count#74]
Arguments: hashpartitioning(i_item_id#58, 5), ENSURE_REQUIREMENTS, [id=#75]

(62) HashAggregate [codegen id : 18]
Input [9]: [i_item_id#58, sum#67, count#68, sum#69, count#70, sum#71, count#72, sum#73, count#74]
Keys [1]: [i_item_id#58]
Functions [4]: [avg(cast(agg1#26 as bigint)), avg(UnscaledValue(agg2#27)), avg(UnscaledValue(agg3#28)), avg(UnscaledValue(agg4#29))]
Aggregate Attributes [4]: [avg(cast(agg1#26 as bigint))#76, avg(UnscaledValue(agg2#27))#77, avg(UnscaledValue(agg3#28))#78, avg(UnscaledValue(agg4#29))#79]
Results [7]: [i_item_id#58 AS i_item_id#80, null AS s_state#81, 1 AS g_state#82, avg(cast(agg1#26 as bigint))#76 AS agg1#83, cast((avg(UnscaledValue(agg2#27))#77 / 100.0) as decimal(11,6)) AS agg2#84, cast((avg(UnscaledValue(agg3#28))#78 / 100.0) as decimal(11,6)) AS agg3#85, cast((avg(UnscaledValue(agg4#29))#79 / 100.0) as decimal(11,6)) AS agg4#86]

(63) ReusedExchange [Reuses operator id: 51]
Output [6]: [ss_item_sk#2, ss_cdemo_sk#3, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]

(64) Sort [codegen id : 22]
Input [6]: [ss_item_sk#2, ss_cdemo_sk#3, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Arguments: [ss_cdemo_sk#3 ASC NULLS FIRST], false, 0

(65) ReusedExchange [Reuses operator id: 17]
Output [1]: [cd_demo_sk#13]

(66) Sort [codegen id : 24]
Input [1]: [cd_demo_sk#13]
Arguments: [cd_demo_sk#13 ASC NULLS FIRST], false, 0

(67) SortMergeJoin [codegen id : 26]
Left keys [1]: [ss_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#13]
Join condition: None

(68) Project [codegen id : 26]
Output [5]: [ss_item_sk#2, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Input [7]: [ss_item_sk#2, ss_cdemo_sk#3, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, cd_demo_sk#13]

(69) Scan parquet default.item
Output [1]: [i_item_sk#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int>

(70) ColumnarToRow [codegen id : 25]
Input [1]: [i_item_sk#22]

(71) Filter [codegen id : 25]
Input [1]: [i_item_sk#22]
Condition : isnotnull(i_item_sk#22)

(72) BroadcastExchange
Input [1]: [i_item_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#87]

(73) BroadcastHashJoin [codegen id : 26]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#22]
Join condition: None

(74) Project [codegen id : 26]
Output [4]: [ss_quantity#5 AS agg1#26, ss_list_price#6 AS agg2#27, ss_coupon_amt#8 AS agg3#28, ss_sales_price#7 AS agg4#29]
Input [6]: [ss_item_sk#2, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_sk#22]

(75) HashAggregate [codegen id : 26]
Input [4]: [agg1#26, agg2#27, agg3#28, agg4#29]
Keys: []
Functions [4]: [partial_avg(cast(agg1#26 as bigint)), partial_avg(UnscaledValue(agg2#27)), partial_avg(UnscaledValue(agg3#28)), partial_avg(UnscaledValue(agg4#29))]
Aggregate Attributes [8]: [sum#88, count#89, sum#90, count#91, sum#92, count#93, sum#94, count#95]
Results [8]: [sum#96, count#97, sum#98, count#99, sum#100, count#101, sum#102, count#103]

(76) Exchange
Input [8]: [sum#96, count#97, sum#98, count#99, sum#100, count#101, sum#102, count#103]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#104]

(77) HashAggregate [codegen id : 27]
Input [8]: [sum#96, count#97, sum#98, count#99, sum#100, count#101, sum#102, count#103]
Keys: []
Functions [4]: [avg(cast(agg1#26 as bigint)), avg(UnscaledValue(agg2#27)), avg(UnscaledValue(agg3#28)), avg(UnscaledValue(agg4#29))]
Aggregate Attributes [4]: [avg(cast(agg1#26 as bigint))#105, avg(UnscaledValue(agg2#27))#106, avg(UnscaledValue(agg3#28))#107, avg(UnscaledValue(agg4#29))#108]
Results [7]: [null AS i_item_id#109, null AS s_state#110, 1 AS g_state#111, avg(cast(agg1#26 as bigint))#105 AS agg1#112, cast((avg(UnscaledValue(agg2#27))#106 / 100.0) as decimal(11,6)) AS agg2#113, cast((avg(UnscaledValue(agg3#28))#107 / 100.0) as decimal(11,6)) AS agg3#114, cast((avg(UnscaledValue(agg4#29))#108 / 100.0) as decimal(11,6)) AS agg4#115]

(78) Union

(79) TakeOrderedAndProject
Input [7]: [i_item_id#24, s_state#20, g_state#51, agg1#52, agg2#53, agg3#54, agg4#55]
Arguments: 100, [i_item_id#24 ASC NULLS FIRST, s_state#20 ASC NULLS FIRST], [i_item_id#24, s_state#20, g_state#51, agg1#52, agg2#53, agg3#54, agg4#55]

