== Physical Plan ==
TakeOrderedAndProject (53)
+- * Project (52)
   +- * BroadcastHashJoin Inner BuildRight (51)
      :- * Project (44)
      :  +- * BroadcastHashJoin Inner BuildRight (43)
      :     :- * Filter (34)
      :     :  +- Window (33)
      :     :     +- * Sort (32)
      :     :        +- Exchange (31)
      :     :           +- * Project (30)
      :     :              +- Window (29)
      :     :                 +- * Sort (28)
      :     :                    +- Exchange (27)
      :     :                       +- * HashAggregate (26)
      :     :                          +- Exchange (25)
      :     :                             +- * HashAggregate (24)
      :     :                                +- * Project (23)
      :     :                                   +- * BroadcastHashJoin Inner BuildRight (22)
      :     :                                      :- * Project (16)
      :     :                                      :  +- * BroadcastHashJoin Inner BuildRight (15)
      :     :                                      :     :- * Project (10)
      :     :                                      :     :  +- * BroadcastHashJoin Inner BuildRight (9)
      :     :                                      :     :     :- * Project (4)
      :     :                                      :     :     :  +- * Filter (3)
      :     :                                      :     :     :     +- * ColumnarToRow (2)
      :     :                                      :     :     :        +- Scan parquet default.item (1)
      :     :                                      :     :     +- BroadcastExchange (8)
      :     :                                      :     :        +- * Filter (7)
      :     :                                      :     :           +- * ColumnarToRow (6)
      :     :                                      :     :              +- Scan parquet default.store_sales (5)
      :     :                                      :     +- BroadcastExchange (14)
      :     :                                      :        +- * Filter (13)
      :     :                                      :           +- * ColumnarToRow (12)
      :     :                                      :              +- Scan parquet default.date_dim (11)
      :     :                                      +- BroadcastExchange (21)
      :     :                                         +- * Project (20)
      :     :                                            +- * Filter (19)
      :     :                                               +- * ColumnarToRow (18)
      :     :                                                  +- Scan parquet default.store (17)
      :     +- BroadcastExchange (42)
      :        +- * Project (41)
      :           +- * Filter (40)
      :              +- Window (39)
      :                 +- * Sort (38)
      :                    +- Exchange (37)
      :                       +- * HashAggregate (36)
      :                          +- ReusedExchange (35)
      +- BroadcastExchange (50)
         +- * Project (49)
            +- * Filter (48)
               +- Window (47)
                  +- * Sort (46)
                     +- ReusedExchange (45)


(1) Scan parquet default.item
Output [3]: [i_item_sk#1, i_brand#2, i_category#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_category:string>

(2) ColumnarToRow [codegen id : 4]
Input [3]: [i_item_sk#1, i_brand#2, i_category#3]

(3) Filter [codegen id : 4]
Input [3]: [i_item_sk#1, i_brand#2, i_category#3]
Condition : ((isnotnull(i_item_sk#1) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#3, 50, false, true))) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_brand#2, 50, false, true)))

(4) Project [codegen id : 4]
Output [3]: [i_item_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_brand#2, 50, false, true) AS i_brand#4, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#3, 50, false, true) AS i_category#5]
Input [3]: [i_item_sk#1, i_brand#2, i_category#3]

(5) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#6, ss_item_sk#7, ss_store_sk#8, ss_sales_price#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(6) ColumnarToRow [codegen id : 1]
Input [4]: [ss_sold_date_sk#6, ss_item_sk#7, ss_store_sk#8, ss_sales_price#9]

(7) Filter [codegen id : 1]
Input [4]: [ss_sold_date_sk#6, ss_item_sk#7, ss_store_sk#8, ss_sales_price#9]
Condition : ((isnotnull(ss_item_sk#7) AND isnotnull(ss_sold_date_sk#6)) AND isnotnull(ss_store_sk#8))

(8) BroadcastExchange
Input [4]: [ss_sold_date_sk#6, ss_item_sk#7, ss_store_sk#8, ss_sales_price#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#10]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [i_item_sk#1]
Right keys [1]: [ss_item_sk#7]
Join condition: None

(10) Project [codegen id : 4]
Output [5]: [i_brand#4, i_category#5, ss_sold_date_sk#6, ss_store_sk#8, ss_sales_price#9]
Input [7]: [i_item_sk#1, i_brand#4, i_category#5, ss_sold_date_sk#6, ss_item_sk#7, ss_store_sk#8, ss_sales_price#9]

(11) Scan parquet default.date_dim
Output [3]: [d_date_sk#11, d_year#12, d_moy#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [Or(Or(EqualTo(d_year,1999),And(EqualTo(d_year,1998),EqualTo(d_moy,12))),And(EqualTo(d_year,2000),EqualTo(d_moy,1))), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(12) ColumnarToRow [codegen id : 2]
Input [3]: [d_date_sk#11, d_year#12, d_moy#13]

(13) Filter [codegen id : 2]
Input [3]: [d_date_sk#11, d_year#12, d_moy#13]
Condition : ((((d_year#12 = 1999) OR ((d_year#12 = 1998) AND (d_moy#13 = 12))) OR ((d_year#12 = 2000) AND (d_moy#13 = 1))) AND isnotnull(d_date_sk#11))

(14) BroadcastExchange
Input [3]: [d_date_sk#11, d_year#12, d_moy#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14]

(15) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#11]
Join condition: None

(16) Project [codegen id : 4]
Output [6]: [i_brand#4, i_category#5, ss_store_sk#8, ss_sales_price#9, d_year#12, d_moy#13]
Input [8]: [i_brand#4, i_category#5, ss_sold_date_sk#6, ss_store_sk#8, ss_sales_price#9, d_date_sk#11, d_year#12, d_moy#13]

(17) Scan parquet default.store
Output [3]: [s_store_sk#15, s_store_name#16, s_company_name#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_company_name:string>

(18) ColumnarToRow [codegen id : 3]
Input [3]: [s_store_sk#15, s_store_name#16, s_company_name#17]

(19) Filter [codegen id : 3]
Input [3]: [s_store_sk#15, s_store_name#16, s_company_name#17]
Condition : ((isnotnull(s_store_sk#15) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_store_name#16, 50, false, true))) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_company_name#17, 50, false, true)))

(20) Project [codegen id : 3]
Output [3]: [s_store_sk#15, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_store_name#16, 50, false, true) AS s_store_name#18, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_company_name#17, 50, false, true) AS s_company_name#19]
Input [3]: [s_store_sk#15, s_store_name#16, s_company_name#17]

(21) BroadcastExchange
Input [3]: [s_store_sk#15, s_store_name#18, s_company_name#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#20]

(22) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#8]
Right keys [1]: [s_store_sk#15]
Join condition: None

(23) Project [codegen id : 4]
Output [7]: [i_brand#4, i_category#5, ss_sales_price#9, d_year#12, d_moy#13, s_store_name#18, s_company_name#19]
Input [9]: [i_brand#4, i_category#5, ss_store_sk#8, ss_sales_price#9, d_year#12, d_moy#13, s_store_sk#15, s_store_name#18, s_company_name#19]

(24) HashAggregate [codegen id : 4]
Input [7]: [i_brand#4, i_category#5, ss_sales_price#9, d_year#12, d_moy#13, s_store_name#18, s_company_name#19]
Keys [6]: [i_category#5, i_brand#4, s_store_name#18, s_company_name#19, d_year#12, d_moy#13]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#9))]
Aggregate Attributes [1]: [sum#21]
Results [7]: [i_category#5, i_brand#4, s_store_name#18, s_company_name#19, d_year#12, d_moy#13, sum#22]

(25) Exchange
Input [7]: [i_category#5, i_brand#4, s_store_name#18, s_company_name#19, d_year#12, d_moy#13, sum#22]
Arguments: hashpartitioning(i_category#5, i_brand#4, s_store_name#18, s_company_name#19, d_year#12, d_moy#13, 5), ENSURE_REQUIREMENTS, [id=#23]

(26) HashAggregate [codegen id : 5]
Input [7]: [i_category#5, i_brand#4, s_store_name#18, s_company_name#19, d_year#12, d_moy#13, sum#22]
Keys [6]: [i_category#5, i_brand#4, s_store_name#18, s_company_name#19, d_year#12, d_moy#13]
Functions [1]: [sum(UnscaledValue(ss_sales_price#9))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#9))#24]
Results [8]: [i_category#5, i_brand#4, s_store_name#18, s_company_name#19, d_year#12, d_moy#13, MakeDecimal(sum(UnscaledValue(ss_sales_price#9))#24,17,2) AS sum_sales#25, MakeDecimal(sum(UnscaledValue(ss_sales_price#9))#24,17,2) AS _w0#26]

(27) Exchange
Input [8]: [i_category#5, i_brand#4, s_store_name#18, s_company_name#19, d_year#12, d_moy#13, sum_sales#25, _w0#26]
Arguments: hashpartitioning(i_category#5, i_brand#4, s_store_name#18, s_company_name#19, d_year#12, 5), ENSURE_REQUIREMENTS, [id=#27]

(28) Sort [codegen id : 6]
Input [8]: [i_category#5, i_brand#4, s_store_name#18, s_company_name#19, d_year#12, d_moy#13, sum_sales#25, _w0#26]
Arguments: [i_category#5 ASC NULLS FIRST, i_brand#4 ASC NULLS FIRST, s_store_name#18 ASC NULLS FIRST, s_company_name#19 ASC NULLS FIRST, d_year#12 ASC NULLS FIRST], false, 0

(29) Window
Input [8]: [i_category#5, i_brand#4, s_store_name#18, s_company_name#19, d_year#12, d_moy#13, sum_sales#25, _w0#26]
Arguments: [avg(_w0#26) windowspecdefinition(i_category#5, i_brand#4, s_store_name#18, s_company_name#19, d_year#12, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#28], [i_category#5, i_brand#4, s_store_name#18, s_company_name#19, d_year#12]

(30) Project [codegen id : 7]
Output [8]: [i_category#5, i_brand#4, s_store_name#18, s_company_name#19, d_year#12, d_moy#13, sum_sales#25, avg_monthly_sales#28]
Input [9]: [i_category#5, i_brand#4, s_store_name#18, s_company_name#19, d_year#12, d_moy#13, sum_sales#25, _w0#26, avg_monthly_sales#28]

(31) Exchange
Input [8]: [i_category#5, i_brand#4, s_store_name#18, s_company_name#19, d_year#12, d_moy#13, sum_sales#25, avg_monthly_sales#28]
Arguments: hashpartitioning(i_category#5, i_brand#4, s_store_name#18, s_company_name#19, 5), ENSURE_REQUIREMENTS, [id=#29]

(32) Sort [codegen id : 8]
Input [8]: [i_category#5, i_brand#4, s_store_name#18, s_company_name#19, d_year#12, d_moy#13, sum_sales#25, avg_monthly_sales#28]
Arguments: [i_category#5 ASC NULLS FIRST, i_brand#4 ASC NULLS FIRST, s_store_name#18 ASC NULLS FIRST, s_company_name#19 ASC NULLS FIRST, d_year#12 ASC NULLS FIRST, d_moy#13 ASC NULLS FIRST], false, 0

(33) Window
Input [8]: [i_category#5, i_brand#4, s_store_name#18, s_company_name#19, d_year#12, d_moy#13, sum_sales#25, avg_monthly_sales#28]
Arguments: [rank(d_year#12, d_moy#13) windowspecdefinition(i_category#5, i_brand#4, s_store_name#18, s_company_name#19, d_year#12 ASC NULLS FIRST, d_moy#13 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#30], [i_category#5, i_brand#4, s_store_name#18, s_company_name#19], [d_year#12 ASC NULLS FIRST, d_moy#13 ASC NULLS FIRST]

(34) Filter [codegen id : 23]
Input [9]: [i_category#5, i_brand#4, s_store_name#18, s_company_name#19, d_year#12, d_moy#13, sum_sales#25, avg_monthly_sales#28, rn#30]
Condition : ((((((isnotnull(d_year#12) AND isnotnull(avg_monthly_sales#28)) AND (d_year#12 = 1999)) AND (avg_monthly_sales#28 > 0.000000)) AND (avg_monthly_sales#28 > 0.000000)) AND (CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#25 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#28 as decimal(22,6)))), DecimalType(22,6), true))) / promote_precision(cast(avg_monthly_sales#28 as decimal(22,6)))), DecimalType(38,16), true) > 0.1000000000000000)) AND isnotnull(rn#30))

(35) ReusedExchange [Reuses operator id: 25]
Output [7]: [i_category#31, i_brand#32, s_store_name#33, s_company_name#34, d_year#35, d_moy#36, sum#37]

(36) HashAggregate [codegen id : 13]
Input [7]: [i_category#31, i_brand#32, s_store_name#33, s_company_name#34, d_year#35, d_moy#36, sum#37]
Keys [6]: [i_category#31, i_brand#32, s_store_name#33, s_company_name#34, d_year#35, d_moy#36]
Functions [1]: [sum(UnscaledValue(ss_sales_price#9))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#9))#38]
Results [7]: [i_category#31, i_brand#32, s_store_name#33, s_company_name#34, d_year#35, d_moy#36, MakeDecimal(sum(UnscaledValue(ss_sales_price#9))#38,17,2) AS sum_sales#39]

(37) Exchange
Input [7]: [i_category#31, i_brand#32, s_store_name#33, s_company_name#34, d_year#35, d_moy#36, sum_sales#39]
Arguments: hashpartitioning(i_category#31, i_brand#32, s_store_name#33, s_company_name#34, 5), ENSURE_REQUIREMENTS, [id=#40]

(38) Sort [codegen id : 14]
Input [7]: [i_category#31, i_brand#32, s_store_name#33, s_company_name#34, d_year#35, d_moy#36, sum_sales#39]
Arguments: [i_category#31 ASC NULLS FIRST, i_brand#32 ASC NULLS FIRST, s_store_name#33 ASC NULLS FIRST, s_company_name#34 ASC NULLS FIRST, d_year#35 ASC NULLS FIRST, d_moy#36 ASC NULLS FIRST], false, 0

(39) Window
Input [7]: [i_category#31, i_brand#32, s_store_name#33, s_company_name#34, d_year#35, d_moy#36, sum_sales#39]
Arguments: [rank(d_year#35, d_moy#36) windowspecdefinition(i_category#31, i_brand#32, s_store_name#33, s_company_name#34, d_year#35 ASC NULLS FIRST, d_moy#36 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#41], [i_category#31, i_brand#32, s_store_name#33, s_company_name#34], [d_year#35 ASC NULLS FIRST, d_moy#36 ASC NULLS FIRST]

(40) Filter [codegen id : 15]
Input [8]: [i_category#31, i_brand#32, s_store_name#33, s_company_name#34, d_year#35, d_moy#36, sum_sales#39, rn#41]
Condition : isnotnull(rn#41)

(41) Project [codegen id : 15]
Output [6]: [i_category#31, i_brand#32, s_store_name#33, s_company_name#34, sum_sales#39, rn#41]
Input [8]: [i_category#31, i_brand#32, s_store_name#33, s_company_name#34, d_year#35, d_moy#36, sum_sales#39, rn#41]

(42) BroadcastExchange
Input [6]: [i_category#31, i_brand#32, s_store_name#33, s_company_name#34, sum_sales#39, rn#41]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true], input[1, string, true], input[2, string, true], input[3, string, true], (input[5, int, true] + 1)),false), [id=#42]

(43) BroadcastHashJoin [codegen id : 23]
Left keys [5]: [i_category#5, i_brand#4, s_store_name#18, s_company_name#19, rn#30]
Right keys [5]: [i_category#31, i_brand#32, s_store_name#33, s_company_name#34, (rn#41 + 1)]
Join condition: None

(44) Project [codegen id : 23]
Output [10]: [i_category#5, i_brand#4, s_store_name#18, s_company_name#19, d_year#12, d_moy#13, sum_sales#25, avg_monthly_sales#28, rn#30, sum_sales#39]
Input [15]: [i_category#5, i_brand#4, s_store_name#18, s_company_name#19, d_year#12, d_moy#13, sum_sales#25, avg_monthly_sales#28, rn#30, i_category#31, i_brand#32, s_store_name#33, s_company_name#34, sum_sales#39, rn#41]

(45) ReusedExchange [Reuses operator id: 37]
Output [7]: [i_category#43, i_brand#44, s_store_name#45, s_company_name#46, d_year#47, d_moy#48, sum_sales#49]

(46) Sort [codegen id : 21]
Input [7]: [i_category#43, i_brand#44, s_store_name#45, s_company_name#46, d_year#47, d_moy#48, sum_sales#49]
Arguments: [i_category#43 ASC NULLS FIRST, i_brand#44 ASC NULLS FIRST, s_store_name#45 ASC NULLS FIRST, s_company_name#46 ASC NULLS FIRST, d_year#47 ASC NULLS FIRST, d_moy#48 ASC NULLS FIRST], false, 0

(47) Window
Input [7]: [i_category#43, i_brand#44, s_store_name#45, s_company_name#46, d_year#47, d_moy#48, sum_sales#49]
Arguments: [rank(d_year#47, d_moy#48) windowspecdefinition(i_category#43, i_brand#44, s_store_name#45, s_company_name#46, d_year#47 ASC NULLS FIRST, d_moy#48 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#50], [i_category#43, i_brand#44, s_store_name#45, s_company_name#46], [d_year#47 ASC NULLS FIRST, d_moy#48 ASC NULLS FIRST]

(48) Filter [codegen id : 22]
Input [8]: [i_category#43, i_brand#44, s_store_name#45, s_company_name#46, d_year#47, d_moy#48, sum_sales#49, rn#50]
Condition : isnotnull(rn#50)

(49) Project [codegen id : 22]
Output [6]: [i_category#43, i_brand#44, s_store_name#45, s_company_name#46, sum_sales#49, rn#50]
Input [8]: [i_category#43, i_brand#44, s_store_name#45, s_company_name#46, d_year#47, d_moy#48, sum_sales#49, rn#50]

(50) BroadcastExchange
Input [6]: [i_category#43, i_brand#44, s_store_name#45, s_company_name#46, sum_sales#49, rn#50]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true], input[1, string, true], input[2, string, true], input[3, string, true], (input[5, int, true] - 1)),false), [id=#51]

(51) BroadcastHashJoin [codegen id : 23]
Left keys [5]: [i_category#5, i_brand#4, s_store_name#18, s_company_name#19, rn#30]
Right keys [5]: [i_category#43, i_brand#44, s_store_name#45, s_company_name#46, (rn#50 - 1)]
Join condition: None

(52) Project [codegen id : 23]
Output [7]: [i_category#5, d_year#12, d_moy#13, avg_monthly_sales#28, sum_sales#25, sum_sales#39 AS psum#52, sum_sales#49 AS nsum#53]
Input [16]: [i_category#5, i_brand#4, s_store_name#18, s_company_name#19, d_year#12, d_moy#13, sum_sales#25, avg_monthly_sales#28, rn#30, sum_sales#39, i_category#43, i_brand#44, s_store_name#45, s_company_name#46, sum_sales#49, rn#50]

(53) TakeOrderedAndProject
Input [7]: [i_category#5, d_year#12, d_moy#13, avg_monthly_sales#28, sum_sales#25, psum#52, nsum#53]
Arguments: 100, [CheckOverflow((promote_precision(cast(sum_sales#25 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#28 as decimal(22,6)))), DecimalType(22,6), true) ASC NULLS FIRST, d_moy#13 ASC NULLS FIRST], [i_category#5, d_year#12, d_moy#13, avg_monthly_sales#28, sum_sales#25, psum#52, nsum#53]

