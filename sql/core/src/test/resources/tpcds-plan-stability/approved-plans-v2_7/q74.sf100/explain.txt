== Physical Plan ==
TakeOrderedAndProject (83)
+- * Project (82)
   +- * SortMergeJoin Inner (81)
      :- * Project (63)
      :  +- * SortMergeJoin Inner (62)
      :     :- * SortMergeJoin Inner (42)
      :     :  :- * Sort (21)
      :     :  :  +- Exchange (20)
      :     :  :     +- * Filter (19)
      :     :  :        +- * HashAggregate (18)
      :     :  :           +- Exchange (17)
      :     :  :              +- * HashAggregate (16)
      :     :  :                 +- * Project (15)
      :     :  :                    +- * BroadcastHashJoin Inner BuildRight (14)
      :     :  :                       :- * Project (9)
      :     :  :                       :  +- * BroadcastHashJoin Inner BuildRight (8)
      :     :  :                       :     :- * Filter (3)
      :     :  :                       :     :  +- * ColumnarToRow (2)
      :     :  :                       :     :     +- Scan parquet default.customer (1)
      :     :  :                       :     +- BroadcastExchange (7)
      :     :  :                       :        +- * Filter (6)
      :     :  :                       :           +- * ColumnarToRow (5)
      :     :  :                       :              +- Scan parquet default.store_sales (4)
      :     :  :                       +- BroadcastExchange (13)
      :     :  :                          +- * Filter (12)
      :     :  :                             +- * ColumnarToRow (11)
      :     :  :                                +- Scan parquet default.date_dim (10)
      :     :  +- * Sort (41)
      :     :     +- Exchange (40)
      :     :        +- * HashAggregate (39)
      :     :           +- Exchange (38)
      :     :              +- * HashAggregate (37)
      :     :                 +- * Project (36)
      :     :                    +- * BroadcastHashJoin Inner BuildRight (35)
      :     :                       :- * Project (30)
      :     :                       :  +- * BroadcastHashJoin Inner BuildRight (29)
      :     :                       :     :- * Filter (24)
      :     :                       :     :  +- * ColumnarToRow (23)
      :     :                       :     :     +- Scan parquet default.customer (22)
      :     :                       :     +- BroadcastExchange (28)
      :     :                       :        +- * Filter (27)
      :     :                       :           +- * ColumnarToRow (26)
      :     :                       :              +- Scan parquet default.store_sales (25)
      :     :                       +- BroadcastExchange (34)
      :     :                          +- * Filter (33)
      :     :                             +- * ColumnarToRow (32)
      :     :                                +- Scan parquet default.date_dim (31)
      :     +- * Sort (61)
      :        +- Exchange (60)
      :           +- * Project (59)
      :              +- * Filter (58)
      :                 +- * HashAggregate (57)
      :                    +- Exchange (56)
      :                       +- * HashAggregate (55)
      :                          +- * Project (54)
      :                             +- * BroadcastHashJoin Inner BuildRight (53)
      :                                :- * Project (51)
      :                                :  +- * BroadcastHashJoin Inner BuildRight (50)
      :                                :     :- * Filter (45)
      :                                :     :  +- * ColumnarToRow (44)
      :                                :     :     +- Scan parquet default.customer (43)
      :                                :     +- BroadcastExchange (49)
      :                                :        +- * Filter (48)
      :                                :           +- * ColumnarToRow (47)
      :                                :              +- Scan parquet default.web_sales (46)
      :                                +- ReusedExchange (52)
      +- * Sort (80)
         +- Exchange (79)
            +- * HashAggregate (78)
               +- Exchange (77)
                  +- * HashAggregate (76)
                     +- * Project (75)
                        +- * BroadcastHashJoin Inner BuildRight (74)
                           :- * Project (72)
                           :  +- * BroadcastHashJoin Inner BuildRight (71)
                           :     :- * Filter (66)
                           :     :  +- * ColumnarToRow (65)
                           :     :     +- Scan parquet default.customer (64)
                           :     +- BroadcastExchange (70)
                           :        +- * Filter (69)
                           :           +- * ColumnarToRow (68)
                           :              +- Scan parquet default.web_sales (67)
                           +- ReusedExchange (73)


(1) Scan parquet default.customer
Output [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(2) ColumnarToRow [codegen id : 3]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]

(3) Filter [codegen id : 3]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(4) Scan parquet default.store_sales
Output [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]

(6) Filter [codegen id : 1]
Input [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]
Condition : isnotnull(ss_customer_sk#5)

(7) BroadcastExchange
Input [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#5]
Join condition: None

(9) Project [codegen id : 3]
Output [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, ss_sold_date_sk#7]
Input [7]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]

(10) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(11) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#10, d_year#11]

(12) Filter [codegen id : 2]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 = 2001)) AND d_year#11 IN (2001,2002)) AND isnotnull(d_date_sk#10))

(13) BroadcastExchange
Input [2]: [d_date_sk#10, d_year#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#12]

(14) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#10]
Join condition: None

(15) Project [codegen id : 3]
Output [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, d_year#11]
Input [7]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, ss_sold_date_sk#7, d_date_sk#10, d_year#11]

(16) HashAggregate [codegen id : 3]
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, d_year#11]
Keys [4]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#6))]
Aggregate Attributes [1]: [sum#13]
Results [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#14]

(17) Exchange
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#14]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, 5), ENSURE_REQUIREMENTS, [id=#15]

(18) HashAggregate [codegen id : 4]
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#14]
Keys [4]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11]
Functions [1]: [sum(UnscaledValue(ss_net_paid#6))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#6))#16]
Results [2]: [c_customer_id#2 AS customer_id#17, MakeDecimal(sum(UnscaledValue(ss_net_paid#6))#16,17,2) AS year_total#18]

(19) Filter [codegen id : 4]
Input [2]: [customer_id#17, year_total#18]
Condition : (isnotnull(year_total#18) AND (year_total#18 > 0.00))

(20) Exchange
Input [2]: [customer_id#17, year_total#18]
Arguments: hashpartitioning(customer_id#17, 5), ENSURE_REQUIREMENTS, [id=#19]

(21) Sort [codegen id : 5]
Input [2]: [customer_id#17, year_total#18]
Arguments: [customer_id#17 ASC NULLS FIRST], false, 0

(22) Scan parquet default.customer
Output [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(23) ColumnarToRow [codegen id : 8]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]

(24) Filter [codegen id : 8]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(25) Scan parquet default.store_sales
Output [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#20)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>

(26) ColumnarToRow [codegen id : 6]
Input [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]

(27) Filter [codegen id : 6]
Input [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]
Condition : isnotnull(ss_customer_sk#5)

(28) BroadcastExchange
Input [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#21]

(29) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#5]
Join condition: None

(30) Project [codegen id : 8]
Output [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, ss_sold_date_sk#7]
Input [7]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]

(31) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(32) ColumnarToRow [codegen id : 7]
Input [2]: [d_date_sk#10, d_year#11]

(33) Filter [codegen id : 7]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 = 2002)) AND d_year#11 IN (2001,2002)) AND isnotnull(d_date_sk#10))

(34) BroadcastExchange
Input [2]: [d_date_sk#10, d_year#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#22]

(35) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#10]
Join condition: None

(36) Project [codegen id : 8]
Output [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, d_year#11]
Input [7]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, ss_sold_date_sk#7, d_date_sk#10, d_year#11]

(37) HashAggregate [codegen id : 8]
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, d_year#11]
Keys [4]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#6))]
Aggregate Attributes [1]: [sum#23]
Results [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#24]

(38) Exchange
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#24]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, 5), ENSURE_REQUIREMENTS, [id=#25]

(39) HashAggregate [codegen id : 9]
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#24]
Keys [4]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11]
Functions [1]: [sum(UnscaledValue(ss_net_paid#6))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#6))#26]
Results [4]: [c_customer_id#2 AS customer_id#27, c_first_name#3 AS customer_first_name#28, c_last_name#4 AS customer_last_name#29, MakeDecimal(sum(UnscaledValue(ss_net_paid#6))#26,17,2) AS year_total#30]

(40) Exchange
Input [4]: [customer_id#27, customer_first_name#28, customer_last_name#29, year_total#30]
Arguments: hashpartitioning(customer_id#27, 5), ENSURE_REQUIREMENTS, [id=#31]

(41) Sort [codegen id : 10]
Input [4]: [customer_id#27, customer_first_name#28, customer_last_name#29, year_total#30]
Arguments: [customer_id#27 ASC NULLS FIRST], false, 0

(42) SortMergeJoin [codegen id : 11]
Left keys [1]: [customer_id#17]
Right keys [1]: [customer_id#27]
Join condition: None

(43) Scan parquet default.customer
Output [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(44) ColumnarToRow [codegen id : 14]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]

(45) Filter [codegen id : 14]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(46) Scan parquet default.web_sales
Output [3]: [ws_bill_customer_sk#32, ws_net_paid#33, ws_sold_date_sk#34]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#34), dynamicpruningexpression(ws_sold_date_sk#34 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>

(47) ColumnarToRow [codegen id : 12]
Input [3]: [ws_bill_customer_sk#32, ws_net_paid#33, ws_sold_date_sk#34]

(48) Filter [codegen id : 12]
Input [3]: [ws_bill_customer_sk#32, ws_net_paid#33, ws_sold_date_sk#34]
Condition : isnotnull(ws_bill_customer_sk#32)

(49) BroadcastExchange
Input [3]: [ws_bill_customer_sk#32, ws_net_paid#33, ws_sold_date_sk#34]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#35]

(50) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#32]
Join condition: None

(51) Project [codegen id : 14]
Output [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ws_net_paid#33, ws_sold_date_sk#34]
Input [7]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, ws_bill_customer_sk#32, ws_net_paid#33, ws_sold_date_sk#34]

(52) ReusedExchange [Reuses operator id: 13]
Output [2]: [d_date_sk#10, d_year#11]

(53) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_sold_date_sk#34]
Right keys [1]: [d_date_sk#10]
Join condition: None

(54) Project [codegen id : 14]
Output [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ws_net_paid#33, d_year#11]
Input [7]: [c_customer_id#2, c_first_name#3, c_last_name#4, ws_net_paid#33, ws_sold_date_sk#34, d_date_sk#10, d_year#11]

(55) HashAggregate [codegen id : 14]
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ws_net_paid#33, d_year#11]
Keys [4]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#33))]
Aggregate Attributes [1]: [sum#36]
Results [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#37]

(56) Exchange
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#37]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, 5), ENSURE_REQUIREMENTS, [id=#38]

(57) HashAggregate [codegen id : 15]
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#37]
Keys [4]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11]
Functions [1]: [sum(UnscaledValue(ws_net_paid#33))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#33))#39]
Results [2]: [c_customer_id#2 AS customer_id#40, MakeDecimal(sum(UnscaledValue(ws_net_paid#33))#39,17,2) AS year_total#41]

(58) Filter [codegen id : 15]
Input [2]: [customer_id#40, year_total#41]
Condition : (isnotnull(year_total#41) AND (year_total#41 > 0.00))

(59) Project [codegen id : 15]
Output [2]: [customer_id#40 AS customer_id#42, year_total#41 AS year_total#43]
Input [2]: [customer_id#40, year_total#41]

(60) Exchange
Input [2]: [customer_id#42, year_total#43]
Arguments: hashpartitioning(customer_id#42, 5), ENSURE_REQUIREMENTS, [id=#44]

(61) Sort [codegen id : 16]
Input [2]: [customer_id#42, year_total#43]
Arguments: [customer_id#42 ASC NULLS FIRST], false, 0

(62) SortMergeJoin [codegen id : 17]
Left keys [1]: [customer_id#17]
Right keys [1]: [customer_id#42]
Join condition: None

(63) Project [codegen id : 17]
Output [7]: [customer_id#17, year_total#18, customer_id#27, customer_first_name#28, customer_last_name#29, year_total#30, year_total#43]
Input [8]: [customer_id#17, year_total#18, customer_id#27, customer_first_name#28, customer_last_name#29, year_total#30, customer_id#42, year_total#43]

(64) Scan parquet default.customer
Output [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(65) ColumnarToRow [codegen id : 20]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]

(66) Filter [codegen id : 20]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(67) Scan parquet default.web_sales
Output [3]: [ws_bill_customer_sk#32, ws_net_paid#33, ws_sold_date_sk#34]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#34), dynamicpruningexpression(ws_sold_date_sk#34 IN dynamicpruning#20)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>

(68) ColumnarToRow [codegen id : 18]
Input [3]: [ws_bill_customer_sk#32, ws_net_paid#33, ws_sold_date_sk#34]

(69) Filter [codegen id : 18]
Input [3]: [ws_bill_customer_sk#32, ws_net_paid#33, ws_sold_date_sk#34]
Condition : isnotnull(ws_bill_customer_sk#32)

(70) BroadcastExchange
Input [3]: [ws_bill_customer_sk#32, ws_net_paid#33, ws_sold_date_sk#34]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#45]

(71) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#32]
Join condition: None

(72) Project [codegen id : 20]
Output [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ws_net_paid#33, ws_sold_date_sk#34]
Input [7]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, ws_bill_customer_sk#32, ws_net_paid#33, ws_sold_date_sk#34]

(73) ReusedExchange [Reuses operator id: 34]
Output [2]: [d_date_sk#10, d_year#11]

(74) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ws_sold_date_sk#34]
Right keys [1]: [d_date_sk#10]
Join condition: None

(75) Project [codegen id : 20]
Output [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ws_net_paid#33, d_year#11]
Input [7]: [c_customer_id#2, c_first_name#3, c_last_name#4, ws_net_paid#33, ws_sold_date_sk#34, d_date_sk#10, d_year#11]

(76) HashAggregate [codegen id : 20]
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ws_net_paid#33, d_year#11]
Keys [4]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#33))]
Aggregate Attributes [1]: [sum#46]
Results [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#47]

(77) Exchange
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#47]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, 5), ENSURE_REQUIREMENTS, [id=#48]

(78) HashAggregate [codegen id : 21]
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#47]
Keys [4]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11]
Functions [1]: [sum(UnscaledValue(ws_net_paid#33))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#33))#49]
Results [2]: [c_customer_id#2 AS customer_id#50, MakeDecimal(sum(UnscaledValue(ws_net_paid#33))#49,17,2) AS year_total#51]

(79) Exchange
Input [2]: [customer_id#50, year_total#51]
Arguments: hashpartitioning(customer_id#50, 5), ENSURE_REQUIREMENTS, [id=#52]

(80) Sort [codegen id : 22]
Input [2]: [customer_id#50, year_total#51]
Arguments: [customer_id#50 ASC NULLS FIRST], false, 0

(81) SortMergeJoin [codegen id : 23]
Left keys [1]: [customer_id#17]
Right keys [1]: [customer_id#50]
Join condition: (CASE WHEN (year_total#43 > 0.00) THEN CheckOverflow((promote_precision(year_total#51) / promote_precision(year_total#43)), DecimalType(37,20), true) ELSE null END > CASE WHEN (year_total#18 > 0.00) THEN CheckOverflow((promote_precision(year_total#30) / promote_precision(year_total#18)), DecimalType(37,20), true) ELSE null END)

(82) Project [codegen id : 23]
Output [3]: [customer_id#27, customer_first_name#28, customer_last_name#29]
Input [9]: [customer_id#17, year_total#18, customer_id#27, customer_first_name#28, customer_last_name#29, year_total#30, year_total#43, customer_id#50, year_total#51]

(83) TakeOrderedAndProject
Input [3]: [customer_id#27, customer_first_name#28, customer_last_name#29]
Arguments: 100, [customer_first_name#28 ASC NULLS FIRST, customer_id#27 ASC NULLS FIRST, customer_last_name#29 ASC NULLS FIRST], [customer_id#27, customer_first_name#28, customer_last_name#29]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
ReusedExchange (84)


(84) ReusedExchange [Reuses operator id: 13]
Output [2]: [d_date_sk#10, d_year#11]

Subquery:2 Hosting operator id = 25 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#20
ReusedExchange (85)


(85) ReusedExchange [Reuses operator id: 34]
Output [2]: [d_date_sk#10, d_year#11]

Subquery:3 Hosting operator id = 46 Hosting Expression = ws_sold_date_sk#34 IN dynamicpruning#8

Subquery:4 Hosting operator id = 67 Hosting Expression = ws_sold_date_sk#34 IN dynamicpruning#20


