== Physical Plan ==
TakeOrderedAndProject (79)
+- * Project (78)
   +- * SortMergeJoin Inner (77)
      :- * Project (59)
      :  +- * SortMergeJoin Inner (58)
      :     :- * SortMergeJoin Inner (38)
      :     :  :- * Sort (20)
      :     :  :  +- Exchange (19)
      :     :  :     +- * Filter (18)
      :     :  :        +- * HashAggregate (17)
      :     :  :           +- Exchange (16)
      :     :  :              +- * HashAggregate (15)
      :     :  :                 +- * Project (14)
      :     :  :                    +- * SortMergeJoin Inner (13)
      :     :  :                       :- * Sort (8)
      :     :  :                       :  +- Exchange (7)
      :     :  :                       :     +- * Project (6)
      :     :  :                       :        +- * BroadcastHashJoin Inner BuildRight (5)
      :     :  :                       :           :- * Filter (3)
      :     :  :                       :           :  +- * ColumnarToRow (2)
      :     :  :                       :           :     +- Scan parquet default.store_sales (1)
      :     :  :                       :           +- ReusedExchange (4)
      :     :  :                       +- * Sort (12)
      :     :  :                          +- Exchange (11)
      :     :  :                             +- * ColumnarToRow (10)
      :     :  :                                +- Scan parquet default.customer (9)
      :     :  +- * Sort (37)
      :     :     +- Exchange (36)
      :     :        +- * HashAggregate (35)
      :     :           +- Exchange (34)
      :     :              +- * HashAggregate (33)
      :     :                 +- * Project (32)
      :     :                    +- * SortMergeJoin Inner (31)
      :     :                       :- * Sort (28)
      :     :                       :  +- Exchange (27)
      :     :                       :     +- * Project (26)
      :     :                       :        +- * BroadcastHashJoin Inner BuildRight (25)
      :     :                       :           :- * Filter (23)
      :     :                       :           :  +- * ColumnarToRow (22)
      :     :                       :           :     +- Scan parquet default.store_sales (21)
      :     :                       :           +- ReusedExchange (24)
      :     :                       +- * Sort (30)
      :     :                          +- ReusedExchange (29)
      :     +- * Sort (57)
      :        +- Exchange (56)
      :           +- * Project (55)
      :              +- * Filter (54)
      :                 +- * HashAggregate (53)
      :                    +- Exchange (52)
      :                       +- * HashAggregate (51)
      :                          +- * Project (50)
      :                             +- * SortMergeJoin Inner (49)
      :                                :- * Sort (46)
      :                                :  +- Exchange (45)
      :                                :     +- * Project (44)
      :                                :        +- * BroadcastHashJoin Inner BuildRight (43)
      :                                :           :- * Filter (41)
      :                                :           :  +- * ColumnarToRow (40)
      :                                :           :     +- Scan parquet default.web_sales (39)
      :                                :           +- ReusedExchange (42)
      :                                +- * Sort (48)
      :                                   +- ReusedExchange (47)
      +- * Sort (76)
         +- Exchange (75)
            +- * HashAggregate (74)
               +- Exchange (73)
                  +- * HashAggregate (72)
                     +- * Project (71)
                        +- * SortMergeJoin Inner (70)
                           :- * Sort (67)
                           :  +- Exchange (66)
                           :     +- * Project (65)
                           :        +- * BroadcastHashJoin Inner BuildRight (64)
                           :           :- * Filter (62)
                           :           :  +- * ColumnarToRow (61)
                           :           :     +- Scan parquet default.web_sales (60)
                           :           +- ReusedExchange (63)
                           +- * Sort (69)
                              +- ReusedExchange (68)


(1) Scan parquet default.store_sales
Output [3]: [ss_customer_sk#1, ss_net_paid#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [3]: [ss_customer_sk#1, ss_net_paid#2, ss_sold_date_sk#3]

(3) Filter [codegen id : 2]
Input [3]: [ss_customer_sk#1, ss_net_paid#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_customer_sk#1)

(4) ReusedExchange [Reuses operator id: 83]
Output [2]: [d_date_sk#5, d_year#6]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join condition: None

(6) Project [codegen id : 2]
Output [3]: [ss_customer_sk#1, ss_net_paid#2, d_year#6]
Input [5]: [ss_customer_sk#1, ss_net_paid#2, ss_sold_date_sk#3, d_date_sk#5, d_year#6]

(7) Exchange
Input [3]: [ss_customer_sk#1, ss_net_paid#2, d_year#6]
Arguments: hashpartitioning(ss_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#7]

(8) Sort [codegen id : 3]
Input [3]: [ss_customer_sk#1, ss_net_paid#2, d_year#6]
Arguments: [ss_customer_sk#1 ASC NULLS FIRST], false, 0

(9) Scan parquet default.customer
Output [4]: [c_customer_sk#8, c_customer_id#9, c_first_name#10, c_last_name#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(10) ColumnarToRow [codegen id : 4]
Input [4]: [c_customer_sk#8, c_customer_id#9, c_first_name#10, c_last_name#11]

(11) Exchange
Input [4]: [c_customer_sk#8, c_customer_id#9, c_first_name#10, c_last_name#11]
Arguments: hashpartitioning(c_customer_sk#8, 5), ENSURE_REQUIREMENTS, [id=#12]

(12) Sort [codegen id : 5]
Input [4]: [c_customer_sk#8, c_customer_id#9, c_first_name#10, c_last_name#11]
Arguments: [c_customer_sk#8 ASC NULLS FIRST], false, 0

(13) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#8]
Join condition: None

(14) Project [codegen id : 6]
Output [5]: [c_customer_id#9, c_first_name#10, c_last_name#11, ss_net_paid#2, d_year#6]
Input [7]: [ss_customer_sk#1, ss_net_paid#2, d_year#6, c_customer_sk#8, c_customer_id#9, c_first_name#10, c_last_name#11]

(15) HashAggregate [codegen id : 6]
Input [5]: [c_customer_id#9, c_first_name#10, c_last_name#11, ss_net_paid#2, d_year#6]
Keys [4]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#6]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#2))]
Aggregate Attributes [1]: [sum#13]
Results [5]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#6, sum#14]

(16) Exchange
Input [5]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#6, sum#14]
Arguments: hashpartitioning(c_customer_id#9, c_first_name#10, c_last_name#11, d_year#6, 5), ENSURE_REQUIREMENTS, [id=#15]

(17) HashAggregate [codegen id : 7]
Input [5]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#6, sum#14]
Keys [4]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#6]
Functions [1]: [sum(UnscaledValue(ss_net_paid#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#2))#16]
Results [2]: [c_customer_id#9 AS customer_id#17, MakeDecimal(sum(UnscaledValue(ss_net_paid#2))#16,17,2) AS year_total#18]

(18) Filter [codegen id : 7]
Input [2]: [customer_id#17, year_total#18]
Condition : (isnotnull(year_total#18) AND (year_total#18 > 0.00))

(19) Exchange
Input [2]: [customer_id#17, year_total#18]
Arguments: hashpartitioning(customer_id#17, 5), ENSURE_REQUIREMENTS, [id=#19]

(20) Sort [codegen id : 8]
Input [2]: [customer_id#17, year_total#18]
Arguments: [customer_id#17 ASC NULLS FIRST], false, 0

(21) Scan parquet default.store_sales
Output [3]: [ss_customer_sk#20, ss_net_paid#21, ss_sold_date_sk#22]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#22), dynamicpruningexpression(ss_sold_date_sk#22 IN dynamicpruning#23)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>

(22) ColumnarToRow [codegen id : 10]
Input [3]: [ss_customer_sk#20, ss_net_paid#21, ss_sold_date_sk#22]

(23) Filter [codegen id : 10]
Input [3]: [ss_customer_sk#20, ss_net_paid#21, ss_sold_date_sk#22]
Condition : isnotnull(ss_customer_sk#20)

(24) ReusedExchange [Reuses operator id: 87]
Output [2]: [d_date_sk#24, d_year#25]

(25) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#22]
Right keys [1]: [d_date_sk#24]
Join condition: None

(26) Project [codegen id : 10]
Output [3]: [ss_customer_sk#20, ss_net_paid#21, d_year#25]
Input [5]: [ss_customer_sk#20, ss_net_paid#21, ss_sold_date_sk#22, d_date_sk#24, d_year#25]

(27) Exchange
Input [3]: [ss_customer_sk#20, ss_net_paid#21, d_year#25]
Arguments: hashpartitioning(ss_customer_sk#20, 5), ENSURE_REQUIREMENTS, [id=#26]

(28) Sort [codegen id : 11]
Input [3]: [ss_customer_sk#20, ss_net_paid#21, d_year#25]
Arguments: [ss_customer_sk#20 ASC NULLS FIRST], false, 0

(29) ReusedExchange [Reuses operator id: 11]
Output [4]: [c_customer_sk#27, c_customer_id#28, c_first_name#29, c_last_name#30]

(30) Sort [codegen id : 13]
Input [4]: [c_customer_sk#27, c_customer_id#28, c_first_name#29, c_last_name#30]
Arguments: [c_customer_sk#27 ASC NULLS FIRST], false, 0

(31) SortMergeJoin [codegen id : 14]
Left keys [1]: [ss_customer_sk#20]
Right keys [1]: [c_customer_sk#27]
Join condition: None

(32) Project [codegen id : 14]
Output [5]: [c_customer_id#28, c_first_name#29, c_last_name#30, ss_net_paid#21, d_year#25]
Input [7]: [ss_customer_sk#20, ss_net_paid#21, d_year#25, c_customer_sk#27, c_customer_id#28, c_first_name#29, c_last_name#30]

(33) HashAggregate [codegen id : 14]
Input [5]: [c_customer_id#28, c_first_name#29, c_last_name#30, ss_net_paid#21, d_year#25]
Keys [4]: [c_customer_id#28, c_first_name#29, c_last_name#30, d_year#25]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#21))]
Aggregate Attributes [1]: [sum#31]
Results [5]: [c_customer_id#28, c_first_name#29, c_last_name#30, d_year#25, sum#32]

(34) Exchange
Input [5]: [c_customer_id#28, c_first_name#29, c_last_name#30, d_year#25, sum#32]
Arguments: hashpartitioning(c_customer_id#28, c_first_name#29, c_last_name#30, d_year#25, 5), ENSURE_REQUIREMENTS, [id=#33]

(35) HashAggregate [codegen id : 15]
Input [5]: [c_customer_id#28, c_first_name#29, c_last_name#30, d_year#25, sum#32]
Keys [4]: [c_customer_id#28, c_first_name#29, c_last_name#30, d_year#25]
Functions [1]: [sum(UnscaledValue(ss_net_paid#21))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#21))#34]
Results [4]: [c_customer_id#28 AS customer_id#35, c_first_name#29 AS customer_first_name#36, c_last_name#30 AS customer_last_name#37, MakeDecimal(sum(UnscaledValue(ss_net_paid#21))#34,17,2) AS year_total#38]

(36) Exchange
Input [4]: [customer_id#35, customer_first_name#36, customer_last_name#37, year_total#38]
Arguments: hashpartitioning(customer_id#35, 5), ENSURE_REQUIREMENTS, [id=#39]

(37) Sort [codegen id : 16]
Input [4]: [customer_id#35, customer_first_name#36, customer_last_name#37, year_total#38]
Arguments: [customer_id#35 ASC NULLS FIRST], false, 0

(38) SortMergeJoin [codegen id : 17]
Left keys [1]: [customer_id#17]
Right keys [1]: [customer_id#35]
Join condition: None

(39) Scan parquet default.web_sales
Output [3]: [ws_bill_customer_sk#40, ws_net_paid#41, ws_sold_date_sk#42]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#42), dynamicpruningexpression(ws_sold_date_sk#42 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>

(40) ColumnarToRow [codegen id : 19]
Input [3]: [ws_bill_customer_sk#40, ws_net_paid#41, ws_sold_date_sk#42]

(41) Filter [codegen id : 19]
Input [3]: [ws_bill_customer_sk#40, ws_net_paid#41, ws_sold_date_sk#42]
Condition : isnotnull(ws_bill_customer_sk#40)

(42) ReusedExchange [Reuses operator id: 83]
Output [2]: [d_date_sk#43, d_year#44]

(43) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [ws_sold_date_sk#42]
Right keys [1]: [d_date_sk#43]
Join condition: None

(44) Project [codegen id : 19]
Output [3]: [ws_bill_customer_sk#40, ws_net_paid#41, d_year#44]
Input [5]: [ws_bill_customer_sk#40, ws_net_paid#41, ws_sold_date_sk#42, d_date_sk#43, d_year#44]

(45) Exchange
Input [3]: [ws_bill_customer_sk#40, ws_net_paid#41, d_year#44]
Arguments: hashpartitioning(ws_bill_customer_sk#40, 5), ENSURE_REQUIREMENTS, [id=#45]

(46) Sort [codegen id : 20]
Input [3]: [ws_bill_customer_sk#40, ws_net_paid#41, d_year#44]
Arguments: [ws_bill_customer_sk#40 ASC NULLS FIRST], false, 0

(47) ReusedExchange [Reuses operator id: 11]
Output [4]: [c_customer_sk#46, c_customer_id#47, c_first_name#48, c_last_name#49]

(48) Sort [codegen id : 22]
Input [4]: [c_customer_sk#46, c_customer_id#47, c_first_name#48, c_last_name#49]
Arguments: [c_customer_sk#46 ASC NULLS FIRST], false, 0

(49) SortMergeJoin [codegen id : 23]
Left keys [1]: [ws_bill_customer_sk#40]
Right keys [1]: [c_customer_sk#46]
Join condition: None

(50) Project [codegen id : 23]
Output [5]: [c_customer_id#47, c_first_name#48, c_last_name#49, ws_net_paid#41, d_year#44]
Input [7]: [ws_bill_customer_sk#40, ws_net_paid#41, d_year#44, c_customer_sk#46, c_customer_id#47, c_first_name#48, c_last_name#49]

(51) HashAggregate [codegen id : 23]
Input [5]: [c_customer_id#47, c_first_name#48, c_last_name#49, ws_net_paid#41, d_year#44]
Keys [4]: [c_customer_id#47, c_first_name#48, c_last_name#49, d_year#44]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#41))]
Aggregate Attributes [1]: [sum#50]
Results [5]: [c_customer_id#47, c_first_name#48, c_last_name#49, d_year#44, sum#51]

(52) Exchange
Input [5]: [c_customer_id#47, c_first_name#48, c_last_name#49, d_year#44, sum#51]
Arguments: hashpartitioning(c_customer_id#47, c_first_name#48, c_last_name#49, d_year#44, 5), ENSURE_REQUIREMENTS, [id=#52]

(53) HashAggregate [codegen id : 24]
Input [5]: [c_customer_id#47, c_first_name#48, c_last_name#49, d_year#44, sum#51]
Keys [4]: [c_customer_id#47, c_first_name#48, c_last_name#49, d_year#44]
Functions [1]: [sum(UnscaledValue(ws_net_paid#41))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#41))#53]
Results [2]: [c_customer_id#47 AS customer_id#54, MakeDecimal(sum(UnscaledValue(ws_net_paid#41))#53,17,2) AS year_total#55]

(54) Filter [codegen id : 24]
Input [2]: [customer_id#54, year_total#55]
Condition : (isnotnull(year_total#55) AND (year_total#55 > 0.00))

(55) Project [codegen id : 24]
Output [2]: [customer_id#54 AS customer_id#56, year_total#55 AS year_total#57]
Input [2]: [customer_id#54, year_total#55]

(56) Exchange
Input [2]: [customer_id#56, year_total#57]
Arguments: hashpartitioning(customer_id#56, 5), ENSURE_REQUIREMENTS, [id=#58]

(57) Sort [codegen id : 25]
Input [2]: [customer_id#56, year_total#57]
Arguments: [customer_id#56 ASC NULLS FIRST], false, 0

(58) SortMergeJoin [codegen id : 26]
Left keys [1]: [customer_id#17]
Right keys [1]: [customer_id#56]
Join condition: None

(59) Project [codegen id : 26]
Output [7]: [customer_id#17, year_total#18, customer_id#35, customer_first_name#36, customer_last_name#37, year_total#38, year_total#57]
Input [8]: [customer_id#17, year_total#18, customer_id#35, customer_first_name#36, customer_last_name#37, year_total#38, customer_id#56, year_total#57]

(60) Scan parquet default.web_sales
Output [3]: [ws_bill_customer_sk#59, ws_net_paid#60, ws_sold_date_sk#61]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#61), dynamicpruningexpression(ws_sold_date_sk#61 IN dynamicpruning#23)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>

(61) ColumnarToRow [codegen id : 28]
Input [3]: [ws_bill_customer_sk#59, ws_net_paid#60, ws_sold_date_sk#61]

(62) Filter [codegen id : 28]
Input [3]: [ws_bill_customer_sk#59, ws_net_paid#60, ws_sold_date_sk#61]
Condition : isnotnull(ws_bill_customer_sk#59)

(63) ReusedExchange [Reuses operator id: 87]
Output [2]: [d_date_sk#62, d_year#63]

(64) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [ws_sold_date_sk#61]
Right keys [1]: [d_date_sk#62]
Join condition: None

(65) Project [codegen id : 28]
Output [3]: [ws_bill_customer_sk#59, ws_net_paid#60, d_year#63]
Input [5]: [ws_bill_customer_sk#59, ws_net_paid#60, ws_sold_date_sk#61, d_date_sk#62, d_year#63]

(66) Exchange
Input [3]: [ws_bill_customer_sk#59, ws_net_paid#60, d_year#63]
Arguments: hashpartitioning(ws_bill_customer_sk#59, 5), ENSURE_REQUIREMENTS, [id=#64]

(67) Sort [codegen id : 29]
Input [3]: [ws_bill_customer_sk#59, ws_net_paid#60, d_year#63]
Arguments: [ws_bill_customer_sk#59 ASC NULLS FIRST], false, 0

(68) ReusedExchange [Reuses operator id: 11]
Output [4]: [c_customer_sk#65, c_customer_id#66, c_first_name#67, c_last_name#68]

(69) Sort [codegen id : 31]
Input [4]: [c_customer_sk#65, c_customer_id#66, c_first_name#67, c_last_name#68]
Arguments: [c_customer_sk#65 ASC NULLS FIRST], false, 0

(70) SortMergeJoin [codegen id : 32]
Left keys [1]: [ws_bill_customer_sk#59]
Right keys [1]: [c_customer_sk#65]
Join condition: None

(71) Project [codegen id : 32]
Output [5]: [c_customer_id#66, c_first_name#67, c_last_name#68, ws_net_paid#60, d_year#63]
Input [7]: [ws_bill_customer_sk#59, ws_net_paid#60, d_year#63, c_customer_sk#65, c_customer_id#66, c_first_name#67, c_last_name#68]

(72) HashAggregate [codegen id : 32]
Input [5]: [c_customer_id#66, c_first_name#67, c_last_name#68, ws_net_paid#60, d_year#63]
Keys [4]: [c_customer_id#66, c_first_name#67, c_last_name#68, d_year#63]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#60))]
Aggregate Attributes [1]: [sum#69]
Results [5]: [c_customer_id#66, c_first_name#67, c_last_name#68, d_year#63, sum#70]

(73) Exchange
Input [5]: [c_customer_id#66, c_first_name#67, c_last_name#68, d_year#63, sum#70]
Arguments: hashpartitioning(c_customer_id#66, c_first_name#67, c_last_name#68, d_year#63, 5), ENSURE_REQUIREMENTS, [id=#71]

(74) HashAggregate [codegen id : 33]
Input [5]: [c_customer_id#66, c_first_name#67, c_last_name#68, d_year#63, sum#70]
Keys [4]: [c_customer_id#66, c_first_name#67, c_last_name#68, d_year#63]
Functions [1]: [sum(UnscaledValue(ws_net_paid#60))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#60))#72]
Results [2]: [c_customer_id#66 AS customer_id#73, MakeDecimal(sum(UnscaledValue(ws_net_paid#60))#72,17,2) AS year_total#74]

(75) Exchange
Input [2]: [customer_id#73, year_total#74]
Arguments: hashpartitioning(customer_id#73, 5), ENSURE_REQUIREMENTS, [id=#75]

(76) Sort [codegen id : 34]
Input [2]: [customer_id#73, year_total#74]
Arguments: [customer_id#73 ASC NULLS FIRST], false, 0

(77) SortMergeJoin [codegen id : 35]
Left keys [1]: [customer_id#17]
Right keys [1]: [customer_id#73]
Join condition: (CASE WHEN (year_total#57 > 0.00) THEN CheckOverflow((promote_precision(year_total#74) / promote_precision(year_total#57)), DecimalType(37,20), true) ELSE null END > CASE WHEN (year_total#18 > 0.00) THEN CheckOverflow((promote_precision(year_total#38) / promote_precision(year_total#18)), DecimalType(37,20), true) ELSE null END)

(78) Project [codegen id : 35]
Output [3]: [customer_id#35, customer_first_name#36, customer_last_name#37]
Input [9]: [customer_id#17, year_total#18, customer_id#35, customer_first_name#36, customer_last_name#37, year_total#38, year_total#57, customer_id#73, year_total#74]

(79) TakeOrderedAndProject
Input [3]: [customer_id#35, customer_first_name#36, customer_last_name#37]
Arguments: 100, [customer_first_name#36 ASC NULLS FIRST, customer_id#35 ASC NULLS FIRST, customer_last_name#37 ASC NULLS FIRST], [customer_id#35, customer_first_name#36, customer_last_name#37]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (83)
+- * Filter (82)
   +- * ColumnarToRow (81)
      +- Scan parquet default.date_dim (80)


(80) Scan parquet default.date_dim
Output [2]: [d_date_sk#5, d_year#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [EqualTo(d_year,2001), In(d_year, [2001,2002])]
ReadSchema: struct<d_date_sk:int,d_year:int>

(81) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#5, d_year#6]

(82) Filter [codegen id : 1]
Input [2]: [d_date_sk#5, d_year#6]
Condition : ((d_year#6 = 2001) AND d_year#6 IN (2001,2002))

(83) BroadcastExchange
Input [2]: [d_date_sk#5, d_year#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#76]

Subquery:2 Hosting operator id = 21 Hosting Expression = ss_sold_date_sk#22 IN dynamicpruning#23
BroadcastExchange (87)
+- * Filter (86)
   +- * ColumnarToRow (85)
      +- Scan parquet default.date_dim (84)


(84) Scan parquet default.date_dim
Output [2]: [d_date_sk#24, d_year#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [EqualTo(d_year,2002), In(d_year, [2001,2002])]
ReadSchema: struct<d_date_sk:int,d_year:int>

(85) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#24, d_year#25]

(86) Filter [codegen id : 1]
Input [2]: [d_date_sk#24, d_year#25]
Condition : ((d_year#25 = 2002) AND d_year#25 IN (2001,2002))

(87) BroadcastExchange
Input [2]: [d_date_sk#24, d_year#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#77]

Subquery:3 Hosting operator id = 39 Hosting Expression = ws_sold_date_sk#42 IN dynamicpruning#4

Subquery:4 Hosting operator id = 60 Hosting Expression = ws_sold_date_sk#61 IN dynamicpruning#23


