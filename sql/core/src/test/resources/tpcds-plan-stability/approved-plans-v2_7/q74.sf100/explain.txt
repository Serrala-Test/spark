== Physical Plan ==
TakeOrderedAndProject (76)
+- * Project (75)
   +- * SortMergeJoin Inner (74)
      :- * Project (56)
      :  +- * SortMergeJoin Inner (55)
      :     :- * SortMergeJoin Inner (36)
      :     :  :- * Sort (18)
      :     :  :  +- Exchange (17)
      :     :  :     +- * Filter (16)
      :     :  :        +- * HashAggregate (15)
      :     :  :           +- Exchange (14)
      :     :  :              +- * HashAggregate (13)
      :     :  :                 +- * Project (12)
      :     :  :                    +- * SortMergeJoin Inner (11)
      :     :  :                       :- * Sort (8)
      :     :  :                       :  +- Exchange (7)
      :     :  :                       :     +- * Project (6)
      :     :  :                       :        +- * BroadcastHashJoin Inner BuildRight (5)
      :     :  :                       :           :- * Filter (3)
      :     :  :                       :           :  +- * ColumnarToRow (2)
      :     :  :                       :           :     +- Scan parquet spark_catalog.default.store_sales (1)
      :     :  :                       :           +- ReusedExchange (4)
      :     :  :                       +- * Sort (10)
      :     :  :                          +- ReusedExchange (9)
      :     :  +- * Sort (35)
      :     :     +- Exchange (34)
      :     :        +- * HashAggregate (33)
      :     :           +- Exchange (32)
      :     :              +- * HashAggregate (31)
      :     :                 +- * Project (30)
      :     :                    +- * SortMergeJoin Inner (29)
      :     :                       :- * Sort (26)
      :     :                       :  +- Exchange (25)
      :     :                       :     +- * Project (24)
      :     :                       :        +- * BroadcastHashJoin Inner BuildRight (23)
      :     :                       :           :- * Filter (21)
      :     :                       :           :  +- * ColumnarToRow (20)
      :     :                       :           :     +- Scan parquet spark_catalog.default.store_sales (19)
      :     :                       :           +- ReusedExchange (22)
      :     :                       +- * Sort (28)
      :     :                          +- ReusedExchange (27)
      :     +- * Sort (54)
      :        +- Exchange (53)
      :           +- * Filter (52)
      :              +- * HashAggregate (51)
      :                 +- Exchange (50)
      :                    +- * HashAggregate (49)
      :                       +- * Project (48)
      :                          +- * SortMergeJoin Inner (47)
      :                             :- * Sort (44)
      :                             :  +- Exchange (43)
      :                             :     +- * Project (42)
      :                             :        +- * BroadcastHashJoin Inner BuildRight (41)
      :                             :           :- * Filter (39)
      :                             :           :  +- * ColumnarToRow (38)
      :                             :           :     +- Scan parquet spark_catalog.default.web_sales (37)
      :                             :           +- ReusedExchange (40)
      :                             +- * Sort (46)
      :                                +- ReusedExchange (45)
      +- * Sort (73)
         +- Exchange (72)
            +- * HashAggregate (71)
               +- Exchange (70)
                  +- * HashAggregate (69)
                     +- * Project (68)
                        +- * SortMergeJoin Inner (67)
                           :- * Sort (64)
                           :  +- Exchange (63)
                           :     +- * Project (62)
                           :        +- * BroadcastHashJoin Inner BuildRight (61)
                           :           :- * Filter (59)
                           :           :  +- * ColumnarToRow (58)
                           :           :     +- Scan parquet spark_catalog.default.web_sales (57)
                           :           +- ReusedExchange (60)
                           +- * Sort (66)
                              +- ReusedExchange (65)


(1) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_customer_sk#1, ss_net_paid#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [3]: [ss_customer_sk#1, ss_net_paid#2, ss_sold_date_sk#3]

(3) Filter [codegen id : 2]
Input [3]: [ss_customer_sk#1, ss_net_paid#2, ss_sold_date_sk#3]
Condition : (isnotnull(ss_customer_sk#1) AND might_contain(Subquery scalar-subquery#5, [id=#6], xxhash64(ss_customer_sk#1, 42), false))

(4) ReusedExchange [Reuses operator id: 87]
Output [2]: [d_date_sk#7, d_year#8]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#7]
Join type: Inner
Join condition: None

(6) Project [codegen id : 2]
Output [3]: [ss_customer_sk#1, ss_net_paid#2, d_year#8]
Input [5]: [ss_customer_sk#1, ss_net_paid#2, ss_sold_date_sk#3, d_date_sk#7, d_year#8]

(7) Exchange
Input [3]: [ss_customer_sk#1, ss_net_paid#2, d_year#8]
Arguments: hashpartitioning(ss_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(8) Sort [codegen id : 3]
Input [3]: [ss_customer_sk#1, ss_net_paid#2, d_year#8]
Arguments: [ss_customer_sk#1 ASC NULLS FIRST], false, 0

(9) ReusedExchange [Reuses operator id: 80]
Output [4]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12]

(10) Sort [codegen id : 5]
Input [4]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12]
Arguments: [c_customer_sk#9 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#9]
Join type: Inner
Join condition: None

(12) Project [codegen id : 6]
Output [5]: [c_customer_id#10, c_first_name#11, c_last_name#12, ss_net_paid#2, d_year#8]
Input [7]: [ss_customer_sk#1, ss_net_paid#2, d_year#8, c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12]

(13) HashAggregate [codegen id : 6]
Input [5]: [c_customer_id#10, c_first_name#11, c_last_name#12, ss_net_paid#2, d_year#8]
Keys [4]: [c_customer_id#10, c_first_name#11, c_last_name#12, d_year#8]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#2))]
Aggregate Attributes [1]: [sum#13]
Results [5]: [c_customer_id#10, c_first_name#11, c_last_name#12, d_year#8, sum#14]

(14) Exchange
Input [5]: [c_customer_id#10, c_first_name#11, c_last_name#12, d_year#8, sum#14]
Arguments: hashpartitioning(c_customer_id#10, c_first_name#11, c_last_name#12, d_year#8, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(15) HashAggregate [codegen id : 7]
Input [5]: [c_customer_id#10, c_first_name#11, c_last_name#12, d_year#8, sum#14]
Keys [4]: [c_customer_id#10, c_first_name#11, c_last_name#12, d_year#8]
Functions [1]: [sum(UnscaledValue(ss_net_paid#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#2))#15]
Results [2]: [c_customer_id#10 AS customer_id#16, MakeDecimal(sum(UnscaledValue(ss_net_paid#2))#15,17,2) AS year_total#17]

(16) Filter [codegen id : 7]
Input [2]: [customer_id#16, year_total#17]
Condition : (isnotnull(year_total#17) AND (year_total#17 > 0.00))

(17) Exchange
Input [2]: [customer_id#16, year_total#17]
Arguments: hashpartitioning(customer_id#16, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(18) Sort [codegen id : 8]
Input [2]: [customer_id#16, year_total#17]
Arguments: [customer_id#16 ASC NULLS FIRST], false, 0

(19) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_customer_sk#18, ss_net_paid#19, ss_sold_date_sk#20]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#20), dynamicpruningexpression(ss_sold_date_sk#20 IN dynamicpruning#21)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>

(20) ColumnarToRow [codegen id : 10]
Input [3]: [ss_customer_sk#18, ss_net_paid#19, ss_sold_date_sk#20]

(21) Filter [codegen id : 10]
Input [3]: [ss_customer_sk#18, ss_net_paid#19, ss_sold_date_sk#20]
Condition : (isnotnull(ss_customer_sk#18) AND might_contain(Subquery scalar-subquery#22, [id=#23], xxhash64(ss_customer_sk#18, 42), false))

(22) ReusedExchange [Reuses operator id: 98]
Output [2]: [d_date_sk#24, d_year#25]

(23) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#20]
Right keys [1]: [d_date_sk#24]
Join type: Inner
Join condition: None

(24) Project [codegen id : 10]
Output [3]: [ss_customer_sk#18, ss_net_paid#19, d_year#25]
Input [5]: [ss_customer_sk#18, ss_net_paid#19, ss_sold_date_sk#20, d_date_sk#24, d_year#25]

(25) Exchange
Input [3]: [ss_customer_sk#18, ss_net_paid#19, d_year#25]
Arguments: hashpartitioning(ss_customer_sk#18, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(26) Sort [codegen id : 11]
Input [3]: [ss_customer_sk#18, ss_net_paid#19, d_year#25]
Arguments: [ss_customer_sk#18 ASC NULLS FIRST], false, 0

(27) ReusedExchange [Reuses operator id: 80]
Output [4]: [c_customer_sk#26, c_customer_id#27, c_first_name#28, c_last_name#29]

(28) Sort [codegen id : 13]
Input [4]: [c_customer_sk#26, c_customer_id#27, c_first_name#28, c_last_name#29]
Arguments: [c_customer_sk#26 ASC NULLS FIRST], false, 0

(29) SortMergeJoin [codegen id : 14]
Left keys [1]: [ss_customer_sk#18]
Right keys [1]: [c_customer_sk#26]
Join type: Inner
Join condition: None

(30) Project [codegen id : 14]
Output [5]: [c_customer_id#27, c_first_name#28, c_last_name#29, ss_net_paid#19, d_year#25]
Input [7]: [ss_customer_sk#18, ss_net_paid#19, d_year#25, c_customer_sk#26, c_customer_id#27, c_first_name#28, c_last_name#29]

(31) HashAggregate [codegen id : 14]
Input [5]: [c_customer_id#27, c_first_name#28, c_last_name#29, ss_net_paid#19, d_year#25]
Keys [4]: [c_customer_id#27, c_first_name#28, c_last_name#29, d_year#25]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#19))]
Aggregate Attributes [1]: [sum#30]
Results [5]: [c_customer_id#27, c_first_name#28, c_last_name#29, d_year#25, sum#31]

(32) Exchange
Input [5]: [c_customer_id#27, c_first_name#28, c_last_name#29, d_year#25, sum#31]
Arguments: hashpartitioning(c_customer_id#27, c_first_name#28, c_last_name#29, d_year#25, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(33) HashAggregate [codegen id : 15]
Input [5]: [c_customer_id#27, c_first_name#28, c_last_name#29, d_year#25, sum#31]
Keys [4]: [c_customer_id#27, c_first_name#28, c_last_name#29, d_year#25]
Functions [1]: [sum(UnscaledValue(ss_net_paid#19))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#19))#15]
Results [4]: [c_customer_id#27 AS customer_id#32, c_first_name#28 AS customer_first_name#33, c_last_name#29 AS customer_last_name#34, MakeDecimal(sum(UnscaledValue(ss_net_paid#19))#15,17,2) AS year_total#35]

(34) Exchange
Input [4]: [customer_id#32, customer_first_name#33, customer_last_name#34, year_total#35]
Arguments: hashpartitioning(customer_id#32, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(35) Sort [codegen id : 16]
Input [4]: [customer_id#32, customer_first_name#33, customer_last_name#34, year_total#35]
Arguments: [customer_id#32 ASC NULLS FIRST], false, 0

(36) SortMergeJoin [codegen id : 17]
Left keys [1]: [customer_id#16]
Right keys [1]: [customer_id#32]
Join type: Inner
Join condition: None

(37) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_bill_customer_sk#36, ws_net_paid#37, ws_sold_date_sk#38]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#38), dynamicpruningexpression(ws_sold_date_sk#38 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>

(38) ColumnarToRow [codegen id : 19]
Input [3]: [ws_bill_customer_sk#36, ws_net_paid#37, ws_sold_date_sk#38]

(39) Filter [codegen id : 19]
Input [3]: [ws_bill_customer_sk#36, ws_net_paid#37, ws_sold_date_sk#38]
Condition : (isnotnull(ws_bill_customer_sk#36) AND might_contain(ReusedSubquery Subquery scalar-subquery#22, [id=#23], xxhash64(ws_bill_customer_sk#36, 42), false))

(40) ReusedExchange [Reuses operator id: 87]
Output [2]: [d_date_sk#39, d_year#40]

(41) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [ws_sold_date_sk#38]
Right keys [1]: [d_date_sk#39]
Join type: Inner
Join condition: None

(42) Project [codegen id : 19]
Output [3]: [ws_bill_customer_sk#36, ws_net_paid#37, d_year#40]
Input [5]: [ws_bill_customer_sk#36, ws_net_paid#37, ws_sold_date_sk#38, d_date_sk#39, d_year#40]

(43) Exchange
Input [3]: [ws_bill_customer_sk#36, ws_net_paid#37, d_year#40]
Arguments: hashpartitioning(ws_bill_customer_sk#36, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(44) Sort [codegen id : 20]
Input [3]: [ws_bill_customer_sk#36, ws_net_paid#37, d_year#40]
Arguments: [ws_bill_customer_sk#36 ASC NULLS FIRST], false, 0

(45) ReusedExchange [Reuses operator id: 80]
Output [4]: [c_customer_sk#41, c_customer_id#42, c_first_name#43, c_last_name#44]

(46) Sort [codegen id : 22]
Input [4]: [c_customer_sk#41, c_customer_id#42, c_first_name#43, c_last_name#44]
Arguments: [c_customer_sk#41 ASC NULLS FIRST], false, 0

(47) SortMergeJoin [codegen id : 23]
Left keys [1]: [ws_bill_customer_sk#36]
Right keys [1]: [c_customer_sk#41]
Join type: Inner
Join condition: None

(48) Project [codegen id : 23]
Output [5]: [c_customer_id#42, c_first_name#43, c_last_name#44, ws_net_paid#37, d_year#40]
Input [7]: [ws_bill_customer_sk#36, ws_net_paid#37, d_year#40, c_customer_sk#41, c_customer_id#42, c_first_name#43, c_last_name#44]

(49) HashAggregate [codegen id : 23]
Input [5]: [c_customer_id#42, c_first_name#43, c_last_name#44, ws_net_paid#37, d_year#40]
Keys [4]: [c_customer_id#42, c_first_name#43, c_last_name#44, d_year#40]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#37))]
Aggregate Attributes [1]: [sum#45]
Results [5]: [c_customer_id#42, c_first_name#43, c_last_name#44, d_year#40, sum#46]

(50) Exchange
Input [5]: [c_customer_id#42, c_first_name#43, c_last_name#44, d_year#40, sum#46]
Arguments: hashpartitioning(c_customer_id#42, c_first_name#43, c_last_name#44, d_year#40, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(51) HashAggregate [codegen id : 24]
Input [5]: [c_customer_id#42, c_first_name#43, c_last_name#44, d_year#40, sum#46]
Keys [4]: [c_customer_id#42, c_first_name#43, c_last_name#44, d_year#40]
Functions [1]: [sum(UnscaledValue(ws_net_paid#37))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#37))#47]
Results [2]: [c_customer_id#42 AS customer_id#48, MakeDecimal(sum(UnscaledValue(ws_net_paid#37))#47,17,2) AS year_total#49]

(52) Filter [codegen id : 24]
Input [2]: [customer_id#48, year_total#49]
Condition : (isnotnull(year_total#49) AND (year_total#49 > 0.00))

(53) Exchange
Input [2]: [customer_id#48, year_total#49]
Arguments: hashpartitioning(customer_id#48, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(54) Sort [codegen id : 25]
Input [2]: [customer_id#48, year_total#49]
Arguments: [customer_id#48 ASC NULLS FIRST], false, 0

(55) SortMergeJoin [codegen id : 26]
Left keys [1]: [customer_id#16]
Right keys [1]: [customer_id#48]
Join type: Inner
Join condition: None

(56) Project [codegen id : 26]
Output [7]: [customer_id#16, year_total#17, customer_id#32, customer_first_name#33, customer_last_name#34, year_total#35, year_total#49]
Input [8]: [customer_id#16, year_total#17, customer_id#32, customer_first_name#33, customer_last_name#34, year_total#35, customer_id#48, year_total#49]

(57) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_bill_customer_sk#50, ws_net_paid#51, ws_sold_date_sk#52]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#52), dynamicpruningexpression(ws_sold_date_sk#52 IN dynamicpruning#21)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>

(58) ColumnarToRow [codegen id : 28]
Input [3]: [ws_bill_customer_sk#50, ws_net_paid#51, ws_sold_date_sk#52]

(59) Filter [codegen id : 28]
Input [3]: [ws_bill_customer_sk#50, ws_net_paid#51, ws_sold_date_sk#52]
Condition : (isnotnull(ws_bill_customer_sk#50) AND might_contain(ReusedSubquery Subquery scalar-subquery#22, [id=#23], xxhash64(ws_bill_customer_sk#50, 42), false))

(60) ReusedExchange [Reuses operator id: 98]
Output [2]: [d_date_sk#53, d_year#54]

(61) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [ws_sold_date_sk#52]
Right keys [1]: [d_date_sk#53]
Join type: Inner
Join condition: None

(62) Project [codegen id : 28]
Output [3]: [ws_bill_customer_sk#50, ws_net_paid#51, d_year#54]
Input [5]: [ws_bill_customer_sk#50, ws_net_paid#51, ws_sold_date_sk#52, d_date_sk#53, d_year#54]

(63) Exchange
Input [3]: [ws_bill_customer_sk#50, ws_net_paid#51, d_year#54]
Arguments: hashpartitioning(ws_bill_customer_sk#50, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(64) Sort [codegen id : 29]
Input [3]: [ws_bill_customer_sk#50, ws_net_paid#51, d_year#54]
Arguments: [ws_bill_customer_sk#50 ASC NULLS FIRST], false, 0

(65) ReusedExchange [Reuses operator id: 80]
Output [4]: [c_customer_sk#55, c_customer_id#56, c_first_name#57, c_last_name#58]

(66) Sort [codegen id : 31]
Input [4]: [c_customer_sk#55, c_customer_id#56, c_first_name#57, c_last_name#58]
Arguments: [c_customer_sk#55 ASC NULLS FIRST], false, 0

(67) SortMergeJoin [codegen id : 32]
Left keys [1]: [ws_bill_customer_sk#50]
Right keys [1]: [c_customer_sk#55]
Join type: Inner
Join condition: None

(68) Project [codegen id : 32]
Output [5]: [c_customer_id#56, c_first_name#57, c_last_name#58, ws_net_paid#51, d_year#54]
Input [7]: [ws_bill_customer_sk#50, ws_net_paid#51, d_year#54, c_customer_sk#55, c_customer_id#56, c_first_name#57, c_last_name#58]

(69) HashAggregate [codegen id : 32]
Input [5]: [c_customer_id#56, c_first_name#57, c_last_name#58, ws_net_paid#51, d_year#54]
Keys [4]: [c_customer_id#56, c_first_name#57, c_last_name#58, d_year#54]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#51))]
Aggregate Attributes [1]: [sum#59]
Results [5]: [c_customer_id#56, c_first_name#57, c_last_name#58, d_year#54, sum#60]

(70) Exchange
Input [5]: [c_customer_id#56, c_first_name#57, c_last_name#58, d_year#54, sum#60]
Arguments: hashpartitioning(c_customer_id#56, c_first_name#57, c_last_name#58, d_year#54, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(71) HashAggregate [codegen id : 33]
Input [5]: [c_customer_id#56, c_first_name#57, c_last_name#58, d_year#54, sum#60]
Keys [4]: [c_customer_id#56, c_first_name#57, c_last_name#58, d_year#54]
Functions [1]: [sum(UnscaledValue(ws_net_paid#51))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#51))#47]
Results [2]: [c_customer_id#56 AS customer_id#61, MakeDecimal(sum(UnscaledValue(ws_net_paid#51))#47,17,2) AS year_total#62]

(72) Exchange
Input [2]: [customer_id#61, year_total#62]
Arguments: hashpartitioning(customer_id#61, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(73) Sort [codegen id : 34]
Input [2]: [customer_id#61, year_total#62]
Arguments: [customer_id#61 ASC NULLS FIRST], false, 0

(74) SortMergeJoin [codegen id : 35]
Left keys [1]: [customer_id#16]
Right keys [1]: [customer_id#61]
Join type: Inner
Join condition: (CASE WHEN (year_total#49 > 0.00) THEN (year_total#62 / year_total#49) END > CASE WHEN (year_total#17 > 0.00) THEN (year_total#35 / year_total#17) END)

(75) Project [codegen id : 35]
Output [3]: [customer_id#32, customer_first_name#33, customer_last_name#34]
Input [9]: [customer_id#16, year_total#17, customer_id#32, customer_first_name#33, customer_last_name#34, year_total#35, year_total#49, customer_id#61, year_total#62]

(76) TakeOrderedAndProject
Input [3]: [customer_id#32, customer_first_name#33, customer_last_name#34]
Arguments: 100, [customer_first_name#33 ASC NULLS FIRST, customer_id#32 ASC NULLS FIRST, customer_last_name#34 ASC NULLS FIRST], [customer_id#32, customer_first_name#33, customer_last_name#34]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#5, [id=#6]
ObjectHashAggregate (83)
+- Exchange (82)
   +- ObjectHashAggregate (81)
      +- Exchange (80)
         +- * Filter (79)
            +- * ColumnarToRow (78)
               +- Scan parquet spark_catalog.default.customer (77)


(77) Scan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(78) ColumnarToRow [codegen id : 1]
Input [4]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12]

(79) Filter [codegen id : 1]
Input [4]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12]
Condition : (isnotnull(c_customer_sk#9) AND isnotnull(c_customer_id#10))

(80) Exchange
Input [4]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12]
Arguments: hashpartitioning(c_customer_sk#9, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(81) ObjectHashAggregate
Input [4]: [c_customer_sk#9, c_customer_id#10, c_first_name#11, c_last_name#12]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(c_customer_sk#9, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [buf#63]
Results [1]: [buf#64]

(82) Exchange
Input [1]: [buf#64]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=14]

(83) ObjectHashAggregate
Input [1]: [buf#64]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(c_customer_sk#9, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(c_customer_sk#9, 42), 2000000, 16000000, 0, 0)#65]
Results [1]: [bloom_filter_agg(xxhash64(c_customer_sk#9, 42), 2000000, 16000000, 0, 0)#65 AS bloomFilter#66]

Subquery:2 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (87)
+- * Filter (86)
   +- * ColumnarToRow (85)
      +- Scan parquet spark_catalog.default.date_dim (84)


(84) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#7, d_year#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(85) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#7, d_year#8]

(86) Filter [codegen id : 1]
Input [2]: [d_date_sk#7, d_year#8]
Condition : (((isnotnull(d_year#8) AND (d_year#8 = 2001)) AND d_year#8 IN (2001,2002)) AND isnotnull(d_date_sk#7))

(87) BroadcastExchange
Input [2]: [d_date_sk#7, d_year#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=15]

Subquery:3 Hosting operator id = 21 Hosting Expression = Subquery scalar-subquery#22, [id=#23]
ObjectHashAggregate (94)
+- Exchange (93)
   +- ObjectHashAggregate (92)
      +- Exchange (91)
         +- * Filter (90)
            +- * ColumnarToRow (89)
               +- Scan parquet spark_catalog.default.customer (88)


(88) Scan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#26, c_customer_id#27, c_first_name#28, c_last_name#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(89) ColumnarToRow [codegen id : 1]
Input [4]: [c_customer_sk#26, c_customer_id#27, c_first_name#28, c_last_name#29]

(90) Filter [codegen id : 1]
Input [4]: [c_customer_sk#26, c_customer_id#27, c_first_name#28, c_last_name#29]
Condition : (isnotnull(c_customer_sk#26) AND isnotnull(c_customer_id#27))

(91) Exchange
Input [4]: [c_customer_sk#26, c_customer_id#27, c_first_name#28, c_last_name#29]
Arguments: hashpartitioning(c_customer_sk#9, 5), ENSURE_REQUIREMENTS, [plan_id=16]

(92) ObjectHashAggregate
Input [4]: [c_customer_sk#26, c_customer_id#27, c_first_name#28, c_last_name#29]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(c_customer_sk#26, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [buf#67]
Results [1]: [buf#68]

(93) Exchange
Input [1]: [buf#68]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=17]

(94) ObjectHashAggregate
Input [1]: [buf#68]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(c_customer_sk#26, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(c_customer_sk#26, 42), 2000000, 16000000, 0, 0)#69]
Results [1]: [bloom_filter_agg(xxhash64(c_customer_sk#26, 42), 2000000, 16000000, 0, 0)#69 AS bloomFilter#70]

Subquery:4 Hosting operator id = 19 Hosting Expression = ss_sold_date_sk#20 IN dynamicpruning#21
BroadcastExchange (98)
+- * Filter (97)
   +- * ColumnarToRow (96)
      +- Scan parquet spark_catalog.default.date_dim (95)


(95) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#24, d_year#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(96) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#24, d_year#25]

(97) Filter [codegen id : 1]
Input [2]: [d_date_sk#24, d_year#25]
Condition : (((isnotnull(d_year#25) AND (d_year#25 = 2002)) AND d_year#25 IN (2001,2002)) AND isnotnull(d_date_sk#24))

(98) BroadcastExchange
Input [2]: [d_date_sk#24, d_year#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=18]

Subquery:5 Hosting operator id = 39 Hosting Expression = ReusedSubquery Subquery scalar-subquery#22, [id=#23]

Subquery:6 Hosting operator id = 37 Hosting Expression = ws_sold_date_sk#38 IN dynamicpruning#4

Subquery:7 Hosting operator id = 59 Hosting Expression = ReusedSubquery Subquery scalar-subquery#22, [id=#23]

Subquery:8 Hosting operator id = 57 Hosting Expression = ws_sold_date_sk#52 IN dynamicpruning#21


