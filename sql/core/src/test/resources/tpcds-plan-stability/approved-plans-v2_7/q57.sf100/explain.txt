== Physical Plan ==
TakeOrderedAndProject (60)
+- * Project (59)
   +- * SortMergeJoin Inner (58)
      :- * Project (50)
      :  +- * SortMergeJoin Inner (49)
      :     :- * Sort (39)
      :     :  +- Exchange (38)
      :     :     +- * Filter (37)
      :     :        +- Window (36)
      :     :           +- * Sort (35)
      :     :              +- Exchange (34)
      :     :                 +- * Project (33)
      :     :                    +- Window (32)
      :     :                       +- * Sort (31)
      :     :                          +- Exchange (30)
      :     :                             +- * HashAggregate (29)
      :     :                                +- Exchange (28)
      :     :                                   +- * HashAggregate (27)
      :     :                                      +- * Project (26)
      :     :                                         +- * SortMergeJoin Inner (25)
      :     :                                            :- * Sort (18)
      :     :                                            :  +- Exchange (17)
      :     :                                            :     +- * Project (16)
      :     :                                            :        +- * BroadcastHashJoin Inner BuildRight (15)
      :     :                                            :           :- * Project (9)
      :     :                                            :           :  +- * BroadcastHashJoin Inner BuildRight (8)
      :     :                                            :           :     :- * Filter (3)
      :     :                                            :           :     :  +- * ColumnarToRow (2)
      :     :                                            :           :     :     +- Scan parquet default.catalog_sales (1)
      :     :                                            :           :     +- BroadcastExchange (7)
      :     :                                            :           :        +- * Filter (6)
      :     :                                            :           :           +- * ColumnarToRow (5)
      :     :                                            :           :              +- Scan parquet default.date_dim (4)
      :     :                                            :           +- BroadcastExchange (14)
      :     :                                            :              +- * Project (13)
      :     :                                            :                 +- * Filter (12)
      :     :                                            :                    +- * ColumnarToRow (11)
      :     :                                            :                       +- Scan parquet default.call_center (10)
      :     :                                            +- * Sort (24)
      :     :                                               +- Exchange (23)
      :     :                                                  +- * Project (22)
      :     :                                                     +- * Filter (21)
      :     :                                                        +- * ColumnarToRow (20)
      :     :                                                           +- Scan parquet default.item (19)
      :     +- * Sort (48)
      :        +- Exchange (47)
      :           +- * Project (46)
      :              +- * Filter (45)
      :                 +- Window (44)
      :                    +- * Sort (43)
      :                       +- Exchange (42)
      :                          +- * HashAggregate (41)
      :                             +- ReusedExchange (40)
      +- * Sort (57)
         +- Exchange (56)
            +- * Project (55)
               +- * Filter (54)
                  +- Window (53)
                     +- * Sort (52)
                        +- ReusedExchange (51)


(1) Scan parquet default.catalog_sales
Output [4]: [cs_sold_date_sk#1, cs_call_center_sk#2, cs_item_sk#3, cs_sales_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_call_center_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_call_center_sk:int,cs_item_sk:int,cs_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [4]: [cs_sold_date_sk#1, cs_call_center_sk#2, cs_item_sk#3, cs_sales_price#4]

(3) Filter [codegen id : 3]
Input [4]: [cs_sold_date_sk#1, cs_call_center_sk#2, cs_item_sk#3, cs_sales_price#4]
Condition : ((isnotnull(cs_item_sk#3) AND isnotnull(cs_sold_date_sk#1)) AND isnotnull(cs_call_center_sk#2))

(4) Scan parquet default.date_dim
Output [3]: [d_date_sk#5, d_year#6, d_moy#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [Or(Or(EqualTo(d_year,1999),And(EqualTo(d_year,1998),EqualTo(d_moy,12))),And(EqualTo(d_year,2000),EqualTo(d_moy,1))), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#5, d_year#6, d_moy#7]

(6) Filter [codegen id : 1]
Input [3]: [d_date_sk#5, d_year#6, d_moy#7]
Condition : ((((d_year#6 = 1999) OR ((d_year#6 = 1998) AND (d_moy#7 = 12))) OR ((d_year#6 = 2000) AND (d_moy#7 = 1))) AND isnotnull(d_date_sk#5))

(7) BroadcastExchange
Input [3]: [d_date_sk#5, d_year#6, d_moy#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#8]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#5]
Join condition: None

(9) Project [codegen id : 3]
Output [5]: [cs_call_center_sk#2, cs_item_sk#3, cs_sales_price#4, d_year#6, d_moy#7]
Input [7]: [cs_sold_date_sk#1, cs_call_center_sk#2, cs_item_sk#3, cs_sales_price#4, d_date_sk#5, d_year#6, d_moy#7]

(10) Scan parquet default.call_center
Output [2]: [cc_call_center_sk#9, cc_name#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/call_center]
PushedFilters: [IsNotNull(cc_call_center_sk)]
ReadSchema: struct<cc_call_center_sk:int,cc_name:string>

(11) ColumnarToRow [codegen id : 2]
Input [2]: [cc_call_center_sk#9, cc_name#10]

(12) Filter [codegen id : 2]
Input [2]: [cc_call_center_sk#9, cc_name#10]
Condition : (isnotnull(cc_call_center_sk#9) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, cc_name#10, 50, false, true)))

(13) Project [codegen id : 2]
Output [2]: [cc_call_center_sk#9, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, cc_name#10, 50, false, true) AS cc_name#11]
Input [2]: [cc_call_center_sk#9, cc_name#10]

(14) BroadcastExchange
Input [2]: [cc_call_center_sk#9, cc_name#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_call_center_sk#2]
Right keys [1]: [cc_call_center_sk#9]
Join condition: None

(16) Project [codegen id : 3]
Output [5]: [cs_item_sk#3, cs_sales_price#4, d_year#6, d_moy#7, cc_name#11]
Input [7]: [cs_call_center_sk#2, cs_item_sk#3, cs_sales_price#4, d_year#6, d_moy#7, cc_call_center_sk#9, cc_name#11]

(17) Exchange
Input [5]: [cs_item_sk#3, cs_sales_price#4, d_year#6, d_moy#7, cc_name#11]
Arguments: hashpartitioning(cs_item_sk#3, 5), ENSURE_REQUIREMENTS, [id=#13]

(18) Sort [codegen id : 4]
Input [5]: [cs_item_sk#3, cs_sales_price#4, d_year#6, d_moy#7, cc_name#11]
Arguments: [cs_item_sk#3 ASC NULLS FIRST], false, 0

(19) Scan parquet default.item
Output [3]: [i_item_sk#14, i_brand#15, i_category#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_category:string>

(20) ColumnarToRow [codegen id : 5]
Input [3]: [i_item_sk#14, i_brand#15, i_category#16]

(21) Filter [codegen id : 5]
Input [3]: [i_item_sk#14, i_brand#15, i_category#16]
Condition : ((isnotnull(i_item_sk#14) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#16, 50, false, true))) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_brand#15, 50, false, true)))

(22) Project [codegen id : 5]
Output [3]: [i_item_sk#14, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_brand#15, 50, false, true) AS i_brand#17, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#16, 50, false, true) AS i_category#18]
Input [3]: [i_item_sk#14, i_brand#15, i_category#16]

(23) Exchange
Input [3]: [i_item_sk#14, i_brand#17, i_category#18]
Arguments: hashpartitioning(i_item_sk#14, 5), ENSURE_REQUIREMENTS, [id=#19]

(24) Sort [codegen id : 6]
Input [3]: [i_item_sk#14, i_brand#17, i_category#18]
Arguments: [i_item_sk#14 ASC NULLS FIRST], false, 0

(25) SortMergeJoin [codegen id : 7]
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [i_item_sk#14]
Join condition: None

(26) Project [codegen id : 7]
Output [6]: [i_brand#17, i_category#18, cs_sales_price#4, d_year#6, d_moy#7, cc_name#11]
Input [8]: [cs_item_sk#3, cs_sales_price#4, d_year#6, d_moy#7, cc_name#11, i_item_sk#14, i_brand#17, i_category#18]

(27) HashAggregate [codegen id : 7]
Input [6]: [i_brand#17, i_category#18, cs_sales_price#4, d_year#6, d_moy#7, cc_name#11]
Keys [5]: [i_category#18, i_brand#17, cc_name#11, d_year#6, d_moy#7]
Functions [1]: [partial_sum(UnscaledValue(cs_sales_price#4))]
Aggregate Attributes [1]: [sum#20]
Results [6]: [i_category#18, i_brand#17, cc_name#11, d_year#6, d_moy#7, sum#21]

(28) Exchange
Input [6]: [i_category#18, i_brand#17, cc_name#11, d_year#6, d_moy#7, sum#21]
Arguments: hashpartitioning(i_category#18, i_brand#17, cc_name#11, d_year#6, d_moy#7, 5), ENSURE_REQUIREMENTS, [id=#22]

(29) HashAggregate [codegen id : 8]
Input [6]: [i_category#18, i_brand#17, cc_name#11, d_year#6, d_moy#7, sum#21]
Keys [5]: [i_category#18, i_brand#17, cc_name#11, d_year#6, d_moy#7]
Functions [1]: [sum(UnscaledValue(cs_sales_price#4))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_sales_price#4))#23]
Results [7]: [i_category#18, i_brand#17, cc_name#11, d_year#6, d_moy#7, MakeDecimal(sum(UnscaledValue(cs_sales_price#4))#23,17,2) AS sum_sales#24, MakeDecimal(sum(UnscaledValue(cs_sales_price#4))#23,17,2) AS _w0#25]

(30) Exchange
Input [7]: [i_category#18, i_brand#17, cc_name#11, d_year#6, d_moy#7, sum_sales#24, _w0#25]
Arguments: hashpartitioning(i_category#18, i_brand#17, cc_name#11, d_year#6, 5), ENSURE_REQUIREMENTS, [id=#26]

(31) Sort [codegen id : 9]
Input [7]: [i_category#18, i_brand#17, cc_name#11, d_year#6, d_moy#7, sum_sales#24, _w0#25]
Arguments: [i_category#18 ASC NULLS FIRST, i_brand#17 ASC NULLS FIRST, cc_name#11 ASC NULLS FIRST, d_year#6 ASC NULLS FIRST], false, 0

(32) Window
Input [7]: [i_category#18, i_brand#17, cc_name#11, d_year#6, d_moy#7, sum_sales#24, _w0#25]
Arguments: [avg(_w0#25) windowspecdefinition(i_category#18, i_brand#17, cc_name#11, d_year#6, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#27], [i_category#18, i_brand#17, cc_name#11, d_year#6]

(33) Project [codegen id : 10]
Output [7]: [i_category#18, i_brand#17, cc_name#11, d_year#6, d_moy#7, sum_sales#24, avg_monthly_sales#27]
Input [8]: [i_category#18, i_brand#17, cc_name#11, d_year#6, d_moy#7, sum_sales#24, _w0#25, avg_monthly_sales#27]

(34) Exchange
Input [7]: [i_category#18, i_brand#17, cc_name#11, d_year#6, d_moy#7, sum_sales#24, avg_monthly_sales#27]
Arguments: hashpartitioning(i_category#18, i_brand#17, cc_name#11, 5), ENSURE_REQUIREMENTS, [id=#28]

(35) Sort [codegen id : 11]
Input [7]: [i_category#18, i_brand#17, cc_name#11, d_year#6, d_moy#7, sum_sales#24, avg_monthly_sales#27]
Arguments: [i_category#18 ASC NULLS FIRST, i_brand#17 ASC NULLS FIRST, cc_name#11 ASC NULLS FIRST, d_year#6 ASC NULLS FIRST, d_moy#7 ASC NULLS FIRST], false, 0

(36) Window
Input [7]: [i_category#18, i_brand#17, cc_name#11, d_year#6, d_moy#7, sum_sales#24, avg_monthly_sales#27]
Arguments: [rank(d_year#6, d_moy#7) windowspecdefinition(i_category#18, i_brand#17, cc_name#11, d_year#6 ASC NULLS FIRST, d_moy#7 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#29], [i_category#18, i_brand#17, cc_name#11], [d_year#6 ASC NULLS FIRST, d_moy#7 ASC NULLS FIRST]

(37) Filter [codegen id : 12]
Input [8]: [i_category#18, i_brand#17, cc_name#11, d_year#6, d_moy#7, sum_sales#24, avg_monthly_sales#27, rn#29]
Condition : ((((((isnotnull(d_year#6) AND isnotnull(avg_monthly_sales#27)) AND (d_year#6 = 1999)) AND (avg_monthly_sales#27 > 0.000000)) AND (avg_monthly_sales#27 > 0.000000)) AND (CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#24 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#27 as decimal(22,6)))), DecimalType(22,6), true))) / promote_precision(cast(avg_monthly_sales#27 as decimal(22,6)))), DecimalType(38,16), true) > 0.1000000000000000)) AND isnotnull(rn#29))

(38) Exchange
Input [8]: [i_category#18, i_brand#17, cc_name#11, d_year#6, d_moy#7, sum_sales#24, avg_monthly_sales#27, rn#29]
Arguments: hashpartitioning(i_category#18, i_brand#17, cc_name#11, rn#29, 5), ENSURE_REQUIREMENTS, [id=#30]

(39) Sort [codegen id : 13]
Input [8]: [i_category#18, i_brand#17, cc_name#11, d_year#6, d_moy#7, sum_sales#24, avg_monthly_sales#27, rn#29]
Arguments: [i_category#18 ASC NULLS FIRST, i_brand#17 ASC NULLS FIRST, cc_name#11 ASC NULLS FIRST, rn#29 ASC NULLS FIRST], false, 0

(40) ReusedExchange [Reuses operator id: 28]
Output [6]: [i_category#31, i_brand#32, cc_name#33, d_year#34, d_moy#35, sum#36]

(41) HashAggregate [codegen id : 21]
Input [6]: [i_category#31, i_brand#32, cc_name#33, d_year#34, d_moy#35, sum#36]
Keys [5]: [i_category#31, i_brand#32, cc_name#33, d_year#34, d_moy#35]
Functions [1]: [sum(UnscaledValue(cs_sales_price#4))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_sales_price#4))#37]
Results [6]: [i_category#31, i_brand#32, cc_name#33, d_year#34, d_moy#35, MakeDecimal(sum(UnscaledValue(cs_sales_price#4))#37,17,2) AS sum_sales#38]

(42) Exchange
Input [6]: [i_category#31, i_brand#32, cc_name#33, d_year#34, d_moy#35, sum_sales#38]
Arguments: hashpartitioning(i_category#31, i_brand#32, cc_name#33, 5), ENSURE_REQUIREMENTS, [id=#39]

(43) Sort [codegen id : 22]
Input [6]: [i_category#31, i_brand#32, cc_name#33, d_year#34, d_moy#35, sum_sales#38]
Arguments: [i_category#31 ASC NULLS FIRST, i_brand#32 ASC NULLS FIRST, cc_name#33 ASC NULLS FIRST, d_year#34 ASC NULLS FIRST, d_moy#35 ASC NULLS FIRST], false, 0

(44) Window
Input [6]: [i_category#31, i_brand#32, cc_name#33, d_year#34, d_moy#35, sum_sales#38]
Arguments: [rank(d_year#34, d_moy#35) windowspecdefinition(i_category#31, i_brand#32, cc_name#33, d_year#34 ASC NULLS FIRST, d_moy#35 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#40], [i_category#31, i_brand#32, cc_name#33], [d_year#34 ASC NULLS FIRST, d_moy#35 ASC NULLS FIRST]

(45) Filter [codegen id : 23]
Input [7]: [i_category#31, i_brand#32, cc_name#33, d_year#34, d_moy#35, sum_sales#38, rn#40]
Condition : isnotnull(rn#40)

(46) Project [codegen id : 23]
Output [5]: [i_category#31, i_brand#32, cc_name#33, sum_sales#38, rn#40]
Input [7]: [i_category#31, i_brand#32, cc_name#33, d_year#34, d_moy#35, sum_sales#38, rn#40]

(47) Exchange
Input [5]: [i_category#31, i_brand#32, cc_name#33, sum_sales#38, rn#40]
Arguments: hashpartitioning(i_category#31, i_brand#32, cc_name#33, (rn#40 + 1), 5), ENSURE_REQUIREMENTS, [id=#41]

(48) Sort [codegen id : 24]
Input [5]: [i_category#31, i_brand#32, cc_name#33, sum_sales#38, rn#40]
Arguments: [i_category#31 ASC NULLS FIRST, i_brand#32 ASC NULLS FIRST, cc_name#33 ASC NULLS FIRST, (rn#40 + 1) ASC NULLS FIRST], false, 0

(49) SortMergeJoin [codegen id : 25]
Left keys [4]: [i_category#18, i_brand#17, cc_name#11, rn#29]
Right keys [4]: [i_category#31, i_brand#32, cc_name#33, (rn#40 + 1)]
Join condition: None

(50) Project [codegen id : 25]
Output [9]: [i_category#18, i_brand#17, cc_name#11, d_year#6, d_moy#7, sum_sales#24, avg_monthly_sales#27, rn#29, sum_sales#38]
Input [13]: [i_category#18, i_brand#17, cc_name#11, d_year#6, d_moy#7, sum_sales#24, avg_monthly_sales#27, rn#29, i_category#31, i_brand#32, cc_name#33, sum_sales#38, rn#40]

(51) ReusedExchange [Reuses operator id: 42]
Output [6]: [i_category#42, i_brand#43, cc_name#44, d_year#45, d_moy#46, sum_sales#47]

(52) Sort [codegen id : 34]
Input [6]: [i_category#42, i_brand#43, cc_name#44, d_year#45, d_moy#46, sum_sales#47]
Arguments: [i_category#42 ASC NULLS FIRST, i_brand#43 ASC NULLS FIRST, cc_name#44 ASC NULLS FIRST, d_year#45 ASC NULLS FIRST, d_moy#46 ASC NULLS FIRST], false, 0

(53) Window
Input [6]: [i_category#42, i_brand#43, cc_name#44, d_year#45, d_moy#46, sum_sales#47]
Arguments: [rank(d_year#45, d_moy#46) windowspecdefinition(i_category#42, i_brand#43, cc_name#44, d_year#45 ASC NULLS FIRST, d_moy#46 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#48], [i_category#42, i_brand#43, cc_name#44], [d_year#45 ASC NULLS FIRST, d_moy#46 ASC NULLS FIRST]

(54) Filter [codegen id : 35]
Input [7]: [i_category#42, i_brand#43, cc_name#44, d_year#45, d_moy#46, sum_sales#47, rn#48]
Condition : isnotnull(rn#48)

(55) Project [codegen id : 35]
Output [5]: [i_category#42, i_brand#43, cc_name#44, sum_sales#47, rn#48]
Input [7]: [i_category#42, i_brand#43, cc_name#44, d_year#45, d_moy#46, sum_sales#47, rn#48]

(56) Exchange
Input [5]: [i_category#42, i_brand#43, cc_name#44, sum_sales#47, rn#48]
Arguments: hashpartitioning(i_category#42, i_brand#43, cc_name#44, (rn#48 - 1), 5), ENSURE_REQUIREMENTS, [id=#49]

(57) Sort [codegen id : 36]
Input [5]: [i_category#42, i_brand#43, cc_name#44, sum_sales#47, rn#48]
Arguments: [i_category#42 ASC NULLS FIRST, i_brand#43 ASC NULLS FIRST, cc_name#44 ASC NULLS FIRST, (rn#48 - 1) ASC NULLS FIRST], false, 0

(58) SortMergeJoin [codegen id : 37]
Left keys [4]: [i_category#18, i_brand#17, cc_name#11, rn#29]
Right keys [4]: [i_category#42, i_brand#43, cc_name#44, (rn#48 - 1)]
Join condition: None

(59) Project [codegen id : 37]
Output [8]: [i_category#18, i_brand#17, d_year#6, d_moy#7, avg_monthly_sales#27, sum_sales#24, sum_sales#38 AS psum#50, sum_sales#47 AS nsum#51]
Input [14]: [i_category#18, i_brand#17, cc_name#11, d_year#6, d_moy#7, sum_sales#24, avg_monthly_sales#27, rn#29, sum_sales#38, i_category#42, i_brand#43, cc_name#44, sum_sales#47, rn#48]

(60) TakeOrderedAndProject
Input [8]: [i_category#18, i_brand#17, d_year#6, d_moy#7, avg_monthly_sales#27, sum_sales#24, psum#50, nsum#51]
Arguments: 100, [CheckOverflow((promote_precision(cast(sum_sales#24 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#27 as decimal(22,6)))), DecimalType(22,6), true) ASC NULLS FIRST, d_year#6 ASC NULLS FIRST], [i_category#18, i_brand#17, d_year#6, d_moy#7, avg_monthly_sales#27, sum_sales#24, psum#50, nsum#51]

