== Physical Plan ==
TakeOrderedAndProject (54)
+- * Project (53)
   +- * BroadcastHashJoin Inner BuildRight (52)
      :- * Project (45)
      :  +- * BroadcastHashJoin Inner BuildRight (44)
      :     :- * Filter (35)
      :     :  +- Window (34)
      :     :     +- * Sort (33)
      :     :        +- Exchange (32)
      :     :           +- * Project (31)
      :     :              +- Window (30)
      :     :                 +- * Sort (29)
      :     :                    +- Exchange (28)
      :     :                       +- * HashAggregate (27)
      :     :                          +- Exchange (26)
      :     :                             +- * HashAggregate (25)
      :     :                                +- * Project (24)
      :     :                                   +- * BroadcastHashJoin Inner BuildRight (23)
      :     :                                      :- * Project (18)
      :     :                                      :  +- * BroadcastHashJoin Inner BuildRight (17)
      :     :                                      :     :- * Project (12)
      :     :                                      :     :  +- * SortMergeJoin Inner (11)
      :     :                                      :     :     :- * Sort (5)
      :     :                                      :     :     :  +- Exchange (4)
      :     :                                      :     :     :     +- * Filter (3)
      :     :                                      :     :     :        +- * ColumnarToRow (2)
      :     :                                      :     :     :           +- Scan parquet default.item (1)
      :     :                                      :     :     +- * Sort (10)
      :     :                                      :     :        +- Exchange (9)
      :     :                                      :     :           +- * Filter (8)
      :     :                                      :     :              +- * ColumnarToRow (7)
      :     :                                      :     :                 +- Scan parquet default.catalog_sales (6)
      :     :                                      :     +- BroadcastExchange (16)
      :     :                                      :        +- * Filter (15)
      :     :                                      :           +- * ColumnarToRow (14)
      :     :                                      :              +- Scan parquet default.call_center (13)
      :     :                                      +- BroadcastExchange (22)
      :     :                                         +- * Filter (21)
      :     :                                            +- * ColumnarToRow (20)
      :     :                                               +- Scan parquet default.date_dim (19)
      :     +- BroadcastExchange (43)
      :        +- * Project (42)
      :           +- * Filter (41)
      :              +- Window (40)
      :                 +- * Sort (39)
      :                    +- Exchange (38)
      :                       +- * HashAggregate (37)
      :                          +- ReusedExchange (36)
      +- BroadcastExchange (51)
         +- * Project (50)
            +- * Filter (49)
               +- Window (48)
                  +- * Sort (47)
                     +- ReusedExchange (46)


(1) Scan parquet default.item
Output [3]: [i_item_sk#1, i_brand#2, i_category#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_category), IsNotNull(i_brand)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_category:string>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [i_item_sk#1, i_brand#2, i_category#3]

(3) Filter [codegen id : 1]
Input [3]: [i_item_sk#1, i_brand#2, i_category#3]
Condition : ((isnotnull(i_item_sk#1) AND isnotnull(i_category#3)) AND isnotnull(i_brand#2))

(4) Exchange
Input [3]: [i_item_sk#1, i_brand#2, i_category#3]
Arguments: hashpartitioning(i_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#4]

(5) Sort [codegen id : 2]
Input [3]: [i_item_sk#1, i_brand#2, i_category#3]
Arguments: [i_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.catalog_sales
Output [4]: [cs_sold_date_sk#5, cs_call_center_sk#6, cs_item_sk#7, cs_sales_price#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_call_center_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_call_center_sk:int,cs_item_sk:int,cs_sales_price:decimal(7,2)>

(7) ColumnarToRow [codegen id : 3]
Input [4]: [cs_sold_date_sk#5, cs_call_center_sk#6, cs_item_sk#7, cs_sales_price#8]

(8) Filter [codegen id : 3]
Input [4]: [cs_sold_date_sk#5, cs_call_center_sk#6, cs_item_sk#7, cs_sales_price#8]
Condition : ((isnotnull(cs_item_sk#7) AND isnotnull(cs_sold_date_sk#5)) AND isnotnull(cs_call_center_sk#6))

(9) Exchange
Input [4]: [cs_sold_date_sk#5, cs_call_center_sk#6, cs_item_sk#7, cs_sales_price#8]
Arguments: hashpartitioning(cs_item_sk#7, 5), ENSURE_REQUIREMENTS, [id=#9]

(10) Sort [codegen id : 4]
Input [4]: [cs_sold_date_sk#5, cs_call_center_sk#6, cs_item_sk#7, cs_sales_price#8]
Arguments: [cs_item_sk#7 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 7]
Left keys [1]: [i_item_sk#1]
Right keys [1]: [cs_item_sk#7]
Join condition: None

(12) Project [codegen id : 7]
Output [5]: [i_brand#2, i_category#3, cs_sold_date_sk#5, cs_call_center_sk#6, cs_sales_price#8]
Input [7]: [i_item_sk#1, i_brand#2, i_category#3, cs_sold_date_sk#5, cs_call_center_sk#6, cs_item_sk#7, cs_sales_price#8]

(13) Scan parquet default.call_center
Output [2]: [cc_call_center_sk#10, cc_name#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/call_center]
PushedFilters: [IsNotNull(cc_call_center_sk), IsNotNull(cc_name)]
ReadSchema: struct<cc_call_center_sk:int,cc_name:string>

(14) ColumnarToRow [codegen id : 5]
Input [2]: [cc_call_center_sk#10, cc_name#11]

(15) Filter [codegen id : 5]
Input [2]: [cc_call_center_sk#10, cc_name#11]
Condition : (isnotnull(cc_call_center_sk#10) AND isnotnull(cc_name#11))

(16) BroadcastExchange
Input [2]: [cc_call_center_sk#10, cc_name#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#12]

(17) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cs_call_center_sk#6]
Right keys [1]: [cc_call_center_sk#10]
Join condition: None

(18) Project [codegen id : 7]
Output [5]: [i_brand#2, i_category#3, cs_sold_date_sk#5, cs_sales_price#8, cc_name#11]
Input [7]: [i_brand#2, i_category#3, cs_sold_date_sk#5, cs_call_center_sk#6, cs_sales_price#8, cc_call_center_sk#10, cc_name#11]

(19) Scan parquet default.date_dim
Output [3]: [d_date_sk#13, d_year#14, d_moy#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [Or(Or(EqualTo(d_year,1999),And(EqualTo(d_year,1998),EqualTo(d_moy,12))),And(EqualTo(d_year,2000),EqualTo(d_moy,1))), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(20) ColumnarToRow [codegen id : 6]
Input [3]: [d_date_sk#13, d_year#14, d_moy#15]

(21) Filter [codegen id : 6]
Input [3]: [d_date_sk#13, d_year#14, d_moy#15]
Condition : ((((d_year#14 = 1999) OR ((d_year#14 = 1998) AND (d_moy#15 = 12))) OR ((d_year#14 = 2000) AND (d_moy#15 = 1))) AND isnotnull(d_date_sk#13))

(22) BroadcastExchange
Input [3]: [d_date_sk#13, d_year#14, d_moy#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#16]

(23) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#13]
Join condition: None

(24) Project [codegen id : 7]
Output [6]: [i_brand#2, i_category#3, cs_sales_price#8, d_year#14, d_moy#15, cc_name#11]
Input [8]: [i_brand#2, i_category#3, cs_sold_date_sk#5, cs_sales_price#8, cc_name#11, d_date_sk#13, d_year#14, d_moy#15]

(25) HashAggregate [codegen id : 7]
Input [6]: [i_brand#2, i_category#3, cs_sales_price#8, d_year#14, d_moy#15, cc_name#11]
Keys [5]: [i_category#3, i_brand#2, cc_name#11, d_year#14, d_moy#15]
Functions [1]: [partial_sum(UnscaledValue(cs_sales_price#8))]
Aggregate Attributes [1]: [sum#17]
Results [6]: [i_category#3, i_brand#2, cc_name#11, d_year#14, d_moy#15, sum#18]

(26) Exchange
Input [6]: [i_category#3, i_brand#2, cc_name#11, d_year#14, d_moy#15, sum#18]
Arguments: hashpartitioning(i_category#3, i_brand#2, cc_name#11, d_year#14, d_moy#15, 5), ENSURE_REQUIREMENTS, [id=#19]

(27) HashAggregate [codegen id : 8]
Input [6]: [i_category#3, i_brand#2, cc_name#11, d_year#14, d_moy#15, sum#18]
Keys [5]: [i_category#3, i_brand#2, cc_name#11, d_year#14, d_moy#15]
Functions [1]: [sum(UnscaledValue(cs_sales_price#8))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_sales_price#8))#20]
Results [7]: [i_category#3, i_brand#2, cc_name#11, d_year#14, d_moy#15, MakeDecimal(sum(UnscaledValue(cs_sales_price#8))#20,17,2) AS sum_sales#21, MakeDecimal(sum(UnscaledValue(cs_sales_price#8))#20,17,2) AS _w0#22]

(28) Exchange
Input [7]: [i_category#3, i_brand#2, cc_name#11, d_year#14, d_moy#15, sum_sales#21, _w0#22]
Arguments: hashpartitioning(i_category#3, i_brand#2, cc_name#11, d_year#14, 5), ENSURE_REQUIREMENTS, [id=#23]

(29) Sort [codegen id : 9]
Input [7]: [i_category#3, i_brand#2, cc_name#11, d_year#14, d_moy#15, sum_sales#21, _w0#22]
Arguments: [i_category#3 ASC NULLS FIRST, i_brand#2 ASC NULLS FIRST, cc_name#11 ASC NULLS FIRST, d_year#14 ASC NULLS FIRST], false, 0

(30) Window
Input [7]: [i_category#3, i_brand#2, cc_name#11, d_year#14, d_moy#15, sum_sales#21, _w0#22]
Arguments: [avg(_w0#22) windowspecdefinition(i_category#3, i_brand#2, cc_name#11, d_year#14, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#24], [i_category#3, i_brand#2, cc_name#11, d_year#14]

(31) Project [codegen id : 10]
Output [7]: [i_category#3, i_brand#2, cc_name#11, d_year#14, d_moy#15, sum_sales#21, avg_monthly_sales#24]
Input [8]: [i_category#3, i_brand#2, cc_name#11, d_year#14, d_moy#15, sum_sales#21, _w0#22, avg_monthly_sales#24]

(32) Exchange
Input [7]: [i_category#3, i_brand#2, cc_name#11, d_year#14, d_moy#15, sum_sales#21, avg_monthly_sales#24]
Arguments: hashpartitioning(i_category#3, i_brand#2, cc_name#11, 5), ENSURE_REQUIREMENTS, [id=#25]

(33) Sort [codegen id : 11]
Input [7]: [i_category#3, i_brand#2, cc_name#11, d_year#14, d_moy#15, sum_sales#21, avg_monthly_sales#24]
Arguments: [i_category#3 ASC NULLS FIRST, i_brand#2 ASC NULLS FIRST, cc_name#11 ASC NULLS FIRST, d_year#14 ASC NULLS FIRST, d_moy#15 ASC NULLS FIRST], false, 0

(34) Window
Input [7]: [i_category#3, i_brand#2, cc_name#11, d_year#14, d_moy#15, sum_sales#21, avg_monthly_sales#24]
Arguments: [rank(d_year#14, d_moy#15) windowspecdefinition(i_category#3, i_brand#2, cc_name#11, d_year#14 ASC NULLS FIRST, d_moy#15 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#26], [i_category#3, i_brand#2, cc_name#11], [d_year#14 ASC NULLS FIRST, d_moy#15 ASC NULLS FIRST]

(35) Filter [codegen id : 32]
Input [8]: [i_category#3, i_brand#2, cc_name#11, d_year#14, d_moy#15, sum_sales#21, avg_monthly_sales#24, rn#26]
Condition : ((((((isnotnull(d_year#14) AND isnotnull(avg_monthly_sales#24)) AND (d_year#14 = 1999)) AND (avg_monthly_sales#24 > 0.000000)) AND (avg_monthly_sales#24 > 0.000000)) AND (CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#21 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#24 as decimal(22,6)))), DecimalType(22,6), true))) / promote_precision(cast(avg_monthly_sales#24 as decimal(22,6)))), DecimalType(38,16), true) > 0.1000000000000000)) AND isnotnull(rn#26))

(36) ReusedExchange [Reuses operator id: 26]
Output [6]: [i_category#27, i_brand#28, cc_name#29, d_year#30, d_moy#31, sum#32]

(37) HashAggregate [codegen id : 19]
Input [6]: [i_category#27, i_brand#28, cc_name#29, d_year#30, d_moy#31, sum#32]
Keys [5]: [i_category#27, i_brand#28, cc_name#29, d_year#30, d_moy#31]
Functions [1]: [sum(UnscaledValue(cs_sales_price#8))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_sales_price#8))#33]
Results [6]: [i_category#27, i_brand#28, cc_name#29, d_year#30, d_moy#31, MakeDecimal(sum(UnscaledValue(cs_sales_price#8))#33,17,2) AS sum_sales#34]

(38) Exchange
Input [6]: [i_category#27, i_brand#28, cc_name#29, d_year#30, d_moy#31, sum_sales#34]
Arguments: hashpartitioning(i_category#27, i_brand#28, cc_name#29, 5), ENSURE_REQUIREMENTS, [id=#35]

(39) Sort [codegen id : 20]
Input [6]: [i_category#27, i_brand#28, cc_name#29, d_year#30, d_moy#31, sum_sales#34]
Arguments: [i_category#27 ASC NULLS FIRST, i_brand#28 ASC NULLS FIRST, cc_name#29 ASC NULLS FIRST, d_year#30 ASC NULLS FIRST, d_moy#31 ASC NULLS FIRST], false, 0

(40) Window
Input [6]: [i_category#27, i_brand#28, cc_name#29, d_year#30, d_moy#31, sum_sales#34]
Arguments: [rank(d_year#30, d_moy#31) windowspecdefinition(i_category#27, i_brand#28, cc_name#29, d_year#30 ASC NULLS FIRST, d_moy#31 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#36], [i_category#27, i_brand#28, cc_name#29], [d_year#30 ASC NULLS FIRST, d_moy#31 ASC NULLS FIRST]

(41) Filter [codegen id : 21]
Input [7]: [i_category#27, i_brand#28, cc_name#29, d_year#30, d_moy#31, sum_sales#34, rn#36]
Condition : isnotnull(rn#36)

(42) Project [codegen id : 21]
Output [5]: [i_category#27, i_brand#28, cc_name#29, sum_sales#34, rn#36]
Input [7]: [i_category#27, i_brand#28, cc_name#29, d_year#30, d_moy#31, sum_sales#34, rn#36]

(43) BroadcastExchange
Input [5]: [i_category#27, i_brand#28, cc_name#29, sum_sales#34, rn#36]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true], input[1, string, true], input[2, string, true], (input[4, int, true] + 1)),false), [id=#37]

(44) BroadcastHashJoin [codegen id : 32]
Left keys [4]: [i_category#3, i_brand#2, cc_name#11, rn#26]
Right keys [4]: [i_category#27, i_brand#28, cc_name#29, (rn#36 + 1)]
Join condition: None

(45) Project [codegen id : 32]
Output [9]: [i_category#3, i_brand#2, cc_name#11, d_year#14, d_moy#15, sum_sales#21, avg_monthly_sales#24, rn#26, sum_sales#34]
Input [13]: [i_category#3, i_brand#2, cc_name#11, d_year#14, d_moy#15, sum_sales#21, avg_monthly_sales#24, rn#26, i_category#27, i_brand#28, cc_name#29, sum_sales#34, rn#36]

(46) ReusedExchange [Reuses operator id: 38]
Output [6]: [i_category#38, i_brand#39, cc_name#40, d_year#41, d_moy#42, sum_sales#43]

(47) Sort [codegen id : 30]
Input [6]: [i_category#38, i_brand#39, cc_name#40, d_year#41, d_moy#42, sum_sales#43]
Arguments: [i_category#38 ASC NULLS FIRST, i_brand#39 ASC NULLS FIRST, cc_name#40 ASC NULLS FIRST, d_year#41 ASC NULLS FIRST, d_moy#42 ASC NULLS FIRST], false, 0

(48) Window
Input [6]: [i_category#38, i_brand#39, cc_name#40, d_year#41, d_moy#42, sum_sales#43]
Arguments: [rank(d_year#41, d_moy#42) windowspecdefinition(i_category#38, i_brand#39, cc_name#40, d_year#41 ASC NULLS FIRST, d_moy#42 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#44], [i_category#38, i_brand#39, cc_name#40], [d_year#41 ASC NULLS FIRST, d_moy#42 ASC NULLS FIRST]

(49) Filter [codegen id : 31]
Input [7]: [i_category#38, i_brand#39, cc_name#40, d_year#41, d_moy#42, sum_sales#43, rn#44]
Condition : isnotnull(rn#44)

(50) Project [codegen id : 31]
Output [5]: [i_category#38, i_brand#39, cc_name#40, sum_sales#43, rn#44]
Input [7]: [i_category#38, i_brand#39, cc_name#40, d_year#41, d_moy#42, sum_sales#43, rn#44]

(51) BroadcastExchange
Input [5]: [i_category#38, i_brand#39, cc_name#40, sum_sales#43, rn#44]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true], input[1, string, true], input[2, string, true], (input[4, int, true] - 1)),false), [id=#45]

(52) BroadcastHashJoin [codegen id : 32]
Left keys [4]: [i_category#3, i_brand#2, cc_name#11, rn#26]
Right keys [4]: [i_category#38, i_brand#39, cc_name#40, (rn#44 - 1)]
Join condition: None

(53) Project [codegen id : 32]
Output [8]: [i_category#3, i_brand#2, d_year#14, d_moy#15, avg_monthly_sales#24, sum_sales#21, sum_sales#34 AS psum#46, sum_sales#43 AS nsum#47]
Input [14]: [i_category#3, i_brand#2, cc_name#11, d_year#14, d_moy#15, sum_sales#21, avg_monthly_sales#24, rn#26, sum_sales#34, i_category#38, i_brand#39, cc_name#40, sum_sales#43, rn#44]

(54) TakeOrderedAndProject
Input [8]: [i_category#3, i_brand#2, d_year#14, d_moy#15, avg_monthly_sales#24, sum_sales#21, psum#46, nsum#47]
Arguments: 100, [CheckOverflow((promote_precision(cast(sum_sales#21 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#24 as decimal(22,6)))), DecimalType(22,6), true) ASC NULLS FIRST, d_year#14 ASC NULLS FIRST], [i_category#3, i_brand#2, d_year#14, d_moy#15, avg_monthly_sales#24, sum_sales#21, psum#46, nsum#47]

