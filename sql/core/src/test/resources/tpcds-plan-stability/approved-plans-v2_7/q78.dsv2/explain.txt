== Physical Plan ==
TakeOrderedAndProject (70)
+- * Project (69)
   +- * SortMergeJoin Inner (68)
      :- * Project (46)
      :  +- * SortMergeJoin Inner (45)
      :     :- * Sort (23)
      :     :  +- * HashAggregate (22)
      :     :     +- Exchange (21)
      :     :        +- * HashAggregate (20)
      :     :           +- * Project (19)
      :     :              +- * BroadcastHashJoin Inner BuildRight (18)
      :     :                 :- * Project (13)
      :     :                 :  +- * Filter (12)
      :     :                 :     +- * SortMergeJoin LeftOuter (11)
      :     :                 :        :- * Sort (5)
      :     :                 :        :  +- Exchange (4)
      :     :                 :        :     +- * Project (3)
      :     :                 :        :        +- * Filter (2)
      :     :                 :        :           +- BatchScan default.store_sales (1)
      :     :                 :        +- * Sort (10)
      :     :                 :           +- Exchange (9)
      :     :                 :              +- * Project (8)
      :     :                 :                 +- * Filter (7)
      :     :                 :                    +- BatchScan default.store_returns (6)
      :     :                 +- BroadcastExchange (17)
      :     :                    +- * Project (16)
      :     :                       +- * Filter (15)
      :     :                          +- BatchScan default.date_dim (14)
      :     +- * Sort (44)
      :        +- * Filter (43)
      :           +- * HashAggregate (42)
      :              +- Exchange (41)
      :                 +- * HashAggregate (40)
      :                    +- * Project (39)
      :                       +- * BroadcastHashJoin Inner BuildRight (38)
      :                          :- * Project (36)
      :                          :  +- * Filter (35)
      :                          :     +- * SortMergeJoin LeftOuter (34)
      :                          :        :- * Sort (28)
      :                          :        :  +- Exchange (27)
      :                          :        :     +- * Project (26)
      :                          :        :        +- * Filter (25)
      :                          :        :           +- BatchScan default.web_sales (24)
      :                          :        +- * Sort (33)
      :                          :           +- Exchange (32)
      :                          :              +- * Project (31)
      :                          :                 +- * Filter (30)
      :                          :                    +- BatchScan default.web_returns (29)
      :                          +- ReusedExchange (37)
      +- * Sort (67)
         +- * Filter (66)
            +- * HashAggregate (65)
               +- Exchange (64)
                  +- * HashAggregate (63)
                     +- * Project (62)
                        +- * BroadcastHashJoin Inner BuildRight (61)
                           :- * Project (59)
                           :  +- * Filter (58)
                           :     +- * SortMergeJoin LeftOuter (57)
                           :        :- * Sort (51)
                           :        :  +- Exchange (50)
                           :        :     +- * Project (49)
                           :        :        +- * Filter (48)
                           :        :           +- BatchScan default.catalog_sales (47)
                           :        +- * Sort (56)
                           :           +- Exchange (55)
                           :              +- * Project (54)
                           :                 +- * Filter (53)
                           :                    +- BatchScan default.catalog_returns (52)
                           +- ReusedExchange (60)


(1) BatchScan default.store_sales
Output [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
DataFilters: [isnotnull(ss_item_sk#1), isnotnull(ss_customer_sk#2)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_sales]
PartitionFilters: [isnotnull(ss_sold_date_sk#7)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_sales_price:decimal(7,2)>

(2) Filter [codegen id : 1]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Condition : ((isnotnull(ss_item_sk#1) AND isnotnull(ss_customer_sk#2)) AND might_contain(Subquery scalar-subquery#8, [id=#9], xxhash64(ss_sold_date_sk#7, 42)))

(3) Project [codegen id : 1]
Output [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]

(4) Exchange
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Arguments: hashpartitioning(ss_ticket_number#3, ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Arguments: [ss_ticket_number#3 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) BatchScan default.store_returns
Output [2]: [sr_item_sk#10, sr_ticket_number#11]
DataFilters: [isnotnull(sr_ticket_number#11), isnotnull(sr_item_sk#10)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(7) Filter [codegen id : 3]
Input [2]: [sr_item_sk#10, sr_ticket_number#11]
Condition : (isnotnull(sr_ticket_number#11) AND isnotnull(sr_item_sk#10))

(8) Project [codegen id : 3]
Output [2]: [sr_item_sk#10, sr_ticket_number#11]
Input [2]: [sr_item_sk#10, sr_ticket_number#11]

(9) Exchange
Input [2]: [sr_item_sk#10, sr_ticket_number#11]
Arguments: hashpartitioning(sr_ticket_number#11, sr_item_sk#10, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(10) Sort [codegen id : 4]
Input [2]: [sr_item_sk#10, sr_ticket_number#11]
Arguments: [sr_ticket_number#11 ASC NULLS FIRST, sr_item_sk#10 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 6]
Left keys [2]: [ss_ticket_number#3, ss_item_sk#1]
Right keys [2]: [sr_ticket_number#11, sr_item_sk#10]
Join type: LeftOuter
Join condition: None

(12) Filter [codegen id : 6]
Input [9]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7, sr_item_sk#10, sr_ticket_number#11]
Condition : isnull(sr_ticket_number#11)

(13) Project [codegen id : 6]
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Input [9]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7, sr_item_sk#10, sr_ticket_number#11]

(14) BatchScan default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
DataFilters: [isnotnull(d_year#13), (d_year#13 = 2000), isnotnull(d_date_sk#12)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(15) Filter [codegen id : 5]
Input [2]: [d_date_sk#12, d_year#13]
Condition : ((isnotnull(d_year#13) AND (d_year#13 = 2000)) AND isnotnull(d_date_sk#12))

(16) Project [codegen id : 5]
Output [2]: [d_date_sk#12, d_year#13]
Input [2]: [d_date_sk#12, d_year#13]

(17) BroadcastExchange
Input [2]: [d_date_sk#12, d_year#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(18) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#12]
Join type: Inner
Join condition: None

(19) Project [codegen id : 6]
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, d_year#13]
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7, d_date_sk#12, d_year#13]

(20) HashAggregate [codegen id : 6]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, d_year#13]
Keys [3]: [d_year#13, ss_item_sk#1, ss_customer_sk#2]
Functions [3]: [partial_sum(ss_quantity#4), partial_sum(UnscaledValue(ss_wholesale_cost#5)), partial_sum(UnscaledValue(ss_sales_price#6))]
Aggregate Attributes [3]: [sum#14, sum#15, sum#16]
Results [6]: [d_year#13, ss_item_sk#1, ss_customer_sk#2, sum#17, sum#18, sum#19]

(21) Exchange
Input [6]: [d_year#13, ss_item_sk#1, ss_customer_sk#2, sum#17, sum#18, sum#19]
Arguments: hashpartitioning(d_year#13, ss_item_sk#1, ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(22) HashAggregate [codegen id : 7]
Input [6]: [d_year#13, ss_item_sk#1, ss_customer_sk#2, sum#17, sum#18, sum#19]
Keys [3]: [d_year#13, ss_item_sk#1, ss_customer_sk#2]
Functions [3]: [sum(ss_quantity#4), sum(UnscaledValue(ss_wholesale_cost#5)), sum(UnscaledValue(ss_sales_price#6))]
Aggregate Attributes [3]: [sum(ss_quantity#4)#20, sum(UnscaledValue(ss_wholesale_cost#5))#21, sum(UnscaledValue(ss_sales_price#6))#22]
Results [6]: [d_year#13 AS ss_sold_year#23, ss_item_sk#1, ss_customer_sk#2, sum(ss_quantity#4)#20 AS ss_qty#24, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#5))#21,17,2) AS ss_wc#25, MakeDecimal(sum(UnscaledValue(ss_sales_price#6))#22,17,2) AS ss_sp#26]

(23) Sort [codegen id : 7]
Input [6]: [ss_sold_year#23, ss_item_sk#1, ss_customer_sk#2, ss_qty#24, ss_wc#25, ss_sp#26]
Arguments: [ss_sold_year#23 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST, ss_customer_sk#2 ASC NULLS FIRST], false, 0

(24) BatchScan default.web_sales
Output [7]: [ws_item_sk#27, ws_bill_customer_sk#28, ws_order_number#29, ws_quantity#30, ws_wholesale_cost#31, ws_sales_price#32, ws_sold_date_sk#33]
DataFilters: [isnotnull(ws_item_sk#27), isnotnull(ws_bill_customer_sk#28)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/web_sales]
PartitionFilters: [isnotnull(ws_sold_date_sk#33)]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_order_number:int,ws_quantity:int,ws_wholesale_cost:decimal(7,2),ws_sales_price:decimal(7,2)>

(25) Filter [codegen id : 8]
Input [7]: [ws_item_sk#27, ws_bill_customer_sk#28, ws_order_number#29, ws_quantity#30, ws_wholesale_cost#31, ws_sales_price#32, ws_sold_date_sk#33]
Condition : ((isnotnull(ws_item_sk#27) AND isnotnull(ws_bill_customer_sk#28)) AND might_contain(ReusedSubquery Subquery scalar-subquery#8, [id=#9], xxhash64(ws_sold_date_sk#33, 42)))

(26) Project [codegen id : 8]
Output [7]: [ws_item_sk#27, ws_bill_customer_sk#28, ws_order_number#29, ws_quantity#30, ws_wholesale_cost#31, ws_sales_price#32, ws_sold_date_sk#33]
Input [7]: [ws_item_sk#27, ws_bill_customer_sk#28, ws_order_number#29, ws_quantity#30, ws_wholesale_cost#31, ws_sales_price#32, ws_sold_date_sk#33]

(27) Exchange
Input [7]: [ws_item_sk#27, ws_bill_customer_sk#28, ws_order_number#29, ws_quantity#30, ws_wholesale_cost#31, ws_sales_price#32, ws_sold_date_sk#33]
Arguments: hashpartitioning(ws_order_number#29, ws_item_sk#27, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(28) Sort [codegen id : 9]
Input [7]: [ws_item_sk#27, ws_bill_customer_sk#28, ws_order_number#29, ws_quantity#30, ws_wholesale_cost#31, ws_sales_price#32, ws_sold_date_sk#33]
Arguments: [ws_order_number#29 ASC NULLS FIRST, ws_item_sk#27 ASC NULLS FIRST], false, 0

(29) BatchScan default.web_returns
Output [2]: [wr_item_sk#34, wr_order_number#35]
DataFilters: [isnotnull(wr_order_number#35), isnotnull(wr_item_sk#34)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_order_number), IsNotNull(wr_item_sk)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int>

(30) Filter [codegen id : 10]
Input [2]: [wr_item_sk#34, wr_order_number#35]
Condition : (isnotnull(wr_order_number#35) AND isnotnull(wr_item_sk#34))

(31) Project [codegen id : 10]
Output [2]: [wr_item_sk#34, wr_order_number#35]
Input [2]: [wr_item_sk#34, wr_order_number#35]

(32) Exchange
Input [2]: [wr_item_sk#34, wr_order_number#35]
Arguments: hashpartitioning(wr_order_number#35, wr_item_sk#34, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(33) Sort [codegen id : 11]
Input [2]: [wr_item_sk#34, wr_order_number#35]
Arguments: [wr_order_number#35 ASC NULLS FIRST, wr_item_sk#34 ASC NULLS FIRST], false, 0

(34) SortMergeJoin [codegen id : 13]
Left keys [2]: [ws_order_number#29, ws_item_sk#27]
Right keys [2]: [wr_order_number#35, wr_item_sk#34]
Join type: LeftOuter
Join condition: None

(35) Filter [codegen id : 13]
Input [9]: [ws_item_sk#27, ws_bill_customer_sk#28, ws_order_number#29, ws_quantity#30, ws_wholesale_cost#31, ws_sales_price#32, ws_sold_date_sk#33, wr_item_sk#34, wr_order_number#35]
Condition : isnull(wr_order_number#35)

(36) Project [codegen id : 13]
Output [6]: [ws_item_sk#27, ws_bill_customer_sk#28, ws_quantity#30, ws_wholesale_cost#31, ws_sales_price#32, ws_sold_date_sk#33]
Input [9]: [ws_item_sk#27, ws_bill_customer_sk#28, ws_order_number#29, ws_quantity#30, ws_wholesale_cost#31, ws_sales_price#32, ws_sold_date_sk#33, wr_item_sk#34, wr_order_number#35]

(37) ReusedExchange [Reuses operator id: 17]
Output [2]: [d_date_sk#36, d_year#37]

(38) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ws_sold_date_sk#33]
Right keys [1]: [d_date_sk#36]
Join type: Inner
Join condition: None

(39) Project [codegen id : 13]
Output [6]: [ws_item_sk#27, ws_bill_customer_sk#28, ws_quantity#30, ws_wholesale_cost#31, ws_sales_price#32, d_year#37]
Input [8]: [ws_item_sk#27, ws_bill_customer_sk#28, ws_quantity#30, ws_wholesale_cost#31, ws_sales_price#32, ws_sold_date_sk#33, d_date_sk#36, d_year#37]

(40) HashAggregate [codegen id : 13]
Input [6]: [ws_item_sk#27, ws_bill_customer_sk#28, ws_quantity#30, ws_wholesale_cost#31, ws_sales_price#32, d_year#37]
Keys [3]: [d_year#37, ws_item_sk#27, ws_bill_customer_sk#28]
Functions [3]: [partial_sum(ws_quantity#30), partial_sum(UnscaledValue(ws_wholesale_cost#31)), partial_sum(UnscaledValue(ws_sales_price#32))]
Aggregate Attributes [3]: [sum#38, sum#39, sum#40]
Results [6]: [d_year#37, ws_item_sk#27, ws_bill_customer_sk#28, sum#41, sum#42, sum#43]

(41) Exchange
Input [6]: [d_year#37, ws_item_sk#27, ws_bill_customer_sk#28, sum#41, sum#42, sum#43]
Arguments: hashpartitioning(d_year#37, ws_item_sk#27, ws_bill_customer_sk#28, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(42) HashAggregate [codegen id : 14]
Input [6]: [d_year#37, ws_item_sk#27, ws_bill_customer_sk#28, sum#41, sum#42, sum#43]
Keys [3]: [d_year#37, ws_item_sk#27, ws_bill_customer_sk#28]
Functions [3]: [sum(ws_quantity#30), sum(UnscaledValue(ws_wholesale_cost#31)), sum(UnscaledValue(ws_sales_price#32))]
Aggregate Attributes [3]: [sum(ws_quantity#30)#44, sum(UnscaledValue(ws_wholesale_cost#31))#45, sum(UnscaledValue(ws_sales_price#32))#46]
Results [6]: [d_year#37 AS ws_sold_year#47, ws_item_sk#27, ws_bill_customer_sk#28 AS ws_customer_sk#48, sum(ws_quantity#30)#44 AS ws_qty#49, MakeDecimal(sum(UnscaledValue(ws_wholesale_cost#31))#45,17,2) AS ws_wc#50, MakeDecimal(sum(UnscaledValue(ws_sales_price#32))#46,17,2) AS ws_sp#51]

(43) Filter [codegen id : 14]
Input [6]: [ws_sold_year#47, ws_item_sk#27, ws_customer_sk#48, ws_qty#49, ws_wc#50, ws_sp#51]
Condition : (coalesce(ws_qty#49, 0) > 0)

(44) Sort [codegen id : 14]
Input [6]: [ws_sold_year#47, ws_item_sk#27, ws_customer_sk#48, ws_qty#49, ws_wc#50, ws_sp#51]
Arguments: [ws_sold_year#47 ASC NULLS FIRST, ws_item_sk#27 ASC NULLS FIRST, ws_customer_sk#48 ASC NULLS FIRST], false, 0

(45) SortMergeJoin [codegen id : 15]
Left keys [3]: [ss_sold_year#23, ss_item_sk#1, ss_customer_sk#2]
Right keys [3]: [ws_sold_year#47, ws_item_sk#27, ws_customer_sk#48]
Join type: Inner
Join condition: None

(46) Project [codegen id : 15]
Output [9]: [ss_sold_year#23, ss_item_sk#1, ss_customer_sk#2, ss_qty#24, ss_wc#25, ss_sp#26, ws_qty#49, ws_wc#50, ws_sp#51]
Input [12]: [ss_sold_year#23, ss_item_sk#1, ss_customer_sk#2, ss_qty#24, ss_wc#25, ss_sp#26, ws_sold_year#47, ws_item_sk#27, ws_customer_sk#48, ws_qty#49, ws_wc#50, ws_sp#51]

(47) BatchScan default.catalog_sales
Output [7]: [cs_bill_customer_sk#52, cs_item_sk#53, cs_order_number#54, cs_quantity#55, cs_wholesale_cost#56, cs_sales_price#57, cs_sold_date_sk#58]
DataFilters: [isnotnull(cs_item_sk#53), isnotnull(cs_bill_customer_sk#52)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PartitionFilters: [isnotnull(cs_sold_date_sk#58)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_order_number:int,cs_quantity:int,cs_wholesale_cost:decimal(7,2),cs_sales_price:decimal(7,2)>

(48) Filter [codegen id : 16]
Input [7]: [cs_bill_customer_sk#52, cs_item_sk#53, cs_order_number#54, cs_quantity#55, cs_wholesale_cost#56, cs_sales_price#57, cs_sold_date_sk#58]
Condition : ((isnotnull(cs_item_sk#53) AND isnotnull(cs_bill_customer_sk#52)) AND might_contain(ReusedSubquery Subquery scalar-subquery#8, [id=#9], xxhash64(cs_sold_date_sk#58, 42)))

(49) Project [codegen id : 16]
Output [7]: [cs_bill_customer_sk#52, cs_item_sk#53, cs_order_number#54, cs_quantity#55, cs_wholesale_cost#56, cs_sales_price#57, cs_sold_date_sk#58]
Input [7]: [cs_bill_customer_sk#52, cs_item_sk#53, cs_order_number#54, cs_quantity#55, cs_wholesale_cost#56, cs_sales_price#57, cs_sold_date_sk#58]

(50) Exchange
Input [7]: [cs_bill_customer_sk#52, cs_item_sk#53, cs_order_number#54, cs_quantity#55, cs_wholesale_cost#56, cs_sales_price#57, cs_sold_date_sk#58]
Arguments: hashpartitioning(cs_order_number#54, cs_item_sk#53, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(51) Sort [codegen id : 17]
Input [7]: [cs_bill_customer_sk#52, cs_item_sk#53, cs_order_number#54, cs_quantity#55, cs_wholesale_cost#56, cs_sales_price#57, cs_sold_date_sk#58]
Arguments: [cs_order_number#54 ASC NULLS FIRST, cs_item_sk#53 ASC NULLS FIRST], false, 0

(52) BatchScan default.catalog_returns
Output [2]: [cr_item_sk#59, cr_order_number#60]
DataFilters: [isnotnull(cr_order_number#60), isnotnull(cr_item_sk#59)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int>

(53) Filter [codegen id : 18]
Input [2]: [cr_item_sk#59, cr_order_number#60]
Condition : (isnotnull(cr_order_number#60) AND isnotnull(cr_item_sk#59))

(54) Project [codegen id : 18]
Output [2]: [cr_item_sk#59, cr_order_number#60]
Input [2]: [cr_item_sk#59, cr_order_number#60]

(55) Exchange
Input [2]: [cr_item_sk#59, cr_order_number#60]
Arguments: hashpartitioning(cr_order_number#60, cr_item_sk#59, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(56) Sort [codegen id : 19]
Input [2]: [cr_item_sk#59, cr_order_number#60]
Arguments: [cr_order_number#60 ASC NULLS FIRST, cr_item_sk#59 ASC NULLS FIRST], false, 0

(57) SortMergeJoin [codegen id : 21]
Left keys [2]: [cs_order_number#54, cs_item_sk#53]
Right keys [2]: [cr_order_number#60, cr_item_sk#59]
Join type: LeftOuter
Join condition: None

(58) Filter [codegen id : 21]
Input [9]: [cs_bill_customer_sk#52, cs_item_sk#53, cs_order_number#54, cs_quantity#55, cs_wholesale_cost#56, cs_sales_price#57, cs_sold_date_sk#58, cr_item_sk#59, cr_order_number#60]
Condition : isnull(cr_order_number#60)

(59) Project [codegen id : 21]
Output [6]: [cs_bill_customer_sk#52, cs_item_sk#53, cs_quantity#55, cs_wholesale_cost#56, cs_sales_price#57, cs_sold_date_sk#58]
Input [9]: [cs_bill_customer_sk#52, cs_item_sk#53, cs_order_number#54, cs_quantity#55, cs_wholesale_cost#56, cs_sales_price#57, cs_sold_date_sk#58, cr_item_sk#59, cr_order_number#60]

(60) ReusedExchange [Reuses operator id: 17]
Output [2]: [d_date_sk#61, d_year#62]

(61) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [cs_sold_date_sk#58]
Right keys [1]: [d_date_sk#61]
Join type: Inner
Join condition: None

(62) Project [codegen id : 21]
Output [6]: [cs_bill_customer_sk#52, cs_item_sk#53, cs_quantity#55, cs_wholesale_cost#56, cs_sales_price#57, d_year#62]
Input [8]: [cs_bill_customer_sk#52, cs_item_sk#53, cs_quantity#55, cs_wholesale_cost#56, cs_sales_price#57, cs_sold_date_sk#58, d_date_sk#61, d_year#62]

(63) HashAggregate [codegen id : 21]
Input [6]: [cs_bill_customer_sk#52, cs_item_sk#53, cs_quantity#55, cs_wholesale_cost#56, cs_sales_price#57, d_year#62]
Keys [3]: [d_year#62, cs_item_sk#53, cs_bill_customer_sk#52]
Functions [3]: [partial_sum(cs_quantity#55), partial_sum(UnscaledValue(cs_wholesale_cost#56)), partial_sum(UnscaledValue(cs_sales_price#57))]
Aggregate Attributes [3]: [sum#63, sum#64, sum#65]
Results [6]: [d_year#62, cs_item_sk#53, cs_bill_customer_sk#52, sum#66, sum#67, sum#68]

(64) Exchange
Input [6]: [d_year#62, cs_item_sk#53, cs_bill_customer_sk#52, sum#66, sum#67, sum#68]
Arguments: hashpartitioning(d_year#62, cs_item_sk#53, cs_bill_customer_sk#52, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(65) HashAggregate [codegen id : 22]
Input [6]: [d_year#62, cs_item_sk#53, cs_bill_customer_sk#52, sum#66, sum#67, sum#68]
Keys [3]: [d_year#62, cs_item_sk#53, cs_bill_customer_sk#52]
Functions [3]: [sum(cs_quantity#55), sum(UnscaledValue(cs_wholesale_cost#56)), sum(UnscaledValue(cs_sales_price#57))]
Aggregate Attributes [3]: [sum(cs_quantity#55)#69, sum(UnscaledValue(cs_wholesale_cost#56))#70, sum(UnscaledValue(cs_sales_price#57))#71]
Results [6]: [d_year#62 AS cs_sold_year#72, cs_item_sk#53, cs_bill_customer_sk#52 AS cs_customer_sk#73, sum(cs_quantity#55)#69 AS cs_qty#74, MakeDecimal(sum(UnscaledValue(cs_wholesale_cost#56))#70,17,2) AS cs_wc#75, MakeDecimal(sum(UnscaledValue(cs_sales_price#57))#71,17,2) AS cs_sp#76]

(66) Filter [codegen id : 22]
Input [6]: [cs_sold_year#72, cs_item_sk#53, cs_customer_sk#73, cs_qty#74, cs_wc#75, cs_sp#76]
Condition : (coalesce(cs_qty#74, 0) > 0)

(67) Sort [codegen id : 22]
Input [6]: [cs_sold_year#72, cs_item_sk#53, cs_customer_sk#73, cs_qty#74, cs_wc#75, cs_sp#76]
Arguments: [cs_sold_year#72 ASC NULLS FIRST, cs_item_sk#53 ASC NULLS FIRST, cs_customer_sk#73 ASC NULLS FIRST], false, 0

(68) SortMergeJoin [codegen id : 23]
Left keys [3]: [ss_sold_year#23, ss_item_sk#1, ss_customer_sk#2]
Right keys [3]: [cs_sold_year#72, cs_item_sk#53, cs_customer_sk#73]
Join type: Inner
Join condition: None

(69) Project [codegen id : 23]
Output [13]: [round((cast(ss_qty#24 as double) / cast(coalesce((ws_qty#49 + cs_qty#74), 1) as double)), 2) AS ratio#77, ss_qty#24 AS store_qty#78, ss_wc#25 AS store_wholesale_cost#79, ss_sp#26 AS store_sales_price#80, (coalesce(ws_qty#49, 0) + coalesce(cs_qty#74, 0)) AS other_chan_qty#81, (coalesce(ws_wc#50, 0.00) + coalesce(cs_wc#75, 0.00)) AS other_chan_wholesale_cost#82, (coalesce(ws_sp#51, 0.00) + coalesce(cs_sp#76, 0.00)) AS other_chan_sales_price#83, ss_sold_year#23, ss_item_sk#1, ss_customer_sk#2, ss_qty#24, ss_wc#25, ss_sp#26]
Input [15]: [ss_sold_year#23, ss_item_sk#1, ss_customer_sk#2, ss_qty#24, ss_wc#25, ss_sp#26, ws_qty#49, ws_wc#50, ws_sp#51, cs_sold_year#72, cs_item_sk#53, cs_customer_sk#73, cs_qty#74, cs_wc#75, cs_sp#76]

(70) TakeOrderedAndProject
Input [13]: [ratio#77, store_qty#78, store_wholesale_cost#79, store_sales_price#80, other_chan_qty#81, other_chan_wholesale_cost#82, other_chan_sales_price#83, ss_sold_year#23, ss_item_sk#1, ss_customer_sk#2, ss_qty#24, ss_wc#25, ss_sp#26]
Arguments: 100, [ss_sold_year#23 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST, ss_customer_sk#2 ASC NULLS FIRST, ss_qty#24 DESC NULLS LAST, ss_wc#25 DESC NULLS LAST, ss_sp#26 DESC NULLS LAST, other_chan_qty#81 ASC NULLS FIRST, other_chan_wholesale_cost#82 ASC NULLS FIRST, other_chan_sales_price#83 ASC NULLS FIRST, ratio#77 ASC NULLS FIRST], [ratio#77, store_qty#78, store_wholesale_cost#79, store_sales_price#80, other_chan_qty#81, other_chan_wholesale_cost#82, other_chan_sales_price#83]

===== Subqueries =====

Subquery:1 Hosting operator id = 2 Hosting Expression = Subquery scalar-subquery#8, [id=#9]
ObjectHashAggregate (76)
+- Exchange (75)
   +- ObjectHashAggregate (74)
      +- * Project (73)
         +- * Filter (72)
            +- BatchScan default.date_dim (71)


(71) BatchScan default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
DataFilters: [isnotnull(d_year#13), (d_year#13 = 2000), isnotnull(d_date_sk#12)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(72) Filter [codegen id : 1]
Input [2]: [d_date_sk#12, d_year#13]
Condition : ((isnotnull(d_year#13) AND (d_year#13 = 2000)) AND isnotnull(d_date_sk#12))

(73) Project [codegen id : 1]
Output [1]: [d_date_sk#12]
Input [2]: [d_date_sk#12, d_year#13]

(74) ObjectHashAggregate
Input [1]: [d_date_sk#12]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(d_date_sk#12, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#84]
Results [1]: [buf#85]

(75) Exchange
Input [1]: [buf#85]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=11]

(76) ObjectHashAggregate
Input [1]: [buf#85]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(d_date_sk#12, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(d_date_sk#12, 42), 1000000, 8388608, 0, 0)#86]
Results [1]: [bloom_filter_agg(xxhash64(d_date_sk#12, 42), 1000000, 8388608, 0, 0)#86 AS bloomFilter#87]

Subquery:2 Hosting operator id = 25 Hosting Expression = ReusedSubquery Subquery scalar-subquery#8, [id=#9]

Subquery:3 Hosting operator id = 48 Hosting Expression = ReusedSubquery Subquery scalar-subquery#8, [id=#9]


