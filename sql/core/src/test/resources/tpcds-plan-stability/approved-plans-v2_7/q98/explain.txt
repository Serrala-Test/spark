== Physical Plan ==
* Sort (26)
+- Exchange (25)
   +- * Project (24)
      +- Window (23)
         +- * Sort (22)
            +- Exchange (21)
               +- * HashAggregate (20)
                  +- Exchange (19)
                     +- * HashAggregate (18)
                        +- * Project (17)
                           +- * BroadcastHashJoin Inner BuildRight (16)
                              :- * Project (10)
                              :  +- * BroadcastHashJoin Inner BuildRight (9)
                              :     :- * Filter (3)
                              :     :  +- * ColumnarToRow (2)
                              :     :     +- Scan parquet default.store_sales (1)
                              :     +- BroadcastExchange (8)
                              :        +- * Project (7)
                              :           +- * Filter (6)
                              :              +- * ColumnarToRow (5)
                              :                 +- Scan parquet default.item (4)
                              +- BroadcastExchange (15)
                                 +- * Project (14)
                                    +- * Filter (13)
                                       +- * ColumnarToRow (12)
                                          +- Scan parquet default.date_dim (11)


(1) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [3]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#3]

(3) Filter [codegen id : 3]
Input [3]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#3]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(4) Scan parquet default.item
Output [6]: [i_item_sk#4, i_item_id#5, i_item_desc#6, i_current_price#7, i_class#8, i_category#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string,i_current_price:decimal(7,2),i_class:string,i_category:string>

(5) ColumnarToRow [codegen id : 1]
Input [6]: [i_item_sk#4, i_item_id#5, i_item_desc#6, i_current_price#7, i_class#8, i_category#9]

(6) Filter [codegen id : 1]
Input [6]: [i_item_sk#4, i_item_id#5, i_item_desc#6, i_current_price#7, i_class#8, i_category#9]
Condition : (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#9, 50, false, true) IN (Sports                                            ,Books                                             ,Home                                              ) AND isnotnull(i_item_sk#4))

(7) Project [codegen id : 1]
Output [6]: [i_item_sk#4, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_item_id#5, 16, false, true) AS i_item_id#10, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, i_item_desc#6, 200, false, true) AS i_item_desc#11, i_current_price#7, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_class#8, 50, false, true) AS i_class#12, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#9, 50, false, true) AS i_category#13]
Input [6]: [i_item_sk#4, i_item_id#5, i_item_desc#6, i_current_price#7, i_class#8, i_category#9]

(8) BroadcastExchange
Input [6]: [i_item_sk#4, i_item_id#10, i_item_desc#11, i_current_price#7, i_class#12, i_category#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#4]
Join condition: None

(10) Project [codegen id : 3]
Output [7]: [ss_sold_date_sk#1, ss_ext_sales_price#3, i_item_id#10, i_item_desc#11, i_current_price#7, i_class#12, i_category#13]
Input [9]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#3, i_item_sk#4, i_item_id#10, i_item_desc#11, i_current_price#7, i_class#12, i_category#13]

(11) Scan parquet default.date_dim
Output [2]: [d_date_sk#15, d_date#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-22), LessThanOrEqual(d_date,1999-03-24), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#15, d_date#16]

(13) Filter [codegen id : 2]
Input [2]: [d_date_sk#15, d_date#16]
Condition : (((isnotnull(d_date#16) AND (d_date#16 >= 10644)) AND (d_date#16 <= 10674)) AND isnotnull(d_date_sk#15))

(14) Project [codegen id : 2]
Output [1]: [d_date_sk#15]
Input [2]: [d_date_sk#15, d_date#16]

(15) BroadcastExchange
Input [1]: [d_date_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#17]

(16) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#15]
Join condition: None

(17) Project [codegen id : 3]
Output [6]: [ss_ext_sales_price#3, i_item_id#10, i_item_desc#11, i_current_price#7, i_class#12, i_category#13]
Input [8]: [ss_sold_date_sk#1, ss_ext_sales_price#3, i_item_id#10, i_item_desc#11, i_current_price#7, i_class#12, i_category#13, d_date_sk#15]

(18) HashAggregate [codegen id : 3]
Input [6]: [ss_ext_sales_price#3, i_item_id#10, i_item_desc#11, i_current_price#7, i_class#12, i_category#13]
Keys [5]: [i_item_id#10, i_item_desc#11, i_category#13, i_class#12, i_current_price#7]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [1]: [sum#18]
Results [6]: [i_item_id#10, i_item_desc#11, i_category#13, i_class#12, i_current_price#7, sum#19]

(19) Exchange
Input [6]: [i_item_id#10, i_item_desc#11, i_category#13, i_class#12, i_current_price#7, sum#19]
Arguments: hashpartitioning(i_item_id#10, i_item_desc#11, i_category#13, i_class#12, i_current_price#7, 5), ENSURE_REQUIREMENTS, [id=#20]

(20) HashAggregate [codegen id : 4]
Input [6]: [i_item_id#10, i_item_desc#11, i_category#13, i_class#12, i_current_price#7, sum#19]
Keys [5]: [i_item_id#10, i_item_desc#11, i_category#13, i_class#12, i_current_price#7]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#3))#21]
Results [8]: [i_item_id#10, i_item_desc#11, i_category#13, i_class#12, i_current_price#7, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#21,17,2) AS itemrevenue#22, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#21,17,2) AS _w0#23, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#21,17,2) AS _w1#24]

(21) Exchange
Input [8]: [i_item_id#10, i_item_desc#11, i_category#13, i_class#12, i_current_price#7, itemrevenue#22, _w0#23, _w1#24]
Arguments: hashpartitioning(i_class#12, 5), ENSURE_REQUIREMENTS, [id=#25]

(22) Sort [codegen id : 5]
Input [8]: [i_item_id#10, i_item_desc#11, i_category#13, i_class#12, i_current_price#7, itemrevenue#22, _w0#23, _w1#24]
Arguments: [i_class#12 ASC NULLS FIRST], false, 0

(23) Window
Input [8]: [i_item_id#10, i_item_desc#11, i_category#13, i_class#12, i_current_price#7, itemrevenue#22, _w0#23, _w1#24]
Arguments: [sum(_w1#24) windowspecdefinition(i_class#12, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#26], [i_class#12]

(24) Project [codegen id : 6]
Output [7]: [i_item_id#10, i_item_desc#11, i_category#13, i_class#12, i_current_price#7, itemrevenue#22, CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(_w0#23) * 100.00), DecimalType(21,2), true) as decimal(27,2))) / promote_precision(_we0#26)), DecimalType(38,17), true) AS revenueratio#27]
Input [9]: [i_item_id#10, i_item_desc#11, i_category#13, i_class#12, i_current_price#7, itemrevenue#22, _w0#23, _w1#24, _we0#26]

(25) Exchange
Input [7]: [i_item_id#10, i_item_desc#11, i_category#13, i_class#12, i_current_price#7, itemrevenue#22, revenueratio#27]
Arguments: rangepartitioning(i_category#13 ASC NULLS FIRST, i_class#12 ASC NULLS FIRST, i_item_id#10 ASC NULLS FIRST, i_item_desc#11 ASC NULLS FIRST, revenueratio#27 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [id=#28]

(26) Sort [codegen id : 7]
Input [7]: [i_item_id#10, i_item_desc#11, i_category#13, i_class#12, i_current_price#7, itemrevenue#22, revenueratio#27]
Arguments: [i_category#13 ASC NULLS FIRST, i_class#12 ASC NULLS FIRST, i_item_id#10 ASC NULLS FIRST, i_item_desc#11 ASC NULLS FIRST, revenueratio#27 ASC NULLS FIRST], true, 0

