== Physical Plan ==
* Sort (45)
+- Exchange (44)
   +- * Filter (43)
      +- * HashAggregate (42)
         +- Exchange (41)
            +- * HashAggregate (40)
               +- * HashAggregate (39)
                  +- Exchange (38)
                     +- * HashAggregate (37)
                        +- * Project (36)
                           +- * BroadcastHashJoin Inner BuildRight (35)
                              :- * Project (30)
                              :  +- * BroadcastHashJoin Inner BuildRight (29)
                              :     :- * Project (24)
                              :     :  +- * BroadcastHashJoin Inner BuildRight (23)
                              :     :     :- * Project (18)
                              :     :     :  +- * BroadcastHashJoin Inner BuildRight (17)
                              :     :     :     :- * Project (12)
                              :     :     :     :  +- * SortMergeJoin Inner (11)
                              :     :     :     :     :- * Sort (5)
                              :     :     :     :     :  +- Exchange (4)
                              :     :     :     :     :     +- * Project (3)
                              :     :     :     :     :        +- * Filter (2)
                              :     :     :     :     :           +- BatchScan default.store_sales (1)
                              :     :     :     :     +- * Sort (10)
                              :     :     :     :        +- Exchange (9)
                              :     :     :     :           +- * Project (8)
                              :     :     :     :              +- * Filter (7)
                              :     :     :     :                 +- BatchScan default.store_returns (6)
                              :     :     :     +- BroadcastExchange (16)
                              :     :     :        +- * Project (15)
                              :     :     :           +- * Filter (14)
                              :     :     :              +- BatchScan default.store (13)
                              :     :     +- BroadcastExchange (22)
                              :     :        +- * Project (21)
                              :     :           +- * Filter (20)
                              :     :              +- BatchScan default.item (19)
                              :     +- BroadcastExchange (28)
                              :        +- * Project (27)
                              :           +- * Filter (26)
                              :              +- BatchScan default.customer (25)
                              +- BroadcastExchange (34)
                                 +- * Project (33)
                                    +- * Filter (32)
                                       +- BatchScan default.customer_address (31)


(1) BatchScan default.store_sales
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
DataFilters: [isnotnull(ss_ticket_number#4), isnotnull(ss_item_sk#1), isnotnull(ss_store_sk#3), isnotnull(ss_customer_sk#2)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(2) Filter [codegen id : 1]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Condition : (((((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2)) AND might_contain(Subquery scalar-subquery#6, [id=#7], xxhash64(ss_store_sk#3, 42))) AND might_contain(Subquery scalar-subquery#8, [id=#9], xxhash64(ss_item_sk#1, 42)))

(3) Project [codegen id : 1]
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]

(4) Exchange
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Arguments: hashpartitioning(ss_ticket_number#4, ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Arguments: [ss_ticket_number#4 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) BatchScan default.store_returns
Output [2]: [sr_item_sk#10, sr_ticket_number#11]
DataFilters: [isnotnull(sr_ticket_number#11), isnotnull(sr_item_sk#10)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(7) Filter [codegen id : 3]
Input [2]: [sr_item_sk#10, sr_ticket_number#11]
Condition : (isnotnull(sr_ticket_number#11) AND isnotnull(sr_item_sk#10))

(8) Project [codegen id : 3]
Output [2]: [sr_item_sk#10, sr_ticket_number#11]
Input [2]: [sr_item_sk#10, sr_ticket_number#11]

(9) Exchange
Input [2]: [sr_item_sk#10, sr_ticket_number#11]
Arguments: hashpartitioning(sr_ticket_number#11, sr_item_sk#10, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(10) Sort [codegen id : 4]
Input [2]: [sr_item_sk#10, sr_ticket_number#11]
Arguments: [sr_ticket_number#11 ASC NULLS FIRST, sr_item_sk#10 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 9]
Left keys [2]: [ss_ticket_number#4, ss_item_sk#1]
Right keys [2]: [sr_ticket_number#11, sr_item_sk#10]
Join type: Inner
Join condition: None

(12) Project [codegen id : 9]
Output [4]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, sr_item_sk#10, sr_ticket_number#11]

(13) BatchScan default.store
Output [5]: [s_store_sk#12, s_store_name#13, s_market_id#14, s_state#15, s_zip#16]
DataFilters: [isnotnull(s_market_id#14), (s_market_id#14 = 8), isnotnull(s_store_sk#12), isnotnull(s_zip#16)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(14) Filter [codegen id : 5]
Input [5]: [s_store_sk#12, s_store_name#13, s_market_id#14, s_state#15, s_zip#16]
Condition : (((isnotnull(s_market_id#14) AND (s_market_id#14 = 8)) AND isnotnull(s_store_sk#12)) AND isnotnull(s_zip#16))

(15) Project [codegen id : 5]
Output [4]: [s_store_sk#12, s_store_name#13, s_state#15, s_zip#16]
Input [5]: [s_store_sk#12, s_store_name#13, s_market_id#14, s_state#15, s_zip#16]

(16) BroadcastExchange
Input [4]: [s_store_sk#12, s_store_name#13, s_state#15, s_zip#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(17) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#12]
Join type: Inner
Join condition: None

(18) Project [codegen id : 9]
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16]
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5, s_store_sk#12, s_store_name#13, s_state#15, s_zip#16]

(19) BatchScan default.item
Output [6]: [i_item_sk#17, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22]
DataFilters: [isnotnull(i_color#20), (i_color#20 = pale                ), isnotnull(i_item_sk#17)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_color), EqualTo(i_color,pale                ), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(20) Filter [codegen id : 6]
Input [6]: [i_item_sk#17, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22]
Condition : ((isnotnull(i_color#20) AND (i_color#20 = pale                )) AND isnotnull(i_item_sk#17))

(21) Project [codegen id : 6]
Output [6]: [i_item_sk#17, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22]
Input [6]: [i_item_sk#17, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22]

(22) BroadcastExchange
Input [6]: [i_item_sk#17, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(23) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#17]
Join type: Inner
Join condition: None

(24) Project [codegen id : 9]
Output [10]: [ss_customer_sk#2, ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16, i_item_sk#17, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22]

(25) BatchScan default.customer
Output [5]: [c_customer_sk#23, c_current_addr_sk#24, c_first_name#25, c_last_name#26, c_birth_country#27]
DataFilters: [isnotnull(c_customer_sk#23), isnotnull(c_current_addr_sk#24), isnotnull(c_birth_country#27)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(26) Filter [codegen id : 7]
Input [5]: [c_customer_sk#23, c_current_addr_sk#24, c_first_name#25, c_last_name#26, c_birth_country#27]
Condition : ((isnotnull(c_customer_sk#23) AND isnotnull(c_current_addr_sk#24)) AND isnotnull(c_birth_country#27))

(27) Project [codegen id : 7]
Output [5]: [c_customer_sk#23, c_current_addr_sk#24, c_first_name#25, c_last_name#26, c_birth_country#27]
Input [5]: [c_customer_sk#23, c_current_addr_sk#24, c_first_name#25, c_last_name#26, c_birth_country#27]

(28) BroadcastExchange
Input [5]: [c_customer_sk#23, c_current_addr_sk#24, c_first_name#25, c_last_name#26, c_birth_country#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(29) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#23]
Join type: Inner
Join condition: None

(30) Project [codegen id : 9]
Output [13]: [ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22, c_current_addr_sk#24, c_first_name#25, c_last_name#26, c_birth_country#27]
Input [15]: [ss_customer_sk#2, ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22, c_customer_sk#23, c_current_addr_sk#24, c_first_name#25, c_last_name#26, c_birth_country#27]

(31) BatchScan default.customer_address
Output [4]: [ca_address_sk#28, ca_state#29, ca_zip#30, ca_country#31]
DataFilters: [isnotnull(ca_address_sk#28), isnotnull(ca_country#31), isnotnull(ca_zip#30)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_zip:string,ca_country:string>

(32) Filter [codegen id : 8]
Input [4]: [ca_address_sk#28, ca_state#29, ca_zip#30, ca_country#31]
Condition : ((isnotnull(ca_address_sk#28) AND isnotnull(ca_country#31)) AND isnotnull(ca_zip#30))

(33) Project [codegen id : 8]
Output [4]: [ca_address_sk#28, ca_state#29, ca_zip#30, ca_country#31]
Input [4]: [ca_address_sk#28, ca_state#29, ca_zip#30, ca_country#31]

(34) BroadcastExchange
Input [4]: [ca_address_sk#28, ca_state#29, ca_zip#30, ca_country#31]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], upper(input[3, string, true]), input[2, string, true]),false), [plan_id=6]

(35) BroadcastHashJoin [codegen id : 9]
Left keys [3]: [c_current_addr_sk#24, c_birth_country#27, s_zip#16]
Right keys [3]: [ca_address_sk#28, upper(ca_country#31), ca_zip#30]
Join type: Inner
Join condition: None

(36) Project [codegen id : 9]
Output [11]: [ss_net_paid#5, s_store_name#13, s_state#15, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22, c_first_name#25, c_last_name#26, ca_state#29]
Input [17]: [ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22, c_current_addr_sk#24, c_first_name#25, c_last_name#26, c_birth_country#27, ca_address_sk#28, ca_state#29, ca_zip#30, ca_country#31]

(37) HashAggregate [codegen id : 9]
Input [11]: [ss_net_paid#5, s_store_name#13, s_state#15, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22, c_first_name#25, c_last_name#26, ca_state#29]
Keys [10]: [c_last_name#26, c_first_name#25, s_store_name#13, ca_state#29, s_state#15, i_color#20, i_current_price#18, i_manager_id#22, i_units#21, i_size#19]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum#32]
Results [11]: [c_last_name#26, c_first_name#25, s_store_name#13, ca_state#29, s_state#15, i_color#20, i_current_price#18, i_manager_id#22, i_units#21, i_size#19, sum#33]

(38) Exchange
Input [11]: [c_last_name#26, c_first_name#25, s_store_name#13, ca_state#29, s_state#15, i_color#20, i_current_price#18, i_manager_id#22, i_units#21, i_size#19, sum#33]
Arguments: hashpartitioning(c_last_name#26, c_first_name#25, s_store_name#13, ca_state#29, s_state#15, i_color#20, i_current_price#18, i_manager_id#22, i_units#21, i_size#19, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(39) HashAggregate [codegen id : 10]
Input [11]: [c_last_name#26, c_first_name#25, s_store_name#13, ca_state#29, s_state#15, i_color#20, i_current_price#18, i_manager_id#22, i_units#21, i_size#19, sum#33]
Keys [10]: [c_last_name#26, c_first_name#25, s_store_name#13, ca_state#29, s_state#15, i_color#20, i_current_price#18, i_manager_id#22, i_units#21, i_size#19]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#5))#34]
Results [4]: [c_last_name#26, c_first_name#25, s_store_name#13, MakeDecimal(sum(UnscaledValue(ss_net_paid#5))#34,17,2) AS netpaid#35]

(40) HashAggregate [codegen id : 10]
Input [4]: [c_last_name#26, c_first_name#25, s_store_name#13, netpaid#35]
Keys [3]: [c_last_name#26, c_first_name#25, s_store_name#13]
Functions [1]: [partial_sum(netpaid#35)]
Aggregate Attributes [2]: [sum#36, isEmpty#37]
Results [5]: [c_last_name#26, c_first_name#25, s_store_name#13, sum#38, isEmpty#39]

(41) Exchange
Input [5]: [c_last_name#26, c_first_name#25, s_store_name#13, sum#38, isEmpty#39]
Arguments: hashpartitioning(c_last_name#26, c_first_name#25, s_store_name#13, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(42) HashAggregate [codegen id : 11]
Input [5]: [c_last_name#26, c_first_name#25, s_store_name#13, sum#38, isEmpty#39]
Keys [3]: [c_last_name#26, c_first_name#25, s_store_name#13]
Functions [1]: [sum(netpaid#35)]
Aggregate Attributes [1]: [sum(netpaid#35)#40]
Results [4]: [c_last_name#26, c_first_name#25, s_store_name#13, sum(netpaid#35)#40 AS paid#41]

(43) Filter [codegen id : 11]
Input [4]: [c_last_name#26, c_first_name#25, s_store_name#13, paid#41]
Condition : (isnotnull(paid#41) AND (cast(paid#41 as decimal(33,8)) > cast(Subquery scalar-subquery#42, [id=#43] as decimal(33,8))))

(44) Exchange
Input [4]: [c_last_name#26, c_first_name#25, s_store_name#13, paid#41]
Arguments: rangepartitioning(c_last_name#26 ASC NULLS FIRST, c_first_name#25 ASC NULLS FIRST, s_store_name#13 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(45) Sort [codegen id : 12]
Input [4]: [c_last_name#26, c_first_name#25, s_store_name#13, paid#41]
Arguments: [c_last_name#26 ASC NULLS FIRST, c_first_name#25 ASC NULLS FIRST, s_store_name#13 ASC NULLS FIRST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 43 Hosting Expression = Subquery scalar-subquery#42, [id=#43]
* HashAggregate (75)
+- Exchange (74)
   +- * HashAggregate (73)
      +- * HashAggregate (72)
         +- Exchange (71)
            +- * HashAggregate (70)
               +- * Project (69)
                  +- * BroadcastHashJoin Inner BuildRight (68)
                     :- * Project (66)
                     :  +- * BroadcastHashJoin Inner BuildRight (65)
                     :     :- * Project (63)
                     :     :  +- * BroadcastHashJoin Inner BuildRight (62)
                     :     :     :- * Project (57)
                     :     :     :  +- * BroadcastHashJoin Inner BuildRight (56)
                     :     :     :     :- * Project (54)
                     :     :     :     :  +- * SortMergeJoin Inner (53)
                     :     :     :     :     :- * Sort (50)
                     :     :     :     :     :  +- Exchange (49)
                     :     :     :     :     :     +- * Project (48)
                     :     :     :     :     :        +- * Filter (47)
                     :     :     :     :     :           +- BatchScan default.store_sales (46)
                     :     :     :     :     +- * Sort (52)
                     :     :     :     :        +- ReusedExchange (51)
                     :     :     :     +- ReusedExchange (55)
                     :     :     +- BroadcastExchange (61)
                     :     :        +- * Project (60)
                     :     :           +- * Filter (59)
                     :     :              +- BatchScan default.item (58)
                     :     +- ReusedExchange (64)
                     +- ReusedExchange (67)


(46) BatchScan default.store_sales
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
DataFilters: [isnotnull(ss_ticket_number#4), isnotnull(ss_item_sk#1), isnotnull(ss_store_sk#3), isnotnull(ss_customer_sk#2)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(47) Filter [codegen id : 1]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Condition : ((((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2)) AND might_contain(ReusedSubquery Subquery scalar-subquery#6, [id=#7], xxhash64(ss_store_sk#3, 42)))

(48) Project [codegen id : 1]
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]

(49) Exchange
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Arguments: hashpartitioning(ss_ticket_number#4, ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(50) Sort [codegen id : 2]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Arguments: [ss_ticket_number#4 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST], false, 0

(51) ReusedExchange [Reuses operator id: 9]
Output [2]: [sr_item_sk#10, sr_ticket_number#11]

(52) Sort [codegen id : 4]
Input [2]: [sr_item_sk#10, sr_ticket_number#11]
Arguments: [sr_ticket_number#11 ASC NULLS FIRST, sr_item_sk#10 ASC NULLS FIRST], false, 0

(53) SortMergeJoin [codegen id : 9]
Left keys [2]: [ss_ticket_number#4, ss_item_sk#1]
Right keys [2]: [sr_ticket_number#11, sr_item_sk#10]
Join type: Inner
Join condition: None

(54) Project [codegen id : 9]
Output [4]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, sr_item_sk#10, sr_ticket_number#11]

(55) ReusedExchange [Reuses operator id: 16]
Output [4]: [s_store_sk#12, s_store_name#13, s_state#15, s_zip#16]

(56) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#12]
Join type: Inner
Join condition: None

(57) Project [codegen id : 9]
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16]
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5, s_store_sk#12, s_store_name#13, s_state#15, s_zip#16]

(58) BatchScan default.item
Output [6]: [i_item_sk#17, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22]
DataFilters: [isnotnull(i_item_sk#17)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(59) Filter [codegen id : 6]
Input [6]: [i_item_sk#17, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22]
Condition : isnotnull(i_item_sk#17)

(60) Project [codegen id : 6]
Output [6]: [i_item_sk#17, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22]
Input [6]: [i_item_sk#17, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22]

(61) BroadcastExchange
Input [6]: [i_item_sk#17, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=11]

(62) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#17]
Join type: Inner
Join condition: None

(63) Project [codegen id : 9]
Output [10]: [ss_customer_sk#2, ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16, i_item_sk#17, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22]

(64) ReusedExchange [Reuses operator id: 28]
Output [5]: [c_customer_sk#23, c_current_addr_sk#24, c_first_name#25, c_last_name#26, c_birth_country#27]

(65) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#23]
Join type: Inner
Join condition: None

(66) Project [codegen id : 9]
Output [13]: [ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22, c_current_addr_sk#24, c_first_name#25, c_last_name#26, c_birth_country#27]
Input [15]: [ss_customer_sk#2, ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22, c_customer_sk#23, c_current_addr_sk#24, c_first_name#25, c_last_name#26, c_birth_country#27]

(67) ReusedExchange [Reuses operator id: 34]
Output [4]: [ca_address_sk#28, ca_state#29, ca_zip#30, ca_country#31]

(68) BroadcastHashJoin [codegen id : 9]
Left keys [3]: [c_current_addr_sk#24, c_birth_country#27, s_zip#16]
Right keys [3]: [ca_address_sk#28, upper(ca_country#31), ca_zip#30]
Join type: Inner
Join condition: None

(69) Project [codegen id : 9]
Output [11]: [ss_net_paid#5, s_store_name#13, s_state#15, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22, c_first_name#25, c_last_name#26, ca_state#29]
Input [17]: [ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22, c_current_addr_sk#24, c_first_name#25, c_last_name#26, c_birth_country#27, ca_address_sk#28, ca_state#29, ca_zip#30, ca_country#31]

(70) HashAggregate [codegen id : 9]
Input [11]: [ss_net_paid#5, s_store_name#13, s_state#15, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22, c_first_name#25, c_last_name#26, ca_state#29]
Keys [10]: [c_last_name#26, c_first_name#25, s_store_name#13, ca_state#29, s_state#15, i_color#20, i_current_price#18, i_manager_id#22, i_units#21, i_size#19]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum#44]
Results [11]: [c_last_name#26, c_first_name#25, s_store_name#13, ca_state#29, s_state#15, i_color#20, i_current_price#18, i_manager_id#22, i_units#21, i_size#19, sum#45]

(71) Exchange
Input [11]: [c_last_name#26, c_first_name#25, s_store_name#13, ca_state#29, s_state#15, i_color#20, i_current_price#18, i_manager_id#22, i_units#21, i_size#19, sum#45]
Arguments: hashpartitioning(c_last_name#26, c_first_name#25, s_store_name#13, ca_state#29, s_state#15, i_color#20, i_current_price#18, i_manager_id#22, i_units#21, i_size#19, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(72) HashAggregate [codegen id : 10]
Input [11]: [c_last_name#26, c_first_name#25, s_store_name#13, ca_state#29, s_state#15, i_color#20, i_current_price#18, i_manager_id#22, i_units#21, i_size#19, sum#45]
Keys [10]: [c_last_name#26, c_first_name#25, s_store_name#13, ca_state#29, s_state#15, i_color#20, i_current_price#18, i_manager_id#22, i_units#21, i_size#19]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#5))#34]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_paid#5))#34,17,2) AS netpaid#35]

(73) HashAggregate [codegen id : 10]
Input [1]: [netpaid#35]
Keys: []
Functions [1]: [partial_avg(netpaid#35)]
Aggregate Attributes [2]: [sum#46, count#47]
Results [2]: [sum#48, count#49]

(74) Exchange
Input [2]: [sum#48, count#49]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=13]

(75) HashAggregate [codegen id : 11]
Input [2]: [sum#48, count#49]
Keys: []
Functions [1]: [avg(netpaid#35)]
Aggregate Attributes [1]: [avg(netpaid#35)#50]
Results [1]: [(0.05 * avg(netpaid#35)#50) AS (0.05 * avg(netpaid))#51]

Subquery:2 Hosting operator id = 47 Hosting Expression = ReusedSubquery Subquery scalar-subquery#6, [id=#7]

Subquery:3 Hosting operator id = 2 Hosting Expression = Subquery scalar-subquery#6, [id=#7]
ObjectHashAggregate (81)
+- Exchange (80)
   +- ObjectHashAggregate (79)
      +- * Project (78)
         +- * Filter (77)
            +- BatchScan default.store (76)


(76) BatchScan default.store
Output [5]: [s_store_sk#12, s_store_name#13, s_market_id#14, s_state#15, s_zip#16]
DataFilters: [isnotnull(s_market_id#14), (s_market_id#14 = 8), isnotnull(s_store_sk#12), isnotnull(s_zip#16)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(77) Filter [codegen id : 1]
Input [5]: [s_store_sk#12, s_store_name#13, s_market_id#14, s_state#15, s_zip#16]
Condition : (((isnotnull(s_market_id#14) AND (s_market_id#14 = 8)) AND isnotnull(s_store_sk#12)) AND isnotnull(s_zip#16))

(78) Project [codegen id : 1]
Output [1]: [s_store_sk#12]
Input [5]: [s_store_sk#12, s_store_name#13, s_market_id#14, s_state#15, s_zip#16]

(79) ObjectHashAggregate
Input [1]: [s_store_sk#12]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(s_store_sk#12, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#52]
Results [1]: [buf#53]

(80) Exchange
Input [1]: [buf#53]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=14]

(81) ObjectHashAggregate
Input [1]: [buf#53]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(s_store_sk#12, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(s_store_sk#12, 42), 1000000, 8388608, 0, 0)#54]
Results [1]: [bloom_filter_agg(xxhash64(s_store_sk#12, 42), 1000000, 8388608, 0, 0)#54 AS bloomFilter#55]

Subquery:4 Hosting operator id = 2 Hosting Expression = Subquery scalar-subquery#8, [id=#9]
ObjectHashAggregate (87)
+- Exchange (86)
   +- ObjectHashAggregate (85)
      +- * Project (84)
         +- * Filter (83)
            +- BatchScan default.item (82)


(82) BatchScan default.item
Output [6]: [i_item_sk#17, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22]
DataFilters: [isnotnull(i_color#20), (i_color#20 = pale                ), isnotnull(i_item_sk#17)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_color), EqualTo(i_color,pale                ), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(83) Filter [codegen id : 1]
Input [6]: [i_item_sk#17, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22]
Condition : ((isnotnull(i_color#20) AND (i_color#20 = pale                )) AND isnotnull(i_item_sk#17))

(84) Project [codegen id : 1]
Output [1]: [i_item_sk#17]
Input [6]: [i_item_sk#17, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22]

(85) ObjectHashAggregate
Input [1]: [i_item_sk#17]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(i_item_sk#17, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#56]
Results [1]: [buf#57]

(86) Exchange
Input [1]: [buf#57]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=15]

(87) ObjectHashAggregate
Input [1]: [buf#57]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(i_item_sk#17, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(i_item_sk#17, 42), 1000000, 8388608, 0, 0)#58]
Results [1]: [bloom_filter_agg(xxhash64(i_item_sk#17, 42), 1000000, 8388608, 0, 0)#58 AS bloomFilter#59]


