== Physical Plan ==
TakeOrderedAndProject (46)
+- * Project (45)
   +- Window (44)
      +- * Sort (43)
         +- Exchange (42)
            +- * HashAggregate (41)
               +- Exchange (40)
                  +- * HashAggregate (39)
                     +- Union (38)
                        :- * HashAggregate (27)
                        :  +- Exchange (26)
                        :     +- * HashAggregate (25)
                        :        +- * Project (24)
                        :           +- * BroadcastHashJoin Inner BuildRight (23)
                        :              :- * Project (17)
                        :              :  +- * BroadcastHashJoin Inner BuildRight (16)
                        :              :     :- * Project (10)
                        :              :     :  +- * BroadcastHashJoin Inner BuildRight (9)
                        :              :     :     :- * Filter (3)
                        :              :     :     :  +- * ColumnarToRow (2)
                        :              :     :     :     +- Scan parquet default.store_sales (1)
                        :              :     :     +- BroadcastExchange (8)
                        :              :     :        +- * Project (7)
                        :              :     :           +- * Filter (6)
                        :              :     :              +- * ColumnarToRow (5)
                        :              :     :                 +- Scan parquet default.date_dim (4)
                        :              :     +- BroadcastExchange (15)
                        :              :        +- * Project (14)
                        :              :           +- * Filter (13)
                        :              :              +- * ColumnarToRow (12)
                        :              :                 +- Scan parquet default.item (11)
                        :              +- BroadcastExchange (22)
                        :                 +- * Project (21)
                        :                    +- * Filter (20)
                        :                       +- * ColumnarToRow (19)
                        :                          +- Scan parquet default.store (18)
                        :- * HashAggregate (32)
                        :  +- Exchange (31)
                        :     +- * HashAggregate (30)
                        :        +- * HashAggregate (29)
                        :           +- ReusedExchange (28)
                        +- * HashAggregate (37)
                           +- Exchange (36)
                              +- * HashAggregate (35)
                                 +- * HashAggregate (34)
                                    +- ReusedExchange (33)


(1) Scan parquet default.store_sales
Output [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5]

(3) Filter [codegen id : 4]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5]
Condition : ((isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_item_sk#2)) AND isnotnull(ss_store_sk#3))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_year#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#7]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#7]
Condition : ((isnotnull(d_year#7) AND (d_year#7 = 2001)) AND isnotnull(d_date_sk#6))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_year#7]

(8) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#6]
Join condition: None

(10) Project [codegen id : 4]
Output [4]: [ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5, d_date_sk#6]

(11) Scan parquet default.item
Output [3]: [i_item_sk#9, i_class#10, i_category#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(12) ColumnarToRow [codegen id : 2]
Input [3]: [i_item_sk#9, i_class#10, i_category#11]

(13) Filter [codegen id : 2]
Input [3]: [i_item_sk#9, i_class#10, i_category#11]
Condition : isnotnull(i_item_sk#9)

(14) Project [codegen id : 2]
Output [3]: [i_item_sk#9, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_class#10, 50, false, true) AS i_class#12, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#11, 50, false, true) AS i_category#13]
Input [3]: [i_item_sk#9, i_class#10, i_category#11]

(15) BroadcastExchange
Input [3]: [i_item_sk#9, i_class#12, i_category#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(16) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#9]
Join condition: None

(17) Project [codegen id : 4]
Output [5]: [ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5, i_class#12, i_category#13]
Input [7]: [ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5, i_item_sk#9, i_class#12, i_category#13]

(18) Scan parquet default.store
Output [2]: [s_store_sk#15, s_state#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(19) ColumnarToRow [codegen id : 3]
Input [2]: [s_store_sk#15, s_state#16]

(20) Filter [codegen id : 3]
Input [2]: [s_store_sk#15, s_state#16]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#16, 2, false, true) = TN) AND isnotnull(s_store_sk#15))

(21) Project [codegen id : 3]
Output [1]: [s_store_sk#15]
Input [2]: [s_store_sk#15, s_state#16]

(22) BroadcastExchange
Input [1]: [s_store_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#17]

(23) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#15]
Join condition: None

(24) Project [codegen id : 4]
Output [4]: [ss_ext_sales_price#4, ss_net_profit#5, i_class#12, i_category#13]
Input [6]: [ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5, i_class#12, i_category#13, s_store_sk#15]

(25) HashAggregate [codegen id : 4]
Input [4]: [ss_ext_sales_price#4, ss_net_profit#5, i_class#12, i_category#13]
Keys [2]: [i_category#13, i_class#12]
Functions [2]: [partial_sum(UnscaledValue(ss_net_profit#5)), partial_sum(UnscaledValue(ss_ext_sales_price#4))]
Aggregate Attributes [2]: [sum#18, sum#19]
Results [4]: [i_category#13, i_class#12, sum#20, sum#21]

(26) Exchange
Input [4]: [i_category#13, i_class#12, sum#20, sum#21]
Arguments: hashpartitioning(i_category#13, i_class#12, 5), ENSURE_REQUIREMENTS, [id=#22]

(27) HashAggregate [codegen id : 5]
Input [4]: [i_category#13, i_class#12, sum#20, sum#21]
Keys [2]: [i_category#13, i_class#12]
Functions [2]: [sum(UnscaledValue(ss_net_profit#5)), sum(UnscaledValue(ss_ext_sales_price#4))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#5))#23, sum(UnscaledValue(ss_ext_sales_price#4))#24]
Results [6]: [cast(CheckOverflow((promote_precision(MakeDecimal(sum(UnscaledValue(ss_net_profit#5))#23,17,2)) / promote_precision(MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#4))#24,17,2))), DecimalType(37,20), true) as decimal(38,20)) AS gross_margin#25, i_category#13, i_class#12, 0 AS t_category#26, 0 AS t_class#27, 0 AS lochierarchy#28]

(28) ReusedExchange [Reuses operator id: 26]
Output [4]: [i_category#29, i_class#30, sum#31, sum#32]

(29) HashAggregate [codegen id : 10]
Input [4]: [i_category#29, i_class#30, sum#31, sum#32]
Keys [2]: [i_category#29, i_class#30]
Functions [2]: [sum(UnscaledValue(ss_net_profit#5)), sum(UnscaledValue(ss_ext_sales_price#4))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#5))#33, sum(UnscaledValue(ss_ext_sales_price#4))#34]
Results [3]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#5))#33,17,2) AS ss_net_profit#35, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#4))#34,17,2) AS ss_ext_sales_price#36, i_category#29]

(30) HashAggregate [codegen id : 10]
Input [3]: [ss_net_profit#35, ss_ext_sales_price#36, i_category#29]
Keys [1]: [i_category#29]
Functions [2]: [partial_sum(ss_net_profit#35), partial_sum(ss_ext_sales_price#36)]
Aggregate Attributes [4]: [sum#37, isEmpty#38, sum#39, isEmpty#40]
Results [5]: [i_category#29, sum#41, isEmpty#42, sum#43, isEmpty#44]

(31) Exchange
Input [5]: [i_category#29, sum#41, isEmpty#42, sum#43, isEmpty#44]
Arguments: hashpartitioning(i_category#29, 5), ENSURE_REQUIREMENTS, [id=#45]

(32) HashAggregate [codegen id : 11]
Input [5]: [i_category#29, sum#41, isEmpty#42, sum#43, isEmpty#44]
Keys [1]: [i_category#29]
Functions [2]: [sum(ss_net_profit#35), sum(ss_ext_sales_price#36)]
Aggregate Attributes [2]: [sum(ss_net_profit#35)#46, sum(ss_ext_sales_price#36)#47]
Results [6]: [cast(CheckOverflow((promote_precision(sum(ss_net_profit#35)#46) / promote_precision(sum(ss_ext_sales_price#36)#47)), DecimalType(38,11), true) as decimal(38,20)) AS gross_margin#48, i_category#29 AS i_category#49, null AS i_class#50, 0 AS t_category#51, 1 AS t_class#52, 1 AS lochierarchy#53]

(33) ReusedExchange [Reuses operator id: 26]
Output [4]: [i_category#54, i_class#55, sum#56, sum#57]

(34) HashAggregate [codegen id : 16]
Input [4]: [i_category#54, i_class#55, sum#56, sum#57]
Keys [2]: [i_category#54, i_class#55]
Functions [2]: [sum(UnscaledValue(ss_net_profit#5)), sum(UnscaledValue(ss_ext_sales_price#4))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#5))#58, sum(UnscaledValue(ss_ext_sales_price#4))#59]
Results [2]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#5))#58,17,2) AS ss_net_profit#35, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#4))#59,17,2) AS ss_ext_sales_price#36]

(35) HashAggregate [codegen id : 16]
Input [2]: [ss_net_profit#35, ss_ext_sales_price#36]
Keys: []
Functions [2]: [partial_sum(ss_net_profit#35), partial_sum(ss_ext_sales_price#36)]
Aggregate Attributes [4]: [sum#60, isEmpty#61, sum#62, isEmpty#63]
Results [4]: [sum#64, isEmpty#65, sum#66, isEmpty#67]

(36) Exchange
Input [4]: [sum#64, isEmpty#65, sum#66, isEmpty#67]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#68]

(37) HashAggregate [codegen id : 17]
Input [4]: [sum#64, isEmpty#65, sum#66, isEmpty#67]
Keys: []
Functions [2]: [sum(ss_net_profit#35), sum(ss_ext_sales_price#36)]
Aggregate Attributes [2]: [sum(ss_net_profit#35)#69, sum(ss_ext_sales_price#36)#70]
Results [6]: [cast(CheckOverflow((promote_precision(sum(ss_net_profit#35)#69) / promote_precision(sum(ss_ext_sales_price#36)#70)), DecimalType(38,11), true) as decimal(38,20)) AS gross_margin#71, null AS i_category#72, null AS i_class#73, 1 AS t_category#74, 1 AS t_class#75, 2 AS lochierarchy#76]

(38) Union

(39) HashAggregate [codegen id : 18]
Input [6]: [gross_margin#25, i_category#13, i_class#12, t_category#26, t_class#27, lochierarchy#28]
Keys [6]: [gross_margin#25, i_category#13, i_class#12, t_category#26, t_class#27, lochierarchy#28]
Functions: []
Aggregate Attributes: []
Results [6]: [gross_margin#25, i_category#13, i_class#12, t_category#26, t_class#27, lochierarchy#28]

(40) Exchange
Input [6]: [gross_margin#25, i_category#13, i_class#12, t_category#26, t_class#27, lochierarchy#28]
Arguments: hashpartitioning(gross_margin#25, i_category#13, i_class#12, t_category#26, t_class#27, lochierarchy#28, 5), ENSURE_REQUIREMENTS, [id=#77]

(41) HashAggregate [codegen id : 19]
Input [6]: [gross_margin#25, i_category#13, i_class#12, t_category#26, t_class#27, lochierarchy#28]
Keys [6]: [gross_margin#25, i_category#13, i_class#12, t_category#26, t_class#27, lochierarchy#28]
Functions: []
Aggregate Attributes: []
Results [5]: [gross_margin#25, i_category#13, i_class#12, lochierarchy#28, CASE WHEN (t_class#27 = 0) THEN i_category#13 END AS _w0#78]

(42) Exchange
Input [5]: [gross_margin#25, i_category#13, i_class#12, lochierarchy#28, _w0#78]
Arguments: hashpartitioning(lochierarchy#28, _w0#78, 5), ENSURE_REQUIREMENTS, [id=#79]

(43) Sort [codegen id : 20]
Input [5]: [gross_margin#25, i_category#13, i_class#12, lochierarchy#28, _w0#78]
Arguments: [lochierarchy#28 ASC NULLS FIRST, _w0#78 ASC NULLS FIRST, gross_margin#25 ASC NULLS FIRST], false, 0

(44) Window
Input [5]: [gross_margin#25, i_category#13, i_class#12, lochierarchy#28, _w0#78]
Arguments: [rank(gross_margin#25) windowspecdefinition(lochierarchy#28, _w0#78, gross_margin#25 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#80], [lochierarchy#28, _w0#78], [gross_margin#25 ASC NULLS FIRST]

(45) Project [codegen id : 21]
Output [5]: [gross_margin#25, i_category#13, i_class#12, lochierarchy#28, rank_within_parent#80]
Input [6]: [gross_margin#25, i_category#13, i_class#12, lochierarchy#28, _w0#78, rank_within_parent#80]

(46) TakeOrderedAndProject
Input [5]: [gross_margin#25, i_category#13, i_class#12, lochierarchy#28, rank_within_parent#80]
Arguments: 100, [lochierarchy#28 DESC NULLS LAST, CASE WHEN (lochierarchy#28 = 0) THEN i_category#13 END ASC NULLS FIRST, rank_within_parent#80 ASC NULLS FIRST], [gross_margin#25, i_category#13, i_class#12, lochierarchy#28, rank_within_parent#80]

