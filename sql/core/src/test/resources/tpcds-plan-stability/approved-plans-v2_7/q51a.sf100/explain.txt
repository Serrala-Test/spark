== Physical Plan ==
TakeOrderedAndProject (80)
+- * Filter (79)
   +- * HashAggregate (78)
      +- * HashAggregate (77)
         +- * Project (76)
            +- * SortMergeJoin Inner (75)
               :- * Filter (69)
               :  +- Window (68)
               :     +- * Sort (67)
               :        +- Exchange (66)
               :           +- * Project (65)
               :              +- * Filter (64)
               :                 +- SortMergeJoin FullOuter (63)
               :                    :- * Sort (31)
               :                    :  +- Exchange (30)
               :                    :     +- * HashAggregate (29)
               :                    :        +- Exchange (28)
               :                    :           +- * HashAggregate (27)
               :                    :              +- * Project (26)
               :                    :                 +- * BroadcastHashJoin Inner BuildRight (25)
               :                    :                    :- * Project (18)
               :                    :                    :  +- * Filter (17)
               :                    :                    :     +- Window (16)
               :                    :                    :        +- * Sort (15)
               :                    :                    :           +- Exchange (14)
               :                    :                    :              +- * HashAggregate (13)
               :                    :                    :                 +- Exchange (12)
               :                    :                    :                    +- * HashAggregate (11)
               :                    :                    :                       +- * Project (10)
               :                    :                    :                          +- * BroadcastHashJoin Inner BuildLeft (9)
               :                    :                    :                             :- BroadcastExchange (4)
               :                    :                    :                             :  +- * Filter (3)
               :                    :                    :                             :     +- * ColumnarToRow (2)
               :                    :                    :                             :        +- Scan parquet default.web_sales (1)
               :                    :                    :                             +- * Project (8)
               :                    :                    :                                +- * Filter (7)
               :                    :                    :                                   +- * ColumnarToRow (6)
               :                    :                    :                                      +- Scan parquet default.date_dim (5)
               :                    :                    +- BroadcastExchange (24)
               :                    :                       +- * Project (23)
               :                    :                          +- * Filter (22)
               :                    :                             +- Window (21)
               :                    :                                +- * Sort (20)
               :                    :                                   +- ReusedExchange (19)
               :                    +- * Sort (62)
               :                       +- Exchange (61)
               :                          +- * HashAggregate (60)
               :                             +- Exchange (59)
               :                                +- * HashAggregate (58)
               :                                   +- * Project (57)
               :                                      +- * BroadcastHashJoin Inner BuildRight (56)
               :                                         :- * Project (49)
               :                                         :  +- * Filter (48)
               :                                         :     +- Window (47)
               :                                         :        +- * Sort (46)
               :                                         :           +- Exchange (45)
               :                                         :              +- * HashAggregate (44)
               :                                         :                 +- Exchange (43)
               :                                         :                    +- * HashAggregate (42)
               :                                         :                       +- * Project (41)
               :                                         :                          +- * BroadcastHashJoin Inner BuildLeft (40)
               :                                         :                             :- BroadcastExchange (35)
               :                                         :                             :  +- * Filter (34)
               :                                         :                             :     +- * ColumnarToRow (33)
               :                                         :                             :        +- Scan parquet default.store_sales (32)
               :                                         :                             +- * Project (39)
               :                                         :                                +- * Filter (38)
               :                                         :                                   +- * ColumnarToRow (37)
               :                                         :                                      +- Scan parquet default.date_dim (36)
               :                                         +- BroadcastExchange (55)
               :                                            +- * Project (54)
               :                                               +- * Filter (53)
               :                                                  +- Window (52)
               :                                                     +- * Sort (51)
               :                                                        +- ReusedExchange (50)
               +- * Project (74)
                  +- * Filter (73)
                     +- Window (72)
                        +- * Sort (71)
                           +- ReusedExchange (70)


(1) Scan parquet default.web_sales
Output [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#3), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]

(3) Filter [codegen id : 1]
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Condition : isnotnull(ws_item_sk#1)

(4) BroadcastExchange
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#4]

(5) Scan parquet default.date_dim
Output [3]: [d_date_sk#5, d_date#6, d_month_seq#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(6) ColumnarToRow
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#7]

(7) Filter
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#7]
Condition : (((isnotnull(d_month_seq#7) AND (d_month_seq#7 >= 1212)) AND (d_month_seq#7 <= 1223)) AND isnotnull(d_date_sk#5))

(8) Project
Output [2]: [d_date_sk#5, d_date#6]
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#7]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join condition: None

(10) Project [codegen id : 2]
Output [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]
Input [5]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3, d_date_sk#5, d_date#6]

(11) HashAggregate [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum#8]
Results [3]: [ws_item_sk#1, d_date#6, sum#9]

(12) Exchange
Input [3]: [ws_item_sk#1, d_date#6, sum#9]
Arguments: hashpartitioning(ws_item_sk#1, d_date#6, 5), ENSURE_REQUIREMENTS, [id=#10]

(13) HashAggregate [codegen id : 3]
Input [3]: [ws_item_sk#1, d_date#6, sum#9]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_sales_price#2))#11]
Results [4]: [ws_item_sk#1 AS item_sk#12, d_date#6, MakeDecimal(sum(UnscaledValue(ws_sales_price#2))#11,17,2) AS sumws#13, ws_item_sk#1]

(14) Exchange
Input [4]: [item_sk#12, d_date#6, sumws#13, ws_item_sk#1]
Arguments: hashpartitioning(ws_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#14]

(15) Sort [codegen id : 4]
Input [4]: [item_sk#12, d_date#6, sumws#13, ws_item_sk#1]
Arguments: [ws_item_sk#1 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST], false, 0

(16) Window
Input [4]: [item_sk#12, d_date#6, sumws#13, ws_item_sk#1]
Arguments: [row_number() windowspecdefinition(ws_item_sk#1, d_date#6 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#15], [ws_item_sk#1], [d_date#6 ASC NULLS FIRST]

(17) Filter [codegen id : 10]
Input [5]: [item_sk#12, d_date#6, sumws#13, ws_item_sk#1, rk#15]
Condition : isnotnull(rk#15)

(18) Project [codegen id : 10]
Output [4]: [item_sk#12, d_date#6, sumws#13, rk#15]
Input [5]: [item_sk#12, d_date#6, sumws#13, ws_item_sk#1, rk#15]

(19) ReusedExchange [Reuses operator id: 14]
Output [4]: [item_sk#16, d_date#17, sumws#18, ws_item_sk#1]

(20) Sort [codegen id : 8]
Input [4]: [item_sk#16, d_date#17, sumws#18, ws_item_sk#1]
Arguments: [ws_item_sk#1 ASC NULLS FIRST, d_date#17 ASC NULLS FIRST], false, 0

(21) Window
Input [4]: [item_sk#16, d_date#17, sumws#18, ws_item_sk#1]
Arguments: [row_number() windowspecdefinition(ws_item_sk#1, d_date#17 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#19], [ws_item_sk#1], [d_date#17 ASC NULLS FIRST]

(22) Filter [codegen id : 9]
Input [5]: [item_sk#16, d_date#17, sumws#18, ws_item_sk#1, rk#19]
Condition : isnotnull(rk#19)

(23) Project [codegen id : 9]
Output [3]: [item_sk#16, sumws#18, rk#19]
Input [5]: [item_sk#16, d_date#17, sumws#18, ws_item_sk#1, rk#19]

(24) BroadcastExchange
Input [3]: [item_sk#16, sumws#18, rk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#20]

(25) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [item_sk#12]
Right keys [1]: [item_sk#16]
Join condition: (rk#15 >= rk#19)

(26) Project [codegen id : 10]
Output [4]: [item_sk#12, d_date#6, sumws#13, sumws#18]
Input [7]: [item_sk#12, d_date#6, sumws#13, rk#15, item_sk#16, sumws#18, rk#19]

(27) HashAggregate [codegen id : 10]
Input [4]: [item_sk#12, d_date#6, sumws#13, sumws#18]
Keys [3]: [item_sk#12, d_date#6, sumws#13]
Functions [1]: [partial_sum(sumws#18)]
Aggregate Attributes [2]: [sum#21, isEmpty#22]
Results [5]: [item_sk#12, d_date#6, sumws#13, sum#23, isEmpty#24]

(28) Exchange
Input [5]: [item_sk#12, d_date#6, sumws#13, sum#23, isEmpty#24]
Arguments: hashpartitioning(item_sk#12, d_date#6, sumws#13, 5), ENSURE_REQUIREMENTS, [id=#25]

(29) HashAggregate [codegen id : 11]
Input [5]: [item_sk#12, d_date#6, sumws#13, sum#23, isEmpty#24]
Keys [3]: [item_sk#12, d_date#6, sumws#13]
Functions [1]: [sum(sumws#18)]
Aggregate Attributes [1]: [sum(sumws#18)#26]
Results [3]: [item_sk#12, d_date#6, sum(sumws#18)#26 AS cume_sales#27]

(30) Exchange
Input [3]: [item_sk#12, d_date#6, cume_sales#27]
Arguments: hashpartitioning(item_sk#12, d_date#6, 5), ENSURE_REQUIREMENTS, [id=#28]

(31) Sort [codegen id : 12]
Input [3]: [item_sk#12, d_date#6, cume_sales#27]
Arguments: [item_sk#12 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST], false, 0

(32) Scan parquet default.store_sales
Output [3]: [ss_item_sk#29, ss_sales_price#30, ss_sold_date_sk#31]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#31), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_sales_price:decimal(7,2)>

(33) ColumnarToRow [codegen id : 13]
Input [3]: [ss_item_sk#29, ss_sales_price#30, ss_sold_date_sk#31]

(34) Filter [codegen id : 13]
Input [3]: [ss_item_sk#29, ss_sales_price#30, ss_sold_date_sk#31]
Condition : isnotnull(ss_item_sk#29)

(35) BroadcastExchange
Input [3]: [ss_item_sk#29, ss_sales_price#30, ss_sold_date_sk#31]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#32]

(36) Scan parquet default.date_dim
Output [3]: [d_date_sk#33, d_date#34, d_month_seq#35]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(37) ColumnarToRow
Input [3]: [d_date_sk#33, d_date#34, d_month_seq#35]

(38) Filter
Input [3]: [d_date_sk#33, d_date#34, d_month_seq#35]
Condition : (((isnotnull(d_month_seq#35) AND (d_month_seq#35 >= 1212)) AND (d_month_seq#35 <= 1223)) AND isnotnull(d_date_sk#33))

(39) Project
Output [2]: [d_date_sk#33, d_date#34]
Input [3]: [d_date_sk#33, d_date#34, d_month_seq#35]

(40) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ss_sold_date_sk#31]
Right keys [1]: [d_date_sk#33]
Join condition: None

(41) Project [codegen id : 14]
Output [3]: [ss_item_sk#29, ss_sales_price#30, d_date#34]
Input [5]: [ss_item_sk#29, ss_sales_price#30, ss_sold_date_sk#31, d_date_sk#33, d_date#34]

(42) HashAggregate [codegen id : 14]
Input [3]: [ss_item_sk#29, ss_sales_price#30, d_date#34]
Keys [2]: [ss_item_sk#29, d_date#34]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#30))]
Aggregate Attributes [1]: [sum#36]
Results [3]: [ss_item_sk#29, d_date#34, sum#37]

(43) Exchange
Input [3]: [ss_item_sk#29, d_date#34, sum#37]
Arguments: hashpartitioning(ss_item_sk#29, d_date#34, 5), ENSURE_REQUIREMENTS, [id=#38]

(44) HashAggregate [codegen id : 15]
Input [3]: [ss_item_sk#29, d_date#34, sum#37]
Keys [2]: [ss_item_sk#29, d_date#34]
Functions [1]: [sum(UnscaledValue(ss_sales_price#30))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#30))#39]
Results [4]: [ss_item_sk#29 AS item_sk#40, d_date#34, MakeDecimal(sum(UnscaledValue(ss_sales_price#30))#39,17,2) AS sumss#41, ss_item_sk#29]

(45) Exchange
Input [4]: [item_sk#40, d_date#34, sumss#41, ss_item_sk#29]
Arguments: hashpartitioning(ss_item_sk#29, 5), ENSURE_REQUIREMENTS, [id=#42]

(46) Sort [codegen id : 16]
Input [4]: [item_sk#40, d_date#34, sumss#41, ss_item_sk#29]
Arguments: [ss_item_sk#29 ASC NULLS FIRST, d_date#34 ASC NULLS FIRST], false, 0

(47) Window
Input [4]: [item_sk#40, d_date#34, sumss#41, ss_item_sk#29]
Arguments: [row_number() windowspecdefinition(ss_item_sk#29, d_date#34 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#43], [ss_item_sk#29], [d_date#34 ASC NULLS FIRST]

(48) Filter [codegen id : 22]
Input [5]: [item_sk#40, d_date#34, sumss#41, ss_item_sk#29, rk#43]
Condition : isnotnull(rk#43)

(49) Project [codegen id : 22]
Output [4]: [item_sk#40, d_date#34, sumss#41, rk#43]
Input [5]: [item_sk#40, d_date#34, sumss#41, ss_item_sk#29, rk#43]

(50) ReusedExchange [Reuses operator id: 45]
Output [4]: [item_sk#44, d_date#45, sumss#46, ss_item_sk#29]

(51) Sort [codegen id : 20]
Input [4]: [item_sk#44, d_date#45, sumss#46, ss_item_sk#29]
Arguments: [ss_item_sk#29 ASC NULLS FIRST, d_date#45 ASC NULLS FIRST], false, 0

(52) Window
Input [4]: [item_sk#44, d_date#45, sumss#46, ss_item_sk#29]
Arguments: [row_number() windowspecdefinition(ss_item_sk#29, d_date#45 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#47], [ss_item_sk#29], [d_date#45 ASC NULLS FIRST]

(53) Filter [codegen id : 21]
Input [5]: [item_sk#44, d_date#45, sumss#46, ss_item_sk#29, rk#47]
Condition : isnotnull(rk#47)

(54) Project [codegen id : 21]
Output [3]: [item_sk#44, sumss#46, rk#47]
Input [5]: [item_sk#44, d_date#45, sumss#46, ss_item_sk#29, rk#47]

(55) BroadcastExchange
Input [3]: [item_sk#44, sumss#46, rk#47]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#48]

(56) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [item_sk#40]
Right keys [1]: [item_sk#44]
Join condition: (rk#43 >= rk#47)

(57) Project [codegen id : 22]
Output [4]: [item_sk#40, d_date#34, sumss#41, sumss#46]
Input [7]: [item_sk#40, d_date#34, sumss#41, rk#43, item_sk#44, sumss#46, rk#47]

(58) HashAggregate [codegen id : 22]
Input [4]: [item_sk#40, d_date#34, sumss#41, sumss#46]
Keys [3]: [item_sk#40, d_date#34, sumss#41]
Functions [1]: [partial_sum(sumss#46)]
Aggregate Attributes [2]: [sum#49, isEmpty#50]
Results [5]: [item_sk#40, d_date#34, sumss#41, sum#51, isEmpty#52]

(59) Exchange
Input [5]: [item_sk#40, d_date#34, sumss#41, sum#51, isEmpty#52]
Arguments: hashpartitioning(item_sk#40, d_date#34, sumss#41, 5), ENSURE_REQUIREMENTS, [id=#53]

(60) HashAggregate [codegen id : 23]
Input [5]: [item_sk#40, d_date#34, sumss#41, sum#51, isEmpty#52]
Keys [3]: [item_sk#40, d_date#34, sumss#41]
Functions [1]: [sum(sumss#46)]
Aggregate Attributes [1]: [sum(sumss#46)#54]
Results [3]: [item_sk#40, d_date#34, sum(sumss#46)#54 AS cume_sales#55]

(61) Exchange
Input [3]: [item_sk#40, d_date#34, cume_sales#55]
Arguments: hashpartitioning(item_sk#40, d_date#34, 5), ENSURE_REQUIREMENTS, [id=#56]

(62) Sort [codegen id : 24]
Input [3]: [item_sk#40, d_date#34, cume_sales#55]
Arguments: [item_sk#40 ASC NULLS FIRST, d_date#34 ASC NULLS FIRST], false, 0

(63) SortMergeJoin
Left keys [2]: [item_sk#12, d_date#6]
Right keys [2]: [item_sk#40, d_date#34]
Join condition: None

(64) Filter [codegen id : 25]
Input [6]: [item_sk#12, d_date#6, cume_sales#27, item_sk#40, d_date#34, cume_sales#55]
Condition : isnotnull(CASE WHEN isnotnull(item_sk#12) THEN item_sk#12 ELSE item_sk#40 END)

(65) Project [codegen id : 25]
Output [4]: [CASE WHEN isnotnull(item_sk#12) THEN item_sk#12 ELSE item_sk#40 END AS item_sk#57, CASE WHEN isnotnull(d_date#6) THEN d_date#6 ELSE d_date#34 END AS d_date#58, cume_sales#27 AS web_sales#59, cume_sales#55 AS store_sales#60]
Input [6]: [item_sk#12, d_date#6, cume_sales#27, item_sk#40, d_date#34, cume_sales#55]

(66) Exchange
Input [4]: [item_sk#57, d_date#58, web_sales#59, store_sales#60]
Arguments: hashpartitioning(item_sk#57, 5), ENSURE_REQUIREMENTS, [id=#61]

(67) Sort [codegen id : 26]
Input [4]: [item_sk#57, d_date#58, web_sales#59, store_sales#60]
Arguments: [item_sk#57 ASC NULLS FIRST, d_date#58 ASC NULLS FIRST], false, 0

(68) Window
Input [4]: [item_sk#57, d_date#58, web_sales#59, store_sales#60]
Arguments: [row_number() windowspecdefinition(item_sk#57, d_date#58 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#62], [item_sk#57], [d_date#58 ASC NULLS FIRST]

(69) Filter [codegen id : 27]
Input [5]: [item_sk#57, d_date#58, web_sales#59, store_sales#60, rk#62]
Condition : isnotnull(rk#62)

(70) ReusedExchange [Reuses operator id: 66]
Output [4]: [item_sk#63, d_date#64, web_sales#65, store_sales#66]

(71) Sort [codegen id : 53]
Input [4]: [item_sk#63, d_date#64, web_sales#65, store_sales#66]
Arguments: [item_sk#63 ASC NULLS FIRST, d_date#64 ASC NULLS FIRST], false, 0

(72) Window
Input [4]: [item_sk#63, d_date#64, web_sales#65, store_sales#66]
Arguments: [row_number() windowspecdefinition(item_sk#63, d_date#64 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#67], [item_sk#63], [d_date#64 ASC NULLS FIRST]

(73) Filter [codegen id : 54]
Input [5]: [item_sk#63, d_date#64, web_sales#65, store_sales#66, rk#67]
Condition : isnotnull(rk#67)

(74) Project [codegen id : 54]
Output [4]: [item_sk#63, web_sales#65, store_sales#66, rk#67]
Input [5]: [item_sk#63, d_date#64, web_sales#65, store_sales#66, rk#67]

(75) SortMergeJoin [codegen id : 55]
Left keys [1]: [item_sk#57]
Right keys [1]: [item_sk#63]
Join condition: (rk#62 >= rk#67)

(76) Project [codegen id : 55]
Output [6]: [item_sk#57, d_date#58, web_sales#59, store_sales#60, web_sales#65, store_sales#66]
Input [9]: [item_sk#57, d_date#58, web_sales#59, store_sales#60, rk#62, item_sk#63, web_sales#65, store_sales#66, rk#67]

(77) HashAggregate [codegen id : 55]
Input [6]: [item_sk#57, d_date#58, web_sales#59, store_sales#60, web_sales#65, store_sales#66]
Keys [4]: [item_sk#57, d_date#58, web_sales#59, store_sales#60]
Functions [2]: [partial_max(web_sales#65), partial_max(store_sales#66)]
Aggregate Attributes [2]: [max#68, max#69]
Results [6]: [item_sk#57, d_date#58, web_sales#59, store_sales#60, max#70, max#71]

(78) HashAggregate [codegen id : 55]
Input [6]: [item_sk#57, d_date#58, web_sales#59, store_sales#60, max#70, max#71]
Keys [4]: [item_sk#57, d_date#58, web_sales#59, store_sales#60]
Functions [2]: [max(web_sales#65), max(store_sales#66)]
Aggregate Attributes [2]: [max(web_sales#65)#72, max(store_sales#66)#73]
Results [6]: [item_sk#57, d_date#58, web_sales#59, store_sales#60, max(web_sales#65)#72 AS web_cumulative#74, max(store_sales#66)#73 AS store_cumulative#75]

(79) Filter [codegen id : 55]
Input [6]: [item_sk#57, d_date#58, web_sales#59, store_sales#60, web_cumulative#74, store_cumulative#75]
Condition : ((isnotnull(web_cumulative#74) AND isnotnull(store_cumulative#75)) AND (web_cumulative#74 > store_cumulative#75))

(80) TakeOrderedAndProject
Input [6]: [item_sk#57, d_date#58, web_sales#59, store_sales#60, web_cumulative#74, store_cumulative#75]
Arguments: 100, [item_sk#57 ASC NULLS FIRST, d_date#58 ASC NULLS FIRST], [item_sk#57, d_date#58, web_sales#59, store_sales#60, web_cumulative#74, store_cumulative#75]

