== Physical Plan ==
TakeOrderedAndProject (77)
+- * Filter (76)
   +- * HashAggregate (75)
      +- * Project (74)
         +- * SortMergeJoin Inner (73)
            :- * Filter (67)
            :  +- Window (66)
            :     +- * Sort (65)
            :        +- Exchange (64)
            :           +- * Project (63)
            :              +- * Filter (62)
            :                 +- SortMergeJoin FullOuter (61)
            :                    :- * Sort (32)
            :                    :  +- Exchange (31)
            :                    :     +- * HashAggregate (30)
            :                    :        +- * Project (29)
            :                    :           +- * SortMergeJoin Inner (28)
            :                    :              :- * Sort (20)
            :                    :              :  +- Exchange (19)
            :                    :              :     +- * Project (18)
            :                    :              :        +- * Filter (17)
            :                    :              :           +- Window (16)
            :                    :              :              +- * Sort (15)
            :                    :              :                 +- Exchange (14)
            :                    :              :                    +- * HashAggregate (13)
            :                    :              :                       +- Exchange (12)
            :                    :              :                          +- * HashAggregate (11)
            :                    :              :                             +- * Project (10)
            :                    :              :                                +- * BroadcastHashJoin Inner BuildRight (9)
            :                    :              :                                   :- * Filter (3)
            :                    :              :                                   :  +- * ColumnarToRow (2)
            :                    :              :                                   :     +- Scan parquet default.web_sales (1)
            :                    :              :                                   +- BroadcastExchange (8)
            :                    :              :                                      +- * Project (7)
            :                    :              :                                         +- * Filter (6)
            :                    :              :                                            +- * ColumnarToRow (5)
            :                    :              :                                               +- Scan parquet default.date_dim (4)
            :                    :              +- * Sort (27)
            :                    :                 +- Exchange (26)
            :                    :                    +- * Project (25)
            :                    :                       +- * Filter (24)
            :                    :                          +- Window (23)
            :                    :                             +- * Sort (22)
            :                    :                                +- ReusedExchange (21)
            :                    +- * Sort (60)
            :                       +- Exchange (59)
            :                          +- * HashAggregate (58)
            :                             +- * Project (57)
            :                                +- * SortMergeJoin Inner (56)
            :                                   :- * Sort (48)
            :                                   :  +- Exchange (47)
            :                                   :     +- * Project (46)
            :                                   :        +- * Filter (45)
            :                                   :           +- Window (44)
            :                                   :              +- * Sort (43)
            :                                   :                 +- Exchange (42)
            :                                   :                    +- * HashAggregate (41)
            :                                   :                       +- Exchange (40)
            :                                   :                          +- * HashAggregate (39)
            :                                   :                             +- * Project (38)
            :                                   :                                +- * BroadcastHashJoin Inner BuildRight (37)
            :                                   :                                   :- * Filter (35)
            :                                   :                                   :  +- * ColumnarToRow (34)
            :                                   :                                   :     +- Scan parquet default.store_sales (33)
            :                                   :                                   +- ReusedExchange (36)
            :                                   +- * Sort (55)
            :                                      +- Exchange (54)
            :                                         +- * Project (53)
            :                                            +- * Filter (52)
            :                                               +- Window (51)
            :                                                  +- * Sort (50)
            :                                                     +- ReusedExchange (49)
            +- * Project (72)
               +- * Filter (71)
                  +- Window (70)
                     +- * Sort (69)
                        +- ReusedExchange (68)


(1) Scan parquet default.web_sales
Output [3]: [ws_sold_date_sk#1, ws_item_sk#2, ws_sales_price#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [3]: [ws_sold_date_sk#1, ws_item_sk#2, ws_sales_price#3]

(3) Filter [codegen id : 2]
Input [3]: [ws_sold_date_sk#1, ws_item_sk#2, ws_sales_price#3]
Condition : (isnotnull(ws_item_sk#2) AND isnotnull(ws_sold_date_sk#1))

(4) Scan parquet default.date_dim
Output [3]: [d_date_sk#4, d_date#5, d_month_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#6]

(6) Filter [codegen id : 1]
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1212)) AND (d_month_seq#6 <= 1223)) AND isnotnull(d_date_sk#4))

(7) Project [codegen id : 1]
Output [2]: [d_date_sk#4, d_date#5]
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#6]

(8) BroadcastExchange
Input [2]: [d_date_sk#4, d_date#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#7]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_sold_date_sk#1]
Right keys [1]: [d_date_sk#4]
Join condition: None

(10) Project [codegen id : 2]
Output [3]: [ws_item_sk#2, ws_sales_price#3, d_date#5]
Input [5]: [ws_sold_date_sk#1, ws_item_sk#2, ws_sales_price#3, d_date_sk#4, d_date#5]

(11) HashAggregate [codegen id : 2]
Input [3]: [ws_item_sk#2, ws_sales_price#3, d_date#5]
Keys [2]: [ws_item_sk#2, d_date#5]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#3))]
Aggregate Attributes [1]: [sum#8]
Results [3]: [ws_item_sk#2, d_date#5, sum#9]

(12) Exchange
Input [3]: [ws_item_sk#2, d_date#5, sum#9]
Arguments: hashpartitioning(ws_item_sk#2, d_date#5, 5), true, [id=#10]

(13) HashAggregate [codegen id : 3]
Input [3]: [ws_item_sk#2, d_date#5, sum#9]
Keys [2]: [ws_item_sk#2, d_date#5]
Functions [1]: [sum(UnscaledValue(ws_sales_price#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_sales_price#3))#11]
Results [4]: [ws_item_sk#2 AS item_sk#12, d_date#5, MakeDecimal(sum(UnscaledValue(ws_sales_price#3))#11,17,2) AS sumws#13, ws_item_sk#2]

(14) Exchange
Input [4]: [item_sk#12, d_date#5, sumws#13, ws_item_sk#2]
Arguments: hashpartitioning(ws_item_sk#2, 5), true, [id=#14]

(15) Sort [codegen id : 4]
Input [4]: [item_sk#12, d_date#5, sumws#13, ws_item_sk#2]
Arguments: [ws_item_sk#2 ASC NULLS FIRST, d_date#5 ASC NULLS FIRST], false, 0

(16) Window
Input [4]: [item_sk#12, d_date#5, sumws#13, ws_item_sk#2]
Arguments: [row_number() windowspecdefinition(ws_item_sk#2, d_date#5 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#15], [ws_item_sk#2], [d_date#5 ASC NULLS FIRST]

(17) Filter [codegen id : 5]
Input [5]: [item_sk#12, d_date#5, sumws#13, ws_item_sk#2, rk#15]
Condition : isnotnull(rk#15)

(18) Project [codegen id : 5]
Output [4]: [item_sk#12, d_date#5, sumws#13, rk#15]
Input [5]: [item_sk#12, d_date#5, sumws#13, ws_item_sk#2, rk#15]

(19) Exchange
Input [4]: [item_sk#12, d_date#5, sumws#13, rk#15]
Arguments: hashpartitioning(item_sk#12, 5), true, [id=#16]

(20) Sort [codegen id : 6]
Input [4]: [item_sk#12, d_date#5, sumws#13, rk#15]
Arguments: [item_sk#12 ASC NULLS FIRST], false, 0

(21) ReusedExchange [Reuses operator id: 14]
Output [4]: [item_sk#17, d_date#18, sumws#19, ws_item_sk#2]

(22) Sort [codegen id : 10]
Input [4]: [item_sk#17, d_date#18, sumws#19, ws_item_sk#2]
Arguments: [ws_item_sk#2 ASC NULLS FIRST, d_date#18 ASC NULLS FIRST], false, 0

(23) Window
Input [4]: [item_sk#17, d_date#18, sumws#19, ws_item_sk#2]
Arguments: [row_number() windowspecdefinition(ws_item_sk#2, d_date#18 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#20], [ws_item_sk#2], [d_date#18 ASC NULLS FIRST]

(24) Filter [codegen id : 11]
Input [5]: [item_sk#17, d_date#18, sumws#19, ws_item_sk#2, rk#20]
Condition : isnotnull(rk#20)

(25) Project [codegen id : 11]
Output [3]: [item_sk#17, sumws#19, rk#20]
Input [5]: [item_sk#17, d_date#18, sumws#19, ws_item_sk#2, rk#20]

(26) Exchange
Input [3]: [item_sk#17, sumws#19, rk#20]
Arguments: hashpartitioning(item_sk#17, 5), true, [id=#21]

(27) Sort [codegen id : 12]
Input [3]: [item_sk#17, sumws#19, rk#20]
Arguments: [item_sk#17 ASC NULLS FIRST], false, 0

(28) SortMergeJoin [codegen id : 13]
Left keys [1]: [item_sk#12]
Right keys [1]: [item_sk#17]
Join condition: (rk#15 >= rk#20)

(29) Project [codegen id : 13]
Output [4]: [item_sk#12, d_date#5, sumws#13, sumws#19]
Input [7]: [item_sk#12, d_date#5, sumws#13, rk#15, item_sk#17, sumws#19, rk#20]

(30) HashAggregate [codegen id : 13]
Input [4]: [item_sk#12, d_date#5, sumws#13, sumws#19]
Keys [3]: [item_sk#12, d_date#5, sumws#13]
Functions [1]: [sum(sumws#19)]
Aggregate Attributes [1]: [sum(sumws#19)#22]
Results [3]: [item_sk#12, d_date#5, sum(sumws#19)#22 AS cume_sales#23]

(31) Exchange
Input [3]: [item_sk#12, d_date#5, cume_sales#23]
Arguments: hashpartitioning(item_sk#12, d_date#5, 5), true, [id=#24]

(32) Sort [codegen id : 14]
Input [3]: [item_sk#12, d_date#5, cume_sales#23]
Arguments: [item_sk#12 ASC NULLS FIRST, d_date#5 ASC NULLS FIRST], false, 0

(33) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#25, ss_item_sk#26, ss_sales_price#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_sales_price:decimal(7,2)>

(34) ColumnarToRow [codegen id : 16]
Input [3]: [ss_sold_date_sk#25, ss_item_sk#26, ss_sales_price#27]

(35) Filter [codegen id : 16]
Input [3]: [ss_sold_date_sk#25, ss_item_sk#26, ss_sales_price#27]
Condition : (isnotnull(ss_item_sk#26) AND isnotnull(ss_sold_date_sk#25))

(36) ReusedExchange [Reuses operator id: 8]
Output [2]: [d_date_sk#28, d_date#29]

(37) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ss_sold_date_sk#25]
Right keys [1]: [d_date_sk#28]
Join condition: None

(38) Project [codegen id : 16]
Output [3]: [ss_item_sk#26, ss_sales_price#27, d_date#29]
Input [5]: [ss_sold_date_sk#25, ss_item_sk#26, ss_sales_price#27, d_date_sk#28, d_date#29]

(39) HashAggregate [codegen id : 16]
Input [3]: [ss_item_sk#26, ss_sales_price#27, d_date#29]
Keys [2]: [ss_item_sk#26, d_date#29]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#27))]
Aggregate Attributes [1]: [sum#30]
Results [3]: [ss_item_sk#26, d_date#29, sum#31]

(40) Exchange
Input [3]: [ss_item_sk#26, d_date#29, sum#31]
Arguments: hashpartitioning(ss_item_sk#26, d_date#29, 5), true, [id=#32]

(41) HashAggregate [codegen id : 17]
Input [3]: [ss_item_sk#26, d_date#29, sum#31]
Keys [2]: [ss_item_sk#26, d_date#29]
Functions [1]: [sum(UnscaledValue(ss_sales_price#27))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#27))#33]
Results [4]: [ss_item_sk#26 AS item_sk#34, d_date#29, MakeDecimal(sum(UnscaledValue(ss_sales_price#27))#33,17,2) AS sumss#35, ss_item_sk#26]

(42) Exchange
Input [4]: [item_sk#34, d_date#29, sumss#35, ss_item_sk#26]
Arguments: hashpartitioning(ss_item_sk#26, 5), true, [id=#36]

(43) Sort [codegen id : 18]
Input [4]: [item_sk#34, d_date#29, sumss#35, ss_item_sk#26]
Arguments: [ss_item_sk#26 ASC NULLS FIRST, d_date#29 ASC NULLS FIRST], false, 0

(44) Window
Input [4]: [item_sk#34, d_date#29, sumss#35, ss_item_sk#26]
Arguments: [row_number() windowspecdefinition(ss_item_sk#26, d_date#29 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#37], [ss_item_sk#26], [d_date#29 ASC NULLS FIRST]

(45) Filter [codegen id : 19]
Input [5]: [item_sk#34, d_date#29, sumss#35, ss_item_sk#26, rk#37]
Condition : isnotnull(rk#37)

(46) Project [codegen id : 19]
Output [4]: [item_sk#34, d_date#29, sumss#35, rk#37]
Input [5]: [item_sk#34, d_date#29, sumss#35, ss_item_sk#26, rk#37]

(47) Exchange
Input [4]: [item_sk#34, d_date#29, sumss#35, rk#37]
Arguments: hashpartitioning(item_sk#34, 5), true, [id=#38]

(48) Sort [codegen id : 20]
Input [4]: [item_sk#34, d_date#29, sumss#35, rk#37]
Arguments: [item_sk#34 ASC NULLS FIRST], false, 0

(49) ReusedExchange [Reuses operator id: 42]
Output [4]: [item_sk#39, d_date#40, sumss#41, ss_item_sk#26]

(50) Sort [codegen id : 24]
Input [4]: [item_sk#39, d_date#40, sumss#41, ss_item_sk#26]
Arguments: [ss_item_sk#26 ASC NULLS FIRST, d_date#40 ASC NULLS FIRST], false, 0

(51) Window
Input [4]: [item_sk#39, d_date#40, sumss#41, ss_item_sk#26]
Arguments: [row_number() windowspecdefinition(ss_item_sk#26, d_date#40 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#42], [ss_item_sk#26], [d_date#40 ASC NULLS FIRST]

(52) Filter [codegen id : 25]
Input [5]: [item_sk#39, d_date#40, sumss#41, ss_item_sk#26, rk#42]
Condition : isnotnull(rk#42)

(53) Project [codegen id : 25]
Output [3]: [item_sk#39, sumss#41, rk#42]
Input [5]: [item_sk#39, d_date#40, sumss#41, ss_item_sk#26, rk#42]

(54) Exchange
Input [3]: [item_sk#39, sumss#41, rk#42]
Arguments: hashpartitioning(item_sk#39, 5), true, [id=#43]

(55) Sort [codegen id : 26]
Input [3]: [item_sk#39, sumss#41, rk#42]
Arguments: [item_sk#39 ASC NULLS FIRST], false, 0

(56) SortMergeJoin [codegen id : 27]
Left keys [1]: [item_sk#34]
Right keys [1]: [item_sk#39]
Join condition: (rk#37 >= rk#42)

(57) Project [codegen id : 27]
Output [4]: [item_sk#34, d_date#29, sumss#35, sumss#41]
Input [7]: [item_sk#34, d_date#29, sumss#35, rk#37, item_sk#39, sumss#41, rk#42]

(58) HashAggregate [codegen id : 27]
Input [4]: [item_sk#34, d_date#29, sumss#35, sumss#41]
Keys [3]: [item_sk#34, d_date#29, sumss#35]
Functions [1]: [sum(sumss#41)]
Aggregate Attributes [1]: [sum(sumss#41)#44]
Results [3]: [item_sk#34, d_date#29, sum(sumss#41)#44 AS cume_sales#45]

(59) Exchange
Input [3]: [item_sk#34, d_date#29, cume_sales#45]
Arguments: hashpartitioning(item_sk#34, d_date#29, 5), true, [id=#46]

(60) Sort [codegen id : 28]
Input [3]: [item_sk#34, d_date#29, cume_sales#45]
Arguments: [item_sk#34 ASC NULLS FIRST, d_date#29 ASC NULLS FIRST], false, 0

(61) SortMergeJoin
Left keys [2]: [item_sk#12, d_date#5]
Right keys [2]: [item_sk#34, d_date#29]
Join condition: None

(62) Filter [codegen id : 29]
Input [6]: [item_sk#12, d_date#5, cume_sales#23, item_sk#34, d_date#29, cume_sales#45]
Condition : isnotnull(CASE WHEN isnotnull(item_sk#12) THEN item_sk#12 ELSE item_sk#34 END)

(63) Project [codegen id : 29]
Output [4]: [CASE WHEN isnotnull(item_sk#12) THEN item_sk#12 ELSE item_sk#34 END AS item_sk#47, CASE WHEN isnotnull(d_date#5) THEN d_date#5 ELSE d_date#29 END AS d_date#48, cume_sales#23 AS web_sales#49, cume_sales#45 AS store_sales#50]
Input [6]: [item_sk#12, d_date#5, cume_sales#23, item_sk#34, d_date#29, cume_sales#45]

(64) Exchange
Input [4]: [item_sk#47, d_date#48, web_sales#49, store_sales#50]
Arguments: hashpartitioning(item_sk#47, 5), true, [id=#51]

(65) Sort [codegen id : 30]
Input [4]: [item_sk#47, d_date#48, web_sales#49, store_sales#50]
Arguments: [item_sk#47 ASC NULLS FIRST, d_date#48 ASC NULLS FIRST], false, 0

(66) Window
Input [4]: [item_sk#47, d_date#48, web_sales#49, store_sales#50]
Arguments: [row_number() windowspecdefinition(item_sk#47, d_date#48 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#52], [item_sk#47], [d_date#48 ASC NULLS FIRST]

(67) Filter [codegen id : 31]
Input [5]: [item_sk#47, d_date#48, web_sales#49, store_sales#50, rk#52]
Condition : isnotnull(rk#52)

(68) ReusedExchange [Reuses operator id: 64]
Output [4]: [item_sk#53, d_date#54, web_sales#55, store_sales#56]

(69) Sort [codegen id : 61]
Input [4]: [item_sk#53, d_date#54, web_sales#55, store_sales#56]
Arguments: [item_sk#53 ASC NULLS FIRST, d_date#54 ASC NULLS FIRST], false, 0

(70) Window
Input [4]: [item_sk#53, d_date#54, web_sales#55, store_sales#56]
Arguments: [row_number() windowspecdefinition(item_sk#53, d_date#54 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#57], [item_sk#53], [d_date#54 ASC NULLS FIRST]

(71) Filter [codegen id : 62]
Input [5]: [item_sk#53, d_date#54, web_sales#55, store_sales#56, rk#57]
Condition : isnotnull(rk#57)

(72) Project [codegen id : 62]
Output [4]: [item_sk#53, web_sales#55, store_sales#56, rk#57]
Input [5]: [item_sk#53, d_date#54, web_sales#55, store_sales#56, rk#57]

(73) SortMergeJoin [codegen id : 63]
Left keys [1]: [item_sk#47]
Right keys [1]: [item_sk#53]
Join condition: (rk#52 >= rk#57)

(74) Project [codegen id : 63]
Output [6]: [item_sk#47, d_date#48, web_sales#49, store_sales#50, web_sales#55, store_sales#56]
Input [9]: [item_sk#47, d_date#48, web_sales#49, store_sales#50, rk#52, item_sk#53, web_sales#55, store_sales#56, rk#57]

(75) HashAggregate [codegen id : 63]
Input [6]: [item_sk#47, d_date#48, web_sales#49, store_sales#50, web_sales#55, store_sales#56]
Keys [4]: [item_sk#47, d_date#48, web_sales#49, store_sales#50]
Functions [2]: [max(web_sales#55), max(store_sales#56)]
Aggregate Attributes [2]: [max(web_sales#55)#58, max(store_sales#56)#59]
Results [6]: [item_sk#47, d_date#48, web_sales#49, store_sales#50, max(web_sales#55)#58 AS web_cumulative#60, max(store_sales#56)#59 AS store_cumulative#61]

(76) Filter [codegen id : 63]
Input [6]: [item_sk#47, d_date#48, web_sales#49, store_sales#50, web_cumulative#60, store_cumulative#61]
Condition : ((isnotnull(web_cumulative#60) AND isnotnull(store_cumulative#61)) AND (web_cumulative#60 > store_cumulative#61))

(77) TakeOrderedAndProject
Input [6]: [item_sk#47, d_date#48, web_sales#49, store_sales#50, web_cumulative#60, store_cumulative#61]
Arguments: 100, [item_sk#47 ASC NULLS FIRST, d_date#48 ASC NULLS FIRST], [item_sk#47, d_date#48, web_sales#49, store_sales#50, web_cumulative#60, store_cumulative#61]

