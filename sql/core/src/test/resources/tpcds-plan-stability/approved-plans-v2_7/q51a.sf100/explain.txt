== Physical Plan ==
TakeOrderedAndProject (64)
+- * Filter (63)
   +- * HashAggregate (62)
      +- * HashAggregate (61)
         +- * Project (60)
            +- * SortMergeJoin Inner (59)
               :- Window (54)
               :  +- * Sort (53)
               :     +- Exchange (52)
               :        +- * Project (51)
               :           +- * Filter (50)
               :              +- * SortMergeJoin FullOuter (49)
               :                 :- * Sort (24)
               :                 :  +- Exchange (23)
               :                 :     +- * HashAggregate (22)
               :                 :        +- * HashAggregate (21)
               :                 :           +- * Project (20)
               :                 :              +- * SortMergeJoin Inner (19)
               :                 :                 :- * Sort (16)
               :                 :                 :  +- Exchange (15)
               :                 :                 :     +- * Project (14)
               :                 :                 :        +- * Filter (13)
               :                 :                 :           +- Window (12)
               :                 :                 :              +- * Sort (11)
               :                 :                 :                 +- Exchange (10)
               :                 :                 :                    +- * HashAggregate (9)
               :                 :                 :                       +- Exchange (8)
               :                 :                 :                          +- * HashAggregate (7)
               :                 :                 :                             +- * Project (6)
               :                 :                 :                                +- * BroadcastHashJoin Inner BuildRight (5)
               :                 :                 :                                   :- * Filter (3)
               :                 :                 :                                   :  +- * ColumnarToRow (2)
               :                 :                 :                                   :     +- Scan parquet spark_catalog.default.web_sales (1)
               :                 :                 :                                   +- ReusedExchange (4)
               :                 :                 +- * Sort (18)
               :                 :                    +- ReusedExchange (17)
               :                 +- * Sort (48)
               :                    +- Exchange (47)
               :                       +- * HashAggregate (46)
               :                          +- * HashAggregate (45)
               :                             +- * Project (44)
               :                                +- * SortMergeJoin Inner (43)
               :                                   :- * Sort (40)
               :                                   :  +- Exchange (39)
               :                                   :     +- * Project (38)
               :                                   :        +- * Filter (37)
               :                                   :           +- Window (36)
               :                                   :              +- * Sort (35)
               :                                   :                 +- Exchange (34)
               :                                   :                    +- * HashAggregate (33)
               :                                   :                       +- Exchange (32)
               :                                   :                          +- * HashAggregate (31)
               :                                   :                             +- * Project (30)
               :                                   :                                +- * BroadcastHashJoin Inner BuildRight (29)
               :                                   :                                   :- * Filter (27)
               :                                   :                                   :  +- * ColumnarToRow (26)
               :                                   :                                   :     +- Scan parquet spark_catalog.default.store_sales (25)
               :                                   :                                   +- ReusedExchange (28)
               :                                   +- * Sort (42)
               :                                      +- ReusedExchange (41)
               +- * Project (58)
                  +- Window (57)
                     +- * Sort (56)
                        +- ReusedExchange (55)


(1) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#3), dynamicpruningexpression(ws_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]

(3) Filter [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Condition : isnotnull(ws_item_sk#1)

(4) ReusedExchange [Reuses operator id: 77]
Output [2]: [d_date_sk#5, d_date#6]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join type: Inner
Join condition: None

(6) Project [codegen id : 2]
Output [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]
Input [5]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3, d_date_sk#5, d_date#6]

(7) HashAggregate [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum#7]
Results [3]: [ws_item_sk#1, d_date#6, sum#8]

(8) Exchange
Input [3]: [ws_item_sk#1, d_date#6, sum#8]
Arguments: hashpartitioning(ws_item_sk#1, d_date#6, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(9) HashAggregate [codegen id : 3]
Input [3]: [ws_item_sk#1, d_date#6, sum#8]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_sales_price#2))#9]
Results [4]: [ws_item_sk#1 AS item_sk#10, d_date#6, MakeDecimal(sum(UnscaledValue(ws_sales_price#2))#9,17,2) AS sumws#11, ws_item_sk#1]

(10) Exchange
Input [4]: [item_sk#10, d_date#6, sumws#11, ws_item_sk#1]
Arguments: hashpartitioning(ws_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(11) Sort [codegen id : 4]
Input [4]: [item_sk#10, d_date#6, sumws#11, ws_item_sk#1]
Arguments: [ws_item_sk#1 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST], false, 0

(12) Window
Input [4]: [item_sk#10, d_date#6, sumws#11, ws_item_sk#1]
Arguments: [row_number() windowspecdefinition(ws_item_sk#1, d_date#6 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#12], [ws_item_sk#1], [d_date#6 ASC NULLS FIRST]

(13) Filter [codegen id : 5]
Input [5]: [item_sk#10, d_date#6, sumws#11, ws_item_sk#1, rk#12]
Condition : might_contain(Subquery scalar-subquery#13, [id=#14], xxhash64(item_sk#10, 42), false)

(14) Project [codegen id : 5]
Output [4]: [item_sk#10, d_date#6, sumws#11, rk#12]
Input [5]: [item_sk#10, d_date#6, sumws#11, ws_item_sk#1, rk#12]

(15) Exchange
Input [4]: [item_sk#10, d_date#6, sumws#11, rk#12]
Arguments: hashpartitioning(item_sk#10, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(16) Sort [codegen id : 6]
Input [4]: [item_sk#10, d_date#6, sumws#11, rk#12]
Arguments: [item_sk#10 ASC NULLS FIRST], false, 0

(17) ReusedExchange [Reuses operator id: 69]
Output [3]: [item_sk#15, sumws#16, rk#17]

(18) Sort [codegen id : 12]
Input [3]: [item_sk#15, sumws#16, rk#17]
Arguments: [item_sk#15 ASC NULLS FIRST], false, 0

(19) SortMergeJoin [codegen id : 13]
Left keys [1]: [item_sk#10]
Right keys [1]: [item_sk#15]
Join type: Inner
Join condition: (rk#12 >= rk#17)

(20) Project [codegen id : 13]
Output [4]: [item_sk#10, d_date#6, sumws#11, sumws#16]
Input [7]: [item_sk#10, d_date#6, sumws#11, rk#12, item_sk#15, sumws#16, rk#17]

(21) HashAggregate [codegen id : 13]
Input [4]: [item_sk#10, d_date#6, sumws#11, sumws#16]
Keys [3]: [item_sk#10, d_date#6, sumws#11]
Functions [1]: [partial_sum(sumws#16)]
Aggregate Attributes [2]: [sum#18, isEmpty#19]
Results [5]: [item_sk#10, d_date#6, sumws#11, sum#20, isEmpty#21]

(22) HashAggregate [codegen id : 13]
Input [5]: [item_sk#10, d_date#6, sumws#11, sum#20, isEmpty#21]
Keys [3]: [item_sk#10, d_date#6, sumws#11]
Functions [1]: [sum(sumws#16)]
Aggregate Attributes [1]: [sum(sumws#16)#22]
Results [3]: [item_sk#10, d_date#6, sum(sumws#16)#22 AS cume_sales#23]

(23) Exchange
Input [3]: [item_sk#10, d_date#6, cume_sales#23]
Arguments: hashpartitioning(item_sk#10, d_date#6, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(24) Sort [codegen id : 14]
Input [3]: [item_sk#10, d_date#6, cume_sales#23]
Arguments: [item_sk#10 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST], false, 0

(25) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_item_sk#24, ss_sales_price#25, ss_sold_date_sk#26]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#26), dynamicpruningexpression(ss_sold_date_sk#26 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_sales_price:decimal(7,2)>

(26) ColumnarToRow [codegen id : 16]
Input [3]: [ss_item_sk#24, ss_sales_price#25, ss_sold_date_sk#26]

(27) Filter [codegen id : 16]
Input [3]: [ss_item_sk#24, ss_sales_price#25, ss_sold_date_sk#26]
Condition : isnotnull(ss_item_sk#24)

(28) ReusedExchange [Reuses operator id: 77]
Output [2]: [d_date_sk#27, d_date#28]

(29) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ss_sold_date_sk#26]
Right keys [1]: [d_date_sk#27]
Join type: Inner
Join condition: None

(30) Project [codegen id : 16]
Output [3]: [ss_item_sk#24, ss_sales_price#25, d_date#28]
Input [5]: [ss_item_sk#24, ss_sales_price#25, ss_sold_date_sk#26, d_date_sk#27, d_date#28]

(31) HashAggregate [codegen id : 16]
Input [3]: [ss_item_sk#24, ss_sales_price#25, d_date#28]
Keys [2]: [ss_item_sk#24, d_date#28]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#25))]
Aggregate Attributes [1]: [sum#29]
Results [3]: [ss_item_sk#24, d_date#28, sum#30]

(32) Exchange
Input [3]: [ss_item_sk#24, d_date#28, sum#30]
Arguments: hashpartitioning(ss_item_sk#24, d_date#28, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(33) HashAggregate [codegen id : 17]
Input [3]: [ss_item_sk#24, d_date#28, sum#30]
Keys [2]: [ss_item_sk#24, d_date#28]
Functions [1]: [sum(UnscaledValue(ss_sales_price#25))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#25))#31]
Results [4]: [ss_item_sk#24 AS item_sk#32, d_date#28, MakeDecimal(sum(UnscaledValue(ss_sales_price#25))#31,17,2) AS sumss#33, ss_item_sk#24]

(34) Exchange
Input [4]: [item_sk#32, d_date#28, sumss#33, ss_item_sk#24]
Arguments: hashpartitioning(ss_item_sk#24, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(35) Sort [codegen id : 18]
Input [4]: [item_sk#32, d_date#28, sumss#33, ss_item_sk#24]
Arguments: [ss_item_sk#24 ASC NULLS FIRST, d_date#28 ASC NULLS FIRST], false, 0

(36) Window
Input [4]: [item_sk#32, d_date#28, sumss#33, ss_item_sk#24]
Arguments: [row_number() windowspecdefinition(ss_item_sk#24, d_date#28 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#34], [ss_item_sk#24], [d_date#28 ASC NULLS FIRST]

(37) Filter [codegen id : 19]
Input [5]: [item_sk#32, d_date#28, sumss#33, ss_item_sk#24, rk#34]
Condition : might_contain(Subquery scalar-subquery#35, [id=#36], xxhash64(item_sk#32, 42), false)

(38) Project [codegen id : 19]
Output [4]: [item_sk#32, d_date#28, sumss#33, rk#34]
Input [5]: [item_sk#32, d_date#28, sumss#33, ss_item_sk#24, rk#34]

(39) Exchange
Input [4]: [item_sk#32, d_date#28, sumss#33, rk#34]
Arguments: hashpartitioning(item_sk#32, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(40) Sort [codegen id : 20]
Input [4]: [item_sk#32, d_date#28, sumss#33, rk#34]
Arguments: [item_sk#32 ASC NULLS FIRST], false, 0

(41) ReusedExchange [Reuses operator id: 82]
Output [3]: [item_sk#37, sumss#38, rk#39]

(42) Sort [codegen id : 26]
Input [3]: [item_sk#37, sumss#38, rk#39]
Arguments: [item_sk#37 ASC NULLS FIRST], false, 0

(43) SortMergeJoin [codegen id : 27]
Left keys [1]: [item_sk#32]
Right keys [1]: [item_sk#37]
Join type: Inner
Join condition: (rk#34 >= rk#39)

(44) Project [codegen id : 27]
Output [4]: [item_sk#32, d_date#28, sumss#33, sumss#38]
Input [7]: [item_sk#32, d_date#28, sumss#33, rk#34, item_sk#37, sumss#38, rk#39]

(45) HashAggregate [codegen id : 27]
Input [4]: [item_sk#32, d_date#28, sumss#33, sumss#38]
Keys [3]: [item_sk#32, d_date#28, sumss#33]
Functions [1]: [partial_sum(sumss#38)]
Aggregate Attributes [2]: [sum#40, isEmpty#41]
Results [5]: [item_sk#32, d_date#28, sumss#33, sum#42, isEmpty#43]

(46) HashAggregate [codegen id : 27]
Input [5]: [item_sk#32, d_date#28, sumss#33, sum#42, isEmpty#43]
Keys [3]: [item_sk#32, d_date#28, sumss#33]
Functions [1]: [sum(sumss#38)]
Aggregate Attributes [1]: [sum(sumss#38)#44]
Results [3]: [item_sk#32, d_date#28, sum(sumss#38)#44 AS cume_sales#45]

(47) Exchange
Input [3]: [item_sk#32, d_date#28, cume_sales#45]
Arguments: hashpartitioning(item_sk#32, d_date#28, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(48) Sort [codegen id : 28]
Input [3]: [item_sk#32, d_date#28, cume_sales#45]
Arguments: [item_sk#32 ASC NULLS FIRST, d_date#28 ASC NULLS FIRST], false, 0

(49) SortMergeJoin [codegen id : 29]
Left keys [2]: [item_sk#10, d_date#6]
Right keys [2]: [item_sk#32, d_date#28]
Join type: FullOuter
Join condition: None

(50) Filter [codegen id : 29]
Input [6]: [item_sk#10, d_date#6, cume_sales#23, item_sk#32, d_date#28, cume_sales#45]
Condition : isnotnull(CASE WHEN isnotnull(item_sk#10) THEN item_sk#10 ELSE item_sk#32 END)

(51) Project [codegen id : 29]
Output [4]: [CASE WHEN isnotnull(item_sk#10) THEN item_sk#10 ELSE item_sk#32 END AS item_sk#46, CASE WHEN isnotnull(d_date#6) THEN d_date#6 ELSE d_date#28 END AS d_date#47, cume_sales#23 AS web_sales#48, cume_sales#45 AS store_sales#49]
Input [6]: [item_sk#10, d_date#6, cume_sales#23, item_sk#32, d_date#28, cume_sales#45]

(52) Exchange
Input [4]: [item_sk#46, d_date#47, web_sales#48, store_sales#49]
Arguments: hashpartitioning(item_sk#46, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(53) Sort [codegen id : 30]
Input [4]: [item_sk#46, d_date#47, web_sales#48, store_sales#49]
Arguments: [item_sk#46 ASC NULLS FIRST, d_date#47 ASC NULLS FIRST], false, 0

(54) Window
Input [4]: [item_sk#46, d_date#47, web_sales#48, store_sales#49]
Arguments: [row_number() windowspecdefinition(item_sk#46, d_date#47 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#50], [item_sk#46], [d_date#47 ASC NULLS FIRST]

(55) ReusedExchange [Reuses operator id: 52]
Output [4]: [item_sk#46, d_date#47, web_sales#48, store_sales#49]

(56) Sort [codegen id : 60]
Input [4]: [item_sk#46, d_date#47, web_sales#48, store_sales#49]
Arguments: [item_sk#46 ASC NULLS FIRST, d_date#47 ASC NULLS FIRST], false, 0

(57) Window
Input [4]: [item_sk#46, d_date#47, web_sales#48, store_sales#49]
Arguments: [row_number() windowspecdefinition(item_sk#46, d_date#47 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#51], [item_sk#46], [d_date#47 ASC NULLS FIRST]

(58) Project [codegen id : 61]
Output [4]: [item_sk#46 AS item_sk#52, web_sales#48 AS web_sales#53, store_sales#49 AS store_sales#54, rk#51]
Input [5]: [item_sk#46, d_date#47, web_sales#48, store_sales#49, rk#51]

(59) SortMergeJoin [codegen id : 62]
Left keys [1]: [item_sk#46]
Right keys [1]: [item_sk#52]
Join type: Inner
Join condition: (rk#50 >= rk#51)

(60) Project [codegen id : 62]
Output [6]: [item_sk#46, d_date#47, web_sales#48, store_sales#49, web_sales#53, store_sales#54]
Input [9]: [item_sk#46, d_date#47, web_sales#48, store_sales#49, rk#50, item_sk#52, web_sales#53, store_sales#54, rk#51]

(61) HashAggregate [codegen id : 62]
Input [6]: [item_sk#46, d_date#47, web_sales#48, store_sales#49, web_sales#53, store_sales#54]
Keys [4]: [item_sk#46, d_date#47, web_sales#48, store_sales#49]
Functions [2]: [partial_max(web_sales#53), partial_max(store_sales#54)]
Aggregate Attributes [2]: [max#55, max#56]
Results [6]: [item_sk#46, d_date#47, web_sales#48, store_sales#49, max#57, max#58]

(62) HashAggregate [codegen id : 62]
Input [6]: [item_sk#46, d_date#47, web_sales#48, store_sales#49, max#57, max#58]
Keys [4]: [item_sk#46, d_date#47, web_sales#48, store_sales#49]
Functions [2]: [max(web_sales#53), max(store_sales#54)]
Aggregate Attributes [2]: [max(web_sales#53)#59, max(store_sales#54)#60]
Results [6]: [item_sk#46, d_date#47, web_sales#48, store_sales#49, max(web_sales#53)#59 AS web_cumulative#61, max(store_sales#54)#60 AS store_cumulative#62]

(63) Filter [codegen id : 62]
Input [6]: [item_sk#46, d_date#47, web_sales#48, store_sales#49, web_cumulative#61, store_cumulative#62]
Condition : ((isnotnull(web_cumulative#61) AND isnotnull(store_cumulative#62)) AND (web_cumulative#61 > store_cumulative#62))

(64) TakeOrderedAndProject
Input [6]: [item_sk#46, d_date#47, web_sales#48, store_sales#49, web_cumulative#61, store_cumulative#62]
Arguments: 100, [item_sk#46 ASC NULLS FIRST, d_date#47 ASC NULLS FIRST], [item_sk#46, d_date#47, web_sales#48, store_sales#49, web_cumulative#61, store_cumulative#62]

===== Subqueries =====

Subquery:1 Hosting operator id = 13 Hosting Expression = Subquery scalar-subquery#13, [id=#14]
ObjectHashAggregate (72)
+- Exchange (71)
   +- ObjectHashAggregate (70)
      +- Exchange (69)
         +- * Project (68)
            +- Window (67)
               +- * Sort (66)
                  +- ReusedExchange (65)


(65) ReusedExchange [Reuses operator id: 10]
Output [4]: [item_sk#10, d_date#63, sumws#11, ws_item_sk#64]

(66) Sort [codegen id : 4]
Input [4]: [item_sk#10, d_date#63, sumws#11, ws_item_sk#64]
Arguments: [ws_item_sk#64 ASC NULLS FIRST, d_date#63 ASC NULLS FIRST], false, 0

(67) Window
Input [4]: [item_sk#10, d_date#63, sumws#11, ws_item_sk#64]
Arguments: [row_number() windowspecdefinition(ws_item_sk#64, d_date#63 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#17], [ws_item_sk#64], [d_date#63 ASC NULLS FIRST]

(68) Project [codegen id : 5]
Output [3]: [item_sk#10 AS item_sk#15, sumws#11 AS sumws#16, rk#17]
Input [5]: [item_sk#10, d_date#63, sumws#11, ws_item_sk#64, rk#17]

(69) Exchange
Input [3]: [item_sk#15, sumws#16, rk#17]
Arguments: hashpartitioning(item_sk#15, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(70) ObjectHashAggregate
Input [3]: [item_sk#15, sumws#16, rk#17]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(item_sk#15, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#65]
Results [1]: [buf#66]

(71) Exchange
Input [1]: [buf#66]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=11]

(72) ObjectHashAggregate
Input [1]: [buf#66]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(item_sk#15, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(item_sk#15, 42), 1000000, 8388608, 0, 0)#67]
Results [1]: [bloom_filter_agg(xxhash64(item_sk#15, 42), 1000000, 8388608, 0, 0)#67 AS bloomFilter#68]

Subquery:2 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (77)
+- * Project (76)
   +- * Filter (75)
      +- * ColumnarToRow (74)
         +- Scan parquet spark_catalog.default.date_dim (73)


(73) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#5, d_date#6, d_month_seq#69]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(74) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#69]

(75) Filter [codegen id : 1]
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#69]
Condition : (((isnotnull(d_month_seq#69) AND (d_month_seq#69 >= 1212)) AND (d_month_seq#69 <= 1223)) AND isnotnull(d_date_sk#5))

(76) Project [codegen id : 1]
Output [2]: [d_date_sk#5, d_date#6]
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#69]

(77) BroadcastExchange
Input [2]: [d_date_sk#5, d_date#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=12]

Subquery:3 Hosting operator id = 37 Hosting Expression = Subquery scalar-subquery#35, [id=#36]
ObjectHashAggregate (85)
+- Exchange (84)
   +- ObjectHashAggregate (83)
      +- Exchange (82)
         +- * Project (81)
            +- Window (80)
               +- * Sort (79)
                  +- ReusedExchange (78)


(78) ReusedExchange [Reuses operator id: 34]
Output [4]: [item_sk#32, d_date#70, sumss#33, ss_item_sk#71]

(79) Sort [codegen id : 4]
Input [4]: [item_sk#32, d_date#70, sumss#33, ss_item_sk#71]
Arguments: [ss_item_sk#71 ASC NULLS FIRST, d_date#70 ASC NULLS FIRST], false, 0

(80) Window
Input [4]: [item_sk#32, d_date#70, sumss#33, ss_item_sk#71]
Arguments: [row_number() windowspecdefinition(ss_item_sk#71, d_date#70 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#39], [ss_item_sk#71], [d_date#70 ASC NULLS FIRST]

(81) Project [codegen id : 5]
Output [3]: [item_sk#32 AS item_sk#37, sumss#33 AS sumss#38, rk#39]
Input [5]: [item_sk#32, d_date#70, sumss#33, ss_item_sk#71, rk#39]

(82) Exchange
Input [3]: [item_sk#37, sumss#38, rk#39]
Arguments: hashpartitioning(item_sk#37, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(83) ObjectHashAggregate
Input [3]: [item_sk#37, sumss#38, rk#39]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(item_sk#37, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#72]
Results [1]: [buf#73]

(84) Exchange
Input [1]: [buf#73]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=14]

(85) ObjectHashAggregate
Input [1]: [buf#73]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(item_sk#37, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(item_sk#37, 42), 1000000, 8388608, 0, 0)#74]
Results [1]: [bloom_filter_agg(xxhash64(item_sk#37, 42), 1000000, 8388608, 0, 0)#74 AS bloomFilter#75]

Subquery:4 Hosting operator id = 25 Hosting Expression = ss_sold_date_sk#26 IN dynamicpruning#4


