== Physical Plan ==
TakeOrderedAndProject (79)
+- Union (78)
   :- * HashAggregate (34)
   :  +- Exchange (33)
   :     +- * HashAggregate (32)
   :        +- * Project (31)
   :           +- * BroadcastHashJoin Inner BuildRight (30)
   :              :- * Project (24)
   :              :  +- * BroadcastHashJoin Inner BuildRight (23)
   :              :     :- * Project (17)
   :              :     :  +- * BroadcastHashJoin Inner BuildRight (16)
   :              :     :     :- * Project (10)
   :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (9)
   :              :     :     :     :- * Filter (3)
   :              :     :     :     :  +- * ColumnarToRow (2)
   :              :     :     :     :     +- Scan parquet default.store_sales (1)
   :              :     :     :     +- BroadcastExchange (8)
   :              :     :     :        +- * Project (7)
   :              :     :     :           +- * Filter (6)
   :              :     :     :              +- * ColumnarToRow (5)
   :              :     :     :                 +- Scan parquet default.customer_demographics (4)
   :              :     :     +- BroadcastExchange (15)
   :              :     :        +- * Project (14)
   :              :     :           +- * Filter (13)
   :              :     :              +- * ColumnarToRow (12)
   :              :     :                 +- Scan parquet default.date_dim (11)
   :              :     +- BroadcastExchange (22)
   :              :        +- * Project (21)
   :              :           +- * Filter (20)
   :              :              +- * ColumnarToRow (19)
   :              :                 +- Scan parquet default.store (18)
   :              +- BroadcastExchange (29)
   :                 +- * Project (28)
   :                    +- * Filter (27)
   :                       +- * ColumnarToRow (26)
   :                          +- Scan parquet default.item (25)
   :- * HashAggregate (56)
   :  +- Exchange (55)
   :     +- * HashAggregate (54)
   :        +- * Project (53)
   :           +- * BroadcastHashJoin Inner BuildRight (52)
   :              :- * Project (50)
   :              :  +- * BroadcastHashJoin Inner BuildRight (49)
   :              :     :- * Project (43)
   :              :     :  +- * BroadcastHashJoin Inner BuildRight (42)
   :              :     :     :- * Project (40)
   :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (39)
   :              :     :     :     :- * Filter (37)
   :              :     :     :     :  +- * ColumnarToRow (36)
   :              :     :     :     :     +- Scan parquet default.store_sales (35)
   :              :     :     :     +- ReusedExchange (38)
   :              :     :     +- ReusedExchange (41)
   :              :     +- BroadcastExchange (48)
   :              :        +- * Project (47)
   :              :           +- * Filter (46)
   :              :              +- * ColumnarToRow (45)
   :              :                 +- Scan parquet default.store (44)
   :              +- ReusedExchange (51)
   +- * HashAggregate (77)
      +- Exchange (76)
         +- * HashAggregate (75)
            +- * Project (74)
               +- * BroadcastHashJoin Inner BuildRight (73)
                  :- * Project (68)
                  :  +- * BroadcastHashJoin Inner BuildRight (67)
                  :     :- * Project (65)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (64)
                  :     :     :- * Project (62)
                  :     :     :  +- * BroadcastHashJoin Inner BuildRight (61)
                  :     :     :     :- * Filter (59)
                  :     :     :     :  +- * ColumnarToRow (58)
                  :     :     :     :     +- Scan parquet default.store_sales (57)
                  :     :     :     +- ReusedExchange (60)
                  :     :     +- ReusedExchange (63)
                  :     +- ReusedExchange (66)
                  +- BroadcastExchange (72)
                     +- * Filter (71)
                        +- * ColumnarToRow (70)
                           +- Scan parquet default.item (69)


(1) Scan parquet default.store_sales
Output [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 5]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]

(3) Filter [codegen id : 5]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Condition : (((isnotnull(ss_cdemo_sk#3) AND isnotnull(ss_sold_date_sk#1)) AND isnotnull(ss_store_sk#4)) AND isnotnull(ss_item_sk#2))

(4) Scan parquet default.customer_demographics
Output [4]: [cd_demo_sk#9, cd_gender#10, cd_marital_status#11, cd_education_status#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>

(5) ColumnarToRow [codegen id : 1]
Input [4]: [cd_demo_sk#9, cd_gender#10, cd_marital_status#11, cd_education_status#12]

(6) Filter [codegen id : 1]
Input [4]: [cd_demo_sk#9, cd_gender#10, cd_marital_status#11, cd_education_status#12]
Condition : ((((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_gender#10, 1, false, true) = F) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_marital_status#11, 1, false, true) = W)) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_education_status#12, 20, false, true) = Primary             )) AND isnotnull(cd_demo_sk#9))

(7) Project [codegen id : 1]
Output [1]: [cd_demo_sk#9]
Input [4]: [cd_demo_sk#9, cd_gender#10, cd_marital_status#11, cd_education_status#12]

(8) BroadcastExchange
Input [1]: [cd_demo_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13]

(9) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#9]
Join condition: None

(10) Project [codegen id : 5]
Output [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Input [9]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, cd_demo_sk#9]

(11) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#14, d_year#15]

(13) Filter [codegen id : 2]
Input [2]: [d_date_sk#14, d_year#15]
Condition : ((isnotnull(d_year#15) AND (d_year#15 = 1998)) AND isnotnull(d_date_sk#14))

(14) Project [codegen id : 2]
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#15]

(15) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(16) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#14]
Join condition: None

(17) Project [codegen id : 5]
Output [6]: [ss_item_sk#2, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, d_date_sk#14]

(18) Scan parquet default.store
Output [2]: [s_store_sk#17, s_state#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(19) ColumnarToRow [codegen id : 3]
Input [2]: [s_store_sk#17, s_state#18]

(20) Filter [codegen id : 3]
Input [2]: [s_store_sk#17, s_state#18]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#18, 2, false, true) = TN) AND isnotnull(s_store_sk#17))

(21) Project [codegen id : 3]
Output [2]: [s_store_sk#17, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#18, 2, false, true) AS s_state#19]
Input [2]: [s_store_sk#17, s_state#18]

(22) BroadcastExchange
Input [2]: [s_store_sk#17, s_state#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#20]

(23) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [s_store_sk#17]
Join condition: None

(24) Project [codegen id : 5]
Output [6]: [ss_item_sk#2, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, s_state#19]
Input [8]: [ss_item_sk#2, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, s_store_sk#17, s_state#19]

(25) Scan parquet default.item
Output [2]: [i_item_sk#21, i_item_id#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(26) ColumnarToRow [codegen id : 4]
Input [2]: [i_item_sk#21, i_item_id#22]

(27) Filter [codegen id : 4]
Input [2]: [i_item_sk#21, i_item_id#22]
Condition : isnotnull(i_item_sk#21)

(28) Project [codegen id : 4]
Output [2]: [i_item_sk#21, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_item_id#22, 16, false, true) AS i_item_id#23]
Input [2]: [i_item_sk#21, i_item_id#22]

(29) BroadcastExchange
Input [2]: [i_item_sk#21, i_item_id#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#24]

(30) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#21]
Join condition: None

(31) Project [codegen id : 5]
Output [6]: [i_item_id#23, s_state#19, ss_quantity#5 AS agg1#25, ss_list_price#6 AS agg2#26, ss_coupon_amt#8 AS agg3#27, ss_sales_price#7 AS agg4#28]
Input [8]: [ss_item_sk#2, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, s_state#19, i_item_sk#21, i_item_id#23]

(32) HashAggregate [codegen id : 5]
Input [6]: [i_item_id#23, s_state#19, agg1#25, agg2#26, agg3#27, agg4#28]
Keys [2]: [i_item_id#23, s_state#19]
Functions [4]: [partial_avg(cast(agg1#25 as bigint)), partial_avg(UnscaledValue(agg2#26)), partial_avg(UnscaledValue(agg3#27)), partial_avg(UnscaledValue(agg4#28))]
Aggregate Attributes [8]: [sum#29, count#30, sum#31, count#32, sum#33, count#34, sum#35, count#36]
Results [10]: [i_item_id#23, s_state#19, sum#37, count#38, sum#39, count#40, sum#41, count#42, sum#43, count#44]

(33) Exchange
Input [10]: [i_item_id#23, s_state#19, sum#37, count#38, sum#39, count#40, sum#41, count#42, sum#43, count#44]
Arguments: hashpartitioning(i_item_id#23, s_state#19, 5), ENSURE_REQUIREMENTS, [id=#45]

(34) HashAggregate [codegen id : 6]
Input [10]: [i_item_id#23, s_state#19, sum#37, count#38, sum#39, count#40, sum#41, count#42, sum#43, count#44]
Keys [2]: [i_item_id#23, s_state#19]
Functions [4]: [avg(cast(agg1#25 as bigint)), avg(UnscaledValue(agg2#26)), avg(UnscaledValue(agg3#27)), avg(UnscaledValue(agg4#28))]
Aggregate Attributes [4]: [avg(cast(agg1#25 as bigint))#46, avg(UnscaledValue(agg2#26))#47, avg(UnscaledValue(agg3#27))#48, avg(UnscaledValue(agg4#28))#49]
Results [7]: [i_item_id#23, s_state#19, 0 AS g_state#50, avg(cast(agg1#25 as bigint))#46 AS agg1#51, cast((avg(UnscaledValue(agg2#26))#47 / 100.0) as decimal(11,6)) AS agg2#52, cast((avg(UnscaledValue(agg3#27))#48 / 100.0) as decimal(11,6)) AS agg3#53, cast((avg(UnscaledValue(agg4#28))#49 / 100.0) as decimal(11,6)) AS agg4#54]

(35) Scan parquet default.store_sales
Output [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(36) ColumnarToRow [codegen id : 11]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]

(37) Filter [codegen id : 11]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Condition : (((isnotnull(ss_cdemo_sk#3) AND isnotnull(ss_sold_date_sk#1)) AND isnotnull(ss_store_sk#4)) AND isnotnull(ss_item_sk#2))

(38) ReusedExchange [Reuses operator id: 8]
Output [1]: [cd_demo_sk#9]

(39) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#9]
Join condition: None

(40) Project [codegen id : 11]
Output [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Input [9]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, cd_demo_sk#9]

(41) ReusedExchange [Reuses operator id: 15]
Output [1]: [d_date_sk#14]

(42) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#14]
Join condition: None

(43) Project [codegen id : 11]
Output [6]: [ss_item_sk#2, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, d_date_sk#14]

(44) Scan parquet default.store
Output [2]: [s_store_sk#17, s_state#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(45) ColumnarToRow [codegen id : 9]
Input [2]: [s_store_sk#17, s_state#18]

(46) Filter [codegen id : 9]
Input [2]: [s_store_sk#17, s_state#18]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#18, 2, false, true) = TN) AND isnotnull(s_store_sk#17))

(47) Project [codegen id : 9]
Output [1]: [s_store_sk#17]
Input [2]: [s_store_sk#17, s_state#18]

(48) BroadcastExchange
Input [1]: [s_store_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#55]

(49) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [s_store_sk#17]
Join condition: None

(50) Project [codegen id : 11]
Output [5]: [ss_item_sk#2, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Input [7]: [ss_item_sk#2, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, s_store_sk#17]

(51) ReusedExchange [Reuses operator id: 29]
Output [2]: [i_item_sk#21, i_item_id#56]

(52) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#21]
Join condition: None

(53) Project [codegen id : 11]
Output [5]: [i_item_id#56, ss_quantity#5 AS agg1#25, ss_list_price#6 AS agg2#26, ss_coupon_amt#8 AS agg3#27, ss_sales_price#7 AS agg4#28]
Input [7]: [ss_item_sk#2, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_sk#21, i_item_id#56]

(54) HashAggregate [codegen id : 11]
Input [5]: [i_item_id#56, agg1#25, agg2#26, agg3#27, agg4#28]
Keys [1]: [i_item_id#56]
Functions [4]: [partial_avg(cast(agg1#25 as bigint)), partial_avg(UnscaledValue(agg2#26)), partial_avg(UnscaledValue(agg3#27)), partial_avg(UnscaledValue(agg4#28))]
Aggregate Attributes [8]: [sum#57, count#58, sum#59, count#60, sum#61, count#62, sum#63, count#64]
Results [9]: [i_item_id#56, sum#65, count#66, sum#67, count#68, sum#69, count#70, sum#71, count#72]

(55) Exchange
Input [9]: [i_item_id#56, sum#65, count#66, sum#67, count#68, sum#69, count#70, sum#71, count#72]
Arguments: hashpartitioning(i_item_id#56, 5), ENSURE_REQUIREMENTS, [id=#73]

(56) HashAggregate [codegen id : 12]
Input [9]: [i_item_id#56, sum#65, count#66, sum#67, count#68, sum#69, count#70, sum#71, count#72]
Keys [1]: [i_item_id#56]
Functions [4]: [avg(cast(agg1#25 as bigint)), avg(UnscaledValue(agg2#26)), avg(UnscaledValue(agg3#27)), avg(UnscaledValue(agg4#28))]
Aggregate Attributes [4]: [avg(cast(agg1#25 as bigint))#74, avg(UnscaledValue(agg2#26))#75, avg(UnscaledValue(agg3#27))#76, avg(UnscaledValue(agg4#28))#77]
Results [7]: [i_item_id#56 AS i_item_id#78, null AS s_state#79, 1 AS g_state#80, avg(cast(agg1#25 as bigint))#74 AS agg1#81, cast((avg(UnscaledValue(agg2#26))#75 / 100.0) as decimal(11,6)) AS agg2#82, cast((avg(UnscaledValue(agg3#27))#76 / 100.0) as decimal(11,6)) AS agg3#83, cast((avg(UnscaledValue(agg4#28))#77 / 100.0) as decimal(11,6)) AS agg4#84]

(57) Scan parquet default.store_sales
Output [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(58) ColumnarToRow [codegen id : 17]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]

(59) Filter [codegen id : 17]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Condition : (((isnotnull(ss_cdemo_sk#3) AND isnotnull(ss_sold_date_sk#1)) AND isnotnull(ss_store_sk#4)) AND isnotnull(ss_item_sk#2))

(60) ReusedExchange [Reuses operator id: 8]
Output [1]: [cd_demo_sk#9]

(61) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#9]
Join condition: None

(62) Project [codegen id : 17]
Output [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Input [9]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, cd_demo_sk#9]

(63) ReusedExchange [Reuses operator id: 15]
Output [1]: [d_date_sk#14]

(64) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#14]
Join condition: None

(65) Project [codegen id : 17]
Output [6]: [ss_item_sk#2, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, d_date_sk#14]

(66) ReusedExchange [Reuses operator id: 48]
Output [1]: [s_store_sk#17]

(67) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [s_store_sk#17]
Join condition: None

(68) Project [codegen id : 17]
Output [5]: [ss_item_sk#2, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Input [7]: [ss_item_sk#2, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, s_store_sk#17]

(69) Scan parquet default.item
Output [1]: [i_item_sk#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int>

(70) ColumnarToRow [codegen id : 16]
Input [1]: [i_item_sk#21]

(71) Filter [codegen id : 16]
Input [1]: [i_item_sk#21]
Condition : isnotnull(i_item_sk#21)

(72) BroadcastExchange
Input [1]: [i_item_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#85]

(73) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#21]
Join condition: None

(74) Project [codegen id : 17]
Output [4]: [ss_quantity#5 AS agg1#25, ss_list_price#6 AS agg2#26, ss_coupon_amt#8 AS agg3#27, ss_sales_price#7 AS agg4#28]
Input [6]: [ss_item_sk#2, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_sk#21]

(75) HashAggregate [codegen id : 17]
Input [4]: [agg1#25, agg2#26, agg3#27, agg4#28]
Keys: []
Functions [4]: [partial_avg(cast(agg1#25 as bigint)), partial_avg(UnscaledValue(agg2#26)), partial_avg(UnscaledValue(agg3#27)), partial_avg(UnscaledValue(agg4#28))]
Aggregate Attributes [8]: [sum#86, count#87, sum#88, count#89, sum#90, count#91, sum#92, count#93]
Results [8]: [sum#94, count#95, sum#96, count#97, sum#98, count#99, sum#100, count#101]

(76) Exchange
Input [8]: [sum#94, count#95, sum#96, count#97, sum#98, count#99, sum#100, count#101]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#102]

(77) HashAggregate [codegen id : 18]
Input [8]: [sum#94, count#95, sum#96, count#97, sum#98, count#99, sum#100, count#101]
Keys: []
Functions [4]: [avg(cast(agg1#25 as bigint)), avg(UnscaledValue(agg2#26)), avg(UnscaledValue(agg3#27)), avg(UnscaledValue(agg4#28))]
Aggregate Attributes [4]: [avg(cast(agg1#25 as bigint))#103, avg(UnscaledValue(agg2#26))#104, avg(UnscaledValue(agg3#27))#105, avg(UnscaledValue(agg4#28))#106]
Results [7]: [null AS i_item_id#107, null AS s_state#108, 1 AS g_state#109, avg(cast(agg1#25 as bigint))#103 AS agg1#110, cast((avg(UnscaledValue(agg2#26))#104 / 100.0) as decimal(11,6)) AS agg2#111, cast((avg(UnscaledValue(agg3#27))#105 / 100.0) as decimal(11,6)) AS agg3#112, cast((avg(UnscaledValue(agg4#28))#106 / 100.0) as decimal(11,6)) AS agg4#113]

(78) Union

(79) TakeOrderedAndProject
Input [7]: [i_item_id#23, s_state#19, g_state#50, agg1#51, agg2#52, agg3#53, agg4#54]
Arguments: 100, [i_item_id#23 ASC NULLS FIRST, s_state#19 ASC NULLS FIRST], [i_item_id#23, s_state#19, g_state#50, agg1#51, agg2#52, agg3#53, agg4#54]

