== Physical Plan ==
* Sort (49)
+- Exchange (48)
   +- * Project (47)
      +- * Filter (46)
         +- * HashAggregate (45)
            +- Exchange (44)
               +- * HashAggregate (43)
                  +- * HashAggregate (42)
                     +- Exchange (41)
                        +- * HashAggregate (40)
                           +- * Project (39)
                              +- * BroadcastHashJoin Inner BuildRight (38)
                                 :- * Project (33)
                                 :  +- * BroadcastHashJoin Inner BuildRight (32)
                                 :     :- * Project (27)
                                 :     :  +- * BroadcastHashJoin Inner BuildRight (26)
                                 :     :     :- * Project (21)
                                 :     :     :  +- * BroadcastHashJoin Inner BuildRight (20)
                                 :     :     :     :- * Project (14)
                                 :     :     :     :  +- * SortMergeJoin Inner (13)
                                 :     :     :     :     :- * Sort (6)
                                 :     :     :     :     :  +- Exchange (5)
                                 :     :     :     :     :     +- * Project (4)
                                 :     :     :     :     :        +- * Filter (3)
                                 :     :     :     :     :           +- * ColumnarToRow (2)
                                 :     :     :     :     :              +- Scan parquet default.store_sales (1)
                                 :     :     :     :     +- * Sort (12)
                                 :     :     :     :        +- Exchange (11)
                                 :     :     :     :           +- * Project (10)
                                 :     :     :     :              +- * Filter (9)
                                 :     :     :     :                 +- * ColumnarToRow (8)
                                 :     :     :     :                    +- Scan parquet default.store_returns (7)
                                 :     :     :     +- BroadcastExchange (19)
                                 :     :     :        +- * Project (18)
                                 :     :     :           +- * Filter (17)
                                 :     :     :              +- * ColumnarToRow (16)
                                 :     :     :                 +- Scan parquet default.store (15)
                                 :     :     +- BroadcastExchange (25)
                                 :     :        +- * Filter (24)
                                 :     :           +- * ColumnarToRow (23)
                                 :     :              +- Scan parquet default.item (22)
                                 :     +- BroadcastExchange (31)
                                 :        +- * Filter (30)
                                 :           +- * ColumnarToRow (29)
                                 :              +- Scan parquet default.customer (28)
                                 +- BroadcastExchange (37)
                                    +- * Filter (36)
                                       +- * ColumnarToRow (35)
                                          +- Scan parquet default.customer_address (34)


(1) Scan parquet default.store_sales
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]

(3) Filter [codegen id : 1]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Condition : (((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2))

(4) Project [codegen id : 1]
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]

(5) Exchange
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Arguments: hashpartitioning(ss_ticket_number#4, ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#7]

(6) Sort [codegen id : 2]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Arguments: [ss_ticket_number#4 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST], false, 0

(7) Scan parquet default.store_returns
Output [3]: [sr_item_sk#8, sr_ticket_number#9, sr_returned_date_sk#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(8) ColumnarToRow [codegen id : 3]
Input [3]: [sr_item_sk#8, sr_ticket_number#9, sr_returned_date_sk#10]

(9) Filter [codegen id : 3]
Input [3]: [sr_item_sk#8, sr_ticket_number#9, sr_returned_date_sk#10]
Condition : (isnotnull(sr_ticket_number#9) AND isnotnull(sr_item_sk#8))

(10) Project [codegen id : 3]
Output [2]: [sr_item_sk#8, sr_ticket_number#9]
Input [3]: [sr_item_sk#8, sr_ticket_number#9, sr_returned_date_sk#10]

(11) Exchange
Input [2]: [sr_item_sk#8, sr_ticket_number#9]
Arguments: hashpartitioning(sr_ticket_number#9, sr_item_sk#8, 5), ENSURE_REQUIREMENTS, [id=#11]

(12) Sort [codegen id : 4]
Input [2]: [sr_item_sk#8, sr_ticket_number#9]
Arguments: [sr_ticket_number#9 ASC NULLS FIRST, sr_item_sk#8 ASC NULLS FIRST], false, 0

(13) SortMergeJoin [codegen id : 9]
Left keys [2]: [ss_ticket_number#4, ss_item_sk#1]
Right keys [2]: [sr_ticket_number#9, sr_item_sk#8]
Join condition: None

(14) Project [codegen id : 9]
Output [4]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, sr_item_sk#8, sr_ticket_number#9]

(15) Scan parquet default.store
Output [5]: [s_store_sk#12, s_store_name#13, s_market_id#14, s_state#15, s_zip#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(16) ColumnarToRow [codegen id : 5]
Input [5]: [s_store_sk#12, s_store_name#13, s_market_id#14, s_state#15, s_zip#16]

(17) Filter [codegen id : 5]
Input [5]: [s_store_sk#12, s_store_name#13, s_market_id#14, s_state#15, s_zip#16]
Condition : (((isnotnull(s_market_id#14) AND (s_market_id#14 = 8)) AND isnotnull(s_store_sk#12)) AND isnotnull(s_zip#16))

(18) Project [codegen id : 5]
Output [4]: [s_store_sk#12, s_store_name#13, s_state#15, s_zip#16]
Input [5]: [s_store_sk#12, s_store_name#13, s_market_id#14, s_state#15, s_zip#16]

(19) BroadcastExchange
Input [4]: [s_store_sk#12, s_store_name#13, s_state#15, s_zip#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#17]

(20) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#12]
Join condition: None

(21) Project [codegen id : 9]
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16]
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5, s_store_sk#12, s_store_name#13, s_state#15, s_zip#16]

(22) Scan parquet default.item
Output [6]: [i_item_sk#18, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_color), EqualTo(i_color,pale                ), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(23) ColumnarToRow [codegen id : 6]
Input [6]: [i_item_sk#18, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23]

(24) Filter [codegen id : 6]
Input [6]: [i_item_sk#18, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23]
Condition : ((isnotnull(i_color#21) AND (i_color#21 = pale                )) AND isnotnull(i_item_sk#18))

(25) BroadcastExchange
Input [6]: [i_item_sk#18, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#24]

(26) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#18]
Join condition: None

(27) Project [codegen id : 9]
Output [10]: [ss_customer_sk#2, ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16, i_item_sk#18, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23]

(28) Scan parquet default.customer
Output [5]: [c_customer_sk#25, c_current_addr_sk#26, c_first_name#27, c_last_name#28, c_birth_country#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(29) ColumnarToRow [codegen id : 7]
Input [5]: [c_customer_sk#25, c_current_addr_sk#26, c_first_name#27, c_last_name#28, c_birth_country#29]

(30) Filter [codegen id : 7]
Input [5]: [c_customer_sk#25, c_current_addr_sk#26, c_first_name#27, c_last_name#28, c_birth_country#29]
Condition : ((isnotnull(c_customer_sk#25) AND isnotnull(c_current_addr_sk#26)) AND isnotnull(c_birth_country#29))

(31) BroadcastExchange
Input [5]: [c_customer_sk#25, c_current_addr_sk#26, c_first_name#27, c_last_name#28, c_birth_country#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#30]

(32) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#25]
Join condition: None

(33) Project [codegen id : 9]
Output [13]: [ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23, c_current_addr_sk#26, c_first_name#27, c_last_name#28, c_birth_country#29]
Input [15]: [ss_customer_sk#2, ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23, c_customer_sk#25, c_current_addr_sk#26, c_first_name#27, c_last_name#28, c_birth_country#29]

(34) Scan parquet default.customer_address
Output [4]: [ca_address_sk#31, ca_state#32, ca_zip#33, ca_country#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_zip:string,ca_country:string>

(35) ColumnarToRow [codegen id : 8]
Input [4]: [ca_address_sk#31, ca_state#32, ca_zip#33, ca_country#34]

(36) Filter [codegen id : 8]
Input [4]: [ca_address_sk#31, ca_state#32, ca_zip#33, ca_country#34]
Condition : ((isnotnull(ca_address_sk#31) AND isnotnull(ca_country#34)) AND isnotnull(ca_zip#33))

(37) BroadcastExchange
Input [4]: [ca_address_sk#31, ca_state#32, ca_zip#33, ca_country#34]
Arguments: HashedRelationBroadcastMode(List(input[0, int, false], upper(input[3, string, false]), input[2, string, false]),false), [id=#35]

(38) BroadcastHashJoin [codegen id : 9]
Left keys [3]: [c_current_addr_sk#26, c_birth_country#29, s_zip#16]
Right keys [3]: [ca_address_sk#31, upper(ca_country#34), ca_zip#33]
Join condition: None

(39) Project [codegen id : 9]
Output [11]: [ss_net_paid#5, s_store_name#13, s_state#15, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23, c_first_name#27, c_last_name#28, ca_state#32]
Input [17]: [ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23, c_current_addr_sk#26, c_first_name#27, c_last_name#28, c_birth_country#29, ca_address_sk#31, ca_state#32, ca_zip#33, ca_country#34]

(40) HashAggregate [codegen id : 9]
Input [11]: [ss_net_paid#5, s_store_name#13, s_state#15, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23, c_first_name#27, c_last_name#28, ca_state#32]
Keys [10]: [c_last_name#28, c_first_name#27, s_store_name#13, ca_state#32, s_state#15, i_color#21, i_current_price#19, i_manager_id#23, i_units#22, i_size#20]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum#36]
Results [11]: [c_last_name#28, c_first_name#27, s_store_name#13, ca_state#32, s_state#15, i_color#21, i_current_price#19, i_manager_id#23, i_units#22, i_size#20, sum#37]

(41) Exchange
Input [11]: [c_last_name#28, c_first_name#27, s_store_name#13, ca_state#32, s_state#15, i_color#21, i_current_price#19, i_manager_id#23, i_units#22, i_size#20, sum#37]
Arguments: hashpartitioning(c_last_name#28, c_first_name#27, s_store_name#13, ca_state#32, s_state#15, i_color#21, i_current_price#19, i_manager_id#23, i_units#22, i_size#20, 5), ENSURE_REQUIREMENTS, [id=#38]

(42) HashAggregate [codegen id : 10]
Input [11]: [c_last_name#28, c_first_name#27, s_store_name#13, ca_state#32, s_state#15, i_color#21, i_current_price#19, i_manager_id#23, i_units#22, i_size#20, sum#37]
Keys [10]: [c_last_name#28, c_first_name#27, s_store_name#13, ca_state#32, s_state#15, i_color#21, i_current_price#19, i_manager_id#23, i_units#22, i_size#20]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#5))#39]
Results [4]: [c_last_name#28, c_first_name#27, s_store_name#13, MakeDecimal(sum(UnscaledValue(ss_net_paid#5))#39,17,2) AS netpaid#40]

(43) HashAggregate [codegen id : 10]
Input [4]: [c_last_name#28, c_first_name#27, s_store_name#13, netpaid#40]
Keys [3]: [c_last_name#28, c_first_name#27, s_store_name#13]
Functions [1]: [partial_sum(netpaid#40)]
Aggregate Attributes [2]: [sum#41, isEmpty#42]
Results [5]: [c_last_name#28, c_first_name#27, s_store_name#13, sum#43, isEmpty#44]

(44) Exchange
Input [5]: [c_last_name#28, c_first_name#27, s_store_name#13, sum#43, isEmpty#44]
Arguments: hashpartitioning(c_last_name#28, c_first_name#27, s_store_name#13, 5), ENSURE_REQUIREMENTS, [id=#45]

(45) HashAggregate [codegen id : 11]
Input [5]: [c_last_name#28, c_first_name#27, s_store_name#13, sum#43, isEmpty#44]
Keys [3]: [c_last_name#28, c_first_name#27, s_store_name#13]
Functions [1]: [sum(netpaid#40)]
Aggregate Attributes [1]: [sum(netpaid#40)#46]
Results [5]: [c_last_name#28, c_first_name#27, s_store_name#13, sum(netpaid#40)#46 AS paid#47, sum(netpaid#40)#46 AS sum(netpaid#40)#48]

(46) Filter [codegen id : 11]
Input [5]: [c_last_name#28, c_first_name#27, s_store_name#13, paid#47, sum(netpaid#40)#48]
Condition : (isnotnull(sum(netpaid#40)#48) AND (cast(sum(netpaid#40)#48 as decimal(33,8)) > cast(Subquery scalar-subquery#49, [id=#50] as decimal(33,8))))

(47) Project [codegen id : 11]
Output [4]: [c_last_name#28, c_first_name#27, s_store_name#13, paid#47]
Input [5]: [c_last_name#28, c_first_name#27, s_store_name#13, paid#47, sum(netpaid#40)#48]

(48) Exchange
Input [4]: [c_last_name#28, c_first_name#27, s_store_name#13, paid#47]
Arguments: rangepartitioning(c_last_name#28 ASC NULLS FIRST, c_first_name#27 ASC NULLS FIRST, s_store_name#13 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [id=#51]

(49) Sort [codegen id : 12]
Input [4]: [c_last_name#28, c_first_name#27, s_store_name#13, paid#47]
Arguments: [c_last_name#28 ASC NULLS FIRST, c_first_name#27 ASC NULLS FIRST, s_store_name#13 ASC NULLS FIRST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 46 Hosting Expression = Subquery scalar-subquery#49, [id=#50]
* HashAggregate (76)
+- Exchange (75)
   +- * HashAggregate (74)
      +- * HashAggregate (73)
         +- Exchange (72)
            +- * HashAggregate (71)
               +- * Project (70)
                  +- * BroadcastHashJoin Inner BuildRight (69)
                     :- * Project (67)
                     :  +- * BroadcastHashJoin Inner BuildRight (66)
                     :     :- * Project (64)
                     :     :  +- * BroadcastHashJoin Inner BuildRight (63)
                     :     :     :- * Project (58)
                     :     :     :  +- * BroadcastHashJoin Inner BuildRight (57)
                     :     :     :     :- * Project (55)
                     :     :     :     :  +- * SortMergeJoin Inner (54)
                     :     :     :     :     :- * Sort (51)
                     :     :     :     :     :  +- ReusedExchange (50)
                     :     :     :     :     +- * Sort (53)
                     :     :     :     :        +- ReusedExchange (52)
                     :     :     :     +- ReusedExchange (56)
                     :     :     +- BroadcastExchange (62)
                     :     :        +- * Filter (61)
                     :     :           +- * ColumnarToRow (60)
                     :     :              +- Scan parquet default.item (59)
                     :     +- ReusedExchange (65)
                     +- ReusedExchange (68)


(50) ReusedExchange [Reuses operator id: 5]
Output [5]: [ss_item_sk#52, ss_customer_sk#53, ss_store_sk#54, ss_ticket_number#55, ss_net_paid#56]

(51) Sort [codegen id : 2]
Input [5]: [ss_item_sk#52, ss_customer_sk#53, ss_store_sk#54, ss_ticket_number#55, ss_net_paid#56]
Arguments: [ss_ticket_number#55 ASC NULLS FIRST, ss_item_sk#52 ASC NULLS FIRST], false, 0

(52) ReusedExchange [Reuses operator id: 11]
Output [2]: [sr_item_sk#57, sr_ticket_number#58]

(53) Sort [codegen id : 4]
Input [2]: [sr_item_sk#57, sr_ticket_number#58]
Arguments: [sr_ticket_number#58 ASC NULLS FIRST, sr_item_sk#57 ASC NULLS FIRST], false, 0

(54) SortMergeJoin [codegen id : 9]
Left keys [2]: [ss_ticket_number#55, ss_item_sk#52]
Right keys [2]: [sr_ticket_number#58, sr_item_sk#57]
Join condition: None

(55) Project [codegen id : 9]
Output [4]: [ss_item_sk#52, ss_customer_sk#53, ss_store_sk#54, ss_net_paid#56]
Input [7]: [ss_item_sk#52, ss_customer_sk#53, ss_store_sk#54, ss_ticket_number#55, ss_net_paid#56, sr_item_sk#57, sr_ticket_number#58]

(56) ReusedExchange [Reuses operator id: 19]
Output [4]: [s_store_sk#59, s_store_name#60, s_state#61, s_zip#62]

(57) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#54]
Right keys [1]: [s_store_sk#59]
Join condition: None

(58) Project [codegen id : 9]
Output [6]: [ss_item_sk#52, ss_customer_sk#53, ss_net_paid#56, s_store_name#60, s_state#61, s_zip#62]
Input [8]: [ss_item_sk#52, ss_customer_sk#53, ss_store_sk#54, ss_net_paid#56, s_store_sk#59, s_store_name#60, s_state#61, s_zip#62]

(59) Scan parquet default.item
Output [6]: [i_item_sk#63, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(60) ColumnarToRow [codegen id : 6]
Input [6]: [i_item_sk#63, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68]

(61) Filter [codegen id : 6]
Input [6]: [i_item_sk#63, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68]
Condition : isnotnull(i_item_sk#63)

(62) BroadcastExchange
Input [6]: [i_item_sk#63, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69]

(63) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#52]
Right keys [1]: [i_item_sk#63]
Join condition: None

(64) Project [codegen id : 9]
Output [10]: [ss_customer_sk#53, ss_net_paid#56, s_store_name#60, s_state#61, s_zip#62, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68]
Input [12]: [ss_item_sk#52, ss_customer_sk#53, ss_net_paid#56, s_store_name#60, s_state#61, s_zip#62, i_item_sk#63, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68]

(65) ReusedExchange [Reuses operator id: 31]
Output [5]: [c_customer_sk#70, c_current_addr_sk#71, c_first_name#72, c_last_name#73, c_birth_country#74]

(66) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_customer_sk#53]
Right keys [1]: [c_customer_sk#70]
Join condition: None

(67) Project [codegen id : 9]
Output [13]: [ss_net_paid#56, s_store_name#60, s_state#61, s_zip#62, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68, c_current_addr_sk#71, c_first_name#72, c_last_name#73, c_birth_country#74]
Input [15]: [ss_customer_sk#53, ss_net_paid#56, s_store_name#60, s_state#61, s_zip#62, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68, c_customer_sk#70, c_current_addr_sk#71, c_first_name#72, c_last_name#73, c_birth_country#74]

(68) ReusedExchange [Reuses operator id: 37]
Output [4]: [ca_address_sk#75, ca_state#76, ca_zip#77, ca_country#78]

(69) BroadcastHashJoin [codegen id : 9]
Left keys [3]: [c_current_addr_sk#71, c_birth_country#74, s_zip#62]
Right keys [3]: [ca_address_sk#75, upper(ca_country#78), ca_zip#77]
Join condition: None

(70) Project [codegen id : 9]
Output [11]: [ss_net_paid#56, s_store_name#60, s_state#61, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68, c_first_name#72, c_last_name#73, ca_state#76]
Input [17]: [ss_net_paid#56, s_store_name#60, s_state#61, s_zip#62, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68, c_current_addr_sk#71, c_first_name#72, c_last_name#73, c_birth_country#74, ca_address_sk#75, ca_state#76, ca_zip#77, ca_country#78]

(71) HashAggregate [codegen id : 9]
Input [11]: [ss_net_paid#56, s_store_name#60, s_state#61, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68, c_first_name#72, c_last_name#73, ca_state#76]
Keys [10]: [c_last_name#73, c_first_name#72, s_store_name#60, ca_state#76, s_state#61, i_color#66, i_current_price#64, i_manager_id#68, i_units#67, i_size#65]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#56))]
Aggregate Attributes [1]: [sum#79]
Results [11]: [c_last_name#73, c_first_name#72, s_store_name#60, ca_state#76, s_state#61, i_color#66, i_current_price#64, i_manager_id#68, i_units#67, i_size#65, sum#80]

(72) Exchange
Input [11]: [c_last_name#73, c_first_name#72, s_store_name#60, ca_state#76, s_state#61, i_color#66, i_current_price#64, i_manager_id#68, i_units#67, i_size#65, sum#80]
Arguments: hashpartitioning(c_last_name#73, c_first_name#72, s_store_name#60, ca_state#76, s_state#61, i_color#66, i_current_price#64, i_manager_id#68, i_units#67, i_size#65, 5), ENSURE_REQUIREMENTS, [id=#81]

(73) HashAggregate [codegen id : 10]
Input [11]: [c_last_name#73, c_first_name#72, s_store_name#60, ca_state#76, s_state#61, i_color#66, i_current_price#64, i_manager_id#68, i_units#67, i_size#65, sum#80]
Keys [10]: [c_last_name#73, c_first_name#72, s_store_name#60, ca_state#76, s_state#61, i_color#66, i_current_price#64, i_manager_id#68, i_units#67, i_size#65]
Functions [1]: [sum(UnscaledValue(ss_net_paid#56))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#56))#82]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_paid#56))#82,17,2) AS netpaid#40]

(74) HashAggregate [codegen id : 10]
Input [1]: [netpaid#40]
Keys: []
Functions [1]: [partial_avg(netpaid#40)]
Aggregate Attributes [2]: [sum#83, count#84]
Results [2]: [sum#85, count#86]

(75) Exchange
Input [2]: [sum#85, count#86]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#87]

(76) HashAggregate [codegen id : 11]
Input [2]: [sum#85, count#86]
Keys: []
Functions [1]: [avg(netpaid#40)]
Aggregate Attributes [1]: [avg(netpaid#40)#88]
Results [1]: [CheckOverflow((0.050000 * promote_precision(avg(netpaid#40)#88)), DecimalType(24,8), true) AS (0.05 * avg(netpaid))#89]


