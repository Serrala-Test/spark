== Physical Plan ==
TakeOrderedAndProject (49)
+- * Project (48)
   +- Window (47)
      +- * Sort (46)
         +- Exchange (45)
            +- * HashAggregate (44)
               +- Exchange (43)
                  +- * HashAggregate (42)
                     +- Union (41)
                        :- * HashAggregate (30)
                        :  +- Exchange (29)
                        :     +- * HashAggregate (28)
                        :        +- * Project (27)
                        :           +- * SortMergeJoin Inner (26)
                        :              :- * Sort (19)
                        :              :  +- Exchange (18)
                        :              :     +- * Project (17)
                        :              :        +- * BroadcastHashJoin Inner BuildRight (16)
                        :              :           :- * Project (10)
                        :              :           :  +- * BroadcastHashJoin Inner BuildRight (9)
                        :              :           :     :- * Filter (3)
                        :              :           :     :  +- * ColumnarToRow (2)
                        :              :           :     :     +- Scan parquet default.store_sales (1)
                        :              :           :     +- BroadcastExchange (8)
                        :              :           :        +- * Project (7)
                        :              :           :           +- * Filter (6)
                        :              :           :              +- * ColumnarToRow (5)
                        :              :           :                 +- Scan parquet default.date_dim (4)
                        :              :           +- BroadcastExchange (15)
                        :              :              +- * Project (14)
                        :              :                 +- * Filter (13)
                        :              :                    +- * ColumnarToRow (12)
                        :              :                       +- Scan parquet default.store (11)
                        :              +- * Sort (25)
                        :                 +- Exchange (24)
                        :                    +- * Project (23)
                        :                       +- * Filter (22)
                        :                          +- * ColumnarToRow (21)
                        :                             +- Scan parquet default.item (20)
                        :- * HashAggregate (35)
                        :  +- Exchange (34)
                        :     +- * HashAggregate (33)
                        :        +- * HashAggregate (32)
                        :           +- ReusedExchange (31)
                        +- * HashAggregate (40)
                           +- Exchange (39)
                              +- * HashAggregate (38)
                                 +- * HashAggregate (37)
                                    +- ReusedExchange (36)


(1) Scan parquet default.store_sales
Output [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5]

(3) Filter [codegen id : 3]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5]
Condition : ((isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_item_sk#2)) AND isnotnull(ss_store_sk#3))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_year#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#7]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#7]
Condition : ((isnotnull(d_year#7) AND (d_year#7 = 2001)) AND isnotnull(d_date_sk#6))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_year#7]

(8) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#6]
Join condition: None

(10) Project [codegen id : 3]
Output [4]: [ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5, d_date_sk#6]

(11) Scan parquet default.store
Output [2]: [s_store_sk#9, s_state#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [s_store_sk#9, s_state#10]

(13) Filter [codegen id : 2]
Input [2]: [s_store_sk#9, s_state#10]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#10, 2, false, true) = TN) AND isnotnull(s_store_sk#9))

(14) Project [codegen id : 2]
Output [1]: [s_store_sk#9]
Input [2]: [s_store_sk#9, s_state#10]

(15) BroadcastExchange
Input [1]: [s_store_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#11]

(16) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#9]
Join condition: None

(17) Project [codegen id : 3]
Output [3]: [ss_item_sk#2, ss_ext_sales_price#4, ss_net_profit#5]
Input [5]: [ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5, s_store_sk#9]

(18) Exchange
Input [3]: [ss_item_sk#2, ss_ext_sales_price#4, ss_net_profit#5]
Arguments: hashpartitioning(ss_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#12]

(19) Sort [codegen id : 4]
Input [3]: [ss_item_sk#2, ss_ext_sales_price#4, ss_net_profit#5]
Arguments: [ss_item_sk#2 ASC NULLS FIRST], false, 0

(20) Scan parquet default.item
Output [3]: [i_item_sk#13, i_class#14, i_category#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(21) ColumnarToRow [codegen id : 5]
Input [3]: [i_item_sk#13, i_class#14, i_category#15]

(22) Filter [codegen id : 5]
Input [3]: [i_item_sk#13, i_class#14, i_category#15]
Condition : isnotnull(i_item_sk#13)

(23) Project [codegen id : 5]
Output [3]: [i_item_sk#13, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_class#14, 50, false, true) AS i_class#16, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#15, 50, false, true) AS i_category#17]
Input [3]: [i_item_sk#13, i_class#14, i_category#15]

(24) Exchange
Input [3]: [i_item_sk#13, i_class#16, i_category#17]
Arguments: hashpartitioning(i_item_sk#13, 5), ENSURE_REQUIREMENTS, [id=#18]

(25) Sort [codegen id : 6]
Input [3]: [i_item_sk#13, i_class#16, i_category#17]
Arguments: [i_item_sk#13 ASC NULLS FIRST], false, 0

(26) SortMergeJoin [codegen id : 7]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#13]
Join condition: None

(27) Project [codegen id : 7]
Output [4]: [ss_ext_sales_price#4, ss_net_profit#5, i_class#16, i_category#17]
Input [6]: [ss_item_sk#2, ss_ext_sales_price#4, ss_net_profit#5, i_item_sk#13, i_class#16, i_category#17]

(28) HashAggregate [codegen id : 7]
Input [4]: [ss_ext_sales_price#4, ss_net_profit#5, i_class#16, i_category#17]
Keys [2]: [i_category#17, i_class#16]
Functions [2]: [partial_sum(UnscaledValue(ss_net_profit#5)), partial_sum(UnscaledValue(ss_ext_sales_price#4))]
Aggregate Attributes [2]: [sum#19, sum#20]
Results [4]: [i_category#17, i_class#16, sum#21, sum#22]

(29) Exchange
Input [4]: [i_category#17, i_class#16, sum#21, sum#22]
Arguments: hashpartitioning(i_category#17, i_class#16, 5), ENSURE_REQUIREMENTS, [id=#23]

(30) HashAggregate [codegen id : 8]
Input [4]: [i_category#17, i_class#16, sum#21, sum#22]
Keys [2]: [i_category#17, i_class#16]
Functions [2]: [sum(UnscaledValue(ss_net_profit#5)), sum(UnscaledValue(ss_ext_sales_price#4))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#5))#24, sum(UnscaledValue(ss_ext_sales_price#4))#25]
Results [6]: [cast(CheckOverflow((promote_precision(MakeDecimal(sum(UnscaledValue(ss_net_profit#5))#24,17,2)) / promote_precision(MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#4))#25,17,2))), DecimalType(37,20), true) as decimal(38,20)) AS gross_margin#26, i_category#17, i_class#16, 0 AS t_category#27, 0 AS t_class#28, 0 AS lochierarchy#29]

(31) ReusedExchange [Reuses operator id: 29]
Output [4]: [i_category#30, i_class#31, sum#32, sum#33]

(32) HashAggregate [codegen id : 16]
Input [4]: [i_category#30, i_class#31, sum#32, sum#33]
Keys [2]: [i_category#30, i_class#31]
Functions [2]: [sum(UnscaledValue(ss_net_profit#5)), sum(UnscaledValue(ss_ext_sales_price#4))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#5))#34, sum(UnscaledValue(ss_ext_sales_price#4))#35]
Results [3]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#5))#34,17,2) AS ss_net_profit#36, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#4))#35,17,2) AS ss_ext_sales_price#37, i_category#30]

(33) HashAggregate [codegen id : 16]
Input [3]: [ss_net_profit#36, ss_ext_sales_price#37, i_category#30]
Keys [1]: [i_category#30]
Functions [2]: [partial_sum(ss_net_profit#36), partial_sum(ss_ext_sales_price#37)]
Aggregate Attributes [4]: [sum#38, isEmpty#39, sum#40, isEmpty#41]
Results [5]: [i_category#30, sum#42, isEmpty#43, sum#44, isEmpty#45]

(34) Exchange
Input [5]: [i_category#30, sum#42, isEmpty#43, sum#44, isEmpty#45]
Arguments: hashpartitioning(i_category#30, 5), ENSURE_REQUIREMENTS, [id=#46]

(35) HashAggregate [codegen id : 17]
Input [5]: [i_category#30, sum#42, isEmpty#43, sum#44, isEmpty#45]
Keys [1]: [i_category#30]
Functions [2]: [sum(ss_net_profit#36), sum(ss_ext_sales_price#37)]
Aggregate Attributes [2]: [sum(ss_net_profit#36)#47, sum(ss_ext_sales_price#37)#48]
Results [6]: [cast(CheckOverflow((promote_precision(sum(ss_net_profit#36)#47) / promote_precision(sum(ss_ext_sales_price#37)#48)), DecimalType(38,11), true) as decimal(38,20)) AS gross_margin#49, i_category#30 AS i_category#50, null AS i_class#51, 0 AS t_category#52, 1 AS t_class#53, 1 AS lochierarchy#54]

(36) ReusedExchange [Reuses operator id: 29]
Output [4]: [i_category#55, i_class#56, sum#57, sum#58]

(37) HashAggregate [codegen id : 25]
Input [4]: [i_category#55, i_class#56, sum#57, sum#58]
Keys [2]: [i_category#55, i_class#56]
Functions [2]: [sum(UnscaledValue(ss_net_profit#5)), sum(UnscaledValue(ss_ext_sales_price#4))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#5))#59, sum(UnscaledValue(ss_ext_sales_price#4))#60]
Results [2]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#5))#59,17,2) AS ss_net_profit#36, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#4))#60,17,2) AS ss_ext_sales_price#37]

(38) HashAggregate [codegen id : 25]
Input [2]: [ss_net_profit#36, ss_ext_sales_price#37]
Keys: []
Functions [2]: [partial_sum(ss_net_profit#36), partial_sum(ss_ext_sales_price#37)]
Aggregate Attributes [4]: [sum#61, isEmpty#62, sum#63, isEmpty#64]
Results [4]: [sum#65, isEmpty#66, sum#67, isEmpty#68]

(39) Exchange
Input [4]: [sum#65, isEmpty#66, sum#67, isEmpty#68]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#69]

(40) HashAggregate [codegen id : 26]
Input [4]: [sum#65, isEmpty#66, sum#67, isEmpty#68]
Keys: []
Functions [2]: [sum(ss_net_profit#36), sum(ss_ext_sales_price#37)]
Aggregate Attributes [2]: [sum(ss_net_profit#36)#70, sum(ss_ext_sales_price#37)#71]
Results [6]: [cast(CheckOverflow((promote_precision(sum(ss_net_profit#36)#70) / promote_precision(sum(ss_ext_sales_price#37)#71)), DecimalType(38,11), true) as decimal(38,20)) AS gross_margin#72, null AS i_category#73, null AS i_class#74, 1 AS t_category#75, 1 AS t_class#76, 2 AS lochierarchy#77]

(41) Union

(42) HashAggregate [codegen id : 27]
Input [6]: [gross_margin#26, i_category#17, i_class#16, t_category#27, t_class#28, lochierarchy#29]
Keys [6]: [gross_margin#26, i_category#17, i_class#16, t_category#27, t_class#28, lochierarchy#29]
Functions: []
Aggregate Attributes: []
Results [6]: [gross_margin#26, i_category#17, i_class#16, t_category#27, t_class#28, lochierarchy#29]

(43) Exchange
Input [6]: [gross_margin#26, i_category#17, i_class#16, t_category#27, t_class#28, lochierarchy#29]
Arguments: hashpartitioning(gross_margin#26, i_category#17, i_class#16, t_category#27, t_class#28, lochierarchy#29, 5), ENSURE_REQUIREMENTS, [id=#78]

(44) HashAggregate [codegen id : 28]
Input [6]: [gross_margin#26, i_category#17, i_class#16, t_category#27, t_class#28, lochierarchy#29]
Keys [6]: [gross_margin#26, i_category#17, i_class#16, t_category#27, t_class#28, lochierarchy#29]
Functions: []
Aggregate Attributes: []
Results [5]: [gross_margin#26, i_category#17, i_class#16, lochierarchy#29, CASE WHEN (t_class#28 = 0) THEN i_category#17 END AS _w0#79]

(45) Exchange
Input [5]: [gross_margin#26, i_category#17, i_class#16, lochierarchy#29, _w0#79]
Arguments: hashpartitioning(lochierarchy#29, _w0#79, 5), ENSURE_REQUIREMENTS, [id=#80]

(46) Sort [codegen id : 29]
Input [5]: [gross_margin#26, i_category#17, i_class#16, lochierarchy#29, _w0#79]
Arguments: [lochierarchy#29 ASC NULLS FIRST, _w0#79 ASC NULLS FIRST, gross_margin#26 ASC NULLS FIRST], false, 0

(47) Window
Input [5]: [gross_margin#26, i_category#17, i_class#16, lochierarchy#29, _w0#79]
Arguments: [rank(gross_margin#26) windowspecdefinition(lochierarchy#29, _w0#79, gross_margin#26 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#81], [lochierarchy#29, _w0#79], [gross_margin#26 ASC NULLS FIRST]

(48) Project [codegen id : 30]
Output [5]: [gross_margin#26, i_category#17, i_class#16, lochierarchy#29, rank_within_parent#81]
Input [6]: [gross_margin#26, i_category#17, i_class#16, lochierarchy#29, _w0#79, rank_within_parent#81]

(49) TakeOrderedAndProject
Input [5]: [gross_margin#26, i_category#17, i_class#16, lochierarchy#29, rank_within_parent#81]
Arguments: 100, [lochierarchy#29 DESC NULLS LAST, CASE WHEN (lochierarchy#29 = 0) THEN i_category#17 END ASC NULLS FIRST, rank_within_parent#81 ASC NULLS FIRST], [gross_margin#26, i_category#17, i_class#16, lochierarchy#29, rank_within_parent#81]

