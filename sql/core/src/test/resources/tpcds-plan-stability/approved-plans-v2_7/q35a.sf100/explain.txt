== Physical Plan ==
TakeOrderedAndProject (52)
+- * HashAggregate (51)
   +- Exchange (50)
      +- * HashAggregate (49)
         +- * Project (48)
            +- * SortMergeJoin Inner (47)
               :- * Sort (41)
               :  +- Exchange (40)
               :     +- * Project (39)
               :        +- * SortMergeJoin Inner (38)
               :           :- * Sort (32)
               :           :  +- Exchange (31)
               :           :     +- * Project (30)
               :           :        +- * SortMergeJoin LeftSemi (29)
               :           :           :- * Sort (15)
               :           :           :  +- Exchange (14)
               :           :           :     +- * BroadcastHashJoin LeftSemi BuildRight (13)
               :           :           :        :- * Filter (3)
               :           :           :        :  +- * ColumnarToRow (2)
               :           :           :        :     +- Scan parquet default.customer (1)
               :           :           :        +- BroadcastExchange (12)
               :           :           :           +- * HashAggregate (11)
               :           :           :              +- Exchange (10)
               :           :           :                 +- * HashAggregate (9)
               :           :           :                    +- * Project (8)
               :           :           :                       +- * BroadcastHashJoin Inner BuildRight (7)
               :           :           :                          :- * ColumnarToRow (5)
               :           :           :                          :  +- Scan parquet default.store_sales (4)
               :           :           :                          +- ReusedExchange (6)
               :           :           +- * Sort (28)
               :           :              +- Exchange (27)
               :           :                 +- Union (26)
               :           :                    :- * Project (20)
               :           :                    :  +- * BroadcastHashJoin Inner BuildRight (19)
               :           :                    :     :- * ColumnarToRow (17)
               :           :                    :     :  +- Scan parquet default.web_sales (16)
               :           :                    :     +- ReusedExchange (18)
               :           :                    +- * Project (25)
               :           :                       +- * BroadcastHashJoin Inner BuildRight (24)
               :           :                          :- * ColumnarToRow (22)
               :           :                          :  +- Scan parquet default.catalog_sales (21)
               :           :                          +- ReusedExchange (23)
               :           +- * Sort (37)
               :              +- Exchange (36)
               :                 +- * Filter (35)
               :                    +- * ColumnarToRow (34)
               :                       +- Scan parquet default.customer_address (33)
               +- * Sort (46)
                  +- Exchange (45)
                     +- * Filter (44)
                        +- * ColumnarToRow (43)
                           +- Scan parquet default.customer_demographics (42)


(1) Scan parquet default.customer
Output [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 4]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(3) Filter [codegen id : 4]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Condition : (isnotnull(c_current_addr_sk#3) AND isnotnull(c_current_cdemo_sk#2))

(4) Scan parquet default.store_sales
Output [2]: [ss_customer_sk#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#5), dynamicpruningexpression(ss_sold_date_sk#5 IN dynamicpruning#6)]
ReadSchema: struct<ss_customer_sk:int>

(5) ColumnarToRow [codegen id : 2]
Input [2]: [ss_customer_sk#4, ss_sold_date_sk#5]

(6) ReusedExchange [Reuses operator id: 57]
Output [1]: [d_date_sk#7]

(7) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#5]
Right keys [1]: [d_date_sk#7]
Join condition: None

(8) Project [codegen id : 2]
Output [1]: [ss_customer_sk#4]
Input [3]: [ss_customer_sk#4, ss_sold_date_sk#5, d_date_sk#7]

(9) HashAggregate [codegen id : 2]
Input [1]: [ss_customer_sk#4]
Keys [1]: [ss_customer_sk#4]
Functions: []
Aggregate Attributes: []
Results [1]: [ss_customer_sk#4]

(10) Exchange
Input [1]: [ss_customer_sk#4]
Arguments: hashpartitioning(ss_customer_sk#4, 5), ENSURE_REQUIREMENTS, [id=#8]

(11) HashAggregate [codegen id : 3]
Input [1]: [ss_customer_sk#4]
Keys [1]: [ss_customer_sk#4]
Functions: []
Aggregate Attributes: []
Results [1]: [ss_customer_sk#4]

(12) BroadcastExchange
Input [1]: [ss_customer_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#9]

(13) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#4]
Join condition: None

(14) Exchange
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: hashpartitioning(c_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#10]

(15) Sort [codegen id : 5]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(16) Scan parquet default.web_sales
Output [2]: [ws_bill_customer_sk#11, ws_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#12), dynamicpruningexpression(ws_sold_date_sk#12 IN dynamicpruning#6)]
ReadSchema: struct<ws_bill_customer_sk:int>

(17) ColumnarToRow [codegen id : 7]
Input [2]: [ws_bill_customer_sk#11, ws_sold_date_sk#12]

(18) ReusedExchange [Reuses operator id: 57]
Output [1]: [d_date_sk#13]

(19) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ws_sold_date_sk#12]
Right keys [1]: [d_date_sk#13]
Join condition: None

(20) Project [codegen id : 7]
Output [1]: [ws_bill_customer_sk#11 AS customsk#14]
Input [3]: [ws_bill_customer_sk#11, ws_sold_date_sk#12, d_date_sk#13]

(21) Scan parquet default.catalog_sales
Output [2]: [cs_ship_customer_sk#15, cs_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#16), dynamicpruningexpression(cs_sold_date_sk#16 IN dynamicpruning#6)]
ReadSchema: struct<cs_ship_customer_sk:int>

(22) ColumnarToRow [codegen id : 9]
Input [2]: [cs_ship_customer_sk#15, cs_sold_date_sk#16]

(23) ReusedExchange [Reuses operator id: 57]
Output [1]: [d_date_sk#17]

(24) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#17]
Join condition: None

(25) Project [codegen id : 9]
Output [1]: [cs_ship_customer_sk#15 AS customsk#18]
Input [3]: [cs_ship_customer_sk#15, cs_sold_date_sk#16, d_date_sk#17]

(26) Union

(27) Exchange
Input [1]: [customsk#14]
Arguments: hashpartitioning(customsk#14, 5), ENSURE_REQUIREMENTS, [id=#19]

(28) Sort [codegen id : 10]
Input [1]: [customsk#14]
Arguments: [customsk#14 ASC NULLS FIRST], false, 0

(29) SortMergeJoin [codegen id : 11]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [customsk#14]
Join condition: None

(30) Project [codegen id : 11]
Output [2]: [c_current_cdemo_sk#2, c_current_addr_sk#3]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(31) Exchange
Input [2]: [c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: hashpartitioning(c_current_addr_sk#3, 5), ENSURE_REQUIREMENTS, [id=#20]

(32) Sort [codegen id : 12]
Input [2]: [c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: [c_current_addr_sk#3 ASC NULLS FIRST], false, 0

(33) Scan parquet default.customer_address
Output [2]: [ca_address_sk#21, ca_state#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(34) ColumnarToRow [codegen id : 13]
Input [2]: [ca_address_sk#21, ca_state#22]

(35) Filter [codegen id : 13]
Input [2]: [ca_address_sk#21, ca_state#22]
Condition : isnotnull(ca_address_sk#21)

(36) Exchange
Input [2]: [ca_address_sk#21, ca_state#22]
Arguments: hashpartitioning(ca_address_sk#21, 5), ENSURE_REQUIREMENTS, [id=#23]

(37) Sort [codegen id : 14]
Input [2]: [ca_address_sk#21, ca_state#22]
Arguments: [ca_address_sk#21 ASC NULLS FIRST], false, 0

(38) SortMergeJoin [codegen id : 15]
Left keys [1]: [c_current_addr_sk#3]
Right keys [1]: [ca_address_sk#21]
Join condition: None

(39) Project [codegen id : 15]
Output [2]: [c_current_cdemo_sk#2, ca_state#22]
Input [4]: [c_current_cdemo_sk#2, c_current_addr_sk#3, ca_address_sk#21, ca_state#22]

(40) Exchange
Input [2]: [c_current_cdemo_sk#2, ca_state#22]
Arguments: hashpartitioning(c_current_cdemo_sk#2, 5), ENSURE_REQUIREMENTS, [id=#24]

(41) Sort [codegen id : 16]
Input [2]: [c_current_cdemo_sk#2, ca_state#22]
Arguments: [c_current_cdemo_sk#2 ASC NULLS FIRST], false, 0

(42) Scan parquet default.customer_demographics
Output [6]: [cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(43) ColumnarToRow [codegen id : 17]
Input [6]: [cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]

(44) Filter [codegen id : 17]
Input [6]: [cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]
Condition : isnotnull(cd_demo_sk#25)

(45) Exchange
Input [6]: [cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]
Arguments: hashpartitioning(cd_demo_sk#25, 5), ENSURE_REQUIREMENTS, [id=#31]

(46) Sort [codegen id : 18]
Input [6]: [cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]
Arguments: [cd_demo_sk#25 ASC NULLS FIRST], false, 0

(47) SortMergeJoin [codegen id : 19]
Left keys [1]: [c_current_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#25]
Join condition: None

(48) Project [codegen id : 19]
Output [6]: [ca_state#22, cd_gender#26, cd_marital_status#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]
Input [8]: [c_current_cdemo_sk#2, ca_state#22, cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]

(49) HashAggregate [codegen id : 19]
Input [6]: [ca_state#22, cd_gender#26, cd_marital_status#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]
Keys [6]: [ca_state#22, cd_gender#26, cd_marital_status#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]
Functions [10]: [partial_count(1), partial_avg(cd_dep_count#28), partial_max(cd_dep_count#28), partial_sum(cd_dep_count#28), partial_avg(cd_dep_employed_count#29), partial_max(cd_dep_employed_count#29), partial_sum(cd_dep_employed_count#29), partial_avg(cd_dep_college_count#30), partial_max(cd_dep_college_count#30), partial_sum(cd_dep_college_count#30)]
Aggregate Attributes [13]: [count#32, sum#33, count#34, max#35, sum#36, sum#37, count#38, max#39, sum#40, sum#41, count#42, max#43, sum#44]
Results [19]: [ca_state#22, cd_gender#26, cd_marital_status#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30, count#45, sum#46, count#47, max#48, sum#49, sum#50, count#51, max#52, sum#53, sum#54, count#55, max#56, sum#57]

(50) Exchange
Input [19]: [ca_state#22, cd_gender#26, cd_marital_status#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30, count#45, sum#46, count#47, max#48, sum#49, sum#50, count#51, max#52, sum#53, sum#54, count#55, max#56, sum#57]
Arguments: hashpartitioning(ca_state#22, cd_gender#26, cd_marital_status#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30, 5), ENSURE_REQUIREMENTS, [id=#58]

(51) HashAggregate [codegen id : 20]
Input [19]: [ca_state#22, cd_gender#26, cd_marital_status#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30, count#45, sum#46, count#47, max#48, sum#49, sum#50, count#51, max#52, sum#53, sum#54, count#55, max#56, sum#57]
Keys [6]: [ca_state#22, cd_gender#26, cd_marital_status#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]
Functions [10]: [count(1), avg(cd_dep_count#28), max(cd_dep_count#28), sum(cd_dep_count#28), avg(cd_dep_employed_count#29), max(cd_dep_employed_count#29), sum(cd_dep_employed_count#29), avg(cd_dep_college_count#30), max(cd_dep_college_count#30), sum(cd_dep_college_count#30)]
Aggregate Attributes [10]: [count(1)#59, avg(cd_dep_count#28)#60, max(cd_dep_count#28)#61, sum(cd_dep_count#28)#62, avg(cd_dep_employed_count#29)#63, max(cd_dep_employed_count#29)#64, sum(cd_dep_employed_count#29)#65, avg(cd_dep_college_count#30)#66, max(cd_dep_college_count#30)#67, sum(cd_dep_college_count#30)#68]
Results [18]: [ca_state#22, cd_gender#26, cd_marital_status#27, cd_dep_count#28, count(1)#59 AS cnt1#69, avg(cd_dep_count#28)#60 AS avg(cd_dep_count)#70, max(cd_dep_count#28)#61 AS max(cd_dep_count)#71, sum(cd_dep_count#28)#62 AS sum(cd_dep_count)#72, cd_dep_employed_count#29, count(1)#59 AS cnt2#73, avg(cd_dep_employed_count#29)#63 AS avg(cd_dep_employed_count)#74, max(cd_dep_employed_count#29)#64 AS max(cd_dep_employed_count)#75, sum(cd_dep_employed_count#29)#65 AS sum(cd_dep_employed_count)#76, cd_dep_college_count#30, count(1)#59 AS cnt3#77, avg(cd_dep_college_count#30)#66 AS avg(cd_dep_college_count)#78, max(cd_dep_college_count#30)#67 AS max(cd_dep_college_count)#79, sum(cd_dep_college_count#30)#68 AS sum(cd_dep_college_count)#80]

(52) TakeOrderedAndProject
Input [18]: [ca_state#22, cd_gender#26, cd_marital_status#27, cd_dep_count#28, cnt1#69, avg(cd_dep_count)#70, max(cd_dep_count)#71, sum(cd_dep_count)#72, cd_dep_employed_count#29, cnt2#73, avg(cd_dep_employed_count)#74, max(cd_dep_employed_count)#75, sum(cd_dep_employed_count)#76, cd_dep_college_count#30, cnt3#77, avg(cd_dep_college_count)#78, max(cd_dep_college_count)#79, sum(cd_dep_college_count)#80]
Arguments: 100, [ca_state#22 ASC NULLS FIRST, cd_gender#26 ASC NULLS FIRST, cd_marital_status#27 ASC NULLS FIRST, cd_dep_count#28 ASC NULLS FIRST, cd_dep_employed_count#29 ASC NULLS FIRST, cd_dep_college_count#30 ASC NULLS FIRST], [ca_state#22, cd_gender#26, cd_marital_status#27, cd_dep_count#28, cnt1#69, avg(cd_dep_count)#70, max(cd_dep_count)#71, sum(cd_dep_count)#72, cd_dep_employed_count#29, cnt2#73, avg(cd_dep_employed_count)#74, max(cd_dep_employed_count)#75, sum(cd_dep_employed_count)#76, cd_dep_college_count#30, cnt3#77, avg(cd_dep_college_count)#78, max(cd_dep_college_count)#79, sum(cd_dep_college_count)#80]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (57)
+- * Project (56)
   +- * Filter (55)
      +- * ColumnarToRow (54)
         +- Scan parquet default.date_dim (53)


(53) Scan parquet default.date_dim
Output [3]: [d_date_sk#7, d_year#81, d_qoy#82]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_qoy), EqualTo(d_year,1999), LessThan(d_qoy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(54) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#7, d_year#81, d_qoy#82]

(55) Filter [codegen id : 1]
Input [3]: [d_date_sk#7, d_year#81, d_qoy#82]
Condition : ((((isnotnull(d_year#81) AND isnotnull(d_qoy#82)) AND (d_year#81 = 1999)) AND (d_qoy#82 < 4)) AND isnotnull(d_date_sk#7))

(56) Project [codegen id : 1]
Output [1]: [d_date_sk#7]
Input [3]: [d_date_sk#7, d_year#81, d_qoy#82]

(57) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#83]

Subquery:2 Hosting operator id = 16 Hosting Expression = ws_sold_date_sk#12 IN dynamicpruning#6

Subquery:3 Hosting operator id = 21 Hosting Expression = cs_sold_date_sk#16 IN dynamicpruning#6


