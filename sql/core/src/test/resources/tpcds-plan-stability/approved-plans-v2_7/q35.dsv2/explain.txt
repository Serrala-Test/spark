== Physical Plan ==
TakeOrderedAndProject (50)
+- * HashAggregate (49)
   +- Exchange (48)
      +- * HashAggregate (47)
         +- * Project (46)
            +- * BroadcastHashJoin Inner BuildRight (45)
               :- * Project (40)
               :  +- * BroadcastHashJoin Inner BuildRight (39)
               :     :- * Project (34)
               :     :  +- * Filter (33)
               :     :     +- * SortMergeJoin ExistenceJoin(exists#1) (32)
               :     :        :- * SortMergeJoin ExistenceJoin(exists#2) (24)
               :     :        :  :- * SortMergeJoin LeftSemi (16)
               :     :        :  :  :- * Sort (5)
               :     :        :  :  :  +- Exchange (4)
               :     :        :  :  :     +- * Project (3)
               :     :        :  :  :        +- * Filter (2)
               :     :        :  :  :           +- BatchScan default.customer (1)
               :     :        :  :  +- * Sort (15)
               :     :        :  :     +- Exchange (14)
               :     :        :  :        +- * Project (13)
               :     :        :  :           +- * BroadcastHashJoin Inner BuildRight (12)
               :     :        :  :              :- * Project (7)
               :     :        :  :              :  +- BatchScan default.store_sales (6)
               :     :        :  :              +- BroadcastExchange (11)
               :     :        :  :                 +- * Project (10)
               :     :        :  :                    +- * Filter (9)
               :     :        :  :                       +- BatchScan default.date_dim (8)
               :     :        :  +- * Sort (23)
               :     :        :     +- Exchange (22)
               :     :        :        +- * Project (21)
               :     :        :           +- * BroadcastHashJoin Inner BuildRight (20)
               :     :        :              :- * Project (18)
               :     :        :              :  +- BatchScan default.web_sales (17)
               :     :        :              +- ReusedExchange (19)
               :     :        +- * Sort (31)
               :     :           +- Exchange (30)
               :     :              +- * Project (29)
               :     :                 +- * BroadcastHashJoin Inner BuildRight (28)
               :     :                    :- * Project (26)
               :     :                    :  +- BatchScan default.catalog_sales (25)
               :     :                    +- ReusedExchange (27)
               :     +- BroadcastExchange (38)
               :        +- * Project (37)
               :           +- * Filter (36)
               :              +- BatchScan default.customer_address (35)
               +- BroadcastExchange (44)
                  +- * Project (43)
                     +- * Filter (42)
                        +- BatchScan default.customer_demographics (41)


(1) BatchScan default.customer
Output [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
DataFilters: [isnotnull(c_current_addr_sk#5), isnotnull(c_current_cdemo_sk#4)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) Filter [codegen id : 1]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Condition : (isnotnull(c_current_addr_sk#5) AND isnotnull(c_current_cdemo_sk#4))

(3) Project [codegen id : 1]
Output [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]

(4) Exchange
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Arguments: hashpartitioning(c_customer_sk#3, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Arguments: [c_customer_sk#3 ASC NULLS FIRST], false, 0

(6) BatchScan default.store_sales
Output [23]: [ss_sold_time_sk#6, ss_item_sk#7, ss_customer_sk#8, ss_cdemo_sk#9, ss_hdemo_sk#10, ss_addr_sk#11, ss_store_sk#12, ss_promo_sk#13, ss_ticket_number#14, ss_quantity#15, ss_wholesale_cost#16, ss_list_price#17, ss_sales_price#18, ss_ext_discount_amt#19, ss_ext_sales_price#20, ss_ext_wholesale_cost#21, ss_ext_list_price#22, ss_ext_tax#23, ss_coupon_amt#24, ss_net_paid#25, ss_net_paid_inc_tax#26, ss_net_profit#27, ss_sold_date_sk#28]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_sales]
PartitionFilters: [isnotnull(ss_sold_date_sk#28)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(7) Project [codegen id : 4]
Output [2]: [ss_customer_sk#8, ss_sold_date_sk#28]
Input [23]: [ss_sold_time_sk#6, ss_item_sk#7, ss_customer_sk#8, ss_cdemo_sk#9, ss_hdemo_sk#10, ss_addr_sk#11, ss_store_sk#12, ss_promo_sk#13, ss_ticket_number#14, ss_quantity#15, ss_wholesale_cost#16, ss_list_price#17, ss_sales_price#18, ss_ext_discount_amt#19, ss_ext_sales_price#20, ss_ext_wholesale_cost#21, ss_ext_list_price#22, ss_ext_tax#23, ss_coupon_amt#24, ss_net_paid#25, ss_net_paid_inc_tax#26, ss_net_profit#27, ss_sold_date_sk#28]

(8) BatchScan default.date_dim
Output [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]
DataFilters: [isnotnull(d_year#35), isnotnull(d_qoy#39), (d_year#35 = 2002), (d_qoy#39 < 4), isnotnull(d_date_sk#29)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_qoy), EqualTo(d_year,2002), LessThan(d_qoy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(9) Filter [codegen id : 3]
Input [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]
Condition : ((((isnotnull(d_year#35) AND isnotnull(d_qoy#39)) AND (d_year#35 = 2002)) AND (d_qoy#39 < 4)) AND isnotnull(d_date_sk#29))

(10) Project [codegen id : 3]
Output [1]: [d_date_sk#29]
Input [28]: [d_date_sk#29, d_date_id#30, d_date#31, d_month_seq#32, d_week_seq#33, d_quarter_seq#34, d_year#35, d_dow#36, d_moy#37, d_dom#38, d_qoy#39, d_fy_year#40, d_fy_quarter_seq#41, d_fy_week_seq#42, d_day_name#43, d_quarter_name#44, d_holiday#45, d_weekend#46, d_following_holiday#47, d_first_dom#48, d_last_dom#49, d_same_day_ly#50, d_same_day_lq#51, d_current_day#52, d_current_week#53, d_current_month#54, d_current_quarter#55, d_current_year#56]

(11) BroadcastExchange
Input [1]: [d_date_sk#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(12) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#28]
Right keys [1]: [d_date_sk#29]
Join type: Inner
Join condition: None

(13) Project [codegen id : 4]
Output [1]: [ss_customer_sk#8]
Input [3]: [ss_customer_sk#8, ss_sold_date_sk#28, d_date_sk#29]

(14) Exchange
Input [1]: [ss_customer_sk#8]
Arguments: hashpartitioning(ss_customer_sk#8, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(15) Sort [codegen id : 5]
Input [1]: [ss_customer_sk#8]
Arguments: [ss_customer_sk#8 ASC NULLS FIRST], false, 0

(16) SortMergeJoin [codegen id : 6]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ss_customer_sk#8]
Join type: LeftSemi
Join condition: None

(17) BatchScan default.web_sales
Output [34]: [ws_sold_time_sk#57, ws_ship_date_sk#58, ws_item_sk#59, ws_bill_customer_sk#60, ws_bill_cdemo_sk#61, ws_bill_hdemo_sk#62, ws_bill_addr_sk#63, ws_ship_customer_sk#64, ws_ship_cdemo_sk#65, ws_ship_hdemo_sk#66, ws_ship_addr_sk#67, ws_web_page_sk#68, ws_web_site_sk#69, ws_ship_mode_sk#70, ws_warehouse_sk#71, ws_promo_sk#72, ws_order_number#73, ws_quantity#74, ws_wholesale_cost#75, ws_list_price#76, ws_sales_price#77, ws_ext_discount_amt#78, ws_ext_sales_price#79, ws_ext_wholesale_cost#80, ws_ext_list_price#81, ws_ext_tax#82, ws_coupon_amt#83, ws_ext_ship_cost#84, ws_net_paid#85, ws_net_paid_inc_tax#86, ws_net_paid_inc_ship#87, ws_net_paid_inc_ship_tax#88, ws_net_profit#89, ws_sold_date_sk#90]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/web_sales]
PartitionFilters: [isnotnull(ws_sold_date_sk#90)]
ReadSchema: struct<ws_sold_time_sk:int,ws_ship_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_bill_cdemo_sk:int,ws_bill_hdemo_sk:int,ws_bill_addr_sk:int,ws_ship_customer_sk:int,ws_ship_cdemo_sk:int,ws_ship_hdemo_sk:int,ws_ship_addr_sk:int,ws_web_page_sk:int,ws_web_site_sk:int,ws_ship_mode_sk:int,ws_warehouse_sk:int,ws_promo_sk:int,ws_order_number:int,ws_quantity:int,ws_wholesale_cost:decimal(7,2),ws_list_price:decimal(7,2),ws_sales_price:decimal(7,2),ws_ext_discount_amt:decimal(7,2),ws_ext_sales_price:decimal(7,2),ws_ext_wholesale_cost:decimal(7,2),ws_ext_list_price:decimal(7,2),ws_ext_tax:decimal(7,2),ws_coupon_amt:decimal(7,2),ws_ext_ship_cost:decimal(7,2),ws_net_paid:decimal(7,2),ws_net_paid_inc_tax:decimal(7,2),ws_net_paid_inc_ship:decimal(7,2),ws_net_paid_inc_ship_tax:decimal(7,2),ws_net_profit:decimal(7,2)>

(18) Project [codegen id : 8]
Output [2]: [ws_bill_customer_sk#60, ws_sold_date_sk#90]
Input [34]: [ws_sold_time_sk#57, ws_ship_date_sk#58, ws_item_sk#59, ws_bill_customer_sk#60, ws_bill_cdemo_sk#61, ws_bill_hdemo_sk#62, ws_bill_addr_sk#63, ws_ship_customer_sk#64, ws_ship_cdemo_sk#65, ws_ship_hdemo_sk#66, ws_ship_addr_sk#67, ws_web_page_sk#68, ws_web_site_sk#69, ws_ship_mode_sk#70, ws_warehouse_sk#71, ws_promo_sk#72, ws_order_number#73, ws_quantity#74, ws_wholesale_cost#75, ws_list_price#76, ws_sales_price#77, ws_ext_discount_amt#78, ws_ext_sales_price#79, ws_ext_wholesale_cost#80, ws_ext_list_price#81, ws_ext_tax#82, ws_coupon_amt#83, ws_ext_ship_cost#84, ws_net_paid#85, ws_net_paid_inc_tax#86, ws_net_paid_inc_ship#87, ws_net_paid_inc_ship_tax#88, ws_net_profit#89, ws_sold_date_sk#90]

(19) ReusedExchange [Reuses operator id: 11]
Output [1]: [d_date_sk#91]

(20) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ws_sold_date_sk#90]
Right keys [1]: [d_date_sk#91]
Join type: Inner
Join condition: None

(21) Project [codegen id : 8]
Output [1]: [ws_bill_customer_sk#60]
Input [3]: [ws_bill_customer_sk#60, ws_sold_date_sk#90, d_date_sk#91]

(22) Exchange
Input [1]: [ws_bill_customer_sk#60]
Arguments: hashpartitioning(ws_bill_customer_sk#60, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(23) Sort [codegen id : 9]
Input [1]: [ws_bill_customer_sk#60]
Arguments: [ws_bill_customer_sk#60 ASC NULLS FIRST], false, 0

(24) SortMergeJoin [codegen id : 10]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ws_bill_customer_sk#60]
Join type: ExistenceJoin(exists#2)
Join condition: None

(25) BatchScan default.catalog_sales
Output [34]: [cs_sold_time_sk#92, cs_ship_date_sk#93, cs_bill_customer_sk#94, cs_bill_cdemo_sk#95, cs_bill_hdemo_sk#96, cs_bill_addr_sk#97, cs_ship_customer_sk#98, cs_ship_cdemo_sk#99, cs_ship_hdemo_sk#100, cs_ship_addr_sk#101, cs_call_center_sk#102, cs_catalog_page_sk#103, cs_ship_mode_sk#104, cs_warehouse_sk#105, cs_item_sk#106, cs_promo_sk#107, cs_order_number#108, cs_quantity#109, cs_wholesale_cost#110, cs_list_price#111, cs_sales_price#112, cs_ext_discount_amt#113, cs_ext_sales_price#114, cs_ext_wholesale_cost#115, cs_ext_list_price#116, cs_ext_tax#117, cs_coupon_amt#118, cs_ext_ship_cost#119, cs_net_paid#120, cs_net_paid_inc_tax#121, cs_net_paid_inc_ship#122, cs_net_paid_inc_ship_tax#123, cs_net_profit#124, cs_sold_date_sk#125]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PartitionFilters: [isnotnull(cs_sold_date_sk#125)]
ReadSchema: struct<cs_sold_time_sk:int,cs_ship_date_sk:int,cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_bill_hdemo_sk:int,cs_bill_addr_sk:int,cs_ship_customer_sk:int,cs_ship_cdemo_sk:int,cs_ship_hdemo_sk:int,cs_ship_addr_sk:int,cs_call_center_sk:int,cs_catalog_page_sk:int,cs_ship_mode_sk:int,cs_warehouse_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_quantity:int,cs_wholesale_cost:decimal(7,2),cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2),cs_ext_tax:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_ext_ship_cost:decimal(7,2),cs_net_paid:decimal(7,2),cs_net_paid_inc_tax:decimal(7,2),cs_net_paid_inc_ship:decimal(7,2),cs_net_paid_inc_ship_tax:decimal(7,2),cs_net_profit:decimal(7,2)>

(26) Project [codegen id : 12]
Output [2]: [cs_ship_customer_sk#98, cs_sold_date_sk#125]
Input [34]: [cs_sold_time_sk#92, cs_ship_date_sk#93, cs_bill_customer_sk#94, cs_bill_cdemo_sk#95, cs_bill_hdemo_sk#96, cs_bill_addr_sk#97, cs_ship_customer_sk#98, cs_ship_cdemo_sk#99, cs_ship_hdemo_sk#100, cs_ship_addr_sk#101, cs_call_center_sk#102, cs_catalog_page_sk#103, cs_ship_mode_sk#104, cs_warehouse_sk#105, cs_item_sk#106, cs_promo_sk#107, cs_order_number#108, cs_quantity#109, cs_wholesale_cost#110, cs_list_price#111, cs_sales_price#112, cs_ext_discount_amt#113, cs_ext_sales_price#114, cs_ext_wholesale_cost#115, cs_ext_list_price#116, cs_ext_tax#117, cs_coupon_amt#118, cs_ext_ship_cost#119, cs_net_paid#120, cs_net_paid_inc_tax#121, cs_net_paid_inc_ship#122, cs_net_paid_inc_ship_tax#123, cs_net_profit#124, cs_sold_date_sk#125]

(27) ReusedExchange [Reuses operator id: 11]
Output [1]: [d_date_sk#126]

(28) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [cs_sold_date_sk#125]
Right keys [1]: [d_date_sk#126]
Join type: Inner
Join condition: None

(29) Project [codegen id : 12]
Output [1]: [cs_ship_customer_sk#98]
Input [3]: [cs_ship_customer_sk#98, cs_sold_date_sk#125, d_date_sk#126]

(30) Exchange
Input [1]: [cs_ship_customer_sk#98]
Arguments: hashpartitioning(cs_ship_customer_sk#98, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(31) Sort [codegen id : 13]
Input [1]: [cs_ship_customer_sk#98]
Arguments: [cs_ship_customer_sk#98 ASC NULLS FIRST], false, 0

(32) SortMergeJoin [codegen id : 16]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [cs_ship_customer_sk#98]
Join type: ExistenceJoin(exists#1)
Join condition: None

(33) Filter [codegen id : 16]
Input [5]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5, exists#2, exists#1]
Condition : (exists#2 OR exists#1)

(34) Project [codegen id : 16]
Output [2]: [c_current_cdemo_sk#4, c_current_addr_sk#5]
Input [5]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5, exists#2, exists#1]

(35) BatchScan default.customer_address
Output [2]: [ca_address_sk#127, ca_state#128]
DataFilters: [isnotnull(ca_address_sk#127)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(36) Filter [codegen id : 14]
Input [2]: [ca_address_sk#127, ca_state#128]
Condition : isnotnull(ca_address_sk#127)

(37) Project [codegen id : 14]
Output [2]: [ca_address_sk#127, ca_state#128]
Input [2]: [ca_address_sk#127, ca_state#128]

(38) BroadcastExchange
Input [2]: [ca_address_sk#127, ca_state#128]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

(39) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [c_current_addr_sk#5]
Right keys [1]: [ca_address_sk#127]
Join type: Inner
Join condition: None

(40) Project [codegen id : 16]
Output [2]: [c_current_cdemo_sk#4, ca_state#128]
Input [4]: [c_current_cdemo_sk#4, c_current_addr_sk#5, ca_address_sk#127, ca_state#128]

(41) BatchScan default.customer_demographics
Output [6]: [cd_demo_sk#129, cd_gender#130, cd_marital_status#131, cd_dep_count#132, cd_dep_employed_count#133, cd_dep_college_count#134]
DataFilters: [isnotnull(cd_demo_sk#129)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(42) Filter [codegen id : 15]
Input [6]: [cd_demo_sk#129, cd_gender#130, cd_marital_status#131, cd_dep_count#132, cd_dep_employed_count#133, cd_dep_college_count#134]
Condition : isnotnull(cd_demo_sk#129)

(43) Project [codegen id : 15]
Output [6]: [cd_demo_sk#129, cd_gender#130, cd_marital_status#131, cd_dep_count#132, cd_dep_employed_count#133, cd_dep_college_count#134]
Input [6]: [cd_demo_sk#129, cd_gender#130, cd_marital_status#131, cd_dep_count#132, cd_dep_employed_count#133, cd_dep_college_count#134]

(44) BroadcastExchange
Input [6]: [cd_demo_sk#129, cd_gender#130, cd_marital_status#131, cd_dep_count#132, cd_dep_employed_count#133, cd_dep_college_count#134]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

(45) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [c_current_cdemo_sk#4]
Right keys [1]: [cd_demo_sk#129]
Join type: Inner
Join condition: None

(46) Project [codegen id : 16]
Output [6]: [ca_state#128, cd_gender#130, cd_marital_status#131, cd_dep_count#132, cd_dep_employed_count#133, cd_dep_college_count#134]
Input [8]: [c_current_cdemo_sk#4, ca_state#128, cd_demo_sk#129, cd_gender#130, cd_marital_status#131, cd_dep_count#132, cd_dep_employed_count#133, cd_dep_college_count#134]

(47) HashAggregate [codegen id : 16]
Input [6]: [ca_state#128, cd_gender#130, cd_marital_status#131, cd_dep_count#132, cd_dep_employed_count#133, cd_dep_college_count#134]
Keys [6]: [ca_state#128, cd_gender#130, cd_marital_status#131, cd_dep_count#132, cd_dep_employed_count#133, cd_dep_college_count#134]
Functions [10]: [partial_count(1), partial_avg(cd_dep_count#132), partial_max(cd_dep_count#132), partial_sum(cd_dep_count#132), partial_avg(cd_dep_employed_count#133), partial_max(cd_dep_employed_count#133), partial_sum(cd_dep_employed_count#133), partial_avg(cd_dep_college_count#134), partial_max(cd_dep_college_count#134), partial_sum(cd_dep_college_count#134)]
Aggregate Attributes [13]: [count#135, sum#136, count#137, max#138, sum#139, sum#140, count#141, max#142, sum#143, sum#144, count#145, max#146, sum#147]
Results [19]: [ca_state#128, cd_gender#130, cd_marital_status#131, cd_dep_count#132, cd_dep_employed_count#133, cd_dep_college_count#134, count#148, sum#149, count#150, max#151, sum#152, sum#153, count#154, max#155, sum#156, sum#157, count#158, max#159, sum#160]

(48) Exchange
Input [19]: [ca_state#128, cd_gender#130, cd_marital_status#131, cd_dep_count#132, cd_dep_employed_count#133, cd_dep_college_count#134, count#148, sum#149, count#150, max#151, sum#152, sum#153, count#154, max#155, sum#156, sum#157, count#158, max#159, sum#160]
Arguments: hashpartitioning(ca_state#128, cd_gender#130, cd_marital_status#131, cd_dep_count#132, cd_dep_employed_count#133, cd_dep_college_count#134, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(49) HashAggregate [codegen id : 17]
Input [19]: [ca_state#128, cd_gender#130, cd_marital_status#131, cd_dep_count#132, cd_dep_employed_count#133, cd_dep_college_count#134, count#148, sum#149, count#150, max#151, sum#152, sum#153, count#154, max#155, sum#156, sum#157, count#158, max#159, sum#160]
Keys [6]: [ca_state#128, cd_gender#130, cd_marital_status#131, cd_dep_count#132, cd_dep_employed_count#133, cd_dep_college_count#134]
Functions [10]: [count(1), avg(cd_dep_count#132), max(cd_dep_count#132), sum(cd_dep_count#132), avg(cd_dep_employed_count#133), max(cd_dep_employed_count#133), sum(cd_dep_employed_count#133), avg(cd_dep_college_count#134), max(cd_dep_college_count#134), sum(cd_dep_college_count#134)]
Aggregate Attributes [10]: [count(1)#161, avg(cd_dep_count#132)#162, max(cd_dep_count#132)#163, sum(cd_dep_count#132)#164, avg(cd_dep_employed_count#133)#165, max(cd_dep_employed_count#133)#166, sum(cd_dep_employed_count#133)#167, avg(cd_dep_college_count#134)#168, max(cd_dep_college_count#134)#169, sum(cd_dep_college_count#134)#170]
Results [18]: [ca_state#128, cd_gender#130, cd_marital_status#131, cd_dep_count#132, count(1)#161 AS cnt1#171, avg(cd_dep_count#132)#162 AS avg(cd_dep_count)#172, max(cd_dep_count#132)#163 AS max(cd_dep_count)#173, sum(cd_dep_count#132)#164 AS sum(cd_dep_count)#174, cd_dep_employed_count#133, count(1)#161 AS cnt2#175, avg(cd_dep_employed_count#133)#165 AS avg(cd_dep_employed_count)#176, max(cd_dep_employed_count#133)#166 AS max(cd_dep_employed_count)#177, sum(cd_dep_employed_count#133)#167 AS sum(cd_dep_employed_count)#178, cd_dep_college_count#134, count(1)#161 AS cnt3#179, avg(cd_dep_college_count#134)#168 AS avg(cd_dep_college_count)#180, max(cd_dep_college_count#134)#169 AS max(cd_dep_college_count)#181, sum(cd_dep_college_count#134)#170 AS sum(cd_dep_college_count)#182]

(50) TakeOrderedAndProject
Input [18]: [ca_state#128, cd_gender#130, cd_marital_status#131, cd_dep_count#132, cnt1#171, avg(cd_dep_count)#172, max(cd_dep_count)#173, sum(cd_dep_count)#174, cd_dep_employed_count#133, cnt2#175, avg(cd_dep_employed_count)#176, max(cd_dep_employed_count)#177, sum(cd_dep_employed_count)#178, cd_dep_college_count#134, cnt3#179, avg(cd_dep_college_count)#180, max(cd_dep_college_count)#181, sum(cd_dep_college_count)#182]
Arguments: 100, [ca_state#128 ASC NULLS FIRST, cd_gender#130 ASC NULLS FIRST, cd_marital_status#131 ASC NULLS FIRST, cd_dep_count#132 ASC NULLS FIRST, cd_dep_employed_count#133 ASC NULLS FIRST, cd_dep_college_count#134 ASC NULLS FIRST], [ca_state#128, cd_gender#130, cd_marital_status#131, cd_dep_count#132, cnt1#171, avg(cd_dep_count)#172, max(cd_dep_count)#173, sum(cd_dep_count)#174, cd_dep_employed_count#133, cnt2#175, avg(cd_dep_employed_count)#176, max(cd_dep_employed_count)#177, sum(cd_dep_employed_count)#178, cd_dep_college_count#134, cnt3#179, avg(cd_dep_college_count)#180, max(cd_dep_college_count)#181, sum(cd_dep_college_count)#182]

