== Physical Plan ==
TakeOrderedAndProject (106)
+- * BroadcastHashJoin Inner BuildRight (105)
   :- * Project (83)
   :  +- * Filter (82)
   :     +- * HashAggregate (81)
   :        +- Exchange (80)
   :           +- * HashAggregate (79)
   :              +- * Project (78)
   :                 +- * BroadcastHashJoin Inner BuildRight (77)
   :                    :- * Project (71)
   :                    :  +- * BroadcastHashJoin Inner BuildRight (70)
   :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (63)
   :                    :     :  :- * Filter (3)
   :                    :     :  :  +- * ColumnarToRow (2)
   :                    :     :  :     +- Scan parquet default.store_sales (1)
   :                    :     :  +- BroadcastExchange (62)
   :                    :     :     +- * Project (61)
   :                    :     :        +- * BroadcastHashJoin Inner BuildRight (60)
   :                    :     :           :- * Filter (6)
   :                    :     :           :  +- * ColumnarToRow (5)
   :                    :     :           :     +- Scan parquet default.item (4)
   :                    :     :           +- BroadcastExchange (59)
   :                    :     :              +- * BroadcastHashJoin LeftSemi BuildRight (58)
   :                    :     :                 :- * HashAggregate (44)
   :                    :     :                 :  +- * HashAggregate (43)
   :                    :     :                 :     +- * BroadcastHashJoin LeftSemi BuildRight (42)
   :                    :     :                 :        :- * HashAggregate (25)
   :                    :     :                 :        :  +- Exchange (24)
   :                    :     :                 :        :     +- * HashAggregate (23)
   :                    :     :                 :        :        +- * Project (22)
   :                    :     :                 :        :           +- * BroadcastHashJoin Inner BuildRight (21)
   :                    :     :                 :        :              :- * Project (15)
   :                    :     :                 :        :              :  +- * BroadcastHashJoin Inner BuildRight (14)
   :                    :     :                 :        :              :     :- * Filter (9)
   :                    :     :                 :        :              :     :  +- * ColumnarToRow (8)
   :                    :     :                 :        :              :     :     +- Scan parquet default.store_sales (7)
   :                    :     :                 :        :              :     +- BroadcastExchange (13)
   :                    :     :                 :        :              :        +- * Filter (12)
   :                    :     :                 :        :              :           +- * ColumnarToRow (11)
   :                    :     :                 :        :              :              +- Scan parquet default.item (10)
   :                    :     :                 :        :              +- BroadcastExchange (20)
   :                    :     :                 :        :                 +- * Project (19)
   :                    :     :                 :        :                    +- * Filter (18)
   :                    :     :                 :        :                       +- * ColumnarToRow (17)
   :                    :     :                 :        :                          +- Scan parquet default.date_dim (16)
   :                    :     :                 :        +- BroadcastExchange (41)
   :                    :     :                 :           +- * HashAggregate (40)
   :                    :     :                 :              +- Exchange (39)
   :                    :     :                 :                 +- * HashAggregate (38)
   :                    :     :                 :                    +- * Project (37)
   :                    :     :                 :                       +- * BroadcastHashJoin Inner BuildRight (36)
   :                    :     :                 :                          :- * Project (34)
   :                    :     :                 :                          :  +- * BroadcastHashJoin Inner BuildRight (33)
   :                    :     :                 :                          :     :- * Filter (28)
   :                    :     :                 :                          :     :  +- * ColumnarToRow (27)
   :                    :     :                 :                          :     :     +- Scan parquet default.catalog_sales (26)
   :                    :     :                 :                          :     +- BroadcastExchange (32)
   :                    :     :                 :                          :        +- * Filter (31)
   :                    :     :                 :                          :           +- * ColumnarToRow (30)
   :                    :     :                 :                          :              +- Scan parquet default.item (29)
   :                    :     :                 :                          +- ReusedExchange (35)
   :                    :     :                 +- BroadcastExchange (57)
   :                    :     :                    +- * HashAggregate (56)
   :                    :     :                       +- Exchange (55)
   :                    :     :                          +- * HashAggregate (54)
   :                    :     :                             +- * Project (53)
   :                    :     :                                +- * BroadcastHashJoin Inner BuildRight (52)
   :                    :     :                                   :- * Project (50)
   :                    :     :                                   :  +- * BroadcastHashJoin Inner BuildRight (49)
   :                    :     :                                   :     :- * Filter (47)
   :                    :     :                                   :     :  +- * ColumnarToRow (46)
   :                    :     :                                   :     :     +- Scan parquet default.web_sales (45)
   :                    :     :                                   :     +- ReusedExchange (48)
   :                    :     :                                   +- ReusedExchange (51)
   :                    :     +- BroadcastExchange (69)
   :                    :        +- * BroadcastHashJoin LeftSemi BuildRight (68)
   :                    :           :- * Filter (66)
   :                    :           :  +- * ColumnarToRow (65)
   :                    :           :     +- Scan parquet default.item (64)
   :                    :           +- ReusedExchange (67)
   :                    +- BroadcastExchange (76)
   :                       +- * Project (75)
   :                          +- * Filter (74)
   :                             +- * ColumnarToRow (73)
   :                                +- Scan parquet default.date_dim (72)
   +- BroadcastExchange (104)
      +- * Project (103)
         +- * Filter (102)
            +- * HashAggregate (101)
               +- Exchange (100)
                  +- * HashAggregate (99)
                     +- * Project (98)
                        +- * BroadcastHashJoin Inner BuildRight (97)
                           :- * Project (91)
                           :  +- * BroadcastHashJoin Inner BuildRight (90)
                           :     :- * BroadcastHashJoin LeftSemi BuildRight (88)
                           :     :  :- * Filter (86)
                           :     :  :  +- * ColumnarToRow (85)
                           :     :  :     +- Scan parquet default.store_sales (84)
                           :     :  +- ReusedExchange (87)
                           :     +- ReusedExchange (89)
                           +- BroadcastExchange (96)
                              +- * Project (95)
                                 +- * Filter (94)
                                    +- * ColumnarToRow (93)
                                       +- Scan parquet default.date_dim (92)


(1) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 29]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]

(3) Filter [codegen id : 29]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(4) Scan parquet default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 13]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(6) Filter [codegen id : 13]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : ((isnotnull(i_brand_id#6) AND isnotnull(i_class_id#7)) AND isnotnull(i_category_id#8))

(7) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(8) ColumnarToRow [codegen id : 3]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]

(9) Filter [codegen id : 3]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(10) Scan parquet default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(12) Filter [codegen id : 1]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : (((isnotnull(i_item_sk#5) AND isnotnull(i_brand_id#6)) AND isnotnull(i_class_id#7)) AND isnotnull(i_category_id#8))

(13) BroadcastExchange
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9]

(14) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#5]
Join condition: None

(15) Project [codegen id : 3]
Output [4]: [ss_sold_date_sk#1, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(16) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(17) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#10, d_year#11]

(18) Filter [codegen id : 2]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1998)) AND (d_year#11 <= 2000)) AND isnotnull(d_date_sk#10))

(19) Project [codegen id : 2]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(20) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(21) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(22) Project [codegen id : 3]
Output [3]: [i_brand_id#6 AS brand_id#13, i_class_id#7 AS class_id#14, i_category_id#8 AS category_id#15]
Input [5]: [ss_sold_date_sk#1, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(23) HashAggregate [codegen id : 3]
Input [3]: [brand_id#13, class_id#14, category_id#15]
Keys [3]: [brand_id#13, class_id#14, category_id#15]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#13, class_id#14, category_id#15]

(24) Exchange
Input [3]: [brand_id#13, class_id#14, category_id#15]
Arguments: hashpartitioning(brand_id#13, class_id#14, category_id#15, 5), ENSURE_REQUIREMENTS, [id=#16]

(25) HashAggregate [codegen id : 12]
Input [3]: [brand_id#13, class_id#14, category_id#15]
Keys [3]: [brand_id#13, class_id#14, category_id#15]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#13, class_id#14, category_id#15]

(26) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#17, cs_item_sk#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int>

(27) ColumnarToRow [codegen id : 6]
Input [2]: [cs_sold_date_sk#17, cs_item_sk#18]

(28) Filter [codegen id : 6]
Input [2]: [cs_sold_date_sk#17, cs_item_sk#18]
Condition : (isnotnull(cs_item_sk#18) AND isnotnull(cs_sold_date_sk#17))

(29) Scan parquet default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(30) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(31) Filter [codegen id : 4]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : isnotnull(i_item_sk#5)

(32) BroadcastExchange
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#19]

(33) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_item_sk#18]
Right keys [1]: [i_item_sk#5]
Join condition: None

(34) Project [codegen id : 6]
Output [4]: [cs_sold_date_sk#17, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [6]: [cs_sold_date_sk#17, cs_item_sk#18, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(35) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#10]

(36) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#17]
Right keys [1]: [d_date_sk#10]
Join condition: None

(37) Project [codegen id : 6]
Output [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Input [5]: [cs_sold_date_sk#17, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(38) HashAggregate [codegen id : 6]
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]

(39) Exchange
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: hashpartitioning(i_brand_id#6, i_class_id#7, i_category_id#8, 5), ENSURE_REQUIREMENTS, [id=#20]

(40) HashAggregate [codegen id : 7]
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]

(41) BroadcastExchange
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#21]

(42) BroadcastHashJoin [codegen id : 12]
Left keys [6]: [coalesce(brand_id#13, 0), isnull(brand_id#13), coalesce(class_id#14, 0), isnull(class_id#14), coalesce(category_id#15, 0), isnull(category_id#15)]
Right keys [6]: [coalesce(i_brand_id#6, 0), isnull(i_brand_id#6), coalesce(i_class_id#7, 0), isnull(i_class_id#7), coalesce(i_category_id#8, 0), isnull(i_category_id#8)]
Join condition: None

(43) HashAggregate [codegen id : 12]
Input [3]: [brand_id#13, class_id#14, category_id#15]
Keys [3]: [brand_id#13, class_id#14, category_id#15]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#13, class_id#14, category_id#15]

(44) HashAggregate [codegen id : 12]
Input [3]: [brand_id#13, class_id#14, category_id#15]
Keys [3]: [brand_id#13, class_id#14, category_id#15]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#13, class_id#14, category_id#15]

(45) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#22, ws_item_sk#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int>

(46) ColumnarToRow [codegen id : 10]
Input [2]: [ws_sold_date_sk#22, ws_item_sk#23]

(47) Filter [codegen id : 10]
Input [2]: [ws_sold_date_sk#22, ws_item_sk#23]
Condition : (isnotnull(ws_item_sk#23) AND isnotnull(ws_sold_date_sk#22))

(48) ReusedExchange [Reuses operator id: 32]
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(49) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_item_sk#23]
Right keys [1]: [i_item_sk#5]
Join condition: None

(50) Project [codegen id : 10]
Output [4]: [ws_sold_date_sk#22, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [6]: [ws_sold_date_sk#22, ws_item_sk#23, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(51) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#10]

(52) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_sold_date_sk#22]
Right keys [1]: [d_date_sk#10]
Join condition: None

(53) Project [codegen id : 10]
Output [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Input [5]: [ws_sold_date_sk#22, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(54) HashAggregate [codegen id : 10]
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]

(55) Exchange
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: hashpartitioning(i_brand_id#6, i_class_id#7, i_category_id#8, 5), ENSURE_REQUIREMENTS, [id=#24]

(56) HashAggregate [codegen id : 11]
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]

(57) BroadcastExchange
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#25]

(58) BroadcastHashJoin [codegen id : 12]
Left keys [6]: [coalesce(brand_id#13, 0), isnull(brand_id#13), coalesce(class_id#14, 0), isnull(class_id#14), coalesce(category_id#15, 0), isnull(category_id#15)]
Right keys [6]: [coalesce(i_brand_id#6, 0), isnull(i_brand_id#6), coalesce(i_class_id#7, 0), isnull(i_class_id#7), coalesce(i_category_id#8, 0), isnull(i_category_id#8)]
Join condition: None

(59) BroadcastExchange
Input [3]: [brand_id#13, class_id#14, category_id#15]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#26]

(60) BroadcastHashJoin [codegen id : 13]
Left keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Right keys [3]: [brand_id#13, class_id#14, category_id#15]
Join condition: None

(61) Project [codegen id : 13]
Output [1]: [i_item_sk#5 AS ss_item_sk#27]
Input [7]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8, brand_id#13, class_id#14, category_id#15]

(62) BroadcastExchange
Input [1]: [ss_item_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#28]

(63) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [ss_item_sk#27]
Join condition: None

(64) Scan parquet default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(65) ColumnarToRow [codegen id : 27]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(66) Filter [codegen id : 27]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : (((isnotnull(i_item_sk#5) AND isnotnull(i_brand_id#6)) AND isnotnull(i_class_id#7)) AND isnotnull(i_category_id#8))

(67) ReusedExchange [Reuses operator id: 62]
Output [1]: [ss_item_sk#27]

(68) BroadcastHashJoin [codegen id : 27]
Left keys [1]: [i_item_sk#5]
Right keys [1]: [ss_item_sk#27]
Join condition: None

(69) BroadcastExchange
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(70) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#5]
Join condition: None

(71) Project [codegen id : 29]
Output [6]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(72) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_week_seq#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(73) ColumnarToRow [codegen id : 28]
Input [2]: [d_date_sk#10, d_week_seq#30]

(74) Filter [codegen id : 28]
Input [2]: [d_date_sk#10, d_week_seq#30]
Condition : ((isnotnull(d_week_seq#30) AND (d_week_seq#30 = Subquery scalar-subquery#31, [id=#32])) AND isnotnull(d_date_sk#10))

(75) Project [codegen id : 28]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_week_seq#30]

(76) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#33]

(77) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(78) Project [codegen id : 29]
Output [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [7]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(79) HashAggregate [codegen id : 29]
Input [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#34, isEmpty#35, count#36]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#37, isEmpty#38, count#39]

(80) Exchange
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#37, isEmpty#38, count#39]
Arguments: hashpartitioning(i_brand_id#6, i_class_id#7, i_category_id#8, 5), ENSURE_REQUIREMENTS, [id=#40]

(81) HashAggregate [codegen id : 60]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#37, isEmpty#38, count#39]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#41, count(1)#42]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#41 AS sales#43, count(1)#42 AS number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#41 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#45]

(82) Filter [codegen id : 60]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#43, number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#45]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#45) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#45 as decimal(32,6)) > cast(Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(83) Project [codegen id : 60]
Output [6]: [store AS channel#48, i_brand_id#6, i_class_id#7, i_category_id#8, sales#43, number_sales#44]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#43, number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#45]

(84) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(85) ColumnarToRow [codegen id : 58]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]

(86) Filter [codegen id : 58]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(87) ReusedExchange [Reuses operator id: 62]
Output [1]: [ss_item_sk#27]

(88) BroadcastHashJoin [codegen id : 58]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [ss_item_sk#27]
Join condition: None

(89) ReusedExchange [Reuses operator id: 69]
Output [4]: [i_item_sk#49, i_brand_id#50, i_class_id#51, i_category_id#52]

(90) BroadcastHashJoin [codegen id : 58]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#49]
Join condition: None

(91) Project [codegen id : 58]
Output [6]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, i_brand_id#50, i_class_id#51, i_category_id#52]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4, i_item_sk#49, i_brand_id#50, i_class_id#51, i_category_id#52]

(92) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_week_seq#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(93) ColumnarToRow [codegen id : 57]
Input [2]: [d_date_sk#10, d_week_seq#30]

(94) Filter [codegen id : 57]
Input [2]: [d_date_sk#10, d_week_seq#30]
Condition : ((isnotnull(d_week_seq#30) AND (d_week_seq#30 = Subquery scalar-subquery#53, [id=#54])) AND isnotnull(d_date_sk#10))

(95) Project [codegen id : 57]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_week_seq#30]

(96) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#55]

(97) BroadcastHashJoin [codegen id : 58]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(98) Project [codegen id : 58]
Output [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#50, i_class_id#51, i_category_id#52]
Input [7]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, i_brand_id#50, i_class_id#51, i_category_id#52, d_date_sk#10]

(99) HashAggregate [codegen id : 58]
Input [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#50, i_class_id#51, i_category_id#52]
Keys [3]: [i_brand_id#50, i_class_id#51, i_category_id#52]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#56, isEmpty#57, count#58]
Results [6]: [i_brand_id#50, i_class_id#51, i_category_id#52, sum#59, isEmpty#60, count#61]

(100) Exchange
Input [6]: [i_brand_id#50, i_class_id#51, i_category_id#52, sum#59, isEmpty#60, count#61]
Arguments: hashpartitioning(i_brand_id#50, i_class_id#51, i_category_id#52, 5), ENSURE_REQUIREMENTS, [id=#62]

(101) HashAggregate [codegen id : 59]
Input [6]: [i_brand_id#50, i_class_id#51, i_category_id#52, sum#59, isEmpty#60, count#61]
Keys [3]: [i_brand_id#50, i_class_id#51, i_category_id#52]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#63, count(1)#64]
Results [6]: [i_brand_id#50, i_class_id#51, i_category_id#52, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#63 AS sales#65, count(1)#64 AS number_sales#66, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#63 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#67]

(102) Filter [codegen id : 59]
Input [6]: [i_brand_id#50, i_class_id#51, i_category_id#52, sales#65, number_sales#66, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#67]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#67) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#67 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(103) Project [codegen id : 59]
Output [6]: [store AS channel#68, i_brand_id#50, i_class_id#51, i_category_id#52, sales#65, number_sales#66]
Input [6]: [i_brand_id#50, i_class_id#51, i_category_id#52, sales#65, number_sales#66, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#67]

(104) BroadcastExchange
Input [6]: [channel#68, i_brand_id#50, i_class_id#51, i_category_id#52, sales#65, number_sales#66]
Arguments: HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true]),false), [id=#69]

(105) BroadcastHashJoin [codegen id : 60]
Left keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Right keys [3]: [i_brand_id#50, i_class_id#51, i_category_id#52]
Join condition: None

(106) TakeOrderedAndProject
Input [12]: [channel#48, i_brand_id#6, i_class_id#7, i_category_id#8, sales#43, number_sales#44, channel#68, i_brand_id#50, i_class_id#51, i_category_id#52, sales#65, number_sales#66]
Arguments: 100, [i_brand_id#6 ASC NULLS FIRST, i_class_id#7 ASC NULLS FIRST, i_category_id#8 ASC NULLS FIRST], [channel#48, i_brand_id#6, i_class_id#7, i_category_id#8, sales#43, number_sales#44, channel#68, i_brand_id#50, i_class_id#51, i_category_id#52, sales#65, number_sales#66]

===== Subqueries =====

Subquery:1 Hosting operator id = 82 Hosting Expression = Subquery scalar-subquery#46, [id=#47]
* HashAggregate (132)
+- Exchange (131)
   +- * HashAggregate (130)
      +- Union (129)
         :- * Project (116)
         :  +- * BroadcastHashJoin Inner BuildRight (115)
         :     :- * Filter (109)
         :     :  +- * ColumnarToRow (108)
         :     :     +- Scan parquet default.store_sales (107)
         :     +- BroadcastExchange (114)
         :        +- * Project (113)
         :           +- * Filter (112)
         :              +- * ColumnarToRow (111)
         :                 +- Scan parquet default.date_dim (110)
         :- * Project (122)
         :  +- * BroadcastHashJoin Inner BuildRight (121)
         :     :- * Filter (119)
         :     :  +- * ColumnarToRow (118)
         :     :     +- Scan parquet default.catalog_sales (117)
         :     +- ReusedExchange (120)
         +- * Project (128)
            +- * BroadcastHashJoin Inner BuildRight (127)
               :- * Filter (125)
               :  +- * ColumnarToRow (124)
               :     +- Scan parquet default.web_sales (123)
               +- ReusedExchange (126)


(107) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(108) ColumnarToRow [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]

(109) Filter [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Condition : isnotnull(ss_sold_date_sk#1)

(110) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(111) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]

(112) Filter [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1998)) AND (d_year#11 <= 2000)) AND isnotnull(d_date_sk#10))

(113) Project [codegen id : 1]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(114) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#70]

(115) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(116) Project [codegen id : 2]
Output [2]: [ss_quantity#3 AS quantity#71, ss_list_price#4 AS list_price#72]
Input [4]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, d_date_sk#10]

(117) Scan parquet default.catalog_sales
Output [3]: [cs_sold_date_sk#17, cs_quantity#73, cs_list_price#74]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(118) ColumnarToRow [codegen id : 4]
Input [3]: [cs_sold_date_sk#17, cs_quantity#73, cs_list_price#74]

(119) Filter [codegen id : 4]
Input [3]: [cs_sold_date_sk#17, cs_quantity#73, cs_list_price#74]
Condition : isnotnull(cs_sold_date_sk#17)

(120) ReusedExchange [Reuses operator id: 114]
Output [1]: [d_date_sk#10]

(121) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#17]
Right keys [1]: [d_date_sk#10]
Join condition: None

(122) Project [codegen id : 4]
Output [2]: [cs_quantity#73 AS quantity#75, cs_list_price#74 AS list_price#76]
Input [4]: [cs_sold_date_sk#17, cs_quantity#73, cs_list_price#74, d_date_sk#10]

(123) Scan parquet default.web_sales
Output [3]: [ws_sold_date_sk#22, ws_quantity#77, ws_list_price#78]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(124) ColumnarToRow [codegen id : 6]
Input [3]: [ws_sold_date_sk#22, ws_quantity#77, ws_list_price#78]

(125) Filter [codegen id : 6]
Input [3]: [ws_sold_date_sk#22, ws_quantity#77, ws_list_price#78]
Condition : isnotnull(ws_sold_date_sk#22)

(126) ReusedExchange [Reuses operator id: 114]
Output [1]: [d_date_sk#10]

(127) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#22]
Right keys [1]: [d_date_sk#10]
Join condition: None

(128) Project [codegen id : 6]
Output [2]: [ws_quantity#77 AS quantity#79, ws_list_price#78 AS list_price#80]
Input [4]: [ws_sold_date_sk#22, ws_quantity#77, ws_list_price#78, d_date_sk#10]

(129) Union

(130) HashAggregate [codegen id : 7]
Input [2]: [quantity#71, list_price#72]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#71 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#72 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#81, count#82]
Results [2]: [sum#83, count#84]

(131) Exchange
Input [2]: [sum#83, count#84]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#85]

(132) HashAggregate [codegen id : 8]
Input [2]: [sum#83, count#84]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#71 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#72 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#71 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#72 as decimal(12,2)))), DecimalType(18,2), true))#86]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#71 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#72 as decimal(12,2)))), DecimalType(18,2), true))#86 AS average_sales#87]

Subquery:2 Hosting operator id = 74 Hosting Expression = Subquery scalar-subquery#31, [id=#32]
* Project (136)
+- * Filter (135)
   +- * ColumnarToRow (134)
      +- Scan parquet default.date_dim (133)


(133) Scan parquet default.date_dim
Output [4]: [d_week_seq#30, d_year#11, d_moy#88, d_dom#89]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), EqualTo(d_dom,16)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(134) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#30, d_year#11, d_moy#88, d_dom#89]

(135) Filter [codegen id : 1]
Input [4]: [d_week_seq#30, d_year#11, d_moy#88, d_dom#89]
Condition : (((((isnotnull(d_year#11) AND isnotnull(d_moy#88)) AND isnotnull(d_dom#89)) AND (d_year#11 = 1999)) AND (d_moy#88 = 12)) AND (d_dom#89 = 16))

(136) Project [codegen id : 1]
Output [1]: [d_week_seq#30]
Input [4]: [d_week_seq#30, d_year#11, d_moy#88, d_dom#89]

Subquery:3 Hosting operator id = 102 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:4 Hosting operator id = 94 Hosting Expression = Subquery scalar-subquery#53, [id=#54]
* Project (140)
+- * Filter (139)
   +- * ColumnarToRow (138)
      +- Scan parquet default.date_dim (137)


(137) Scan parquet default.date_dim
Output [4]: [d_week_seq#30, d_year#11, d_moy#88, d_dom#89]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1998), EqualTo(d_moy,12), EqualTo(d_dom,16)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(138) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#30, d_year#11, d_moy#88, d_dom#89]

(139) Filter [codegen id : 1]
Input [4]: [d_week_seq#30, d_year#11, d_moy#88, d_dom#89]
Condition : (((((isnotnull(d_year#11) AND isnotnull(d_moy#88)) AND isnotnull(d_dom#89)) AND (d_year#11 = 1998)) AND (d_moy#88 = 12)) AND (d_dom#89 = 16))

(140) Project [codegen id : 1]
Output [1]: [d_week_seq#30]
Input [4]: [d_week_seq#30, d_year#11, d_moy#88, d_dom#89]


