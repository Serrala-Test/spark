== Physical Plan ==
TakeOrderedAndProject (55)
+- * HashAggregate (54)
   +- Exchange (53)
      +- * HashAggregate (52)
         +- * Project (51)
            +- * BroadcastHashJoin Inner BuildRight (50)
               :- * Project (44)
               :  +- * SortMergeJoin Inner (43)
               :     :- * Sort (37)
               :     :  +- Exchange (36)
               :     :     +- * Project (35)
               :     :        +- SortMergeJoin LeftSemi (34)
               :     :           :- SortMergeJoin LeftSemi (18)
               :     :           :  :- * Sort (5)
               :     :           :  :  +- Exchange (4)
               :     :           :  :     +- * Filter (3)
               :     :           :  :        +- * ColumnarToRow (2)
               :     :           :  :           +- Scan parquet default.customer (1)
               :     :           :  +- * Sort (17)
               :     :           :     +- Exchange (16)
               :     :           :        +- * Project (15)
               :     :           :           +- * BroadcastHashJoin Inner BuildRight (14)
               :     :           :              :- * Filter (8)
               :     :           :              :  +- * ColumnarToRow (7)
               :     :           :              :     +- Scan parquet default.store_sales (6)
               :     :           :              +- BroadcastExchange (13)
               :     :           :                 +- * Project (12)
               :     :           :                    +- * Filter (11)
               :     :           :                       +- * ColumnarToRow (10)
               :     :           :                          +- Scan parquet default.date_dim (9)
               :     :           +- * Sort (33)
               :     :              +- Exchange (32)
               :     :                 +- Union (31)
               :     :                    :- * Project (24)
               :     :                    :  +- * BroadcastHashJoin Inner BuildRight (23)
               :     :                    :     :- * Filter (21)
               :     :                    :     :  +- * ColumnarToRow (20)
               :     :                    :     :     +- Scan parquet default.web_sales (19)
               :     :                    :     +- ReusedExchange (22)
               :     :                    +- * Project (30)
               :     :                       +- * BroadcastHashJoin Inner BuildRight (29)
               :     :                          :- * Filter (27)
               :     :                          :  +- * ColumnarToRow (26)
               :     :                          :     +- Scan parquet default.catalog_sales (25)
               :     :                          +- ReusedExchange (28)
               :     +- * Sort (42)
               :        +- Exchange (41)
               :           +- * Filter (40)
               :              +- * ColumnarToRow (39)
               :                 +- Scan parquet default.customer_demographics (38)
               +- BroadcastExchange (49)
                  +- * Project (48)
                     +- * Filter (47)
                        +- * ColumnarToRow (46)
                           +- Scan parquet default.customer_address (45)


(1) Scan parquet default.customer
Output [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(3) Filter [codegen id : 1]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Condition : (isnotnull(c_current_addr_sk#3) AND isnotnull(c_current_cdemo_sk#2))

(4) Exchange
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: hashpartitioning(c_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#4]

(5) Sort [codegen id : 2]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#5, ss_customer_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ss_sold_date_sk#5, ss_customer_sk#6]

(8) Filter [codegen id : 4]
Input [2]: [ss_sold_date_sk#5, ss_customer_sk#6]
Condition : isnotnull(ss_sold_date_sk#5)

(9) Scan parquet default.date_dim
Output [3]: [d_date_sk#7, d_year#8, d_moy#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2002), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,7), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(10) ColumnarToRow [codegen id : 3]
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]

(11) Filter [codegen id : 3]
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]
Condition : (((((isnotnull(d_year#8) AND isnotnull(d_moy#9)) AND (d_year#8 = 2002)) AND (d_moy#9 >= 4)) AND (d_moy#9 <= 7)) AND isnotnull(d_date_sk#7))

(12) Project [codegen id : 3]
Output [1]: [d_date_sk#7]
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]

(13) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#10]

(14) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#5]
Right keys [1]: [d_date_sk#7]
Join condition: None

(15) Project [codegen id : 4]
Output [1]: [ss_customer_sk#6]
Input [3]: [ss_sold_date_sk#5, ss_customer_sk#6, d_date_sk#7]

(16) Exchange
Input [1]: [ss_customer_sk#6]
Arguments: hashpartitioning(ss_customer_sk#6, 5), ENSURE_REQUIREMENTS, [id=#11]

(17) Sort [codegen id : 5]
Input [1]: [ss_customer_sk#6]
Arguments: [ss_customer_sk#6 ASC NULLS FIRST], false, 0

(18) SortMergeJoin
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#6]
Join condition: None

(19) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#12, ws_bill_customer_sk#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int>

(20) ColumnarToRow [codegen id : 7]
Input [2]: [ws_sold_date_sk#12, ws_bill_customer_sk#13]

(21) Filter [codegen id : 7]
Input [2]: [ws_sold_date_sk#12, ws_bill_customer_sk#13]
Condition : isnotnull(ws_sold_date_sk#12)

(22) ReusedExchange [Reuses operator id: 13]
Output [1]: [d_date_sk#7]

(23) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ws_sold_date_sk#12]
Right keys [1]: [d_date_sk#7]
Join condition: None

(24) Project [codegen id : 7]
Output [1]: [ws_bill_customer_sk#13 AS customer_sk#14]
Input [3]: [ws_sold_date_sk#12, ws_bill_customer_sk#13, d_date_sk#7]

(25) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#15, cs_ship_customer_sk#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_ship_customer_sk:int>

(26) ColumnarToRow [codegen id : 9]
Input [2]: [cs_sold_date_sk#15, cs_ship_customer_sk#16]

(27) Filter [codegen id : 9]
Input [2]: [cs_sold_date_sk#15, cs_ship_customer_sk#16]
Condition : isnotnull(cs_sold_date_sk#15)

(28) ReusedExchange [Reuses operator id: 13]
Output [1]: [d_date_sk#7]

(29) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_sold_date_sk#15]
Right keys [1]: [d_date_sk#7]
Join condition: None

(30) Project [codegen id : 9]
Output [1]: [cs_ship_customer_sk#16 AS customer_sk#17]
Input [3]: [cs_sold_date_sk#15, cs_ship_customer_sk#16, d_date_sk#7]

(31) Union

(32) Exchange
Input [1]: [customer_sk#14]
Arguments: hashpartitioning(customer_sk#14, 5), ENSURE_REQUIREMENTS, [id=#18]

(33) Sort [codegen id : 10]
Input [1]: [customer_sk#14]
Arguments: [customer_sk#14 ASC NULLS FIRST], false, 0

(34) SortMergeJoin
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [customer_sk#14]
Join condition: None

(35) Project [codegen id : 11]
Output [2]: [c_current_cdemo_sk#2, c_current_addr_sk#3]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(36) Exchange
Input [2]: [c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: hashpartitioning(c_current_cdemo_sk#2, 5), ENSURE_REQUIREMENTS, [id=#19]

(37) Sort [codegen id : 12]
Input [2]: [c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: [c_current_cdemo_sk#2 ASC NULLS FIRST], false, 0

(38) Scan parquet default.customer_demographics
Output [9]: [cd_demo_sk#20, cd_gender#21, cd_marital_status#22, cd_education_status#23, cd_purchase_estimate#24, cd_credit_rating#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_purchase_estimate:int,cd_credit_rating:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(39) ColumnarToRow [codegen id : 13]
Input [9]: [cd_demo_sk#20, cd_gender#21, cd_marital_status#22, cd_education_status#23, cd_purchase_estimate#24, cd_credit_rating#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28]

(40) Filter [codegen id : 13]
Input [9]: [cd_demo_sk#20, cd_gender#21, cd_marital_status#22, cd_education_status#23, cd_purchase_estimate#24, cd_credit_rating#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28]
Condition : isnotnull(cd_demo_sk#20)

(41) Exchange
Input [9]: [cd_demo_sk#20, cd_gender#21, cd_marital_status#22, cd_education_status#23, cd_purchase_estimate#24, cd_credit_rating#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28]
Arguments: hashpartitioning(cd_demo_sk#20, 5), ENSURE_REQUIREMENTS, [id=#29]

(42) Sort [codegen id : 14]
Input [9]: [cd_demo_sk#20, cd_gender#21, cd_marital_status#22, cd_education_status#23, cd_purchase_estimate#24, cd_credit_rating#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28]
Arguments: [cd_demo_sk#20 ASC NULLS FIRST], false, 0

(43) SortMergeJoin [codegen id : 16]
Left keys [1]: [c_current_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#20]
Join condition: None

(44) Project [codegen id : 16]
Output [9]: [c_current_addr_sk#3, cd_gender#21, cd_marital_status#22, cd_education_status#23, cd_purchase_estimate#24, cd_credit_rating#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28]
Input [11]: [c_current_cdemo_sk#2, c_current_addr_sk#3, cd_demo_sk#20, cd_gender#21, cd_marital_status#22, cd_education_status#23, cd_purchase_estimate#24, cd_credit_rating#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28]

(45) Scan parquet default.customer_address
Output [2]: [ca_address_sk#30, ca_county#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_county, [Walker County,Richland County,Gaines County,Douglas County,Dona Ana County]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(46) ColumnarToRow [codegen id : 15]
Input [2]: [ca_address_sk#30, ca_county#31]

(47) Filter [codegen id : 15]
Input [2]: [ca_address_sk#30, ca_county#31]
Condition : (ca_county#31 IN (Walker County,Richland County,Gaines County,Douglas County,Dona Ana County) AND isnotnull(ca_address_sk#30))

(48) Project [codegen id : 15]
Output [1]: [ca_address_sk#30]
Input [2]: [ca_address_sk#30, ca_county#31]

(49) BroadcastExchange
Input [1]: [ca_address_sk#30]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#32]

(50) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [c_current_addr_sk#3]
Right keys [1]: [ca_address_sk#30]
Join condition: None

(51) Project [codegen id : 16]
Output [8]: [cd_gender#21, cd_marital_status#22, cd_education_status#23, cd_purchase_estimate#24, cd_credit_rating#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28]
Input [10]: [c_current_addr_sk#3, cd_gender#21, cd_marital_status#22, cd_education_status#23, cd_purchase_estimate#24, cd_credit_rating#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28, ca_address_sk#30]

(52) HashAggregate [codegen id : 16]
Input [8]: [cd_gender#21, cd_marital_status#22, cd_education_status#23, cd_purchase_estimate#24, cd_credit_rating#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28]
Keys [8]: [cd_gender#21, cd_marital_status#22, cd_education_status#23, cd_purchase_estimate#24, cd_credit_rating#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#33]
Results [9]: [cd_gender#21, cd_marital_status#22, cd_education_status#23, cd_purchase_estimate#24, cd_credit_rating#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28, count#34]

(53) Exchange
Input [9]: [cd_gender#21, cd_marital_status#22, cd_education_status#23, cd_purchase_estimate#24, cd_credit_rating#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28, count#34]
Arguments: hashpartitioning(cd_gender#21, cd_marital_status#22, cd_education_status#23, cd_purchase_estimate#24, cd_credit_rating#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28, 5), ENSURE_REQUIREMENTS, [id=#35]

(54) HashAggregate [codegen id : 17]
Input [9]: [cd_gender#21, cd_marital_status#22, cd_education_status#23, cd_purchase_estimate#24, cd_credit_rating#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28, count#34]
Keys [8]: [cd_gender#21, cd_marital_status#22, cd_education_status#23, cd_purchase_estimate#24, cd_credit_rating#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#36]
Results [14]: [cd_gender#21, cd_marital_status#22, cd_education_status#23, count(1)#36 AS cnt1#37, cd_purchase_estimate#24, count(1)#36 AS cnt2#38, cd_credit_rating#25, count(1)#36 AS cnt3#39, cd_dep_count#26, count(1)#36 AS cnt4#40, cd_dep_employed_count#27, count(1)#36 AS cnt5#41, cd_dep_college_count#28, count(1)#36 AS cnt6#42]

(55) TakeOrderedAndProject
Input [14]: [cd_gender#21, cd_marital_status#22, cd_education_status#23, cnt1#37, cd_purchase_estimate#24, cnt2#38, cd_credit_rating#25, cnt3#39, cd_dep_count#26, cnt4#40, cd_dep_employed_count#27, cnt5#41, cd_dep_college_count#28, cnt6#42]
Arguments: 100, [cd_gender#21 ASC NULLS FIRST, cd_marital_status#22 ASC NULLS FIRST, cd_education_status#23 ASC NULLS FIRST, cd_purchase_estimate#24 ASC NULLS FIRST, cd_credit_rating#25 ASC NULLS FIRST, cd_dep_count#26 ASC NULLS FIRST, cd_dep_employed_count#27 ASC NULLS FIRST, cd_dep_college_count#28 ASC NULLS FIRST], [cd_gender#21, cd_marital_status#22, cd_education_status#23, cnt1#37, cd_purchase_estimate#24, cnt2#38, cd_credit_rating#25, cnt3#39, cd_dep_count#26, cnt4#40, cd_dep_employed_count#27, cnt5#41, cd_dep_college_count#28, cnt6#42]

