== Physical Plan ==
TakeOrderedAndProject (53)
+- Union (52)
   :- * HashAggregate (31)
   :  +- * HashAggregate (30)
   :     +- * HashAggregate (29)
   :        +- Exchange (28)
   :           +- * HashAggregate (27)
   :              +- * Project (26)
   :                 +- * SortMergeJoin Inner (25)
   :                    :- * Sort (18)
   :                    :  +- Exchange (17)
   :                    :     +- * Project (16)
   :                    :        +- * BroadcastHashJoin Inner BuildRight (15)
   :                    :           :- * Project (9)
   :                    :           :  +- * BroadcastHashJoin Inner BuildRight (8)
   :                    :           :     :- * Filter (3)
   :                    :           :     :  +- * ColumnarToRow (2)
   :                    :           :     :     +- Scan parquet default.inventory (1)
   :                    :           :     +- BroadcastExchange (7)
   :                    :           :        +- * Filter (6)
   :                    :           :           +- * ColumnarToRow (5)
   :                    :           :              +- Scan parquet default.warehouse (4)
   :                    :           +- BroadcastExchange (14)
   :                    :              +- * Project (13)
   :                    :                 +- * Filter (12)
   :                    :                    +- * ColumnarToRow (11)
   :                    :                       +- Scan parquet default.date_dim (10)
   :                    +- * Sort (24)
   :                       +- Exchange (23)
   :                          +- * Project (22)
   :                             +- * Filter (21)
   :                                +- * ColumnarToRow (20)
   :                                   +- Scan parquet default.item (19)
   :- * HashAggregate (36)
   :  +- Exchange (35)
   :     +- * HashAggregate (34)
   :        +- * HashAggregate (33)
   :           +- ReusedExchange (32)
   :- * HashAggregate (41)
   :  +- Exchange (40)
   :     +- * HashAggregate (39)
   :        +- * HashAggregate (38)
   :           +- ReusedExchange (37)
   :- * HashAggregate (46)
   :  +- Exchange (45)
   :     +- * HashAggregate (44)
   :        +- * HashAggregate (43)
   :           +- ReusedExchange (42)
   +- * HashAggregate (51)
      +- Exchange (50)
         +- * HashAggregate (49)
            +- * HashAggregate (48)
               +- ReusedExchange (47)


(1) Scan parquet default.inventory
Output [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/inventory]
PushedFilters: [IsNotNull(inv_date_sk), IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)]
ReadSchema: struct<inv_date_sk:int,inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(2) ColumnarToRow [codegen id : 3]
Input [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]

(3) Filter [codegen id : 3]
Input [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]
Condition : ((isnotnull(inv_date_sk#1) AND isnotnull(inv_item_sk#2)) AND isnotnull(inv_warehouse_sk#3))

(4) Scan parquet default.warehouse
Output [1]: [w_warehouse_sk#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int>

(5) ColumnarToRow [codegen id : 1]
Input [1]: [w_warehouse_sk#5]

(6) Filter [codegen id : 1]
Input [1]: [w_warehouse_sk#5]
Condition : isnotnull(w_warehouse_sk#5)

(7) BroadcastExchange
Input [1]: [w_warehouse_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#6]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [inv_warehouse_sk#3]
Right keys [1]: [w_warehouse_sk#5]
Join condition: None

(9) Project [codegen id : 3]
Output [3]: [inv_date_sk#1, inv_item_sk#2, inv_quantity_on_hand#4]
Input [5]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, w_warehouse_sk#5]

(10) Scan parquet default.date_dim
Output [2]: [d_date_sk#7, d_month_seq#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(11) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#7, d_month_seq#8]

(12) Filter [codegen id : 2]
Input [2]: [d_date_sk#7, d_month_seq#8]
Condition : (((isnotnull(d_month_seq#8) AND (d_month_seq#8 >= 1212)) AND (d_month_seq#8 <= 1223)) AND isnotnull(d_date_sk#7))

(13) Project [codegen id : 2]
Output [1]: [d_date_sk#7]
Input [2]: [d_date_sk#7, d_month_seq#8]

(14) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#9]

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [inv_date_sk#1]
Right keys [1]: [d_date_sk#7]
Join condition: None

(16) Project [codegen id : 3]
Output [2]: [inv_item_sk#2, inv_quantity_on_hand#4]
Input [4]: [inv_date_sk#1, inv_item_sk#2, inv_quantity_on_hand#4, d_date_sk#7]

(17) Exchange
Input [2]: [inv_item_sk#2, inv_quantity_on_hand#4]
Arguments: hashpartitioning(inv_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#10]

(18) Sort [codegen id : 4]
Input [2]: [inv_item_sk#2, inv_quantity_on_hand#4]
Arguments: [inv_item_sk#2 ASC NULLS FIRST], false, 0

(19) Scan parquet default.item
Output [5]: [i_item_sk#11, i_brand#12, i_class#13, i_category#14, i_product_name#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_product_name:string>

(20) ColumnarToRow [codegen id : 5]
Input [5]: [i_item_sk#11, i_brand#12, i_class#13, i_category#14, i_product_name#15]

(21) Filter [codegen id : 5]
Input [5]: [i_item_sk#11, i_brand#12, i_class#13, i_category#14, i_product_name#15]
Condition : isnotnull(i_item_sk#11)

(22) Project [codegen id : 5]
Output [5]: [i_item_sk#11, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_brand#12, 50, false, true) AS i_brand#16, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_class#13, 50, false, true) AS i_class#17, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#14, 50, false, true) AS i_category#18, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_product_name#15, 50, false, true) AS i_product_name#19]
Input [5]: [i_item_sk#11, i_brand#12, i_class#13, i_category#14, i_product_name#15]

(23) Exchange
Input [5]: [i_item_sk#11, i_brand#16, i_class#17, i_category#18, i_product_name#19]
Arguments: hashpartitioning(i_item_sk#11, 5), ENSURE_REQUIREMENTS, [id=#20]

(24) Sort [codegen id : 6]
Input [5]: [i_item_sk#11, i_brand#16, i_class#17, i_category#18, i_product_name#19]
Arguments: [i_item_sk#11 ASC NULLS FIRST], false, 0

(25) SortMergeJoin [codegen id : 7]
Left keys [1]: [inv_item_sk#2]
Right keys [1]: [i_item_sk#11]
Join condition: None

(26) Project [codegen id : 7]
Output [5]: [inv_quantity_on_hand#4, i_brand#16, i_class#17, i_category#18, i_product_name#19]
Input [7]: [inv_item_sk#2, inv_quantity_on_hand#4, i_item_sk#11, i_brand#16, i_class#17, i_category#18, i_product_name#19]

(27) HashAggregate [codegen id : 7]
Input [5]: [inv_quantity_on_hand#4, i_brand#16, i_class#17, i_category#18, i_product_name#19]
Keys [4]: [i_product_name#19, i_brand#16, i_class#17, i_category#18]
Functions [1]: [partial_avg(cast(inv_quantity_on_hand#4 as bigint))]
Aggregate Attributes [2]: [sum#21, count#22]
Results [6]: [i_product_name#19, i_brand#16, i_class#17, i_category#18, sum#23, count#24]

(28) Exchange
Input [6]: [i_product_name#19, i_brand#16, i_class#17, i_category#18, sum#23, count#24]
Arguments: hashpartitioning(i_product_name#19, i_brand#16, i_class#17, i_category#18, 5), ENSURE_REQUIREMENTS, [id=#25]

(29) HashAggregate [codegen id : 8]
Input [6]: [i_product_name#19, i_brand#16, i_class#17, i_category#18, sum#23, count#24]
Keys [4]: [i_product_name#19, i_brand#16, i_class#17, i_category#18]
Functions [1]: [avg(cast(inv_quantity_on_hand#4 as bigint))]
Aggregate Attributes [1]: [avg(cast(inv_quantity_on_hand#4 as bigint))#26]
Results [5]: [i_product_name#19, i_brand#16, i_class#17, i_category#18, avg(cast(inv_quantity_on_hand#4 as bigint))#26 AS qoh#27]

(30) HashAggregate [codegen id : 8]
Input [5]: [i_product_name#19, i_brand#16, i_class#17, i_category#18, qoh#27]
Keys [4]: [i_product_name#19, i_brand#16, i_class#17, i_category#18]
Functions [1]: [partial_avg(qoh#27)]
Aggregate Attributes [2]: [sum#28, count#29]
Results [6]: [i_product_name#19, i_brand#16, i_class#17, i_category#18, sum#30, count#31]

(31) HashAggregate [codegen id : 8]
Input [6]: [i_product_name#19, i_brand#16, i_class#17, i_category#18, sum#30, count#31]
Keys [4]: [i_product_name#19, i_brand#16, i_class#17, i_category#18]
Functions [1]: [avg(qoh#27)]
Aggregate Attributes [1]: [avg(qoh#27)#32]
Results [5]: [i_product_name#19, i_brand#16, i_class#17, i_category#18, avg(qoh#27)#32 AS qoh#33]

(32) ReusedExchange [Reuses operator id: 28]
Output [6]: [i_product_name#34, i_brand#35, i_class#36, i_category#37, sum#38, count#39]

(33) HashAggregate [codegen id : 16]
Input [6]: [i_product_name#34, i_brand#35, i_class#36, i_category#37, sum#38, count#39]
Keys [4]: [i_product_name#34, i_brand#35, i_class#36, i_category#37]
Functions [1]: [avg(cast(inv_quantity_on_hand#4 as bigint))]
Aggregate Attributes [1]: [avg(cast(inv_quantity_on_hand#4 as bigint))#40]
Results [4]: [i_product_name#34, i_brand#35, i_class#36, avg(cast(inv_quantity_on_hand#4 as bigint))#40 AS qoh#27]

(34) HashAggregate [codegen id : 16]
Input [4]: [i_product_name#34, i_brand#35, i_class#36, qoh#27]
Keys [3]: [i_product_name#34, i_brand#35, i_class#36]
Functions [1]: [partial_avg(qoh#27)]
Aggregate Attributes [2]: [sum#41, count#42]
Results [5]: [i_product_name#34, i_brand#35, i_class#36, sum#43, count#44]

(35) Exchange
Input [5]: [i_product_name#34, i_brand#35, i_class#36, sum#43, count#44]
Arguments: hashpartitioning(i_product_name#34, i_brand#35, i_class#36, 5), ENSURE_REQUIREMENTS, [id=#45]

(36) HashAggregate [codegen id : 17]
Input [5]: [i_product_name#34, i_brand#35, i_class#36, sum#43, count#44]
Keys [3]: [i_product_name#34, i_brand#35, i_class#36]
Functions [1]: [avg(qoh#27)]
Aggregate Attributes [1]: [avg(qoh#27)#46]
Results [5]: [i_product_name#34 AS i_product_name#47, i_brand#35 AS i_brand#48, i_class#36 AS i_class#49, null AS i_category#50, avg(qoh#27)#46 AS qoh#51]

(37) ReusedExchange [Reuses operator id: 28]
Output [6]: [i_product_name#52, i_brand#53, i_class#54, i_category#55, sum#56, count#57]

(38) HashAggregate [codegen id : 25]
Input [6]: [i_product_name#52, i_brand#53, i_class#54, i_category#55, sum#56, count#57]
Keys [4]: [i_product_name#52, i_brand#53, i_class#54, i_category#55]
Functions [1]: [avg(cast(inv_quantity_on_hand#4 as bigint))]
Aggregate Attributes [1]: [avg(cast(inv_quantity_on_hand#4 as bigint))#58]
Results [3]: [i_product_name#52, i_brand#53, avg(cast(inv_quantity_on_hand#4 as bigint))#58 AS qoh#27]

(39) HashAggregate [codegen id : 25]
Input [3]: [i_product_name#52, i_brand#53, qoh#27]
Keys [2]: [i_product_name#52, i_brand#53]
Functions [1]: [partial_avg(qoh#27)]
Aggregate Attributes [2]: [sum#59, count#60]
Results [4]: [i_product_name#52, i_brand#53, sum#61, count#62]

(40) Exchange
Input [4]: [i_product_name#52, i_brand#53, sum#61, count#62]
Arguments: hashpartitioning(i_product_name#52, i_brand#53, 5), ENSURE_REQUIREMENTS, [id=#63]

(41) HashAggregate [codegen id : 26]
Input [4]: [i_product_name#52, i_brand#53, sum#61, count#62]
Keys [2]: [i_product_name#52, i_brand#53]
Functions [1]: [avg(qoh#27)]
Aggregate Attributes [1]: [avg(qoh#27)#64]
Results [5]: [i_product_name#52 AS i_product_name#65, i_brand#53 AS i_brand#66, null AS i_class#67, null AS i_category#68, avg(qoh#27)#64 AS qoh#69]

(42) ReusedExchange [Reuses operator id: 28]
Output [6]: [i_product_name#70, i_brand#71, i_class#72, i_category#73, sum#74, count#75]

(43) HashAggregate [codegen id : 34]
Input [6]: [i_product_name#70, i_brand#71, i_class#72, i_category#73, sum#74, count#75]
Keys [4]: [i_product_name#70, i_brand#71, i_class#72, i_category#73]
Functions [1]: [avg(cast(inv_quantity_on_hand#4 as bigint))]
Aggregate Attributes [1]: [avg(cast(inv_quantity_on_hand#4 as bigint))#76]
Results [2]: [i_product_name#70, avg(cast(inv_quantity_on_hand#4 as bigint))#76 AS qoh#27]

(44) HashAggregate [codegen id : 34]
Input [2]: [i_product_name#70, qoh#27]
Keys [1]: [i_product_name#70]
Functions [1]: [partial_avg(qoh#27)]
Aggregate Attributes [2]: [sum#77, count#78]
Results [3]: [i_product_name#70, sum#79, count#80]

(45) Exchange
Input [3]: [i_product_name#70, sum#79, count#80]
Arguments: hashpartitioning(i_product_name#70, 5), ENSURE_REQUIREMENTS, [id=#81]

(46) HashAggregate [codegen id : 35]
Input [3]: [i_product_name#70, sum#79, count#80]
Keys [1]: [i_product_name#70]
Functions [1]: [avg(qoh#27)]
Aggregate Attributes [1]: [avg(qoh#27)#82]
Results [5]: [i_product_name#70 AS i_product_name#83, null AS i_brand#84, null AS i_class#85, null AS i_category#86, avg(qoh#27)#82 AS qoh#87]

(47) ReusedExchange [Reuses operator id: 28]
Output [6]: [i_product_name#88, i_brand#89, i_class#90, i_category#91, sum#92, count#93]

(48) HashAggregate [codegen id : 43]
Input [6]: [i_product_name#88, i_brand#89, i_class#90, i_category#91, sum#92, count#93]
Keys [4]: [i_product_name#88, i_brand#89, i_class#90, i_category#91]
Functions [1]: [avg(cast(inv_quantity_on_hand#4 as bigint))]
Aggregate Attributes [1]: [avg(cast(inv_quantity_on_hand#4 as bigint))#94]
Results [1]: [avg(cast(inv_quantity_on_hand#4 as bigint))#94 AS qoh#27]

(49) HashAggregate [codegen id : 43]
Input [1]: [qoh#27]
Keys: []
Functions [1]: [partial_avg(qoh#27)]
Aggregate Attributes [2]: [sum#95, count#96]
Results [2]: [sum#97, count#98]

(50) Exchange
Input [2]: [sum#97, count#98]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#99]

(51) HashAggregate [codegen id : 44]
Input [2]: [sum#97, count#98]
Keys: []
Functions [1]: [avg(qoh#27)]
Aggregate Attributes [1]: [avg(qoh#27)#100]
Results [5]: [null AS i_product_name#101, null AS i_brand#102, null AS i_class#103, null AS i_category#104, avg(qoh#27)#100 AS qoh#105]

(52) Union

(53) TakeOrderedAndProject
Input [5]: [i_product_name#19, i_brand#16, i_class#17, i_category#18, qoh#33]
Arguments: 100, [qoh#33 ASC NULLS FIRST, i_product_name#19 ASC NULLS FIRST, i_brand#16 ASC NULLS FIRST, i_class#17 ASC NULLS FIRST, i_category#18 ASC NULLS FIRST], [i_product_name#19, i_brand#16, i_class#17, i_category#18, qoh#33]

