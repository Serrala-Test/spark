== Physical Plan ==
TakeOrderedAndProject (47)
+- * Project (46)
   +- * Filter (45)
      +- * HashAggregate (44)
         +- Exchange (43)
            +- * HashAggregate (42)
               +- * Project (41)
                  +- * BroadcastHashJoin Inner BuildRight (40)
                     :- * Project (25)
                     :  +- * BroadcastHashJoin Inner BuildRight (24)
                     :     :- * Project (18)
                     :     :  +- * BroadcastHashJoin Inner BuildRight (17)
                     :     :     :- * Project (12)
                     :     :     :  +- * SortMergeJoin Inner (11)
                     :     :     :     :- * Sort (5)
                     :     :     :     :  +- Exchange (4)
                     :     :     :     :     +- * Filter (3)
                     :     :     :     :        +- * ColumnarToRow (2)
                     :     :     :     :           +- Scan parquet default.customer_address (1)
                     :     :     :     +- * Sort (10)
                     :     :     :        +- Exchange (9)
                     :     :     :           +- * Filter (8)
                     :     :     :              +- * ColumnarToRow (7)
                     :     :     :                 +- Scan parquet default.customer (6)
                     :     :     +- BroadcastExchange (16)
                     :     :        +- * Filter (15)
                     :     :           +- * ColumnarToRow (14)
                     :     :              +- Scan parquet default.store_sales (13)
                     :     +- BroadcastExchange (23)
                     :        +- * Project (22)
                     :           +- * Filter (21)
                     :              +- * ColumnarToRow (20)
                     :                 +- Scan parquet default.date_dim (19)
                     +- BroadcastExchange (39)
                        +- * Project (38)
                           +- * Filter (37)
                              +- * BroadcastHashJoin LeftOuter BuildRight (36)
                                 :- * Filter (28)
                                 :  +- * ColumnarToRow (27)
                                 :     +- Scan parquet default.item (26)
                                 +- BroadcastExchange (35)
                                    +- * HashAggregate (34)
                                       +- Exchange (33)
                                          +- * HashAggregate (32)
                                             +- * Filter (31)
                                                +- * ColumnarToRow (30)
                                                   +- Scan parquet default.item (29)


(1) Scan parquet default.customer_address
Output [2]: [ca_address_sk#1, ca_state#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(2) ColumnarToRow [codegen id : 1]
Input [2]: [ca_address_sk#1, ca_state#2]

(3) Filter [codegen id : 1]
Input [2]: [ca_address_sk#1, ca_state#2]
Condition : isnotnull(ca_address_sk#1)

(4) Exchange
Input [2]: [ca_address_sk#1, ca_state#2]
Arguments: hashpartitioning(ca_address_sk#1, 5), ENSURE_REQUIREMENTS, [id=#3]

(5) Sort [codegen id : 2]
Input [2]: [ca_address_sk#1, ca_state#2]
Arguments: [ca_address_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.customer
Output [2]: [c_customer_sk#4, c_current_addr_sk#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(7) ColumnarToRow [codegen id : 3]
Input [2]: [c_customer_sk#4, c_current_addr_sk#5]

(8) Filter [codegen id : 3]
Input [2]: [c_customer_sk#4, c_current_addr_sk#5]
Condition : (isnotnull(c_current_addr_sk#5) AND isnotnull(c_customer_sk#4))

(9) Exchange
Input [2]: [c_customer_sk#4, c_current_addr_sk#5]
Arguments: hashpartitioning(c_current_addr_sk#5, 5), ENSURE_REQUIREMENTS, [id=#6]

(10) Sort [codegen id : 4]
Input [2]: [c_customer_sk#4, c_current_addr_sk#5]
Arguments: [c_current_addr_sk#5 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 10]
Left keys [1]: [ca_address_sk#1]
Right keys [1]: [c_current_addr_sk#5]
Join condition: None

(12) Project [codegen id : 10]
Output [2]: [ca_state#2, c_customer_sk#4]
Input [4]: [ca_address_sk#1, ca_state#2, c_customer_sk#4, c_current_addr_sk#5]

(13) Scan parquet default.store_sales
Output [3]: [ss_item_sk#7, ss_customer_sk#8, ss_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#9), dynamicpruningexpression(ss_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int>

(14) ColumnarToRow [codegen id : 5]
Input [3]: [ss_item_sk#7, ss_customer_sk#8, ss_sold_date_sk#9]

(15) Filter [codegen id : 5]
Input [3]: [ss_item_sk#7, ss_customer_sk#8, ss_sold_date_sk#9]
Condition : (isnotnull(ss_customer_sk#8) AND isnotnull(ss_item_sk#7))

(16) BroadcastExchange
Input [3]: [ss_item_sk#7, ss_customer_sk#8, ss_sold_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#11]

(17) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [c_customer_sk#4]
Right keys [1]: [ss_customer_sk#8]
Join condition: None

(18) Project [codegen id : 10]
Output [3]: [ca_state#2, ss_item_sk#7, ss_sold_date_sk#9]
Input [5]: [ca_state#2, c_customer_sk#4, ss_item_sk#7, ss_customer_sk#8, ss_sold_date_sk#9]

(19) Scan parquet default.date_dim
Output [2]: [d_date_sk#12, d_month_seq#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(20) ColumnarToRow [codegen id : 6]
Input [2]: [d_date_sk#12, d_month_seq#13]

(21) Filter [codegen id : 6]
Input [2]: [d_date_sk#12, d_month_seq#13]
Condition : ((isnotnull(d_month_seq#13) AND (d_month_seq#13 = Subquery scalar-subquery#14, [id=#15])) AND isnotnull(d_date_sk#12))

(22) Project [codegen id : 6]
Output [1]: [d_date_sk#12]
Input [2]: [d_date_sk#12, d_month_seq#13]

(23) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(24) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#9]
Right keys [1]: [d_date_sk#12]
Join condition: None

(25) Project [codegen id : 10]
Output [2]: [ca_state#2, ss_item_sk#7]
Input [4]: [ca_state#2, ss_item_sk#7, ss_sold_date_sk#9, d_date_sk#12]

(26) Scan parquet default.item
Output [3]: [i_item_sk#17, i_current_price#18, i_category#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_category:string>

(27) ColumnarToRow [codegen id : 9]
Input [3]: [i_item_sk#17, i_current_price#18, i_category#19]

(28) Filter [codegen id : 9]
Input [3]: [i_item_sk#17, i_current_price#18, i_category#19]
Condition : (isnotnull(i_current_price#18) AND isnotnull(i_item_sk#17))

(29) Scan parquet default.item
Output [2]: [i_current_price#18, i_category#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category)]
ReadSchema: struct<i_current_price:decimal(7,2),i_category:string>

(30) ColumnarToRow [codegen id : 7]
Input [2]: [i_current_price#18, i_category#19]

(31) Filter [codegen id : 7]
Input [2]: [i_current_price#18, i_category#19]
Condition : isnotnull(i_category#19)

(32) HashAggregate [codegen id : 7]
Input [2]: [i_current_price#18, i_category#19]
Keys [1]: [i_category#19]
Functions [1]: [partial_avg(UnscaledValue(i_current_price#18))]
Aggregate Attributes [2]: [sum#20, count#21]
Results [3]: [i_category#19, sum#22, count#23]

(33) Exchange
Input [3]: [i_category#19, sum#22, count#23]
Arguments: hashpartitioning(i_category#19, 5), ENSURE_REQUIREMENTS, [id=#24]

(34) HashAggregate [codegen id : 8]
Input [3]: [i_category#19, sum#22, count#23]
Keys [1]: [i_category#19]
Functions [1]: [avg(UnscaledValue(i_current_price#18))]
Aggregate Attributes [1]: [avg(UnscaledValue(i_current_price#18))#25]
Results [2]: [cast((avg(UnscaledValue(i_current_price#18))#25 / 100.0) as decimal(11,6)) AS avg(i_current_price)#26, i_category#19 AS i_category#19#27]

(35) BroadcastExchange
Input [2]: [avg(i_current_price)#26, i_category#19#27]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true]),false), [id=#28]

(36) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [i_category#19]
Right keys [1]: [i_category#19#27]
Join condition: None

(37) Filter [codegen id : 9]
Input [5]: [i_item_sk#17, i_current_price#18, i_category#19, avg(i_current_price)#26, i_category#19#27]
Condition : (cast(i_current_price#18 as decimal(14,7)) > CheckOverflow((1.200000 * promote_precision(avg(i_current_price)#26)), DecimalType(14,7), true))

(38) Project [codegen id : 9]
Output [1]: [i_item_sk#17]
Input [5]: [i_item_sk#17, i_current_price#18, i_category#19, avg(i_current_price)#26, i_category#19#27]

(39) BroadcastExchange
Input [1]: [i_item_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#29]

(40) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_item_sk#7]
Right keys [1]: [i_item_sk#17]
Join condition: None

(41) Project [codegen id : 10]
Output [1]: [ca_state#2]
Input [3]: [ca_state#2, ss_item_sk#7, i_item_sk#17]

(42) HashAggregate [codegen id : 10]
Input [1]: [ca_state#2]
Keys [1]: [ca_state#2]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#30]
Results [2]: [ca_state#2, count#31]

(43) Exchange
Input [2]: [ca_state#2, count#31]
Arguments: hashpartitioning(ca_state#2, 5), ENSURE_REQUIREMENTS, [id=#32]

(44) HashAggregate [codegen id : 11]
Input [2]: [ca_state#2, count#31]
Keys [1]: [ca_state#2]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#33]
Results [4]: [ca_state#2 AS state#34, count(1)#33 AS cnt#35, count(1)#33 AS count(1)#36, ca_state#2]

(45) Filter [codegen id : 11]
Input [4]: [state#34, cnt#35, count(1)#36, ca_state#2]
Condition : (count(1)#36 >= 10)

(46) Project [codegen id : 11]
Output [3]: [state#34, cnt#35, ca_state#2]
Input [4]: [state#34, cnt#35, count(1)#36, ca_state#2]

(47) TakeOrderedAndProject
Input [3]: [state#34, cnt#35, ca_state#2]
Arguments: 100, [cnt#35 ASC NULLS FIRST, ca_state#2 ASC NULLS FIRST], [state#34, cnt#35]

===== Subqueries =====

Subquery:1 Hosting operator id = 13 Hosting Expression = ss_sold_date_sk#9 IN dynamicpruning#10
ReusedExchange (48)


(48) ReusedExchange [Reuses operator id: 23]
Output [1]: [d_date_sk#12]

Subquery:2 Hosting operator id = 21 Hosting Expression = Subquery scalar-subquery#14, [id=#15]
* HashAggregate (55)
+- Exchange (54)
   +- * HashAggregate (53)
      +- * Project (52)
         +- * Filter (51)
            +- * ColumnarToRow (50)
               +- Scan parquet default.date_dim (49)


(49) Scan parquet default.date_dim
Output [3]: [d_month_seq#13, d_year#37, d_moy#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,1)]
ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>

(50) ColumnarToRow [codegen id : 1]
Input [3]: [d_month_seq#13, d_year#37, d_moy#38]

(51) Filter [codegen id : 1]
Input [3]: [d_month_seq#13, d_year#37, d_moy#38]
Condition : (((isnotnull(d_year#37) AND isnotnull(d_moy#38)) AND (d_year#37 = 2000)) AND (d_moy#38 = 1))

(52) Project [codegen id : 1]
Output [1]: [d_month_seq#13]
Input [3]: [d_month_seq#13, d_year#37, d_moy#38]

(53) HashAggregate [codegen id : 1]
Input [1]: [d_month_seq#13]
Keys [1]: [d_month_seq#13]
Functions: []
Aggregate Attributes: []
Results [1]: [d_month_seq#13]

(54) Exchange
Input [1]: [d_month_seq#13]
Arguments: hashpartitioning(d_month_seq#13, 5), ENSURE_REQUIREMENTS, [id=#39]

(55) HashAggregate [codegen id : 2]
Input [1]: [d_month_seq#13]
Keys [1]: [d_month_seq#13]
Functions: []
Aggregate Attributes: []
Results [1]: [d_month_seq#13]


