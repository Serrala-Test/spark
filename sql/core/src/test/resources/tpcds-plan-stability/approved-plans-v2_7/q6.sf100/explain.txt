== Physical Plan ==
TakeOrderedAndProject (55)
+- * Project (54)
   +- * Filter (53)
      +- * HashAggregate (52)
         +- Exchange (51)
            +- * HashAggregate (50)
               +- * Project (49)
                  +- * SortMergeJoin Inner (48)
                     :- * Sort (31)
                     :  +- Exchange (30)
                     :     +- * Project (29)
                     :        +- * BroadcastHashJoin Inner BuildRight (28)
                     :           :- * Project (22)
                     :           :  +- * SortMergeJoin Inner (21)
                     :           :     :- * Sort (15)
                     :           :     :  +- Exchange (14)
                     :           :     :     +- * Project (13)
                     :           :     :        +- * SortMergeJoin Inner (12)
                     :           :     :           :- * Sort (6)
                     :           :     :           :  +- Exchange (5)
                     :           :     :           :     +- * Project (4)
                     :           :     :           :        +- * Filter (3)
                     :           :     :           :           +- * ColumnarToRow (2)
                     :           :     :           :              +- Scan parquet default.customer_address (1)
                     :           :     :           +- * Sort (11)
                     :           :     :              +- Exchange (10)
                     :           :     :                 +- * Filter (9)
                     :           :     :                    +- * ColumnarToRow (8)
                     :           :     :                       +- Scan parquet default.customer (7)
                     :           :     +- * Sort (20)
                     :           :        +- Exchange (19)
                     :           :           +- * Filter (18)
                     :           :              +- * ColumnarToRow (17)
                     :           :                 +- Scan parquet default.store_sales (16)
                     :           +- BroadcastExchange (27)
                     :              +- * Project (26)
                     :                 +- * Filter (25)
                     :                    +- * ColumnarToRow (24)
                     :                       +- Scan parquet default.date_dim (23)
                     +- * Sort (47)
                        +- Exchange (46)
                           +- * Project (45)
                              +- * Filter (44)
                                 +- * BroadcastHashJoin LeftOuter BuildRight (43)
                                    :- * Filter (34)
                                    :  +- * ColumnarToRow (33)
                                    :     +- Scan parquet default.item (32)
                                    +- BroadcastExchange (42)
                                       +- * HashAggregate (41)
                                          +- Exchange (40)
                                             +- * HashAggregate (39)
                                                +- * Project (38)
                                                   +- * Filter (37)
                                                      +- * ColumnarToRow (36)
                                                         +- Scan parquet default.item (35)


(1) Scan parquet default.customer_address
Output [2]: [ca_address_sk#1, ca_state#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(2) ColumnarToRow [codegen id : 1]
Input [2]: [ca_address_sk#1, ca_state#2]

(3) Filter [codegen id : 1]
Input [2]: [ca_address_sk#1, ca_state#2]
Condition : isnotnull(ca_address_sk#1)

(4) Project [codegen id : 1]
Output [2]: [ca_address_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#2, 2, false, true) AS ca_state#3]
Input [2]: [ca_address_sk#1, ca_state#2]

(5) Exchange
Input [2]: [ca_address_sk#1, ca_state#3]
Arguments: hashpartitioning(ca_address_sk#1, 5), ENSURE_REQUIREMENTS, [id=#4]

(6) Sort [codegen id : 2]
Input [2]: [ca_address_sk#1, ca_state#3]
Arguments: [ca_address_sk#1 ASC NULLS FIRST], false, 0

(7) Scan parquet default.customer
Output [2]: [c_customer_sk#5, c_current_addr_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(8) ColumnarToRow [codegen id : 3]
Input [2]: [c_customer_sk#5, c_current_addr_sk#6]

(9) Filter [codegen id : 3]
Input [2]: [c_customer_sk#5, c_current_addr_sk#6]
Condition : (isnotnull(c_current_addr_sk#6) AND isnotnull(c_customer_sk#5))

(10) Exchange
Input [2]: [c_customer_sk#5, c_current_addr_sk#6]
Arguments: hashpartitioning(c_current_addr_sk#6, 5), ENSURE_REQUIREMENTS, [id=#7]

(11) Sort [codegen id : 4]
Input [2]: [c_customer_sk#5, c_current_addr_sk#6]
Arguments: [c_current_addr_sk#6 ASC NULLS FIRST], false, 0

(12) SortMergeJoin [codegen id : 5]
Left keys [1]: [ca_address_sk#1]
Right keys [1]: [c_current_addr_sk#6]
Join condition: None

(13) Project [codegen id : 5]
Output [2]: [ca_state#3, c_customer_sk#5]
Input [4]: [ca_address_sk#1, ca_state#3, c_customer_sk#5, c_current_addr_sk#6]

(14) Exchange
Input [2]: [ca_state#3, c_customer_sk#5]
Arguments: hashpartitioning(c_customer_sk#5, 5), ENSURE_REQUIREMENTS, [id=#8]

(15) Sort [codegen id : 6]
Input [2]: [ca_state#3, c_customer_sk#5]
Arguments: [c_customer_sk#5 ASC NULLS FIRST], false, 0

(16) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#9, ss_item_sk#10, ss_customer_sk#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int>

(17) ColumnarToRow [codegen id : 7]
Input [3]: [ss_sold_date_sk#9, ss_item_sk#10, ss_customer_sk#11]

(18) Filter [codegen id : 7]
Input [3]: [ss_sold_date_sk#9, ss_item_sk#10, ss_customer_sk#11]
Condition : ((isnotnull(ss_customer_sk#11) AND isnotnull(ss_sold_date_sk#9)) AND isnotnull(ss_item_sk#10))

(19) Exchange
Input [3]: [ss_sold_date_sk#9, ss_item_sk#10, ss_customer_sk#11]
Arguments: hashpartitioning(ss_customer_sk#11, 5), ENSURE_REQUIREMENTS, [id=#12]

(20) Sort [codegen id : 8]
Input [3]: [ss_sold_date_sk#9, ss_item_sk#10, ss_customer_sk#11]
Arguments: [ss_customer_sk#11 ASC NULLS FIRST], false, 0

(21) SortMergeJoin [codegen id : 10]
Left keys [1]: [c_customer_sk#5]
Right keys [1]: [ss_customer_sk#11]
Join condition: None

(22) Project [codegen id : 10]
Output [3]: [ca_state#3, ss_sold_date_sk#9, ss_item_sk#10]
Input [5]: [ca_state#3, c_customer_sk#5, ss_sold_date_sk#9, ss_item_sk#10, ss_customer_sk#11]

(23) Scan parquet default.date_dim
Output [2]: [d_date_sk#13, d_month_seq#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(24) ColumnarToRow [codegen id : 9]
Input [2]: [d_date_sk#13, d_month_seq#14]

(25) Filter [codegen id : 9]
Input [2]: [d_date_sk#13, d_month_seq#14]
Condition : ((isnotnull(d_month_seq#14) AND (d_month_seq#14 = Subquery scalar-subquery#15, [id=#16])) AND isnotnull(d_date_sk#13))

(26) Project [codegen id : 9]
Output [1]: [d_date_sk#13]
Input [2]: [d_date_sk#13, d_month_seq#14]

(27) BroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#17]

(28) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#9]
Right keys [1]: [d_date_sk#13]
Join condition: None

(29) Project [codegen id : 10]
Output [2]: [ca_state#3, ss_item_sk#10]
Input [4]: [ca_state#3, ss_sold_date_sk#9, ss_item_sk#10, d_date_sk#13]

(30) Exchange
Input [2]: [ca_state#3, ss_item_sk#10]
Arguments: hashpartitioning(ss_item_sk#10, 5), ENSURE_REQUIREMENTS, [id=#18]

(31) Sort [codegen id : 11]
Input [2]: [ca_state#3, ss_item_sk#10]
Arguments: [ss_item_sk#10 ASC NULLS FIRST], false, 0

(32) Scan parquet default.item
Output [3]: [i_item_sk#19, i_current_price#20, i_category#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_category:string>

(33) ColumnarToRow [codegen id : 14]
Input [3]: [i_item_sk#19, i_current_price#20, i_category#21]

(34) Filter [codegen id : 14]
Input [3]: [i_item_sk#19, i_current_price#20, i_category#21]
Condition : (isnotnull(i_current_price#20) AND isnotnull(i_item_sk#19))

(35) Scan parquet default.item
Output [2]: [i_current_price#20, i_category#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
ReadSchema: struct<i_current_price:decimal(7,2),i_category:string>

(36) ColumnarToRow [codegen id : 12]
Input [2]: [i_current_price#20, i_category#21]

(37) Filter [codegen id : 12]
Input [2]: [i_current_price#20, i_category#21]
Condition : isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#21, 50, false, true))

(38) Project [codegen id : 12]
Output [2]: [i_current_price#20, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#21, 50, false, true) AS i_category#22]
Input [2]: [i_current_price#20, i_category#21]

(39) HashAggregate [codegen id : 12]
Input [2]: [i_current_price#20, i_category#22]
Keys [1]: [i_category#22]
Functions [1]: [partial_avg(UnscaledValue(i_current_price#20))]
Aggregate Attributes [2]: [sum#23, count#24]
Results [3]: [i_category#22, sum#25, count#26]

(40) Exchange
Input [3]: [i_category#22, sum#25, count#26]
Arguments: hashpartitioning(i_category#22, 5), ENSURE_REQUIREMENTS, [id=#27]

(41) HashAggregate [codegen id : 13]
Input [3]: [i_category#22, sum#25, count#26]
Keys [1]: [i_category#22]
Functions [1]: [avg(UnscaledValue(i_current_price#20))]
Aggregate Attributes [1]: [avg(UnscaledValue(i_current_price#20))#28]
Results [2]: [cast((avg(UnscaledValue(i_current_price#20))#28 / 100.0) as decimal(11,6)) AS avg(i_current_price)#29, i_category#22]

(42) BroadcastExchange
Input [2]: [avg(i_current_price)#29, i_category#22]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true]),false), [id=#30]

(43) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#21, 50, false, true)]
Right keys [1]: [i_category#22]
Join condition: None

(44) Filter [codegen id : 14]
Input [5]: [i_item_sk#19, i_current_price#20, i_category#21, avg(i_current_price)#29, i_category#22]
Condition : (cast(i_current_price#20 as decimal(14,7)) > CheckOverflow((1.200000 * promote_precision(avg(i_current_price)#29)), DecimalType(14,7), true))

(45) Project [codegen id : 14]
Output [1]: [i_item_sk#19]
Input [5]: [i_item_sk#19, i_current_price#20, i_category#21, avg(i_current_price)#29, i_category#22]

(46) Exchange
Input [1]: [i_item_sk#19]
Arguments: hashpartitioning(i_item_sk#19, 5), ENSURE_REQUIREMENTS, [id=#31]

(47) Sort [codegen id : 15]
Input [1]: [i_item_sk#19]
Arguments: [i_item_sk#19 ASC NULLS FIRST], false, 0

(48) SortMergeJoin [codegen id : 16]
Left keys [1]: [ss_item_sk#10]
Right keys [1]: [i_item_sk#19]
Join condition: None

(49) Project [codegen id : 16]
Output [1]: [ca_state#3]
Input [3]: [ca_state#3, ss_item_sk#10, i_item_sk#19]

(50) HashAggregate [codegen id : 16]
Input [1]: [ca_state#3]
Keys [1]: [ca_state#3]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#32]
Results [2]: [ca_state#3, count#33]

(51) Exchange
Input [2]: [ca_state#3, count#33]
Arguments: hashpartitioning(ca_state#3, 5), ENSURE_REQUIREMENTS, [id=#34]

(52) HashAggregate [codegen id : 17]
Input [2]: [ca_state#3, count#33]
Keys [1]: [ca_state#3]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#35]
Results [4]: [ca_state#3 AS state#36, count(1)#35 AS cnt#37, count(1)#35 AS count(1)#38, ca_state#3]

(53) Filter [codegen id : 17]
Input [4]: [state#36, cnt#37, count(1)#38, ca_state#3]
Condition : (count(1)#38 >= 10)

(54) Project [codegen id : 17]
Output [3]: [state#36, cnt#37, ca_state#3]
Input [4]: [state#36, cnt#37, count(1)#38, ca_state#3]

(55) TakeOrderedAndProject
Input [3]: [state#36, cnt#37, ca_state#3]
Arguments: 100, [cnt#37 ASC NULLS FIRST, ca_state#3 ASC NULLS FIRST], [state#36, cnt#37]

===== Subqueries =====

Subquery:1 Hosting operator id = 25 Hosting Expression = Subquery scalar-subquery#15, [id=#16]
* HashAggregate (62)
+- Exchange (61)
   +- * HashAggregate (60)
      +- * Project (59)
         +- * Filter (58)
            +- * ColumnarToRow (57)
               +- Scan parquet default.date_dim (56)


(56) Scan parquet default.date_dim
Output [3]: [d_month_seq#14, d_year#39, d_moy#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,1)]
ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>

(57) ColumnarToRow [codegen id : 1]
Input [3]: [d_month_seq#14, d_year#39, d_moy#40]

(58) Filter [codegen id : 1]
Input [3]: [d_month_seq#14, d_year#39, d_moy#40]
Condition : (((isnotnull(d_year#39) AND isnotnull(d_moy#40)) AND (d_year#39 = 2000)) AND (d_moy#40 = 1))

(59) Project [codegen id : 1]
Output [1]: [d_month_seq#14]
Input [3]: [d_month_seq#14, d_year#39, d_moy#40]

(60) HashAggregate [codegen id : 1]
Input [1]: [d_month_seq#14]
Keys [1]: [d_month_seq#14]
Functions: []
Aggregate Attributes: []
Results [1]: [d_month_seq#14]

(61) Exchange
Input [1]: [d_month_seq#14]
Arguments: hashpartitioning(d_month_seq#14, 5), ENSURE_REQUIREMENTS, [id=#41]

(62) HashAggregate [codegen id : 2]
Input [1]: [d_month_seq#14]
Keys [1]: [d_month_seq#14]
Functions: []
Aggregate Attributes: []
Results [1]: [d_month_seq#14]


