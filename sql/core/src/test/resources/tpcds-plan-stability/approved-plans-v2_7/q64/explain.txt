== Physical Plan ==
* Sort (183)
+- Exchange (182)
   +- * Project (181)
      +- * SortMergeJoin Inner (180)
         :- * Sort (111)
         :  +- Exchange (110)
         :     +- * HashAggregate (109)
         :        +- Exchange (108)
         :           +- * HashAggregate (107)
         :              +- * Project (106)
         :                 +- * BroadcastHashJoin Inner BuildRight (105)
         :                    :- * Project (99)
         :                    :  +- * BroadcastHashJoin Inner BuildRight (98)
         :                    :     :- * Project (96)
         :                    :     :  +- * BroadcastHashJoin Inner BuildRight (95)
         :                    :     :     :- * Project (90)
         :                    :     :     :  +- * BroadcastHashJoin Inner BuildRight (89)
         :                    :     :     :     :- * Project (87)
         :                    :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (86)
         :                    :     :     :     :     :- * Project (81)
         :                    :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (80)
         :                    :     :     :     :     :     :- * Project (78)
         :                    :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (77)
         :                    :     :     :     :     :     :     :- * Project (72)
         :                    :     :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (71)
         :                    :     :     :     :     :     :     :     :- * Project (66)
         :                    :     :     :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (65)
         :                    :     :     :     :     :     :     :     :     :- * Project (63)
         :                    :     :     :     :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (62)
         :                    :     :     :     :     :     :     :     :     :     :- * Project (57)
         :                    :     :     :     :     :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (56)
         :                    :     :     :     :     :     :     :     :     :     :     :- * Project (54)
         :                    :     :     :     :     :     :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (53)
         :                    :     :     :     :     :     :     :     :     :     :     :     :- * Project (48)
         :                    :     :     :     :     :     :     :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (47)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :- * Project (42)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (41)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :- * Project (36)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (35)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :- * Project (33)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildLeft (32)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :- BroadcastExchange (27)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :  +- * SortMergeJoin LeftSemi (26)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :- * Sort (5)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :  +- Exchange (4)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     +- * Filter (3)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :        +- * ColumnarToRow (2)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :           +- Scan parquet spark_catalog.default.store_sales (1)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     +- * Sort (25)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :        +- * Project (24)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :           +- * Filter (23)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :              +- * HashAggregate (22)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                 +- Exchange (21)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                    +- * HashAggregate (20)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                       +- * Project (19)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                          +- * SortMergeJoin Inner (18)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                             :- * Sort (11)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                             :  +- Exchange (10)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                             :     +- * Project (9)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                             :        +- * Filter (8)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                             :           +- * ColumnarToRow (7)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                             :              +- Scan parquet spark_catalog.default.catalog_sales (6)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                             +- * Sort (17)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                                +- Exchange (16)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                                   +- * Project (15)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                                      +- * Filter (14)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                                         +- * ColumnarToRow (13)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                                            +- Scan parquet spark_catalog.default.catalog_returns (12)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     +- * Project (31)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :        +- * Filter (30)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :           +- * ColumnarToRow (29)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     :              +- Scan parquet spark_catalog.default.store_returns (28)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     :     +- ReusedExchange (34)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :     +- BroadcastExchange (40)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :        +- * Filter (39)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :           +- * ColumnarToRow (38)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     :              +- Scan parquet spark_catalog.default.store (37)
         :                    :     :     :     :     :     :     :     :     :     :     :     :     +- BroadcastExchange (46)
         :                    :     :     :     :     :     :     :     :     :     :     :     :        +- * Filter (45)
         :                    :     :     :     :     :     :     :     :     :     :     :     :           +- * ColumnarToRow (44)
         :                    :     :     :     :     :     :     :     :     :     :     :     :              +- Scan parquet spark_catalog.default.customer (43)
         :                    :     :     :     :     :     :     :     :     :     :     :     +- BroadcastExchange (52)
         :                    :     :     :     :     :     :     :     :     :     :     :        +- * Filter (51)
         :                    :     :     :     :     :     :     :     :     :     :     :           +- * ColumnarToRow (50)
         :                    :     :     :     :     :     :     :     :     :     :     :              +- Scan parquet spark_catalog.default.date_dim (49)
         :                    :     :     :     :     :     :     :     :     :     :     +- ReusedExchange (55)
         :                    :     :     :     :     :     :     :     :     :     +- BroadcastExchange (61)
         :                    :     :     :     :     :     :     :     :     :        +- * Filter (60)
         :                    :     :     :     :     :     :     :     :     :           +- * ColumnarToRow (59)
         :                    :     :     :     :     :     :     :     :     :              +- Scan parquet spark_catalog.default.customer_demographics (58)
         :                    :     :     :     :     :     :     :     :     +- ReusedExchange (64)
         :                    :     :     :     :     :     :     :     +- BroadcastExchange (70)
         :                    :     :     :     :     :     :     :        +- * Filter (69)
         :                    :     :     :     :     :     :     :           +- * ColumnarToRow (68)
         :                    :     :     :     :     :     :     :              +- Scan parquet spark_catalog.default.promotion (67)
         :                    :     :     :     :     :     :     +- BroadcastExchange (76)
         :                    :     :     :     :     :     :        +- * Filter (75)
         :                    :     :     :     :     :     :           +- * ColumnarToRow (74)
         :                    :     :     :     :     :     :              +- Scan parquet spark_catalog.default.household_demographics (73)
         :                    :     :     :     :     :     +- ReusedExchange (79)
         :                    :     :     :     :     +- BroadcastExchange (85)
         :                    :     :     :     :        +- * Filter (84)
         :                    :     :     :     :           +- * ColumnarToRow (83)
         :                    :     :     :     :              +- Scan parquet spark_catalog.default.customer_address (82)
         :                    :     :     :     +- ReusedExchange (88)
         :                    :     :     +- BroadcastExchange (94)
         :                    :     :        +- * Filter (93)
         :                    :     :           +- * ColumnarToRow (92)
         :                    :     :              +- Scan parquet spark_catalog.default.income_band (91)
         :                    :     +- ReusedExchange (97)
         :                    +- BroadcastExchange (104)
         :                       +- * Project (103)
         :                          +- * Filter (102)
         :                             +- * ColumnarToRow (101)
         :                                +- Scan parquet spark_catalog.default.item (100)
         +- * Sort (179)
            +- Exchange (178)
               +- * HashAggregate (177)
                  +- Exchange (176)
                     +- * HashAggregate (175)
                        +- * Project (174)
                           +- * BroadcastHashJoin Inner BuildRight (173)
                              :- * Project (171)
                              :  +- * BroadcastHashJoin Inner BuildRight (170)
                              :     :- * Project (168)
                              :     :  +- * BroadcastHashJoin Inner BuildRight (167)
                              :     :     :- * Project (165)
                              :     :     :  +- * BroadcastHashJoin Inner BuildRight (164)
                              :     :     :     :- * Project (162)
                              :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (161)
                              :     :     :     :     :- * Project (159)
                              :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (158)
                              :     :     :     :     :     :- * Project (156)
                              :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (155)
                              :     :     :     :     :     :     :- * Project (153)
                              :     :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (152)
                              :     :     :     :     :     :     :     :- * Project (150)
                              :     :     :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (149)
                              :     :     :     :     :     :     :     :     :- * Project (147)
                              :     :     :     :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (146)
                              :     :     :     :     :     :     :     :     :     :- * Project (144)
                              :     :     :     :     :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (143)
                              :     :     :     :     :     :     :     :     :     :     :- * Project (141)
                              :     :     :     :     :     :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (140)
                              :     :     :     :     :     :     :     :     :     :     :     :- * Project (138)
                              :     :     :     :     :     :     :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (137)
                              :     :     :     :     :     :     :     :     :     :     :     :     :- * Project (135)
                              :     :     :     :     :     :     :     :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (134)
                              :     :     :     :     :     :     :     :     :     :     :     :     :     :- * Project (132)
                              :     :     :     :     :     :     :     :     :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (131)
                              :     :     :     :     :     :     :     :     :     :     :     :     :     :     :- * Project (129)
                              :     :     :     :     :     :     :     :     :     :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildLeft (128)
                              :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :- BroadcastExchange (123)
                              :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :  +- * SortMergeJoin LeftSemi (122)
                              :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :- * Sort (116)
                              :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :  +- Exchange (115)
                              :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     +- * Filter (114)
                              :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :        +- * ColumnarToRow (113)
                              :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :           +- Scan parquet spark_catalog.default.store_sales (112)
                              :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     +- * Sort (121)
                              :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :        +- * Project (120)
                              :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :           +- * Filter (119)
                              :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :              +- * HashAggregate (118)
                              :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                 +- ReusedExchange (117)
                              :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     +- * Project (127)
                              :     :     :     :     :     :     :     :     :     :     :     :     :     :     :        +- * Filter (126)
                              :     :     :     :     :     :     :     :     :     :     :     :     :     :     :           +- * ColumnarToRow (125)
                              :     :     :     :     :     :     :     :     :     :     :     :     :     :     :              +- Scan parquet spark_catalog.default.store_returns (124)
                              :     :     :     :     :     :     :     :     :     :     :     :     :     :     +- ReusedExchange (130)
                              :     :     :     :     :     :     :     :     :     :     :     :     :     +- ReusedExchange (133)
                              :     :     :     :     :     :     :     :     :     :     :     :     +- ReusedExchange (136)
                              :     :     :     :     :     :     :     :     :     :     :     +- ReusedExchange (139)
                              :     :     :     :     :     :     :     :     :     :     +- ReusedExchange (142)
                              :     :     :     :     :     :     :     :     :     +- ReusedExchange (145)
                              :     :     :     :     :     :     :     :     +- ReusedExchange (148)
                              :     :     :     :     :     :     :     +- ReusedExchange (151)
                              :     :     :     :     :     :     +- ReusedExchange (154)
                              :     :     :     :     :     +- ReusedExchange (157)
                              :     :     :     :     +- ReusedExchange (160)
                              :     :     :     +- ReusedExchange (163)
                              :     :     +- ReusedExchange (166)
                              :     +- ReusedExchange (169)
                              +- ReusedExchange (172)


(1) Scan parquet spark_catalog.default.store_sales
Output [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_cdemo_sk), IsNotNull(ss_promo_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]

(3) Filter [codegen id : 1]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Condition : (((((((isnotnull(ss_item_sk#1) AND isnotnull(ss_ticket_number#8)) AND isnotnull(ss_store_sk#6)) AND isnotnull(ss_customer_sk#2)) AND isnotnull(ss_cdemo_sk#3)) AND isnotnull(ss_promo_sk#7)) AND isnotnull(ss_hdemo_sk#4)) AND isnotnull(ss_addr_sk#5))

(4) Exchange
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_item_sk#14, cs_order_number#15, cs_ext_list_price#16, cs_sold_date_sk#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_order_number)]
ReadSchema: struct<cs_item_sk:int,cs_order_number:int,cs_ext_list_price:decimal(7,2)>

(7) ColumnarToRow [codegen id : 3]
Input [4]: [cs_item_sk#14, cs_order_number#15, cs_ext_list_price#16, cs_sold_date_sk#17]

(8) Filter [codegen id : 3]
Input [4]: [cs_item_sk#14, cs_order_number#15, cs_ext_list_price#16, cs_sold_date_sk#17]
Condition : (isnotnull(cs_item_sk#14) AND isnotnull(cs_order_number#15))

(9) Project [codegen id : 3]
Output [3]: [cs_item_sk#14, cs_order_number#15, cs_ext_list_price#16]
Input [4]: [cs_item_sk#14, cs_order_number#15, cs_ext_list_price#16, cs_sold_date_sk#17]

(10) Exchange
Input [3]: [cs_item_sk#14, cs_order_number#15, cs_ext_list_price#16]
Arguments: hashpartitioning(cs_item_sk#14, cs_order_number#15, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(11) Sort [codegen id : 4]
Input [3]: [cs_item_sk#14, cs_order_number#15, cs_ext_list_price#16]
Arguments: [cs_item_sk#14 ASC NULLS FIRST, cs_order_number#15 ASC NULLS FIRST], false, 0

(12) Scan parquet spark_catalog.default.catalog_returns
Output [6]: [cr_item_sk#18, cr_order_number#19, cr_refunded_cash#20, cr_reversed_charge#21, cr_store_credit#22, cr_returned_date_sk#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_refunded_cash:decimal(7,2),cr_reversed_charge:decimal(7,2),cr_store_credit:decimal(7,2)>

(13) ColumnarToRow [codegen id : 5]
Input [6]: [cr_item_sk#18, cr_order_number#19, cr_refunded_cash#20, cr_reversed_charge#21, cr_store_credit#22, cr_returned_date_sk#23]

(14) Filter [codegen id : 5]
Input [6]: [cr_item_sk#18, cr_order_number#19, cr_refunded_cash#20, cr_reversed_charge#21, cr_store_credit#22, cr_returned_date_sk#23]
Condition : (isnotnull(cr_item_sk#18) AND isnotnull(cr_order_number#19))

(15) Project [codegen id : 5]
Output [5]: [cr_item_sk#18, cr_order_number#19, cr_refunded_cash#20, cr_reversed_charge#21, cr_store_credit#22]
Input [6]: [cr_item_sk#18, cr_order_number#19, cr_refunded_cash#20, cr_reversed_charge#21, cr_store_credit#22, cr_returned_date_sk#23]

(16) Exchange
Input [5]: [cr_item_sk#18, cr_order_number#19, cr_refunded_cash#20, cr_reversed_charge#21, cr_store_credit#22]
Arguments: hashpartitioning(cr_item_sk#18, cr_order_number#19, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(17) Sort [codegen id : 6]
Input [5]: [cr_item_sk#18, cr_order_number#19, cr_refunded_cash#20, cr_reversed_charge#21, cr_store_credit#22]
Arguments: [cr_item_sk#18 ASC NULLS FIRST, cr_order_number#19 ASC NULLS FIRST], false, 0

(18) SortMergeJoin [codegen id : 7]
Left keys [2]: [cs_item_sk#14, cs_order_number#15]
Right keys [2]: [cr_item_sk#18, cr_order_number#19]
Join condition: None

(19) Project [codegen id : 7]
Output [5]: [cs_item_sk#14, cs_ext_list_price#16, cr_refunded_cash#20, cr_reversed_charge#21, cr_store_credit#22]
Input [8]: [cs_item_sk#14, cs_order_number#15, cs_ext_list_price#16, cr_item_sk#18, cr_order_number#19, cr_refunded_cash#20, cr_reversed_charge#21, cr_store_credit#22]

(20) HashAggregate [codegen id : 7]
Input [5]: [cs_item_sk#14, cs_ext_list_price#16, cr_refunded_cash#20, cr_reversed_charge#21, cr_store_credit#22]
Keys [1]: [cs_item_sk#14]
Functions [2]: [partial_sum(UnscaledValue(cs_ext_list_price#16)), partial_sum(((cr_refunded_cash#20 + cr_reversed_charge#21) + cr_store_credit#22))]
Aggregate Attributes [3]: [sum#24, sum#25, isEmpty#26]
Results [4]: [cs_item_sk#14, sum#27, sum#28, isEmpty#29]

(21) Exchange
Input [4]: [cs_item_sk#14, sum#27, sum#28, isEmpty#29]
Arguments: hashpartitioning(cs_item_sk#14, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(22) HashAggregate [codegen id : 8]
Input [4]: [cs_item_sk#14, sum#27, sum#28, isEmpty#29]
Keys [1]: [cs_item_sk#14]
Functions [2]: [sum(UnscaledValue(cs_ext_list_price#16)), sum(((cr_refunded_cash#20 + cr_reversed_charge#21) + cr_store_credit#22))]
Aggregate Attributes [2]: [sum(UnscaledValue(cs_ext_list_price#16))#30, sum(((cr_refunded_cash#20 + cr_reversed_charge#21) + cr_store_credit#22))#31]
Results [3]: [cs_item_sk#14, MakeDecimal(sum(UnscaledValue(cs_ext_list_price#16))#30,17,2) AS sale#32, sum(((cr_refunded_cash#20 + cr_reversed_charge#21) + cr_store_credit#22))#31 AS refund#33]

(23) Filter [codegen id : 8]
Input [3]: [cs_item_sk#14, sale#32, refund#33]
Condition : ((isnotnull(sale#32) AND isnotnull(refund#33)) AND (cast(sale#32 as decimal(21,2)) > (2 * refund#33)))

(24) Project [codegen id : 8]
Output [1]: [cs_item_sk#14]
Input [3]: [cs_item_sk#14, sale#32, refund#33]

(25) Sort [codegen id : 8]
Input [1]: [cs_item_sk#14]
Arguments: [cs_item_sk#14 ASC NULLS FIRST], false, 0

(26) SortMergeJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [cs_item_sk#14]
Join condition: None

(27) BroadcastExchange
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[0, int, false] as bigint), 32) | (cast(input[7, int, false] as bigint) & 4294967295))),false), [plan_id=5]

(28) Scan parquet spark_catalog.default.store_returns
Output [3]: [sr_item_sk#34, sr_ticket_number#35, sr_returned_date_sk#36]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(29) ColumnarToRow
Input [3]: [sr_item_sk#34, sr_ticket_number#35, sr_returned_date_sk#36]

(30) Filter
Input [3]: [sr_item_sk#34, sr_ticket_number#35, sr_returned_date_sk#36]
Condition : (isnotnull(sr_item_sk#34) AND isnotnull(sr_ticket_number#35))

(31) Project
Output [2]: [sr_item_sk#34, sr_ticket_number#35]
Input [3]: [sr_item_sk#34, sr_ticket_number#35, sr_returned_date_sk#36]

(32) BroadcastHashJoin [codegen id : 25]
Left keys [2]: [ss_item_sk#1, ss_ticket_number#8]
Right keys [2]: [sr_item_sk#34, sr_ticket_number#35]
Join condition: None

(33) Project [codegen id : 25]
Output [11]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Input [14]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12, sr_item_sk#34, sr_ticket_number#35]

(34) ReusedExchange [Reuses operator id: 187]
Output [2]: [d_date_sk#37, d_year#38]

(35) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_sold_date_sk#12]
Right keys [1]: [d_date_sk#37]
Join condition: None

(36) Project [codegen id : 25]
Output [11]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38]
Input [13]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12, d_date_sk#37, d_year#38]

(37) Scan parquet spark_catalog.default.store
Output [3]: [s_store_sk#39, s_store_name#40, s_zip#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_store_name), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_zip:string>

(38) ColumnarToRow [codegen id : 11]
Input [3]: [s_store_sk#39, s_store_name#40, s_zip#41]

(39) Filter [codegen id : 11]
Input [3]: [s_store_sk#39, s_store_name#40, s_zip#41]
Condition : ((isnotnull(s_store_sk#39) AND isnotnull(s_store_name#40)) AND isnotnull(s_zip#41))

(40) BroadcastExchange
Input [3]: [s_store_sk#39, s_store_name#40, s_zip#41]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=6]

(41) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_store_sk#6]
Right keys [1]: [s_store_sk#39]
Join condition: None

(42) Project [codegen id : 25]
Output [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, s_store_name#40, s_zip#41]
Input [14]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, s_store_sk#39, s_store_name#40, s_zip#41]

(43) Scan parquet spark_catalog.default.customer
Output [6]: [c_customer_sk#42, c_current_cdemo_sk#43, c_current_hdemo_sk#44, c_current_addr_sk#45, c_first_shipto_date_sk#46, c_first_sales_date_sk#47]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_first_sales_date_sk), IsNotNull(c_first_shipto_date_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_hdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int,c_first_shipto_date_sk:int,c_first_sales_date_sk:int>

(44) ColumnarToRow [codegen id : 12]
Input [6]: [c_customer_sk#42, c_current_cdemo_sk#43, c_current_hdemo_sk#44, c_current_addr_sk#45, c_first_shipto_date_sk#46, c_first_sales_date_sk#47]

(45) Filter [codegen id : 12]
Input [6]: [c_customer_sk#42, c_current_cdemo_sk#43, c_current_hdemo_sk#44, c_current_addr_sk#45, c_first_shipto_date_sk#46, c_first_sales_date_sk#47]
Condition : (((((isnotnull(c_customer_sk#42) AND isnotnull(c_first_sales_date_sk#47)) AND isnotnull(c_first_shipto_date_sk#46)) AND isnotnull(c_current_cdemo_sk#43)) AND isnotnull(c_current_hdemo_sk#44)) AND isnotnull(c_current_addr_sk#45))

(46) BroadcastExchange
Input [6]: [c_customer_sk#42, c_current_cdemo_sk#43, c_current_hdemo_sk#44, c_current_addr_sk#45, c_first_shipto_date_sk#46, c_first_sales_date_sk#47]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=7]

(47) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#42]
Join condition: None

(48) Project [codegen id : 25]
Output [16]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, s_store_name#40, s_zip#41, c_current_cdemo_sk#43, c_current_hdemo_sk#44, c_current_addr_sk#45, c_first_shipto_date_sk#46, c_first_sales_date_sk#47]
Input [18]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, s_store_name#40, s_zip#41, c_customer_sk#42, c_current_cdemo_sk#43, c_current_hdemo_sk#44, c_current_addr_sk#45, c_first_shipto_date_sk#46, c_first_sales_date_sk#47]

(49) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#48, d_year#49]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(50) ColumnarToRow [codegen id : 13]
Input [2]: [d_date_sk#48, d_year#49]

(51) Filter [codegen id : 13]
Input [2]: [d_date_sk#48, d_year#49]
Condition : isnotnull(d_date_sk#48)

(52) BroadcastExchange
Input [2]: [d_date_sk#48, d_year#49]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=8]

(53) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [c_first_sales_date_sk#47]
Right keys [1]: [d_date_sk#48]
Join condition: None

(54) Project [codegen id : 25]
Output [16]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, s_store_name#40, s_zip#41, c_current_cdemo_sk#43, c_current_hdemo_sk#44, c_current_addr_sk#45, c_first_shipto_date_sk#46, d_year#49]
Input [18]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, s_store_name#40, s_zip#41, c_current_cdemo_sk#43, c_current_hdemo_sk#44, c_current_addr_sk#45, c_first_shipto_date_sk#46, c_first_sales_date_sk#47, d_date_sk#48, d_year#49]

(55) ReusedExchange [Reuses operator id: 52]
Output [2]: [d_date_sk#50, d_year#51]

(56) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [c_first_shipto_date_sk#46]
Right keys [1]: [d_date_sk#50]
Join condition: None

(57) Project [codegen id : 25]
Output [16]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, s_store_name#40, s_zip#41, c_current_cdemo_sk#43, c_current_hdemo_sk#44, c_current_addr_sk#45, d_year#49, d_year#51]
Input [18]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, s_store_name#40, s_zip#41, c_current_cdemo_sk#43, c_current_hdemo_sk#44, c_current_addr_sk#45, c_first_shipto_date_sk#46, d_year#49, d_date_sk#50, d_year#51]

(58) Scan parquet spark_catalog.default.customer_demographics
Output [2]: [cd_demo_sk#52, cd_marital_status#53]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string>

(59) ColumnarToRow [codegen id : 15]
Input [2]: [cd_demo_sk#52, cd_marital_status#53]

(60) Filter [codegen id : 15]
Input [2]: [cd_demo_sk#52, cd_marital_status#53]
Condition : (isnotnull(cd_demo_sk#52) AND isnotnull(cd_marital_status#53))

(61) BroadcastExchange
Input [2]: [cd_demo_sk#52, cd_marital_status#53]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=9]

(62) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#52]
Join condition: None

(63) Project [codegen id : 25]
Output [16]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, s_store_name#40, s_zip#41, c_current_cdemo_sk#43, c_current_hdemo_sk#44, c_current_addr_sk#45, d_year#49, d_year#51, cd_marital_status#53]
Input [18]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, s_store_name#40, s_zip#41, c_current_cdemo_sk#43, c_current_hdemo_sk#44, c_current_addr_sk#45, d_year#49, d_year#51, cd_demo_sk#52, cd_marital_status#53]

(64) ReusedExchange [Reuses operator id: 61]
Output [2]: [cd_demo_sk#54, cd_marital_status#55]

(65) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [c_current_cdemo_sk#43]
Right keys [1]: [cd_demo_sk#54]
Join condition: NOT (cd_marital_status#53 = cd_marital_status#55)

(66) Project [codegen id : 25]
Output [14]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, s_store_name#40, s_zip#41, c_current_hdemo_sk#44, c_current_addr_sk#45, d_year#49, d_year#51]
Input [18]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, s_store_name#40, s_zip#41, c_current_cdemo_sk#43, c_current_hdemo_sk#44, c_current_addr_sk#45, d_year#49, d_year#51, cd_marital_status#53, cd_demo_sk#54, cd_marital_status#55]

(67) Scan parquet spark_catalog.default.promotion
Output [1]: [p_promo_sk#56]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int>

(68) ColumnarToRow [codegen id : 17]
Input [1]: [p_promo_sk#56]

(69) Filter [codegen id : 17]
Input [1]: [p_promo_sk#56]
Condition : isnotnull(p_promo_sk#56)

(70) BroadcastExchange
Input [1]: [p_promo_sk#56]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=10]

(71) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_promo_sk#7]
Right keys [1]: [p_promo_sk#56]
Join condition: None

(72) Project [codegen id : 25]
Output [13]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, s_store_name#40, s_zip#41, c_current_hdemo_sk#44, c_current_addr_sk#45, d_year#49, d_year#51]
Input [15]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, s_store_name#40, s_zip#41, c_current_hdemo_sk#44, c_current_addr_sk#45, d_year#49, d_year#51, p_promo_sk#56]

(73) Scan parquet spark_catalog.default.household_demographics
Output [2]: [hd_demo_sk#57, hd_income_band_sk#58]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_demo_sk), IsNotNull(hd_income_band_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_income_band_sk:int>

(74) ColumnarToRow [codegen id : 18]
Input [2]: [hd_demo_sk#57, hd_income_band_sk#58]

(75) Filter [codegen id : 18]
Input [2]: [hd_demo_sk#57, hd_income_band_sk#58]
Condition : (isnotnull(hd_demo_sk#57) AND isnotnull(hd_income_band_sk#58))

(76) BroadcastExchange
Input [2]: [hd_demo_sk#57, hd_income_band_sk#58]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=11]

(77) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_hdemo_sk#4]
Right keys [1]: [hd_demo_sk#57]
Join condition: None

(78) Project [codegen id : 25]
Output [13]: [ss_item_sk#1, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, s_store_name#40, s_zip#41, c_current_hdemo_sk#44, c_current_addr_sk#45, d_year#49, d_year#51, hd_income_band_sk#58]
Input [15]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, s_store_name#40, s_zip#41, c_current_hdemo_sk#44, c_current_addr_sk#45, d_year#49, d_year#51, hd_demo_sk#57, hd_income_band_sk#58]

(79) ReusedExchange [Reuses operator id: 76]
Output [2]: [hd_demo_sk#59, hd_income_band_sk#60]

(80) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [c_current_hdemo_sk#44]
Right keys [1]: [hd_demo_sk#59]
Join condition: None

(81) Project [codegen id : 25]
Output [13]: [ss_item_sk#1, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, s_store_name#40, s_zip#41, c_current_addr_sk#45, d_year#49, d_year#51, hd_income_band_sk#58, hd_income_band_sk#60]
Input [15]: [ss_item_sk#1, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, s_store_name#40, s_zip#41, c_current_hdemo_sk#44, c_current_addr_sk#45, d_year#49, d_year#51, hd_income_band_sk#58, hd_demo_sk#59, hd_income_band_sk#60]

(82) Scan parquet spark_catalog.default.customer_address
Output [5]: [ca_address_sk#61, ca_street_number#62, ca_street_name#63, ca_city#64, ca_zip#65]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_street_number:string,ca_street_name:string,ca_city:string,ca_zip:string>

(83) ColumnarToRow [codegen id : 20]
Input [5]: [ca_address_sk#61, ca_street_number#62, ca_street_name#63, ca_city#64, ca_zip#65]

(84) Filter [codegen id : 20]
Input [5]: [ca_address_sk#61, ca_street_number#62, ca_street_name#63, ca_city#64, ca_zip#65]
Condition : isnotnull(ca_address_sk#61)

(85) BroadcastExchange
Input [5]: [ca_address_sk#61, ca_street_number#62, ca_street_name#63, ca_city#64, ca_zip#65]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=12]

(86) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_addr_sk#5]
Right keys [1]: [ca_address_sk#61]
Join condition: None

(87) Project [codegen id : 25]
Output [16]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, s_store_name#40, s_zip#41, c_current_addr_sk#45, d_year#49, d_year#51, hd_income_band_sk#58, hd_income_band_sk#60, ca_street_number#62, ca_street_name#63, ca_city#64, ca_zip#65]
Input [18]: [ss_item_sk#1, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, s_store_name#40, s_zip#41, c_current_addr_sk#45, d_year#49, d_year#51, hd_income_band_sk#58, hd_income_band_sk#60, ca_address_sk#61, ca_street_number#62, ca_street_name#63, ca_city#64, ca_zip#65]

(88) ReusedExchange [Reuses operator id: 85]
Output [5]: [ca_address_sk#66, ca_street_number#67, ca_street_name#68, ca_city#69, ca_zip#70]

(89) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [c_current_addr_sk#45]
Right keys [1]: [ca_address_sk#66]
Join condition: None

(90) Project [codegen id : 25]
Output [19]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, s_store_name#40, s_zip#41, d_year#49, d_year#51, hd_income_band_sk#58, hd_income_band_sk#60, ca_street_number#62, ca_street_name#63, ca_city#64, ca_zip#65, ca_street_number#67, ca_street_name#68, ca_city#69, ca_zip#70]
Input [21]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, s_store_name#40, s_zip#41, c_current_addr_sk#45, d_year#49, d_year#51, hd_income_band_sk#58, hd_income_band_sk#60, ca_street_number#62, ca_street_name#63, ca_city#64, ca_zip#65, ca_address_sk#66, ca_street_number#67, ca_street_name#68, ca_city#69, ca_zip#70]

(91) Scan parquet spark_catalog.default.income_band
Output [1]: [ib_income_band_sk#71]
Batched: true
Location [not included in comparison]/{warehouse_dir}/income_band]
PushedFilters: [IsNotNull(ib_income_band_sk)]
ReadSchema: struct<ib_income_band_sk:int>

(92) ColumnarToRow [codegen id : 22]
Input [1]: [ib_income_band_sk#71]

(93) Filter [codegen id : 22]
Input [1]: [ib_income_band_sk#71]
Condition : isnotnull(ib_income_band_sk#71)

(94) BroadcastExchange
Input [1]: [ib_income_band_sk#71]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=13]

(95) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [hd_income_band_sk#58]
Right keys [1]: [ib_income_band_sk#71]
Join condition: None

(96) Project [codegen id : 25]
Output [18]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, s_store_name#40, s_zip#41, d_year#49, d_year#51, hd_income_band_sk#60, ca_street_number#62, ca_street_name#63, ca_city#64, ca_zip#65, ca_street_number#67, ca_street_name#68, ca_city#69, ca_zip#70]
Input [20]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, s_store_name#40, s_zip#41, d_year#49, d_year#51, hd_income_band_sk#58, hd_income_band_sk#60, ca_street_number#62, ca_street_name#63, ca_city#64, ca_zip#65, ca_street_number#67, ca_street_name#68, ca_city#69, ca_zip#70, ib_income_band_sk#71]

(97) ReusedExchange [Reuses operator id: 94]
Output [1]: [ib_income_band_sk#72]

(98) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [hd_income_band_sk#60]
Right keys [1]: [ib_income_band_sk#72]
Join condition: None

(99) Project [codegen id : 25]
Output [17]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, s_store_name#40, s_zip#41, d_year#49, d_year#51, ca_street_number#62, ca_street_name#63, ca_city#64, ca_zip#65, ca_street_number#67, ca_street_name#68, ca_city#69, ca_zip#70]
Input [19]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, s_store_name#40, s_zip#41, d_year#49, d_year#51, hd_income_band_sk#60, ca_street_number#62, ca_street_name#63, ca_city#64, ca_zip#65, ca_street_number#67, ca_street_name#68, ca_city#69, ca_zip#70, ib_income_band_sk#72]

(100) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#73, i_current_price#74, i_color#75, i_product_name#76]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), In(i_color, [burlywood           ,floral              ,indian              ,medium              ,purple              ,spring              ]), GreaterThanOrEqual(i_current_price,64.00), LessThanOrEqual(i_current_price,74.00), GreaterThanOrEqual(i_current_price,65.00), LessThanOrEqual(i_current_price,79.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_color:string,i_product_name:string>

(101) ColumnarToRow [codegen id : 24]
Input [4]: [i_item_sk#73, i_current_price#74, i_color#75, i_product_name#76]

(102) Filter [codegen id : 24]
Input [4]: [i_item_sk#73, i_current_price#74, i_color#75, i_product_name#76]
Condition : ((((((isnotnull(i_current_price#74) AND i_color#75 IN (purple              ,burlywood           ,indian              ,spring              ,floral              ,medium              )) AND (i_current_price#74 >= 64.00)) AND (i_current_price#74 <= 74.00)) AND (i_current_price#74 >= 65.00)) AND (i_current_price#74 <= 79.00)) AND isnotnull(i_item_sk#73))

(103) Project [codegen id : 24]
Output [2]: [i_item_sk#73, i_product_name#76]
Input [4]: [i_item_sk#73, i_current_price#74, i_color#75, i_product_name#76]

(104) BroadcastExchange
Input [2]: [i_item_sk#73, i_product_name#76]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=14]

(105) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#73]
Join condition: None

(106) Project [codegen id : 25]
Output [18]: [ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, d_year#49, d_year#51, s_store_name#40, s_zip#41, ca_street_number#62, ca_street_name#63, ca_city#64, ca_zip#65, ca_street_number#67, ca_street_name#68, ca_city#69, ca_zip#70, i_item_sk#73, i_product_name#76]
Input [19]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, s_store_name#40, s_zip#41, d_year#49, d_year#51, ca_street_number#62, ca_street_name#63, ca_city#64, ca_zip#65, ca_street_number#67, ca_street_name#68, ca_city#69, ca_zip#70, i_item_sk#73, i_product_name#76]

(107) HashAggregate [codegen id : 25]
Input [18]: [ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#38, d_year#49, d_year#51, s_store_name#40, s_zip#41, ca_street_number#62, ca_street_name#63, ca_city#64, ca_zip#65, ca_street_number#67, ca_street_name#68, ca_city#69, ca_zip#70, i_item_sk#73, i_product_name#76]
Keys [15]: [i_product_name#76, i_item_sk#73, s_store_name#40, s_zip#41, ca_street_number#62, ca_street_name#63, ca_city#64, ca_zip#65, ca_street_number#67, ca_street_name#68, ca_city#69, ca_zip#70, d_year#38, d_year#49, d_year#51]
Functions [4]: [partial_count(1), partial_sum(UnscaledValue(ss_wholesale_cost#9)), partial_sum(UnscaledValue(ss_list_price#10)), partial_sum(UnscaledValue(ss_coupon_amt#11))]
Aggregate Attributes [4]: [count#77, sum#78, sum#79, sum#80]
Results [19]: [i_product_name#76, i_item_sk#73, s_store_name#40, s_zip#41, ca_street_number#62, ca_street_name#63, ca_city#64, ca_zip#65, ca_street_number#67, ca_street_name#68, ca_city#69, ca_zip#70, d_year#38, d_year#49, d_year#51, count#81, sum#82, sum#83, sum#84]

(108) Exchange
Input [19]: [i_product_name#76, i_item_sk#73, s_store_name#40, s_zip#41, ca_street_number#62, ca_street_name#63, ca_city#64, ca_zip#65, ca_street_number#67, ca_street_name#68, ca_city#69, ca_zip#70, d_year#38, d_year#49, d_year#51, count#81, sum#82, sum#83, sum#84]
Arguments: hashpartitioning(i_product_name#76, i_item_sk#73, s_store_name#40, s_zip#41, ca_street_number#62, ca_street_name#63, ca_city#64, ca_zip#65, ca_street_number#67, ca_street_name#68, ca_city#69, ca_zip#70, d_year#38, d_year#49, d_year#51, 5), ENSURE_REQUIREMENTS, [plan_id=15]

(109) HashAggregate [codegen id : 26]
Input [19]: [i_product_name#76, i_item_sk#73, s_store_name#40, s_zip#41, ca_street_number#62, ca_street_name#63, ca_city#64, ca_zip#65, ca_street_number#67, ca_street_name#68, ca_city#69, ca_zip#70, d_year#38, d_year#49, d_year#51, count#81, sum#82, sum#83, sum#84]
Keys [15]: [i_product_name#76, i_item_sk#73, s_store_name#40, s_zip#41, ca_street_number#62, ca_street_name#63, ca_city#64, ca_zip#65, ca_street_number#67, ca_street_name#68, ca_city#69, ca_zip#70, d_year#38, d_year#49, d_year#51]
Functions [4]: [count(1), sum(UnscaledValue(ss_wholesale_cost#9)), sum(UnscaledValue(ss_list_price#10)), sum(UnscaledValue(ss_coupon_amt#11))]
Aggregate Attributes [4]: [count(1)#85, sum(UnscaledValue(ss_wholesale_cost#9))#86, sum(UnscaledValue(ss_list_price#10))#87, sum(UnscaledValue(ss_coupon_amt#11))#88]
Results [17]: [i_product_name#76 AS product_name#89, i_item_sk#73 AS item_sk#90, s_store_name#40 AS store_name#91, s_zip#41 AS store_zip#92, ca_street_number#62 AS b_street_number#93, ca_street_name#63 AS b_streen_name#94, ca_city#64 AS b_city#95, ca_zip#65 AS b_zip#96, ca_street_number#67 AS c_street_number#97, ca_street_name#68 AS c_street_name#98, ca_city#69 AS c_city#99, ca_zip#70 AS c_zip#100, d_year#38 AS syear#101, count(1)#85 AS cnt#102, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#9))#86,17,2) AS s1#103, MakeDecimal(sum(UnscaledValue(ss_list_price#10))#87,17,2) AS s2#104, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#11))#88,17,2) AS s3#105]

(110) Exchange
Input [17]: [product_name#89, item_sk#90, store_name#91, store_zip#92, b_street_number#93, b_streen_name#94, b_city#95, b_zip#96, c_street_number#97, c_street_name#98, c_city#99, c_zip#100, syear#101, cnt#102, s1#103, s2#104, s3#105]
Arguments: hashpartitioning(item_sk#90, store_name#91, store_zip#92, 5), ENSURE_REQUIREMENTS, [plan_id=16]

(111) Sort [codegen id : 27]
Input [17]: [product_name#89, item_sk#90, store_name#91, store_zip#92, b_street_number#93, b_streen_name#94, b_city#95, b_zip#96, c_street_number#97, c_street_name#98, c_city#99, c_zip#100, syear#101, cnt#102, s1#103, s2#104, s3#105]
Arguments: [item_sk#90 ASC NULLS FIRST, store_name#91 ASC NULLS FIRST, store_zip#92 ASC NULLS FIRST], false, 0

(112) Scan parquet spark_catalog.default.store_sales
Output [12]: [ss_item_sk#106, ss_customer_sk#107, ss_cdemo_sk#108, ss_hdemo_sk#109, ss_addr_sk#110, ss_store_sk#111, ss_promo_sk#112, ss_ticket_number#113, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, ss_sold_date_sk#117]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#117), dynamicpruningexpression(ss_sold_date_sk#117 IN dynamicpruning#118)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_cdemo_sk), IsNotNull(ss_promo_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(113) ColumnarToRow [codegen id : 28]
Input [12]: [ss_item_sk#106, ss_customer_sk#107, ss_cdemo_sk#108, ss_hdemo_sk#109, ss_addr_sk#110, ss_store_sk#111, ss_promo_sk#112, ss_ticket_number#113, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, ss_sold_date_sk#117]

(114) Filter [codegen id : 28]
Input [12]: [ss_item_sk#106, ss_customer_sk#107, ss_cdemo_sk#108, ss_hdemo_sk#109, ss_addr_sk#110, ss_store_sk#111, ss_promo_sk#112, ss_ticket_number#113, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, ss_sold_date_sk#117]
Condition : (((((((isnotnull(ss_item_sk#106) AND isnotnull(ss_ticket_number#113)) AND isnotnull(ss_store_sk#111)) AND isnotnull(ss_customer_sk#107)) AND isnotnull(ss_cdemo_sk#108)) AND isnotnull(ss_promo_sk#112)) AND isnotnull(ss_hdemo_sk#109)) AND isnotnull(ss_addr_sk#110))

(115) Exchange
Input [12]: [ss_item_sk#106, ss_customer_sk#107, ss_cdemo_sk#108, ss_hdemo_sk#109, ss_addr_sk#110, ss_store_sk#111, ss_promo_sk#112, ss_ticket_number#113, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, ss_sold_date_sk#117]
Arguments: hashpartitioning(ss_item_sk#106, 5), ENSURE_REQUIREMENTS, [plan_id=17]

(116) Sort [codegen id : 29]
Input [12]: [ss_item_sk#106, ss_customer_sk#107, ss_cdemo_sk#108, ss_hdemo_sk#109, ss_addr_sk#110, ss_store_sk#111, ss_promo_sk#112, ss_ticket_number#113, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, ss_sold_date_sk#117]
Arguments: [ss_item_sk#106 ASC NULLS FIRST], false, 0

(117) ReusedExchange [Reuses operator id: 21]
Output [4]: [cs_item_sk#119, sum#120, sum#121, isEmpty#122]

(118) HashAggregate [codegen id : 35]
Input [4]: [cs_item_sk#119, sum#120, sum#121, isEmpty#122]
Keys [1]: [cs_item_sk#119]
Functions [2]: [sum(UnscaledValue(cs_ext_list_price#123)), sum(((cr_refunded_cash#124 + cr_reversed_charge#125) + cr_store_credit#126))]
Aggregate Attributes [2]: [sum(UnscaledValue(cs_ext_list_price#123))#30, sum(((cr_refunded_cash#124 + cr_reversed_charge#125) + cr_store_credit#126))#31]
Results [3]: [cs_item_sk#119, MakeDecimal(sum(UnscaledValue(cs_ext_list_price#123))#30,17,2) AS sale#32, sum(((cr_refunded_cash#124 + cr_reversed_charge#125) + cr_store_credit#126))#31 AS refund#33]

(119) Filter [codegen id : 35]
Input [3]: [cs_item_sk#119, sale#32, refund#33]
Condition : ((isnotnull(sale#32) AND isnotnull(refund#33)) AND (cast(sale#32 as decimal(21,2)) > (2 * refund#33)))

(120) Project [codegen id : 35]
Output [1]: [cs_item_sk#119]
Input [3]: [cs_item_sk#119, sale#32, refund#33]

(121) Sort [codegen id : 35]
Input [1]: [cs_item_sk#119]
Arguments: [cs_item_sk#119 ASC NULLS FIRST], false, 0

(122) SortMergeJoin [codegen id : 36]
Left keys [1]: [ss_item_sk#106]
Right keys [1]: [cs_item_sk#119]
Join condition: None

(123) BroadcastExchange
Input [12]: [ss_item_sk#106, ss_customer_sk#107, ss_cdemo_sk#108, ss_hdemo_sk#109, ss_addr_sk#110, ss_store_sk#111, ss_promo_sk#112, ss_ticket_number#113, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, ss_sold_date_sk#117]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[0, int, false] as bigint), 32) | (cast(input[7, int, false] as bigint) & 4294967295))),false), [plan_id=18]

(124) Scan parquet spark_catalog.default.store_returns
Output [3]: [sr_item_sk#127, sr_ticket_number#128, sr_returned_date_sk#129]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(125) ColumnarToRow
Input [3]: [sr_item_sk#127, sr_ticket_number#128, sr_returned_date_sk#129]

(126) Filter
Input [3]: [sr_item_sk#127, sr_ticket_number#128, sr_returned_date_sk#129]
Condition : (isnotnull(sr_item_sk#127) AND isnotnull(sr_ticket_number#128))

(127) Project
Output [2]: [sr_item_sk#127, sr_ticket_number#128]
Input [3]: [sr_item_sk#127, sr_ticket_number#128, sr_returned_date_sk#129]

(128) BroadcastHashJoin [codegen id : 52]
Left keys [2]: [ss_item_sk#106, ss_ticket_number#113]
Right keys [2]: [sr_item_sk#127, sr_ticket_number#128]
Join condition: None

(129) Project [codegen id : 52]
Output [11]: [ss_item_sk#106, ss_customer_sk#107, ss_cdemo_sk#108, ss_hdemo_sk#109, ss_addr_sk#110, ss_store_sk#111, ss_promo_sk#112, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, ss_sold_date_sk#117]
Input [14]: [ss_item_sk#106, ss_customer_sk#107, ss_cdemo_sk#108, ss_hdemo_sk#109, ss_addr_sk#110, ss_store_sk#111, ss_promo_sk#112, ss_ticket_number#113, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, ss_sold_date_sk#117, sr_item_sk#127, sr_ticket_number#128]

(130) ReusedExchange [Reuses operator id: 191]
Output [2]: [d_date_sk#130, d_year#131]

(131) BroadcastHashJoin [codegen id : 52]
Left keys [1]: [ss_sold_date_sk#117]
Right keys [1]: [d_date_sk#130]
Join condition: None

(132) Project [codegen id : 52]
Output [11]: [ss_item_sk#106, ss_customer_sk#107, ss_cdemo_sk#108, ss_hdemo_sk#109, ss_addr_sk#110, ss_store_sk#111, ss_promo_sk#112, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131]
Input [13]: [ss_item_sk#106, ss_customer_sk#107, ss_cdemo_sk#108, ss_hdemo_sk#109, ss_addr_sk#110, ss_store_sk#111, ss_promo_sk#112, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, ss_sold_date_sk#117, d_date_sk#130, d_year#131]

(133) ReusedExchange [Reuses operator id: 40]
Output [3]: [s_store_sk#132, s_store_name#133, s_zip#134]

(134) BroadcastHashJoin [codegen id : 52]
Left keys [1]: [ss_store_sk#111]
Right keys [1]: [s_store_sk#132]
Join condition: None

(135) Project [codegen id : 52]
Output [12]: [ss_item_sk#106, ss_customer_sk#107, ss_cdemo_sk#108, ss_hdemo_sk#109, ss_addr_sk#110, ss_promo_sk#112, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, s_store_name#133, s_zip#134]
Input [14]: [ss_item_sk#106, ss_customer_sk#107, ss_cdemo_sk#108, ss_hdemo_sk#109, ss_addr_sk#110, ss_store_sk#111, ss_promo_sk#112, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, s_store_sk#132, s_store_name#133, s_zip#134]

(136) ReusedExchange [Reuses operator id: 46]
Output [6]: [c_customer_sk#135, c_current_cdemo_sk#136, c_current_hdemo_sk#137, c_current_addr_sk#138, c_first_shipto_date_sk#139, c_first_sales_date_sk#140]

(137) BroadcastHashJoin [codegen id : 52]
Left keys [1]: [ss_customer_sk#107]
Right keys [1]: [c_customer_sk#135]
Join condition: None

(138) Project [codegen id : 52]
Output [16]: [ss_item_sk#106, ss_cdemo_sk#108, ss_hdemo_sk#109, ss_addr_sk#110, ss_promo_sk#112, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, s_store_name#133, s_zip#134, c_current_cdemo_sk#136, c_current_hdemo_sk#137, c_current_addr_sk#138, c_first_shipto_date_sk#139, c_first_sales_date_sk#140]
Input [18]: [ss_item_sk#106, ss_customer_sk#107, ss_cdemo_sk#108, ss_hdemo_sk#109, ss_addr_sk#110, ss_promo_sk#112, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, s_store_name#133, s_zip#134, c_customer_sk#135, c_current_cdemo_sk#136, c_current_hdemo_sk#137, c_current_addr_sk#138, c_first_shipto_date_sk#139, c_first_sales_date_sk#140]

(139) ReusedExchange [Reuses operator id: 52]
Output [2]: [d_date_sk#141, d_year#142]

(140) BroadcastHashJoin [codegen id : 52]
Left keys [1]: [c_first_sales_date_sk#140]
Right keys [1]: [d_date_sk#141]
Join condition: None

(141) Project [codegen id : 52]
Output [16]: [ss_item_sk#106, ss_cdemo_sk#108, ss_hdemo_sk#109, ss_addr_sk#110, ss_promo_sk#112, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, s_store_name#133, s_zip#134, c_current_cdemo_sk#136, c_current_hdemo_sk#137, c_current_addr_sk#138, c_first_shipto_date_sk#139, d_year#142]
Input [18]: [ss_item_sk#106, ss_cdemo_sk#108, ss_hdemo_sk#109, ss_addr_sk#110, ss_promo_sk#112, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, s_store_name#133, s_zip#134, c_current_cdemo_sk#136, c_current_hdemo_sk#137, c_current_addr_sk#138, c_first_shipto_date_sk#139, c_first_sales_date_sk#140, d_date_sk#141, d_year#142]

(142) ReusedExchange [Reuses operator id: 52]
Output [2]: [d_date_sk#143, d_year#144]

(143) BroadcastHashJoin [codegen id : 52]
Left keys [1]: [c_first_shipto_date_sk#139]
Right keys [1]: [d_date_sk#143]
Join condition: None

(144) Project [codegen id : 52]
Output [16]: [ss_item_sk#106, ss_cdemo_sk#108, ss_hdemo_sk#109, ss_addr_sk#110, ss_promo_sk#112, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, s_store_name#133, s_zip#134, c_current_cdemo_sk#136, c_current_hdemo_sk#137, c_current_addr_sk#138, d_year#142, d_year#144]
Input [18]: [ss_item_sk#106, ss_cdemo_sk#108, ss_hdemo_sk#109, ss_addr_sk#110, ss_promo_sk#112, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, s_store_name#133, s_zip#134, c_current_cdemo_sk#136, c_current_hdemo_sk#137, c_current_addr_sk#138, c_first_shipto_date_sk#139, d_year#142, d_date_sk#143, d_year#144]

(145) ReusedExchange [Reuses operator id: 61]
Output [2]: [cd_demo_sk#145, cd_marital_status#146]

(146) BroadcastHashJoin [codegen id : 52]
Left keys [1]: [ss_cdemo_sk#108]
Right keys [1]: [cd_demo_sk#145]
Join condition: None

(147) Project [codegen id : 52]
Output [16]: [ss_item_sk#106, ss_hdemo_sk#109, ss_addr_sk#110, ss_promo_sk#112, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, s_store_name#133, s_zip#134, c_current_cdemo_sk#136, c_current_hdemo_sk#137, c_current_addr_sk#138, d_year#142, d_year#144, cd_marital_status#146]
Input [18]: [ss_item_sk#106, ss_cdemo_sk#108, ss_hdemo_sk#109, ss_addr_sk#110, ss_promo_sk#112, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, s_store_name#133, s_zip#134, c_current_cdemo_sk#136, c_current_hdemo_sk#137, c_current_addr_sk#138, d_year#142, d_year#144, cd_demo_sk#145, cd_marital_status#146]

(148) ReusedExchange [Reuses operator id: 61]
Output [2]: [cd_demo_sk#147, cd_marital_status#148]

(149) BroadcastHashJoin [codegen id : 52]
Left keys [1]: [c_current_cdemo_sk#136]
Right keys [1]: [cd_demo_sk#147]
Join condition: NOT (cd_marital_status#146 = cd_marital_status#148)

(150) Project [codegen id : 52]
Output [14]: [ss_item_sk#106, ss_hdemo_sk#109, ss_addr_sk#110, ss_promo_sk#112, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, s_store_name#133, s_zip#134, c_current_hdemo_sk#137, c_current_addr_sk#138, d_year#142, d_year#144]
Input [18]: [ss_item_sk#106, ss_hdemo_sk#109, ss_addr_sk#110, ss_promo_sk#112, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, s_store_name#133, s_zip#134, c_current_cdemo_sk#136, c_current_hdemo_sk#137, c_current_addr_sk#138, d_year#142, d_year#144, cd_marital_status#146, cd_demo_sk#147, cd_marital_status#148]

(151) ReusedExchange [Reuses operator id: 70]
Output [1]: [p_promo_sk#149]

(152) BroadcastHashJoin [codegen id : 52]
Left keys [1]: [ss_promo_sk#112]
Right keys [1]: [p_promo_sk#149]
Join condition: None

(153) Project [codegen id : 52]
Output [13]: [ss_item_sk#106, ss_hdemo_sk#109, ss_addr_sk#110, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, s_store_name#133, s_zip#134, c_current_hdemo_sk#137, c_current_addr_sk#138, d_year#142, d_year#144]
Input [15]: [ss_item_sk#106, ss_hdemo_sk#109, ss_addr_sk#110, ss_promo_sk#112, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, s_store_name#133, s_zip#134, c_current_hdemo_sk#137, c_current_addr_sk#138, d_year#142, d_year#144, p_promo_sk#149]

(154) ReusedExchange [Reuses operator id: 76]
Output [2]: [hd_demo_sk#150, hd_income_band_sk#151]

(155) BroadcastHashJoin [codegen id : 52]
Left keys [1]: [ss_hdemo_sk#109]
Right keys [1]: [hd_demo_sk#150]
Join condition: None

(156) Project [codegen id : 52]
Output [13]: [ss_item_sk#106, ss_addr_sk#110, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, s_store_name#133, s_zip#134, c_current_hdemo_sk#137, c_current_addr_sk#138, d_year#142, d_year#144, hd_income_band_sk#151]
Input [15]: [ss_item_sk#106, ss_hdemo_sk#109, ss_addr_sk#110, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, s_store_name#133, s_zip#134, c_current_hdemo_sk#137, c_current_addr_sk#138, d_year#142, d_year#144, hd_demo_sk#150, hd_income_band_sk#151]

(157) ReusedExchange [Reuses operator id: 76]
Output [2]: [hd_demo_sk#152, hd_income_band_sk#153]

(158) BroadcastHashJoin [codegen id : 52]
Left keys [1]: [c_current_hdemo_sk#137]
Right keys [1]: [hd_demo_sk#152]
Join condition: None

(159) Project [codegen id : 52]
Output [13]: [ss_item_sk#106, ss_addr_sk#110, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, s_store_name#133, s_zip#134, c_current_addr_sk#138, d_year#142, d_year#144, hd_income_band_sk#151, hd_income_band_sk#153]
Input [15]: [ss_item_sk#106, ss_addr_sk#110, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, s_store_name#133, s_zip#134, c_current_hdemo_sk#137, c_current_addr_sk#138, d_year#142, d_year#144, hd_income_band_sk#151, hd_demo_sk#152, hd_income_band_sk#153]

(160) ReusedExchange [Reuses operator id: 85]
Output [5]: [ca_address_sk#154, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158]

(161) BroadcastHashJoin [codegen id : 52]
Left keys [1]: [ss_addr_sk#110]
Right keys [1]: [ca_address_sk#154]
Join condition: None

(162) Project [codegen id : 52]
Output [16]: [ss_item_sk#106, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, s_store_name#133, s_zip#134, c_current_addr_sk#138, d_year#142, d_year#144, hd_income_band_sk#151, hd_income_band_sk#153, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158]
Input [18]: [ss_item_sk#106, ss_addr_sk#110, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, s_store_name#133, s_zip#134, c_current_addr_sk#138, d_year#142, d_year#144, hd_income_band_sk#151, hd_income_band_sk#153, ca_address_sk#154, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158]

(163) ReusedExchange [Reuses operator id: 85]
Output [5]: [ca_address_sk#159, ca_street_number#160, ca_street_name#161, ca_city#162, ca_zip#163]

(164) BroadcastHashJoin [codegen id : 52]
Left keys [1]: [c_current_addr_sk#138]
Right keys [1]: [ca_address_sk#159]
Join condition: None

(165) Project [codegen id : 52]
Output [19]: [ss_item_sk#106, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, s_store_name#133, s_zip#134, d_year#142, d_year#144, hd_income_band_sk#151, hd_income_band_sk#153, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158, ca_street_number#160, ca_street_name#161, ca_city#162, ca_zip#163]
Input [21]: [ss_item_sk#106, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, s_store_name#133, s_zip#134, c_current_addr_sk#138, d_year#142, d_year#144, hd_income_band_sk#151, hd_income_band_sk#153, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158, ca_address_sk#159, ca_street_number#160, ca_street_name#161, ca_city#162, ca_zip#163]

(166) ReusedExchange [Reuses operator id: 94]
Output [1]: [ib_income_band_sk#164]

(167) BroadcastHashJoin [codegen id : 52]
Left keys [1]: [hd_income_band_sk#151]
Right keys [1]: [ib_income_band_sk#164]
Join condition: None

(168) Project [codegen id : 52]
Output [18]: [ss_item_sk#106, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, s_store_name#133, s_zip#134, d_year#142, d_year#144, hd_income_band_sk#153, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158, ca_street_number#160, ca_street_name#161, ca_city#162, ca_zip#163]
Input [20]: [ss_item_sk#106, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, s_store_name#133, s_zip#134, d_year#142, d_year#144, hd_income_band_sk#151, hd_income_band_sk#153, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158, ca_street_number#160, ca_street_name#161, ca_city#162, ca_zip#163, ib_income_band_sk#164]

(169) ReusedExchange [Reuses operator id: 94]
Output [1]: [ib_income_band_sk#165]

(170) BroadcastHashJoin [codegen id : 52]
Left keys [1]: [hd_income_band_sk#153]
Right keys [1]: [ib_income_band_sk#165]
Join condition: None

(171) Project [codegen id : 52]
Output [17]: [ss_item_sk#106, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, s_store_name#133, s_zip#134, d_year#142, d_year#144, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158, ca_street_number#160, ca_street_name#161, ca_city#162, ca_zip#163]
Input [19]: [ss_item_sk#106, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, s_store_name#133, s_zip#134, d_year#142, d_year#144, hd_income_band_sk#153, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158, ca_street_number#160, ca_street_name#161, ca_city#162, ca_zip#163, ib_income_band_sk#165]

(172) ReusedExchange [Reuses operator id: 104]
Output [2]: [i_item_sk#166, i_product_name#167]

(173) BroadcastHashJoin [codegen id : 52]
Left keys [1]: [ss_item_sk#106]
Right keys [1]: [i_item_sk#166]
Join condition: None

(174) Project [codegen id : 52]
Output [18]: [ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, d_year#142, d_year#144, s_store_name#133, s_zip#134, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158, ca_street_number#160, ca_street_name#161, ca_city#162, ca_zip#163, i_item_sk#166, i_product_name#167]
Input [19]: [ss_item_sk#106, ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, s_store_name#133, s_zip#134, d_year#142, d_year#144, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158, ca_street_number#160, ca_street_name#161, ca_city#162, ca_zip#163, i_item_sk#166, i_product_name#167]

(175) HashAggregate [codegen id : 52]
Input [18]: [ss_wholesale_cost#114, ss_list_price#115, ss_coupon_amt#116, d_year#131, d_year#142, d_year#144, s_store_name#133, s_zip#134, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158, ca_street_number#160, ca_street_name#161, ca_city#162, ca_zip#163, i_item_sk#166, i_product_name#167]
Keys [15]: [i_product_name#167, i_item_sk#166, s_store_name#133, s_zip#134, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158, ca_street_number#160, ca_street_name#161, ca_city#162, ca_zip#163, d_year#131, d_year#142, d_year#144]
Functions [4]: [partial_count(1), partial_sum(UnscaledValue(ss_wholesale_cost#114)), partial_sum(UnscaledValue(ss_list_price#115)), partial_sum(UnscaledValue(ss_coupon_amt#116))]
Aggregate Attributes [4]: [count#77, sum#168, sum#169, sum#170]
Results [19]: [i_product_name#167, i_item_sk#166, s_store_name#133, s_zip#134, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158, ca_street_number#160, ca_street_name#161, ca_city#162, ca_zip#163, d_year#131, d_year#142, d_year#144, count#81, sum#171, sum#172, sum#173]

(176) Exchange
Input [19]: [i_product_name#167, i_item_sk#166, s_store_name#133, s_zip#134, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158, ca_street_number#160, ca_street_name#161, ca_city#162, ca_zip#163, d_year#131, d_year#142, d_year#144, count#81, sum#171, sum#172, sum#173]
Arguments: hashpartitioning(i_product_name#167, i_item_sk#166, s_store_name#133, s_zip#134, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158, ca_street_number#160, ca_street_name#161, ca_city#162, ca_zip#163, d_year#131, d_year#142, d_year#144, 5), ENSURE_REQUIREMENTS, [plan_id=19]

(177) HashAggregate [codegen id : 53]
Input [19]: [i_product_name#167, i_item_sk#166, s_store_name#133, s_zip#134, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158, ca_street_number#160, ca_street_name#161, ca_city#162, ca_zip#163, d_year#131, d_year#142, d_year#144, count#81, sum#171, sum#172, sum#173]
Keys [15]: [i_product_name#167, i_item_sk#166, s_store_name#133, s_zip#134, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158, ca_street_number#160, ca_street_name#161, ca_city#162, ca_zip#163, d_year#131, d_year#142, d_year#144]
Functions [4]: [count(1), sum(UnscaledValue(ss_wholesale_cost#114)), sum(UnscaledValue(ss_list_price#115)), sum(UnscaledValue(ss_coupon_amt#116))]
Aggregate Attributes [4]: [count(1)#85, sum(UnscaledValue(ss_wholesale_cost#114))#86, sum(UnscaledValue(ss_list_price#115))#87, sum(UnscaledValue(ss_coupon_amt#116))#88]
Results [8]: [i_item_sk#166 AS item_sk#174, s_store_name#133 AS store_name#175, s_zip#134 AS store_zip#176, d_year#131 AS syear#177, count(1)#85 AS cnt#178, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#114))#86,17,2) AS s1#179, MakeDecimal(sum(UnscaledValue(ss_list_price#115))#87,17,2) AS s2#180, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#116))#88,17,2) AS s3#181]

(178) Exchange
Input [8]: [item_sk#174, store_name#175, store_zip#176, syear#177, cnt#178, s1#179, s2#180, s3#181]
Arguments: hashpartitioning(item_sk#174, store_name#175, store_zip#176, 5), ENSURE_REQUIREMENTS, [plan_id=20]

(179) Sort [codegen id : 54]
Input [8]: [item_sk#174, store_name#175, store_zip#176, syear#177, cnt#178, s1#179, s2#180, s3#181]
Arguments: [item_sk#174 ASC NULLS FIRST, store_name#175 ASC NULLS FIRST, store_zip#176 ASC NULLS FIRST], false, 0

(180) SortMergeJoin [codegen id : 55]
Left keys [3]: [item_sk#90, store_name#91, store_zip#92]
Right keys [3]: [item_sk#174, store_name#175, store_zip#176]
Join condition: (cnt#178 <= cnt#102)

(181) Project [codegen id : 55]
Output [21]: [product_name#89, store_name#91, store_zip#92, b_street_number#93, b_streen_name#94, b_city#95, b_zip#96, c_street_number#97, c_street_name#98, c_city#99, c_zip#100, syear#101, cnt#102, s1#103, s2#104, s3#105, s1#179, s2#180, s3#181, syear#177, cnt#178]
Input [25]: [product_name#89, item_sk#90, store_name#91, store_zip#92, b_street_number#93, b_streen_name#94, b_city#95, b_zip#96, c_street_number#97, c_street_name#98, c_city#99, c_zip#100, syear#101, cnt#102, s1#103, s2#104, s3#105, item_sk#174, store_name#175, store_zip#176, syear#177, cnt#178, s1#179, s2#180, s3#181]

(182) Exchange
Input [21]: [product_name#89, store_name#91, store_zip#92, b_street_number#93, b_streen_name#94, b_city#95, b_zip#96, c_street_number#97, c_street_name#98, c_city#99, c_zip#100, syear#101, cnt#102, s1#103, s2#104, s3#105, s1#179, s2#180, s3#181, syear#177, cnt#178]
Arguments: rangepartitioning(product_name#89 ASC NULLS FIRST, store_name#91 ASC NULLS FIRST, cnt#178 ASC NULLS FIRST, s1#103 ASC NULLS FIRST, s1#179 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [plan_id=21]

(183) Sort [codegen id : 56]
Input [21]: [product_name#89, store_name#91, store_zip#92, b_street_number#93, b_streen_name#94, b_city#95, b_zip#96, c_street_number#97, c_street_name#98, c_city#99, c_zip#100, syear#101, cnt#102, s1#103, s2#104, s3#105, s1#179, s2#180, s3#181, syear#177, cnt#178]
Arguments: [product_name#89 ASC NULLS FIRST, store_name#91 ASC NULLS FIRST, cnt#178 ASC NULLS FIRST, s1#103 ASC NULLS FIRST, s1#179 ASC NULLS FIRST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#13
BroadcastExchange (187)
+- * Filter (186)
   +- * ColumnarToRow (185)
      +- Scan parquet spark_catalog.default.date_dim (184)


(184) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#37, d_year#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1999), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(185) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#37, d_year#38]

(186) Filter [codegen id : 1]
Input [2]: [d_date_sk#37, d_year#38]
Condition : ((isnotnull(d_year#38) AND (d_year#38 = 1999)) AND isnotnull(d_date_sk#37))

(187) BroadcastExchange
Input [2]: [d_date_sk#37, d_year#38]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=22]

Subquery:2 Hosting operator id = 112 Hosting Expression = ss_sold_date_sk#117 IN dynamicpruning#118
BroadcastExchange (191)
+- * Filter (190)
   +- * ColumnarToRow (189)
      +- Scan parquet spark_catalog.default.date_dim (188)


(188) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#130, d_year#131]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(189) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#130, d_year#131]

(190) Filter [codegen id : 1]
Input [2]: [d_date_sk#130, d_year#131]
Condition : ((isnotnull(d_year#131) AND (d_year#131 = 2000)) AND isnotnull(d_date_sk#130))

(191) BroadcastExchange
Input [2]: [d_date_sk#130, d_year#131]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=23]


