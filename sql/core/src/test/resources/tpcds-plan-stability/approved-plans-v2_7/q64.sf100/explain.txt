== Physical Plan ==
* Sort (212)
+- Exchange (211)
   +- * Project (210)
      +- * SortMergeJoin Inner (209)
         :- * Sort (131)
         :  +- Exchange (130)
         :     +- * HashAggregate (129)
         :        +- Exchange (128)
         :           +- * HashAggregate (127)
         :              +- * Project (126)
         :                 +- * BroadcastHashJoin Inner BuildRight (125)
         :                    :- * Project (119)
         :                    :  +- * BroadcastHashJoin Inner BuildRight (118)
         :                    :     :- * Project (116)
         :                    :     :  +- * BroadcastHashJoin Inner BuildRight (115)
         :                    :     :     :- * Project (110)
         :                    :     :     :  +- * SortMergeJoin Inner (109)
         :                    :     :     :     :- * Sort (106)
         :                    :     :     :     :  +- Exchange (105)
         :                    :     :     :     :     +- * Project (104)
         :                    :     :     :     :        +- * SortMergeJoin Inner (103)
         :                    :     :     :     :           :- * Sort (96)
         :                    :     :     :     :           :  +- Exchange (95)
         :                    :     :     :     :           :     +- * Project (94)
         :                    :     :     :     :           :        +- * BroadcastHashJoin Inner BuildRight (93)
         :                    :     :     :     :           :           :- * Project (91)
         :                    :     :     :     :           :           :  +- * BroadcastHashJoin Inner BuildRight (90)
         :                    :     :     :     :           :           :     :- * Project (85)
         :                    :     :     :     :           :           :     :  +- * BroadcastHashJoin Inner BuildRight (84)
         :                    :     :     :     :           :           :     :     :- * Project (79)
         :                    :     :     :     :           :           :     :     :  +- * SortMergeJoin Inner (78)
         :                    :     :     :     :           :           :     :     :     :- * Sort (75)
         :                    :     :     :     :           :           :     :     :     :  +- Exchange (74)
         :                    :     :     :     :           :           :     :     :     :     +- * Project (73)
         :                    :     :     :     :           :           :     :     :     :        +- * SortMergeJoin Inner (72)
         :                    :     :     :     :           :           :     :     :     :           :- * Sort (65)
         :                    :     :     :     :           :           :     :     :     :           :  +- Exchange (64)
         :                    :     :     :     :           :           :     :     :     :           :     +- * Project (63)
         :                    :     :     :     :           :           :     :     :     :           :        +- * BroadcastHashJoin Inner BuildRight (62)
         :                    :     :     :     :           :           :     :     :     :           :           :- * Project (60)
         :                    :     :     :     :           :           :     :     :     :           :           :  +- * BroadcastHashJoin Inner BuildRight (59)
         :                    :     :     :     :           :           :     :     :     :           :           :     :- * Project (54)
         :                    :     :     :     :           :           :     :     :     :           :           :     :  +- * SortMergeJoin Inner (53)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :- * Sort (47)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :  +- Exchange (46)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :     +- * Project (45)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :        +- * BroadcastHashJoin Inner BuildRight (44)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :- * Project (38)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :  +- * BroadcastHashJoin Inner BuildRight (37)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :- * Project (32)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :  +- * BroadcastHashJoin Inner BuildRight (31)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :- * Project (12)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :  +- * SortMergeJoin Inner (11)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :- * Sort (5)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :  +- Exchange (4)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :     +- * Filter (3)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :        +- * ColumnarToRow (2)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :           +- Scan parquet default.store_sales (1)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     +- * Sort (10)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :        +- Exchange (9)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :           +- * Filter (8)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :              +- * ColumnarToRow (7)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :                 +- Scan parquet default.store_returns (6)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     +- BroadcastExchange (30)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :        +- * Project (29)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :           +- * Filter (28)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :              +- * HashAggregate (27)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                 +- Exchange (26)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                    +- * HashAggregate (25)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                       +- * Project (24)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                          +- * SortMergeJoin Inner (23)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                             :- * Sort (17)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                             :  +- Exchange (16)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                             :     +- * Filter (15)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                             :        +- * ColumnarToRow (14)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                             :           +- Scan parquet default.catalog_sales (13)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                             +- * Sort (22)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                                +- Exchange (21)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                                   +- * Filter (20)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                                      +- * ColumnarToRow (19)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                                         +- Scan parquet default.catalog_returns (18)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     +- BroadcastExchange (36)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :        +- * Filter (35)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :           +- * ColumnarToRow (34)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :              +- Scan parquet default.date_dim (33)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           +- BroadcastExchange (43)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :              +- * Project (42)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :                 +- * Filter (41)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :                    +- * ColumnarToRow (40)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :                       +- Scan parquet default.store (39)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     +- * Sort (52)
         :                    :     :     :     :           :           :     :     :     :           :           :     :        +- Exchange (51)
         :                    :     :     :     :           :           :     :     :     :           :           :     :           +- * Filter (50)
         :                    :     :     :     :           :           :     :     :     :           :           :     :              +- * ColumnarToRow (49)
         :                    :     :     :     :           :           :     :     :     :           :           :     :                 +- Scan parquet default.customer (48)
         :                    :     :     :     :           :           :     :     :     :           :           :     +- BroadcastExchange (58)
         :                    :     :     :     :           :           :     :     :     :           :           :        +- * Filter (57)
         :                    :     :     :     :           :           :     :     :     :           :           :           +- * ColumnarToRow (56)
         :                    :     :     :     :           :           :     :     :     :           :           :              +- Scan parquet default.date_dim (55)
         :                    :     :     :     :           :           :     :     :     :           :           +- ReusedExchange (61)
         :                    :     :     :     :           :           :     :     :     :           +- * Sort (71)
         :                    :     :     :     :           :           :     :     :     :              +- Exchange (70)
         :                    :     :     :     :           :           :     :     :     :                 +- * Project (69)
         :                    :     :     :     :           :           :     :     :     :                    +- * Filter (68)
         :                    :     :     :     :           :           :     :     :     :                       +- * ColumnarToRow (67)
         :                    :     :     :     :           :           :     :     :     :                          +- Scan parquet default.customer_demographics (66)
         :                    :     :     :     :           :           :     :     :     +- * Sort (77)
         :                    :     :     :     :           :           :     :     :        +- ReusedExchange (76)
         :                    :     :     :     :           :           :     :     +- BroadcastExchange (83)
         :                    :     :     :     :           :           :     :        +- * Filter (82)
         :                    :     :     :     :           :           :     :           +- * ColumnarToRow (81)
         :                    :     :     :     :           :           :     :              +- Scan parquet default.promotion (80)
         :                    :     :     :     :           :           :     +- BroadcastExchange (89)
         :                    :     :     :     :           :           :        +- * Filter (88)
         :                    :     :     :     :           :           :           +- * ColumnarToRow (87)
         :                    :     :     :     :           :           :              +- Scan parquet default.household_demographics (86)
         :                    :     :     :     :           :           +- ReusedExchange (92)
         :                    :     :     :     :           +- * Sort (102)
         :                    :     :     :     :              +- Exchange (101)
         :                    :     :     :     :                 +- * Project (100)
         :                    :     :     :     :                    +- * Filter (99)
         :                    :     :     :     :                       +- * ColumnarToRow (98)
         :                    :     :     :     :                          +- Scan parquet default.customer_address (97)
         :                    :     :     :     +- * Sort (108)
         :                    :     :     :        +- ReusedExchange (107)
         :                    :     :     +- BroadcastExchange (114)
         :                    :     :        +- * Filter (113)
         :                    :     :           +- * ColumnarToRow (112)
         :                    :     :              +- Scan parquet default.income_band (111)
         :                    :     +- ReusedExchange (117)
         :                    +- BroadcastExchange (124)
         :                       +- * Project (123)
         :                          +- * Filter (122)
         :                             +- * ColumnarToRow (121)
         :                                +- Scan parquet default.item (120)
         +- * Sort (208)
            +- Exchange (207)
               +- * HashAggregate (206)
                  +- Exchange (205)
                     +- * HashAggregate (204)
                        +- * Project (203)
                           +- * BroadcastHashJoin Inner BuildRight (202)
                              :- * Project (200)
                              :  +- * BroadcastHashJoin Inner BuildRight (199)
                              :     :- * Project (197)
                              :     :  +- * BroadcastHashJoin Inner BuildRight (196)
                              :     :     :- * Project (194)
                              :     :     :  +- * SortMergeJoin Inner (193)
                              :     :     :     :- * Sort (190)
                              :     :     :     :  +- Exchange (189)
                              :     :     :     :     +- * Project (188)
                              :     :     :     :        +- * SortMergeJoin Inner (187)
                              :     :     :     :           :- * Sort (184)
                              :     :     :     :           :  +- Exchange (183)
                              :     :     :     :           :     +- * Project (182)
                              :     :     :     :           :        +- * BroadcastHashJoin Inner BuildRight (181)
                              :     :     :     :           :           :- * Project (179)
                              :     :     :     :           :           :  +- * BroadcastHashJoin Inner BuildRight (178)
                              :     :     :     :           :           :     :- * Project (176)
                              :     :     :     :           :           :     :  +- * BroadcastHashJoin Inner BuildRight (175)
                              :     :     :     :           :           :     :     :- * Project (173)
                              :     :     :     :           :           :     :     :  +- * SortMergeJoin Inner (172)
                              :     :     :     :           :           :     :     :     :- * Sort (169)
                              :     :     :     :           :           :     :     :     :  +- Exchange (168)
                              :     :     :     :           :           :     :     :     :     +- * Project (167)
                              :     :     :     :           :           :     :     :     :        +- * SortMergeJoin Inner (166)
                              :     :     :     :           :           :     :     :     :           :- * Sort (163)
                              :     :     :     :           :           :     :     :     :           :  +- Exchange (162)
                              :     :     :     :           :           :     :     :     :           :     +- * Project (161)
                              :     :     :     :           :           :     :     :     :           :        +- * BroadcastHashJoin Inner BuildRight (160)
                              :     :     :     :           :           :     :     :     :           :           :- * Project (158)
                              :     :     :     :           :           :     :     :     :           :           :  +- * BroadcastHashJoin Inner BuildRight (157)
                              :     :     :     :           :           :     :     :     :           :           :     :- * Project (155)
                              :     :     :     :           :           :     :     :     :           :           :     :  +- * SortMergeJoin Inner (154)
                              :     :     :     :           :           :     :     :     :           :           :     :     :- * Sort (151)
                              :     :     :     :           :           :     :     :     :           :           :     :     :  +- Exchange (150)
                              :     :     :     :           :           :     :     :     :           :           :     :     :     +- * Project (149)
                              :     :     :     :           :           :     :     :     :           :           :     :     :        +- * BroadcastHashJoin Inner BuildRight (148)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :- * Project (146)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :  +- * BroadcastHashJoin Inner BuildRight (145)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :- * Project (140)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :  +- * BroadcastHashJoin Inner BuildRight (139)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :- * Project (137)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :  +- * SortMergeJoin Inner (136)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :- * Sort (133)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :  +- ReusedExchange (132)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     +- * Sort (135)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :        +- ReusedExchange (134)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     +- ReusedExchange (138)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     +- BroadcastExchange (144)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :        +- * Filter (143)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :           +- * ColumnarToRow (142)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :              +- Scan parquet default.date_dim (141)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           +- ReusedExchange (147)
                              :     :     :     :           :           :     :     :     :           :           :     :     +- * Sort (153)
                              :     :     :     :           :           :     :     :     :           :           :     :        +- ReusedExchange (152)
                              :     :     :     :           :           :     :     :     :           :           :     +- ReusedExchange (156)
                              :     :     :     :           :           :     :     :     :           :           +- ReusedExchange (159)
                              :     :     :     :           :           :     :     :     :           +- * Sort (165)
                              :     :     :     :           :           :     :     :     :              +- ReusedExchange (164)
                              :     :     :     :           :           :     :     :     +- * Sort (171)
                              :     :     :     :           :           :     :     :        +- ReusedExchange (170)
                              :     :     :     :           :           :     :     +- ReusedExchange (174)
                              :     :     :     :           :           :     +- ReusedExchange (177)
                              :     :     :     :           :           +- ReusedExchange (180)
                              :     :     :     :           +- * Sort (186)
                              :     :     :     :              +- ReusedExchange (185)
                              :     :     :     +- * Sort (192)
                              :     :     :        +- ReusedExchange (191)
                              :     :     +- ReusedExchange (195)
                              :     +- ReusedExchange (198)
                              +- ReusedExchange (201)


(1) Scan parquet default.store_sales
Output [12]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_cdemo_sk), IsNotNull(ss_promo_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [12]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12]

(3) Filter [codegen id : 1]
Input [12]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12]
Condition : ((((((((isnotnull(ss_item_sk#2) AND isnotnull(ss_ticket_number#9)) AND isnotnull(ss_sold_date_sk#1)) AND isnotnull(ss_store_sk#7)) AND isnotnull(ss_customer_sk#3)) AND isnotnull(ss_cdemo_sk#4)) AND isnotnull(ss_promo_sk#8)) AND isnotnull(ss_hdemo_sk#5)) AND isnotnull(ss_addr_sk#6))

(4) Exchange
Input [12]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12]
Arguments: hashpartitioning(cast(ss_item_sk#2 as bigint), cast(ss_ticket_number#9 as bigint), 5), ENSURE_REQUIREMENTS, [id=#13]

(5) Sort [codegen id : 2]
Input [12]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12]
Arguments: [cast(ss_item_sk#2 as bigint) ASC NULLS FIRST, cast(ss_ticket_number#9 as bigint) ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_returns
Output [2]: [sr_item_sk#14, sr_ticket_number#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:bigint,sr_ticket_number:bigint>

(7) ColumnarToRow [codegen id : 3]
Input [2]: [sr_item_sk#14, sr_ticket_number#15]

(8) Filter [codegen id : 3]
Input [2]: [sr_item_sk#14, sr_ticket_number#15]
Condition : (isnotnull(sr_item_sk#14) AND isnotnull(sr_ticket_number#15))

(9) Exchange
Input [2]: [sr_item_sk#14, sr_ticket_number#15]
Arguments: hashpartitioning(sr_item_sk#14, sr_ticket_number#15, 5), ENSURE_REQUIREMENTS, [id=#16]

(10) Sort [codegen id : 4]
Input [2]: [sr_item_sk#14, sr_ticket_number#15]
Arguments: [sr_item_sk#14 ASC NULLS FIRST, sr_ticket_number#15 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 13]
Left keys [2]: [cast(ss_item_sk#2 as bigint), cast(ss_ticket_number#9 as bigint)]
Right keys [2]: [sr_item_sk#14, sr_ticket_number#15]
Join condition: None

(12) Project [codegen id : 13]
Output [11]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12]
Input [14]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, sr_item_sk#14, sr_ticket_number#15]

(13) Scan parquet default.catalog_sales
Output [3]: [cs_item_sk#17, cs_order_number#18, cs_ext_list_price#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_order_number)]
ReadSchema: struct<cs_item_sk:int,cs_order_number:int,cs_ext_list_price:decimal(7,2)>

(14) ColumnarToRow [codegen id : 5]
Input [3]: [cs_item_sk#17, cs_order_number#18, cs_ext_list_price#19]

(15) Filter [codegen id : 5]
Input [3]: [cs_item_sk#17, cs_order_number#18, cs_ext_list_price#19]
Condition : (isnotnull(cs_item_sk#17) AND isnotnull(cs_order_number#18))

(16) Exchange
Input [3]: [cs_item_sk#17, cs_order_number#18, cs_ext_list_price#19]
Arguments: hashpartitioning(cs_item_sk#17, cs_order_number#18, 5), ENSURE_REQUIREMENTS, [id=#20]

(17) Sort [codegen id : 6]
Input [3]: [cs_item_sk#17, cs_order_number#18, cs_ext_list_price#19]
Arguments: [cs_item_sk#17 ASC NULLS FIRST, cs_order_number#18 ASC NULLS FIRST], false, 0

(18) Scan parquet default.catalog_returns
Output [5]: [cr_item_sk#21, cr_order_number#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_refunded_cash:decimal(7,2),cr_reversed_charge:decimal(7,2),cr_store_credit:decimal(7,2)>

(19) ColumnarToRow [codegen id : 7]
Input [5]: [cr_item_sk#21, cr_order_number#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25]

(20) Filter [codegen id : 7]
Input [5]: [cr_item_sk#21, cr_order_number#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25]
Condition : (isnotnull(cr_item_sk#21) AND isnotnull(cr_order_number#22))

(21) Exchange
Input [5]: [cr_item_sk#21, cr_order_number#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25]
Arguments: hashpartitioning(cr_item_sk#21, cr_order_number#22, 5), ENSURE_REQUIREMENTS, [id=#26]

(22) Sort [codegen id : 8]
Input [5]: [cr_item_sk#21, cr_order_number#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25]
Arguments: [cr_item_sk#21 ASC NULLS FIRST, cr_order_number#22 ASC NULLS FIRST], false, 0

(23) SortMergeJoin [codegen id : 9]
Left keys [2]: [cs_item_sk#17, cs_order_number#18]
Right keys [2]: [cr_item_sk#21, cr_order_number#22]
Join condition: None

(24) Project [codegen id : 9]
Output [5]: [cs_item_sk#17, cs_ext_list_price#19, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25]
Input [8]: [cs_item_sk#17, cs_order_number#18, cs_ext_list_price#19, cr_item_sk#21, cr_order_number#22, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25]

(25) HashAggregate [codegen id : 9]
Input [5]: [cs_item_sk#17, cs_ext_list_price#19, cr_refunded_cash#23, cr_reversed_charge#24, cr_store_credit#25]
Keys [1]: [cs_item_sk#17]
Functions [2]: [partial_sum(UnscaledValue(cs_ext_list_price#19)), partial_sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#23 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#24 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#25 as decimal(9,2)))), DecimalType(9,2), true))]
Aggregate Attributes [3]: [sum#27, sum#28, isEmpty#29]
Results [4]: [cs_item_sk#17, sum#30, sum#31, isEmpty#32]

(26) Exchange
Input [4]: [cs_item_sk#17, sum#30, sum#31, isEmpty#32]
Arguments: hashpartitioning(cs_item_sk#17, 5), ENSURE_REQUIREMENTS, [id=#33]

(27) HashAggregate [codegen id : 10]
Input [4]: [cs_item_sk#17, sum#30, sum#31, isEmpty#32]
Keys [1]: [cs_item_sk#17]
Functions [2]: [sum(UnscaledValue(cs_ext_list_price#19)), sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#23 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#24 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#25 as decimal(9,2)))), DecimalType(9,2), true))]
Aggregate Attributes [2]: [sum(UnscaledValue(cs_ext_list_price#19))#34, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#23 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#24 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#25 as decimal(9,2)))), DecimalType(9,2), true))#35]
Results [3]: [cs_item_sk#17, MakeDecimal(sum(UnscaledValue(cs_ext_list_price#19))#34,17,2) AS sum(cs_ext_list_price#19)#36, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#23 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#24 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#25 as decimal(9,2)))), DecimalType(9,2), true))#35 AS sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#23 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#24 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#25 as decimal(9,2)))), DecimalType(9,2), true))#37]

(28) Filter [codegen id : 10]
Input [3]: [cs_item_sk#17, sum(cs_ext_list_price#19)#36, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#23 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#24 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#25 as decimal(9,2)))), DecimalType(9,2), true))#37]
Condition : (isnotnull(sum(cs_ext_list_price#19)#36) AND (cast(sum(cs_ext_list_price#19)#36 as decimal(21,2)) > CheckOverflow((2.00 * promote_precision(sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#23 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#24 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#25 as decimal(9,2)))), DecimalType(9,2), true))#37)), DecimalType(21,2), true)))

(29) Project [codegen id : 10]
Output [1]: [cs_item_sk#17]
Input [3]: [cs_item_sk#17, sum(cs_ext_list_price#19)#36, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#23 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#24 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#25 as decimal(9,2)))), DecimalType(9,2), true))#37]

(30) BroadcastExchange
Input [1]: [cs_item_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#38]

(31) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [cs_item_sk#17]
Join condition: None

(32) Project [codegen id : 13]
Output [11]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12]
Input [12]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, cs_item_sk#17]

(33) Scan parquet default.date_dim
Output [2]: [d_date_sk#39, d_year#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1999), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(34) ColumnarToRow [codegen id : 11]
Input [2]: [d_date_sk#39, d_year#40]

(35) Filter [codegen id : 11]
Input [2]: [d_date_sk#39, d_year#40]
Condition : ((isnotnull(d_year#40) AND (d_year#40 = 1999)) AND isnotnull(d_date_sk#39))

(36) BroadcastExchange
Input [2]: [d_date_sk#39, d_year#40]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#41]

(37) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#39]
Join condition: None

(38) Project [codegen id : 13]
Output [11]: [ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40]
Input [13]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_date_sk#39, d_year#40]

(39) Scan parquet default.store
Output [3]: [s_store_sk#42, s_store_name#43, s_zip#44]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_zip:string>

(40) ColumnarToRow [codegen id : 12]
Input [3]: [s_store_sk#42, s_store_name#43, s_zip#44]

(41) Filter [codegen id : 12]
Input [3]: [s_store_sk#42, s_store_name#43, s_zip#44]
Condition : ((isnotnull(s_store_sk#42) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_store_name#43, 50, false, true))) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_zip#44, 10, false, true)))

(42) Project [codegen id : 12]
Output [3]: [s_store_sk#42, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_store_name#43, 50, false, true) AS s_store_name#45, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_zip#44, 10, false, true) AS s_zip#46]
Input [3]: [s_store_sk#42, s_store_name#43, s_zip#44]

(43) BroadcastExchange
Input [3]: [s_store_sk#42, s_store_name#45, s_zip#46]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#47]

(44) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_store_sk#7]
Right keys [1]: [s_store_sk#42]
Join condition: None

(45) Project [codegen id : 13]
Output [12]: [ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46]
Input [14]: [ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_sk#42, s_store_name#45, s_zip#46]

(46) Exchange
Input [12]: [ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46]
Arguments: hashpartitioning(ss_customer_sk#3, 5), ENSURE_REQUIREMENTS, [id=#48]

(47) Sort [codegen id : 14]
Input [12]: [ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46]
Arguments: [ss_customer_sk#3 ASC NULLS FIRST], false, 0

(48) Scan parquet default.customer
Output [6]: [c_customer_sk#49, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, c_first_shipto_date_sk#53, c_first_sales_date_sk#54]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_first_sales_date_sk), IsNotNull(c_first_shipto_date_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_hdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int,c_first_shipto_date_sk:int,c_first_sales_date_sk:int>

(49) ColumnarToRow [codegen id : 15]
Input [6]: [c_customer_sk#49, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, c_first_shipto_date_sk#53, c_first_sales_date_sk#54]

(50) Filter [codegen id : 15]
Input [6]: [c_customer_sk#49, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, c_first_shipto_date_sk#53, c_first_sales_date_sk#54]
Condition : (((((isnotnull(c_customer_sk#49) AND isnotnull(c_first_sales_date_sk#54)) AND isnotnull(c_first_shipto_date_sk#53)) AND isnotnull(c_current_cdemo_sk#50)) AND isnotnull(c_current_hdemo_sk#51)) AND isnotnull(c_current_addr_sk#52))

(51) Exchange
Input [6]: [c_customer_sk#49, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, c_first_shipto_date_sk#53, c_first_sales_date_sk#54]
Arguments: hashpartitioning(c_customer_sk#49, 5), ENSURE_REQUIREMENTS, [id=#55]

(52) Sort [codegen id : 16]
Input [6]: [c_customer_sk#49, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, c_first_shipto_date_sk#53, c_first_sales_date_sk#54]
Arguments: [c_customer_sk#49 ASC NULLS FIRST], false, 0

(53) SortMergeJoin [codegen id : 19]
Left keys [1]: [ss_customer_sk#3]
Right keys [1]: [c_customer_sk#49]
Join condition: None

(54) Project [codegen id : 19]
Output [16]: [ss_item_sk#2, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, c_first_shipto_date_sk#53, c_first_sales_date_sk#54]
Input [18]: [ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, c_customer_sk#49, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, c_first_shipto_date_sk#53, c_first_sales_date_sk#54]

(55) Scan parquet default.date_dim
Output [2]: [d_date_sk#56, d_year#57]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(56) ColumnarToRow [codegen id : 17]
Input [2]: [d_date_sk#56, d_year#57]

(57) Filter [codegen id : 17]
Input [2]: [d_date_sk#56, d_year#57]
Condition : isnotnull(d_date_sk#56)

(58) BroadcastExchange
Input [2]: [d_date_sk#56, d_year#57]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#58]

(59) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [c_first_sales_date_sk#54]
Right keys [1]: [d_date_sk#56]
Join condition: None

(60) Project [codegen id : 19]
Output [16]: [ss_item_sk#2, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, c_first_shipto_date_sk#53, d_year#57]
Input [18]: [ss_item_sk#2, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, c_first_shipto_date_sk#53, c_first_sales_date_sk#54, d_date_sk#56, d_year#57]

(61) ReusedExchange [Reuses operator id: 58]
Output [2]: [d_date_sk#59, d_year#60]

(62) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [c_first_shipto_date_sk#53]
Right keys [1]: [d_date_sk#59]
Join condition: None

(63) Project [codegen id : 19]
Output [16]: [ss_item_sk#2, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, d_year#57, d_year#60]
Input [18]: [ss_item_sk#2, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, c_first_shipto_date_sk#53, d_year#57, d_date_sk#59, d_year#60]

(64) Exchange
Input [16]: [ss_item_sk#2, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, d_year#57, d_year#60]
Arguments: hashpartitioning(ss_cdemo_sk#4, 5), ENSURE_REQUIREMENTS, [id=#61]

(65) Sort [codegen id : 20]
Input [16]: [ss_item_sk#2, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, d_year#57, d_year#60]
Arguments: [ss_cdemo_sk#4 ASC NULLS FIRST], false, 0

(66) Scan parquet default.customer_demographics
Output [2]: [cd_demo_sk#62, cd_marital_status#63]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string>

(67) ColumnarToRow [codegen id : 21]
Input [2]: [cd_demo_sk#62, cd_marital_status#63]

(68) Filter [codegen id : 21]
Input [2]: [cd_demo_sk#62, cd_marital_status#63]
Condition : (isnotnull(cd_demo_sk#62) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_marital_status#63, 1, false, true)))

(69) Project [codegen id : 21]
Output [2]: [cd_demo_sk#62, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_marital_status#63, 1, false, true) AS cd_marital_status#64]
Input [2]: [cd_demo_sk#62, cd_marital_status#63]

(70) Exchange
Input [2]: [cd_demo_sk#62, cd_marital_status#64]
Arguments: hashpartitioning(cd_demo_sk#62, 5), ENSURE_REQUIREMENTS, [id=#65]

(71) Sort [codegen id : 22]
Input [2]: [cd_demo_sk#62, cd_marital_status#64]
Arguments: [cd_demo_sk#62 ASC NULLS FIRST], false, 0

(72) SortMergeJoin [codegen id : 23]
Left keys [1]: [ss_cdemo_sk#4]
Right keys [1]: [cd_demo_sk#62]
Join condition: None

(73) Project [codegen id : 23]
Output [16]: [ss_item_sk#2, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, d_year#57, d_year#60, cd_marital_status#64]
Input [18]: [ss_item_sk#2, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, d_year#57, d_year#60, cd_demo_sk#62, cd_marital_status#64]

(74) Exchange
Input [16]: [ss_item_sk#2, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, d_year#57, d_year#60, cd_marital_status#64]
Arguments: hashpartitioning(c_current_cdemo_sk#50, 5), ENSURE_REQUIREMENTS, [id=#66]

(75) Sort [codegen id : 24]
Input [16]: [ss_item_sk#2, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, d_year#57, d_year#60, cd_marital_status#64]
Arguments: [c_current_cdemo_sk#50 ASC NULLS FIRST], false, 0

(76) ReusedExchange [Reuses operator id: 70]
Output [2]: [cd_demo_sk#67, cd_marital_status#68]

(77) Sort [codegen id : 26]
Input [2]: [cd_demo_sk#67, cd_marital_status#68]
Arguments: [cd_demo_sk#67 ASC NULLS FIRST], false, 0

(78) SortMergeJoin [codegen id : 30]
Left keys [1]: [c_current_cdemo_sk#50]
Right keys [1]: [cd_demo_sk#67]
Join condition: NOT (cd_marital_status#64 = cd_marital_status#68)

(79) Project [codegen id : 30]
Output [14]: [ss_item_sk#2, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, c_current_hdemo_sk#51, c_current_addr_sk#52, d_year#57, d_year#60]
Input [18]: [ss_item_sk#2, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, d_year#57, d_year#60, cd_marital_status#64, cd_demo_sk#67, cd_marital_status#68]

(80) Scan parquet default.promotion
Output [1]: [p_promo_sk#69]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int>

(81) ColumnarToRow [codegen id : 27]
Input [1]: [p_promo_sk#69]

(82) Filter [codegen id : 27]
Input [1]: [p_promo_sk#69]
Condition : isnotnull(p_promo_sk#69)

(83) BroadcastExchange
Input [1]: [p_promo_sk#69]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#70]

(84) BroadcastHashJoin [codegen id : 30]
Left keys [1]: [ss_promo_sk#8]
Right keys [1]: [p_promo_sk#69]
Join condition: None

(85) Project [codegen id : 30]
Output [13]: [ss_item_sk#2, ss_hdemo_sk#5, ss_addr_sk#6, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, c_current_hdemo_sk#51, c_current_addr_sk#52, d_year#57, d_year#60]
Input [15]: [ss_item_sk#2, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, c_current_hdemo_sk#51, c_current_addr_sk#52, d_year#57, d_year#60, p_promo_sk#69]

(86) Scan parquet default.household_demographics
Output [2]: [hd_demo_sk#71, hd_income_band_sk#72]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_demo_sk), IsNotNull(hd_income_band_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_income_band_sk:int>

(87) ColumnarToRow [codegen id : 28]
Input [2]: [hd_demo_sk#71, hd_income_band_sk#72]

(88) Filter [codegen id : 28]
Input [2]: [hd_demo_sk#71, hd_income_band_sk#72]
Condition : (isnotnull(hd_demo_sk#71) AND isnotnull(hd_income_band_sk#72))

(89) BroadcastExchange
Input [2]: [hd_demo_sk#71, hd_income_band_sk#72]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#73]

(90) BroadcastHashJoin [codegen id : 30]
Left keys [1]: [ss_hdemo_sk#5]
Right keys [1]: [hd_demo_sk#71]
Join condition: None

(91) Project [codegen id : 30]
Output [13]: [ss_item_sk#2, ss_addr_sk#6, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, c_current_hdemo_sk#51, c_current_addr_sk#52, d_year#57, d_year#60, hd_income_band_sk#72]
Input [15]: [ss_item_sk#2, ss_hdemo_sk#5, ss_addr_sk#6, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, c_current_hdemo_sk#51, c_current_addr_sk#52, d_year#57, d_year#60, hd_demo_sk#71, hd_income_band_sk#72]

(92) ReusedExchange [Reuses operator id: 89]
Output [2]: [hd_demo_sk#74, hd_income_band_sk#75]

(93) BroadcastHashJoin [codegen id : 30]
Left keys [1]: [c_current_hdemo_sk#51]
Right keys [1]: [hd_demo_sk#74]
Join condition: None

(94) Project [codegen id : 30]
Output [13]: [ss_item_sk#2, ss_addr_sk#6, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, c_current_addr_sk#52, d_year#57, d_year#60, hd_income_band_sk#72, hd_income_band_sk#75]
Input [15]: [ss_item_sk#2, ss_addr_sk#6, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, c_current_hdemo_sk#51, c_current_addr_sk#52, d_year#57, d_year#60, hd_income_band_sk#72, hd_demo_sk#74, hd_income_band_sk#75]

(95) Exchange
Input [13]: [ss_item_sk#2, ss_addr_sk#6, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, c_current_addr_sk#52, d_year#57, d_year#60, hd_income_band_sk#72, hd_income_band_sk#75]
Arguments: hashpartitioning(ss_addr_sk#6, 5), ENSURE_REQUIREMENTS, [id=#76]

(96) Sort [codegen id : 31]
Input [13]: [ss_item_sk#2, ss_addr_sk#6, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, c_current_addr_sk#52, d_year#57, d_year#60, hd_income_band_sk#72, hd_income_band_sk#75]
Arguments: [ss_addr_sk#6 ASC NULLS FIRST], false, 0

(97) Scan parquet default.customer_address
Output [5]: [ca_address_sk#77, ca_street_number#78, ca_street_name#79, ca_city#80, ca_zip#81]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_street_number:string,ca_street_name:string,ca_city:string,ca_zip:string>

(98) ColumnarToRow [codegen id : 32]
Input [5]: [ca_address_sk#77, ca_street_number#78, ca_street_name#79, ca_city#80, ca_zip#81]

(99) Filter [codegen id : 32]
Input [5]: [ca_address_sk#77, ca_street_number#78, ca_street_name#79, ca_city#80, ca_zip#81]
Condition : isnotnull(ca_address_sk#77)

(100) Project [codegen id : 32]
Output [5]: [ca_address_sk#77, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_street_number#78, 10, false, true) AS ca_street_number#82, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_street_name#79, 60, false, true) AS ca_street_name#83, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_city#80, 60, false, true) AS ca_city#84, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_zip#81, 10, false, true) AS ca_zip#85]
Input [5]: [ca_address_sk#77, ca_street_number#78, ca_street_name#79, ca_city#80, ca_zip#81]

(101) Exchange
Input [5]: [ca_address_sk#77, ca_street_number#82, ca_street_name#83, ca_city#84, ca_zip#85]
Arguments: hashpartitioning(ca_address_sk#77, 5), ENSURE_REQUIREMENTS, [id=#86]

(102) Sort [codegen id : 33]
Input [5]: [ca_address_sk#77, ca_street_number#82, ca_street_name#83, ca_city#84, ca_zip#85]
Arguments: [ca_address_sk#77 ASC NULLS FIRST], false, 0

(103) SortMergeJoin [codegen id : 34]
Left keys [1]: [ss_addr_sk#6]
Right keys [1]: [ca_address_sk#77]
Join condition: None

(104) Project [codegen id : 34]
Output [16]: [ss_item_sk#2, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, c_current_addr_sk#52, d_year#57, d_year#60, hd_income_band_sk#72, hd_income_band_sk#75, ca_street_number#82, ca_street_name#83, ca_city#84, ca_zip#85]
Input [18]: [ss_item_sk#2, ss_addr_sk#6, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, c_current_addr_sk#52, d_year#57, d_year#60, hd_income_band_sk#72, hd_income_band_sk#75, ca_address_sk#77, ca_street_number#82, ca_street_name#83, ca_city#84, ca_zip#85]

(105) Exchange
Input [16]: [ss_item_sk#2, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, c_current_addr_sk#52, d_year#57, d_year#60, hd_income_band_sk#72, hd_income_band_sk#75, ca_street_number#82, ca_street_name#83, ca_city#84, ca_zip#85]
Arguments: hashpartitioning(c_current_addr_sk#52, 5), ENSURE_REQUIREMENTS, [id=#87]

(106) Sort [codegen id : 35]
Input [16]: [ss_item_sk#2, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, c_current_addr_sk#52, d_year#57, d_year#60, hd_income_band_sk#72, hd_income_band_sk#75, ca_street_number#82, ca_street_name#83, ca_city#84, ca_zip#85]
Arguments: [c_current_addr_sk#52 ASC NULLS FIRST], false, 0

(107) ReusedExchange [Reuses operator id: 101]
Output [5]: [ca_address_sk#88, ca_street_number#89, ca_street_name#90, ca_city#91, ca_zip#92]

(108) Sort [codegen id : 37]
Input [5]: [ca_address_sk#88, ca_street_number#89, ca_street_name#90, ca_city#91, ca_zip#92]
Arguments: [ca_address_sk#88 ASC NULLS FIRST], false, 0

(109) SortMergeJoin [codegen id : 41]
Left keys [1]: [c_current_addr_sk#52]
Right keys [1]: [ca_address_sk#88]
Join condition: None

(110) Project [codegen id : 41]
Output [19]: [ss_item_sk#2, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, d_year#57, d_year#60, hd_income_band_sk#72, hd_income_band_sk#75, ca_street_number#82, ca_street_name#83, ca_city#84, ca_zip#85, ca_street_number#89, ca_street_name#90, ca_city#91, ca_zip#92]
Input [21]: [ss_item_sk#2, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, c_current_addr_sk#52, d_year#57, d_year#60, hd_income_band_sk#72, hd_income_band_sk#75, ca_street_number#82, ca_street_name#83, ca_city#84, ca_zip#85, ca_address_sk#88, ca_street_number#89, ca_street_name#90, ca_city#91, ca_zip#92]

(111) Scan parquet default.income_band
Output [1]: [ib_income_band_sk#93]
Batched: true
Location [not included in comparison]/{warehouse_dir}/income_band]
PushedFilters: [IsNotNull(ib_income_band_sk)]
ReadSchema: struct<ib_income_band_sk:int>

(112) ColumnarToRow [codegen id : 38]
Input [1]: [ib_income_band_sk#93]

(113) Filter [codegen id : 38]
Input [1]: [ib_income_band_sk#93]
Condition : isnotnull(ib_income_band_sk#93)

(114) BroadcastExchange
Input [1]: [ib_income_band_sk#93]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#94]

(115) BroadcastHashJoin [codegen id : 41]
Left keys [1]: [hd_income_band_sk#72]
Right keys [1]: [ib_income_band_sk#93]
Join condition: None

(116) Project [codegen id : 41]
Output [18]: [ss_item_sk#2, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, d_year#57, d_year#60, hd_income_band_sk#75, ca_street_number#82, ca_street_name#83, ca_city#84, ca_zip#85, ca_street_number#89, ca_street_name#90, ca_city#91, ca_zip#92]
Input [20]: [ss_item_sk#2, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, d_year#57, d_year#60, hd_income_band_sk#72, hd_income_band_sk#75, ca_street_number#82, ca_street_name#83, ca_city#84, ca_zip#85, ca_street_number#89, ca_street_name#90, ca_city#91, ca_zip#92, ib_income_band_sk#93]

(117) ReusedExchange [Reuses operator id: 114]
Output [1]: [ib_income_band_sk#95]

(118) BroadcastHashJoin [codegen id : 41]
Left keys [1]: [hd_income_band_sk#75]
Right keys [1]: [ib_income_band_sk#95]
Join condition: None

(119) Project [codegen id : 41]
Output [17]: [ss_item_sk#2, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, d_year#57, d_year#60, ca_street_number#82, ca_street_name#83, ca_city#84, ca_zip#85, ca_street_number#89, ca_street_name#90, ca_city#91, ca_zip#92]
Input [19]: [ss_item_sk#2, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, d_year#57, d_year#60, hd_income_band_sk#75, ca_street_number#82, ca_street_name#83, ca_city#84, ca_zip#85, ca_street_number#89, ca_street_name#90, ca_city#91, ca_zip#92, ib_income_band_sk#95]

(120) Scan parquet default.item
Output [4]: [i_item_sk#96, i_current_price#97, i_color#98, i_product_name#99]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,64.00), LessThanOrEqual(i_current_price,74.00), GreaterThanOrEqual(i_current_price,65.00), LessThanOrEqual(i_current_price,79.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_color:string,i_product_name:string>

(121) ColumnarToRow [codegen id : 40]
Input [4]: [i_item_sk#96, i_current_price#97, i_color#98, i_product_name#99]

(122) Filter [codegen id : 40]
Input [4]: [i_item_sk#96, i_current_price#97, i_color#98, i_product_name#99]
Condition : ((((((isnotnull(i_current_price#97) AND staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_color#98, 20, false, true) IN (purple              ,burlywood           ,indian              ,spring              ,floral              ,medium              )) AND (i_current_price#97 >= 64.00)) AND (i_current_price#97 <= 74.00)) AND (i_current_price#97 >= 65.00)) AND (i_current_price#97 <= 79.00)) AND isnotnull(i_item_sk#96))

(123) Project [codegen id : 40]
Output [2]: [i_item_sk#96, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_product_name#99, 50, false, true) AS i_product_name#100]
Input [4]: [i_item_sk#96, i_current_price#97, i_color#98, i_product_name#99]

(124) BroadcastExchange
Input [2]: [i_item_sk#96, i_product_name#100]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#101]

(125) BroadcastHashJoin [codegen id : 41]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#96]
Join condition: None

(126) Project [codegen id : 41]
Output [18]: [ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, d_year#57, d_year#60, s_store_name#45, s_zip#46, ca_street_number#82, ca_street_name#83, ca_city#84, ca_zip#85, ca_street_number#89, ca_street_name#90, ca_city#91, ca_zip#92, i_item_sk#96, i_product_name#100]
Input [19]: [ss_item_sk#2, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#45, s_zip#46, d_year#57, d_year#60, ca_street_number#82, ca_street_name#83, ca_city#84, ca_zip#85, ca_street_number#89, ca_street_name#90, ca_city#91, ca_zip#92, i_item_sk#96, i_product_name#100]

(127) HashAggregate [codegen id : 41]
Input [18]: [ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, d_year#57, d_year#60, s_store_name#45, s_zip#46, ca_street_number#82, ca_street_name#83, ca_city#84, ca_zip#85, ca_street_number#89, ca_street_name#90, ca_city#91, ca_zip#92, i_item_sk#96, i_product_name#100]
Keys [15]: [i_product_name#100, i_item_sk#96, s_store_name#45, s_zip#46, ca_street_number#82, ca_street_name#83, ca_city#84, ca_zip#85, ca_street_number#89, ca_street_name#90, ca_city#91, ca_zip#92, d_year#40, d_year#57, d_year#60]
Functions [4]: [partial_count(1), partial_sum(UnscaledValue(ss_wholesale_cost#10)), partial_sum(UnscaledValue(ss_list_price#11)), partial_sum(UnscaledValue(ss_coupon_amt#12))]
Aggregate Attributes [4]: [count#102, sum#103, sum#104, sum#105]
Results [19]: [i_product_name#100, i_item_sk#96, s_store_name#45, s_zip#46, ca_street_number#82, ca_street_name#83, ca_city#84, ca_zip#85, ca_street_number#89, ca_street_name#90, ca_city#91, ca_zip#92, d_year#40, d_year#57, d_year#60, count#106, sum#107, sum#108, sum#109]

(128) Exchange
Input [19]: [i_product_name#100, i_item_sk#96, s_store_name#45, s_zip#46, ca_street_number#82, ca_street_name#83, ca_city#84, ca_zip#85, ca_street_number#89, ca_street_name#90, ca_city#91, ca_zip#92, d_year#40, d_year#57, d_year#60, count#106, sum#107, sum#108, sum#109]
Arguments: hashpartitioning(i_product_name#100, i_item_sk#96, s_store_name#45, s_zip#46, ca_street_number#82, ca_street_name#83, ca_city#84, ca_zip#85, ca_street_number#89, ca_street_name#90, ca_city#91, ca_zip#92, d_year#40, d_year#57, d_year#60, 5), ENSURE_REQUIREMENTS, [id=#110]

(129) HashAggregate [codegen id : 42]
Input [19]: [i_product_name#100, i_item_sk#96, s_store_name#45, s_zip#46, ca_street_number#82, ca_street_name#83, ca_city#84, ca_zip#85, ca_street_number#89, ca_street_name#90, ca_city#91, ca_zip#92, d_year#40, d_year#57, d_year#60, count#106, sum#107, sum#108, sum#109]
Keys [15]: [i_product_name#100, i_item_sk#96, s_store_name#45, s_zip#46, ca_street_number#82, ca_street_name#83, ca_city#84, ca_zip#85, ca_street_number#89, ca_street_name#90, ca_city#91, ca_zip#92, d_year#40, d_year#57, d_year#60]
Functions [4]: [count(1), sum(UnscaledValue(ss_wholesale_cost#10)), sum(UnscaledValue(ss_list_price#11)), sum(UnscaledValue(ss_coupon_amt#12))]
Aggregate Attributes [4]: [count(1)#111, sum(UnscaledValue(ss_wholesale_cost#10))#112, sum(UnscaledValue(ss_list_price#11))#113, sum(UnscaledValue(ss_coupon_amt#12))#114]
Results [17]: [i_product_name#100 AS product_name#115, i_item_sk#96 AS item_sk#116, s_store_name#45 AS store_name#117, s_zip#46 AS store_zip#118, ca_street_number#82 AS b_street_number#119, ca_street_name#83 AS b_streen_name#120, ca_city#84 AS b_city#121, ca_zip#85 AS b_zip#122, ca_street_number#89 AS c_street_number#123, ca_street_name#90 AS c_street_name#124, ca_city#91 AS c_city#125, ca_zip#92 AS c_zip#126, d_year#40 AS syear#127, count(1)#111 AS cnt#128, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#10))#112,17,2) AS s1#129, MakeDecimal(sum(UnscaledValue(ss_list_price#11))#113,17,2) AS s2#130, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#12))#114,17,2) AS s3#131]

(130) Exchange
Input [17]: [product_name#115, item_sk#116, store_name#117, store_zip#118, b_street_number#119, b_streen_name#120, b_city#121, b_zip#122, c_street_number#123, c_street_name#124, c_city#125, c_zip#126, syear#127, cnt#128, s1#129, s2#130, s3#131]
Arguments: hashpartitioning(item_sk#116, store_name#117, store_zip#118, 5), ENSURE_REQUIREMENTS, [id=#132]

(131) Sort [codegen id : 43]
Input [17]: [product_name#115, item_sk#116, store_name#117, store_zip#118, b_street_number#119, b_streen_name#120, b_city#121, b_zip#122, c_street_number#123, c_street_name#124, c_city#125, c_zip#126, syear#127, cnt#128, s1#129, s2#130, s3#131]
Arguments: [item_sk#116 ASC NULLS FIRST, store_name#117 ASC NULLS FIRST, store_zip#118 ASC NULLS FIRST], false, 0

(132) ReusedExchange [Reuses operator id: 4]
Output [12]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12]

(133) Sort [codegen id : 45]
Input [12]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12]
Arguments: [cast(ss_item_sk#2 as bigint) ASC NULLS FIRST, cast(ss_ticket_number#9 as bigint) ASC NULLS FIRST], false, 0

(134) ReusedExchange [Reuses operator id: 9]
Output [2]: [sr_item_sk#14, sr_ticket_number#15]

(135) Sort [codegen id : 47]
Input [2]: [sr_item_sk#14, sr_ticket_number#15]
Arguments: [sr_item_sk#14 ASC NULLS FIRST, sr_ticket_number#15 ASC NULLS FIRST], false, 0

(136) SortMergeJoin [codegen id : 56]
Left keys [2]: [cast(ss_item_sk#2 as bigint), cast(ss_ticket_number#9 as bigint)]
Right keys [2]: [sr_item_sk#14, sr_ticket_number#15]
Join condition: None

(137) Project [codegen id : 56]
Output [11]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12]
Input [14]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_ticket_number#9, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, sr_item_sk#14, sr_ticket_number#15]

(138) ReusedExchange [Reuses operator id: 30]
Output [1]: [cs_item_sk#17]

(139) BroadcastHashJoin [codegen id : 56]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [cs_item_sk#17]
Join condition: None

(140) Project [codegen id : 56]
Output [11]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12]
Input [12]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, cs_item_sk#17]

(141) Scan parquet default.date_dim
Output [2]: [d_date_sk#39, d_year#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(142) ColumnarToRow [codegen id : 54]
Input [2]: [d_date_sk#39, d_year#40]

(143) Filter [codegen id : 54]
Input [2]: [d_date_sk#39, d_year#40]
Condition : ((isnotnull(d_year#40) AND (d_year#40 = 2000)) AND isnotnull(d_date_sk#39))

(144) BroadcastExchange
Input [2]: [d_date_sk#39, d_year#40]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#133]

(145) BroadcastHashJoin [codegen id : 56]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#39]
Join condition: None

(146) Project [codegen id : 56]
Output [11]: [ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40]
Input [13]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_date_sk#39, d_year#40]

(147) ReusedExchange [Reuses operator id: 43]
Output [3]: [s_store_sk#42, s_store_name#134, s_zip#135]

(148) BroadcastHashJoin [codegen id : 56]
Left keys [1]: [ss_store_sk#7]
Right keys [1]: [s_store_sk#42]
Join condition: None

(149) Project [codegen id : 56]
Output [12]: [ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135]
Input [14]: [ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_store_sk#7, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_sk#42, s_store_name#134, s_zip#135]

(150) Exchange
Input [12]: [ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135]
Arguments: hashpartitioning(ss_customer_sk#3, 5), ENSURE_REQUIREMENTS, [id=#136]

(151) Sort [codegen id : 57]
Input [12]: [ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135]
Arguments: [ss_customer_sk#3 ASC NULLS FIRST], false, 0

(152) ReusedExchange [Reuses operator id: 51]
Output [6]: [c_customer_sk#49, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, c_first_shipto_date_sk#53, c_first_sales_date_sk#54]

(153) Sort [codegen id : 59]
Input [6]: [c_customer_sk#49, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, c_first_shipto_date_sk#53, c_first_sales_date_sk#54]
Arguments: [c_customer_sk#49 ASC NULLS FIRST], false, 0

(154) SortMergeJoin [codegen id : 62]
Left keys [1]: [ss_customer_sk#3]
Right keys [1]: [c_customer_sk#49]
Join condition: None

(155) Project [codegen id : 62]
Output [16]: [ss_item_sk#2, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, c_first_shipto_date_sk#53, c_first_sales_date_sk#54]
Input [18]: [ss_item_sk#2, ss_customer_sk#3, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, c_customer_sk#49, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, c_first_shipto_date_sk#53, c_first_sales_date_sk#54]

(156) ReusedExchange [Reuses operator id: 58]
Output [2]: [d_date_sk#137, d_year#138]

(157) BroadcastHashJoin [codegen id : 62]
Left keys [1]: [c_first_sales_date_sk#54]
Right keys [1]: [d_date_sk#137]
Join condition: None

(158) Project [codegen id : 62]
Output [16]: [ss_item_sk#2, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, c_first_shipto_date_sk#53, d_year#138]
Input [18]: [ss_item_sk#2, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, c_first_shipto_date_sk#53, c_first_sales_date_sk#54, d_date_sk#137, d_year#138]

(159) ReusedExchange [Reuses operator id: 58]
Output [2]: [d_date_sk#139, d_year#140]

(160) BroadcastHashJoin [codegen id : 62]
Left keys [1]: [c_first_shipto_date_sk#53]
Right keys [1]: [d_date_sk#139]
Join condition: None

(161) Project [codegen id : 62]
Output [16]: [ss_item_sk#2, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, d_year#138, d_year#140]
Input [18]: [ss_item_sk#2, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, c_first_shipto_date_sk#53, d_year#138, d_date_sk#139, d_year#140]

(162) Exchange
Input [16]: [ss_item_sk#2, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, d_year#138, d_year#140]
Arguments: hashpartitioning(ss_cdemo_sk#4, 5), ENSURE_REQUIREMENTS, [id=#141]

(163) Sort [codegen id : 63]
Input [16]: [ss_item_sk#2, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, d_year#138, d_year#140]
Arguments: [ss_cdemo_sk#4 ASC NULLS FIRST], false, 0

(164) ReusedExchange [Reuses operator id: 70]
Output [2]: [cd_demo_sk#62, cd_marital_status#142]

(165) Sort [codegen id : 65]
Input [2]: [cd_demo_sk#62, cd_marital_status#142]
Arguments: [cd_demo_sk#62 ASC NULLS FIRST], false, 0

(166) SortMergeJoin [codegen id : 66]
Left keys [1]: [ss_cdemo_sk#4]
Right keys [1]: [cd_demo_sk#62]
Join condition: None

(167) Project [codegen id : 66]
Output [16]: [ss_item_sk#2, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, d_year#138, d_year#140, cd_marital_status#142]
Input [18]: [ss_item_sk#2, ss_cdemo_sk#4, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, d_year#138, d_year#140, cd_demo_sk#62, cd_marital_status#142]

(168) Exchange
Input [16]: [ss_item_sk#2, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, d_year#138, d_year#140, cd_marital_status#142]
Arguments: hashpartitioning(c_current_cdemo_sk#50, 5), ENSURE_REQUIREMENTS, [id=#143]

(169) Sort [codegen id : 67]
Input [16]: [ss_item_sk#2, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, d_year#138, d_year#140, cd_marital_status#142]
Arguments: [c_current_cdemo_sk#50 ASC NULLS FIRST], false, 0

(170) ReusedExchange [Reuses operator id: 70]
Output [2]: [cd_demo_sk#144, cd_marital_status#145]

(171) Sort [codegen id : 69]
Input [2]: [cd_demo_sk#144, cd_marital_status#145]
Arguments: [cd_demo_sk#144 ASC NULLS FIRST], false, 0

(172) SortMergeJoin [codegen id : 73]
Left keys [1]: [c_current_cdemo_sk#50]
Right keys [1]: [cd_demo_sk#144]
Join condition: NOT (cd_marital_status#142 = cd_marital_status#145)

(173) Project [codegen id : 73]
Output [14]: [ss_item_sk#2, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, c_current_hdemo_sk#51, c_current_addr_sk#52, d_year#138, d_year#140]
Input [18]: [ss_item_sk#2, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, c_current_cdemo_sk#50, c_current_hdemo_sk#51, c_current_addr_sk#52, d_year#138, d_year#140, cd_marital_status#142, cd_demo_sk#144, cd_marital_status#145]

(174) ReusedExchange [Reuses operator id: 83]
Output [1]: [p_promo_sk#69]

(175) BroadcastHashJoin [codegen id : 73]
Left keys [1]: [ss_promo_sk#8]
Right keys [1]: [p_promo_sk#69]
Join condition: None

(176) Project [codegen id : 73]
Output [13]: [ss_item_sk#2, ss_hdemo_sk#5, ss_addr_sk#6, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, c_current_hdemo_sk#51, c_current_addr_sk#52, d_year#138, d_year#140]
Input [15]: [ss_item_sk#2, ss_hdemo_sk#5, ss_addr_sk#6, ss_promo_sk#8, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, c_current_hdemo_sk#51, c_current_addr_sk#52, d_year#138, d_year#140, p_promo_sk#69]

(177) ReusedExchange [Reuses operator id: 89]
Output [2]: [hd_demo_sk#71, hd_income_band_sk#72]

(178) BroadcastHashJoin [codegen id : 73]
Left keys [1]: [ss_hdemo_sk#5]
Right keys [1]: [hd_demo_sk#71]
Join condition: None

(179) Project [codegen id : 73]
Output [13]: [ss_item_sk#2, ss_addr_sk#6, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, c_current_hdemo_sk#51, c_current_addr_sk#52, d_year#138, d_year#140, hd_income_band_sk#72]
Input [15]: [ss_item_sk#2, ss_hdemo_sk#5, ss_addr_sk#6, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, c_current_hdemo_sk#51, c_current_addr_sk#52, d_year#138, d_year#140, hd_demo_sk#71, hd_income_band_sk#72]

(180) ReusedExchange [Reuses operator id: 89]
Output [2]: [hd_demo_sk#146, hd_income_band_sk#147]

(181) BroadcastHashJoin [codegen id : 73]
Left keys [1]: [c_current_hdemo_sk#51]
Right keys [1]: [hd_demo_sk#146]
Join condition: None

(182) Project [codegen id : 73]
Output [13]: [ss_item_sk#2, ss_addr_sk#6, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, c_current_addr_sk#52, d_year#138, d_year#140, hd_income_band_sk#72, hd_income_band_sk#147]
Input [15]: [ss_item_sk#2, ss_addr_sk#6, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, c_current_hdemo_sk#51, c_current_addr_sk#52, d_year#138, d_year#140, hd_income_band_sk#72, hd_demo_sk#146, hd_income_band_sk#147]

(183) Exchange
Input [13]: [ss_item_sk#2, ss_addr_sk#6, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, c_current_addr_sk#52, d_year#138, d_year#140, hd_income_band_sk#72, hd_income_band_sk#147]
Arguments: hashpartitioning(ss_addr_sk#6, 5), ENSURE_REQUIREMENTS, [id=#148]

(184) Sort [codegen id : 74]
Input [13]: [ss_item_sk#2, ss_addr_sk#6, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, c_current_addr_sk#52, d_year#138, d_year#140, hd_income_band_sk#72, hd_income_band_sk#147]
Arguments: [ss_addr_sk#6 ASC NULLS FIRST], false, 0

(185) ReusedExchange [Reuses operator id: 101]
Output [5]: [ca_address_sk#77, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152]

(186) Sort [codegen id : 76]
Input [5]: [ca_address_sk#77, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152]
Arguments: [ca_address_sk#77 ASC NULLS FIRST], false, 0

(187) SortMergeJoin [codegen id : 77]
Left keys [1]: [ss_addr_sk#6]
Right keys [1]: [ca_address_sk#77]
Join condition: None

(188) Project [codegen id : 77]
Output [16]: [ss_item_sk#2, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, c_current_addr_sk#52, d_year#138, d_year#140, hd_income_band_sk#72, hd_income_band_sk#147, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152]
Input [18]: [ss_item_sk#2, ss_addr_sk#6, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, c_current_addr_sk#52, d_year#138, d_year#140, hd_income_band_sk#72, hd_income_band_sk#147, ca_address_sk#77, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152]

(189) Exchange
Input [16]: [ss_item_sk#2, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, c_current_addr_sk#52, d_year#138, d_year#140, hd_income_band_sk#72, hd_income_band_sk#147, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152]
Arguments: hashpartitioning(c_current_addr_sk#52, 5), ENSURE_REQUIREMENTS, [id=#153]

(190) Sort [codegen id : 78]
Input [16]: [ss_item_sk#2, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, c_current_addr_sk#52, d_year#138, d_year#140, hd_income_band_sk#72, hd_income_band_sk#147, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152]
Arguments: [c_current_addr_sk#52 ASC NULLS FIRST], false, 0

(191) ReusedExchange [Reuses operator id: 101]
Output [5]: [ca_address_sk#154, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158]

(192) Sort [codegen id : 80]
Input [5]: [ca_address_sk#154, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158]
Arguments: [ca_address_sk#154 ASC NULLS FIRST], false, 0

(193) SortMergeJoin [codegen id : 84]
Left keys [1]: [c_current_addr_sk#52]
Right keys [1]: [ca_address_sk#154]
Join condition: None

(194) Project [codegen id : 84]
Output [19]: [ss_item_sk#2, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, d_year#138, d_year#140, hd_income_band_sk#72, hd_income_band_sk#147, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158]
Input [21]: [ss_item_sk#2, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, c_current_addr_sk#52, d_year#138, d_year#140, hd_income_band_sk#72, hd_income_band_sk#147, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_address_sk#154, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158]

(195) ReusedExchange [Reuses operator id: 114]
Output [1]: [ib_income_band_sk#93]

(196) BroadcastHashJoin [codegen id : 84]
Left keys [1]: [hd_income_band_sk#72]
Right keys [1]: [ib_income_band_sk#93]
Join condition: None

(197) Project [codegen id : 84]
Output [18]: [ss_item_sk#2, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, d_year#138, d_year#140, hd_income_band_sk#147, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158]
Input [20]: [ss_item_sk#2, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, d_year#138, d_year#140, hd_income_band_sk#72, hd_income_band_sk#147, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158, ib_income_band_sk#93]

(198) ReusedExchange [Reuses operator id: 114]
Output [1]: [ib_income_band_sk#159]

(199) BroadcastHashJoin [codegen id : 84]
Left keys [1]: [hd_income_band_sk#147]
Right keys [1]: [ib_income_band_sk#159]
Join condition: None

(200) Project [codegen id : 84]
Output [17]: [ss_item_sk#2, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, d_year#138, d_year#140, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158]
Input [19]: [ss_item_sk#2, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, d_year#138, d_year#140, hd_income_band_sk#147, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158, ib_income_band_sk#159]

(201) ReusedExchange [Reuses operator id: 124]
Output [2]: [i_item_sk#96, i_product_name#160]

(202) BroadcastHashJoin [codegen id : 84]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#96]
Join condition: None

(203) Project [codegen id : 84]
Output [18]: [ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, d_year#138, d_year#140, s_store_name#134, s_zip#135, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158, i_item_sk#96, i_product_name#160]
Input [19]: [ss_item_sk#2, ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, s_store_name#134, s_zip#135, d_year#138, d_year#140, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158, i_item_sk#96, i_product_name#160]

(204) HashAggregate [codegen id : 84]
Input [18]: [ss_wholesale_cost#10, ss_list_price#11, ss_coupon_amt#12, d_year#40, d_year#138, d_year#140, s_store_name#134, s_zip#135, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158, i_item_sk#96, i_product_name#160]
Keys [15]: [i_product_name#160, i_item_sk#96, s_store_name#134, s_zip#135, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158, d_year#40, d_year#138, d_year#140]
Functions [4]: [partial_count(1), partial_sum(UnscaledValue(ss_wholesale_cost#10)), partial_sum(UnscaledValue(ss_list_price#11)), partial_sum(UnscaledValue(ss_coupon_amt#12))]
Aggregate Attributes [4]: [count#161, sum#162, sum#163, sum#164]
Results [19]: [i_product_name#160, i_item_sk#96, s_store_name#134, s_zip#135, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158, d_year#40, d_year#138, d_year#140, count#165, sum#166, sum#167, sum#168]

(205) Exchange
Input [19]: [i_product_name#160, i_item_sk#96, s_store_name#134, s_zip#135, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158, d_year#40, d_year#138, d_year#140, count#165, sum#166, sum#167, sum#168]
Arguments: hashpartitioning(i_product_name#160, i_item_sk#96, s_store_name#134, s_zip#135, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158, d_year#40, d_year#138, d_year#140, 5), ENSURE_REQUIREMENTS, [id=#169]

(206) HashAggregate [codegen id : 85]
Input [19]: [i_product_name#160, i_item_sk#96, s_store_name#134, s_zip#135, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158, d_year#40, d_year#138, d_year#140, count#165, sum#166, sum#167, sum#168]
Keys [15]: [i_product_name#160, i_item_sk#96, s_store_name#134, s_zip#135, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_street_number#155, ca_street_name#156, ca_city#157, ca_zip#158, d_year#40, d_year#138, d_year#140]
Functions [4]: [count(1), sum(UnscaledValue(ss_wholesale_cost#10)), sum(UnscaledValue(ss_list_price#11)), sum(UnscaledValue(ss_coupon_amt#12))]
Aggregate Attributes [4]: [count(1)#170, sum(UnscaledValue(ss_wholesale_cost#10))#171, sum(UnscaledValue(ss_list_price#11))#172, sum(UnscaledValue(ss_coupon_amt#12))#173]
Results [8]: [i_item_sk#96 AS item_sk#174, s_store_name#134 AS store_name#175, s_zip#135 AS store_zip#176, d_year#40 AS syear#177, count(1)#170 AS cnt#178, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#10))#171,17,2) AS s1#179, MakeDecimal(sum(UnscaledValue(ss_list_price#11))#172,17,2) AS s2#180, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#12))#173,17,2) AS s3#181]

(207) Exchange
Input [8]: [item_sk#174, store_name#175, store_zip#176, syear#177, cnt#178, s1#179, s2#180, s3#181]
Arguments: hashpartitioning(item_sk#174, store_name#175, store_zip#176, 5), ENSURE_REQUIREMENTS, [id=#182]

(208) Sort [codegen id : 86]
Input [8]: [item_sk#174, store_name#175, store_zip#176, syear#177, cnt#178, s1#179, s2#180, s3#181]
Arguments: [item_sk#174 ASC NULLS FIRST, store_name#175 ASC NULLS FIRST, store_zip#176 ASC NULLS FIRST], false, 0

(209) SortMergeJoin [codegen id : 87]
Left keys [3]: [item_sk#116, store_name#117, store_zip#118]
Right keys [3]: [item_sk#174, store_name#175, store_zip#176]
Join condition: (cnt#178 <= cnt#128)

(210) Project [codegen id : 87]
Output [21]: [product_name#115, store_name#117, store_zip#118, b_street_number#119, b_streen_name#120, b_city#121, b_zip#122, c_street_number#123, c_street_name#124, c_city#125, c_zip#126, syear#127, cnt#128, s1#129, s2#130, s3#131, s1#179, s2#180, s3#181, syear#177, cnt#178]
Input [25]: [product_name#115, item_sk#116, store_name#117, store_zip#118, b_street_number#119, b_streen_name#120, b_city#121, b_zip#122, c_street_number#123, c_street_name#124, c_city#125, c_zip#126, syear#127, cnt#128, s1#129, s2#130, s3#131, item_sk#174, store_name#175, store_zip#176, syear#177, cnt#178, s1#179, s2#180, s3#181]

(211) Exchange
Input [21]: [product_name#115, store_name#117, store_zip#118, b_street_number#119, b_streen_name#120, b_city#121, b_zip#122, c_street_number#123, c_street_name#124, c_city#125, c_zip#126, syear#127, cnt#128, s1#129, s2#130, s3#131, s1#179, s2#180, s3#181, syear#177, cnt#178]
Arguments: rangepartitioning(product_name#115 ASC NULLS FIRST, store_name#117 ASC NULLS FIRST, cnt#178 ASC NULLS FIRST, s1#129 ASC NULLS FIRST, s1#179 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [id=#183]

(212) Sort [codegen id : 88]
Input [21]: [product_name#115, store_name#117, store_zip#118, b_street_number#119, b_streen_name#120, b_city#121, b_zip#122, c_street_number#123, c_street_name#124, c_city#125, c_zip#126, syear#127, cnt#128, s1#129, s2#130, s3#131, s1#179, s2#180, s3#181, syear#177, cnt#178]
Arguments: [product_name#115 ASC NULLS FIRST, store_name#117 ASC NULLS FIRST, cnt#178 ASC NULLS FIRST, s1#129 ASC NULLS FIRST, s1#179 ASC NULLS FIRST], true, 0

