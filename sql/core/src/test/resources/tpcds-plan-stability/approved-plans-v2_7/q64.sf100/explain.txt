== Physical Plan ==
* Sort (207)
+- Exchange (206)
   +- * Project (205)
      +- * SortMergeJoin Inner (204)
         :- * Sort (127)
         :  +- Exchange (126)
         :     +- * HashAggregate (125)
         :        +- Exchange (124)
         :           +- * HashAggregate (123)
         :              +- * Project (122)
         :                 +- * BroadcastHashJoin Inner BuildRight (121)
         :                    :- * Project (115)
         :                    :  +- * BroadcastHashJoin Inner BuildRight (114)
         :                    :     :- * Project (112)
         :                    :     :  +- * BroadcastHashJoin Inner BuildRight (111)
         :                    :     :     :- * Project (106)
         :                    :     :     :  +- * SortMergeJoin Inner (105)
         :                    :     :     :     :- * Sort (102)
         :                    :     :     :     :  +- Exchange (101)
         :                    :     :     :     :     +- * Project (100)
         :                    :     :     :     :        +- * SortMergeJoin Inner (99)
         :                    :     :     :     :           :- * Sort (93)
         :                    :     :     :     :           :  +- Exchange (92)
         :                    :     :     :     :           :     +- * Project (91)
         :                    :     :     :     :           :        +- * BroadcastHashJoin Inner BuildRight (90)
         :                    :     :     :     :           :           :- * Project (88)
         :                    :     :     :     :           :           :  +- * BroadcastHashJoin Inner BuildRight (87)
         :                    :     :     :     :           :           :     :- * Project (82)
         :                    :     :     :     :           :           :     :  +- * BroadcastHashJoin Inner BuildRight (81)
         :                    :     :     :     :           :           :     :     :- * Project (76)
         :                    :     :     :     :           :           :     :     :  +- * SortMergeJoin Inner (75)
         :                    :     :     :     :           :           :     :     :     :- * Sort (72)
         :                    :     :     :     :           :           :     :     :     :  +- Exchange (71)
         :                    :     :     :     :           :           :     :     :     :     +- * Project (70)
         :                    :     :     :     :           :           :     :     :     :        +- * SortMergeJoin Inner (69)
         :                    :     :     :     :           :           :     :     :     :           :- * Sort (63)
         :                    :     :     :     :           :           :     :     :     :           :  +- Exchange (62)
         :                    :     :     :     :           :           :     :     :     :           :     +- * Project (61)
         :                    :     :     :     :           :           :     :     :     :           :        +- * BroadcastHashJoin Inner BuildRight (60)
         :                    :     :     :     :           :           :     :     :     :           :           :- * Project (58)
         :                    :     :     :     :           :           :     :     :     :           :           :  +- * BroadcastHashJoin Inner BuildRight (57)
         :                    :     :     :     :           :           :     :     :     :           :           :     :- * Project (52)
         :                    :     :     :     :           :           :     :     :     :           :           :     :  +- * SortMergeJoin Inner (51)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :- * Sort (45)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :  +- Exchange (44)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :     +- * Project (43)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :        +- * BroadcastHashJoin Inner BuildRight (42)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :- * Project (37)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :  +- * BroadcastHashJoin Inner BuildRight (36)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :- * Project (34)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :  +- * SortMergeJoin Inner (33)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :- * Sort (26)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :  +- Exchange (25)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     +- * BroadcastHashJoin LeftSemi BuildRight (24)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :        :- * Filter (3)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :        :  +- * ColumnarToRow (2)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :        :     +- Scan parquet spark_catalog.default.store_sales (1)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :        +- BroadcastExchange (23)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :           +- * Project (22)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :              +- * Filter (21)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :                 +- * HashAggregate (20)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :                    +- Exchange (19)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :                       +- * HashAggregate (18)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :                          +- * Project (17)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :                             +- * SortMergeJoin Inner (16)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :                                :- * Sort (9)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :                                :  +- Exchange (8)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :                                :     +- * Project (7)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :                                :        +- * Filter (6)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :                                :           +- * ColumnarToRow (5)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :                                :              +- Scan parquet spark_catalog.default.catalog_sales (4)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :                                +- * Sort (15)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :                                   +- Exchange (14)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :                                      +- * Project (13)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :                                         +- * Filter (12)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :                                            +- * ColumnarToRow (11)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :                                               +- Scan parquet spark_catalog.default.catalog_returns (10)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     +- * Sort (32)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :        +- Exchange (31)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :           +- * Project (30)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :              +- * Filter (29)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                 +- * ColumnarToRow (28)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                    +- Scan parquet spark_catalog.default.store_returns (27)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     +- ReusedExchange (35)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           +- BroadcastExchange (41)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :              +- * Filter (40)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :                 +- * ColumnarToRow (39)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :                    +- Scan parquet spark_catalog.default.store (38)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     +- * Sort (50)
         :                    :     :     :     :           :           :     :     :     :           :           :     :        +- Exchange (49)
         :                    :     :     :     :           :           :     :     :     :           :           :     :           +- * Filter (48)
         :                    :     :     :     :           :           :     :     :     :           :           :     :              +- * ColumnarToRow (47)
         :                    :     :     :     :           :           :     :     :     :           :           :     :                 +- Scan parquet spark_catalog.default.customer (46)
         :                    :     :     :     :           :           :     :     :     :           :           :     +- BroadcastExchange (56)
         :                    :     :     :     :           :           :     :     :     :           :           :        +- * Filter (55)
         :                    :     :     :     :           :           :     :     :     :           :           :           +- * ColumnarToRow (54)
         :                    :     :     :     :           :           :     :     :     :           :           :              +- Scan parquet spark_catalog.default.date_dim (53)
         :                    :     :     :     :           :           :     :     :     :           :           +- ReusedExchange (59)
         :                    :     :     :     :           :           :     :     :     :           +- * Sort (68)
         :                    :     :     :     :           :           :     :     :     :              +- Exchange (67)
         :                    :     :     :     :           :           :     :     :     :                 +- * Filter (66)
         :                    :     :     :     :           :           :     :     :     :                    +- * ColumnarToRow (65)
         :                    :     :     :     :           :           :     :     :     :                       +- Scan parquet spark_catalog.default.customer_demographics (64)
         :                    :     :     :     :           :           :     :     :     +- * Sort (74)
         :                    :     :     :     :           :           :     :     :        +- ReusedExchange (73)
         :                    :     :     :     :           :           :     :     +- BroadcastExchange (80)
         :                    :     :     :     :           :           :     :        +- * Filter (79)
         :                    :     :     :     :           :           :     :           +- * ColumnarToRow (78)
         :                    :     :     :     :           :           :     :              +- Scan parquet spark_catalog.default.promotion (77)
         :                    :     :     :     :           :           :     +- BroadcastExchange (86)
         :                    :     :     :     :           :           :        +- * Filter (85)
         :                    :     :     :     :           :           :           +- * ColumnarToRow (84)
         :                    :     :     :     :           :           :              +- Scan parquet spark_catalog.default.household_demographics (83)
         :                    :     :     :     :           :           +- ReusedExchange (89)
         :                    :     :     :     :           +- * Sort (98)
         :                    :     :     :     :              +- Exchange (97)
         :                    :     :     :     :                 +- * Filter (96)
         :                    :     :     :     :                    +- * ColumnarToRow (95)
         :                    :     :     :     :                       +- Scan parquet spark_catalog.default.customer_address (94)
         :                    :     :     :     +- * Sort (104)
         :                    :     :     :        +- ReusedExchange (103)
         :                    :     :     +- BroadcastExchange (110)
         :                    :     :        +- * Filter (109)
         :                    :     :           +- * ColumnarToRow (108)
         :                    :     :              +- Scan parquet spark_catalog.default.income_band (107)
         :                    :     +- ReusedExchange (113)
         :                    +- BroadcastExchange (120)
         :                       +- * Project (119)
         :                          +- * Filter (118)
         :                             +- * ColumnarToRow (117)
         :                                +- Scan parquet spark_catalog.default.item (116)
         +- * Sort (203)
            +- Exchange (202)
               +- * HashAggregate (201)
                  +- Exchange (200)
                     +- * HashAggregate (199)
                        +- * Project (198)
                           +- * BroadcastHashJoin Inner BuildRight (197)
                              :- * Project (195)
                              :  +- * BroadcastHashJoin Inner BuildRight (194)
                              :     :- * Project (192)
                              :     :  +- * BroadcastHashJoin Inner BuildRight (191)
                              :     :     :- * Project (189)
                              :     :     :  +- * SortMergeJoin Inner (188)
                              :     :     :     :- * Sort (185)
                              :     :     :     :  +- Exchange (184)
                              :     :     :     :     +- * Project (183)
                              :     :     :     :        +- * SortMergeJoin Inner (182)
                              :     :     :     :           :- * Sort (179)
                              :     :     :     :           :  +- Exchange (178)
                              :     :     :     :           :     +- * Project (177)
                              :     :     :     :           :        +- * BroadcastHashJoin Inner BuildRight (176)
                              :     :     :     :           :           :- * Project (174)
                              :     :     :     :           :           :  +- * BroadcastHashJoin Inner BuildRight (173)
                              :     :     :     :           :           :     :- * Project (171)
                              :     :     :     :           :           :     :  +- * BroadcastHashJoin Inner BuildRight (170)
                              :     :     :     :           :           :     :     :- * Project (168)
                              :     :     :     :           :           :     :     :  +- * SortMergeJoin Inner (167)
                              :     :     :     :           :           :     :     :     :- * Sort (164)
                              :     :     :     :           :           :     :     :     :  +- Exchange (163)
                              :     :     :     :           :           :     :     :     :     +- * Project (162)
                              :     :     :     :           :           :     :     :     :        +- * SortMergeJoin Inner (161)
                              :     :     :     :           :           :     :     :     :           :- * Sort (158)
                              :     :     :     :           :           :     :     :     :           :  +- Exchange (157)
                              :     :     :     :           :           :     :     :     :           :     +- * Project (156)
                              :     :     :     :           :           :     :     :     :           :        +- * BroadcastHashJoin Inner BuildRight (155)
                              :     :     :     :           :           :     :     :     :           :           :- * Project (153)
                              :     :     :     :           :           :     :     :     :           :           :  +- * BroadcastHashJoin Inner BuildRight (152)
                              :     :     :     :           :           :     :     :     :           :           :     :- * Project (150)
                              :     :     :     :           :           :     :     :     :           :           :     :  +- * SortMergeJoin Inner (149)
                              :     :     :     :           :           :     :     :     :           :           :     :     :- * Sort (146)
                              :     :     :     :           :           :     :     :     :           :           :     :     :  +- Exchange (145)
                              :     :     :     :           :           :     :     :     :           :           :     :     :     +- * Project (144)
                              :     :     :     :           :           :     :     :     :           :           :     :     :        +- * BroadcastHashJoin Inner BuildRight (143)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :- * Project (141)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :  +- * BroadcastHashJoin Inner BuildRight (140)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :- * Project (138)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :  +- * SortMergeJoin Inner (137)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :- * Sort (134)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :  +- Exchange (133)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     +- * BroadcastHashJoin LeftSemi BuildRight (132)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :        :- * Filter (130)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :        :  +- * ColumnarToRow (129)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :        :     +- Scan parquet spark_catalog.default.store_sales (128)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :        +- ReusedExchange (131)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     +- * Sort (136)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :        +- ReusedExchange (135)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     +- ReusedExchange (139)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           +- ReusedExchange (142)
                              :     :     :     :           :           :     :     :     :           :           :     :     +- * Sort (148)
                              :     :     :     :           :           :     :     :     :           :           :     :        +- ReusedExchange (147)
                              :     :     :     :           :           :     :     :     :           :           :     +- ReusedExchange (151)
                              :     :     :     :           :           :     :     :     :           :           +- ReusedExchange (154)
                              :     :     :     :           :           :     :     :     :           +- * Sort (160)
                              :     :     :     :           :           :     :     :     :              +- ReusedExchange (159)
                              :     :     :     :           :           :     :     :     +- * Sort (166)
                              :     :     :     :           :           :     :     :        +- ReusedExchange (165)
                              :     :     :     :           :           :     :     +- ReusedExchange (169)
                              :     :     :     :           :           :     +- ReusedExchange (172)
                              :     :     :     :           :           +- ReusedExchange (175)
                              :     :     :     :           +- * Sort (181)
                              :     :     :     :              +- ReusedExchange (180)
                              :     :     :     +- * Sort (187)
                              :     :     :        +- ReusedExchange (186)
                              :     :     +- ReusedExchange (190)
                              :     +- ReusedExchange (193)
                              +- ReusedExchange (196)


(1) Scan parquet spark_catalog.default.store_sales
Output [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_cdemo_sk), IsNotNull(ss_promo_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 7]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]

(3) Filter [codegen id : 7]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Condition : ((((((((isnotnull(ss_item_sk#1) AND isnotnull(ss_ticket_number#8)) AND isnotnull(ss_store_sk#6)) AND isnotnull(ss_customer_sk#2)) AND isnotnull(ss_cdemo_sk#3)) AND isnotnull(ss_promo_sk#7)) AND isnotnull(ss_hdemo_sk#4)) AND isnotnull(ss_addr_sk#5)) AND might_contain(Subquery scalar-subquery#14, [id=#15], xxhash64(ss_item_sk#1, 42)))

(4) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_item_sk#16, cs_order_number#17, cs_ext_list_price#18, cs_sold_date_sk#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_order_number)]
ReadSchema: struct<cs_item_sk:int,cs_order_number:int,cs_ext_list_price:decimal(7,2)>

(5) ColumnarToRow [codegen id : 1]
Input [4]: [cs_item_sk#16, cs_order_number#17, cs_ext_list_price#18, cs_sold_date_sk#19]

(6) Filter [codegen id : 1]
Input [4]: [cs_item_sk#16, cs_order_number#17, cs_ext_list_price#18, cs_sold_date_sk#19]
Condition : (isnotnull(cs_item_sk#16) AND isnotnull(cs_order_number#17))

(7) Project [codegen id : 1]
Output [3]: [cs_item_sk#16, cs_order_number#17, cs_ext_list_price#18]
Input [4]: [cs_item_sk#16, cs_order_number#17, cs_ext_list_price#18, cs_sold_date_sk#19]

(8) Exchange
Input [3]: [cs_item_sk#16, cs_order_number#17, cs_ext_list_price#18]
Arguments: hashpartitioning(cs_item_sk#16, cs_order_number#17, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(9) Sort [codegen id : 2]
Input [3]: [cs_item_sk#16, cs_order_number#17, cs_ext_list_price#18]
Arguments: [cs_item_sk#16 ASC NULLS FIRST, cs_order_number#17 ASC NULLS FIRST], false, 0

(10) Scan parquet spark_catalog.default.catalog_returns
Output [6]: [cr_item_sk#20, cr_order_number#21, cr_refunded_cash#22, cr_reversed_charge#23, cr_store_credit#24, cr_returned_date_sk#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_refunded_cash:decimal(7,2),cr_reversed_charge:decimal(7,2),cr_store_credit:decimal(7,2)>

(11) ColumnarToRow [codegen id : 3]
Input [6]: [cr_item_sk#20, cr_order_number#21, cr_refunded_cash#22, cr_reversed_charge#23, cr_store_credit#24, cr_returned_date_sk#25]

(12) Filter [codegen id : 3]
Input [6]: [cr_item_sk#20, cr_order_number#21, cr_refunded_cash#22, cr_reversed_charge#23, cr_store_credit#24, cr_returned_date_sk#25]
Condition : (isnotnull(cr_item_sk#20) AND isnotnull(cr_order_number#21))

(13) Project [codegen id : 3]
Output [5]: [cr_item_sk#20, cr_order_number#21, cr_refunded_cash#22, cr_reversed_charge#23, cr_store_credit#24]
Input [6]: [cr_item_sk#20, cr_order_number#21, cr_refunded_cash#22, cr_reversed_charge#23, cr_store_credit#24, cr_returned_date_sk#25]

(14) Exchange
Input [5]: [cr_item_sk#20, cr_order_number#21, cr_refunded_cash#22, cr_reversed_charge#23, cr_store_credit#24]
Arguments: hashpartitioning(cr_item_sk#20, cr_order_number#21, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(15) Sort [codegen id : 4]
Input [5]: [cr_item_sk#20, cr_order_number#21, cr_refunded_cash#22, cr_reversed_charge#23, cr_store_credit#24]
Arguments: [cr_item_sk#20 ASC NULLS FIRST, cr_order_number#21 ASC NULLS FIRST], false, 0

(16) SortMergeJoin [codegen id : 5]
Left keys [2]: [cs_item_sk#16, cs_order_number#17]
Right keys [2]: [cr_item_sk#20, cr_order_number#21]
Join condition: None

(17) Project [codegen id : 5]
Output [5]: [cs_item_sk#16, cs_ext_list_price#18, cr_refunded_cash#22, cr_reversed_charge#23, cr_store_credit#24]
Input [8]: [cs_item_sk#16, cs_order_number#17, cs_ext_list_price#18, cr_item_sk#20, cr_order_number#21, cr_refunded_cash#22, cr_reversed_charge#23, cr_store_credit#24]

(18) HashAggregate [codegen id : 5]
Input [5]: [cs_item_sk#16, cs_ext_list_price#18, cr_refunded_cash#22, cr_reversed_charge#23, cr_store_credit#24]
Keys [1]: [cs_item_sk#16]
Functions [2]: [partial_sum(UnscaledValue(cs_ext_list_price#18)), partial_sum(((cr_refunded_cash#22 + cr_reversed_charge#23) + cr_store_credit#24))]
Aggregate Attributes [3]: [sum#26, sum#27, isEmpty#28]
Results [4]: [cs_item_sk#16, sum#29, sum#30, isEmpty#31]

(19) Exchange
Input [4]: [cs_item_sk#16, sum#29, sum#30, isEmpty#31]
Arguments: hashpartitioning(cs_item_sk#16, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(20) HashAggregate [codegen id : 6]
Input [4]: [cs_item_sk#16, sum#29, sum#30, isEmpty#31]
Keys [1]: [cs_item_sk#16]
Functions [2]: [sum(UnscaledValue(cs_ext_list_price#18)), sum(((cr_refunded_cash#22 + cr_reversed_charge#23) + cr_store_credit#24))]
Aggregate Attributes [2]: [sum(UnscaledValue(cs_ext_list_price#18))#32, sum(((cr_refunded_cash#22 + cr_reversed_charge#23) + cr_store_credit#24))#33]
Results [3]: [cs_item_sk#16, MakeDecimal(sum(UnscaledValue(cs_ext_list_price#18))#32,17,2) AS sale#34, sum(((cr_refunded_cash#22 + cr_reversed_charge#23) + cr_store_credit#24))#33 AS refund#35]

(21) Filter [codegen id : 6]
Input [3]: [cs_item_sk#16, sale#34, refund#35]
Condition : ((isnotnull(sale#34) AND isnotnull(refund#35)) AND (cast(sale#34 as decimal(21,2)) > (2 * refund#35)))

(22) Project [codegen id : 6]
Output [1]: [cs_item_sk#16]
Input [3]: [cs_item_sk#16, sale#34, refund#35]

(23) BroadcastExchange
Input [1]: [cs_item_sk#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(24) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [cs_item_sk#16]
Join condition: None

(25) Exchange
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Arguments: hashpartitioning(ss_item_sk#1, ss_ticket_number#8, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(26) Sort [codegen id : 8]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Arguments: [ss_item_sk#1 ASC NULLS FIRST, ss_ticket_number#8 ASC NULLS FIRST], false, 0

(27) Scan parquet spark_catalog.default.store_returns
Output [3]: [sr_item_sk#36, sr_ticket_number#37, sr_returned_date_sk#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(28) ColumnarToRow [codegen id : 9]
Input [3]: [sr_item_sk#36, sr_ticket_number#37, sr_returned_date_sk#38]

(29) Filter [codegen id : 9]
Input [3]: [sr_item_sk#36, sr_ticket_number#37, sr_returned_date_sk#38]
Condition : (isnotnull(sr_item_sk#36) AND isnotnull(sr_ticket_number#37))

(30) Project [codegen id : 9]
Output [2]: [sr_item_sk#36, sr_ticket_number#37]
Input [3]: [sr_item_sk#36, sr_ticket_number#37, sr_returned_date_sk#38]

(31) Exchange
Input [2]: [sr_item_sk#36, sr_ticket_number#37]
Arguments: hashpartitioning(sr_item_sk#36, sr_ticket_number#37, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(32) Sort [codegen id : 10]
Input [2]: [sr_item_sk#36, sr_ticket_number#37]
Arguments: [sr_item_sk#36 ASC NULLS FIRST, sr_ticket_number#37 ASC NULLS FIRST], false, 0

(33) SortMergeJoin [codegen id : 13]
Left keys [2]: [ss_item_sk#1, ss_ticket_number#8]
Right keys [2]: [sr_item_sk#36, sr_ticket_number#37]
Join condition: None

(34) Project [codegen id : 13]
Output [11]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Input [14]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12, sr_item_sk#36, sr_ticket_number#37]

(35) ReusedExchange [Reuses operator id: 218]
Output [2]: [d_date_sk#39, d_year#40]

(36) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_sold_date_sk#12]
Right keys [1]: [d_date_sk#39]
Join condition: None

(37) Project [codegen id : 13]
Output [11]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40]
Input [13]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12, d_date_sk#39, d_year#40]

(38) Scan parquet spark_catalog.default.store
Output [3]: [s_store_sk#41, s_store_name#42, s_zip#43]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_store_name), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_zip:string>

(39) ColumnarToRow [codegen id : 12]
Input [3]: [s_store_sk#41, s_store_name#42, s_zip#43]

(40) Filter [codegen id : 12]
Input [3]: [s_store_sk#41, s_store_name#42, s_zip#43]
Condition : ((isnotnull(s_store_sk#41) AND isnotnull(s_store_name#42)) AND isnotnull(s_zip#43))

(41) BroadcastExchange
Input [3]: [s_store_sk#41, s_store_name#42, s_zip#43]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=7]

(42) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_store_sk#6]
Right keys [1]: [s_store_sk#41]
Join condition: None

(43) Project [codegen id : 13]
Output [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43]
Input [14]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_sk#41, s_store_name#42, s_zip#43]

(44) Exchange
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43]
Arguments: hashpartitioning(ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(45) Sort [codegen id : 14]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(46) Scan parquet spark_catalog.default.customer
Output [6]: [c_customer_sk#44, c_current_cdemo_sk#45, c_current_hdemo_sk#46, c_current_addr_sk#47, c_first_shipto_date_sk#48, c_first_sales_date_sk#49]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_first_sales_date_sk), IsNotNull(c_first_shipto_date_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_hdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int,c_first_shipto_date_sk:int,c_first_sales_date_sk:int>

(47) ColumnarToRow [codegen id : 15]
Input [6]: [c_customer_sk#44, c_current_cdemo_sk#45, c_current_hdemo_sk#46, c_current_addr_sk#47, c_first_shipto_date_sk#48, c_first_sales_date_sk#49]

(48) Filter [codegen id : 15]
Input [6]: [c_customer_sk#44, c_current_cdemo_sk#45, c_current_hdemo_sk#46, c_current_addr_sk#47, c_first_shipto_date_sk#48, c_first_sales_date_sk#49]
Condition : (((((isnotnull(c_customer_sk#44) AND isnotnull(c_first_sales_date_sk#49)) AND isnotnull(c_first_shipto_date_sk#48)) AND isnotnull(c_current_cdemo_sk#45)) AND isnotnull(c_current_hdemo_sk#46)) AND isnotnull(c_current_addr_sk#47))

(49) Exchange
Input [6]: [c_customer_sk#44, c_current_cdemo_sk#45, c_current_hdemo_sk#46, c_current_addr_sk#47, c_first_shipto_date_sk#48, c_first_sales_date_sk#49]
Arguments: hashpartitioning(c_customer_sk#44, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(50) Sort [codegen id : 16]
Input [6]: [c_customer_sk#44, c_current_cdemo_sk#45, c_current_hdemo_sk#46, c_current_addr_sk#47, c_first_shipto_date_sk#48, c_first_sales_date_sk#49]
Arguments: [c_customer_sk#44 ASC NULLS FIRST], false, 0

(51) SortMergeJoin [codegen id : 19]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#44]
Join condition: None

(52) Project [codegen id : 19]
Output [16]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, c_current_cdemo_sk#45, c_current_hdemo_sk#46, c_current_addr_sk#47, c_first_shipto_date_sk#48, c_first_sales_date_sk#49]
Input [18]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, c_customer_sk#44, c_current_cdemo_sk#45, c_current_hdemo_sk#46, c_current_addr_sk#47, c_first_shipto_date_sk#48, c_first_sales_date_sk#49]

(53) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#50, d_year#51]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(54) ColumnarToRow [codegen id : 17]
Input [2]: [d_date_sk#50, d_year#51]

(55) Filter [codegen id : 17]
Input [2]: [d_date_sk#50, d_year#51]
Condition : isnotnull(d_date_sk#50)

(56) BroadcastExchange
Input [2]: [d_date_sk#50, d_year#51]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=10]

(57) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [c_first_sales_date_sk#49]
Right keys [1]: [d_date_sk#50]
Join condition: None

(58) Project [codegen id : 19]
Output [16]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, c_current_cdemo_sk#45, c_current_hdemo_sk#46, c_current_addr_sk#47, c_first_shipto_date_sk#48, d_year#51]
Input [18]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, c_current_cdemo_sk#45, c_current_hdemo_sk#46, c_current_addr_sk#47, c_first_shipto_date_sk#48, c_first_sales_date_sk#49, d_date_sk#50, d_year#51]

(59) ReusedExchange [Reuses operator id: 56]
Output [2]: [d_date_sk#52, d_year#53]

(60) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [c_first_shipto_date_sk#48]
Right keys [1]: [d_date_sk#52]
Join condition: None

(61) Project [codegen id : 19]
Output [16]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, c_current_cdemo_sk#45, c_current_hdemo_sk#46, c_current_addr_sk#47, d_year#51, d_year#53]
Input [18]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, c_current_cdemo_sk#45, c_current_hdemo_sk#46, c_current_addr_sk#47, c_first_shipto_date_sk#48, d_year#51, d_date_sk#52, d_year#53]

(62) Exchange
Input [16]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, c_current_cdemo_sk#45, c_current_hdemo_sk#46, c_current_addr_sk#47, d_year#51, d_year#53]
Arguments: hashpartitioning(ss_cdemo_sk#3, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(63) Sort [codegen id : 20]
Input [16]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, c_current_cdemo_sk#45, c_current_hdemo_sk#46, c_current_addr_sk#47, d_year#51, d_year#53]
Arguments: [ss_cdemo_sk#3 ASC NULLS FIRST], false, 0

(64) Scan parquet spark_catalog.default.customer_demographics
Output [2]: [cd_demo_sk#54, cd_marital_status#55]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string>

(65) ColumnarToRow [codegen id : 21]
Input [2]: [cd_demo_sk#54, cd_marital_status#55]

(66) Filter [codegen id : 21]
Input [2]: [cd_demo_sk#54, cd_marital_status#55]
Condition : (isnotnull(cd_demo_sk#54) AND isnotnull(cd_marital_status#55))

(67) Exchange
Input [2]: [cd_demo_sk#54, cd_marital_status#55]
Arguments: hashpartitioning(cd_demo_sk#54, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(68) Sort [codegen id : 22]
Input [2]: [cd_demo_sk#54, cd_marital_status#55]
Arguments: [cd_demo_sk#54 ASC NULLS FIRST], false, 0

(69) SortMergeJoin [codegen id : 23]
Left keys [1]: [ss_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#54]
Join condition: None

(70) Project [codegen id : 23]
Output [16]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, c_current_cdemo_sk#45, c_current_hdemo_sk#46, c_current_addr_sk#47, d_year#51, d_year#53, cd_marital_status#55]
Input [18]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, c_current_cdemo_sk#45, c_current_hdemo_sk#46, c_current_addr_sk#47, d_year#51, d_year#53, cd_demo_sk#54, cd_marital_status#55]

(71) Exchange
Input [16]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, c_current_cdemo_sk#45, c_current_hdemo_sk#46, c_current_addr_sk#47, d_year#51, d_year#53, cd_marital_status#55]
Arguments: hashpartitioning(c_current_cdemo_sk#45, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(72) Sort [codegen id : 24]
Input [16]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, c_current_cdemo_sk#45, c_current_hdemo_sk#46, c_current_addr_sk#47, d_year#51, d_year#53, cd_marital_status#55]
Arguments: [c_current_cdemo_sk#45 ASC NULLS FIRST], false, 0

(73) ReusedExchange [Reuses operator id: 67]
Output [2]: [cd_demo_sk#56, cd_marital_status#57]

(74) Sort [codegen id : 26]
Input [2]: [cd_demo_sk#56, cd_marital_status#57]
Arguments: [cd_demo_sk#56 ASC NULLS FIRST], false, 0

(75) SortMergeJoin [codegen id : 30]
Left keys [1]: [c_current_cdemo_sk#45]
Right keys [1]: [cd_demo_sk#56]
Join condition: NOT (cd_marital_status#55 = cd_marital_status#57)

(76) Project [codegen id : 30]
Output [14]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, c_current_hdemo_sk#46, c_current_addr_sk#47, d_year#51, d_year#53]
Input [18]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, c_current_cdemo_sk#45, c_current_hdemo_sk#46, c_current_addr_sk#47, d_year#51, d_year#53, cd_marital_status#55, cd_demo_sk#56, cd_marital_status#57]

(77) Scan parquet spark_catalog.default.promotion
Output [1]: [p_promo_sk#58]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int>

(78) ColumnarToRow [codegen id : 27]
Input [1]: [p_promo_sk#58]

(79) Filter [codegen id : 27]
Input [1]: [p_promo_sk#58]
Condition : isnotnull(p_promo_sk#58)

(80) BroadcastExchange
Input [1]: [p_promo_sk#58]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=14]

(81) BroadcastHashJoin [codegen id : 30]
Left keys [1]: [ss_promo_sk#7]
Right keys [1]: [p_promo_sk#58]
Join condition: None

(82) Project [codegen id : 30]
Output [13]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, c_current_hdemo_sk#46, c_current_addr_sk#47, d_year#51, d_year#53]
Input [15]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, c_current_hdemo_sk#46, c_current_addr_sk#47, d_year#51, d_year#53, p_promo_sk#58]

(83) Scan parquet spark_catalog.default.household_demographics
Output [2]: [hd_demo_sk#59, hd_income_band_sk#60]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_demo_sk), IsNotNull(hd_income_band_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_income_band_sk:int>

(84) ColumnarToRow [codegen id : 28]
Input [2]: [hd_demo_sk#59, hd_income_band_sk#60]

(85) Filter [codegen id : 28]
Input [2]: [hd_demo_sk#59, hd_income_band_sk#60]
Condition : (isnotnull(hd_demo_sk#59) AND isnotnull(hd_income_band_sk#60))

(86) BroadcastExchange
Input [2]: [hd_demo_sk#59, hd_income_band_sk#60]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=15]

(87) BroadcastHashJoin [codegen id : 30]
Left keys [1]: [ss_hdemo_sk#4]
Right keys [1]: [hd_demo_sk#59]
Join condition: None

(88) Project [codegen id : 30]
Output [13]: [ss_item_sk#1, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, c_current_hdemo_sk#46, c_current_addr_sk#47, d_year#51, d_year#53, hd_income_band_sk#60]
Input [15]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, c_current_hdemo_sk#46, c_current_addr_sk#47, d_year#51, d_year#53, hd_demo_sk#59, hd_income_band_sk#60]

(89) ReusedExchange [Reuses operator id: 86]
Output [2]: [hd_demo_sk#61, hd_income_band_sk#62]

(90) BroadcastHashJoin [codegen id : 30]
Left keys [1]: [c_current_hdemo_sk#46]
Right keys [1]: [hd_demo_sk#61]
Join condition: None

(91) Project [codegen id : 30]
Output [13]: [ss_item_sk#1, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, c_current_addr_sk#47, d_year#51, d_year#53, hd_income_band_sk#60, hd_income_band_sk#62]
Input [15]: [ss_item_sk#1, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, c_current_hdemo_sk#46, c_current_addr_sk#47, d_year#51, d_year#53, hd_income_band_sk#60, hd_demo_sk#61, hd_income_band_sk#62]

(92) Exchange
Input [13]: [ss_item_sk#1, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, c_current_addr_sk#47, d_year#51, d_year#53, hd_income_band_sk#60, hd_income_band_sk#62]
Arguments: hashpartitioning(ss_addr_sk#5, 5), ENSURE_REQUIREMENTS, [plan_id=16]

(93) Sort [codegen id : 31]
Input [13]: [ss_item_sk#1, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, c_current_addr_sk#47, d_year#51, d_year#53, hd_income_band_sk#60, hd_income_band_sk#62]
Arguments: [ss_addr_sk#5 ASC NULLS FIRST], false, 0

(94) Scan parquet spark_catalog.default.customer_address
Output [5]: [ca_address_sk#63, ca_street_number#64, ca_street_name#65, ca_city#66, ca_zip#67]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_street_number:string,ca_street_name:string,ca_city:string,ca_zip:string>

(95) ColumnarToRow [codegen id : 32]
Input [5]: [ca_address_sk#63, ca_street_number#64, ca_street_name#65, ca_city#66, ca_zip#67]

(96) Filter [codegen id : 32]
Input [5]: [ca_address_sk#63, ca_street_number#64, ca_street_name#65, ca_city#66, ca_zip#67]
Condition : isnotnull(ca_address_sk#63)

(97) Exchange
Input [5]: [ca_address_sk#63, ca_street_number#64, ca_street_name#65, ca_city#66, ca_zip#67]
Arguments: hashpartitioning(ca_address_sk#63, 5), ENSURE_REQUIREMENTS, [plan_id=17]

(98) Sort [codegen id : 33]
Input [5]: [ca_address_sk#63, ca_street_number#64, ca_street_name#65, ca_city#66, ca_zip#67]
Arguments: [ca_address_sk#63 ASC NULLS FIRST], false, 0

(99) SortMergeJoin [codegen id : 34]
Left keys [1]: [ss_addr_sk#5]
Right keys [1]: [ca_address_sk#63]
Join condition: None

(100) Project [codegen id : 34]
Output [16]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, c_current_addr_sk#47, d_year#51, d_year#53, hd_income_band_sk#60, hd_income_band_sk#62, ca_street_number#64, ca_street_name#65, ca_city#66, ca_zip#67]
Input [18]: [ss_item_sk#1, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, c_current_addr_sk#47, d_year#51, d_year#53, hd_income_band_sk#60, hd_income_band_sk#62, ca_address_sk#63, ca_street_number#64, ca_street_name#65, ca_city#66, ca_zip#67]

(101) Exchange
Input [16]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, c_current_addr_sk#47, d_year#51, d_year#53, hd_income_band_sk#60, hd_income_band_sk#62, ca_street_number#64, ca_street_name#65, ca_city#66, ca_zip#67]
Arguments: hashpartitioning(c_current_addr_sk#47, 5), ENSURE_REQUIREMENTS, [plan_id=18]

(102) Sort [codegen id : 35]
Input [16]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, c_current_addr_sk#47, d_year#51, d_year#53, hd_income_band_sk#60, hd_income_band_sk#62, ca_street_number#64, ca_street_name#65, ca_city#66, ca_zip#67]
Arguments: [c_current_addr_sk#47 ASC NULLS FIRST], false, 0

(103) ReusedExchange [Reuses operator id: 97]
Output [5]: [ca_address_sk#68, ca_street_number#69, ca_street_name#70, ca_city#71, ca_zip#72]

(104) Sort [codegen id : 37]
Input [5]: [ca_address_sk#68, ca_street_number#69, ca_street_name#70, ca_city#71, ca_zip#72]
Arguments: [ca_address_sk#68 ASC NULLS FIRST], false, 0

(105) SortMergeJoin [codegen id : 41]
Left keys [1]: [c_current_addr_sk#47]
Right keys [1]: [ca_address_sk#68]
Join condition: None

(106) Project [codegen id : 41]
Output [19]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, d_year#51, d_year#53, hd_income_band_sk#60, hd_income_band_sk#62, ca_street_number#64, ca_street_name#65, ca_city#66, ca_zip#67, ca_street_number#69, ca_street_name#70, ca_city#71, ca_zip#72]
Input [21]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, c_current_addr_sk#47, d_year#51, d_year#53, hd_income_band_sk#60, hd_income_band_sk#62, ca_street_number#64, ca_street_name#65, ca_city#66, ca_zip#67, ca_address_sk#68, ca_street_number#69, ca_street_name#70, ca_city#71, ca_zip#72]

(107) Scan parquet spark_catalog.default.income_band
Output [1]: [ib_income_band_sk#73]
Batched: true
Location [not included in comparison]/{warehouse_dir}/income_band]
PushedFilters: [IsNotNull(ib_income_band_sk)]
ReadSchema: struct<ib_income_band_sk:int>

(108) ColumnarToRow [codegen id : 38]
Input [1]: [ib_income_band_sk#73]

(109) Filter [codegen id : 38]
Input [1]: [ib_income_band_sk#73]
Condition : isnotnull(ib_income_band_sk#73)

(110) BroadcastExchange
Input [1]: [ib_income_band_sk#73]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=19]

(111) BroadcastHashJoin [codegen id : 41]
Left keys [1]: [hd_income_band_sk#60]
Right keys [1]: [ib_income_band_sk#73]
Join condition: None

(112) Project [codegen id : 41]
Output [18]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, d_year#51, d_year#53, hd_income_band_sk#62, ca_street_number#64, ca_street_name#65, ca_city#66, ca_zip#67, ca_street_number#69, ca_street_name#70, ca_city#71, ca_zip#72]
Input [20]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, d_year#51, d_year#53, hd_income_band_sk#60, hd_income_band_sk#62, ca_street_number#64, ca_street_name#65, ca_city#66, ca_zip#67, ca_street_number#69, ca_street_name#70, ca_city#71, ca_zip#72, ib_income_band_sk#73]

(113) ReusedExchange [Reuses operator id: 110]
Output [1]: [ib_income_band_sk#74]

(114) BroadcastHashJoin [codegen id : 41]
Left keys [1]: [hd_income_band_sk#62]
Right keys [1]: [ib_income_band_sk#74]
Join condition: None

(115) Project [codegen id : 41]
Output [17]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, d_year#51, d_year#53, ca_street_number#64, ca_street_name#65, ca_city#66, ca_zip#67, ca_street_number#69, ca_street_name#70, ca_city#71, ca_zip#72]
Input [19]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, d_year#51, d_year#53, hd_income_band_sk#62, ca_street_number#64, ca_street_name#65, ca_city#66, ca_zip#67, ca_street_number#69, ca_street_name#70, ca_city#71, ca_zip#72, ib_income_band_sk#74]

(116) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#75, i_current_price#76, i_color#77, i_product_name#78]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), In(i_color, [burlywood           ,floral              ,indian              ,medium              ,purple              ,spring              ]), GreaterThanOrEqual(i_current_price,64.00), LessThanOrEqual(i_current_price,74.00), GreaterThanOrEqual(i_current_price,65.00), LessThanOrEqual(i_current_price,79.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_color:string,i_product_name:string>

(117) ColumnarToRow [codegen id : 40]
Input [4]: [i_item_sk#75, i_current_price#76, i_color#77, i_product_name#78]

(118) Filter [codegen id : 40]
Input [4]: [i_item_sk#75, i_current_price#76, i_color#77, i_product_name#78]
Condition : ((((((isnotnull(i_current_price#76) AND i_color#77 IN (purple              ,burlywood           ,indian              ,spring              ,floral              ,medium              )) AND (i_current_price#76 >= 64.00)) AND (i_current_price#76 <= 74.00)) AND (i_current_price#76 >= 65.00)) AND (i_current_price#76 <= 79.00)) AND isnotnull(i_item_sk#75))

(119) Project [codegen id : 40]
Output [2]: [i_item_sk#75, i_product_name#78]
Input [4]: [i_item_sk#75, i_current_price#76, i_color#77, i_product_name#78]

(120) BroadcastExchange
Input [2]: [i_item_sk#75, i_product_name#78]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=20]

(121) BroadcastHashJoin [codegen id : 41]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#75]
Join condition: None

(122) Project [codegen id : 41]
Output [18]: [ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, d_year#51, d_year#53, s_store_name#42, s_zip#43, ca_street_number#64, ca_street_name#65, ca_city#66, ca_zip#67, ca_street_number#69, ca_street_name#70, ca_city#71, ca_zip#72, i_item_sk#75, i_product_name#78]
Input [19]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, s_store_name#42, s_zip#43, d_year#51, d_year#53, ca_street_number#64, ca_street_name#65, ca_city#66, ca_zip#67, ca_street_number#69, ca_street_name#70, ca_city#71, ca_zip#72, i_item_sk#75, i_product_name#78]

(123) HashAggregate [codegen id : 41]
Input [18]: [ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#40, d_year#51, d_year#53, s_store_name#42, s_zip#43, ca_street_number#64, ca_street_name#65, ca_city#66, ca_zip#67, ca_street_number#69, ca_street_name#70, ca_city#71, ca_zip#72, i_item_sk#75, i_product_name#78]
Keys [15]: [i_product_name#78, i_item_sk#75, s_store_name#42, s_zip#43, ca_street_number#64, ca_street_name#65, ca_city#66, ca_zip#67, ca_street_number#69, ca_street_name#70, ca_city#71, ca_zip#72, d_year#40, d_year#51, d_year#53]
Functions [4]: [partial_count(1), partial_sum(UnscaledValue(ss_wholesale_cost#9)), partial_sum(UnscaledValue(ss_list_price#10)), partial_sum(UnscaledValue(ss_coupon_amt#11))]
Aggregate Attributes [4]: [count#79, sum#80, sum#81, sum#82]
Results [19]: [i_product_name#78, i_item_sk#75, s_store_name#42, s_zip#43, ca_street_number#64, ca_street_name#65, ca_city#66, ca_zip#67, ca_street_number#69, ca_street_name#70, ca_city#71, ca_zip#72, d_year#40, d_year#51, d_year#53, count#83, sum#84, sum#85, sum#86]

(124) Exchange
Input [19]: [i_product_name#78, i_item_sk#75, s_store_name#42, s_zip#43, ca_street_number#64, ca_street_name#65, ca_city#66, ca_zip#67, ca_street_number#69, ca_street_name#70, ca_city#71, ca_zip#72, d_year#40, d_year#51, d_year#53, count#83, sum#84, sum#85, sum#86]
Arguments: hashpartitioning(i_product_name#78, i_item_sk#75, s_store_name#42, s_zip#43, ca_street_number#64, ca_street_name#65, ca_city#66, ca_zip#67, ca_street_number#69, ca_street_name#70, ca_city#71, ca_zip#72, d_year#40, d_year#51, d_year#53, 5), ENSURE_REQUIREMENTS, [plan_id=21]

(125) HashAggregate [codegen id : 42]
Input [19]: [i_product_name#78, i_item_sk#75, s_store_name#42, s_zip#43, ca_street_number#64, ca_street_name#65, ca_city#66, ca_zip#67, ca_street_number#69, ca_street_name#70, ca_city#71, ca_zip#72, d_year#40, d_year#51, d_year#53, count#83, sum#84, sum#85, sum#86]
Keys [15]: [i_product_name#78, i_item_sk#75, s_store_name#42, s_zip#43, ca_street_number#64, ca_street_name#65, ca_city#66, ca_zip#67, ca_street_number#69, ca_street_name#70, ca_city#71, ca_zip#72, d_year#40, d_year#51, d_year#53]
Functions [4]: [count(1), sum(UnscaledValue(ss_wholesale_cost#9)), sum(UnscaledValue(ss_list_price#10)), sum(UnscaledValue(ss_coupon_amt#11))]
Aggregate Attributes [4]: [count(1)#87, sum(UnscaledValue(ss_wholesale_cost#9))#88, sum(UnscaledValue(ss_list_price#10))#89, sum(UnscaledValue(ss_coupon_amt#11))#90]
Results [17]: [i_product_name#78 AS product_name#91, i_item_sk#75 AS item_sk#92, s_store_name#42 AS store_name#93, s_zip#43 AS store_zip#94, ca_street_number#64 AS b_street_number#95, ca_street_name#65 AS b_streen_name#96, ca_city#66 AS b_city#97, ca_zip#67 AS b_zip#98, ca_street_number#69 AS c_street_number#99, ca_street_name#70 AS c_street_name#100, ca_city#71 AS c_city#101, ca_zip#72 AS c_zip#102, d_year#40 AS syear#103, count(1)#87 AS cnt#104, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#9))#88,17,2) AS s1#105, MakeDecimal(sum(UnscaledValue(ss_list_price#10))#89,17,2) AS s2#106, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#11))#90,17,2) AS s3#107]

(126) Exchange
Input [17]: [product_name#91, item_sk#92, store_name#93, store_zip#94, b_street_number#95, b_streen_name#96, b_city#97, b_zip#98, c_street_number#99, c_street_name#100, c_city#101, c_zip#102, syear#103, cnt#104, s1#105, s2#106, s3#107]
Arguments: hashpartitioning(item_sk#92, store_name#93, store_zip#94, 5), ENSURE_REQUIREMENTS, [plan_id=22]

(127) Sort [codegen id : 43]
Input [17]: [product_name#91, item_sk#92, store_name#93, store_zip#94, b_street_number#95, b_streen_name#96, b_city#97, b_zip#98, c_street_number#99, c_street_name#100, c_city#101, c_zip#102, syear#103, cnt#104, s1#105, s2#106, s3#107]
Arguments: [item_sk#92 ASC NULLS FIRST, store_name#93 ASC NULLS FIRST, store_zip#94 ASC NULLS FIRST], false, 0

(128) Scan parquet spark_catalog.default.store_sales
Output [12]: [ss_item_sk#108, ss_customer_sk#109, ss_cdemo_sk#110, ss_hdemo_sk#111, ss_addr_sk#112, ss_store_sk#113, ss_promo_sk#114, ss_ticket_number#115, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, ss_sold_date_sk#119]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#119), dynamicpruningexpression(ss_sold_date_sk#119 IN dynamicpruning#120)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_cdemo_sk), IsNotNull(ss_promo_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(129) ColumnarToRow [codegen id : 50]
Input [12]: [ss_item_sk#108, ss_customer_sk#109, ss_cdemo_sk#110, ss_hdemo_sk#111, ss_addr_sk#112, ss_store_sk#113, ss_promo_sk#114, ss_ticket_number#115, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, ss_sold_date_sk#119]

(130) Filter [codegen id : 50]
Input [12]: [ss_item_sk#108, ss_customer_sk#109, ss_cdemo_sk#110, ss_hdemo_sk#111, ss_addr_sk#112, ss_store_sk#113, ss_promo_sk#114, ss_ticket_number#115, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, ss_sold_date_sk#119]
Condition : ((((((((isnotnull(ss_item_sk#108) AND isnotnull(ss_ticket_number#115)) AND isnotnull(ss_store_sk#113)) AND isnotnull(ss_customer_sk#109)) AND isnotnull(ss_cdemo_sk#110)) AND isnotnull(ss_promo_sk#114)) AND isnotnull(ss_hdemo_sk#111)) AND isnotnull(ss_addr_sk#112)) AND might_contain(ReusedSubquery Subquery scalar-subquery#14, [id=#15], xxhash64(ss_item_sk#108, 42)))

(131) ReusedExchange [Reuses operator id: 23]
Output [1]: [cs_item_sk#121]

(132) BroadcastHashJoin [codegen id : 50]
Left keys [1]: [ss_item_sk#108]
Right keys [1]: [cs_item_sk#121]
Join condition: None

(133) Exchange
Input [12]: [ss_item_sk#108, ss_customer_sk#109, ss_cdemo_sk#110, ss_hdemo_sk#111, ss_addr_sk#112, ss_store_sk#113, ss_promo_sk#114, ss_ticket_number#115, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, ss_sold_date_sk#119]
Arguments: hashpartitioning(ss_item_sk#108, ss_ticket_number#115, 5), ENSURE_REQUIREMENTS, [plan_id=23]

(134) Sort [codegen id : 51]
Input [12]: [ss_item_sk#108, ss_customer_sk#109, ss_cdemo_sk#110, ss_hdemo_sk#111, ss_addr_sk#112, ss_store_sk#113, ss_promo_sk#114, ss_ticket_number#115, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, ss_sold_date_sk#119]
Arguments: [ss_item_sk#108 ASC NULLS FIRST, ss_ticket_number#115 ASC NULLS FIRST], false, 0

(135) ReusedExchange [Reuses operator id: 31]
Output [2]: [sr_item_sk#122, sr_ticket_number#123]

(136) Sort [codegen id : 53]
Input [2]: [sr_item_sk#122, sr_ticket_number#123]
Arguments: [sr_item_sk#122 ASC NULLS FIRST, sr_ticket_number#123 ASC NULLS FIRST], false, 0

(137) SortMergeJoin [codegen id : 56]
Left keys [2]: [ss_item_sk#108, ss_ticket_number#115]
Right keys [2]: [sr_item_sk#122, sr_ticket_number#123]
Join condition: None

(138) Project [codegen id : 56]
Output [11]: [ss_item_sk#108, ss_customer_sk#109, ss_cdemo_sk#110, ss_hdemo_sk#111, ss_addr_sk#112, ss_store_sk#113, ss_promo_sk#114, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, ss_sold_date_sk#119]
Input [14]: [ss_item_sk#108, ss_customer_sk#109, ss_cdemo_sk#110, ss_hdemo_sk#111, ss_addr_sk#112, ss_store_sk#113, ss_promo_sk#114, ss_ticket_number#115, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, ss_sold_date_sk#119, sr_item_sk#122, sr_ticket_number#123]

(139) ReusedExchange [Reuses operator id: 222]
Output [2]: [d_date_sk#124, d_year#125]

(140) BroadcastHashJoin [codegen id : 56]
Left keys [1]: [ss_sold_date_sk#119]
Right keys [1]: [d_date_sk#124]
Join condition: None

(141) Project [codegen id : 56]
Output [11]: [ss_item_sk#108, ss_customer_sk#109, ss_cdemo_sk#110, ss_hdemo_sk#111, ss_addr_sk#112, ss_store_sk#113, ss_promo_sk#114, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125]
Input [13]: [ss_item_sk#108, ss_customer_sk#109, ss_cdemo_sk#110, ss_hdemo_sk#111, ss_addr_sk#112, ss_store_sk#113, ss_promo_sk#114, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, ss_sold_date_sk#119, d_date_sk#124, d_year#125]

(142) ReusedExchange [Reuses operator id: 41]
Output [3]: [s_store_sk#126, s_store_name#127, s_zip#128]

(143) BroadcastHashJoin [codegen id : 56]
Left keys [1]: [ss_store_sk#113]
Right keys [1]: [s_store_sk#126]
Join condition: None

(144) Project [codegen id : 56]
Output [12]: [ss_item_sk#108, ss_customer_sk#109, ss_cdemo_sk#110, ss_hdemo_sk#111, ss_addr_sk#112, ss_promo_sk#114, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128]
Input [14]: [ss_item_sk#108, ss_customer_sk#109, ss_cdemo_sk#110, ss_hdemo_sk#111, ss_addr_sk#112, ss_store_sk#113, ss_promo_sk#114, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_sk#126, s_store_name#127, s_zip#128]

(145) Exchange
Input [12]: [ss_item_sk#108, ss_customer_sk#109, ss_cdemo_sk#110, ss_hdemo_sk#111, ss_addr_sk#112, ss_promo_sk#114, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128]
Arguments: hashpartitioning(ss_customer_sk#109, 5), ENSURE_REQUIREMENTS, [plan_id=24]

(146) Sort [codegen id : 57]
Input [12]: [ss_item_sk#108, ss_customer_sk#109, ss_cdemo_sk#110, ss_hdemo_sk#111, ss_addr_sk#112, ss_promo_sk#114, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128]
Arguments: [ss_customer_sk#109 ASC NULLS FIRST], false, 0

(147) ReusedExchange [Reuses operator id: 49]
Output [6]: [c_customer_sk#129, c_current_cdemo_sk#130, c_current_hdemo_sk#131, c_current_addr_sk#132, c_first_shipto_date_sk#133, c_first_sales_date_sk#134]

(148) Sort [codegen id : 59]
Input [6]: [c_customer_sk#129, c_current_cdemo_sk#130, c_current_hdemo_sk#131, c_current_addr_sk#132, c_first_shipto_date_sk#133, c_first_sales_date_sk#134]
Arguments: [c_customer_sk#129 ASC NULLS FIRST], false, 0

(149) SortMergeJoin [codegen id : 62]
Left keys [1]: [ss_customer_sk#109]
Right keys [1]: [c_customer_sk#129]
Join condition: None

(150) Project [codegen id : 62]
Output [16]: [ss_item_sk#108, ss_cdemo_sk#110, ss_hdemo_sk#111, ss_addr_sk#112, ss_promo_sk#114, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, c_current_cdemo_sk#130, c_current_hdemo_sk#131, c_current_addr_sk#132, c_first_shipto_date_sk#133, c_first_sales_date_sk#134]
Input [18]: [ss_item_sk#108, ss_customer_sk#109, ss_cdemo_sk#110, ss_hdemo_sk#111, ss_addr_sk#112, ss_promo_sk#114, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, c_customer_sk#129, c_current_cdemo_sk#130, c_current_hdemo_sk#131, c_current_addr_sk#132, c_first_shipto_date_sk#133, c_first_sales_date_sk#134]

(151) ReusedExchange [Reuses operator id: 56]
Output [2]: [d_date_sk#135, d_year#136]

(152) BroadcastHashJoin [codegen id : 62]
Left keys [1]: [c_first_sales_date_sk#134]
Right keys [1]: [d_date_sk#135]
Join condition: None

(153) Project [codegen id : 62]
Output [16]: [ss_item_sk#108, ss_cdemo_sk#110, ss_hdemo_sk#111, ss_addr_sk#112, ss_promo_sk#114, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, c_current_cdemo_sk#130, c_current_hdemo_sk#131, c_current_addr_sk#132, c_first_shipto_date_sk#133, d_year#136]
Input [18]: [ss_item_sk#108, ss_cdemo_sk#110, ss_hdemo_sk#111, ss_addr_sk#112, ss_promo_sk#114, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, c_current_cdemo_sk#130, c_current_hdemo_sk#131, c_current_addr_sk#132, c_first_shipto_date_sk#133, c_first_sales_date_sk#134, d_date_sk#135, d_year#136]

(154) ReusedExchange [Reuses operator id: 56]
Output [2]: [d_date_sk#137, d_year#138]

(155) BroadcastHashJoin [codegen id : 62]
Left keys [1]: [c_first_shipto_date_sk#133]
Right keys [1]: [d_date_sk#137]
Join condition: None

(156) Project [codegen id : 62]
Output [16]: [ss_item_sk#108, ss_cdemo_sk#110, ss_hdemo_sk#111, ss_addr_sk#112, ss_promo_sk#114, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, c_current_cdemo_sk#130, c_current_hdemo_sk#131, c_current_addr_sk#132, d_year#136, d_year#138]
Input [18]: [ss_item_sk#108, ss_cdemo_sk#110, ss_hdemo_sk#111, ss_addr_sk#112, ss_promo_sk#114, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, c_current_cdemo_sk#130, c_current_hdemo_sk#131, c_current_addr_sk#132, c_first_shipto_date_sk#133, d_year#136, d_date_sk#137, d_year#138]

(157) Exchange
Input [16]: [ss_item_sk#108, ss_cdemo_sk#110, ss_hdemo_sk#111, ss_addr_sk#112, ss_promo_sk#114, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, c_current_cdemo_sk#130, c_current_hdemo_sk#131, c_current_addr_sk#132, d_year#136, d_year#138]
Arguments: hashpartitioning(ss_cdemo_sk#110, 5), ENSURE_REQUIREMENTS, [plan_id=25]

(158) Sort [codegen id : 63]
Input [16]: [ss_item_sk#108, ss_cdemo_sk#110, ss_hdemo_sk#111, ss_addr_sk#112, ss_promo_sk#114, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, c_current_cdemo_sk#130, c_current_hdemo_sk#131, c_current_addr_sk#132, d_year#136, d_year#138]
Arguments: [ss_cdemo_sk#110 ASC NULLS FIRST], false, 0

(159) ReusedExchange [Reuses operator id: 67]
Output [2]: [cd_demo_sk#139, cd_marital_status#140]

(160) Sort [codegen id : 65]
Input [2]: [cd_demo_sk#139, cd_marital_status#140]
Arguments: [cd_demo_sk#139 ASC NULLS FIRST], false, 0

(161) SortMergeJoin [codegen id : 66]
Left keys [1]: [ss_cdemo_sk#110]
Right keys [1]: [cd_demo_sk#139]
Join condition: None

(162) Project [codegen id : 66]
Output [16]: [ss_item_sk#108, ss_hdemo_sk#111, ss_addr_sk#112, ss_promo_sk#114, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, c_current_cdemo_sk#130, c_current_hdemo_sk#131, c_current_addr_sk#132, d_year#136, d_year#138, cd_marital_status#140]
Input [18]: [ss_item_sk#108, ss_cdemo_sk#110, ss_hdemo_sk#111, ss_addr_sk#112, ss_promo_sk#114, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, c_current_cdemo_sk#130, c_current_hdemo_sk#131, c_current_addr_sk#132, d_year#136, d_year#138, cd_demo_sk#139, cd_marital_status#140]

(163) Exchange
Input [16]: [ss_item_sk#108, ss_hdemo_sk#111, ss_addr_sk#112, ss_promo_sk#114, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, c_current_cdemo_sk#130, c_current_hdemo_sk#131, c_current_addr_sk#132, d_year#136, d_year#138, cd_marital_status#140]
Arguments: hashpartitioning(c_current_cdemo_sk#130, 5), ENSURE_REQUIREMENTS, [plan_id=26]

(164) Sort [codegen id : 67]
Input [16]: [ss_item_sk#108, ss_hdemo_sk#111, ss_addr_sk#112, ss_promo_sk#114, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, c_current_cdemo_sk#130, c_current_hdemo_sk#131, c_current_addr_sk#132, d_year#136, d_year#138, cd_marital_status#140]
Arguments: [c_current_cdemo_sk#130 ASC NULLS FIRST], false, 0

(165) ReusedExchange [Reuses operator id: 67]
Output [2]: [cd_demo_sk#141, cd_marital_status#142]

(166) Sort [codegen id : 69]
Input [2]: [cd_demo_sk#141, cd_marital_status#142]
Arguments: [cd_demo_sk#141 ASC NULLS FIRST], false, 0

(167) SortMergeJoin [codegen id : 73]
Left keys [1]: [c_current_cdemo_sk#130]
Right keys [1]: [cd_demo_sk#141]
Join condition: NOT (cd_marital_status#140 = cd_marital_status#142)

(168) Project [codegen id : 73]
Output [14]: [ss_item_sk#108, ss_hdemo_sk#111, ss_addr_sk#112, ss_promo_sk#114, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, c_current_hdemo_sk#131, c_current_addr_sk#132, d_year#136, d_year#138]
Input [18]: [ss_item_sk#108, ss_hdemo_sk#111, ss_addr_sk#112, ss_promo_sk#114, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, c_current_cdemo_sk#130, c_current_hdemo_sk#131, c_current_addr_sk#132, d_year#136, d_year#138, cd_marital_status#140, cd_demo_sk#141, cd_marital_status#142]

(169) ReusedExchange [Reuses operator id: 80]
Output [1]: [p_promo_sk#143]

(170) BroadcastHashJoin [codegen id : 73]
Left keys [1]: [ss_promo_sk#114]
Right keys [1]: [p_promo_sk#143]
Join condition: None

(171) Project [codegen id : 73]
Output [13]: [ss_item_sk#108, ss_hdemo_sk#111, ss_addr_sk#112, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, c_current_hdemo_sk#131, c_current_addr_sk#132, d_year#136, d_year#138]
Input [15]: [ss_item_sk#108, ss_hdemo_sk#111, ss_addr_sk#112, ss_promo_sk#114, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, c_current_hdemo_sk#131, c_current_addr_sk#132, d_year#136, d_year#138, p_promo_sk#143]

(172) ReusedExchange [Reuses operator id: 86]
Output [2]: [hd_demo_sk#144, hd_income_band_sk#145]

(173) BroadcastHashJoin [codegen id : 73]
Left keys [1]: [ss_hdemo_sk#111]
Right keys [1]: [hd_demo_sk#144]
Join condition: None

(174) Project [codegen id : 73]
Output [13]: [ss_item_sk#108, ss_addr_sk#112, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, c_current_hdemo_sk#131, c_current_addr_sk#132, d_year#136, d_year#138, hd_income_band_sk#145]
Input [15]: [ss_item_sk#108, ss_hdemo_sk#111, ss_addr_sk#112, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, c_current_hdemo_sk#131, c_current_addr_sk#132, d_year#136, d_year#138, hd_demo_sk#144, hd_income_band_sk#145]

(175) ReusedExchange [Reuses operator id: 86]
Output [2]: [hd_demo_sk#146, hd_income_band_sk#147]

(176) BroadcastHashJoin [codegen id : 73]
Left keys [1]: [c_current_hdemo_sk#131]
Right keys [1]: [hd_demo_sk#146]
Join condition: None

(177) Project [codegen id : 73]
Output [13]: [ss_item_sk#108, ss_addr_sk#112, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, c_current_addr_sk#132, d_year#136, d_year#138, hd_income_band_sk#145, hd_income_band_sk#147]
Input [15]: [ss_item_sk#108, ss_addr_sk#112, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, c_current_hdemo_sk#131, c_current_addr_sk#132, d_year#136, d_year#138, hd_income_band_sk#145, hd_demo_sk#146, hd_income_band_sk#147]

(178) Exchange
Input [13]: [ss_item_sk#108, ss_addr_sk#112, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, c_current_addr_sk#132, d_year#136, d_year#138, hd_income_band_sk#145, hd_income_band_sk#147]
Arguments: hashpartitioning(ss_addr_sk#112, 5), ENSURE_REQUIREMENTS, [plan_id=27]

(179) Sort [codegen id : 74]
Input [13]: [ss_item_sk#108, ss_addr_sk#112, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, c_current_addr_sk#132, d_year#136, d_year#138, hd_income_band_sk#145, hd_income_band_sk#147]
Arguments: [ss_addr_sk#112 ASC NULLS FIRST], false, 0

(180) ReusedExchange [Reuses operator id: 97]
Output [5]: [ca_address_sk#148, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152]

(181) Sort [codegen id : 76]
Input [5]: [ca_address_sk#148, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152]
Arguments: [ca_address_sk#148 ASC NULLS FIRST], false, 0

(182) SortMergeJoin [codegen id : 77]
Left keys [1]: [ss_addr_sk#112]
Right keys [1]: [ca_address_sk#148]
Join condition: None

(183) Project [codegen id : 77]
Output [16]: [ss_item_sk#108, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, c_current_addr_sk#132, d_year#136, d_year#138, hd_income_band_sk#145, hd_income_band_sk#147, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152]
Input [18]: [ss_item_sk#108, ss_addr_sk#112, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, c_current_addr_sk#132, d_year#136, d_year#138, hd_income_band_sk#145, hd_income_band_sk#147, ca_address_sk#148, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152]

(184) Exchange
Input [16]: [ss_item_sk#108, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, c_current_addr_sk#132, d_year#136, d_year#138, hd_income_band_sk#145, hd_income_band_sk#147, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152]
Arguments: hashpartitioning(c_current_addr_sk#132, 5), ENSURE_REQUIREMENTS, [plan_id=28]

(185) Sort [codegen id : 78]
Input [16]: [ss_item_sk#108, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, c_current_addr_sk#132, d_year#136, d_year#138, hd_income_band_sk#145, hd_income_band_sk#147, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152]
Arguments: [c_current_addr_sk#132 ASC NULLS FIRST], false, 0

(186) ReusedExchange [Reuses operator id: 97]
Output [5]: [ca_address_sk#153, ca_street_number#154, ca_street_name#155, ca_city#156, ca_zip#157]

(187) Sort [codegen id : 80]
Input [5]: [ca_address_sk#153, ca_street_number#154, ca_street_name#155, ca_city#156, ca_zip#157]
Arguments: [ca_address_sk#153 ASC NULLS FIRST], false, 0

(188) SortMergeJoin [codegen id : 84]
Left keys [1]: [c_current_addr_sk#132]
Right keys [1]: [ca_address_sk#153]
Join condition: None

(189) Project [codegen id : 84]
Output [19]: [ss_item_sk#108, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, d_year#136, d_year#138, hd_income_band_sk#145, hd_income_band_sk#147, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_street_number#154, ca_street_name#155, ca_city#156, ca_zip#157]
Input [21]: [ss_item_sk#108, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, c_current_addr_sk#132, d_year#136, d_year#138, hd_income_band_sk#145, hd_income_band_sk#147, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_address_sk#153, ca_street_number#154, ca_street_name#155, ca_city#156, ca_zip#157]

(190) ReusedExchange [Reuses operator id: 110]
Output [1]: [ib_income_band_sk#158]

(191) BroadcastHashJoin [codegen id : 84]
Left keys [1]: [hd_income_band_sk#145]
Right keys [1]: [ib_income_band_sk#158]
Join condition: None

(192) Project [codegen id : 84]
Output [18]: [ss_item_sk#108, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, d_year#136, d_year#138, hd_income_band_sk#147, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_street_number#154, ca_street_name#155, ca_city#156, ca_zip#157]
Input [20]: [ss_item_sk#108, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, d_year#136, d_year#138, hd_income_band_sk#145, hd_income_band_sk#147, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_street_number#154, ca_street_name#155, ca_city#156, ca_zip#157, ib_income_band_sk#158]

(193) ReusedExchange [Reuses operator id: 110]
Output [1]: [ib_income_band_sk#159]

(194) BroadcastHashJoin [codegen id : 84]
Left keys [1]: [hd_income_band_sk#147]
Right keys [1]: [ib_income_band_sk#159]
Join condition: None

(195) Project [codegen id : 84]
Output [17]: [ss_item_sk#108, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, d_year#136, d_year#138, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_street_number#154, ca_street_name#155, ca_city#156, ca_zip#157]
Input [19]: [ss_item_sk#108, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, d_year#136, d_year#138, hd_income_band_sk#147, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_street_number#154, ca_street_name#155, ca_city#156, ca_zip#157, ib_income_band_sk#159]

(196) ReusedExchange [Reuses operator id: 120]
Output [2]: [i_item_sk#160, i_product_name#161]

(197) BroadcastHashJoin [codegen id : 84]
Left keys [1]: [ss_item_sk#108]
Right keys [1]: [i_item_sk#160]
Join condition: None

(198) Project [codegen id : 84]
Output [18]: [ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, d_year#136, d_year#138, s_store_name#127, s_zip#128, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_street_number#154, ca_street_name#155, ca_city#156, ca_zip#157, i_item_sk#160, i_product_name#161]
Input [19]: [ss_item_sk#108, ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, s_store_name#127, s_zip#128, d_year#136, d_year#138, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_street_number#154, ca_street_name#155, ca_city#156, ca_zip#157, i_item_sk#160, i_product_name#161]

(199) HashAggregate [codegen id : 84]
Input [18]: [ss_wholesale_cost#116, ss_list_price#117, ss_coupon_amt#118, d_year#125, d_year#136, d_year#138, s_store_name#127, s_zip#128, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_street_number#154, ca_street_name#155, ca_city#156, ca_zip#157, i_item_sk#160, i_product_name#161]
Keys [15]: [i_product_name#161, i_item_sk#160, s_store_name#127, s_zip#128, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_street_number#154, ca_street_name#155, ca_city#156, ca_zip#157, d_year#125, d_year#136, d_year#138]
Functions [4]: [partial_count(1), partial_sum(UnscaledValue(ss_wholesale_cost#116)), partial_sum(UnscaledValue(ss_list_price#117)), partial_sum(UnscaledValue(ss_coupon_amt#118))]
Aggregate Attributes [4]: [count#79, sum#162, sum#163, sum#164]
Results [19]: [i_product_name#161, i_item_sk#160, s_store_name#127, s_zip#128, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_street_number#154, ca_street_name#155, ca_city#156, ca_zip#157, d_year#125, d_year#136, d_year#138, count#83, sum#165, sum#166, sum#167]

(200) Exchange
Input [19]: [i_product_name#161, i_item_sk#160, s_store_name#127, s_zip#128, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_street_number#154, ca_street_name#155, ca_city#156, ca_zip#157, d_year#125, d_year#136, d_year#138, count#83, sum#165, sum#166, sum#167]
Arguments: hashpartitioning(i_product_name#161, i_item_sk#160, s_store_name#127, s_zip#128, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_street_number#154, ca_street_name#155, ca_city#156, ca_zip#157, d_year#125, d_year#136, d_year#138, 5), ENSURE_REQUIREMENTS, [plan_id=29]

(201) HashAggregate [codegen id : 85]
Input [19]: [i_product_name#161, i_item_sk#160, s_store_name#127, s_zip#128, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_street_number#154, ca_street_name#155, ca_city#156, ca_zip#157, d_year#125, d_year#136, d_year#138, count#83, sum#165, sum#166, sum#167]
Keys [15]: [i_product_name#161, i_item_sk#160, s_store_name#127, s_zip#128, ca_street_number#149, ca_street_name#150, ca_city#151, ca_zip#152, ca_street_number#154, ca_street_name#155, ca_city#156, ca_zip#157, d_year#125, d_year#136, d_year#138]
Functions [4]: [count(1), sum(UnscaledValue(ss_wholesale_cost#116)), sum(UnscaledValue(ss_list_price#117)), sum(UnscaledValue(ss_coupon_amt#118))]
Aggregate Attributes [4]: [count(1)#87, sum(UnscaledValue(ss_wholesale_cost#116))#88, sum(UnscaledValue(ss_list_price#117))#89, sum(UnscaledValue(ss_coupon_amt#118))#90]
Results [8]: [i_item_sk#160 AS item_sk#168, s_store_name#127 AS store_name#169, s_zip#128 AS store_zip#170, d_year#125 AS syear#171, count(1)#87 AS cnt#172, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#116))#88,17,2) AS s1#173, MakeDecimal(sum(UnscaledValue(ss_list_price#117))#89,17,2) AS s2#174, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#118))#90,17,2) AS s3#175]

(202) Exchange
Input [8]: [item_sk#168, store_name#169, store_zip#170, syear#171, cnt#172, s1#173, s2#174, s3#175]
Arguments: hashpartitioning(item_sk#168, store_name#169, store_zip#170, 5), ENSURE_REQUIREMENTS, [plan_id=30]

(203) Sort [codegen id : 86]
Input [8]: [item_sk#168, store_name#169, store_zip#170, syear#171, cnt#172, s1#173, s2#174, s3#175]
Arguments: [item_sk#168 ASC NULLS FIRST, store_name#169 ASC NULLS FIRST, store_zip#170 ASC NULLS FIRST], false, 0

(204) SortMergeJoin [codegen id : 87]
Left keys [3]: [item_sk#92, store_name#93, store_zip#94]
Right keys [3]: [item_sk#168, store_name#169, store_zip#170]
Join condition: (cnt#172 <= cnt#104)

(205) Project [codegen id : 87]
Output [21]: [product_name#91, store_name#93, store_zip#94, b_street_number#95, b_streen_name#96, b_city#97, b_zip#98, c_street_number#99, c_street_name#100, c_city#101, c_zip#102, syear#103, cnt#104, s1#105, s2#106, s3#107, s1#173, s2#174, s3#175, syear#171, cnt#172]
Input [25]: [product_name#91, item_sk#92, store_name#93, store_zip#94, b_street_number#95, b_streen_name#96, b_city#97, b_zip#98, c_street_number#99, c_street_name#100, c_city#101, c_zip#102, syear#103, cnt#104, s1#105, s2#106, s3#107, item_sk#168, store_name#169, store_zip#170, syear#171, cnt#172, s1#173, s2#174, s3#175]

(206) Exchange
Input [21]: [product_name#91, store_name#93, store_zip#94, b_street_number#95, b_streen_name#96, b_city#97, b_zip#98, c_street_number#99, c_street_name#100, c_city#101, c_zip#102, syear#103, cnt#104, s1#105, s2#106, s3#107, s1#173, s2#174, s3#175, syear#171, cnt#172]
Arguments: rangepartitioning(product_name#91 ASC NULLS FIRST, store_name#93 ASC NULLS FIRST, cnt#172 ASC NULLS FIRST, s1#105 ASC NULLS FIRST, s1#173 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [plan_id=31]

(207) Sort [codegen id : 88]
Input [21]: [product_name#91, store_name#93, store_zip#94, b_street_number#95, b_streen_name#96, b_city#97, b_zip#98, c_street_number#99, c_street_name#100, c_city#101, c_zip#102, syear#103, cnt#104, s1#105, s2#106, s3#107, s1#173, s2#174, s3#175, syear#171, cnt#172]
Arguments: [product_name#91 ASC NULLS FIRST, store_name#93 ASC NULLS FIRST, cnt#172 ASC NULLS FIRST, s1#105 ASC NULLS FIRST, s1#173 ASC NULLS FIRST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#14, [id=#15]
ObjectHashAggregate (214)
+- Exchange (213)
   +- ObjectHashAggregate (212)
      +- * Project (211)
         +- * Filter (210)
            +- * ColumnarToRow (209)
               +- Scan parquet spark_catalog.default.item (208)


(208) Scan parquet spark_catalog.default.item
Output [3]: [i_item_sk#75, i_current_price#76, i_color#77]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), In(i_color, [burlywood           ,floral              ,indian              ,medium              ,purple              ,spring              ]), GreaterThanOrEqual(i_current_price,64.00), LessThanOrEqual(i_current_price,74.00), GreaterThanOrEqual(i_current_price,65.00), LessThanOrEqual(i_current_price,79.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_color:string>

(209) ColumnarToRow [codegen id : 1]
Input [3]: [i_item_sk#75, i_current_price#76, i_color#77]

(210) Filter [codegen id : 1]
Input [3]: [i_item_sk#75, i_current_price#76, i_color#77]
Condition : ((((((isnotnull(i_current_price#76) AND i_color#77 IN (purple              ,burlywood           ,indian              ,spring              ,floral              ,medium              )) AND (i_current_price#76 >= 64.00)) AND (i_current_price#76 <= 74.00)) AND (i_current_price#76 >= 65.00)) AND (i_current_price#76 <= 79.00)) AND isnotnull(i_item_sk#75))

(211) Project [codegen id : 1]
Output [1]: [i_item_sk#75]
Input [3]: [i_item_sk#75, i_current_price#76, i_color#77]

(212) ObjectHashAggregate
Input [1]: [i_item_sk#75]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(i_item_sk#75, 42), 1250, 10000, 0, 0)]
Aggregate Attributes [1]: [buf#176]
Results [1]: [buf#177]

(213) Exchange
Input [1]: [buf#177]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=32]

(214) ObjectHashAggregate
Input [1]: [buf#177]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 1250, 10000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 1250, 10000, 0, 0)#178]
Results [1]: [bloom_filter_agg(xxhash64(i_item_sk#75, 42), 1250, 10000, 0, 0)#178 AS bloomFilter#179]

Subquery:2 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#13
BroadcastExchange (218)
+- * Filter (217)
   +- * ColumnarToRow (216)
      +- Scan parquet spark_catalog.default.date_dim (215)


(215) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#39, d_year#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1999), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(216) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#39, d_year#40]

(217) Filter [codegen id : 1]
Input [2]: [d_date_sk#39, d_year#40]
Condition : ((isnotnull(d_year#40) AND (d_year#40 = 1999)) AND isnotnull(d_date_sk#39))

(218) BroadcastExchange
Input [2]: [d_date_sk#39, d_year#40]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=33]

Subquery:3 Hosting operator id = 130 Hosting Expression = ReusedSubquery Subquery scalar-subquery#14, [id=#15]

Subquery:4 Hosting operator id = 128 Hosting Expression = ss_sold_date_sk#119 IN dynamicpruning#120
BroadcastExchange (222)
+- * Filter (221)
   +- * ColumnarToRow (220)
      +- Scan parquet spark_catalog.default.date_dim (219)


(219) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#124, d_year#125]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(220) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#124, d_year#125]

(221) Filter [codegen id : 1]
Input [2]: [d_date_sk#124, d_year#125]
Condition : ((isnotnull(d_year#125) AND (d_year#125 = 2000)) AND isnotnull(d_date_sk#124))

(222) BroadcastExchange
Input [2]: [d_date_sk#124, d_year#125]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=34]


