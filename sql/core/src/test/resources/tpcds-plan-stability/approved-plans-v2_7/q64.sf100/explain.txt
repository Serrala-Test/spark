== Physical Plan ==
* Sort (176)
+- Exchange (175)
   +- * Project (174)
      +- * SortMergeJoin Inner (173)
         :- * Sort (123)
         :  +- Exchange (122)
         :     +- * HashAggregate (121)
         :        +- Exchange (120)
         :           +- * HashAggregate (119)
         :              +- * Project (118)
         :                 +- * SortMergeJoin Inner (117)
         :                    :- * Sort (40)
         :                    :  +- Exchange (39)
         :                    :     +- * Project (38)
         :                    :        +- CartesianProduct Inner (37)
         :                    :           :- * Project (33)
         :                    :           :  +- * SortMergeJoin Inner (32)
         :                    :           :     :- * Sort (26)
         :                    :           :     :  +- Exchange (25)
         :                    :           :     :     +- * Project (24)
         :                    :           :     :        +- * SortMergeJoin Inner (23)
         :                    :           :     :           :- * Sort (17)
         :                    :           :     :           :  +- Exchange (16)
         :                    :           :     :           :     +- * Project (15)
         :                    :           :     :           :        +- * BroadcastHashJoin Inner BuildLeft (14)
         :                    :           :     :           :           :- BroadcastExchange (10)
         :                    :           :     :           :           :  +- * Project (9)
         :                    :           :     :           :           :     +- * BroadcastHashJoin Inner BuildRight (8)
         :                    :           :     :           :           :        :- * Filter (3)
         :                    :           :     :           :           :        :  +- * ColumnarToRow (2)
         :                    :           :     :           :           :        :     +- Scan parquet spark_catalog.default.household_demographics (1)
         :                    :           :     :           :           :        +- BroadcastExchange (7)
         :                    :           :     :           :           :           +- * Filter (6)
         :                    :           :     :           :           :              +- * ColumnarToRow (5)
         :                    :           :     :           :           :                 +- Scan parquet spark_catalog.default.income_band (4)
         :                    :           :     :           :           +- * Filter (13)
         :                    :           :     :           :              +- * ColumnarToRow (12)
         :                    :           :     :           :                 +- Scan parquet spark_catalog.default.customer (11)
         :                    :           :     :           +- * Sort (22)
         :                    :           :     :              +- Exchange (21)
         :                    :           :     :                 +- * Filter (20)
         :                    :           :     :                    +- * ColumnarToRow (19)
         :                    :           :     :                       +- Scan parquet spark_catalog.default.customer_demographics (18)
         :                    :           :     +- * Sort (31)
         :                    :           :        +- Exchange (30)
         :                    :           :           +- * Filter (29)
         :                    :           :              +- * ColumnarToRow (28)
         :                    :           :                 +- Scan parquet spark_catalog.default.customer_address (27)
         :                    :           +- * Filter (36)
         :                    :              +- * ColumnarToRow (35)
         :                    :                 +- Scan parquet spark_catalog.default.customer_demographics (34)
         :                    +- * Sort (116)
         :                       +- Exchange (115)
         :                          +- * Project (114)
         :                             +- * SortMergeJoin Inner (113)
         :                                :- * Sort (110)
         :                                :  +- Exchange (109)
         :                                :     +- * Project (108)
         :                                :        +- * BroadcastHashJoin Inner BuildRight (107)
         :                                :           :- * Project (105)
         :                                :           :  +- * BroadcastHashJoin Inner BuildRight (104)
         :                                :           :     :- * Project (99)
         :                                :           :     :  +- * BroadcastHashJoin Inner BuildRight (98)
         :                                :           :     :     :- * Project (92)
         :                                :           :     :     :  +- * BroadcastNestedLoopJoin Inner BuildRight (91)
         :                                :           :     :     :     :- * BroadcastNestedLoopJoin Inner BuildRight (89)
         :                                :           :     :     :     :  :- * Project (84)
         :                                :           :     :     :     :  :  +- * SortMergeJoin Inner (83)
         :                                :           :     :     :     :  :     :- * Sort (76)
         :                                :           :     :     :     :  :     :  +- Exchange (75)
         :                                :           :     :     :     :  :     :     +- * Project (74)
         :                                :           :     :     :     :  :     :        +- * BroadcastHashJoin Inner BuildRight (73)
         :                                :           :     :     :     :  :     :           :- * Project (68)
         :                                :           :     :     :     :  :     :           :  +- * BroadcastHashJoin Inner BuildRight (67)
         :                                :           :     :     :     :  :     :           :     :- * Project (46)
         :                                :           :     :     :     :  :     :           :     :  +- * BroadcastHashJoin Inner BuildRight (45)
         :                                :           :     :     :     :  :     :           :     :     :- * Filter (43)
         :                                :           :     :     :     :  :     :           :     :     :  +- * ColumnarToRow (42)
         :                                :           :     :     :     :  :     :           :     :     :     +- Scan parquet spark_catalog.default.store_sales (41)
         :                                :           :     :     :     :  :     :           :     :     +- ReusedExchange (44)
         :                                :           :     :     :     :  :     :           :     +- BroadcastExchange (66)
         :                                :           :     :     :     :  :     :           :        +- * Project (65)
         :                                :           :     :     :     :  :     :           :           +- * Filter (64)
         :                                :           :     :     :     :  :     :           :              +- * HashAggregate (63)
         :                                :           :     :     :     :  :     :           :                 +- Exchange (62)
         :                                :           :     :     :     :  :     :           :                    +- * HashAggregate (61)
         :                                :           :     :     :     :  :     :           :                       +- * Project (60)
         :                                :           :     :     :     :  :     :           :                          +- * SortMergeJoin Inner (59)
         :                                :           :     :     :     :  :     :           :                             :- * Sort (52)
         :                                :           :     :     :     :  :     :           :                             :  +- Exchange (51)
         :                                :           :     :     :     :  :     :           :                             :     +- * Project (50)
         :                                :           :     :     :     :  :     :           :                             :        +- * Filter (49)
         :                                :           :     :     :     :  :     :           :                             :           +- * ColumnarToRow (48)
         :                                :           :     :     :     :  :     :           :                             :              +- Scan parquet spark_catalog.default.catalog_sales (47)
         :                                :           :     :     :     :  :     :           :                             +- * Sort (58)
         :                                :           :     :     :     :  :     :           :                                +- Exchange (57)
         :                                :           :     :     :     :  :     :           :                                   +- * Project (56)
         :                                :           :     :     :     :  :     :           :                                      +- * Filter (55)
         :                                :           :     :     :     :  :     :           :                                         +- * ColumnarToRow (54)
         :                                :           :     :     :     :  :     :           :                                            +- Scan parquet spark_catalog.default.catalog_returns (53)
         :                                :           :     :     :     :  :     :           +- BroadcastExchange (72)
         :                                :           :     :     :     :  :     :              +- * Filter (71)
         :                                :           :     :     :     :  :     :                 +- * ColumnarToRow (70)
         :                                :           :     :     :     :  :     :                    +- Scan parquet spark_catalog.default.store (69)
         :                                :           :     :     :     :  :     +- * Sort (82)
         :                                :           :     :     :     :  :        +- Exchange (81)
         :                                :           :     :     :     :  :           +- * Project (80)
         :                                :           :     :     :     :  :              +- * Filter (79)
         :                                :           :     :     :     :  :                 +- * ColumnarToRow (78)
         :                                :           :     :     :     :  :                    +- Scan parquet spark_catalog.default.store_returns (77)
         :                                :           :     :     :     :  +- BroadcastExchange (88)
         :                                :           :     :     :     :     +- * Filter (87)
         :                                :           :     :     :     :        +- * ColumnarToRow (86)
         :                                :           :     :     :     :           +- Scan parquet spark_catalog.default.date_dim (85)
         :                                :           :     :     :     +- ReusedExchange (90)
         :                                :           :     :     +- BroadcastExchange (97)
         :                                :           :     :        +- * Project (96)
         :                                :           :     :           +- * Filter (95)
         :                                :           :     :              +- * ColumnarToRow (94)
         :                                :           :     :                 +- Scan parquet spark_catalog.default.item (93)
         :                                :           :     +- BroadcastExchange (103)
         :                                :           :        +- * Filter (102)
         :                                :           :           +- * ColumnarToRow (101)
         :                                :           :              +- Scan parquet spark_catalog.default.promotion (100)
         :                                :           +- ReusedExchange (106)
         :                                +- * Sort (112)
         :                                   +- ReusedExchange (111)
         +- * Sort (172)
            +- Exchange (171)
               +- * HashAggregate (170)
                  +- Exchange (169)
                     +- * HashAggregate (168)
                        +- * Project (167)
                           +- * SortMergeJoin Inner (166)
                              :- * Sort (125)
                              :  +- ReusedExchange (124)
                              +- * Sort (165)
                                 +- Exchange (164)
                                    +- * Project (163)
                                       +- * SortMergeJoin Inner (162)
                                          :- * Sort (159)
                                          :  +- Exchange (158)
                                          :     +- * Project (157)
                                          :        +- * BroadcastHashJoin Inner BuildRight (156)
                                          :           :- * Project (154)
                                          :           :  +- * BroadcastHashJoin Inner BuildRight (153)
                                          :           :     :- * Project (151)
                                          :           :     :  +- * BroadcastHashJoin Inner BuildRight (150)
                                          :           :     :     :- * Project (148)
                                          :           :     :     :  +- * BroadcastNestedLoopJoin Inner BuildRight (147)
                                          :           :     :     :     :- * BroadcastNestedLoopJoin Inner BuildRight (145)
                                          :           :     :     :     :  :- * Project (143)
                                          :           :     :     :     :  :  +- * SortMergeJoin Inner (142)
                                          :           :     :     :     :  :     :- * Sort (139)
                                          :           :     :     :     :  :     :  +- Exchange (138)
                                          :           :     :     :     :  :     :     +- * Project (137)
                                          :           :     :     :     :  :     :        +- * BroadcastHashJoin Inner BuildRight (136)
                                          :           :     :     :     :  :     :           :- * Project (134)
                                          :           :     :     :     :  :     :           :  +- * BroadcastHashJoin Inner BuildRight (133)
                                          :           :     :     :     :  :     :           :     :- * Project (131)
                                          :           :     :     :     :  :     :           :     :  +- * BroadcastHashJoin Inner BuildRight (130)
                                          :           :     :     :     :  :     :           :     :     :- * Filter (128)
                                          :           :     :     :     :  :     :           :     :     :  +- * ColumnarToRow (127)
                                          :           :     :     :     :  :     :           :     :     :     +- Scan parquet spark_catalog.default.store_sales (126)
                                          :           :     :     :     :  :     :           :     :     +- ReusedExchange (129)
                                          :           :     :     :     :  :     :           :     +- ReusedExchange (132)
                                          :           :     :     :     :  :     :           +- ReusedExchange (135)
                                          :           :     :     :     :  :     +- * Sort (141)
                                          :           :     :     :     :  :        +- ReusedExchange (140)
                                          :           :     :     :     :  +- ReusedExchange (144)
                                          :           :     :     :     +- ReusedExchange (146)
                                          :           :     :     +- ReusedExchange (149)
                                          :           :     +- ReusedExchange (152)
                                          :           +- ReusedExchange (155)
                                          +- * Sort (161)
                                             +- ReusedExchange (160)


(1) Scan parquet spark_catalog.default.household_demographics
Output [2]: [hd_demo_sk#1, hd_income_band_sk#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_demo_sk), IsNotNull(hd_income_band_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_income_band_sk:int>

(2) ColumnarToRow [codegen id : 2]
Input [2]: [hd_demo_sk#1, hd_income_band_sk#2]

(3) Filter [codegen id : 2]
Input [2]: [hd_demo_sk#1, hd_income_band_sk#2]
Condition : (isnotnull(hd_demo_sk#1) AND isnotnull(hd_income_band_sk#2))

(4) Scan parquet spark_catalog.default.income_band
Output [1]: [ib_income_band_sk#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/income_band]
PushedFilters: [IsNotNull(ib_income_band_sk)]
ReadSchema: struct<ib_income_band_sk:int>

(5) ColumnarToRow [codegen id : 1]
Input [1]: [ib_income_band_sk#3]

(6) Filter [codegen id : 1]
Input [1]: [ib_income_band_sk#3]
Condition : isnotnull(ib_income_band_sk#3)

(7) BroadcastExchange
Input [1]: [ib_income_band_sk#3]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [hd_income_band_sk#2]
Right keys [1]: [ib_income_band_sk#3]
Join type: Inner
Join condition: None

(9) Project [codegen id : 2]
Output [1]: [hd_demo_sk#1]
Input [3]: [hd_demo_sk#1, hd_income_band_sk#2, ib_income_band_sk#3]

(10) BroadcastExchange
Input [1]: [hd_demo_sk#1]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(11) Scan parquet spark_catalog.default.customer
Output [6]: [c_customer_sk#4, c_current_cdemo_sk#5, c_current_hdemo_sk#6, c_current_addr_sk#7, c_first_shipto_date_sk#8, c_first_sales_date_sk#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_first_sales_date_sk), IsNotNull(c_first_shipto_date_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_hdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int,c_first_shipto_date_sk:int,c_first_sales_date_sk:int>

(12) ColumnarToRow
Input [6]: [c_customer_sk#4, c_current_cdemo_sk#5, c_current_hdemo_sk#6, c_current_addr_sk#7, c_first_shipto_date_sk#8, c_first_sales_date_sk#9]

(13) Filter
Input [6]: [c_customer_sk#4, c_current_cdemo_sk#5, c_current_hdemo_sk#6, c_current_addr_sk#7, c_first_shipto_date_sk#8, c_first_sales_date_sk#9]
Condition : (((((isnotnull(c_customer_sk#4) AND isnotnull(c_first_sales_date_sk#9)) AND isnotnull(c_first_shipto_date_sk#8)) AND isnotnull(c_current_cdemo_sk#5)) AND isnotnull(c_current_hdemo_sk#6)) AND isnotnull(c_current_addr_sk#7))

(14) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [hd_demo_sk#1]
Right keys [1]: [c_current_hdemo_sk#6]
Join type: Inner
Join condition: None

(15) Project [codegen id : 3]
Output [5]: [c_customer_sk#4, c_current_cdemo_sk#5, c_current_addr_sk#7, c_first_shipto_date_sk#8, c_first_sales_date_sk#9]
Input [7]: [hd_demo_sk#1, c_customer_sk#4, c_current_cdemo_sk#5, c_current_hdemo_sk#6, c_current_addr_sk#7, c_first_shipto_date_sk#8, c_first_sales_date_sk#9]

(16) Exchange
Input [5]: [c_customer_sk#4, c_current_cdemo_sk#5, c_current_addr_sk#7, c_first_shipto_date_sk#8, c_first_sales_date_sk#9]
Arguments: hashpartitioning(c_current_cdemo_sk#5, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(17) Sort [codegen id : 4]
Input [5]: [c_customer_sk#4, c_current_cdemo_sk#5, c_current_addr_sk#7, c_first_shipto_date_sk#8, c_first_sales_date_sk#9]
Arguments: [c_current_cdemo_sk#5 ASC NULLS FIRST], false, 0

(18) Scan parquet spark_catalog.default.customer_demographics
Output [2]: [cd_demo_sk#10, cd_marital_status#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string>

(19) ColumnarToRow [codegen id : 5]
Input [2]: [cd_demo_sk#10, cd_marital_status#11]

(20) Filter [codegen id : 5]
Input [2]: [cd_demo_sk#10, cd_marital_status#11]
Condition : (isnotnull(cd_demo_sk#10) AND isnotnull(cd_marital_status#11))

(21) Exchange
Input [2]: [cd_demo_sk#10, cd_marital_status#11]
Arguments: hashpartitioning(cd_demo_sk#10, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(22) Sort [codegen id : 6]
Input [2]: [cd_demo_sk#10, cd_marital_status#11]
Arguments: [cd_demo_sk#10 ASC NULLS FIRST], false, 0

(23) SortMergeJoin [codegen id : 7]
Left keys [1]: [c_current_cdemo_sk#5]
Right keys [1]: [cd_demo_sk#10]
Join type: Inner
Join condition: None

(24) Project [codegen id : 7]
Output [5]: [c_customer_sk#4, c_current_addr_sk#7, c_first_shipto_date_sk#8, c_first_sales_date_sk#9, cd_marital_status#11]
Input [7]: [c_customer_sk#4, c_current_cdemo_sk#5, c_current_addr_sk#7, c_first_shipto_date_sk#8, c_first_sales_date_sk#9, cd_demo_sk#10, cd_marital_status#11]

(25) Exchange
Input [5]: [c_customer_sk#4, c_current_addr_sk#7, c_first_shipto_date_sk#8, c_first_sales_date_sk#9, cd_marital_status#11]
Arguments: hashpartitioning(c_current_addr_sk#7, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(26) Sort [codegen id : 8]
Input [5]: [c_customer_sk#4, c_current_addr_sk#7, c_first_shipto_date_sk#8, c_first_sales_date_sk#9, cd_marital_status#11]
Arguments: [c_current_addr_sk#7 ASC NULLS FIRST], false, 0

(27) Scan parquet spark_catalog.default.customer_address
Output [5]: [ca_address_sk#12, ca_street_number#13, ca_street_name#14, ca_city#15, ca_zip#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_street_number:string,ca_street_name:string,ca_city:string,ca_zip:string>

(28) ColumnarToRow [codegen id : 9]
Input [5]: [ca_address_sk#12, ca_street_number#13, ca_street_name#14, ca_city#15, ca_zip#16]

(29) Filter [codegen id : 9]
Input [5]: [ca_address_sk#12, ca_street_number#13, ca_street_name#14, ca_city#15, ca_zip#16]
Condition : isnotnull(ca_address_sk#12)

(30) Exchange
Input [5]: [ca_address_sk#12, ca_street_number#13, ca_street_name#14, ca_city#15, ca_zip#16]
Arguments: hashpartitioning(ca_address_sk#12, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(31) Sort [codegen id : 10]
Input [5]: [ca_address_sk#12, ca_street_number#13, ca_street_name#14, ca_city#15, ca_zip#16]
Arguments: [ca_address_sk#12 ASC NULLS FIRST], false, 0

(32) SortMergeJoin [codegen id : 11]
Left keys [1]: [c_current_addr_sk#7]
Right keys [1]: [ca_address_sk#12]
Join type: Inner
Join condition: None

(33) Project [codegen id : 11]
Output [8]: [c_customer_sk#4, c_first_shipto_date_sk#8, c_first_sales_date_sk#9, cd_marital_status#11, ca_street_number#13, ca_street_name#14, ca_city#15, ca_zip#16]
Input [10]: [c_customer_sk#4, c_current_addr_sk#7, c_first_shipto_date_sk#8, c_first_sales_date_sk#9, cd_marital_status#11, ca_address_sk#12, ca_street_number#13, ca_street_name#14, ca_city#15, ca_zip#16]

(34) Scan parquet spark_catalog.default.customer_demographics
Output [2]: [cd_demo_sk#17, cd_marital_status#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string>

(35) ColumnarToRow [codegen id : 12]
Input [2]: [cd_demo_sk#17, cd_marital_status#18]

(36) Filter [codegen id : 12]
Input [2]: [cd_demo_sk#17, cd_marital_status#18]
Condition : (isnotnull(cd_demo_sk#17) AND isnotnull(cd_marital_status#18))

(37) CartesianProduct
Join type: Inner
Join condition: NOT (cd_marital_status#18 = cd_marital_status#11)

(38) Project [codegen id : 13]
Output [8]: [c_customer_sk#4, c_first_shipto_date_sk#8, c_first_sales_date_sk#9, ca_street_number#13, ca_street_name#14, ca_city#15, ca_zip#16, cd_demo_sk#17]
Input [10]: [c_customer_sk#4, c_first_shipto_date_sk#8, c_first_sales_date_sk#9, cd_marital_status#11, ca_street_number#13, ca_street_name#14, ca_city#15, ca_zip#16, cd_demo_sk#17, cd_marital_status#18]

(39) Exchange
Input [8]: [c_customer_sk#4, c_first_shipto_date_sk#8, c_first_sales_date_sk#9, ca_street_number#13, ca_street_name#14, ca_city#15, ca_zip#16, cd_demo_sk#17]
Arguments: hashpartitioning(c_customer_sk#4, c_first_sales_date_sk#9, c_first_shipto_date_sk#8, cd_demo_sk#17, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(40) Sort [codegen id : 14]
Input [8]: [c_customer_sk#4, c_first_shipto_date_sk#8, c_first_sales_date_sk#9, ca_street_number#13, ca_street_name#14, ca_city#15, ca_zip#16, cd_demo_sk#17]
Arguments: [c_customer_sk#4 ASC NULLS FIRST, c_first_sales_date_sk#9 ASC NULLS FIRST, c_first_shipto_date_sk#8 ASC NULLS FIRST, cd_demo_sk#17 ASC NULLS FIRST], false, 0

(41) Scan parquet spark_catalog.default.store_sales
Output [12]: [ss_item_sk#19, ss_customer_sk#20, ss_cdemo_sk#21, ss_hdemo_sk#22, ss_addr_sk#23, ss_store_sk#24, ss_promo_sk#25, ss_ticket_number#26, ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, ss_sold_date_sk#30]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#30), dynamicpruningexpression(ss_sold_date_sk#30 IN dynamicpruning#31)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_cdemo_sk), IsNotNull(ss_promo_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(42) ColumnarToRow [codegen id : 23]
Input [12]: [ss_item_sk#19, ss_customer_sk#20, ss_cdemo_sk#21, ss_hdemo_sk#22, ss_addr_sk#23, ss_store_sk#24, ss_promo_sk#25, ss_ticket_number#26, ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, ss_sold_date_sk#30]

(43) Filter [codegen id : 23]
Input [12]: [ss_item_sk#19, ss_customer_sk#20, ss_cdemo_sk#21, ss_hdemo_sk#22, ss_addr_sk#23, ss_store_sk#24, ss_promo_sk#25, ss_ticket_number#26, ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, ss_sold_date_sk#30]
Condition : ((((((((isnotnull(ss_item_sk#19) AND isnotnull(ss_ticket_number#26)) AND isnotnull(ss_store_sk#24)) AND isnotnull(ss_customer_sk#20)) AND isnotnull(ss_cdemo_sk#21)) AND isnotnull(ss_promo_sk#25)) AND isnotnull(ss_hdemo_sk#22)) AND isnotnull(ss_addr_sk#23)) AND might_contain(Subquery scalar-subquery#32, [id=#33], xxhash64(ss_item_sk#19, 42)))

(44) ReusedExchange [Reuses operator id: 187]
Output [2]: [d_date_sk#34, d_year#35]

(45) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [ss_sold_date_sk#30]
Right keys [1]: [d_date_sk#34]
Join type: Inner
Join condition: None

(46) Project [codegen id : 23]
Output [12]: [ss_item_sk#19, ss_customer_sk#20, ss_cdemo_sk#21, ss_hdemo_sk#22, ss_addr_sk#23, ss_store_sk#24, ss_promo_sk#25, ss_ticket_number#26, ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, d_year#35]
Input [14]: [ss_item_sk#19, ss_customer_sk#20, ss_cdemo_sk#21, ss_hdemo_sk#22, ss_addr_sk#23, ss_store_sk#24, ss_promo_sk#25, ss_ticket_number#26, ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, ss_sold_date_sk#30, d_date_sk#34, d_year#35]

(47) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_item_sk#36, cs_order_number#37, cs_ext_list_price#38, cs_sold_date_sk#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_order_number)]
ReadSchema: struct<cs_item_sk:int,cs_order_number:int,cs_ext_list_price:decimal(7,2)>

(48) ColumnarToRow [codegen id : 16]
Input [4]: [cs_item_sk#36, cs_order_number#37, cs_ext_list_price#38, cs_sold_date_sk#39]

(49) Filter [codegen id : 16]
Input [4]: [cs_item_sk#36, cs_order_number#37, cs_ext_list_price#38, cs_sold_date_sk#39]
Condition : (isnotnull(cs_item_sk#36) AND isnotnull(cs_order_number#37))

(50) Project [codegen id : 16]
Output [3]: [cs_item_sk#36, cs_order_number#37, cs_ext_list_price#38]
Input [4]: [cs_item_sk#36, cs_order_number#37, cs_ext_list_price#38, cs_sold_date_sk#39]

(51) Exchange
Input [3]: [cs_item_sk#36, cs_order_number#37, cs_ext_list_price#38]
Arguments: hashpartitioning(cs_item_sk#36, cs_order_number#37, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(52) Sort [codegen id : 17]
Input [3]: [cs_item_sk#36, cs_order_number#37, cs_ext_list_price#38]
Arguments: [cs_item_sk#36 ASC NULLS FIRST, cs_order_number#37 ASC NULLS FIRST], false, 0

(53) Scan parquet spark_catalog.default.catalog_returns
Output [6]: [cr_item_sk#40, cr_order_number#41, cr_refunded_cash#42, cr_reversed_charge#43, cr_store_credit#44, cr_returned_date_sk#45]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_refunded_cash:decimal(7,2),cr_reversed_charge:decimal(7,2),cr_store_credit:decimal(7,2)>

(54) ColumnarToRow [codegen id : 18]
Input [6]: [cr_item_sk#40, cr_order_number#41, cr_refunded_cash#42, cr_reversed_charge#43, cr_store_credit#44, cr_returned_date_sk#45]

(55) Filter [codegen id : 18]
Input [6]: [cr_item_sk#40, cr_order_number#41, cr_refunded_cash#42, cr_reversed_charge#43, cr_store_credit#44, cr_returned_date_sk#45]
Condition : (isnotnull(cr_item_sk#40) AND isnotnull(cr_order_number#41))

(56) Project [codegen id : 18]
Output [5]: [cr_item_sk#40, cr_order_number#41, cr_refunded_cash#42, cr_reversed_charge#43, cr_store_credit#44]
Input [6]: [cr_item_sk#40, cr_order_number#41, cr_refunded_cash#42, cr_reversed_charge#43, cr_store_credit#44, cr_returned_date_sk#45]

(57) Exchange
Input [5]: [cr_item_sk#40, cr_order_number#41, cr_refunded_cash#42, cr_reversed_charge#43, cr_store_credit#44]
Arguments: hashpartitioning(cr_item_sk#40, cr_order_number#41, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(58) Sort [codegen id : 19]
Input [5]: [cr_item_sk#40, cr_order_number#41, cr_refunded_cash#42, cr_reversed_charge#43, cr_store_credit#44]
Arguments: [cr_item_sk#40 ASC NULLS FIRST, cr_order_number#41 ASC NULLS FIRST], false, 0

(59) SortMergeJoin [codegen id : 20]
Left keys [2]: [cs_item_sk#36, cs_order_number#37]
Right keys [2]: [cr_item_sk#40, cr_order_number#41]
Join type: Inner
Join condition: None

(60) Project [codegen id : 20]
Output [5]: [cs_item_sk#36, cs_ext_list_price#38, cr_refunded_cash#42, cr_reversed_charge#43, cr_store_credit#44]
Input [8]: [cs_item_sk#36, cs_order_number#37, cs_ext_list_price#38, cr_item_sk#40, cr_order_number#41, cr_refunded_cash#42, cr_reversed_charge#43, cr_store_credit#44]

(61) HashAggregate [codegen id : 20]
Input [5]: [cs_item_sk#36, cs_ext_list_price#38, cr_refunded_cash#42, cr_reversed_charge#43, cr_store_credit#44]
Keys [1]: [cs_item_sk#36]
Functions [2]: [partial_sum(UnscaledValue(cs_ext_list_price#38)), partial_sum(((cr_refunded_cash#42 + cr_reversed_charge#43) + cr_store_credit#44))]
Aggregate Attributes [3]: [sum#46, sum#47, isEmpty#48]
Results [4]: [cs_item_sk#36, sum#49, sum#50, isEmpty#51]

(62) Exchange
Input [4]: [cs_item_sk#36, sum#49, sum#50, isEmpty#51]
Arguments: hashpartitioning(cs_item_sk#36, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(63) HashAggregate [codegen id : 21]
Input [4]: [cs_item_sk#36, sum#49, sum#50, isEmpty#51]
Keys [1]: [cs_item_sk#36]
Functions [2]: [sum(UnscaledValue(cs_ext_list_price#38)), sum(((cr_refunded_cash#42 + cr_reversed_charge#43) + cr_store_credit#44))]
Aggregate Attributes [2]: [sum(UnscaledValue(cs_ext_list_price#38))#52, sum(((cr_refunded_cash#42 + cr_reversed_charge#43) + cr_store_credit#44))#53]
Results [3]: [cs_item_sk#36, MakeDecimal(sum(UnscaledValue(cs_ext_list_price#38))#52,17,2) AS sale#54, sum(((cr_refunded_cash#42 + cr_reversed_charge#43) + cr_store_credit#44))#53 AS refund#55]

(64) Filter [codegen id : 21]
Input [3]: [cs_item_sk#36, sale#54, refund#55]
Condition : ((isnotnull(sale#54) AND isnotnull(refund#55)) AND (cast(sale#54 as decimal(21,2)) > (2 * refund#55)))

(65) Project [codegen id : 21]
Output [1]: [cs_item_sk#36]
Input [3]: [cs_item_sk#36, sale#54, refund#55]

(66) BroadcastExchange
Input [1]: [cs_item_sk#36]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=11]

(67) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [ss_item_sk#19]
Right keys [1]: [cs_item_sk#36]
Join type: Inner
Join condition: None

(68) Project [codegen id : 23]
Output [12]: [ss_item_sk#19, ss_customer_sk#20, ss_cdemo_sk#21, ss_hdemo_sk#22, ss_addr_sk#23, ss_store_sk#24, ss_promo_sk#25, ss_ticket_number#26, ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, d_year#35]
Input [13]: [ss_item_sk#19, ss_customer_sk#20, ss_cdemo_sk#21, ss_hdemo_sk#22, ss_addr_sk#23, ss_store_sk#24, ss_promo_sk#25, ss_ticket_number#26, ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, d_year#35, cs_item_sk#36]

(69) Scan parquet spark_catalog.default.store
Output [3]: [s_store_sk#56, s_store_name#57, s_zip#58]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_store_name), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_zip:string>

(70) ColumnarToRow [codegen id : 22]
Input [3]: [s_store_sk#56, s_store_name#57, s_zip#58]

(71) Filter [codegen id : 22]
Input [3]: [s_store_sk#56, s_store_name#57, s_zip#58]
Condition : ((isnotnull(s_store_sk#56) AND isnotnull(s_store_name#57)) AND isnotnull(s_zip#58))

(72) BroadcastExchange
Input [3]: [s_store_sk#56, s_store_name#57, s_zip#58]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=12]

(73) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [ss_store_sk#24]
Right keys [1]: [s_store_sk#56]
Join type: Inner
Join condition: None

(74) Project [codegen id : 23]
Output [13]: [ss_item_sk#19, ss_customer_sk#20, ss_cdemo_sk#21, ss_hdemo_sk#22, ss_addr_sk#23, ss_promo_sk#25, ss_ticket_number#26, ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, d_year#35, s_store_name#57, s_zip#58]
Input [15]: [ss_item_sk#19, ss_customer_sk#20, ss_cdemo_sk#21, ss_hdemo_sk#22, ss_addr_sk#23, ss_store_sk#24, ss_promo_sk#25, ss_ticket_number#26, ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, d_year#35, s_store_sk#56, s_store_name#57, s_zip#58]

(75) Exchange
Input [13]: [ss_item_sk#19, ss_customer_sk#20, ss_cdemo_sk#21, ss_hdemo_sk#22, ss_addr_sk#23, ss_promo_sk#25, ss_ticket_number#26, ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, d_year#35, s_store_name#57, s_zip#58]
Arguments: hashpartitioning(ss_item_sk#19, ss_ticket_number#26, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(76) Sort [codegen id : 24]
Input [13]: [ss_item_sk#19, ss_customer_sk#20, ss_cdemo_sk#21, ss_hdemo_sk#22, ss_addr_sk#23, ss_promo_sk#25, ss_ticket_number#26, ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, d_year#35, s_store_name#57, s_zip#58]
Arguments: [ss_item_sk#19 ASC NULLS FIRST, ss_ticket_number#26 ASC NULLS FIRST], false, 0

(77) Scan parquet spark_catalog.default.store_returns
Output [3]: [sr_item_sk#59, sr_ticket_number#60, sr_returned_date_sk#61]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(78) ColumnarToRow [codegen id : 25]
Input [3]: [sr_item_sk#59, sr_ticket_number#60, sr_returned_date_sk#61]

(79) Filter [codegen id : 25]
Input [3]: [sr_item_sk#59, sr_ticket_number#60, sr_returned_date_sk#61]
Condition : (isnotnull(sr_item_sk#59) AND isnotnull(sr_ticket_number#60))

(80) Project [codegen id : 25]
Output [2]: [sr_item_sk#59, sr_ticket_number#60]
Input [3]: [sr_item_sk#59, sr_ticket_number#60, sr_returned_date_sk#61]

(81) Exchange
Input [2]: [sr_item_sk#59, sr_ticket_number#60]
Arguments: hashpartitioning(sr_item_sk#59, sr_ticket_number#60, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(82) Sort [codegen id : 26]
Input [2]: [sr_item_sk#59, sr_ticket_number#60]
Arguments: [sr_item_sk#59 ASC NULLS FIRST, sr_ticket_number#60 ASC NULLS FIRST], false, 0

(83) SortMergeJoin [codegen id : 33]
Left keys [2]: [ss_item_sk#19, ss_ticket_number#26]
Right keys [2]: [sr_item_sk#59, sr_ticket_number#60]
Join type: Inner
Join condition: None

(84) Project [codegen id : 33]
Output [12]: [ss_item_sk#19, ss_customer_sk#20, ss_cdemo_sk#21, ss_hdemo_sk#22, ss_addr_sk#23, ss_promo_sk#25, ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, d_year#35, s_store_name#57, s_zip#58]
Input [15]: [ss_item_sk#19, ss_customer_sk#20, ss_cdemo_sk#21, ss_hdemo_sk#22, ss_addr_sk#23, ss_promo_sk#25, ss_ticket_number#26, ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, d_year#35, s_store_name#57, s_zip#58, sr_item_sk#59, sr_ticket_number#60]

(85) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#62, d_year#63]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(86) ColumnarToRow [codegen id : 27]
Input [2]: [d_date_sk#62, d_year#63]

(87) Filter [codegen id : 27]
Input [2]: [d_date_sk#62, d_year#63]
Condition : isnotnull(d_date_sk#62)

(88) BroadcastExchange
Input [2]: [d_date_sk#62, d_year#63]
Arguments: IdentityBroadcastMode, [plan_id=15]

(89) BroadcastNestedLoopJoin [codegen id : 33]
Join type: Inner
Join condition: None

(90) ReusedExchange [Reuses operator id: 88]
Output [2]: [d_date_sk#64, d_year#65]

(91) BroadcastNestedLoopJoin [codegen id : 33]
Join type: Inner
Join condition: None

(92) Project [codegen id : 33]
Output [16]: [ss_item_sk#19, ss_customer_sk#20, ss_cdemo_sk#21, ss_hdemo_sk#22, ss_addr_sk#23, ss_promo_sk#25, ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, d_year#35, d_date_sk#62, d_year#63, d_date_sk#64, d_year#65, s_store_name#57, s_zip#58]
Input [16]: [ss_item_sk#19, ss_customer_sk#20, ss_cdemo_sk#21, ss_hdemo_sk#22, ss_addr_sk#23, ss_promo_sk#25, ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, d_year#35, s_store_name#57, s_zip#58, d_date_sk#62, d_year#63, d_date_sk#64, d_year#65]

(93) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#66, i_current_price#67, i_color#68, i_product_name#69]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), In(i_color, [burlywood           ,floral              ,indian              ,medium              ,purple              ,spring              ]), GreaterThanOrEqual(i_current_price,64.00), LessThanOrEqual(i_current_price,74.00), GreaterThanOrEqual(i_current_price,65.00), LessThanOrEqual(i_current_price,79.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_color:string,i_product_name:string>

(94) ColumnarToRow [codegen id : 29]
Input [4]: [i_item_sk#66, i_current_price#67, i_color#68, i_product_name#69]

(95) Filter [codegen id : 29]
Input [4]: [i_item_sk#66, i_current_price#67, i_color#68, i_product_name#69]
Condition : ((((((isnotnull(i_current_price#67) AND i_color#68 IN (purple              ,burlywood           ,indian              ,spring              ,floral              ,medium              )) AND (i_current_price#67 >= 64.00)) AND (i_current_price#67 <= 74.00)) AND (i_current_price#67 >= 65.00)) AND (i_current_price#67 <= 79.00)) AND isnotnull(i_item_sk#66))

(96) Project [codegen id : 29]
Output [2]: [i_item_sk#66, i_product_name#69]
Input [4]: [i_item_sk#66, i_current_price#67, i_color#68, i_product_name#69]

(97) BroadcastExchange
Input [2]: [i_item_sk#66, i_product_name#69]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=16]

(98) BroadcastHashJoin [codegen id : 33]
Left keys [1]: [ss_item_sk#19]
Right keys [1]: [i_item_sk#66]
Join type: Inner
Join condition: None

(99) Project [codegen id : 33]
Output [17]: [ss_customer_sk#20, ss_cdemo_sk#21, ss_hdemo_sk#22, ss_addr_sk#23, ss_promo_sk#25, ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, d_year#35, d_date_sk#62, d_year#63, d_date_sk#64, d_year#65, s_store_name#57, s_zip#58, i_item_sk#66, i_product_name#69]
Input [18]: [ss_item_sk#19, ss_customer_sk#20, ss_cdemo_sk#21, ss_hdemo_sk#22, ss_addr_sk#23, ss_promo_sk#25, ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, d_year#35, d_date_sk#62, d_year#63, d_date_sk#64, d_year#65, s_store_name#57, s_zip#58, i_item_sk#66, i_product_name#69]

(100) Scan parquet spark_catalog.default.promotion
Output [1]: [p_promo_sk#70]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int>

(101) ColumnarToRow [codegen id : 30]
Input [1]: [p_promo_sk#70]

(102) Filter [codegen id : 30]
Input [1]: [p_promo_sk#70]
Condition : isnotnull(p_promo_sk#70)

(103) BroadcastExchange
Input [1]: [p_promo_sk#70]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=17]

(104) BroadcastHashJoin [codegen id : 33]
Left keys [1]: [ss_promo_sk#25]
Right keys [1]: [p_promo_sk#70]
Join type: Inner
Join condition: None

(105) Project [codegen id : 33]
Output [16]: [ss_customer_sk#20, ss_cdemo_sk#21, ss_hdemo_sk#22, ss_addr_sk#23, ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, d_year#35, d_date_sk#62, d_year#63, d_date_sk#64, d_year#65, s_store_name#57, s_zip#58, i_item_sk#66, i_product_name#69]
Input [18]: [ss_customer_sk#20, ss_cdemo_sk#21, ss_hdemo_sk#22, ss_addr_sk#23, ss_promo_sk#25, ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, d_year#35, d_date_sk#62, d_year#63, d_date_sk#64, d_year#65, s_store_name#57, s_zip#58, i_item_sk#66, i_product_name#69, p_promo_sk#70]

(106) ReusedExchange [Reuses operator id: 10]
Output [1]: [hd_demo_sk#71]

(107) BroadcastHashJoin [codegen id : 33]
Left keys [1]: [ss_hdemo_sk#22]
Right keys [1]: [hd_demo_sk#71]
Join type: Inner
Join condition: None

(108) Project [codegen id : 33]
Output [15]: [ss_customer_sk#20, ss_cdemo_sk#21, ss_addr_sk#23, ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, d_year#35, d_date_sk#62, d_year#63, d_date_sk#64, d_year#65, s_store_name#57, s_zip#58, i_item_sk#66, i_product_name#69]
Input [17]: [ss_customer_sk#20, ss_cdemo_sk#21, ss_hdemo_sk#22, ss_addr_sk#23, ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, d_year#35, d_date_sk#62, d_year#63, d_date_sk#64, d_year#65, s_store_name#57, s_zip#58, i_item_sk#66, i_product_name#69, hd_demo_sk#71]

(109) Exchange
Input [15]: [ss_customer_sk#20, ss_cdemo_sk#21, ss_addr_sk#23, ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, d_year#35, d_date_sk#62, d_year#63, d_date_sk#64, d_year#65, s_store_name#57, s_zip#58, i_item_sk#66, i_product_name#69]
Arguments: hashpartitioning(ss_addr_sk#23, 5), ENSURE_REQUIREMENTS, [plan_id=18]

(110) Sort [codegen id : 34]
Input [15]: [ss_customer_sk#20, ss_cdemo_sk#21, ss_addr_sk#23, ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, d_year#35, d_date_sk#62, d_year#63, d_date_sk#64, d_year#65, s_store_name#57, s_zip#58, i_item_sk#66, i_product_name#69]
Arguments: [ss_addr_sk#23 ASC NULLS FIRST], false, 0

(111) ReusedExchange [Reuses operator id: 30]
Output [5]: [ca_address_sk#72, ca_street_number#73, ca_street_name#74, ca_city#75, ca_zip#76]

(112) Sort [codegen id : 36]
Input [5]: [ca_address_sk#72, ca_street_number#73, ca_street_name#74, ca_city#75, ca_zip#76]
Arguments: [ca_address_sk#72 ASC NULLS FIRST], false, 0

(113) SortMergeJoin [codegen id : 37]
Left keys [1]: [ss_addr_sk#23]
Right keys [1]: [ca_address_sk#72]
Join type: Inner
Join condition: None

(114) Project [codegen id : 37]
Output [18]: [ss_customer_sk#20, ss_cdemo_sk#21, ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, d_year#35, d_date_sk#62, d_year#63, d_date_sk#64, d_year#65, s_store_name#57, s_zip#58, i_item_sk#66, i_product_name#69, ca_street_number#73, ca_street_name#74, ca_city#75, ca_zip#76]
Input [20]: [ss_customer_sk#20, ss_cdemo_sk#21, ss_addr_sk#23, ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, d_year#35, d_date_sk#62, d_year#63, d_date_sk#64, d_year#65, s_store_name#57, s_zip#58, i_item_sk#66, i_product_name#69, ca_address_sk#72, ca_street_number#73, ca_street_name#74, ca_city#75, ca_zip#76]

(115) Exchange
Input [18]: [ss_customer_sk#20, ss_cdemo_sk#21, ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, d_year#35, d_date_sk#62, d_year#63, d_date_sk#64, d_year#65, s_store_name#57, s_zip#58, i_item_sk#66, i_product_name#69, ca_street_number#73, ca_street_name#74, ca_city#75, ca_zip#76]
Arguments: hashpartitioning(ss_customer_sk#20, d_date_sk#62, d_date_sk#64, ss_cdemo_sk#21, 5), ENSURE_REQUIREMENTS, [plan_id=19]

(116) Sort [codegen id : 38]
Input [18]: [ss_customer_sk#20, ss_cdemo_sk#21, ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, d_year#35, d_date_sk#62, d_year#63, d_date_sk#64, d_year#65, s_store_name#57, s_zip#58, i_item_sk#66, i_product_name#69, ca_street_number#73, ca_street_name#74, ca_city#75, ca_zip#76]
Arguments: [ss_customer_sk#20 ASC NULLS FIRST, d_date_sk#62 ASC NULLS FIRST, d_date_sk#64 ASC NULLS FIRST, ss_cdemo_sk#21 ASC NULLS FIRST], false, 0

(117) SortMergeJoin [codegen id : 39]
Left keys [4]: [c_customer_sk#4, c_first_sales_date_sk#9, c_first_shipto_date_sk#8, cd_demo_sk#17]
Right keys [4]: [ss_customer_sk#20, d_date_sk#62, d_date_sk#64, ss_cdemo_sk#21]
Join type: Inner
Join condition: None

(118) Project [codegen id : 39]
Output [18]: [ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, d_year#35, d_year#63, d_year#65, s_store_name#57, s_zip#58, ca_street_number#73, ca_street_name#74, ca_city#75, ca_zip#76, ca_street_number#13, ca_street_name#14, ca_city#15, ca_zip#16, i_item_sk#66, i_product_name#69]
Input [26]: [c_customer_sk#4, c_first_shipto_date_sk#8, c_first_sales_date_sk#9, ca_street_number#13, ca_street_name#14, ca_city#15, ca_zip#16, cd_demo_sk#17, ss_customer_sk#20, ss_cdemo_sk#21, ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, d_year#35, d_date_sk#62, d_year#63, d_date_sk#64, d_year#65, s_store_name#57, s_zip#58, i_item_sk#66, i_product_name#69, ca_street_number#73, ca_street_name#74, ca_city#75, ca_zip#76]

(119) HashAggregate [codegen id : 39]
Input [18]: [ss_wholesale_cost#27, ss_list_price#28, ss_coupon_amt#29, d_year#35, d_year#63, d_year#65, s_store_name#57, s_zip#58, ca_street_number#73, ca_street_name#74, ca_city#75, ca_zip#76, ca_street_number#13, ca_street_name#14, ca_city#15, ca_zip#16, i_item_sk#66, i_product_name#69]
Keys [15]: [i_product_name#69, i_item_sk#66, s_store_name#57, s_zip#58, ca_street_number#73, ca_street_name#74, ca_city#75, ca_zip#76, ca_street_number#13, ca_street_name#14, ca_city#15, ca_zip#16, d_year#35, d_year#63, d_year#65]
Functions [4]: [partial_count(1), partial_sum(UnscaledValue(ss_wholesale_cost#27)), partial_sum(UnscaledValue(ss_list_price#28)), partial_sum(UnscaledValue(ss_coupon_amt#29))]
Aggregate Attributes [4]: [count#77, sum#78, sum#79, sum#80]
Results [19]: [i_product_name#69, i_item_sk#66, s_store_name#57, s_zip#58, ca_street_number#73, ca_street_name#74, ca_city#75, ca_zip#76, ca_street_number#13, ca_street_name#14, ca_city#15, ca_zip#16, d_year#35, d_year#63, d_year#65, count#81, sum#82, sum#83, sum#84]

(120) Exchange
Input [19]: [i_product_name#69, i_item_sk#66, s_store_name#57, s_zip#58, ca_street_number#73, ca_street_name#74, ca_city#75, ca_zip#76, ca_street_number#13, ca_street_name#14, ca_city#15, ca_zip#16, d_year#35, d_year#63, d_year#65, count#81, sum#82, sum#83, sum#84]
Arguments: hashpartitioning(i_product_name#69, i_item_sk#66, s_store_name#57, s_zip#58, ca_street_number#73, ca_street_name#74, ca_city#75, ca_zip#76, ca_street_number#13, ca_street_name#14, ca_city#15, ca_zip#16, d_year#35, d_year#63, d_year#65, 5), ENSURE_REQUIREMENTS, [plan_id=20]

(121) HashAggregate [codegen id : 40]
Input [19]: [i_product_name#69, i_item_sk#66, s_store_name#57, s_zip#58, ca_street_number#73, ca_street_name#74, ca_city#75, ca_zip#76, ca_street_number#13, ca_street_name#14, ca_city#15, ca_zip#16, d_year#35, d_year#63, d_year#65, count#81, sum#82, sum#83, sum#84]
Keys [15]: [i_product_name#69, i_item_sk#66, s_store_name#57, s_zip#58, ca_street_number#73, ca_street_name#74, ca_city#75, ca_zip#76, ca_street_number#13, ca_street_name#14, ca_city#15, ca_zip#16, d_year#35, d_year#63, d_year#65]
Functions [4]: [count(1), sum(UnscaledValue(ss_wholesale_cost#27)), sum(UnscaledValue(ss_list_price#28)), sum(UnscaledValue(ss_coupon_amt#29))]
Aggregate Attributes [4]: [count(1)#85, sum(UnscaledValue(ss_wholesale_cost#27))#86, sum(UnscaledValue(ss_list_price#28))#87, sum(UnscaledValue(ss_coupon_amt#29))#88]
Results [17]: [i_product_name#69 AS product_name#89, i_item_sk#66 AS item_sk#90, s_store_name#57 AS store_name#91, s_zip#58 AS store_zip#92, ca_street_number#73 AS b_street_number#93, ca_street_name#74 AS b_streen_name#94, ca_city#75 AS b_city#95, ca_zip#76 AS b_zip#96, ca_street_number#13 AS c_street_number#97, ca_street_name#14 AS c_street_name#98, ca_city#15 AS c_city#99, ca_zip#16 AS c_zip#100, d_year#35 AS syear#101, count(1)#85 AS cnt#102, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#27))#86,17,2) AS s1#103, MakeDecimal(sum(UnscaledValue(ss_list_price#28))#87,17,2) AS s2#104, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#29))#88,17,2) AS s3#105]

(122) Exchange
Input [17]: [product_name#89, item_sk#90, store_name#91, store_zip#92, b_street_number#93, b_streen_name#94, b_city#95, b_zip#96, c_street_number#97, c_street_name#98, c_city#99, c_zip#100, syear#101, cnt#102, s1#103, s2#104, s3#105]
Arguments: hashpartitioning(item_sk#90, store_name#91, store_zip#92, 5), ENSURE_REQUIREMENTS, [plan_id=21]

(123) Sort [codegen id : 41]
Input [17]: [product_name#89, item_sk#90, store_name#91, store_zip#92, b_street_number#93, b_streen_name#94, b_city#95, b_zip#96, c_street_number#97, c_street_name#98, c_city#99, c_zip#100, syear#101, cnt#102, s1#103, s2#104, s3#105]
Arguments: [item_sk#90 ASC NULLS FIRST, store_name#91 ASC NULLS FIRST, store_zip#92 ASC NULLS FIRST], false, 0

(124) ReusedExchange [Reuses operator id: 39]
Output [8]: [c_customer_sk#106, c_first_shipto_date_sk#107, c_first_sales_date_sk#108, ca_street_number#109, ca_street_name#110, ca_city#111, ca_zip#112, cd_demo_sk#113]

(125) Sort [codegen id : 55]
Input [8]: [c_customer_sk#106, c_first_shipto_date_sk#107, c_first_sales_date_sk#108, ca_street_number#109, ca_street_name#110, ca_city#111, ca_zip#112, cd_demo_sk#113]
Arguments: [c_customer_sk#106 ASC NULLS FIRST, c_first_sales_date_sk#108 ASC NULLS FIRST, c_first_shipto_date_sk#107 ASC NULLS FIRST, cd_demo_sk#113 ASC NULLS FIRST], false, 0

(126) Scan parquet spark_catalog.default.store_sales
Output [12]: [ss_item_sk#114, ss_customer_sk#115, ss_cdemo_sk#116, ss_hdemo_sk#117, ss_addr_sk#118, ss_store_sk#119, ss_promo_sk#120, ss_ticket_number#121, ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, ss_sold_date_sk#125]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#125), dynamicpruningexpression(ss_sold_date_sk#125 IN dynamicpruning#126)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_cdemo_sk), IsNotNull(ss_promo_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(127) ColumnarToRow [codegen id : 64]
Input [12]: [ss_item_sk#114, ss_customer_sk#115, ss_cdemo_sk#116, ss_hdemo_sk#117, ss_addr_sk#118, ss_store_sk#119, ss_promo_sk#120, ss_ticket_number#121, ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, ss_sold_date_sk#125]

(128) Filter [codegen id : 64]
Input [12]: [ss_item_sk#114, ss_customer_sk#115, ss_cdemo_sk#116, ss_hdemo_sk#117, ss_addr_sk#118, ss_store_sk#119, ss_promo_sk#120, ss_ticket_number#121, ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, ss_sold_date_sk#125]
Condition : ((((((((isnotnull(ss_item_sk#114) AND isnotnull(ss_ticket_number#121)) AND isnotnull(ss_store_sk#119)) AND isnotnull(ss_customer_sk#115)) AND isnotnull(ss_cdemo_sk#116)) AND isnotnull(ss_promo_sk#120)) AND isnotnull(ss_hdemo_sk#117)) AND isnotnull(ss_addr_sk#118)) AND might_contain(ReusedSubquery Subquery scalar-subquery#32, [id=#33], xxhash64(ss_item_sk#114, 42)))

(129) ReusedExchange [Reuses operator id: 191]
Output [2]: [d_date_sk#127, d_year#128]

(130) BroadcastHashJoin [codegen id : 64]
Left keys [1]: [ss_sold_date_sk#125]
Right keys [1]: [d_date_sk#127]
Join type: Inner
Join condition: None

(131) Project [codegen id : 64]
Output [12]: [ss_item_sk#114, ss_customer_sk#115, ss_cdemo_sk#116, ss_hdemo_sk#117, ss_addr_sk#118, ss_store_sk#119, ss_promo_sk#120, ss_ticket_number#121, ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, d_year#128]
Input [14]: [ss_item_sk#114, ss_customer_sk#115, ss_cdemo_sk#116, ss_hdemo_sk#117, ss_addr_sk#118, ss_store_sk#119, ss_promo_sk#120, ss_ticket_number#121, ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, ss_sold_date_sk#125, d_date_sk#127, d_year#128]

(132) ReusedExchange [Reuses operator id: 66]
Output [1]: [cs_item_sk#129]

(133) BroadcastHashJoin [codegen id : 64]
Left keys [1]: [ss_item_sk#114]
Right keys [1]: [cs_item_sk#129]
Join type: Inner
Join condition: None

(134) Project [codegen id : 64]
Output [12]: [ss_item_sk#114, ss_customer_sk#115, ss_cdemo_sk#116, ss_hdemo_sk#117, ss_addr_sk#118, ss_store_sk#119, ss_promo_sk#120, ss_ticket_number#121, ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, d_year#128]
Input [13]: [ss_item_sk#114, ss_customer_sk#115, ss_cdemo_sk#116, ss_hdemo_sk#117, ss_addr_sk#118, ss_store_sk#119, ss_promo_sk#120, ss_ticket_number#121, ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, d_year#128, cs_item_sk#129]

(135) ReusedExchange [Reuses operator id: 72]
Output [3]: [s_store_sk#130, s_store_name#131, s_zip#132]

(136) BroadcastHashJoin [codegen id : 64]
Left keys [1]: [ss_store_sk#119]
Right keys [1]: [s_store_sk#130]
Join type: Inner
Join condition: None

(137) Project [codegen id : 64]
Output [13]: [ss_item_sk#114, ss_customer_sk#115, ss_cdemo_sk#116, ss_hdemo_sk#117, ss_addr_sk#118, ss_promo_sk#120, ss_ticket_number#121, ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, d_year#128, s_store_name#131, s_zip#132]
Input [15]: [ss_item_sk#114, ss_customer_sk#115, ss_cdemo_sk#116, ss_hdemo_sk#117, ss_addr_sk#118, ss_store_sk#119, ss_promo_sk#120, ss_ticket_number#121, ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, d_year#128, s_store_sk#130, s_store_name#131, s_zip#132]

(138) Exchange
Input [13]: [ss_item_sk#114, ss_customer_sk#115, ss_cdemo_sk#116, ss_hdemo_sk#117, ss_addr_sk#118, ss_promo_sk#120, ss_ticket_number#121, ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, d_year#128, s_store_name#131, s_zip#132]
Arguments: hashpartitioning(ss_item_sk#114, ss_ticket_number#121, 5), ENSURE_REQUIREMENTS, [plan_id=22]

(139) Sort [codegen id : 65]
Input [13]: [ss_item_sk#114, ss_customer_sk#115, ss_cdemo_sk#116, ss_hdemo_sk#117, ss_addr_sk#118, ss_promo_sk#120, ss_ticket_number#121, ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, d_year#128, s_store_name#131, s_zip#132]
Arguments: [ss_item_sk#114 ASC NULLS FIRST, ss_ticket_number#121 ASC NULLS FIRST], false, 0

(140) ReusedExchange [Reuses operator id: 81]
Output [2]: [sr_item_sk#133, sr_ticket_number#134]

(141) Sort [codegen id : 67]
Input [2]: [sr_item_sk#133, sr_ticket_number#134]
Arguments: [sr_item_sk#133 ASC NULLS FIRST, sr_ticket_number#134 ASC NULLS FIRST], false, 0

(142) SortMergeJoin [codegen id : 74]
Left keys [2]: [ss_item_sk#114, ss_ticket_number#121]
Right keys [2]: [sr_item_sk#133, sr_ticket_number#134]
Join type: Inner
Join condition: None

(143) Project [codegen id : 74]
Output [12]: [ss_item_sk#114, ss_customer_sk#115, ss_cdemo_sk#116, ss_hdemo_sk#117, ss_addr_sk#118, ss_promo_sk#120, ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, d_year#128, s_store_name#131, s_zip#132]
Input [15]: [ss_item_sk#114, ss_customer_sk#115, ss_cdemo_sk#116, ss_hdemo_sk#117, ss_addr_sk#118, ss_promo_sk#120, ss_ticket_number#121, ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, d_year#128, s_store_name#131, s_zip#132, sr_item_sk#133, sr_ticket_number#134]

(144) ReusedExchange [Reuses operator id: 88]
Output [2]: [d_date_sk#135, d_year#136]

(145) BroadcastNestedLoopJoin [codegen id : 74]
Join type: Inner
Join condition: None

(146) ReusedExchange [Reuses operator id: 88]
Output [2]: [d_date_sk#137, d_year#138]

(147) BroadcastNestedLoopJoin [codegen id : 74]
Join type: Inner
Join condition: None

(148) Project [codegen id : 74]
Output [16]: [ss_item_sk#114, ss_customer_sk#115, ss_cdemo_sk#116, ss_hdemo_sk#117, ss_addr_sk#118, ss_promo_sk#120, ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, d_year#128, d_date_sk#135, d_year#136, d_date_sk#137, d_year#138, s_store_name#131, s_zip#132]
Input [16]: [ss_item_sk#114, ss_customer_sk#115, ss_cdemo_sk#116, ss_hdemo_sk#117, ss_addr_sk#118, ss_promo_sk#120, ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, d_year#128, s_store_name#131, s_zip#132, d_date_sk#135, d_year#136, d_date_sk#137, d_year#138]

(149) ReusedExchange [Reuses operator id: 97]
Output [2]: [i_item_sk#139, i_product_name#140]

(150) BroadcastHashJoin [codegen id : 74]
Left keys [1]: [ss_item_sk#114]
Right keys [1]: [i_item_sk#139]
Join type: Inner
Join condition: None

(151) Project [codegen id : 74]
Output [17]: [ss_customer_sk#115, ss_cdemo_sk#116, ss_hdemo_sk#117, ss_addr_sk#118, ss_promo_sk#120, ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, d_year#128, d_date_sk#135, d_year#136, d_date_sk#137, d_year#138, s_store_name#131, s_zip#132, i_item_sk#139, i_product_name#140]
Input [18]: [ss_item_sk#114, ss_customer_sk#115, ss_cdemo_sk#116, ss_hdemo_sk#117, ss_addr_sk#118, ss_promo_sk#120, ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, d_year#128, d_date_sk#135, d_year#136, d_date_sk#137, d_year#138, s_store_name#131, s_zip#132, i_item_sk#139, i_product_name#140]

(152) ReusedExchange [Reuses operator id: 103]
Output [1]: [p_promo_sk#141]

(153) BroadcastHashJoin [codegen id : 74]
Left keys [1]: [ss_promo_sk#120]
Right keys [1]: [p_promo_sk#141]
Join type: Inner
Join condition: None

(154) Project [codegen id : 74]
Output [16]: [ss_customer_sk#115, ss_cdemo_sk#116, ss_hdemo_sk#117, ss_addr_sk#118, ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, d_year#128, d_date_sk#135, d_year#136, d_date_sk#137, d_year#138, s_store_name#131, s_zip#132, i_item_sk#139, i_product_name#140]
Input [18]: [ss_customer_sk#115, ss_cdemo_sk#116, ss_hdemo_sk#117, ss_addr_sk#118, ss_promo_sk#120, ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, d_year#128, d_date_sk#135, d_year#136, d_date_sk#137, d_year#138, s_store_name#131, s_zip#132, i_item_sk#139, i_product_name#140, p_promo_sk#141]

(155) ReusedExchange [Reuses operator id: 10]
Output [1]: [hd_demo_sk#142]

(156) BroadcastHashJoin [codegen id : 74]
Left keys [1]: [ss_hdemo_sk#117]
Right keys [1]: [hd_demo_sk#142]
Join type: Inner
Join condition: None

(157) Project [codegen id : 74]
Output [15]: [ss_customer_sk#115, ss_cdemo_sk#116, ss_addr_sk#118, ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, d_year#128, d_date_sk#135, d_year#136, d_date_sk#137, d_year#138, s_store_name#131, s_zip#132, i_item_sk#139, i_product_name#140]
Input [17]: [ss_customer_sk#115, ss_cdemo_sk#116, ss_hdemo_sk#117, ss_addr_sk#118, ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, d_year#128, d_date_sk#135, d_year#136, d_date_sk#137, d_year#138, s_store_name#131, s_zip#132, i_item_sk#139, i_product_name#140, hd_demo_sk#142]

(158) Exchange
Input [15]: [ss_customer_sk#115, ss_cdemo_sk#116, ss_addr_sk#118, ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, d_year#128, d_date_sk#135, d_year#136, d_date_sk#137, d_year#138, s_store_name#131, s_zip#132, i_item_sk#139, i_product_name#140]
Arguments: hashpartitioning(ss_addr_sk#118, 5), ENSURE_REQUIREMENTS, [plan_id=23]

(159) Sort [codegen id : 75]
Input [15]: [ss_customer_sk#115, ss_cdemo_sk#116, ss_addr_sk#118, ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, d_year#128, d_date_sk#135, d_year#136, d_date_sk#137, d_year#138, s_store_name#131, s_zip#132, i_item_sk#139, i_product_name#140]
Arguments: [ss_addr_sk#118 ASC NULLS FIRST], false, 0

(160) ReusedExchange [Reuses operator id: 30]
Output [5]: [ca_address_sk#143, ca_street_number#144, ca_street_name#145, ca_city#146, ca_zip#147]

(161) Sort [codegen id : 77]
Input [5]: [ca_address_sk#143, ca_street_number#144, ca_street_name#145, ca_city#146, ca_zip#147]
Arguments: [ca_address_sk#143 ASC NULLS FIRST], false, 0

(162) SortMergeJoin [codegen id : 78]
Left keys [1]: [ss_addr_sk#118]
Right keys [1]: [ca_address_sk#143]
Join type: Inner
Join condition: None

(163) Project [codegen id : 78]
Output [18]: [ss_customer_sk#115, ss_cdemo_sk#116, ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, d_year#128, d_date_sk#135, d_year#136, d_date_sk#137, d_year#138, s_store_name#131, s_zip#132, i_item_sk#139, i_product_name#140, ca_street_number#144, ca_street_name#145, ca_city#146, ca_zip#147]
Input [20]: [ss_customer_sk#115, ss_cdemo_sk#116, ss_addr_sk#118, ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, d_year#128, d_date_sk#135, d_year#136, d_date_sk#137, d_year#138, s_store_name#131, s_zip#132, i_item_sk#139, i_product_name#140, ca_address_sk#143, ca_street_number#144, ca_street_name#145, ca_city#146, ca_zip#147]

(164) Exchange
Input [18]: [ss_customer_sk#115, ss_cdemo_sk#116, ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, d_year#128, d_date_sk#135, d_year#136, d_date_sk#137, d_year#138, s_store_name#131, s_zip#132, i_item_sk#139, i_product_name#140, ca_street_number#144, ca_street_name#145, ca_city#146, ca_zip#147]
Arguments: hashpartitioning(ss_customer_sk#115, d_date_sk#135, d_date_sk#137, ss_cdemo_sk#116, 5), ENSURE_REQUIREMENTS, [plan_id=24]

(165) Sort [codegen id : 79]
Input [18]: [ss_customer_sk#115, ss_cdemo_sk#116, ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, d_year#128, d_date_sk#135, d_year#136, d_date_sk#137, d_year#138, s_store_name#131, s_zip#132, i_item_sk#139, i_product_name#140, ca_street_number#144, ca_street_name#145, ca_city#146, ca_zip#147]
Arguments: [ss_customer_sk#115 ASC NULLS FIRST, d_date_sk#135 ASC NULLS FIRST, d_date_sk#137 ASC NULLS FIRST, ss_cdemo_sk#116 ASC NULLS FIRST], false, 0

(166) SortMergeJoin [codegen id : 80]
Left keys [4]: [c_customer_sk#106, c_first_sales_date_sk#108, c_first_shipto_date_sk#107, cd_demo_sk#113]
Right keys [4]: [ss_customer_sk#115, d_date_sk#135, d_date_sk#137, ss_cdemo_sk#116]
Join type: Inner
Join condition: None

(167) Project [codegen id : 80]
Output [18]: [ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, d_year#128, d_year#136, d_year#138, s_store_name#131, s_zip#132, ca_street_number#144, ca_street_name#145, ca_city#146, ca_zip#147, ca_street_number#109, ca_street_name#110, ca_city#111, ca_zip#112, i_item_sk#139, i_product_name#140]
Input [26]: [c_customer_sk#106, c_first_shipto_date_sk#107, c_first_sales_date_sk#108, ca_street_number#109, ca_street_name#110, ca_city#111, ca_zip#112, cd_demo_sk#113, ss_customer_sk#115, ss_cdemo_sk#116, ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, d_year#128, d_date_sk#135, d_year#136, d_date_sk#137, d_year#138, s_store_name#131, s_zip#132, i_item_sk#139, i_product_name#140, ca_street_number#144, ca_street_name#145, ca_city#146, ca_zip#147]

(168) HashAggregate [codegen id : 80]
Input [18]: [ss_wholesale_cost#122, ss_list_price#123, ss_coupon_amt#124, d_year#128, d_year#136, d_year#138, s_store_name#131, s_zip#132, ca_street_number#144, ca_street_name#145, ca_city#146, ca_zip#147, ca_street_number#109, ca_street_name#110, ca_city#111, ca_zip#112, i_item_sk#139, i_product_name#140]
Keys [15]: [i_product_name#140, i_item_sk#139, s_store_name#131, s_zip#132, ca_street_number#144, ca_street_name#145, ca_city#146, ca_zip#147, ca_street_number#109, ca_street_name#110, ca_city#111, ca_zip#112, d_year#128, d_year#136, d_year#138]
Functions [4]: [partial_count(1), partial_sum(UnscaledValue(ss_wholesale_cost#122)), partial_sum(UnscaledValue(ss_list_price#123)), partial_sum(UnscaledValue(ss_coupon_amt#124))]
Aggregate Attributes [4]: [count#77, sum#148, sum#149, sum#150]
Results [19]: [i_product_name#140, i_item_sk#139, s_store_name#131, s_zip#132, ca_street_number#144, ca_street_name#145, ca_city#146, ca_zip#147, ca_street_number#109, ca_street_name#110, ca_city#111, ca_zip#112, d_year#128, d_year#136, d_year#138, count#81, sum#151, sum#152, sum#153]

(169) Exchange
Input [19]: [i_product_name#140, i_item_sk#139, s_store_name#131, s_zip#132, ca_street_number#144, ca_street_name#145, ca_city#146, ca_zip#147, ca_street_number#109, ca_street_name#110, ca_city#111, ca_zip#112, d_year#128, d_year#136, d_year#138, count#81, sum#151, sum#152, sum#153]
Arguments: hashpartitioning(i_product_name#140, i_item_sk#139, s_store_name#131, s_zip#132, ca_street_number#144, ca_street_name#145, ca_city#146, ca_zip#147, ca_street_number#109, ca_street_name#110, ca_city#111, ca_zip#112, d_year#128, d_year#136, d_year#138, 5), ENSURE_REQUIREMENTS, [plan_id=25]

(170) HashAggregate [codegen id : 81]
Input [19]: [i_product_name#140, i_item_sk#139, s_store_name#131, s_zip#132, ca_street_number#144, ca_street_name#145, ca_city#146, ca_zip#147, ca_street_number#109, ca_street_name#110, ca_city#111, ca_zip#112, d_year#128, d_year#136, d_year#138, count#81, sum#151, sum#152, sum#153]
Keys [15]: [i_product_name#140, i_item_sk#139, s_store_name#131, s_zip#132, ca_street_number#144, ca_street_name#145, ca_city#146, ca_zip#147, ca_street_number#109, ca_street_name#110, ca_city#111, ca_zip#112, d_year#128, d_year#136, d_year#138]
Functions [4]: [count(1), sum(UnscaledValue(ss_wholesale_cost#122)), sum(UnscaledValue(ss_list_price#123)), sum(UnscaledValue(ss_coupon_amt#124))]
Aggregate Attributes [4]: [count(1)#85, sum(UnscaledValue(ss_wholesale_cost#122))#86, sum(UnscaledValue(ss_list_price#123))#87, sum(UnscaledValue(ss_coupon_amt#124))#88]
Results [8]: [i_item_sk#139 AS item_sk#154, s_store_name#131 AS store_name#155, s_zip#132 AS store_zip#156, d_year#128 AS syear#157, count(1)#85 AS cnt#158, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#122))#86,17,2) AS s1#159, MakeDecimal(sum(UnscaledValue(ss_list_price#123))#87,17,2) AS s2#160, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#124))#88,17,2) AS s3#161]

(171) Exchange
Input [8]: [item_sk#154, store_name#155, store_zip#156, syear#157, cnt#158, s1#159, s2#160, s3#161]
Arguments: hashpartitioning(item_sk#154, store_name#155, store_zip#156, 5), ENSURE_REQUIREMENTS, [plan_id=26]

(172) Sort [codegen id : 82]
Input [8]: [item_sk#154, store_name#155, store_zip#156, syear#157, cnt#158, s1#159, s2#160, s3#161]
Arguments: [item_sk#154 ASC NULLS FIRST, store_name#155 ASC NULLS FIRST, store_zip#156 ASC NULLS FIRST], false, 0

(173) SortMergeJoin [codegen id : 83]
Left keys [3]: [item_sk#90, store_name#91, store_zip#92]
Right keys [3]: [item_sk#154, store_name#155, store_zip#156]
Join type: Inner
Join condition: (cnt#158 <= cnt#102)

(174) Project [codegen id : 83]
Output [21]: [product_name#89, store_name#91, store_zip#92, b_street_number#93, b_streen_name#94, b_city#95, b_zip#96, c_street_number#97, c_street_name#98, c_city#99, c_zip#100, syear#101, cnt#102, s1#103, s2#104, s3#105, s1#159, s2#160, s3#161, syear#157, cnt#158]
Input [25]: [product_name#89, item_sk#90, store_name#91, store_zip#92, b_street_number#93, b_streen_name#94, b_city#95, b_zip#96, c_street_number#97, c_street_name#98, c_city#99, c_zip#100, syear#101, cnt#102, s1#103, s2#104, s3#105, item_sk#154, store_name#155, store_zip#156, syear#157, cnt#158, s1#159, s2#160, s3#161]

(175) Exchange
Input [21]: [product_name#89, store_name#91, store_zip#92, b_street_number#93, b_streen_name#94, b_city#95, b_zip#96, c_street_number#97, c_street_name#98, c_city#99, c_zip#100, syear#101, cnt#102, s1#103, s2#104, s3#105, s1#159, s2#160, s3#161, syear#157, cnt#158]
Arguments: rangepartitioning(product_name#89 ASC NULLS FIRST, store_name#91 ASC NULLS FIRST, cnt#158 ASC NULLS FIRST, s1#103 ASC NULLS FIRST, s1#159 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [plan_id=27]

(176) Sort [codegen id : 84]
Input [21]: [product_name#89, store_name#91, store_zip#92, b_street_number#93, b_streen_name#94, b_city#95, b_zip#96, c_street_number#97, c_street_name#98, c_city#99, c_zip#100, syear#101, cnt#102, s1#103, s2#104, s3#105, s1#159, s2#160, s3#161, syear#157, cnt#158]
Arguments: [product_name#89 ASC NULLS FIRST, store_name#91 ASC NULLS FIRST, cnt#158 ASC NULLS FIRST, s1#103 ASC NULLS FIRST, s1#159 ASC NULLS FIRST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 43 Hosting Expression = Subquery scalar-subquery#32, [id=#33]
ObjectHashAggregate (183)
+- Exchange (182)
   +- ObjectHashAggregate (181)
      +- * Project (180)
         +- * Filter (179)
            +- * ColumnarToRow (178)
               +- Scan parquet spark_catalog.default.item (177)


(177) Scan parquet spark_catalog.default.item
Output [3]: [i_item_sk#66, i_current_price#67, i_color#68]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), In(i_color, [burlywood           ,floral              ,indian              ,medium              ,purple              ,spring              ]), GreaterThanOrEqual(i_current_price,64.00), LessThanOrEqual(i_current_price,74.00), GreaterThanOrEqual(i_current_price,65.00), LessThanOrEqual(i_current_price,79.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_color:string>

(178) ColumnarToRow [codegen id : 1]
Input [3]: [i_item_sk#66, i_current_price#67, i_color#68]

(179) Filter [codegen id : 1]
Input [3]: [i_item_sk#66, i_current_price#67, i_color#68]
Condition : ((((((isnotnull(i_current_price#67) AND i_color#68 IN (purple              ,burlywood           ,indian              ,spring              ,floral              ,medium              )) AND (i_current_price#67 >= 64.00)) AND (i_current_price#67 <= 74.00)) AND (i_current_price#67 >= 65.00)) AND (i_current_price#67 <= 79.00)) AND isnotnull(i_item_sk#66))

(180) Project [codegen id : 1]
Output [1]: [i_item_sk#66]
Input [3]: [i_item_sk#66, i_current_price#67, i_color#68]

(181) ObjectHashAggregate
Input [1]: [i_item_sk#66]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(i_item_sk#66, 42), 1250, 30121, 0, 0)]
Aggregate Attributes [1]: [buf#162]
Results [1]: [buf#163]

(182) Exchange
Input [1]: [buf#163]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=28]

(183) ObjectHashAggregate
Input [1]: [buf#163]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(i_item_sk#66, 42), 1250, 30121, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(i_item_sk#66, 42), 1250, 30121, 0, 0)#164]
Results [1]: [bloom_filter_agg(xxhash64(i_item_sk#66, 42), 1250, 30121, 0, 0)#164 AS bloomFilter#165]

Subquery:2 Hosting operator id = 41 Hosting Expression = ss_sold_date_sk#30 IN dynamicpruning#31
BroadcastExchange (187)
+- * Filter (186)
   +- * ColumnarToRow (185)
      +- Scan parquet spark_catalog.default.date_dim (184)


(184) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#34, d_year#35]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1999), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(185) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#34, d_year#35]

(186) Filter [codegen id : 1]
Input [2]: [d_date_sk#34, d_year#35]
Condition : ((isnotnull(d_year#35) AND (d_year#35 = 1999)) AND isnotnull(d_date_sk#34))

(187) BroadcastExchange
Input [2]: [d_date_sk#34, d_year#35]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=29]

Subquery:3 Hosting operator id = 128 Hosting Expression = ReusedSubquery Subquery scalar-subquery#32, [id=#33]

Subquery:4 Hosting operator id = 126 Hosting Expression = ss_sold_date_sk#125 IN dynamicpruning#126
BroadcastExchange (191)
+- * Filter (190)
   +- * ColumnarToRow (189)
      +- Scan parquet spark_catalog.default.date_dim (188)


(188) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#127, d_year#128]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(189) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#127, d_year#128]

(190) Filter [codegen id : 1]
Input [2]: [d_date_sk#127, d_year#128]
Condition : ((isnotnull(d_year#128) AND (d_year#128 = 2000)) AND isnotnull(d_date_sk#127))

(191) BroadcastExchange
Input [2]: [d_date_sk#127, d_year#128]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=30]


