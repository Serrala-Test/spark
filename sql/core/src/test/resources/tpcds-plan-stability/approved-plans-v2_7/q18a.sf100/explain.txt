== Physical Plan ==
TakeOrderedAndProject (128)
+- Union (127)
   :- * HashAggregate (28)
   :  +- Exchange (27)
   :     +- * HashAggregate (26)
   :        +- * Project (25)
   :           +- * SortMergeJoin Inner (24)
   :              :- * Sort (21)
   :              :  +- Exchange (20)
   :              :     +- * Project (19)
   :              :        +- * BroadcastHashJoin Inner BuildRight (18)
   :              :           :- * Project (13)
   :              :           :  +- * BroadcastHashJoin Inner BuildRight (12)
   :              :           :     :- * Project (10)
   :              :           :     :  +- * BroadcastHashJoin Inner BuildRight (9)
   :              :           :     :     :- * Filter (3)
   :              :           :     :     :  +- * ColumnarToRow (2)
   :              :           :     :     :     +- Scan parquet spark_catalog.default.catalog_sales (1)
   :              :           :     :     +- BroadcastExchange (8)
   :              :           :     :        +- * Project (7)
   :              :           :     :           +- * Filter (6)
   :              :           :     :              +- * ColumnarToRow (5)
   :              :           :     :                 +- Scan parquet spark_catalog.default.customer_demographics (4)
   :              :           :     +- ReusedExchange (11)
   :              :           +- BroadcastExchange (17)
   :              :              +- * Filter (16)
   :              :                 +- * ColumnarToRow (15)
   :              :                    +- Scan parquet spark_catalog.default.item (14)
   :              +- * Sort (23)
   :                 +- ReusedExchange (22)
   :- * HashAggregate (49)
   :  +- Exchange (48)
   :     +- * HashAggregate (47)
   :        +- * Project (46)
   :           +- * SortMergeJoin Inner (45)
   :              :- * Sort (42)
   :              :  +- Exchange (41)
   :              :     +- * Project (40)
   :              :        +- * BroadcastHashJoin Inner BuildRight (39)
   :              :           :- * Project (37)
   :              :           :  +- * BroadcastHashJoin Inner BuildRight (36)
   :              :           :     :- * Project (34)
   :              :           :     :  +- * BroadcastHashJoin Inner BuildRight (33)
   :              :           :     :     :- * Filter (31)
   :              :           :     :     :  +- * ColumnarToRow (30)
   :              :           :     :     :     +- Scan parquet spark_catalog.default.catalog_sales (29)
   :              :           :     :     +- ReusedExchange (32)
   :              :           :     +- ReusedExchange (35)
   :              :           +- ReusedExchange (38)
   :              +- * Sort (44)
   :                 +- ReusedExchange (43)
   :- * HashAggregate (70)
   :  +- Exchange (69)
   :     +- * HashAggregate (68)
   :        +- * Project (67)
   :           +- * SortMergeJoin Inner (66)
   :              :- * Sort (63)
   :              :  +- Exchange (62)
   :              :     +- * Project (61)
   :              :        +- * BroadcastHashJoin Inner BuildRight (60)
   :              :           :- * Project (58)
   :              :           :  +- * BroadcastHashJoin Inner BuildRight (57)
   :              :           :     :- * Project (55)
   :              :           :     :  +- * BroadcastHashJoin Inner BuildRight (54)
   :              :           :     :     :- * Filter (52)
   :              :           :     :     :  +- * ColumnarToRow (51)
   :              :           :     :     :     +- Scan parquet spark_catalog.default.catalog_sales (50)
   :              :           :     :     +- ReusedExchange (53)
   :              :           :     +- ReusedExchange (56)
   :              :           +- ReusedExchange (59)
   :              +- * Sort (65)
   :                 +- ReusedExchange (64)
   :- * HashAggregate (105)
   :  +- Exchange (104)
   :     +- * HashAggregate (103)
   :        +- * Project (102)
   :           +- * BroadcastHashJoin Inner BuildRight (101)
   :              :- * Project (99)
   :              :  +- * BroadcastHashJoin Inner BuildRight (98)
   :              :     :- * Project (79)
   :              :     :  +- * BroadcastHashJoin Inner BuildRight (78)
   :              :     :     :- * Project (76)
   :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (75)
   :              :     :     :     :- * Filter (73)
   :              :     :     :     :  +- * ColumnarToRow (72)
   :              :     :     :     :     +- Scan parquet spark_catalog.default.catalog_sales (71)
   :              :     :     :     +- ReusedExchange (74)
   :              :     :     +- ReusedExchange (77)
   :              :     +- BroadcastExchange (97)
   :              :        +- * Project (96)
   :              :           +- * BroadcastHashJoin Inner BuildLeft (95)
   :              :              :- BroadcastExchange (91)
   :              :              :  +- * Project (90)
   :              :              :     +- * BroadcastHashJoin Inner BuildRight (89)
   :              :              :        :- * Project (83)
   :              :              :        :  +- * Filter (82)
   :              :              :        :     +- * ColumnarToRow (81)
   :              :              :        :        +- Scan parquet spark_catalog.default.customer (80)
   :              :              :        +- BroadcastExchange (88)
   :              :              :           +- * Project (87)
   :              :              :              +- * Filter (86)
   :              :              :                 +- * ColumnarToRow (85)
   :              :              :                    +- Scan parquet spark_catalog.default.customer_address (84)
   :              :              +- * Filter (94)
   :              :                 +- * ColumnarToRow (93)
   :              :                    +- Scan parquet spark_catalog.default.customer_demographics (92)
   :              +- ReusedExchange (100)
   +- * HashAggregate (126)
      +- Exchange (125)
         +- * HashAggregate (124)
            +- * Project (123)
               +- * BroadcastHashJoin Inner BuildRight (122)
                  :- * Project (120)
                  :  +- * BroadcastHashJoin Inner BuildRight (119)
                  :     :- * Project (114)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (113)
                  :     :     :- * Project (111)
                  :     :     :  +- * BroadcastHashJoin Inner BuildRight (110)
                  :     :     :     :- * Filter (108)
                  :     :     :     :  +- * ColumnarToRow (107)
                  :     :     :     :     +- Scan parquet spark_catalog.default.catalog_sales (106)
                  :     :     :     +- ReusedExchange (109)
                  :     :     +- ReusedExchange (112)
                  :     +- BroadcastExchange (118)
                  :        +- * Filter (117)
                  :           +- * ColumnarToRow (116)
                  :              +- Scan parquet spark_catalog.default.item (115)
                  +- ReusedExchange (121)


(1) Scan parquet spark_catalog.default.catalog_sales
Output [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#9), dynamicpruningexpression(cs_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]

(3) Filter [codegen id : 4]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Condition : (((isnotnull(cs_bill_cdemo_sk#2) AND isnotnull(cs_bill_customer_sk#1)) AND isnotnull(cs_item_sk#3)) AND might_contain(Subquery scalar-subquery#11, [id=#12], xxhash64(cs_bill_customer_sk#1, 42), false))

(4) Scan parquet spark_catalog.default.customer_demographics
Output [4]: [cd_demo_sk#13, cd_gender#14, cd_education_status#15, cd_dep_count#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_education_status), EqualTo(cd_gender,M), EqualTo(cd_education_status,College             ), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_education_status:string,cd_dep_count:int>

(5) ColumnarToRow [codegen id : 1]
Input [4]: [cd_demo_sk#13, cd_gender#14, cd_education_status#15, cd_dep_count#16]

(6) Filter [codegen id : 1]
Input [4]: [cd_demo_sk#13, cd_gender#14, cd_education_status#15, cd_dep_count#16]
Condition : ((((isnotnull(cd_gender#14) AND isnotnull(cd_education_status#15)) AND (cd_gender#14 = M)) AND (cd_education_status#15 = College             )) AND isnotnull(cd_demo_sk#13))

(7) Project [codegen id : 1]
Output [2]: [cd_demo_sk#13, cd_dep_count#16]
Input [4]: [cd_demo_sk#13, cd_gender#14, cd_education_status#15, cd_dep_count#16]

(8) BroadcastExchange
Input [2]: [cd_demo_sk#13, cd_dep_count#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_bill_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#13]
Join type: Inner
Join condition: None

(10) Project [codegen id : 4]
Output [9]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#16]
Input [11]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_demo_sk#13, cd_dep_count#16]

(11) ReusedExchange [Reuses operator id: 156]
Output [1]: [d_date_sk#17]

(12) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#9]
Right keys [1]: [d_date_sk#17]
Join type: Inner
Join condition: None

(13) Project [codegen id : 4]
Output [8]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16]
Input [10]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#16, d_date_sk#17]

(14) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#18, i_item_id#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(15) ColumnarToRow [codegen id : 3]
Input [2]: [i_item_sk#18, i_item_id#19]

(16) Filter [codegen id : 3]
Input [2]: [i_item_sk#18, i_item_id#19]
Condition : isnotnull(i_item_sk#18)

(17) BroadcastExchange
Input [2]: [i_item_sk#18, i_item_id#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(18) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [i_item_sk#18]
Join type: Inner
Join condition: None

(19) Project [codegen id : 4]
Output [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_id#19]
Input [10]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_sk#18, i_item_id#19]

(20) Exchange
Input [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_id#19]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(21) Sort [codegen id : 5]
Input [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_id#19]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(22) ReusedExchange [Reuses operator id: 148]
Output [5]: [c_customer_sk#20, c_birth_year#21, ca_county#22, ca_state#23, ca_country#24]

(23) Sort [codegen id : 12]
Input [5]: [c_customer_sk#20, c_birth_year#21, ca_county#22, ca_state#23, ca_country#24]
Arguments: [c_customer_sk#20 ASC NULLS FIRST], false, 0

(24) SortMergeJoin [codegen id : 13]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#20]
Join type: Inner
Join condition: None

(25) Project [codegen id : 13]
Output [11]: [i_item_id#19, ca_country#24, ca_state#23, ca_county#22, cast(cs_quantity#4 as decimal(12,2)) AS agg1#25, cast(cs_list_price#5 as decimal(12,2)) AS agg2#26, cast(cs_coupon_amt#7 as decimal(12,2)) AS agg3#27, cast(cs_sales_price#6 as decimal(12,2)) AS agg4#28, cast(cs_net_profit#8 as decimal(12,2)) AS agg5#29, cast(c_birth_year#21 as decimal(12,2)) AS agg6#30, cast(cd_dep_count#16 as decimal(12,2)) AS agg7#31]
Input [13]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_id#19, c_customer_sk#20, c_birth_year#21, ca_county#22, ca_state#23, ca_country#24]

(26) HashAggregate [codegen id : 13]
Input [11]: [i_item_id#19, ca_country#24, ca_state#23, ca_county#22, agg1#25, agg2#26, agg3#27, agg4#28, agg5#29, agg6#30, agg7#31]
Keys [4]: [i_item_id#19, ca_country#24, ca_state#23, ca_county#22]
Functions [7]: [partial_avg(agg1#25), partial_avg(agg2#26), partial_avg(agg3#27), partial_avg(agg4#28), partial_avg(agg5#29), partial_avg(agg6#30), partial_avg(agg7#31)]
Aggregate Attributes [14]: [sum#32, count#33, sum#34, count#35, sum#36, count#37, sum#38, count#39, sum#40, count#41, sum#42, count#43, sum#44, count#45]
Results [18]: [i_item_id#19, ca_country#24, ca_state#23, ca_county#22, sum#46, count#47, sum#48, count#49, sum#50, count#51, sum#52, count#53, sum#54, count#55, sum#56, count#57, sum#58, count#59]

(27) Exchange
Input [18]: [i_item_id#19, ca_country#24, ca_state#23, ca_county#22, sum#46, count#47, sum#48, count#49, sum#50, count#51, sum#52, count#53, sum#54, count#55, sum#56, count#57, sum#58, count#59]
Arguments: hashpartitioning(i_item_id#19, ca_country#24, ca_state#23, ca_county#22, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(28) HashAggregate [codegen id : 14]
Input [18]: [i_item_id#19, ca_country#24, ca_state#23, ca_county#22, sum#46, count#47, sum#48, count#49, sum#50, count#51, sum#52, count#53, sum#54, count#55, sum#56, count#57, sum#58, count#59]
Keys [4]: [i_item_id#19, ca_country#24, ca_state#23, ca_county#22]
Functions [7]: [avg(agg1#25), avg(agg2#26), avg(agg3#27), avg(agg4#28), avg(agg5#29), avg(agg6#30), avg(agg7#31)]
Aggregate Attributes [7]: [avg(agg1#25)#60, avg(agg2#26)#61, avg(agg3#27)#62, avg(agg4#28)#63, avg(agg5#29)#64, avg(agg6#30)#65, avg(agg7#31)#66]
Results [11]: [i_item_id#19, ca_country#24, ca_state#23, ca_county#22, avg(agg1#25)#60 AS agg1#67, avg(agg2#26)#61 AS agg2#68, avg(agg3#27)#62 AS agg3#69, avg(agg4#28)#63 AS agg4#70, avg(agg5#29)#64 AS agg5#71, avg(agg6#30)#65 AS agg6#72, avg(agg7#31)#66 AS agg7#73]

(29) Scan parquet spark_catalog.default.catalog_sales
Output [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#9), dynamicpruningexpression(cs_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(30) ColumnarToRow [codegen id : 18]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]

(31) Filter [codegen id : 18]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Condition : (((isnotnull(cs_bill_cdemo_sk#2) AND isnotnull(cs_bill_customer_sk#1)) AND isnotnull(cs_item_sk#3)) AND might_contain(Subquery scalar-subquery#74, [id=#75], xxhash64(cs_bill_customer_sk#1, 42), false))

(32) ReusedExchange [Reuses operator id: 8]
Output [2]: [cd_demo_sk#13, cd_dep_count#16]

(33) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [cs_bill_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#13]
Join type: Inner
Join condition: None

(34) Project [codegen id : 18]
Output [9]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#16]
Input [11]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_demo_sk#13, cd_dep_count#16]

(35) ReusedExchange [Reuses operator id: 156]
Output [1]: [d_date_sk#17]

(36) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [cs_sold_date_sk#9]
Right keys [1]: [d_date_sk#17]
Join type: Inner
Join condition: None

(37) Project [codegen id : 18]
Output [8]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16]
Input [10]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#16, d_date_sk#17]

(38) ReusedExchange [Reuses operator id: 17]
Output [2]: [i_item_sk#18, i_item_id#19]

(39) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [i_item_sk#18]
Join type: Inner
Join condition: None

(40) Project [codegen id : 18]
Output [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_id#19]
Input [10]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_sk#18, i_item_id#19]

(41) Exchange
Input [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_id#19]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(42) Sort [codegen id : 19]
Input [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_id#19]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(43) ReusedExchange [Reuses operator id: 173]
Output [4]: [c_customer_sk#20, c_birth_year#21, ca_state#23, ca_country#24]

(44) Sort [codegen id : 26]
Input [4]: [c_customer_sk#20, c_birth_year#21, ca_state#23, ca_country#24]
Arguments: [c_customer_sk#20 ASC NULLS FIRST], false, 0

(45) SortMergeJoin [codegen id : 27]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#20]
Join type: Inner
Join condition: None

(46) Project [codegen id : 27]
Output [10]: [i_item_id#19, ca_country#24, ca_state#23, cast(cs_quantity#4 as decimal(12,2)) AS agg1#25, cast(cs_list_price#5 as decimal(12,2)) AS agg2#26, cast(cs_coupon_amt#7 as decimal(12,2)) AS agg3#27, cast(cs_sales_price#6 as decimal(12,2)) AS agg4#28, cast(cs_net_profit#8 as decimal(12,2)) AS agg5#29, cast(c_birth_year#21 as decimal(12,2)) AS agg6#30, cast(cd_dep_count#16 as decimal(12,2)) AS agg7#31]
Input [12]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_id#19, c_customer_sk#20, c_birth_year#21, ca_state#23, ca_country#24]

(47) HashAggregate [codegen id : 27]
Input [10]: [i_item_id#19, ca_country#24, ca_state#23, agg1#25, agg2#26, agg3#27, agg4#28, agg5#29, agg6#30, agg7#31]
Keys [3]: [i_item_id#19, ca_country#24, ca_state#23]
Functions [7]: [partial_avg(agg1#25), partial_avg(agg2#26), partial_avg(agg3#27), partial_avg(agg4#28), partial_avg(agg5#29), partial_avg(agg6#30), partial_avg(agg7#31)]
Aggregate Attributes [14]: [sum#76, count#77, sum#78, count#79, sum#80, count#81, sum#82, count#83, sum#84, count#85, sum#86, count#87, sum#88, count#89]
Results [17]: [i_item_id#19, ca_country#24, ca_state#23, sum#90, count#91, sum#92, count#93, sum#94, count#95, sum#96, count#97, sum#98, count#99, sum#100, count#101, sum#102, count#103]

(48) Exchange
Input [17]: [i_item_id#19, ca_country#24, ca_state#23, sum#90, count#91, sum#92, count#93, sum#94, count#95, sum#96, count#97, sum#98, count#99, sum#100, count#101, sum#102, count#103]
Arguments: hashpartitioning(i_item_id#19, ca_country#24, ca_state#23, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(49) HashAggregate [codegen id : 28]
Input [17]: [i_item_id#19, ca_country#24, ca_state#23, sum#90, count#91, sum#92, count#93, sum#94, count#95, sum#96, count#97, sum#98, count#99, sum#100, count#101, sum#102, count#103]
Keys [3]: [i_item_id#19, ca_country#24, ca_state#23]
Functions [7]: [avg(agg1#25), avg(agg2#26), avg(agg3#27), avg(agg4#28), avg(agg5#29), avg(agg6#30), avg(agg7#31)]
Aggregate Attributes [7]: [avg(agg1#25)#104, avg(agg2#26)#105, avg(agg3#27)#106, avg(agg4#28)#107, avg(agg5#29)#108, avg(agg6#30)#109, avg(agg7#31)#110]
Results [11]: [i_item_id#19, ca_country#24, ca_state#23, null AS county#111, avg(agg1#25)#104 AS agg1#112, avg(agg2#26)#105 AS agg2#113, avg(agg3#27)#106 AS agg3#114, avg(agg4#28)#107 AS agg4#115, avg(agg5#29)#108 AS agg5#116, avg(agg6#30)#109 AS agg6#117, avg(agg7#31)#110 AS agg7#118]

(50) Scan parquet spark_catalog.default.catalog_sales
Output [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#9), dynamicpruningexpression(cs_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(51) ColumnarToRow [codegen id : 32]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]

(52) Filter [codegen id : 32]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Condition : (((isnotnull(cs_bill_cdemo_sk#2) AND isnotnull(cs_bill_customer_sk#1)) AND isnotnull(cs_item_sk#3)) AND might_contain(Subquery scalar-subquery#119, [id=#120], xxhash64(cs_bill_customer_sk#1, 42), false))

(53) ReusedExchange [Reuses operator id: 8]
Output [2]: [cd_demo_sk#13, cd_dep_count#16]

(54) BroadcastHashJoin [codegen id : 32]
Left keys [1]: [cs_bill_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#13]
Join type: Inner
Join condition: None

(55) Project [codegen id : 32]
Output [9]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#16]
Input [11]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_demo_sk#13, cd_dep_count#16]

(56) ReusedExchange [Reuses operator id: 156]
Output [1]: [d_date_sk#17]

(57) BroadcastHashJoin [codegen id : 32]
Left keys [1]: [cs_sold_date_sk#9]
Right keys [1]: [d_date_sk#17]
Join type: Inner
Join condition: None

(58) Project [codegen id : 32]
Output [8]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16]
Input [10]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#16, d_date_sk#17]

(59) ReusedExchange [Reuses operator id: 17]
Output [2]: [i_item_sk#18, i_item_id#19]

(60) BroadcastHashJoin [codegen id : 32]
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [i_item_sk#18]
Join type: Inner
Join condition: None

(61) Project [codegen id : 32]
Output [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_id#19]
Input [10]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_sk#18, i_item_id#19]

(62) Exchange
Input [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_id#19]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(63) Sort [codegen id : 33]
Input [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_id#19]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(64) ReusedExchange [Reuses operator id: 194]
Output [3]: [c_customer_sk#20, c_birth_year#21, ca_country#24]

(65) Sort [codegen id : 40]
Input [3]: [c_customer_sk#20, c_birth_year#21, ca_country#24]
Arguments: [c_customer_sk#20 ASC NULLS FIRST], false, 0

(66) SortMergeJoin [codegen id : 41]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#20]
Join type: Inner
Join condition: None

(67) Project [codegen id : 41]
Output [9]: [i_item_id#19, ca_country#24, cast(cs_quantity#4 as decimal(12,2)) AS agg1#25, cast(cs_list_price#5 as decimal(12,2)) AS agg2#26, cast(cs_coupon_amt#7 as decimal(12,2)) AS agg3#27, cast(cs_sales_price#6 as decimal(12,2)) AS agg4#28, cast(cs_net_profit#8 as decimal(12,2)) AS agg5#29, cast(c_birth_year#21 as decimal(12,2)) AS agg6#30, cast(cd_dep_count#16 as decimal(12,2)) AS agg7#31]
Input [11]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_id#19, c_customer_sk#20, c_birth_year#21, ca_country#24]

(68) HashAggregate [codegen id : 41]
Input [9]: [i_item_id#19, ca_country#24, agg1#25, agg2#26, agg3#27, agg4#28, agg5#29, agg6#30, agg7#31]
Keys [2]: [i_item_id#19, ca_country#24]
Functions [7]: [partial_avg(agg1#25), partial_avg(agg2#26), partial_avg(agg3#27), partial_avg(agg4#28), partial_avg(agg5#29), partial_avg(agg6#30), partial_avg(agg7#31)]
Aggregate Attributes [14]: [sum#121, count#122, sum#123, count#124, sum#125, count#126, sum#127, count#128, sum#129, count#130, sum#131, count#132, sum#133, count#134]
Results [16]: [i_item_id#19, ca_country#24, sum#135, count#136, sum#137, count#138, sum#139, count#140, sum#141, count#142, sum#143, count#144, sum#145, count#146, sum#147, count#148]

(69) Exchange
Input [16]: [i_item_id#19, ca_country#24, sum#135, count#136, sum#137, count#138, sum#139, count#140, sum#141, count#142, sum#143, count#144, sum#145, count#146, sum#147, count#148]
Arguments: hashpartitioning(i_item_id#19, ca_country#24, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(70) HashAggregate [codegen id : 42]
Input [16]: [i_item_id#19, ca_country#24, sum#135, count#136, sum#137, count#138, sum#139, count#140, sum#141, count#142, sum#143, count#144, sum#145, count#146, sum#147, count#148]
Keys [2]: [i_item_id#19, ca_country#24]
Functions [7]: [avg(agg1#25), avg(agg2#26), avg(agg3#27), avg(agg4#28), avg(agg5#29), avg(agg6#30), avg(agg7#31)]
Aggregate Attributes [7]: [avg(agg1#25)#149, avg(agg2#26)#150, avg(agg3#27)#151, avg(agg4#28)#152, avg(agg5#29)#153, avg(agg6#30)#154, avg(agg7#31)#155]
Results [11]: [i_item_id#19, ca_country#24, null AS ca_state#156, null AS county#157, avg(agg1#25)#149 AS agg1#158, avg(agg2#26)#150 AS agg2#159, avg(agg3#27)#151 AS agg3#160, avg(agg4#28)#152 AS agg4#161, avg(agg5#29)#153 AS agg5#162, avg(agg6#30)#154 AS agg6#163, avg(agg7#31)#155 AS agg7#164]

(71) Scan parquet spark_catalog.default.catalog_sales
Output [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#9), dynamicpruningexpression(cs_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(72) ColumnarToRow [codegen id : 49]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]

(73) Filter [codegen id : 49]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Condition : ((isnotnull(cs_bill_cdemo_sk#2) AND isnotnull(cs_bill_customer_sk#1)) AND isnotnull(cs_item_sk#3))

(74) ReusedExchange [Reuses operator id: 8]
Output [2]: [cd_demo_sk#13, cd_dep_count#16]

(75) BroadcastHashJoin [codegen id : 49]
Left keys [1]: [cs_bill_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#13]
Join type: Inner
Join condition: None

(76) Project [codegen id : 49]
Output [9]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#16]
Input [11]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_demo_sk#13, cd_dep_count#16]

(77) ReusedExchange [Reuses operator id: 156]
Output [1]: [d_date_sk#17]

(78) BroadcastHashJoin [codegen id : 49]
Left keys [1]: [cs_sold_date_sk#9]
Right keys [1]: [d_date_sk#17]
Join type: Inner
Join condition: None

(79) Project [codegen id : 49]
Output [8]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16]
Input [10]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#16, d_date_sk#17]

(80) Scan parquet spark_catalog.default.customer
Output [5]: [c_customer_sk#20, c_current_cdemo_sk#165, c_current_addr_sk#166, c_birth_month#167, c_birth_year#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [In(c_birth_month, [1,10,12,4,5,9]), IsNotNull(c_customer_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int,c_birth_month:int,c_birth_year:int>

(81) ColumnarToRow [codegen id : 46]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#165, c_current_addr_sk#166, c_birth_month#167, c_birth_year#21]

(82) Filter [codegen id : 46]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#165, c_current_addr_sk#166, c_birth_month#167, c_birth_year#21]
Condition : (((c_birth_month#167 IN (9,5,12,4,1,10) AND isnotnull(c_customer_sk#20)) AND isnotnull(c_current_cdemo_sk#165)) AND isnotnull(c_current_addr_sk#166))

(83) Project [codegen id : 46]
Output [4]: [c_customer_sk#20, c_current_cdemo_sk#165, c_current_addr_sk#166, c_birth_year#21]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#165, c_current_addr_sk#166, c_birth_month#167, c_birth_year#21]

(84) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#168, ca_state#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [AL,MS,NC,ND,OK,TN,WI]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(85) ColumnarToRow [codegen id : 45]
Input [2]: [ca_address_sk#168, ca_state#23]

(86) Filter [codegen id : 45]
Input [2]: [ca_address_sk#168, ca_state#23]
Condition : (ca_state#23 IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#168))

(87) Project [codegen id : 45]
Output [1]: [ca_address_sk#168]
Input [2]: [ca_address_sk#168, ca_state#23]

(88) BroadcastExchange
Input [1]: [ca_address_sk#168]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

(89) BroadcastHashJoin [codegen id : 46]
Left keys [1]: [c_current_addr_sk#166]
Right keys [1]: [ca_address_sk#168]
Join type: Inner
Join condition: None

(90) Project [codegen id : 46]
Output [3]: [c_customer_sk#20, c_current_cdemo_sk#165, c_birth_year#21]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#165, c_current_addr_sk#166, c_birth_year#21, ca_address_sk#168]

(91) BroadcastExchange
Input [3]: [c_customer_sk#20, c_current_cdemo_sk#165, c_birth_year#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=10]

(92) Scan parquet spark_catalog.default.customer_demographics
Output [1]: [cd_demo_sk#169]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int>

(93) ColumnarToRow
Input [1]: [cd_demo_sk#169]

(94) Filter
Input [1]: [cd_demo_sk#169]
Condition : isnotnull(cd_demo_sk#169)

(95) BroadcastHashJoin [codegen id : 47]
Left keys [1]: [c_current_cdemo_sk#165]
Right keys [1]: [cd_demo_sk#169]
Join type: Inner
Join condition: None

(96) Project [codegen id : 47]
Output [2]: [c_customer_sk#20, c_birth_year#21]
Input [4]: [c_customer_sk#20, c_current_cdemo_sk#165, c_birth_year#21, cd_demo_sk#169]

(97) BroadcastExchange
Input [2]: [c_customer_sk#20, c_birth_year#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=11]

(98) BroadcastHashJoin [codegen id : 49]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#20]
Join type: Inner
Join condition: None

(99) Project [codegen id : 49]
Output [8]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, c_birth_year#21]
Input [10]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, c_customer_sk#20, c_birth_year#21]

(100) ReusedExchange [Reuses operator id: 17]
Output [2]: [i_item_sk#18, i_item_id#19]

(101) BroadcastHashJoin [codegen id : 49]
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [i_item_sk#18]
Join type: Inner
Join condition: None

(102) Project [codegen id : 49]
Output [8]: [i_item_id#19, cast(cs_quantity#4 as decimal(12,2)) AS agg1#25, cast(cs_list_price#5 as decimal(12,2)) AS agg2#26, cast(cs_coupon_amt#7 as decimal(12,2)) AS agg3#27, cast(cs_sales_price#6 as decimal(12,2)) AS agg4#28, cast(cs_net_profit#8 as decimal(12,2)) AS agg5#29, cast(c_birth_year#21 as decimal(12,2)) AS agg6#30, cast(cd_dep_count#16 as decimal(12,2)) AS agg7#31]
Input [10]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, c_birth_year#21, i_item_sk#18, i_item_id#19]

(103) HashAggregate [codegen id : 49]
Input [8]: [i_item_id#19, agg1#25, agg2#26, agg3#27, agg4#28, agg5#29, agg6#30, agg7#31]
Keys [1]: [i_item_id#19]
Functions [7]: [partial_avg(agg1#25), partial_avg(agg2#26), partial_avg(agg3#27), partial_avg(agg4#28), partial_avg(agg5#29), partial_avg(agg6#30), partial_avg(agg7#31)]
Aggregate Attributes [14]: [sum#170, count#171, sum#172, count#173, sum#174, count#175, sum#176, count#177, sum#178, count#179, sum#180, count#181, sum#182, count#183]
Results [15]: [i_item_id#19, sum#184, count#185, sum#186, count#187, sum#188, count#189, sum#190, count#191, sum#192, count#193, sum#194, count#195, sum#196, count#197]

(104) Exchange
Input [15]: [i_item_id#19, sum#184, count#185, sum#186, count#187, sum#188, count#189, sum#190, count#191, sum#192, count#193, sum#194, count#195, sum#196, count#197]
Arguments: hashpartitioning(i_item_id#19, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(105) HashAggregate [codegen id : 50]
Input [15]: [i_item_id#19, sum#184, count#185, sum#186, count#187, sum#188, count#189, sum#190, count#191, sum#192, count#193, sum#194, count#195, sum#196, count#197]
Keys [1]: [i_item_id#19]
Functions [7]: [avg(agg1#25), avg(agg2#26), avg(agg3#27), avg(agg4#28), avg(agg5#29), avg(agg6#30), avg(agg7#31)]
Aggregate Attributes [7]: [avg(agg1#25)#198, avg(agg2#26)#199, avg(agg3#27)#200, avg(agg4#28)#201, avg(agg5#29)#202, avg(agg6#30)#203, avg(agg7#31)#204]
Results [11]: [i_item_id#19, null AS ca_country#205, null AS ca_state#206, null AS county#207, avg(agg1#25)#198 AS agg1#208, avg(agg2#26)#199 AS agg2#209, avg(agg3#27)#200 AS agg3#210, avg(agg4#28)#201 AS agg4#211, avg(agg5#29)#202 AS agg5#212, avg(agg6#30)#203 AS agg6#213, avg(agg7#31)#204 AS agg7#214]

(106) Scan parquet spark_catalog.default.catalog_sales
Output [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#9), dynamicpruningexpression(cs_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(107) ColumnarToRow [codegen id : 57]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]

(108) Filter [codegen id : 57]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Condition : ((isnotnull(cs_bill_cdemo_sk#2) AND isnotnull(cs_bill_customer_sk#1)) AND isnotnull(cs_item_sk#3))

(109) ReusedExchange [Reuses operator id: 8]
Output [2]: [cd_demo_sk#13, cd_dep_count#16]

(110) BroadcastHashJoin [codegen id : 57]
Left keys [1]: [cs_bill_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#13]
Join type: Inner
Join condition: None

(111) Project [codegen id : 57]
Output [9]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#16]
Input [11]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_demo_sk#13, cd_dep_count#16]

(112) ReusedExchange [Reuses operator id: 156]
Output [1]: [d_date_sk#17]

(113) BroadcastHashJoin [codegen id : 57]
Left keys [1]: [cs_sold_date_sk#9]
Right keys [1]: [d_date_sk#17]
Join type: Inner
Join condition: None

(114) Project [codegen id : 57]
Output [8]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16]
Input [10]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#16, d_date_sk#17]

(115) Scan parquet spark_catalog.default.item
Output [1]: [i_item_sk#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int>

(116) ColumnarToRow [codegen id : 53]
Input [1]: [i_item_sk#18]

(117) Filter [codegen id : 53]
Input [1]: [i_item_sk#18]
Condition : isnotnull(i_item_sk#18)

(118) BroadcastExchange
Input [1]: [i_item_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=13]

(119) BroadcastHashJoin [codegen id : 57]
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [i_item_sk#18]
Join type: Inner
Join condition: None

(120) Project [codegen id : 57]
Output [7]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16]
Input [9]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_sk#18]

(121) ReusedExchange [Reuses operator id: 97]
Output [2]: [c_customer_sk#20, c_birth_year#21]

(122) BroadcastHashJoin [codegen id : 57]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#20]
Join type: Inner
Join condition: None

(123) Project [codegen id : 57]
Output [7]: [cast(cs_quantity#4 as decimal(12,2)) AS agg1#25, cast(cs_list_price#5 as decimal(12,2)) AS agg2#26, cast(cs_coupon_amt#7 as decimal(12,2)) AS agg3#27, cast(cs_sales_price#6 as decimal(12,2)) AS agg4#28, cast(cs_net_profit#8 as decimal(12,2)) AS agg5#29, cast(c_birth_year#21 as decimal(12,2)) AS agg6#30, cast(cd_dep_count#16 as decimal(12,2)) AS agg7#31]
Input [9]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, c_customer_sk#20, c_birth_year#21]

(124) HashAggregate [codegen id : 57]
Input [7]: [agg1#25, agg2#26, agg3#27, agg4#28, agg5#29, agg6#30, agg7#31]
Keys: []
Functions [7]: [partial_avg(agg1#25), partial_avg(agg2#26), partial_avg(agg3#27), partial_avg(agg4#28), partial_avg(agg5#29), partial_avg(agg6#30), partial_avg(agg7#31)]
Aggregate Attributes [14]: [sum#215, count#216, sum#217, count#218, sum#219, count#220, sum#221, count#222, sum#223, count#224, sum#225, count#226, sum#227, count#228]
Results [14]: [sum#229, count#230, sum#231, count#232, sum#233, count#234, sum#235, count#236, sum#237, count#238, sum#239, count#240, sum#241, count#242]

(125) Exchange
Input [14]: [sum#229, count#230, sum#231, count#232, sum#233, count#234, sum#235, count#236, sum#237, count#238, sum#239, count#240, sum#241, count#242]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=14]

(126) HashAggregate [codegen id : 58]
Input [14]: [sum#229, count#230, sum#231, count#232, sum#233, count#234, sum#235, count#236, sum#237, count#238, sum#239, count#240, sum#241, count#242]
Keys: []
Functions [7]: [avg(agg1#25), avg(agg2#26), avg(agg3#27), avg(agg4#28), avg(agg5#29), avg(agg6#30), avg(agg7#31)]
Aggregate Attributes [7]: [avg(agg1#25)#243, avg(agg2#26)#244, avg(agg3#27)#245, avg(agg4#28)#246, avg(agg5#29)#247, avg(agg6#30)#248, avg(agg7#31)#249]
Results [11]: [null AS i_item_id#250, null AS ca_country#251, null AS ca_state#252, null AS county#253, avg(agg1#25)#243 AS agg1#254, avg(agg2#26)#244 AS agg2#255, avg(agg3#27)#245 AS agg3#256, avg(agg4#28)#246 AS agg4#257, avg(agg5#29)#247 AS agg5#258, avg(agg6#30)#248 AS agg6#259, avg(agg7#31)#249 AS agg7#260]

(127) Union

(128) TakeOrderedAndProject
Input [11]: [i_item_id#19, ca_country#24, ca_state#23, ca_county#22, agg1#67, agg2#68, agg3#69, agg4#70, agg5#71, agg6#72, agg7#73]
Arguments: 100, [ca_country#24 ASC NULLS FIRST, ca_state#23 ASC NULLS FIRST, ca_county#22 ASC NULLS FIRST, i_item_id#19 ASC NULLS FIRST], [i_item_id#19, ca_country#24, ca_state#23, ca_county#22, agg1#67, agg2#68, agg3#69, agg4#70, agg5#71, agg6#72, agg7#73]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#11, [id=#12]
ObjectHashAggregate (151)
+- Exchange (150)
   +- ObjectHashAggregate (149)
      +- Exchange (148)
         +- * Project (147)
            +- * SortMergeJoin Inner (146)
               :- * Sort (140)
               :  +- Exchange (139)
               :     +- * Project (138)
               :        +- * BroadcastHashJoin Inner BuildRight (137)
               :           :- * Project (132)
               :           :  +- * Filter (131)
               :           :     +- * ColumnarToRow (130)
               :           :        +- Scan parquet spark_catalog.default.customer (129)
               :           +- BroadcastExchange (136)
               :              +- * Filter (135)
               :                 +- * ColumnarToRow (134)
               :                    +- Scan parquet spark_catalog.default.customer_address (133)
               +- * Sort (145)
                  +- Exchange (144)
                     +- * Filter (143)
                        +- * ColumnarToRow (142)
                           +- Scan parquet spark_catalog.default.customer_demographics (141)


(129) Scan parquet spark_catalog.default.customer
Output [5]: [c_customer_sk#20, c_current_cdemo_sk#165, c_current_addr_sk#166, c_birth_month#167, c_birth_year#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [In(c_birth_month, [1,10,12,4,5,9]), IsNotNull(c_customer_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int,c_birth_month:int,c_birth_year:int>

(130) ColumnarToRow [codegen id : 2]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#165, c_current_addr_sk#166, c_birth_month#167, c_birth_year#21]

(131) Filter [codegen id : 2]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#165, c_current_addr_sk#166, c_birth_month#167, c_birth_year#21]
Condition : (((c_birth_month#167 IN (9,5,12,4,1,10) AND isnotnull(c_customer_sk#20)) AND isnotnull(c_current_cdemo_sk#165)) AND isnotnull(c_current_addr_sk#166))

(132) Project [codegen id : 2]
Output [4]: [c_customer_sk#20, c_current_cdemo_sk#165, c_current_addr_sk#166, c_birth_year#21]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#165, c_current_addr_sk#166, c_birth_month#167, c_birth_year#21]

(133) Scan parquet spark_catalog.default.customer_address
Output [4]: [ca_address_sk#168, ca_county#22, ca_state#23, ca_country#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [AL,MS,NC,ND,OK,TN,WI]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string,ca_state:string,ca_country:string>

(134) ColumnarToRow [codegen id : 1]
Input [4]: [ca_address_sk#168, ca_county#22, ca_state#23, ca_country#24]

(135) Filter [codegen id : 1]
Input [4]: [ca_address_sk#168, ca_county#22, ca_state#23, ca_country#24]
Condition : (ca_state#23 IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#168))

(136) BroadcastExchange
Input [4]: [ca_address_sk#168, ca_county#22, ca_state#23, ca_country#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=15]

(137) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [c_current_addr_sk#166]
Right keys [1]: [ca_address_sk#168]
Join type: Inner
Join condition: None

(138) Project [codegen id : 2]
Output [6]: [c_customer_sk#20, c_current_cdemo_sk#165, c_birth_year#21, ca_county#22, ca_state#23, ca_country#24]
Input [8]: [c_customer_sk#20, c_current_cdemo_sk#165, c_current_addr_sk#166, c_birth_year#21, ca_address_sk#168, ca_county#22, ca_state#23, ca_country#24]

(139) Exchange
Input [6]: [c_customer_sk#20, c_current_cdemo_sk#165, c_birth_year#21, ca_county#22, ca_state#23, ca_country#24]
Arguments: hashpartitioning(c_current_cdemo_sk#165, 5), ENSURE_REQUIREMENTS, [plan_id=16]

(140) Sort [codegen id : 3]
Input [6]: [c_customer_sk#20, c_current_cdemo_sk#165, c_birth_year#21, ca_county#22, ca_state#23, ca_country#24]
Arguments: [c_current_cdemo_sk#165 ASC NULLS FIRST], false, 0

(141) Scan parquet spark_catalog.default.customer_demographics
Output [1]: [cd_demo_sk#169]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int>

(142) ColumnarToRow [codegen id : 4]
Input [1]: [cd_demo_sk#169]

(143) Filter [codegen id : 4]
Input [1]: [cd_demo_sk#169]
Condition : isnotnull(cd_demo_sk#169)

(144) Exchange
Input [1]: [cd_demo_sk#169]
Arguments: hashpartitioning(cd_demo_sk#169, 5), ENSURE_REQUIREMENTS, [plan_id=17]

(145) Sort [codegen id : 5]
Input [1]: [cd_demo_sk#169]
Arguments: [cd_demo_sk#169 ASC NULLS FIRST], false, 0

(146) SortMergeJoin [codegen id : 6]
Left keys [1]: [c_current_cdemo_sk#165]
Right keys [1]: [cd_demo_sk#169]
Join type: Inner
Join condition: None

(147) Project [codegen id : 6]
Output [5]: [c_customer_sk#20, c_birth_year#21, ca_county#22, ca_state#23, ca_country#24]
Input [7]: [c_customer_sk#20, c_current_cdemo_sk#165, c_birth_year#21, ca_county#22, ca_state#23, ca_country#24, cd_demo_sk#169]

(148) Exchange
Input [5]: [c_customer_sk#20, c_birth_year#21, ca_county#22, ca_state#23, ca_country#24]
Arguments: hashpartitioning(c_customer_sk#20, 5), ENSURE_REQUIREMENTS, [plan_id=18]

(149) ObjectHashAggregate
Input [5]: [c_customer_sk#20, c_birth_year#21, ca_county#22, ca_state#23, ca_country#24]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(c_customer_sk#20, 42), 327043, 2616344, 0, 0)]
Aggregate Attributes [1]: [buf#261]
Results [1]: [buf#262]

(150) Exchange
Input [1]: [buf#262]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=19]

(151) ObjectHashAggregate
Input [1]: [buf#262]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(c_customer_sk#20, 42), 327043, 2616344, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(c_customer_sk#20, 42), 327043, 2616344, 0, 0)#263]
Results [1]: [bloom_filter_agg(xxhash64(c_customer_sk#20, 42), 327043, 2616344, 0, 0)#263 AS bloomFilter#264]

Subquery:2 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#9 IN dynamicpruning#10
BroadcastExchange (156)
+- * Project (155)
   +- * Filter (154)
      +- * ColumnarToRow (153)
         +- Scan parquet spark_catalog.default.date_dim (152)


(152) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#17, d_year#265]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(153) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#17, d_year#265]

(154) Filter [codegen id : 1]
Input [2]: [d_date_sk#17, d_year#265]
Condition : ((isnotnull(d_year#265) AND (d_year#265 = 2001)) AND isnotnull(d_date_sk#17))

(155) Project [codegen id : 1]
Output [1]: [d_date_sk#17]
Input [2]: [d_date_sk#17, d_year#265]

(156) BroadcastExchange
Input [1]: [d_date_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=20]

Subquery:3 Hosting operator id = 31 Hosting Expression = Subquery scalar-subquery#74, [id=#75]
ObjectHashAggregate (176)
+- Exchange (175)
   +- ObjectHashAggregate (174)
      +- Exchange (173)
         +- * Project (172)
            +- * SortMergeJoin Inner (171)
               :- * Sort (168)
               :  +- Exchange (167)
               :     +- * Project (166)
               :        +- * BroadcastHashJoin Inner BuildRight (165)
               :           :- * Project (160)
               :           :  +- * Filter (159)
               :           :     +- * ColumnarToRow (158)
               :           :        +- Scan parquet spark_catalog.default.customer (157)
               :           +- BroadcastExchange (164)
               :              +- * Filter (163)
               :                 +- * ColumnarToRow (162)
               :                    +- Scan parquet spark_catalog.default.customer_address (161)
               +- * Sort (170)
                  +- ReusedExchange (169)


(157) Scan parquet spark_catalog.default.customer
Output [5]: [c_customer_sk#20, c_current_cdemo_sk#165, c_current_addr_sk#166, c_birth_month#167, c_birth_year#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [In(c_birth_month, [1,10,12,4,5,9]), IsNotNull(c_customer_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int,c_birth_month:int,c_birth_year:int>

(158) ColumnarToRow [codegen id : 2]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#165, c_current_addr_sk#166, c_birth_month#167, c_birth_year#21]

(159) Filter [codegen id : 2]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#165, c_current_addr_sk#166, c_birth_month#167, c_birth_year#21]
Condition : (((c_birth_month#167 IN (9,5,12,4,1,10) AND isnotnull(c_customer_sk#20)) AND isnotnull(c_current_cdemo_sk#165)) AND isnotnull(c_current_addr_sk#166))

(160) Project [codegen id : 2]
Output [4]: [c_customer_sk#20, c_current_cdemo_sk#165, c_current_addr_sk#166, c_birth_year#21]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#165, c_current_addr_sk#166, c_birth_month#167, c_birth_year#21]

(161) Scan parquet spark_catalog.default.customer_address
Output [3]: [ca_address_sk#168, ca_state#23, ca_country#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [AL,MS,NC,ND,OK,TN,WI]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(162) ColumnarToRow [codegen id : 1]
Input [3]: [ca_address_sk#168, ca_state#23, ca_country#24]

(163) Filter [codegen id : 1]
Input [3]: [ca_address_sk#168, ca_state#23, ca_country#24]
Condition : (ca_state#23 IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#168))

(164) BroadcastExchange
Input [3]: [ca_address_sk#168, ca_state#23, ca_country#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=21]

(165) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [c_current_addr_sk#166]
Right keys [1]: [ca_address_sk#168]
Join type: Inner
Join condition: None

(166) Project [codegen id : 2]
Output [5]: [c_customer_sk#20, c_current_cdemo_sk#165, c_birth_year#21, ca_state#23, ca_country#24]
Input [7]: [c_customer_sk#20, c_current_cdemo_sk#165, c_current_addr_sk#166, c_birth_year#21, ca_address_sk#168, ca_state#23, ca_country#24]

(167) Exchange
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#165, c_birth_year#21, ca_state#23, ca_country#24]
Arguments: hashpartitioning(c_current_cdemo_sk#165, 5), ENSURE_REQUIREMENTS, [plan_id=22]

(168) Sort [codegen id : 3]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#165, c_birth_year#21, ca_state#23, ca_country#24]
Arguments: [c_current_cdemo_sk#165 ASC NULLS FIRST], false, 0

(169) ReusedExchange [Reuses operator id: 144]
Output [1]: [cd_demo_sk#169]

(170) Sort [codegen id : 5]
Input [1]: [cd_demo_sk#169]
Arguments: [cd_demo_sk#169 ASC NULLS FIRST], false, 0

(171) SortMergeJoin [codegen id : 6]
Left keys [1]: [c_current_cdemo_sk#165]
Right keys [1]: [cd_demo_sk#169]
Join type: Inner
Join condition: None

(172) Project [codegen id : 6]
Output [4]: [c_customer_sk#20, c_birth_year#21, ca_state#23, ca_country#24]
Input [6]: [c_customer_sk#20, c_current_cdemo_sk#165, c_birth_year#21, ca_state#23, ca_country#24, cd_demo_sk#169]

(173) Exchange
Input [4]: [c_customer_sk#20, c_birth_year#21, ca_state#23, ca_country#24]
Arguments: hashpartitioning(c_customer_sk#20, 5), ENSURE_REQUIREMENTS, [plan_id=23]

(174) ObjectHashAggregate
Input [4]: [c_customer_sk#20, c_birth_year#21, ca_state#23, ca_country#24]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(c_customer_sk#20, 42), 327043, 2616344, 0, 0)]
Aggregate Attributes [1]: [buf#266]
Results [1]: [buf#267]

(175) Exchange
Input [1]: [buf#267]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=24]

(176) ObjectHashAggregate
Input [1]: [buf#267]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(c_customer_sk#20, 42), 327043, 2616344, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(c_customer_sk#20, 42), 327043, 2616344, 0, 0)#268]
Results [1]: [bloom_filter_agg(xxhash64(c_customer_sk#20, 42), 327043, 2616344, 0, 0)#268 AS bloomFilter#269]

Subquery:4 Hosting operator id = 29 Hosting Expression = cs_sold_date_sk#9 IN dynamicpruning#10

Subquery:5 Hosting operator id = 52 Hosting Expression = Subquery scalar-subquery#119, [id=#120]
ObjectHashAggregate (197)
+- Exchange (196)
   +- ObjectHashAggregate (195)
      +- Exchange (194)
         +- * Project (193)
            +- * SortMergeJoin Inner (192)
               :- * Sort (189)
               :  +- Exchange (188)
               :     +- * Project (187)
               :        +- * BroadcastHashJoin Inner BuildRight (186)
               :           :- * Project (180)
               :           :  +- * Filter (179)
               :           :     +- * ColumnarToRow (178)
               :           :        +- Scan parquet spark_catalog.default.customer (177)
               :           +- BroadcastExchange (185)
               :              +- * Project (184)
               :                 +- * Filter (183)
               :                    +- * ColumnarToRow (182)
               :                       +- Scan parquet spark_catalog.default.customer_address (181)
               +- * Sort (191)
                  +- ReusedExchange (190)


(177) Scan parquet spark_catalog.default.customer
Output [5]: [c_customer_sk#20, c_current_cdemo_sk#165, c_current_addr_sk#166, c_birth_month#167, c_birth_year#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [In(c_birth_month, [1,10,12,4,5,9]), IsNotNull(c_customer_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int,c_birth_month:int,c_birth_year:int>

(178) ColumnarToRow [codegen id : 2]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#165, c_current_addr_sk#166, c_birth_month#167, c_birth_year#21]

(179) Filter [codegen id : 2]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#165, c_current_addr_sk#166, c_birth_month#167, c_birth_year#21]
Condition : (((c_birth_month#167 IN (9,5,12,4,1,10) AND isnotnull(c_customer_sk#20)) AND isnotnull(c_current_cdemo_sk#165)) AND isnotnull(c_current_addr_sk#166))

(180) Project [codegen id : 2]
Output [4]: [c_customer_sk#20, c_current_cdemo_sk#165, c_current_addr_sk#166, c_birth_year#21]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#165, c_current_addr_sk#166, c_birth_month#167, c_birth_year#21]

(181) Scan parquet spark_catalog.default.customer_address
Output [3]: [ca_address_sk#168, ca_state#23, ca_country#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [AL,MS,NC,ND,OK,TN,WI]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(182) ColumnarToRow [codegen id : 1]
Input [3]: [ca_address_sk#168, ca_state#23, ca_country#24]

(183) Filter [codegen id : 1]
Input [3]: [ca_address_sk#168, ca_state#23, ca_country#24]
Condition : (ca_state#23 IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#168))

(184) Project [codegen id : 1]
Output [2]: [ca_address_sk#168, ca_country#24]
Input [3]: [ca_address_sk#168, ca_state#23, ca_country#24]

(185) BroadcastExchange
Input [2]: [ca_address_sk#168, ca_country#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=25]

(186) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [c_current_addr_sk#166]
Right keys [1]: [ca_address_sk#168]
Join type: Inner
Join condition: None

(187) Project [codegen id : 2]
Output [4]: [c_customer_sk#20, c_current_cdemo_sk#165, c_birth_year#21, ca_country#24]
Input [6]: [c_customer_sk#20, c_current_cdemo_sk#165, c_current_addr_sk#166, c_birth_year#21, ca_address_sk#168, ca_country#24]

(188) Exchange
Input [4]: [c_customer_sk#20, c_current_cdemo_sk#165, c_birth_year#21, ca_country#24]
Arguments: hashpartitioning(c_current_cdemo_sk#165, 5), ENSURE_REQUIREMENTS, [plan_id=26]

(189) Sort [codegen id : 3]
Input [4]: [c_customer_sk#20, c_current_cdemo_sk#165, c_birth_year#21, ca_country#24]
Arguments: [c_current_cdemo_sk#165 ASC NULLS FIRST], false, 0

(190) ReusedExchange [Reuses operator id: 144]
Output [1]: [cd_demo_sk#169]

(191) Sort [codegen id : 5]
Input [1]: [cd_demo_sk#169]
Arguments: [cd_demo_sk#169 ASC NULLS FIRST], false, 0

(192) SortMergeJoin [codegen id : 6]
Left keys [1]: [c_current_cdemo_sk#165]
Right keys [1]: [cd_demo_sk#169]
Join type: Inner
Join condition: None

(193) Project [codegen id : 6]
Output [3]: [c_customer_sk#20, c_birth_year#21, ca_country#24]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#165, c_birth_year#21, ca_country#24, cd_demo_sk#169]

(194) Exchange
Input [3]: [c_customer_sk#20, c_birth_year#21, ca_country#24]
Arguments: hashpartitioning(c_customer_sk#20, 5), ENSURE_REQUIREMENTS, [plan_id=27]

(195) ObjectHashAggregate
Input [3]: [c_customer_sk#20, c_birth_year#21, ca_country#24]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(c_customer_sk#20, 42), 327043, 2616344, 0, 0)]
Aggregate Attributes [1]: [buf#270]
Results [1]: [buf#271]

(196) Exchange
Input [1]: [buf#271]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=28]

(197) ObjectHashAggregate
Input [1]: [buf#271]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(c_customer_sk#20, 42), 327043, 2616344, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(c_customer_sk#20, 42), 327043, 2616344, 0, 0)#272]
Results [1]: [bloom_filter_agg(xxhash64(c_customer_sk#20, 42), 327043, 2616344, 0, 0)#272 AS bloomFilter#273]

Subquery:6 Hosting operator id = 50 Hosting Expression = cs_sold_date_sk#9 IN dynamicpruning#10

Subquery:7 Hosting operator id = 71 Hosting Expression = cs_sold_date_sk#9 IN dynamicpruning#10

Subquery:8 Hosting operator id = 106 Hosting Expression = cs_sold_date_sk#9 IN dynamicpruning#10


