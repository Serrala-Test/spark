== Physical Plan ==
TakeOrderedAndProject (148)
+- Union (147)
   :- * HashAggregate (59)
   :  +- Exchange (58)
   :     +- * HashAggregate (57)
   :        +- * Project (56)
   :           +- * SortMergeJoin Inner (55)
   :              :- * Sort (29)
   :              :  +- Exchange (28)
   :              :     +- * Project (27)
   :              :        +- * BroadcastHashJoin Inner BuildRight (26)
   :              :           :- * Project (20)
   :              :           :  +- * SortMergeJoin Inner (19)
   :              :           :     :- * Sort (12)
   :              :           :     :  +- Exchange (11)
   :              :           :     :     +- * Project (10)
   :              :           :     :        +- * BroadcastHashJoin Inner BuildRight (9)
   :              :           :     :           :- * Filter (3)
   :              :           :     :           :  +- * ColumnarToRow (2)
   :              :           :     :           :     +- Scan parquet default.catalog_sales (1)
   :              :           :     :           +- BroadcastExchange (8)
   :              :           :     :              +- * Project (7)
   :              :           :     :                 +- * Filter (6)
   :              :           :     :                    +- * ColumnarToRow (5)
   :              :           :     :                       +- Scan parquet default.date_dim (4)
   :              :           :     +- * Sort (18)
   :              :           :        +- Exchange (17)
   :              :           :           +- * Project (16)
   :              :           :              +- * Filter (15)
   :              :           :                 +- * ColumnarToRow (14)
   :              :           :                    +- Scan parquet default.customer_demographics (13)
   :              :           +- BroadcastExchange (25)
   :              :              +- * Project (24)
   :              :                 +- * Filter (23)
   :              :                    +- * ColumnarToRow (22)
   :              :                       +- Scan parquet default.item (21)
   :              +- * Sort (54)
   :                 +- Exchange (53)
   :                    +- * Project (52)
   :                       +- * SortMergeJoin Inner (51)
   :                          :- * Sort (44)
   :                          :  +- Exchange (43)
   :                          :     +- * Project (42)
   :                          :        +- * SortMergeJoin Inner (41)
   :                          :           :- * Sort (35)
   :                          :           :  +- Exchange (34)
   :                          :           :     +- * Project (33)
   :                          :           :        +- * Filter (32)
   :                          :           :           +- * ColumnarToRow (31)
   :                          :           :              +- Scan parquet default.customer (30)
   :                          :           +- * Sort (40)
   :                          :              +- Exchange (39)
   :                          :                 +- * Filter (38)
   :                          :                    +- * ColumnarToRow (37)
   :                          :                       +- Scan parquet default.customer_demographics (36)
   :                          +- * Sort (50)
   :                             +- Exchange (49)
   :                                +- * Project (48)
   :                                   +- * Filter (47)
   :                                      +- * ColumnarToRow (46)
   :                                         +- Scan parquet default.customer_address (45)
   :- * HashAggregate (78)
   :  +- Exchange (77)
   :     +- * HashAggregate (76)
   :        +- * Project (75)
   :           +- * SortMergeJoin Inner (74)
   :              :- * Sort (61)
   :              :  +- ReusedExchange (60)
   :              +- * Sort (73)
   :                 +- Exchange (72)
   :                    +- * Project (71)
   :                       +- * SortMergeJoin Inner (70)
   :                          :- * Sort (63)
   :                          :  +- ReusedExchange (62)
   :                          +- * Sort (69)
   :                             +- Exchange (68)
   :                                +- * Project (67)
   :                                   +- * Filter (66)
   :                                      +- * ColumnarToRow (65)
   :                                         +- Scan parquet default.customer_address (64)
   :- * HashAggregate (97)
   :  +- Exchange (96)
   :     +- * HashAggregate (95)
   :        +- * Project (94)
   :           +- * SortMergeJoin Inner (93)
   :              :- * Sort (80)
   :              :  +- ReusedExchange (79)
   :              +- * Sort (92)
   :                 +- Exchange (91)
   :                    +- * Project (90)
   :                       +- * SortMergeJoin Inner (89)
   :                          :- * Sort (82)
   :                          :  +- ReusedExchange (81)
   :                          +- * Sort (88)
   :                             +- Exchange (87)
   :                                +- * Project (86)
   :                                   +- * Filter (85)
   :                                      +- * ColumnarToRow (84)
   :                                         +- Scan parquet default.customer_address (83)
   :- * HashAggregate (125)
   :  +- Exchange (124)
   :     +- * HashAggregate (123)
   :        +- * Project (122)
   :           +- * BroadcastHashJoin Inner BuildRight (121)
   :              :- * Project (119)
   :              :  +- * SortMergeJoin Inner (118)
   :              :     :- * Sort (105)
   :              :     :  +- Exchange (104)
   :              :     :     +- * Project (103)
   :              :     :        +- * SortMergeJoin Inner (102)
   :              :     :           :- * Sort (99)
   :              :     :           :  +- ReusedExchange (98)
   :              :     :           +- * Sort (101)
   :              :     :              +- ReusedExchange (100)
   :              :     +- * Sort (117)
   :              :        +- Exchange (116)
   :              :           +- * Project (115)
   :              :              +- * SortMergeJoin Inner (114)
   :              :                 :- * Sort (107)
   :              :                 :  +- ReusedExchange (106)
   :              :                 +- * Sort (113)
   :              :                    +- Exchange (112)
   :              :                       +- * Project (111)
   :              :                          +- * Filter (110)
   :              :                             +- * ColumnarToRow (109)
   :              :                                +- Scan parquet default.customer_address (108)
   :              +- ReusedExchange (120)
   +- * HashAggregate (146)
      +- Exchange (145)
         +- * HashAggregate (144)
            +- * Project (143)
               +- * SortMergeJoin Inner (142)
                  :- * Sort (139)
                  :  +- Exchange (138)
                  :     +- * Project (137)
                  :        +- * BroadcastHashJoin Inner BuildRight (136)
                  :           :- * Project (131)
                  :           :  +- * SortMergeJoin Inner (130)
                  :           :     :- * Sort (127)
                  :           :     :  +- ReusedExchange (126)
                  :           :     +- * Sort (129)
                  :           :        +- ReusedExchange (128)
                  :           +- BroadcastExchange (135)
                  :              +- * Filter (134)
                  :                 +- * ColumnarToRow (133)
                  :                    +- Scan parquet default.item (132)
                  +- * Sort (141)
                     +- ReusedExchange (140)


(1) Scan parquet default.catalog_sales
Output [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]

(3) Filter [codegen id : 2]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Condition : (((isnotnull(cs_bill_cdemo_sk#3) AND isnotnull(cs_bill_customer_sk#2)) AND isnotnull(cs_sold_date_sk#1)) AND isnotnull(cs_item_sk#4))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]
Condition : ((isnotnull(d_year#11) AND (d_year#11 = 2001)) AND isnotnull(d_date_sk#10))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(8) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(10) Project [codegen id : 2]
Output [8]: [cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Input [10]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, d_date_sk#10]

(11) Exchange
Input [8]: [cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Arguments: hashpartitioning(cs_bill_cdemo_sk#3, 5), ENSURE_REQUIREMENTS, [id=#13]

(12) Sort [codegen id : 3]
Input [8]: [cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Arguments: [cs_bill_cdemo_sk#3 ASC NULLS FIRST], false, 0

(13) Scan parquet default.customer_demographics
Output [4]: [cd_demo_sk#14, cd_gender#15, cd_education_status#16, cd_dep_count#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_education_status:string,cd_dep_count:int>

(14) ColumnarToRow [codegen id : 4]
Input [4]: [cd_demo_sk#14, cd_gender#15, cd_education_status#16, cd_dep_count#17]

(15) Filter [codegen id : 4]
Input [4]: [cd_demo_sk#14, cd_gender#15, cd_education_status#16, cd_dep_count#17]
Condition : (((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_gender#15, 1, false, true) = M) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_education_status#16, 20, false, true) = College             )) AND isnotnull(cd_demo_sk#14))

(16) Project [codegen id : 4]
Output [2]: [cd_demo_sk#14, cd_dep_count#17]
Input [4]: [cd_demo_sk#14, cd_gender#15, cd_education_status#16, cd_dep_count#17]

(17) Exchange
Input [2]: [cd_demo_sk#14, cd_dep_count#17]
Arguments: hashpartitioning(cd_demo_sk#14, 5), ENSURE_REQUIREMENTS, [id=#18]

(18) Sort [codegen id : 5]
Input [2]: [cd_demo_sk#14, cd_dep_count#17]
Arguments: [cd_demo_sk#14 ASC NULLS FIRST], false, 0

(19) SortMergeJoin [codegen id : 7]
Left keys [1]: [cs_bill_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#14]
Join condition: None

(20) Project [codegen id : 7]
Output [8]: [cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17]
Input [10]: [cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_demo_sk#14, cd_dep_count#17]

(21) Scan parquet default.item
Output [2]: [i_item_sk#19, i_item_id#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(22) ColumnarToRow [codegen id : 6]
Input [2]: [i_item_sk#19, i_item_id#20]

(23) Filter [codegen id : 6]
Input [2]: [i_item_sk#19, i_item_id#20]
Condition : isnotnull(i_item_sk#19)

(24) Project [codegen id : 6]
Output [2]: [i_item_sk#19, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_item_id#20, 16, false, true) AS i_item_id#21]
Input [2]: [i_item_sk#19, i_item_id#20]

(25) BroadcastExchange
Input [2]: [i_item_sk#19, i_item_id#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22]

(26) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cs_item_sk#4]
Right keys [1]: [i_item_sk#19]
Join condition: None

(27) Project [codegen id : 7]
Output [8]: [cs_bill_customer_sk#2, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, i_item_id#21]
Input [10]: [cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, i_item_sk#19, i_item_id#21]

(28) Exchange
Input [8]: [cs_bill_customer_sk#2, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, i_item_id#21]
Arguments: hashpartitioning(cs_bill_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#23]

(29) Sort [codegen id : 8]
Input [8]: [cs_bill_customer_sk#2, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, i_item_id#21]
Arguments: [cs_bill_customer_sk#2 ASC NULLS FIRST], false, 0

(30) Scan parquet default.customer
Output [5]: [c_customer_sk#24, c_current_cdemo_sk#25, c_current_addr_sk#26, c_birth_month#27, c_birth_year#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [In(c_birth_month, [9,5,12,4,1,10]), IsNotNull(c_customer_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int,c_birth_month:int,c_birth_year:int>

(31) ColumnarToRow [codegen id : 9]
Input [5]: [c_customer_sk#24, c_current_cdemo_sk#25, c_current_addr_sk#26, c_birth_month#27, c_birth_year#28]

(32) Filter [codegen id : 9]
Input [5]: [c_customer_sk#24, c_current_cdemo_sk#25, c_current_addr_sk#26, c_birth_month#27, c_birth_year#28]
Condition : (((c_birth_month#27 IN (9,5,12,4,1,10) AND isnotnull(c_customer_sk#24)) AND isnotnull(c_current_cdemo_sk#25)) AND isnotnull(c_current_addr_sk#26))

(33) Project [codegen id : 9]
Output [4]: [c_customer_sk#24, c_current_cdemo_sk#25, c_current_addr_sk#26, c_birth_year#28]
Input [5]: [c_customer_sk#24, c_current_cdemo_sk#25, c_current_addr_sk#26, c_birth_month#27, c_birth_year#28]

(34) Exchange
Input [4]: [c_customer_sk#24, c_current_cdemo_sk#25, c_current_addr_sk#26, c_birth_year#28]
Arguments: hashpartitioning(c_current_cdemo_sk#25, 5), ENSURE_REQUIREMENTS, [id=#29]

(35) Sort [codegen id : 10]
Input [4]: [c_customer_sk#24, c_current_cdemo_sk#25, c_current_addr_sk#26, c_birth_year#28]
Arguments: [c_current_cdemo_sk#25 ASC NULLS FIRST], false, 0

(36) Scan parquet default.customer_demographics
Output [1]: [cd_demo_sk#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int>

(37) ColumnarToRow [codegen id : 11]
Input [1]: [cd_demo_sk#30]

(38) Filter [codegen id : 11]
Input [1]: [cd_demo_sk#30]
Condition : isnotnull(cd_demo_sk#30)

(39) Exchange
Input [1]: [cd_demo_sk#30]
Arguments: hashpartitioning(cd_demo_sk#30, 5), ENSURE_REQUIREMENTS, [id=#31]

(40) Sort [codegen id : 12]
Input [1]: [cd_demo_sk#30]
Arguments: [cd_demo_sk#30 ASC NULLS FIRST], false, 0

(41) SortMergeJoin [codegen id : 13]
Left keys [1]: [c_current_cdemo_sk#25]
Right keys [1]: [cd_demo_sk#30]
Join condition: None

(42) Project [codegen id : 13]
Output [3]: [c_customer_sk#24, c_current_addr_sk#26, c_birth_year#28]
Input [5]: [c_customer_sk#24, c_current_cdemo_sk#25, c_current_addr_sk#26, c_birth_year#28, cd_demo_sk#30]

(43) Exchange
Input [3]: [c_customer_sk#24, c_current_addr_sk#26, c_birth_year#28]
Arguments: hashpartitioning(c_current_addr_sk#26, 5), ENSURE_REQUIREMENTS, [id=#32]

(44) Sort [codegen id : 14]
Input [3]: [c_customer_sk#24, c_current_addr_sk#26, c_birth_year#28]
Arguments: [c_current_addr_sk#26 ASC NULLS FIRST], false, 0

(45) Scan parquet default.customer_address
Output [4]: [ca_address_sk#33, ca_county#34, ca_state#35, ca_country#36]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string,ca_state:string,ca_country:string>

(46) ColumnarToRow [codegen id : 15]
Input [4]: [ca_address_sk#33, ca_county#34, ca_state#35, ca_country#36]

(47) Filter [codegen id : 15]
Input [4]: [ca_address_sk#33, ca_county#34, ca_state#35, ca_country#36]
Condition : (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#35, 2, false, true) IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#33))

(48) Project [codegen id : 15]
Output [4]: [ca_address_sk#33, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_county#34, 30, false, true) AS ca_county#37, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#35, 2, false, true) AS ca_state#38, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_country#36, 20, false, true) AS ca_country#39]
Input [4]: [ca_address_sk#33, ca_county#34, ca_state#35, ca_country#36]

(49) Exchange
Input [4]: [ca_address_sk#33, ca_county#37, ca_state#38, ca_country#39]
Arguments: hashpartitioning(ca_address_sk#33, 5), ENSURE_REQUIREMENTS, [id=#40]

(50) Sort [codegen id : 16]
Input [4]: [ca_address_sk#33, ca_county#37, ca_state#38, ca_country#39]
Arguments: [ca_address_sk#33 ASC NULLS FIRST], false, 0

(51) SortMergeJoin [codegen id : 17]
Left keys [1]: [c_current_addr_sk#26]
Right keys [1]: [ca_address_sk#33]
Join condition: None

(52) Project [codegen id : 17]
Output [5]: [c_customer_sk#24, c_birth_year#28, ca_county#37, ca_state#38, ca_country#39]
Input [7]: [c_customer_sk#24, c_current_addr_sk#26, c_birth_year#28, ca_address_sk#33, ca_county#37, ca_state#38, ca_country#39]

(53) Exchange
Input [5]: [c_customer_sk#24, c_birth_year#28, ca_county#37, ca_state#38, ca_country#39]
Arguments: hashpartitioning(c_customer_sk#24, 5), ENSURE_REQUIREMENTS, [id=#41]

(54) Sort [codegen id : 18]
Input [5]: [c_customer_sk#24, c_birth_year#28, ca_county#37, ca_state#38, ca_country#39]
Arguments: [c_customer_sk#24 ASC NULLS FIRST], false, 0

(55) SortMergeJoin [codegen id : 19]
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#24]
Join condition: None

(56) Project [codegen id : 19]
Output [11]: [i_item_id#21, ca_country#39, ca_state#38, ca_county#37, cast(cs_quantity#5 as decimal(12,2)) AS agg1#42, cast(cs_list_price#6 as decimal(12,2)) AS agg2#43, cast(cs_coupon_amt#8 as decimal(12,2)) AS agg3#44, cast(cs_sales_price#7 as decimal(12,2)) AS agg4#45, cast(cs_net_profit#9 as decimal(12,2)) AS agg5#46, cast(c_birth_year#28 as decimal(12,2)) AS agg6#47, cast(cd_dep_count#17 as decimal(12,2)) AS agg7#48]
Input [13]: [cs_bill_customer_sk#2, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, i_item_id#21, c_customer_sk#24, c_birth_year#28, ca_county#37, ca_state#38, ca_country#39]

(57) HashAggregate [codegen id : 19]
Input [11]: [i_item_id#21, ca_country#39, ca_state#38, ca_county#37, agg1#42, agg2#43, agg3#44, agg4#45, agg5#46, agg6#47, agg7#48]
Keys [4]: [i_item_id#21, ca_country#39, ca_state#38, ca_county#37]
Functions [7]: [partial_avg(agg1#42), partial_avg(agg2#43), partial_avg(agg3#44), partial_avg(agg4#45), partial_avg(agg5#46), partial_avg(agg6#47), partial_avg(agg7#48)]
Aggregate Attributes [14]: [sum#49, count#50, sum#51, count#52, sum#53, count#54, sum#55, count#56, sum#57, count#58, sum#59, count#60, sum#61, count#62]
Results [18]: [i_item_id#21, ca_country#39, ca_state#38, ca_county#37, sum#63, count#64, sum#65, count#66, sum#67, count#68, sum#69, count#70, sum#71, count#72, sum#73, count#74, sum#75, count#76]

(58) Exchange
Input [18]: [i_item_id#21, ca_country#39, ca_state#38, ca_county#37, sum#63, count#64, sum#65, count#66, sum#67, count#68, sum#69, count#70, sum#71, count#72, sum#73, count#74, sum#75, count#76]
Arguments: hashpartitioning(i_item_id#21, ca_country#39, ca_state#38, ca_county#37, 5), ENSURE_REQUIREMENTS, [id=#77]

(59) HashAggregate [codegen id : 20]
Input [18]: [i_item_id#21, ca_country#39, ca_state#38, ca_county#37, sum#63, count#64, sum#65, count#66, sum#67, count#68, sum#69, count#70, sum#71, count#72, sum#73, count#74, sum#75, count#76]
Keys [4]: [i_item_id#21, ca_country#39, ca_state#38, ca_county#37]
Functions [7]: [avg(agg1#42), avg(agg2#43), avg(agg3#44), avg(agg4#45), avg(agg5#46), avg(agg6#47), avg(agg7#48)]
Aggregate Attributes [7]: [avg(agg1#42)#78, avg(agg2#43)#79, avg(agg3#44)#80, avg(agg4#45)#81, avg(agg5#46)#82, avg(agg6#47)#83, avg(agg7#48)#84]
Results [11]: [i_item_id#21, ca_country#39, ca_state#38, ca_county#37, avg(agg1#42)#78 AS agg1#85, avg(agg2#43)#79 AS agg2#86, avg(agg3#44)#80 AS agg3#87, avg(agg4#45)#81 AS agg4#88, avg(agg5#46)#82 AS agg5#89, avg(agg6#47)#83 AS agg6#90, avg(agg7#48)#84 AS agg7#91]

(60) ReusedExchange [Reuses operator id: 28]
Output [8]: [cs_bill_customer_sk#2, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, i_item_id#92]

(61) Sort [codegen id : 28]
Input [8]: [cs_bill_customer_sk#2, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, i_item_id#92]
Arguments: [cs_bill_customer_sk#2 ASC NULLS FIRST], false, 0

(62) ReusedExchange [Reuses operator id: 43]
Output [3]: [c_customer_sk#24, c_current_addr_sk#26, c_birth_year#28]

(63) Sort [codegen id : 34]
Input [3]: [c_customer_sk#24, c_current_addr_sk#26, c_birth_year#28]
Arguments: [c_current_addr_sk#26 ASC NULLS FIRST], false, 0

(64) Scan parquet default.customer_address
Output [3]: [ca_address_sk#33, ca_state#35, ca_country#36]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(65) ColumnarToRow [codegen id : 35]
Input [3]: [ca_address_sk#33, ca_state#35, ca_country#36]

(66) Filter [codegen id : 35]
Input [3]: [ca_address_sk#33, ca_state#35, ca_country#36]
Condition : (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#35, 2, false, true) IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#33))

(67) Project [codegen id : 35]
Output [3]: [ca_address_sk#33, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#35, 2, false, true) AS ca_state#93, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_country#36, 20, false, true) AS ca_country#94]
Input [3]: [ca_address_sk#33, ca_state#35, ca_country#36]

(68) Exchange
Input [3]: [ca_address_sk#33, ca_state#93, ca_country#94]
Arguments: hashpartitioning(ca_address_sk#33, 5), ENSURE_REQUIREMENTS, [id=#95]

(69) Sort [codegen id : 36]
Input [3]: [ca_address_sk#33, ca_state#93, ca_country#94]
Arguments: [ca_address_sk#33 ASC NULLS FIRST], false, 0

(70) SortMergeJoin [codegen id : 37]
Left keys [1]: [c_current_addr_sk#26]
Right keys [1]: [ca_address_sk#33]
Join condition: None

(71) Project [codegen id : 37]
Output [4]: [c_customer_sk#24, c_birth_year#28, ca_state#93, ca_country#94]
Input [6]: [c_customer_sk#24, c_current_addr_sk#26, c_birth_year#28, ca_address_sk#33, ca_state#93, ca_country#94]

(72) Exchange
Input [4]: [c_customer_sk#24, c_birth_year#28, ca_state#93, ca_country#94]
Arguments: hashpartitioning(c_customer_sk#24, 5), ENSURE_REQUIREMENTS, [id=#96]

(73) Sort [codegen id : 38]
Input [4]: [c_customer_sk#24, c_birth_year#28, ca_state#93, ca_country#94]
Arguments: [c_customer_sk#24 ASC NULLS FIRST], false, 0

(74) SortMergeJoin [codegen id : 39]
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#24]
Join condition: None

(75) Project [codegen id : 39]
Output [10]: [i_item_id#92, ca_country#94, ca_state#93, cast(cs_quantity#5 as decimal(12,2)) AS agg1#42, cast(cs_list_price#6 as decimal(12,2)) AS agg2#43, cast(cs_coupon_amt#8 as decimal(12,2)) AS agg3#44, cast(cs_sales_price#7 as decimal(12,2)) AS agg4#45, cast(cs_net_profit#9 as decimal(12,2)) AS agg5#46, cast(c_birth_year#28 as decimal(12,2)) AS agg6#47, cast(cd_dep_count#17 as decimal(12,2)) AS agg7#48]
Input [12]: [cs_bill_customer_sk#2, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, i_item_id#92, c_customer_sk#24, c_birth_year#28, ca_state#93, ca_country#94]

(76) HashAggregate [codegen id : 39]
Input [10]: [i_item_id#92, ca_country#94, ca_state#93, agg1#42, agg2#43, agg3#44, agg4#45, agg5#46, agg6#47, agg7#48]
Keys [3]: [i_item_id#92, ca_country#94, ca_state#93]
Functions [7]: [partial_avg(agg1#42), partial_avg(agg2#43), partial_avg(agg3#44), partial_avg(agg4#45), partial_avg(agg5#46), partial_avg(agg6#47), partial_avg(agg7#48)]
Aggregate Attributes [14]: [sum#97, count#98, sum#99, count#100, sum#101, count#102, sum#103, count#104, sum#105, count#106, sum#107, count#108, sum#109, count#110]
Results [17]: [i_item_id#92, ca_country#94, ca_state#93, sum#111, count#112, sum#113, count#114, sum#115, count#116, sum#117, count#118, sum#119, count#120, sum#121, count#122, sum#123, count#124]

(77) Exchange
Input [17]: [i_item_id#92, ca_country#94, ca_state#93, sum#111, count#112, sum#113, count#114, sum#115, count#116, sum#117, count#118, sum#119, count#120, sum#121, count#122, sum#123, count#124]
Arguments: hashpartitioning(i_item_id#92, ca_country#94, ca_state#93, 5), ENSURE_REQUIREMENTS, [id=#125]

(78) HashAggregate [codegen id : 40]
Input [17]: [i_item_id#92, ca_country#94, ca_state#93, sum#111, count#112, sum#113, count#114, sum#115, count#116, sum#117, count#118, sum#119, count#120, sum#121, count#122, sum#123, count#124]
Keys [3]: [i_item_id#92, ca_country#94, ca_state#93]
Functions [7]: [avg(agg1#42), avg(agg2#43), avg(agg3#44), avg(agg4#45), avg(agg5#46), avg(agg6#47), avg(agg7#48)]
Aggregate Attributes [7]: [avg(agg1#42)#126, avg(agg2#43)#127, avg(agg3#44)#128, avg(agg4#45)#129, avg(agg5#46)#130, avg(agg6#47)#131, avg(agg7#48)#132]
Results [11]: [i_item_id#92 AS i_item_id#133, ca_country#94 AS ca_country#134, ca_state#93 AS ca_state#135, null AS county#136, avg(agg1#42)#126 AS agg1#137, avg(agg2#43)#127 AS agg2#138, avg(agg3#44)#128 AS agg3#139, avg(agg4#45)#129 AS agg4#140, avg(agg5#46)#130 AS agg5#141, avg(agg6#47)#131 AS agg6#142, avg(agg7#48)#132 AS agg7#143]

(79) ReusedExchange [Reuses operator id: 28]
Output [8]: [cs_bill_customer_sk#2, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, i_item_id#144]

(80) Sort [codegen id : 48]
Input [8]: [cs_bill_customer_sk#2, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, i_item_id#144]
Arguments: [cs_bill_customer_sk#2 ASC NULLS FIRST], false, 0

(81) ReusedExchange [Reuses operator id: 43]
Output [3]: [c_customer_sk#24, c_current_addr_sk#26, c_birth_year#28]

(82) Sort [codegen id : 54]
Input [3]: [c_customer_sk#24, c_current_addr_sk#26, c_birth_year#28]
Arguments: [c_current_addr_sk#26 ASC NULLS FIRST], false, 0

(83) Scan parquet default.customer_address
Output [3]: [ca_address_sk#33, ca_state#35, ca_country#36]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(84) ColumnarToRow [codegen id : 55]
Input [3]: [ca_address_sk#33, ca_state#35, ca_country#36]

(85) Filter [codegen id : 55]
Input [3]: [ca_address_sk#33, ca_state#35, ca_country#36]
Condition : (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#35, 2, false, true) IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#33))

(86) Project [codegen id : 55]
Output [2]: [ca_address_sk#33, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_country#36, 20, false, true) AS ca_country#145]
Input [3]: [ca_address_sk#33, ca_state#35, ca_country#36]

(87) Exchange
Input [2]: [ca_address_sk#33, ca_country#145]
Arguments: hashpartitioning(ca_address_sk#33, 5), ENSURE_REQUIREMENTS, [id=#146]

(88) Sort [codegen id : 56]
Input [2]: [ca_address_sk#33, ca_country#145]
Arguments: [ca_address_sk#33 ASC NULLS FIRST], false, 0

(89) SortMergeJoin [codegen id : 57]
Left keys [1]: [c_current_addr_sk#26]
Right keys [1]: [ca_address_sk#33]
Join condition: None

(90) Project [codegen id : 57]
Output [3]: [c_customer_sk#24, c_birth_year#28, ca_country#145]
Input [5]: [c_customer_sk#24, c_current_addr_sk#26, c_birth_year#28, ca_address_sk#33, ca_country#145]

(91) Exchange
Input [3]: [c_customer_sk#24, c_birth_year#28, ca_country#145]
Arguments: hashpartitioning(c_customer_sk#24, 5), ENSURE_REQUIREMENTS, [id=#147]

(92) Sort [codegen id : 58]
Input [3]: [c_customer_sk#24, c_birth_year#28, ca_country#145]
Arguments: [c_customer_sk#24 ASC NULLS FIRST], false, 0

(93) SortMergeJoin [codegen id : 59]
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#24]
Join condition: None

(94) Project [codegen id : 59]
Output [9]: [i_item_id#144, ca_country#145, cast(cs_quantity#5 as decimal(12,2)) AS agg1#42, cast(cs_list_price#6 as decimal(12,2)) AS agg2#43, cast(cs_coupon_amt#8 as decimal(12,2)) AS agg3#44, cast(cs_sales_price#7 as decimal(12,2)) AS agg4#45, cast(cs_net_profit#9 as decimal(12,2)) AS agg5#46, cast(c_birth_year#28 as decimal(12,2)) AS agg6#47, cast(cd_dep_count#17 as decimal(12,2)) AS agg7#48]
Input [11]: [cs_bill_customer_sk#2, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, i_item_id#144, c_customer_sk#24, c_birth_year#28, ca_country#145]

(95) HashAggregate [codegen id : 59]
Input [9]: [i_item_id#144, ca_country#145, agg1#42, agg2#43, agg3#44, agg4#45, agg5#46, agg6#47, agg7#48]
Keys [2]: [i_item_id#144, ca_country#145]
Functions [7]: [partial_avg(agg1#42), partial_avg(agg2#43), partial_avg(agg3#44), partial_avg(agg4#45), partial_avg(agg5#46), partial_avg(agg6#47), partial_avg(agg7#48)]
Aggregate Attributes [14]: [sum#148, count#149, sum#150, count#151, sum#152, count#153, sum#154, count#155, sum#156, count#157, sum#158, count#159, sum#160, count#161]
Results [16]: [i_item_id#144, ca_country#145, sum#162, count#163, sum#164, count#165, sum#166, count#167, sum#168, count#169, sum#170, count#171, sum#172, count#173, sum#174, count#175]

(96) Exchange
Input [16]: [i_item_id#144, ca_country#145, sum#162, count#163, sum#164, count#165, sum#166, count#167, sum#168, count#169, sum#170, count#171, sum#172, count#173, sum#174, count#175]
Arguments: hashpartitioning(i_item_id#144, ca_country#145, 5), ENSURE_REQUIREMENTS, [id=#176]

(97) HashAggregate [codegen id : 60]
Input [16]: [i_item_id#144, ca_country#145, sum#162, count#163, sum#164, count#165, sum#166, count#167, sum#168, count#169, sum#170, count#171, sum#172, count#173, sum#174, count#175]
Keys [2]: [i_item_id#144, ca_country#145]
Functions [7]: [avg(agg1#42), avg(agg2#43), avg(agg3#44), avg(agg4#45), avg(agg5#46), avg(agg6#47), avg(agg7#48)]
Aggregate Attributes [7]: [avg(agg1#42)#177, avg(agg2#43)#178, avg(agg3#44)#179, avg(agg4#45)#180, avg(agg5#46)#181, avg(agg6#47)#182, avg(agg7#48)#183]
Results [11]: [i_item_id#144 AS i_item_id#184, ca_country#145 AS ca_country#185, null AS ca_state#186, null AS county#187, avg(agg1#42)#177 AS agg1#188, avg(agg2#43)#178 AS agg2#189, avg(agg3#44)#179 AS agg3#190, avg(agg4#45)#180 AS agg4#191, avg(agg5#46)#181 AS agg5#192, avg(agg6#47)#182 AS agg6#193, avg(agg7#48)#183 AS agg7#194]

(98) ReusedExchange [Reuses operator id: 11]
Output [8]: [cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]

(99) Sort [codegen id : 63]
Input [8]: [cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Arguments: [cs_bill_cdemo_sk#3 ASC NULLS FIRST], false, 0

(100) ReusedExchange [Reuses operator id: 17]
Output [2]: [cd_demo_sk#14, cd_dep_count#17]

(101) Sort [codegen id : 65]
Input [2]: [cd_demo_sk#14, cd_dep_count#17]
Arguments: [cd_demo_sk#14 ASC NULLS FIRST], false, 0

(102) SortMergeJoin [codegen id : 66]
Left keys [1]: [cs_bill_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#14]
Join condition: None

(103) Project [codegen id : 66]
Output [8]: [cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17]
Input [10]: [cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_demo_sk#14, cd_dep_count#17]

(104) Exchange
Input [8]: [cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17]
Arguments: hashpartitioning(cs_bill_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#195]

(105) Sort [codegen id : 67]
Input [8]: [cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17]
Arguments: [cs_bill_customer_sk#2 ASC NULLS FIRST], false, 0

(106) ReusedExchange [Reuses operator id: 43]
Output [3]: [c_customer_sk#24, c_current_addr_sk#26, c_birth_year#28]

(107) Sort [codegen id : 73]
Input [3]: [c_customer_sk#24, c_current_addr_sk#26, c_birth_year#28]
Arguments: [c_current_addr_sk#26 ASC NULLS FIRST], false, 0

(108) Scan parquet default.customer_address
Output [2]: [ca_address_sk#33, ca_state#35]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(109) ColumnarToRow [codegen id : 74]
Input [2]: [ca_address_sk#33, ca_state#35]

(110) Filter [codegen id : 74]
Input [2]: [ca_address_sk#33, ca_state#35]
Condition : (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#35, 2, false, true) IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#33))

(111) Project [codegen id : 74]
Output [1]: [ca_address_sk#33]
Input [2]: [ca_address_sk#33, ca_state#35]

(112) Exchange
Input [1]: [ca_address_sk#33]
Arguments: hashpartitioning(ca_address_sk#33, 5), ENSURE_REQUIREMENTS, [id=#196]

(113) Sort [codegen id : 75]
Input [1]: [ca_address_sk#33]
Arguments: [ca_address_sk#33 ASC NULLS FIRST], false, 0

(114) SortMergeJoin [codegen id : 76]
Left keys [1]: [c_current_addr_sk#26]
Right keys [1]: [ca_address_sk#33]
Join condition: None

(115) Project [codegen id : 76]
Output [2]: [c_customer_sk#24, c_birth_year#28]
Input [4]: [c_customer_sk#24, c_current_addr_sk#26, c_birth_year#28, ca_address_sk#33]

(116) Exchange
Input [2]: [c_customer_sk#24, c_birth_year#28]
Arguments: hashpartitioning(c_customer_sk#24, 5), ENSURE_REQUIREMENTS, [id=#197]

(117) Sort [codegen id : 77]
Input [2]: [c_customer_sk#24, c_birth_year#28]
Arguments: [c_customer_sk#24 ASC NULLS FIRST], false, 0

(118) SortMergeJoin [codegen id : 79]
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#24]
Join condition: None

(119) Project [codegen id : 79]
Output [8]: [cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, c_birth_year#28]
Input [10]: [cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, c_customer_sk#24, c_birth_year#28]

(120) ReusedExchange [Reuses operator id: 25]
Output [2]: [i_item_sk#19, i_item_id#198]

(121) BroadcastHashJoin [codegen id : 79]
Left keys [1]: [cs_item_sk#4]
Right keys [1]: [i_item_sk#19]
Join condition: None

(122) Project [codegen id : 79]
Output [8]: [i_item_id#198, cast(cs_quantity#5 as decimal(12,2)) AS agg1#42, cast(cs_list_price#6 as decimal(12,2)) AS agg2#43, cast(cs_coupon_amt#8 as decimal(12,2)) AS agg3#44, cast(cs_sales_price#7 as decimal(12,2)) AS agg4#45, cast(cs_net_profit#9 as decimal(12,2)) AS agg5#46, cast(c_birth_year#28 as decimal(12,2)) AS agg6#47, cast(cd_dep_count#17 as decimal(12,2)) AS agg7#48]
Input [10]: [cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, c_birth_year#28, i_item_sk#19, i_item_id#198]

(123) HashAggregate [codegen id : 79]
Input [8]: [i_item_id#198, agg1#42, agg2#43, agg3#44, agg4#45, agg5#46, agg6#47, agg7#48]
Keys [1]: [i_item_id#198]
Functions [7]: [partial_avg(agg1#42), partial_avg(agg2#43), partial_avg(agg3#44), partial_avg(agg4#45), partial_avg(agg5#46), partial_avg(agg6#47), partial_avg(agg7#48)]
Aggregate Attributes [14]: [sum#199, count#200, sum#201, count#202, sum#203, count#204, sum#205, count#206, sum#207, count#208, sum#209, count#210, sum#211, count#212]
Results [15]: [i_item_id#198, sum#213, count#214, sum#215, count#216, sum#217, count#218, sum#219, count#220, sum#221, count#222, sum#223, count#224, sum#225, count#226]

(124) Exchange
Input [15]: [i_item_id#198, sum#213, count#214, sum#215, count#216, sum#217, count#218, sum#219, count#220, sum#221, count#222, sum#223, count#224, sum#225, count#226]
Arguments: hashpartitioning(i_item_id#198, 5), ENSURE_REQUIREMENTS, [id=#227]

(125) HashAggregate [codegen id : 80]
Input [15]: [i_item_id#198, sum#213, count#214, sum#215, count#216, sum#217, count#218, sum#219, count#220, sum#221, count#222, sum#223, count#224, sum#225, count#226]
Keys [1]: [i_item_id#198]
Functions [7]: [avg(agg1#42), avg(agg2#43), avg(agg3#44), avg(agg4#45), avg(agg5#46), avg(agg6#47), avg(agg7#48)]
Aggregate Attributes [7]: [avg(agg1#42)#228, avg(agg2#43)#229, avg(agg3#44)#230, avg(agg4#45)#231, avg(agg5#46)#232, avg(agg6#47)#233, avg(agg7#48)#234]
Results [11]: [i_item_id#198 AS i_item_id#235, null AS ca_country#236, null AS ca_state#237, null AS county#238, avg(agg1#42)#228 AS agg1#239, avg(agg2#43)#229 AS agg2#240, avg(agg3#44)#230 AS agg3#241, avg(agg4#45)#231 AS agg4#242, avg(agg5#46)#232 AS agg5#243, avg(agg6#47)#233 AS agg6#244, avg(agg7#48)#234 AS agg7#245]

(126) ReusedExchange [Reuses operator id: 11]
Output [8]: [cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]

(127) Sort [codegen id : 83]
Input [8]: [cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Arguments: [cs_bill_cdemo_sk#3 ASC NULLS FIRST], false, 0

(128) ReusedExchange [Reuses operator id: 17]
Output [2]: [cd_demo_sk#14, cd_dep_count#17]

(129) Sort [codegen id : 85]
Input [2]: [cd_demo_sk#14, cd_dep_count#17]
Arguments: [cd_demo_sk#14 ASC NULLS FIRST], false, 0

(130) SortMergeJoin [codegen id : 87]
Left keys [1]: [cs_bill_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#14]
Join condition: None

(131) Project [codegen id : 87]
Output [8]: [cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17]
Input [10]: [cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_demo_sk#14, cd_dep_count#17]

(132) Scan parquet default.item
Output [1]: [i_item_sk#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int>

(133) ColumnarToRow [codegen id : 86]
Input [1]: [i_item_sk#19]

(134) Filter [codegen id : 86]
Input [1]: [i_item_sk#19]
Condition : isnotnull(i_item_sk#19)

(135) BroadcastExchange
Input [1]: [i_item_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#246]

(136) BroadcastHashJoin [codegen id : 87]
Left keys [1]: [cs_item_sk#4]
Right keys [1]: [i_item_sk#19]
Join condition: None

(137) Project [codegen id : 87]
Output [7]: [cs_bill_customer_sk#2, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17]
Input [9]: [cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, i_item_sk#19]

(138) Exchange
Input [7]: [cs_bill_customer_sk#2, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17]
Arguments: hashpartitioning(cs_bill_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#247]

(139) Sort [codegen id : 88]
Input [7]: [cs_bill_customer_sk#2, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17]
Arguments: [cs_bill_customer_sk#2 ASC NULLS FIRST], false, 0

(140) ReusedExchange [Reuses operator id: 116]
Output [2]: [c_customer_sk#24, c_birth_year#28]

(141) Sort [codegen id : 98]
Input [2]: [c_customer_sk#24, c_birth_year#28]
Arguments: [c_customer_sk#24 ASC NULLS FIRST], false, 0

(142) SortMergeJoin [codegen id : 99]
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#24]
Join condition: None

(143) Project [codegen id : 99]
Output [7]: [cast(cs_quantity#5 as decimal(12,2)) AS agg1#42, cast(cs_list_price#6 as decimal(12,2)) AS agg2#43, cast(cs_coupon_amt#8 as decimal(12,2)) AS agg3#44, cast(cs_sales_price#7 as decimal(12,2)) AS agg4#45, cast(cs_net_profit#9 as decimal(12,2)) AS agg5#46, cast(c_birth_year#28 as decimal(12,2)) AS agg6#47, cast(cd_dep_count#17 as decimal(12,2)) AS agg7#48]
Input [9]: [cs_bill_customer_sk#2, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, c_customer_sk#24, c_birth_year#28]

(144) HashAggregate [codegen id : 99]
Input [7]: [agg1#42, agg2#43, agg3#44, agg4#45, agg5#46, agg6#47, agg7#48]
Keys: []
Functions [7]: [partial_avg(agg1#42), partial_avg(agg2#43), partial_avg(agg3#44), partial_avg(agg4#45), partial_avg(agg5#46), partial_avg(agg6#47), partial_avg(agg7#48)]
Aggregate Attributes [14]: [sum#248, count#249, sum#250, count#251, sum#252, count#253, sum#254, count#255, sum#256, count#257, sum#258, count#259, sum#260, count#261]
Results [14]: [sum#262, count#263, sum#264, count#265, sum#266, count#267, sum#268, count#269, sum#270, count#271, sum#272, count#273, sum#274, count#275]

(145) Exchange
Input [14]: [sum#262, count#263, sum#264, count#265, sum#266, count#267, sum#268, count#269, sum#270, count#271, sum#272, count#273, sum#274, count#275]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#276]

(146) HashAggregate [codegen id : 100]
Input [14]: [sum#262, count#263, sum#264, count#265, sum#266, count#267, sum#268, count#269, sum#270, count#271, sum#272, count#273, sum#274, count#275]
Keys: []
Functions [7]: [avg(agg1#42), avg(agg2#43), avg(agg3#44), avg(agg4#45), avg(agg5#46), avg(agg6#47), avg(agg7#48)]
Aggregate Attributes [7]: [avg(agg1#42)#277, avg(agg2#43)#278, avg(agg3#44)#279, avg(agg4#45)#280, avg(agg5#46)#281, avg(agg6#47)#282, avg(agg7#48)#283]
Results [11]: [null AS i_item_id#284, null AS ca_country#285, null AS ca_state#286, null AS county#287, avg(agg1#42)#277 AS agg1#288, avg(agg2#43)#278 AS agg2#289, avg(agg3#44)#279 AS agg3#290, avg(agg4#45)#280 AS agg4#291, avg(agg5#46)#281 AS agg5#292, avg(agg6#47)#282 AS agg6#293, avg(agg7#48)#283 AS agg7#294]

(147) Union

(148) TakeOrderedAndProject
Input [11]: [i_item_id#21, ca_country#39, ca_state#38, ca_county#37, agg1#85, agg2#86, agg3#87, agg4#88, agg5#89, agg6#90, agg7#91]
Arguments: 100, [ca_country#39 ASC NULLS FIRST, ca_state#38 ASC NULLS FIRST, ca_county#37 ASC NULLS FIRST, i_item_id#21 ASC NULLS FIRST], [i_item_id#21, ca_country#39, ca_state#38, ca_county#37, agg1#85, agg2#86, agg3#87, agg4#88, agg5#89, agg6#90, agg7#91]

