== Physical Plan ==
TakeOrderedAndProject (136)
+- Union (135)
   :- * HashAggregate (48)
   :  +- Exchange (47)
   :     +- * HashAggregate (46)
   :        +- * Project (45)
   :           +- * BroadcastHashJoin Inner BuildRight (44)
   :              :- * Project (39)
   :              :  +- * BroadcastHashJoin Inner BuildRight (38)
   :              :     :- * Project (32)
   :              :     :  +- * BroadcastHashJoin Inner BuildRight (31)
   :              :     :     :- * Project (26)
   :              :     :     :  +- * SortMergeJoin Inner (25)
   :              :     :     :     :- * Sort (19)
   :              :     :     :     :  +- Exchange (18)
   :              :     :     :     :     +- * Project (17)
   :              :     :     :     :        +- * BroadcastHashJoin Inner BuildLeft (16)
   :              :     :     :     :           :- BroadcastExchange (11)
   :              :     :     :     :           :  +- * Project (10)
   :              :     :     :     :           :     +- * BroadcastHashJoin Inner BuildLeft (9)
   :              :     :     :     :           :        :- BroadcastExchange (4)
   :              :     :     :     :           :        :  +- * Filter (3)
   :              :     :     :     :           :        :     +- * ColumnarToRow (2)
   :              :     :     :     :           :        :        +- Scan parquet default.catalog_sales (1)
   :              :     :     :     :           :        +- * Project (8)
   :              :     :     :     :           :           +- * Filter (7)
   :              :     :     :     :           :              +- * ColumnarToRow (6)
   :              :     :     :     :           :                 +- Scan parquet default.customer_demographics (5)
   :              :     :     :     :           +- * Project (15)
   :              :     :     :     :              +- * Filter (14)
   :              :     :     :     :                 +- * ColumnarToRow (13)
   :              :     :     :     :                    +- Scan parquet default.customer (12)
   :              :     :     :     +- * Sort (24)
   :              :     :     :        +- Exchange (23)
   :              :     :     :           +- * Filter (22)
   :              :     :     :              +- * ColumnarToRow (21)
   :              :     :     :                 +- Scan parquet default.customer_demographics (20)
   :              :     :     +- BroadcastExchange (30)
   :              :     :        +- * Filter (29)
   :              :     :           +- * ColumnarToRow (28)
   :              :     :              +- Scan parquet default.customer_address (27)
   :              :     +- BroadcastExchange (37)
   :              :        +- * Project (36)
   :              :           +- * Filter (35)
   :              :              +- * ColumnarToRow (34)
   :              :                 +- Scan parquet default.date_dim (33)
   :              +- BroadcastExchange (43)
   :                 +- * Filter (42)
   :                    +- * ColumnarToRow (41)
   :                       +- Scan parquet default.item (40)
   :- * HashAggregate (69)
   :  +- Exchange (68)
   :     +- * HashAggregate (67)
   :        +- * Project (66)
   :           +- * BroadcastHashJoin Inner BuildRight (65)
   :              :- * Project (63)
   :              :  +- * BroadcastHashJoin Inner BuildRight (62)
   :              :     :- * Project (60)
   :              :     :  +- * BroadcastHashJoin Inner BuildRight (59)
   :              :     :     :- * Project (54)
   :              :     :     :  +- * SortMergeJoin Inner (53)
   :              :     :     :     :- * Sort (50)
   :              :     :     :     :  +- ReusedExchange (49)
   :              :     :     :     +- * Sort (52)
   :              :     :     :        +- ReusedExchange (51)
   :              :     :     +- BroadcastExchange (58)
   :              :     :        +- * Filter (57)
   :              :     :           +- * ColumnarToRow (56)
   :              :     :              +- Scan parquet default.customer_address (55)
   :              :     +- ReusedExchange (61)
   :              +- ReusedExchange (64)
   :- * HashAggregate (91)
   :  +- Exchange (90)
   :     +- * HashAggregate (89)
   :        +- * Project (88)
   :           +- * BroadcastHashJoin Inner BuildRight (87)
   :              :- * Project (85)
   :              :  +- * BroadcastHashJoin Inner BuildRight (84)
   :              :     :- * Project (82)
   :              :     :  +- * BroadcastHashJoin Inner BuildRight (81)
   :              :     :     :- * Project (75)
   :              :     :     :  +- * SortMergeJoin Inner (74)
   :              :     :     :     :- * Sort (71)
   :              :     :     :     :  +- ReusedExchange (70)
   :              :     :     :     +- * Sort (73)
   :              :     :     :        +- ReusedExchange (72)
   :              :     :     +- BroadcastExchange (80)
   :              :     :        +- * Project (79)
   :              :     :           +- * Filter (78)
   :              :     :              +- * ColumnarToRow (77)
   :              :     :                 +- Scan parquet default.customer_address (76)
   :              :     +- ReusedExchange (83)
   :              +- ReusedExchange (86)
   :- * HashAggregate (113)
   :  +- Exchange (112)
   :     +- * HashAggregate (111)
   :        +- * Project (110)
   :           +- * BroadcastHashJoin Inner BuildRight (109)
   :              :- * Project (107)
   :              :  +- * BroadcastHashJoin Inner BuildRight (106)
   :              :     :- * Project (104)
   :              :     :  +- * BroadcastHashJoin Inner BuildRight (103)
   :              :     :     :- * Project (97)
   :              :     :     :  +- * SortMergeJoin Inner (96)
   :              :     :     :     :- * Sort (93)
   :              :     :     :     :  +- ReusedExchange (92)
   :              :     :     :     +- * Sort (95)
   :              :     :     :        +- ReusedExchange (94)
   :              :     :     +- BroadcastExchange (102)
   :              :     :        +- * Project (101)
   :              :     :           +- * Filter (100)
   :              :     :              +- * ColumnarToRow (99)
   :              :     :                 +- Scan parquet default.customer_address (98)
   :              :     +- ReusedExchange (105)
   :              +- ReusedExchange (108)
   +- * HashAggregate (134)
      +- Exchange (133)
         +- * HashAggregate (132)
            +- * Project (131)
               +- * BroadcastHashJoin Inner BuildRight (130)
                  :- * Project (125)
                  :  +- * BroadcastHashJoin Inner BuildRight (124)
                  :     :- * Project (122)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (121)
                  :     :     :- * Project (119)
                  :     :     :  +- * SortMergeJoin Inner (118)
                  :     :     :     :- * Sort (115)
                  :     :     :     :  +- ReusedExchange (114)
                  :     :     :     +- * Sort (117)
                  :     :     :        +- ReusedExchange (116)
                  :     :     +- ReusedExchange (120)
                  :     +- ReusedExchange (123)
                  +- BroadcastExchange (129)
                     +- * Filter (128)
                        +- * ColumnarToRow (127)
                           +- Scan parquet default.item (126)


(1) Scan parquet default.catalog_sales
Output [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#9), dynamicpruningexpression(cs_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]

(3) Filter [codegen id : 1]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Condition : ((isnotnull(cs_bill_cdemo_sk#2) AND isnotnull(cs_bill_customer_sk#1)) AND isnotnull(cs_item_sk#3))

(4) BroadcastExchange
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#11]

(5) Scan parquet default.customer_demographics
Output [4]: [cd_demo_sk#12, cd_gender#13, cd_education_status#14, cd_dep_count#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_education_status), EqualTo(cd_gender,M), EqualTo(cd_education_status,College), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_education_status:string,cd_dep_count:int>

(6) ColumnarToRow
Input [4]: [cd_demo_sk#12, cd_gender#13, cd_education_status#14, cd_dep_count#15]

(7) Filter
Input [4]: [cd_demo_sk#12, cd_gender#13, cd_education_status#14, cd_dep_count#15]
Condition : ((((isnotnull(cd_gender#13) AND isnotnull(cd_education_status#14)) AND (cd_gender#13 = M)) AND (cd_education_status#14 = College)) AND isnotnull(cd_demo_sk#12))

(8) Project
Output [2]: [cd_demo_sk#12, cd_dep_count#15]
Input [4]: [cd_demo_sk#12, cd_gender#13, cd_education_status#14, cd_dep_count#15]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [cs_bill_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#12]
Join condition: None

(10) Project [codegen id : 2]
Output [9]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15]
Input [11]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_demo_sk#12, cd_dep_count#15]

(11) BroadcastExchange
Input [9]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(12) Scan parquet default.customer
Output [5]: [c_customer_sk#17, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_month#20, c_birth_year#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [In(c_birth_month, [9,5,12,4,1,10]), IsNotNull(c_customer_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int,c_birth_month:int,c_birth_year:int>

(13) ColumnarToRow
Input [5]: [c_customer_sk#17, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_month#20, c_birth_year#21]

(14) Filter
Input [5]: [c_customer_sk#17, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_month#20, c_birth_year#21]
Condition : (((c_birth_month#20 IN (9,5,12,4,1,10) AND isnotnull(c_customer_sk#17)) AND isnotnull(c_current_cdemo_sk#18)) AND isnotnull(c_current_addr_sk#19))

(15) Project
Output [4]: [c_customer_sk#17, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_year#21]
Input [5]: [c_customer_sk#17, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_month#20, c_birth_year#21]

(16) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#17]
Join condition: None

(17) Project [codegen id : 3]
Output [11]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_year#21]
Input [13]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_customer_sk#17, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_year#21]

(18) Exchange
Input [11]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_year#21]
Arguments: hashpartitioning(c_current_cdemo_sk#18, 5), ENSURE_REQUIREMENTS, [id=#22]

(19) Sort [codegen id : 4]
Input [11]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_year#21]
Arguments: [c_current_cdemo_sk#18 ASC NULLS FIRST], false, 0

(20) Scan parquet default.customer_demographics
Output [1]: [cd_demo_sk#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int>

(21) ColumnarToRow [codegen id : 5]
Input [1]: [cd_demo_sk#23]

(22) Filter [codegen id : 5]
Input [1]: [cd_demo_sk#23]
Condition : isnotnull(cd_demo_sk#23)

(23) Exchange
Input [1]: [cd_demo_sk#23]
Arguments: hashpartitioning(cd_demo_sk#23, 5), ENSURE_REQUIREMENTS, [id=#24]

(24) Sort [codegen id : 6]
Input [1]: [cd_demo_sk#23]
Arguments: [cd_demo_sk#23 ASC NULLS FIRST], false, 0

(25) SortMergeJoin [codegen id : 10]
Left keys [1]: [c_current_cdemo_sk#18]
Right keys [1]: [cd_demo_sk#23]
Join condition: None

(26) Project [codegen id : 10]
Output [10]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_addr_sk#19, c_birth_year#21]
Input [12]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_year#21, cd_demo_sk#23]

(27) Scan parquet default.customer_address
Output [4]: [ca_address_sk#25, ca_county#26, ca_state#27, ca_country#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [ND,WI,AL,NC,OK,MS,TN]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string,ca_state:string,ca_country:string>

(28) ColumnarToRow [codegen id : 7]
Input [4]: [ca_address_sk#25, ca_county#26, ca_state#27, ca_country#28]

(29) Filter [codegen id : 7]
Input [4]: [ca_address_sk#25, ca_county#26, ca_state#27, ca_country#28]
Condition : (ca_state#27 IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#25))

(30) BroadcastExchange
Input [4]: [ca_address_sk#25, ca_county#26, ca_state#27, ca_country#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(31) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [c_current_addr_sk#19]
Right keys [1]: [ca_address_sk#25]
Join condition: None

(32) Project [codegen id : 10]
Output [12]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_birth_year#21, ca_county#26, ca_state#27, ca_country#28]
Input [14]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_addr_sk#19, c_birth_year#21, ca_address_sk#25, ca_county#26, ca_state#27, ca_country#28]

(33) Scan parquet default.date_dim
Output [2]: [d_date_sk#30, d_year#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(34) ColumnarToRow [codegen id : 8]
Input [2]: [d_date_sk#30, d_year#31]

(35) Filter [codegen id : 8]
Input [2]: [d_date_sk#30, d_year#31]
Condition : ((isnotnull(d_year#31) AND (d_year#31 = 2001)) AND isnotnull(d_date_sk#30))

(36) Project [codegen id : 8]
Output [1]: [d_date_sk#30]
Input [2]: [d_date_sk#30, d_year#31]

(37) BroadcastExchange
Input [1]: [d_date_sk#30]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#32]

(38) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#9]
Right keys [1]: [d_date_sk#30]
Join condition: None

(39) Project [codegen id : 10]
Output [11]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#15, c_birth_year#21, ca_county#26, ca_state#27, ca_country#28]
Input [13]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_birth_year#21, ca_county#26, ca_state#27, ca_country#28, d_date_sk#30]

(40) Scan parquet default.item
Output [2]: [i_item_sk#33, i_item_id#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(41) ColumnarToRow [codegen id : 9]
Input [2]: [i_item_sk#33, i_item_id#34]

(42) Filter [codegen id : 9]
Input [2]: [i_item_sk#33, i_item_id#34]
Condition : isnotnull(i_item_sk#33)

(43) BroadcastExchange
Input [2]: [i_item_sk#33, i_item_id#34]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#35]

(44) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [i_item_sk#33]
Join condition: None

(45) Project [codegen id : 10]
Output [11]: [i_item_id#34, ca_country#28, ca_state#27, ca_county#26, cast(cs_quantity#4 as decimal(12,2)) AS agg1#36, cast(cs_list_price#5 as decimal(12,2)) AS agg2#37, cast(cs_coupon_amt#7 as decimal(12,2)) AS agg3#38, cast(cs_sales_price#6 as decimal(12,2)) AS agg4#39, cast(cs_net_profit#8 as decimal(12,2)) AS agg5#40, cast(c_birth_year#21 as decimal(12,2)) AS agg6#41, cast(cd_dep_count#15 as decimal(12,2)) AS agg7#42]
Input [13]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#15, c_birth_year#21, ca_county#26, ca_state#27, ca_country#28, i_item_sk#33, i_item_id#34]

(46) HashAggregate [codegen id : 10]
Input [11]: [i_item_id#34, ca_country#28, ca_state#27, ca_county#26, agg1#36, agg2#37, agg3#38, agg4#39, agg5#40, agg6#41, agg7#42]
Keys [4]: [i_item_id#34, ca_country#28, ca_state#27, ca_county#26]
Functions [7]: [partial_avg(agg1#36), partial_avg(agg2#37), partial_avg(agg3#38), partial_avg(agg4#39), partial_avg(agg5#40), partial_avg(agg6#41), partial_avg(agg7#42)]
Aggregate Attributes [14]: [sum#43, count#44, sum#45, count#46, sum#47, count#48, sum#49, count#50, sum#51, count#52, sum#53, count#54, sum#55, count#56]
Results [18]: [i_item_id#34, ca_country#28, ca_state#27, ca_county#26, sum#57, count#58, sum#59, count#60, sum#61, count#62, sum#63, count#64, sum#65, count#66, sum#67, count#68, sum#69, count#70]

(47) Exchange
Input [18]: [i_item_id#34, ca_country#28, ca_state#27, ca_county#26, sum#57, count#58, sum#59, count#60, sum#61, count#62, sum#63, count#64, sum#65, count#66, sum#67, count#68, sum#69, count#70]
Arguments: hashpartitioning(i_item_id#34, ca_country#28, ca_state#27, ca_county#26, 5), ENSURE_REQUIREMENTS, [id=#71]

(48) HashAggregate [codegen id : 11]
Input [18]: [i_item_id#34, ca_country#28, ca_state#27, ca_county#26, sum#57, count#58, sum#59, count#60, sum#61, count#62, sum#63, count#64, sum#65, count#66, sum#67, count#68, sum#69, count#70]
Keys [4]: [i_item_id#34, ca_country#28, ca_state#27, ca_county#26]
Functions [7]: [avg(agg1#36), avg(agg2#37), avg(agg3#38), avg(agg4#39), avg(agg5#40), avg(agg6#41), avg(agg7#42)]
Aggregate Attributes [7]: [avg(agg1#36)#72, avg(agg2#37)#73, avg(agg3#38)#74, avg(agg4#39)#75, avg(agg5#40)#76, avg(agg6#41)#77, avg(agg7#42)#78]
Results [11]: [i_item_id#34, ca_country#28, ca_state#27, ca_county#26, avg(agg1#36)#72 AS agg1#79, avg(agg2#37)#73 AS agg2#80, avg(agg3#38)#74 AS agg3#81, avg(agg4#39)#75 AS agg4#82, avg(agg5#40)#76 AS agg5#83, avg(agg6#41)#77 AS agg6#84, avg(agg7#42)#78 AS agg7#85]

(49) ReusedExchange [Reuses operator id: unknown]
Output [11]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_year#21]

(50) Sort [codegen id : 15]
Input [11]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_year#21]
Arguments: [c_current_cdemo_sk#18 ASC NULLS FIRST], false, 0

(51) ReusedExchange [Reuses operator id: 23]
Output [1]: [cd_demo_sk#86]

(52) Sort [codegen id : 17]
Input [1]: [cd_demo_sk#86]
Arguments: [cd_demo_sk#86 ASC NULLS FIRST], false, 0

(53) SortMergeJoin [codegen id : 21]
Left keys [1]: [c_current_cdemo_sk#18]
Right keys [1]: [cd_demo_sk#86]
Join condition: None

(54) Project [codegen id : 21]
Output [10]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_addr_sk#19, c_birth_year#21]
Input [12]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_year#21, cd_demo_sk#86]

(55) Scan parquet default.customer_address
Output [3]: [ca_address_sk#25, ca_state#27, ca_country#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [ND,WI,AL,NC,OK,MS,TN]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(56) ColumnarToRow [codegen id : 18]
Input [3]: [ca_address_sk#25, ca_state#27, ca_country#28]

(57) Filter [codegen id : 18]
Input [3]: [ca_address_sk#25, ca_state#27, ca_country#28]
Condition : (ca_state#27 IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#25))

(58) BroadcastExchange
Input [3]: [ca_address_sk#25, ca_state#27, ca_country#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#87]

(59) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [c_current_addr_sk#19]
Right keys [1]: [ca_address_sk#25]
Join condition: None

(60) Project [codegen id : 21]
Output [11]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_birth_year#21, ca_state#27, ca_country#28]
Input [13]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_addr_sk#19, c_birth_year#21, ca_address_sk#25, ca_state#27, ca_country#28]

(61) ReusedExchange [Reuses operator id: 37]
Output [1]: [d_date_sk#30]

(62) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [cs_sold_date_sk#9]
Right keys [1]: [d_date_sk#30]
Join condition: None

(63) Project [codegen id : 21]
Output [10]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#15, c_birth_year#21, ca_state#27, ca_country#28]
Input [12]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_birth_year#21, ca_state#27, ca_country#28, d_date_sk#30]

(64) ReusedExchange [Reuses operator id: 43]
Output [2]: [i_item_sk#33, i_item_id#34]

(65) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [i_item_sk#33]
Join condition: None

(66) Project [codegen id : 21]
Output [10]: [i_item_id#34, ca_country#28, ca_state#27, cast(cs_quantity#4 as decimal(12,2)) AS agg1#36, cast(cs_list_price#5 as decimal(12,2)) AS agg2#37, cast(cs_coupon_amt#7 as decimal(12,2)) AS agg3#38, cast(cs_sales_price#6 as decimal(12,2)) AS agg4#39, cast(cs_net_profit#8 as decimal(12,2)) AS agg5#40, cast(c_birth_year#21 as decimal(12,2)) AS agg6#41, cast(cd_dep_count#15 as decimal(12,2)) AS agg7#42]
Input [12]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#15, c_birth_year#21, ca_state#27, ca_country#28, i_item_sk#33, i_item_id#34]

(67) HashAggregate [codegen id : 21]
Input [10]: [i_item_id#34, ca_country#28, ca_state#27, agg1#36, agg2#37, agg3#38, agg4#39, agg5#40, agg6#41, agg7#42]
Keys [3]: [i_item_id#34, ca_country#28, ca_state#27]
Functions [7]: [partial_avg(agg1#36), partial_avg(agg2#37), partial_avg(agg3#38), partial_avg(agg4#39), partial_avg(agg5#40), partial_avg(agg6#41), partial_avg(agg7#42)]
Aggregate Attributes [14]: [sum#88, count#89, sum#90, count#91, sum#92, count#93, sum#94, count#95, sum#96, count#97, sum#98, count#99, sum#100, count#101]
Results [17]: [i_item_id#34, ca_country#28, ca_state#27, sum#102, count#103, sum#104, count#105, sum#106, count#107, sum#108, count#109, sum#110, count#111, sum#112, count#113, sum#114, count#115]

(68) Exchange
Input [17]: [i_item_id#34, ca_country#28, ca_state#27, sum#102, count#103, sum#104, count#105, sum#106, count#107, sum#108, count#109, sum#110, count#111, sum#112, count#113, sum#114, count#115]
Arguments: hashpartitioning(i_item_id#34, ca_country#28, ca_state#27, 5), ENSURE_REQUIREMENTS, [id=#116]

(69) HashAggregate [codegen id : 22]
Input [17]: [i_item_id#34, ca_country#28, ca_state#27, sum#102, count#103, sum#104, count#105, sum#106, count#107, sum#108, count#109, sum#110, count#111, sum#112, count#113, sum#114, count#115]
Keys [3]: [i_item_id#34, ca_country#28, ca_state#27]
Functions [7]: [avg(agg1#36), avg(agg2#37), avg(agg3#38), avg(agg4#39), avg(agg5#40), avg(agg6#41), avg(agg7#42)]
Aggregate Attributes [7]: [avg(agg1#36)#117, avg(agg2#37)#118, avg(agg3#38)#119, avg(agg4#39)#120, avg(agg5#40)#121, avg(agg6#41)#122, avg(agg7#42)#123]
Results [11]: [i_item_id#34, ca_country#28, ca_state#27, null AS county#124, avg(agg1#36)#117 AS agg1#125, avg(agg2#37)#118 AS agg2#126, avg(agg3#38)#119 AS agg3#127, avg(agg4#39)#120 AS agg4#128, avg(agg5#40)#121 AS agg5#129, avg(agg6#41)#122 AS agg6#130, avg(agg7#42)#123 AS agg7#131]

(70) ReusedExchange [Reuses operator id: unknown]
Output [11]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_year#21]

(71) Sort [codegen id : 26]
Input [11]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_year#21]
Arguments: [c_current_cdemo_sk#18 ASC NULLS FIRST], false, 0

(72) ReusedExchange [Reuses operator id: 23]
Output [1]: [cd_demo_sk#132]

(73) Sort [codegen id : 28]
Input [1]: [cd_demo_sk#132]
Arguments: [cd_demo_sk#132 ASC NULLS FIRST], false, 0

(74) SortMergeJoin [codegen id : 32]
Left keys [1]: [c_current_cdemo_sk#18]
Right keys [1]: [cd_demo_sk#132]
Join condition: None

(75) Project [codegen id : 32]
Output [10]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_addr_sk#19, c_birth_year#21]
Input [12]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_year#21, cd_demo_sk#132]

(76) Scan parquet default.customer_address
Output [3]: [ca_address_sk#25, ca_state#27, ca_country#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [ND,WI,AL,NC,OK,MS,TN]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(77) ColumnarToRow [codegen id : 29]
Input [3]: [ca_address_sk#25, ca_state#27, ca_country#28]

(78) Filter [codegen id : 29]
Input [3]: [ca_address_sk#25, ca_state#27, ca_country#28]
Condition : (ca_state#27 IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#25))

(79) Project [codegen id : 29]
Output [2]: [ca_address_sk#25, ca_country#28]
Input [3]: [ca_address_sk#25, ca_state#27, ca_country#28]

(80) BroadcastExchange
Input [2]: [ca_address_sk#25, ca_country#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#133]

(81) BroadcastHashJoin [codegen id : 32]
Left keys [1]: [c_current_addr_sk#19]
Right keys [1]: [ca_address_sk#25]
Join condition: None

(82) Project [codegen id : 32]
Output [10]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_birth_year#21, ca_country#28]
Input [12]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_addr_sk#19, c_birth_year#21, ca_address_sk#25, ca_country#28]

(83) ReusedExchange [Reuses operator id: 37]
Output [1]: [d_date_sk#30]

(84) BroadcastHashJoin [codegen id : 32]
Left keys [1]: [cs_sold_date_sk#9]
Right keys [1]: [d_date_sk#30]
Join condition: None

(85) Project [codegen id : 32]
Output [9]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#15, c_birth_year#21, ca_country#28]
Input [11]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_birth_year#21, ca_country#28, d_date_sk#30]

(86) ReusedExchange [Reuses operator id: 43]
Output [2]: [i_item_sk#33, i_item_id#34]

(87) BroadcastHashJoin [codegen id : 32]
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [i_item_sk#33]
Join condition: None

(88) Project [codegen id : 32]
Output [9]: [i_item_id#34, ca_country#28, cast(cs_quantity#4 as decimal(12,2)) AS agg1#36, cast(cs_list_price#5 as decimal(12,2)) AS agg2#37, cast(cs_coupon_amt#7 as decimal(12,2)) AS agg3#38, cast(cs_sales_price#6 as decimal(12,2)) AS agg4#39, cast(cs_net_profit#8 as decimal(12,2)) AS agg5#40, cast(c_birth_year#21 as decimal(12,2)) AS agg6#41, cast(cd_dep_count#15 as decimal(12,2)) AS agg7#42]
Input [11]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#15, c_birth_year#21, ca_country#28, i_item_sk#33, i_item_id#34]

(89) HashAggregate [codegen id : 32]
Input [9]: [i_item_id#34, ca_country#28, agg1#36, agg2#37, agg3#38, agg4#39, agg5#40, agg6#41, agg7#42]
Keys [2]: [i_item_id#34, ca_country#28]
Functions [7]: [partial_avg(agg1#36), partial_avg(agg2#37), partial_avg(agg3#38), partial_avg(agg4#39), partial_avg(agg5#40), partial_avg(agg6#41), partial_avg(agg7#42)]
Aggregate Attributes [14]: [sum#134, count#135, sum#136, count#137, sum#138, count#139, sum#140, count#141, sum#142, count#143, sum#144, count#145, sum#146, count#147]
Results [16]: [i_item_id#34, ca_country#28, sum#148, count#149, sum#150, count#151, sum#152, count#153, sum#154, count#155, sum#156, count#157, sum#158, count#159, sum#160, count#161]

(90) Exchange
Input [16]: [i_item_id#34, ca_country#28, sum#148, count#149, sum#150, count#151, sum#152, count#153, sum#154, count#155, sum#156, count#157, sum#158, count#159, sum#160, count#161]
Arguments: hashpartitioning(i_item_id#34, ca_country#28, 5), ENSURE_REQUIREMENTS, [id=#162]

(91) HashAggregate [codegen id : 33]
Input [16]: [i_item_id#34, ca_country#28, sum#148, count#149, sum#150, count#151, sum#152, count#153, sum#154, count#155, sum#156, count#157, sum#158, count#159, sum#160, count#161]
Keys [2]: [i_item_id#34, ca_country#28]
Functions [7]: [avg(agg1#36), avg(agg2#37), avg(agg3#38), avg(agg4#39), avg(agg5#40), avg(agg6#41), avg(agg7#42)]
Aggregate Attributes [7]: [avg(agg1#36)#163, avg(agg2#37)#164, avg(agg3#38)#165, avg(agg4#39)#166, avg(agg5#40)#167, avg(agg6#41)#168, avg(agg7#42)#169]
Results [11]: [i_item_id#34, ca_country#28, null AS ca_state#170, null AS county#171, avg(agg1#36)#163 AS agg1#172, avg(agg2#37)#164 AS agg2#173, avg(agg3#38)#165 AS agg3#174, avg(agg4#39)#166 AS agg4#175, avg(agg5#40)#167 AS agg5#176, avg(agg6#41)#168 AS agg6#177, avg(agg7#42)#169 AS agg7#178]

(92) ReusedExchange [Reuses operator id: unknown]
Output [11]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_year#21]

(93) Sort [codegen id : 37]
Input [11]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_year#21]
Arguments: [c_current_cdemo_sk#18 ASC NULLS FIRST], false, 0

(94) ReusedExchange [Reuses operator id: 23]
Output [1]: [cd_demo_sk#179]

(95) Sort [codegen id : 39]
Input [1]: [cd_demo_sk#179]
Arguments: [cd_demo_sk#179 ASC NULLS FIRST], false, 0

(96) SortMergeJoin [codegen id : 43]
Left keys [1]: [c_current_cdemo_sk#18]
Right keys [1]: [cd_demo_sk#179]
Join condition: None

(97) Project [codegen id : 43]
Output [10]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_addr_sk#19, c_birth_year#21]
Input [12]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_year#21, cd_demo_sk#179]

(98) Scan parquet default.customer_address
Output [2]: [ca_address_sk#25, ca_state#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [ND,WI,AL,NC,OK,MS,TN]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(99) ColumnarToRow [codegen id : 40]
Input [2]: [ca_address_sk#25, ca_state#27]

(100) Filter [codegen id : 40]
Input [2]: [ca_address_sk#25, ca_state#27]
Condition : (ca_state#27 IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#25))

(101) Project [codegen id : 40]
Output [1]: [ca_address_sk#25]
Input [2]: [ca_address_sk#25, ca_state#27]

(102) BroadcastExchange
Input [1]: [ca_address_sk#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#180]

(103) BroadcastHashJoin [codegen id : 43]
Left keys [1]: [c_current_addr_sk#19]
Right keys [1]: [ca_address_sk#25]
Join condition: None

(104) Project [codegen id : 43]
Output [9]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_birth_year#21]
Input [11]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_addr_sk#19, c_birth_year#21, ca_address_sk#25]

(105) ReusedExchange [Reuses operator id: 37]
Output [1]: [d_date_sk#30]

(106) BroadcastHashJoin [codegen id : 43]
Left keys [1]: [cs_sold_date_sk#9]
Right keys [1]: [d_date_sk#30]
Join condition: None

(107) Project [codegen id : 43]
Output [8]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#15, c_birth_year#21]
Input [10]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_birth_year#21, d_date_sk#30]

(108) ReusedExchange [Reuses operator id: 43]
Output [2]: [i_item_sk#33, i_item_id#34]

(109) BroadcastHashJoin [codegen id : 43]
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [i_item_sk#33]
Join condition: None

(110) Project [codegen id : 43]
Output [8]: [i_item_id#34, cast(cs_quantity#4 as decimal(12,2)) AS agg1#36, cast(cs_list_price#5 as decimal(12,2)) AS agg2#37, cast(cs_coupon_amt#7 as decimal(12,2)) AS agg3#38, cast(cs_sales_price#6 as decimal(12,2)) AS agg4#39, cast(cs_net_profit#8 as decimal(12,2)) AS agg5#40, cast(c_birth_year#21 as decimal(12,2)) AS agg6#41, cast(cd_dep_count#15 as decimal(12,2)) AS agg7#42]
Input [10]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#15, c_birth_year#21, i_item_sk#33, i_item_id#34]

(111) HashAggregate [codegen id : 43]
Input [8]: [i_item_id#34, agg1#36, agg2#37, agg3#38, agg4#39, agg5#40, agg6#41, agg7#42]
Keys [1]: [i_item_id#34]
Functions [7]: [partial_avg(agg1#36), partial_avg(agg2#37), partial_avg(agg3#38), partial_avg(agg4#39), partial_avg(agg5#40), partial_avg(agg6#41), partial_avg(agg7#42)]
Aggregate Attributes [14]: [sum#181, count#182, sum#183, count#184, sum#185, count#186, sum#187, count#188, sum#189, count#190, sum#191, count#192, sum#193, count#194]
Results [15]: [i_item_id#34, sum#195, count#196, sum#197, count#198, sum#199, count#200, sum#201, count#202, sum#203, count#204, sum#205, count#206, sum#207, count#208]

(112) Exchange
Input [15]: [i_item_id#34, sum#195, count#196, sum#197, count#198, sum#199, count#200, sum#201, count#202, sum#203, count#204, sum#205, count#206, sum#207, count#208]
Arguments: hashpartitioning(i_item_id#34, 5), ENSURE_REQUIREMENTS, [id=#209]

(113) HashAggregate [codegen id : 44]
Input [15]: [i_item_id#34, sum#195, count#196, sum#197, count#198, sum#199, count#200, sum#201, count#202, sum#203, count#204, sum#205, count#206, sum#207, count#208]
Keys [1]: [i_item_id#34]
Functions [7]: [avg(agg1#36), avg(agg2#37), avg(agg3#38), avg(agg4#39), avg(agg5#40), avg(agg6#41), avg(agg7#42)]
Aggregate Attributes [7]: [avg(agg1#36)#210, avg(agg2#37)#211, avg(agg3#38)#212, avg(agg4#39)#213, avg(agg5#40)#214, avg(agg6#41)#215, avg(agg7#42)#216]
Results [11]: [i_item_id#34, null AS ca_country#217, null AS ca_state#218, null AS county#219, avg(agg1#36)#210 AS agg1#220, avg(agg2#37)#211 AS agg2#221, avg(agg3#38)#212 AS agg3#222, avg(agg4#39)#213 AS agg4#223, avg(agg5#40)#214 AS agg5#224, avg(agg6#41)#215 AS agg6#225, avg(agg7#42)#216 AS agg7#226]

(114) ReusedExchange [Reuses operator id: unknown]
Output [11]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_year#21]

(115) Sort [codegen id : 48]
Input [11]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_year#21]
Arguments: [c_current_cdemo_sk#18 ASC NULLS FIRST], false, 0

(116) ReusedExchange [Reuses operator id: 23]
Output [1]: [cd_demo_sk#227]

(117) Sort [codegen id : 50]
Input [1]: [cd_demo_sk#227]
Arguments: [cd_demo_sk#227 ASC NULLS FIRST], false, 0

(118) SortMergeJoin [codegen id : 54]
Left keys [1]: [c_current_cdemo_sk#18]
Right keys [1]: [cd_demo_sk#227]
Join condition: None

(119) Project [codegen id : 54]
Output [10]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_addr_sk#19, c_birth_year#21]
Input [12]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_year#21, cd_demo_sk#227]

(120) ReusedExchange [Reuses operator id: 102]
Output [1]: [ca_address_sk#25]

(121) BroadcastHashJoin [codegen id : 54]
Left keys [1]: [c_current_addr_sk#19]
Right keys [1]: [ca_address_sk#25]
Join condition: None

(122) Project [codegen id : 54]
Output [9]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_birth_year#21]
Input [11]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_addr_sk#19, c_birth_year#21, ca_address_sk#25]

(123) ReusedExchange [Reuses operator id: 37]
Output [1]: [d_date_sk#30]

(124) BroadcastHashJoin [codegen id : 54]
Left keys [1]: [cs_sold_date_sk#9]
Right keys [1]: [d_date_sk#30]
Join condition: None

(125) Project [codegen id : 54]
Output [8]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#15, c_birth_year#21]
Input [10]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_birth_year#21, d_date_sk#30]

(126) Scan parquet default.item
Output [1]: [i_item_sk#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int>

(127) ColumnarToRow [codegen id : 53]
Input [1]: [i_item_sk#33]

(128) Filter [codegen id : 53]
Input [1]: [i_item_sk#33]
Condition : isnotnull(i_item_sk#33)

(129) BroadcastExchange
Input [1]: [i_item_sk#33]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#228]

(130) BroadcastHashJoin [codegen id : 54]
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [i_item_sk#33]
Join condition: None

(131) Project [codegen id : 54]
Output [7]: [cast(cs_quantity#4 as decimal(12,2)) AS agg1#36, cast(cs_list_price#5 as decimal(12,2)) AS agg2#37, cast(cs_coupon_amt#7 as decimal(12,2)) AS agg3#38, cast(cs_sales_price#6 as decimal(12,2)) AS agg4#39, cast(cs_net_profit#8 as decimal(12,2)) AS agg5#40, cast(c_birth_year#21 as decimal(12,2)) AS agg6#41, cast(cd_dep_count#15 as decimal(12,2)) AS agg7#42]
Input [9]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#15, c_birth_year#21, i_item_sk#33]

(132) HashAggregate [codegen id : 54]
Input [7]: [agg1#36, agg2#37, agg3#38, agg4#39, agg5#40, agg6#41, agg7#42]
Keys: []
Functions [7]: [partial_avg(agg1#36), partial_avg(agg2#37), partial_avg(agg3#38), partial_avg(agg4#39), partial_avg(agg5#40), partial_avg(agg6#41), partial_avg(agg7#42)]
Aggregate Attributes [14]: [sum#229, count#230, sum#231, count#232, sum#233, count#234, sum#235, count#236, sum#237, count#238, sum#239, count#240, sum#241, count#242]
Results [14]: [sum#243, count#244, sum#245, count#246, sum#247, count#248, sum#249, count#250, sum#251, count#252, sum#253, count#254, sum#255, count#256]

(133) Exchange
Input [14]: [sum#243, count#244, sum#245, count#246, sum#247, count#248, sum#249, count#250, sum#251, count#252, sum#253, count#254, sum#255, count#256]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#257]

(134) HashAggregate [codegen id : 55]
Input [14]: [sum#243, count#244, sum#245, count#246, sum#247, count#248, sum#249, count#250, sum#251, count#252, sum#253, count#254, sum#255, count#256]
Keys: []
Functions [7]: [avg(agg1#36), avg(agg2#37), avg(agg3#38), avg(agg4#39), avg(agg5#40), avg(agg6#41), avg(agg7#42)]
Aggregate Attributes [7]: [avg(agg1#36)#258, avg(agg2#37)#259, avg(agg3#38)#260, avg(agg4#39)#261, avg(agg5#40)#262, avg(agg6#41)#263, avg(agg7#42)#264]
Results [11]: [null AS i_item_id#265, null AS ca_country#266, null AS ca_state#267, null AS county#268, avg(agg1#36)#258 AS agg1#269, avg(agg2#37)#259 AS agg2#270, avg(agg3#38)#260 AS agg3#271, avg(agg4#39)#261 AS agg4#272, avg(agg5#40)#262 AS agg5#273, avg(agg6#41)#263 AS agg6#274, avg(agg7#42)#264 AS agg7#275]

(135) Union

(136) TakeOrderedAndProject
Input [11]: [i_item_id#34, ca_country#28, ca_state#27, ca_county#26, agg1#79, agg2#80, agg3#81, agg4#82, agg5#83, agg6#84, agg7#85]
Arguments: 100, [ca_country#28 ASC NULLS FIRST, ca_state#27 ASC NULLS FIRST, ca_county#26 ASC NULLS FIRST, i_item_id#34 ASC NULLS FIRST], [i_item_id#34, ca_country#28, ca_state#27, ca_county#26, agg1#79, agg2#80, agg3#81, agg4#82, agg5#83, agg6#84, agg7#85]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#9 IN dynamicpruning#10
ReusedExchange (137)


(137) ReusedExchange [Reuses operator id: 37]
Output [1]: [d_date_sk#30]


