== Physical Plan ==
TakeOrderedAndProject (160)
+- Union (159)
   :- * HashAggregate (48)
   :  +- Exchange (47)
   :     +- * HashAggregate (46)
   :        +- * Project (45)
   :           +- * Project (44)
   :              +- * SortMergeJoin Inner (43)
   :                 :- * Sort (21)
   :                 :  +- Exchange (20)
   :                 :     +- * Project (19)
   :                 :        +- * BroadcastHashJoin Inner BuildRight (18)
   :                 :           :- * Project (13)
   :                 :           :  +- * BroadcastHashJoin Inner BuildRight (12)
   :                 :           :     :- * Project (10)
   :                 :           :     :  +- * BroadcastHashJoin Inner BuildRight (9)
   :                 :           :     :     :- * Filter (3)
   :                 :           :     :     :  +- * ColumnarToRow (2)
   :                 :           :     :     :     +- Scan parquet spark_catalog.default.catalog_sales (1)
   :                 :           :     :     +- BroadcastExchange (8)
   :                 :           :     :        +- * Project (7)
   :                 :           :     :           +- * Filter (6)
   :                 :           :     :              +- * ColumnarToRow (5)
   :                 :           :     :                 +- Scan parquet spark_catalog.default.customer_demographics (4)
   :                 :           :     +- ReusedExchange (11)
   :                 :           +- BroadcastExchange (17)
   :                 :              +- * Filter (16)
   :                 :                 +- * ColumnarToRow (15)
   :                 :                    +- Scan parquet spark_catalog.default.item (14)
   :                 +- * Sort (42)
   :                    +- Exchange (41)
   :                       +- * Project (40)
   :                          +- * SortMergeJoin Inner (39)
   :                             :- * Sort (33)
   :                             :  +- Exchange (32)
   :                             :     +- * Project (31)
   :                             :        +- * BroadcastHashJoin Inner BuildRight (30)
   :                             :           :- * Project (25)
   :                             :           :  +- * Filter (24)
   :                             :           :     +- * ColumnarToRow (23)
   :                             :           :        +- Scan parquet spark_catalog.default.customer (22)
   :                             :           +- BroadcastExchange (29)
   :                             :              +- * Filter (28)
   :                             :                 +- * ColumnarToRow (27)
   :                             :                    +- Scan parquet spark_catalog.default.customer_address (26)
   :                             +- * Sort (38)
   :                                +- Exchange (37)
   :                                   +- * Filter (36)
   :                                      +- * ColumnarToRow (35)
   :                                         +- Scan parquet spark_catalog.default.customer_demographics (34)
   :- * HashAggregate (74)
   :  +- Exchange (73)
   :     +- * HashAggregate (72)
   :        +- * Project (71)
   :           +- * Project (70)
   :              +- * SortMergeJoin Inner (69)
   :                 :- * Sort (50)
   :                 :  +- ReusedExchange (49)
   :                 +- * Sort (68)
   :                    +- Exchange (67)
   :                       +- * Project (66)
   :                          +- * SortMergeJoin Inner (65)
   :                             :- * Sort (62)
   :                             :  +- Exchange (61)
   :                             :     +- * Project (60)
   :                             :        +- * BroadcastHashJoin Inner BuildRight (59)
   :                             :           :- * Project (54)
   :                             :           :  +- * Filter (53)
   :                             :           :     +- * ColumnarToRow (52)
   :                             :           :        +- Scan parquet spark_catalog.default.customer (51)
   :                             :           +- BroadcastExchange (58)
   :                             :              +- * Filter (57)
   :                             :                 +- * ColumnarToRow (56)
   :                             :                    +- Scan parquet spark_catalog.default.customer_address (55)
   :                             +- * Sort (64)
   :                                +- ReusedExchange (63)
   :- * HashAggregate (101)
   :  +- Exchange (100)
   :     +- * HashAggregate (99)
   :        +- * Project (98)
   :           +- * Project (97)
   :              +- * SortMergeJoin Inner (96)
   :                 :- * Sort (76)
   :                 :  +- ReusedExchange (75)
   :                 +- * Sort (95)
   :                    +- Exchange (94)
   :                       +- * Project (93)
   :                          +- * SortMergeJoin Inner (92)
   :                             :- * Sort (89)
   :                             :  +- Exchange (88)
   :                             :     +- * Project (87)
   :                             :        +- * BroadcastHashJoin Inner BuildRight (86)
   :                             :           :- * Project (80)
   :                             :           :  +- * Filter (79)
   :                             :           :     +- * ColumnarToRow (78)
   :                             :           :        +- Scan parquet spark_catalog.default.customer (77)
   :                             :           +- BroadcastExchange (85)
   :                             :              +- * Project (84)
   :                             :                 +- * Filter (83)
   :                             :                    +- * ColumnarToRow (82)
   :                             :                       +- Scan parquet spark_catalog.default.customer_address (81)
   :                             +- * Sort (91)
   :                                +- ReusedExchange (90)
   :- * HashAggregate (136)
   :  +- Exchange (135)
   :     +- * HashAggregate (134)
   :        +- * Project (133)
   :           +- * BroadcastHashJoin Inner BuildRight (132)
   :              :- * Project (130)
   :              :  +- * BroadcastHashJoin Inner BuildRight (129)
   :              :     :- * Project (110)
   :              :     :  +- * BroadcastHashJoin Inner BuildRight (109)
   :              :     :     :- * Project (107)
   :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (106)
   :              :     :     :     :- * Filter (104)
   :              :     :     :     :  +- * ColumnarToRow (103)
   :              :     :     :     :     +- Scan parquet spark_catalog.default.catalog_sales (102)
   :              :     :     :     +- ReusedExchange (105)
   :              :     :     +- ReusedExchange (108)
   :              :     +- BroadcastExchange (128)
   :              :        +- * Project (127)
   :              :           +- * BroadcastHashJoin Inner BuildLeft (126)
   :              :              :- BroadcastExchange (122)
   :              :              :  +- * Project (121)
   :              :              :     +- * BroadcastHashJoin Inner BuildRight (120)
   :              :              :        :- * Project (114)
   :              :              :        :  +- * Filter (113)
   :              :              :        :     +- * ColumnarToRow (112)
   :              :              :        :        +- Scan parquet spark_catalog.default.customer (111)
   :              :              :        +- BroadcastExchange (119)
   :              :              :           +- * Project (118)
   :              :              :              +- * Filter (117)
   :              :              :                 +- * ColumnarToRow (116)
   :              :              :                    +- Scan parquet spark_catalog.default.customer_address (115)
   :              :              +- * Filter (125)
   :              :                 +- * ColumnarToRow (124)
   :              :                    +- Scan parquet spark_catalog.default.customer_demographics (123)
   :              +- ReusedExchange (131)
   +- * HashAggregate (158)
      +- Exchange (157)
         +- * HashAggregate (156)
            +- * Project (155)
               +- * Project (154)
                  +- * BroadcastHashJoin Inner BuildRight (153)
                     :- * Project (151)
                     :  +- * BroadcastHashJoin Inner BuildRight (150)
                     :     :- * Project (145)
                     :     :  +- * BroadcastHashJoin Inner BuildRight (144)
                     :     :     :- * Project (142)
                     :     :     :  +- * BroadcastHashJoin Inner BuildRight (141)
                     :     :     :     :- * Filter (139)
                     :     :     :     :  +- * ColumnarToRow (138)
                     :     :     :     :     +- Scan parquet spark_catalog.default.catalog_sales (137)
                     :     :     :     +- ReusedExchange (140)
                     :     :     +- ReusedExchange (143)
                     :     +- BroadcastExchange (149)
                     :        +- * Filter (148)
                     :           +- * ColumnarToRow (147)
                     :              +- Scan parquet spark_catalog.default.item (146)
                     +- ReusedExchange (152)


(1) Scan parquet spark_catalog.default.catalog_sales
Output [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#9), dynamicpruningexpression(cs_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]

(3) Filter [codegen id : 4]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Condition : ((isnotnull(cs_bill_cdemo_sk#2) AND isnotnull(cs_bill_customer_sk#1)) AND isnotnull(cs_item_sk#3))

(4) Scan parquet spark_catalog.default.customer_demographics
Output [4]: [cd_demo_sk#11, cd_gender#12, cd_education_status#13, cd_dep_count#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_education_status), EqualTo(cd_gender,M), EqualTo(cd_education_status,College             ), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_education_status:string,cd_dep_count:int>

(5) ColumnarToRow [codegen id : 1]
Input [4]: [cd_demo_sk#11, cd_gender#12, cd_education_status#13, cd_dep_count#14]

(6) Filter [codegen id : 1]
Input [4]: [cd_demo_sk#11, cd_gender#12, cd_education_status#13, cd_dep_count#14]
Condition : ((((isnotnull(cd_gender#12) AND isnotnull(cd_education_status#13)) AND (cd_gender#12 = M)) AND (cd_education_status#13 = College             )) AND isnotnull(cd_demo_sk#11))

(7) Project [codegen id : 1]
Output [2]: [cd_demo_sk#11, cd_dep_count#14]
Input [4]: [cd_demo_sk#11, cd_gender#12, cd_education_status#13, cd_dep_count#14]

(8) BroadcastExchange
Input [2]: [cd_demo_sk#11, cd_dep_count#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_bill_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#11]
Join type: Inner
Join condition: None

(10) Project [codegen id : 4]
Output [9]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#14]
Input [11]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_demo_sk#11, cd_dep_count#14]

(11) ReusedExchange [Reuses operator id: 165]
Output [1]: [d_date_sk#15]

(12) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#9]
Right keys [1]: [d_date_sk#15]
Join type: Inner
Join condition: None

(13) Project [codegen id : 4]
Output [8]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14]
Input [10]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#14, d_date_sk#15]

(14) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#16, i_item_id#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(15) ColumnarToRow [codegen id : 3]
Input [2]: [i_item_sk#16, i_item_id#17]

(16) Filter [codegen id : 3]
Input [2]: [i_item_sk#16, i_item_id#17]
Condition : isnotnull(i_item_sk#16)

(17) BroadcastExchange
Input [2]: [i_item_sk#16, i_item_id#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(18) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [i_item_sk#16]
Join type: Inner
Join condition: None

(19) Project [codegen id : 4]
Output [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, i_item_id#17]
Input [10]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, i_item_sk#16, i_item_id#17]

(20) Exchange
Input [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, i_item_id#17]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(21) Sort [codegen id : 5]
Input [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, i_item_id#17]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(22) Scan parquet spark_catalog.default.customer
Output [5]: [c_customer_sk#18, c_current_cdemo_sk#19, c_current_addr_sk#20, c_birth_month#21, c_birth_year#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [In(c_birth_month, [1,10,12,4,5,9]), IsNotNull(c_customer_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int,c_birth_month:int,c_birth_year:int>

(23) ColumnarToRow [codegen id : 7]
Input [5]: [c_customer_sk#18, c_current_cdemo_sk#19, c_current_addr_sk#20, c_birth_month#21, c_birth_year#22]

(24) Filter [codegen id : 7]
Input [5]: [c_customer_sk#18, c_current_cdemo_sk#19, c_current_addr_sk#20, c_birth_month#21, c_birth_year#22]
Condition : (((c_birth_month#21 IN (9,5,12,4,1,10) AND isnotnull(c_customer_sk#18)) AND isnotnull(c_current_cdemo_sk#19)) AND isnotnull(c_current_addr_sk#20))

(25) Project [codegen id : 7]
Output [4]: [c_customer_sk#18, c_current_cdemo_sk#19, c_current_addr_sk#20, c_birth_year#22]
Input [5]: [c_customer_sk#18, c_current_cdemo_sk#19, c_current_addr_sk#20, c_birth_month#21, c_birth_year#22]

(26) Scan parquet spark_catalog.default.customer_address
Output [4]: [ca_address_sk#23, ca_county#24, ca_state#25, ca_country#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [AL,MS,NC,ND,OK,TN,WI]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string,ca_state:string,ca_country:string>

(27) ColumnarToRow [codegen id : 6]
Input [4]: [ca_address_sk#23, ca_county#24, ca_state#25, ca_country#26]

(28) Filter [codegen id : 6]
Input [4]: [ca_address_sk#23, ca_county#24, ca_state#25, ca_country#26]
Condition : (ca_state#25 IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#23))

(29) BroadcastExchange
Input [4]: [ca_address_sk#23, ca_county#24, ca_state#25, ca_country#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=4]

(30) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [c_current_addr_sk#20]
Right keys [1]: [ca_address_sk#23]
Join type: Inner
Join condition: None

(31) Project [codegen id : 7]
Output [6]: [c_customer_sk#18, c_current_cdemo_sk#19, c_birth_year#22, ca_county#24, ca_state#25, ca_country#26]
Input [8]: [c_customer_sk#18, c_current_cdemo_sk#19, c_current_addr_sk#20, c_birth_year#22, ca_address_sk#23, ca_county#24, ca_state#25, ca_country#26]

(32) Exchange
Input [6]: [c_customer_sk#18, c_current_cdemo_sk#19, c_birth_year#22, ca_county#24, ca_state#25, ca_country#26]
Arguments: hashpartitioning(c_current_cdemo_sk#19, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(33) Sort [codegen id : 8]
Input [6]: [c_customer_sk#18, c_current_cdemo_sk#19, c_birth_year#22, ca_county#24, ca_state#25, ca_country#26]
Arguments: [c_current_cdemo_sk#19 ASC NULLS FIRST], false, 0

(34) Scan parquet spark_catalog.default.customer_demographics
Output [1]: [cd_demo_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int>

(35) ColumnarToRow [codegen id : 9]
Input [1]: [cd_demo_sk#27]

(36) Filter [codegen id : 9]
Input [1]: [cd_demo_sk#27]
Condition : isnotnull(cd_demo_sk#27)

(37) Exchange
Input [1]: [cd_demo_sk#27]
Arguments: hashpartitioning(cd_demo_sk#27, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(38) Sort [codegen id : 10]
Input [1]: [cd_demo_sk#27]
Arguments: [cd_demo_sk#27 ASC NULLS FIRST], false, 0

(39) SortMergeJoin [codegen id : 11]
Left keys [1]: [c_current_cdemo_sk#19]
Right keys [1]: [cd_demo_sk#27]
Join type: Inner
Join condition: None

(40) Project [codegen id : 11]
Output [5]: [c_customer_sk#18, c_birth_year#22, ca_county#24, ca_state#25, ca_country#26]
Input [7]: [c_customer_sk#18, c_current_cdemo_sk#19, c_birth_year#22, ca_county#24, ca_state#25, ca_country#26, cd_demo_sk#27]

(41) Exchange
Input [5]: [c_customer_sk#18, c_birth_year#22, ca_county#24, ca_state#25, ca_country#26]
Arguments: hashpartitioning(c_customer_sk#18, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(42) Sort [codegen id : 12]
Input [5]: [c_customer_sk#18, c_birth_year#22, ca_county#24, ca_state#25, ca_country#26]
Arguments: [c_customer_sk#18 ASC NULLS FIRST], false, 0

(43) SortMergeJoin [codegen id : 13]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#18]
Join type: Inner
Join condition: None

(44) Project [codegen id : 13]
Output [11]: [cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, c_birth_year#22, ca_county#24, ca_state#25, ca_country#26, i_item_id#17]
Input [13]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, i_item_id#17, c_customer_sk#18, c_birth_year#22, ca_county#24, ca_state#25, ca_country#26]

(45) Project [codegen id : 13]
Output [11]: [i_item_id#17, ca_country#26, ca_state#25, ca_county#24, cast(cs_quantity#4 as decimal(12,2)) AS agg1#28, cast(cs_list_price#5 as decimal(12,2)) AS agg2#29, cast(cs_coupon_amt#7 as decimal(12,2)) AS agg3#30, cast(cs_sales_price#6 as decimal(12,2)) AS agg4#31, cast(cs_net_profit#8 as decimal(12,2)) AS agg5#32, cast(c_birth_year#22 as decimal(12,2)) AS agg6#33, cast(cd_dep_count#14 as decimal(12,2)) AS agg7#34]
Input [11]: [cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, c_birth_year#22, ca_county#24, ca_state#25, ca_country#26, i_item_id#17]

(46) HashAggregate [codegen id : 13]
Input [11]: [i_item_id#17, ca_country#26, ca_state#25, ca_county#24, agg1#28, agg2#29, agg3#30, agg4#31, agg5#32, agg6#33, agg7#34]
Keys [4]: [i_item_id#17, ca_country#26, ca_state#25, ca_county#24]
Functions [7]: [partial_avg(agg1#28), partial_avg(agg2#29), partial_avg(agg3#30), partial_avg(agg4#31), partial_avg(agg5#32), partial_avg(agg6#33), partial_avg(agg7#34)]
Aggregate Attributes [14]: [sum#35, count#36, sum#37, count#38, sum#39, count#40, sum#41, count#42, sum#43, count#44, sum#45, count#46, sum#47, count#48]
Results [18]: [i_item_id#17, ca_country#26, ca_state#25, ca_county#24, sum#49, count#50, sum#51, count#52, sum#53, count#54, sum#55, count#56, sum#57, count#58, sum#59, count#60, sum#61, count#62]

(47) Exchange
Input [18]: [i_item_id#17, ca_country#26, ca_state#25, ca_county#24, sum#49, count#50, sum#51, count#52, sum#53, count#54, sum#55, count#56, sum#57, count#58, sum#59, count#60, sum#61, count#62]
Arguments: hashpartitioning(i_item_id#17, ca_country#26, ca_state#25, ca_county#24, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(48) HashAggregate [codegen id : 14]
Input [18]: [i_item_id#17, ca_country#26, ca_state#25, ca_county#24, sum#49, count#50, sum#51, count#52, sum#53, count#54, sum#55, count#56, sum#57, count#58, sum#59, count#60, sum#61, count#62]
Keys [4]: [i_item_id#17, ca_country#26, ca_state#25, ca_county#24]
Functions [7]: [avg(agg1#28), avg(agg2#29), avg(agg3#30), avg(agg4#31), avg(agg5#32), avg(agg6#33), avg(agg7#34)]
Aggregate Attributes [7]: [avg(agg1#28)#63, avg(agg2#29)#64, avg(agg3#30)#65, avg(agg4#31)#66, avg(agg5#32)#67, avg(agg6#33)#68, avg(agg7#34)#69]
Results [11]: [i_item_id#17, ca_country#26, ca_state#25, ca_county#24, avg(agg1#28)#63 AS agg1#70, avg(agg2#29)#64 AS agg2#71, avg(agg3#30)#65 AS agg3#72, avg(agg4#31)#66 AS agg4#73, avg(agg5#32)#67 AS agg5#74, avg(agg6#33)#68 AS agg6#75, avg(agg7#34)#69 AS agg7#76]

(49) ReusedExchange [Reuses operator id: 20]
Output [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, i_item_id#17]

(50) Sort [codegen id : 19]
Input [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, i_item_id#17]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(51) Scan parquet spark_catalog.default.customer
Output [5]: [c_customer_sk#18, c_current_cdemo_sk#19, c_current_addr_sk#20, c_birth_month#21, c_birth_year#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [In(c_birth_month, [1,10,12,4,5,9]), IsNotNull(c_customer_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int,c_birth_month:int,c_birth_year:int>

(52) ColumnarToRow [codegen id : 21]
Input [5]: [c_customer_sk#18, c_current_cdemo_sk#19, c_current_addr_sk#20, c_birth_month#21, c_birth_year#22]

(53) Filter [codegen id : 21]
Input [5]: [c_customer_sk#18, c_current_cdemo_sk#19, c_current_addr_sk#20, c_birth_month#21, c_birth_year#22]
Condition : (((c_birth_month#21 IN (9,5,12,4,1,10) AND isnotnull(c_customer_sk#18)) AND isnotnull(c_current_cdemo_sk#19)) AND isnotnull(c_current_addr_sk#20))

(54) Project [codegen id : 21]
Output [4]: [c_customer_sk#18, c_current_cdemo_sk#19, c_current_addr_sk#20, c_birth_year#22]
Input [5]: [c_customer_sk#18, c_current_cdemo_sk#19, c_current_addr_sk#20, c_birth_month#21, c_birth_year#22]

(55) Scan parquet spark_catalog.default.customer_address
Output [3]: [ca_address_sk#23, ca_state#25, ca_country#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [AL,MS,NC,ND,OK,TN,WI]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(56) ColumnarToRow [codegen id : 20]
Input [3]: [ca_address_sk#23, ca_state#25, ca_country#26]

(57) Filter [codegen id : 20]
Input [3]: [ca_address_sk#23, ca_state#25, ca_country#26]
Condition : (ca_state#25 IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#23))

(58) BroadcastExchange
Input [3]: [ca_address_sk#23, ca_state#25, ca_country#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=9]

(59) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [c_current_addr_sk#20]
Right keys [1]: [ca_address_sk#23]
Join type: Inner
Join condition: None

(60) Project [codegen id : 21]
Output [5]: [c_customer_sk#18, c_current_cdemo_sk#19, c_birth_year#22, ca_state#25, ca_country#26]
Input [7]: [c_customer_sk#18, c_current_cdemo_sk#19, c_current_addr_sk#20, c_birth_year#22, ca_address_sk#23, ca_state#25, ca_country#26]

(61) Exchange
Input [5]: [c_customer_sk#18, c_current_cdemo_sk#19, c_birth_year#22, ca_state#25, ca_country#26]
Arguments: hashpartitioning(c_current_cdemo_sk#19, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(62) Sort [codegen id : 22]
Input [5]: [c_customer_sk#18, c_current_cdemo_sk#19, c_birth_year#22, ca_state#25, ca_country#26]
Arguments: [c_current_cdemo_sk#19 ASC NULLS FIRST], false, 0

(63) ReusedExchange [Reuses operator id: 37]
Output [1]: [cd_demo_sk#27]

(64) Sort [codegen id : 24]
Input [1]: [cd_demo_sk#27]
Arguments: [cd_demo_sk#27 ASC NULLS FIRST], false, 0

(65) SortMergeJoin [codegen id : 25]
Left keys [1]: [c_current_cdemo_sk#19]
Right keys [1]: [cd_demo_sk#27]
Join type: Inner
Join condition: None

(66) Project [codegen id : 25]
Output [4]: [c_customer_sk#18, c_birth_year#22, ca_state#25, ca_country#26]
Input [6]: [c_customer_sk#18, c_current_cdemo_sk#19, c_birth_year#22, ca_state#25, ca_country#26, cd_demo_sk#27]

(67) Exchange
Input [4]: [c_customer_sk#18, c_birth_year#22, ca_state#25, ca_country#26]
Arguments: hashpartitioning(c_customer_sk#18, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(68) Sort [codegen id : 26]
Input [4]: [c_customer_sk#18, c_birth_year#22, ca_state#25, ca_country#26]
Arguments: [c_customer_sk#18 ASC NULLS FIRST], false, 0

(69) SortMergeJoin [codegen id : 27]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#18]
Join type: Inner
Join condition: None

(70) Project [codegen id : 27]
Output [10]: [cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, c_birth_year#22, ca_state#25, ca_country#26, i_item_id#17]
Input [12]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, i_item_id#17, c_customer_sk#18, c_birth_year#22, ca_state#25, ca_country#26]

(71) Project [codegen id : 27]
Output [10]: [i_item_id#17, ca_country#26, ca_state#25, cast(cs_quantity#4 as decimal(12,2)) AS agg1#28, cast(cs_list_price#5 as decimal(12,2)) AS agg2#29, cast(cs_coupon_amt#7 as decimal(12,2)) AS agg3#30, cast(cs_sales_price#6 as decimal(12,2)) AS agg4#31, cast(cs_net_profit#8 as decimal(12,2)) AS agg5#32, cast(c_birth_year#22 as decimal(12,2)) AS agg6#33, cast(cd_dep_count#14 as decimal(12,2)) AS agg7#34]
Input [10]: [cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, c_birth_year#22, ca_state#25, ca_country#26, i_item_id#17]

(72) HashAggregate [codegen id : 27]
Input [10]: [i_item_id#17, ca_country#26, ca_state#25, agg1#28, agg2#29, agg3#30, agg4#31, agg5#32, agg6#33, agg7#34]
Keys [3]: [i_item_id#17, ca_country#26, ca_state#25]
Functions [7]: [partial_avg(agg1#28), partial_avg(agg2#29), partial_avg(agg3#30), partial_avg(agg4#31), partial_avg(agg5#32), partial_avg(agg6#33), partial_avg(agg7#34)]
Aggregate Attributes [14]: [sum#77, count#78, sum#79, count#80, sum#81, count#82, sum#83, count#84, sum#85, count#86, sum#87, count#88, sum#89, count#90]
Results [17]: [i_item_id#17, ca_country#26, ca_state#25, sum#91, count#92, sum#93, count#94, sum#95, count#96, sum#97, count#98, sum#99, count#100, sum#101, count#102, sum#103, count#104]

(73) Exchange
Input [17]: [i_item_id#17, ca_country#26, ca_state#25, sum#91, count#92, sum#93, count#94, sum#95, count#96, sum#97, count#98, sum#99, count#100, sum#101, count#102, sum#103, count#104]
Arguments: hashpartitioning(i_item_id#17, ca_country#26, ca_state#25, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(74) HashAggregate [codegen id : 28]
Input [17]: [i_item_id#17, ca_country#26, ca_state#25, sum#91, count#92, sum#93, count#94, sum#95, count#96, sum#97, count#98, sum#99, count#100, sum#101, count#102, sum#103, count#104]
Keys [3]: [i_item_id#17, ca_country#26, ca_state#25]
Functions [7]: [avg(agg1#28), avg(agg2#29), avg(agg3#30), avg(agg4#31), avg(agg5#32), avg(agg6#33), avg(agg7#34)]
Aggregate Attributes [7]: [avg(agg1#28)#105, avg(agg2#29)#106, avg(agg3#30)#107, avg(agg4#31)#108, avg(agg5#32)#109, avg(agg6#33)#110, avg(agg7#34)#111]
Results [11]: [i_item_id#17, ca_country#26, ca_state#25, null AS county#112, avg(agg1#28)#105 AS agg1#113, avg(agg2#29)#106 AS agg2#114, avg(agg3#30)#107 AS agg3#115, avg(agg4#31)#108 AS agg4#116, avg(agg5#32)#109 AS agg5#117, avg(agg6#33)#110 AS agg6#118, avg(agg7#34)#111 AS agg7#119]

(75) ReusedExchange [Reuses operator id: 20]
Output [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, i_item_id#17]

(76) Sort [codegen id : 33]
Input [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, i_item_id#17]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(77) Scan parquet spark_catalog.default.customer
Output [5]: [c_customer_sk#18, c_current_cdemo_sk#19, c_current_addr_sk#20, c_birth_month#21, c_birth_year#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [In(c_birth_month, [1,10,12,4,5,9]), IsNotNull(c_customer_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int,c_birth_month:int,c_birth_year:int>

(78) ColumnarToRow [codegen id : 35]
Input [5]: [c_customer_sk#18, c_current_cdemo_sk#19, c_current_addr_sk#20, c_birth_month#21, c_birth_year#22]

(79) Filter [codegen id : 35]
Input [5]: [c_customer_sk#18, c_current_cdemo_sk#19, c_current_addr_sk#20, c_birth_month#21, c_birth_year#22]
Condition : (((c_birth_month#21 IN (9,5,12,4,1,10) AND isnotnull(c_customer_sk#18)) AND isnotnull(c_current_cdemo_sk#19)) AND isnotnull(c_current_addr_sk#20))

(80) Project [codegen id : 35]
Output [4]: [c_customer_sk#18, c_current_cdemo_sk#19, c_current_addr_sk#20, c_birth_year#22]
Input [5]: [c_customer_sk#18, c_current_cdemo_sk#19, c_current_addr_sk#20, c_birth_month#21, c_birth_year#22]

(81) Scan parquet spark_catalog.default.customer_address
Output [3]: [ca_address_sk#23, ca_state#25, ca_country#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [AL,MS,NC,ND,OK,TN,WI]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(82) ColumnarToRow [codegen id : 34]
Input [3]: [ca_address_sk#23, ca_state#25, ca_country#26]

(83) Filter [codegen id : 34]
Input [3]: [ca_address_sk#23, ca_state#25, ca_country#26]
Condition : (ca_state#25 IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#23))

(84) Project [codegen id : 34]
Output [2]: [ca_address_sk#23, ca_country#26]
Input [3]: [ca_address_sk#23, ca_state#25, ca_country#26]

(85) BroadcastExchange
Input [2]: [ca_address_sk#23, ca_country#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=13]

(86) BroadcastHashJoin [codegen id : 35]
Left keys [1]: [c_current_addr_sk#20]
Right keys [1]: [ca_address_sk#23]
Join type: Inner
Join condition: None

(87) Project [codegen id : 35]
Output [4]: [c_customer_sk#18, c_current_cdemo_sk#19, c_birth_year#22, ca_country#26]
Input [6]: [c_customer_sk#18, c_current_cdemo_sk#19, c_current_addr_sk#20, c_birth_year#22, ca_address_sk#23, ca_country#26]

(88) Exchange
Input [4]: [c_customer_sk#18, c_current_cdemo_sk#19, c_birth_year#22, ca_country#26]
Arguments: hashpartitioning(c_current_cdemo_sk#19, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(89) Sort [codegen id : 36]
Input [4]: [c_customer_sk#18, c_current_cdemo_sk#19, c_birth_year#22, ca_country#26]
Arguments: [c_current_cdemo_sk#19 ASC NULLS FIRST], false, 0

(90) ReusedExchange [Reuses operator id: 37]
Output [1]: [cd_demo_sk#27]

(91) Sort [codegen id : 38]
Input [1]: [cd_demo_sk#27]
Arguments: [cd_demo_sk#27 ASC NULLS FIRST], false, 0

(92) SortMergeJoin [codegen id : 39]
Left keys [1]: [c_current_cdemo_sk#19]
Right keys [1]: [cd_demo_sk#27]
Join type: Inner
Join condition: None

(93) Project [codegen id : 39]
Output [3]: [c_customer_sk#18, c_birth_year#22, ca_country#26]
Input [5]: [c_customer_sk#18, c_current_cdemo_sk#19, c_birth_year#22, ca_country#26, cd_demo_sk#27]

(94) Exchange
Input [3]: [c_customer_sk#18, c_birth_year#22, ca_country#26]
Arguments: hashpartitioning(c_customer_sk#18, 5), ENSURE_REQUIREMENTS, [plan_id=15]

(95) Sort [codegen id : 40]
Input [3]: [c_customer_sk#18, c_birth_year#22, ca_country#26]
Arguments: [c_customer_sk#18 ASC NULLS FIRST], false, 0

(96) SortMergeJoin [codegen id : 41]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#18]
Join type: Inner
Join condition: None

(97) Project [codegen id : 41]
Output [9]: [cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, c_birth_year#22, ca_country#26, i_item_id#17]
Input [11]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, i_item_id#17, c_customer_sk#18, c_birth_year#22, ca_country#26]

(98) Project [codegen id : 41]
Output [9]: [i_item_id#17, ca_country#26, cast(cs_quantity#4 as decimal(12,2)) AS agg1#28, cast(cs_list_price#5 as decimal(12,2)) AS agg2#29, cast(cs_coupon_amt#7 as decimal(12,2)) AS agg3#30, cast(cs_sales_price#6 as decimal(12,2)) AS agg4#31, cast(cs_net_profit#8 as decimal(12,2)) AS agg5#32, cast(c_birth_year#22 as decimal(12,2)) AS agg6#33, cast(cd_dep_count#14 as decimal(12,2)) AS agg7#34]
Input [9]: [cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, c_birth_year#22, ca_country#26, i_item_id#17]

(99) HashAggregate [codegen id : 41]
Input [9]: [i_item_id#17, ca_country#26, agg1#28, agg2#29, agg3#30, agg4#31, agg5#32, agg6#33, agg7#34]
Keys [2]: [i_item_id#17, ca_country#26]
Functions [7]: [partial_avg(agg1#28), partial_avg(agg2#29), partial_avg(agg3#30), partial_avg(agg4#31), partial_avg(agg5#32), partial_avg(agg6#33), partial_avg(agg7#34)]
Aggregate Attributes [14]: [sum#120, count#121, sum#122, count#123, sum#124, count#125, sum#126, count#127, sum#128, count#129, sum#130, count#131, sum#132, count#133]
Results [16]: [i_item_id#17, ca_country#26, sum#134, count#135, sum#136, count#137, sum#138, count#139, sum#140, count#141, sum#142, count#143, sum#144, count#145, sum#146, count#147]

(100) Exchange
Input [16]: [i_item_id#17, ca_country#26, sum#134, count#135, sum#136, count#137, sum#138, count#139, sum#140, count#141, sum#142, count#143, sum#144, count#145, sum#146, count#147]
Arguments: hashpartitioning(i_item_id#17, ca_country#26, 5), ENSURE_REQUIREMENTS, [plan_id=16]

(101) HashAggregate [codegen id : 42]
Input [16]: [i_item_id#17, ca_country#26, sum#134, count#135, sum#136, count#137, sum#138, count#139, sum#140, count#141, sum#142, count#143, sum#144, count#145, sum#146, count#147]
Keys [2]: [i_item_id#17, ca_country#26]
Functions [7]: [avg(agg1#28), avg(agg2#29), avg(agg3#30), avg(agg4#31), avg(agg5#32), avg(agg6#33), avg(agg7#34)]
Aggregate Attributes [7]: [avg(agg1#28)#148, avg(agg2#29)#149, avg(agg3#30)#150, avg(agg4#31)#151, avg(agg5#32)#152, avg(agg6#33)#153, avg(agg7#34)#154]
Results [11]: [i_item_id#17, ca_country#26, null AS ca_state#155, null AS county#156, avg(agg1#28)#148 AS agg1#157, avg(agg2#29)#149 AS agg2#158, avg(agg3#30)#150 AS agg3#159, avg(agg4#31)#151 AS agg4#160, avg(agg5#32)#152 AS agg5#161, avg(agg6#33)#153 AS agg6#162, avg(agg7#34)#154 AS agg7#163]

(102) Scan parquet spark_catalog.default.catalog_sales
Output [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#9), dynamicpruningexpression(cs_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(103) ColumnarToRow [codegen id : 49]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]

(104) Filter [codegen id : 49]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Condition : ((isnotnull(cs_bill_cdemo_sk#2) AND isnotnull(cs_bill_customer_sk#1)) AND isnotnull(cs_item_sk#3))

(105) ReusedExchange [Reuses operator id: 8]
Output [2]: [cd_demo_sk#11, cd_dep_count#14]

(106) BroadcastHashJoin [codegen id : 49]
Left keys [1]: [cs_bill_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#11]
Join type: Inner
Join condition: None

(107) Project [codegen id : 49]
Output [9]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#14]
Input [11]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_demo_sk#11, cd_dep_count#14]

(108) ReusedExchange [Reuses operator id: 165]
Output [1]: [d_date_sk#15]

(109) BroadcastHashJoin [codegen id : 49]
Left keys [1]: [cs_sold_date_sk#9]
Right keys [1]: [d_date_sk#15]
Join type: Inner
Join condition: None

(110) Project [codegen id : 49]
Output [8]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14]
Input [10]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#14, d_date_sk#15]

(111) Scan parquet spark_catalog.default.customer
Output [5]: [c_customer_sk#18, c_current_cdemo_sk#19, c_current_addr_sk#20, c_birth_month#21, c_birth_year#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [In(c_birth_month, [1,10,12,4,5,9]), IsNotNull(c_customer_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int,c_birth_month:int,c_birth_year:int>

(112) ColumnarToRow [codegen id : 46]
Input [5]: [c_customer_sk#18, c_current_cdemo_sk#19, c_current_addr_sk#20, c_birth_month#21, c_birth_year#22]

(113) Filter [codegen id : 46]
Input [5]: [c_customer_sk#18, c_current_cdemo_sk#19, c_current_addr_sk#20, c_birth_month#21, c_birth_year#22]
Condition : (((c_birth_month#21 IN (9,5,12,4,1,10) AND isnotnull(c_customer_sk#18)) AND isnotnull(c_current_cdemo_sk#19)) AND isnotnull(c_current_addr_sk#20))

(114) Project [codegen id : 46]
Output [4]: [c_customer_sk#18, c_current_cdemo_sk#19, c_current_addr_sk#20, c_birth_year#22]
Input [5]: [c_customer_sk#18, c_current_cdemo_sk#19, c_current_addr_sk#20, c_birth_month#21, c_birth_year#22]

(115) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#23, ca_state#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [AL,MS,NC,ND,OK,TN,WI]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(116) ColumnarToRow [codegen id : 45]
Input [2]: [ca_address_sk#23, ca_state#25]

(117) Filter [codegen id : 45]
Input [2]: [ca_address_sk#23, ca_state#25]
Condition : (ca_state#25 IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#23))

(118) Project [codegen id : 45]
Output [1]: [ca_address_sk#23]
Input [2]: [ca_address_sk#23, ca_state#25]

(119) BroadcastExchange
Input [1]: [ca_address_sk#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=17]

(120) BroadcastHashJoin [codegen id : 46]
Left keys [1]: [c_current_addr_sk#20]
Right keys [1]: [ca_address_sk#23]
Join type: Inner
Join condition: None

(121) Project [codegen id : 46]
Output [3]: [c_customer_sk#18, c_current_cdemo_sk#19, c_birth_year#22]
Input [5]: [c_customer_sk#18, c_current_cdemo_sk#19, c_current_addr_sk#20, c_birth_year#22, ca_address_sk#23]

(122) BroadcastExchange
Input [3]: [c_customer_sk#18, c_current_cdemo_sk#19, c_birth_year#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=18]

(123) Scan parquet spark_catalog.default.customer_demographics
Output [1]: [cd_demo_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int>

(124) ColumnarToRow
Input [1]: [cd_demo_sk#27]

(125) Filter
Input [1]: [cd_demo_sk#27]
Condition : isnotnull(cd_demo_sk#27)

(126) BroadcastHashJoin [codegen id : 47]
Left keys [1]: [c_current_cdemo_sk#19]
Right keys [1]: [cd_demo_sk#27]
Join type: Inner
Join condition: None

(127) Project [codegen id : 47]
Output [2]: [c_customer_sk#18, c_birth_year#22]
Input [4]: [c_customer_sk#18, c_current_cdemo_sk#19, c_birth_year#22, cd_demo_sk#27]

(128) BroadcastExchange
Input [2]: [c_customer_sk#18, c_birth_year#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=19]

(129) BroadcastHashJoin [codegen id : 49]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#18]
Join type: Inner
Join condition: None

(130) Project [codegen id : 49]
Output [8]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, c_birth_year#22]
Input [10]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, c_customer_sk#18, c_birth_year#22]

(131) ReusedExchange [Reuses operator id: 17]
Output [2]: [i_item_sk#16, i_item_id#17]

(132) BroadcastHashJoin [codegen id : 49]
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [i_item_sk#16]
Join type: Inner
Join condition: None

(133) Project [codegen id : 49]
Output [8]: [i_item_id#17, cast(cs_quantity#4 as decimal(12,2)) AS agg1#28, cast(cs_list_price#5 as decimal(12,2)) AS agg2#29, cast(cs_coupon_amt#7 as decimal(12,2)) AS agg3#30, cast(cs_sales_price#6 as decimal(12,2)) AS agg4#31, cast(cs_net_profit#8 as decimal(12,2)) AS agg5#32, cast(c_birth_year#22 as decimal(12,2)) AS agg6#33, cast(cd_dep_count#14 as decimal(12,2)) AS agg7#34]
Input [10]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, c_birth_year#22, i_item_sk#16, i_item_id#17]

(134) HashAggregate [codegen id : 49]
Input [8]: [i_item_id#17, agg1#28, agg2#29, agg3#30, agg4#31, agg5#32, agg6#33, agg7#34]
Keys [1]: [i_item_id#17]
Functions [7]: [partial_avg(agg1#28), partial_avg(agg2#29), partial_avg(agg3#30), partial_avg(agg4#31), partial_avg(agg5#32), partial_avg(agg6#33), partial_avg(agg7#34)]
Aggregate Attributes [14]: [sum#164, count#165, sum#166, count#167, sum#168, count#169, sum#170, count#171, sum#172, count#173, sum#174, count#175, sum#176, count#177]
Results [15]: [i_item_id#17, sum#178, count#179, sum#180, count#181, sum#182, count#183, sum#184, count#185, sum#186, count#187, sum#188, count#189, sum#190, count#191]

(135) Exchange
Input [15]: [i_item_id#17, sum#178, count#179, sum#180, count#181, sum#182, count#183, sum#184, count#185, sum#186, count#187, sum#188, count#189, sum#190, count#191]
Arguments: hashpartitioning(i_item_id#17, 5), ENSURE_REQUIREMENTS, [plan_id=20]

(136) HashAggregate [codegen id : 50]
Input [15]: [i_item_id#17, sum#178, count#179, sum#180, count#181, sum#182, count#183, sum#184, count#185, sum#186, count#187, sum#188, count#189, sum#190, count#191]
Keys [1]: [i_item_id#17]
Functions [7]: [avg(agg1#28), avg(agg2#29), avg(agg3#30), avg(agg4#31), avg(agg5#32), avg(agg6#33), avg(agg7#34)]
Aggregate Attributes [7]: [avg(agg1#28)#192, avg(agg2#29)#193, avg(agg3#30)#194, avg(agg4#31)#195, avg(agg5#32)#196, avg(agg6#33)#197, avg(agg7#34)#198]
Results [11]: [i_item_id#17, null AS ca_country#199, null AS ca_state#200, null AS county#201, avg(agg1#28)#192 AS agg1#202, avg(agg2#29)#193 AS agg2#203, avg(agg3#30)#194 AS agg3#204, avg(agg4#31)#195 AS agg4#205, avg(agg5#32)#196 AS agg5#206, avg(agg6#33)#197 AS agg6#207, avg(agg7#34)#198 AS agg7#208]

(137) Scan parquet spark_catalog.default.catalog_sales
Output [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#9), dynamicpruningexpression(cs_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(138) ColumnarToRow [codegen id : 57]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]

(139) Filter [codegen id : 57]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Condition : ((isnotnull(cs_bill_cdemo_sk#2) AND isnotnull(cs_bill_customer_sk#1)) AND isnotnull(cs_item_sk#3))

(140) ReusedExchange [Reuses operator id: 8]
Output [2]: [cd_demo_sk#11, cd_dep_count#14]

(141) BroadcastHashJoin [codegen id : 57]
Left keys [1]: [cs_bill_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#11]
Join type: Inner
Join condition: None

(142) Project [codegen id : 57]
Output [9]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#14]
Input [11]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_demo_sk#11, cd_dep_count#14]

(143) ReusedExchange [Reuses operator id: 165]
Output [1]: [d_date_sk#15]

(144) BroadcastHashJoin [codegen id : 57]
Left keys [1]: [cs_sold_date_sk#9]
Right keys [1]: [d_date_sk#15]
Join type: Inner
Join condition: None

(145) Project [codegen id : 57]
Output [8]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14]
Input [10]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#14, d_date_sk#15]

(146) Scan parquet spark_catalog.default.item
Output [1]: [i_item_sk#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int>

(147) ColumnarToRow [codegen id : 53]
Input [1]: [i_item_sk#16]

(148) Filter [codegen id : 53]
Input [1]: [i_item_sk#16]
Condition : isnotnull(i_item_sk#16)

(149) BroadcastExchange
Input [1]: [i_item_sk#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=21]

(150) BroadcastHashJoin [codegen id : 57]
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [i_item_sk#16]
Join type: Inner
Join condition: None

(151) Project [codegen id : 57]
Output [7]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14]
Input [9]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, i_item_sk#16]

(152) ReusedExchange [Reuses operator id: 128]
Output [2]: [c_customer_sk#18, c_birth_year#22]

(153) BroadcastHashJoin [codegen id : 57]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#18]
Join type: Inner
Join condition: None

(154) Project [codegen id : 57]
Output [7]: [cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, c_birth_year#22]
Input [9]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, c_customer_sk#18, c_birth_year#22]

(155) Project [codegen id : 57]
Output [7]: [cast(cs_quantity#4 as decimal(12,2)) AS agg1#28, cast(cs_list_price#5 as decimal(12,2)) AS agg2#29, cast(cs_coupon_amt#7 as decimal(12,2)) AS agg3#30, cast(cs_sales_price#6 as decimal(12,2)) AS agg4#31, cast(cs_net_profit#8 as decimal(12,2)) AS agg5#32, cast(c_birth_year#22 as decimal(12,2)) AS agg6#33, cast(cd_dep_count#14 as decimal(12,2)) AS agg7#34]
Input [7]: [cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#14, c_birth_year#22]

(156) HashAggregate [codegen id : 57]
Input [7]: [agg1#28, agg2#29, agg3#30, agg4#31, agg5#32, agg6#33, agg7#34]
Keys: []
Functions [7]: [partial_avg(agg1#28), partial_avg(agg2#29), partial_avg(agg3#30), partial_avg(agg4#31), partial_avg(agg5#32), partial_avg(agg6#33), partial_avg(agg7#34)]
Aggregate Attributes [14]: [sum#209, count#210, sum#211, count#212, sum#213, count#214, sum#215, count#216, sum#217, count#218, sum#219, count#220, sum#221, count#222]
Results [14]: [sum#223, count#224, sum#225, count#226, sum#227, count#228, sum#229, count#230, sum#231, count#232, sum#233, count#234, sum#235, count#236]

(157) Exchange
Input [14]: [sum#223, count#224, sum#225, count#226, sum#227, count#228, sum#229, count#230, sum#231, count#232, sum#233, count#234, sum#235, count#236]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=22]

(158) HashAggregate [codegen id : 58]
Input [14]: [sum#223, count#224, sum#225, count#226, sum#227, count#228, sum#229, count#230, sum#231, count#232, sum#233, count#234, sum#235, count#236]
Keys: []
Functions [7]: [avg(agg1#28), avg(agg2#29), avg(agg3#30), avg(agg4#31), avg(agg5#32), avg(agg6#33), avg(agg7#34)]
Aggregate Attributes [7]: [avg(agg1#28)#237, avg(agg2#29)#238, avg(agg3#30)#239, avg(agg4#31)#240, avg(agg5#32)#241, avg(agg6#33)#242, avg(agg7#34)#243]
Results [11]: [null AS i_item_id#244, null AS ca_country#245, null AS ca_state#246, null AS county#247, avg(agg1#28)#237 AS agg1#248, avg(agg2#29)#238 AS agg2#249, avg(agg3#30)#239 AS agg3#250, avg(agg4#31)#240 AS agg4#251, avg(agg5#32)#241 AS agg5#252, avg(agg6#33)#242 AS agg6#253, avg(agg7#34)#243 AS agg7#254]

(159) Union

(160) TakeOrderedAndProject
Input [11]: [i_item_id#17, ca_country#26, ca_state#25, ca_county#24, agg1#70, agg2#71, agg3#72, agg4#73, agg5#74, agg6#75, agg7#76]
Arguments: 100, [ca_country#26 ASC NULLS FIRST, ca_state#25 ASC NULLS FIRST, ca_county#24 ASC NULLS FIRST, i_item_id#17 ASC NULLS FIRST], [i_item_id#17, ca_country#26, ca_state#25, ca_county#24, agg1#70, agg2#71, agg3#72, agg4#73, agg5#74, agg6#75, agg7#76]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#9 IN dynamicpruning#10
BroadcastExchange (165)
+- * Project (164)
   +- * Filter (163)
      +- * ColumnarToRow (162)
         +- Scan parquet spark_catalog.default.date_dim (161)


(161) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#15, d_year#255]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(162) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#15, d_year#255]

(163) Filter [codegen id : 1]
Input [2]: [d_date_sk#15, d_year#255]
Condition : ((isnotnull(d_year#255) AND (d_year#255 = 2001)) AND isnotnull(d_date_sk#15))

(164) Project [codegen id : 1]
Output [1]: [d_date_sk#15]
Input [2]: [d_date_sk#15, d_year#255]

(165) BroadcastExchange
Input [1]: [d_date_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=23]

Subquery:2 Hosting operator id = 102 Hosting Expression = cs_sold_date_sk#9 IN dynamicpruning#10

Subquery:3 Hosting operator id = 137 Hosting Expression = cs_sold_date_sk#9 IN dynamicpruning#10


