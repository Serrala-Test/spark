== Physical Plan ==
TakeOrderedAndProject (76)
+- * Filter (75)
   +- Window (74)
      +- * Sort (73)
         +- Exchange (72)
            +- Union (71)
               :- * HashAggregate (30)
               :  +- Exchange (29)
               :     +- * HashAggregate (28)
               :        +- * Project (27)
               :           +- * SortMergeJoin Inner (26)
               :              :- * Sort (19)
               :              :  +- Exchange (18)
               :              :     +- * Project (17)
               :              :        +- * BroadcastHashJoin Inner BuildRight (16)
               :              :           :- * Project (10)
               :              :           :  +- * BroadcastHashJoin Inner BuildRight (9)
               :              :           :     :- * Filter (3)
               :              :           :     :  +- * ColumnarToRow (2)
               :              :           :     :     +- Scan parquet default.store_sales (1)
               :              :           :     +- BroadcastExchange (8)
               :              :           :        +- * Project (7)
               :              :           :           +- * Filter (6)
               :              :           :              +- * ColumnarToRow (5)
               :              :           :                 +- Scan parquet default.date_dim (4)
               :              :           +- BroadcastExchange (15)
               :              :              +- * Project (14)
               :              :                 +- * Filter (13)
               :              :                    +- * ColumnarToRow (12)
               :              :                       +- Scan parquet default.store (11)
               :              +- * Sort (25)
               :                 +- Exchange (24)
               :                    +- * Project (23)
               :                       +- * Filter (22)
               :                          +- * ColumnarToRow (21)
               :                             +- Scan parquet default.item (20)
               :- * HashAggregate (35)
               :  +- Exchange (34)
               :     +- * HashAggregate (33)
               :        +- * HashAggregate (32)
               :           +- ReusedExchange (31)
               :- * HashAggregate (40)
               :  +- Exchange (39)
               :     +- * HashAggregate (38)
               :        +- * HashAggregate (37)
               :           +- ReusedExchange (36)
               :- * HashAggregate (45)
               :  +- Exchange (44)
               :     +- * HashAggregate (43)
               :        +- * HashAggregate (42)
               :           +- ReusedExchange (41)
               :- * HashAggregate (50)
               :  +- Exchange (49)
               :     +- * HashAggregate (48)
               :        +- * HashAggregate (47)
               :           +- ReusedExchange (46)
               :- * HashAggregate (55)
               :  +- Exchange (54)
               :     +- * HashAggregate (53)
               :        +- * HashAggregate (52)
               :           +- ReusedExchange (51)
               :- * HashAggregate (60)
               :  +- Exchange (59)
               :     +- * HashAggregate (58)
               :        +- * HashAggregate (57)
               :           +- ReusedExchange (56)
               :- * HashAggregate (65)
               :  +- Exchange (64)
               :     +- * HashAggregate (63)
               :        +- * HashAggregate (62)
               :           +- ReusedExchange (61)
               +- * HashAggregate (70)
                  +- Exchange (69)
                     +- * HashAggregate (68)
                        +- * HashAggregate (67)
                           +- ReusedExchange (66)


(1) Scan parquet default.store_sales
Output [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_quantity#4, ss_sales_price#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_quantity#4, ss_sales_price#5]

(3) Filter [codegen id : 3]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_quantity#4, ss_sales_price#5]
Condition : ((isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_item_sk#2))

(4) Scan parquet default.date_dim
Output [5]: [d_date_sk#6, d_month_seq#7, d_year#8, d_moy#9, d_qoy#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int,d_year:int,d_moy:int,d_qoy:int>

(5) ColumnarToRow [codegen id : 1]
Input [5]: [d_date_sk#6, d_month_seq#7, d_year#8, d_moy#9, d_qoy#10]

(6) Filter [codegen id : 1]
Input [5]: [d_date_sk#6, d_month_seq#7, d_year#8, d_moy#9, d_qoy#10]
Condition : (((isnotnull(d_month_seq#7) AND (d_month_seq#7 >= 1212)) AND (d_month_seq#7 <= 1223)) AND isnotnull(d_date_sk#6))

(7) Project [codegen id : 1]
Output [4]: [d_date_sk#6, d_year#8, d_moy#9, d_qoy#10]
Input [5]: [d_date_sk#6, d_month_seq#7, d_year#8, d_moy#9, d_qoy#10]

(8) BroadcastExchange
Input [4]: [d_date_sk#6, d_year#8, d_moy#9, d_qoy#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#11]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#6]
Join condition: None

(10) Project [codegen id : 3]
Output [7]: [ss_item_sk#2, ss_store_sk#3, ss_quantity#4, ss_sales_price#5, d_year#8, d_moy#9, d_qoy#10]
Input [9]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_quantity#4, ss_sales_price#5, d_date_sk#6, d_year#8, d_moy#9, d_qoy#10]

(11) Scan parquet default.store
Output [2]: [s_store_sk#12, s_store_id#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [s_store_sk#12, s_store_id#13]

(13) Filter [codegen id : 2]
Input [2]: [s_store_sk#12, s_store_id#13]
Condition : isnotnull(s_store_sk#12)

(14) Project [codegen id : 2]
Output [2]: [s_store_sk#12, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_store_id#13, 16, false, true) AS s_store_id#14]
Input [2]: [s_store_sk#12, s_store_id#13]

(15) BroadcastExchange
Input [2]: [s_store_sk#12, s_store_id#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15]

(16) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#12]
Join condition: None

(17) Project [codegen id : 3]
Output [7]: [ss_item_sk#2, ss_quantity#4, ss_sales_price#5, d_year#8, d_moy#9, d_qoy#10, s_store_id#14]
Input [9]: [ss_item_sk#2, ss_store_sk#3, ss_quantity#4, ss_sales_price#5, d_year#8, d_moy#9, d_qoy#10, s_store_sk#12, s_store_id#14]

(18) Exchange
Input [7]: [ss_item_sk#2, ss_quantity#4, ss_sales_price#5, d_year#8, d_moy#9, d_qoy#10, s_store_id#14]
Arguments: hashpartitioning(ss_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#16]

(19) Sort [codegen id : 4]
Input [7]: [ss_item_sk#2, ss_quantity#4, ss_sales_price#5, d_year#8, d_moy#9, d_qoy#10, s_store_id#14]
Arguments: [ss_item_sk#2 ASC NULLS FIRST], false, 0

(20) Scan parquet default.item
Output [5]: [i_item_sk#17, i_brand#18, i_class#19, i_category#20, i_product_name#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_product_name:string>

(21) ColumnarToRow [codegen id : 5]
Input [5]: [i_item_sk#17, i_brand#18, i_class#19, i_category#20, i_product_name#21]

(22) Filter [codegen id : 5]
Input [5]: [i_item_sk#17, i_brand#18, i_class#19, i_category#20, i_product_name#21]
Condition : isnotnull(i_item_sk#17)

(23) Project [codegen id : 5]
Output [5]: [i_item_sk#17, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_brand#18, 50, false, true) AS i_brand#22, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_class#19, 50, false, true) AS i_class#23, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#20, 50, false, true) AS i_category#24, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_product_name#21, 50, false, true) AS i_product_name#25]
Input [5]: [i_item_sk#17, i_brand#18, i_class#19, i_category#20, i_product_name#21]

(24) Exchange
Input [5]: [i_item_sk#17, i_brand#22, i_class#23, i_category#24, i_product_name#25]
Arguments: hashpartitioning(i_item_sk#17, 5), ENSURE_REQUIREMENTS, [id=#26]

(25) Sort [codegen id : 6]
Input [5]: [i_item_sk#17, i_brand#22, i_class#23, i_category#24, i_product_name#25]
Arguments: [i_item_sk#17 ASC NULLS FIRST], false, 0

(26) SortMergeJoin [codegen id : 7]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#17]
Join condition: None

(27) Project [codegen id : 7]
Output [10]: [ss_quantity#4, ss_sales_price#5, d_year#8, d_moy#9, d_qoy#10, s_store_id#14, i_brand#22, i_class#23, i_category#24, i_product_name#25]
Input [12]: [ss_item_sk#2, ss_quantity#4, ss_sales_price#5, d_year#8, d_moy#9, d_qoy#10, s_store_id#14, i_item_sk#17, i_brand#22, i_class#23, i_category#24, i_product_name#25]

(28) HashAggregate [codegen id : 7]
Input [10]: [ss_quantity#4, ss_sales_price#5, d_year#8, d_moy#9, d_qoy#10, s_store_id#14, i_brand#22, i_class#23, i_category#24, i_product_name#25]
Keys [8]: [i_category#24, i_class#23, i_brand#22, i_product_name#25, d_year#8, d_qoy#10, d_moy#9, s_store_id#14]
Functions [1]: [partial_sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [2]: [sum#27, isEmpty#28]
Results [10]: [i_category#24, i_class#23, i_brand#22, i_product_name#25, d_year#8, d_qoy#10, d_moy#9, s_store_id#14, sum#29, isEmpty#30]

(29) Exchange
Input [10]: [i_category#24, i_class#23, i_brand#22, i_product_name#25, d_year#8, d_qoy#10, d_moy#9, s_store_id#14, sum#29, isEmpty#30]
Arguments: hashpartitioning(i_category#24, i_class#23, i_brand#22, i_product_name#25, d_year#8, d_qoy#10, d_moy#9, s_store_id#14, 5), ENSURE_REQUIREMENTS, [id=#31]

(30) HashAggregate [codegen id : 8]
Input [10]: [i_category#24, i_class#23, i_brand#22, i_product_name#25, d_year#8, d_qoy#10, d_moy#9, s_store_id#14, sum#29, isEmpty#30]
Keys [8]: [i_category#24, i_class#23, i_brand#22, i_product_name#25, d_year#8, d_qoy#10, d_moy#9, s_store_id#14]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#32]
Results [9]: [i_category#24, i_class#23, i_brand#22, i_product_name#25, d_year#8, d_qoy#10, d_moy#9, s_store_id#14, cast(sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#32 as decimal(38,2)) AS sumsales#33]

(31) ReusedExchange [Reuses operator id: 29]
Output [10]: [i_category#34, i_class#35, i_brand#36, i_product_name#37, d_year#8, d_qoy#10, d_moy#9, s_store_id#38, sum#39, isEmpty#40]

(32) HashAggregate [codegen id : 16]
Input [10]: [i_category#34, i_class#35, i_brand#36, i_product_name#37, d_year#8, d_qoy#10, d_moy#9, s_store_id#38, sum#39, isEmpty#40]
Keys [8]: [i_category#34, i_class#35, i_brand#36, i_product_name#37, d_year#8, d_qoy#10, d_moy#9, s_store_id#38]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#41]
Results [8]: [i_category#34, i_class#35, i_brand#36, i_product_name#37, d_year#8, d_qoy#10, d_moy#9, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#41 AS sumsales#42]

(33) HashAggregate [codegen id : 16]
Input [8]: [i_category#34, i_class#35, i_brand#36, i_product_name#37, d_year#8, d_qoy#10, d_moy#9, sumsales#42]
Keys [7]: [i_category#34, i_class#35, i_brand#36, i_product_name#37, d_year#8, d_qoy#10, d_moy#9]
Functions [1]: [partial_sum(sumsales#42)]
Aggregate Attributes [2]: [sum#43, isEmpty#44]
Results [9]: [i_category#34, i_class#35, i_brand#36, i_product_name#37, d_year#8, d_qoy#10, d_moy#9, sum#45, isEmpty#46]

(34) Exchange
Input [9]: [i_category#34, i_class#35, i_brand#36, i_product_name#37, d_year#8, d_qoy#10, d_moy#9, sum#45, isEmpty#46]
Arguments: hashpartitioning(i_category#34, i_class#35, i_brand#36, i_product_name#37, d_year#8, d_qoy#10, d_moy#9, 5), ENSURE_REQUIREMENTS, [id=#47]

(35) HashAggregate [codegen id : 17]
Input [9]: [i_category#34, i_class#35, i_brand#36, i_product_name#37, d_year#8, d_qoy#10, d_moy#9, sum#45, isEmpty#46]
Keys [7]: [i_category#34, i_class#35, i_brand#36, i_product_name#37, d_year#8, d_qoy#10, d_moy#9]
Functions [1]: [sum(sumsales#42)]
Aggregate Attributes [1]: [sum(sumsales#42)#48]
Results [9]: [i_category#34 AS i_category#49, i_class#35 AS i_class#50, i_brand#36 AS i_brand#51, i_product_name#37 AS i_product_name#52, d_year#8, d_qoy#10, d_moy#9, null AS s_store_id#53, sum(sumsales#42)#48 AS sumsales#54]

(36) ReusedExchange [Reuses operator id: 29]
Output [10]: [i_category#55, i_class#56, i_brand#57, i_product_name#58, d_year#8, d_qoy#10, d_moy#9, s_store_id#59, sum#60, isEmpty#61]

(37) HashAggregate [codegen id : 25]
Input [10]: [i_category#55, i_class#56, i_brand#57, i_product_name#58, d_year#8, d_qoy#10, d_moy#9, s_store_id#59, sum#60, isEmpty#61]
Keys [8]: [i_category#55, i_class#56, i_brand#57, i_product_name#58, d_year#8, d_qoy#10, d_moy#9, s_store_id#59]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#62]
Results [7]: [i_category#55, i_class#56, i_brand#57, i_product_name#58, d_year#8, d_qoy#10, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#62 AS sumsales#42]

(38) HashAggregate [codegen id : 25]
Input [7]: [i_category#55, i_class#56, i_brand#57, i_product_name#58, d_year#8, d_qoy#10, sumsales#42]
Keys [6]: [i_category#55, i_class#56, i_brand#57, i_product_name#58, d_year#8, d_qoy#10]
Functions [1]: [partial_sum(sumsales#42)]
Aggregate Attributes [2]: [sum#63, isEmpty#64]
Results [8]: [i_category#55, i_class#56, i_brand#57, i_product_name#58, d_year#8, d_qoy#10, sum#65, isEmpty#66]

(39) Exchange
Input [8]: [i_category#55, i_class#56, i_brand#57, i_product_name#58, d_year#8, d_qoy#10, sum#65, isEmpty#66]
Arguments: hashpartitioning(i_category#55, i_class#56, i_brand#57, i_product_name#58, d_year#8, d_qoy#10, 5), ENSURE_REQUIREMENTS, [id=#67]

(40) HashAggregate [codegen id : 26]
Input [8]: [i_category#55, i_class#56, i_brand#57, i_product_name#58, d_year#8, d_qoy#10, sum#65, isEmpty#66]
Keys [6]: [i_category#55, i_class#56, i_brand#57, i_product_name#58, d_year#8, d_qoy#10]
Functions [1]: [sum(sumsales#42)]
Aggregate Attributes [1]: [sum(sumsales#42)#68]
Results [9]: [i_category#55 AS i_category#69, i_class#56 AS i_class#70, i_brand#57 AS i_brand#71, i_product_name#58 AS i_product_name#72, d_year#8, d_qoy#10, null AS d_moy#73, null AS s_store_id#74, sum(sumsales#42)#68 AS sumsales#75]

(41) ReusedExchange [Reuses operator id: 29]
Output [10]: [i_category#76, i_class#77, i_brand#78, i_product_name#79, d_year#8, d_qoy#10, d_moy#9, s_store_id#80, sum#81, isEmpty#82]

(42) HashAggregate [codegen id : 34]
Input [10]: [i_category#76, i_class#77, i_brand#78, i_product_name#79, d_year#8, d_qoy#10, d_moy#9, s_store_id#80, sum#81, isEmpty#82]
Keys [8]: [i_category#76, i_class#77, i_brand#78, i_product_name#79, d_year#8, d_qoy#10, d_moy#9, s_store_id#80]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#83]
Results [6]: [i_category#76, i_class#77, i_brand#78, i_product_name#79, d_year#8, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#83 AS sumsales#42]

(43) HashAggregate [codegen id : 34]
Input [6]: [i_category#76, i_class#77, i_brand#78, i_product_name#79, d_year#8, sumsales#42]
Keys [5]: [i_category#76, i_class#77, i_brand#78, i_product_name#79, d_year#8]
Functions [1]: [partial_sum(sumsales#42)]
Aggregate Attributes [2]: [sum#84, isEmpty#85]
Results [7]: [i_category#76, i_class#77, i_brand#78, i_product_name#79, d_year#8, sum#86, isEmpty#87]

(44) Exchange
Input [7]: [i_category#76, i_class#77, i_brand#78, i_product_name#79, d_year#8, sum#86, isEmpty#87]
Arguments: hashpartitioning(i_category#76, i_class#77, i_brand#78, i_product_name#79, d_year#8, 5), ENSURE_REQUIREMENTS, [id=#88]

(45) HashAggregate [codegen id : 35]
Input [7]: [i_category#76, i_class#77, i_brand#78, i_product_name#79, d_year#8, sum#86, isEmpty#87]
Keys [5]: [i_category#76, i_class#77, i_brand#78, i_product_name#79, d_year#8]
Functions [1]: [sum(sumsales#42)]
Aggregate Attributes [1]: [sum(sumsales#42)#89]
Results [9]: [i_category#76 AS i_category#90, i_class#77 AS i_class#91, i_brand#78 AS i_brand#92, i_product_name#79 AS i_product_name#93, d_year#8, null AS d_qoy#94, null AS d_moy#95, null AS s_store_id#96, sum(sumsales#42)#89 AS sumsales#97]

(46) ReusedExchange [Reuses operator id: 29]
Output [10]: [i_category#98, i_class#99, i_brand#100, i_product_name#101, d_year#8, d_qoy#10, d_moy#9, s_store_id#102, sum#103, isEmpty#104]

(47) HashAggregate [codegen id : 43]
Input [10]: [i_category#98, i_class#99, i_brand#100, i_product_name#101, d_year#8, d_qoy#10, d_moy#9, s_store_id#102, sum#103, isEmpty#104]
Keys [8]: [i_category#98, i_class#99, i_brand#100, i_product_name#101, d_year#8, d_qoy#10, d_moy#9, s_store_id#102]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#105]
Results [5]: [i_category#98, i_class#99, i_brand#100, i_product_name#101, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#105 AS sumsales#42]

(48) HashAggregate [codegen id : 43]
Input [5]: [i_category#98, i_class#99, i_brand#100, i_product_name#101, sumsales#42]
Keys [4]: [i_category#98, i_class#99, i_brand#100, i_product_name#101]
Functions [1]: [partial_sum(sumsales#42)]
Aggregate Attributes [2]: [sum#106, isEmpty#107]
Results [6]: [i_category#98, i_class#99, i_brand#100, i_product_name#101, sum#108, isEmpty#109]

(49) Exchange
Input [6]: [i_category#98, i_class#99, i_brand#100, i_product_name#101, sum#108, isEmpty#109]
Arguments: hashpartitioning(i_category#98, i_class#99, i_brand#100, i_product_name#101, 5), ENSURE_REQUIREMENTS, [id=#110]

(50) HashAggregate [codegen id : 44]
Input [6]: [i_category#98, i_class#99, i_brand#100, i_product_name#101, sum#108, isEmpty#109]
Keys [4]: [i_category#98, i_class#99, i_brand#100, i_product_name#101]
Functions [1]: [sum(sumsales#42)]
Aggregate Attributes [1]: [sum(sumsales#42)#111]
Results [9]: [i_category#98 AS i_category#112, i_class#99 AS i_class#113, i_brand#100 AS i_brand#114, i_product_name#101 AS i_product_name#115, null AS d_year#116, null AS d_qoy#117, null AS d_moy#118, null AS s_store_id#119, sum(sumsales#42)#111 AS sumsales#120]

(51) ReusedExchange [Reuses operator id: 29]
Output [10]: [i_category#121, i_class#122, i_brand#123, i_product_name#124, d_year#8, d_qoy#10, d_moy#9, s_store_id#125, sum#126, isEmpty#127]

(52) HashAggregate [codegen id : 52]
Input [10]: [i_category#121, i_class#122, i_brand#123, i_product_name#124, d_year#8, d_qoy#10, d_moy#9, s_store_id#125, sum#126, isEmpty#127]
Keys [8]: [i_category#121, i_class#122, i_brand#123, i_product_name#124, d_year#8, d_qoy#10, d_moy#9, s_store_id#125]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#128]
Results [4]: [i_category#121, i_class#122, i_brand#123, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#128 AS sumsales#42]

(53) HashAggregate [codegen id : 52]
Input [4]: [i_category#121, i_class#122, i_brand#123, sumsales#42]
Keys [3]: [i_category#121, i_class#122, i_brand#123]
Functions [1]: [partial_sum(sumsales#42)]
Aggregate Attributes [2]: [sum#129, isEmpty#130]
Results [5]: [i_category#121, i_class#122, i_brand#123, sum#131, isEmpty#132]

(54) Exchange
Input [5]: [i_category#121, i_class#122, i_brand#123, sum#131, isEmpty#132]
Arguments: hashpartitioning(i_category#121, i_class#122, i_brand#123, 5), ENSURE_REQUIREMENTS, [id=#133]

(55) HashAggregate [codegen id : 53]
Input [5]: [i_category#121, i_class#122, i_brand#123, sum#131, isEmpty#132]
Keys [3]: [i_category#121, i_class#122, i_brand#123]
Functions [1]: [sum(sumsales#42)]
Aggregate Attributes [1]: [sum(sumsales#42)#134]
Results [9]: [i_category#121 AS i_category#135, i_class#122 AS i_class#136, i_brand#123 AS i_brand#137, null AS i_product_name#138, null AS d_year#139, null AS d_qoy#140, null AS d_moy#141, null AS s_store_id#142, sum(sumsales#42)#134 AS sumsales#143]

(56) ReusedExchange [Reuses operator id: 29]
Output [10]: [i_category#144, i_class#145, i_brand#146, i_product_name#147, d_year#8, d_qoy#10, d_moy#9, s_store_id#148, sum#149, isEmpty#150]

(57) HashAggregate [codegen id : 61]
Input [10]: [i_category#144, i_class#145, i_brand#146, i_product_name#147, d_year#8, d_qoy#10, d_moy#9, s_store_id#148, sum#149, isEmpty#150]
Keys [8]: [i_category#144, i_class#145, i_brand#146, i_product_name#147, d_year#8, d_qoy#10, d_moy#9, s_store_id#148]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#151]
Results [3]: [i_category#144, i_class#145, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#151 AS sumsales#42]

(58) HashAggregate [codegen id : 61]
Input [3]: [i_category#144, i_class#145, sumsales#42]
Keys [2]: [i_category#144, i_class#145]
Functions [1]: [partial_sum(sumsales#42)]
Aggregate Attributes [2]: [sum#152, isEmpty#153]
Results [4]: [i_category#144, i_class#145, sum#154, isEmpty#155]

(59) Exchange
Input [4]: [i_category#144, i_class#145, sum#154, isEmpty#155]
Arguments: hashpartitioning(i_category#144, i_class#145, 5), ENSURE_REQUIREMENTS, [id=#156]

(60) HashAggregate [codegen id : 62]
Input [4]: [i_category#144, i_class#145, sum#154, isEmpty#155]
Keys [2]: [i_category#144, i_class#145]
Functions [1]: [sum(sumsales#42)]
Aggregate Attributes [1]: [sum(sumsales#42)#157]
Results [9]: [i_category#144 AS i_category#158, i_class#145 AS i_class#159, null AS i_brand#160, null AS i_product_name#161, null AS d_year#162, null AS d_qoy#163, null AS d_moy#164, null AS s_store_id#165, sum(sumsales#42)#157 AS sumsales#166]

(61) ReusedExchange [Reuses operator id: 29]
Output [10]: [i_category#167, i_class#168, i_brand#169, i_product_name#170, d_year#8, d_qoy#10, d_moy#9, s_store_id#171, sum#172, isEmpty#173]

(62) HashAggregate [codegen id : 70]
Input [10]: [i_category#167, i_class#168, i_brand#169, i_product_name#170, d_year#8, d_qoy#10, d_moy#9, s_store_id#171, sum#172, isEmpty#173]
Keys [8]: [i_category#167, i_class#168, i_brand#169, i_product_name#170, d_year#8, d_qoy#10, d_moy#9, s_store_id#171]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#174]
Results [2]: [i_category#167, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#174 AS sumsales#42]

(63) HashAggregate [codegen id : 70]
Input [2]: [i_category#167, sumsales#42]
Keys [1]: [i_category#167]
Functions [1]: [partial_sum(sumsales#42)]
Aggregate Attributes [2]: [sum#175, isEmpty#176]
Results [3]: [i_category#167, sum#177, isEmpty#178]

(64) Exchange
Input [3]: [i_category#167, sum#177, isEmpty#178]
Arguments: hashpartitioning(i_category#167, 5), ENSURE_REQUIREMENTS, [id=#179]

(65) HashAggregate [codegen id : 71]
Input [3]: [i_category#167, sum#177, isEmpty#178]
Keys [1]: [i_category#167]
Functions [1]: [sum(sumsales#42)]
Aggregate Attributes [1]: [sum(sumsales#42)#180]
Results [9]: [i_category#167 AS i_category#181, null AS i_class#182, null AS i_brand#183, null AS i_product_name#184, null AS d_year#185, null AS d_qoy#186, null AS d_moy#187, null AS s_store_id#188, sum(sumsales#42)#180 AS sumsales#189]

(66) ReusedExchange [Reuses operator id: 29]
Output [10]: [i_category#190, i_class#191, i_brand#192, i_product_name#193, d_year#8, d_qoy#10, d_moy#9, s_store_id#194, sum#195, isEmpty#196]

(67) HashAggregate [codegen id : 79]
Input [10]: [i_category#190, i_class#191, i_brand#192, i_product_name#193, d_year#8, d_qoy#10, d_moy#9, s_store_id#194, sum#195, isEmpty#196]
Keys [8]: [i_category#190, i_class#191, i_brand#192, i_product_name#193, d_year#8, d_qoy#10, d_moy#9, s_store_id#194]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#197]
Results [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#5 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#197 AS sumsales#42]

(68) HashAggregate [codegen id : 79]
Input [1]: [sumsales#42]
Keys: []
Functions [1]: [partial_sum(sumsales#42)]
Aggregate Attributes [2]: [sum#198, isEmpty#199]
Results [2]: [sum#200, isEmpty#201]

(69) Exchange
Input [2]: [sum#200, isEmpty#201]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#202]

(70) HashAggregate [codegen id : 80]
Input [2]: [sum#200, isEmpty#201]
Keys: []
Functions [1]: [sum(sumsales#42)]
Aggregate Attributes [1]: [sum(sumsales#42)#203]
Results [9]: [null AS i_category#204, null AS i_class#205, null AS i_brand#206, null AS i_product_name#207, null AS d_year#208, null AS d_qoy#209, null AS d_moy#210, null AS s_store_id#211, sum(sumsales#42)#203 AS sumsales#212]

(71) Union

(72) Exchange
Input [9]: [i_category#24, i_class#23, i_brand#22, i_product_name#25, d_year#8, d_qoy#10, d_moy#9, s_store_id#14, sumsales#33]
Arguments: hashpartitioning(i_category#24, 5), ENSURE_REQUIREMENTS, [id=#213]

(73) Sort [codegen id : 81]
Input [9]: [i_category#24, i_class#23, i_brand#22, i_product_name#25, d_year#8, d_qoy#10, d_moy#9, s_store_id#14, sumsales#33]
Arguments: [i_category#24 ASC NULLS FIRST, sumsales#33 DESC NULLS LAST], false, 0

(74) Window
Input [9]: [i_category#24, i_class#23, i_brand#22, i_product_name#25, d_year#8, d_qoy#10, d_moy#9, s_store_id#14, sumsales#33]
Arguments: [rank(sumsales#33) windowspecdefinition(i_category#24, sumsales#33 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#214], [i_category#24], [sumsales#33 DESC NULLS LAST]

(75) Filter [codegen id : 82]
Input [10]: [i_category#24, i_class#23, i_brand#22, i_product_name#25, d_year#8, d_qoy#10, d_moy#9, s_store_id#14, sumsales#33, rk#214]
Condition : (isnotnull(rk#214) AND (rk#214 <= 100))

(76) TakeOrderedAndProject
Input [10]: [i_category#24, i_class#23, i_brand#22, i_product_name#25, d_year#8, d_qoy#10, d_moy#9, s_store_id#14, sumsales#33, rk#214]
Arguments: 100, [i_category#24 ASC NULLS FIRST, i_class#23 ASC NULLS FIRST, i_brand#22 ASC NULLS FIRST, i_product_name#25 ASC NULLS FIRST, d_year#8 ASC NULLS FIRST, d_qoy#10 ASC NULLS FIRST, d_moy#9 ASC NULLS FIRST, s_store_id#14 ASC NULLS FIRST, sumsales#33 ASC NULLS FIRST, rk#214 ASC NULLS FIRST], [i_category#24, i_class#23, i_brand#22, i_product_name#25, d_year#8, d_qoy#10, d_moy#9, s_store_id#14, sumsales#33, rk#214]

