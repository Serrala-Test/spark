== Physical Plan ==
TakeOrderedAndProject (74)
+- * Filter (73)
   +- Window (72)
      +- * Sort (71)
         +- Exchange (70)
            +- Union (69)
               :- * HashAggregate (28)
               :  +- Exchange (27)
               :     +- * HashAggregate (26)
               :        +- * Project (25)
               :           +- * SortMergeJoin Inner (24)
               :              :- * Sort (18)
               :              :  +- Exchange (17)
               :              :     +- * Project (16)
               :              :        +- * BroadcastHashJoin Inner BuildRight (15)
               :              :           :- * Project (10)
               :              :           :  +- * BroadcastHashJoin Inner BuildRight (9)
               :              :           :     :- * Filter (3)
               :              :           :     :  +- * ColumnarToRow (2)
               :              :           :     :     +- Scan parquet default.store_sales (1)
               :              :           :     +- BroadcastExchange (8)
               :              :           :        +- * Project (7)
               :              :           :           +- * Filter (6)
               :              :           :              +- * ColumnarToRow (5)
               :              :           :                 +- Scan parquet default.date_dim (4)
               :              :           +- BroadcastExchange (14)
               :              :              +- * Filter (13)
               :              :                 +- * ColumnarToRow (12)
               :              :                    +- Scan parquet default.store (11)
               :              +- * Sort (23)
               :                 +- Exchange (22)
               :                    +- * Filter (21)
               :                       +- * ColumnarToRow (20)
               :                          +- Scan parquet default.item (19)
               :- * HashAggregate (33)
               :  +- Exchange (32)
               :     +- * HashAggregate (31)
               :        +- * HashAggregate (30)
               :           +- ReusedExchange (29)
               :- * HashAggregate (38)
               :  +- Exchange (37)
               :     +- * HashAggregate (36)
               :        +- * HashAggregate (35)
               :           +- ReusedExchange (34)
               :- * HashAggregate (43)
               :  +- Exchange (42)
               :     +- * HashAggregate (41)
               :        +- * HashAggregate (40)
               :           +- ReusedExchange (39)
               :- * HashAggregate (48)
               :  +- Exchange (47)
               :     +- * HashAggregate (46)
               :        +- * HashAggregate (45)
               :           +- ReusedExchange (44)
               :- * HashAggregate (53)
               :  +- Exchange (52)
               :     +- * HashAggregate (51)
               :        +- * HashAggregate (50)
               :           +- ReusedExchange (49)
               :- * HashAggregate (58)
               :  +- Exchange (57)
               :     +- * HashAggregate (56)
               :        +- * HashAggregate (55)
               :           +- ReusedExchange (54)
               :- * HashAggregate (63)
               :  +- Exchange (62)
               :     +- * HashAggregate (61)
               :        +- * HashAggregate (60)
               :           +- ReusedExchange (59)
               +- * HashAggregate (68)
                  +- Exchange (67)
                     +- * HashAggregate (66)
                        +- * HashAggregate (65)
                           +- ReusedExchange (64)


(1) Scan parquet default.store_sales
Output [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#5), dynamicpruningexpression(ss_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]

(3) Filter [codegen id : 3]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]
Condition : (isnotnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1))

(4) Scan parquet default.date_dim
Output [5]: [d_date_sk#7, d_month_seq#8, d_year#9, d_moy#10, d_qoy#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int,d_year:int,d_moy:int,d_qoy:int>

(5) ColumnarToRow [codegen id : 1]
Input [5]: [d_date_sk#7, d_month_seq#8, d_year#9, d_moy#10, d_qoy#11]

(6) Filter [codegen id : 1]
Input [5]: [d_date_sk#7, d_month_seq#8, d_year#9, d_moy#10, d_qoy#11]
Condition : (((isnotnull(d_month_seq#8) AND (d_month_seq#8 >= 1212)) AND (d_month_seq#8 <= 1223)) AND isnotnull(d_date_sk#7))

(7) Project [codegen id : 1]
Output [4]: [d_date_sk#7, d_year#9, d_moy#10, d_qoy#11]
Input [5]: [d_date_sk#7, d_month_seq#8, d_year#9, d_moy#10, d_qoy#11]

(8) BroadcastExchange
Input [4]: [d_date_sk#7, d_year#9, d_moy#10, d_qoy#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#5]
Right keys [1]: [d_date_sk#7]
Join condition: None

(10) Project [codegen id : 3]
Output [7]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, d_year#9, d_moy#10, d_qoy#11]
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5, d_date_sk#7, d_year#9, d_moy#10, d_qoy#11]

(11) Scan parquet default.store
Output [2]: [s_store_sk#13, s_store_id#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [s_store_sk#13, s_store_id#14]

(13) Filter [codegen id : 2]
Input [2]: [s_store_sk#13, s_store_id#14]
Condition : isnotnull(s_store_sk#13)

(14) BroadcastExchange
Input [2]: [s_store_sk#13, s_store_id#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#15]

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#13]
Join condition: None

(16) Project [codegen id : 3]
Output [7]: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#9, d_moy#10, d_qoy#11, s_store_id#14]
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, d_year#9, d_moy#10, d_qoy#11, s_store_sk#13, s_store_id#14]

(17) Exchange
Input [7]: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#9, d_moy#10, d_qoy#11, s_store_id#14]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#16]

(18) Sort [codegen id : 4]
Input [7]: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#9, d_moy#10, d_qoy#11, s_store_id#14]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(19) Scan parquet default.item
Output [5]: [i_item_sk#17, i_brand#18, i_class#19, i_category#20, i_product_name#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_product_name:string>

(20) ColumnarToRow [codegen id : 5]
Input [5]: [i_item_sk#17, i_brand#18, i_class#19, i_category#20, i_product_name#21]

(21) Filter [codegen id : 5]
Input [5]: [i_item_sk#17, i_brand#18, i_class#19, i_category#20, i_product_name#21]
Condition : isnotnull(i_item_sk#17)

(22) Exchange
Input [5]: [i_item_sk#17, i_brand#18, i_class#19, i_category#20, i_product_name#21]
Arguments: hashpartitioning(i_item_sk#17, 5), ENSURE_REQUIREMENTS, [id=#22]

(23) Sort [codegen id : 6]
Input [5]: [i_item_sk#17, i_brand#18, i_class#19, i_category#20, i_product_name#21]
Arguments: [i_item_sk#17 ASC NULLS FIRST], false, 0

(24) SortMergeJoin [codegen id : 7]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#17]
Join condition: None

(25) Project [codegen id : 7]
Output [10]: [ss_quantity#3, ss_sales_price#4, d_year#9, d_moy#10, d_qoy#11, s_store_id#14, i_brand#18, i_class#19, i_category#20, i_product_name#21]
Input [12]: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#9, d_moy#10, d_qoy#11, s_store_id#14, i_item_sk#17, i_brand#18, i_class#19, i_category#20, i_product_name#21]

(26) HashAggregate [codegen id : 7]
Input [10]: [ss_quantity#3, ss_sales_price#4, d_year#9, d_moy#10, d_qoy#11, s_store_id#14, i_brand#18, i_class#19, i_category#20, i_product_name#21]
Keys [8]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14]
Functions [1]: [partial_sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [2]: [sum#23, isEmpty#24]
Results [10]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#25, isEmpty#26]

(27) Exchange
Input [10]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#25, isEmpty#26]
Arguments: hashpartitioning(i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, 5), ENSURE_REQUIREMENTS, [id=#27]

(28) HashAggregate [codegen id : 8]
Input [10]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#25, isEmpty#26]
Keys [8]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#28]
Results [9]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, cast(sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#28 as decimal(38,2)) AS sumsales#29]

(29) ReusedExchange [Reuses operator id: unknown]
Output [10]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#30, isEmpty#31]

(30) HashAggregate [codegen id : 16]
Input [10]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#30, isEmpty#31]
Keys [8]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#32]
Results [8]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#32 AS sumsales#33]

(31) HashAggregate [codegen id : 16]
Input [8]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, sumsales#33]
Keys [7]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10]
Functions [1]: [partial_sum(sumsales#33)]
Aggregate Attributes [2]: [sum#34, isEmpty#35]
Results [9]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, sum#36, isEmpty#37]

(32) Exchange
Input [9]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, sum#36, isEmpty#37]
Arguments: hashpartitioning(i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, 5), ENSURE_REQUIREMENTS, [id=#38]

(33) HashAggregate [codegen id : 17]
Input [9]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, sum#36, isEmpty#37]
Keys [7]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10]
Functions [1]: [sum(sumsales#33)]
Aggregate Attributes [1]: [sum(sumsales#33)#39]
Results [9]: [i_category#20 AS i_category#40, i_class#19 AS i_class#41, i_brand#18 AS i_brand#42, i_product_name#21 AS i_product_name#43, d_year#9, d_qoy#11, d_moy#10, null AS s_store_id#44, sum(sumsales#33)#39 AS sumsales#45]

(34) ReusedExchange [Reuses operator id: unknown]
Output [10]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#46, isEmpty#47]

(35) HashAggregate [codegen id : 25]
Input [10]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#46, isEmpty#47]
Keys [8]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#48]
Results [7]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#48 AS sumsales#33]

(36) HashAggregate [codegen id : 25]
Input [7]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, sumsales#33]
Keys [6]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11]
Functions [1]: [partial_sum(sumsales#33)]
Aggregate Attributes [2]: [sum#49, isEmpty#50]
Results [8]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, sum#51, isEmpty#52]

(37) Exchange
Input [8]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, sum#51, isEmpty#52]
Arguments: hashpartitioning(i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, 5), ENSURE_REQUIREMENTS, [id=#53]

(38) HashAggregate [codegen id : 26]
Input [8]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, sum#51, isEmpty#52]
Keys [6]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11]
Functions [1]: [sum(sumsales#33)]
Aggregate Attributes [1]: [sum(sumsales#33)#54]
Results [9]: [i_category#20 AS i_category#55, i_class#19 AS i_class#56, i_brand#18 AS i_brand#57, i_product_name#21 AS i_product_name#58, d_year#9, d_qoy#11, null AS d_moy#59, null AS s_store_id#60, sum(sumsales#33)#54 AS sumsales#61]

(39) ReusedExchange [Reuses operator id: unknown]
Output [10]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#62, isEmpty#63]

(40) HashAggregate [codegen id : 34]
Input [10]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#62, isEmpty#63]
Keys [8]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#64]
Results [6]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#64 AS sumsales#33]

(41) HashAggregate [codegen id : 34]
Input [6]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, sumsales#33]
Keys [5]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9]
Functions [1]: [partial_sum(sumsales#33)]
Aggregate Attributes [2]: [sum#65, isEmpty#66]
Results [7]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, sum#67, isEmpty#68]

(42) Exchange
Input [7]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, sum#67, isEmpty#68]
Arguments: hashpartitioning(i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, 5), ENSURE_REQUIREMENTS, [id=#69]

(43) HashAggregate [codegen id : 35]
Input [7]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, sum#67, isEmpty#68]
Keys [5]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9]
Functions [1]: [sum(sumsales#33)]
Aggregate Attributes [1]: [sum(sumsales#33)#70]
Results [9]: [i_category#20 AS i_category#71, i_class#19 AS i_class#72, i_brand#18 AS i_brand#73, i_product_name#21 AS i_product_name#74, d_year#9, null AS d_qoy#75, null AS d_moy#76, null AS s_store_id#77, sum(sumsales#33)#70 AS sumsales#78]

(44) ReusedExchange [Reuses operator id: unknown]
Output [10]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#79, isEmpty#80]

(45) HashAggregate [codegen id : 43]
Input [10]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#79, isEmpty#80]
Keys [8]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#81]
Results [5]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#81 AS sumsales#33]

(46) HashAggregate [codegen id : 43]
Input [5]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, sumsales#33]
Keys [4]: [i_category#20, i_class#19, i_brand#18, i_product_name#21]
Functions [1]: [partial_sum(sumsales#33)]
Aggregate Attributes [2]: [sum#82, isEmpty#83]
Results [6]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, sum#84, isEmpty#85]

(47) Exchange
Input [6]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, sum#84, isEmpty#85]
Arguments: hashpartitioning(i_category#20, i_class#19, i_brand#18, i_product_name#21, 5), ENSURE_REQUIREMENTS, [id=#86]

(48) HashAggregate [codegen id : 44]
Input [6]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, sum#84, isEmpty#85]
Keys [4]: [i_category#20, i_class#19, i_brand#18, i_product_name#21]
Functions [1]: [sum(sumsales#33)]
Aggregate Attributes [1]: [sum(sumsales#33)#87]
Results [9]: [i_category#20 AS i_category#88, i_class#19 AS i_class#89, i_brand#18 AS i_brand#90, i_product_name#21 AS i_product_name#91, null AS d_year#92, null AS d_qoy#93, null AS d_moy#94, null AS s_store_id#95, sum(sumsales#33)#87 AS sumsales#96]

(49) ReusedExchange [Reuses operator id: unknown]
Output [10]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#97, isEmpty#98]

(50) HashAggregate [codegen id : 52]
Input [10]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#97, isEmpty#98]
Keys [8]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#99]
Results [4]: [i_category#20, i_class#19, i_brand#18, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#99 AS sumsales#33]

(51) HashAggregate [codegen id : 52]
Input [4]: [i_category#20, i_class#19, i_brand#18, sumsales#33]
Keys [3]: [i_category#20, i_class#19, i_brand#18]
Functions [1]: [partial_sum(sumsales#33)]
Aggregate Attributes [2]: [sum#100, isEmpty#101]
Results [5]: [i_category#20, i_class#19, i_brand#18, sum#102, isEmpty#103]

(52) Exchange
Input [5]: [i_category#20, i_class#19, i_brand#18, sum#102, isEmpty#103]
Arguments: hashpartitioning(i_category#20, i_class#19, i_brand#18, 5), ENSURE_REQUIREMENTS, [id=#104]

(53) HashAggregate [codegen id : 53]
Input [5]: [i_category#20, i_class#19, i_brand#18, sum#102, isEmpty#103]
Keys [3]: [i_category#20, i_class#19, i_brand#18]
Functions [1]: [sum(sumsales#33)]
Aggregate Attributes [1]: [sum(sumsales#33)#105]
Results [9]: [i_category#20 AS i_category#106, i_class#19 AS i_class#107, i_brand#18 AS i_brand#108, null AS i_product_name#109, null AS d_year#110, null AS d_qoy#111, null AS d_moy#112, null AS s_store_id#113, sum(sumsales#33)#105 AS sumsales#114]

(54) ReusedExchange [Reuses operator id: unknown]
Output [10]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#115, isEmpty#116]

(55) HashAggregate [codegen id : 61]
Input [10]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#115, isEmpty#116]
Keys [8]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#117]
Results [3]: [i_category#20, i_class#19, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#117 AS sumsales#33]

(56) HashAggregate [codegen id : 61]
Input [3]: [i_category#20, i_class#19, sumsales#33]
Keys [2]: [i_category#20, i_class#19]
Functions [1]: [partial_sum(sumsales#33)]
Aggregate Attributes [2]: [sum#118, isEmpty#119]
Results [4]: [i_category#20, i_class#19, sum#120, isEmpty#121]

(57) Exchange
Input [4]: [i_category#20, i_class#19, sum#120, isEmpty#121]
Arguments: hashpartitioning(i_category#20, i_class#19, 5), ENSURE_REQUIREMENTS, [id=#122]

(58) HashAggregate [codegen id : 62]
Input [4]: [i_category#20, i_class#19, sum#120, isEmpty#121]
Keys [2]: [i_category#20, i_class#19]
Functions [1]: [sum(sumsales#33)]
Aggregate Attributes [1]: [sum(sumsales#33)#123]
Results [9]: [i_category#20 AS i_category#124, i_class#19 AS i_class#125, null AS i_brand#126, null AS i_product_name#127, null AS d_year#128, null AS d_qoy#129, null AS d_moy#130, null AS s_store_id#131, sum(sumsales#33)#123 AS sumsales#132]

(59) ReusedExchange [Reuses operator id: unknown]
Output [10]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#133, isEmpty#134]

(60) HashAggregate [codegen id : 70]
Input [10]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#133, isEmpty#134]
Keys [8]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#135]
Results [2]: [i_category#20, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#135 AS sumsales#33]

(61) HashAggregate [codegen id : 70]
Input [2]: [i_category#20, sumsales#33]
Keys [1]: [i_category#20]
Functions [1]: [partial_sum(sumsales#33)]
Aggregate Attributes [2]: [sum#136, isEmpty#137]
Results [3]: [i_category#20, sum#138, isEmpty#139]

(62) Exchange
Input [3]: [i_category#20, sum#138, isEmpty#139]
Arguments: hashpartitioning(i_category#20, 5), ENSURE_REQUIREMENTS, [id=#140]

(63) HashAggregate [codegen id : 71]
Input [3]: [i_category#20, sum#138, isEmpty#139]
Keys [1]: [i_category#20]
Functions [1]: [sum(sumsales#33)]
Aggregate Attributes [1]: [sum(sumsales#33)#141]
Results [9]: [i_category#20 AS i_category#142, null AS i_class#143, null AS i_brand#144, null AS i_product_name#145, null AS d_year#146, null AS d_qoy#147, null AS d_moy#148, null AS s_store_id#149, sum(sumsales#33)#141 AS sumsales#150]

(64) ReusedExchange [Reuses operator id: unknown]
Output [10]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#151, isEmpty#152]

(65) HashAggregate [codegen id : 79]
Input [10]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sum#151, isEmpty#152]
Keys [8]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#153]
Results [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#153 AS sumsales#33]

(66) HashAggregate [codegen id : 79]
Input [1]: [sumsales#33]
Keys: []
Functions [1]: [partial_sum(sumsales#33)]
Aggregate Attributes [2]: [sum#154, isEmpty#155]
Results [2]: [sum#156, isEmpty#157]

(67) Exchange
Input [2]: [sum#156, isEmpty#157]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#158]

(68) HashAggregate [codegen id : 80]
Input [2]: [sum#156, isEmpty#157]
Keys: []
Functions [1]: [sum(sumsales#33)]
Aggregate Attributes [1]: [sum(sumsales#33)#159]
Results [9]: [null AS i_category#160, null AS i_class#161, null AS i_brand#162, null AS i_product_name#163, null AS d_year#164, null AS d_qoy#165, null AS d_moy#166, null AS s_store_id#167, sum(sumsales#33)#159 AS sumsales#168]

(69) Union

(70) Exchange
Input [9]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sumsales#29]
Arguments: hashpartitioning(i_category#20, 5), ENSURE_REQUIREMENTS, [id=#169]

(71) Sort [codegen id : 81]
Input [9]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sumsales#29]
Arguments: [i_category#20 ASC NULLS FIRST, sumsales#29 DESC NULLS LAST], false, 0

(72) Window
Input [9]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sumsales#29]
Arguments: [rank(sumsales#29) windowspecdefinition(i_category#20, sumsales#29 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#170], [i_category#20], [sumsales#29 DESC NULLS LAST]

(73) Filter [codegen id : 82]
Input [10]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sumsales#29, rk#170]
Condition : (isnotnull(rk#170) AND (rk#170 <= 100))

(74) TakeOrderedAndProject
Input [10]: [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sumsales#29, rk#170]
Arguments: 100, [i_category#20 ASC NULLS FIRST, i_class#19 ASC NULLS FIRST, i_brand#18 ASC NULLS FIRST, i_product_name#21 ASC NULLS FIRST, d_year#9 ASC NULLS FIRST, d_qoy#11 ASC NULLS FIRST, d_moy#10 ASC NULLS FIRST, s_store_id#14 ASC NULLS FIRST, sumsales#29 ASC NULLS FIRST, rk#170 ASC NULLS FIRST], [i_category#20, i_class#19, i_brand#18, i_product_name#21, d_year#9, d_qoy#11, d_moy#10, s_store_id#14, sumsales#29, rk#170]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#5 IN dynamicpruning#6
ReusedExchange (75)


(75) ReusedExchange [Reuses operator id: 8]
Output [4]: [d_date_sk#7, d_year#9, d_moy#10, d_qoy#11]


