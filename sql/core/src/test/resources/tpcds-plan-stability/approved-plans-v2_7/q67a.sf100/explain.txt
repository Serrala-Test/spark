== Physical Plan ==
TakeOrderedAndProject (67)
+- * Filter (66)
   +- Window (65)
      +- * Sort (64)
         +- Exchange (63)
            +- Union (62)
               :- * HashAggregate (21)
               :  +- Exchange (20)
               :     +- * HashAggregate (19)
               :        +- * Project (18)
               :           +- * SortMergeJoin Inner (17)
               :              :- * Sort (14)
               :              :  +- Exchange (13)
               :              :     +- * Project (12)
               :              :        +- * BroadcastHashJoin Inner BuildRight (11)
               :              :           :- * Project (6)
               :              :           :  +- * BroadcastHashJoin Inner BuildRight (5)
               :              :           :     :- * Filter (3)
               :              :           :     :  +- * ColumnarToRow (2)
               :              :           :     :     +- Scan parquet spark_catalog.default.store_sales (1)
               :              :           :     +- ReusedExchange (4)
               :              :           +- BroadcastExchange (10)
               :              :              +- * Filter (9)
               :              :                 +- * ColumnarToRow (8)
               :              :                    +- Scan parquet spark_catalog.default.store (7)
               :              +- * Sort (16)
               :                 +- ReusedExchange (15)
               :- * HashAggregate (26)
               :  +- Exchange (25)
               :     +- * HashAggregate (24)
               :        +- * HashAggregate (23)
               :           +- ReusedExchange (22)
               :- * HashAggregate (31)
               :  +- Exchange (30)
               :     +- * HashAggregate (29)
               :        +- * HashAggregate (28)
               :           +- ReusedExchange (27)
               :- * HashAggregate (36)
               :  +- Exchange (35)
               :     +- * HashAggregate (34)
               :        +- * HashAggregate (33)
               :           +- ReusedExchange (32)
               :- * HashAggregate (41)
               :  +- Exchange (40)
               :     +- * HashAggregate (39)
               :        +- * HashAggregate (38)
               :           +- ReusedExchange (37)
               :- * HashAggregate (46)
               :  +- Exchange (45)
               :     +- * HashAggregate (44)
               :        +- * HashAggregate (43)
               :           +- ReusedExchange (42)
               :- * HashAggregate (51)
               :  +- Exchange (50)
               :     +- * HashAggregate (49)
               :        +- * HashAggregate (48)
               :           +- ReusedExchange (47)
               :- * HashAggregate (56)
               :  +- Exchange (55)
               :     +- * HashAggregate (54)
               :        +- * HashAggregate (53)
               :           +- ReusedExchange (52)
               +- * HashAggregate (61)
                  +- Exchange (60)
                     +- * HashAggregate (59)
                        +- * HashAggregate (58)
                           +- ReusedExchange (57)


(1) Scan parquet spark_catalog.default.store_sales
Output [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#5), dynamicpruningexpression(ss_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]

(3) Filter [codegen id : 3]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]
Condition : ((isnotnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1)) AND might_contain(Subquery scalar-subquery#7, [id=#8], xxhash64(ss_item_sk#1, 42), false))

(4) ReusedExchange [Reuses operator id: 79]
Output [4]: [d_date_sk#9, d_year#10, d_moy#11, d_qoy#12]

(5) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#5]
Right keys [1]: [d_date_sk#9]
Join type: Inner
Join condition: None

(6) Project [codegen id : 3]
Output [7]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, d_year#10, d_moy#11, d_qoy#12]
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5, d_date_sk#9, d_year#10, d_moy#11, d_qoy#12]

(7) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#13, s_store_id#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(8) ColumnarToRow [codegen id : 2]
Input [2]: [s_store_sk#13, s_store_id#14]

(9) Filter [codegen id : 2]
Input [2]: [s_store_sk#13, s_store_id#14]
Condition : isnotnull(s_store_sk#13)

(10) BroadcastExchange
Input [2]: [s_store_sk#13, s_store_id#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#13]
Join type: Inner
Join condition: None

(12) Project [codegen id : 3]
Output [7]: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#10, d_moy#11, d_qoy#12, s_store_id#14]
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, d_year#10, d_moy#11, d_qoy#12, s_store_sk#13, s_store_id#14]

(13) Exchange
Input [7]: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#10, d_moy#11, d_qoy#12, s_store_id#14]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(14) Sort [codegen id : 4]
Input [7]: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#10, d_moy#11, d_qoy#12, s_store_id#14]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(15) ReusedExchange [Reuses operator id: 71]
Output [5]: [i_item_sk#15, i_brand#16, i_class#17, i_category#18, i_product_name#19]

(16) Sort [codegen id : 6]
Input [5]: [i_item_sk#15, i_brand#16, i_class#17, i_category#18, i_product_name#19]
Arguments: [i_item_sk#15 ASC NULLS FIRST], false, 0

(17) SortMergeJoin [codegen id : 7]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#15]
Join type: Inner
Join condition: None

(18) Project [codegen id : 7]
Output [10]: [ss_quantity#3, ss_sales_price#4, d_year#10, d_moy#11, d_qoy#12, s_store_id#14, i_brand#16, i_class#17, i_category#18, i_product_name#19]
Input [12]: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#10, d_moy#11, d_qoy#12, s_store_id#14, i_item_sk#15, i_brand#16, i_class#17, i_category#18, i_product_name#19]

(19) HashAggregate [codegen id : 7]
Input [10]: [ss_quantity#3, ss_sales_price#4, d_year#10, d_moy#11, d_qoy#12, s_store_id#14, i_brand#16, i_class#17, i_category#18, i_product_name#19]
Keys [8]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14]
Functions [1]: [partial_sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))]
Aggregate Attributes [2]: [sum#20, isEmpty#21]
Results [10]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14, sum#22, isEmpty#23]

(20) Exchange
Input [10]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14, sum#22, isEmpty#23]
Arguments: hashpartitioning(i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(21) HashAggregate [codegen id : 8]
Input [10]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14, sum#22, isEmpty#23]
Keys [8]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14]
Functions [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))]
Aggregate Attributes [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))#24]
Results [9]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14, cast(sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))#24 as decimal(38,2)) AS sumsales#25]

(22) ReusedExchange [Reuses operator id: 20]
Output [10]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14, sum#26, isEmpty#27]

(23) HashAggregate [codegen id : 16]
Input [10]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14, sum#26, isEmpty#27]
Keys [8]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14]
Functions [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))]
Aggregate Attributes [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))#24]
Results [8]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))#24 AS sumsales#28]

(24) HashAggregate [codegen id : 16]
Input [8]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, sumsales#28]
Keys [7]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11]
Functions [1]: [partial_sum(sumsales#28)]
Aggregate Attributes [2]: [sum#29, isEmpty#30]
Results [9]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, sum#31, isEmpty#32]

(25) Exchange
Input [9]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, sum#31, isEmpty#32]
Arguments: hashpartitioning(i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(26) HashAggregate [codegen id : 17]
Input [9]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, sum#31, isEmpty#32]
Keys [7]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11]
Functions [1]: [sum(sumsales#28)]
Aggregate Attributes [1]: [sum(sumsales#28)#33]
Results [9]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, null AS s_store_id#34, sum(sumsales#28)#33 AS sumsales#35]

(27) ReusedExchange [Reuses operator id: 20]
Output [10]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14, sum#36, isEmpty#37]

(28) HashAggregate [codegen id : 25]
Input [10]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14, sum#36, isEmpty#37]
Keys [8]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14]
Functions [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))]
Aggregate Attributes [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))#24]
Results [7]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))#24 AS sumsales#28]

(29) HashAggregate [codegen id : 25]
Input [7]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, sumsales#28]
Keys [6]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12]
Functions [1]: [partial_sum(sumsales#28)]
Aggregate Attributes [2]: [sum#38, isEmpty#39]
Results [8]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, sum#40, isEmpty#41]

(30) Exchange
Input [8]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, sum#40, isEmpty#41]
Arguments: hashpartitioning(i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(31) HashAggregate [codegen id : 26]
Input [8]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, sum#40, isEmpty#41]
Keys [6]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12]
Functions [1]: [sum(sumsales#28)]
Aggregate Attributes [1]: [sum(sumsales#28)#42]
Results [9]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, null AS d_moy#43, null AS s_store_id#44, sum(sumsales#28)#42 AS sumsales#45]

(32) ReusedExchange [Reuses operator id: 20]
Output [10]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14, sum#46, isEmpty#47]

(33) HashAggregate [codegen id : 34]
Input [10]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14, sum#46, isEmpty#47]
Keys [8]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14]
Functions [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))]
Aggregate Attributes [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))#24]
Results [6]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))#24 AS sumsales#28]

(34) HashAggregate [codegen id : 34]
Input [6]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, sumsales#28]
Keys [5]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10]
Functions [1]: [partial_sum(sumsales#28)]
Aggregate Attributes [2]: [sum#48, isEmpty#49]
Results [7]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, sum#50, isEmpty#51]

(35) Exchange
Input [7]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, sum#50, isEmpty#51]
Arguments: hashpartitioning(i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(36) HashAggregate [codegen id : 35]
Input [7]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, sum#50, isEmpty#51]
Keys [5]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10]
Functions [1]: [sum(sumsales#28)]
Aggregate Attributes [1]: [sum(sumsales#28)#52]
Results [9]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, null AS d_qoy#53, null AS d_moy#54, null AS s_store_id#55, sum(sumsales#28)#52 AS sumsales#56]

(37) ReusedExchange [Reuses operator id: 20]
Output [10]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14, sum#57, isEmpty#58]

(38) HashAggregate [codegen id : 43]
Input [10]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14, sum#57, isEmpty#58]
Keys [8]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14]
Functions [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))]
Aggregate Attributes [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))#24]
Results [5]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))#24 AS sumsales#28]

(39) HashAggregate [codegen id : 43]
Input [5]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, sumsales#28]
Keys [4]: [i_category#18, i_class#17, i_brand#16, i_product_name#19]
Functions [1]: [partial_sum(sumsales#28)]
Aggregate Attributes [2]: [sum#59, isEmpty#60]
Results [6]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, sum#61, isEmpty#62]

(40) Exchange
Input [6]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, sum#61, isEmpty#62]
Arguments: hashpartitioning(i_category#18, i_class#17, i_brand#16, i_product_name#19, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(41) HashAggregate [codegen id : 44]
Input [6]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, sum#61, isEmpty#62]
Keys [4]: [i_category#18, i_class#17, i_brand#16, i_product_name#19]
Functions [1]: [sum(sumsales#28)]
Aggregate Attributes [1]: [sum(sumsales#28)#63]
Results [9]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, null AS d_year#64, null AS d_qoy#65, null AS d_moy#66, null AS s_store_id#67, sum(sumsales#28)#63 AS sumsales#68]

(42) ReusedExchange [Reuses operator id: 20]
Output [10]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14, sum#69, isEmpty#70]

(43) HashAggregate [codegen id : 52]
Input [10]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14, sum#69, isEmpty#70]
Keys [8]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14]
Functions [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))]
Aggregate Attributes [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))#24]
Results [4]: [i_category#18, i_class#17, i_brand#16, sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))#24 AS sumsales#28]

(44) HashAggregate [codegen id : 52]
Input [4]: [i_category#18, i_class#17, i_brand#16, sumsales#28]
Keys [3]: [i_category#18, i_class#17, i_brand#16]
Functions [1]: [partial_sum(sumsales#28)]
Aggregate Attributes [2]: [sum#71, isEmpty#72]
Results [5]: [i_category#18, i_class#17, i_brand#16, sum#73, isEmpty#74]

(45) Exchange
Input [5]: [i_category#18, i_class#17, i_brand#16, sum#73, isEmpty#74]
Arguments: hashpartitioning(i_category#18, i_class#17, i_brand#16, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(46) HashAggregate [codegen id : 53]
Input [5]: [i_category#18, i_class#17, i_brand#16, sum#73, isEmpty#74]
Keys [3]: [i_category#18, i_class#17, i_brand#16]
Functions [1]: [sum(sumsales#28)]
Aggregate Attributes [1]: [sum(sumsales#28)#75]
Results [9]: [i_category#18, i_class#17, i_brand#16, null AS i_product_name#76, null AS d_year#77, null AS d_qoy#78, null AS d_moy#79, null AS s_store_id#80, sum(sumsales#28)#75 AS sumsales#81]

(47) ReusedExchange [Reuses operator id: 20]
Output [10]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14, sum#82, isEmpty#83]

(48) HashAggregate [codegen id : 61]
Input [10]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14, sum#82, isEmpty#83]
Keys [8]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14]
Functions [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))]
Aggregate Attributes [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))#24]
Results [3]: [i_category#18, i_class#17, sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))#24 AS sumsales#28]

(49) HashAggregate [codegen id : 61]
Input [3]: [i_category#18, i_class#17, sumsales#28]
Keys [2]: [i_category#18, i_class#17]
Functions [1]: [partial_sum(sumsales#28)]
Aggregate Attributes [2]: [sum#84, isEmpty#85]
Results [4]: [i_category#18, i_class#17, sum#86, isEmpty#87]

(50) Exchange
Input [4]: [i_category#18, i_class#17, sum#86, isEmpty#87]
Arguments: hashpartitioning(i_category#18, i_class#17, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(51) HashAggregate [codegen id : 62]
Input [4]: [i_category#18, i_class#17, sum#86, isEmpty#87]
Keys [2]: [i_category#18, i_class#17]
Functions [1]: [sum(sumsales#28)]
Aggregate Attributes [1]: [sum(sumsales#28)#88]
Results [9]: [i_category#18, i_class#17, null AS i_brand#89, null AS i_product_name#90, null AS d_year#91, null AS d_qoy#92, null AS d_moy#93, null AS s_store_id#94, sum(sumsales#28)#88 AS sumsales#95]

(52) ReusedExchange [Reuses operator id: 20]
Output [10]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14, sum#96, isEmpty#97]

(53) HashAggregate [codegen id : 70]
Input [10]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14, sum#96, isEmpty#97]
Keys [8]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14]
Functions [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))]
Aggregate Attributes [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))#24]
Results [2]: [i_category#18, sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))#24 AS sumsales#28]

(54) HashAggregate [codegen id : 70]
Input [2]: [i_category#18, sumsales#28]
Keys [1]: [i_category#18]
Functions [1]: [partial_sum(sumsales#28)]
Aggregate Attributes [2]: [sum#98, isEmpty#99]
Results [3]: [i_category#18, sum#100, isEmpty#101]

(55) Exchange
Input [3]: [i_category#18, sum#100, isEmpty#101]
Arguments: hashpartitioning(i_category#18, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(56) HashAggregate [codegen id : 71]
Input [3]: [i_category#18, sum#100, isEmpty#101]
Keys [1]: [i_category#18]
Functions [1]: [sum(sumsales#28)]
Aggregate Attributes [1]: [sum(sumsales#28)#102]
Results [9]: [i_category#18, null AS i_class#103, null AS i_brand#104, null AS i_product_name#105, null AS d_year#106, null AS d_qoy#107, null AS d_moy#108, null AS s_store_id#109, sum(sumsales#28)#102 AS sumsales#110]

(57) ReusedExchange [Reuses operator id: 20]
Output [10]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14, sum#111, isEmpty#112]

(58) HashAggregate [codegen id : 79]
Input [10]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14, sum#111, isEmpty#112]
Keys [8]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14]
Functions [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))]
Aggregate Attributes [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))#24]
Results [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))#24 AS sumsales#28]

(59) HashAggregate [codegen id : 79]
Input [1]: [sumsales#28]
Keys: []
Functions [1]: [partial_sum(sumsales#28)]
Aggregate Attributes [2]: [sum#113, isEmpty#114]
Results [2]: [sum#115, isEmpty#116]

(60) Exchange
Input [2]: [sum#115, isEmpty#116]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=11]

(61) HashAggregate [codegen id : 80]
Input [2]: [sum#115, isEmpty#116]
Keys: []
Functions [1]: [sum(sumsales#28)]
Aggregate Attributes [1]: [sum(sumsales#28)#117]
Results [9]: [null AS i_category#118, null AS i_class#119, null AS i_brand#120, null AS i_product_name#121, null AS d_year#122, null AS d_qoy#123, null AS d_moy#124, null AS s_store_id#125, sum(sumsales#28)#117 AS sumsales#126]

(62) Union

(63) Exchange
Input [9]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14, sumsales#25]
Arguments: hashpartitioning(i_category#18, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(64) Sort [codegen id : 81]
Input [9]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14, sumsales#25]
Arguments: [i_category#18 ASC NULLS FIRST, sumsales#25 DESC NULLS LAST], false, 0

(65) Window
Input [9]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14, sumsales#25]
Arguments: [rank(sumsales#25) windowspecdefinition(i_category#18, sumsales#25 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#127], [i_category#18], [sumsales#25 DESC NULLS LAST]

(66) Filter [codegen id : 82]
Input [10]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14, sumsales#25, rk#127]
Condition : (rk#127 <= 100)

(67) TakeOrderedAndProject
Input [10]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14, sumsales#25, rk#127]
Arguments: 100, [i_category#18 ASC NULLS FIRST, i_class#17 ASC NULLS FIRST, i_brand#16 ASC NULLS FIRST, i_product_name#19 ASC NULLS FIRST, d_year#10 ASC NULLS FIRST, d_qoy#12 ASC NULLS FIRST, d_moy#11 ASC NULLS FIRST, s_store_id#14 ASC NULLS FIRST, sumsales#25 ASC NULLS FIRST, rk#127 ASC NULLS FIRST], [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14, sumsales#25, rk#127]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#7, [id=#8]
ObjectHashAggregate (74)
+- Exchange (73)
   +- ObjectHashAggregate (72)
      +- Exchange (71)
         +- * Filter (70)
            +- * ColumnarToRow (69)
               +- Scan parquet spark_catalog.default.item (68)


(68) Scan parquet spark_catalog.default.item
Output [5]: [i_item_sk#15, i_brand#16, i_class#17, i_category#18, i_product_name#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_product_name:string>

(69) ColumnarToRow [codegen id : 1]
Input [5]: [i_item_sk#15, i_brand#16, i_class#17, i_category#18, i_product_name#19]

(70) Filter [codegen id : 1]
Input [5]: [i_item_sk#15, i_brand#16, i_class#17, i_category#18, i_product_name#19]
Condition : isnotnull(i_item_sk#15)

(71) Exchange
Input [5]: [i_item_sk#15, i_brand#16, i_class#17, i_category#18, i_product_name#19]
Arguments: hashpartitioning(i_item_sk#15, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(72) ObjectHashAggregate
Input [5]: [i_item_sk#15, i_brand#16, i_class#17, i_category#18, i_product_name#19]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(i_item_sk#15, 42), 204000, 1632000, 0, 0)]
Aggregate Attributes [1]: [buf#128]
Results [1]: [buf#129]

(73) Exchange
Input [1]: [buf#129]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=14]

(74) ObjectHashAggregate
Input [1]: [buf#129]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(i_item_sk#15, 42), 204000, 1632000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(i_item_sk#15, 42), 204000, 1632000, 0, 0)#130]
Results [1]: [bloom_filter_agg(xxhash64(i_item_sk#15, 42), 204000, 1632000, 0, 0)#130 AS bloomFilter#131]

Subquery:2 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (79)
+- * Project (78)
   +- * Filter (77)
      +- * ColumnarToRow (76)
         +- Scan parquet spark_catalog.default.date_dim (75)


(75) Scan parquet spark_catalog.default.date_dim
Output [5]: [d_date_sk#9, d_month_seq#132, d_year#10, d_moy#11, d_qoy#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int,d_year:int,d_moy:int,d_qoy:int>

(76) ColumnarToRow [codegen id : 1]
Input [5]: [d_date_sk#9, d_month_seq#132, d_year#10, d_moy#11, d_qoy#12]

(77) Filter [codegen id : 1]
Input [5]: [d_date_sk#9, d_month_seq#132, d_year#10, d_moy#11, d_qoy#12]
Condition : (((isnotnull(d_month_seq#132) AND (d_month_seq#132 >= 1212)) AND (d_month_seq#132 <= 1223)) AND isnotnull(d_date_sk#9))

(78) Project [codegen id : 1]
Output [4]: [d_date_sk#9, d_year#10, d_moy#11, d_qoy#12]
Input [5]: [d_date_sk#9, d_month_seq#132, d_year#10, d_moy#11, d_qoy#12]

(79) BroadcastExchange
Input [4]: [d_date_sk#9, d_year#10, d_moy#11, d_qoy#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=15]


