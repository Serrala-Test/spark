== Physical Plan ==
TakeOrderedAndProject (68)
+- * Filter (67)
   +- Window (66)
      +- * Sort (65)
         +- Exchange (64)
            +- Union (63)
               :- * HashAggregate (22)
               :  +- Exchange (21)
               :     +- * HashAggregate (20)
               :        +- * Project (19)
               :           +- * SortMergeJoin Inner (18)
               :              :- * Sort (13)
               :              :  +- Exchange (12)
               :              :     +- * Project (11)
               :              :        +- * BroadcastHashJoin Inner BuildRight (10)
               :              :           :- * Project (6)
               :              :           :  +- * BroadcastHashJoin Inner BuildRight (5)
               :              :           :     :- * Filter (3)
               :              :           :     :  +- * ColumnarToRow (2)
               :              :           :     :     +- Scan parquet default.store_sales (1)
               :              :           :     +- ReusedExchange (4)
               :              :           +- BroadcastExchange (9)
               :              :              +- * ColumnarToRow (8)
               :              :                 +- Scan parquet default.store (7)
               :              +- * Sort (17)
               :                 +- Exchange (16)
               :                    +- * ColumnarToRow (15)
               :                       +- Scan parquet default.item (14)
               :- * HashAggregate (27)
               :  +- Exchange (26)
               :     +- * HashAggregate (25)
               :        +- * HashAggregate (24)
               :           +- ReusedExchange (23)
               :- * HashAggregate (32)
               :  +- Exchange (31)
               :     +- * HashAggregate (30)
               :        +- * HashAggregate (29)
               :           +- ReusedExchange (28)
               :- * HashAggregate (37)
               :  +- Exchange (36)
               :     +- * HashAggregate (35)
               :        +- * HashAggregate (34)
               :           +- ReusedExchange (33)
               :- * HashAggregate (42)
               :  +- Exchange (41)
               :     +- * HashAggregate (40)
               :        +- * HashAggregate (39)
               :           +- ReusedExchange (38)
               :- * HashAggregate (47)
               :  +- Exchange (46)
               :     +- * HashAggregate (45)
               :        +- * HashAggregate (44)
               :           +- ReusedExchange (43)
               :- * HashAggregate (52)
               :  +- Exchange (51)
               :     +- * HashAggregate (50)
               :        +- * HashAggregate (49)
               :           +- ReusedExchange (48)
               :- * HashAggregate (57)
               :  +- Exchange (56)
               :     +- * HashAggregate (55)
               :        +- * HashAggregate (54)
               :           +- ReusedExchange (53)
               +- * HashAggregate (62)
                  +- Exchange (61)
                     +- * HashAggregate (60)
                        +- * HashAggregate (59)
                           +- ReusedExchange (58)


(1) Scan parquet default.store_sales
Output [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#5), dynamicpruningexpression(ss_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]

(3) Filter [codegen id : 3]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]
Condition : isnotnull(ss_store_sk#2)

(4) ReusedExchange [Reuses operator id: 73]
Output [4]: [d_date_sk#7, d_year#8, d_moy#9, d_qoy#10]

(5) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#5]
Right keys [1]: [d_date_sk#7]
Join condition: None

(6) Project [codegen id : 3]
Output [7]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10]
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5, d_date_sk#7, d_year#8, d_moy#9, d_qoy#10]

(7) Scan parquet default.store
Output [2]: [s_store_sk#11, s_store_id#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(8) ColumnarToRow [codegen id : 2]
Input [2]: [s_store_sk#11, s_store_id#12]

(9) BroadcastExchange
Input [2]: [s_store_sk#11, s_store_id#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13]

(10) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#11]
Join condition: None

(11) Project [codegen id : 3]
Output [7]: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_id#12]
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_sk#11, s_store_id#12]

(12) Exchange
Input [7]: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_id#12]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#14]

(13) Sort [codegen id : 4]
Input [7]: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_id#12]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(14) Scan parquet default.item
Output [5]: [i_item_sk#15, i_brand#16, i_class#17, i_category#18, i_product_name#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_product_name:string>

(15) ColumnarToRow [codegen id : 5]
Input [5]: [i_item_sk#15, i_brand#16, i_class#17, i_category#18, i_product_name#19]

(16) Exchange
Input [5]: [i_item_sk#15, i_brand#16, i_class#17, i_category#18, i_product_name#19]
Arguments: hashpartitioning(i_item_sk#15, 5), ENSURE_REQUIREMENTS, [id=#20]

(17) Sort [codegen id : 6]
Input [5]: [i_item_sk#15, i_brand#16, i_class#17, i_category#18, i_product_name#19]
Arguments: [i_item_sk#15 ASC NULLS FIRST], false, 0

(18) SortMergeJoin [codegen id : 7]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#15]
Join condition: None

(19) Project [codegen id : 7]
Output [10]: [ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_id#12, i_brand#16, i_class#17, i_category#18, i_product_name#19]
Input [12]: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_id#12, i_item_sk#15, i_brand#16, i_class#17, i_category#18, i_product_name#19]

(20) HashAggregate [codegen id : 7]
Input [10]: [ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_id#12, i_brand#16, i_class#17, i_category#18, i_product_name#19]
Keys [8]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#8, d_qoy#10, d_moy#9, s_store_id#12]
Functions [1]: [partial_sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [2]: [sum#21, isEmpty#22]
Results [10]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#23, isEmpty#24]

(21) Exchange
Input [10]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#23, isEmpty#24]
Arguments: hashpartitioning(i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, 5), ENSURE_REQUIREMENTS, [id=#25]

(22) HashAggregate [codegen id : 8]
Input [10]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sum#23, isEmpty#24]
Keys [8]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#8, d_qoy#10, d_moy#9, s_store_id#12]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#26]
Results [9]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, cast(sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#4 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#26 as decimal(38,2)) AS sumsales#27]

(23) ReusedExchange [Reuses operator id: 21]
Output [10]: [i_category#28, i_class#29, i_brand#30, i_product_name#31, d_year#32, d_qoy#33, d_moy#34, s_store_id#35, sum#36, isEmpty#37]

(24) HashAggregate [codegen id : 16]
Input [10]: [i_category#28, i_class#29, i_brand#30, i_product_name#31, d_year#32, d_qoy#33, d_moy#34, s_store_id#35, sum#36, isEmpty#37]
Keys [8]: [i_category#28, i_class#29, i_brand#30, i_product_name#31, d_year#32, d_qoy#33, d_moy#34, s_store_id#35]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#38 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#39 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#38 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#39 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#40]
Results [8]: [i_category#28, i_class#29, i_brand#30, i_product_name#31, d_year#32, d_qoy#33, d_moy#34, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#38 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#39 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#40 AS sumsales#41]

(25) HashAggregate [codegen id : 16]
Input [8]: [i_category#28, i_class#29, i_brand#30, i_product_name#31, d_year#32, d_qoy#33, d_moy#34, sumsales#41]
Keys [7]: [i_category#28, i_class#29, i_brand#30, i_product_name#31, d_year#32, d_qoy#33, d_moy#34]
Functions [1]: [partial_sum(sumsales#41)]
Aggregate Attributes [2]: [sum#42, isEmpty#43]
Results [9]: [i_category#28, i_class#29, i_brand#30, i_product_name#31, d_year#32, d_qoy#33, d_moy#34, sum#44, isEmpty#45]

(26) Exchange
Input [9]: [i_category#28, i_class#29, i_brand#30, i_product_name#31, d_year#32, d_qoy#33, d_moy#34, sum#44, isEmpty#45]
Arguments: hashpartitioning(i_category#28, i_class#29, i_brand#30, i_product_name#31, d_year#32, d_qoy#33, d_moy#34, 5), ENSURE_REQUIREMENTS, [id=#46]

(27) HashAggregate [codegen id : 17]
Input [9]: [i_category#28, i_class#29, i_brand#30, i_product_name#31, d_year#32, d_qoy#33, d_moy#34, sum#44, isEmpty#45]
Keys [7]: [i_category#28, i_class#29, i_brand#30, i_product_name#31, d_year#32, d_qoy#33, d_moy#34]
Functions [1]: [sum(sumsales#41)]
Aggregate Attributes [1]: [sum(sumsales#41)#47]
Results [9]: [i_category#28, i_class#29, i_brand#30, i_product_name#31, d_year#32, d_qoy#33, d_moy#34, null AS s_store_id#48, sum(sumsales#41)#47 AS sumsales#49]

(28) ReusedExchange [Reuses operator id: 21]
Output [10]: [i_category#50, i_class#51, i_brand#52, i_product_name#53, d_year#54, d_qoy#55, d_moy#56, s_store_id#57, sum#58, isEmpty#59]

(29) HashAggregate [codegen id : 25]
Input [10]: [i_category#50, i_class#51, i_brand#52, i_product_name#53, d_year#54, d_qoy#55, d_moy#56, s_store_id#57, sum#58, isEmpty#59]
Keys [8]: [i_category#50, i_class#51, i_brand#52, i_product_name#53, d_year#54, d_qoy#55, d_moy#56, s_store_id#57]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#60 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#61 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#60 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#61 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#62]
Results [7]: [i_category#50, i_class#51, i_brand#52, i_product_name#53, d_year#54, d_qoy#55, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#60 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#61 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#62 AS sumsales#41]

(30) HashAggregate [codegen id : 25]
Input [7]: [i_category#50, i_class#51, i_brand#52, i_product_name#53, d_year#54, d_qoy#55, sumsales#41]
Keys [6]: [i_category#50, i_class#51, i_brand#52, i_product_name#53, d_year#54, d_qoy#55]
Functions [1]: [partial_sum(sumsales#41)]
Aggregate Attributes [2]: [sum#63, isEmpty#64]
Results [8]: [i_category#50, i_class#51, i_brand#52, i_product_name#53, d_year#54, d_qoy#55, sum#65, isEmpty#66]

(31) Exchange
Input [8]: [i_category#50, i_class#51, i_brand#52, i_product_name#53, d_year#54, d_qoy#55, sum#65, isEmpty#66]
Arguments: hashpartitioning(i_category#50, i_class#51, i_brand#52, i_product_name#53, d_year#54, d_qoy#55, 5), ENSURE_REQUIREMENTS, [id=#67]

(32) HashAggregate [codegen id : 26]
Input [8]: [i_category#50, i_class#51, i_brand#52, i_product_name#53, d_year#54, d_qoy#55, sum#65, isEmpty#66]
Keys [6]: [i_category#50, i_class#51, i_brand#52, i_product_name#53, d_year#54, d_qoy#55]
Functions [1]: [sum(sumsales#41)]
Aggregate Attributes [1]: [sum(sumsales#41)#68]
Results [9]: [i_category#50, i_class#51, i_brand#52, i_product_name#53, d_year#54, d_qoy#55, null AS d_moy#69, null AS s_store_id#70, sum(sumsales#41)#68 AS sumsales#71]

(33) ReusedExchange [Reuses operator id: 21]
Output [10]: [i_category#72, i_class#73, i_brand#74, i_product_name#75, d_year#76, d_qoy#77, d_moy#78, s_store_id#79, sum#80, isEmpty#81]

(34) HashAggregate [codegen id : 34]
Input [10]: [i_category#72, i_class#73, i_brand#74, i_product_name#75, d_year#76, d_qoy#77, d_moy#78, s_store_id#79, sum#80, isEmpty#81]
Keys [8]: [i_category#72, i_class#73, i_brand#74, i_product_name#75, d_year#76, d_qoy#77, d_moy#78, s_store_id#79]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#82 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#83 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#82 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#83 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#84]
Results [6]: [i_category#72, i_class#73, i_brand#74, i_product_name#75, d_year#76, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#82 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#83 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#84 AS sumsales#41]

(35) HashAggregate [codegen id : 34]
Input [6]: [i_category#72, i_class#73, i_brand#74, i_product_name#75, d_year#76, sumsales#41]
Keys [5]: [i_category#72, i_class#73, i_brand#74, i_product_name#75, d_year#76]
Functions [1]: [partial_sum(sumsales#41)]
Aggregate Attributes [2]: [sum#85, isEmpty#86]
Results [7]: [i_category#72, i_class#73, i_brand#74, i_product_name#75, d_year#76, sum#87, isEmpty#88]

(36) Exchange
Input [7]: [i_category#72, i_class#73, i_brand#74, i_product_name#75, d_year#76, sum#87, isEmpty#88]
Arguments: hashpartitioning(i_category#72, i_class#73, i_brand#74, i_product_name#75, d_year#76, 5), ENSURE_REQUIREMENTS, [id=#89]

(37) HashAggregate [codegen id : 35]
Input [7]: [i_category#72, i_class#73, i_brand#74, i_product_name#75, d_year#76, sum#87, isEmpty#88]
Keys [5]: [i_category#72, i_class#73, i_brand#74, i_product_name#75, d_year#76]
Functions [1]: [sum(sumsales#41)]
Aggregate Attributes [1]: [sum(sumsales#41)#90]
Results [9]: [i_category#72, i_class#73, i_brand#74, i_product_name#75, d_year#76, null AS d_qoy#91, null AS d_moy#92, null AS s_store_id#93, sum(sumsales#41)#90 AS sumsales#94]

(38) ReusedExchange [Reuses operator id: 21]
Output [10]: [i_category#95, i_class#96, i_brand#97, i_product_name#98, d_year#99, d_qoy#100, d_moy#101, s_store_id#102, sum#103, isEmpty#104]

(39) HashAggregate [codegen id : 43]
Input [10]: [i_category#95, i_class#96, i_brand#97, i_product_name#98, d_year#99, d_qoy#100, d_moy#101, s_store_id#102, sum#103, isEmpty#104]
Keys [8]: [i_category#95, i_class#96, i_brand#97, i_product_name#98, d_year#99, d_qoy#100, d_moy#101, s_store_id#102]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#105 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#106 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#105 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#106 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#107]
Results [5]: [i_category#95, i_class#96, i_brand#97, i_product_name#98, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#105 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#106 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#107 AS sumsales#41]

(40) HashAggregate [codegen id : 43]
Input [5]: [i_category#95, i_class#96, i_brand#97, i_product_name#98, sumsales#41]
Keys [4]: [i_category#95, i_class#96, i_brand#97, i_product_name#98]
Functions [1]: [partial_sum(sumsales#41)]
Aggregate Attributes [2]: [sum#108, isEmpty#109]
Results [6]: [i_category#95, i_class#96, i_brand#97, i_product_name#98, sum#110, isEmpty#111]

(41) Exchange
Input [6]: [i_category#95, i_class#96, i_brand#97, i_product_name#98, sum#110, isEmpty#111]
Arguments: hashpartitioning(i_category#95, i_class#96, i_brand#97, i_product_name#98, 5), ENSURE_REQUIREMENTS, [id=#112]

(42) HashAggregate [codegen id : 44]
Input [6]: [i_category#95, i_class#96, i_brand#97, i_product_name#98, sum#110, isEmpty#111]
Keys [4]: [i_category#95, i_class#96, i_brand#97, i_product_name#98]
Functions [1]: [sum(sumsales#41)]
Aggregate Attributes [1]: [sum(sumsales#41)#113]
Results [9]: [i_category#95, i_class#96, i_brand#97, i_product_name#98, null AS d_year#114, null AS d_qoy#115, null AS d_moy#116, null AS s_store_id#117, sum(sumsales#41)#113 AS sumsales#118]

(43) ReusedExchange [Reuses operator id: 21]
Output [10]: [i_category#119, i_class#120, i_brand#121, i_product_name#122, d_year#123, d_qoy#124, d_moy#125, s_store_id#126, sum#127, isEmpty#128]

(44) HashAggregate [codegen id : 52]
Input [10]: [i_category#119, i_class#120, i_brand#121, i_product_name#122, d_year#123, d_qoy#124, d_moy#125, s_store_id#126, sum#127, isEmpty#128]
Keys [8]: [i_category#119, i_class#120, i_brand#121, i_product_name#122, d_year#123, d_qoy#124, d_moy#125, s_store_id#126]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#129 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#130 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#129 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#130 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#131]
Results [4]: [i_category#119, i_class#120, i_brand#121, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#129 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#130 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#131 AS sumsales#41]

(45) HashAggregate [codegen id : 52]
Input [4]: [i_category#119, i_class#120, i_brand#121, sumsales#41]
Keys [3]: [i_category#119, i_class#120, i_brand#121]
Functions [1]: [partial_sum(sumsales#41)]
Aggregate Attributes [2]: [sum#132, isEmpty#133]
Results [5]: [i_category#119, i_class#120, i_brand#121, sum#134, isEmpty#135]

(46) Exchange
Input [5]: [i_category#119, i_class#120, i_brand#121, sum#134, isEmpty#135]
Arguments: hashpartitioning(i_category#119, i_class#120, i_brand#121, 5), ENSURE_REQUIREMENTS, [id=#136]

(47) HashAggregate [codegen id : 53]
Input [5]: [i_category#119, i_class#120, i_brand#121, sum#134, isEmpty#135]
Keys [3]: [i_category#119, i_class#120, i_brand#121]
Functions [1]: [sum(sumsales#41)]
Aggregate Attributes [1]: [sum(sumsales#41)#137]
Results [9]: [i_category#119, i_class#120, i_brand#121, null AS i_product_name#138, null AS d_year#139, null AS d_qoy#140, null AS d_moy#141, null AS s_store_id#142, sum(sumsales#41)#137 AS sumsales#143]

(48) ReusedExchange [Reuses operator id: 21]
Output [10]: [i_category#144, i_class#145, i_brand#146, i_product_name#147, d_year#148, d_qoy#149, d_moy#150, s_store_id#151, sum#152, isEmpty#153]

(49) HashAggregate [codegen id : 61]
Input [10]: [i_category#144, i_class#145, i_brand#146, i_product_name#147, d_year#148, d_qoy#149, d_moy#150, s_store_id#151, sum#152, isEmpty#153]
Keys [8]: [i_category#144, i_class#145, i_brand#146, i_product_name#147, d_year#148, d_qoy#149, d_moy#150, s_store_id#151]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#154 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#155 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#154 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#155 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#156]
Results [3]: [i_category#144, i_class#145, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#154 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#155 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#156 AS sumsales#41]

(50) HashAggregate [codegen id : 61]
Input [3]: [i_category#144, i_class#145, sumsales#41]
Keys [2]: [i_category#144, i_class#145]
Functions [1]: [partial_sum(sumsales#41)]
Aggregate Attributes [2]: [sum#157, isEmpty#158]
Results [4]: [i_category#144, i_class#145, sum#159, isEmpty#160]

(51) Exchange
Input [4]: [i_category#144, i_class#145, sum#159, isEmpty#160]
Arguments: hashpartitioning(i_category#144, i_class#145, 5), ENSURE_REQUIREMENTS, [id=#161]

(52) HashAggregate [codegen id : 62]
Input [4]: [i_category#144, i_class#145, sum#159, isEmpty#160]
Keys [2]: [i_category#144, i_class#145]
Functions [1]: [sum(sumsales#41)]
Aggregate Attributes [1]: [sum(sumsales#41)#162]
Results [9]: [i_category#144, i_class#145, null AS i_brand#163, null AS i_product_name#164, null AS d_year#165, null AS d_qoy#166, null AS d_moy#167, null AS s_store_id#168, sum(sumsales#41)#162 AS sumsales#169]

(53) ReusedExchange [Reuses operator id: 21]
Output [10]: [i_category#170, i_class#171, i_brand#172, i_product_name#173, d_year#174, d_qoy#175, d_moy#176, s_store_id#177, sum#178, isEmpty#179]

(54) HashAggregate [codegen id : 70]
Input [10]: [i_category#170, i_class#171, i_brand#172, i_product_name#173, d_year#174, d_qoy#175, d_moy#176, s_store_id#177, sum#178, isEmpty#179]
Keys [8]: [i_category#170, i_class#171, i_brand#172, i_product_name#173, d_year#174, d_qoy#175, d_moy#176, s_store_id#177]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#180 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#181 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#180 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#181 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#182]
Results [2]: [i_category#170, sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#180 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#181 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#182 AS sumsales#41]

(55) HashAggregate [codegen id : 70]
Input [2]: [i_category#170, sumsales#41]
Keys [1]: [i_category#170]
Functions [1]: [partial_sum(sumsales#41)]
Aggregate Attributes [2]: [sum#183, isEmpty#184]
Results [3]: [i_category#170, sum#185, isEmpty#186]

(56) Exchange
Input [3]: [i_category#170, sum#185, isEmpty#186]
Arguments: hashpartitioning(i_category#170, 5), ENSURE_REQUIREMENTS, [id=#187]

(57) HashAggregate [codegen id : 71]
Input [3]: [i_category#170, sum#185, isEmpty#186]
Keys [1]: [i_category#170]
Functions [1]: [sum(sumsales#41)]
Aggregate Attributes [1]: [sum(sumsales#41)#188]
Results [9]: [i_category#170, null AS i_class#189, null AS i_brand#190, null AS i_product_name#191, null AS d_year#192, null AS d_qoy#193, null AS d_moy#194, null AS s_store_id#195, sum(sumsales#41)#188 AS sumsales#196]

(58) ReusedExchange [Reuses operator id: 21]
Output [10]: [i_category#197, i_class#198, i_brand#199, i_product_name#200, d_year#201, d_qoy#202, d_moy#203, s_store_id#204, sum#205, isEmpty#206]

(59) HashAggregate [codegen id : 79]
Input [10]: [i_category#197, i_class#198, i_brand#199, i_product_name#200, d_year#201, d_qoy#202, d_moy#203, s_store_id#204, sum#205, isEmpty#206]
Keys [8]: [i_category#197, i_class#198, i_brand#199, i_product_name#200, d_year#201, d_qoy#202, d_moy#203, s_store_id#204]
Functions [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#207 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#208 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))]
Aggregate Attributes [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#207 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#208 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#209]
Results [1]: [sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#207 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#208 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))#209 AS sumsales#41]

(60) HashAggregate [codegen id : 79]
Input [1]: [sumsales#41]
Keys: []
Functions [1]: [partial_sum(sumsales#41)]
Aggregate Attributes [2]: [sum#210, isEmpty#211]
Results [2]: [sum#212, isEmpty#213]

(61) Exchange
Input [2]: [sum#212, isEmpty#213]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#214]

(62) HashAggregate [codegen id : 80]
Input [2]: [sum#212, isEmpty#213]
Keys: []
Functions [1]: [sum(sumsales#41)]
Aggregate Attributes [1]: [sum(sumsales#41)#215]
Results [9]: [null AS i_category#216, null AS i_class#217, null AS i_brand#218, null AS i_product_name#219, null AS d_year#220, null AS d_qoy#221, null AS d_moy#222, null AS s_store_id#223, sum(sumsales#41)#215 AS sumsales#224]

(63) Union

(64) Exchange
Input [9]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sumsales#27]
Arguments: hashpartitioning(i_category#18, 5), ENSURE_REQUIREMENTS, [id=#225]

(65) Sort [codegen id : 81]
Input [9]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sumsales#27]
Arguments: [i_category#18 ASC NULLS FIRST, sumsales#27 DESC NULLS LAST], false, 0

(66) Window
Input [9]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sumsales#27]
Arguments: [rank(sumsales#27) windowspecdefinition(i_category#18, sumsales#27 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#226], [i_category#18], [sumsales#27 DESC NULLS LAST]

(67) Filter [codegen id : 82]
Input [10]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sumsales#27, rk#226]
Condition : (rk#226 <= 100)

(68) TakeOrderedAndProject
Input [10]: [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sumsales#27, rk#226]
Arguments: 100, [i_category#18 ASC NULLS FIRST, i_class#17 ASC NULLS FIRST, i_brand#16 ASC NULLS FIRST, i_product_name#19 ASC NULLS FIRST, d_year#8 ASC NULLS FIRST, d_qoy#10 ASC NULLS FIRST, d_moy#9 ASC NULLS FIRST, s_store_id#12 ASC NULLS FIRST, sumsales#27 ASC NULLS FIRST, rk#226 ASC NULLS FIRST], [i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#8, d_qoy#10, d_moy#9, s_store_id#12, sumsales#27, rk#226]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (73)
+- * Project (72)
   +- * Filter (71)
      +- * ColumnarToRow (70)
         +- Scan parquet default.date_dim (69)


(69) Scan parquet default.date_dim
Output [5]: [d_date_sk#7, d_month_seq#227, d_year#8, d_moy#9, d_qoy#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int,d_year:int,d_moy:int,d_qoy:int>

(70) ColumnarToRow [codegen id : 1]
Input [5]: [d_date_sk#7, d_month_seq#227, d_year#8, d_moy#9, d_qoy#10]

(71) Filter [codegen id : 1]
Input [5]: [d_date_sk#7, d_month_seq#227, d_year#8, d_moy#9, d_qoy#10]
Condition : ((d_month_seq#227 >= 1212) AND (d_month_seq#227 <= 1223))

(72) Project [codegen id : 1]
Output [4]: [d_date_sk#7, d_year#8, d_moy#9, d_qoy#10]
Input [5]: [d_date_sk#7, d_month_seq#227, d_year#8, d_moy#9, d_qoy#10]

(73) BroadcastExchange
Input [4]: [d_date_sk#7, d_year#8, d_moy#9, d_qoy#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#228]


