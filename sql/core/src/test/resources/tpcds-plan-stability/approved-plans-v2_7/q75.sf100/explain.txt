== Physical Plan ==
TakeOrderedAndProject (64)
+- * Project (63)
   +- * SortMergeJoin Inner (62)
      :- * Sort (59)
      :  +- Exchange (58)
      :     +- * Filter (57)
      :        +- * HashAggregate (56)
      :           +- Exchange (55)
      :              +- * HashAggregate (54)
      :                 +- * HashAggregate (53)
      :                    +- Exchange (52)
      :                       +- * HashAggregate (51)
      :                          +- Union (50)
      :                             :- * Project (19)
      :                             :  +- * SortMergeJoin LeftOuter (18)
      :                             :     :- * Sort (15)
      :                             :     :  +- Exchange (14)
      :                             :     :     +- * Project (13)
      :                             :     :        +- * BroadcastHashJoin Inner BuildRight (12)
      :                             :     :           :- * Project (10)
      :                             :     :           :  +- * BroadcastHashJoin Inner BuildRight (9)
      :                             :     :           :     :- * Filter (3)
      :                             :     :           :     :  +- * ColumnarToRow (2)
      :                             :     :           :     :     +- Scan parquet spark_catalog.default.catalog_sales (1)
      :                             :     :           :     +- BroadcastExchange (8)
      :                             :     :           :        +- * Project (7)
      :                             :     :           :           +- * Filter (6)
      :                             :     :           :              +- * ColumnarToRow (5)
      :                             :     :           :                 +- Scan parquet spark_catalog.default.item (4)
      :                             :     :           +- ReusedExchange (11)
      :                             :     +- * Sort (17)
      :                             :        +- ReusedExchange (16)
      :                             :- * Project (34)
      :                             :  +- * SortMergeJoin LeftOuter (33)
      :                             :     :- * Sort (30)
      :                             :     :  +- Exchange (29)
      :                             :     :     +- * Project (28)
      :                             :     :        +- * BroadcastHashJoin Inner BuildRight (27)
      :                             :     :           :- * Project (25)
      :                             :     :           :  +- * BroadcastHashJoin Inner BuildRight (24)
      :                             :     :           :     :- * Filter (22)
      :                             :     :           :     :  +- * ColumnarToRow (21)
      :                             :     :           :     :     +- Scan parquet spark_catalog.default.store_sales (20)
      :                             :     :           :     +- ReusedExchange (23)
      :                             :     :           +- ReusedExchange (26)
      :                             :     +- * Sort (32)
      :                             :        +- ReusedExchange (31)
      :                             +- * Project (49)
      :                                +- * SortMergeJoin LeftOuter (48)
      :                                   :- * Sort (45)
      :                                   :  +- Exchange (44)
      :                                   :     +- * Project (43)
      :                                   :        +- * BroadcastHashJoin Inner BuildRight (42)
      :                                   :           :- * Project (40)
      :                                   :           :  +- * BroadcastHashJoin Inner BuildRight (39)
      :                                   :           :     :- * Filter (37)
      :                                   :           :     :  +- * ColumnarToRow (36)
      :                                   :           :     :     +- Scan parquet spark_catalog.default.web_sales (35)
      :                                   :           :     +- ReusedExchange (38)
      :                                   :           +- ReusedExchange (41)
      :                                   +- * Sort (47)
      :                                      +- ReusedExchange (46)
      +- * Sort (61)
         +- ReusedExchange (60)


(1) Scan parquet spark_catalog.default.catalog_sales
Output [5]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_order_number:int,cs_quantity:int,cs_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [5]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5]

(3) Filter [codegen id : 3]
Input [5]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5]
Condition : isnotnull(cs_item_sk#1)

(4) Scan parquet spark_catalog.default.item
Output [6]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, i_category#11, i_manufact_id#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Books                                             ), IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id), IsNotNull(i_manufact_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int,i_category:string,i_manufact_id:int>

(5) ColumnarToRow [codegen id : 1]
Input [6]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, i_category#11, i_manufact_id#12]

(6) Filter [codegen id : 1]
Input [6]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, i_category#11, i_manufact_id#12]
Condition : ((((((((((isnotnull(i_category#11) AND (i_category#11 = Books                                             )) AND isnotnull(i_item_sk#7)) AND isnotnull(i_brand_id#8)) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10)) AND isnotnull(i_manufact_id#12)) AND might_contain(Subquery scalar-subquery#13, [id=#14], xxhash64(i_brand_id#8, 42), false)) AND might_contain(Subquery scalar-subquery#15, [id=#16], xxhash64(i_class_id#9, 42), false)) AND might_contain(Subquery scalar-subquery#17, [id=#18], xxhash64(i_category_id#10, 42), false)) AND might_contain(Subquery scalar-subquery#19, [id=#20], xxhash64(i_manufact_id#12, 42), false))

(7) Project [codegen id : 1]
Output [5]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12]
Input [6]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, i_category#11, i_manufact_id#12]

(8) BroadcastExchange
Input [5]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join type: Inner
Join condition: None

(10) Project [codegen id : 3]
Output [9]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12]
Input [10]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12]

(11) ReusedExchange [Reuses operator id: 68]
Output [2]: [d_date_sk#21, d_year#22]

(12) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#21]
Join type: Inner
Join condition: None

(13) Project [codegen id : 3]
Output [9]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, d_year#22]
Input [11]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, d_date_sk#21, d_year#22]

(14) Exchange
Input [9]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, d_year#22]
Arguments: hashpartitioning(cs_order_number#2, cs_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(15) Sort [codegen id : 4]
Input [9]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, d_year#22]
Arguments: [cs_order_number#2 ASC NULLS FIRST, cs_item_sk#1 ASC NULLS FIRST], false, 0

(16) ReusedExchange [Reuses operator id: 88]
Output [4]: [cr_item_sk#23, cr_order_number#24, cr_return_quantity#25, cr_return_amount#26]

(17) Sort [codegen id : 6]
Input [4]: [cr_item_sk#23, cr_order_number#24, cr_return_quantity#25, cr_return_amount#26]
Arguments: [cr_order_number#24 ASC NULLS FIRST, cr_item_sk#23 ASC NULLS FIRST], false, 0

(18) SortMergeJoin [codegen id : 7]
Left keys [2]: [cs_order_number#2, cs_item_sk#1]
Right keys [2]: [cr_order_number#24, cr_item_sk#23]
Join type: LeftOuter
Join condition: None

(19) Project [codegen id : 7]
Output [7]: [d_year#22, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, (cs_quantity#3 - coalesce(cr_return_quantity#25, 0)) AS sales_cnt#27, (cs_ext_sales_price#4 - coalesce(cr_return_amount#26, 0.00)) AS sales_amt#28]
Input [13]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, d_year#22, cr_item_sk#23, cr_order_number#24, cr_return_quantity#25, cr_return_amount#26]

(20) Scan parquet spark_catalog.default.store_sales
Output [5]: [ss_item_sk#29, ss_ticket_number#30, ss_quantity#31, ss_ext_sales_price#32, ss_sold_date_sk#33]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#33), dynamicpruningexpression(ss_sold_date_sk#33 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ticket_number:int,ss_quantity:int,ss_ext_sales_price:decimal(7,2)>

(21) ColumnarToRow [codegen id : 10]
Input [5]: [ss_item_sk#29, ss_ticket_number#30, ss_quantity#31, ss_ext_sales_price#32, ss_sold_date_sk#33]

(22) Filter [codegen id : 10]
Input [5]: [ss_item_sk#29, ss_ticket_number#30, ss_quantity#31, ss_ext_sales_price#32, ss_sold_date_sk#33]
Condition : isnotnull(ss_item_sk#29)

(23) ReusedExchange [Reuses operator id: 8]
Output [5]: [i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37, i_manufact_id#38]

(24) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_item_sk#29]
Right keys [1]: [i_item_sk#34]
Join type: Inner
Join condition: None

(25) Project [codegen id : 10]
Output [9]: [ss_item_sk#29, ss_ticket_number#30, ss_quantity#31, ss_ext_sales_price#32, ss_sold_date_sk#33, i_brand_id#35, i_class_id#36, i_category_id#37, i_manufact_id#38]
Input [10]: [ss_item_sk#29, ss_ticket_number#30, ss_quantity#31, ss_ext_sales_price#32, ss_sold_date_sk#33, i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37, i_manufact_id#38]

(26) ReusedExchange [Reuses operator id: 68]
Output [2]: [d_date_sk#39, d_year#40]

(27) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#33]
Right keys [1]: [d_date_sk#39]
Join type: Inner
Join condition: None

(28) Project [codegen id : 10]
Output [9]: [ss_item_sk#29, ss_ticket_number#30, ss_quantity#31, ss_ext_sales_price#32, i_brand_id#35, i_class_id#36, i_category_id#37, i_manufact_id#38, d_year#40]
Input [11]: [ss_item_sk#29, ss_ticket_number#30, ss_quantity#31, ss_ext_sales_price#32, ss_sold_date_sk#33, i_brand_id#35, i_class_id#36, i_category_id#37, i_manufact_id#38, d_date_sk#39, d_year#40]

(29) Exchange
Input [9]: [ss_item_sk#29, ss_ticket_number#30, ss_quantity#31, ss_ext_sales_price#32, i_brand_id#35, i_class_id#36, i_category_id#37, i_manufact_id#38, d_year#40]
Arguments: hashpartitioning(ss_ticket_number#30, ss_item_sk#29, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(30) Sort [codegen id : 11]
Input [9]: [ss_item_sk#29, ss_ticket_number#30, ss_quantity#31, ss_ext_sales_price#32, i_brand_id#35, i_class_id#36, i_category_id#37, i_manufact_id#38, d_year#40]
Arguments: [ss_ticket_number#30 ASC NULLS FIRST, ss_item_sk#29 ASC NULLS FIRST], false, 0

(31) ReusedExchange [Reuses operator id: 107]
Output [4]: [sr_item_sk#41, sr_ticket_number#42, sr_return_quantity#43, sr_return_amt#44]

(32) Sort [codegen id : 13]
Input [4]: [sr_item_sk#41, sr_ticket_number#42, sr_return_quantity#43, sr_return_amt#44]
Arguments: [sr_ticket_number#42 ASC NULLS FIRST, sr_item_sk#41 ASC NULLS FIRST], false, 0

(33) SortMergeJoin [codegen id : 14]
Left keys [2]: [ss_ticket_number#30, ss_item_sk#29]
Right keys [2]: [sr_ticket_number#42, sr_item_sk#41]
Join type: LeftOuter
Join condition: None

(34) Project [codegen id : 14]
Output [7]: [d_year#40, i_brand_id#35, i_class_id#36, i_category_id#37, i_manufact_id#38, (ss_quantity#31 - coalesce(sr_return_quantity#43, 0)) AS sales_cnt#45, (ss_ext_sales_price#32 - coalesce(sr_return_amt#44, 0.00)) AS sales_amt#46]
Input [13]: [ss_item_sk#29, ss_ticket_number#30, ss_quantity#31, ss_ext_sales_price#32, i_brand_id#35, i_class_id#36, i_category_id#37, i_manufact_id#38, d_year#40, sr_item_sk#41, sr_ticket_number#42, sr_return_quantity#43, sr_return_amt#44]

(35) Scan parquet spark_catalog.default.web_sales
Output [5]: [ws_item_sk#47, ws_order_number#48, ws_quantity#49, ws_ext_sales_price#50, ws_sold_date_sk#51]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#51), dynamicpruningexpression(ws_sold_date_sk#51 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_order_number:int,ws_quantity:int,ws_ext_sales_price:decimal(7,2)>

(36) ColumnarToRow [codegen id : 17]
Input [5]: [ws_item_sk#47, ws_order_number#48, ws_quantity#49, ws_ext_sales_price#50, ws_sold_date_sk#51]

(37) Filter [codegen id : 17]
Input [5]: [ws_item_sk#47, ws_order_number#48, ws_quantity#49, ws_ext_sales_price#50, ws_sold_date_sk#51]
Condition : isnotnull(ws_item_sk#47)

(38) ReusedExchange [Reuses operator id: 8]
Output [5]: [i_item_sk#52, i_brand_id#53, i_class_id#54, i_category_id#55, i_manufact_id#56]

(39) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_item_sk#47]
Right keys [1]: [i_item_sk#52]
Join type: Inner
Join condition: None

(40) Project [codegen id : 17]
Output [9]: [ws_item_sk#47, ws_order_number#48, ws_quantity#49, ws_ext_sales_price#50, ws_sold_date_sk#51, i_brand_id#53, i_class_id#54, i_category_id#55, i_manufact_id#56]
Input [10]: [ws_item_sk#47, ws_order_number#48, ws_quantity#49, ws_ext_sales_price#50, ws_sold_date_sk#51, i_item_sk#52, i_brand_id#53, i_class_id#54, i_category_id#55, i_manufact_id#56]

(41) ReusedExchange [Reuses operator id: 68]
Output [2]: [d_date_sk#57, d_year#58]

(42) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_sold_date_sk#51]
Right keys [1]: [d_date_sk#57]
Join type: Inner
Join condition: None

(43) Project [codegen id : 17]
Output [9]: [ws_item_sk#47, ws_order_number#48, ws_quantity#49, ws_ext_sales_price#50, i_brand_id#53, i_class_id#54, i_category_id#55, i_manufact_id#56, d_year#58]
Input [11]: [ws_item_sk#47, ws_order_number#48, ws_quantity#49, ws_ext_sales_price#50, ws_sold_date_sk#51, i_brand_id#53, i_class_id#54, i_category_id#55, i_manufact_id#56, d_date_sk#57, d_year#58]

(44) Exchange
Input [9]: [ws_item_sk#47, ws_order_number#48, ws_quantity#49, ws_ext_sales_price#50, i_brand_id#53, i_class_id#54, i_category_id#55, i_manufact_id#56, d_year#58]
Arguments: hashpartitioning(ws_order_number#48, ws_item_sk#47, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(45) Sort [codegen id : 18]
Input [9]: [ws_item_sk#47, ws_order_number#48, ws_quantity#49, ws_ext_sales_price#50, i_brand_id#53, i_class_id#54, i_category_id#55, i_manufact_id#56, d_year#58]
Arguments: [ws_order_number#48 ASC NULLS FIRST, ws_item_sk#47 ASC NULLS FIRST], false, 0

(46) ReusedExchange [Reuses operator id: 126]
Output [4]: [wr_item_sk#59, wr_order_number#60, wr_return_quantity#61, wr_return_amt#62]

(47) Sort [codegen id : 20]
Input [4]: [wr_item_sk#59, wr_order_number#60, wr_return_quantity#61, wr_return_amt#62]
Arguments: [wr_order_number#60 ASC NULLS FIRST, wr_item_sk#59 ASC NULLS FIRST], false, 0

(48) SortMergeJoin [codegen id : 21]
Left keys [2]: [ws_order_number#48, ws_item_sk#47]
Right keys [2]: [wr_order_number#60, wr_item_sk#59]
Join type: LeftOuter
Join condition: None

(49) Project [codegen id : 21]
Output [7]: [d_year#58, i_brand_id#53, i_class_id#54, i_category_id#55, i_manufact_id#56, (ws_quantity#49 - coalesce(wr_return_quantity#61, 0)) AS sales_cnt#63, (ws_ext_sales_price#50 - coalesce(wr_return_amt#62, 0.00)) AS sales_amt#64]
Input [13]: [ws_item_sk#47, ws_order_number#48, ws_quantity#49, ws_ext_sales_price#50, i_brand_id#53, i_class_id#54, i_category_id#55, i_manufact_id#56, d_year#58, wr_item_sk#59, wr_order_number#60, wr_return_quantity#61, wr_return_amt#62]

(50) Union

(51) HashAggregate [codegen id : 22]
Input [7]: [d_year#22, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#27, sales_amt#28]
Keys [7]: [d_year#22, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#27, sales_amt#28]
Functions: []
Aggregate Attributes: []
Results [7]: [d_year#22, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#27, sales_amt#28]

(52) Exchange
Input [7]: [d_year#22, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#27, sales_amt#28]
Arguments: hashpartitioning(d_year#22, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#27, sales_amt#28, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(53) HashAggregate [codegen id : 23]
Input [7]: [d_year#22, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#27, sales_amt#28]
Keys [7]: [d_year#22, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#27, sales_amt#28]
Functions: []
Aggregate Attributes: []
Results [7]: [d_year#22, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#27, sales_amt#28]

(54) HashAggregate [codegen id : 23]
Input [7]: [d_year#22, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#27, sales_amt#28]
Keys [5]: [d_year#22, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12]
Functions [2]: [partial_sum(sales_cnt#27), partial_sum(UnscaledValue(sales_amt#28))]
Aggregate Attributes [2]: [sum#65, sum#66]
Results [7]: [d_year#22, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sum#67, sum#68]

(55) Exchange
Input [7]: [d_year#22, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sum#67, sum#68]
Arguments: hashpartitioning(d_year#22, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(56) HashAggregate [codegen id : 24]
Input [7]: [d_year#22, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sum#67, sum#68]
Keys [5]: [d_year#22, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12]
Functions [2]: [sum(sales_cnt#27), sum(UnscaledValue(sales_amt#28))]
Aggregate Attributes [2]: [sum(sales_cnt#27)#69, sum(UnscaledValue(sales_amt#28))#70]
Results [7]: [d_year#22, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sum(sales_cnt#27)#69 AS sales_cnt#71, MakeDecimal(sum(UnscaledValue(sales_amt#28))#70,18,2) AS sales_amt#72]

(57) Filter [codegen id : 24]
Input [7]: [d_year#22, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#71, sales_amt#72]
Condition : isnotnull(sales_cnt#71)

(58) Exchange
Input [7]: [d_year#22, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#71, sales_amt#72]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(59) Sort [codegen id : 25]
Input [7]: [d_year#22, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#71, sales_amt#72]
Arguments: [i_brand_id#8 ASC NULLS FIRST, i_class_id#9 ASC NULLS FIRST, i_category_id#10 ASC NULLS FIRST, i_manufact_id#12 ASC NULLS FIRST], false, 0

(60) ReusedExchange [Reuses operator id: 138]
Output [7]: [d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, sales_cnt#78, sales_amt#79]

(61) Sort [codegen id : 50]
Input [7]: [d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, sales_cnt#78, sales_amt#79]
Arguments: [i_brand_id#74 ASC NULLS FIRST, i_class_id#75 ASC NULLS FIRST, i_category_id#76 ASC NULLS FIRST, i_manufact_id#77 ASC NULLS FIRST], false, 0

(62) SortMergeJoin [codegen id : 51]
Left keys [4]: [i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12]
Right keys [4]: [i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77]
Join type: Inner
Join condition: ((cast(sales_cnt#71 as decimal(17,2)) / cast(sales_cnt#78 as decimal(17,2))) < 0.90000000000000000000)

(63) Project [codegen id : 51]
Output [10]: [d_year#73 AS prev_year#80, d_year#22 AS year#81, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#78 AS prev_yr_cnt#82, sales_cnt#71 AS curr_yr_cnt#83, (sales_cnt#71 - sales_cnt#78) AS sales_cnt_diff#84, (sales_amt#72 - sales_amt#79) AS sales_amt_diff#85]
Input [14]: [d_year#22, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#71, sales_amt#72, d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, sales_cnt#78, sales_amt#79]

(64) TakeOrderedAndProject
Input [10]: [prev_year#80, year#81, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, prev_yr_cnt#82, curr_yr_cnt#83, sales_cnt_diff#84, sales_amt_diff#85]
Arguments: 100, [sales_cnt_diff#84 ASC NULLS FIRST, sales_amt_diff#85 ASC NULLS FIRST], [prev_year#80, year#81, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, prev_yr_cnt#82, curr_yr_cnt#83, sales_cnt_diff#84, sales_amt_diff#85]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (68)
+- * Filter (67)
   +- * ColumnarToRow (66)
      +- Scan parquet spark_catalog.default.date_dim (65)


(65) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#21, d_year#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(66) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#21, d_year#22]

(67) Filter [codegen id : 1]
Input [2]: [d_date_sk#21, d_year#22]
Condition : ((isnotnull(d_year#22) AND (d_year#22 = 2002)) AND isnotnull(d_date_sk#21))

(68) BroadcastExchange
Input [2]: [d_date_sk#21, d_year#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=8]

Subquery:2 Hosting operator id = 6 Hosting Expression = Subquery scalar-subquery#13, [id=#14]
ObjectHashAggregate (141)
+- Exchange (140)
   +- ObjectHashAggregate (139)
      +- Exchange (138)
         +- * Filter (137)
            +- * HashAggregate (136)
               +- Exchange (135)
                  +- * HashAggregate (134)
                     +- * HashAggregate (133)
                        +- Exchange (132)
                           +- * HashAggregate (131)
                              +- Union (130)
                                 :- * Project (91)
                                 :  +- * SortMergeJoin LeftOuter (90)
                                 :     :- * Sort (83)
                                 :     :  +- Exchange (82)
                                 :     :     +- * Project (81)
                                 :     :        +- * BroadcastHashJoin Inner BuildRight (80)
                                 :     :           :- * Project (78)
                                 :     :           :  +- * BroadcastHashJoin Inner BuildRight (77)
                                 :     :           :     :- * Filter (71)
                                 :     :           :     :  +- * ColumnarToRow (70)
                                 :     :           :     :     +- Scan parquet spark_catalog.default.catalog_sales (69)
                                 :     :           :     +- BroadcastExchange (76)
                                 :     :           :        +- * Project (75)
                                 :     :           :           +- * Filter (74)
                                 :     :           :              +- * ColumnarToRow (73)
                                 :     :           :                 +- Scan parquet spark_catalog.default.item (72)
                                 :     :           +- ReusedExchange (79)
                                 :     +- * Sort (89)
                                 :        +- Exchange (88)
                                 :           +- * Project (87)
                                 :              +- * Filter (86)
                                 :                 +- * ColumnarToRow (85)
                                 :                    +- Scan parquet spark_catalog.default.catalog_returns (84)
                                 :- * Project (110)
                                 :  +- * SortMergeJoin LeftOuter (109)
                                 :     :- * Sort (102)
                                 :     :  +- Exchange (101)
                                 :     :     +- * Project (100)
                                 :     :        +- * BroadcastHashJoin Inner BuildRight (99)
                                 :     :           :- * Project (97)
                                 :     :           :  +- * BroadcastHashJoin Inner BuildRight (96)
                                 :     :           :     :- * Filter (94)
                                 :     :           :     :  +- * ColumnarToRow (93)
                                 :     :           :     :     +- Scan parquet spark_catalog.default.store_sales (92)
                                 :     :           :     +- ReusedExchange (95)
                                 :     :           +- ReusedExchange (98)
                                 :     +- * Sort (108)
                                 :        +- Exchange (107)
                                 :           +- * Project (106)
                                 :              +- * Filter (105)
                                 :                 +- * ColumnarToRow (104)
                                 :                    +- Scan parquet spark_catalog.default.store_returns (103)
                                 +- * Project (129)
                                    +- * SortMergeJoin LeftOuter (128)
                                       :- * Sort (121)
                                       :  +- Exchange (120)
                                       :     +- * Project (119)
                                       :        +- * BroadcastHashJoin Inner BuildRight (118)
                                       :           :- * Project (116)
                                       :           :  +- * BroadcastHashJoin Inner BuildRight (115)
                                       :           :     :- * Filter (113)
                                       :           :     :  +- * ColumnarToRow (112)
                                       :           :     :     +- Scan parquet spark_catalog.default.web_sales (111)
                                       :           :     +- ReusedExchange (114)
                                       :           +- ReusedExchange (117)
                                       +- * Sort (127)
                                          +- Exchange (126)
                                             +- * Project (125)
                                                +- * Filter (124)
                                                   +- * ColumnarToRow (123)
                                                      +- Scan parquet spark_catalog.default.web_returns (122)


(69) Scan parquet spark_catalog.default.catalog_sales
Output [5]: [cs_item_sk#86, cs_order_number#87, cs_quantity#88, cs_ext_sales_price#89, cs_sold_date_sk#90]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#90), dynamicpruningexpression(cs_sold_date_sk#90 IN dynamicpruning#91)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_order_number:int,cs_quantity:int,cs_ext_sales_price:decimal(7,2)>

(70) ColumnarToRow [codegen id : 3]
Input [5]: [cs_item_sk#86, cs_order_number#87, cs_quantity#88, cs_ext_sales_price#89, cs_sold_date_sk#90]

(71) Filter [codegen id : 3]
Input [5]: [cs_item_sk#86, cs_order_number#87, cs_quantity#88, cs_ext_sales_price#89, cs_sold_date_sk#90]
Condition : isnotnull(cs_item_sk#86)

(72) Scan parquet spark_catalog.default.item
Output [6]: [i_item_sk#92, i_brand_id#74, i_class_id#75, i_category_id#76, i_category#93, i_manufact_id#77]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Books                                             ), IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id), IsNotNull(i_manufact_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int,i_category:string,i_manufact_id:int>

(73) ColumnarToRow [codegen id : 1]
Input [6]: [i_item_sk#92, i_brand_id#74, i_class_id#75, i_category_id#76, i_category#93, i_manufact_id#77]

(74) Filter [codegen id : 1]
Input [6]: [i_item_sk#92, i_brand_id#74, i_class_id#75, i_category_id#76, i_category#93, i_manufact_id#77]
Condition : ((((((isnotnull(i_category#93) AND (i_category#93 = Books                                             )) AND isnotnull(i_item_sk#92)) AND isnotnull(i_brand_id#74)) AND isnotnull(i_class_id#75)) AND isnotnull(i_category_id#76)) AND isnotnull(i_manufact_id#77))

(75) Project [codegen id : 1]
Output [5]: [i_item_sk#92, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77]
Input [6]: [i_item_sk#92, i_brand_id#74, i_class_id#75, i_category_id#76, i_category#93, i_manufact_id#77]

(76) BroadcastExchange
Input [5]: [i_item_sk#92, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

(77) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_item_sk#86]
Right keys [1]: [i_item_sk#92]
Join type: Inner
Join condition: None

(78) Project [codegen id : 3]
Output [9]: [cs_item_sk#86, cs_order_number#87, cs_quantity#88, cs_ext_sales_price#89, cs_sold_date_sk#90, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77]
Input [10]: [cs_item_sk#86, cs_order_number#87, cs_quantity#88, cs_ext_sales_price#89, cs_sold_date_sk#90, i_item_sk#92, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77]

(79) ReusedExchange [Reuses operator id: 145]
Output [2]: [d_date_sk#94, d_year#73]

(80) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#90]
Right keys [1]: [d_date_sk#94]
Join type: Inner
Join condition: None

(81) Project [codegen id : 3]
Output [9]: [cs_item_sk#86, cs_order_number#87, cs_quantity#88, cs_ext_sales_price#89, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, d_year#73]
Input [11]: [cs_item_sk#86, cs_order_number#87, cs_quantity#88, cs_ext_sales_price#89, cs_sold_date_sk#90, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, d_date_sk#94, d_year#73]

(82) Exchange
Input [9]: [cs_item_sk#86, cs_order_number#87, cs_quantity#88, cs_ext_sales_price#89, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, d_year#73]
Arguments: hashpartitioning(cs_order_number#87, cs_item_sk#86, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(83) Sort [codegen id : 4]
Input [9]: [cs_item_sk#86, cs_order_number#87, cs_quantity#88, cs_ext_sales_price#89, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, d_year#73]
Arguments: [cs_order_number#87 ASC NULLS FIRST, cs_item_sk#86 ASC NULLS FIRST], false, 0

(84) Scan parquet spark_catalog.default.catalog_returns
Output [5]: [cr_item_sk#95, cr_order_number#96, cr_return_quantity#97, cr_return_amount#98, cr_returned_date_sk#99]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_quantity:int,cr_return_amount:decimal(7,2)>

(85) ColumnarToRow [codegen id : 5]
Input [5]: [cr_item_sk#95, cr_order_number#96, cr_return_quantity#97, cr_return_amount#98, cr_returned_date_sk#99]

(86) Filter [codegen id : 5]
Input [5]: [cr_item_sk#95, cr_order_number#96, cr_return_quantity#97, cr_return_amount#98, cr_returned_date_sk#99]
Condition : (isnotnull(cr_order_number#96) AND isnotnull(cr_item_sk#95))

(87) Project [codegen id : 5]
Output [4]: [cr_item_sk#95, cr_order_number#96, cr_return_quantity#97, cr_return_amount#98]
Input [5]: [cr_item_sk#95, cr_order_number#96, cr_return_quantity#97, cr_return_amount#98, cr_returned_date_sk#99]

(88) Exchange
Input [4]: [cr_item_sk#95, cr_order_number#96, cr_return_quantity#97, cr_return_amount#98]
Arguments: hashpartitioning(cr_order_number#96, cr_item_sk#95, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(89) Sort [codegen id : 6]
Input [4]: [cr_item_sk#95, cr_order_number#96, cr_return_quantity#97, cr_return_amount#98]
Arguments: [cr_order_number#96 ASC NULLS FIRST, cr_item_sk#95 ASC NULLS FIRST], false, 0

(90) SortMergeJoin [codegen id : 7]
Left keys [2]: [cs_order_number#87, cs_item_sk#86]
Right keys [2]: [cr_order_number#96, cr_item_sk#95]
Join type: LeftOuter
Join condition: None

(91) Project [codegen id : 7]
Output [7]: [d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, (cs_quantity#88 - coalesce(cr_return_quantity#97, 0)) AS sales_cnt#27, (cs_ext_sales_price#89 - coalesce(cr_return_amount#98, 0.00)) AS sales_amt#28]
Input [13]: [cs_item_sk#86, cs_order_number#87, cs_quantity#88, cs_ext_sales_price#89, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, d_year#73, cr_item_sk#95, cr_order_number#96, cr_return_quantity#97, cr_return_amount#98]

(92) Scan parquet spark_catalog.default.store_sales
Output [5]: [ss_item_sk#100, ss_ticket_number#101, ss_quantity#102, ss_ext_sales_price#103, ss_sold_date_sk#104]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#104), dynamicpruningexpression(ss_sold_date_sk#104 IN dynamicpruning#91)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ticket_number:int,ss_quantity:int,ss_ext_sales_price:decimal(7,2)>

(93) ColumnarToRow [codegen id : 10]
Input [5]: [ss_item_sk#100, ss_ticket_number#101, ss_quantity#102, ss_ext_sales_price#103, ss_sold_date_sk#104]

(94) Filter [codegen id : 10]
Input [5]: [ss_item_sk#100, ss_ticket_number#101, ss_quantity#102, ss_ext_sales_price#103, ss_sold_date_sk#104]
Condition : isnotnull(ss_item_sk#100)

(95) ReusedExchange [Reuses operator id: 76]
Output [5]: [i_item_sk#105, i_brand_id#106, i_class_id#107, i_category_id#108, i_manufact_id#109]

(96) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_item_sk#100]
Right keys [1]: [i_item_sk#105]
Join type: Inner
Join condition: None

(97) Project [codegen id : 10]
Output [9]: [ss_item_sk#100, ss_ticket_number#101, ss_quantity#102, ss_ext_sales_price#103, ss_sold_date_sk#104, i_brand_id#106, i_class_id#107, i_category_id#108, i_manufact_id#109]
Input [10]: [ss_item_sk#100, ss_ticket_number#101, ss_quantity#102, ss_ext_sales_price#103, ss_sold_date_sk#104, i_item_sk#105, i_brand_id#106, i_class_id#107, i_category_id#108, i_manufact_id#109]

(98) ReusedExchange [Reuses operator id: 145]
Output [2]: [d_date_sk#110, d_year#111]

(99) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#104]
Right keys [1]: [d_date_sk#110]
Join type: Inner
Join condition: None

(100) Project [codegen id : 10]
Output [9]: [ss_item_sk#100, ss_ticket_number#101, ss_quantity#102, ss_ext_sales_price#103, i_brand_id#106, i_class_id#107, i_category_id#108, i_manufact_id#109, d_year#111]
Input [11]: [ss_item_sk#100, ss_ticket_number#101, ss_quantity#102, ss_ext_sales_price#103, ss_sold_date_sk#104, i_brand_id#106, i_class_id#107, i_category_id#108, i_manufact_id#109, d_date_sk#110, d_year#111]

(101) Exchange
Input [9]: [ss_item_sk#100, ss_ticket_number#101, ss_quantity#102, ss_ext_sales_price#103, i_brand_id#106, i_class_id#107, i_category_id#108, i_manufact_id#109, d_year#111]
Arguments: hashpartitioning(ss_ticket_number#101, ss_item_sk#100, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(102) Sort [codegen id : 11]
Input [9]: [ss_item_sk#100, ss_ticket_number#101, ss_quantity#102, ss_ext_sales_price#103, i_brand_id#106, i_class_id#107, i_category_id#108, i_manufact_id#109, d_year#111]
Arguments: [ss_ticket_number#101 ASC NULLS FIRST, ss_item_sk#100 ASC NULLS FIRST], false, 0

(103) Scan parquet spark_catalog.default.store_returns
Output [5]: [sr_item_sk#112, sr_ticket_number#113, sr_return_quantity#114, sr_return_amt#115, sr_returned_date_sk#116]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int,sr_return_quantity:int,sr_return_amt:decimal(7,2)>

(104) ColumnarToRow [codegen id : 12]
Input [5]: [sr_item_sk#112, sr_ticket_number#113, sr_return_quantity#114, sr_return_amt#115, sr_returned_date_sk#116]

(105) Filter [codegen id : 12]
Input [5]: [sr_item_sk#112, sr_ticket_number#113, sr_return_quantity#114, sr_return_amt#115, sr_returned_date_sk#116]
Condition : (isnotnull(sr_ticket_number#113) AND isnotnull(sr_item_sk#112))

(106) Project [codegen id : 12]
Output [4]: [sr_item_sk#112, sr_ticket_number#113, sr_return_quantity#114, sr_return_amt#115]
Input [5]: [sr_item_sk#112, sr_ticket_number#113, sr_return_quantity#114, sr_return_amt#115, sr_returned_date_sk#116]

(107) Exchange
Input [4]: [sr_item_sk#112, sr_ticket_number#113, sr_return_quantity#114, sr_return_amt#115]
Arguments: hashpartitioning(sr_ticket_number#113, sr_item_sk#112, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(108) Sort [codegen id : 13]
Input [4]: [sr_item_sk#112, sr_ticket_number#113, sr_return_quantity#114, sr_return_amt#115]
Arguments: [sr_ticket_number#113 ASC NULLS FIRST, sr_item_sk#112 ASC NULLS FIRST], false, 0

(109) SortMergeJoin [codegen id : 14]
Left keys [2]: [ss_ticket_number#101, ss_item_sk#100]
Right keys [2]: [sr_ticket_number#113, sr_item_sk#112]
Join type: LeftOuter
Join condition: None

(110) Project [codegen id : 14]
Output [7]: [d_year#111, i_brand_id#106, i_class_id#107, i_category_id#108, i_manufact_id#109, (ss_quantity#102 - coalesce(sr_return_quantity#114, 0)) AS sales_cnt#45, (ss_ext_sales_price#103 - coalesce(sr_return_amt#115, 0.00)) AS sales_amt#46]
Input [13]: [ss_item_sk#100, ss_ticket_number#101, ss_quantity#102, ss_ext_sales_price#103, i_brand_id#106, i_class_id#107, i_category_id#108, i_manufact_id#109, d_year#111, sr_item_sk#112, sr_ticket_number#113, sr_return_quantity#114, sr_return_amt#115]

(111) Scan parquet spark_catalog.default.web_sales
Output [5]: [ws_item_sk#117, ws_order_number#118, ws_quantity#119, ws_ext_sales_price#120, ws_sold_date_sk#121]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#121), dynamicpruningexpression(ws_sold_date_sk#121 IN dynamicpruning#91)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_order_number:int,ws_quantity:int,ws_ext_sales_price:decimal(7,2)>

(112) ColumnarToRow [codegen id : 17]
Input [5]: [ws_item_sk#117, ws_order_number#118, ws_quantity#119, ws_ext_sales_price#120, ws_sold_date_sk#121]

(113) Filter [codegen id : 17]
Input [5]: [ws_item_sk#117, ws_order_number#118, ws_quantity#119, ws_ext_sales_price#120, ws_sold_date_sk#121]
Condition : isnotnull(ws_item_sk#117)

(114) ReusedExchange [Reuses operator id: 76]
Output [5]: [i_item_sk#122, i_brand_id#123, i_class_id#124, i_category_id#125, i_manufact_id#126]

(115) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_item_sk#117]
Right keys [1]: [i_item_sk#122]
Join type: Inner
Join condition: None

(116) Project [codegen id : 17]
Output [9]: [ws_item_sk#117, ws_order_number#118, ws_quantity#119, ws_ext_sales_price#120, ws_sold_date_sk#121, i_brand_id#123, i_class_id#124, i_category_id#125, i_manufact_id#126]
Input [10]: [ws_item_sk#117, ws_order_number#118, ws_quantity#119, ws_ext_sales_price#120, ws_sold_date_sk#121, i_item_sk#122, i_brand_id#123, i_class_id#124, i_category_id#125, i_manufact_id#126]

(117) ReusedExchange [Reuses operator id: 145]
Output [2]: [d_date_sk#127, d_year#128]

(118) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_sold_date_sk#121]
Right keys [1]: [d_date_sk#127]
Join type: Inner
Join condition: None

(119) Project [codegen id : 17]
Output [9]: [ws_item_sk#117, ws_order_number#118, ws_quantity#119, ws_ext_sales_price#120, i_brand_id#123, i_class_id#124, i_category_id#125, i_manufact_id#126, d_year#128]
Input [11]: [ws_item_sk#117, ws_order_number#118, ws_quantity#119, ws_ext_sales_price#120, ws_sold_date_sk#121, i_brand_id#123, i_class_id#124, i_category_id#125, i_manufact_id#126, d_date_sk#127, d_year#128]

(120) Exchange
Input [9]: [ws_item_sk#117, ws_order_number#118, ws_quantity#119, ws_ext_sales_price#120, i_brand_id#123, i_class_id#124, i_category_id#125, i_manufact_id#126, d_year#128]
Arguments: hashpartitioning(ws_order_number#118, ws_item_sk#117, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(121) Sort [codegen id : 18]
Input [9]: [ws_item_sk#117, ws_order_number#118, ws_quantity#119, ws_ext_sales_price#120, i_brand_id#123, i_class_id#124, i_category_id#125, i_manufact_id#126, d_year#128]
Arguments: [ws_order_number#118 ASC NULLS FIRST, ws_item_sk#117 ASC NULLS FIRST], false, 0

(122) Scan parquet spark_catalog.default.web_returns
Output [5]: [wr_item_sk#129, wr_order_number#130, wr_return_quantity#131, wr_return_amt#132, wr_returned_date_sk#133]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_order_number), IsNotNull(wr_item_sk)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_quantity:int,wr_return_amt:decimal(7,2)>

(123) ColumnarToRow [codegen id : 19]
Input [5]: [wr_item_sk#129, wr_order_number#130, wr_return_quantity#131, wr_return_amt#132, wr_returned_date_sk#133]

(124) Filter [codegen id : 19]
Input [5]: [wr_item_sk#129, wr_order_number#130, wr_return_quantity#131, wr_return_amt#132, wr_returned_date_sk#133]
Condition : (isnotnull(wr_order_number#130) AND isnotnull(wr_item_sk#129))

(125) Project [codegen id : 19]
Output [4]: [wr_item_sk#129, wr_order_number#130, wr_return_quantity#131, wr_return_amt#132]
Input [5]: [wr_item_sk#129, wr_order_number#130, wr_return_quantity#131, wr_return_amt#132, wr_returned_date_sk#133]

(126) Exchange
Input [4]: [wr_item_sk#129, wr_order_number#130, wr_return_quantity#131, wr_return_amt#132]
Arguments: hashpartitioning(wr_order_number#130, wr_item_sk#129, 5), ENSURE_REQUIREMENTS, [plan_id=15]

(127) Sort [codegen id : 20]
Input [4]: [wr_item_sk#129, wr_order_number#130, wr_return_quantity#131, wr_return_amt#132]
Arguments: [wr_order_number#130 ASC NULLS FIRST, wr_item_sk#129 ASC NULLS FIRST], false, 0

(128) SortMergeJoin [codegen id : 21]
Left keys [2]: [ws_order_number#118, ws_item_sk#117]
Right keys [2]: [wr_order_number#130, wr_item_sk#129]
Join type: LeftOuter
Join condition: None

(129) Project [codegen id : 21]
Output [7]: [d_year#128, i_brand_id#123, i_class_id#124, i_category_id#125, i_manufact_id#126, (ws_quantity#119 - coalesce(wr_return_quantity#131, 0)) AS sales_cnt#63, (ws_ext_sales_price#120 - coalesce(wr_return_amt#132, 0.00)) AS sales_amt#64]
Input [13]: [ws_item_sk#117, ws_order_number#118, ws_quantity#119, ws_ext_sales_price#120, i_brand_id#123, i_class_id#124, i_category_id#125, i_manufact_id#126, d_year#128, wr_item_sk#129, wr_order_number#130, wr_return_quantity#131, wr_return_amt#132]

(130) Union

(131) HashAggregate [codegen id : 22]
Input [7]: [d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, sales_cnt#27, sales_amt#28]
Keys [7]: [d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, sales_cnt#27, sales_amt#28]
Functions: []
Aggregate Attributes: []
Results [7]: [d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, sales_cnt#27, sales_amt#28]

(132) Exchange
Input [7]: [d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, sales_cnt#27, sales_amt#28]
Arguments: hashpartitioning(d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, sales_cnt#27, sales_amt#28, 5), ENSURE_REQUIREMENTS, [plan_id=16]

(133) HashAggregate [codegen id : 23]
Input [7]: [d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, sales_cnt#27, sales_amt#28]
Keys [7]: [d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, sales_cnt#27, sales_amt#28]
Functions: []
Aggregate Attributes: []
Results [7]: [d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, sales_cnt#27, sales_amt#28]

(134) HashAggregate [codegen id : 23]
Input [7]: [d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, sales_cnt#27, sales_amt#28]
Keys [5]: [d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77]
Functions [2]: [partial_sum(sales_cnt#27), partial_sum(UnscaledValue(sales_amt#28))]
Aggregate Attributes [2]: [sum#65, sum#134]
Results [7]: [d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, sum#67, sum#135]

(135) Exchange
Input [7]: [d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, sum#67, sum#135]
Arguments: hashpartitioning(d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, 5), ENSURE_REQUIREMENTS, [plan_id=17]

(136) HashAggregate [codegen id : 24]
Input [7]: [d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, sum#67, sum#135]
Keys [5]: [d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77]
Functions [2]: [sum(sales_cnt#27), sum(UnscaledValue(sales_amt#28))]
Aggregate Attributes [2]: [sum(sales_cnt#27)#69, sum(UnscaledValue(sales_amt#28))#70]
Results [7]: [d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, sum(sales_cnt#27)#69 AS sales_cnt#78, MakeDecimal(sum(UnscaledValue(sales_amt#28))#70,18,2) AS sales_amt#79]

(137) Filter [codegen id : 24]
Input [7]: [d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, sales_cnt#78, sales_amt#79]
Condition : isnotnull(sales_cnt#78)

(138) Exchange
Input [7]: [d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, sales_cnt#78, sales_amt#79]
Arguments: hashpartitioning(i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, 5), ENSURE_REQUIREMENTS, [plan_id=18]

(139) ObjectHashAggregate
Input [7]: [d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, sales_cnt#78, sales_amt#79]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(i_brand_id#74, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#136]
Results [1]: [buf#137]

(140) Exchange
Input [1]: [buf#137]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=19]

(141) ObjectHashAggregate
Input [1]: [buf#137]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(i_brand_id#74, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(i_brand_id#74, 42), 1000000, 8388608, 0, 0)#138]
Results [1]: [bloom_filter_agg(xxhash64(i_brand_id#74, 42), 1000000, 8388608, 0, 0)#138 AS bloomFilter#139]

Subquery:3 Hosting operator id = 69 Hosting Expression = cs_sold_date_sk#90 IN dynamicpruning#91
BroadcastExchange (145)
+- * Filter (144)
   +- * ColumnarToRow (143)
      +- Scan parquet spark_catalog.default.date_dim (142)


(142) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#94, d_year#73]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(143) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#94, d_year#73]

(144) Filter [codegen id : 1]
Input [2]: [d_date_sk#94, d_year#73]
Condition : ((isnotnull(d_year#73) AND (d_year#73 = 2001)) AND isnotnull(d_date_sk#94))

(145) BroadcastExchange
Input [2]: [d_date_sk#94, d_year#73]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=20]

Subquery:4 Hosting operator id = 92 Hosting Expression = ss_sold_date_sk#104 IN dynamicpruning#91

Subquery:5 Hosting operator id = 111 Hosting Expression = ws_sold_date_sk#121 IN dynamicpruning#91

Subquery:6 Hosting operator id = 6 Hosting Expression = Subquery scalar-subquery#15, [id=#16]
ObjectHashAggregate (149)
+- Exchange (148)
   +- ObjectHashAggregate (147)
      +- ReusedExchange (146)


(146) ReusedExchange [Reuses operator id: 138]
Output [7]: [d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, sales_cnt#78, sales_amt#79]

(147) ObjectHashAggregate
Input [7]: [d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, sales_cnt#78, sales_amt#79]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(i_class_id#75, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#140]
Results [1]: [buf#141]

(148) Exchange
Input [1]: [buf#141]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=21]

(149) ObjectHashAggregate
Input [1]: [buf#141]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(i_class_id#75, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(i_class_id#75, 42), 1000000, 8388608, 0, 0)#142]
Results [1]: [bloom_filter_agg(xxhash64(i_class_id#75, 42), 1000000, 8388608, 0, 0)#142 AS bloomFilter#143]

Subquery:7 Hosting operator id = 6 Hosting Expression = Subquery scalar-subquery#17, [id=#18]
ObjectHashAggregate (153)
+- Exchange (152)
   +- ObjectHashAggregate (151)
      +- ReusedExchange (150)


(150) ReusedExchange [Reuses operator id: 138]
Output [7]: [d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, sales_cnt#78, sales_amt#79]

(151) ObjectHashAggregate
Input [7]: [d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, sales_cnt#78, sales_amt#79]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(i_category_id#76, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#144]
Results [1]: [buf#145]

(152) Exchange
Input [1]: [buf#145]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=22]

(153) ObjectHashAggregate
Input [1]: [buf#145]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(i_category_id#76, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(i_category_id#76, 42), 1000000, 8388608, 0, 0)#146]
Results [1]: [bloom_filter_agg(xxhash64(i_category_id#76, 42), 1000000, 8388608, 0, 0)#146 AS bloomFilter#147]

Subquery:8 Hosting operator id = 6 Hosting Expression = Subquery scalar-subquery#19, [id=#20]
ObjectHashAggregate (157)
+- Exchange (156)
   +- ObjectHashAggregate (155)
      +- ReusedExchange (154)


(154) ReusedExchange [Reuses operator id: 138]
Output [7]: [d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, sales_cnt#78, sales_amt#79]

(155) ObjectHashAggregate
Input [7]: [d_year#73, i_brand_id#74, i_class_id#75, i_category_id#76, i_manufact_id#77, sales_cnt#78, sales_amt#79]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(i_manufact_id#77, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#148]
Results [1]: [buf#149]

(156) Exchange
Input [1]: [buf#149]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=23]

(157) ObjectHashAggregate
Input [1]: [buf#149]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(i_manufact_id#77, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(i_manufact_id#77, 42), 1000000, 8388608, 0, 0)#150]
Results [1]: [bloom_filter_agg(xxhash64(i_manufact_id#77, 42), 1000000, 8388608, 0, 0)#150 AS bloomFilter#151]

Subquery:9 Hosting operator id = 20 Hosting Expression = ss_sold_date_sk#33 IN dynamicpruning#6

Subquery:10 Hosting operator id = 35 Hosting Expression = ws_sold_date_sk#51 IN dynamicpruning#6


