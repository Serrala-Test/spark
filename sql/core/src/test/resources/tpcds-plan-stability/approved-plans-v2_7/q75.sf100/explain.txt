== Physical Plan ==
TakeOrderedAndProject (153)
+- * Project (152)
   +- * SortMergeJoin Inner (151)
      :- * Sort (81)
      :  +- Exchange (80)
      :     +- * HashAggregate (79)
      :        +- Exchange (78)
      :           +- * HashAggregate (77)
      :              +- * HashAggregate (76)
      :                 +- Exchange (75)
      :                    +- * HashAggregate (74)
      :                       +- Union (73)
      :                          :- * Project (26)
      :                          :  +- SortMergeJoin LeftOuter (25)
      :                          :     :- * Sort (18)
      :                          :     :  +- Exchange (17)
      :                          :     :     +- * Project (16)
      :                          :     :        +- * BroadcastHashJoin Inner BuildRight (15)
      :                          :     :           :- * Project (10)
      :                          :     :           :  +- * BroadcastHashJoin Inner BuildLeft (9)
      :                          :     :           :     :- BroadcastExchange (4)
      :                          :     :           :     :  +- * Filter (3)
      :                          :     :           :     :     +- * ColumnarToRow (2)
      :                          :     :           :     :        +- Scan parquet default.catalog_sales (1)
      :                          :     :           :     +- * Project (8)
      :                          :     :           :        +- * Filter (7)
      :                          :     :           :           +- * ColumnarToRow (6)
      :                          :     :           :              +- Scan parquet default.item (5)
      :                          :     :           +- BroadcastExchange (14)
      :                          :     :              +- * Filter (13)
      :                          :     :                 +- * ColumnarToRow (12)
      :                          :     :                    +- Scan parquet default.date_dim (11)
      :                          :     +- * Sort (24)
      :                          :        +- Exchange (23)
      :                          :           +- * Project (22)
      :                          :              +- * Filter (21)
      :                          :                 +- * ColumnarToRow (20)
      :                          :                    +- Scan parquet default.catalog_returns (19)
      :                          :- * Project (49)
      :                          :  +- SortMergeJoin LeftOuter (48)
      :                          :     :- * Sort (41)
      :                          :     :  +- Exchange (40)
      :                          :     :     +- * Project (39)
      :                          :     :        +- * BroadcastHashJoin Inner BuildRight (38)
      :                          :     :           :- * Project (36)
      :                          :     :           :  +- * BroadcastHashJoin Inner BuildLeft (35)
      :                          :     :           :     :- BroadcastExchange (30)
      :                          :     :           :     :  +- * Filter (29)
      :                          :     :           :     :     +- * ColumnarToRow (28)
      :                          :     :           :     :        +- Scan parquet default.store_sales (27)
      :                          :     :           :     +- * Project (34)
      :                          :     :           :        +- * Filter (33)
      :                          :     :           :           +- * ColumnarToRow (32)
      :                          :     :           :              +- Scan parquet default.item (31)
      :                          :     :           +- ReusedExchange (37)
      :                          :     +- * Sort (47)
      :                          :        +- Exchange (46)
      :                          :           +- * Project (45)
      :                          :              +- * Filter (44)
      :                          :                 +- * ColumnarToRow (43)
      :                          :                    +- Scan parquet default.store_returns (42)
      :                          +- * Project (72)
      :                             +- SortMergeJoin LeftOuter (71)
      :                                :- * Sort (64)
      :                                :  +- Exchange (63)
      :                                :     +- * Project (62)
      :                                :        +- * BroadcastHashJoin Inner BuildRight (61)
      :                                :           :- * Project (59)
      :                                :           :  +- * BroadcastHashJoin Inner BuildLeft (58)
      :                                :           :     :- BroadcastExchange (53)
      :                                :           :     :  +- * Filter (52)
      :                                :           :     :     +- * ColumnarToRow (51)
      :                                :           :     :        +- Scan parquet default.web_sales (50)
      :                                :           :     +- * Project (57)
      :                                :           :        +- * Filter (56)
      :                                :           :           +- * ColumnarToRow (55)
      :                                :           :              +- Scan parquet default.item (54)
      :                                :           +- ReusedExchange (60)
      :                                +- * Sort (70)
      :                                   +- Exchange (69)
      :                                      +- * Project (68)
      :                                         +- * Filter (67)
      :                                            +- * ColumnarToRow (66)
      :                                               +- Scan parquet default.web_returns (65)
      +- * Sort (150)
         +- Exchange (149)
            +- * HashAggregate (148)
               +- Exchange (147)
                  +- * HashAggregate (146)
                     +- * HashAggregate (145)
                        +- Exchange (144)
                           +- * HashAggregate (143)
                              +- Union (142)
                                 :- * Project (103)
                                 :  +- SortMergeJoin LeftOuter (102)
                                 :     :- * Sort (99)
                                 :     :  +- Exchange (98)
                                 :     :     +- * Project (97)
                                 :     :        +- * BroadcastHashJoin Inner BuildRight (96)
                                 :     :           :- * Project (91)
                                 :     :           :  +- * BroadcastHashJoin Inner BuildLeft (90)
                                 :     :           :     :- BroadcastExchange (85)
                                 :     :           :     :  +- * Filter (84)
                                 :     :           :     :     +- * ColumnarToRow (83)
                                 :     :           :     :        +- Scan parquet default.catalog_sales (82)
                                 :     :           :     +- * Project (89)
                                 :     :           :        +- * Filter (88)
                                 :     :           :           +- * ColumnarToRow (87)
                                 :     :           :              +- Scan parquet default.item (86)
                                 :     :           +- BroadcastExchange (95)
                                 :     :              +- * Filter (94)
                                 :     :                 +- * ColumnarToRow (93)
                                 :     :                    +- Scan parquet default.date_dim (92)
                                 :     +- * Sort (101)
                                 :        +- ReusedExchange (100)
                                 :- * Project (122)
                                 :  +- SortMergeJoin LeftOuter (121)
                                 :     :- * Sort (118)
                                 :     :  +- Exchange (117)
                                 :     :     +- * Project (116)
                                 :     :        +- * BroadcastHashJoin Inner BuildRight (115)
                                 :     :           :- * Project (113)
                                 :     :           :  +- * BroadcastHashJoin Inner BuildLeft (112)
                                 :     :           :     :- BroadcastExchange (107)
                                 :     :           :     :  +- * Filter (106)
                                 :     :           :     :     +- * ColumnarToRow (105)
                                 :     :           :     :        +- Scan parquet default.store_sales (104)
                                 :     :           :     +- * Project (111)
                                 :     :           :        +- * Filter (110)
                                 :     :           :           +- * ColumnarToRow (109)
                                 :     :           :              +- Scan parquet default.item (108)
                                 :     :           +- ReusedExchange (114)
                                 :     +- * Sort (120)
                                 :        +- ReusedExchange (119)
                                 +- * Project (141)
                                    +- SortMergeJoin LeftOuter (140)
                                       :- * Sort (137)
                                       :  +- Exchange (136)
                                       :     +- * Project (135)
                                       :        +- * BroadcastHashJoin Inner BuildRight (134)
                                       :           :- * Project (132)
                                       :           :  +- * BroadcastHashJoin Inner BuildLeft (131)
                                       :           :     :- BroadcastExchange (126)
                                       :           :     :  +- * Filter (125)
                                       :           :     :     +- * ColumnarToRow (124)
                                       :           :     :        +- Scan parquet default.web_sales (123)
                                       :           :     +- * Project (130)
                                       :           :        +- * Filter (129)
                                       :           :           +- * ColumnarToRow (128)
                                       :           :              +- Scan parquet default.item (127)
                                       :           +- ReusedExchange (133)
                                       +- * Sort (139)
                                          +- ReusedExchange (138)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_order_number:int,cs_quantity:int,cs_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5]

(3) Filter [codegen id : 1]
Input [5]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5]
Condition : isnotnull(cs_item_sk#1)

(4) BroadcastExchange
Input [5]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#7]

(5) Scan parquet default.item
Output [6]: [i_item_sk#8, i_brand_id#9, i_class_id#10, i_category_id#11, i_category#12, i_manufact_id#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Books), IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id), IsNotNull(i_manufact_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int,i_category:string,i_manufact_id:int>

(6) ColumnarToRow
Input [6]: [i_item_sk#8, i_brand_id#9, i_class_id#10, i_category_id#11, i_category#12, i_manufact_id#13]

(7) Filter
Input [6]: [i_item_sk#8, i_brand_id#9, i_class_id#10, i_category_id#11, i_category#12, i_manufact_id#13]
Condition : ((((((isnotnull(i_category#12) AND (i_category#12 = Books)) AND isnotnull(i_item_sk#8)) AND isnotnull(i_brand_id#9)) AND isnotnull(i_class_id#10)) AND isnotnull(i_category_id#11)) AND isnotnull(i_manufact_id#13))

(8) Project
Output [5]: [i_item_sk#8, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13]
Input [6]: [i_item_sk#8, i_brand_id#9, i_class_id#10, i_category_id#11, i_category#12, i_manufact_id#13]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_item_sk#1]
Right keys [1]: [i_item_sk#8]
Join condition: None

(10) Project [codegen id : 3]
Output [9]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13]
Input [10]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5, i_item_sk#8, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13]

(11) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#14, d_year#15]

(13) Filter [codegen id : 2]
Input [2]: [d_date_sk#14, d_year#15]
Condition : ((isnotnull(d_year#15) AND (d_year#15 = 2002)) AND isnotnull(d_date_sk#14))

(14) BroadcastExchange
Input [2]: [d_date_sk#14, d_year#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#16]

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#14]
Join condition: None

(16) Project [codegen id : 3]
Output [9]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, d_year#15]
Input [11]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, d_date_sk#14, d_year#15]

(17) Exchange
Input [9]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, d_year#15]
Arguments: hashpartitioning(cs_order_number#2, cs_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#17]

(18) Sort [codegen id : 4]
Input [9]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, d_year#15]
Arguments: [cs_order_number#2 ASC NULLS FIRST, cs_item_sk#1 ASC NULLS FIRST], false, 0

(19) Scan parquet default.catalog_returns
Output [5]: [cr_item_sk#18, cr_order_number#19, cr_return_quantity#20, cr_return_amount#21, cr_returned_date_sk#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_quantity:int,cr_return_amount:decimal(7,2)>

(20) ColumnarToRow [codegen id : 5]
Input [5]: [cr_item_sk#18, cr_order_number#19, cr_return_quantity#20, cr_return_amount#21, cr_returned_date_sk#22]

(21) Filter [codegen id : 5]
Input [5]: [cr_item_sk#18, cr_order_number#19, cr_return_quantity#20, cr_return_amount#21, cr_returned_date_sk#22]
Condition : (isnotnull(cr_order_number#19) AND isnotnull(cr_item_sk#18))

(22) Project [codegen id : 5]
Output [4]: [cr_item_sk#18, cr_order_number#19, cr_return_quantity#20, cr_return_amount#21]
Input [5]: [cr_item_sk#18, cr_order_number#19, cr_return_quantity#20, cr_return_amount#21, cr_returned_date_sk#22]

(23) Exchange
Input [4]: [cr_item_sk#18, cr_order_number#19, cr_return_quantity#20, cr_return_amount#21]
Arguments: hashpartitioning(cr_order_number#19, cr_item_sk#18, 5), ENSURE_REQUIREMENTS, [id=#23]

(24) Sort [codegen id : 6]
Input [4]: [cr_item_sk#18, cr_order_number#19, cr_return_quantity#20, cr_return_amount#21]
Arguments: [cr_order_number#19 ASC NULLS FIRST, cr_item_sk#18 ASC NULLS FIRST], false, 0

(25) SortMergeJoin
Left keys [2]: [cs_order_number#2, cs_item_sk#1]
Right keys [2]: [cr_order_number#19, cr_item_sk#18]
Join condition: None

(26) Project [codegen id : 7]
Output [7]: [d_year#15, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, (cs_quantity#3 - coalesce(cr_return_quantity#20, 0)) AS sales_cnt#24, CheckOverflow((promote_precision(cast(cs_ext_sales_price#4 as decimal(8,2))) - promote_precision(cast(coalesce(cr_return_amount#21, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#25]
Input [13]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, d_year#15, cr_item_sk#18, cr_order_number#19, cr_return_quantity#20, cr_return_amount#21]

(27) Scan parquet default.store_sales
Output [5]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, ss_sold_date_sk#30]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#30), dynamicpruningexpression(ss_sold_date_sk#30 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ticket_number:int,ss_quantity:int,ss_ext_sales_price:decimal(7,2)>

(28) ColumnarToRow [codegen id : 8]
Input [5]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, ss_sold_date_sk#30]

(29) Filter [codegen id : 8]
Input [5]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, ss_sold_date_sk#30]
Condition : isnotnull(ss_item_sk#26)

(30) BroadcastExchange
Input [5]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, ss_sold_date_sk#30]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#31]

(31) Scan parquet default.item
Output [6]: [i_item_sk#8, i_brand_id#9, i_class_id#10, i_category_id#11, i_category#12, i_manufact_id#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Books), IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id), IsNotNull(i_manufact_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int,i_category:string,i_manufact_id:int>

(32) ColumnarToRow
Input [6]: [i_item_sk#8, i_brand_id#9, i_class_id#10, i_category_id#11, i_category#12, i_manufact_id#13]

(33) Filter
Input [6]: [i_item_sk#8, i_brand_id#9, i_class_id#10, i_category_id#11, i_category#12, i_manufact_id#13]
Condition : ((((((isnotnull(i_category#12) AND (i_category#12 = Books)) AND isnotnull(i_item_sk#8)) AND isnotnull(i_brand_id#9)) AND isnotnull(i_class_id#10)) AND isnotnull(i_category_id#11)) AND isnotnull(i_manufact_id#13))

(34) Project
Output [5]: [i_item_sk#8, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13]
Input [6]: [i_item_sk#8, i_brand_id#9, i_class_id#10, i_category_id#11, i_category#12, i_manufact_id#13]

(35) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_item_sk#26]
Right keys [1]: [i_item_sk#8]
Join condition: None

(36) Project [codegen id : 10]
Output [9]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, ss_sold_date_sk#30, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13]
Input [10]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, ss_sold_date_sk#30, i_item_sk#8, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13]

(37) ReusedExchange [Reuses operator id: 14]
Output [2]: [d_date_sk#14, d_year#15]

(38) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#30]
Right keys [1]: [d_date_sk#14]
Join condition: None

(39) Project [codegen id : 10]
Output [9]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, d_year#15]
Input [11]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, ss_sold_date_sk#30, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, d_date_sk#14, d_year#15]

(40) Exchange
Input [9]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, d_year#15]
Arguments: hashpartitioning(cast(ss_ticket_number#27 as bigint), cast(ss_item_sk#26 as bigint), 5), ENSURE_REQUIREMENTS, [id=#32]

(41) Sort [codegen id : 11]
Input [9]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, d_year#15]
Arguments: [cast(ss_ticket_number#27 as bigint) ASC NULLS FIRST, cast(ss_item_sk#26 as bigint) ASC NULLS FIRST], false, 0

(42) Scan parquet default.store_returns
Output [5]: [sr_item_sk#33, sr_ticket_number#34, sr_return_quantity#35, sr_return_amt#36, sr_returned_date_sk#37]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:bigint,sr_ticket_number:bigint,sr_return_quantity:int,sr_return_amt:decimal(7,2)>

(43) ColumnarToRow [codegen id : 12]
Input [5]: [sr_item_sk#33, sr_ticket_number#34, sr_return_quantity#35, sr_return_amt#36, sr_returned_date_sk#37]

(44) Filter [codegen id : 12]
Input [5]: [sr_item_sk#33, sr_ticket_number#34, sr_return_quantity#35, sr_return_amt#36, sr_returned_date_sk#37]
Condition : (isnotnull(sr_ticket_number#34) AND isnotnull(sr_item_sk#33))

(45) Project [codegen id : 12]
Output [4]: [sr_item_sk#33, sr_ticket_number#34, sr_return_quantity#35, sr_return_amt#36]
Input [5]: [sr_item_sk#33, sr_ticket_number#34, sr_return_quantity#35, sr_return_amt#36, sr_returned_date_sk#37]

(46) Exchange
Input [4]: [sr_item_sk#33, sr_ticket_number#34, sr_return_quantity#35, sr_return_amt#36]
Arguments: hashpartitioning(sr_ticket_number#34, sr_item_sk#33, 5), ENSURE_REQUIREMENTS, [id=#38]

(47) Sort [codegen id : 13]
Input [4]: [sr_item_sk#33, sr_ticket_number#34, sr_return_quantity#35, sr_return_amt#36]
Arguments: [sr_ticket_number#34 ASC NULLS FIRST, sr_item_sk#33 ASC NULLS FIRST], false, 0

(48) SortMergeJoin
Left keys [2]: [cast(ss_ticket_number#27 as bigint), cast(ss_item_sk#26 as bigint)]
Right keys [2]: [sr_ticket_number#34, sr_item_sk#33]
Join condition: None

(49) Project [codegen id : 14]
Output [7]: [d_year#15, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, (ss_quantity#28 - coalesce(sr_return_quantity#35, 0)) AS sales_cnt#39, CheckOverflow((promote_precision(cast(ss_ext_sales_price#29 as decimal(8,2))) - promote_precision(cast(coalesce(sr_return_amt#36, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#40]
Input [13]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, d_year#15, sr_item_sk#33, sr_ticket_number#34, sr_return_quantity#35, sr_return_amt#36]

(50) Scan parquet default.web_sales
Output [5]: [ws_item_sk#41, ws_order_number#42, ws_quantity#43, ws_ext_sales_price#44, ws_sold_date_sk#45]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#45), dynamicpruningexpression(ws_sold_date_sk#45 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_order_number:int,ws_quantity:int,ws_ext_sales_price:decimal(7,2)>

(51) ColumnarToRow [codegen id : 15]
Input [5]: [ws_item_sk#41, ws_order_number#42, ws_quantity#43, ws_ext_sales_price#44, ws_sold_date_sk#45]

(52) Filter [codegen id : 15]
Input [5]: [ws_item_sk#41, ws_order_number#42, ws_quantity#43, ws_ext_sales_price#44, ws_sold_date_sk#45]
Condition : isnotnull(ws_item_sk#41)

(53) BroadcastExchange
Input [5]: [ws_item_sk#41, ws_order_number#42, ws_quantity#43, ws_ext_sales_price#44, ws_sold_date_sk#45]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#46]

(54) Scan parquet default.item
Output [6]: [i_item_sk#8, i_brand_id#9, i_class_id#10, i_category_id#11, i_category#12, i_manufact_id#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Books), IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id), IsNotNull(i_manufact_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int,i_category:string,i_manufact_id:int>

(55) ColumnarToRow
Input [6]: [i_item_sk#8, i_brand_id#9, i_class_id#10, i_category_id#11, i_category#12, i_manufact_id#13]

(56) Filter
Input [6]: [i_item_sk#8, i_brand_id#9, i_class_id#10, i_category_id#11, i_category#12, i_manufact_id#13]
Condition : ((((((isnotnull(i_category#12) AND (i_category#12 = Books)) AND isnotnull(i_item_sk#8)) AND isnotnull(i_brand_id#9)) AND isnotnull(i_class_id#10)) AND isnotnull(i_category_id#11)) AND isnotnull(i_manufact_id#13))

(57) Project
Output [5]: [i_item_sk#8, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13]
Input [6]: [i_item_sk#8, i_brand_id#9, i_class_id#10, i_category_id#11, i_category#12, i_manufact_id#13]

(58) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_item_sk#41]
Right keys [1]: [i_item_sk#8]
Join condition: None

(59) Project [codegen id : 17]
Output [9]: [ws_item_sk#41, ws_order_number#42, ws_quantity#43, ws_ext_sales_price#44, ws_sold_date_sk#45, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13]
Input [10]: [ws_item_sk#41, ws_order_number#42, ws_quantity#43, ws_ext_sales_price#44, ws_sold_date_sk#45, i_item_sk#8, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13]

(60) ReusedExchange [Reuses operator id: 14]
Output [2]: [d_date_sk#14, d_year#15]

(61) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_sold_date_sk#45]
Right keys [1]: [d_date_sk#14]
Join condition: None

(62) Project [codegen id : 17]
Output [9]: [ws_item_sk#41, ws_order_number#42, ws_quantity#43, ws_ext_sales_price#44, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, d_year#15]
Input [11]: [ws_item_sk#41, ws_order_number#42, ws_quantity#43, ws_ext_sales_price#44, ws_sold_date_sk#45, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, d_date_sk#14, d_year#15]

(63) Exchange
Input [9]: [ws_item_sk#41, ws_order_number#42, ws_quantity#43, ws_ext_sales_price#44, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, d_year#15]
Arguments: hashpartitioning(cast(ws_order_number#42 as bigint), cast(ws_item_sk#41 as bigint), 5), ENSURE_REQUIREMENTS, [id=#47]

(64) Sort [codegen id : 18]
Input [9]: [ws_item_sk#41, ws_order_number#42, ws_quantity#43, ws_ext_sales_price#44, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, d_year#15]
Arguments: [cast(ws_order_number#42 as bigint) ASC NULLS FIRST, cast(ws_item_sk#41 as bigint) ASC NULLS FIRST], false, 0

(65) Scan parquet default.web_returns
Output [5]: [wr_item_sk#48, wr_order_number#49, wr_return_quantity#50, wr_return_amt#51, wr_returned_date_sk#52]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_order_number), IsNotNull(wr_item_sk)]
ReadSchema: struct<wr_item_sk:bigint,wr_order_number:bigint,wr_return_quantity:int,wr_return_amt:decimal(7,2)>

(66) ColumnarToRow [codegen id : 19]
Input [5]: [wr_item_sk#48, wr_order_number#49, wr_return_quantity#50, wr_return_amt#51, wr_returned_date_sk#52]

(67) Filter [codegen id : 19]
Input [5]: [wr_item_sk#48, wr_order_number#49, wr_return_quantity#50, wr_return_amt#51, wr_returned_date_sk#52]
Condition : (isnotnull(wr_order_number#49) AND isnotnull(wr_item_sk#48))

(68) Project [codegen id : 19]
Output [4]: [wr_item_sk#48, wr_order_number#49, wr_return_quantity#50, wr_return_amt#51]
Input [5]: [wr_item_sk#48, wr_order_number#49, wr_return_quantity#50, wr_return_amt#51, wr_returned_date_sk#52]

(69) Exchange
Input [4]: [wr_item_sk#48, wr_order_number#49, wr_return_quantity#50, wr_return_amt#51]
Arguments: hashpartitioning(wr_order_number#49, wr_item_sk#48, 5), ENSURE_REQUIREMENTS, [id=#53]

(70) Sort [codegen id : 20]
Input [4]: [wr_item_sk#48, wr_order_number#49, wr_return_quantity#50, wr_return_amt#51]
Arguments: [wr_order_number#49 ASC NULLS FIRST, wr_item_sk#48 ASC NULLS FIRST], false, 0

(71) SortMergeJoin
Left keys [2]: [cast(ws_order_number#42 as bigint), cast(ws_item_sk#41 as bigint)]
Right keys [2]: [wr_order_number#49, wr_item_sk#48]
Join condition: None

(72) Project [codegen id : 21]
Output [7]: [d_year#15, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, (ws_quantity#43 - coalesce(wr_return_quantity#50, 0)) AS sales_cnt#54, CheckOverflow((promote_precision(cast(ws_ext_sales_price#44 as decimal(8,2))) - promote_precision(cast(coalesce(wr_return_amt#51, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#55]
Input [13]: [ws_item_sk#41, ws_order_number#42, ws_quantity#43, ws_ext_sales_price#44, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, d_year#15, wr_item_sk#48, wr_order_number#49, wr_return_quantity#50, wr_return_amt#51]

(73) Union

(74) HashAggregate [codegen id : 22]
Input [7]: [d_year#15, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, sales_cnt#24, sales_amt#25]
Keys [7]: [d_year#15, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, sales_cnt#24, sales_amt#25]
Functions: []
Aggregate Attributes: []
Results [7]: [d_year#15, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, sales_cnt#24, sales_amt#25]

(75) Exchange
Input [7]: [d_year#15, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, sales_cnt#24, sales_amt#25]
Arguments: hashpartitioning(d_year#15, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, sales_cnt#24, sales_amt#25, 5), ENSURE_REQUIREMENTS, [id=#56]

(76) HashAggregate [codegen id : 23]
Input [7]: [d_year#15, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, sales_cnt#24, sales_amt#25]
Keys [7]: [d_year#15, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, sales_cnt#24, sales_amt#25]
Functions: []
Aggregate Attributes: []
Results [7]: [d_year#15, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, sales_cnt#24, sales_amt#25]

(77) HashAggregate [codegen id : 23]
Input [7]: [d_year#15, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, sales_cnt#24, sales_amt#25]
Keys [5]: [d_year#15, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13]
Functions [2]: [partial_sum(sales_cnt#24), partial_sum(UnscaledValue(sales_amt#25))]
Aggregate Attributes [2]: [sum#57, sum#58]
Results [7]: [d_year#15, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, sum#59, sum#60]

(78) Exchange
Input [7]: [d_year#15, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, sum#59, sum#60]
Arguments: hashpartitioning(d_year#15, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, 5), ENSURE_REQUIREMENTS, [id=#61]

(79) HashAggregate [codegen id : 24]
Input [7]: [d_year#15, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, sum#59, sum#60]
Keys [5]: [d_year#15, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13]
Functions [2]: [sum(sales_cnt#24), sum(UnscaledValue(sales_amt#25))]
Aggregate Attributes [2]: [sum(sales_cnt#24)#62, sum(UnscaledValue(sales_amt#25))#63]
Results [7]: [d_year#15, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, sum(sales_cnt#24)#62 AS sales_cnt#64, MakeDecimal(sum(UnscaledValue(sales_amt#25))#63,18,2) AS sales_amt#65]

(80) Exchange
Input [7]: [d_year#15, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, sales_cnt#64, sales_amt#65]
Arguments: hashpartitioning(i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, 5), ENSURE_REQUIREMENTS, [id=#66]

(81) Sort [codegen id : 25]
Input [7]: [d_year#15, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, sales_cnt#64, sales_amt#65]
Arguments: [i_brand_id#9 ASC NULLS FIRST, i_class_id#10 ASC NULLS FIRST, i_category_id#11 ASC NULLS FIRST, i_manufact_id#13 ASC NULLS FIRST], false, 0

(82) Scan parquet default.catalog_sales
Output [5]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#67)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_order_number:int,cs_quantity:int,cs_ext_sales_price:decimal(7,2)>

(83) ColumnarToRow [codegen id : 26]
Input [5]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5]

(84) Filter [codegen id : 26]
Input [5]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5]
Condition : isnotnull(cs_item_sk#1)

(85) BroadcastExchange
Input [5]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#68]

(86) Scan parquet default.item
Output [6]: [i_item_sk#69, i_brand_id#70, i_class_id#71, i_category_id#72, i_category#73, i_manufact_id#74]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Books), IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id), IsNotNull(i_manufact_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int,i_category:string,i_manufact_id:int>

(87) ColumnarToRow
Input [6]: [i_item_sk#69, i_brand_id#70, i_class_id#71, i_category_id#72, i_category#73, i_manufact_id#74]

(88) Filter
Input [6]: [i_item_sk#69, i_brand_id#70, i_class_id#71, i_category_id#72, i_category#73, i_manufact_id#74]
Condition : ((((((isnotnull(i_category#73) AND (i_category#73 = Books)) AND isnotnull(i_item_sk#69)) AND isnotnull(i_brand_id#70)) AND isnotnull(i_class_id#71)) AND isnotnull(i_category_id#72)) AND isnotnull(i_manufact_id#74))

(89) Project
Output [5]: [i_item_sk#69, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74]
Input [6]: [i_item_sk#69, i_brand_id#70, i_class_id#71, i_category_id#72, i_category#73, i_manufact_id#74]

(90) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [cs_item_sk#1]
Right keys [1]: [i_item_sk#69]
Join condition: None

(91) Project [codegen id : 28]
Output [9]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74]
Input [10]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5, i_item_sk#69, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74]

(92) Scan parquet default.date_dim
Output [2]: [d_date_sk#75, d_year#76]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(93) ColumnarToRow [codegen id : 27]
Input [2]: [d_date_sk#75, d_year#76]

(94) Filter [codegen id : 27]
Input [2]: [d_date_sk#75, d_year#76]
Condition : ((isnotnull(d_year#76) AND (d_year#76 = 2001)) AND isnotnull(d_date_sk#75))

(95) BroadcastExchange
Input [2]: [d_date_sk#75, d_year#76]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#77]

(96) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#75]
Join condition: None

(97) Project [codegen id : 28]
Output [9]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, d_year#76]
Input [11]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, d_date_sk#75, d_year#76]

(98) Exchange
Input [9]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, d_year#76]
Arguments: hashpartitioning(cs_order_number#2, cs_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#78]

(99) Sort [codegen id : 29]
Input [9]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, d_year#76]
Arguments: [cs_order_number#2 ASC NULLS FIRST, cs_item_sk#1 ASC NULLS FIRST], false, 0

(100) ReusedExchange [Reuses operator id: 23]
Output [4]: [cr_item_sk#18, cr_order_number#19, cr_return_quantity#20, cr_return_amount#21]

(101) Sort [codegen id : 31]
Input [4]: [cr_item_sk#18, cr_order_number#19, cr_return_quantity#20, cr_return_amount#21]
Arguments: [cr_order_number#19 ASC NULLS FIRST, cr_item_sk#18 ASC NULLS FIRST], false, 0

(102) SortMergeJoin
Left keys [2]: [cs_order_number#2, cs_item_sk#1]
Right keys [2]: [cr_order_number#19, cr_item_sk#18]
Join condition: None

(103) Project [codegen id : 32]
Output [7]: [d_year#76, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, (cs_quantity#3 - coalesce(cr_return_quantity#20, 0)) AS sales_cnt#24, CheckOverflow((promote_precision(cast(cs_ext_sales_price#4 as decimal(8,2))) - promote_precision(cast(coalesce(cr_return_amount#21, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#25]
Input [13]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, d_year#76, cr_item_sk#18, cr_order_number#19, cr_return_quantity#20, cr_return_amount#21]

(104) Scan parquet default.store_sales
Output [5]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, ss_sold_date_sk#30]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#30), dynamicpruningexpression(ss_sold_date_sk#30 IN dynamicpruning#67)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ticket_number:int,ss_quantity:int,ss_ext_sales_price:decimal(7,2)>

(105) ColumnarToRow [codegen id : 33]
Input [5]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, ss_sold_date_sk#30]

(106) Filter [codegen id : 33]
Input [5]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, ss_sold_date_sk#30]
Condition : isnotnull(ss_item_sk#26)

(107) BroadcastExchange
Input [5]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, ss_sold_date_sk#30]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#79]

(108) Scan parquet default.item
Output [6]: [i_item_sk#69, i_brand_id#70, i_class_id#71, i_category_id#72, i_category#73, i_manufact_id#74]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Books), IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id), IsNotNull(i_manufact_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int,i_category:string,i_manufact_id:int>

(109) ColumnarToRow
Input [6]: [i_item_sk#69, i_brand_id#70, i_class_id#71, i_category_id#72, i_category#73, i_manufact_id#74]

(110) Filter
Input [6]: [i_item_sk#69, i_brand_id#70, i_class_id#71, i_category_id#72, i_category#73, i_manufact_id#74]
Condition : ((((((isnotnull(i_category#73) AND (i_category#73 = Books)) AND isnotnull(i_item_sk#69)) AND isnotnull(i_brand_id#70)) AND isnotnull(i_class_id#71)) AND isnotnull(i_category_id#72)) AND isnotnull(i_manufact_id#74))

(111) Project
Output [5]: [i_item_sk#69, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74]
Input [6]: [i_item_sk#69, i_brand_id#70, i_class_id#71, i_category_id#72, i_category#73, i_manufact_id#74]

(112) BroadcastHashJoin [codegen id : 35]
Left keys [1]: [ss_item_sk#26]
Right keys [1]: [i_item_sk#69]
Join condition: None

(113) Project [codegen id : 35]
Output [9]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, ss_sold_date_sk#30, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74]
Input [10]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, ss_sold_date_sk#30, i_item_sk#69, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74]

(114) ReusedExchange [Reuses operator id: 95]
Output [2]: [d_date_sk#75, d_year#76]

(115) BroadcastHashJoin [codegen id : 35]
Left keys [1]: [ss_sold_date_sk#30]
Right keys [1]: [d_date_sk#75]
Join condition: None

(116) Project [codegen id : 35]
Output [9]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, d_year#76]
Input [11]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, ss_sold_date_sk#30, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, d_date_sk#75, d_year#76]

(117) Exchange
Input [9]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, d_year#76]
Arguments: hashpartitioning(cast(ss_ticket_number#27 as bigint), cast(ss_item_sk#26 as bigint), 5), ENSURE_REQUIREMENTS, [id=#80]

(118) Sort [codegen id : 36]
Input [9]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, d_year#76]
Arguments: [cast(ss_ticket_number#27 as bigint) ASC NULLS FIRST, cast(ss_item_sk#26 as bigint) ASC NULLS FIRST], false, 0

(119) ReusedExchange [Reuses operator id: 46]
Output [4]: [sr_item_sk#33, sr_ticket_number#34, sr_return_quantity#35, sr_return_amt#36]

(120) Sort [codegen id : 38]
Input [4]: [sr_item_sk#33, sr_ticket_number#34, sr_return_quantity#35, sr_return_amt#36]
Arguments: [sr_ticket_number#34 ASC NULLS FIRST, sr_item_sk#33 ASC NULLS FIRST], false, 0

(121) SortMergeJoin
Left keys [2]: [cast(ss_ticket_number#27 as bigint), cast(ss_item_sk#26 as bigint)]
Right keys [2]: [sr_ticket_number#34, sr_item_sk#33]
Join condition: None

(122) Project [codegen id : 39]
Output [7]: [d_year#76, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, (ss_quantity#28 - coalesce(sr_return_quantity#35, 0)) AS sales_cnt#81, CheckOverflow((promote_precision(cast(ss_ext_sales_price#29 as decimal(8,2))) - promote_precision(cast(coalesce(sr_return_amt#36, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#82]
Input [13]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, d_year#76, sr_item_sk#33, sr_ticket_number#34, sr_return_quantity#35, sr_return_amt#36]

(123) Scan parquet default.web_sales
Output [5]: [ws_item_sk#41, ws_order_number#42, ws_quantity#43, ws_ext_sales_price#44, ws_sold_date_sk#45]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#45), dynamicpruningexpression(ws_sold_date_sk#45 IN dynamicpruning#67)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_order_number:int,ws_quantity:int,ws_ext_sales_price:decimal(7,2)>

(124) ColumnarToRow [codegen id : 40]
Input [5]: [ws_item_sk#41, ws_order_number#42, ws_quantity#43, ws_ext_sales_price#44, ws_sold_date_sk#45]

(125) Filter [codegen id : 40]
Input [5]: [ws_item_sk#41, ws_order_number#42, ws_quantity#43, ws_ext_sales_price#44, ws_sold_date_sk#45]
Condition : isnotnull(ws_item_sk#41)

(126) BroadcastExchange
Input [5]: [ws_item_sk#41, ws_order_number#42, ws_quantity#43, ws_ext_sales_price#44, ws_sold_date_sk#45]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#83]

(127) Scan parquet default.item
Output [6]: [i_item_sk#69, i_brand_id#70, i_class_id#71, i_category_id#72, i_category#73, i_manufact_id#74]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Books), IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id), IsNotNull(i_manufact_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int,i_category:string,i_manufact_id:int>

(128) ColumnarToRow
Input [6]: [i_item_sk#69, i_brand_id#70, i_class_id#71, i_category_id#72, i_category#73, i_manufact_id#74]

(129) Filter
Input [6]: [i_item_sk#69, i_brand_id#70, i_class_id#71, i_category_id#72, i_category#73, i_manufact_id#74]
Condition : ((((((isnotnull(i_category#73) AND (i_category#73 = Books)) AND isnotnull(i_item_sk#69)) AND isnotnull(i_brand_id#70)) AND isnotnull(i_class_id#71)) AND isnotnull(i_category_id#72)) AND isnotnull(i_manufact_id#74))

(130) Project
Output [5]: [i_item_sk#69, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74]
Input [6]: [i_item_sk#69, i_brand_id#70, i_class_id#71, i_category_id#72, i_category#73, i_manufact_id#74]

(131) BroadcastHashJoin [codegen id : 42]
Left keys [1]: [ws_item_sk#41]
Right keys [1]: [i_item_sk#69]
Join condition: None

(132) Project [codegen id : 42]
Output [9]: [ws_item_sk#41, ws_order_number#42, ws_quantity#43, ws_ext_sales_price#44, ws_sold_date_sk#45, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74]
Input [10]: [ws_item_sk#41, ws_order_number#42, ws_quantity#43, ws_ext_sales_price#44, ws_sold_date_sk#45, i_item_sk#69, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74]

(133) ReusedExchange [Reuses operator id: 95]
Output [2]: [d_date_sk#75, d_year#76]

(134) BroadcastHashJoin [codegen id : 42]
Left keys [1]: [ws_sold_date_sk#45]
Right keys [1]: [d_date_sk#75]
Join condition: None

(135) Project [codegen id : 42]
Output [9]: [ws_item_sk#41, ws_order_number#42, ws_quantity#43, ws_ext_sales_price#44, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, d_year#76]
Input [11]: [ws_item_sk#41, ws_order_number#42, ws_quantity#43, ws_ext_sales_price#44, ws_sold_date_sk#45, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, d_date_sk#75, d_year#76]

(136) Exchange
Input [9]: [ws_item_sk#41, ws_order_number#42, ws_quantity#43, ws_ext_sales_price#44, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, d_year#76]
Arguments: hashpartitioning(cast(ws_order_number#42 as bigint), cast(ws_item_sk#41 as bigint), 5), ENSURE_REQUIREMENTS, [id=#84]

(137) Sort [codegen id : 43]
Input [9]: [ws_item_sk#41, ws_order_number#42, ws_quantity#43, ws_ext_sales_price#44, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, d_year#76]
Arguments: [cast(ws_order_number#42 as bigint) ASC NULLS FIRST, cast(ws_item_sk#41 as bigint) ASC NULLS FIRST], false, 0

(138) ReusedExchange [Reuses operator id: 69]
Output [4]: [wr_item_sk#48, wr_order_number#49, wr_return_quantity#50, wr_return_amt#51]

(139) Sort [codegen id : 45]
Input [4]: [wr_item_sk#48, wr_order_number#49, wr_return_quantity#50, wr_return_amt#51]
Arguments: [wr_order_number#49 ASC NULLS FIRST, wr_item_sk#48 ASC NULLS FIRST], false, 0

(140) SortMergeJoin
Left keys [2]: [cast(ws_order_number#42 as bigint), cast(ws_item_sk#41 as bigint)]
Right keys [2]: [wr_order_number#49, wr_item_sk#48]
Join condition: None

(141) Project [codegen id : 46]
Output [7]: [d_year#76, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, (ws_quantity#43 - coalesce(wr_return_quantity#50, 0)) AS sales_cnt#85, CheckOverflow((promote_precision(cast(ws_ext_sales_price#44 as decimal(8,2))) - promote_precision(cast(coalesce(wr_return_amt#51, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#86]
Input [13]: [ws_item_sk#41, ws_order_number#42, ws_quantity#43, ws_ext_sales_price#44, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, d_year#76, wr_item_sk#48, wr_order_number#49, wr_return_quantity#50, wr_return_amt#51]

(142) Union

(143) HashAggregate [codegen id : 47]
Input [7]: [d_year#76, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, sales_cnt#24, sales_amt#25]
Keys [7]: [d_year#76, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, sales_cnt#24, sales_amt#25]
Functions: []
Aggregate Attributes: []
Results [7]: [d_year#76, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, sales_cnt#24, sales_amt#25]

(144) Exchange
Input [7]: [d_year#76, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, sales_cnt#24, sales_amt#25]
Arguments: hashpartitioning(d_year#76, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, sales_cnt#24, sales_amt#25, 5), ENSURE_REQUIREMENTS, [id=#87]

(145) HashAggregate [codegen id : 48]
Input [7]: [d_year#76, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, sales_cnt#24, sales_amt#25]
Keys [7]: [d_year#76, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, sales_cnt#24, sales_amt#25]
Functions: []
Aggregate Attributes: []
Results [7]: [d_year#76, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, sales_cnt#24, sales_amt#25]

(146) HashAggregate [codegen id : 48]
Input [7]: [d_year#76, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, sales_cnt#24, sales_amt#25]
Keys [5]: [d_year#76, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74]
Functions [2]: [partial_sum(sales_cnt#24), partial_sum(UnscaledValue(sales_amt#25))]
Aggregate Attributes [2]: [sum#88, sum#89]
Results [7]: [d_year#76, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, sum#90, sum#91]

(147) Exchange
Input [7]: [d_year#76, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, sum#90, sum#91]
Arguments: hashpartitioning(d_year#76, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, 5), ENSURE_REQUIREMENTS, [id=#92]

(148) HashAggregate [codegen id : 49]
Input [7]: [d_year#76, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, sum#90, sum#91]
Keys [5]: [d_year#76, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74]
Functions [2]: [sum(sales_cnt#24), sum(UnscaledValue(sales_amt#25))]
Aggregate Attributes [2]: [sum(sales_cnt#24)#93, sum(UnscaledValue(sales_amt#25))#94]
Results [7]: [d_year#76, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, sum(sales_cnt#24)#93 AS sales_cnt#95, MakeDecimal(sum(UnscaledValue(sales_amt#25))#94,18,2) AS sales_amt#96]

(149) Exchange
Input [7]: [d_year#76, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, sales_cnt#95, sales_amt#96]
Arguments: hashpartitioning(i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, 5), ENSURE_REQUIREMENTS, [id=#97]

(150) Sort [codegen id : 50]
Input [7]: [d_year#76, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, sales_cnt#95, sales_amt#96]
Arguments: [i_brand_id#70 ASC NULLS FIRST, i_class_id#71 ASC NULLS FIRST, i_category_id#72 ASC NULLS FIRST, i_manufact_id#74 ASC NULLS FIRST], false, 0

(151) SortMergeJoin [codegen id : 51]
Left keys [4]: [i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13]
Right keys [4]: [i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74]
Join condition: (CheckOverflow((promote_precision(cast(sales_cnt#64 as decimal(17,2))) / promote_precision(cast(sales_cnt#95 as decimal(17,2)))), DecimalType(37,20), true) < 0.90000000000000000000)

(152) Project [codegen id : 51]
Output [10]: [d_year#76 AS prev_year#98, d_year#15 AS year#99, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, sales_cnt#95 AS prev_yr_cnt#100, sales_cnt#64 AS curr_yr_cnt#101, (sales_cnt#64 - sales_cnt#95) AS sales_cnt_diff#102, CheckOverflow((promote_precision(cast(sales_amt#65 as decimal(19,2))) - promote_precision(cast(sales_amt#96 as decimal(19,2)))), DecimalType(19,2), true) AS sales_amt_diff#103]
Input [14]: [d_year#15, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, sales_cnt#64, sales_amt#65, d_year#76, i_brand_id#70, i_class_id#71, i_category_id#72, i_manufact_id#74, sales_cnt#95, sales_amt#96]

(153) TakeOrderedAndProject
Input [10]: [prev_year#98, year#99, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, prev_yr_cnt#100, curr_yr_cnt#101, sales_cnt_diff#102, sales_amt_diff#103]
Arguments: 100, [sales_cnt_diff#102 ASC NULLS FIRST, sales_amt_diff#103 ASC NULLS FIRST], [prev_year#98, year#99, i_brand_id#9, i_class_id#10, i_category_id#11, i_manufact_id#13, prev_yr_cnt#100, curr_yr_cnt#101, sales_cnt_diff#102, sales_amt_diff#103]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
ReusedExchange (154)


(154) ReusedExchange [Reuses operator id: 14]
Output [2]: [d_date_sk#14, d_year#15]

Subquery:2 Hosting operator id = 27 Hosting Expression = ss_sold_date_sk#30 IN dynamicpruning#6

Subquery:3 Hosting operator id = 50 Hosting Expression = ws_sold_date_sk#45 IN dynamicpruning#6

Subquery:4 Hosting operator id = 82 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#67
ReusedExchange (155)


(155) ReusedExchange [Reuses operator id: 95]
Output [2]: [d_date_sk#75, d_year#76]

Subquery:5 Hosting operator id = 104 Hosting Expression = ss_sold_date_sk#30 IN dynamicpruning#67

Subquery:6 Hosting operator id = 123 Hosting Expression = ws_sold_date_sk#45 IN dynamicpruning#67


