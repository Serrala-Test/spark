== Physical Plan ==
TakeOrderedAndProject (130)
+- * Project (129)
   +- * SortMergeJoin Inner (128)
      :- * Sort (70)
      :  +- Exchange (69)
      :     +- * HashAggregate (68)
      :        +- Exchange (67)
      :           +- * HashAggregate (66)
      :              +- * HashAggregate (65)
      :                 +- Exchange (64)
      :                    +- * HashAggregate (63)
      :                       +- Union (62)
      :                          :- * Project (25)
      :                          :  +- SortMergeJoin LeftOuter (24)
      :                          :     :- * Sort (18)
      :                          :     :  +- Exchange (17)
      :                          :     :     +- * Project (16)
      :                          :     :        +- * BroadcastHashJoin Inner BuildRight (15)
      :                          :     :           :- * Project (9)
      :                          :     :           :  +- * BroadcastHashJoin Inner BuildRight (8)
      :                          :     :           :     :- * Filter (3)
      :                          :     :           :     :  +- * ColumnarToRow (2)
      :                          :     :           :     :     +- Scan parquet default.catalog_sales (1)
      :                          :     :           :     +- BroadcastExchange (7)
      :                          :     :           :        +- * Filter (6)
      :                          :     :           :           +- * ColumnarToRow (5)
      :                          :     :           :              +- Scan parquet default.date_dim (4)
      :                          :     :           +- BroadcastExchange (14)
      :                          :     :              +- * Project (13)
      :                          :     :                 +- * Filter (12)
      :                          :     :                    +- * ColumnarToRow (11)
      :                          :     :                       +- Scan parquet default.item (10)
      :                          :     +- * Sort (23)
      :                          :        +- Exchange (22)
      :                          :           +- * Filter (21)
      :                          :              +- * ColumnarToRow (20)
      :                          :                 +- Scan parquet default.catalog_returns (19)
      :                          :- * Project (43)
      :                          :  +- SortMergeJoin LeftOuter (42)
      :                          :     :- * Sort (36)
      :                          :     :  +- Exchange (35)
      :                          :     :     +- * Project (34)
      :                          :     :        +- * BroadcastHashJoin Inner BuildRight (33)
      :                          :     :           :- * Project (31)
      :                          :     :           :  +- * BroadcastHashJoin Inner BuildRight (30)
      :                          :     :           :     :- * Filter (28)
      :                          :     :           :     :  +- * ColumnarToRow (27)
      :                          :     :           :     :     +- Scan parquet default.store_sales (26)
      :                          :     :           :     +- ReusedExchange (29)
      :                          :     :           +- ReusedExchange (32)
      :                          :     +- * Sort (41)
      :                          :        +- Exchange (40)
      :                          :           +- * Filter (39)
      :                          :              +- * ColumnarToRow (38)
      :                          :                 +- Scan parquet default.store_returns (37)
      :                          +- * Project (61)
      :                             +- SortMergeJoin LeftOuter (60)
      :                                :- * Sort (54)
      :                                :  +- Exchange (53)
      :                                :     +- * Project (52)
      :                                :        +- * BroadcastHashJoin Inner BuildRight (51)
      :                                :           :- * Project (49)
      :                                :           :  +- * BroadcastHashJoin Inner BuildRight (48)
      :                                :           :     :- * Filter (46)
      :                                :           :     :  +- * ColumnarToRow (45)
      :                                :           :     :     +- Scan parquet default.web_sales (44)
      :                                :           :     +- ReusedExchange (47)
      :                                :           +- ReusedExchange (50)
      :                                +- * Sort (59)
      :                                   +- Exchange (58)
      :                                      +- * Filter (57)
      :                                         +- * ColumnarToRow (56)
      :                                            +- Scan parquet default.web_returns (55)
      +- * Sort (127)
         +- Exchange (126)
            +- * HashAggregate (125)
               +- Exchange (124)
                  +- * HashAggregate (123)
                     +- * HashAggregate (122)
                        +- Exchange (121)
                           +- * HashAggregate (120)
                              +- Union (119)
                                 :- * Project (88)
                                 :  +- SortMergeJoin LeftOuter (87)
                                 :     :- * Sort (84)
                                 :     :  +- Exchange (83)
                                 :     :     +- * Project (82)
                                 :     :        +- * BroadcastHashJoin Inner BuildRight (81)
                                 :     :           :- * Project (79)
                                 :     :           :  +- * BroadcastHashJoin Inner BuildRight (78)
                                 :     :           :     :- * Filter (73)
                                 :     :           :     :  +- * ColumnarToRow (72)
                                 :     :           :     :     +- Scan parquet default.catalog_sales (71)
                                 :     :           :     +- BroadcastExchange (77)
                                 :     :           :        +- * Filter (76)
                                 :     :           :           +- * ColumnarToRow (75)
                                 :     :           :              +- Scan parquet default.date_dim (74)
                                 :     :           +- ReusedExchange (80)
                                 :     +- * Sort (86)
                                 :        +- ReusedExchange (85)
                                 :- * Project (103)
                                 :  +- SortMergeJoin LeftOuter (102)
                                 :     :- * Sort (99)
                                 :     :  +- Exchange (98)
                                 :     :     +- * Project (97)
                                 :     :        +- * BroadcastHashJoin Inner BuildRight (96)
                                 :     :           :- * Project (94)
                                 :     :           :  +- * BroadcastHashJoin Inner BuildRight (93)
                                 :     :           :     :- * Filter (91)
                                 :     :           :     :  +- * ColumnarToRow (90)
                                 :     :           :     :     +- Scan parquet default.store_sales (89)
                                 :     :           :     +- ReusedExchange (92)
                                 :     :           +- ReusedExchange (95)
                                 :     +- * Sort (101)
                                 :        +- ReusedExchange (100)
                                 +- * Project (118)
                                    +- SortMergeJoin LeftOuter (117)
                                       :- * Sort (114)
                                       :  +- Exchange (113)
                                       :     +- * Project (112)
                                       :        +- * BroadcastHashJoin Inner BuildRight (111)
                                       :           :- * Project (109)
                                       :           :  +- * BroadcastHashJoin Inner BuildRight (108)
                                       :           :     :- * Filter (106)
                                       :           :     :  +- * ColumnarToRow (105)
                                       :           :     :     +- Scan parquet default.web_sales (104)
                                       :           :     +- ReusedExchange (107)
                                       :           +- ReusedExchange (110)
                                       +- * Sort (116)
                                          +- ReusedExchange (115)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_sold_date_sk#1, cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_order_number:int,cs_quantity:int,cs_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [5]: [cs_sold_date_sk#1, cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5]

(3) Filter [codegen id : 3]
Input [5]: [cs_sold_date_sk#1, cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5]
Condition : (isnotnull(cs_item_sk#2) AND isnotnull(cs_sold_date_sk#1))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_year#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#7]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#7]
Condition : ((isnotnull(d_year#7) AND (d_year#7 = 2002)) AND isnotnull(d_date_sk#6))

(7) BroadcastExchange
Input [2]: [d_date_sk#6, d_year#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#8]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#6]
Join condition: None

(9) Project [codegen id : 3]
Output [5]: [cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5, d_year#7]
Input [7]: [cs_sold_date_sk#1, cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5, d_date_sk#6, d_year#7]

(10) Scan parquet default.item
Output [6]: [i_item_sk#9, i_brand_id#10, i_class_id#11, i_category_id#12, i_category#13, i_manufact_id#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id), IsNotNull(i_manufact_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int,i_category:string,i_manufact_id:int>

(11) ColumnarToRow [codegen id : 2]
Input [6]: [i_item_sk#9, i_brand_id#10, i_class_id#11, i_category_id#12, i_category#13, i_manufact_id#14]

(12) Filter [codegen id : 2]
Input [6]: [i_item_sk#9, i_brand_id#10, i_class_id#11, i_category_id#12, i_category#13, i_manufact_id#14]
Condition : ((((((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#13, 50, false, true) = Books                                             ) AND isnotnull(i_item_sk#9)) AND isnotnull(i_brand_id#10)) AND isnotnull(i_class_id#11)) AND isnotnull(i_category_id#12)) AND isnotnull(i_manufact_id#14))

(13) Project [codegen id : 2]
Output [5]: [i_item_sk#9, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14]
Input [6]: [i_item_sk#9, i_brand_id#10, i_class_id#11, i_category_id#12, i_category#13, i_manufact_id#14]

(14) BroadcastExchange
Input [5]: [i_item_sk#9, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15]

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [i_item_sk#9]
Join condition: None

(16) Project [codegen id : 3]
Output [9]: [cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, d_year#7]
Input [10]: [cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5, d_year#7, i_item_sk#9, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14]

(17) Exchange
Input [9]: [cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, d_year#7]
Arguments: hashpartitioning(cs_order_number#3, cs_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#16]

(18) Sort [codegen id : 4]
Input [9]: [cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, d_year#7]
Arguments: [cs_order_number#3 ASC NULLS FIRST, cs_item_sk#2 ASC NULLS FIRST], false, 0

(19) Scan parquet default.catalog_returns
Output [4]: [cr_item_sk#17, cr_order_number#18, cr_return_quantity#19, cr_return_amount#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_quantity:int,cr_return_amount:decimal(7,2)>

(20) ColumnarToRow [codegen id : 5]
Input [4]: [cr_item_sk#17, cr_order_number#18, cr_return_quantity#19, cr_return_amount#20]

(21) Filter [codegen id : 5]
Input [4]: [cr_item_sk#17, cr_order_number#18, cr_return_quantity#19, cr_return_amount#20]
Condition : (isnotnull(cr_order_number#18) AND isnotnull(cr_item_sk#17))

(22) Exchange
Input [4]: [cr_item_sk#17, cr_order_number#18, cr_return_quantity#19, cr_return_amount#20]
Arguments: hashpartitioning(cr_order_number#18, cr_item_sk#17, 5), ENSURE_REQUIREMENTS, [id=#21]

(23) Sort [codegen id : 6]
Input [4]: [cr_item_sk#17, cr_order_number#18, cr_return_quantity#19, cr_return_amount#20]
Arguments: [cr_order_number#18 ASC NULLS FIRST, cr_item_sk#17 ASC NULLS FIRST], false, 0

(24) SortMergeJoin
Left keys [2]: [cs_order_number#3, cs_item_sk#2]
Right keys [2]: [cr_order_number#18, cr_item_sk#17]
Join condition: None

(25) Project [codegen id : 7]
Output [7]: [d_year#7, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, (cs_quantity#4 - coalesce(cr_return_quantity#19, 0)) AS sales_cnt#22, CheckOverflow((promote_precision(cast(cs_ext_sales_price#5 as decimal(8,2))) - promote_precision(cast(coalesce(cr_return_amount#20, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#23]
Input [13]: [cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, d_year#7, cr_item_sk#17, cr_order_number#18, cr_return_quantity#19, cr_return_amount#20]

(26) Scan parquet default.store_sales
Output [5]: [ss_sold_date_sk#24, ss_item_sk#25, ss_ticket_number#26, ss_quantity#27, ss_ext_sales_price#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_ticket_number:int,ss_quantity:int,ss_ext_sales_price:decimal(7,2)>

(27) ColumnarToRow [codegen id : 10]
Input [5]: [ss_sold_date_sk#24, ss_item_sk#25, ss_ticket_number#26, ss_quantity#27, ss_ext_sales_price#28]

(28) Filter [codegen id : 10]
Input [5]: [ss_sold_date_sk#24, ss_item_sk#25, ss_ticket_number#26, ss_quantity#27, ss_ext_sales_price#28]
Condition : (isnotnull(ss_item_sk#25) AND isnotnull(ss_sold_date_sk#24))

(29) ReusedExchange [Reuses operator id: 7]
Output [2]: [d_date_sk#6, d_year#7]

(30) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#24]
Right keys [1]: [d_date_sk#6]
Join condition: None

(31) Project [codegen id : 10]
Output [5]: [ss_item_sk#25, ss_ticket_number#26, ss_quantity#27, ss_ext_sales_price#28, d_year#7]
Input [7]: [ss_sold_date_sk#24, ss_item_sk#25, ss_ticket_number#26, ss_quantity#27, ss_ext_sales_price#28, d_date_sk#6, d_year#7]

(32) ReusedExchange [Reuses operator id: 14]
Output [5]: [i_item_sk#9, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14]

(33) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_item_sk#25]
Right keys [1]: [i_item_sk#9]
Join condition: None

(34) Project [codegen id : 10]
Output [9]: [ss_item_sk#25, ss_ticket_number#26, ss_quantity#27, ss_ext_sales_price#28, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, d_year#7]
Input [10]: [ss_item_sk#25, ss_ticket_number#26, ss_quantity#27, ss_ext_sales_price#28, d_year#7, i_item_sk#9, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14]

(35) Exchange
Input [9]: [ss_item_sk#25, ss_ticket_number#26, ss_quantity#27, ss_ext_sales_price#28, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, d_year#7]
Arguments: hashpartitioning(cast(ss_ticket_number#26 as bigint), cast(ss_item_sk#25 as bigint), 5), ENSURE_REQUIREMENTS, [id=#29]

(36) Sort [codegen id : 11]
Input [9]: [ss_item_sk#25, ss_ticket_number#26, ss_quantity#27, ss_ext_sales_price#28, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, d_year#7]
Arguments: [cast(ss_ticket_number#26 as bigint) ASC NULLS FIRST, cast(ss_item_sk#25 as bigint) ASC NULLS FIRST], false, 0

(37) Scan parquet default.store_returns
Output [4]: [sr_item_sk#30, sr_ticket_number#31, sr_return_quantity#32, sr_return_amt#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:bigint,sr_ticket_number:bigint,sr_return_quantity:int,sr_return_amt:decimal(7,2)>

(38) ColumnarToRow [codegen id : 12]
Input [4]: [sr_item_sk#30, sr_ticket_number#31, sr_return_quantity#32, sr_return_amt#33]

(39) Filter [codegen id : 12]
Input [4]: [sr_item_sk#30, sr_ticket_number#31, sr_return_quantity#32, sr_return_amt#33]
Condition : (isnotnull(sr_ticket_number#31) AND isnotnull(sr_item_sk#30))

(40) Exchange
Input [4]: [sr_item_sk#30, sr_ticket_number#31, sr_return_quantity#32, sr_return_amt#33]
Arguments: hashpartitioning(sr_ticket_number#31, sr_item_sk#30, 5), ENSURE_REQUIREMENTS, [id=#34]

(41) Sort [codegen id : 13]
Input [4]: [sr_item_sk#30, sr_ticket_number#31, sr_return_quantity#32, sr_return_amt#33]
Arguments: [sr_ticket_number#31 ASC NULLS FIRST, sr_item_sk#30 ASC NULLS FIRST], false, 0

(42) SortMergeJoin
Left keys [2]: [cast(ss_ticket_number#26 as bigint), cast(ss_item_sk#25 as bigint)]
Right keys [2]: [sr_ticket_number#31, sr_item_sk#30]
Join condition: None

(43) Project [codegen id : 14]
Output [7]: [d_year#7, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, (ss_quantity#27 - coalesce(sr_return_quantity#32, 0)) AS sales_cnt#35, CheckOverflow((promote_precision(cast(ss_ext_sales_price#28 as decimal(8,2))) - promote_precision(cast(coalesce(sr_return_amt#33, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#36]
Input [13]: [ss_item_sk#25, ss_ticket_number#26, ss_quantity#27, ss_ext_sales_price#28, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, d_year#7, sr_item_sk#30, sr_ticket_number#31, sr_return_quantity#32, sr_return_amt#33]

(44) Scan parquet default.web_sales
Output [5]: [ws_sold_date_sk#37, ws_item_sk#38, ws_order_number#39, ws_quantity#40, ws_ext_sales_price#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_order_number:int,ws_quantity:int,ws_ext_sales_price:decimal(7,2)>

(45) ColumnarToRow [codegen id : 17]
Input [5]: [ws_sold_date_sk#37, ws_item_sk#38, ws_order_number#39, ws_quantity#40, ws_ext_sales_price#41]

(46) Filter [codegen id : 17]
Input [5]: [ws_sold_date_sk#37, ws_item_sk#38, ws_order_number#39, ws_quantity#40, ws_ext_sales_price#41]
Condition : (isnotnull(ws_item_sk#38) AND isnotnull(ws_sold_date_sk#37))

(47) ReusedExchange [Reuses operator id: 7]
Output [2]: [d_date_sk#6, d_year#7]

(48) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_sold_date_sk#37]
Right keys [1]: [d_date_sk#6]
Join condition: None

(49) Project [codegen id : 17]
Output [5]: [ws_item_sk#38, ws_order_number#39, ws_quantity#40, ws_ext_sales_price#41, d_year#7]
Input [7]: [ws_sold_date_sk#37, ws_item_sk#38, ws_order_number#39, ws_quantity#40, ws_ext_sales_price#41, d_date_sk#6, d_year#7]

(50) ReusedExchange [Reuses operator id: 14]
Output [5]: [i_item_sk#9, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14]

(51) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_item_sk#38]
Right keys [1]: [i_item_sk#9]
Join condition: None

(52) Project [codegen id : 17]
Output [9]: [ws_item_sk#38, ws_order_number#39, ws_quantity#40, ws_ext_sales_price#41, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, d_year#7]
Input [10]: [ws_item_sk#38, ws_order_number#39, ws_quantity#40, ws_ext_sales_price#41, d_year#7, i_item_sk#9, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14]

(53) Exchange
Input [9]: [ws_item_sk#38, ws_order_number#39, ws_quantity#40, ws_ext_sales_price#41, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, d_year#7]
Arguments: hashpartitioning(cast(ws_order_number#39 as bigint), cast(ws_item_sk#38 as bigint), 5), ENSURE_REQUIREMENTS, [id=#42]

(54) Sort [codegen id : 18]
Input [9]: [ws_item_sk#38, ws_order_number#39, ws_quantity#40, ws_ext_sales_price#41, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, d_year#7]
Arguments: [cast(ws_order_number#39 as bigint) ASC NULLS FIRST, cast(ws_item_sk#38 as bigint) ASC NULLS FIRST], false, 0

(55) Scan parquet default.web_returns
Output [4]: [wr_item_sk#43, wr_order_number#44, wr_return_quantity#45, wr_return_amt#46]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_order_number), IsNotNull(wr_item_sk)]
ReadSchema: struct<wr_item_sk:bigint,wr_order_number:bigint,wr_return_quantity:int,wr_return_amt:decimal(7,2)>

(56) ColumnarToRow [codegen id : 19]
Input [4]: [wr_item_sk#43, wr_order_number#44, wr_return_quantity#45, wr_return_amt#46]

(57) Filter [codegen id : 19]
Input [4]: [wr_item_sk#43, wr_order_number#44, wr_return_quantity#45, wr_return_amt#46]
Condition : (isnotnull(wr_order_number#44) AND isnotnull(wr_item_sk#43))

(58) Exchange
Input [4]: [wr_item_sk#43, wr_order_number#44, wr_return_quantity#45, wr_return_amt#46]
Arguments: hashpartitioning(wr_order_number#44, wr_item_sk#43, 5), ENSURE_REQUIREMENTS, [id=#47]

(59) Sort [codegen id : 20]
Input [4]: [wr_item_sk#43, wr_order_number#44, wr_return_quantity#45, wr_return_amt#46]
Arguments: [wr_order_number#44 ASC NULLS FIRST, wr_item_sk#43 ASC NULLS FIRST], false, 0

(60) SortMergeJoin
Left keys [2]: [cast(ws_order_number#39 as bigint), cast(ws_item_sk#38 as bigint)]
Right keys [2]: [wr_order_number#44, wr_item_sk#43]
Join condition: None

(61) Project [codegen id : 21]
Output [7]: [d_year#7, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, (ws_quantity#40 - coalesce(wr_return_quantity#45, 0)) AS sales_cnt#48, CheckOverflow((promote_precision(cast(ws_ext_sales_price#41 as decimal(8,2))) - promote_precision(cast(coalesce(wr_return_amt#46, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#49]
Input [13]: [ws_item_sk#38, ws_order_number#39, ws_quantity#40, ws_ext_sales_price#41, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, d_year#7, wr_item_sk#43, wr_order_number#44, wr_return_quantity#45, wr_return_amt#46]

(62) Union

(63) HashAggregate [codegen id : 22]
Input [7]: [d_year#7, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, sales_cnt#22, sales_amt#23]
Keys [7]: [d_year#7, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, sales_cnt#22, sales_amt#23]
Functions: []
Aggregate Attributes: []
Results [7]: [d_year#7, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, sales_cnt#22, sales_amt#23]

(64) Exchange
Input [7]: [d_year#7, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, sales_cnt#22, sales_amt#23]
Arguments: hashpartitioning(d_year#7, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, sales_cnt#22, sales_amt#23, 5), ENSURE_REQUIREMENTS, [id=#50]

(65) HashAggregate [codegen id : 23]
Input [7]: [d_year#7, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, sales_cnt#22, sales_amt#23]
Keys [7]: [d_year#7, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, sales_cnt#22, sales_amt#23]
Functions: []
Aggregate Attributes: []
Results [7]: [d_year#7, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, sales_cnt#22, sales_amt#23]

(66) HashAggregate [codegen id : 23]
Input [7]: [d_year#7, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, sales_cnt#22, sales_amt#23]
Keys [5]: [d_year#7, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14]
Functions [2]: [partial_sum(cast(sales_cnt#22 as bigint)), partial_sum(UnscaledValue(sales_amt#23))]
Aggregate Attributes [2]: [sum#51, sum#52]
Results [7]: [d_year#7, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, sum#53, sum#54]

(67) Exchange
Input [7]: [d_year#7, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, sum#53, sum#54]
Arguments: hashpartitioning(d_year#7, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, 5), ENSURE_REQUIREMENTS, [id=#55]

(68) HashAggregate [codegen id : 24]
Input [7]: [d_year#7, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, sum#53, sum#54]
Keys [5]: [d_year#7, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14]
Functions [2]: [sum(cast(sales_cnt#22 as bigint)), sum(UnscaledValue(sales_amt#23))]
Aggregate Attributes [2]: [sum(cast(sales_cnt#22 as bigint))#56, sum(UnscaledValue(sales_amt#23))#57]
Results [7]: [d_year#7, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, sum(cast(sales_cnt#22 as bigint))#56 AS sales_cnt#58, MakeDecimal(sum(UnscaledValue(sales_amt#23))#57,18,2) AS sales_amt#59]

(69) Exchange
Input [7]: [d_year#7, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, sales_cnt#58, sales_amt#59]
Arguments: hashpartitioning(i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, 5), ENSURE_REQUIREMENTS, [id=#60]

(70) Sort [codegen id : 25]
Input [7]: [d_year#7, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, sales_cnt#58, sales_amt#59]
Arguments: [i_brand_id#10 ASC NULLS FIRST, i_class_id#11 ASC NULLS FIRST, i_category_id#12 ASC NULLS FIRST, i_manufact_id#14 ASC NULLS FIRST], false, 0

(71) Scan parquet default.catalog_sales
Output [5]: [cs_sold_date_sk#1, cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_order_number:int,cs_quantity:int,cs_ext_sales_price:decimal(7,2)>

(72) ColumnarToRow [codegen id : 28]
Input [5]: [cs_sold_date_sk#1, cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5]

(73) Filter [codegen id : 28]
Input [5]: [cs_sold_date_sk#1, cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5]
Condition : (isnotnull(cs_item_sk#2) AND isnotnull(cs_sold_date_sk#1))

(74) Scan parquet default.date_dim
Output [2]: [d_date_sk#61, d_year#62]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(75) ColumnarToRow [codegen id : 26]
Input [2]: [d_date_sk#61, d_year#62]

(76) Filter [codegen id : 26]
Input [2]: [d_date_sk#61, d_year#62]
Condition : ((isnotnull(d_year#62) AND (d_year#62 = 2001)) AND isnotnull(d_date_sk#61))

(77) BroadcastExchange
Input [2]: [d_date_sk#61, d_year#62]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#63]

(78) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#61]
Join condition: None

(79) Project [codegen id : 28]
Output [5]: [cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5, d_year#62]
Input [7]: [cs_sold_date_sk#1, cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5, d_date_sk#61, d_year#62]

(80) ReusedExchange [Reuses operator id: 14]
Output [5]: [i_item_sk#64, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68]

(81) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [i_item_sk#64]
Join condition: None

(82) Project [codegen id : 28]
Output [9]: [cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, d_year#62]
Input [10]: [cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5, d_year#62, i_item_sk#64, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68]

(83) Exchange
Input [9]: [cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, d_year#62]
Arguments: hashpartitioning(cs_order_number#3, cs_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#69]

(84) Sort [codegen id : 29]
Input [9]: [cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, d_year#62]
Arguments: [cs_order_number#3 ASC NULLS FIRST, cs_item_sk#2 ASC NULLS FIRST], false, 0

(85) ReusedExchange [Reuses operator id: 22]
Output [4]: [cr_item_sk#17, cr_order_number#18, cr_return_quantity#19, cr_return_amount#20]

(86) Sort [codegen id : 31]
Input [4]: [cr_item_sk#17, cr_order_number#18, cr_return_quantity#19, cr_return_amount#20]
Arguments: [cr_order_number#18 ASC NULLS FIRST, cr_item_sk#17 ASC NULLS FIRST], false, 0

(87) SortMergeJoin
Left keys [2]: [cs_order_number#3, cs_item_sk#2]
Right keys [2]: [cr_order_number#18, cr_item_sk#17]
Join condition: None

(88) Project [codegen id : 32]
Output [7]: [d_year#62, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, (cs_quantity#4 - coalesce(cr_return_quantity#19, 0)) AS sales_cnt#22, CheckOverflow((promote_precision(cast(cs_ext_sales_price#5 as decimal(8,2))) - promote_precision(cast(coalesce(cr_return_amount#20, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#23]
Input [13]: [cs_item_sk#2, cs_order_number#3, cs_quantity#4, cs_ext_sales_price#5, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, d_year#62, cr_item_sk#17, cr_order_number#18, cr_return_quantity#19, cr_return_amount#20]

(89) Scan parquet default.store_sales
Output [5]: [ss_sold_date_sk#24, ss_item_sk#25, ss_ticket_number#26, ss_quantity#27, ss_ext_sales_price#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_ticket_number:int,ss_quantity:int,ss_ext_sales_price:decimal(7,2)>

(90) ColumnarToRow [codegen id : 35]
Input [5]: [ss_sold_date_sk#24, ss_item_sk#25, ss_ticket_number#26, ss_quantity#27, ss_ext_sales_price#28]

(91) Filter [codegen id : 35]
Input [5]: [ss_sold_date_sk#24, ss_item_sk#25, ss_ticket_number#26, ss_quantity#27, ss_ext_sales_price#28]
Condition : (isnotnull(ss_item_sk#25) AND isnotnull(ss_sold_date_sk#24))

(92) ReusedExchange [Reuses operator id: 77]
Output [2]: [d_date_sk#61, d_year#62]

(93) BroadcastHashJoin [codegen id : 35]
Left keys [1]: [ss_sold_date_sk#24]
Right keys [1]: [d_date_sk#61]
Join condition: None

(94) Project [codegen id : 35]
Output [5]: [ss_item_sk#25, ss_ticket_number#26, ss_quantity#27, ss_ext_sales_price#28, d_year#62]
Input [7]: [ss_sold_date_sk#24, ss_item_sk#25, ss_ticket_number#26, ss_quantity#27, ss_ext_sales_price#28, d_date_sk#61, d_year#62]

(95) ReusedExchange [Reuses operator id: 14]
Output [5]: [i_item_sk#64, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68]

(96) BroadcastHashJoin [codegen id : 35]
Left keys [1]: [ss_item_sk#25]
Right keys [1]: [i_item_sk#64]
Join condition: None

(97) Project [codegen id : 35]
Output [9]: [ss_item_sk#25, ss_ticket_number#26, ss_quantity#27, ss_ext_sales_price#28, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, d_year#62]
Input [10]: [ss_item_sk#25, ss_ticket_number#26, ss_quantity#27, ss_ext_sales_price#28, d_year#62, i_item_sk#64, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68]

(98) Exchange
Input [9]: [ss_item_sk#25, ss_ticket_number#26, ss_quantity#27, ss_ext_sales_price#28, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, d_year#62]
Arguments: hashpartitioning(cast(ss_ticket_number#26 as bigint), cast(ss_item_sk#25 as bigint), 5), ENSURE_REQUIREMENTS, [id=#70]

(99) Sort [codegen id : 36]
Input [9]: [ss_item_sk#25, ss_ticket_number#26, ss_quantity#27, ss_ext_sales_price#28, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, d_year#62]
Arguments: [cast(ss_ticket_number#26 as bigint) ASC NULLS FIRST, cast(ss_item_sk#25 as bigint) ASC NULLS FIRST], false, 0

(100) ReusedExchange [Reuses operator id: 40]
Output [4]: [sr_item_sk#30, sr_ticket_number#31, sr_return_quantity#32, sr_return_amt#33]

(101) Sort [codegen id : 38]
Input [4]: [sr_item_sk#30, sr_ticket_number#31, sr_return_quantity#32, sr_return_amt#33]
Arguments: [sr_ticket_number#31 ASC NULLS FIRST, sr_item_sk#30 ASC NULLS FIRST], false, 0

(102) SortMergeJoin
Left keys [2]: [cast(ss_ticket_number#26 as bigint), cast(ss_item_sk#25 as bigint)]
Right keys [2]: [sr_ticket_number#31, sr_item_sk#30]
Join condition: None

(103) Project [codegen id : 39]
Output [7]: [d_year#62, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, (ss_quantity#27 - coalesce(sr_return_quantity#32, 0)) AS sales_cnt#71, CheckOverflow((promote_precision(cast(ss_ext_sales_price#28 as decimal(8,2))) - promote_precision(cast(coalesce(sr_return_amt#33, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#72]
Input [13]: [ss_item_sk#25, ss_ticket_number#26, ss_quantity#27, ss_ext_sales_price#28, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, d_year#62, sr_item_sk#30, sr_ticket_number#31, sr_return_quantity#32, sr_return_amt#33]

(104) Scan parquet default.web_sales
Output [5]: [ws_sold_date_sk#37, ws_item_sk#38, ws_order_number#39, ws_quantity#40, ws_ext_sales_price#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_order_number:int,ws_quantity:int,ws_ext_sales_price:decimal(7,2)>

(105) ColumnarToRow [codegen id : 42]
Input [5]: [ws_sold_date_sk#37, ws_item_sk#38, ws_order_number#39, ws_quantity#40, ws_ext_sales_price#41]

(106) Filter [codegen id : 42]
Input [5]: [ws_sold_date_sk#37, ws_item_sk#38, ws_order_number#39, ws_quantity#40, ws_ext_sales_price#41]
Condition : (isnotnull(ws_item_sk#38) AND isnotnull(ws_sold_date_sk#37))

(107) ReusedExchange [Reuses operator id: 77]
Output [2]: [d_date_sk#61, d_year#62]

(108) BroadcastHashJoin [codegen id : 42]
Left keys [1]: [ws_sold_date_sk#37]
Right keys [1]: [d_date_sk#61]
Join condition: None

(109) Project [codegen id : 42]
Output [5]: [ws_item_sk#38, ws_order_number#39, ws_quantity#40, ws_ext_sales_price#41, d_year#62]
Input [7]: [ws_sold_date_sk#37, ws_item_sk#38, ws_order_number#39, ws_quantity#40, ws_ext_sales_price#41, d_date_sk#61, d_year#62]

(110) ReusedExchange [Reuses operator id: 14]
Output [5]: [i_item_sk#64, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68]

(111) BroadcastHashJoin [codegen id : 42]
Left keys [1]: [ws_item_sk#38]
Right keys [1]: [i_item_sk#64]
Join condition: None

(112) Project [codegen id : 42]
Output [9]: [ws_item_sk#38, ws_order_number#39, ws_quantity#40, ws_ext_sales_price#41, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, d_year#62]
Input [10]: [ws_item_sk#38, ws_order_number#39, ws_quantity#40, ws_ext_sales_price#41, d_year#62, i_item_sk#64, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68]

(113) Exchange
Input [9]: [ws_item_sk#38, ws_order_number#39, ws_quantity#40, ws_ext_sales_price#41, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, d_year#62]
Arguments: hashpartitioning(cast(ws_order_number#39 as bigint), cast(ws_item_sk#38 as bigint), 5), ENSURE_REQUIREMENTS, [id=#73]

(114) Sort [codegen id : 43]
Input [9]: [ws_item_sk#38, ws_order_number#39, ws_quantity#40, ws_ext_sales_price#41, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, d_year#62]
Arguments: [cast(ws_order_number#39 as bigint) ASC NULLS FIRST, cast(ws_item_sk#38 as bigint) ASC NULLS FIRST], false, 0

(115) ReusedExchange [Reuses operator id: 58]
Output [4]: [wr_item_sk#43, wr_order_number#44, wr_return_quantity#45, wr_return_amt#46]

(116) Sort [codegen id : 45]
Input [4]: [wr_item_sk#43, wr_order_number#44, wr_return_quantity#45, wr_return_amt#46]
Arguments: [wr_order_number#44 ASC NULLS FIRST, wr_item_sk#43 ASC NULLS FIRST], false, 0

(117) SortMergeJoin
Left keys [2]: [cast(ws_order_number#39 as bigint), cast(ws_item_sk#38 as bigint)]
Right keys [2]: [wr_order_number#44, wr_item_sk#43]
Join condition: None

(118) Project [codegen id : 46]
Output [7]: [d_year#62, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, (ws_quantity#40 - coalesce(wr_return_quantity#45, 0)) AS sales_cnt#74, CheckOverflow((promote_precision(cast(ws_ext_sales_price#41 as decimal(8,2))) - promote_precision(cast(coalesce(wr_return_amt#46, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#75]
Input [13]: [ws_item_sk#38, ws_order_number#39, ws_quantity#40, ws_ext_sales_price#41, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, d_year#62, wr_item_sk#43, wr_order_number#44, wr_return_quantity#45, wr_return_amt#46]

(119) Union

(120) HashAggregate [codegen id : 47]
Input [7]: [d_year#62, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, sales_cnt#22, sales_amt#23]
Keys [7]: [d_year#62, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, sales_cnt#22, sales_amt#23]
Functions: []
Aggregate Attributes: []
Results [7]: [d_year#62, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, sales_cnt#22, sales_amt#23]

(121) Exchange
Input [7]: [d_year#62, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, sales_cnt#22, sales_amt#23]
Arguments: hashpartitioning(d_year#62, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, sales_cnt#22, sales_amt#23, 5), ENSURE_REQUIREMENTS, [id=#76]

(122) HashAggregate [codegen id : 48]
Input [7]: [d_year#62, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, sales_cnt#22, sales_amt#23]
Keys [7]: [d_year#62, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, sales_cnt#22, sales_amt#23]
Functions: []
Aggregate Attributes: []
Results [7]: [d_year#62, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, sales_cnt#22, sales_amt#23]

(123) HashAggregate [codegen id : 48]
Input [7]: [d_year#62, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, sales_cnt#22, sales_amt#23]
Keys [5]: [d_year#62, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68]
Functions [2]: [partial_sum(cast(sales_cnt#22 as bigint)), partial_sum(UnscaledValue(sales_amt#23))]
Aggregate Attributes [2]: [sum#77, sum#78]
Results [7]: [d_year#62, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, sum#79, sum#80]

(124) Exchange
Input [7]: [d_year#62, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, sum#79, sum#80]
Arguments: hashpartitioning(d_year#62, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, 5), ENSURE_REQUIREMENTS, [id=#81]

(125) HashAggregate [codegen id : 49]
Input [7]: [d_year#62, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, sum#79, sum#80]
Keys [5]: [d_year#62, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68]
Functions [2]: [sum(cast(sales_cnt#22 as bigint)), sum(UnscaledValue(sales_amt#23))]
Aggregate Attributes [2]: [sum(cast(sales_cnt#22 as bigint))#82, sum(UnscaledValue(sales_amt#23))#83]
Results [7]: [d_year#62, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, sum(cast(sales_cnt#22 as bigint))#82 AS sales_cnt#84, MakeDecimal(sum(UnscaledValue(sales_amt#23))#83,18,2) AS sales_amt#85]

(126) Exchange
Input [7]: [d_year#62, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, sales_cnt#84, sales_amt#85]
Arguments: hashpartitioning(i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, 5), ENSURE_REQUIREMENTS, [id=#86]

(127) Sort [codegen id : 50]
Input [7]: [d_year#62, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, sales_cnt#84, sales_amt#85]
Arguments: [i_brand_id#65 ASC NULLS FIRST, i_class_id#66 ASC NULLS FIRST, i_category_id#67 ASC NULLS FIRST, i_manufact_id#68 ASC NULLS FIRST], false, 0

(128) SortMergeJoin [codegen id : 51]
Left keys [4]: [i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14]
Right keys [4]: [i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68]
Join condition: (CheckOverflow((promote_precision(cast(sales_cnt#58 as decimal(17,2))) / promote_precision(cast(sales_cnt#84 as decimal(17,2)))), DecimalType(37,20), true) < 0.90000000000000000000)

(129) Project [codegen id : 51]
Output [10]: [d_year#62 AS prev_year#87, d_year#7 AS year#88, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, sales_cnt#84 AS prev_yr_cnt#89, sales_cnt#58 AS curr_yr_cnt#90, (sales_cnt#58 - sales_cnt#84) AS sales_cnt_diff#91, CheckOverflow((promote_precision(cast(sales_amt#59 as decimal(19,2))) - promote_precision(cast(sales_amt#85 as decimal(19,2)))), DecimalType(19,2), true) AS sales_amt_diff#92]
Input [14]: [d_year#7, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, sales_cnt#58, sales_amt#59, d_year#62, i_brand_id#65, i_class_id#66, i_category_id#67, i_manufact_id#68, sales_cnt#84, sales_amt#85]

(130) TakeOrderedAndProject
Input [10]: [prev_year#87, year#88, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, prev_yr_cnt#89, curr_yr_cnt#90, sales_cnt_diff#91, sales_amt_diff#92]
Arguments: 100, [sales_cnt_diff#91 ASC NULLS FIRST, sales_amt_diff#92 ASC NULLS FIRST], [prev_year#87, year#88, i_brand_id#10, i_class_id#11, i_category_id#12, i_manufact_id#14, prev_yr_cnt#89, curr_yr_cnt#90, sales_cnt_diff#91, sales_amt_diff#92]

