== Physical Plan ==
TakeOrderedAndProject (86)
+- * HashAggregate (85)
   +- Exchange (84)
      +- * HashAggregate (83)
         +- Union (82)
            :- * Project (27)
            :  +- * Filter (26)
            :     +- Window (25)
            :        +- * Sort (24)
            :           +- Window (23)
            :              +- * Sort (22)
            :                 +- Exchange (21)
            :                    +- * HashAggregate (20)
            :                       +- Exchange (19)
            :                          +- * HashAggregate (18)
            :                             +- * Project (17)
            :                                +- * SortMergeJoin Inner (16)
            :                                   :- * Sort (9)
            :                                   :  +- Exchange (8)
            :                                   :     +- * Project (7)
            :                                   :        +- * BroadcastHashJoin Inner BuildRight (6)
            :                                   :           :- * Project (4)
            :                                   :           :  +- * Filter (3)
            :                                   :           :     +- * ColumnarToRow (2)
            :                                   :           :        +- Scan parquet spark_catalog.default.web_sales (1)
            :                                   :           +- ReusedExchange (5)
            :                                   +- * Sort (15)
            :                                      +- Exchange (14)
            :                                         +- * Project (13)
            :                                            +- * Filter (12)
            :                                               +- * ColumnarToRow (11)
            :                                                  +- Scan parquet spark_catalog.default.web_returns (10)
            :- * Project (54)
            :  +- * Filter (53)
            :     +- Window (52)
            :        +- * Sort (51)
            :           +- Window (50)
            :              +- * Sort (49)
            :                 +- Exchange (48)
            :                    +- * HashAggregate (47)
            :                       +- Exchange (46)
            :                          +- * HashAggregate (45)
            :                             +- * Project (44)
            :                                +- * SortMergeJoin Inner (43)
            :                                   :- * Sort (36)
            :                                   :  +- Exchange (35)
            :                                   :     +- * Project (34)
            :                                   :        +- * BroadcastHashJoin Inner BuildRight (33)
            :                                   :           :- * Project (31)
            :                                   :           :  +- * Filter (30)
            :                                   :           :     +- * ColumnarToRow (29)
            :                                   :           :        +- Scan parquet spark_catalog.default.catalog_sales (28)
            :                                   :           +- ReusedExchange (32)
            :                                   +- * Sort (42)
            :                                      +- Exchange (41)
            :                                         +- * Project (40)
            :                                            +- * Filter (39)
            :                                               +- * ColumnarToRow (38)
            :                                                  +- Scan parquet spark_catalog.default.catalog_returns (37)
            +- * Project (81)
               +- * Filter (80)
                  +- Window (79)
                     +- * Sort (78)
                        +- Window (77)
                           +- * Sort (76)
                              +- Exchange (75)
                                 +- * HashAggregate (74)
                                    +- Exchange (73)
                                       +- * HashAggregate (72)
                                          +- * Project (71)
                                             +- * SortMergeJoin Inner (70)
                                                :- * Sort (63)
                                                :  +- Exchange (62)
                                                :     +- * Project (61)
                                                :        +- * BroadcastHashJoin Inner BuildRight (60)
                                                :           :- * Project (58)
                                                :           :  +- * Filter (57)
                                                :           :     +- * ColumnarToRow (56)
                                                :           :        +- Scan parquet spark_catalog.default.store_sales (55)
                                                :           +- ReusedExchange (59)
                                                +- * Sort (69)
                                                   +- Exchange (68)
                                                      +- * Project (67)
                                                         +- * Filter (66)
                                                            +- * ColumnarToRow (65)
                                                               +- Scan parquet spark_catalog.default.store_returns (64)


(1) Scan parquet spark_catalog.default.web_sales
Output [6]: [ws_item_sk#1, ws_order_number#2, ws_quantity#3, ws_net_paid#4, ws_net_profit#5, ws_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#6), dynamicpruningexpression(ws_sold_date_sk#6 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ws_net_profit), IsNotNull(ws_net_paid), IsNotNull(ws_quantity), GreaterThan(ws_net_profit,1.00), GreaterThan(ws_net_paid,0.00), GreaterThan(ws_quantity,0), IsNotNull(ws_order_number), IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_order_number:int,ws_quantity:int,ws_net_paid:decimal(7,2),ws_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [6]: [ws_item_sk#1, ws_order_number#2, ws_quantity#3, ws_net_paid#4, ws_net_profit#5, ws_sold_date_sk#6]

(3) Filter [codegen id : 2]
Input [6]: [ws_item_sk#1, ws_order_number#2, ws_quantity#3, ws_net_paid#4, ws_net_profit#5, ws_sold_date_sk#6]
Condition : ((((((((isnotnull(ws_net_profit#5) AND isnotnull(ws_net_paid#4)) AND isnotnull(ws_quantity#3)) AND (ws_net_profit#5 > 1.00)) AND (ws_net_paid#4 > 0.00)) AND (ws_quantity#3 > 0)) AND isnotnull(ws_order_number#2)) AND isnotnull(ws_item_sk#1)) AND might_contain(Subquery scalar-subquery#8, [id=#9], xxhash64(ws_item_sk#1, 42)))

(4) Project [codegen id : 2]
Output [5]: [ws_item_sk#1, ws_order_number#2, ws_quantity#3, ws_net_paid#4, ws_sold_date_sk#6]
Input [6]: [ws_item_sk#1, ws_order_number#2, ws_quantity#3, ws_net_paid#4, ws_net_profit#5, ws_sold_date_sk#6]

(5) ReusedExchange [Reuses operator id: 98]
Output [1]: [d_date_sk#10]

(6) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_sold_date_sk#6]
Right keys [1]: [d_date_sk#10]
Join type: Inner
Join condition: None

(7) Project [codegen id : 2]
Output [4]: [ws_item_sk#1, ws_order_number#2, ws_quantity#3, ws_net_paid#4]
Input [6]: [ws_item_sk#1, ws_order_number#2, ws_quantity#3, ws_net_paid#4, ws_sold_date_sk#6, d_date_sk#10]

(8) Exchange
Input [4]: [ws_item_sk#1, ws_order_number#2, ws_quantity#3, ws_net_paid#4]
Arguments: hashpartitioning(ws_order_number#2, ws_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(9) Sort [codegen id : 3]
Input [4]: [ws_item_sk#1, ws_order_number#2, ws_quantity#3, ws_net_paid#4]
Arguments: [ws_order_number#2 ASC NULLS FIRST, ws_item_sk#1 ASC NULLS FIRST], false, 0

(10) Scan parquet spark_catalog.default.web_returns
Output [5]: [wr_item_sk#11, wr_order_number#12, wr_return_quantity#13, wr_return_amt#14, wr_returned_date_sk#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_return_amt), GreaterThan(wr_return_amt,10000.00), IsNotNull(wr_order_number), IsNotNull(wr_item_sk)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_quantity:int,wr_return_amt:decimal(7,2)>

(11) ColumnarToRow [codegen id : 4]
Input [5]: [wr_item_sk#11, wr_order_number#12, wr_return_quantity#13, wr_return_amt#14, wr_returned_date_sk#15]

(12) Filter [codegen id : 4]
Input [5]: [wr_item_sk#11, wr_order_number#12, wr_return_quantity#13, wr_return_amt#14, wr_returned_date_sk#15]
Condition : (((isnotnull(wr_return_amt#14) AND (wr_return_amt#14 > 10000.00)) AND isnotnull(wr_order_number#12)) AND isnotnull(wr_item_sk#11))

(13) Project [codegen id : 4]
Output [4]: [wr_item_sk#11, wr_order_number#12, wr_return_quantity#13, wr_return_amt#14]
Input [5]: [wr_item_sk#11, wr_order_number#12, wr_return_quantity#13, wr_return_amt#14, wr_returned_date_sk#15]

(14) Exchange
Input [4]: [wr_item_sk#11, wr_order_number#12, wr_return_quantity#13, wr_return_amt#14]
Arguments: hashpartitioning(wr_order_number#12, wr_item_sk#11, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(15) Sort [codegen id : 5]
Input [4]: [wr_item_sk#11, wr_order_number#12, wr_return_quantity#13, wr_return_amt#14]
Arguments: [wr_order_number#12 ASC NULLS FIRST, wr_item_sk#11 ASC NULLS FIRST], false, 0

(16) SortMergeJoin [codegen id : 6]
Left keys [2]: [ws_order_number#2, ws_item_sk#1]
Right keys [2]: [wr_order_number#12, wr_item_sk#11]
Join type: Inner
Join condition: None

(17) Project [codegen id : 6]
Output [5]: [ws_item_sk#1, ws_quantity#3, ws_net_paid#4, wr_return_quantity#13, wr_return_amt#14]
Input [8]: [ws_item_sk#1, ws_order_number#2, ws_quantity#3, ws_net_paid#4, wr_item_sk#11, wr_order_number#12, wr_return_quantity#13, wr_return_amt#14]

(18) HashAggregate [codegen id : 6]
Input [5]: [ws_item_sk#1, ws_quantity#3, ws_net_paid#4, wr_return_quantity#13, wr_return_amt#14]
Keys [1]: [ws_item_sk#1]
Functions [4]: [partial_sum(coalesce(wr_return_quantity#13, 0)), partial_sum(coalesce(ws_quantity#3, 0)), partial_sum(coalesce(cast(wr_return_amt#14 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ws_net_paid#4 as decimal(12,2)), 0.00))]
Aggregate Attributes [6]: [sum#16, sum#17, sum#18, isEmpty#19, sum#20, isEmpty#21]
Results [7]: [ws_item_sk#1, sum#22, sum#23, sum#24, isEmpty#25, sum#26, isEmpty#27]

(19) Exchange
Input [7]: [ws_item_sk#1, sum#22, sum#23, sum#24, isEmpty#25, sum#26, isEmpty#27]
Arguments: hashpartitioning(ws_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(20) HashAggregate [codegen id : 7]
Input [7]: [ws_item_sk#1, sum#22, sum#23, sum#24, isEmpty#25, sum#26, isEmpty#27]
Keys [1]: [ws_item_sk#1]
Functions [4]: [sum(coalesce(wr_return_quantity#13, 0)), sum(coalesce(ws_quantity#3, 0)), sum(coalesce(cast(wr_return_amt#14 as decimal(12,2)), 0.00)), sum(coalesce(cast(ws_net_paid#4 as decimal(12,2)), 0.00))]
Aggregate Attributes [4]: [sum(coalesce(wr_return_quantity#13, 0))#28, sum(coalesce(ws_quantity#3, 0))#29, sum(coalesce(cast(wr_return_amt#14 as decimal(12,2)), 0.00))#30, sum(coalesce(cast(ws_net_paid#4 as decimal(12,2)), 0.00))#31]
Results [3]: [ws_item_sk#1 AS item#32, (cast(sum(coalesce(wr_return_quantity#13, 0))#28 as decimal(15,4)) / cast(sum(coalesce(ws_quantity#3, 0))#29 as decimal(15,4))) AS return_ratio#33, (cast(sum(coalesce(cast(wr_return_amt#14 as decimal(12,2)), 0.00))#30 as decimal(15,4)) / cast(sum(coalesce(cast(ws_net_paid#4 as decimal(12,2)), 0.00))#31 as decimal(15,4))) AS currency_ratio#34]

(21) Exchange
Input [3]: [item#32, return_ratio#33, currency_ratio#34]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=4]

(22) Sort [codegen id : 8]
Input [3]: [item#32, return_ratio#33, currency_ratio#34]
Arguments: [return_ratio#33 ASC NULLS FIRST], false, 0

(23) Window
Input [3]: [item#32, return_ratio#33, currency_ratio#34]
Arguments: [rank(return_ratio#33) windowspecdefinition(return_ratio#33 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#35], [return_ratio#33 ASC NULLS FIRST]

(24) Sort [codegen id : 9]
Input [4]: [item#32, return_ratio#33, currency_ratio#34, return_rank#35]
Arguments: [currency_ratio#34 ASC NULLS FIRST], false, 0

(25) Window
Input [4]: [item#32, return_ratio#33, currency_ratio#34, return_rank#35]
Arguments: [rank(currency_ratio#34) windowspecdefinition(currency_ratio#34 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#36], [currency_ratio#34 ASC NULLS FIRST]

(26) Filter [codegen id : 10]
Input [5]: [item#32, return_ratio#33, currency_ratio#34, return_rank#35, currency_rank#36]
Condition : ((return_rank#35 <= 10) OR (currency_rank#36 <= 10))

(27) Project [codegen id : 10]
Output [5]: [web AS channel#37, item#32, return_ratio#33, return_rank#35, currency_rank#36]
Input [5]: [item#32, return_ratio#33, currency_ratio#34, return_rank#35, currency_rank#36]

(28) Scan parquet spark_catalog.default.catalog_sales
Output [6]: [cs_item_sk#38, cs_order_number#39, cs_quantity#40, cs_net_paid#41, cs_net_profit#42, cs_sold_date_sk#43]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#43), dynamicpruningexpression(cs_sold_date_sk#43 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(cs_net_profit), IsNotNull(cs_net_paid), IsNotNull(cs_quantity), GreaterThan(cs_net_profit,1.00), GreaterThan(cs_net_paid,0.00), GreaterThan(cs_quantity,0), IsNotNull(cs_order_number), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_order_number:int,cs_quantity:int,cs_net_paid:decimal(7,2),cs_net_profit:decimal(7,2)>

(29) ColumnarToRow [codegen id : 12]
Input [6]: [cs_item_sk#38, cs_order_number#39, cs_quantity#40, cs_net_paid#41, cs_net_profit#42, cs_sold_date_sk#43]

(30) Filter [codegen id : 12]
Input [6]: [cs_item_sk#38, cs_order_number#39, cs_quantity#40, cs_net_paid#41, cs_net_profit#42, cs_sold_date_sk#43]
Condition : ((((((((isnotnull(cs_net_profit#42) AND isnotnull(cs_net_paid#41)) AND isnotnull(cs_quantity#40)) AND (cs_net_profit#42 > 1.00)) AND (cs_net_paid#41 > 0.00)) AND (cs_quantity#40 > 0)) AND isnotnull(cs_order_number#39)) AND isnotnull(cs_item_sk#38)) AND might_contain(Subquery scalar-subquery#44, [id=#45], xxhash64(cs_item_sk#38, 42)))

(31) Project [codegen id : 12]
Output [5]: [cs_item_sk#38, cs_order_number#39, cs_quantity#40, cs_net_paid#41, cs_sold_date_sk#43]
Input [6]: [cs_item_sk#38, cs_order_number#39, cs_quantity#40, cs_net_paid#41, cs_net_profit#42, cs_sold_date_sk#43]

(32) ReusedExchange [Reuses operator id: 98]
Output [1]: [d_date_sk#46]

(33) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [cs_sold_date_sk#43]
Right keys [1]: [d_date_sk#46]
Join type: Inner
Join condition: None

(34) Project [codegen id : 12]
Output [4]: [cs_item_sk#38, cs_order_number#39, cs_quantity#40, cs_net_paid#41]
Input [6]: [cs_item_sk#38, cs_order_number#39, cs_quantity#40, cs_net_paid#41, cs_sold_date_sk#43, d_date_sk#46]

(35) Exchange
Input [4]: [cs_item_sk#38, cs_order_number#39, cs_quantity#40, cs_net_paid#41]
Arguments: hashpartitioning(cs_order_number#39, cs_item_sk#38, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(36) Sort [codegen id : 13]
Input [4]: [cs_item_sk#38, cs_order_number#39, cs_quantity#40, cs_net_paid#41]
Arguments: [cs_order_number#39 ASC NULLS FIRST, cs_item_sk#38 ASC NULLS FIRST], false, 0

(37) Scan parquet spark_catalog.default.catalog_returns
Output [5]: [cr_item_sk#47, cr_order_number#48, cr_return_quantity#49, cr_return_amount#50, cr_returned_date_sk#51]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_return_amount), GreaterThan(cr_return_amount,10000.00), IsNotNull(cr_order_number), IsNotNull(cr_item_sk)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_quantity:int,cr_return_amount:decimal(7,2)>

(38) ColumnarToRow [codegen id : 14]
Input [5]: [cr_item_sk#47, cr_order_number#48, cr_return_quantity#49, cr_return_amount#50, cr_returned_date_sk#51]

(39) Filter [codegen id : 14]
Input [5]: [cr_item_sk#47, cr_order_number#48, cr_return_quantity#49, cr_return_amount#50, cr_returned_date_sk#51]
Condition : (((isnotnull(cr_return_amount#50) AND (cr_return_amount#50 > 10000.00)) AND isnotnull(cr_order_number#48)) AND isnotnull(cr_item_sk#47))

(40) Project [codegen id : 14]
Output [4]: [cr_item_sk#47, cr_order_number#48, cr_return_quantity#49, cr_return_amount#50]
Input [5]: [cr_item_sk#47, cr_order_number#48, cr_return_quantity#49, cr_return_amount#50, cr_returned_date_sk#51]

(41) Exchange
Input [4]: [cr_item_sk#47, cr_order_number#48, cr_return_quantity#49, cr_return_amount#50]
Arguments: hashpartitioning(cr_order_number#48, cr_item_sk#47, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(42) Sort [codegen id : 15]
Input [4]: [cr_item_sk#47, cr_order_number#48, cr_return_quantity#49, cr_return_amount#50]
Arguments: [cr_order_number#48 ASC NULLS FIRST, cr_item_sk#47 ASC NULLS FIRST], false, 0

(43) SortMergeJoin [codegen id : 16]
Left keys [2]: [cs_order_number#39, cs_item_sk#38]
Right keys [2]: [cr_order_number#48, cr_item_sk#47]
Join type: Inner
Join condition: None

(44) Project [codegen id : 16]
Output [5]: [cs_item_sk#38, cs_quantity#40, cs_net_paid#41, cr_return_quantity#49, cr_return_amount#50]
Input [8]: [cs_item_sk#38, cs_order_number#39, cs_quantity#40, cs_net_paid#41, cr_item_sk#47, cr_order_number#48, cr_return_quantity#49, cr_return_amount#50]

(45) HashAggregate [codegen id : 16]
Input [5]: [cs_item_sk#38, cs_quantity#40, cs_net_paid#41, cr_return_quantity#49, cr_return_amount#50]
Keys [1]: [cs_item_sk#38]
Functions [4]: [partial_sum(coalesce(cr_return_quantity#49, 0)), partial_sum(coalesce(cs_quantity#40, 0)), partial_sum(coalesce(cast(cr_return_amount#50 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(cs_net_paid#41 as decimal(12,2)), 0.00))]
Aggregate Attributes [6]: [sum#52, sum#53, sum#54, isEmpty#55, sum#56, isEmpty#57]
Results [7]: [cs_item_sk#38, sum#58, sum#59, sum#60, isEmpty#61, sum#62, isEmpty#63]

(46) Exchange
Input [7]: [cs_item_sk#38, sum#58, sum#59, sum#60, isEmpty#61, sum#62, isEmpty#63]
Arguments: hashpartitioning(cs_item_sk#38, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(47) HashAggregate [codegen id : 17]
Input [7]: [cs_item_sk#38, sum#58, sum#59, sum#60, isEmpty#61, sum#62, isEmpty#63]
Keys [1]: [cs_item_sk#38]
Functions [4]: [sum(coalesce(cr_return_quantity#49, 0)), sum(coalesce(cs_quantity#40, 0)), sum(coalesce(cast(cr_return_amount#50 as decimal(12,2)), 0.00)), sum(coalesce(cast(cs_net_paid#41 as decimal(12,2)), 0.00))]
Aggregate Attributes [4]: [sum(coalesce(cr_return_quantity#49, 0))#64, sum(coalesce(cs_quantity#40, 0))#65, sum(coalesce(cast(cr_return_amount#50 as decimal(12,2)), 0.00))#66, sum(coalesce(cast(cs_net_paid#41 as decimal(12,2)), 0.00))#67]
Results [3]: [cs_item_sk#38 AS item#68, (cast(sum(coalesce(cr_return_quantity#49, 0))#64 as decimal(15,4)) / cast(sum(coalesce(cs_quantity#40, 0))#65 as decimal(15,4))) AS return_ratio#69, (cast(sum(coalesce(cast(cr_return_amount#50 as decimal(12,2)), 0.00))#66 as decimal(15,4)) / cast(sum(coalesce(cast(cs_net_paid#41 as decimal(12,2)), 0.00))#67 as decimal(15,4))) AS currency_ratio#70]

(48) Exchange
Input [3]: [item#68, return_ratio#69, currency_ratio#70]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=8]

(49) Sort [codegen id : 18]
Input [3]: [item#68, return_ratio#69, currency_ratio#70]
Arguments: [return_ratio#69 ASC NULLS FIRST], false, 0

(50) Window
Input [3]: [item#68, return_ratio#69, currency_ratio#70]
Arguments: [rank(return_ratio#69) windowspecdefinition(return_ratio#69 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#71], [return_ratio#69 ASC NULLS FIRST]

(51) Sort [codegen id : 19]
Input [4]: [item#68, return_ratio#69, currency_ratio#70, return_rank#71]
Arguments: [currency_ratio#70 ASC NULLS FIRST], false, 0

(52) Window
Input [4]: [item#68, return_ratio#69, currency_ratio#70, return_rank#71]
Arguments: [rank(currency_ratio#70) windowspecdefinition(currency_ratio#70 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#72], [currency_ratio#70 ASC NULLS FIRST]

(53) Filter [codegen id : 20]
Input [5]: [item#68, return_ratio#69, currency_ratio#70, return_rank#71, currency_rank#72]
Condition : ((return_rank#71 <= 10) OR (currency_rank#72 <= 10))

(54) Project [codegen id : 20]
Output [5]: [catalog AS channel#73, item#68, return_ratio#69, return_rank#71, currency_rank#72]
Input [5]: [item#68, return_ratio#69, currency_ratio#70, return_rank#71, currency_rank#72]

(55) Scan parquet spark_catalog.default.store_sales
Output [6]: [ss_item_sk#74, ss_ticket_number#75, ss_quantity#76, ss_net_paid#77, ss_net_profit#78, ss_sold_date_sk#79]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#79), dynamicpruningexpression(ss_sold_date_sk#79 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ss_net_profit), IsNotNull(ss_net_paid), IsNotNull(ss_quantity), GreaterThan(ss_net_profit,1.00), GreaterThan(ss_net_paid,0.00), GreaterThan(ss_quantity,0), IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ticket_number:int,ss_quantity:int,ss_net_paid:decimal(7,2),ss_net_profit:decimal(7,2)>

(56) ColumnarToRow [codegen id : 22]
Input [6]: [ss_item_sk#74, ss_ticket_number#75, ss_quantity#76, ss_net_paid#77, ss_net_profit#78, ss_sold_date_sk#79]

(57) Filter [codegen id : 22]
Input [6]: [ss_item_sk#74, ss_ticket_number#75, ss_quantity#76, ss_net_paid#77, ss_net_profit#78, ss_sold_date_sk#79]
Condition : ((((((((isnotnull(ss_net_profit#78) AND isnotnull(ss_net_paid#77)) AND isnotnull(ss_quantity#76)) AND (ss_net_profit#78 > 1.00)) AND (ss_net_paid#77 > 0.00)) AND (ss_quantity#76 > 0)) AND isnotnull(ss_ticket_number#75)) AND isnotnull(ss_item_sk#74)) AND might_contain(Subquery scalar-subquery#80, [id=#81], xxhash64(ss_item_sk#74, 42)))

(58) Project [codegen id : 22]
Output [5]: [ss_item_sk#74, ss_ticket_number#75, ss_quantity#76, ss_net_paid#77, ss_sold_date_sk#79]
Input [6]: [ss_item_sk#74, ss_ticket_number#75, ss_quantity#76, ss_net_paid#77, ss_net_profit#78, ss_sold_date_sk#79]

(59) ReusedExchange [Reuses operator id: 98]
Output [1]: [d_date_sk#82]

(60) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ss_sold_date_sk#79]
Right keys [1]: [d_date_sk#82]
Join type: Inner
Join condition: None

(61) Project [codegen id : 22]
Output [4]: [ss_item_sk#74, ss_ticket_number#75, ss_quantity#76, ss_net_paid#77]
Input [6]: [ss_item_sk#74, ss_ticket_number#75, ss_quantity#76, ss_net_paid#77, ss_sold_date_sk#79, d_date_sk#82]

(62) Exchange
Input [4]: [ss_item_sk#74, ss_ticket_number#75, ss_quantity#76, ss_net_paid#77]
Arguments: hashpartitioning(ss_ticket_number#75, ss_item_sk#74, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(63) Sort [codegen id : 23]
Input [4]: [ss_item_sk#74, ss_ticket_number#75, ss_quantity#76, ss_net_paid#77]
Arguments: [ss_ticket_number#75 ASC NULLS FIRST, ss_item_sk#74 ASC NULLS FIRST], false, 0

(64) Scan parquet spark_catalog.default.store_returns
Output [5]: [sr_item_sk#83, sr_ticket_number#84, sr_return_quantity#85, sr_return_amt#86, sr_returned_date_sk#87]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_return_amt), GreaterThan(sr_return_amt,10000.00), IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int,sr_return_quantity:int,sr_return_amt:decimal(7,2)>

(65) ColumnarToRow [codegen id : 24]
Input [5]: [sr_item_sk#83, sr_ticket_number#84, sr_return_quantity#85, sr_return_amt#86, sr_returned_date_sk#87]

(66) Filter [codegen id : 24]
Input [5]: [sr_item_sk#83, sr_ticket_number#84, sr_return_quantity#85, sr_return_amt#86, sr_returned_date_sk#87]
Condition : (((isnotnull(sr_return_amt#86) AND (sr_return_amt#86 > 10000.00)) AND isnotnull(sr_ticket_number#84)) AND isnotnull(sr_item_sk#83))

(67) Project [codegen id : 24]
Output [4]: [sr_item_sk#83, sr_ticket_number#84, sr_return_quantity#85, sr_return_amt#86]
Input [5]: [sr_item_sk#83, sr_ticket_number#84, sr_return_quantity#85, sr_return_amt#86, sr_returned_date_sk#87]

(68) Exchange
Input [4]: [sr_item_sk#83, sr_ticket_number#84, sr_return_quantity#85, sr_return_amt#86]
Arguments: hashpartitioning(sr_ticket_number#84, sr_item_sk#83, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(69) Sort [codegen id : 25]
Input [4]: [sr_item_sk#83, sr_ticket_number#84, sr_return_quantity#85, sr_return_amt#86]
Arguments: [sr_ticket_number#84 ASC NULLS FIRST, sr_item_sk#83 ASC NULLS FIRST], false, 0

(70) SortMergeJoin [codegen id : 26]
Left keys [2]: [ss_ticket_number#75, ss_item_sk#74]
Right keys [2]: [sr_ticket_number#84, sr_item_sk#83]
Join type: Inner
Join condition: None

(71) Project [codegen id : 26]
Output [5]: [ss_item_sk#74, ss_quantity#76, ss_net_paid#77, sr_return_quantity#85, sr_return_amt#86]
Input [8]: [ss_item_sk#74, ss_ticket_number#75, ss_quantity#76, ss_net_paid#77, sr_item_sk#83, sr_ticket_number#84, sr_return_quantity#85, sr_return_amt#86]

(72) HashAggregate [codegen id : 26]
Input [5]: [ss_item_sk#74, ss_quantity#76, ss_net_paid#77, sr_return_quantity#85, sr_return_amt#86]
Keys [1]: [ss_item_sk#74]
Functions [4]: [partial_sum(coalesce(sr_return_quantity#85, 0)), partial_sum(coalesce(ss_quantity#76, 0)), partial_sum(coalesce(cast(sr_return_amt#86 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ss_net_paid#77 as decimal(12,2)), 0.00))]
Aggregate Attributes [6]: [sum#88, sum#89, sum#90, isEmpty#91, sum#92, isEmpty#93]
Results [7]: [ss_item_sk#74, sum#94, sum#95, sum#96, isEmpty#97, sum#98, isEmpty#99]

(73) Exchange
Input [7]: [ss_item_sk#74, sum#94, sum#95, sum#96, isEmpty#97, sum#98, isEmpty#99]
Arguments: hashpartitioning(ss_item_sk#74, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(74) HashAggregate [codegen id : 27]
Input [7]: [ss_item_sk#74, sum#94, sum#95, sum#96, isEmpty#97, sum#98, isEmpty#99]
Keys [1]: [ss_item_sk#74]
Functions [4]: [sum(coalesce(sr_return_quantity#85, 0)), sum(coalesce(ss_quantity#76, 0)), sum(coalesce(cast(sr_return_amt#86 as decimal(12,2)), 0.00)), sum(coalesce(cast(ss_net_paid#77 as decimal(12,2)), 0.00))]
Aggregate Attributes [4]: [sum(coalesce(sr_return_quantity#85, 0))#100, sum(coalesce(ss_quantity#76, 0))#101, sum(coalesce(cast(sr_return_amt#86 as decimal(12,2)), 0.00))#102, sum(coalesce(cast(ss_net_paid#77 as decimal(12,2)), 0.00))#103]
Results [3]: [ss_item_sk#74 AS item#104, (cast(sum(coalesce(sr_return_quantity#85, 0))#100 as decimal(15,4)) / cast(sum(coalesce(ss_quantity#76, 0))#101 as decimal(15,4))) AS return_ratio#105, (cast(sum(coalesce(cast(sr_return_amt#86 as decimal(12,2)), 0.00))#102 as decimal(15,4)) / cast(sum(coalesce(cast(ss_net_paid#77 as decimal(12,2)), 0.00))#103 as decimal(15,4))) AS currency_ratio#106]

(75) Exchange
Input [3]: [item#104, return_ratio#105, currency_ratio#106]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=12]

(76) Sort [codegen id : 28]
Input [3]: [item#104, return_ratio#105, currency_ratio#106]
Arguments: [return_ratio#105 ASC NULLS FIRST], false, 0

(77) Window
Input [3]: [item#104, return_ratio#105, currency_ratio#106]
Arguments: [rank(return_ratio#105) windowspecdefinition(return_ratio#105 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#107], [return_ratio#105 ASC NULLS FIRST]

(78) Sort [codegen id : 29]
Input [4]: [item#104, return_ratio#105, currency_ratio#106, return_rank#107]
Arguments: [currency_ratio#106 ASC NULLS FIRST], false, 0

(79) Window
Input [4]: [item#104, return_ratio#105, currency_ratio#106, return_rank#107]
Arguments: [rank(currency_ratio#106) windowspecdefinition(currency_ratio#106 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#108], [currency_ratio#106 ASC NULLS FIRST]

(80) Filter [codegen id : 30]
Input [5]: [item#104, return_ratio#105, currency_ratio#106, return_rank#107, currency_rank#108]
Condition : ((return_rank#107 <= 10) OR (currency_rank#108 <= 10))

(81) Project [codegen id : 30]
Output [5]: [store AS channel#109, item#104, return_ratio#105, return_rank#107, currency_rank#108]
Input [5]: [item#104, return_ratio#105, currency_ratio#106, return_rank#107, currency_rank#108]

(82) Union

(83) HashAggregate [codegen id : 31]
Input [5]: [channel#37, item#32, return_ratio#33, return_rank#35, currency_rank#36]
Keys [5]: [channel#37, item#32, return_ratio#33, return_rank#35, currency_rank#36]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#37, item#32, return_ratio#33, return_rank#35, currency_rank#36]

(84) Exchange
Input [5]: [channel#37, item#32, return_ratio#33, return_rank#35, currency_rank#36]
Arguments: hashpartitioning(channel#37, item#32, return_ratio#33, return_rank#35, currency_rank#36, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(85) HashAggregate [codegen id : 32]
Input [5]: [channel#37, item#32, return_ratio#33, return_rank#35, currency_rank#36]
Keys [5]: [channel#37, item#32, return_ratio#33, return_rank#35, currency_rank#36]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#37, item#32, return_ratio#33, return_rank#35, currency_rank#36]

(86) TakeOrderedAndProject
Input [5]: [channel#37, item#32, return_ratio#33, return_rank#35, currency_rank#36]
Arguments: 100, [channel#37 ASC NULLS FIRST, return_rank#35 ASC NULLS FIRST, currency_rank#36 ASC NULLS FIRST, item#32 ASC NULLS FIRST], [channel#37, item#32, return_ratio#33, return_rank#35, currency_rank#36]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#8, [id=#9]
ObjectHashAggregate (93)
+- Exchange (92)
   +- ObjectHashAggregate (91)
      +- * Project (90)
         +- * Filter (89)
            +- * ColumnarToRow (88)
               +- Scan parquet spark_catalog.default.web_returns (87)


(87) Scan parquet spark_catalog.default.web_returns
Output [4]: [wr_item_sk#11, wr_order_number#12, wr_return_amt#14, wr_returned_date_sk#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_return_amt), GreaterThan(wr_return_amt,10000.00), IsNotNull(wr_order_number), IsNotNull(wr_item_sk)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_amt:decimal(7,2)>

(88) ColumnarToRow [codegen id : 1]
Input [4]: [wr_item_sk#11, wr_order_number#12, wr_return_amt#14, wr_returned_date_sk#15]

(89) Filter [codegen id : 1]
Input [4]: [wr_item_sk#11, wr_order_number#12, wr_return_amt#14, wr_returned_date_sk#15]
Condition : (((isnotnull(wr_return_amt#14) AND (wr_return_amt#14 > 10000.00)) AND isnotnull(wr_order_number#12)) AND isnotnull(wr_item_sk#11))

(90) Project [codegen id : 1]
Output [1]: [wr_item_sk#11]
Input [4]: [wr_item_sk#11, wr_order_number#12, wr_return_amt#14, wr_returned_date_sk#15]

(91) ObjectHashAggregate
Input [1]: [wr_item_sk#11]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(wr_item_sk#11, 42), 4449121, 32471646, 0, 0)]
Aggregate Attributes [1]: [buf#110]
Results [1]: [buf#111]

(92) Exchange
Input [1]: [buf#111]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=14]

(93) ObjectHashAggregate
Input [1]: [buf#111]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(wr_item_sk#11, 42), 4449121, 32471646, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(wr_item_sk#11, 42), 4449121, 32471646, 0, 0)#112]
Results [1]: [bloom_filter_agg(xxhash64(wr_item_sk#11, 42), 4449121, 32471646, 0, 0)#112 AS bloomFilter#113]

Subquery:2 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#6 IN dynamicpruning#7
BroadcastExchange (98)
+- * Project (97)
   +- * Filter (96)
      +- * ColumnarToRow (95)
         +- Scan parquet spark_catalog.default.date_dim (94)


(94) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#10, d_year#114, d_moy#115]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,12), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(95) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#10, d_year#114, d_moy#115]

(96) Filter [codegen id : 1]
Input [3]: [d_date_sk#10, d_year#114, d_moy#115]
Condition : ((((isnotnull(d_year#114) AND isnotnull(d_moy#115)) AND (d_year#114 = 2001)) AND (d_moy#115 = 12)) AND isnotnull(d_date_sk#10))

(97) Project [codegen id : 1]
Output [1]: [d_date_sk#10]
Input [3]: [d_date_sk#10, d_year#114, d_moy#115]

(98) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=15]

Subquery:3 Hosting operator id = 30 Hosting Expression = Subquery scalar-subquery#44, [id=#45]
ObjectHashAggregate (105)
+- Exchange (104)
   +- ObjectHashAggregate (103)
      +- * Project (102)
         +- * Filter (101)
            +- * ColumnarToRow (100)
               +- Scan parquet spark_catalog.default.catalog_returns (99)


(99) Scan parquet spark_catalog.default.catalog_returns
Output [4]: [cr_item_sk#47, cr_order_number#48, cr_return_amount#50, cr_returned_date_sk#51]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_return_amount), GreaterThan(cr_return_amount,10000.00), IsNotNull(cr_order_number), IsNotNull(cr_item_sk)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_amount:decimal(7,2)>

(100) ColumnarToRow [codegen id : 1]
Input [4]: [cr_item_sk#47, cr_order_number#48, cr_return_amount#50, cr_returned_date_sk#51]

(101) Filter [codegen id : 1]
Input [4]: [cr_item_sk#47, cr_order_number#48, cr_return_amount#50, cr_returned_date_sk#51]
Condition : (((isnotnull(cr_return_amount#50) AND (cr_return_amount#50 > 10000.00)) AND isnotnull(cr_order_number#48)) AND isnotnull(cr_item_sk#47))

(102) Project [codegen id : 1]
Output [1]: [cr_item_sk#47]
Input [4]: [cr_item_sk#47, cr_order_number#48, cr_return_amount#50, cr_returned_date_sk#51]

(103) ObjectHashAggregate
Input [1]: [cr_item_sk#47]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(cr_item_sk#47, 42), 9210895, 67108864, 0, 0)]
Aggregate Attributes [1]: [buf#116]
Results [1]: [buf#117]

(104) Exchange
Input [1]: [buf#117]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=16]

(105) ObjectHashAggregate
Input [1]: [buf#117]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(cr_item_sk#47, 42), 9210895, 67108864, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(cr_item_sk#47, 42), 9210895, 67108864, 0, 0)#118]
Results [1]: [bloom_filter_agg(xxhash64(cr_item_sk#47, 42), 9210895, 67108864, 0, 0)#118 AS bloomFilter#119]

Subquery:4 Hosting operator id = 28 Hosting Expression = cs_sold_date_sk#43 IN dynamicpruning#7

Subquery:5 Hosting operator id = 57 Hosting Expression = Subquery scalar-subquery#80, [id=#81]
ObjectHashAggregate (112)
+- Exchange (111)
   +- ObjectHashAggregate (110)
      +- * Project (109)
         +- * Filter (108)
            +- * ColumnarToRow (107)
               +- Scan parquet spark_catalog.default.store_returns (106)


(106) Scan parquet spark_catalog.default.store_returns
Output [4]: [sr_item_sk#83, sr_ticket_number#84, sr_return_amt#86, sr_returned_date_sk#87]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_return_amt), GreaterThan(sr_return_amt,10000.00), IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int,sr_return_amt:decimal(7,2)>

(107) ColumnarToRow [codegen id : 1]
Input [4]: [sr_item_sk#83, sr_ticket_number#84, sr_return_amt#86, sr_returned_date_sk#87]

(108) Filter [codegen id : 1]
Input [4]: [sr_item_sk#83, sr_ticket_number#84, sr_return_amt#86, sr_returned_date_sk#87]
Condition : (((isnotnull(sr_return_amt#86) AND (sr_return_amt#86 > 10000.00)) AND isnotnull(sr_ticket_number#84)) AND isnotnull(sr_item_sk#83))

(109) Project [codegen id : 1]
Output [1]: [sr_item_sk#83]
Input [4]: [sr_item_sk#83, sr_ticket_number#84, sr_return_amt#86, sr_returned_date_sk#87]

(110) ObjectHashAggregate
Input [1]: [sr_item_sk#83]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(sr_item_sk#83, 42), 13141919, 67108864, 0, 0)]
Aggregate Attributes [1]: [buf#120]
Results [1]: [buf#121]

(111) Exchange
Input [1]: [buf#121]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=17]

(112) ObjectHashAggregate
Input [1]: [buf#121]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(sr_item_sk#83, 42), 13141919, 67108864, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(sr_item_sk#83, 42), 13141919, 67108864, 0, 0)#122]
Results [1]: [bloom_filter_agg(xxhash64(sr_item_sk#83, 42), 13141919, 67108864, 0, 0)#122 AS bloomFilter#123]

Subquery:6 Hosting operator id = 55 Hosting Expression = ss_sold_date_sk#79 IN dynamicpruning#7


