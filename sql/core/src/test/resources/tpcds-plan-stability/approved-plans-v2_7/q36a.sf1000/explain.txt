== Physical Plan ==
TakeOrderedAndProject (44)
+- * Project (43)
   +- Window (42)
      +- * Sort (41)
         +- Exchange (40)
            +- * HashAggregate (39)
               +- Exchange (38)
                  +- * HashAggregate (37)
                     +- Union (36)
                        :- * HashAggregate (25)
                        :  +- Exchange (24)
                        :     +- * HashAggregate (23)
                        :        +- * Project (22)
                        :           +- * SortMergeJoin Inner (21)
                        :              :- * Sort (15)
                        :              :  +- Exchange (14)
                        :              :     +- * Project (13)
                        :              :        +- * BroadcastHashJoin Inner BuildRight (12)
                        :              :           :- * Project (10)
                        :              :           :  +- * BroadcastHashJoin Inner BuildRight (9)
                        :              :           :     :- * Filter (3)
                        :              :           :     :  +- * ColumnarToRow (2)
                        :              :           :     :     +- Scan parquet spark_catalog.default.store_sales (1)
                        :              :           :     +- BroadcastExchange (8)
                        :              :           :        +- * Project (7)
                        :              :           :           +- * Filter (6)
                        :              :           :              +- * ColumnarToRow (5)
                        :              :           :                 +- Scan parquet spark_catalog.default.store (4)
                        :              :           +- ReusedExchange (11)
                        :              +- * Sort (20)
                        :                 +- Exchange (19)
                        :                    +- * Filter (18)
                        :                       +- * ColumnarToRow (17)
                        :                          +- Scan parquet spark_catalog.default.item (16)
                        :- * HashAggregate (30)
                        :  +- Exchange (29)
                        :     +- * HashAggregate (28)
                        :        +- * HashAggregate (27)
                        :           +- ReusedExchange (26)
                        +- * HashAggregate (35)
                           +- Exchange (34)
                              +- * HashAggregate (33)
                                 +- * HashAggregate (32)
                                    +- ReusedExchange (31)


(1) Scan parquet spark_catalog.default.store_sales
Output [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#5), dynamicpruningexpression(ss_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]

(3) Filter [codegen id : 3]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Condition : (isnotnull(ss_item_sk#1) AND isnotnull(ss_store_sk#2))

(4) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#7, s_state#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [s_store_sk#7, s_state#8]

(6) Filter [codegen id : 1]
Input [2]: [s_store_sk#7, s_state#8]
Condition : ((isnotnull(s_state#8) AND (s_state#8 = TN)) AND isnotnull(s_store_sk#7))

(7) Project [codegen id : 1]
Output [1]: [s_store_sk#7]
Input [2]: [s_store_sk#7, s_state#8]

(8) BroadcastExchange
Input [1]: [s_store_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#7]
Join type: Inner
Join condition: None

(10) Project [codegen id : 3]
Output [4]: [ss_item_sk#1, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Input [6]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5, s_store_sk#7]

(11) ReusedExchange [Reuses operator id: 49]
Output [1]: [d_date_sk#9]

(12) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#5]
Right keys [1]: [d_date_sk#9]
Join type: Inner
Join condition: None

(13) Project [codegen id : 3]
Output [3]: [ss_item_sk#1, ss_ext_sales_price#3, ss_net_profit#4]
Input [5]: [ss_item_sk#1, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5, d_date_sk#9]

(14) Exchange
Input [3]: [ss_item_sk#1, ss_ext_sales_price#3, ss_net_profit#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(15) Sort [codegen id : 4]
Input [3]: [ss_item_sk#1, ss_ext_sales_price#3, ss_net_profit#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(16) Scan parquet spark_catalog.default.item
Output [3]: [i_item_sk#10, i_class#11, i_category#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(17) ColumnarToRow [codegen id : 5]
Input [3]: [i_item_sk#10, i_class#11, i_category#12]

(18) Filter [codegen id : 5]
Input [3]: [i_item_sk#10, i_class#11, i_category#12]
Condition : isnotnull(i_item_sk#10)

(19) Exchange
Input [3]: [i_item_sk#10, i_class#11, i_category#12]
Arguments: hashpartitioning(i_item_sk#10, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(20) Sort [codegen id : 6]
Input [3]: [i_item_sk#10, i_class#11, i_category#12]
Arguments: [i_item_sk#10 ASC NULLS FIRST], false, 0

(21) SortMergeJoin [codegen id : 7]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#10]
Join type: Inner
Join condition: None

(22) Project [codegen id : 7]
Output [4]: [ss_ext_sales_price#3, ss_net_profit#4, i_class#11, i_category#12]
Input [6]: [ss_item_sk#1, ss_ext_sales_price#3, ss_net_profit#4, i_item_sk#10, i_class#11, i_category#12]

(23) HashAggregate [codegen id : 7]
Input [4]: [ss_ext_sales_price#3, ss_net_profit#4, i_class#11, i_category#12]
Keys [2]: [i_category#12, i_class#11]
Functions [2]: [partial_sum(UnscaledValue(ss_net_profit#4)), partial_sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [2]: [sum#13, sum#14]
Results [4]: [i_category#12, i_class#11, sum#15, sum#16]

(24) Exchange
Input [4]: [i_category#12, i_class#11, sum#15, sum#16]
Arguments: hashpartitioning(i_category#12, i_class#11, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(25) HashAggregate [codegen id : 8]
Input [4]: [i_category#12, i_class#11, sum#15, sum#16]
Keys [2]: [i_category#12, i_class#11]
Functions [2]: [sum(UnscaledValue(ss_net_profit#4)), sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#4))#17, sum(UnscaledValue(ss_ext_sales_price#3))#18]
Results [6]: [cast((MakeDecimal(sum(UnscaledValue(ss_net_profit#4))#17,17,2) / MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#18,17,2)) as decimal(38,20)) AS gross_margin#19, i_category#12, i_class#11, 0 AS t_category#20, 0 AS t_class#21, 0 AS lochierarchy#22]

(26) ReusedExchange [Reuses operator id: 24]
Output [4]: [i_category#12, i_class#11, sum#23, sum#24]

(27) HashAggregate [codegen id : 16]
Input [4]: [i_category#12, i_class#11, sum#23, sum#24]
Keys [2]: [i_category#12, i_class#11]
Functions [2]: [sum(UnscaledValue(ss_net_profit#4)), sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#4))#25, sum(UnscaledValue(ss_ext_sales_price#3))#26]
Results [3]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#4))#25,17,2) AS ss_net_profit#27, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#26,17,2) AS ss_ext_sales_price#28, i_category#12]

(28) HashAggregate [codegen id : 16]
Input [3]: [ss_net_profit#27, ss_ext_sales_price#28, i_category#12]
Keys [1]: [i_category#12]
Functions [2]: [partial_sum(ss_net_profit#27), partial_sum(ss_ext_sales_price#28)]
Aggregate Attributes [4]: [sum#29, isEmpty#30, sum#31, isEmpty#32]
Results [5]: [i_category#12, sum#33, isEmpty#34, sum#35, isEmpty#36]

(29) Exchange
Input [5]: [i_category#12, sum#33, isEmpty#34, sum#35, isEmpty#36]
Arguments: hashpartitioning(i_category#12, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(30) HashAggregate [codegen id : 17]
Input [5]: [i_category#12, sum#33, isEmpty#34, sum#35, isEmpty#36]
Keys [1]: [i_category#12]
Functions [2]: [sum(ss_net_profit#27), sum(ss_ext_sales_price#28)]
Aggregate Attributes [2]: [sum(ss_net_profit#27)#37, sum(ss_ext_sales_price#28)#38]
Results [6]: [cast((sum(ss_net_profit#27)#37 / sum(ss_ext_sales_price#28)#38) as decimal(38,20)) AS gross_margin#39, i_category#12, null AS i_class#40, 0 AS t_category#41, 1 AS t_class#42, 1 AS lochierarchy#43]

(31) ReusedExchange [Reuses operator id: 24]
Output [4]: [i_category#12, i_class#11, sum#44, sum#45]

(32) HashAggregate [codegen id : 25]
Input [4]: [i_category#12, i_class#11, sum#44, sum#45]
Keys [2]: [i_category#12, i_class#11]
Functions [2]: [sum(UnscaledValue(ss_net_profit#4)), sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#4))#25, sum(UnscaledValue(ss_ext_sales_price#3))#26]
Results [2]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#4))#25,17,2) AS ss_net_profit#27, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#26,17,2) AS ss_ext_sales_price#28]

(33) HashAggregate [codegen id : 25]
Input [2]: [ss_net_profit#27, ss_ext_sales_price#28]
Keys: []
Functions [2]: [partial_sum(ss_net_profit#27), partial_sum(ss_ext_sales_price#28)]
Aggregate Attributes [4]: [sum#46, isEmpty#47, sum#48, isEmpty#49]
Results [4]: [sum#50, isEmpty#51, sum#52, isEmpty#53]

(34) Exchange
Input [4]: [sum#50, isEmpty#51, sum#52, isEmpty#53]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=6]

(35) HashAggregate [codegen id : 26]
Input [4]: [sum#50, isEmpty#51, sum#52, isEmpty#53]
Keys: []
Functions [2]: [sum(ss_net_profit#27), sum(ss_ext_sales_price#28)]
Aggregate Attributes [2]: [sum(ss_net_profit#27)#54, sum(ss_ext_sales_price#28)#55]
Results [6]: [cast((sum(ss_net_profit#27)#54 / sum(ss_ext_sales_price#28)#55) as decimal(38,20)) AS gross_margin#56, null AS i_category#57, null AS i_class#58, 1 AS t_category#59, 1 AS t_class#60, 2 AS lochierarchy#61]

(36) Union

(37) HashAggregate [codegen id : 27]
Input [6]: [gross_margin#19, i_category#12, i_class#11, t_category#20, t_class#21, lochierarchy#22]
Keys [6]: [gross_margin#19, i_category#12, i_class#11, t_category#20, t_class#21, lochierarchy#22]
Functions: []
Aggregate Attributes: []
Results [6]: [gross_margin#19, i_category#12, i_class#11, t_category#20, t_class#21, lochierarchy#22]

(38) Exchange
Input [6]: [gross_margin#19, i_category#12, i_class#11, t_category#20, t_class#21, lochierarchy#22]
Arguments: hashpartitioning(gross_margin#19, i_category#12, i_class#11, t_category#20, t_class#21, lochierarchy#22, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(39) HashAggregate [codegen id : 28]
Input [6]: [gross_margin#19, i_category#12, i_class#11, t_category#20, t_class#21, lochierarchy#22]
Keys [6]: [gross_margin#19, i_category#12, i_class#11, t_category#20, t_class#21, lochierarchy#22]
Functions: []
Aggregate Attributes: []
Results [5]: [gross_margin#19, i_category#12, i_class#11, lochierarchy#22, CASE WHEN (t_class#21 = 0) THEN i_category#12 END AS _w0#62]

(40) Exchange
Input [5]: [gross_margin#19, i_category#12, i_class#11, lochierarchy#22, _w0#62]
Arguments: hashpartitioning(lochierarchy#22, _w0#62, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(41) Sort [codegen id : 29]
Input [5]: [gross_margin#19, i_category#12, i_class#11, lochierarchy#22, _w0#62]
Arguments: [lochierarchy#22 ASC NULLS FIRST, _w0#62 ASC NULLS FIRST, gross_margin#19 ASC NULLS FIRST], false, 0

(42) Window
Input [5]: [gross_margin#19, i_category#12, i_class#11, lochierarchy#22, _w0#62]
Arguments: [rank(gross_margin#19) windowspecdefinition(lochierarchy#22, _w0#62, gross_margin#19 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#63], [lochierarchy#22, _w0#62], [gross_margin#19 ASC NULLS FIRST]

(43) Project [codegen id : 30]
Output [5]: [gross_margin#19, i_category#12, i_class#11, lochierarchy#22, rank_within_parent#63]
Input [6]: [gross_margin#19, i_category#12, i_class#11, lochierarchy#22, _w0#62, rank_within_parent#63]

(44) TakeOrderedAndProject
Input [5]: [gross_margin#19, i_category#12, i_class#11, lochierarchy#22, rank_within_parent#63]
Arguments: 100, [lochierarchy#22 DESC NULLS LAST, CASE WHEN (lochierarchy#22 = 0) THEN i_category#12 END ASC NULLS FIRST, rank_within_parent#63 ASC NULLS FIRST], [gross_margin#19, i_category#12, i_class#11, lochierarchy#22, rank_within_parent#63]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (49)
+- * Project (48)
   +- * Filter (47)
      +- * ColumnarToRow (46)
         +- Scan parquet spark_catalog.default.date_dim (45)


(45) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#9, d_year#64]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(46) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#64]

(47) Filter [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#64]
Condition : ((isnotnull(d_year#64) AND (d_year#64 = 2001)) AND isnotnull(d_date_sk#9))

(48) Project [codegen id : 1]
Output [1]: [d_date_sk#9]
Input [2]: [d_date_sk#9, d_year#64]

(49) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]


