== Physical Plan ==
TakeOrderedAndProject (54)
+- * HashAggregate (53)
   +- Exchange (52)
      +- * HashAggregate (51)
         +- * Project (50)
            +- * SortMergeJoin Inner (49)
               :- * Sort (37)
               :  +- Exchange (36)
               :     +- * Project (35)
               :        +- * BroadcastHashJoin Inner BuildRight (34)
               :           :- * Project (32)
               :           :  +- * SortMergeJoin Inner (31)
               :           :     :- * Sort (25)
               :           :     :  +- Exchange (24)
               :           :     :     +- * Project (23)
               :           :     :        +- * BroadcastHashJoin Inner BuildRight (22)
               :           :     :           :- * Project (17)
               :           :     :           :  +- * BroadcastHashJoin Inner BuildRight (16)
               :           :     :           :     :- * Project (10)
               :           :     :           :     :  +- * BroadcastHashJoin Inner BuildRight (9)
               :           :     :           :     :     :- * Filter (3)
               :           :     :           :     :     :  +- * ColumnarToRow (2)
               :           :     :           :     :     :     +- Scan parquet default.catalog_sales (1)
               :           :     :           :     :     +- BroadcastExchange (8)
               :           :     :           :     :        +- * Project (7)
               :           :     :           :     :           +- * Filter (6)
               :           :     :           :     :              +- * ColumnarToRow (5)
               :           :     :           :     :                 +- Scan parquet default.household_demographics (4)
               :           :     :           :     +- BroadcastExchange (15)
               :           :     :           :        +- * Project (14)
               :           :     :           :           +- * Filter (13)
               :           :     :           :              +- * ColumnarToRow (12)
               :           :     :           :                 +- Scan parquet default.customer_demographics (11)
               :           :     :           +- BroadcastExchange (21)
               :           :     :              +- * Filter (20)
               :           :     :                 +- * ColumnarToRow (19)
               :           :     :                    +- Scan parquet default.date_dim (18)
               :           :     +- * Sort (30)
               :           :        +- Exchange (29)
               :           :           +- * Filter (28)
               :           :              +- * ColumnarToRow (27)
               :           :                 +- Scan parquet default.item (26)
               :           +- ReusedExchange (33)
               +- * Sort (48)
                  +- Exchange (47)
                     +- * Project (46)
                        +- * BroadcastHashJoin Inner BuildRight (45)
                           :- * Filter (40)
                           :  +- * ColumnarToRow (39)
                           :     +- Scan parquet default.inventory (38)
                           +- BroadcastExchange (44)
                              +- * Filter (43)
                                 +- * ColumnarToRow (42)
                                    +- Scan parquet default.warehouse (41)


(1) Scan parquet default.catalog_sales
Output [6]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#6), dynamicpruningexpression(cs_sold_date_sk#6 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(cs_quantity), IsNotNull(cs_item_sk), IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_hdemo_sk), IsNotNull(cs_ship_date_sk)]
ReadSchema: struct<cs_ship_date_sk:int,cs_bill_cdemo_sk:int,cs_bill_hdemo_sk:int,cs_item_sk:int,cs_quantity:int>

(2) ColumnarToRow [codegen id : 4]
Input [6]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_sold_date_sk#6]

(3) Filter [codegen id : 4]
Input [6]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_sold_date_sk#6]
Condition : ((((isnotnull(cs_quantity#5) AND isnotnull(cs_item_sk#4)) AND isnotnull(cs_bill_cdemo_sk#2)) AND isnotnull(cs_bill_hdemo_sk#3)) AND isnotnull(cs_ship_date_sk#1))

(4) Scan parquet default.household_demographics
Output [2]: [hd_demo_sk#8, hd_buy_potential#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_buy_potential), EqualTo(hd_buy_potential,1001-5000      ), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [hd_demo_sk#8, hd_buy_potential#9]

(6) Filter [codegen id : 1]
Input [2]: [hd_demo_sk#8, hd_buy_potential#9]
Condition : ((isnotnull(hd_buy_potential#9) AND (hd_buy_potential#9 = 1001-5000      )) AND isnotnull(hd_demo_sk#8))

(7) Project [codegen id : 1]
Output [1]: [hd_demo_sk#8]
Input [2]: [hd_demo_sk#8, hd_buy_potential#9]

(8) BroadcastExchange
Input [1]: [hd_demo_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#10]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_bill_hdemo_sk#3]
Right keys [1]: [hd_demo_sk#8]
Join condition: None

(10) Project [codegen id : 4]
Output [5]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#4, cs_quantity#5, cs_sold_date_sk#6]
Input [7]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_sold_date_sk#6, hd_demo_sk#8]

(11) Scan parquet default.customer_demographics
Output [2]: [cd_demo_sk#11, cd_marital_status#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_marital_status), EqualTo(cd_marital_status,M), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [cd_demo_sk#11, cd_marital_status#12]

(13) Filter [codegen id : 2]
Input [2]: [cd_demo_sk#11, cd_marital_status#12]
Condition : ((isnotnull(cd_marital_status#12) AND (cd_marital_status#12 = M)) AND isnotnull(cd_demo_sk#11))

(14) Project [codegen id : 2]
Output [1]: [cd_demo_sk#11]
Input [2]: [cd_demo_sk#11, cd_marital_status#12]

(15) BroadcastExchange
Input [1]: [cd_demo_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13]

(16) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_bill_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#11]
Join condition: None

(17) Project [codegen id : 4]
Output [4]: [cs_ship_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_sold_date_sk#6]
Input [6]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#4, cs_quantity#5, cs_sold_date_sk#6, cd_demo_sk#11]

(18) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_date#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(19) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#14, d_date#15]

(20) Filter [codegen id : 3]
Input [2]: [d_date_sk#14, d_date#15]
Condition : (isnotnull(d_date#15) AND isnotnull(d_date_sk#14))

(21) BroadcastExchange
Input [2]: [d_date_sk#14, d_date#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#16]

(22) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_ship_date_sk#1]
Right keys [1]: [d_date_sk#14]
Join condition: None

(23) Project [codegen id : 4]
Output [4]: [cs_item_sk#4, cs_quantity#5, cs_sold_date_sk#6, d_date#15]
Input [6]: [cs_ship_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_sold_date_sk#6, d_date_sk#14, d_date#15]

(24) Exchange
Input [4]: [cs_item_sk#4, cs_quantity#5, cs_sold_date_sk#6, d_date#15]
Arguments: hashpartitioning(cs_item_sk#4, 5), ENSURE_REQUIREMENTS, [id=#17]

(25) Sort [codegen id : 5]
Input [4]: [cs_item_sk#4, cs_quantity#5, cs_sold_date_sk#6, d_date#15]
Arguments: [cs_item_sk#4 ASC NULLS FIRST], false, 0

(26) Scan parquet default.item
Output [2]: [i_item_sk#18, i_item_desc#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(27) ColumnarToRow [codegen id : 6]
Input [2]: [i_item_sk#18, i_item_desc#19]

(28) Filter [codegen id : 6]
Input [2]: [i_item_sk#18, i_item_desc#19]
Condition : isnotnull(i_item_sk#18)

(29) Exchange
Input [2]: [i_item_sk#18, i_item_desc#19]
Arguments: hashpartitioning(i_item_sk#18, 5), ENSURE_REQUIREMENTS, [id=#20]

(30) Sort [codegen id : 7]
Input [2]: [i_item_sk#18, i_item_desc#19]
Arguments: [i_item_sk#18 ASC NULLS FIRST], false, 0

(31) SortMergeJoin [codegen id : 10]
Left keys [1]: [cs_item_sk#4]
Right keys [1]: [i_item_sk#18]
Join condition: None

(32) Project [codegen id : 10]
Output [5]: [cs_item_sk#4, cs_quantity#5, cs_sold_date_sk#6, d_date#15, i_item_desc#19]
Input [6]: [cs_item_sk#4, cs_quantity#5, cs_sold_date_sk#6, d_date#15, i_item_sk#18, i_item_desc#19]

(33) ReusedExchange [Reuses operator id: 65]
Output [4]: [d_date_sk#21, d_date#22, d_week_seq#23, d_date_sk#24]

(34) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#6]
Right keys [1]: [d_date_sk#21]
Join condition: (d_date#15 > date_add(d_date#22, 5))

(35) Project [codegen id : 10]
Output [5]: [cs_item_sk#4, cs_quantity#5, i_item_desc#19, d_week_seq#23, d_date_sk#24]
Input [9]: [cs_item_sk#4, cs_quantity#5, cs_sold_date_sk#6, d_date#15, i_item_desc#19, d_date_sk#21, d_date#22, d_week_seq#23, d_date_sk#24]

(36) Exchange
Input [5]: [cs_item_sk#4, cs_quantity#5, i_item_desc#19, d_week_seq#23, d_date_sk#24]
Arguments: hashpartitioning(cs_item_sk#4, d_date_sk#24, 5), ENSURE_REQUIREMENTS, [id=#25]

(37) Sort [codegen id : 11]
Input [5]: [cs_item_sk#4, cs_quantity#5, i_item_desc#19, d_week_seq#23, d_date_sk#24]
Arguments: [cs_item_sk#4 ASC NULLS FIRST, d_date_sk#24 ASC NULLS FIRST], false, 0

(38) Scan parquet default.inventory
Output [4]: [inv_item_sk#26, inv_warehouse_sk#27, inv_quantity_on_hand#28, inv_date_sk#29]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(inv_date_sk#29), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(inv_quantity_on_hand), IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)]
ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(39) ColumnarToRow [codegen id : 13]
Input [4]: [inv_item_sk#26, inv_warehouse_sk#27, inv_quantity_on_hand#28, inv_date_sk#29]

(40) Filter [codegen id : 13]
Input [4]: [inv_item_sk#26, inv_warehouse_sk#27, inv_quantity_on_hand#28, inv_date_sk#29]
Condition : ((isnotnull(inv_quantity_on_hand#28) AND isnotnull(inv_item_sk#26)) AND isnotnull(inv_warehouse_sk#27))

(41) Scan parquet default.warehouse
Output [2]: [w_warehouse_sk#30, w_warehouse_name#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>

(42) ColumnarToRow [codegen id : 12]
Input [2]: [w_warehouse_sk#30, w_warehouse_name#31]

(43) Filter [codegen id : 12]
Input [2]: [w_warehouse_sk#30, w_warehouse_name#31]
Condition : isnotnull(w_warehouse_sk#30)

(44) BroadcastExchange
Input [2]: [w_warehouse_sk#30, w_warehouse_name#31]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#32]

(45) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [inv_warehouse_sk#27]
Right keys [1]: [w_warehouse_sk#30]
Join condition: None

(46) Project [codegen id : 13]
Output [4]: [inv_item_sk#26, inv_quantity_on_hand#28, inv_date_sk#29, w_warehouse_name#31]
Input [6]: [inv_item_sk#26, inv_warehouse_sk#27, inv_quantity_on_hand#28, inv_date_sk#29, w_warehouse_sk#30, w_warehouse_name#31]

(47) Exchange
Input [4]: [inv_item_sk#26, inv_quantity_on_hand#28, inv_date_sk#29, w_warehouse_name#31]
Arguments: hashpartitioning(inv_item_sk#26, inv_date_sk#29, 5), ENSURE_REQUIREMENTS, [id=#33]

(48) Sort [codegen id : 14]
Input [4]: [inv_item_sk#26, inv_quantity_on_hand#28, inv_date_sk#29, w_warehouse_name#31]
Arguments: [inv_item_sk#26 ASC NULLS FIRST, inv_date_sk#29 ASC NULLS FIRST], false, 0

(49) SortMergeJoin [codegen id : 15]
Left keys [2]: [cs_item_sk#4, d_date_sk#24]
Right keys [2]: [inv_item_sk#26, inv_date_sk#29]
Join condition: (inv_quantity_on_hand#28 < cs_quantity#5)

(50) Project [codegen id : 15]
Output [3]: [w_warehouse_name#31, i_item_desc#19, d_week_seq#23]
Input [9]: [cs_item_sk#4, cs_quantity#5, i_item_desc#19, d_week_seq#23, d_date_sk#24, inv_item_sk#26, inv_quantity_on_hand#28, inv_date_sk#29, w_warehouse_name#31]

(51) HashAggregate [codegen id : 15]
Input [3]: [w_warehouse_name#31, i_item_desc#19, d_week_seq#23]
Keys [3]: [i_item_desc#19, w_warehouse_name#31, d_week_seq#23]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#34]
Results [4]: [i_item_desc#19, w_warehouse_name#31, d_week_seq#23, count#35]

(52) Exchange
Input [4]: [i_item_desc#19, w_warehouse_name#31, d_week_seq#23, count#35]
Arguments: hashpartitioning(i_item_desc#19, w_warehouse_name#31, d_week_seq#23, 5), ENSURE_REQUIREMENTS, [id=#36]

(53) HashAggregate [codegen id : 16]
Input [4]: [i_item_desc#19, w_warehouse_name#31, d_week_seq#23, count#35]
Keys [3]: [i_item_desc#19, w_warehouse_name#31, d_week_seq#23]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#37]
Results [6]: [i_item_desc#19, w_warehouse_name#31, d_week_seq#23, count(1)#37 AS no_promo#38, count(1)#37 AS promo#39, count(1)#37 AS total_cnt#40]

(54) TakeOrderedAndProject
Input [6]: [i_item_desc#19, w_warehouse_name#31, d_week_seq#23, no_promo#38, promo#39, total_cnt#40]
Arguments: 100, [total_cnt#40 DESC NULLS LAST, i_item_desc#19 ASC NULLS FIRST, w_warehouse_name#31 ASC NULLS FIRST, d_week_seq#23 ASC NULLS FIRST], [i_item_desc#19, w_warehouse_name#31, d_week_seq#23, no_promo#38, promo#39, total_cnt#40]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#6 IN dynamicpruning#7
BroadcastExchange (65)
+- * Project (64)
   +- * BroadcastHashJoin Inner BuildLeft (63)
      :- BroadcastExchange (59)
      :  +- * Project (58)
      :     +- * Filter (57)
      :        +- * ColumnarToRow (56)
      :           +- Scan parquet default.date_dim (55)
      +- * Filter (62)
         +- * ColumnarToRow (61)
            +- Scan parquet default.date_dim (60)


(55) Scan parquet default.date_dim
Output [4]: [d_date_sk#21, d_date#22, d_week_seq#23, d_year#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk), IsNotNull(d_week_seq), IsNotNull(d_date)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_week_seq:int,d_year:int>

(56) ColumnarToRow [codegen id : 1]
Input [4]: [d_date_sk#21, d_date#22, d_week_seq#23, d_year#41]

(57) Filter [codegen id : 1]
Input [4]: [d_date_sk#21, d_date#22, d_week_seq#23, d_year#41]
Condition : ((((isnotnull(d_year#41) AND (d_year#41 = 2001)) AND isnotnull(d_date_sk#21)) AND isnotnull(d_week_seq#23)) AND isnotnull(d_date#22))

(58) Project [codegen id : 1]
Output [3]: [d_date_sk#21, d_date#22, d_week_seq#23]
Input [4]: [d_date_sk#21, d_date#22, d_week_seq#23, d_year#41]

(59) BroadcastExchange
Input [3]: [d_date_sk#21, d_date#22, d_week_seq#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#42]

(60) Scan parquet default.date_dim
Output [2]: [d_date_sk#24, d_week_seq#43]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(61) ColumnarToRow
Input [2]: [d_date_sk#24, d_week_seq#43]

(62) Filter
Input [2]: [d_date_sk#24, d_week_seq#43]
Condition : (isnotnull(d_week_seq#43) AND isnotnull(d_date_sk#24))

(63) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [d_week_seq#23]
Right keys [1]: [d_week_seq#43]
Join condition: None

(64) Project [codegen id : 2]
Output [4]: [d_date_sk#21, d_date#22, d_week_seq#23, d_date_sk#24]
Input [5]: [d_date_sk#21, d_date#22, d_week_seq#23, d_date_sk#24, d_week_seq#43]

(65) BroadcastExchange
Input [4]: [d_date_sk#21, d_date#22, d_week_seq#23, d_date_sk#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#44]


