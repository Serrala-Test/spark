== Physical Plan ==
TakeOrderedAndProject (37)
+- * Project (36)
   +- Window (35)
      +- * Sort (34)
         +- Exchange (33)
            +- * HashAggregate (32)
               +- Exchange (31)
                  +- * HashAggregate (30)
                     +- Union (29)
                        :- * HashAggregate (18)
                        :  +- Exchange (17)
                        :     +- * HashAggregate (16)
                        :        +- * Project (15)
                        :           +- * SortMergeJoin Inner (14)
                        :              :- * Sort (8)
                        :              :  +- Exchange (7)
                        :              :     +- * Project (6)
                        :              :        +- * BroadcastHashJoin Inner BuildRight (5)
                        :              :           :- * Filter (3)
                        :              :           :  +- * ColumnarToRow (2)
                        :              :           :     +- Scan parquet spark_catalog.default.web_sales (1)
                        :              :           +- ReusedExchange (4)
                        :              +- * Sort (13)
                        :                 +- Exchange (12)
                        :                    +- * Filter (11)
                        :                       +- * ColumnarToRow (10)
                        :                          +- Scan parquet spark_catalog.default.item (9)
                        :- * HashAggregate (23)
                        :  +- Exchange (22)
                        :     +- * HashAggregate (21)
                        :        +- * HashAggregate (20)
                        :           +- ReusedExchange (19)
                        +- * HashAggregate (28)
                           +- Exchange (27)
                              +- * HashAggregate (26)
                                 +- * HashAggregate (25)
                                    +- ReusedExchange (24)


(1) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#3), dynamicpruningexpression(ws_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_net_paid:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3]

(3) Filter [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3]
Condition : isnotnull(ws_item_sk#1)

(4) ReusedExchange [Reuses operator id: 42]
Output [1]: [d_date_sk#5]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join type: Inner
Join condition: None

(6) Project [codegen id : 2]
Output [2]: [ws_item_sk#1, ws_net_paid#2]
Input [4]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3, d_date_sk#5]

(7) Exchange
Input [2]: [ws_item_sk#1, ws_net_paid#2]
Arguments: hashpartitioning(ws_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(8) Sort [codegen id : 3]
Input [2]: [ws_item_sk#1, ws_net_paid#2]
Arguments: [ws_item_sk#1 ASC NULLS FIRST], false, 0

(9) Scan parquet spark_catalog.default.item
Output [3]: [i_item_sk#6, i_class#7, i_category#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(10) ColumnarToRow [codegen id : 4]
Input [3]: [i_item_sk#6, i_class#7, i_category#8]

(11) Filter [codegen id : 4]
Input [3]: [i_item_sk#6, i_class#7, i_category#8]
Condition : isnotnull(i_item_sk#6)

(12) Exchange
Input [3]: [i_item_sk#6, i_class#7, i_category#8]
Arguments: hashpartitioning(i_item_sk#6, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(13) Sort [codegen id : 5]
Input [3]: [i_item_sk#6, i_class#7, i_category#8]
Arguments: [i_item_sk#6 ASC NULLS FIRST], false, 0

(14) SortMergeJoin [codegen id : 6]
Left keys [1]: [ws_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(15) Project [codegen id : 6]
Output [3]: [ws_net_paid#2, i_class#7, i_category#8]
Input [5]: [ws_item_sk#1, ws_net_paid#2, i_item_sk#6, i_class#7, i_category#8]

(16) HashAggregate [codegen id : 6]
Input [3]: [ws_net_paid#2, i_class#7, i_category#8]
Keys [2]: [i_category#8, i_class#7]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#2))]
Aggregate Attributes [1]: [sum#9]
Results [3]: [i_category#8, i_class#7, sum#10]

(17) Exchange
Input [3]: [i_category#8, i_class#7, sum#10]
Arguments: hashpartitioning(i_category#8, i_class#7, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(18) HashAggregate [codegen id : 7]
Input [3]: [i_category#8, i_class#7, sum#10]
Keys [2]: [i_category#8, i_class#7]
Functions [1]: [sum(UnscaledValue(ws_net_paid#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#2))#11]
Results [6]: [cast(MakeDecimal(sum(UnscaledValue(ws_net_paid#2))#11,17,2) as decimal(27,2)) AS total_sum#12, i_category#8, i_class#7, 0 AS g_category#13, 0 AS g_class#14, 0 AS lochierarchy#15]

(19) ReusedExchange [Reuses operator id: 17]
Output [3]: [i_category#8, i_class#7, sum#16]

(20) HashAggregate [codegen id : 14]
Input [3]: [i_category#8, i_class#7, sum#16]
Keys [2]: [i_category#8, i_class#7]
Functions [1]: [sum(UnscaledValue(ws_net_paid#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#2))#11]
Results [2]: [MakeDecimal(sum(UnscaledValue(ws_net_paid#2))#11,17,2) AS total_sum#17, i_category#8]

(21) HashAggregate [codegen id : 14]
Input [2]: [total_sum#17, i_category#8]
Keys [1]: [i_category#8]
Functions [1]: [partial_sum(total_sum#17)]
Aggregate Attributes [2]: [sum#18, isEmpty#19]
Results [3]: [i_category#8, sum#20, isEmpty#21]

(22) Exchange
Input [3]: [i_category#8, sum#20, isEmpty#21]
Arguments: hashpartitioning(i_category#8, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(23) HashAggregate [codegen id : 15]
Input [3]: [i_category#8, sum#20, isEmpty#21]
Keys [1]: [i_category#8]
Functions [1]: [sum(total_sum#17)]
Aggregate Attributes [1]: [sum(total_sum#17)#22]
Results [6]: [sum(total_sum#17)#22 AS total_sum#23, i_category#8, null AS i_class#24, 0 AS g_category#25, 1 AS g_class#26, 1 AS lochierarchy#27]

(24) ReusedExchange [Reuses operator id: 17]
Output [3]: [i_category#8, i_class#7, sum#28]

(25) HashAggregate [codegen id : 22]
Input [3]: [i_category#8, i_class#7, sum#28]
Keys [2]: [i_category#8, i_class#7]
Functions [1]: [sum(UnscaledValue(ws_net_paid#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#2))#11]
Results [1]: [MakeDecimal(sum(UnscaledValue(ws_net_paid#2))#11,17,2) AS total_sum#17]

(26) HashAggregate [codegen id : 22]
Input [1]: [total_sum#17]
Keys: []
Functions [1]: [partial_sum(total_sum#17)]
Aggregate Attributes [2]: [sum#29, isEmpty#30]
Results [2]: [sum#31, isEmpty#32]

(27) Exchange
Input [2]: [sum#31, isEmpty#32]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=5]

(28) HashAggregate [codegen id : 23]
Input [2]: [sum#31, isEmpty#32]
Keys: []
Functions [1]: [sum(total_sum#17)]
Aggregate Attributes [1]: [sum(total_sum#17)#33]
Results [6]: [sum(total_sum#17)#33 AS total_sum#34, null AS i_category#35, null AS i_class#36, 1 AS g_category#37, 1 AS g_class#38, 2 AS lochierarchy#39]

(29) Union

(30) HashAggregate [codegen id : 24]
Input [6]: [total_sum#12, i_category#8, i_class#7, g_category#13, g_class#14, lochierarchy#15]
Keys [6]: [total_sum#12, i_category#8, i_class#7, g_category#13, g_class#14, lochierarchy#15]
Functions: []
Aggregate Attributes: []
Results [6]: [total_sum#12, i_category#8, i_class#7, g_category#13, g_class#14, lochierarchy#15]

(31) Exchange
Input [6]: [total_sum#12, i_category#8, i_class#7, g_category#13, g_class#14, lochierarchy#15]
Arguments: hashpartitioning(total_sum#12, i_category#8, i_class#7, g_category#13, g_class#14, lochierarchy#15, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(32) HashAggregate [codegen id : 25]
Input [6]: [total_sum#12, i_category#8, i_class#7, g_category#13, g_class#14, lochierarchy#15]
Keys [6]: [total_sum#12, i_category#8, i_class#7, g_category#13, g_class#14, lochierarchy#15]
Functions: []
Aggregate Attributes: []
Results [5]: [total_sum#12, i_category#8, i_class#7, lochierarchy#15, CASE WHEN (g_class#14 = 0) THEN i_category#8 END AS _w0#40]

(33) Exchange
Input [5]: [total_sum#12, i_category#8, i_class#7, lochierarchy#15, _w0#40]
Arguments: hashpartitioning(lochierarchy#15, _w0#40, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(34) Sort [codegen id : 26]
Input [5]: [total_sum#12, i_category#8, i_class#7, lochierarchy#15, _w0#40]
Arguments: [lochierarchy#15 ASC NULLS FIRST, _w0#40 ASC NULLS FIRST, total_sum#12 DESC NULLS LAST], false, 0

(35) Window
Input [5]: [total_sum#12, i_category#8, i_class#7, lochierarchy#15, _w0#40]
Arguments: [rank(total_sum#12) windowspecdefinition(lochierarchy#15, _w0#40, total_sum#12 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#41], [lochierarchy#15, _w0#40], [total_sum#12 DESC NULLS LAST]

(36) Project [codegen id : 27]
Output [5]: [total_sum#12, i_category#8, i_class#7, lochierarchy#15, rank_within_parent#41]
Input [6]: [total_sum#12, i_category#8, i_class#7, lochierarchy#15, _w0#40, rank_within_parent#41]

(37) TakeOrderedAndProject
Input [5]: [total_sum#12, i_category#8, i_class#7, lochierarchy#15, rank_within_parent#41]
Arguments: 100, [lochierarchy#15 DESC NULLS LAST, CASE WHEN (lochierarchy#15 = 0) THEN i_category#8 END ASC NULLS FIRST, rank_within_parent#41 ASC NULLS FIRST], [total_sum#12, i_category#8, i_class#7, lochierarchy#15, rank_within_parent#41]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (42)
+- * Project (41)
   +- * Filter (40)
      +- * ColumnarToRow (39)
         +- Scan parquet spark_catalog.default.date_dim (38)


(38) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#42]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(39) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#5, d_month_seq#42]

(40) Filter [codegen id : 1]
Input [2]: [d_date_sk#5, d_month_seq#42]
Condition : (((isnotnull(d_month_seq#42) AND (d_month_seq#42 >= 1212)) AND (d_month_seq#42 <= 1223)) AND isnotnull(d_date_sk#5))

(41) Project [codegen id : 1]
Output [1]: [d_date_sk#5]
Input [2]: [d_date_sk#5, d_month_seq#42]

(42) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]


