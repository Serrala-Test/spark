== Physical Plan ==
TakeOrderedAndProject (76)
+- * Project (75)
   +- * BroadcastHashJoin Inner BuildRight (74)
      :- * Project (59)
      :  +- * BroadcastHashJoin Inner BuildRight (58)
      :     :- * BroadcastHashJoin Inner BuildRight (38)
      :     :  :- * Filter (20)
      :     :  :  +- * HashAggregate (19)
      :     :  :     +- Exchange (18)
      :     :  :        +- * HashAggregate (17)
      :     :  :           +- * Project (16)
      :     :  :              +- * BroadcastHashJoin Inner BuildRight (15)
      :     :  :                 :- * Project (10)
      :     :  :                 :  +- * BroadcastHashJoin Inner BuildRight (9)
      :     :  :                 :     :- * Project (4)
      :     :  :                 :     :  +- * Filter (3)
      :     :  :                 :     :     +- * ColumnarToRow (2)
      :     :  :                 :     :        +- Scan parquet default.customer (1)
      :     :  :                 :     +- BroadcastExchange (8)
      :     :  :                 :        +- * Filter (7)
      :     :  :                 :           +- * ColumnarToRow (6)
      :     :  :                 :              +- Scan parquet default.store_sales (5)
      :     :  :                 +- BroadcastExchange (14)
      :     :  :                    +- * Filter (13)
      :     :  :                       +- * ColumnarToRow (12)
      :     :  :                          +- Scan parquet default.date_dim (11)
      :     :  +- BroadcastExchange (37)
      :     :     +- * HashAggregate (36)
      :     :        +- Exchange (35)
      :     :           +- * HashAggregate (34)
      :     :              +- * Project (33)
      :     :                 +- * BroadcastHashJoin Inner BuildRight (32)
      :     :                    :- * Project (27)
      :     :                    :  +- * BroadcastHashJoin Inner BuildRight (26)
      :     :                    :     :- * Project (24)
      :     :                    :     :  +- * Filter (23)
      :     :                    :     :     +- * ColumnarToRow (22)
      :     :                    :     :        +- Scan parquet default.customer (21)
      :     :                    :     +- ReusedExchange (25)
      :     :                    +- BroadcastExchange (31)
      :     :                       +- * Filter (30)
      :     :                          +- * ColumnarToRow (29)
      :     :                             +- Scan parquet default.date_dim (28)
      :     +- BroadcastExchange (57)
      :        +- * Project (56)
      :           +- * Filter (55)
      :              +- * HashAggregate (54)
      :                 +- Exchange (53)
      :                    +- * HashAggregate (52)
      :                       +- * Project (51)
      :                          +- * BroadcastHashJoin Inner BuildRight (50)
      :                             :- * Project (48)
      :                             :  +- * BroadcastHashJoin Inner BuildRight (47)
      :                             :     :- * Project (42)
      :                             :     :  +- * Filter (41)
      :                             :     :     +- * ColumnarToRow (40)
      :                             :     :        +- Scan parquet default.customer (39)
      :                             :     +- BroadcastExchange (46)
      :                             :        +- * Filter (45)
      :                             :           +- * ColumnarToRow (44)
      :                             :              +- Scan parquet default.web_sales (43)
      :                             +- ReusedExchange (49)
      +- BroadcastExchange (73)
         +- * HashAggregate (72)
            +- Exchange (71)
               +- * HashAggregate (70)
                  +- * Project (69)
                     +- * BroadcastHashJoin Inner BuildRight (68)
                        :- * Project (66)
                        :  +- * BroadcastHashJoin Inner BuildRight (65)
                        :     :- * Project (63)
                        :     :  +- * Filter (62)
                        :     :     +- * ColumnarToRow (61)
                        :     :        +- Scan parquet default.customer (60)
                        :     +- ReusedExchange (64)
                        +- ReusedExchange (67)


(1) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(2) ColumnarToRow [codegen id : 3]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(3) Filter [codegen id : 3]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true)))

(4) Project [codegen id : 3]
Output [8]: [c_customer_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true) AS c_customer_id#9, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#3, 20, false, true) AS c_first_name#10, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#4, 30, false, true) AS c_last_name#11, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_preferred_cust_flag#5, 1, false, true) AS c_preferred_cust_flag#12, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, c_birth_country#6, 20, false, true) AS c_birth_country#13, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_login#7, 13, false, true) AS c_login#14, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_email_address#8, 50, false, true) AS c_email_address#15]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(5) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#16, ss_customer_sk#17, ss_ext_discount_amt#18, ss_ext_list_price#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(6) ColumnarToRow [codegen id : 1]
Input [4]: [ss_sold_date_sk#16, ss_customer_sk#17, ss_ext_discount_amt#18, ss_ext_list_price#19]

(7) Filter [codegen id : 1]
Input [4]: [ss_sold_date_sk#16, ss_customer_sk#17, ss_ext_discount_amt#18, ss_ext_list_price#19]
Condition : (isnotnull(ss_customer_sk#17) AND isnotnull(ss_sold_date_sk#16))

(8) BroadcastExchange
Input [4]: [ss_sold_date_sk#16, ss_customer_sk#17, ss_ext_discount_amt#18, ss_ext_list_price#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#20]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#17]
Join condition: None

(10) Project [codegen id : 3]
Output [10]: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, ss_sold_date_sk#16, ss_ext_discount_amt#18, ss_ext_list_price#19]
Input [12]: [c_customer_sk#1, c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, ss_sold_date_sk#16, ss_customer_sk#17, ss_ext_discount_amt#18, ss_ext_list_price#19]

(11) Scan parquet default.date_dim
Output [2]: [d_date_sk#21, d_year#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#21, d_year#22]

(13) Filter [codegen id : 2]
Input [2]: [d_date_sk#21, d_year#22]
Condition : ((isnotnull(d_year#22) AND (d_year#22 = 2001)) AND isnotnull(d_date_sk#21))

(14) BroadcastExchange
Input [2]: [d_date_sk#21, d_year#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#23]

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#16]
Right keys [1]: [d_date_sk#21]
Join condition: None

(16) Project [codegen id : 3]
Output [10]: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, ss_ext_discount_amt#18, ss_ext_list_price#19, d_year#22]
Input [12]: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, ss_sold_date_sk#16, ss_ext_discount_amt#18, ss_ext_list_price#19, d_date_sk#21, d_year#22]

(17) HashAggregate [codegen id : 3]
Input [10]: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, ss_ext_discount_amt#18, ss_ext_list_price#19, d_year#22]
Keys [8]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#22, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#19 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#18 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#24]
Results [9]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#22, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, sum#25]

(18) Exchange
Input [9]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#22, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, sum#25]
Arguments: hashpartitioning(c_customer_id#9, c_first_name#10, c_last_name#11, d_year#22, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, 5), ENSURE_REQUIREMENTS, [id=#26]

(19) HashAggregate [codegen id : 16]
Input [9]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#22, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, sum#25]
Keys [8]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#22, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#19 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#18 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#19 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#18 as decimal(8,2)))), DecimalType(8,2), true)))#27]
Results [2]: [c_customer_id#9 AS customer_id#28, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#19 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#18 as decimal(8,2)))), DecimalType(8,2), true)))#27,18,2) AS year_total#29]

(20) Filter [codegen id : 16]
Input [2]: [customer_id#28, year_total#29]
Condition : (isnotnull(year_total#29) AND (year_total#29 > 0.00))

(21) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(22) ColumnarToRow [codegen id : 6]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(23) Filter [codegen id : 6]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true)))

(24) Project [codegen id : 6]
Output [8]: [c_customer_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true) AS c_customer_id#30, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#3, 20, false, true) AS c_first_name#31, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#4, 30, false, true) AS c_last_name#32, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_preferred_cust_flag#5, 1, false, true) AS c_preferred_cust_flag#33, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, c_birth_country#6, 20, false, true) AS c_birth_country#34, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_login#7, 13, false, true) AS c_login#35, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_email_address#8, 50, false, true) AS c_email_address#36]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(25) ReusedExchange [Reuses operator id: 8]
Output [4]: [ss_sold_date_sk#16, ss_customer_sk#17, ss_ext_discount_amt#18, ss_ext_list_price#19]

(26) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#17]
Join condition: None

(27) Project [codegen id : 6]
Output [10]: [c_customer_id#30, c_first_name#31, c_last_name#32, c_preferred_cust_flag#33, c_birth_country#34, c_login#35, c_email_address#36, ss_sold_date_sk#16, ss_ext_discount_amt#18, ss_ext_list_price#19]
Input [12]: [c_customer_sk#1, c_customer_id#30, c_first_name#31, c_last_name#32, c_preferred_cust_flag#33, c_birth_country#34, c_login#35, c_email_address#36, ss_sold_date_sk#16, ss_customer_sk#17, ss_ext_discount_amt#18, ss_ext_list_price#19]

(28) Scan parquet default.date_dim
Output [2]: [d_date_sk#21, d_year#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(29) ColumnarToRow [codegen id : 5]
Input [2]: [d_date_sk#21, d_year#22]

(30) Filter [codegen id : 5]
Input [2]: [d_date_sk#21, d_year#22]
Condition : ((isnotnull(d_year#22) AND (d_year#22 = 2002)) AND isnotnull(d_date_sk#21))

(31) BroadcastExchange
Input [2]: [d_date_sk#21, d_year#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#37]

(32) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#16]
Right keys [1]: [d_date_sk#21]
Join condition: None

(33) Project [codegen id : 6]
Output [10]: [c_customer_id#30, c_first_name#31, c_last_name#32, c_preferred_cust_flag#33, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#18, ss_ext_list_price#19, d_year#22]
Input [12]: [c_customer_id#30, c_first_name#31, c_last_name#32, c_preferred_cust_flag#33, c_birth_country#34, c_login#35, c_email_address#36, ss_sold_date_sk#16, ss_ext_discount_amt#18, ss_ext_list_price#19, d_date_sk#21, d_year#22]

(34) HashAggregate [codegen id : 6]
Input [10]: [c_customer_id#30, c_first_name#31, c_last_name#32, c_preferred_cust_flag#33, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#18, ss_ext_list_price#19, d_year#22]
Keys [8]: [c_customer_id#30, c_first_name#31, c_last_name#32, d_year#22, c_preferred_cust_flag#33, c_birth_country#34, c_login#35, c_email_address#36]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#19 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#18 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#38]
Results [9]: [c_customer_id#30, c_first_name#31, c_last_name#32, d_year#22, c_preferred_cust_flag#33, c_birth_country#34, c_login#35, c_email_address#36, sum#39]

(35) Exchange
Input [9]: [c_customer_id#30, c_first_name#31, c_last_name#32, d_year#22, c_preferred_cust_flag#33, c_birth_country#34, c_login#35, c_email_address#36, sum#39]
Arguments: hashpartitioning(c_customer_id#30, c_first_name#31, c_last_name#32, d_year#22, c_preferred_cust_flag#33, c_birth_country#34, c_login#35, c_email_address#36, 5), ENSURE_REQUIREMENTS, [id=#40]

(36) HashAggregate [codegen id : 7]
Input [9]: [c_customer_id#30, c_first_name#31, c_last_name#32, d_year#22, c_preferred_cust_flag#33, c_birth_country#34, c_login#35, c_email_address#36, sum#39]
Keys [8]: [c_customer_id#30, c_first_name#31, c_last_name#32, d_year#22, c_preferred_cust_flag#33, c_birth_country#34, c_login#35, c_email_address#36]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#19 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#18 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#19 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#18 as decimal(8,2)))), DecimalType(8,2), true)))#41]
Results [5]: [c_customer_id#30 AS customer_id#42, c_first_name#31 AS customer_first_name#43, c_last_name#32 AS customer_last_name#44, c_email_address#36 AS customer_email_address#45, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#19 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#18 as decimal(8,2)))), DecimalType(8,2), true)))#41,18,2) AS year_total#46]

(37) BroadcastExchange
Input [5]: [customer_id#42, customer_first_name#43, customer_last_name#44, customer_email_address#45, year_total#46]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#47]

(38) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [customer_id#28]
Right keys [1]: [customer_id#42]
Join condition: None

(39) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(40) ColumnarToRow [codegen id : 10]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(41) Filter [codegen id : 10]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true)))

(42) Project [codegen id : 10]
Output [8]: [c_customer_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true) AS c_customer_id#48, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#3, 20, false, true) AS c_first_name#49, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#4, 30, false, true) AS c_last_name#50, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_preferred_cust_flag#5, 1, false, true) AS c_preferred_cust_flag#51, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, c_birth_country#6, 20, false, true) AS c_birth_country#52, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_login#7, 13, false, true) AS c_login#53, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_email_address#8, 50, false, true) AS c_email_address#54]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(43) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#55, ws_bill_customer_sk#56, ws_ext_discount_amt#57, ws_ext_list_price#58]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(44) ColumnarToRow [codegen id : 8]
Input [4]: [ws_sold_date_sk#55, ws_bill_customer_sk#56, ws_ext_discount_amt#57, ws_ext_list_price#58]

(45) Filter [codegen id : 8]
Input [4]: [ws_sold_date_sk#55, ws_bill_customer_sk#56, ws_ext_discount_amt#57, ws_ext_list_price#58]
Condition : (isnotnull(ws_bill_customer_sk#56) AND isnotnull(ws_sold_date_sk#55))

(46) BroadcastExchange
Input [4]: [ws_sold_date_sk#55, ws_bill_customer_sk#56, ws_ext_discount_amt#57, ws_ext_list_price#58]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#59]

(47) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#56]
Join condition: None

(48) Project [codegen id : 10]
Output [10]: [c_customer_id#48, c_first_name#49, c_last_name#50, c_preferred_cust_flag#51, c_birth_country#52, c_login#53, c_email_address#54, ws_sold_date_sk#55, ws_ext_discount_amt#57, ws_ext_list_price#58]
Input [12]: [c_customer_sk#1, c_customer_id#48, c_first_name#49, c_last_name#50, c_preferred_cust_flag#51, c_birth_country#52, c_login#53, c_email_address#54, ws_sold_date_sk#55, ws_bill_customer_sk#56, ws_ext_discount_amt#57, ws_ext_list_price#58]

(49) ReusedExchange [Reuses operator id: 14]
Output [2]: [d_date_sk#21, d_year#22]

(50) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_sold_date_sk#55]
Right keys [1]: [d_date_sk#21]
Join condition: None

(51) Project [codegen id : 10]
Output [10]: [c_customer_id#48, c_first_name#49, c_last_name#50, c_preferred_cust_flag#51, c_birth_country#52, c_login#53, c_email_address#54, ws_ext_discount_amt#57, ws_ext_list_price#58, d_year#22]
Input [12]: [c_customer_id#48, c_first_name#49, c_last_name#50, c_preferred_cust_flag#51, c_birth_country#52, c_login#53, c_email_address#54, ws_sold_date_sk#55, ws_ext_discount_amt#57, ws_ext_list_price#58, d_date_sk#21, d_year#22]

(52) HashAggregate [codegen id : 10]
Input [10]: [c_customer_id#48, c_first_name#49, c_last_name#50, c_preferred_cust_flag#51, c_birth_country#52, c_login#53, c_email_address#54, ws_ext_discount_amt#57, ws_ext_list_price#58, d_year#22]
Keys [8]: [c_customer_id#48, c_first_name#49, c_last_name#50, c_preferred_cust_flag#51, c_birth_country#52, c_login#53, c_email_address#54, d_year#22]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#58 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#57 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#60]
Results [9]: [c_customer_id#48, c_first_name#49, c_last_name#50, c_preferred_cust_flag#51, c_birth_country#52, c_login#53, c_email_address#54, d_year#22, sum#61]

(53) Exchange
Input [9]: [c_customer_id#48, c_first_name#49, c_last_name#50, c_preferred_cust_flag#51, c_birth_country#52, c_login#53, c_email_address#54, d_year#22, sum#61]
Arguments: hashpartitioning(c_customer_id#48, c_first_name#49, c_last_name#50, c_preferred_cust_flag#51, c_birth_country#52, c_login#53, c_email_address#54, d_year#22, 5), ENSURE_REQUIREMENTS, [id=#62]

(54) HashAggregate [codegen id : 11]
Input [9]: [c_customer_id#48, c_first_name#49, c_last_name#50, c_preferred_cust_flag#51, c_birth_country#52, c_login#53, c_email_address#54, d_year#22, sum#61]
Keys [8]: [c_customer_id#48, c_first_name#49, c_last_name#50, c_preferred_cust_flag#51, c_birth_country#52, c_login#53, c_email_address#54, d_year#22]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#58 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#57 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#58 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#57 as decimal(8,2)))), DecimalType(8,2), true)))#63]
Results [2]: [c_customer_id#48 AS customer_id#64, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#58 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#57 as decimal(8,2)))), DecimalType(8,2), true)))#63,18,2) AS year_total#65]

(55) Filter [codegen id : 11]
Input [2]: [customer_id#64, year_total#65]
Condition : (isnotnull(year_total#65) AND (year_total#65 > 0.00))

(56) Project [codegen id : 11]
Output [2]: [customer_id#64 AS customer_id#66, year_total#65 AS year_total#67]
Input [2]: [customer_id#64, year_total#65]

(57) BroadcastExchange
Input [2]: [customer_id#66, year_total#67]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#68]

(58) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [customer_id#28]
Right keys [1]: [customer_id#66]
Join condition: None

(59) Project [codegen id : 16]
Output [8]: [customer_id#28, year_total#29, customer_id#42, customer_first_name#43, customer_last_name#44, customer_email_address#45, year_total#46, year_total#67]
Input [9]: [customer_id#28, year_total#29, customer_id#42, customer_first_name#43, customer_last_name#44, customer_email_address#45, year_total#46, customer_id#66, year_total#67]

(60) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(61) ColumnarToRow [codegen id : 14]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(62) Filter [codegen id : 14]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true)))

(63) Project [codegen id : 14]
Output [8]: [c_customer_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true) AS c_customer_id#69, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#3, 20, false, true) AS c_first_name#70, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#4, 30, false, true) AS c_last_name#71, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_preferred_cust_flag#5, 1, false, true) AS c_preferred_cust_flag#72, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, c_birth_country#6, 20, false, true) AS c_birth_country#73, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_login#7, 13, false, true) AS c_login#74, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_email_address#8, 50, false, true) AS c_email_address#75]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(64) ReusedExchange [Reuses operator id: 46]
Output [4]: [ws_sold_date_sk#55, ws_bill_customer_sk#56, ws_ext_discount_amt#57, ws_ext_list_price#58]

(65) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#56]
Join condition: None

(66) Project [codegen id : 14]
Output [10]: [c_customer_id#69, c_first_name#70, c_last_name#71, c_preferred_cust_flag#72, c_birth_country#73, c_login#74, c_email_address#75, ws_sold_date_sk#55, ws_ext_discount_amt#57, ws_ext_list_price#58]
Input [12]: [c_customer_sk#1, c_customer_id#69, c_first_name#70, c_last_name#71, c_preferred_cust_flag#72, c_birth_country#73, c_login#74, c_email_address#75, ws_sold_date_sk#55, ws_bill_customer_sk#56, ws_ext_discount_amt#57, ws_ext_list_price#58]

(67) ReusedExchange [Reuses operator id: 31]
Output [2]: [d_date_sk#21, d_year#22]

(68) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_sold_date_sk#55]
Right keys [1]: [d_date_sk#21]
Join condition: None

(69) Project [codegen id : 14]
Output [10]: [c_customer_id#69, c_first_name#70, c_last_name#71, c_preferred_cust_flag#72, c_birth_country#73, c_login#74, c_email_address#75, ws_ext_discount_amt#57, ws_ext_list_price#58, d_year#22]
Input [12]: [c_customer_id#69, c_first_name#70, c_last_name#71, c_preferred_cust_flag#72, c_birth_country#73, c_login#74, c_email_address#75, ws_sold_date_sk#55, ws_ext_discount_amt#57, ws_ext_list_price#58, d_date_sk#21, d_year#22]

(70) HashAggregate [codegen id : 14]
Input [10]: [c_customer_id#69, c_first_name#70, c_last_name#71, c_preferred_cust_flag#72, c_birth_country#73, c_login#74, c_email_address#75, ws_ext_discount_amt#57, ws_ext_list_price#58, d_year#22]
Keys [8]: [c_customer_id#69, c_first_name#70, c_last_name#71, c_preferred_cust_flag#72, c_birth_country#73, c_login#74, c_email_address#75, d_year#22]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#58 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#57 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#76]
Results [9]: [c_customer_id#69, c_first_name#70, c_last_name#71, c_preferred_cust_flag#72, c_birth_country#73, c_login#74, c_email_address#75, d_year#22, sum#77]

(71) Exchange
Input [9]: [c_customer_id#69, c_first_name#70, c_last_name#71, c_preferred_cust_flag#72, c_birth_country#73, c_login#74, c_email_address#75, d_year#22, sum#77]
Arguments: hashpartitioning(c_customer_id#69, c_first_name#70, c_last_name#71, c_preferred_cust_flag#72, c_birth_country#73, c_login#74, c_email_address#75, d_year#22, 5), ENSURE_REQUIREMENTS, [id=#78]

(72) HashAggregate [codegen id : 15]
Input [9]: [c_customer_id#69, c_first_name#70, c_last_name#71, c_preferred_cust_flag#72, c_birth_country#73, c_login#74, c_email_address#75, d_year#22, sum#77]
Keys [8]: [c_customer_id#69, c_first_name#70, c_last_name#71, c_preferred_cust_flag#72, c_birth_country#73, c_login#74, c_email_address#75, d_year#22]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#58 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#57 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#58 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#57 as decimal(8,2)))), DecimalType(8,2), true)))#79]
Results [2]: [c_customer_id#69 AS customer_id#80, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#58 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#57 as decimal(8,2)))), DecimalType(8,2), true)))#79,18,2) AS year_total#81]

(73) BroadcastExchange
Input [2]: [customer_id#80, year_total#81]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#82]

(74) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [customer_id#28]
Right keys [1]: [customer_id#80]
Join condition: (CASE WHEN (year_total#67 > 0.00) THEN CheckOverflow((promote_precision(year_total#81) / promote_precision(year_total#67)), DecimalType(38,20), true) ELSE 0E-20 END > CASE WHEN (year_total#29 > 0.00) THEN CheckOverflow((promote_precision(year_total#46) / promote_precision(year_total#29)), DecimalType(38,20), true) ELSE 0E-20 END)

(75) Project [codegen id : 16]
Output [4]: [customer_id#42, customer_first_name#43, customer_last_name#44, customer_email_address#45]
Input [10]: [customer_id#28, year_total#29, customer_id#42, customer_first_name#43, customer_last_name#44, customer_email_address#45, year_total#46, year_total#67, customer_id#80, year_total#81]

(76) TakeOrderedAndProject
Input [4]: [customer_id#42, customer_first_name#43, customer_last_name#44, customer_email_address#45]
Arguments: 100, [customer_id#42 ASC NULLS FIRST, customer_first_name#43 ASC NULLS FIRST, customer_last_name#44 ASC NULLS FIRST, customer_email_address#45 ASC NULLS FIRST], [customer_id#42, customer_first_name#43, customer_last_name#44, customer_email_address#45]

