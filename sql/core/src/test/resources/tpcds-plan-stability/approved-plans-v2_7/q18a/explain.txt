== Physical Plan ==
TakeOrderedAndProject (160)
+- Union (159)
   :- * HashAggregate (47)
   :  +- Exchange (46)
   :     +- * HashAggregate (45)
   :        +- * Project (44)
   :           +- * BroadcastHashJoin Inner BuildRight (43)
   :              :- * Project (37)
   :              :  +- * BroadcastHashJoin Inner BuildRight (36)
   :              :     :- * Project (30)
   :              :     :  +- * BroadcastHashJoin Inner BuildRight (29)
   :              :     :     :- * Project (23)
   :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (22)
   :              :     :     :     :- * Project (17)
   :              :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (16)
   :              :     :     :     :     :- * Project (10)
   :              :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (9)
   :              :     :     :     :     :     :- * Filter (3)
   :              :     :     :     :     :     :  +- * ColumnarToRow (2)
   :              :     :     :     :     :     :     +- Scan parquet default.catalog_sales (1)
   :              :     :     :     :     :     +- BroadcastExchange (8)
   :              :     :     :     :     :        +- * Project (7)
   :              :     :     :     :     :           +- * Filter (6)
   :              :     :     :     :     :              +- * ColumnarToRow (5)
   :              :     :     :     :     :                 +- Scan parquet default.customer_demographics (4)
   :              :     :     :     :     +- BroadcastExchange (15)
   :              :     :     :     :        +- * Project (14)
   :              :     :     :     :           +- * Filter (13)
   :              :     :     :     :              +- * ColumnarToRow (12)
   :              :     :     :     :                 +- Scan parquet default.customer (11)
   :              :     :     :     +- BroadcastExchange (21)
   :              :     :     :        +- * Filter (20)
   :              :     :     :           +- * ColumnarToRow (19)
   :              :     :     :              +- Scan parquet default.customer_demographics (18)
   :              :     :     +- BroadcastExchange (28)
   :              :     :        +- * Project (27)
   :              :     :           +- * Filter (26)
   :              :     :              +- * ColumnarToRow (25)
   :              :     :                 +- Scan parquet default.customer_address (24)
   :              :     +- BroadcastExchange (35)
   :              :        +- * Project (34)
   :              :           +- * Filter (33)
   :              :              +- * ColumnarToRow (32)
   :              :                 +- Scan parquet default.date_dim (31)
   :              +- BroadcastExchange (42)
   :                 +- * Project (41)
   :                    +- * Filter (40)
   :                       +- * ColumnarToRow (39)
   :                          +- Scan parquet default.item (38)
   :- * HashAggregate (75)
   :  +- Exchange (74)
   :     +- * HashAggregate (73)
   :        +- * Project (72)
   :           +- * BroadcastHashJoin Inner BuildRight (71)
   :              :- * Project (69)
   :              :  +- * BroadcastHashJoin Inner BuildRight (68)
   :              :     :- * Project (66)
   :              :     :  +- * BroadcastHashJoin Inner BuildRight (65)
   :              :     :     :- * Project (59)
   :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (58)
   :              :     :     :     :- * Project (56)
   :              :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (55)
   :              :     :     :     :     :- * Project (53)
   :              :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (52)
   :              :     :     :     :     :     :- * Filter (50)
   :              :     :     :     :     :     :  +- * ColumnarToRow (49)
   :              :     :     :     :     :     :     +- Scan parquet default.catalog_sales (48)
   :              :     :     :     :     :     +- ReusedExchange (51)
   :              :     :     :     :     +- ReusedExchange (54)
   :              :     :     :     +- ReusedExchange (57)
   :              :     :     +- BroadcastExchange (64)
   :              :     :        +- * Project (63)
   :              :     :           +- * Filter (62)
   :              :     :              +- * ColumnarToRow (61)
   :              :     :                 +- Scan parquet default.customer_address (60)
   :              :     +- ReusedExchange (67)
   :              +- ReusedExchange (70)
   :- * HashAggregate (103)
   :  +- Exchange (102)
   :     +- * HashAggregate (101)
   :        +- * Project (100)
   :           +- * BroadcastHashJoin Inner BuildRight (99)
   :              :- * Project (97)
   :              :  +- * BroadcastHashJoin Inner BuildRight (96)
   :              :     :- * Project (94)
   :              :     :  +- * BroadcastHashJoin Inner BuildRight (93)
   :              :     :     :- * Project (87)
   :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (86)
   :              :     :     :     :- * Project (84)
   :              :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (83)
   :              :     :     :     :     :- * Project (81)
   :              :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (80)
   :              :     :     :     :     :     :- * Filter (78)
   :              :     :     :     :     :     :  +- * ColumnarToRow (77)
   :              :     :     :     :     :     :     +- Scan parquet default.catalog_sales (76)
   :              :     :     :     :     :     +- ReusedExchange (79)
   :              :     :     :     :     +- ReusedExchange (82)
   :              :     :     :     +- ReusedExchange (85)
   :              :     :     +- BroadcastExchange (92)
   :              :     :        +- * Project (91)
   :              :     :           +- * Filter (90)
   :              :     :              +- * ColumnarToRow (89)
   :              :     :                 +- Scan parquet default.customer_address (88)
   :              :     +- ReusedExchange (95)
   :              +- ReusedExchange (98)
   :- * HashAggregate (131)
   :  +- Exchange (130)
   :     +- * HashAggregate (129)
   :        +- * Project (128)
   :           +- * BroadcastHashJoin Inner BuildRight (127)
   :              :- * Project (125)
   :              :  +- * BroadcastHashJoin Inner BuildRight (124)
   :              :     :- * Project (122)
   :              :     :  +- * BroadcastHashJoin Inner BuildRight (121)
   :              :     :     :- * Project (115)
   :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (114)
   :              :     :     :     :- * Project (112)
   :              :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (111)
   :              :     :     :     :     :- * Project (109)
   :              :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (108)
   :              :     :     :     :     :     :- * Filter (106)
   :              :     :     :     :     :     :  +- * ColumnarToRow (105)
   :              :     :     :     :     :     :     +- Scan parquet default.catalog_sales (104)
   :              :     :     :     :     :     +- ReusedExchange (107)
   :              :     :     :     :     +- ReusedExchange (110)
   :              :     :     :     +- ReusedExchange (113)
   :              :     :     +- BroadcastExchange (120)
   :              :     :        +- * Project (119)
   :              :     :           +- * Filter (118)
   :              :     :              +- * ColumnarToRow (117)
   :              :     :                 +- Scan parquet default.customer_address (116)
   :              :     +- ReusedExchange (123)
   :              +- ReusedExchange (126)
   +- * HashAggregate (158)
      +- Exchange (157)
         +- * HashAggregate (156)
            +- * Project (155)
               +- * BroadcastHashJoin Inner BuildRight (154)
                  :- * Project (149)
                  :  +- * BroadcastHashJoin Inner BuildRight (148)
                  :     :- * Project (146)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (145)
                  :     :     :- * Project (143)
                  :     :     :  +- * BroadcastHashJoin Inner BuildRight (142)
                  :     :     :     :- * Project (140)
                  :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (139)
                  :     :     :     :     :- * Project (137)
                  :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (136)
                  :     :     :     :     :     :- * Filter (134)
                  :     :     :     :     :     :  +- * ColumnarToRow (133)
                  :     :     :     :     :     :     +- Scan parquet default.catalog_sales (132)
                  :     :     :     :     :     +- ReusedExchange (135)
                  :     :     :     :     +- ReusedExchange (138)
                  :     :     :     +- ReusedExchange (141)
                  :     :     +- ReusedExchange (144)
                  :     +- ReusedExchange (147)
                  +- BroadcastExchange (153)
                     +- * Filter (152)
                        +- * ColumnarToRow (151)
                           +- Scan parquet default.item (150)


(1) Scan parquet default.catalog_sales
Output [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 7]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]

(3) Filter [codegen id : 7]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Condition : (((isnotnull(cs_bill_cdemo_sk#3) AND isnotnull(cs_bill_customer_sk#2)) AND isnotnull(cs_sold_date_sk#1)) AND isnotnull(cs_item_sk#4))

(4) Scan parquet default.customer_demographics
Output [4]: [cd_demo_sk#10, cd_gender#11, cd_education_status#12, cd_dep_count#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_education_status:string,cd_dep_count:int>

(5) ColumnarToRow [codegen id : 1]
Input [4]: [cd_demo_sk#10, cd_gender#11, cd_education_status#12, cd_dep_count#13]

(6) Filter [codegen id : 1]
Input [4]: [cd_demo_sk#10, cd_gender#11, cd_education_status#12, cd_dep_count#13]
Condition : (((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_gender#11, 1, false, true) = M) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_education_status#12, 20, false, true) = College             )) AND isnotnull(cd_demo_sk#10))

(7) Project [codegen id : 1]
Output [2]: [cd_demo_sk#10, cd_dep_count#13]
Input [4]: [cd_demo_sk#10, cd_gender#11, cd_education_status#12, cd_dep_count#13]

(8) BroadcastExchange
Input [2]: [cd_demo_sk#10, cd_dep_count#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(9) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cs_bill_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#10]
Join condition: None

(10) Project [codegen id : 7]
Output [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13]
Input [11]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_demo_sk#10, cd_dep_count#13]

(11) Scan parquet default.customer
Output [5]: [c_customer_sk#15, c_current_cdemo_sk#16, c_current_addr_sk#17, c_birth_month#18, c_birth_year#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [In(c_birth_month, [9,5,12,4,1,10]), IsNotNull(c_customer_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int,c_birth_month:int,c_birth_year:int>

(12) ColumnarToRow [codegen id : 2]
Input [5]: [c_customer_sk#15, c_current_cdemo_sk#16, c_current_addr_sk#17, c_birth_month#18, c_birth_year#19]

(13) Filter [codegen id : 2]
Input [5]: [c_customer_sk#15, c_current_cdemo_sk#16, c_current_addr_sk#17, c_birth_month#18, c_birth_year#19]
Condition : (((c_birth_month#18 IN (9,5,12,4,1,10) AND isnotnull(c_customer_sk#15)) AND isnotnull(c_current_cdemo_sk#16)) AND isnotnull(c_current_addr_sk#17))

(14) Project [codegen id : 2]
Output [4]: [c_customer_sk#15, c_current_cdemo_sk#16, c_current_addr_sk#17, c_birth_year#19]
Input [5]: [c_customer_sk#15, c_current_cdemo_sk#16, c_current_addr_sk#17, c_birth_month#18, c_birth_year#19]

(15) BroadcastExchange
Input [4]: [c_customer_sk#15, c_current_cdemo_sk#16, c_current_addr_sk#17, c_birth_year#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#20]

(16) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#15]
Join condition: None

(17) Project [codegen id : 7]
Output [11]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_current_cdemo_sk#16, c_current_addr_sk#17, c_birth_year#19]
Input [13]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_customer_sk#15, c_current_cdemo_sk#16, c_current_addr_sk#17, c_birth_year#19]

(18) Scan parquet default.customer_demographics
Output [1]: [cd_demo_sk#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int>

(19) ColumnarToRow [codegen id : 3]
Input [1]: [cd_demo_sk#21]

(20) Filter [codegen id : 3]
Input [1]: [cd_demo_sk#21]
Condition : isnotnull(cd_demo_sk#21)

(21) BroadcastExchange
Input [1]: [cd_demo_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#22]

(22) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [c_current_cdemo_sk#16]
Right keys [1]: [cd_demo_sk#21]
Join condition: None

(23) Project [codegen id : 7]
Output [10]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_current_addr_sk#17, c_birth_year#19]
Input [12]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_current_cdemo_sk#16, c_current_addr_sk#17, c_birth_year#19, cd_demo_sk#21]

(24) Scan parquet default.customer_address
Output [4]: [ca_address_sk#23, ca_county#24, ca_state#25, ca_country#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string,ca_state:string,ca_country:string>

(25) ColumnarToRow [codegen id : 4]
Input [4]: [ca_address_sk#23, ca_county#24, ca_state#25, ca_country#26]

(26) Filter [codegen id : 4]
Input [4]: [ca_address_sk#23, ca_county#24, ca_state#25, ca_country#26]
Condition : (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#25, 2, false, true) IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#23))

(27) Project [codegen id : 4]
Output [4]: [ca_address_sk#23, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_county#24, 30, false, true) AS ca_county#27, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#25, 2, false, true) AS ca_state#28, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_country#26, 20, false, true) AS ca_country#29]
Input [4]: [ca_address_sk#23, ca_county#24, ca_state#25, ca_country#26]

(28) BroadcastExchange
Input [4]: [ca_address_sk#23, ca_county#27, ca_state#28, ca_country#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#30]

(29) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [c_current_addr_sk#17]
Right keys [1]: [ca_address_sk#23]
Join condition: None

(30) Project [codegen id : 7]
Output [12]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_birth_year#19, ca_county#27, ca_state#28, ca_country#29]
Input [14]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_current_addr_sk#17, c_birth_year#19, ca_address_sk#23, ca_county#27, ca_state#28, ca_country#29]

(31) Scan parquet default.date_dim
Output [2]: [d_date_sk#31, d_year#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(32) ColumnarToRow [codegen id : 5]
Input [2]: [d_date_sk#31, d_year#32]

(33) Filter [codegen id : 5]
Input [2]: [d_date_sk#31, d_year#32]
Condition : ((isnotnull(d_year#32) AND (d_year#32 = 2001)) AND isnotnull(d_date_sk#31))

(34) Project [codegen id : 5]
Output [1]: [d_date_sk#31]
Input [2]: [d_date_sk#31, d_year#32]

(35) BroadcastExchange
Input [1]: [d_date_sk#31]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#33]

(36) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#31]
Join condition: None

(37) Project [codegen id : 7]
Output [11]: [cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_birth_year#19, ca_county#27, ca_state#28, ca_country#29]
Input [13]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_birth_year#19, ca_county#27, ca_state#28, ca_country#29, d_date_sk#31]

(38) Scan parquet default.item
Output [2]: [i_item_sk#34, i_item_id#35]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(39) ColumnarToRow [codegen id : 6]
Input [2]: [i_item_sk#34, i_item_id#35]

(40) Filter [codegen id : 6]
Input [2]: [i_item_sk#34, i_item_id#35]
Condition : isnotnull(i_item_sk#34)

(41) Project [codegen id : 6]
Output [2]: [i_item_sk#34, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_item_id#35, 16, false, true) AS i_item_id#36]
Input [2]: [i_item_sk#34, i_item_id#35]

(42) BroadcastExchange
Input [2]: [i_item_sk#34, i_item_id#36]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#37]

(43) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cs_item_sk#4]
Right keys [1]: [i_item_sk#34]
Join condition: None

(44) Project [codegen id : 7]
Output [11]: [i_item_id#36, ca_country#29, ca_state#28, ca_county#27, cast(cs_quantity#5 as decimal(12,2)) AS agg1#38, cast(cs_list_price#6 as decimal(12,2)) AS agg2#39, cast(cs_coupon_amt#8 as decimal(12,2)) AS agg3#40, cast(cs_sales_price#7 as decimal(12,2)) AS agg4#41, cast(cs_net_profit#9 as decimal(12,2)) AS agg5#42, cast(c_birth_year#19 as decimal(12,2)) AS agg6#43, cast(cd_dep_count#13 as decimal(12,2)) AS agg7#44]
Input [13]: [cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_birth_year#19, ca_county#27, ca_state#28, ca_country#29, i_item_sk#34, i_item_id#36]

(45) HashAggregate [codegen id : 7]
Input [11]: [i_item_id#36, ca_country#29, ca_state#28, ca_county#27, agg1#38, agg2#39, agg3#40, agg4#41, agg5#42, agg6#43, agg7#44]
Keys [4]: [i_item_id#36, ca_country#29, ca_state#28, ca_county#27]
Functions [7]: [partial_avg(agg1#38), partial_avg(agg2#39), partial_avg(agg3#40), partial_avg(agg4#41), partial_avg(agg5#42), partial_avg(agg6#43), partial_avg(agg7#44)]
Aggregate Attributes [14]: [sum#45, count#46, sum#47, count#48, sum#49, count#50, sum#51, count#52, sum#53, count#54, sum#55, count#56, sum#57, count#58]
Results [18]: [i_item_id#36, ca_country#29, ca_state#28, ca_county#27, sum#59, count#60, sum#61, count#62, sum#63, count#64, sum#65, count#66, sum#67, count#68, sum#69, count#70, sum#71, count#72]

(46) Exchange
Input [18]: [i_item_id#36, ca_country#29, ca_state#28, ca_county#27, sum#59, count#60, sum#61, count#62, sum#63, count#64, sum#65, count#66, sum#67, count#68, sum#69, count#70, sum#71, count#72]
Arguments: hashpartitioning(i_item_id#36, ca_country#29, ca_state#28, ca_county#27, 5), ENSURE_REQUIREMENTS, [id=#73]

(47) HashAggregate [codegen id : 8]
Input [18]: [i_item_id#36, ca_country#29, ca_state#28, ca_county#27, sum#59, count#60, sum#61, count#62, sum#63, count#64, sum#65, count#66, sum#67, count#68, sum#69, count#70, sum#71, count#72]
Keys [4]: [i_item_id#36, ca_country#29, ca_state#28, ca_county#27]
Functions [7]: [avg(agg1#38), avg(agg2#39), avg(agg3#40), avg(agg4#41), avg(agg5#42), avg(agg6#43), avg(agg7#44)]
Aggregate Attributes [7]: [avg(agg1#38)#74, avg(agg2#39)#75, avg(agg3#40)#76, avg(agg4#41)#77, avg(agg5#42)#78, avg(agg6#43)#79, avg(agg7#44)#80]
Results [11]: [i_item_id#36, ca_country#29, ca_state#28, ca_county#27, avg(agg1#38)#74 AS agg1#81, avg(agg2#39)#75 AS agg2#82, avg(agg3#40)#76 AS agg3#83, avg(agg4#41)#77 AS agg4#84, avg(agg5#42)#78 AS agg5#85, avg(agg6#43)#79 AS agg6#86, avg(agg7#44)#80 AS agg7#87]

(48) Scan parquet default.catalog_sales
Output [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(49) ColumnarToRow [codegen id : 15]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]

(50) Filter [codegen id : 15]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Condition : (((isnotnull(cs_bill_cdemo_sk#3) AND isnotnull(cs_bill_customer_sk#2)) AND isnotnull(cs_sold_date_sk#1)) AND isnotnull(cs_item_sk#4))

(51) ReusedExchange [Reuses operator id: 8]
Output [2]: [cd_demo_sk#10, cd_dep_count#13]

(52) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [cs_bill_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#10]
Join condition: None

(53) Project [codegen id : 15]
Output [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13]
Input [11]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_demo_sk#10, cd_dep_count#13]

(54) ReusedExchange [Reuses operator id: 15]
Output [4]: [c_customer_sk#15, c_current_cdemo_sk#16, c_current_addr_sk#17, c_birth_year#19]

(55) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#15]
Join condition: None

(56) Project [codegen id : 15]
Output [11]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_current_cdemo_sk#16, c_current_addr_sk#17, c_birth_year#19]
Input [13]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_customer_sk#15, c_current_cdemo_sk#16, c_current_addr_sk#17, c_birth_year#19]

(57) ReusedExchange [Reuses operator id: 21]
Output [1]: [cd_demo_sk#88]

(58) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [c_current_cdemo_sk#16]
Right keys [1]: [cd_demo_sk#88]
Join condition: None

(59) Project [codegen id : 15]
Output [10]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_current_addr_sk#17, c_birth_year#19]
Input [12]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_current_cdemo_sk#16, c_current_addr_sk#17, c_birth_year#19, cd_demo_sk#88]

(60) Scan parquet default.customer_address
Output [3]: [ca_address_sk#23, ca_state#25, ca_country#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(61) ColumnarToRow [codegen id : 12]
Input [3]: [ca_address_sk#23, ca_state#25, ca_country#26]

(62) Filter [codegen id : 12]
Input [3]: [ca_address_sk#23, ca_state#25, ca_country#26]
Condition : (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#25, 2, false, true) IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#23))

(63) Project [codegen id : 12]
Output [3]: [ca_address_sk#23, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#25, 2, false, true) AS ca_state#89, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_country#26, 20, false, true) AS ca_country#90]
Input [3]: [ca_address_sk#23, ca_state#25, ca_country#26]

(64) BroadcastExchange
Input [3]: [ca_address_sk#23, ca_state#89, ca_country#90]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#91]

(65) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [c_current_addr_sk#17]
Right keys [1]: [ca_address_sk#23]
Join condition: None

(66) Project [codegen id : 15]
Output [11]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_birth_year#19, ca_state#89, ca_country#90]
Input [13]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_current_addr_sk#17, c_birth_year#19, ca_address_sk#23, ca_state#89, ca_country#90]

(67) ReusedExchange [Reuses operator id: 35]
Output [1]: [d_date_sk#31]

(68) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#31]
Join condition: None

(69) Project [codegen id : 15]
Output [10]: [cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_birth_year#19, ca_state#89, ca_country#90]
Input [12]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_birth_year#19, ca_state#89, ca_country#90, d_date_sk#31]

(70) ReusedExchange [Reuses operator id: 42]
Output [2]: [i_item_sk#34, i_item_id#92]

(71) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [cs_item_sk#4]
Right keys [1]: [i_item_sk#34]
Join condition: None

(72) Project [codegen id : 15]
Output [10]: [i_item_id#92, ca_country#90, ca_state#89, cast(cs_quantity#5 as decimal(12,2)) AS agg1#38, cast(cs_list_price#6 as decimal(12,2)) AS agg2#39, cast(cs_coupon_amt#8 as decimal(12,2)) AS agg3#40, cast(cs_sales_price#7 as decimal(12,2)) AS agg4#41, cast(cs_net_profit#9 as decimal(12,2)) AS agg5#42, cast(c_birth_year#19 as decimal(12,2)) AS agg6#43, cast(cd_dep_count#13 as decimal(12,2)) AS agg7#44]
Input [12]: [cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_birth_year#19, ca_state#89, ca_country#90, i_item_sk#34, i_item_id#92]

(73) HashAggregate [codegen id : 15]
Input [10]: [i_item_id#92, ca_country#90, ca_state#89, agg1#38, agg2#39, agg3#40, agg4#41, agg5#42, agg6#43, agg7#44]
Keys [3]: [i_item_id#92, ca_country#90, ca_state#89]
Functions [7]: [partial_avg(agg1#38), partial_avg(agg2#39), partial_avg(agg3#40), partial_avg(agg4#41), partial_avg(agg5#42), partial_avg(agg6#43), partial_avg(agg7#44)]
Aggregate Attributes [14]: [sum#93, count#94, sum#95, count#96, sum#97, count#98, sum#99, count#100, sum#101, count#102, sum#103, count#104, sum#105, count#106]
Results [17]: [i_item_id#92, ca_country#90, ca_state#89, sum#107, count#108, sum#109, count#110, sum#111, count#112, sum#113, count#114, sum#115, count#116, sum#117, count#118, sum#119, count#120]

(74) Exchange
Input [17]: [i_item_id#92, ca_country#90, ca_state#89, sum#107, count#108, sum#109, count#110, sum#111, count#112, sum#113, count#114, sum#115, count#116, sum#117, count#118, sum#119, count#120]
Arguments: hashpartitioning(i_item_id#92, ca_country#90, ca_state#89, 5), ENSURE_REQUIREMENTS, [id=#121]

(75) HashAggregate [codegen id : 16]
Input [17]: [i_item_id#92, ca_country#90, ca_state#89, sum#107, count#108, sum#109, count#110, sum#111, count#112, sum#113, count#114, sum#115, count#116, sum#117, count#118, sum#119, count#120]
Keys [3]: [i_item_id#92, ca_country#90, ca_state#89]
Functions [7]: [avg(agg1#38), avg(agg2#39), avg(agg3#40), avg(agg4#41), avg(agg5#42), avg(agg6#43), avg(agg7#44)]
Aggregate Attributes [7]: [avg(agg1#38)#122, avg(agg2#39)#123, avg(agg3#40)#124, avg(agg4#41)#125, avg(agg5#42)#126, avg(agg6#43)#127, avg(agg7#44)#128]
Results [11]: [i_item_id#92 AS i_item_id#129, ca_country#90 AS ca_country#130, ca_state#89 AS ca_state#131, null AS county#132, avg(agg1#38)#122 AS agg1#133, avg(agg2#39)#123 AS agg2#134, avg(agg3#40)#124 AS agg3#135, avg(agg4#41)#125 AS agg4#136, avg(agg5#42)#126 AS agg5#137, avg(agg6#43)#127 AS agg6#138, avg(agg7#44)#128 AS agg7#139]

(76) Scan parquet default.catalog_sales
Output [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(77) ColumnarToRow [codegen id : 23]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]

(78) Filter [codegen id : 23]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Condition : (((isnotnull(cs_bill_cdemo_sk#3) AND isnotnull(cs_bill_customer_sk#2)) AND isnotnull(cs_sold_date_sk#1)) AND isnotnull(cs_item_sk#4))

(79) ReusedExchange [Reuses operator id: 8]
Output [2]: [cd_demo_sk#10, cd_dep_count#13]

(80) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [cs_bill_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#10]
Join condition: None

(81) Project [codegen id : 23]
Output [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13]
Input [11]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_demo_sk#10, cd_dep_count#13]

(82) ReusedExchange [Reuses operator id: 15]
Output [4]: [c_customer_sk#15, c_current_cdemo_sk#16, c_current_addr_sk#17, c_birth_year#19]

(83) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#15]
Join condition: None

(84) Project [codegen id : 23]
Output [11]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_current_cdemo_sk#16, c_current_addr_sk#17, c_birth_year#19]
Input [13]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_customer_sk#15, c_current_cdemo_sk#16, c_current_addr_sk#17, c_birth_year#19]

(85) ReusedExchange [Reuses operator id: 21]
Output [1]: [cd_demo_sk#140]

(86) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [c_current_cdemo_sk#16]
Right keys [1]: [cd_demo_sk#140]
Join condition: None

(87) Project [codegen id : 23]
Output [10]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_current_addr_sk#17, c_birth_year#19]
Input [12]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_current_cdemo_sk#16, c_current_addr_sk#17, c_birth_year#19, cd_demo_sk#140]

(88) Scan parquet default.customer_address
Output [3]: [ca_address_sk#23, ca_state#25, ca_country#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(89) ColumnarToRow [codegen id : 20]
Input [3]: [ca_address_sk#23, ca_state#25, ca_country#26]

(90) Filter [codegen id : 20]
Input [3]: [ca_address_sk#23, ca_state#25, ca_country#26]
Condition : (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#25, 2, false, true) IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#23))

(91) Project [codegen id : 20]
Output [2]: [ca_address_sk#23, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_country#26, 20, false, true) AS ca_country#141]
Input [3]: [ca_address_sk#23, ca_state#25, ca_country#26]

(92) BroadcastExchange
Input [2]: [ca_address_sk#23, ca_country#141]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#142]

(93) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [c_current_addr_sk#17]
Right keys [1]: [ca_address_sk#23]
Join condition: None

(94) Project [codegen id : 23]
Output [10]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_birth_year#19, ca_country#141]
Input [12]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_current_addr_sk#17, c_birth_year#19, ca_address_sk#23, ca_country#141]

(95) ReusedExchange [Reuses operator id: 35]
Output [1]: [d_date_sk#31]

(96) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#31]
Join condition: None

(97) Project [codegen id : 23]
Output [9]: [cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_birth_year#19, ca_country#141]
Input [11]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_birth_year#19, ca_country#141, d_date_sk#31]

(98) ReusedExchange [Reuses operator id: 42]
Output [2]: [i_item_sk#34, i_item_id#143]

(99) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [cs_item_sk#4]
Right keys [1]: [i_item_sk#34]
Join condition: None

(100) Project [codegen id : 23]
Output [9]: [i_item_id#143, ca_country#141, cast(cs_quantity#5 as decimal(12,2)) AS agg1#38, cast(cs_list_price#6 as decimal(12,2)) AS agg2#39, cast(cs_coupon_amt#8 as decimal(12,2)) AS agg3#40, cast(cs_sales_price#7 as decimal(12,2)) AS agg4#41, cast(cs_net_profit#9 as decimal(12,2)) AS agg5#42, cast(c_birth_year#19 as decimal(12,2)) AS agg6#43, cast(cd_dep_count#13 as decimal(12,2)) AS agg7#44]
Input [11]: [cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_birth_year#19, ca_country#141, i_item_sk#34, i_item_id#143]

(101) HashAggregate [codegen id : 23]
Input [9]: [i_item_id#143, ca_country#141, agg1#38, agg2#39, agg3#40, agg4#41, agg5#42, agg6#43, agg7#44]
Keys [2]: [i_item_id#143, ca_country#141]
Functions [7]: [partial_avg(agg1#38), partial_avg(agg2#39), partial_avg(agg3#40), partial_avg(agg4#41), partial_avg(agg5#42), partial_avg(agg6#43), partial_avg(agg7#44)]
Aggregate Attributes [14]: [sum#144, count#145, sum#146, count#147, sum#148, count#149, sum#150, count#151, sum#152, count#153, sum#154, count#155, sum#156, count#157]
Results [16]: [i_item_id#143, ca_country#141, sum#158, count#159, sum#160, count#161, sum#162, count#163, sum#164, count#165, sum#166, count#167, sum#168, count#169, sum#170, count#171]

(102) Exchange
Input [16]: [i_item_id#143, ca_country#141, sum#158, count#159, sum#160, count#161, sum#162, count#163, sum#164, count#165, sum#166, count#167, sum#168, count#169, sum#170, count#171]
Arguments: hashpartitioning(i_item_id#143, ca_country#141, 5), ENSURE_REQUIREMENTS, [id=#172]

(103) HashAggregate [codegen id : 24]
Input [16]: [i_item_id#143, ca_country#141, sum#158, count#159, sum#160, count#161, sum#162, count#163, sum#164, count#165, sum#166, count#167, sum#168, count#169, sum#170, count#171]
Keys [2]: [i_item_id#143, ca_country#141]
Functions [7]: [avg(agg1#38), avg(agg2#39), avg(agg3#40), avg(agg4#41), avg(agg5#42), avg(agg6#43), avg(agg7#44)]
Aggregate Attributes [7]: [avg(agg1#38)#173, avg(agg2#39)#174, avg(agg3#40)#175, avg(agg4#41)#176, avg(agg5#42)#177, avg(agg6#43)#178, avg(agg7#44)#179]
Results [11]: [i_item_id#143 AS i_item_id#180, ca_country#141 AS ca_country#181, null AS ca_state#182, null AS county#183, avg(agg1#38)#173 AS agg1#184, avg(agg2#39)#174 AS agg2#185, avg(agg3#40)#175 AS agg3#186, avg(agg4#41)#176 AS agg4#187, avg(agg5#42)#177 AS agg5#188, avg(agg6#43)#178 AS agg6#189, avg(agg7#44)#179 AS agg7#190]

(104) Scan parquet default.catalog_sales
Output [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(105) ColumnarToRow [codegen id : 31]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]

(106) Filter [codegen id : 31]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Condition : (((isnotnull(cs_bill_cdemo_sk#3) AND isnotnull(cs_bill_customer_sk#2)) AND isnotnull(cs_sold_date_sk#1)) AND isnotnull(cs_item_sk#4))

(107) ReusedExchange [Reuses operator id: 8]
Output [2]: [cd_demo_sk#10, cd_dep_count#13]

(108) BroadcastHashJoin [codegen id : 31]
Left keys [1]: [cs_bill_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#10]
Join condition: None

(109) Project [codegen id : 31]
Output [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13]
Input [11]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_demo_sk#10, cd_dep_count#13]

(110) ReusedExchange [Reuses operator id: 15]
Output [4]: [c_customer_sk#15, c_current_cdemo_sk#16, c_current_addr_sk#17, c_birth_year#19]

(111) BroadcastHashJoin [codegen id : 31]
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#15]
Join condition: None

(112) Project [codegen id : 31]
Output [11]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_current_cdemo_sk#16, c_current_addr_sk#17, c_birth_year#19]
Input [13]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_customer_sk#15, c_current_cdemo_sk#16, c_current_addr_sk#17, c_birth_year#19]

(113) ReusedExchange [Reuses operator id: 21]
Output [1]: [cd_demo_sk#191]

(114) BroadcastHashJoin [codegen id : 31]
Left keys [1]: [c_current_cdemo_sk#16]
Right keys [1]: [cd_demo_sk#191]
Join condition: None

(115) Project [codegen id : 31]
Output [10]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_current_addr_sk#17, c_birth_year#19]
Input [12]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_current_cdemo_sk#16, c_current_addr_sk#17, c_birth_year#19, cd_demo_sk#191]

(116) Scan parquet default.customer_address
Output [2]: [ca_address_sk#23, ca_state#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(117) ColumnarToRow [codegen id : 28]
Input [2]: [ca_address_sk#23, ca_state#25]

(118) Filter [codegen id : 28]
Input [2]: [ca_address_sk#23, ca_state#25]
Condition : (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#25, 2, false, true) IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#23))

(119) Project [codegen id : 28]
Output [1]: [ca_address_sk#23]
Input [2]: [ca_address_sk#23, ca_state#25]

(120) BroadcastExchange
Input [1]: [ca_address_sk#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#192]

(121) BroadcastHashJoin [codegen id : 31]
Left keys [1]: [c_current_addr_sk#17]
Right keys [1]: [ca_address_sk#23]
Join condition: None

(122) Project [codegen id : 31]
Output [9]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_birth_year#19]
Input [11]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_current_addr_sk#17, c_birth_year#19, ca_address_sk#23]

(123) ReusedExchange [Reuses operator id: 35]
Output [1]: [d_date_sk#31]

(124) BroadcastHashJoin [codegen id : 31]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#31]
Join condition: None

(125) Project [codegen id : 31]
Output [8]: [cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_birth_year#19]
Input [10]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_birth_year#19, d_date_sk#31]

(126) ReusedExchange [Reuses operator id: 42]
Output [2]: [i_item_sk#34, i_item_id#193]

(127) BroadcastHashJoin [codegen id : 31]
Left keys [1]: [cs_item_sk#4]
Right keys [1]: [i_item_sk#34]
Join condition: None

(128) Project [codegen id : 31]
Output [8]: [i_item_id#193, cast(cs_quantity#5 as decimal(12,2)) AS agg1#38, cast(cs_list_price#6 as decimal(12,2)) AS agg2#39, cast(cs_coupon_amt#8 as decimal(12,2)) AS agg3#40, cast(cs_sales_price#7 as decimal(12,2)) AS agg4#41, cast(cs_net_profit#9 as decimal(12,2)) AS agg5#42, cast(c_birth_year#19 as decimal(12,2)) AS agg6#43, cast(cd_dep_count#13 as decimal(12,2)) AS agg7#44]
Input [10]: [cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_birth_year#19, i_item_sk#34, i_item_id#193]

(129) HashAggregate [codegen id : 31]
Input [8]: [i_item_id#193, agg1#38, agg2#39, agg3#40, agg4#41, agg5#42, agg6#43, agg7#44]
Keys [1]: [i_item_id#193]
Functions [7]: [partial_avg(agg1#38), partial_avg(agg2#39), partial_avg(agg3#40), partial_avg(agg4#41), partial_avg(agg5#42), partial_avg(agg6#43), partial_avg(agg7#44)]
Aggregate Attributes [14]: [sum#194, count#195, sum#196, count#197, sum#198, count#199, sum#200, count#201, sum#202, count#203, sum#204, count#205, sum#206, count#207]
Results [15]: [i_item_id#193, sum#208, count#209, sum#210, count#211, sum#212, count#213, sum#214, count#215, sum#216, count#217, sum#218, count#219, sum#220, count#221]

(130) Exchange
Input [15]: [i_item_id#193, sum#208, count#209, sum#210, count#211, sum#212, count#213, sum#214, count#215, sum#216, count#217, sum#218, count#219, sum#220, count#221]
Arguments: hashpartitioning(i_item_id#193, 5), ENSURE_REQUIREMENTS, [id=#222]

(131) HashAggregate [codegen id : 32]
Input [15]: [i_item_id#193, sum#208, count#209, sum#210, count#211, sum#212, count#213, sum#214, count#215, sum#216, count#217, sum#218, count#219, sum#220, count#221]
Keys [1]: [i_item_id#193]
Functions [7]: [avg(agg1#38), avg(agg2#39), avg(agg3#40), avg(agg4#41), avg(agg5#42), avg(agg6#43), avg(agg7#44)]
Aggregate Attributes [7]: [avg(agg1#38)#223, avg(agg2#39)#224, avg(agg3#40)#225, avg(agg4#41)#226, avg(agg5#42)#227, avg(agg6#43)#228, avg(agg7#44)#229]
Results [11]: [i_item_id#193 AS i_item_id#230, null AS ca_country#231, null AS ca_state#232, null AS county#233, avg(agg1#38)#223 AS agg1#234, avg(agg2#39)#224 AS agg2#235, avg(agg3#40)#225 AS agg3#236, avg(agg4#41)#226 AS agg4#237, avg(agg5#42)#227 AS agg5#238, avg(agg6#43)#228 AS agg6#239, avg(agg7#44)#229 AS agg7#240]

(132) Scan parquet default.catalog_sales
Output [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(133) ColumnarToRow [codegen id : 39]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]

(134) Filter [codegen id : 39]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Condition : (((isnotnull(cs_bill_cdemo_sk#3) AND isnotnull(cs_bill_customer_sk#2)) AND isnotnull(cs_sold_date_sk#1)) AND isnotnull(cs_item_sk#4))

(135) ReusedExchange [Reuses operator id: 8]
Output [2]: [cd_demo_sk#10, cd_dep_count#13]

(136) BroadcastHashJoin [codegen id : 39]
Left keys [1]: [cs_bill_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#10]
Join condition: None

(137) Project [codegen id : 39]
Output [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13]
Input [11]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_demo_sk#10, cd_dep_count#13]

(138) ReusedExchange [Reuses operator id: 15]
Output [4]: [c_customer_sk#15, c_current_cdemo_sk#16, c_current_addr_sk#17, c_birth_year#19]

(139) BroadcastHashJoin [codegen id : 39]
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#15]
Join condition: None

(140) Project [codegen id : 39]
Output [11]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_current_cdemo_sk#16, c_current_addr_sk#17, c_birth_year#19]
Input [13]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_customer_sk#15, c_current_cdemo_sk#16, c_current_addr_sk#17, c_birth_year#19]

(141) ReusedExchange [Reuses operator id: 21]
Output [1]: [cd_demo_sk#241]

(142) BroadcastHashJoin [codegen id : 39]
Left keys [1]: [c_current_cdemo_sk#16]
Right keys [1]: [cd_demo_sk#241]
Join condition: None

(143) Project [codegen id : 39]
Output [10]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_current_addr_sk#17, c_birth_year#19]
Input [12]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_current_cdemo_sk#16, c_current_addr_sk#17, c_birth_year#19, cd_demo_sk#241]

(144) ReusedExchange [Reuses operator id: 120]
Output [1]: [ca_address_sk#23]

(145) BroadcastHashJoin [codegen id : 39]
Left keys [1]: [c_current_addr_sk#17]
Right keys [1]: [ca_address_sk#23]
Join condition: None

(146) Project [codegen id : 39]
Output [9]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_birth_year#19]
Input [11]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_current_addr_sk#17, c_birth_year#19, ca_address_sk#23]

(147) ReusedExchange [Reuses operator id: 35]
Output [1]: [d_date_sk#31]

(148) BroadcastHashJoin [codegen id : 39]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#31]
Join condition: None

(149) Project [codegen id : 39]
Output [8]: [cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_birth_year#19]
Input [10]: [cs_sold_date_sk#1, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_birth_year#19, d_date_sk#31]

(150) Scan parquet default.item
Output [1]: [i_item_sk#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int>

(151) ColumnarToRow [codegen id : 38]
Input [1]: [i_item_sk#34]

(152) Filter [codegen id : 38]
Input [1]: [i_item_sk#34]
Condition : isnotnull(i_item_sk#34)

(153) BroadcastExchange
Input [1]: [i_item_sk#34]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#242]

(154) BroadcastHashJoin [codegen id : 39]
Left keys [1]: [cs_item_sk#4]
Right keys [1]: [i_item_sk#34]
Join condition: None

(155) Project [codegen id : 39]
Output [7]: [cast(cs_quantity#5 as decimal(12,2)) AS agg1#38, cast(cs_list_price#6 as decimal(12,2)) AS agg2#39, cast(cs_coupon_amt#8 as decimal(12,2)) AS agg3#40, cast(cs_sales_price#7 as decimal(12,2)) AS agg4#41, cast(cs_net_profit#9 as decimal(12,2)) AS agg5#42, cast(c_birth_year#19 as decimal(12,2)) AS agg6#43, cast(cd_dep_count#13 as decimal(12,2)) AS agg7#44]
Input [9]: [cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#13, c_birth_year#19, i_item_sk#34]

(156) HashAggregate [codegen id : 39]
Input [7]: [agg1#38, agg2#39, agg3#40, agg4#41, agg5#42, agg6#43, agg7#44]
Keys: []
Functions [7]: [partial_avg(agg1#38), partial_avg(agg2#39), partial_avg(agg3#40), partial_avg(agg4#41), partial_avg(agg5#42), partial_avg(agg6#43), partial_avg(agg7#44)]
Aggregate Attributes [14]: [sum#243, count#244, sum#245, count#246, sum#247, count#248, sum#249, count#250, sum#251, count#252, sum#253, count#254, sum#255, count#256]
Results [14]: [sum#257, count#258, sum#259, count#260, sum#261, count#262, sum#263, count#264, sum#265, count#266, sum#267, count#268, sum#269, count#270]

(157) Exchange
Input [14]: [sum#257, count#258, sum#259, count#260, sum#261, count#262, sum#263, count#264, sum#265, count#266, sum#267, count#268, sum#269, count#270]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#271]

(158) HashAggregate [codegen id : 40]
Input [14]: [sum#257, count#258, sum#259, count#260, sum#261, count#262, sum#263, count#264, sum#265, count#266, sum#267, count#268, sum#269, count#270]
Keys: []
Functions [7]: [avg(agg1#38), avg(agg2#39), avg(agg3#40), avg(agg4#41), avg(agg5#42), avg(agg6#43), avg(agg7#44)]
Aggregate Attributes [7]: [avg(agg1#38)#272, avg(agg2#39)#273, avg(agg3#40)#274, avg(agg4#41)#275, avg(agg5#42)#276, avg(agg6#43)#277, avg(agg7#44)#278]
Results [11]: [null AS i_item_id#279, null AS ca_country#280, null AS ca_state#281, null AS county#282, avg(agg1#38)#272 AS agg1#283, avg(agg2#39)#273 AS agg2#284, avg(agg3#40)#274 AS agg3#285, avg(agg4#41)#275 AS agg4#286, avg(agg5#42)#276 AS agg5#287, avg(agg6#43)#277 AS agg6#288, avg(agg7#44)#278 AS agg7#289]

(159) Union

(160) TakeOrderedAndProject
Input [11]: [i_item_id#36, ca_country#29, ca_state#28, ca_county#27, agg1#81, agg2#82, agg3#83, agg4#84, agg5#85, agg6#86, agg7#87]
Arguments: 100, [ca_country#29 ASC NULLS FIRST, ca_state#28 ASC NULLS FIRST, ca_county#27 ASC NULLS FIRST, i_item_id#36 ASC NULLS FIRST], [i_item_id#36, ca_country#29, ca_state#28, ca_county#27, agg1#81, agg2#82, agg3#83, agg4#84, agg5#85, agg6#86, agg7#87]

