== Physical Plan ==
TakeOrderedAndProject (87)
+- * HashAggregate (86)
   +- Exchange (85)
      +- * HashAggregate (84)
         +- Union (83)
            :- * HashAggregate (72)
            :  +- Exchange (71)
            :     +- * HashAggregate (70)
            :        +- Union (69)
            :           :- * HashAggregate (20)
            :           :  +- Exchange (19)
            :           :     +- * HashAggregate (18)
            :           :        +- * Project (17)
            :           :           +- * BroadcastHashJoin Inner BuildRight (16)
            :           :              :- * Project (14)
            :           :              :  +- * BroadcastHashJoin Inner BuildRight (13)
            :           :              :     :- Union (9)
            :           :              :     :  :- * Project (4)
            :           :              :     :  :  +- * Filter (3)
            :           :              :     :  :     +- * ColumnarToRow (2)
            :           :              :     :  :        +- Scan parquet default.store_sales (1)
            :           :              :     :  +- * Project (8)
            :           :              :     :     +- * Filter (7)
            :           :              :     :        +- * ColumnarToRow (6)
            :           :              :     :           +- Scan parquet default.store_returns (5)
            :           :              :     +- BroadcastExchange (12)
            :           :              :        +- * ColumnarToRow (11)
            :           :              :           +- Scan parquet default.store (10)
            :           :              +- ReusedExchange (15)
            :           :- * HashAggregate (40)
            :           :  +- Exchange (39)
            :           :     +- * HashAggregate (38)
            :           :        +- * Project (37)
            :           :           +- * BroadcastHashJoin Inner BuildRight (36)
            :           :              :- * Project (34)
            :           :              :  +- * BroadcastHashJoin Inner BuildRight (33)
            :           :              :     :- Union (29)
            :           :              :     :  :- * Project (24)
            :           :              :     :  :  +- * Filter (23)
            :           :              :     :  :     +- * ColumnarToRow (22)
            :           :              :     :  :        +- Scan parquet default.catalog_sales (21)
            :           :              :     :  +- * Project (28)
            :           :              :     :     +- * Filter (27)
            :           :              :     :        +- * ColumnarToRow (26)
            :           :              :     :           +- Scan parquet default.catalog_returns (25)
            :           :              :     +- BroadcastExchange (32)
            :           :              :        +- * ColumnarToRow (31)
            :           :              :           +- Scan parquet default.catalog_page (30)
            :           :              +- ReusedExchange (35)
            :           +- * HashAggregate (68)
            :              +- Exchange (67)
            :                 +- * HashAggregate (66)
            :                    +- * Project (65)
            :                       +- * BroadcastHashJoin Inner BuildRight (64)
            :                          :- * Project (62)
            :                          :  +- * BroadcastHashJoin Inner BuildRight (61)
            :                          :     :- Union (57)
            :                          :     :  :- * Project (44)
            :                          :     :  :  +- * Filter (43)
            :                          :     :  :     +- * ColumnarToRow (42)
            :                          :     :  :        +- Scan parquet default.web_sales (41)
            :                          :     :  +- * Project (56)
            :                          :     :     +- * SortMergeJoin Inner (55)
            :                          :     :        :- * Sort (48)
            :                          :     :        :  +- Exchange (47)
            :                          :     :        :     +- * ColumnarToRow (46)
            :                          :     :        :        +- Scan parquet default.web_returns (45)
            :                          :     :        +- * Sort (54)
            :                          :     :           +- Exchange (53)
            :                          :     :              +- * Project (52)
            :                          :     :                 +- * Filter (51)
            :                          :     :                    +- * ColumnarToRow (50)
            :                          :     :                       +- Scan parquet default.web_sales (49)
            :                          :     +- BroadcastExchange (60)
            :                          :        +- * ColumnarToRow (59)
            :                          :           +- Scan parquet default.web_site (58)
            :                          +- ReusedExchange (63)
            :- * HashAggregate (77)
            :  +- Exchange (76)
            :     +- * HashAggregate (75)
            :        +- * HashAggregate (74)
            :           +- ReusedExchange (73)
            +- * HashAggregate (82)
               +- Exchange (81)
                  +- * HashAggregate (80)
                     +- * HashAggregate (79)
                        +- ReusedExchange (78)


(1) Scan parquet default.store_sales
Output [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_store_sk#1)

(4) Project [codegen id : 1]
Output [6]: [ss_store_sk#1 AS store_sk#6, ss_sold_date_sk#4 AS date_sk#7, ss_ext_sales_price#2 AS sales_price#8, ss_net_profit#3 AS profit#9, 0.00 AS return_amt#10, 0.00 AS net_loss#11]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]

(5) Scan parquet default.store_returns
Output [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#15), dynamicpruningexpression(sr_returned_date_sk#15 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_store_sk:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(6) ColumnarToRow [codegen id : 2]
Input [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]

(7) Filter [codegen id : 2]
Input [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]
Condition : isnotnull(sr_store_sk#12)

(8) Project [codegen id : 2]
Output [6]: [sr_store_sk#12 AS store_sk#16, sr_returned_date_sk#15 AS date_sk#17, 0.00 AS sales_price#18, 0.00 AS profit#19, sr_return_amt#13 AS return_amt#20, sr_net_loss#14 AS net_loss#21]
Input [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]

(9) Union

(10) Scan parquet default.store
Output [2]: [s_store_sk#22, s_store_id#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(11) ColumnarToRow [codegen id : 3]
Input [2]: [s_store_sk#22, s_store_id#23]

(12) BroadcastExchange
Input [2]: [s_store_sk#22, s_store_id#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#24]

(13) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [store_sk#6]
Right keys [1]: [s_store_sk#22]
Join condition: None

(14) Project [codegen id : 5]
Output [6]: [date_sk#7, sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_id#23]
Input [8]: [store_sk#6, date_sk#7, sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_sk#22, s_store_id#23]

(15) ReusedExchange [Reuses operator id: 92]
Output [1]: [d_date_sk#25]

(16) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [date_sk#7]
Right keys [1]: [d_date_sk#25]
Join condition: None

(17) Project [codegen id : 5]
Output [5]: [sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_id#23]
Input [7]: [date_sk#7, sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_id#23, d_date_sk#25]

(18) HashAggregate [codegen id : 5]
Input [5]: [sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_id#23]
Keys [1]: [s_store_id#23]
Functions [4]: [partial_sum(UnscaledValue(sales_price#8)), partial_sum(UnscaledValue(return_amt#10)), partial_sum(UnscaledValue(profit#9)), partial_sum(UnscaledValue(net_loss#11))]
Aggregate Attributes [4]: [sum#26, sum#27, sum#28, sum#29]
Results [5]: [s_store_id#23, sum#30, sum#31, sum#32, sum#33]

(19) Exchange
Input [5]: [s_store_id#23, sum#30, sum#31, sum#32, sum#33]
Arguments: hashpartitioning(s_store_id#23, 5), ENSURE_REQUIREMENTS, [id=#34]

(20) HashAggregate [codegen id : 6]
Input [5]: [s_store_id#23, sum#30, sum#31, sum#32, sum#33]
Keys [1]: [s_store_id#23]
Functions [4]: [sum(UnscaledValue(sales_price#8)), sum(UnscaledValue(return_amt#10)), sum(UnscaledValue(profit#9)), sum(UnscaledValue(net_loss#11))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#8))#35, sum(UnscaledValue(return_amt#10))#36, sum(UnscaledValue(profit#9))#37, sum(UnscaledValue(net_loss#11))#38]
Results [5]: [store channel AS channel#39, concat(store, s_store_id#23) AS id#40, MakeDecimal(sum(UnscaledValue(sales_price#8))#35,17,2) AS sales#41, MakeDecimal(sum(UnscaledValue(return_amt#10))#36,17,2) AS returns#42, CheckOverflow((promote_precision(cast(MakeDecimal(sum(UnscaledValue(profit#9))#37,17,2) as decimal(18,2))) - promote_precision(cast(MakeDecimal(sum(UnscaledValue(net_loss#11))#38,17,2) as decimal(18,2)))), DecimalType(18,2), true) AS profit#43]

(21) Scan parquet default.catalog_sales
Output [4]: [cs_catalog_page_sk#44, cs_ext_sales_price#45, cs_net_profit#46, cs_sold_date_sk#47]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#47), dynamicpruningexpression(cs_sold_date_sk#47 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_catalog_page_sk)]
ReadSchema: struct<cs_catalog_page_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(22) ColumnarToRow [codegen id : 7]
Input [4]: [cs_catalog_page_sk#44, cs_ext_sales_price#45, cs_net_profit#46, cs_sold_date_sk#47]

(23) Filter [codegen id : 7]
Input [4]: [cs_catalog_page_sk#44, cs_ext_sales_price#45, cs_net_profit#46, cs_sold_date_sk#47]
Condition : isnotnull(cs_catalog_page_sk#44)

(24) Project [codegen id : 7]
Output [6]: [cs_catalog_page_sk#44 AS page_sk#48, cs_sold_date_sk#47 AS date_sk#49, cs_ext_sales_price#45 AS sales_price#50, cs_net_profit#46 AS profit#51, 0.00 AS return_amt#52, 0.00 AS net_loss#53]
Input [4]: [cs_catalog_page_sk#44, cs_ext_sales_price#45, cs_net_profit#46, cs_sold_date_sk#47]

(25) Scan parquet default.catalog_returns
Output [4]: [cr_catalog_page_sk#54, cr_return_amount#55, cr_net_loss#56, cr_returned_date_sk#57]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PartitionFilters: [dynamicpruningexpression(cr_returned_date_sk#57 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cr_catalog_page_sk)]
ReadSchema: struct<cr_catalog_page_sk:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(26) ColumnarToRow [codegen id : 8]
Input [4]: [cr_catalog_page_sk#54, cr_return_amount#55, cr_net_loss#56, cr_returned_date_sk#57]

(27) Filter [codegen id : 8]
Input [4]: [cr_catalog_page_sk#54, cr_return_amount#55, cr_net_loss#56, cr_returned_date_sk#57]
Condition : isnotnull(cr_catalog_page_sk#54)

(28) Project [codegen id : 8]
Output [6]: [cr_catalog_page_sk#54 AS page_sk#58, cr_returned_date_sk#57 AS date_sk#59, 0.00 AS sales_price#60, 0.00 AS profit#61, cr_return_amount#55 AS return_amt#62, cr_net_loss#56 AS net_loss#63]
Input [4]: [cr_catalog_page_sk#54, cr_return_amount#55, cr_net_loss#56, cr_returned_date_sk#57]

(29) Union

(30) Scan parquet default.catalog_page
Output [2]: [cp_catalog_page_sk#64, cp_catalog_page_id#65]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>

(31) ColumnarToRow [codegen id : 9]
Input [2]: [cp_catalog_page_sk#64, cp_catalog_page_id#65]

(32) BroadcastExchange
Input [2]: [cp_catalog_page_sk#64, cp_catalog_page_id#65]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#66]

(33) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [page_sk#48]
Right keys [1]: [cp_catalog_page_sk#64]
Join condition: None

(34) Project [codegen id : 11]
Output [6]: [date_sk#49, sales_price#50, profit#51, return_amt#52, net_loss#53, cp_catalog_page_id#65]
Input [8]: [page_sk#48, date_sk#49, sales_price#50, profit#51, return_amt#52, net_loss#53, cp_catalog_page_sk#64, cp_catalog_page_id#65]

(35) ReusedExchange [Reuses operator id: 92]
Output [1]: [d_date_sk#67]

(36) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [date_sk#49]
Right keys [1]: [d_date_sk#67]
Join condition: None

(37) Project [codegen id : 11]
Output [5]: [sales_price#50, profit#51, return_amt#52, net_loss#53, cp_catalog_page_id#65]
Input [7]: [date_sk#49, sales_price#50, profit#51, return_amt#52, net_loss#53, cp_catalog_page_id#65, d_date_sk#67]

(38) HashAggregate [codegen id : 11]
Input [5]: [sales_price#50, profit#51, return_amt#52, net_loss#53, cp_catalog_page_id#65]
Keys [1]: [cp_catalog_page_id#65]
Functions [4]: [partial_sum(UnscaledValue(sales_price#50)), partial_sum(UnscaledValue(return_amt#52)), partial_sum(UnscaledValue(profit#51)), partial_sum(UnscaledValue(net_loss#53))]
Aggregate Attributes [4]: [sum#68, sum#69, sum#70, sum#71]
Results [5]: [cp_catalog_page_id#65, sum#72, sum#73, sum#74, sum#75]

(39) Exchange
Input [5]: [cp_catalog_page_id#65, sum#72, sum#73, sum#74, sum#75]
Arguments: hashpartitioning(cp_catalog_page_id#65, 5), ENSURE_REQUIREMENTS, [id=#76]

(40) HashAggregate [codegen id : 12]
Input [5]: [cp_catalog_page_id#65, sum#72, sum#73, sum#74, sum#75]
Keys [1]: [cp_catalog_page_id#65]
Functions [4]: [sum(UnscaledValue(sales_price#50)), sum(UnscaledValue(return_amt#52)), sum(UnscaledValue(profit#51)), sum(UnscaledValue(net_loss#53))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#50))#77, sum(UnscaledValue(return_amt#52))#78, sum(UnscaledValue(profit#51))#79, sum(UnscaledValue(net_loss#53))#80]
Results [5]: [catalog channel AS channel#81, concat(catalog_page, cp_catalog_page_id#65) AS id#82, MakeDecimal(sum(UnscaledValue(sales_price#50))#77,17,2) AS sales#83, MakeDecimal(sum(UnscaledValue(return_amt#52))#78,17,2) AS returns#84, CheckOverflow((promote_precision(cast(MakeDecimal(sum(UnscaledValue(profit#51))#79,17,2) as decimal(18,2))) - promote_precision(cast(MakeDecimal(sum(UnscaledValue(net_loss#53))#80,17,2) as decimal(18,2)))), DecimalType(18,2), true) AS profit#85]

(41) Scan parquet default.web_sales
Output [4]: [ws_web_site_sk#86, ws_ext_sales_price#87, ws_net_profit#88, ws_sold_date_sk#89]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#89), dynamicpruningexpression(ws_sold_date_sk#89 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_web_site_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(42) ColumnarToRow [codegen id : 13]
Input [4]: [ws_web_site_sk#86, ws_ext_sales_price#87, ws_net_profit#88, ws_sold_date_sk#89]

(43) Filter [codegen id : 13]
Input [4]: [ws_web_site_sk#86, ws_ext_sales_price#87, ws_net_profit#88, ws_sold_date_sk#89]
Condition : isnotnull(ws_web_site_sk#86)

(44) Project [codegen id : 13]
Output [6]: [ws_web_site_sk#86 AS wsr_web_site_sk#90, ws_sold_date_sk#89 AS date_sk#91, ws_ext_sales_price#87 AS sales_price#92, ws_net_profit#88 AS profit#93, 0.00 AS return_amt#94, 0.00 AS net_loss#95]
Input [4]: [ws_web_site_sk#86, ws_ext_sales_price#87, ws_net_profit#88, ws_sold_date_sk#89]

(45) Scan parquet default.web_returns
Output [5]: [wr_item_sk#96, wr_order_number#97, wr_return_amt#98, wr_net_loss#99, wr_returned_date_sk#100]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#100), dynamicpruningexpression(wr_returned_date_sk#100 IN dynamicpruning#5)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(46) ColumnarToRow [codegen id : 14]
Input [5]: [wr_item_sk#96, wr_order_number#97, wr_return_amt#98, wr_net_loss#99, wr_returned_date_sk#100]

(47) Exchange
Input [5]: [wr_item_sk#96, wr_order_number#97, wr_return_amt#98, wr_net_loss#99, wr_returned_date_sk#100]
Arguments: hashpartitioning(wr_item_sk#96, wr_order_number#97, 5), ENSURE_REQUIREMENTS, [id=#101]

(48) Sort [codegen id : 15]
Input [5]: [wr_item_sk#96, wr_order_number#97, wr_return_amt#98, wr_net_loss#99, wr_returned_date_sk#100]
Arguments: [wr_item_sk#96 ASC NULLS FIRST, wr_order_number#97 ASC NULLS FIRST], false, 0

(49) Scan parquet default.web_sales
Output [4]: [ws_item_sk#102, ws_web_site_sk#103, ws_order_number#104, ws_sold_date_sk#105]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_order_number:int>

(50) ColumnarToRow [codegen id : 16]
Input [4]: [ws_item_sk#102, ws_web_site_sk#103, ws_order_number#104, ws_sold_date_sk#105]

(51) Filter [codegen id : 16]
Input [4]: [ws_item_sk#102, ws_web_site_sk#103, ws_order_number#104, ws_sold_date_sk#105]
Condition : isnotnull(ws_web_site_sk#103)

(52) Project [codegen id : 16]
Output [3]: [ws_item_sk#102, ws_web_site_sk#103, ws_order_number#104]
Input [4]: [ws_item_sk#102, ws_web_site_sk#103, ws_order_number#104, ws_sold_date_sk#105]

(53) Exchange
Input [3]: [ws_item_sk#102, ws_web_site_sk#103, ws_order_number#104]
Arguments: hashpartitioning(ws_item_sk#102, ws_order_number#104, 5), ENSURE_REQUIREMENTS, [id=#106]

(54) Sort [codegen id : 17]
Input [3]: [ws_item_sk#102, ws_web_site_sk#103, ws_order_number#104]
Arguments: [ws_item_sk#102 ASC NULLS FIRST, ws_order_number#104 ASC NULLS FIRST], false, 0

(55) SortMergeJoin [codegen id : 18]
Left keys [2]: [wr_item_sk#96, wr_order_number#97]
Right keys [2]: [ws_item_sk#102, ws_order_number#104]
Join condition: None

(56) Project [codegen id : 18]
Output [6]: [ws_web_site_sk#103 AS wsr_web_site_sk#107, wr_returned_date_sk#100 AS date_sk#108, 0.00 AS sales_price#109, 0.00 AS profit#110, wr_return_amt#98 AS return_amt#111, wr_net_loss#99 AS net_loss#112]
Input [8]: [wr_item_sk#96, wr_order_number#97, wr_return_amt#98, wr_net_loss#99, wr_returned_date_sk#100, ws_item_sk#102, ws_web_site_sk#103, ws_order_number#104]

(57) Union

(58) Scan parquet default.web_site
Output [2]: [web_site_sk#113, web_site_id#114]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
ReadSchema: struct<web_site_sk:int,web_site_id:string>

(59) ColumnarToRow [codegen id : 19]
Input [2]: [web_site_sk#113, web_site_id#114]

(60) BroadcastExchange
Input [2]: [web_site_sk#113, web_site_id#114]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#115]

(61) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [wsr_web_site_sk#90]
Right keys [1]: [web_site_sk#113]
Join condition: None

(62) Project [codegen id : 21]
Output [6]: [date_sk#91, sales_price#92, profit#93, return_amt#94, net_loss#95, web_site_id#114]
Input [8]: [wsr_web_site_sk#90, date_sk#91, sales_price#92, profit#93, return_amt#94, net_loss#95, web_site_sk#113, web_site_id#114]

(63) ReusedExchange [Reuses operator id: 92]
Output [1]: [d_date_sk#116]

(64) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [date_sk#91]
Right keys [1]: [d_date_sk#116]
Join condition: None

(65) Project [codegen id : 21]
Output [5]: [sales_price#92, profit#93, return_amt#94, net_loss#95, web_site_id#114]
Input [7]: [date_sk#91, sales_price#92, profit#93, return_amt#94, net_loss#95, web_site_id#114, d_date_sk#116]

(66) HashAggregate [codegen id : 21]
Input [5]: [sales_price#92, profit#93, return_amt#94, net_loss#95, web_site_id#114]
Keys [1]: [web_site_id#114]
Functions [4]: [partial_sum(UnscaledValue(sales_price#92)), partial_sum(UnscaledValue(return_amt#94)), partial_sum(UnscaledValue(profit#93)), partial_sum(UnscaledValue(net_loss#95))]
Aggregate Attributes [4]: [sum#117, sum#118, sum#119, sum#120]
Results [5]: [web_site_id#114, sum#121, sum#122, sum#123, sum#124]

(67) Exchange
Input [5]: [web_site_id#114, sum#121, sum#122, sum#123, sum#124]
Arguments: hashpartitioning(web_site_id#114, 5), ENSURE_REQUIREMENTS, [id=#125]

(68) HashAggregate [codegen id : 22]
Input [5]: [web_site_id#114, sum#121, sum#122, sum#123, sum#124]
Keys [1]: [web_site_id#114]
Functions [4]: [sum(UnscaledValue(sales_price#92)), sum(UnscaledValue(return_amt#94)), sum(UnscaledValue(profit#93)), sum(UnscaledValue(net_loss#95))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#92))#126, sum(UnscaledValue(return_amt#94))#127, sum(UnscaledValue(profit#93))#128, sum(UnscaledValue(net_loss#95))#129]
Results [5]: [web channel AS channel#130, concat(web_site, web_site_id#114) AS id#131, MakeDecimal(sum(UnscaledValue(sales_price#92))#126,17,2) AS sales#132, MakeDecimal(sum(UnscaledValue(return_amt#94))#127,17,2) AS returns#133, CheckOverflow((promote_precision(cast(MakeDecimal(sum(UnscaledValue(profit#93))#128,17,2) as decimal(18,2))) - promote_precision(cast(MakeDecimal(sum(UnscaledValue(net_loss#95))#129,17,2) as decimal(18,2)))), DecimalType(18,2), true) AS profit#134]

(69) Union

(70) HashAggregate [codegen id : 23]
Input [5]: [channel#39, id#40, sales#41, returns#42, profit#43]
Keys [2]: [channel#39, id#40]
Functions [3]: [partial_sum(sales#41), partial_sum(returns#42), partial_sum(profit#43)]
Aggregate Attributes [6]: [sum#135, isEmpty#136, sum#137, isEmpty#138, sum#139, isEmpty#140]
Results [8]: [channel#39, id#40, sum#141, isEmpty#142, sum#143, isEmpty#144, sum#145, isEmpty#146]

(71) Exchange
Input [8]: [channel#39, id#40, sum#141, isEmpty#142, sum#143, isEmpty#144, sum#145, isEmpty#146]
Arguments: hashpartitioning(channel#39, id#40, 5), ENSURE_REQUIREMENTS, [id=#147]

(72) HashAggregate [codegen id : 24]
Input [8]: [channel#39, id#40, sum#141, isEmpty#142, sum#143, isEmpty#144, sum#145, isEmpty#146]
Keys [2]: [channel#39, id#40]
Functions [3]: [sum(sales#41), sum(returns#42), sum(profit#43)]
Aggregate Attributes [3]: [sum(sales#41)#148, sum(returns#42)#149, sum(profit#43)#150]
Results [5]: [channel#39, id#40, cast(sum(sales#41)#148 as decimal(37,2)) AS sales#151, cast(sum(returns#42)#149 as decimal(37,2)) AS returns#152, cast(sum(profit#43)#150 as decimal(38,2)) AS profit#153]

(73) ReusedExchange [Reuses operator id: 71]
Output [8]: [channel#39, id#40, sum#154, isEmpty#155, sum#156, isEmpty#157, sum#158, isEmpty#159]

(74) HashAggregate [codegen id : 48]
Input [8]: [channel#39, id#40, sum#154, isEmpty#155, sum#156, isEmpty#157, sum#158, isEmpty#159]
Keys [2]: [channel#39, id#40]
Functions [3]: [sum(sales#41), sum(returns#42), sum(profit#43)]
Aggregate Attributes [3]: [sum(sales#41)#160, sum(returns#42)#161, sum(profit#43)#162]
Results [4]: [channel#39, sum(sales#41)#160 AS sales#163, sum(returns#42)#161 AS returns#164, sum(profit#43)#162 AS profit#165]

(75) HashAggregate [codegen id : 48]
Input [4]: [channel#39, sales#163, returns#164, profit#165]
Keys [1]: [channel#39]
Functions [3]: [partial_sum(sales#163), partial_sum(returns#164), partial_sum(profit#165)]
Aggregate Attributes [6]: [sum#166, isEmpty#167, sum#168, isEmpty#169, sum#170, isEmpty#171]
Results [7]: [channel#39, sum#172, isEmpty#173, sum#174, isEmpty#175, sum#176, isEmpty#177]

(76) Exchange
Input [7]: [channel#39, sum#172, isEmpty#173, sum#174, isEmpty#175, sum#176, isEmpty#177]
Arguments: hashpartitioning(channel#39, 5), ENSURE_REQUIREMENTS, [id=#178]

(77) HashAggregate [codegen id : 49]
Input [7]: [channel#39, sum#172, isEmpty#173, sum#174, isEmpty#175, sum#176, isEmpty#177]
Keys [1]: [channel#39]
Functions [3]: [sum(sales#163), sum(returns#164), sum(profit#165)]
Aggregate Attributes [3]: [sum(sales#163)#179, sum(returns#164)#180, sum(profit#165)#181]
Results [5]: [channel#39, null AS id#182, sum(sales#163)#179 AS sum(sales)#183, sum(returns#164)#180 AS sum(returns)#184, sum(profit#165)#181 AS sum(profit)#185]

(78) ReusedExchange [Reuses operator id: 71]
Output [8]: [channel#39, id#40, sum#186, isEmpty#187, sum#188, isEmpty#189, sum#190, isEmpty#191]

(79) HashAggregate [codegen id : 73]
Input [8]: [channel#39, id#40, sum#186, isEmpty#187, sum#188, isEmpty#189, sum#190, isEmpty#191]
Keys [2]: [channel#39, id#40]
Functions [3]: [sum(sales#41), sum(returns#42), sum(profit#43)]
Aggregate Attributes [3]: [sum(sales#41)#192, sum(returns#42)#193, sum(profit#43)#194]
Results [3]: [sum(sales#41)#192 AS sales#163, sum(returns#42)#193 AS returns#164, sum(profit#43)#194 AS profit#165]

(80) HashAggregate [codegen id : 73]
Input [3]: [sales#163, returns#164, profit#165]
Keys: []
Functions [3]: [partial_sum(sales#163), partial_sum(returns#164), partial_sum(profit#165)]
Aggregate Attributes [6]: [sum#195, isEmpty#196, sum#197, isEmpty#198, sum#199, isEmpty#200]
Results [6]: [sum#201, isEmpty#202, sum#203, isEmpty#204, sum#205, isEmpty#206]

(81) Exchange
Input [6]: [sum#201, isEmpty#202, sum#203, isEmpty#204, sum#205, isEmpty#206]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#207]

(82) HashAggregate [codegen id : 74]
Input [6]: [sum#201, isEmpty#202, sum#203, isEmpty#204, sum#205, isEmpty#206]
Keys: []
Functions [3]: [sum(sales#163), sum(returns#164), sum(profit#165)]
Aggregate Attributes [3]: [sum(sales#163)#208, sum(returns#164)#209, sum(profit#165)#210]
Results [5]: [null AS channel#211, null AS id#212, sum(sales#163)#208 AS sum(sales)#213, sum(returns#164)#209 AS sum(returns)#214, sum(profit#165)#210 AS sum(profit)#215]

(83) Union

(84) HashAggregate [codegen id : 75]
Input [5]: [channel#39, id#40, sales#151, returns#152, profit#153]
Keys [5]: [channel#39, id#40, sales#151, returns#152, profit#153]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#39, id#40, sales#151, returns#152, profit#153]

(85) Exchange
Input [5]: [channel#39, id#40, sales#151, returns#152, profit#153]
Arguments: hashpartitioning(channel#39, id#40, sales#151, returns#152, profit#153, 5), ENSURE_REQUIREMENTS, [id=#216]

(86) HashAggregate [codegen id : 76]
Input [5]: [channel#39, id#40, sales#151, returns#152, profit#153]
Keys [5]: [channel#39, id#40, sales#151, returns#152, profit#153]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#39, id#40, sales#151, returns#152, profit#153]

(87) TakeOrderedAndProject
Input [5]: [channel#39, id#40, sales#151, returns#152, profit#153]
Arguments: 100, [channel#39 ASC NULLS FIRST, id#40 ASC NULLS FIRST], [channel#39, id#40, sales#151, returns#152, profit#153]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (92)
+- * Project (91)
   +- * Filter (90)
      +- * ColumnarToRow (89)
         +- Scan parquet default.date_dim (88)


(88) Scan parquet default.date_dim
Output [2]: [d_date_sk#25, d_date#217]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-08-18)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(89) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#25, d_date#217]

(90) Filter [codegen id : 1]
Input [2]: [d_date_sk#25, d_date#217]
Condition : ((d_date#217 >= 1998-08-04) AND (d_date#217 <= 1998-08-18))

(91) Project [codegen id : 1]
Output [1]: [d_date_sk#25]
Input [2]: [d_date_sk#25, d_date#217]

(92) BroadcastExchange
Input [1]: [d_date_sk#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#218]

Subquery:2 Hosting operator id = 5 Hosting Expression = sr_returned_date_sk#15 IN dynamicpruning#5

Subquery:3 Hosting operator id = 21 Hosting Expression = cs_sold_date_sk#47 IN dynamicpruning#5

Subquery:4 Hosting operator id = 25 Hosting Expression = cr_returned_date_sk#57 IN dynamicpruning#5

Subquery:5 Hosting operator id = 41 Hosting Expression = ws_sold_date_sk#89 IN dynamicpruning#5

Subquery:6 Hosting operator id = 45 Hosting Expression = wr_returned_date_sk#100 IN dynamicpruning#5


