== Physical Plan ==
TakeOrderedAndProject (99)
+- * HashAggregate (98)
   +- Exchange (97)
      +- * HashAggregate (96)
         +- Union (95)
            :- * HashAggregate (84)
            :  +- Exchange (83)
            :     +- * HashAggregate (82)
            :        +- Union (81)
            :           :- * HashAggregate (25)
            :           :  +- Exchange (24)
            :           :     +- * HashAggregate (23)
            :           :        +- * Project (22)
            :           :           +- * BroadcastHashJoin Inner BuildRight (21)
            :           :              :- * Project (16)
            :           :              :  +- * BroadcastHashJoin Inner BuildLeft (15)
            :           :              :     :- BroadcastExchange (10)
            :           :              :     :  +- Union (9)
            :           :              :     :     :- * Project (4)
            :           :              :     :     :  +- * Filter (3)
            :           :              :     :     :     +- * ColumnarToRow (2)
            :           :              :     :     :        +- Scan parquet default.store_sales (1)
            :           :              :     :     +- * Project (8)
            :           :              :     :        +- * Filter (7)
            :           :              :     :           +- * ColumnarToRow (6)
            :           :              :     :              +- Scan parquet default.store_returns (5)
            :           :              :     +- * Project (14)
            :           :              :        +- * Filter (13)
            :           :              :           +- * ColumnarToRow (12)
            :           :              :              +- Scan parquet default.date_dim (11)
            :           :              +- BroadcastExchange (20)
            :           :                 +- * Filter (19)
            :           :                    +- * ColumnarToRow (18)
            :           :                       +- Scan parquet default.store (17)
            :           :- * HashAggregate (50)
            :           :  +- Exchange (49)
            :           :     +- * HashAggregate (48)
            :           :        +- * Project (47)
            :           :           +- * BroadcastHashJoin Inner BuildRight (46)
            :           :              :- * Project (41)
            :           :              :  +- * BroadcastHashJoin Inner BuildLeft (40)
            :           :              :     :- BroadcastExchange (35)
            :           :              :     :  +- Union (34)
            :           :              :     :     :- * Project (29)
            :           :              :     :     :  +- * Filter (28)
            :           :              :     :     :     +- * ColumnarToRow (27)
            :           :              :     :     :        +- Scan parquet default.catalog_sales (26)
            :           :              :     :     +- * Project (33)
            :           :              :     :        +- * Filter (32)
            :           :              :     :           +- * ColumnarToRow (31)
            :           :              :     :              +- Scan parquet default.catalog_returns (30)
            :           :              :     +- * Project (39)
            :           :              :        +- * Filter (38)
            :           :              :           +- * ColumnarToRow (37)
            :           :              :              +- Scan parquet default.date_dim (36)
            :           :              +- BroadcastExchange (45)
            :           :                 +- * Filter (44)
            :           :                    +- * ColumnarToRow (43)
            :           :                       +- Scan parquet default.catalog_page (42)
            :           +- * HashAggregate (80)
            :              +- Exchange (79)
            :                 +- * HashAggregate (78)
            :                    +- * Project (77)
            :                       +- * BroadcastHashJoin Inner BuildRight (76)
            :                          :- * Project (71)
            :                          :  +- * BroadcastHashJoin Inner BuildRight (70)
            :                          :     :- Union (64)
            :                          :     :  :- * Project (54)
            :                          :     :  :  +- * Filter (53)
            :                          :     :  :     +- * ColumnarToRow (52)
            :                          :     :  :        +- Scan parquet default.web_sales (51)
            :                          :     :  +- * Project (63)
            :                          :     :     +- * BroadcastHashJoin Inner BuildLeft (62)
            :                          :     :        :- BroadcastExchange (57)
            :                          :     :        :  +- * ColumnarToRow (56)
            :                          :     :        :     +- Scan parquet default.web_returns (55)
            :                          :     :        +- * Project (61)
            :                          :     :           +- * Filter (60)
            :                          :     :              +- * ColumnarToRow (59)
            :                          :     :                 +- Scan parquet default.web_sales (58)
            :                          :     +- BroadcastExchange (69)
            :                          :        +- * Project (68)
            :                          :           +- * Filter (67)
            :                          :              +- * ColumnarToRow (66)
            :                          :                 +- Scan parquet default.date_dim (65)
            :                          +- BroadcastExchange (75)
            :                             +- * Filter (74)
            :                                +- * ColumnarToRow (73)
            :                                   +- Scan parquet default.web_site (72)
            :- * HashAggregate (89)
            :  +- Exchange (88)
            :     +- * HashAggregate (87)
            :        +- * HashAggregate (86)
            :           +- ReusedExchange (85)
            +- * HashAggregate (94)
               +- Exchange (93)
                  +- * HashAggregate (92)
                     +- * HashAggregate (91)
                        +- ReusedExchange (90)


(1) Scan parquet default.store_sales
Output [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cast(ss_sold_date_sk#4 as bigint)), dynamicpruningexpression(cast(ss_sold_date_sk#4 as bigint) IN dynamicpruning#5)]
ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Condition : isnotnull(cast(ss_store_sk#1 as bigint))

(4) Project [codegen id : 1]
Output [6]: [cast(ss_store_sk#1 as bigint) AS store_sk#6, cast(ss_sold_date_sk#4 as bigint) AS date_sk#7, ss_ext_sales_price#2 AS sales_price#8, ss_net_profit#3 AS profit#9, 0.00 AS return_amt#10, 0.00 AS net_loss#11]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]

(5) Scan parquet default.store_returns
Output [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#15), dynamicpruningexpression(sr_returned_date_sk#15 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_store_sk:bigint,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(6) ColumnarToRow [codegen id : 2]
Input [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]

(7) Filter [codegen id : 2]
Input [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]
Condition : isnotnull(sr_store_sk#12)

(8) Project [codegen id : 2]
Output [6]: [sr_store_sk#12 AS store_sk#16, sr_returned_date_sk#15 AS date_sk#17, 0.00 AS sales_price#18, 0.00 AS profit#19, sr_return_amt#13 AS return_amt#20, sr_net_loss#14 AS net_loss#21]
Input [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]

(9) Union

(10) BroadcastExchange
Input [6]: [store_sk#6, date_sk#7, sales_price#8, profit#9, return_amt#10, net_loss#11]
Arguments: HashedRelationBroadcastMode(List(input[1, bigint, true]),false), [id=#22]

(11) Scan parquet default.date_dim
Output [2]: [d_date_sk#23, d_date#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-08-18), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(12) ColumnarToRow
Input [2]: [d_date_sk#23, d_date#24]

(13) Filter
Input [2]: [d_date_sk#23, d_date#24]
Condition : (((isnotnull(d_date#24) AND (d_date#24 >= 10442)) AND (d_date#24 <= 10456)) AND isnotnull(d_date_sk#23))

(14) Project
Output [1]: [d_date_sk#23]
Input [2]: [d_date_sk#23, d_date#24]

(15) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [date_sk#7]
Right keys [1]: [cast(d_date_sk#23 as bigint)]
Join condition: None

(16) Project [codegen id : 4]
Output [5]: [store_sk#6, sales_price#8, profit#9, return_amt#10, net_loss#11]
Input [7]: [store_sk#6, date_sk#7, sales_price#8, profit#9, return_amt#10, net_loss#11, d_date_sk#23]

(17) Scan parquet default.store
Output [2]: [s_store_sk#25, s_store_id#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(18) ColumnarToRow [codegen id : 3]
Input [2]: [s_store_sk#25, s_store_id#26]

(19) Filter [codegen id : 3]
Input [2]: [s_store_sk#25, s_store_id#26]
Condition : isnotnull(s_store_sk#25)

(20) BroadcastExchange
Input [2]: [s_store_sk#25, s_store_id#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(21) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [store_sk#6]
Right keys [1]: [cast(s_store_sk#25 as bigint)]
Join condition: None

(22) Project [codegen id : 4]
Output [5]: [sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_id#26]
Input [7]: [store_sk#6, sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_sk#25, s_store_id#26]

(23) HashAggregate [codegen id : 4]
Input [5]: [sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_id#26]
Keys [1]: [s_store_id#26]
Functions [4]: [partial_sum(UnscaledValue(sales_price#8)), partial_sum(UnscaledValue(return_amt#10)), partial_sum(UnscaledValue(profit#9)), partial_sum(UnscaledValue(net_loss#11))]
Aggregate Attributes [4]: [sum#28, sum#29, sum#30, sum#31]
Results [5]: [s_store_id#26, sum#32, sum#33, sum#34, sum#35]

(24) Exchange
Input [5]: [s_store_id#26, sum#32, sum#33, sum#34, sum#35]
Arguments: hashpartitioning(s_store_id#26, 5), ENSURE_REQUIREMENTS, [id=#36]

(25) HashAggregate [codegen id : 5]
Input [5]: [s_store_id#26, sum#32, sum#33, sum#34, sum#35]
Keys [1]: [s_store_id#26]
Functions [4]: [sum(UnscaledValue(sales_price#8)), sum(UnscaledValue(return_amt#10)), sum(UnscaledValue(profit#9)), sum(UnscaledValue(net_loss#11))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#8))#37, sum(UnscaledValue(return_amt#10))#38, sum(UnscaledValue(profit#9))#39, sum(UnscaledValue(net_loss#11))#40]
Results [5]: [store channel AS channel#41, concat(store, s_store_id#26) AS id#42, MakeDecimal(sum(UnscaledValue(sales_price#8))#37,17,2) AS sales#43, MakeDecimal(sum(UnscaledValue(return_amt#10))#38,17,2) AS returns#44, CheckOverflow((promote_precision(cast(MakeDecimal(sum(UnscaledValue(profit#9))#39,17,2) as decimal(18,2))) - promote_precision(cast(MakeDecimal(sum(UnscaledValue(net_loss#11))#40,17,2) as decimal(18,2)))), DecimalType(18,2), true) AS profit#45]

(26) Scan parquet default.catalog_sales
Output [4]: [cs_catalog_page_sk#46, cs_ext_sales_price#47, cs_net_profit#48, cs_sold_date_sk#49]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#49), dynamicpruningexpression(cs_sold_date_sk#49 IN dynamicpruning#50)]
PushedFilters: [IsNotNull(cs_catalog_page_sk)]
ReadSchema: struct<cs_catalog_page_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(27) ColumnarToRow [codegen id : 6]
Input [4]: [cs_catalog_page_sk#46, cs_ext_sales_price#47, cs_net_profit#48, cs_sold_date_sk#49]

(28) Filter [codegen id : 6]
Input [4]: [cs_catalog_page_sk#46, cs_ext_sales_price#47, cs_net_profit#48, cs_sold_date_sk#49]
Condition : isnotnull(cs_catalog_page_sk#46)

(29) Project [codegen id : 6]
Output [6]: [cs_catalog_page_sk#46 AS page_sk#51, cs_sold_date_sk#49 AS date_sk#52, cs_ext_sales_price#47 AS sales_price#53, cs_net_profit#48 AS profit#54, 0.00 AS return_amt#55, 0.00 AS net_loss#56]
Input [4]: [cs_catalog_page_sk#46, cs_ext_sales_price#47, cs_net_profit#48, cs_sold_date_sk#49]

(30) Scan parquet default.catalog_returns
Output [4]: [cr_catalog_page_sk#57, cr_return_amount#58, cr_net_loss#59, cr_returned_date_sk#60]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#60), dynamicpruningexpression(cr_returned_date_sk#60 IN dynamicpruning#50)]
PushedFilters: [IsNotNull(cr_catalog_page_sk)]
ReadSchema: struct<cr_catalog_page_sk:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(31) ColumnarToRow [codegen id : 7]
Input [4]: [cr_catalog_page_sk#57, cr_return_amount#58, cr_net_loss#59, cr_returned_date_sk#60]

(32) Filter [codegen id : 7]
Input [4]: [cr_catalog_page_sk#57, cr_return_amount#58, cr_net_loss#59, cr_returned_date_sk#60]
Condition : isnotnull(cr_catalog_page_sk#57)

(33) Project [codegen id : 7]
Output [6]: [cr_catalog_page_sk#57 AS page_sk#61, cr_returned_date_sk#60 AS date_sk#62, 0.00 AS sales_price#63, 0.00 AS profit#64, cr_return_amount#58 AS return_amt#65, cr_net_loss#59 AS net_loss#66]
Input [4]: [cr_catalog_page_sk#57, cr_return_amount#58, cr_net_loss#59, cr_returned_date_sk#60]

(34) Union

(35) BroadcastExchange
Input [6]: [page_sk#51, date_sk#52, sales_price#53, profit#54, return_amt#55, net_loss#56]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#67]

(36) Scan parquet default.date_dim
Output [2]: [d_date_sk#23, d_date#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-08-18), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(37) ColumnarToRow
Input [2]: [d_date_sk#23, d_date#24]

(38) Filter
Input [2]: [d_date_sk#23, d_date#24]
Condition : (((isnotnull(d_date#24) AND (d_date#24 >= 10442)) AND (d_date#24 <= 10456)) AND isnotnull(d_date_sk#23))

(39) Project
Output [1]: [d_date_sk#23]
Input [2]: [d_date_sk#23, d_date#24]

(40) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [date_sk#52]
Right keys [1]: [d_date_sk#23]
Join condition: None

(41) Project [codegen id : 9]
Output [5]: [page_sk#51, sales_price#53, profit#54, return_amt#55, net_loss#56]
Input [7]: [page_sk#51, date_sk#52, sales_price#53, profit#54, return_amt#55, net_loss#56, d_date_sk#23]

(42) Scan parquet default.catalog_page
Output [2]: [cp_catalog_page_sk#68, cp_catalog_page_id#69]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>

(43) ColumnarToRow [codegen id : 8]
Input [2]: [cp_catalog_page_sk#68, cp_catalog_page_id#69]

(44) Filter [codegen id : 8]
Input [2]: [cp_catalog_page_sk#68, cp_catalog_page_id#69]
Condition : isnotnull(cp_catalog_page_sk#68)

(45) BroadcastExchange
Input [2]: [cp_catalog_page_sk#68, cp_catalog_page_id#69]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#70]

(46) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [page_sk#51]
Right keys [1]: [cp_catalog_page_sk#68]
Join condition: None

(47) Project [codegen id : 9]
Output [5]: [sales_price#53, profit#54, return_amt#55, net_loss#56, cp_catalog_page_id#69]
Input [7]: [page_sk#51, sales_price#53, profit#54, return_amt#55, net_loss#56, cp_catalog_page_sk#68, cp_catalog_page_id#69]

(48) HashAggregate [codegen id : 9]
Input [5]: [sales_price#53, profit#54, return_amt#55, net_loss#56, cp_catalog_page_id#69]
Keys [1]: [cp_catalog_page_id#69]
Functions [4]: [partial_sum(UnscaledValue(sales_price#53)), partial_sum(UnscaledValue(return_amt#55)), partial_sum(UnscaledValue(profit#54)), partial_sum(UnscaledValue(net_loss#56))]
Aggregate Attributes [4]: [sum#71, sum#72, sum#73, sum#74]
Results [5]: [cp_catalog_page_id#69, sum#75, sum#76, sum#77, sum#78]

(49) Exchange
Input [5]: [cp_catalog_page_id#69, sum#75, sum#76, sum#77, sum#78]
Arguments: hashpartitioning(cp_catalog_page_id#69, 5), ENSURE_REQUIREMENTS, [id=#79]

(50) HashAggregate [codegen id : 10]
Input [5]: [cp_catalog_page_id#69, sum#75, sum#76, sum#77, sum#78]
Keys [1]: [cp_catalog_page_id#69]
Functions [4]: [sum(UnscaledValue(sales_price#53)), sum(UnscaledValue(return_amt#55)), sum(UnscaledValue(profit#54)), sum(UnscaledValue(net_loss#56))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#53))#80, sum(UnscaledValue(return_amt#55))#81, sum(UnscaledValue(profit#54))#82, sum(UnscaledValue(net_loss#56))#83]
Results [5]: [catalog channel AS channel#84, concat(catalog_page, cp_catalog_page_id#69) AS id#85, MakeDecimal(sum(UnscaledValue(sales_price#53))#80,17,2) AS sales#86, MakeDecimal(sum(UnscaledValue(return_amt#55))#81,17,2) AS returns#87, CheckOverflow((promote_precision(cast(MakeDecimal(sum(UnscaledValue(profit#54))#82,17,2) as decimal(18,2))) - promote_precision(cast(MakeDecimal(sum(UnscaledValue(net_loss#56))#83,17,2) as decimal(18,2)))), DecimalType(18,2), true) AS profit#88]

(51) Scan parquet default.web_sales
Output [4]: [ws_web_site_sk#89, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cast(ws_sold_date_sk#92 as bigint)), dynamicpruningexpression(cast(ws_sold_date_sk#92 as bigint) IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_web_site_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(52) ColumnarToRow [codegen id : 11]
Input [4]: [ws_web_site_sk#89, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92]

(53) Filter [codegen id : 11]
Input [4]: [ws_web_site_sk#89, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92]
Condition : isnotnull(ws_web_site_sk#89)

(54) Project [codegen id : 11]
Output [6]: [ws_web_site_sk#89 AS wsr_web_site_sk#93, cast(ws_sold_date_sk#92 as bigint) AS date_sk#94, ws_ext_sales_price#90 AS sales_price#95, ws_net_profit#91 AS profit#96, 0.00 AS return_amt#97, 0.00 AS net_loss#98]
Input [4]: [ws_web_site_sk#89, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92]

(55) Scan parquet default.web_returns
Output [5]: [wr_item_sk#99, wr_order_number#100, wr_return_amt#101, wr_net_loss#102, wr_returned_date_sk#103]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#103), dynamicpruningexpression(wr_returned_date_sk#103 IN dynamicpruning#5)]
ReadSchema: struct<wr_item_sk:bigint,wr_order_number:bigint,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(56) ColumnarToRow [codegen id : 12]
Input [5]: [wr_item_sk#99, wr_order_number#100, wr_return_amt#101, wr_net_loss#102, wr_returned_date_sk#103]

(57) BroadcastExchange
Input [5]: [wr_item_sk#99, wr_order_number#100, wr_return_amt#101, wr_net_loss#102, wr_returned_date_sk#103]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true], input[1, bigint, true]),false), [id=#104]

(58) Scan parquet default.web_sales
Output [4]: [ws_item_sk#105, ws_web_site_sk#89, ws_order_number#106, ws_sold_date_sk#92]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_order_number:int>

(59) ColumnarToRow
Input [4]: [ws_item_sk#105, ws_web_site_sk#89, ws_order_number#106, ws_sold_date_sk#92]

(60) Filter
Input [4]: [ws_item_sk#105, ws_web_site_sk#89, ws_order_number#106, ws_sold_date_sk#92]
Condition : ((isnotnull(ws_item_sk#105) AND isnotnull(ws_order_number#106)) AND isnotnull(ws_web_site_sk#89))

(61) Project
Output [3]: [ws_item_sk#105, ws_web_site_sk#89, ws_order_number#106]
Input [4]: [ws_item_sk#105, ws_web_site_sk#89, ws_order_number#106, ws_sold_date_sk#92]

(62) BroadcastHashJoin [codegen id : 13]
Left keys [2]: [wr_item_sk#99, wr_order_number#100]
Right keys [2]: [cast(ws_item_sk#105 as bigint), cast(ws_order_number#106 as bigint)]
Join condition: None

(63) Project [codegen id : 13]
Output [6]: [ws_web_site_sk#89 AS wsr_web_site_sk#107, wr_returned_date_sk#103 AS date_sk#108, 0.00 AS sales_price#109, 0.00 AS profit#110, wr_return_amt#101 AS return_amt#111, wr_net_loss#102 AS net_loss#112]
Input [8]: [wr_item_sk#99, wr_order_number#100, wr_return_amt#101, wr_net_loss#102, wr_returned_date_sk#103, ws_item_sk#105, ws_web_site_sk#89, ws_order_number#106]

(64) Union

(65) Scan parquet default.date_dim
Output [2]: [d_date_sk#23, d_date#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-08-18), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(66) ColumnarToRow [codegen id : 14]
Input [2]: [d_date_sk#23, d_date#24]

(67) Filter [codegen id : 14]
Input [2]: [d_date_sk#23, d_date#24]
Condition : (((isnotnull(d_date#24) AND (d_date#24 >= 10442)) AND (d_date#24 <= 10456)) AND isnotnull(d_date_sk#23))

(68) Project [codegen id : 14]
Output [1]: [d_date_sk#23]
Input [2]: [d_date_sk#23, d_date#24]

(69) BroadcastExchange
Input [1]: [d_date_sk#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#113]

(70) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [date_sk#94]
Right keys [1]: [cast(d_date_sk#23 as bigint)]
Join condition: None

(71) Project [codegen id : 16]
Output [5]: [wsr_web_site_sk#93, sales_price#95, profit#96, return_amt#97, net_loss#98]
Input [7]: [wsr_web_site_sk#93, date_sk#94, sales_price#95, profit#96, return_amt#97, net_loss#98, d_date_sk#23]

(72) Scan parquet default.web_site
Output [2]: [web_site_sk#114, web_site_id#115]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string>

(73) ColumnarToRow [codegen id : 15]
Input [2]: [web_site_sk#114, web_site_id#115]

(74) Filter [codegen id : 15]
Input [2]: [web_site_sk#114, web_site_id#115]
Condition : isnotnull(web_site_sk#114)

(75) BroadcastExchange
Input [2]: [web_site_sk#114, web_site_id#115]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#116]

(76) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [wsr_web_site_sk#93]
Right keys [1]: [web_site_sk#114]
Join condition: None

(77) Project [codegen id : 16]
Output [5]: [sales_price#95, profit#96, return_amt#97, net_loss#98, web_site_id#115]
Input [7]: [wsr_web_site_sk#93, sales_price#95, profit#96, return_amt#97, net_loss#98, web_site_sk#114, web_site_id#115]

(78) HashAggregate [codegen id : 16]
Input [5]: [sales_price#95, profit#96, return_amt#97, net_loss#98, web_site_id#115]
Keys [1]: [web_site_id#115]
Functions [4]: [partial_sum(UnscaledValue(sales_price#95)), partial_sum(UnscaledValue(return_amt#97)), partial_sum(UnscaledValue(profit#96)), partial_sum(UnscaledValue(net_loss#98))]
Aggregate Attributes [4]: [sum#117, sum#118, sum#119, sum#120]
Results [5]: [web_site_id#115, sum#121, sum#122, sum#123, sum#124]

(79) Exchange
Input [5]: [web_site_id#115, sum#121, sum#122, sum#123, sum#124]
Arguments: hashpartitioning(web_site_id#115, 5), ENSURE_REQUIREMENTS, [id=#125]

(80) HashAggregate [codegen id : 17]
Input [5]: [web_site_id#115, sum#121, sum#122, sum#123, sum#124]
Keys [1]: [web_site_id#115]
Functions [4]: [sum(UnscaledValue(sales_price#95)), sum(UnscaledValue(return_amt#97)), sum(UnscaledValue(profit#96)), sum(UnscaledValue(net_loss#98))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#95))#126, sum(UnscaledValue(return_amt#97))#127, sum(UnscaledValue(profit#96))#128, sum(UnscaledValue(net_loss#98))#129]
Results [5]: [web channel AS channel#130, concat(web_site, web_site_id#115) AS id#131, MakeDecimal(sum(UnscaledValue(sales_price#95))#126,17,2) AS sales#132, MakeDecimal(sum(UnscaledValue(return_amt#97))#127,17,2) AS returns#133, CheckOverflow((promote_precision(cast(MakeDecimal(sum(UnscaledValue(profit#96))#128,17,2) as decimal(18,2))) - promote_precision(cast(MakeDecimal(sum(UnscaledValue(net_loss#98))#129,17,2) as decimal(18,2)))), DecimalType(18,2), true) AS profit#134]

(81) Union

(82) HashAggregate [codegen id : 18]
Input [5]: [channel#41, id#42, sales#43, returns#44, profit#45]
Keys [2]: [channel#41, id#42]
Functions [3]: [partial_sum(sales#43), partial_sum(returns#44), partial_sum(profit#45)]
Aggregate Attributes [6]: [sum#135, isEmpty#136, sum#137, isEmpty#138, sum#139, isEmpty#140]
Results [8]: [channel#41, id#42, sum#141, isEmpty#142, sum#143, isEmpty#144, sum#145, isEmpty#146]

(83) Exchange
Input [8]: [channel#41, id#42, sum#141, isEmpty#142, sum#143, isEmpty#144, sum#145, isEmpty#146]
Arguments: hashpartitioning(channel#41, id#42, 5), ENSURE_REQUIREMENTS, [id=#147]

(84) HashAggregate [codegen id : 19]
Input [8]: [channel#41, id#42, sum#141, isEmpty#142, sum#143, isEmpty#144, sum#145, isEmpty#146]
Keys [2]: [channel#41, id#42]
Functions [3]: [sum(sales#43), sum(returns#44), sum(profit#45)]
Aggregate Attributes [3]: [sum(sales#43)#148, sum(returns#44)#149, sum(profit#45)#150]
Results [5]: [channel#41, id#42, cast(sum(sales#43)#148 as decimal(37,2)) AS sales#151, cast(sum(returns#44)#149 as decimal(37,2)) AS returns#152, cast(sum(profit#45)#150 as decimal(38,2)) AS profit#153]

(85) ReusedExchange [Reuses operator id: unknown]
Output [8]: [channel#41, id#42, sum#154, isEmpty#155, sum#156, isEmpty#157, sum#158, isEmpty#159]

(86) HashAggregate [codegen id : 38]
Input [8]: [channel#41, id#42, sum#154, isEmpty#155, sum#156, isEmpty#157, sum#158, isEmpty#159]
Keys [2]: [channel#41, id#42]
Functions [3]: [sum(sales#43), sum(returns#44), sum(profit#160)]
Aggregate Attributes [3]: [sum(sales#43)#161, sum(returns#44)#162, sum(profit#160)#163]
Results [4]: [channel#41, sum(sales#43)#161 AS sales#164, sum(returns#44)#162 AS returns#165, sum(profit#160)#163 AS profit#166]

(87) HashAggregate [codegen id : 38]
Input [4]: [channel#41, sales#164, returns#165, profit#166]
Keys [1]: [channel#41]
Functions [3]: [partial_sum(sales#164), partial_sum(returns#165), partial_sum(profit#166)]
Aggregate Attributes [6]: [sum#167, isEmpty#168, sum#169, isEmpty#170, sum#171, isEmpty#172]
Results [7]: [channel#41, sum#173, isEmpty#174, sum#175, isEmpty#176, sum#177, isEmpty#178]

(88) Exchange
Input [7]: [channel#41, sum#173, isEmpty#174, sum#175, isEmpty#176, sum#177, isEmpty#178]
Arguments: hashpartitioning(channel#41, 5), ENSURE_REQUIREMENTS, [id=#179]

(89) HashAggregate [codegen id : 39]
Input [7]: [channel#41, sum#173, isEmpty#174, sum#175, isEmpty#176, sum#177, isEmpty#178]
Keys [1]: [channel#41]
Functions [3]: [sum(sales#164), sum(returns#165), sum(profit#166)]
Aggregate Attributes [3]: [sum(sales#164)#180, sum(returns#165)#181, sum(profit#166)#182]
Results [5]: [channel#41, null AS id#183, sum(sales#164)#180 AS sum(sales)#184, sum(returns#165)#181 AS sum(returns)#185, sum(profit#166)#182 AS sum(profit)#186]

(90) ReusedExchange [Reuses operator id: unknown]
Output [8]: [channel#41, id#42, sum#187, isEmpty#188, sum#189, isEmpty#190, sum#191, isEmpty#192]

(91) HashAggregate [codegen id : 58]
Input [8]: [channel#41, id#42, sum#187, isEmpty#188, sum#189, isEmpty#190, sum#191, isEmpty#192]
Keys [2]: [channel#41, id#42]
Functions [3]: [sum(sales#43), sum(returns#44), sum(profit#193)]
Aggregate Attributes [3]: [sum(sales#43)#194, sum(returns#44)#195, sum(profit#193)#196]
Results [3]: [sum(sales#43)#194 AS sales#164, sum(returns#44)#195 AS returns#165, sum(profit#193)#196 AS profit#166]

(92) HashAggregate [codegen id : 58]
Input [3]: [sales#164, returns#165, profit#166]
Keys: []
Functions [3]: [partial_sum(sales#164), partial_sum(returns#165), partial_sum(profit#166)]
Aggregate Attributes [6]: [sum#197, isEmpty#198, sum#199, isEmpty#200, sum#201, isEmpty#202]
Results [6]: [sum#203, isEmpty#204, sum#205, isEmpty#206, sum#207, isEmpty#208]

(93) Exchange
Input [6]: [sum#203, isEmpty#204, sum#205, isEmpty#206, sum#207, isEmpty#208]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#209]

(94) HashAggregate [codegen id : 59]
Input [6]: [sum#203, isEmpty#204, sum#205, isEmpty#206, sum#207, isEmpty#208]
Keys: []
Functions [3]: [sum(sales#164), sum(returns#165), sum(profit#166)]
Aggregate Attributes [3]: [sum(sales#164)#210, sum(returns#165)#211, sum(profit#166)#212]
Results [5]: [null AS channel#213, null AS id#214, sum(sales#164)#210 AS sum(sales)#215, sum(returns#165)#211 AS sum(returns)#216, sum(profit#166)#212 AS sum(profit)#217]

(95) Union

(96) HashAggregate [codegen id : 60]
Input [5]: [channel#41, id#42, sales#151, returns#152, profit#153]
Keys [5]: [channel#41, id#42, sales#151, returns#152, profit#153]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#41, id#42, sales#151, returns#152, profit#153]

(97) Exchange
Input [5]: [channel#41, id#42, sales#151, returns#152, profit#153]
Arguments: hashpartitioning(channel#41, id#42, sales#151, returns#152, profit#153, 5), ENSURE_REQUIREMENTS, [id=#218]

(98) HashAggregate [codegen id : 61]
Input [5]: [channel#41, id#42, sales#151, returns#152, profit#153]
Keys [5]: [channel#41, id#42, sales#151, returns#152, profit#153]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#41, id#42, sales#151, returns#152, profit#153]

(99) TakeOrderedAndProject
Input [5]: [channel#41, id#42, sales#151, returns#152, profit#153]
Arguments: 100, [channel#41 ASC NULLS FIRST, id#42 ASC NULLS FIRST], [channel#41, id#42, sales#151, returns#152, profit#153]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cast(ss_sold_date_sk#4 as bigint) IN dynamicpruning#5
ReusedExchange (100)


(100) ReusedExchange [Reuses operator id: 69]
Output [1]: [d_date_sk#23]

Subquery:2 Hosting operator id = 5 Hosting Expression = sr_returned_date_sk#15 IN dynamicpruning#5

Subquery:3 Hosting operator id = 26 Hosting Expression = cs_sold_date_sk#49 IN dynamicpruning#50
ReusedExchange (101)


(101) ReusedExchange [Reuses operator id: 69]
Output [1]: [d_date_sk#23]

Subquery:4 Hosting operator id = 30 Hosting Expression = cr_returned_date_sk#60 IN dynamicpruning#50

Subquery:5 Hosting operator id = 51 Hosting Expression = cast(ws_sold_date_sk#92 as bigint) IN dynamicpruning#5

Subquery:6 Hosting operator id = 55 Hosting Expression = wr_returned_date_sk#103 IN dynamicpruning#5


