== Physical Plan ==
TakeOrderedAndProject (90)
+- * HashAggregate (89)
   +- Exchange (88)
      +- * HashAggregate (87)
         +- Union (86)
            :- * HashAggregate (75)
            :  +- Exchange (74)
            :     +- * HashAggregate (73)
            :        +- Union (72)
            :           :- * HashAggregate (21)
            :           :  +- Exchange (20)
            :           :     +- * HashAggregate (19)
            :           :        +- * Project (18)
            :           :           +- * BroadcastHashJoin Inner BuildRight (17)
            :           :              :- * Project (15)
            :           :              :  +- * BroadcastHashJoin Inner BuildRight (14)
            :           :              :     :- Union (9)
            :           :              :     :  :- * Project (4)
            :           :              :     :  :  +- * Filter (3)
            :           :              :     :  :     +- * ColumnarToRow (2)
            :           :              :     :  :        +- Scan parquet spark_catalog.default.store_sales (1)
            :           :              :     :  +- * Project (8)
            :           :              :     :     +- * Filter (7)
            :           :              :     :        +- * ColumnarToRow (6)
            :           :              :     :           +- Scan parquet spark_catalog.default.store_returns (5)
            :           :              :     +- BroadcastExchange (13)
            :           :              :        +- * Filter (12)
            :           :              :           +- * ColumnarToRow (11)
            :           :              :              +- Scan parquet spark_catalog.default.store (10)
            :           :              +- ReusedExchange (16)
            :           :- * HashAggregate (42)
            :           :  +- Exchange (41)
            :           :     +- * HashAggregate (40)
            :           :        +- * Project (39)
            :           :           +- * BroadcastHashJoin Inner BuildRight (38)
            :           :              :- * Project (36)
            :           :              :  +- * BroadcastHashJoin Inner BuildRight (35)
            :           :              :     :- Union (30)
            :           :              :     :  :- * Project (25)
            :           :              :     :  :  +- * Filter (24)
            :           :              :     :  :     +- * ColumnarToRow (23)
            :           :              :     :  :        +- Scan parquet spark_catalog.default.catalog_sales (22)
            :           :              :     :  +- * Project (29)
            :           :              :     :     +- * Filter (28)
            :           :              :     :        +- * ColumnarToRow (27)
            :           :              :     :           +- Scan parquet spark_catalog.default.catalog_returns (26)
            :           :              :     +- BroadcastExchange (34)
            :           :              :        +- * Filter (33)
            :           :              :           +- * ColumnarToRow (32)
            :           :              :              +- Scan parquet spark_catalog.default.catalog_page (31)
            :           :              +- ReusedExchange (37)
            :           +- * HashAggregate (71)
            :              +- Exchange (70)
            :                 +- * HashAggregate (69)
            :                    +- * Project (68)
            :                       +- * BroadcastHashJoin Inner BuildRight (67)
            :                          :- * Project (65)
            :                          :  +- * BroadcastHashJoin Inner BuildRight (64)
            :                          :     :- Union (59)
            :                          :     :  :- * Project (46)
            :                          :     :  :  +- * Filter (45)
            :                          :     :  :     +- * ColumnarToRow (44)
            :                          :     :  :        +- Scan parquet spark_catalog.default.web_sales (43)
            :                          :     :  +- * Project (58)
            :                          :     :     +- * SortMergeJoin Inner (57)
            :                          :     :        :- * Sort (50)
            :                          :     :        :  +- Exchange (49)
            :                          :     :        :     +- * ColumnarToRow (48)
            :                          :     :        :        +- Scan parquet spark_catalog.default.web_returns (47)
            :                          :     :        +- * Sort (56)
            :                          :     :           +- Exchange (55)
            :                          :     :              +- * Project (54)
            :                          :     :                 +- * Filter (53)
            :                          :     :                    +- * ColumnarToRow (52)
            :                          :     :                       +- Scan parquet spark_catalog.default.web_sales (51)
            :                          :     +- BroadcastExchange (63)
            :                          :        +- * Filter (62)
            :                          :           +- * ColumnarToRow (61)
            :                          :              +- Scan parquet spark_catalog.default.web_site (60)
            :                          +- ReusedExchange (66)
            :- * HashAggregate (80)
            :  +- Exchange (79)
            :     +- * HashAggregate (78)
            :        +- * HashAggregate (77)
            :           +- ReusedExchange (76)
            +- * HashAggregate (85)
               +- Exchange (84)
                  +- * HashAggregate (83)
                     +- * HashAggregate (82)
                        +- ReusedExchange (81)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_store_sk#1)

(4) Project [codegen id : 1]
Output [6]: [ss_store_sk#1 AS store_sk#6, ss_sold_date_sk#4 AS date_sk#7, ss_ext_sales_price#2 AS sales_price#8, ss_net_profit#3 AS profit#9, 0.00 AS return_amt#10, 0.00 AS net_loss#11]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]

(5) Scan parquet spark_catalog.default.store_returns
Output [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#15), dynamicpruningexpression(sr_returned_date_sk#15 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_store_sk:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(6) ColumnarToRow [codegen id : 2]
Input [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]

(7) Filter [codegen id : 2]
Input [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]
Condition : isnotnull(sr_store_sk#12)

(8) Project [codegen id : 2]
Output [6]: [sr_store_sk#12 AS store_sk#16, sr_returned_date_sk#15 AS date_sk#17, 0.00 AS sales_price#18, 0.00 AS profit#19, sr_return_amt#13 AS return_amt#20, sr_net_loss#14 AS net_loss#21]
Input [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]

(9) Union

(10) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#22, s_store_id#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(11) ColumnarToRow [codegen id : 3]
Input [2]: [s_store_sk#22, s_store_id#23]

(12) Filter [codegen id : 3]
Input [2]: [s_store_sk#22, s_store_id#23]
Condition : isnotnull(s_store_sk#22)

(13) BroadcastExchange
Input [2]: [s_store_sk#22, s_store_id#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(14) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [store_sk#6]
Right keys [1]: [s_store_sk#22]
Join type: Inner
Join condition: None

(15) Project [codegen id : 5]
Output [6]: [date_sk#7, sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_id#23]
Input [8]: [store_sk#6, date_sk#7, sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_sk#22, s_store_id#23]

(16) ReusedExchange [Reuses operator id: 95]
Output [1]: [d_date_sk#24]

(17) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [date_sk#7]
Right keys [1]: [d_date_sk#24]
Join type: Inner
Join condition: None

(18) Project [codegen id : 5]
Output [5]: [sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_id#23]
Input [7]: [date_sk#7, sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_id#23, d_date_sk#24]

(19) HashAggregate [codegen id : 5]
Input [5]: [sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_id#23]
Keys [1]: [s_store_id#23]
Functions [4]: [partial_sum(UnscaledValue(sales_price#8)), partial_sum(UnscaledValue(return_amt#10)), partial_sum(UnscaledValue(profit#9)), partial_sum(UnscaledValue(net_loss#11))]
Aggregate Attributes [4]: [sum#25, sum#26, sum#27, sum#28]
Results [5]: [s_store_id#23, sum#29, sum#30, sum#31, sum#32]

(20) Exchange
Input [5]: [s_store_id#23, sum#29, sum#30, sum#31, sum#32]
Arguments: hashpartitioning(s_store_id#23, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(21) HashAggregate [codegen id : 6]
Input [5]: [s_store_id#23, sum#29, sum#30, sum#31, sum#32]
Keys [1]: [s_store_id#23]
Functions [4]: [sum(UnscaledValue(sales_price#8)), sum(UnscaledValue(return_amt#10)), sum(UnscaledValue(profit#9)), sum(UnscaledValue(net_loss#11))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#8))#33, sum(UnscaledValue(return_amt#10))#34, sum(UnscaledValue(profit#9))#35, sum(UnscaledValue(net_loss#11))#36]
Results [5]: [store channel AS channel#37, concat(store, s_store_id#23) AS id#38, MakeDecimal(sum(UnscaledValue(sales_price#8))#33,17,2) AS sales#39, MakeDecimal(sum(UnscaledValue(return_amt#10))#34,17,2) AS returns#40, (MakeDecimal(sum(UnscaledValue(profit#9))#35,17,2) - MakeDecimal(sum(UnscaledValue(net_loss#11))#36,17,2)) AS profit#41]

(22) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_catalog_page_sk#42, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#45), dynamicpruningexpression(cs_sold_date_sk#45 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_catalog_page_sk)]
ReadSchema: struct<cs_catalog_page_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(23) ColumnarToRow [codegen id : 7]
Input [4]: [cs_catalog_page_sk#42, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45]

(24) Filter [codegen id : 7]
Input [4]: [cs_catalog_page_sk#42, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45]
Condition : isnotnull(cs_catalog_page_sk#42)

(25) Project [codegen id : 7]
Output [6]: [cs_catalog_page_sk#42 AS page_sk#46, cs_sold_date_sk#45 AS date_sk#47, cs_ext_sales_price#43 AS sales_price#48, cs_net_profit#44 AS profit#49, 0.00 AS return_amt#50, 0.00 AS net_loss#51]
Input [4]: [cs_catalog_page_sk#42, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45]

(26) Scan parquet spark_catalog.default.catalog_returns
Output [4]: [cr_catalog_page_sk#52, cr_return_amount#53, cr_net_loss#54, cr_returned_date_sk#55]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#55), dynamicpruningexpression(cr_returned_date_sk#55 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cr_catalog_page_sk)]
ReadSchema: struct<cr_catalog_page_sk:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(27) ColumnarToRow [codegen id : 8]
Input [4]: [cr_catalog_page_sk#52, cr_return_amount#53, cr_net_loss#54, cr_returned_date_sk#55]

(28) Filter [codegen id : 8]
Input [4]: [cr_catalog_page_sk#52, cr_return_amount#53, cr_net_loss#54, cr_returned_date_sk#55]
Condition : isnotnull(cr_catalog_page_sk#52)

(29) Project [codegen id : 8]
Output [6]: [cr_catalog_page_sk#52 AS page_sk#56, cr_returned_date_sk#55 AS date_sk#57, 0.00 AS sales_price#58, 0.00 AS profit#59, cr_return_amount#53 AS return_amt#60, cr_net_loss#54 AS net_loss#61]
Input [4]: [cr_catalog_page_sk#52, cr_return_amount#53, cr_net_loss#54, cr_returned_date_sk#55]

(30) Union

(31) Scan parquet spark_catalog.default.catalog_page
Output [2]: [cp_catalog_page_sk#62, cp_catalog_page_id#63]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>

(32) ColumnarToRow [codegen id : 9]
Input [2]: [cp_catalog_page_sk#62, cp_catalog_page_id#63]

(33) Filter [codegen id : 9]
Input [2]: [cp_catalog_page_sk#62, cp_catalog_page_id#63]
Condition : isnotnull(cp_catalog_page_sk#62)

(34) BroadcastExchange
Input [2]: [cp_catalog_page_sk#62, cp_catalog_page_id#63]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(35) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [page_sk#46]
Right keys [1]: [cp_catalog_page_sk#62]
Join type: Inner
Join condition: None

(36) Project [codegen id : 11]
Output [6]: [date_sk#47, sales_price#48, profit#49, return_amt#50, net_loss#51, cp_catalog_page_id#63]
Input [8]: [page_sk#46, date_sk#47, sales_price#48, profit#49, return_amt#50, net_loss#51, cp_catalog_page_sk#62, cp_catalog_page_id#63]

(37) ReusedExchange [Reuses operator id: 95]
Output [1]: [d_date_sk#24]

(38) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [date_sk#47]
Right keys [1]: [d_date_sk#24]
Join type: Inner
Join condition: None

(39) Project [codegen id : 11]
Output [5]: [sales_price#48, profit#49, return_amt#50, net_loss#51, cp_catalog_page_id#63]
Input [7]: [date_sk#47, sales_price#48, profit#49, return_amt#50, net_loss#51, cp_catalog_page_id#63, d_date_sk#24]

(40) HashAggregate [codegen id : 11]
Input [5]: [sales_price#48, profit#49, return_amt#50, net_loss#51, cp_catalog_page_id#63]
Keys [1]: [cp_catalog_page_id#63]
Functions [4]: [partial_sum(UnscaledValue(sales_price#48)), partial_sum(UnscaledValue(return_amt#50)), partial_sum(UnscaledValue(profit#49)), partial_sum(UnscaledValue(net_loss#51))]
Aggregate Attributes [4]: [sum#64, sum#65, sum#66, sum#67]
Results [5]: [cp_catalog_page_id#63, sum#68, sum#69, sum#70, sum#71]

(41) Exchange
Input [5]: [cp_catalog_page_id#63, sum#68, sum#69, sum#70, sum#71]
Arguments: hashpartitioning(cp_catalog_page_id#63, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(42) HashAggregate [codegen id : 12]
Input [5]: [cp_catalog_page_id#63, sum#68, sum#69, sum#70, sum#71]
Keys [1]: [cp_catalog_page_id#63]
Functions [4]: [sum(UnscaledValue(sales_price#48)), sum(UnscaledValue(return_amt#50)), sum(UnscaledValue(profit#49)), sum(UnscaledValue(net_loss#51))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#48))#72, sum(UnscaledValue(return_amt#50))#73, sum(UnscaledValue(profit#49))#74, sum(UnscaledValue(net_loss#51))#75]
Results [5]: [catalog channel AS channel#76, concat(catalog_page, cp_catalog_page_id#63) AS id#77, MakeDecimal(sum(UnscaledValue(sales_price#48))#72,17,2) AS sales#78, MakeDecimal(sum(UnscaledValue(return_amt#50))#73,17,2) AS returns#79, (MakeDecimal(sum(UnscaledValue(profit#49))#74,17,2) - MakeDecimal(sum(UnscaledValue(net_loss#51))#75,17,2)) AS profit#80]

(43) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_web_site_sk#81, ws_ext_sales_price#82, ws_net_profit#83, ws_sold_date_sk#84]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#84), dynamicpruningexpression(ws_sold_date_sk#84 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_web_site_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(44) ColumnarToRow [codegen id : 13]
Input [4]: [ws_web_site_sk#81, ws_ext_sales_price#82, ws_net_profit#83, ws_sold_date_sk#84]

(45) Filter [codegen id : 13]
Input [4]: [ws_web_site_sk#81, ws_ext_sales_price#82, ws_net_profit#83, ws_sold_date_sk#84]
Condition : isnotnull(ws_web_site_sk#81)

(46) Project [codegen id : 13]
Output [6]: [ws_web_site_sk#81 AS wsr_web_site_sk#85, ws_sold_date_sk#84 AS date_sk#86, ws_ext_sales_price#82 AS sales_price#87, ws_net_profit#83 AS profit#88, 0.00 AS return_amt#89, 0.00 AS net_loss#90]
Input [4]: [ws_web_site_sk#81, ws_ext_sales_price#82, ws_net_profit#83, ws_sold_date_sk#84]

(47) Scan parquet spark_catalog.default.web_returns
Output [5]: [wr_item_sk#91, wr_order_number#92, wr_return_amt#93, wr_net_loss#94, wr_returned_date_sk#95]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#95), dynamicpruningexpression(wr_returned_date_sk#95 IN dynamicpruning#5)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(48) ColumnarToRow [codegen id : 14]
Input [5]: [wr_item_sk#91, wr_order_number#92, wr_return_amt#93, wr_net_loss#94, wr_returned_date_sk#95]

(49) Exchange
Input [5]: [wr_item_sk#91, wr_order_number#92, wr_return_amt#93, wr_net_loss#94, wr_returned_date_sk#95]
Arguments: hashpartitioning(wr_item_sk#91, wr_order_number#92, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(50) Sort [codegen id : 15]
Input [5]: [wr_item_sk#91, wr_order_number#92, wr_return_amt#93, wr_net_loss#94, wr_returned_date_sk#95]
Arguments: [wr_item_sk#91 ASC NULLS FIRST, wr_order_number#92 ASC NULLS FIRST], false, 0

(51) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#96, ws_web_site_sk#81, ws_order_number#97, ws_sold_date_sk#84]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_order_number:int>

(52) ColumnarToRow [codegen id : 16]
Input [4]: [ws_item_sk#96, ws_web_site_sk#81, ws_order_number#97, ws_sold_date_sk#84]

(53) Filter [codegen id : 16]
Input [4]: [ws_item_sk#96, ws_web_site_sk#81, ws_order_number#97, ws_sold_date_sk#84]
Condition : ((isnotnull(ws_item_sk#96) AND isnotnull(ws_order_number#97)) AND isnotnull(ws_web_site_sk#81))

(54) Project [codegen id : 16]
Output [3]: [ws_item_sk#96, ws_web_site_sk#81, ws_order_number#97]
Input [4]: [ws_item_sk#96, ws_web_site_sk#81, ws_order_number#97, ws_sold_date_sk#84]

(55) Exchange
Input [3]: [ws_item_sk#96, ws_web_site_sk#81, ws_order_number#97]
Arguments: hashpartitioning(ws_item_sk#96, ws_order_number#97, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(56) Sort [codegen id : 17]
Input [3]: [ws_item_sk#96, ws_web_site_sk#81, ws_order_number#97]
Arguments: [ws_item_sk#96 ASC NULLS FIRST, ws_order_number#97 ASC NULLS FIRST], false, 0

(57) SortMergeJoin [codegen id : 18]
Left keys [2]: [wr_item_sk#91, wr_order_number#92]
Right keys [2]: [ws_item_sk#96, ws_order_number#97]
Join type: Inner
Join condition: None

(58) Project [codegen id : 18]
Output [6]: [ws_web_site_sk#81 AS wsr_web_site_sk#98, wr_returned_date_sk#95 AS date_sk#99, 0.00 AS sales_price#100, 0.00 AS profit#101, wr_return_amt#93 AS return_amt#102, wr_net_loss#94 AS net_loss#103]
Input [8]: [wr_item_sk#91, wr_order_number#92, wr_return_amt#93, wr_net_loss#94, wr_returned_date_sk#95, ws_item_sk#96, ws_web_site_sk#81, ws_order_number#97]

(59) Union

(60) Scan parquet spark_catalog.default.web_site
Output [2]: [web_site_sk#104, web_site_id#105]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string>

(61) ColumnarToRow [codegen id : 19]
Input [2]: [web_site_sk#104, web_site_id#105]

(62) Filter [codegen id : 19]
Input [2]: [web_site_sk#104, web_site_id#105]
Condition : isnotnull(web_site_sk#104)

(63) BroadcastExchange
Input [2]: [web_site_sk#104, web_site_id#105]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=7]

(64) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [wsr_web_site_sk#85]
Right keys [1]: [web_site_sk#104]
Join type: Inner
Join condition: None

(65) Project [codegen id : 21]
Output [6]: [date_sk#86, sales_price#87, profit#88, return_amt#89, net_loss#90, web_site_id#105]
Input [8]: [wsr_web_site_sk#85, date_sk#86, sales_price#87, profit#88, return_amt#89, net_loss#90, web_site_sk#104, web_site_id#105]

(66) ReusedExchange [Reuses operator id: 95]
Output [1]: [d_date_sk#24]

(67) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [date_sk#86]
Right keys [1]: [d_date_sk#24]
Join type: Inner
Join condition: None

(68) Project [codegen id : 21]
Output [5]: [sales_price#87, profit#88, return_amt#89, net_loss#90, web_site_id#105]
Input [7]: [date_sk#86, sales_price#87, profit#88, return_amt#89, net_loss#90, web_site_id#105, d_date_sk#24]

(69) HashAggregate [codegen id : 21]
Input [5]: [sales_price#87, profit#88, return_amt#89, net_loss#90, web_site_id#105]
Keys [1]: [web_site_id#105]
Functions [4]: [partial_sum(UnscaledValue(sales_price#87)), partial_sum(UnscaledValue(return_amt#89)), partial_sum(UnscaledValue(profit#88)), partial_sum(UnscaledValue(net_loss#90))]
Aggregate Attributes [4]: [sum#106, sum#107, sum#108, sum#109]
Results [5]: [web_site_id#105, sum#110, sum#111, sum#112, sum#113]

(70) Exchange
Input [5]: [web_site_id#105, sum#110, sum#111, sum#112, sum#113]
Arguments: hashpartitioning(web_site_id#105, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(71) HashAggregate [codegen id : 22]
Input [5]: [web_site_id#105, sum#110, sum#111, sum#112, sum#113]
Keys [1]: [web_site_id#105]
Functions [4]: [sum(UnscaledValue(sales_price#87)), sum(UnscaledValue(return_amt#89)), sum(UnscaledValue(profit#88)), sum(UnscaledValue(net_loss#90))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#87))#114, sum(UnscaledValue(return_amt#89))#115, sum(UnscaledValue(profit#88))#116, sum(UnscaledValue(net_loss#90))#117]
Results [5]: [web channel AS channel#118, concat(web_site, web_site_id#105) AS id#119, MakeDecimal(sum(UnscaledValue(sales_price#87))#114,17,2) AS sales#120, MakeDecimal(sum(UnscaledValue(return_amt#89))#115,17,2) AS returns#121, (MakeDecimal(sum(UnscaledValue(profit#88))#116,17,2) - MakeDecimal(sum(UnscaledValue(net_loss#90))#117,17,2)) AS profit#122]

(72) Union

(73) HashAggregate [codegen id : 23]
Input [5]: [channel#37, id#38, sales#39, returns#40, profit#41]
Keys [2]: [channel#37, id#38]
Functions [3]: [partial_sum(sales#39), partial_sum(returns#40), partial_sum(profit#41)]
Aggregate Attributes [6]: [sum#123, isEmpty#124, sum#125, isEmpty#126, sum#127, isEmpty#128]
Results [8]: [channel#37, id#38, sum#129, isEmpty#130, sum#131, isEmpty#132, sum#133, isEmpty#134]

(74) Exchange
Input [8]: [channel#37, id#38, sum#129, isEmpty#130, sum#131, isEmpty#132, sum#133, isEmpty#134]
Arguments: hashpartitioning(channel#37, id#38, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(75) HashAggregate [codegen id : 24]
Input [8]: [channel#37, id#38, sum#129, isEmpty#130, sum#131, isEmpty#132, sum#133, isEmpty#134]
Keys [2]: [channel#37, id#38]
Functions [3]: [sum(sales#39), sum(returns#40), sum(profit#41)]
Aggregate Attributes [3]: [sum(sales#39)#135, sum(returns#40)#136, sum(profit#41)#137]
Results [5]: [channel#37, id#38, cast(sum(sales#39)#135 as decimal(37,2)) AS sales#138, cast(sum(returns#40)#136 as decimal(37,2)) AS returns#139, cast(sum(profit#41)#137 as decimal(38,2)) AS profit#140]

(76) ReusedExchange [Reuses operator id: 74]
Output [8]: [channel#37, id#38, sum#129, isEmpty#130, sum#131, isEmpty#132, sum#133, isEmpty#134]

(77) HashAggregate [codegen id : 48]
Input [8]: [channel#37, id#38, sum#129, isEmpty#130, sum#131, isEmpty#132, sum#133, isEmpty#134]
Keys [2]: [channel#37, id#38]
Functions [3]: [sum(sales#39), sum(returns#40), sum(profit#41)]
Aggregate Attributes [3]: [sum(sales#39)#135, sum(returns#40)#136, sum(profit#41)#137]
Results [4]: [channel#37, sum(sales#39)#135 AS sales#141, sum(returns#40)#136 AS returns#142, sum(profit#41)#137 AS profit#143]

(78) HashAggregate [codegen id : 48]
Input [4]: [channel#37, sales#141, returns#142, profit#143]
Keys [1]: [channel#37]
Functions [3]: [partial_sum(sales#141), partial_sum(returns#142), partial_sum(profit#143)]
Aggregate Attributes [6]: [sum#144, isEmpty#145, sum#146, isEmpty#147, sum#148, isEmpty#149]
Results [7]: [channel#37, sum#150, isEmpty#151, sum#152, isEmpty#153, sum#154, isEmpty#155]

(79) Exchange
Input [7]: [channel#37, sum#150, isEmpty#151, sum#152, isEmpty#153, sum#154, isEmpty#155]
Arguments: hashpartitioning(channel#37, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(80) HashAggregate [codegen id : 49]
Input [7]: [channel#37, sum#150, isEmpty#151, sum#152, isEmpty#153, sum#154, isEmpty#155]
Keys [1]: [channel#37]
Functions [3]: [sum(sales#141), sum(returns#142), sum(profit#143)]
Aggregate Attributes [3]: [sum(sales#141)#156, sum(returns#142)#157, sum(profit#143)#158]
Results [5]: [channel#37, null AS id#159, sum(sales#141)#156 AS sum(sales)#160, sum(returns#142)#157 AS sum(returns)#161, sum(profit#143)#158 AS sum(profit)#162]

(81) ReusedExchange [Reuses operator id: 74]
Output [8]: [channel#37, id#38, sum#129, isEmpty#130, sum#131, isEmpty#132, sum#133, isEmpty#134]

(82) HashAggregate [codegen id : 73]
Input [8]: [channel#37, id#38, sum#129, isEmpty#130, sum#131, isEmpty#132, sum#133, isEmpty#134]
Keys [2]: [channel#37, id#38]
Functions [3]: [sum(sales#39), sum(returns#40), sum(profit#41)]
Aggregate Attributes [3]: [sum(sales#39)#135, sum(returns#40)#136, sum(profit#41)#137]
Results [3]: [sum(sales#39)#135 AS sales#141, sum(returns#40)#136 AS returns#142, sum(profit#41)#137 AS profit#143]

(83) HashAggregate [codegen id : 73]
Input [3]: [sales#141, returns#142, profit#143]
Keys: []
Functions [3]: [partial_sum(sales#141), partial_sum(returns#142), partial_sum(profit#143)]
Aggregate Attributes [6]: [sum#163, isEmpty#164, sum#165, isEmpty#166, sum#167, isEmpty#168]
Results [6]: [sum#169, isEmpty#170, sum#171, isEmpty#172, sum#173, isEmpty#174]

(84) Exchange
Input [6]: [sum#169, isEmpty#170, sum#171, isEmpty#172, sum#173, isEmpty#174]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=11]

(85) HashAggregate [codegen id : 74]
Input [6]: [sum#169, isEmpty#170, sum#171, isEmpty#172, sum#173, isEmpty#174]
Keys: []
Functions [3]: [sum(sales#141), sum(returns#142), sum(profit#143)]
Aggregate Attributes [3]: [sum(sales#141)#175, sum(returns#142)#176, sum(profit#143)#177]
Results [5]: [null AS channel#178, null AS id#179, sum(sales#141)#175 AS sum(sales)#180, sum(returns#142)#176 AS sum(returns)#181, sum(profit#143)#177 AS sum(profit)#182]

(86) Union

(87) HashAggregate [codegen id : 75]
Input [5]: [channel#37, id#38, sales#138, returns#139, profit#140]
Keys [5]: [channel#37, id#38, sales#138, returns#139, profit#140]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#37, id#38, sales#138, returns#139, profit#140]

(88) Exchange
Input [5]: [channel#37, id#38, sales#138, returns#139, profit#140]
Arguments: hashpartitioning(channel#37, id#38, sales#138, returns#139, profit#140, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(89) HashAggregate [codegen id : 76]
Input [5]: [channel#37, id#38, sales#138, returns#139, profit#140]
Keys [5]: [channel#37, id#38, sales#138, returns#139, profit#140]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#37, id#38, sales#138, returns#139, profit#140]

(90) TakeOrderedAndProject
Input [5]: [channel#37, id#38, sales#138, returns#139, profit#140]
Arguments: 100, [channel#37 ASC NULLS FIRST, id#38 ASC NULLS FIRST], [channel#37, id#38, sales#138, returns#139, profit#140]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (95)
+- * Project (94)
   +- * Filter (93)
      +- * ColumnarToRow (92)
         +- Scan parquet spark_catalog.default.date_dim (91)


(91) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#24, d_date#183]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-08-18), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(92) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#24, d_date#183]

(93) Filter [codegen id : 1]
Input [2]: [d_date_sk#24, d_date#183]
Condition : (((isnotnull(d_date#183) AND (d_date#183 >= 1998-08-04)) AND (d_date#183 <= 1998-08-18)) AND isnotnull(d_date_sk#24))

(94) Project [codegen id : 1]
Output [1]: [d_date_sk#24]
Input [2]: [d_date_sk#24, d_date#183]

(95) BroadcastExchange
Input [1]: [d_date_sk#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=13]

Subquery:2 Hosting operator id = 5 Hosting Expression = sr_returned_date_sk#15 IN dynamicpruning#5

Subquery:3 Hosting operator id = 22 Hosting Expression = cs_sold_date_sk#45 IN dynamicpruning#5

Subquery:4 Hosting operator id = 26 Hosting Expression = cr_returned_date_sk#55 IN dynamicpruning#5

Subquery:5 Hosting operator id = 43 Hosting Expression = ws_sold_date_sk#84 IN dynamicpruning#5

Subquery:6 Hosting operator id = 47 Hosting Expression = wr_returned_date_sk#95 IN dynamicpruning#5


