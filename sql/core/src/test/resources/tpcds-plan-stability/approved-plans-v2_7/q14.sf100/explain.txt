== Physical Plan ==
TakeOrderedAndProject (88)
+- * BroadcastHashJoin Inner BuildRight (87)
   :- * Filter (70)
   :  +- * HashAggregate (69)
   :     +- Exchange (68)
   :        +- * HashAggregate (67)
   :           +- * Project (66)
   :              +- * BroadcastHashJoin Inner BuildRight (65)
   :                 :- * Project (60)
   :                 :  +- * BroadcastHashJoin Inner BuildRight (59)
   :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (57)
   :                 :     :  :- * Filter (3)
   :                 :     :  :  +- * ColumnarToRow (2)
   :                 :     :  :     +- Scan parquet spark_catalog.default.store_sales (1)
   :                 :     :  +- BroadcastExchange (56)
   :                 :     :     +- * Project (55)
   :                 :     :        +- * BroadcastHashJoin Inner BuildRight (54)
   :                 :     :           :- * Filter (6)
   :                 :     :           :  +- * ColumnarToRow (5)
   :                 :     :           :     +- Scan parquet spark_catalog.default.item (4)
   :                 :     :           +- BroadcastExchange (53)
   :                 :     :              +- * SortMergeJoin LeftSemi (52)
   :                 :     :                 :- * Sort (40)
   :                 :     :                 :  +- Exchange (39)
   :                 :     :                 :     +- * HashAggregate (38)
   :                 :     :                 :        +- Exchange (37)
   :                 :     :                 :           +- * HashAggregate (36)
   :                 :     :                 :              +- * Project (35)
   :                 :     :                 :                 +- * BroadcastHashJoin Inner BuildRight (34)
   :                 :     :                 :                    :- * Project (12)
   :                 :     :                 :                    :  +- * BroadcastHashJoin Inner BuildRight (11)
   :                 :     :                 :                    :     :- * Filter (9)
   :                 :     :                 :                    :     :  +- * ColumnarToRow (8)
   :                 :     :                 :                    :     :     +- Scan parquet spark_catalog.default.store_sales (7)
   :                 :     :                 :                    :     +- ReusedExchange (10)
   :                 :     :                 :                    +- BroadcastExchange (33)
   :                 :     :                 :                       +- * SortMergeJoin LeftSemi (32)
   :                 :     :                 :                          :- * Sort (17)
   :                 :     :                 :                          :  +- Exchange (16)
   :                 :     :                 :                          :     +- * Filter (15)
   :                 :     :                 :                          :        +- * ColumnarToRow (14)
   :                 :     :                 :                          :           +- Scan parquet spark_catalog.default.item (13)
   :                 :     :                 :                          +- * Sort (31)
   :                 :     :                 :                             +- Exchange (30)
   :                 :     :                 :                                +- * Project (29)
   :                 :     :                 :                                   +- * BroadcastHashJoin Inner BuildRight (28)
   :                 :     :                 :                                      :- * Project (23)
   :                 :     :                 :                                      :  +- * BroadcastHashJoin Inner BuildRight (22)
   :                 :     :                 :                                      :     :- * Filter (20)
   :                 :     :                 :                                      :     :  +- * ColumnarToRow (19)
   :                 :     :                 :                                      :     :     +- Scan parquet spark_catalog.default.catalog_sales (18)
   :                 :     :                 :                                      :     +- ReusedExchange (21)
   :                 :     :                 :                                      +- BroadcastExchange (27)
   :                 :     :                 :                                         +- * Filter (26)
   :                 :     :                 :                                            +- * ColumnarToRow (25)
   :                 :     :                 :                                               +- Scan parquet spark_catalog.default.item (24)
   :                 :     :                 +- * Sort (51)
   :                 :     :                    +- Exchange (50)
   :                 :     :                       +- * Project (49)
   :                 :     :                          +- * BroadcastHashJoin Inner BuildRight (48)
   :                 :     :                             :- * Project (46)
   :                 :     :                             :  +- * BroadcastHashJoin Inner BuildRight (45)
   :                 :     :                             :     :- * Filter (43)
   :                 :     :                             :     :  +- * ColumnarToRow (42)
   :                 :     :                             :     :     +- Scan parquet spark_catalog.default.web_sales (41)
   :                 :     :                             :     +- ReusedExchange (44)
   :                 :     :                             +- ReusedExchange (47)
   :                 :     +- ReusedExchange (58)
   :                 +- BroadcastExchange (64)
   :                    +- * Filter (63)
   :                       +- * ColumnarToRow (62)
   :                          +- Scan parquet spark_catalog.default.item (61)
   +- BroadcastExchange (86)
      +- * Filter (85)
         +- * HashAggregate (84)
            +- Exchange (83)
               +- * HashAggregate (82)
                  +- * Project (81)
                     +- * BroadcastHashJoin Inner BuildRight (80)
                        :- * Project (78)
                        :  +- * BroadcastHashJoin Inner BuildRight (77)
                        :     :- * BroadcastHashJoin LeftSemi BuildRight (75)
                        :     :  :- * Filter (73)
                        :     :  :  +- * ColumnarToRow (72)
                        :     :  :     +- Scan parquet spark_catalog.default.store_sales (71)
                        :     :  +- ReusedExchange (74)
                        :     +- ReusedExchange (76)
                        +- ReusedExchange (79)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 20]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 20]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 17]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(6) Filter [codegen id : 17]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : (((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9)) AND isnotnull(i_item_sk#6))

(7) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 9]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]

(9) Filter [codegen id : 9]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(10) ReusedExchange [Reuses operator id: 121]
Output [1]: [d_date_sk#13]

(11) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#13]
Join type: Inner
Join condition: None

(12) Project [codegen id : 9]
Output [1]: [ss_item_sk#10]
Input [3]: [ss_item_sk#10, ss_sold_date_sk#11, d_date_sk#13]

(13) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(14) ColumnarToRow [codegen id : 2]
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]

(15) Filter [codegen id : 2]
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Condition : (((isnotnull(i_item_sk#14) AND isnotnull(i_brand_id#15)) AND isnotnull(i_class_id#16)) AND isnotnull(i_category_id#17))

(16) Exchange
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Arguments: hashpartitioning(coalesce(i_brand_id#15, 0), isnull(i_brand_id#15), coalesce(i_class_id#16, 0), isnull(i_class_id#16), coalesce(i_category_id#17, 0), isnull(i_category_id#17), 5), ENSURE_REQUIREMENTS, [plan_id=1]

(17) Sort [codegen id : 3]
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Arguments: [coalesce(i_brand_id#15, 0) ASC NULLS FIRST, isnull(i_brand_id#15) ASC NULLS FIRST, coalesce(i_class_id#16, 0) ASC NULLS FIRST, isnull(i_class_id#16) ASC NULLS FIRST, coalesce(i_category_id#17, 0) ASC NULLS FIRST, isnull(i_category_id#17) ASC NULLS FIRST], false, 0

(18) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_item_sk#18, cs_sold_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#19), dynamicpruningexpression(cs_sold_date_sk#19 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(19) ColumnarToRow [codegen id : 6]
Input [2]: [cs_item_sk#18, cs_sold_date_sk#19]

(20) Filter [codegen id : 6]
Input [2]: [cs_item_sk#18, cs_sold_date_sk#19]
Condition : isnotnull(cs_item_sk#18)

(21) ReusedExchange [Reuses operator id: 121]
Output [1]: [d_date_sk#20]

(22) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#19]
Right keys [1]: [d_date_sk#20]
Join type: Inner
Join condition: None

(23) Project [codegen id : 6]
Output [1]: [cs_item_sk#18]
Input [3]: [cs_item_sk#18, cs_sold_date_sk#19, d_date_sk#20]

(24) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(25) ColumnarToRow [codegen id : 5]
Input [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]

(26) Filter [codegen id : 5]
Input [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]
Condition : isnotnull(i_item_sk#21)

(27) BroadcastExchange
Input [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(28) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_item_sk#18]
Right keys [1]: [i_item_sk#21]
Join type: Inner
Join condition: None

(29) Project [codegen id : 6]
Output [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Input [5]: [cs_item_sk#18, i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]

(30) Exchange
Input [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Arguments: hashpartitioning(coalesce(i_brand_id#22, 0), isnull(i_brand_id#22), coalesce(i_class_id#23, 0), isnull(i_class_id#23), coalesce(i_category_id#24, 0), isnull(i_category_id#24), 5), ENSURE_REQUIREMENTS, [plan_id=3]

(31) Sort [codegen id : 7]
Input [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Arguments: [coalesce(i_brand_id#22, 0) ASC NULLS FIRST, isnull(i_brand_id#22) ASC NULLS FIRST, coalesce(i_class_id#23, 0) ASC NULLS FIRST, isnull(i_class_id#23) ASC NULLS FIRST, coalesce(i_category_id#24, 0) ASC NULLS FIRST, isnull(i_category_id#24) ASC NULLS FIRST], false, 0

(32) SortMergeJoin [codegen id : 8]
Left keys [6]: [coalesce(i_brand_id#15, 0), isnull(i_brand_id#15), coalesce(i_class_id#16, 0), isnull(i_class_id#16), coalesce(i_category_id#17, 0), isnull(i_category_id#17)]
Right keys [6]: [coalesce(i_brand_id#22, 0), isnull(i_brand_id#22), coalesce(i_class_id#23, 0), isnull(i_class_id#23), coalesce(i_category_id#24, 0), isnull(i_category_id#24)]
Join type: LeftSemi
Join condition: None

(33) BroadcastExchange
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=4]

(34) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#10]
Right keys [1]: [i_item_sk#14]
Join type: Inner
Join condition: None

(35) Project [codegen id : 9]
Output [3]: [i_brand_id#15 AS brand_id#25, i_class_id#16 AS class_id#26, i_category_id#17 AS category_id#27]
Input [5]: [ss_item_sk#10, i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]

(36) HashAggregate [codegen id : 9]
Input [3]: [brand_id#25, class_id#26, category_id#27]
Keys [3]: [brand_id#25, class_id#26, category_id#27]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#25, class_id#26, category_id#27]

(37) Exchange
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: hashpartitioning(brand_id#25, class_id#26, category_id#27, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(38) HashAggregate [codegen id : 10]
Input [3]: [brand_id#25, class_id#26, category_id#27]
Keys [3]: [brand_id#25, class_id#26, category_id#27]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#25, class_id#26, category_id#27]

(39) Exchange
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: hashpartitioning(coalesce(brand_id#25, 0), isnull(brand_id#25), coalesce(class_id#26, 0), isnull(class_id#26), coalesce(category_id#27, 0), isnull(category_id#27), 5), ENSURE_REQUIREMENTS, [plan_id=6]

(40) Sort [codegen id : 11]
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: [coalesce(brand_id#25, 0) ASC NULLS FIRST, isnull(brand_id#25) ASC NULLS FIRST, coalesce(class_id#26, 0) ASC NULLS FIRST, isnull(class_id#26) ASC NULLS FIRST, coalesce(category_id#27, 0) ASC NULLS FIRST, isnull(category_id#27) ASC NULLS FIRST], false, 0

(41) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_item_sk#28, ws_sold_date_sk#29]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#29), dynamicpruningexpression(ws_sold_date_sk#29 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(42) ColumnarToRow [codegen id : 14]
Input [2]: [ws_item_sk#28, ws_sold_date_sk#29]

(43) Filter [codegen id : 14]
Input [2]: [ws_item_sk#28, ws_sold_date_sk#29]
Condition : isnotnull(ws_item_sk#28)

(44) ReusedExchange [Reuses operator id: 121]
Output [1]: [d_date_sk#30]

(45) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_sold_date_sk#29]
Right keys [1]: [d_date_sk#30]
Join type: Inner
Join condition: None

(46) Project [codegen id : 14]
Output [1]: [ws_item_sk#28]
Input [3]: [ws_item_sk#28, ws_sold_date_sk#29, d_date_sk#30]

(47) ReusedExchange [Reuses operator id: 27]
Output [4]: [i_item_sk#31, i_brand_id#32, i_class_id#33, i_category_id#34]

(48) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_item_sk#28]
Right keys [1]: [i_item_sk#31]
Join type: Inner
Join condition: None

(49) Project [codegen id : 14]
Output [3]: [i_brand_id#32, i_class_id#33, i_category_id#34]
Input [5]: [ws_item_sk#28, i_item_sk#31, i_brand_id#32, i_class_id#33, i_category_id#34]

(50) Exchange
Input [3]: [i_brand_id#32, i_class_id#33, i_category_id#34]
Arguments: hashpartitioning(coalesce(i_brand_id#32, 0), isnull(i_brand_id#32), coalesce(i_class_id#33, 0), isnull(i_class_id#33), coalesce(i_category_id#34, 0), isnull(i_category_id#34), 5), ENSURE_REQUIREMENTS, [plan_id=7]

(51) Sort [codegen id : 15]
Input [3]: [i_brand_id#32, i_class_id#33, i_category_id#34]
Arguments: [coalesce(i_brand_id#32, 0) ASC NULLS FIRST, isnull(i_brand_id#32) ASC NULLS FIRST, coalesce(i_class_id#33, 0) ASC NULLS FIRST, isnull(i_class_id#33) ASC NULLS FIRST, coalesce(i_category_id#34, 0) ASC NULLS FIRST, isnull(i_category_id#34) ASC NULLS FIRST], false, 0

(52) SortMergeJoin [codegen id : 16]
Left keys [6]: [coalesce(brand_id#25, 0), isnull(brand_id#25), coalesce(class_id#26, 0), isnull(class_id#26), coalesce(category_id#27, 0), isnull(category_id#27)]
Right keys [6]: [coalesce(i_brand_id#32, 0), isnull(i_brand_id#32), coalesce(i_class_id#33, 0), isnull(i_class_id#33), coalesce(i_category_id#34, 0), isnull(i_category_id#34)]
Join type: LeftSemi
Join condition: None

(53) BroadcastExchange
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [plan_id=8]

(54) BroadcastHashJoin [codegen id : 17]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#25, class_id#26, category_id#27]
Join type: Inner
Join condition: None

(55) Project [codegen id : 17]
Output [1]: [i_item_sk#6 AS ss_item_sk#35]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#25, class_id#26, category_id#27]

(56) BroadcastExchange
Input [1]: [ss_item_sk#35]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

(57) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#35]
Join type: LeftSemi
Join condition: None

(58) ReusedExchange [Reuses operator id: 112]
Output [1]: [d_date_sk#36]

(59) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#36]
Join type: Inner
Join condition: None

(60) Project [codegen id : 20]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#36]

(61) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(62) ColumnarToRow [codegen id : 19]
Input [4]: [i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]

(63) Filter [codegen id : 19]
Input [4]: [i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]
Condition : (((isnotnull(i_item_sk#37) AND isnotnull(i_brand_id#38)) AND isnotnull(i_class_id#39)) AND isnotnull(i_category_id#40))

(64) BroadcastExchange
Input [4]: [i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=10]

(65) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#37]
Join type: Inner
Join condition: None

(66) Project [codegen id : 20]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#38, i_class_id#39, i_category_id#40]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#37, i_brand_id#38, i_class_id#39, i_category_id#40]

(67) HashAggregate [codegen id : 20]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#38, i_class_id#39, i_category_id#40]
Keys [3]: [i_brand_id#38, i_class_id#39, i_category_id#40]
Functions [2]: [partial_sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), partial_count(1)]
Aggregate Attributes [3]: [sum#41, isEmpty#42, count#43]
Results [6]: [i_brand_id#38, i_class_id#39, i_category_id#40, sum#44, isEmpty#45, count#46]

(68) Exchange
Input [6]: [i_brand_id#38, i_class_id#39, i_category_id#40, sum#44, isEmpty#45, count#46]
Arguments: hashpartitioning(i_brand_id#38, i_class_id#39, i_category_id#40, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(69) HashAggregate [codegen id : 42]
Input [6]: [i_brand_id#38, i_class_id#39, i_category_id#40, sum#44, isEmpty#45, count#46]
Keys [3]: [i_brand_id#38, i_class_id#39, i_category_id#40]
Functions [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#47, count(1)#48]
Results [6]: [store AS channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#47 AS sales#50, count(1)#48 AS number_sales#51]

(70) Filter [codegen id : 42]
Input [6]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sales#50, number_sales#51]
Condition : (isnotnull(sales#50) AND (cast(sales#50 as decimal(32,6)) > cast(Subquery scalar-subquery#52, [id=#53] as decimal(32,6))))

(71) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#54, ss_quantity#55, ss_list_price#56, ss_sold_date_sk#57]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#57), dynamicpruningexpression(ss_sold_date_sk#57 IN dynamicpruning#58)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(72) ColumnarToRow [codegen id : 40]
Input [4]: [ss_item_sk#54, ss_quantity#55, ss_list_price#56, ss_sold_date_sk#57]

(73) Filter [codegen id : 40]
Input [4]: [ss_item_sk#54, ss_quantity#55, ss_list_price#56, ss_sold_date_sk#57]
Condition : isnotnull(ss_item_sk#54)

(74) ReusedExchange [Reuses operator id: 56]
Output [1]: [ss_item_sk#35]

(75) BroadcastHashJoin [codegen id : 40]
Left keys [1]: [ss_item_sk#54]
Right keys [1]: [ss_item_sk#35]
Join type: LeftSemi
Join condition: None

(76) ReusedExchange [Reuses operator id: 126]
Output [1]: [d_date_sk#59]

(77) BroadcastHashJoin [codegen id : 40]
Left keys [1]: [ss_sold_date_sk#57]
Right keys [1]: [d_date_sk#59]
Join type: Inner
Join condition: None

(78) Project [codegen id : 40]
Output [3]: [ss_item_sk#54, ss_quantity#55, ss_list_price#56]
Input [5]: [ss_item_sk#54, ss_quantity#55, ss_list_price#56, ss_sold_date_sk#57, d_date_sk#59]

(79) ReusedExchange [Reuses operator id: 64]
Output [4]: [i_item_sk#60, i_brand_id#61, i_class_id#62, i_category_id#63]

(80) BroadcastHashJoin [codegen id : 40]
Left keys [1]: [ss_item_sk#54]
Right keys [1]: [i_item_sk#60]
Join type: Inner
Join condition: None

(81) Project [codegen id : 40]
Output [5]: [ss_quantity#55, ss_list_price#56, i_brand_id#61, i_class_id#62, i_category_id#63]
Input [7]: [ss_item_sk#54, ss_quantity#55, ss_list_price#56, i_item_sk#60, i_brand_id#61, i_class_id#62, i_category_id#63]

(82) HashAggregate [codegen id : 40]
Input [5]: [ss_quantity#55, ss_list_price#56, i_brand_id#61, i_class_id#62, i_category_id#63]
Keys [3]: [i_brand_id#61, i_class_id#62, i_category_id#63]
Functions [2]: [partial_sum((cast(ss_quantity#55 as decimal(10,0)) * ss_list_price#56)), partial_count(1)]
Aggregate Attributes [3]: [sum#64, isEmpty#65, count#66]
Results [6]: [i_brand_id#61, i_class_id#62, i_category_id#63, sum#67, isEmpty#68, count#69]

(83) Exchange
Input [6]: [i_brand_id#61, i_class_id#62, i_category_id#63, sum#67, isEmpty#68, count#69]
Arguments: hashpartitioning(i_brand_id#61, i_class_id#62, i_category_id#63, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(84) HashAggregate [codegen id : 41]
Input [6]: [i_brand_id#61, i_class_id#62, i_category_id#63, sum#67, isEmpty#68, count#69]
Keys [3]: [i_brand_id#61, i_class_id#62, i_category_id#63]
Functions [2]: [sum((cast(ss_quantity#55 as decimal(10,0)) * ss_list_price#56)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#55 as decimal(10,0)) * ss_list_price#56))#70, count(1)#71]
Results [6]: [store AS channel#72, i_brand_id#61, i_class_id#62, i_category_id#63, sum((cast(ss_quantity#55 as decimal(10,0)) * ss_list_price#56))#70 AS sales#73, count(1)#71 AS number_sales#74]

(85) Filter [codegen id : 41]
Input [6]: [channel#72, i_brand_id#61, i_class_id#62, i_category_id#63, sales#73, number_sales#74]
Condition : (isnotnull(sales#73) AND (cast(sales#73 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#52, [id=#53] as decimal(32,6))))

(86) BroadcastExchange
Input [6]: [channel#72, i_brand_id#61, i_class_id#62, i_category_id#63, sales#73, number_sales#74]
Arguments: HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true]),false), [plan_id=13]

(87) BroadcastHashJoin [codegen id : 42]
Left keys [3]: [i_brand_id#38, i_class_id#39, i_category_id#40]
Right keys [3]: [i_brand_id#61, i_class_id#62, i_category_id#63]
Join type: Inner
Join condition: None

(88) TakeOrderedAndProject
Input [12]: [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sales#50, number_sales#51, channel#72, i_brand_id#61, i_class_id#62, i_category_id#63, sales#73, number_sales#74]
Arguments: 100, [i_brand_id#38 ASC NULLS FIRST, i_class_id#39 ASC NULLS FIRST, i_category_id#40 ASC NULLS FIRST], [channel#49, i_brand_id#38, i_class_id#39, i_category_id#40, sales#50, number_sales#51, channel#72, i_brand_id#61, i_class_id#62, i_category_id#63, sales#73, number_sales#74]

===== Subqueries =====

Subquery:1 Hosting operator id = 70 Hosting Expression = Subquery scalar-subquery#52, [id=#53]
* HashAggregate (107)
+- Exchange (106)
   +- * HashAggregate (105)
      +- Union (104)
         :- * Project (93)
         :  +- * BroadcastHashJoin Inner BuildRight (92)
         :     :- * ColumnarToRow (90)
         :     :  +- Scan parquet spark_catalog.default.store_sales (89)
         :     +- ReusedExchange (91)
         :- * Project (98)
         :  +- * BroadcastHashJoin Inner BuildRight (97)
         :     :- * ColumnarToRow (95)
         :     :  +- Scan parquet spark_catalog.default.catalog_sales (94)
         :     +- ReusedExchange (96)
         +- * Project (103)
            +- * BroadcastHashJoin Inner BuildRight (102)
               :- * ColumnarToRow (100)
               :  +- Scan parquet spark_catalog.default.web_sales (99)
               +- ReusedExchange (101)


(89) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_quantity#75, ss_list_price#76, ss_sold_date_sk#77]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#77), dynamicpruningexpression(ss_sold_date_sk#77 IN dynamicpruning#12)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(90) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#75, ss_list_price#76, ss_sold_date_sk#77]

(91) ReusedExchange [Reuses operator id: 121]
Output [1]: [d_date_sk#78]

(92) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#77]
Right keys [1]: [d_date_sk#78]
Join type: Inner
Join condition: None

(93) Project [codegen id : 2]
Output [2]: [ss_quantity#75 AS quantity#79, ss_list_price#76 AS list_price#80]
Input [4]: [ss_quantity#75, ss_list_price#76, ss_sold_date_sk#77, d_date_sk#78]

(94) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_quantity#81, cs_list_price#82, cs_sold_date_sk#83]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#83), dynamicpruningexpression(cs_sold_date_sk#83 IN dynamicpruning#12)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(95) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#81, cs_list_price#82, cs_sold_date_sk#83]

(96) ReusedExchange [Reuses operator id: 121]
Output [1]: [d_date_sk#84]

(97) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#83]
Right keys [1]: [d_date_sk#84]
Join type: Inner
Join condition: None

(98) Project [codegen id : 4]
Output [2]: [cs_quantity#81 AS quantity#85, cs_list_price#82 AS list_price#86]
Input [4]: [cs_quantity#81, cs_list_price#82, cs_sold_date_sk#83, d_date_sk#84]

(99) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_quantity#87, ws_list_price#88, ws_sold_date_sk#89]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#89), dynamicpruningexpression(ws_sold_date_sk#89 IN dynamicpruning#12)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(100) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#87, ws_list_price#88, ws_sold_date_sk#89]

(101) ReusedExchange [Reuses operator id: 121]
Output [1]: [d_date_sk#90]

(102) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#89]
Right keys [1]: [d_date_sk#90]
Join type: Inner
Join condition: None

(103) Project [codegen id : 6]
Output [2]: [ws_quantity#87 AS quantity#91, ws_list_price#88 AS list_price#92]
Input [4]: [ws_quantity#87, ws_list_price#88, ws_sold_date_sk#89, d_date_sk#90]

(104) Union

(105) HashAggregate [codegen id : 7]
Input [2]: [quantity#79, list_price#80]
Keys: []
Functions [1]: [partial_avg((cast(quantity#79 as decimal(10,0)) * list_price#80))]
Aggregate Attributes [2]: [sum#93, count#94]
Results [2]: [sum#95, count#96]

(106) Exchange
Input [2]: [sum#95, count#96]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=14]

(107) HashAggregate [codegen id : 8]
Input [2]: [sum#95, count#96]
Keys: []
Functions [1]: [avg((cast(quantity#79 as decimal(10,0)) * list_price#80))]
Aggregate Attributes [1]: [avg((cast(quantity#79 as decimal(10,0)) * list_price#80))#97]
Results [1]: [avg((cast(quantity#79 as decimal(10,0)) * list_price#80))#97 AS average_sales#98]

Subquery:2 Hosting operator id = 89 Hosting Expression = ss_sold_date_sk#77 IN dynamicpruning#12

Subquery:3 Hosting operator id = 94 Hosting Expression = cs_sold_date_sk#83 IN dynamicpruning#12

Subquery:4 Hosting operator id = 99 Hosting Expression = ws_sold_date_sk#89 IN dynamicpruning#12

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (112)
+- * Project (111)
   +- * Filter (110)
      +- * ColumnarToRow (109)
         +- Scan parquet spark_catalog.default.date_dim (108)


(108) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#36, d_week_seq#99]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(109) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#36, d_week_seq#99]

(110) Filter [codegen id : 1]
Input [2]: [d_date_sk#36, d_week_seq#99]
Condition : ((isnotnull(d_week_seq#99) AND (d_week_seq#99 = Subquery scalar-subquery#100, [id=#101])) AND isnotnull(d_date_sk#36))

(111) Project [codegen id : 1]
Output [1]: [d_date_sk#36]
Input [2]: [d_date_sk#36, d_week_seq#99]

(112) BroadcastExchange
Input [1]: [d_date_sk#36]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=15]

Subquery:6 Hosting operator id = 110 Hosting Expression = Subquery scalar-subquery#100, [id=#101]
* Project (116)
+- * Filter (115)
   +- * ColumnarToRow (114)
      +- Scan parquet spark_catalog.default.date_dim (113)


(113) Scan parquet spark_catalog.default.date_dim
Output [4]: [d_week_seq#102, d_year#103, d_moy#104, d_dom#105]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), EqualTo(d_dom,16)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(114) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#102, d_year#103, d_moy#104, d_dom#105]

(115) Filter [codegen id : 1]
Input [4]: [d_week_seq#102, d_year#103, d_moy#104, d_dom#105]
Condition : (((((isnotnull(d_year#103) AND isnotnull(d_moy#104)) AND isnotnull(d_dom#105)) AND (d_year#103 = 1999)) AND (d_moy#104 = 12)) AND (d_dom#105 = 16))

(116) Project [codegen id : 1]
Output [1]: [d_week_seq#102]
Input [4]: [d_week_seq#102, d_year#103, d_moy#104, d_dom#105]

Subquery:7 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (121)
+- * Project (120)
   +- * Filter (119)
      +- * ColumnarToRow (118)
         +- Scan parquet spark_catalog.default.date_dim (117)


(117) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#13, d_year#106]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(118) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#13, d_year#106]

(119) Filter [codegen id : 1]
Input [2]: [d_date_sk#13, d_year#106]
Condition : (((isnotnull(d_year#106) AND (d_year#106 >= 1998)) AND (d_year#106 <= 2000)) AND isnotnull(d_date_sk#13))

(120) Project [codegen id : 1]
Output [1]: [d_date_sk#13]
Input [2]: [d_date_sk#13, d_year#106]

(121) BroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=16]

Subquery:8 Hosting operator id = 18 Hosting Expression = cs_sold_date_sk#19 IN dynamicpruning#12

Subquery:9 Hosting operator id = 41 Hosting Expression = ws_sold_date_sk#29 IN dynamicpruning#12

Subquery:10 Hosting operator id = 85 Hosting Expression = ReusedSubquery Subquery scalar-subquery#52, [id=#53]

Subquery:11 Hosting operator id = 71 Hosting Expression = ss_sold_date_sk#57 IN dynamicpruning#58
BroadcastExchange (126)
+- * Project (125)
   +- * Filter (124)
      +- * ColumnarToRow (123)
         +- Scan parquet spark_catalog.default.date_dim (122)


(122) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#59, d_week_seq#107]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(123) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#59, d_week_seq#107]

(124) Filter [codegen id : 1]
Input [2]: [d_date_sk#59, d_week_seq#107]
Condition : ((isnotnull(d_week_seq#107) AND (d_week_seq#107 = Subquery scalar-subquery#108, [id=#109])) AND isnotnull(d_date_sk#59))

(125) Project [codegen id : 1]
Output [1]: [d_date_sk#59]
Input [2]: [d_date_sk#59, d_week_seq#107]

(126) BroadcastExchange
Input [1]: [d_date_sk#59]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=17]

Subquery:12 Hosting operator id = 124 Hosting Expression = Subquery scalar-subquery#108, [id=#109]
* Project (130)
+- * Filter (129)
   +- * ColumnarToRow (128)
      +- Scan parquet spark_catalog.default.date_dim (127)


(127) Scan parquet spark_catalog.default.date_dim
Output [4]: [d_week_seq#110, d_year#111, d_moy#112, d_dom#113]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1998), EqualTo(d_moy,12), EqualTo(d_dom,16)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(128) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#110, d_year#111, d_moy#112, d_dom#113]

(129) Filter [codegen id : 1]
Input [4]: [d_week_seq#110, d_year#111, d_moy#112, d_dom#113]
Condition : (((((isnotnull(d_year#111) AND isnotnull(d_moy#112)) AND isnotnull(d_dom#113)) AND (d_year#111 = 1998)) AND (d_moy#112 = 12)) AND (d_dom#113 = 16))

(130) Project [codegen id : 1]
Output [1]: [d_week_seq#110]
Input [4]: [d_week_seq#110, d_year#111, d_moy#112, d_dom#113]


