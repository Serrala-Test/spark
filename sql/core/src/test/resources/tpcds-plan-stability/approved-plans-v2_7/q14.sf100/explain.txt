== Physical Plan ==
TakeOrderedAndProject (104)
+- * BroadcastHashJoin Inner BuildRight (103)
   :- * Project (82)
   :  +- * Filter (81)
   :     +- * HashAggregate (80)
   :        +- Exchange (79)
   :           +- * HashAggregate (78)
   :              +- * Project (77)
   :                 +- * BroadcastHashJoin Inner BuildRight (76)
   :                    :- * Project (66)
   :                    :  +- * BroadcastHashJoin Inner BuildRight (65)
   :                    :     :- * SortMergeJoin LeftSemi (63)
   :                    :     :  :- * Sort (5)
   :                    :     :  :  +- Exchange (4)
   :                    :     :  :     +- * Filter (3)
   :                    :     :  :        +- * ColumnarToRow (2)
   :                    :     :  :           +- Scan parquet default.store_sales (1)
   :                    :     :  +- * Sort (62)
   :                    :     :     +- Exchange (61)
   :                    :     :        +- * Project (60)
   :                    :     :           +- * BroadcastHashJoin Inner BuildRight (59)
   :                    :     :              :- * Filter (8)
   :                    :     :              :  +- * ColumnarToRow (7)
   :                    :     :              :     +- Scan parquet default.item (6)
   :                    :     :              +- BroadcastExchange (58)
   :                    :     :                 +- * HashAggregate (57)
   :                    :     :                    +- Exchange (56)
   :                    :     :                       +- * HashAggregate (55)
   :                    :     :                          +- * SortMergeJoin LeftSemi (54)
   :                    :     :                             :- * Sort (42)
   :                    :     :                             :  +- Exchange (41)
   :                    :     :                             :     +- * HashAggregate (40)
   :                    :     :                             :        +- Exchange (39)
   :                    :     :                             :           +- * HashAggregate (38)
   :                    :     :                             :              +- * Project (37)
   :                    :     :                             :                 +- * BroadcastHashJoin Inner BuildRight (36)
   :                    :     :                             :                    :- * Project (14)
   :                    :     :                             :                    :  +- * BroadcastHashJoin Inner BuildRight (13)
   :                    :     :                             :                    :     :- * Filter (11)
   :                    :     :                             :                    :     :  +- * ColumnarToRow (10)
   :                    :     :                             :                    :     :     +- Scan parquet default.store_sales (9)
   :                    :     :                             :                    :     +- ReusedExchange (12)
   :                    :     :                             :                    +- BroadcastExchange (35)
   :                    :     :                             :                       +- * SortMergeJoin LeftSemi (34)
   :                    :     :                             :                          :- * Sort (19)
   :                    :     :                             :                          :  +- Exchange (18)
   :                    :     :                             :                          :     +- * Filter (17)
   :                    :     :                             :                          :        +- * ColumnarToRow (16)
   :                    :     :                             :                          :           +- Scan parquet default.item (15)
   :                    :     :                             :                          +- * Sort (33)
   :                    :     :                             :                             +- Exchange (32)
   :                    :     :                             :                                +- * Project (31)
   :                    :     :                             :                                   +- * BroadcastHashJoin Inner BuildRight (30)
   :                    :     :                             :                                      :- * Project (25)
   :                    :     :                             :                                      :  +- * BroadcastHashJoin Inner BuildRight (24)
   :                    :     :                             :                                      :     :- * Filter (22)
   :                    :     :                             :                                      :     :  +- * ColumnarToRow (21)
   :                    :     :                             :                                      :     :     +- Scan parquet default.catalog_sales (20)
   :                    :     :                             :                                      :     +- ReusedExchange (23)
   :                    :     :                             :                                      +- BroadcastExchange (29)
   :                    :     :                             :                                         +- * Filter (28)
   :                    :     :                             :                                            +- * ColumnarToRow (27)
   :                    :     :                             :                                               +- Scan parquet default.item (26)
   :                    :     :                             +- * Sort (53)
   :                    :     :                                +- Exchange (52)
   :                    :     :                                   +- * Project (51)
   :                    :     :                                      +- * BroadcastHashJoin Inner BuildRight (50)
   :                    :     :                                         :- * Project (48)
   :                    :     :                                         :  +- * BroadcastHashJoin Inner BuildRight (47)
   :                    :     :                                         :     :- * Filter (45)
   :                    :     :                                         :     :  +- * ColumnarToRow (44)
   :                    :     :                                         :     :     +- Scan parquet default.web_sales (43)
   :                    :     :                                         :     +- ReusedExchange (46)
   :                    :     :                                         +- ReusedExchange (49)
   :                    :     +- ReusedExchange (64)
   :                    +- BroadcastExchange (75)
   :                       +- * SortMergeJoin LeftSemi (74)
   :                          :- * Sort (71)
   :                          :  +- Exchange (70)
   :                          :     +- * Filter (69)
   :                          :        +- * ColumnarToRow (68)
   :                          :           +- Scan parquet default.item (67)
   :                          +- * Sort (73)
   :                             +- ReusedExchange (72)
   +- BroadcastExchange (102)
      +- * Project (101)
         +- * Filter (100)
            +- * HashAggregate (99)
               +- Exchange (98)
                  +- * HashAggregate (97)
                     +- * Project (96)
                        +- * BroadcastHashJoin Inner BuildRight (95)
                           :- * Project (93)
                           :  +- * BroadcastHashJoin Inner BuildRight (92)
                           :     :- * SortMergeJoin LeftSemi (90)
                           :     :  :- * Sort (87)
                           :     :  :  +- Exchange (86)
                           :     :  :     +- * Filter (85)
                           :     :  :        +- * ColumnarToRow (84)
                           :     :  :           +- Scan parquet default.store_sales (83)
                           :     :  +- * Sort (89)
                           :     :     +- ReusedExchange (88)
                           :     +- ReusedExchange (91)
                           +- ReusedExchange (94)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 20]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(8) Filter [codegen id : 20]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(9) Scan parquet default.store_sales
Output [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(10) ColumnarToRow [codegen id : 11]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]

(11) Filter [codegen id : 11]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Condition : isnotnull(ss_item_sk#11)

(12) ReusedExchange [Reuses operator id: 137]
Output [1]: [d_date_sk#14]

(13) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_sold_date_sk#12]
Right keys [1]: [d_date_sk#14]
Join condition: None

(14) Project [codegen id : 11]
Output [1]: [ss_item_sk#11]
Input [3]: [ss_item_sk#11, ss_sold_date_sk#12, d_date_sk#14]

(15) Scan parquet default.item
Output [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(16) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(17) Filter [codegen id : 4]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Condition : (((isnotnull(i_item_sk#15) AND isnotnull(i_brand_id#16)) AND isnotnull(i_class_id#17)) AND isnotnull(i_category_id#18))

(18) Exchange
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: hashpartitioning(coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18), 5), ENSURE_REQUIREMENTS, [id=#19]

(19) Sort [codegen id : 5]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: [coalesce(i_brand_id#16, 0) ASC NULLS FIRST, isnull(i_brand_id#16) ASC NULLS FIRST, coalesce(i_class_id#17, 0) ASC NULLS FIRST, isnull(i_class_id#17) ASC NULLS FIRST, coalesce(i_category_id#18, 0) ASC NULLS FIRST, isnull(i_category_id#18) ASC NULLS FIRST], false, 0

(20) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#20, cs_sold_date_sk#21]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#21), dynamicpruningexpression(cs_sold_date_sk#21 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(21) ColumnarToRow [codegen id : 8]
Input [2]: [cs_item_sk#20, cs_sold_date_sk#21]

(22) Filter [codegen id : 8]
Input [2]: [cs_item_sk#20, cs_sold_date_sk#21]
Condition : isnotnull(cs_item_sk#20)

(23) ReusedExchange [Reuses operator id: 137]
Output [1]: [d_date_sk#22]

(24) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#21]
Right keys [1]: [d_date_sk#22]
Join condition: None

(25) Project [codegen id : 8]
Output [1]: [cs_item_sk#20]
Input [3]: [cs_item_sk#20, cs_sold_date_sk#21, d_date_sk#22]

(26) Scan parquet default.item
Output [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(27) ColumnarToRow [codegen id : 7]
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]

(28) Filter [codegen id : 7]
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Condition : isnotnull(i_item_sk#23)

(29) BroadcastExchange
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(30) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_item_sk#20]
Right keys [1]: [i_item_sk#23]
Join condition: None

(31) Project [codegen id : 8]
Output [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Input [5]: [cs_item_sk#20, i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]

(32) Exchange
Input [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: hashpartitioning(coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26), 5), ENSURE_REQUIREMENTS, [id=#28]

(33) Sort [codegen id : 9]
Input [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: [coalesce(i_brand_id#24, 0) ASC NULLS FIRST, isnull(i_brand_id#24) ASC NULLS FIRST, coalesce(i_class_id#25, 0) ASC NULLS FIRST, isnull(i_class_id#25) ASC NULLS FIRST, coalesce(i_category_id#26, 0) ASC NULLS FIRST, isnull(i_category_id#26) ASC NULLS FIRST], false, 0

(34) SortMergeJoin [codegen id : 10]
Left keys [6]: [coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18)]
Right keys [6]: [coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26)]
Join condition: None

(35) BroadcastExchange
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(36) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#11]
Right keys [1]: [i_item_sk#15]
Join condition: None

(37) Project [codegen id : 11]
Output [3]: [i_brand_id#16 AS brand_id#30, i_class_id#17 AS class_id#31, i_category_id#18 AS category_id#32]
Input [5]: [ss_item_sk#11, i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(38) HashAggregate [codegen id : 11]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(39) Exchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: hashpartitioning(brand_id#30, class_id#31, category_id#32, 5), ENSURE_REQUIREMENTS, [id=#33]

(40) HashAggregate [codegen id : 12]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(41) Exchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: hashpartitioning(coalesce(brand_id#30, 0), isnull(brand_id#30), coalesce(class_id#31, 0), isnull(class_id#31), coalesce(category_id#32, 0), isnull(category_id#32), 5), ENSURE_REQUIREMENTS, [id=#34]

(42) Sort [codegen id : 13]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: [coalesce(brand_id#30, 0) ASC NULLS FIRST, isnull(brand_id#30) ASC NULLS FIRST, coalesce(class_id#31, 0) ASC NULLS FIRST, isnull(class_id#31) ASC NULLS FIRST, coalesce(category_id#32, 0) ASC NULLS FIRST, isnull(category_id#32) ASC NULLS FIRST], false, 0

(43) Scan parquet default.web_sales
Output [2]: [ws_item_sk#35, ws_sold_date_sk#36]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#36), dynamicpruningexpression(ws_sold_date_sk#36 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(44) ColumnarToRow [codegen id : 16]
Input [2]: [ws_item_sk#35, ws_sold_date_sk#36]

(45) Filter [codegen id : 16]
Input [2]: [ws_item_sk#35, ws_sold_date_sk#36]
Condition : isnotnull(ws_item_sk#35)

(46) ReusedExchange [Reuses operator id: 137]
Output [1]: [d_date_sk#37]

(47) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_sold_date_sk#36]
Right keys [1]: [d_date_sk#37]
Join condition: None

(48) Project [codegen id : 16]
Output [1]: [ws_item_sk#35]
Input [3]: [ws_item_sk#35, ws_sold_date_sk#36, d_date_sk#37]

(49) ReusedExchange [Reuses operator id: 29]
Output [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(50) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_item_sk#35]
Right keys [1]: [i_item_sk#38]
Join condition: None

(51) Project [codegen id : 16]
Output [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Input [5]: [ws_item_sk#35, i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(52) Exchange
Input [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Arguments: hashpartitioning(coalesce(i_brand_id#39, 0), isnull(i_brand_id#39), coalesce(i_class_id#40, 0), isnull(i_class_id#40), coalesce(i_category_id#41, 0), isnull(i_category_id#41), 5), ENSURE_REQUIREMENTS, [id=#42]

(53) Sort [codegen id : 17]
Input [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Arguments: [coalesce(i_brand_id#39, 0) ASC NULLS FIRST, isnull(i_brand_id#39) ASC NULLS FIRST, coalesce(i_class_id#40, 0) ASC NULLS FIRST, isnull(i_class_id#40) ASC NULLS FIRST, coalesce(i_category_id#41, 0) ASC NULLS FIRST, isnull(i_category_id#41) ASC NULLS FIRST], false, 0

(54) SortMergeJoin [codegen id : 18]
Left keys [6]: [coalesce(brand_id#30, 0), isnull(brand_id#30), coalesce(class_id#31, 0), isnull(class_id#31), coalesce(category_id#32, 0), isnull(category_id#32)]
Right keys [6]: [coalesce(i_brand_id#39, 0), isnull(i_brand_id#39), coalesce(i_class_id#40, 0), isnull(i_class_id#40), coalesce(i_category_id#41, 0), isnull(i_category_id#41)]
Join condition: None

(55) HashAggregate [codegen id : 18]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(56) Exchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: hashpartitioning(brand_id#30, class_id#31, category_id#32, 5), ENSURE_REQUIREMENTS, [id=#43]

(57) HashAggregate [codegen id : 19]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(58) BroadcastExchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#44]

(59) BroadcastHashJoin [codegen id : 20]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#30, class_id#31, category_id#32]
Join condition: None

(60) Project [codegen id : 20]
Output [1]: [i_item_sk#7 AS ss_item_sk#45]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#30, class_id#31, category_id#32]

(61) Exchange
Input [1]: [ss_item_sk#45]
Arguments: hashpartitioning(ss_item_sk#45, 5), ENSURE_REQUIREMENTS, [id=#46]

(62) Sort [codegen id : 21]
Input [1]: [ss_item_sk#45]
Arguments: [ss_item_sk#45 ASC NULLS FIRST], false, 0

(63) SortMergeJoin [codegen id : 45]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#45]
Join condition: None

(64) ReusedExchange [Reuses operator id: 128]
Output [1]: [d_date_sk#47]

(65) BroadcastHashJoin [codegen id : 45]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#47]
Join condition: None

(66) Project [codegen id : 45]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#47]

(67) Scan parquet default.item
Output [4]: [i_item_sk#48, i_brand_id#49, i_class_id#50, i_category_id#51]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(68) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#48, i_brand_id#49, i_class_id#50, i_category_id#51]

(69) Filter [codegen id : 23]
Input [4]: [i_item_sk#48, i_brand_id#49, i_class_id#50, i_category_id#51]
Condition : (((isnotnull(i_item_sk#48) AND isnotnull(i_brand_id#49)) AND isnotnull(i_class_id#50)) AND isnotnull(i_category_id#51))

(70) Exchange
Input [4]: [i_item_sk#48, i_brand_id#49, i_class_id#50, i_category_id#51]
Arguments: hashpartitioning(i_item_sk#48, 5), ENSURE_REQUIREMENTS, [id=#52]

(71) Sort [codegen id : 24]
Input [4]: [i_item_sk#48, i_brand_id#49, i_class_id#50, i_category_id#51]
Arguments: [i_item_sk#48 ASC NULLS FIRST], false, 0

(72) ReusedExchange [Reuses operator id: 61]
Output [1]: [ss_item_sk#45]

(73) Sort [codegen id : 43]
Input [1]: [ss_item_sk#45]
Arguments: [ss_item_sk#45 ASC NULLS FIRST], false, 0

(74) SortMergeJoin [codegen id : 44]
Left keys [1]: [i_item_sk#48]
Right keys [1]: [ss_item_sk#45]
Join condition: None

(75) BroadcastExchange
Input [4]: [i_item_sk#48, i_brand_id#49, i_class_id#50, i_category_id#51]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#53]

(76) BroadcastHashJoin [codegen id : 45]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#48]
Join condition: None

(77) Project [codegen id : 45]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#49, i_class_id#50, i_category_id#51]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#48, i_brand_id#49, i_class_id#50, i_category_id#51]

(78) HashAggregate [codegen id : 45]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#49, i_class_id#50, i_category_id#51]
Keys [3]: [i_brand_id#49, i_class_id#50, i_category_id#51]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#54, isEmpty#55, count#56]
Results [6]: [i_brand_id#49, i_class_id#50, i_category_id#51, sum#57, isEmpty#58, count#59]

(79) Exchange
Input [6]: [i_brand_id#49, i_class_id#50, i_category_id#51, sum#57, isEmpty#58, count#59]
Arguments: hashpartitioning(i_brand_id#49, i_class_id#50, i_category_id#51, 5), ENSURE_REQUIREMENTS, [id=#60]

(80) HashAggregate [codegen id : 92]
Input [6]: [i_brand_id#49, i_class_id#50, i_category_id#51, sum#57, isEmpty#58, count#59]
Keys [3]: [i_brand_id#49, i_class_id#50, i_category_id#51]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#61, count(1)#62]
Results [6]: [i_brand_id#49, i_class_id#50, i_category_id#51, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#61 AS sales#63, count(1)#62 AS number_sales#64, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#61 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#65]

(81) Filter [codegen id : 92]
Input [6]: [i_brand_id#49, i_class_id#50, i_category_id#51, sales#63, number_sales#64, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#65]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#65) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#65 as decimal(32,6)) > cast(Subquery scalar-subquery#66, [id=#67] as decimal(32,6))))

(82) Project [codegen id : 92]
Output [6]: [store AS channel#68, i_brand_id#49, i_class_id#50, i_category_id#51, sales#63, number_sales#64]
Input [6]: [i_brand_id#49, i_class_id#50, i_category_id#51, sales#63, number_sales#64, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#65]

(83) Scan parquet default.store_sales
Output [4]: [ss_item_sk#69, ss_quantity#70, ss_list_price#71, ss_sold_date_sk#72]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#72), dynamicpruningexpression(ss_sold_date_sk#72 IN dynamicpruning#73)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(84) ColumnarToRow [codegen id : 46]
Input [4]: [ss_item_sk#69, ss_quantity#70, ss_list_price#71, ss_sold_date_sk#72]

(85) Filter [codegen id : 46]
Input [4]: [ss_item_sk#69, ss_quantity#70, ss_list_price#71, ss_sold_date_sk#72]
Condition : isnotnull(ss_item_sk#69)

(86) Exchange
Input [4]: [ss_item_sk#69, ss_quantity#70, ss_list_price#71, ss_sold_date_sk#72]
Arguments: hashpartitioning(ss_item_sk#69, 5), ENSURE_REQUIREMENTS, [id=#74]

(87) Sort [codegen id : 47]
Input [4]: [ss_item_sk#69, ss_quantity#70, ss_list_price#71, ss_sold_date_sk#72]
Arguments: [ss_item_sk#69 ASC NULLS FIRST], false, 0

(88) ReusedExchange [Reuses operator id: 61]
Output [1]: [ss_item_sk#45]

(89) Sort [codegen id : 66]
Input [1]: [ss_item_sk#45]
Arguments: [ss_item_sk#45 ASC NULLS FIRST], false, 0

(90) SortMergeJoin [codegen id : 90]
Left keys [1]: [ss_item_sk#69]
Right keys [1]: [ss_item_sk#45]
Join condition: None

(91) ReusedExchange [Reuses operator id: 142]
Output [1]: [d_date_sk#75]

(92) BroadcastHashJoin [codegen id : 90]
Left keys [1]: [ss_sold_date_sk#72]
Right keys [1]: [d_date_sk#75]
Join condition: None

(93) Project [codegen id : 90]
Output [3]: [ss_item_sk#69, ss_quantity#70, ss_list_price#71]
Input [5]: [ss_item_sk#69, ss_quantity#70, ss_list_price#71, ss_sold_date_sk#72, d_date_sk#75]

(94) ReusedExchange [Reuses operator id: 75]
Output [4]: [i_item_sk#76, i_brand_id#77, i_class_id#78, i_category_id#79]

(95) BroadcastHashJoin [codegen id : 90]
Left keys [1]: [ss_item_sk#69]
Right keys [1]: [i_item_sk#76]
Join condition: None

(96) Project [codegen id : 90]
Output [5]: [ss_quantity#70, ss_list_price#71, i_brand_id#77, i_class_id#78, i_category_id#79]
Input [7]: [ss_item_sk#69, ss_quantity#70, ss_list_price#71, i_item_sk#76, i_brand_id#77, i_class_id#78, i_category_id#79]

(97) HashAggregate [codegen id : 90]
Input [5]: [ss_quantity#70, ss_list_price#71, i_brand_id#77, i_class_id#78, i_category_id#79]
Keys [3]: [i_brand_id#77, i_class_id#78, i_category_id#79]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#71 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#80, isEmpty#81, count#82]
Results [6]: [i_brand_id#77, i_class_id#78, i_category_id#79, sum#83, isEmpty#84, count#85]

(98) Exchange
Input [6]: [i_brand_id#77, i_class_id#78, i_category_id#79, sum#83, isEmpty#84, count#85]
Arguments: hashpartitioning(i_brand_id#77, i_class_id#78, i_category_id#79, 5), ENSURE_REQUIREMENTS, [id=#86]

(99) HashAggregate [codegen id : 91]
Input [6]: [i_brand_id#77, i_class_id#78, i_category_id#79, sum#83, isEmpty#84, count#85]
Keys [3]: [i_brand_id#77, i_class_id#78, i_category_id#79]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#71 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#87, count(1)#88]
Results [6]: [i_brand_id#77, i_class_id#78, i_category_id#79, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#87 AS sales#89, count(1)#88 AS number_sales#90, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#87 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#91]

(100) Filter [codegen id : 91]
Input [6]: [i_brand_id#77, i_class_id#78, i_category_id#79, sales#89, number_sales#90, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#91]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#91) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#91 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#66, [id=#67] as decimal(32,6))))

(101) Project [codegen id : 91]
Output [6]: [store AS channel#92, i_brand_id#77, i_class_id#78, i_category_id#79, sales#89, number_sales#90]
Input [6]: [i_brand_id#77, i_class_id#78, i_category_id#79, sales#89, number_sales#90, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#91]

(102) BroadcastExchange
Input [6]: [channel#92, i_brand_id#77, i_class_id#78, i_category_id#79, sales#89, number_sales#90]
Arguments: HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true]),false), [id=#93]

(103) BroadcastHashJoin [codegen id : 92]
Left keys [3]: [i_brand_id#49, i_class_id#50, i_category_id#51]
Right keys [3]: [i_brand_id#77, i_class_id#78, i_category_id#79]
Join condition: None

(104) TakeOrderedAndProject
Input [12]: [channel#68, i_brand_id#49, i_class_id#50, i_category_id#51, sales#63, number_sales#64, channel#92, i_brand_id#77, i_class_id#78, i_category_id#79, sales#89, number_sales#90]
Arguments: 100, [i_brand_id#49 ASC NULLS FIRST, i_class_id#50 ASC NULLS FIRST, i_category_id#51 ASC NULLS FIRST], [channel#68, i_brand_id#49, i_class_id#50, i_category_id#51, sales#63, number_sales#64, channel#92, i_brand_id#77, i_class_id#78, i_category_id#79, sales#89, number_sales#90]

===== Subqueries =====

Subquery:1 Hosting operator id = 81 Hosting Expression = Subquery scalar-subquery#66, [id=#67]
* HashAggregate (123)
+- Exchange (122)
   +- * HashAggregate (121)
      +- Union (120)
         :- * Project (109)
         :  +- * BroadcastHashJoin Inner BuildRight (108)
         :     :- * ColumnarToRow (106)
         :     :  +- Scan parquet default.store_sales (105)
         :     +- ReusedExchange (107)
         :- * Project (114)
         :  +- * BroadcastHashJoin Inner BuildRight (113)
         :     :- * ColumnarToRow (111)
         :     :  +- Scan parquet default.catalog_sales (110)
         :     +- ReusedExchange (112)
         +- * Project (119)
            +- * BroadcastHashJoin Inner BuildRight (118)
               :- * ColumnarToRow (116)
               :  +- Scan parquet default.web_sales (115)
               +- ReusedExchange (117)


(105) Scan parquet default.store_sales
Output [3]: [ss_quantity#94, ss_list_price#95, ss_sold_date_sk#96]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#96), dynamicpruningexpression(ss_sold_date_sk#96 IN dynamicpruning#13)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(106) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#94, ss_list_price#95, ss_sold_date_sk#96]

(107) ReusedExchange [Reuses operator id: 137]
Output [1]: [d_date_sk#97]

(108) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#96]
Right keys [1]: [d_date_sk#97]
Join condition: None

(109) Project [codegen id : 2]
Output [2]: [ss_quantity#94 AS quantity#98, ss_list_price#95 AS list_price#99]
Input [4]: [ss_quantity#94, ss_list_price#95, ss_sold_date_sk#96, d_date_sk#97]

(110) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#100, cs_list_price#101, cs_sold_date_sk#102]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#102), dynamicpruningexpression(cs_sold_date_sk#102 IN dynamicpruning#13)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(111) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#100, cs_list_price#101, cs_sold_date_sk#102]

(112) ReusedExchange [Reuses operator id: 137]
Output [1]: [d_date_sk#103]

(113) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#102]
Right keys [1]: [d_date_sk#103]
Join condition: None

(114) Project [codegen id : 4]
Output [2]: [cs_quantity#100 AS quantity#104, cs_list_price#101 AS list_price#105]
Input [4]: [cs_quantity#100, cs_list_price#101, cs_sold_date_sk#102, d_date_sk#103]

(115) Scan parquet default.web_sales
Output [3]: [ws_quantity#106, ws_list_price#107, ws_sold_date_sk#108]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#108), dynamicpruningexpression(ws_sold_date_sk#108 IN dynamicpruning#13)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(116) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#106, ws_list_price#107, ws_sold_date_sk#108]

(117) ReusedExchange [Reuses operator id: 137]
Output [1]: [d_date_sk#109]

(118) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#108]
Right keys [1]: [d_date_sk#109]
Join condition: None

(119) Project [codegen id : 6]
Output [2]: [ws_quantity#106 AS quantity#110, ws_list_price#107 AS list_price#111]
Input [4]: [ws_quantity#106, ws_list_price#107, ws_sold_date_sk#108, d_date_sk#109]

(120) Union

(121) HashAggregate [codegen id : 7]
Input [2]: [quantity#98, list_price#99]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#98 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#99 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#112, count#113]
Results [2]: [sum#114, count#115]

(122) Exchange
Input [2]: [sum#114, count#115]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#116]

(123) HashAggregate [codegen id : 8]
Input [2]: [sum#114, count#115]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#98 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#99 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#98 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#99 as decimal(12,2)))), DecimalType(18,2), true))#117]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#98 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#99 as decimal(12,2)))), DecimalType(18,2), true))#117 AS average_sales#118]

Subquery:2 Hosting operator id = 105 Hosting Expression = ss_sold_date_sk#96 IN dynamicpruning#13

Subquery:3 Hosting operator id = 110 Hosting Expression = cs_sold_date_sk#102 IN dynamicpruning#13

Subquery:4 Hosting operator id = 115 Hosting Expression = ws_sold_date_sk#108 IN dynamicpruning#13

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (128)
+- * Project (127)
   +- * Filter (126)
      +- * ColumnarToRow (125)
         +- Scan parquet default.date_dim (124)


(124) Scan parquet default.date_dim
Output [2]: [d_date_sk#47, d_week_seq#119]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(125) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#47, d_week_seq#119]

(126) Filter [codegen id : 1]
Input [2]: [d_date_sk#47, d_week_seq#119]
Condition : ((isnotnull(d_week_seq#119) AND (d_week_seq#119 = Subquery scalar-subquery#120, [id=#121])) AND isnotnull(d_date_sk#47))

(127) Project [codegen id : 1]
Output [1]: [d_date_sk#47]
Input [2]: [d_date_sk#47, d_week_seq#119]

(128) BroadcastExchange
Input [1]: [d_date_sk#47]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#122]

Subquery:6 Hosting operator id = 126 Hosting Expression = Subquery scalar-subquery#120, [id=#121]
* Project (132)
+- * Filter (131)
   +- * ColumnarToRow (130)
      +- Scan parquet default.date_dim (129)


(129) Scan parquet default.date_dim
Output [4]: [d_week_seq#123, d_year#124, d_moy#125, d_dom#126]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), EqualTo(d_dom,16)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(130) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#123, d_year#124, d_moy#125, d_dom#126]

(131) Filter [codegen id : 1]
Input [4]: [d_week_seq#123, d_year#124, d_moy#125, d_dom#126]
Condition : (((((isnotnull(d_year#124) AND isnotnull(d_moy#125)) AND isnotnull(d_dom#126)) AND (d_year#124 = 1999)) AND (d_moy#125 = 12)) AND (d_dom#126 = 16))

(132) Project [codegen id : 1]
Output [1]: [d_week_seq#123]
Input [4]: [d_week_seq#123, d_year#124, d_moy#125, d_dom#126]

Subquery:7 Hosting operator id = 9 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#13
BroadcastExchange (137)
+- * Project (136)
   +- * Filter (135)
      +- * ColumnarToRow (134)
         +- Scan parquet default.date_dim (133)


(133) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#127]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(134) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#127]

(135) Filter [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#127]
Condition : (((isnotnull(d_year#127) AND (d_year#127 >= 1998)) AND (d_year#127 <= 2000)) AND isnotnull(d_date_sk#14))

(136) Project [codegen id : 1]
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#127]

(137) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#128]

Subquery:8 Hosting operator id = 20 Hosting Expression = cs_sold_date_sk#21 IN dynamicpruning#13

Subquery:9 Hosting operator id = 43 Hosting Expression = ws_sold_date_sk#36 IN dynamicpruning#13

Subquery:10 Hosting operator id = 100 Hosting Expression = ReusedSubquery Subquery scalar-subquery#66, [id=#67]

Subquery:11 Hosting operator id = 83 Hosting Expression = ss_sold_date_sk#72 IN dynamicpruning#73
BroadcastExchange (142)
+- * Project (141)
   +- * Filter (140)
      +- * ColumnarToRow (139)
         +- Scan parquet default.date_dim (138)


(138) Scan parquet default.date_dim
Output [2]: [d_date_sk#75, d_week_seq#129]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(139) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#75, d_week_seq#129]

(140) Filter [codegen id : 1]
Input [2]: [d_date_sk#75, d_week_seq#129]
Condition : ((isnotnull(d_week_seq#129) AND (d_week_seq#129 = Subquery scalar-subquery#130, [id=#131])) AND isnotnull(d_date_sk#75))

(141) Project [codegen id : 1]
Output [1]: [d_date_sk#75]
Input [2]: [d_date_sk#75, d_week_seq#129]

(142) BroadcastExchange
Input [1]: [d_date_sk#75]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#132]

Subquery:12 Hosting operator id = 140 Hosting Expression = Subquery scalar-subquery#130, [id=#131]
* Project (146)
+- * Filter (145)
   +- * ColumnarToRow (144)
      +- Scan parquet default.date_dim (143)


(143) Scan parquet default.date_dim
Output [4]: [d_week_seq#133, d_year#134, d_moy#135, d_dom#136]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1998), EqualTo(d_moy,12), EqualTo(d_dom,16)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(144) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#133, d_year#134, d_moy#135, d_dom#136]

(145) Filter [codegen id : 1]
Input [4]: [d_week_seq#133, d_year#134, d_moy#135, d_dom#136]
Condition : (((((isnotnull(d_year#134) AND isnotnull(d_moy#135)) AND isnotnull(d_dom#136)) AND (d_year#134 = 1998)) AND (d_moy#135 = 12)) AND (d_dom#136 = 16))

(146) Project [codegen id : 1]
Output [1]: [d_week_seq#133]
Input [4]: [d_week_seq#133, d_year#134, d_moy#135, d_dom#136]


