== Physical Plan ==
TakeOrderedAndProject (90)
+- * BroadcastHashJoin Inner BuildRight (89)
   :- * Filter (72)
   :  +- * HashAggregate (71)
   :     +- Exchange (70)
   :        +- * HashAggregate (69)
   :           +- * Project (68)
   :              +- * BroadcastHashJoin Inner BuildRight (67)
   :                 :- * Project (60)
   :                 :  +- * BroadcastHashJoin Inner BuildRight (59)
   :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (57)
   :                 :     :  :- * Filter (3)
   :                 :     :  :  +- * ColumnarToRow (2)
   :                 :     :  :     +- Scan parquet spark_catalog.default.store_sales (1)
   :                 :     :  +- BroadcastExchange (56)
   :                 :     :     +- * Project (55)
   :                 :     :        +- * BroadcastHashJoin Inner BuildRight (54)
   :                 :     :           :- * Filter (6)
   :                 :     :           :  +- * ColumnarToRow (5)
   :                 :     :           :     +- Scan parquet spark_catalog.default.item (4)
   :                 :     :           +- BroadcastExchange (53)
   :                 :     :              +- * SortMergeJoin LeftSemi (52)
   :                 :     :                 :- * Sort (40)
   :                 :     :                 :  +- Exchange (39)
   :                 :     :                 :     +- * HashAggregate (38)
   :                 :     :                 :        +- Exchange (37)
   :                 :     :                 :           +- * HashAggregate (36)
   :                 :     :                 :              +- * SortMergeJoin LeftSemi (35)
   :                 :     :                 :                 :- * Sort (20)
   :                 :     :                 :                 :  +- Exchange (19)
   :                 :     :                 :                 :     +- * Project (18)
   :                 :     :                 :                 :        +- * BroadcastHashJoin Inner BuildRight (17)
   :                 :     :                 :                 :           :- * Project (12)
   :                 :     :                 :                 :           :  +- * BroadcastHashJoin Inner BuildRight (11)
   :                 :     :                 :                 :           :     :- * Filter (9)
   :                 :     :                 :                 :           :     :  +- * ColumnarToRow (8)
   :                 :     :                 :                 :           :     :     +- Scan parquet spark_catalog.default.store_sales (7)
   :                 :     :                 :                 :           :     +- ReusedExchange (10)
   :                 :     :                 :                 :           +- BroadcastExchange (16)
   :                 :     :                 :                 :              +- * Filter (15)
   :                 :     :                 :                 :                 +- * ColumnarToRow (14)
   :                 :     :                 :                 :                    +- Scan parquet spark_catalog.default.item (13)
   :                 :     :                 :                 +- * Sort (34)
   :                 :     :                 :                    +- Exchange (33)
   :                 :     :                 :                       +- * Project (32)
   :                 :     :                 :                          +- * BroadcastHashJoin Inner BuildRight (31)
   :                 :     :                 :                             :- * Project (26)
   :                 :     :                 :                             :  +- * BroadcastHashJoin Inner BuildRight (25)
   :                 :     :                 :                             :     :- * Filter (23)
   :                 :     :                 :                             :     :  +- * ColumnarToRow (22)
   :                 :     :                 :                             :     :     +- Scan parquet spark_catalog.default.catalog_sales (21)
   :                 :     :                 :                             :     +- ReusedExchange (24)
   :                 :     :                 :                             +- BroadcastExchange (30)
   :                 :     :                 :                                +- * Filter (29)
   :                 :     :                 :                                   +- * ColumnarToRow (28)
   :                 :     :                 :                                      +- Scan parquet spark_catalog.default.item (27)
   :                 :     :                 +- * Sort (51)
   :                 :     :                    +- Exchange (50)
   :                 :     :                       +- * Project (49)
   :                 :     :                          +- * BroadcastHashJoin Inner BuildRight (48)
   :                 :     :                             :- * Project (46)
   :                 :     :                             :  +- * BroadcastHashJoin Inner BuildRight (45)
   :                 :     :                             :     :- * Filter (43)
   :                 :     :                             :     :  +- * ColumnarToRow (42)
   :                 :     :                             :     :     +- Scan parquet spark_catalog.default.web_sales (41)
   :                 :     :                             :     +- ReusedExchange (44)
   :                 :     :                             +- ReusedExchange (47)
   :                 :     +- ReusedExchange (58)
   :                 +- BroadcastExchange (66)
   :                    +- * BroadcastHashJoin LeftSemi BuildRight (65)
   :                       :- * Filter (63)
   :                       :  +- * ColumnarToRow (62)
   :                       :     +- Scan parquet spark_catalog.default.item (61)
   :                       +- ReusedExchange (64)
   +- BroadcastExchange (88)
      +- * Filter (87)
         +- * HashAggregate (86)
            +- Exchange (85)
               +- * HashAggregate (84)
                  +- * Project (83)
                     +- * BroadcastHashJoin Inner BuildRight (82)
                        :- * Project (80)
                        :  +- * BroadcastHashJoin Inner BuildRight (79)
                        :     :- * BroadcastHashJoin LeftSemi BuildRight (77)
                        :     :  :- * Filter (75)
                        :     :  :  +- * ColumnarToRow (74)
                        :     :  :     +- Scan parquet spark_catalog.default.store_sales (73)
                        :     :  +- ReusedExchange (76)
                        :     +- ReusedExchange (78)
                        +- ReusedExchange (81)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 37]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 37]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 17]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(6) Filter [codegen id : 17]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(7) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 3]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]

(9) Filter [codegen id : 3]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(10) ReusedExchange [Reuses operator id: 123]
Output [1]: [d_date_sk#11]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(12) Project [codegen id : 3]
Output [1]: [ss_item_sk#1]
Input [3]: [ss_item_sk#1, ss_sold_date_sk#4, d_date_sk#11]

(13) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(14) ColumnarToRow [codegen id : 2]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(15) Filter [codegen id : 2]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : (((isnotnull(i_item_sk#6) AND isnotnull(i_brand_id#7)) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(16) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(17) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(18) Project [codegen id : 3]
Output [3]: [i_brand_id#7 AS brand_id#12, i_class_id#8 AS class_id#13, i_category_id#9 AS category_id#14]
Input [5]: [ss_item_sk#1, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(19) Exchange
Input [3]: [brand_id#12, class_id#13, category_id#14]
Arguments: hashpartitioning(coalesce(brand_id#12, 0), isnull(brand_id#12), coalesce(class_id#13, 0), isnull(class_id#13), coalesce(category_id#14, 0), isnull(category_id#14), 5), ENSURE_REQUIREMENTS, [plan_id=2]

(20) Sort [codegen id : 4]
Input [3]: [brand_id#12, class_id#13, category_id#14]
Arguments: [coalesce(brand_id#12, 0) ASC NULLS FIRST, isnull(brand_id#12) ASC NULLS FIRST, coalesce(class_id#13, 0) ASC NULLS FIRST, isnull(class_id#13) ASC NULLS FIRST, coalesce(category_id#14, 0) ASC NULLS FIRST, isnull(category_id#14) ASC NULLS FIRST], false, 0

(21) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_item_sk#15, cs_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#16), dynamicpruningexpression(cs_sold_date_sk#16 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(22) ColumnarToRow [codegen id : 7]
Input [2]: [cs_item_sk#15, cs_sold_date_sk#16]

(23) Filter [codegen id : 7]
Input [2]: [cs_item_sk#15, cs_sold_date_sk#16]
Condition : isnotnull(cs_item_sk#15)

(24) ReusedExchange [Reuses operator id: 123]
Output [1]: [d_date_sk#11]

(25) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(26) Project [codegen id : 7]
Output [1]: [cs_item_sk#15]
Input [3]: [cs_item_sk#15, cs_sold_date_sk#16, d_date_sk#11]

(27) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(28) ColumnarToRow [codegen id : 6]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(29) Filter [codegen id : 6]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : isnotnull(i_item_sk#6)

(30) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(31) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cs_item_sk#15]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(32) Project [codegen id : 7]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [cs_item_sk#15, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(33) Exchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9), 5), ENSURE_REQUIREMENTS, [plan_id=4]

(34) Sort [codegen id : 8]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: [coalesce(i_brand_id#7, 0) ASC NULLS FIRST, isnull(i_brand_id#7) ASC NULLS FIRST, coalesce(i_class_id#8, 0) ASC NULLS FIRST, isnull(i_class_id#8) ASC NULLS FIRST, coalesce(i_category_id#9, 0) ASC NULLS FIRST, isnull(i_category_id#9) ASC NULLS FIRST], false, 0

(35) SortMergeJoin [codegen id : 9]
Left keys [6]: [coalesce(brand_id#12, 0), isnull(brand_id#12), coalesce(class_id#13, 0), isnull(class_id#13), coalesce(category_id#14, 0), isnull(category_id#14)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join type: LeftSemi
Join condition: None

(36) HashAggregate [codegen id : 9]
Input [3]: [brand_id#12, class_id#13, category_id#14]
Keys [3]: [brand_id#12, class_id#13, category_id#14]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#12, class_id#13, category_id#14]

(37) Exchange
Input [3]: [brand_id#12, class_id#13, category_id#14]
Arguments: hashpartitioning(brand_id#12, class_id#13, category_id#14, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(38) HashAggregate [codegen id : 10]
Input [3]: [brand_id#12, class_id#13, category_id#14]
Keys [3]: [brand_id#12, class_id#13, category_id#14]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#12, class_id#13, category_id#14]

(39) Exchange
Input [3]: [brand_id#12, class_id#13, category_id#14]
Arguments: hashpartitioning(coalesce(brand_id#12, 0), isnull(brand_id#12), coalesce(class_id#13, 0), isnull(class_id#13), coalesce(category_id#14, 0), isnull(category_id#14), 5), ENSURE_REQUIREMENTS, [plan_id=6]

(40) Sort [codegen id : 11]
Input [3]: [brand_id#12, class_id#13, category_id#14]
Arguments: [coalesce(brand_id#12, 0) ASC NULLS FIRST, isnull(brand_id#12) ASC NULLS FIRST, coalesce(class_id#13, 0) ASC NULLS FIRST, isnull(class_id#13) ASC NULLS FIRST, coalesce(category_id#14, 0) ASC NULLS FIRST, isnull(category_id#14) ASC NULLS FIRST], false, 0

(41) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_item_sk#17, ws_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#18), dynamicpruningexpression(ws_sold_date_sk#18 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(42) ColumnarToRow [codegen id : 14]
Input [2]: [ws_item_sk#17, ws_sold_date_sk#18]

(43) Filter [codegen id : 14]
Input [2]: [ws_item_sk#17, ws_sold_date_sk#18]
Condition : isnotnull(ws_item_sk#17)

(44) ReusedExchange [Reuses operator id: 123]
Output [1]: [d_date_sk#11]

(45) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_sold_date_sk#18]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(46) Project [codegen id : 14]
Output [1]: [ws_item_sk#17]
Input [3]: [ws_item_sk#17, ws_sold_date_sk#18, d_date_sk#11]

(47) ReusedExchange [Reuses operator id: 30]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(48) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_item_sk#17]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(49) Project [codegen id : 14]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [ws_item_sk#17, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(50) Exchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9), 5), ENSURE_REQUIREMENTS, [plan_id=7]

(51) Sort [codegen id : 15]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: [coalesce(i_brand_id#7, 0) ASC NULLS FIRST, isnull(i_brand_id#7) ASC NULLS FIRST, coalesce(i_class_id#8, 0) ASC NULLS FIRST, isnull(i_class_id#8) ASC NULLS FIRST, coalesce(i_category_id#9, 0) ASC NULLS FIRST, isnull(i_category_id#9) ASC NULLS FIRST], false, 0

(52) SortMergeJoin [codegen id : 16]
Left keys [6]: [coalesce(brand_id#12, 0), isnull(brand_id#12), coalesce(class_id#13, 0), isnull(class_id#13), coalesce(category_id#14, 0), isnull(category_id#14)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join type: LeftSemi
Join condition: None

(53) BroadcastExchange
Input [3]: [brand_id#12, class_id#13, category_id#14]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [plan_id=8]

(54) BroadcastHashJoin [codegen id : 17]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#12, class_id#13, category_id#14]
Join type: Inner
Join condition: None

(55) Project [codegen id : 17]
Output [1]: [i_item_sk#6 AS ss_item_sk#19]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#12, class_id#13, category_id#14]

(56) BroadcastExchange
Input [1]: [ss_item_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

(57) BroadcastHashJoin [codegen id : 37]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#19]
Join type: LeftSemi
Join condition: None

(58) ReusedExchange [Reuses operator id: 114]
Output [1]: [d_date_sk#11]

(59) BroadcastHashJoin [codegen id : 37]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(60) Project [codegen id : 37]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#11]

(61) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(62) ColumnarToRow [codegen id : 36]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(63) Filter [codegen id : 36]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : (((isnotnull(i_item_sk#6) AND isnotnull(i_brand_id#7)) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(64) ReusedExchange [Reuses operator id: 56]
Output [1]: [ss_item_sk#19]

(65) BroadcastHashJoin [codegen id : 36]
Left keys [1]: [i_item_sk#6]
Right keys [1]: [ss_item_sk#19]
Join type: LeftSemi
Join condition: None

(66) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=10]

(67) BroadcastHashJoin [codegen id : 37]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(68) Project [codegen id : 37]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(69) HashAggregate [codegen id : 37]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), partial_count(1)]
Aggregate Attributes [3]: [sum#20, isEmpty#21, count#22]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#23, isEmpty#24, count#25]

(70) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#23, isEmpty#24, count#25]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(71) HashAggregate [codegen id : 76]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#23, isEmpty#24, count#25]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#26, count(1)#27]
Results [6]: [store AS channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#26 AS sales#29, count(1)#27 AS number_sales#30]

(72) Filter [codegen id : 76]
Input [6]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sales#29, number_sales#30]
Condition : (isnotnull(sales#29) AND (cast(sales#29 as decimal(32,6)) > cast(Subquery scalar-subquery#31, [id=#32] as decimal(32,6))))

(73) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#33)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(74) ColumnarToRow [codegen id : 74]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(75) Filter [codegen id : 74]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(76) ReusedExchange [Reuses operator id: 56]
Output [1]: [ss_item_sk#19]

(77) BroadcastHashJoin [codegen id : 74]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#19]
Join type: LeftSemi
Join condition: None

(78) ReusedExchange [Reuses operator id: 128]
Output [1]: [d_date_sk#11]

(79) BroadcastHashJoin [codegen id : 74]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(80) Project [codegen id : 74]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#11]

(81) ReusedExchange [Reuses operator id: 66]
Output [4]: [i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]

(82) BroadcastHashJoin [codegen id : 74]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#34]
Join type: Inner
Join condition: None

(83) Project [codegen id : 74]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#35, i_class_id#36, i_category_id#37]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]

(84) HashAggregate [codegen id : 74]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#35, i_class_id#36, i_category_id#37]
Keys [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Functions [2]: [partial_sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), partial_count(1)]
Aggregate Attributes [3]: [sum#38, isEmpty#39, count#40]
Results [6]: [i_brand_id#35, i_class_id#36, i_category_id#37, sum#41, isEmpty#42, count#43]

(85) Exchange
Input [6]: [i_brand_id#35, i_class_id#36, i_category_id#37, sum#41, isEmpty#42, count#43]
Arguments: hashpartitioning(i_brand_id#35, i_class_id#36, i_category_id#37, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(86) HashAggregate [codegen id : 75]
Input [6]: [i_brand_id#35, i_class_id#36, i_category_id#37, sum#41, isEmpty#42, count#43]
Keys [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Functions [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#44, count(1)#45]
Results [6]: [store AS channel#46, i_brand_id#35, i_class_id#36, i_category_id#37, sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#44 AS sales#47, count(1)#45 AS number_sales#48]

(87) Filter [codegen id : 75]
Input [6]: [channel#46, i_brand_id#35, i_class_id#36, i_category_id#37, sales#47, number_sales#48]
Condition : (isnotnull(sales#47) AND (cast(sales#47 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#31, [id=#32] as decimal(32,6))))

(88) BroadcastExchange
Input [6]: [channel#46, i_brand_id#35, i_class_id#36, i_category_id#37, sales#47, number_sales#48]
Arguments: HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true]),false), [plan_id=13]

(89) BroadcastHashJoin [codegen id : 76]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Join type: Inner
Join condition: None

(90) TakeOrderedAndProject
Input [12]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sales#29, number_sales#30, channel#46, i_brand_id#35, i_class_id#36, i_category_id#37, sales#47, number_sales#48]
Arguments: 100, [i_brand_id#7 ASC NULLS FIRST, i_class_id#8 ASC NULLS FIRST, i_category_id#9 ASC NULLS FIRST], [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sales#29, number_sales#30, channel#46, i_brand_id#35, i_class_id#36, i_category_id#37, sales#47, number_sales#48]

===== Subqueries =====

Subquery:1 Hosting operator id = 72 Hosting Expression = Subquery scalar-subquery#31, [id=#32]
* HashAggregate (109)
+- Exchange (108)
   +- * HashAggregate (107)
      +- Union (106)
         :- * Project (95)
         :  +- * BroadcastHashJoin Inner BuildRight (94)
         :     :- * ColumnarToRow (92)
         :     :  +- Scan parquet spark_catalog.default.store_sales (91)
         :     +- ReusedExchange (93)
         :- * Project (100)
         :  +- * BroadcastHashJoin Inner BuildRight (99)
         :     :- * ColumnarToRow (97)
         :     :  +- Scan parquet spark_catalog.default.catalog_sales (96)
         :     +- ReusedExchange (98)
         +- * Project (105)
            +- * BroadcastHashJoin Inner BuildRight (104)
               :- * ColumnarToRow (102)
               :  +- Scan parquet spark_catalog.default.web_sales (101)
               +- ReusedExchange (103)


(91) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#10)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(92) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(93) ReusedExchange [Reuses operator id: 123]
Output [1]: [d_date_sk#11]

(94) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(95) Project [codegen id : 2]
Output [2]: [ss_quantity#2 AS quantity#49, ss_list_price#3 AS list_price#50]
Input [4]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#11]

(96) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_quantity#51, cs_list_price#52, cs_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#16), dynamicpruningexpression(cs_sold_date_sk#16 IN dynamicpruning#10)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(97) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#51, cs_list_price#52, cs_sold_date_sk#16]

(98) ReusedExchange [Reuses operator id: 123]
Output [1]: [d_date_sk#11]

(99) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(100) Project [codegen id : 4]
Output [2]: [cs_quantity#51 AS quantity#53, cs_list_price#52 AS list_price#54]
Input [4]: [cs_quantity#51, cs_list_price#52, cs_sold_date_sk#16, d_date_sk#11]

(101) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_quantity#55, ws_list_price#56, ws_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#18), dynamicpruningexpression(ws_sold_date_sk#18 IN dynamicpruning#10)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(102) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#55, ws_list_price#56, ws_sold_date_sk#18]

(103) ReusedExchange [Reuses operator id: 123]
Output [1]: [d_date_sk#11]

(104) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#18]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(105) Project [codegen id : 6]
Output [2]: [ws_quantity#55 AS quantity#57, ws_list_price#56 AS list_price#58]
Input [4]: [ws_quantity#55, ws_list_price#56, ws_sold_date_sk#18, d_date_sk#11]

(106) Union

(107) HashAggregate [codegen id : 7]
Input [2]: [quantity#49, list_price#50]
Keys: []
Functions [1]: [partial_avg((cast(quantity#49 as decimal(10,0)) * list_price#50))]
Aggregate Attributes [2]: [sum#59, count#60]
Results [2]: [sum#61, count#62]

(108) Exchange
Input [2]: [sum#61, count#62]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=14]

(109) HashAggregate [codegen id : 8]
Input [2]: [sum#61, count#62]
Keys: []
Functions [1]: [avg((cast(quantity#49 as decimal(10,0)) * list_price#50))]
Aggregate Attributes [1]: [avg((cast(quantity#49 as decimal(10,0)) * list_price#50))#63]
Results [1]: [avg((cast(quantity#49 as decimal(10,0)) * list_price#50))#63 AS average_sales#64]

Subquery:2 Hosting operator id = 91 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#10

Subquery:3 Hosting operator id = 96 Hosting Expression = cs_sold_date_sk#16 IN dynamicpruning#10

Subquery:4 Hosting operator id = 101 Hosting Expression = ws_sold_date_sk#18 IN dynamicpruning#10

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (114)
+- * Project (113)
   +- * Filter (112)
      +- * ColumnarToRow (111)
         +- Scan parquet spark_catalog.default.date_dim (110)


(110) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#11, d_week_seq#65]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), EqualTo(d_week_seq,ScalarSubquery#66), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(111) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#11, d_week_seq#65]

(112) Filter [codegen id : 1]
Input [2]: [d_date_sk#11, d_week_seq#65]
Condition : ((isnotnull(d_week_seq#65) AND (d_week_seq#65 = ReusedSubquery Subquery scalar-subquery#66, [id=#67])) AND isnotnull(d_date_sk#11))

(113) Project [codegen id : 1]
Output [1]: [d_date_sk#11]
Input [2]: [d_date_sk#11, d_week_seq#65]

(114) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=15]

Subquery:6 Hosting operator id = 112 Hosting Expression = ReusedSubquery Subquery scalar-subquery#66, [id=#67]

Subquery:7 Hosting operator id = 110 Hosting Expression = Subquery scalar-subquery#66, [id=#67]
* Project (118)
+- * Filter (117)
   +- * ColumnarToRow (116)
      +- Scan parquet spark_catalog.default.date_dim (115)


(115) Scan parquet spark_catalog.default.date_dim
Output [4]: [d_week_seq#68, d_year#69, d_moy#70, d_dom#71]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), EqualTo(d_dom,16)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(116) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#68, d_year#69, d_moy#70, d_dom#71]

(117) Filter [codegen id : 1]
Input [4]: [d_week_seq#68, d_year#69, d_moy#70, d_dom#71]
Condition : (((((isnotnull(d_year#69) AND isnotnull(d_moy#70)) AND isnotnull(d_dom#71)) AND (d_year#69 = 1999)) AND (d_moy#70 = 12)) AND (d_dom#71 = 16))

(118) Project [codegen id : 1]
Output [1]: [d_week_seq#68]
Input [4]: [d_week_seq#68, d_year#69, d_moy#70, d_dom#71]

Subquery:8 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#10
BroadcastExchange (123)
+- * Project (122)
   +- * Filter (121)
      +- * ColumnarToRow (120)
         +- Scan parquet spark_catalog.default.date_dim (119)


(119) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#11, d_year#72]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(120) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#11, d_year#72]

(121) Filter [codegen id : 1]
Input [2]: [d_date_sk#11, d_year#72]
Condition : (((isnotnull(d_year#72) AND (d_year#72 >= 1998)) AND (d_year#72 <= 2000)) AND isnotnull(d_date_sk#11))

(122) Project [codegen id : 1]
Output [1]: [d_date_sk#11]
Input [2]: [d_date_sk#11, d_year#72]

(123) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=16]

Subquery:9 Hosting operator id = 21 Hosting Expression = cs_sold_date_sk#16 IN dynamicpruning#10

Subquery:10 Hosting operator id = 41 Hosting Expression = ws_sold_date_sk#18 IN dynamicpruning#10

Subquery:11 Hosting operator id = 87 Hosting Expression = ReusedSubquery Subquery scalar-subquery#31, [id=#32]

Subquery:12 Hosting operator id = 73 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#33
BroadcastExchange (128)
+- * Project (127)
   +- * Filter (126)
      +- * ColumnarToRow (125)
         +- Scan parquet spark_catalog.default.date_dim (124)


(124) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#11, d_week_seq#65]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), EqualTo(d_week_seq,ScalarSubquery#73), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(125) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#11, d_week_seq#65]

(126) Filter [codegen id : 1]
Input [2]: [d_date_sk#11, d_week_seq#65]
Condition : ((isnotnull(d_week_seq#65) AND (d_week_seq#65 = ReusedSubquery Subquery scalar-subquery#73, [id=#74])) AND isnotnull(d_date_sk#11))

(127) Project [codegen id : 1]
Output [1]: [d_date_sk#11]
Input [2]: [d_date_sk#11, d_week_seq#65]

(128) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=17]

Subquery:13 Hosting operator id = 126 Hosting Expression = ReusedSubquery Subquery scalar-subquery#73, [id=#74]

Subquery:14 Hosting operator id = 124 Hosting Expression = Subquery scalar-subquery#73, [id=#74]
* Project (132)
+- * Filter (131)
   +- * ColumnarToRow (130)
      +- Scan parquet spark_catalog.default.date_dim (129)


(129) Scan parquet spark_catalog.default.date_dim
Output [4]: [d_week_seq#75, d_year#76, d_moy#77, d_dom#78]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1998), EqualTo(d_moy,12), EqualTo(d_dom,16)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(130) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#75, d_year#76, d_moy#77, d_dom#78]

(131) Filter [codegen id : 1]
Input [4]: [d_week_seq#75, d_year#76, d_moy#77, d_dom#78]
Condition : (((((isnotnull(d_year#76) AND isnotnull(d_moy#77)) AND isnotnull(d_dom#78)) AND (d_year#76 = 1998)) AND (d_moy#77 = 12)) AND (d_dom#78 = 16))

(132) Project [codegen id : 1]
Output [1]: [d_week_seq#75]
Input [4]: [d_week_seq#75, d_year#76, d_moy#77, d_dom#78]


