== Physical Plan ==
TakeOrderedAndProject (110)
+- * BroadcastHashJoin Inner BuildRight (109)
   :- * Project (87)
   :  +- * Filter (86)
   :     +- * HashAggregate (85)
   :        +- Exchange (84)
   :           +- * HashAggregate (83)
   :              +- * Project (82)
   :                 +- * BroadcastHashJoin Inner BuildRight (81)
   :                    :- * Project (75)
   :                    :  +- * BroadcastHashJoin Inner BuildRight (74)
   :                    :     :- SortMergeJoin LeftSemi (64)
   :                    :     :  :- * Sort (5)
   :                    :     :  :  +- Exchange (4)
   :                    :     :  :     +- * Filter (3)
   :                    :     :  :        +- * ColumnarToRow (2)
   :                    :     :  :           +- Scan parquet default.store_sales (1)
   :                    :     :  +- * Sort (63)
   :                    :     :     +- Exchange (62)
   :                    :     :        +- * Project (61)
   :                    :     :           +- * BroadcastHashJoin Inner BuildRight (60)
   :                    :     :              :- * Filter (8)
   :                    :     :              :  +- * ColumnarToRow (7)
   :                    :     :              :     +- Scan parquet default.item (6)
   :                    :     :              +- BroadcastExchange (59)
   :                    :     :                 +- * HashAggregate (58)
   :                    :     :                    +- * HashAggregate (57)
   :                    :     :                       +- * HashAggregate (56)
   :                    :     :                          +- Exchange (55)
   :                    :     :                             +- * HashAggregate (54)
   :                    :     :                                +- SortMergeJoin LeftSemi (53)
   :                    :     :                                   :- SortMergeJoin LeftSemi (41)
   :                    :     :                                   :  :- * Sort (26)
   :                    :     :                                   :  :  +- Exchange (25)
   :                    :     :                                   :  :     +- * Project (24)
   :                    :     :                                   :  :        +- * BroadcastHashJoin Inner BuildRight (23)
   :                    :     :                                   :  :           :- * Project (17)
   :                    :     :                                   :  :           :  +- * BroadcastHashJoin Inner BuildRight (16)
   :                    :     :                                   :  :           :     :- * Filter (11)
   :                    :     :                                   :  :           :     :  +- * ColumnarToRow (10)
   :                    :     :                                   :  :           :     :     +- Scan parquet default.store_sales (9)
   :                    :     :                                   :  :           :     +- BroadcastExchange (15)
   :                    :     :                                   :  :           :        +- * Filter (14)
   :                    :     :                                   :  :           :           +- * ColumnarToRow (13)
   :                    :     :                                   :  :           :              +- Scan parquet default.item (12)
   :                    :     :                                   :  :           +- BroadcastExchange (22)
   :                    :     :                                   :  :              +- * Project (21)
   :                    :     :                                   :  :                 +- * Filter (20)
   :                    :     :                                   :  :                    +- * ColumnarToRow (19)
   :                    :     :                                   :  :                       +- Scan parquet default.date_dim (18)
   :                    :     :                                   :  +- * Sort (40)
   :                    :     :                                   :     +- Exchange (39)
   :                    :     :                                   :        +- * Project (38)
   :                    :     :                                   :           +- * BroadcastHashJoin Inner BuildRight (37)
   :                    :     :                                   :              :- * Project (35)
   :                    :     :                                   :              :  +- * BroadcastHashJoin Inner BuildRight (34)
   :                    :     :                                   :              :     :- * Filter (29)
   :                    :     :                                   :              :     :  +- * ColumnarToRow (28)
   :                    :     :                                   :              :     :     +- Scan parquet default.catalog_sales (27)
   :                    :     :                                   :              :     +- BroadcastExchange (33)
   :                    :     :                                   :              :        +- * Filter (32)
   :                    :     :                                   :              :           +- * ColumnarToRow (31)
   :                    :     :                                   :              :              +- Scan parquet default.item (30)
   :                    :     :                                   :              +- ReusedExchange (36)
   :                    :     :                                   +- * Sort (52)
   :                    :     :                                      +- Exchange (51)
   :                    :     :                                         +- * Project (50)
   :                    :     :                                            +- * BroadcastHashJoin Inner BuildRight (49)
   :                    :     :                                               :- * Project (47)
   :                    :     :                                               :  +- * BroadcastHashJoin Inner BuildRight (46)
   :                    :     :                                               :     :- * Filter (44)
   :                    :     :                                               :     :  +- * ColumnarToRow (43)
   :                    :     :                                               :     :     +- Scan parquet default.web_sales (42)
   :                    :     :                                               :     +- ReusedExchange (45)
   :                    :     :                                               +- ReusedExchange (48)
   :                    :     +- BroadcastExchange (73)
   :                    :        +- SortMergeJoin LeftSemi (72)
   :                    :           :- * Sort (69)
   :                    :           :  +- Exchange (68)
   :                    :           :     +- * Filter (67)
   :                    :           :        +- * ColumnarToRow (66)
   :                    :           :           +- Scan parquet default.item (65)
   :                    :           +- * Sort (71)
   :                    :              +- ReusedExchange (70)
   :                    +- BroadcastExchange (80)
   :                       +- * Project (79)
   :                          +- * Filter (78)
   :                             +- * ColumnarToRow (77)
   :                                +- Scan parquet default.date_dim (76)
   +- BroadcastExchange (108)
      +- * Project (107)
         +- * Filter (106)
            +- * HashAggregate (105)
               +- Exchange (104)
                  +- * HashAggregate (103)
                     +- * Project (102)
                        +- * BroadcastHashJoin Inner BuildRight (101)
                           :- * Project (95)
                           :  +- * BroadcastHashJoin Inner BuildRight (94)
                           :     :- SortMergeJoin LeftSemi (92)
                           :     :  :- * Sort (89)
                           :     :  :  +- ReusedExchange (88)
                           :     :  +- * Sort (91)
                           :     :     +- ReusedExchange (90)
                           :     +- ReusedExchange (93)
                           +- BroadcastExchange (100)
                              +- * Project (99)
                                 +- * Filter (98)
                                    +- * ColumnarToRow (97)
                                       +- Scan parquet default.date_dim (96)


(1) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(4) Exchange
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Arguments: hashpartitioning(ss_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#5]

(5) Sort [codegen id : 2]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Arguments: [ss_item_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 17]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(8) Filter [codegen id : 17]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(9) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(10) ColumnarToRow [codegen id : 5]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]

(11) Filter [codegen id : 5]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(12) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(13) ColumnarToRow [codegen id : 3]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(14) Filter [codegen id : 3]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : (((isnotnull(i_item_sk#6) AND isnotnull(i_brand_id#7)) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(15) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#10]

(16) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#6]
Join condition: None

(17) Project [codegen id : 5]
Output [4]: [ss_sold_date_sk#1, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(18) Scan parquet default.date_dim
Output [2]: [d_date_sk#11, d_year#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(19) ColumnarToRow [codegen id : 4]
Input [2]: [d_date_sk#11, d_year#12]

(20) Filter [codegen id : 4]
Input [2]: [d_date_sk#11, d_year#12]
Condition : (((isnotnull(d_year#12) AND (d_year#12 >= 1998)) AND (d_year#12 <= 2000)) AND isnotnull(d_date_sk#11))

(21) Project [codegen id : 4]
Output [1]: [d_date_sk#11]
Input [2]: [d_date_sk#11, d_year#12]

(22) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13]

(23) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#11]
Join condition: None

(24) Project [codegen id : 5]
Output [3]: [i_brand_id#7 AS brand_id#14, i_class_id#8 AS class_id#15, i_category_id#9 AS category_id#16]
Input [5]: [ss_sold_date_sk#1, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#11]

(25) Exchange
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: hashpartitioning(coalesce(brand_id#14, 0), isnull(brand_id#14), coalesce(class_id#15, 0), isnull(class_id#15), coalesce(category_id#16, 0), isnull(category_id#16), 5), ENSURE_REQUIREMENTS, [id=#17]

(26) Sort [codegen id : 6]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: [coalesce(brand_id#14, 0) ASC NULLS FIRST, isnull(brand_id#14) ASC NULLS FIRST, coalesce(class_id#15, 0) ASC NULLS FIRST, isnull(class_id#15) ASC NULLS FIRST, coalesce(category_id#16, 0) ASC NULLS FIRST, isnull(category_id#16) ASC NULLS FIRST], false, 0

(27) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#18, cs_item_sk#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int>

(28) ColumnarToRow [codegen id : 9]
Input [2]: [cs_sold_date_sk#18, cs_item_sk#19]

(29) Filter [codegen id : 9]
Input [2]: [cs_sold_date_sk#18, cs_item_sk#19]
Condition : (isnotnull(cs_item_sk#19) AND isnotnull(cs_sold_date_sk#18))

(30) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(31) ColumnarToRow [codegen id : 7]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(32) Filter [codegen id : 7]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : isnotnull(i_item_sk#6)

(33) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#20]

(34) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [i_item_sk#6]
Join condition: None

(35) Project [codegen id : 9]
Output [4]: [cs_sold_date_sk#18, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [6]: [cs_sold_date_sk#18, cs_item_sk#19, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(36) ReusedExchange [Reuses operator id: 22]
Output [1]: [d_date_sk#11]

(37) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#11]
Join condition: None

(38) Project [codegen id : 9]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [cs_sold_date_sk#18, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#11]

(39) Exchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9), 5), ENSURE_REQUIREMENTS, [id=#21]

(40) Sort [codegen id : 10]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: [coalesce(i_brand_id#7, 0) ASC NULLS FIRST, isnull(i_brand_id#7) ASC NULLS FIRST, coalesce(i_class_id#8, 0) ASC NULLS FIRST, isnull(i_class_id#8) ASC NULLS FIRST, coalesce(i_category_id#9, 0) ASC NULLS FIRST, isnull(i_category_id#9) ASC NULLS FIRST], false, 0

(41) SortMergeJoin
Left keys [6]: [coalesce(brand_id#14, 0), isnull(brand_id#14), coalesce(class_id#15, 0), isnull(class_id#15), coalesce(category_id#16, 0), isnull(category_id#16)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join condition: None

(42) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#22, ws_item_sk#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int>

(43) ColumnarToRow [codegen id : 13]
Input [2]: [ws_sold_date_sk#22, ws_item_sk#23]

(44) Filter [codegen id : 13]
Input [2]: [ws_sold_date_sk#22, ws_item_sk#23]
Condition : (isnotnull(ws_item_sk#23) AND isnotnull(ws_sold_date_sk#22))

(45) ReusedExchange [Reuses operator id: 33]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(46) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ws_item_sk#23]
Right keys [1]: [i_item_sk#6]
Join condition: None

(47) Project [codegen id : 13]
Output [4]: [ws_sold_date_sk#22, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [6]: [ws_sold_date_sk#22, ws_item_sk#23, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(48) ReusedExchange [Reuses operator id: 22]
Output [1]: [d_date_sk#11]

(49) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ws_sold_date_sk#22]
Right keys [1]: [d_date_sk#11]
Join condition: None

(50) Project [codegen id : 13]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [ws_sold_date_sk#22, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#11]

(51) Exchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9), 5), ENSURE_REQUIREMENTS, [id=#24]

(52) Sort [codegen id : 14]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: [coalesce(i_brand_id#7, 0) ASC NULLS FIRST, isnull(i_brand_id#7) ASC NULLS FIRST, coalesce(i_class_id#8, 0) ASC NULLS FIRST, isnull(i_class_id#8) ASC NULLS FIRST, coalesce(i_category_id#9, 0) ASC NULLS FIRST, isnull(i_category_id#9) ASC NULLS FIRST], false, 0

(53) SortMergeJoin
Left keys [6]: [coalesce(brand_id#14, 0), isnull(brand_id#14), coalesce(class_id#15, 0), isnull(class_id#15), coalesce(category_id#16, 0), isnull(category_id#16)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join condition: None

(54) HashAggregate [codegen id : 15]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(55) Exchange
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: hashpartitioning(brand_id#14, class_id#15, category_id#16, 5), ENSURE_REQUIREMENTS, [id=#25]

(56) HashAggregate [codegen id : 16]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(57) HashAggregate [codegen id : 16]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(58) HashAggregate [codegen id : 16]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(59) BroadcastExchange
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#26]

(60) BroadcastHashJoin [codegen id : 17]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#14, class_id#15, category_id#16]
Join condition: None

(61) Project [codegen id : 17]
Output [1]: [i_item_sk#6 AS ss_item_sk#27]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#14, class_id#15, category_id#16]

(62) Exchange
Input [1]: [ss_item_sk#27]
Arguments: hashpartitioning(ss_item_sk#27, 5), ENSURE_REQUIREMENTS, [id=#28]

(63) Sort [codegen id : 18]
Input [1]: [ss_item_sk#27]
Arguments: [ss_item_sk#27 ASC NULLS FIRST], false, 0

(64) SortMergeJoin
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [ss_item_sk#27]
Join condition: None

(65) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(66) ColumnarToRow [codegen id : 19]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(67) Filter [codegen id : 19]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : (((isnotnull(i_item_sk#6) AND isnotnull(i_brand_id#7)) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(68) Exchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(i_item_sk#6, 5), ENSURE_REQUIREMENTS, [id=#29]

(69) Sort [codegen id : 20]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: [i_item_sk#6 ASC NULLS FIRST], false, 0

(70) ReusedExchange [Reuses operator id: 62]
Output [1]: [ss_item_sk#27]

(71) Sort [codegen id : 36]
Input [1]: [ss_item_sk#27]
Arguments: [ss_item_sk#27 ASC NULLS FIRST], false, 0

(72) SortMergeJoin
Left keys [1]: [i_item_sk#6]
Right keys [1]: [ss_item_sk#27]
Join condition: None

(73) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#30]

(74) BroadcastHashJoin [codegen id : 38]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#6]
Join condition: None

(75) Project [codegen id : 38]
Output [6]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(76) Scan parquet default.date_dim
Output [2]: [d_date_sk#11, d_week_seq#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(77) ColumnarToRow [codegen id : 37]
Input [2]: [d_date_sk#11, d_week_seq#31]

(78) Filter [codegen id : 37]
Input [2]: [d_date_sk#11, d_week_seq#31]
Condition : ((isnotnull(d_week_seq#31) AND (d_week_seq#31 = Subquery scalar-subquery#32, [id=#33])) AND isnotnull(d_date_sk#11))

(79) Project [codegen id : 37]
Output [1]: [d_date_sk#11]
Input [2]: [d_date_sk#11, d_week_seq#31]

(80) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#34]

(81) BroadcastHashJoin [codegen id : 38]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#11]
Join condition: None

(82) Project [codegen id : 38]
Output [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#11]

(83) HashAggregate [codegen id : 38]
Input [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#35, isEmpty#36, count#37]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#38, isEmpty#39, count#40]

(84) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#38, isEmpty#39, count#40]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#41]

(85) HashAggregate [codegen id : 78]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#38, isEmpty#39, count#40]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#42, count(1)#43]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#42 AS sales#44, count(1)#43 AS number_sales#45, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#42 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#46]

(86) Filter [codegen id : 78]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#44, number_sales#45, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#46]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#46) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#46 as decimal(32,6)) > cast(Subquery scalar-subquery#47, [id=#48] as decimal(32,6))))

(87) Project [codegen id : 78]
Output [6]: [store AS channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sales#44, number_sales#45]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#44, number_sales#45, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#46]

(88) ReusedExchange [Reuses operator id: 4]
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]

(89) Sort [codegen id : 40]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Arguments: [ss_item_sk#2 ASC NULLS FIRST], false, 0

(90) ReusedExchange [Reuses operator id: 62]
Output [1]: [ss_item_sk#27]

(91) Sort [codegen id : 56]
Input [1]: [ss_item_sk#27]
Arguments: [ss_item_sk#27 ASC NULLS FIRST], false, 0

(92) SortMergeJoin
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [ss_item_sk#27]
Join condition: None

(93) ReusedExchange [Reuses operator id: 73]
Output [4]: [i_item_sk#50, i_brand_id#51, i_class_id#52, i_category_id#53]

(94) BroadcastHashJoin [codegen id : 76]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#50]
Join condition: None

(95) Project [codegen id : 76]
Output [6]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, i_brand_id#51, i_class_id#52, i_category_id#53]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4, i_item_sk#50, i_brand_id#51, i_class_id#52, i_category_id#53]

(96) Scan parquet default.date_dim
Output [2]: [d_date_sk#11, d_week_seq#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(97) ColumnarToRow [codegen id : 75]
Input [2]: [d_date_sk#11, d_week_seq#31]

(98) Filter [codegen id : 75]
Input [2]: [d_date_sk#11, d_week_seq#31]
Condition : ((isnotnull(d_week_seq#31) AND (d_week_seq#31 = Subquery scalar-subquery#54, [id=#55])) AND isnotnull(d_date_sk#11))

(99) Project [codegen id : 75]
Output [1]: [d_date_sk#11]
Input [2]: [d_date_sk#11, d_week_seq#31]

(100) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#56]

(101) BroadcastHashJoin [codegen id : 76]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#11]
Join condition: None

(102) Project [codegen id : 76]
Output [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#51, i_class_id#52, i_category_id#53]
Input [7]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, i_brand_id#51, i_class_id#52, i_category_id#53, d_date_sk#11]

(103) HashAggregate [codegen id : 76]
Input [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#51, i_class_id#52, i_category_id#53]
Keys [3]: [i_brand_id#51, i_class_id#52, i_category_id#53]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#57, isEmpty#58, count#59]
Results [6]: [i_brand_id#51, i_class_id#52, i_category_id#53, sum#60, isEmpty#61, count#62]

(104) Exchange
Input [6]: [i_brand_id#51, i_class_id#52, i_category_id#53, sum#60, isEmpty#61, count#62]
Arguments: hashpartitioning(i_brand_id#51, i_class_id#52, i_category_id#53, 5), ENSURE_REQUIREMENTS, [id=#63]

(105) HashAggregate [codegen id : 77]
Input [6]: [i_brand_id#51, i_class_id#52, i_category_id#53, sum#60, isEmpty#61, count#62]
Keys [3]: [i_brand_id#51, i_class_id#52, i_category_id#53]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#64, count(1)#65]
Results [6]: [i_brand_id#51, i_class_id#52, i_category_id#53, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#64 AS sales#66, count(1)#65 AS number_sales#67, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#64 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#68]

(106) Filter [codegen id : 77]
Input [6]: [i_brand_id#51, i_class_id#52, i_category_id#53, sales#66, number_sales#67, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#68]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#68) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#68 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#47, [id=#48] as decimal(32,6))))

(107) Project [codegen id : 77]
Output [6]: [store AS channel#69, i_brand_id#51, i_class_id#52, i_category_id#53, sales#66, number_sales#67]
Input [6]: [i_brand_id#51, i_class_id#52, i_category_id#53, sales#66, number_sales#67, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#68]

(108) BroadcastExchange
Input [6]: [channel#69, i_brand_id#51, i_class_id#52, i_category_id#53, sales#66, number_sales#67]
Arguments: HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true]),false), [id=#70]

(109) BroadcastHashJoin [codegen id : 78]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [i_brand_id#51, i_class_id#52, i_category_id#53]
Join condition: None

(110) TakeOrderedAndProject
Input [12]: [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sales#44, number_sales#45, channel#69, i_brand_id#51, i_class_id#52, i_category_id#53, sales#66, number_sales#67]
Arguments: 100, [i_brand_id#7 ASC NULLS FIRST, i_class_id#8 ASC NULLS FIRST, i_category_id#9 ASC NULLS FIRST], [channel#49, i_brand_id#7, i_class_id#8, i_category_id#9, sales#44, number_sales#45, channel#69, i_brand_id#51, i_class_id#52, i_category_id#53, sales#66, number_sales#67]

===== Subqueries =====

Subquery:1 Hosting operator id = 86 Hosting Expression = Subquery scalar-subquery#47, [id=#48]
* HashAggregate (136)
+- Exchange (135)
   +- * HashAggregate (134)
      +- Union (133)
         :- * Project (120)
         :  +- * BroadcastHashJoin Inner BuildRight (119)
         :     :- * Filter (113)
         :     :  +- * ColumnarToRow (112)
         :     :     +- Scan parquet default.store_sales (111)
         :     +- BroadcastExchange (118)
         :        +- * Project (117)
         :           +- * Filter (116)
         :              +- * ColumnarToRow (115)
         :                 +- Scan parquet default.date_dim (114)
         :- * Project (126)
         :  +- * BroadcastHashJoin Inner BuildRight (125)
         :     :- * Filter (123)
         :     :  +- * ColumnarToRow (122)
         :     :     +- Scan parquet default.catalog_sales (121)
         :     +- ReusedExchange (124)
         +- * Project (132)
            +- * BroadcastHashJoin Inner BuildRight (131)
               :- * Filter (129)
               :  +- * ColumnarToRow (128)
               :     +- Scan parquet default.web_sales (127)
               +- ReusedExchange (130)


(111) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(112) ColumnarToRow [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]

(113) Filter [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Condition : isnotnull(ss_sold_date_sk#1)

(114) Scan parquet default.date_dim
Output [2]: [d_date_sk#11, d_year#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(115) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#11, d_year#12]

(116) Filter [codegen id : 1]
Input [2]: [d_date_sk#11, d_year#12]
Condition : (((isnotnull(d_year#12) AND (d_year#12 >= 1998)) AND (d_year#12 <= 2000)) AND isnotnull(d_date_sk#11))

(117) Project [codegen id : 1]
Output [1]: [d_date_sk#11]
Input [2]: [d_date_sk#11, d_year#12]

(118) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#71]

(119) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#11]
Join condition: None

(120) Project [codegen id : 2]
Output [2]: [ss_quantity#3 AS quantity#72, ss_list_price#4 AS list_price#73]
Input [4]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, d_date_sk#11]

(121) Scan parquet default.catalog_sales
Output [3]: [cs_sold_date_sk#18, cs_quantity#74, cs_list_price#75]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(122) ColumnarToRow [codegen id : 4]
Input [3]: [cs_sold_date_sk#18, cs_quantity#74, cs_list_price#75]

(123) Filter [codegen id : 4]
Input [3]: [cs_sold_date_sk#18, cs_quantity#74, cs_list_price#75]
Condition : isnotnull(cs_sold_date_sk#18)

(124) ReusedExchange [Reuses operator id: 118]
Output [1]: [d_date_sk#11]

(125) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#11]
Join condition: None

(126) Project [codegen id : 4]
Output [2]: [cs_quantity#74 AS quantity#76, cs_list_price#75 AS list_price#77]
Input [4]: [cs_sold_date_sk#18, cs_quantity#74, cs_list_price#75, d_date_sk#11]

(127) Scan parquet default.web_sales
Output [3]: [ws_sold_date_sk#22, ws_quantity#78, ws_list_price#79]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(128) ColumnarToRow [codegen id : 6]
Input [3]: [ws_sold_date_sk#22, ws_quantity#78, ws_list_price#79]

(129) Filter [codegen id : 6]
Input [3]: [ws_sold_date_sk#22, ws_quantity#78, ws_list_price#79]
Condition : isnotnull(ws_sold_date_sk#22)

(130) ReusedExchange [Reuses operator id: 118]
Output [1]: [d_date_sk#11]

(131) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#22]
Right keys [1]: [d_date_sk#11]
Join condition: None

(132) Project [codegen id : 6]
Output [2]: [ws_quantity#78 AS quantity#80, ws_list_price#79 AS list_price#81]
Input [4]: [ws_sold_date_sk#22, ws_quantity#78, ws_list_price#79, d_date_sk#11]

(133) Union

(134) HashAggregate [codegen id : 7]
Input [2]: [quantity#72, list_price#73]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#72 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#73 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#82, count#83]
Results [2]: [sum#84, count#85]

(135) Exchange
Input [2]: [sum#84, count#85]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#86]

(136) HashAggregate [codegen id : 8]
Input [2]: [sum#84, count#85]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#72 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#73 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#72 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#73 as decimal(12,2)))), DecimalType(18,2), true))#87]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#72 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#73 as decimal(12,2)))), DecimalType(18,2), true))#87 AS average_sales#88]

Subquery:2 Hosting operator id = 78 Hosting Expression = Subquery scalar-subquery#32, [id=#33]
* Project (140)
+- * Filter (139)
   +- * ColumnarToRow (138)
      +- Scan parquet default.date_dim (137)


(137) Scan parquet default.date_dim
Output [4]: [d_week_seq#31, d_year#12, d_moy#89, d_dom#90]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), EqualTo(d_dom,16)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(138) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#31, d_year#12, d_moy#89, d_dom#90]

(139) Filter [codegen id : 1]
Input [4]: [d_week_seq#31, d_year#12, d_moy#89, d_dom#90]
Condition : (((((isnotnull(d_year#12) AND isnotnull(d_moy#89)) AND isnotnull(d_dom#90)) AND (d_year#12 = 1999)) AND (d_moy#89 = 12)) AND (d_dom#90 = 16))

(140) Project [codegen id : 1]
Output [1]: [d_week_seq#31]
Input [4]: [d_week_seq#31, d_year#12, d_moy#89, d_dom#90]

Subquery:3 Hosting operator id = 106 Hosting Expression = ReusedSubquery Subquery scalar-subquery#47, [id=#48]

Subquery:4 Hosting operator id = 98 Hosting Expression = Subquery scalar-subquery#54, [id=#55]
* Project (144)
+- * Filter (143)
   +- * ColumnarToRow (142)
      +- Scan parquet default.date_dim (141)


(141) Scan parquet default.date_dim
Output [4]: [d_week_seq#31, d_year#12, d_moy#89, d_dom#90]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1998), EqualTo(d_moy,12), EqualTo(d_dom,16)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(142) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#31, d_year#12, d_moy#89, d_dom#90]

(143) Filter [codegen id : 1]
Input [4]: [d_week_seq#31, d_year#12, d_moy#89, d_dom#90]
Condition : (((((isnotnull(d_year#12) AND isnotnull(d_moy#89)) AND isnotnull(d_dom#90)) AND (d_year#12 = 1998)) AND (d_moy#89 = 12)) AND (d_dom#90 = 16))

(144) Project [codegen id : 1]
Output [1]: [d_week_seq#31]
Input [4]: [d_week_seq#31, d_year#12, d_moy#89, d_dom#90]


