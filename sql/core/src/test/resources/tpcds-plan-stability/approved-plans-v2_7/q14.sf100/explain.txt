== Physical Plan ==
TakeOrderedAndProject (113)
+- * BroadcastHashJoin Inner BuildRight (112)
   :- * Project (87)
   :  +- * Filter (86)
   :     +- * HashAggregate (85)
   :        +- Exchange (84)
   :           +- * HashAggregate (83)
   :              +- * Project (82)
   :                 +- * BroadcastHashJoin Inner BuildRight (81)
   :                    :- * Project (71)
   :                    :  +- * BroadcastHashJoin Inner BuildRight (70)
   :                    :     :- SortMergeJoin LeftSemi (64)
   :                    :     :  :- * Sort (5)
   :                    :     :  :  +- Exchange (4)
   :                    :     :  :     +- * Filter (3)
   :                    :     :  :        +- * ColumnarToRow (2)
   :                    :     :  :           +- Scan parquet default.store_sales (1)
   :                    :     :  +- * Sort (63)
   :                    :     :     +- Exchange (62)
   :                    :     :        +- * Project (61)
   :                    :     :           +- * BroadcastHashJoin Inner BuildRight (60)
   :                    :     :              :- * Filter (8)
   :                    :     :              :  +- * ColumnarToRow (7)
   :                    :     :              :     +- Scan parquet default.item (6)
   :                    :     :              +- BroadcastExchange (59)
   :                    :     :                 +- * HashAggregate (58)
   :                    :     :                    +- Exchange (57)
   :                    :     :                       +- * HashAggregate (56)
   :                    :     :                          +- * Project (55)
   :                    :     :                             +- * BroadcastHashJoin Inner BuildRight (54)
   :                    :     :                                :- * Project (18)
   :                    :     :                                :  +- * BroadcastHashJoin Inner BuildRight (17)
   :                    :     :                                :     :- * Filter (11)
   :                    :     :                                :     :  +- * ColumnarToRow (10)
   :                    :     :                                :     :     +- Scan parquet default.store_sales (9)
   :                    :     :                                :     +- BroadcastExchange (16)
   :                    :     :                                :        +- * Project (15)
   :                    :     :                                :           +- * Filter (14)
   :                    :     :                                :              +- * ColumnarToRow (13)
   :                    :     :                                :                 +- Scan parquet default.date_dim (12)
   :                    :     :                                +- BroadcastExchange (53)
   :                    :     :                                   +- * BroadcastHashJoin LeftSemi BuildRight (52)
   :                    :     :                                      :- * BroadcastHashJoin LeftSemi BuildRight (38)
   :                    :     :                                      :  :- * Filter (21)
   :                    :     :                                      :  :  +- * ColumnarToRow (20)
   :                    :     :                                      :  :     +- Scan parquet default.item (19)
   :                    :     :                                      :  +- BroadcastExchange (37)
   :                    :     :                                      :     +- * HashAggregate (36)
   :                    :     :                                      :        +- Exchange (35)
   :                    :     :                                      :           +- * HashAggregate (34)
   :                    :     :                                      :              +- * Project (33)
   :                    :     :                                      :                 +- * BroadcastHashJoin Inner BuildRight (32)
   :                    :     :                                      :                    :- * Project (27)
   :                    :     :                                      :                    :  +- * BroadcastHashJoin Inner BuildRight (26)
   :                    :     :                                      :                    :     :- * Filter (24)
   :                    :     :                                      :                    :     :  +- * ColumnarToRow (23)
   :                    :     :                                      :                    :     :     +- Scan parquet default.catalog_sales (22)
   :                    :     :                                      :                    :     +- ReusedExchange (25)
   :                    :     :                                      :                    +- BroadcastExchange (31)
   :                    :     :                                      :                       +- * Filter (30)
   :                    :     :                                      :                          +- * ColumnarToRow (29)
   :                    :     :                                      :                             +- Scan parquet default.item (28)
   :                    :     :                                      +- BroadcastExchange (51)
   :                    :     :                                         +- * HashAggregate (50)
   :                    :     :                                            +- Exchange (49)
   :                    :     :                                               +- * HashAggregate (48)
   :                    :     :                                                  +- * Project (47)
   :                    :     :                                                     +- * BroadcastHashJoin Inner BuildRight (46)
   :                    :     :                                                        :- * Project (44)
   :                    :     :                                                        :  +- * BroadcastHashJoin Inner BuildRight (43)
   :                    :     :                                                        :     :- * Filter (41)
   :                    :     :                                                        :     :  +- * ColumnarToRow (40)
   :                    :     :                                                        :     :     +- Scan parquet default.web_sales (39)
   :                    :     :                                                        :     +- ReusedExchange (42)
   :                    :     :                                                        +- ReusedExchange (45)
   :                    :     +- BroadcastExchange (69)
   :                    :        +- * Project (68)
   :                    :           +- * Filter (67)
   :                    :              +- * ColumnarToRow (66)
   :                    :                 +- Scan parquet default.date_dim (65)
   :                    +- BroadcastExchange (80)
   :                       +- SortMergeJoin LeftSemi (79)
   :                          :- * Sort (76)
   :                          :  +- Exchange (75)
   :                          :     +- * Filter (74)
   :                          :        +- * ColumnarToRow (73)
   :                          :           +- Scan parquet default.item (72)
   :                          +- * Sort (78)
   :                             +- ReusedExchange (77)
   +- BroadcastExchange (111)
      +- * Project (110)
         +- * Filter (109)
            +- * HashAggregate (108)
               +- Exchange (107)
                  +- * HashAggregate (106)
                     +- * Project (105)
                        +- * BroadcastHashJoin Inner BuildRight (104)
                           :- * Project (102)
                           :  +- * BroadcastHashJoin Inner BuildRight (101)
                           :     :- SortMergeJoin LeftSemi (95)
                           :     :  :- * Sort (92)
                           :     :  :  +- Exchange (91)
                           :     :  :     +- * Filter (90)
                           :     :  :        +- * ColumnarToRow (89)
                           :     :  :           +- Scan parquet default.store_sales (88)
                           :     :  +- * Sort (94)
                           :     :     +- ReusedExchange (93)
                           :     +- BroadcastExchange (100)
                           :        +- * Project (99)
                           :           +- * Filter (98)
                           :              +- * ColumnarToRow (97)
                           :                 +- Scan parquet default.date_dim (96)
                           +- ReusedExchange (103)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 15]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(8) Filter [codegen id : 15]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(9) Scan parquet default.store_sales
Output [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(10) ColumnarToRow [codegen id : 13]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]

(11) Filter [codegen id : 13]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Condition : isnotnull(ss_item_sk#11)

(12) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(13) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#14, d_year#15]

(14) Filter [codegen id : 3]
Input [2]: [d_date_sk#14, d_year#15]
Condition : (((isnotnull(d_year#15) AND (d_year#15 >= 1998)) AND (d_year#15 <= 2000)) AND isnotnull(d_date_sk#14))

(15) Project [codegen id : 3]
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#15]

(16) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(17) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_sold_date_sk#12]
Right keys [1]: [d_date_sk#14]
Join condition: None

(18) Project [codegen id : 13]
Output [1]: [ss_item_sk#11]
Input [3]: [ss_item_sk#11, ss_sold_date_sk#12, d_date_sk#14]

(19) Scan parquet default.item
Output [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(20) ColumnarToRow [codegen id : 12]
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]

(21) Filter [codegen id : 12]
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Condition : (((isnotnull(i_item_sk#17) AND isnotnull(i_brand_id#18)) AND isnotnull(i_class_id#19)) AND isnotnull(i_category_id#20))

(22) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#21, cs_sold_date_sk#22]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#22), dynamicpruningexpression(cs_sold_date_sk#22 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(23) ColumnarToRow [codegen id : 6]
Input [2]: [cs_item_sk#21, cs_sold_date_sk#22]

(24) Filter [codegen id : 6]
Input [2]: [cs_item_sk#21, cs_sold_date_sk#22]
Condition : isnotnull(cs_item_sk#21)

(25) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#23]

(26) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#22]
Right keys [1]: [d_date_sk#23]
Join condition: None

(27) Project [codegen id : 6]
Output [1]: [cs_item_sk#21]
Input [3]: [cs_item_sk#21, cs_sold_date_sk#22, d_date_sk#23]

(28) Scan parquet default.item
Output [4]: [i_item_sk#24, i_brand_id#25, i_class_id#26, i_category_id#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(29) ColumnarToRow [codegen id : 5]
Input [4]: [i_item_sk#24, i_brand_id#25, i_class_id#26, i_category_id#27]

(30) Filter [codegen id : 5]
Input [4]: [i_item_sk#24, i_brand_id#25, i_class_id#26, i_category_id#27]
Condition : isnotnull(i_item_sk#24)

(31) BroadcastExchange
Input [4]: [i_item_sk#24, i_brand_id#25, i_class_id#26, i_category_id#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28]

(32) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_item_sk#21]
Right keys [1]: [i_item_sk#24]
Join condition: None

(33) Project [codegen id : 6]
Output [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]
Input [5]: [cs_item_sk#21, i_item_sk#24, i_brand_id#25, i_class_id#26, i_category_id#27]

(34) HashAggregate [codegen id : 6]
Input [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]
Keys [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]

(35) Exchange
Input [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]
Arguments: hashpartitioning(i_brand_id#25, i_class_id#26, i_category_id#27, 5), ENSURE_REQUIREMENTS, [id=#29]

(36) HashAggregate [codegen id : 7]
Input [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]
Keys [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]

(37) BroadcastExchange
Input [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#30]

(38) BroadcastHashJoin [codegen id : 12]
Left keys [6]: [coalesce(i_brand_id#18, 0), isnull(i_brand_id#18), coalesce(i_class_id#19, 0), isnull(i_class_id#19), coalesce(i_category_id#20, 0), isnull(i_category_id#20)]
Right keys [6]: [coalesce(i_brand_id#25, 0), isnull(i_brand_id#25), coalesce(i_class_id#26, 0), isnull(i_class_id#26), coalesce(i_category_id#27, 0), isnull(i_category_id#27)]
Join condition: None

(39) Scan parquet default.web_sales
Output [2]: [ws_item_sk#31, ws_sold_date_sk#32]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#32), dynamicpruningexpression(ws_sold_date_sk#32 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(40) ColumnarToRow [codegen id : 10]
Input [2]: [ws_item_sk#31, ws_sold_date_sk#32]

(41) Filter [codegen id : 10]
Input [2]: [ws_item_sk#31, ws_sold_date_sk#32]
Condition : isnotnull(ws_item_sk#31)

(42) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#33]

(43) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_sold_date_sk#32]
Right keys [1]: [d_date_sk#33]
Join condition: None

(44) Project [codegen id : 10]
Output [1]: [ws_item_sk#31]
Input [3]: [ws_item_sk#31, ws_sold_date_sk#32, d_date_sk#33]

(45) ReusedExchange [Reuses operator id: 31]
Output [4]: [i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]

(46) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_item_sk#31]
Right keys [1]: [i_item_sk#34]
Join condition: None

(47) Project [codegen id : 10]
Output [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Input [5]: [ws_item_sk#31, i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]

(48) HashAggregate [codegen id : 10]
Input [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Keys [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]

(49) Exchange
Input [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Arguments: hashpartitioning(i_brand_id#35, i_class_id#36, i_category_id#37, 5), ENSURE_REQUIREMENTS, [id=#38]

(50) HashAggregate [codegen id : 11]
Input [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Keys [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]

(51) BroadcastExchange
Input [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#39]

(52) BroadcastHashJoin [codegen id : 12]
Left keys [6]: [coalesce(i_brand_id#18, 0), isnull(i_brand_id#18), coalesce(i_class_id#19, 0), isnull(i_class_id#19), coalesce(i_category_id#20, 0), isnull(i_category_id#20)]
Right keys [6]: [coalesce(i_brand_id#35, 0), isnull(i_brand_id#35), coalesce(i_class_id#36, 0), isnull(i_class_id#36), coalesce(i_category_id#37, 0), isnull(i_category_id#37)]
Join condition: None

(53) BroadcastExchange
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#40]

(54) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_item_sk#11]
Right keys [1]: [i_item_sk#17]
Join condition: None

(55) Project [codegen id : 13]
Output [3]: [i_brand_id#18 AS brand_id#41, i_class_id#19 AS class_id#42, i_category_id#20 AS category_id#43]
Input [5]: [ss_item_sk#11, i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]

(56) HashAggregate [codegen id : 13]
Input [3]: [brand_id#41, class_id#42, category_id#43]
Keys [3]: [brand_id#41, class_id#42, category_id#43]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#41, class_id#42, category_id#43]

(57) Exchange
Input [3]: [brand_id#41, class_id#42, category_id#43]
Arguments: hashpartitioning(brand_id#41, class_id#42, category_id#43, 5), ENSURE_REQUIREMENTS, [id=#44]

(58) HashAggregate [codegen id : 14]
Input [3]: [brand_id#41, class_id#42, category_id#43]
Keys [3]: [brand_id#41, class_id#42, category_id#43]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#41, class_id#42, category_id#43]

(59) BroadcastExchange
Input [3]: [brand_id#41, class_id#42, category_id#43]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#45]

(60) BroadcastHashJoin [codegen id : 15]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#41, class_id#42, category_id#43]
Join condition: None

(61) Project [codegen id : 15]
Output [1]: [i_item_sk#7 AS ss_item_sk#46]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#41, class_id#42, category_id#43]

(62) Exchange
Input [1]: [ss_item_sk#46]
Arguments: hashpartitioning(ss_item_sk#46, 5), ENSURE_REQUIREMENTS, [id=#47]

(63) Sort [codegen id : 16]
Input [1]: [ss_item_sk#46]
Arguments: [ss_item_sk#46 ASC NULLS FIRST], false, 0

(64) SortMergeJoin
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#46]
Join condition: None

(65) Scan parquet default.date_dim
Output [2]: [d_date_sk#48, d_week_seq#49]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(66) ColumnarToRow [codegen id : 17]
Input [2]: [d_date_sk#48, d_week_seq#49]

(67) Filter [codegen id : 17]
Input [2]: [d_date_sk#48, d_week_seq#49]
Condition : ((isnotnull(d_week_seq#49) AND (d_week_seq#49 = Subquery scalar-subquery#50, [id=#51])) AND isnotnull(d_date_sk#48))

(68) Project [codegen id : 17]
Output [1]: [d_date_sk#48]
Input [2]: [d_date_sk#48, d_week_seq#49]

(69) BroadcastExchange
Input [1]: [d_date_sk#48]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#52]

(70) BroadcastHashJoin [codegen id : 34]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#48]
Join condition: None

(71) Project [codegen id : 34]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#48]

(72) Scan parquet default.item
Output [4]: [i_item_sk#53, i_brand_id#54, i_class_id#55, i_category_id#56]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(73) ColumnarToRow [codegen id : 18]
Input [4]: [i_item_sk#53, i_brand_id#54, i_class_id#55, i_category_id#56]

(74) Filter [codegen id : 18]
Input [4]: [i_item_sk#53, i_brand_id#54, i_class_id#55, i_category_id#56]
Condition : (((isnotnull(i_item_sk#53) AND isnotnull(i_brand_id#54)) AND isnotnull(i_class_id#55)) AND isnotnull(i_category_id#56))

(75) Exchange
Input [4]: [i_item_sk#53, i_brand_id#54, i_class_id#55, i_category_id#56]
Arguments: hashpartitioning(i_item_sk#53, 5), ENSURE_REQUIREMENTS, [id=#57]

(76) Sort [codegen id : 19]
Input [4]: [i_item_sk#53, i_brand_id#54, i_class_id#55, i_category_id#56]
Arguments: [i_item_sk#53 ASC NULLS FIRST], false, 0

(77) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#46]

(78) Sort [codegen id : 33]
Input [1]: [ss_item_sk#46]
Arguments: [ss_item_sk#46 ASC NULLS FIRST], false, 0

(79) SortMergeJoin
Left keys [1]: [i_item_sk#53]
Right keys [1]: [ss_item_sk#46]
Join condition: None

(80) BroadcastExchange
Input [4]: [i_item_sk#53, i_brand_id#54, i_class_id#55, i_category_id#56]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#58]

(81) BroadcastHashJoin [codegen id : 34]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#53]
Join condition: None

(82) Project [codegen id : 34]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#54, i_class_id#55, i_category_id#56]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#53, i_brand_id#54, i_class_id#55, i_category_id#56]

(83) HashAggregate [codegen id : 34]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#54, i_class_id#55, i_category_id#56]
Keys [3]: [i_brand_id#54, i_class_id#55, i_category_id#56]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#59, isEmpty#60, count#61]
Results [6]: [i_brand_id#54, i_class_id#55, i_category_id#56, sum#62, isEmpty#63, count#64]

(84) Exchange
Input [6]: [i_brand_id#54, i_class_id#55, i_category_id#56, sum#62, isEmpty#63, count#64]
Arguments: hashpartitioning(i_brand_id#54, i_class_id#55, i_category_id#56, 5), ENSURE_REQUIREMENTS, [id=#65]

(85) HashAggregate [codegen id : 70]
Input [6]: [i_brand_id#54, i_class_id#55, i_category_id#56, sum#62, isEmpty#63, count#64]
Keys [3]: [i_brand_id#54, i_class_id#55, i_category_id#56]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#66, count(1)#67]
Results [6]: [i_brand_id#54, i_class_id#55, i_category_id#56, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#66 AS sales#68, count(1)#67 AS number_sales#69, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#66 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#70]

(86) Filter [codegen id : 70]
Input [6]: [i_brand_id#54, i_class_id#55, i_category_id#56, sales#68, number_sales#69, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#70]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#70) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#70 as decimal(32,6)) > cast(Subquery scalar-subquery#71, [id=#72] as decimal(32,6))))

(87) Project [codegen id : 70]
Output [6]: [store AS channel#73, i_brand_id#54, i_class_id#55, i_category_id#56, sales#68, number_sales#69]
Input [6]: [i_brand_id#54, i_class_id#55, i_category_id#56, sales#68, number_sales#69, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#70]

(88) Scan parquet default.store_sales
Output [4]: [ss_item_sk#74, ss_quantity#75, ss_list_price#76, ss_sold_date_sk#77]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#77), dynamicpruningexpression(ss_sold_date_sk#77 IN dynamicpruning#78)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(89) ColumnarToRow [codegen id : 35]
Input [4]: [ss_item_sk#74, ss_quantity#75, ss_list_price#76, ss_sold_date_sk#77]

(90) Filter [codegen id : 35]
Input [4]: [ss_item_sk#74, ss_quantity#75, ss_list_price#76, ss_sold_date_sk#77]
Condition : isnotnull(ss_item_sk#74)

(91) Exchange
Input [4]: [ss_item_sk#74, ss_quantity#75, ss_list_price#76, ss_sold_date_sk#77]
Arguments: hashpartitioning(ss_item_sk#74, 5), ENSURE_REQUIREMENTS, [id=#79]

(92) Sort [codegen id : 36]
Input [4]: [ss_item_sk#74, ss_quantity#75, ss_list_price#76, ss_sold_date_sk#77]
Arguments: [ss_item_sk#74 ASC NULLS FIRST], false, 0

(93) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#46]

(94) Sort [codegen id : 50]
Input [1]: [ss_item_sk#46]
Arguments: [ss_item_sk#46 ASC NULLS FIRST], false, 0

(95) SortMergeJoin
Left keys [1]: [ss_item_sk#74]
Right keys [1]: [ss_item_sk#46]
Join condition: None

(96) Scan parquet default.date_dim
Output [2]: [d_date_sk#80, d_week_seq#81]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(97) ColumnarToRow [codegen id : 51]
Input [2]: [d_date_sk#80, d_week_seq#81]

(98) Filter [codegen id : 51]
Input [2]: [d_date_sk#80, d_week_seq#81]
Condition : ((isnotnull(d_week_seq#81) AND (d_week_seq#81 = Subquery scalar-subquery#82, [id=#83])) AND isnotnull(d_date_sk#80))

(99) Project [codegen id : 51]
Output [1]: [d_date_sk#80]
Input [2]: [d_date_sk#80, d_week_seq#81]

(100) BroadcastExchange
Input [1]: [d_date_sk#80]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#84]

(101) BroadcastHashJoin [codegen id : 68]
Left keys [1]: [ss_sold_date_sk#77]
Right keys [1]: [d_date_sk#80]
Join condition: None

(102) Project [codegen id : 68]
Output [3]: [ss_item_sk#74, ss_quantity#75, ss_list_price#76]
Input [5]: [ss_item_sk#74, ss_quantity#75, ss_list_price#76, ss_sold_date_sk#77, d_date_sk#80]

(103) ReusedExchange [Reuses operator id: 80]
Output [4]: [i_item_sk#85, i_brand_id#86, i_class_id#87, i_category_id#88]

(104) BroadcastHashJoin [codegen id : 68]
Left keys [1]: [ss_item_sk#74]
Right keys [1]: [i_item_sk#85]
Join condition: None

(105) Project [codegen id : 68]
Output [5]: [ss_quantity#75, ss_list_price#76, i_brand_id#86, i_class_id#87, i_category_id#88]
Input [7]: [ss_item_sk#74, ss_quantity#75, ss_list_price#76, i_item_sk#85, i_brand_id#86, i_class_id#87, i_category_id#88]

(106) HashAggregate [codegen id : 68]
Input [5]: [ss_quantity#75, ss_list_price#76, i_brand_id#86, i_class_id#87, i_category_id#88]
Keys [3]: [i_brand_id#86, i_class_id#87, i_category_id#88]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#75 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#76 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#89, isEmpty#90, count#91]
Results [6]: [i_brand_id#86, i_class_id#87, i_category_id#88, sum#92, isEmpty#93, count#94]

(107) Exchange
Input [6]: [i_brand_id#86, i_class_id#87, i_category_id#88, sum#92, isEmpty#93, count#94]
Arguments: hashpartitioning(i_brand_id#86, i_class_id#87, i_category_id#88, 5), ENSURE_REQUIREMENTS, [id=#95]

(108) HashAggregate [codegen id : 69]
Input [6]: [i_brand_id#86, i_class_id#87, i_category_id#88, sum#92, isEmpty#93, count#94]
Keys [3]: [i_brand_id#86, i_class_id#87, i_category_id#88]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#75 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#76 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#75 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#76 as decimal(12,2)))), DecimalType(18,2), true))#96, count(1)#97]
Results [6]: [i_brand_id#86, i_class_id#87, i_category_id#88, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#75 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#76 as decimal(12,2)))), DecimalType(18,2), true))#96 AS sales#98, count(1)#97 AS number_sales#99, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#75 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#76 as decimal(12,2)))), DecimalType(18,2), true))#96 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#75 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#76 as decimal(12,2)))), DecimalType(18,2), true))#100]

(109) Filter [codegen id : 69]
Input [6]: [i_brand_id#86, i_class_id#87, i_category_id#88, sales#98, number_sales#99, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#75 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#76 as decimal(12,2)))), DecimalType(18,2), true))#100]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#75 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#76 as decimal(12,2)))), DecimalType(18,2), true))#100) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#75 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#76 as decimal(12,2)))), DecimalType(18,2), true))#100 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#71, [id=#72] as decimal(32,6))))

(110) Project [codegen id : 69]
Output [6]: [store AS channel#101, i_brand_id#86, i_class_id#87, i_category_id#88, sales#98, number_sales#99]
Input [6]: [i_brand_id#86, i_class_id#87, i_category_id#88, sales#98, number_sales#99, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#75 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#76 as decimal(12,2)))), DecimalType(18,2), true))#100]

(111) BroadcastExchange
Input [6]: [channel#101, i_brand_id#86, i_class_id#87, i_category_id#88, sales#98, number_sales#99]
Arguments: HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true]),false), [id=#102]

(112) BroadcastHashJoin [codegen id : 70]
Left keys [3]: [i_brand_id#54, i_class_id#55, i_category_id#56]
Right keys [3]: [i_brand_id#86, i_class_id#87, i_category_id#88]
Join condition: None

(113) TakeOrderedAndProject
Input [12]: [channel#73, i_brand_id#54, i_class_id#55, i_category_id#56, sales#68, number_sales#69, channel#101, i_brand_id#86, i_class_id#87, i_category_id#88, sales#98, number_sales#99]
Arguments: 100, [i_brand_id#54 ASC NULLS FIRST, i_class_id#55 ASC NULLS FIRST, i_category_id#56 ASC NULLS FIRST], [channel#73, i_brand_id#54, i_class_id#55, i_category_id#56, sales#68, number_sales#69, channel#101, i_brand_id#86, i_class_id#87, i_category_id#88, sales#98, number_sales#99]

===== Subqueries =====

Subquery:1 Hosting operator id = 86 Hosting Expression = Subquery scalar-subquery#71, [id=#72]
* HashAggregate (136)
+- Exchange (135)
   +- * HashAggregate (134)
      +- Union (133)
         :- * Project (122)
         :  +- * BroadcastHashJoin Inner BuildRight (121)
         :     :- * ColumnarToRow (115)
         :     :  +- Scan parquet default.store_sales (114)
         :     +- BroadcastExchange (120)
         :        +- * Project (119)
         :           +- * Filter (118)
         :              +- * ColumnarToRow (117)
         :                 +- Scan parquet default.date_dim (116)
         :- * Project (127)
         :  +- * BroadcastHashJoin Inner BuildRight (126)
         :     :- * ColumnarToRow (124)
         :     :  +- Scan parquet default.catalog_sales (123)
         :     +- ReusedExchange (125)
         +- * Project (132)
            +- * BroadcastHashJoin Inner BuildRight (131)
               :- * ColumnarToRow (129)
               :  +- Scan parquet default.web_sales (128)
               +- ReusedExchange (130)


(114) Scan parquet default.store_sales
Output [3]: [ss_quantity#103, ss_list_price#104, ss_sold_date_sk#105]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#105), dynamicpruningexpression(ss_sold_date_sk#105 IN dynamicpruning#106)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(115) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#103, ss_list_price#104, ss_sold_date_sk#105]

(116) Scan parquet default.date_dim
Output [2]: [d_date_sk#107, d_year#108]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(117) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#107, d_year#108]

(118) Filter [codegen id : 1]
Input [2]: [d_date_sk#107, d_year#108]
Condition : (((isnotnull(d_year#108) AND (d_year#108 >= 1998)) AND (d_year#108 <= 2000)) AND isnotnull(d_date_sk#107))

(119) Project [codegen id : 1]
Output [1]: [d_date_sk#107]
Input [2]: [d_date_sk#107, d_year#108]

(120) BroadcastExchange
Input [1]: [d_date_sk#107]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#109]

(121) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#105]
Right keys [1]: [d_date_sk#107]
Join condition: None

(122) Project [codegen id : 2]
Output [2]: [ss_quantity#103 AS quantity#110, ss_list_price#104 AS list_price#111]
Input [4]: [ss_quantity#103, ss_list_price#104, ss_sold_date_sk#105, d_date_sk#107]

(123) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#112, cs_list_price#113, cs_sold_date_sk#114]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#114), dynamicpruningexpression(cs_sold_date_sk#114 IN dynamicpruning#106)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(124) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#112, cs_list_price#113, cs_sold_date_sk#114]

(125) ReusedExchange [Reuses operator id: 120]
Output [1]: [d_date_sk#115]

(126) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#114]
Right keys [1]: [d_date_sk#115]
Join condition: None

(127) Project [codegen id : 4]
Output [2]: [cs_quantity#112 AS quantity#116, cs_list_price#113 AS list_price#117]
Input [4]: [cs_quantity#112, cs_list_price#113, cs_sold_date_sk#114, d_date_sk#115]

(128) Scan parquet default.web_sales
Output [3]: [ws_quantity#118, ws_list_price#119, ws_sold_date_sk#120]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#120), dynamicpruningexpression(ws_sold_date_sk#120 IN dynamicpruning#106)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(129) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#118, ws_list_price#119, ws_sold_date_sk#120]

(130) ReusedExchange [Reuses operator id: 120]
Output [1]: [d_date_sk#121]

(131) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#120]
Right keys [1]: [d_date_sk#121]
Join condition: None

(132) Project [codegen id : 6]
Output [2]: [ws_quantity#118 AS quantity#122, ws_list_price#119 AS list_price#123]
Input [4]: [ws_quantity#118, ws_list_price#119, ws_sold_date_sk#120, d_date_sk#121]

(133) Union

(134) HashAggregate [codegen id : 7]
Input [2]: [quantity#110, list_price#111]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#110 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#111 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#124, count#125]
Results [2]: [sum#126, count#127]

(135) Exchange
Input [2]: [sum#126, count#127]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#128]

(136) HashAggregate [codegen id : 8]
Input [2]: [sum#126, count#127]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#110 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#111 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#110 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#111 as decimal(12,2)))), DecimalType(18,2), true))#129]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#110 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#111 as decimal(12,2)))), DecimalType(18,2), true))#129 AS average_sales#130]

Subquery:2 Hosting operator id = 114 Hosting Expression = ss_sold_date_sk#105 IN dynamicpruning#106
ReusedExchange (137)


(137) ReusedExchange [Reuses operator id: 120]
Output [1]: [d_date_sk#107]

Subquery:3 Hosting operator id = 123 Hosting Expression = cs_sold_date_sk#114 IN dynamicpruning#106

Subquery:4 Hosting operator id = 128 Hosting Expression = ws_sold_date_sk#120 IN dynamicpruning#106

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (138)


(138) ReusedExchange [Reuses operator id: 69]
Output [1]: [d_date_sk#48]

Subquery:6 Hosting operator id = 9 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#13
ReusedExchange (139)


(139) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#14]

Subquery:7 Hosting operator id = 22 Hosting Expression = cs_sold_date_sk#22 IN dynamicpruning#13

Subquery:8 Hosting operator id = 39 Hosting Expression = ws_sold_date_sk#32 IN dynamicpruning#13

Subquery:9 Hosting operator id = 67 Hosting Expression = Subquery scalar-subquery#50, [id=#51]
* Project (143)
+- * Filter (142)
   +- * ColumnarToRow (141)
      +- Scan parquet default.date_dim (140)


(140) Scan parquet default.date_dim
Output [4]: [d_week_seq#131, d_year#132, d_moy#133, d_dom#134]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), EqualTo(d_dom,16)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(141) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#131, d_year#132, d_moy#133, d_dom#134]

(142) Filter [codegen id : 1]
Input [4]: [d_week_seq#131, d_year#132, d_moy#133, d_dom#134]
Condition : (((((isnotnull(d_year#132) AND isnotnull(d_moy#133)) AND isnotnull(d_dom#134)) AND (d_year#132 = 1999)) AND (d_moy#133 = 12)) AND (d_dom#134 = 16))

(143) Project [codegen id : 1]
Output [1]: [d_week_seq#131]
Input [4]: [d_week_seq#131, d_year#132, d_moy#133, d_dom#134]

Subquery:10 Hosting operator id = 109 Hosting Expression = ReusedSubquery Subquery scalar-subquery#71, [id=#72]

Subquery:11 Hosting operator id = 88 Hosting Expression = ss_sold_date_sk#77 IN dynamicpruning#78
ReusedExchange (144)


(144) ReusedExchange [Reuses operator id: 100]
Output [1]: [d_date_sk#80]

Subquery:12 Hosting operator id = 98 Hosting Expression = Subquery scalar-subquery#82, [id=#83]
* Project (148)
+- * Filter (147)
   +- * ColumnarToRow (146)
      +- Scan parquet default.date_dim (145)


(145) Scan parquet default.date_dim
Output [4]: [d_week_seq#135, d_year#136, d_moy#137, d_dom#138]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1998), EqualTo(d_moy,12), EqualTo(d_dom,16)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(146) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#135, d_year#136, d_moy#137, d_dom#138]

(147) Filter [codegen id : 1]
Input [4]: [d_week_seq#135, d_year#136, d_moy#137, d_dom#138]
Condition : (((((isnotnull(d_year#136) AND isnotnull(d_moy#137)) AND isnotnull(d_dom#138)) AND (d_year#136 = 1998)) AND (d_moy#137 = 12)) AND (d_dom#138 = 16))

(148) Project [codegen id : 1]
Output [1]: [d_week_seq#135]
Input [4]: [d_week_seq#135, d_year#136, d_moy#137, d_dom#138]


