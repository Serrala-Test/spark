== Physical Plan ==
TakeOrderedAndProject (96)
+- * BroadcastHashJoin Inner BuildRight (95)
   :- * Filter (76)
   :  +- * HashAggregate (75)
   :     +- Exchange (74)
   :        +- * HashAggregate (73)
   :           +- * Project (72)
   :              +- * BroadcastHashJoin Inner BuildRight (71)
   :                 :- * Project (61)
   :                 :  +- * BroadcastHashJoin Inner BuildRight (60)
   :                 :     :- * SortMergeJoin LeftSemi (58)
   :                 :     :  :- * Sort (4)
   :                 :     :  :  +- Exchange (3)
   :                 :     :  :     +- * ColumnarToRow (2)
   :                 :     :  :        +- Scan parquet default.store_sales (1)
   :                 :     :  +- * Sort (57)
   :                 :     :     +- Exchange (56)
   :                 :     :        +- * Project (55)
   :                 :     :           +- * BroadcastHashJoin Inner BuildRight (54)
   :                 :     :              :- * Filter (7)
   :                 :     :              :  +- * ColumnarToRow (6)
   :                 :     :              :     +- Scan parquet default.item (5)
   :                 :     :              +- BroadcastExchange (53)
   :                 :     :                 +- * HashAggregate (52)
   :                 :     :                    +- Exchange (51)
   :                 :     :                       +- * HashAggregate (50)
   :                 :     :                          +- * SortMergeJoin LeftSemi (49)
   :                 :     :                             :- * Sort (38)
   :                 :     :                             :  +- Exchange (37)
   :                 :     :                             :     +- * HashAggregate (36)
   :                 :     :                             :        +- Exchange (35)
   :                 :     :                             :           +- * HashAggregate (34)
   :                 :     :                             :              +- * Project (33)
   :                 :     :                             :                 +- * BroadcastHashJoin Inner BuildRight (32)
   :                 :     :                             :                    :- * Project (12)
   :                 :     :                             :                    :  +- * BroadcastHashJoin Inner BuildRight (11)
   :                 :     :                             :                    :     :- * ColumnarToRow (9)
   :                 :     :                             :                    :     :  +- Scan parquet default.store_sales (8)
   :                 :     :                             :                    :     +- ReusedExchange (10)
   :                 :     :                             :                    +- BroadcastExchange (31)
   :                 :     :                             :                       +- * SortMergeJoin LeftSemi (30)
   :                 :     :                             :                          :- * Sort (17)
   :                 :     :                             :                          :  +- Exchange (16)
   :                 :     :                             :                          :     +- * Filter (15)
   :                 :     :                             :                          :        +- * ColumnarToRow (14)
   :                 :     :                             :                          :           +- Scan parquet default.item (13)
   :                 :     :                             :                          +- * Sort (29)
   :                 :     :                             :                             +- Exchange (28)
   :                 :     :                             :                                +- * Project (27)
   :                 :     :                             :                                   +- * BroadcastHashJoin Inner BuildRight (26)
   :                 :     :                             :                                      :- * Project (22)
   :                 :     :                             :                                      :  +- * BroadcastHashJoin Inner BuildRight (21)
   :                 :     :                             :                                      :     :- * ColumnarToRow (19)
   :                 :     :                             :                                      :     :  +- Scan parquet default.catalog_sales (18)
   :                 :     :                             :                                      :     +- ReusedExchange (20)
   :                 :     :                             :                                      +- BroadcastExchange (25)
   :                 :     :                             :                                         +- * ColumnarToRow (24)
   :                 :     :                             :                                            +- Scan parquet default.item (23)
   :                 :     :                             +- * Sort (48)
   :                 :     :                                +- Exchange (47)
   :                 :     :                                   +- * Project (46)
   :                 :     :                                      +- * BroadcastHashJoin Inner BuildRight (45)
   :                 :     :                                         :- * Project (43)
   :                 :     :                                         :  +- * BroadcastHashJoin Inner BuildRight (42)
   :                 :     :                                         :     :- * ColumnarToRow (40)
   :                 :     :                                         :     :  +- Scan parquet default.web_sales (39)
   :                 :     :                                         :     +- ReusedExchange (41)
   :                 :     :                                         +- ReusedExchange (44)
   :                 :     +- ReusedExchange (59)
   :                 +- BroadcastExchange (70)
   :                    +- * SortMergeJoin LeftSemi (69)
   :                       :- * Sort (66)
   :                       :  +- Exchange (65)
   :                       :     +- * Filter (64)
   :                       :        +- * ColumnarToRow (63)
   :                       :           +- Scan parquet default.item (62)
   :                       +- * Sort (68)
   :                          +- ReusedExchange (67)
   +- BroadcastExchange (94)
      +- * Filter (93)
         +- * HashAggregate (92)
            +- Exchange (91)
               +- * HashAggregate (90)
                  +- * Project (89)
                     +- * BroadcastHashJoin Inner BuildRight (88)
                        :- * Project (86)
                        :  +- * BroadcastHashJoin Inner BuildRight (85)
                        :     :- * SortMergeJoin LeftSemi (83)
                        :     :  :- * Sort (80)
                        :     :  :  +- Exchange (79)
                        :     :  :     +- * ColumnarToRow (78)
                        :     :  :        +- Scan parquet default.store_sales (77)
                        :     :  +- * Sort (82)
                        :     :     +- ReusedExchange (81)
                        :     +- ReusedExchange (84)
                        +- ReusedExchange (87)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(4) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(5) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(6) ColumnarToRow [codegen id : 20]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(7) Filter [codegen id : 20]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(8) Scan parquet default.store_sales
Output [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
ReadSchema: struct<ss_item_sk:int>

(9) ColumnarToRow [codegen id : 11]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]

(10) ReusedExchange [Reuses operator id: 129]
Output [1]: [d_date_sk#14]

(11) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_sold_date_sk#12]
Right keys [1]: [d_date_sk#14]
Join condition: None

(12) Project [codegen id : 11]
Output [1]: [ss_item_sk#11]
Input [3]: [ss_item_sk#11, ss_sold_date_sk#12, d_date_sk#14]

(13) Scan parquet default.item
Output [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(14) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(15) Filter [codegen id : 4]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Condition : ((isnotnull(i_brand_id#16) AND isnotnull(i_class_id#17)) AND isnotnull(i_category_id#18))

(16) Exchange
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: hashpartitioning(coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18), 5), ENSURE_REQUIREMENTS, [id=#19]

(17) Sort [codegen id : 5]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: [coalesce(i_brand_id#16, 0) ASC NULLS FIRST, isnull(i_brand_id#16) ASC NULLS FIRST, coalesce(i_class_id#17, 0) ASC NULLS FIRST, isnull(i_class_id#17) ASC NULLS FIRST, coalesce(i_category_id#18, 0) ASC NULLS FIRST, isnull(i_category_id#18) ASC NULLS FIRST], false, 0

(18) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#20, cs_sold_date_sk#21]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#21), dynamicpruningexpression(cs_sold_date_sk#21 IN dynamicpruning#13)]
ReadSchema: struct<cs_item_sk:int>

(19) ColumnarToRow [codegen id : 8]
Input [2]: [cs_item_sk#20, cs_sold_date_sk#21]

(20) ReusedExchange [Reuses operator id: 129]
Output [1]: [d_date_sk#22]

(21) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#21]
Right keys [1]: [d_date_sk#22]
Join condition: None

(22) Project [codegen id : 8]
Output [1]: [cs_item_sk#20]
Input [3]: [cs_item_sk#20, cs_sold_date_sk#21, d_date_sk#22]

(23) Scan parquet default.item
Output [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(24) ColumnarToRow [codegen id : 7]
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]

(25) BroadcastExchange
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(26) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_item_sk#20]
Right keys [1]: [i_item_sk#23]
Join condition: None

(27) Project [codegen id : 8]
Output [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Input [5]: [cs_item_sk#20, i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]

(28) Exchange
Input [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: hashpartitioning(coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26), 5), ENSURE_REQUIREMENTS, [id=#28]

(29) Sort [codegen id : 9]
Input [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: [coalesce(i_brand_id#24, 0) ASC NULLS FIRST, isnull(i_brand_id#24) ASC NULLS FIRST, coalesce(i_class_id#25, 0) ASC NULLS FIRST, isnull(i_class_id#25) ASC NULLS FIRST, coalesce(i_category_id#26, 0) ASC NULLS FIRST, isnull(i_category_id#26) ASC NULLS FIRST], false, 0

(30) SortMergeJoin [codegen id : 10]
Left keys [6]: [coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18)]
Right keys [6]: [coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26)]
Join condition: None

(31) BroadcastExchange
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(32) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#11]
Right keys [1]: [i_item_sk#15]
Join condition: None

(33) Project [codegen id : 11]
Output [3]: [i_brand_id#16 AS brand_id#30, i_class_id#17 AS class_id#31, i_category_id#18 AS category_id#32]
Input [5]: [ss_item_sk#11, i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(34) HashAggregate [codegen id : 11]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(35) Exchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: hashpartitioning(brand_id#30, class_id#31, category_id#32, 5), ENSURE_REQUIREMENTS, [id=#33]

(36) HashAggregate [codegen id : 12]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(37) Exchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: hashpartitioning(coalesce(brand_id#30, 0), isnull(brand_id#30), coalesce(class_id#31, 0), isnull(class_id#31), coalesce(category_id#32, 0), isnull(category_id#32), 5), ENSURE_REQUIREMENTS, [id=#34]

(38) Sort [codegen id : 13]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: [coalesce(brand_id#30, 0) ASC NULLS FIRST, isnull(brand_id#30) ASC NULLS FIRST, coalesce(class_id#31, 0) ASC NULLS FIRST, isnull(class_id#31) ASC NULLS FIRST, coalesce(category_id#32, 0) ASC NULLS FIRST, isnull(category_id#32) ASC NULLS FIRST], false, 0

(39) Scan parquet default.web_sales
Output [2]: [ws_item_sk#35, ws_sold_date_sk#36]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#36), dynamicpruningexpression(ws_sold_date_sk#36 IN dynamicpruning#13)]
ReadSchema: struct<ws_item_sk:int>

(40) ColumnarToRow [codegen id : 16]
Input [2]: [ws_item_sk#35, ws_sold_date_sk#36]

(41) ReusedExchange [Reuses operator id: 129]
Output [1]: [d_date_sk#37]

(42) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_sold_date_sk#36]
Right keys [1]: [d_date_sk#37]
Join condition: None

(43) Project [codegen id : 16]
Output [1]: [ws_item_sk#35]
Input [3]: [ws_item_sk#35, ws_sold_date_sk#36, d_date_sk#37]

(44) ReusedExchange [Reuses operator id: 25]
Output [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(45) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_item_sk#35]
Right keys [1]: [i_item_sk#38]
Join condition: None

(46) Project [codegen id : 16]
Output [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Input [5]: [ws_item_sk#35, i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(47) Exchange
Input [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Arguments: hashpartitioning(coalesce(i_brand_id#39, 0), isnull(i_brand_id#39), coalesce(i_class_id#40, 0), isnull(i_class_id#40), coalesce(i_category_id#41, 0), isnull(i_category_id#41), 5), ENSURE_REQUIREMENTS, [id=#42]

(48) Sort [codegen id : 17]
Input [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Arguments: [coalesce(i_brand_id#39, 0) ASC NULLS FIRST, isnull(i_brand_id#39) ASC NULLS FIRST, coalesce(i_class_id#40, 0) ASC NULLS FIRST, isnull(i_class_id#40) ASC NULLS FIRST, coalesce(i_category_id#41, 0) ASC NULLS FIRST, isnull(i_category_id#41) ASC NULLS FIRST], false, 0

(49) SortMergeJoin [codegen id : 18]
Left keys [6]: [coalesce(brand_id#30, 0), isnull(brand_id#30), coalesce(class_id#31, 0), isnull(class_id#31), coalesce(category_id#32, 0), isnull(category_id#32)]
Right keys [6]: [coalesce(i_brand_id#39, 0), isnull(i_brand_id#39), coalesce(i_class_id#40, 0), isnull(i_class_id#40), coalesce(i_category_id#41, 0), isnull(i_category_id#41)]
Join condition: None

(50) HashAggregate [codegen id : 18]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(51) Exchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: hashpartitioning(brand_id#30, class_id#31, category_id#32, 5), ENSURE_REQUIREMENTS, [id=#43]

(52) HashAggregate [codegen id : 19]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(53) BroadcastExchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#44]

(54) BroadcastHashJoin [codegen id : 20]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#30, class_id#31, category_id#32]
Join condition: None

(55) Project [codegen id : 20]
Output [1]: [i_item_sk#7 AS ss_item_sk#45]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#30, class_id#31, category_id#32]

(56) Exchange
Input [1]: [ss_item_sk#45]
Arguments: hashpartitioning(ss_item_sk#45, 5), ENSURE_REQUIREMENTS, [id=#46]

(57) Sort [codegen id : 21]
Input [1]: [ss_item_sk#45]
Arguments: [ss_item_sk#45 ASC NULLS FIRST], false, 0

(58) SortMergeJoin [codegen id : 45]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#45]
Join condition: None

(59) ReusedExchange [Reuses operator id: 120]
Output [1]: [d_date_sk#47]

(60) BroadcastHashJoin [codegen id : 45]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#47]
Join condition: None

(61) Project [codegen id : 45]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#47]

(62) Scan parquet default.item
Output [4]: [i_item_sk#48, i_brand_id#49, i_class_id#50, i_category_id#51]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(63) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#48, i_brand_id#49, i_class_id#50, i_category_id#51]

(64) Filter [codegen id : 23]
Input [4]: [i_item_sk#48, i_brand_id#49, i_class_id#50, i_category_id#51]
Condition : ((isnotnull(i_brand_id#49) AND isnotnull(i_class_id#50)) AND isnotnull(i_category_id#51))

(65) Exchange
Input [4]: [i_item_sk#48, i_brand_id#49, i_class_id#50, i_category_id#51]
Arguments: hashpartitioning(i_item_sk#48, 5), ENSURE_REQUIREMENTS, [id=#52]

(66) Sort [codegen id : 24]
Input [4]: [i_item_sk#48, i_brand_id#49, i_class_id#50, i_category_id#51]
Arguments: [i_item_sk#48 ASC NULLS FIRST], false, 0

(67) ReusedExchange [Reuses operator id: 56]
Output [1]: [ss_item_sk#45]

(68) Sort [codegen id : 43]
Input [1]: [ss_item_sk#45]
Arguments: [ss_item_sk#45 ASC NULLS FIRST], false, 0

(69) SortMergeJoin [codegen id : 44]
Left keys [1]: [i_item_sk#48]
Right keys [1]: [ss_item_sk#45]
Join condition: None

(70) BroadcastExchange
Input [4]: [i_item_sk#48, i_brand_id#49, i_class_id#50, i_category_id#51]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#53]

(71) BroadcastHashJoin [codegen id : 45]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#48]
Join condition: None

(72) Project [codegen id : 45]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#49, i_class_id#50, i_category_id#51]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#48, i_brand_id#49, i_class_id#50, i_category_id#51]

(73) HashAggregate [codegen id : 45]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#49, i_class_id#50, i_category_id#51]
Keys [3]: [i_brand_id#49, i_class_id#50, i_category_id#51]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#54, isEmpty#55, count#56]
Results [6]: [i_brand_id#49, i_class_id#50, i_category_id#51, sum#57, isEmpty#58, count#59]

(74) Exchange
Input [6]: [i_brand_id#49, i_class_id#50, i_category_id#51, sum#57, isEmpty#58, count#59]
Arguments: hashpartitioning(i_brand_id#49, i_class_id#50, i_category_id#51, 5), ENSURE_REQUIREMENTS, [id=#60]

(75) HashAggregate [codegen id : 92]
Input [6]: [i_brand_id#49, i_class_id#50, i_category_id#51, sum#57, isEmpty#58, count#59]
Keys [3]: [i_brand_id#49, i_class_id#50, i_category_id#51]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#61, count(1)#62]
Results [6]: [store AS channel#63, i_brand_id#49, i_class_id#50, i_category_id#51, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#61 AS sales#64, count(1)#62 AS number_sales#65]

(76) Filter [codegen id : 92]
Input [6]: [channel#63, i_brand_id#49, i_class_id#50, i_category_id#51, sales#64, number_sales#65]
Condition : (isnotnull(sales#64) AND (cast(sales#64 as decimal(32,6)) > cast(Subquery scalar-subquery#66, [id=#67] as decimal(32,6))))

(77) Scan parquet default.store_sales
Output [4]: [ss_item_sk#68, ss_quantity#69, ss_list_price#70, ss_sold_date_sk#71]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#71), dynamicpruningexpression(ss_sold_date_sk#71 IN dynamicpruning#72)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(78) ColumnarToRow [codegen id : 46]
Input [4]: [ss_item_sk#68, ss_quantity#69, ss_list_price#70, ss_sold_date_sk#71]

(79) Exchange
Input [4]: [ss_item_sk#68, ss_quantity#69, ss_list_price#70, ss_sold_date_sk#71]
Arguments: hashpartitioning(ss_item_sk#68, 5), ENSURE_REQUIREMENTS, [id=#73]

(80) Sort [codegen id : 47]
Input [4]: [ss_item_sk#68, ss_quantity#69, ss_list_price#70, ss_sold_date_sk#71]
Arguments: [ss_item_sk#68 ASC NULLS FIRST], false, 0

(81) ReusedExchange [Reuses operator id: 56]
Output [1]: [ss_item_sk#45]

(82) Sort [codegen id : 66]
Input [1]: [ss_item_sk#45]
Arguments: [ss_item_sk#45 ASC NULLS FIRST], false, 0

(83) SortMergeJoin [codegen id : 90]
Left keys [1]: [ss_item_sk#68]
Right keys [1]: [ss_item_sk#45]
Join condition: None

(84) ReusedExchange [Reuses operator id: 134]
Output [1]: [d_date_sk#74]

(85) BroadcastHashJoin [codegen id : 90]
Left keys [1]: [ss_sold_date_sk#71]
Right keys [1]: [d_date_sk#74]
Join condition: None

(86) Project [codegen id : 90]
Output [3]: [ss_item_sk#68, ss_quantity#69, ss_list_price#70]
Input [5]: [ss_item_sk#68, ss_quantity#69, ss_list_price#70, ss_sold_date_sk#71, d_date_sk#74]

(87) ReusedExchange [Reuses operator id: 70]
Output [4]: [i_item_sk#75, i_brand_id#76, i_class_id#77, i_category_id#78]

(88) BroadcastHashJoin [codegen id : 90]
Left keys [1]: [ss_item_sk#68]
Right keys [1]: [i_item_sk#75]
Join condition: None

(89) Project [codegen id : 90]
Output [5]: [ss_quantity#69, ss_list_price#70, i_brand_id#76, i_class_id#77, i_category_id#78]
Input [7]: [ss_item_sk#68, ss_quantity#69, ss_list_price#70, i_item_sk#75, i_brand_id#76, i_class_id#77, i_category_id#78]

(90) HashAggregate [codegen id : 90]
Input [5]: [ss_quantity#69, ss_list_price#70, i_brand_id#76, i_class_id#77, i_category_id#78]
Keys [3]: [i_brand_id#76, i_class_id#77, i_category_id#78]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#69 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#70 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#79, isEmpty#80, count#81]
Results [6]: [i_brand_id#76, i_class_id#77, i_category_id#78, sum#82, isEmpty#83, count#84]

(91) Exchange
Input [6]: [i_brand_id#76, i_class_id#77, i_category_id#78, sum#82, isEmpty#83, count#84]
Arguments: hashpartitioning(i_brand_id#76, i_class_id#77, i_category_id#78, 5), ENSURE_REQUIREMENTS, [id=#85]

(92) HashAggregate [codegen id : 91]
Input [6]: [i_brand_id#76, i_class_id#77, i_category_id#78, sum#82, isEmpty#83, count#84]
Keys [3]: [i_brand_id#76, i_class_id#77, i_category_id#78]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#69 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#70 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#69 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#70 as decimal(12,2)))), DecimalType(18,2), true))#86, count(1)#87]
Results [6]: [store AS channel#88, i_brand_id#76, i_class_id#77, i_category_id#78, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#69 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#70 as decimal(12,2)))), DecimalType(18,2), true))#86 AS sales#89, count(1)#87 AS number_sales#90]

(93) Filter [codegen id : 91]
Input [6]: [channel#88, i_brand_id#76, i_class_id#77, i_category_id#78, sales#89, number_sales#90]
Condition : (isnotnull(sales#89) AND (cast(sales#89 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#66, [id=#67] as decimal(32,6))))

(94) BroadcastExchange
Input [6]: [channel#88, i_brand_id#76, i_class_id#77, i_category_id#78, sales#89, number_sales#90]
Arguments: HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true]),false), [id=#91]

(95) BroadcastHashJoin [codegen id : 92]
Left keys [3]: [i_brand_id#49, i_class_id#50, i_category_id#51]
Right keys [3]: [i_brand_id#76, i_class_id#77, i_category_id#78]
Join condition: None

(96) TakeOrderedAndProject
Input [12]: [channel#63, i_brand_id#49, i_class_id#50, i_category_id#51, sales#64, number_sales#65, channel#88, i_brand_id#76, i_class_id#77, i_category_id#78, sales#89, number_sales#90]
Arguments: 100, [i_brand_id#49 ASC NULLS FIRST, i_class_id#50 ASC NULLS FIRST, i_category_id#51 ASC NULLS FIRST], [channel#63, i_brand_id#49, i_class_id#50, i_category_id#51, sales#64, number_sales#65, channel#88, i_brand_id#76, i_class_id#77, i_category_id#78, sales#89, number_sales#90]

===== Subqueries =====

Subquery:1 Hosting operator id = 76 Hosting Expression = Subquery scalar-subquery#66, [id=#67]
* HashAggregate (115)
+- Exchange (114)
   +- * HashAggregate (113)
      +- Union (112)
         :- * Project (101)
         :  +- * BroadcastHashJoin Inner BuildRight (100)
         :     :- * ColumnarToRow (98)
         :     :  +- Scan parquet default.store_sales (97)
         :     +- ReusedExchange (99)
         :- * Project (106)
         :  +- * BroadcastHashJoin Inner BuildRight (105)
         :     :- * ColumnarToRow (103)
         :     :  +- Scan parquet default.catalog_sales (102)
         :     +- ReusedExchange (104)
         +- * Project (111)
            +- * BroadcastHashJoin Inner BuildRight (110)
               :- * ColumnarToRow (108)
               :  +- Scan parquet default.web_sales (107)
               +- ReusedExchange (109)


(97) Scan parquet default.store_sales
Output [3]: [ss_quantity#92, ss_list_price#93, ss_sold_date_sk#94]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#94), dynamicpruningexpression(ss_sold_date_sk#94 IN dynamicpruning#13)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(98) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#92, ss_list_price#93, ss_sold_date_sk#94]

(99) ReusedExchange [Reuses operator id: 129]
Output [1]: [d_date_sk#95]

(100) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#94]
Right keys [1]: [d_date_sk#95]
Join condition: None

(101) Project [codegen id : 2]
Output [2]: [ss_quantity#92 AS quantity#96, ss_list_price#93 AS list_price#97]
Input [4]: [ss_quantity#92, ss_list_price#93, ss_sold_date_sk#94, d_date_sk#95]

(102) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#98, cs_list_price#99, cs_sold_date_sk#100]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#100), dynamicpruningexpression(cs_sold_date_sk#100 IN dynamicpruning#13)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(103) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#98, cs_list_price#99, cs_sold_date_sk#100]

(104) ReusedExchange [Reuses operator id: 129]
Output [1]: [d_date_sk#101]

(105) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#100]
Right keys [1]: [d_date_sk#101]
Join condition: None

(106) Project [codegen id : 4]
Output [2]: [cs_quantity#98 AS quantity#102, cs_list_price#99 AS list_price#103]
Input [4]: [cs_quantity#98, cs_list_price#99, cs_sold_date_sk#100, d_date_sk#101]

(107) Scan parquet default.web_sales
Output [3]: [ws_quantity#104, ws_list_price#105, ws_sold_date_sk#106]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#106), dynamicpruningexpression(ws_sold_date_sk#106 IN dynamicpruning#13)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(108) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#104, ws_list_price#105, ws_sold_date_sk#106]

(109) ReusedExchange [Reuses operator id: 129]
Output [1]: [d_date_sk#107]

(110) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#106]
Right keys [1]: [d_date_sk#107]
Join condition: None

(111) Project [codegen id : 6]
Output [2]: [ws_quantity#104 AS quantity#108, ws_list_price#105 AS list_price#109]
Input [4]: [ws_quantity#104, ws_list_price#105, ws_sold_date_sk#106, d_date_sk#107]

(112) Union

(113) HashAggregate [codegen id : 7]
Input [2]: [quantity#96, list_price#97]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#96 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#97 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#110, count#111]
Results [2]: [sum#112, count#113]

(114) Exchange
Input [2]: [sum#112, count#113]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#114]

(115) HashAggregate [codegen id : 8]
Input [2]: [sum#112, count#113]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#96 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#97 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#96 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#97 as decimal(12,2)))), DecimalType(18,2), true))#115]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#96 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#97 as decimal(12,2)))), DecimalType(18,2), true))#115 AS average_sales#116]

Subquery:2 Hosting operator id = 97 Hosting Expression = ss_sold_date_sk#94 IN dynamicpruning#13

Subquery:3 Hosting operator id = 102 Hosting Expression = cs_sold_date_sk#100 IN dynamicpruning#13

Subquery:4 Hosting operator id = 107 Hosting Expression = ws_sold_date_sk#106 IN dynamicpruning#13

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (120)
+- * Project (119)
   +- * Filter (118)
      +- * ColumnarToRow (117)
         +- Scan parquet default.date_dim (116)


(116) Scan parquet default.date_dim
Output [2]: [d_date_sk#47, d_week_seq#117]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(117) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#47, d_week_seq#117]

(118) Filter [codegen id : 1]
Input [2]: [d_date_sk#47, d_week_seq#117]
Condition : (d_week_seq#117 = Subquery scalar-subquery#118, [id=#119])

(119) Project [codegen id : 1]
Output [1]: [d_date_sk#47]
Input [2]: [d_date_sk#47, d_week_seq#117]

(120) BroadcastExchange
Input [1]: [d_date_sk#47]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#120]

Subquery:6 Hosting operator id = 118 Hosting Expression = Subquery scalar-subquery#118, [id=#119]
* Project (124)
+- * Filter (123)
   +- * ColumnarToRow (122)
      +- Scan parquet default.date_dim (121)


(121) Scan parquet default.date_dim
Output [4]: [d_week_seq#121, d_year#122, d_moy#123, d_dom#124]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [EqualTo(d_year,1999), EqualTo(d_moy,12), EqualTo(d_dom,16)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(122) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#121, d_year#122, d_moy#123, d_dom#124]

(123) Filter [codegen id : 1]
Input [4]: [d_week_seq#121, d_year#122, d_moy#123, d_dom#124]
Condition : (((d_year#122 = 1999) AND (d_moy#123 = 12)) AND (d_dom#124 = 16))

(124) Project [codegen id : 1]
Output [1]: [d_week_seq#121]
Input [4]: [d_week_seq#121, d_year#122, d_moy#123, d_dom#124]

Subquery:7 Hosting operator id = 8 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#13
BroadcastExchange (129)
+- * Project (128)
   +- * Filter (127)
      +- * ColumnarToRow (126)
         +- Scan parquet default.date_dim (125)


(125) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#125]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(126) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#125]

(127) Filter [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#125]
Condition : ((d_year#125 >= 1998) AND (d_year#125 <= 2000))

(128) Project [codegen id : 1]
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#125]

(129) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#126]

Subquery:8 Hosting operator id = 18 Hosting Expression = cs_sold_date_sk#21 IN dynamicpruning#13

Subquery:9 Hosting operator id = 39 Hosting Expression = ws_sold_date_sk#36 IN dynamicpruning#13

Subquery:10 Hosting operator id = 93 Hosting Expression = ReusedSubquery Subquery scalar-subquery#66, [id=#67]

Subquery:11 Hosting operator id = 77 Hosting Expression = ss_sold_date_sk#71 IN dynamicpruning#72
BroadcastExchange (134)
+- * Project (133)
   +- * Filter (132)
      +- * ColumnarToRow (131)
         +- Scan parquet default.date_dim (130)


(130) Scan parquet default.date_dim
Output [2]: [d_date_sk#74, d_week_seq#127]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(131) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#74, d_week_seq#127]

(132) Filter [codegen id : 1]
Input [2]: [d_date_sk#74, d_week_seq#127]
Condition : (d_week_seq#127 = Subquery scalar-subquery#128, [id=#129])

(133) Project [codegen id : 1]
Output [1]: [d_date_sk#74]
Input [2]: [d_date_sk#74, d_week_seq#127]

(134) BroadcastExchange
Input [1]: [d_date_sk#74]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#130]

Subquery:12 Hosting operator id = 132 Hosting Expression = Subquery scalar-subquery#128, [id=#129]
* Project (138)
+- * Filter (137)
   +- * ColumnarToRow (136)
      +- Scan parquet default.date_dim (135)


(135) Scan parquet default.date_dim
Output [4]: [d_week_seq#131, d_year#132, d_moy#133, d_dom#134]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [EqualTo(d_year,1998), EqualTo(d_moy,12), EqualTo(d_dom,16)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(136) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#131, d_year#132, d_moy#133, d_dom#134]

(137) Filter [codegen id : 1]
Input [4]: [d_week_seq#131, d_year#132, d_moy#133, d_dom#134]
Condition : (((d_year#132 = 1998) AND (d_moy#133 = 12)) AND (d_dom#134 = 16))

(138) Project [codegen id : 1]
Output [1]: [d_week_seq#131]
Input [4]: [d_week_seq#131, d_year#132, d_moy#133, d_dom#134]


