== Physical Plan ==
TakeOrderedAndProject (94)
+- * BroadcastHashJoin Inner BuildRight (93)
   :- * Filter (73)
   :  +- * HashAggregate (72)
   :     +- Exchange (71)
   :        +- * HashAggregate (70)
   :           +- * Project (69)
   :              +- * BroadcastHashJoin Inner BuildRight (68)
   :                 :- * Project (63)
   :                 :  +- * BroadcastHashJoin Inner BuildRight (62)
   :                 :     :- * SortMergeJoin LeftSemi (60)
   :                 :     :  :- * Sort (5)
   :                 :     :  :  +- Exchange (4)
   :                 :     :  :     +- * Filter (3)
   :                 :     :  :        +- * ColumnarToRow (2)
   :                 :     :  :           +- Scan parquet default.store_sales (1)
   :                 :     :  +- * Sort (59)
   :                 :     :     +- Exchange (58)
   :                 :     :        +- * Project (57)
   :                 :     :           +- * BroadcastHashJoin Inner BuildRight (56)
   :                 :     :              :- * Filter (8)
   :                 :     :              :  +- * ColumnarToRow (7)
   :                 :     :              :     +- Scan parquet default.item (6)
   :                 :     :              +- BroadcastExchange (55)
   :                 :     :                 +- * SortMergeJoin LeftSemi (54)
   :                 :     :                    :- * Sort (42)
   :                 :     :                    :  +- Exchange (41)
   :                 :     :                    :     +- * HashAggregate (40)
   :                 :     :                    :        +- Exchange (39)
   :                 :     :                    :           +- * HashAggregate (38)
   :                 :     :                    :              +- * Project (37)
   :                 :     :                    :                 +- * BroadcastHashJoin Inner BuildRight (36)
   :                 :     :                    :                    :- * Project (14)
   :                 :     :                    :                    :  +- * BroadcastHashJoin Inner BuildRight (13)
   :                 :     :                    :                    :     :- * Filter (11)
   :                 :     :                    :                    :     :  +- * ColumnarToRow (10)
   :                 :     :                    :                    :     :     +- Scan parquet default.store_sales (9)
   :                 :     :                    :                    :     +- ReusedExchange (12)
   :                 :     :                    :                    +- BroadcastExchange (35)
   :                 :     :                    :                       +- * SortMergeJoin LeftSemi (34)
   :                 :     :                    :                          :- * Sort (19)
   :                 :     :                    :                          :  +- Exchange (18)
   :                 :     :                    :                          :     +- * Filter (17)
   :                 :     :                    :                          :        +- * ColumnarToRow (16)
   :                 :     :                    :                          :           +- Scan parquet default.item (15)
   :                 :     :                    :                          +- * Sort (33)
   :                 :     :                    :                             +- Exchange (32)
   :                 :     :                    :                                +- * Project (31)
   :                 :     :                    :                                   +- * BroadcastHashJoin Inner BuildRight (30)
   :                 :     :                    :                                      :- * Project (25)
   :                 :     :                    :                                      :  +- * BroadcastHashJoin Inner BuildRight (24)
   :                 :     :                    :                                      :     :- * Filter (22)
   :                 :     :                    :                                      :     :  +- * ColumnarToRow (21)
   :                 :     :                    :                                      :     :     +- Scan parquet default.catalog_sales (20)
   :                 :     :                    :                                      :     +- ReusedExchange (23)
   :                 :     :                    :                                      +- BroadcastExchange (29)
   :                 :     :                    :                                         +- * Filter (28)
   :                 :     :                    :                                            +- * ColumnarToRow (27)
   :                 :     :                    :                                               +- Scan parquet default.item (26)
   :                 :     :                    +- * Sort (53)
   :                 :     :                       +- Exchange (52)
   :                 :     :                          +- * Project (51)
   :                 :     :                             +- * BroadcastHashJoin Inner BuildRight (50)
   :                 :     :                                :- * Project (48)
   :                 :     :                                :  +- * BroadcastHashJoin Inner BuildRight (47)
   :                 :     :                                :     :- * Filter (45)
   :                 :     :                                :     :  +- * ColumnarToRow (44)
   :                 :     :                                :     :     +- Scan parquet default.web_sales (43)
   :                 :     :                                :     +- ReusedExchange (46)
   :                 :     :                                +- ReusedExchange (49)
   :                 :     +- ReusedExchange (61)
   :                 +- BroadcastExchange (67)
   :                    +- * Filter (66)
   :                       +- * ColumnarToRow (65)
   :                          +- Scan parquet default.item (64)
   +- BroadcastExchange (92)
      +- * Filter (91)
         +- * HashAggregate (90)
            +- Exchange (89)
               +- * HashAggregate (88)
                  +- * Project (87)
                     +- * BroadcastHashJoin Inner BuildRight (86)
                        :- * Project (84)
                        :  +- * BroadcastHashJoin Inner BuildRight (83)
                        :     :- * SortMergeJoin LeftSemi (81)
                        :     :  :- * Sort (78)
                        :     :  :  +- Exchange (77)
                        :     :  :     +- * Filter (76)
                        :     :  :        +- * ColumnarToRow (75)
                        :     :  :           +- Scan parquet default.store_sales (74)
                        :     :  +- * Sort (80)
                        :     :     +- ReusedExchange (79)
                        :     +- ReusedExchange (82)
                        +- ReusedExchange (85)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 19]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(8) Filter [codegen id : 19]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(9) Scan parquet default.store_sales
Output [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(10) ColumnarToRow [codegen id : 11]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]

(11) Filter [codegen id : 11]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Condition : isnotnull(ss_item_sk#11)

(12) ReusedExchange [Reuses operator id: 127]
Output [1]: [d_date_sk#14]

(13) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_sold_date_sk#12]
Right keys [1]: [d_date_sk#14]
Join condition: None

(14) Project [codegen id : 11]
Output [1]: [ss_item_sk#11]
Input [3]: [ss_item_sk#11, ss_sold_date_sk#12, d_date_sk#14]

(15) Scan parquet default.item
Output [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(16) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(17) Filter [codegen id : 4]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Condition : (((isnotnull(i_item_sk#15) AND isnotnull(i_brand_id#16)) AND isnotnull(i_class_id#17)) AND isnotnull(i_category_id#18))

(18) Exchange
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: hashpartitioning(coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18), 5), ENSURE_REQUIREMENTS, [id=#19]

(19) Sort [codegen id : 5]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: [coalesce(i_brand_id#16, 0) ASC NULLS FIRST, isnull(i_brand_id#16) ASC NULLS FIRST, coalesce(i_class_id#17, 0) ASC NULLS FIRST, isnull(i_class_id#17) ASC NULLS FIRST, coalesce(i_category_id#18, 0) ASC NULLS FIRST, isnull(i_category_id#18) ASC NULLS FIRST], false, 0

(20) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#20, cs_sold_date_sk#21]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#21), dynamicpruningexpression(cs_sold_date_sk#21 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(21) ColumnarToRow [codegen id : 8]
Input [2]: [cs_item_sk#20, cs_sold_date_sk#21]

(22) Filter [codegen id : 8]
Input [2]: [cs_item_sk#20, cs_sold_date_sk#21]
Condition : isnotnull(cs_item_sk#20)

(23) ReusedExchange [Reuses operator id: 127]
Output [1]: [d_date_sk#22]

(24) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#21]
Right keys [1]: [d_date_sk#22]
Join condition: None

(25) Project [codegen id : 8]
Output [1]: [cs_item_sk#20]
Input [3]: [cs_item_sk#20, cs_sold_date_sk#21, d_date_sk#22]

(26) Scan parquet default.item
Output [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(27) ColumnarToRow [codegen id : 7]
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]

(28) Filter [codegen id : 7]
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Condition : isnotnull(i_item_sk#23)

(29) BroadcastExchange
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(30) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_item_sk#20]
Right keys [1]: [i_item_sk#23]
Join condition: None

(31) Project [codegen id : 8]
Output [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Input [5]: [cs_item_sk#20, i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]

(32) Exchange
Input [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: hashpartitioning(coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26), 5), ENSURE_REQUIREMENTS, [id=#28]

(33) Sort [codegen id : 9]
Input [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: [coalesce(i_brand_id#24, 0) ASC NULLS FIRST, isnull(i_brand_id#24) ASC NULLS FIRST, coalesce(i_class_id#25, 0) ASC NULLS FIRST, isnull(i_class_id#25) ASC NULLS FIRST, coalesce(i_category_id#26, 0) ASC NULLS FIRST, isnull(i_category_id#26) ASC NULLS FIRST], false, 0

(34) SortMergeJoin [codegen id : 10]
Left keys [6]: [coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18)]
Right keys [6]: [coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26)]
Join condition: None

(35) BroadcastExchange
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(36) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#11]
Right keys [1]: [i_item_sk#15]
Join condition: None

(37) Project [codegen id : 11]
Output [3]: [i_brand_id#16 AS brand_id#30, i_class_id#17 AS class_id#31, i_category_id#18 AS category_id#32]
Input [5]: [ss_item_sk#11, i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(38) HashAggregate [codegen id : 11]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(39) Exchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: hashpartitioning(brand_id#30, class_id#31, category_id#32, 5), ENSURE_REQUIREMENTS, [id=#33]

(40) HashAggregate [codegen id : 12]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(41) Exchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: hashpartitioning(coalesce(brand_id#30, 0), isnull(brand_id#30), coalesce(class_id#31, 0), isnull(class_id#31), coalesce(category_id#32, 0), isnull(category_id#32), 5), ENSURE_REQUIREMENTS, [id=#34]

(42) Sort [codegen id : 13]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: [coalesce(brand_id#30, 0) ASC NULLS FIRST, isnull(brand_id#30) ASC NULLS FIRST, coalesce(class_id#31, 0) ASC NULLS FIRST, isnull(class_id#31) ASC NULLS FIRST, coalesce(category_id#32, 0) ASC NULLS FIRST, isnull(category_id#32) ASC NULLS FIRST], false, 0

(43) Scan parquet default.web_sales
Output [2]: [ws_item_sk#35, ws_sold_date_sk#36]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#36), dynamicpruningexpression(ws_sold_date_sk#36 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(44) ColumnarToRow [codegen id : 16]
Input [2]: [ws_item_sk#35, ws_sold_date_sk#36]

(45) Filter [codegen id : 16]
Input [2]: [ws_item_sk#35, ws_sold_date_sk#36]
Condition : isnotnull(ws_item_sk#35)

(46) ReusedExchange [Reuses operator id: 127]
Output [1]: [d_date_sk#37]

(47) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_sold_date_sk#36]
Right keys [1]: [d_date_sk#37]
Join condition: None

(48) Project [codegen id : 16]
Output [1]: [ws_item_sk#35]
Input [3]: [ws_item_sk#35, ws_sold_date_sk#36, d_date_sk#37]

(49) ReusedExchange [Reuses operator id: 29]
Output [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(50) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_item_sk#35]
Right keys [1]: [i_item_sk#38]
Join condition: None

(51) Project [codegen id : 16]
Output [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Input [5]: [ws_item_sk#35, i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(52) Exchange
Input [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Arguments: hashpartitioning(coalesce(i_brand_id#39, 0), isnull(i_brand_id#39), coalesce(i_class_id#40, 0), isnull(i_class_id#40), coalesce(i_category_id#41, 0), isnull(i_category_id#41), 5), ENSURE_REQUIREMENTS, [id=#42]

(53) Sort [codegen id : 17]
Input [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Arguments: [coalesce(i_brand_id#39, 0) ASC NULLS FIRST, isnull(i_brand_id#39) ASC NULLS FIRST, coalesce(i_class_id#40, 0) ASC NULLS FIRST, isnull(i_class_id#40) ASC NULLS FIRST, coalesce(i_category_id#41, 0) ASC NULLS FIRST, isnull(i_category_id#41) ASC NULLS FIRST], false, 0

(54) SortMergeJoin [codegen id : 18]
Left keys [6]: [coalesce(brand_id#30, 0), isnull(brand_id#30), coalesce(class_id#31, 0), isnull(class_id#31), coalesce(category_id#32, 0), isnull(category_id#32)]
Right keys [6]: [coalesce(i_brand_id#39, 0), isnull(i_brand_id#39), coalesce(i_class_id#40, 0), isnull(i_class_id#40), coalesce(i_category_id#41, 0), isnull(i_category_id#41)]
Join condition: None

(55) BroadcastExchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#43]

(56) BroadcastHashJoin [codegen id : 19]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#30, class_id#31, category_id#32]
Join condition: None

(57) Project [codegen id : 19]
Output [1]: [i_item_sk#7 AS ss_item_sk#44]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#30, class_id#31, category_id#32]

(58) Exchange
Input [1]: [ss_item_sk#44]
Arguments: hashpartitioning(ss_item_sk#44, 5), ENSURE_REQUIREMENTS, [id=#45]

(59) Sort [codegen id : 20]
Input [1]: [ss_item_sk#44]
Arguments: [ss_item_sk#44 ASC NULLS FIRST], false, 0

(60) SortMergeJoin [codegen id : 23]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#44]
Join condition: None

(61) ReusedExchange [Reuses operator id: 118]
Output [1]: [d_date_sk#46]

(62) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#46]
Join condition: None

(63) Project [codegen id : 23]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#46]

(64) Scan parquet default.item
Output [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(65) ColumnarToRow [codegen id : 22]
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]

(66) Filter [codegen id : 22]
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Condition : (((isnotnull(i_item_sk#47) AND isnotnull(i_brand_id#48)) AND isnotnull(i_class_id#49)) AND isnotnull(i_category_id#50))

(67) BroadcastExchange
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#51]

(68) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#47]
Join condition: None

(69) Project [codegen id : 23]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#48, i_class_id#49, i_category_id#50]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]

(70) HashAggregate [codegen id : 23]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#48, i_class_id#49, i_category_id#50]
Keys [3]: [i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)]
Aggregate Attributes [3]: [sum#52, isEmpty#53, count#54]
Results [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#55, isEmpty#56, count#57]

(71) Exchange
Input [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#55, isEmpty#56, count#57]
Arguments: hashpartitioning(i_brand_id#48, i_class_id#49, i_category_id#50, 5), ENSURE_REQUIREMENTS, [id=#58]

(72) HashAggregate [codegen id : 48]
Input [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#55, isEmpty#56, count#57]
Keys [3]: [i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2))), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2)))#59, count(1)#60]
Results [6]: [store AS channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2)))#59 AS sales#62, count(1)#60 AS number_sales#63]

(73) Filter [codegen id : 48]
Input [6]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sales#62, number_sales#63]
Condition : (isnotnull(sales#62) AND (cast(sales#62 as decimal(32,6)) > cast(Subquery scalar-subquery#64, [id=#65] as decimal(32,6))))

(74) Scan parquet default.store_sales
Output [4]: [ss_item_sk#66, ss_quantity#67, ss_list_price#68, ss_sold_date_sk#69]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#69), dynamicpruningexpression(ss_sold_date_sk#69 IN dynamicpruning#70)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(75) ColumnarToRow [codegen id : 24]
Input [4]: [ss_item_sk#66, ss_quantity#67, ss_list_price#68, ss_sold_date_sk#69]

(76) Filter [codegen id : 24]
Input [4]: [ss_item_sk#66, ss_quantity#67, ss_list_price#68, ss_sold_date_sk#69]
Condition : isnotnull(ss_item_sk#66)

(77) Exchange
Input [4]: [ss_item_sk#66, ss_quantity#67, ss_list_price#68, ss_sold_date_sk#69]
Arguments: hashpartitioning(ss_item_sk#66, 5), ENSURE_REQUIREMENTS, [id=#71]

(78) Sort [codegen id : 25]
Input [4]: [ss_item_sk#66, ss_quantity#67, ss_list_price#68, ss_sold_date_sk#69]
Arguments: [ss_item_sk#66 ASC NULLS FIRST], false, 0

(79) ReusedExchange [Reuses operator id: 58]
Output [1]: [ss_item_sk#44]

(80) Sort [codegen id : 43]
Input [1]: [ss_item_sk#44]
Arguments: [ss_item_sk#44 ASC NULLS FIRST], false, 0

(81) SortMergeJoin [codegen id : 46]
Left keys [1]: [ss_item_sk#66]
Right keys [1]: [ss_item_sk#44]
Join condition: None

(82) ReusedExchange [Reuses operator id: 132]
Output [1]: [d_date_sk#72]

(83) BroadcastHashJoin [codegen id : 46]
Left keys [1]: [ss_sold_date_sk#69]
Right keys [1]: [d_date_sk#72]
Join condition: None

(84) Project [codegen id : 46]
Output [3]: [ss_item_sk#66, ss_quantity#67, ss_list_price#68]
Input [5]: [ss_item_sk#66, ss_quantity#67, ss_list_price#68, ss_sold_date_sk#69, d_date_sk#72]

(85) ReusedExchange [Reuses operator id: 67]
Output [4]: [i_item_sk#73, i_brand_id#74, i_class_id#75, i_category_id#76]

(86) BroadcastHashJoin [codegen id : 46]
Left keys [1]: [ss_item_sk#66]
Right keys [1]: [i_item_sk#73]
Join condition: None

(87) Project [codegen id : 46]
Output [5]: [ss_quantity#67, ss_list_price#68, i_brand_id#74, i_class_id#75, i_category_id#76]
Input [7]: [ss_item_sk#66, ss_quantity#67, ss_list_price#68, i_item_sk#73, i_brand_id#74, i_class_id#75, i_category_id#76]

(88) HashAggregate [codegen id : 46]
Input [5]: [ss_quantity#67, ss_list_price#68, i_brand_id#74, i_class_id#75, i_category_id#76]
Keys [3]: [i_brand_id#74, i_class_id#75, i_category_id#76]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#67 as decimal(12,2))) * promote_precision(cast(ss_list_price#68 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)]
Aggregate Attributes [3]: [sum#77, isEmpty#78, count#79]
Results [6]: [i_brand_id#74, i_class_id#75, i_category_id#76, sum#80, isEmpty#81, count#82]

(89) Exchange
Input [6]: [i_brand_id#74, i_class_id#75, i_category_id#76, sum#80, isEmpty#81, count#82]
Arguments: hashpartitioning(i_brand_id#74, i_class_id#75, i_category_id#76, 5), ENSURE_REQUIREMENTS, [id=#83]

(90) HashAggregate [codegen id : 47]
Input [6]: [i_brand_id#74, i_class_id#75, i_category_id#76, sum#80, isEmpty#81, count#82]
Keys [3]: [i_brand_id#74, i_class_id#75, i_category_id#76]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#67 as decimal(12,2))) * promote_precision(cast(ss_list_price#68 as decimal(12,2)))), DecimalType(18,2))), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#67 as decimal(12,2))) * promote_precision(cast(ss_list_price#68 as decimal(12,2)))), DecimalType(18,2)))#84, count(1)#85]
Results [6]: [store AS channel#86, i_brand_id#74, i_class_id#75, i_category_id#76, sum(CheckOverflow((promote_precision(cast(ss_quantity#67 as decimal(12,2))) * promote_precision(cast(ss_list_price#68 as decimal(12,2)))), DecimalType(18,2)))#84 AS sales#87, count(1)#85 AS number_sales#88]

(91) Filter [codegen id : 47]
Input [6]: [channel#86, i_brand_id#74, i_class_id#75, i_category_id#76, sales#87, number_sales#88]
Condition : (isnotnull(sales#87) AND (cast(sales#87 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#64, [id=#65] as decimal(32,6))))

(92) BroadcastExchange
Input [6]: [channel#86, i_brand_id#74, i_class_id#75, i_category_id#76, sales#87, number_sales#88]
Arguments: HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true]),false), [id=#89]

(93) BroadcastHashJoin [codegen id : 48]
Left keys [3]: [i_brand_id#48, i_class_id#49, i_category_id#50]
Right keys [3]: [i_brand_id#74, i_class_id#75, i_category_id#76]
Join condition: None

(94) TakeOrderedAndProject
Input [12]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sales#62, number_sales#63, channel#86, i_brand_id#74, i_class_id#75, i_category_id#76, sales#87, number_sales#88]
Arguments: 100, [i_brand_id#48 ASC NULLS FIRST, i_class_id#49 ASC NULLS FIRST, i_category_id#50 ASC NULLS FIRST], [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sales#62, number_sales#63, channel#86, i_brand_id#74, i_class_id#75, i_category_id#76, sales#87, number_sales#88]

===== Subqueries =====

Subquery:1 Hosting operator id = 73 Hosting Expression = Subquery scalar-subquery#64, [id=#65]
* HashAggregate (113)
+- Exchange (112)
   +- * HashAggregate (111)
      +- Union (110)
         :- * Project (99)
         :  +- * BroadcastHashJoin Inner BuildRight (98)
         :     :- * ColumnarToRow (96)
         :     :  +- Scan parquet default.store_sales (95)
         :     +- ReusedExchange (97)
         :- * Project (104)
         :  +- * BroadcastHashJoin Inner BuildRight (103)
         :     :- * ColumnarToRow (101)
         :     :  +- Scan parquet default.catalog_sales (100)
         :     +- ReusedExchange (102)
         +- * Project (109)
            +- * BroadcastHashJoin Inner BuildRight (108)
               :- * ColumnarToRow (106)
               :  +- Scan parquet default.web_sales (105)
               +- ReusedExchange (107)


(95) Scan parquet default.store_sales
Output [3]: [ss_quantity#90, ss_list_price#91, ss_sold_date_sk#92]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#92), dynamicpruningexpression(ss_sold_date_sk#92 IN dynamicpruning#13)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(96) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#90, ss_list_price#91, ss_sold_date_sk#92]

(97) ReusedExchange [Reuses operator id: 127]
Output [1]: [d_date_sk#93]

(98) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#92]
Right keys [1]: [d_date_sk#93]
Join condition: None

(99) Project [codegen id : 2]
Output [2]: [ss_quantity#90 AS quantity#94, ss_list_price#91 AS list_price#95]
Input [4]: [ss_quantity#90, ss_list_price#91, ss_sold_date_sk#92, d_date_sk#93]

(100) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#96, cs_list_price#97, cs_sold_date_sk#98]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#98), dynamicpruningexpression(cs_sold_date_sk#98 IN dynamicpruning#13)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(101) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#96, cs_list_price#97, cs_sold_date_sk#98]

(102) ReusedExchange [Reuses operator id: 127]
Output [1]: [d_date_sk#99]

(103) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#98]
Right keys [1]: [d_date_sk#99]
Join condition: None

(104) Project [codegen id : 4]
Output [2]: [cs_quantity#96 AS quantity#100, cs_list_price#97 AS list_price#101]
Input [4]: [cs_quantity#96, cs_list_price#97, cs_sold_date_sk#98, d_date_sk#99]

(105) Scan parquet default.web_sales
Output [3]: [ws_quantity#102, ws_list_price#103, ws_sold_date_sk#104]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#104), dynamicpruningexpression(ws_sold_date_sk#104 IN dynamicpruning#13)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(106) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#102, ws_list_price#103, ws_sold_date_sk#104]

(107) ReusedExchange [Reuses operator id: 127]
Output [1]: [d_date_sk#105]

(108) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#104]
Right keys [1]: [d_date_sk#105]
Join condition: None

(109) Project [codegen id : 6]
Output [2]: [ws_quantity#102 AS quantity#106, ws_list_price#103 AS list_price#107]
Input [4]: [ws_quantity#102, ws_list_price#103, ws_sold_date_sk#104, d_date_sk#105]

(110) Union

(111) HashAggregate [codegen id : 7]
Input [2]: [quantity#94, list_price#95]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(quantity#94 as decimal(12,2))) * promote_precision(cast(list_price#95 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#108, count#109]
Results [2]: [sum#110, count#111]

(112) Exchange
Input [2]: [sum#110, count#111]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#112]

(113) HashAggregate [codegen id : 8]
Input [2]: [sum#110, count#111]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(quantity#94 as decimal(12,2))) * promote_precision(cast(list_price#95 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(quantity#94 as decimal(12,2))) * promote_precision(cast(list_price#95 as decimal(12,2)))), DecimalType(18,2)))#113]
Results [1]: [avg(CheckOverflow((promote_precision(cast(quantity#94 as decimal(12,2))) * promote_precision(cast(list_price#95 as decimal(12,2)))), DecimalType(18,2)))#113 AS average_sales#114]

Subquery:2 Hosting operator id = 95 Hosting Expression = ss_sold_date_sk#92 IN dynamicpruning#13

Subquery:3 Hosting operator id = 100 Hosting Expression = cs_sold_date_sk#98 IN dynamicpruning#13

Subquery:4 Hosting operator id = 105 Hosting Expression = ws_sold_date_sk#104 IN dynamicpruning#13

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (118)
+- * Project (117)
   +- * Filter (116)
      +- * ColumnarToRow (115)
         +- Scan parquet default.date_dim (114)


(114) Scan parquet default.date_dim
Output [2]: [d_date_sk#46, d_week_seq#115]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(115) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#46, d_week_seq#115]

(116) Filter [codegen id : 1]
Input [2]: [d_date_sk#46, d_week_seq#115]
Condition : ((isnotnull(d_week_seq#115) AND (d_week_seq#115 = Subquery scalar-subquery#116, [id=#117])) AND isnotnull(d_date_sk#46))

(117) Project [codegen id : 1]
Output [1]: [d_date_sk#46]
Input [2]: [d_date_sk#46, d_week_seq#115]

(118) BroadcastExchange
Input [1]: [d_date_sk#46]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#118]

Subquery:6 Hosting operator id = 116 Hosting Expression = Subquery scalar-subquery#116, [id=#117]
* Project (122)
+- * Filter (121)
   +- * ColumnarToRow (120)
      +- Scan parquet default.date_dim (119)


(119) Scan parquet default.date_dim
Output [4]: [d_week_seq#119, d_year#120, d_moy#121, d_dom#122]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), EqualTo(d_dom,16)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(120) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#119, d_year#120, d_moy#121, d_dom#122]

(121) Filter [codegen id : 1]
Input [4]: [d_week_seq#119, d_year#120, d_moy#121, d_dom#122]
Condition : (((((isnotnull(d_year#120) AND isnotnull(d_moy#121)) AND isnotnull(d_dom#122)) AND (d_year#120 = 1999)) AND (d_moy#121 = 12)) AND (d_dom#122 = 16))

(122) Project [codegen id : 1]
Output [1]: [d_week_seq#119]
Input [4]: [d_week_seq#119, d_year#120, d_moy#121, d_dom#122]

Subquery:7 Hosting operator id = 9 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#13
BroadcastExchange (127)
+- * Project (126)
   +- * Filter (125)
      +- * ColumnarToRow (124)
         +- Scan parquet default.date_dim (123)


(123) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#123]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(124) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#123]

(125) Filter [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#123]
Condition : (((isnotnull(d_year#123) AND (d_year#123 >= 1998)) AND (d_year#123 <= 2000)) AND isnotnull(d_date_sk#14))

(126) Project [codegen id : 1]
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#123]

(127) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#124]

Subquery:8 Hosting operator id = 20 Hosting Expression = cs_sold_date_sk#21 IN dynamicpruning#13

Subquery:9 Hosting operator id = 43 Hosting Expression = ws_sold_date_sk#36 IN dynamicpruning#13

Subquery:10 Hosting operator id = 91 Hosting Expression = ReusedSubquery Subquery scalar-subquery#64, [id=#65]

Subquery:11 Hosting operator id = 74 Hosting Expression = ss_sold_date_sk#69 IN dynamicpruning#70
BroadcastExchange (132)
+- * Project (131)
   +- * Filter (130)
      +- * ColumnarToRow (129)
         +- Scan parquet default.date_dim (128)


(128) Scan parquet default.date_dim
Output [2]: [d_date_sk#72, d_week_seq#125]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(129) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#72, d_week_seq#125]

(130) Filter [codegen id : 1]
Input [2]: [d_date_sk#72, d_week_seq#125]
Condition : ((isnotnull(d_week_seq#125) AND (d_week_seq#125 = Subquery scalar-subquery#126, [id=#127])) AND isnotnull(d_date_sk#72))

(131) Project [codegen id : 1]
Output [1]: [d_date_sk#72]
Input [2]: [d_date_sk#72, d_week_seq#125]

(132) BroadcastExchange
Input [1]: [d_date_sk#72]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#128]

Subquery:12 Hosting operator id = 130 Hosting Expression = Subquery scalar-subquery#126, [id=#127]
* Project (136)
+- * Filter (135)
   +- * ColumnarToRow (134)
      +- Scan parquet default.date_dim (133)


(133) Scan parquet default.date_dim
Output [4]: [d_week_seq#129, d_year#130, d_moy#131, d_dom#132]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1998), EqualTo(d_moy,12), EqualTo(d_dom,16)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(134) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#129, d_year#130, d_moy#131, d_dom#132]

(135) Filter [codegen id : 1]
Input [4]: [d_week_seq#129, d_year#130, d_moy#131, d_dom#132]
Condition : (((((isnotnull(d_year#130) AND isnotnull(d_moy#131)) AND isnotnull(d_dom#132)) AND (d_year#130 = 1998)) AND (d_moy#131 = 12)) AND (d_dom#132 = 16))

(136) Project [codegen id : 1]
Output [1]: [d_week_seq#129]
Input [4]: [d_week_seq#129, d_year#130, d_moy#131, d_dom#132]


