== Physical Plan ==
* Sort (21)
+- Exchange (20)
   +- * Project (19)
      +- Window (18)
         +- * Sort (17)
            +- Exchange (16)
               +- * HashAggregate (15)
                  +- Exchange (14)
                     +- * HashAggregate (13)
                        +- * Project (12)
                           +- * BroadcastHashJoin Inner BuildRight (11)
                              :- * Project (9)
                              :  +- * SortMergeJoin Inner (8)
                              :     :- * Sort (5)
                              :     :  +- Exchange (4)
                              :     :     +- * Filter (3)
                              :     :        +- * ColumnarToRow (2)
                              :     :           +- Scan parquet spark_catalog.default.store_sales (1)
                              :     +- * Sort (7)
                              :        +- ReusedExchange (6)
                              +- ReusedExchange (10)


(1) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]

(3) Filter [codegen id : 1]
Input [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Condition : (isnotnull(ss_item_sk#1) AND might_contain(Subquery scalar-subquery#5, [id=#6], xxhash64(ss_item_sk#1, 42), false))

(4) Exchange
Input [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) ReusedExchange [Reuses operator id: 25]
Output [6]: [i_item_sk#7, i_item_id#8, i_item_desc#9, i_current_price#10, i_class#11, i_category#12]

(7) Sort [codegen id : 4]
Input [6]: [i_item_sk#7, i_item_id#8, i_item_desc#9, i_current_price#10, i_class#11, i_category#12]
Arguments: [i_item_sk#7 ASC NULLS FIRST], false, 0

(8) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join type: Inner
Join condition: None

(9) Project [codegen id : 6]
Output [7]: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#8, i_item_desc#9, i_current_price#10, i_class#11, i_category#12]
Input [9]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_sk#7, i_item_id#8, i_item_desc#9, i_current_price#10, i_class#11, i_category#12]

(10) ReusedExchange [Reuses operator id: 33]
Output [1]: [d_date_sk#13]

(11) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#13]
Join type: Inner
Join condition: None

(12) Project [codegen id : 6]
Output [6]: [ss_ext_sales_price#2, i_item_id#8, i_item_desc#9, i_current_price#10, i_class#11, i_category#12]
Input [8]: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#8, i_item_desc#9, i_current_price#10, i_class#11, i_category#12, d_date_sk#13]

(13) HashAggregate [codegen id : 6]
Input [6]: [ss_ext_sales_price#2, i_item_id#8, i_item_desc#9, i_current_price#10, i_class#11, i_category#12]
Keys [5]: [i_item_id#8, i_item_desc#9, i_category#12, i_class#11, i_current_price#10]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum#14]
Results [6]: [i_item_id#8, i_item_desc#9, i_category#12, i_class#11, i_current_price#10, sum#15]

(14) Exchange
Input [6]: [i_item_id#8, i_item_desc#9, i_category#12, i_class#11, i_current_price#10, sum#15]
Arguments: hashpartitioning(i_item_id#8, i_item_desc#9, i_category#12, i_class#11, i_current_price#10, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(15) HashAggregate [codegen id : 7]
Input [6]: [i_item_id#8, i_item_desc#9, i_category#12, i_class#11, i_current_price#10, sum#15]
Keys [5]: [i_item_id#8, i_item_desc#9, i_category#12, i_class#11, i_current_price#10]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#2))#16]
Results [8]: [i_item_id#8, i_item_desc#9, i_category#12, i_class#11, i_current_price#10, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#16,17,2) AS itemrevenue#17, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#16,17,2) AS _w0#18, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#16,17,2) AS _w1#19]

(16) Exchange
Input [8]: [i_item_id#8, i_item_desc#9, i_category#12, i_class#11, i_current_price#10, itemrevenue#17, _w0#18, _w1#19]
Arguments: hashpartitioning(i_class#11, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(17) Sort [codegen id : 8]
Input [8]: [i_item_id#8, i_item_desc#9, i_category#12, i_class#11, i_current_price#10, itemrevenue#17, _w0#18, _w1#19]
Arguments: [i_class#11 ASC NULLS FIRST], false, 0

(18) Window
Input [8]: [i_item_id#8, i_item_desc#9, i_category#12, i_class#11, i_current_price#10, itemrevenue#17, _w0#18, _w1#19]
Arguments: [sum(_w1#19) windowspecdefinition(i_class#11, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#20], [i_class#11]

(19) Project [codegen id : 9]
Output [7]: [i_item_id#8, i_item_desc#9, i_category#12, i_class#11, i_current_price#10, itemrevenue#17, ((_w0#18 * 100) / _we0#20) AS revenueratio#21]
Input [9]: [i_item_id#8, i_item_desc#9, i_category#12, i_class#11, i_current_price#10, itemrevenue#17, _w0#18, _w1#19, _we0#20]

(20) Exchange
Input [7]: [i_item_id#8, i_item_desc#9, i_category#12, i_class#11, i_current_price#10, itemrevenue#17, revenueratio#21]
Arguments: rangepartitioning(i_category#12 ASC NULLS FIRST, i_class#11 ASC NULLS FIRST, i_item_id#8 ASC NULLS FIRST, i_item_desc#9 ASC NULLS FIRST, revenueratio#21 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(21) Sort [codegen id : 10]
Input [7]: [i_item_id#8, i_item_desc#9, i_category#12, i_class#11, i_current_price#10, itemrevenue#17, revenueratio#21]
Arguments: [i_category#12 ASC NULLS FIRST, i_class#11 ASC NULLS FIRST, i_item_id#8 ASC NULLS FIRST, i_item_desc#9 ASC NULLS FIRST, revenueratio#21 ASC NULLS FIRST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#5, [id=#6]
ObjectHashAggregate (28)
+- Exchange (27)
   +- ObjectHashAggregate (26)
      +- Exchange (25)
         +- * Filter (24)
            +- * ColumnarToRow (23)
               +- Scan parquet spark_catalog.default.item (22)


(22) Scan parquet spark_catalog.default.item
Output [6]: [i_item_sk#7, i_item_id#8, i_item_desc#9, i_current_price#10, i_class#11, i_category#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [In(i_category, [Books                                             ,Home                                              ,Sports                                            ]), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string,i_current_price:decimal(7,2),i_class:string,i_category:string>

(23) ColumnarToRow [codegen id : 1]
Input [6]: [i_item_sk#7, i_item_id#8, i_item_desc#9, i_current_price#10, i_class#11, i_category#12]

(24) Filter [codegen id : 1]
Input [6]: [i_item_sk#7, i_item_id#8, i_item_desc#9, i_current_price#10, i_class#11, i_category#12]
Condition : (i_category#12 IN (Sports                                            ,Books                                             ,Home                                              ) AND isnotnull(i_item_sk#7))

(25) Exchange
Input [6]: [i_item_sk#7, i_item_id#8, i_item_desc#9, i_current_price#10, i_class#11, i_category#12]
Arguments: hashpartitioning(i_item_sk#7, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(26) ObjectHashAggregate
Input [6]: [i_item_sk#7, i_item_id#8, i_item_desc#9, i_current_price#10, i_class#11, i_category#12]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(i_item_sk#7, 42), 61200, 489600, 0, 0)]
Aggregate Attributes [1]: [buf#22]
Results [1]: [buf#23]

(27) Exchange
Input [1]: [buf#23]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=6]

(28) ObjectHashAggregate
Input [1]: [buf#23]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(i_item_sk#7, 42), 61200, 489600, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(i_item_sk#7, 42), 61200, 489600, 0, 0)#24]
Results [1]: [bloom_filter_agg(xxhash64(i_item_sk#7, 42), 61200, 489600, 0, 0)#24 AS bloomFilter#25]

Subquery:2 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (33)
+- * Project (32)
   +- * Filter (31)
      +- * ColumnarToRow (30)
         +- Scan parquet spark_catalog.default.date_dim (29)


(29) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#13, d_date#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-22), LessThanOrEqual(d_date,1999-03-24), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(30) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#13, d_date#26]

(31) Filter [codegen id : 1]
Input [2]: [d_date_sk#13, d_date#26]
Condition : (((isnotnull(d_date#26) AND (d_date#26 >= 1999-02-22)) AND (d_date#26 <= 1999-03-24)) AND isnotnull(d_date_sk#13))

(32) Project [codegen id : 1]
Output [1]: [d_date_sk#13]
Input [2]: [d_date_sk#13, d_date#26]

(33) BroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]


