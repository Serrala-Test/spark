== Physical Plan ==
TakeOrderedAndProject (38)
+- * Project (37)
   +- Window (36)
      +- * Sort (35)
         +- Exchange (34)
            +- * HashAggregate (33)
               +- Exchange (32)
                  +- * HashAggregate (31)
                     +- Union (30)
                        :- * HashAggregate (19)
                        :  +- Exchange (18)
                        :     +- * HashAggregate (17)
                        :        +- * Project (16)
                        :           +- * BroadcastHashJoin Inner BuildLeft (15)
                        :              :- BroadcastExchange (11)
                        :              :  +- * Project (10)
                        :              :     +- * BroadcastHashJoin Inner BuildLeft (9)
                        :              :        :- BroadcastExchange (4)
                        :              :        :  +- * Filter (3)
                        :              :        :     +- * ColumnarToRow (2)
                        :              :        :        +- Scan parquet default.web_sales (1)
                        :              :        +- * Project (8)
                        :              :           +- * Filter (7)
                        :              :              +- * ColumnarToRow (6)
                        :              :                 +- Scan parquet default.date_dim (5)
                        :              +- * Filter (14)
                        :                 +- * ColumnarToRow (13)
                        :                    +- Scan parquet default.item (12)
                        :- * HashAggregate (24)
                        :  +- Exchange (23)
                        :     +- * HashAggregate (22)
                        :        +- * HashAggregate (21)
                        :           +- ReusedExchange (20)
                        +- * HashAggregate (29)
                           +- Exchange (28)
                              +- * HashAggregate (27)
                                 +- * HashAggregate (26)
                                    +- ReusedExchange (25)


(1) Scan parquet default.web_sales
Output [3]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#3), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_net_paid:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3]

(3) Filter [codegen id : 1]
Input [3]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3]
Condition : isnotnull(ws_item_sk#1)

(4) BroadcastExchange
Input [3]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#4]

(5) Scan parquet default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(6) ColumnarToRow
Input [2]: [d_date_sk#5, d_month_seq#6]

(7) Filter
Input [2]: [d_date_sk#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1212)) AND (d_month_seq#6 <= 1223)) AND isnotnull(d_date_sk#5))

(8) Project
Output [1]: [d_date_sk#5]
Input [2]: [d_date_sk#5, d_month_seq#6]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join condition: None

(10) Project [codegen id : 2]
Output [2]: [ws_item_sk#1, ws_net_paid#2]
Input [4]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3, d_date_sk#5]

(11) BroadcastExchange
Input [2]: [ws_item_sk#1, ws_net_paid#2]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#7]

(12) Scan parquet default.item
Output [3]: [i_item_sk#8, i_class#9, i_category#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(13) ColumnarToRow
Input [3]: [i_item_sk#8, i_class#9, i_category#10]

(14) Filter
Input [3]: [i_item_sk#8, i_class#9, i_category#10]
Condition : isnotnull(i_item_sk#8)

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ws_item_sk#1]
Right keys [1]: [i_item_sk#8]
Join condition: None

(16) Project [codegen id : 3]
Output [3]: [ws_net_paid#2, i_class#9, i_category#10]
Input [5]: [ws_item_sk#1, ws_net_paid#2, i_item_sk#8, i_class#9, i_category#10]

(17) HashAggregate [codegen id : 3]
Input [3]: [ws_net_paid#2, i_class#9, i_category#10]
Keys [2]: [i_category#10, i_class#9]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#2))]
Aggregate Attributes [1]: [sum#11]
Results [3]: [i_category#10, i_class#9, sum#12]

(18) Exchange
Input [3]: [i_category#10, i_class#9, sum#12]
Arguments: hashpartitioning(i_category#10, i_class#9, 5), ENSURE_REQUIREMENTS, [id=#13]

(19) HashAggregate [codegen id : 4]
Input [3]: [i_category#10, i_class#9, sum#12]
Keys [2]: [i_category#10, i_class#9]
Functions [1]: [sum(UnscaledValue(ws_net_paid#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#2))#14]
Results [6]: [cast(MakeDecimal(sum(UnscaledValue(ws_net_paid#2))#14,17,2) as decimal(27,2)) AS total_sum#15, i_category#10, i_class#9, 0 AS g_category#16, 0 AS g_class#17, 0 AS lochierarchy#18]

(20) ReusedExchange [Reuses operator id: 18]
Output [3]: [i_category#10, i_class#9, sum#19]

(21) HashAggregate [codegen id : 8]
Input [3]: [i_category#10, i_class#9, sum#19]
Keys [2]: [i_category#10, i_class#9]
Functions [1]: [sum(UnscaledValue(ws_net_paid#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#2))#20]
Results [2]: [MakeDecimal(sum(UnscaledValue(ws_net_paid#2))#20,17,2) AS total_sum#21, i_category#10]

(22) HashAggregate [codegen id : 8]
Input [2]: [total_sum#21, i_category#10]
Keys [1]: [i_category#10]
Functions [1]: [partial_sum(total_sum#21)]
Aggregate Attributes [2]: [sum#22, isEmpty#23]
Results [3]: [i_category#10, sum#24, isEmpty#25]

(23) Exchange
Input [3]: [i_category#10, sum#24, isEmpty#25]
Arguments: hashpartitioning(i_category#10, 5), ENSURE_REQUIREMENTS, [id=#26]

(24) HashAggregate [codegen id : 9]
Input [3]: [i_category#10, sum#24, isEmpty#25]
Keys [1]: [i_category#10]
Functions [1]: [sum(total_sum#21)]
Aggregate Attributes [1]: [sum(total_sum#21)#27]
Results [6]: [sum(total_sum#21)#27 AS total_sum#28, i_category#10, null AS i_class#29, 0 AS g_category#30, 1 AS g_class#31, 1 AS lochierarchy#32]

(25) ReusedExchange [Reuses operator id: 18]
Output [3]: [i_category#10, i_class#9, sum#33]

(26) HashAggregate [codegen id : 13]
Input [3]: [i_category#10, i_class#9, sum#33]
Keys [2]: [i_category#10, i_class#9]
Functions [1]: [sum(UnscaledValue(ws_net_paid#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#2))#34]
Results [1]: [MakeDecimal(sum(UnscaledValue(ws_net_paid#2))#34,17,2) AS total_sum#21]

(27) HashAggregate [codegen id : 13]
Input [1]: [total_sum#21]
Keys: []
Functions [1]: [partial_sum(total_sum#21)]
Aggregate Attributes [2]: [sum#35, isEmpty#36]
Results [2]: [sum#37, isEmpty#38]

(28) Exchange
Input [2]: [sum#37, isEmpty#38]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#39]

(29) HashAggregate [codegen id : 14]
Input [2]: [sum#37, isEmpty#38]
Keys: []
Functions [1]: [sum(total_sum#21)]
Aggregate Attributes [1]: [sum(total_sum#21)#40]
Results [6]: [sum(total_sum#21)#40 AS total_sum#41, null AS i_category#42, null AS i_class#43, 1 AS g_category#44, 1 AS g_class#45, 2 AS lochierarchy#46]

(30) Union

(31) HashAggregate [codegen id : 15]
Input [6]: [total_sum#15, i_category#10, i_class#9, g_category#16, g_class#17, lochierarchy#18]
Keys [6]: [total_sum#15, i_category#10, i_class#9, g_category#16, g_class#17, lochierarchy#18]
Functions: []
Aggregate Attributes: []
Results [6]: [total_sum#15, i_category#10, i_class#9, g_category#16, g_class#17, lochierarchy#18]

(32) Exchange
Input [6]: [total_sum#15, i_category#10, i_class#9, g_category#16, g_class#17, lochierarchy#18]
Arguments: hashpartitioning(total_sum#15, i_category#10, i_class#9, g_category#16, g_class#17, lochierarchy#18, 5), ENSURE_REQUIREMENTS, [id=#47]

(33) HashAggregate [codegen id : 16]
Input [6]: [total_sum#15, i_category#10, i_class#9, g_category#16, g_class#17, lochierarchy#18]
Keys [6]: [total_sum#15, i_category#10, i_class#9, g_category#16, g_class#17, lochierarchy#18]
Functions: []
Aggregate Attributes: []
Results [5]: [total_sum#15, i_category#10, i_class#9, lochierarchy#18, CASE WHEN (g_class#17 = 0) THEN i_category#10 END AS _w0#48]

(34) Exchange
Input [5]: [total_sum#15, i_category#10, i_class#9, lochierarchy#18, _w0#48]
Arguments: hashpartitioning(lochierarchy#18, _w0#48, 5), ENSURE_REQUIREMENTS, [id=#49]

(35) Sort [codegen id : 17]
Input [5]: [total_sum#15, i_category#10, i_class#9, lochierarchy#18, _w0#48]
Arguments: [lochierarchy#18 ASC NULLS FIRST, _w0#48 ASC NULLS FIRST, total_sum#15 DESC NULLS LAST], false, 0

(36) Window
Input [5]: [total_sum#15, i_category#10, i_class#9, lochierarchy#18, _w0#48]
Arguments: [rank(total_sum#15) windowspecdefinition(lochierarchy#18, _w0#48, total_sum#15 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#50], [lochierarchy#18, _w0#48], [total_sum#15 DESC NULLS LAST]

(37) Project [codegen id : 18]
Output [5]: [total_sum#15, i_category#10, i_class#9, lochierarchy#18, rank_within_parent#50]
Input [6]: [total_sum#15, i_category#10, i_class#9, lochierarchy#18, _w0#48, rank_within_parent#50]

(38) TakeOrderedAndProject
Input [5]: [total_sum#15, i_category#10, i_class#9, lochierarchy#18, rank_within_parent#50]
Arguments: 100, [lochierarchy#18 DESC NULLS LAST, CASE WHEN (lochierarchy#18 = 0) THEN i_category#10 END ASC NULLS FIRST, rank_within_parent#50 ASC NULLS FIRST], [total_sum#15, i_category#10, i_class#9, lochierarchy#18, rank_within_parent#50]

