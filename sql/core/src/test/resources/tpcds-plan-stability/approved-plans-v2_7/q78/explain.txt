== Physical Plan ==
TakeOrderedAndProject (79)
+- * Project (78)
   +- * SortMergeJoin Inner (77)
      :- * Project (51)
      :  +- * SortMergeJoin Inner (50)
      :     :- * Sort (24)
      :     :  +- * HashAggregate (23)
      :     :     +- Exchange (22)
      :     :        +- * HashAggregate (21)
      :     :           +- * Project (20)
      :     :              +- * BroadcastHashJoin Inner BuildRight (19)
      :     :                 :- * Project (17)
      :     :                 :  +- * Filter (16)
      :     :                 :     +- * SortMergeJoin LeftOuter (15)
      :     :                 :        :- * Sort (5)
      :     :                 :        :  +- Exchange (4)
      :     :                 :        :     +- * Filter (3)
      :     :                 :        :        +- * ColumnarToRow (2)
      :     :                 :        :           +- Scan parquet default.store_sales (1)
      :     :                 :        +- * Sort (14)
      :     :                 :           +- Exchange (13)
      :     :                 :              +- * BroadcastHashJoin LeftSemi BuildRight (12)
      :     :                 :                 :- * Project (9)
      :     :                 :                 :  +- * Filter (8)
      :     :                 :                 :     +- * ColumnarToRow (7)
      :     :                 :                 :        +- Scan parquet default.store_returns (6)
      :     :                 :                 +- BroadcastExchange (11)
      :     :                 :                    +- ReusedExchange (10)
      :     :                 +- ReusedExchange (18)
      :     +- * Sort (49)
      :        +- * Filter (48)
      :           +- * HashAggregate (47)
      :              +- Exchange (46)
      :                 +- * HashAggregate (45)
      :                    +- * Project (44)
      :                       +- * BroadcastHashJoin Inner BuildRight (43)
      :                          :- * Project (41)
      :                          :  +- * Filter (40)
      :                          :     +- * SortMergeJoin LeftOuter (39)
      :                          :        :- * Sort (29)
      :                          :        :  +- Exchange (28)
      :                          :        :     +- * Filter (27)
      :                          :        :        +- * ColumnarToRow (26)
      :                          :        :           +- Scan parquet default.web_sales (25)
      :                          :        +- * Sort (38)
      :                          :           +- Exchange (37)
      :                          :              +- * BroadcastHashJoin LeftSemi BuildRight (36)
      :                          :                 :- * Project (33)
      :                          :                 :  +- * Filter (32)
      :                          :                 :     +- * ColumnarToRow (31)
      :                          :                 :        +- Scan parquet default.web_returns (30)
      :                          :                 +- BroadcastExchange (35)
      :                          :                    +- ReusedExchange (34)
      :                          +- ReusedExchange (42)
      +- * Sort (76)
         +- * Filter (75)
            +- * HashAggregate (74)
               +- Exchange (73)
                  +- * HashAggregate (72)
                     +- * Project (71)
                        +- * BroadcastHashJoin Inner BuildRight (70)
                           :- * Project (68)
                           :  +- * Filter (67)
                           :     +- * SortMergeJoin LeftOuter (66)
                           :        :- * Sort (56)
                           :        :  +- Exchange (55)
                           :        :     +- * Filter (54)
                           :        :        +- * ColumnarToRow (53)
                           :        :           +- Scan parquet default.catalog_sales (52)
                           :        +- * Sort (65)
                           :           +- Exchange (64)
                           :              +- * BroadcastHashJoin LeftSemi BuildRight (63)
                           :                 :- * Project (60)
                           :                 :  +- * Filter (59)
                           :                 :     +- * ColumnarToRow (58)
                           :                 :        +- Scan parquet default.catalog_returns (57)
                           :                 +- BroadcastExchange (62)
                           :                    +- ReusedExchange (61)
                           +- ReusedExchange (69)


(1) Scan parquet default.store_sales
Output [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]

(3) Filter [codegen id : 1]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Condition : (isnotnull(ss_item_sk#1) AND isnotnull(ss_customer_sk#2))

(4) Exchange
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Arguments: hashpartitioning(ss_ticket_number#3, ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#9]

(5) Sort [codegen id : 2]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Arguments: [ss_ticket_number#3 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_returns
Output [3]: [sr_item_sk#10, sr_ticket_number#11, sr_returned_date_sk#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(7) ColumnarToRow [codegen id : 4]
Input [3]: [sr_item_sk#10, sr_ticket_number#11, sr_returned_date_sk#12]

(8) Filter [codegen id : 4]
Input [3]: [sr_item_sk#10, sr_ticket_number#11, sr_returned_date_sk#12]
Condition : (isnotnull(sr_ticket_number#11) AND isnotnull(sr_item_sk#10))

(9) Project [codegen id : 4]
Output [2]: [sr_item_sk#10, sr_ticket_number#11]
Input [3]: [sr_item_sk#10, sr_ticket_number#11, sr_returned_date_sk#12]

(10) ReusedExchange [Reuses operator id: 4]
Output [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]

(11) BroadcastExchange
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[2, int, true] as bigint), 32) | (cast(input[0, int, false] as bigint) & 4294967295))),false), [id=#13]

(12) BroadcastHashJoin [codegen id : 4]
Left keys [2]: [sr_ticket_number#11, sr_item_sk#10]
Right keys [2]: [ss_ticket_number#3, ss_item_sk#1]
Join condition: None

(13) Exchange
Input [2]: [sr_item_sk#10, sr_ticket_number#11]
Arguments: hashpartitioning(sr_ticket_number#11, sr_item_sk#10, 5), ENSURE_REQUIREMENTS, [id=#14]

(14) Sort [codegen id : 5]
Input [2]: [sr_item_sk#10, sr_ticket_number#11]
Arguments: [sr_ticket_number#11 ASC NULLS FIRST, sr_item_sk#10 ASC NULLS FIRST], false, 0

(15) SortMergeJoin [codegen id : 7]
Left keys [2]: [ss_ticket_number#3, ss_item_sk#1]
Right keys [2]: [sr_ticket_number#11, sr_item_sk#10]
Join condition: None

(16) Filter [codegen id : 7]
Input [9]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7, sr_item_sk#10, sr_ticket_number#11]
Condition : isnull(sr_ticket_number#11)

(17) Project [codegen id : 7]
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Input [9]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7, sr_item_sk#10, sr_ticket_number#11]

(18) ReusedExchange [Reuses operator id: 83]
Output [2]: [d_date_sk#15, d_year#16]

(19) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#15]
Join condition: None

(20) Project [codegen id : 7]
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, d_year#16]
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7, d_date_sk#15, d_year#16]

(21) HashAggregate [codegen id : 7]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, d_year#16]
Keys [3]: [d_year#16, ss_item_sk#1, ss_customer_sk#2]
Functions [3]: [partial_sum(ss_quantity#4), partial_sum(UnscaledValue(ss_wholesale_cost#5)), partial_sum(UnscaledValue(ss_sales_price#6))]
Aggregate Attributes [3]: [sum#17, sum#18, sum#19]
Results [6]: [d_year#16, ss_item_sk#1, ss_customer_sk#2, sum#20, sum#21, sum#22]

(22) Exchange
Input [6]: [d_year#16, ss_item_sk#1, ss_customer_sk#2, sum#20, sum#21, sum#22]
Arguments: hashpartitioning(d_year#16, ss_item_sk#1, ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#23]

(23) HashAggregate [codegen id : 8]
Input [6]: [d_year#16, ss_item_sk#1, ss_customer_sk#2, sum#20, sum#21, sum#22]
Keys [3]: [d_year#16, ss_item_sk#1, ss_customer_sk#2]
Functions [3]: [sum(ss_quantity#4), sum(UnscaledValue(ss_wholesale_cost#5)), sum(UnscaledValue(ss_sales_price#6))]
Aggregate Attributes [3]: [sum(ss_quantity#4)#24, sum(UnscaledValue(ss_wholesale_cost#5))#25, sum(UnscaledValue(ss_sales_price#6))#26]
Results [6]: [d_year#16 AS ss_sold_year#27, ss_item_sk#1, ss_customer_sk#2, sum(ss_quantity#4)#24 AS ss_qty#28, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#5))#25,17,2) AS ss_wc#29, MakeDecimal(sum(UnscaledValue(ss_sales_price#6))#26,17,2) AS ss_sp#30]

(24) Sort [codegen id : 8]
Input [6]: [ss_sold_year#27, ss_item_sk#1, ss_customer_sk#2, ss_qty#28, ss_wc#29, ss_sp#30]
Arguments: [ss_sold_year#27 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST, ss_customer_sk#2 ASC NULLS FIRST], false, 0

(25) Scan parquet default.web_sales
Output [7]: [ws_item_sk#31, ws_bill_customer_sk#32, ws_order_number#33, ws_quantity#34, ws_wholesale_cost#35, ws_sales_price#36, ws_sold_date_sk#37]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#37), dynamicpruningexpression(ws_sold_date_sk#37 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_order_number:int,ws_quantity:int,ws_wholesale_cost:decimal(7,2),ws_sales_price:decimal(7,2)>

(26) ColumnarToRow [codegen id : 9]
Input [7]: [ws_item_sk#31, ws_bill_customer_sk#32, ws_order_number#33, ws_quantity#34, ws_wholesale_cost#35, ws_sales_price#36, ws_sold_date_sk#37]

(27) Filter [codegen id : 9]
Input [7]: [ws_item_sk#31, ws_bill_customer_sk#32, ws_order_number#33, ws_quantity#34, ws_wholesale_cost#35, ws_sales_price#36, ws_sold_date_sk#37]
Condition : (isnotnull(ws_item_sk#31) AND isnotnull(ws_bill_customer_sk#32))

(28) Exchange
Input [7]: [ws_item_sk#31, ws_bill_customer_sk#32, ws_order_number#33, ws_quantity#34, ws_wholesale_cost#35, ws_sales_price#36, ws_sold_date_sk#37]
Arguments: hashpartitioning(ws_order_number#33, ws_item_sk#31, 5), ENSURE_REQUIREMENTS, [id=#38]

(29) Sort [codegen id : 10]
Input [7]: [ws_item_sk#31, ws_bill_customer_sk#32, ws_order_number#33, ws_quantity#34, ws_wholesale_cost#35, ws_sales_price#36, ws_sold_date_sk#37]
Arguments: [ws_order_number#33 ASC NULLS FIRST, ws_item_sk#31 ASC NULLS FIRST], false, 0

(30) Scan parquet default.web_returns
Output [3]: [wr_item_sk#39, wr_order_number#40, wr_returned_date_sk#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_order_number), IsNotNull(wr_item_sk)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int>

(31) ColumnarToRow [codegen id : 12]
Input [3]: [wr_item_sk#39, wr_order_number#40, wr_returned_date_sk#41]

(32) Filter [codegen id : 12]
Input [3]: [wr_item_sk#39, wr_order_number#40, wr_returned_date_sk#41]
Condition : (isnotnull(wr_order_number#40) AND isnotnull(wr_item_sk#39))

(33) Project [codegen id : 12]
Output [2]: [wr_item_sk#39, wr_order_number#40]
Input [3]: [wr_item_sk#39, wr_order_number#40, wr_returned_date_sk#41]

(34) ReusedExchange [Reuses operator id: 28]
Output [7]: [ws_item_sk#31, ws_bill_customer_sk#32, ws_order_number#33, ws_quantity#34, ws_wholesale_cost#35, ws_sales_price#36, ws_sold_date_sk#37]

(35) BroadcastExchange
Input [7]: [ws_item_sk#31, ws_bill_customer_sk#32, ws_order_number#33, ws_quantity#34, ws_wholesale_cost#35, ws_sales_price#36, ws_sold_date_sk#37]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[2, int, true] as bigint), 32) | (cast(input[0, int, false] as bigint) & 4294967295))),false), [id=#42]

(36) BroadcastHashJoin [codegen id : 12]
Left keys [2]: [wr_order_number#40, wr_item_sk#39]
Right keys [2]: [ws_order_number#33, ws_item_sk#31]
Join condition: None

(37) Exchange
Input [2]: [wr_item_sk#39, wr_order_number#40]
Arguments: hashpartitioning(wr_order_number#40, wr_item_sk#39, 5), ENSURE_REQUIREMENTS, [id=#43]

(38) Sort [codegen id : 13]
Input [2]: [wr_item_sk#39, wr_order_number#40]
Arguments: [wr_order_number#40 ASC NULLS FIRST, wr_item_sk#39 ASC NULLS FIRST], false, 0

(39) SortMergeJoin [codegen id : 15]
Left keys [2]: [ws_order_number#33, ws_item_sk#31]
Right keys [2]: [wr_order_number#40, wr_item_sk#39]
Join condition: None

(40) Filter [codegen id : 15]
Input [9]: [ws_item_sk#31, ws_bill_customer_sk#32, ws_order_number#33, ws_quantity#34, ws_wholesale_cost#35, ws_sales_price#36, ws_sold_date_sk#37, wr_item_sk#39, wr_order_number#40]
Condition : isnull(wr_order_number#40)

(41) Project [codegen id : 15]
Output [6]: [ws_item_sk#31, ws_bill_customer_sk#32, ws_quantity#34, ws_wholesale_cost#35, ws_sales_price#36, ws_sold_date_sk#37]
Input [9]: [ws_item_sk#31, ws_bill_customer_sk#32, ws_order_number#33, ws_quantity#34, ws_wholesale_cost#35, ws_sales_price#36, ws_sold_date_sk#37, wr_item_sk#39, wr_order_number#40]

(42) ReusedExchange [Reuses operator id: 83]
Output [2]: [d_date_sk#44, d_year#45]

(43) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [ws_sold_date_sk#37]
Right keys [1]: [d_date_sk#44]
Join condition: None

(44) Project [codegen id : 15]
Output [6]: [ws_item_sk#31, ws_bill_customer_sk#32, ws_quantity#34, ws_wholesale_cost#35, ws_sales_price#36, d_year#45]
Input [8]: [ws_item_sk#31, ws_bill_customer_sk#32, ws_quantity#34, ws_wholesale_cost#35, ws_sales_price#36, ws_sold_date_sk#37, d_date_sk#44, d_year#45]

(45) HashAggregate [codegen id : 15]
Input [6]: [ws_item_sk#31, ws_bill_customer_sk#32, ws_quantity#34, ws_wholesale_cost#35, ws_sales_price#36, d_year#45]
Keys [3]: [d_year#45, ws_item_sk#31, ws_bill_customer_sk#32]
Functions [3]: [partial_sum(ws_quantity#34), partial_sum(UnscaledValue(ws_wholesale_cost#35)), partial_sum(UnscaledValue(ws_sales_price#36))]
Aggregate Attributes [3]: [sum#46, sum#47, sum#48]
Results [6]: [d_year#45, ws_item_sk#31, ws_bill_customer_sk#32, sum#49, sum#50, sum#51]

(46) Exchange
Input [6]: [d_year#45, ws_item_sk#31, ws_bill_customer_sk#32, sum#49, sum#50, sum#51]
Arguments: hashpartitioning(d_year#45, ws_item_sk#31, ws_bill_customer_sk#32, 5), ENSURE_REQUIREMENTS, [id=#52]

(47) HashAggregate [codegen id : 16]
Input [6]: [d_year#45, ws_item_sk#31, ws_bill_customer_sk#32, sum#49, sum#50, sum#51]
Keys [3]: [d_year#45, ws_item_sk#31, ws_bill_customer_sk#32]
Functions [3]: [sum(ws_quantity#34), sum(UnscaledValue(ws_wholesale_cost#35)), sum(UnscaledValue(ws_sales_price#36))]
Aggregate Attributes [3]: [sum(ws_quantity#34)#53, sum(UnscaledValue(ws_wholesale_cost#35))#54, sum(UnscaledValue(ws_sales_price#36))#55]
Results [6]: [d_year#45 AS ws_sold_year#56, ws_item_sk#31, ws_bill_customer_sk#32 AS ws_customer_sk#57, sum(ws_quantity#34)#53 AS ws_qty#58, MakeDecimal(sum(UnscaledValue(ws_wholesale_cost#35))#54,17,2) AS ws_wc#59, MakeDecimal(sum(UnscaledValue(ws_sales_price#36))#55,17,2) AS ws_sp#60]

(48) Filter [codegen id : 16]
Input [6]: [ws_sold_year#56, ws_item_sk#31, ws_customer_sk#57, ws_qty#58, ws_wc#59, ws_sp#60]
Condition : (coalesce(ws_qty#58, 0) > 0)

(49) Sort [codegen id : 16]
Input [6]: [ws_sold_year#56, ws_item_sk#31, ws_customer_sk#57, ws_qty#58, ws_wc#59, ws_sp#60]
Arguments: [ws_sold_year#56 ASC NULLS FIRST, ws_item_sk#31 ASC NULLS FIRST, ws_customer_sk#57 ASC NULLS FIRST], false, 0

(50) SortMergeJoin [codegen id : 17]
Left keys [3]: [ss_sold_year#27, ss_item_sk#1, ss_customer_sk#2]
Right keys [3]: [ws_sold_year#56, ws_item_sk#31, ws_customer_sk#57]
Join condition: None

(51) Project [codegen id : 17]
Output [9]: [ss_sold_year#27, ss_item_sk#1, ss_customer_sk#2, ss_qty#28, ss_wc#29, ss_sp#30, ws_qty#58, ws_wc#59, ws_sp#60]
Input [12]: [ss_sold_year#27, ss_item_sk#1, ss_customer_sk#2, ss_qty#28, ss_wc#29, ss_sp#30, ws_sold_year#56, ws_item_sk#31, ws_customer_sk#57, ws_qty#58, ws_wc#59, ws_sp#60]

(52) Scan parquet default.catalog_sales
Output [7]: [cs_bill_customer_sk#61, cs_item_sk#62, cs_order_number#63, cs_quantity#64, cs_wholesale_cost#65, cs_sales_price#66, cs_sold_date_sk#67]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#67), dynamicpruningexpression(cs_sold_date_sk#67 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_order_number:int,cs_quantity:int,cs_wholesale_cost:decimal(7,2),cs_sales_price:decimal(7,2)>

(53) ColumnarToRow [codegen id : 18]
Input [7]: [cs_bill_customer_sk#61, cs_item_sk#62, cs_order_number#63, cs_quantity#64, cs_wholesale_cost#65, cs_sales_price#66, cs_sold_date_sk#67]

(54) Filter [codegen id : 18]
Input [7]: [cs_bill_customer_sk#61, cs_item_sk#62, cs_order_number#63, cs_quantity#64, cs_wholesale_cost#65, cs_sales_price#66, cs_sold_date_sk#67]
Condition : (isnotnull(cs_item_sk#62) AND isnotnull(cs_bill_customer_sk#61))

(55) Exchange
Input [7]: [cs_bill_customer_sk#61, cs_item_sk#62, cs_order_number#63, cs_quantity#64, cs_wholesale_cost#65, cs_sales_price#66, cs_sold_date_sk#67]
Arguments: hashpartitioning(cs_order_number#63, cs_item_sk#62, 5), ENSURE_REQUIREMENTS, [id=#68]

(56) Sort [codegen id : 19]
Input [7]: [cs_bill_customer_sk#61, cs_item_sk#62, cs_order_number#63, cs_quantity#64, cs_wholesale_cost#65, cs_sales_price#66, cs_sold_date_sk#67]
Arguments: [cs_order_number#63 ASC NULLS FIRST, cs_item_sk#62 ASC NULLS FIRST], false, 0

(57) Scan parquet default.catalog_returns
Output [3]: [cr_item_sk#69, cr_order_number#70, cr_returned_date_sk#71]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int>

(58) ColumnarToRow [codegen id : 21]
Input [3]: [cr_item_sk#69, cr_order_number#70, cr_returned_date_sk#71]

(59) Filter [codegen id : 21]
Input [3]: [cr_item_sk#69, cr_order_number#70, cr_returned_date_sk#71]
Condition : (isnotnull(cr_order_number#70) AND isnotnull(cr_item_sk#69))

(60) Project [codegen id : 21]
Output [2]: [cr_item_sk#69, cr_order_number#70]
Input [3]: [cr_item_sk#69, cr_order_number#70, cr_returned_date_sk#71]

(61) ReusedExchange [Reuses operator id: 55]
Output [7]: [cs_bill_customer_sk#61, cs_item_sk#62, cs_order_number#63, cs_quantity#64, cs_wholesale_cost#65, cs_sales_price#66, cs_sold_date_sk#67]

(62) BroadcastExchange
Input [7]: [cs_bill_customer_sk#61, cs_item_sk#62, cs_order_number#63, cs_quantity#64, cs_wholesale_cost#65, cs_sales_price#66, cs_sold_date_sk#67]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[2, int, true] as bigint), 32) | (cast(input[1, int, false] as bigint) & 4294967295))),false), [id=#72]

(63) BroadcastHashJoin [codegen id : 21]
Left keys [2]: [cr_order_number#70, cr_item_sk#69]
Right keys [2]: [cs_order_number#63, cs_item_sk#62]
Join condition: None

(64) Exchange
Input [2]: [cr_item_sk#69, cr_order_number#70]
Arguments: hashpartitioning(cr_order_number#70, cr_item_sk#69, 5), ENSURE_REQUIREMENTS, [id=#73]

(65) Sort [codegen id : 22]
Input [2]: [cr_item_sk#69, cr_order_number#70]
Arguments: [cr_order_number#70 ASC NULLS FIRST, cr_item_sk#69 ASC NULLS FIRST], false, 0

(66) SortMergeJoin [codegen id : 24]
Left keys [2]: [cs_order_number#63, cs_item_sk#62]
Right keys [2]: [cr_order_number#70, cr_item_sk#69]
Join condition: None

(67) Filter [codegen id : 24]
Input [9]: [cs_bill_customer_sk#61, cs_item_sk#62, cs_order_number#63, cs_quantity#64, cs_wholesale_cost#65, cs_sales_price#66, cs_sold_date_sk#67, cr_item_sk#69, cr_order_number#70]
Condition : isnull(cr_order_number#70)

(68) Project [codegen id : 24]
Output [6]: [cs_bill_customer_sk#61, cs_item_sk#62, cs_quantity#64, cs_wholesale_cost#65, cs_sales_price#66, cs_sold_date_sk#67]
Input [9]: [cs_bill_customer_sk#61, cs_item_sk#62, cs_order_number#63, cs_quantity#64, cs_wholesale_cost#65, cs_sales_price#66, cs_sold_date_sk#67, cr_item_sk#69, cr_order_number#70]

(69) ReusedExchange [Reuses operator id: 83]
Output [2]: [d_date_sk#74, d_year#75]

(70) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [cs_sold_date_sk#67]
Right keys [1]: [d_date_sk#74]
Join condition: None

(71) Project [codegen id : 24]
Output [6]: [cs_bill_customer_sk#61, cs_item_sk#62, cs_quantity#64, cs_wholesale_cost#65, cs_sales_price#66, d_year#75]
Input [8]: [cs_bill_customer_sk#61, cs_item_sk#62, cs_quantity#64, cs_wholesale_cost#65, cs_sales_price#66, cs_sold_date_sk#67, d_date_sk#74, d_year#75]

(72) HashAggregate [codegen id : 24]
Input [6]: [cs_bill_customer_sk#61, cs_item_sk#62, cs_quantity#64, cs_wholesale_cost#65, cs_sales_price#66, d_year#75]
Keys [3]: [d_year#75, cs_item_sk#62, cs_bill_customer_sk#61]
Functions [3]: [partial_sum(cs_quantity#64), partial_sum(UnscaledValue(cs_wholesale_cost#65)), partial_sum(UnscaledValue(cs_sales_price#66))]
Aggregate Attributes [3]: [sum#76, sum#77, sum#78]
Results [6]: [d_year#75, cs_item_sk#62, cs_bill_customer_sk#61, sum#79, sum#80, sum#81]

(73) Exchange
Input [6]: [d_year#75, cs_item_sk#62, cs_bill_customer_sk#61, sum#79, sum#80, sum#81]
Arguments: hashpartitioning(d_year#75, cs_item_sk#62, cs_bill_customer_sk#61, 5), ENSURE_REQUIREMENTS, [id=#82]

(74) HashAggregate [codegen id : 25]
Input [6]: [d_year#75, cs_item_sk#62, cs_bill_customer_sk#61, sum#79, sum#80, sum#81]
Keys [3]: [d_year#75, cs_item_sk#62, cs_bill_customer_sk#61]
Functions [3]: [sum(cs_quantity#64), sum(UnscaledValue(cs_wholesale_cost#65)), sum(UnscaledValue(cs_sales_price#66))]
Aggregate Attributes [3]: [sum(cs_quantity#64)#83, sum(UnscaledValue(cs_wholesale_cost#65))#84, sum(UnscaledValue(cs_sales_price#66))#85]
Results [6]: [d_year#75 AS cs_sold_year#86, cs_item_sk#62, cs_bill_customer_sk#61 AS cs_customer_sk#87, sum(cs_quantity#64)#83 AS cs_qty#88, MakeDecimal(sum(UnscaledValue(cs_wholesale_cost#65))#84,17,2) AS cs_wc#89, MakeDecimal(sum(UnscaledValue(cs_sales_price#66))#85,17,2) AS cs_sp#90]

(75) Filter [codegen id : 25]
Input [6]: [cs_sold_year#86, cs_item_sk#62, cs_customer_sk#87, cs_qty#88, cs_wc#89, cs_sp#90]
Condition : (coalesce(cs_qty#88, 0) > 0)

(76) Sort [codegen id : 25]
Input [6]: [cs_sold_year#86, cs_item_sk#62, cs_customer_sk#87, cs_qty#88, cs_wc#89, cs_sp#90]
Arguments: [cs_sold_year#86 ASC NULLS FIRST, cs_item_sk#62 ASC NULLS FIRST, cs_customer_sk#87 ASC NULLS FIRST], false, 0

(77) SortMergeJoin [codegen id : 26]
Left keys [3]: [ss_sold_year#27, ss_item_sk#1, ss_customer_sk#2]
Right keys [3]: [cs_sold_year#86, cs_item_sk#62, cs_customer_sk#87]
Join condition: None

(78) Project [codegen id : 26]
Output [13]: [round((cast(ss_qty#28 as double) / cast(coalesce((ws_qty#58 + cs_qty#88), 1) as double)), 2) AS ratio#91, ss_qty#28 AS store_qty#92, ss_wc#29 AS store_wholesale_cost#93, ss_sp#30 AS store_sales_price#94, (coalesce(ws_qty#58, 0) + coalesce(cs_qty#88, 0)) AS other_chan_qty#95, CheckOverflow((promote_precision(cast(coalesce(ws_wc#59, 0.00) as decimal(18,2))) + promote_precision(cast(coalesce(cs_wc#89, 0.00) as decimal(18,2)))), DecimalType(18,2), true) AS other_chan_wholesale_cost#96, CheckOverflow((promote_precision(cast(coalesce(ws_sp#60, 0.00) as decimal(18,2))) + promote_precision(cast(coalesce(cs_sp#90, 0.00) as decimal(18,2)))), DecimalType(18,2), true) AS other_chan_sales_price#97, ss_sold_year#27, ss_item_sk#1, ss_customer_sk#2, ss_qty#28, ss_wc#29, ss_sp#30]
Input [15]: [ss_sold_year#27, ss_item_sk#1, ss_customer_sk#2, ss_qty#28, ss_wc#29, ss_sp#30, ws_qty#58, ws_wc#59, ws_sp#60, cs_sold_year#86, cs_item_sk#62, cs_customer_sk#87, cs_qty#88, cs_wc#89, cs_sp#90]

(79) TakeOrderedAndProject
Input [13]: [ratio#91, store_qty#92, store_wholesale_cost#93, store_sales_price#94, other_chan_qty#95, other_chan_wholesale_cost#96, other_chan_sales_price#97, ss_sold_year#27, ss_item_sk#1, ss_customer_sk#2, ss_qty#28, ss_wc#29, ss_sp#30]
Arguments: 100, [ss_sold_year#27 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST, ss_customer_sk#2 ASC NULLS FIRST, ss_qty#28 DESC NULLS LAST, ss_wc#29 DESC NULLS LAST, ss_sp#30 DESC NULLS LAST, other_chan_qty#95 ASC NULLS FIRST, other_chan_wholesale_cost#96 ASC NULLS FIRST, other_chan_sales_price#97 ASC NULLS FIRST, ratio#91 ASC NULLS FIRST], [ratio#91, store_qty#92, store_wholesale_cost#93, store_sales_price#94, other_chan_qty#95, other_chan_wholesale_cost#96, other_chan_sales_price#97]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (83)
+- * Filter (82)
   +- * ColumnarToRow (81)
      +- Scan parquet default.date_dim (80)


(80) Scan parquet default.date_dim
Output [2]: [d_date_sk#15, d_year#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(81) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#15, d_year#16]

(82) Filter [codegen id : 1]
Input [2]: [d_date_sk#15, d_year#16]
Condition : ((isnotnull(d_year#16) AND (d_year#16 = 2000)) AND isnotnull(d_date_sk#15))

(83) BroadcastExchange
Input [2]: [d_date_sk#15, d_year#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#98]

Subquery:2 Hosting operator id = 25 Hosting Expression = ws_sold_date_sk#37 IN dynamicpruning#8

Subquery:3 Hosting operator id = 52 Hosting Expression = cs_sold_date_sk#67 IN dynamicpruning#8


