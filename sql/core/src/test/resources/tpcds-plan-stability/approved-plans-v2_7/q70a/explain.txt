== Physical Plan ==
TakeOrderedAndProject (62)
+- * Project (61)
   +- Window (60)
      +- * Sort (59)
         +- Exchange (58)
            +- * HashAggregate (57)
               +- Exchange (56)
                  +- * HashAggregate (55)
                     +- Union (54)
                        :- * HashAggregate (43)
                        :  +- Exchange (42)
                        :     +- * HashAggregate (41)
                        :        +- * Project (40)
                        :           +- * BroadcastHashJoin Inner BuildRight (39)
                        :              :- * Project (10)
                        :              :  +- * BroadcastHashJoin Inner BuildRight (9)
                        :              :     :- * Filter (3)
                        :              :     :  +- * ColumnarToRow (2)
                        :              :     :     +- Scan parquet default.store_sales (1)
                        :              :     +- BroadcastExchange (8)
                        :              :        +- * Project (7)
                        :              :           +- * Filter (6)
                        :              :              +- * ColumnarToRow (5)
                        :              :                 +- Scan parquet default.date_dim (4)
                        :              +- BroadcastExchange (38)
                        :                 +- * Project (37)
                        :                    +- * BroadcastHashJoin LeftSemi BuildRight (36)
                        :                       :- * Filter (13)
                        :                       :  +- * ColumnarToRow (12)
                        :                       :     +- Scan parquet default.store (11)
                        :                       +- BroadcastExchange (35)
                        :                          +- * Project (34)
                        :                             +- * Filter (33)
                        :                                +- Window (32)
                        :                                   +- * Sort (31)
                        :                                      +- Exchange (30)
                        :                                         +- * HashAggregate (29)
                        :                                            +- Exchange (28)
                        :                                               +- * HashAggregate (27)
                        :                                                  +- * Project (26)
                        :                                                     +- * BroadcastHashJoin Inner BuildRight (25)
                        :                                                        :- * Project (23)
                        :                                                        :  +- * BroadcastHashJoin Inner BuildRight (22)
                        :                                                        :     :- * Filter (16)
                        :                                                        :     :  +- * ColumnarToRow (15)
                        :                                                        :     :     +- Scan parquet default.store_sales (14)
                        :                                                        :     +- BroadcastExchange (21)
                        :                                                        :        +- * Project (20)
                        :                                                        :           +- * Filter (19)
                        :                                                        :              +- * ColumnarToRow (18)
                        :                                                        :                 +- Scan parquet default.store (17)
                        :                                                        +- ReusedExchange (24)
                        :- * HashAggregate (48)
                        :  +- Exchange (47)
                        :     +- * HashAggregate (46)
                        :        +- * HashAggregate (45)
                        :           +- ReusedExchange (44)
                        +- * HashAggregate (53)
                           +- Exchange (52)
                              +- * HashAggregate (51)
                                 +- * HashAggregate (50)
                                    +- ReusedExchange (49)


(1) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 9]
Input [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]

(3) Filter [codegen id : 9]
Input [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
Condition : (isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_store_sk#2))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#4, d_month_seq#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#4, d_month_seq#5]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#4, d_month_seq#5]
Condition : (((isnotnull(d_month_seq#5) AND (d_month_seq#5 >= 1212)) AND (d_month_seq#5 <= 1223)) AND isnotnull(d_date_sk#4))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#4]
Input [2]: [d_date_sk#4, d_month_seq#5]

(8) BroadcastExchange
Input [1]: [d_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#6]

(9) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#4]
Join condition: None

(10) Project [codegen id : 9]
Output [2]: [ss_store_sk#2, ss_net_profit#3]
Input [4]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3, d_date_sk#4]

(11) Scan parquet default.store
Output [3]: [s_store_sk#7, s_county#8, s_state#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_county:string,s_state:string>

(12) ColumnarToRow [codegen id : 8]
Input [3]: [s_store_sk#7, s_county#8, s_state#9]

(13) Filter [codegen id : 8]
Input [3]: [s_store_sk#7, s_county#8, s_state#9]
Condition : isnotnull(s_store_sk#7)

(14) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>

(15) ColumnarToRow [codegen id : 4]
Input [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]

(16) Filter [codegen id : 4]
Input [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
Condition : (isnotnull(ss_store_sk#2) AND isnotnull(ss_sold_date_sk#1))

(17) Scan parquet default.store
Output [2]: [s_store_sk#7, s_state#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(18) ColumnarToRow [codegen id : 2]
Input [2]: [s_store_sk#7, s_state#9]

(19) Filter [codegen id : 2]
Input [2]: [s_store_sk#7, s_state#9]
Condition : isnotnull(s_store_sk#7)

(20) Project [codegen id : 2]
Output [2]: [s_store_sk#7, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#9, 2, false, true) AS s_state#10]
Input [2]: [s_store_sk#7, s_state#9]

(21) BroadcastExchange
Input [2]: [s_store_sk#7, s_state#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#11]

(22) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#7]
Join condition: None

(23) Project [codegen id : 4]
Output [3]: [ss_sold_date_sk#1, ss_net_profit#3, s_state#10]
Input [5]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3, s_store_sk#7, s_state#10]

(24) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#4]

(25) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#4]
Join condition: None

(26) Project [codegen id : 4]
Output [2]: [ss_net_profit#3, s_state#10]
Input [4]: [ss_sold_date_sk#1, ss_net_profit#3, s_state#10, d_date_sk#4]

(27) HashAggregate [codegen id : 4]
Input [2]: [ss_net_profit#3, s_state#10]
Keys [1]: [s_state#10]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum#12]
Results [2]: [s_state#10, sum#13]

(28) Exchange
Input [2]: [s_state#10, sum#13]
Arguments: hashpartitioning(s_state#10, 5), ENSURE_REQUIREMENTS, [id=#14]

(29) HashAggregate [codegen id : 5]
Input [2]: [s_state#10, sum#13]
Keys [1]: [s_state#10]
Functions [1]: [sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#3))#15]
Results [3]: [s_state#10 AS s_state#16, s_state#10, MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#15,17,2) AS _w2#17]

(30) Exchange
Input [3]: [s_state#16, s_state#10, _w2#17]
Arguments: hashpartitioning(s_state#10, 5), ENSURE_REQUIREMENTS, [id=#18]

(31) Sort [codegen id : 6]
Input [3]: [s_state#16, s_state#10, _w2#17]
Arguments: [s_state#10 ASC NULLS FIRST, _w2#17 DESC NULLS LAST], false, 0

(32) Window
Input [3]: [s_state#16, s_state#10, _w2#17]
Arguments: [rank(_w2#17) windowspecdefinition(s_state#10, _w2#17 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#19], [s_state#10], [_w2#17 DESC NULLS LAST]

(33) Filter [codegen id : 7]
Input [4]: [s_state#16, s_state#10, _w2#17, ranking#19]
Condition : (isnotnull(ranking#19) AND (ranking#19 <= 5))

(34) Project [codegen id : 7]
Output [1]: [s_state#16]
Input [4]: [s_state#16, s_state#10, _w2#17, ranking#19]

(35) BroadcastExchange
Input [1]: [s_state#16]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#20]

(36) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#9, 2, false, true)]
Right keys [1]: [s_state#16]
Join condition: None

(37) Project [codegen id : 8]
Output [3]: [s_store_sk#7, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_county#8, 30, false, true) AS s_county#21, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#9, 2, false, true) AS s_state#22]
Input [3]: [s_store_sk#7, s_county#8, s_state#9]

(38) BroadcastExchange
Input [3]: [s_store_sk#7, s_county#21, s_state#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#23]

(39) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#7]
Join condition: None

(40) Project [codegen id : 9]
Output [3]: [ss_net_profit#3, s_county#21, s_state#22]
Input [5]: [ss_store_sk#2, ss_net_profit#3, s_store_sk#7, s_county#21, s_state#22]

(41) HashAggregate [codegen id : 9]
Input [3]: [ss_net_profit#3, s_county#21, s_state#22]
Keys [2]: [s_state#22, s_county#21]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum#24]
Results [3]: [s_state#22, s_county#21, sum#25]

(42) Exchange
Input [3]: [s_state#22, s_county#21, sum#25]
Arguments: hashpartitioning(s_state#22, s_county#21, 5), ENSURE_REQUIREMENTS, [id=#26]

(43) HashAggregate [codegen id : 10]
Input [3]: [s_state#22, s_county#21, sum#25]
Keys [2]: [s_state#22, s_county#21]
Functions [1]: [sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#3))#27]
Results [6]: [cast(MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#27,17,2) as decimal(27,2)) AS total_sum#28, s_state#22, s_county#21, 0 AS g_state#29, 0 AS g_county#30, 0 AS lochierarchy#31]

(44) ReusedExchange [Reuses operator id: 42]
Output [3]: [s_state#32, s_county#33, sum#34]

(45) HashAggregate [codegen id : 20]
Input [3]: [s_state#32, s_county#33, sum#34]
Keys [2]: [s_state#32, s_county#33]
Functions [1]: [sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#3))#35]
Results [2]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#35,17,2) AS total_sum#36, s_state#32]

(46) HashAggregate [codegen id : 20]
Input [2]: [total_sum#36, s_state#32]
Keys [1]: [s_state#32]
Functions [1]: [partial_sum(total_sum#36)]
Aggregate Attributes [2]: [sum#37, isEmpty#38]
Results [3]: [s_state#32, sum#39, isEmpty#40]

(47) Exchange
Input [3]: [s_state#32, sum#39, isEmpty#40]
Arguments: hashpartitioning(s_state#32, 5), ENSURE_REQUIREMENTS, [id=#41]

(48) HashAggregate [codegen id : 21]
Input [3]: [s_state#32, sum#39, isEmpty#40]
Keys [1]: [s_state#32]
Functions [1]: [sum(total_sum#36)]
Aggregate Attributes [1]: [sum(total_sum#36)#42]
Results [6]: [sum(total_sum#36)#42 AS total_sum#43, s_state#32 AS s_state#44, null AS s_county#45, 0 AS g_state#46, 1 AS g_county#47, 1 AS lochierarchy#48]

(49) ReusedExchange [Reuses operator id: 42]
Output [3]: [s_state#49, s_county#50, sum#51]

(50) HashAggregate [codegen id : 31]
Input [3]: [s_state#49, s_county#50, sum#51]
Keys [2]: [s_state#49, s_county#50]
Functions [1]: [sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#3))#52]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#52,17,2) AS total_sum#36]

(51) HashAggregate [codegen id : 31]
Input [1]: [total_sum#36]
Keys: []
Functions [1]: [partial_sum(total_sum#36)]
Aggregate Attributes [2]: [sum#53, isEmpty#54]
Results [2]: [sum#55, isEmpty#56]

(52) Exchange
Input [2]: [sum#55, isEmpty#56]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#57]

(53) HashAggregate [codegen id : 32]
Input [2]: [sum#55, isEmpty#56]
Keys: []
Functions [1]: [sum(total_sum#36)]
Aggregate Attributes [1]: [sum(total_sum#36)#58]
Results [6]: [sum(total_sum#36)#58 AS total_sum#59, null AS s_state#60, null AS s_county#61, 1 AS g_state#62, 1 AS g_county#63, 2 AS lochierarchy#64]

(54) Union

(55) HashAggregate [codegen id : 33]
Input [6]: [total_sum#28, s_state#22, s_county#21, g_state#29, g_county#30, lochierarchy#31]
Keys [6]: [total_sum#28, s_state#22, s_county#21, g_state#29, g_county#30, lochierarchy#31]
Functions: []
Aggregate Attributes: []
Results [6]: [total_sum#28, s_state#22, s_county#21, g_state#29, g_county#30, lochierarchy#31]

(56) Exchange
Input [6]: [total_sum#28, s_state#22, s_county#21, g_state#29, g_county#30, lochierarchy#31]
Arguments: hashpartitioning(total_sum#28, s_state#22, s_county#21, g_state#29, g_county#30, lochierarchy#31, 5), ENSURE_REQUIREMENTS, [id=#65]

(57) HashAggregate [codegen id : 34]
Input [6]: [total_sum#28, s_state#22, s_county#21, g_state#29, g_county#30, lochierarchy#31]
Keys [6]: [total_sum#28, s_state#22, s_county#21, g_state#29, g_county#30, lochierarchy#31]
Functions: []
Aggregate Attributes: []
Results [5]: [total_sum#28, s_state#22, s_county#21, lochierarchy#31, CASE WHEN (g_county#30 = 0) THEN s_state#22 END AS _w0#66]

(58) Exchange
Input [5]: [total_sum#28, s_state#22, s_county#21, lochierarchy#31, _w0#66]
Arguments: hashpartitioning(lochierarchy#31, _w0#66, 5), ENSURE_REQUIREMENTS, [id=#67]

(59) Sort [codegen id : 35]
Input [5]: [total_sum#28, s_state#22, s_county#21, lochierarchy#31, _w0#66]
Arguments: [lochierarchy#31 ASC NULLS FIRST, _w0#66 ASC NULLS FIRST, total_sum#28 DESC NULLS LAST], false, 0

(60) Window
Input [5]: [total_sum#28, s_state#22, s_county#21, lochierarchy#31, _w0#66]
Arguments: [rank(total_sum#28) windowspecdefinition(lochierarchy#31, _w0#66, total_sum#28 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#68], [lochierarchy#31, _w0#66], [total_sum#28 DESC NULLS LAST]

(61) Project [codegen id : 36]
Output [5]: [total_sum#28, s_state#22, s_county#21, lochierarchy#31, rank_within_parent#68]
Input [6]: [total_sum#28, s_state#22, s_county#21, lochierarchy#31, _w0#66, rank_within_parent#68]

(62) TakeOrderedAndProject
Input [5]: [total_sum#28, s_state#22, s_county#21, lochierarchy#31, rank_within_parent#68]
Arguments: 100, [lochierarchy#31 DESC NULLS LAST, CASE WHEN (lochierarchy#31 = 0) THEN s_state#22 END ASC NULLS FIRST, rank_within_parent#68 ASC NULLS FIRST], [total_sum#28, s_state#22, s_county#21, lochierarchy#31, rank_within_parent#68]

