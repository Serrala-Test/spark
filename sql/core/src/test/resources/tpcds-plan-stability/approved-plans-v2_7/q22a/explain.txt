== Physical Plan ==
TakeOrderedAndProject (48)
+- Union (47)
   :- * HashAggregate (26)
   :  +- * HashAggregate (25)
   :     +- Exchange (24)
   :        +- * HashAggregate (23)
   :           +- * Project (22)
   :              +- * BroadcastHashJoin Inner BuildRight (21)
   :                 :- * Project (16)
   :                 :  +- * BroadcastHashJoin Inner BuildRight (15)
   :                 :     :- * Project (10)
   :                 :     :  +- * BroadcastHashJoin Inner BuildRight (9)
   :                 :     :     :- * Filter (3)
   :                 :     :     :  +- * ColumnarToRow (2)
   :                 :     :     :     +- Scan parquet default.inventory (1)
   :                 :     :     +- BroadcastExchange (8)
   :                 :     :        +- * Project (7)
   :                 :     :           +- * Filter (6)
   :                 :     :              +- * ColumnarToRow (5)
   :                 :     :                 +- Scan parquet default.date_dim (4)
   :                 :     +- BroadcastExchange (14)
   :                 :        +- * Filter (13)
   :                 :           +- * ColumnarToRow (12)
   :                 :              +- Scan parquet default.item (11)
   :                 +- BroadcastExchange (20)
   :                    +- * Filter (19)
   :                       +- * ColumnarToRow (18)
   :                          +- Scan parquet default.warehouse (17)
   :- * HashAggregate (31)
   :  +- Exchange (30)
   :     +- * HashAggregate (29)
   :        +- * HashAggregate (28)
   :           +- ReusedExchange (27)
   :- * HashAggregate (36)
   :  +- Exchange (35)
   :     +- * HashAggregate (34)
   :        +- * HashAggregate (33)
   :           +- ReusedExchange (32)
   :- * HashAggregate (41)
   :  +- Exchange (40)
   :     +- * HashAggregate (39)
   :        +- * HashAggregate (38)
   :           +- ReusedExchange (37)
   +- * HashAggregate (46)
      +- Exchange (45)
         +- * HashAggregate (44)
            +- * HashAggregate (43)
               +- ReusedExchange (42)


(1) Scan parquet default.inventory
Output [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/inventory]
PushedFilters: [IsNotNull(inv_date_sk), IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)]
ReadSchema: struct<inv_date_sk:int,inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(2) ColumnarToRow [codegen id : 4]
Input [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]

(3) Filter [codegen id : 4]
Input [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]
Condition : ((isnotnull(inv_date_sk#1) AND isnotnull(inv_item_sk#2)) AND isnotnull(inv_warehouse_sk#3))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#5, d_month_seq#6]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1212)) AND (d_month_seq#6 <= 1223)) AND isnotnull(d_date_sk#5))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#5]
Input [2]: [d_date_sk#5, d_month_seq#6]

(8) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#7]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_date_sk#1]
Right keys [1]: [d_date_sk#5]
Join condition: None

(10) Project [codegen id : 4]
Output [3]: [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]
Input [5]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date_sk#5]

(11) Scan parquet default.item
Output [5]: [i_item_sk#8, i_brand#9, i_class#10, i_category#11, i_product_name#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_product_name:string>

(12) ColumnarToRow [codegen id : 2]
Input [5]: [i_item_sk#8, i_brand#9, i_class#10, i_category#11, i_product_name#12]

(13) Filter [codegen id : 2]
Input [5]: [i_item_sk#8, i_brand#9, i_class#10, i_category#11, i_product_name#12]
Condition : isnotnull(i_item_sk#8)

(14) BroadcastExchange
Input [5]: [i_item_sk#8, i_brand#9, i_class#10, i_category#11, i_product_name#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13]

(15) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_item_sk#2]
Right keys [1]: [i_item_sk#8]
Join condition: None

(16) Project [codegen id : 4]
Output [6]: [inv_warehouse_sk#3, inv_quantity_on_hand#4, i_brand#9, i_class#10, i_category#11, i_product_name#12]
Input [8]: [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, i_item_sk#8, i_brand#9, i_class#10, i_category#11, i_product_name#12]

(17) Scan parquet default.warehouse
Output [1]: [w_warehouse_sk#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int>

(18) ColumnarToRow [codegen id : 3]
Input [1]: [w_warehouse_sk#14]

(19) Filter [codegen id : 3]
Input [1]: [w_warehouse_sk#14]
Condition : isnotnull(w_warehouse_sk#14)

(20) BroadcastExchange
Input [1]: [w_warehouse_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#15]

(21) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_warehouse_sk#3]
Right keys [1]: [w_warehouse_sk#14]
Join condition: None

(22) Project [codegen id : 4]
Output [5]: [inv_quantity_on_hand#4, i_brand#9, i_class#10, i_category#11, i_product_name#12]
Input [7]: [inv_warehouse_sk#3, inv_quantity_on_hand#4, i_brand#9, i_class#10, i_category#11, i_product_name#12, w_warehouse_sk#14]

(23) HashAggregate [codegen id : 4]
Input [5]: [inv_quantity_on_hand#4, i_brand#9, i_class#10, i_category#11, i_product_name#12]
Keys [4]: [i_product_name#12, i_brand#9, i_class#10, i_category#11]
Functions [1]: [partial_avg(cast(inv_quantity_on_hand#4 as bigint))]
Aggregate Attributes [2]: [sum#16, count#17]
Results [6]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, sum#18, count#19]

(24) Exchange
Input [6]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, sum#18, count#19]
Arguments: hashpartitioning(i_product_name#12, i_brand#9, i_class#10, i_category#11, 5), true, [id=#20]

(25) HashAggregate [codegen id : 5]
Input [6]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, sum#18, count#19]
Keys [4]: [i_product_name#12, i_brand#9, i_class#10, i_category#11]
Functions [1]: [avg(cast(inv_quantity_on_hand#4 as bigint))]
Aggregate Attributes [1]: [avg(cast(inv_quantity_on_hand#4 as bigint))#21]
Results [5]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, avg(cast(inv_quantity_on_hand#4 as bigint))#21 AS qoh#22]

(26) HashAggregate [codegen id : 5]
Input [5]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, qoh#22]
Keys [4]: [i_product_name#12, i_brand#9, i_class#10, i_category#11]
Functions [1]: [avg(qoh#22)]
Aggregate Attributes [1]: [avg(qoh#22)#23]
Results [5]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, avg(qoh#22)#23 AS qoh#24]

(27) ReusedExchange [Reuses operator id: 24]
Output [6]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, sum#25, count#26]

(28) HashAggregate [codegen id : 10]
Input [6]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, sum#25, count#26]
Keys [4]: [i_product_name#12, i_brand#9, i_class#10, i_category#11]
Functions [1]: [avg(cast(inv_quantity_on_hand#4 as bigint))]
Aggregate Attributes [1]: [avg(cast(inv_quantity_on_hand#4 as bigint))#27]
Results [4]: [i_product_name#12, i_brand#9, i_class#10, avg(cast(inv_quantity_on_hand#4 as bigint))#27 AS qoh#22]

(29) HashAggregate [codegen id : 10]
Input [4]: [i_product_name#12, i_brand#9, i_class#10, qoh#22]
Keys [3]: [i_product_name#12, i_brand#9, i_class#10]
Functions [1]: [partial_avg(qoh#22)]
Aggregate Attributes [2]: [sum#28, count#29]
Results [5]: [i_product_name#12, i_brand#9, i_class#10, sum#30, count#31]

(30) Exchange
Input [5]: [i_product_name#12, i_brand#9, i_class#10, sum#30, count#31]
Arguments: hashpartitioning(i_product_name#12, i_brand#9, i_class#10, 5), true, [id=#32]

(31) HashAggregate [codegen id : 11]
Input [5]: [i_product_name#12, i_brand#9, i_class#10, sum#30, count#31]
Keys [3]: [i_product_name#12, i_brand#9, i_class#10]
Functions [1]: [avg(qoh#22)]
Aggregate Attributes [1]: [avg(qoh#22)#33]
Results [5]: [i_product_name#12, i_brand#9, i_class#10, null AS i_category#34, avg(qoh#22)#33 AS qoh#35]

(32) ReusedExchange [Reuses operator id: 24]
Output [6]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, sum#36, count#37]

(33) HashAggregate [codegen id : 16]
Input [6]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, sum#36, count#37]
Keys [4]: [i_product_name#12, i_brand#9, i_class#10, i_category#11]
Functions [1]: [avg(cast(inv_quantity_on_hand#4 as bigint))]
Aggregate Attributes [1]: [avg(cast(inv_quantity_on_hand#4 as bigint))#38]
Results [3]: [i_product_name#12, i_brand#9, avg(cast(inv_quantity_on_hand#4 as bigint))#38 AS qoh#22]

(34) HashAggregate [codegen id : 16]
Input [3]: [i_product_name#12, i_brand#9, qoh#22]
Keys [2]: [i_product_name#12, i_brand#9]
Functions [1]: [partial_avg(qoh#22)]
Aggregate Attributes [2]: [sum#39, count#40]
Results [4]: [i_product_name#12, i_brand#9, sum#41, count#42]

(35) Exchange
Input [4]: [i_product_name#12, i_brand#9, sum#41, count#42]
Arguments: hashpartitioning(i_product_name#12, i_brand#9, 5), true, [id=#43]

(36) HashAggregate [codegen id : 17]
Input [4]: [i_product_name#12, i_brand#9, sum#41, count#42]
Keys [2]: [i_product_name#12, i_brand#9]
Functions [1]: [avg(qoh#22)]
Aggregate Attributes [1]: [avg(qoh#22)#44]
Results [5]: [i_product_name#12, i_brand#9, null AS i_class#45, null AS i_category#46, avg(qoh#22)#44 AS qoh#47]

(37) ReusedExchange [Reuses operator id: 24]
Output [6]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, sum#48, count#49]

(38) HashAggregate [codegen id : 22]
Input [6]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, sum#48, count#49]
Keys [4]: [i_product_name#12, i_brand#9, i_class#10, i_category#11]
Functions [1]: [avg(cast(inv_quantity_on_hand#4 as bigint))]
Aggregate Attributes [1]: [avg(cast(inv_quantity_on_hand#4 as bigint))#50]
Results [2]: [i_product_name#12, avg(cast(inv_quantity_on_hand#4 as bigint))#50 AS qoh#22]

(39) HashAggregate [codegen id : 22]
Input [2]: [i_product_name#12, qoh#22]
Keys [1]: [i_product_name#12]
Functions [1]: [partial_avg(qoh#22)]
Aggregate Attributes [2]: [sum#51, count#52]
Results [3]: [i_product_name#12, sum#53, count#54]

(40) Exchange
Input [3]: [i_product_name#12, sum#53, count#54]
Arguments: hashpartitioning(i_product_name#12, 5), true, [id=#55]

(41) HashAggregate [codegen id : 23]
Input [3]: [i_product_name#12, sum#53, count#54]
Keys [1]: [i_product_name#12]
Functions [1]: [avg(qoh#22)]
Aggregate Attributes [1]: [avg(qoh#22)#56]
Results [5]: [i_product_name#12, null AS i_brand#57, null AS i_class#58, null AS i_category#59, avg(qoh#22)#56 AS qoh#60]

(42) ReusedExchange [Reuses operator id: 24]
Output [6]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, sum#61, count#62]

(43) HashAggregate [codegen id : 28]
Input [6]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, sum#61, count#62]
Keys [4]: [i_product_name#12, i_brand#9, i_class#10, i_category#11]
Functions [1]: [avg(cast(inv_quantity_on_hand#4 as bigint))]
Aggregate Attributes [1]: [avg(cast(inv_quantity_on_hand#4 as bigint))#63]
Results [1]: [avg(cast(inv_quantity_on_hand#4 as bigint))#63 AS qoh#22]

(44) HashAggregate [codegen id : 28]
Input [1]: [qoh#22]
Keys: []
Functions [1]: [partial_avg(qoh#22)]
Aggregate Attributes [2]: [sum#64, count#65]
Results [2]: [sum#66, count#67]

(45) Exchange
Input [2]: [sum#66, count#67]
Arguments: SinglePartition, true, [id=#68]

(46) HashAggregate [codegen id : 29]
Input [2]: [sum#66, count#67]
Keys: []
Functions [1]: [avg(qoh#22)]
Aggregate Attributes [1]: [avg(qoh#22)#69]
Results [5]: [null AS i_product_name#70, null AS i_brand#71, null AS i_class#72, null AS i_category#73, avg(qoh#22)#69 AS qoh#74]

(47) Union

(48) TakeOrderedAndProject
Input [5]: [i_product_name#12, i_brand#9, i_class#10, i_category#11, qoh#24]
Arguments: 100, [qoh#24 ASC NULLS FIRST, i_product_name#12 ASC NULLS FIRST, i_brand#9 ASC NULLS FIRST, i_class#10 ASC NULLS FIRST, i_category#11 ASC NULLS FIRST], [i_product_name#12, i_brand#9, i_class#10, i_category#11, qoh#24]

