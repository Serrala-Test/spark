== Physical Plan ==
TakeOrderedAndProject (44)
+- Union (43)
   :- * HashAggregate (22)
   :  +- * HashAggregate (21)
   :     +- Exchange (20)
   :        +- * HashAggregate (19)
   :           +- * Project (18)
   :              +- * BroadcastHashJoin Inner BuildRight (17)
   :                 :- * Project (12)
   :                 :  +- * BroadcastHashJoin Inner BuildRight (11)
   :                 :     :- * Project (6)
   :                 :     :  +- * BroadcastHashJoin Inner BuildRight (5)
   :                 :     :     :- * Filter (3)
   :                 :     :     :  +- * ColumnarToRow (2)
   :                 :     :     :     +- Scan parquet spark_catalog.default.inventory (1)
   :                 :     :     +- ReusedExchange (4)
   :                 :     +- BroadcastExchange (10)
   :                 :        +- * Filter (9)
   :                 :           +- * ColumnarToRow (8)
   :                 :              +- Scan parquet spark_catalog.default.item (7)
   :                 +- BroadcastExchange (16)
   :                    +- * Filter (15)
   :                       +- * ColumnarToRow (14)
   :                          +- Scan parquet spark_catalog.default.warehouse (13)
   :- * HashAggregate (27)
   :  +- Exchange (26)
   :     +- * HashAggregate (25)
   :        +- * HashAggregate (24)
   :           +- ReusedExchange (23)
   :- * HashAggregate (32)
   :  +- Exchange (31)
   :     +- * HashAggregate (30)
   :        +- * HashAggregate (29)
   :           +- ReusedExchange (28)
   :- * HashAggregate (37)
   :  +- Exchange (36)
   :     +- * HashAggregate (35)
   :        +- * HashAggregate (34)
   :           +- ReusedExchange (33)
   +- * HashAggregate (42)
      +- Exchange (41)
         +- * HashAggregate (40)
            +- * HashAggregate (39)
               +- ReusedExchange (38)


(1) Scan parquet spark_catalog.default.inventory
Output [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(inv_date_sk#4), dynamicpruningexpression(inv_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)]
ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(2) ColumnarToRow [codegen id : 4]
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]

(3) Filter [codegen id : 4]
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Condition : (isnotnull(inv_item_sk#1) AND isnotnull(inv_warehouse_sk#2))

(4) ReusedExchange [Reuses operator id: 49]
Output [1]: [d_date_sk#6]

(5) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join type: Inner
Join condition: None

(6) Project [codegen id : 4]
Output [3]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3]
Input [5]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, d_date_sk#6]

(7) Scan parquet spark_catalog.default.item
Output [5]: [i_item_sk#7, i_brand#8, i_class#9, i_category#10, i_product_name#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_product_name:string>

(8) ColumnarToRow [codegen id : 2]
Input [5]: [i_item_sk#7, i_brand#8, i_class#9, i_category#10, i_product_name#11]

(9) Filter [codegen id : 2]
Input [5]: [i_item_sk#7, i_brand#8, i_class#9, i_category#10, i_product_name#11]
Condition : isnotnull(i_item_sk#7)

(10) BroadcastExchange
Input [5]: [i_item_sk#7, i_brand#8, i_class#9, i_category#10, i_product_name#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join type: Inner
Join condition: None

(12) Project [codegen id : 4]
Output [6]: [inv_warehouse_sk#2, inv_quantity_on_hand#3, i_brand#8, i_class#9, i_category#10, i_product_name#11]
Input [8]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, i_item_sk#7, i_brand#8, i_class#9, i_category#10, i_product_name#11]

(13) Scan parquet spark_catalog.default.warehouse
Output [1]: [w_warehouse_sk#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int>

(14) ColumnarToRow [codegen id : 3]
Input [1]: [w_warehouse_sk#12]

(15) Filter [codegen id : 3]
Input [1]: [w_warehouse_sk#12]
Condition : isnotnull(w_warehouse_sk#12)

(16) BroadcastExchange
Input [1]: [w_warehouse_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_warehouse_sk#2]
Right keys [1]: [w_warehouse_sk#12]
Join type: Inner
Join condition: None

(18) Project [codegen id : 4]
Output [5]: [inv_quantity_on_hand#3, i_brand#8, i_class#9, i_category#10, i_product_name#11]
Input [7]: [inv_warehouse_sk#2, inv_quantity_on_hand#3, i_brand#8, i_class#9, i_category#10, i_product_name#11, w_warehouse_sk#12]

(19) HashAggregate [codegen id : 4]
Input [5]: [inv_quantity_on_hand#3, i_brand#8, i_class#9, i_category#10, i_product_name#11]
Keys [4]: [i_product_name#11, i_brand#8, i_class#9, i_category#10]
Functions [1]: [partial_avg(inv_quantity_on_hand#3)]
Aggregate Attributes [2]: [sum#13, count#14]
Results [6]: [i_product_name#11, i_brand#8, i_class#9, i_category#10, sum#15, count#16]

(20) Exchange
Input [6]: [i_product_name#11, i_brand#8, i_class#9, i_category#10, sum#15, count#16]
Arguments: hashpartitioning(i_product_name#11, i_brand#8, i_class#9, i_category#10, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(21) HashAggregate [codegen id : 5]
Input [6]: [i_product_name#11, i_brand#8, i_class#9, i_category#10, sum#15, count#16]
Keys [4]: [i_product_name#11, i_brand#8, i_class#9, i_category#10]
Functions [1]: [avg(inv_quantity_on_hand#3)]
Aggregate Attributes [1]: [avg(inv_quantity_on_hand#3)#17]
Results [5]: [i_product_name#11, i_brand#8, i_class#9, i_category#10, avg(inv_quantity_on_hand#3)#17 AS qoh#18]

(22) HashAggregate [codegen id : 5]
Input [5]: [i_product_name#11, i_brand#8, i_class#9, i_category#10, qoh#18]
Keys [4]: [i_product_name#11, i_brand#8, i_class#9, i_category#10]
Functions [1]: [avg(qoh#18)]
Aggregate Attributes [1]: [avg(qoh#18)#19]
Results [5]: [i_product_name#11, i_brand#8, i_class#9, i_category#10, avg(qoh#18)#19 AS qoh#20]

(23) ReusedExchange [Reuses operator id: 20]
Output [6]: [i_product_name#21, i_brand#22, i_class#23, i_category#24, sum#25, count#26]

(24) HashAggregate [codegen id : 10]
Input [6]: [i_product_name#21, i_brand#22, i_class#23, i_category#24, sum#25, count#26]
Keys [4]: [i_product_name#21, i_brand#22, i_class#23, i_category#24]
Functions [1]: [avg(inv_quantity_on_hand#27)]
Aggregate Attributes [1]: [avg(inv_quantity_on_hand#27)#17]
Results [4]: [i_product_name#21, i_brand#22, i_class#23, avg(inv_quantity_on_hand#27)#17 AS qoh#28]

(25) HashAggregate [codegen id : 10]
Input [4]: [i_product_name#21, i_brand#22, i_class#23, qoh#28]
Keys [3]: [i_product_name#21, i_brand#22, i_class#23]
Functions [1]: [partial_avg(qoh#28)]
Aggregate Attributes [2]: [sum#29, count#30]
Results [5]: [i_product_name#21, i_brand#22, i_class#23, sum#31, count#32]

(26) Exchange
Input [5]: [i_product_name#21, i_brand#22, i_class#23, sum#31, count#32]
Arguments: hashpartitioning(i_product_name#21, i_brand#22, i_class#23, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(27) HashAggregate [codegen id : 11]
Input [5]: [i_product_name#21, i_brand#22, i_class#23, sum#31, count#32]
Keys [3]: [i_product_name#21, i_brand#22, i_class#23]
Functions [1]: [avg(qoh#28)]
Aggregate Attributes [1]: [avg(qoh#28)#33]
Results [5]: [i_product_name#21, i_brand#22, i_class#23, null AS i_category#34, avg(qoh#28)#33 AS qoh#35]

(28) ReusedExchange [Reuses operator id: 20]
Output [6]: [i_product_name#36, i_brand#37, i_class#38, i_category#39, sum#40, count#41]

(29) HashAggregate [codegen id : 16]
Input [6]: [i_product_name#36, i_brand#37, i_class#38, i_category#39, sum#40, count#41]
Keys [4]: [i_product_name#36, i_brand#37, i_class#38, i_category#39]
Functions [1]: [avg(inv_quantity_on_hand#42)]
Aggregate Attributes [1]: [avg(inv_quantity_on_hand#42)#17]
Results [3]: [i_product_name#36, i_brand#37, avg(inv_quantity_on_hand#42)#17 AS qoh#43]

(30) HashAggregate [codegen id : 16]
Input [3]: [i_product_name#36, i_brand#37, qoh#43]
Keys [2]: [i_product_name#36, i_brand#37]
Functions [1]: [partial_avg(qoh#43)]
Aggregate Attributes [2]: [sum#44, count#45]
Results [4]: [i_product_name#36, i_brand#37, sum#46, count#47]

(31) Exchange
Input [4]: [i_product_name#36, i_brand#37, sum#46, count#47]
Arguments: hashpartitioning(i_product_name#36, i_brand#37, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(32) HashAggregate [codegen id : 17]
Input [4]: [i_product_name#36, i_brand#37, sum#46, count#47]
Keys [2]: [i_product_name#36, i_brand#37]
Functions [1]: [avg(qoh#43)]
Aggregate Attributes [1]: [avg(qoh#43)#48]
Results [5]: [i_product_name#36, i_brand#37, null AS i_class#49, null AS i_category#50, avg(qoh#43)#48 AS qoh#51]

(33) ReusedExchange [Reuses operator id: 20]
Output [6]: [i_product_name#52, i_brand#53, i_class#54, i_category#55, sum#56, count#57]

(34) HashAggregate [codegen id : 22]
Input [6]: [i_product_name#52, i_brand#53, i_class#54, i_category#55, sum#56, count#57]
Keys [4]: [i_product_name#52, i_brand#53, i_class#54, i_category#55]
Functions [1]: [avg(inv_quantity_on_hand#58)]
Aggregate Attributes [1]: [avg(inv_quantity_on_hand#58)#17]
Results [2]: [i_product_name#52, avg(inv_quantity_on_hand#58)#17 AS qoh#59]

(35) HashAggregate [codegen id : 22]
Input [2]: [i_product_name#52, qoh#59]
Keys [1]: [i_product_name#52]
Functions [1]: [partial_avg(qoh#59)]
Aggregate Attributes [2]: [sum#60, count#61]
Results [3]: [i_product_name#52, sum#62, count#63]

(36) Exchange
Input [3]: [i_product_name#52, sum#62, count#63]
Arguments: hashpartitioning(i_product_name#52, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(37) HashAggregate [codegen id : 23]
Input [3]: [i_product_name#52, sum#62, count#63]
Keys [1]: [i_product_name#52]
Functions [1]: [avg(qoh#59)]
Aggregate Attributes [1]: [avg(qoh#59)#64]
Results [5]: [i_product_name#52, null AS i_brand#65, null AS i_class#66, null AS i_category#67, avg(qoh#59)#64 AS qoh#68]

(38) ReusedExchange [Reuses operator id: 20]
Output [6]: [i_product_name#69, i_brand#70, i_class#71, i_category#72, sum#73, count#74]

(39) HashAggregate [codegen id : 28]
Input [6]: [i_product_name#69, i_brand#70, i_class#71, i_category#72, sum#73, count#74]
Keys [4]: [i_product_name#69, i_brand#70, i_class#71, i_category#72]
Functions [1]: [avg(inv_quantity_on_hand#75)]
Aggregate Attributes [1]: [avg(inv_quantity_on_hand#75)#17]
Results [1]: [avg(inv_quantity_on_hand#75)#17 AS qoh#76]

(40) HashAggregate [codegen id : 28]
Input [1]: [qoh#76]
Keys: []
Functions [1]: [partial_avg(qoh#76)]
Aggregate Attributes [2]: [sum#77, count#78]
Results [2]: [sum#79, count#80]

(41) Exchange
Input [2]: [sum#79, count#80]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=7]

(42) HashAggregate [codegen id : 29]
Input [2]: [sum#79, count#80]
Keys: []
Functions [1]: [avg(qoh#76)]
Aggregate Attributes [1]: [avg(qoh#76)#81]
Results [5]: [null AS i_product_name#82, null AS i_brand#83, null AS i_class#84, null AS i_category#85, avg(qoh#76)#81 AS qoh#86]

(43) Union

(44) TakeOrderedAndProject
Input [5]: [i_product_name#11, i_brand#8, i_class#9, i_category#10, qoh#20]
Arguments: 100, [qoh#20 ASC NULLS FIRST, i_product_name#11 ASC NULLS FIRST, i_brand#8 ASC NULLS FIRST, i_class#9 ASC NULLS FIRST, i_category#10 ASC NULLS FIRST], [i_product_name#11, i_brand#8, i_class#9, i_category#10, qoh#20]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = inv_date_sk#4 IN dynamicpruning#5
BroadcastExchange (49)
+- * Project (48)
   +- * Filter (47)
      +- * ColumnarToRow (46)
         +- Scan parquet spark_catalog.default.date_dim (45)


(45) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_month_seq#87]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(46) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#6, d_month_seq#87]

(47) Filter [codegen id : 1]
Input [2]: [d_date_sk#6, d_month_seq#87]
Condition : (((isnotnull(d_month_seq#87) AND (d_month_seq#87 >= 1212)) AND (d_month_seq#87 <= 1223)) AND isnotnull(d_date_sk#6))

(48) Project [codegen id : 1]
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_month_seq#87]

(49) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]


