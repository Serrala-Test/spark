== Physical Plan ==
TakeOrderedAndProject (67)
+- * Project (66)
   +- * SortMergeJoin Inner (65)
      :- * Project (43)
      :  +- * SortMergeJoin Inner (42)
      :     :- * Sort (20)
      :     :  +- * HashAggregate (19)
      :     :     +- Exchange (18)
      :     :        +- * HashAggregate (17)
      :     :           +- * Project (16)
      :     :              +- * BroadcastHashJoin Inner BuildRight (15)
      :     :                 :- * Project (13)
      :     :                 :  +- * Filter (12)
      :     :                 :     +- * SortMergeJoin LeftOuter (11)
      :     :                 :        :- * Sort (5)
      :     :                 :        :  +- Exchange (4)
      :     :                 :        :     +- * Filter (3)
      :     :                 :        :        +- * ColumnarToRow (2)
      :     :                 :        :           +- Scan parquet default.store_sales (1)
      :     :                 :        +- * Sort (10)
      :     :                 :           +- Exchange (9)
      :     :                 :              +- * Project (8)
      :     :                 :                 +- * ColumnarToRow (7)
      :     :                 :                    +- Scan parquet default.store_returns (6)
      :     :                 +- ReusedExchange (14)
      :     +- * Sort (41)
      :        +- * Filter (40)
      :           +- * HashAggregate (39)
      :              +- Exchange (38)
      :                 +- * HashAggregate (37)
      :                    +- * Project (36)
      :                       +- * BroadcastHashJoin Inner BuildRight (35)
      :                          :- * Project (33)
      :                          :  +- * Filter (32)
      :                          :     +- * SortMergeJoin LeftOuter (31)
      :                          :        :- * Sort (25)
      :                          :        :  +- Exchange (24)
      :                          :        :     +- * Filter (23)
      :                          :        :        +- * ColumnarToRow (22)
      :                          :        :           +- Scan parquet default.web_sales (21)
      :                          :        +- * Sort (30)
      :                          :           +- Exchange (29)
      :                          :              +- * Project (28)
      :                          :                 +- * ColumnarToRow (27)
      :                          :                    +- Scan parquet default.web_returns (26)
      :                          +- ReusedExchange (34)
      +- * Sort (64)
         +- * Filter (63)
            +- * HashAggregate (62)
               +- Exchange (61)
                  +- * HashAggregate (60)
                     +- * Project (59)
                        +- * BroadcastHashJoin Inner BuildRight (58)
                           :- * Project (56)
                           :  +- * Filter (55)
                           :     +- * SortMergeJoin LeftOuter (54)
                           :        :- * Sort (48)
                           :        :  +- Exchange (47)
                           :        :     +- * Filter (46)
                           :        :        +- * ColumnarToRow (45)
                           :        :           +- Scan parquet default.catalog_sales (44)
                           :        +- * Sort (53)
                           :           +- Exchange (52)
                           :              +- * Project (51)
                           :                 +- * ColumnarToRow (50)
                           :                    +- Scan parquet default.catalog_returns (49)
                           +- ReusedExchange (57)


(1) Scan parquet default.store_sales
Output [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]

(3) Filter [codegen id : 1]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Condition : isnotnull(ss_customer_sk#2)

(4) Exchange
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Arguments: hashpartitioning(ss_ticket_number#3, ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#9]

(5) Sort [codegen id : 2]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Arguments: [ss_ticket_number#3 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_returns
Output [3]: [sr_item_sk#10, sr_ticket_number#11, sr_returned_date_sk#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(7) ColumnarToRow [codegen id : 3]
Input [3]: [sr_item_sk#10, sr_ticket_number#11, sr_returned_date_sk#12]

(8) Project [codegen id : 3]
Output [2]: [sr_item_sk#10, sr_ticket_number#11]
Input [3]: [sr_item_sk#10, sr_ticket_number#11, sr_returned_date_sk#12]

(9) Exchange
Input [2]: [sr_item_sk#10, sr_ticket_number#11]
Arguments: hashpartitioning(sr_ticket_number#11, sr_item_sk#10, 5), ENSURE_REQUIREMENTS, [id=#13]

(10) Sort [codegen id : 4]
Input [2]: [sr_item_sk#10, sr_ticket_number#11]
Arguments: [sr_ticket_number#11 ASC NULLS FIRST, sr_item_sk#10 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 6]
Left keys [2]: [ss_ticket_number#3, ss_item_sk#1]
Right keys [2]: [sr_ticket_number#11, sr_item_sk#10]
Join condition: None

(12) Filter [codegen id : 6]
Input [9]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7, sr_item_sk#10, sr_ticket_number#11]
Condition : isnull(sr_ticket_number#11)

(13) Project [codegen id : 6]
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Input [9]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7, sr_item_sk#10, sr_ticket_number#11]

(14) ReusedExchange [Reuses operator id: 71]
Output [2]: [d_date_sk#14, d_year#15]

(15) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#14]
Join condition: None

(16) Project [codegen id : 6]
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, d_year#15]
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7, d_date_sk#14, d_year#15]

(17) HashAggregate [codegen id : 6]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, d_year#15]
Keys [3]: [d_year#15, ss_item_sk#1, ss_customer_sk#2]
Functions [3]: [partial_sum(ss_quantity#4), partial_sum(UnscaledValue(ss_wholesale_cost#5)), partial_sum(UnscaledValue(ss_sales_price#6))]
Aggregate Attributes [3]: [sum#16, sum#17, sum#18]
Results [6]: [d_year#15, ss_item_sk#1, ss_customer_sk#2, sum#19, sum#20, sum#21]

(18) Exchange
Input [6]: [d_year#15, ss_item_sk#1, ss_customer_sk#2, sum#19, sum#20, sum#21]
Arguments: hashpartitioning(d_year#15, ss_item_sk#1, ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#22]

(19) HashAggregate [codegen id : 7]
Input [6]: [d_year#15, ss_item_sk#1, ss_customer_sk#2, sum#19, sum#20, sum#21]
Keys [3]: [d_year#15, ss_item_sk#1, ss_customer_sk#2]
Functions [3]: [sum(ss_quantity#4), sum(UnscaledValue(ss_wholesale_cost#5)), sum(UnscaledValue(ss_sales_price#6))]
Aggregate Attributes [3]: [sum(ss_quantity#4)#23, sum(UnscaledValue(ss_wholesale_cost#5))#24, sum(UnscaledValue(ss_sales_price#6))#25]
Results [6]: [d_year#15 AS ss_sold_year#26, ss_item_sk#1, ss_customer_sk#2, sum(ss_quantity#4)#23 AS ss_qty#27, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#5))#24,17,2) AS ss_wc#28, MakeDecimal(sum(UnscaledValue(ss_sales_price#6))#25,17,2) AS ss_sp#29]

(20) Sort [codegen id : 7]
Input [6]: [ss_sold_year#26, ss_item_sk#1, ss_customer_sk#2, ss_qty#27, ss_wc#28, ss_sp#29]
Arguments: [ss_sold_year#26 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST, ss_customer_sk#2 ASC NULLS FIRST], false, 0

(21) Scan parquet default.web_sales
Output [7]: [ws_item_sk#30, ws_bill_customer_sk#31, ws_order_number#32, ws_quantity#33, ws_wholesale_cost#34, ws_sales_price#35, ws_sold_date_sk#36]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#36), dynamicpruningexpression(ws_sold_date_sk#36 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_order_number:int,ws_quantity:int,ws_wholesale_cost:decimal(7,2),ws_sales_price:decimal(7,2)>

(22) ColumnarToRow [codegen id : 8]
Input [7]: [ws_item_sk#30, ws_bill_customer_sk#31, ws_order_number#32, ws_quantity#33, ws_wholesale_cost#34, ws_sales_price#35, ws_sold_date_sk#36]

(23) Filter [codegen id : 8]
Input [7]: [ws_item_sk#30, ws_bill_customer_sk#31, ws_order_number#32, ws_quantity#33, ws_wholesale_cost#34, ws_sales_price#35, ws_sold_date_sk#36]
Condition : isnotnull(ws_bill_customer_sk#31)

(24) Exchange
Input [7]: [ws_item_sk#30, ws_bill_customer_sk#31, ws_order_number#32, ws_quantity#33, ws_wholesale_cost#34, ws_sales_price#35, ws_sold_date_sk#36]
Arguments: hashpartitioning(ws_order_number#32, ws_item_sk#30, 5), ENSURE_REQUIREMENTS, [id=#37]

(25) Sort [codegen id : 9]
Input [7]: [ws_item_sk#30, ws_bill_customer_sk#31, ws_order_number#32, ws_quantity#33, ws_wholesale_cost#34, ws_sales_price#35, ws_sold_date_sk#36]
Arguments: [ws_order_number#32 ASC NULLS FIRST, ws_item_sk#30 ASC NULLS FIRST], false, 0

(26) Scan parquet default.web_returns
Output [3]: [wr_item_sk#38, wr_order_number#39, wr_returned_date_sk#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int>

(27) ColumnarToRow [codegen id : 10]
Input [3]: [wr_item_sk#38, wr_order_number#39, wr_returned_date_sk#40]

(28) Project [codegen id : 10]
Output [2]: [wr_item_sk#38, wr_order_number#39]
Input [3]: [wr_item_sk#38, wr_order_number#39, wr_returned_date_sk#40]

(29) Exchange
Input [2]: [wr_item_sk#38, wr_order_number#39]
Arguments: hashpartitioning(wr_order_number#39, wr_item_sk#38, 5), ENSURE_REQUIREMENTS, [id=#41]

(30) Sort [codegen id : 11]
Input [2]: [wr_item_sk#38, wr_order_number#39]
Arguments: [wr_order_number#39 ASC NULLS FIRST, wr_item_sk#38 ASC NULLS FIRST], false, 0

(31) SortMergeJoin [codegen id : 13]
Left keys [2]: [ws_order_number#32, ws_item_sk#30]
Right keys [2]: [wr_order_number#39, wr_item_sk#38]
Join condition: None

(32) Filter [codegen id : 13]
Input [9]: [ws_item_sk#30, ws_bill_customer_sk#31, ws_order_number#32, ws_quantity#33, ws_wholesale_cost#34, ws_sales_price#35, ws_sold_date_sk#36, wr_item_sk#38, wr_order_number#39]
Condition : isnull(wr_order_number#39)

(33) Project [codegen id : 13]
Output [6]: [ws_item_sk#30, ws_bill_customer_sk#31, ws_quantity#33, ws_wholesale_cost#34, ws_sales_price#35, ws_sold_date_sk#36]
Input [9]: [ws_item_sk#30, ws_bill_customer_sk#31, ws_order_number#32, ws_quantity#33, ws_wholesale_cost#34, ws_sales_price#35, ws_sold_date_sk#36, wr_item_sk#38, wr_order_number#39]

(34) ReusedExchange [Reuses operator id: 71]
Output [2]: [d_date_sk#42, d_year#43]

(35) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ws_sold_date_sk#36]
Right keys [1]: [d_date_sk#42]
Join condition: None

(36) Project [codegen id : 13]
Output [6]: [ws_item_sk#30, ws_bill_customer_sk#31, ws_quantity#33, ws_wholesale_cost#34, ws_sales_price#35, d_year#43]
Input [8]: [ws_item_sk#30, ws_bill_customer_sk#31, ws_quantity#33, ws_wholesale_cost#34, ws_sales_price#35, ws_sold_date_sk#36, d_date_sk#42, d_year#43]

(37) HashAggregate [codegen id : 13]
Input [6]: [ws_item_sk#30, ws_bill_customer_sk#31, ws_quantity#33, ws_wholesale_cost#34, ws_sales_price#35, d_year#43]
Keys [3]: [d_year#43, ws_item_sk#30, ws_bill_customer_sk#31]
Functions [3]: [partial_sum(ws_quantity#33), partial_sum(UnscaledValue(ws_wholesale_cost#34)), partial_sum(UnscaledValue(ws_sales_price#35))]
Aggregate Attributes [3]: [sum#44, sum#45, sum#46]
Results [6]: [d_year#43, ws_item_sk#30, ws_bill_customer_sk#31, sum#47, sum#48, sum#49]

(38) Exchange
Input [6]: [d_year#43, ws_item_sk#30, ws_bill_customer_sk#31, sum#47, sum#48, sum#49]
Arguments: hashpartitioning(d_year#43, ws_item_sk#30, ws_bill_customer_sk#31, 5), ENSURE_REQUIREMENTS, [id=#50]

(39) HashAggregate [codegen id : 14]
Input [6]: [d_year#43, ws_item_sk#30, ws_bill_customer_sk#31, sum#47, sum#48, sum#49]
Keys [3]: [d_year#43, ws_item_sk#30, ws_bill_customer_sk#31]
Functions [3]: [sum(ws_quantity#33), sum(UnscaledValue(ws_wholesale_cost#34)), sum(UnscaledValue(ws_sales_price#35))]
Aggregate Attributes [3]: [sum(ws_quantity#33)#51, sum(UnscaledValue(ws_wholesale_cost#34))#52, sum(UnscaledValue(ws_sales_price#35))#53]
Results [6]: [d_year#43 AS ws_sold_year#54, ws_item_sk#30, ws_bill_customer_sk#31 AS ws_customer_sk#55, sum(ws_quantity#33)#51 AS ws_qty#56, MakeDecimal(sum(UnscaledValue(ws_wholesale_cost#34))#52,17,2) AS ws_wc#57, MakeDecimal(sum(UnscaledValue(ws_sales_price#35))#53,17,2) AS ws_sp#58]

(40) Filter [codegen id : 14]
Input [6]: [ws_sold_year#54, ws_item_sk#30, ws_customer_sk#55, ws_qty#56, ws_wc#57, ws_sp#58]
Condition : (coalesce(ws_qty#56, 0) > 0)

(41) Sort [codegen id : 14]
Input [6]: [ws_sold_year#54, ws_item_sk#30, ws_customer_sk#55, ws_qty#56, ws_wc#57, ws_sp#58]
Arguments: [ws_sold_year#54 ASC NULLS FIRST, ws_item_sk#30 ASC NULLS FIRST, ws_customer_sk#55 ASC NULLS FIRST], false, 0

(42) SortMergeJoin [codegen id : 15]
Left keys [3]: [ss_sold_year#26, ss_item_sk#1, ss_customer_sk#2]
Right keys [3]: [ws_sold_year#54, ws_item_sk#30, ws_customer_sk#55]
Join condition: None

(43) Project [codegen id : 15]
Output [9]: [ss_sold_year#26, ss_item_sk#1, ss_customer_sk#2, ss_qty#27, ss_wc#28, ss_sp#29, ws_qty#56, ws_wc#57, ws_sp#58]
Input [12]: [ss_sold_year#26, ss_item_sk#1, ss_customer_sk#2, ss_qty#27, ss_wc#28, ss_sp#29, ws_sold_year#54, ws_item_sk#30, ws_customer_sk#55, ws_qty#56, ws_wc#57, ws_sp#58]

(44) Scan parquet default.catalog_sales
Output [7]: [cs_bill_customer_sk#59, cs_item_sk#60, cs_order_number#61, cs_quantity#62, cs_wholesale_cost#63, cs_sales_price#64, cs_sold_date_sk#65]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#65), dynamicpruningexpression(cs_sold_date_sk#65 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_order_number:int,cs_quantity:int,cs_wholesale_cost:decimal(7,2),cs_sales_price:decimal(7,2)>

(45) ColumnarToRow [codegen id : 16]
Input [7]: [cs_bill_customer_sk#59, cs_item_sk#60, cs_order_number#61, cs_quantity#62, cs_wholesale_cost#63, cs_sales_price#64, cs_sold_date_sk#65]

(46) Filter [codegen id : 16]
Input [7]: [cs_bill_customer_sk#59, cs_item_sk#60, cs_order_number#61, cs_quantity#62, cs_wholesale_cost#63, cs_sales_price#64, cs_sold_date_sk#65]
Condition : isnotnull(cs_bill_customer_sk#59)

(47) Exchange
Input [7]: [cs_bill_customer_sk#59, cs_item_sk#60, cs_order_number#61, cs_quantity#62, cs_wholesale_cost#63, cs_sales_price#64, cs_sold_date_sk#65]
Arguments: hashpartitioning(cs_order_number#61, cs_item_sk#60, 5), ENSURE_REQUIREMENTS, [id=#66]

(48) Sort [codegen id : 17]
Input [7]: [cs_bill_customer_sk#59, cs_item_sk#60, cs_order_number#61, cs_quantity#62, cs_wholesale_cost#63, cs_sales_price#64, cs_sold_date_sk#65]
Arguments: [cs_order_number#61 ASC NULLS FIRST, cs_item_sk#60 ASC NULLS FIRST], false, 0

(49) Scan parquet default.catalog_returns
Output [3]: [cr_item_sk#67, cr_order_number#68, cr_returned_date_sk#69]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int>

(50) ColumnarToRow [codegen id : 18]
Input [3]: [cr_item_sk#67, cr_order_number#68, cr_returned_date_sk#69]

(51) Project [codegen id : 18]
Output [2]: [cr_item_sk#67, cr_order_number#68]
Input [3]: [cr_item_sk#67, cr_order_number#68, cr_returned_date_sk#69]

(52) Exchange
Input [2]: [cr_item_sk#67, cr_order_number#68]
Arguments: hashpartitioning(cr_order_number#68, cr_item_sk#67, 5), ENSURE_REQUIREMENTS, [id=#70]

(53) Sort [codegen id : 19]
Input [2]: [cr_item_sk#67, cr_order_number#68]
Arguments: [cr_order_number#68 ASC NULLS FIRST, cr_item_sk#67 ASC NULLS FIRST], false, 0

(54) SortMergeJoin [codegen id : 21]
Left keys [2]: [cs_order_number#61, cs_item_sk#60]
Right keys [2]: [cr_order_number#68, cr_item_sk#67]
Join condition: None

(55) Filter [codegen id : 21]
Input [9]: [cs_bill_customer_sk#59, cs_item_sk#60, cs_order_number#61, cs_quantity#62, cs_wholesale_cost#63, cs_sales_price#64, cs_sold_date_sk#65, cr_item_sk#67, cr_order_number#68]
Condition : isnull(cr_order_number#68)

(56) Project [codegen id : 21]
Output [6]: [cs_bill_customer_sk#59, cs_item_sk#60, cs_quantity#62, cs_wholesale_cost#63, cs_sales_price#64, cs_sold_date_sk#65]
Input [9]: [cs_bill_customer_sk#59, cs_item_sk#60, cs_order_number#61, cs_quantity#62, cs_wholesale_cost#63, cs_sales_price#64, cs_sold_date_sk#65, cr_item_sk#67, cr_order_number#68]

(57) ReusedExchange [Reuses operator id: 71]
Output [2]: [d_date_sk#71, d_year#72]

(58) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [cs_sold_date_sk#65]
Right keys [1]: [d_date_sk#71]
Join condition: None

(59) Project [codegen id : 21]
Output [6]: [cs_bill_customer_sk#59, cs_item_sk#60, cs_quantity#62, cs_wholesale_cost#63, cs_sales_price#64, d_year#72]
Input [8]: [cs_bill_customer_sk#59, cs_item_sk#60, cs_quantity#62, cs_wholesale_cost#63, cs_sales_price#64, cs_sold_date_sk#65, d_date_sk#71, d_year#72]

(60) HashAggregate [codegen id : 21]
Input [6]: [cs_bill_customer_sk#59, cs_item_sk#60, cs_quantity#62, cs_wholesale_cost#63, cs_sales_price#64, d_year#72]
Keys [3]: [d_year#72, cs_item_sk#60, cs_bill_customer_sk#59]
Functions [3]: [partial_sum(cs_quantity#62), partial_sum(UnscaledValue(cs_wholesale_cost#63)), partial_sum(UnscaledValue(cs_sales_price#64))]
Aggregate Attributes [3]: [sum#73, sum#74, sum#75]
Results [6]: [d_year#72, cs_item_sk#60, cs_bill_customer_sk#59, sum#76, sum#77, sum#78]

(61) Exchange
Input [6]: [d_year#72, cs_item_sk#60, cs_bill_customer_sk#59, sum#76, sum#77, sum#78]
Arguments: hashpartitioning(d_year#72, cs_item_sk#60, cs_bill_customer_sk#59, 5), ENSURE_REQUIREMENTS, [id=#79]

(62) HashAggregate [codegen id : 22]
Input [6]: [d_year#72, cs_item_sk#60, cs_bill_customer_sk#59, sum#76, sum#77, sum#78]
Keys [3]: [d_year#72, cs_item_sk#60, cs_bill_customer_sk#59]
Functions [3]: [sum(cs_quantity#62), sum(UnscaledValue(cs_wholesale_cost#63)), sum(UnscaledValue(cs_sales_price#64))]
Aggregate Attributes [3]: [sum(cs_quantity#62)#80, sum(UnscaledValue(cs_wholesale_cost#63))#81, sum(UnscaledValue(cs_sales_price#64))#82]
Results [6]: [d_year#72 AS cs_sold_year#83, cs_item_sk#60, cs_bill_customer_sk#59 AS cs_customer_sk#84, sum(cs_quantity#62)#80 AS cs_qty#85, MakeDecimal(sum(UnscaledValue(cs_wholesale_cost#63))#81,17,2) AS cs_wc#86, MakeDecimal(sum(UnscaledValue(cs_sales_price#64))#82,17,2) AS cs_sp#87]

(63) Filter [codegen id : 22]
Input [6]: [cs_sold_year#83, cs_item_sk#60, cs_customer_sk#84, cs_qty#85, cs_wc#86, cs_sp#87]
Condition : (coalesce(cs_qty#85, 0) > 0)

(64) Sort [codegen id : 22]
Input [6]: [cs_sold_year#83, cs_item_sk#60, cs_customer_sk#84, cs_qty#85, cs_wc#86, cs_sp#87]
Arguments: [cs_sold_year#83 ASC NULLS FIRST, cs_item_sk#60 ASC NULLS FIRST, cs_customer_sk#84 ASC NULLS FIRST], false, 0

(65) SortMergeJoin [codegen id : 23]
Left keys [3]: [ss_sold_year#26, ss_item_sk#1, ss_customer_sk#2]
Right keys [3]: [cs_sold_year#83, cs_item_sk#60, cs_customer_sk#84]
Join condition: None

(66) Project [codegen id : 23]
Output [13]: [round((cast(ss_qty#27 as double) / cast(coalesce((ws_qty#56 + cs_qty#85), 1) as double)), 2) AS ratio#88, ss_qty#27 AS store_qty#89, ss_wc#28 AS store_wholesale_cost#90, ss_sp#29 AS store_sales_price#91, (coalesce(ws_qty#56, 0) + coalesce(cs_qty#85, 0)) AS other_chan_qty#92, CheckOverflow((promote_precision(cast(coalesce(ws_wc#57, 0.00) as decimal(18,2))) + promote_precision(cast(coalesce(cs_wc#86, 0.00) as decimal(18,2)))), DecimalType(18,2), true) AS other_chan_wholesale_cost#93, CheckOverflow((promote_precision(cast(coalesce(ws_sp#58, 0.00) as decimal(18,2))) + promote_precision(cast(coalesce(cs_sp#87, 0.00) as decimal(18,2)))), DecimalType(18,2), true) AS other_chan_sales_price#94, ss_sold_year#26, ss_item_sk#1, ss_customer_sk#2, ss_qty#27, ss_wc#28, ss_sp#29]
Input [15]: [ss_sold_year#26, ss_item_sk#1, ss_customer_sk#2, ss_qty#27, ss_wc#28, ss_sp#29, ws_qty#56, ws_wc#57, ws_sp#58, cs_sold_year#83, cs_item_sk#60, cs_customer_sk#84, cs_qty#85, cs_wc#86, cs_sp#87]

(67) TakeOrderedAndProject
Input [13]: [ratio#88, store_qty#89, store_wholesale_cost#90, store_sales_price#91, other_chan_qty#92, other_chan_wholesale_cost#93, other_chan_sales_price#94, ss_sold_year#26, ss_item_sk#1, ss_customer_sk#2, ss_qty#27, ss_wc#28, ss_sp#29]
Arguments: 100, [ss_sold_year#26 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST, ss_customer_sk#2 ASC NULLS FIRST, ss_qty#27 DESC NULLS LAST, ss_wc#28 DESC NULLS LAST, ss_sp#29 DESC NULLS LAST, other_chan_qty#92 ASC NULLS FIRST, other_chan_wholesale_cost#93 ASC NULLS FIRST, other_chan_sales_price#94 ASC NULLS FIRST, ratio#88 ASC NULLS FIRST], [ratio#88, store_qty#89, store_wholesale_cost#90, store_sales_price#91, other_chan_qty#92, other_chan_wholesale_cost#93, other_chan_sales_price#94]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (71)
+- * Filter (70)
   +- * ColumnarToRow (69)
      +- Scan parquet default.date_dim (68)


(68) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [EqualTo(d_year,2000)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(69) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#15]

(70) Filter [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#15]
Condition : (d_year#15 = 2000)

(71) BroadcastExchange
Input [2]: [d_date_sk#14, d_year#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#95]

Subquery:2 Hosting operator id = 21 Hosting Expression = ws_sold_date_sk#36 IN dynamicpruning#8

Subquery:3 Hosting operator id = 44 Hosting Expression = cs_sold_date_sk#65 IN dynamicpruning#8


