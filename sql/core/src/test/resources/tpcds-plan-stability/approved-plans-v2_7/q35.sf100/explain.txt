== Physical Plan ==
TakeOrderedAndProject (48)
+- * HashAggregate (47)
   +- Exchange (46)
      +- * HashAggregate (45)
         +- * Project (44)
            +- * SortMergeJoin Inner (43)
               :- * Sort (40)
               :  +- Exchange (39)
               :     +- * Project (38)
               :        +- * SortMergeJoin Inner (37)
               :           :- * Sort (34)
               :           :  +- Exchange (33)
               :           :     +- * Project (32)
               :           :        +- * Filter (31)
               :           :           +- * SortMergeJoin ExistenceJoin(exists#1) (30)
               :           :              :- * SortMergeJoin ExistenceJoin(exists#2) (22)
               :           :              :  :- * SortMergeJoin LeftSemi (14)
               :           :              :  :  :- * Sort (5)
               :           :              :  :  :  +- Exchange (4)
               :           :              :  :  :     +- * Filter (3)
               :           :              :  :  :        +- * ColumnarToRow (2)
               :           :              :  :  :           +- Scan parquet spark_catalog.default.customer (1)
               :           :              :  :  +- * Sort (13)
               :           :              :  :     +- Exchange (12)
               :           :              :  :        +- * Project (11)
               :           :              :  :           +- * BroadcastHashJoin Inner BuildRight (10)
               :           :              :  :              :- * Filter (8)
               :           :              :  :              :  +- * ColumnarToRow (7)
               :           :              :  :              :     +- Scan parquet spark_catalog.default.store_sales (6)
               :           :              :  :              +- ReusedExchange (9)
               :           :              :  +- * Sort (21)
               :           :              :     +- Exchange (20)
               :           :              :        +- * Project (19)
               :           :              :           +- * BroadcastHashJoin Inner BuildRight (18)
               :           :              :              :- * ColumnarToRow (16)
               :           :              :              :  +- Scan parquet spark_catalog.default.web_sales (15)
               :           :              :              +- ReusedExchange (17)
               :           :              +- * Sort (29)
               :           :                 +- Exchange (28)
               :           :                    +- * Project (27)
               :           :                       +- * BroadcastHashJoin Inner BuildRight (26)
               :           :                          :- * ColumnarToRow (24)
               :           :                          :  +- Scan parquet spark_catalog.default.catalog_sales (23)
               :           :                          +- ReusedExchange (25)
               :           +- * Sort (36)
               :              +- ReusedExchange (35)
               +- * Sort (42)
                  +- ReusedExchange (41)


(1) Scan parquet spark_catalog.default.customer
Output [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]

(3) Filter [codegen id : 1]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Condition : (((isnotnull(c_current_addr_sk#5) AND isnotnull(c_current_cdemo_sk#4)) AND might_contain(Subquery scalar-subquery#6, [id=#7], xxhash64(c_current_addr_sk#5, 42), false)) AND might_contain(Subquery scalar-subquery#8, [id=#9], xxhash64(c_current_cdemo_sk#4, 42), false))

(4) Exchange
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Arguments: hashpartitioning(c_customer_sk#3, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Arguments: [c_customer_sk#3 ASC NULLS FIRST], false, 0

(6) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_customer_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
ReadSchema: struct<ss_customer_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ss_customer_sk#10, ss_sold_date_sk#11]

(8) Filter [codegen id : 4]
Input [2]: [ss_customer_sk#10, ss_sold_date_sk#11]
Condition : true

(9) ReusedExchange [Reuses operator id: 67]
Output [1]: [d_date_sk#13]

(10) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#13]
Join type: Inner
Join condition: None

(11) Project [codegen id : 4]
Output [1]: [ss_customer_sk#10]
Input [3]: [ss_customer_sk#10, ss_sold_date_sk#11, d_date_sk#13]

(12) Exchange
Input [1]: [ss_customer_sk#10]
Arguments: hashpartitioning(ss_customer_sk#10, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(13) Sort [codegen id : 5]
Input [1]: [ss_customer_sk#10]
Arguments: [ss_customer_sk#10 ASC NULLS FIRST], false, 0

(14) SortMergeJoin [codegen id : 6]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ss_customer_sk#10]
Join type: LeftSemi
Join condition: None

(15) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_bill_customer_sk#14, ws_sold_date_sk#15]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#15), dynamicpruningexpression(ws_sold_date_sk#15 IN dynamicpruning#12)]
ReadSchema: struct<ws_bill_customer_sk:int>

(16) ColumnarToRow [codegen id : 8]
Input [2]: [ws_bill_customer_sk#14, ws_sold_date_sk#15]

(17) ReusedExchange [Reuses operator id: 67]
Output [1]: [d_date_sk#16]

(18) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ws_sold_date_sk#15]
Right keys [1]: [d_date_sk#16]
Join type: Inner
Join condition: None

(19) Project [codegen id : 8]
Output [1]: [ws_bill_customer_sk#14]
Input [3]: [ws_bill_customer_sk#14, ws_sold_date_sk#15, d_date_sk#16]

(20) Exchange
Input [1]: [ws_bill_customer_sk#14]
Arguments: hashpartitioning(ws_bill_customer_sk#14, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(21) Sort [codegen id : 9]
Input [1]: [ws_bill_customer_sk#14]
Arguments: [ws_bill_customer_sk#14 ASC NULLS FIRST], false, 0

(22) SortMergeJoin [codegen id : 10]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ws_bill_customer_sk#14]
Join type: ExistenceJoin(exists#2)
Join condition: None

(23) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_ship_customer_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(cs_sold_date_sk#18 IN dynamicpruning#12)]
ReadSchema: struct<cs_ship_customer_sk:int>

(24) ColumnarToRow [codegen id : 12]
Input [2]: [cs_ship_customer_sk#17, cs_sold_date_sk#18]

(25) ReusedExchange [Reuses operator id: 67]
Output [1]: [d_date_sk#19]

(26) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#19]
Join type: Inner
Join condition: None

(27) Project [codegen id : 12]
Output [1]: [cs_ship_customer_sk#17]
Input [3]: [cs_ship_customer_sk#17, cs_sold_date_sk#18, d_date_sk#19]

(28) Exchange
Input [1]: [cs_ship_customer_sk#17]
Arguments: hashpartitioning(cs_ship_customer_sk#17, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(29) Sort [codegen id : 13]
Input [1]: [cs_ship_customer_sk#17]
Arguments: [cs_ship_customer_sk#17 ASC NULLS FIRST], false, 0

(30) SortMergeJoin [codegen id : 14]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [cs_ship_customer_sk#17]
Join type: ExistenceJoin(exists#1)
Join condition: None

(31) Filter [codegen id : 14]
Input [5]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5, exists#2, exists#1]
Condition : (exists#2 OR exists#1)

(32) Project [codegen id : 14]
Output [2]: [c_current_cdemo_sk#4, c_current_addr_sk#5]
Input [5]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5, exists#2, exists#1]

(33) Exchange
Input [2]: [c_current_cdemo_sk#4, c_current_addr_sk#5]
Arguments: hashpartitioning(c_current_addr_sk#5, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(34) Sort [codegen id : 15]
Input [2]: [c_current_cdemo_sk#4, c_current_addr_sk#5]
Arguments: [c_current_addr_sk#5 ASC NULLS FIRST], false, 0

(35) ReusedExchange [Reuses operator id: 52]
Output [2]: [ca_address_sk#20, ca_state#21]

(36) Sort [codegen id : 17]
Input [2]: [ca_address_sk#20, ca_state#21]
Arguments: [ca_address_sk#20 ASC NULLS FIRST], false, 0

(37) SortMergeJoin [codegen id : 18]
Left keys [1]: [c_current_addr_sk#5]
Right keys [1]: [ca_address_sk#20]
Join type: Inner
Join condition: None

(38) Project [codegen id : 18]
Output [2]: [c_current_cdemo_sk#4, ca_state#21]
Input [4]: [c_current_cdemo_sk#4, c_current_addr_sk#5, ca_address_sk#20, ca_state#21]

(39) Exchange
Input [2]: [c_current_cdemo_sk#4, ca_state#21]
Arguments: hashpartitioning(c_current_cdemo_sk#4, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(40) Sort [codegen id : 19]
Input [2]: [c_current_cdemo_sk#4, ca_state#21]
Arguments: [c_current_cdemo_sk#4 ASC NULLS FIRST], false, 0

(41) ReusedExchange [Reuses operator id: 59]
Output [6]: [cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_dep_count#25, cd_dep_employed_count#26, cd_dep_college_count#27]

(42) Sort [codegen id : 21]
Input [6]: [cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_dep_count#25, cd_dep_employed_count#26, cd_dep_college_count#27]
Arguments: [cd_demo_sk#22 ASC NULLS FIRST], false, 0

(43) SortMergeJoin [codegen id : 22]
Left keys [1]: [c_current_cdemo_sk#4]
Right keys [1]: [cd_demo_sk#22]
Join type: Inner
Join condition: None

(44) Project [codegen id : 22]
Output [6]: [ca_state#21, cd_gender#23, cd_marital_status#24, cd_dep_count#25, cd_dep_employed_count#26, cd_dep_college_count#27]
Input [8]: [c_current_cdemo_sk#4, ca_state#21, cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_dep_count#25, cd_dep_employed_count#26, cd_dep_college_count#27]

(45) HashAggregate [codegen id : 22]
Input [6]: [ca_state#21, cd_gender#23, cd_marital_status#24, cd_dep_count#25, cd_dep_employed_count#26, cd_dep_college_count#27]
Keys [6]: [ca_state#21, cd_gender#23, cd_marital_status#24, cd_dep_count#25, cd_dep_employed_count#26, cd_dep_college_count#27]
Functions [10]: [partial_count(1), partial_avg(cd_dep_count#25), partial_max(cd_dep_count#25), partial_sum(cd_dep_count#25), partial_avg(cd_dep_employed_count#26), partial_max(cd_dep_employed_count#26), partial_sum(cd_dep_employed_count#26), partial_avg(cd_dep_college_count#27), partial_max(cd_dep_college_count#27), partial_sum(cd_dep_college_count#27)]
Aggregate Attributes [13]: [count#28, sum#29, count#30, max#31, sum#32, sum#33, count#34, max#35, sum#36, sum#37, count#38, max#39, sum#40]
Results [19]: [ca_state#21, cd_gender#23, cd_marital_status#24, cd_dep_count#25, cd_dep_employed_count#26, cd_dep_college_count#27, count#41, sum#42, count#43, max#44, sum#45, sum#46, count#47, max#48, sum#49, sum#50, count#51, max#52, sum#53]

(46) Exchange
Input [19]: [ca_state#21, cd_gender#23, cd_marital_status#24, cd_dep_count#25, cd_dep_employed_count#26, cd_dep_college_count#27, count#41, sum#42, count#43, max#44, sum#45, sum#46, count#47, max#48, sum#49, sum#50, count#51, max#52, sum#53]
Arguments: hashpartitioning(ca_state#21, cd_gender#23, cd_marital_status#24, cd_dep_count#25, cd_dep_employed_count#26, cd_dep_college_count#27, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(47) HashAggregate [codegen id : 23]
Input [19]: [ca_state#21, cd_gender#23, cd_marital_status#24, cd_dep_count#25, cd_dep_employed_count#26, cd_dep_college_count#27, count#41, sum#42, count#43, max#44, sum#45, sum#46, count#47, max#48, sum#49, sum#50, count#51, max#52, sum#53]
Keys [6]: [ca_state#21, cd_gender#23, cd_marital_status#24, cd_dep_count#25, cd_dep_employed_count#26, cd_dep_college_count#27]
Functions [10]: [count(1), avg(cd_dep_count#25), max(cd_dep_count#25), sum(cd_dep_count#25), avg(cd_dep_employed_count#26), max(cd_dep_employed_count#26), sum(cd_dep_employed_count#26), avg(cd_dep_college_count#27), max(cd_dep_college_count#27), sum(cd_dep_college_count#27)]
Aggregate Attributes [10]: [count(1)#54, avg(cd_dep_count#25)#55, max(cd_dep_count#25)#56, sum(cd_dep_count#25)#57, avg(cd_dep_employed_count#26)#58, max(cd_dep_employed_count#26)#59, sum(cd_dep_employed_count#26)#60, avg(cd_dep_college_count#27)#61, max(cd_dep_college_count#27)#62, sum(cd_dep_college_count#27)#63]
Results [18]: [ca_state#21, cd_gender#23, cd_marital_status#24, cd_dep_count#25, count(1)#54 AS cnt1#64, avg(cd_dep_count#25)#55 AS avg(cd_dep_count)#65, max(cd_dep_count#25)#56 AS max(cd_dep_count)#66, sum(cd_dep_count#25)#57 AS sum(cd_dep_count)#67, cd_dep_employed_count#26, count(1)#54 AS cnt2#68, avg(cd_dep_employed_count#26)#58 AS avg(cd_dep_employed_count)#69, max(cd_dep_employed_count#26)#59 AS max(cd_dep_employed_count)#70, sum(cd_dep_employed_count#26)#60 AS sum(cd_dep_employed_count)#71, cd_dep_college_count#27, count(1)#54 AS cnt3#72, avg(cd_dep_college_count#27)#61 AS avg(cd_dep_college_count)#73, max(cd_dep_college_count#27)#62 AS max(cd_dep_college_count)#74, sum(cd_dep_college_count#27)#63 AS sum(cd_dep_college_count)#75]

(48) TakeOrderedAndProject
Input [18]: [ca_state#21, cd_gender#23, cd_marital_status#24, cd_dep_count#25, cnt1#64, avg(cd_dep_count)#65, max(cd_dep_count)#66, sum(cd_dep_count)#67, cd_dep_employed_count#26, cnt2#68, avg(cd_dep_employed_count)#69, max(cd_dep_employed_count)#70, sum(cd_dep_employed_count)#71, cd_dep_college_count#27, cnt3#72, avg(cd_dep_college_count)#73, max(cd_dep_college_count)#74, sum(cd_dep_college_count)#75]
Arguments: 100, [ca_state#21 ASC NULLS FIRST, cd_gender#23 ASC NULLS FIRST, cd_marital_status#24 ASC NULLS FIRST, cd_dep_count#25 ASC NULLS FIRST, cd_dep_employed_count#26 ASC NULLS FIRST, cd_dep_college_count#27 ASC NULLS FIRST], [ca_state#21, cd_gender#23, cd_marital_status#24, cd_dep_count#25, cnt1#64, avg(cd_dep_count)#65, max(cd_dep_count)#66, sum(cd_dep_count)#67, cd_dep_employed_count#26, cnt2#68, avg(cd_dep_employed_count)#69, max(cd_dep_employed_count)#70, sum(cd_dep_employed_count)#71, cd_dep_college_count#27, cnt3#72, avg(cd_dep_college_count)#73, max(cd_dep_college_count)#74, sum(cd_dep_college_count)#75]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#6, [id=#7]
ObjectHashAggregate (55)
+- Exchange (54)
   +- ObjectHashAggregate (53)
      +- Exchange (52)
         +- * Filter (51)
            +- * ColumnarToRow (50)
               +- Scan parquet spark_catalog.default.customer_address (49)


(49) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#20, ca_state#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(50) ColumnarToRow [codegen id : 1]
Input [2]: [ca_address_sk#20, ca_state#21]

(51) Filter [codegen id : 1]
Input [2]: [ca_address_sk#20, ca_state#21]
Condition : isnotnull(ca_address_sk#20)

(52) Exchange
Input [2]: [ca_address_sk#20, ca_state#21]
Arguments: hashpartitioning(ca_address_sk#20, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(53) ObjectHashAggregate
Input [2]: [ca_address_sk#20, ca_state#21]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(ca_address_sk#20, 42), 1000000, 8000000, 0, 0)]
Aggregate Attributes [1]: [buf#76]
Results [1]: [buf#77]

(54) Exchange
Input [1]: [buf#77]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=9]

(55) ObjectHashAggregate
Input [1]: [buf#77]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(ca_address_sk#20, 42), 1000000, 8000000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(ca_address_sk#20, 42), 1000000, 8000000, 0, 0)#78]
Results [1]: [bloom_filter_agg(xxhash64(ca_address_sk#20, 42), 1000000, 8000000, 0, 0)#78 AS bloomFilter#79]

Subquery:2 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#8, [id=#9]
ObjectHashAggregate (62)
+- Exchange (61)
   +- ObjectHashAggregate (60)
      +- Exchange (59)
         +- * Filter (58)
            +- * ColumnarToRow (57)
               +- Scan parquet spark_catalog.default.customer_demographics (56)


(56) Scan parquet spark_catalog.default.customer_demographics
Output [6]: [cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_dep_count#25, cd_dep_employed_count#26, cd_dep_college_count#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(57) ColumnarToRow [codegen id : 1]
Input [6]: [cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_dep_count#25, cd_dep_employed_count#26, cd_dep_college_count#27]

(58) Filter [codegen id : 1]
Input [6]: [cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_dep_count#25, cd_dep_employed_count#26, cd_dep_college_count#27]
Condition : isnotnull(cd_demo_sk#22)

(59) Exchange
Input [6]: [cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_dep_count#25, cd_dep_employed_count#26, cd_dep_college_count#27]
Arguments: hashpartitioning(cd_demo_sk#22, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(60) ObjectHashAggregate
Input [6]: [cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_dep_count#25, cd_dep_employed_count#26, cd_dep_college_count#27]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(cd_demo_sk#22, 42), 1920800, 15366400, 0, 0)]
Aggregate Attributes [1]: [buf#80]
Results [1]: [buf#81]

(61) Exchange
Input [1]: [buf#81]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=11]

(62) ObjectHashAggregate
Input [1]: [buf#81]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#22, 42), 1920800, 15366400, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#22, 42), 1920800, 15366400, 0, 0)#82]
Results [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#22, 42), 1920800, 15366400, 0, 0)#82 AS bloomFilter#83]

Subquery:3 Hosting operator id = 6 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (67)
+- * Project (66)
   +- * Filter (65)
      +- * ColumnarToRow (64)
         +- Scan parquet spark_catalog.default.date_dim (63)


(63) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#13, d_year#84, d_qoy#85]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_qoy), EqualTo(d_year,2002), LessThan(d_qoy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(64) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#13, d_year#84, d_qoy#85]

(65) Filter [codegen id : 1]
Input [3]: [d_date_sk#13, d_year#84, d_qoy#85]
Condition : ((((isnotnull(d_year#84) AND isnotnull(d_qoy#85)) AND (d_year#84 = 2002)) AND (d_qoy#85 < 4)) AND isnotnull(d_date_sk#13))

(66) Project [codegen id : 1]
Output [1]: [d_date_sk#13]
Input [3]: [d_date_sk#13, d_year#84, d_qoy#85]

(67) BroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=12]

Subquery:4 Hosting operator id = 15 Hosting Expression = ws_sold_date_sk#15 IN dynamicpruning#12

Subquery:5 Hosting operator id = 23 Hosting Expression = cs_sold_date_sk#18 IN dynamicpruning#12


