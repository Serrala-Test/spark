== Physical Plan ==
TakeOrderedAndProject (56)
+- * HashAggregate (55)
   +- Exchange (54)
      +- * HashAggregate (53)
         +- * Project (52)
            +- * Filter (51)
               +- * SortMergeJoin ExistenceJoin(exists#1) (50)
                  :- * SortMergeJoin ExistenceJoin(exists#2) (42)
                  :  :- * Sort (34)
                  :  :  +- Exchange (33)
                  :  :     +- * Project (32)
                  :  :        +- * SortMergeJoin Inner (31)
                  :  :           :- * Sort (25)
                  :  :           :  +- Exchange (24)
                  :  :           :     +- * Project (23)
                  :  :           :        +- * SortMergeJoin Inner (22)
                  :  :           :           :- * Sort (16)
                  :  :           :           :  +- Exchange (15)
                  :  :           :           :     +- * SortMergeJoin LeftSemi (14)
                  :  :           :           :        :- * Sort (5)
                  :  :           :           :        :  +- Exchange (4)
                  :  :           :           :        :     +- * Filter (3)
                  :  :           :           :        :        +- * ColumnarToRow (2)
                  :  :           :           :        :           +- Scan parquet spark_catalog.default.customer (1)
                  :  :           :           :        +- * Sort (13)
                  :  :           :           :           +- Exchange (12)
                  :  :           :           :              +- * Project (11)
                  :  :           :           :                 +- * BroadcastHashJoin Inner BuildRight (10)
                  :  :           :           :                    :- * Filter (8)
                  :  :           :           :                    :  +- * ColumnarToRow (7)
                  :  :           :           :                    :     +- Scan parquet spark_catalog.default.store_sales (6)
                  :  :           :           :                    +- ReusedExchange (9)
                  :  :           :           +- * Sort (21)
                  :  :           :              +- Exchange (20)
                  :  :           :                 +- * Filter (19)
                  :  :           :                    +- * ColumnarToRow (18)
                  :  :           :                       +- Scan parquet spark_catalog.default.customer_address (17)
                  :  :           +- * Sort (30)
                  :  :              +- Exchange (29)
                  :  :                 +- * Filter (28)
                  :  :                    +- * ColumnarToRow (27)
                  :  :                       +- Scan parquet spark_catalog.default.customer_demographics (26)
                  :  +- * Sort (41)
                  :     +- Exchange (40)
                  :        +- * Project (39)
                  :           +- * BroadcastHashJoin Inner BuildRight (38)
                  :              :- * ColumnarToRow (36)
                  :              :  +- Scan parquet spark_catalog.default.web_sales (35)
                  :              +- ReusedExchange (37)
                  +- * Sort (49)
                     +- Exchange (48)
                        +- * Project (47)
                           +- * BroadcastHashJoin Inner BuildRight (46)
                              :- * ColumnarToRow (44)
                              :  +- Scan parquet spark_catalog.default.catalog_sales (43)
                              +- ReusedExchange (45)


(1) Scan parquet spark_catalog.default.customer
Output [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]

(3) Filter [codegen id : 1]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Condition : ((isnotnull(c_customer_sk#3) AND isnotnull(c_current_addr_sk#5)) AND isnotnull(c_current_cdemo_sk#4))

(4) Exchange
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Arguments: hashpartitioning(c_customer_sk#3, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Arguments: [c_customer_sk#3 ASC NULLS FIRST], false, 0

(6) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_customer_sk#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ss_customer_sk#6, ss_sold_date_sk#7]

(8) Filter [codegen id : 4]
Input [2]: [ss_customer_sk#6, ss_sold_date_sk#7]
Condition : isnotnull(ss_customer_sk#6)

(9) ReusedExchange [Reuses operator id: 61]
Output [1]: [d_date_sk#9]

(10) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#9]
Join type: Inner
Join condition: None

(11) Project [codegen id : 4]
Output [1]: [ss_customer_sk#6]
Input [3]: [ss_customer_sk#6, ss_sold_date_sk#7, d_date_sk#9]

(12) Exchange
Input [1]: [ss_customer_sk#6]
Arguments: hashpartitioning(ss_customer_sk#6, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(13) Sort [codegen id : 5]
Input [1]: [ss_customer_sk#6]
Arguments: [ss_customer_sk#6 ASC NULLS FIRST], false, 0

(14) SortMergeJoin [codegen id : 6]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ss_customer_sk#6]
Join type: LeftSemi
Join condition: None

(15) Exchange
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Arguments: hashpartitioning(c_current_addr_sk#5, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(16) Sort [codegen id : 7]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Arguments: [c_current_addr_sk#5 ASC NULLS FIRST], false, 0

(17) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#10, ca_state#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(18) ColumnarToRow [codegen id : 8]
Input [2]: [ca_address_sk#10, ca_state#11]

(19) Filter [codegen id : 8]
Input [2]: [ca_address_sk#10, ca_state#11]
Condition : isnotnull(ca_address_sk#10)

(20) Exchange
Input [2]: [ca_address_sk#10, ca_state#11]
Arguments: hashpartitioning(ca_address_sk#10, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(21) Sort [codegen id : 9]
Input [2]: [ca_address_sk#10, ca_state#11]
Arguments: [ca_address_sk#10 ASC NULLS FIRST], false, 0

(22) SortMergeJoin [codegen id : 10]
Left keys [1]: [c_current_addr_sk#5]
Right keys [1]: [ca_address_sk#10]
Join type: Inner
Join condition: None

(23) Project [codegen id : 10]
Output [3]: [c_customer_sk#3, c_current_cdemo_sk#4, ca_state#11]
Input [5]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5, ca_address_sk#10, ca_state#11]

(24) Exchange
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, ca_state#11]
Arguments: hashpartitioning(c_current_cdemo_sk#4, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(25) Sort [codegen id : 11]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, ca_state#11]
Arguments: [c_current_cdemo_sk#4 ASC NULLS FIRST], false, 0

(26) Scan parquet spark_catalog.default.customer_demographics
Output [6]: [cd_demo_sk#12, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(27) ColumnarToRow [codegen id : 12]
Input [6]: [cd_demo_sk#12, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17]

(28) Filter [codegen id : 12]
Input [6]: [cd_demo_sk#12, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17]
Condition : isnotnull(cd_demo_sk#12)

(29) Exchange
Input [6]: [cd_demo_sk#12, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17]
Arguments: hashpartitioning(cd_demo_sk#12, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(30) Sort [codegen id : 13]
Input [6]: [cd_demo_sk#12, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17]
Arguments: [cd_demo_sk#12 ASC NULLS FIRST], false, 0

(31) SortMergeJoin [codegen id : 14]
Left keys [1]: [c_current_cdemo_sk#4]
Right keys [1]: [cd_demo_sk#12]
Join type: Inner
Join condition: None

(32) Project [codegen id : 14]
Output [7]: [c_customer_sk#3, ca_state#11, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17]
Input [9]: [c_customer_sk#3, c_current_cdemo_sk#4, ca_state#11, cd_demo_sk#12, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17]

(33) Exchange
Input [7]: [c_customer_sk#3, ca_state#11, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17]
Arguments: hashpartitioning(c_customer_sk#3, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(34) Sort [codegen id : 15]
Input [7]: [c_customer_sk#3, ca_state#11, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17]
Arguments: [c_customer_sk#3 ASC NULLS FIRST], false, 0

(35) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_bill_customer_sk#18, ws_sold_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#19), dynamicpruningexpression(ws_sold_date_sk#19 IN dynamicpruning#8)]
ReadSchema: struct<ws_bill_customer_sk:int>

(36) ColumnarToRow [codegen id : 17]
Input [2]: [ws_bill_customer_sk#18, ws_sold_date_sk#19]

(37) ReusedExchange [Reuses operator id: 61]
Output [1]: [d_date_sk#20]

(38) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_sold_date_sk#19]
Right keys [1]: [d_date_sk#20]
Join type: Inner
Join condition: None

(39) Project [codegen id : 17]
Output [1]: [ws_bill_customer_sk#18]
Input [3]: [ws_bill_customer_sk#18, ws_sold_date_sk#19, d_date_sk#20]

(40) Exchange
Input [1]: [ws_bill_customer_sk#18]
Arguments: hashpartitioning(ws_bill_customer_sk#18, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(41) Sort [codegen id : 18]
Input [1]: [ws_bill_customer_sk#18]
Arguments: [ws_bill_customer_sk#18 ASC NULLS FIRST], false, 0

(42) SortMergeJoin [codegen id : 19]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ws_bill_customer_sk#18]
Join type: ExistenceJoin(exists#2)
Join condition: None

(43) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_ship_customer_sk#21, cs_sold_date_sk#22]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#22), dynamicpruningexpression(cs_sold_date_sk#22 IN dynamicpruning#8)]
ReadSchema: struct<cs_ship_customer_sk:int>

(44) ColumnarToRow [codegen id : 21]
Input [2]: [cs_ship_customer_sk#21, cs_sold_date_sk#22]

(45) ReusedExchange [Reuses operator id: 61]
Output [1]: [d_date_sk#23]

(46) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [cs_sold_date_sk#22]
Right keys [1]: [d_date_sk#23]
Join type: Inner
Join condition: None

(47) Project [codegen id : 21]
Output [1]: [cs_ship_customer_sk#21]
Input [3]: [cs_ship_customer_sk#21, cs_sold_date_sk#22, d_date_sk#23]

(48) Exchange
Input [1]: [cs_ship_customer_sk#21]
Arguments: hashpartitioning(cs_ship_customer_sk#21, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(49) Sort [codegen id : 22]
Input [1]: [cs_ship_customer_sk#21]
Arguments: [cs_ship_customer_sk#21 ASC NULLS FIRST], false, 0

(50) SortMergeJoin [codegen id : 23]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [cs_ship_customer_sk#21]
Join type: ExistenceJoin(exists#1)
Join condition: None

(51) Filter [codegen id : 23]
Input [9]: [c_customer_sk#3, ca_state#11, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17, exists#2, exists#1]
Condition : (exists#2 OR exists#1)

(52) Project [codegen id : 23]
Output [6]: [ca_state#11, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17]
Input [9]: [c_customer_sk#3, ca_state#11, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17, exists#2, exists#1]

(53) HashAggregate [codegen id : 23]
Input [6]: [ca_state#11, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17]
Keys [6]: [ca_state#11, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17]
Functions [10]: [partial_count(1), partial_avg(cd_dep_count#15), partial_max(cd_dep_count#15), partial_sum(cd_dep_count#15), partial_avg(cd_dep_employed_count#16), partial_max(cd_dep_employed_count#16), partial_sum(cd_dep_employed_count#16), partial_avg(cd_dep_college_count#17), partial_max(cd_dep_college_count#17), partial_sum(cd_dep_college_count#17)]
Aggregate Attributes [13]: [count#24, sum#25, count#26, max#27, sum#28, sum#29, count#30, max#31, sum#32, sum#33, count#34, max#35, sum#36]
Results [19]: [ca_state#11, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17, count#37, sum#38, count#39, max#40, sum#41, sum#42, count#43, max#44, sum#45, sum#46, count#47, max#48, sum#49]

(54) Exchange
Input [19]: [ca_state#11, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17, count#37, sum#38, count#39, max#40, sum#41, sum#42, count#43, max#44, sum#45, sum#46, count#47, max#48, sum#49]
Arguments: hashpartitioning(ca_state#11, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(55) HashAggregate [codegen id : 24]
Input [19]: [ca_state#11, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17, count#37, sum#38, count#39, max#40, sum#41, sum#42, count#43, max#44, sum#45, sum#46, count#47, max#48, sum#49]
Keys [6]: [ca_state#11, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17]
Functions [10]: [count(1), avg(cd_dep_count#15), max(cd_dep_count#15), sum(cd_dep_count#15), avg(cd_dep_employed_count#16), max(cd_dep_employed_count#16), sum(cd_dep_employed_count#16), avg(cd_dep_college_count#17), max(cd_dep_college_count#17), sum(cd_dep_college_count#17)]
Aggregate Attributes [10]: [count(1)#50, avg(cd_dep_count#15)#51, max(cd_dep_count#15)#52, sum(cd_dep_count#15)#53, avg(cd_dep_employed_count#16)#54, max(cd_dep_employed_count#16)#55, sum(cd_dep_employed_count#16)#56, avg(cd_dep_college_count#17)#57, max(cd_dep_college_count#17)#58, sum(cd_dep_college_count#17)#59]
Results [18]: [ca_state#11, cd_gender#13, cd_marital_status#14, cd_dep_count#15, count(1)#50 AS cnt1#60, avg(cd_dep_count#15)#51 AS avg(cd_dep_count)#61, max(cd_dep_count#15)#52 AS max(cd_dep_count)#62, sum(cd_dep_count#15)#53 AS sum(cd_dep_count)#63, cd_dep_employed_count#16, count(1)#50 AS cnt2#64, avg(cd_dep_employed_count#16)#54 AS avg(cd_dep_employed_count)#65, max(cd_dep_employed_count#16)#55 AS max(cd_dep_employed_count)#66, sum(cd_dep_employed_count#16)#56 AS sum(cd_dep_employed_count)#67, cd_dep_college_count#17, count(1)#50 AS cnt3#68, avg(cd_dep_college_count#17)#57 AS avg(cd_dep_college_count)#69, max(cd_dep_college_count#17)#58 AS max(cd_dep_college_count)#70, sum(cd_dep_college_count#17)#59 AS sum(cd_dep_college_count)#71]

(56) TakeOrderedAndProject
Input [18]: [ca_state#11, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cnt1#60, avg(cd_dep_count)#61, max(cd_dep_count)#62, sum(cd_dep_count)#63, cd_dep_employed_count#16, cnt2#64, avg(cd_dep_employed_count)#65, max(cd_dep_employed_count)#66, sum(cd_dep_employed_count)#67, cd_dep_college_count#17, cnt3#68, avg(cd_dep_college_count)#69, max(cd_dep_college_count)#70, sum(cd_dep_college_count)#71]
Arguments: 100, [ca_state#11 ASC NULLS FIRST, cd_gender#13 ASC NULLS FIRST, cd_marital_status#14 ASC NULLS FIRST, cd_dep_count#15 ASC NULLS FIRST, cd_dep_employed_count#16 ASC NULLS FIRST, cd_dep_college_count#17 ASC NULLS FIRST], [ca_state#11, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cnt1#60, avg(cd_dep_count)#61, max(cd_dep_count)#62, sum(cd_dep_count)#63, cd_dep_employed_count#16, cnt2#64, avg(cd_dep_employed_count)#65, max(cd_dep_employed_count)#66, sum(cd_dep_employed_count)#67, cd_dep_college_count#17, cnt3#68, avg(cd_dep_college_count)#69, max(cd_dep_college_count)#70, sum(cd_dep_college_count)#71]

===== Subqueries =====

Subquery:1 Hosting operator id = 6 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (61)
+- * Project (60)
   +- * Filter (59)
      +- * ColumnarToRow (58)
         +- Scan parquet spark_catalog.default.date_dim (57)


(57) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#9, d_year#72, d_qoy#73]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_qoy), EqualTo(d_year,2002), LessThan(d_qoy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(58) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#9, d_year#72, d_qoy#73]

(59) Filter [codegen id : 1]
Input [3]: [d_date_sk#9, d_year#72, d_qoy#73]
Condition : ((((isnotnull(d_year#72) AND isnotnull(d_qoy#73)) AND (d_year#72 = 2002)) AND (d_qoy#73 < 4)) AND isnotnull(d_date_sk#9))

(60) Project [codegen id : 1]
Output [1]: [d_date_sk#9]
Input [3]: [d_date_sk#9, d_year#72, d_qoy#73]

(61) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=11]

Subquery:2 Hosting operator id = 35 Hosting Expression = ws_sold_date_sk#19 IN dynamicpruning#8

Subquery:3 Hosting operator id = 43 Hosting Expression = cs_sold_date_sk#22 IN dynamicpruning#8


