== Physical Plan ==
TakeOrderedAndProject (98)
+- * HashAggregate (97)
   +- Exchange (96)
      +- * HashAggregate (95)
         +- Union (94)
            :- * HashAggregate (83)
            :  +- Exchange (82)
            :     +- * HashAggregate (81)
            :        +- Union (80)
            :           :- * Project (30)
            :           :  +- * BroadcastHashJoin LeftOuter BuildRight (29)
            :           :     :- * HashAggregate (15)
            :           :     :  +- Exchange (14)
            :           :     :     +- * HashAggregate (13)
            :           :     :        +- * Project (12)
            :           :     :           +- * BroadcastHashJoin Inner BuildRight (11)
            :           :     :              :- * Project (6)
            :           :     :              :  +- * BroadcastHashJoin Inner BuildRight (5)
            :           :     :              :     :- * Filter (3)
            :           :     :              :     :  +- * ColumnarToRow (2)
            :           :     :              :     :     +- Scan parquet spark_catalog.default.store_sales (1)
            :           :     :              :     +- ReusedExchange (4)
            :           :     :              +- BroadcastExchange (10)
            :           :     :                 +- * Filter (9)
            :           :     :                    +- * ColumnarToRow (8)
            :           :     :                       +- Scan parquet spark_catalog.default.store (7)
            :           :     +- BroadcastExchange (28)
            :           :        +- * HashAggregate (27)
            :           :           +- Exchange (26)
            :           :              +- * HashAggregate (25)
            :           :                 +- * Project (24)
            :           :                    +- * BroadcastHashJoin Inner BuildRight (23)
            :           :                       :- * Project (21)
            :           :                       :  +- * BroadcastHashJoin Inner BuildRight (20)
            :           :                       :     :- * Filter (18)
            :           :                       :     :  +- * ColumnarToRow (17)
            :           :                       :     :     +- Scan parquet spark_catalog.default.store_returns (16)
            :           :                       :     +- ReusedExchange (19)
            :           :                       +- ReusedExchange (22)
            :           :- * Project (49)
            :           :  +- * BroadcastNestedLoopJoin Inner BuildLeft (48)
            :           :     :- BroadcastExchange (39)
            :           :     :  +- * HashAggregate (38)
            :           :     :     +- Exchange (37)
            :           :     :        +- * HashAggregate (36)
            :           :     :           +- * Project (35)
            :           :     :              +- * BroadcastHashJoin Inner BuildRight (34)
            :           :     :                 :- * ColumnarToRow (32)
            :           :     :                 :  +- Scan parquet spark_catalog.default.catalog_sales (31)
            :           :     :                 +- ReusedExchange (33)
            :           :     +- * HashAggregate (47)
            :           :        +- Exchange (46)
            :           :           +- * HashAggregate (45)
            :           :              +- * Project (44)
            :           :                 +- * BroadcastHashJoin Inner BuildRight (43)
            :           :                    :- * ColumnarToRow (41)
            :           :                    :  +- Scan parquet spark_catalog.default.catalog_returns (40)
            :           :                    +- ReusedExchange (42)
            :           +- * Project (79)
            :              +- * BroadcastHashJoin LeftOuter BuildRight (78)
            :                 :- * HashAggregate (64)
            :                 :  +- Exchange (63)
            :                 :     +- * HashAggregate (62)
            :                 :        +- * Project (61)
            :                 :           +- * BroadcastHashJoin Inner BuildRight (60)
            :                 :              :- * Project (55)
            :                 :              :  +- * BroadcastHashJoin Inner BuildRight (54)
            :                 :              :     :- * Filter (52)
            :                 :              :     :  +- * ColumnarToRow (51)
            :                 :              :     :     +- Scan parquet spark_catalog.default.web_sales (50)
            :                 :              :     +- ReusedExchange (53)
            :                 :              +- BroadcastExchange (59)
            :                 :                 +- * Filter (58)
            :                 :                    +- * ColumnarToRow (57)
            :                 :                       +- Scan parquet spark_catalog.default.web_page (56)
            :                 +- BroadcastExchange (77)
            :                    +- * HashAggregate (76)
            :                       +- Exchange (75)
            :                          +- * HashAggregate (74)
            :                             +- * Project (73)
            :                                +- * BroadcastHashJoin Inner BuildRight (72)
            :                                   :- * Project (70)
            :                                   :  +- * BroadcastHashJoin Inner BuildRight (69)
            :                                   :     :- * Filter (67)
            :                                   :     :  +- * ColumnarToRow (66)
            :                                   :     :     +- Scan parquet spark_catalog.default.web_returns (65)
            :                                   :     +- ReusedExchange (68)
            :                                   +- ReusedExchange (71)
            :- * HashAggregate (88)
            :  +- Exchange (87)
            :     +- * HashAggregate (86)
            :        +- * HashAggregate (85)
            :           +- ReusedExchange (84)
            +- * HashAggregate (93)
               +- Exchange (92)
                  +- * HashAggregate (91)
                     +- * HashAggregate (90)
                        +- ReusedExchange (89)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 3]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_store_sk#1)

(4) ReusedExchange [Reuses operator id: 103]
Output [1]: [d_date_sk#6]

(5) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join type: Inner
Join condition: None

(6) Project [codegen id : 3]
Output [3]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3]
Input [5]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4, d_date_sk#6]

(7) Scan parquet spark_catalog.default.store
Output [1]: [s_store_sk#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int>

(8) ColumnarToRow [codegen id : 2]
Input [1]: [s_store_sk#7]

(9) Filter [codegen id : 2]
Input [1]: [s_store_sk#7]
Condition : isnotnull(s_store_sk#7)

(10) BroadcastExchange
Input [1]: [s_store_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#7]
Join type: Inner
Join condition: None

(12) Project [codegen id : 3]
Output [3]: [ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#7]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#7]

(13) HashAggregate [codegen id : 3]
Input [3]: [ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#7]
Keys [1]: [s_store_sk#7]
Functions [2]: [partial_sum(UnscaledValue(ss_ext_sales_price#2)), partial_sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [2]: [sum#8, sum#9]
Results [3]: [s_store_sk#7, sum#10, sum#11]

(14) Exchange
Input [3]: [s_store_sk#7, sum#10, sum#11]
Arguments: hashpartitioning(s_store_sk#7, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(15) HashAggregate [codegen id : 8]
Input [3]: [s_store_sk#7, sum#10, sum#11]
Keys [1]: [s_store_sk#7]
Functions [2]: [sum(UnscaledValue(ss_ext_sales_price#2)), sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_ext_sales_price#2))#12, sum(UnscaledValue(ss_net_profit#3))#13]
Results [3]: [s_store_sk#7, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#12,17,2) AS sales#14, MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#13,17,2) AS profit#15]

(16) Scan parquet spark_catalog.default.store_returns
Output [4]: [sr_store_sk#16, sr_return_amt#17, sr_net_loss#18, sr_returned_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#19), dynamicpruningexpression(sr_returned_date_sk#19 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_store_sk:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(17) ColumnarToRow [codegen id : 6]
Input [4]: [sr_store_sk#16, sr_return_amt#17, sr_net_loss#18, sr_returned_date_sk#19]

(18) Filter [codegen id : 6]
Input [4]: [sr_store_sk#16, sr_return_amt#17, sr_net_loss#18, sr_returned_date_sk#19]
Condition : isnotnull(sr_store_sk#16)

(19) ReusedExchange [Reuses operator id: 103]
Output [1]: [d_date_sk#6]

(20) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [sr_returned_date_sk#19]
Right keys [1]: [d_date_sk#6]
Join type: Inner
Join condition: None

(21) Project [codegen id : 6]
Output [3]: [sr_store_sk#16, sr_return_amt#17, sr_net_loss#18]
Input [5]: [sr_store_sk#16, sr_return_amt#17, sr_net_loss#18, sr_returned_date_sk#19, d_date_sk#6]

(22) ReusedExchange [Reuses operator id: 10]
Output [1]: [s_store_sk#20]

(23) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [sr_store_sk#16]
Right keys [1]: [s_store_sk#20]
Join type: Inner
Join condition: None

(24) Project [codegen id : 6]
Output [3]: [sr_return_amt#17, sr_net_loss#18, s_store_sk#20]
Input [4]: [sr_store_sk#16, sr_return_amt#17, sr_net_loss#18, s_store_sk#20]

(25) HashAggregate [codegen id : 6]
Input [3]: [sr_return_amt#17, sr_net_loss#18, s_store_sk#20]
Keys [1]: [s_store_sk#20]
Functions [2]: [partial_sum(UnscaledValue(sr_return_amt#17)), partial_sum(UnscaledValue(sr_net_loss#18))]
Aggregate Attributes [2]: [sum#21, sum#22]
Results [3]: [s_store_sk#20, sum#23, sum#24]

(26) Exchange
Input [3]: [s_store_sk#20, sum#23, sum#24]
Arguments: hashpartitioning(s_store_sk#20, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(27) HashAggregate [codegen id : 7]
Input [3]: [s_store_sk#20, sum#23, sum#24]
Keys [1]: [s_store_sk#20]
Functions [2]: [sum(UnscaledValue(sr_return_amt#17)), sum(UnscaledValue(sr_net_loss#18))]
Aggregate Attributes [2]: [sum(UnscaledValue(sr_return_amt#17))#25, sum(UnscaledValue(sr_net_loss#18))#26]
Results [3]: [s_store_sk#20, MakeDecimal(sum(UnscaledValue(sr_return_amt#17))#25,17,2) AS returns#27, MakeDecimal(sum(UnscaledValue(sr_net_loss#18))#26,17,2) AS profit_loss#28]

(28) BroadcastExchange
Input [3]: [s_store_sk#20, returns#27, profit_loss#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(29) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [s_store_sk#7]
Right keys [1]: [s_store_sk#20]
Join type: LeftOuter
Join condition: None

(30) Project [codegen id : 8]
Output [5]: [store channel AS channel#29, s_store_sk#7 AS id#30, sales#14, coalesce(returns#27, 0.00) AS returns#31, (profit#15 - coalesce(profit_loss#28, 0.00)) AS profit#32]
Input [6]: [s_store_sk#7, sales#14, profit#15, s_store_sk#20, returns#27, profit_loss#28]

(31) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_call_center_sk#33, cs_ext_sales_price#34, cs_net_profit#35, cs_sold_date_sk#36]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#36), dynamicpruningexpression(cs_sold_date_sk#36 IN dynamicpruning#5)]
ReadSchema: struct<cs_call_center_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(32) ColumnarToRow [codegen id : 10]
Input [4]: [cs_call_center_sk#33, cs_ext_sales_price#34, cs_net_profit#35, cs_sold_date_sk#36]

(33) ReusedExchange [Reuses operator id: 103]
Output [1]: [d_date_sk#6]

(34) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#36]
Right keys [1]: [d_date_sk#6]
Join type: Inner
Join condition: None

(35) Project [codegen id : 10]
Output [3]: [cs_call_center_sk#33, cs_ext_sales_price#34, cs_net_profit#35]
Input [5]: [cs_call_center_sk#33, cs_ext_sales_price#34, cs_net_profit#35, cs_sold_date_sk#36, d_date_sk#6]

(36) HashAggregate [codegen id : 10]
Input [3]: [cs_call_center_sk#33, cs_ext_sales_price#34, cs_net_profit#35]
Keys [1]: [cs_call_center_sk#33]
Functions [2]: [partial_sum(UnscaledValue(cs_ext_sales_price#34)), partial_sum(UnscaledValue(cs_net_profit#35))]
Aggregate Attributes [2]: [sum#37, sum#38]
Results [3]: [cs_call_center_sk#33, sum#39, sum#40]

(37) Exchange
Input [3]: [cs_call_center_sk#33, sum#39, sum#40]
Arguments: hashpartitioning(cs_call_center_sk#33, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(38) HashAggregate [codegen id : 11]
Input [3]: [cs_call_center_sk#33, sum#39, sum#40]
Keys [1]: [cs_call_center_sk#33]
Functions [2]: [sum(UnscaledValue(cs_ext_sales_price#34)), sum(UnscaledValue(cs_net_profit#35))]
Aggregate Attributes [2]: [sum(UnscaledValue(cs_ext_sales_price#34))#41, sum(UnscaledValue(cs_net_profit#35))#42]
Results [3]: [cs_call_center_sk#33, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#34))#41,17,2) AS sales#43, MakeDecimal(sum(UnscaledValue(cs_net_profit#35))#42,17,2) AS profit#44]

(39) BroadcastExchange
Input [3]: [cs_call_center_sk#33, sales#43, profit#44]
Arguments: IdentityBroadcastMode, [plan_id=6]

(40) Scan parquet spark_catalog.default.catalog_returns
Output [3]: [cr_return_amount#45, cr_net_loss#46, cr_returned_date_sk#47]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#47), dynamicpruningexpression(cr_returned_date_sk#47 IN dynamicpruning#5)]
ReadSchema: struct<cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(41) ColumnarToRow [codegen id : 13]
Input [3]: [cr_return_amount#45, cr_net_loss#46, cr_returned_date_sk#47]

(42) ReusedExchange [Reuses operator id: 103]
Output [1]: [d_date_sk#6]

(43) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [cr_returned_date_sk#47]
Right keys [1]: [d_date_sk#6]
Join type: Inner
Join condition: None

(44) Project [codegen id : 13]
Output [2]: [cr_return_amount#45, cr_net_loss#46]
Input [4]: [cr_return_amount#45, cr_net_loss#46, cr_returned_date_sk#47, d_date_sk#6]

(45) HashAggregate [codegen id : 13]
Input [2]: [cr_return_amount#45, cr_net_loss#46]
Keys: []
Functions [2]: [partial_sum(UnscaledValue(cr_return_amount#45)), partial_sum(UnscaledValue(cr_net_loss#46))]
Aggregate Attributes [2]: [sum#48, sum#49]
Results [2]: [sum#50, sum#51]

(46) Exchange
Input [2]: [sum#50, sum#51]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=7]

(47) HashAggregate
Input [2]: [sum#50, sum#51]
Keys: []
Functions [2]: [sum(UnscaledValue(cr_return_amount#45)), sum(UnscaledValue(cr_net_loss#46))]
Aggregate Attributes [2]: [sum(UnscaledValue(cr_return_amount#45))#52, sum(UnscaledValue(cr_net_loss#46))#53]
Results [2]: [MakeDecimal(sum(UnscaledValue(cr_return_amount#45))#52,17,2) AS returns#54, MakeDecimal(sum(UnscaledValue(cr_net_loss#46))#53,17,2) AS profit_loss#55]

(48) BroadcastNestedLoopJoin [codegen id : 14]
Join type: Inner
Join condition: None

(49) Project [codegen id : 14]
Output [5]: [catalog channel AS channel#56, cs_call_center_sk#33 AS id#57, sales#43, returns#54, (profit#44 - profit_loss#55) AS profit#58]
Input [5]: [cs_call_center_sk#33, sales#43, profit#44, returns#54, profit_loss#55]

(50) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_web_page_sk#59, ws_ext_sales_price#60, ws_net_profit#61, ws_sold_date_sk#62]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#62), dynamicpruningexpression(ws_sold_date_sk#62 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_web_page_sk)]
ReadSchema: struct<ws_web_page_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(51) ColumnarToRow [codegen id : 17]
Input [4]: [ws_web_page_sk#59, ws_ext_sales_price#60, ws_net_profit#61, ws_sold_date_sk#62]

(52) Filter [codegen id : 17]
Input [4]: [ws_web_page_sk#59, ws_ext_sales_price#60, ws_net_profit#61, ws_sold_date_sk#62]
Condition : isnotnull(ws_web_page_sk#59)

(53) ReusedExchange [Reuses operator id: 103]
Output [1]: [d_date_sk#6]

(54) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_sold_date_sk#62]
Right keys [1]: [d_date_sk#6]
Join type: Inner
Join condition: None

(55) Project [codegen id : 17]
Output [3]: [ws_web_page_sk#59, ws_ext_sales_price#60, ws_net_profit#61]
Input [5]: [ws_web_page_sk#59, ws_ext_sales_price#60, ws_net_profit#61, ws_sold_date_sk#62, d_date_sk#6]

(56) Scan parquet spark_catalog.default.web_page
Output [1]: [wp_web_page_sk#63]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_page]
PushedFilters: [IsNotNull(wp_web_page_sk)]
ReadSchema: struct<wp_web_page_sk:int>

(57) ColumnarToRow [codegen id : 16]
Input [1]: [wp_web_page_sk#63]

(58) Filter [codegen id : 16]
Input [1]: [wp_web_page_sk#63]
Condition : isnotnull(wp_web_page_sk#63)

(59) BroadcastExchange
Input [1]: [wp_web_page_sk#63]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=8]

(60) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_web_page_sk#59]
Right keys [1]: [wp_web_page_sk#63]
Join type: Inner
Join condition: None

(61) Project [codegen id : 17]
Output [3]: [ws_ext_sales_price#60, ws_net_profit#61, wp_web_page_sk#63]
Input [4]: [ws_web_page_sk#59, ws_ext_sales_price#60, ws_net_profit#61, wp_web_page_sk#63]

(62) HashAggregate [codegen id : 17]
Input [3]: [ws_ext_sales_price#60, ws_net_profit#61, wp_web_page_sk#63]
Keys [1]: [wp_web_page_sk#63]
Functions [2]: [partial_sum(UnscaledValue(ws_ext_sales_price#60)), partial_sum(UnscaledValue(ws_net_profit#61))]
Aggregate Attributes [2]: [sum#64, sum#65]
Results [3]: [wp_web_page_sk#63, sum#66, sum#67]

(63) Exchange
Input [3]: [wp_web_page_sk#63, sum#66, sum#67]
Arguments: hashpartitioning(wp_web_page_sk#63, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(64) HashAggregate [codegen id : 22]
Input [3]: [wp_web_page_sk#63, sum#66, sum#67]
Keys [1]: [wp_web_page_sk#63]
Functions [2]: [sum(UnscaledValue(ws_ext_sales_price#60)), sum(UnscaledValue(ws_net_profit#61))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_sales_price#60))#68, sum(UnscaledValue(ws_net_profit#61))#69]
Results [3]: [wp_web_page_sk#63, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#60))#68,17,2) AS sales#70, MakeDecimal(sum(UnscaledValue(ws_net_profit#61))#69,17,2) AS profit#71]

(65) Scan parquet spark_catalog.default.web_returns
Output [4]: [wr_web_page_sk#72, wr_return_amt#73, wr_net_loss#74, wr_returned_date_sk#75]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#75), dynamicpruningexpression(wr_returned_date_sk#75 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(wr_web_page_sk)]
ReadSchema: struct<wr_web_page_sk:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(66) ColumnarToRow [codegen id : 20]
Input [4]: [wr_web_page_sk#72, wr_return_amt#73, wr_net_loss#74, wr_returned_date_sk#75]

(67) Filter [codegen id : 20]
Input [4]: [wr_web_page_sk#72, wr_return_amt#73, wr_net_loss#74, wr_returned_date_sk#75]
Condition : isnotnull(wr_web_page_sk#72)

(68) ReusedExchange [Reuses operator id: 103]
Output [1]: [d_date_sk#6]

(69) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [wr_returned_date_sk#75]
Right keys [1]: [d_date_sk#6]
Join type: Inner
Join condition: None

(70) Project [codegen id : 20]
Output [3]: [wr_web_page_sk#72, wr_return_amt#73, wr_net_loss#74]
Input [5]: [wr_web_page_sk#72, wr_return_amt#73, wr_net_loss#74, wr_returned_date_sk#75, d_date_sk#6]

(71) ReusedExchange [Reuses operator id: 59]
Output [1]: [wp_web_page_sk#76]

(72) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [wr_web_page_sk#72]
Right keys [1]: [wp_web_page_sk#76]
Join type: Inner
Join condition: None

(73) Project [codegen id : 20]
Output [3]: [wr_return_amt#73, wr_net_loss#74, wp_web_page_sk#76]
Input [4]: [wr_web_page_sk#72, wr_return_amt#73, wr_net_loss#74, wp_web_page_sk#76]

(74) HashAggregate [codegen id : 20]
Input [3]: [wr_return_amt#73, wr_net_loss#74, wp_web_page_sk#76]
Keys [1]: [wp_web_page_sk#76]
Functions [2]: [partial_sum(UnscaledValue(wr_return_amt#73)), partial_sum(UnscaledValue(wr_net_loss#74))]
Aggregate Attributes [2]: [sum#77, sum#78]
Results [3]: [wp_web_page_sk#76, sum#79, sum#80]

(75) Exchange
Input [3]: [wp_web_page_sk#76, sum#79, sum#80]
Arguments: hashpartitioning(wp_web_page_sk#76, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(76) HashAggregate [codegen id : 21]
Input [3]: [wp_web_page_sk#76, sum#79, sum#80]
Keys [1]: [wp_web_page_sk#76]
Functions [2]: [sum(UnscaledValue(wr_return_amt#73)), sum(UnscaledValue(wr_net_loss#74))]
Aggregate Attributes [2]: [sum(UnscaledValue(wr_return_amt#73))#81, sum(UnscaledValue(wr_net_loss#74))#82]
Results [3]: [wp_web_page_sk#76, MakeDecimal(sum(UnscaledValue(wr_return_amt#73))#81,17,2) AS returns#83, MakeDecimal(sum(UnscaledValue(wr_net_loss#74))#82,17,2) AS profit_loss#84]

(77) BroadcastExchange
Input [3]: [wp_web_page_sk#76, returns#83, profit_loss#84]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=11]

(78) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [wp_web_page_sk#63]
Right keys [1]: [wp_web_page_sk#76]
Join type: LeftOuter
Join condition: None

(79) Project [codegen id : 22]
Output [5]: [web channel AS channel#85, wp_web_page_sk#63 AS id#86, sales#70, coalesce(returns#83, 0.00) AS returns#87, (profit#71 - coalesce(profit_loss#84, 0.00)) AS profit#88]
Input [6]: [wp_web_page_sk#63, sales#70, profit#71, wp_web_page_sk#76, returns#83, profit_loss#84]

(80) Union

(81) HashAggregate [codegen id : 23]
Input [5]: [channel#29, id#30, sales#14, returns#31, profit#32]
Keys [2]: [channel#29, id#30]
Functions [3]: [partial_sum(sales#14), partial_sum(returns#31), partial_sum(profit#32)]
Aggregate Attributes [6]: [sum#89, isEmpty#90, sum#91, isEmpty#92, sum#93, isEmpty#94]
Results [8]: [channel#29, id#30, sum#95, isEmpty#96, sum#97, isEmpty#98, sum#99, isEmpty#100]

(82) Exchange
Input [8]: [channel#29, id#30, sum#95, isEmpty#96, sum#97, isEmpty#98, sum#99, isEmpty#100]
Arguments: hashpartitioning(channel#29, id#30, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(83) HashAggregate [codegen id : 24]
Input [8]: [channel#29, id#30, sum#95, isEmpty#96, sum#97, isEmpty#98, sum#99, isEmpty#100]
Keys [2]: [channel#29, id#30]
Functions [3]: [sum(sales#14), sum(returns#31), sum(profit#32)]
Aggregate Attributes [3]: [sum(sales#14)#101, sum(returns#31)#102, sum(profit#32)#103]
Results [5]: [channel#29, id#30, cast(sum(sales#14)#101 as decimal(37,2)) AS sales#104, cast(sum(returns#31)#102 as decimal(37,2)) AS returns#105, cast(sum(profit#32)#103 as decimal(38,2)) AS profit#106]

(84) ReusedExchange [Reuses operator id: 82]
Output [8]: [channel#29, id#30, sum#95, isEmpty#96, sum#97, isEmpty#98, sum#99, isEmpty#100]

(85) HashAggregate [codegen id : 48]
Input [8]: [channel#29, id#30, sum#95, isEmpty#96, sum#97, isEmpty#98, sum#99, isEmpty#100]
Keys [2]: [channel#29, id#30]
Functions [3]: [sum(sales#14), sum(returns#31), sum(profit#32)]
Aggregate Attributes [3]: [sum(sales#14)#101, sum(returns#31)#102, sum(profit#32)#103]
Results [4]: [channel#29, sum(sales#14)#101 AS sales#107, sum(returns#31)#102 AS returns#108, sum(profit#32)#103 AS profit#109]

(86) HashAggregate [codegen id : 48]
Input [4]: [channel#29, sales#107, returns#108, profit#109]
Keys [1]: [channel#29]
Functions [3]: [partial_sum(sales#107), partial_sum(returns#108), partial_sum(profit#109)]
Aggregate Attributes [6]: [sum#110, isEmpty#111, sum#112, isEmpty#113, sum#114, isEmpty#115]
Results [7]: [channel#29, sum#116, isEmpty#117, sum#118, isEmpty#119, sum#120, isEmpty#121]

(87) Exchange
Input [7]: [channel#29, sum#116, isEmpty#117, sum#118, isEmpty#119, sum#120, isEmpty#121]
Arguments: hashpartitioning(channel#29, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(88) HashAggregate [codegen id : 49]
Input [7]: [channel#29, sum#116, isEmpty#117, sum#118, isEmpty#119, sum#120, isEmpty#121]
Keys [1]: [channel#29]
Functions [3]: [sum(sales#107), sum(returns#108), sum(profit#109)]
Aggregate Attributes [3]: [sum(sales#107)#122, sum(returns#108)#123, sum(profit#109)#124]
Results [5]: [channel#29, null AS id#125, sum(sales#107)#122 AS sales#126, sum(returns#108)#123 AS returns#127, sum(profit#109)#124 AS profit#128]

(89) ReusedExchange [Reuses operator id: 82]
Output [8]: [channel#29, id#30, sum#95, isEmpty#96, sum#97, isEmpty#98, sum#99, isEmpty#100]

(90) HashAggregate [codegen id : 73]
Input [8]: [channel#29, id#30, sum#95, isEmpty#96, sum#97, isEmpty#98, sum#99, isEmpty#100]
Keys [2]: [channel#29, id#30]
Functions [3]: [sum(sales#14), sum(returns#31), sum(profit#32)]
Aggregate Attributes [3]: [sum(sales#14)#101, sum(returns#31)#102, sum(profit#32)#103]
Results [3]: [sum(sales#14)#101 AS sales#107, sum(returns#31)#102 AS returns#108, sum(profit#32)#103 AS profit#109]

(91) HashAggregate [codegen id : 73]
Input [3]: [sales#107, returns#108, profit#109]
Keys: []
Functions [3]: [partial_sum(sales#107), partial_sum(returns#108), partial_sum(profit#109)]
Aggregate Attributes [6]: [sum#129, isEmpty#130, sum#131, isEmpty#132, sum#133, isEmpty#134]
Results [6]: [sum#135, isEmpty#136, sum#137, isEmpty#138, sum#139, isEmpty#140]

(92) Exchange
Input [6]: [sum#135, isEmpty#136, sum#137, isEmpty#138, sum#139, isEmpty#140]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=14]

(93) HashAggregate [codegen id : 74]
Input [6]: [sum#135, isEmpty#136, sum#137, isEmpty#138, sum#139, isEmpty#140]
Keys: []
Functions [3]: [sum(sales#107), sum(returns#108), sum(profit#109)]
Aggregate Attributes [3]: [sum(sales#107)#141, sum(returns#108)#142, sum(profit#109)#143]
Results [5]: [null AS channel#144, null AS id#145, sum(sales#107)#141 AS sales#146, sum(returns#108)#142 AS returns#147, sum(profit#109)#143 AS profit#148]

(94) Union

(95) HashAggregate [codegen id : 75]
Input [5]: [channel#29, id#30, sales#104, returns#105, profit#106]
Keys [5]: [channel#29, id#30, sales#104, returns#105, profit#106]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#29, id#30, sales#104, returns#105, profit#106]

(96) Exchange
Input [5]: [channel#29, id#30, sales#104, returns#105, profit#106]
Arguments: hashpartitioning(channel#29, id#30, sales#104, returns#105, profit#106, 5), ENSURE_REQUIREMENTS, [plan_id=15]

(97) HashAggregate [codegen id : 76]
Input [5]: [channel#29, id#30, sales#104, returns#105, profit#106]
Keys [5]: [channel#29, id#30, sales#104, returns#105, profit#106]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#29, id#30, sales#104, returns#105, profit#106]

(98) TakeOrderedAndProject
Input [5]: [channel#29, id#30, sales#104, returns#105, profit#106]
Arguments: 100, [channel#29 ASC NULLS FIRST, id#30 ASC NULLS FIRST], [channel#29, id#30, sales#104, returns#105, profit#106]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (103)
+- * Project (102)
   +- * Filter (101)
      +- * ColumnarToRow (100)
         +- Scan parquet spark_catalog.default.date_dim (99)


(99) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_date#149]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(100) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#6, d_date#149]

(101) Filter [codegen id : 1]
Input [2]: [d_date_sk#6, d_date#149]
Condition : (((isnotnull(d_date#149) AND (d_date#149 >= 1998-08-04)) AND (d_date#149 <= 1998-09-03)) AND isnotnull(d_date_sk#6))

(102) Project [codegen id : 1]
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_date#149]

(103) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=16]

Subquery:2 Hosting operator id = 16 Hosting Expression = sr_returned_date_sk#19 IN dynamicpruning#5

Subquery:3 Hosting operator id = 31 Hosting Expression = cs_sold_date_sk#36 IN dynamicpruning#5

Subquery:4 Hosting operator id = 40 Hosting Expression = cr_returned_date_sk#47 IN dynamicpruning#5

Subquery:5 Hosting operator id = 50 Hosting Expression = ws_sold_date_sk#62 IN dynamicpruning#5

Subquery:6 Hosting operator id = 65 Hosting Expression = wr_returned_date_sk#75 IN dynamicpruning#5


