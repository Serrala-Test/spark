== Physical Plan ==
TakeOrderedAndProject (79)
+- Union (78)
   :- * HashAggregate (31)
   :  +- Exchange (30)
   :     +- * HashAggregate (29)
   :        +- * Project (28)
   :           +- * SortMergeJoin Inner (27)
   :              :- * Sort (21)
   :              :  +- Exchange (20)
   :              :     +- * Project (19)
   :              :        +- * BroadcastHashJoin Inner BuildRight (18)
   :              :           :- * Project (13)
   :              :           :  +- * BroadcastHashJoin Inner BuildRight (12)
   :              :           :     :- * Project (10)
   :              :           :     :  +- * BroadcastHashJoin Inner BuildRight (9)
   :              :           :     :     :- * Filter (3)
   :              :           :     :     :  +- * ColumnarToRow (2)
   :              :           :     :     :     +- Scan parquet spark_catalog.default.store_sales (1)
   :              :           :     :     +- BroadcastExchange (8)
   :              :           :     :        +- * Project (7)
   :              :           :     :           +- * Filter (6)
   :              :           :     :              +- * ColumnarToRow (5)
   :              :           :     :                 +- Scan parquet spark_catalog.default.customer_demographics (4)
   :              :           :     +- ReusedExchange (11)
   :              :           +- BroadcastExchange (17)
   :              :              +- * Filter (16)
   :              :                 +- * ColumnarToRow (15)
   :              :                    +- Scan parquet spark_catalog.default.store (14)
   :              +- * Sort (26)
   :                 +- Exchange (25)
   :                    +- * Filter (24)
   :                       +- * ColumnarToRow (23)
   :                          +- Scan parquet spark_catalog.default.item (22)
   :- * HashAggregate (56)
   :  +- Exchange (55)
   :     +- * HashAggregate (54)
   :        +- * Project (53)
   :           +- * SortMergeJoin Inner (52)
   :              :- * Sort (49)
   :              :  +- Exchange (48)
   :              :     +- * Project (47)
   :              :        +- * BroadcastHashJoin Inner BuildRight (46)
   :              :           :- * Project (44)
   :              :           :  +- * BroadcastHashJoin Inner BuildRight (43)
   :              :           :     :- * Project (37)
   :              :           :     :  +- * BroadcastHashJoin Inner BuildRight (36)
   :              :           :     :     :- * Filter (34)
   :              :           :     :     :  +- * ColumnarToRow (33)
   :              :           :     :     :     +- Scan parquet spark_catalog.default.store_sales (32)
   :              :           :     :     +- ReusedExchange (35)
   :              :           :     +- BroadcastExchange (42)
   :              :           :        +- * Project (41)
   :              :           :           +- * Filter (40)
   :              :           :              +- * ColumnarToRow (39)
   :              :           :                 +- Scan parquet spark_catalog.default.store (38)
   :              :           +- ReusedExchange (45)
   :              +- * Sort (51)
   :                 +- ReusedExchange (50)
   +- * HashAggregate (77)
      +- Exchange (76)
         +- * HashAggregate (75)
            +- * Project (74)
               +- * BroadcastHashJoin Inner BuildRight (73)
                  :- * Project (68)
                  :  +- * BroadcastHashJoin Inner BuildRight (67)
                  :     :- * Project (65)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (64)
                  :     :     :- * Project (62)
                  :     :     :  +- * BroadcastHashJoin Inner BuildRight (61)
                  :     :     :     :- * Filter (59)
                  :     :     :     :  +- * ColumnarToRow (58)
                  :     :     :     :     +- Scan parquet spark_catalog.default.store_sales (57)
                  :     :     :     +- ReusedExchange (60)
                  :     :     +- ReusedExchange (63)
                  :     +- ReusedExchange (66)
                  +- BroadcastExchange (72)
                     +- * Filter (71)
                        +- * ColumnarToRow (70)
                           +- Scan parquet spark_catalog.default.item (69)


(1) Scan parquet spark_catalog.default.store_sales
Output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]

(3) Filter [codegen id : 4]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Condition : ((isnotnull(ss_cdemo_sk#2) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_item_sk#1))

(4) Scan parquet spark_catalog.default.customer_demographics
Output [4]: [cd_demo_sk#10, cd_gender#11, cd_marital_status#12, cd_education_status#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), EqualTo(cd_gender,F), EqualTo(cd_marital_status,W), EqualTo(cd_education_status,Primary             ), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>

(5) ColumnarToRow [codegen id : 1]
Input [4]: [cd_demo_sk#10, cd_gender#11, cd_marital_status#12, cd_education_status#13]

(6) Filter [codegen id : 1]
Input [4]: [cd_demo_sk#10, cd_gender#11, cd_marital_status#12, cd_education_status#13]
Condition : ((((((isnotnull(cd_gender#11) AND isnotnull(cd_marital_status#12)) AND isnotnull(cd_education_status#13)) AND (cd_gender#11 = F)) AND (cd_marital_status#12 = W)) AND (cd_education_status#13 = Primary             )) AND isnotnull(cd_demo_sk#10))

(7) Project [codegen id : 1]
Output [1]: [cd_demo_sk#10]
Input [4]: [cd_demo_sk#10, cd_gender#11, cd_marital_status#12, cd_education_status#13]

(8) BroadcastExchange
Input [1]: [cd_demo_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#10]
Join type: Inner
Join condition: None

(10) Project [codegen id : 4]
Output [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Input [9]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, cd_demo_sk#10]

(11) ReusedExchange [Reuses operator id: 84]
Output [1]: [d_date_sk#14]

(12) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#14]
Join type: Inner
Join condition: None

(13) Project [codegen id : 4]
Output [6]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, d_date_sk#14]

(14) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#15, s_state#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(15) ColumnarToRow [codegen id : 3]
Input [2]: [s_store_sk#15, s_state#16]

(16) Filter [codegen id : 3]
Input [2]: [s_store_sk#15, s_state#16]
Condition : ((isnotnull(s_state#16) AND (s_state#16 = TN)) AND isnotnull(s_store_sk#15))

(17) BroadcastExchange
Input [2]: [s_store_sk#15, s_state#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(18) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#15]
Join type: Inner
Join condition: None

(19) Project [codegen id : 4]
Output [6]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#16]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_store_sk#15, s_state#16]

(20) Exchange
Input [6]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#16]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(21) Sort [codegen id : 5]
Input [6]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#16]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(22) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#17, i_item_id#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(23) ColumnarToRow [codegen id : 6]
Input [2]: [i_item_sk#17, i_item_id#18]

(24) Filter [codegen id : 6]
Input [2]: [i_item_sk#17, i_item_id#18]
Condition : isnotnull(i_item_sk#17)

(25) Exchange
Input [2]: [i_item_sk#17, i_item_id#18]
Arguments: hashpartitioning(i_item_sk#17, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(26) Sort [codegen id : 7]
Input [2]: [i_item_sk#17, i_item_id#18]
Arguments: [i_item_sk#17 ASC NULLS FIRST], false, 0

(27) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#17]
Join type: Inner
Join condition: None

(28) Project [codegen id : 8]
Output [6]: [i_item_id#18, s_state#16, ss_quantity#4 AS agg1#19, ss_list_price#5 AS agg2#20, ss_coupon_amt#7 AS agg3#21, ss_sales_price#6 AS agg4#22]
Input [8]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#16, i_item_sk#17, i_item_id#18]

(29) HashAggregate [codegen id : 8]
Input [6]: [i_item_id#18, s_state#16, agg1#19, agg2#20, agg3#21, agg4#22]
Keys [2]: [i_item_id#18, s_state#16]
Functions [4]: [partial_avg(agg1#19), partial_avg(UnscaledValue(agg2#20)), partial_avg(UnscaledValue(agg3#21)), partial_avg(UnscaledValue(agg4#22))]
Aggregate Attributes [8]: [sum#23, count#24, sum#25, count#26, sum#27, count#28, sum#29, count#30]
Results [10]: [i_item_id#18, s_state#16, sum#31, count#32, sum#33, count#34, sum#35, count#36, sum#37, count#38]

(30) Exchange
Input [10]: [i_item_id#18, s_state#16, sum#31, count#32, sum#33, count#34, sum#35, count#36, sum#37, count#38]
Arguments: hashpartitioning(i_item_id#18, s_state#16, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(31) HashAggregate [codegen id : 9]
Input [10]: [i_item_id#18, s_state#16, sum#31, count#32, sum#33, count#34, sum#35, count#36, sum#37, count#38]
Keys [2]: [i_item_id#18, s_state#16]
Functions [4]: [avg(agg1#19), avg(UnscaledValue(agg2#20)), avg(UnscaledValue(agg3#21)), avg(UnscaledValue(agg4#22))]
Aggregate Attributes [4]: [avg(agg1#19)#39, avg(UnscaledValue(agg2#20))#40, avg(UnscaledValue(agg3#21))#41, avg(UnscaledValue(agg4#22))#42]
Results [7]: [i_item_id#18, s_state#16, 0 AS g_state#43, avg(agg1#19)#39 AS agg1#44, cast((avg(UnscaledValue(agg2#20))#40 / 100.0) as decimal(11,6)) AS agg2#45, cast((avg(UnscaledValue(agg3#21))#41 / 100.0) as decimal(11,6)) AS agg3#46, cast((avg(UnscaledValue(agg4#22))#42 / 100.0) as decimal(11,6)) AS agg4#47]

(32) Scan parquet spark_catalog.default.store_sales
Output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(33) ColumnarToRow [codegen id : 13]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]

(34) Filter [codegen id : 13]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Condition : ((isnotnull(ss_cdemo_sk#2) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_item_sk#1))

(35) ReusedExchange [Reuses operator id: 8]
Output [1]: [cd_demo_sk#10]

(36) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#10]
Join type: Inner
Join condition: None

(37) Project [codegen id : 13]
Output [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Input [9]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, cd_demo_sk#10]

(38) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#15, s_state#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(39) ColumnarToRow [codegen id : 11]
Input [2]: [s_store_sk#15, s_state#16]

(40) Filter [codegen id : 11]
Input [2]: [s_store_sk#15, s_state#16]
Condition : ((isnotnull(s_state#16) AND (s_state#16 = TN)) AND isnotnull(s_store_sk#15))

(41) Project [codegen id : 11]
Output [1]: [s_store_sk#15]
Input [2]: [s_store_sk#15, s_state#16]

(42) BroadcastExchange
Input [1]: [s_store_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

(43) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#15]
Join type: Inner
Join condition: None

(44) Project [codegen id : 13]
Output [6]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, s_store_sk#15]

(45) ReusedExchange [Reuses operator id: 84]
Output [1]: [d_date_sk#14]

(46) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#14]
Join type: Inner
Join condition: None

(47) Project [codegen id : 13]
Output [5]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]
Input [7]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, d_date_sk#14]

(48) Exchange
Input [5]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(49) Sort [codegen id : 14]
Input [5]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(50) ReusedExchange [Reuses operator id: 25]
Output [2]: [i_item_sk#17, i_item_id#18]

(51) Sort [codegen id : 16]
Input [2]: [i_item_sk#17, i_item_id#18]
Arguments: [i_item_sk#17 ASC NULLS FIRST], false, 0

(52) SortMergeJoin [codegen id : 17]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#17]
Join type: Inner
Join condition: None

(53) Project [codegen id : 17]
Output [5]: [i_item_id#18, ss_quantity#4 AS agg1#19, ss_list_price#5 AS agg2#20, ss_coupon_amt#7 AS agg3#21, ss_sales_price#6 AS agg4#22]
Input [7]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, i_item_sk#17, i_item_id#18]

(54) HashAggregate [codegen id : 17]
Input [5]: [i_item_id#18, agg1#19, agg2#20, agg3#21, agg4#22]
Keys [1]: [i_item_id#18]
Functions [4]: [partial_avg(agg1#19), partial_avg(UnscaledValue(agg2#20)), partial_avg(UnscaledValue(agg3#21)), partial_avg(UnscaledValue(agg4#22))]
Aggregate Attributes [8]: [sum#48, count#49, sum#50, count#51, sum#52, count#53, sum#54, count#55]
Results [9]: [i_item_id#18, sum#56, count#57, sum#58, count#59, sum#60, count#61, sum#62, count#63]

(55) Exchange
Input [9]: [i_item_id#18, sum#56, count#57, sum#58, count#59, sum#60, count#61, sum#62, count#63]
Arguments: hashpartitioning(i_item_id#18, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(56) HashAggregate [codegen id : 18]
Input [9]: [i_item_id#18, sum#56, count#57, sum#58, count#59, sum#60, count#61, sum#62, count#63]
Keys [1]: [i_item_id#18]
Functions [4]: [avg(agg1#19), avg(UnscaledValue(agg2#20)), avg(UnscaledValue(agg3#21)), avg(UnscaledValue(agg4#22))]
Aggregate Attributes [4]: [avg(agg1#19)#64, avg(UnscaledValue(agg2#20))#65, avg(UnscaledValue(agg3#21))#66, avg(UnscaledValue(agg4#22))#67]
Results [7]: [i_item_id#18, null AS s_state#68, 1 AS g_state#69, avg(agg1#19)#64 AS agg1#70, cast((avg(UnscaledValue(agg2#20))#65 / 100.0) as decimal(11,6)) AS agg2#71, cast((avg(UnscaledValue(agg3#21))#66 / 100.0) as decimal(11,6)) AS agg3#72, cast((avg(UnscaledValue(agg4#22))#67 / 100.0) as decimal(11,6)) AS agg4#73]

(57) Scan parquet spark_catalog.default.store_sales
Output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(58) ColumnarToRow [codegen id : 23]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]

(59) Filter [codegen id : 23]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Condition : ((isnotnull(ss_cdemo_sk#2) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_item_sk#1))

(60) ReusedExchange [Reuses operator id: 8]
Output [1]: [cd_demo_sk#10]

(61) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [ss_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#10]
Join type: Inner
Join condition: None

(62) Project [codegen id : 23]
Output [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Input [9]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, cd_demo_sk#10]

(63) ReusedExchange [Reuses operator id: 42]
Output [1]: [s_store_sk#15]

(64) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#15]
Join type: Inner
Join condition: None

(65) Project [codegen id : 23]
Output [6]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, s_store_sk#15]

(66) ReusedExchange [Reuses operator id: 84]
Output [1]: [d_date_sk#14]

(67) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#14]
Join type: Inner
Join condition: None

(68) Project [codegen id : 23]
Output [5]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]
Input [7]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, d_date_sk#14]

(69) Scan parquet spark_catalog.default.item
Output [1]: [i_item_sk#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int>

(70) ColumnarToRow [codegen id : 22]
Input [1]: [i_item_sk#17]

(71) Filter [codegen id : 22]
Input [1]: [i_item_sk#17]
Condition : isnotnull(i_item_sk#17)

(72) BroadcastExchange
Input [1]: [i_item_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=9]

(73) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#17]
Join type: Inner
Join condition: None

(74) Project [codegen id : 23]
Output [4]: [ss_quantity#4 AS agg1#19, ss_list_price#5 AS agg2#20, ss_coupon_amt#7 AS agg3#21, ss_sales_price#6 AS agg4#22]
Input [6]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, i_item_sk#17]

(75) HashAggregate [codegen id : 23]
Input [4]: [agg1#19, agg2#20, agg3#21, agg4#22]
Keys: []
Functions [4]: [partial_avg(agg1#19), partial_avg(UnscaledValue(agg2#20)), partial_avg(UnscaledValue(agg3#21)), partial_avg(UnscaledValue(agg4#22))]
Aggregate Attributes [8]: [sum#74, count#75, sum#76, count#77, sum#78, count#79, sum#80, count#81]
Results [8]: [sum#82, count#83, sum#84, count#85, sum#86, count#87, sum#88, count#89]

(76) Exchange
Input [8]: [sum#82, count#83, sum#84, count#85, sum#86, count#87, sum#88, count#89]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=10]

(77) HashAggregate [codegen id : 24]
Input [8]: [sum#82, count#83, sum#84, count#85, sum#86, count#87, sum#88, count#89]
Keys: []
Functions [4]: [avg(agg1#19), avg(UnscaledValue(agg2#20)), avg(UnscaledValue(agg3#21)), avg(UnscaledValue(agg4#22))]
Aggregate Attributes [4]: [avg(agg1#19)#90, avg(UnscaledValue(agg2#20))#91, avg(UnscaledValue(agg3#21))#92, avg(UnscaledValue(agg4#22))#93]
Results [7]: [null AS i_item_id#94, null AS s_state#95, 1 AS g_state#96, avg(agg1#19)#90 AS agg1#97, cast((avg(UnscaledValue(agg2#20))#91 / 100.0) as decimal(11,6)) AS agg2#98, cast((avg(UnscaledValue(agg3#21))#92 / 100.0) as decimal(11,6)) AS agg3#99, cast((avg(UnscaledValue(agg4#22))#93 / 100.0) as decimal(11,6)) AS agg4#100]

(78) Union

(79) TakeOrderedAndProject
Input [7]: [i_item_id#18, s_state#16, g_state#43, agg1#44, agg2#45, agg3#46, agg4#47]
Arguments: 100, [i_item_id#18 ASC NULLS FIRST, s_state#16 ASC NULLS FIRST], [i_item_id#18, s_state#16, g_state#43, agg1#44, agg2#45, agg3#46, agg4#47]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (84)
+- * Project (83)
   +- * Filter (82)
      +- * ColumnarToRow (81)
         +- Scan parquet spark_catalog.default.date_dim (80)


(80) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#14, d_year#101]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(81) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#101]

(82) Filter [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#101]
Condition : ((isnotnull(d_year#101) AND (d_year#101 = 1998)) AND isnotnull(d_date_sk#14))

(83) Project [codegen id : 1]
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#101]

(84) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=11]

Subquery:2 Hosting operator id = 32 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9

Subquery:3 Hosting operator id = 57 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9


