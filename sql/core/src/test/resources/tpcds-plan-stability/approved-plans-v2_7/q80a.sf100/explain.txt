== Physical Plan ==
TakeOrderedAndProject (124)
+- * HashAggregate (123)
   +- Exchange (122)
      +- * HashAggregate (121)
         +- Union (120)
            :- * HashAggregate (109)
            :  +- Exchange (108)
            :     +- * HashAggregate (107)
            :        +- Union (106)
            :           :- * HashAggregate (43)
            :           :  +- Exchange (42)
            :           :     +- * HashAggregate (41)
            :           :        +- * Project (40)
            :           :           +- * BroadcastHashJoin Inner BuildRight (39)
            :           :              :- * Project (33)
            :           :              :  +- * BroadcastHashJoin Inner BuildRight (32)
            :           :              :     :- * Project (26)
            :           :              :     :  +- * BroadcastHashJoin Inner BuildRight (25)
            :           :              :     :     :- * Project (19)
            :           :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (18)
            :           :              :     :     :     :- * Project (12)
            :           :              :     :     :     :  +- SortMergeJoin LeftOuter (11)
            :           :              :     :     :     :     :- * Sort (5)
            :           :              :     :     :     :     :  +- Exchange (4)
            :           :              :     :     :     :     :     +- * Filter (3)
            :           :              :     :     :     :     :        +- * ColumnarToRow (2)
            :           :              :     :     :     :     :           +- Scan parquet default.store_sales (1)
            :           :              :     :     :     :     +- * Sort (10)
            :           :              :     :     :     :        +- Exchange (9)
            :           :              :     :     :     :           +- * Filter (8)
            :           :              :     :     :     :              +- * ColumnarToRow (7)
            :           :              :     :     :     :                 +- Scan parquet default.store_returns (6)
            :           :              :     :     :     +- BroadcastExchange (17)
            :           :              :     :     :        +- * Project (16)
            :           :              :     :     :           +- * Filter (15)
            :           :              :     :     :              +- * ColumnarToRow (14)
            :           :              :     :     :                 +- Scan parquet default.item (13)
            :           :              :     :     +- BroadcastExchange (24)
            :           :              :     :        +- * Project (23)
            :           :              :     :           +- * Filter (22)
            :           :              :     :              +- * ColumnarToRow (21)
            :           :              :     :                 +- Scan parquet default.promotion (20)
            :           :              :     +- BroadcastExchange (31)
            :           :              :        +- * Project (30)
            :           :              :           +- * Filter (29)
            :           :              :              +- * ColumnarToRow (28)
            :           :              :                 +- Scan parquet default.date_dim (27)
            :           :              +- BroadcastExchange (38)
            :           :                 +- * Project (37)
            :           :                    +- * Filter (36)
            :           :                       +- * ColumnarToRow (35)
            :           :                          +- Scan parquet default.store (34)
            :           :- * HashAggregate (74)
            :           :  +- Exchange (73)
            :           :     +- * HashAggregate (72)
            :           :        +- * Project (71)
            :           :           +- * BroadcastHashJoin Inner BuildRight (70)
            :           :              :- * Project (64)
            :           :              :  +- * BroadcastHashJoin Inner BuildRight (63)
            :           :              :     :- * Project (61)
            :           :              :     :  +- * BroadcastHashJoin Inner BuildRight (60)
            :           :              :     :     :- * Project (58)
            :           :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (57)
            :           :              :     :     :     :- * Project (55)
            :           :              :     :     :     :  +- SortMergeJoin LeftOuter (54)
            :           :              :     :     :     :     :- * Sort (48)
            :           :              :     :     :     :     :  +- Exchange (47)
            :           :              :     :     :     :     :     +- * Filter (46)
            :           :              :     :     :     :     :        +- * ColumnarToRow (45)
            :           :              :     :     :     :     :           +- Scan parquet default.catalog_sales (44)
            :           :              :     :     :     :     +- * Sort (53)
            :           :              :     :     :     :        +- Exchange (52)
            :           :              :     :     :     :           +- * Filter (51)
            :           :              :     :     :     :              +- * ColumnarToRow (50)
            :           :              :     :     :     :                 +- Scan parquet default.catalog_returns (49)
            :           :              :     :     :     +- ReusedExchange (56)
            :           :              :     :     +- ReusedExchange (59)
            :           :              :     +- ReusedExchange (62)
            :           :              +- BroadcastExchange (69)
            :           :                 +- * Project (68)
            :           :                    +- * Filter (67)
            :           :                       +- * ColumnarToRow (66)
            :           :                          +- Scan parquet default.catalog_page (65)
            :           +- * HashAggregate (105)
            :              +- Exchange (104)
            :                 +- * HashAggregate (103)
            :                    +- * Project (102)
            :                       +- * BroadcastHashJoin Inner BuildRight (101)
            :                          :- * Project (95)
            :                          :  +- * BroadcastHashJoin Inner BuildRight (94)
            :                          :     :- * Project (92)
            :                          :     :  +- * BroadcastHashJoin Inner BuildRight (91)
            :                          :     :     :- * Project (89)
            :                          :     :     :  +- * BroadcastHashJoin Inner BuildRight (88)
            :                          :     :     :     :- * Project (86)
            :                          :     :     :     :  +- SortMergeJoin LeftOuter (85)
            :                          :     :     :     :     :- * Sort (79)
            :                          :     :     :     :     :  +- Exchange (78)
            :                          :     :     :     :     :     +- * Filter (77)
            :                          :     :     :     :     :        +- * ColumnarToRow (76)
            :                          :     :     :     :     :           +- Scan parquet default.web_sales (75)
            :                          :     :     :     :     +- * Sort (84)
            :                          :     :     :     :        +- Exchange (83)
            :                          :     :     :     :           +- * Filter (82)
            :                          :     :     :     :              +- * ColumnarToRow (81)
            :                          :     :     :     :                 +- Scan parquet default.web_returns (80)
            :                          :     :     :     +- ReusedExchange (87)
            :                          :     :     +- ReusedExchange (90)
            :                          :     +- ReusedExchange (93)
            :                          +- BroadcastExchange (100)
            :                             +- * Project (99)
            :                                +- * Filter (98)
            :                                   +- * ColumnarToRow (97)
            :                                      +- Scan parquet default.web_site (96)
            :- * HashAggregate (114)
            :  +- Exchange (113)
            :     +- * HashAggregate (112)
            :        +- * HashAggregate (111)
            :           +- ReusedExchange (110)
            +- * HashAggregate (119)
               +- Exchange (118)
                  +- * HashAggregate (117)
                     +- * HashAggregate (116)
                        +- ReusedExchange (115)


(1) Scan parquet default.store_sales
Output [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_net_profit#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_net_profit#7]

(3) Filter [codegen id : 1]
Input [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_net_profit#7]
Condition : (((isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_item_sk#2)) AND isnotnull(ss_promo_sk#4))

(4) Exchange
Input [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_net_profit#7]
Arguments: hashpartitioning(cast(ss_item_sk#2 as bigint), cast(ss_ticket_number#5 as bigint), 5), ENSURE_REQUIREMENTS, [id=#8]

(5) Sort [codegen id : 2]
Input [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_net_profit#7]
Arguments: [cast(ss_item_sk#2 as bigint) ASC NULLS FIRST, cast(ss_ticket_number#5 as bigint) ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_returns
Output [4]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:bigint,sr_ticket_number:bigint,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(7) ColumnarToRow [codegen id : 3]
Input [4]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]

(8) Filter [codegen id : 3]
Input [4]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]
Condition : (isnotnull(sr_item_sk#9) AND isnotnull(sr_ticket_number#10))

(9) Exchange
Input [4]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]
Arguments: hashpartitioning(sr_item_sk#9, sr_ticket_number#10, 5), ENSURE_REQUIREMENTS, [id=#13]

(10) Sort [codegen id : 4]
Input [4]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]
Arguments: [sr_item_sk#9 ASC NULLS FIRST, sr_ticket_number#10 ASC NULLS FIRST], false, 0

(11) SortMergeJoin
Left keys [2]: [cast(ss_item_sk#2 as bigint), cast(ss_ticket_number#5 as bigint)]
Right keys [2]: [sr_item_sk#9, sr_ticket_number#10]
Join condition: None

(12) Project [codegen id : 9]
Output [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#11, sr_net_loss#12]
Input [11]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_net_profit#7, sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]

(13) Scan parquet default.item
Output [2]: [i_item_sk#14, i_current_price#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>

(14) ColumnarToRow [codegen id : 5]
Input [2]: [i_item_sk#14, i_current_price#15]

(15) Filter [codegen id : 5]
Input [2]: [i_item_sk#14, i_current_price#15]
Condition : ((isnotnull(i_current_price#15) AND (i_current_price#15 > 50.00)) AND isnotnull(i_item_sk#14))

(16) Project [codegen id : 5]
Output [1]: [i_item_sk#14]
Input [2]: [i_item_sk#14, i_current_price#15]

(17) BroadcastExchange
Input [1]: [i_item_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(18) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#14]
Join condition: None

(19) Project [codegen id : 9]
Output [7]: [ss_sold_date_sk#1, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#11, sr_net_loss#12]
Input [9]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#11, sr_net_loss#12, i_item_sk#14]

(20) Scan parquet default.promotion
Output [2]: [p_promo_sk#17, p_channel_tv#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>

(21) ColumnarToRow [codegen id : 6]
Input [2]: [p_promo_sk#17, p_channel_tv#18]

(22) Filter [codegen id : 6]
Input [2]: [p_promo_sk#17, p_channel_tv#18]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, p_channel_tv#18, 1, false, true) = N) AND isnotnull(p_promo_sk#17))

(23) Project [codegen id : 6]
Output [1]: [p_promo_sk#17]
Input [2]: [p_promo_sk#17, p_channel_tv#18]

(24) BroadcastExchange
Input [1]: [p_promo_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#19]

(25) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_promo_sk#4]
Right keys [1]: [p_promo_sk#17]
Join condition: None

(26) Project [codegen id : 9]
Output [6]: [ss_sold_date_sk#1, ss_store_sk#3, ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#11, sr_net_loss#12]
Input [8]: [ss_sold_date_sk#1, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#11, sr_net_loss#12, p_promo_sk#17]

(27) Scan parquet default.date_dim
Output [2]: [d_date_sk#20, d_date#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(28) ColumnarToRow [codegen id : 7]
Input [2]: [d_date_sk#20, d_date#21]

(29) Filter [codegen id : 7]
Input [2]: [d_date_sk#20, d_date#21]
Condition : (((isnotnull(d_date#21) AND (d_date#21 >= 10442)) AND (d_date#21 <= 10472)) AND isnotnull(d_date_sk#20))

(30) Project [codegen id : 7]
Output [1]: [d_date_sk#20]
Input [2]: [d_date_sk#20, d_date#21]

(31) BroadcastExchange
Input [1]: [d_date_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22]

(32) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#20]
Join condition: None

(33) Project [codegen id : 9]
Output [5]: [ss_store_sk#3, ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#11, sr_net_loss#12]
Input [7]: [ss_sold_date_sk#1, ss_store_sk#3, ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#11, sr_net_loss#12, d_date_sk#20]

(34) Scan parquet default.store
Output [2]: [s_store_sk#23, s_store_id#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(35) ColumnarToRow [codegen id : 8]
Input [2]: [s_store_sk#23, s_store_id#24]

(36) Filter [codegen id : 8]
Input [2]: [s_store_sk#23, s_store_id#24]
Condition : isnotnull(s_store_sk#23)

(37) Project [codegen id : 8]
Output [2]: [s_store_sk#23, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_store_id#24, 16, false, true) AS s_store_id#25]
Input [2]: [s_store_sk#23, s_store_id#24]

(38) BroadcastExchange
Input [2]: [s_store_sk#23, s_store_id#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#26]

(39) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#23]
Join condition: None

(40) Project [codegen id : 9]
Output [5]: [ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#11, sr_net_loss#12, s_store_id#25]
Input [7]: [ss_store_sk#3, ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#11, sr_net_loss#12, s_store_sk#23, s_store_id#25]

(41) HashAggregate [codegen id : 9]
Input [5]: [ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#11, sr_net_loss#12, s_store_id#25]
Keys [1]: [s_store_id#25]
Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#6)), partial_sum(coalesce(cast(sr_return_amt#11 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(ss_net_profit#7 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#12 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [5]: [sum#27, sum#28, isEmpty#29, sum#30, isEmpty#31]
Results [6]: [s_store_id#25, sum#32, sum#33, isEmpty#34, sum#35, isEmpty#36]

(42) Exchange
Input [6]: [s_store_id#25, sum#32, sum#33, isEmpty#34, sum#35, isEmpty#36]
Arguments: hashpartitioning(s_store_id#25, 5), ENSURE_REQUIREMENTS, [id=#37]

(43) HashAggregate [codegen id : 10]
Input [6]: [s_store_id#25, sum#32, sum#33, isEmpty#34, sum#35, isEmpty#36]
Keys [1]: [s_store_id#25]
Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#6)), sum(coalesce(cast(sr_return_amt#11 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(ss_net_profit#7 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#12 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_ext_sales_price#6))#38, sum(coalesce(cast(sr_return_amt#11 as decimal(12,2)), 0.00))#39, sum(CheckOverflow((promote_precision(cast(ss_net_profit#7 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#12 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#40]
Results [5]: [store channel AS channel#41, concat(store, s_store_id#25) AS id#42, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#6))#38,17,2) AS sales#43, sum(coalesce(cast(sr_return_amt#11 as decimal(12,2)), 0.00))#39 AS returns#44, sum(CheckOverflow((promote_precision(cast(ss_net_profit#7 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#12 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#40 AS profit#45]

(44) Scan parquet default.catalog_sales
Output [7]: [cs_sold_date_sk#46, cs_catalog_page_sk#47, cs_item_sk#48, cs_promo_sk#49, cs_order_number#50, cs_ext_sales_price#51, cs_net_profit#52]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_catalog_page_sk), IsNotNull(cs_item_sk), IsNotNull(cs_promo_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_catalog_page_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(45) ColumnarToRow [codegen id : 11]
Input [7]: [cs_sold_date_sk#46, cs_catalog_page_sk#47, cs_item_sk#48, cs_promo_sk#49, cs_order_number#50, cs_ext_sales_price#51, cs_net_profit#52]

(46) Filter [codegen id : 11]
Input [7]: [cs_sold_date_sk#46, cs_catalog_page_sk#47, cs_item_sk#48, cs_promo_sk#49, cs_order_number#50, cs_ext_sales_price#51, cs_net_profit#52]
Condition : (((isnotnull(cs_sold_date_sk#46) AND isnotnull(cs_catalog_page_sk#47)) AND isnotnull(cs_item_sk#48)) AND isnotnull(cs_promo_sk#49))

(47) Exchange
Input [7]: [cs_sold_date_sk#46, cs_catalog_page_sk#47, cs_item_sk#48, cs_promo_sk#49, cs_order_number#50, cs_ext_sales_price#51, cs_net_profit#52]
Arguments: hashpartitioning(cs_item_sk#48, cs_order_number#50, 5), ENSURE_REQUIREMENTS, [id=#53]

(48) Sort [codegen id : 12]
Input [7]: [cs_sold_date_sk#46, cs_catalog_page_sk#47, cs_item_sk#48, cs_promo_sk#49, cs_order_number#50, cs_ext_sales_price#51, cs_net_profit#52]
Arguments: [cs_item_sk#48 ASC NULLS FIRST, cs_order_number#50 ASC NULLS FIRST], false, 0

(49) Scan parquet default.catalog_returns
Output [4]: [cr_item_sk#54, cr_order_number#55, cr_return_amount#56, cr_net_loss#57]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(50) ColumnarToRow [codegen id : 13]
Input [4]: [cr_item_sk#54, cr_order_number#55, cr_return_amount#56, cr_net_loss#57]

(51) Filter [codegen id : 13]
Input [4]: [cr_item_sk#54, cr_order_number#55, cr_return_amount#56, cr_net_loss#57]
Condition : (isnotnull(cr_item_sk#54) AND isnotnull(cr_order_number#55))

(52) Exchange
Input [4]: [cr_item_sk#54, cr_order_number#55, cr_return_amount#56, cr_net_loss#57]
Arguments: hashpartitioning(cr_item_sk#54, cr_order_number#55, 5), ENSURE_REQUIREMENTS, [id=#58]

(53) Sort [codegen id : 14]
Input [4]: [cr_item_sk#54, cr_order_number#55, cr_return_amount#56, cr_net_loss#57]
Arguments: [cr_item_sk#54 ASC NULLS FIRST, cr_order_number#55 ASC NULLS FIRST], false, 0

(54) SortMergeJoin
Left keys [2]: [cs_item_sk#48, cs_order_number#50]
Right keys [2]: [cr_item_sk#54, cr_order_number#55]
Join condition: None

(55) Project [codegen id : 19]
Output [8]: [cs_sold_date_sk#46, cs_catalog_page_sk#47, cs_item_sk#48, cs_promo_sk#49, cs_ext_sales_price#51, cs_net_profit#52, cr_return_amount#56, cr_net_loss#57]
Input [11]: [cs_sold_date_sk#46, cs_catalog_page_sk#47, cs_item_sk#48, cs_promo_sk#49, cs_order_number#50, cs_ext_sales_price#51, cs_net_profit#52, cr_item_sk#54, cr_order_number#55, cr_return_amount#56, cr_net_loss#57]

(56) ReusedExchange [Reuses operator id: 17]
Output [1]: [i_item_sk#14]

(57) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_item_sk#48]
Right keys [1]: [i_item_sk#14]
Join condition: None

(58) Project [codegen id : 19]
Output [7]: [cs_sold_date_sk#46, cs_catalog_page_sk#47, cs_promo_sk#49, cs_ext_sales_price#51, cs_net_profit#52, cr_return_amount#56, cr_net_loss#57]
Input [9]: [cs_sold_date_sk#46, cs_catalog_page_sk#47, cs_item_sk#48, cs_promo_sk#49, cs_ext_sales_price#51, cs_net_profit#52, cr_return_amount#56, cr_net_loss#57, i_item_sk#14]

(59) ReusedExchange [Reuses operator id: 24]
Output [1]: [p_promo_sk#17]

(60) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_promo_sk#49]
Right keys [1]: [p_promo_sk#17]
Join condition: None

(61) Project [codegen id : 19]
Output [6]: [cs_sold_date_sk#46, cs_catalog_page_sk#47, cs_ext_sales_price#51, cs_net_profit#52, cr_return_amount#56, cr_net_loss#57]
Input [8]: [cs_sold_date_sk#46, cs_catalog_page_sk#47, cs_promo_sk#49, cs_ext_sales_price#51, cs_net_profit#52, cr_return_amount#56, cr_net_loss#57, p_promo_sk#17]

(62) ReusedExchange [Reuses operator id: 31]
Output [1]: [d_date_sk#20]

(63) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_sold_date_sk#46]
Right keys [1]: [d_date_sk#20]
Join condition: None

(64) Project [codegen id : 19]
Output [5]: [cs_catalog_page_sk#47, cs_ext_sales_price#51, cs_net_profit#52, cr_return_amount#56, cr_net_loss#57]
Input [7]: [cs_sold_date_sk#46, cs_catalog_page_sk#47, cs_ext_sales_price#51, cs_net_profit#52, cr_return_amount#56, cr_net_loss#57, d_date_sk#20]

(65) Scan parquet default.catalog_page
Output [2]: [cp_catalog_page_sk#59, cp_catalog_page_id#60]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>

(66) ColumnarToRow [codegen id : 18]
Input [2]: [cp_catalog_page_sk#59, cp_catalog_page_id#60]

(67) Filter [codegen id : 18]
Input [2]: [cp_catalog_page_sk#59, cp_catalog_page_id#60]
Condition : isnotnull(cp_catalog_page_sk#59)

(68) Project [codegen id : 18]
Output [2]: [cp_catalog_page_sk#59, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cp_catalog_page_id#60, 16, false, true) AS cp_catalog_page_id#61]
Input [2]: [cp_catalog_page_sk#59, cp_catalog_page_id#60]

(69) BroadcastExchange
Input [2]: [cp_catalog_page_sk#59, cp_catalog_page_id#61]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#62]

(70) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_catalog_page_sk#47]
Right keys [1]: [cp_catalog_page_sk#59]
Join condition: None

(71) Project [codegen id : 19]
Output [5]: [cs_ext_sales_price#51, cs_net_profit#52, cr_return_amount#56, cr_net_loss#57, cp_catalog_page_id#61]
Input [7]: [cs_catalog_page_sk#47, cs_ext_sales_price#51, cs_net_profit#52, cr_return_amount#56, cr_net_loss#57, cp_catalog_page_sk#59, cp_catalog_page_id#61]

(72) HashAggregate [codegen id : 19]
Input [5]: [cs_ext_sales_price#51, cs_net_profit#52, cr_return_amount#56, cr_net_loss#57, cp_catalog_page_id#61]
Keys [1]: [cp_catalog_page_id#61]
Functions [3]: [partial_sum(UnscaledValue(cs_ext_sales_price#51)), partial_sum(coalesce(cast(cr_return_amount#56 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(cs_net_profit#52 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#57 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [5]: [sum#63, sum#64, isEmpty#65, sum#66, isEmpty#67]
Results [6]: [cp_catalog_page_id#61, sum#68, sum#69, isEmpty#70, sum#71, isEmpty#72]

(73) Exchange
Input [6]: [cp_catalog_page_id#61, sum#68, sum#69, isEmpty#70, sum#71, isEmpty#72]
Arguments: hashpartitioning(cp_catalog_page_id#61, 5), ENSURE_REQUIREMENTS, [id=#73]

(74) HashAggregate [codegen id : 20]
Input [6]: [cp_catalog_page_id#61, sum#68, sum#69, isEmpty#70, sum#71, isEmpty#72]
Keys [1]: [cp_catalog_page_id#61]
Functions [3]: [sum(UnscaledValue(cs_ext_sales_price#51)), sum(coalesce(cast(cr_return_amount#56 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(cs_net_profit#52 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#57 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_sales_price#51))#74, sum(coalesce(cast(cr_return_amount#56 as decimal(12,2)), 0.00))#75, sum(CheckOverflow((promote_precision(cast(cs_net_profit#52 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#57 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#76]
Results [5]: [catalog channel AS channel#77, concat(catalog_page, cp_catalog_page_id#61) AS id#78, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#51))#74,17,2) AS sales#79, sum(coalesce(cast(cr_return_amount#56 as decimal(12,2)), 0.00))#75 AS returns#80, sum(CheckOverflow((promote_precision(cast(cs_net_profit#52 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#57 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#76 AS profit#81]

(75) Scan parquet default.web_sales
Output [7]: [ws_sold_date_sk#82, ws_item_sk#83, ws_web_site_sk#84, ws_promo_sk#85, ws_order_number#86, ws_ext_sales_price#87, ws_net_profit#88]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_web_site_sk), IsNotNull(ws_item_sk), IsNotNull(ws_promo_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_web_site_sk:int,ws_promo_sk:int,ws_order_number:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(76) ColumnarToRow [codegen id : 21]
Input [7]: [ws_sold_date_sk#82, ws_item_sk#83, ws_web_site_sk#84, ws_promo_sk#85, ws_order_number#86, ws_ext_sales_price#87, ws_net_profit#88]

(77) Filter [codegen id : 21]
Input [7]: [ws_sold_date_sk#82, ws_item_sk#83, ws_web_site_sk#84, ws_promo_sk#85, ws_order_number#86, ws_ext_sales_price#87, ws_net_profit#88]
Condition : (((isnotnull(ws_sold_date_sk#82) AND isnotnull(ws_web_site_sk#84)) AND isnotnull(ws_item_sk#83)) AND isnotnull(ws_promo_sk#85))

(78) Exchange
Input [7]: [ws_sold_date_sk#82, ws_item_sk#83, ws_web_site_sk#84, ws_promo_sk#85, ws_order_number#86, ws_ext_sales_price#87, ws_net_profit#88]
Arguments: hashpartitioning(cast(ws_item_sk#83 as bigint), cast(ws_order_number#86 as bigint), 5), ENSURE_REQUIREMENTS, [id=#89]

(79) Sort [codegen id : 22]
Input [7]: [ws_sold_date_sk#82, ws_item_sk#83, ws_web_site_sk#84, ws_promo_sk#85, ws_order_number#86, ws_ext_sales_price#87, ws_net_profit#88]
Arguments: [cast(ws_item_sk#83 as bigint) ASC NULLS FIRST, cast(ws_order_number#86 as bigint) ASC NULLS FIRST], false, 0

(80) Scan parquet default.web_returns
Output [4]: [wr_item_sk#90, wr_order_number#91, wr_return_amt#92, wr_net_loss#93]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number)]
ReadSchema: struct<wr_item_sk:bigint,wr_order_number:bigint,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(81) ColumnarToRow [codegen id : 23]
Input [4]: [wr_item_sk#90, wr_order_number#91, wr_return_amt#92, wr_net_loss#93]

(82) Filter [codegen id : 23]
Input [4]: [wr_item_sk#90, wr_order_number#91, wr_return_amt#92, wr_net_loss#93]
Condition : (isnotnull(wr_item_sk#90) AND isnotnull(wr_order_number#91))

(83) Exchange
Input [4]: [wr_item_sk#90, wr_order_number#91, wr_return_amt#92, wr_net_loss#93]
Arguments: hashpartitioning(wr_item_sk#90, wr_order_number#91, 5), ENSURE_REQUIREMENTS, [id=#94]

(84) Sort [codegen id : 24]
Input [4]: [wr_item_sk#90, wr_order_number#91, wr_return_amt#92, wr_net_loss#93]
Arguments: [wr_item_sk#90 ASC NULLS FIRST, wr_order_number#91 ASC NULLS FIRST], false, 0

(85) SortMergeJoin
Left keys [2]: [cast(ws_item_sk#83 as bigint), cast(ws_order_number#86 as bigint)]
Right keys [2]: [wr_item_sk#90, wr_order_number#91]
Join condition: None

(86) Project [codegen id : 29]
Output [8]: [ws_sold_date_sk#82, ws_item_sk#83, ws_web_site_sk#84, ws_promo_sk#85, ws_ext_sales_price#87, ws_net_profit#88, wr_return_amt#92, wr_net_loss#93]
Input [11]: [ws_sold_date_sk#82, ws_item_sk#83, ws_web_site_sk#84, ws_promo_sk#85, ws_order_number#86, ws_ext_sales_price#87, ws_net_profit#88, wr_item_sk#90, wr_order_number#91, wr_return_amt#92, wr_net_loss#93]

(87) ReusedExchange [Reuses operator id: 17]
Output [1]: [i_item_sk#14]

(88) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_item_sk#83]
Right keys [1]: [i_item_sk#14]
Join condition: None

(89) Project [codegen id : 29]
Output [7]: [ws_sold_date_sk#82, ws_web_site_sk#84, ws_promo_sk#85, ws_ext_sales_price#87, ws_net_profit#88, wr_return_amt#92, wr_net_loss#93]
Input [9]: [ws_sold_date_sk#82, ws_item_sk#83, ws_web_site_sk#84, ws_promo_sk#85, ws_ext_sales_price#87, ws_net_profit#88, wr_return_amt#92, wr_net_loss#93, i_item_sk#14]

(90) ReusedExchange [Reuses operator id: 24]
Output [1]: [p_promo_sk#17]

(91) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_promo_sk#85]
Right keys [1]: [p_promo_sk#17]
Join condition: None

(92) Project [codegen id : 29]
Output [6]: [ws_sold_date_sk#82, ws_web_site_sk#84, ws_ext_sales_price#87, ws_net_profit#88, wr_return_amt#92, wr_net_loss#93]
Input [8]: [ws_sold_date_sk#82, ws_web_site_sk#84, ws_promo_sk#85, ws_ext_sales_price#87, ws_net_profit#88, wr_return_amt#92, wr_net_loss#93, p_promo_sk#17]

(93) ReusedExchange [Reuses operator id: 31]
Output [1]: [d_date_sk#20]

(94) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_sold_date_sk#82]
Right keys [1]: [d_date_sk#20]
Join condition: None

(95) Project [codegen id : 29]
Output [5]: [ws_web_site_sk#84, ws_ext_sales_price#87, ws_net_profit#88, wr_return_amt#92, wr_net_loss#93]
Input [7]: [ws_sold_date_sk#82, ws_web_site_sk#84, ws_ext_sales_price#87, ws_net_profit#88, wr_return_amt#92, wr_net_loss#93, d_date_sk#20]

(96) Scan parquet default.web_site
Output [2]: [web_site_sk#95, web_site_id#96]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string>

(97) ColumnarToRow [codegen id : 28]
Input [2]: [web_site_sk#95, web_site_id#96]

(98) Filter [codegen id : 28]
Input [2]: [web_site_sk#95, web_site_id#96]
Condition : isnotnull(web_site_sk#95)

(99) Project [codegen id : 28]
Output [2]: [web_site_sk#95, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, web_site_id#96, 16, false, true) AS web_site_id#97]
Input [2]: [web_site_sk#95, web_site_id#96]

(100) BroadcastExchange
Input [2]: [web_site_sk#95, web_site_id#97]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#98]

(101) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_web_site_sk#84]
Right keys [1]: [web_site_sk#95]
Join condition: None

(102) Project [codegen id : 29]
Output [5]: [ws_ext_sales_price#87, ws_net_profit#88, wr_return_amt#92, wr_net_loss#93, web_site_id#97]
Input [7]: [ws_web_site_sk#84, ws_ext_sales_price#87, ws_net_profit#88, wr_return_amt#92, wr_net_loss#93, web_site_sk#95, web_site_id#97]

(103) HashAggregate [codegen id : 29]
Input [5]: [ws_ext_sales_price#87, ws_net_profit#88, wr_return_amt#92, wr_net_loss#93, web_site_id#97]
Keys [1]: [web_site_id#97]
Functions [3]: [partial_sum(UnscaledValue(ws_ext_sales_price#87)), partial_sum(coalesce(cast(wr_return_amt#92 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(ws_net_profit#88 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#93 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [5]: [sum#99, sum#100, isEmpty#101, sum#102, isEmpty#103]
Results [6]: [web_site_id#97, sum#104, sum#105, isEmpty#106, sum#107, isEmpty#108]

(104) Exchange
Input [6]: [web_site_id#97, sum#104, sum#105, isEmpty#106, sum#107, isEmpty#108]
Arguments: hashpartitioning(web_site_id#97, 5), ENSURE_REQUIREMENTS, [id=#109]

(105) HashAggregate [codegen id : 30]
Input [6]: [web_site_id#97, sum#104, sum#105, isEmpty#106, sum#107, isEmpty#108]
Keys [1]: [web_site_id#97]
Functions [3]: [sum(UnscaledValue(ws_ext_sales_price#87)), sum(coalesce(cast(wr_return_amt#92 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(ws_net_profit#88 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#93 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_sales_price#87))#110, sum(coalesce(cast(wr_return_amt#92 as decimal(12,2)), 0.00))#111, sum(CheckOverflow((promote_precision(cast(ws_net_profit#88 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#93 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#112]
Results [5]: [web channel AS channel#113, concat(web_site, web_site_id#97) AS id#114, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#87))#110,17,2) AS sales#115, sum(coalesce(cast(wr_return_amt#92 as decimal(12,2)), 0.00))#111 AS returns#116, sum(CheckOverflow((promote_precision(cast(ws_net_profit#88 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#93 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#112 AS profit#117]

(106) Union

(107) HashAggregate [codegen id : 31]
Input [5]: [channel#41, id#42, sales#43, returns#44, profit#45]
Keys [2]: [channel#41, id#42]
Functions [3]: [partial_sum(sales#43), partial_sum(returns#44), partial_sum(profit#45)]
Aggregate Attributes [6]: [sum#118, isEmpty#119, sum#120, isEmpty#121, sum#122, isEmpty#123]
Results [8]: [channel#41, id#42, sum#124, isEmpty#125, sum#126, isEmpty#127, sum#128, isEmpty#129]

(108) Exchange
Input [8]: [channel#41, id#42, sum#124, isEmpty#125, sum#126, isEmpty#127, sum#128, isEmpty#129]
Arguments: hashpartitioning(channel#41, id#42, 5), ENSURE_REQUIREMENTS, [id=#130]

(109) HashAggregate [codegen id : 32]
Input [8]: [channel#41, id#42, sum#124, isEmpty#125, sum#126, isEmpty#127, sum#128, isEmpty#129]
Keys [2]: [channel#41, id#42]
Functions [3]: [sum(sales#43), sum(returns#44), sum(profit#45)]
Aggregate Attributes [3]: [sum(sales#43)#131, sum(returns#44)#132, sum(profit#45)#133]
Results [5]: [channel#41, id#42, cast(sum(sales#43)#131 as decimal(37,2)) AS sales#134, cast(sum(returns#44)#132 as decimal(38,2)) AS returns#135, cast(sum(profit#45)#133 as decimal(38,2)) AS profit#136]

(110) ReusedExchange [Reuses operator id: 108]
Output [8]: [channel#41, id#42, sum#137, isEmpty#138, sum#139, isEmpty#140, sum#141, isEmpty#142]

(111) HashAggregate [codegen id : 64]
Input [8]: [channel#41, id#42, sum#137, isEmpty#138, sum#139, isEmpty#140, sum#141, isEmpty#142]
Keys [2]: [channel#41, id#42]
Functions [3]: [sum(sales#43), sum(returns#44), sum(profit#45)]
Aggregate Attributes [3]: [sum(sales#43)#143, sum(returns#44)#144, sum(profit#45)#145]
Results [4]: [channel#41, sum(sales#43)#143 AS sales#146, sum(returns#44)#144 AS returns#147, sum(profit#45)#145 AS profit#148]

(112) HashAggregate [codegen id : 64]
Input [4]: [channel#41, sales#146, returns#147, profit#148]
Keys [1]: [channel#41]
Functions [3]: [partial_sum(sales#146), partial_sum(returns#147), partial_sum(profit#148)]
Aggregate Attributes [6]: [sum#149, isEmpty#150, sum#151, isEmpty#152, sum#153, isEmpty#154]
Results [7]: [channel#41, sum#155, isEmpty#156, sum#157, isEmpty#158, sum#159, isEmpty#160]

(113) Exchange
Input [7]: [channel#41, sum#155, isEmpty#156, sum#157, isEmpty#158, sum#159, isEmpty#160]
Arguments: hashpartitioning(channel#41, 5), ENSURE_REQUIREMENTS, [id=#161]

(114) HashAggregate [codegen id : 65]
Input [7]: [channel#41, sum#155, isEmpty#156, sum#157, isEmpty#158, sum#159, isEmpty#160]
Keys [1]: [channel#41]
Functions [3]: [sum(sales#146), sum(returns#147), sum(profit#148)]
Aggregate Attributes [3]: [sum(sales#146)#162, sum(returns#147)#163, sum(profit#148)#164]
Results [5]: [channel#41, null AS id#165, sum(sales#146)#162 AS sales#166, sum(returns#147)#163 AS returns#167, sum(profit#148)#164 AS profit#168]

(115) ReusedExchange [Reuses operator id: 108]
Output [8]: [channel#41, id#42, sum#169, isEmpty#170, sum#171, isEmpty#172, sum#173, isEmpty#174]

(116) HashAggregate [codegen id : 97]
Input [8]: [channel#41, id#42, sum#169, isEmpty#170, sum#171, isEmpty#172, sum#173, isEmpty#174]
Keys [2]: [channel#41, id#42]
Functions [3]: [sum(sales#43), sum(returns#44), sum(profit#45)]
Aggregate Attributes [3]: [sum(sales#43)#175, sum(returns#44)#176, sum(profit#45)#177]
Results [3]: [sum(sales#43)#175 AS sales#146, sum(returns#44)#176 AS returns#147, sum(profit#45)#177 AS profit#148]

(117) HashAggregate [codegen id : 97]
Input [3]: [sales#146, returns#147, profit#148]
Keys: []
Functions [3]: [partial_sum(sales#146), partial_sum(returns#147), partial_sum(profit#148)]
Aggregate Attributes [6]: [sum#178, isEmpty#179, sum#180, isEmpty#181, sum#182, isEmpty#183]
Results [6]: [sum#184, isEmpty#185, sum#186, isEmpty#187, sum#188, isEmpty#189]

(118) Exchange
Input [6]: [sum#184, isEmpty#185, sum#186, isEmpty#187, sum#188, isEmpty#189]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#190]

(119) HashAggregate [codegen id : 98]
Input [6]: [sum#184, isEmpty#185, sum#186, isEmpty#187, sum#188, isEmpty#189]
Keys: []
Functions [3]: [sum(sales#146), sum(returns#147), sum(profit#148)]
Aggregate Attributes [3]: [sum(sales#146)#191, sum(returns#147)#192, sum(profit#148)#193]
Results [5]: [null AS channel#194, null AS id#195, sum(sales#146)#191 AS sales#196, sum(returns#147)#192 AS returns#197, sum(profit#148)#193 AS profit#198]

(120) Union

(121) HashAggregate [codegen id : 99]
Input [5]: [channel#41, id#42, sales#134, returns#135, profit#136]
Keys [5]: [channel#41, id#42, sales#134, returns#135, profit#136]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#41, id#42, sales#134, returns#135, profit#136]

(122) Exchange
Input [5]: [channel#41, id#42, sales#134, returns#135, profit#136]
Arguments: hashpartitioning(channel#41, id#42, sales#134, returns#135, profit#136, 5), ENSURE_REQUIREMENTS, [id=#199]

(123) HashAggregate [codegen id : 100]
Input [5]: [channel#41, id#42, sales#134, returns#135, profit#136]
Keys [5]: [channel#41, id#42, sales#134, returns#135, profit#136]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#41, id#42, sales#134, returns#135, profit#136]

(124) TakeOrderedAndProject
Input [5]: [channel#41, id#42, sales#134, returns#135, profit#136]
Arguments: 100, [channel#41 ASC NULLS FIRST, id#42 ASC NULLS FIRST], [channel#41, id#42, sales#134, returns#135, profit#136]

