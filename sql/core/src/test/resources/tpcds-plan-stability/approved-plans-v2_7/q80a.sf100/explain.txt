== Physical Plan ==
TakeOrderedAndProject (194)
+- * HashAggregate (193)
   +- Exchange (192)
      +- * HashAggregate (191)
         +- Union (190)
            :- * HashAggregate (97)
            :  +- Exchange (96)
            :     +- * HashAggregate (95)
            :        +- Union (94)
            :           :- * HashAggregate (31)
            :           :  +- Exchange (30)
            :           :     +- * HashAggregate (29)
            :           :        +- * Project (28)
            :           :           +- * BroadcastHashJoin Inner BuildRight (27)
            :           :              :- * Project (22)
            :           :              :  +- * BroadcastHashJoin Inner BuildRight (21)
            :           :              :     :- * Project (19)
            :           :              :     :  +- * BroadcastHashJoin Inner BuildRight (18)
            :           :              :     :     :- * Project (16)
            :           :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (15)
            :           :              :     :     :     :- * Project (13)
            :           :              :     :     :     :  +- * SortMergeJoin LeftOuter (12)
            :           :              :     :     :     :     :- * Sort (5)
            :           :              :     :     :     :     :  +- Exchange (4)
            :           :              :     :     :     :     :     +- * Filter (3)
            :           :              :     :     :     :     :        +- * ColumnarToRow (2)
            :           :              :     :     :     :     :           +- Scan parquet spark_catalog.default.store_sales (1)
            :           :              :     :     :     :     +- * Sort (11)
            :           :              :     :     :     :        +- Exchange (10)
            :           :              :     :     :     :           +- * Project (9)
            :           :              :     :     :     :              +- * Filter (8)
            :           :              :     :     :     :                 +- * ColumnarToRow (7)
            :           :              :     :     :     :                    +- Scan parquet spark_catalog.default.store_returns (6)
            :           :              :     :     :     +- ReusedExchange (14)
            :           :              :     :     +- ReusedExchange (17)
            :           :              :     +- ReusedExchange (20)
            :           :              +- BroadcastExchange (26)
            :           :                 +- * Filter (25)
            :           :                    +- * ColumnarToRow (24)
            :           :                       +- Scan parquet spark_catalog.default.store (23)
            :           :- * HashAggregate (62)
            :           :  +- Exchange (61)
            :           :     +- * HashAggregate (60)
            :           :        +- * Project (59)
            :           :           +- * BroadcastHashJoin Inner BuildRight (58)
            :           :              :- * Project (53)
            :           :              :  +- * BroadcastHashJoin Inner BuildRight (52)
            :           :              :     :- * Project (50)
            :           :              :     :  +- * BroadcastHashJoin Inner BuildRight (49)
            :           :              :     :     :- * Project (47)
            :           :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (46)
            :           :              :     :     :     :- * Project (44)
            :           :              :     :     :     :  +- * SortMergeJoin LeftOuter (43)
            :           :              :     :     :     :     :- * Sort (36)
            :           :              :     :     :     :     :  +- Exchange (35)
            :           :              :     :     :     :     :     +- * Filter (34)
            :           :              :     :     :     :     :        +- * ColumnarToRow (33)
            :           :              :     :     :     :     :           +- Scan parquet spark_catalog.default.catalog_sales (32)
            :           :              :     :     :     :     +- * Sort (42)
            :           :              :     :     :     :        +- Exchange (41)
            :           :              :     :     :     :           +- * Project (40)
            :           :              :     :     :     :              +- * Filter (39)
            :           :              :     :     :     :                 +- * ColumnarToRow (38)
            :           :              :     :     :     :                    +- Scan parquet spark_catalog.default.catalog_returns (37)
            :           :              :     :     :     +- ReusedExchange (45)
            :           :              :     :     +- ReusedExchange (48)
            :           :              :     +- ReusedExchange (51)
            :           :              +- BroadcastExchange (57)
            :           :                 +- * Filter (56)
            :           :                    +- * ColumnarToRow (55)
            :           :                       +- Scan parquet spark_catalog.default.catalog_page (54)
            :           +- * HashAggregate (93)
            :              +- Exchange (92)
            :                 +- * HashAggregate (91)
            :                    +- * Project (90)
            :                       +- * BroadcastHashJoin Inner BuildRight (89)
            :                          :- * Project (84)
            :                          :  +- * BroadcastHashJoin Inner BuildRight (83)
            :                          :     :- * Project (81)
            :                          :     :  +- * BroadcastHashJoin Inner BuildRight (80)
            :                          :     :     :- * Project (78)
            :                          :     :     :  +- * BroadcastHashJoin Inner BuildRight (77)
            :                          :     :     :     :- * Project (75)
            :                          :     :     :     :  +- * SortMergeJoin LeftOuter (74)
            :                          :     :     :     :     :- * Sort (67)
            :                          :     :     :     :     :  +- Exchange (66)
            :                          :     :     :     :     :     +- * Filter (65)
            :                          :     :     :     :     :        +- * ColumnarToRow (64)
            :                          :     :     :     :     :           +- Scan parquet spark_catalog.default.web_sales (63)
            :                          :     :     :     :     +- * Sort (73)
            :                          :     :     :     :        +- Exchange (72)
            :                          :     :     :     :           +- * Project (71)
            :                          :     :     :     :              +- * Filter (70)
            :                          :     :     :     :                 +- * ColumnarToRow (69)
            :                          :     :     :     :                    +- Scan parquet spark_catalog.default.web_returns (68)
            :                          :     :     :     +- ReusedExchange (76)
            :                          :     :     +- ReusedExchange (79)
            :                          :     +- ReusedExchange (82)
            :                          +- BroadcastExchange (88)
            :                             +- * Filter (87)
            :                                +- * ColumnarToRow (86)
            :                                   +- Scan parquet spark_catalog.default.web_site (85)
            :- * HashAggregate (132)
            :  +- Exchange (131)
            :     +- * HashAggregate (130)
            :        +- * HashAggregate (129)
            :           +- Exchange (128)
            :              +- * HashAggregate (127)
            :                 +- Union (126)
            :                    :- * HashAggregate (99)
            :                    :  +- ReusedExchange (98)
            :                    :- * HashAggregate (101)
            :                    :  +- ReusedExchange (100)
            :                    +- * HashAggregate (125)
            :                       +- Exchange (124)
            :                          +- * HashAggregate (123)
            :                             +- * Project (122)
            :                                +- * BroadcastHashJoin Inner BuildRight (121)
            :                                   :- * Project (119)
            :                                   :  +- * BroadcastHashJoin Inner BuildRight (118)
            :                                   :     :- * Project (116)
            :                                   :     :  +- * BroadcastHashJoin Inner BuildRight (115)
            :                                   :     :     :- * Project (113)
            :                                   :     :     :  +- * BroadcastHashJoin Inner BuildRight (112)
            :                                   :     :     :     :- * Project (110)
            :                                   :     :     :     :  +- * SortMergeJoin LeftOuter (109)
            :                                   :     :     :     :     :- * Sort (106)
            :                                   :     :     :     :     :  +- Exchange (105)
            :                                   :     :     :     :     :     +- * Filter (104)
            :                                   :     :     :     :     :        +- * ColumnarToRow (103)
            :                                   :     :     :     :     :           +- Scan parquet spark_catalog.default.web_sales (102)
            :                                   :     :     :     :     +- * Sort (108)
            :                                   :     :     :     :        +- ReusedExchange (107)
            :                                   :     :     :     +- ReusedExchange (111)
            :                                   :     :     +- ReusedExchange (114)
            :                                   :     +- ReusedExchange (117)
            :                                   +- ReusedExchange (120)
            +- * HashAggregate (189)
               +- Exchange (188)
                  +- * HashAggregate (187)
                     +- * HashAggregate (186)
                        +- Exchange (185)
                           +- * HashAggregate (184)
                              +- Union (183)
                                 :- * HashAggregate (156)
                                 :  +- Exchange (155)
                                 :     +- * HashAggregate (154)
                                 :        +- * Project (153)
                                 :           +- * BroadcastHashJoin Inner BuildRight (152)
                                 :              :- * Project (150)
                                 :              :  +- * BroadcastHashJoin Inner BuildRight (149)
                                 :              :     :- * Project (147)
                                 :              :     :  +- * BroadcastHashJoin Inner BuildRight (146)
                                 :              :     :     :- * Project (144)
                                 :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (143)
                                 :              :     :     :     :- * Project (141)
                                 :              :     :     :     :  +- * SortMergeJoin LeftOuter (140)
                                 :              :     :     :     :     :- * Sort (137)
                                 :              :     :     :     :     :  +- Exchange (136)
                                 :              :     :     :     :     :     +- * Filter (135)
                                 :              :     :     :     :     :        +- * ColumnarToRow (134)
                                 :              :     :     :     :     :           +- Scan parquet spark_catalog.default.store_sales (133)
                                 :              :     :     :     :     +- * Sort (139)
                                 :              :     :     :     :        +- ReusedExchange (138)
                                 :              :     :     :     +- ReusedExchange (142)
                                 :              :     :     +- ReusedExchange (145)
                                 :              :     +- ReusedExchange (148)
                                 :              +- ReusedExchange (151)
                                 :- * HashAggregate (180)
                                 :  +- Exchange (179)
                                 :     +- * HashAggregate (178)
                                 :        +- * Project (177)
                                 :           +- * BroadcastHashJoin Inner BuildRight (176)
                                 :              :- * Project (174)
                                 :              :  +- * BroadcastHashJoin Inner BuildRight (173)
                                 :              :     :- * Project (171)
                                 :              :     :  +- * BroadcastHashJoin Inner BuildRight (170)
                                 :              :     :     :- * Project (168)
                                 :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (167)
                                 :              :     :     :     :- * Project (165)
                                 :              :     :     :     :  +- * SortMergeJoin LeftOuter (164)
                                 :              :     :     :     :     :- * Sort (161)
                                 :              :     :     :     :     :  +- Exchange (160)
                                 :              :     :     :     :     :     +- * Filter (159)
                                 :              :     :     :     :     :        +- * ColumnarToRow (158)
                                 :              :     :     :     :     :           +- Scan parquet spark_catalog.default.catalog_sales (157)
                                 :              :     :     :     :     +- * Sort (163)
                                 :              :     :     :     :        +- ReusedExchange (162)
                                 :              :     :     :     +- ReusedExchange (166)
                                 :              :     :     +- ReusedExchange (169)
                                 :              :     +- ReusedExchange (172)
                                 :              +- ReusedExchange (175)
                                 +- * HashAggregate (182)
                                    +- ReusedExchange (181)


(1) Scan parquet spark_catalog.default.store_sales
Output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]

(3) Filter [codegen id : 1]
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Condition : ((((isnotnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_promo_sk#3)) AND might_contain(runtimefilterexpression(Subquery scalar-subquery#9, [id=#10]), xxhash64(ss_item_sk#1, 42))) AND might_contain(runtimefilterexpression(Subquery scalar-subquery#11, [id=#12]), xxhash64(ss_promo_sk#3, 42)))

(4) Exchange
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: hashpartitioning(ss_item_sk#1, ss_ticket_number#4, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: [ss_item_sk#1 ASC NULLS FIRST, ss_ticket_number#4 ASC NULLS FIRST], false, 0

(6) Scan parquet spark_catalog.default.store_returns
Output [5]: [sr_item_sk#13, sr_ticket_number#14, sr_return_amt#15, sr_net_loss#16, sr_returned_date_sk#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(7) ColumnarToRow [codegen id : 3]
Input [5]: [sr_item_sk#13, sr_ticket_number#14, sr_return_amt#15, sr_net_loss#16, sr_returned_date_sk#17]

(8) Filter [codegen id : 3]
Input [5]: [sr_item_sk#13, sr_ticket_number#14, sr_return_amt#15, sr_net_loss#16, sr_returned_date_sk#17]
Condition : (isnotnull(sr_item_sk#13) AND isnotnull(sr_ticket_number#14))

(9) Project [codegen id : 3]
Output [4]: [sr_item_sk#13, sr_ticket_number#14, sr_return_amt#15, sr_net_loss#16]
Input [5]: [sr_item_sk#13, sr_ticket_number#14, sr_return_amt#15, sr_net_loss#16, sr_returned_date_sk#17]

(10) Exchange
Input [4]: [sr_item_sk#13, sr_ticket_number#14, sr_return_amt#15, sr_net_loss#16]
Arguments: hashpartitioning(sr_item_sk#13, sr_ticket_number#14, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(11) Sort [codegen id : 4]
Input [4]: [sr_item_sk#13, sr_ticket_number#14, sr_return_amt#15, sr_net_loss#16]
Arguments: [sr_item_sk#13 ASC NULLS FIRST, sr_ticket_number#14 ASC NULLS FIRST], false, 0

(12) SortMergeJoin [codegen id : 9]
Left keys [2]: [ss_item_sk#1, ss_ticket_number#4]
Right keys [2]: [sr_item_sk#13, sr_ticket_number#14]
Join type: LeftOuter
Join condition: None

(13) Project [codegen id : 9]
Output [8]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#15, sr_net_loss#16]
Input [11]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_item_sk#13, sr_ticket_number#14, sr_return_amt#15, sr_net_loss#16]

(14) ReusedExchange [Reuses operator id: 199]
Output [1]: [i_item_sk#18]

(15) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#18]
Join type: Inner
Join condition: None

(16) Project [codegen id : 9]
Output [7]: [ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#15, sr_net_loss#16]
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#15, sr_net_loss#16, i_item_sk#18]

(17) ReusedExchange [Reuses operator id: 209]
Output [1]: [p_promo_sk#19]

(18) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_promo_sk#3]
Right keys [1]: [p_promo_sk#19]
Join type: Inner
Join condition: None

(19) Project [codegen id : 9]
Output [6]: [ss_store_sk#2, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#15, sr_net_loss#16]
Input [8]: [ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#15, sr_net_loss#16, p_promo_sk#19]

(20) ReusedExchange [Reuses operator id: 219]
Output [1]: [d_date_sk#20]

(21) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#20]
Join type: Inner
Join condition: None

(22) Project [codegen id : 9]
Output [5]: [ss_store_sk#2, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#15, sr_net_loss#16]
Input [7]: [ss_store_sk#2, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#15, sr_net_loss#16, d_date_sk#20]

(23) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#21, s_store_id#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(24) ColumnarToRow [codegen id : 8]
Input [2]: [s_store_sk#21, s_store_id#22]

(25) Filter [codegen id : 8]
Input [2]: [s_store_sk#21, s_store_id#22]
Condition : isnotnull(s_store_sk#21)

(26) BroadcastExchange
Input [2]: [s_store_sk#21, s_store_id#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(27) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#21]
Join type: Inner
Join condition: None

(28) Project [codegen id : 9]
Output [5]: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#15, sr_net_loss#16, s_store_id#22]
Input [7]: [ss_store_sk#2, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#15, sr_net_loss#16, s_store_sk#21, s_store_id#22]

(29) HashAggregate [codegen id : 9]
Input [5]: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#15, sr_net_loss#16, s_store_id#22]
Keys [1]: [s_store_id#22]
Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#5)), partial_sum(coalesce(cast(sr_return_amt#15 as decimal(12,2)), 0.00)), partial_sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#16 as decimal(12,2)), 0.00)))]
Aggregate Attributes [5]: [sum#23, sum#24, isEmpty#25, sum#26, isEmpty#27]
Results [6]: [s_store_id#22, sum#28, sum#29, isEmpty#30, sum#31, isEmpty#32]

(30) Exchange
Input [6]: [s_store_id#22, sum#28, sum#29, isEmpty#30, sum#31, isEmpty#32]
Arguments: hashpartitioning(s_store_id#22, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(31) HashAggregate [codegen id : 10]
Input [6]: [s_store_id#22, sum#28, sum#29, isEmpty#30, sum#31, isEmpty#32]
Keys [1]: [s_store_id#22]
Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#5)), sum(coalesce(cast(sr_return_amt#15 as decimal(12,2)), 0.00)), sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#16 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_ext_sales_price#5))#33, sum(coalesce(cast(sr_return_amt#15 as decimal(12,2)), 0.00))#34, sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#16 as decimal(12,2)), 0.00)))#35]
Results [5]: [store channel AS channel#36, concat(store, s_store_id#22) AS id#37, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#5))#33,17,2) AS sales#38, sum(coalesce(cast(sr_return_amt#15 as decimal(12,2)), 0.00))#34 AS returns#39, sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#16 as decimal(12,2)), 0.00)))#35 AS profit#40]

(32) Scan parquet spark_catalog.default.catalog_sales
Output [7]: [cs_catalog_page_sk#41, cs_item_sk#42, cs_promo_sk#43, cs_order_number#44, cs_ext_sales_price#45, cs_net_profit#46, cs_sold_date_sk#47]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#47), dynamicpruningexpression(cs_sold_date_sk#47 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(cs_catalog_page_sk), IsNotNull(cs_item_sk), IsNotNull(cs_promo_sk)]
ReadSchema: struct<cs_catalog_page_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(33) ColumnarToRow [codegen id : 11]
Input [7]: [cs_catalog_page_sk#41, cs_item_sk#42, cs_promo_sk#43, cs_order_number#44, cs_ext_sales_price#45, cs_net_profit#46, cs_sold_date_sk#47]

(34) Filter [codegen id : 11]
Input [7]: [cs_catalog_page_sk#41, cs_item_sk#42, cs_promo_sk#43, cs_order_number#44, cs_ext_sales_price#45, cs_net_profit#46, cs_sold_date_sk#47]
Condition : ((((isnotnull(cs_catalog_page_sk#41) AND isnotnull(cs_item_sk#42)) AND isnotnull(cs_promo_sk#43)) AND might_contain(runtimefilterexpression(ReusedSubquery Subquery scalar-subquery#9, [id=#10]), xxhash64(cs_item_sk#42, 42))) AND might_contain(runtimefilterexpression(ReusedSubquery Subquery scalar-subquery#11, [id=#12]), xxhash64(cs_promo_sk#43, 42)))

(35) Exchange
Input [7]: [cs_catalog_page_sk#41, cs_item_sk#42, cs_promo_sk#43, cs_order_number#44, cs_ext_sales_price#45, cs_net_profit#46, cs_sold_date_sk#47]
Arguments: hashpartitioning(cs_item_sk#42, cs_order_number#44, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(36) Sort [codegen id : 12]
Input [7]: [cs_catalog_page_sk#41, cs_item_sk#42, cs_promo_sk#43, cs_order_number#44, cs_ext_sales_price#45, cs_net_profit#46, cs_sold_date_sk#47]
Arguments: [cs_item_sk#42 ASC NULLS FIRST, cs_order_number#44 ASC NULLS FIRST], false, 0

(37) Scan parquet spark_catalog.default.catalog_returns
Output [5]: [cr_item_sk#48, cr_order_number#49, cr_return_amount#50, cr_net_loss#51, cr_returned_date_sk#52]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(38) ColumnarToRow [codegen id : 13]
Input [5]: [cr_item_sk#48, cr_order_number#49, cr_return_amount#50, cr_net_loss#51, cr_returned_date_sk#52]

(39) Filter [codegen id : 13]
Input [5]: [cr_item_sk#48, cr_order_number#49, cr_return_amount#50, cr_net_loss#51, cr_returned_date_sk#52]
Condition : (isnotnull(cr_item_sk#48) AND isnotnull(cr_order_number#49))

(40) Project [codegen id : 13]
Output [4]: [cr_item_sk#48, cr_order_number#49, cr_return_amount#50, cr_net_loss#51]
Input [5]: [cr_item_sk#48, cr_order_number#49, cr_return_amount#50, cr_net_loss#51, cr_returned_date_sk#52]

(41) Exchange
Input [4]: [cr_item_sk#48, cr_order_number#49, cr_return_amount#50, cr_net_loss#51]
Arguments: hashpartitioning(cr_item_sk#48, cr_order_number#49, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(42) Sort [codegen id : 14]
Input [4]: [cr_item_sk#48, cr_order_number#49, cr_return_amount#50, cr_net_loss#51]
Arguments: [cr_item_sk#48 ASC NULLS FIRST, cr_order_number#49 ASC NULLS FIRST], false, 0

(43) SortMergeJoin [codegen id : 19]
Left keys [2]: [cs_item_sk#42, cs_order_number#44]
Right keys [2]: [cr_item_sk#48, cr_order_number#49]
Join type: LeftOuter
Join condition: None

(44) Project [codegen id : 19]
Output [8]: [cs_catalog_page_sk#41, cs_item_sk#42, cs_promo_sk#43, cs_ext_sales_price#45, cs_net_profit#46, cs_sold_date_sk#47, cr_return_amount#50, cr_net_loss#51]
Input [11]: [cs_catalog_page_sk#41, cs_item_sk#42, cs_promo_sk#43, cs_order_number#44, cs_ext_sales_price#45, cs_net_profit#46, cs_sold_date_sk#47, cr_item_sk#48, cr_order_number#49, cr_return_amount#50, cr_net_loss#51]

(45) ReusedExchange [Reuses operator id: 199]
Output [1]: [i_item_sk#53]

(46) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_item_sk#42]
Right keys [1]: [i_item_sk#53]
Join type: Inner
Join condition: None

(47) Project [codegen id : 19]
Output [7]: [cs_catalog_page_sk#41, cs_promo_sk#43, cs_ext_sales_price#45, cs_net_profit#46, cs_sold_date_sk#47, cr_return_amount#50, cr_net_loss#51]
Input [9]: [cs_catalog_page_sk#41, cs_item_sk#42, cs_promo_sk#43, cs_ext_sales_price#45, cs_net_profit#46, cs_sold_date_sk#47, cr_return_amount#50, cr_net_loss#51, i_item_sk#53]

(48) ReusedExchange [Reuses operator id: 209]
Output [1]: [p_promo_sk#54]

(49) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_promo_sk#43]
Right keys [1]: [p_promo_sk#54]
Join type: Inner
Join condition: None

(50) Project [codegen id : 19]
Output [6]: [cs_catalog_page_sk#41, cs_ext_sales_price#45, cs_net_profit#46, cs_sold_date_sk#47, cr_return_amount#50, cr_net_loss#51]
Input [8]: [cs_catalog_page_sk#41, cs_promo_sk#43, cs_ext_sales_price#45, cs_net_profit#46, cs_sold_date_sk#47, cr_return_amount#50, cr_net_loss#51, p_promo_sk#54]

(51) ReusedExchange [Reuses operator id: 219]
Output [1]: [d_date_sk#55]

(52) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_sold_date_sk#47]
Right keys [1]: [d_date_sk#55]
Join type: Inner
Join condition: None

(53) Project [codegen id : 19]
Output [5]: [cs_catalog_page_sk#41, cs_ext_sales_price#45, cs_net_profit#46, cr_return_amount#50, cr_net_loss#51]
Input [7]: [cs_catalog_page_sk#41, cs_ext_sales_price#45, cs_net_profit#46, cs_sold_date_sk#47, cr_return_amount#50, cr_net_loss#51, d_date_sk#55]

(54) Scan parquet spark_catalog.default.catalog_page
Output [2]: [cp_catalog_page_sk#56, cp_catalog_page_id#57]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>

(55) ColumnarToRow [codegen id : 18]
Input [2]: [cp_catalog_page_sk#56, cp_catalog_page_id#57]

(56) Filter [codegen id : 18]
Input [2]: [cp_catalog_page_sk#56, cp_catalog_page_id#57]
Condition : isnotnull(cp_catalog_page_sk#56)

(57) BroadcastExchange
Input [2]: [cp_catalog_page_sk#56, cp_catalog_page_id#57]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=7]

(58) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_catalog_page_sk#41]
Right keys [1]: [cp_catalog_page_sk#56]
Join type: Inner
Join condition: None

(59) Project [codegen id : 19]
Output [5]: [cs_ext_sales_price#45, cs_net_profit#46, cr_return_amount#50, cr_net_loss#51, cp_catalog_page_id#57]
Input [7]: [cs_catalog_page_sk#41, cs_ext_sales_price#45, cs_net_profit#46, cr_return_amount#50, cr_net_loss#51, cp_catalog_page_sk#56, cp_catalog_page_id#57]

(60) HashAggregate [codegen id : 19]
Input [5]: [cs_ext_sales_price#45, cs_net_profit#46, cr_return_amount#50, cr_net_loss#51, cp_catalog_page_id#57]
Keys [1]: [cp_catalog_page_id#57]
Functions [3]: [partial_sum(UnscaledValue(cs_ext_sales_price#45)), partial_sum(coalesce(cast(cr_return_amount#50 as decimal(12,2)), 0.00)), partial_sum((cs_net_profit#46 - coalesce(cast(cr_net_loss#51 as decimal(12,2)), 0.00)))]
Aggregate Attributes [5]: [sum#58, sum#59, isEmpty#60, sum#61, isEmpty#62]
Results [6]: [cp_catalog_page_id#57, sum#63, sum#64, isEmpty#65, sum#66, isEmpty#67]

(61) Exchange
Input [6]: [cp_catalog_page_id#57, sum#63, sum#64, isEmpty#65, sum#66, isEmpty#67]
Arguments: hashpartitioning(cp_catalog_page_id#57, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(62) HashAggregate [codegen id : 20]
Input [6]: [cp_catalog_page_id#57, sum#63, sum#64, isEmpty#65, sum#66, isEmpty#67]
Keys [1]: [cp_catalog_page_id#57]
Functions [3]: [sum(UnscaledValue(cs_ext_sales_price#45)), sum(coalesce(cast(cr_return_amount#50 as decimal(12,2)), 0.00)), sum((cs_net_profit#46 - coalesce(cast(cr_net_loss#51 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_sales_price#45))#68, sum(coalesce(cast(cr_return_amount#50 as decimal(12,2)), 0.00))#69, sum((cs_net_profit#46 - coalesce(cast(cr_net_loss#51 as decimal(12,2)), 0.00)))#70]
Results [5]: [catalog channel AS channel#71, concat(catalog_page, cp_catalog_page_id#57) AS id#72, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#45))#68,17,2) AS sales#73, sum(coalesce(cast(cr_return_amount#50 as decimal(12,2)), 0.00))#69 AS returns#74, sum((cs_net_profit#46 - coalesce(cast(cr_net_loss#51 as decimal(12,2)), 0.00)))#70 AS profit#75]

(63) Scan parquet spark_catalog.default.web_sales
Output [7]: [ws_item_sk#76, ws_web_site_sk#77, ws_promo_sk#78, ws_order_number#79, ws_ext_sales_price#80, ws_net_profit#81, ws_sold_date_sk#82]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#82), dynamicpruningexpression(ws_sold_date_sk#82 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ws_web_site_sk), IsNotNull(ws_item_sk), IsNotNull(ws_promo_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_promo_sk:int,ws_order_number:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(64) ColumnarToRow [codegen id : 21]
Input [7]: [ws_item_sk#76, ws_web_site_sk#77, ws_promo_sk#78, ws_order_number#79, ws_ext_sales_price#80, ws_net_profit#81, ws_sold_date_sk#82]

(65) Filter [codegen id : 21]
Input [7]: [ws_item_sk#76, ws_web_site_sk#77, ws_promo_sk#78, ws_order_number#79, ws_ext_sales_price#80, ws_net_profit#81, ws_sold_date_sk#82]
Condition : ((((isnotnull(ws_web_site_sk#77) AND isnotnull(ws_item_sk#76)) AND isnotnull(ws_promo_sk#78)) AND might_contain(runtimefilterexpression(ReusedSubquery Subquery scalar-subquery#9, [id=#10]), xxhash64(ws_item_sk#76, 42))) AND might_contain(runtimefilterexpression(ReusedSubquery Subquery scalar-subquery#11, [id=#12]), xxhash64(ws_promo_sk#78, 42)))

(66) Exchange
Input [7]: [ws_item_sk#76, ws_web_site_sk#77, ws_promo_sk#78, ws_order_number#79, ws_ext_sales_price#80, ws_net_profit#81, ws_sold_date_sk#82]
Arguments: hashpartitioning(ws_item_sk#76, ws_order_number#79, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(67) Sort [codegen id : 22]
Input [7]: [ws_item_sk#76, ws_web_site_sk#77, ws_promo_sk#78, ws_order_number#79, ws_ext_sales_price#80, ws_net_profit#81, ws_sold_date_sk#82]
Arguments: [ws_item_sk#76 ASC NULLS FIRST, ws_order_number#79 ASC NULLS FIRST], false, 0

(68) Scan parquet spark_catalog.default.web_returns
Output [5]: [wr_item_sk#83, wr_order_number#84, wr_return_amt#85, wr_net_loss#86, wr_returned_date_sk#87]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(69) ColumnarToRow [codegen id : 23]
Input [5]: [wr_item_sk#83, wr_order_number#84, wr_return_amt#85, wr_net_loss#86, wr_returned_date_sk#87]

(70) Filter [codegen id : 23]
Input [5]: [wr_item_sk#83, wr_order_number#84, wr_return_amt#85, wr_net_loss#86, wr_returned_date_sk#87]
Condition : (isnotnull(wr_item_sk#83) AND isnotnull(wr_order_number#84))

(71) Project [codegen id : 23]
Output [4]: [wr_item_sk#83, wr_order_number#84, wr_return_amt#85, wr_net_loss#86]
Input [5]: [wr_item_sk#83, wr_order_number#84, wr_return_amt#85, wr_net_loss#86, wr_returned_date_sk#87]

(72) Exchange
Input [4]: [wr_item_sk#83, wr_order_number#84, wr_return_amt#85, wr_net_loss#86]
Arguments: hashpartitioning(wr_item_sk#83, wr_order_number#84, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(73) Sort [codegen id : 24]
Input [4]: [wr_item_sk#83, wr_order_number#84, wr_return_amt#85, wr_net_loss#86]
Arguments: [wr_item_sk#83 ASC NULLS FIRST, wr_order_number#84 ASC NULLS FIRST], false, 0

(74) SortMergeJoin [codegen id : 29]
Left keys [2]: [ws_item_sk#76, ws_order_number#79]
Right keys [2]: [wr_item_sk#83, wr_order_number#84]
Join type: LeftOuter
Join condition: None

(75) Project [codegen id : 29]
Output [8]: [ws_item_sk#76, ws_web_site_sk#77, ws_promo_sk#78, ws_ext_sales_price#80, ws_net_profit#81, ws_sold_date_sk#82, wr_return_amt#85, wr_net_loss#86]
Input [11]: [ws_item_sk#76, ws_web_site_sk#77, ws_promo_sk#78, ws_order_number#79, ws_ext_sales_price#80, ws_net_profit#81, ws_sold_date_sk#82, wr_item_sk#83, wr_order_number#84, wr_return_amt#85, wr_net_loss#86]

(76) ReusedExchange [Reuses operator id: 199]
Output [1]: [i_item_sk#88]

(77) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_item_sk#76]
Right keys [1]: [i_item_sk#88]
Join type: Inner
Join condition: None

(78) Project [codegen id : 29]
Output [7]: [ws_web_site_sk#77, ws_promo_sk#78, ws_ext_sales_price#80, ws_net_profit#81, ws_sold_date_sk#82, wr_return_amt#85, wr_net_loss#86]
Input [9]: [ws_item_sk#76, ws_web_site_sk#77, ws_promo_sk#78, ws_ext_sales_price#80, ws_net_profit#81, ws_sold_date_sk#82, wr_return_amt#85, wr_net_loss#86, i_item_sk#88]

(79) ReusedExchange [Reuses operator id: 209]
Output [1]: [p_promo_sk#89]

(80) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_promo_sk#78]
Right keys [1]: [p_promo_sk#89]
Join type: Inner
Join condition: None

(81) Project [codegen id : 29]
Output [6]: [ws_web_site_sk#77, ws_ext_sales_price#80, ws_net_profit#81, ws_sold_date_sk#82, wr_return_amt#85, wr_net_loss#86]
Input [8]: [ws_web_site_sk#77, ws_promo_sk#78, ws_ext_sales_price#80, ws_net_profit#81, ws_sold_date_sk#82, wr_return_amt#85, wr_net_loss#86, p_promo_sk#89]

(82) ReusedExchange [Reuses operator id: 219]
Output [1]: [d_date_sk#90]

(83) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_sold_date_sk#82]
Right keys [1]: [d_date_sk#90]
Join type: Inner
Join condition: None

(84) Project [codegen id : 29]
Output [5]: [ws_web_site_sk#77, ws_ext_sales_price#80, ws_net_profit#81, wr_return_amt#85, wr_net_loss#86]
Input [7]: [ws_web_site_sk#77, ws_ext_sales_price#80, ws_net_profit#81, ws_sold_date_sk#82, wr_return_amt#85, wr_net_loss#86, d_date_sk#90]

(85) Scan parquet spark_catalog.default.web_site
Output [2]: [web_site_sk#91, web_site_id#92]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string>

(86) ColumnarToRow [codegen id : 28]
Input [2]: [web_site_sk#91, web_site_id#92]

(87) Filter [codegen id : 28]
Input [2]: [web_site_sk#91, web_site_id#92]
Condition : isnotnull(web_site_sk#91)

(88) BroadcastExchange
Input [2]: [web_site_sk#91, web_site_id#92]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=11]

(89) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_web_site_sk#77]
Right keys [1]: [web_site_sk#91]
Join type: Inner
Join condition: None

(90) Project [codegen id : 29]
Output [5]: [ws_ext_sales_price#80, ws_net_profit#81, wr_return_amt#85, wr_net_loss#86, web_site_id#92]
Input [7]: [ws_web_site_sk#77, ws_ext_sales_price#80, ws_net_profit#81, wr_return_amt#85, wr_net_loss#86, web_site_sk#91, web_site_id#92]

(91) HashAggregate [codegen id : 29]
Input [5]: [ws_ext_sales_price#80, ws_net_profit#81, wr_return_amt#85, wr_net_loss#86, web_site_id#92]
Keys [1]: [web_site_id#92]
Functions [3]: [partial_sum(UnscaledValue(ws_ext_sales_price#80)), partial_sum(coalesce(cast(wr_return_amt#85 as decimal(12,2)), 0.00)), partial_sum((ws_net_profit#81 - coalesce(cast(wr_net_loss#86 as decimal(12,2)), 0.00)))]
Aggregate Attributes [5]: [sum#93, sum#94, isEmpty#95, sum#96, isEmpty#97]
Results [6]: [web_site_id#92, sum#98, sum#99, isEmpty#100, sum#101, isEmpty#102]

(92) Exchange
Input [6]: [web_site_id#92, sum#98, sum#99, isEmpty#100, sum#101, isEmpty#102]
Arguments: hashpartitioning(web_site_id#92, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(93) HashAggregate [codegen id : 30]
Input [6]: [web_site_id#92, sum#98, sum#99, isEmpty#100, sum#101, isEmpty#102]
Keys [1]: [web_site_id#92]
Functions [3]: [sum(UnscaledValue(ws_ext_sales_price#80)), sum(coalesce(cast(wr_return_amt#85 as decimal(12,2)), 0.00)), sum((ws_net_profit#81 - coalesce(cast(wr_net_loss#86 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_sales_price#80))#103, sum(coalesce(cast(wr_return_amt#85 as decimal(12,2)), 0.00))#104, sum((ws_net_profit#81 - coalesce(cast(wr_net_loss#86 as decimal(12,2)), 0.00)))#105]
Results [5]: [web channel AS channel#106, concat(web_site, web_site_id#92) AS id#107, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#80))#103,17,2) AS sales#108, sum(coalesce(cast(wr_return_amt#85 as decimal(12,2)), 0.00))#104 AS returns#109, sum((ws_net_profit#81 - coalesce(cast(wr_net_loss#86 as decimal(12,2)), 0.00)))#105 AS profit#110]

(94) Union

(95) HashAggregate [codegen id : 31]
Input [5]: [channel#36, id#37, sales#38, returns#39, profit#40]
Keys [2]: [channel#36, id#37]
Functions [3]: [partial_sum(sales#38), partial_sum(returns#39), partial_sum(profit#40)]
Aggregate Attributes [6]: [sum#111, isEmpty#112, sum#113, isEmpty#114, sum#115, isEmpty#116]
Results [8]: [channel#36, id#37, sum#117, isEmpty#118, sum#119, isEmpty#120, sum#121, isEmpty#122]

(96) Exchange
Input [8]: [channel#36, id#37, sum#117, isEmpty#118, sum#119, isEmpty#120, sum#121, isEmpty#122]
Arguments: hashpartitioning(channel#36, id#37, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(97) HashAggregate [codegen id : 32]
Input [8]: [channel#36, id#37, sum#117, isEmpty#118, sum#119, isEmpty#120, sum#121, isEmpty#122]
Keys [2]: [channel#36, id#37]
Functions [3]: [sum(sales#38), sum(returns#39), sum(profit#40)]
Aggregate Attributes [3]: [sum(sales#38)#123, sum(returns#39)#124, sum(profit#40)#125]
Results [5]: [channel#36, id#37, cast(sum(sales#38)#123 as decimal(37,2)) AS sales#126, cast(sum(returns#39)#124 as decimal(38,2)) AS returns#127, cast(sum(profit#40)#125 as decimal(38,2)) AS profit#128]

(98) ReusedExchange [Reuses operator id: 30]
Output [6]: [s_store_id#129, sum#130, sum#131, isEmpty#132, sum#133, isEmpty#134]

(99) HashAggregate [codegen id : 42]
Input [6]: [s_store_id#129, sum#130, sum#131, isEmpty#132, sum#133, isEmpty#134]
Keys [1]: [s_store_id#129]
Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#135)), sum(coalesce(cast(sr_return_amt#136 as decimal(12,2)), 0.00)), sum((ss_net_profit#137 - coalesce(cast(sr_net_loss#138 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_ext_sales_price#135))#33, sum(coalesce(cast(sr_return_amt#136 as decimal(12,2)), 0.00))#34, sum((ss_net_profit#137 - coalesce(cast(sr_net_loss#138 as decimal(12,2)), 0.00)))#35]
Results [5]: [store channel AS channel#139, concat(store, s_store_id#129) AS id#140, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#135))#33,17,2) AS sales#141, sum(coalesce(cast(sr_return_amt#136 as decimal(12,2)), 0.00))#34 AS returns#142, sum((ss_net_profit#137 - coalesce(cast(sr_net_loss#138 as decimal(12,2)), 0.00)))#35 AS profit#143]

(100) ReusedExchange [Reuses operator id: 61]
Output [6]: [cp_catalog_page_id#144, sum#145, sum#146, isEmpty#147, sum#148, isEmpty#149]

(101) HashAggregate [codegen id : 52]
Input [6]: [cp_catalog_page_id#144, sum#145, sum#146, isEmpty#147, sum#148, isEmpty#149]
Keys [1]: [cp_catalog_page_id#144]
Functions [3]: [sum(UnscaledValue(cs_ext_sales_price#150)), sum(coalesce(cast(cr_return_amount#151 as decimal(12,2)), 0.00)), sum((cs_net_profit#152 - coalesce(cast(cr_net_loss#153 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_sales_price#150))#68, sum(coalesce(cast(cr_return_amount#151 as decimal(12,2)), 0.00))#69, sum((cs_net_profit#152 - coalesce(cast(cr_net_loss#153 as decimal(12,2)), 0.00)))#70]
Results [5]: [catalog channel AS channel#154, concat(catalog_page, cp_catalog_page_id#144) AS id#155, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#150))#68,17,2) AS sales#156, sum(coalesce(cast(cr_return_amount#151 as decimal(12,2)), 0.00))#69 AS returns#157, sum((cs_net_profit#152 - coalesce(cast(cr_net_loss#153 as decimal(12,2)), 0.00)))#70 AS profit#158]

(102) Scan parquet spark_catalog.default.web_sales
Output [7]: [ws_item_sk#159, ws_web_site_sk#160, ws_promo_sk#161, ws_order_number#162, ws_ext_sales_price#163, ws_net_profit#164, ws_sold_date_sk#165]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#165), dynamicpruningexpression(ws_sold_date_sk#165 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ws_web_site_sk), IsNotNull(ws_item_sk), IsNotNull(ws_promo_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_promo_sk:int,ws_order_number:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(103) ColumnarToRow [codegen id : 53]
Input [7]: [ws_item_sk#159, ws_web_site_sk#160, ws_promo_sk#161, ws_order_number#162, ws_ext_sales_price#163, ws_net_profit#164, ws_sold_date_sk#165]

(104) Filter [codegen id : 53]
Input [7]: [ws_item_sk#159, ws_web_site_sk#160, ws_promo_sk#161, ws_order_number#162, ws_ext_sales_price#163, ws_net_profit#164, ws_sold_date_sk#165]
Condition : ((isnotnull(ws_web_site_sk#160) AND isnotnull(ws_item_sk#159)) AND isnotnull(ws_promo_sk#161))

(105) Exchange
Input [7]: [ws_item_sk#159, ws_web_site_sk#160, ws_promo_sk#161, ws_order_number#162, ws_ext_sales_price#163, ws_net_profit#164, ws_sold_date_sk#165]
Arguments: hashpartitioning(ws_item_sk#159, ws_order_number#162, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(106) Sort [codegen id : 54]
Input [7]: [ws_item_sk#159, ws_web_site_sk#160, ws_promo_sk#161, ws_order_number#162, ws_ext_sales_price#163, ws_net_profit#164, ws_sold_date_sk#165]
Arguments: [ws_item_sk#159 ASC NULLS FIRST, ws_order_number#162 ASC NULLS FIRST], false, 0

(107) ReusedExchange [Reuses operator id: 72]
Output [4]: [wr_item_sk#166, wr_order_number#167, wr_return_amt#168, wr_net_loss#169]

(108) Sort [codegen id : 56]
Input [4]: [wr_item_sk#166, wr_order_number#167, wr_return_amt#168, wr_net_loss#169]
Arguments: [wr_item_sk#166 ASC NULLS FIRST, wr_order_number#167 ASC NULLS FIRST], false, 0

(109) SortMergeJoin [codegen id : 61]
Left keys [2]: [ws_item_sk#159, ws_order_number#162]
Right keys [2]: [wr_item_sk#166, wr_order_number#167]
Join type: LeftOuter
Join condition: None

(110) Project [codegen id : 61]
Output [8]: [ws_item_sk#159, ws_web_site_sk#160, ws_promo_sk#161, ws_ext_sales_price#163, ws_net_profit#164, ws_sold_date_sk#165, wr_return_amt#168, wr_net_loss#169]
Input [11]: [ws_item_sk#159, ws_web_site_sk#160, ws_promo_sk#161, ws_order_number#162, ws_ext_sales_price#163, ws_net_profit#164, ws_sold_date_sk#165, wr_item_sk#166, wr_order_number#167, wr_return_amt#168, wr_net_loss#169]

(111) ReusedExchange [Reuses operator id: 199]
Output [1]: [i_item_sk#170]

(112) BroadcastHashJoin [codegen id : 61]
Left keys [1]: [ws_item_sk#159]
Right keys [1]: [i_item_sk#170]
Join type: Inner
Join condition: None

(113) Project [codegen id : 61]
Output [7]: [ws_web_site_sk#160, ws_promo_sk#161, ws_ext_sales_price#163, ws_net_profit#164, ws_sold_date_sk#165, wr_return_amt#168, wr_net_loss#169]
Input [9]: [ws_item_sk#159, ws_web_site_sk#160, ws_promo_sk#161, ws_ext_sales_price#163, ws_net_profit#164, ws_sold_date_sk#165, wr_return_amt#168, wr_net_loss#169, i_item_sk#170]

(114) ReusedExchange [Reuses operator id: 209]
Output [1]: [p_promo_sk#171]

(115) BroadcastHashJoin [codegen id : 61]
Left keys [1]: [ws_promo_sk#161]
Right keys [1]: [p_promo_sk#171]
Join type: Inner
Join condition: None

(116) Project [codegen id : 61]
Output [6]: [ws_web_site_sk#160, ws_ext_sales_price#163, ws_net_profit#164, ws_sold_date_sk#165, wr_return_amt#168, wr_net_loss#169]
Input [8]: [ws_web_site_sk#160, ws_promo_sk#161, ws_ext_sales_price#163, ws_net_profit#164, ws_sold_date_sk#165, wr_return_amt#168, wr_net_loss#169, p_promo_sk#171]

(117) ReusedExchange [Reuses operator id: 219]
Output [1]: [d_date_sk#172]

(118) BroadcastHashJoin [codegen id : 61]
Left keys [1]: [ws_sold_date_sk#165]
Right keys [1]: [d_date_sk#172]
Join type: Inner
Join condition: None

(119) Project [codegen id : 61]
Output [5]: [ws_web_site_sk#160, ws_ext_sales_price#163, ws_net_profit#164, wr_return_amt#168, wr_net_loss#169]
Input [7]: [ws_web_site_sk#160, ws_ext_sales_price#163, ws_net_profit#164, ws_sold_date_sk#165, wr_return_amt#168, wr_net_loss#169, d_date_sk#172]

(120) ReusedExchange [Reuses operator id: 88]
Output [2]: [web_site_sk#173, web_site_id#174]

(121) BroadcastHashJoin [codegen id : 61]
Left keys [1]: [ws_web_site_sk#160]
Right keys [1]: [web_site_sk#173]
Join type: Inner
Join condition: None

(122) Project [codegen id : 61]
Output [5]: [ws_ext_sales_price#163, ws_net_profit#164, wr_return_amt#168, wr_net_loss#169, web_site_id#174]
Input [7]: [ws_web_site_sk#160, ws_ext_sales_price#163, ws_net_profit#164, wr_return_amt#168, wr_net_loss#169, web_site_sk#173, web_site_id#174]

(123) HashAggregate [codegen id : 61]
Input [5]: [ws_ext_sales_price#163, ws_net_profit#164, wr_return_amt#168, wr_net_loss#169, web_site_id#174]
Keys [1]: [web_site_id#174]
Functions [3]: [partial_sum(UnscaledValue(ws_ext_sales_price#163)), partial_sum(coalesce(cast(wr_return_amt#168 as decimal(12,2)), 0.00)), partial_sum((ws_net_profit#164 - coalesce(cast(wr_net_loss#169 as decimal(12,2)), 0.00)))]
Aggregate Attributes [5]: [sum#175, sum#176, isEmpty#177, sum#178, isEmpty#179]
Results [6]: [web_site_id#174, sum#180, sum#181, isEmpty#182, sum#183, isEmpty#184]

(124) Exchange
Input [6]: [web_site_id#174, sum#180, sum#181, isEmpty#182, sum#183, isEmpty#184]
Arguments: hashpartitioning(web_site_id#174, 5), ENSURE_REQUIREMENTS, [plan_id=15]

(125) HashAggregate [codegen id : 62]
Input [6]: [web_site_id#174, sum#180, sum#181, isEmpty#182, sum#183, isEmpty#184]
Keys [1]: [web_site_id#174]
Functions [3]: [sum(UnscaledValue(ws_ext_sales_price#163)), sum(coalesce(cast(wr_return_amt#168 as decimal(12,2)), 0.00)), sum((ws_net_profit#164 - coalesce(cast(wr_net_loss#169 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_sales_price#163))#103, sum(coalesce(cast(wr_return_amt#168 as decimal(12,2)), 0.00))#104, sum((ws_net_profit#164 - coalesce(cast(wr_net_loss#169 as decimal(12,2)), 0.00)))#105]
Results [5]: [web channel AS channel#185, concat(web_site, web_site_id#174) AS id#186, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#163))#103,17,2) AS sales#187, sum(coalesce(cast(wr_return_amt#168 as decimal(12,2)), 0.00))#104 AS returns#188, sum((ws_net_profit#164 - coalesce(cast(wr_net_loss#169 as decimal(12,2)), 0.00)))#105 AS profit#189]

(126) Union

(127) HashAggregate [codegen id : 63]
Input [5]: [channel#139, id#140, sales#141, returns#142, profit#143]
Keys [2]: [channel#139, id#140]
Functions [3]: [partial_sum(sales#141), partial_sum(returns#142), partial_sum(profit#143)]
Aggregate Attributes [6]: [sum#190, isEmpty#191, sum#192, isEmpty#193, sum#194, isEmpty#195]
Results [8]: [channel#139, id#140, sum#196, isEmpty#197, sum#198, isEmpty#199, sum#200, isEmpty#201]

(128) Exchange
Input [8]: [channel#139, id#140, sum#196, isEmpty#197, sum#198, isEmpty#199, sum#200, isEmpty#201]
Arguments: hashpartitioning(channel#139, id#140, 5), ENSURE_REQUIREMENTS, [plan_id=16]

(129) HashAggregate [codegen id : 64]
Input [8]: [channel#139, id#140, sum#196, isEmpty#197, sum#198, isEmpty#199, sum#200, isEmpty#201]
Keys [2]: [channel#139, id#140]
Functions [3]: [sum(sales#141), sum(returns#142), sum(profit#143)]
Aggregate Attributes [3]: [sum(sales#141)#123, sum(returns#142)#124, sum(profit#143)#125]
Results [4]: [channel#139, sum(sales#141)#123 AS sales#202, sum(returns#142)#124 AS returns#203, sum(profit#143)#125 AS profit#204]

(130) HashAggregate [codegen id : 64]
Input [4]: [channel#139, sales#202, returns#203, profit#204]
Keys [1]: [channel#139]
Functions [3]: [partial_sum(sales#202), partial_sum(returns#203), partial_sum(profit#204)]
Aggregate Attributes [6]: [sum#205, isEmpty#206, sum#207, isEmpty#208, sum#209, isEmpty#210]
Results [7]: [channel#139, sum#211, isEmpty#212, sum#213, isEmpty#214, sum#215, isEmpty#216]

(131) Exchange
Input [7]: [channel#139, sum#211, isEmpty#212, sum#213, isEmpty#214, sum#215, isEmpty#216]
Arguments: hashpartitioning(channel#139, 5), ENSURE_REQUIREMENTS, [plan_id=17]

(132) HashAggregate [codegen id : 65]
Input [7]: [channel#139, sum#211, isEmpty#212, sum#213, isEmpty#214, sum#215, isEmpty#216]
Keys [1]: [channel#139]
Functions [3]: [sum(sales#202), sum(returns#203), sum(profit#204)]
Aggregate Attributes [3]: [sum(sales#202)#217, sum(returns#203)#218, sum(profit#204)#219]
Results [5]: [channel#139, null AS id#220, sum(sales#202)#217 AS sales#221, sum(returns#203)#218 AS returns#222, sum(profit#204)#219 AS profit#223]

(133) Scan parquet spark_catalog.default.store_sales
Output [7]: [ss_item_sk#224, ss_store_sk#225, ss_promo_sk#226, ss_ticket_number#227, ss_ext_sales_price#228, ss_net_profit#229, ss_sold_date_sk#230]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#230), dynamicpruningexpression(ss_sold_date_sk#230 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(134) ColumnarToRow [codegen id : 66]
Input [7]: [ss_item_sk#224, ss_store_sk#225, ss_promo_sk#226, ss_ticket_number#227, ss_ext_sales_price#228, ss_net_profit#229, ss_sold_date_sk#230]

(135) Filter [codegen id : 66]
Input [7]: [ss_item_sk#224, ss_store_sk#225, ss_promo_sk#226, ss_ticket_number#227, ss_ext_sales_price#228, ss_net_profit#229, ss_sold_date_sk#230]
Condition : ((isnotnull(ss_store_sk#225) AND isnotnull(ss_item_sk#224)) AND isnotnull(ss_promo_sk#226))

(136) Exchange
Input [7]: [ss_item_sk#224, ss_store_sk#225, ss_promo_sk#226, ss_ticket_number#227, ss_ext_sales_price#228, ss_net_profit#229, ss_sold_date_sk#230]
Arguments: hashpartitioning(ss_item_sk#224, ss_ticket_number#227, 5), ENSURE_REQUIREMENTS, [plan_id=18]

(137) Sort [codegen id : 67]
Input [7]: [ss_item_sk#224, ss_store_sk#225, ss_promo_sk#226, ss_ticket_number#227, ss_ext_sales_price#228, ss_net_profit#229, ss_sold_date_sk#230]
Arguments: [ss_item_sk#224 ASC NULLS FIRST, ss_ticket_number#227 ASC NULLS FIRST], false, 0

(138) ReusedExchange [Reuses operator id: 10]
Output [4]: [sr_item_sk#231, sr_ticket_number#232, sr_return_amt#233, sr_net_loss#234]

(139) Sort [codegen id : 69]
Input [4]: [sr_item_sk#231, sr_ticket_number#232, sr_return_amt#233, sr_net_loss#234]
Arguments: [sr_item_sk#231 ASC NULLS FIRST, sr_ticket_number#232 ASC NULLS FIRST], false, 0

(140) SortMergeJoin [codegen id : 74]
Left keys [2]: [ss_item_sk#224, ss_ticket_number#227]
Right keys [2]: [sr_item_sk#231, sr_ticket_number#232]
Join type: LeftOuter
Join condition: None

(141) Project [codegen id : 74]
Output [8]: [ss_item_sk#224, ss_store_sk#225, ss_promo_sk#226, ss_ext_sales_price#228, ss_net_profit#229, ss_sold_date_sk#230, sr_return_amt#233, sr_net_loss#234]
Input [11]: [ss_item_sk#224, ss_store_sk#225, ss_promo_sk#226, ss_ticket_number#227, ss_ext_sales_price#228, ss_net_profit#229, ss_sold_date_sk#230, sr_item_sk#231, sr_ticket_number#232, sr_return_amt#233, sr_net_loss#234]

(142) ReusedExchange [Reuses operator id: 199]
Output [1]: [i_item_sk#235]

(143) BroadcastHashJoin [codegen id : 74]
Left keys [1]: [ss_item_sk#224]
Right keys [1]: [i_item_sk#235]
Join type: Inner
Join condition: None

(144) Project [codegen id : 74]
Output [7]: [ss_store_sk#225, ss_promo_sk#226, ss_ext_sales_price#228, ss_net_profit#229, ss_sold_date_sk#230, sr_return_amt#233, sr_net_loss#234]
Input [9]: [ss_item_sk#224, ss_store_sk#225, ss_promo_sk#226, ss_ext_sales_price#228, ss_net_profit#229, ss_sold_date_sk#230, sr_return_amt#233, sr_net_loss#234, i_item_sk#235]

(145) ReusedExchange [Reuses operator id: 209]
Output [1]: [p_promo_sk#236]

(146) BroadcastHashJoin [codegen id : 74]
Left keys [1]: [ss_promo_sk#226]
Right keys [1]: [p_promo_sk#236]
Join type: Inner
Join condition: None

(147) Project [codegen id : 74]
Output [6]: [ss_store_sk#225, ss_ext_sales_price#228, ss_net_profit#229, ss_sold_date_sk#230, sr_return_amt#233, sr_net_loss#234]
Input [8]: [ss_store_sk#225, ss_promo_sk#226, ss_ext_sales_price#228, ss_net_profit#229, ss_sold_date_sk#230, sr_return_amt#233, sr_net_loss#234, p_promo_sk#236]

(148) ReusedExchange [Reuses operator id: 219]
Output [1]: [d_date_sk#237]

(149) BroadcastHashJoin [codegen id : 74]
Left keys [1]: [ss_sold_date_sk#230]
Right keys [1]: [d_date_sk#237]
Join type: Inner
Join condition: None

(150) Project [codegen id : 74]
Output [5]: [ss_store_sk#225, ss_ext_sales_price#228, ss_net_profit#229, sr_return_amt#233, sr_net_loss#234]
Input [7]: [ss_store_sk#225, ss_ext_sales_price#228, ss_net_profit#229, ss_sold_date_sk#230, sr_return_amt#233, sr_net_loss#234, d_date_sk#237]

(151) ReusedExchange [Reuses operator id: 26]
Output [2]: [s_store_sk#238, s_store_id#239]

(152) BroadcastHashJoin [codegen id : 74]
Left keys [1]: [ss_store_sk#225]
Right keys [1]: [s_store_sk#238]
Join type: Inner
Join condition: None

(153) Project [codegen id : 74]
Output [5]: [ss_ext_sales_price#228, ss_net_profit#229, sr_return_amt#233, sr_net_loss#234, s_store_id#239]
Input [7]: [ss_store_sk#225, ss_ext_sales_price#228, ss_net_profit#229, sr_return_amt#233, sr_net_loss#234, s_store_sk#238, s_store_id#239]

(154) HashAggregate [codegen id : 74]
Input [5]: [ss_ext_sales_price#228, ss_net_profit#229, sr_return_amt#233, sr_net_loss#234, s_store_id#239]
Keys [1]: [s_store_id#239]
Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#228)), partial_sum(coalesce(cast(sr_return_amt#233 as decimal(12,2)), 0.00)), partial_sum((ss_net_profit#229 - coalesce(cast(sr_net_loss#234 as decimal(12,2)), 0.00)))]
Aggregate Attributes [5]: [sum#240, sum#241, isEmpty#242, sum#243, isEmpty#244]
Results [6]: [s_store_id#239, sum#245, sum#246, isEmpty#247, sum#248, isEmpty#249]

(155) Exchange
Input [6]: [s_store_id#239, sum#245, sum#246, isEmpty#247, sum#248, isEmpty#249]
Arguments: hashpartitioning(s_store_id#239, 5), ENSURE_REQUIREMENTS, [plan_id=19]

(156) HashAggregate [codegen id : 75]
Input [6]: [s_store_id#239, sum#245, sum#246, isEmpty#247, sum#248, isEmpty#249]
Keys [1]: [s_store_id#239]
Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#228)), sum(coalesce(cast(sr_return_amt#233 as decimal(12,2)), 0.00)), sum((ss_net_profit#229 - coalesce(cast(sr_net_loss#234 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_ext_sales_price#228))#33, sum(coalesce(cast(sr_return_amt#233 as decimal(12,2)), 0.00))#34, sum((ss_net_profit#229 - coalesce(cast(sr_net_loss#234 as decimal(12,2)), 0.00)))#35]
Results [5]: [store channel AS channel#250, concat(store, s_store_id#239) AS id#251, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#228))#33,17,2) AS sales#252, sum(coalesce(cast(sr_return_amt#233 as decimal(12,2)), 0.00))#34 AS returns#253, sum((ss_net_profit#229 - coalesce(cast(sr_net_loss#234 as decimal(12,2)), 0.00)))#35 AS profit#254]

(157) Scan parquet spark_catalog.default.catalog_sales
Output [7]: [cs_catalog_page_sk#255, cs_item_sk#256, cs_promo_sk#257, cs_order_number#258, cs_ext_sales_price#259, cs_net_profit#260, cs_sold_date_sk#261]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#261), dynamicpruningexpression(cs_sold_date_sk#261 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(cs_catalog_page_sk), IsNotNull(cs_item_sk), IsNotNull(cs_promo_sk)]
ReadSchema: struct<cs_catalog_page_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(158) ColumnarToRow [codegen id : 76]
Input [7]: [cs_catalog_page_sk#255, cs_item_sk#256, cs_promo_sk#257, cs_order_number#258, cs_ext_sales_price#259, cs_net_profit#260, cs_sold_date_sk#261]

(159) Filter [codegen id : 76]
Input [7]: [cs_catalog_page_sk#255, cs_item_sk#256, cs_promo_sk#257, cs_order_number#258, cs_ext_sales_price#259, cs_net_profit#260, cs_sold_date_sk#261]
Condition : ((isnotnull(cs_catalog_page_sk#255) AND isnotnull(cs_item_sk#256)) AND isnotnull(cs_promo_sk#257))

(160) Exchange
Input [7]: [cs_catalog_page_sk#255, cs_item_sk#256, cs_promo_sk#257, cs_order_number#258, cs_ext_sales_price#259, cs_net_profit#260, cs_sold_date_sk#261]
Arguments: hashpartitioning(cs_item_sk#256, cs_order_number#258, 5), ENSURE_REQUIREMENTS, [plan_id=20]

(161) Sort [codegen id : 77]
Input [7]: [cs_catalog_page_sk#255, cs_item_sk#256, cs_promo_sk#257, cs_order_number#258, cs_ext_sales_price#259, cs_net_profit#260, cs_sold_date_sk#261]
Arguments: [cs_item_sk#256 ASC NULLS FIRST, cs_order_number#258 ASC NULLS FIRST], false, 0

(162) ReusedExchange [Reuses operator id: 41]
Output [4]: [cr_item_sk#262, cr_order_number#263, cr_return_amount#264, cr_net_loss#265]

(163) Sort [codegen id : 79]
Input [4]: [cr_item_sk#262, cr_order_number#263, cr_return_amount#264, cr_net_loss#265]
Arguments: [cr_item_sk#262 ASC NULLS FIRST, cr_order_number#263 ASC NULLS FIRST], false, 0

(164) SortMergeJoin [codegen id : 84]
Left keys [2]: [cs_item_sk#256, cs_order_number#258]
Right keys [2]: [cr_item_sk#262, cr_order_number#263]
Join type: LeftOuter
Join condition: None

(165) Project [codegen id : 84]
Output [8]: [cs_catalog_page_sk#255, cs_item_sk#256, cs_promo_sk#257, cs_ext_sales_price#259, cs_net_profit#260, cs_sold_date_sk#261, cr_return_amount#264, cr_net_loss#265]
Input [11]: [cs_catalog_page_sk#255, cs_item_sk#256, cs_promo_sk#257, cs_order_number#258, cs_ext_sales_price#259, cs_net_profit#260, cs_sold_date_sk#261, cr_item_sk#262, cr_order_number#263, cr_return_amount#264, cr_net_loss#265]

(166) ReusedExchange [Reuses operator id: 199]
Output [1]: [i_item_sk#266]

(167) BroadcastHashJoin [codegen id : 84]
Left keys [1]: [cs_item_sk#256]
Right keys [1]: [i_item_sk#266]
Join type: Inner
Join condition: None

(168) Project [codegen id : 84]
Output [7]: [cs_catalog_page_sk#255, cs_promo_sk#257, cs_ext_sales_price#259, cs_net_profit#260, cs_sold_date_sk#261, cr_return_amount#264, cr_net_loss#265]
Input [9]: [cs_catalog_page_sk#255, cs_item_sk#256, cs_promo_sk#257, cs_ext_sales_price#259, cs_net_profit#260, cs_sold_date_sk#261, cr_return_amount#264, cr_net_loss#265, i_item_sk#266]

(169) ReusedExchange [Reuses operator id: 209]
Output [1]: [p_promo_sk#267]

(170) BroadcastHashJoin [codegen id : 84]
Left keys [1]: [cs_promo_sk#257]
Right keys [1]: [p_promo_sk#267]
Join type: Inner
Join condition: None

(171) Project [codegen id : 84]
Output [6]: [cs_catalog_page_sk#255, cs_ext_sales_price#259, cs_net_profit#260, cs_sold_date_sk#261, cr_return_amount#264, cr_net_loss#265]
Input [8]: [cs_catalog_page_sk#255, cs_promo_sk#257, cs_ext_sales_price#259, cs_net_profit#260, cs_sold_date_sk#261, cr_return_amount#264, cr_net_loss#265, p_promo_sk#267]

(172) ReusedExchange [Reuses operator id: 219]
Output [1]: [d_date_sk#268]

(173) BroadcastHashJoin [codegen id : 84]
Left keys [1]: [cs_sold_date_sk#261]
Right keys [1]: [d_date_sk#268]
Join type: Inner
Join condition: None

(174) Project [codegen id : 84]
Output [5]: [cs_catalog_page_sk#255, cs_ext_sales_price#259, cs_net_profit#260, cr_return_amount#264, cr_net_loss#265]
Input [7]: [cs_catalog_page_sk#255, cs_ext_sales_price#259, cs_net_profit#260, cs_sold_date_sk#261, cr_return_amount#264, cr_net_loss#265, d_date_sk#268]

(175) ReusedExchange [Reuses operator id: 57]
Output [2]: [cp_catalog_page_sk#269, cp_catalog_page_id#270]

(176) BroadcastHashJoin [codegen id : 84]
Left keys [1]: [cs_catalog_page_sk#255]
Right keys [1]: [cp_catalog_page_sk#269]
Join type: Inner
Join condition: None

(177) Project [codegen id : 84]
Output [5]: [cs_ext_sales_price#259, cs_net_profit#260, cr_return_amount#264, cr_net_loss#265, cp_catalog_page_id#270]
Input [7]: [cs_catalog_page_sk#255, cs_ext_sales_price#259, cs_net_profit#260, cr_return_amount#264, cr_net_loss#265, cp_catalog_page_sk#269, cp_catalog_page_id#270]

(178) HashAggregate [codegen id : 84]
Input [5]: [cs_ext_sales_price#259, cs_net_profit#260, cr_return_amount#264, cr_net_loss#265, cp_catalog_page_id#270]
Keys [1]: [cp_catalog_page_id#270]
Functions [3]: [partial_sum(UnscaledValue(cs_ext_sales_price#259)), partial_sum(coalesce(cast(cr_return_amount#264 as decimal(12,2)), 0.00)), partial_sum((cs_net_profit#260 - coalesce(cast(cr_net_loss#265 as decimal(12,2)), 0.00)))]
Aggregate Attributes [5]: [sum#271, sum#272, isEmpty#273, sum#274, isEmpty#275]
Results [6]: [cp_catalog_page_id#270, sum#276, sum#277, isEmpty#278, sum#279, isEmpty#280]

(179) Exchange
Input [6]: [cp_catalog_page_id#270, sum#276, sum#277, isEmpty#278, sum#279, isEmpty#280]
Arguments: hashpartitioning(cp_catalog_page_id#270, 5), ENSURE_REQUIREMENTS, [plan_id=21]

(180) HashAggregate [codegen id : 85]
Input [6]: [cp_catalog_page_id#270, sum#276, sum#277, isEmpty#278, sum#279, isEmpty#280]
Keys [1]: [cp_catalog_page_id#270]
Functions [3]: [sum(UnscaledValue(cs_ext_sales_price#259)), sum(coalesce(cast(cr_return_amount#264 as decimal(12,2)), 0.00)), sum((cs_net_profit#260 - coalesce(cast(cr_net_loss#265 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_sales_price#259))#68, sum(coalesce(cast(cr_return_amount#264 as decimal(12,2)), 0.00))#69, sum((cs_net_profit#260 - coalesce(cast(cr_net_loss#265 as decimal(12,2)), 0.00)))#70]
Results [5]: [catalog channel AS channel#281, concat(catalog_page, cp_catalog_page_id#270) AS id#282, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#259))#68,17,2) AS sales#283, sum(coalesce(cast(cr_return_amount#264 as decimal(12,2)), 0.00))#69 AS returns#284, sum((cs_net_profit#260 - coalesce(cast(cr_net_loss#265 as decimal(12,2)), 0.00)))#70 AS profit#285]

(181) ReusedExchange [Reuses operator id: 124]
Output [6]: [web_site_id#286, sum#287, sum#288, isEmpty#289, sum#290, isEmpty#291]

(182) HashAggregate [codegen id : 95]
Input [6]: [web_site_id#286, sum#287, sum#288, isEmpty#289, sum#290, isEmpty#291]
Keys [1]: [web_site_id#286]
Functions [3]: [sum(UnscaledValue(ws_ext_sales_price#292)), sum(coalesce(cast(wr_return_amt#293 as decimal(12,2)), 0.00)), sum((ws_net_profit#294 - coalesce(cast(wr_net_loss#295 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_sales_price#292))#103, sum(coalesce(cast(wr_return_amt#293 as decimal(12,2)), 0.00))#104, sum((ws_net_profit#294 - coalesce(cast(wr_net_loss#295 as decimal(12,2)), 0.00)))#105]
Results [5]: [web channel AS channel#296, concat(web_site, web_site_id#286) AS id#297, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#292))#103,17,2) AS sales#298, sum(coalesce(cast(wr_return_amt#293 as decimal(12,2)), 0.00))#104 AS returns#299, sum((ws_net_profit#294 - coalesce(cast(wr_net_loss#295 as decimal(12,2)), 0.00)))#105 AS profit#300]

(183) Union

(184) HashAggregate [codegen id : 96]
Input [5]: [channel#250, id#251, sales#252, returns#253, profit#254]
Keys [2]: [channel#250, id#251]
Functions [3]: [partial_sum(sales#252), partial_sum(returns#253), partial_sum(profit#254)]
Aggregate Attributes [6]: [sum#301, isEmpty#302, sum#303, isEmpty#304, sum#305, isEmpty#306]
Results [8]: [channel#250, id#251, sum#307, isEmpty#308, sum#309, isEmpty#310, sum#311, isEmpty#312]

(185) Exchange
Input [8]: [channel#250, id#251, sum#307, isEmpty#308, sum#309, isEmpty#310, sum#311, isEmpty#312]
Arguments: hashpartitioning(channel#250, id#251, 5), ENSURE_REQUIREMENTS, [plan_id=22]

(186) HashAggregate [codegen id : 97]
Input [8]: [channel#250, id#251, sum#307, isEmpty#308, sum#309, isEmpty#310, sum#311, isEmpty#312]
Keys [2]: [channel#250, id#251]
Functions [3]: [sum(sales#252), sum(returns#253), sum(profit#254)]
Aggregate Attributes [3]: [sum(sales#252)#123, sum(returns#253)#124, sum(profit#254)#125]
Results [3]: [sum(sales#252)#123 AS sales#313, sum(returns#253)#124 AS returns#314, sum(profit#254)#125 AS profit#315]

(187) HashAggregate [codegen id : 97]
Input [3]: [sales#313, returns#314, profit#315]
Keys: []
Functions [3]: [partial_sum(sales#313), partial_sum(returns#314), partial_sum(profit#315)]
Aggregate Attributes [6]: [sum#316, isEmpty#317, sum#318, isEmpty#319, sum#320, isEmpty#321]
Results [6]: [sum#322, isEmpty#323, sum#324, isEmpty#325, sum#326, isEmpty#327]

(188) Exchange
Input [6]: [sum#322, isEmpty#323, sum#324, isEmpty#325, sum#326, isEmpty#327]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=23]

(189) HashAggregate [codegen id : 98]
Input [6]: [sum#322, isEmpty#323, sum#324, isEmpty#325, sum#326, isEmpty#327]
Keys: []
Functions [3]: [sum(sales#313), sum(returns#314), sum(profit#315)]
Aggregate Attributes [3]: [sum(sales#313)#328, sum(returns#314)#329, sum(profit#315)#330]
Results [5]: [null AS channel#331, null AS id#332, sum(sales#313)#328 AS sales#333, sum(returns#314)#329 AS returns#334, sum(profit#315)#330 AS profit#335]

(190) Union

(191) HashAggregate [codegen id : 99]
Input [5]: [channel#36, id#37, sales#126, returns#127, profit#128]
Keys [5]: [channel#36, id#37, sales#126, returns#127, profit#128]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#36, id#37, sales#126, returns#127, profit#128]

(192) Exchange
Input [5]: [channel#36, id#37, sales#126, returns#127, profit#128]
Arguments: hashpartitioning(channel#36, id#37, sales#126, returns#127, profit#128, 5), ENSURE_REQUIREMENTS, [plan_id=24]

(193) HashAggregate [codegen id : 100]
Input [5]: [channel#36, id#37, sales#126, returns#127, profit#128]
Keys [5]: [channel#36, id#37, sales#126, returns#127, profit#128]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#36, id#37, sales#126, returns#127, profit#128]

(194) TakeOrderedAndProject
Input [5]: [channel#36, id#37, sales#126, returns#127, profit#128]
Arguments: 100, [channel#36 ASC NULLS FIRST, id#37 ASC NULLS FIRST], [channel#36, id#37, sales#126, returns#127, profit#128]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#9, [id=#10]
ObjectHashAggregate (204)
+- Exchange (203)
   +- ObjectHashAggregate (202)
      +- BroadcastExchangeExecProxy (201)


(195) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#18, i_current_price#336]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>

(196) ColumnarToRow [codegen id : 1]
Input [2]: [i_item_sk#18, i_current_price#336]

(197) Filter [codegen id : 1]
Input [2]: [i_item_sk#18, i_current_price#336]
Condition : ((isnotnull(i_current_price#336) AND (i_current_price#336 > 50.00)) AND isnotnull(i_item_sk#18))

(198) Project [codegen id : 1]
Output [1]: [i_item_sk#18]
Input [2]: [i_item_sk#18, i_current_price#336]

(199) BroadcastExchange
Input [1]: [i_item_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=25]

(200) SubqueryBroadcast
Input [1]: [i_item_sk#18]
Arguments: runtimefilter#9, 0, [i_item_sk#18], [id=#337]

(201) BroadcastExchangeExecProxy
Input [1]: [i_item_sk#338]
Arguments: [i_item_sk#18]

(202) ObjectHashAggregate
Input [1]: [i_item_sk#18]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(i_item_sk#18, 42), 101823, 1521109, 0, 0)]
Aggregate Attributes [1]: [buf#339]
Results [1]: [buf#340]

(203) Exchange
Input [1]: [buf#340]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=26]

(204) ObjectHashAggregate
Input [1]: [buf#340]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(i_item_sk#18, 42), 101823, 1521109, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(i_item_sk#18, 42), 101823, 1521109, 0, 0)#341]
Results [1]: [bloom_filter_agg(xxhash64(i_item_sk#18, 42), 101823, 1521109, 0, 0)#341 AS bloomFilter#342]

Subquery:2 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#11, [id=#12]
ObjectHashAggregate (214)
+- Exchange (213)
   +- ObjectHashAggregate (212)
      +- BroadcastExchangeExecProxy (211)


(205) Scan parquet spark_catalog.default.promotion
Output [2]: [p_promo_sk#19, p_channel_tv#343]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_channel_tv), EqualTo(p_channel_tv,N), IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>

(206) ColumnarToRow [codegen id : 1]
Input [2]: [p_promo_sk#19, p_channel_tv#343]

(207) Filter [codegen id : 1]
Input [2]: [p_promo_sk#19, p_channel_tv#343]
Condition : ((isnotnull(p_channel_tv#343) AND (p_channel_tv#343 = N)) AND isnotnull(p_promo_sk#19))

(208) Project [codegen id : 1]
Output [1]: [p_promo_sk#19]
Input [2]: [p_promo_sk#19, p_channel_tv#343]

(209) BroadcastExchange
Input [1]: [p_promo_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=27]

(210) SubqueryBroadcast
Input [1]: [p_promo_sk#19]
Arguments: runtimefilter#11, 0, [p_promo_sk#19], [id=#344]

(211) BroadcastExchangeExecProxy
Input [1]: [p_promo_sk#345]
Arguments: [p_promo_sk#19]

(212) ObjectHashAggregate
Input [1]: [p_promo_sk#19]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(p_promo_sk#19, 42), 986, 24246, 0, 0)]
Aggregate Attributes [1]: [buf#346]
Results [1]: [buf#347]

(213) Exchange
Input [1]: [buf#347]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=28]

(214) ObjectHashAggregate
Input [1]: [buf#347]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(p_promo_sk#19, 42), 986, 24246, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(p_promo_sk#19, 42), 986, 24246, 0, 0)#348]
Results [1]: [bloom_filter_agg(xxhash64(p_promo_sk#19, 42), 986, 24246, 0, 0)#348 AS bloomFilter#349]

Subquery:3 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (219)
+- * Project (218)
   +- * Filter (217)
      +- * ColumnarToRow (216)
         +- Scan parquet spark_catalog.default.date_dim (215)


(215) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#20, d_date#350]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(216) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#20, d_date#350]

(217) Filter [codegen id : 1]
Input [2]: [d_date_sk#20, d_date#350]
Condition : (((isnotnull(d_date#350) AND (d_date#350 >= 1998-08-04)) AND (d_date#350 <= 1998-09-03)) AND isnotnull(d_date_sk#20))

(218) Project [codegen id : 1]
Output [1]: [d_date_sk#20]
Input [2]: [d_date_sk#20, d_date#350]

(219) BroadcastExchange
Input [1]: [d_date_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=29]

Subquery:4 Hosting operator id = 34 Hosting Expression = ReusedSubquery Subquery scalar-subquery#9, [id=#10]

Subquery:5 Hosting operator id = 34 Hosting Expression = ReusedSubquery Subquery scalar-subquery#11, [id=#12]

Subquery:6 Hosting operator id = 32 Hosting Expression = cs_sold_date_sk#47 IN dynamicpruning#8

Subquery:7 Hosting operator id = 65 Hosting Expression = ReusedSubquery Subquery scalar-subquery#9, [id=#10]

Subquery:8 Hosting operator id = 65 Hosting Expression = ReusedSubquery Subquery scalar-subquery#11, [id=#12]

Subquery:9 Hosting operator id = 63 Hosting Expression = ws_sold_date_sk#82 IN dynamicpruning#8

Subquery:10 Hosting operator id = 102 Hosting Expression = ws_sold_date_sk#165 IN dynamicpruning#8

Subquery:11 Hosting operator id = 133 Hosting Expression = ss_sold_date_sk#230 IN dynamicpruning#8

Subquery:12 Hosting operator id = 157 Hosting Expression = cs_sold_date_sk#261 IN dynamicpruning#8


