== Physical Plan ==
TakeOrderedAndProject (125)
+- * HashAggregate (124)
   +- Exchange (123)
      +- * HashAggregate (122)
         +- Union (121)
            :- * HashAggregate (115)
            :  +- Exchange (114)
            :     +- * HashAggregate (113)
            :        +- Union (112)
            :           :- * HashAggregate (106)
            :           :  +- Exchange (105)
            :           :     +- * HashAggregate (104)
            :           :        +- Union (103)
            :           :           :- * HashAggregate (42)
            :           :           :  +- Exchange (41)
            :           :           :     +- * HashAggregate (40)
            :           :           :        +- * Project (39)
            :           :           :           +- * BroadcastHashJoin Inner BuildRight (38)
            :           :           :              :- * Project (33)
            :           :           :              :  +- * BroadcastHashJoin Inner BuildRight (32)
            :           :           :              :     :- * Project (26)
            :           :           :              :     :  +- * BroadcastHashJoin Inner BuildRight (25)
            :           :           :              :     :     :- * Project (19)
            :           :           :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (18)
            :           :           :              :     :     :     :- * Project (12)
            :           :           :              :     :     :     :  +- SortMergeJoin LeftOuter (11)
            :           :           :              :     :     :     :     :- * Sort (5)
            :           :           :              :     :     :     :     :  +- Exchange (4)
            :           :           :              :     :     :     :     :     +- * Filter (3)
            :           :           :              :     :     :     :     :        +- * ColumnarToRow (2)
            :           :           :              :     :     :     :     :           +- Scan parquet default.store_sales (1)
            :           :           :              :     :     :     :     +- * Sort (10)
            :           :           :              :     :     :     :        +- Exchange (9)
            :           :           :              :     :     :     :           +- * Filter (8)
            :           :           :              :     :     :     :              +- * ColumnarToRow (7)
            :           :           :              :     :     :     :                 +- Scan parquet default.store_returns (6)
            :           :           :              :     :     :     +- BroadcastExchange (17)
            :           :           :              :     :     :        +- * Project (16)
            :           :           :              :     :     :           +- * Filter (15)
            :           :           :              :     :     :              +- * ColumnarToRow (14)
            :           :           :              :     :     :                 +- Scan parquet default.item (13)
            :           :           :              :     :     +- BroadcastExchange (24)
            :           :           :              :     :        +- * Project (23)
            :           :           :              :     :           +- * Filter (22)
            :           :           :              :     :              +- * ColumnarToRow (21)
            :           :           :              :     :                 +- Scan parquet default.promotion (20)
            :           :           :              :     +- BroadcastExchange (31)
            :           :           :              :        +- * Project (30)
            :           :           :              :           +- * Filter (29)
            :           :           :              :              +- * ColumnarToRow (28)
            :           :           :              :                 +- Scan parquet default.date_dim (27)
            :           :           :              +- BroadcastExchange (37)
            :           :           :                 +- * Filter (36)
            :           :           :                    +- * ColumnarToRow (35)
            :           :           :                       +- Scan parquet default.store (34)
            :           :           :- * HashAggregate (72)
            :           :           :  +- Exchange (71)
            :           :           :     +- * HashAggregate (70)
            :           :           :        +- * Project (69)
            :           :           :           +- * BroadcastHashJoin Inner BuildRight (68)
            :           :           :              :- * Project (63)
            :           :           :              :  +- * BroadcastHashJoin Inner BuildRight (62)
            :           :           :              :     :- * Project (60)
            :           :           :              :     :  +- * BroadcastHashJoin Inner BuildRight (59)
            :           :           :              :     :     :- * Project (57)
            :           :           :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (56)
            :           :           :              :     :     :     :- * Project (54)
            :           :           :              :     :     :     :  +- SortMergeJoin LeftOuter (53)
            :           :           :              :     :     :     :     :- * Sort (47)
            :           :           :              :     :     :     :     :  +- Exchange (46)
            :           :           :              :     :     :     :     :     +- * Filter (45)
            :           :           :              :     :     :     :     :        +- * ColumnarToRow (44)
            :           :           :              :     :     :     :     :           +- Scan parquet default.catalog_sales (43)
            :           :           :              :     :     :     :     +- * Sort (52)
            :           :           :              :     :     :     :        +- Exchange (51)
            :           :           :              :     :     :     :           +- * Filter (50)
            :           :           :              :     :     :     :              +- * ColumnarToRow (49)
            :           :           :              :     :     :     :                 +- Scan parquet default.catalog_returns (48)
            :           :           :              :     :     :     +- ReusedExchange (55)
            :           :           :              :     :     +- ReusedExchange (58)
            :           :           :              :     +- ReusedExchange (61)
            :           :           :              +- BroadcastExchange (67)
            :           :           :                 +- * Filter (66)
            :           :           :                    +- * ColumnarToRow (65)
            :           :           :                       +- Scan parquet default.catalog_page (64)
            :           :           +- * HashAggregate (102)
            :           :              +- Exchange (101)
            :           :                 +- * HashAggregate (100)
            :           :                    +- * Project (99)
            :           :                       +- * BroadcastHashJoin Inner BuildRight (98)
            :           :                          :- * Project (93)
            :           :                          :  +- * BroadcastHashJoin Inner BuildRight (92)
            :           :                          :     :- * Project (90)
            :           :                          :     :  +- * BroadcastHashJoin Inner BuildRight (89)
            :           :                          :     :     :- * Project (87)
            :           :                          :     :     :  +- * BroadcastHashJoin Inner BuildRight (86)
            :           :                          :     :     :     :- * Project (84)
            :           :                          :     :     :     :  +- SortMergeJoin LeftOuter (83)
            :           :                          :     :     :     :     :- * Sort (77)
            :           :                          :     :     :     :     :  +- Exchange (76)
            :           :                          :     :     :     :     :     +- * Filter (75)
            :           :                          :     :     :     :     :        +- * ColumnarToRow (74)
            :           :                          :     :     :     :     :           +- Scan parquet default.web_sales (73)
            :           :                          :     :     :     :     +- * Sort (82)
            :           :                          :     :     :     :        +- Exchange (81)
            :           :                          :     :     :     :           +- * Filter (80)
            :           :                          :     :     :     :              +- * ColumnarToRow (79)
            :           :                          :     :     :     :                 +- Scan parquet default.web_returns (78)
            :           :                          :     :     :     +- ReusedExchange (85)
            :           :                          :     :     +- ReusedExchange (88)
            :           :                          :     +- ReusedExchange (91)
            :           :                          +- BroadcastExchange (97)
            :           :                             +- * Filter (96)
            :           :                                +- * ColumnarToRow (95)
            :           :                                   +- Scan parquet default.web_site (94)
            :           +- * HashAggregate (111)
            :              +- Exchange (110)
            :                 +- * HashAggregate (109)
            :                    +- * HashAggregate (108)
            :                       +- ReusedExchange (107)
            +- * HashAggregate (120)
               +- Exchange (119)
                  +- * HashAggregate (118)
                     +- * HashAggregate (117)
                        +- ReusedExchange (116)


(1) Scan parquet default.store_sales
Output [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_net_profit#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_net_profit#7]

(3) Filter [codegen id : 1]
Input [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_net_profit#7]
Condition : ((((((isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_item_sk#2)) AND isnotnull(ss_promo_sk#4)) AND dynamicpruningexpression(ss_item_sk#2 IN dynamicpruning#8)) AND dynamicpruningexpression(ss_promo_sk#4 IN dynamicpruning#9)) AND dynamicpruningexpression(ss_sold_date_sk#1 IN dynamicpruning#10))

(4) Exchange
Input [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_net_profit#7]
Arguments: hashpartitioning(cast(ss_item_sk#2 as bigint), cast(ss_ticket_number#5 as bigint), 5), true, [id=#11]

(5) Sort [codegen id : 2]
Input [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_net_profit#7]
Arguments: [cast(ss_item_sk#2 as bigint) ASC NULLS FIRST, cast(ss_ticket_number#5 as bigint) ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_returns
Output [4]: [sr_item_sk#12, sr_ticket_number#13, sr_return_amt#14, sr_net_loss#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:bigint,sr_ticket_number:bigint,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(7) ColumnarToRow [codegen id : 3]
Input [4]: [sr_item_sk#12, sr_ticket_number#13, sr_return_amt#14, sr_net_loss#15]

(8) Filter [codegen id : 3]
Input [4]: [sr_item_sk#12, sr_ticket_number#13, sr_return_amt#14, sr_net_loss#15]
Condition : (isnotnull(sr_item_sk#12) AND isnotnull(sr_ticket_number#13))

(9) Exchange
Input [4]: [sr_item_sk#12, sr_ticket_number#13, sr_return_amt#14, sr_net_loss#15]
Arguments: hashpartitioning(sr_item_sk#12, sr_ticket_number#13, 5), true, [id=#16]

(10) Sort [codegen id : 4]
Input [4]: [sr_item_sk#12, sr_ticket_number#13, sr_return_amt#14, sr_net_loss#15]
Arguments: [sr_item_sk#12 ASC NULLS FIRST, sr_ticket_number#13 ASC NULLS FIRST], false, 0

(11) SortMergeJoin
Left keys [2]: [cast(ss_item_sk#2 as bigint), cast(ss_ticket_number#5 as bigint)]
Right keys [2]: [sr_item_sk#12, sr_ticket_number#13]
Join condition: None

(12) Project [codegen id : 9]
Output [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#14, sr_net_loss#15]
Input [11]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_net_profit#7, sr_item_sk#12, sr_ticket_number#13, sr_return_amt#14, sr_net_loss#15]

(13) Scan parquet default.item
Output [2]: [i_item_sk#17, i_current_price#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>

(14) ColumnarToRow [codegen id : 5]
Input [2]: [i_item_sk#17, i_current_price#18]

(15) Filter [codegen id : 5]
Input [2]: [i_item_sk#17, i_current_price#18]
Condition : ((isnotnull(i_current_price#18) AND (i_current_price#18 > 50.00)) AND isnotnull(i_item_sk#17))

(16) Project [codegen id : 5]
Output [1]: [i_item_sk#17]
Input [2]: [i_item_sk#17, i_current_price#18]

(17) BroadcastExchange
Input [1]: [i_item_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#19]

(18) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#17]
Join condition: None

(19) Project [codegen id : 9]
Output [7]: [ss_sold_date_sk#1, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#14, sr_net_loss#15]
Input [9]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#14, sr_net_loss#15, i_item_sk#17]

(20) Scan parquet default.promotion
Output [2]: [p_promo_sk#20, p_channel_tv#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_channel_tv), EqualTo(p_channel_tv,N), IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>

(21) ColumnarToRow [codegen id : 6]
Input [2]: [p_promo_sk#20, p_channel_tv#21]

(22) Filter [codegen id : 6]
Input [2]: [p_promo_sk#20, p_channel_tv#21]
Condition : ((isnotnull(p_channel_tv#21) AND (p_channel_tv#21 = N)) AND isnotnull(p_promo_sk#20))

(23) Project [codegen id : 6]
Output [1]: [p_promo_sk#20]
Input [2]: [p_promo_sk#20, p_channel_tv#21]

(24) BroadcastExchange
Input [1]: [p_promo_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22]

(25) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_promo_sk#4]
Right keys [1]: [p_promo_sk#20]
Join condition: None

(26) Project [codegen id : 9]
Output [6]: [ss_sold_date_sk#1, ss_store_sk#3, ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#14, sr_net_loss#15]
Input [8]: [ss_sold_date_sk#1, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#14, sr_net_loss#15, p_promo_sk#20]

(27) Scan parquet default.date_dim
Output [2]: [d_date_sk#23, d_date#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(28) ColumnarToRow [codegen id : 7]
Input [2]: [d_date_sk#23, d_date#24]

(29) Filter [codegen id : 7]
Input [2]: [d_date_sk#23, d_date#24]
Condition : (((isnotnull(d_date#24) AND (d_date#24 >= 10442)) AND (d_date#24 <= 10472)) AND isnotnull(d_date_sk#23))

(30) Project [codegen id : 7]
Output [1]: [d_date_sk#23]
Input [2]: [d_date_sk#23, d_date#24]

(31) BroadcastExchange
Input [1]: [d_date_sk#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#25]

(32) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#23]
Join condition: None

(33) Project [codegen id : 9]
Output [5]: [ss_store_sk#3, ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#14, sr_net_loss#15]
Input [7]: [ss_sold_date_sk#1, ss_store_sk#3, ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#14, sr_net_loss#15, d_date_sk#23]

(34) Scan parquet default.store
Output [2]: [s_store_sk#26, s_store_id#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(35) ColumnarToRow [codegen id : 8]
Input [2]: [s_store_sk#26, s_store_id#27]

(36) Filter [codegen id : 8]
Input [2]: [s_store_sk#26, s_store_id#27]
Condition : isnotnull(s_store_sk#26)

(37) BroadcastExchange
Input [2]: [s_store_sk#26, s_store_id#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28]

(38) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#26]
Join condition: None

(39) Project [codegen id : 9]
Output [5]: [ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#14, sr_net_loss#15, s_store_id#27]
Input [7]: [ss_store_sk#3, ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#14, sr_net_loss#15, s_store_sk#26, s_store_id#27]

(40) HashAggregate [codegen id : 9]
Input [5]: [ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#14, sr_net_loss#15, s_store_id#27]
Keys [1]: [s_store_id#27]
Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#6)), partial_sum(coalesce(cast(sr_return_amt#14 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(ss_net_profit#7 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#15 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [5]: [sum#29, sum#30, isEmpty#31, sum#32, isEmpty#33]
Results [6]: [s_store_id#27, sum#34, sum#35, isEmpty#36, sum#37, isEmpty#38]

(41) Exchange
Input [6]: [s_store_id#27, sum#34, sum#35, isEmpty#36, sum#37, isEmpty#38]
Arguments: hashpartitioning(s_store_id#27, 5), true, [id=#39]

(42) HashAggregate [codegen id : 10]
Input [6]: [s_store_id#27, sum#34, sum#35, isEmpty#36, sum#37, isEmpty#38]
Keys [1]: [s_store_id#27]
Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#6)), sum(coalesce(cast(sr_return_amt#14 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(ss_net_profit#7 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#15 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_ext_sales_price#6))#40, sum(coalesce(cast(sr_return_amt#14 as decimal(12,2)), 0.00))#41, sum(CheckOverflow((promote_precision(cast(ss_net_profit#7 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#15 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#42]
Results [5]: [store channel AS channel#43, concat(store, s_store_id#27) AS id#44, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#6))#40,17,2) AS sales#45, sum(coalesce(cast(sr_return_amt#14 as decimal(12,2)), 0.00))#41 AS returns#46, sum(CheckOverflow((promote_precision(cast(ss_net_profit#7 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#15 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#42 AS profit#47]

(43) Scan parquet default.catalog_sales
Output [7]: [cs_sold_date_sk#48, cs_catalog_page_sk#49, cs_item_sk#50, cs_promo_sk#51, cs_order_number#52, cs_ext_sales_price#53, cs_net_profit#54]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_catalog_page_sk), IsNotNull(cs_item_sk), IsNotNull(cs_promo_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_catalog_page_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(44) ColumnarToRow [codegen id : 11]
Input [7]: [cs_sold_date_sk#48, cs_catalog_page_sk#49, cs_item_sk#50, cs_promo_sk#51, cs_order_number#52, cs_ext_sales_price#53, cs_net_profit#54]

(45) Filter [codegen id : 11]
Input [7]: [cs_sold_date_sk#48, cs_catalog_page_sk#49, cs_item_sk#50, cs_promo_sk#51, cs_order_number#52, cs_ext_sales_price#53, cs_net_profit#54]
Condition : ((((((isnotnull(cs_sold_date_sk#48) AND isnotnull(cs_catalog_page_sk#49)) AND isnotnull(cs_item_sk#50)) AND isnotnull(cs_promo_sk#51)) AND dynamicpruningexpression(cs_item_sk#50 IN dynamicpruning#8)) AND dynamicpruningexpression(cs_promo_sk#51 IN dynamicpruning#9)) AND dynamicpruningexpression(cs_sold_date_sk#48 IN dynamicpruning#10))

(46) Exchange
Input [7]: [cs_sold_date_sk#48, cs_catalog_page_sk#49, cs_item_sk#50, cs_promo_sk#51, cs_order_number#52, cs_ext_sales_price#53, cs_net_profit#54]
Arguments: hashpartitioning(cs_item_sk#50, cs_order_number#52, 5), true, [id=#55]

(47) Sort [codegen id : 12]
Input [7]: [cs_sold_date_sk#48, cs_catalog_page_sk#49, cs_item_sk#50, cs_promo_sk#51, cs_order_number#52, cs_ext_sales_price#53, cs_net_profit#54]
Arguments: [cs_item_sk#50 ASC NULLS FIRST, cs_order_number#52 ASC NULLS FIRST], false, 0

(48) Scan parquet default.catalog_returns
Output [4]: [cr_item_sk#56, cr_order_number#57, cr_return_amount#58, cr_net_loss#59]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(49) ColumnarToRow [codegen id : 13]
Input [4]: [cr_item_sk#56, cr_order_number#57, cr_return_amount#58, cr_net_loss#59]

(50) Filter [codegen id : 13]
Input [4]: [cr_item_sk#56, cr_order_number#57, cr_return_amount#58, cr_net_loss#59]
Condition : (isnotnull(cr_item_sk#56) AND isnotnull(cr_order_number#57))

(51) Exchange
Input [4]: [cr_item_sk#56, cr_order_number#57, cr_return_amount#58, cr_net_loss#59]
Arguments: hashpartitioning(cr_item_sk#56, cr_order_number#57, 5), true, [id=#60]

(52) Sort [codegen id : 14]
Input [4]: [cr_item_sk#56, cr_order_number#57, cr_return_amount#58, cr_net_loss#59]
Arguments: [cr_item_sk#56 ASC NULLS FIRST, cr_order_number#57 ASC NULLS FIRST], false, 0

(53) SortMergeJoin
Left keys [2]: [cs_item_sk#50, cs_order_number#52]
Right keys [2]: [cr_item_sk#56, cr_order_number#57]
Join condition: None

(54) Project [codegen id : 19]
Output [8]: [cs_sold_date_sk#48, cs_catalog_page_sk#49, cs_item_sk#50, cs_promo_sk#51, cs_ext_sales_price#53, cs_net_profit#54, cr_return_amount#58, cr_net_loss#59]
Input [11]: [cs_sold_date_sk#48, cs_catalog_page_sk#49, cs_item_sk#50, cs_promo_sk#51, cs_order_number#52, cs_ext_sales_price#53, cs_net_profit#54, cr_item_sk#56, cr_order_number#57, cr_return_amount#58, cr_net_loss#59]

(55) ReusedExchange [Reuses operator id: 17]
Output [1]: [i_item_sk#17]

(56) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_item_sk#50]
Right keys [1]: [i_item_sk#17]
Join condition: None

(57) Project [codegen id : 19]
Output [7]: [cs_sold_date_sk#48, cs_catalog_page_sk#49, cs_promo_sk#51, cs_ext_sales_price#53, cs_net_profit#54, cr_return_amount#58, cr_net_loss#59]
Input [9]: [cs_sold_date_sk#48, cs_catalog_page_sk#49, cs_item_sk#50, cs_promo_sk#51, cs_ext_sales_price#53, cs_net_profit#54, cr_return_amount#58, cr_net_loss#59, i_item_sk#17]

(58) ReusedExchange [Reuses operator id: 24]
Output [1]: [p_promo_sk#20]

(59) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_promo_sk#51]
Right keys [1]: [p_promo_sk#20]
Join condition: None

(60) Project [codegen id : 19]
Output [6]: [cs_sold_date_sk#48, cs_catalog_page_sk#49, cs_ext_sales_price#53, cs_net_profit#54, cr_return_amount#58, cr_net_loss#59]
Input [8]: [cs_sold_date_sk#48, cs_catalog_page_sk#49, cs_promo_sk#51, cs_ext_sales_price#53, cs_net_profit#54, cr_return_amount#58, cr_net_loss#59, p_promo_sk#20]

(61) ReusedExchange [Reuses operator id: 31]
Output [1]: [d_date_sk#23]

(62) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_sold_date_sk#48]
Right keys [1]: [d_date_sk#23]
Join condition: None

(63) Project [codegen id : 19]
Output [5]: [cs_catalog_page_sk#49, cs_ext_sales_price#53, cs_net_profit#54, cr_return_amount#58, cr_net_loss#59]
Input [7]: [cs_sold_date_sk#48, cs_catalog_page_sk#49, cs_ext_sales_price#53, cs_net_profit#54, cr_return_amount#58, cr_net_loss#59, d_date_sk#23]

(64) Scan parquet default.catalog_page
Output [2]: [cp_catalog_page_sk#61, cp_catalog_page_id#62]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>

(65) ColumnarToRow [codegen id : 18]
Input [2]: [cp_catalog_page_sk#61, cp_catalog_page_id#62]

(66) Filter [codegen id : 18]
Input [2]: [cp_catalog_page_sk#61, cp_catalog_page_id#62]
Condition : isnotnull(cp_catalog_page_sk#61)

(67) BroadcastExchange
Input [2]: [cp_catalog_page_sk#61, cp_catalog_page_id#62]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#63]

(68) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_catalog_page_sk#49]
Right keys [1]: [cp_catalog_page_sk#61]
Join condition: None

(69) Project [codegen id : 19]
Output [5]: [cs_ext_sales_price#53, cs_net_profit#54, cr_return_amount#58, cr_net_loss#59, cp_catalog_page_id#62]
Input [7]: [cs_catalog_page_sk#49, cs_ext_sales_price#53, cs_net_profit#54, cr_return_amount#58, cr_net_loss#59, cp_catalog_page_sk#61, cp_catalog_page_id#62]

(70) HashAggregate [codegen id : 19]
Input [5]: [cs_ext_sales_price#53, cs_net_profit#54, cr_return_amount#58, cr_net_loss#59, cp_catalog_page_id#62]
Keys [1]: [cp_catalog_page_id#62]
Functions [3]: [partial_sum(UnscaledValue(cs_ext_sales_price#53)), partial_sum(coalesce(cast(cr_return_amount#58 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(cs_net_profit#54 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#59 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [5]: [sum#64, sum#65, isEmpty#66, sum#67, isEmpty#68]
Results [6]: [cp_catalog_page_id#62, sum#69, sum#70, isEmpty#71, sum#72, isEmpty#73]

(71) Exchange
Input [6]: [cp_catalog_page_id#62, sum#69, sum#70, isEmpty#71, sum#72, isEmpty#73]
Arguments: hashpartitioning(cp_catalog_page_id#62, 5), true, [id=#74]

(72) HashAggregate [codegen id : 20]
Input [6]: [cp_catalog_page_id#62, sum#69, sum#70, isEmpty#71, sum#72, isEmpty#73]
Keys [1]: [cp_catalog_page_id#62]
Functions [3]: [sum(UnscaledValue(cs_ext_sales_price#53)), sum(coalesce(cast(cr_return_amount#58 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(cs_net_profit#54 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#59 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_sales_price#53))#75, sum(coalesce(cast(cr_return_amount#58 as decimal(12,2)), 0.00))#76, sum(CheckOverflow((promote_precision(cast(cs_net_profit#54 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#59 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#77]
Results [5]: [catalog channel AS channel#78, concat(catalog_page, cp_catalog_page_id#62) AS id#79, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#53))#75,17,2) AS sales#80, sum(coalesce(cast(cr_return_amount#58 as decimal(12,2)), 0.00))#76 AS returns#81, sum(CheckOverflow((promote_precision(cast(cs_net_profit#54 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#59 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#77 AS profit#82]

(73) Scan parquet default.web_sales
Output [7]: [ws_sold_date_sk#83, ws_item_sk#84, ws_web_site_sk#85, ws_promo_sk#86, ws_order_number#87, ws_ext_sales_price#88, ws_net_profit#89]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_web_site_sk), IsNotNull(ws_item_sk), IsNotNull(ws_promo_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_web_site_sk:int,ws_promo_sk:int,ws_order_number:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(74) ColumnarToRow [codegen id : 21]
Input [7]: [ws_sold_date_sk#83, ws_item_sk#84, ws_web_site_sk#85, ws_promo_sk#86, ws_order_number#87, ws_ext_sales_price#88, ws_net_profit#89]

(75) Filter [codegen id : 21]
Input [7]: [ws_sold_date_sk#83, ws_item_sk#84, ws_web_site_sk#85, ws_promo_sk#86, ws_order_number#87, ws_ext_sales_price#88, ws_net_profit#89]
Condition : ((((((isnotnull(ws_sold_date_sk#83) AND isnotnull(ws_web_site_sk#85)) AND isnotnull(ws_item_sk#84)) AND isnotnull(ws_promo_sk#86)) AND dynamicpruningexpression(ws_item_sk#84 IN dynamicpruning#8)) AND dynamicpruningexpression(ws_promo_sk#86 IN dynamicpruning#9)) AND dynamicpruningexpression(ws_sold_date_sk#83 IN dynamicpruning#10))

(76) Exchange
Input [7]: [ws_sold_date_sk#83, ws_item_sk#84, ws_web_site_sk#85, ws_promo_sk#86, ws_order_number#87, ws_ext_sales_price#88, ws_net_profit#89]
Arguments: hashpartitioning(cast(ws_item_sk#84 as bigint), cast(ws_order_number#87 as bigint), 5), true, [id=#90]

(77) Sort [codegen id : 22]
Input [7]: [ws_sold_date_sk#83, ws_item_sk#84, ws_web_site_sk#85, ws_promo_sk#86, ws_order_number#87, ws_ext_sales_price#88, ws_net_profit#89]
Arguments: [cast(ws_item_sk#84 as bigint) ASC NULLS FIRST, cast(ws_order_number#87 as bigint) ASC NULLS FIRST], false, 0

(78) Scan parquet default.web_returns
Output [4]: [wr_item_sk#91, wr_order_number#92, wr_return_amt#93, wr_net_loss#94]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number)]
ReadSchema: struct<wr_item_sk:bigint,wr_order_number:bigint,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(79) ColumnarToRow [codegen id : 23]
Input [4]: [wr_item_sk#91, wr_order_number#92, wr_return_amt#93, wr_net_loss#94]

(80) Filter [codegen id : 23]
Input [4]: [wr_item_sk#91, wr_order_number#92, wr_return_amt#93, wr_net_loss#94]
Condition : (isnotnull(wr_item_sk#91) AND isnotnull(wr_order_number#92))

(81) Exchange
Input [4]: [wr_item_sk#91, wr_order_number#92, wr_return_amt#93, wr_net_loss#94]
Arguments: hashpartitioning(wr_item_sk#91, wr_order_number#92, 5), true, [id=#95]

(82) Sort [codegen id : 24]
Input [4]: [wr_item_sk#91, wr_order_number#92, wr_return_amt#93, wr_net_loss#94]
Arguments: [wr_item_sk#91 ASC NULLS FIRST, wr_order_number#92 ASC NULLS FIRST], false, 0

(83) SortMergeJoin
Left keys [2]: [cast(ws_item_sk#84 as bigint), cast(ws_order_number#87 as bigint)]
Right keys [2]: [wr_item_sk#91, wr_order_number#92]
Join condition: None

(84) Project [codegen id : 29]
Output [8]: [ws_sold_date_sk#83, ws_item_sk#84, ws_web_site_sk#85, ws_promo_sk#86, ws_ext_sales_price#88, ws_net_profit#89, wr_return_amt#93, wr_net_loss#94]
Input [11]: [ws_sold_date_sk#83, ws_item_sk#84, ws_web_site_sk#85, ws_promo_sk#86, ws_order_number#87, ws_ext_sales_price#88, ws_net_profit#89, wr_item_sk#91, wr_order_number#92, wr_return_amt#93, wr_net_loss#94]

(85) ReusedExchange [Reuses operator id: 17]
Output [1]: [i_item_sk#17]

(86) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_item_sk#84]
Right keys [1]: [i_item_sk#17]
Join condition: None

(87) Project [codegen id : 29]
Output [7]: [ws_sold_date_sk#83, ws_web_site_sk#85, ws_promo_sk#86, ws_ext_sales_price#88, ws_net_profit#89, wr_return_amt#93, wr_net_loss#94]
Input [9]: [ws_sold_date_sk#83, ws_item_sk#84, ws_web_site_sk#85, ws_promo_sk#86, ws_ext_sales_price#88, ws_net_profit#89, wr_return_amt#93, wr_net_loss#94, i_item_sk#17]

(88) ReusedExchange [Reuses operator id: 24]
Output [1]: [p_promo_sk#20]

(89) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_promo_sk#86]
Right keys [1]: [p_promo_sk#20]
Join condition: None

(90) Project [codegen id : 29]
Output [6]: [ws_sold_date_sk#83, ws_web_site_sk#85, ws_ext_sales_price#88, ws_net_profit#89, wr_return_amt#93, wr_net_loss#94]
Input [8]: [ws_sold_date_sk#83, ws_web_site_sk#85, ws_promo_sk#86, ws_ext_sales_price#88, ws_net_profit#89, wr_return_amt#93, wr_net_loss#94, p_promo_sk#20]

(91) ReusedExchange [Reuses operator id: 31]
Output [1]: [d_date_sk#23]

(92) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_sold_date_sk#83]
Right keys [1]: [d_date_sk#23]
Join condition: None

(93) Project [codegen id : 29]
Output [5]: [ws_web_site_sk#85, ws_ext_sales_price#88, ws_net_profit#89, wr_return_amt#93, wr_net_loss#94]
Input [7]: [ws_sold_date_sk#83, ws_web_site_sk#85, ws_ext_sales_price#88, ws_net_profit#89, wr_return_amt#93, wr_net_loss#94, d_date_sk#23]

(94) Scan parquet default.web_site
Output [2]: [web_site_sk#96, web_site_id#97]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string>

(95) ColumnarToRow [codegen id : 28]
Input [2]: [web_site_sk#96, web_site_id#97]

(96) Filter [codegen id : 28]
Input [2]: [web_site_sk#96, web_site_id#97]
Condition : isnotnull(web_site_sk#96)

(97) BroadcastExchange
Input [2]: [web_site_sk#96, web_site_id#97]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#98]

(98) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_web_site_sk#85]
Right keys [1]: [web_site_sk#96]
Join condition: None

(99) Project [codegen id : 29]
Output [5]: [ws_ext_sales_price#88, ws_net_profit#89, wr_return_amt#93, wr_net_loss#94, web_site_id#97]
Input [7]: [ws_web_site_sk#85, ws_ext_sales_price#88, ws_net_profit#89, wr_return_amt#93, wr_net_loss#94, web_site_sk#96, web_site_id#97]

(100) HashAggregate [codegen id : 29]
Input [5]: [ws_ext_sales_price#88, ws_net_profit#89, wr_return_amt#93, wr_net_loss#94, web_site_id#97]
Keys [1]: [web_site_id#97]
Functions [3]: [partial_sum(UnscaledValue(ws_ext_sales_price#88)), partial_sum(coalesce(cast(wr_return_amt#93 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(ws_net_profit#89 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#94 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [5]: [sum#99, sum#100, isEmpty#101, sum#102, isEmpty#103]
Results [6]: [web_site_id#97, sum#104, sum#105, isEmpty#106, sum#107, isEmpty#108]

(101) Exchange
Input [6]: [web_site_id#97, sum#104, sum#105, isEmpty#106, sum#107, isEmpty#108]
Arguments: hashpartitioning(web_site_id#97, 5), true, [id=#109]

(102) HashAggregate [codegen id : 30]
Input [6]: [web_site_id#97, sum#104, sum#105, isEmpty#106, sum#107, isEmpty#108]
Keys [1]: [web_site_id#97]
Functions [3]: [sum(UnscaledValue(ws_ext_sales_price#88)), sum(coalesce(cast(wr_return_amt#93 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(ws_net_profit#89 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#94 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_sales_price#88))#110, sum(coalesce(cast(wr_return_amt#93 as decimal(12,2)), 0.00))#111, sum(CheckOverflow((promote_precision(cast(ws_net_profit#89 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#94 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#112]
Results [5]: [web channel AS channel#113, concat(web_site, web_site_id#97) AS id#114, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#88))#110,17,2) AS sales#115, sum(coalesce(cast(wr_return_amt#93 as decimal(12,2)), 0.00))#111 AS returns#116, sum(CheckOverflow((promote_precision(cast(ws_net_profit#89 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#94 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#112 AS profit#117]

(103) Union

(104) HashAggregate [codegen id : 31]
Input [5]: [channel#43, id#44, sales#45, returns#46, profit#47]
Keys [2]: [channel#43, id#44]
Functions [3]: [partial_sum(sales#45), partial_sum(returns#46), partial_sum(profit#47)]
Aggregate Attributes [6]: [sum#118, isEmpty#119, sum#120, isEmpty#121, sum#122, isEmpty#123]
Results [8]: [channel#43, id#44, sum#124, isEmpty#125, sum#126, isEmpty#127, sum#128, isEmpty#129]

(105) Exchange
Input [8]: [channel#43, id#44, sum#124, isEmpty#125, sum#126, isEmpty#127, sum#128, isEmpty#129]
Arguments: hashpartitioning(channel#43, id#44, 5), true, [id=#130]

(106) HashAggregate [codegen id : 32]
Input [8]: [channel#43, id#44, sum#124, isEmpty#125, sum#126, isEmpty#127, sum#128, isEmpty#129]
Keys [2]: [channel#43, id#44]
Functions [3]: [sum(sales#45), sum(returns#46), sum(profit#47)]
Aggregate Attributes [3]: [sum(sales#45)#131, sum(returns#46)#132, sum(profit#47)#133]
Results [5]: [channel#43, id#44, cast(sum(sales#45)#131 as decimal(37,2)) AS sales#134, cast(sum(returns#46)#132 as decimal(38,2)) AS returns#135, cast(sum(profit#47)#133 as decimal(38,2)) AS profit#136]

(107) ReusedExchange [Reuses operator id: unknown]
Output [8]: [channel#43, id#44, sum#137, isEmpty#138, sum#139, isEmpty#140, sum#141, isEmpty#142]

(108) HashAggregate [codegen id : 64]
Input [8]: [channel#43, id#44, sum#137, isEmpty#138, sum#139, isEmpty#140, sum#141, isEmpty#142]
Keys [2]: [channel#43, id#44]
Functions [3]: [sum(sales#45), sum(returns#46), sum(profit#47)]
Aggregate Attributes [3]: [sum(sales#45)#143, sum(returns#46)#144, sum(profit#47)#145]
Results [4]: [channel#43, sum(sales#45)#143 AS sales#146, sum(returns#46)#144 AS returns#147, sum(profit#47)#145 AS profit#148]

(109) HashAggregate [codegen id : 64]
Input [4]: [channel#43, sales#146, returns#147, profit#148]
Keys [1]: [channel#43]
Functions [3]: [partial_sum(sales#146), partial_sum(returns#147), partial_sum(profit#148)]
Aggregate Attributes [6]: [sum#149, isEmpty#150, sum#151, isEmpty#152, sum#153, isEmpty#154]
Results [7]: [channel#43, sum#155, isEmpty#156, sum#157, isEmpty#158, sum#159, isEmpty#160]

(110) Exchange
Input [7]: [channel#43, sum#155, isEmpty#156, sum#157, isEmpty#158, sum#159, isEmpty#160]
Arguments: hashpartitioning(channel#43, 5), true, [id=#161]

(111) HashAggregate [codegen id : 65]
Input [7]: [channel#43, sum#155, isEmpty#156, sum#157, isEmpty#158, sum#159, isEmpty#160]
Keys [1]: [channel#43]
Functions [3]: [sum(sales#146), sum(returns#147), sum(profit#148)]
Aggregate Attributes [3]: [sum(sales#146)#162, sum(returns#147)#163, sum(profit#148)#164]
Results [5]: [channel#43, null AS id#165, sum(sales#146)#162 AS sales#166, sum(returns#147)#163 AS returns#167, sum(profit#148)#164 AS profit#168]

(112) Union

(113) HashAggregate [codegen id : 66]
Input [5]: [channel#43, id#44, sales#134, returns#135, profit#136]
Keys [5]: [channel#43, id#44, sales#134, returns#135, profit#136]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#43, id#44, sales#134, returns#135, profit#136]

(114) Exchange
Input [5]: [channel#43, id#44, sales#134, returns#135, profit#136]
Arguments: hashpartitioning(channel#43, id#44, sales#134, returns#135, profit#136, 5), true, [id=#169]

(115) HashAggregate [codegen id : 67]
Input [5]: [channel#43, id#44, sales#134, returns#135, profit#136]
Keys [5]: [channel#43, id#44, sales#134, returns#135, profit#136]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#43, id#44, sales#134, returns#135, profit#136]

(116) ReusedExchange [Reuses operator id: unknown]
Output [8]: [channel#43, id#44, sum#170, isEmpty#171, sum#172, isEmpty#173, sum#174, isEmpty#175]

(117) HashAggregate [codegen id : 99]
Input [8]: [channel#43, id#44, sum#170, isEmpty#171, sum#172, isEmpty#173, sum#174, isEmpty#175]
Keys [2]: [channel#43, id#44]
Functions [3]: [sum(sales#45), sum(returns#46), sum(profit#47)]
Aggregate Attributes [3]: [sum(sales#45)#176, sum(returns#46)#177, sum(profit#47)#178]
Results [3]: [sum(sales#45)#176 AS sales#146, sum(returns#46)#177 AS returns#147, sum(profit#47)#178 AS profit#148]

(118) HashAggregate [codegen id : 99]
Input [3]: [sales#146, returns#147, profit#148]
Keys: []
Functions [3]: [partial_sum(sales#146), partial_sum(returns#147), partial_sum(profit#148)]
Aggregate Attributes [6]: [sum#179, isEmpty#180, sum#181, isEmpty#182, sum#183, isEmpty#184]
Results [6]: [sum#185, isEmpty#186, sum#187, isEmpty#188, sum#189, isEmpty#190]

(119) Exchange
Input [6]: [sum#185, isEmpty#186, sum#187, isEmpty#188, sum#189, isEmpty#190]
Arguments: SinglePartition, true, [id=#191]

(120) HashAggregate [codegen id : 100]
Input [6]: [sum#185, isEmpty#186, sum#187, isEmpty#188, sum#189, isEmpty#190]
Keys: []
Functions [3]: [sum(sales#146), sum(returns#147), sum(profit#148)]
Aggregate Attributes [3]: [sum(sales#146)#192, sum(returns#147)#193, sum(profit#148)#194]
Results [5]: [null AS channel#195, null AS id#196, sum(sales#146)#192 AS sales#197, sum(returns#147)#193 AS returns#198, sum(profit#148)#194 AS profit#199]

(121) Union

(122) HashAggregate [codegen id : 101]
Input [5]: [channel#43, id#44, sales#134, returns#135, profit#136]
Keys [5]: [channel#43, id#44, sales#134, returns#135, profit#136]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#43, id#44, sales#134, returns#135, profit#136]

(123) Exchange
Input [5]: [channel#43, id#44, sales#134, returns#135, profit#136]
Arguments: hashpartitioning(channel#43, id#44, sales#134, returns#135, profit#136, 5), true, [id=#200]

(124) HashAggregate [codegen id : 102]
Input [5]: [channel#43, id#44, sales#134, returns#135, profit#136]
Keys [5]: [channel#43, id#44, sales#134, returns#135, profit#136]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#43, id#44, sales#134, returns#135, profit#136]

(125) TakeOrderedAndProject
Input [5]: [channel#43, id#44, sales#134, returns#135, profit#136]
Arguments: 100, [channel#43 ASC NULLS FIRST, id#44 ASC NULLS FIRST], [channel#43, id#44, sales#134, returns#135, profit#136]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = ss_item_sk#2 IN dynamicpruning#8
ReusedExchange (126)


(126) ReusedExchange [Reuses operator id: 17]
Output [1]: [i_item_sk#17]

Subquery:2 Hosting operator id = 3 Hosting Expression = ss_promo_sk#4 IN dynamicpruning#9
ReusedExchange (127)


(127) ReusedExchange [Reuses operator id: 24]
Output [1]: [p_promo_sk#20]

Subquery:3 Hosting operator id = 3 Hosting Expression = ss_sold_date_sk#1 IN dynamicpruning#10
ReusedExchange (128)


(128) ReusedExchange [Reuses operator id: 31]
Output [1]: [d_date_sk#23]

Subquery:4 Hosting operator id = 1 Hosting Expression = ss_item_sk#2 IN dynamicpruning#8

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_promo_sk#4 IN dynamicpruning#9

Subquery:6 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#1 IN dynamicpruning#10

Subquery:7 Hosting operator id = 45 Hosting Expression = cs_item_sk#50 IN dynamicpruning#8

Subquery:8 Hosting operator id = 45 Hosting Expression = cs_promo_sk#51 IN dynamicpruning#9

Subquery:9 Hosting operator id = 45 Hosting Expression = cs_sold_date_sk#48 IN dynamicpruning#10

Subquery:10 Hosting operator id = 43 Hosting Expression = cs_item_sk#50 IN dynamicpruning#8

Subquery:11 Hosting operator id = 43 Hosting Expression = cs_promo_sk#51 IN dynamicpruning#9

Subquery:12 Hosting operator id = 43 Hosting Expression = cs_sold_date_sk#48 IN dynamicpruning#10

Subquery:13 Hosting operator id = 75 Hosting Expression = ws_item_sk#84 IN dynamicpruning#8

Subquery:14 Hosting operator id = 75 Hosting Expression = ws_promo_sk#86 IN dynamicpruning#9

Subquery:15 Hosting operator id = 75 Hosting Expression = ws_sold_date_sk#83 IN dynamicpruning#10

Subquery:16 Hosting operator id = 73 Hosting Expression = ws_item_sk#84 IN dynamicpruning#8

Subquery:17 Hosting operator id = 73 Hosting Expression = ws_promo_sk#86 IN dynamicpruning#9

Subquery:18 Hosting operator id = 73 Hosting Expression = ws_sold_date_sk#83 IN dynamicpruning#10


