== Physical Plan ==
TakeOrderedAndProject (81)
+- * Project (80)
   +- Window (79)
      +- * Sort (78)
         +- Exchange (77)
            +- * HashAggregate (76)
               +- Exchange (75)
                  +- * HashAggregate (74)
                     +- Union (73)
                        :- * HashAggregate (47)
                        :  +- * HashAggregate (46)
                        :     +- * Project (45)
                        :        +- * BroadcastHashJoin Inner BuildLeft (44)
                        :           :- BroadcastExchange (11)
                        :           :  +- * Project (10)
                        :           :     +- * BroadcastHashJoin Inner BuildLeft (9)
                        :           :        :- BroadcastExchange (4)
                        :           :        :  +- * Filter (3)
                        :           :        :     +- * ColumnarToRow (2)
                        :           :        :        +- Scan parquet default.store_sales (1)
                        :           :        +- * Project (8)
                        :           :           +- * Filter (7)
                        :           :              +- * ColumnarToRow (6)
                        :           :                 +- Scan parquet default.date_dim (5)
                        :           +- SortMergeJoin LeftSemi (43)
                        :              :- * Sort (16)
                        :              :  +- Exchange (15)
                        :              :     +- * Filter (14)
                        :              :        +- * ColumnarToRow (13)
                        :              :           +- Scan parquet default.store (12)
                        :              +- * Sort (42)
                        :                 +- Exchange (41)
                        :                    +- * Project (40)
                        :                       +- * Filter (39)
                        :                          +- Window (38)
                        :                             +- * Sort (37)
                        :                                +- Exchange (36)
                        :                                   +- * HashAggregate (35)
                        :                                      +- Exchange (34)
                        :                                         +- * HashAggregate (33)
                        :                                            +- * Project (32)
                        :                                               +- * BroadcastHashJoin Inner BuildRight (31)
                        :                                                  :- * Project (25)
                        :                                                  :  +- * BroadcastHashJoin Inner BuildLeft (24)
                        :                                                  :     :- BroadcastExchange (20)
                        :                                                  :     :  +- * Filter (19)
                        :                                                  :     :     +- * ColumnarToRow (18)
                        :                                                  :     :        +- Scan parquet default.store_sales (17)
                        :                                                  :     +- * Filter (23)
                        :                                                  :        +- * ColumnarToRow (22)
                        :                                                  :           +- Scan parquet default.store (21)
                        :                                                  +- BroadcastExchange (30)
                        :                                                     +- * Project (29)
                        :                                                        +- * Filter (28)
                        :                                                           +- * ColumnarToRow (27)
                        :                                                              +- Scan parquet default.date_dim (26)
                        :- * HashAggregate (59)
                        :  +- * HashAggregate (58)
                        :     +- * HashAggregate (57)
                        :        +- * HashAggregate (56)
                        :           +- * Project (55)
                        :              +- * BroadcastHashJoin Inner BuildLeft (54)
                        :                 :- ReusedExchange (48)
                        :                 +- SortMergeJoin LeftSemi (53)
                        :                    :- * Sort (50)
                        :                    :  +- ReusedExchange (49)
                        :                    +- * Sort (52)
                        :                       +- ReusedExchange (51)
                        +- * HashAggregate (72)
                           +- Exchange (71)
                              +- * HashAggregate (70)
                                 +- * HashAggregate (69)
                                    +- * HashAggregate (68)
                                       +- * Project (67)
                                          +- * BroadcastHashJoin Inner BuildLeft (66)
                                             :- ReusedExchange (60)
                                             +- SortMergeJoin LeftSemi (65)
                                                :- * Sort (62)
                                                :  +- ReusedExchange (61)
                                                +- * Sort (64)
                                                   +- ReusedExchange (63)


(1) Scan parquet default.store_sales
Output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]

(3) Filter [codegen id : 1]
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(4) BroadcastExchange
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#5]

(5) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_month_seq#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(6) ColumnarToRow
Input [2]: [d_date_sk#6, d_month_seq#7]

(7) Filter
Input [2]: [d_date_sk#6, d_month_seq#7]
Condition : (((isnotnull(d_month_seq#7) AND (d_month_seq#7 >= 1212)) AND (d_month_seq#7 <= 1223)) AND isnotnull(d_date_sk#6))

(8) Project
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_month_seq#7]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#6]
Join condition: None

(10) Project [codegen id : 2]
Output [2]: [ss_store_sk#1, ss_net_profit#2]
Input [4]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3, d_date_sk#6]

(11) BroadcastExchange
Input [2]: [ss_store_sk#1, ss_net_profit#2]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8]

(12) Scan parquet default.store
Output [3]: [s_store_sk#9, s_county#10, s_state#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_county:string,s_state:string>

(13) ColumnarToRow [codegen id : 3]
Input [3]: [s_store_sk#9, s_county#10, s_state#11]

(14) Filter [codegen id : 3]
Input [3]: [s_store_sk#9, s_county#10, s_state#11]
Condition : isnotnull(s_store_sk#9)

(15) Exchange
Input [3]: [s_store_sk#9, s_county#10, s_state#11]
Arguments: hashpartitioning(s_state#11, 5), ENSURE_REQUIREMENTS, [id=#12]

(16) Sort [codegen id : 4]
Input [3]: [s_store_sk#9, s_county#10, s_state#11]
Arguments: [s_state#11 ASC NULLS FIRST], false, 0

(17) Scan parquet default.store_sales
Output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>

(18) ColumnarToRow [codegen id : 5]
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]

(19) Filter [codegen id : 5]
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(20) BroadcastExchange
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13]

(21) Scan parquet default.store
Output [2]: [s_store_sk#9, s_state#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(22) ColumnarToRow
Input [2]: [s_store_sk#9, s_state#11]

(23) Filter
Input [2]: [s_store_sk#9, s_state#11]
Condition : isnotnull(s_store_sk#9)

(24) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#9]
Join condition: None

(25) Project [codegen id : 7]
Output [3]: [ss_net_profit#2, ss_sold_date_sk#3, s_state#11]
Input [5]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3, s_store_sk#9, s_state#11]

(26) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_month_seq#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(27) ColumnarToRow [codegen id : 6]
Input [2]: [d_date_sk#6, d_month_seq#7]

(28) Filter [codegen id : 6]
Input [2]: [d_date_sk#6, d_month_seq#7]
Condition : (((isnotnull(d_month_seq#7) AND (d_month_seq#7 >= 1212)) AND (d_month_seq#7 <= 1223)) AND isnotnull(d_date_sk#6))

(29) Project [codegen id : 6]
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_month_seq#7]

(30) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(31) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#6]
Join condition: None

(32) Project [codegen id : 7]
Output [2]: [ss_net_profit#2, s_state#11]
Input [4]: [ss_net_profit#2, ss_sold_date_sk#3, s_state#11, d_date_sk#6]

(33) HashAggregate [codegen id : 7]
Input [2]: [ss_net_profit#2, s_state#11]
Keys [1]: [s_state#11]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum#15]
Results [2]: [s_state#11, sum#16]

(34) Exchange
Input [2]: [s_state#11, sum#16]
Arguments: hashpartitioning(s_state#11, 5), ENSURE_REQUIREMENTS, [id=#17]

(35) HashAggregate [codegen id : 8]
Input [2]: [s_state#11, sum#16]
Keys [1]: [s_state#11]
Functions [1]: [sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#2))#18]
Results [3]: [s_state#11 AS s_state#19, s_state#11, MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#18,17,2) AS _w2#20]

(36) Exchange
Input [3]: [s_state#19, s_state#11, _w2#20]
Arguments: hashpartitioning(s_state#11, 5), ENSURE_REQUIREMENTS, [id=#21]

(37) Sort [codegen id : 9]
Input [3]: [s_state#19, s_state#11, _w2#20]
Arguments: [s_state#11 ASC NULLS FIRST, _w2#20 DESC NULLS LAST], false, 0

(38) Window
Input [3]: [s_state#19, s_state#11, _w2#20]
Arguments: [rank(_w2#20) windowspecdefinition(s_state#11, _w2#20 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#22], [s_state#11], [_w2#20 DESC NULLS LAST]

(39) Filter [codegen id : 10]
Input [4]: [s_state#19, s_state#11, _w2#20, ranking#22]
Condition : (isnotnull(ranking#22) AND (ranking#22 <= 5))

(40) Project [codegen id : 10]
Output [1]: [s_state#19]
Input [4]: [s_state#19, s_state#11, _w2#20, ranking#22]

(41) Exchange
Input [1]: [s_state#19]
Arguments: hashpartitioning(s_state#19, 5), ENSURE_REQUIREMENTS, [id=#23]

(42) Sort [codegen id : 11]
Input [1]: [s_state#19]
Arguments: [s_state#19 ASC NULLS FIRST], false, 0

(43) SortMergeJoin
Left keys [1]: [s_state#11]
Right keys [1]: [s_state#19]
Join condition: None

(44) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#9]
Join condition: None

(45) Project [codegen id : 12]
Output [3]: [ss_net_profit#2, s_county#10, s_state#11]
Input [5]: [ss_store_sk#1, ss_net_profit#2, s_store_sk#9, s_county#10, s_state#11]

(46) HashAggregate [codegen id : 12]
Input [3]: [ss_net_profit#2, s_county#10, s_state#11]
Keys [2]: [s_state#11, s_county#10]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum#24]
Results [3]: [s_state#11, s_county#10, sum#25]

(47) HashAggregate [codegen id : 12]
Input [3]: [s_state#11, s_county#10, sum#25]
Keys [2]: [s_state#11, s_county#10]
Functions [1]: [sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#2))#26]
Results [6]: [cast(MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#26,17,2) as decimal(27,2)) AS total_sum#27, s_state#11, s_county#10, 0 AS g_state#28, 0 AS g_county#29, 0 AS lochierarchy#30]

(48) ReusedExchange [Reuses operator id: unknown]
Output [2]: [ss_store_sk#1, ss_net_profit#2]

(49) ReusedExchange [Reuses operator id: 15]
Output [3]: [s_store_sk#9, s_county#10, s_state#11]

(50) Sort [codegen id : 16]
Input [3]: [s_store_sk#9, s_county#10, s_state#11]
Arguments: [s_state#11 ASC NULLS FIRST], false, 0

(51) ReusedExchange [Reuses operator id: unknown]
Output [1]: [s_state#19]

(52) Sort [codegen id : 23]
Input [1]: [s_state#19]
Arguments: [s_state#19 ASC NULLS FIRST], false, 0

(53) SortMergeJoin
Left keys [1]: [s_state#11]
Right keys [1]: [s_state#19]
Join condition: None

(54) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#9]
Join condition: None

(55) Project [codegen id : 24]
Output [3]: [ss_net_profit#2, s_county#10, s_state#11]
Input [5]: [ss_store_sk#1, ss_net_profit#2, s_store_sk#9, s_county#10, s_state#11]

(56) HashAggregate [codegen id : 24]
Input [3]: [ss_net_profit#2, s_county#10, s_state#11]
Keys [2]: [s_state#11, s_county#10]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum#31]
Results [3]: [s_state#11, s_county#10, sum#32]

(57) HashAggregate [codegen id : 24]
Input [3]: [s_state#11, s_county#10, sum#32]
Keys [2]: [s_state#11, s_county#10]
Functions [1]: [sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#2))#33]
Results [2]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#33,17,2) AS total_sum#34, s_state#11]

(58) HashAggregate [codegen id : 24]
Input [2]: [total_sum#34, s_state#11]
Keys [1]: [s_state#11]
Functions [1]: [partial_sum(total_sum#34)]
Aggregate Attributes [2]: [sum#35, isEmpty#36]
Results [3]: [s_state#11, sum#37, isEmpty#38]

(59) HashAggregate [codegen id : 24]
Input [3]: [s_state#11, sum#37, isEmpty#38]
Keys [1]: [s_state#11]
Functions [1]: [sum(total_sum#34)]
Aggregate Attributes [1]: [sum(total_sum#34)#39]
Results [6]: [sum(total_sum#34)#39 AS total_sum#40, s_state#11, null AS s_county#41, 0 AS g_state#42, 1 AS g_county#43, 1 AS lochierarchy#44]

(60) ReusedExchange [Reuses operator id: unknown]
Output [2]: [ss_store_sk#1, ss_net_profit#2]

(61) ReusedExchange [Reuses operator id: 15]
Output [3]: [s_store_sk#9, s_county#10, s_state#11]

(62) Sort [codegen id : 28]
Input [3]: [s_store_sk#9, s_county#10, s_state#11]
Arguments: [s_state#11 ASC NULLS FIRST], false, 0

(63) ReusedExchange [Reuses operator id: unknown]
Output [1]: [s_state#19]

(64) Sort [codegen id : 35]
Input [1]: [s_state#19]
Arguments: [s_state#19 ASC NULLS FIRST], false, 0

(65) SortMergeJoin
Left keys [1]: [s_state#11]
Right keys [1]: [s_state#19]
Join condition: None

(66) BroadcastHashJoin [codegen id : 36]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#9]
Join condition: None

(67) Project [codegen id : 36]
Output [3]: [ss_net_profit#2, s_county#10, s_state#11]
Input [5]: [ss_store_sk#1, ss_net_profit#2, s_store_sk#9, s_county#10, s_state#11]

(68) HashAggregate [codegen id : 36]
Input [3]: [ss_net_profit#2, s_county#10, s_state#11]
Keys [2]: [s_state#11, s_county#10]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum#45]
Results [3]: [s_state#11, s_county#10, sum#46]

(69) HashAggregate [codegen id : 36]
Input [3]: [s_state#11, s_county#10, sum#46]
Keys [2]: [s_state#11, s_county#10]
Functions [1]: [sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#2))#47]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#47,17,2) AS total_sum#34]

(70) HashAggregate [codegen id : 36]
Input [1]: [total_sum#34]
Keys: []
Functions [1]: [partial_sum(total_sum#34)]
Aggregate Attributes [2]: [sum#48, isEmpty#49]
Results [2]: [sum#50, isEmpty#51]

(71) Exchange
Input [2]: [sum#50, isEmpty#51]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#52]

(72) HashAggregate [codegen id : 37]
Input [2]: [sum#50, isEmpty#51]
Keys: []
Functions [1]: [sum(total_sum#34)]
Aggregate Attributes [1]: [sum(total_sum#34)#53]
Results [6]: [sum(total_sum#34)#53 AS total_sum#54, null AS s_state#55, null AS s_county#56, 1 AS g_state#57, 1 AS g_county#58, 2 AS lochierarchy#59]

(73) Union

(74) HashAggregate [codegen id : 38]
Input [6]: [total_sum#27, s_state#11, s_county#10, g_state#28, g_county#29, lochierarchy#30]
Keys [6]: [total_sum#27, s_state#11, s_county#10, g_state#28, g_county#29, lochierarchy#30]
Functions: []
Aggregate Attributes: []
Results [6]: [total_sum#27, s_state#11, s_county#10, g_state#28, g_county#29, lochierarchy#30]

(75) Exchange
Input [6]: [total_sum#27, s_state#11, s_county#10, g_state#28, g_county#29, lochierarchy#30]
Arguments: hashpartitioning(total_sum#27, s_state#11, s_county#10, g_state#28, g_county#29, lochierarchy#30, 5), ENSURE_REQUIREMENTS, [id=#60]

(76) HashAggregate [codegen id : 39]
Input [6]: [total_sum#27, s_state#11, s_county#10, g_state#28, g_county#29, lochierarchy#30]
Keys [6]: [total_sum#27, s_state#11, s_county#10, g_state#28, g_county#29, lochierarchy#30]
Functions: []
Aggregate Attributes: []
Results [5]: [total_sum#27, s_state#11, s_county#10, lochierarchy#30, CASE WHEN (g_county#29 = 0) THEN s_state#11 END AS _w0#61]

(77) Exchange
Input [5]: [total_sum#27, s_state#11, s_county#10, lochierarchy#30, _w0#61]
Arguments: hashpartitioning(lochierarchy#30, _w0#61, 5), ENSURE_REQUIREMENTS, [id=#62]

(78) Sort [codegen id : 40]
Input [5]: [total_sum#27, s_state#11, s_county#10, lochierarchy#30, _w0#61]
Arguments: [lochierarchy#30 ASC NULLS FIRST, _w0#61 ASC NULLS FIRST, total_sum#27 DESC NULLS LAST], false, 0

(79) Window
Input [5]: [total_sum#27, s_state#11, s_county#10, lochierarchy#30, _w0#61]
Arguments: [rank(total_sum#27) windowspecdefinition(lochierarchy#30, _w0#61, total_sum#27 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#63], [lochierarchy#30, _w0#61], [total_sum#27 DESC NULLS LAST]

(80) Project [codegen id : 41]
Output [5]: [total_sum#27, s_state#11, s_county#10, lochierarchy#30, rank_within_parent#63]
Input [6]: [total_sum#27, s_state#11, s_county#10, lochierarchy#30, _w0#61, rank_within_parent#63]

(81) TakeOrderedAndProject
Input [5]: [total_sum#27, s_state#11, s_county#10, lochierarchy#30, rank_within_parent#63]
Arguments: 100, [lochierarchy#30 DESC NULLS LAST, CASE WHEN (lochierarchy#30 = 0) THEN s_state#11 END ASC NULLS FIRST, rank_within_parent#63 ASC NULLS FIRST], [total_sum#27, s_state#11, s_county#10, lochierarchy#30, rank_within_parent#63]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
ReusedExchange (82)


(82) ReusedExchange [Reuses operator id: 30]
Output [1]: [d_date_sk#6]

Subquery:2 Hosting operator id = 17 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4


