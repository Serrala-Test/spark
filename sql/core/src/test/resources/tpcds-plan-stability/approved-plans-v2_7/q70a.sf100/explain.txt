== Physical Plan ==
TakeOrderedAndProject (65)
+- * Project (64)
   +- Window (63)
      +- * Sort (62)
         +- Exchange (61)
            +- * HashAggregate (60)
               +- Exchange (59)
                  +- * HashAggregate (58)
                     +- Union (57)
                        :- * HashAggregate (46)
                        :  +- Exchange (45)
                        :     +- * HashAggregate (44)
                        :        +- * Project (43)
                        :           +- * BroadcastHashJoin Inner BuildRight (42)
                        :              :- * Project (10)
                        :              :  +- * BroadcastHashJoin Inner BuildRight (9)
                        :              :     :- * Filter (3)
                        :              :     :  +- * ColumnarToRow (2)
                        :              :     :     +- Scan parquet default.store_sales (1)
                        :              :     +- BroadcastExchange (8)
                        :              :        +- * Project (7)
                        :              :           +- * Filter (6)
                        :              :              +- * ColumnarToRow (5)
                        :              :                 +- Scan parquet default.date_dim (4)
                        :              +- BroadcastExchange (41)
                        :                 +- * Project (40)
                        :                    +- SortMergeJoin LeftSemi (39)
                        :                       :- * Sort (15)
                        :                       :  +- Exchange (14)
                        :                       :     +- * Filter (13)
                        :                       :        +- * ColumnarToRow (12)
                        :                       :           +- Scan parquet default.store (11)
                        :                       +- * Sort (38)
                        :                          +- Exchange (37)
                        :                             +- * Project (36)
                        :                                +- * Filter (35)
                        :                                   +- Window (34)
                        :                                      +- * Sort (33)
                        :                                         +- Exchange (32)
                        :                                            +- * HashAggregate (31)
                        :                                               +- Exchange (30)
                        :                                                  +- * HashAggregate (29)
                        :                                                     +- * Project (28)
                        :                                                        +- * BroadcastHashJoin Inner BuildRight (27)
                        :                                                           :- * Project (21)
                        :                                                           :  +- * BroadcastHashJoin Inner BuildRight (20)
                        :                                                           :     :- * Filter (18)
                        :                                                           :     :  +- * ColumnarToRow (17)
                        :                                                           :     :     +- Scan parquet default.store_sales (16)
                        :                                                           :     +- ReusedExchange (19)
                        :                                                           +- BroadcastExchange (26)
                        :                                                              +- * Project (25)
                        :                                                                 +- * Filter (24)
                        :                                                                    +- * ColumnarToRow (23)
                        :                                                                       +- Scan parquet default.store (22)
                        :- * HashAggregate (51)
                        :  +- Exchange (50)
                        :     +- * HashAggregate (49)
                        :        +- * HashAggregate (48)
                        :           +- ReusedExchange (47)
                        +- * HashAggregate (56)
                           +- Exchange (55)
                              +- * HashAggregate (54)
                                 +- * HashAggregate (53)
                                    +- ReusedExchange (52)


(1) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 12]
Input [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]

(3) Filter [codegen id : 12]
Input [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
Condition : (isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_store_sk#2))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#4, d_month_seq#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#4, d_month_seq#5]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#4, d_month_seq#5]
Condition : (((isnotnull(d_month_seq#5) AND (d_month_seq#5 >= 1212)) AND (d_month_seq#5 <= 1223)) AND isnotnull(d_date_sk#4))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#4]
Input [2]: [d_date_sk#4, d_month_seq#5]

(8) BroadcastExchange
Input [1]: [d_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#6]

(9) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#4]
Join condition: None

(10) Project [codegen id : 12]
Output [2]: [ss_store_sk#2, ss_net_profit#3]
Input [4]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3, d_date_sk#4]

(11) Scan parquet default.store
Output [3]: [s_store_sk#7, s_county#8, s_state#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_county:string,s_state:string>

(12) ColumnarToRow [codegen id : 2]
Input [3]: [s_store_sk#7, s_county#8, s_state#9]

(13) Filter [codegen id : 2]
Input [3]: [s_store_sk#7, s_county#8, s_state#9]
Condition : isnotnull(s_store_sk#7)

(14) Exchange
Input [3]: [s_store_sk#7, s_county#8, s_state#9]
Arguments: hashpartitioning(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#9, 2, false, true), 5), ENSURE_REQUIREMENTS, [id=#10]

(15) Sort [codegen id : 3]
Input [3]: [s_store_sk#7, s_county#8, s_state#9]
Arguments: [staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#9, 2, false, true) ASC NULLS FIRST], false, 0

(16) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>

(17) ColumnarToRow [codegen id : 6]
Input [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]

(18) Filter [codegen id : 6]
Input [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
Condition : (isnotnull(ss_store_sk#2) AND isnotnull(ss_sold_date_sk#1))

(19) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#4]

(20) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#4]
Join condition: None

(21) Project [codegen id : 6]
Output [2]: [ss_store_sk#2, ss_net_profit#3]
Input [4]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3, d_date_sk#4]

(22) Scan parquet default.store
Output [2]: [s_store_sk#7, s_state#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(23) ColumnarToRow [codegen id : 5]
Input [2]: [s_store_sk#7, s_state#9]

(24) Filter [codegen id : 5]
Input [2]: [s_store_sk#7, s_state#9]
Condition : isnotnull(s_store_sk#7)

(25) Project [codegen id : 5]
Output [2]: [s_store_sk#7, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#9, 2, false, true) AS s_state#11]
Input [2]: [s_store_sk#7, s_state#9]

(26) BroadcastExchange
Input [2]: [s_store_sk#7, s_state#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(27) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#7]
Join condition: None

(28) Project [codegen id : 6]
Output [2]: [ss_net_profit#3, s_state#11]
Input [4]: [ss_store_sk#2, ss_net_profit#3, s_store_sk#7, s_state#11]

(29) HashAggregate [codegen id : 6]
Input [2]: [ss_net_profit#3, s_state#11]
Keys [1]: [s_state#11]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum#13]
Results [2]: [s_state#11, sum#14]

(30) Exchange
Input [2]: [s_state#11, sum#14]
Arguments: hashpartitioning(s_state#11, 5), ENSURE_REQUIREMENTS, [id=#15]

(31) HashAggregate [codegen id : 7]
Input [2]: [s_state#11, sum#14]
Keys [1]: [s_state#11]
Functions [1]: [sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#3))#16]
Results [3]: [s_state#11 AS s_state#17, s_state#11, MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#16,17,2) AS _w2#18]

(32) Exchange
Input [3]: [s_state#17, s_state#11, _w2#18]
Arguments: hashpartitioning(s_state#11, 5), ENSURE_REQUIREMENTS, [id=#19]

(33) Sort [codegen id : 8]
Input [3]: [s_state#17, s_state#11, _w2#18]
Arguments: [s_state#11 ASC NULLS FIRST, _w2#18 DESC NULLS LAST], false, 0

(34) Window
Input [3]: [s_state#17, s_state#11, _w2#18]
Arguments: [rank(_w2#18) windowspecdefinition(s_state#11, _w2#18 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#20], [s_state#11], [_w2#18 DESC NULLS LAST]

(35) Filter [codegen id : 9]
Input [4]: [s_state#17, s_state#11, _w2#18, ranking#20]
Condition : (isnotnull(ranking#20) AND (ranking#20 <= 5))

(36) Project [codegen id : 9]
Output [1]: [s_state#17]
Input [4]: [s_state#17, s_state#11, _w2#18, ranking#20]

(37) Exchange
Input [1]: [s_state#17]
Arguments: hashpartitioning(s_state#17, 5), ENSURE_REQUIREMENTS, [id=#21]

(38) Sort [codegen id : 10]
Input [1]: [s_state#17]
Arguments: [s_state#17 ASC NULLS FIRST], false, 0

(39) SortMergeJoin
Left keys [1]: [staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#9, 2, false, true)]
Right keys [1]: [s_state#17]
Join condition: None

(40) Project [codegen id : 11]
Output [3]: [s_store_sk#7, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_county#8, 30, false, true) AS s_county#22, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#9, 2, false, true) AS s_state#23]
Input [3]: [s_store_sk#7, s_county#8, s_state#9]

(41) BroadcastExchange
Input [3]: [s_store_sk#7, s_county#22, s_state#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#24]

(42) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#7]
Join condition: None

(43) Project [codegen id : 12]
Output [3]: [ss_net_profit#3, s_county#22, s_state#23]
Input [5]: [ss_store_sk#2, ss_net_profit#3, s_store_sk#7, s_county#22, s_state#23]

(44) HashAggregate [codegen id : 12]
Input [3]: [ss_net_profit#3, s_county#22, s_state#23]
Keys [2]: [s_state#23, s_county#22]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum#25]
Results [3]: [s_state#23, s_county#22, sum#26]

(45) Exchange
Input [3]: [s_state#23, s_county#22, sum#26]
Arguments: hashpartitioning(s_state#23, s_county#22, 5), ENSURE_REQUIREMENTS, [id=#27]

(46) HashAggregate [codegen id : 13]
Input [3]: [s_state#23, s_county#22, sum#26]
Keys [2]: [s_state#23, s_county#22]
Functions [1]: [sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#3))#28]
Results [6]: [cast(MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#28,17,2) as decimal(27,2)) AS total_sum#29, s_state#23, s_county#22, 0 AS g_state#30, 0 AS g_county#31, 0 AS lochierarchy#32]

(47) ReusedExchange [Reuses operator id: 45]
Output [3]: [s_state#33, s_county#34, sum#35]

(48) HashAggregate [codegen id : 26]
Input [3]: [s_state#33, s_county#34, sum#35]
Keys [2]: [s_state#33, s_county#34]
Functions [1]: [sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#3))#36]
Results [2]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#36,17,2) AS total_sum#37, s_state#33]

(49) HashAggregate [codegen id : 26]
Input [2]: [total_sum#37, s_state#33]
Keys [1]: [s_state#33]
Functions [1]: [partial_sum(total_sum#37)]
Aggregate Attributes [2]: [sum#38, isEmpty#39]
Results [3]: [s_state#33, sum#40, isEmpty#41]

(50) Exchange
Input [3]: [s_state#33, sum#40, isEmpty#41]
Arguments: hashpartitioning(s_state#33, 5), ENSURE_REQUIREMENTS, [id=#42]

(51) HashAggregate [codegen id : 27]
Input [3]: [s_state#33, sum#40, isEmpty#41]
Keys [1]: [s_state#33]
Functions [1]: [sum(total_sum#37)]
Aggregate Attributes [1]: [sum(total_sum#37)#43]
Results [6]: [sum(total_sum#37)#43 AS total_sum#44, s_state#33 AS s_state#45, null AS s_county#46, 0 AS g_state#47, 1 AS g_county#48, 1 AS lochierarchy#49]

(52) ReusedExchange [Reuses operator id: 45]
Output [3]: [s_state#50, s_county#51, sum#52]

(53) HashAggregate [codegen id : 40]
Input [3]: [s_state#50, s_county#51, sum#52]
Keys [2]: [s_state#50, s_county#51]
Functions [1]: [sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#3))#53]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#53,17,2) AS total_sum#37]

(54) HashAggregate [codegen id : 40]
Input [1]: [total_sum#37]
Keys: []
Functions [1]: [partial_sum(total_sum#37)]
Aggregate Attributes [2]: [sum#54, isEmpty#55]
Results [2]: [sum#56, isEmpty#57]

(55) Exchange
Input [2]: [sum#56, isEmpty#57]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#58]

(56) HashAggregate [codegen id : 41]
Input [2]: [sum#56, isEmpty#57]
Keys: []
Functions [1]: [sum(total_sum#37)]
Aggregate Attributes [1]: [sum(total_sum#37)#59]
Results [6]: [sum(total_sum#37)#59 AS total_sum#60, null AS s_state#61, null AS s_county#62, 1 AS g_state#63, 1 AS g_county#64, 2 AS lochierarchy#65]

(57) Union

(58) HashAggregate [codegen id : 42]
Input [6]: [total_sum#29, s_state#23, s_county#22, g_state#30, g_county#31, lochierarchy#32]
Keys [6]: [total_sum#29, s_state#23, s_county#22, g_state#30, g_county#31, lochierarchy#32]
Functions: []
Aggregate Attributes: []
Results [6]: [total_sum#29, s_state#23, s_county#22, g_state#30, g_county#31, lochierarchy#32]

(59) Exchange
Input [6]: [total_sum#29, s_state#23, s_county#22, g_state#30, g_county#31, lochierarchy#32]
Arguments: hashpartitioning(total_sum#29, s_state#23, s_county#22, g_state#30, g_county#31, lochierarchy#32, 5), ENSURE_REQUIREMENTS, [id=#66]

(60) HashAggregate [codegen id : 43]
Input [6]: [total_sum#29, s_state#23, s_county#22, g_state#30, g_county#31, lochierarchy#32]
Keys [6]: [total_sum#29, s_state#23, s_county#22, g_state#30, g_county#31, lochierarchy#32]
Functions: []
Aggregate Attributes: []
Results [5]: [total_sum#29, s_state#23, s_county#22, lochierarchy#32, CASE WHEN (g_county#31 = 0) THEN s_state#23 END AS _w0#67]

(61) Exchange
Input [5]: [total_sum#29, s_state#23, s_county#22, lochierarchy#32, _w0#67]
Arguments: hashpartitioning(lochierarchy#32, _w0#67, 5), ENSURE_REQUIREMENTS, [id=#68]

(62) Sort [codegen id : 44]
Input [5]: [total_sum#29, s_state#23, s_county#22, lochierarchy#32, _w0#67]
Arguments: [lochierarchy#32 ASC NULLS FIRST, _w0#67 ASC NULLS FIRST, total_sum#29 DESC NULLS LAST], false, 0

(63) Window
Input [5]: [total_sum#29, s_state#23, s_county#22, lochierarchy#32, _w0#67]
Arguments: [rank(total_sum#29) windowspecdefinition(lochierarchy#32, _w0#67, total_sum#29 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#69], [lochierarchy#32, _w0#67], [total_sum#29 DESC NULLS LAST]

(64) Project [codegen id : 45]
Output [5]: [total_sum#29, s_state#23, s_county#22, lochierarchy#32, rank_within_parent#69]
Input [6]: [total_sum#29, s_state#23, s_county#22, lochierarchy#32, _w0#67, rank_within_parent#69]

(65) TakeOrderedAndProject
Input [5]: [total_sum#29, s_state#23, s_county#22, lochierarchy#32, rank_within_parent#69]
Arguments: 100, [lochierarchy#32 DESC NULLS LAST, CASE WHEN (lochierarchy#32 = 0) THEN s_state#23 END ASC NULLS FIRST, rank_within_parent#69 ASC NULLS FIRST], [total_sum#29, s_state#23, s_county#22, lochierarchy#32, rank_within_parent#69]

