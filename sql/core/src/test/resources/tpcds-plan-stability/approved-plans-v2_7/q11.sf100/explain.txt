== Physical Plan ==
TakeOrderedAndProject (80)
+- * Project (79)
   +- * SortMergeJoin Inner (78)
      :- * Project (63)
      :  +- * SortMergeJoin Inner (62)
      :     :- * SortMergeJoin Inner (42)
      :     :  :- * Sort (24)
      :     :  :  +- Exchange (23)
      :     :  :     +- * Filter (22)
      :     :  :        +- * HashAggregate (21)
      :     :  :           +- Exchange (20)
      :     :  :              +- * HashAggregate (19)
      :     :  :                 +- * Project (18)
      :     :  :                    +- * BroadcastHashJoin Inner BuildRight (17)
      :     :  :                       :- * Project (12)
      :     :  :                       :  +- * SortMergeJoin Inner (11)
      :     :  :                       :     :- * Sort (5)
      :     :  :                       :     :  +- Exchange (4)
      :     :  :                       :     :     +- * Filter (3)
      :     :  :                       :     :        +- * ColumnarToRow (2)
      :     :  :                       :     :           +- Scan parquet default.customer (1)
      :     :  :                       :     +- * Sort (10)
      :     :  :                       :        +- Exchange (9)
      :     :  :                       :           +- * Filter (8)
      :     :  :                       :              +- * ColumnarToRow (7)
      :     :  :                       :                 +- Scan parquet default.store_sales (6)
      :     :  :                       +- BroadcastExchange (16)
      :     :  :                          +- * Filter (15)
      :     :  :                             +- * ColumnarToRow (14)
      :     :  :                                +- Scan parquet default.date_dim (13)
      :     :  +- * Sort (41)
      :     :     +- Exchange (40)
      :     :        +- * HashAggregate (39)
      :     :           +- Exchange (38)
      :     :              +- * HashAggregate (37)
      :     :                 +- * Project (36)
      :     :                    +- * BroadcastHashJoin Inner BuildRight (35)
      :     :                       :- * Project (30)
      :     :                       :  +- * SortMergeJoin Inner (29)
      :     :                       :     :- * Sort (26)
      :     :                       :     :  +- ReusedExchange (25)
      :     :                       :     +- * Sort (28)
      :     :                       :        +- ReusedExchange (27)
      :     :                       +- BroadcastExchange (34)
      :     :                          +- * Filter (33)
      :     :                             +- * ColumnarToRow (32)
      :     :                                +- Scan parquet default.date_dim (31)
      :     +- * Sort (61)
      :        +- Exchange (60)
      :           +- * Project (59)
      :              +- * Filter (58)
      :                 +- * HashAggregate (57)
      :                    +- Exchange (56)
      :                       +- * HashAggregate (55)
      :                          +- * Project (54)
      :                             +- * BroadcastHashJoin Inner BuildRight (53)
      :                                :- * Project (51)
      :                                :  +- * SortMergeJoin Inner (50)
      :                                :     :- * Sort (44)
      :                                :     :  +- ReusedExchange (43)
      :                                :     +- * Sort (49)
      :                                :        +- Exchange (48)
      :                                :           +- * Filter (47)
      :                                :              +- * ColumnarToRow (46)
      :                                :                 +- Scan parquet default.web_sales (45)
      :                                +- ReusedExchange (52)
      +- * Sort (77)
         +- Exchange (76)
            +- * HashAggregate (75)
               +- Exchange (74)
                  +- * HashAggregate (73)
                     +- * Project (72)
                        +- * BroadcastHashJoin Inner BuildRight (71)
                           :- * Project (69)
                           :  +- * SortMergeJoin Inner (68)
                           :     :- * Sort (65)
                           :     :  +- ReusedExchange (64)
                           :     +- * Sort (67)
                           :        +- ReusedExchange (66)
                           +- ReusedExchange (70)


(1) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(2) ColumnarToRow [codegen id : 1]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(3) Filter [codegen id : 1]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(4) Exchange
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Arguments: hashpartitioning(c_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#9]

(5) Sort [codegen id : 2]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#10, ss_customer_sk#11, ss_ext_discount_amt#12, ss_ext_list_price#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(7) ColumnarToRow [codegen id : 3]
Input [4]: [ss_sold_date_sk#10, ss_customer_sk#11, ss_ext_discount_amt#12, ss_ext_list_price#13]

(8) Filter [codegen id : 3]
Input [4]: [ss_sold_date_sk#10, ss_customer_sk#11, ss_ext_discount_amt#12, ss_ext_list_price#13]
Condition : (isnotnull(ss_customer_sk#11) AND isnotnull(ss_sold_date_sk#10))

(9) Exchange
Input [4]: [ss_sold_date_sk#10, ss_customer_sk#11, ss_ext_discount_amt#12, ss_ext_list_price#13]
Arguments: hashpartitioning(ss_customer_sk#11, 5), ENSURE_REQUIREMENTS, [id=#14]

(10) Sort [codegen id : 4]
Input [4]: [ss_sold_date_sk#10, ss_customer_sk#11, ss_ext_discount_amt#12, ss_ext_list_price#13]
Arguments: [ss_customer_sk#11 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 6]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#11]
Join condition: None

(12) Project [codegen id : 6]
Output [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_sold_date_sk#10, ss_ext_discount_amt#12, ss_ext_list_price#13]
Input [12]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_sold_date_sk#10, ss_customer_sk#11, ss_ext_discount_amt#12, ss_ext_list_price#13]

(13) Scan parquet default.date_dim
Output [2]: [d_date_sk#15, d_year#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(14) ColumnarToRow [codegen id : 5]
Input [2]: [d_date_sk#15, d_year#16]

(15) Filter [codegen id : 5]
Input [2]: [d_date_sk#15, d_year#16]
Condition : ((isnotnull(d_year#16) AND (d_year#16 = 2001)) AND isnotnull(d_date_sk#15))

(16) BroadcastExchange
Input [2]: [d_date_sk#15, d_year#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#17]

(17) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#10]
Right keys [1]: [d_date_sk#15]
Join condition: None

(18) Project [codegen id : 6]
Output [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#12, ss_ext_list_price#13, d_year#16]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_sold_date_sk#10, ss_ext_discount_amt#12, ss_ext_list_price#13, d_date_sk#15, d_year#16]

(19) HashAggregate [codegen id : 6]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#12, ss_ext_list_price#13, d_year#16]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#13 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#12 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#18]
Results [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, sum#19]

(20) Exchange
Input [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, sum#19]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, 5), ENSURE_REQUIREMENTS, [id=#20]

(21) HashAggregate [codegen id : 7]
Input [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, sum#19]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#13 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#12 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#13 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#12 as decimal(8,2)))), DecimalType(8,2), true)))#21]
Results [2]: [c_customer_id#2 AS customer_id#22, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#13 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#12 as decimal(8,2)))), DecimalType(8,2), true)))#21,18,2) AS year_total#23]

(22) Filter [codegen id : 7]
Input [2]: [customer_id#22, year_total#23]
Condition : (isnotnull(year_total#23) AND (year_total#23 > 0.00))

(23) Exchange
Input [2]: [customer_id#22, year_total#23]
Arguments: hashpartitioning(customer_id#22, 5), ENSURE_REQUIREMENTS, [id=#24]

(24) Sort [codegen id : 8]
Input [2]: [customer_id#22, year_total#23]
Arguments: [customer_id#22 ASC NULLS FIRST], false, 0

(25) ReusedExchange [Reuses operator id: 4]
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(26) Sort [codegen id : 10]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(27) ReusedExchange [Reuses operator id: 9]
Output [4]: [ss_sold_date_sk#10, ss_customer_sk#11, ss_ext_discount_amt#12, ss_ext_list_price#13]

(28) Sort [codegen id : 12]
Input [4]: [ss_sold_date_sk#10, ss_customer_sk#11, ss_ext_discount_amt#12, ss_ext_list_price#13]
Arguments: [ss_customer_sk#11 ASC NULLS FIRST], false, 0

(29) SortMergeJoin [codegen id : 14]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#11]
Join condition: None

(30) Project [codegen id : 14]
Output [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_sold_date_sk#10, ss_ext_discount_amt#12, ss_ext_list_price#13]
Input [12]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_sold_date_sk#10, ss_customer_sk#11, ss_ext_discount_amt#12, ss_ext_list_price#13]

(31) Scan parquet default.date_dim
Output [2]: [d_date_sk#15, d_year#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(32) ColumnarToRow [codegen id : 13]
Input [2]: [d_date_sk#15, d_year#16]

(33) Filter [codegen id : 13]
Input [2]: [d_date_sk#15, d_year#16]
Condition : ((isnotnull(d_year#16) AND (d_year#16 = 2002)) AND isnotnull(d_date_sk#15))

(34) BroadcastExchange
Input [2]: [d_date_sk#15, d_year#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#25]

(35) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ss_sold_date_sk#10]
Right keys [1]: [d_date_sk#15]
Join condition: None

(36) Project [codegen id : 14]
Output [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#12, ss_ext_list_price#13, d_year#16]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_sold_date_sk#10, ss_ext_discount_amt#12, ss_ext_list_price#13, d_date_sk#15, d_year#16]

(37) HashAggregate [codegen id : 14]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#12, ss_ext_list_price#13, d_year#16]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#13 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#12 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#26]
Results [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, sum#27]

(38) Exchange
Input [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, sum#27]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, 5), ENSURE_REQUIREMENTS, [id=#28]

(39) HashAggregate [codegen id : 15]
Input [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, sum#27]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#13 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#12 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#13 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#12 as decimal(8,2)))), DecimalType(8,2), true)))#29]
Results [5]: [c_customer_id#2 AS customer_id#30, c_first_name#3 AS customer_first_name#31, c_last_name#4 AS customer_last_name#32, c_email_address#8 AS customer_email_address#33, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#13 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#12 as decimal(8,2)))), DecimalType(8,2), true)))#29,18,2) AS year_total#34]

(40) Exchange
Input [5]: [customer_id#30, customer_first_name#31, customer_last_name#32, customer_email_address#33, year_total#34]
Arguments: hashpartitioning(customer_id#30, 5), ENSURE_REQUIREMENTS, [id=#35]

(41) Sort [codegen id : 16]
Input [5]: [customer_id#30, customer_first_name#31, customer_last_name#32, customer_email_address#33, year_total#34]
Arguments: [customer_id#30 ASC NULLS FIRST], false, 0

(42) SortMergeJoin [codegen id : 17]
Left keys [1]: [customer_id#22]
Right keys [1]: [customer_id#30]
Join condition: None

(43) ReusedExchange [Reuses operator id: 4]
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(44) Sort [codegen id : 19]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(45) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#36, ws_bill_customer_sk#37, ws_ext_discount_amt#38, ws_ext_list_price#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(46) ColumnarToRow [codegen id : 20]
Input [4]: [ws_sold_date_sk#36, ws_bill_customer_sk#37, ws_ext_discount_amt#38, ws_ext_list_price#39]

(47) Filter [codegen id : 20]
Input [4]: [ws_sold_date_sk#36, ws_bill_customer_sk#37, ws_ext_discount_amt#38, ws_ext_list_price#39]
Condition : (isnotnull(ws_bill_customer_sk#37) AND isnotnull(ws_sold_date_sk#36))

(48) Exchange
Input [4]: [ws_sold_date_sk#36, ws_bill_customer_sk#37, ws_ext_discount_amt#38, ws_ext_list_price#39]
Arguments: hashpartitioning(ws_bill_customer_sk#37, 5), ENSURE_REQUIREMENTS, [id=#40]

(49) Sort [codegen id : 21]
Input [4]: [ws_sold_date_sk#36, ws_bill_customer_sk#37, ws_ext_discount_amt#38, ws_ext_list_price#39]
Arguments: [ws_bill_customer_sk#37 ASC NULLS FIRST], false, 0

(50) SortMergeJoin [codegen id : 23]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#37]
Join condition: None

(51) Project [codegen id : 23]
Output [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_sold_date_sk#36, ws_ext_discount_amt#38, ws_ext_list_price#39]
Input [12]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_sold_date_sk#36, ws_bill_customer_sk#37, ws_ext_discount_amt#38, ws_ext_list_price#39]

(52) ReusedExchange [Reuses operator id: 16]
Output [2]: [d_date_sk#15, d_year#16]

(53) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [ws_sold_date_sk#36]
Right keys [1]: [d_date_sk#15]
Join condition: None

(54) Project [codegen id : 23]
Output [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#38, ws_ext_list_price#39, d_year#16]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_sold_date_sk#36, ws_ext_discount_amt#38, ws_ext_list_price#39, d_date_sk#15, d_year#16]

(55) HashAggregate [codegen id : 23]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#38, ws_ext_list_price#39, d_year#16]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#16]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#39 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#38 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#41]
Results [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#16, sum#42]

(56) Exchange
Input [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#16, sum#42]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#16, 5), ENSURE_REQUIREMENTS, [id=#43]

(57) HashAggregate [codegen id : 24]
Input [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#16, sum#42]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#16]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#39 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#38 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#39 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#38 as decimal(8,2)))), DecimalType(8,2), true)))#44]
Results [2]: [c_customer_id#2 AS customer_id#45, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#39 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#38 as decimal(8,2)))), DecimalType(8,2), true)))#44,18,2) AS year_total#46]

(58) Filter [codegen id : 24]
Input [2]: [customer_id#45, year_total#46]
Condition : (isnotnull(year_total#46) AND (year_total#46 > 0.00))

(59) Project [codegen id : 24]
Output [2]: [customer_id#45 AS customer_id#47, year_total#46 AS year_total#48]
Input [2]: [customer_id#45, year_total#46]

(60) Exchange
Input [2]: [customer_id#47, year_total#48]
Arguments: hashpartitioning(customer_id#47, 5), ENSURE_REQUIREMENTS, [id=#49]

(61) Sort [codegen id : 25]
Input [2]: [customer_id#47, year_total#48]
Arguments: [customer_id#47 ASC NULLS FIRST], false, 0

(62) SortMergeJoin [codegen id : 26]
Left keys [1]: [customer_id#22]
Right keys [1]: [customer_id#47]
Join condition: None

(63) Project [codegen id : 26]
Output [8]: [customer_id#22, year_total#23, customer_id#30, customer_first_name#31, customer_last_name#32, customer_email_address#33, year_total#34, year_total#48]
Input [9]: [customer_id#22, year_total#23, customer_id#30, customer_first_name#31, customer_last_name#32, customer_email_address#33, year_total#34, customer_id#47, year_total#48]

(64) ReusedExchange [Reuses operator id: 4]
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(65) Sort [codegen id : 28]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(66) ReusedExchange [Reuses operator id: 48]
Output [4]: [ws_sold_date_sk#36, ws_bill_customer_sk#37, ws_ext_discount_amt#38, ws_ext_list_price#39]

(67) Sort [codegen id : 30]
Input [4]: [ws_sold_date_sk#36, ws_bill_customer_sk#37, ws_ext_discount_amt#38, ws_ext_list_price#39]
Arguments: [ws_bill_customer_sk#37 ASC NULLS FIRST], false, 0

(68) SortMergeJoin [codegen id : 32]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#37]
Join condition: None

(69) Project [codegen id : 32]
Output [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_sold_date_sk#36, ws_ext_discount_amt#38, ws_ext_list_price#39]
Input [12]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_sold_date_sk#36, ws_bill_customer_sk#37, ws_ext_discount_amt#38, ws_ext_list_price#39]

(70) ReusedExchange [Reuses operator id: 34]
Output [2]: [d_date_sk#15, d_year#16]

(71) BroadcastHashJoin [codegen id : 32]
Left keys [1]: [ws_sold_date_sk#36]
Right keys [1]: [d_date_sk#15]
Join condition: None

(72) Project [codegen id : 32]
Output [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#38, ws_ext_list_price#39, d_year#16]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_sold_date_sk#36, ws_ext_discount_amt#38, ws_ext_list_price#39, d_date_sk#15, d_year#16]

(73) HashAggregate [codegen id : 32]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#38, ws_ext_list_price#39, d_year#16]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#16]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#39 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#38 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#50]
Results [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#16, sum#51]

(74) Exchange
Input [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#16, sum#51]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#16, 5), ENSURE_REQUIREMENTS, [id=#52]

(75) HashAggregate [codegen id : 33]
Input [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#16, sum#51]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#16]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#39 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#38 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#39 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#38 as decimal(8,2)))), DecimalType(8,2), true)))#53]
Results [2]: [c_customer_id#2 AS customer_id#54, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#39 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#38 as decimal(8,2)))), DecimalType(8,2), true)))#53,18,2) AS year_total#55]

(76) Exchange
Input [2]: [customer_id#54, year_total#55]
Arguments: hashpartitioning(customer_id#54, 5), ENSURE_REQUIREMENTS, [id=#56]

(77) Sort [codegen id : 34]
Input [2]: [customer_id#54, year_total#55]
Arguments: [customer_id#54 ASC NULLS FIRST], false, 0

(78) SortMergeJoin [codegen id : 35]
Left keys [1]: [customer_id#22]
Right keys [1]: [customer_id#54]
Join condition: (CASE WHEN (year_total#48 > 0.00) THEN CheckOverflow((promote_precision(year_total#55) / promote_precision(year_total#48)), DecimalType(38,20), true) ELSE 0E-20 END > CASE WHEN (year_total#23 > 0.00) THEN CheckOverflow((promote_precision(year_total#34) / promote_precision(year_total#23)), DecimalType(38,20), true) ELSE 0E-20 END)

(79) Project [codegen id : 35]
Output [4]: [customer_id#30, customer_first_name#31, customer_last_name#32, customer_email_address#33]
Input [10]: [customer_id#22, year_total#23, customer_id#30, customer_first_name#31, customer_last_name#32, customer_email_address#33, year_total#34, year_total#48, customer_id#54, year_total#55]

(80) TakeOrderedAndProject
Input [4]: [customer_id#30, customer_first_name#31, customer_last_name#32, customer_email_address#33]
Arguments: 100, [customer_id#30 ASC NULLS FIRST, customer_first_name#31 ASC NULLS FIRST, customer_last_name#32 ASC NULLS FIRST, customer_email_address#33 ASC NULLS FIRST], [customer_id#30, customer_first_name#31, customer_last_name#32, customer_email_address#33]

