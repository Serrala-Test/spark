== Physical Plan ==
TakeOrderedAndProject (83)
+- * Project (82)
   +- * SortMergeJoin Inner (81)
      :- * Project (63)
      :  +- * SortMergeJoin Inner (62)
      :     :- * SortMergeJoin Inner (42)
      :     :  :- * Sort (21)
      :     :  :  +- Exchange (20)
      :     :  :     +- * Filter (19)
      :     :  :        +- * HashAggregate (18)
      :     :  :           +- Exchange (17)
      :     :  :              +- * HashAggregate (16)
      :     :  :                 +- * Project (15)
      :     :  :                    +- * BroadcastHashJoin Inner BuildRight (14)
      :     :  :                       :- * Project (9)
      :     :  :                       :  +- * BroadcastHashJoin Inner BuildRight (8)
      :     :  :                       :     :- * Filter (3)
      :     :  :                       :     :  +- * ColumnarToRow (2)
      :     :  :                       :     :     +- Scan parquet default.customer (1)
      :     :  :                       :     +- BroadcastExchange (7)
      :     :  :                       :        +- * Filter (6)
      :     :  :                       :           +- * ColumnarToRow (5)
      :     :  :                       :              +- Scan parquet default.store_sales (4)
      :     :  :                       +- BroadcastExchange (13)
      :     :  :                          +- * Filter (12)
      :     :  :                             +- * ColumnarToRow (11)
      :     :  :                                +- Scan parquet default.date_dim (10)
      :     :  +- * Sort (41)
      :     :     +- Exchange (40)
      :     :        +- * HashAggregate (39)
      :     :           +- Exchange (38)
      :     :              +- * HashAggregate (37)
      :     :                 +- * Project (36)
      :     :                    +- * BroadcastHashJoin Inner BuildRight (35)
      :     :                       :- * Project (30)
      :     :                       :  +- * BroadcastHashJoin Inner BuildRight (29)
      :     :                       :     :- * Filter (24)
      :     :                       :     :  +- * ColumnarToRow (23)
      :     :                       :     :     +- Scan parquet default.customer (22)
      :     :                       :     +- BroadcastExchange (28)
      :     :                       :        +- * Filter (27)
      :     :                       :           +- * ColumnarToRow (26)
      :     :                       :              +- Scan parquet default.store_sales (25)
      :     :                       +- BroadcastExchange (34)
      :     :                          +- * Filter (33)
      :     :                             +- * ColumnarToRow (32)
      :     :                                +- Scan parquet default.date_dim (31)
      :     +- * Sort (61)
      :        +- Exchange (60)
      :           +- * Project (59)
      :              +- * Filter (58)
      :                 +- * HashAggregate (57)
      :                    +- Exchange (56)
      :                       +- * HashAggregate (55)
      :                          +- * Project (54)
      :                             +- * BroadcastHashJoin Inner BuildRight (53)
      :                                :- * Project (51)
      :                                :  +- * BroadcastHashJoin Inner BuildRight (50)
      :                                :     :- * Filter (45)
      :                                :     :  +- * ColumnarToRow (44)
      :                                :     :     +- Scan parquet default.customer (43)
      :                                :     +- BroadcastExchange (49)
      :                                :        +- * Filter (48)
      :                                :           +- * ColumnarToRow (47)
      :                                :              +- Scan parquet default.web_sales (46)
      :                                +- ReusedExchange (52)
      +- * Sort (80)
         +- Exchange (79)
            +- * HashAggregate (78)
               +- Exchange (77)
                  +- * HashAggregate (76)
                     +- * Project (75)
                        +- * BroadcastHashJoin Inner BuildRight (74)
                           :- * Project (72)
                           :  +- * BroadcastHashJoin Inner BuildRight (71)
                           :     :- * Filter (66)
                           :     :  +- * ColumnarToRow (65)
                           :     :     +- Scan parquet default.customer (64)
                           :     +- BroadcastExchange (70)
                           :        +- * Filter (69)
                           :           +- * ColumnarToRow (68)
                           :              +- Scan parquet default.web_sales (67)
                           +- ReusedExchange (73)


(1) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(2) ColumnarToRow [codegen id : 3]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(3) Filter [codegen id : 3]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(4) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_list_price#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(5) ColumnarToRow [codegen id : 1]
Input [4]: [ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_list_price#11, ss_sold_date_sk#12]

(6) Filter [codegen id : 1]
Input [4]: [ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_list_price#11, ss_sold_date_sk#12]
Condition : isnotnull(ss_customer_sk#9)

(7) BroadcastExchange
Input [4]: [ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_list_price#11, ss_sold_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#9]
Join condition: None

(9) Project [codegen id : 3]
Output [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#10, ss_ext_list_price#11, ss_sold_date_sk#12]
Input [12]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_list_price#11, ss_sold_date_sk#12]

(10) Scan parquet default.date_dim
Output [2]: [d_date_sk#15, d_year#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(11) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#15, d_year#16]

(12) Filter [codegen id : 2]
Input [2]: [d_date_sk#15, d_year#16]
Condition : ((isnotnull(d_year#16) AND (d_year#16 = 2001)) AND isnotnull(d_date_sk#15))

(13) BroadcastExchange
Input [2]: [d_date_sk#15, d_year#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#17]

(14) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#12]
Right keys [1]: [d_date_sk#15]
Join condition: None

(15) Project [codegen id : 3]
Output [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#10, ss_ext_list_price#11, d_year#16]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#10, ss_ext_list_price#11, ss_sold_date_sk#12, d_date_sk#15, d_year#16]

(16) HashAggregate [codegen id : 3]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#10, ss_ext_list_price#11, d_year#16]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#11 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#10 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#18]
Results [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, sum#19]

(17) Exchange
Input [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, sum#19]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, 5), ENSURE_REQUIREMENTS, [id=#20]

(18) HashAggregate [codegen id : 4]
Input [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, sum#19]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#11 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#10 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#11 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#10 as decimal(8,2)))), DecimalType(8,2), true)))#21]
Results [2]: [c_customer_id#2 AS customer_id#22, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#11 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#10 as decimal(8,2)))), DecimalType(8,2), true)))#21,18,2) AS year_total#23]

(19) Filter [codegen id : 4]
Input [2]: [customer_id#22, year_total#23]
Condition : (isnotnull(year_total#23) AND (year_total#23 > 0.00))

(20) Exchange
Input [2]: [customer_id#22, year_total#23]
Arguments: hashpartitioning(customer_id#22, 5), ENSURE_REQUIREMENTS, [id=#24]

(21) Sort [codegen id : 5]
Input [2]: [customer_id#22, year_total#23]
Arguments: [customer_id#22 ASC NULLS FIRST], false, 0

(22) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(23) ColumnarToRow [codegen id : 8]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(24) Filter [codegen id : 8]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(25) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_list_price#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#25)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(26) ColumnarToRow [codegen id : 6]
Input [4]: [ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_list_price#11, ss_sold_date_sk#12]

(27) Filter [codegen id : 6]
Input [4]: [ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_list_price#11, ss_sold_date_sk#12]
Condition : isnotnull(ss_customer_sk#9)

(28) BroadcastExchange
Input [4]: [ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_list_price#11, ss_sold_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#26]

(29) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#9]
Join condition: None

(30) Project [codegen id : 8]
Output [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#10, ss_ext_list_price#11, ss_sold_date_sk#12]
Input [12]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_list_price#11, ss_sold_date_sk#12]

(31) Scan parquet default.date_dim
Output [2]: [d_date_sk#15, d_year#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(32) ColumnarToRow [codegen id : 7]
Input [2]: [d_date_sk#15, d_year#16]

(33) Filter [codegen id : 7]
Input [2]: [d_date_sk#15, d_year#16]
Condition : ((isnotnull(d_year#16) AND (d_year#16 = 2002)) AND isnotnull(d_date_sk#15))

(34) BroadcastExchange
Input [2]: [d_date_sk#15, d_year#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(35) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_sold_date_sk#12]
Right keys [1]: [d_date_sk#15]
Join condition: None

(36) Project [codegen id : 8]
Output [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#10, ss_ext_list_price#11, d_year#16]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#10, ss_ext_list_price#11, ss_sold_date_sk#12, d_date_sk#15, d_year#16]

(37) HashAggregate [codegen id : 8]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#10, ss_ext_list_price#11, d_year#16]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#11 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#10 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#28]
Results [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, sum#29]

(38) Exchange
Input [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, sum#29]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, 5), ENSURE_REQUIREMENTS, [id=#30]

(39) HashAggregate [codegen id : 9]
Input [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, sum#29]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#16, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#11 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#10 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#11 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#10 as decimal(8,2)))), DecimalType(8,2), true)))#31]
Results [5]: [c_customer_id#2 AS customer_id#32, c_first_name#3 AS customer_first_name#33, c_last_name#4 AS customer_last_name#34, c_email_address#8 AS customer_email_address#35, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#11 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#10 as decimal(8,2)))), DecimalType(8,2), true)))#31,18,2) AS year_total#36]

(40) Exchange
Input [5]: [customer_id#32, customer_first_name#33, customer_last_name#34, customer_email_address#35, year_total#36]
Arguments: hashpartitioning(customer_id#32, 5), ENSURE_REQUIREMENTS, [id=#37]

(41) Sort [codegen id : 10]
Input [5]: [customer_id#32, customer_first_name#33, customer_last_name#34, customer_email_address#35, year_total#36]
Arguments: [customer_id#32 ASC NULLS FIRST], false, 0

(42) SortMergeJoin [codegen id : 11]
Left keys [1]: [customer_id#22]
Right keys [1]: [customer_id#32]
Join condition: None

(43) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(44) ColumnarToRow [codegen id : 14]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(45) Filter [codegen id : 14]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(46) Scan parquet default.web_sales
Output [4]: [ws_bill_customer_sk#38, ws_ext_discount_amt#39, ws_ext_list_price#40, ws_sold_date_sk#41]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#41), dynamicpruningexpression(ws_sold_date_sk#41 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(47) ColumnarToRow [codegen id : 12]
Input [4]: [ws_bill_customer_sk#38, ws_ext_discount_amt#39, ws_ext_list_price#40, ws_sold_date_sk#41]

(48) Filter [codegen id : 12]
Input [4]: [ws_bill_customer_sk#38, ws_ext_discount_amt#39, ws_ext_list_price#40, ws_sold_date_sk#41]
Condition : isnotnull(ws_bill_customer_sk#38)

(49) BroadcastExchange
Input [4]: [ws_bill_customer_sk#38, ws_ext_discount_amt#39, ws_ext_list_price#40, ws_sold_date_sk#41]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#42]

(50) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#38]
Join condition: None

(51) Project [codegen id : 14]
Output [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#39, ws_ext_list_price#40, ws_sold_date_sk#41]
Input [12]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_bill_customer_sk#38, ws_ext_discount_amt#39, ws_ext_list_price#40, ws_sold_date_sk#41]

(52) ReusedExchange [Reuses operator id: 13]
Output [2]: [d_date_sk#15, d_year#16]

(53) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_sold_date_sk#41]
Right keys [1]: [d_date_sk#15]
Join condition: None

(54) Project [codegen id : 14]
Output [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#39, ws_ext_list_price#40, d_year#16]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#39, ws_ext_list_price#40, ws_sold_date_sk#41, d_date_sk#15, d_year#16]

(55) HashAggregate [codegen id : 14]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#39, ws_ext_list_price#40, d_year#16]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#16]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#40 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#39 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#43]
Results [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#16, sum#44]

(56) Exchange
Input [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#16, sum#44]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#16, 5), ENSURE_REQUIREMENTS, [id=#45]

(57) HashAggregate [codegen id : 15]
Input [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#16, sum#44]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#16]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#40 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#39 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#40 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#39 as decimal(8,2)))), DecimalType(8,2), true)))#46]
Results [2]: [c_customer_id#2 AS customer_id#47, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#40 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#39 as decimal(8,2)))), DecimalType(8,2), true)))#46,18,2) AS year_total#48]

(58) Filter [codegen id : 15]
Input [2]: [customer_id#47, year_total#48]
Condition : (isnotnull(year_total#48) AND (year_total#48 > 0.00))

(59) Project [codegen id : 15]
Output [2]: [customer_id#47 AS customer_id#49, year_total#48 AS year_total#50]
Input [2]: [customer_id#47, year_total#48]

(60) Exchange
Input [2]: [customer_id#49, year_total#50]
Arguments: hashpartitioning(customer_id#49, 5), ENSURE_REQUIREMENTS, [id=#51]

(61) Sort [codegen id : 16]
Input [2]: [customer_id#49, year_total#50]
Arguments: [customer_id#49 ASC NULLS FIRST], false, 0

(62) SortMergeJoin [codegen id : 17]
Left keys [1]: [customer_id#22]
Right keys [1]: [customer_id#49]
Join condition: None

(63) Project [codegen id : 17]
Output [8]: [customer_id#22, year_total#23, customer_id#32, customer_first_name#33, customer_last_name#34, customer_email_address#35, year_total#36, year_total#50]
Input [9]: [customer_id#22, year_total#23, customer_id#32, customer_first_name#33, customer_last_name#34, customer_email_address#35, year_total#36, customer_id#49, year_total#50]

(64) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(65) ColumnarToRow [codegen id : 20]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(66) Filter [codegen id : 20]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(67) Scan parquet default.web_sales
Output [4]: [ws_bill_customer_sk#38, ws_ext_discount_amt#39, ws_ext_list_price#40, ws_sold_date_sk#41]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#41), dynamicpruningexpression(ws_sold_date_sk#41 IN dynamicpruning#25)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(68) ColumnarToRow [codegen id : 18]
Input [4]: [ws_bill_customer_sk#38, ws_ext_discount_amt#39, ws_ext_list_price#40, ws_sold_date_sk#41]

(69) Filter [codegen id : 18]
Input [4]: [ws_bill_customer_sk#38, ws_ext_discount_amt#39, ws_ext_list_price#40, ws_sold_date_sk#41]
Condition : isnotnull(ws_bill_customer_sk#38)

(70) BroadcastExchange
Input [4]: [ws_bill_customer_sk#38, ws_ext_discount_amt#39, ws_ext_list_price#40, ws_sold_date_sk#41]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#52]

(71) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#38]
Join condition: None

(72) Project [codegen id : 20]
Output [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#39, ws_ext_list_price#40, ws_sold_date_sk#41]
Input [12]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_bill_customer_sk#38, ws_ext_discount_amt#39, ws_ext_list_price#40, ws_sold_date_sk#41]

(73) ReusedExchange [Reuses operator id: 34]
Output [2]: [d_date_sk#15, d_year#16]

(74) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ws_sold_date_sk#41]
Right keys [1]: [d_date_sk#15]
Join condition: None

(75) Project [codegen id : 20]
Output [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#39, ws_ext_list_price#40, d_year#16]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#39, ws_ext_list_price#40, ws_sold_date_sk#41, d_date_sk#15, d_year#16]

(76) HashAggregate [codegen id : 20]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#39, ws_ext_list_price#40, d_year#16]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#16]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#40 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#39 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#53]
Results [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#16, sum#54]

(77) Exchange
Input [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#16, sum#54]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#16, 5), ENSURE_REQUIREMENTS, [id=#55]

(78) HashAggregate [codegen id : 21]
Input [9]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#16, sum#54]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#16]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#40 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#39 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#40 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#39 as decimal(8,2)))), DecimalType(8,2), true)))#56]
Results [2]: [c_customer_id#2 AS customer_id#57, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#40 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#39 as decimal(8,2)))), DecimalType(8,2), true)))#56,18,2) AS year_total#58]

(79) Exchange
Input [2]: [customer_id#57, year_total#58]
Arguments: hashpartitioning(customer_id#57, 5), ENSURE_REQUIREMENTS, [id=#59]

(80) Sort [codegen id : 22]
Input [2]: [customer_id#57, year_total#58]
Arguments: [customer_id#57 ASC NULLS FIRST], false, 0

(81) SortMergeJoin [codegen id : 23]
Left keys [1]: [customer_id#22]
Right keys [1]: [customer_id#57]
Join condition: (CASE WHEN (year_total#50 > 0.00) THEN CheckOverflow((promote_precision(year_total#58) / promote_precision(year_total#50)), DecimalType(38,20), true) ELSE 0E-20 END > CASE WHEN (year_total#23 > 0.00) THEN CheckOverflow((promote_precision(year_total#36) / promote_precision(year_total#23)), DecimalType(38,20), true) ELSE 0E-20 END)

(82) Project [codegen id : 23]
Output [4]: [customer_id#32, customer_first_name#33, customer_last_name#34, customer_email_address#35]
Input [10]: [customer_id#22, year_total#23, customer_id#32, customer_first_name#33, customer_last_name#34, customer_email_address#35, year_total#36, year_total#50, customer_id#57, year_total#58]

(83) TakeOrderedAndProject
Input [4]: [customer_id#32, customer_first_name#33, customer_last_name#34, customer_email_address#35]
Arguments: 100, [customer_id#32 ASC NULLS FIRST, customer_first_name#33 ASC NULLS FIRST, customer_last_name#34 ASC NULLS FIRST, customer_email_address#35 ASC NULLS FIRST], [customer_id#32, customer_first_name#33, customer_last_name#34, customer_email_address#35]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#13
ReusedExchange (84)


(84) ReusedExchange [Reuses operator id: 13]
Output [2]: [d_date_sk#15, d_year#16]

Subquery:2 Hosting operator id = 25 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#25
ReusedExchange (85)


(85) ReusedExchange [Reuses operator id: 34]
Output [2]: [d_date_sk#15, d_year#16]

Subquery:3 Hosting operator id = 46 Hosting Expression = ws_sold_date_sk#41 IN dynamicpruning#13

Subquery:4 Hosting operator id = 67 Hosting Expression = ws_sold_date_sk#41 IN dynamicpruning#25


