== Physical Plan ==
TakeOrderedAndProject (76)
+- * Project (75)
   +- * SortMergeJoin Inner (74)
      :- * Project (56)
      :  +- * SortMergeJoin Inner (55)
      :     :- * SortMergeJoin Inner (36)
      :     :  :- * Sort (18)
      :     :  :  +- Exchange (17)
      :     :  :     +- * Filter (16)
      :     :  :        +- * HashAggregate (15)
      :     :  :           +- Exchange (14)
      :     :  :              +- * HashAggregate (13)
      :     :  :                 +- * Project (12)
      :     :  :                    +- * SortMergeJoin Inner (11)
      :     :  :                       :- * Sort (8)
      :     :  :                       :  +- Exchange (7)
      :     :  :                       :     +- * Project (6)
      :     :  :                       :        +- * BroadcastHashJoin Inner BuildRight (5)
      :     :  :                       :           :- * Filter (3)
      :     :  :                       :           :  +- * ColumnarToRow (2)
      :     :  :                       :           :     +- Scan parquet spark_catalog.default.store_sales (1)
      :     :  :                       :           +- ReusedExchange (4)
      :     :  :                       +- * Sort (10)
      :     :  :                          +- ReusedExchange (9)
      :     :  +- * Sort (35)
      :     :     +- Exchange (34)
      :     :        +- * HashAggregate (33)
      :     :           +- Exchange (32)
      :     :              +- * HashAggregate (31)
      :     :                 +- * Project (30)
      :     :                    +- * SortMergeJoin Inner (29)
      :     :                       :- * Sort (26)
      :     :                       :  +- Exchange (25)
      :     :                       :     +- * Project (24)
      :     :                       :        +- * BroadcastHashJoin Inner BuildRight (23)
      :     :                       :           :- * Filter (21)
      :     :                       :           :  +- * ColumnarToRow (20)
      :     :                       :           :     +- Scan parquet spark_catalog.default.store_sales (19)
      :     :                       :           +- ReusedExchange (22)
      :     :                       +- * Sort (28)
      :     :                          +- ReusedExchange (27)
      :     +- * Sort (54)
      :        +- Exchange (53)
      :           +- * Filter (52)
      :              +- * HashAggregate (51)
      :                 +- Exchange (50)
      :                    +- * HashAggregate (49)
      :                       +- * Project (48)
      :                          +- * SortMergeJoin Inner (47)
      :                             :- * Sort (44)
      :                             :  +- Exchange (43)
      :                             :     +- * Project (42)
      :                             :        +- * BroadcastHashJoin Inner BuildRight (41)
      :                             :           :- * Filter (39)
      :                             :           :  +- * ColumnarToRow (38)
      :                             :           :     +- Scan parquet spark_catalog.default.web_sales (37)
      :                             :           +- ReusedExchange (40)
      :                             +- * Sort (46)
      :                                +- ReusedExchange (45)
      +- * Sort (73)
         +- Exchange (72)
            +- * HashAggregate (71)
               +- Exchange (70)
                  +- * HashAggregate (69)
                     +- * Project (68)
                        +- * SortMergeJoin Inner (67)
                           :- * Sort (64)
                           :  +- Exchange (63)
                           :     +- * Project (62)
                           :        +- * BroadcastHashJoin Inner BuildRight (61)
                           :           :- * Filter (59)
                           :           :  +- * ColumnarToRow (58)
                           :           :     +- Scan parquet spark_catalog.default.web_sales (57)
                           :           +- ReusedExchange (60)
                           +- * Sort (66)
                              +- ReusedExchange (65)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 2]
Input [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, ss_sold_date_sk#4]
Condition : (isnotnull(ss_customer_sk#1) AND might_contain(Subquery scalar-subquery#6, [id=#7], xxhash64(ss_customer_sk#1, 42), false))

(4) ReusedExchange [Reuses operator id: 87]
Output [2]: [d_date_sk#8, d_year#9]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#8]
Join type: Inner
Join condition: None

(6) Project [codegen id : 2]
Output [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#9]
Input [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, ss_sold_date_sk#4, d_date_sk#8, d_year#9]

(7) Exchange
Input [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#9]
Arguments: hashpartitioning(ss_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(8) Sort [codegen id : 3]
Input [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#9]
Arguments: [ss_customer_sk#1 ASC NULLS FIRST], false, 0

(9) ReusedExchange [Reuses operator id: 80]
Output [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]

(10) Sort [codegen id : 5]
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Arguments: [c_customer_sk#10 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#10]
Join type: Inner
Join condition: None

(12) Project [codegen id : 6]
Output [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#9]
Input [12]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#9, c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]

(13) HashAggregate [codegen id : 6]
Input [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#9]
Keys [8]: [c_customer_id#11, c_first_name#12, c_last_name#13, d_year#9, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Functions [1]: [partial_sum(UnscaledValue((ss_ext_list_price#3 - ss_ext_discount_amt#2)))]
Aggregate Attributes [1]: [sum#18]
Results [9]: [c_customer_id#11, c_first_name#12, c_last_name#13, d_year#9, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, sum#19]

(14) Exchange
Input [9]: [c_customer_id#11, c_first_name#12, c_last_name#13, d_year#9, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, sum#19]
Arguments: hashpartitioning(c_customer_id#11, c_first_name#12, c_last_name#13, d_year#9, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(15) HashAggregate [codegen id : 7]
Input [9]: [c_customer_id#11, c_first_name#12, c_last_name#13, d_year#9, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, sum#19]
Keys [8]: [c_customer_id#11, c_first_name#12, c_last_name#13, d_year#9, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Functions [1]: [sum(UnscaledValue((ss_ext_list_price#3 - ss_ext_discount_amt#2)))]
Aggregate Attributes [1]: [sum(UnscaledValue((ss_ext_list_price#3 - ss_ext_discount_amt#2)))#20]
Results [2]: [c_customer_id#11 AS customer_id#21, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#3 - ss_ext_discount_amt#2)))#20,18,2) AS year_total#22]

(16) Filter [codegen id : 7]
Input [2]: [customer_id#21, year_total#22]
Condition : (isnotnull(year_total#22) AND (year_total#22 > 0.00))

(17) Exchange
Input [2]: [customer_id#21, year_total#22]
Arguments: hashpartitioning(customer_id#21, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(18) Sort [codegen id : 8]
Input [2]: [customer_id#21, year_total#22]
Arguments: [customer_id#21 ASC NULLS FIRST], false, 0

(19) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_customer_sk#23, ss_ext_discount_amt#24, ss_ext_list_price#25, ss_sold_date_sk#26]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#26), dynamicpruningexpression(ss_sold_date_sk#26 IN dynamicpruning#27)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(20) ColumnarToRow [codegen id : 10]
Input [4]: [ss_customer_sk#23, ss_ext_discount_amt#24, ss_ext_list_price#25, ss_sold_date_sk#26]

(21) Filter [codegen id : 10]
Input [4]: [ss_customer_sk#23, ss_ext_discount_amt#24, ss_ext_list_price#25, ss_sold_date_sk#26]
Condition : (isnotnull(ss_customer_sk#23) AND might_contain(Subquery scalar-subquery#28, [id=#29], xxhash64(ss_customer_sk#23, 42), false))

(22) ReusedExchange [Reuses operator id: 98]
Output [2]: [d_date_sk#30, d_year#31]

(23) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#26]
Right keys [1]: [d_date_sk#30]
Join type: Inner
Join condition: None

(24) Project [codegen id : 10]
Output [4]: [ss_customer_sk#23, ss_ext_discount_amt#24, ss_ext_list_price#25, d_year#31]
Input [6]: [ss_customer_sk#23, ss_ext_discount_amt#24, ss_ext_list_price#25, ss_sold_date_sk#26, d_date_sk#30, d_year#31]

(25) Exchange
Input [4]: [ss_customer_sk#23, ss_ext_discount_amt#24, ss_ext_list_price#25, d_year#31]
Arguments: hashpartitioning(ss_customer_sk#23, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(26) Sort [codegen id : 11]
Input [4]: [ss_customer_sk#23, ss_ext_discount_amt#24, ss_ext_list_price#25, d_year#31]
Arguments: [ss_customer_sk#23 ASC NULLS FIRST], false, 0

(27) ReusedExchange [Reuses operator id: 80]
Output [8]: [c_customer_sk#32, c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39]

(28) Sort [codegen id : 13]
Input [8]: [c_customer_sk#32, c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39]
Arguments: [c_customer_sk#32 ASC NULLS FIRST], false, 0

(29) SortMergeJoin [codegen id : 14]
Left keys [1]: [ss_customer_sk#23]
Right keys [1]: [c_customer_sk#32]
Join type: Inner
Join condition: None

(30) Project [codegen id : 14]
Output [10]: [c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39, ss_ext_discount_amt#24, ss_ext_list_price#25, d_year#31]
Input [12]: [ss_customer_sk#23, ss_ext_discount_amt#24, ss_ext_list_price#25, d_year#31, c_customer_sk#32, c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39]

(31) HashAggregate [codegen id : 14]
Input [10]: [c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39, ss_ext_discount_amt#24, ss_ext_list_price#25, d_year#31]
Keys [8]: [c_customer_id#33, c_first_name#34, c_last_name#35, d_year#31, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39]
Functions [1]: [partial_sum(UnscaledValue((ss_ext_list_price#25 - ss_ext_discount_amt#24)))]
Aggregate Attributes [1]: [sum#40]
Results [9]: [c_customer_id#33, c_first_name#34, c_last_name#35, d_year#31, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39, sum#41]

(32) Exchange
Input [9]: [c_customer_id#33, c_first_name#34, c_last_name#35, d_year#31, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39, sum#41]
Arguments: hashpartitioning(c_customer_id#33, c_first_name#34, c_last_name#35, d_year#31, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(33) HashAggregate [codegen id : 15]
Input [9]: [c_customer_id#33, c_first_name#34, c_last_name#35, d_year#31, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39, sum#41]
Keys [8]: [c_customer_id#33, c_first_name#34, c_last_name#35, d_year#31, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39]
Functions [1]: [sum(UnscaledValue((ss_ext_list_price#25 - ss_ext_discount_amt#24)))]
Aggregate Attributes [1]: [sum(UnscaledValue((ss_ext_list_price#25 - ss_ext_discount_amt#24)))#20]
Results [5]: [c_customer_id#33 AS customer_id#42, c_first_name#34 AS customer_first_name#43, c_last_name#35 AS customer_last_name#44, c_email_address#39 AS customer_email_address#45, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#25 - ss_ext_discount_amt#24)))#20,18,2) AS year_total#46]

(34) Exchange
Input [5]: [customer_id#42, customer_first_name#43, customer_last_name#44, customer_email_address#45, year_total#46]
Arguments: hashpartitioning(customer_id#42, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(35) Sort [codegen id : 16]
Input [5]: [customer_id#42, customer_first_name#43, customer_last_name#44, customer_email_address#45, year_total#46]
Arguments: [customer_id#42 ASC NULLS FIRST], false, 0

(36) SortMergeJoin [codegen id : 17]
Left keys [1]: [customer_id#21]
Right keys [1]: [customer_id#42]
Join type: Inner
Join condition: None

(37) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_bill_customer_sk#47, ws_ext_discount_amt#48, ws_ext_list_price#49, ws_sold_date_sk#50]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#50), dynamicpruningexpression(ws_sold_date_sk#50 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(38) ColumnarToRow [codegen id : 19]
Input [4]: [ws_bill_customer_sk#47, ws_ext_discount_amt#48, ws_ext_list_price#49, ws_sold_date_sk#50]

(39) Filter [codegen id : 19]
Input [4]: [ws_bill_customer_sk#47, ws_ext_discount_amt#48, ws_ext_list_price#49, ws_sold_date_sk#50]
Condition : (isnotnull(ws_bill_customer_sk#47) AND might_contain(ReusedSubquery Subquery scalar-subquery#28, [id=#29], xxhash64(ws_bill_customer_sk#47, 42), false))

(40) ReusedExchange [Reuses operator id: 87]
Output [2]: [d_date_sk#51, d_year#52]

(41) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [ws_sold_date_sk#50]
Right keys [1]: [d_date_sk#51]
Join type: Inner
Join condition: None

(42) Project [codegen id : 19]
Output [4]: [ws_bill_customer_sk#47, ws_ext_discount_amt#48, ws_ext_list_price#49, d_year#52]
Input [6]: [ws_bill_customer_sk#47, ws_ext_discount_amt#48, ws_ext_list_price#49, ws_sold_date_sk#50, d_date_sk#51, d_year#52]

(43) Exchange
Input [4]: [ws_bill_customer_sk#47, ws_ext_discount_amt#48, ws_ext_list_price#49, d_year#52]
Arguments: hashpartitioning(ws_bill_customer_sk#47, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(44) Sort [codegen id : 20]
Input [4]: [ws_bill_customer_sk#47, ws_ext_discount_amt#48, ws_ext_list_price#49, d_year#52]
Arguments: [ws_bill_customer_sk#47 ASC NULLS FIRST], false, 0

(45) ReusedExchange [Reuses operator id: 80]
Output [8]: [c_customer_sk#53, c_customer_id#54, c_first_name#55, c_last_name#56, c_preferred_cust_flag#57, c_birth_country#58, c_login#59, c_email_address#60]

(46) Sort [codegen id : 22]
Input [8]: [c_customer_sk#53, c_customer_id#54, c_first_name#55, c_last_name#56, c_preferred_cust_flag#57, c_birth_country#58, c_login#59, c_email_address#60]
Arguments: [c_customer_sk#53 ASC NULLS FIRST], false, 0

(47) SortMergeJoin [codegen id : 23]
Left keys [1]: [ws_bill_customer_sk#47]
Right keys [1]: [c_customer_sk#53]
Join type: Inner
Join condition: None

(48) Project [codegen id : 23]
Output [10]: [c_customer_id#54, c_first_name#55, c_last_name#56, c_preferred_cust_flag#57, c_birth_country#58, c_login#59, c_email_address#60, ws_ext_discount_amt#48, ws_ext_list_price#49, d_year#52]
Input [12]: [ws_bill_customer_sk#47, ws_ext_discount_amt#48, ws_ext_list_price#49, d_year#52, c_customer_sk#53, c_customer_id#54, c_first_name#55, c_last_name#56, c_preferred_cust_flag#57, c_birth_country#58, c_login#59, c_email_address#60]

(49) HashAggregate [codegen id : 23]
Input [10]: [c_customer_id#54, c_first_name#55, c_last_name#56, c_preferred_cust_flag#57, c_birth_country#58, c_login#59, c_email_address#60, ws_ext_discount_amt#48, ws_ext_list_price#49, d_year#52]
Keys [8]: [c_customer_id#54, c_first_name#55, c_last_name#56, c_preferred_cust_flag#57, c_birth_country#58, c_login#59, c_email_address#60, d_year#52]
Functions [1]: [partial_sum(UnscaledValue((ws_ext_list_price#49 - ws_ext_discount_amt#48)))]
Aggregate Attributes [1]: [sum#61]
Results [9]: [c_customer_id#54, c_first_name#55, c_last_name#56, c_preferred_cust_flag#57, c_birth_country#58, c_login#59, c_email_address#60, d_year#52, sum#62]

(50) Exchange
Input [9]: [c_customer_id#54, c_first_name#55, c_last_name#56, c_preferred_cust_flag#57, c_birth_country#58, c_login#59, c_email_address#60, d_year#52, sum#62]
Arguments: hashpartitioning(c_customer_id#54, c_first_name#55, c_last_name#56, c_preferred_cust_flag#57, c_birth_country#58, c_login#59, c_email_address#60, d_year#52, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(51) HashAggregate [codegen id : 24]
Input [9]: [c_customer_id#54, c_first_name#55, c_last_name#56, c_preferred_cust_flag#57, c_birth_country#58, c_login#59, c_email_address#60, d_year#52, sum#62]
Keys [8]: [c_customer_id#54, c_first_name#55, c_last_name#56, c_preferred_cust_flag#57, c_birth_country#58, c_login#59, c_email_address#60, d_year#52]
Functions [1]: [sum(UnscaledValue((ws_ext_list_price#49 - ws_ext_discount_amt#48)))]
Aggregate Attributes [1]: [sum(UnscaledValue((ws_ext_list_price#49 - ws_ext_discount_amt#48)))#63]
Results [2]: [c_customer_id#54 AS customer_id#64, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#49 - ws_ext_discount_amt#48)))#63,18,2) AS year_total#65]

(52) Filter [codegen id : 24]
Input [2]: [customer_id#64, year_total#65]
Condition : (isnotnull(year_total#65) AND (year_total#65 > 0.00))

(53) Exchange
Input [2]: [customer_id#64, year_total#65]
Arguments: hashpartitioning(customer_id#64, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(54) Sort [codegen id : 25]
Input [2]: [customer_id#64, year_total#65]
Arguments: [customer_id#64 ASC NULLS FIRST], false, 0

(55) SortMergeJoin [codegen id : 26]
Left keys [1]: [customer_id#21]
Right keys [1]: [customer_id#64]
Join type: Inner
Join condition: None

(56) Project [codegen id : 26]
Output [8]: [customer_id#21, year_total#22, customer_id#42, customer_first_name#43, customer_last_name#44, customer_email_address#45, year_total#46, year_total#65]
Input [9]: [customer_id#21, year_total#22, customer_id#42, customer_first_name#43, customer_last_name#44, customer_email_address#45, year_total#46, customer_id#64, year_total#65]

(57) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_bill_customer_sk#66, ws_ext_discount_amt#67, ws_ext_list_price#68, ws_sold_date_sk#69]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#69), dynamicpruningexpression(ws_sold_date_sk#69 IN dynamicpruning#27)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(58) ColumnarToRow [codegen id : 28]
Input [4]: [ws_bill_customer_sk#66, ws_ext_discount_amt#67, ws_ext_list_price#68, ws_sold_date_sk#69]

(59) Filter [codegen id : 28]
Input [4]: [ws_bill_customer_sk#66, ws_ext_discount_amt#67, ws_ext_list_price#68, ws_sold_date_sk#69]
Condition : (isnotnull(ws_bill_customer_sk#66) AND might_contain(ReusedSubquery Subquery scalar-subquery#28, [id=#29], xxhash64(ws_bill_customer_sk#66, 42), false))

(60) ReusedExchange [Reuses operator id: 98]
Output [2]: [d_date_sk#70, d_year#71]

(61) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [ws_sold_date_sk#69]
Right keys [1]: [d_date_sk#70]
Join type: Inner
Join condition: None

(62) Project [codegen id : 28]
Output [4]: [ws_bill_customer_sk#66, ws_ext_discount_amt#67, ws_ext_list_price#68, d_year#71]
Input [6]: [ws_bill_customer_sk#66, ws_ext_discount_amt#67, ws_ext_list_price#68, ws_sold_date_sk#69, d_date_sk#70, d_year#71]

(63) Exchange
Input [4]: [ws_bill_customer_sk#66, ws_ext_discount_amt#67, ws_ext_list_price#68, d_year#71]
Arguments: hashpartitioning(ws_bill_customer_sk#66, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(64) Sort [codegen id : 29]
Input [4]: [ws_bill_customer_sk#66, ws_ext_discount_amt#67, ws_ext_list_price#68, d_year#71]
Arguments: [ws_bill_customer_sk#66 ASC NULLS FIRST], false, 0

(65) ReusedExchange [Reuses operator id: 80]
Output [8]: [c_customer_sk#72, c_customer_id#73, c_first_name#74, c_last_name#75, c_preferred_cust_flag#76, c_birth_country#77, c_login#78, c_email_address#79]

(66) Sort [codegen id : 31]
Input [8]: [c_customer_sk#72, c_customer_id#73, c_first_name#74, c_last_name#75, c_preferred_cust_flag#76, c_birth_country#77, c_login#78, c_email_address#79]
Arguments: [c_customer_sk#72 ASC NULLS FIRST], false, 0

(67) SortMergeJoin [codegen id : 32]
Left keys [1]: [ws_bill_customer_sk#66]
Right keys [1]: [c_customer_sk#72]
Join type: Inner
Join condition: None

(68) Project [codegen id : 32]
Output [10]: [c_customer_id#73, c_first_name#74, c_last_name#75, c_preferred_cust_flag#76, c_birth_country#77, c_login#78, c_email_address#79, ws_ext_discount_amt#67, ws_ext_list_price#68, d_year#71]
Input [12]: [ws_bill_customer_sk#66, ws_ext_discount_amt#67, ws_ext_list_price#68, d_year#71, c_customer_sk#72, c_customer_id#73, c_first_name#74, c_last_name#75, c_preferred_cust_flag#76, c_birth_country#77, c_login#78, c_email_address#79]

(69) HashAggregate [codegen id : 32]
Input [10]: [c_customer_id#73, c_first_name#74, c_last_name#75, c_preferred_cust_flag#76, c_birth_country#77, c_login#78, c_email_address#79, ws_ext_discount_amt#67, ws_ext_list_price#68, d_year#71]
Keys [8]: [c_customer_id#73, c_first_name#74, c_last_name#75, c_preferred_cust_flag#76, c_birth_country#77, c_login#78, c_email_address#79, d_year#71]
Functions [1]: [partial_sum(UnscaledValue((ws_ext_list_price#68 - ws_ext_discount_amt#67)))]
Aggregate Attributes [1]: [sum#80]
Results [9]: [c_customer_id#73, c_first_name#74, c_last_name#75, c_preferred_cust_flag#76, c_birth_country#77, c_login#78, c_email_address#79, d_year#71, sum#81]

(70) Exchange
Input [9]: [c_customer_id#73, c_first_name#74, c_last_name#75, c_preferred_cust_flag#76, c_birth_country#77, c_login#78, c_email_address#79, d_year#71, sum#81]
Arguments: hashpartitioning(c_customer_id#73, c_first_name#74, c_last_name#75, c_preferred_cust_flag#76, c_birth_country#77, c_login#78, c_email_address#79, d_year#71, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(71) HashAggregate [codegen id : 33]
Input [9]: [c_customer_id#73, c_first_name#74, c_last_name#75, c_preferred_cust_flag#76, c_birth_country#77, c_login#78, c_email_address#79, d_year#71, sum#81]
Keys [8]: [c_customer_id#73, c_first_name#74, c_last_name#75, c_preferred_cust_flag#76, c_birth_country#77, c_login#78, c_email_address#79, d_year#71]
Functions [1]: [sum(UnscaledValue((ws_ext_list_price#68 - ws_ext_discount_amt#67)))]
Aggregate Attributes [1]: [sum(UnscaledValue((ws_ext_list_price#68 - ws_ext_discount_amt#67)))#63]
Results [2]: [c_customer_id#73 AS customer_id#82, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#68 - ws_ext_discount_amt#67)))#63,18,2) AS year_total#83]

(72) Exchange
Input [2]: [customer_id#82, year_total#83]
Arguments: hashpartitioning(customer_id#82, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(73) Sort [codegen id : 34]
Input [2]: [customer_id#82, year_total#83]
Arguments: [customer_id#82 ASC NULLS FIRST], false, 0

(74) SortMergeJoin [codegen id : 35]
Left keys [1]: [customer_id#21]
Right keys [1]: [customer_id#82]
Join type: Inner
Join condition: (CASE WHEN (year_total#65 > 0.00) THEN (year_total#83 / year_total#65) ELSE 0E-20 END > CASE WHEN (year_total#22 > 0.00) THEN (year_total#46 / year_total#22) ELSE 0E-20 END)

(75) Project [codegen id : 35]
Output [4]: [customer_id#42, customer_first_name#43, customer_last_name#44, customer_email_address#45]
Input [10]: [customer_id#21, year_total#22, customer_id#42, customer_first_name#43, customer_last_name#44, customer_email_address#45, year_total#46, year_total#65, customer_id#82, year_total#83]

(76) TakeOrderedAndProject
Input [4]: [customer_id#42, customer_first_name#43, customer_last_name#44, customer_email_address#45]
Arguments: 100, [customer_id#42 ASC NULLS FIRST, customer_first_name#43 ASC NULLS FIRST, customer_last_name#44 ASC NULLS FIRST, customer_email_address#45 ASC NULLS FIRST], [customer_id#42, customer_first_name#43, customer_last_name#44, customer_email_address#45]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#6, [id=#7]
ObjectHashAggregate (83)
+- Exchange (82)
   +- ObjectHashAggregate (81)
      +- Exchange (80)
         +- * Filter (79)
            +- * ColumnarToRow (78)
               +- Scan parquet spark_catalog.default.customer (77)


(77) Scan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(78) ColumnarToRow [codegen id : 1]
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]

(79) Filter [codegen id : 1]
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Condition : (isnotnull(c_customer_sk#10) AND isnotnull(c_customer_id#11))

(80) Exchange
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Arguments: hashpartitioning(c_customer_sk#10, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(81) ObjectHashAggregate
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(c_customer_sk#10, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [buf#84]
Results [1]: [buf#85]

(82) Exchange
Input [1]: [buf#85]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=14]

(83) ObjectHashAggregate
Input [1]: [buf#85]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(c_customer_sk#10, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(c_customer_sk#10, 42), 2000000, 16000000, 0, 0)#86]
Results [1]: [bloom_filter_agg(xxhash64(c_customer_sk#10, 42), 2000000, 16000000, 0, 0)#86 AS bloomFilter#87]

Subquery:2 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (87)
+- * Filter (86)
   +- * ColumnarToRow (85)
      +- Scan parquet spark_catalog.default.date_dim (84)


(84) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#8, d_year#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(85) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#8, d_year#9]

(86) Filter [codegen id : 1]
Input [2]: [d_date_sk#8, d_year#9]
Condition : ((isnotnull(d_year#9) AND (d_year#9 = 2001)) AND isnotnull(d_date_sk#8))

(87) BroadcastExchange
Input [2]: [d_date_sk#8, d_year#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=15]

Subquery:3 Hosting operator id = 21 Hosting Expression = Subquery scalar-subquery#28, [id=#29]
ObjectHashAggregate (94)
+- Exchange (93)
   +- ObjectHashAggregate (92)
      +- Exchange (91)
         +- * Filter (90)
            +- * ColumnarToRow (89)
               +- Scan parquet spark_catalog.default.customer (88)


(88) Scan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#32, c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(89) ColumnarToRow [codegen id : 1]
Input [8]: [c_customer_sk#32, c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39]

(90) Filter [codegen id : 1]
Input [8]: [c_customer_sk#32, c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39]
Condition : (isnotnull(c_customer_sk#32) AND isnotnull(c_customer_id#33))

(91) Exchange
Input [8]: [c_customer_sk#32, c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39]
Arguments: hashpartitioning(c_customer_sk#10, 5), ENSURE_REQUIREMENTS, [plan_id=16]

(92) ObjectHashAggregate
Input [8]: [c_customer_sk#32, c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(c_customer_sk#32, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [buf#88]
Results [1]: [buf#89]

(93) Exchange
Input [1]: [buf#89]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=17]

(94) ObjectHashAggregate
Input [1]: [buf#89]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(c_customer_sk#32, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(c_customer_sk#32, 42), 2000000, 16000000, 0, 0)#90]
Results [1]: [bloom_filter_agg(xxhash64(c_customer_sk#32, 42), 2000000, 16000000, 0, 0)#90 AS bloomFilter#91]

Subquery:4 Hosting operator id = 19 Hosting Expression = ss_sold_date_sk#26 IN dynamicpruning#27
BroadcastExchange (98)
+- * Filter (97)
   +- * ColumnarToRow (96)
      +- Scan parquet spark_catalog.default.date_dim (95)


(95) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#30, d_year#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(96) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#30, d_year#31]

(97) Filter [codegen id : 1]
Input [2]: [d_date_sk#30, d_year#31]
Condition : ((isnotnull(d_year#31) AND (d_year#31 = 2002)) AND isnotnull(d_date_sk#30))

(98) BroadcastExchange
Input [2]: [d_date_sk#30, d_year#31]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=18]

Subquery:5 Hosting operator id = 39 Hosting Expression = ReusedSubquery Subquery scalar-subquery#28, [id=#29]

Subquery:6 Hosting operator id = 37 Hosting Expression = ws_sold_date_sk#50 IN dynamicpruning#5

Subquery:7 Hosting operator id = 59 Hosting Expression = ReusedSubquery Subquery scalar-subquery#28, [id=#29]

Subquery:8 Hosting operator id = 57 Hosting Expression = ws_sold_date_sk#69 IN dynamicpruning#27


