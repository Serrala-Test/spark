== Physical Plan ==
* Sort (53)
+- Exchange (52)
   +- * Project (51)
      +- * Filter (50)
         +- * HashAggregate (49)
            +- Exchange (48)
               +- * HashAggregate (47)
                  +- * HashAggregate (46)
                     +- Exchange (45)
                        +- * HashAggregate (44)
                           +- * Project (43)
                              +- * BroadcastHashJoin Inner BuildRight (42)
                                 :- * Project (37)
                                 :  +- * SortMergeJoin Inner (36)
                                 :     :- * Sort (30)
                                 :     :  +- Exchange (29)
                                 :     :     +- * Project (28)
                                 :     :        +- * SortMergeJoin Inner (27)
                                 :     :           :- * Sort (21)
                                 :     :           :  +- Exchange (20)
                                 :     :           :     +- * Project (19)
                                 :     :           :        +- * BroadcastHashJoin Inner BuildRight (18)
                                 :     :           :           :- * Project (12)
                                 :     :           :           :  +- * SortMergeJoin Inner (11)
                                 :     :           :           :     :- * Sort (5)
                                 :     :           :           :     :  +- Exchange (4)
                                 :     :           :           :     :     +- * Filter (3)
                                 :     :           :           :     :        +- * ColumnarToRow (2)
                                 :     :           :           :     :           +- Scan parquet default.store_sales (1)
                                 :     :           :           :     +- * Sort (10)
                                 :     :           :           :        +- Exchange (9)
                                 :     :           :           :           +- * Filter (8)
                                 :     :           :           :              +- * ColumnarToRow (7)
                                 :     :           :           :                 +- Scan parquet default.store_returns (6)
                                 :     :           :           +- BroadcastExchange (17)
                                 :     :           :              +- * Project (16)
                                 :     :           :                 +- * Filter (15)
                                 :     :           :                    +- * ColumnarToRow (14)
                                 :     :           :                       +- Scan parquet default.store (13)
                                 :     :           +- * Sort (26)
                                 :     :              +- Exchange (25)
                                 :     :                 +- * Filter (24)
                                 :     :                    +- * ColumnarToRow (23)
                                 :     :                       +- Scan parquet default.customer_address (22)
                                 :     +- * Sort (35)
                                 :        +- Exchange (34)
                                 :           +- * Filter (33)
                                 :              +- * ColumnarToRow (32)
                                 :                 +- Scan parquet default.customer (31)
                                 +- BroadcastExchange (41)
                                    +- * Filter (40)
                                       +- * ColumnarToRow (39)
                                          +- Scan parquet default.item (38)


(1) Scan parquet default.store_sales
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]

(3) Filter [codegen id : 1]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Condition : (((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2))

(4) Exchange
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Arguments: hashpartitioning(cast(ss_ticket_number#4 as bigint), cast(ss_item_sk#1 as bigint), 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Arguments: [cast(ss_ticket_number#4 as bigint) ASC NULLS FIRST, cast(ss_item_sk#1 as bigint) ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_returns
Output [2]: [sr_item_sk#7, sr_ticket_number#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:bigint,sr_ticket_number:bigint>

(7) ColumnarToRow [codegen id : 3]
Input [2]: [sr_item_sk#7, sr_ticket_number#8]

(8) Filter [codegen id : 3]
Input [2]: [sr_item_sk#7, sr_ticket_number#8]
Condition : (isnotnull(sr_ticket_number#8) AND isnotnull(sr_item_sk#7))

(9) Exchange
Input [2]: [sr_item_sk#7, sr_ticket_number#8]
Arguments: hashpartitioning(sr_ticket_number#8, sr_item_sk#7, 5), ENSURE_REQUIREMENTS, [id=#9]

(10) Sort [codegen id : 4]
Input [2]: [sr_item_sk#7, sr_ticket_number#8]
Arguments: [sr_ticket_number#8 ASC NULLS FIRST, sr_item_sk#7 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 6]
Left keys [2]: [cast(ss_ticket_number#4 as bigint), cast(ss_item_sk#1 as bigint)]
Right keys [2]: [sr_ticket_number#8, sr_item_sk#7]
Join condition: None

(12) Project [codegen id : 6]
Output [4]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, sr_item_sk#7, sr_ticket_number#8]

(13) Scan parquet default.store
Output [5]: [s_store_sk#10, s_store_name#11, s_market_id#12, s_state#13, s_zip#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(14) ColumnarToRow [codegen id : 5]
Input [5]: [s_store_sk#10, s_store_name#11, s_market_id#12, s_state#13, s_zip#14]

(15) Filter [codegen id : 5]
Input [5]: [s_store_sk#10, s_store_name#11, s_market_id#12, s_state#13, s_zip#14]
Condition : (((isnotnull(s_market_id#12) AND (s_market_id#12 = 8)) AND isnotnull(s_store_sk#10)) AND isnotnull(s_zip#14))

(16) Project [codegen id : 5]
Output [4]: [s_store_sk#10, s_store_name#11, s_state#13, s_zip#14]
Input [5]: [s_store_sk#10, s_store_name#11, s_market_id#12, s_state#13, s_zip#14]

(17) BroadcastExchange
Input [4]: [s_store_sk#10, s_store_name#11, s_state#13, s_zip#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15]

(18) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#10]
Join condition: None

(19) Project [codegen id : 6]
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14]
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5, s_store_sk#10, s_store_name#11, s_state#13, s_zip#14]

(20) Exchange
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14]
Arguments: hashpartitioning(s_zip#14, 5), ENSURE_REQUIREMENTS, [id=#16]

(21) Sort [codegen id : 7]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14]
Arguments: [s_zip#14 ASC NULLS FIRST], false, 0

(22) Scan parquet default.customer_address
Output [4]: [ca_address_sk#17, ca_state#18, ca_zip#19, ca_country#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_zip:string,ca_country:string>

(23) ColumnarToRow [codegen id : 8]
Input [4]: [ca_address_sk#17, ca_state#18, ca_zip#19, ca_country#20]

(24) Filter [codegen id : 8]
Input [4]: [ca_address_sk#17, ca_state#18, ca_zip#19, ca_country#20]
Condition : ((isnotnull(ca_address_sk#17) AND isnotnull(ca_country#20)) AND isnotnull(ca_zip#19))

(25) Exchange
Input [4]: [ca_address_sk#17, ca_state#18, ca_zip#19, ca_country#20]
Arguments: hashpartitioning(ca_zip#19, 5), ENSURE_REQUIREMENTS, [id=#21]

(26) Sort [codegen id : 9]
Input [4]: [ca_address_sk#17, ca_state#18, ca_zip#19, ca_country#20]
Arguments: [ca_zip#19 ASC NULLS FIRST], false, 0

(27) SortMergeJoin [codegen id : 10]
Left keys [1]: [s_zip#14]
Right keys [1]: [ca_zip#19]
Join condition: None

(28) Project [codegen id : 10]
Output [8]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, ca_address_sk#17, ca_state#18, ca_country#20]
Input [10]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, ca_address_sk#17, ca_state#18, ca_zip#19, ca_country#20]

(29) Exchange
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, ca_address_sk#17, ca_state#18, ca_country#20]
Arguments: hashpartitioning(ss_customer_sk#2, ca_address_sk#17, upper(ca_country#20), 5), ENSURE_REQUIREMENTS, [id=#22]

(30) Sort [codegen id : 11]
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, ca_address_sk#17, ca_state#18, ca_country#20]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST, ca_address_sk#17 ASC NULLS FIRST, upper(ca_country#20) ASC NULLS FIRST], false, 0

(31) Scan parquet default.customer
Output [5]: [c_customer_sk#23, c_current_addr_sk#24, c_first_name#25, c_last_name#26, c_birth_country#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(32) ColumnarToRow [codegen id : 12]
Input [5]: [c_customer_sk#23, c_current_addr_sk#24, c_first_name#25, c_last_name#26, c_birth_country#27]

(33) Filter [codegen id : 12]
Input [5]: [c_customer_sk#23, c_current_addr_sk#24, c_first_name#25, c_last_name#26, c_birth_country#27]
Condition : ((isnotnull(c_customer_sk#23) AND isnotnull(c_current_addr_sk#24)) AND isnotnull(c_birth_country#27))

(34) Exchange
Input [5]: [c_customer_sk#23, c_current_addr_sk#24, c_first_name#25, c_last_name#26, c_birth_country#27]
Arguments: hashpartitioning(c_customer_sk#23, c_current_addr_sk#24, c_birth_country#27, 5), ENSURE_REQUIREMENTS, [id=#28]

(35) Sort [codegen id : 13]
Input [5]: [c_customer_sk#23, c_current_addr_sk#24, c_first_name#25, c_last_name#26, c_birth_country#27]
Arguments: [c_customer_sk#23 ASC NULLS FIRST, c_current_addr_sk#24 ASC NULLS FIRST, c_birth_country#27 ASC NULLS FIRST], false, 0

(36) SortMergeJoin [codegen id : 15]
Left keys [3]: [ss_customer_sk#2, ca_address_sk#17, upper(ca_country#20)]
Right keys [3]: [c_customer_sk#23, c_current_addr_sk#24, c_birth_country#27]
Join condition: None

(37) Project [codegen id : 15]
Output [7]: [ss_item_sk#1, ss_net_paid#5, s_store_name#11, s_state#13, ca_state#18, c_first_name#25, c_last_name#26]
Input [13]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, ca_address_sk#17, ca_state#18, ca_country#20, c_customer_sk#23, c_current_addr_sk#24, c_first_name#25, c_last_name#26, c_birth_country#27]

(38) Scan parquet default.item
Output [6]: [i_item_sk#29, i_current_price#30, i_size#31, i_color#32, i_units#33, i_manager_id#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_color), EqualTo(i_color,pale), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(39) ColumnarToRow [codegen id : 14]
Input [6]: [i_item_sk#29, i_current_price#30, i_size#31, i_color#32, i_units#33, i_manager_id#34]

(40) Filter [codegen id : 14]
Input [6]: [i_item_sk#29, i_current_price#30, i_size#31, i_color#32, i_units#33, i_manager_id#34]
Condition : ((isnotnull(i_color#32) AND (i_color#32 = pale)) AND isnotnull(i_item_sk#29))

(41) BroadcastExchange
Input [6]: [i_item_sk#29, i_current_price#30, i_size#31, i_color#32, i_units#33, i_manager_id#34]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#35]

(42) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#29]
Join condition: None

(43) Project [codegen id : 15]
Output [11]: [ss_net_paid#5, s_store_name#11, s_state#13, i_current_price#30, i_size#31, i_color#32, i_units#33, i_manager_id#34, c_first_name#25, c_last_name#26, ca_state#18]
Input [13]: [ss_item_sk#1, ss_net_paid#5, s_store_name#11, s_state#13, ca_state#18, c_first_name#25, c_last_name#26, i_item_sk#29, i_current_price#30, i_size#31, i_color#32, i_units#33, i_manager_id#34]

(44) HashAggregate [codegen id : 15]
Input [11]: [ss_net_paid#5, s_store_name#11, s_state#13, i_current_price#30, i_size#31, i_color#32, i_units#33, i_manager_id#34, c_first_name#25, c_last_name#26, ca_state#18]
Keys [10]: [c_last_name#26, c_first_name#25, s_store_name#11, ca_state#18, s_state#13, i_color#32, i_current_price#30, i_manager_id#34, i_units#33, i_size#31]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum#36]
Results [11]: [c_last_name#26, c_first_name#25, s_store_name#11, ca_state#18, s_state#13, i_color#32, i_current_price#30, i_manager_id#34, i_units#33, i_size#31, sum#37]

(45) Exchange
Input [11]: [c_last_name#26, c_first_name#25, s_store_name#11, ca_state#18, s_state#13, i_color#32, i_current_price#30, i_manager_id#34, i_units#33, i_size#31, sum#37]
Arguments: hashpartitioning(c_last_name#26, c_first_name#25, s_store_name#11, ca_state#18, s_state#13, i_color#32, i_current_price#30, i_manager_id#34, i_units#33, i_size#31, 5), ENSURE_REQUIREMENTS, [id=#38]

(46) HashAggregate [codegen id : 16]
Input [11]: [c_last_name#26, c_first_name#25, s_store_name#11, ca_state#18, s_state#13, i_color#32, i_current_price#30, i_manager_id#34, i_units#33, i_size#31, sum#37]
Keys [10]: [c_last_name#26, c_first_name#25, s_store_name#11, ca_state#18, s_state#13, i_color#32, i_current_price#30, i_manager_id#34, i_units#33, i_size#31]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#5))#39]
Results [4]: [c_last_name#26, c_first_name#25, s_store_name#11, MakeDecimal(sum(UnscaledValue(ss_net_paid#5))#39,17,2) AS netpaid#40]

(47) HashAggregate [codegen id : 16]
Input [4]: [c_last_name#26, c_first_name#25, s_store_name#11, netpaid#40]
Keys [3]: [c_last_name#26, c_first_name#25, s_store_name#11]
Functions [1]: [partial_sum(netpaid#40)]
Aggregate Attributes [2]: [sum#41, isEmpty#42]
Results [5]: [c_last_name#26, c_first_name#25, s_store_name#11, sum#43, isEmpty#44]

(48) Exchange
Input [5]: [c_last_name#26, c_first_name#25, s_store_name#11, sum#43, isEmpty#44]
Arguments: hashpartitioning(c_last_name#26, c_first_name#25, s_store_name#11, 5), ENSURE_REQUIREMENTS, [id=#45]

(49) HashAggregate [codegen id : 17]
Input [5]: [c_last_name#26, c_first_name#25, s_store_name#11, sum#43, isEmpty#44]
Keys [3]: [c_last_name#26, c_first_name#25, s_store_name#11]
Functions [1]: [sum(netpaid#40)]
Aggregate Attributes [1]: [sum(netpaid#40)#46]
Results [5]: [c_last_name#26, c_first_name#25, s_store_name#11, sum(netpaid#40)#46 AS paid#47, sum(netpaid#40)#46 AS sum(netpaid#40)#48]

(50) Filter [codegen id : 17]
Input [5]: [c_last_name#26, c_first_name#25, s_store_name#11, paid#47, sum(netpaid#40)#48]
Condition : (isnotnull(sum(netpaid#40)#48) AND (cast(sum(netpaid#40)#48 as decimal(33,8)) > cast(Subquery scalar-subquery#49, [id=#50] as decimal(33,8))))

(51) Project [codegen id : 17]
Output [4]: [c_last_name#26, c_first_name#25, s_store_name#11, paid#47]
Input [5]: [c_last_name#26, c_first_name#25, s_store_name#11, paid#47, sum(netpaid#40)#48]

(52) Exchange
Input [4]: [c_last_name#26, c_first_name#25, s_store_name#11, paid#47]
Arguments: rangepartitioning(c_last_name#26 ASC NULLS FIRST, c_first_name#25 ASC NULLS FIRST, s_store_name#11 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [id=#51]

(53) Sort [codegen id : 18]
Input [4]: [c_last_name#26, c_first_name#25, s_store_name#11, paid#47]
Arguments: [c_last_name#26 ASC NULLS FIRST, c_first_name#25 ASC NULLS FIRST, s_store_name#11 ASC NULLS FIRST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 50 Hosting Expression = Subquery scalar-subquery#49, [id=#50]
* HashAggregate (105)
+- Exchange (104)
   +- * HashAggregate (103)
      +- * HashAggregate (102)
         +- Exchange (101)
            +- * HashAggregate (100)
               +- * Project (99)
                  +- * SortMergeJoin Inner (98)
                     :- * Sort (92)
                     :  +- Exchange (91)
                     :     +- * Project (90)
                     :        +- * SortMergeJoin Inner (89)
                     :           :- * Sort (83)
                     :           :  +- Exchange (82)
                     :           :     +- * Project (81)
                     :           :        +- * SortMergeJoin Inner (80)
                     :           :           :- * Sort (74)
                     :           :           :  +- Exchange (73)
                     :           :           :     +- * Project (72)
                     :           :           :        +- * BroadcastHashJoin Inner BuildRight (71)
                     :           :           :           :- * Project (65)
                     :           :           :           :  +- * SortMergeJoin Inner (64)
                     :           :           :           :     :- * Sort (58)
                     :           :           :           :     :  +- Exchange (57)
                     :           :           :           :     :     +- * Filter (56)
                     :           :           :           :     :        +- * ColumnarToRow (55)
                     :           :           :           :     :           +- Scan parquet default.store_sales (54)
                     :           :           :           :     +- * Sort (63)
                     :           :           :           :        +- Exchange (62)
                     :           :           :           :           +- * Filter (61)
                     :           :           :           :              +- * ColumnarToRow (60)
                     :           :           :           :                 +- Scan parquet default.store_returns (59)
                     :           :           :           +- BroadcastExchange (70)
                     :           :           :              +- * Project (69)
                     :           :           :                 +- * Filter (68)
                     :           :           :                    +- * ColumnarToRow (67)
                     :           :           :                       +- Scan parquet default.store (66)
                     :           :           +- * Sort (79)
                     :           :              +- Exchange (78)
                     :           :                 +- * Filter (77)
                     :           :                    +- * ColumnarToRow (76)
                     :           :                       +- Scan parquet default.customer_address (75)
                     :           +- * Sort (88)
                     :              +- Exchange (87)
                     :                 +- * Filter (86)
                     :                    +- * ColumnarToRow (85)
                     :                       +- Scan parquet default.item (84)
                     +- * Sort (97)
                        +- Exchange (96)
                           +- * Filter (95)
                              +- * ColumnarToRow (94)
                                 +- Scan parquet default.customer (93)


(54) Scan parquet default.store_sales
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(55) ColumnarToRow [codegen id : 1]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]

(56) Filter [codegen id : 1]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Condition : (((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2))

(57) Exchange
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Arguments: hashpartitioning(cast(ss_ticket_number#4 as bigint), cast(ss_item_sk#1 as bigint), 5), ENSURE_REQUIREMENTS, [id=#52]

(58) Sort [codegen id : 2]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Arguments: [cast(ss_ticket_number#4 as bigint) ASC NULLS FIRST, cast(ss_item_sk#1 as bigint) ASC NULLS FIRST], false, 0

(59) Scan parquet default.store_returns
Output [2]: [sr_item_sk#7, sr_ticket_number#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:bigint,sr_ticket_number:bigint>

(60) ColumnarToRow [codegen id : 3]
Input [2]: [sr_item_sk#7, sr_ticket_number#8]

(61) Filter [codegen id : 3]
Input [2]: [sr_item_sk#7, sr_ticket_number#8]
Condition : (isnotnull(sr_ticket_number#8) AND isnotnull(sr_item_sk#7))

(62) Exchange
Input [2]: [sr_item_sk#7, sr_ticket_number#8]
Arguments: hashpartitioning(sr_ticket_number#8, sr_item_sk#7, 5), ENSURE_REQUIREMENTS, [id=#53]

(63) Sort [codegen id : 4]
Input [2]: [sr_item_sk#7, sr_ticket_number#8]
Arguments: [sr_ticket_number#8 ASC NULLS FIRST, sr_item_sk#7 ASC NULLS FIRST], false, 0

(64) SortMergeJoin [codegen id : 6]
Left keys [2]: [cast(ss_ticket_number#4 as bigint), cast(ss_item_sk#1 as bigint)]
Right keys [2]: [sr_ticket_number#8, sr_item_sk#7]
Join condition: None

(65) Project [codegen id : 6]
Output [4]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, sr_item_sk#7, sr_ticket_number#8]

(66) Scan parquet default.store
Output [5]: [s_store_sk#10, s_store_name#11, s_market_id#12, s_state#13, s_zip#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(67) ColumnarToRow [codegen id : 5]
Input [5]: [s_store_sk#10, s_store_name#11, s_market_id#12, s_state#13, s_zip#14]

(68) Filter [codegen id : 5]
Input [5]: [s_store_sk#10, s_store_name#11, s_market_id#12, s_state#13, s_zip#14]
Condition : (((isnotnull(s_market_id#12) AND (s_market_id#12 = 8)) AND isnotnull(s_store_sk#10)) AND isnotnull(s_zip#14))

(69) Project [codegen id : 5]
Output [4]: [s_store_sk#10, s_store_name#11, s_state#13, s_zip#14]
Input [5]: [s_store_sk#10, s_store_name#11, s_market_id#12, s_state#13, s_zip#14]

(70) BroadcastExchange
Input [4]: [s_store_sk#10, s_store_name#11, s_state#13, s_zip#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#54]

(71) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#10]
Join condition: None

(72) Project [codegen id : 6]
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14]
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5, s_store_sk#10, s_store_name#11, s_state#13, s_zip#14]

(73) Exchange
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14]
Arguments: hashpartitioning(s_zip#14, 5), ENSURE_REQUIREMENTS, [id=#55]

(74) Sort [codegen id : 7]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14]
Arguments: [s_zip#14 ASC NULLS FIRST], false, 0

(75) Scan parquet default.customer_address
Output [4]: [ca_address_sk#17, ca_state#18, ca_zip#19, ca_country#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_zip:string,ca_country:string>

(76) ColumnarToRow [codegen id : 8]
Input [4]: [ca_address_sk#17, ca_state#18, ca_zip#19, ca_country#20]

(77) Filter [codegen id : 8]
Input [4]: [ca_address_sk#17, ca_state#18, ca_zip#19, ca_country#20]
Condition : ((isnotnull(ca_address_sk#17) AND isnotnull(ca_country#20)) AND isnotnull(ca_zip#19))

(78) Exchange
Input [4]: [ca_address_sk#17, ca_state#18, ca_zip#19, ca_country#20]
Arguments: hashpartitioning(ca_zip#19, 5), ENSURE_REQUIREMENTS, [id=#56]

(79) Sort [codegen id : 9]
Input [4]: [ca_address_sk#17, ca_state#18, ca_zip#19, ca_country#20]
Arguments: [ca_zip#19 ASC NULLS FIRST], false, 0

(80) SortMergeJoin [codegen id : 10]
Left keys [1]: [s_zip#14]
Right keys [1]: [ca_zip#19]
Join condition: None

(81) Project [codegen id : 10]
Output [8]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, ca_address_sk#17, ca_state#18, ca_country#20]
Input [10]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, ca_address_sk#17, ca_state#18, ca_zip#19, ca_country#20]

(82) Exchange
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, ca_address_sk#17, ca_state#18, ca_country#20]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#57]

(83) Sort [codegen id : 11]
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, ca_address_sk#17, ca_state#18, ca_country#20]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(84) Scan parquet default.item
Output [6]: [i_item_sk#29, i_current_price#30, i_size#31, i_color#32, i_units#33, i_manager_id#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(85) ColumnarToRow [codegen id : 12]
Input [6]: [i_item_sk#29, i_current_price#30, i_size#31, i_color#32, i_units#33, i_manager_id#34]

(86) Filter [codegen id : 12]
Input [6]: [i_item_sk#29, i_current_price#30, i_size#31, i_color#32, i_units#33, i_manager_id#34]
Condition : isnotnull(i_item_sk#29)

(87) Exchange
Input [6]: [i_item_sk#29, i_current_price#30, i_size#31, i_color#32, i_units#33, i_manager_id#34]
Arguments: hashpartitioning(i_item_sk#29, 5), ENSURE_REQUIREMENTS, [id=#58]

(88) Sort [codegen id : 13]
Input [6]: [i_item_sk#29, i_current_price#30, i_size#31, i_color#32, i_units#33, i_manager_id#34]
Arguments: [i_item_sk#29 ASC NULLS FIRST], false, 0

(89) SortMergeJoin [codegen id : 14]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#29]
Join condition: None

(90) Project [codegen id : 14]
Output [12]: [ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, ca_address_sk#17, ca_state#18, ca_country#20, i_current_price#30, i_size#31, i_color#32, i_units#33, i_manager_id#34]
Input [14]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, ca_address_sk#17, ca_state#18, ca_country#20, i_item_sk#29, i_current_price#30, i_size#31, i_color#32, i_units#33, i_manager_id#34]

(91) Exchange
Input [12]: [ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, ca_address_sk#17, ca_state#18, ca_country#20, i_current_price#30, i_size#31, i_color#32, i_units#33, i_manager_id#34]
Arguments: hashpartitioning(ss_customer_sk#2, ca_address_sk#17, upper(ca_country#20), 5), ENSURE_REQUIREMENTS, [id=#59]

(92) Sort [codegen id : 15]
Input [12]: [ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, ca_address_sk#17, ca_state#18, ca_country#20, i_current_price#30, i_size#31, i_color#32, i_units#33, i_manager_id#34]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST, ca_address_sk#17 ASC NULLS FIRST, upper(ca_country#20) ASC NULLS FIRST], false, 0

(93) Scan parquet default.customer
Output [5]: [c_customer_sk#23, c_current_addr_sk#24, c_first_name#25, c_last_name#26, c_birth_country#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(94) ColumnarToRow [codegen id : 16]
Input [5]: [c_customer_sk#23, c_current_addr_sk#24, c_first_name#25, c_last_name#26, c_birth_country#27]

(95) Filter [codegen id : 16]
Input [5]: [c_customer_sk#23, c_current_addr_sk#24, c_first_name#25, c_last_name#26, c_birth_country#27]
Condition : ((isnotnull(c_customer_sk#23) AND isnotnull(c_current_addr_sk#24)) AND isnotnull(c_birth_country#27))

(96) Exchange
Input [5]: [c_customer_sk#23, c_current_addr_sk#24, c_first_name#25, c_last_name#26, c_birth_country#27]
Arguments: hashpartitioning(c_customer_sk#23, c_current_addr_sk#24, c_birth_country#27, 5), ENSURE_REQUIREMENTS, [id=#60]

(97) Sort [codegen id : 17]
Input [5]: [c_customer_sk#23, c_current_addr_sk#24, c_first_name#25, c_last_name#26, c_birth_country#27]
Arguments: [c_customer_sk#23 ASC NULLS FIRST, c_current_addr_sk#24 ASC NULLS FIRST, c_birth_country#27 ASC NULLS FIRST], false, 0

(98) SortMergeJoin [codegen id : 18]
Left keys [3]: [ss_customer_sk#2, ca_address_sk#17, upper(ca_country#20)]
Right keys [3]: [c_customer_sk#23, c_current_addr_sk#24, c_birth_country#27]
Join condition: None

(99) Project [codegen id : 18]
Output [11]: [ss_net_paid#5, s_store_name#11, s_state#13, i_current_price#30, i_size#31, i_color#32, i_units#33, i_manager_id#34, c_first_name#25, c_last_name#26, ca_state#18]
Input [17]: [ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, ca_address_sk#17, ca_state#18, ca_country#20, i_current_price#30, i_size#31, i_color#32, i_units#33, i_manager_id#34, c_customer_sk#23, c_current_addr_sk#24, c_first_name#25, c_last_name#26, c_birth_country#27]

(100) HashAggregate [codegen id : 18]
Input [11]: [ss_net_paid#5, s_store_name#11, s_state#13, i_current_price#30, i_size#31, i_color#32, i_units#33, i_manager_id#34, c_first_name#25, c_last_name#26, ca_state#18]
Keys [10]: [c_last_name#26, c_first_name#25, s_store_name#11, ca_state#18, s_state#13, i_color#32, i_current_price#30, i_manager_id#34, i_units#33, i_size#31]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum#61]
Results [11]: [c_last_name#26, c_first_name#25, s_store_name#11, ca_state#18, s_state#13, i_color#32, i_current_price#30, i_manager_id#34, i_units#33, i_size#31, sum#62]

(101) Exchange
Input [11]: [c_last_name#26, c_first_name#25, s_store_name#11, ca_state#18, s_state#13, i_color#32, i_current_price#30, i_manager_id#34, i_units#33, i_size#31, sum#62]
Arguments: hashpartitioning(c_last_name#26, c_first_name#25, s_store_name#11, ca_state#18, s_state#13, i_color#32, i_current_price#30, i_manager_id#34, i_units#33, i_size#31, 5), ENSURE_REQUIREMENTS, [id=#63]

(102) HashAggregate [codegen id : 19]
Input [11]: [c_last_name#26, c_first_name#25, s_store_name#11, ca_state#18, s_state#13, i_color#32, i_current_price#30, i_manager_id#34, i_units#33, i_size#31, sum#62]
Keys [10]: [c_last_name#26, c_first_name#25, s_store_name#11, ca_state#18, s_state#13, i_color#32, i_current_price#30, i_manager_id#34, i_units#33, i_size#31]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#5))#64]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_paid#5))#64,17,2) AS netpaid#40]

(103) HashAggregate [codegen id : 19]
Input [1]: [netpaid#40]
Keys: []
Functions [1]: [partial_avg(netpaid#40)]
Aggregate Attributes [2]: [sum#65, count#66]
Results [2]: [sum#67, count#68]

(104) Exchange
Input [2]: [sum#67, count#68]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#69]

(105) HashAggregate [codegen id : 20]
Input [2]: [sum#67, count#68]
Keys: []
Functions [1]: [avg(netpaid#40)]
Aggregate Attributes [1]: [avg(netpaid#40)#70]
Results [1]: [CheckOverflow((0.050000 * promote_precision(avg(netpaid#40)#70)), DecimalType(24,8), true) AS (CAST(0.05 AS DECIMAL(21,6)) * CAST(avg(netpaid) AS DECIMAL(21,6)))#71]


