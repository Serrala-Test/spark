== Physical Plan ==
* Sort (48)
+- Exchange (47)
   +- * Filter (46)
      +- * HashAggregate (45)
         +- Exchange (44)
            +- * HashAggregate (43)
               +- * HashAggregate (42)
                  +- Exchange (41)
                     +- * HashAggregate (40)
                        +- * Project (39)
                           +- * SortMergeJoin Inner (38)
                              :- * Sort (31)
                              :  +- Exchange (30)
                              :     +- * Project (29)
                              :        +- * BroadcastHashJoin Inner BuildRight (28)
                              :           :- * Project (23)
                              :           :  +- * BroadcastHashJoin Inner BuildLeft (22)
                              :           :     :- BroadcastExchange (17)
                              :           :     :  +- * Project (16)
                              :           :     :     +- * BroadcastHashJoin Inner BuildLeft (15)
                              :           :     :        :- BroadcastExchange (11)
                              :           :     :        :  +- * Project (10)
                              :           :     :        :     +- * BroadcastHashJoin Inner BuildLeft (9)
                              :           :     :        :        :- BroadcastExchange (5)
                              :           :     :        :        :  +- * Project (4)
                              :           :     :        :        :     +- * Filter (3)
                              :           :     :        :        :        +- * ColumnarToRow (2)
                              :           :     :        :        :           +- Scan parquet default.store (1)
                              :           :     :        :        +- * Filter (8)
                              :           :     :        :           +- * ColumnarToRow (7)
                              :           :     :        :              +- Scan parquet default.customer_address (6)
                              :           :     :        +- * Filter (14)
                              :           :     :           +- * ColumnarToRow (13)
                              :           :     :              +- Scan parquet default.customer (12)
                              :           :     +- * Project (21)
                              :           :        +- * Filter (20)
                              :           :           +- * ColumnarToRow (19)
                              :           :              +- Scan parquet default.store_sales (18)
                              :           +- BroadcastExchange (27)
                              :              +- * Filter (26)
                              :                 +- * ColumnarToRow (25)
                              :                    +- Scan parquet default.item (24)
                              +- * Sort (37)
                                 +- Exchange (36)
                                    +- * Project (35)
                                       +- * Filter (34)
                                          +- * ColumnarToRow (33)
                                             +- Scan parquet default.store_returns (32)


(1) Scan parquet default.store
Output [5]: [s_store_sk#1, s_store_name#2, s_market_id#3, s_state#4, s_zip#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [s_store_sk#1, s_store_name#2, s_market_id#3, s_state#4, s_zip#5]

(3) Filter [codegen id : 1]
Input [5]: [s_store_sk#1, s_store_name#2, s_market_id#3, s_state#4, s_zip#5]
Condition : (((isnotnull(s_market_id#3) AND (s_market_id#3 = 8)) AND isnotnull(s_store_sk#1)) AND isnotnull(s_zip#5))

(4) Project [codegen id : 1]
Output [4]: [s_store_sk#1, s_store_name#2, s_state#4, s_zip#5]
Input [5]: [s_store_sk#1, s_store_name#2, s_market_id#3, s_state#4, s_zip#5]

(5) BroadcastExchange
Input [4]: [s_store_sk#1, s_store_name#2, s_state#4, s_zip#5]
Arguments: HashedRelationBroadcastMode(List(input[3, string, true]),false), [id=#6]

(6) Scan parquet default.customer_address
Output [4]: [ca_address_sk#7, ca_state#8, ca_zip#9, ca_country#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_zip:string,ca_country:string>

(7) ColumnarToRow
Input [4]: [ca_address_sk#7, ca_state#8, ca_zip#9, ca_country#10]

(8) Filter
Input [4]: [ca_address_sk#7, ca_state#8, ca_zip#9, ca_country#10]
Condition : ((isnotnull(ca_address_sk#7) AND isnotnull(ca_country#10)) AND isnotnull(ca_zip#9))

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [s_zip#5]
Right keys [1]: [ca_zip#9]
Join condition: None

(10) Project [codegen id : 2]
Output [6]: [s_store_sk#1, s_store_name#2, s_state#4, ca_address_sk#7, ca_state#8, upper(ca_country#10) AS upper(spark_catalog.default.customer_address.ca_country)#11]
Input [8]: [s_store_sk#1, s_store_name#2, s_state#4, s_zip#5, ca_address_sk#7, ca_state#8, ca_zip#9, ca_country#10]

(11) BroadcastExchange
Input [6]: [s_store_sk#1, s_store_name#2, s_state#4, ca_address_sk#7, ca_state#8, upper(spark_catalog.default.customer_address.ca_country)#11]
Arguments: HashedRelationBroadcastMode(List(input[3, int, true], input[5, string, true]),false), [id=#12]

(12) Scan parquet default.customer
Output [5]: [c_customer_sk#13, c_current_addr_sk#14, c_first_name#15, c_last_name#16, c_birth_country#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(13) ColumnarToRow
Input [5]: [c_customer_sk#13, c_current_addr_sk#14, c_first_name#15, c_last_name#16, c_birth_country#17]

(14) Filter
Input [5]: [c_customer_sk#13, c_current_addr_sk#14, c_first_name#15, c_last_name#16, c_birth_country#17]
Condition : ((isnotnull(c_customer_sk#13) AND isnotnull(c_current_addr_sk#14)) AND isnotnull(c_birth_country#17))

(15) BroadcastHashJoin [codegen id : 3]
Left keys [2]: [ca_address_sk#7, upper(spark_catalog.default.customer_address.ca_country)#11]
Right keys [2]: [c_current_addr_sk#14, c_birth_country#17]
Join condition: None

(16) Project [codegen id : 3]
Output [7]: [s_store_sk#1, s_store_name#2, s_state#4, ca_state#8, c_customer_sk#13, c_first_name#15, c_last_name#16]
Input [11]: [s_store_sk#1, s_store_name#2, s_state#4, ca_address_sk#7, ca_state#8, upper(spark_catalog.default.customer_address.ca_country)#11, c_customer_sk#13, c_current_addr_sk#14, c_first_name#15, c_last_name#16, c_birth_country#17]

(17) BroadcastExchange
Input [7]: [s_store_sk#1, s_store_name#2, s_state#4, ca_state#8, c_customer_sk#13, c_first_name#15, c_last_name#16]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[0, int, true] as bigint), 32) | (cast(input[4, int, true] as bigint) & 4294967295))),false), [id=#18]

(18) Scan parquet default.store_sales
Output [6]: [ss_item_sk#19, ss_customer_sk#20, ss_store_sk#21, ss_ticket_number#22, ss_net_paid#23, ss_sold_date_sk#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(19) ColumnarToRow
Input [6]: [ss_item_sk#19, ss_customer_sk#20, ss_store_sk#21, ss_ticket_number#22, ss_net_paid#23, ss_sold_date_sk#24]

(20) Filter
Input [6]: [ss_item_sk#19, ss_customer_sk#20, ss_store_sk#21, ss_ticket_number#22, ss_net_paid#23, ss_sold_date_sk#24]
Condition : (((isnotnull(ss_ticket_number#22) AND isnotnull(ss_item_sk#19)) AND isnotnull(ss_store_sk#21)) AND isnotnull(ss_customer_sk#20))

(21) Project
Output [5]: [ss_item_sk#19, ss_customer_sk#20, ss_store_sk#21, ss_ticket_number#22, ss_net_paid#23]
Input [6]: [ss_item_sk#19, ss_customer_sk#20, ss_store_sk#21, ss_ticket_number#22, ss_net_paid#23, ss_sold_date_sk#24]

(22) BroadcastHashJoin [codegen id : 5]
Left keys [2]: [s_store_sk#1, c_customer_sk#13]
Right keys [2]: [ss_store_sk#21, ss_customer_sk#20]
Join condition: None

(23) Project [codegen id : 5]
Output [8]: [s_store_name#2, s_state#4, ca_state#8, c_first_name#15, c_last_name#16, ss_item_sk#19, ss_ticket_number#22, ss_net_paid#23]
Input [12]: [s_store_sk#1, s_store_name#2, s_state#4, ca_state#8, c_customer_sk#13, c_first_name#15, c_last_name#16, ss_item_sk#19, ss_customer_sk#20, ss_store_sk#21, ss_ticket_number#22, ss_net_paid#23]

(24) Scan parquet default.item
Output [6]: [i_item_sk#25, i_current_price#26, i_size#27, i_color#28, i_units#29, i_manager_id#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_color), EqualTo(i_color,pale                ), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(25) ColumnarToRow [codegen id : 4]
Input [6]: [i_item_sk#25, i_current_price#26, i_size#27, i_color#28, i_units#29, i_manager_id#30]

(26) Filter [codegen id : 4]
Input [6]: [i_item_sk#25, i_current_price#26, i_size#27, i_color#28, i_units#29, i_manager_id#30]
Condition : ((isnotnull(i_color#28) AND (i_color#28 = pale                )) AND isnotnull(i_item_sk#25))

(27) BroadcastExchange
Input [6]: [i_item_sk#25, i_current_price#26, i_size#27, i_color#28, i_units#29, i_manager_id#30]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#31]

(28) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#19]
Right keys [1]: [i_item_sk#25]
Join condition: None

(29) Project [codegen id : 5]
Output [13]: [s_store_name#2, s_state#4, ca_state#8, c_first_name#15, c_last_name#16, ss_item_sk#19, ss_ticket_number#22, ss_net_paid#23, i_current_price#26, i_size#27, i_color#28, i_units#29, i_manager_id#30]
Input [14]: [s_store_name#2, s_state#4, ca_state#8, c_first_name#15, c_last_name#16, ss_item_sk#19, ss_ticket_number#22, ss_net_paid#23, i_item_sk#25, i_current_price#26, i_size#27, i_color#28, i_units#29, i_manager_id#30]

(30) Exchange
Input [13]: [s_store_name#2, s_state#4, ca_state#8, c_first_name#15, c_last_name#16, ss_item_sk#19, ss_ticket_number#22, ss_net_paid#23, i_current_price#26, i_size#27, i_color#28, i_units#29, i_manager_id#30]
Arguments: hashpartitioning(ss_ticket_number#22, ss_item_sk#19, 5), ENSURE_REQUIREMENTS, [id=#32]

(31) Sort [codegen id : 6]
Input [13]: [s_store_name#2, s_state#4, ca_state#8, c_first_name#15, c_last_name#16, ss_item_sk#19, ss_ticket_number#22, ss_net_paid#23, i_current_price#26, i_size#27, i_color#28, i_units#29, i_manager_id#30]
Arguments: [ss_ticket_number#22 ASC NULLS FIRST, ss_item_sk#19 ASC NULLS FIRST], false, 0

(32) Scan parquet default.store_returns
Output [3]: [sr_item_sk#33, sr_ticket_number#34, sr_returned_date_sk#35]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(33) ColumnarToRow [codegen id : 7]
Input [3]: [sr_item_sk#33, sr_ticket_number#34, sr_returned_date_sk#35]

(34) Filter [codegen id : 7]
Input [3]: [sr_item_sk#33, sr_ticket_number#34, sr_returned_date_sk#35]
Condition : (isnotnull(sr_ticket_number#34) AND isnotnull(sr_item_sk#33))

(35) Project [codegen id : 7]
Output [2]: [sr_item_sk#33, sr_ticket_number#34]
Input [3]: [sr_item_sk#33, sr_ticket_number#34, sr_returned_date_sk#35]

(36) Exchange
Input [2]: [sr_item_sk#33, sr_ticket_number#34]
Arguments: hashpartitioning(sr_ticket_number#34, sr_item_sk#33, 5), ENSURE_REQUIREMENTS, [id=#36]

(37) Sort [codegen id : 8]
Input [2]: [sr_item_sk#33, sr_ticket_number#34]
Arguments: [sr_ticket_number#34 ASC NULLS FIRST, sr_item_sk#33 ASC NULLS FIRST], false, 0

(38) SortMergeJoin [codegen id : 9]
Left keys [2]: [ss_ticket_number#22, ss_item_sk#19]
Right keys [2]: [sr_ticket_number#34, sr_item_sk#33]
Join condition: None

(39) Project [codegen id : 9]
Output [11]: [ss_net_paid#23, s_store_name#2, s_state#4, i_current_price#26, i_size#27, i_color#28, i_units#29, i_manager_id#30, c_first_name#15, c_last_name#16, ca_state#8]
Input [15]: [s_store_name#2, s_state#4, ca_state#8, c_first_name#15, c_last_name#16, ss_item_sk#19, ss_ticket_number#22, ss_net_paid#23, i_current_price#26, i_size#27, i_color#28, i_units#29, i_manager_id#30, sr_item_sk#33, sr_ticket_number#34]

(40) HashAggregate [codegen id : 9]
Input [11]: [ss_net_paid#23, s_store_name#2, s_state#4, i_current_price#26, i_size#27, i_color#28, i_units#29, i_manager_id#30, c_first_name#15, c_last_name#16, ca_state#8]
Keys [10]: [c_last_name#16, c_first_name#15, s_store_name#2, ca_state#8, s_state#4, i_color#28, i_current_price#26, i_manager_id#30, i_units#29, i_size#27]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#23))]
Aggregate Attributes [1]: [sum#37]
Results [11]: [c_last_name#16, c_first_name#15, s_store_name#2, ca_state#8, s_state#4, i_color#28, i_current_price#26, i_manager_id#30, i_units#29, i_size#27, sum#38]

(41) Exchange
Input [11]: [c_last_name#16, c_first_name#15, s_store_name#2, ca_state#8, s_state#4, i_color#28, i_current_price#26, i_manager_id#30, i_units#29, i_size#27, sum#38]
Arguments: hashpartitioning(c_last_name#16, c_first_name#15, s_store_name#2, ca_state#8, s_state#4, i_color#28, i_current_price#26, i_manager_id#30, i_units#29, i_size#27, 5), ENSURE_REQUIREMENTS, [id=#39]

(42) HashAggregate [codegen id : 10]
Input [11]: [c_last_name#16, c_first_name#15, s_store_name#2, ca_state#8, s_state#4, i_color#28, i_current_price#26, i_manager_id#30, i_units#29, i_size#27, sum#38]
Keys [10]: [c_last_name#16, c_first_name#15, s_store_name#2, ca_state#8, s_state#4, i_color#28, i_current_price#26, i_manager_id#30, i_units#29, i_size#27]
Functions [1]: [sum(UnscaledValue(ss_net_paid#23))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#23))#40]
Results [4]: [c_last_name#16, c_first_name#15, s_store_name#2, MakeDecimal(sum(UnscaledValue(ss_net_paid#23))#40,17,2) AS netpaid#41]

(43) HashAggregate [codegen id : 10]
Input [4]: [c_last_name#16, c_first_name#15, s_store_name#2, netpaid#41]
Keys [3]: [c_last_name#16, c_first_name#15, s_store_name#2]
Functions [1]: [partial_sum(netpaid#41)]
Aggregate Attributes [2]: [sum#42, isEmpty#43]
Results [5]: [c_last_name#16, c_first_name#15, s_store_name#2, sum#44, isEmpty#45]

(44) Exchange
Input [5]: [c_last_name#16, c_first_name#15, s_store_name#2, sum#44, isEmpty#45]
Arguments: hashpartitioning(c_last_name#16, c_first_name#15, s_store_name#2, 5), ENSURE_REQUIREMENTS, [id=#46]

(45) HashAggregate [codegen id : 11]
Input [5]: [c_last_name#16, c_first_name#15, s_store_name#2, sum#44, isEmpty#45]
Keys [3]: [c_last_name#16, c_first_name#15, s_store_name#2]
Functions [1]: [sum(netpaid#41)]
Aggregate Attributes [1]: [sum(netpaid#41)#47]
Results [4]: [c_last_name#16, c_first_name#15, s_store_name#2, sum(netpaid#41)#47 AS paid#48]

(46) Filter [codegen id : 11]
Input [4]: [c_last_name#16, c_first_name#15, s_store_name#2, paid#48]
Condition : (isnotnull(paid#48) AND (cast(paid#48 as decimal(33,8)) > cast(Subquery scalar-subquery#49, [id=#50] as decimal(33,8))))

(47) Exchange
Input [4]: [c_last_name#16, c_first_name#15, s_store_name#2, paid#48]
Arguments: rangepartitioning(c_last_name#16 ASC NULLS FIRST, c_first_name#15 ASC NULLS FIRST, s_store_name#2 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [id=#51]

(48) Sort [codegen id : 12]
Input [4]: [c_last_name#16, c_first_name#15, s_store_name#2, paid#48]
Arguments: [c_last_name#16 ASC NULLS FIRST, c_first_name#15 ASC NULLS FIRST, s_store_name#2 ASC NULLS FIRST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 46 Hosting Expression = Subquery scalar-subquery#49, [id=#50]
* HashAggregate (88)
+- Exchange (87)
   +- * HashAggregate (86)
      +- * HashAggregate (85)
         +- Exchange (84)
            +- * HashAggregate (83)
               +- * Project (82)
                  +- * SortMergeJoin Inner (81)
                     :- * Sort (78)
                     :  +- Exchange (77)
                     :     +- * Project (76)
                     :        +- * SortMergeJoin Inner (75)
                     :           :- * Sort (69)
                     :           :  +- Exchange (68)
                     :           :     +- * Project (67)
                     :           :        +- * BroadcastHashJoin Inner BuildLeft (66)
                     :           :           :- BroadcastExchange (61)
                     :           :           :  +- * Project (60)
                     :           :           :     +- * BroadcastHashJoin Inner BuildLeft (59)
                     :           :           :        :- BroadcastExchange (55)
                     :           :           :        :  +- * Project (54)
                     :           :           :        :     +- * BroadcastHashJoin Inner BuildLeft (53)
                     :           :           :        :        :- ReusedExchange (49)
                     :           :           :        :        +- * Filter (52)
                     :           :           :        :           +- * ColumnarToRow (51)
                     :           :           :        :              +- Scan parquet default.customer_address (50)
                     :           :           :        +- * Filter (58)
                     :           :           :           +- * ColumnarToRow (57)
                     :           :           :              +- Scan parquet default.customer (56)
                     :           :           +- * Project (65)
                     :           :              +- * Filter (64)
                     :           :                 +- * ColumnarToRow (63)
                     :           :                    +- Scan parquet default.store_sales (62)
                     :           +- * Sort (74)
                     :              +- Exchange (73)
                     :                 +- * Filter (72)
                     :                    +- * ColumnarToRow (71)
                     :                       +- Scan parquet default.item (70)
                     +- * Sort (80)
                        +- ReusedExchange (79)


(49) ReusedExchange [Reuses operator id: 5]
Output [4]: [s_store_sk#52, s_store_name#53, s_state#54, s_zip#55]

(50) Scan parquet default.customer_address
Output [4]: [ca_address_sk#56, ca_state#57, ca_zip#58, ca_country#59]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_zip:string,ca_country:string>

(51) ColumnarToRow
Input [4]: [ca_address_sk#56, ca_state#57, ca_zip#58, ca_country#59]

(52) Filter
Input [4]: [ca_address_sk#56, ca_state#57, ca_zip#58, ca_country#59]
Condition : (((isnotnull(ca_address_sk#56) AND isnotnull(ca_country#59)) AND isnotnull(ca_zip#58)) AND isnotnull(upper(ca_country#59)))

(53) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [s_zip#55]
Right keys [1]: [ca_zip#58]
Join condition: None

(54) Project [codegen id : 2]
Output [6]: [s_store_sk#52, s_store_name#53, s_state#54, ca_address_sk#56, ca_state#57, upper(ca_country#59) AS upper(spark_catalog.default.customer_address.ca_country)#60]
Input [8]: [s_store_sk#52, s_store_name#53, s_state#54, s_zip#55, ca_address_sk#56, ca_state#57, ca_zip#58, ca_country#59]

(55) BroadcastExchange
Input [6]: [s_store_sk#52, s_store_name#53, s_state#54, ca_address_sk#56, ca_state#57, upper(spark_catalog.default.customer_address.ca_country)#60]
Arguments: HashedRelationBroadcastMode(List(input[3, int, true], input[5, string, true]),false), [id=#61]

(56) Scan parquet default.customer
Output [5]: [c_customer_sk#62, c_current_addr_sk#63, c_first_name#64, c_last_name#65, c_birth_country#66]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(57) ColumnarToRow
Input [5]: [c_customer_sk#62, c_current_addr_sk#63, c_first_name#64, c_last_name#65, c_birth_country#66]

(58) Filter
Input [5]: [c_customer_sk#62, c_current_addr_sk#63, c_first_name#64, c_last_name#65, c_birth_country#66]
Condition : ((isnotnull(c_customer_sk#62) AND isnotnull(c_current_addr_sk#63)) AND isnotnull(c_birth_country#66))

(59) BroadcastHashJoin [codegen id : 3]
Left keys [2]: [ca_address_sk#56, upper(spark_catalog.default.customer_address.ca_country)#60]
Right keys [2]: [c_current_addr_sk#63, c_birth_country#66]
Join condition: None

(60) Project [codegen id : 3]
Output [7]: [s_store_sk#52, s_store_name#53, s_state#54, ca_state#57, c_customer_sk#62, c_first_name#64, c_last_name#65]
Input [11]: [s_store_sk#52, s_store_name#53, s_state#54, ca_address_sk#56, ca_state#57, upper(spark_catalog.default.customer_address.ca_country)#60, c_customer_sk#62, c_current_addr_sk#63, c_first_name#64, c_last_name#65, c_birth_country#66]

(61) BroadcastExchange
Input [7]: [s_store_sk#52, s_store_name#53, s_state#54, ca_state#57, c_customer_sk#62, c_first_name#64, c_last_name#65]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[0, int, true] as bigint), 32) | (cast(input[4, int, true] as bigint) & 4294967295))),false), [id=#67]

(62) Scan parquet default.store_sales
Output [6]: [ss_item_sk#68, ss_customer_sk#69, ss_store_sk#70, ss_ticket_number#71, ss_net_paid#72, ss_sold_date_sk#73]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(63) ColumnarToRow
Input [6]: [ss_item_sk#68, ss_customer_sk#69, ss_store_sk#70, ss_ticket_number#71, ss_net_paid#72, ss_sold_date_sk#73]

(64) Filter
Input [6]: [ss_item_sk#68, ss_customer_sk#69, ss_store_sk#70, ss_ticket_number#71, ss_net_paid#72, ss_sold_date_sk#73]
Condition : (((isnotnull(ss_ticket_number#71) AND isnotnull(ss_item_sk#68)) AND isnotnull(ss_store_sk#70)) AND isnotnull(ss_customer_sk#69))

(65) Project
Output [5]: [ss_item_sk#68, ss_customer_sk#69, ss_store_sk#70, ss_ticket_number#71, ss_net_paid#72]
Input [6]: [ss_item_sk#68, ss_customer_sk#69, ss_store_sk#70, ss_ticket_number#71, ss_net_paid#72, ss_sold_date_sk#73]

(66) BroadcastHashJoin [codegen id : 4]
Left keys [2]: [s_store_sk#52, c_customer_sk#62]
Right keys [2]: [ss_store_sk#70, ss_customer_sk#69]
Join condition: None

(67) Project [codegen id : 4]
Output [8]: [s_store_name#53, s_state#54, ca_state#57, c_first_name#64, c_last_name#65, ss_item_sk#68, ss_ticket_number#71, ss_net_paid#72]
Input [12]: [s_store_sk#52, s_store_name#53, s_state#54, ca_state#57, c_customer_sk#62, c_first_name#64, c_last_name#65, ss_item_sk#68, ss_customer_sk#69, ss_store_sk#70, ss_ticket_number#71, ss_net_paid#72]

(68) Exchange
Input [8]: [s_store_name#53, s_state#54, ca_state#57, c_first_name#64, c_last_name#65, ss_item_sk#68, ss_ticket_number#71, ss_net_paid#72]
Arguments: hashpartitioning(ss_item_sk#68, 5), ENSURE_REQUIREMENTS, [id=#74]

(69) Sort [codegen id : 5]
Input [8]: [s_store_name#53, s_state#54, ca_state#57, c_first_name#64, c_last_name#65, ss_item_sk#68, ss_ticket_number#71, ss_net_paid#72]
Arguments: [ss_item_sk#68 ASC NULLS FIRST], false, 0

(70) Scan parquet default.item
Output [6]: [i_item_sk#75, i_current_price#76, i_size#77, i_color#78, i_units#79, i_manager_id#80]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(71) ColumnarToRow [codegen id : 6]
Input [6]: [i_item_sk#75, i_current_price#76, i_size#77, i_color#78, i_units#79, i_manager_id#80]

(72) Filter [codegen id : 6]
Input [6]: [i_item_sk#75, i_current_price#76, i_size#77, i_color#78, i_units#79, i_manager_id#80]
Condition : isnotnull(i_item_sk#75)

(73) Exchange
Input [6]: [i_item_sk#75, i_current_price#76, i_size#77, i_color#78, i_units#79, i_manager_id#80]
Arguments: hashpartitioning(i_item_sk#75, 5), ENSURE_REQUIREMENTS, [id=#81]

(74) Sort [codegen id : 7]
Input [6]: [i_item_sk#75, i_current_price#76, i_size#77, i_color#78, i_units#79, i_manager_id#80]
Arguments: [i_item_sk#75 ASC NULLS FIRST], false, 0

(75) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#68]
Right keys [1]: [i_item_sk#75]
Join condition: None

(76) Project [codegen id : 8]
Output [13]: [s_store_name#53, s_state#54, ca_state#57, c_first_name#64, c_last_name#65, ss_item_sk#68, ss_ticket_number#71, ss_net_paid#72, i_current_price#76, i_size#77, i_color#78, i_units#79, i_manager_id#80]
Input [14]: [s_store_name#53, s_state#54, ca_state#57, c_first_name#64, c_last_name#65, ss_item_sk#68, ss_ticket_number#71, ss_net_paid#72, i_item_sk#75, i_current_price#76, i_size#77, i_color#78, i_units#79, i_manager_id#80]

(77) Exchange
Input [13]: [s_store_name#53, s_state#54, ca_state#57, c_first_name#64, c_last_name#65, ss_item_sk#68, ss_ticket_number#71, ss_net_paid#72, i_current_price#76, i_size#77, i_color#78, i_units#79, i_manager_id#80]
Arguments: hashpartitioning(ss_ticket_number#71, ss_item_sk#68, 5), ENSURE_REQUIREMENTS, [id=#82]

(78) Sort [codegen id : 9]
Input [13]: [s_store_name#53, s_state#54, ca_state#57, c_first_name#64, c_last_name#65, ss_item_sk#68, ss_ticket_number#71, ss_net_paid#72, i_current_price#76, i_size#77, i_color#78, i_units#79, i_manager_id#80]
Arguments: [ss_ticket_number#71 ASC NULLS FIRST, ss_item_sk#68 ASC NULLS FIRST], false, 0

(79) ReusedExchange [Reuses operator id: 36]
Output [2]: [sr_item_sk#83, sr_ticket_number#84]

(80) Sort [codegen id : 11]
Input [2]: [sr_item_sk#83, sr_ticket_number#84]
Arguments: [sr_ticket_number#84 ASC NULLS FIRST, sr_item_sk#83 ASC NULLS FIRST], false, 0

(81) SortMergeJoin [codegen id : 12]
Left keys [2]: [ss_ticket_number#71, ss_item_sk#68]
Right keys [2]: [sr_ticket_number#84, sr_item_sk#83]
Join condition: None

(82) Project [codegen id : 12]
Output [11]: [ss_net_paid#72, s_store_name#53, s_state#54, i_current_price#76, i_size#77, i_color#78, i_units#79, i_manager_id#80, c_first_name#64, c_last_name#65, ca_state#57]
Input [15]: [s_store_name#53, s_state#54, ca_state#57, c_first_name#64, c_last_name#65, ss_item_sk#68, ss_ticket_number#71, ss_net_paid#72, i_current_price#76, i_size#77, i_color#78, i_units#79, i_manager_id#80, sr_item_sk#83, sr_ticket_number#84]

(83) HashAggregate [codegen id : 12]
Input [11]: [ss_net_paid#72, s_store_name#53, s_state#54, i_current_price#76, i_size#77, i_color#78, i_units#79, i_manager_id#80, c_first_name#64, c_last_name#65, ca_state#57]
Keys [10]: [c_last_name#65, c_first_name#64, s_store_name#53, ca_state#57, s_state#54, i_color#78, i_current_price#76, i_manager_id#80, i_units#79, i_size#77]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#72))]
Aggregate Attributes [1]: [sum#85]
Results [11]: [c_last_name#65, c_first_name#64, s_store_name#53, ca_state#57, s_state#54, i_color#78, i_current_price#76, i_manager_id#80, i_units#79, i_size#77, sum#86]

(84) Exchange
Input [11]: [c_last_name#65, c_first_name#64, s_store_name#53, ca_state#57, s_state#54, i_color#78, i_current_price#76, i_manager_id#80, i_units#79, i_size#77, sum#86]
Arguments: hashpartitioning(c_last_name#65, c_first_name#64, s_store_name#53, ca_state#57, s_state#54, i_color#78, i_current_price#76, i_manager_id#80, i_units#79, i_size#77, 5), ENSURE_REQUIREMENTS, [id=#87]

(85) HashAggregate [codegen id : 13]
Input [11]: [c_last_name#65, c_first_name#64, s_store_name#53, ca_state#57, s_state#54, i_color#78, i_current_price#76, i_manager_id#80, i_units#79, i_size#77, sum#86]
Keys [10]: [c_last_name#65, c_first_name#64, s_store_name#53, ca_state#57, s_state#54, i_color#78, i_current_price#76, i_manager_id#80, i_units#79, i_size#77]
Functions [1]: [sum(UnscaledValue(ss_net_paid#72))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#72))#88]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_paid#72))#88,17,2) AS netpaid#41]

(86) HashAggregate [codegen id : 13]
Input [1]: [netpaid#41]
Keys: []
Functions [1]: [partial_avg(netpaid#41)]
Aggregate Attributes [2]: [sum#89, count#90]
Results [2]: [sum#91, count#92]

(87) Exchange
Input [2]: [sum#91, count#92]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#93]

(88) HashAggregate [codegen id : 14]
Input [2]: [sum#91, count#92]
Keys: []
Functions [1]: [avg(netpaid#41)]
Aggregate Attributes [1]: [avg(netpaid#41)#94]
Results [1]: [CheckOverflow((0.050000 * promote_precision(avg(netpaid#41)#94)), DecimalType(24,8), true) AS (0.05 * avg(netpaid))#95]


