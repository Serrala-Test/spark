== Physical Plan ==
* Sort (59)
+- Exchange (58)
   +- * Project (57)
      +- * Filter (56)
         +- * HashAggregate (55)
            +- Exchange (54)
               +- * HashAggregate (53)
                  +- * HashAggregate (52)
                     +- Exchange (51)
                        +- * HashAggregate (50)
                           +- * Project (49)
                              +- * SortMergeJoin Inner (48)
                                 :- * Sort (42)
                                 :  +- Exchange (41)
                                 :     +- * Project (40)
                                 :        +- * SortMergeJoin Inner (39)
                                 :           :- * Sort (32)
                                 :           :  +- Exchange (31)
                                 :           :     +- * Project (30)
                                 :           :        +- * SortMergeJoin Inner (29)
                                 :           :           :- * Sort (12)
                                 :           :           :  +- Exchange (11)
                                 :           :           :     +- * Project (10)
                                 :           :           :        +- * BroadcastHashJoin Inner BuildRight (9)
                                 :           :           :           :- * Filter (3)
                                 :           :           :           :  +- * ColumnarToRow (2)
                                 :           :           :           :     +- Scan parquet default.store_sales (1)
                                 :           :           :           +- BroadcastExchange (8)
                                 :           :           :              +- * Project (7)
                                 :           :           :                 +- * Filter (6)
                                 :           :           :                    +- * ColumnarToRow (5)
                                 :           :           :                       +- Scan parquet default.store (4)
                                 :           :           +- * Sort (28)
                                 :           :              +- Exchange (27)
                                 :           :                 +- * Project (26)
                                 :           :                    +- * SortMergeJoin Inner (25)
                                 :           :                       :- * Sort (18)
                                 :           :                       :  +- Exchange (17)
                                 :           :                       :     +- * Project (16)
                                 :           :                       :        +- * Filter (15)
                                 :           :                       :           +- * ColumnarToRow (14)
                                 :           :                       :              +- Scan parquet default.customer (13)
                                 :           :                       +- * Sort (24)
                                 :           :                          +- Exchange (23)
                                 :           :                             +- * Project (22)
                                 :           :                                +- * Filter (21)
                                 :           :                                   +- * ColumnarToRow (20)
                                 :           :                                      +- Scan parquet default.customer_address (19)
                                 :           +- * Sort (38)
                                 :              +- Exchange (37)
                                 :                 +- * Project (36)
                                 :                    +- * Filter (35)
                                 :                       +- * ColumnarToRow (34)
                                 :                          +- Scan parquet default.item (33)
                                 +- * Sort (47)
                                    +- Exchange (46)
                                       +- * Filter (45)
                                          +- * ColumnarToRow (44)
                                             +- Scan parquet default.store_returns (43)


(1) Scan parquet default.store_sales
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]

(3) Filter [codegen id : 2]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Condition : (((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2))

(4) Scan parquet default.store
Output [5]: [s_store_sk#6, s_store_name#7, s_market_id#8, s_state#9, s_zip#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(5) ColumnarToRow [codegen id : 1]
Input [5]: [s_store_sk#6, s_store_name#7, s_market_id#8, s_state#9, s_zip#10]

(6) Filter [codegen id : 1]
Input [5]: [s_store_sk#6, s_store_name#7, s_market_id#8, s_state#9, s_zip#10]
Condition : (((isnotnull(s_market_id#8) AND (s_market_id#8 = 8)) AND isnotnull(s_store_sk#6)) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_zip#10, 10, false, true)))

(7) Project [codegen id : 1]
Output [4]: [s_store_sk#6, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_store_name#7, 50, false, true) AS s_store_name#11, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#9, 2, false, true) AS s_state#12, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_zip#10, 10, false, true) AS s_zip#13]
Input [5]: [s_store_sk#6, s_store_name#7, s_market_id#8, s_state#9, s_zip#10]

(8) BroadcastExchange
Input [4]: [s_store_sk#6, s_store_name#11, s_state#12, s_zip#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#6]
Join condition: None

(10) Project [codegen id : 2]
Output [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#11, s_state#12, s_zip#13]
Input [9]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, s_store_sk#6, s_store_name#11, s_state#12, s_zip#13]

(11) Exchange
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#11, s_state#12, s_zip#13]
Arguments: hashpartitioning(ss_customer_sk#2, s_zip#13, 5), ENSURE_REQUIREMENTS, [id=#15]

(12) Sort [codegen id : 3]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#11, s_state#12, s_zip#13]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST, s_zip#13 ASC NULLS FIRST], false, 0

(13) Scan parquet default.customer
Output [5]: [c_customer_sk#16, c_current_addr_sk#17, c_first_name#18, c_last_name#19, c_birth_country#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(14) ColumnarToRow [codegen id : 4]
Input [5]: [c_customer_sk#16, c_current_addr_sk#17, c_first_name#18, c_last_name#19, c_birth_country#20]

(15) Filter [codegen id : 4]
Input [5]: [c_customer_sk#16, c_current_addr_sk#17, c_first_name#18, c_last_name#19, c_birth_country#20]
Condition : ((isnotnull(c_customer_sk#16) AND isnotnull(c_current_addr_sk#17)) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, c_birth_country#20, 20, false, true)))

(16) Project [codegen id : 4]
Output [5]: [c_customer_sk#16, c_current_addr_sk#17, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#18, 20, false, true) AS c_first_name#21, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#19, 30, false, true) AS c_last_name#22, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, c_birth_country#20, 20, false, true) AS c_birth_country#23]
Input [5]: [c_customer_sk#16, c_current_addr_sk#17, c_first_name#18, c_last_name#19, c_birth_country#20]

(17) Exchange
Input [5]: [c_customer_sk#16, c_current_addr_sk#17, c_first_name#21, c_last_name#22, c_birth_country#23]
Arguments: hashpartitioning(c_current_addr_sk#17, c_birth_country#23, 5), ENSURE_REQUIREMENTS, [id=#24]

(18) Sort [codegen id : 5]
Input [5]: [c_customer_sk#16, c_current_addr_sk#17, c_first_name#21, c_last_name#22, c_birth_country#23]
Arguments: [c_current_addr_sk#17 ASC NULLS FIRST, c_birth_country#23 ASC NULLS FIRST], false, 0

(19) Scan parquet default.customer_address
Output [4]: [ca_address_sk#25, ca_state#26, ca_zip#27, ca_country#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_zip:string,ca_country:string>

(20) ColumnarToRow [codegen id : 6]
Input [4]: [ca_address_sk#25, ca_state#26, ca_zip#27, ca_country#28]

(21) Filter [codegen id : 6]
Input [4]: [ca_address_sk#25, ca_state#26, ca_zip#27, ca_country#28]
Condition : ((isnotnull(ca_address_sk#25) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_country#28, 20, false, true))) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_zip#27, 10, false, true)))

(22) Project [codegen id : 6]
Output [4]: [ca_address_sk#25, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#26, 2, false, true) AS ca_state#29, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_zip#27, 10, false, true) AS ca_zip#30, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_country#28, 20, false, true) AS ca_country#31]
Input [4]: [ca_address_sk#25, ca_state#26, ca_zip#27, ca_country#28]

(23) Exchange
Input [4]: [ca_address_sk#25, ca_state#29, ca_zip#30, ca_country#31]
Arguments: hashpartitioning(ca_address_sk#25, upper(ca_country#31), 5), ENSURE_REQUIREMENTS, [id=#32]

(24) Sort [codegen id : 7]
Input [4]: [ca_address_sk#25, ca_state#29, ca_zip#30, ca_country#31]
Arguments: [ca_address_sk#25 ASC NULLS FIRST, upper(ca_country#31) ASC NULLS FIRST], false, 0

(25) SortMergeJoin [codegen id : 8]
Left keys [2]: [c_current_addr_sk#17, c_birth_country#23]
Right keys [2]: [ca_address_sk#25, upper(ca_country#31)]
Join condition: None

(26) Project [codegen id : 8]
Output [5]: [c_customer_sk#16, c_first_name#21, c_last_name#22, ca_state#29, ca_zip#30]
Input [9]: [c_customer_sk#16, c_current_addr_sk#17, c_first_name#21, c_last_name#22, c_birth_country#23, ca_address_sk#25, ca_state#29, ca_zip#30, ca_country#31]

(27) Exchange
Input [5]: [c_customer_sk#16, c_first_name#21, c_last_name#22, ca_state#29, ca_zip#30]
Arguments: hashpartitioning(c_customer_sk#16, ca_zip#30, 5), ENSURE_REQUIREMENTS, [id=#33]

(28) Sort [codegen id : 9]
Input [5]: [c_customer_sk#16, c_first_name#21, c_last_name#22, ca_state#29, ca_zip#30]
Arguments: [c_customer_sk#16 ASC NULLS FIRST, ca_zip#30 ASC NULLS FIRST], false, 0

(29) SortMergeJoin [codegen id : 10]
Left keys [2]: [ss_customer_sk#2, s_zip#13]
Right keys [2]: [c_customer_sk#16, ca_zip#30]
Join condition: None

(30) Project [codegen id : 10]
Output [8]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#11, s_state#12, c_first_name#21, c_last_name#22, ca_state#29]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#11, s_state#12, s_zip#13, c_customer_sk#16, c_first_name#21, c_last_name#22, ca_state#29, ca_zip#30]

(31) Exchange
Input [8]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#11, s_state#12, c_first_name#21, c_last_name#22, ca_state#29]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#34]

(32) Sort [codegen id : 11]
Input [8]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#11, s_state#12, c_first_name#21, c_last_name#22, ca_state#29]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(33) Scan parquet default.item
Output [6]: [i_item_sk#35, i_current_price#36, i_size#37, i_color#38, i_units#39, i_manager_id#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(34) ColumnarToRow [codegen id : 12]
Input [6]: [i_item_sk#35, i_current_price#36, i_size#37, i_color#38, i_units#39, i_manager_id#40]

(35) Filter [codegen id : 12]
Input [6]: [i_item_sk#35, i_current_price#36, i_size#37, i_color#38, i_units#39, i_manager_id#40]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_color#38, 20, false, true) = pale                ) AND isnotnull(i_item_sk#35))

(36) Project [codegen id : 12]
Output [6]: [i_item_sk#35, i_current_price#36, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_size#37, 20, false, true) AS i_size#41, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_color#38, 20, false, true) AS i_color#42, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_units#39, 10, false, true) AS i_units#43, i_manager_id#40]
Input [6]: [i_item_sk#35, i_current_price#36, i_size#37, i_color#38, i_units#39, i_manager_id#40]

(37) Exchange
Input [6]: [i_item_sk#35, i_current_price#36, i_size#41, i_color#42, i_units#43, i_manager_id#40]
Arguments: hashpartitioning(i_item_sk#35, 5), ENSURE_REQUIREMENTS, [id=#44]

(38) Sort [codegen id : 13]
Input [6]: [i_item_sk#35, i_current_price#36, i_size#41, i_color#42, i_units#43, i_manager_id#40]
Arguments: [i_item_sk#35 ASC NULLS FIRST], false, 0

(39) SortMergeJoin [codegen id : 14]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#35]
Join condition: None

(40) Project [codegen id : 14]
Output [13]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#11, s_state#12, c_first_name#21, c_last_name#22, ca_state#29, i_current_price#36, i_size#41, i_color#42, i_units#43, i_manager_id#40]
Input [14]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#11, s_state#12, c_first_name#21, c_last_name#22, ca_state#29, i_item_sk#35, i_current_price#36, i_size#41, i_color#42, i_units#43, i_manager_id#40]

(41) Exchange
Input [13]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#11, s_state#12, c_first_name#21, c_last_name#22, ca_state#29, i_current_price#36, i_size#41, i_color#42, i_units#43, i_manager_id#40]
Arguments: hashpartitioning(cast(ss_ticket_number#4 as bigint), cast(ss_item_sk#1 as bigint), 5), ENSURE_REQUIREMENTS, [id=#45]

(42) Sort [codegen id : 15]
Input [13]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#11, s_state#12, c_first_name#21, c_last_name#22, ca_state#29, i_current_price#36, i_size#41, i_color#42, i_units#43, i_manager_id#40]
Arguments: [cast(ss_ticket_number#4 as bigint) ASC NULLS FIRST, cast(ss_item_sk#1 as bigint) ASC NULLS FIRST], false, 0

(43) Scan parquet default.store_returns
Output [2]: [sr_item_sk#46, sr_ticket_number#47]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:bigint,sr_ticket_number:bigint>

(44) ColumnarToRow [codegen id : 16]
Input [2]: [sr_item_sk#46, sr_ticket_number#47]

(45) Filter [codegen id : 16]
Input [2]: [sr_item_sk#46, sr_ticket_number#47]
Condition : (isnotnull(sr_ticket_number#47) AND isnotnull(sr_item_sk#46))

(46) Exchange
Input [2]: [sr_item_sk#46, sr_ticket_number#47]
Arguments: hashpartitioning(sr_ticket_number#47, sr_item_sk#46, 5), ENSURE_REQUIREMENTS, [id=#48]

(47) Sort [codegen id : 17]
Input [2]: [sr_item_sk#46, sr_ticket_number#47]
Arguments: [sr_ticket_number#47 ASC NULLS FIRST, sr_item_sk#46 ASC NULLS FIRST], false, 0

(48) SortMergeJoin [codegen id : 18]
Left keys [2]: [cast(ss_ticket_number#4 as bigint), cast(ss_item_sk#1 as bigint)]
Right keys [2]: [sr_ticket_number#47, sr_item_sk#46]
Join condition: None

(49) Project [codegen id : 18]
Output [11]: [ss_net_paid#5, s_store_name#11, s_state#12, i_current_price#36, i_size#41, i_color#42, i_units#43, i_manager_id#40, c_first_name#21, c_last_name#22, ca_state#29]
Input [15]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#11, s_state#12, c_first_name#21, c_last_name#22, ca_state#29, i_current_price#36, i_size#41, i_color#42, i_units#43, i_manager_id#40, sr_item_sk#46, sr_ticket_number#47]

(50) HashAggregate [codegen id : 18]
Input [11]: [ss_net_paid#5, s_store_name#11, s_state#12, i_current_price#36, i_size#41, i_color#42, i_units#43, i_manager_id#40, c_first_name#21, c_last_name#22, ca_state#29]
Keys [10]: [c_last_name#22, c_first_name#21, s_store_name#11, ca_state#29, s_state#12, i_color#42, i_current_price#36, i_manager_id#40, i_units#43, i_size#41]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum#49]
Results [11]: [c_last_name#22, c_first_name#21, s_store_name#11, ca_state#29, s_state#12, i_color#42, i_current_price#36, i_manager_id#40, i_units#43, i_size#41, sum#50]

(51) Exchange
Input [11]: [c_last_name#22, c_first_name#21, s_store_name#11, ca_state#29, s_state#12, i_color#42, i_current_price#36, i_manager_id#40, i_units#43, i_size#41, sum#50]
Arguments: hashpartitioning(c_last_name#22, c_first_name#21, s_store_name#11, ca_state#29, s_state#12, i_color#42, i_current_price#36, i_manager_id#40, i_units#43, i_size#41, 5), ENSURE_REQUIREMENTS, [id=#51]

(52) HashAggregate [codegen id : 19]
Input [11]: [c_last_name#22, c_first_name#21, s_store_name#11, ca_state#29, s_state#12, i_color#42, i_current_price#36, i_manager_id#40, i_units#43, i_size#41, sum#50]
Keys [10]: [c_last_name#22, c_first_name#21, s_store_name#11, ca_state#29, s_state#12, i_color#42, i_current_price#36, i_manager_id#40, i_units#43, i_size#41]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#5))#52]
Results [4]: [c_last_name#22, c_first_name#21, s_store_name#11, MakeDecimal(sum(UnscaledValue(ss_net_paid#5))#52,17,2) AS netpaid#53]

(53) HashAggregate [codegen id : 19]
Input [4]: [c_last_name#22, c_first_name#21, s_store_name#11, netpaid#53]
Keys [3]: [c_last_name#22, c_first_name#21, s_store_name#11]
Functions [1]: [partial_sum(netpaid#53)]
Aggregate Attributes [2]: [sum#54, isEmpty#55]
Results [5]: [c_last_name#22, c_first_name#21, s_store_name#11, sum#56, isEmpty#57]

(54) Exchange
Input [5]: [c_last_name#22, c_first_name#21, s_store_name#11, sum#56, isEmpty#57]
Arguments: hashpartitioning(c_last_name#22, c_first_name#21, s_store_name#11, 5), ENSURE_REQUIREMENTS, [id=#58]

(55) HashAggregate [codegen id : 20]
Input [5]: [c_last_name#22, c_first_name#21, s_store_name#11, sum#56, isEmpty#57]
Keys [3]: [c_last_name#22, c_first_name#21, s_store_name#11]
Functions [1]: [sum(netpaid#53)]
Aggregate Attributes [1]: [sum(netpaid#53)#59]
Results [5]: [c_last_name#22, c_first_name#21, s_store_name#11, sum(netpaid#53)#59 AS paid#60, sum(netpaid#53)#59 AS sum(netpaid#53)#61]

(56) Filter [codegen id : 20]
Input [5]: [c_last_name#22, c_first_name#21, s_store_name#11, paid#60, sum(netpaid#53)#61]
Condition : (isnotnull(sum(netpaid#53)#61) AND (cast(sum(netpaid#53)#61 as decimal(33,8)) > cast(Subquery scalar-subquery#62, [id=#63] as decimal(33,8))))

(57) Project [codegen id : 20]
Output [4]: [c_last_name#22, c_first_name#21, s_store_name#11, paid#60]
Input [5]: [c_last_name#22, c_first_name#21, s_store_name#11, paid#60, sum(netpaid#53)#61]

(58) Exchange
Input [4]: [c_last_name#22, c_first_name#21, s_store_name#11, paid#60]
Arguments: rangepartitioning(c_last_name#22 ASC NULLS FIRST, c_first_name#21 ASC NULLS FIRST, s_store_name#11 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [id=#64]

(59) Sort [codegen id : 21]
Input [4]: [c_last_name#22, c_first_name#21, s_store_name#11, paid#60]
Arguments: [c_last_name#22 ASC NULLS FIRST, c_first_name#21 ASC NULLS FIRST, s_store_name#11 ASC NULLS FIRST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 56 Hosting Expression = Subquery scalar-subquery#62, [id=#63]
* HashAggregate (114)
+- Exchange (113)
   +- * HashAggregate (112)
      +- * HashAggregate (111)
         +- Exchange (110)
            +- * HashAggregate (109)
               +- * Project (108)
                  +- * SortMergeJoin Inner (107)
                     :- * Sort (101)
                     :  +- Exchange (100)
                     :     +- * Project (99)
                     :        +- * SortMergeJoin Inner (98)
                     :           :- * Sort (91)
                     :           :  +- Exchange (90)
                     :           :     +- * Project (89)
                     :           :        +- * SortMergeJoin Inner (88)
                     :           :           :- * Sort (71)
                     :           :           :  +- Exchange (70)
                     :           :           :     +- * Project (69)
                     :           :           :        +- * BroadcastHashJoin Inner BuildRight (68)
                     :           :           :           :- * Filter (62)
                     :           :           :           :  +- * ColumnarToRow (61)
                     :           :           :           :     +- Scan parquet default.store_sales (60)
                     :           :           :           +- BroadcastExchange (67)
                     :           :           :              +- * Project (66)
                     :           :           :                 +- * Filter (65)
                     :           :           :                    +- * ColumnarToRow (64)
                     :           :           :                       +- Scan parquet default.store (63)
                     :           :           +- * Sort (87)
                     :           :              +- Exchange (86)
                     :           :                 +- * Project (85)
                     :           :                    +- * SortMergeJoin Inner (84)
                     :           :                       :- * Sort (77)
                     :           :                       :  +- Exchange (76)
                     :           :                       :     +- * Project (75)
                     :           :                       :        +- * Filter (74)
                     :           :                       :           +- * ColumnarToRow (73)
                     :           :                       :              +- Scan parquet default.customer (72)
                     :           :                       +- * Sort (83)
                     :           :                          +- Exchange (82)
                     :           :                             +- * Project (81)
                     :           :                                +- * Filter (80)
                     :           :                                   +- * ColumnarToRow (79)
                     :           :                                      +- Scan parquet default.customer_address (78)
                     :           +- * Sort (97)
                     :              +- Exchange (96)
                     :                 +- * Project (95)
                     :                    +- * Filter (94)
                     :                       +- * ColumnarToRow (93)
                     :                          +- Scan parquet default.item (92)
                     +- * Sort (106)
                        +- Exchange (105)
                           +- * Filter (104)
                              +- * ColumnarToRow (103)
                                 +- Scan parquet default.store_returns (102)


(60) Scan parquet default.store_sales
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(61) ColumnarToRow [codegen id : 2]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]

(62) Filter [codegen id : 2]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Condition : (((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2))

(63) Scan parquet default.store
Output [5]: [s_store_sk#6, s_store_name#7, s_market_id#8, s_state#9, s_zip#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(64) ColumnarToRow [codegen id : 1]
Input [5]: [s_store_sk#6, s_store_name#7, s_market_id#8, s_state#9, s_zip#10]

(65) Filter [codegen id : 1]
Input [5]: [s_store_sk#6, s_store_name#7, s_market_id#8, s_state#9, s_zip#10]
Condition : (((isnotnull(s_market_id#8) AND (s_market_id#8 = 8)) AND isnotnull(s_store_sk#6)) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_zip#10, 10, false, true)))

(66) Project [codegen id : 1]
Output [4]: [s_store_sk#6, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_store_name#7, 50, false, true) AS s_store_name#65, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#9, 2, false, true) AS s_state#66, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_zip#10, 10, false, true) AS s_zip#67]
Input [5]: [s_store_sk#6, s_store_name#7, s_market_id#8, s_state#9, s_zip#10]

(67) BroadcastExchange
Input [4]: [s_store_sk#6, s_store_name#65, s_state#66, s_zip#67]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#68]

(68) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#6]
Join condition: None

(69) Project [codegen id : 2]
Output [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#65, s_state#66, s_zip#67]
Input [9]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, s_store_sk#6, s_store_name#65, s_state#66, s_zip#67]

(70) Exchange
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#65, s_state#66, s_zip#67]
Arguments: hashpartitioning(ss_customer_sk#2, s_zip#67, 5), ENSURE_REQUIREMENTS, [id=#69]

(71) Sort [codegen id : 3]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#65, s_state#66, s_zip#67]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST, s_zip#67 ASC NULLS FIRST], false, 0

(72) Scan parquet default.customer
Output [5]: [c_customer_sk#16, c_current_addr_sk#17, c_first_name#18, c_last_name#19, c_birth_country#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(73) ColumnarToRow [codegen id : 4]
Input [5]: [c_customer_sk#16, c_current_addr_sk#17, c_first_name#18, c_last_name#19, c_birth_country#20]

(74) Filter [codegen id : 4]
Input [5]: [c_customer_sk#16, c_current_addr_sk#17, c_first_name#18, c_last_name#19, c_birth_country#20]
Condition : ((isnotnull(c_customer_sk#16) AND isnotnull(c_current_addr_sk#17)) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, c_birth_country#20, 20, false, true)))

(75) Project [codegen id : 4]
Output [5]: [c_customer_sk#16, c_current_addr_sk#17, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#18, 20, false, true) AS c_first_name#70, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#19, 30, false, true) AS c_last_name#71, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, c_birth_country#20, 20, false, true) AS c_birth_country#72]
Input [5]: [c_customer_sk#16, c_current_addr_sk#17, c_first_name#18, c_last_name#19, c_birth_country#20]

(76) Exchange
Input [5]: [c_customer_sk#16, c_current_addr_sk#17, c_first_name#70, c_last_name#71, c_birth_country#72]
Arguments: hashpartitioning(c_current_addr_sk#17, c_birth_country#72, 5), ENSURE_REQUIREMENTS, [id=#73]

(77) Sort [codegen id : 5]
Input [5]: [c_customer_sk#16, c_current_addr_sk#17, c_first_name#70, c_last_name#71, c_birth_country#72]
Arguments: [c_current_addr_sk#17 ASC NULLS FIRST, c_birth_country#72 ASC NULLS FIRST], false, 0

(78) Scan parquet default.customer_address
Output [4]: [ca_address_sk#25, ca_state#26, ca_zip#27, ca_country#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_zip:string,ca_country:string>

(79) ColumnarToRow [codegen id : 6]
Input [4]: [ca_address_sk#25, ca_state#26, ca_zip#27, ca_country#28]

(80) Filter [codegen id : 6]
Input [4]: [ca_address_sk#25, ca_state#26, ca_zip#27, ca_country#28]
Condition : ((isnotnull(ca_address_sk#25) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_country#28, 20, false, true))) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_zip#27, 10, false, true)))

(81) Project [codegen id : 6]
Output [4]: [ca_address_sk#25, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#26, 2, false, true) AS ca_state#74, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_zip#27, 10, false, true) AS ca_zip#75, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_country#28, 20, false, true) AS ca_country#76]
Input [4]: [ca_address_sk#25, ca_state#26, ca_zip#27, ca_country#28]

(82) Exchange
Input [4]: [ca_address_sk#25, ca_state#74, ca_zip#75, ca_country#76]
Arguments: hashpartitioning(ca_address_sk#25, upper(ca_country#76), 5), ENSURE_REQUIREMENTS, [id=#77]

(83) Sort [codegen id : 7]
Input [4]: [ca_address_sk#25, ca_state#74, ca_zip#75, ca_country#76]
Arguments: [ca_address_sk#25 ASC NULLS FIRST, upper(ca_country#76) ASC NULLS FIRST], false, 0

(84) SortMergeJoin [codegen id : 8]
Left keys [2]: [c_current_addr_sk#17, c_birth_country#72]
Right keys [2]: [ca_address_sk#25, upper(ca_country#76)]
Join condition: None

(85) Project [codegen id : 8]
Output [5]: [c_customer_sk#16, c_first_name#70, c_last_name#71, ca_state#74, ca_zip#75]
Input [9]: [c_customer_sk#16, c_current_addr_sk#17, c_first_name#70, c_last_name#71, c_birth_country#72, ca_address_sk#25, ca_state#74, ca_zip#75, ca_country#76]

(86) Exchange
Input [5]: [c_customer_sk#16, c_first_name#70, c_last_name#71, ca_state#74, ca_zip#75]
Arguments: hashpartitioning(c_customer_sk#16, ca_zip#75, 5), ENSURE_REQUIREMENTS, [id=#78]

(87) Sort [codegen id : 9]
Input [5]: [c_customer_sk#16, c_first_name#70, c_last_name#71, ca_state#74, ca_zip#75]
Arguments: [c_customer_sk#16 ASC NULLS FIRST, ca_zip#75 ASC NULLS FIRST], false, 0

(88) SortMergeJoin [codegen id : 10]
Left keys [2]: [ss_customer_sk#2, s_zip#67]
Right keys [2]: [c_customer_sk#16, ca_zip#75]
Join condition: None

(89) Project [codegen id : 10]
Output [8]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#65, s_state#66, c_first_name#70, c_last_name#71, ca_state#74]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#65, s_state#66, s_zip#67, c_customer_sk#16, c_first_name#70, c_last_name#71, ca_state#74, ca_zip#75]

(90) Exchange
Input [8]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#65, s_state#66, c_first_name#70, c_last_name#71, ca_state#74]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#79]

(91) Sort [codegen id : 11]
Input [8]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#65, s_state#66, c_first_name#70, c_last_name#71, ca_state#74]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(92) Scan parquet default.item
Output [6]: [i_item_sk#35, i_current_price#36, i_size#37, i_color#38, i_units#39, i_manager_id#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(93) ColumnarToRow [codegen id : 12]
Input [6]: [i_item_sk#35, i_current_price#36, i_size#37, i_color#38, i_units#39, i_manager_id#40]

(94) Filter [codegen id : 12]
Input [6]: [i_item_sk#35, i_current_price#36, i_size#37, i_color#38, i_units#39, i_manager_id#40]
Condition : isnotnull(i_item_sk#35)

(95) Project [codegen id : 12]
Output [6]: [i_item_sk#35, i_current_price#36, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_size#37, 20, false, true) AS i_size#80, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_color#38, 20, false, true) AS i_color#81, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_units#39, 10, false, true) AS i_units#82, i_manager_id#40]
Input [6]: [i_item_sk#35, i_current_price#36, i_size#37, i_color#38, i_units#39, i_manager_id#40]

(96) Exchange
Input [6]: [i_item_sk#35, i_current_price#36, i_size#80, i_color#81, i_units#82, i_manager_id#40]
Arguments: hashpartitioning(i_item_sk#35, 5), ENSURE_REQUIREMENTS, [id=#83]

(97) Sort [codegen id : 13]
Input [6]: [i_item_sk#35, i_current_price#36, i_size#80, i_color#81, i_units#82, i_manager_id#40]
Arguments: [i_item_sk#35 ASC NULLS FIRST], false, 0

(98) SortMergeJoin [codegen id : 14]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#35]
Join condition: None

(99) Project [codegen id : 14]
Output [13]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#65, s_state#66, c_first_name#70, c_last_name#71, ca_state#74, i_current_price#36, i_size#80, i_color#81, i_units#82, i_manager_id#40]
Input [14]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#65, s_state#66, c_first_name#70, c_last_name#71, ca_state#74, i_item_sk#35, i_current_price#36, i_size#80, i_color#81, i_units#82, i_manager_id#40]

(100) Exchange
Input [13]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#65, s_state#66, c_first_name#70, c_last_name#71, ca_state#74, i_current_price#36, i_size#80, i_color#81, i_units#82, i_manager_id#40]
Arguments: hashpartitioning(cast(ss_ticket_number#4 as bigint), cast(ss_item_sk#1 as bigint), 5), ENSURE_REQUIREMENTS, [id=#84]

(101) Sort [codegen id : 15]
Input [13]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#65, s_state#66, c_first_name#70, c_last_name#71, ca_state#74, i_current_price#36, i_size#80, i_color#81, i_units#82, i_manager_id#40]
Arguments: [cast(ss_ticket_number#4 as bigint) ASC NULLS FIRST, cast(ss_item_sk#1 as bigint) ASC NULLS FIRST], false, 0

(102) Scan parquet default.store_returns
Output [2]: [sr_item_sk#46, sr_ticket_number#47]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:bigint,sr_ticket_number:bigint>

(103) ColumnarToRow [codegen id : 16]
Input [2]: [sr_item_sk#46, sr_ticket_number#47]

(104) Filter [codegen id : 16]
Input [2]: [sr_item_sk#46, sr_ticket_number#47]
Condition : (isnotnull(sr_ticket_number#47) AND isnotnull(sr_item_sk#46))

(105) Exchange
Input [2]: [sr_item_sk#46, sr_ticket_number#47]
Arguments: hashpartitioning(sr_ticket_number#47, sr_item_sk#46, 5), ENSURE_REQUIREMENTS, [id=#85]

(106) Sort [codegen id : 17]
Input [2]: [sr_item_sk#46, sr_ticket_number#47]
Arguments: [sr_ticket_number#47 ASC NULLS FIRST, sr_item_sk#46 ASC NULLS FIRST], false, 0

(107) SortMergeJoin [codegen id : 18]
Left keys [2]: [cast(ss_ticket_number#4 as bigint), cast(ss_item_sk#1 as bigint)]
Right keys [2]: [sr_ticket_number#47, sr_item_sk#46]
Join condition: None

(108) Project [codegen id : 18]
Output [11]: [ss_net_paid#5, s_store_name#65, s_state#66, i_current_price#36, i_size#80, i_color#81, i_units#82, i_manager_id#40, c_first_name#70, c_last_name#71, ca_state#74]
Input [15]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#65, s_state#66, c_first_name#70, c_last_name#71, ca_state#74, i_current_price#36, i_size#80, i_color#81, i_units#82, i_manager_id#40, sr_item_sk#46, sr_ticket_number#47]

(109) HashAggregate [codegen id : 18]
Input [11]: [ss_net_paid#5, s_store_name#65, s_state#66, i_current_price#36, i_size#80, i_color#81, i_units#82, i_manager_id#40, c_first_name#70, c_last_name#71, ca_state#74]
Keys [10]: [c_last_name#71, c_first_name#70, s_store_name#65, ca_state#74, s_state#66, i_color#81, i_current_price#36, i_manager_id#40, i_units#82, i_size#80]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum#86]
Results [11]: [c_last_name#71, c_first_name#70, s_store_name#65, ca_state#74, s_state#66, i_color#81, i_current_price#36, i_manager_id#40, i_units#82, i_size#80, sum#87]

(110) Exchange
Input [11]: [c_last_name#71, c_first_name#70, s_store_name#65, ca_state#74, s_state#66, i_color#81, i_current_price#36, i_manager_id#40, i_units#82, i_size#80, sum#87]
Arguments: hashpartitioning(c_last_name#71, c_first_name#70, s_store_name#65, ca_state#74, s_state#66, i_color#81, i_current_price#36, i_manager_id#40, i_units#82, i_size#80, 5), ENSURE_REQUIREMENTS, [id=#88]

(111) HashAggregate [codegen id : 19]
Input [11]: [c_last_name#71, c_first_name#70, s_store_name#65, ca_state#74, s_state#66, i_color#81, i_current_price#36, i_manager_id#40, i_units#82, i_size#80, sum#87]
Keys [10]: [c_last_name#71, c_first_name#70, s_store_name#65, ca_state#74, s_state#66, i_color#81, i_current_price#36, i_manager_id#40, i_units#82, i_size#80]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#5))#89]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_paid#5))#89,17,2) AS netpaid#53]

(112) HashAggregate [codegen id : 19]
Input [1]: [netpaid#53]
Keys: []
Functions [1]: [partial_avg(netpaid#53)]
Aggregate Attributes [2]: [sum#90, count#91]
Results [2]: [sum#92, count#93]

(113) Exchange
Input [2]: [sum#92, count#93]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#94]

(114) HashAggregate [codegen id : 20]
Input [2]: [sum#92, count#93]
Keys: []
Functions [1]: [avg(netpaid#53)]
Aggregate Attributes [1]: [avg(netpaid#53)#95]
Results [1]: [CheckOverflow((0.050000 * promote_precision(avg(netpaid#53)#95)), DecimalType(24,8), true) AS (0.05 * avg(netpaid))#96]


