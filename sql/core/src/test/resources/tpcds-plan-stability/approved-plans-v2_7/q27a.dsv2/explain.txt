== Physical Plan ==
TakeOrderedAndProject (74)
+- Union (73)
   :- * HashAggregate (30)
   :  +- Exchange (29)
   :     +- * HashAggregate (28)
   :        +- * Project (27)
   :           +- * BroadcastHashJoin Inner BuildRight (26)
   :              :- * Project (21)
   :              :  +- * BroadcastHashJoin Inner BuildRight (20)
   :              :     :- * Project (15)
   :              :     :  +- * BroadcastHashJoin Inner BuildRight (14)
   :              :     :     :- * Project (9)
   :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (8)
   :              :     :     :     :- * Project (3)
   :              :     :     :     :  +- * Filter (2)
   :              :     :     :     :     +- BatchScan default.store_sales (1)
   :              :     :     :     +- BroadcastExchange (7)
   :              :     :     :        +- * Project (6)
   :              :     :     :           +- * Filter (5)
   :              :     :     :              +- BatchScan default.customer_demographics (4)
   :              :     :     +- BroadcastExchange (13)
   :              :     :        +- * Project (12)
   :              :     :           +- * Filter (11)
   :              :     :              +- BatchScan default.date_dim (10)
   :              :     +- BroadcastExchange (19)
   :              :        +- * Project (18)
   :              :           +- * Filter (17)
   :              :              +- BatchScan default.store (16)
   :              +- BroadcastExchange (25)
   :                 +- * Project (24)
   :                    +- * Filter (23)
   :                       +- BatchScan default.item (22)
   :- * HashAggregate (51)
   :  +- Exchange (50)
   :     +- * HashAggregate (49)
   :        +- * Project (48)
   :           +- * BroadcastHashJoin Inner BuildRight (47)
   :              :- * Project (45)
   :              :  +- * BroadcastHashJoin Inner BuildRight (44)
   :              :     :- * Project (39)
   :              :     :  +- * BroadcastHashJoin Inner BuildRight (38)
   :              :     :     :- * Project (36)
   :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (35)
   :              :     :     :     :- * Project (33)
   :              :     :     :     :  +- * Filter (32)
   :              :     :     :     :     +- BatchScan default.store_sales (31)
   :              :     :     :     +- ReusedExchange (34)
   :              :     :     +- ReusedExchange (37)
   :              :     +- BroadcastExchange (43)
   :              :        +- * Project (42)
   :              :           +- * Filter (41)
   :              :              +- BatchScan default.store (40)
   :              +- ReusedExchange (46)
   +- * HashAggregate (72)
      +- Exchange (71)
         +- * HashAggregate (70)
            +- * Project (69)
               +- * BroadcastHashJoin Inner BuildRight (68)
                  :- * Project (63)
                  :  +- * BroadcastHashJoin Inner BuildRight (62)
                  :     :- * Project (60)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (59)
                  :     :     :- * Project (57)
                  :     :     :  +- * BroadcastHashJoin Inner BuildRight (56)
                  :     :     :     :- * Project (54)
                  :     :     :     :  +- * Filter (53)
                  :     :     :     :     +- BatchScan default.store_sales (52)
                  :     :     :     +- ReusedExchange (55)
                  :     :     +- ReusedExchange (58)
                  :     +- ReusedExchange (61)
                  +- BroadcastExchange (67)
                     +- * Project (66)
                        +- * Filter (65)
                           +- BatchScan default.item (64)


(1) BatchScan default.store_sales
Output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
DataFilters: [isnotnull(ss_cdemo_sk#2), isnotnull(ss_store_sk#3), isnotnull(ss_item_sk#1)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_sales]
PartitionFilters: [isnotnull(ss_sold_date_sk#8)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(2) Filter [codegen id : 5]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Condition : ((isnotnull(ss_cdemo_sk#2) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_item_sk#1))

(3) Project [codegen id : 5]
Output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]

(4) BatchScan default.customer_demographics
Output [4]: [cd_demo_sk#9, cd_gender#10, cd_marital_status#11, cd_education_status#12]
DataFilters: [isnotnull(cd_gender#10), isnotnull(cd_marital_status#11), isnotnull(cd_education_status#12), (cd_gender#10 = F), (cd_marital_status#11 = W), (cd_education_status#12 = Primary             ), isnotnull(cd_demo_sk#9)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), EqualTo(cd_gender,F), EqualTo(cd_marital_status,W), EqualTo(cd_education_status,Primary             ), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>

(5) Filter [codegen id : 1]
Input [4]: [cd_demo_sk#9, cd_gender#10, cd_marital_status#11, cd_education_status#12]
Condition : ((((((isnotnull(cd_gender#10) AND isnotnull(cd_marital_status#11)) AND isnotnull(cd_education_status#12)) AND (cd_gender#10 = F)) AND (cd_marital_status#11 = W)) AND (cd_education_status#12 = Primary             )) AND isnotnull(cd_demo_sk#9))

(6) Project [codegen id : 1]
Output [1]: [cd_demo_sk#9]
Input [4]: [cd_demo_sk#9, cd_gender#10, cd_marital_status#11, cd_education_status#12]

(7) BroadcastExchange
Input [1]: [cd_demo_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#9]
Join type: Inner
Join condition: None

(9) Project [codegen id : 5]
Output [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Input [9]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, cd_demo_sk#9]

(10) BatchScan default.date_dim
Output [2]: [d_date_sk#13, d_year#14]
DataFilters: [isnotnull(d_year#14), (d_year#14 = 1998), isnotnull(d_date_sk#13)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(11) Filter [codegen id : 2]
Input [2]: [d_date_sk#13, d_year#14]
Condition : ((isnotnull(d_year#14) AND (d_year#14 = 1998)) AND isnotnull(d_date_sk#13))

(12) Project [codegen id : 2]
Output [1]: [d_date_sk#13]
Input [2]: [d_date_sk#13, d_year#14]

(13) BroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(14) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#13]
Join type: Inner
Join condition: None

(15) Project [codegen id : 5]
Output [6]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, d_date_sk#13]

(16) BatchScan default.store
Output [2]: [s_store_sk#15, s_state#16]
DataFilters: [isnotnull(s_state#16), (s_state#16 = TN), isnotnull(s_store_sk#15)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(17) Filter [codegen id : 3]
Input [2]: [s_store_sk#15, s_state#16]
Condition : ((isnotnull(s_state#16) AND (s_state#16 = TN)) AND isnotnull(s_store_sk#15))

(18) Project [codegen id : 3]
Output [2]: [s_store_sk#15, s_state#16]
Input [2]: [s_store_sk#15, s_state#16]

(19) BroadcastExchange
Input [2]: [s_store_sk#15, s_state#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(20) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#15]
Join type: Inner
Join condition: None

(21) Project [codegen id : 5]
Output [6]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#16]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_store_sk#15, s_state#16]

(22) BatchScan default.item
Output [2]: [i_item_sk#17, i_item_id#18]
DataFilters: [isnotnull(i_item_sk#17)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(23) Filter [codegen id : 4]
Input [2]: [i_item_sk#17, i_item_id#18]
Condition : isnotnull(i_item_sk#17)

(24) Project [codegen id : 4]
Output [2]: [i_item_sk#17, i_item_id#18]
Input [2]: [i_item_sk#17, i_item_id#18]

(25) BroadcastExchange
Input [2]: [i_item_sk#17, i_item_id#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(26) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#17]
Join type: Inner
Join condition: None

(27) Project [codegen id : 5]
Output [6]: [i_item_id#18, s_state#16, ss_quantity#4 AS agg1#19, ss_list_price#5 AS agg2#20, ss_coupon_amt#7 AS agg3#21, ss_sales_price#6 AS agg4#22]
Input [8]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#16, i_item_sk#17, i_item_id#18]

(28) HashAggregate [codegen id : 5]
Input [6]: [i_item_id#18, s_state#16, agg1#19, agg2#20, agg3#21, agg4#22]
Keys [2]: [i_item_id#18, s_state#16]
Functions [4]: [partial_avg(agg1#19), partial_avg(UnscaledValue(agg2#20)), partial_avg(UnscaledValue(agg3#21)), partial_avg(UnscaledValue(agg4#22))]
Aggregate Attributes [8]: [sum#23, count#24, sum#25, count#26, sum#27, count#28, sum#29, count#30]
Results [10]: [i_item_id#18, s_state#16, sum#31, count#32, sum#33, count#34, sum#35, count#36, sum#37, count#38]

(29) Exchange
Input [10]: [i_item_id#18, s_state#16, sum#31, count#32, sum#33, count#34, sum#35, count#36, sum#37, count#38]
Arguments: hashpartitioning(i_item_id#18, s_state#16, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(30) HashAggregate [codegen id : 6]
Input [10]: [i_item_id#18, s_state#16, sum#31, count#32, sum#33, count#34, sum#35, count#36, sum#37, count#38]
Keys [2]: [i_item_id#18, s_state#16]
Functions [4]: [avg(agg1#19), avg(UnscaledValue(agg2#20)), avg(UnscaledValue(agg3#21)), avg(UnscaledValue(agg4#22))]
Aggregate Attributes [4]: [avg(agg1#19)#39, avg(UnscaledValue(agg2#20))#40, avg(UnscaledValue(agg3#21))#41, avg(UnscaledValue(agg4#22))#42]
Results [7]: [i_item_id#18, s_state#16, 0 AS g_state#43, avg(agg1#19)#39 AS agg1#44, cast((avg(UnscaledValue(agg2#20))#40 / 100.0) as decimal(11,6)) AS agg2#45, cast((avg(UnscaledValue(agg3#21))#41 / 100.0) as decimal(11,6)) AS agg3#46, cast((avg(UnscaledValue(agg4#22))#42 / 100.0) as decimal(11,6)) AS agg4#47]

(31) BatchScan default.store_sales
Output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
DataFilters: [isnotnull(ss_cdemo_sk#2), isnotnull(ss_store_sk#3), isnotnull(ss_item_sk#1)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_sales]
PartitionFilters: [isnotnull(ss_sold_date_sk#8)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(32) Filter [codegen id : 11]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Condition : ((isnotnull(ss_cdemo_sk#2) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_item_sk#1))

(33) Project [codegen id : 11]
Output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]

(34) ReusedExchange [Reuses operator id: 7]
Output [1]: [cd_demo_sk#9]

(35) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#9]
Join type: Inner
Join condition: None

(36) Project [codegen id : 11]
Output [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Input [9]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, cd_demo_sk#9]

(37) ReusedExchange [Reuses operator id: 13]
Output [1]: [d_date_sk#13]

(38) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#13]
Join type: Inner
Join condition: None

(39) Project [codegen id : 11]
Output [6]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, d_date_sk#13]

(40) BatchScan default.store
Output [2]: [s_store_sk#15, s_state#16]
DataFilters: [isnotnull(s_state#16), (s_state#16 = TN), isnotnull(s_store_sk#15)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(41) Filter [codegen id : 9]
Input [2]: [s_store_sk#15, s_state#16]
Condition : ((isnotnull(s_state#16) AND (s_state#16 = TN)) AND isnotnull(s_store_sk#15))

(42) Project [codegen id : 9]
Output [1]: [s_store_sk#15]
Input [2]: [s_store_sk#15, s_state#16]

(43) BroadcastExchange
Input [1]: [s_store_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

(44) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#15]
Join type: Inner
Join condition: None

(45) Project [codegen id : 11]
Output [5]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]
Input [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_store_sk#15]

(46) ReusedExchange [Reuses operator id: 25]
Output [2]: [i_item_sk#17, i_item_id#18]

(47) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#17]
Join type: Inner
Join condition: None

(48) Project [codegen id : 11]
Output [5]: [i_item_id#18, ss_quantity#4 AS agg1#19, ss_list_price#5 AS agg2#20, ss_coupon_amt#7 AS agg3#21, ss_sales_price#6 AS agg4#22]
Input [7]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, i_item_sk#17, i_item_id#18]

(49) HashAggregate [codegen id : 11]
Input [5]: [i_item_id#18, agg1#19, agg2#20, agg3#21, agg4#22]
Keys [1]: [i_item_id#18]
Functions [4]: [partial_avg(agg1#19), partial_avg(UnscaledValue(agg2#20)), partial_avg(UnscaledValue(agg3#21)), partial_avg(UnscaledValue(agg4#22))]
Aggregate Attributes [8]: [sum#48, count#49, sum#50, count#51, sum#52, count#53, sum#54, count#55]
Results [9]: [i_item_id#18, sum#56, count#57, sum#58, count#59, sum#60, count#61, sum#62, count#63]

(50) Exchange
Input [9]: [i_item_id#18, sum#56, count#57, sum#58, count#59, sum#60, count#61, sum#62, count#63]
Arguments: hashpartitioning(i_item_id#18, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(51) HashAggregate [codegen id : 12]
Input [9]: [i_item_id#18, sum#56, count#57, sum#58, count#59, sum#60, count#61, sum#62, count#63]
Keys [1]: [i_item_id#18]
Functions [4]: [avg(agg1#19), avg(UnscaledValue(agg2#20)), avg(UnscaledValue(agg3#21)), avg(UnscaledValue(agg4#22))]
Aggregate Attributes [4]: [avg(agg1#19)#64, avg(UnscaledValue(agg2#20))#65, avg(UnscaledValue(agg3#21))#66, avg(UnscaledValue(agg4#22))#67]
Results [7]: [i_item_id#18, null AS s_state#68, 1 AS g_state#69, avg(agg1#19)#64 AS agg1#70, cast((avg(UnscaledValue(agg2#20))#65 / 100.0) as decimal(11,6)) AS agg2#71, cast((avg(UnscaledValue(agg3#21))#66 / 100.0) as decimal(11,6)) AS agg3#72, cast((avg(UnscaledValue(agg4#22))#67 / 100.0) as decimal(11,6)) AS agg4#73]

(52) BatchScan default.store_sales
Output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
DataFilters: [isnotnull(ss_cdemo_sk#2), isnotnull(ss_store_sk#3), isnotnull(ss_item_sk#1)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_sales]
PartitionFilters: [isnotnull(ss_sold_date_sk#8)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(53) Filter [codegen id : 17]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Condition : ((isnotnull(ss_cdemo_sk#2) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_item_sk#1))

(54) Project [codegen id : 17]
Output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]

(55) ReusedExchange [Reuses operator id: 7]
Output [1]: [cd_demo_sk#9]

(56) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#9]
Join type: Inner
Join condition: None

(57) Project [codegen id : 17]
Output [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Input [9]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, cd_demo_sk#9]

(58) ReusedExchange [Reuses operator id: 13]
Output [1]: [d_date_sk#13]

(59) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#13]
Join type: Inner
Join condition: None

(60) Project [codegen id : 17]
Output [6]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, d_date_sk#13]

(61) ReusedExchange [Reuses operator id: 43]
Output [1]: [s_store_sk#15]

(62) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#15]
Join type: Inner
Join condition: None

(63) Project [codegen id : 17]
Output [5]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]
Input [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_store_sk#15]

(64) BatchScan default.item
Output [1]: [i_item_sk#17]
DataFilters: [isnotnull(i_item_sk#17)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int>

(65) Filter [codegen id : 16]
Input [1]: [i_item_sk#17]
Condition : isnotnull(i_item_sk#17)

(66) Project [codegen id : 16]
Output [1]: [i_item_sk#17]
Input [1]: [i_item_sk#17]

(67) BroadcastExchange
Input [1]: [i_item_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

(68) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#17]
Join type: Inner
Join condition: None

(69) Project [codegen id : 17]
Output [4]: [ss_quantity#4 AS agg1#19, ss_list_price#5 AS agg2#20, ss_coupon_amt#7 AS agg3#21, ss_sales_price#6 AS agg4#22]
Input [6]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, i_item_sk#17]

(70) HashAggregate [codegen id : 17]
Input [4]: [agg1#19, agg2#20, agg3#21, agg4#22]
Keys: []
Functions [4]: [partial_avg(agg1#19), partial_avg(UnscaledValue(agg2#20)), partial_avg(UnscaledValue(agg3#21)), partial_avg(UnscaledValue(agg4#22))]
Aggregate Attributes [8]: [sum#74, count#75, sum#76, count#77, sum#78, count#79, sum#80, count#81]
Results [8]: [sum#82, count#83, sum#84, count#85, sum#86, count#87, sum#88, count#89]

(71) Exchange
Input [8]: [sum#82, count#83, sum#84, count#85, sum#86, count#87, sum#88, count#89]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=9]

(72) HashAggregate [codegen id : 18]
Input [8]: [sum#82, count#83, sum#84, count#85, sum#86, count#87, sum#88, count#89]
Keys: []
Functions [4]: [avg(agg1#19), avg(UnscaledValue(agg2#20)), avg(UnscaledValue(agg3#21)), avg(UnscaledValue(agg4#22))]
Aggregate Attributes [4]: [avg(agg1#19)#90, avg(UnscaledValue(agg2#20))#91, avg(UnscaledValue(agg3#21))#92, avg(UnscaledValue(agg4#22))#93]
Results [7]: [null AS i_item_id#94, null AS s_state#95, 1 AS g_state#96, avg(agg1#19)#90 AS agg1#97, cast((avg(UnscaledValue(agg2#20))#91 / 100.0) as decimal(11,6)) AS agg2#98, cast((avg(UnscaledValue(agg3#21))#92 / 100.0) as decimal(11,6)) AS agg3#99, cast((avg(UnscaledValue(agg4#22))#93 / 100.0) as decimal(11,6)) AS agg4#100]

(73) Union

(74) TakeOrderedAndProject
Input [7]: [i_item_id#18, s_state#16, g_state#43, agg1#44, agg2#45, agg3#46, agg4#47]
Arguments: 100, [i_item_id#18 ASC NULLS FIRST, s_state#16 ASC NULLS FIRST], [i_item_id#18, s_state#16, g_state#43, agg1#44, agg2#45, agg3#46, agg4#47]

