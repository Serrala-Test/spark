== Physical Plan ==
TakeOrderedAndProject (157)
+- * Project (156)
   +- * SortMergeJoin Inner (155)
      :- * Sort (79)
      :  +- Exchange (78)
      :     +- * HashAggregate (77)
      :        +- Exchange (76)
      :           +- * HashAggregate (75)
      :              +- * HashAggregate (74)
      :                 +- Exchange (73)
      :                    +- * HashAggregate (72)
      :                       +- Union (71)
      :                          :- * Project (26)
      :                          :  +- * SortMergeJoin LeftOuter (25)
      :                          :     :- * Sort (15)
      :                          :     :  +- Exchange (14)
      :                          :     :     +- * Project (13)
      :                          :     :        +- * BroadcastHashJoin Inner BuildRight (12)
      :                          :     :           :- * Project (10)
      :                          :     :           :  +- * BroadcastHashJoin Inner BuildRight (9)
      :                          :     :           :     :- * Filter (3)
      :                          :     :           :     :  +- * ColumnarToRow (2)
      :                          :     :           :     :     +- Scan parquet default.catalog_sales (1)
      :                          :     :           :     +- BroadcastExchange (8)
      :                          :     :           :        +- * Project (7)
      :                          :     :           :           +- * Filter (6)
      :                          :     :           :              +- * ColumnarToRow (5)
      :                          :     :           :                 +- Scan parquet default.item (4)
      :                          :     :           +- ReusedExchange (11)
      :                          :     +- * Sort (24)
      :                          :        +- Exchange (23)
      :                          :           +- * BroadcastHashJoin LeftSemi BuildRight (22)
      :                          :              :- * Project (19)
      :                          :              :  +- * Filter (18)
      :                          :              :     +- * ColumnarToRow (17)
      :                          :              :        +- Scan parquet default.catalog_returns (16)
      :                          :              +- BroadcastExchange (21)
      :                          :                 +- ReusedExchange (20)
      :                          :- * Project (48)
      :                          :  +- * SortMergeJoin LeftOuter (47)
      :                          :     :- * Sort (37)
      :                          :     :  +- Exchange (36)
      :                          :     :     +- * Project (35)
      :                          :     :        +- * BroadcastHashJoin Inner BuildRight (34)
      :                          :     :           :- * Project (32)
      :                          :     :           :  +- * BroadcastHashJoin Inner BuildRight (31)
      :                          :     :           :     :- * Filter (29)
      :                          :     :           :     :  +- * ColumnarToRow (28)
      :                          :     :           :     :     +- Scan parquet default.store_sales (27)
      :                          :     :           :     +- ReusedExchange (30)
      :                          :     :           +- ReusedExchange (33)
      :                          :     +- * Sort (46)
      :                          :        +- Exchange (45)
      :                          :           +- * BroadcastHashJoin LeftSemi BuildRight (44)
      :                          :              :- * Project (41)
      :                          :              :  +- * Filter (40)
      :                          :              :     +- * ColumnarToRow (39)
      :                          :              :        +- Scan parquet default.store_returns (38)
      :                          :              +- BroadcastExchange (43)
      :                          :                 +- ReusedExchange (42)
      :                          +- * Project (70)
      :                             +- * SortMergeJoin LeftOuter (69)
      :                                :- * Sort (59)
      :                                :  +- Exchange (58)
      :                                :     +- * Project (57)
      :                                :        +- * BroadcastHashJoin Inner BuildRight (56)
      :                                :           :- * Project (54)
      :                                :           :  +- * BroadcastHashJoin Inner BuildRight (53)
      :                                :           :     :- * Filter (51)
      :                                :           :     :  +- * ColumnarToRow (50)
      :                                :           :     :     +- Scan parquet default.web_sales (49)
      :                                :           :     +- ReusedExchange (52)
      :                                :           +- ReusedExchange (55)
      :                                +- * Sort (68)
      :                                   +- Exchange (67)
      :                                      +- * BroadcastHashJoin LeftSemi BuildRight (66)
      :                                         :- * Project (63)
      :                                         :  +- * Filter (62)
      :                                         :     +- * ColumnarToRow (61)
      :                                         :        +- Scan parquet default.web_returns (60)
      :                                         +- BroadcastExchange (65)
      :                                            +- ReusedExchange (64)
      +- * Sort (154)
         +- Exchange (153)
            +- * HashAggregate (152)
               +- Exchange (151)
                  +- * HashAggregate (150)
                     +- * HashAggregate (149)
                        +- Exchange (148)
                           +- * HashAggregate (147)
                              +- Union (146)
                                 :- * Project (101)
                                 :  +- * SortMergeJoin LeftOuter (100)
                                 :     :- * Sort (90)
                                 :     :  +- Exchange (89)
                                 :     :     +- * Project (88)
                                 :     :        +- * BroadcastHashJoin Inner BuildRight (87)
                                 :     :           :- * Project (85)
                                 :     :           :  +- * BroadcastHashJoin Inner BuildRight (84)
                                 :     :           :     :- * Filter (82)
                                 :     :           :     :  +- * ColumnarToRow (81)
                                 :     :           :     :     +- Scan parquet default.catalog_sales (80)
                                 :     :           :     +- ReusedExchange (83)
                                 :     :           +- ReusedExchange (86)
                                 :     +- * Sort (99)
                                 :        +- Exchange (98)
                                 :           +- * BroadcastHashJoin LeftSemi BuildRight (97)
                                 :              :- * Project (94)
                                 :              :  +- * Filter (93)
                                 :              :     +- * ColumnarToRow (92)
                                 :              :        +- Scan parquet default.catalog_returns (91)
                                 :              +- BroadcastExchange (96)
                                 :                 +- ReusedExchange (95)
                                 :- * Project (123)
                                 :  +- * SortMergeJoin LeftOuter (122)
                                 :     :- * Sort (112)
                                 :     :  +- Exchange (111)
                                 :     :     +- * Project (110)
                                 :     :        +- * BroadcastHashJoin Inner BuildRight (109)
                                 :     :           :- * Project (107)
                                 :     :           :  +- * BroadcastHashJoin Inner BuildRight (106)
                                 :     :           :     :- * Filter (104)
                                 :     :           :     :  +- * ColumnarToRow (103)
                                 :     :           :     :     +- Scan parquet default.store_sales (102)
                                 :     :           :     +- ReusedExchange (105)
                                 :     :           +- ReusedExchange (108)
                                 :     +- * Sort (121)
                                 :        +- Exchange (120)
                                 :           +- * BroadcastHashJoin LeftSemi BuildRight (119)
                                 :              :- * Project (116)
                                 :              :  +- * Filter (115)
                                 :              :     +- * ColumnarToRow (114)
                                 :              :        +- Scan parquet default.store_returns (113)
                                 :              +- BroadcastExchange (118)
                                 :                 +- ReusedExchange (117)
                                 +- * Project (145)
                                    +- * SortMergeJoin LeftOuter (144)
                                       :- * Sort (134)
                                       :  +- Exchange (133)
                                       :     +- * Project (132)
                                       :        +- * BroadcastHashJoin Inner BuildRight (131)
                                       :           :- * Project (129)
                                       :           :  +- * BroadcastHashJoin Inner BuildRight (128)
                                       :           :     :- * Filter (126)
                                       :           :     :  +- * ColumnarToRow (125)
                                       :           :     :     +- Scan parquet default.web_sales (124)
                                       :           :     +- ReusedExchange (127)
                                       :           +- ReusedExchange (130)
                                       +- * Sort (143)
                                          +- Exchange (142)
                                             +- * BroadcastHashJoin LeftSemi BuildRight (141)
                                                :- * Project (138)
                                                :  +- * Filter (137)
                                                :     +- * ColumnarToRow (136)
                                                :        +- Scan parquet default.web_returns (135)
                                                +- BroadcastExchange (140)
                                                   +- ReusedExchange (139)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_order_number:int,cs_quantity:int,cs_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [5]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5]

(3) Filter [codegen id : 3]
Input [5]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5]
Condition : isnotnull(cs_item_sk#1)

(4) Scan parquet default.item
Output [6]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, i_category#11, i_manufact_id#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Books                                             ), IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id), IsNotNull(i_manufact_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int,i_category:string,i_manufact_id:int>

(5) ColumnarToRow [codegen id : 1]
Input [6]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, i_category#11, i_manufact_id#12]

(6) Filter [codegen id : 1]
Input [6]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, i_category#11, i_manufact_id#12]
Condition : ((((((isnotnull(i_category#11) AND (i_category#11 = Books                                             )) AND isnotnull(i_item_sk#7)) AND isnotnull(i_brand_id#8)) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10)) AND isnotnull(i_manufact_id#12))

(7) Project [codegen id : 1]
Output [5]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12]
Input [6]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, i_category#11, i_manufact_id#12]

(8) BroadcastExchange
Input [5]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join condition: None

(10) Project [codegen id : 3]
Output [9]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12]
Input [10]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12]

(11) ReusedExchange [Reuses operator id: 161]
Output [2]: [d_date_sk#14, d_year#15]

(12) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#14]
Join condition: None

(13) Project [codegen id : 3]
Output [9]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, d_year#15]
Input [11]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, d_date_sk#14, d_year#15]

(14) Exchange
Input [9]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, d_year#15]
Arguments: hashpartitioning(cs_order_number#2, cs_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#16]

(15) Sort [codegen id : 4]
Input [9]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, d_year#15]
Arguments: [cs_order_number#2 ASC NULLS FIRST, cs_item_sk#1 ASC NULLS FIRST], false, 0

(16) Scan parquet default.catalog_returns
Output [5]: [cr_item_sk#17, cr_order_number#18, cr_return_quantity#19, cr_return_amount#20, cr_returned_date_sk#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_quantity:int,cr_return_amount:decimal(7,2)>

(17) ColumnarToRow [codegen id : 8]
Input [5]: [cr_item_sk#17, cr_order_number#18, cr_return_quantity#19, cr_return_amount#20, cr_returned_date_sk#21]

(18) Filter [codegen id : 8]
Input [5]: [cr_item_sk#17, cr_order_number#18, cr_return_quantity#19, cr_return_amount#20, cr_returned_date_sk#21]
Condition : (isnotnull(cr_order_number#18) AND isnotnull(cr_item_sk#17))

(19) Project [codegen id : 8]
Output [4]: [cr_item_sk#17, cr_order_number#18, cr_return_quantity#19, cr_return_amount#20]
Input [5]: [cr_item_sk#17, cr_order_number#18, cr_return_quantity#19, cr_return_amount#20, cr_returned_date_sk#21]

(20) ReusedExchange [Reuses operator id: 14]
Output [9]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, d_year#15]

(21) BroadcastExchange
Input [9]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, d_year#15]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [id=#22]

(22) BroadcastHashJoin [codegen id : 8]
Left keys [2]: [cr_order_number#18, cr_item_sk#17]
Right keys [2]: [cs_order_number#2, cs_item_sk#1]
Join condition: None

(23) Exchange
Input [4]: [cr_item_sk#17, cr_order_number#18, cr_return_quantity#19, cr_return_amount#20]
Arguments: hashpartitioning(cr_order_number#18, cr_item_sk#17, 5), ENSURE_REQUIREMENTS, [id=#23]

(24) Sort [codegen id : 9]
Input [4]: [cr_item_sk#17, cr_order_number#18, cr_return_quantity#19, cr_return_amount#20]
Arguments: [cr_order_number#18 ASC NULLS FIRST, cr_item_sk#17 ASC NULLS FIRST], false, 0

(25) SortMergeJoin [codegen id : 10]
Left keys [2]: [cs_order_number#2, cs_item_sk#1]
Right keys [2]: [cr_order_number#18, cr_item_sk#17]
Join condition: None

(26) Project [codegen id : 10]
Output [7]: [d_year#15, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, (cs_quantity#3 - coalesce(cr_return_quantity#19, 0)) AS sales_cnt#24, CheckOverflow((promote_precision(cast(cs_ext_sales_price#4 as decimal(8,2))) - promote_precision(cast(coalesce(cr_return_amount#20, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#25]
Input [13]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, d_year#15, cr_item_sk#17, cr_order_number#18, cr_return_quantity#19, cr_return_amount#20]

(27) Scan parquet default.store_sales
Output [5]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, ss_sold_date_sk#30]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#30), dynamicpruningexpression(ss_sold_date_sk#30 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ticket_number:int,ss_quantity:int,ss_ext_sales_price:decimal(7,2)>

(28) ColumnarToRow [codegen id : 13]
Input [5]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, ss_sold_date_sk#30]

(29) Filter [codegen id : 13]
Input [5]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, ss_sold_date_sk#30]
Condition : isnotnull(ss_item_sk#26)

(30) ReusedExchange [Reuses operator id: 8]
Output [5]: [i_item_sk#31, i_brand_id#32, i_class_id#33, i_category_id#34, i_manufact_id#35]

(31) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_item_sk#26]
Right keys [1]: [i_item_sk#31]
Join condition: None

(32) Project [codegen id : 13]
Output [9]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, ss_sold_date_sk#30, i_brand_id#32, i_class_id#33, i_category_id#34, i_manufact_id#35]
Input [10]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, ss_sold_date_sk#30, i_item_sk#31, i_brand_id#32, i_class_id#33, i_category_id#34, i_manufact_id#35]

(33) ReusedExchange [Reuses operator id: 161]
Output [2]: [d_date_sk#36, d_year#37]

(34) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_sold_date_sk#30]
Right keys [1]: [d_date_sk#36]
Join condition: None

(35) Project [codegen id : 13]
Output [9]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, i_brand_id#32, i_class_id#33, i_category_id#34, i_manufact_id#35, d_year#37]
Input [11]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, ss_sold_date_sk#30, i_brand_id#32, i_class_id#33, i_category_id#34, i_manufact_id#35, d_date_sk#36, d_year#37]

(36) Exchange
Input [9]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, i_brand_id#32, i_class_id#33, i_category_id#34, i_manufact_id#35, d_year#37]
Arguments: hashpartitioning(ss_ticket_number#27, ss_item_sk#26, 5), ENSURE_REQUIREMENTS, [id=#38]

(37) Sort [codegen id : 14]
Input [9]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, i_brand_id#32, i_class_id#33, i_category_id#34, i_manufact_id#35, d_year#37]
Arguments: [ss_ticket_number#27 ASC NULLS FIRST, ss_item_sk#26 ASC NULLS FIRST], false, 0

(38) Scan parquet default.store_returns
Output [5]: [sr_item_sk#39, sr_ticket_number#40, sr_return_quantity#41, sr_return_amt#42, sr_returned_date_sk#43]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int,sr_return_quantity:int,sr_return_amt:decimal(7,2)>

(39) ColumnarToRow [codegen id : 18]
Input [5]: [sr_item_sk#39, sr_ticket_number#40, sr_return_quantity#41, sr_return_amt#42, sr_returned_date_sk#43]

(40) Filter [codegen id : 18]
Input [5]: [sr_item_sk#39, sr_ticket_number#40, sr_return_quantity#41, sr_return_amt#42, sr_returned_date_sk#43]
Condition : (isnotnull(sr_ticket_number#40) AND isnotnull(sr_item_sk#39))

(41) Project [codegen id : 18]
Output [4]: [sr_item_sk#39, sr_ticket_number#40, sr_return_quantity#41, sr_return_amt#42]
Input [5]: [sr_item_sk#39, sr_ticket_number#40, sr_return_quantity#41, sr_return_amt#42, sr_returned_date_sk#43]

(42) ReusedExchange [Reuses operator id: 36]
Output [9]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, i_brand_id#32, i_class_id#33, i_category_id#34, i_manufact_id#35, d_year#37]

(43) BroadcastExchange
Input [9]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, i_brand_id#32, i_class_id#33, i_category_id#34, i_manufact_id#35, d_year#37]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [id=#44]

(44) BroadcastHashJoin [codegen id : 18]
Left keys [2]: [sr_ticket_number#40, sr_item_sk#39]
Right keys [2]: [ss_ticket_number#27, ss_item_sk#26]
Join condition: None

(45) Exchange
Input [4]: [sr_item_sk#39, sr_ticket_number#40, sr_return_quantity#41, sr_return_amt#42]
Arguments: hashpartitioning(sr_ticket_number#40, sr_item_sk#39, 5), ENSURE_REQUIREMENTS, [id=#45]

(46) Sort [codegen id : 19]
Input [4]: [sr_item_sk#39, sr_ticket_number#40, sr_return_quantity#41, sr_return_amt#42]
Arguments: [sr_ticket_number#40 ASC NULLS FIRST, sr_item_sk#39 ASC NULLS FIRST], false, 0

(47) SortMergeJoin [codegen id : 20]
Left keys [2]: [ss_ticket_number#27, ss_item_sk#26]
Right keys [2]: [sr_ticket_number#40, sr_item_sk#39]
Join condition: None

(48) Project [codegen id : 20]
Output [7]: [d_year#37, i_brand_id#32, i_class_id#33, i_category_id#34, i_manufact_id#35, (ss_quantity#28 - coalesce(sr_return_quantity#41, 0)) AS sales_cnt#46, CheckOverflow((promote_precision(cast(ss_ext_sales_price#29 as decimal(8,2))) - promote_precision(cast(coalesce(sr_return_amt#42, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#47]
Input [13]: [ss_item_sk#26, ss_ticket_number#27, ss_quantity#28, ss_ext_sales_price#29, i_brand_id#32, i_class_id#33, i_category_id#34, i_manufact_id#35, d_year#37, sr_item_sk#39, sr_ticket_number#40, sr_return_quantity#41, sr_return_amt#42]

(49) Scan parquet default.web_sales
Output [5]: [ws_item_sk#48, ws_order_number#49, ws_quantity#50, ws_ext_sales_price#51, ws_sold_date_sk#52]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#52), dynamicpruningexpression(ws_sold_date_sk#52 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_order_number:int,ws_quantity:int,ws_ext_sales_price:decimal(7,2)>

(50) ColumnarToRow [codegen id : 23]
Input [5]: [ws_item_sk#48, ws_order_number#49, ws_quantity#50, ws_ext_sales_price#51, ws_sold_date_sk#52]

(51) Filter [codegen id : 23]
Input [5]: [ws_item_sk#48, ws_order_number#49, ws_quantity#50, ws_ext_sales_price#51, ws_sold_date_sk#52]
Condition : isnotnull(ws_item_sk#48)

(52) ReusedExchange [Reuses operator id: 8]
Output [5]: [i_item_sk#53, i_brand_id#54, i_class_id#55, i_category_id#56, i_manufact_id#57]

(53) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [ws_item_sk#48]
Right keys [1]: [i_item_sk#53]
Join condition: None

(54) Project [codegen id : 23]
Output [9]: [ws_item_sk#48, ws_order_number#49, ws_quantity#50, ws_ext_sales_price#51, ws_sold_date_sk#52, i_brand_id#54, i_class_id#55, i_category_id#56, i_manufact_id#57]
Input [10]: [ws_item_sk#48, ws_order_number#49, ws_quantity#50, ws_ext_sales_price#51, ws_sold_date_sk#52, i_item_sk#53, i_brand_id#54, i_class_id#55, i_category_id#56, i_manufact_id#57]

(55) ReusedExchange [Reuses operator id: 161]
Output [2]: [d_date_sk#58, d_year#59]

(56) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [ws_sold_date_sk#52]
Right keys [1]: [d_date_sk#58]
Join condition: None

(57) Project [codegen id : 23]
Output [9]: [ws_item_sk#48, ws_order_number#49, ws_quantity#50, ws_ext_sales_price#51, i_brand_id#54, i_class_id#55, i_category_id#56, i_manufact_id#57, d_year#59]
Input [11]: [ws_item_sk#48, ws_order_number#49, ws_quantity#50, ws_ext_sales_price#51, ws_sold_date_sk#52, i_brand_id#54, i_class_id#55, i_category_id#56, i_manufact_id#57, d_date_sk#58, d_year#59]

(58) Exchange
Input [9]: [ws_item_sk#48, ws_order_number#49, ws_quantity#50, ws_ext_sales_price#51, i_brand_id#54, i_class_id#55, i_category_id#56, i_manufact_id#57, d_year#59]
Arguments: hashpartitioning(ws_order_number#49, ws_item_sk#48, 5), ENSURE_REQUIREMENTS, [id=#60]

(59) Sort [codegen id : 24]
Input [9]: [ws_item_sk#48, ws_order_number#49, ws_quantity#50, ws_ext_sales_price#51, i_brand_id#54, i_class_id#55, i_category_id#56, i_manufact_id#57, d_year#59]
Arguments: [ws_order_number#49 ASC NULLS FIRST, ws_item_sk#48 ASC NULLS FIRST], false, 0

(60) Scan parquet default.web_returns
Output [5]: [wr_item_sk#61, wr_order_number#62, wr_return_quantity#63, wr_return_amt#64, wr_returned_date_sk#65]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_order_number), IsNotNull(wr_item_sk)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_quantity:int,wr_return_amt:decimal(7,2)>

(61) ColumnarToRow [codegen id : 28]
Input [5]: [wr_item_sk#61, wr_order_number#62, wr_return_quantity#63, wr_return_amt#64, wr_returned_date_sk#65]

(62) Filter [codegen id : 28]
Input [5]: [wr_item_sk#61, wr_order_number#62, wr_return_quantity#63, wr_return_amt#64, wr_returned_date_sk#65]
Condition : (isnotnull(wr_order_number#62) AND isnotnull(wr_item_sk#61))

(63) Project [codegen id : 28]
Output [4]: [wr_item_sk#61, wr_order_number#62, wr_return_quantity#63, wr_return_amt#64]
Input [5]: [wr_item_sk#61, wr_order_number#62, wr_return_quantity#63, wr_return_amt#64, wr_returned_date_sk#65]

(64) ReusedExchange [Reuses operator id: 58]
Output [9]: [ws_item_sk#48, ws_order_number#49, ws_quantity#50, ws_ext_sales_price#51, i_brand_id#54, i_class_id#55, i_category_id#56, i_manufact_id#57, d_year#59]

(65) BroadcastExchange
Input [9]: [ws_item_sk#48, ws_order_number#49, ws_quantity#50, ws_ext_sales_price#51, i_brand_id#54, i_class_id#55, i_category_id#56, i_manufact_id#57, d_year#59]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [id=#66]

(66) BroadcastHashJoin [codegen id : 28]
Left keys [2]: [wr_order_number#62, wr_item_sk#61]
Right keys [2]: [ws_order_number#49, ws_item_sk#48]
Join condition: None

(67) Exchange
Input [4]: [wr_item_sk#61, wr_order_number#62, wr_return_quantity#63, wr_return_amt#64]
Arguments: hashpartitioning(wr_order_number#62, wr_item_sk#61, 5), ENSURE_REQUIREMENTS, [id=#67]

(68) Sort [codegen id : 29]
Input [4]: [wr_item_sk#61, wr_order_number#62, wr_return_quantity#63, wr_return_amt#64]
Arguments: [wr_order_number#62 ASC NULLS FIRST, wr_item_sk#61 ASC NULLS FIRST], false, 0

(69) SortMergeJoin [codegen id : 30]
Left keys [2]: [ws_order_number#49, ws_item_sk#48]
Right keys [2]: [wr_order_number#62, wr_item_sk#61]
Join condition: None

(70) Project [codegen id : 30]
Output [7]: [d_year#59, i_brand_id#54, i_class_id#55, i_category_id#56, i_manufact_id#57, (ws_quantity#50 - coalesce(wr_return_quantity#63, 0)) AS sales_cnt#68, CheckOverflow((promote_precision(cast(ws_ext_sales_price#51 as decimal(8,2))) - promote_precision(cast(coalesce(wr_return_amt#64, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#69]
Input [13]: [ws_item_sk#48, ws_order_number#49, ws_quantity#50, ws_ext_sales_price#51, i_brand_id#54, i_class_id#55, i_category_id#56, i_manufact_id#57, d_year#59, wr_item_sk#61, wr_order_number#62, wr_return_quantity#63, wr_return_amt#64]

(71) Union

(72) HashAggregate [codegen id : 31]
Input [7]: [d_year#15, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#24, sales_amt#25]
Keys [7]: [d_year#15, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#24, sales_amt#25]
Functions: []
Aggregate Attributes: []
Results [7]: [d_year#15, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#24, sales_amt#25]

(73) Exchange
Input [7]: [d_year#15, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#24, sales_amt#25]
Arguments: hashpartitioning(d_year#15, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#24, sales_amt#25, 5), ENSURE_REQUIREMENTS, [id=#70]

(74) HashAggregate [codegen id : 32]
Input [7]: [d_year#15, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#24, sales_amt#25]
Keys [7]: [d_year#15, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#24, sales_amt#25]
Functions: []
Aggregate Attributes: []
Results [7]: [d_year#15, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#24, sales_amt#25]

(75) HashAggregate [codegen id : 32]
Input [7]: [d_year#15, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#24, sales_amt#25]
Keys [5]: [d_year#15, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12]
Functions [2]: [partial_sum(sales_cnt#24), partial_sum(UnscaledValue(sales_amt#25))]
Aggregate Attributes [2]: [sum#71, sum#72]
Results [7]: [d_year#15, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sum#73, sum#74]

(76) Exchange
Input [7]: [d_year#15, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sum#73, sum#74]
Arguments: hashpartitioning(d_year#15, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, 5), ENSURE_REQUIREMENTS, [id=#75]

(77) HashAggregate [codegen id : 33]
Input [7]: [d_year#15, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sum#73, sum#74]
Keys [5]: [d_year#15, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12]
Functions [2]: [sum(sales_cnt#24), sum(UnscaledValue(sales_amt#25))]
Aggregate Attributes [2]: [sum(sales_cnt#24)#76, sum(UnscaledValue(sales_amt#25))#77]
Results [7]: [d_year#15, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sum(sales_cnt#24)#76 AS sales_cnt#78, MakeDecimal(sum(UnscaledValue(sales_amt#25))#77,18,2) AS sales_amt#79]

(78) Exchange
Input [7]: [d_year#15, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#78, sales_amt#79]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, 5), ENSURE_REQUIREMENTS, [id=#80]

(79) Sort [codegen id : 34]
Input [7]: [d_year#15, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#78, sales_amt#79]
Arguments: [i_brand_id#8 ASC NULLS FIRST, i_class_id#9 ASC NULLS FIRST, i_category_id#10 ASC NULLS FIRST, i_manufact_id#12 ASC NULLS FIRST], false, 0

(80) Scan parquet default.catalog_sales
Output [5]: [cs_item_sk#81, cs_order_number#82, cs_quantity#83, cs_ext_sales_price#84, cs_sold_date_sk#85]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#85), dynamicpruningexpression(cs_sold_date_sk#85 IN dynamicpruning#86)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_order_number:int,cs_quantity:int,cs_ext_sales_price:decimal(7,2)>

(81) ColumnarToRow [codegen id : 37]
Input [5]: [cs_item_sk#81, cs_order_number#82, cs_quantity#83, cs_ext_sales_price#84, cs_sold_date_sk#85]

(82) Filter [codegen id : 37]
Input [5]: [cs_item_sk#81, cs_order_number#82, cs_quantity#83, cs_ext_sales_price#84, cs_sold_date_sk#85]
Condition : isnotnull(cs_item_sk#81)

(83) ReusedExchange [Reuses operator id: 8]
Output [5]: [i_item_sk#87, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91]

(84) BroadcastHashJoin [codegen id : 37]
Left keys [1]: [cs_item_sk#81]
Right keys [1]: [i_item_sk#87]
Join condition: None

(85) Project [codegen id : 37]
Output [9]: [cs_item_sk#81, cs_order_number#82, cs_quantity#83, cs_ext_sales_price#84, cs_sold_date_sk#85, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91]
Input [10]: [cs_item_sk#81, cs_order_number#82, cs_quantity#83, cs_ext_sales_price#84, cs_sold_date_sk#85, i_item_sk#87, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91]

(86) ReusedExchange [Reuses operator id: 165]
Output [2]: [d_date_sk#92, d_year#93]

(87) BroadcastHashJoin [codegen id : 37]
Left keys [1]: [cs_sold_date_sk#85]
Right keys [1]: [d_date_sk#92]
Join condition: None

(88) Project [codegen id : 37]
Output [9]: [cs_item_sk#81, cs_order_number#82, cs_quantity#83, cs_ext_sales_price#84, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91, d_year#93]
Input [11]: [cs_item_sk#81, cs_order_number#82, cs_quantity#83, cs_ext_sales_price#84, cs_sold_date_sk#85, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91, d_date_sk#92, d_year#93]

(89) Exchange
Input [9]: [cs_item_sk#81, cs_order_number#82, cs_quantity#83, cs_ext_sales_price#84, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91, d_year#93]
Arguments: hashpartitioning(cs_order_number#82, cs_item_sk#81, 5), ENSURE_REQUIREMENTS, [id=#94]

(90) Sort [codegen id : 38]
Input [9]: [cs_item_sk#81, cs_order_number#82, cs_quantity#83, cs_ext_sales_price#84, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91, d_year#93]
Arguments: [cs_order_number#82 ASC NULLS FIRST, cs_item_sk#81 ASC NULLS FIRST], false, 0

(91) Scan parquet default.catalog_returns
Output [5]: [cr_item_sk#95, cr_order_number#96, cr_return_quantity#97, cr_return_amount#98, cr_returned_date_sk#99]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_quantity:int,cr_return_amount:decimal(7,2)>

(92) ColumnarToRow [codegen id : 42]
Input [5]: [cr_item_sk#95, cr_order_number#96, cr_return_quantity#97, cr_return_amount#98, cr_returned_date_sk#99]

(93) Filter [codegen id : 42]
Input [5]: [cr_item_sk#95, cr_order_number#96, cr_return_quantity#97, cr_return_amount#98, cr_returned_date_sk#99]
Condition : (isnotnull(cr_order_number#96) AND isnotnull(cr_item_sk#95))

(94) Project [codegen id : 42]
Output [4]: [cr_item_sk#95, cr_order_number#96, cr_return_quantity#97, cr_return_amount#98]
Input [5]: [cr_item_sk#95, cr_order_number#96, cr_return_quantity#97, cr_return_amount#98, cr_returned_date_sk#99]

(95) ReusedExchange [Reuses operator id: 89]
Output [9]: [cs_item_sk#81, cs_order_number#82, cs_quantity#83, cs_ext_sales_price#84, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91, d_year#93]

(96) BroadcastExchange
Input [9]: [cs_item_sk#81, cs_order_number#82, cs_quantity#83, cs_ext_sales_price#84, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91, d_year#93]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [id=#100]

(97) BroadcastHashJoin [codegen id : 42]
Left keys [2]: [cr_order_number#96, cr_item_sk#95]
Right keys [2]: [cs_order_number#82, cs_item_sk#81]
Join condition: None

(98) Exchange
Input [4]: [cr_item_sk#95, cr_order_number#96, cr_return_quantity#97, cr_return_amount#98]
Arguments: hashpartitioning(cr_order_number#96, cr_item_sk#95, 5), ENSURE_REQUIREMENTS, [id=#101]

(99) Sort [codegen id : 43]
Input [4]: [cr_item_sk#95, cr_order_number#96, cr_return_quantity#97, cr_return_amount#98]
Arguments: [cr_order_number#96 ASC NULLS FIRST, cr_item_sk#95 ASC NULLS FIRST], false, 0

(100) SortMergeJoin [codegen id : 44]
Left keys [2]: [cs_order_number#82, cs_item_sk#81]
Right keys [2]: [cr_order_number#96, cr_item_sk#95]
Join condition: None

(101) Project [codegen id : 44]
Output [7]: [d_year#93, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91, (cs_quantity#83 - coalesce(cr_return_quantity#97, 0)) AS sales_cnt#24, CheckOverflow((promote_precision(cast(cs_ext_sales_price#84 as decimal(8,2))) - promote_precision(cast(coalesce(cr_return_amount#98, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#25]
Input [13]: [cs_item_sk#81, cs_order_number#82, cs_quantity#83, cs_ext_sales_price#84, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91, d_year#93, cr_item_sk#95, cr_order_number#96, cr_return_quantity#97, cr_return_amount#98]

(102) Scan parquet default.store_sales
Output [5]: [ss_item_sk#102, ss_ticket_number#103, ss_quantity#104, ss_ext_sales_price#105, ss_sold_date_sk#106]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#106), dynamicpruningexpression(ss_sold_date_sk#106 IN dynamicpruning#86)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ticket_number:int,ss_quantity:int,ss_ext_sales_price:decimal(7,2)>

(103) ColumnarToRow [codegen id : 47]
Input [5]: [ss_item_sk#102, ss_ticket_number#103, ss_quantity#104, ss_ext_sales_price#105, ss_sold_date_sk#106]

(104) Filter [codegen id : 47]
Input [5]: [ss_item_sk#102, ss_ticket_number#103, ss_quantity#104, ss_ext_sales_price#105, ss_sold_date_sk#106]
Condition : isnotnull(ss_item_sk#102)

(105) ReusedExchange [Reuses operator id: 8]
Output [5]: [i_item_sk#107, i_brand_id#108, i_class_id#109, i_category_id#110, i_manufact_id#111]

(106) BroadcastHashJoin [codegen id : 47]
Left keys [1]: [ss_item_sk#102]
Right keys [1]: [i_item_sk#107]
Join condition: None

(107) Project [codegen id : 47]
Output [9]: [ss_item_sk#102, ss_ticket_number#103, ss_quantity#104, ss_ext_sales_price#105, ss_sold_date_sk#106, i_brand_id#108, i_class_id#109, i_category_id#110, i_manufact_id#111]
Input [10]: [ss_item_sk#102, ss_ticket_number#103, ss_quantity#104, ss_ext_sales_price#105, ss_sold_date_sk#106, i_item_sk#107, i_brand_id#108, i_class_id#109, i_category_id#110, i_manufact_id#111]

(108) ReusedExchange [Reuses operator id: 165]
Output [2]: [d_date_sk#112, d_year#113]

(109) BroadcastHashJoin [codegen id : 47]
Left keys [1]: [ss_sold_date_sk#106]
Right keys [1]: [d_date_sk#112]
Join condition: None

(110) Project [codegen id : 47]
Output [9]: [ss_item_sk#102, ss_ticket_number#103, ss_quantity#104, ss_ext_sales_price#105, i_brand_id#108, i_class_id#109, i_category_id#110, i_manufact_id#111, d_year#113]
Input [11]: [ss_item_sk#102, ss_ticket_number#103, ss_quantity#104, ss_ext_sales_price#105, ss_sold_date_sk#106, i_brand_id#108, i_class_id#109, i_category_id#110, i_manufact_id#111, d_date_sk#112, d_year#113]

(111) Exchange
Input [9]: [ss_item_sk#102, ss_ticket_number#103, ss_quantity#104, ss_ext_sales_price#105, i_brand_id#108, i_class_id#109, i_category_id#110, i_manufact_id#111, d_year#113]
Arguments: hashpartitioning(ss_ticket_number#103, ss_item_sk#102, 5), ENSURE_REQUIREMENTS, [id=#114]

(112) Sort [codegen id : 48]
Input [9]: [ss_item_sk#102, ss_ticket_number#103, ss_quantity#104, ss_ext_sales_price#105, i_brand_id#108, i_class_id#109, i_category_id#110, i_manufact_id#111, d_year#113]
Arguments: [ss_ticket_number#103 ASC NULLS FIRST, ss_item_sk#102 ASC NULLS FIRST], false, 0

(113) Scan parquet default.store_returns
Output [5]: [sr_item_sk#115, sr_ticket_number#116, sr_return_quantity#117, sr_return_amt#118, sr_returned_date_sk#119]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int,sr_return_quantity:int,sr_return_amt:decimal(7,2)>

(114) ColumnarToRow [codegen id : 52]
Input [5]: [sr_item_sk#115, sr_ticket_number#116, sr_return_quantity#117, sr_return_amt#118, sr_returned_date_sk#119]

(115) Filter [codegen id : 52]
Input [5]: [sr_item_sk#115, sr_ticket_number#116, sr_return_quantity#117, sr_return_amt#118, sr_returned_date_sk#119]
Condition : (isnotnull(sr_ticket_number#116) AND isnotnull(sr_item_sk#115))

(116) Project [codegen id : 52]
Output [4]: [sr_item_sk#115, sr_ticket_number#116, sr_return_quantity#117, sr_return_amt#118]
Input [5]: [sr_item_sk#115, sr_ticket_number#116, sr_return_quantity#117, sr_return_amt#118, sr_returned_date_sk#119]

(117) ReusedExchange [Reuses operator id: 111]
Output [9]: [ss_item_sk#102, ss_ticket_number#103, ss_quantity#104, ss_ext_sales_price#105, i_brand_id#108, i_class_id#109, i_category_id#110, i_manufact_id#111, d_year#113]

(118) BroadcastExchange
Input [9]: [ss_item_sk#102, ss_ticket_number#103, ss_quantity#104, ss_ext_sales_price#105, i_brand_id#108, i_class_id#109, i_category_id#110, i_manufact_id#111, d_year#113]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [id=#120]

(119) BroadcastHashJoin [codegen id : 52]
Left keys [2]: [sr_ticket_number#116, sr_item_sk#115]
Right keys [2]: [ss_ticket_number#103, ss_item_sk#102]
Join condition: None

(120) Exchange
Input [4]: [sr_item_sk#115, sr_ticket_number#116, sr_return_quantity#117, sr_return_amt#118]
Arguments: hashpartitioning(sr_ticket_number#116, sr_item_sk#115, 5), ENSURE_REQUIREMENTS, [id=#121]

(121) Sort [codegen id : 53]
Input [4]: [sr_item_sk#115, sr_ticket_number#116, sr_return_quantity#117, sr_return_amt#118]
Arguments: [sr_ticket_number#116 ASC NULLS FIRST, sr_item_sk#115 ASC NULLS FIRST], false, 0

(122) SortMergeJoin [codegen id : 54]
Left keys [2]: [ss_ticket_number#103, ss_item_sk#102]
Right keys [2]: [sr_ticket_number#116, sr_item_sk#115]
Join condition: None

(123) Project [codegen id : 54]
Output [7]: [d_year#113, i_brand_id#108, i_class_id#109, i_category_id#110, i_manufact_id#111, (ss_quantity#104 - coalesce(sr_return_quantity#117, 0)) AS sales_cnt#46, CheckOverflow((promote_precision(cast(ss_ext_sales_price#105 as decimal(8,2))) - promote_precision(cast(coalesce(sr_return_amt#118, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#47]
Input [13]: [ss_item_sk#102, ss_ticket_number#103, ss_quantity#104, ss_ext_sales_price#105, i_brand_id#108, i_class_id#109, i_category_id#110, i_manufact_id#111, d_year#113, sr_item_sk#115, sr_ticket_number#116, sr_return_quantity#117, sr_return_amt#118]

(124) Scan parquet default.web_sales
Output [5]: [ws_item_sk#122, ws_order_number#123, ws_quantity#124, ws_ext_sales_price#125, ws_sold_date_sk#126]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#126), dynamicpruningexpression(ws_sold_date_sk#126 IN dynamicpruning#86)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_order_number:int,ws_quantity:int,ws_ext_sales_price:decimal(7,2)>

(125) ColumnarToRow [codegen id : 57]
Input [5]: [ws_item_sk#122, ws_order_number#123, ws_quantity#124, ws_ext_sales_price#125, ws_sold_date_sk#126]

(126) Filter [codegen id : 57]
Input [5]: [ws_item_sk#122, ws_order_number#123, ws_quantity#124, ws_ext_sales_price#125, ws_sold_date_sk#126]
Condition : isnotnull(ws_item_sk#122)

(127) ReusedExchange [Reuses operator id: 8]
Output [5]: [i_item_sk#127, i_brand_id#128, i_class_id#129, i_category_id#130, i_manufact_id#131]

(128) BroadcastHashJoin [codegen id : 57]
Left keys [1]: [ws_item_sk#122]
Right keys [1]: [i_item_sk#127]
Join condition: None

(129) Project [codegen id : 57]
Output [9]: [ws_item_sk#122, ws_order_number#123, ws_quantity#124, ws_ext_sales_price#125, ws_sold_date_sk#126, i_brand_id#128, i_class_id#129, i_category_id#130, i_manufact_id#131]
Input [10]: [ws_item_sk#122, ws_order_number#123, ws_quantity#124, ws_ext_sales_price#125, ws_sold_date_sk#126, i_item_sk#127, i_brand_id#128, i_class_id#129, i_category_id#130, i_manufact_id#131]

(130) ReusedExchange [Reuses operator id: 165]
Output [2]: [d_date_sk#132, d_year#133]

(131) BroadcastHashJoin [codegen id : 57]
Left keys [1]: [ws_sold_date_sk#126]
Right keys [1]: [d_date_sk#132]
Join condition: None

(132) Project [codegen id : 57]
Output [9]: [ws_item_sk#122, ws_order_number#123, ws_quantity#124, ws_ext_sales_price#125, i_brand_id#128, i_class_id#129, i_category_id#130, i_manufact_id#131, d_year#133]
Input [11]: [ws_item_sk#122, ws_order_number#123, ws_quantity#124, ws_ext_sales_price#125, ws_sold_date_sk#126, i_brand_id#128, i_class_id#129, i_category_id#130, i_manufact_id#131, d_date_sk#132, d_year#133]

(133) Exchange
Input [9]: [ws_item_sk#122, ws_order_number#123, ws_quantity#124, ws_ext_sales_price#125, i_brand_id#128, i_class_id#129, i_category_id#130, i_manufact_id#131, d_year#133]
Arguments: hashpartitioning(ws_order_number#123, ws_item_sk#122, 5), ENSURE_REQUIREMENTS, [id=#134]

(134) Sort [codegen id : 58]
Input [9]: [ws_item_sk#122, ws_order_number#123, ws_quantity#124, ws_ext_sales_price#125, i_brand_id#128, i_class_id#129, i_category_id#130, i_manufact_id#131, d_year#133]
Arguments: [ws_order_number#123 ASC NULLS FIRST, ws_item_sk#122 ASC NULLS FIRST], false, 0

(135) Scan parquet default.web_returns
Output [5]: [wr_item_sk#135, wr_order_number#136, wr_return_quantity#137, wr_return_amt#138, wr_returned_date_sk#139]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_order_number), IsNotNull(wr_item_sk)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_quantity:int,wr_return_amt:decimal(7,2)>

(136) ColumnarToRow [codegen id : 62]
Input [5]: [wr_item_sk#135, wr_order_number#136, wr_return_quantity#137, wr_return_amt#138, wr_returned_date_sk#139]

(137) Filter [codegen id : 62]
Input [5]: [wr_item_sk#135, wr_order_number#136, wr_return_quantity#137, wr_return_amt#138, wr_returned_date_sk#139]
Condition : (isnotnull(wr_order_number#136) AND isnotnull(wr_item_sk#135))

(138) Project [codegen id : 62]
Output [4]: [wr_item_sk#135, wr_order_number#136, wr_return_quantity#137, wr_return_amt#138]
Input [5]: [wr_item_sk#135, wr_order_number#136, wr_return_quantity#137, wr_return_amt#138, wr_returned_date_sk#139]

(139) ReusedExchange [Reuses operator id: 133]
Output [9]: [ws_item_sk#122, ws_order_number#123, ws_quantity#124, ws_ext_sales_price#125, i_brand_id#128, i_class_id#129, i_category_id#130, i_manufact_id#131, d_year#133]

(140) BroadcastExchange
Input [9]: [ws_item_sk#122, ws_order_number#123, ws_quantity#124, ws_ext_sales_price#125, i_brand_id#128, i_class_id#129, i_category_id#130, i_manufact_id#131, d_year#133]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [id=#140]

(141) BroadcastHashJoin [codegen id : 62]
Left keys [2]: [wr_order_number#136, wr_item_sk#135]
Right keys [2]: [ws_order_number#123, ws_item_sk#122]
Join condition: None

(142) Exchange
Input [4]: [wr_item_sk#135, wr_order_number#136, wr_return_quantity#137, wr_return_amt#138]
Arguments: hashpartitioning(wr_order_number#136, wr_item_sk#135, 5), ENSURE_REQUIREMENTS, [id=#141]

(143) Sort [codegen id : 63]
Input [4]: [wr_item_sk#135, wr_order_number#136, wr_return_quantity#137, wr_return_amt#138]
Arguments: [wr_order_number#136 ASC NULLS FIRST, wr_item_sk#135 ASC NULLS FIRST], false, 0

(144) SortMergeJoin [codegen id : 64]
Left keys [2]: [ws_order_number#123, ws_item_sk#122]
Right keys [2]: [wr_order_number#136, wr_item_sk#135]
Join condition: None

(145) Project [codegen id : 64]
Output [7]: [d_year#133, i_brand_id#128, i_class_id#129, i_category_id#130, i_manufact_id#131, (ws_quantity#124 - coalesce(wr_return_quantity#137, 0)) AS sales_cnt#68, CheckOverflow((promote_precision(cast(ws_ext_sales_price#125 as decimal(8,2))) - promote_precision(cast(coalesce(wr_return_amt#138, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#69]
Input [13]: [ws_item_sk#122, ws_order_number#123, ws_quantity#124, ws_ext_sales_price#125, i_brand_id#128, i_class_id#129, i_category_id#130, i_manufact_id#131, d_year#133, wr_item_sk#135, wr_order_number#136, wr_return_quantity#137, wr_return_amt#138]

(146) Union

(147) HashAggregate [codegen id : 65]
Input [7]: [d_year#93, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91, sales_cnt#24, sales_amt#25]
Keys [7]: [d_year#93, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91, sales_cnt#24, sales_amt#25]
Functions: []
Aggregate Attributes: []
Results [7]: [d_year#93, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91, sales_cnt#24, sales_amt#25]

(148) Exchange
Input [7]: [d_year#93, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91, sales_cnt#24, sales_amt#25]
Arguments: hashpartitioning(d_year#93, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91, sales_cnt#24, sales_amt#25, 5), ENSURE_REQUIREMENTS, [id=#142]

(149) HashAggregate [codegen id : 66]
Input [7]: [d_year#93, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91, sales_cnt#24, sales_amt#25]
Keys [7]: [d_year#93, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91, sales_cnt#24, sales_amt#25]
Functions: []
Aggregate Attributes: []
Results [7]: [d_year#93, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91, sales_cnt#24, sales_amt#25]

(150) HashAggregate [codegen id : 66]
Input [7]: [d_year#93, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91, sales_cnt#24, sales_amt#25]
Keys [5]: [d_year#93, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91]
Functions [2]: [partial_sum(sales_cnt#24), partial_sum(UnscaledValue(sales_amt#25))]
Aggregate Attributes [2]: [sum#143, sum#144]
Results [7]: [d_year#93, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91, sum#145, sum#146]

(151) Exchange
Input [7]: [d_year#93, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91, sum#145, sum#146]
Arguments: hashpartitioning(d_year#93, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91, 5), ENSURE_REQUIREMENTS, [id=#147]

(152) HashAggregate [codegen id : 67]
Input [7]: [d_year#93, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91, sum#145, sum#146]
Keys [5]: [d_year#93, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91]
Functions [2]: [sum(sales_cnt#24), sum(UnscaledValue(sales_amt#25))]
Aggregate Attributes [2]: [sum(sales_cnt#24)#148, sum(UnscaledValue(sales_amt#25))#149]
Results [7]: [d_year#93, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91, sum(sales_cnt#24)#148 AS sales_cnt#150, MakeDecimal(sum(UnscaledValue(sales_amt#25))#149,18,2) AS sales_amt#151]

(153) Exchange
Input [7]: [d_year#93, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91, sales_cnt#150, sales_amt#151]
Arguments: hashpartitioning(i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91, 5), ENSURE_REQUIREMENTS, [id=#152]

(154) Sort [codegen id : 68]
Input [7]: [d_year#93, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91, sales_cnt#150, sales_amt#151]
Arguments: [i_brand_id#88 ASC NULLS FIRST, i_class_id#89 ASC NULLS FIRST, i_category_id#90 ASC NULLS FIRST, i_manufact_id#91 ASC NULLS FIRST], false, 0

(155) SortMergeJoin [codegen id : 69]
Left keys [4]: [i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12]
Right keys [4]: [i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91]
Join condition: (CheckOverflow((promote_precision(cast(sales_cnt#78 as decimal(17,2))) / promote_precision(cast(sales_cnt#150 as decimal(17,2)))), DecimalType(37,20), true) < 0.90000000000000000000)

(156) Project [codegen id : 69]
Output [10]: [d_year#93 AS prev_year#153, d_year#15 AS year#154, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#150 AS prev_yr_cnt#155, sales_cnt#78 AS curr_yr_cnt#156, (sales_cnt#78 - sales_cnt#150) AS sales_cnt_diff#157, CheckOverflow((promote_precision(cast(sales_amt#79 as decimal(19,2))) - promote_precision(cast(sales_amt#151 as decimal(19,2)))), DecimalType(19,2), true) AS sales_amt_diff#158]
Input [14]: [d_year#15, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#78, sales_amt#79, d_year#93, i_brand_id#88, i_class_id#89, i_category_id#90, i_manufact_id#91, sales_cnt#150, sales_amt#151]

(157) TakeOrderedAndProject
Input [10]: [prev_year#153, year#154, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, prev_yr_cnt#155, curr_yr_cnt#156, sales_cnt_diff#157, sales_amt_diff#158]
Arguments: 100, [sales_cnt_diff#157 ASC NULLS FIRST, sales_amt_diff#158 ASC NULLS FIRST], [prev_year#153, year#154, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, prev_yr_cnt#155, curr_yr_cnt#156, sales_cnt_diff#157, sales_amt_diff#158]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (161)
+- * Filter (160)
   +- * ColumnarToRow (159)
      +- Scan parquet default.date_dim (158)


(158) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(159) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#15]

(160) Filter [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#15]
Condition : ((isnotnull(d_year#15) AND (d_year#15 = 2002)) AND isnotnull(d_date_sk#14))

(161) BroadcastExchange
Input [2]: [d_date_sk#14, d_year#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#159]

Subquery:2 Hosting operator id = 27 Hosting Expression = ss_sold_date_sk#30 IN dynamicpruning#6

Subquery:3 Hosting operator id = 49 Hosting Expression = ws_sold_date_sk#52 IN dynamicpruning#6

Subquery:4 Hosting operator id = 80 Hosting Expression = cs_sold_date_sk#85 IN dynamicpruning#86
BroadcastExchange (165)
+- * Filter (164)
   +- * ColumnarToRow (163)
      +- Scan parquet default.date_dim (162)


(162) Scan parquet default.date_dim
Output [2]: [d_date_sk#92, d_year#93]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(163) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#92, d_year#93]

(164) Filter [codegen id : 1]
Input [2]: [d_date_sk#92, d_year#93]
Condition : ((isnotnull(d_year#93) AND (d_year#93 = 2001)) AND isnotnull(d_date_sk#92))

(165) BroadcastExchange
Input [2]: [d_date_sk#92, d_year#93]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#160]

Subquery:5 Hosting operator id = 102 Hosting Expression = ss_sold_date_sk#106 IN dynamicpruning#86

Subquery:6 Hosting operator id = 124 Hosting Expression = ws_sold_date_sk#126 IN dynamicpruning#86


