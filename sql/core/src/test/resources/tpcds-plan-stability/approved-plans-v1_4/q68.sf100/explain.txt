== Physical Plan ==
TakeOrderedAndProject (51)
+- * Project (50)
   +- * SortMergeJoin Inner (49)
      :- * Sort (14)
      :  +- Exchange (13)
      :     +- * Project (12)
      :        +- * SortMergeJoin Inner (11)
      :           :- * Sort (5)
      :           :  +- Exchange (4)
      :           :     +- * Filter (3)
      :           :        +- * ColumnarToRow (2)
      :           :           +- Scan parquet default.customer_address (1)
      :           +- * Sort (10)
      :              +- Exchange (9)
      :                 +- * Filter (8)
      :                    +- * ColumnarToRow (7)
      :                       +- Scan parquet default.customer (6)
      +- * Sort (48)
         +- Exchange (47)
            +- * HashAggregate (46)
               +- * HashAggregate (45)
                  +- * Project (44)
                     +- * SortMergeJoin Inner (43)
                        :- * Sort (40)
                        :  +- Exchange (39)
                        :     +- * Project (38)
                        :        +- * BroadcastHashJoin Inner BuildRight (37)
                        :           :- * Project (31)
                        :           :  +- * BroadcastHashJoin Inner BuildRight (30)
                        :           :     :- * Project (24)
                        :           :     :  +- * BroadcastHashJoin Inner BuildLeft (23)
                        :           :     :     :- BroadcastExchange (19)
                        :           :     :     :  +- * Project (18)
                        :           :     :     :     +- * Filter (17)
                        :           :     :     :        +- * ColumnarToRow (16)
                        :           :     :     :           +- Scan parquet default.date_dim (15)
                        :           :     :     +- * Filter (22)
                        :           :     :        +- * ColumnarToRow (21)
                        :           :     :           +- Scan parquet default.store_sales (20)
                        :           :     +- BroadcastExchange (29)
                        :           :        +- * Project (28)
                        :           :           +- * Filter (27)
                        :           :              +- * ColumnarToRow (26)
                        :           :                 +- Scan parquet default.store (25)
                        :           +- BroadcastExchange (36)
                        :              +- * Project (35)
                        :                 +- * Filter (34)
                        :                    +- * ColumnarToRow (33)
                        :                       +- Scan parquet default.household_demographics (32)
                        +- * Sort (42)
                           +- ReusedExchange (41)


(1) Scan parquet default.customer_address
Output [2]: [ca_address_sk#1, ca_city#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_city)]
ReadSchema: struct<ca_address_sk:int,ca_city:string>

(2) ColumnarToRow [codegen id : 1]
Input [2]: [ca_address_sk#1, ca_city#2]

(3) Filter [codegen id : 1]
Input [2]: [ca_address_sk#1, ca_city#2]
Condition : (isnotnull(ca_address_sk#1) AND isnotnull(ca_city#2))

(4) Exchange
Input [2]: [ca_address_sk#1, ca_city#2]
Arguments: hashpartitioning(ca_address_sk#1, 5), true, [id=#3]

(5) Sort [codegen id : 2]
Input [2]: [ca_address_sk#1, ca_city#2]
Arguments: [ca_address_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.customer
Output [4]: [c_customer_sk#4, c_current_addr_sk#5, c_first_name#6, c_last_name#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string>

(7) ColumnarToRow [codegen id : 3]
Input [4]: [c_customer_sk#4, c_current_addr_sk#5, c_first_name#6, c_last_name#7]

(8) Filter [codegen id : 3]
Input [4]: [c_customer_sk#4, c_current_addr_sk#5, c_first_name#6, c_last_name#7]
Condition : (isnotnull(c_customer_sk#4) AND isnotnull(c_current_addr_sk#5))

(9) Exchange
Input [4]: [c_customer_sk#4, c_current_addr_sk#5, c_first_name#6, c_last_name#7]
Arguments: hashpartitioning(c_current_addr_sk#5, 5), true, [id=#8]

(10) Sort [codegen id : 4]
Input [4]: [c_customer_sk#4, c_current_addr_sk#5, c_first_name#6, c_last_name#7]
Arguments: [c_current_addr_sk#5 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 5]
Left keys [1]: [ca_address_sk#1]
Right keys [1]: [c_current_addr_sk#5]
Join condition: None

(12) Project [codegen id : 5]
Output [4]: [ca_city#2, c_customer_sk#4, c_first_name#6, c_last_name#7]
Input [6]: [ca_address_sk#1, ca_city#2, c_customer_sk#4, c_current_addr_sk#5, c_first_name#6, c_last_name#7]

(13) Exchange
Input [4]: [ca_city#2, c_customer_sk#4, c_first_name#6, c_last_name#7]
Arguments: hashpartitioning(c_customer_sk#4, 5), true, [id=#9]

(14) Sort [codegen id : 6]
Input [4]: [ca_city#2, c_customer_sk#4, c_first_name#6, c_last_name#7]
Arguments: [c_customer_sk#4 ASC NULLS FIRST], false, 0

(15) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_dom#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_dom), GreaterThanOrEqual(d_dom,1), LessThanOrEqual(d_dom,2), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_dom:int>

(16) ColumnarToRow [codegen id : 7]
Input [3]: [d_date_sk#10, d_year#11, d_dom#12]

(17) Filter [codegen id : 7]
Input [3]: [d_date_sk#10, d_year#11, d_dom#12]
Condition : ((((isnotnull(d_dom#12) AND (d_dom#12 >= 1)) AND (d_dom#12 <= 2)) AND d_year#11 IN (1999,2000,2001)) AND isnotnull(d_date_sk#10))

(18) Project [codegen id : 7]
Output [1]: [d_date_sk#10]
Input [3]: [d_date_sk#10, d_year#11, d_dom#12]

(19) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13]

(20) Scan parquet default.store_sales
Output [9]: [ss_sold_date_sk#14, ss_customer_sk#15, ss_hdemo_sk#16, ss_addr_sk#17, ss_store_sk#18, ss_ticket_number#19, ss_ext_sales_price#20, ss_ext_list_price#21, ss_ext_tax#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_ext_sales_price:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2)>

(21) ColumnarToRow
Input [9]: [ss_sold_date_sk#14, ss_customer_sk#15, ss_hdemo_sk#16, ss_addr_sk#17, ss_store_sk#18, ss_ticket_number#19, ss_ext_sales_price#20, ss_ext_list_price#21, ss_ext_tax#22]

(22) Filter
Input [9]: [ss_sold_date_sk#14, ss_customer_sk#15, ss_hdemo_sk#16, ss_addr_sk#17, ss_store_sk#18, ss_ticket_number#19, ss_ext_sales_price#20, ss_ext_list_price#21, ss_ext_tax#22]
Condition : ((((isnotnull(ss_sold_date_sk#14) AND isnotnull(ss_store_sk#18)) AND isnotnull(ss_hdemo_sk#16)) AND isnotnull(ss_addr_sk#17)) AND isnotnull(ss_customer_sk#15))

(23) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [d_date_sk#10]
Right keys [1]: [ss_sold_date_sk#14]
Join condition: None

(24) Project [codegen id : 10]
Output [8]: [ss_customer_sk#15, ss_hdemo_sk#16, ss_addr_sk#17, ss_store_sk#18, ss_ticket_number#19, ss_ext_sales_price#20, ss_ext_list_price#21, ss_ext_tax#22]
Input [10]: [d_date_sk#10, ss_sold_date_sk#14, ss_customer_sk#15, ss_hdemo_sk#16, ss_addr_sk#17, ss_store_sk#18, ss_ticket_number#19, ss_ext_sales_price#20, ss_ext_list_price#21, ss_ext_tax#22]

(25) Scan parquet default.store
Output [2]: [s_store_sk#23, s_city#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [In(s_city, [Midway,Fairview]), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_city:string>

(26) ColumnarToRow [codegen id : 8]
Input [2]: [s_store_sk#23, s_city#24]

(27) Filter [codegen id : 8]
Input [2]: [s_store_sk#23, s_city#24]
Condition : (s_city#24 IN (Midway,Fairview) AND isnotnull(s_store_sk#23))

(28) Project [codegen id : 8]
Output [1]: [s_store_sk#23]
Input [2]: [s_store_sk#23, s_city#24]

(29) BroadcastExchange
Input [1]: [s_store_sk#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#25]

(30) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_store_sk#18]
Right keys [1]: [s_store_sk#23]
Join condition: None

(31) Project [codegen id : 10]
Output [7]: [ss_customer_sk#15, ss_hdemo_sk#16, ss_addr_sk#17, ss_ticket_number#19, ss_ext_sales_price#20, ss_ext_list_price#21, ss_ext_tax#22]
Input [9]: [ss_customer_sk#15, ss_hdemo_sk#16, ss_addr_sk#17, ss_store_sk#18, ss_ticket_number#19, ss_ext_sales_price#20, ss_ext_list_price#21, ss_ext_tax#22, s_store_sk#23]

(32) Scan parquet default.household_demographics
Output [3]: [hd_demo_sk#26, hd_dep_count#27, hd_vehicle_count#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [Or(EqualTo(hd_dep_count,4),EqualTo(hd_vehicle_count,3)), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>

(33) ColumnarToRow [codegen id : 9]
Input [3]: [hd_demo_sk#26, hd_dep_count#27, hd_vehicle_count#28]

(34) Filter [codegen id : 9]
Input [3]: [hd_demo_sk#26, hd_dep_count#27, hd_vehicle_count#28]
Condition : (((hd_dep_count#27 = 4) OR (hd_vehicle_count#28 = 3)) AND isnotnull(hd_demo_sk#26))

(35) Project [codegen id : 9]
Output [1]: [hd_demo_sk#26]
Input [3]: [hd_demo_sk#26, hd_dep_count#27, hd_vehicle_count#28]

(36) BroadcastExchange
Input [1]: [hd_demo_sk#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#29]

(37) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_hdemo_sk#16]
Right keys [1]: [hd_demo_sk#26]
Join condition: None

(38) Project [codegen id : 10]
Output [6]: [ss_customer_sk#15, ss_addr_sk#17, ss_ticket_number#19, ss_ext_sales_price#20, ss_ext_list_price#21, ss_ext_tax#22]
Input [8]: [ss_customer_sk#15, ss_hdemo_sk#16, ss_addr_sk#17, ss_ticket_number#19, ss_ext_sales_price#20, ss_ext_list_price#21, ss_ext_tax#22, hd_demo_sk#26]

(39) Exchange
Input [6]: [ss_customer_sk#15, ss_addr_sk#17, ss_ticket_number#19, ss_ext_sales_price#20, ss_ext_list_price#21, ss_ext_tax#22]
Arguments: hashpartitioning(ss_addr_sk#17, 5), true, [id=#30]

(40) Sort [codegen id : 11]
Input [6]: [ss_customer_sk#15, ss_addr_sk#17, ss_ticket_number#19, ss_ext_sales_price#20, ss_ext_list_price#21, ss_ext_tax#22]
Arguments: [ss_addr_sk#17 ASC NULLS FIRST], false, 0

(41) ReusedExchange [Reuses operator id: 4]
Output [2]: [ca_address_sk#1, ca_city#2]

(42) Sort [codegen id : 13]
Input [2]: [ca_address_sk#1, ca_city#2]
Arguments: [ca_address_sk#1 ASC NULLS FIRST], false, 0

(43) SortMergeJoin [codegen id : 14]
Left keys [1]: [ss_addr_sk#17]
Right keys [1]: [ca_address_sk#1]
Join condition: None

(44) Project [codegen id : 14]
Output [7]: [ss_customer_sk#15, ss_addr_sk#17, ss_ticket_number#19, ss_ext_sales_price#20, ss_ext_list_price#21, ss_ext_tax#22, ca_city#2]
Input [8]: [ss_customer_sk#15, ss_addr_sk#17, ss_ticket_number#19, ss_ext_sales_price#20, ss_ext_list_price#21, ss_ext_tax#22, ca_address_sk#1, ca_city#2]

(45) HashAggregate [codegen id : 14]
Input [7]: [ss_customer_sk#15, ss_addr_sk#17, ss_ticket_number#19, ss_ext_sales_price#20, ss_ext_list_price#21, ss_ext_tax#22, ca_city#2]
Keys [4]: [ss_ticket_number#19, ss_customer_sk#15, ss_addr_sk#17, ca_city#2]
Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#20)), partial_sum(UnscaledValue(ss_ext_list_price#21)), partial_sum(UnscaledValue(ss_ext_tax#22))]
Aggregate Attributes [3]: [sum#31, sum#32, sum#33]
Results [7]: [ss_ticket_number#19, ss_customer_sk#15, ss_addr_sk#17, ca_city#2, sum#34, sum#35, sum#36]

(46) HashAggregate [codegen id : 14]
Input [7]: [ss_ticket_number#19, ss_customer_sk#15, ss_addr_sk#17, ca_city#2, sum#34, sum#35, sum#36]
Keys [4]: [ss_ticket_number#19, ss_customer_sk#15, ss_addr_sk#17, ca_city#2]
Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#20)), sum(UnscaledValue(ss_ext_list_price#21)), sum(UnscaledValue(ss_ext_tax#22))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_ext_sales_price#20))#37, sum(UnscaledValue(ss_ext_list_price#21))#38, sum(UnscaledValue(ss_ext_tax#22))#39]
Results [6]: [ss_ticket_number#19, ss_customer_sk#15, ca_city#2 AS bought_city#40, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#20))#37,17,2) AS extended_price#41, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#21))#38,17,2) AS list_price#42, MakeDecimal(sum(UnscaledValue(ss_ext_tax#22))#39,17,2) AS extended_tax#43]

(47) Exchange
Input [6]: [ss_ticket_number#19, ss_customer_sk#15, bought_city#40, extended_price#41, list_price#42, extended_tax#43]
Arguments: hashpartitioning(ss_customer_sk#15, 5), true, [id=#44]

(48) Sort [codegen id : 15]
Input [6]: [ss_ticket_number#19, ss_customer_sk#15, bought_city#40, extended_price#41, list_price#42, extended_tax#43]
Arguments: [ss_customer_sk#15 ASC NULLS FIRST], false, 0

(49) SortMergeJoin [codegen id : 16]
Left keys [1]: [c_customer_sk#4]
Right keys [1]: [ss_customer_sk#15]
Join condition: NOT (ca_city#2 = bought_city#40)

(50) Project [codegen id : 16]
Output [8]: [c_last_name#7, c_first_name#6, ca_city#2, bought_city#40, ss_ticket_number#19, extended_price#41, extended_tax#43, list_price#42]
Input [10]: [ca_city#2, c_customer_sk#4, c_first_name#6, c_last_name#7, ss_ticket_number#19, ss_customer_sk#15, bought_city#40, extended_price#41, list_price#42, extended_tax#43]

(51) TakeOrderedAndProject
Input [8]: [c_last_name#7, c_first_name#6, ca_city#2, bought_city#40, ss_ticket_number#19, extended_price#41, extended_tax#43, list_price#42]
Arguments: 100, [c_last_name#7 ASC NULLS FIRST, ss_ticket_number#19 ASC NULLS FIRST], [c_last_name#7, c_first_name#6, ca_city#2, bought_city#40, ss_ticket_number#19, extended_price#41, extended_tax#43, list_price#42]

