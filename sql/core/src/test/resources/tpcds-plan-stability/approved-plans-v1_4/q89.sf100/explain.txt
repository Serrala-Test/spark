== Physical Plan ==
TakeOrderedAndProject (36)
+- * Project (35)
   +- * Filter (34)
      +- Window (33)
         +- * Sort (32)
            +- Exchange (31)
               +- * HashAggregate (30)
                  +- Exchange (29)
                     +- * HashAggregate (28)
                        +- * Project (27)
                           +- * SortMergeJoin Inner (26)
                              :- * Sort (19)
                              :  +- Exchange (18)
                              :     +- * Project (17)
                              :        +- * BroadcastHashJoin Inner BuildRight (16)
                              :           :- * Project (10)
                              :           :  +- * BroadcastHashJoin Inner BuildRight (9)
                              :           :     :- * Filter (3)
                              :           :     :  +- * ColumnarToRow (2)
                              :           :     :     +- Scan parquet default.store_sales (1)
                              :           :     +- BroadcastExchange (8)
                              :           :        +- * Project (7)
                              :           :           +- * Filter (6)
                              :           :              +- * ColumnarToRow (5)
                              :           :                 +- Scan parquet default.date_dim (4)
                              :           +- BroadcastExchange (15)
                              :              +- * Project (14)
                              :                 +- * Filter (13)
                              :                    +- * ColumnarToRow (12)
                              :                       +- Scan parquet default.store (11)
                              +- * Sort (25)
                                 +- Exchange (24)
                                    +- * Project (23)
                                       +- * Filter (22)
                                          +- * ColumnarToRow (21)
                                             +- Scan parquet default.item (20)


(1) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_sales_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_sales_price#4]

(3) Filter [codegen id : 3]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_sales_price#4]
Condition : ((isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1)) AND isnotnull(ss_store_sk#3))

(4) Scan parquet default.date_dim
Output [3]: [d_date_sk#5, d_year#6, d_moy#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1999), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#5, d_year#6, d_moy#7]

(6) Filter [codegen id : 1]
Input [3]: [d_date_sk#5, d_year#6, d_moy#7]
Condition : ((isnotnull(d_year#6) AND (d_year#6 = 1999)) AND isnotnull(d_date_sk#5))

(7) Project [codegen id : 1]
Output [2]: [d_date_sk#5, d_moy#7]
Input [3]: [d_date_sk#5, d_year#6, d_moy#7]

(8) BroadcastExchange
Input [2]: [d_date_sk#5, d_moy#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#5]
Join condition: None

(10) Project [codegen id : 3]
Output [4]: [ss_item_sk#2, ss_store_sk#3, ss_sales_price#4, d_moy#7]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_sales_price#4, d_date_sk#5, d_moy#7]

(11) Scan parquet default.store
Output [3]: [s_store_sk#9, s_store_name#10, s_company_name#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_company_name:string>

(12) ColumnarToRow [codegen id : 2]
Input [3]: [s_store_sk#9, s_store_name#10, s_company_name#11]

(13) Filter [codegen id : 2]
Input [3]: [s_store_sk#9, s_store_name#10, s_company_name#11]
Condition : isnotnull(s_store_sk#9)

(14) Project [codegen id : 2]
Output [3]: [s_store_sk#9, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_store_name#10, 50, false, true) AS s_store_name#12, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_company_name#11, 50, false, true) AS s_company_name#13]
Input [3]: [s_store_sk#9, s_store_name#10, s_company_name#11]

(15) BroadcastExchange
Input [3]: [s_store_sk#9, s_store_name#12, s_company_name#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(16) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#9]
Join condition: None

(17) Project [codegen id : 3]
Output [5]: [ss_item_sk#2, ss_sales_price#4, d_moy#7, s_store_name#12, s_company_name#13]
Input [7]: [ss_item_sk#2, ss_store_sk#3, ss_sales_price#4, d_moy#7, s_store_sk#9, s_store_name#12, s_company_name#13]

(18) Exchange
Input [5]: [ss_item_sk#2, ss_sales_price#4, d_moy#7, s_store_name#12, s_company_name#13]
Arguments: hashpartitioning(ss_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#15]

(19) Sort [codegen id : 4]
Input [5]: [ss_item_sk#2, ss_sales_price#4, d_moy#7, s_store_name#12, s_company_name#13]
Arguments: [ss_item_sk#2 ASC NULLS FIRST], false, 0

(20) Scan parquet default.item
Output [4]: [i_item_sk#16, i_brand#17, i_class#18, i_category#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string>

(21) ColumnarToRow [codegen id : 5]
Input [4]: [i_item_sk#16, i_brand#17, i_class#18, i_category#19]

(22) Filter [codegen id : 5]
Input [4]: [i_item_sk#16, i_brand#17, i_class#18, i_category#19]
Condition : (((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#19, 50, false, true) IN (Books                                             ,Electronics                                       ,Sports                                            ) AND staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_class#18, 50, false, true) IN (computers                                         ,stereo                                            ,football                                          )) OR (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#19, 50, false, true) IN (Men                                               ,Jewelry                                           ,Women                                             ) AND staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_class#18, 50, false, true) IN (shirts                                            ,birdal                                            ,dresses                                           ))) AND isnotnull(i_item_sk#16))

(23) Project [codegen id : 5]
Output [4]: [i_item_sk#16, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_brand#17, 50, false, true) AS i_brand#20, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_class#18, 50, false, true) AS i_class#21, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#19, 50, false, true) AS i_category#22]
Input [4]: [i_item_sk#16, i_brand#17, i_class#18, i_category#19]

(24) Exchange
Input [4]: [i_item_sk#16, i_brand#20, i_class#21, i_category#22]
Arguments: hashpartitioning(i_item_sk#16, 5), ENSURE_REQUIREMENTS, [id=#23]

(25) Sort [codegen id : 6]
Input [4]: [i_item_sk#16, i_brand#20, i_class#21, i_category#22]
Arguments: [i_item_sk#16 ASC NULLS FIRST], false, 0

(26) SortMergeJoin [codegen id : 7]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#16]
Join condition: None

(27) Project [codegen id : 7]
Output [7]: [i_brand#20, i_class#21, i_category#22, ss_sales_price#4, d_moy#7, s_store_name#12, s_company_name#13]
Input [9]: [ss_item_sk#2, ss_sales_price#4, d_moy#7, s_store_name#12, s_company_name#13, i_item_sk#16, i_brand#20, i_class#21, i_category#22]

(28) HashAggregate [codegen id : 7]
Input [7]: [i_brand#20, i_class#21, i_category#22, ss_sales_price#4, d_moy#7, s_store_name#12, s_company_name#13]
Keys [6]: [i_category#22, i_class#21, i_brand#20, s_store_name#12, s_company_name#13, d_moy#7]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#4))]
Aggregate Attributes [1]: [sum#24]
Results [7]: [i_category#22, i_class#21, i_brand#20, s_store_name#12, s_company_name#13, d_moy#7, sum#25]

(29) Exchange
Input [7]: [i_category#22, i_class#21, i_brand#20, s_store_name#12, s_company_name#13, d_moy#7, sum#25]
Arguments: hashpartitioning(i_category#22, i_class#21, i_brand#20, s_store_name#12, s_company_name#13, d_moy#7, 5), ENSURE_REQUIREMENTS, [id=#26]

(30) HashAggregate [codegen id : 8]
Input [7]: [i_category#22, i_class#21, i_brand#20, s_store_name#12, s_company_name#13, d_moy#7, sum#25]
Keys [6]: [i_category#22, i_class#21, i_brand#20, s_store_name#12, s_company_name#13, d_moy#7]
Functions [1]: [sum(UnscaledValue(ss_sales_price#4))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#4))#27]
Results [8]: [i_category#22, i_class#21, i_brand#20, s_store_name#12, s_company_name#13, d_moy#7, MakeDecimal(sum(UnscaledValue(ss_sales_price#4))#27,17,2) AS sum_sales#28, MakeDecimal(sum(UnscaledValue(ss_sales_price#4))#27,17,2) AS _w0#29]

(31) Exchange
Input [8]: [i_category#22, i_class#21, i_brand#20, s_store_name#12, s_company_name#13, d_moy#7, sum_sales#28, _w0#29]
Arguments: hashpartitioning(i_category#22, i_brand#20, s_store_name#12, s_company_name#13, 5), ENSURE_REQUIREMENTS, [id=#30]

(32) Sort [codegen id : 9]
Input [8]: [i_category#22, i_class#21, i_brand#20, s_store_name#12, s_company_name#13, d_moy#7, sum_sales#28, _w0#29]
Arguments: [i_category#22 ASC NULLS FIRST, i_brand#20 ASC NULLS FIRST, s_store_name#12 ASC NULLS FIRST, s_company_name#13 ASC NULLS FIRST], false, 0

(33) Window
Input [8]: [i_category#22, i_class#21, i_brand#20, s_store_name#12, s_company_name#13, d_moy#7, sum_sales#28, _w0#29]
Arguments: [avg(_w0#29) windowspecdefinition(i_category#22, i_brand#20, s_store_name#12, s_company_name#13, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#31], [i_category#22, i_brand#20, s_store_name#12, s_company_name#13]

(34) Filter [codegen id : 10]
Input [9]: [i_category#22, i_class#21, i_brand#20, s_store_name#12, s_company_name#13, d_moy#7, sum_sales#28, _w0#29, avg_monthly_sales#31]
Condition : ((isnotnull(avg_monthly_sales#31) AND NOT (avg_monthly_sales#31 = 0.000000)) AND (CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#28 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#31 as decimal(22,6)))), DecimalType(22,6), true))) / promote_precision(cast(avg_monthly_sales#31 as decimal(22,6)))), DecimalType(38,16), true) > 0.1000000000000000))

(35) Project [codegen id : 10]
Output [8]: [i_category#22, i_class#21, i_brand#20, s_store_name#12, s_company_name#13, d_moy#7, sum_sales#28, avg_monthly_sales#31]
Input [9]: [i_category#22, i_class#21, i_brand#20, s_store_name#12, s_company_name#13, d_moy#7, sum_sales#28, _w0#29, avg_monthly_sales#31]

(36) TakeOrderedAndProject
Input [8]: [i_category#22, i_class#21, i_brand#20, s_store_name#12, s_company_name#13, d_moy#7, sum_sales#28, avg_monthly_sales#31]
Arguments: 100, [CheckOverflow((promote_precision(cast(sum_sales#28 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#31 as decimal(22,6)))), DecimalType(22,6), true) ASC NULLS FIRST, s_store_name#12 ASC NULLS FIRST], [i_category#22, i_class#21, i_brand#20, s_store_name#12, s_company_name#13, d_moy#7, sum_sales#28, avg_monthly_sales#31]

