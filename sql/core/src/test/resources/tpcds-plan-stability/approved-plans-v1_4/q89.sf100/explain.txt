== Physical Plan ==
TakeOrderedAndProject (31)
+- * Project (30)
   +- * Filter (29)
      +- Window (28)
         +- * Sort (27)
            +- Exchange (26)
               +- * HashAggregate (25)
                  +- Exchange (24)
                     +- * HashAggregate (23)
                        +- * Project (22)
                           +- * BroadcastHashJoin Inner BuildRight (21)
                              :- * Project (16)
                              :  +- * BroadcastHashJoin Inner BuildRight (15)
                              :     :- * Project (9)
                              :     :  +- * BroadcastHashJoin Inner BuildRight (8)
                              :     :     :- * Filter (3)
                              :     :     :  +- * ColumnarToRow (2)
                              :     :     :     +- Scan parquet default.store_sales (1)
                              :     :     +- BroadcastExchange (7)
                              :     :        +- * Filter (6)
                              :     :           +- * ColumnarToRow (5)
                              :     :              +- Scan parquet default.store (4)
                              :     +- BroadcastExchange (14)
                              :        +- * Project (13)
                              :           +- * Filter (12)
                              :              +- * ColumnarToRow (11)
                              :                 +- Scan parquet default.date_dim (10)
                              +- BroadcastExchange (20)
                                 +- * Filter (19)
                                    +- * ColumnarToRow (18)
                                       +- Scan parquet default.item (17)


(1) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_sales_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_sales_price#4]

(3) Filter [codegen id : 4]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_sales_price#4]
Condition : ((isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1)) AND isnotnull(ss_store_sk#3))

(4) Scan parquet default.store
Output [3]: [s_store_sk#5, s_store_name#6, s_company_name#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_company_name:string>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [s_store_sk#5, s_store_name#6, s_company_name#7]

(6) Filter [codegen id : 1]
Input [3]: [s_store_sk#5, s_store_name#6, s_company_name#7]
Condition : isnotnull(s_store_sk#5)

(7) BroadcastExchange
Input [3]: [s_store_sk#5, s_store_name#6, s_company_name#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#8]

(8) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#5]
Join condition: None

(9) Project [codegen id : 4]
Output [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_sales_price#4, s_store_name#6, s_company_name#7]
Input [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_sales_price#4, s_store_sk#5, s_store_name#6, s_company_name#7]

(10) Scan parquet default.date_dim
Output [3]: [d_date_sk#9, d_year#10, d_moy#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1999), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(11) ColumnarToRow [codegen id : 2]
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]

(12) Filter [codegen id : 2]
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]
Condition : ((isnotnull(d_year#10) AND (d_year#10 = 1999)) AND isnotnull(d_date_sk#9))

(13) Project [codegen id : 2]
Output [2]: [d_date_sk#9, d_moy#11]
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]

(14) BroadcastExchange
Input [2]: [d_date_sk#9, d_moy#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(15) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#9]
Join condition: None

(16) Project [codegen id : 4]
Output [5]: [ss_item_sk#2, ss_sales_price#4, s_store_name#6, s_company_name#7, d_moy#11]
Input [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_sales_price#4, s_store_name#6, s_company_name#7, d_date_sk#9, d_moy#11]

(17) Scan parquet default.item
Output [4]: [i_item_sk#13, i_brand#14, i_class#15, i_category#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [Or(And(In(i_category, [Books,Electronics,Sports]),In(i_class, [computers,stereo,football])),And(In(i_category, [Men,Jewelry,Women]),In(i_class, [shirts,birdal,dresses]))), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string>

(18) ColumnarToRow [codegen id : 3]
Input [4]: [i_item_sk#13, i_brand#14, i_class#15, i_category#16]

(19) Filter [codegen id : 3]
Input [4]: [i_item_sk#13, i_brand#14, i_class#15, i_category#16]
Condition : (((i_category#16 IN (Books,Electronics,Sports) AND i_class#15 IN (computers,stereo,football)) OR (i_category#16 IN (Men,Jewelry,Women) AND i_class#15 IN (shirts,birdal,dresses))) AND isnotnull(i_item_sk#13))

(20) BroadcastExchange
Input [4]: [i_item_sk#13, i_brand#14, i_class#15, i_category#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#17]

(21) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#13]
Join condition: None

(22) Project [codegen id : 4]
Output [7]: [i_brand#14, i_class#15, i_category#16, ss_sales_price#4, d_moy#11, s_store_name#6, s_company_name#7]
Input [9]: [ss_item_sk#2, ss_sales_price#4, s_store_name#6, s_company_name#7, d_moy#11, i_item_sk#13, i_brand#14, i_class#15, i_category#16]

(23) HashAggregate [codegen id : 4]
Input [7]: [i_brand#14, i_class#15, i_category#16, ss_sales_price#4, d_moy#11, s_store_name#6, s_company_name#7]
Keys [6]: [i_category#16, i_class#15, i_brand#14, s_store_name#6, s_company_name#7, d_moy#11]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#4))]
Aggregate Attributes [1]: [sum#18]
Results [7]: [i_category#16, i_class#15, i_brand#14, s_store_name#6, s_company_name#7, d_moy#11, sum#19]

(24) Exchange
Input [7]: [i_category#16, i_class#15, i_brand#14, s_store_name#6, s_company_name#7, d_moy#11, sum#19]
Arguments: hashpartitioning(i_category#16, i_class#15, i_brand#14, s_store_name#6, s_company_name#7, d_moy#11, 5), ENSURE_REQUIREMENTS, [id=#20]

(25) HashAggregate [codegen id : 5]
Input [7]: [i_category#16, i_class#15, i_brand#14, s_store_name#6, s_company_name#7, d_moy#11, sum#19]
Keys [6]: [i_category#16, i_class#15, i_brand#14, s_store_name#6, s_company_name#7, d_moy#11]
Functions [1]: [sum(UnscaledValue(ss_sales_price#4))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#4))#21]
Results [8]: [i_category#16, i_class#15, i_brand#14, s_store_name#6, s_company_name#7, d_moy#11, MakeDecimal(sum(UnscaledValue(ss_sales_price#4))#21,17,2) AS sum_sales#22, MakeDecimal(sum(UnscaledValue(ss_sales_price#4))#21,17,2) AS _w0#23]

(26) Exchange
Input [8]: [i_category#16, i_class#15, i_brand#14, s_store_name#6, s_company_name#7, d_moy#11, sum_sales#22, _w0#23]
Arguments: hashpartitioning(i_category#16, i_brand#14, s_store_name#6, s_company_name#7, 5), ENSURE_REQUIREMENTS, [id=#24]

(27) Sort [codegen id : 6]
Input [8]: [i_category#16, i_class#15, i_brand#14, s_store_name#6, s_company_name#7, d_moy#11, sum_sales#22, _w0#23]
Arguments: [i_category#16 ASC NULLS FIRST, i_brand#14 ASC NULLS FIRST, s_store_name#6 ASC NULLS FIRST, s_company_name#7 ASC NULLS FIRST], false, 0

(28) Window
Input [8]: [i_category#16, i_class#15, i_brand#14, s_store_name#6, s_company_name#7, d_moy#11, sum_sales#22, _w0#23]
Arguments: [avg(_w0#23) windowspecdefinition(i_category#16, i_brand#14, s_store_name#6, s_company_name#7, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#25], [i_category#16, i_brand#14, s_store_name#6, s_company_name#7]

(29) Filter [codegen id : 7]
Input [9]: [i_category#16, i_class#15, i_brand#14, s_store_name#6, s_company_name#7, d_moy#11, sum_sales#22, _w0#23, avg_monthly_sales#25]
Condition : ((isnotnull(avg_monthly_sales#25) AND NOT (avg_monthly_sales#25 = 0.000000)) AND (CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#22 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#25 as decimal(22,6)))), DecimalType(22,6), true))) / promote_precision(cast(avg_monthly_sales#25 as decimal(22,6)))), DecimalType(38,16), true) > 0.1000000000000000))

(30) Project [codegen id : 7]
Output [8]: [i_category#16, i_class#15, i_brand#14, s_store_name#6, s_company_name#7, d_moy#11, sum_sales#22, avg_monthly_sales#25]
Input [9]: [i_category#16, i_class#15, i_brand#14, s_store_name#6, s_company_name#7, d_moy#11, sum_sales#22, _w0#23, avg_monthly_sales#25]

(31) TakeOrderedAndProject
Input [8]: [i_category#16, i_class#15, i_brand#14, s_store_name#6, s_company_name#7, d_moy#11, sum_sales#22, avg_monthly_sales#25]
Arguments: 100, [CheckOverflow((promote_precision(cast(sum_sales#22 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#25 as decimal(22,6)))), DecimalType(22,6), true) ASC NULLS FIRST, s_store_name#6 ASC NULLS FIRST], [i_category#16, i_class#15, i_brand#14, s_store_name#6, s_company_name#7, d_moy#11, sum_sales#22, avg_monthly_sales#25]

