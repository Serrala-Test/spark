== Physical Plan ==
TakeOrderedAndProject (28)
+- * HashAggregate (27)
   +- Exchange (26)
      +- * HashAggregate (25)
         +- * Project (24)
            +- * SortMergeJoin Inner (23)
               :- * Sort (17)
               :  +- Exchange (16)
               :     +- * Project (15)
               :        +- * BroadcastHashJoin Inner BuildRight (14)
               :           :- * Project (9)
               :           :  +- * BroadcastHashJoin Inner BuildLeft (8)
               :           :     :- BroadcastExchange (4)
               :           :     :  +- * Project (3)
               :           :     :     +- * Filter (2)
               :           :     :        +- BatchScan default.item (1)
               :           :     +- * Project (7)
               :           :        +- * Filter (6)
               :           :           +- BatchScan default.inventory (5)
               :           +- BroadcastExchange (13)
               :              +- * Project (12)
               :                 +- * Filter (11)
               :                    +- BatchScan default.date_dim (10)
               +- * Sort (22)
                  +- Exchange (21)
                     +- * Project (20)
                        +- * Filter (19)
                           +- BatchScan default.store_sales (18)


(1) BatchScan default.item
Output [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, i_manufact_id#5]
DataFilters: [isnotnull(i_current_price#4), (i_current_price#4 >= 62.00), (i_current_price#4 <= 92.00), i_manufact_id#5 IN (129,270,821,423), isnotnull(i_item_sk#1)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,62.00), LessThanOrEqual(i_current_price,92.00), In(i_manufact_id, [129,270,423,821]), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string,i_current_price:decimal(7,2),i_manufact_id:int>

(2) Filter [codegen id : 1]
Input [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, i_manufact_id#5]
Condition : ((((isnotnull(i_current_price#4) AND (i_current_price#4 >= 62.00)) AND (i_current_price#4 <= 92.00)) AND i_manufact_id#5 IN (129,270,821,423)) AND isnotnull(i_item_sk#1))

(3) Project [codegen id : 1]
Output [4]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4]
Input [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, i_manufact_id#5]

(4) BroadcastExchange
Input [4]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(5) BatchScan default.inventory
Output [3]: [inv_item_sk#6, inv_quantity_on_hand#7, inv_date_sk#8]
DataFilters: [isnotnull(inv_quantity_on_hand#7), (inv_quantity_on_hand#7 >= 100), (inv_quantity_on_hand#7 <= 500), isnotnull(inv_item_sk#6)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/inventory]
PartitionFilters: [isnotnull(inv_date_sk#8)]
PushedFilters: [IsNotNull(inv_quantity_on_hand), GreaterThanOrEqual(inv_quantity_on_hand,100), LessThanOrEqual(inv_quantity_on_hand,500), IsNotNull(inv_item_sk)]
ReadSchema: struct<inv_item_sk:int,inv_quantity_on_hand:int>

(6) Filter
Input [3]: [inv_item_sk#6, inv_quantity_on_hand#7, inv_date_sk#8]
Condition : (((isnotnull(inv_quantity_on_hand#7) AND (inv_quantity_on_hand#7 >= 100)) AND (inv_quantity_on_hand#7 <= 500)) AND isnotnull(inv_item_sk#6))

(7) Project
Output [2]: [inv_item_sk#6, inv_date_sk#8]
Input [3]: [inv_item_sk#6, inv_quantity_on_hand#7, inv_date_sk#8]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [i_item_sk#1]
Right keys [1]: [inv_item_sk#6]
Join type: Inner
Join condition: None

(9) Project [codegen id : 3]
Output [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, inv_date_sk#8]
Input [6]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, inv_item_sk#6, inv_date_sk#8]

(10) BatchScan default.date_dim
Output [2]: [d_date_sk#9, d_date#10]
DataFilters: [isnotnull(d_date#10), (d_date#10 >= 2000-05-25), (d_date#10 <= 2000-07-24), isnotnull(d_date_sk#9)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-05-25), LessThanOrEqual(d_date,2000-07-24), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(11) Filter [codegen id : 2]
Input [2]: [d_date_sk#9, d_date#10]
Condition : (((isnotnull(d_date#10) AND (d_date#10 >= 2000-05-25)) AND (d_date#10 <= 2000-07-24)) AND isnotnull(d_date_sk#9))

(12) Project [codegen id : 2]
Output [1]: [d_date_sk#9]
Input [2]: [d_date_sk#9, d_date#10]

(13) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(14) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [inv_date_sk#8]
Right keys [1]: [d_date_sk#9]
Join type: Inner
Join condition: None

(15) Project [codegen id : 3]
Output [4]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4]
Input [6]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, inv_date_sk#8, d_date_sk#9]

(16) Exchange
Input [4]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4]
Arguments: hashpartitioning(i_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(17) Sort [codegen id : 4]
Input [4]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4]
Arguments: [i_item_sk#1 ASC NULLS FIRST], false, 0

(18) BatchScan default.store_sales
Output [1]: [ss_item_sk#11]
DataFilters: [isnotnull(ss_item_sk#11)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(19) Filter [codegen id : 5]
Input [1]: [ss_item_sk#11]
Condition : isnotnull(ss_item_sk#11)

(20) Project [codegen id : 5]
Output [1]: [ss_item_sk#11]
Input [1]: [ss_item_sk#11]

(21) Exchange
Input [1]: [ss_item_sk#11]
Arguments: hashpartitioning(ss_item_sk#11, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(22) Sort [codegen id : 6]
Input [1]: [ss_item_sk#11]
Arguments: [ss_item_sk#11 ASC NULLS FIRST], false, 0

(23) SortMergeJoin [codegen id : 7]
Left keys [1]: [i_item_sk#1]
Right keys [1]: [ss_item_sk#11]
Join type: Inner
Join condition: None

(24) Project [codegen id : 7]
Output [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Input [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, ss_item_sk#11]

(25) HashAggregate [codegen id : 7]
Input [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Keys [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Functions: []
Aggregate Attributes: []
Results [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]

(26) Exchange
Input [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Arguments: hashpartitioning(i_item_id#2, i_item_desc#3, i_current_price#4, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(27) HashAggregate [codegen id : 8]
Input [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Keys [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Functions: []
Aggregate Attributes: []
Results [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]

(28) TakeOrderedAndProject
Input [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Arguments: 100, [i_item_id#2 ASC NULLS FIRST], [i_item_id#2, i_item_desc#3, i_current_price#4]

