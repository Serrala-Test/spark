== Physical Plan ==
TakeOrderedAndProject (60)
+- * Project (59)
   +- * BroadcastHashJoin Inner BuildRight (58)
      :- * Project (37)
      :  +- * SortMergeJoin Inner (36)
      :     :- * Sort (14)
      :     :  +- Exchange (13)
      :     :     +- * Project (12)
      :     :        +- * SortMergeJoin Inner (11)
      :     :           :- * Sort (5)
      :     :           :  +- Exchange (4)
      :     :           :     +- * Filter (3)
      :     :           :        +- * ColumnarToRow (2)
      :     :           :           +- Scan parquet spark_catalog.default.customer (1)
      :     :           +- * Sort (10)
      :     :              +- Exchange (9)
      :     :                 +- * Filter (8)
      :     :                    +- * ColumnarToRow (7)
      :     :                       +- Scan parquet spark_catalog.default.customer_address (6)
      :     +- * Sort (35)
      :        +- Exchange (34)
      :           +- * Filter (33)
      :              +- * HashAggregate (32)
      :                 +- Exchange (31)
      :                    +- * HashAggregate (30)
      :                       +- * Project (29)
      :                          +- * SortMergeJoin Inner (28)
      :                             :- * Sort (22)
      :                             :  +- Exchange (21)
      :                             :     +- * Project (20)
      :                             :        +- * BroadcastHashJoin Inner BuildRight (19)
      :                             :           :- * Filter (17)
      :                             :           :  +- * ColumnarToRow (16)
      :                             :           :     +- Scan parquet spark_catalog.default.catalog_returns (15)
      :                             :           +- ReusedExchange (18)
      :                             +- * Sort (27)
      :                                +- Exchange (26)
      :                                   +- * Filter (25)
      :                                      +- * ColumnarToRow (24)
      :                                         +- Scan parquet spark_catalog.default.customer_address (23)
      +- BroadcastExchange (57)
         +- * Filter (56)
            +- * HashAggregate (55)
               +- Exchange (54)
                  +- * HashAggregate (53)
                     +- * HashAggregate (52)
                        +- Exchange (51)
                           +- * HashAggregate (50)
                              +- * Project (49)
                                 +- * SortMergeJoin Inner (48)
                                    :- * Sort (45)
                                    :  +- Exchange (44)
                                    :     +- * Project (43)
                                    :        +- * BroadcastHashJoin Inner BuildRight (42)
                                    :           :- * Filter (40)
                                    :           :  +- * ColumnarToRow (39)
                                    :           :     +- Scan parquet spark_catalog.default.catalog_returns (38)
                                    :           +- ReusedExchange (41)
                                    +- * Sort (47)
                                       +- ReusedExchange (46)


(1) Scan parquet spark_catalog.default.customer
Output [6]: [c_customer_sk#1, c_customer_id#2, c_current_addr_sk#3, c_salutation#4, c_first_name#5, c_last_name#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_addr_sk:int,c_salutation:string,c_first_name:string,c_last_name:string>

(2) ColumnarToRow [codegen id : 1]
Input [6]: [c_customer_sk#1, c_customer_id#2, c_current_addr_sk#3, c_salutation#4, c_first_name#5, c_last_name#6]

(3) Filter [codegen id : 1]
Input [6]: [c_customer_sk#1, c_customer_id#2, c_current_addr_sk#3, c_salutation#4, c_first_name#5, c_last_name#6]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_current_addr_sk#3))

(4) Exchange
Input [6]: [c_customer_sk#1, c_customer_id#2, c_current_addr_sk#3, c_salutation#4, c_first_name#5, c_last_name#6]
Arguments: hashpartitioning(c_current_addr_sk#3, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [6]: [c_customer_sk#1, c_customer_id#2, c_current_addr_sk#3, c_salutation#4, c_first_name#5, c_last_name#6]
Arguments: [c_current_addr_sk#3 ASC NULLS FIRST], false, 0

(6) Scan parquet spark_catalog.default.customer_address
Output [12]: [ca_address_sk#7, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_suite_number:string,ca_city:string,ca_county:string,ca_state:string,ca_zip:string,ca_country:string,ca_gmt_offset:decimal(5,2),ca_location_type:string>

(7) ColumnarToRow [codegen id : 3]
Input [12]: [ca_address_sk#7, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18]

(8) Filter [codegen id : 3]
Input [12]: [ca_address_sk#7, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18]
Condition : ((isnotnull(ca_state#14) AND (ca_state#14 = GA)) AND isnotnull(ca_address_sk#7))

(9) Exchange
Input [12]: [ca_address_sk#7, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18]
Arguments: hashpartitioning(ca_address_sk#7, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(10) Sort [codegen id : 4]
Input [12]: [ca_address_sk#7, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18]
Arguments: [ca_address_sk#7 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 5]
Left keys [1]: [c_current_addr_sk#3]
Right keys [1]: [ca_address_sk#7]
Join type: Inner
Join condition: None

(12) Project [codegen id : 5]
Output [16]: [c_customer_sk#1, c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18]
Input [18]: [c_customer_sk#1, c_customer_id#2, c_current_addr_sk#3, c_salutation#4, c_first_name#5, c_last_name#6, ca_address_sk#7, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18]

(13) Exchange
Input [16]: [c_customer_sk#1, c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18]
Arguments: hashpartitioning(c_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(14) Sort [codegen id : 6]
Input [16]: [c_customer_sk#1, c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(15) Scan parquet spark_catalog.default.catalog_returns
Output [4]: [cr_returning_customer_sk#19, cr_returning_addr_sk#20, cr_return_amt_inc_tax#21, cr_returned_date_sk#22]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#22), dynamicpruningexpression(cr_returned_date_sk#22 IN dynamicpruning#23)]
PushedFilters: [IsNotNull(cr_returning_addr_sk), IsNotNull(cr_returning_customer_sk)]
ReadSchema: struct<cr_returning_customer_sk:int,cr_returning_addr_sk:int,cr_return_amt_inc_tax:decimal(7,2)>

(16) ColumnarToRow [codegen id : 8]
Input [4]: [cr_returning_customer_sk#19, cr_returning_addr_sk#20, cr_return_amt_inc_tax#21, cr_returned_date_sk#22]

(17) Filter [codegen id : 8]
Input [4]: [cr_returning_customer_sk#19, cr_returning_addr_sk#20, cr_return_amt_inc_tax#21, cr_returned_date_sk#22]
Condition : (isnotnull(cr_returning_addr_sk#20) AND isnotnull(cr_returning_customer_sk#19))

(18) ReusedExchange [Reuses operator id: 65]
Output [1]: [d_date_sk#24]

(19) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cr_returned_date_sk#22]
Right keys [1]: [d_date_sk#24]
Join type: Inner
Join condition: None

(20) Project [codegen id : 8]
Output [3]: [cr_returning_customer_sk#19, cr_returning_addr_sk#20, cr_return_amt_inc_tax#21]
Input [5]: [cr_returning_customer_sk#19, cr_returning_addr_sk#20, cr_return_amt_inc_tax#21, cr_returned_date_sk#22, d_date_sk#24]

(21) Exchange
Input [3]: [cr_returning_customer_sk#19, cr_returning_addr_sk#20, cr_return_amt_inc_tax#21]
Arguments: hashpartitioning(cr_returning_addr_sk#20, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(22) Sort [codegen id : 9]
Input [3]: [cr_returning_customer_sk#19, cr_returning_addr_sk#20, cr_return_amt_inc_tax#21]
Arguments: [cr_returning_addr_sk#20 ASC NULLS FIRST], false, 0

(23) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#25, ca_state#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_state)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(24) ColumnarToRow [codegen id : 10]
Input [2]: [ca_address_sk#25, ca_state#26]

(25) Filter [codegen id : 10]
Input [2]: [ca_address_sk#25, ca_state#26]
Condition : (isnotnull(ca_address_sk#25) AND isnotnull(ca_state#26))

(26) Exchange
Input [2]: [ca_address_sk#25, ca_state#26]
Arguments: hashpartitioning(ca_address_sk#25, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(27) Sort [codegen id : 11]
Input [2]: [ca_address_sk#25, ca_state#26]
Arguments: [ca_address_sk#25 ASC NULLS FIRST], false, 0

(28) SortMergeJoin [codegen id : 12]
Left keys [1]: [cr_returning_addr_sk#20]
Right keys [1]: [ca_address_sk#25]
Join type: Inner
Join condition: None

(29) Project [codegen id : 12]
Output [3]: [cr_returning_customer_sk#19, cr_return_amt_inc_tax#21, ca_state#26]
Input [5]: [cr_returning_customer_sk#19, cr_returning_addr_sk#20, cr_return_amt_inc_tax#21, ca_address_sk#25, ca_state#26]

(30) HashAggregate [codegen id : 12]
Input [3]: [cr_returning_customer_sk#19, cr_return_amt_inc_tax#21, ca_state#26]
Keys [2]: [cr_returning_customer_sk#19, ca_state#26]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#21))]
Aggregate Attributes [1]: [sum#27]
Results [3]: [cr_returning_customer_sk#19, ca_state#26, sum#28]

(31) Exchange
Input [3]: [cr_returning_customer_sk#19, ca_state#26, sum#28]
Arguments: hashpartitioning(cr_returning_customer_sk#19, ca_state#26, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(32) HashAggregate [codegen id : 13]
Input [3]: [cr_returning_customer_sk#19, ca_state#26, sum#28]
Keys [2]: [cr_returning_customer_sk#19, ca_state#26]
Functions [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#21))]
Aggregate Attributes [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#21))#29]
Results [3]: [cr_returning_customer_sk#19 AS ctr_customer_sk#30, ca_state#26 AS ctr_state#31, MakeDecimal(sum(UnscaledValue(cr_return_amt_inc_tax#21))#29,17,2) AS ctr_total_return#32]

(33) Filter [codegen id : 13]
Input [3]: [ctr_customer_sk#30, ctr_state#31, ctr_total_return#32]
Condition : isnotnull(ctr_total_return#32)

(34) Exchange
Input [3]: [ctr_customer_sk#30, ctr_state#31, ctr_total_return#32]
Arguments: hashpartitioning(ctr_customer_sk#30, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(35) Sort [codegen id : 14]
Input [3]: [ctr_customer_sk#30, ctr_state#31, ctr_total_return#32]
Arguments: [ctr_customer_sk#30 ASC NULLS FIRST], false, 0

(36) SortMergeJoin [codegen id : 23]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ctr_customer_sk#30]
Join type: Inner
Join condition: None

(37) Project [codegen id : 23]
Output [17]: [c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18, ctr_state#31, ctr_total_return#32]
Input [19]: [c_customer_sk#1, c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18, ctr_customer_sk#30, ctr_state#31, ctr_total_return#32]

(38) Scan parquet spark_catalog.default.catalog_returns
Output [4]: [cr_returning_customer_sk#19, cr_returning_addr_sk#20, cr_return_amt_inc_tax#21, cr_returned_date_sk#22]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#22), dynamicpruningexpression(cr_returned_date_sk#22 IN dynamicpruning#23)]
PushedFilters: [IsNotNull(cr_returning_addr_sk)]
ReadSchema: struct<cr_returning_customer_sk:int,cr_returning_addr_sk:int,cr_return_amt_inc_tax:decimal(7,2)>

(39) ColumnarToRow [codegen id : 16]
Input [4]: [cr_returning_customer_sk#19, cr_returning_addr_sk#20, cr_return_amt_inc_tax#21, cr_returned_date_sk#22]

(40) Filter [codegen id : 16]
Input [4]: [cr_returning_customer_sk#19, cr_returning_addr_sk#20, cr_return_amt_inc_tax#21, cr_returned_date_sk#22]
Condition : isnotnull(cr_returning_addr_sk#20)

(41) ReusedExchange [Reuses operator id: 65]
Output [1]: [d_date_sk#24]

(42) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [cr_returned_date_sk#22]
Right keys [1]: [d_date_sk#24]
Join type: Inner
Join condition: None

(43) Project [codegen id : 16]
Output [3]: [cr_returning_customer_sk#19, cr_returning_addr_sk#20, cr_return_amt_inc_tax#21]
Input [5]: [cr_returning_customer_sk#19, cr_returning_addr_sk#20, cr_return_amt_inc_tax#21, cr_returned_date_sk#22, d_date_sk#24]

(44) Exchange
Input [3]: [cr_returning_customer_sk#19, cr_returning_addr_sk#20, cr_return_amt_inc_tax#21]
Arguments: hashpartitioning(cr_returning_addr_sk#20, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(45) Sort [codegen id : 17]
Input [3]: [cr_returning_customer_sk#19, cr_returning_addr_sk#20, cr_return_amt_inc_tax#21]
Arguments: [cr_returning_addr_sk#20 ASC NULLS FIRST], false, 0

(46) ReusedExchange [Reuses operator id: 26]
Output [2]: [ca_address_sk#25, ca_state#26]

(47) Sort [codegen id : 19]
Input [2]: [ca_address_sk#25, ca_state#26]
Arguments: [ca_address_sk#25 ASC NULLS FIRST], false, 0

(48) SortMergeJoin [codegen id : 20]
Left keys [1]: [cr_returning_addr_sk#20]
Right keys [1]: [ca_address_sk#25]
Join type: Inner
Join condition: None

(49) Project [codegen id : 20]
Output [3]: [cr_returning_customer_sk#19, cr_return_amt_inc_tax#21, ca_state#26]
Input [5]: [cr_returning_customer_sk#19, cr_returning_addr_sk#20, cr_return_amt_inc_tax#21, ca_address_sk#25, ca_state#26]

(50) HashAggregate [codegen id : 20]
Input [3]: [cr_returning_customer_sk#19, cr_return_amt_inc_tax#21, ca_state#26]
Keys [2]: [cr_returning_customer_sk#19, ca_state#26]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#21))]
Aggregate Attributes [1]: [sum#33]
Results [3]: [cr_returning_customer_sk#19, ca_state#26, sum#34]

(51) Exchange
Input [3]: [cr_returning_customer_sk#19, ca_state#26, sum#34]
Arguments: hashpartitioning(cr_returning_customer_sk#19, ca_state#26, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(52) HashAggregate [codegen id : 21]
Input [3]: [cr_returning_customer_sk#19, ca_state#26, sum#34]
Keys [2]: [cr_returning_customer_sk#19, ca_state#26]
Functions [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#21))]
Aggregate Attributes [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#21))#29]
Results [2]: [ca_state#26 AS ctr_state#31, MakeDecimal(sum(UnscaledValue(cr_return_amt_inc_tax#21))#29,17,2) AS ctr_total_return#32]

(53) HashAggregate [codegen id : 21]
Input [2]: [ctr_state#31, ctr_total_return#32]
Keys [1]: [ctr_state#31]
Functions [1]: [partial_avg(ctr_total_return#32)]
Aggregate Attributes [2]: [sum#35, count#36]
Results [3]: [ctr_state#31, sum#37, count#38]

(54) Exchange
Input [3]: [ctr_state#31, sum#37, count#38]
Arguments: hashpartitioning(ctr_state#31, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(55) HashAggregate [codegen id : 22]
Input [3]: [ctr_state#31, sum#37, count#38]
Keys [1]: [ctr_state#31]
Functions [1]: [avg(ctr_total_return#32)]
Aggregate Attributes [1]: [avg(ctr_total_return#32)#39]
Results [2]: [(avg(ctr_total_return#32)#39 * 1.2) AS (avg(ctr_total_return) * 1.2)#40, ctr_state#31 AS ctr_state#31#41]

(56) Filter [codegen id : 22]
Input [2]: [(avg(ctr_total_return) * 1.2)#40, ctr_state#31#41]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#40)

(57) BroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#40, ctr_state#31#41]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true]),false), [plan_id=11]

(58) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [ctr_state#31]
Right keys [1]: [ctr_state#31#41]
Join type: Inner
Join condition: (cast(ctr_total_return#32 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#40)

(59) Project [codegen id : 23]
Output [16]: [c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18, ctr_total_return#32]
Input [19]: [c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18, ctr_state#31, ctr_total_return#32, (avg(ctr_total_return) * 1.2)#40, ctr_state#31#41]

(60) TakeOrderedAndProject
Input [16]: [c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18, ctr_total_return#32]
Arguments: 100, [c_customer_id#2 ASC NULLS FIRST, c_salutation#4 ASC NULLS FIRST, c_first_name#5 ASC NULLS FIRST, c_last_name#6 ASC NULLS FIRST, ca_street_number#8 ASC NULLS FIRST, ca_street_name#9 ASC NULLS FIRST, ca_street_type#10 ASC NULLS FIRST, ca_suite_number#11 ASC NULLS FIRST, ca_city#12 ASC NULLS FIRST, ca_county#13 ASC NULLS FIRST, ca_state#14 ASC NULLS FIRST, ca_zip#15 ASC NULLS FIRST, ca_country#16 ASC NULLS FIRST, ca_gmt_offset#17 ASC NULLS FIRST, ca_location_type#18 ASC NULLS FIRST, ctr_total_return#32 ASC NULLS FIRST], [c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18, ctr_total_return#32]

===== Subqueries =====

Subquery:1 Hosting operator id = 15 Hosting Expression = cr_returned_date_sk#22 IN dynamicpruning#23
BroadcastExchange (65)
+- * Project (64)
   +- * Filter (63)
      +- * ColumnarToRow (62)
         +- Scan parquet spark_catalog.default.date_dim (61)


(61) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#24, d_year#42]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(62) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#24, d_year#42]

(63) Filter [codegen id : 1]
Input [2]: [d_date_sk#24, d_year#42]
Condition : ((isnotnull(d_year#42) AND (d_year#42 = 2000)) AND isnotnull(d_date_sk#24))

(64) Project [codegen id : 1]
Output [1]: [d_date_sk#24]
Input [2]: [d_date_sk#24, d_year#42]

(65) BroadcastExchange
Input [1]: [d_date_sk#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=12]

Subquery:2 Hosting operator id = 38 Hosting Expression = cr_returned_date_sk#22 IN dynamicpruning#23


