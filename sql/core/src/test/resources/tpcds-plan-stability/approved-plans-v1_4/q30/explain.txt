== Physical Plan ==
TakeOrderedAndProject (50)
+- * Project (49)
   +- * BroadcastHashJoin Inner BuildRight (48)
      :- * Project (42)
      :  +- * BroadcastHashJoin Inner BuildRight (41)
      :     :- * Project (36)
      :     :  +- * BroadcastHashJoin Inner BuildRight (35)
      :     :     :- * Project (17)
      :     :     :  +- * Filter (16)
      :     :     :     +- * HashAggregate (15)
      :     :     :        +- Exchange (14)
      :     :     :           +- * HashAggregate (13)
      :     :     :              +- * Project (12)
      :     :     :                 +- * BroadcastHashJoin Inner BuildRight (11)
      :     :     :                    :- * Project (6)
      :     :     :                    :  +- * BroadcastHashJoin Inner BuildRight (5)
      :     :     :                    :     :- * Filter (3)
      :     :     :                    :     :  +- * ColumnarToRow (2)
      :     :     :                    :     :     +- Scan parquet default.web_returns (1)
      :     :     :                    :     +- ReusedExchange (4)
      :     :     :                    +- BroadcastExchange (10)
      :     :     :                       +- * Filter (9)
      :     :     :                          +- * ColumnarToRow (8)
      :     :     :                             +- Scan parquet default.customer_address (7)
      :     :     +- BroadcastExchange (34)
      :     :        +- * Filter (33)
      :     :           +- * HashAggregate (32)
      :     :              +- Exchange (31)
      :     :                 +- * HashAggregate (30)
      :     :                    +- * HashAggregate (29)
      :     :                       +- Exchange (28)
      :     :                          +- * HashAggregate (27)
      :     :                             +- * Project (26)
      :     :                                +- * BroadcastHashJoin Inner BuildRight (25)
      :     :                                   :- * Project (23)
      :     :                                   :  +- * BroadcastHashJoin Inner BuildRight (22)
      :     :                                   :     :- * Filter (20)
      :     :                                   :     :  +- * ColumnarToRow (19)
      :     :                                   :     :     +- Scan parquet default.web_returns (18)
      :     :                                   :     +- ReusedExchange (21)
      :     :                                   +- ReusedExchange (24)
      :     +- BroadcastExchange (40)
      :        +- * Filter (39)
      :           +- * ColumnarToRow (38)
      :              +- Scan parquet default.customer (37)
      +- BroadcastExchange (47)
         +- * Project (46)
            +- * Filter (45)
               +- * ColumnarToRow (44)
                  +- Scan parquet default.customer_address (43)


(1) Scan parquet default.web_returns
Output [4]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#4), dynamicpruningexpression(wr_returned_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(wr_returning_addr_sk), IsNotNull(wr_returning_customer_sk)]
ReadSchema: struct<wr_returning_customer_sk:int,wr_returning_addr_sk:int,wr_return_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [4]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4]

(3) Filter [codegen id : 3]
Input [4]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4]
Condition : (isnotnull(wr_returning_addr_sk#2) AND isnotnull(wr_returning_customer_sk#1))

(4) ReusedExchange [Reuses operator id: 55]
Output [1]: [d_date_sk#6]

(5) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [wr_returned_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(6) Project [codegen id : 3]
Output [3]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3]
Input [5]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4, d_date_sk#6]

(7) Scan parquet default.customer_address
Output [2]: [ca_address_sk#7, ca_state#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_state)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(8) ColumnarToRow [codegen id : 2]
Input [2]: [ca_address_sk#7, ca_state#8]

(9) Filter [codegen id : 2]
Input [2]: [ca_address_sk#7, ca_state#8]
Condition : (isnotnull(ca_address_sk#7) AND isnotnull(ca_state#8))

(10) BroadcastExchange
Input [2]: [ca_address_sk#7, ca_state#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [wr_returning_addr_sk#2]
Right keys [1]: [ca_address_sk#7]
Join condition: None

(12) Project [codegen id : 3]
Output [3]: [wr_returning_customer_sk#1, wr_return_amt#3, ca_state#8]
Input [5]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, ca_address_sk#7, ca_state#8]

(13) HashAggregate [codegen id : 3]
Input [3]: [wr_returning_customer_sk#1, wr_return_amt#3, ca_state#8]
Keys [2]: [wr_returning_customer_sk#1, ca_state#8]
Functions [1]: [partial_sum(UnscaledValue(wr_return_amt#3))]
Aggregate Attributes [1]: [sum#10]
Results [3]: [wr_returning_customer_sk#1, ca_state#8, sum#11]

(14) Exchange
Input [3]: [wr_returning_customer_sk#1, ca_state#8, sum#11]
Arguments: hashpartitioning(wr_returning_customer_sk#1, ca_state#8, 5), ENSURE_REQUIREMENTS, [id=#12]

(15) HashAggregate [codegen id : 11]
Input [3]: [wr_returning_customer_sk#1, ca_state#8, sum#11]
Keys [2]: [wr_returning_customer_sk#1, ca_state#8]
Functions [1]: [sum(UnscaledValue(wr_return_amt#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(wr_return_amt#3))#13]
Results [3]: [wr_returning_customer_sk#1 AS ctr_customer_sk#14, ca_state#8 AS ctr_state#15, MakeDecimal(sum(UnscaledValue(wr_return_amt#3))#13,17,2) AS ctr_total_return#16]

(16) Filter [codegen id : 11]
Input [3]: [ctr_customer_sk#14, ctr_state#15, ctr_total_return#16]
Condition : isnotnull(ctr_total_return#16)

(17) Project [codegen id : 11]
Output [4]: [ctr_customer_sk#14, ctr_state#15, ctr_total_return#16, cast(ctr_total_return#16 as decimal(24,7)) AS CAST(ctr1.ctr_total_return AS DECIMAL(24,7))#17]
Input [3]: [ctr_customer_sk#14, ctr_state#15, ctr_total_return#16]

(18) Scan parquet default.web_returns
Output [4]: [wr_returning_customer_sk#18, wr_returning_addr_sk#19, wr_return_amt#20, wr_returned_date_sk#21]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#21), dynamicpruningexpression(wr_returned_date_sk#21 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(wr_returning_addr_sk)]
ReadSchema: struct<wr_returning_customer_sk:int,wr_returning_addr_sk:int,wr_return_amt:decimal(7,2)>

(19) ColumnarToRow [codegen id : 6]
Input [4]: [wr_returning_customer_sk#18, wr_returning_addr_sk#19, wr_return_amt#20, wr_returned_date_sk#21]

(20) Filter [codegen id : 6]
Input [4]: [wr_returning_customer_sk#18, wr_returning_addr_sk#19, wr_return_amt#20, wr_returned_date_sk#21]
Condition : isnotnull(wr_returning_addr_sk#19)

(21) ReusedExchange [Reuses operator id: 55]
Output [1]: [d_date_sk#22]

(22) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [wr_returned_date_sk#21]
Right keys [1]: [d_date_sk#22]
Join condition: None

(23) Project [codegen id : 6]
Output [3]: [wr_returning_customer_sk#18, wr_returning_addr_sk#19, wr_return_amt#20]
Input [5]: [wr_returning_customer_sk#18, wr_returning_addr_sk#19, wr_return_amt#20, wr_returned_date_sk#21, d_date_sk#22]

(24) ReusedExchange [Reuses operator id: 10]
Output [2]: [ca_address_sk#23, ca_state#24]

(25) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [wr_returning_addr_sk#19]
Right keys [1]: [ca_address_sk#23]
Join condition: None

(26) Project [codegen id : 6]
Output [3]: [wr_returning_customer_sk#18, wr_return_amt#20, ca_state#24]
Input [5]: [wr_returning_customer_sk#18, wr_returning_addr_sk#19, wr_return_amt#20, ca_address_sk#23, ca_state#24]

(27) HashAggregate [codegen id : 6]
Input [3]: [wr_returning_customer_sk#18, wr_return_amt#20, ca_state#24]
Keys [2]: [wr_returning_customer_sk#18, ca_state#24]
Functions [1]: [partial_sum(UnscaledValue(wr_return_amt#20))]
Aggregate Attributes [1]: [sum#25]
Results [3]: [wr_returning_customer_sk#18, ca_state#24, sum#26]

(28) Exchange
Input [3]: [wr_returning_customer_sk#18, ca_state#24, sum#26]
Arguments: hashpartitioning(wr_returning_customer_sk#18, ca_state#24, 5), ENSURE_REQUIREMENTS, [id=#27]

(29) HashAggregate [codegen id : 7]
Input [3]: [wr_returning_customer_sk#18, ca_state#24, sum#26]
Keys [2]: [wr_returning_customer_sk#18, ca_state#24]
Functions [1]: [sum(UnscaledValue(wr_return_amt#20))]
Aggregate Attributes [1]: [sum(UnscaledValue(wr_return_amt#20))#28]
Results [2]: [ca_state#24 AS ctr_state#15, MakeDecimal(sum(UnscaledValue(wr_return_amt#20))#28,17,2) AS ctr_total_return#16]

(30) HashAggregate [codegen id : 7]
Input [2]: [ctr_state#15, ctr_total_return#16]
Keys [1]: [ctr_state#15]
Functions [1]: [partial_avg(ctr_total_return#16)]
Aggregate Attributes [2]: [sum#29, count#30]
Results [3]: [ctr_state#15, sum#31, count#32]

(31) Exchange
Input [3]: [ctr_state#15, sum#31, count#32]
Arguments: hashpartitioning(ctr_state#15, 5), ENSURE_REQUIREMENTS, [id=#33]

(32) HashAggregate [codegen id : 8]
Input [3]: [ctr_state#15, sum#31, count#32]
Keys [1]: [ctr_state#15]
Functions [1]: [avg(ctr_total_return#16)]
Aggregate Attributes [1]: [avg(ctr_total_return#16)#34]
Results [2]: [CheckOverflow((promote_precision(avg(ctr_total_return#16)#34) * 1.200000), DecimalType(24,7), true) AS (avg(ctr_total_return) * 1.2)#35, ctr_state#15 AS ctr_state#15#36]

(33) Filter [codegen id : 8]
Input [2]: [(avg(ctr_total_return) * 1.2)#35, ctr_state#15#36]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#35)

(34) BroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#35, ctr_state#15#36]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true]),false), [id=#37]

(35) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ctr_state#15]
Right keys [1]: [ctr_state#15#36]
Join condition: (CAST(ctr1.ctr_total_return AS DECIMAL(24,7))#17 > (avg(ctr_total_return) * 1.2)#35)

(36) Project [codegen id : 11]
Output [2]: [ctr_customer_sk#14, ctr_total_return#16]
Input [6]: [ctr_customer_sk#14, ctr_state#15, ctr_total_return#16, CAST(ctr1.ctr_total_return AS DECIMAL(24,7))#17, (avg(ctr_total_return) * 1.2)#35, ctr_state#15#36]

(37) Scan parquet default.customer
Output [14]: [c_customer_sk#38, c_customer_id#39, c_current_addr_sk#40, c_salutation#41, c_first_name#42, c_last_name#43, c_preferred_cust_flag#44, c_birth_day#45, c_birth_month#46, c_birth_year#47, c_birth_country#48, c_login#49, c_email_address#50, c_last_review_date#51]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_addr_sk:int,c_salutation:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:int,c_birth_month:int,c_birth_year:int,c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:int>

(38) ColumnarToRow [codegen id : 9]
Input [14]: [c_customer_sk#38, c_customer_id#39, c_current_addr_sk#40, c_salutation#41, c_first_name#42, c_last_name#43, c_preferred_cust_flag#44, c_birth_day#45, c_birth_month#46, c_birth_year#47, c_birth_country#48, c_login#49, c_email_address#50, c_last_review_date#51]

(39) Filter [codegen id : 9]
Input [14]: [c_customer_sk#38, c_customer_id#39, c_current_addr_sk#40, c_salutation#41, c_first_name#42, c_last_name#43, c_preferred_cust_flag#44, c_birth_day#45, c_birth_month#46, c_birth_year#47, c_birth_country#48, c_login#49, c_email_address#50, c_last_review_date#51]
Condition : (isnotnull(c_customer_sk#38) AND isnotnull(c_current_addr_sk#40))

(40) BroadcastExchange
Input [14]: [c_customer_sk#38, c_customer_id#39, c_current_addr_sk#40, c_salutation#41, c_first_name#42, c_last_name#43, c_preferred_cust_flag#44, c_birth_day#45, c_birth_month#46, c_birth_year#47, c_birth_country#48, c_login#49, c_email_address#50, c_last_review_date#51]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#52]

(41) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ctr_customer_sk#14]
Right keys [1]: [c_customer_sk#38]
Join condition: None

(42) Project [codegen id : 11]
Output [14]: [ctr_total_return#16, c_customer_id#39, c_current_addr_sk#40, c_salutation#41, c_first_name#42, c_last_name#43, c_preferred_cust_flag#44, c_birth_day#45, c_birth_month#46, c_birth_year#47, c_birth_country#48, c_login#49, c_email_address#50, c_last_review_date#51]
Input [16]: [ctr_customer_sk#14, ctr_total_return#16, c_customer_sk#38, c_customer_id#39, c_current_addr_sk#40, c_salutation#41, c_first_name#42, c_last_name#43, c_preferred_cust_flag#44, c_birth_day#45, c_birth_month#46, c_birth_year#47, c_birth_country#48, c_login#49, c_email_address#50, c_last_review_date#51]

(43) Scan parquet default.customer_address
Output [2]: [ca_address_sk#53, ca_state#54]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(44) ColumnarToRow [codegen id : 10]
Input [2]: [ca_address_sk#53, ca_state#54]

(45) Filter [codegen id : 10]
Input [2]: [ca_address_sk#53, ca_state#54]
Condition : ((isnotnull(ca_state#54) AND (ca_state#54 = GA)) AND isnotnull(ca_address_sk#53))

(46) Project [codegen id : 10]
Output [1]: [ca_address_sk#53]
Input [2]: [ca_address_sk#53, ca_state#54]

(47) BroadcastExchange
Input [1]: [ca_address_sk#53]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#55]

(48) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [c_current_addr_sk#40]
Right keys [1]: [ca_address_sk#53]
Join condition: None

(49) Project [codegen id : 11]
Output [13]: [c_customer_id#39, c_salutation#41, c_first_name#42, c_last_name#43, c_preferred_cust_flag#44, c_birth_day#45, c_birth_month#46, c_birth_year#47, c_birth_country#48, c_login#49, c_email_address#50, c_last_review_date#51, ctr_total_return#16]
Input [15]: [ctr_total_return#16, c_customer_id#39, c_current_addr_sk#40, c_salutation#41, c_first_name#42, c_last_name#43, c_preferred_cust_flag#44, c_birth_day#45, c_birth_month#46, c_birth_year#47, c_birth_country#48, c_login#49, c_email_address#50, c_last_review_date#51, ca_address_sk#53]

(50) TakeOrderedAndProject
Input [13]: [c_customer_id#39, c_salutation#41, c_first_name#42, c_last_name#43, c_preferred_cust_flag#44, c_birth_day#45, c_birth_month#46, c_birth_year#47, c_birth_country#48, c_login#49, c_email_address#50, c_last_review_date#51, ctr_total_return#16]
Arguments: 100, [c_customer_id#39 ASC NULLS FIRST, c_salutation#41 ASC NULLS FIRST, c_first_name#42 ASC NULLS FIRST, c_last_name#43 ASC NULLS FIRST, c_preferred_cust_flag#44 ASC NULLS FIRST, c_birth_day#45 ASC NULLS FIRST, c_birth_month#46 ASC NULLS FIRST, c_birth_year#47 ASC NULLS FIRST, c_birth_country#48 ASC NULLS FIRST, c_login#49 ASC NULLS FIRST, c_email_address#50 ASC NULLS FIRST, c_last_review_date#51 ASC NULLS FIRST, ctr_total_return#16 ASC NULLS FIRST], [c_customer_id#39, c_salutation#41, c_first_name#42, c_last_name#43, c_preferred_cust_flag#44, c_birth_day#45, c_birth_month#46, c_birth_year#47, c_birth_country#48, c_login#49, c_email_address#50, c_last_review_date#51, ctr_total_return#16]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = wr_returned_date_sk#4 IN dynamicpruning#5
BroadcastExchange (55)
+- * Project (54)
   +- * Filter (53)
      +- * ColumnarToRow (52)
         +- Scan parquet default.date_dim (51)


(51) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_year#56]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(52) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#56]

(53) Filter [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#56]
Condition : ((isnotnull(d_year#56) AND (d_year#56 = 2002)) AND isnotnull(d_date_sk#6))

(54) Project [codegen id : 1]
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_year#56]

(55) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#57]

Subquery:2 Hosting operator id = 18 Hosting Expression = wr_returned_date_sk#21 IN dynamicpruning#5


