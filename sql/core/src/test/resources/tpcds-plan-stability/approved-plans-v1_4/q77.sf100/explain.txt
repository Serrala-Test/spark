== Physical Plan ==
TakeOrderedAndProject (111)
+- * HashAggregate (110)
   +- Exchange (109)
      +- * HashAggregate (108)
         +- * Expand (107)
            +- Union (106)
               :- * Project (39)
               :  +- SortMergeJoin LeftOuter (38)
               :     :- * Sort (20)
               :     :  +- * HashAggregate (19)
               :     :     +- Exchange (18)
               :     :        +- * HashAggregate (17)
               :     :           +- * Project (16)
               :     :              +- * BroadcastHashJoin Inner BuildRight (15)
               :     :                 :- * Project (10)
               :     :                 :  +- * BroadcastHashJoin Inner BuildLeft (9)
               :     :                 :     :- BroadcastExchange (4)
               :     :                 :     :  +- * Filter (3)
               :     :                 :     :     +- * ColumnarToRow (2)
               :     :                 :     :        +- Scan parquet default.store_sales (1)
               :     :                 :     +- * Project (8)
               :     :                 :        +- * Filter (7)
               :     :                 :           +- * ColumnarToRow (6)
               :     :                 :              +- Scan parquet default.date_dim (5)
               :     :                 +- BroadcastExchange (14)
               :     :                    +- * Filter (13)
               :     :                       +- * ColumnarToRow (12)
               :     :                          +- Scan parquet default.store (11)
               :     +- * Sort (37)
               :        +- * HashAggregate (36)
               :           +- Exchange (35)
               :              +- * HashAggregate (34)
               :                 +- * Project (33)
               :                    +- * BroadcastHashJoin Inner BuildRight (32)
               :                       :- * Project (30)
               :                       :  +- * BroadcastHashJoin Inner BuildLeft (29)
               :                       :     :- BroadcastExchange (24)
               :                       :     :  +- * Filter (23)
               :                       :     :     +- * ColumnarToRow (22)
               :                       :     :        +- Scan parquet default.store_returns (21)
               :                       :     +- * Project (28)
               :                       :        +- * Filter (27)
               :                       :           +- * ColumnarToRow (26)
               :                       :              +- Scan parquet default.date_dim (25)
               :                       +- ReusedExchange (31)
               :- * Project (66)
               :  +- BroadcastNestedLoopJoin Inner BuildRight (65)
               :     :- * HashAggregate (51)
               :     :  +- Exchange (50)
               :     :     +- * HashAggregate (49)
               :     :        +- * Project (48)
               :     :           +- * BroadcastHashJoin Inner BuildLeft (47)
               :     :              :- BroadcastExchange (42)
               :     :              :  +- * ColumnarToRow (41)
               :     :              :     +- Scan parquet default.catalog_sales (40)
               :     :              +- * Project (46)
               :     :                 +- * Filter (45)
               :     :                    +- * ColumnarToRow (44)
               :     :                       +- Scan parquet default.date_dim (43)
               :     +- BroadcastExchange (64)
               :        +- * HashAggregate (63)
               :           +- Exchange (62)
               :              +- * HashAggregate (61)
               :                 +- * Project (60)
               :                    +- * BroadcastHashJoin Inner BuildLeft (59)
               :                       :- BroadcastExchange (54)
               :                       :  +- * ColumnarToRow (53)
               :                       :     +- Scan parquet default.catalog_returns (52)
               :                       +- * Project (58)
               :                          +- * Filter (57)
               :                             +- * ColumnarToRow (56)
               :                                +- Scan parquet default.date_dim (55)
               +- * Project (105)
                  +- SortMergeJoin LeftOuter (104)
                     :- * Sort (86)
                     :  +- * HashAggregate (85)
                     :     +- Exchange (84)
                     :        +- * HashAggregate (83)
                     :           +- * Project (82)
                     :              +- * BroadcastHashJoin Inner BuildRight (81)
                     :                 :- * Project (76)
                     :                 :  +- * BroadcastHashJoin Inner BuildLeft (75)
                     :                 :     :- BroadcastExchange (70)
                     :                 :     :  +- * Filter (69)
                     :                 :     :     +- * ColumnarToRow (68)
                     :                 :     :        +- Scan parquet default.web_sales (67)
                     :                 :     +- * Project (74)
                     :                 :        +- * Filter (73)
                     :                 :           +- * ColumnarToRow (72)
                     :                 :              +- Scan parquet default.date_dim (71)
                     :                 +- BroadcastExchange (80)
                     :                    +- * Filter (79)
                     :                       +- * ColumnarToRow (78)
                     :                          +- Scan parquet default.web_page (77)
                     +- * Sort (103)
                        +- * HashAggregate (102)
                           +- Exchange (101)
                              +- * HashAggregate (100)
                                 +- * Project (99)
                                    +- * BroadcastHashJoin Inner BuildRight (98)
                                       :- * Project (96)
                                       :  +- * BroadcastHashJoin Inner BuildLeft (95)
                                       :     :- BroadcastExchange (90)
                                       :     :  +- * Filter (89)
                                       :     :     +- * ColumnarToRow (88)
                                       :     :        +- Scan parquet default.web_returns (87)
                                       :     +- * Project (94)
                                       :        +- * Filter (93)
                                       :           +- * ColumnarToRow (92)
                                       :              +- Scan parquet default.date_dim (91)
                                       +- ReusedExchange (97)


(1) Scan parquet default.store_sales
Output [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_store_sk#1)

(4) BroadcastExchange
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[3, int, true] as bigint)),false), [id=#5]

(5) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_date#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-08-03), LessThanOrEqual(d_date,2000-09-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(6) ColumnarToRow
Input [2]: [d_date_sk#6, d_date#7]

(7) Filter
Input [2]: [d_date_sk#6, d_date#7]
Condition : (((isnotnull(d_date#7) AND (d_date#7 >= 11172)) AND (d_date#7 <= 11202)) AND isnotnull(d_date_sk#6))

(8) Project
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_date#7]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(10) Project [codegen id : 3]
Output [3]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3]
Input [5]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4, d_date_sk#6]

(11) Scan parquet default.store
Output [1]: [s_store_sk#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int>

(12) ColumnarToRow [codegen id : 2]
Input [1]: [s_store_sk#8]

(13) Filter [codegen id : 2]
Input [1]: [s_store_sk#8]
Condition : isnotnull(s_store_sk#8)

(14) BroadcastExchange
Input [1]: [s_store_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9]

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#8]
Join condition: None

(16) Project [codegen id : 3]
Output [3]: [ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#8]
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#8]

(17) HashAggregate [codegen id : 3]
Input [3]: [ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#8]
Keys [1]: [s_store_sk#8]
Functions [2]: [partial_sum(UnscaledValue(ss_ext_sales_price#2)), partial_sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [2]: [sum#10, sum#11]
Results [3]: [s_store_sk#8, sum#12, sum#13]

(18) Exchange
Input [3]: [s_store_sk#8, sum#12, sum#13]
Arguments: hashpartitioning(s_store_sk#8, 5), ENSURE_REQUIREMENTS, [id=#14]

(19) HashAggregate [codegen id : 4]
Input [3]: [s_store_sk#8, sum#12, sum#13]
Keys [1]: [s_store_sk#8]
Functions [2]: [sum(UnscaledValue(ss_ext_sales_price#2)), sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_ext_sales_price#2))#15, sum(UnscaledValue(ss_net_profit#3))#16]
Results [3]: [s_store_sk#8, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#15,17,2) AS sales#17, MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#16,17,2) AS profit#18]

(20) Sort [codegen id : 4]
Input [3]: [s_store_sk#8, sales#17, profit#18]
Arguments: [s_store_sk#8 ASC NULLS FIRST], false, 0

(21) Scan parquet default.store_returns
Output [4]: [sr_store_sk#19, sr_return_amt#20, sr_net_loss#21, sr_returned_date_sk#22]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#22), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_store_sk:bigint,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(22) ColumnarToRow [codegen id : 5]
Input [4]: [sr_store_sk#19, sr_return_amt#20, sr_net_loss#21, sr_returned_date_sk#22]

(23) Filter [codegen id : 5]
Input [4]: [sr_store_sk#19, sr_return_amt#20, sr_net_loss#21, sr_returned_date_sk#22]
Condition : isnotnull(sr_store_sk#19)

(24) BroadcastExchange
Input [4]: [sr_store_sk#19, sr_return_amt#20, sr_net_loss#21, sr_returned_date_sk#22]
Arguments: HashedRelationBroadcastMode(List(input[3, bigint, true]),false), [id=#23]

(25) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_date#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-08-03), LessThanOrEqual(d_date,2000-09-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(26) ColumnarToRow
Input [2]: [d_date_sk#6, d_date#7]

(27) Filter
Input [2]: [d_date_sk#6, d_date#7]
Condition : (((isnotnull(d_date#7) AND (d_date#7 >= 11172)) AND (d_date#7 <= 11202)) AND isnotnull(d_date_sk#6))

(28) Project
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_date#7]

(29) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [sr_returned_date_sk#22]
Right keys [1]: [cast(d_date_sk#6 as bigint)]
Join condition: None

(30) Project [codegen id : 7]
Output [3]: [sr_store_sk#19, sr_return_amt#20, sr_net_loss#21]
Input [5]: [sr_store_sk#19, sr_return_amt#20, sr_net_loss#21, sr_returned_date_sk#22, d_date_sk#6]

(31) ReusedExchange [Reuses operator id: 14]
Output [1]: [s_store_sk#24]

(32) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [sr_store_sk#19]
Right keys [1]: [cast(s_store_sk#24 as bigint)]
Join condition: None

(33) Project [codegen id : 7]
Output [3]: [sr_return_amt#20, sr_net_loss#21, s_store_sk#24]
Input [4]: [sr_store_sk#19, sr_return_amt#20, sr_net_loss#21, s_store_sk#24]

(34) HashAggregate [codegen id : 7]
Input [3]: [sr_return_amt#20, sr_net_loss#21, s_store_sk#24]
Keys [1]: [s_store_sk#24]
Functions [2]: [partial_sum(UnscaledValue(sr_return_amt#20)), partial_sum(UnscaledValue(sr_net_loss#21))]
Aggregate Attributes [2]: [sum#25, sum#26]
Results [3]: [s_store_sk#24, sum#27, sum#28]

(35) Exchange
Input [3]: [s_store_sk#24, sum#27, sum#28]
Arguments: hashpartitioning(s_store_sk#24, 5), ENSURE_REQUIREMENTS, [id=#29]

(36) HashAggregate [codegen id : 8]
Input [3]: [s_store_sk#24, sum#27, sum#28]
Keys [1]: [s_store_sk#24]
Functions [2]: [sum(UnscaledValue(sr_return_amt#20)), sum(UnscaledValue(sr_net_loss#21))]
Aggregate Attributes [2]: [sum(UnscaledValue(sr_return_amt#20))#30, sum(UnscaledValue(sr_net_loss#21))#31]
Results [3]: [s_store_sk#24, MakeDecimal(sum(UnscaledValue(sr_return_amt#20))#30,17,2) AS returns#32, MakeDecimal(sum(UnscaledValue(sr_net_loss#21))#31,17,2) AS profit_loss#33]

(37) Sort [codegen id : 8]
Input [3]: [s_store_sk#24, returns#32, profit_loss#33]
Arguments: [s_store_sk#24 ASC NULLS FIRST], false, 0

(38) SortMergeJoin
Left keys [1]: [s_store_sk#8]
Right keys [1]: [s_store_sk#24]
Join condition: None

(39) Project [codegen id : 9]
Output [5]: [sales#17, coalesce(returns#32, 0.00) AS returns#34, CheckOverflow((promote_precision(cast(profit#18 as decimal(18,2))) - promote_precision(cast(coalesce(profit_loss#33, 0.00) as decimal(18,2)))), DecimalType(18,2), true) AS profit#35, store channel AS channel#36, s_store_sk#8 AS id#37]
Input [6]: [s_store_sk#8, sales#17, profit#18, s_store_sk#24, returns#32, profit_loss#33]

(40) Scan parquet default.catalog_sales
Output [4]: [cs_call_center_sk#38, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#41), dynamicpruningexpression(true)]
ReadSchema: struct<cs_call_center_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(41) ColumnarToRow [codegen id : 10]
Input [4]: [cs_call_center_sk#38, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41]

(42) BroadcastExchange
Input [4]: [cs_call_center_sk#38, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41]
Arguments: HashedRelationBroadcastMode(List(cast(input[3, int, true] as bigint)),false), [id=#42]

(43) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_date#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-08-03), LessThanOrEqual(d_date,2000-09-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(44) ColumnarToRow
Input [2]: [d_date_sk#6, d_date#7]

(45) Filter
Input [2]: [d_date_sk#6, d_date#7]
Condition : (((isnotnull(d_date#7) AND (d_date#7 >= 11172)) AND (d_date#7 <= 11202)) AND isnotnull(d_date_sk#6))

(46) Project
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_date#7]

(47) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [cs_sold_date_sk#41]
Right keys [1]: [d_date_sk#6]
Join condition: None

(48) Project [codegen id : 11]
Output [3]: [cs_call_center_sk#38, cs_ext_sales_price#39, cs_net_profit#40]
Input [5]: [cs_call_center_sk#38, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41, d_date_sk#6]

(49) HashAggregate [codegen id : 11]
Input [3]: [cs_call_center_sk#38, cs_ext_sales_price#39, cs_net_profit#40]
Keys [1]: [cs_call_center_sk#38]
Functions [2]: [partial_sum(UnscaledValue(cs_ext_sales_price#39)), partial_sum(UnscaledValue(cs_net_profit#40))]
Aggregate Attributes [2]: [sum#43, sum#44]
Results [3]: [cs_call_center_sk#38, sum#45, sum#46]

(50) Exchange
Input [3]: [cs_call_center_sk#38, sum#45, sum#46]
Arguments: hashpartitioning(cs_call_center_sk#38, 5), ENSURE_REQUIREMENTS, [id=#47]

(51) HashAggregate [codegen id : 12]
Input [3]: [cs_call_center_sk#38, sum#45, sum#46]
Keys [1]: [cs_call_center_sk#38]
Functions [2]: [sum(UnscaledValue(cs_ext_sales_price#39)), sum(UnscaledValue(cs_net_profit#40))]
Aggregate Attributes [2]: [sum(UnscaledValue(cs_ext_sales_price#39))#48, sum(UnscaledValue(cs_net_profit#40))#49]
Results [3]: [cs_call_center_sk#38, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#39))#48,17,2) AS sales#50, MakeDecimal(sum(UnscaledValue(cs_net_profit#40))#49,17,2) AS profit#51]

(52) Scan parquet default.catalog_returns
Output [3]: [cr_return_amount#52, cr_net_loss#53, cr_returned_date_sk#54]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#54), dynamicpruningexpression(true)]
ReadSchema: struct<cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(53) ColumnarToRow [codegen id : 13]
Input [3]: [cr_return_amount#52, cr_net_loss#53, cr_returned_date_sk#54]

(54) BroadcastExchange
Input [3]: [cr_return_amount#52, cr_net_loss#53, cr_returned_date_sk#54]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#55]

(55) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_date#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-08-03), LessThanOrEqual(d_date,2000-09-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(56) ColumnarToRow
Input [2]: [d_date_sk#6, d_date#7]

(57) Filter
Input [2]: [d_date_sk#6, d_date#7]
Condition : (((isnotnull(d_date#7) AND (d_date#7 >= 11172)) AND (d_date#7 <= 11202)) AND isnotnull(d_date_sk#6))

(58) Project
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_date#7]

(59) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [cr_returned_date_sk#54]
Right keys [1]: [d_date_sk#6]
Join condition: None

(60) Project [codegen id : 14]
Output [2]: [cr_return_amount#52, cr_net_loss#53]
Input [4]: [cr_return_amount#52, cr_net_loss#53, cr_returned_date_sk#54, d_date_sk#6]

(61) HashAggregate [codegen id : 14]
Input [2]: [cr_return_amount#52, cr_net_loss#53]
Keys: []
Functions [2]: [partial_sum(UnscaledValue(cr_return_amount#52)), partial_sum(UnscaledValue(cr_net_loss#53))]
Aggregate Attributes [2]: [sum#56, sum#57]
Results [2]: [sum#58, sum#59]

(62) Exchange
Input [2]: [sum#58, sum#59]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#60]

(63) HashAggregate [codegen id : 15]
Input [2]: [sum#58, sum#59]
Keys: []
Functions [2]: [sum(UnscaledValue(cr_return_amount#52)), sum(UnscaledValue(cr_net_loss#53))]
Aggregate Attributes [2]: [sum(UnscaledValue(cr_return_amount#52))#61, sum(UnscaledValue(cr_net_loss#53))#62]
Results [2]: [MakeDecimal(sum(UnscaledValue(cr_return_amount#52))#61,17,2) AS returns#63, MakeDecimal(sum(UnscaledValue(cr_net_loss#53))#62,17,2) AS profit_loss#64]

(64) BroadcastExchange
Input [2]: [returns#63, profit_loss#64]
Arguments: IdentityBroadcastMode, [id=#65]

(65) BroadcastNestedLoopJoin
Join condition: None

(66) Project [codegen id : 16]
Output [5]: [sales#50, returns#63, CheckOverflow((promote_precision(cast(profit#51 as decimal(18,2))) - promote_precision(cast(profit_loss#64 as decimal(18,2)))), DecimalType(18,2), true) AS profit#66, catalog channel AS channel#67, cs_call_center_sk#38 AS id#68]
Input [5]: [cs_call_center_sk#38, sales#50, profit#51, returns#63, profit_loss#64]

(67) Scan parquet default.web_sales
Output [4]: [ws_web_page_sk#69, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#72), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ws_web_page_sk)]
ReadSchema: struct<ws_web_page_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(68) ColumnarToRow [codegen id : 17]
Input [4]: [ws_web_page_sk#69, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72]

(69) Filter [codegen id : 17]
Input [4]: [ws_web_page_sk#69, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72]
Condition : isnotnull(ws_web_page_sk#69)

(70) BroadcastExchange
Input [4]: [ws_web_page_sk#69, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72]
Arguments: HashedRelationBroadcastMode(List(cast(input[3, int, true] as bigint)),false), [id=#73]

(71) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_date#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-08-03), LessThanOrEqual(d_date,2000-09-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(72) ColumnarToRow
Input [2]: [d_date_sk#6, d_date#7]

(73) Filter
Input [2]: [d_date_sk#6, d_date#7]
Condition : (((isnotnull(d_date#7) AND (d_date#7 >= 11172)) AND (d_date#7 <= 11202)) AND isnotnull(d_date_sk#6))

(74) Project
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_date#7]

(75) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [ws_sold_date_sk#72]
Right keys [1]: [d_date_sk#6]
Join condition: None

(76) Project [codegen id : 19]
Output [3]: [ws_web_page_sk#69, ws_ext_sales_price#70, ws_net_profit#71]
Input [5]: [ws_web_page_sk#69, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72, d_date_sk#6]

(77) Scan parquet default.web_page
Output [1]: [wp_web_page_sk#74]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_page]
PushedFilters: [IsNotNull(wp_web_page_sk)]
ReadSchema: struct<wp_web_page_sk:int>

(78) ColumnarToRow [codegen id : 18]
Input [1]: [wp_web_page_sk#74]

(79) Filter [codegen id : 18]
Input [1]: [wp_web_page_sk#74]
Condition : isnotnull(wp_web_page_sk#74)

(80) BroadcastExchange
Input [1]: [wp_web_page_sk#74]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#75]

(81) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [ws_web_page_sk#69]
Right keys [1]: [wp_web_page_sk#74]
Join condition: None

(82) Project [codegen id : 19]
Output [3]: [ws_ext_sales_price#70, ws_net_profit#71, wp_web_page_sk#74]
Input [4]: [ws_web_page_sk#69, ws_ext_sales_price#70, ws_net_profit#71, wp_web_page_sk#74]

(83) HashAggregate [codegen id : 19]
Input [3]: [ws_ext_sales_price#70, ws_net_profit#71, wp_web_page_sk#74]
Keys [1]: [wp_web_page_sk#74]
Functions [2]: [partial_sum(UnscaledValue(ws_ext_sales_price#70)), partial_sum(UnscaledValue(ws_net_profit#71))]
Aggregate Attributes [2]: [sum#76, sum#77]
Results [3]: [wp_web_page_sk#74, sum#78, sum#79]

(84) Exchange
Input [3]: [wp_web_page_sk#74, sum#78, sum#79]
Arguments: hashpartitioning(wp_web_page_sk#74, 5), ENSURE_REQUIREMENTS, [id=#80]

(85) HashAggregate [codegen id : 20]
Input [3]: [wp_web_page_sk#74, sum#78, sum#79]
Keys [1]: [wp_web_page_sk#74]
Functions [2]: [sum(UnscaledValue(ws_ext_sales_price#70)), sum(UnscaledValue(ws_net_profit#71))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_sales_price#70))#81, sum(UnscaledValue(ws_net_profit#71))#82]
Results [3]: [wp_web_page_sk#74, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#70))#81,17,2) AS sales#83, MakeDecimal(sum(UnscaledValue(ws_net_profit#71))#82,17,2) AS profit#84]

(86) Sort [codegen id : 20]
Input [3]: [wp_web_page_sk#74, sales#83, profit#84]
Arguments: [wp_web_page_sk#74 ASC NULLS FIRST], false, 0

(87) Scan parquet default.web_returns
Output [4]: [wr_web_page_sk#85, wr_return_amt#86, wr_net_loss#87, wr_returned_date_sk#88]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#88), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(wr_web_page_sk)]
ReadSchema: struct<wr_web_page_sk:bigint,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(88) ColumnarToRow [codegen id : 21]
Input [4]: [wr_web_page_sk#85, wr_return_amt#86, wr_net_loss#87, wr_returned_date_sk#88]

(89) Filter [codegen id : 21]
Input [4]: [wr_web_page_sk#85, wr_return_amt#86, wr_net_loss#87, wr_returned_date_sk#88]
Condition : isnotnull(wr_web_page_sk#85)

(90) BroadcastExchange
Input [4]: [wr_web_page_sk#85, wr_return_amt#86, wr_net_loss#87, wr_returned_date_sk#88]
Arguments: HashedRelationBroadcastMode(List(input[3, bigint, true]),false), [id=#89]

(91) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_date#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-08-03), LessThanOrEqual(d_date,2000-09-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(92) ColumnarToRow
Input [2]: [d_date_sk#6, d_date#7]

(93) Filter
Input [2]: [d_date_sk#6, d_date#7]
Condition : (((isnotnull(d_date#7) AND (d_date#7 >= 11172)) AND (d_date#7 <= 11202)) AND isnotnull(d_date_sk#6))

(94) Project
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_date#7]

(95) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [wr_returned_date_sk#88]
Right keys [1]: [cast(d_date_sk#6 as bigint)]
Join condition: None

(96) Project [codegen id : 23]
Output [3]: [wr_web_page_sk#85, wr_return_amt#86, wr_net_loss#87]
Input [5]: [wr_web_page_sk#85, wr_return_amt#86, wr_net_loss#87, wr_returned_date_sk#88, d_date_sk#6]

(97) ReusedExchange [Reuses operator id: 80]
Output [1]: [wp_web_page_sk#90]

(98) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [wr_web_page_sk#85]
Right keys [1]: [cast(wp_web_page_sk#90 as bigint)]
Join condition: None

(99) Project [codegen id : 23]
Output [3]: [wr_return_amt#86, wr_net_loss#87, wp_web_page_sk#90]
Input [4]: [wr_web_page_sk#85, wr_return_amt#86, wr_net_loss#87, wp_web_page_sk#90]

(100) HashAggregate [codegen id : 23]
Input [3]: [wr_return_amt#86, wr_net_loss#87, wp_web_page_sk#90]
Keys [1]: [wp_web_page_sk#90]
Functions [2]: [partial_sum(UnscaledValue(wr_return_amt#86)), partial_sum(UnscaledValue(wr_net_loss#87))]
Aggregate Attributes [2]: [sum#91, sum#92]
Results [3]: [wp_web_page_sk#90, sum#93, sum#94]

(101) Exchange
Input [3]: [wp_web_page_sk#90, sum#93, sum#94]
Arguments: hashpartitioning(wp_web_page_sk#90, 5), ENSURE_REQUIREMENTS, [id=#95]

(102) HashAggregate [codegen id : 24]
Input [3]: [wp_web_page_sk#90, sum#93, sum#94]
Keys [1]: [wp_web_page_sk#90]
Functions [2]: [sum(UnscaledValue(wr_return_amt#86)), sum(UnscaledValue(wr_net_loss#87))]
Aggregate Attributes [2]: [sum(UnscaledValue(wr_return_amt#86))#96, sum(UnscaledValue(wr_net_loss#87))#97]
Results [3]: [wp_web_page_sk#90, MakeDecimal(sum(UnscaledValue(wr_return_amt#86))#96,17,2) AS returns#98, MakeDecimal(sum(UnscaledValue(wr_net_loss#87))#97,17,2) AS profit_loss#99]

(103) Sort [codegen id : 24]
Input [3]: [wp_web_page_sk#90, returns#98, profit_loss#99]
Arguments: [wp_web_page_sk#90 ASC NULLS FIRST], false, 0

(104) SortMergeJoin
Left keys [1]: [wp_web_page_sk#74]
Right keys [1]: [wp_web_page_sk#90]
Join condition: None

(105) Project [codegen id : 25]
Output [5]: [sales#83, coalesce(returns#98, 0.00) AS returns#100, CheckOverflow((promote_precision(cast(profit#84 as decimal(18,2))) - promote_precision(cast(coalesce(profit_loss#99, 0.00) as decimal(18,2)))), DecimalType(18,2), true) AS profit#101, web channel AS channel#102, wp_web_page_sk#74 AS id#103]
Input [6]: [wp_web_page_sk#74, sales#83, profit#84, wp_web_page_sk#90, returns#98, profit_loss#99]

(106) Union

(107) Expand [codegen id : 26]
Input [5]: [sales#17, returns#34, profit#35, channel#36, id#37]
Arguments: [List(sales#17, returns#34, profit#35, channel#36, id#37, 0), List(sales#17, returns#34, profit#35, channel#36, null, 1), List(sales#17, returns#34, profit#35, null, null, 3)], [sales#17, returns#34, profit#35, channel#104, id#105, spark_grouping_id#106]

(108) HashAggregate [codegen id : 26]
Input [6]: [sales#17, returns#34, profit#35, channel#104, id#105, spark_grouping_id#106]
Keys [3]: [channel#104, id#105, spark_grouping_id#106]
Functions [3]: [partial_sum(sales#17), partial_sum(returns#34), partial_sum(profit#35)]
Aggregate Attributes [6]: [sum#107, isEmpty#108, sum#109, isEmpty#110, sum#111, isEmpty#112]
Results [9]: [channel#104, id#105, spark_grouping_id#106, sum#113, isEmpty#114, sum#115, isEmpty#116, sum#117, isEmpty#118]

(109) Exchange
Input [9]: [channel#104, id#105, spark_grouping_id#106, sum#113, isEmpty#114, sum#115, isEmpty#116, sum#117, isEmpty#118]
Arguments: hashpartitioning(channel#104, id#105, spark_grouping_id#106, 5), ENSURE_REQUIREMENTS, [id=#119]

(110) HashAggregate [codegen id : 27]
Input [9]: [channel#104, id#105, spark_grouping_id#106, sum#113, isEmpty#114, sum#115, isEmpty#116, sum#117, isEmpty#118]
Keys [3]: [channel#104, id#105, spark_grouping_id#106]
Functions [3]: [sum(sales#17), sum(returns#34), sum(profit#35)]
Aggregate Attributes [3]: [sum(sales#17)#120, sum(returns#34)#121, sum(profit#35)#122]
Results [5]: [channel#104, id#105, sum(sales#17)#120 AS sales#123, sum(returns#34)#121 AS returns#124, sum(profit#35)#122 AS profit#125]

(111) TakeOrderedAndProject
Input [5]: [channel#104, id#105, sales#123, returns#124, profit#125]
Arguments: 100, [channel#104 ASC NULLS FIRST, id#105 ASC NULLS FIRST], [channel#104, id#105, sales#123, returns#124, profit#125]

