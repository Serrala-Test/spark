== Physical Plan ==
* HashAggregate (37)
+- Exchange (36)
   +- * HashAggregate (35)
      +- * Project (34)
         +- * BroadcastHashJoin Inner BuildRight (33)
            :- * Project (31)
            :  +- * BroadcastHashJoin Inner BuildRight (30)
            :     :- * Project (24)
            :     :  +- * BroadcastHashJoin Inner BuildRight (23)
            :     :     :- * Project (18)
            :     :     :  +- * SortMergeJoin Inner (17)
            :     :     :     :- * Sort (11)
            :     :     :     :  +- Exchange (10)
            :     :     :     :     +- * Project (9)
            :     :     :     :        +- * BroadcastHashJoin Inner BuildRight (8)
            :     :     :     :           :- * Filter (3)
            :     :     :     :           :  +- * ColumnarToRow (2)
            :     :     :     :           :     +- Scan parquet spark_catalog.default.store_sales (1)
            :     :     :     :           +- BroadcastExchange (7)
            :     :     :     :              +- * Filter (6)
            :     :     :     :                 +- * ColumnarToRow (5)
            :     :     :     :                    +- Scan parquet spark_catalog.default.store (4)
            :     :     :     +- * Sort (16)
            :     :     :        +- Exchange (15)
            :     :     :           +- * Filter (14)
            :     :     :              +- * ColumnarToRow (13)
            :     :     :                 +- Scan parquet spark_catalog.default.customer_demographics (12)
            :     :     +- BroadcastExchange (22)
            :     :        +- * Filter (21)
            :     :           +- * ColumnarToRow (20)
            :     :              +- Scan parquet spark_catalog.default.household_demographics (19)
            :     +- BroadcastExchange (29)
            :        +- * Project (28)
            :           +- * Filter (27)
            :              +- * ColumnarToRow (26)
            :                 +- Scan parquet spark_catalog.default.customer_address (25)
            +- ReusedExchange (32)


(1) Scan parquet spark_catalog.default.store_sales
Output [10]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#10), dynamicpruningexpression(ss_sold_date_sk#10 IN dynamicpruning#11)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_cdemo_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk), Or(Or(And(GreaterThanOrEqual(ss_net_profit,100.00),LessThanOrEqual(ss_net_profit,200.00)),And(GreaterThanOrEqual(ss_net_profit,150.00),LessThanOrEqual(ss_net_profit,300.00))),And(GreaterThanOrEqual(ss_net_profit,50.00),LessThanOrEqual(ss_net_profit,250.00)))]
ReadSchema: struct<ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [10]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10]

(3) Filter [codegen id : 2]
Input [10]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10]
Condition : ((((((isnotnull(ss_store_sk#4) AND isnotnull(ss_cdemo_sk#1)) AND isnotnull(ss_hdemo_sk#2)) AND isnotnull(ss_addr_sk#3)) AND ((((ss_net_profit#9 >= 100.00) AND (ss_net_profit#9 <= 200.00)) OR ((ss_net_profit#9 >= 150.00) AND (ss_net_profit#9 <= 300.00))) OR ((ss_net_profit#9 >= 50.00) AND (ss_net_profit#9 <= 250.00)))) AND might_contain(Subquery scalar-subquery#12, [id=#13], xxhash64(ss_hdemo_sk#2, 42))) AND might_contain(Subquery scalar-subquery#14, [id=#15], xxhash64(ss_addr_sk#3, 42)))

(4) Scan parquet spark_catalog.default.store
Output [1]: [s_store_sk#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int>

(5) ColumnarToRow [codegen id : 1]
Input [1]: [s_store_sk#16]

(6) Filter [codegen id : 1]
Input [1]: [s_store_sk#16]
Condition : isnotnull(s_store_sk#16)

(7) BroadcastExchange
Input [1]: [s_store_sk#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [s_store_sk#16]
Join type: Inner
Join condition: None

(9) Project [codegen id : 2]
Output [9]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10]
Input [11]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10, s_store_sk#16]

(10) Exchange
Input [9]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10]
Arguments: hashpartitioning(ss_cdemo_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(11) Sort [codegen id : 3]
Input [9]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10]
Arguments: [ss_cdemo_sk#1 ASC NULLS FIRST], false, 0

(12) Scan parquet spark_catalog.default.customer_demographics
Output [3]: [cd_demo_sk#17, cd_marital_status#18, cd_education_status#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(13) ColumnarToRow [codegen id : 4]
Input [3]: [cd_demo_sk#17, cd_marital_status#18, cd_education_status#19]

(14) Filter [codegen id : 4]
Input [3]: [cd_demo_sk#17, cd_marital_status#18, cd_education_status#19]
Condition : isnotnull(cd_demo_sk#17)

(15) Exchange
Input [3]: [cd_demo_sk#17, cd_marital_status#18, cd_education_status#19]
Arguments: hashpartitioning(cd_demo_sk#17, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(16) Sort [codegen id : 5]
Input [3]: [cd_demo_sk#17, cd_marital_status#18, cd_education_status#19]
Arguments: [cd_demo_sk#17 ASC NULLS FIRST], false, 0

(17) SortMergeJoin [codegen id : 9]
Left keys [1]: [ss_cdemo_sk#1]
Right keys [1]: [cd_demo_sk#17]
Join type: Inner
Join condition: ((((((cd_marital_status#18 = M) AND (cd_education_status#19 = Advanced Degree     )) AND (ss_sales_price#6 >= 100.00)) AND (ss_sales_price#6 <= 150.00)) OR ((((cd_marital_status#18 = S) AND (cd_education_status#19 = College             )) AND (ss_sales_price#6 >= 50.00)) AND (ss_sales_price#6 <= 100.00))) OR ((((cd_marital_status#18 = W) AND (cd_education_status#19 = 2 yr Degree         )) AND (ss_sales_price#6 >= 150.00)) AND (ss_sales_price#6 <= 200.00)))

(18) Project [codegen id : 9]
Output [10]: [ss_hdemo_sk#2, ss_addr_sk#3, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10, cd_marital_status#18, cd_education_status#19]
Input [12]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10, cd_demo_sk#17, cd_marital_status#18, cd_education_status#19]

(19) Scan parquet spark_catalog.default.household_demographics
Output [2]: [hd_demo_sk#20, hd_dep_count#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_demo_sk), Or(EqualTo(hd_dep_count,3),EqualTo(hd_dep_count,1))]
ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int>

(20) ColumnarToRow [codegen id : 6]
Input [2]: [hd_demo_sk#20, hd_dep_count#21]

(21) Filter [codegen id : 6]
Input [2]: [hd_demo_sk#20, hd_dep_count#21]
Condition : (isnotnull(hd_demo_sk#20) AND ((hd_dep_count#21 = 3) OR (hd_dep_count#21 = 1)))

(22) BroadcastExchange
Input [2]: [hd_demo_sk#20, hd_dep_count#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=4]

(23) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_hdemo_sk#2]
Right keys [1]: [hd_demo_sk#20]
Join type: Inner
Join condition: (((((((cd_marital_status#18 = M) AND (cd_education_status#19 = Advanced Degree     )) AND (ss_sales_price#6 >= 100.00)) AND (ss_sales_price#6 <= 150.00)) AND (hd_dep_count#21 = 3)) OR (((((cd_marital_status#18 = S) AND (cd_education_status#19 = College             )) AND (ss_sales_price#6 >= 50.00)) AND (ss_sales_price#6 <= 100.00)) AND (hd_dep_count#21 = 1))) OR (((((cd_marital_status#18 = W) AND (cd_education_status#19 = 2 yr Degree         )) AND (ss_sales_price#6 >= 150.00)) AND (ss_sales_price#6 <= 200.00)) AND (hd_dep_count#21 = 1)))

(24) Project [codegen id : 9]
Output [6]: [ss_addr_sk#3, ss_quantity#5, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10]
Input [12]: [ss_hdemo_sk#2, ss_addr_sk#3, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10, cd_marital_status#18, cd_education_status#19, hd_demo_sk#20, hd_dep_count#21]

(25) Scan parquet spark_catalog.default.customer_address
Output [3]: [ca_address_sk#22, ca_state#23, ca_country#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_state, [OH,TX]),In(ca_state, [KY,NM,OR])),In(ca_state, [MS,TX,VA]))]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(26) ColumnarToRow [codegen id : 7]
Input [3]: [ca_address_sk#22, ca_state#23, ca_country#24]

(27) Filter [codegen id : 7]
Input [3]: [ca_address_sk#22, ca_state#23, ca_country#24]
Condition : (((isnotnull(ca_country#24) AND (ca_country#24 = United States)) AND isnotnull(ca_address_sk#22)) AND ((ca_state#23 IN (TX,OH) OR ca_state#23 IN (OR,NM,KY)) OR ca_state#23 IN (VA,TX,MS)))

(28) Project [codegen id : 7]
Output [2]: [ca_address_sk#22, ca_state#23]
Input [3]: [ca_address_sk#22, ca_state#23, ca_country#24]

(29) BroadcastExchange
Input [2]: [ca_address_sk#22, ca_state#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(30) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_addr_sk#3]
Right keys [1]: [ca_address_sk#22]
Join type: Inner
Join condition: ((((ca_state#23 IN (TX,OH) AND (ss_net_profit#9 >= 100.00)) AND (ss_net_profit#9 <= 200.00)) OR ((ca_state#23 IN (OR,NM,KY) AND (ss_net_profit#9 >= 150.00)) AND (ss_net_profit#9 <= 300.00))) OR ((ca_state#23 IN (VA,TX,MS) AND (ss_net_profit#9 >= 50.00)) AND (ss_net_profit#9 <= 250.00)))

(31) Project [codegen id : 9]
Output [4]: [ss_quantity#5, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_sold_date_sk#10]
Input [8]: [ss_addr_sk#3, ss_quantity#5, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10, ca_address_sk#22, ca_state#23]

(32) ReusedExchange [Reuses operator id: 56]
Output [1]: [d_date_sk#25]

(33) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_sold_date_sk#10]
Right keys [1]: [d_date_sk#25]
Join type: Inner
Join condition: None

(34) Project [codegen id : 9]
Output [3]: [ss_quantity#5, ss_ext_sales_price#7, ss_ext_wholesale_cost#8]
Input [5]: [ss_quantity#5, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_sold_date_sk#10, d_date_sk#25]

(35) HashAggregate [codegen id : 9]
Input [3]: [ss_quantity#5, ss_ext_sales_price#7, ss_ext_wholesale_cost#8]
Keys: []
Functions [4]: [partial_avg(ss_quantity#5), partial_avg(UnscaledValue(ss_ext_sales_price#7)), partial_avg(UnscaledValue(ss_ext_wholesale_cost#8)), partial_sum(UnscaledValue(ss_ext_wholesale_cost#8))]
Aggregate Attributes [7]: [sum#26, count#27, sum#28, count#29, sum#30, count#31, sum#32]
Results [7]: [sum#33, count#34, sum#35, count#36, sum#37, count#38, sum#39]

(36) Exchange
Input [7]: [sum#33, count#34, sum#35, count#36, sum#37, count#38, sum#39]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=6]

(37) HashAggregate [codegen id : 10]
Input [7]: [sum#33, count#34, sum#35, count#36, sum#37, count#38, sum#39]
Keys: []
Functions [4]: [avg(ss_quantity#5), avg(UnscaledValue(ss_ext_sales_price#7)), avg(UnscaledValue(ss_ext_wholesale_cost#8)), sum(UnscaledValue(ss_ext_wholesale_cost#8))]
Aggregate Attributes [4]: [avg(ss_quantity#5)#40, avg(UnscaledValue(ss_ext_sales_price#7))#41, avg(UnscaledValue(ss_ext_wholesale_cost#8))#42, sum(UnscaledValue(ss_ext_wholesale_cost#8))#43]
Results [4]: [avg(ss_quantity#5)#40 AS avg(ss_quantity)#44, cast((avg(UnscaledValue(ss_ext_sales_price#7))#41 / 100.0) as decimal(11,6)) AS avg(ss_ext_sales_price)#45, cast((avg(UnscaledValue(ss_ext_wholesale_cost#8))#42 / 100.0) as decimal(11,6)) AS avg(ss_ext_wholesale_cost)#46, MakeDecimal(sum(UnscaledValue(ss_ext_wholesale_cost#8))#43,17,2) AS sum(ss_ext_wholesale_cost)#47]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#12, [id=#13]
ObjectHashAggregate (44)
+- Exchange (43)
   +- ObjectHashAggregate (42)
      +- * Project (41)
         +- * Filter (40)
            +- * ColumnarToRow (39)
               +- Scan parquet spark_catalog.default.household_demographics (38)


(38) Scan parquet spark_catalog.default.household_demographics
Output [2]: [hd_demo_sk#20, hd_dep_count#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_demo_sk), Or(Or(EqualTo(hd_dep_count,3),EqualTo(hd_dep_count,1)),EqualTo(hd_dep_count,1))]
ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int>

(39) ColumnarToRow [codegen id : 1]
Input [2]: [hd_demo_sk#20, hd_dep_count#21]

(40) Filter [codegen id : 1]
Input [2]: [hd_demo_sk#20, hd_dep_count#21]
Condition : (isnotnull(hd_demo_sk#20) AND (((hd_dep_count#21 = 3) OR (hd_dep_count#21 = 1)) OR (hd_dep_count#21 = 1)))

(41) Project [codegen id : 1]
Output [1]: [hd_demo_sk#20]
Input [2]: [hd_demo_sk#20, hd_dep_count#21]

(42) ObjectHashAggregate
Input [1]: [hd_demo_sk#20]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(hd_demo_sk#20, 42), 1952, 45226, 0, 0)]
Aggregate Attributes [1]: [buf#48]
Results [1]: [buf#49]

(43) Exchange
Input [1]: [buf#49]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=7]

(44) ObjectHashAggregate
Input [1]: [buf#49]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(hd_demo_sk#20, 42), 1952, 45226, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(hd_demo_sk#20, 42), 1952, 45226, 0, 0)#50]
Results [1]: [bloom_filter_agg(xxhash64(hd_demo_sk#20, 42), 1952, 45226, 0, 0)#50 AS bloomFilter#51]

Subquery:2 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#14, [id=#15]
ObjectHashAggregate (51)
+- Exchange (50)
   +- ObjectHashAggregate (49)
      +- * Project (48)
         +- * Filter (47)
            +- * ColumnarToRow (46)
               +- Scan parquet spark_catalog.default.customer_address (45)


(45) Scan parquet spark_catalog.default.customer_address
Output [3]: [ca_address_sk#22, ca_state#23, ca_country#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_state, [OH,TX]),In(ca_state, [KY,NM,OR])),In(ca_state, [MS,TX,VA]))]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(46) ColumnarToRow [codegen id : 1]
Input [3]: [ca_address_sk#22, ca_state#23, ca_country#24]

(47) Filter [codegen id : 1]
Input [3]: [ca_address_sk#22, ca_state#23, ca_country#24]
Condition : (((isnotnull(ca_country#24) AND (ca_country#24 = United States)) AND isnotnull(ca_address_sk#22)) AND ((ca_state#23 IN (TX,OH) OR ca_state#23 IN (OR,NM,KY)) OR ca_state#23 IN (VA,TX,MS)))

(48) Project [codegen id : 1]
Output [1]: [ca_address_sk#22]
Input [3]: [ca_address_sk#22, ca_state#23, ca_country#24]

(49) ObjectHashAggregate
Input [1]: [ca_address_sk#22]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(ca_address_sk#22, 42), 136816, 1959741, 0, 0)]
Aggregate Attributes [1]: [buf#52]
Results [1]: [buf#53]

(50) Exchange
Input [1]: [buf#53]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=8]

(51) ObjectHashAggregate
Input [1]: [buf#53]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(ca_address_sk#22, 42), 136816, 1959741, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(ca_address_sk#22, 42), 136816, 1959741, 0, 0)#54]
Results [1]: [bloom_filter_agg(xxhash64(ca_address_sk#22, 42), 136816, 1959741, 0, 0)#54 AS bloomFilter#55]

Subquery:3 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#10 IN dynamicpruning#11
BroadcastExchange (56)
+- * Project (55)
   +- * Filter (54)
      +- * ColumnarToRow (53)
         +- Scan parquet spark_catalog.default.date_dim (52)


(52) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#25, d_year#56]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(53) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#25, d_year#56]

(54) Filter [codegen id : 1]
Input [2]: [d_date_sk#25, d_year#56]
Condition : ((isnotnull(d_year#56) AND (d_year#56 = 2001)) AND isnotnull(d_date_sk#25))

(55) Project [codegen id : 1]
Output [1]: [d_date_sk#25]
Input [2]: [d_date_sk#25, d_year#56]

(56) BroadcastExchange
Input [1]: [d_date_sk#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]


