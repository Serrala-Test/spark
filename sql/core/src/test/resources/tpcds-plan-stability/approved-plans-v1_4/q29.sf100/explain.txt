== Physical Plan ==
TakeOrderedAndProject (63)
+- * HashAggregate (62)
   +- Exchange (61)
      +- * HashAggregate (60)
         +- * Project (59)
            +- * SortMergeJoin Inner (58)
               :- * Sort (45)
               :  +- Exchange (44)
               :     +- * Project (43)
               :        +- * SortMergeJoin Inner (42)
               :           :- * Sort (29)
               :           :  +- Exchange (28)
               :           :     +- * Project (27)
               :           :        +- * SortMergeJoin Inner (26)
               :           :           :- * Sort (19)
               :           :           :  +- Exchange (18)
               :           :           :     +- * Project (17)
               :           :           :        +- * BroadcastHashJoin Inner BuildRight (16)
               :           :           :           :- * Project (10)
               :           :           :           :  +- * BroadcastHashJoin Inner BuildRight (9)
               :           :           :           :     :- * Filter (3)
               :           :           :           :     :  +- * ColumnarToRow (2)
               :           :           :           :     :     +- Scan parquet default.store_sales (1)
               :           :           :           :     +- BroadcastExchange (8)
               :           :           :           :        +- * Project (7)
               :           :           :           :           +- * Filter (6)
               :           :           :           :              +- * ColumnarToRow (5)
               :           :           :           :                 +- Scan parquet default.date_dim (4)
               :           :           :           +- BroadcastExchange (15)
               :           :           :              +- * Project (14)
               :           :           :                 +- * Filter (13)
               :           :           :                    +- * ColumnarToRow (12)
               :           :           :                       +- Scan parquet default.store (11)
               :           :           +- * Sort (25)
               :           :              +- Exchange (24)
               :           :                 +- * Project (23)
               :           :                    +- * Filter (22)
               :           :                       +- * ColumnarToRow (21)
               :           :                          +- Scan parquet default.item (20)
               :           +- * Sort (41)
               :              +- Exchange (40)
               :                 +- * Project (39)
               :                    +- * BroadcastHashJoin Inner BuildRight (38)
               :                       :- * Filter (32)
               :                       :  +- * ColumnarToRow (31)
               :                       :     +- Scan parquet default.store_returns (30)
               :                       +- BroadcastExchange (37)
               :                          +- * Project (36)
               :                             +- * Filter (35)
               :                                +- * ColumnarToRow (34)
               :                                   +- Scan parquet default.date_dim (33)
               +- * Sort (57)
                  +- Exchange (56)
                     +- * Project (55)
                        +- * BroadcastHashJoin Inner BuildRight (54)
                           :- * Filter (48)
                           :  +- * ColumnarToRow (47)
                           :     +- Scan parquet default.catalog_sales (46)
                           +- BroadcastExchange (53)
                              +- * Project (52)
                                 +- * Filter (51)
                                    +- * ColumnarToRow (50)
                                       +- Scan parquet default.date_dim (49)


(1) Scan parquet default.store_sales
Output [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_quantity#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_quantity:int>

(2) ColumnarToRow [codegen id : 3]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_quantity#6]

(3) Filter [codegen id : 3]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_quantity#6]
Condition : ((((isnotnull(ss_customer_sk#3) AND isnotnull(ss_item_sk#2)) AND isnotnull(ss_ticket_number#5)) AND isnotnull(ss_sold_date_sk#1)) AND isnotnull(ss_store_sk#4))

(4) Scan parquet default.date_dim
Output [3]: [d_date_sk#7, d_year#8, d_moy#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,9), EqualTo(d_year,1999), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]

(6) Filter [codegen id : 1]
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]
Condition : ((((isnotnull(d_moy#9) AND isnotnull(d_year#8)) AND (d_moy#9 = 9)) AND (d_year#8 = 1999)) AND isnotnull(d_date_sk#7))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#7]
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]

(8) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#10]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#7]
Join condition: None

(10) Project [codegen id : 3]
Output [5]: [ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_quantity#6]
Input [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_quantity#6, d_date_sk#7]

(11) Scan parquet default.store
Output [3]: [s_store_sk#11, s_store_id#12, s_store_name#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>

(12) ColumnarToRow [codegen id : 2]
Input [3]: [s_store_sk#11, s_store_id#12, s_store_name#13]

(13) Filter [codegen id : 2]
Input [3]: [s_store_sk#11, s_store_id#12, s_store_name#13]
Condition : isnotnull(s_store_sk#11)

(14) Project [codegen id : 2]
Output [3]: [s_store_sk#11, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_store_id#12, 16, false, true) AS s_store_id#14, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_store_name#13, 50, false, true) AS s_store_name#15]
Input [3]: [s_store_sk#11, s_store_id#12, s_store_name#13]

(15) BroadcastExchange
Input [3]: [s_store_sk#11, s_store_id#14, s_store_name#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(16) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [s_store_sk#11]
Join condition: None

(17) Project [codegen id : 3]
Output [6]: [ss_item_sk#2, ss_customer_sk#3, ss_ticket_number#5, ss_quantity#6, s_store_id#14, s_store_name#15]
Input [8]: [ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_quantity#6, s_store_sk#11, s_store_id#14, s_store_name#15]

(18) Exchange
Input [6]: [ss_item_sk#2, ss_customer_sk#3, ss_ticket_number#5, ss_quantity#6, s_store_id#14, s_store_name#15]
Arguments: hashpartitioning(ss_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#17]

(19) Sort [codegen id : 4]
Input [6]: [ss_item_sk#2, ss_customer_sk#3, ss_ticket_number#5, ss_quantity#6, s_store_id#14, s_store_name#15]
Arguments: [ss_item_sk#2 ASC NULLS FIRST], false, 0

(20) Scan parquet default.item
Output [3]: [i_item_sk#18, i_item_id#19, i_item_desc#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>

(21) ColumnarToRow [codegen id : 5]
Input [3]: [i_item_sk#18, i_item_id#19, i_item_desc#20]

(22) Filter [codegen id : 5]
Input [3]: [i_item_sk#18, i_item_id#19, i_item_desc#20]
Condition : isnotnull(i_item_sk#18)

(23) Project [codegen id : 5]
Output [3]: [i_item_sk#18, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_item_id#19, 16, false, true) AS i_item_id#21, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, i_item_desc#20, 200, false, true) AS i_item_desc#22]
Input [3]: [i_item_sk#18, i_item_id#19, i_item_desc#20]

(24) Exchange
Input [3]: [i_item_sk#18, i_item_id#21, i_item_desc#22]
Arguments: hashpartitioning(i_item_sk#18, 5), ENSURE_REQUIREMENTS, [id=#23]

(25) Sort [codegen id : 6]
Input [3]: [i_item_sk#18, i_item_id#21, i_item_desc#22]
Arguments: [i_item_sk#18 ASC NULLS FIRST], false, 0

(26) SortMergeJoin [codegen id : 7]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#18]
Join condition: None

(27) Project [codegen id : 7]
Output [8]: [ss_item_sk#2, ss_customer_sk#3, ss_ticket_number#5, ss_quantity#6, s_store_id#14, s_store_name#15, i_item_id#21, i_item_desc#22]
Input [9]: [ss_item_sk#2, ss_customer_sk#3, ss_ticket_number#5, ss_quantity#6, s_store_id#14, s_store_name#15, i_item_sk#18, i_item_id#21, i_item_desc#22]

(28) Exchange
Input [8]: [ss_item_sk#2, ss_customer_sk#3, ss_ticket_number#5, ss_quantity#6, s_store_id#14, s_store_name#15, i_item_id#21, i_item_desc#22]
Arguments: hashpartitioning(cast(ss_customer_sk#3 as bigint), cast(ss_item_sk#2 as bigint), cast(ss_ticket_number#5 as bigint), 5), ENSURE_REQUIREMENTS, [id=#24]

(29) Sort [codegen id : 8]
Input [8]: [ss_item_sk#2, ss_customer_sk#3, ss_ticket_number#5, ss_quantity#6, s_store_id#14, s_store_name#15, i_item_id#21, i_item_desc#22]
Arguments: [cast(ss_customer_sk#3 as bigint) ASC NULLS FIRST, cast(ss_item_sk#2 as bigint) ASC NULLS FIRST, cast(ss_ticket_number#5 as bigint) ASC NULLS FIRST], false, 0

(30) Scan parquet default.store_returns
Output [5]: [sr_returned_date_sk#25, sr_item_sk#26, sr_customer_sk#27, sr_ticket_number#28, sr_return_quantity#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number), IsNotNull(sr_returned_date_sk)]
ReadSchema: struct<sr_returned_date_sk:bigint,sr_item_sk:bigint,sr_customer_sk:bigint,sr_ticket_number:bigint,sr_return_quantity:int>

(31) ColumnarToRow [codegen id : 10]
Input [5]: [sr_returned_date_sk#25, sr_item_sk#26, sr_customer_sk#27, sr_ticket_number#28, sr_return_quantity#29]

(32) Filter [codegen id : 10]
Input [5]: [sr_returned_date_sk#25, sr_item_sk#26, sr_customer_sk#27, sr_ticket_number#28, sr_return_quantity#29]
Condition : (((isnotnull(sr_customer_sk#27) AND isnotnull(sr_item_sk#26)) AND isnotnull(sr_ticket_number#28)) AND isnotnull(sr_returned_date_sk#25))

(33) Scan parquet default.date_dim
Output [3]: [d_date_sk#30, d_year#31, d_moy#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,9), LessThanOrEqual(d_moy,12), EqualTo(d_year,1999), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(34) ColumnarToRow [codegen id : 9]
Input [3]: [d_date_sk#30, d_year#31, d_moy#32]

(35) Filter [codegen id : 9]
Input [3]: [d_date_sk#30, d_year#31, d_moy#32]
Condition : (((((isnotnull(d_moy#32) AND isnotnull(d_year#31)) AND (d_moy#32 >= 9)) AND (d_moy#32 <= 12)) AND (d_year#31 = 1999)) AND isnotnull(d_date_sk#30))

(36) Project [codegen id : 9]
Output [1]: [d_date_sk#30]
Input [3]: [d_date_sk#30, d_year#31, d_moy#32]

(37) BroadcastExchange
Input [1]: [d_date_sk#30]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#33]

(38) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [sr_returned_date_sk#25]
Right keys [1]: [cast(d_date_sk#30 as bigint)]
Join condition: None

(39) Project [codegen id : 10]
Output [4]: [sr_item_sk#26, sr_customer_sk#27, sr_ticket_number#28, sr_return_quantity#29]
Input [6]: [sr_returned_date_sk#25, sr_item_sk#26, sr_customer_sk#27, sr_ticket_number#28, sr_return_quantity#29, d_date_sk#30]

(40) Exchange
Input [4]: [sr_item_sk#26, sr_customer_sk#27, sr_ticket_number#28, sr_return_quantity#29]
Arguments: hashpartitioning(sr_customer_sk#27, sr_item_sk#26, sr_ticket_number#28, 5), ENSURE_REQUIREMENTS, [id=#34]

(41) Sort [codegen id : 11]
Input [4]: [sr_item_sk#26, sr_customer_sk#27, sr_ticket_number#28, sr_return_quantity#29]
Arguments: [sr_customer_sk#27 ASC NULLS FIRST, sr_item_sk#26 ASC NULLS FIRST, sr_ticket_number#28 ASC NULLS FIRST], false, 0

(42) SortMergeJoin [codegen id : 12]
Left keys [3]: [cast(ss_customer_sk#3 as bigint), cast(ss_item_sk#2 as bigint), cast(ss_ticket_number#5 as bigint)]
Right keys [3]: [sr_customer_sk#27, sr_item_sk#26, sr_ticket_number#28]
Join condition: None

(43) Project [codegen id : 12]
Output [8]: [ss_quantity#6, s_store_id#14, s_store_name#15, i_item_id#21, i_item_desc#22, sr_item_sk#26, sr_customer_sk#27, sr_return_quantity#29]
Input [12]: [ss_item_sk#2, ss_customer_sk#3, ss_ticket_number#5, ss_quantity#6, s_store_id#14, s_store_name#15, i_item_id#21, i_item_desc#22, sr_item_sk#26, sr_customer_sk#27, sr_ticket_number#28, sr_return_quantity#29]

(44) Exchange
Input [8]: [ss_quantity#6, s_store_id#14, s_store_name#15, i_item_id#21, i_item_desc#22, sr_item_sk#26, sr_customer_sk#27, sr_return_quantity#29]
Arguments: hashpartitioning(sr_customer_sk#27, sr_item_sk#26, 5), ENSURE_REQUIREMENTS, [id=#35]

(45) Sort [codegen id : 13]
Input [8]: [ss_quantity#6, s_store_id#14, s_store_name#15, i_item_id#21, i_item_desc#22, sr_item_sk#26, sr_customer_sk#27, sr_return_quantity#29]
Arguments: [sr_customer_sk#27 ASC NULLS FIRST, sr_item_sk#26 ASC NULLS FIRST], false, 0

(46) Scan parquet default.catalog_sales
Output [4]: [cs_sold_date_sk#36, cs_bill_customer_sk#37, cs_item_sk#38, cs_quantity#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int>

(47) ColumnarToRow [codegen id : 15]
Input [4]: [cs_sold_date_sk#36, cs_bill_customer_sk#37, cs_item_sk#38, cs_quantity#39]

(48) Filter [codegen id : 15]
Input [4]: [cs_sold_date_sk#36, cs_bill_customer_sk#37, cs_item_sk#38, cs_quantity#39]
Condition : ((isnotnull(cs_bill_customer_sk#37) AND isnotnull(cs_item_sk#38)) AND isnotnull(cs_sold_date_sk#36))

(49) Scan parquet default.date_dim
Output [2]: [d_date_sk#40, d_year#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(50) ColumnarToRow [codegen id : 14]
Input [2]: [d_date_sk#40, d_year#41]

(51) Filter [codegen id : 14]
Input [2]: [d_date_sk#40, d_year#41]
Condition : (d_year#41 IN (1999,2000,2001) AND isnotnull(d_date_sk#40))

(52) Project [codegen id : 14]
Output [1]: [d_date_sk#40]
Input [2]: [d_date_sk#40, d_year#41]

(53) BroadcastExchange
Input [1]: [d_date_sk#40]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#42]

(54) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [cs_sold_date_sk#36]
Right keys [1]: [d_date_sk#40]
Join condition: None

(55) Project [codegen id : 15]
Output [3]: [cs_bill_customer_sk#37, cs_item_sk#38, cs_quantity#39]
Input [5]: [cs_sold_date_sk#36, cs_bill_customer_sk#37, cs_item_sk#38, cs_quantity#39, d_date_sk#40]

(56) Exchange
Input [3]: [cs_bill_customer_sk#37, cs_item_sk#38, cs_quantity#39]
Arguments: hashpartitioning(cast(cs_bill_customer_sk#37 as bigint), cast(cs_item_sk#38 as bigint), 5), ENSURE_REQUIREMENTS, [id=#43]

(57) Sort [codegen id : 16]
Input [3]: [cs_bill_customer_sk#37, cs_item_sk#38, cs_quantity#39]
Arguments: [cast(cs_bill_customer_sk#37 as bigint) ASC NULLS FIRST, cast(cs_item_sk#38 as bigint) ASC NULLS FIRST], false, 0

(58) SortMergeJoin [codegen id : 17]
Left keys [2]: [sr_customer_sk#27, sr_item_sk#26]
Right keys [2]: [cast(cs_bill_customer_sk#37 as bigint), cast(cs_item_sk#38 as bigint)]
Join condition: None

(59) Project [codegen id : 17]
Output [7]: [ss_quantity#6, sr_return_quantity#29, cs_quantity#39, s_store_id#14, s_store_name#15, i_item_id#21, i_item_desc#22]
Input [11]: [ss_quantity#6, s_store_id#14, s_store_name#15, i_item_id#21, i_item_desc#22, sr_item_sk#26, sr_customer_sk#27, sr_return_quantity#29, cs_bill_customer_sk#37, cs_item_sk#38, cs_quantity#39]

(60) HashAggregate [codegen id : 17]
Input [7]: [ss_quantity#6, sr_return_quantity#29, cs_quantity#39, s_store_id#14, s_store_name#15, i_item_id#21, i_item_desc#22]
Keys [4]: [i_item_id#21, i_item_desc#22, s_store_id#14, s_store_name#15]
Functions [3]: [partial_sum(cast(ss_quantity#6 as bigint)), partial_sum(cast(sr_return_quantity#29 as bigint)), partial_sum(cast(cs_quantity#39 as bigint))]
Aggregate Attributes [3]: [sum#44, sum#45, sum#46]
Results [7]: [i_item_id#21, i_item_desc#22, s_store_id#14, s_store_name#15, sum#47, sum#48, sum#49]

(61) Exchange
Input [7]: [i_item_id#21, i_item_desc#22, s_store_id#14, s_store_name#15, sum#47, sum#48, sum#49]
Arguments: hashpartitioning(i_item_id#21, i_item_desc#22, s_store_id#14, s_store_name#15, 5), ENSURE_REQUIREMENTS, [id=#50]

(62) HashAggregate [codegen id : 18]
Input [7]: [i_item_id#21, i_item_desc#22, s_store_id#14, s_store_name#15, sum#47, sum#48, sum#49]
Keys [4]: [i_item_id#21, i_item_desc#22, s_store_id#14, s_store_name#15]
Functions [3]: [sum(cast(ss_quantity#6 as bigint)), sum(cast(sr_return_quantity#29 as bigint)), sum(cast(cs_quantity#39 as bigint))]
Aggregate Attributes [3]: [sum(cast(ss_quantity#6 as bigint))#51, sum(cast(sr_return_quantity#29 as bigint))#52, sum(cast(cs_quantity#39 as bigint))#53]
Results [7]: [i_item_id#21, i_item_desc#22, s_store_id#14, s_store_name#15, sum(cast(ss_quantity#6 as bigint))#51 AS store_sales_quantity#54, sum(cast(sr_return_quantity#29 as bigint))#52 AS store_returns_quantity#55, sum(cast(cs_quantity#39 as bigint))#53 AS catalog_sales_quantity#56]

(63) TakeOrderedAndProject
Input [7]: [i_item_id#21, i_item_desc#22, s_store_id#14, s_store_name#15, store_sales_quantity#54, store_returns_quantity#55, catalog_sales_quantity#56]
Arguments: 100, [i_item_id#21 ASC NULLS FIRST, i_item_desc#22 ASC NULLS FIRST, s_store_id#14 ASC NULLS FIRST, s_store_name#15 ASC NULLS FIRST], [i_item_id#21, i_item_desc#22, s_store_id#14, s_store_name#15, store_sales_quantity#54, store_returns_quantity#55, catalog_sales_quantity#56]

