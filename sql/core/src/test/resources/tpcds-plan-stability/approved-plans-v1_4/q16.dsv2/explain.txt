== Physical Plan ==
* HashAggregate (39)
+- Exchange (38)
   +- * HashAggregate (37)
      +- * HashAggregate (36)
         +- * HashAggregate (35)
            +- * Project (34)
               +- * BroadcastHashJoin Inner BuildRight (33)
                  :- * Project (28)
                  :  +- * BroadcastHashJoin Inner BuildRight (27)
                  :     :- * Project (22)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (21)
                  :     :     :- * SortMergeJoin LeftAnti (16)
                  :     :     :  :- * Project (11)
                  :     :     :  :  +- * SortMergeJoin LeftSemi (10)
                  :     :     :  :     :- * Sort (5)
                  :     :     :  :     :  +- Exchange (4)
                  :     :     :  :     :     +- * Project (3)
                  :     :     :  :     :        +- * Filter (2)
                  :     :     :  :     :           +- BatchScan default.catalog_sales (1)
                  :     :     :  :     +- * Sort (9)
                  :     :     :  :        +- Exchange (8)
                  :     :     :  :           +- * Project (7)
                  :     :     :  :              +- BatchScan default.catalog_sales (6)
                  :     :     :  +- * Sort (15)
                  :     :     :     +- Exchange (14)
                  :     :     :        +- * Project (13)
                  :     :     :           +- BatchScan default.catalog_returns (12)
                  :     :     +- BroadcastExchange (20)
                  :     :        +- * Project (19)
                  :     :           +- * Filter (18)
                  :     :              +- BatchScan default.date_dim (17)
                  :     +- BroadcastExchange (26)
                  :        +- * Project (25)
                  :           +- * Filter (24)
                  :              +- BatchScan default.customer_address (23)
                  +- BroadcastExchange (32)
                     +- * Project (31)
                        +- * Filter (30)
                           +- BatchScan default.call_center (29)


(1) BatchScan default.catalog_sales
Output [7]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_warehouse_sk#4, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
DataFilters: [isnotnull(cs_ship_date_sk#1), isnotnull(cs_ship_addr_sk#2), isnotnull(cs_call_center_sk#3)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_ship_date_sk), IsNotNull(cs_ship_addr_sk), IsNotNull(cs_call_center_sk)]
ReadSchema: struct<cs_ship_date_sk:int,cs_ship_addr_sk:int,cs_call_center_sk:int,cs_warehouse_sk:int,cs_order_number:int,cs_ext_ship_cost:decimal(7,2),cs_net_profit:decimal(7,2)>

(2) Filter [codegen id : 1]
Input [7]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_warehouse_sk#4, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Condition : (((((isnotnull(cs_ship_date_sk#1) AND isnotnull(cs_ship_addr_sk#2)) AND isnotnull(cs_call_center_sk#3)) AND might_contain(Subquery scalar-subquery#8, [id=#9], xxhash64(cs_ship_date_sk#1, 42))) AND might_contain(Subquery scalar-subquery#10, [id=#11], xxhash64(cs_ship_addr_sk#2, 42))) AND might_contain(Subquery scalar-subquery#12, [id=#13], xxhash64(cs_call_center_sk#3, 42)))

(3) Project [codegen id : 1]
Output [7]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_warehouse_sk#4, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Input [7]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_warehouse_sk#4, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]

(4) Exchange
Input [7]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_warehouse_sk#4, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Arguments: hashpartitioning(cs_order_number#5, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [7]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_warehouse_sk#4, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Arguments: [cs_order_number#5 ASC NULLS FIRST], false, 0

(6) BatchScan default.catalog_sales
Output [34]: [cs_sold_time_sk#14, cs_ship_date_sk#15, cs_bill_customer_sk#16, cs_bill_cdemo_sk#17, cs_bill_hdemo_sk#18, cs_bill_addr_sk#19, cs_ship_customer_sk#20, cs_ship_cdemo_sk#21, cs_ship_hdemo_sk#22, cs_ship_addr_sk#23, cs_call_center_sk#24, cs_catalog_page_sk#25, cs_ship_mode_sk#26, cs_warehouse_sk#27, cs_item_sk#28, cs_promo_sk#29, cs_order_number#30, cs_quantity#31, cs_wholesale_cost#32, cs_list_price#33, cs_sales_price#34, cs_ext_discount_amt#35, cs_ext_sales_price#36, cs_ext_wholesale_cost#37, cs_ext_list_price#38, cs_ext_tax#39, cs_coupon_amt#40, cs_ext_ship_cost#41, cs_net_paid#42, cs_net_paid_inc_tax#43, cs_net_paid_inc_ship#44, cs_net_paid_inc_ship_tax#45, cs_net_profit#46, cs_sold_date_sk#47]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
ReadSchema: struct<cs_sold_time_sk:int,cs_ship_date_sk:int,cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_bill_hdemo_sk:int,cs_bill_addr_sk:int,cs_ship_customer_sk:int,cs_ship_cdemo_sk:int,cs_ship_hdemo_sk:int,cs_ship_addr_sk:int,cs_call_center_sk:int,cs_catalog_page_sk:int,cs_ship_mode_sk:int,cs_warehouse_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_quantity:int,cs_wholesale_cost:decimal(7,2),cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2),cs_ext_tax:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_ext_ship_cost:decimal(7,2),cs_net_paid:decimal(7,2),cs_net_paid_inc_tax:decimal(7,2),cs_net_paid_inc_ship:decimal(7,2),cs_net_paid_inc_ship_tax:decimal(7,2),cs_net_profit:decimal(7,2)>

(7) Project [codegen id : 3]
Output [2]: [cs_warehouse_sk#27, cs_order_number#30]
Input [34]: [cs_sold_time_sk#14, cs_ship_date_sk#15, cs_bill_customer_sk#16, cs_bill_cdemo_sk#17, cs_bill_hdemo_sk#18, cs_bill_addr_sk#19, cs_ship_customer_sk#20, cs_ship_cdemo_sk#21, cs_ship_hdemo_sk#22, cs_ship_addr_sk#23, cs_call_center_sk#24, cs_catalog_page_sk#25, cs_ship_mode_sk#26, cs_warehouse_sk#27, cs_item_sk#28, cs_promo_sk#29, cs_order_number#30, cs_quantity#31, cs_wholesale_cost#32, cs_list_price#33, cs_sales_price#34, cs_ext_discount_amt#35, cs_ext_sales_price#36, cs_ext_wholesale_cost#37, cs_ext_list_price#38, cs_ext_tax#39, cs_coupon_amt#40, cs_ext_ship_cost#41, cs_net_paid#42, cs_net_paid_inc_tax#43, cs_net_paid_inc_ship#44, cs_net_paid_inc_ship_tax#45, cs_net_profit#46, cs_sold_date_sk#47]

(8) Exchange
Input [2]: [cs_warehouse_sk#27, cs_order_number#30]
Arguments: hashpartitioning(cs_order_number#30, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(9) Sort [codegen id : 4]
Input [2]: [cs_warehouse_sk#27, cs_order_number#30]
Arguments: [cs_order_number#30 ASC NULLS FIRST], false, 0

(10) SortMergeJoin [codegen id : 5]
Left keys [1]: [cs_order_number#5]
Right keys [1]: [cs_order_number#30]
Join type: LeftSemi
Join condition: NOT (cs_warehouse_sk#4 = cs_warehouse_sk#27)

(11) Project [codegen id : 5]
Output [6]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Input [7]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_warehouse_sk#4, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]

(12) BatchScan default.catalog_returns
Output [27]: [cr_returned_time_sk#48, cr_item_sk#49, cr_refunded_customer_sk#50, cr_refunded_cdemo_sk#51, cr_refunded_hdemo_sk#52, cr_refunded_addr_sk#53, cr_returning_customer_sk#54, cr_returning_cdemo_sk#55, cr_returning_hdemo_sk#56, cr_returning_addr_sk#57, cr_call_center_sk#58, cr_catalog_page_sk#59, cr_ship_mode_sk#60, cr_warehouse_sk#61, cr_reason_sk#62, cr_order_number#63, cr_return_quantity#64, cr_return_amount#65, cr_return_tax#66, cr_return_amt_inc_tax#67, cr_fee#68, cr_return_ship_cost#69, cr_refunded_cash#70, cr_reversed_charge#71, cr_store_credit#72, cr_net_loss#73, cr_returned_date_sk#74]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
ReadSchema: struct<cr_returned_time_sk:int,cr_item_sk:int,cr_refunded_customer_sk:int,cr_refunded_cdemo_sk:int,cr_refunded_hdemo_sk:int,cr_refunded_addr_sk:int,cr_returning_customer_sk:int,cr_returning_cdemo_sk:int,cr_returning_hdemo_sk:int,cr_returning_addr_sk:int,cr_call_center_sk:int,cr_catalog_page_sk:int,cr_ship_mode_sk:int,cr_warehouse_sk:int,cr_reason_sk:int,cr_order_number:int,cr_return_quantity:int,cr_return_amount:decimal(7,2),cr_return_tax:decimal(7,2),cr_return_amt_inc_tax:decimal(7,2),cr_fee:decimal(7,2),cr_return_ship_cost:decimal(7,2),cr_refunded_cash:decimal(7,2),cr_reversed_charge:decimal(7,2),cr_store_credit:decimal(7,2),cr_net_loss:decimal(7,2)>

(13) Project [codegen id : 6]
Output [1]: [cr_order_number#63]
Input [27]: [cr_returned_time_sk#48, cr_item_sk#49, cr_refunded_customer_sk#50, cr_refunded_cdemo_sk#51, cr_refunded_hdemo_sk#52, cr_refunded_addr_sk#53, cr_returning_customer_sk#54, cr_returning_cdemo_sk#55, cr_returning_hdemo_sk#56, cr_returning_addr_sk#57, cr_call_center_sk#58, cr_catalog_page_sk#59, cr_ship_mode_sk#60, cr_warehouse_sk#61, cr_reason_sk#62, cr_order_number#63, cr_return_quantity#64, cr_return_amount#65, cr_return_tax#66, cr_return_amt_inc_tax#67, cr_fee#68, cr_return_ship_cost#69, cr_refunded_cash#70, cr_reversed_charge#71, cr_store_credit#72, cr_net_loss#73, cr_returned_date_sk#74]

(14) Exchange
Input [1]: [cr_order_number#63]
Arguments: hashpartitioning(cr_order_number#63, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(15) Sort [codegen id : 7]
Input [1]: [cr_order_number#63]
Arguments: [cr_order_number#63 ASC NULLS FIRST], false, 0

(16) SortMergeJoin [codegen id : 11]
Left keys [1]: [cs_order_number#5]
Right keys [1]: [cr_order_number#63]
Join type: LeftAnti
Join condition: None

(17) BatchScan default.date_dim
Output [2]: [d_date_sk#75, d_date#76]
DataFilters: [isnotnull(d_date#76), (d_date#76 >= 2002-02-01), (d_date#76 <= 2002-04-02), isnotnull(d_date_sk#75)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2002-02-01), LessThanOrEqual(d_date,2002-04-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(18) Filter [codegen id : 8]
Input [2]: [d_date_sk#75, d_date#76]
Condition : (((isnotnull(d_date#76) AND (d_date#76 >= 2002-02-01)) AND (d_date#76 <= 2002-04-02)) AND isnotnull(d_date_sk#75))

(19) Project [codegen id : 8]
Output [1]: [d_date_sk#75]
Input [2]: [d_date_sk#75, d_date#76]

(20) BroadcastExchange
Input [1]: [d_date_sk#75]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(21) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [cs_ship_date_sk#1]
Right keys [1]: [d_date_sk#75]
Join type: Inner
Join condition: None

(22) Project [codegen id : 11]
Output [5]: [cs_ship_addr_sk#2, cs_call_center_sk#3, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Input [7]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7, d_date_sk#75]

(23) BatchScan default.customer_address
Output [2]: [ca_address_sk#77, ca_state#78]
DataFilters: [isnotnull(ca_state#78), (ca_state#78 = GA), isnotnull(ca_address_sk#77)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(24) Filter [codegen id : 9]
Input [2]: [ca_address_sk#77, ca_state#78]
Condition : ((isnotnull(ca_state#78) AND (ca_state#78 = GA)) AND isnotnull(ca_address_sk#77))

(25) Project [codegen id : 9]
Output [1]: [ca_address_sk#77]
Input [2]: [ca_address_sk#77, ca_state#78]

(26) BroadcastExchange
Input [1]: [ca_address_sk#77]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(27) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [cs_ship_addr_sk#2]
Right keys [1]: [ca_address_sk#77]
Join type: Inner
Join condition: None

(28) Project [codegen id : 11]
Output [4]: [cs_call_center_sk#3, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Input [6]: [cs_ship_addr_sk#2, cs_call_center_sk#3, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7, ca_address_sk#77]

(29) BatchScan default.call_center
Output [2]: [cc_call_center_sk#79, cc_county#80]
DataFilters: [isnotnull(cc_county#80), (cc_county#80 = Williamson County), isnotnull(cc_call_center_sk#79)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/call_center]
PushedFilters: [IsNotNull(cc_county), EqualTo(cc_county,Williamson County), IsNotNull(cc_call_center_sk)]
ReadSchema: struct<cc_call_center_sk:int,cc_county:string>

(30) Filter [codegen id : 10]
Input [2]: [cc_call_center_sk#79, cc_county#80]
Condition : ((isnotnull(cc_county#80) AND (cc_county#80 = Williamson County)) AND isnotnull(cc_call_center_sk#79))

(31) Project [codegen id : 10]
Output [1]: [cc_call_center_sk#79]
Input [2]: [cc_call_center_sk#79, cc_county#80]

(32) BroadcastExchange
Input [1]: [cc_call_center_sk#79]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

(33) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [cs_call_center_sk#3]
Right keys [1]: [cc_call_center_sk#79]
Join type: Inner
Join condition: None

(34) Project [codegen id : 11]
Output [3]: [cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Input [5]: [cs_call_center_sk#3, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7, cc_call_center_sk#79]

(35) HashAggregate [codegen id : 11]
Input [3]: [cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Keys [1]: [cs_order_number#5]
Functions [2]: [partial_sum(UnscaledValue(cs_ext_ship_cost#6)), partial_sum(UnscaledValue(cs_net_profit#7))]
Aggregate Attributes [2]: [sum(UnscaledValue(cs_ext_ship_cost#6))#81, sum(UnscaledValue(cs_net_profit#7))#82]
Results [3]: [cs_order_number#5, sum#83, sum#84]

(36) HashAggregate [codegen id : 11]
Input [3]: [cs_order_number#5, sum#83, sum#84]
Keys [1]: [cs_order_number#5]
Functions [2]: [merge_sum(UnscaledValue(cs_ext_ship_cost#6)), merge_sum(UnscaledValue(cs_net_profit#7))]
Aggregate Attributes [2]: [sum(UnscaledValue(cs_ext_ship_cost#6))#81, sum(UnscaledValue(cs_net_profit#7))#82]
Results [3]: [cs_order_number#5, sum#83, sum#84]

(37) HashAggregate [codegen id : 11]
Input [3]: [cs_order_number#5, sum#83, sum#84]
Keys: []
Functions [3]: [merge_sum(UnscaledValue(cs_ext_ship_cost#6)), merge_sum(UnscaledValue(cs_net_profit#7)), partial_count(distinct cs_order_number#5)]
Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_ship_cost#6))#81, sum(UnscaledValue(cs_net_profit#7))#82, count(cs_order_number#5)#85]
Results [3]: [sum#83, sum#84, count#86]

(38) Exchange
Input [3]: [sum#83, sum#84, count#86]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=7]

(39) HashAggregate [codegen id : 12]
Input [3]: [sum#83, sum#84, count#86]
Keys: []
Functions [3]: [sum(UnscaledValue(cs_ext_ship_cost#6)), sum(UnscaledValue(cs_net_profit#7)), count(distinct cs_order_number#5)]
Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_ship_cost#6))#81, sum(UnscaledValue(cs_net_profit#7))#82, count(cs_order_number#5)#85]
Results [3]: [count(cs_order_number#5)#85 AS order count #87, MakeDecimal(sum(UnscaledValue(cs_ext_ship_cost#6))#81,17,2) AS total shipping cost #88, MakeDecimal(sum(UnscaledValue(cs_net_profit#7))#82,17,2) AS total net profit #89]

===== Subqueries =====

Subquery:1 Hosting operator id = 2 Hosting Expression = Subquery scalar-subquery#8, [id=#9]
ObjectHashAggregate (45)
+- Exchange (44)
   +- ObjectHashAggregate (43)
      +- * Project (42)
         +- * Filter (41)
            +- BatchScan default.date_dim (40)


(40) BatchScan default.date_dim
Output [2]: [d_date_sk#75, d_date#76]
DataFilters: [isnotnull(d_date#76), (d_date#76 >= 2002-02-01), (d_date#76 <= 2002-04-02), isnotnull(d_date_sk#75)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2002-02-01), LessThanOrEqual(d_date,2002-04-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(41) Filter [codegen id : 1]
Input [2]: [d_date_sk#75, d_date#76]
Condition : (((isnotnull(d_date#76) AND (d_date#76 >= 2002-02-01)) AND (d_date#76 <= 2002-04-02)) AND isnotnull(d_date_sk#75))

(42) Project [codegen id : 1]
Output [1]: [d_date_sk#75]
Input [2]: [d_date_sk#75, d_date#76]

(43) ObjectHashAggregate
Input [1]: [d_date_sk#75]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(d_date_sk#75, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#90]
Results [1]: [buf#91]

(44) Exchange
Input [1]: [buf#91]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=8]

(45) ObjectHashAggregate
Input [1]: [buf#91]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(d_date_sk#75, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(d_date_sk#75, 42), 1000000, 8388608, 0, 0)#92]
Results [1]: [bloom_filter_agg(xxhash64(d_date_sk#75, 42), 1000000, 8388608, 0, 0)#92 AS bloomFilter#93]

Subquery:2 Hosting operator id = 2 Hosting Expression = Subquery scalar-subquery#10, [id=#11]
ObjectHashAggregate (51)
+- Exchange (50)
   +- ObjectHashAggregate (49)
      +- * Project (48)
         +- * Filter (47)
            +- BatchScan default.customer_address (46)


(46) BatchScan default.customer_address
Output [2]: [ca_address_sk#77, ca_state#78]
DataFilters: [isnotnull(ca_state#78), (ca_state#78 = GA), isnotnull(ca_address_sk#77)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(47) Filter [codegen id : 1]
Input [2]: [ca_address_sk#77, ca_state#78]
Condition : ((isnotnull(ca_state#78) AND (ca_state#78 = GA)) AND isnotnull(ca_address_sk#77))

(48) Project [codegen id : 1]
Output [1]: [ca_address_sk#77]
Input [2]: [ca_address_sk#77, ca_state#78]

(49) ObjectHashAggregate
Input [1]: [ca_address_sk#77]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(ca_address_sk#77, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#94]
Results [1]: [buf#95]

(50) Exchange
Input [1]: [buf#95]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=9]

(51) ObjectHashAggregate
Input [1]: [buf#95]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(ca_address_sk#77, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(ca_address_sk#77, 42), 1000000, 8388608, 0, 0)#96]
Results [1]: [bloom_filter_agg(xxhash64(ca_address_sk#77, 42), 1000000, 8388608, 0, 0)#96 AS bloomFilter#97]

Subquery:3 Hosting operator id = 2 Hosting Expression = Subquery scalar-subquery#12, [id=#13]
ObjectHashAggregate (57)
+- Exchange (56)
   +- ObjectHashAggregate (55)
      +- * Project (54)
         +- * Filter (53)
            +- BatchScan default.call_center (52)


(52) BatchScan default.call_center
Output [2]: [cc_call_center_sk#79, cc_county#80]
DataFilters: [isnotnull(cc_county#80), (cc_county#80 = Williamson County), isnotnull(cc_call_center_sk#79)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/call_center]
PushedFilters: [IsNotNull(cc_county), EqualTo(cc_county,Williamson County), IsNotNull(cc_call_center_sk)]
ReadSchema: struct<cc_call_center_sk:int,cc_county:string>

(53) Filter [codegen id : 1]
Input [2]: [cc_call_center_sk#79, cc_county#80]
Condition : ((isnotnull(cc_county#80) AND (cc_county#80 = Williamson County)) AND isnotnull(cc_call_center_sk#79))

(54) Project [codegen id : 1]
Output [1]: [cc_call_center_sk#79]
Input [2]: [cc_call_center_sk#79, cc_county#80]

(55) ObjectHashAggregate
Input [1]: [cc_call_center_sk#79]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(cc_call_center_sk#79, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#98]
Results [1]: [buf#99]

(56) Exchange
Input [1]: [buf#99]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=10]

(57) ObjectHashAggregate
Input [1]: [buf#99]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(cc_call_center_sk#79, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(cc_call_center_sk#79, 42), 1000000, 8388608, 0, 0)#100]
Results [1]: [bloom_filter_agg(xxhash64(cc_call_center_sk#79, 42), 1000000, 8388608, 0, 0)#100 AS bloomFilter#101]


