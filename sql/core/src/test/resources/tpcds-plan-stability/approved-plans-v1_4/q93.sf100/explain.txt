== Physical Plan ==
TakeOrderedAndProject (22)
+- * HashAggregate (21)
   +- Exchange (20)
      +- * HashAggregate (19)
         +- * Project (18)
            +- * BroadcastHashJoin Inner BuildRight (17)
               :- * Project (11)
               :  +- * SortMergeJoin Inner (10)
               :     :- * Sort (4)
               :     :  +- Exchange (3)
               :     :     +- * ColumnarToRow (2)
               :     :        +- Scan parquet default.store_sales (1)
               :     +- * Sort (9)
               :        +- Exchange (8)
               :           +- * Filter (7)
               :              +- * ColumnarToRow (6)
               :                 +- Scan parquet default.store_returns (5)
               +- BroadcastExchange (16)
                  +- * Project (15)
                     +- * Filter (14)
                        +- * ColumnarToRow (13)
                           +- Scan parquet default.reason (12)


(1) Scan parquet default.store_sales
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_sales_price#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_ticket_number:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_sales_price#5]

(3) Exchange
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_sales_price#5]
Arguments: hashpartitioning(cast(ss_item_sk#1 as bigint), cast(ss_ticket_number#3 as bigint), 5), ENSURE_REQUIREMENTS, [id=#6]

(4) Sort [codegen id : 2]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_sales_price#5]
Arguments: [cast(ss_item_sk#1 as bigint) ASC NULLS FIRST, cast(ss_ticket_number#3 as bigint) ASC NULLS FIRST], false, 0

(5) Scan parquet default.store_returns
Output [4]: [sr_item_sk#7, sr_reason_sk#8, sr_ticket_number#9, sr_return_quantity#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number), IsNotNull(sr_reason_sk)]
ReadSchema: struct<sr_item_sk:bigint,sr_reason_sk:bigint,sr_ticket_number:bigint,sr_return_quantity:int>

(6) ColumnarToRow [codegen id : 3]
Input [4]: [sr_item_sk#7, sr_reason_sk#8, sr_ticket_number#9, sr_return_quantity#10]

(7) Filter [codegen id : 3]
Input [4]: [sr_item_sk#7, sr_reason_sk#8, sr_ticket_number#9, sr_return_quantity#10]
Condition : ((isnotnull(sr_item_sk#7) AND isnotnull(sr_ticket_number#9)) AND isnotnull(sr_reason_sk#8))

(8) Exchange
Input [4]: [sr_item_sk#7, sr_reason_sk#8, sr_ticket_number#9, sr_return_quantity#10]
Arguments: hashpartitioning(sr_item_sk#7, sr_ticket_number#9, 5), ENSURE_REQUIREMENTS, [id=#11]

(9) Sort [codegen id : 4]
Input [4]: [sr_item_sk#7, sr_reason_sk#8, sr_ticket_number#9, sr_return_quantity#10]
Arguments: [sr_item_sk#7 ASC NULLS FIRST, sr_ticket_number#9 ASC NULLS FIRST], false, 0

(10) SortMergeJoin [codegen id : 6]
Left keys [2]: [cast(ss_item_sk#1 as bigint), cast(ss_ticket_number#3 as bigint)]
Right keys [2]: [sr_item_sk#7, sr_ticket_number#9]
Join condition: None

(11) Project [codegen id : 6]
Output [5]: [ss_customer_sk#2, ss_quantity#4, ss_sales_price#5, sr_reason_sk#8, sr_return_quantity#10]
Input [9]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_sales_price#5, sr_item_sk#7, sr_reason_sk#8, sr_ticket_number#9, sr_return_quantity#10]

(12) Scan parquet default.reason
Output [2]: [r_reason_sk#12, r_reason_desc#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/reason]
PushedFilters: [IsNotNull(r_reason_desc), EqualTo(r_reason_desc,reason 28), IsNotNull(r_reason_sk)]
ReadSchema: struct<r_reason_sk:int,r_reason_desc:string>

(13) ColumnarToRow [codegen id : 5]
Input [2]: [r_reason_sk#12, r_reason_desc#13]

(14) Filter [codegen id : 5]
Input [2]: [r_reason_sk#12, r_reason_desc#13]
Condition : ((isnotnull(r_reason_desc#13) AND (r_reason_desc#13 = reason 28)) AND isnotnull(r_reason_sk#12))

(15) Project [codegen id : 5]
Output [1]: [r_reason_sk#12]
Input [2]: [r_reason_sk#12, r_reason_desc#13]

(16) BroadcastExchange
Input [1]: [r_reason_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(17) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [sr_reason_sk#8]
Right keys [1]: [cast(r_reason_sk#12 as bigint)]
Join condition: None

(18) Project [codegen id : 6]
Output [2]: [ss_customer_sk#2, CASE WHEN isnotnull(sr_return_quantity#10) THEN CheckOverflow((promote_precision(cast(cast((ss_quantity#4 - sr_return_quantity#10) as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#5 as decimal(12,2)))), DecimalType(18,2), true) ELSE CheckOverflow((promote_precision(cast(cast(ss_quantity#4 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#5 as decimal(12,2)))), DecimalType(18,2), true) END AS act_sales#15]
Input [6]: [ss_customer_sk#2, ss_quantity#4, ss_sales_price#5, sr_reason_sk#8, sr_return_quantity#10, r_reason_sk#12]

(19) HashAggregate [codegen id : 6]
Input [2]: [ss_customer_sk#2, act_sales#15]
Keys [1]: [ss_customer_sk#2]
Functions [1]: [partial_sum(act_sales#15)]
Aggregate Attributes [2]: [sum#16, isEmpty#17]
Results [3]: [ss_customer_sk#2, sum#18, isEmpty#19]

(20) Exchange
Input [3]: [ss_customer_sk#2, sum#18, isEmpty#19]
Arguments: hashpartitioning(ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#20]

(21) HashAggregate [codegen id : 7]
Input [3]: [ss_customer_sk#2, sum#18, isEmpty#19]
Keys [1]: [ss_customer_sk#2]
Functions [1]: [sum(act_sales#15)]
Aggregate Attributes [1]: [sum(act_sales#15)#21]
Results [2]: [ss_customer_sk#2, sum(act_sales#15)#21 AS sumsales#22]

(22) TakeOrderedAndProject
Input [2]: [ss_customer_sk#2, sumsales#22]
Arguments: 100, [sumsales#22 ASC NULLS FIRST, ss_customer_sk#2 ASC NULLS FIRST], [ss_customer_sk#2, sumsales#22]

