== Physical Plan ==
* HashAggregate (86)
+- Exchange (85)
   +- * HashAggregate (84)
      +- Union (83)
         :- * Project (49)
         :  +- * BroadcastHashJoin Inner BuildRight (48)
         :     :- * Project (46)
         :     :  +- * SortMergeJoin LeftSemi (45)
         :     :     :- * Sort (28)
         :     :     :  +- Exchange (27)
         :     :     :     +- * Project (26)
         :     :     :        +- * SortMergeJoin LeftSemi (25)
         :     :     :           :- * Sort (4)
         :     :     :           :  +- Exchange (3)
         :     :     :           :     +- * ColumnarToRow (2)
         :     :     :           :        +- Scan parquet default.catalog_sales (1)
         :     :     :           +- * Sort (24)
         :     :     :              +- * Project (23)
         :     :     :                 +- * Filter (22)
         :     :     :                    +- * HashAggregate (21)
         :     :     :                       +- * HashAggregate (20)
         :     :     :                          +- * Project (19)
         :     :     :                             +- * SortMergeJoin Inner (18)
         :     :     :                                :- * Sort (12)
         :     :     :                                :  +- Exchange (11)
         :     :     :                                :     +- * Project (10)
         :     :     :                                :        +- * BroadcastHashJoin Inner BuildRight (9)
         :     :     :                                :           :- * Filter (7)
         :     :     :                                :           :  +- * ColumnarToRow (6)
         :     :     :                                :           :     +- Scan parquet default.store_sales (5)
         :     :     :                                :           +- ReusedExchange (8)
         :     :     :                                +- * Sort (17)
         :     :     :                                   +- Exchange (16)
         :     :     :                                      +- * Filter (15)
         :     :     :                                         +- * ColumnarToRow (14)
         :     :     :                                            +- Scan parquet default.item (13)
         :     :     +- * Project (44)
         :     :        +- * Filter (43)
         :     :           +- SortAggregate (42)
         :     :              +- * Project (41)
         :     :                 +- * SortMergeJoin Inner (40)
         :     :                    :- * Sort (34)
         :     :                    :  +- Exchange (33)
         :     :                    :     +- * Project (32)
         :     :                    :        +- * Filter (31)
         :     :                    :           +- * ColumnarToRow (30)
         :     :                    :              +- Scan parquet default.store_sales (29)
         :     :                    +- * Sort (39)
         :     :                       +- Exchange (38)
         :     :                          +- * Filter (37)
         :     :                             +- * ColumnarToRow (36)
         :     :                                +- Scan parquet default.customer (35)
         :     +- ReusedExchange (47)
         +- * Project (82)
            +- * BroadcastHashJoin Inner BuildRight (81)
               :- * Project (79)
               :  +- * SortMergeJoin LeftSemi (78)
               :     :- * Sort (68)
               :     :  +- Exchange (67)
               :     :     +- * Project (66)
               :     :        +- * SortMergeJoin LeftSemi (65)
               :     :           :- * Sort (53)
               :     :           :  +- Exchange (52)
               :     :           :     +- * ColumnarToRow (51)
               :     :           :        +- Scan parquet default.web_sales (50)
               :     :           +- * Sort (64)
               :     :              +- * Project (63)
               :     :                 +- * Filter (62)
               :     :                    +- * HashAggregate (61)
               :     :                       +- * HashAggregate (60)
               :     :                          +- * Project (59)
               :     :                             +- * SortMergeJoin Inner (58)
               :     :                                :- * Sort (55)
               :     :                                :  +- ReusedExchange (54)
               :     :                                +- * Sort (57)
               :     :                                   +- ReusedExchange (56)
               :     +- * Project (77)
               :        +- * Filter (76)
               :           +- SortAggregate (75)
               :              +- * Project (74)
               :                 +- * SortMergeJoin Inner (73)
               :                    :- * Sort (70)
               :                    :  +- ReusedExchange (69)
               :                    +- * Sort (72)
               :                       +- ReusedExchange (71)
               +- ReusedExchange (80)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(3) Exchange
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#7]

(4) Sort [codegen id : 2]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_item_sk#2 ASC NULLS FIRST], false, 0

(5) Scan parquet default.store_sales
Output [2]: [ss_item_sk#8, ss_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#9), dynamicpruningexpression(ss_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(6) ColumnarToRow [codegen id : 4]
Input [2]: [ss_item_sk#8, ss_sold_date_sk#9]

(7) Filter [codegen id : 4]
Input [2]: [ss_item_sk#8, ss_sold_date_sk#9]
Condition : isnotnull(ss_item_sk#8)

(8) ReusedExchange [Reuses operator id: 96]
Output [2]: [d_date_sk#11, d_date#12]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#9]
Right keys [1]: [d_date_sk#11]
Join condition: None

(10) Project [codegen id : 4]
Output [2]: [ss_item_sk#8, d_date#12]
Input [4]: [ss_item_sk#8, ss_sold_date_sk#9, d_date_sk#11, d_date#12]

(11) Exchange
Input [2]: [ss_item_sk#8, d_date#12]
Arguments: hashpartitioning(ss_item_sk#8, 5), ENSURE_REQUIREMENTS, [id=#13]

(12) Sort [codegen id : 5]
Input [2]: [ss_item_sk#8, d_date#12]
Arguments: [ss_item_sk#8 ASC NULLS FIRST], false, 0

(13) Scan parquet default.item
Output [2]: [i_item_sk#14, i_item_desc#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(14) ColumnarToRow [codegen id : 6]
Input [2]: [i_item_sk#14, i_item_desc#15]

(15) Filter [codegen id : 6]
Input [2]: [i_item_sk#14, i_item_desc#15]
Condition : isnotnull(i_item_sk#14)

(16) Exchange
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: hashpartitioning(i_item_sk#14, 5), ENSURE_REQUIREMENTS, [id=#16]

(17) Sort [codegen id : 7]
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: [i_item_sk#14 ASC NULLS FIRST], false, 0

(18) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#14]
Join condition: None

(19) Project [codegen id : 8]
Output [3]: [d_date#12, i_item_sk#14, substr(i_item_desc#15, 1, 30) AS _groupingexpression#17]
Input [4]: [ss_item_sk#8, d_date#12, i_item_sk#14, i_item_desc#15]

(20) HashAggregate [codegen id : 8]
Input [3]: [d_date#12, i_item_sk#14, _groupingexpression#17]
Keys [3]: [_groupingexpression#17, i_item_sk#14, d_date#12]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#18]
Results [4]: [_groupingexpression#17, i_item_sk#14, d_date#12, count#19]

(21) HashAggregate [codegen id : 8]
Input [4]: [_groupingexpression#17, i_item_sk#14, d_date#12, count#19]
Keys [3]: [_groupingexpression#17, i_item_sk#14, d_date#12]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#20]
Results [2]: [i_item_sk#14 AS item_sk#21, count(1)#20 AS cnt#22]

(22) Filter [codegen id : 8]
Input [2]: [item_sk#21, cnt#22]
Condition : (cnt#22 > 4)

(23) Project [codegen id : 8]
Output [1]: [item_sk#21]
Input [2]: [item_sk#21, cnt#22]

(24) Sort [codegen id : 8]
Input [1]: [item_sk#21]
Arguments: [item_sk#21 ASC NULLS FIRST], false, 0

(25) SortMergeJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#21]
Join condition: None

(26) Project [codegen id : 9]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(27) Exchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#23]

(28) Sort [codegen id : 10]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(29) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(30) ColumnarToRow [codegen id : 11]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]

(31) Filter [codegen id : 11]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]
Condition : isnotnull(ss_customer_sk#24)

(32) Project [codegen id : 11]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]

(33) Exchange
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: hashpartitioning(ss_customer_sk#24, 5), ENSURE_REQUIREMENTS, [id=#28]

(34) Sort [codegen id : 12]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: [ss_customer_sk#24 ASC NULLS FIRST], false, 0

(35) Scan parquet default.customer
Output [1]: [c_customer_sk#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(36) ColumnarToRow [codegen id : 13]
Input [1]: [c_customer_sk#29]

(37) Filter [codegen id : 13]
Input [1]: [c_customer_sk#29]
Condition : isnotnull(c_customer_sk#29)

(38) Exchange
Input [1]: [c_customer_sk#29]
Arguments: hashpartitioning(c_customer_sk#29, 5), ENSURE_REQUIREMENTS, [id=#30]

(39) Sort [codegen id : 14]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(40) SortMergeJoin [codegen id : 15]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(41) Project [codegen id : 15]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#29]

(42) SortAggregate
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#31]
Results [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#31 AS ssales#32]

(43) Filter [codegen id : 16]
Input [2]: [c_customer_sk#29, ssales#32]
Condition : (isnotnull(ssales#32) AND (cast(ssales#32 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#33, [id=#34] as decimal(32,6)))), DecimalType(38,8), true)))

(44) Project [codegen id : 16]
Output [1]: [c_customer_sk#29]
Input [2]: [c_customer_sk#29, ssales#32]

(45) SortMergeJoin [codegen id : 18]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(46) Project [codegen id : 18]
Output [3]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(47) ReusedExchange [Reuses operator id: 91]
Output [1]: [d_date_sk#35]

(48) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#35]
Join condition: None

(49) Project [codegen id : 18]
Output [1]: [CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true) AS sales#36]
Input [4]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, d_date_sk#35]

(50) Scan parquet default.web_sales
Output [5]: [ws_item_sk#37, ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#41), dynamicpruningexpression(ws_sold_date_sk#41 IN dynamicpruning#6)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(51) ColumnarToRow [codegen id : 19]
Input [5]: [ws_item_sk#37, ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]

(52) Exchange
Input [5]: [ws_item_sk#37, ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Arguments: hashpartitioning(ws_item_sk#37, 5), ENSURE_REQUIREMENTS, [id=#42]

(53) Sort [codegen id : 20]
Input [5]: [ws_item_sk#37, ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Arguments: [ws_item_sk#37 ASC NULLS FIRST], false, 0

(54) ReusedExchange [Reuses operator id: 11]
Output [2]: [ss_item_sk#8, d_date#12]

(55) Sort [codegen id : 23]
Input [2]: [ss_item_sk#8, d_date#12]
Arguments: [ss_item_sk#8 ASC NULLS FIRST], false, 0

(56) ReusedExchange [Reuses operator id: 16]
Output [2]: [i_item_sk#14, i_item_desc#15]

(57) Sort [codegen id : 25]
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: [i_item_sk#14 ASC NULLS FIRST], false, 0

(58) SortMergeJoin [codegen id : 26]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#14]
Join condition: None

(59) Project [codegen id : 26]
Output [3]: [d_date#12, i_item_sk#14, substr(i_item_desc#15, 1, 30) AS _groupingexpression#43]
Input [4]: [ss_item_sk#8, d_date#12, i_item_sk#14, i_item_desc#15]

(60) HashAggregate [codegen id : 26]
Input [3]: [d_date#12, i_item_sk#14, _groupingexpression#43]
Keys [3]: [_groupingexpression#43, i_item_sk#14, d_date#12]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#18]
Results [4]: [_groupingexpression#43, i_item_sk#14, d_date#12, count#19]

(61) HashAggregate [codegen id : 26]
Input [4]: [_groupingexpression#43, i_item_sk#14, d_date#12, count#19]
Keys [3]: [_groupingexpression#43, i_item_sk#14, d_date#12]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#20]
Results [2]: [i_item_sk#14 AS item_sk#21, count(1)#20 AS cnt#22]

(62) Filter [codegen id : 26]
Input [2]: [item_sk#21, cnt#22]
Condition : (cnt#22 > 4)

(63) Project [codegen id : 26]
Output [1]: [item_sk#21]
Input [2]: [item_sk#21, cnt#22]

(64) Sort [codegen id : 26]
Input [1]: [item_sk#21]
Arguments: [item_sk#21 ASC NULLS FIRST], false, 0

(65) SortMergeJoin [codegen id : 27]
Left keys [1]: [ws_item_sk#37]
Right keys [1]: [item_sk#21]
Join condition: None

(66) Project [codegen id : 27]
Output [4]: [ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Input [5]: [ws_item_sk#37, ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]

(67) Exchange
Input [4]: [ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Arguments: hashpartitioning(ws_bill_customer_sk#38, 5), ENSURE_REQUIREMENTS, [id=#44]

(68) Sort [codegen id : 28]
Input [4]: [ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Arguments: [ws_bill_customer_sk#38 ASC NULLS FIRST], false, 0

(69) ReusedExchange [Reuses operator id: 33]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]

(70) Sort [codegen id : 30]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: [ss_customer_sk#24 ASC NULLS FIRST], false, 0

(71) ReusedExchange [Reuses operator id: 38]
Output [1]: [c_customer_sk#29]

(72) Sort [codegen id : 32]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(73) SortMergeJoin [codegen id : 33]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(74) Project [codegen id : 33]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#29]

(75) SortAggregate
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#31]
Results [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#31 AS ssales#32]

(76) Filter [codegen id : 34]
Input [2]: [c_customer_sk#29, ssales#32]
Condition : (isnotnull(ssales#32) AND (cast(ssales#32 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#33, [id=#34] as decimal(32,6)))), DecimalType(38,8), true)))

(77) Project [codegen id : 34]
Output [1]: [c_customer_sk#29]
Input [2]: [c_customer_sk#29, ssales#32]

(78) SortMergeJoin [codegen id : 36]
Left keys [1]: [ws_bill_customer_sk#38]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(79) Project [codegen id : 36]
Output [3]: [ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Input [4]: [ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]

(80) ReusedExchange [Reuses operator id: 91]
Output [1]: [d_date_sk#45]

(81) BroadcastHashJoin [codegen id : 36]
Left keys [1]: [ws_sold_date_sk#41]
Right keys [1]: [d_date_sk#45]
Join condition: None

(82) Project [codegen id : 36]
Output [1]: [CheckOverflow((promote_precision(cast(cast(ws_quantity#39 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#40 as decimal(12,2)))), DecimalType(18,2), true) AS sales#46]
Input [4]: [ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41, d_date_sk#45]

(83) Union

(84) HashAggregate [codegen id : 37]
Input [1]: [sales#36]
Keys: []
Functions [1]: [partial_sum(sales#36)]
Aggregate Attributes [2]: [sum#47, isEmpty#48]
Results [2]: [sum#49, isEmpty#50]

(85) Exchange
Input [2]: [sum#49, isEmpty#50]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#51]

(86) HashAggregate [codegen id : 38]
Input [2]: [sum#49, isEmpty#50]
Keys: []
Functions [1]: [sum(sales#36)]
Aggregate Attributes [1]: [sum(sales#36)#52]
Results [1]: [sum(sales#36)#52 AS sum(sales)#53]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (91)
+- * Project (90)
   +- * Filter (89)
      +- * ColumnarToRow (88)
         +- Scan parquet default.date_dim (87)


(87) Scan parquet default.date_dim
Output [3]: [d_date_sk#35, d_year#54, d_moy#55]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(88) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#35, d_year#54, d_moy#55]

(89) Filter [codegen id : 1]
Input [3]: [d_date_sk#35, d_year#54, d_moy#55]
Condition : ((((isnotnull(d_year#54) AND isnotnull(d_moy#55)) AND (d_year#54 = 2000)) AND (d_moy#55 = 2)) AND isnotnull(d_date_sk#35))

(90) Project [codegen id : 1]
Output [1]: [d_date_sk#35]
Input [3]: [d_date_sk#35, d_year#54, d_moy#55]

(91) BroadcastExchange
Input [1]: [d_date_sk#35]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#56]

Subquery:2 Hosting operator id = 5 Hosting Expression = ss_sold_date_sk#9 IN dynamicpruning#10
BroadcastExchange (96)
+- * Project (95)
   +- * Filter (94)
      +- * ColumnarToRow (93)
         +- Scan parquet default.date_dim (92)


(92) Scan parquet default.date_dim
Output [3]: [d_date_sk#11, d_date#12, d_year#57]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(93) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#11, d_date#12, d_year#57]

(94) Filter [codegen id : 1]
Input [3]: [d_date_sk#11, d_date#12, d_year#57]
Condition : (d_year#57 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#11))

(95) Project [codegen id : 1]
Output [2]: [d_date_sk#11, d_date#12]
Input [3]: [d_date_sk#11, d_date#12, d_year#57]

(96) BroadcastExchange
Input [2]: [d_date_sk#11, d_date#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#58]

Subquery:3 Hosting operator id = 43 Hosting Expression = Subquery scalar-subquery#33, [id=#34]
* HashAggregate (112)
+- Exchange (111)
   +- * HashAggregate (110)
      +- SortAggregate (109)
         +- * Project (108)
            +- * SortMergeJoin Inner (107)
               :- * Sort (104)
               :  +- Exchange (103)
               :     +- * Project (102)
               :        +- * BroadcastHashJoin Inner BuildRight (101)
               :           :- * Filter (99)
               :           :  +- * ColumnarToRow (98)
               :           :     +- Scan parquet default.store_sales (97)
               :           +- ReusedExchange (100)
               +- * Sort (106)
                  +- ReusedExchange (105)


(97) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#59, ss_quantity#60, ss_sales_price#61, ss_sold_date_sk#62]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#62), dynamicpruningexpression(ss_sold_date_sk#62 IN dynamicpruning#63)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(98) ColumnarToRow [codegen id : 2]
Input [4]: [ss_customer_sk#59, ss_quantity#60, ss_sales_price#61, ss_sold_date_sk#62]

(99) Filter [codegen id : 2]
Input [4]: [ss_customer_sk#59, ss_quantity#60, ss_sales_price#61, ss_sold_date_sk#62]
Condition : isnotnull(ss_customer_sk#59)

(100) ReusedExchange [Reuses operator id: 117]
Output [1]: [d_date_sk#64]

(101) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#62]
Right keys [1]: [d_date_sk#64]
Join condition: None

(102) Project [codegen id : 2]
Output [3]: [ss_customer_sk#59, ss_quantity#60, ss_sales_price#61]
Input [5]: [ss_customer_sk#59, ss_quantity#60, ss_sales_price#61, ss_sold_date_sk#62, d_date_sk#64]

(103) Exchange
Input [3]: [ss_customer_sk#59, ss_quantity#60, ss_sales_price#61]
Arguments: hashpartitioning(ss_customer_sk#59, 5), ENSURE_REQUIREMENTS, [id=#65]

(104) Sort [codegen id : 3]
Input [3]: [ss_customer_sk#59, ss_quantity#60, ss_sales_price#61]
Arguments: [ss_customer_sk#59 ASC NULLS FIRST], false, 0

(105) ReusedExchange [Reuses operator id: 38]
Output [1]: [c_customer_sk#66]

(106) Sort [codegen id : 5]
Input [1]: [c_customer_sk#66]
Arguments: [c_customer_sk#66 ASC NULLS FIRST], false, 0

(107) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#59]
Right keys [1]: [c_customer_sk#66]
Join condition: None

(108) Project [codegen id : 6]
Output [3]: [ss_quantity#60, ss_sales_price#61, c_customer_sk#66]
Input [4]: [ss_customer_sk#59, ss_quantity#60, ss_sales_price#61, c_customer_sk#66]

(109) SortAggregate
Input [3]: [ss_quantity#60, ss_sales_price#61, c_customer_sk#66]
Keys [1]: [c_customer_sk#66]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#61 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#61 as decimal(12,2)))), DecimalType(18,2), true))#67]
Results [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#60 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#61 as decimal(12,2)))), DecimalType(18,2), true))#67 AS csales#68]

(110) HashAggregate [codegen id : 7]
Input [1]: [csales#68]
Keys: []
Functions [1]: [partial_max(csales#68)]
Aggregate Attributes [1]: [max#69]
Results [1]: [max#70]

(111) Exchange
Input [1]: [max#70]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#71]

(112) HashAggregate [codegen id : 8]
Input [1]: [max#70]
Keys: []
Functions [1]: [max(csales#68)]
Aggregate Attributes [1]: [max(csales#68)#72]
Results [1]: [max(csales#68)#72 AS tpcds_cmax#73]

Subquery:4 Hosting operator id = 97 Hosting Expression = ss_sold_date_sk#62 IN dynamicpruning#63
BroadcastExchange (117)
+- * Project (116)
   +- * Filter (115)
      +- * ColumnarToRow (114)
         +- Scan parquet default.date_dim (113)


(113) Scan parquet default.date_dim
Output [2]: [d_date_sk#64, d_year#74]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(114) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#64, d_year#74]

(115) Filter [codegen id : 1]
Input [2]: [d_date_sk#64, d_year#74]
Condition : (d_year#74 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#64))

(116) Project [codegen id : 1]
Output [1]: [d_date_sk#64]
Input [2]: [d_date_sk#64, d_year#74]

(117) BroadcastExchange
Input [1]: [d_date_sk#64]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#75]

Subquery:5 Hosting operator id = 50 Hosting Expression = ws_sold_date_sk#41 IN dynamicpruning#6

Subquery:6 Hosting operator id = 76 Hosting Expression = ReusedSubquery Subquery scalar-subquery#33, [id=#34]


