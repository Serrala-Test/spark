== Physical Plan ==
* HashAggregate (87)
+- Exchange (86)
   +- * HashAggregate (85)
      +- Union (84)
         :- * Project (48)
         :  +- * BroadcastHashJoin Inner BuildRight (47)
         :     :- * Project (45)
         :     :  +- * SortMergeJoin LeftSemi (44)
         :     :     :- * Sort (26)
         :     :     :  +- Exchange (25)
         :     :     :     +- * Project (24)
         :     :     :        +- * SortMergeJoin LeftSemi (23)
         :     :     :           :- * Sort (4)
         :     :     :           :  +- Exchange (3)
         :     :     :           :     +- * ColumnarToRow (2)
         :     :     :           :        +- Scan parquet default.catalog_sales (1)
         :     :     :           +- * Sort (22)
         :     :     :              +- * Project (21)
         :     :     :                 +- * Filter (20)
         :     :     :                    +- * HashAggregate (19)
         :     :     :                       +- * HashAggregate (18)
         :     :     :                          +- * Project (17)
         :     :     :                             +- * SortMergeJoin Inner (16)
         :     :     :                                :- * Sort (11)
         :     :     :                                :  +- Exchange (10)
         :     :     :                                :     +- * Project (9)
         :     :     :                                :        +- * BroadcastHashJoin Inner BuildRight (8)
         :     :     :                                :           :- * ColumnarToRow (6)
         :     :     :                                :           :  +- Scan parquet default.store_sales (5)
         :     :     :                                :           +- ReusedExchange (7)
         :     :     :                                +- * Sort (15)
         :     :     :                                   +- Exchange (14)
         :     :     :                                      +- * ColumnarToRow (13)
         :     :     :                                         +- Scan parquet default.item (12)
         :     :     +- * Sort (43)
         :     :        +- * Project (42)
         :     :           +- * Filter (41)
         :     :              +- * HashAggregate (40)
         :     :                 +- * HashAggregate (39)
         :     :                    +- * Project (38)
         :     :                       +- * SortMergeJoin Inner (37)
         :     :                          :- * Sort (32)
         :     :                          :  +- Exchange (31)
         :     :                          :     +- * Project (30)
         :     :                          :        +- * Filter (29)
         :     :                          :           +- * ColumnarToRow (28)
         :     :                          :              +- Scan parquet default.store_sales (27)
         :     :                          +- * Sort (36)
         :     :                             +- Exchange (35)
         :     :                                +- * ColumnarToRow (34)
         :     :                                   +- Scan parquet default.customer (33)
         :     +- ReusedExchange (46)
         +- * Project (83)
            +- * BroadcastHashJoin Inner BuildRight (82)
               :- * Project (80)
               :  +- * SortMergeJoin LeftSemi (79)
               :     :- * Sort (67)
               :     :  +- Exchange (66)
               :     :     +- * Project (65)
               :     :        +- * SortMergeJoin LeftSemi (64)
               :     :           :- * Sort (52)
               :     :           :  +- Exchange (51)
               :     :           :     +- * ColumnarToRow (50)
               :     :           :        +- Scan parquet default.web_sales (49)
               :     :           +- * Sort (63)
               :     :              +- * Project (62)
               :     :                 +- * Filter (61)
               :     :                    +- * HashAggregate (60)
               :     :                       +- * HashAggregate (59)
               :     :                          +- * Project (58)
               :     :                             +- * SortMergeJoin Inner (57)
               :     :                                :- * Sort (54)
               :     :                                :  +- ReusedExchange (53)
               :     :                                +- * Sort (56)
               :     :                                   +- ReusedExchange (55)
               :     +- * Sort (78)
               :        +- * Project (77)
               :           +- * Filter (76)
               :              +- * HashAggregate (75)
               :                 +- * HashAggregate (74)
               :                    +- * Project (73)
               :                       +- * SortMergeJoin Inner (72)
               :                          :- * Sort (69)
               :                          :  +- ReusedExchange (68)
               :                          +- * Sort (71)
               :                             +- ReusedExchange (70)
               +- ReusedExchange (81)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(3) Exchange
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#7]

(4) Sort [codegen id : 2]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_item_sk#2 ASC NULLS FIRST], false, 0

(5) Scan parquet default.store_sales
Output [2]: [ss_item_sk#8, ss_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#9), dynamicpruningexpression(ss_sold_date_sk#9 IN dynamicpruning#10)]
ReadSchema: struct<ss_item_sk:int>

(6) ColumnarToRow [codegen id : 4]
Input [2]: [ss_item_sk#8, ss_sold_date_sk#9]

(7) ReusedExchange [Reuses operator id: 97]
Output [2]: [d_date_sk#11, d_date#12]

(8) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#9]
Right keys [1]: [d_date_sk#11]
Join condition: None

(9) Project [codegen id : 4]
Output [2]: [ss_item_sk#8, d_date#12]
Input [4]: [ss_item_sk#8, ss_sold_date_sk#9, d_date_sk#11, d_date#12]

(10) Exchange
Input [2]: [ss_item_sk#8, d_date#12]
Arguments: hashpartitioning(ss_item_sk#8, 5), ENSURE_REQUIREMENTS, [id=#13]

(11) Sort [codegen id : 5]
Input [2]: [ss_item_sk#8, d_date#12]
Arguments: [ss_item_sk#8 ASC NULLS FIRST], false, 0

(12) Scan parquet default.item
Output [2]: [i_item_sk#14, i_item_desc#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(13) ColumnarToRow [codegen id : 6]
Input [2]: [i_item_sk#14, i_item_desc#15]

(14) Exchange
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: hashpartitioning(i_item_sk#14, 5), ENSURE_REQUIREMENTS, [id=#16]

(15) Sort [codegen id : 7]
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: [i_item_sk#14 ASC NULLS FIRST], false, 0

(16) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#14]
Join condition: None

(17) Project [codegen id : 8]
Output [3]: [d_date#12, i_item_sk#14, substr(i_item_desc#15, 1, 30) AS _groupingexpression#17]
Input [4]: [ss_item_sk#8, d_date#12, i_item_sk#14, i_item_desc#15]

(18) HashAggregate [codegen id : 8]
Input [3]: [d_date#12, i_item_sk#14, _groupingexpression#17]
Keys [3]: [_groupingexpression#17, i_item_sk#14, d_date#12]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#18]
Results [4]: [_groupingexpression#17, i_item_sk#14, d_date#12, count#19]

(19) HashAggregate [codegen id : 8]
Input [4]: [_groupingexpression#17, i_item_sk#14, d_date#12, count#19]
Keys [3]: [_groupingexpression#17, i_item_sk#14, d_date#12]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#20]
Results [2]: [i_item_sk#14 AS item_sk#21, count(1)#20 AS cnt#22]

(20) Filter [codegen id : 8]
Input [2]: [item_sk#21, cnt#22]
Condition : (cnt#22 > 4)

(21) Project [codegen id : 8]
Output [1]: [item_sk#21]
Input [2]: [item_sk#21, cnt#22]

(22) Sort [codegen id : 8]
Input [1]: [item_sk#21]
Arguments: [item_sk#21 ASC NULLS FIRST], false, 0

(23) SortMergeJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#21]
Join condition: None

(24) Project [codegen id : 9]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(25) Exchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#23]

(26) Sort [codegen id : 10]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(27) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(28) ColumnarToRow [codegen id : 11]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]

(29) Filter [codegen id : 11]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]
Condition : isnotnull(ss_customer_sk#24)

(30) Project [codegen id : 11]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]

(31) Exchange
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: hashpartitioning(ss_customer_sk#24, 5), ENSURE_REQUIREMENTS, [id=#28]

(32) Sort [codegen id : 12]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: [ss_customer_sk#24 ASC NULLS FIRST], false, 0

(33) Scan parquet default.customer
Output [1]: [c_customer_sk#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
ReadSchema: struct<c_customer_sk:int>

(34) ColumnarToRow [codegen id : 13]
Input [1]: [c_customer_sk#29]

(35) Exchange
Input [1]: [c_customer_sk#29]
Arguments: hashpartitioning(c_customer_sk#29, 5), ENSURE_REQUIREMENTS, [id=#30]

(36) Sort [codegen id : 14]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(37) SortMergeJoin [codegen id : 15]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(38) Project [codegen id : 15]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#29]

(39) HashAggregate [codegen id : 15]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#31, isEmpty#32]
Results [3]: [c_customer_sk#29, sum#33, isEmpty#34]

(40) HashAggregate [codegen id : 15]
Input [3]: [c_customer_sk#29, sum#33, isEmpty#34]
Keys [1]: [c_customer_sk#29]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]
Results [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35 AS ssales#36]

(41) Filter [codegen id : 15]
Input [2]: [c_customer_sk#29, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8), true)))

(42) Project [codegen id : 15]
Output [1]: [c_customer_sk#29]
Input [2]: [c_customer_sk#29, ssales#36]

(43) Sort [codegen id : 15]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(44) SortMergeJoin [codegen id : 17]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(45) Project [codegen id : 17]
Output [3]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(46) ReusedExchange [Reuses operator id: 92]
Output [1]: [d_date_sk#39]

(47) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#39]
Join condition: None

(48) Project [codegen id : 17]
Output [1]: [CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true) AS sales#40]
Input [4]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, d_date_sk#39]

(49) Scan parquet default.web_sales
Output [5]: [ws_item_sk#41, ws_bill_customer_sk#42, ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#45), dynamicpruningexpression(ws_sold_date_sk#45 IN dynamicpruning#6)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(50) ColumnarToRow [codegen id : 18]
Input [5]: [ws_item_sk#41, ws_bill_customer_sk#42, ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45]

(51) Exchange
Input [5]: [ws_item_sk#41, ws_bill_customer_sk#42, ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45]
Arguments: hashpartitioning(ws_item_sk#41, 5), ENSURE_REQUIREMENTS, [id=#46]

(52) Sort [codegen id : 19]
Input [5]: [ws_item_sk#41, ws_bill_customer_sk#42, ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45]
Arguments: [ws_item_sk#41 ASC NULLS FIRST], false, 0

(53) ReusedExchange [Reuses operator id: 10]
Output [2]: [ss_item_sk#47, d_date#48]

(54) Sort [codegen id : 22]
Input [2]: [ss_item_sk#47, d_date#48]
Arguments: [ss_item_sk#47 ASC NULLS FIRST], false, 0

(55) ReusedExchange [Reuses operator id: 14]
Output [2]: [i_item_sk#49, i_item_desc#50]

(56) Sort [codegen id : 24]
Input [2]: [i_item_sk#49, i_item_desc#50]
Arguments: [i_item_sk#49 ASC NULLS FIRST], false, 0

(57) SortMergeJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#47]
Right keys [1]: [i_item_sk#49]
Join condition: None

(58) Project [codegen id : 25]
Output [3]: [d_date#48, i_item_sk#49, substr(i_item_desc#50, 1, 30) AS _groupingexpression#51]
Input [4]: [ss_item_sk#47, d_date#48, i_item_sk#49, i_item_desc#50]

(59) HashAggregate [codegen id : 25]
Input [3]: [d_date#48, i_item_sk#49, _groupingexpression#51]
Keys [3]: [_groupingexpression#51, i_item_sk#49, d_date#48]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#52]
Results [4]: [_groupingexpression#51, i_item_sk#49, d_date#48, count#53]

(60) HashAggregate [codegen id : 25]
Input [4]: [_groupingexpression#51, i_item_sk#49, d_date#48, count#53]
Keys [3]: [_groupingexpression#51, i_item_sk#49, d_date#48]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#54]
Results [2]: [i_item_sk#49 AS item_sk#21, count(1)#54 AS cnt#22]

(61) Filter [codegen id : 25]
Input [2]: [item_sk#21, cnt#22]
Condition : (cnt#22 > 4)

(62) Project [codegen id : 25]
Output [1]: [item_sk#21]
Input [2]: [item_sk#21, cnt#22]

(63) Sort [codegen id : 25]
Input [1]: [item_sk#21]
Arguments: [item_sk#21 ASC NULLS FIRST], false, 0

(64) SortMergeJoin [codegen id : 26]
Left keys [1]: [ws_item_sk#41]
Right keys [1]: [item_sk#21]
Join condition: None

(65) Project [codegen id : 26]
Output [4]: [ws_bill_customer_sk#42, ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45]
Input [5]: [ws_item_sk#41, ws_bill_customer_sk#42, ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45]

(66) Exchange
Input [4]: [ws_bill_customer_sk#42, ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45]
Arguments: hashpartitioning(ws_bill_customer_sk#42, 5), ENSURE_REQUIREMENTS, [id=#55]

(67) Sort [codegen id : 27]
Input [4]: [ws_bill_customer_sk#42, ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45]
Arguments: [ws_bill_customer_sk#42 ASC NULLS FIRST], false, 0

(68) ReusedExchange [Reuses operator id: 31]
Output [3]: [ss_customer_sk#56, ss_quantity#57, ss_sales_price#58]

(69) Sort [codegen id : 29]
Input [3]: [ss_customer_sk#56, ss_quantity#57, ss_sales_price#58]
Arguments: [ss_customer_sk#56 ASC NULLS FIRST], false, 0

(70) ReusedExchange [Reuses operator id: 35]
Output [1]: [c_customer_sk#59]

(71) Sort [codegen id : 31]
Input [1]: [c_customer_sk#59]
Arguments: [c_customer_sk#59 ASC NULLS FIRST], false, 0

(72) SortMergeJoin [codegen id : 32]
Left keys [1]: [ss_customer_sk#56]
Right keys [1]: [c_customer_sk#59]
Join condition: None

(73) Project [codegen id : 32]
Output [3]: [ss_quantity#57, ss_sales_price#58, c_customer_sk#59]
Input [4]: [ss_customer_sk#56, ss_quantity#57, ss_sales_price#58, c_customer_sk#59]

(74) HashAggregate [codegen id : 32]
Input [3]: [ss_quantity#57, ss_sales_price#58, c_customer_sk#59]
Keys [1]: [c_customer_sk#59]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#57 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#58 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#60, isEmpty#61]
Results [3]: [c_customer_sk#59, sum#62, isEmpty#63]

(75) HashAggregate [codegen id : 32]
Input [3]: [c_customer_sk#59, sum#62, isEmpty#63]
Keys [1]: [c_customer_sk#59]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#57 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#58 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#57 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#58 as decimal(12,2)))), DecimalType(18,2), true))#64]
Results [2]: [c_customer_sk#59, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#57 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#58 as decimal(12,2)))), DecimalType(18,2), true))#64 AS ssales#36]

(76) Filter [codegen id : 32]
Input [2]: [c_customer_sk#59, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8), true)))

(77) Project [codegen id : 32]
Output [1]: [c_customer_sk#59]
Input [2]: [c_customer_sk#59, ssales#36]

(78) Sort [codegen id : 32]
Input [1]: [c_customer_sk#59]
Arguments: [c_customer_sk#59 ASC NULLS FIRST], false, 0

(79) SortMergeJoin [codegen id : 34]
Left keys [1]: [ws_bill_customer_sk#42]
Right keys [1]: [c_customer_sk#59]
Join condition: None

(80) Project [codegen id : 34]
Output [3]: [ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45]
Input [4]: [ws_bill_customer_sk#42, ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45]

(81) ReusedExchange [Reuses operator id: 92]
Output [1]: [d_date_sk#65]

(82) BroadcastHashJoin [codegen id : 34]
Left keys [1]: [ws_sold_date_sk#45]
Right keys [1]: [d_date_sk#65]
Join condition: None

(83) Project [codegen id : 34]
Output [1]: [CheckOverflow((promote_precision(cast(cast(ws_quantity#43 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#44 as decimal(12,2)))), DecimalType(18,2), true) AS sales#66]
Input [4]: [ws_quantity#43, ws_list_price#44, ws_sold_date_sk#45, d_date_sk#65]

(84) Union

(85) HashAggregate [codegen id : 35]
Input [1]: [sales#40]
Keys: []
Functions [1]: [partial_sum(sales#40)]
Aggregate Attributes [2]: [sum#67, isEmpty#68]
Results [2]: [sum#69, isEmpty#70]

(86) Exchange
Input [2]: [sum#69, isEmpty#70]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#71]

(87) HashAggregate [codegen id : 36]
Input [2]: [sum#69, isEmpty#70]
Keys: []
Functions [1]: [sum(sales#40)]
Aggregate Attributes [1]: [sum(sales#40)#72]
Results [1]: [sum(sales#40)#72 AS sum(sales)#73]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (92)
+- * Project (91)
   +- * Filter (90)
      +- * ColumnarToRow (89)
         +- Scan parquet default.date_dim (88)


(88) Scan parquet default.date_dim
Output [3]: [d_date_sk#39, d_year#74, d_moy#75]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [EqualTo(d_year,2000), EqualTo(d_moy,2)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(89) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#39, d_year#74, d_moy#75]

(90) Filter [codegen id : 1]
Input [3]: [d_date_sk#39, d_year#74, d_moy#75]
Condition : ((d_year#74 = 2000) AND (d_moy#75 = 2))

(91) Project [codegen id : 1]
Output [1]: [d_date_sk#39]
Input [3]: [d_date_sk#39, d_year#74, d_moy#75]

(92) BroadcastExchange
Input [1]: [d_date_sk#39]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#76]

Subquery:2 Hosting operator id = 5 Hosting Expression = ss_sold_date_sk#9 IN dynamicpruning#10
BroadcastExchange (97)
+- * Project (96)
   +- * Filter (95)
      +- * ColumnarToRow (94)
         +- Scan parquet default.date_dim (93)


(93) Scan parquet default.date_dim
Output [3]: [d_date_sk#11, d_date#12, d_year#77]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003])]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(94) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#11, d_date#12, d_year#77]

(95) Filter [codegen id : 1]
Input [3]: [d_date_sk#11, d_date#12, d_year#77]
Condition : d_year#77 IN (2000,2001,2002,2003)

(96) Project [codegen id : 1]
Output [2]: [d_date_sk#11, d_date#12]
Input [3]: [d_date_sk#11, d_date#12, d_year#77]

(97) BroadcastExchange
Input [2]: [d_date_sk#11, d_date#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#78]

Subquery:3 Hosting operator id = 41 Hosting Expression = Subquery scalar-subquery#37, [id=#38]
* HashAggregate (114)
+- Exchange (113)
   +- * HashAggregate (112)
      +- * HashAggregate (111)
         +- * HashAggregate (110)
            +- * Project (109)
               +- * SortMergeJoin Inner (108)
                  :- * Sort (105)
                  :  +- Exchange (104)
                  :     +- * Project (103)
                  :        +- * BroadcastHashJoin Inner BuildRight (102)
                  :           :- * Filter (100)
                  :           :  +- * ColumnarToRow (99)
                  :           :     +- Scan parquet default.store_sales (98)
                  :           +- ReusedExchange (101)
                  +- * Sort (107)
                     +- ReusedExchange (106)


(98) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#79, ss_quantity#80, ss_sales_price#81, ss_sold_date_sk#82]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#82), dynamicpruningexpression(ss_sold_date_sk#82 IN dynamicpruning#83)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(99) ColumnarToRow [codegen id : 2]
Input [4]: [ss_customer_sk#79, ss_quantity#80, ss_sales_price#81, ss_sold_date_sk#82]

(100) Filter [codegen id : 2]
Input [4]: [ss_customer_sk#79, ss_quantity#80, ss_sales_price#81, ss_sold_date_sk#82]
Condition : isnotnull(ss_customer_sk#79)

(101) ReusedExchange [Reuses operator id: 119]
Output [1]: [d_date_sk#84]

(102) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#82]
Right keys [1]: [d_date_sk#84]
Join condition: None

(103) Project [codegen id : 2]
Output [3]: [ss_customer_sk#79, ss_quantity#80, ss_sales_price#81]
Input [5]: [ss_customer_sk#79, ss_quantity#80, ss_sales_price#81, ss_sold_date_sk#82, d_date_sk#84]

(104) Exchange
Input [3]: [ss_customer_sk#79, ss_quantity#80, ss_sales_price#81]
Arguments: hashpartitioning(ss_customer_sk#79, 5), ENSURE_REQUIREMENTS, [id=#85]

(105) Sort [codegen id : 3]
Input [3]: [ss_customer_sk#79, ss_quantity#80, ss_sales_price#81]
Arguments: [ss_customer_sk#79 ASC NULLS FIRST], false, 0

(106) ReusedExchange [Reuses operator id: 35]
Output [1]: [c_customer_sk#86]

(107) Sort [codegen id : 5]
Input [1]: [c_customer_sk#86]
Arguments: [c_customer_sk#86 ASC NULLS FIRST], false, 0

(108) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#79]
Right keys [1]: [c_customer_sk#86]
Join condition: None

(109) Project [codegen id : 6]
Output [3]: [ss_quantity#80, ss_sales_price#81, c_customer_sk#86]
Input [4]: [ss_customer_sk#79, ss_quantity#80, ss_sales_price#81, c_customer_sk#86]

(110) HashAggregate [codegen id : 6]
Input [3]: [ss_quantity#80, ss_sales_price#81, c_customer_sk#86]
Keys [1]: [c_customer_sk#86]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#80 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#81 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#87, isEmpty#88]
Results [3]: [c_customer_sk#86, sum#89, isEmpty#90]

(111) HashAggregate [codegen id : 6]
Input [3]: [c_customer_sk#86, sum#89, isEmpty#90]
Keys [1]: [c_customer_sk#86]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#80 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#81 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#80 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#81 as decimal(12,2)))), DecimalType(18,2), true))#91]
Results [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#80 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#81 as decimal(12,2)))), DecimalType(18,2), true))#91 AS csales#92]

(112) HashAggregate [codegen id : 6]
Input [1]: [csales#92]
Keys: []
Functions [1]: [partial_max(csales#92)]
Aggregate Attributes [1]: [max#93]
Results [1]: [max#94]

(113) Exchange
Input [1]: [max#94]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#95]

(114) HashAggregate [codegen id : 7]
Input [1]: [max#94]
Keys: []
Functions [1]: [max(csales#92)]
Aggregate Attributes [1]: [max(csales#92)#96]
Results [1]: [max(csales#92)#96 AS tpcds_cmax#97]

Subquery:4 Hosting operator id = 98 Hosting Expression = ss_sold_date_sk#82 IN dynamicpruning#83
BroadcastExchange (119)
+- * Project (118)
   +- * Filter (117)
      +- * ColumnarToRow (116)
         +- Scan parquet default.date_dim (115)


(115) Scan parquet default.date_dim
Output [2]: [d_date_sk#84, d_year#98]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003])]
ReadSchema: struct<d_date_sk:int,d_year:int>

(116) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#84, d_year#98]

(117) Filter [codegen id : 1]
Input [2]: [d_date_sk#84, d_year#98]
Condition : d_year#98 IN (2000,2001,2002,2003)

(118) Project [codegen id : 1]
Output [1]: [d_date_sk#84]
Input [2]: [d_date_sk#84, d_year#98]

(119) BroadcastExchange
Input [1]: [d_date_sk#84]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#99]

Subquery:5 Hosting operator id = 49 Hosting Expression = ws_sold_date_sk#45 IN dynamicpruning#6

Subquery:6 Hosting operator id = 76 Hosting Expression = ReusedSubquery Subquery scalar-subquery#37, [id=#38]


