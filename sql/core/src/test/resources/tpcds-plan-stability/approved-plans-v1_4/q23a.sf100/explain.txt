== Physical Plan ==
* HashAggregate (90)
+- Exchange (89)
   +- * HashAggregate (88)
      +- Union (87)
         :- * Project (59)
         :  +- * BroadcastHashJoin Inner BuildRight (58)
         :     :- * Project (52)
         :     :  +- SortMergeJoin LeftSemi (51)
         :     :     :- * Sort (33)
         :     :     :  +- Exchange (32)
         :     :     :     +- * Project (31)
         :     :     :        +- SortMergeJoin LeftSemi (30)
         :     :     :           :- * Sort (5)
         :     :     :           :  +- Exchange (4)
         :     :     :           :     +- * Filter (3)
         :     :     :           :        +- * ColumnarToRow (2)
         :     :     :           :           +- Scan parquet default.catalog_sales (1)
         :     :     :           +- * Sort (29)
         :     :     :              +- Exchange (28)
         :     :     :                 +- * Project (27)
         :     :     :                    +- * Filter (26)
         :     :     :                       +- * HashAggregate (25)
         :     :     :                          +- Exchange (24)
         :     :     :                             +- * HashAggregate (23)
         :     :     :                                +- * Project (22)
         :     :     :                                   +- * BroadcastHashJoin Inner BuildRight (21)
         :     :     :                                      :- * Project (15)
         :     :     :                                      :  +- * BroadcastHashJoin Inner BuildRight (14)
         :     :     :                                      :     :- * Filter (8)
         :     :     :                                      :     :  +- * ColumnarToRow (7)
         :     :     :                                      :     :     +- Scan parquet default.store_sales (6)
         :     :     :                                      :     +- BroadcastExchange (13)
         :     :     :                                      :        +- * Project (12)
         :     :     :                                      :           +- * Filter (11)
         :     :     :                                      :              +- * ColumnarToRow (10)
         :     :     :                                      :                 +- Scan parquet default.date_dim (9)
         :     :     :                                      +- BroadcastExchange (20)
         :     :     :                                         +- * Project (19)
         :     :     :                                            +- * Filter (18)
         :     :     :                                               +- * ColumnarToRow (17)
         :     :     :                                                  +- Scan parquet default.item (16)
         :     :     +- * Sort (50)
         :     :        +- * Project (49)
         :     :           +- * Filter (48)
         :     :              +- * HashAggregate (47)
         :     :                 +- * HashAggregate (46)
         :     :                    +- * Project (45)
         :     :                       +- * SortMergeJoin Inner (44)
         :     :                          :- * Sort (38)
         :     :                          :  +- Exchange (37)
         :     :                          :     +- * Filter (36)
         :     :                          :        +- * ColumnarToRow (35)
         :     :                          :           +- Scan parquet default.store_sales (34)
         :     :                          +- * Sort (43)
         :     :                             +- Exchange (42)
         :     :                                +- * Filter (41)
         :     :                                   +- * ColumnarToRow (40)
         :     :                                      +- Scan parquet default.customer (39)
         :     +- BroadcastExchange (57)
         :        +- * Project (56)
         :           +- * Filter (55)
         :              +- * ColumnarToRow (54)
         :                 +- Scan parquet default.date_dim (53)
         +- * Project (86)
            +- * BroadcastHashJoin Inner BuildRight (85)
               :- * Project (83)
               :  +- SortMergeJoin LeftSemi (82)
               :     :- * Sort (70)
               :     :  +- Exchange (69)
               :     :     +- * Project (68)
               :     :        +- SortMergeJoin LeftSemi (67)
               :     :           :- * Sort (64)
               :     :           :  +- Exchange (63)
               :     :           :     +- * Filter (62)
               :     :           :        +- * ColumnarToRow (61)
               :     :           :           +- Scan parquet default.web_sales (60)
               :     :           +- * Sort (66)
               :     :              +- ReusedExchange (65)
               :     +- * Sort (81)
               :        +- * Project (80)
               :           +- * Filter (79)
               :              +- * HashAggregate (78)
               :                 +- * HashAggregate (77)
               :                    +- * Project (76)
               :                       +- * SortMergeJoin Inner (75)
               :                          :- * Sort (72)
               :                          :  +- ReusedExchange (71)
               :                          +- * Sort (74)
               :                             +- ReusedExchange (73)
               +- ReusedExchange (84)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]

(3) Filter [codegen id : 1]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Condition : isnotnull(cs_sold_date_sk#1)

(4) Exchange
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Arguments: hashpartitioning(cs_item_sk#3, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Arguments: [cs_item_sk#3 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#7, ss_item_sk#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(7) ColumnarToRow [codegen id : 5]
Input [2]: [ss_sold_date_sk#7, ss_item_sk#8]

(8) Filter [codegen id : 5]
Input [2]: [ss_sold_date_sk#7, ss_item_sk#8]
Condition : (isnotnull(ss_sold_date_sk#7) AND isnotnull(ss_item_sk#8))

(9) Scan parquet default.date_dim
Output [3]: [d_date_sk#9, d_date#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(10) ColumnarToRow [codegen id : 3]
Input [3]: [d_date_sk#9, d_date#10, d_year#11]

(11) Filter [codegen id : 3]
Input [3]: [d_date_sk#9, d_date#10, d_year#11]
Condition : (d_year#11 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#9))

(12) Project [codegen id : 3]
Output [2]: [d_date_sk#9, d_date#10]
Input [3]: [d_date_sk#9, d_date#10, d_year#11]

(13) BroadcastExchange
Input [2]: [d_date_sk#9, d_date#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(14) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#9]
Join condition: None

(15) Project [codegen id : 5]
Output [2]: [ss_item_sk#8, d_date#10]
Input [4]: [ss_sold_date_sk#7, ss_item_sk#8, d_date_sk#9, d_date#10]

(16) Scan parquet default.item
Output [2]: [i_item_sk#13, i_item_desc#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(17) ColumnarToRow [codegen id : 4]
Input [2]: [i_item_sk#13, i_item_desc#14]

(18) Filter [codegen id : 4]
Input [2]: [i_item_sk#13, i_item_desc#14]
Condition : isnotnull(i_item_sk#13)

(19) Project [codegen id : 4]
Output [2]: [i_item_sk#13, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, i_item_desc#14, 200, false, true) AS i_item_desc#15]
Input [2]: [i_item_sk#13, i_item_desc#14]

(20) BroadcastExchange
Input [2]: [i_item_sk#13, i_item_desc#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(21) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#13]
Join condition: None

(22) Project [codegen id : 5]
Output [3]: [d_date#10, i_item_sk#13, i_item_desc#15]
Input [4]: [ss_item_sk#8, d_date#10, i_item_sk#13, i_item_desc#15]

(23) HashAggregate [codegen id : 5]
Input [3]: [d_date#10, i_item_sk#13, i_item_desc#15]
Keys [3]: [substr(i_item_desc#15, 1, 30) AS substr(i_item_desc#15, 1, 30)#17, i_item_sk#13, d_date#10]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#18]
Results [4]: [substr(i_item_desc#15, 1, 30)#17, i_item_sk#13, d_date#10, count#19]

(24) Exchange
Input [4]: [substr(i_item_desc#15, 1, 30)#17, i_item_sk#13, d_date#10, count#19]
Arguments: hashpartitioning(substr(i_item_desc#15, 1, 30)#17, i_item_sk#13, d_date#10, 5), ENSURE_REQUIREMENTS, [id=#20]

(25) HashAggregate [codegen id : 6]
Input [4]: [substr(i_item_desc#15, 1, 30)#17, i_item_sk#13, d_date#10, count#19]
Keys [3]: [substr(i_item_desc#15, 1, 30)#17, i_item_sk#13, d_date#10]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#21]
Results [2]: [i_item_sk#13 AS item_sk#22, count(1)#21 AS count(1)#23]

(26) Filter [codegen id : 6]
Input [2]: [item_sk#22, count(1)#23]
Condition : (count(1)#23 > 4)

(27) Project [codegen id : 6]
Output [1]: [item_sk#22]
Input [2]: [item_sk#22, count(1)#23]

(28) Exchange
Input [1]: [item_sk#22]
Arguments: hashpartitioning(item_sk#22, 5), ENSURE_REQUIREMENTS, [id=#24]

(29) Sort [codegen id : 7]
Input [1]: [item_sk#22]
Arguments: [item_sk#22 ASC NULLS FIRST], false, 0

(30) SortMergeJoin
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [item_sk#22]
Join condition: None

(31) Project [codegen id : 8]
Output [4]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]

(32) Exchange
Input [4]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]
Arguments: hashpartitioning(cs_bill_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#25]

(33) Sort [codegen id : 9]
Input [4]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]
Arguments: [cs_bill_customer_sk#2 ASC NULLS FIRST], false, 0

(34) Scan parquet default.store_sales
Output [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(35) ColumnarToRow [codegen id : 10]
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]

(36) Filter [codegen id : 10]
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Condition : isnotnull(ss_customer_sk#26)

(37) Exchange
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: hashpartitioning(ss_customer_sk#26, 5), ENSURE_REQUIREMENTS, [id=#29]

(38) Sort [codegen id : 11]
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: [ss_customer_sk#26 ASC NULLS FIRST], false, 0

(39) Scan parquet default.customer
Output [1]: [c_customer_sk#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(40) ColumnarToRow [codegen id : 12]
Input [1]: [c_customer_sk#30]

(41) Filter [codegen id : 12]
Input [1]: [c_customer_sk#30]
Condition : isnotnull(c_customer_sk#30)

(42) Exchange
Input [1]: [c_customer_sk#30]
Arguments: hashpartitioning(c_customer_sk#30, 5), ENSURE_REQUIREMENTS, [id=#31]

(43) Sort [codegen id : 13]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(44) SortMergeJoin [codegen id : 14]
Left keys [1]: [ss_customer_sk#26]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(45) Project [codegen id : 14]
Output [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, c_customer_sk#30]

(46) HashAggregate [codegen id : 14]
Input [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Keys [1]: [c_customer_sk#30]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#32, isEmpty#33]
Results [3]: [c_customer_sk#30, sum#34, isEmpty#35]

(47) HashAggregate [codegen id : 14]
Input [3]: [c_customer_sk#30, sum#34, isEmpty#35]
Keys [1]: [c_customer_sk#30]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#36]
Results [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#36 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37]

(48) Filter [codegen id : 14]
Input [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#38, [id=#39] as decimal(32,6)))), DecimalType(38,8), true)))

(49) Project [codegen id : 14]
Output [1]: [c_customer_sk#30]
Input [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37]

(50) Sort [codegen id : 14]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(51) SortMergeJoin
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(52) Project [codegen id : 16]
Output [3]: [cs_sold_date_sk#1, cs_quantity#4, cs_list_price#5]
Input [4]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]

(53) Scan parquet default.date_dim
Output [3]: [d_date_sk#9, d_year#11, d_moy#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(54) ColumnarToRow [codegen id : 15]
Input [3]: [d_date_sk#9, d_year#11, d_moy#40]

(55) Filter [codegen id : 15]
Input [3]: [d_date_sk#9, d_year#11, d_moy#40]
Condition : ((((isnotnull(d_year#11) AND isnotnull(d_moy#40)) AND (d_year#11 = 2000)) AND (d_moy#40 = 2)) AND isnotnull(d_date_sk#9))

(56) Project [codegen id : 15]
Output [1]: [d_date_sk#9]
Input [3]: [d_date_sk#9, d_year#11, d_moy#40]

(57) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#41]

(58) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#9]
Join condition: None

(59) Project [codegen id : 16]
Output [1]: [CheckOverflow((promote_precision(cast(cast(cs_quantity#4 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#5 as decimal(12,2)))), DecimalType(18,2), true) AS sales#42]
Input [4]: [cs_sold_date_sk#1, cs_quantity#4, cs_list_price#5, d_date_sk#9]

(60) Scan parquet default.web_sales
Output [5]: [ws_sold_date_sk#43, ws_item_sk#44, ws_bill_customer_sk#45, ws_quantity#46, ws_list_price#47]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(61) ColumnarToRow [codegen id : 17]
Input [5]: [ws_sold_date_sk#43, ws_item_sk#44, ws_bill_customer_sk#45, ws_quantity#46, ws_list_price#47]

(62) Filter [codegen id : 17]
Input [5]: [ws_sold_date_sk#43, ws_item_sk#44, ws_bill_customer_sk#45, ws_quantity#46, ws_list_price#47]
Condition : isnotnull(ws_sold_date_sk#43)

(63) Exchange
Input [5]: [ws_sold_date_sk#43, ws_item_sk#44, ws_bill_customer_sk#45, ws_quantity#46, ws_list_price#47]
Arguments: hashpartitioning(ws_item_sk#44, 5), ENSURE_REQUIREMENTS, [id=#48]

(64) Sort [codegen id : 18]
Input [5]: [ws_sold_date_sk#43, ws_item_sk#44, ws_bill_customer_sk#45, ws_quantity#46, ws_list_price#47]
Arguments: [ws_item_sk#44 ASC NULLS FIRST], false, 0

(65) ReusedExchange [Reuses operator id: 28]
Output [1]: [item_sk#22]

(66) Sort [codegen id : 23]
Input [1]: [item_sk#22]
Arguments: [item_sk#22 ASC NULLS FIRST], false, 0

(67) SortMergeJoin
Left keys [1]: [ws_item_sk#44]
Right keys [1]: [item_sk#22]
Join condition: None

(68) Project [codegen id : 24]
Output [4]: [ws_sold_date_sk#43, ws_bill_customer_sk#45, ws_quantity#46, ws_list_price#47]
Input [5]: [ws_sold_date_sk#43, ws_item_sk#44, ws_bill_customer_sk#45, ws_quantity#46, ws_list_price#47]

(69) Exchange
Input [4]: [ws_sold_date_sk#43, ws_bill_customer_sk#45, ws_quantity#46, ws_list_price#47]
Arguments: hashpartitioning(ws_bill_customer_sk#45, 5), ENSURE_REQUIREMENTS, [id=#49]

(70) Sort [codegen id : 25]
Input [4]: [ws_sold_date_sk#43, ws_bill_customer_sk#45, ws_quantity#46, ws_list_price#47]
Arguments: [ws_bill_customer_sk#45 ASC NULLS FIRST], false, 0

(71) ReusedExchange [Reuses operator id: 37]
Output [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]

(72) Sort [codegen id : 27]
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: [ss_customer_sk#26 ASC NULLS FIRST], false, 0

(73) ReusedExchange [Reuses operator id: 42]
Output [1]: [c_customer_sk#30]

(74) Sort [codegen id : 29]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(75) SortMergeJoin [codegen id : 30]
Left keys [1]: [ss_customer_sk#26]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(76) Project [codegen id : 30]
Output [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, c_customer_sk#30]

(77) HashAggregate [codegen id : 30]
Input [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Keys [1]: [c_customer_sk#30]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#50, isEmpty#51]
Results [3]: [c_customer_sk#30, sum#52, isEmpty#53]

(78) HashAggregate [codegen id : 30]
Input [3]: [c_customer_sk#30, sum#52, isEmpty#53]
Keys [1]: [c_customer_sk#30]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#54]
Results [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#54 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#55]

(79) Filter [codegen id : 30]
Input [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#55]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#55) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#55 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#38, [id=#39] as decimal(32,6)))), DecimalType(38,8), true)))

(80) Project [codegen id : 30]
Output [1]: [c_customer_sk#30]
Input [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#55]

(81) Sort [codegen id : 30]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(82) SortMergeJoin
Left keys [1]: [ws_bill_customer_sk#45]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(83) Project [codegen id : 32]
Output [3]: [ws_sold_date_sk#43, ws_quantity#46, ws_list_price#47]
Input [4]: [ws_sold_date_sk#43, ws_bill_customer_sk#45, ws_quantity#46, ws_list_price#47]

(84) ReusedExchange [Reuses operator id: 57]
Output [1]: [d_date_sk#9]

(85) BroadcastHashJoin [codegen id : 32]
Left keys [1]: [ws_sold_date_sk#43]
Right keys [1]: [d_date_sk#9]
Join condition: None

(86) Project [codegen id : 32]
Output [1]: [CheckOverflow((promote_precision(cast(cast(ws_quantity#46 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#47 as decimal(12,2)))), DecimalType(18,2), true) AS sales#56]
Input [4]: [ws_sold_date_sk#43, ws_quantity#46, ws_list_price#47, d_date_sk#9]

(87) Union

(88) HashAggregate [codegen id : 33]
Input [1]: [sales#42]
Keys: []
Functions [1]: [partial_sum(sales#42)]
Aggregate Attributes [2]: [sum#57, isEmpty#58]
Results [2]: [sum#59, isEmpty#60]

(89) Exchange
Input [2]: [sum#59, isEmpty#60]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#61]

(90) HashAggregate [codegen id : 34]
Input [2]: [sum#59, isEmpty#60]
Keys: []
Functions [1]: [sum(sales#42)]
Aggregate Attributes [1]: [sum(sales#42)#62]
Results [1]: [sum(sales#42)#62 AS sum(sales)#63]

===== Subqueries =====

Subquery:1 Hosting operator id = 48 Hosting Expression = Subquery scalar-subquery#38, [id=#39]
* HashAggregate (114)
+- Exchange (113)
   +- * HashAggregate (112)
      +- * HashAggregate (111)
         +- * HashAggregate (110)
            +- * Project (109)
               +- * SortMergeJoin Inner (108)
                  :- * Sort (102)
                  :  +- Exchange (101)
                  :     +- * Project (100)
                  :        +- * BroadcastHashJoin Inner BuildRight (99)
                  :           :- * Filter (93)
                  :           :  +- * ColumnarToRow (92)
                  :           :     +- Scan parquet default.store_sales (91)
                  :           +- BroadcastExchange (98)
                  :              +- * Project (97)
                  :                 +- * Filter (96)
                  :                    +- * ColumnarToRow (95)
                  :                       +- Scan parquet default.date_dim (94)
                  +- * Sort (107)
                     +- Exchange (106)
                        +- * Filter (105)
                           +- * ColumnarToRow (104)
                              +- Scan parquet default.customer (103)


(91) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#7, ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(92) ColumnarToRow [codegen id : 2]
Input [4]: [ss_sold_date_sk#7, ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]

(93) Filter [codegen id : 2]
Input [4]: [ss_sold_date_sk#7, ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Condition : (isnotnull(ss_customer_sk#26) AND isnotnull(ss_sold_date_sk#7))

(94) Scan parquet default.date_dim
Output [2]: [d_date_sk#9, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(95) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#11]

(96) Filter [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#11]
Condition : (d_year#11 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#9))

(97) Project [codegen id : 1]
Output [1]: [d_date_sk#9]
Input [2]: [d_date_sk#9, d_year#11]

(98) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#64]

(99) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#9]
Join condition: None

(100) Project [codegen id : 2]
Output [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Input [5]: [ss_sold_date_sk#7, ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, d_date_sk#9]

(101) Exchange
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: hashpartitioning(ss_customer_sk#26, 5), ENSURE_REQUIREMENTS, [id=#65]

(102) Sort [codegen id : 3]
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: [ss_customer_sk#26 ASC NULLS FIRST], false, 0

(103) Scan parquet default.customer
Output [1]: [c_customer_sk#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(104) ColumnarToRow [codegen id : 4]
Input [1]: [c_customer_sk#30]

(105) Filter [codegen id : 4]
Input [1]: [c_customer_sk#30]
Condition : isnotnull(c_customer_sk#30)

(106) Exchange
Input [1]: [c_customer_sk#30]
Arguments: hashpartitioning(c_customer_sk#30, 5), ENSURE_REQUIREMENTS, [id=#66]

(107) Sort [codegen id : 5]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(108) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#26]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(109) Project [codegen id : 6]
Output [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, c_customer_sk#30]

(110) HashAggregate [codegen id : 6]
Input [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Keys [1]: [c_customer_sk#30]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#67, isEmpty#68]
Results [3]: [c_customer_sk#30, sum#69, isEmpty#70]

(111) HashAggregate [codegen id : 6]
Input [3]: [c_customer_sk#30, sum#69, isEmpty#70]
Keys [1]: [c_customer_sk#30]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#71]
Results [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#71 AS csales#72]

(112) HashAggregate [codegen id : 6]
Input [1]: [csales#72]
Keys: []
Functions [1]: [partial_max(csales#72)]
Aggregate Attributes [1]: [max#73]
Results [1]: [max#74]

(113) Exchange
Input [1]: [max#74]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#75]

(114) HashAggregate [codegen id : 7]
Input [1]: [max#74]
Keys: []
Functions [1]: [max(csales#72)]
Aggregate Attributes [1]: [max(csales#72)#76]
Results [1]: [max(csales#72)#76 AS tpcds_cmax#77]

Subquery:2 Hosting operator id = 79 Hosting Expression = ReusedSubquery Subquery scalar-subquery#38, [id=#39]


