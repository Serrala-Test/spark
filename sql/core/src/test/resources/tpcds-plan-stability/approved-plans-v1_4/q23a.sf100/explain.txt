== Physical Plan ==
* HashAggregate (86)
+- Exchange (85)
   +- * HashAggregate (84)
      +- Union (83)
         :- * Project (46)
         :  +- * BroadcastHashJoin Inner BuildRight (45)
         :     :- * Project (43)
         :     :  +- * SortMergeJoin LeftSemi (42)
         :     :     :- * Sort (26)
         :     :     :  +- Exchange (25)
         :     :     :     +- * Project (24)
         :     :     :        +- * SortMergeJoin LeftSemi (23)
         :     :     :           :- * Sort (5)
         :     :     :           :  +- Exchange (4)
         :     :     :           :     +- * Filter (3)
         :     :     :           :        +- * ColumnarToRow (2)
         :     :     :           :           +- Scan parquet spark_catalog.default.catalog_sales (1)
         :     :     :           +- * Sort (22)
         :     :     :              +- * Project (21)
         :     :     :                 +- * Filter (20)
         :     :     :                    +- * HashAggregate (19)
         :     :     :                       +- * HashAggregate (18)
         :     :     :                          +- * Project (17)
         :     :     :                             +- * SortMergeJoin Inner (16)
         :     :     :                                :- * Sort (13)
         :     :     :                                :  +- Exchange (12)
         :     :     :                                :     +- * Project (11)
         :     :     :                                :        +- * BroadcastHashJoin Inner BuildRight (10)
         :     :     :                                :           :- * Filter (8)
         :     :     :                                :           :  +- * ColumnarToRow (7)
         :     :     :                                :           :     +- Scan parquet spark_catalog.default.store_sales (6)
         :     :     :                                :           +- ReusedExchange (9)
         :     :     :                                +- * Sort (15)
         :     :     :                                   +- ReusedExchange (14)
         :     :     +- * Sort (41)
         :     :        +- * Project (40)
         :     :           +- * Filter (39)
         :     :              +- * HashAggregate (38)
         :     :                 +- * HashAggregate (37)
         :     :                    +- * Project (36)
         :     :                       +- * SortMergeJoin Inner (35)
         :     :                          :- * Sort (32)
         :     :                          :  +- Exchange (31)
         :     :                          :     +- * Project (30)
         :     :                          :        +- * Filter (29)
         :     :                          :           +- * ColumnarToRow (28)
         :     :                          :              +- Scan parquet spark_catalog.default.store_sales (27)
         :     :                          +- * Sort (34)
         :     :                             +- ReusedExchange (33)
         :     +- ReusedExchange (44)
         +- * Project (82)
            +- * BroadcastHashJoin Inner BuildRight (81)
               :- * Project (79)
               :  +- * SortMergeJoin LeftSemi (78)
               :     :- * Sort (66)
               :     :  +- Exchange (65)
               :     :     +- * Project (64)
               :     :        +- * SortMergeJoin LeftSemi (63)
               :     :           :- * Sort (51)
               :     :           :  +- Exchange (50)
               :     :           :     +- * Filter (49)
               :     :           :        +- * ColumnarToRow (48)
               :     :           :           +- Scan parquet spark_catalog.default.web_sales (47)
               :     :           +- * Sort (62)
               :     :              +- * Project (61)
               :     :                 +- * Filter (60)
               :     :                    +- * HashAggregate (59)
               :     :                       +- * HashAggregate (58)
               :     :                          +- * Project (57)
               :     :                             +- * SortMergeJoin Inner (56)
               :     :                                :- * Sort (53)
               :     :                                :  +- ReusedExchange (52)
               :     :                                +- * Sort (55)
               :     :                                   +- ReusedExchange (54)
               :     +- * Sort (77)
               :        +- * Project (76)
               :           +- * Filter (75)
               :              +- * HashAggregate (74)
               :                 +- * HashAggregate (73)
               :                    +- * Project (72)
               :                       +- * SortMergeJoin Inner (71)
               :                          :- * Sort (68)
               :                          :  +- ReusedExchange (67)
               :                          +- * Sort (70)
               :                             +- ReusedExchange (69)
               +- ReusedExchange (80)


(1) Scan parquet spark_catalog.default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(3) Filter [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Condition : (true AND true)

(4) Exchange
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_item_sk#2, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_item_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]

(8) Filter [codegen id : 4]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Condition : (isnotnull(ss_item_sk#7) AND might_contain(Subquery scalar-subquery#10, [id=#11], xxhash64(ss_item_sk#7, 42), false))

(9) ReusedExchange [Reuses operator id: 103]
Output [2]: [d_date_sk#12, d_date#13]

(10) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#12]
Join type: Inner
Join condition: None

(11) Project [codegen id : 4]
Output [2]: [ss_item_sk#7, d_date#13]
Input [4]: [ss_item_sk#7, ss_sold_date_sk#8, d_date_sk#12, d_date#13]

(12) Exchange
Input [2]: [ss_item_sk#7, d_date#13]
Arguments: hashpartitioning(ss_item_sk#7, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(13) Sort [codegen id : 5]
Input [2]: [ss_item_sk#7, d_date#13]
Arguments: [ss_item_sk#7 ASC NULLS FIRST], false, 0

(14) ReusedExchange [Reuses operator id: 95]
Output [2]: [i_item_sk#14, i_item_desc#15]

(15) Sort [codegen id : 7]
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: [i_item_sk#14 ASC NULLS FIRST], false, 0

(16) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#7]
Right keys [1]: [i_item_sk#14]
Join type: Inner
Join condition: None

(17) Project [codegen id : 8]
Output [3]: [d_date#13, i_item_sk#14, substr(i_item_desc#15, 1, 30) AS _groupingexpression#16]
Input [4]: [ss_item_sk#7, d_date#13, i_item_sk#14, i_item_desc#15]

(18) HashAggregate [codegen id : 8]
Input [3]: [d_date#13, i_item_sk#14, _groupingexpression#16]
Keys [3]: [_groupingexpression#16, i_item_sk#14, d_date#13]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#17]
Results [4]: [_groupingexpression#16, i_item_sk#14, d_date#13, count#18]

(19) HashAggregate [codegen id : 8]
Input [4]: [_groupingexpression#16, i_item_sk#14, d_date#13, count#18]
Keys [3]: [_groupingexpression#16, i_item_sk#14, d_date#13]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#19]
Results [2]: [i_item_sk#14 AS item_sk#20, count(1)#19 AS cnt#21]

(20) Filter [codegen id : 8]
Input [2]: [item_sk#20, cnt#21]
Condition : (cnt#21 > 4)

(21) Project [codegen id : 8]
Output [1]: [item_sk#20]
Input [2]: [item_sk#20, cnt#21]

(22) Sort [codegen id : 8]
Input [1]: [item_sk#20]
Arguments: [item_sk#20 ASC NULLS FIRST], false, 0

(23) SortMergeJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#20]
Join type: LeftSemi
Join condition: None

(24) Project [codegen id : 9]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(25) Exchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(26) Sort [codegen id : 10]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(27) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24, ss_sold_date_sk#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(28) ColumnarToRow [codegen id : 11]
Input [4]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24, ss_sold_date_sk#25]

(29) Filter [codegen id : 11]
Input [4]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24, ss_sold_date_sk#25]
Condition : (isnotnull(ss_customer_sk#22) AND might_contain(Subquery scalar-subquery#26, [id=#27], xxhash64(ss_customer_sk#22, 42), false))

(30) Project [codegen id : 11]
Output [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Input [4]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24, ss_sold_date_sk#25]

(31) Exchange
Input [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Arguments: hashpartitioning(ss_customer_sk#22, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(32) Sort [codegen id : 12]
Input [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Arguments: [ss_customer_sk#22 ASC NULLS FIRST], false, 0

(33) ReusedExchange [Reuses operator id: 136]
Output [1]: [c_customer_sk#28]

(34) Sort [codegen id : 14]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(35) SortMergeJoin [codegen id : 15]
Left keys [1]: [ss_customer_sk#22]
Right keys [1]: [c_customer_sk#28]
Join type: Inner
Join condition: None

(36) Project [codegen id : 15]
Output [3]: [ss_quantity#23, ss_sales_price#24, c_customer_sk#28]
Input [4]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24, c_customer_sk#28]

(37) HashAggregate [codegen id : 15]
Input [3]: [ss_quantity#23, ss_sales_price#24, c_customer_sk#28]
Keys [1]: [c_customer_sk#28]
Functions [1]: [partial_sum((cast(ss_quantity#23 as decimal(10,0)) * ss_sales_price#24))]
Aggregate Attributes [2]: [sum#29, isEmpty#30]
Results [3]: [c_customer_sk#28, sum#31, isEmpty#32]

(38) HashAggregate [codegen id : 15]
Input [3]: [c_customer_sk#28, sum#31, isEmpty#32]
Keys [1]: [c_customer_sk#28]
Functions [1]: [sum((cast(ss_quantity#23 as decimal(10,0)) * ss_sales_price#24))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#23 as decimal(10,0)) * ss_sales_price#24))#33]
Results [2]: [c_customer_sk#28, sum((cast(ss_quantity#23 as decimal(10,0)) * ss_sales_price#24))#33 AS ssales#34]

(39) Filter [codegen id : 15]
Input [2]: [c_customer_sk#28, ssales#34]
Condition : (isnotnull(ssales#34) AND (cast(ssales#34 as decimal(38,8)) > (0.500000 * Subquery scalar-subquery#35, [id=#36])))

(40) Project [codegen id : 15]
Output [1]: [c_customer_sk#28]
Input [2]: [c_customer_sk#28, ssales#34]

(41) Sort [codegen id : 15]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(42) SortMergeJoin [codegen id : 17]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#28]
Join type: LeftSemi
Join condition: None

(43) Project [codegen id : 17]
Output [3]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(44) ReusedExchange [Reuses operator id: 91]
Output [1]: [d_date_sk#37]

(45) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#37]
Join type: Inner
Join condition: None

(46) Project [codegen id : 17]
Output [1]: [(cast(cs_quantity#3 as decimal(10,0)) * cs_list_price#4) AS sales#38]
Input [4]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, d_date_sk#37]

(47) Scan parquet spark_catalog.default.web_sales
Output [5]: [ws_item_sk#39, ws_bill_customer_sk#40, ws_quantity#41, ws_list_price#42, ws_sold_date_sk#43]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#43), dynamicpruningexpression(ws_sold_date_sk#43 IN dynamicpruning#6)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(48) ColumnarToRow [codegen id : 18]
Input [5]: [ws_item_sk#39, ws_bill_customer_sk#40, ws_quantity#41, ws_list_price#42, ws_sold_date_sk#43]

(49) Filter [codegen id : 18]
Input [5]: [ws_item_sk#39, ws_bill_customer_sk#40, ws_quantity#41, ws_list_price#42, ws_sold_date_sk#43]
Condition : (true AND true)

(50) Exchange
Input [5]: [ws_item_sk#39, ws_bill_customer_sk#40, ws_quantity#41, ws_list_price#42, ws_sold_date_sk#43]
Arguments: hashpartitioning(ws_item_sk#39, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(51) Sort [codegen id : 19]
Input [5]: [ws_item_sk#39, ws_bill_customer_sk#40, ws_quantity#41, ws_list_price#42, ws_sold_date_sk#43]
Arguments: [ws_item_sk#39 ASC NULLS FIRST], false, 0

(52) ReusedExchange [Reuses operator id: 12]
Output [2]: [ss_item_sk#7, d_date#13]

(53) Sort [codegen id : 22]
Input [2]: [ss_item_sk#7, d_date#13]
Arguments: [ss_item_sk#7 ASC NULLS FIRST], false, 0

(54) ReusedExchange [Reuses operator id: 95]
Output [2]: [i_item_sk#14, i_item_desc#15]

(55) Sort [codegen id : 24]
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: [i_item_sk#14 ASC NULLS FIRST], false, 0

(56) SortMergeJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#7]
Right keys [1]: [i_item_sk#14]
Join type: Inner
Join condition: None

(57) Project [codegen id : 25]
Output [3]: [d_date#13, i_item_sk#14, substr(i_item_desc#15, 1, 30) AS _groupingexpression#16]
Input [4]: [ss_item_sk#7, d_date#13, i_item_sk#14, i_item_desc#15]

(58) HashAggregate [codegen id : 25]
Input [3]: [d_date#13, i_item_sk#14, _groupingexpression#16]
Keys [3]: [_groupingexpression#16, i_item_sk#14, d_date#13]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#17]
Results [4]: [_groupingexpression#16, i_item_sk#14, d_date#13, count#18]

(59) HashAggregate [codegen id : 25]
Input [4]: [_groupingexpression#16, i_item_sk#14, d_date#13, count#18]
Keys [3]: [_groupingexpression#16, i_item_sk#14, d_date#13]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#19]
Results [2]: [i_item_sk#14 AS item_sk#20, count(1)#19 AS cnt#21]

(60) Filter [codegen id : 25]
Input [2]: [item_sk#20, cnt#21]
Condition : (cnt#21 > 4)

(61) Project [codegen id : 25]
Output [1]: [item_sk#20]
Input [2]: [item_sk#20, cnt#21]

(62) Sort [codegen id : 25]
Input [1]: [item_sk#20]
Arguments: [item_sk#20 ASC NULLS FIRST], false, 0

(63) SortMergeJoin [codegen id : 26]
Left keys [1]: [ws_item_sk#39]
Right keys [1]: [item_sk#20]
Join type: LeftSemi
Join condition: None

(64) Project [codegen id : 26]
Output [4]: [ws_bill_customer_sk#40, ws_quantity#41, ws_list_price#42, ws_sold_date_sk#43]
Input [5]: [ws_item_sk#39, ws_bill_customer_sk#40, ws_quantity#41, ws_list_price#42, ws_sold_date_sk#43]

(65) Exchange
Input [4]: [ws_bill_customer_sk#40, ws_quantity#41, ws_list_price#42, ws_sold_date_sk#43]
Arguments: hashpartitioning(ws_bill_customer_sk#40, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(66) Sort [codegen id : 27]
Input [4]: [ws_bill_customer_sk#40, ws_quantity#41, ws_list_price#42, ws_sold_date_sk#43]
Arguments: [ws_bill_customer_sk#40 ASC NULLS FIRST], false, 0

(67) ReusedExchange [Reuses operator id: 31]
Output [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]

(68) Sort [codegen id : 29]
Input [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Arguments: [ss_customer_sk#22 ASC NULLS FIRST], false, 0

(69) ReusedExchange [Reuses operator id: 136]
Output [1]: [c_customer_sk#28]

(70) Sort [codegen id : 31]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(71) SortMergeJoin [codegen id : 32]
Left keys [1]: [ss_customer_sk#22]
Right keys [1]: [c_customer_sk#28]
Join type: Inner
Join condition: None

(72) Project [codegen id : 32]
Output [3]: [ss_quantity#23, ss_sales_price#24, c_customer_sk#28]
Input [4]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24, c_customer_sk#28]

(73) HashAggregate [codegen id : 32]
Input [3]: [ss_quantity#23, ss_sales_price#24, c_customer_sk#28]
Keys [1]: [c_customer_sk#28]
Functions [1]: [partial_sum((cast(ss_quantity#23 as decimal(10,0)) * ss_sales_price#24))]
Aggregate Attributes [2]: [sum#29, isEmpty#30]
Results [3]: [c_customer_sk#28, sum#31, isEmpty#32]

(74) HashAggregate [codegen id : 32]
Input [3]: [c_customer_sk#28, sum#31, isEmpty#32]
Keys [1]: [c_customer_sk#28]
Functions [1]: [sum((cast(ss_quantity#23 as decimal(10,0)) * ss_sales_price#24))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#23 as decimal(10,0)) * ss_sales_price#24))#33]
Results [2]: [c_customer_sk#28, sum((cast(ss_quantity#23 as decimal(10,0)) * ss_sales_price#24))#33 AS ssales#34]

(75) Filter [codegen id : 32]
Input [2]: [c_customer_sk#28, ssales#34]
Condition : (isnotnull(ssales#34) AND (cast(ssales#34 as decimal(38,8)) > (0.500000 * ReusedSubquery Subquery scalar-subquery#35, [id=#36])))

(76) Project [codegen id : 32]
Output [1]: [c_customer_sk#28]
Input [2]: [c_customer_sk#28, ssales#34]

(77) Sort [codegen id : 32]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(78) SortMergeJoin [codegen id : 34]
Left keys [1]: [ws_bill_customer_sk#40]
Right keys [1]: [c_customer_sk#28]
Join type: LeftSemi
Join condition: None

(79) Project [codegen id : 34]
Output [3]: [ws_quantity#41, ws_list_price#42, ws_sold_date_sk#43]
Input [4]: [ws_bill_customer_sk#40, ws_quantity#41, ws_list_price#42, ws_sold_date_sk#43]

(80) ReusedExchange [Reuses operator id: 91]
Output [1]: [d_date_sk#44]

(81) BroadcastHashJoin [codegen id : 34]
Left keys [1]: [ws_sold_date_sk#43]
Right keys [1]: [d_date_sk#44]
Join type: Inner
Join condition: None

(82) Project [codegen id : 34]
Output [1]: [(cast(ws_quantity#41 as decimal(10,0)) * ws_list_price#42) AS sales#45]
Input [4]: [ws_quantity#41, ws_list_price#42, ws_sold_date_sk#43, d_date_sk#44]

(83) Union

(84) HashAggregate [codegen id : 35]
Input [1]: [sales#38]
Keys: []
Functions [1]: [partial_sum(sales#38)]
Aggregate Attributes [2]: [sum#46, isEmpty#47]
Results [2]: [sum#48, isEmpty#49]

(85) Exchange
Input [2]: [sum#48, isEmpty#49]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=7]

(86) HashAggregate [codegen id : 36]
Input [2]: [sum#48, isEmpty#49]
Keys: []
Functions [1]: [sum(sales#38)]
Aggregate Attributes [1]: [sum(sales#38)#50]
Results [1]: [sum(sales#38)#50 AS sum(sales)#51]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (91)
+- * Project (90)
   +- * Filter (89)
      +- * ColumnarToRow (88)
         +- Scan parquet spark_catalog.default.date_dim (87)


(87) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#37, d_year#52, d_moy#53]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(88) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#37, d_year#52, d_moy#53]

(89) Filter [codegen id : 1]
Input [3]: [d_date_sk#37, d_year#52, d_moy#53]
Condition : ((((isnotnull(d_year#52) AND isnotnull(d_moy#53)) AND (d_year#52 = 2000)) AND (d_moy#53 = 2)) AND isnotnull(d_date_sk#37))

(90) Project [codegen id : 1]
Output [1]: [d_date_sk#37]
Input [3]: [d_date_sk#37, d_year#52, d_moy#53]

(91) BroadcastExchange
Input [1]: [d_date_sk#37]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

Subquery:2 Hosting operator id = 8 Hosting Expression = Subquery scalar-subquery#10, [id=#11]
ObjectHashAggregate (98)
+- Exchange (97)
   +- ObjectHashAggregate (96)
      +- Exchange (95)
         +- * Filter (94)
            +- * ColumnarToRow (93)
               +- Scan parquet spark_catalog.default.item (92)


(92) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#14, i_item_desc#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(93) ColumnarToRow [codegen id : 1]
Input [2]: [i_item_sk#14, i_item_desc#15]

(94) Filter [codegen id : 1]
Input [2]: [i_item_sk#14, i_item_desc#15]
Condition : isnotnull(i_item_sk#14)

(95) Exchange
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: hashpartitioning(i_item_sk#14, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(96) ObjectHashAggregate
Input [2]: [i_item_sk#14, i_item_desc#15]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(i_item_sk#14, 42), 204000, 1632000, 0, 0)]
Aggregate Attributes [1]: [buf#54]
Results [1]: [buf#55]

(97) Exchange
Input [1]: [buf#55]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=10]

(98) ObjectHashAggregate
Input [1]: [buf#55]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(i_item_sk#14, 42), 204000, 1632000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(i_item_sk#14, 42), 204000, 1632000, 0, 0)#56]
Results [1]: [bloom_filter_agg(xxhash64(i_item_sk#14, 42), 204000, 1632000, 0, 0)#56 AS bloomFilter#57]

Subquery:3 Hosting operator id = 6 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (103)
+- * Project (102)
   +- * Filter (101)
      +- * ColumnarToRow (100)
         +- Scan parquet spark_catalog.default.date_dim (99)


(99) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#12, d_date#13, d_year#58]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(100) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#12, d_date#13, d_year#58]

(101) Filter [codegen id : 1]
Input [3]: [d_date_sk#12, d_date#13, d_year#58]
Condition : (d_year#58 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#12))

(102) Project [codegen id : 1]
Output [2]: [d_date_sk#12, d_date#13]
Input [3]: [d_date_sk#12, d_date#13, d_year#58]

(103) BroadcastExchange
Input [2]: [d_date_sk#12, d_date#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=11]

Subquery:4 Hosting operator id = 39 Hosting Expression = Subquery scalar-subquery#35, [id=#36]
* HashAggregate (120)
+- Exchange (119)
   +- * HashAggregate (118)
      +- * HashAggregate (117)
         +- * HashAggregate (116)
            +- * Project (115)
               +- * SortMergeJoin Inner (114)
                  :- * Sort (111)
                  :  +- Exchange (110)
                  :     +- * Project (109)
                  :        +- * BroadcastHashJoin Inner BuildRight (108)
                  :           :- * Filter (106)
                  :           :  +- * ColumnarToRow (105)
                  :           :     +- Scan parquet spark_catalog.default.store_sales (104)
                  :           +- ReusedExchange (107)
                  +- * Sort (113)
                     +- ReusedExchange (112)


(104) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_customer_sk#59, ss_quantity#60, ss_sales_price#61, ss_sold_date_sk#62]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#62), dynamicpruningexpression(ss_sold_date_sk#62 IN dynamicpruning#63)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(105) ColumnarToRow [codegen id : 2]
Input [4]: [ss_customer_sk#59, ss_quantity#60, ss_sales_price#61, ss_sold_date_sk#62]

(106) Filter [codegen id : 2]
Input [4]: [ss_customer_sk#59, ss_quantity#60, ss_sales_price#61, ss_sold_date_sk#62]
Condition : (isnotnull(ss_customer_sk#59) AND might_contain(Subquery scalar-subquery#64, [id=#65], xxhash64(ss_customer_sk#59, 42), false))

(107) ReusedExchange [Reuses operator id: 132]
Output [1]: [d_date_sk#66]

(108) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#62]
Right keys [1]: [d_date_sk#66]
Join type: Inner
Join condition: None

(109) Project [codegen id : 2]
Output [3]: [ss_customer_sk#59, ss_quantity#60, ss_sales_price#61]
Input [5]: [ss_customer_sk#59, ss_quantity#60, ss_sales_price#61, ss_sold_date_sk#62, d_date_sk#66]

(110) Exchange
Input [3]: [ss_customer_sk#59, ss_quantity#60, ss_sales_price#61]
Arguments: hashpartitioning(ss_customer_sk#59, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(111) Sort [codegen id : 3]
Input [3]: [ss_customer_sk#59, ss_quantity#60, ss_sales_price#61]
Arguments: [ss_customer_sk#59 ASC NULLS FIRST], false, 0

(112) ReusedExchange [Reuses operator id: 136]
Output [1]: [c_customer_sk#67]

(113) Sort [codegen id : 5]
Input [1]: [c_customer_sk#67]
Arguments: [c_customer_sk#67 ASC NULLS FIRST], false, 0

(114) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#59]
Right keys [1]: [c_customer_sk#67]
Join type: Inner
Join condition: None

(115) Project [codegen id : 6]
Output [3]: [ss_quantity#60, ss_sales_price#61, c_customer_sk#67]
Input [4]: [ss_customer_sk#59, ss_quantity#60, ss_sales_price#61, c_customer_sk#67]

(116) HashAggregate [codegen id : 6]
Input [3]: [ss_quantity#60, ss_sales_price#61, c_customer_sk#67]
Keys [1]: [c_customer_sk#67]
Functions [1]: [partial_sum((cast(ss_quantity#60 as decimal(10,0)) * ss_sales_price#61))]
Aggregate Attributes [2]: [sum#68, isEmpty#69]
Results [3]: [c_customer_sk#67, sum#70, isEmpty#71]

(117) HashAggregate [codegen id : 6]
Input [3]: [c_customer_sk#67, sum#70, isEmpty#71]
Keys [1]: [c_customer_sk#67]
Functions [1]: [sum((cast(ss_quantity#60 as decimal(10,0)) * ss_sales_price#61))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#60 as decimal(10,0)) * ss_sales_price#61))#72]
Results [1]: [sum((cast(ss_quantity#60 as decimal(10,0)) * ss_sales_price#61))#72 AS csales#73]

(118) HashAggregate [codegen id : 6]
Input [1]: [csales#73]
Keys: []
Functions [1]: [partial_max(csales#73)]
Aggregate Attributes [1]: [max#74]
Results [1]: [max#75]

(119) Exchange
Input [1]: [max#75]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=13]

(120) HashAggregate [codegen id : 7]
Input [1]: [max#75]
Keys: []
Functions [1]: [max(csales#73)]
Aggregate Attributes [1]: [max(csales#73)#76]
Results [1]: [max(csales#73)#76 AS tpcds_cmax#77]

Subquery:5 Hosting operator id = 106 Hosting Expression = Subquery scalar-subquery#64, [id=#65]
ObjectHashAggregate (127)
+- Exchange (126)
   +- ObjectHashAggregate (125)
      +- Exchange (124)
         +- * Filter (123)
            +- * ColumnarToRow (122)
               +- Scan parquet spark_catalog.default.customer (121)


(121) Scan parquet spark_catalog.default.customer
Output [1]: [c_customer_sk#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(122) ColumnarToRow [codegen id : 1]
Input [1]: [c_customer_sk#28]

(123) Filter [codegen id : 1]
Input [1]: [c_customer_sk#28]
Condition : isnotnull(c_customer_sk#28)

(124) Exchange
Input [1]: [c_customer_sk#28]
Arguments: hashpartitioning(c_customer_sk#67, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(125) ObjectHashAggregate
Input [1]: [c_customer_sk#28]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(c_customer_sk#28, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [buf#78]
Results [1]: [buf#79]

(126) Exchange
Input [1]: [buf#79]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=15]

(127) ObjectHashAggregate
Input [1]: [buf#79]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(c_customer_sk#28, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(c_customer_sk#28, 42), 2000000, 16000000, 0, 0)#80]
Results [1]: [bloom_filter_agg(xxhash64(c_customer_sk#28, 42), 2000000, 16000000, 0, 0)#80 AS bloomFilter#81]

Subquery:6 Hosting operator id = 104 Hosting Expression = ss_sold_date_sk#62 IN dynamicpruning#63
BroadcastExchange (132)
+- * Project (131)
   +- * Filter (130)
      +- * ColumnarToRow (129)
         +- Scan parquet spark_catalog.default.date_dim (128)


(128) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#66, d_year#82]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(129) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#66, d_year#82]

(130) Filter [codegen id : 1]
Input [2]: [d_date_sk#66, d_year#82]
Condition : (d_year#82 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#66))

(131) Project [codegen id : 1]
Output [1]: [d_date_sk#66]
Input [2]: [d_date_sk#66, d_year#82]

(132) BroadcastExchange
Input [1]: [d_date_sk#66]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=16]

Subquery:7 Hosting operator id = 29 Hosting Expression = Subquery scalar-subquery#26, [id=#27]
ObjectHashAggregate (139)
+- Exchange (138)
   +- ObjectHashAggregate (137)
      +- Exchange (136)
         +- * Filter (135)
            +- * ColumnarToRow (134)
               +- Scan parquet spark_catalog.default.customer (133)


(133) Scan parquet spark_catalog.default.customer
Output [1]: [c_customer_sk#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(134) ColumnarToRow [codegen id : 1]
Input [1]: [c_customer_sk#28]

(135) Filter [codegen id : 1]
Input [1]: [c_customer_sk#28]
Condition : isnotnull(c_customer_sk#28)

(136) Exchange
Input [1]: [c_customer_sk#28]
Arguments: hashpartitioning(c_customer_sk#28, 5), ENSURE_REQUIREMENTS, [plan_id=17]

(137) ObjectHashAggregate
Input [1]: [c_customer_sk#28]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(c_customer_sk#28, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [buf#78]
Results [1]: [buf#79]

(138) Exchange
Input [1]: [buf#79]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=18]

(139) ObjectHashAggregate
Input [1]: [buf#79]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(c_customer_sk#28, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(c_customer_sk#28, 42), 2000000, 16000000, 0, 0)#80]
Results [1]: [bloom_filter_agg(xxhash64(c_customer_sk#28, 42), 2000000, 16000000, 0, 0)#80 AS bloomFilter#81]

Subquery:8 Hosting operator id = 47 Hosting Expression = ws_sold_date_sk#43 IN dynamicpruning#6

Subquery:9 Hosting operator id = 75 Hosting Expression = ReusedSubquery Subquery scalar-subquery#35, [id=#36]


