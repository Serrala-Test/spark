== Physical Plan ==
* HashAggregate (92)
+- Exchange (91)
   +- * HashAggregate (90)
      +- Union (89)
         :- * Project (58)
         :  +- * BroadcastHashJoin Inner BuildLeft (57)
         :     :- BroadcastExchange (52)
         :     :  +- * Project (51)
         :     :     +- SortMergeJoin LeftSemi (50)
         :     :        :- * Sort (31)
         :     :        :  +- Exchange (30)
         :     :        :     +- * Project (29)
         :     :        :        +- SortMergeJoin LeftSemi (28)
         :     :        :           :- * Sort (4)
         :     :        :           :  +- Exchange (3)
         :     :        :           :     +- * ColumnarToRow (2)
         :     :        :           :        +- Scan parquet default.catalog_sales (1)
         :     :        :           +- * Sort (27)
         :     :        :              +- Exchange (26)
         :     :        :                 +- * Project (25)
         :     :        :                    +- * Filter (24)
         :     :        :                       +- * HashAggregate (23)
         :     :        :                          +- Exchange (22)
         :     :        :                             +- * HashAggregate (21)
         :     :        :                                +- * Project (20)
         :     :        :                                   +- * BroadcastHashJoin Inner BuildLeft (19)
         :     :        :                                      :- BroadcastExchange (15)
         :     :        :                                      :  +- * Project (14)
         :     :        :                                      :     +- * BroadcastHashJoin Inner BuildLeft (13)
         :     :        :                                      :        :- BroadcastExchange (8)
         :     :        :                                      :        :  +- * Filter (7)
         :     :        :                                      :        :     +- * ColumnarToRow (6)
         :     :        :                                      :        :        +- Scan parquet default.store_sales (5)
         :     :        :                                      :        +- * Project (12)
         :     :        :                                      :           +- * Filter (11)
         :     :        :                                      :              +- * ColumnarToRow (10)
         :     :        :                                      :                 +- Scan parquet default.date_dim (9)
         :     :        :                                      +- * Filter (18)
         :     :        :                                         +- * ColumnarToRow (17)
         :     :        :                                            +- Scan parquet default.item (16)
         :     :        +- * Sort (49)
         :     :           +- * Project (48)
         :     :              +- * Filter (47)
         :     :                 +- * HashAggregate (46)
         :     :                    +- * HashAggregate (45)
         :     :                       +- * Project (44)
         :     :                          +- * SortMergeJoin Inner (43)
         :     :                             :- * Sort (37)
         :     :                             :  +- Exchange (36)
         :     :                             :     +- * Project (35)
         :     :                             :        +- * Filter (34)
         :     :                             :           +- * ColumnarToRow (33)
         :     :                             :              +- Scan parquet default.store_sales (32)
         :     :                             +- * Sort (42)
         :     :                                +- Exchange (41)
         :     :                                   +- * Filter (40)
         :     :                                      +- * ColumnarToRow (39)
         :     :                                         +- Scan parquet default.customer (38)
         :     +- * Project (56)
         :        +- * Filter (55)
         :           +- * ColumnarToRow (54)
         :              +- Scan parquet default.date_dim (53)
         +- * Project (88)
            +- * BroadcastHashJoin Inner BuildLeft (87)
               :- BroadcastExchange (82)
               :  +- * Project (81)
               :     +- SortMergeJoin LeftSemi (80)
               :        :- * Sort (68)
               :        :  +- Exchange (67)
               :        :     +- * Project (66)
               :        :        +- SortMergeJoin LeftSemi (65)
               :        :           :- * Sort (62)
               :        :           :  +- Exchange (61)
               :        :           :     +- * ColumnarToRow (60)
               :        :           :        +- Scan parquet default.web_sales (59)
               :        :           +- * Sort (64)
               :        :              +- ReusedExchange (63)
               :        +- * Sort (79)
               :           +- * Project (78)
               :              +- * Filter (77)
               :                 +- * HashAggregate (76)
               :                    +- * HashAggregate (75)
               :                       +- * Project (74)
               :                          +- * SortMergeJoin Inner (73)
               :                             :- * Sort (70)
               :                             :  +- ReusedExchange (69)
               :                             +- * Sort (72)
               :                                +- ReusedExchange (71)
               +- * Project (86)
                  +- * Filter (85)
                     +- * ColumnarToRow (84)
                        +- Scan parquet default.date_dim (83)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(true)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(3) Exchange
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#6]

(4) Sort [codegen id : 2]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_item_sk#2 ASC NULLS FIRST], false, 0

(5) Scan parquet default.store_sales
Output [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(6) ColumnarToRow [codegen id : 3]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]

(7) Filter [codegen id : 3]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Condition : isnotnull(ss_item_sk#7)

(8) BroadcastExchange
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#9]

(9) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_date#11, d_year#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(10) ColumnarToRow
Input [3]: [d_date_sk#10, d_date#11, d_year#12]

(11) Filter
Input [3]: [d_date_sk#10, d_date#11, d_year#12]
Condition : (d_year#12 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#10))

(12) Project
Output [2]: [d_date_sk#10, d_date#11]
Input [3]: [d_date_sk#10, d_date#11, d_year#12]

(13) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#10]
Join condition: None

(14) Project [codegen id : 4]
Output [2]: [ss_item_sk#7, d_date#11]
Input [4]: [ss_item_sk#7, ss_sold_date_sk#8, d_date_sk#10, d_date#11]

(15) BroadcastExchange
Input [2]: [ss_item_sk#7, d_date#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13]

(16) Scan parquet default.item
Output [2]: [i_item_sk#14, i_item_desc#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(17) ColumnarToRow
Input [2]: [i_item_sk#14, i_item_desc#15]

(18) Filter
Input [2]: [i_item_sk#14, i_item_desc#15]
Condition : isnotnull(i_item_sk#14)

(19) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#7]
Right keys [1]: [i_item_sk#14]
Join condition: None

(20) Project [codegen id : 5]
Output [3]: [d_date#11, i_item_sk#14, i_item_desc#15]
Input [4]: [ss_item_sk#7, d_date#11, i_item_sk#14, i_item_desc#15]

(21) HashAggregate [codegen id : 5]
Input [3]: [d_date#11, i_item_sk#14, i_item_desc#15]
Keys [3]: [substr(i_item_desc#15, 1, 30) AS substr(i_item_desc#15, 1, 30)#16, i_item_sk#14, d_date#11]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#17]
Results [4]: [substr(i_item_desc#15, 1, 30)#16, i_item_sk#14, d_date#11, count#18]

(22) Exchange
Input [4]: [substr(i_item_desc#15, 1, 30)#16, i_item_sk#14, d_date#11, count#18]
Arguments: hashpartitioning(substr(i_item_desc#15, 1, 30)#16, i_item_sk#14, d_date#11, 5), ENSURE_REQUIREMENTS, [id=#19]

(23) HashAggregate [codegen id : 6]
Input [4]: [substr(i_item_desc#15, 1, 30)#16, i_item_sk#14, d_date#11, count#18]
Keys [3]: [substr(i_item_desc#15, 1, 30)#16, i_item_sk#14, d_date#11]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#20]
Results [2]: [i_item_sk#14 AS item_sk#21, count(1)#20 AS count(1)#22]

(24) Filter [codegen id : 6]
Input [2]: [item_sk#21, count(1)#22]
Condition : (count(1)#22 > 4)

(25) Project [codegen id : 6]
Output [1]: [item_sk#21]
Input [2]: [item_sk#21, count(1)#22]

(26) Exchange
Input [1]: [item_sk#21]
Arguments: hashpartitioning(item_sk#21, 5), ENSURE_REQUIREMENTS, [id=#23]

(27) Sort [codegen id : 7]
Input [1]: [item_sk#21]
Arguments: [item_sk#21 ASC NULLS FIRST], false, 0

(28) SortMergeJoin
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#21]
Join condition: None

(29) Project [codegen id : 8]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(30) Exchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#24]

(31) Sort [codegen id : 9]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(32) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#25, ss_quantity#26, ss_sales_price#27, ss_sold_date_sk#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(33) ColumnarToRow [codegen id : 10]
Input [4]: [ss_customer_sk#25, ss_quantity#26, ss_sales_price#27, ss_sold_date_sk#8]

(34) Filter [codegen id : 10]
Input [4]: [ss_customer_sk#25, ss_quantity#26, ss_sales_price#27, ss_sold_date_sk#8]
Condition : isnotnull(ss_customer_sk#25)

(35) Project [codegen id : 10]
Output [3]: [ss_customer_sk#25, ss_quantity#26, ss_sales_price#27]
Input [4]: [ss_customer_sk#25, ss_quantity#26, ss_sales_price#27, ss_sold_date_sk#8]

(36) Exchange
Input [3]: [ss_customer_sk#25, ss_quantity#26, ss_sales_price#27]
Arguments: hashpartitioning(ss_customer_sk#25, 5), ENSURE_REQUIREMENTS, [id=#28]

(37) Sort [codegen id : 11]
Input [3]: [ss_customer_sk#25, ss_quantity#26, ss_sales_price#27]
Arguments: [ss_customer_sk#25 ASC NULLS FIRST], false, 0

(38) Scan parquet default.customer
Output [1]: [c_customer_sk#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(39) ColumnarToRow [codegen id : 12]
Input [1]: [c_customer_sk#29]

(40) Filter [codegen id : 12]
Input [1]: [c_customer_sk#29]
Condition : isnotnull(c_customer_sk#29)

(41) Exchange
Input [1]: [c_customer_sk#29]
Arguments: hashpartitioning(c_customer_sk#29, 5), ENSURE_REQUIREMENTS, [id=#30]

(42) Sort [codegen id : 13]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(43) SortMergeJoin [codegen id : 14]
Left keys [1]: [ss_customer_sk#25]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(44) Project [codegen id : 14]
Output [3]: [ss_quantity#26, ss_sales_price#27, c_customer_sk#29]
Input [4]: [ss_customer_sk#25, ss_quantity#26, ss_sales_price#27, c_customer_sk#29]

(45) HashAggregate [codegen id : 14]
Input [3]: [ss_quantity#26, ss_sales_price#27, c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#26 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#27 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#31, isEmpty#32]
Results [3]: [c_customer_sk#29, sum#33, isEmpty#34]

(46) HashAggregate [codegen id : 14]
Input [3]: [c_customer_sk#29, sum#33, isEmpty#34]
Keys [1]: [c_customer_sk#29]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#26 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#27 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#26 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#27 as decimal(12,2)))), DecimalType(18,2), true))#35]
Results [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#26 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#27 as decimal(12,2)))), DecimalType(18,2), true))#35 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#26 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#27 as decimal(12,2)))), DecimalType(18,2), true))#36]

(47) Filter [codegen id : 14]
Input [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#26 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#27 as decimal(12,2)))), DecimalType(18,2), true))#36]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#26 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#27 as decimal(12,2)))), DecimalType(18,2), true))#36) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#26 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#27 as decimal(12,2)))), DecimalType(18,2), true))#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8), true)))

(48) Project [codegen id : 14]
Output [1]: [c_customer_sk#29]
Input [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#26 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#27 as decimal(12,2)))), DecimalType(18,2), true))#36]

(49) Sort [codegen id : 14]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(50) SortMergeJoin
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(51) Project [codegen id : 15]
Output [3]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(52) BroadcastExchange
Input [3]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#39]

(53) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_year#12, d_moy#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(54) ColumnarToRow
Input [3]: [d_date_sk#10, d_year#12, d_moy#40]

(55) Filter
Input [3]: [d_date_sk#10, d_year#12, d_moy#40]
Condition : ((((isnotnull(d_year#12) AND isnotnull(d_moy#40)) AND (d_year#12 = 2000)) AND (d_moy#40 = 2)) AND isnotnull(d_date_sk#10))

(56) Project
Output [1]: [d_date_sk#10]
Input [3]: [d_date_sk#10, d_year#12, d_moy#40]

(57) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#10]
Join condition: None

(58) Project [codegen id : 16]
Output [1]: [CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true) AS sales#41]
Input [4]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, d_date_sk#10]

(59) Scan parquet default.web_sales
Output [5]: [ws_item_sk#42, ws_bill_customer_sk#43, ws_quantity#44, ws_list_price#45, ws_sold_date_sk#46]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#46), dynamicpruningexpression(true)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(60) ColumnarToRow [codegen id : 17]
Input [5]: [ws_item_sk#42, ws_bill_customer_sk#43, ws_quantity#44, ws_list_price#45, ws_sold_date_sk#46]

(61) Exchange
Input [5]: [ws_item_sk#42, ws_bill_customer_sk#43, ws_quantity#44, ws_list_price#45, ws_sold_date_sk#46]
Arguments: hashpartitioning(ws_item_sk#42, 5), ENSURE_REQUIREMENTS, [id=#47]

(62) Sort [codegen id : 18]
Input [5]: [ws_item_sk#42, ws_bill_customer_sk#43, ws_quantity#44, ws_list_price#45, ws_sold_date_sk#46]
Arguments: [ws_item_sk#42 ASC NULLS FIRST], false, 0

(63) ReusedExchange [Reuses operator id: 26]
Output [1]: [item_sk#21]

(64) Sort [codegen id : 23]
Input [1]: [item_sk#21]
Arguments: [item_sk#21 ASC NULLS FIRST], false, 0

(65) SortMergeJoin
Left keys [1]: [ws_item_sk#42]
Right keys [1]: [item_sk#21]
Join condition: None

(66) Project [codegen id : 24]
Output [4]: [ws_bill_customer_sk#43, ws_quantity#44, ws_list_price#45, ws_sold_date_sk#46]
Input [5]: [ws_item_sk#42, ws_bill_customer_sk#43, ws_quantity#44, ws_list_price#45, ws_sold_date_sk#46]

(67) Exchange
Input [4]: [ws_bill_customer_sk#43, ws_quantity#44, ws_list_price#45, ws_sold_date_sk#46]
Arguments: hashpartitioning(ws_bill_customer_sk#43, 5), ENSURE_REQUIREMENTS, [id=#48]

(68) Sort [codegen id : 25]
Input [4]: [ws_bill_customer_sk#43, ws_quantity#44, ws_list_price#45, ws_sold_date_sk#46]
Arguments: [ws_bill_customer_sk#43 ASC NULLS FIRST], false, 0

(69) ReusedExchange [Reuses operator id: 36]
Output [3]: [ss_customer_sk#25, ss_quantity#26, ss_sales_price#27]

(70) Sort [codegen id : 27]
Input [3]: [ss_customer_sk#25, ss_quantity#26, ss_sales_price#27]
Arguments: [ss_customer_sk#25 ASC NULLS FIRST], false, 0

(71) ReusedExchange [Reuses operator id: 41]
Output [1]: [c_customer_sk#29]

(72) Sort [codegen id : 29]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(73) SortMergeJoin [codegen id : 30]
Left keys [1]: [ss_customer_sk#25]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(74) Project [codegen id : 30]
Output [3]: [ss_quantity#26, ss_sales_price#27, c_customer_sk#29]
Input [4]: [ss_customer_sk#25, ss_quantity#26, ss_sales_price#27, c_customer_sk#29]

(75) HashAggregate [codegen id : 30]
Input [3]: [ss_quantity#26, ss_sales_price#27, c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#26 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#27 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#49, isEmpty#50]
Results [3]: [c_customer_sk#29, sum#51, isEmpty#52]

(76) HashAggregate [codegen id : 30]
Input [3]: [c_customer_sk#29, sum#51, isEmpty#52]
Keys [1]: [c_customer_sk#29]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#26 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#27 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#26 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#27 as decimal(12,2)))), DecimalType(18,2), true))#53]
Results [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#26 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#27 as decimal(12,2)))), DecimalType(18,2), true))#53 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#26 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#27 as decimal(12,2)))), DecimalType(18,2), true))#54]

(77) Filter [codegen id : 30]
Input [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#26 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#27 as decimal(12,2)))), DecimalType(18,2), true))#54]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#26 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#27 as decimal(12,2)))), DecimalType(18,2), true))#54) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#26 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#27 as decimal(12,2)))), DecimalType(18,2), true))#54 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8), true)))

(78) Project [codegen id : 30]
Output [1]: [c_customer_sk#29]
Input [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#26 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#27 as decimal(12,2)))), DecimalType(18,2), true))#54]

(79) Sort [codegen id : 30]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(80) SortMergeJoin
Left keys [1]: [ws_bill_customer_sk#43]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(81) Project [codegen id : 31]
Output [3]: [ws_quantity#44, ws_list_price#45, ws_sold_date_sk#46]
Input [4]: [ws_bill_customer_sk#43, ws_quantity#44, ws_list_price#45, ws_sold_date_sk#46]

(82) BroadcastExchange
Input [3]: [ws_quantity#44, ws_list_price#45, ws_sold_date_sk#46]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#55]

(83) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_year#12, d_moy#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(84) ColumnarToRow
Input [3]: [d_date_sk#10, d_year#12, d_moy#40]

(85) Filter
Input [3]: [d_date_sk#10, d_year#12, d_moy#40]
Condition : ((((isnotnull(d_year#12) AND isnotnull(d_moy#40)) AND (d_year#12 = 2000)) AND (d_moy#40 = 2)) AND isnotnull(d_date_sk#10))

(86) Project
Output [1]: [d_date_sk#10]
Input [3]: [d_date_sk#10, d_year#12, d_moy#40]

(87) BroadcastHashJoin [codegen id : 32]
Left keys [1]: [ws_sold_date_sk#46]
Right keys [1]: [d_date_sk#10]
Join condition: None

(88) Project [codegen id : 32]
Output [1]: [CheckOverflow((promote_precision(cast(cast(ws_quantity#44 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#45 as decimal(12,2)))), DecimalType(18,2), true) AS sales#56]
Input [4]: [ws_quantity#44, ws_list_price#45, ws_sold_date_sk#46, d_date_sk#10]

(89) Union

(90) HashAggregate [codegen id : 33]
Input [1]: [sales#41]
Keys: []
Functions [1]: [partial_sum(sales#41)]
Aggregate Attributes [2]: [sum#57, isEmpty#58]
Results [2]: [sum#59, isEmpty#60]

(91) Exchange
Input [2]: [sum#59, isEmpty#60]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#61]

(92) HashAggregate [codegen id : 34]
Input [2]: [sum#59, isEmpty#60]
Keys: []
Functions [1]: [sum(sales#41)]
Aggregate Attributes [1]: [sum(sales#41)#62]
Results [1]: [sum(sales#41)#62 AS sum(sales)#63]

===== Subqueries =====

Subquery:1 Hosting operator id = 47 Hosting Expression = Subquery scalar-subquery#37, [id=#38]
* HashAggregate (114)
+- Exchange (113)
   +- * HashAggregate (112)
      +- * HashAggregate (111)
         +- Exchange (110)
            +- * HashAggregate (109)
               +- * Project (108)
                  +- * BroadcastHashJoin Inner BuildRight (107)
                     :- * Project (101)
                     :  +- * BroadcastHashJoin Inner BuildLeft (100)
                     :     :- BroadcastExchange (96)
                     :     :  +- * Filter (95)
                     :     :     +- * ColumnarToRow (94)
                     :     :        +- Scan parquet default.store_sales (93)
                     :     +- * Filter (99)
                     :        +- * ColumnarToRow (98)
                     :           +- Scan parquet default.customer (97)
                     +- BroadcastExchange (106)
                        +- * Project (105)
                           +- * Filter (104)
                              +- * ColumnarToRow (103)
                                 +- Scan parquet default.date_dim (102)


(93) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#25, ss_quantity#26, ss_sales_price#27, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#64)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(94) ColumnarToRow [codegen id : 1]
Input [4]: [ss_customer_sk#25, ss_quantity#26, ss_sales_price#27, ss_sold_date_sk#8]

(95) Filter [codegen id : 1]
Input [4]: [ss_customer_sk#25, ss_quantity#26, ss_sales_price#27, ss_sold_date_sk#8]
Condition : isnotnull(ss_customer_sk#25)

(96) BroadcastExchange
Input [4]: [ss_customer_sk#25, ss_quantity#26, ss_sales_price#27, ss_sold_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#65]

(97) Scan parquet default.customer
Output [1]: [c_customer_sk#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(98) ColumnarToRow
Input [1]: [c_customer_sk#29]

(99) Filter
Input [1]: [c_customer_sk#29]
Condition : isnotnull(c_customer_sk#29)

(100) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_customer_sk#25]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(101) Project [codegen id : 3]
Output [4]: [ss_quantity#26, ss_sales_price#27, ss_sold_date_sk#8, c_customer_sk#29]
Input [5]: [ss_customer_sk#25, ss_quantity#26, ss_sales_price#27, ss_sold_date_sk#8, c_customer_sk#29]

(102) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(103) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#10, d_year#12]

(104) Filter [codegen id : 2]
Input [2]: [d_date_sk#10, d_year#12]
Condition : (d_year#12 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#10))

(105) Project [codegen id : 2]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#12]

(106) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#66]

(107) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#10]
Join condition: None

(108) Project [codegen id : 3]
Output [3]: [ss_quantity#26, ss_sales_price#27, c_customer_sk#29]
Input [5]: [ss_quantity#26, ss_sales_price#27, ss_sold_date_sk#8, c_customer_sk#29, d_date_sk#10]

(109) HashAggregate [codegen id : 3]
Input [3]: [ss_quantity#26, ss_sales_price#27, c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#26 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#27 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#67, isEmpty#68]
Results [3]: [c_customer_sk#29, sum#69, isEmpty#70]

(110) Exchange
Input [3]: [c_customer_sk#29, sum#69, isEmpty#70]
Arguments: hashpartitioning(c_customer_sk#29, 5), ENSURE_REQUIREMENTS, [id=#71]

(111) HashAggregate [codegen id : 4]
Input [3]: [c_customer_sk#29, sum#69, isEmpty#70]
Keys [1]: [c_customer_sk#29]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#26 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#27 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#26 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#27 as decimal(12,2)))), DecimalType(18,2), true))#72]
Results [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#26 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#27 as decimal(12,2)))), DecimalType(18,2), true))#72 AS csales#73]

(112) HashAggregate [codegen id : 4]
Input [1]: [csales#73]
Keys: []
Functions [1]: [partial_max(csales#73)]
Aggregate Attributes [1]: [max#74]
Results [1]: [max#75]

(113) Exchange
Input [1]: [max#75]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#76]

(114) HashAggregate [codegen id : 5]
Input [1]: [max#75]
Keys: []
Functions [1]: [max(csales#73)]
Aggregate Attributes [1]: [max(csales#73)#77]
Results [1]: [max(csales#73)#77 AS tpcds_cmax#78]

Subquery:2 Hosting operator id = 93 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#64
ReusedExchange (115)


(115) ReusedExchange [Reuses operator id: 106]
Output [1]: [d_date_sk#10]

Subquery:3 Hosting operator id = 77 Hosting Expression = ReusedSubquery Subquery scalar-subquery#37, [id=#38]


