== Physical Plan ==
* HashAggregate (92)
+- Exchange (91)
   +- * HashAggregate (90)
      +- Union (89)
         :- * Project (52)
         :  +- * BroadcastHashJoin Inner BuildRight (51)
         :     :- * Project (49)
         :     :  +- * SortMergeJoin LeftSemi (48)
         :     :     :- * Sort (29)
         :     :     :  +- Exchange (28)
         :     :     :     +- * Project (27)
         :     :     :        +- * SortMergeJoin LeftSemi (26)
         :     :     :           :- * Sort (5)
         :     :     :           :  +- Exchange (4)
         :     :     :           :     +- * Filter (3)
         :     :     :           :        +- * ColumnarToRow (2)
         :     :     :           :           +- Scan parquet spark_catalog.default.catalog_sales (1)
         :     :     :           +- * Sort (25)
         :     :     :              +- * Project (24)
         :     :     :                 +- * Filter (23)
         :     :     :                    +- * HashAggregate (22)
         :     :     :                       +- * HashAggregate (21)
         :     :     :                          +- * Project (20)
         :     :     :                             +- * SortMergeJoin Inner (19)
         :     :     :                                :- * Sort (13)
         :     :     :                                :  +- Exchange (12)
         :     :     :                                :     +- * Project (11)
         :     :     :                                :        +- * BroadcastHashJoin Inner BuildRight (10)
         :     :     :                                :           :- * Filter (8)
         :     :     :                                :           :  +- * ColumnarToRow (7)
         :     :     :                                :           :     +- Scan parquet spark_catalog.default.store_sales (6)
         :     :     :                                :           +- ReusedExchange (9)
         :     :     :                                +- * Sort (18)
         :     :     :                                   +- Exchange (17)
         :     :     :                                      +- * Filter (16)
         :     :     :                                         +- * ColumnarToRow (15)
         :     :     :                                            +- Scan parquet spark_catalog.default.item (14)
         :     :     +- * Sort (47)
         :     :        +- * Project (46)
         :     :           +- * Filter (45)
         :     :              +- * HashAggregate (44)
         :     :                 +- * HashAggregate (43)
         :     :                    +- * Project (42)
         :     :                       +- * SortMergeJoin Inner (41)
         :     :                          :- * Sort (35)
         :     :                          :  +- Exchange (34)
         :     :                          :     +- * Project (33)
         :     :                          :        +- * Filter (32)
         :     :                          :           +- * ColumnarToRow (31)
         :     :                          :              +- Scan parquet spark_catalog.default.store_sales (30)
         :     :                          +- * Sort (40)
         :     :                             +- Exchange (39)
         :     :                                +- * Filter (38)
         :     :                                   +- * ColumnarToRow (37)
         :     :                                      +- Scan parquet spark_catalog.default.customer (36)
         :     +- ReusedExchange (50)
         +- * Project (88)
            +- * BroadcastHashJoin Inner BuildRight (87)
               :- * Project (85)
               :  +- * SortMergeJoin LeftSemi (84)
               :     :- * Sort (72)
               :     :  +- Exchange (71)
               :     :     +- * Project (70)
               :     :        +- * SortMergeJoin LeftSemi (69)
               :     :           :- * Sort (57)
               :     :           :  +- Exchange (56)
               :     :           :     +- * Filter (55)
               :     :           :        +- * ColumnarToRow (54)
               :     :           :           +- Scan parquet spark_catalog.default.web_sales (53)
               :     :           +- * Sort (68)
               :     :              +- * Project (67)
               :     :                 +- * Filter (66)
               :     :                    +- * HashAggregate (65)
               :     :                       +- * HashAggregate (64)
               :     :                          +- * Project (63)
               :     :                             +- * SortMergeJoin Inner (62)
               :     :                                :- * Sort (59)
               :     :                                :  +- ReusedExchange (58)
               :     :                                +- * Sort (61)
               :     :                                   +- ReusedExchange (60)
               :     +- * Sort (83)
               :        +- * Project (82)
               :           +- * Filter (81)
               :              +- * HashAggregate (80)
               :                 +- * HashAggregate (79)
               :                    +- * Project (78)
               :                       +- * SortMergeJoin Inner (77)
               :                          :- * Sort (74)
               :                          :  +- ReusedExchange (73)
               :                          +- * Sort (76)
               :                             +- ReusedExchange (75)
               +- ReusedExchange (86)


(1) Scan parquet spark_catalog.default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(3) Filter [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Condition : (isnotnull(cs_item_sk#2) AND isnotnull(cs_bill_customer_sk#1))

(4) Exchange
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_item_sk#2, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_item_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]

(8) Filter [codegen id : 4]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Condition : isnotnull(ss_item_sk#7)

(9) ReusedExchange [Reuses operator id: 102]
Output [2]: [d_date_sk#10, d_date#11]

(10) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#10]
Join type: Inner
Join condition: None

(11) Project [codegen id : 4]
Output [2]: [ss_item_sk#7, d_date#11]
Input [4]: [ss_item_sk#7, ss_sold_date_sk#8, d_date_sk#10, d_date#11]

(12) Exchange
Input [2]: [ss_item_sk#7, d_date#11]
Arguments: hashpartitioning(ss_item_sk#7, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(13) Sort [codegen id : 5]
Input [2]: [ss_item_sk#7, d_date#11]
Arguments: [ss_item_sk#7 ASC NULLS FIRST], false, 0

(14) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#12, i_item_desc#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(15) ColumnarToRow [codegen id : 6]
Input [2]: [i_item_sk#12, i_item_desc#13]

(16) Filter [codegen id : 6]
Input [2]: [i_item_sk#12, i_item_desc#13]
Condition : isnotnull(i_item_sk#12)

(17) Exchange
Input [2]: [i_item_sk#12, i_item_desc#13]
Arguments: hashpartitioning(i_item_sk#12, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(18) Sort [codegen id : 7]
Input [2]: [i_item_sk#12, i_item_desc#13]
Arguments: [i_item_sk#12 ASC NULLS FIRST], false, 0

(19) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#7]
Right keys [1]: [i_item_sk#12]
Join type: Inner
Join condition: None

(20) Project [codegen id : 8]
Output [3]: [d_date#11, i_item_sk#12, substr(i_item_desc#13, 1, 30) AS _groupingexpression#14]
Input [4]: [ss_item_sk#7, d_date#11, i_item_sk#12, i_item_desc#13]

(21) HashAggregate [codegen id : 8]
Input [3]: [d_date#11, i_item_sk#12, _groupingexpression#14]
Keys [3]: [_groupingexpression#14, i_item_sk#12, d_date#11]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#15]
Results [4]: [_groupingexpression#14, i_item_sk#12, d_date#11, count#16]

(22) HashAggregate [codegen id : 8]
Input [4]: [_groupingexpression#14, i_item_sk#12, d_date#11, count#16]
Keys [3]: [_groupingexpression#14, i_item_sk#12, d_date#11]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#17]
Results [2]: [i_item_sk#12 AS item_sk#18, count(1)#17 AS cnt#19]

(23) Filter [codegen id : 8]
Input [2]: [item_sk#18, cnt#19]
Condition : (cnt#19 > 4)

(24) Project [codegen id : 8]
Output [1]: [item_sk#18]
Input [2]: [item_sk#18, cnt#19]

(25) Sort [codegen id : 8]
Input [1]: [item_sk#18]
Arguments: [item_sk#18 ASC NULLS FIRST], false, 0

(26) SortMergeJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#18]
Join type: LeftSemi
Join condition: None

(27) Project [codegen id : 9]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(28) Exchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(29) Sort [codegen id : 10]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(30) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_customer_sk#20, ss_quantity#21, ss_sales_price#22, ss_sold_date_sk#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(31) ColumnarToRow [codegen id : 11]
Input [4]: [ss_customer_sk#20, ss_quantity#21, ss_sales_price#22, ss_sold_date_sk#23]

(32) Filter [codegen id : 11]
Input [4]: [ss_customer_sk#20, ss_quantity#21, ss_sales_price#22, ss_sold_date_sk#23]
Condition : isnotnull(ss_customer_sk#20)

(33) Project [codegen id : 11]
Output [3]: [ss_customer_sk#20, ss_quantity#21, ss_sales_price#22]
Input [4]: [ss_customer_sk#20, ss_quantity#21, ss_sales_price#22, ss_sold_date_sk#23]

(34) Exchange
Input [3]: [ss_customer_sk#20, ss_quantity#21, ss_sales_price#22]
Arguments: hashpartitioning(ss_customer_sk#20, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(35) Sort [codegen id : 12]
Input [3]: [ss_customer_sk#20, ss_quantity#21, ss_sales_price#22]
Arguments: [ss_customer_sk#20 ASC NULLS FIRST], false, 0

(36) Scan parquet spark_catalog.default.customer
Output [1]: [c_customer_sk#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(37) ColumnarToRow [codegen id : 13]
Input [1]: [c_customer_sk#24]

(38) Filter [codegen id : 13]
Input [1]: [c_customer_sk#24]
Condition : isnotnull(c_customer_sk#24)

(39) Exchange
Input [1]: [c_customer_sk#24]
Arguments: hashpartitioning(c_customer_sk#24, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(40) Sort [codegen id : 14]
Input [1]: [c_customer_sk#24]
Arguments: [c_customer_sk#24 ASC NULLS FIRST], false, 0

(41) SortMergeJoin [codegen id : 15]
Left keys [1]: [ss_customer_sk#20]
Right keys [1]: [c_customer_sk#24]
Join type: Inner
Join condition: None

(42) Project [codegen id : 15]
Output [3]: [ss_quantity#21, ss_sales_price#22, c_customer_sk#24]
Input [4]: [ss_customer_sk#20, ss_quantity#21, ss_sales_price#22, c_customer_sk#24]

(43) HashAggregate [codegen id : 15]
Input [3]: [ss_quantity#21, ss_sales_price#22, c_customer_sk#24]
Keys [1]: [c_customer_sk#24]
Functions [1]: [partial_sum((cast(ss_quantity#21 as decimal(10,0)) * ss_sales_price#22))]
Aggregate Attributes [2]: [sum#25, isEmpty#26]
Results [3]: [c_customer_sk#24, sum#27, isEmpty#28]

(44) HashAggregate [codegen id : 15]
Input [3]: [c_customer_sk#24, sum#27, isEmpty#28]
Keys [1]: [c_customer_sk#24]
Functions [1]: [sum((cast(ss_quantity#21 as decimal(10,0)) * ss_sales_price#22))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#21 as decimal(10,0)) * ss_sales_price#22))#29]
Results [2]: [c_customer_sk#24, sum((cast(ss_quantity#21 as decimal(10,0)) * ss_sales_price#22))#29 AS ssales#30]

(45) Filter [codegen id : 15]
Input [2]: [c_customer_sk#24, ssales#30]
Condition : (isnotnull(ssales#30) AND (cast(ssales#30 as decimal(38,8)) > (0.500000 * Subquery scalar-subquery#31, [id=#32])))

(46) Project [codegen id : 15]
Output [1]: [c_customer_sk#24]
Input [2]: [c_customer_sk#24, ssales#30]

(47) Sort [codegen id : 15]
Input [1]: [c_customer_sk#24]
Arguments: [c_customer_sk#24 ASC NULLS FIRST], false, 0

(48) SortMergeJoin [codegen id : 17]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#24]
Join type: LeftSemi
Join condition: None

(49) Project [codegen id : 17]
Output [3]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(50) ReusedExchange [Reuses operator id: 97]
Output [1]: [d_date_sk#33]

(51) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#33]
Join type: Inner
Join condition: None

(52) Project [codegen id : 17]
Output [1]: [(cast(cs_quantity#3 as decimal(10,0)) * cs_list_price#4) AS sales#34]
Input [4]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, d_date_sk#33]

(53) Scan parquet spark_catalog.default.web_sales
Output [5]: [ws_item_sk#35, ws_bill_customer_sk#36, ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#39), dynamicpruningexpression(ws_sold_date_sk#39 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(54) ColumnarToRow [codegen id : 18]
Input [5]: [ws_item_sk#35, ws_bill_customer_sk#36, ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]

(55) Filter [codegen id : 18]
Input [5]: [ws_item_sk#35, ws_bill_customer_sk#36, ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]
Condition : (isnotnull(ws_item_sk#35) AND isnotnull(ws_bill_customer_sk#36))

(56) Exchange
Input [5]: [ws_item_sk#35, ws_bill_customer_sk#36, ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]
Arguments: hashpartitioning(ws_item_sk#35, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(57) Sort [codegen id : 19]
Input [5]: [ws_item_sk#35, ws_bill_customer_sk#36, ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]
Arguments: [ws_item_sk#35 ASC NULLS FIRST], false, 0

(58) ReusedExchange [Reuses operator id: 12]
Output [2]: [ss_item_sk#7, d_date#11]

(59) Sort [codegen id : 22]
Input [2]: [ss_item_sk#7, d_date#11]
Arguments: [ss_item_sk#7 ASC NULLS FIRST], false, 0

(60) ReusedExchange [Reuses operator id: 17]
Output [2]: [i_item_sk#12, i_item_desc#13]

(61) Sort [codegen id : 24]
Input [2]: [i_item_sk#12, i_item_desc#13]
Arguments: [i_item_sk#12 ASC NULLS FIRST], false, 0

(62) SortMergeJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#7]
Right keys [1]: [i_item_sk#12]
Join type: Inner
Join condition: None

(63) Project [codegen id : 25]
Output [3]: [d_date#11, i_item_sk#12, substr(i_item_desc#13, 1, 30) AS _groupingexpression#14]
Input [4]: [ss_item_sk#7, d_date#11, i_item_sk#12, i_item_desc#13]

(64) HashAggregate [codegen id : 25]
Input [3]: [d_date#11, i_item_sk#12, _groupingexpression#14]
Keys [3]: [_groupingexpression#14, i_item_sk#12, d_date#11]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#15]
Results [4]: [_groupingexpression#14, i_item_sk#12, d_date#11, count#16]

(65) HashAggregate [codegen id : 25]
Input [4]: [_groupingexpression#14, i_item_sk#12, d_date#11, count#16]
Keys [3]: [_groupingexpression#14, i_item_sk#12, d_date#11]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#17]
Results [2]: [i_item_sk#12 AS item_sk#18, count(1)#17 AS cnt#19]

(66) Filter [codegen id : 25]
Input [2]: [item_sk#18, cnt#19]
Condition : (cnt#19 > 4)

(67) Project [codegen id : 25]
Output [1]: [item_sk#18]
Input [2]: [item_sk#18, cnt#19]

(68) Sort [codegen id : 25]
Input [1]: [item_sk#18]
Arguments: [item_sk#18 ASC NULLS FIRST], false, 0

(69) SortMergeJoin [codegen id : 26]
Left keys [1]: [ws_item_sk#35]
Right keys [1]: [item_sk#18]
Join type: LeftSemi
Join condition: None

(70) Project [codegen id : 26]
Output [4]: [ws_bill_customer_sk#36, ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]
Input [5]: [ws_item_sk#35, ws_bill_customer_sk#36, ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]

(71) Exchange
Input [4]: [ws_bill_customer_sk#36, ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]
Arguments: hashpartitioning(ws_bill_customer_sk#36, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(72) Sort [codegen id : 27]
Input [4]: [ws_bill_customer_sk#36, ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]
Arguments: [ws_bill_customer_sk#36 ASC NULLS FIRST], false, 0

(73) ReusedExchange [Reuses operator id: 34]
Output [3]: [ss_customer_sk#20, ss_quantity#21, ss_sales_price#22]

(74) Sort [codegen id : 29]
Input [3]: [ss_customer_sk#20, ss_quantity#21, ss_sales_price#22]
Arguments: [ss_customer_sk#20 ASC NULLS FIRST], false, 0

(75) ReusedExchange [Reuses operator id: 39]
Output [1]: [c_customer_sk#24]

(76) Sort [codegen id : 31]
Input [1]: [c_customer_sk#24]
Arguments: [c_customer_sk#24 ASC NULLS FIRST], false, 0

(77) SortMergeJoin [codegen id : 32]
Left keys [1]: [ss_customer_sk#20]
Right keys [1]: [c_customer_sk#24]
Join type: Inner
Join condition: None

(78) Project [codegen id : 32]
Output [3]: [ss_quantity#21, ss_sales_price#22, c_customer_sk#24]
Input [4]: [ss_customer_sk#20, ss_quantity#21, ss_sales_price#22, c_customer_sk#24]

(79) HashAggregate [codegen id : 32]
Input [3]: [ss_quantity#21, ss_sales_price#22, c_customer_sk#24]
Keys [1]: [c_customer_sk#24]
Functions [1]: [partial_sum((cast(ss_quantity#21 as decimal(10,0)) * ss_sales_price#22))]
Aggregate Attributes [2]: [sum#25, isEmpty#26]
Results [3]: [c_customer_sk#24, sum#27, isEmpty#28]

(80) HashAggregate [codegen id : 32]
Input [3]: [c_customer_sk#24, sum#27, isEmpty#28]
Keys [1]: [c_customer_sk#24]
Functions [1]: [sum((cast(ss_quantity#21 as decimal(10,0)) * ss_sales_price#22))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#21 as decimal(10,0)) * ss_sales_price#22))#29]
Results [2]: [c_customer_sk#24, sum((cast(ss_quantity#21 as decimal(10,0)) * ss_sales_price#22))#29 AS ssales#30]

(81) Filter [codegen id : 32]
Input [2]: [c_customer_sk#24, ssales#30]
Condition : (isnotnull(ssales#30) AND (cast(ssales#30 as decimal(38,8)) > (0.500000 * ReusedSubquery Subquery scalar-subquery#31, [id=#32])))

(82) Project [codegen id : 32]
Output [1]: [c_customer_sk#24]
Input [2]: [c_customer_sk#24, ssales#30]

(83) Sort [codegen id : 32]
Input [1]: [c_customer_sk#24]
Arguments: [c_customer_sk#24 ASC NULLS FIRST], false, 0

(84) SortMergeJoin [codegen id : 34]
Left keys [1]: [ws_bill_customer_sk#36]
Right keys [1]: [c_customer_sk#24]
Join type: LeftSemi
Join condition: None

(85) Project [codegen id : 34]
Output [3]: [ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]
Input [4]: [ws_bill_customer_sk#36, ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]

(86) ReusedExchange [Reuses operator id: 97]
Output [1]: [d_date_sk#40]

(87) BroadcastHashJoin [codegen id : 34]
Left keys [1]: [ws_sold_date_sk#39]
Right keys [1]: [d_date_sk#40]
Join type: Inner
Join condition: None

(88) Project [codegen id : 34]
Output [1]: [(cast(ws_quantity#37 as decimal(10,0)) * ws_list_price#38) AS sales#41]
Input [4]: [ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39, d_date_sk#40]

(89) Union

(90) HashAggregate [codegen id : 35]
Input [1]: [sales#34]
Keys: []
Functions [1]: [partial_sum(sales#34)]
Aggregate Attributes [2]: [sum#42, isEmpty#43]
Results [2]: [sum#44, isEmpty#45]

(91) Exchange
Input [2]: [sum#44, isEmpty#45]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=9]

(92) HashAggregate [codegen id : 36]
Input [2]: [sum#44, isEmpty#45]
Keys: []
Functions [1]: [sum(sales#34)]
Aggregate Attributes [1]: [sum(sales#34)#46]
Results [1]: [sum(sales#34)#46 AS sum(sales)#47]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (97)
+- * Project (96)
   +- * Filter (95)
      +- * ColumnarToRow (94)
         +- Scan parquet spark_catalog.default.date_dim (93)


(93) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#33, d_year#48, d_moy#49]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(94) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#33, d_year#48, d_moy#49]

(95) Filter [codegen id : 1]
Input [3]: [d_date_sk#33, d_year#48, d_moy#49]
Condition : ((((isnotnull(d_year#48) AND isnotnull(d_moy#49)) AND (d_year#48 = 2000)) AND (d_moy#49 = 2)) AND isnotnull(d_date_sk#33))

(96) Project [codegen id : 1]
Output [1]: [d_date_sk#33]
Input [3]: [d_date_sk#33, d_year#48, d_moy#49]

(97) BroadcastExchange
Input [1]: [d_date_sk#33]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=10]

Subquery:2 Hosting operator id = 6 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (102)
+- * Project (101)
   +- * Filter (100)
      +- * ColumnarToRow (99)
         +- Scan parquet spark_catalog.default.date_dim (98)


(98) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#10, d_date#11, d_year#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(99) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#10, d_date#11, d_year#50]

(100) Filter [codegen id : 1]
Input [3]: [d_date_sk#10, d_date#11, d_year#50]
Condition : (d_year#50 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#10))

(101) Project [codegen id : 1]
Output [2]: [d_date_sk#10, d_date#11]
Input [3]: [d_date_sk#10, d_date#11, d_year#50]

(102) BroadcastExchange
Input [2]: [d_date_sk#10, d_date#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=11]

Subquery:3 Hosting operator id = 45 Hosting Expression = Subquery scalar-subquery#31, [id=#32]
* HashAggregate (119)
+- Exchange (118)
   +- * HashAggregate (117)
      +- * HashAggregate (116)
         +- * HashAggregate (115)
            +- * Project (114)
               +- * SortMergeJoin Inner (113)
                  :- * Sort (110)
                  :  +- Exchange (109)
                  :     +- * Project (108)
                  :        +- * BroadcastHashJoin Inner BuildRight (107)
                  :           :- * Filter (105)
                  :           :  +- * ColumnarToRow (104)
                  :           :     +- Scan parquet spark_catalog.default.store_sales (103)
                  :           +- ReusedExchange (106)
                  +- * Sort (112)
                     +- ReusedExchange (111)


(103) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_customer_sk#51, ss_quantity#52, ss_sales_price#53, ss_sold_date_sk#54]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#54), dynamicpruningexpression(ss_sold_date_sk#54 IN dynamicpruning#55)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(104) ColumnarToRow [codegen id : 2]
Input [4]: [ss_customer_sk#51, ss_quantity#52, ss_sales_price#53, ss_sold_date_sk#54]

(105) Filter [codegen id : 2]
Input [4]: [ss_customer_sk#51, ss_quantity#52, ss_sales_price#53, ss_sold_date_sk#54]
Condition : isnotnull(ss_customer_sk#51)

(106) ReusedExchange [Reuses operator id: 124]
Output [1]: [d_date_sk#56]

(107) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#54]
Right keys [1]: [d_date_sk#56]
Join type: Inner
Join condition: None

(108) Project [codegen id : 2]
Output [3]: [ss_customer_sk#51, ss_quantity#52, ss_sales_price#53]
Input [5]: [ss_customer_sk#51, ss_quantity#52, ss_sales_price#53, ss_sold_date_sk#54, d_date_sk#56]

(109) Exchange
Input [3]: [ss_customer_sk#51, ss_quantity#52, ss_sales_price#53]
Arguments: hashpartitioning(ss_customer_sk#51, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(110) Sort [codegen id : 3]
Input [3]: [ss_customer_sk#51, ss_quantity#52, ss_sales_price#53]
Arguments: [ss_customer_sk#51 ASC NULLS FIRST], false, 0

(111) ReusedExchange [Reuses operator id: 39]
Output [1]: [c_customer_sk#57]

(112) Sort [codegen id : 5]
Input [1]: [c_customer_sk#57]
Arguments: [c_customer_sk#57 ASC NULLS FIRST], false, 0

(113) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#51]
Right keys [1]: [c_customer_sk#57]
Join type: Inner
Join condition: None

(114) Project [codegen id : 6]
Output [3]: [ss_quantity#52, ss_sales_price#53, c_customer_sk#57]
Input [4]: [ss_customer_sk#51, ss_quantity#52, ss_sales_price#53, c_customer_sk#57]

(115) HashAggregate [codegen id : 6]
Input [3]: [ss_quantity#52, ss_sales_price#53, c_customer_sk#57]
Keys [1]: [c_customer_sk#57]
Functions [1]: [partial_sum((cast(ss_quantity#52 as decimal(10,0)) * ss_sales_price#53))]
Aggregate Attributes [2]: [sum#58, isEmpty#59]
Results [3]: [c_customer_sk#57, sum#60, isEmpty#61]

(116) HashAggregate [codegen id : 6]
Input [3]: [c_customer_sk#57, sum#60, isEmpty#61]
Keys [1]: [c_customer_sk#57]
Functions [1]: [sum((cast(ss_quantity#52 as decimal(10,0)) * ss_sales_price#53))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#52 as decimal(10,0)) * ss_sales_price#53))#62]
Results [1]: [sum((cast(ss_quantity#52 as decimal(10,0)) * ss_sales_price#53))#62 AS csales#63]

(117) HashAggregate [codegen id : 6]
Input [1]: [csales#63]
Keys: []
Functions [1]: [partial_max(csales#63)]
Aggregate Attributes [1]: [max#64]
Results [1]: [max#65]

(118) Exchange
Input [1]: [max#65]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=13]

(119) HashAggregate [codegen id : 7]
Input [1]: [max#65]
Keys: []
Functions [1]: [max(csales#63)]
Aggregate Attributes [1]: [max(csales#63)#66]
Results [1]: [max(csales#63)#66 AS tpcds_cmax#67]

Subquery:4 Hosting operator id = 103 Hosting Expression = ss_sold_date_sk#54 IN dynamicpruning#55
BroadcastExchange (124)
+- * Project (123)
   +- * Filter (122)
      +- * ColumnarToRow (121)
         +- Scan parquet spark_catalog.default.date_dim (120)


(120) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#56, d_year#68]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(121) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#56, d_year#68]

(122) Filter [codegen id : 1]
Input [2]: [d_date_sk#56, d_year#68]
Condition : (d_year#68 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#56))

(123) Project [codegen id : 1]
Output [1]: [d_date_sk#56]
Input [2]: [d_date_sk#56, d_year#68]

(124) BroadcastExchange
Input [1]: [d_date_sk#56]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=14]

Subquery:5 Hosting operator id = 53 Hosting Expression = ws_sold_date_sk#39 IN dynamicpruning#6

Subquery:6 Hosting operator id = 81 Hosting Expression = ReusedSubquery Subquery scalar-subquery#31, [id=#32]


