== Physical Plan ==
CollectLimit (92)
+- * HashAggregate (91)
   +- Exchange (90)
      +- * HashAggregate (89)
         +- Union (88)
            :- * Project (60)
            :  +- * BroadcastHashJoin Inner BuildRight (59)
            :     :- * Project (53)
            :     :  +- SortMergeJoin LeftSemi (52)
            :     :     :- * Sort (34)
            :     :     :  +- Exchange (33)
            :     :     :     +- * Project (32)
            :     :     :        +- SortMergeJoin LeftSemi (31)
            :     :     :           :- * Sort (5)
            :     :     :           :  +- Exchange (4)
            :     :     :           :     +- * Filter (3)
            :     :     :           :        +- * ColumnarToRow (2)
            :     :     :           :           +- Scan parquet default.catalog_sales (1)
            :     :     :           +- * Sort (30)
            :     :     :              +- Exchange (29)
            :     :     :                 +- * Project (28)
            :     :     :                    +- * Filter (27)
            :     :     :                       +- * HashAggregate (26)
            :     :     :                          +- * HashAggregate (25)
            :     :     :                             +- * Project (24)
            :     :     :                                +- * SortMergeJoin Inner (23)
            :     :     :                                   :- * Sort (17)
            :     :     :                                   :  +- Exchange (16)
            :     :     :                                   :     +- * Project (15)
            :     :     :                                   :        +- * BroadcastHashJoin Inner BuildRight (14)
            :     :     :                                   :           :- * Filter (8)
            :     :     :                                   :           :  +- * ColumnarToRow (7)
            :     :     :                                   :           :     +- Scan parquet default.store_sales (6)
            :     :     :                                   :           +- BroadcastExchange (13)
            :     :     :                                   :              +- * Project (12)
            :     :     :                                   :                 +- * Filter (11)
            :     :     :                                   :                    +- * ColumnarToRow (10)
            :     :     :                                   :                       +- Scan parquet default.date_dim (9)
            :     :     :                                   +- * Sort (22)
            :     :     :                                      +- Exchange (21)
            :     :     :                                         +- * Filter (20)
            :     :     :                                            +- * ColumnarToRow (19)
            :     :     :                                               +- Scan parquet default.item (18)
            :     :     +- * Sort (51)
            :     :        +- * Project (50)
            :     :           +- * Filter (49)
            :     :              +- * HashAggregate (48)
            :     :                 +- * HashAggregate (47)
            :     :                    +- * Project (46)
            :     :                       +- * SortMergeJoin Inner (45)
            :     :                          :- * Sort (39)
            :     :                          :  +- Exchange (38)
            :     :                          :     +- * Filter (37)
            :     :                          :        +- * ColumnarToRow (36)
            :     :                          :           +- Scan parquet default.store_sales (35)
            :     :                          +- * Sort (44)
            :     :                             +- Exchange (43)
            :     :                                +- * Filter (42)
            :     :                                   +- * ColumnarToRow (41)
            :     :                                      +- Scan parquet default.customer (40)
            :     +- BroadcastExchange (58)
            :        +- * Project (57)
            :           +- * Filter (56)
            :              +- * ColumnarToRow (55)
            :                 +- Scan parquet default.date_dim (54)
            +- * Project (87)
               +- * BroadcastHashJoin Inner BuildRight (86)
                  :- * Project (84)
                  :  +- SortMergeJoin LeftSemi (83)
                  :     :- * Sort (71)
                  :     :  +- Exchange (70)
                  :     :     +- * Project (69)
                  :     :        +- SortMergeJoin LeftSemi (68)
                  :     :           :- * Sort (65)
                  :     :           :  +- Exchange (64)
                  :     :           :     +- * Filter (63)
                  :     :           :        +- * ColumnarToRow (62)
                  :     :           :           +- Scan parquet default.web_sales (61)
                  :     :           +- * Sort (67)
                  :     :              +- ReusedExchange (66)
                  :     +- * Sort (82)
                  :        +- * Project (81)
                  :           +- * Filter (80)
                  :              +- * HashAggregate (79)
                  :                 +- * HashAggregate (78)
                  :                    +- * Project (77)
                  :                       +- * SortMergeJoin Inner (76)
                  :                          :- * Sort (73)
                  :                          :  +- ReusedExchange (72)
                  :                          +- * Sort (75)
                  :                             +- ReusedExchange (74)
                  +- ReusedExchange (85)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]

(3) Filter [codegen id : 1]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Condition : (isnotnull(cs_sold_date_sk#1) AND dynamicpruningexpression(cs_sold_date_sk#1 IN dynamicpruning#6))

(4) Exchange
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Arguments: hashpartitioning(cs_item_sk#3, 5), true, [id=#7]

(5) Sort [codegen id : 2]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Arguments: [cs_item_sk#3 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#8, ss_item_sk#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ss_sold_date_sk#8, ss_item_sk#9]

(8) Filter [codegen id : 4]
Input [2]: [ss_sold_date_sk#8, ss_item_sk#9]
Condition : (isnotnull(ss_sold_date_sk#8) AND isnotnull(ss_item_sk#9))

(9) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_date#11, d_year#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(10) ColumnarToRow [codegen id : 3]
Input [3]: [d_date_sk#10, d_date#11, d_year#12]

(11) Filter [codegen id : 3]
Input [3]: [d_date_sk#10, d_date#11, d_year#12]
Condition : (d_year#12 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#10))

(12) Project [codegen id : 3]
Output [2]: [d_date_sk#10, d_date#11]
Input [3]: [d_date_sk#10, d_date#11, d_year#12]

(13) BroadcastExchange
Input [2]: [d_date_sk#10, d_date#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13]

(14) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#10]
Join condition: None

(15) Project [codegen id : 4]
Output [2]: [ss_item_sk#9, d_date#11]
Input [4]: [ss_sold_date_sk#8, ss_item_sk#9, d_date_sk#10, d_date#11]

(16) Exchange
Input [2]: [ss_item_sk#9, d_date#11]
Arguments: hashpartitioning(ss_item_sk#9, 5), true, [id=#14]

(17) Sort [codegen id : 5]
Input [2]: [ss_item_sk#9, d_date#11]
Arguments: [ss_item_sk#9 ASC NULLS FIRST], false, 0

(18) Scan parquet default.item
Output [2]: [i_item_sk#15, i_item_desc#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(19) ColumnarToRow [codegen id : 6]
Input [2]: [i_item_sk#15, i_item_desc#16]

(20) Filter [codegen id : 6]
Input [2]: [i_item_sk#15, i_item_desc#16]
Condition : isnotnull(i_item_sk#15)

(21) Exchange
Input [2]: [i_item_sk#15, i_item_desc#16]
Arguments: hashpartitioning(i_item_sk#15, 5), true, [id=#17]

(22) Sort [codegen id : 7]
Input [2]: [i_item_sk#15, i_item_desc#16]
Arguments: [i_item_sk#15 ASC NULLS FIRST], false, 0

(23) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#9]
Right keys [1]: [i_item_sk#15]
Join condition: None

(24) Project [codegen id : 8]
Output [3]: [d_date#11, i_item_sk#15, i_item_desc#16]
Input [4]: [ss_item_sk#9, d_date#11, i_item_sk#15, i_item_desc#16]

(25) HashAggregate [codegen id : 8]
Input [3]: [d_date#11, i_item_sk#15, i_item_desc#16]
Keys [3]: [substr(i_item_desc#16, 1, 30) AS substr(i_item_desc#16, 1, 30)#18, i_item_sk#15, d_date#11]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#19]
Results [4]: [substr(i_item_desc#16, 1, 30)#18, i_item_sk#15, d_date#11, count#20]

(26) HashAggregate [codegen id : 8]
Input [4]: [substr(i_item_desc#16, 1, 30)#18, i_item_sk#15, d_date#11, count#20]
Keys [3]: [substr(i_item_desc#16, 1, 30)#18, i_item_sk#15, d_date#11]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#21]
Results [2]: [i_item_sk#15 AS item_sk#22, count(1)#21 AS count(1)#23]

(27) Filter [codegen id : 8]
Input [2]: [item_sk#22, count(1)#23]
Condition : (count(1)#23 > 4)

(28) Project [codegen id : 8]
Output [1]: [item_sk#22]
Input [2]: [item_sk#22, count(1)#23]

(29) Exchange
Input [1]: [item_sk#22]
Arguments: hashpartitioning(item_sk#22, 5), true, [id=#24]

(30) Sort [codegen id : 9]
Input [1]: [item_sk#22]
Arguments: [item_sk#22 ASC NULLS FIRST], false, 0

(31) SortMergeJoin
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [item_sk#22]
Join condition: None

(32) Project [codegen id : 10]
Output [4]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]

(33) Exchange
Input [4]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]
Arguments: hashpartitioning(cs_bill_customer_sk#2, 5), true, [id=#25]

(34) Sort [codegen id : 11]
Input [4]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]
Arguments: [cs_bill_customer_sk#2 ASC NULLS FIRST], false, 0

(35) Scan parquet default.store_sales
Output [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(36) ColumnarToRow [codegen id : 12]
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]

(37) Filter [codegen id : 12]
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Condition : isnotnull(ss_customer_sk#26)

(38) Exchange
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: hashpartitioning(ss_customer_sk#26, 5), true, [id=#29]

(39) Sort [codegen id : 13]
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: [ss_customer_sk#26 ASC NULLS FIRST], false, 0

(40) Scan parquet default.customer
Output [1]: [c_customer_sk#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(41) ColumnarToRow [codegen id : 14]
Input [1]: [c_customer_sk#30]

(42) Filter [codegen id : 14]
Input [1]: [c_customer_sk#30]
Condition : isnotnull(c_customer_sk#30)

(43) Exchange
Input [1]: [c_customer_sk#30]
Arguments: hashpartitioning(c_customer_sk#30, 5), true, [id=#31]

(44) Sort [codegen id : 15]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(45) SortMergeJoin [codegen id : 16]
Left keys [1]: [ss_customer_sk#26]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(46) Project [codegen id : 16]
Output [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, c_customer_sk#30]

(47) HashAggregate [codegen id : 16]
Input [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Keys [1]: [c_customer_sk#30]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#32, isEmpty#33]
Results [3]: [c_customer_sk#30, sum#34, isEmpty#35]

(48) HashAggregate [codegen id : 16]
Input [3]: [c_customer_sk#30, sum#34, isEmpty#35]
Keys [1]: [c_customer_sk#30]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#36]
Results [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#36 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37]

(49) Filter [codegen id : 16]
Input [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#38, [id=#39] as decimal(32,6)))), DecimalType(38,8), true)))

(50) Project [codegen id : 16]
Output [1]: [c_customer_sk#30]
Input [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37]

(51) Sort [codegen id : 16]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(52) SortMergeJoin
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(53) Project [codegen id : 18]
Output [3]: [cs_sold_date_sk#1, cs_quantity#4, cs_list_price#5]
Input [4]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]

(54) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_year#12, d_moy#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(55) ColumnarToRow [codegen id : 17]
Input [3]: [d_date_sk#10, d_year#12, d_moy#40]

(56) Filter [codegen id : 17]
Input [3]: [d_date_sk#10, d_year#12, d_moy#40]
Condition : ((((isnotnull(d_year#12) AND isnotnull(d_moy#40)) AND (d_year#12 = 2000)) AND (d_moy#40 = 2)) AND isnotnull(d_date_sk#10))

(57) Project [codegen id : 17]
Output [1]: [d_date_sk#10]
Input [3]: [d_date_sk#10, d_year#12, d_moy#40]

(58) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#41]

(59) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(60) Project [codegen id : 18]
Output [1]: [CheckOverflow((promote_precision(cast(cast(cs_quantity#4 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#5 as decimal(12,2)))), DecimalType(18,2), true) AS sales#42]
Input [4]: [cs_sold_date_sk#1, cs_quantity#4, cs_list_price#5, d_date_sk#10]

(61) Scan parquet default.web_sales
Output [5]: [ws_sold_date_sk#43, ws_item_sk#44, ws_bill_customer_sk#45, ws_quantity#46, ws_list_price#47]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(62) ColumnarToRow [codegen id : 19]
Input [5]: [ws_sold_date_sk#43, ws_item_sk#44, ws_bill_customer_sk#45, ws_quantity#46, ws_list_price#47]

(63) Filter [codegen id : 19]
Input [5]: [ws_sold_date_sk#43, ws_item_sk#44, ws_bill_customer_sk#45, ws_quantity#46, ws_list_price#47]
Condition : (isnotnull(ws_sold_date_sk#43) AND dynamicpruningexpression(ws_sold_date_sk#43 IN dynamicpruning#6))

(64) Exchange
Input [5]: [ws_sold_date_sk#43, ws_item_sk#44, ws_bill_customer_sk#45, ws_quantity#46, ws_list_price#47]
Arguments: hashpartitioning(ws_item_sk#44, 5), true, [id=#48]

(65) Sort [codegen id : 20]
Input [5]: [ws_sold_date_sk#43, ws_item_sk#44, ws_bill_customer_sk#45, ws_quantity#46, ws_list_price#47]
Arguments: [ws_item_sk#44 ASC NULLS FIRST], false, 0

(66) ReusedExchange [Reuses operator id: 29]
Output [1]: [item_sk#22]

(67) Sort [codegen id : 27]
Input [1]: [item_sk#22]
Arguments: [item_sk#22 ASC NULLS FIRST], false, 0

(68) SortMergeJoin
Left keys [1]: [ws_item_sk#44]
Right keys [1]: [item_sk#22]
Join condition: None

(69) Project [codegen id : 28]
Output [4]: [ws_sold_date_sk#43, ws_bill_customer_sk#45, ws_quantity#46, ws_list_price#47]
Input [5]: [ws_sold_date_sk#43, ws_item_sk#44, ws_bill_customer_sk#45, ws_quantity#46, ws_list_price#47]

(70) Exchange
Input [4]: [ws_sold_date_sk#43, ws_bill_customer_sk#45, ws_quantity#46, ws_list_price#47]
Arguments: hashpartitioning(ws_bill_customer_sk#45, 5), true, [id=#49]

(71) Sort [codegen id : 29]
Input [4]: [ws_sold_date_sk#43, ws_bill_customer_sk#45, ws_quantity#46, ws_list_price#47]
Arguments: [ws_bill_customer_sk#45 ASC NULLS FIRST], false, 0

(72) ReusedExchange [Reuses operator id: 38]
Output [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]

(73) Sort [codegen id : 31]
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: [ss_customer_sk#26 ASC NULLS FIRST], false, 0

(74) ReusedExchange [Reuses operator id: 43]
Output [1]: [c_customer_sk#30]

(75) Sort [codegen id : 33]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(76) SortMergeJoin [codegen id : 34]
Left keys [1]: [ss_customer_sk#26]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(77) Project [codegen id : 34]
Output [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, c_customer_sk#30]

(78) HashAggregate [codegen id : 34]
Input [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Keys [1]: [c_customer_sk#30]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#50, isEmpty#51]
Results [3]: [c_customer_sk#30, sum#52, isEmpty#53]

(79) HashAggregate [codegen id : 34]
Input [3]: [c_customer_sk#30, sum#52, isEmpty#53]
Keys [1]: [c_customer_sk#30]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#54]
Results [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#54 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#55]

(80) Filter [codegen id : 34]
Input [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#55]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#55) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#55 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#38, [id=#39] as decimal(32,6)))), DecimalType(38,8), true)))

(81) Project [codegen id : 34]
Output [1]: [c_customer_sk#30]
Input [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#55]

(82) Sort [codegen id : 34]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(83) SortMergeJoin
Left keys [1]: [ws_bill_customer_sk#45]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(84) Project [codegen id : 36]
Output [3]: [ws_sold_date_sk#43, ws_quantity#46, ws_list_price#47]
Input [4]: [ws_sold_date_sk#43, ws_bill_customer_sk#45, ws_quantity#46, ws_list_price#47]

(85) ReusedExchange [Reuses operator id: 58]
Output [1]: [d_date_sk#10]

(86) BroadcastHashJoin [codegen id : 36]
Left keys [1]: [ws_sold_date_sk#43]
Right keys [1]: [d_date_sk#10]
Join condition: None

(87) Project [codegen id : 36]
Output [1]: [CheckOverflow((promote_precision(cast(cast(ws_quantity#46 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#47 as decimal(12,2)))), DecimalType(18,2), true) AS sales#56]
Input [4]: [ws_sold_date_sk#43, ws_quantity#46, ws_list_price#47, d_date_sk#10]

(88) Union

(89) HashAggregate [codegen id : 37]
Input [1]: [sales#42]
Keys: []
Functions [1]: [partial_sum(sales#42)]
Aggregate Attributes [2]: [sum#57, isEmpty#58]
Results [2]: [sum#59, isEmpty#60]

(90) Exchange
Input [2]: [sum#59, isEmpty#60]
Arguments: SinglePartition, true, [id=#61]

(91) HashAggregate [codegen id : 38]
Input [2]: [sum#59, isEmpty#60]
Keys: []
Functions [1]: [sum(sales#42)]
Aggregate Attributes [1]: [sum(sales#42)#62]
Results [1]: [sum(sales#42)#62 AS sum(sales)#63]

(92) CollectLimit
Input [1]: [sum(sales)#63]
Arguments: 100

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = cs_sold_date_sk#1 IN dynamicpruning#6
ReusedExchange (93)


(93) ReusedExchange [Reuses operator id: 58]
Output [1]: [d_date_sk#10]

Subquery:2 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#1 IN dynamicpruning#6

Subquery:3 Hosting operator id = 49 Hosting Expression = Subquery scalar-subquery#38, [id=#39]
* HashAggregate (117)
+- Exchange (116)
   +- * HashAggregate (115)
      +- * HashAggregate (114)
         +- * HashAggregate (113)
            +- * Project (112)
               +- * SortMergeJoin Inner (111)
                  :- * Sort (105)
                  :  +- Exchange (104)
                  :     +- * Project (103)
                  :        +- * BroadcastHashJoin Inner BuildRight (102)
                  :           :- * Filter (96)
                  :           :  +- * ColumnarToRow (95)
                  :           :     +- Scan parquet default.store_sales (94)
                  :           +- BroadcastExchange (101)
                  :              +- * Project (100)
                  :                 +- * Filter (99)
                  :                    +- * ColumnarToRow (98)
                  :                       +- Scan parquet default.date_dim (97)
                  +- * Sort (110)
                     +- Exchange (109)
                        +- * Filter (108)
                           +- * ColumnarToRow (107)
                              +- Scan parquet default.customer (106)


(94) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#8, ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(95) ColumnarToRow [codegen id : 2]
Input [4]: [ss_sold_date_sk#8, ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]

(96) Filter [codegen id : 2]
Input [4]: [ss_sold_date_sk#8, ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Condition : (isnotnull(ss_customer_sk#26) AND isnotnull(ss_sold_date_sk#8))

(97) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(98) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#12]

(99) Filter [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#12]
Condition : (d_year#12 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#10))

(100) Project [codegen id : 1]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#12]

(101) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#64]

(102) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#10]
Join condition: None

(103) Project [codegen id : 2]
Output [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Input [5]: [ss_sold_date_sk#8, ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, d_date_sk#10]

(104) Exchange
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: hashpartitioning(ss_customer_sk#26, 5), true, [id=#65]

(105) Sort [codegen id : 3]
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: [ss_customer_sk#26 ASC NULLS FIRST], false, 0

(106) Scan parquet default.customer
Output [1]: [c_customer_sk#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(107) ColumnarToRow [codegen id : 4]
Input [1]: [c_customer_sk#30]

(108) Filter [codegen id : 4]
Input [1]: [c_customer_sk#30]
Condition : isnotnull(c_customer_sk#30)

(109) Exchange
Input [1]: [c_customer_sk#30]
Arguments: hashpartitioning(c_customer_sk#30, 5), true, [id=#66]

(110) Sort [codegen id : 5]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(111) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#26]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(112) Project [codegen id : 6]
Output [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, c_customer_sk#30]

(113) HashAggregate [codegen id : 6]
Input [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Keys [1]: [c_customer_sk#30]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#67, isEmpty#68]
Results [3]: [c_customer_sk#30, sum#69, isEmpty#70]

(114) HashAggregate [codegen id : 6]
Input [3]: [c_customer_sk#30, sum#69, isEmpty#70]
Keys [1]: [c_customer_sk#30]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#71]
Results [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#71 AS csales#72]

(115) HashAggregate [codegen id : 6]
Input [1]: [csales#72]
Keys: []
Functions [1]: [partial_max(csales#72)]
Aggregate Attributes [1]: [max#73]
Results [1]: [max#74]

(116) Exchange
Input [1]: [max#74]
Arguments: SinglePartition, true, [id=#75]

(117) HashAggregate [codegen id : 7]
Input [1]: [max#74]
Keys: []
Functions [1]: [max(csales#72)]
Aggregate Attributes [1]: [max(csales#72)#76]
Results [1]: [max(csales#72)#76 AS tpcds_cmax#77]

Subquery:4 Hosting operator id = 63 Hosting Expression = ws_sold_date_sk#43 IN dynamicpruning#6

Subquery:5 Hosting operator id = 61 Hosting Expression = ws_sold_date_sk#43 IN dynamicpruning#6

Subquery:6 Hosting operator id = 80 Hosting Expression = ReusedSubquery Subquery scalar-subquery#38, [id=#39]


