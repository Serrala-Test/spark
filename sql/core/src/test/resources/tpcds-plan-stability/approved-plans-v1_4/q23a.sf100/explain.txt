== Physical Plan ==
<<<<<<< HEAD
CollectLimit (96)
+- * HashAggregate (95)
   +- Exchange (94)
      +- * HashAggregate (93)
         +- Union (92)
            :- * Project (57)
            :  +- * BroadcastHashJoin Inner BuildRight (56)
            :     :- * Project (50)
            :     :  +- SortMergeJoin LeftSemi (49)
            :     :     :- * Sort (32)
            :     :     :  +- Exchange (31)
            :     :     :     +- * Project (30)
            :     :     :        +- SortMergeJoin LeftSemi (29)
            :     :     :           :- * Sort (5)
            :     :     :           :  +- Exchange (4)
            :     :     :           :     +- * Filter (3)
            :     :     :           :        +- * ColumnarToRow (2)
            :     :     :           :           +- Scan parquet default.catalog_sales (1)
            :     :     :           +- * Sort (28)
            :     :     :              +- * Project (27)
            :     :     :                 +- * Filter (26)
            :     :     :                    +- * HashAggregate (25)
            :     :     :                       +- * Project (24)
            :     :     :                          +- * SortMergeJoin Inner (23)
            :     :     :                             :- * Sort (17)
            :     :     :                             :  +- Exchange (16)
            :     :     :                             :     +- * Project (15)
            :     :     :                             :        +- * BroadcastHashJoin Inner BuildRight (14)
            :     :     :                             :           :- * Filter (8)
            :     :     :                             :           :  +- * ColumnarToRow (7)
            :     :     :                             :           :     +- Scan parquet default.store_sales (6)
            :     :     :                             :           +- BroadcastExchange (13)
            :     :     :                             :              +- * Project (12)
            :     :     :                             :                 +- * Filter (11)
            :     :     :                             :                    +- * ColumnarToRow (10)
            :     :     :                             :                       +- Scan parquet default.date_dim (9)
            :     :     :                             +- * Sort (22)
            :     :     :                                +- Exchange (21)
            :     :     :                                   +- * Filter (20)
            :     :     :                                      +- * ColumnarToRow (19)
            :     :     :                                         +- Scan parquet default.item (18)
            :     :     +- * Sort (48)
            :     :        +- * Project (47)
            :     :           +- * Filter (46)
            :     :              +- * HashAggregate (45)
            :     :                 +- * Project (44)
            :     :                    +- * SortMergeJoin Inner (43)
            :     :                       :- * Sort (37)
            :     :                       :  +- Exchange (36)
            :     :                       :     +- * Filter (35)
            :     :                       :        +- * ColumnarToRow (34)
            :     :                       :           +- Scan parquet default.store_sales (33)
            :     :                       +- * Sort (42)
            :     :                          +- Exchange (41)
            :     :                             +- * Filter (40)
            :     :                                +- * ColumnarToRow (39)
            :     :                                   +- Scan parquet default.customer (38)
            :     +- BroadcastExchange (55)
            :        +- * Project (54)
            :           +- * Filter (53)
            :              +- * ColumnarToRow (52)
            :                 +- Scan parquet default.date_dim (51)
            +- * Project (91)
               +- * BroadcastHashJoin Inner BuildRight (90)
                  :- * Project (88)
                  :  +- SortMergeJoin LeftSemi (87)
                  :     :- * Sort (76)
                  :     :  +- Exchange (75)
                  :     :     +- * Project (74)
                  :     :        +- SortMergeJoin LeftSemi (73)
                  :     :           :- * Sort (62)
                  :     :           :  +- Exchange (61)
                  :     :           :     +- * Filter (60)
                  :     :           :        +- * ColumnarToRow (59)
                  :     :           :           +- Scan parquet default.web_sales (58)
                  :     :           +- * Sort (72)
                  :     :              +- * Project (71)
                  :     :                 +- * Filter (70)
                  :     :                    +- * HashAggregate (69)
                  :     :                       +- * Project (68)
                  :     :                          +- * SortMergeJoin Inner (67)
                  :     :                             :- * Sort (64)
                  :     :                             :  +- ReusedExchange (63)
                  :     :                             +- * Sort (66)
                  :     :                                +- ReusedExchange (65)
                  :     +- * Sort (86)
                  :        +- * Project (85)
                  :           +- * Filter (84)
                  :              +- * HashAggregate (83)
                  :                 +- * Project (82)
                  :                    +- * SortMergeJoin Inner (81)
                  :                       :- * Sort (78)
                  :                       :  +- ReusedExchange (77)
                  :                       +- * Sort (80)
                  :                          +- ReusedExchange (79)
                  +- ReusedExchange (89)
=======
* HashAggregate (99)
+- Exchange (98)
   +- * HashAggregate (97)
      +- Union (96)
         :- * Project (59)
         :  +- * BroadcastHashJoin Inner BuildRight (58)
         :     :- * Project (52)
         :     :  +- SortMergeJoin LeftSemi (51)
         :     :     :- * Sort (33)
         :     :     :  +- Exchange (32)
         :     :     :     +- * Project (31)
         :     :     :        +- SortMergeJoin LeftSemi (30)
         :     :     :           :- * Sort (5)
         :     :     :           :  +- Exchange (4)
         :     :     :           :     +- * Filter (3)
         :     :     :           :        +- * ColumnarToRow (2)
         :     :     :           :           +- Scan parquet default.catalog_sales (1)
         :     :     :           +- * Sort (29)
         :     :     :              +- * Project (28)
         :     :     :                 +- * Filter (27)
         :     :     :                    +- * HashAggregate (26)
         :     :     :                       +- * HashAggregate (25)
         :     :     :                          +- * Project (24)
         :     :     :                             +- * SortMergeJoin Inner (23)
         :     :     :                                :- * Sort (17)
         :     :     :                                :  +- Exchange (16)
         :     :     :                                :     +- * Project (15)
         :     :     :                                :        +- * BroadcastHashJoin Inner BuildRight (14)
         :     :     :                                :           :- * Filter (8)
         :     :     :                                :           :  +- * ColumnarToRow (7)
         :     :     :                                :           :     +- Scan parquet default.store_sales (6)
         :     :     :                                :           +- BroadcastExchange (13)
         :     :     :                                :              +- * Project (12)
         :     :     :                                :                 +- * Filter (11)
         :     :     :                                :                    +- * ColumnarToRow (10)
         :     :     :                                :                       +- Scan parquet default.date_dim (9)
         :     :     :                                +- * Sort (22)
         :     :     :                                   +- Exchange (21)
         :     :     :                                      +- * Filter (20)
         :     :     :                                         +- * ColumnarToRow (19)
         :     :     :                                            +- Scan parquet default.item (18)
         :     :     +- * Sort (50)
         :     :        +- * Project (49)
         :     :           +- * Filter (48)
         :     :              +- * HashAggregate (47)
         :     :                 +- * HashAggregate (46)
         :     :                    +- * Project (45)
         :     :                       +- * SortMergeJoin Inner (44)
         :     :                          :- * Sort (38)
         :     :                          :  +- Exchange (37)
         :     :                          :     +- * Filter (36)
         :     :                          :        +- * ColumnarToRow (35)
         :     :                          :           +- Scan parquet default.store_sales (34)
         :     :                          +- * Sort (43)
         :     :                             +- Exchange (42)
         :     :                                +- * Filter (41)
         :     :                                   +- * ColumnarToRow (40)
         :     :                                      +- Scan parquet default.customer (39)
         :     +- BroadcastExchange (57)
         :        +- * Project (56)
         :           +- * Filter (55)
         :              +- * ColumnarToRow (54)
         :                 +- Scan parquet default.date_dim (53)
         +- * Project (95)
            +- * BroadcastHashJoin Inner BuildRight (94)
               :- * Project (92)
               :  +- SortMergeJoin LeftSemi (91)
               :     :- * Sort (79)
               :     :  +- Exchange (78)
               :     :     +- * Project (77)
               :     :        +- SortMergeJoin LeftSemi (76)
               :     :           :- * Sort (64)
               :     :           :  +- Exchange (63)
               :     :           :     +- * Filter (62)
               :     :           :        +- * ColumnarToRow (61)
               :     :           :           +- Scan parquet default.web_sales (60)
               :     :           +- * Sort (75)
               :     :              +- * Project (74)
               :     :                 +- * Filter (73)
               :     :                    +- * HashAggregate (72)
               :     :                       +- * HashAggregate (71)
               :     :                          +- * Project (70)
               :     :                             +- * SortMergeJoin Inner (69)
               :     :                                :- * Sort (66)
               :     :                                :  +- ReusedExchange (65)
               :     :                                +- * Sort (68)
               :     :                                   +- ReusedExchange (67)
               :     +- * Sort (90)
               :        +- * Project (89)
               :           +- * Filter (88)
               :              +- * HashAggregate (87)
               :                 +- * HashAggregate (86)
               :                    +- * Project (85)
               :                       +- * SortMergeJoin Inner (84)
               :                          :- * Sort (81)
               :                          :  +- ReusedExchange (80)
               :                          +- * Sort (83)
               :                             +- ReusedExchange (82)
               +- ReusedExchange (93)
>>>>>>> oss/master


(1) Scan parquet default.catalog_sales
Output [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]

(3) Filter [codegen id : 1]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Condition : isnotnull(cs_sold_date_sk#1)

(4) Exchange
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Arguments: hashpartitioning(cs_item_sk#3, 5), true, [id=#6]

(5) Sort [codegen id : 2]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Arguments: [cs_item_sk#3 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#7, ss_item_sk#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ss_sold_date_sk#7, ss_item_sk#8]

(8) Filter [codegen id : 4]
Input [2]: [ss_sold_date_sk#7, ss_item_sk#8]
Condition : (isnotnull(ss_sold_date_sk#7) AND isnotnull(ss_item_sk#8))

(9) Scan parquet default.date_dim
Output [3]: [d_date_sk#9, d_date#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(10) ColumnarToRow [codegen id : 3]
Input [3]: [d_date_sk#9, d_date#10, d_year#11]

(11) Filter [codegen id : 3]
Input [3]: [d_date_sk#9, d_date#10, d_year#11]
Condition : (d_year#11 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#9))

(12) Project [codegen id : 3]
Output [2]: [d_date_sk#9, d_date#10]
Input [3]: [d_date_sk#9, d_date#10, d_year#11]

(13) BroadcastExchange
Input [2]: [d_date_sk#9, d_date#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(14) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#9]
Join condition: None

(15) Project [codegen id : 4]
Output [2]: [ss_item_sk#8, d_date#10]
Input [4]: [ss_sold_date_sk#7, ss_item_sk#8, d_date_sk#9, d_date#10]

(16) Exchange
Input [2]: [ss_item_sk#8, d_date#10]
Arguments: hashpartitioning(ss_item_sk#8, 5), true, [id=#13]

(17) Sort [codegen id : 5]
Input [2]: [ss_item_sk#8, d_date#10]
Arguments: [ss_item_sk#8 ASC NULLS FIRST], false, 0

(18) Scan parquet default.item
Output [2]: [i_item_sk#14, i_item_desc#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(19) ColumnarToRow [codegen id : 6]
Input [2]: [i_item_sk#14, i_item_desc#15]

(20) Filter [codegen id : 6]
Input [2]: [i_item_sk#14, i_item_desc#15]
Condition : isnotnull(i_item_sk#14)

(21) Exchange
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: hashpartitioning(i_item_sk#14, 5), true, [id=#16]

(22) Sort [codegen id : 7]
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: [i_item_sk#14 ASC NULLS FIRST], false, 0

(23) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#14]
Join condition: None

(24) Project [codegen id : 8]
Output [3]: [d_date#10, i_item_sk#14, i_item_desc#15]
Input [4]: [ss_item_sk#8, d_date#10, i_item_sk#14, i_item_desc#15]

(25) HashAggregate [codegen id : 8]
Input [3]: [d_date#10, i_item_sk#14, i_item_desc#15]
Keys [3]: [substr(i_item_desc#15, 1, 30) AS substr(i_item_desc#15, 1, 30)#17, i_item_sk#14, d_date#10]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#18]
Results [2]: [i_item_sk#14 AS item_sk#19, count(1)#18 AS count(1)#20]

(26) Filter [codegen id : 8]
Input [2]: [item_sk#19, count(1)#20]
Condition : (count(1)#20 > 4)

(27) Project [codegen id : 8]
Output [1]: [item_sk#19]
Input [2]: [item_sk#19, count(1)#20]

(28) Sort [codegen id : 8]
Input [1]: [item_sk#19]
Arguments: [item_sk#19 ASC NULLS FIRST], false, 0

(29) SortMergeJoin
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [item_sk#19]
Join condition: None

(30) Project [codegen id : 9]
Output [4]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]

(31) Exchange
Input [4]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]
Arguments: hashpartitioning(cs_bill_customer_sk#2, 5), true, [id=#21]

(32) Sort [codegen id : 10]
Input [4]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]
Arguments: [cs_bill_customer_sk#2 ASC NULLS FIRST], false, 0

(33) Scan parquet default.store_sales
Output [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(34) ColumnarToRow [codegen id : 11]
Input [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]

(35) Filter [codegen id : 11]
Input [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Condition : isnotnull(ss_customer_sk#22)

(36) Exchange
Input [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Arguments: hashpartitioning(ss_customer_sk#22, 5), true, [id=#25]

(37) Sort [codegen id : 12]
Input [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Arguments: [ss_customer_sk#22 ASC NULLS FIRST], false, 0

(38) Scan parquet default.customer
Output [1]: [c_customer_sk#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(39) ColumnarToRow [codegen id : 13]
Input [1]: [c_customer_sk#26]

(40) Filter [codegen id : 13]
Input [1]: [c_customer_sk#26]
Condition : isnotnull(c_customer_sk#26)

(41) Exchange
Input [1]: [c_customer_sk#26]
Arguments: hashpartitioning(c_customer_sk#26, 5), true, [id=#27]

(42) Sort [codegen id : 14]
Input [1]: [c_customer_sk#26]
Arguments: [c_customer_sk#26 ASC NULLS FIRST], false, 0

(43) SortMergeJoin [codegen id : 15]
Left keys [1]: [ss_customer_sk#22]
Right keys [1]: [c_customer_sk#26]
Join condition: None

(44) Project [codegen id : 15]
Output [3]: [ss_quantity#23, ss_sales_price#24, c_customer_sk#26]
Input [4]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24, c_customer_sk#26]

(45) HashAggregate [codegen id : 15]
Input [3]: [ss_quantity#23, ss_sales_price#24, c_customer_sk#26]
Keys [1]: [c_customer_sk#26]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#28]
Results [2]: [c_customer_sk#26, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#28 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#29]

(46) Filter [codegen id : 15]
Input [2]: [c_customer_sk#26, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#29]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#29) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#29 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#30, [id=#31] as decimal(32,6)))), DecimalType(38,8), true)))

(47) Project [codegen id : 15]
Output [1]: [c_customer_sk#26]
Input [2]: [c_customer_sk#26, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#29]

(48) Sort [codegen id : 15]
Input [1]: [c_customer_sk#26]
Arguments: [c_customer_sk#26 ASC NULLS FIRST], false, 0

(49) SortMergeJoin
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#26]
Join condition: None

(50) Project [codegen id : 17]
Output [3]: [cs_sold_date_sk#1, cs_quantity#4, cs_list_price#5]
Input [4]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]

(51) Scan parquet default.date_dim
Output [3]: [d_date_sk#9, d_year#11, d_moy#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(52) ColumnarToRow [codegen id : 16]
Input [3]: [d_date_sk#9, d_year#11, d_moy#32]

(53) Filter [codegen id : 16]
Input [3]: [d_date_sk#9, d_year#11, d_moy#32]
Condition : ((((isnotnull(d_year#11) AND isnotnull(d_moy#32)) AND (d_year#11 = 2000)) AND (d_moy#32 = 2)) AND isnotnull(d_date_sk#9))

(54) Project [codegen id : 16]
Output [1]: [d_date_sk#9]
Input [3]: [d_date_sk#9, d_year#11, d_moy#32]

(55) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#33]

(56) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#9]
Join condition: None

(57) Project [codegen id : 17]
Output [1]: [CheckOverflow((promote_precision(cast(cast(cs_quantity#4 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#5 as decimal(12,2)))), DecimalType(18,2), true) AS sales#34]
Input [4]: [cs_sold_date_sk#1, cs_quantity#4, cs_list_price#5, d_date_sk#9]

(58) Scan parquet default.web_sales
Output [5]: [ws_sold_date_sk#35, ws_item_sk#36, ws_bill_customer_sk#37, ws_quantity#38, ws_list_price#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(59) ColumnarToRow [codegen id : 18]
Input [5]: [ws_sold_date_sk#35, ws_item_sk#36, ws_bill_customer_sk#37, ws_quantity#38, ws_list_price#39]

(60) Filter [codegen id : 18]
Input [5]: [ws_sold_date_sk#35, ws_item_sk#36, ws_bill_customer_sk#37, ws_quantity#38, ws_list_price#39]
Condition : isnotnull(ws_sold_date_sk#35)

(61) Exchange
Input [5]: [ws_sold_date_sk#35, ws_item_sk#36, ws_bill_customer_sk#37, ws_quantity#38, ws_list_price#39]
Arguments: hashpartitioning(ws_item_sk#36, 5), true, [id=#40]

(62) Sort [codegen id : 19]
Input [5]: [ws_sold_date_sk#35, ws_item_sk#36, ws_bill_customer_sk#37, ws_quantity#38, ws_list_price#39]
Arguments: [ws_item_sk#36 ASC NULLS FIRST], false, 0

(63) ReusedExchange [Reuses operator id: 16]
Output [2]: [ss_item_sk#8, d_date#10]

(64) Sort [codegen id : 22]
Input [2]: [ss_item_sk#8, d_date#10]
Arguments: [ss_item_sk#8 ASC NULLS FIRST], false, 0

(65) ReusedExchange [Reuses operator id: 21]
Output [2]: [i_item_sk#14, i_item_desc#15]

(66) Sort [codegen id : 24]
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: [i_item_sk#14 ASC NULLS FIRST], false, 0

(67) SortMergeJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#14]
Join condition: None

(68) Project [codegen id : 25]
Output [3]: [d_date#10, i_item_sk#14, i_item_desc#15]
Input [4]: [ss_item_sk#8, d_date#10, i_item_sk#14, i_item_desc#15]

(69) HashAggregate [codegen id : 25]
Input [3]: [d_date#10, i_item_sk#14, i_item_desc#15]
Keys [3]: [substr(i_item_desc#15, 1, 30) AS substr(i_item_desc#15, 1, 30)#41, i_item_sk#14, d_date#10]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#42]
Results [2]: [i_item_sk#14 AS item_sk#19, count(1)#42 AS count(1)#43]

(70) Filter [codegen id : 25]
Input [2]: [item_sk#19, count(1)#43]
Condition : (count(1)#43 > 4)

(71) Project [codegen id : 25]
Output [1]: [item_sk#19]
Input [2]: [item_sk#19, count(1)#43]

(72) Sort [codegen id : 25]
Input [1]: [item_sk#19]
Arguments: [item_sk#19 ASC NULLS FIRST], false, 0

(73) SortMergeJoin
Left keys [1]: [ws_item_sk#36]
Right keys [1]: [item_sk#19]
Join condition: None

(74) Project [codegen id : 26]
Output [4]: [ws_sold_date_sk#35, ws_bill_customer_sk#37, ws_quantity#38, ws_list_price#39]
Input [5]: [ws_sold_date_sk#35, ws_item_sk#36, ws_bill_customer_sk#37, ws_quantity#38, ws_list_price#39]

(75) Exchange
Input [4]: [ws_sold_date_sk#35, ws_bill_customer_sk#37, ws_quantity#38, ws_list_price#39]
Arguments: hashpartitioning(ws_bill_customer_sk#37, 5), true, [id=#44]

(76) Sort [codegen id : 27]
Input [4]: [ws_sold_date_sk#35, ws_bill_customer_sk#37, ws_quantity#38, ws_list_price#39]
Arguments: [ws_bill_customer_sk#37 ASC NULLS FIRST], false, 0

(77) ReusedExchange [Reuses operator id: 36]
Output [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]

(78) Sort [codegen id : 29]
Input [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Arguments: [ss_customer_sk#22 ASC NULLS FIRST], false, 0

(79) ReusedExchange [Reuses operator id: 41]
Output [1]: [c_customer_sk#26]

(80) Sort [codegen id : 31]
Input [1]: [c_customer_sk#26]
Arguments: [c_customer_sk#26 ASC NULLS FIRST], false, 0

(81) SortMergeJoin [codegen id : 32]
Left keys [1]: [ss_customer_sk#22]
Right keys [1]: [c_customer_sk#26]
Join condition: None

(82) Project [codegen id : 32]
Output [3]: [ss_quantity#23, ss_sales_price#24, c_customer_sk#26]
Input [4]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24, c_customer_sk#26]

(83) HashAggregate [codegen id : 32]
Input [3]: [ss_quantity#23, ss_sales_price#24, c_customer_sk#26]
Keys [1]: [c_customer_sk#26]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#45]
Results [2]: [c_customer_sk#26, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#45 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#46]

(84) Filter [codegen id : 32]
Input [2]: [c_customer_sk#26, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#46]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#46) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#46 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#30, [id=#31] as decimal(32,6)))), DecimalType(38,8), true)))

(85) Project [codegen id : 32]
Output [1]: [c_customer_sk#26]
Input [2]: [c_customer_sk#26, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#46]

(86) Sort [codegen id : 32]
Input [1]: [c_customer_sk#26]
Arguments: [c_customer_sk#26 ASC NULLS FIRST], false, 0

(87) SortMergeJoin
Left keys [1]: [ws_bill_customer_sk#37]
Right keys [1]: [c_customer_sk#26]
Join condition: None

(88) Project [codegen id : 34]
Output [3]: [ws_sold_date_sk#35, ws_quantity#38, ws_list_price#39]
Input [4]: [ws_sold_date_sk#35, ws_bill_customer_sk#37, ws_quantity#38, ws_list_price#39]

(89) ReusedExchange [Reuses operator id: 55]
Output [1]: [d_date_sk#9]

(90) BroadcastHashJoin [codegen id : 34]
Left keys [1]: [ws_sold_date_sk#35]
Right keys [1]: [d_date_sk#9]
Join condition: None

(91) Project [codegen id : 34]
Output [1]: [CheckOverflow((promote_precision(cast(cast(ws_quantity#38 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#39 as decimal(12,2)))), DecimalType(18,2), true) AS sales#47]
Input [4]: [ws_sold_date_sk#35, ws_quantity#38, ws_list_price#39, d_date_sk#9]

(92) Union

(93) HashAggregate [codegen id : 35]
Input [1]: [sales#34]
Keys: []
Functions [1]: [partial_sum(sales#34)]
Aggregate Attributes [2]: [sum#48, isEmpty#49]
Results [2]: [sum#50, isEmpty#51]

(94) Exchange
Input [2]: [sum#50, isEmpty#51]
Arguments: SinglePartition, true, [id=#52]

(95) HashAggregate [codegen id : 36]
Input [2]: [sum#50, isEmpty#51]
Keys: []
Functions [1]: [sum(sales#34)]
Aggregate Attributes [1]: [sum(sales#34)#53]
Results [1]: [sum(sales#34)#53 AS sum(sales)#54]

<<<<<<< HEAD
(96) CollectLimit
Input [1]: [sum(sales)#54]
Arguments: 100

===== Subqueries =====

Subquery:1 Hosting operator id = 46 Hosting Expression = Subquery scalar-subquery#30, [id=#31]
* HashAggregate (119)
+- Exchange (118)
   +- * HashAggregate (117)
      +- * HashAggregate (116)
         +- * Project (115)
            +- * SortMergeJoin Inner (114)
               :- * Sort (108)
               :  +- Exchange (107)
               :     +- * Project (106)
               :        +- * BroadcastHashJoin Inner BuildRight (105)
               :           :- * Filter (99)
               :           :  +- * ColumnarToRow (98)
               :           :     +- Scan parquet default.store_sales (97)
               :           +- BroadcastExchange (104)
               :              +- * Project (103)
               :                 +- * Filter (102)
               :                    +- * ColumnarToRow (101)
               :                       +- Scan parquet default.date_dim (100)
               +- * Sort (113)
                  +- Exchange (112)
                     +- * Filter (111)
                        +- * ColumnarToRow (110)
                           +- Scan parquet default.customer (109)


(97) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#7, ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
=======
===== Subqueries =====

Subquery:1 Hosting operator id = 48 Hosting Expression = Subquery scalar-subquery#36, [id=#37]
* HashAggregate (123)
+- Exchange (122)
   +- * HashAggregate (121)
      +- * HashAggregate (120)
         +- * HashAggregate (119)
            +- * Project (118)
               +- * SortMergeJoin Inner (117)
                  :- * Sort (111)
                  :  +- Exchange (110)
                  :     +- * Project (109)
                  :        +- * BroadcastHashJoin Inner BuildRight (108)
                  :           :- * Filter (102)
                  :           :  +- * ColumnarToRow (101)
                  :           :     +- Scan parquet default.store_sales (100)
                  :           +- BroadcastExchange (107)
                  :              +- * Project (106)
                  :                 +- * Filter (105)
                  :                    +- * ColumnarToRow (104)
                  :                       +- Scan parquet default.date_dim (103)
                  +- * Sort (116)
                     +- Exchange (115)
                        +- * Filter (114)
                           +- * ColumnarToRow (113)
                              +- Scan parquet default.customer (112)


(100) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#7, ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
>>>>>>> oss/master
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

<<<<<<< HEAD
(98) ColumnarToRow [codegen id : 2]
Input [4]: [ss_sold_date_sk#7, ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]

(99) Filter [codegen id : 2]
Input [4]: [ss_sold_date_sk#7, ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Condition : (isnotnull(ss_customer_sk#22) AND isnotnull(ss_sold_date_sk#7))

(100) Scan parquet default.date_dim
=======
(101) ColumnarToRow [codegen id : 2]
Input [4]: [ss_sold_date_sk#7, ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]

(102) Filter [codegen id : 2]
Input [4]: [ss_sold_date_sk#7, ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Condition : (isnotnull(ss_customer_sk#24) AND isnotnull(ss_sold_date_sk#7))

(103) Scan parquet default.date_dim
>>>>>>> oss/master
Output [2]: [d_date_sk#9, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

<<<<<<< HEAD
(101) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#11]

(102) Filter [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#11]
Condition : (d_year#11 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#9))

(103) Project [codegen id : 1]
Output [1]: [d_date_sk#9]
Input [2]: [d_date_sk#9, d_year#11]

(104) BroadcastExchange
=======
(104) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#11]

(105) Filter [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#11]
Condition : (d_year#11 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#9))

(106) Project [codegen id : 1]
Output [1]: [d_date_sk#9]
Input [2]: [d_date_sk#9, d_year#11]

(107) BroadcastExchange
>>>>>>> oss/master
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#55]

<<<<<<< HEAD
(105) BroadcastHashJoin [codegen id : 2]
=======
(108) BroadcastHashJoin [codegen id : 2]
>>>>>>> oss/master
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#9]
Join condition: None

<<<<<<< HEAD
(106) Project [codegen id : 2]
Output [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Input [5]: [ss_sold_date_sk#7, ss_customer_sk#22, ss_quantity#23, ss_sales_price#24, d_date_sk#9]

(107) Exchange
Input [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Arguments: hashpartitioning(ss_customer_sk#22, 5), true, [id=#56]

(108) Sort [codegen id : 3]
Input [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Arguments: [ss_customer_sk#22 ASC NULLS FIRST], false, 0

(109) Scan parquet default.customer
Output [1]: [c_customer_sk#26]
=======
(109) Project [codegen id : 2]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Input [5]: [ss_sold_date_sk#7, ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, d_date_sk#9]

(110) Exchange
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: hashpartitioning(ss_customer_sk#24, 5), true, [id=#68]

(111) Sort [codegen id : 3]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: [ss_customer_sk#24 ASC NULLS FIRST], false, 0

(112) Scan parquet default.customer
Output [1]: [c_customer_sk#28]
>>>>>>> oss/master
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

<<<<<<< HEAD
(110) ColumnarToRow [codegen id : 4]
Input [1]: [c_customer_sk#26]

(111) Filter [codegen id : 4]
Input [1]: [c_customer_sk#26]
Condition : isnotnull(c_customer_sk#26)

(112) Exchange
Input [1]: [c_customer_sk#26]
Arguments: hashpartitioning(c_customer_sk#26, 5), true, [id=#57]

(113) Sort [codegen id : 5]
Input [1]: [c_customer_sk#26]
Arguments: [c_customer_sk#26 ASC NULLS FIRST], false, 0

(114) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#22]
Right keys [1]: [c_customer_sk#26]
Join condition: None

(115) Project [codegen id : 6]
Output [3]: [ss_quantity#23, ss_sales_price#24, c_customer_sk#26]
Input [4]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24, c_customer_sk#26]

(116) HashAggregate [codegen id : 6]
Input [3]: [ss_quantity#23, ss_sales_price#24, c_customer_sk#26]
Keys [1]: [c_customer_sk#26]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#58]
Results [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#58 AS csales#59]

(117) HashAggregate [codegen id : 6]
Input [1]: [csales#59]
=======
(113) ColumnarToRow [codegen id : 4]
Input [1]: [c_customer_sk#28]

(114) Filter [codegen id : 4]
Input [1]: [c_customer_sk#28]
Condition : isnotnull(c_customer_sk#28)

(115) Exchange
Input [1]: [c_customer_sk#28]
Arguments: hashpartitioning(c_customer_sk#28, 5), true, [id=#69]

(116) Sort [codegen id : 5]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(117) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#28]
Join condition: None

(118) Project [codegen id : 6]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#28]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#28]

(119) HashAggregate [codegen id : 6]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#28]
Keys [1]: [c_customer_sk#28]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#70, isEmpty#71]
Results [3]: [c_customer_sk#28, sum#72, isEmpty#73]

(120) HashAggregate [codegen id : 6]
Input [3]: [c_customer_sk#28, sum#72, isEmpty#73]
Keys [1]: [c_customer_sk#28]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#74]
Results [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#74 AS csales#75]

(121) HashAggregate [codegen id : 6]
Input [1]: [csales#75]
>>>>>>> oss/master
Keys: []
Functions [1]: [partial_max(csales#59)]
Aggregate Attributes [1]: [max#60]
Results [1]: [max#61]

<<<<<<< HEAD
(118) Exchange
Input [1]: [max#61]
Arguments: SinglePartition, true, [id=#62]

(119) HashAggregate [codegen id : 7]
Input [1]: [max#61]
=======
(122) Exchange
Input [1]: [max#77]
Arguments: SinglePartition, true, [id=#78]

(123) HashAggregate [codegen id : 7]
Input [1]: [max#77]
>>>>>>> oss/master
Keys: []
Functions [1]: [max(csales#59)]
Aggregate Attributes [1]: [max(csales#59)#63]
Results [1]: [max(csales#59)#63 AS tpcds_cmax#64]

Subquery:2 Hosting operator id = 84 Hosting Expression = ReusedSubquery Subquery scalar-subquery#30, [id=#31]


