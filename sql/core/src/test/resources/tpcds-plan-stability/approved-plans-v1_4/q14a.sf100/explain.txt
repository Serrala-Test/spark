== Physical Plan ==
TakeOrderedAndProject (145)
+- * HashAggregate (144)
   +- Exchange (143)
      +- * HashAggregate (142)
         +- * Expand (141)
            +- Union (140)
               :- * Project (101)
               :  +- * Filter (100)
               :     +- * HashAggregate (99)
               :        +- Exchange (98)
               :           +- * HashAggregate (97)
               :              +- * Project (96)
               :                 +- * BroadcastHashJoin Inner BuildRight (95)
               :                    :- * Project (76)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (75)
               :                    :     :- * SortMergeJoin LeftSemi (73)
               :                    :     :  :- * Sort (5)
               :                    :     :  :  +- Exchange (4)
               :                    :     :  :     +- * Filter (3)
               :                    :     :  :        +- * ColumnarToRow (2)
               :                    :     :  :           +- Scan parquet default.store_sales (1)
               :                    :     :  +- * Sort (72)
               :                    :     :     +- Exchange (71)
               :                    :     :        +- * Project (70)
               :                    :     :           +- * BroadcastHashJoin Inner BuildRight (69)
               :                    :     :              :- * Filter (8)
               :                    :     :              :  +- * ColumnarToRow (7)
               :                    :     :              :     +- Scan parquet default.item (6)
               :                    :     :              +- BroadcastExchange (68)
               :                    :     :                 +- * HashAggregate (67)
               :                    :     :                    +- Exchange (66)
               :                    :     :                       +- * HashAggregate (65)
               :                    :     :                          +- * SortMergeJoin LeftSemi (64)
               :                    :     :                             :- * Sort (49)
               :                    :     :                             :  +- Exchange (48)
               :                    :     :                             :     +- * HashAggregate (47)
               :                    :     :                             :        +- Exchange (46)
               :                    :     :                             :           +- * HashAggregate (45)
               :                    :     :                             :              +- * Project (44)
               :                    :     :                             :                 +- * BroadcastHashJoin Inner BuildRight (43)
               :                    :     :                             :                    :- * Project (14)
               :                    :     :                             :                    :  +- * BroadcastHashJoin Inner BuildRight (13)
               :                    :     :                             :                    :     :- * Filter (11)
               :                    :     :                             :                    :     :  +- * ColumnarToRow (10)
               :                    :     :                             :                    :     :     +- Scan parquet default.store_sales (9)
               :                    :     :                             :                    :     +- ReusedExchange (12)
               :                    :     :                             :                    +- BroadcastExchange (42)
               :                    :     :                             :                       +- * SortMergeJoin LeftSemi (41)
               :                    :     :                             :                          :- * Sort (19)
               :                    :     :                             :                          :  +- Exchange (18)
               :                    :     :                             :                          :     +- * Filter (17)
               :                    :     :                             :                          :        +- * ColumnarToRow (16)
               :                    :     :                             :                          :           +- Scan parquet default.item (15)
               :                    :     :                             :                          +- * Sort (40)
               :                    :     :                             :                             +- Exchange (39)
               :                    :     :                             :                                +- * BroadcastHashJoin LeftSemi BuildRight (38)
               :                    :     :                             :                                   :- * Project (31)
               :                    :     :                             :                                   :  +- * BroadcastHashJoin Inner BuildRight (30)
               :                    :     :                             :                                   :     :- * Project (25)
               :                    :     :                             :                                   :     :  +- * BroadcastHashJoin Inner BuildRight (24)
               :                    :     :                             :                                   :     :     :- * Filter (22)
               :                    :     :                             :                                   :     :     :  +- * ColumnarToRow (21)
               :                    :     :                             :                                   :     :     :     +- Scan parquet default.catalog_sales (20)
               :                    :     :                             :                                   :     :     +- ReusedExchange (23)
               :                    :     :                             :                                   :     +- BroadcastExchange (29)
               :                    :     :                             :                                   :        +- * Filter (28)
               :                    :     :                             :                                   :           +- * ColumnarToRow (27)
               :                    :     :                             :                                   :              +- Scan parquet default.item (26)
               :                    :     :                             :                                   +- BroadcastExchange (37)
               :                    :     :                             :                                      +- Exchange (36)
               :                    :     :                             :                                         +- * Project (35)
               :                    :     :                             :                                            +- * Filter (34)
               :                    :     :                             :                                               +- * ColumnarToRow (33)
               :                    :     :                             :                                                  +- Scan parquet default.item (32)
               :                    :     :                             +- * Sort (63)
               :                    :     :                                +- Exchange (62)
               :                    :     :                                   +- * BroadcastHashJoin LeftSemi BuildRight (61)
               :                    :     :                                      :- * Project (58)
               :                    :     :                                      :  +- * BroadcastHashJoin Inner BuildRight (57)
               :                    :     :                                      :     :- * Project (55)
               :                    :     :                                      :     :  +- * BroadcastHashJoin Inner BuildRight (54)
               :                    :     :                                      :     :     :- * Filter (52)
               :                    :     :                                      :     :     :  +- * ColumnarToRow (51)
               :                    :     :                                      :     :     :     +- Scan parquet default.web_sales (50)
               :                    :     :                                      :     :     +- ReusedExchange (53)
               :                    :     :                                      :     +- ReusedExchange (56)
               :                    :     :                                      +- BroadcastExchange (60)
               :                    :     :                                         +- ReusedExchange (59)
               :                    :     +- ReusedExchange (74)
               :                    +- BroadcastExchange (94)
               :                       +- * SortMergeJoin LeftSemi (93)
               :                          :- * Sort (81)
               :                          :  +- Exchange (80)
               :                          :     +- * Filter (79)
               :                          :        +- * ColumnarToRow (78)
               :                          :           +- Scan parquet default.item (77)
               :                          +- * Sort (92)
               :                             +- Exchange (91)
               :                                +- * BroadcastHashJoin LeftSemi BuildRight (90)
               :                                   :- * Project (87)
               :                                   :  +- * BroadcastHashJoin Inner BuildRight (86)
               :                                   :     :- * Filter (84)
               :                                   :     :  +- * ColumnarToRow (83)
               :                                   :     :     +- Scan parquet default.item (82)
               :                                   :     +- ReusedExchange (85)
               :                                   +- BroadcastExchange (89)
               :                                      +- ReusedExchange (88)
               :- * Project (120)
               :  +- * Filter (119)
               :     +- * HashAggregate (118)
               :        +- Exchange (117)
               :           +- * HashAggregate (116)
               :              +- * Project (115)
               :                 +- * BroadcastHashJoin Inner BuildRight (114)
               :                    :- * Project (112)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (111)
               :                    :     :- * SortMergeJoin LeftSemi (109)
               :                    :     :  :- * Sort (106)
               :                    :     :  :  +- Exchange (105)
               :                    :     :  :     +- * Filter (104)
               :                    :     :  :        +- * ColumnarToRow (103)
               :                    :     :  :           +- Scan parquet default.catalog_sales (102)
               :                    :     :  +- * Sort (108)
               :                    :     :     +- ReusedExchange (107)
               :                    :     +- ReusedExchange (110)
               :                    +- ReusedExchange (113)
               +- * Project (139)
                  +- * Filter (138)
                     +- * HashAggregate (137)
                        +- Exchange (136)
                           +- * HashAggregate (135)
                              +- * Project (134)
                                 +- * BroadcastHashJoin Inner BuildRight (133)
                                    :- * Project (131)
                                    :  +- * BroadcastHashJoin Inner BuildRight (130)
                                    :     :- * SortMergeJoin LeftSemi (128)
                                    :     :  :- * Sort (125)
                                    :     :  :  +- Exchange (124)
                                    :     :  :     +- * Filter (123)
                                    :     :  :        +- * ColumnarToRow (122)
                                    :     :  :           +- Scan parquet default.web_sales (121)
                                    :     :  +- * Sort (127)
                                    :     :     +- ReusedExchange (126)
                                    :     +- ReusedExchange (129)
                                    +- ReusedExchange (132)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 32]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(8) Filter [codegen id : 32]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(9) Scan parquet default.store_sales
Output [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(10) ColumnarToRow [codegen id : 12]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]

(11) Filter [codegen id : 12]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Condition : isnotnull(ss_item_sk#11)

(12) ReusedExchange [Reuses operator id: 174]
Output [1]: [d_date_sk#14]

(13) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ss_sold_date_sk#12]
Right keys [1]: [d_date_sk#14]
Join condition: None

(14) Project [codegen id : 12]
Output [1]: [ss_item_sk#11]
Input [3]: [ss_item_sk#11, ss_sold_date_sk#12, d_date_sk#14]

(15) Scan parquet default.item
Output [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(16) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(17) Filter [codegen id : 4]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Condition : (((isnotnull(i_item_sk#15) AND isnotnull(i_brand_id#16)) AND isnotnull(i_class_id#17)) AND isnotnull(i_category_id#18))

(18) Exchange
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: hashpartitioning(coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18), 5), ENSURE_REQUIREMENTS, [id=#19]

(19) Sort [codegen id : 5]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: [coalesce(i_brand_id#16, 0) ASC NULLS FIRST, isnull(i_brand_id#16) ASC NULLS FIRST, coalesce(i_class_id#17, 0) ASC NULLS FIRST, isnull(i_class_id#17) ASC NULLS FIRST, coalesce(i_category_id#18, 0) ASC NULLS FIRST, isnull(i_category_id#18) ASC NULLS FIRST], false, 0

(20) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#20, cs_sold_date_sk#21]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#21), dynamicpruningexpression(cs_sold_date_sk#21 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(21) ColumnarToRow [codegen id : 9]
Input [2]: [cs_item_sk#20, cs_sold_date_sk#21]

(22) Filter [codegen id : 9]
Input [2]: [cs_item_sk#20, cs_sold_date_sk#21]
Condition : isnotnull(cs_item_sk#20)

(23) ReusedExchange [Reuses operator id: 174]
Output [1]: [d_date_sk#22]

(24) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_sold_date_sk#21]
Right keys [1]: [d_date_sk#22]
Join condition: None

(25) Project [codegen id : 9]
Output [1]: [cs_item_sk#20]
Input [3]: [cs_item_sk#20, cs_sold_date_sk#21, d_date_sk#22]

(26) Scan parquet default.item
Output [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(27) ColumnarToRow [codegen id : 7]
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]

(28) Filter [codegen id : 7]
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Condition : isnotnull(i_item_sk#23)

(29) BroadcastExchange
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(30) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#20]
Right keys [1]: [i_item_sk#23]
Join condition: None

(31) Project [codegen id : 9]
Output [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Input [5]: [cs_item_sk#20, i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]

(32) Scan parquet default.item
Output [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(33) ColumnarToRow [codegen id : 8]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(34) Filter [codegen id : 8]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Condition : (((isnotnull(i_item_sk#15) AND isnotnull(i_brand_id#16)) AND isnotnull(i_class_id#17)) AND isnotnull(i_category_id#18))

(35) Project [codegen id : 8]
Output [3]: [i_brand_id#16, i_class_id#17, i_category_id#18]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(36) Exchange
Input [3]: [i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: hashpartitioning(coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18), 5), ENSURE_REQUIREMENTS, [id=#28]

(37) BroadcastExchange
Input [3]: [i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#29]

(38) BroadcastHashJoin [codegen id : 9]
Left keys [6]: [coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26)]
Right keys [6]: [coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18)]
Join condition: None

(39) Exchange
Input [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: hashpartitioning(coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26), 5), ENSURE_REQUIREMENTS, [id=#30]

(40) Sort [codegen id : 10]
Input [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: [coalesce(i_brand_id#24, 0) ASC NULLS FIRST, isnull(i_brand_id#24) ASC NULLS FIRST, coalesce(i_class_id#25, 0) ASC NULLS FIRST, isnull(i_class_id#25) ASC NULLS FIRST, coalesce(i_category_id#26, 0) ASC NULLS FIRST, isnull(i_category_id#26) ASC NULLS FIRST], false, 0

(41) SortMergeJoin [codegen id : 11]
Left keys [6]: [coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18)]
Right keys [6]: [coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26)]
Join condition: None

(42) BroadcastExchange
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#31]

(43) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ss_item_sk#11]
Right keys [1]: [i_item_sk#15]
Join condition: None

(44) Project [codegen id : 12]
Output [3]: [i_brand_id#16 AS brand_id#32, i_class_id#17 AS class_id#33, i_category_id#18 AS category_id#34]
Input [5]: [ss_item_sk#11, i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(45) HashAggregate [codegen id : 12]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Keys [3]: [brand_id#32, class_id#33, category_id#34]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#32, class_id#33, category_id#34]

(46) Exchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: hashpartitioning(brand_id#32, class_id#33, category_id#34, 5), ENSURE_REQUIREMENTS, [id=#35]

(47) HashAggregate [codegen id : 13]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Keys [3]: [brand_id#32, class_id#33, category_id#34]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#32, class_id#33, category_id#34]

(48) Exchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: hashpartitioning(coalesce(brand_id#32, 0), isnull(brand_id#32), coalesce(class_id#33, 0), isnull(class_id#33), coalesce(category_id#34, 0), isnull(category_id#34), 5), ENSURE_REQUIREMENTS, [id=#36]

(49) Sort [codegen id : 14]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: [coalesce(brand_id#32, 0) ASC NULLS FIRST, isnull(brand_id#32) ASC NULLS FIRST, coalesce(class_id#33, 0) ASC NULLS FIRST, isnull(class_id#33) ASC NULLS FIRST, coalesce(category_id#34, 0) ASC NULLS FIRST, isnull(category_id#34) ASC NULLS FIRST], false, 0

(50) Scan parquet default.web_sales
Output [2]: [ws_item_sk#37, ws_sold_date_sk#38]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#38), dynamicpruningexpression(ws_sold_date_sk#38 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(51) ColumnarToRow [codegen id : 28]
Input [2]: [ws_item_sk#37, ws_sold_date_sk#38]

(52) Filter [codegen id : 28]
Input [2]: [ws_item_sk#37, ws_sold_date_sk#38]
Condition : isnotnull(ws_item_sk#37)

(53) ReusedExchange [Reuses operator id: 174]
Output [1]: [d_date_sk#39]

(54) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [ws_sold_date_sk#38]
Right keys [1]: [d_date_sk#39]
Join condition: None

(55) Project [codegen id : 28]
Output [1]: [ws_item_sk#37]
Input [3]: [ws_item_sk#37, ws_sold_date_sk#38, d_date_sk#39]

(56) ReusedExchange [Reuses operator id: 29]
Output [4]: [i_item_sk#40, i_brand_id#41, i_class_id#42, i_category_id#43]

(57) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [ws_item_sk#37]
Right keys [1]: [i_item_sk#40]
Join condition: None

(58) Project [codegen id : 28]
Output [3]: [i_brand_id#41, i_class_id#42, i_category_id#43]
Input [5]: [ws_item_sk#37, i_item_sk#40, i_brand_id#41, i_class_id#42, i_category_id#43]

(59) ReusedExchange [Reuses operator id: 48]
Output [3]: [brand_id#32, class_id#33, category_id#34]

(60) BroadcastExchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#44]

(61) BroadcastHashJoin [codegen id : 28]
Left keys [6]: [coalesce(i_brand_id#41, 0), isnull(i_brand_id#41), coalesce(i_class_id#42, 0), isnull(i_class_id#42), coalesce(i_category_id#43, 0), isnull(i_category_id#43)]
Right keys [6]: [coalesce(brand_id#32, 0), isnull(brand_id#32), coalesce(class_id#33, 0), isnull(class_id#33), coalesce(category_id#34, 0), isnull(category_id#34)]
Join condition: None

(62) Exchange
Input [3]: [i_brand_id#41, i_class_id#42, i_category_id#43]
Arguments: hashpartitioning(coalesce(i_brand_id#41, 0), isnull(i_brand_id#41), coalesce(i_class_id#42, 0), isnull(i_class_id#42), coalesce(i_category_id#43, 0), isnull(i_category_id#43), 5), ENSURE_REQUIREMENTS, [id=#45]

(63) Sort [codegen id : 29]
Input [3]: [i_brand_id#41, i_class_id#42, i_category_id#43]
Arguments: [coalesce(i_brand_id#41, 0) ASC NULLS FIRST, isnull(i_brand_id#41) ASC NULLS FIRST, coalesce(i_class_id#42, 0) ASC NULLS FIRST, isnull(i_class_id#42) ASC NULLS FIRST, coalesce(i_category_id#43, 0) ASC NULLS FIRST, isnull(i_category_id#43) ASC NULLS FIRST], false, 0

(64) SortMergeJoin [codegen id : 30]
Left keys [6]: [coalesce(brand_id#32, 0), isnull(brand_id#32), coalesce(class_id#33, 0), isnull(class_id#33), coalesce(category_id#34, 0), isnull(category_id#34)]
Right keys [6]: [coalesce(i_brand_id#41, 0), isnull(i_brand_id#41), coalesce(i_class_id#42, 0), isnull(i_class_id#42), coalesce(i_category_id#43, 0), isnull(i_category_id#43)]
Join condition: None

(65) HashAggregate [codegen id : 30]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Keys [3]: [brand_id#32, class_id#33, category_id#34]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#32, class_id#33, category_id#34]

(66) Exchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: hashpartitioning(brand_id#32, class_id#33, category_id#34, 5), ENSURE_REQUIREMENTS, [id=#46]

(67) HashAggregate [codegen id : 31]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Keys [3]: [brand_id#32, class_id#33, category_id#34]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#32, class_id#33, category_id#34]

(68) BroadcastExchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#47]

(69) BroadcastHashJoin [codegen id : 32]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#32, class_id#33, category_id#34]
Join condition: None

(70) Project [codegen id : 32]
Output [1]: [i_item_sk#7 AS ss_item_sk#48]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#32, class_id#33, category_id#34]

(71) Exchange
Input [1]: [ss_item_sk#48]
Arguments: hashpartitioning(ss_item_sk#48, 5), ENSURE_REQUIREMENTS, [id=#49]

(72) Sort [codegen id : 33]
Input [1]: [ss_item_sk#48]
Arguments: [ss_item_sk#48 ASC NULLS FIRST], false, 0

(73) SortMergeJoin [codegen id : 70]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#48]
Join condition: None

(74) ReusedExchange [Reuses operator id: 169]
Output [1]: [d_date_sk#50]

(75) BroadcastHashJoin [codegen id : 70]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#50]
Join condition: None

(76) Project [codegen id : 70]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#50]

(77) Scan parquet default.item
Output [4]: [i_item_sk#51, i_brand_id#52, i_class_id#53, i_category_id#54]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(78) ColumnarToRow [codegen id : 35]
Input [4]: [i_item_sk#51, i_brand_id#52, i_class_id#53, i_category_id#54]

(79) Filter [codegen id : 35]
Input [4]: [i_item_sk#51, i_brand_id#52, i_class_id#53, i_category_id#54]
Condition : isnotnull(i_item_sk#51)

(80) Exchange
Input [4]: [i_item_sk#51, i_brand_id#52, i_class_id#53, i_category_id#54]
Arguments: hashpartitioning(i_item_sk#51, 5), ENSURE_REQUIREMENTS, [id=#55]

(81) Sort [codegen id : 36]
Input [4]: [i_item_sk#51, i_brand_id#52, i_class_id#53, i_category_id#54]
Arguments: [i_item_sk#51 ASC NULLS FIRST], false, 0

(82) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(83) ColumnarToRow [codegen id : 67]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(84) Filter [codegen id : 67]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(85) ReusedExchange [Reuses operator id: 68]
Output [3]: [brand_id#32, class_id#33, category_id#34]

(86) BroadcastHashJoin [codegen id : 67]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#32, class_id#33, category_id#34]
Join condition: None

(87) Project [codegen id : 67]
Output [1]: [i_item_sk#7 AS ss_item_sk#48]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#32, class_id#33, category_id#34]

(88) ReusedExchange [Reuses operator id: 80]
Output [4]: [i_item_sk#51, i_brand_id#52, i_class_id#53, i_category_id#54]

(89) BroadcastExchange
Input [4]: [i_item_sk#51, i_brand_id#52, i_class_id#53, i_category_id#54]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#56]

(90) BroadcastHashJoin [codegen id : 67]
Left keys [1]: [ss_item_sk#48]
Right keys [1]: [i_item_sk#51]
Join condition: None

(91) Exchange
Input [1]: [ss_item_sk#48]
Arguments: hashpartitioning(ss_item_sk#48, 5), ENSURE_REQUIREMENTS, [id=#57]

(92) Sort [codegen id : 68]
Input [1]: [ss_item_sk#48]
Arguments: [ss_item_sk#48 ASC NULLS FIRST], false, 0

(93) SortMergeJoin [codegen id : 69]
Left keys [1]: [i_item_sk#51]
Right keys [1]: [ss_item_sk#48]
Join condition: None

(94) BroadcastExchange
Input [4]: [i_item_sk#51, i_brand_id#52, i_class_id#53, i_category_id#54]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#58]

(95) BroadcastHashJoin [codegen id : 70]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#51]
Join condition: None

(96) Project [codegen id : 70]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#52, i_class_id#53, i_category_id#54]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#51, i_brand_id#52, i_class_id#53, i_category_id#54]

(97) HashAggregate [codegen id : 70]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#52, i_class_id#53, i_category_id#54]
Keys [3]: [i_brand_id#52, i_class_id#53, i_category_id#54]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#59, isEmpty#60, count#61]
Results [6]: [i_brand_id#52, i_class_id#53, i_category_id#54, sum#62, isEmpty#63, count#64]

(98) Exchange
Input [6]: [i_brand_id#52, i_class_id#53, i_category_id#54, sum#62, isEmpty#63, count#64]
Arguments: hashpartitioning(i_brand_id#52, i_class_id#53, i_category_id#54, 5), ENSURE_REQUIREMENTS, [id=#65]

(99) HashAggregate [codegen id : 71]
Input [6]: [i_brand_id#52, i_class_id#53, i_category_id#54, sum#62, isEmpty#63, count#64]
Keys [3]: [i_brand_id#52, i_class_id#53, i_category_id#54]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#66, count(1)#67]
Results [5]: [i_brand_id#52, i_class_id#53, i_category_id#54, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#66 AS sales#68, count(1)#67 AS number_sales#69]

(100) Filter [codegen id : 71]
Input [5]: [i_brand_id#52, i_class_id#53, i_category_id#54, sales#68, number_sales#69]
Condition : (isnotnull(sales#68) AND (cast(sales#68 as decimal(32,6)) > cast(Subquery scalar-subquery#70, [id=#71] as decimal(32,6))))

(101) Project [codegen id : 71]
Output [6]: [sales#68, number_sales#69, store AS channel#72, i_brand_id#52, i_class_id#53, i_category_id#54]
Input [5]: [i_brand_id#52, i_class_id#53, i_category_id#54, sales#68, number_sales#69]

(102) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#76), dynamicpruningexpression(cs_sold_date_sk#76 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(103) ColumnarToRow [codegen id : 72]
Input [4]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76]

(104) Filter [codegen id : 72]
Input [4]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76]
Condition : isnotnull(cs_item_sk#73)

(105) Exchange
Input [4]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76]
Arguments: hashpartitioning(cs_item_sk#73, 5), ENSURE_REQUIREMENTS, [id=#77]

(106) Sort [codegen id : 73]
Input [4]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76]
Arguments: [cs_item_sk#73 ASC NULLS FIRST], false, 0

(107) ReusedExchange [Reuses operator id: 71]
Output [1]: [ss_item_sk#48]

(108) Sort [codegen id : 104]
Input [1]: [ss_item_sk#48]
Arguments: [ss_item_sk#48 ASC NULLS FIRST], false, 0

(109) SortMergeJoin [codegen id : 141]
Left keys [1]: [cs_item_sk#73]
Right keys [1]: [ss_item_sk#48]
Join condition: None

(110) ReusedExchange [Reuses operator id: 169]
Output [1]: [d_date_sk#78]

(111) BroadcastHashJoin [codegen id : 141]
Left keys [1]: [cs_sold_date_sk#76]
Right keys [1]: [d_date_sk#78]
Join condition: None

(112) Project [codegen id : 141]
Output [3]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75]
Input [5]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76, d_date_sk#78]

(113) ReusedExchange [Reuses operator id: 94]
Output [4]: [i_item_sk#79, i_brand_id#80, i_class_id#81, i_category_id#82]

(114) BroadcastHashJoin [codegen id : 141]
Left keys [1]: [cs_item_sk#73]
Right keys [1]: [i_item_sk#79]
Join condition: None

(115) Project [codegen id : 141]
Output [5]: [cs_quantity#74, cs_list_price#75, i_brand_id#80, i_class_id#81, i_category_id#82]
Input [7]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, i_item_sk#79, i_brand_id#80, i_class_id#81, i_category_id#82]

(116) HashAggregate [codegen id : 141]
Input [5]: [cs_quantity#74, cs_list_price#75, i_brand_id#80, i_class_id#81, i_category_id#82]
Keys [3]: [i_brand_id#80, i_class_id#81, i_category_id#82]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#83, isEmpty#84, count#85]
Results [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum#86, isEmpty#87, count#88]

(117) Exchange
Input [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum#86, isEmpty#87, count#88]
Arguments: hashpartitioning(i_brand_id#80, i_class_id#81, i_category_id#82, 5), ENSURE_REQUIREMENTS, [id=#89]

(118) HashAggregate [codegen id : 142]
Input [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum#86, isEmpty#87, count#88]
Keys [3]: [i_brand_id#80, i_class_id#81, i_category_id#82]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true))#90, count(1)#91]
Results [5]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true))#90 AS sales#92, count(1)#91 AS number_sales#93]

(119) Filter [codegen id : 142]
Input [5]: [i_brand_id#80, i_class_id#81, i_category_id#82, sales#92, number_sales#93]
Condition : (isnotnull(sales#92) AND (cast(sales#92 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#70, [id=#71] as decimal(32,6))))

(120) Project [codegen id : 142]
Output [6]: [sales#92, number_sales#93, catalog AS channel#94, i_brand_id#80, i_class_id#81, i_category_id#82]
Input [5]: [i_brand_id#80, i_class_id#81, i_category_id#82, sales#92, number_sales#93]

(121) Scan parquet default.web_sales
Output [4]: [ws_item_sk#95, ws_quantity#96, ws_list_price#97, ws_sold_date_sk#98]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#98), dynamicpruningexpression(ws_sold_date_sk#98 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(122) ColumnarToRow [codegen id : 143]
Input [4]: [ws_item_sk#95, ws_quantity#96, ws_list_price#97, ws_sold_date_sk#98]

(123) Filter [codegen id : 143]
Input [4]: [ws_item_sk#95, ws_quantity#96, ws_list_price#97, ws_sold_date_sk#98]
Condition : isnotnull(ws_item_sk#95)

(124) Exchange
Input [4]: [ws_item_sk#95, ws_quantity#96, ws_list_price#97, ws_sold_date_sk#98]
Arguments: hashpartitioning(ws_item_sk#95, 5), ENSURE_REQUIREMENTS, [id=#99]

(125) Sort [codegen id : 144]
Input [4]: [ws_item_sk#95, ws_quantity#96, ws_list_price#97, ws_sold_date_sk#98]
Arguments: [ws_item_sk#95 ASC NULLS FIRST], false, 0

(126) ReusedExchange [Reuses operator id: 71]
Output [1]: [ss_item_sk#48]

(127) Sort [codegen id : 175]
Input [1]: [ss_item_sk#48]
Arguments: [ss_item_sk#48 ASC NULLS FIRST], false, 0

(128) SortMergeJoin [codegen id : 212]
Left keys [1]: [ws_item_sk#95]
Right keys [1]: [ss_item_sk#48]
Join condition: None

(129) ReusedExchange [Reuses operator id: 169]
Output [1]: [d_date_sk#100]

(130) BroadcastHashJoin [codegen id : 212]
Left keys [1]: [ws_sold_date_sk#98]
Right keys [1]: [d_date_sk#100]
Join condition: None

(131) Project [codegen id : 212]
Output [3]: [ws_item_sk#95, ws_quantity#96, ws_list_price#97]
Input [5]: [ws_item_sk#95, ws_quantity#96, ws_list_price#97, ws_sold_date_sk#98, d_date_sk#100]

(132) ReusedExchange [Reuses operator id: 94]
Output [4]: [i_item_sk#101, i_brand_id#102, i_class_id#103, i_category_id#104]

(133) BroadcastHashJoin [codegen id : 212]
Left keys [1]: [ws_item_sk#95]
Right keys [1]: [i_item_sk#101]
Join condition: None

(134) Project [codegen id : 212]
Output [5]: [ws_quantity#96, ws_list_price#97, i_brand_id#102, i_class_id#103, i_category_id#104]
Input [7]: [ws_item_sk#95, ws_quantity#96, ws_list_price#97, i_item_sk#101, i_brand_id#102, i_class_id#103, i_category_id#104]

(135) HashAggregate [codegen id : 212]
Input [5]: [ws_quantity#96, ws_list_price#97, i_brand_id#102, i_class_id#103, i_category_id#104]
Keys [3]: [i_brand_id#102, i_class_id#103, i_category_id#104]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#96 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#97 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#105, isEmpty#106, count#107]
Results [6]: [i_brand_id#102, i_class_id#103, i_category_id#104, sum#108, isEmpty#109, count#110]

(136) Exchange
Input [6]: [i_brand_id#102, i_class_id#103, i_category_id#104, sum#108, isEmpty#109, count#110]
Arguments: hashpartitioning(i_brand_id#102, i_class_id#103, i_category_id#104, 5), ENSURE_REQUIREMENTS, [id=#111]

(137) HashAggregate [codegen id : 213]
Input [6]: [i_brand_id#102, i_class_id#103, i_category_id#104, sum#108, isEmpty#109, count#110]
Keys [3]: [i_brand_id#102, i_class_id#103, i_category_id#104]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#96 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#97 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#96 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#97 as decimal(12,2)))), DecimalType(18,2), true))#112, count(1)#113]
Results [5]: [i_brand_id#102, i_class_id#103, i_category_id#104, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#96 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#97 as decimal(12,2)))), DecimalType(18,2), true))#112 AS sales#114, count(1)#113 AS number_sales#115]

(138) Filter [codegen id : 213]
Input [5]: [i_brand_id#102, i_class_id#103, i_category_id#104, sales#114, number_sales#115]
Condition : (isnotnull(sales#114) AND (cast(sales#114 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#70, [id=#71] as decimal(32,6))))

(139) Project [codegen id : 213]
Output [6]: [sales#114, number_sales#115, web AS channel#116, i_brand_id#102, i_class_id#103, i_category_id#104]
Input [5]: [i_brand_id#102, i_class_id#103, i_category_id#104, sales#114, number_sales#115]

(140) Union

(141) Expand [codegen id : 214]
Input [6]: [sales#68, number_sales#69, channel#72, i_brand_id#52, i_class_id#53, i_category_id#54]
Arguments: [[sales#68, number_sales#69, channel#72, i_brand_id#52, i_class_id#53, i_category_id#54, 0], [sales#68, number_sales#69, channel#72, i_brand_id#52, i_class_id#53, null, 1], [sales#68, number_sales#69, channel#72, i_brand_id#52, null, null, 3], [sales#68, number_sales#69, channel#72, null, null, null, 7], [sales#68, number_sales#69, null, null, null, null, 15]], [sales#68, number_sales#69, channel#117, i_brand_id#118, i_class_id#119, i_category_id#120, spark_grouping_id#121]

(142) HashAggregate [codegen id : 214]
Input [7]: [sales#68, number_sales#69, channel#117, i_brand_id#118, i_class_id#119, i_category_id#120, spark_grouping_id#121]
Keys [5]: [channel#117, i_brand_id#118, i_class_id#119, i_category_id#120, spark_grouping_id#121]
Functions [2]: [partial_sum(sales#68), partial_sum(number_sales#69)]
Aggregate Attributes [3]: [sum#122, isEmpty#123, sum#124]
Results [8]: [channel#117, i_brand_id#118, i_class_id#119, i_category_id#120, spark_grouping_id#121, sum#125, isEmpty#126, sum#127]

(143) Exchange
Input [8]: [channel#117, i_brand_id#118, i_class_id#119, i_category_id#120, spark_grouping_id#121, sum#125, isEmpty#126, sum#127]
Arguments: hashpartitioning(channel#117, i_brand_id#118, i_class_id#119, i_category_id#120, spark_grouping_id#121, 5), ENSURE_REQUIREMENTS, [id=#128]

(144) HashAggregate [codegen id : 215]
Input [8]: [channel#117, i_brand_id#118, i_class_id#119, i_category_id#120, spark_grouping_id#121, sum#125, isEmpty#126, sum#127]
Keys [5]: [channel#117, i_brand_id#118, i_class_id#119, i_category_id#120, spark_grouping_id#121]
Functions [2]: [sum(sales#68), sum(number_sales#69)]
Aggregate Attributes [2]: [sum(sales#68)#129, sum(number_sales#69)#130]
Results [6]: [channel#117, i_brand_id#118, i_class_id#119, i_category_id#120, sum(sales#68)#129 AS sum(sales)#131, sum(number_sales#69)#130 AS sum(number_sales)#132]

(145) TakeOrderedAndProject
Input [6]: [channel#117, i_brand_id#118, i_class_id#119, i_category_id#120, sum(sales)#131, sum(number_sales)#132]
Arguments: 100, [channel#117 ASC NULLS FIRST, i_brand_id#118 ASC NULLS FIRST, i_class_id#119 ASC NULLS FIRST, i_category_id#120 ASC NULLS FIRST], [channel#117, i_brand_id#118, i_class_id#119, i_category_id#120, sum(sales)#131, sum(number_sales)#132]

===== Subqueries =====

Subquery:1 Hosting operator id = 100 Hosting Expression = Subquery scalar-subquery#70, [id=#71]
* HashAggregate (164)
+- Exchange (163)
   +- * HashAggregate (162)
      +- Union (161)
         :- * Project (150)
         :  +- * BroadcastHashJoin Inner BuildRight (149)
         :     :- * ColumnarToRow (147)
         :     :  +- Scan parquet default.store_sales (146)
         :     +- ReusedExchange (148)
         :- * Project (155)
         :  +- * BroadcastHashJoin Inner BuildRight (154)
         :     :- * ColumnarToRow (152)
         :     :  +- Scan parquet default.catalog_sales (151)
         :     +- ReusedExchange (153)
         +- * Project (160)
            +- * BroadcastHashJoin Inner BuildRight (159)
               :- * ColumnarToRow (157)
               :  +- Scan parquet default.web_sales (156)
               +- ReusedExchange (158)


(146) Scan parquet default.store_sales
Output [3]: [ss_quantity#133, ss_list_price#134, ss_sold_date_sk#135]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#135), dynamicpruningexpression(ss_sold_date_sk#135 IN dynamicpruning#13)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(147) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#133, ss_list_price#134, ss_sold_date_sk#135]

(148) ReusedExchange [Reuses operator id: 174]
Output [1]: [d_date_sk#136]

(149) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#135]
Right keys [1]: [d_date_sk#136]
Join condition: None

(150) Project [codegen id : 2]
Output [2]: [ss_quantity#133 AS quantity#137, ss_list_price#134 AS list_price#138]
Input [4]: [ss_quantity#133, ss_list_price#134, ss_sold_date_sk#135, d_date_sk#136]

(151) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#139, cs_list_price#140, cs_sold_date_sk#141]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#141), dynamicpruningexpression(cs_sold_date_sk#141 IN dynamicpruning#13)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(152) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#139, cs_list_price#140, cs_sold_date_sk#141]

(153) ReusedExchange [Reuses operator id: 174]
Output [1]: [d_date_sk#142]

(154) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#141]
Right keys [1]: [d_date_sk#142]
Join condition: None

(155) Project [codegen id : 4]
Output [2]: [cs_quantity#139 AS quantity#143, cs_list_price#140 AS list_price#144]
Input [4]: [cs_quantity#139, cs_list_price#140, cs_sold_date_sk#141, d_date_sk#142]

(156) Scan parquet default.web_sales
Output [3]: [ws_quantity#145, ws_list_price#146, ws_sold_date_sk#147]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#147), dynamicpruningexpression(ws_sold_date_sk#147 IN dynamicpruning#13)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(157) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#145, ws_list_price#146, ws_sold_date_sk#147]

(158) ReusedExchange [Reuses operator id: 174]
Output [1]: [d_date_sk#148]

(159) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#147]
Right keys [1]: [d_date_sk#148]
Join condition: None

(160) Project [codegen id : 6]
Output [2]: [ws_quantity#145 AS quantity#149, ws_list_price#146 AS list_price#150]
Input [4]: [ws_quantity#145, ws_list_price#146, ws_sold_date_sk#147, d_date_sk#148]

(161) Union

(162) HashAggregate [codegen id : 7]
Input [2]: [quantity#137, list_price#138]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#137 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#138 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#151, count#152]
Results [2]: [sum#153, count#154]

(163) Exchange
Input [2]: [sum#153, count#154]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#155]

(164) HashAggregate [codegen id : 8]
Input [2]: [sum#153, count#154]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#137 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#138 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#137 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#138 as decimal(12,2)))), DecimalType(18,2), true))#156]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#137 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#138 as decimal(12,2)))), DecimalType(18,2), true))#156 AS average_sales#157]

Subquery:2 Hosting operator id = 146 Hosting Expression = ss_sold_date_sk#135 IN dynamicpruning#13

Subquery:3 Hosting operator id = 151 Hosting Expression = cs_sold_date_sk#141 IN dynamicpruning#13

Subquery:4 Hosting operator id = 156 Hosting Expression = ws_sold_date_sk#147 IN dynamicpruning#13

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (169)
+- * Project (168)
   +- * Filter (167)
      +- * ColumnarToRow (166)
         +- Scan parquet default.date_dim (165)


(165) Scan parquet default.date_dim
Output [3]: [d_date_sk#50, d_year#158, d_moy#159]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(166) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#50, d_year#158, d_moy#159]

(167) Filter [codegen id : 1]
Input [3]: [d_date_sk#50, d_year#158, d_moy#159]
Condition : ((((isnotnull(d_year#158) AND isnotnull(d_moy#159)) AND (d_year#158 = 2001)) AND (d_moy#159 = 11)) AND isnotnull(d_date_sk#50))

(168) Project [codegen id : 1]
Output [1]: [d_date_sk#50]
Input [3]: [d_date_sk#50, d_year#158, d_moy#159]

(169) BroadcastExchange
Input [1]: [d_date_sk#50]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#160]

Subquery:6 Hosting operator id = 9 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#13
BroadcastExchange (174)
+- * Project (173)
   +- * Filter (172)
      +- * ColumnarToRow (171)
         +- Scan parquet default.date_dim (170)


(170) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#161]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(171) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#161]

(172) Filter [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#161]
Condition : (((isnotnull(d_year#161) AND (d_year#161 >= 1999)) AND (d_year#161 <= 2001)) AND isnotnull(d_date_sk#14))

(173) Project [codegen id : 1]
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#161]

(174) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#162]

Subquery:7 Hosting operator id = 20 Hosting Expression = cs_sold_date_sk#21 IN dynamicpruning#13

Subquery:8 Hosting operator id = 50 Hosting Expression = ws_sold_date_sk#38 IN dynamicpruning#13

Subquery:9 Hosting operator id = 119 Hosting Expression = ReusedSubquery Subquery scalar-subquery#70, [id=#71]

Subquery:10 Hosting operator id = 102 Hosting Expression = cs_sold_date_sk#76 IN dynamicpruning#5

Subquery:11 Hosting operator id = 138 Hosting Expression = ReusedSubquery Subquery scalar-subquery#70, [id=#71]

Subquery:12 Hosting operator id = 121 Hosting Expression = ws_sold_date_sk#98 IN dynamicpruning#5


