== Physical Plan ==
TakeOrderedAndProject (118)
+- * HashAggregate (117)
   +- Exchange (116)
      +- * HashAggregate (115)
         +- * Expand (114)
            +- Union (113)
               :- * Project (76)
               :  +- * Filter (75)
               :     +- * HashAggregate (74)
               :        +- Exchange (73)
               :           +- * HashAggregate (72)
               :              +- * Project (71)
               :                 +- * BroadcastHashJoin Inner BuildRight (70)
               :                    :- * Project (61)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (60)
               :                    :     :- * SortMergeJoin LeftSemi (58)
               :                    :     :  :- * Sort (4)
               :                    :     :  :  +- Exchange (3)
               :                    :     :  :     +- * ColumnarToRow (2)
               :                    :     :  :        +- Scan parquet default.store_sales (1)
               :                    :     :  +- * Sort (57)
               :                    :     :     +- Exchange (56)
               :                    :     :        +- * Project (55)
               :                    :     :           +- * BroadcastHashJoin Inner BuildRight (54)
               :                    :     :              :- * Filter (7)
               :                    :     :              :  +- * ColumnarToRow (6)
               :                    :     :              :     +- Scan parquet default.item (5)
               :                    :     :              +- BroadcastExchange (53)
               :                    :     :                 +- * HashAggregate (52)
               :                    :     :                    +- Exchange (51)
               :                    :     :                       +- * HashAggregate (50)
               :                    :     :                          +- * SortMergeJoin LeftSemi (49)
               :                    :     :                             :- * Sort (38)
               :                    :     :                             :  +- Exchange (37)
               :                    :     :                             :     +- * HashAggregate (36)
               :                    :     :                             :        +- Exchange (35)
               :                    :     :                             :           +- * HashAggregate (34)
               :                    :     :                             :              +- * Project (33)
               :                    :     :                             :                 +- * BroadcastHashJoin Inner BuildRight (32)
               :                    :     :                             :                    :- * Project (12)
               :                    :     :                             :                    :  +- * BroadcastHashJoin Inner BuildRight (11)
               :                    :     :                             :                    :     :- * ColumnarToRow (9)
               :                    :     :                             :                    :     :  +- Scan parquet default.store_sales (8)
               :                    :     :                             :                    :     +- ReusedExchange (10)
               :                    :     :                             :                    +- BroadcastExchange (31)
               :                    :     :                             :                       +- * SortMergeJoin LeftSemi (30)
               :                    :     :                             :                          :- * Sort (17)
               :                    :     :                             :                          :  +- Exchange (16)
               :                    :     :                             :                          :     +- * Filter (15)
               :                    :     :                             :                          :        +- * ColumnarToRow (14)
               :                    :     :                             :                          :           +- Scan parquet default.item (13)
               :                    :     :                             :                          +- * Sort (29)
               :                    :     :                             :                             +- Exchange (28)
               :                    :     :                             :                                +- * Project (27)
               :                    :     :                             :                                   +- * BroadcastHashJoin Inner BuildRight (26)
               :                    :     :                             :                                      :- * Project (22)
               :                    :     :                             :                                      :  +- * BroadcastHashJoin Inner BuildRight (21)
               :                    :     :                             :                                      :     :- * ColumnarToRow (19)
               :                    :     :                             :                                      :     :  +- Scan parquet default.catalog_sales (18)
               :                    :     :                             :                                      :     +- ReusedExchange (20)
               :                    :     :                             :                                      +- BroadcastExchange (25)
               :                    :     :                             :                                         +- * ColumnarToRow (24)
               :                    :     :                             :                                            +- Scan parquet default.item (23)
               :                    :     :                             +- * Sort (48)
               :                    :     :                                +- Exchange (47)
               :                    :     :                                   +- * Project (46)
               :                    :     :                                      +- * BroadcastHashJoin Inner BuildRight (45)
               :                    :     :                                         :- * Project (43)
               :                    :     :                                         :  +- * BroadcastHashJoin Inner BuildRight (42)
               :                    :     :                                         :     :- * ColumnarToRow (40)
               :                    :     :                                         :     :  +- Scan parquet default.web_sales (39)
               :                    :     :                                         :     +- ReusedExchange (41)
               :                    :     :                                         +- ReusedExchange (44)
               :                    :     +- ReusedExchange (59)
               :                    +- BroadcastExchange (69)
               :                       +- * SortMergeJoin LeftSemi (68)
               :                          :- * Sort (65)
               :                          :  +- Exchange (64)
               :                          :     +- * ColumnarToRow (63)
               :                          :        +- Scan parquet default.item (62)
               :                          +- * Sort (67)
               :                             +- ReusedExchange (66)
               :- * Project (94)
               :  +- * Filter (93)
               :     +- * HashAggregate (92)
               :        +- Exchange (91)
               :           +- * HashAggregate (90)
               :              +- * Project (89)
               :                 +- * BroadcastHashJoin Inner BuildRight (88)
               :                    :- * Project (86)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (85)
               :                    :     :- * SortMergeJoin LeftSemi (83)
               :                    :     :  :- * Sort (80)
               :                    :     :  :  +- Exchange (79)
               :                    :     :  :     +- * ColumnarToRow (78)
               :                    :     :  :        +- Scan parquet default.catalog_sales (77)
               :                    :     :  +- * Sort (82)
               :                    :     :     +- ReusedExchange (81)
               :                    :     +- ReusedExchange (84)
               :                    +- ReusedExchange (87)
               +- * Project (112)
                  +- * Filter (111)
                     +- * HashAggregate (110)
                        +- Exchange (109)
                           +- * HashAggregate (108)
                              +- * Project (107)
                                 +- * BroadcastHashJoin Inner BuildRight (106)
                                    :- * Project (104)
                                    :  +- * BroadcastHashJoin Inner BuildRight (103)
                                    :     :- * SortMergeJoin LeftSemi (101)
                                    :     :  :- * Sort (98)
                                    :     :  :  +- Exchange (97)
                                    :     :  :     +- * ColumnarToRow (96)
                                    :     :  :        +- Scan parquet default.web_sales (95)
                                    :     :  +- * Sort (100)
                                    :     :     +- ReusedExchange (99)
                                    :     +- ReusedExchange (102)
                                    +- ReusedExchange (105)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(4) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(5) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(6) ColumnarToRow [codegen id : 20]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(7) Filter [codegen id : 20]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(8) Scan parquet default.store_sales
Output [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
ReadSchema: struct<ss_item_sk:int>

(9) ColumnarToRow [codegen id : 11]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]

(10) ReusedExchange [Reuses operator id: 147]
Output [1]: [d_date_sk#14]

(11) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_sold_date_sk#12]
Right keys [1]: [d_date_sk#14]
Join condition: None

(12) Project [codegen id : 11]
Output [1]: [ss_item_sk#11]
Input [3]: [ss_item_sk#11, ss_sold_date_sk#12, d_date_sk#14]

(13) Scan parquet default.item
Output [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(14) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(15) Filter [codegen id : 4]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Condition : ((isnotnull(i_brand_id#16) AND isnotnull(i_class_id#17)) AND isnotnull(i_category_id#18))

(16) Exchange
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: hashpartitioning(coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18), 5), ENSURE_REQUIREMENTS, [id=#19]

(17) Sort [codegen id : 5]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: [coalesce(i_brand_id#16, 0) ASC NULLS FIRST, isnull(i_brand_id#16) ASC NULLS FIRST, coalesce(i_class_id#17, 0) ASC NULLS FIRST, isnull(i_class_id#17) ASC NULLS FIRST, coalesce(i_category_id#18, 0) ASC NULLS FIRST, isnull(i_category_id#18) ASC NULLS FIRST], false, 0

(18) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#20, cs_sold_date_sk#21]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#21), dynamicpruningexpression(cs_sold_date_sk#21 IN dynamicpruning#13)]
ReadSchema: struct<cs_item_sk:int>

(19) ColumnarToRow [codegen id : 8]
Input [2]: [cs_item_sk#20, cs_sold_date_sk#21]

(20) ReusedExchange [Reuses operator id: 147]
Output [1]: [d_date_sk#22]

(21) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#21]
Right keys [1]: [d_date_sk#22]
Join condition: None

(22) Project [codegen id : 8]
Output [1]: [cs_item_sk#20]
Input [3]: [cs_item_sk#20, cs_sold_date_sk#21, d_date_sk#22]

(23) Scan parquet default.item
Output [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(24) ColumnarToRow [codegen id : 7]
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]

(25) BroadcastExchange
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(26) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_item_sk#20]
Right keys [1]: [i_item_sk#23]
Join condition: None

(27) Project [codegen id : 8]
Output [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Input [5]: [cs_item_sk#20, i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]

(28) Exchange
Input [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: hashpartitioning(coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26), 5), ENSURE_REQUIREMENTS, [id=#28]

(29) Sort [codegen id : 9]
Input [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: [coalesce(i_brand_id#24, 0) ASC NULLS FIRST, isnull(i_brand_id#24) ASC NULLS FIRST, coalesce(i_class_id#25, 0) ASC NULLS FIRST, isnull(i_class_id#25) ASC NULLS FIRST, coalesce(i_category_id#26, 0) ASC NULLS FIRST, isnull(i_category_id#26) ASC NULLS FIRST], false, 0

(30) SortMergeJoin [codegen id : 10]
Left keys [6]: [coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18)]
Right keys [6]: [coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26)]
Join condition: None

(31) BroadcastExchange
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(32) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#11]
Right keys [1]: [i_item_sk#15]
Join condition: None

(33) Project [codegen id : 11]
Output [3]: [i_brand_id#16 AS brand_id#30, i_class_id#17 AS class_id#31, i_category_id#18 AS category_id#32]
Input [5]: [ss_item_sk#11, i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(34) HashAggregate [codegen id : 11]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(35) Exchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: hashpartitioning(brand_id#30, class_id#31, category_id#32, 5), ENSURE_REQUIREMENTS, [id=#33]

(36) HashAggregate [codegen id : 12]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(37) Exchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: hashpartitioning(coalesce(brand_id#30, 0), isnull(brand_id#30), coalesce(class_id#31, 0), isnull(class_id#31), coalesce(category_id#32, 0), isnull(category_id#32), 5), ENSURE_REQUIREMENTS, [id=#34]

(38) Sort [codegen id : 13]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: [coalesce(brand_id#30, 0) ASC NULLS FIRST, isnull(brand_id#30) ASC NULLS FIRST, coalesce(class_id#31, 0) ASC NULLS FIRST, isnull(class_id#31) ASC NULLS FIRST, coalesce(category_id#32, 0) ASC NULLS FIRST, isnull(category_id#32) ASC NULLS FIRST], false, 0

(39) Scan parquet default.web_sales
Output [2]: [ws_item_sk#35, ws_sold_date_sk#36]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#36), dynamicpruningexpression(ws_sold_date_sk#36 IN dynamicpruning#13)]
ReadSchema: struct<ws_item_sk:int>

(40) ColumnarToRow [codegen id : 16]
Input [2]: [ws_item_sk#35, ws_sold_date_sk#36]

(41) ReusedExchange [Reuses operator id: 147]
Output [1]: [d_date_sk#37]

(42) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_sold_date_sk#36]
Right keys [1]: [d_date_sk#37]
Join condition: None

(43) Project [codegen id : 16]
Output [1]: [ws_item_sk#35]
Input [3]: [ws_item_sk#35, ws_sold_date_sk#36, d_date_sk#37]

(44) ReusedExchange [Reuses operator id: 25]
Output [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(45) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_item_sk#35]
Right keys [1]: [i_item_sk#38]
Join condition: None

(46) Project [codegen id : 16]
Output [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Input [5]: [ws_item_sk#35, i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(47) Exchange
Input [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Arguments: hashpartitioning(coalesce(i_brand_id#39, 0), isnull(i_brand_id#39), coalesce(i_class_id#40, 0), isnull(i_class_id#40), coalesce(i_category_id#41, 0), isnull(i_category_id#41), 5), ENSURE_REQUIREMENTS, [id=#42]

(48) Sort [codegen id : 17]
Input [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Arguments: [coalesce(i_brand_id#39, 0) ASC NULLS FIRST, isnull(i_brand_id#39) ASC NULLS FIRST, coalesce(i_class_id#40, 0) ASC NULLS FIRST, isnull(i_class_id#40) ASC NULLS FIRST, coalesce(i_category_id#41, 0) ASC NULLS FIRST, isnull(i_category_id#41) ASC NULLS FIRST], false, 0

(49) SortMergeJoin [codegen id : 18]
Left keys [6]: [coalesce(brand_id#30, 0), isnull(brand_id#30), coalesce(class_id#31, 0), isnull(class_id#31), coalesce(category_id#32, 0), isnull(category_id#32)]
Right keys [6]: [coalesce(i_brand_id#39, 0), isnull(i_brand_id#39), coalesce(i_class_id#40, 0), isnull(i_class_id#40), coalesce(i_category_id#41, 0), isnull(i_category_id#41)]
Join condition: None

(50) HashAggregate [codegen id : 18]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(51) Exchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: hashpartitioning(brand_id#30, class_id#31, category_id#32, 5), ENSURE_REQUIREMENTS, [id=#43]

(52) HashAggregate [codegen id : 19]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(53) BroadcastExchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#44]

(54) BroadcastHashJoin [codegen id : 20]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#30, class_id#31, category_id#32]
Join condition: None

(55) Project [codegen id : 20]
Output [1]: [i_item_sk#7 AS ss_item_sk#45]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#30, class_id#31, category_id#32]

(56) Exchange
Input [1]: [ss_item_sk#45]
Arguments: hashpartitioning(ss_item_sk#45, 5), ENSURE_REQUIREMENTS, [id=#46]

(57) Sort [codegen id : 21]
Input [1]: [ss_item_sk#45]
Arguments: [ss_item_sk#45 ASC NULLS FIRST], false, 0

(58) SortMergeJoin [codegen id : 45]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#45]
Join condition: None

(59) ReusedExchange [Reuses operator id: 142]
Output [1]: [d_date_sk#47]

(60) BroadcastHashJoin [codegen id : 45]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#47]
Join condition: None

(61) Project [codegen id : 45]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#47]

(62) Scan parquet default.item
Output [4]: [i_item_sk#48, i_brand_id#49, i_class_id#50, i_category_id#51]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(63) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#48, i_brand_id#49, i_class_id#50, i_category_id#51]

(64) Exchange
Input [4]: [i_item_sk#48, i_brand_id#49, i_class_id#50, i_category_id#51]
Arguments: hashpartitioning(i_item_sk#48, 5), ENSURE_REQUIREMENTS, [id=#52]

(65) Sort [codegen id : 24]
Input [4]: [i_item_sk#48, i_brand_id#49, i_class_id#50, i_category_id#51]
Arguments: [i_item_sk#48 ASC NULLS FIRST], false, 0

(66) ReusedExchange [Reuses operator id: 56]
Output [1]: [ss_item_sk#45]

(67) Sort [codegen id : 43]
Input [1]: [ss_item_sk#45]
Arguments: [ss_item_sk#45 ASC NULLS FIRST], false, 0

(68) SortMergeJoin [codegen id : 44]
Left keys [1]: [i_item_sk#48]
Right keys [1]: [ss_item_sk#45]
Join condition: None

(69) BroadcastExchange
Input [4]: [i_item_sk#48, i_brand_id#49, i_class_id#50, i_category_id#51]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#53]

(70) BroadcastHashJoin [codegen id : 45]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#48]
Join condition: None

(71) Project [codegen id : 45]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#49, i_class_id#50, i_category_id#51]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#48, i_brand_id#49, i_class_id#50, i_category_id#51]

(72) HashAggregate [codegen id : 45]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#49, i_class_id#50, i_category_id#51]
Keys [3]: [i_brand_id#49, i_class_id#50, i_category_id#51]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#54, isEmpty#55, count#56]
Results [6]: [i_brand_id#49, i_class_id#50, i_category_id#51, sum#57, isEmpty#58, count#59]

(73) Exchange
Input [6]: [i_brand_id#49, i_class_id#50, i_category_id#51, sum#57, isEmpty#58, count#59]
Arguments: hashpartitioning(i_brand_id#49, i_class_id#50, i_category_id#51, 5), ENSURE_REQUIREMENTS, [id=#60]

(74) HashAggregate [codegen id : 46]
Input [6]: [i_brand_id#49, i_class_id#50, i_category_id#51, sum#57, isEmpty#58, count#59]
Keys [3]: [i_brand_id#49, i_class_id#50, i_category_id#51]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#61, count(1)#62]
Results [5]: [i_brand_id#49, i_class_id#50, i_category_id#51, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#61 AS sales#63, count(1)#62 AS number_sales#64]

(75) Filter [codegen id : 46]
Input [5]: [i_brand_id#49, i_class_id#50, i_category_id#51, sales#63, number_sales#64]
Condition : (isnotnull(sales#63) AND (cast(sales#63 as decimal(32,6)) > cast(Subquery scalar-subquery#65, [id=#66] as decimal(32,6))))

(76) Project [codegen id : 46]
Output [6]: [sales#63, number_sales#64, store AS channel#67, i_brand_id#49, i_class_id#50, i_category_id#51]
Input [5]: [i_brand_id#49, i_class_id#50, i_category_id#51, sales#63, number_sales#64]

(77) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#68, cs_quantity#69, cs_list_price#70, cs_sold_date_sk#71]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#71), dynamicpruningexpression(cs_sold_date_sk#71 IN dynamicpruning#5)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(78) ColumnarToRow [codegen id : 47]
Input [4]: [cs_item_sk#68, cs_quantity#69, cs_list_price#70, cs_sold_date_sk#71]

(79) Exchange
Input [4]: [cs_item_sk#68, cs_quantity#69, cs_list_price#70, cs_sold_date_sk#71]
Arguments: hashpartitioning(cs_item_sk#68, 5), ENSURE_REQUIREMENTS, [id=#72]

(80) Sort [codegen id : 48]
Input [4]: [cs_item_sk#68, cs_quantity#69, cs_list_price#70, cs_sold_date_sk#71]
Arguments: [cs_item_sk#68 ASC NULLS FIRST], false, 0

(81) ReusedExchange [Reuses operator id: 56]
Output [1]: [ss_item_sk#45]

(82) Sort [codegen id : 67]
Input [1]: [ss_item_sk#45]
Arguments: [ss_item_sk#45 ASC NULLS FIRST], false, 0

(83) SortMergeJoin [codegen id : 91]
Left keys [1]: [cs_item_sk#68]
Right keys [1]: [ss_item_sk#45]
Join condition: None

(84) ReusedExchange [Reuses operator id: 142]
Output [1]: [d_date_sk#73]

(85) BroadcastHashJoin [codegen id : 91]
Left keys [1]: [cs_sold_date_sk#71]
Right keys [1]: [d_date_sk#73]
Join condition: None

(86) Project [codegen id : 91]
Output [3]: [cs_item_sk#68, cs_quantity#69, cs_list_price#70]
Input [5]: [cs_item_sk#68, cs_quantity#69, cs_list_price#70, cs_sold_date_sk#71, d_date_sk#73]

(87) ReusedExchange [Reuses operator id: 69]
Output [4]: [i_item_sk#74, i_brand_id#75, i_class_id#76, i_category_id#77]

(88) BroadcastHashJoin [codegen id : 91]
Left keys [1]: [cs_item_sk#68]
Right keys [1]: [i_item_sk#74]
Join condition: None

(89) Project [codegen id : 91]
Output [5]: [cs_quantity#69, cs_list_price#70, i_brand_id#75, i_class_id#76, i_category_id#77]
Input [7]: [cs_item_sk#68, cs_quantity#69, cs_list_price#70, i_item_sk#74, i_brand_id#75, i_class_id#76, i_category_id#77]

(90) HashAggregate [codegen id : 91]
Input [5]: [cs_quantity#69, cs_list_price#70, i_brand_id#75, i_class_id#76, i_category_id#77]
Keys [3]: [i_brand_id#75, i_class_id#76, i_category_id#77]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#69 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#70 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#78, isEmpty#79, count#80]
Results [6]: [i_brand_id#75, i_class_id#76, i_category_id#77, sum#81, isEmpty#82, count#83]

(91) Exchange
Input [6]: [i_brand_id#75, i_class_id#76, i_category_id#77, sum#81, isEmpty#82, count#83]
Arguments: hashpartitioning(i_brand_id#75, i_class_id#76, i_category_id#77, 5), ENSURE_REQUIREMENTS, [id=#84]

(92) HashAggregate [codegen id : 92]
Input [6]: [i_brand_id#75, i_class_id#76, i_category_id#77, sum#81, isEmpty#82, count#83]
Keys [3]: [i_brand_id#75, i_class_id#76, i_category_id#77]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#69 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#70 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#69 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#70 as decimal(12,2)))), DecimalType(18,2), true))#85, count(1)#86]
Results [5]: [i_brand_id#75, i_class_id#76, i_category_id#77, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#69 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#70 as decimal(12,2)))), DecimalType(18,2), true))#85 AS sales#87, count(1)#86 AS number_sales#88]

(93) Filter [codegen id : 92]
Input [5]: [i_brand_id#75, i_class_id#76, i_category_id#77, sales#87, number_sales#88]
Condition : (isnotnull(sales#87) AND (cast(sales#87 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#65, [id=#66] as decimal(32,6))))

(94) Project [codegen id : 92]
Output [6]: [sales#87, number_sales#88, catalog AS channel#89, i_brand_id#75, i_class_id#76, i_category_id#77]
Input [5]: [i_brand_id#75, i_class_id#76, i_category_id#77, sales#87, number_sales#88]

(95) Scan parquet default.web_sales
Output [4]: [ws_item_sk#90, ws_quantity#91, ws_list_price#92, ws_sold_date_sk#93]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#93), dynamicpruningexpression(ws_sold_date_sk#93 IN dynamicpruning#5)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(96) ColumnarToRow [codegen id : 93]
Input [4]: [ws_item_sk#90, ws_quantity#91, ws_list_price#92, ws_sold_date_sk#93]

(97) Exchange
Input [4]: [ws_item_sk#90, ws_quantity#91, ws_list_price#92, ws_sold_date_sk#93]
Arguments: hashpartitioning(ws_item_sk#90, 5), ENSURE_REQUIREMENTS, [id=#94]

(98) Sort [codegen id : 94]
Input [4]: [ws_item_sk#90, ws_quantity#91, ws_list_price#92, ws_sold_date_sk#93]
Arguments: [ws_item_sk#90 ASC NULLS FIRST], false, 0

(99) ReusedExchange [Reuses operator id: 56]
Output [1]: [ss_item_sk#45]

(100) Sort [codegen id : 113]
Input [1]: [ss_item_sk#45]
Arguments: [ss_item_sk#45 ASC NULLS FIRST], false, 0

(101) SortMergeJoin [codegen id : 137]
Left keys [1]: [ws_item_sk#90]
Right keys [1]: [ss_item_sk#45]
Join condition: None

(102) ReusedExchange [Reuses operator id: 142]
Output [1]: [d_date_sk#95]

(103) BroadcastHashJoin [codegen id : 137]
Left keys [1]: [ws_sold_date_sk#93]
Right keys [1]: [d_date_sk#95]
Join condition: None

(104) Project [codegen id : 137]
Output [3]: [ws_item_sk#90, ws_quantity#91, ws_list_price#92]
Input [5]: [ws_item_sk#90, ws_quantity#91, ws_list_price#92, ws_sold_date_sk#93, d_date_sk#95]

(105) ReusedExchange [Reuses operator id: 69]
Output [4]: [i_item_sk#96, i_brand_id#97, i_class_id#98, i_category_id#99]

(106) BroadcastHashJoin [codegen id : 137]
Left keys [1]: [ws_item_sk#90]
Right keys [1]: [i_item_sk#96]
Join condition: None

(107) Project [codegen id : 137]
Output [5]: [ws_quantity#91, ws_list_price#92, i_brand_id#97, i_class_id#98, i_category_id#99]
Input [7]: [ws_item_sk#90, ws_quantity#91, ws_list_price#92, i_item_sk#96, i_brand_id#97, i_class_id#98, i_category_id#99]

(108) HashAggregate [codegen id : 137]
Input [5]: [ws_quantity#91, ws_list_price#92, i_brand_id#97, i_class_id#98, i_category_id#99]
Keys [3]: [i_brand_id#97, i_class_id#98, i_category_id#99]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#91 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#92 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#100, isEmpty#101, count#102]
Results [6]: [i_brand_id#97, i_class_id#98, i_category_id#99, sum#103, isEmpty#104, count#105]

(109) Exchange
Input [6]: [i_brand_id#97, i_class_id#98, i_category_id#99, sum#103, isEmpty#104, count#105]
Arguments: hashpartitioning(i_brand_id#97, i_class_id#98, i_category_id#99, 5), ENSURE_REQUIREMENTS, [id=#106]

(110) HashAggregate [codegen id : 138]
Input [6]: [i_brand_id#97, i_class_id#98, i_category_id#99, sum#103, isEmpty#104, count#105]
Keys [3]: [i_brand_id#97, i_class_id#98, i_category_id#99]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#91 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#92 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#91 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#92 as decimal(12,2)))), DecimalType(18,2), true))#107, count(1)#108]
Results [5]: [i_brand_id#97, i_class_id#98, i_category_id#99, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#91 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#92 as decimal(12,2)))), DecimalType(18,2), true))#107 AS sales#109, count(1)#108 AS number_sales#110]

(111) Filter [codegen id : 138]
Input [5]: [i_brand_id#97, i_class_id#98, i_category_id#99, sales#109, number_sales#110]
Condition : (isnotnull(sales#109) AND (cast(sales#109 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#65, [id=#66] as decimal(32,6))))

(112) Project [codegen id : 138]
Output [6]: [sales#109, number_sales#110, web AS channel#111, i_brand_id#97, i_class_id#98, i_category_id#99]
Input [5]: [i_brand_id#97, i_class_id#98, i_category_id#99, sales#109, number_sales#110]

(113) Union

(114) Expand [codegen id : 139]
Input [6]: [sales#63, number_sales#64, channel#67, i_brand_id#49, i_class_id#50, i_category_id#51]
Arguments: [[sales#63, number_sales#64, channel#67, i_brand_id#49, i_class_id#50, i_category_id#51, 0], [sales#63, number_sales#64, channel#67, i_brand_id#49, i_class_id#50, null, 1], [sales#63, number_sales#64, channel#67, i_brand_id#49, null, null, 3], [sales#63, number_sales#64, channel#67, null, null, null, 7], [sales#63, number_sales#64, null, null, null, null, 15]], [sales#63, number_sales#64, channel#112, i_brand_id#113, i_class_id#114, i_category_id#115, spark_grouping_id#116]

(115) HashAggregate [codegen id : 139]
Input [7]: [sales#63, number_sales#64, channel#112, i_brand_id#113, i_class_id#114, i_category_id#115, spark_grouping_id#116]
Keys [5]: [channel#112, i_brand_id#113, i_class_id#114, i_category_id#115, spark_grouping_id#116]
Functions [2]: [partial_sum(sales#63), partial_sum(number_sales#64)]
Aggregate Attributes [3]: [sum#117, isEmpty#118, sum#119]
Results [8]: [channel#112, i_brand_id#113, i_class_id#114, i_category_id#115, spark_grouping_id#116, sum#120, isEmpty#121, sum#122]

(116) Exchange
Input [8]: [channel#112, i_brand_id#113, i_class_id#114, i_category_id#115, spark_grouping_id#116, sum#120, isEmpty#121, sum#122]
Arguments: hashpartitioning(channel#112, i_brand_id#113, i_class_id#114, i_category_id#115, spark_grouping_id#116, 5), ENSURE_REQUIREMENTS, [id=#123]

(117) HashAggregate [codegen id : 140]
Input [8]: [channel#112, i_brand_id#113, i_class_id#114, i_category_id#115, spark_grouping_id#116, sum#120, isEmpty#121, sum#122]
Keys [5]: [channel#112, i_brand_id#113, i_class_id#114, i_category_id#115, spark_grouping_id#116]
Functions [2]: [sum(sales#63), sum(number_sales#64)]
Aggregate Attributes [2]: [sum(sales#63)#124, sum(number_sales#64)#125]
Results [6]: [channel#112, i_brand_id#113, i_class_id#114, i_category_id#115, sum(sales#63)#124 AS sum(sales)#126, sum(number_sales#64)#125 AS sum(number_sales)#127]

(118) TakeOrderedAndProject
Input [6]: [channel#112, i_brand_id#113, i_class_id#114, i_category_id#115, sum(sales)#126, sum(number_sales)#127]
Arguments: 100, [channel#112 ASC NULLS FIRST, i_brand_id#113 ASC NULLS FIRST, i_class_id#114 ASC NULLS FIRST, i_category_id#115 ASC NULLS FIRST], [channel#112, i_brand_id#113, i_class_id#114, i_category_id#115, sum(sales)#126, sum(number_sales)#127]

===== Subqueries =====

Subquery:1 Hosting operator id = 75 Hosting Expression = Subquery scalar-subquery#65, [id=#66]
* HashAggregate (137)
+- Exchange (136)
   +- * HashAggregate (135)
      +- Union (134)
         :- * Project (123)
         :  +- * BroadcastHashJoin Inner BuildRight (122)
         :     :- * ColumnarToRow (120)
         :     :  +- Scan parquet default.store_sales (119)
         :     +- ReusedExchange (121)
         :- * Project (128)
         :  +- * BroadcastHashJoin Inner BuildRight (127)
         :     :- * ColumnarToRow (125)
         :     :  +- Scan parquet default.catalog_sales (124)
         :     +- ReusedExchange (126)
         +- * Project (133)
            +- * BroadcastHashJoin Inner BuildRight (132)
               :- * ColumnarToRow (130)
               :  +- Scan parquet default.web_sales (129)
               +- ReusedExchange (131)


(119) Scan parquet default.store_sales
Output [3]: [ss_quantity#128, ss_list_price#129, ss_sold_date_sk#130]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#130), dynamicpruningexpression(ss_sold_date_sk#130 IN dynamicpruning#13)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(120) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#128, ss_list_price#129, ss_sold_date_sk#130]

(121) ReusedExchange [Reuses operator id: 147]
Output [1]: [d_date_sk#131]

(122) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#130]
Right keys [1]: [d_date_sk#131]
Join condition: None

(123) Project [codegen id : 2]
Output [2]: [ss_quantity#128 AS quantity#132, ss_list_price#129 AS list_price#133]
Input [4]: [ss_quantity#128, ss_list_price#129, ss_sold_date_sk#130, d_date_sk#131]

(124) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#134, cs_list_price#135, cs_sold_date_sk#136]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#136), dynamicpruningexpression(cs_sold_date_sk#136 IN dynamicpruning#13)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(125) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#134, cs_list_price#135, cs_sold_date_sk#136]

(126) ReusedExchange [Reuses operator id: 147]
Output [1]: [d_date_sk#137]

(127) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#136]
Right keys [1]: [d_date_sk#137]
Join condition: None

(128) Project [codegen id : 4]
Output [2]: [cs_quantity#134 AS quantity#138, cs_list_price#135 AS list_price#139]
Input [4]: [cs_quantity#134, cs_list_price#135, cs_sold_date_sk#136, d_date_sk#137]

(129) Scan parquet default.web_sales
Output [3]: [ws_quantity#140, ws_list_price#141, ws_sold_date_sk#142]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#142), dynamicpruningexpression(ws_sold_date_sk#142 IN dynamicpruning#13)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(130) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#140, ws_list_price#141, ws_sold_date_sk#142]

(131) ReusedExchange [Reuses operator id: 147]
Output [1]: [d_date_sk#143]

(132) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#142]
Right keys [1]: [d_date_sk#143]
Join condition: None

(133) Project [codegen id : 6]
Output [2]: [ws_quantity#140 AS quantity#144, ws_list_price#141 AS list_price#145]
Input [4]: [ws_quantity#140, ws_list_price#141, ws_sold_date_sk#142, d_date_sk#143]

(134) Union

(135) HashAggregate [codegen id : 7]
Input [2]: [quantity#132, list_price#133]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#132 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#133 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#146, count#147]
Results [2]: [sum#148, count#149]

(136) Exchange
Input [2]: [sum#148, count#149]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#150]

(137) HashAggregate [codegen id : 8]
Input [2]: [sum#148, count#149]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#132 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#133 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#132 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#133 as decimal(12,2)))), DecimalType(18,2), true))#151]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#132 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#133 as decimal(12,2)))), DecimalType(18,2), true))#151 AS average_sales#152]

Subquery:2 Hosting operator id = 119 Hosting Expression = ss_sold_date_sk#130 IN dynamicpruning#13

Subquery:3 Hosting operator id = 124 Hosting Expression = cs_sold_date_sk#136 IN dynamicpruning#13

Subquery:4 Hosting operator id = 129 Hosting Expression = ws_sold_date_sk#142 IN dynamicpruning#13

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (142)
+- * Project (141)
   +- * Filter (140)
      +- * ColumnarToRow (139)
         +- Scan parquet default.date_dim (138)


(138) Scan parquet default.date_dim
Output [3]: [d_date_sk#47, d_year#153, d_moy#154]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [EqualTo(d_year,2001), EqualTo(d_moy,11)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(139) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#47, d_year#153, d_moy#154]

(140) Filter [codegen id : 1]
Input [3]: [d_date_sk#47, d_year#153, d_moy#154]
Condition : ((d_year#153 = 2001) AND (d_moy#154 = 11))

(141) Project [codegen id : 1]
Output [1]: [d_date_sk#47]
Input [3]: [d_date_sk#47, d_year#153, d_moy#154]

(142) BroadcastExchange
Input [1]: [d_date_sk#47]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#155]

Subquery:6 Hosting operator id = 8 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#13
BroadcastExchange (147)
+- * Project (146)
   +- * Filter (145)
      +- * ColumnarToRow (144)
         +- Scan parquet default.date_dim (143)


(143) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#156]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(144) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#156]

(145) Filter [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#156]
Condition : ((d_year#156 >= 1999) AND (d_year#156 <= 2001))

(146) Project [codegen id : 1]
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#156]

(147) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#157]

Subquery:7 Hosting operator id = 18 Hosting Expression = cs_sold_date_sk#21 IN dynamicpruning#13

Subquery:8 Hosting operator id = 39 Hosting Expression = ws_sold_date_sk#36 IN dynamicpruning#13

Subquery:9 Hosting operator id = 93 Hosting Expression = ReusedSubquery Subquery scalar-subquery#65, [id=#66]

Subquery:10 Hosting operator id = 77 Hosting Expression = cs_sold_date_sk#71 IN dynamicpruning#5

Subquery:11 Hosting operator id = 111 Hosting Expression = ReusedSubquery Subquery scalar-subquery#65, [id=#66]

Subquery:12 Hosting operator id = 95 Hosting Expression = ws_sold_date_sk#93 IN dynamicpruning#5


