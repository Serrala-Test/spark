== Physical Plan ==
TakeOrderedAndProject (116)
+- * HashAggregate (115)
   +- Exchange (114)
      +- * HashAggregate (113)
         +- * Expand (112)
            +- Union (111)
               :- * Project (78)
               :  +- * Filter (77)
               :     +- * HashAggregate (76)
               :        +- Exchange (75)
               :           +- * HashAggregate (74)
               :              +- * Project (73)
               :                 +- * BroadcastHashJoin Inner BuildRight (72)
               :                    :- * Project (65)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (64)
               :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (62)
               :                    :     :  :- * Filter (3)
               :                    :     :  :  +- * ColumnarToRow (2)
               :                    :     :  :     +- Scan parquet default.store_sales (1)
               :                    :     :  +- BroadcastExchange (61)
               :                    :     :     +- * HashAggregate (60)
               :                    :     :        +- Exchange (59)
               :                    :     :           +- * HashAggregate (58)
               :                    :     :              +- * Project (57)
               :                    :     :                 +- * BroadcastHashJoin Inner BuildRight (56)
               :                    :     :                    :- * Filter (6)
               :                    :     :                    :  +- * ColumnarToRow (5)
               :                    :     :                    :     +- Scan parquet default.item (4)
               :                    :     :                    +- BroadcastExchange (55)
               :                    :     :                       +- * HashAggregate (54)
               :                    :     :                          +- * HashAggregate (53)
               :                    :     :                             +- * BroadcastHashJoin LeftSemi BuildRight (52)
               :                    :     :                                :- * HashAggregate (38)
               :                    :     :                                :  +- Exchange (37)
               :                    :     :                                :     +- * HashAggregate (36)
               :                    :     :                                :        +- * Project (35)
               :                    :     :                                :           +- * BroadcastHashJoin Inner BuildRight (34)
               :                    :     :                                :              :- * Project (12)
               :                    :     :                                :              :  +- * BroadcastHashJoin Inner BuildRight (11)
               :                    :     :                                :              :     :- * Filter (9)
               :                    :     :                                :              :     :  +- * ColumnarToRow (8)
               :                    :     :                                :              :     :     +- Scan parquet default.store_sales (7)
               :                    :     :                                :              :     +- ReusedExchange (10)
               :                    :     :                                :              +- BroadcastExchange (33)
               :                    :     :                                :                 +- * BroadcastHashJoin LeftSemi BuildRight (32)
               :                    :     :                                :                    :- * Filter (15)
               :                    :     :                                :                    :  +- * ColumnarToRow (14)
               :                    :     :                                :                    :     +- Scan parquet default.item (13)
               :                    :     :                                :                    +- BroadcastExchange (31)
               :                    :     :                                :                       +- * HashAggregate (30)
               :                    :     :                                :                          +- Exchange (29)
               :                    :     :                                :                             +- * HashAggregate (28)
               :                    :     :                                :                                +- * Project (27)
               :                    :     :                                :                                   +- * BroadcastHashJoin Inner BuildRight (26)
               :                    :     :                                :                                      :- * Project (21)
               :                    :     :                                :                                      :  +- * BroadcastHashJoin Inner BuildRight (20)
               :                    :     :                                :                                      :     :- * Filter (18)
               :                    :     :                                :                                      :     :  +- * ColumnarToRow (17)
               :                    :     :                                :                                      :     :     +- Scan parquet default.catalog_sales (16)
               :                    :     :                                :                                      :     +- ReusedExchange (19)
               :                    :     :                                :                                      +- BroadcastExchange (25)
               :                    :     :                                :                                         +- * Filter (24)
               :                    :     :                                :                                            +- * ColumnarToRow (23)
               :                    :     :                                :                                               +- Scan parquet default.item (22)
               :                    :     :                                +- BroadcastExchange (51)
               :                    :     :                                   +- * HashAggregate (50)
               :                    :     :                                      +- Exchange (49)
               :                    :     :                                         +- * HashAggregate (48)
               :                    :     :                                            +- * Project (47)
               :                    :     :                                               +- * BroadcastHashJoin Inner BuildRight (46)
               :                    :     :                                                  :- * Project (44)
               :                    :     :                                                  :  +- * BroadcastHashJoin Inner BuildRight (43)
               :                    :     :                                                  :     :- * Filter (41)
               :                    :     :                                                  :     :  +- * ColumnarToRow (40)
               :                    :     :                                                  :     :     +- Scan parquet default.web_sales (39)
               :                    :     :                                                  :     +- ReusedExchange (42)
               :                    :     :                                                  +- ReusedExchange (45)
               :                    :     +- ReusedExchange (63)
               :                    +- BroadcastExchange (71)
               :                       +- * BroadcastHashJoin LeftSemi BuildRight (70)
               :                          :- * Filter (68)
               :                          :  +- * ColumnarToRow (67)
               :                          :     +- Scan parquet default.item (66)
               :                          +- ReusedExchange (69)
               :- * Project (94)
               :  +- * Filter (93)
               :     +- * HashAggregate (92)
               :        +- Exchange (91)
               :           +- * HashAggregate (90)
               :              +- * Project (89)
               :                 +- * BroadcastHashJoin Inner BuildRight (88)
               :                    :- * Project (86)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (85)
               :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (83)
               :                    :     :  :- * Filter (81)
               :                    :     :  :  +- * ColumnarToRow (80)
               :                    :     :  :     +- Scan parquet default.catalog_sales (79)
               :                    :     :  +- ReusedExchange (82)
               :                    :     +- ReusedExchange (84)
               :                    +- ReusedExchange (87)
               +- * Project (110)
                  +- * Filter (109)
                     +- * HashAggregate (108)
                        +- Exchange (107)
                           +- * HashAggregate (106)
                              +- * Project (105)
                                 +- * BroadcastHashJoin Inner BuildRight (104)
                                    :- * Project (102)
                                    :  +- * BroadcastHashJoin Inner BuildRight (101)
                                    :     :- * BroadcastHashJoin LeftSemi BuildRight (99)
                                    :     :  :- * Filter (97)
                                    :     :  :  +- * ColumnarToRow (96)
                                    :     :  :     +- Scan parquet default.web_sales (95)
                                    :     :  +- ReusedExchange (98)
                                    :     +- ReusedExchange (100)
                                    +- ReusedExchange (103)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 31]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 31]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 13]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(6) Filter [codegen id : 13]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(7) Scan parquet default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 7]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]

(9) Filter [codegen id : 7]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(10) ReusedExchange [Reuses operator id: 145]
Output [1]: [d_date_sk#13]

(11) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#13]
Join condition: None

(12) Project [codegen id : 7]
Output [1]: [ss_item_sk#10]
Input [3]: [ss_item_sk#10, ss_sold_date_sk#11, d_date_sk#13]

(13) Scan parquet default.item
Output [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(14) ColumnarToRow [codegen id : 6]
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]

(15) Filter [codegen id : 6]
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Condition : (((isnotnull(i_item_sk#14) AND isnotnull(i_brand_id#15)) AND isnotnull(i_class_id#16)) AND isnotnull(i_category_id#17))

(16) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#18, cs_sold_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#19), dynamicpruningexpression(cs_sold_date_sk#19 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(17) ColumnarToRow [codegen id : 4]
Input [2]: [cs_item_sk#18, cs_sold_date_sk#19]

(18) Filter [codegen id : 4]
Input [2]: [cs_item_sk#18, cs_sold_date_sk#19]
Condition : isnotnull(cs_item_sk#18)

(19) ReusedExchange [Reuses operator id: 145]
Output [1]: [d_date_sk#20]

(20) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#19]
Right keys [1]: [d_date_sk#20]
Join condition: None

(21) Project [codegen id : 4]
Output [1]: [cs_item_sk#18]
Input [3]: [cs_item_sk#18, cs_sold_date_sk#19, d_date_sk#20]

(22) Scan parquet default.item
Output [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(23) ColumnarToRow [codegen id : 3]
Input [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]

(24) Filter [codegen id : 3]
Input [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]
Condition : isnotnull(i_item_sk#21)

(25) BroadcastExchange
Input [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#25]

(26) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_item_sk#18]
Right keys [1]: [i_item_sk#21]
Join condition: None

(27) Project [codegen id : 4]
Output [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Input [5]: [cs_item_sk#18, i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]

(28) HashAggregate [codegen id : 4]
Input [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Keys [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]

(29) Exchange
Input [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Arguments: hashpartitioning(i_brand_id#22, i_class_id#23, i_category_id#24, 5), ENSURE_REQUIREMENTS, [id=#26]

(30) HashAggregate [codegen id : 5]
Input [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Keys [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]

(31) BroadcastExchange
Input [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#27]

(32) BroadcastHashJoin [codegen id : 6]
Left keys [6]: [coalesce(i_brand_id#15, 0), isnull(i_brand_id#15), coalesce(i_class_id#16, 0), isnull(i_class_id#16), coalesce(i_category_id#17, 0), isnull(i_category_id#17)]
Right keys [6]: [coalesce(i_brand_id#22, 0), isnull(i_brand_id#22), coalesce(i_class_id#23, 0), isnull(i_class_id#23), coalesce(i_category_id#24, 0), isnull(i_category_id#24)]
Join condition: None

(33) BroadcastExchange
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28]

(34) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_item_sk#10]
Right keys [1]: [i_item_sk#14]
Join condition: None

(35) Project [codegen id : 7]
Output [3]: [i_brand_id#15 AS brand_id#29, i_class_id#16 AS class_id#30, i_category_id#17 AS category_id#31]
Input [5]: [ss_item_sk#10, i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]

(36) HashAggregate [codegen id : 7]
Input [3]: [brand_id#29, class_id#30, category_id#31]
Keys [3]: [brand_id#29, class_id#30, category_id#31]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#29, class_id#30, category_id#31]

(37) Exchange
Input [3]: [brand_id#29, class_id#30, category_id#31]
Arguments: hashpartitioning(brand_id#29, class_id#30, category_id#31, 5), ENSURE_REQUIREMENTS, [id=#32]

(38) HashAggregate [codegen id : 12]
Input [3]: [brand_id#29, class_id#30, category_id#31]
Keys [3]: [brand_id#29, class_id#30, category_id#31]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#29, class_id#30, category_id#31]

(39) Scan parquet default.web_sales
Output [2]: [ws_item_sk#33, ws_sold_date_sk#34]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#34), dynamicpruningexpression(ws_sold_date_sk#34 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(40) ColumnarToRow [codegen id : 10]
Input [2]: [ws_item_sk#33, ws_sold_date_sk#34]

(41) Filter [codegen id : 10]
Input [2]: [ws_item_sk#33, ws_sold_date_sk#34]
Condition : isnotnull(ws_item_sk#33)

(42) ReusedExchange [Reuses operator id: 145]
Output [1]: [d_date_sk#35]

(43) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_sold_date_sk#34]
Right keys [1]: [d_date_sk#35]
Join condition: None

(44) Project [codegen id : 10]
Output [1]: [ws_item_sk#33]
Input [3]: [ws_item_sk#33, ws_sold_date_sk#34, d_date_sk#35]

(45) ReusedExchange [Reuses operator id: 25]
Output [4]: [i_item_sk#36, i_brand_id#37, i_class_id#38, i_category_id#39]

(46) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_item_sk#33]
Right keys [1]: [i_item_sk#36]
Join condition: None

(47) Project [codegen id : 10]
Output [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Input [5]: [ws_item_sk#33, i_item_sk#36, i_brand_id#37, i_class_id#38, i_category_id#39]

(48) HashAggregate [codegen id : 10]
Input [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Keys [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]

(49) Exchange
Input [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Arguments: hashpartitioning(i_brand_id#37, i_class_id#38, i_category_id#39, 5), ENSURE_REQUIREMENTS, [id=#40]

(50) HashAggregate [codegen id : 11]
Input [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Keys [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]

(51) BroadcastExchange
Input [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#41]

(52) BroadcastHashJoin [codegen id : 12]
Left keys [6]: [coalesce(brand_id#29, 0), isnull(brand_id#29), coalesce(class_id#30, 0), isnull(class_id#30), coalesce(category_id#31, 0), isnull(category_id#31)]
Right keys [6]: [coalesce(i_brand_id#37, 0), isnull(i_brand_id#37), coalesce(i_class_id#38, 0), isnull(i_class_id#38), coalesce(i_category_id#39, 0), isnull(i_category_id#39)]
Join condition: None

(53) HashAggregate [codegen id : 12]
Input [3]: [brand_id#29, class_id#30, category_id#31]
Keys [3]: [brand_id#29, class_id#30, category_id#31]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#29, class_id#30, category_id#31]

(54) HashAggregate [codegen id : 12]
Input [3]: [brand_id#29, class_id#30, category_id#31]
Keys [3]: [brand_id#29, class_id#30, category_id#31]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#29, class_id#30, category_id#31]

(55) BroadcastExchange
Input [3]: [brand_id#29, class_id#30, category_id#31]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#42]

(56) BroadcastHashJoin [codegen id : 13]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#29, class_id#30, category_id#31]
Join condition: None

(57) Project [codegen id : 13]
Output [1]: [i_item_sk#6 AS ss_item_sk#43]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#29, class_id#30, category_id#31]

(58) HashAggregate [codegen id : 13]
Input [1]: [ss_item_sk#43]
Keys [1]: [ss_item_sk#43]
Functions: []
Aggregate Attributes: []
Results [1]: [ss_item_sk#43]

(59) Exchange
Input [1]: [ss_item_sk#43]
Arguments: hashpartitioning(ss_item_sk#43, 5), ENSURE_REQUIREMENTS, [id=#44]

(60) HashAggregate [codegen id : 14]
Input [1]: [ss_item_sk#43]
Keys [1]: [ss_item_sk#43]
Functions: []
Aggregate Attributes: []
Results [1]: [ss_item_sk#43]

(61) BroadcastExchange
Input [1]: [ss_item_sk#43]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#45]

(62) BroadcastHashJoin [codegen id : 31]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#43]
Join condition: None

(63) ReusedExchange [Reuses operator id: 140]
Output [1]: [d_date_sk#46]

(64) BroadcastHashJoin [codegen id : 31]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#46]
Join condition: None

(65) Project [codegen id : 31]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#46]

(66) Scan parquet default.item
Output [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(67) ColumnarToRow [codegen id : 30]
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]

(68) Filter [codegen id : 30]
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Condition : isnotnull(i_item_sk#47)

(69) ReusedExchange [Reuses operator id: 61]
Output [1]: [ss_item_sk#43]

(70) BroadcastHashJoin [codegen id : 30]
Left keys [1]: [i_item_sk#47]
Right keys [1]: [ss_item_sk#43]
Join condition: None

(71) BroadcastExchange
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#51]

(72) BroadcastHashJoin [codegen id : 31]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#47]
Join condition: None

(73) Project [codegen id : 31]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#48, i_class_id#49, i_category_id#50]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]

(74) HashAggregate [codegen id : 31]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#48, i_class_id#49, i_category_id#50]
Keys [3]: [i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#52, isEmpty#53, count#54]
Results [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#55, isEmpty#56, count#57]

(75) Exchange
Input [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#55, isEmpty#56, count#57]
Arguments: hashpartitioning(i_brand_id#48, i_class_id#49, i_category_id#50, 5), ENSURE_REQUIREMENTS, [id=#58]

(76) HashAggregate [codegen id : 32]
Input [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#55, isEmpty#56, count#57]
Keys [3]: [i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#59, count(1)#60]
Results [5]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#59 AS sales#61, count(1)#60 AS number_sales#62]

(77) Filter [codegen id : 32]
Input [5]: [i_brand_id#48, i_class_id#49, i_category_id#50, sales#61, number_sales#62]
Condition : (isnotnull(sales#61) AND (cast(sales#61 as decimal(32,6)) > cast(Subquery scalar-subquery#63, [id=#64] as decimal(32,6))))

(78) Project [codegen id : 32]
Output [6]: [sales#61, number_sales#62, store AS channel#65, i_brand_id#48, i_class_id#49, i_category_id#50]
Input [5]: [i_brand_id#48, i_class_id#49, i_category_id#50, sales#61, number_sales#62]

(79) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#66, cs_quantity#67, cs_list_price#68, cs_sold_date_sk#69]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#69), dynamicpruningexpression(cs_sold_date_sk#69 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(80) ColumnarToRow [codegen id : 63]
Input [4]: [cs_item_sk#66, cs_quantity#67, cs_list_price#68, cs_sold_date_sk#69]

(81) Filter [codegen id : 63]
Input [4]: [cs_item_sk#66, cs_quantity#67, cs_list_price#68, cs_sold_date_sk#69]
Condition : isnotnull(cs_item_sk#66)

(82) ReusedExchange [Reuses operator id: 61]
Output [1]: [ss_item_sk#43]

(83) BroadcastHashJoin [codegen id : 63]
Left keys [1]: [cs_item_sk#66]
Right keys [1]: [ss_item_sk#43]
Join condition: None

(84) ReusedExchange [Reuses operator id: 140]
Output [1]: [d_date_sk#70]

(85) BroadcastHashJoin [codegen id : 63]
Left keys [1]: [cs_sold_date_sk#69]
Right keys [1]: [d_date_sk#70]
Join condition: None

(86) Project [codegen id : 63]
Output [3]: [cs_item_sk#66, cs_quantity#67, cs_list_price#68]
Input [5]: [cs_item_sk#66, cs_quantity#67, cs_list_price#68, cs_sold_date_sk#69, d_date_sk#70]

(87) ReusedExchange [Reuses operator id: 71]
Output [4]: [i_item_sk#71, i_brand_id#72, i_class_id#73, i_category_id#74]

(88) BroadcastHashJoin [codegen id : 63]
Left keys [1]: [cs_item_sk#66]
Right keys [1]: [i_item_sk#71]
Join condition: None

(89) Project [codegen id : 63]
Output [5]: [cs_quantity#67, cs_list_price#68, i_brand_id#72, i_class_id#73, i_category_id#74]
Input [7]: [cs_item_sk#66, cs_quantity#67, cs_list_price#68, i_item_sk#71, i_brand_id#72, i_class_id#73, i_category_id#74]

(90) HashAggregate [codegen id : 63]
Input [5]: [cs_quantity#67, cs_list_price#68, i_brand_id#72, i_class_id#73, i_category_id#74]
Keys [3]: [i_brand_id#72, i_class_id#73, i_category_id#74]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#68 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#75, isEmpty#76, count#77]
Results [6]: [i_brand_id#72, i_class_id#73, i_category_id#74, sum#78, isEmpty#79, count#80]

(91) Exchange
Input [6]: [i_brand_id#72, i_class_id#73, i_category_id#74, sum#78, isEmpty#79, count#80]
Arguments: hashpartitioning(i_brand_id#72, i_class_id#73, i_category_id#74, 5), ENSURE_REQUIREMENTS, [id=#81]

(92) HashAggregate [codegen id : 64]
Input [6]: [i_brand_id#72, i_class_id#73, i_category_id#74, sum#78, isEmpty#79, count#80]
Keys [3]: [i_brand_id#72, i_class_id#73, i_category_id#74]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#68 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#82, count(1)#83]
Results [5]: [i_brand_id#72, i_class_id#73, i_category_id#74, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#82 AS sales#84, count(1)#83 AS number_sales#85]

(93) Filter [codegen id : 64]
Input [5]: [i_brand_id#72, i_class_id#73, i_category_id#74, sales#84, number_sales#85]
Condition : (isnotnull(sales#84) AND (cast(sales#84 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#63, [id=#64] as decimal(32,6))))

(94) Project [codegen id : 64]
Output [6]: [sales#84, number_sales#85, catalog AS channel#86, i_brand_id#72, i_class_id#73, i_category_id#74]
Input [5]: [i_brand_id#72, i_class_id#73, i_category_id#74, sales#84, number_sales#85]

(95) Scan parquet default.web_sales
Output [4]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, ws_sold_date_sk#90]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#90), dynamicpruningexpression(ws_sold_date_sk#90 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(96) ColumnarToRow [codegen id : 95]
Input [4]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, ws_sold_date_sk#90]

(97) Filter [codegen id : 95]
Input [4]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, ws_sold_date_sk#90]
Condition : isnotnull(ws_item_sk#87)

(98) ReusedExchange [Reuses operator id: 61]
Output [1]: [ss_item_sk#43]

(99) BroadcastHashJoin [codegen id : 95]
Left keys [1]: [ws_item_sk#87]
Right keys [1]: [ss_item_sk#43]
Join condition: None

(100) ReusedExchange [Reuses operator id: 140]
Output [1]: [d_date_sk#91]

(101) BroadcastHashJoin [codegen id : 95]
Left keys [1]: [ws_sold_date_sk#90]
Right keys [1]: [d_date_sk#91]
Join condition: None

(102) Project [codegen id : 95]
Output [3]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89]
Input [5]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, ws_sold_date_sk#90, d_date_sk#91]

(103) ReusedExchange [Reuses operator id: 71]
Output [4]: [i_item_sk#92, i_brand_id#93, i_class_id#94, i_category_id#95]

(104) BroadcastHashJoin [codegen id : 95]
Left keys [1]: [ws_item_sk#87]
Right keys [1]: [i_item_sk#92]
Join condition: None

(105) Project [codegen id : 95]
Output [5]: [ws_quantity#88, ws_list_price#89, i_brand_id#93, i_class_id#94, i_category_id#95]
Input [7]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, i_item_sk#92, i_brand_id#93, i_class_id#94, i_category_id#95]

(106) HashAggregate [codegen id : 95]
Input [5]: [ws_quantity#88, ws_list_price#89, i_brand_id#93, i_class_id#94, i_category_id#95]
Keys [3]: [i_brand_id#93, i_class_id#94, i_category_id#95]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#88 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#89 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#96, isEmpty#97, count#98]
Results [6]: [i_brand_id#93, i_class_id#94, i_category_id#95, sum#99, isEmpty#100, count#101]

(107) Exchange
Input [6]: [i_brand_id#93, i_class_id#94, i_category_id#95, sum#99, isEmpty#100, count#101]
Arguments: hashpartitioning(i_brand_id#93, i_class_id#94, i_category_id#95, 5), ENSURE_REQUIREMENTS, [id=#102]

(108) HashAggregate [codegen id : 96]
Input [6]: [i_brand_id#93, i_class_id#94, i_category_id#95, sum#99, isEmpty#100, count#101]
Keys [3]: [i_brand_id#93, i_class_id#94, i_category_id#95]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#88 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#89 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#88 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#89 as decimal(12,2)))), DecimalType(18,2), true))#103, count(1)#104]
Results [5]: [i_brand_id#93, i_class_id#94, i_category_id#95, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#88 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#89 as decimal(12,2)))), DecimalType(18,2), true))#103 AS sales#105, count(1)#104 AS number_sales#106]

(109) Filter [codegen id : 96]
Input [5]: [i_brand_id#93, i_class_id#94, i_category_id#95, sales#105, number_sales#106]
Condition : (isnotnull(sales#105) AND (cast(sales#105 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#63, [id=#64] as decimal(32,6))))

(110) Project [codegen id : 96]
Output [6]: [sales#105, number_sales#106, web AS channel#107, i_brand_id#93, i_class_id#94, i_category_id#95]
Input [5]: [i_brand_id#93, i_class_id#94, i_category_id#95, sales#105, number_sales#106]

(111) Union

(112) Expand [codegen id : 97]
Input [6]: [sales#61, number_sales#62, channel#65, i_brand_id#48, i_class_id#49, i_category_id#50]
Arguments: [[sales#61, number_sales#62, channel#65, i_brand_id#48, i_class_id#49, i_category_id#50, 0], [sales#61, number_sales#62, channel#65, i_brand_id#48, i_class_id#49, null, 1], [sales#61, number_sales#62, channel#65, i_brand_id#48, null, null, 3], [sales#61, number_sales#62, channel#65, null, null, null, 7], [sales#61, number_sales#62, null, null, null, null, 15]], [sales#61, number_sales#62, channel#108, i_brand_id#109, i_class_id#110, i_category_id#111, spark_grouping_id#112]

(113) HashAggregate [codegen id : 97]
Input [7]: [sales#61, number_sales#62, channel#108, i_brand_id#109, i_class_id#110, i_category_id#111, spark_grouping_id#112]
Keys [5]: [channel#108, i_brand_id#109, i_class_id#110, i_category_id#111, spark_grouping_id#112]
Functions [2]: [partial_sum(sales#61), partial_sum(number_sales#62)]
Aggregate Attributes [3]: [sum#113, isEmpty#114, sum#115]
Results [8]: [channel#108, i_brand_id#109, i_class_id#110, i_category_id#111, spark_grouping_id#112, sum#116, isEmpty#117, sum#118]

(114) Exchange
Input [8]: [channel#108, i_brand_id#109, i_class_id#110, i_category_id#111, spark_grouping_id#112, sum#116, isEmpty#117, sum#118]
Arguments: hashpartitioning(channel#108, i_brand_id#109, i_class_id#110, i_category_id#111, spark_grouping_id#112, 5), ENSURE_REQUIREMENTS, [id=#119]

(115) HashAggregate [codegen id : 98]
Input [8]: [channel#108, i_brand_id#109, i_class_id#110, i_category_id#111, spark_grouping_id#112, sum#116, isEmpty#117, sum#118]
Keys [5]: [channel#108, i_brand_id#109, i_class_id#110, i_category_id#111, spark_grouping_id#112]
Functions [2]: [sum(sales#61), sum(number_sales#62)]
Aggregate Attributes [2]: [sum(sales#61)#120, sum(number_sales#62)#121]
Results [6]: [channel#108, i_brand_id#109, i_class_id#110, i_category_id#111, sum(sales#61)#120 AS sum(sales)#122, sum(number_sales#62)#121 AS sum(number_sales)#123]

(116) TakeOrderedAndProject
Input [6]: [channel#108, i_brand_id#109, i_class_id#110, i_category_id#111, sum(sales)#122, sum(number_sales)#123]
Arguments: 100, [channel#108 ASC NULLS FIRST, i_brand_id#109 ASC NULLS FIRST, i_class_id#110 ASC NULLS FIRST, i_category_id#111 ASC NULLS FIRST], [channel#108, i_brand_id#109, i_class_id#110, i_category_id#111, sum(sales)#122, sum(number_sales)#123]

===== Subqueries =====

Subquery:1 Hosting operator id = 77 Hosting Expression = Subquery scalar-subquery#63, [id=#64]
* HashAggregate (135)
+- Exchange (134)
   +- * HashAggregate (133)
      +- Union (132)
         :- * Project (121)
         :  +- * BroadcastHashJoin Inner BuildRight (120)
         :     :- * ColumnarToRow (118)
         :     :  +- Scan parquet default.store_sales (117)
         :     +- ReusedExchange (119)
         :- * Project (126)
         :  +- * BroadcastHashJoin Inner BuildRight (125)
         :     :- * ColumnarToRow (123)
         :     :  +- Scan parquet default.catalog_sales (122)
         :     +- ReusedExchange (124)
         +- * Project (131)
            +- * BroadcastHashJoin Inner BuildRight (130)
               :- * ColumnarToRow (128)
               :  +- Scan parquet default.web_sales (127)
               +- ReusedExchange (129)


(117) Scan parquet default.store_sales
Output [3]: [ss_quantity#124, ss_list_price#125, ss_sold_date_sk#126]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#126), dynamicpruningexpression(ss_sold_date_sk#126 IN dynamicpruning#12)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(118) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#124, ss_list_price#125, ss_sold_date_sk#126]

(119) ReusedExchange [Reuses operator id: 145]
Output [1]: [d_date_sk#127]

(120) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#126]
Right keys [1]: [d_date_sk#127]
Join condition: None

(121) Project [codegen id : 2]
Output [2]: [ss_quantity#124 AS quantity#128, ss_list_price#125 AS list_price#129]
Input [4]: [ss_quantity#124, ss_list_price#125, ss_sold_date_sk#126, d_date_sk#127]

(122) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#130, cs_list_price#131, cs_sold_date_sk#132]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#132), dynamicpruningexpression(cs_sold_date_sk#132 IN dynamicpruning#12)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(123) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#130, cs_list_price#131, cs_sold_date_sk#132]

(124) ReusedExchange [Reuses operator id: 145]
Output [1]: [d_date_sk#133]

(125) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#132]
Right keys [1]: [d_date_sk#133]
Join condition: None

(126) Project [codegen id : 4]
Output [2]: [cs_quantity#130 AS quantity#134, cs_list_price#131 AS list_price#135]
Input [4]: [cs_quantity#130, cs_list_price#131, cs_sold_date_sk#132, d_date_sk#133]

(127) Scan parquet default.web_sales
Output [3]: [ws_quantity#136, ws_list_price#137, ws_sold_date_sk#138]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#138), dynamicpruningexpression(ws_sold_date_sk#138 IN dynamicpruning#12)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(128) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#136, ws_list_price#137, ws_sold_date_sk#138]

(129) ReusedExchange [Reuses operator id: 145]
Output [1]: [d_date_sk#139]

(130) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#138]
Right keys [1]: [d_date_sk#139]
Join condition: None

(131) Project [codegen id : 6]
Output [2]: [ws_quantity#136 AS quantity#140, ws_list_price#137 AS list_price#141]
Input [4]: [ws_quantity#136, ws_list_price#137, ws_sold_date_sk#138, d_date_sk#139]

(132) Union

(133) HashAggregate [codegen id : 7]
Input [2]: [quantity#128, list_price#129]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#128 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#129 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#142, count#143]
Results [2]: [sum#144, count#145]

(134) Exchange
Input [2]: [sum#144, count#145]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#146]

(135) HashAggregate [codegen id : 8]
Input [2]: [sum#144, count#145]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#128 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#129 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#128 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#129 as decimal(12,2)))), DecimalType(18,2), true))#147]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#128 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#129 as decimal(12,2)))), DecimalType(18,2), true))#147 AS average_sales#148]

Subquery:2 Hosting operator id = 117 Hosting Expression = ss_sold_date_sk#126 IN dynamicpruning#12

Subquery:3 Hosting operator id = 122 Hosting Expression = cs_sold_date_sk#132 IN dynamicpruning#12

Subquery:4 Hosting operator id = 127 Hosting Expression = ws_sold_date_sk#138 IN dynamicpruning#12

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (140)
+- * Project (139)
   +- * Filter (138)
      +- * ColumnarToRow (137)
         +- Scan parquet default.date_dim (136)


(136) Scan parquet default.date_dim
Output [3]: [d_date_sk#46, d_year#149, d_moy#150]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(137) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#46, d_year#149, d_moy#150]

(138) Filter [codegen id : 1]
Input [3]: [d_date_sk#46, d_year#149, d_moy#150]
Condition : ((((isnotnull(d_year#149) AND isnotnull(d_moy#150)) AND (d_year#149 = 2001)) AND (d_moy#150 = 11)) AND isnotnull(d_date_sk#46))

(139) Project [codegen id : 1]
Output [1]: [d_date_sk#46]
Input [3]: [d_date_sk#46, d_year#149, d_moy#150]

(140) BroadcastExchange
Input [1]: [d_date_sk#46]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#151]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (145)
+- * Project (144)
   +- * Filter (143)
      +- * ColumnarToRow (142)
         +- Scan parquet default.date_dim (141)


(141) Scan parquet default.date_dim
Output [2]: [d_date_sk#13, d_year#152]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(142) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#13, d_year#152]

(143) Filter [codegen id : 1]
Input [2]: [d_date_sk#13, d_year#152]
Condition : (((isnotnull(d_year#152) AND (d_year#152 >= 1999)) AND (d_year#152 <= 2001)) AND isnotnull(d_date_sk#13))

(144) Project [codegen id : 1]
Output [1]: [d_date_sk#13]
Input [2]: [d_date_sk#13, d_year#152]

(145) BroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#153]

Subquery:7 Hosting operator id = 16 Hosting Expression = cs_sold_date_sk#19 IN dynamicpruning#12

Subquery:8 Hosting operator id = 39 Hosting Expression = ws_sold_date_sk#34 IN dynamicpruning#12

Subquery:9 Hosting operator id = 93 Hosting Expression = ReusedSubquery Subquery scalar-subquery#63, [id=#64]

Subquery:10 Hosting operator id = 79 Hosting Expression = cs_sold_date_sk#69 IN dynamicpruning#5

Subquery:11 Hosting operator id = 109 Hosting Expression = ReusedSubquery Subquery scalar-subquery#63, [id=#64]

Subquery:12 Hosting operator id = 95 Hosting Expression = ws_sold_date_sk#90 IN dynamicpruning#5


