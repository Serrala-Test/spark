== Physical Plan ==
TakeOrderedAndProject (115)
+- * HashAggregate (114)
   +- Exchange (113)
      +- * HashAggregate (112)
         +- * Expand (111)
            +- Union (110)
               :- * Project (71)
               :  +- * Filter (70)
               :     +- * HashAggregate (69)
               :        +- Exchange (68)
               :           +- * HashAggregate (67)
               :              +- * Project (66)
               :                 +- * BroadcastHashJoin Inner BuildRight (65)
               :                    :- * Project (63)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (62)
               :                    :     :- * SortMergeJoin LeftSemi (60)
               :                    :     :  :- * Sort (5)
               :                    :     :  :  +- Exchange (4)
               :                    :     :  :     +- * Filter (3)
               :                    :     :  :        +- * ColumnarToRow (2)
               :                    :     :  :           +- Scan parquet default.store_sales (1)
               :                    :     :  +- * Sort (59)
               :                    :     :     +- Exchange (58)
               :                    :     :        +- * Project (57)
               :                    :     :           +- * BroadcastHashJoin Inner BuildRight (56)
               :                    :     :              :- * Filter (8)
               :                    :     :              :  +- * ColumnarToRow (7)
               :                    :     :              :     +- Scan parquet default.item (6)
               :                    :     :              +- BroadcastExchange (55)
               :                    :     :                 +- * SortMergeJoin LeftSemi (54)
               :                    :     :                    :- * Sort (42)
               :                    :     :                    :  +- Exchange (41)
               :                    :     :                    :     +- * HashAggregate (40)
               :                    :     :                    :        +- Exchange (39)
               :                    :     :                    :           +- * HashAggregate (38)
               :                    :     :                    :              +- * Project (37)
               :                    :     :                    :                 +- * BroadcastHashJoin Inner BuildRight (36)
               :                    :     :                    :                    :- * Project (14)
               :                    :     :                    :                    :  +- * BroadcastHashJoin Inner BuildRight (13)
               :                    :     :                    :                    :     :- * Filter (11)
               :                    :     :                    :                    :     :  +- * ColumnarToRow (10)
               :                    :     :                    :                    :     :     +- Scan parquet default.store_sales (9)
               :                    :     :                    :                    :     +- ReusedExchange (12)
               :                    :     :                    :                    +- BroadcastExchange (35)
               :                    :     :                    :                       +- * SortMergeJoin LeftSemi (34)
               :                    :     :                    :                          :- * Sort (19)
               :                    :     :                    :                          :  +- Exchange (18)
               :                    :     :                    :                          :     +- * Filter (17)
               :                    :     :                    :                          :        +- * ColumnarToRow (16)
               :                    :     :                    :                          :           +- Scan parquet default.item (15)
               :                    :     :                    :                          +- * Sort (33)
               :                    :     :                    :                             +- Exchange (32)
               :                    :     :                    :                                +- * Project (31)
               :                    :     :                    :                                   +- * BroadcastHashJoin Inner BuildRight (30)
               :                    :     :                    :                                      :- * Project (25)
               :                    :     :                    :                                      :  +- * BroadcastHashJoin Inner BuildRight (24)
               :                    :     :                    :                                      :     :- * Filter (22)
               :                    :     :                    :                                      :     :  +- * ColumnarToRow (21)
               :                    :     :                    :                                      :     :     +- Scan parquet default.catalog_sales (20)
               :                    :     :                    :                                      :     +- ReusedExchange (23)
               :                    :     :                    :                                      +- BroadcastExchange (29)
               :                    :     :                    :                                         +- * Filter (28)
               :                    :     :                    :                                            +- * ColumnarToRow (27)
               :                    :     :                    :                                               +- Scan parquet default.item (26)
               :                    :     :                    +- * Sort (53)
               :                    :     :                       +- Exchange (52)
               :                    :     :                          +- * Project (51)
               :                    :     :                             +- * BroadcastHashJoin Inner BuildRight (50)
               :                    :     :                                :- * Project (48)
               :                    :     :                                :  +- * BroadcastHashJoin Inner BuildRight (47)
               :                    :     :                                :     :- * Filter (45)
               :                    :     :                                :     :  +- * ColumnarToRow (44)
               :                    :     :                                :     :     +- Scan parquet default.web_sales (43)
               :                    :     :                                :     +- ReusedExchange (46)
               :                    :     :                                +- ReusedExchange (49)
               :                    :     +- ReusedExchange (61)
               :                    +- ReusedExchange (64)
               :- * Project (90)
               :  +- * Filter (89)
               :     +- * HashAggregate (88)
               :        +- Exchange (87)
               :           +- * HashAggregate (86)
               :              +- * Project (85)
               :                 +- * BroadcastHashJoin Inner BuildRight (84)
               :                    :- * Project (82)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (81)
               :                    :     :- * SortMergeJoin LeftSemi (79)
               :                    :     :  :- * Sort (76)
               :                    :     :  :  +- Exchange (75)
               :                    :     :  :     +- * Filter (74)
               :                    :     :  :        +- * ColumnarToRow (73)
               :                    :     :  :           +- Scan parquet default.catalog_sales (72)
               :                    :     :  +- * Sort (78)
               :                    :     :     +- ReusedExchange (77)
               :                    :     +- ReusedExchange (80)
               :                    +- ReusedExchange (83)
               +- * Project (109)
                  +- * Filter (108)
                     +- * HashAggregate (107)
                        +- Exchange (106)
                           +- * HashAggregate (105)
                              +- * Project (104)
                                 +- * BroadcastHashJoin Inner BuildRight (103)
                                    :- * Project (101)
                                    :  +- * BroadcastHashJoin Inner BuildRight (100)
                                    :     :- * SortMergeJoin LeftSemi (98)
                                    :     :  :- * Sort (95)
                                    :     :  :  +- Exchange (94)
                                    :     :  :     +- * Filter (93)
                                    :     :  :        +- * ColumnarToRow (92)
                                    :     :  :           +- Scan parquet default.web_sales (91)
                                    :     :  +- * Sort (97)
                                    :     :     +- ReusedExchange (96)
                                    :     +- ReusedExchange (99)
                                    +- ReusedExchange (102)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 19]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(8) Filter [codegen id : 19]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(9) Scan parquet default.store_sales
Output [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(10) ColumnarToRow [codegen id : 11]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]

(11) Filter [codegen id : 11]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Condition : isnotnull(ss_item_sk#11)

(12) ReusedExchange [Reuses operator id: 144]
Output [1]: [d_date_sk#14]

(13) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_sold_date_sk#12]
Right keys [1]: [d_date_sk#14]
Join condition: None

(14) Project [codegen id : 11]
Output [1]: [ss_item_sk#11]
Input [3]: [ss_item_sk#11, ss_sold_date_sk#12, d_date_sk#14]

(15) Scan parquet default.item
Output [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(16) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(17) Filter [codegen id : 4]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Condition : (((isnotnull(i_item_sk#15) AND isnotnull(i_brand_id#16)) AND isnotnull(i_class_id#17)) AND isnotnull(i_category_id#18))

(18) Exchange
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: hashpartitioning(coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18), 5), ENSURE_REQUIREMENTS, [id=#19]

(19) Sort [codegen id : 5]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: [coalesce(i_brand_id#16, 0) ASC NULLS FIRST, isnull(i_brand_id#16) ASC NULLS FIRST, coalesce(i_class_id#17, 0) ASC NULLS FIRST, isnull(i_class_id#17) ASC NULLS FIRST, coalesce(i_category_id#18, 0) ASC NULLS FIRST, isnull(i_category_id#18) ASC NULLS FIRST], false, 0

(20) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#20, cs_sold_date_sk#21]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#21), dynamicpruningexpression(cs_sold_date_sk#21 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(21) ColumnarToRow [codegen id : 8]
Input [2]: [cs_item_sk#20, cs_sold_date_sk#21]

(22) Filter [codegen id : 8]
Input [2]: [cs_item_sk#20, cs_sold_date_sk#21]
Condition : isnotnull(cs_item_sk#20)

(23) ReusedExchange [Reuses operator id: 144]
Output [1]: [d_date_sk#22]

(24) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#21]
Right keys [1]: [d_date_sk#22]
Join condition: None

(25) Project [codegen id : 8]
Output [1]: [cs_item_sk#20]
Input [3]: [cs_item_sk#20, cs_sold_date_sk#21, d_date_sk#22]

(26) Scan parquet default.item
Output [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(27) ColumnarToRow [codegen id : 7]
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]

(28) Filter [codegen id : 7]
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Condition : isnotnull(i_item_sk#23)

(29) BroadcastExchange
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(30) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_item_sk#20]
Right keys [1]: [i_item_sk#23]
Join condition: None

(31) Project [codegen id : 8]
Output [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Input [5]: [cs_item_sk#20, i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]

(32) Exchange
Input [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: hashpartitioning(coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26), 5), ENSURE_REQUIREMENTS, [id=#28]

(33) Sort [codegen id : 9]
Input [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: [coalesce(i_brand_id#24, 0) ASC NULLS FIRST, isnull(i_brand_id#24) ASC NULLS FIRST, coalesce(i_class_id#25, 0) ASC NULLS FIRST, isnull(i_class_id#25) ASC NULLS FIRST, coalesce(i_category_id#26, 0) ASC NULLS FIRST, isnull(i_category_id#26) ASC NULLS FIRST], false, 0

(34) SortMergeJoin [codegen id : 10]
Left keys [6]: [coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18)]
Right keys [6]: [coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26)]
Join condition: None

(35) BroadcastExchange
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(36) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#11]
Right keys [1]: [i_item_sk#15]
Join condition: None

(37) Project [codegen id : 11]
Output [3]: [i_brand_id#16 AS brand_id#30, i_class_id#17 AS class_id#31, i_category_id#18 AS category_id#32]
Input [5]: [ss_item_sk#11, i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(38) HashAggregate [codegen id : 11]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(39) Exchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: hashpartitioning(brand_id#30, class_id#31, category_id#32, 5), ENSURE_REQUIREMENTS, [id=#33]

(40) HashAggregate [codegen id : 12]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Keys [3]: [brand_id#30, class_id#31, category_id#32]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#30, class_id#31, category_id#32]

(41) Exchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: hashpartitioning(coalesce(brand_id#30, 0), isnull(brand_id#30), coalesce(class_id#31, 0), isnull(class_id#31), coalesce(category_id#32, 0), isnull(category_id#32), 5), ENSURE_REQUIREMENTS, [id=#34]

(42) Sort [codegen id : 13]
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: [coalesce(brand_id#30, 0) ASC NULLS FIRST, isnull(brand_id#30) ASC NULLS FIRST, coalesce(class_id#31, 0) ASC NULLS FIRST, isnull(class_id#31) ASC NULLS FIRST, coalesce(category_id#32, 0) ASC NULLS FIRST, isnull(category_id#32) ASC NULLS FIRST], false, 0

(43) Scan parquet default.web_sales
Output [2]: [ws_item_sk#35, ws_sold_date_sk#36]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#36), dynamicpruningexpression(ws_sold_date_sk#36 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(44) ColumnarToRow [codegen id : 16]
Input [2]: [ws_item_sk#35, ws_sold_date_sk#36]

(45) Filter [codegen id : 16]
Input [2]: [ws_item_sk#35, ws_sold_date_sk#36]
Condition : isnotnull(ws_item_sk#35)

(46) ReusedExchange [Reuses operator id: 144]
Output [1]: [d_date_sk#37]

(47) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_sold_date_sk#36]
Right keys [1]: [d_date_sk#37]
Join condition: None

(48) Project [codegen id : 16]
Output [1]: [ws_item_sk#35]
Input [3]: [ws_item_sk#35, ws_sold_date_sk#36, d_date_sk#37]

(49) ReusedExchange [Reuses operator id: 29]
Output [4]: [i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(50) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_item_sk#35]
Right keys [1]: [i_item_sk#38]
Join condition: None

(51) Project [codegen id : 16]
Output [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Input [5]: [ws_item_sk#35, i_item_sk#38, i_brand_id#39, i_class_id#40, i_category_id#41]

(52) Exchange
Input [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Arguments: hashpartitioning(coalesce(i_brand_id#39, 0), isnull(i_brand_id#39), coalesce(i_class_id#40, 0), isnull(i_class_id#40), coalesce(i_category_id#41, 0), isnull(i_category_id#41), 5), ENSURE_REQUIREMENTS, [id=#42]

(53) Sort [codegen id : 17]
Input [3]: [i_brand_id#39, i_class_id#40, i_category_id#41]
Arguments: [coalesce(i_brand_id#39, 0) ASC NULLS FIRST, isnull(i_brand_id#39) ASC NULLS FIRST, coalesce(i_class_id#40, 0) ASC NULLS FIRST, isnull(i_class_id#40) ASC NULLS FIRST, coalesce(i_category_id#41, 0) ASC NULLS FIRST, isnull(i_category_id#41) ASC NULLS FIRST], false, 0

(54) SortMergeJoin [codegen id : 18]
Left keys [6]: [coalesce(brand_id#30, 0), isnull(brand_id#30), coalesce(class_id#31, 0), isnull(class_id#31), coalesce(category_id#32, 0), isnull(category_id#32)]
Right keys [6]: [coalesce(i_brand_id#39, 0), isnull(i_brand_id#39), coalesce(i_class_id#40, 0), isnull(i_class_id#40), coalesce(i_category_id#41, 0), isnull(i_category_id#41)]
Join condition: None

(55) BroadcastExchange
Input [3]: [brand_id#30, class_id#31, category_id#32]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#43]

(56) BroadcastHashJoin [codegen id : 19]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#30, class_id#31, category_id#32]
Join condition: None

(57) Project [codegen id : 19]
Output [1]: [i_item_sk#7 AS ss_item_sk#44]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#30, class_id#31, category_id#32]

(58) Exchange
Input [1]: [ss_item_sk#44]
Arguments: hashpartitioning(ss_item_sk#44, 5), ENSURE_REQUIREMENTS, [id=#45]

(59) Sort [codegen id : 20]
Input [1]: [ss_item_sk#44]
Arguments: [ss_item_sk#44 ASC NULLS FIRST], false, 0

(60) SortMergeJoin [codegen id : 23]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#44]
Join condition: None

(61) ReusedExchange [Reuses operator id: 139]
Output [1]: [d_date_sk#46]

(62) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#46]
Join condition: None

(63) Project [codegen id : 23]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#46]

(64) ReusedExchange [Reuses operator id: 29]
Output [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]

(65) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#47]
Join condition: None

(66) Project [codegen id : 23]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#48, i_class_id#49, i_category_id#50]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]

(67) HashAggregate [codegen id : 23]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#48, i_class_id#49, i_category_id#50]
Keys [3]: [i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)]
Aggregate Attributes [3]: [sum#51, isEmpty#52, count#53]
Results [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#54, isEmpty#55, count#56]

(68) Exchange
Input [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#54, isEmpty#55, count#56]
Arguments: hashpartitioning(i_brand_id#48, i_class_id#49, i_category_id#50, 5), ENSURE_REQUIREMENTS, [id=#57]

(69) HashAggregate [codegen id : 24]
Input [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#54, isEmpty#55, count#56]
Keys [3]: [i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2))), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2)))#58, count(1)#59]
Results [5]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2)))#58 AS sales#60, count(1)#59 AS number_sales#61]

(70) Filter [codegen id : 24]
Input [5]: [i_brand_id#48, i_class_id#49, i_category_id#50, sales#60, number_sales#61]
Condition : (isnotnull(sales#60) AND (cast(sales#60 as decimal(32,6)) > cast(Subquery scalar-subquery#62, [id=#63] as decimal(32,6))))

(71) Project [codegen id : 24]
Output [6]: [sales#60, number_sales#61, store AS channel#64, i_brand_id#48, i_class_id#49, i_category_id#50]
Input [5]: [i_brand_id#48, i_class_id#49, i_category_id#50, sales#60, number_sales#61]

(72) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#65, cs_quantity#66, cs_list_price#67, cs_sold_date_sk#68]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#68), dynamicpruningexpression(cs_sold_date_sk#68 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(73) ColumnarToRow [codegen id : 25]
Input [4]: [cs_item_sk#65, cs_quantity#66, cs_list_price#67, cs_sold_date_sk#68]

(74) Filter [codegen id : 25]
Input [4]: [cs_item_sk#65, cs_quantity#66, cs_list_price#67, cs_sold_date_sk#68]
Condition : isnotnull(cs_item_sk#65)

(75) Exchange
Input [4]: [cs_item_sk#65, cs_quantity#66, cs_list_price#67, cs_sold_date_sk#68]
Arguments: hashpartitioning(cs_item_sk#65, 5), ENSURE_REQUIREMENTS, [id=#69]

(76) Sort [codegen id : 26]
Input [4]: [cs_item_sk#65, cs_quantity#66, cs_list_price#67, cs_sold_date_sk#68]
Arguments: [cs_item_sk#65 ASC NULLS FIRST], false, 0

(77) ReusedExchange [Reuses operator id: 58]
Output [1]: [ss_item_sk#44]

(78) Sort [codegen id : 44]
Input [1]: [ss_item_sk#44]
Arguments: [ss_item_sk#44 ASC NULLS FIRST], false, 0

(79) SortMergeJoin [codegen id : 47]
Left keys [1]: [cs_item_sk#65]
Right keys [1]: [ss_item_sk#44]
Join condition: None

(80) ReusedExchange [Reuses operator id: 139]
Output [1]: [d_date_sk#70]

(81) BroadcastHashJoin [codegen id : 47]
Left keys [1]: [cs_sold_date_sk#68]
Right keys [1]: [d_date_sk#70]
Join condition: None

(82) Project [codegen id : 47]
Output [3]: [cs_item_sk#65, cs_quantity#66, cs_list_price#67]
Input [5]: [cs_item_sk#65, cs_quantity#66, cs_list_price#67, cs_sold_date_sk#68, d_date_sk#70]

(83) ReusedExchange [Reuses operator id: 29]
Output [4]: [i_item_sk#71, i_brand_id#72, i_class_id#73, i_category_id#74]

(84) BroadcastHashJoin [codegen id : 47]
Left keys [1]: [cs_item_sk#65]
Right keys [1]: [i_item_sk#71]
Join condition: None

(85) Project [codegen id : 47]
Output [5]: [cs_quantity#66, cs_list_price#67, i_brand_id#72, i_class_id#73, i_category_id#74]
Input [7]: [cs_item_sk#65, cs_quantity#66, cs_list_price#67, i_item_sk#71, i_brand_id#72, i_class_id#73, i_category_id#74]

(86) HashAggregate [codegen id : 47]
Input [5]: [cs_quantity#66, cs_list_price#67, i_brand_id#72, i_class_id#73, i_category_id#74]
Keys [3]: [i_brand_id#72, i_class_id#73, i_category_id#74]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cs_quantity#66 as decimal(12,2))) * promote_precision(cast(cs_list_price#67 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)]
Aggregate Attributes [3]: [sum#75, isEmpty#76, count#77]
Results [6]: [i_brand_id#72, i_class_id#73, i_category_id#74, sum#78, isEmpty#79, count#80]

(87) Exchange
Input [6]: [i_brand_id#72, i_class_id#73, i_category_id#74, sum#78, isEmpty#79, count#80]
Arguments: hashpartitioning(i_brand_id#72, i_class_id#73, i_category_id#74, 5), ENSURE_REQUIREMENTS, [id=#81]

(88) HashAggregate [codegen id : 48]
Input [6]: [i_brand_id#72, i_class_id#73, i_category_id#74, sum#78, isEmpty#79, count#80]
Keys [3]: [i_brand_id#72, i_class_id#73, i_category_id#74]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cs_quantity#66 as decimal(12,2))) * promote_precision(cast(cs_list_price#67 as decimal(12,2)))), DecimalType(18,2))), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cs_quantity#66 as decimal(12,2))) * promote_precision(cast(cs_list_price#67 as decimal(12,2)))), DecimalType(18,2)))#82, count(1)#83]
Results [5]: [i_brand_id#72, i_class_id#73, i_category_id#74, sum(CheckOverflow((promote_precision(cast(cs_quantity#66 as decimal(12,2))) * promote_precision(cast(cs_list_price#67 as decimal(12,2)))), DecimalType(18,2)))#82 AS sales#84, count(1)#83 AS number_sales#85]

(89) Filter [codegen id : 48]
Input [5]: [i_brand_id#72, i_class_id#73, i_category_id#74, sales#84, number_sales#85]
Condition : (isnotnull(sales#84) AND (cast(sales#84 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#62, [id=#63] as decimal(32,6))))

(90) Project [codegen id : 48]
Output [6]: [sales#84, number_sales#85, catalog AS channel#86, i_brand_id#72, i_class_id#73, i_category_id#74]
Input [5]: [i_brand_id#72, i_class_id#73, i_category_id#74, sales#84, number_sales#85]

(91) Scan parquet default.web_sales
Output [4]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, ws_sold_date_sk#90]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#90), dynamicpruningexpression(ws_sold_date_sk#90 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(92) ColumnarToRow [codegen id : 49]
Input [4]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, ws_sold_date_sk#90]

(93) Filter [codegen id : 49]
Input [4]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, ws_sold_date_sk#90]
Condition : isnotnull(ws_item_sk#87)

(94) Exchange
Input [4]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, ws_sold_date_sk#90]
Arguments: hashpartitioning(ws_item_sk#87, 5), ENSURE_REQUIREMENTS, [id=#91]

(95) Sort [codegen id : 50]
Input [4]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, ws_sold_date_sk#90]
Arguments: [ws_item_sk#87 ASC NULLS FIRST], false, 0

(96) ReusedExchange [Reuses operator id: 58]
Output [1]: [ss_item_sk#44]

(97) Sort [codegen id : 68]
Input [1]: [ss_item_sk#44]
Arguments: [ss_item_sk#44 ASC NULLS FIRST], false, 0

(98) SortMergeJoin [codegen id : 71]
Left keys [1]: [ws_item_sk#87]
Right keys [1]: [ss_item_sk#44]
Join condition: None

(99) ReusedExchange [Reuses operator id: 139]
Output [1]: [d_date_sk#92]

(100) BroadcastHashJoin [codegen id : 71]
Left keys [1]: [ws_sold_date_sk#90]
Right keys [1]: [d_date_sk#92]
Join condition: None

(101) Project [codegen id : 71]
Output [3]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89]
Input [5]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, ws_sold_date_sk#90, d_date_sk#92]

(102) ReusedExchange [Reuses operator id: 29]
Output [4]: [i_item_sk#93, i_brand_id#94, i_class_id#95, i_category_id#96]

(103) BroadcastHashJoin [codegen id : 71]
Left keys [1]: [ws_item_sk#87]
Right keys [1]: [i_item_sk#93]
Join condition: None

(104) Project [codegen id : 71]
Output [5]: [ws_quantity#88, ws_list_price#89, i_brand_id#94, i_class_id#95, i_category_id#96]
Input [7]: [ws_item_sk#87, ws_quantity#88, ws_list_price#89, i_item_sk#93, i_brand_id#94, i_class_id#95, i_category_id#96]

(105) HashAggregate [codegen id : 71]
Input [5]: [ws_quantity#88, ws_list_price#89, i_brand_id#94, i_class_id#95, i_category_id#96]
Keys [3]: [i_brand_id#94, i_class_id#95, i_category_id#96]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(ws_quantity#88 as decimal(12,2))) * promote_precision(cast(ws_list_price#89 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)]
Aggregate Attributes [3]: [sum#97, isEmpty#98, count#99]
Results [6]: [i_brand_id#94, i_class_id#95, i_category_id#96, sum#100, isEmpty#101, count#102]

(106) Exchange
Input [6]: [i_brand_id#94, i_class_id#95, i_category_id#96, sum#100, isEmpty#101, count#102]
Arguments: hashpartitioning(i_brand_id#94, i_class_id#95, i_category_id#96, 5), ENSURE_REQUIREMENTS, [id=#103]

(107) HashAggregate [codegen id : 72]
Input [6]: [i_brand_id#94, i_class_id#95, i_category_id#96, sum#100, isEmpty#101, count#102]
Keys [3]: [i_brand_id#94, i_class_id#95, i_category_id#96]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(ws_quantity#88 as decimal(12,2))) * promote_precision(cast(ws_list_price#89 as decimal(12,2)))), DecimalType(18,2))), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(ws_quantity#88 as decimal(12,2))) * promote_precision(cast(ws_list_price#89 as decimal(12,2)))), DecimalType(18,2)))#104, count(1)#105]
Results [5]: [i_brand_id#94, i_class_id#95, i_category_id#96, sum(CheckOverflow((promote_precision(cast(ws_quantity#88 as decimal(12,2))) * promote_precision(cast(ws_list_price#89 as decimal(12,2)))), DecimalType(18,2)))#104 AS sales#106, count(1)#105 AS number_sales#107]

(108) Filter [codegen id : 72]
Input [5]: [i_brand_id#94, i_class_id#95, i_category_id#96, sales#106, number_sales#107]
Condition : (isnotnull(sales#106) AND (cast(sales#106 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#62, [id=#63] as decimal(32,6))))

(109) Project [codegen id : 72]
Output [6]: [sales#106, number_sales#107, web AS channel#108, i_brand_id#94, i_class_id#95, i_category_id#96]
Input [5]: [i_brand_id#94, i_class_id#95, i_category_id#96, sales#106, number_sales#107]

(110) Union

(111) Expand [codegen id : 73]
Input [6]: [sales#60, number_sales#61, channel#64, i_brand_id#48, i_class_id#49, i_category_id#50]
Arguments: [[sales#60, number_sales#61, channel#64, i_brand_id#48, i_class_id#49, i_category_id#50, 0], [sales#60, number_sales#61, channel#64, i_brand_id#48, i_class_id#49, null, 1], [sales#60, number_sales#61, channel#64, i_brand_id#48, null, null, 3], [sales#60, number_sales#61, channel#64, null, null, null, 7], [sales#60, number_sales#61, null, null, null, null, 15]], [sales#60, number_sales#61, channel#109, i_brand_id#110, i_class_id#111, i_category_id#112, spark_grouping_id#113]

(112) HashAggregate [codegen id : 73]
Input [7]: [sales#60, number_sales#61, channel#109, i_brand_id#110, i_class_id#111, i_category_id#112, spark_grouping_id#113]
Keys [5]: [channel#109, i_brand_id#110, i_class_id#111, i_category_id#112, spark_grouping_id#113]
Functions [2]: [partial_sum(sales#60), partial_sum(number_sales#61)]
Aggregate Attributes [3]: [sum#114, isEmpty#115, sum#116]
Results [8]: [channel#109, i_brand_id#110, i_class_id#111, i_category_id#112, spark_grouping_id#113, sum#117, isEmpty#118, sum#119]

(113) Exchange
Input [8]: [channel#109, i_brand_id#110, i_class_id#111, i_category_id#112, spark_grouping_id#113, sum#117, isEmpty#118, sum#119]
Arguments: hashpartitioning(channel#109, i_brand_id#110, i_class_id#111, i_category_id#112, spark_grouping_id#113, 5), ENSURE_REQUIREMENTS, [id=#120]

(114) HashAggregate [codegen id : 74]
Input [8]: [channel#109, i_brand_id#110, i_class_id#111, i_category_id#112, spark_grouping_id#113, sum#117, isEmpty#118, sum#119]
Keys [5]: [channel#109, i_brand_id#110, i_class_id#111, i_category_id#112, spark_grouping_id#113]
Functions [2]: [sum(sales#60), sum(number_sales#61)]
Aggregate Attributes [2]: [sum(sales#60)#121, sum(number_sales#61)#122]
Results [6]: [channel#109, i_brand_id#110, i_class_id#111, i_category_id#112, sum(sales#60)#121 AS sum(sales)#123, sum(number_sales#61)#122 AS sum(number_sales)#124]

(115) TakeOrderedAndProject
Input [6]: [channel#109, i_brand_id#110, i_class_id#111, i_category_id#112, sum(sales)#123, sum(number_sales)#124]
Arguments: 100, [channel#109 ASC NULLS FIRST, i_brand_id#110 ASC NULLS FIRST, i_class_id#111 ASC NULLS FIRST, i_category_id#112 ASC NULLS FIRST], [channel#109, i_brand_id#110, i_class_id#111, i_category_id#112, sum(sales)#123, sum(number_sales)#124]

===== Subqueries =====

Subquery:1 Hosting operator id = 70 Hosting Expression = Subquery scalar-subquery#62, [id=#63]
* HashAggregate (134)
+- Exchange (133)
   +- * HashAggregate (132)
      +- Union (131)
         :- * Project (120)
         :  +- * BroadcastHashJoin Inner BuildRight (119)
         :     :- * ColumnarToRow (117)
         :     :  +- Scan parquet default.store_sales (116)
         :     +- ReusedExchange (118)
         :- * Project (125)
         :  +- * BroadcastHashJoin Inner BuildRight (124)
         :     :- * ColumnarToRow (122)
         :     :  +- Scan parquet default.catalog_sales (121)
         :     +- ReusedExchange (123)
         +- * Project (130)
            +- * BroadcastHashJoin Inner BuildRight (129)
               :- * ColumnarToRow (127)
               :  +- Scan parquet default.web_sales (126)
               +- ReusedExchange (128)


(116) Scan parquet default.store_sales
Output [3]: [ss_quantity#125, ss_list_price#126, ss_sold_date_sk#127]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#127), dynamicpruningexpression(ss_sold_date_sk#127 IN dynamicpruning#13)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(117) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#125, ss_list_price#126, ss_sold_date_sk#127]

(118) ReusedExchange [Reuses operator id: 144]
Output [1]: [d_date_sk#128]

(119) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#127]
Right keys [1]: [d_date_sk#128]
Join condition: None

(120) Project [codegen id : 2]
Output [2]: [ss_quantity#125 AS quantity#129, ss_list_price#126 AS list_price#130]
Input [4]: [ss_quantity#125, ss_list_price#126, ss_sold_date_sk#127, d_date_sk#128]

(121) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#131, cs_list_price#132, cs_sold_date_sk#133]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#133), dynamicpruningexpression(cs_sold_date_sk#133 IN dynamicpruning#13)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(122) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#131, cs_list_price#132, cs_sold_date_sk#133]

(123) ReusedExchange [Reuses operator id: 144]
Output [1]: [d_date_sk#134]

(124) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#133]
Right keys [1]: [d_date_sk#134]
Join condition: None

(125) Project [codegen id : 4]
Output [2]: [cs_quantity#131 AS quantity#135, cs_list_price#132 AS list_price#136]
Input [4]: [cs_quantity#131, cs_list_price#132, cs_sold_date_sk#133, d_date_sk#134]

(126) Scan parquet default.web_sales
Output [3]: [ws_quantity#137, ws_list_price#138, ws_sold_date_sk#139]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#139), dynamicpruningexpression(ws_sold_date_sk#139 IN dynamicpruning#13)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(127) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#137, ws_list_price#138, ws_sold_date_sk#139]

(128) ReusedExchange [Reuses operator id: 144]
Output [1]: [d_date_sk#140]

(129) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#139]
Right keys [1]: [d_date_sk#140]
Join condition: None

(130) Project [codegen id : 6]
Output [2]: [ws_quantity#137 AS quantity#141, ws_list_price#138 AS list_price#142]
Input [4]: [ws_quantity#137, ws_list_price#138, ws_sold_date_sk#139, d_date_sk#140]

(131) Union

(132) HashAggregate [codegen id : 7]
Input [2]: [quantity#129, list_price#130]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(quantity#129 as decimal(12,2))) * promote_precision(cast(list_price#130 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#143, count#144]
Results [2]: [sum#145, count#146]

(133) Exchange
Input [2]: [sum#145, count#146]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#147]

(134) HashAggregate [codegen id : 8]
Input [2]: [sum#145, count#146]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(quantity#129 as decimal(12,2))) * promote_precision(cast(list_price#130 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(quantity#129 as decimal(12,2))) * promote_precision(cast(list_price#130 as decimal(12,2)))), DecimalType(18,2)))#148]
Results [1]: [avg(CheckOverflow((promote_precision(cast(quantity#129 as decimal(12,2))) * promote_precision(cast(list_price#130 as decimal(12,2)))), DecimalType(18,2)))#148 AS average_sales#149]

Subquery:2 Hosting operator id = 116 Hosting Expression = ss_sold_date_sk#127 IN dynamicpruning#13

Subquery:3 Hosting operator id = 121 Hosting Expression = cs_sold_date_sk#133 IN dynamicpruning#13

Subquery:4 Hosting operator id = 126 Hosting Expression = ws_sold_date_sk#139 IN dynamicpruning#13

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (139)
+- * Project (138)
   +- * Filter (137)
      +- * ColumnarToRow (136)
         +- Scan parquet default.date_dim (135)


(135) Scan parquet default.date_dim
Output [3]: [d_date_sk#46, d_year#150, d_moy#151]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(136) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#46, d_year#150, d_moy#151]

(137) Filter [codegen id : 1]
Input [3]: [d_date_sk#46, d_year#150, d_moy#151]
Condition : ((((isnotnull(d_year#150) AND isnotnull(d_moy#151)) AND (d_year#150 = 2001)) AND (d_moy#151 = 11)) AND isnotnull(d_date_sk#46))

(138) Project [codegen id : 1]
Output [1]: [d_date_sk#46]
Input [3]: [d_date_sk#46, d_year#150, d_moy#151]

(139) BroadcastExchange
Input [1]: [d_date_sk#46]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#152]

Subquery:6 Hosting operator id = 9 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#13
BroadcastExchange (144)
+- * Project (143)
   +- * Filter (142)
      +- * ColumnarToRow (141)
         +- Scan parquet default.date_dim (140)


(140) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#153]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(141) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#153]

(142) Filter [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#153]
Condition : (((isnotnull(d_year#153) AND (d_year#153 >= 1999)) AND (d_year#153 <= 2001)) AND isnotnull(d_date_sk#14))

(143) Project [codegen id : 1]
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#153]

(144) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#154]

Subquery:7 Hosting operator id = 20 Hosting Expression = cs_sold_date_sk#21 IN dynamicpruning#13

Subquery:8 Hosting operator id = 43 Hosting Expression = ws_sold_date_sk#36 IN dynamicpruning#13

Subquery:9 Hosting operator id = 89 Hosting Expression = ReusedSubquery Subquery scalar-subquery#62, [id=#63]

Subquery:10 Hosting operator id = 72 Hosting Expression = cs_sold_date_sk#68 IN dynamicpruning#5

Subquery:11 Hosting operator id = 108 Hosting Expression = ReusedSubquery Subquery scalar-subquery#62, [id=#63]

Subquery:12 Hosting operator id = 91 Hosting Expression = ws_sold_date_sk#90 IN dynamicpruning#5


