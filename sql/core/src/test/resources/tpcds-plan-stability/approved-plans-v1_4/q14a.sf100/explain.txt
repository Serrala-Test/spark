== Physical Plan ==
TakeOrderedAndProject (131)
+- * HashAggregate (130)
   +- Exchange (129)
      +- * HashAggregate (128)
         +- * Expand (127)
            +- Union (126)
               :- * Project (87)
               :  +- * Filter (86)
               :     +- * HashAggregate (85)
               :        +- Exchange (84)
               :           +- * HashAggregate (83)
               :              +- * Project (82)
               :                 +- * BroadcastHashJoin Inner BuildRight (81)
               :                    :- * Project (71)
               :                    :  +- * BroadcastHashJoin Inner BuildLeft (70)
               :                    :     :- BroadcastExchange (5)
               :                    :     :  +- * Project (4)
               :                    :     :     +- * Filter (3)
               :                    :     :        +- * ColumnarToRow (2)
               :                    :     :           +- Scan parquet default.date_dim (1)
               :                    :     +- SortMergeJoin LeftSemi (69)
               :                    :        :- * Sort (10)
               :                    :        :  +- Exchange (9)
               :                    :        :     +- * Filter (8)
               :                    :        :        +- * ColumnarToRow (7)
               :                    :        :           +- Scan parquet default.store_sales (6)
               :                    :        +- * Sort (68)
               :                    :           +- Exchange (67)
               :                    :              +- * Project (66)
               :                    :                 +- * BroadcastHashJoin Inner BuildRight (65)
               :                    :                    :- * Filter (13)
               :                    :                    :  +- * ColumnarToRow (12)
               :                    :                    :     +- Scan parquet default.item (11)
               :                    :                    +- BroadcastExchange (64)
               :                    :                       +- * HashAggregate (63)
               :                    :                          +- * HashAggregate (62)
               :                    :                             +- * HashAggregate (61)
               :                    :                                +- Exchange (60)
               :                    :                                   +- * HashAggregate (59)
               :                    :                                      +- SortMergeJoin LeftSemi (58)
               :                    :                                         :- SortMergeJoin LeftSemi (46)
               :                    :                                         :  :- * Sort (31)
               :                    :                                         :  :  +- Exchange (30)
               :                    :                                         :  :     +- * Project (29)
               :                    :                                         :  :        +- * BroadcastHashJoin Inner BuildRight (28)
               :                    :                                         :  :           :- * Project (23)
               :                    :                                         :  :           :  +- * BroadcastHashJoin Inner BuildRight (22)
               :                    :                                         :  :           :     :- * Filter (16)
               :                    :                                         :  :           :     :  +- * ColumnarToRow (15)
               :                    :                                         :  :           :     :     +- Scan parquet default.store_sales (14)
               :                    :                                         :  :           :     +- BroadcastExchange (21)
               :                    :                                         :  :           :        +- * Project (20)
               :                    :                                         :  :           :           +- * Filter (19)
               :                    :                                         :  :           :              +- * ColumnarToRow (18)
               :                    :                                         :  :           :                 +- Scan parquet default.date_dim (17)
               :                    :                                         :  :           +- BroadcastExchange (27)
               :                    :                                         :  :              +- * Filter (26)
               :                    :                                         :  :                 +- * ColumnarToRow (25)
               :                    :                                         :  :                    +- Scan parquet default.item (24)
               :                    :                                         :  +- * Sort (45)
               :                    :                                         :     +- Exchange (44)
               :                    :                                         :        +- * Project (43)
               :                    :                                         :           +- * BroadcastHashJoin Inner BuildRight (42)
               :                    :                                         :              :- * Project (37)
               :                    :                                         :              :  +- * BroadcastHashJoin Inner BuildRight (36)
               :                    :                                         :              :     :- * Filter (34)
               :                    :                                         :              :     :  +- * ColumnarToRow (33)
               :                    :                                         :              :     :     +- Scan parquet default.catalog_sales (32)
               :                    :                                         :              :     +- ReusedExchange (35)
               :                    :                                         :              +- BroadcastExchange (41)
               :                    :                                         :                 +- * Filter (40)
               :                    :                                         :                    +- * ColumnarToRow (39)
               :                    :                                         :                       +- Scan parquet default.item (38)
               :                    :                                         +- * Sort (57)
               :                    :                                            +- Exchange (56)
               :                    :                                               +- * Project (55)
               :                    :                                                  +- * BroadcastHashJoin Inner BuildRight (54)
               :                    :                                                     :- * Project (52)
               :                    :                                                     :  +- * BroadcastHashJoin Inner BuildRight (51)
               :                    :                                                     :     :- * Filter (49)
               :                    :                                                     :     :  +- * ColumnarToRow (48)
               :                    :                                                     :     :     +- Scan parquet default.web_sales (47)
               :                    :                                                     :     +- ReusedExchange (50)
               :                    :                                                     +- ReusedExchange (53)
               :                    +- BroadcastExchange (80)
               :                       +- SortMergeJoin LeftSemi (79)
               :                          :- * Sort (76)
               :                          :  +- Exchange (75)
               :                          :     +- * Filter (74)
               :                          :        +- * ColumnarToRow (73)
               :                          :           +- Scan parquet default.item (72)
               :                          +- * Sort (78)
               :                             +- ReusedExchange (77)
               :- * Project (106)
               :  +- * Filter (105)
               :     +- * HashAggregate (104)
               :        +- Exchange (103)
               :           +- * HashAggregate (102)
               :              +- * Project (101)
               :                 +- * BroadcastHashJoin Inner BuildRight (100)
               :                    :- * Project (98)
               :                    :  +- * BroadcastHashJoin Inner BuildLeft (97)
               :                    :     :- ReusedExchange (88)
               :                    :     +- SortMergeJoin LeftSemi (96)
               :                    :        :- * Sort (93)
               :                    :        :  +- Exchange (92)
               :                    :        :     +- * Filter (91)
               :                    :        :        +- * ColumnarToRow (90)
               :                    :        :           +- Scan parquet default.catalog_sales (89)
               :                    :        +- * Sort (95)
               :                    :           +- ReusedExchange (94)
               :                    +- ReusedExchange (99)
               +- * Project (125)
                  +- * Filter (124)
                     +- * HashAggregate (123)
                        +- Exchange (122)
                           +- * HashAggregate (121)
                              +- * Project (120)
                                 +- * BroadcastHashJoin Inner BuildRight (119)
                                    :- * Project (117)
                                    :  +- * BroadcastHashJoin Inner BuildLeft (116)
                                    :     :- ReusedExchange (107)
                                    :     +- SortMergeJoin LeftSemi (115)
                                    :        :- * Sort (112)
                                    :        :  +- Exchange (111)
                                    :        :     +- * Filter (110)
                                    :        :        +- * ColumnarToRow (109)
                                    :        :           +- Scan parquet default.web_sales (108)
                                    :        +- * Sort (114)
                                    :           +- ReusedExchange (113)
                                    +- ReusedExchange (118)


(1) Scan parquet default.date_dim
Output [3]: [d_date_sk#1, d_year#2, d_moy#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]

(3) Filter [codegen id : 1]
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]
Condition : ((((isnotnull(d_year#2) AND isnotnull(d_moy#3)) AND (d_year#2 = 2001)) AND (d_moy#3 = 11)) AND isnotnull(d_date_sk#1))

(4) Project [codegen id : 1]
Output [1]: [d_date_sk#1]
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]

(5) BroadcastExchange
Input [1]: [d_date_sk#1]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#4]

(6) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#5, ss_item_sk#6, ss_quantity#7, ss_list_price#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(7) ColumnarToRow [codegen id : 2]
Input [4]: [ss_sold_date_sk#5, ss_item_sk#6, ss_quantity#7, ss_list_price#8]

(8) Filter [codegen id : 2]
Input [4]: [ss_sold_date_sk#5, ss_item_sk#6, ss_quantity#7, ss_list_price#8]
Condition : (isnotnull(ss_item_sk#6) AND isnotnull(ss_sold_date_sk#5))

(9) Exchange
Input [4]: [ss_sold_date_sk#5, ss_item_sk#6, ss_quantity#7, ss_list_price#8]
Arguments: hashpartitioning(ss_item_sk#6, 5), true, [id=#9]

(10) Sort [codegen id : 3]
Input [4]: [ss_sold_date_sk#5, ss_item_sk#6, ss_quantity#7, ss_list_price#8]
Arguments: [ss_item_sk#6 ASC NULLS FIRST], false, 0

(11) Scan parquet default.item
Output [4]: [i_item_sk#10, i_brand_id#11, i_class_id#12, i_category_id#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(12) ColumnarToRow [codegen id : 18]
Input [4]: [i_item_sk#10, i_brand_id#11, i_class_id#12, i_category_id#13]

(13) Filter [codegen id : 18]
Input [4]: [i_item_sk#10, i_brand_id#11, i_class_id#12, i_category_id#13]
Condition : ((isnotnull(i_brand_id#11) AND isnotnull(i_class_id#12)) AND isnotnull(i_category_id#13))

(14) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#5, ss_item_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(15) ColumnarToRow [codegen id : 6]
Input [2]: [ss_sold_date_sk#5, ss_item_sk#6]

(16) Filter [codegen id : 6]
Input [2]: [ss_sold_date_sk#5, ss_item_sk#6]
Condition : (isnotnull(ss_item_sk#6) AND isnotnull(ss_sold_date_sk#5))

(17) Scan parquet default.date_dim
Output [2]: [d_date_sk#1, d_year#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(18) ColumnarToRow [codegen id : 4]
Input [2]: [d_date_sk#1, d_year#2]

(19) Filter [codegen id : 4]
Input [2]: [d_date_sk#1, d_year#2]
Condition : (((isnotnull(d_year#2) AND (d_year#2 >= 1999)) AND (d_year#2 <= 2001)) AND isnotnull(d_date_sk#1))

(20) Project [codegen id : 4]
Output [1]: [d_date_sk#1]
Input [2]: [d_date_sk#1, d_year#2]

(21) BroadcastExchange
Input [1]: [d_date_sk#1]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(22) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#5]
Right keys [1]: [d_date_sk#1]
Join condition: None

(23) Project [codegen id : 6]
Output [1]: [ss_item_sk#6]
Input [3]: [ss_sold_date_sk#5, ss_item_sk#6, d_date_sk#1]

(24) Scan parquet default.item
Output [4]: [i_item_sk#10, i_brand_id#11, i_class_id#12, i_category_id#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(25) ColumnarToRow [codegen id : 5]
Input [4]: [i_item_sk#10, i_brand_id#11, i_class_id#12, i_category_id#13]

(26) Filter [codegen id : 5]
Input [4]: [i_item_sk#10, i_brand_id#11, i_class_id#12, i_category_id#13]
Condition : (((isnotnull(i_item_sk#10) AND isnotnull(i_brand_id#11)) AND isnotnull(i_class_id#12)) AND isnotnull(i_category_id#13))

(27) BroadcastExchange
Input [4]: [i_item_sk#10, i_brand_id#11, i_class_id#12, i_category_id#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#15]

(28) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#6]
Right keys [1]: [i_item_sk#10]
Join condition: None

(29) Project [codegen id : 6]
Output [3]: [i_brand_id#11 AS brand_id#16, i_class_id#12 AS class_id#17, i_category_id#13 AS category_id#18]
Input [5]: [ss_item_sk#6, i_item_sk#10, i_brand_id#11, i_class_id#12, i_category_id#13]

(30) Exchange
Input [3]: [brand_id#16, class_id#17, category_id#18]
Arguments: hashpartitioning(coalesce(brand_id#16, 0), isnull(brand_id#16), coalesce(class_id#17, 0), isnull(class_id#17), coalesce(category_id#18, 0), isnull(category_id#18), 5), true, [id=#19]

(31) Sort [codegen id : 7]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Arguments: [coalesce(brand_id#16, 0) ASC NULLS FIRST, isnull(brand_id#16) ASC NULLS FIRST, coalesce(class_id#17, 0) ASC NULLS FIRST, isnull(class_id#17) ASC NULLS FIRST, coalesce(category_id#18, 0) ASC NULLS FIRST, isnull(category_id#18) ASC NULLS FIRST], false, 0

(32) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#20, cs_item_sk#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int>

(33) ColumnarToRow [codegen id : 10]
Input [2]: [cs_sold_date_sk#20, cs_item_sk#21]

(34) Filter [codegen id : 10]
Input [2]: [cs_sold_date_sk#20, cs_item_sk#21]
Condition : (isnotnull(cs_item_sk#21) AND isnotnull(cs_sold_date_sk#20))

(35) ReusedExchange [Reuses operator id: 21]
Output [1]: [d_date_sk#1]

(36) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#20]
Right keys [1]: [d_date_sk#1]
Join condition: None

(37) Project [codegen id : 10]
Output [1]: [cs_item_sk#21]
Input [3]: [cs_sold_date_sk#20, cs_item_sk#21, d_date_sk#1]

(38) Scan parquet default.item
Output [4]: [i_item_sk#10, i_brand_id#11, i_class_id#12, i_category_id#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(39) ColumnarToRow [codegen id : 9]
Input [4]: [i_item_sk#10, i_brand_id#11, i_class_id#12, i_category_id#13]

(40) Filter [codegen id : 9]
Input [4]: [i_item_sk#10, i_brand_id#11, i_class_id#12, i_category_id#13]
Condition : isnotnull(i_item_sk#10)

(41) BroadcastExchange
Input [4]: [i_item_sk#10, i_brand_id#11, i_class_id#12, i_category_id#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#22]

(42) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_item_sk#21]
Right keys [1]: [i_item_sk#10]
Join condition: None

(43) Project [codegen id : 10]
Output [3]: [i_brand_id#11, i_class_id#12, i_category_id#13]
Input [5]: [cs_item_sk#21, i_item_sk#10, i_brand_id#11, i_class_id#12, i_category_id#13]

(44) Exchange
Input [3]: [i_brand_id#11, i_class_id#12, i_category_id#13]
Arguments: hashpartitioning(coalesce(i_brand_id#11, 0), isnull(i_brand_id#11), coalesce(i_class_id#12, 0), isnull(i_class_id#12), coalesce(i_category_id#13, 0), isnull(i_category_id#13), 5), true, [id=#23]

(45) Sort [codegen id : 11]
Input [3]: [i_brand_id#11, i_class_id#12, i_category_id#13]
Arguments: [coalesce(i_brand_id#11, 0) ASC NULLS FIRST, isnull(i_brand_id#11) ASC NULLS FIRST, coalesce(i_class_id#12, 0) ASC NULLS FIRST, isnull(i_class_id#12) ASC NULLS FIRST, coalesce(i_category_id#13, 0) ASC NULLS FIRST, isnull(i_category_id#13) ASC NULLS FIRST], false, 0

(46) SortMergeJoin
Left keys [6]: [coalesce(brand_id#16, 0), isnull(brand_id#16), coalesce(class_id#17, 0), isnull(class_id#17), coalesce(category_id#18, 0), isnull(category_id#18)]
Right keys [6]: [coalesce(i_brand_id#11, 0), isnull(i_brand_id#11), coalesce(i_class_id#12, 0), isnull(i_class_id#12), coalesce(i_category_id#13, 0), isnull(i_category_id#13)]
Join condition: None

(47) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#24, ws_item_sk#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int>

(48) ColumnarToRow [codegen id : 14]
Input [2]: [ws_sold_date_sk#24, ws_item_sk#25]

(49) Filter [codegen id : 14]
Input [2]: [ws_sold_date_sk#24, ws_item_sk#25]
Condition : (isnotnull(ws_item_sk#25) AND isnotnull(ws_sold_date_sk#24))

(50) ReusedExchange [Reuses operator id: 21]
Output [1]: [d_date_sk#1]

(51) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_sold_date_sk#24]
Right keys [1]: [d_date_sk#1]
Join condition: None

(52) Project [codegen id : 14]
Output [1]: [ws_item_sk#25]
Input [3]: [ws_sold_date_sk#24, ws_item_sk#25, d_date_sk#1]

(53) ReusedExchange [Reuses operator id: 41]
Output [4]: [i_item_sk#10, i_brand_id#11, i_class_id#12, i_category_id#13]

(54) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_item_sk#25]
Right keys [1]: [i_item_sk#10]
Join condition: None

(55) Project [codegen id : 14]
Output [3]: [i_brand_id#11, i_class_id#12, i_category_id#13]
Input [5]: [ws_item_sk#25, i_item_sk#10, i_brand_id#11, i_class_id#12, i_category_id#13]

(56) Exchange
Input [3]: [i_brand_id#11, i_class_id#12, i_category_id#13]
Arguments: hashpartitioning(coalesce(i_brand_id#11, 0), isnull(i_brand_id#11), coalesce(i_class_id#12, 0), isnull(i_class_id#12), coalesce(i_category_id#13, 0), isnull(i_category_id#13), 5), true, [id=#26]

(57) Sort [codegen id : 15]
Input [3]: [i_brand_id#11, i_class_id#12, i_category_id#13]
Arguments: [coalesce(i_brand_id#11, 0) ASC NULLS FIRST, isnull(i_brand_id#11) ASC NULLS FIRST, coalesce(i_class_id#12, 0) ASC NULLS FIRST, isnull(i_class_id#12) ASC NULLS FIRST, coalesce(i_category_id#13, 0) ASC NULLS FIRST, isnull(i_category_id#13) ASC NULLS FIRST], false, 0

(58) SortMergeJoin
Left keys [6]: [coalesce(brand_id#16, 0), isnull(brand_id#16), coalesce(class_id#17, 0), isnull(class_id#17), coalesce(category_id#18, 0), isnull(category_id#18)]
Right keys [6]: [coalesce(i_brand_id#11, 0), isnull(i_brand_id#11), coalesce(i_class_id#12, 0), isnull(i_class_id#12), coalesce(i_category_id#13, 0), isnull(i_category_id#13)]
Join condition: None

(59) HashAggregate [codegen id : 16]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Keys [3]: [brand_id#16, class_id#17, category_id#18]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#16, class_id#17, category_id#18]

(60) Exchange
Input [3]: [brand_id#16, class_id#17, category_id#18]
Arguments: hashpartitioning(brand_id#16, class_id#17, category_id#18, 5), true, [id=#27]

(61) HashAggregate [codegen id : 17]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Keys [3]: [brand_id#16, class_id#17, category_id#18]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#16, class_id#17, category_id#18]

(62) HashAggregate [codegen id : 17]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Keys [3]: [brand_id#16, class_id#17, category_id#18]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#16, class_id#17, category_id#18]

(63) HashAggregate [codegen id : 17]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Keys [3]: [brand_id#16, class_id#17, category_id#18]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#16, class_id#17, category_id#18]

(64) BroadcastExchange
Input [3]: [brand_id#16, class_id#17, category_id#18]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#28]

(65) BroadcastHashJoin [codegen id : 18]
Left keys [3]: [i_brand_id#11, i_class_id#12, i_category_id#13]
Right keys [3]: [brand_id#16, class_id#17, category_id#18]
Join condition: None

(66) Project [codegen id : 18]
Output [1]: [i_item_sk#10 AS ss_item_sk#29]
Input [7]: [i_item_sk#10, i_brand_id#11, i_class_id#12, i_category_id#13, brand_id#16, class_id#17, category_id#18]

(67) Exchange
Input [1]: [ss_item_sk#29]
Arguments: hashpartitioning(ss_item_sk#29, 5), true, [id=#30]

(68) Sort [codegen id : 19]
Input [1]: [ss_item_sk#29]
Arguments: [ss_item_sk#29 ASC NULLS FIRST], false, 0

(69) SortMergeJoin
Left keys [1]: [ss_item_sk#6]
Right keys [1]: [ss_item_sk#29]
Join condition: None

(70) BroadcastHashJoin [codegen id : 38]
Left keys [1]: [d_date_sk#1]
Right keys [1]: [ss_sold_date_sk#5]
Join condition: None

(71) Project [codegen id : 38]
Output [3]: [ss_item_sk#6, ss_quantity#7, ss_list_price#8]
Input [5]: [d_date_sk#1, ss_sold_date_sk#5, ss_item_sk#6, ss_quantity#7, ss_list_price#8]

(72) Scan parquet default.item
Output [4]: [i_item_sk#10, i_brand_id#11, i_class_id#12, i_category_id#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(73) ColumnarToRow [codegen id : 20]
Input [4]: [i_item_sk#10, i_brand_id#11, i_class_id#12, i_category_id#13]

(74) Filter [codegen id : 20]
Input [4]: [i_item_sk#10, i_brand_id#11, i_class_id#12, i_category_id#13]
Condition : isnotnull(i_item_sk#10)

(75) Exchange
Input [4]: [i_item_sk#10, i_brand_id#11, i_class_id#12, i_category_id#13]
Arguments: hashpartitioning(i_item_sk#10, 5), true, [id=#31]

(76) Sort [codegen id : 21]
Input [4]: [i_item_sk#10, i_brand_id#11, i_class_id#12, i_category_id#13]
Arguments: [i_item_sk#10 ASC NULLS FIRST], false, 0

(77) ReusedExchange [Reuses operator id: 67]
Output [1]: [ss_item_sk#29]

(78) Sort [codegen id : 37]
Input [1]: [ss_item_sk#29]
Arguments: [ss_item_sk#29 ASC NULLS FIRST], false, 0

(79) SortMergeJoin
Left keys [1]: [i_item_sk#10]
Right keys [1]: [ss_item_sk#29]
Join condition: None

(80) BroadcastExchange
Input [4]: [i_item_sk#10, i_brand_id#11, i_class_id#12, i_category_id#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#32]

(81) BroadcastHashJoin [codegen id : 38]
Left keys [1]: [ss_item_sk#6]
Right keys [1]: [i_item_sk#10]
Join condition: None

(82) Project [codegen id : 38]
Output [5]: [ss_quantity#7, ss_list_price#8, i_brand_id#11, i_class_id#12, i_category_id#13]
Input [7]: [ss_item_sk#6, ss_quantity#7, ss_list_price#8, i_item_sk#10, i_brand_id#11, i_class_id#12, i_category_id#13]

(83) HashAggregate [codegen id : 38]
Input [5]: [ss_quantity#7, ss_list_price#8, i_brand_id#11, i_class_id#12, i_category_id#13]
Keys [3]: [i_brand_id#11, i_class_id#12, i_category_id#13]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#8 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#33, isEmpty#34, count#35]
Results [6]: [i_brand_id#11, i_class_id#12, i_category_id#13, sum#36, isEmpty#37, count#38]

(84) Exchange
Input [6]: [i_brand_id#11, i_class_id#12, i_category_id#13, sum#36, isEmpty#37, count#38]
Arguments: hashpartitioning(i_brand_id#11, i_class_id#12, i_category_id#13, 5), true, [id=#39]

(85) HashAggregate [codegen id : 39]
Input [6]: [i_brand_id#11, i_class_id#12, i_category_id#13, sum#36, isEmpty#37, count#38]
Keys [3]: [i_brand_id#11, i_class_id#12, i_category_id#13]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#8 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#8 as decimal(12,2)))), DecimalType(18,2), true))#40, count(1)#41]
Results [6]: [i_brand_id#11, i_class_id#12, i_category_id#13, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#8 as decimal(12,2)))), DecimalType(18,2), true))#40 AS sales#42, count(1)#41 AS number_sales#43, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#8 as decimal(12,2)))), DecimalType(18,2), true))#40 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#8 as decimal(12,2)))), DecimalType(18,2), true))#44]

(86) Filter [codegen id : 39]
Input [6]: [i_brand_id#11, i_class_id#12, i_category_id#13, sales#42, number_sales#43, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#8 as decimal(12,2)))), DecimalType(18,2), true))#44]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#8 as decimal(12,2)))), DecimalType(18,2), true))#44) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#8 as decimal(12,2)))), DecimalType(18,2), true))#44 as decimal(32,6)) > cast(Subquery scalar-subquery#45, [id=#46] as decimal(32,6))))

(87) Project [codegen id : 39]
Output [6]: [sales#42, number_sales#43, store AS channel#47, i_brand_id#11, i_class_id#12, i_category_id#13]
Input [6]: [i_brand_id#11, i_class_id#12, i_category_id#13, sales#42, number_sales#43, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#7 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#8 as decimal(12,2)))), DecimalType(18,2), true))#44]

(88) ReusedExchange [Reuses operator id: 5]
Output [1]: [d_date_sk#1]

(89) Scan parquet default.catalog_sales
Output [4]: [cs_sold_date_sk#20, cs_item_sk#21, cs_quantity#48, cs_list_price#49]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(90) ColumnarToRow [codegen id : 41]
Input [4]: [cs_sold_date_sk#20, cs_item_sk#21, cs_quantity#48, cs_list_price#49]

(91) Filter [codegen id : 41]
Input [4]: [cs_sold_date_sk#20, cs_item_sk#21, cs_quantity#48, cs_list_price#49]
Condition : (isnotnull(cs_item_sk#21) AND isnotnull(cs_sold_date_sk#20))

(92) Exchange
Input [4]: [cs_sold_date_sk#20, cs_item_sk#21, cs_quantity#48, cs_list_price#49]
Arguments: hashpartitioning(cs_item_sk#21, 5), true, [id=#50]

(93) Sort [codegen id : 42]
Input [4]: [cs_sold_date_sk#20, cs_item_sk#21, cs_quantity#48, cs_list_price#49]
Arguments: [cs_item_sk#21 ASC NULLS FIRST], false, 0

(94) ReusedExchange [Reuses operator id: 67]
Output [1]: [ss_item_sk#29]

(95) Sort [codegen id : 58]
Input [1]: [ss_item_sk#29]
Arguments: [ss_item_sk#29 ASC NULLS FIRST], false, 0

(96) SortMergeJoin
Left keys [1]: [cs_item_sk#21]
Right keys [1]: [ss_item_sk#29]
Join condition: None

(97) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [d_date_sk#1]
Right keys [1]: [cs_sold_date_sk#20]
Join condition: None

(98) Project [codegen id : 77]
Output [3]: [cs_item_sk#21, cs_quantity#48, cs_list_price#49]
Input [5]: [d_date_sk#1, cs_sold_date_sk#20, cs_item_sk#21, cs_quantity#48, cs_list_price#49]

(99) ReusedExchange [Reuses operator id: 80]
Output [4]: [i_item_sk#10, i_brand_id#11, i_class_id#12, i_category_id#13]

(100) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [cs_item_sk#21]
Right keys [1]: [i_item_sk#10]
Join condition: None

(101) Project [codegen id : 77]
Output [5]: [cs_quantity#48, cs_list_price#49, i_brand_id#11, i_class_id#12, i_category_id#13]
Input [7]: [cs_item_sk#21, cs_quantity#48, cs_list_price#49, i_item_sk#10, i_brand_id#11, i_class_id#12, i_category_id#13]

(102) HashAggregate [codegen id : 77]
Input [5]: [cs_quantity#48, cs_list_price#49, i_brand_id#11, i_class_id#12, i_category_id#13]
Keys [3]: [i_brand_id#11, i_class_id#12, i_category_id#13]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#51, isEmpty#52, count#53]
Results [6]: [i_brand_id#11, i_class_id#12, i_category_id#13, sum#54, isEmpty#55, count#56]

(103) Exchange
Input [6]: [i_brand_id#11, i_class_id#12, i_category_id#13, sum#54, isEmpty#55, count#56]
Arguments: hashpartitioning(i_brand_id#11, i_class_id#12, i_category_id#13, 5), true, [id=#57]

(104) HashAggregate [codegen id : 78]
Input [6]: [i_brand_id#11, i_class_id#12, i_category_id#13, sum#54, isEmpty#55, count#56]
Keys [3]: [i_brand_id#11, i_class_id#12, i_category_id#13]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#58, count(1)#59]
Results [6]: [i_brand_id#11, i_class_id#12, i_category_id#13, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#58 AS sales#60, count(1)#59 AS number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#58 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#62]

(105) Filter [codegen id : 78]
Input [6]: [i_brand_id#11, i_class_id#12, i_category_id#13, sales#60, number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#62]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#62) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#62 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#45, [id=#46] as decimal(32,6))))

(106) Project [codegen id : 78]
Output [6]: [sales#60, number_sales#61, catalog AS channel#63, i_brand_id#11, i_class_id#12, i_category_id#13]
Input [6]: [i_brand_id#11, i_class_id#12, i_category_id#13, sales#60, number_sales#61, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#62]

(107) ReusedExchange [Reuses operator id: 5]
Output [1]: [d_date_sk#1]

(108) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#24, ws_item_sk#25, ws_quantity#64, ws_list_price#65]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(109) ColumnarToRow [codegen id : 80]
Input [4]: [ws_sold_date_sk#24, ws_item_sk#25, ws_quantity#64, ws_list_price#65]

(110) Filter [codegen id : 80]
Input [4]: [ws_sold_date_sk#24, ws_item_sk#25, ws_quantity#64, ws_list_price#65]
Condition : (isnotnull(ws_item_sk#25) AND isnotnull(ws_sold_date_sk#24))

(111) Exchange
Input [4]: [ws_sold_date_sk#24, ws_item_sk#25, ws_quantity#64, ws_list_price#65]
Arguments: hashpartitioning(ws_item_sk#25, 5), true, [id=#66]

(112) Sort [codegen id : 81]
Input [4]: [ws_sold_date_sk#24, ws_item_sk#25, ws_quantity#64, ws_list_price#65]
Arguments: [ws_item_sk#25 ASC NULLS FIRST], false, 0

(113) ReusedExchange [Reuses operator id: 67]
Output [1]: [ss_item_sk#29]

(114) Sort [codegen id : 97]
Input [1]: [ss_item_sk#29]
Arguments: [ss_item_sk#29 ASC NULLS FIRST], false, 0

(115) SortMergeJoin
Left keys [1]: [ws_item_sk#25]
Right keys [1]: [ss_item_sk#29]
Join condition: None

(116) BroadcastHashJoin [codegen id : 116]
Left keys [1]: [d_date_sk#1]
Right keys [1]: [ws_sold_date_sk#24]
Join condition: None

(117) Project [codegen id : 116]
Output [3]: [ws_item_sk#25, ws_quantity#64, ws_list_price#65]
Input [5]: [d_date_sk#1, ws_sold_date_sk#24, ws_item_sk#25, ws_quantity#64, ws_list_price#65]

(118) ReusedExchange [Reuses operator id: 80]
Output [4]: [i_item_sk#10, i_brand_id#11, i_class_id#12, i_category_id#13]

(119) BroadcastHashJoin [codegen id : 116]
Left keys [1]: [ws_item_sk#25]
Right keys [1]: [i_item_sk#10]
Join condition: None

(120) Project [codegen id : 116]
Output [5]: [ws_quantity#64, ws_list_price#65, i_brand_id#11, i_class_id#12, i_category_id#13]
Input [7]: [ws_item_sk#25, ws_quantity#64, ws_list_price#65, i_item_sk#10, i_brand_id#11, i_class_id#12, i_category_id#13]

(121) HashAggregate [codegen id : 116]
Input [5]: [ws_quantity#64, ws_list_price#65, i_brand_id#11, i_class_id#12, i_category_id#13]
Keys [3]: [i_brand_id#11, i_class_id#12, i_category_id#13]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#67, isEmpty#68, count#69]
Results [6]: [i_brand_id#11, i_class_id#12, i_category_id#13, sum#70, isEmpty#71, count#72]

(122) Exchange
Input [6]: [i_brand_id#11, i_class_id#12, i_category_id#13, sum#70, isEmpty#71, count#72]
Arguments: hashpartitioning(i_brand_id#11, i_class_id#12, i_category_id#13, 5), true, [id=#73]

(123) HashAggregate [codegen id : 117]
Input [6]: [i_brand_id#11, i_class_id#12, i_category_id#13, sum#70, isEmpty#71, count#72]
Keys [3]: [i_brand_id#11, i_class_id#12, i_category_id#13]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#74, count(1)#75]
Results [6]: [i_brand_id#11, i_class_id#12, i_category_id#13, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#74 AS sales#76, count(1)#75 AS number_sales#77, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#74 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#78]

(124) Filter [codegen id : 117]
Input [6]: [i_brand_id#11, i_class_id#12, i_category_id#13, sales#76, number_sales#77, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#78]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#78) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#78 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#45, [id=#46] as decimal(32,6))))

(125) Project [codegen id : 117]
Output [6]: [sales#76, number_sales#77, web AS channel#79, i_brand_id#11, i_class_id#12, i_category_id#13]
Input [6]: [i_brand_id#11, i_class_id#12, i_category_id#13, sales#76, number_sales#77, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#64 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#65 as decimal(12,2)))), DecimalType(18,2), true))#78]

(126) Union

(127) Expand [codegen id : 118]
Input [6]: [sales#42, number_sales#43, channel#47, i_brand_id#11, i_class_id#12, i_category_id#13]
Arguments: [List(sales#42, number_sales#43, channel#47, i_brand_id#11, i_class_id#12, i_category_id#13, 0), List(sales#42, number_sales#43, channel#47, i_brand_id#11, i_class_id#12, null, 1), List(sales#42, number_sales#43, channel#47, i_brand_id#11, null, null, 3), List(sales#42, number_sales#43, channel#47, null, null, null, 7), List(sales#42, number_sales#43, null, null, null, null, 15)], [sales#42, number_sales#43, channel#80, i_brand_id#81, i_class_id#82, i_category_id#83, spark_grouping_id#84]

(128) HashAggregate [codegen id : 118]
Input [7]: [sales#42, number_sales#43, channel#80, i_brand_id#81, i_class_id#82, i_category_id#83, spark_grouping_id#84]
Keys [5]: [channel#80, i_brand_id#81, i_class_id#82, i_category_id#83, spark_grouping_id#84]
Functions [2]: [partial_sum(sales#42), partial_sum(number_sales#43)]
Aggregate Attributes [3]: [sum#85, isEmpty#86, sum#87]
Results [8]: [channel#80, i_brand_id#81, i_class_id#82, i_category_id#83, spark_grouping_id#84, sum#88, isEmpty#89, sum#90]

(129) Exchange
Input [8]: [channel#80, i_brand_id#81, i_class_id#82, i_category_id#83, spark_grouping_id#84, sum#88, isEmpty#89, sum#90]
Arguments: hashpartitioning(channel#80, i_brand_id#81, i_class_id#82, i_category_id#83, spark_grouping_id#84, 5), true, [id=#91]

(130) HashAggregate [codegen id : 119]
Input [8]: [channel#80, i_brand_id#81, i_class_id#82, i_category_id#83, spark_grouping_id#84, sum#88, isEmpty#89, sum#90]
Keys [5]: [channel#80, i_brand_id#81, i_class_id#82, i_category_id#83, spark_grouping_id#84]
Functions [2]: [sum(sales#42), sum(number_sales#43)]
Aggregate Attributes [2]: [sum(sales#42)#92, sum(number_sales#43)#93]
Results [6]: [channel#80, i_brand_id#81, i_class_id#82, i_category_id#83, sum(sales#42)#92 AS sum(sales)#94, sum(number_sales#43)#93 AS sum(number_sales)#95]

(131) TakeOrderedAndProject
Input [6]: [channel#80, i_brand_id#81, i_class_id#82, i_category_id#83, sum(sales)#94, sum(number_sales)#95]
Arguments: 100, [channel#80 ASC NULLS FIRST, i_brand_id#81 ASC NULLS FIRST, i_class_id#82 ASC NULLS FIRST, i_category_id#83 ASC NULLS FIRST], [channel#80, i_brand_id#81, i_class_id#82, i_category_id#83, sum(sales)#94, sum(number_sales)#95]

===== Subqueries =====

Subquery:1 Hosting operator id = 86 Hosting Expression = Subquery scalar-subquery#45, [id=#46]
* HashAggregate (157)
+- Exchange (156)
   +- * HashAggregate (155)
      +- Union (154)
         :- * Project (141)
         :  +- * BroadcastHashJoin Inner BuildRight (140)
         :     :- * Filter (134)
         :     :  +- * ColumnarToRow (133)
         :     :     +- Scan parquet default.store_sales (132)
         :     +- BroadcastExchange (139)
         :        +- * Project (138)
         :           +- * Filter (137)
         :              +- * ColumnarToRow (136)
         :                 +- Scan parquet default.date_dim (135)
         :- * Project (147)
         :  +- * BroadcastHashJoin Inner BuildRight (146)
         :     :- * Filter (144)
         :     :  +- * ColumnarToRow (143)
         :     :     +- Scan parquet default.catalog_sales (142)
         :     +- ReusedExchange (145)
         +- * Project (153)
            +- * BroadcastHashJoin Inner BuildRight (152)
               :- * Filter (150)
               :  +- * ColumnarToRow (149)
               :     +- Scan parquet default.web_sales (148)
               +- ReusedExchange (151)


(132) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#5, ss_quantity#7, ss_list_price#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(133) ColumnarToRow [codegen id : 2]
Input [3]: [ss_sold_date_sk#5, ss_quantity#7, ss_list_price#8]

(134) Filter [codegen id : 2]
Input [3]: [ss_sold_date_sk#5, ss_quantity#7, ss_list_price#8]
Condition : isnotnull(ss_sold_date_sk#5)

(135) Scan parquet default.date_dim
Output [2]: [d_date_sk#1, d_year#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(136) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#1, d_year#2]

(137) Filter [codegen id : 1]
Input [2]: [d_date_sk#1, d_year#2]
Condition : (((isnotnull(d_year#2) AND (d_year#2 >= 1999)) AND (d_year#2 <= 2001)) AND isnotnull(d_date_sk#1))

(138) Project [codegen id : 1]
Output [1]: [d_date_sk#1]
Input [2]: [d_date_sk#1, d_year#2]

(139) BroadcastExchange
Input [1]: [d_date_sk#1]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#96]

(140) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#5]
Right keys [1]: [d_date_sk#1]
Join condition: None

(141) Project [codegen id : 2]
Output [2]: [ss_quantity#7 AS quantity#97, ss_list_price#8 AS list_price#98]
Input [4]: [ss_sold_date_sk#5, ss_quantity#7, ss_list_price#8, d_date_sk#1]

(142) Scan parquet default.catalog_sales
Output [3]: [cs_sold_date_sk#20, cs_quantity#48, cs_list_price#49]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(143) ColumnarToRow [codegen id : 4]
Input [3]: [cs_sold_date_sk#20, cs_quantity#48, cs_list_price#49]

(144) Filter [codegen id : 4]
Input [3]: [cs_sold_date_sk#20, cs_quantity#48, cs_list_price#49]
Condition : isnotnull(cs_sold_date_sk#20)

(145) ReusedExchange [Reuses operator id: 139]
Output [1]: [d_date_sk#1]

(146) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#20]
Right keys [1]: [d_date_sk#1]
Join condition: None

(147) Project [codegen id : 4]
Output [2]: [cs_quantity#48 AS quantity#99, cs_list_price#49 AS list_price#100]
Input [4]: [cs_sold_date_sk#20, cs_quantity#48, cs_list_price#49, d_date_sk#1]

(148) Scan parquet default.web_sales
Output [3]: [ws_sold_date_sk#24, ws_quantity#64, ws_list_price#65]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(149) ColumnarToRow [codegen id : 6]
Input [3]: [ws_sold_date_sk#24, ws_quantity#64, ws_list_price#65]

(150) Filter [codegen id : 6]
Input [3]: [ws_sold_date_sk#24, ws_quantity#64, ws_list_price#65]
Condition : isnotnull(ws_sold_date_sk#24)

(151) ReusedExchange [Reuses operator id: 139]
Output [1]: [d_date_sk#1]

(152) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#24]
Right keys [1]: [d_date_sk#1]
Join condition: None

(153) Project [codegen id : 6]
Output [2]: [ws_quantity#64 AS quantity#101, ws_list_price#65 AS list_price#102]
Input [4]: [ws_sold_date_sk#24, ws_quantity#64, ws_list_price#65, d_date_sk#1]

(154) Union

(155) HashAggregate [codegen id : 7]
Input [2]: [quantity#97, list_price#98]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#97 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#98 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#103, count#104]
Results [2]: [sum#105, count#106]

(156) Exchange
Input [2]: [sum#105, count#106]
Arguments: SinglePartition, true, [id=#107]

(157) HashAggregate [codegen id : 8]
Input [2]: [sum#105, count#106]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#97 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#98 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#97 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#98 as decimal(12,2)))), DecimalType(18,2), true))#108]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#97 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#98 as decimal(12,2)))), DecimalType(18,2), true))#108 AS average_sales#109]

Subquery:2 Hosting operator id = 105 Hosting Expression = ReusedSubquery Subquery scalar-subquery#45, [id=#46]

Subquery:3 Hosting operator id = 124 Hosting Expression = ReusedSubquery Subquery scalar-subquery#45, [id=#46]


