== Physical Plan ==
TakeOrderedAndProject (133)
+- * HashAggregate (132)
   +- Exchange (131)
      +- * HashAggregate (130)
         +- * Expand (129)
            +- Union (128)
               :- * Project (89)
               :  +- * Filter (88)
               :     +- * HashAggregate (87)
               :        +- Exchange (86)
               :           +- * HashAggregate (85)
               :              +- * Project (84)
               :                 +- * BroadcastHashJoin Inner BuildRight (83)
               :                    :- * Project (73)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (72)
               :                    :     :- SortMergeJoin LeftSemi (66)
               :                    :     :  :- * Sort (5)
               :                    :     :  :  +- Exchange (4)
               :                    :     :  :     +- * Filter (3)
               :                    :     :  :        +- * ColumnarToRow (2)
               :                    :     :  :           +- Scan parquet default.store_sales (1)
               :                    :     :  +- * Sort (65)
               :                    :     :     +- Exchange (64)
               :                    :     :        +- * Project (63)
               :                    :     :           +- * BroadcastHashJoin Inner BuildRight (62)
               :                    :     :              :- * Filter (8)
               :                    :     :              :  +- * ColumnarToRow (7)
               :                    :     :              :     +- Scan parquet default.item (6)
               :                    :     :              +- BroadcastExchange (61)
               :                    :     :                 +- * BroadcastHashJoin LeftSemi BuildRight (60)
               :                    :     :                    :- * HashAggregate (46)
               :                    :     :                    :  +- * HashAggregate (45)
               :                    :     :                    :     +- * BroadcastHashJoin LeftSemi BuildRight (44)
               :                    :     :                    :        :- * HashAggregate (27)
               :                    :     :                    :        :  +- Exchange (26)
               :                    :     :                    :        :     +- * HashAggregate (25)
               :                    :     :                    :        :        +- * Project (24)
               :                    :     :                    :        :           +- * BroadcastHashJoin Inner BuildRight (23)
               :                    :     :                    :        :              :- * Project (18)
               :                    :     :                    :        :              :  +- * BroadcastHashJoin Inner BuildRight (17)
               :                    :     :                    :        :              :     :- * Filter (11)
               :                    :     :                    :        :              :     :  +- * ColumnarToRow (10)
               :                    :     :                    :        :              :     :     +- Scan parquet default.store_sales (9)
               :                    :     :                    :        :              :     +- BroadcastExchange (16)
               :                    :     :                    :        :              :        +- * Project (15)
               :                    :     :                    :        :              :           +- * Filter (14)
               :                    :     :                    :        :              :              +- * ColumnarToRow (13)
               :                    :     :                    :        :              :                 +- Scan parquet default.date_dim (12)
               :                    :     :                    :        :              +- BroadcastExchange (22)
               :                    :     :                    :        :                 +- * Filter (21)
               :                    :     :                    :        :                    +- * ColumnarToRow (20)
               :                    :     :                    :        :                       +- Scan parquet default.item (19)
               :                    :     :                    :        +- BroadcastExchange (43)
               :                    :     :                    :           +- * HashAggregate (42)
               :                    :     :                    :              +- Exchange (41)
               :                    :     :                    :                 +- * HashAggregate (40)
               :                    :     :                    :                    +- * Project (39)
               :                    :     :                    :                       +- * BroadcastHashJoin Inner BuildRight (38)
               :                    :     :                    :                          :- * Project (33)
               :                    :     :                    :                          :  +- * BroadcastHashJoin Inner BuildRight (32)
               :                    :     :                    :                          :     :- * Filter (30)
               :                    :     :                    :                          :     :  +- * ColumnarToRow (29)
               :                    :     :                    :                          :     :     +- Scan parquet default.catalog_sales (28)
               :                    :     :                    :                          :     +- ReusedExchange (31)
               :                    :     :                    :                          +- BroadcastExchange (37)
               :                    :     :                    :                             +- * Filter (36)
               :                    :     :                    :                                +- * ColumnarToRow (35)
               :                    :     :                    :                                   +- Scan parquet default.item (34)
               :                    :     :                    +- BroadcastExchange (59)
               :                    :     :                       +- * HashAggregate (58)
               :                    :     :                          +- Exchange (57)
               :                    :     :                             +- * HashAggregate (56)
               :                    :     :                                +- * Project (55)
               :                    :     :                                   +- * BroadcastHashJoin Inner BuildRight (54)
               :                    :     :                                      :- * Project (52)
               :                    :     :                                      :  +- * BroadcastHashJoin Inner BuildRight (51)
               :                    :     :                                      :     :- * Filter (49)
               :                    :     :                                      :     :  +- * ColumnarToRow (48)
               :                    :     :                                      :     :     +- Scan parquet default.web_sales (47)
               :                    :     :                                      :     +- ReusedExchange (50)
               :                    :     :                                      +- ReusedExchange (53)
               :                    :     +- BroadcastExchange (71)
               :                    :        +- * Project (70)
               :                    :           +- * Filter (69)
               :                    :              +- * ColumnarToRow (68)
               :                    :                 +- Scan parquet default.date_dim (67)
               :                    +- BroadcastExchange (82)
               :                       +- SortMergeJoin LeftSemi (81)
               :                          :- * Sort (78)
               :                          :  +- Exchange (77)
               :                          :     +- * Filter (76)
               :                          :        +- * ColumnarToRow (75)
               :                          :           +- Scan parquet default.item (74)
               :                          +- * Sort (80)
               :                             +- ReusedExchange (79)
               :- * Project (108)
               :  +- * Filter (107)
               :     +- * HashAggregate (106)
               :        +- Exchange (105)
               :           +- * HashAggregate (104)
               :              +- * Project (103)
               :                 +- * BroadcastHashJoin Inner BuildRight (102)
               :                    :- * Project (100)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (99)
               :                    :     :- SortMergeJoin LeftSemi (97)
               :                    :     :  :- * Sort (94)
               :                    :     :  :  +- Exchange (93)
               :                    :     :  :     +- * Filter (92)
               :                    :     :  :        +- * ColumnarToRow (91)
               :                    :     :  :           +- Scan parquet default.catalog_sales (90)
               :                    :     :  +- * Sort (96)
               :                    :     :     +- ReusedExchange (95)
               :                    :     +- ReusedExchange (98)
               :                    +- ReusedExchange (101)
               +- * Project (127)
                  +- * Filter (126)
                     +- * HashAggregate (125)
                        +- Exchange (124)
                           +- * HashAggregate (123)
                              +- * Project (122)
                                 +- * BroadcastHashJoin Inner BuildRight (121)
                                    :- * Project (119)
                                    :  +- * BroadcastHashJoin Inner BuildRight (118)
                                    :     :- SortMergeJoin LeftSemi (116)
                                    :     :  :- * Sort (113)
                                    :     :  :  +- Exchange (112)
                                    :     :  :     +- * Filter (111)
                                    :     :  :        +- * ColumnarToRow (110)
                                    :     :  :           +- Scan parquet default.web_sales (109)
                                    :     :  +- * Sort (115)
                                    :     :     +- ReusedExchange (114)
                                    :     +- ReusedExchange (117)
                                    +- ReusedExchange (120)


(1) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(4) Exchange
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Arguments: hashpartitioning(ss_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#5]

(5) Sort [codegen id : 2]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Arguments: [ss_item_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 15]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(8) Filter [codegen id : 15]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(9) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(10) ColumnarToRow [codegen id : 5]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]

(11) Filter [codegen id : 5]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(12) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(13) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]

(14) Filter [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1999)) AND (d_year#11 <= 2001)) AND isnotnull(d_date_sk#10))

(15) Project [codegen id : 3]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(16) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(17) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(18) Project [codegen id : 5]
Output [1]: [ss_item_sk#2]
Input [3]: [ss_sold_date_sk#1, ss_item_sk#2, d_date_sk#10]

(19) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(20) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(21) Filter [codegen id : 4]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : (((isnotnull(i_item_sk#6) AND isnotnull(i_brand_id#7)) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(22) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13]

(23) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#6]
Join condition: None

(24) Project [codegen id : 5]
Output [3]: [i_brand_id#7 AS brand_id#14, i_class_id#8 AS class_id#15, i_category_id#9 AS category_id#16]
Input [5]: [ss_item_sk#2, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(25) HashAggregate [codegen id : 5]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(26) Exchange
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: hashpartitioning(brand_id#14, class_id#15, category_id#16, 5), ENSURE_REQUIREMENTS, [id=#17]

(27) HashAggregate [codegen id : 14]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(28) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#18, cs_item_sk#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int>

(29) ColumnarToRow [codegen id : 8]
Input [2]: [cs_sold_date_sk#18, cs_item_sk#19]

(30) Filter [codegen id : 8]
Input [2]: [cs_sold_date_sk#18, cs_item_sk#19]
Condition : (isnotnull(cs_item_sk#19) AND isnotnull(cs_sold_date_sk#18))

(31) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#10]

(32) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#10]
Join condition: None

(33) Project [codegen id : 8]
Output [1]: [cs_item_sk#19]
Input [3]: [cs_sold_date_sk#18, cs_item_sk#19, d_date_sk#10]

(34) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(35) ColumnarToRow [codegen id : 7]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(36) Filter [codegen id : 7]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : isnotnull(i_item_sk#6)

(37) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#20]

(38) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [i_item_sk#6]
Join condition: None

(39) Project [codegen id : 8]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [cs_item_sk#19, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(40) HashAggregate [codegen id : 8]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]

(41) Exchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#21]

(42) HashAggregate [codegen id : 9]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]

(43) BroadcastExchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#22]

(44) BroadcastHashJoin [codegen id : 14]
Left keys [6]: [coalesce(brand_id#14, 0), isnull(brand_id#14), coalesce(class_id#15, 0), isnull(class_id#15), coalesce(category_id#16, 0), isnull(category_id#16)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join condition: None

(45) HashAggregate [codegen id : 14]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(46) HashAggregate [codegen id : 14]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(47) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#23, ws_item_sk#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int>

(48) ColumnarToRow [codegen id : 12]
Input [2]: [ws_sold_date_sk#23, ws_item_sk#24]

(49) Filter [codegen id : 12]
Input [2]: [ws_sold_date_sk#23, ws_item_sk#24]
Condition : (isnotnull(ws_item_sk#24) AND isnotnull(ws_sold_date_sk#23))

(50) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#10]

(51) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ws_sold_date_sk#23]
Right keys [1]: [d_date_sk#10]
Join condition: None

(52) Project [codegen id : 12]
Output [1]: [ws_item_sk#24]
Input [3]: [ws_sold_date_sk#23, ws_item_sk#24, d_date_sk#10]

(53) ReusedExchange [Reuses operator id: 37]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(54) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ws_item_sk#24]
Right keys [1]: [i_item_sk#6]
Join condition: None

(55) Project [codegen id : 12]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [ws_item_sk#24, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(56) HashAggregate [codegen id : 12]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]

(57) Exchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#25]

(58) HashAggregate [codegen id : 13]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]

(59) BroadcastExchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#26]

(60) BroadcastHashJoin [codegen id : 14]
Left keys [6]: [coalesce(brand_id#14, 0), isnull(brand_id#14), coalesce(class_id#15, 0), isnull(class_id#15), coalesce(category_id#16, 0), isnull(category_id#16)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join condition: None

(61) BroadcastExchange
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#27]

(62) BroadcastHashJoin [codegen id : 15]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#14, class_id#15, category_id#16]
Join condition: None

(63) Project [codegen id : 15]
Output [1]: [i_item_sk#6 AS ss_item_sk#28]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#14, class_id#15, category_id#16]

(64) Exchange
Input [1]: [ss_item_sk#28]
Arguments: hashpartitioning(ss_item_sk#28, 5), ENSURE_REQUIREMENTS, [id=#29]

(65) Sort [codegen id : 16]
Input [1]: [ss_item_sk#28]
Arguments: [ss_item_sk#28 ASC NULLS FIRST], false, 0

(66) SortMergeJoin
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [ss_item_sk#28]
Join condition: None

(67) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(68) ColumnarToRow [codegen id : 17]
Input [3]: [d_date_sk#10, d_year#11, d_moy#30]

(69) Filter [codegen id : 17]
Input [3]: [d_date_sk#10, d_year#11, d_moy#30]
Condition : ((((isnotnull(d_year#11) AND isnotnull(d_moy#30)) AND (d_year#11 = 2001)) AND (d_moy#30 = 11)) AND isnotnull(d_date_sk#10))

(70) Project [codegen id : 17]
Output [1]: [d_date_sk#10]
Input [3]: [d_date_sk#10, d_year#11, d_moy#30]

(71) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#31]

(72) BroadcastHashJoin [codegen id : 34]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(73) Project [codegen id : 34]
Output [3]: [ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4, d_date_sk#10]

(74) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(75) ColumnarToRow [codegen id : 18]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(76) Filter [codegen id : 18]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : isnotnull(i_item_sk#6)

(77) Exchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(i_item_sk#6, 5), ENSURE_REQUIREMENTS, [id=#32]

(78) Sort [codegen id : 19]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: [i_item_sk#6 ASC NULLS FIRST], false, 0

(79) ReusedExchange [Reuses operator id: 64]
Output [1]: [ss_item_sk#28]

(80) Sort [codegen id : 33]
Input [1]: [ss_item_sk#28]
Arguments: [ss_item_sk#28 ASC NULLS FIRST], false, 0

(81) SortMergeJoin
Left keys [1]: [i_item_sk#6]
Right keys [1]: [ss_item_sk#28]
Join condition: None

(82) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#33]

(83) BroadcastHashJoin [codegen id : 34]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#6]
Join condition: None

(84) Project [codegen id : 34]
Output [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ss_item_sk#2, ss_quantity#3, ss_list_price#4, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(85) HashAggregate [codegen id : 34]
Input [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#34, isEmpty#35, count#36]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#37, isEmpty#38, count#39]

(86) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#37, isEmpty#38, count#39]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#40]

(87) HashAggregate [codegen id : 35]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#37, isEmpty#38, count#39]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#41, count(1)#42]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#41 AS sales#43, count(1)#42 AS number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#41 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#45]

(88) Filter [codegen id : 35]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#45]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#45) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#45 as decimal(32,6)) > cast(Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(89) Project [codegen id : 35]
Output [6]: [sales#43, number_sales#44, store AS channel#48, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#43, number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#45]

(90) Scan parquet default.catalog_sales
Output [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#49, cs_list_price#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(91) ColumnarToRow [codegen id : 36]
Input [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#49, cs_list_price#50]

(92) Filter [codegen id : 36]
Input [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#49, cs_list_price#50]
Condition : (isnotnull(cs_item_sk#19) AND isnotnull(cs_sold_date_sk#18))

(93) Exchange
Input [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#49, cs_list_price#50]
Arguments: hashpartitioning(cs_item_sk#19, 5), ENSURE_REQUIREMENTS, [id=#51]

(94) Sort [codegen id : 37]
Input [4]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#49, cs_list_price#50]
Arguments: [cs_item_sk#19 ASC NULLS FIRST], false, 0

(95) ReusedExchange [Reuses operator id: 64]
Output [1]: [ss_item_sk#28]

(96) Sort [codegen id : 51]
Input [1]: [ss_item_sk#28]
Arguments: [ss_item_sk#28 ASC NULLS FIRST], false, 0

(97) SortMergeJoin
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [ss_item_sk#28]
Join condition: None

(98) ReusedExchange [Reuses operator id: 71]
Output [1]: [d_date_sk#10]

(99) BroadcastHashJoin [codegen id : 69]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#10]
Join condition: None

(100) Project [codegen id : 69]
Output [3]: [cs_item_sk#19, cs_quantity#49, cs_list_price#50]
Input [5]: [cs_sold_date_sk#18, cs_item_sk#19, cs_quantity#49, cs_list_price#50, d_date_sk#10]

(101) ReusedExchange [Reuses operator id: 82]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(102) BroadcastHashJoin [codegen id : 69]
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [i_item_sk#6]
Join condition: None

(103) Project [codegen id : 69]
Output [5]: [cs_quantity#49, cs_list_price#50, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [cs_item_sk#19, cs_quantity#49, cs_list_price#50, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(104) HashAggregate [codegen id : 69]
Input [5]: [cs_quantity#49, cs_list_price#50, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#52, isEmpty#53, count#54]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#55, isEmpty#56, count#57]

(105) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#55, isEmpty#56, count#57]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#58]

(106) HashAggregate [codegen id : 70]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#55, isEmpty#56, count#57]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#59, count(1)#60]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#59 AS sales#61, count(1)#60 AS number_sales#62, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#59 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#63]

(107) Filter [codegen id : 70]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#61, number_sales#62, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#63]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#63) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#63 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(108) Project [codegen id : 70]
Output [6]: [sales#61, number_sales#62, catalog AS channel#64, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#61, number_sales#62, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#63]

(109) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#23, ws_item_sk#24, ws_quantity#65, ws_list_price#66]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(110) ColumnarToRow [codegen id : 71]
Input [4]: [ws_sold_date_sk#23, ws_item_sk#24, ws_quantity#65, ws_list_price#66]

(111) Filter [codegen id : 71]
Input [4]: [ws_sold_date_sk#23, ws_item_sk#24, ws_quantity#65, ws_list_price#66]
Condition : (isnotnull(ws_item_sk#24) AND isnotnull(ws_sold_date_sk#23))

(112) Exchange
Input [4]: [ws_sold_date_sk#23, ws_item_sk#24, ws_quantity#65, ws_list_price#66]
Arguments: hashpartitioning(ws_item_sk#24, 5), ENSURE_REQUIREMENTS, [id=#67]

(113) Sort [codegen id : 72]
Input [4]: [ws_sold_date_sk#23, ws_item_sk#24, ws_quantity#65, ws_list_price#66]
Arguments: [ws_item_sk#24 ASC NULLS FIRST], false, 0

(114) ReusedExchange [Reuses operator id: 64]
Output [1]: [ss_item_sk#28]

(115) Sort [codegen id : 86]
Input [1]: [ss_item_sk#28]
Arguments: [ss_item_sk#28 ASC NULLS FIRST], false, 0

(116) SortMergeJoin
Left keys [1]: [ws_item_sk#24]
Right keys [1]: [ss_item_sk#28]
Join condition: None

(117) ReusedExchange [Reuses operator id: 71]
Output [1]: [d_date_sk#10]

(118) BroadcastHashJoin [codegen id : 104]
Left keys [1]: [ws_sold_date_sk#23]
Right keys [1]: [d_date_sk#10]
Join condition: None

(119) Project [codegen id : 104]
Output [3]: [ws_item_sk#24, ws_quantity#65, ws_list_price#66]
Input [5]: [ws_sold_date_sk#23, ws_item_sk#24, ws_quantity#65, ws_list_price#66, d_date_sk#10]

(120) ReusedExchange [Reuses operator id: 82]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(121) BroadcastHashJoin [codegen id : 104]
Left keys [1]: [ws_item_sk#24]
Right keys [1]: [i_item_sk#6]
Join condition: None

(122) Project [codegen id : 104]
Output [5]: [ws_quantity#65, ws_list_price#66, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ws_item_sk#24, ws_quantity#65, ws_list_price#66, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(123) HashAggregate [codegen id : 104]
Input [5]: [ws_quantity#65, ws_list_price#66, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#68, isEmpty#69, count#70]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#71, isEmpty#72, count#73]

(124) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#71, isEmpty#72, count#73]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#74]

(125) HashAggregate [codegen id : 105]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#71, isEmpty#72, count#73]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#75, count(1)#76]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#75 AS sales#77, count(1)#76 AS number_sales#78, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#75 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#79]

(126) Filter [codegen id : 105]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#77, number_sales#78, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#79]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#79) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#79 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(127) Project [codegen id : 105]
Output [6]: [sales#77, number_sales#78, web AS channel#80, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#77, number_sales#78, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#79]

(128) Union

(129) Expand [codegen id : 106]
Input [6]: [sales#43, number_sales#44, channel#48, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: [List(sales#43, number_sales#44, channel#48, i_brand_id#7, i_class_id#8, i_category_id#9, 0), List(sales#43, number_sales#44, channel#48, i_brand_id#7, i_class_id#8, null, 1), List(sales#43, number_sales#44, channel#48, i_brand_id#7, null, null, 3), List(sales#43, number_sales#44, channel#48, null, null, null, 7), List(sales#43, number_sales#44, null, null, null, null, 15)], [sales#43, number_sales#44, channel#81, i_brand_id#82, i_class_id#83, i_category_id#84, spark_grouping_id#85]

(130) HashAggregate [codegen id : 106]
Input [7]: [sales#43, number_sales#44, channel#81, i_brand_id#82, i_class_id#83, i_category_id#84, spark_grouping_id#85]
Keys [5]: [channel#81, i_brand_id#82, i_class_id#83, i_category_id#84, spark_grouping_id#85]
Functions [2]: [partial_sum(sales#43), partial_sum(number_sales#44)]
Aggregate Attributes [3]: [sum#86, isEmpty#87, sum#88]
Results [8]: [channel#81, i_brand_id#82, i_class_id#83, i_category_id#84, spark_grouping_id#85, sum#89, isEmpty#90, sum#91]

(131) Exchange
Input [8]: [channel#81, i_brand_id#82, i_class_id#83, i_category_id#84, spark_grouping_id#85, sum#89, isEmpty#90, sum#91]
Arguments: hashpartitioning(channel#81, i_brand_id#82, i_class_id#83, i_category_id#84, spark_grouping_id#85, 5), ENSURE_REQUIREMENTS, [id=#92]

(132) HashAggregate [codegen id : 107]
Input [8]: [channel#81, i_brand_id#82, i_class_id#83, i_category_id#84, spark_grouping_id#85, sum#89, isEmpty#90, sum#91]
Keys [5]: [channel#81, i_brand_id#82, i_class_id#83, i_category_id#84, spark_grouping_id#85]
Functions [2]: [sum(sales#43), sum(number_sales#44)]
Aggregate Attributes [2]: [sum(sales#43)#93, sum(number_sales#44)#94]
Results [6]: [channel#81, i_brand_id#82, i_class_id#83, i_category_id#84, sum(sales#43)#93 AS sum(sales)#95, sum(number_sales#44)#94 AS sum(number_sales)#96]

(133) TakeOrderedAndProject
Input [6]: [channel#81, i_brand_id#82, i_class_id#83, i_category_id#84, sum(sales)#95, sum(number_sales)#96]
Arguments: 100, [channel#81 ASC NULLS FIRST, i_brand_id#82 ASC NULLS FIRST, i_class_id#83 ASC NULLS FIRST, i_category_id#84 ASC NULLS FIRST], [channel#81, i_brand_id#82, i_class_id#83, i_category_id#84, sum(sales)#95, sum(number_sales)#96]

===== Subqueries =====

Subquery:1 Hosting operator id = 88 Hosting Expression = Subquery scalar-subquery#46, [id=#47]
* HashAggregate (159)
+- Exchange (158)
   +- * HashAggregate (157)
      +- Union (156)
         :- * Project (143)
         :  +- * BroadcastHashJoin Inner BuildRight (142)
         :     :- * Filter (136)
         :     :  +- * ColumnarToRow (135)
         :     :     +- Scan parquet default.store_sales (134)
         :     +- BroadcastExchange (141)
         :        +- * Project (140)
         :           +- * Filter (139)
         :              +- * ColumnarToRow (138)
         :                 +- Scan parquet default.date_dim (137)
         :- * Project (149)
         :  +- * BroadcastHashJoin Inner BuildRight (148)
         :     :- * Filter (146)
         :     :  +- * ColumnarToRow (145)
         :     :     +- Scan parquet default.catalog_sales (144)
         :     +- ReusedExchange (147)
         +- * Project (155)
            +- * BroadcastHashJoin Inner BuildRight (154)
               :- * Filter (152)
               :  +- * ColumnarToRow (151)
               :     +- Scan parquet default.web_sales (150)
               +- ReusedExchange (153)


(134) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(135) ColumnarToRow [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]

(136) Filter [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Condition : isnotnull(ss_sold_date_sk#1)

(137) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(138) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]

(139) Filter [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1999)) AND (d_year#11 <= 2001)) AND isnotnull(d_date_sk#10))

(140) Project [codegen id : 1]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(141) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#97]

(142) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(143) Project [codegen id : 2]
Output [2]: [ss_quantity#3 AS quantity#98, ss_list_price#4 AS list_price#99]
Input [4]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, d_date_sk#10]

(144) Scan parquet default.catalog_sales
Output [3]: [cs_sold_date_sk#18, cs_quantity#49, cs_list_price#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(145) ColumnarToRow [codegen id : 4]
Input [3]: [cs_sold_date_sk#18, cs_quantity#49, cs_list_price#50]

(146) Filter [codegen id : 4]
Input [3]: [cs_sold_date_sk#18, cs_quantity#49, cs_list_price#50]
Condition : isnotnull(cs_sold_date_sk#18)

(147) ReusedExchange [Reuses operator id: 141]
Output [1]: [d_date_sk#10]

(148) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#10]
Join condition: None

(149) Project [codegen id : 4]
Output [2]: [cs_quantity#49 AS quantity#100, cs_list_price#50 AS list_price#101]
Input [4]: [cs_sold_date_sk#18, cs_quantity#49, cs_list_price#50, d_date_sk#10]

(150) Scan parquet default.web_sales
Output [3]: [ws_sold_date_sk#23, ws_quantity#65, ws_list_price#66]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(151) ColumnarToRow [codegen id : 6]
Input [3]: [ws_sold_date_sk#23, ws_quantity#65, ws_list_price#66]

(152) Filter [codegen id : 6]
Input [3]: [ws_sold_date_sk#23, ws_quantity#65, ws_list_price#66]
Condition : isnotnull(ws_sold_date_sk#23)

(153) ReusedExchange [Reuses operator id: 141]
Output [1]: [d_date_sk#10]

(154) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#23]
Right keys [1]: [d_date_sk#10]
Join condition: None

(155) Project [codegen id : 6]
Output [2]: [ws_quantity#65 AS quantity#102, ws_list_price#66 AS list_price#103]
Input [4]: [ws_sold_date_sk#23, ws_quantity#65, ws_list_price#66, d_date_sk#10]

(156) Union

(157) HashAggregate [codegen id : 7]
Input [2]: [quantity#98, list_price#99]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#98 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#99 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#104, count#105]
Results [2]: [sum#106, count#107]

(158) Exchange
Input [2]: [sum#106, count#107]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#108]

(159) HashAggregate [codegen id : 8]
Input [2]: [sum#106, count#107]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#98 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#99 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#98 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#99 as decimal(12,2)))), DecimalType(18,2), true))#109]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#98 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#99 as decimal(12,2)))), DecimalType(18,2), true))#109 AS average_sales#110]

Subquery:2 Hosting operator id = 107 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:3 Hosting operator id = 126 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]


