== Physical Plan ==
TakeOrderedAndProject (147)
+- * HashAggregate (146)
   +- Exchange (145)
      +- * HashAggregate (144)
         +- * Expand (143)
            +- Union (142)
               :- * Project (93)
               :  +- * Filter (92)
               :     +- * HashAggregate (91)
               :        +- Exchange (90)
               :           +- * HashAggregate (89)
               :              +- * Project (88)
               :                 +- * BroadcastHashJoin Inner BuildRight (87)
               :                    :- * Project (81)
               :                    :  +- * BroadcastHashJoin Inner BuildLeft (80)
               :                    :     :- BroadcastExchange (71)
               :                    :     :  +- SortMergeJoin LeftSemi (70)
               :                    :     :     :- * Sort (5)
               :                    :     :     :  +- Exchange (4)
               :                    :     :     :     +- * Filter (3)
               :                    :     :     :        +- * ColumnarToRow (2)
               :                    :     :     :           +- Scan parquet default.store_sales (1)
               :                    :     :     +- * Sort (69)
               :                    :     :        +- Exchange (68)
               :                    :     :           +- * Project (67)
               :                    :     :              +- * BroadcastHashJoin Inner BuildLeft (66)
               :                    :     :                 :- BroadcastExchange (9)
               :                    :     :                 :  +- * Filter (8)
               :                    :     :                 :     +- * ColumnarToRow (7)
               :                    :     :                 :        +- Scan parquet default.item (6)
               :                    :     :                 +- * HashAggregate (65)
               :                    :     :                    +- Exchange (64)
               :                    :     :                       +- * HashAggregate (63)
               :                    :     :                          +- SortMergeJoin LeftSemi (62)
               :                    :     :                             :- * Sort (47)
               :                    :     :                             :  +- Exchange (46)
               :                    :     :                             :     +- * HashAggregate (45)
               :                    :     :                             :        +- Exchange (44)
               :                    :     :                             :           +- * HashAggregate (43)
               :                    :     :                             :              +- SortMergeJoin LeftSemi (42)
               :                    :     :                             :                 :- * Sort (27)
               :                    :     :                             :                 :  +- Exchange (26)
               :                    :     :                             :                 :     +- * Project (25)
               :                    :     :                             :                 :        +- * BroadcastHashJoin Inner BuildRight (24)
               :                    :     :                             :                 :           :- * Project (18)
               :                    :     :                             :                 :           :  +- * BroadcastHashJoin Inner BuildLeft (17)
               :                    :     :                             :                 :           :     :- BroadcastExchange (13)
               :                    :     :                             :                 :           :     :  +- * Filter (12)
               :                    :     :                             :                 :           :     :     +- * ColumnarToRow (11)
               :                    :     :                             :                 :           :     :        +- Scan parquet default.store_sales (10)
               :                    :     :                             :                 :           :     +- * Filter (16)
               :                    :     :                             :                 :           :        +- * ColumnarToRow (15)
               :                    :     :                             :                 :           :           +- Scan parquet default.item (14)
               :                    :     :                             :                 :           +- BroadcastExchange (23)
               :                    :     :                             :                 :              +- * Project (22)
               :                    :     :                             :                 :                 +- * Filter (21)
               :                    :     :                             :                 :                    +- * ColumnarToRow (20)
               :                    :     :                             :                 :                       +- Scan parquet default.date_dim (19)
               :                    :     :                             :                 +- * Sort (41)
               :                    :     :                             :                    +- Exchange (40)
               :                    :     :                             :                       +- * Project (39)
               :                    :     :                             :                          +- * BroadcastHashJoin Inner BuildRight (38)
               :                    :     :                             :                             :- * Project (36)
               :                    :     :                             :                             :  +- * BroadcastHashJoin Inner BuildLeft (35)
               :                    :     :                             :                             :     :- BroadcastExchange (31)
               :                    :     :                             :                             :     :  +- * Filter (30)
               :                    :     :                             :                             :     :     +- * ColumnarToRow (29)
               :                    :     :                             :                             :     :        +- Scan parquet default.catalog_sales (28)
               :                    :     :                             :                             :     +- * Filter (34)
               :                    :     :                             :                             :        +- * ColumnarToRow (33)
               :                    :     :                             :                             :           +- Scan parquet default.item (32)
               :                    :     :                             :                             +- ReusedExchange (37)
               :                    :     :                             +- * Sort (61)
               :                    :     :                                +- Exchange (60)
               :                    :     :                                   +- * Project (59)
               :                    :     :                                      +- * BroadcastHashJoin Inner BuildRight (58)
               :                    :     :                                         :- * Project (56)
               :                    :     :                                         :  +- * BroadcastHashJoin Inner BuildLeft (55)
               :                    :     :                                         :     :- BroadcastExchange (51)
               :                    :     :                                         :     :  +- * Filter (50)
               :                    :     :                                         :     :     +- * ColumnarToRow (49)
               :                    :     :                                         :     :        +- Scan parquet default.web_sales (48)
               :                    :     :                                         :     +- * Filter (54)
               :                    :     :                                         :        +- * ColumnarToRow (53)
               :                    :     :                                         :           +- Scan parquet default.item (52)
               :                    :     :                                         +- ReusedExchange (57)
               :                    :     +- SortMergeJoin LeftSemi (79)
               :                    :        :- * Sort (76)
               :                    :        :  +- Exchange (75)
               :                    :        :     +- * Filter (74)
               :                    :        :        +- * ColumnarToRow (73)
               :                    :        :           +- Scan parquet default.item (72)
               :                    :        +- * Sort (78)
               :                    :           +- ReusedExchange (77)
               :                    +- BroadcastExchange (86)
               :                       +- * Project (85)
               :                          +- * Filter (84)
               :                             +- * ColumnarToRow (83)
               :                                +- Scan parquet default.date_dim (82)
               :- * Project (117)
               :  +- * Filter (116)
               :     +- * HashAggregate (115)
               :        +- Exchange (114)
               :           +- * HashAggregate (113)
               :              +- * Project (112)
               :                 +- * BroadcastHashJoin Inner BuildRight (111)
               :                    :- * Project (109)
               :                    :  +- * BroadcastHashJoin Inner BuildLeft (108)
               :                    :     :- BroadcastExchange (102)
               :                    :     :  +- SortMergeJoin LeftSemi (101)
               :                    :     :     :- * Sort (98)
               :                    :     :     :  +- Exchange (97)
               :                    :     :     :     +- * Filter (96)
               :                    :     :     :        +- * ColumnarToRow (95)
               :                    :     :     :           +- Scan parquet default.catalog_sales (94)
               :                    :     :     +- * Sort (100)
               :                    :     :        +- ReusedExchange (99)
               :                    :     +- SortMergeJoin LeftSemi (107)
               :                    :        :- * Sort (104)
               :                    :        :  +- ReusedExchange (103)
               :                    :        +- * Sort (106)
               :                    :           +- ReusedExchange (105)
               :                    +- ReusedExchange (110)
               +- * Project (141)
                  +- * Filter (140)
                     +- * HashAggregate (139)
                        +- Exchange (138)
                           +- * HashAggregate (137)
                              +- * Project (136)
                                 +- * BroadcastHashJoin Inner BuildRight (135)
                                    :- * Project (133)
                                    :  +- * BroadcastHashJoin Inner BuildLeft (132)
                                    :     :- BroadcastExchange (126)
                                    :     :  +- SortMergeJoin LeftSemi (125)
                                    :     :     :- * Sort (122)
                                    :     :     :  +- Exchange (121)
                                    :     :     :     +- * Filter (120)
                                    :     :     :        +- * ColumnarToRow (119)
                                    :     :     :           +- Scan parquet default.web_sales (118)
                                    :     :     +- * Sort (124)
                                    :     :        +- ReusedExchange (123)
                                    :     +- SortMergeJoin LeftSemi (131)
                                    :        :- * Sort (128)
                                    :        :  +- ReusedExchange (127)
                                    :        +- * Sort (130)
                                    :           +- ReusedExchange (129)
                                    +- ReusedExchange (134)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 3]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(8) Filter [codegen id : 3]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(9) BroadcastExchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(input[1, int, false], input[2, int, false], input[3, int, false]),false), [id=#11]

(10) Scan parquet default.store_sales
Output [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(11) ColumnarToRow [codegen id : 4]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]

(12) Filter [codegen id : 4]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(13) BroadcastExchange
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13]

(14) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(15) ColumnarToRow
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(16) Filter
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : (((isnotnull(i_item_sk#7) AND isnotnull(i_brand_id#8)) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(17) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join condition: None

(18) Project [codegen id : 6]
Output [4]: [ss_sold_date_sk#4, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [6]: [ss_item_sk#1, ss_sold_date_sk#4, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(19) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(20) ColumnarToRow [codegen id : 5]
Input [2]: [d_date_sk#14, d_year#15]

(21) Filter [codegen id : 5]
Input [2]: [d_date_sk#14, d_year#15]
Condition : (((isnotnull(d_year#15) AND (d_year#15 >= 1999)) AND (d_year#15 <= 2001)) AND isnotnull(d_date_sk#14))

(22) Project [codegen id : 5]
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#15]

(23) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(24) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#14]
Join condition: None

(25) Project [codegen id : 6]
Output [3]: [i_brand_id#8 AS brand_id#17, i_class_id#9 AS class_id#18, i_category_id#10 AS category_id#19]
Input [5]: [ss_sold_date_sk#4, i_brand_id#8, i_class_id#9, i_category_id#10, d_date_sk#14]

(26) Exchange
Input [3]: [brand_id#17, class_id#18, category_id#19]
Arguments: hashpartitioning(coalesce(brand_id#17, 0), isnull(brand_id#17), coalesce(class_id#18, 0), isnull(class_id#18), coalesce(category_id#19, 0), isnull(category_id#19), 5), ENSURE_REQUIREMENTS, [id=#20]

(27) Sort [codegen id : 7]
Input [3]: [brand_id#17, class_id#18, category_id#19]
Arguments: [coalesce(brand_id#17, 0) ASC NULLS FIRST, isnull(brand_id#17) ASC NULLS FIRST, coalesce(class_id#18, 0) ASC NULLS FIRST, isnull(class_id#18) ASC NULLS FIRST, coalesce(category_id#19, 0) ASC NULLS FIRST, isnull(category_id#19) ASC NULLS FIRST], false, 0

(28) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#21, cs_sold_date_sk#22]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#22), dynamicpruningexpression(cs_sold_date_sk#22 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(29) ColumnarToRow [codegen id : 8]
Input [2]: [cs_item_sk#21, cs_sold_date_sk#22]

(30) Filter [codegen id : 8]
Input [2]: [cs_item_sk#21, cs_sold_date_sk#22]
Condition : isnotnull(cs_item_sk#21)

(31) BroadcastExchange
Input [2]: [cs_item_sk#21, cs_sold_date_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#23]

(32) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(33) ColumnarToRow
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(34) Filter
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : isnotnull(i_item_sk#7)

(35) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_item_sk#21]
Right keys [1]: [i_item_sk#7]
Join condition: None

(36) Project [codegen id : 10]
Output [4]: [cs_sold_date_sk#22, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [6]: [cs_item_sk#21, cs_sold_date_sk#22, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(37) ReusedExchange [Reuses operator id: 23]
Output [1]: [d_date_sk#14]

(38) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#22]
Right keys [1]: [d_date_sk#14]
Join condition: None

(39) Project [codegen id : 10]
Output [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Input [5]: [cs_sold_date_sk#22, i_brand_id#8, i_class_id#9, i_category_id#10, d_date_sk#14]

(40) Exchange
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10), 5), ENSURE_REQUIREMENTS, [id=#24]

(41) Sort [codegen id : 11]
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [coalesce(i_brand_id#8, 0) ASC NULLS FIRST, isnull(i_brand_id#8) ASC NULLS FIRST, coalesce(i_class_id#9, 0) ASC NULLS FIRST, isnull(i_class_id#9) ASC NULLS FIRST, coalesce(i_category_id#10, 0) ASC NULLS FIRST, isnull(i_category_id#10) ASC NULLS FIRST], false, 0

(42) SortMergeJoin
Left keys [6]: [coalesce(brand_id#17, 0), isnull(brand_id#17), coalesce(class_id#18, 0), isnull(class_id#18), coalesce(category_id#19, 0), isnull(category_id#19)]
Right keys [6]: [coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10)]
Join condition: None

(43) HashAggregate [codegen id : 12]
Input [3]: [brand_id#17, class_id#18, category_id#19]
Keys [3]: [brand_id#17, class_id#18, category_id#19]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#17, class_id#18, category_id#19]

(44) Exchange
Input [3]: [brand_id#17, class_id#18, category_id#19]
Arguments: hashpartitioning(brand_id#17, class_id#18, category_id#19, 5), ENSURE_REQUIREMENTS, [id=#25]

(45) HashAggregate [codegen id : 13]
Input [3]: [brand_id#17, class_id#18, category_id#19]
Keys [3]: [brand_id#17, class_id#18, category_id#19]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#17, class_id#18, category_id#19]

(46) Exchange
Input [3]: [brand_id#17, class_id#18, category_id#19]
Arguments: hashpartitioning(coalesce(brand_id#17, 0), isnull(brand_id#17), coalesce(class_id#18, 0), isnull(class_id#18), coalesce(category_id#19, 0), isnull(category_id#19), 5), ENSURE_REQUIREMENTS, [id=#26]

(47) Sort [codegen id : 14]
Input [3]: [brand_id#17, class_id#18, category_id#19]
Arguments: [coalesce(brand_id#17, 0) ASC NULLS FIRST, isnull(brand_id#17) ASC NULLS FIRST, coalesce(class_id#18, 0) ASC NULLS FIRST, isnull(class_id#18) ASC NULLS FIRST, coalesce(category_id#19, 0) ASC NULLS FIRST, isnull(category_id#19) ASC NULLS FIRST], false, 0

(48) Scan parquet default.web_sales
Output [2]: [ws_item_sk#27, ws_sold_date_sk#28]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#28), dynamicpruningexpression(ws_sold_date_sk#28 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(49) ColumnarToRow [codegen id : 15]
Input [2]: [ws_item_sk#27, ws_sold_date_sk#28]

(50) Filter [codegen id : 15]
Input [2]: [ws_item_sk#27, ws_sold_date_sk#28]
Condition : isnotnull(ws_item_sk#27)

(51) BroadcastExchange
Input [2]: [ws_item_sk#27, ws_sold_date_sk#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(52) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(53) ColumnarToRow
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(54) Filter
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : isnotnull(i_item_sk#7)

(55) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_item_sk#27]
Right keys [1]: [i_item_sk#7]
Join condition: None

(56) Project [codegen id : 17]
Output [4]: [ws_sold_date_sk#28, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [6]: [ws_item_sk#27, ws_sold_date_sk#28, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(57) ReusedExchange [Reuses operator id: 23]
Output [1]: [d_date_sk#14]

(58) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_sold_date_sk#28]
Right keys [1]: [d_date_sk#14]
Join condition: None

(59) Project [codegen id : 17]
Output [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Input [5]: [ws_sold_date_sk#28, i_brand_id#8, i_class_id#9, i_category_id#10, d_date_sk#14]

(60) Exchange
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10), 5), ENSURE_REQUIREMENTS, [id=#30]

(61) Sort [codegen id : 18]
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [coalesce(i_brand_id#8, 0) ASC NULLS FIRST, isnull(i_brand_id#8) ASC NULLS FIRST, coalesce(i_class_id#9, 0) ASC NULLS FIRST, isnull(i_class_id#9) ASC NULLS FIRST, coalesce(i_category_id#10, 0) ASC NULLS FIRST, isnull(i_category_id#10) ASC NULLS FIRST], false, 0

(62) SortMergeJoin
Left keys [6]: [coalesce(brand_id#17, 0), isnull(brand_id#17), coalesce(class_id#18, 0), isnull(class_id#18), coalesce(category_id#19, 0), isnull(category_id#19)]
Right keys [6]: [coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10)]
Join condition: None

(63) HashAggregate [codegen id : 19]
Input [3]: [brand_id#17, class_id#18, category_id#19]
Keys [3]: [brand_id#17, class_id#18, category_id#19]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#17, class_id#18, category_id#19]

(64) Exchange
Input [3]: [brand_id#17, class_id#18, category_id#19]
Arguments: hashpartitioning(brand_id#17, class_id#18, category_id#19, 5), ENSURE_REQUIREMENTS, [id=#31]

(65) HashAggregate
Input [3]: [brand_id#17, class_id#18, category_id#19]
Keys [3]: [brand_id#17, class_id#18, category_id#19]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#17, class_id#18, category_id#19]

(66) BroadcastHashJoin [codegen id : 20]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#17, class_id#18, category_id#19]
Join condition: None

(67) Project [codegen id : 20]
Output [1]: [i_item_sk#7 AS ss_item_sk#32]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#17, class_id#18, category_id#19]

(68) Exchange
Input [1]: [ss_item_sk#32]
Arguments: hashpartitioning(ss_item_sk#32, 5), ENSURE_REQUIREMENTS, [id=#33]

(69) Sort [codegen id : 21]
Input [1]: [ss_item_sk#32]
Arguments: [ss_item_sk#32 ASC NULLS FIRST], false, 0

(70) SortMergeJoin
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#32]
Join condition: None

(71) BroadcastExchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#34]

(72) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(73) ColumnarToRow [codegen id : 22]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(74) Filter [codegen id : 22]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : isnotnull(i_item_sk#7)

(75) Exchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(i_item_sk#7, 5), ENSURE_REQUIREMENTS, [id=#35]

(76) Sort [codegen id : 23]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [i_item_sk#7 ASC NULLS FIRST], false, 0

(77) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#32]

(78) Sort [codegen id : 42]
Input [1]: [ss_item_sk#32]
Arguments: [ss_item_sk#32 ASC NULLS FIRST], false, 0

(79) SortMergeJoin
Left keys [1]: [i_item_sk#7]
Right keys [1]: [ss_item_sk#32]
Join condition: None

(80) BroadcastHashJoin [codegen id : 44]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join condition: None

(81) Project [codegen id : 44]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(82) Scan parquet default.date_dim
Output [3]: [d_date_sk#14, d_year#15, d_moy#36]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(83) ColumnarToRow [codegen id : 43]
Input [3]: [d_date_sk#14, d_year#15, d_moy#36]

(84) Filter [codegen id : 43]
Input [3]: [d_date_sk#14, d_year#15, d_moy#36]
Condition : ((((isnotnull(d_year#15) AND isnotnull(d_moy#36)) AND (d_year#15 = 2001)) AND (d_moy#36 = 11)) AND isnotnull(d_date_sk#14))

(85) Project [codegen id : 43]
Output [1]: [d_date_sk#14]
Input [3]: [d_date_sk#14, d_year#15, d_moy#36]

(86) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#37]

(87) BroadcastHashJoin [codegen id : 44]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#14]
Join condition: None

(88) Project [codegen id : 44]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#8, i_class_id#9, i_category_id#10, d_date_sk#14]

(89) HashAggregate [codegen id : 44]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#38, isEmpty#39, count#40]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#41, isEmpty#42, count#43]

(90) Exchange
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#41, isEmpty#42, count#43]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#44]

(91) HashAggregate [codegen id : 45]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#41, isEmpty#42, count#43]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#45, count(1)#46]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#45 AS sales#47, count(1)#46 AS number_sales#48, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#45 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#49]

(92) Filter [codegen id : 45]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#47, number_sales#48, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#49]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#49) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#49 as decimal(32,6)) > cast(Subquery scalar-subquery#50, [id=#51] as decimal(32,6))))

(93) Project [codegen id : 45]
Output [6]: [sales#47, number_sales#48, store AS channel#52, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#47, number_sales#48, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#49]

(94) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#21, cs_quantity#53, cs_list_price#54, cs_sold_date_sk#22]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#22), dynamicpruningexpression(cs_sold_date_sk#22 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(95) ColumnarToRow [codegen id : 46]
Input [4]: [cs_item_sk#21, cs_quantity#53, cs_list_price#54, cs_sold_date_sk#22]

(96) Filter [codegen id : 46]
Input [4]: [cs_item_sk#21, cs_quantity#53, cs_list_price#54, cs_sold_date_sk#22]
Condition : isnotnull(cs_item_sk#21)

(97) Exchange
Input [4]: [cs_item_sk#21, cs_quantity#53, cs_list_price#54, cs_sold_date_sk#22]
Arguments: hashpartitioning(cs_item_sk#21, 5), ENSURE_REQUIREMENTS, [id=#55]

(98) Sort [codegen id : 47]
Input [4]: [cs_item_sk#21, cs_quantity#53, cs_list_price#54, cs_sold_date_sk#22]
Arguments: [cs_item_sk#21 ASC NULLS FIRST], false, 0

(99) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#32]

(100) Sort [codegen id : 66]
Input [1]: [ss_item_sk#32]
Arguments: [ss_item_sk#32 ASC NULLS FIRST], false, 0

(101) SortMergeJoin
Left keys [1]: [cs_item_sk#21]
Right keys [1]: [ss_item_sk#32]
Join condition: None

(102) BroadcastExchange
Input [4]: [cs_item_sk#21, cs_quantity#53, cs_list_price#54, cs_sold_date_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#56]

(103) ReusedExchange [Reuses operator id: 75]
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(104) Sort [codegen id : 68]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [i_item_sk#7 ASC NULLS FIRST], false, 0

(105) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#32]

(106) Sort [codegen id : 87]
Input [1]: [ss_item_sk#32]
Arguments: [ss_item_sk#32 ASC NULLS FIRST], false, 0

(107) SortMergeJoin
Left keys [1]: [i_item_sk#7]
Right keys [1]: [ss_item_sk#32]
Join condition: None

(108) BroadcastHashJoin [codegen id : 89]
Left keys [1]: [cs_item_sk#21]
Right keys [1]: [i_item_sk#7]
Join condition: None

(109) Project [codegen id : 89]
Output [6]: [cs_quantity#53, cs_list_price#54, cs_sold_date_sk#22, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [8]: [cs_item_sk#21, cs_quantity#53, cs_list_price#54, cs_sold_date_sk#22, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(110) ReusedExchange [Reuses operator id: 86]
Output [1]: [d_date_sk#14]

(111) BroadcastHashJoin [codegen id : 89]
Left keys [1]: [cs_sold_date_sk#22]
Right keys [1]: [d_date_sk#14]
Join condition: None

(112) Project [codegen id : 89]
Output [5]: [cs_quantity#53, cs_list_price#54, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [7]: [cs_quantity#53, cs_list_price#54, cs_sold_date_sk#22, i_brand_id#8, i_class_id#9, i_category_id#10, d_date_sk#14]

(113) HashAggregate [codegen id : 89]
Input [5]: [cs_quantity#53, cs_list_price#54, i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#57, isEmpty#58, count#59]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#60, isEmpty#61, count#62]

(114) Exchange
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#60, isEmpty#61, count#62]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#63]

(115) HashAggregate [codegen id : 90]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#60, isEmpty#61, count#62]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#64, count(1)#65]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#64 AS sales#66, count(1)#65 AS number_sales#67, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#64 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#68]

(116) Filter [codegen id : 90]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#66, number_sales#67, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#68]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#68) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#68 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#50, [id=#51] as decimal(32,6))))

(117) Project [codegen id : 90]
Output [6]: [sales#66, number_sales#67, catalog AS channel#69, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#66, number_sales#67, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#68]

(118) Scan parquet default.web_sales
Output [4]: [ws_item_sk#27, ws_quantity#70, ws_list_price#71, ws_sold_date_sk#28]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#28), dynamicpruningexpression(ws_sold_date_sk#28 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(119) ColumnarToRow [codegen id : 91]
Input [4]: [ws_item_sk#27, ws_quantity#70, ws_list_price#71, ws_sold_date_sk#28]

(120) Filter [codegen id : 91]
Input [4]: [ws_item_sk#27, ws_quantity#70, ws_list_price#71, ws_sold_date_sk#28]
Condition : isnotnull(ws_item_sk#27)

(121) Exchange
Input [4]: [ws_item_sk#27, ws_quantity#70, ws_list_price#71, ws_sold_date_sk#28]
Arguments: hashpartitioning(ws_item_sk#27, 5), ENSURE_REQUIREMENTS, [id=#72]

(122) Sort [codegen id : 92]
Input [4]: [ws_item_sk#27, ws_quantity#70, ws_list_price#71, ws_sold_date_sk#28]
Arguments: [ws_item_sk#27 ASC NULLS FIRST], false, 0

(123) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#32]

(124) Sort [codegen id : 111]
Input [1]: [ss_item_sk#32]
Arguments: [ss_item_sk#32 ASC NULLS FIRST], false, 0

(125) SortMergeJoin
Left keys [1]: [ws_item_sk#27]
Right keys [1]: [ss_item_sk#32]
Join condition: None

(126) BroadcastExchange
Input [4]: [ws_item_sk#27, ws_quantity#70, ws_list_price#71, ws_sold_date_sk#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#73]

(127) ReusedExchange [Reuses operator id: 75]
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(128) Sort [codegen id : 113]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [i_item_sk#7 ASC NULLS FIRST], false, 0

(129) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#32]

(130) Sort [codegen id : 132]
Input [1]: [ss_item_sk#32]
Arguments: [ss_item_sk#32 ASC NULLS FIRST], false, 0

(131) SortMergeJoin
Left keys [1]: [i_item_sk#7]
Right keys [1]: [ss_item_sk#32]
Join condition: None

(132) BroadcastHashJoin [codegen id : 134]
Left keys [1]: [ws_item_sk#27]
Right keys [1]: [i_item_sk#7]
Join condition: None

(133) Project [codegen id : 134]
Output [6]: [ws_quantity#70, ws_list_price#71, ws_sold_date_sk#28, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [8]: [ws_item_sk#27, ws_quantity#70, ws_list_price#71, ws_sold_date_sk#28, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(134) ReusedExchange [Reuses operator id: 86]
Output [1]: [d_date_sk#14]

(135) BroadcastHashJoin [codegen id : 134]
Left keys [1]: [ws_sold_date_sk#28]
Right keys [1]: [d_date_sk#14]
Join condition: None

(136) Project [codegen id : 134]
Output [5]: [ws_quantity#70, ws_list_price#71, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [7]: [ws_quantity#70, ws_list_price#71, ws_sold_date_sk#28, i_brand_id#8, i_class_id#9, i_category_id#10, d_date_sk#14]

(137) HashAggregate [codegen id : 134]
Input [5]: [ws_quantity#70, ws_list_price#71, i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#74, isEmpty#75, count#76]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#77, isEmpty#78, count#79]

(138) Exchange
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#77, isEmpty#78, count#79]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#80]

(139) HashAggregate [codegen id : 135]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#77, isEmpty#78, count#79]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#81, count(1)#82]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#81 AS sales#83, count(1)#82 AS number_sales#84, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#81 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#85]

(140) Filter [codegen id : 135]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#83, number_sales#84, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#85]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#85) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#85 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#50, [id=#51] as decimal(32,6))))

(141) Project [codegen id : 135]
Output [6]: [sales#83, number_sales#84, web AS channel#86, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#83, number_sales#84, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#71 as decimal(12,2)))), DecimalType(18,2), true))#85]

(142) Union

(143) Expand [codegen id : 136]
Input [6]: [sales#47, number_sales#48, channel#52, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [List(sales#47, number_sales#48, channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, 0), List(sales#47, number_sales#48, channel#52, i_brand_id#8, i_class_id#9, null, 1), List(sales#47, number_sales#48, channel#52, i_brand_id#8, null, null, 3), List(sales#47, number_sales#48, channel#52, null, null, null, 7), List(sales#47, number_sales#48, null, null, null, null, 15)], [sales#47, number_sales#48, channel#87, i_brand_id#88, i_class_id#89, i_category_id#90, spark_grouping_id#91]

(144) HashAggregate [codegen id : 136]
Input [7]: [sales#47, number_sales#48, channel#87, i_brand_id#88, i_class_id#89, i_category_id#90, spark_grouping_id#91]
Keys [5]: [channel#87, i_brand_id#88, i_class_id#89, i_category_id#90, spark_grouping_id#91]
Functions [2]: [partial_sum(sales#47), partial_sum(number_sales#48)]
Aggregate Attributes [3]: [sum#92, isEmpty#93, sum#94]
Results [8]: [channel#87, i_brand_id#88, i_class_id#89, i_category_id#90, spark_grouping_id#91, sum#95, isEmpty#96, sum#97]

(145) Exchange
Input [8]: [channel#87, i_brand_id#88, i_class_id#89, i_category_id#90, spark_grouping_id#91, sum#95, isEmpty#96, sum#97]
Arguments: hashpartitioning(channel#87, i_brand_id#88, i_class_id#89, i_category_id#90, spark_grouping_id#91, 5), ENSURE_REQUIREMENTS, [id=#98]

(146) HashAggregate [codegen id : 137]
Input [8]: [channel#87, i_brand_id#88, i_class_id#89, i_category_id#90, spark_grouping_id#91, sum#95, isEmpty#96, sum#97]
Keys [5]: [channel#87, i_brand_id#88, i_class_id#89, i_category_id#90, spark_grouping_id#91]
Functions [2]: [sum(sales#47), sum(number_sales#48)]
Aggregate Attributes [2]: [sum(sales#47)#99, sum(number_sales#48)#100]
Results [6]: [channel#87, i_brand_id#88, i_class_id#89, i_category_id#90, sum(sales#47)#99 AS sum(sales)#101, sum(number_sales#48)#100 AS sum(number_sales)#102]

(147) TakeOrderedAndProject
Input [6]: [channel#87, i_brand_id#88, i_class_id#89, i_category_id#90, sum(sales)#101, sum(number_sales)#102]
Arguments: 100, [channel#87 ASC NULLS FIRST, i_brand_id#88 ASC NULLS FIRST, i_class_id#89 ASC NULLS FIRST, i_category_id#90 ASC NULLS FIRST], [channel#87, i_brand_id#88, i_class_id#89, i_category_id#90, sum(sales)#101, sum(number_sales)#102]

===== Subqueries =====

Subquery:1 Hosting operator id = 92 Hosting Expression = Subquery scalar-subquery#50, [id=#51]
* HashAggregate (178)
+- Exchange (177)
   +- * HashAggregate (176)
      +- Union (175)
         :- * Project (156)
         :  +- * BroadcastHashJoin Inner BuildLeft (155)
         :     :- BroadcastExchange (150)
         :     :  +- * ColumnarToRow (149)
         :     :     +- Scan parquet default.store_sales (148)
         :     +- * Project (154)
         :        +- * Filter (153)
         :           +- * ColumnarToRow (152)
         :              +- Scan parquet default.date_dim (151)
         :- * Project (165)
         :  +- * BroadcastHashJoin Inner BuildLeft (164)
         :     :- BroadcastExchange (159)
         :     :  +- * ColumnarToRow (158)
         :     :     +- Scan parquet default.catalog_sales (157)
         :     +- * Project (163)
         :        +- * Filter (162)
         :           +- * ColumnarToRow (161)
         :              +- Scan parquet default.date_dim (160)
         +- * Project (174)
            +- * BroadcastHashJoin Inner BuildLeft (173)
               :- BroadcastExchange (168)
               :  +- * ColumnarToRow (167)
               :     +- Scan parquet default.web_sales (166)
               +- * Project (172)
                  +- * Filter (171)
                     +- * ColumnarToRow (170)
                        +- Scan parquet default.date_dim (169)


(148) Scan parquet default.store_sales
Output [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(true)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(149) ColumnarToRow [codegen id : 1]
Input [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(150) BroadcastExchange
Input [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#103]

(151) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(152) ColumnarToRow
Input [2]: [d_date_sk#14, d_year#15]

(153) Filter
Input [2]: [d_date_sk#14, d_year#15]
Condition : (((isnotnull(d_year#15) AND (d_year#15 >= 1999)) AND (d_year#15 <= 2001)) AND isnotnull(d_date_sk#14))

(154) Project
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#15]

(155) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#14]
Join condition: None

(156) Project [codegen id : 2]
Output [2]: [ss_quantity#2 AS quantity#104, ss_list_price#3 AS list_price#105]
Input [4]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#14]

(157) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#53, cs_list_price#54, cs_sold_date_sk#22]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#22), dynamicpruningexpression(true)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(158) ColumnarToRow [codegen id : 3]
Input [3]: [cs_quantity#53, cs_list_price#54, cs_sold_date_sk#22]

(159) BroadcastExchange
Input [3]: [cs_quantity#53, cs_list_price#54, cs_sold_date_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#106]

(160) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(161) ColumnarToRow
Input [2]: [d_date_sk#14, d_year#15]

(162) Filter
Input [2]: [d_date_sk#14, d_year#15]
Condition : (((isnotnull(d_year#15) AND (d_year#15 >= 1999)) AND (d_year#15 <= 2001)) AND isnotnull(d_date_sk#14))

(163) Project
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#15]

(164) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#22]
Right keys [1]: [d_date_sk#14]
Join condition: None

(165) Project [codegen id : 4]
Output [2]: [cs_quantity#53 AS quantity#107, cs_list_price#54 AS list_price#108]
Input [4]: [cs_quantity#53, cs_list_price#54, cs_sold_date_sk#22, d_date_sk#14]

(166) Scan parquet default.web_sales
Output [3]: [ws_quantity#70, ws_list_price#71, ws_sold_date_sk#28]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#28), dynamicpruningexpression(true)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(167) ColumnarToRow [codegen id : 5]
Input [3]: [ws_quantity#70, ws_list_price#71, ws_sold_date_sk#28]

(168) BroadcastExchange
Input [3]: [ws_quantity#70, ws_list_price#71, ws_sold_date_sk#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#109]

(169) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(170) ColumnarToRow
Input [2]: [d_date_sk#14, d_year#15]

(171) Filter
Input [2]: [d_date_sk#14, d_year#15]
Condition : (((isnotnull(d_year#15) AND (d_year#15 >= 1999)) AND (d_year#15 <= 2001)) AND isnotnull(d_date_sk#14))

(172) Project
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#15]

(173) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#28]
Right keys [1]: [d_date_sk#14]
Join condition: None

(174) Project [codegen id : 6]
Output [2]: [ws_quantity#70 AS quantity#110, ws_list_price#71 AS list_price#111]
Input [4]: [ws_quantity#70, ws_list_price#71, ws_sold_date_sk#28, d_date_sk#14]

(175) Union

(176) HashAggregate [codegen id : 7]
Input [2]: [quantity#104, list_price#105]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#104 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#105 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#112, count#113]
Results [2]: [sum#114, count#115]

(177) Exchange
Input [2]: [sum#114, count#115]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#116]

(178) HashAggregate [codegen id : 8]
Input [2]: [sum#114, count#115]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#104 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#105 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#104 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#105 as decimal(12,2)))), DecimalType(18,2), true))#117]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#104 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#105 as decimal(12,2)))), DecimalType(18,2), true))#117 AS average_sales#118]

Subquery:2 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (179)


(179) ReusedExchange [Reuses operator id: 86]
Output [1]: [d_date_sk#14]

Subquery:3 Hosting operator id = 10 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#12
ReusedExchange (180)


(180) ReusedExchange [Reuses operator id: 23]
Output [1]: [d_date_sk#14]

Subquery:4 Hosting operator id = 28 Hosting Expression = cs_sold_date_sk#22 IN dynamicpruning#12

Subquery:5 Hosting operator id = 48 Hosting Expression = ws_sold_date_sk#28 IN dynamicpruning#12

Subquery:6 Hosting operator id = 116 Hosting Expression = ReusedSubquery Subquery scalar-subquery#50, [id=#51]

Subquery:7 Hosting operator id = 94 Hosting Expression = cs_sold_date_sk#22 IN dynamicpruning#5

Subquery:8 Hosting operator id = 140 Hosting Expression = ReusedSubquery Subquery scalar-subquery#50, [id=#51]

Subquery:9 Hosting operator id = 118 Hosting Expression = ws_sold_date_sk#28 IN dynamicpruning#5


