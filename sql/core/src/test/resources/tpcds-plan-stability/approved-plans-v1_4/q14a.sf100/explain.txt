== Physical Plan ==
TakeOrderedAndProject (133)
+- * HashAggregate (132)
   +- Exchange (131)
      +- * HashAggregate (130)
         +- * Expand (129)
            +- Union (128)
               :- * Project (89)
               :  +- * Filter (88)
               :     +- * HashAggregate (87)
               :        +- Exchange (86)
               :           +- * HashAggregate (85)
               :              +- * Project (84)
               :                 +- * BroadcastHashJoin Inner BuildRight (83)
               :                    :- * Project (73)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (72)
               :                    :     :- SortMergeJoin LeftSemi (66)
               :                    :     :  :- * Sort (5)
               :                    :     :  :  +- Exchange (4)
               :                    :     :  :     +- * Filter (3)
               :                    :     :  :        +- * ColumnarToRow (2)
               :                    :     :  :           +- Scan parquet default.store_sales (1)
               :                    :     :  +- * Sort (65)
               :                    :     :     +- Exchange (64)
               :                    :     :        +- * Project (63)
               :                    :     :           +- * BroadcastHashJoin Inner BuildRight (62)
               :                    :     :              :- * Filter (8)
               :                    :     :              :  +- * ColumnarToRow (7)
               :                    :     :              :     +- Scan parquet default.item (6)
               :                    :     :              +- BroadcastExchange (61)
               :                    :     :                 +- * HashAggregate (60)
               :                    :     :                    +- * HashAggregate (59)
               :                    :     :                       +- * HashAggregate (58)
               :                    :     :                          +- Exchange (57)
               :                    :     :                             +- * HashAggregate (56)
               :                    :     :                                +- * BroadcastHashJoin LeftSemi BuildRight (55)
               :                    :     :                                   :- * BroadcastHashJoin LeftSemi BuildRight (41)
               :                    :     :                                   :  :- * Project (24)
               :                    :     :                                   :  :  +- * BroadcastHashJoin Inner BuildRight (23)
               :                    :     :                                   :  :     :- * Project (18)
               :                    :     :                                   :  :     :  +- * BroadcastHashJoin Inner BuildRight (17)
               :                    :     :                                   :  :     :     :- * Filter (11)
               :                    :     :                                   :  :     :     :  +- * ColumnarToRow (10)
               :                    :     :                                   :  :     :     :     +- Scan parquet default.store_sales (9)
               :                    :     :                                   :  :     :     +- BroadcastExchange (16)
               :                    :     :                                   :  :     :        +- * Project (15)
               :                    :     :                                   :  :     :           +- * Filter (14)
               :                    :     :                                   :  :     :              +- * ColumnarToRow (13)
               :                    :     :                                   :  :     :                 +- Scan parquet default.date_dim (12)
               :                    :     :                                   :  :     +- BroadcastExchange (22)
               :                    :     :                                   :  :        +- * Filter (21)
               :                    :     :                                   :  :           +- * ColumnarToRow (20)
               :                    :     :                                   :  :              +- Scan parquet default.item (19)
               :                    :     :                                   :  +- BroadcastExchange (40)
               :                    :     :                                   :     +- * HashAggregate (39)
               :                    :     :                                   :        +- Exchange (38)
               :                    :     :                                   :           +- * HashAggregate (37)
               :                    :     :                                   :              +- * Project (36)
               :                    :     :                                   :                 +- * BroadcastHashJoin Inner BuildRight (35)
               :                    :     :                                   :                    :- * Project (30)
               :                    :     :                                   :                    :  +- * BroadcastHashJoin Inner BuildRight (29)
               :                    :     :                                   :                    :     :- * Filter (27)
               :                    :     :                                   :                    :     :  +- * ColumnarToRow (26)
               :                    :     :                                   :                    :     :     +- Scan parquet default.catalog_sales (25)
               :                    :     :                                   :                    :     +- ReusedExchange (28)
               :                    :     :                                   :                    +- BroadcastExchange (34)
               :                    :     :                                   :                       +- * Filter (33)
               :                    :     :                                   :                          +- * ColumnarToRow (32)
               :                    :     :                                   :                             +- Scan parquet default.item (31)
               :                    :     :                                   +- BroadcastExchange (54)
               :                    :     :                                      +- * HashAggregate (53)
               :                    :     :                                         +- Exchange (52)
               :                    :     :                                            +- * HashAggregate (51)
               :                    :     :                                               +- * Project (50)
               :                    :     :                                                  +- * BroadcastHashJoin Inner BuildRight (49)
               :                    :     :                                                     :- * Project (47)
               :                    :     :                                                     :  +- * BroadcastHashJoin Inner BuildRight (46)
               :                    :     :                                                     :     :- * Filter (44)
               :                    :     :                                                     :     :  +- * ColumnarToRow (43)
               :                    :     :                                                     :     :     +- Scan parquet default.web_sales (42)
               :                    :     :                                                     :     +- ReusedExchange (45)
               :                    :     :                                                     +- ReusedExchange (48)
               :                    :     +- BroadcastExchange (71)
               :                    :        +- * Project (70)
               :                    :           +- * Filter (69)
               :                    :              +- * ColumnarToRow (68)
               :                    :                 +- Scan parquet default.date_dim (67)
               :                    +- BroadcastExchange (82)
               :                       +- SortMergeJoin LeftSemi (81)
               :                          :- * Sort (78)
               :                          :  +- Exchange (77)
               :                          :     +- * Filter (76)
               :                          :        +- * ColumnarToRow (75)
               :                          :           +- Scan parquet default.item (74)
               :                          +- * Sort (80)
               :                             +- ReusedExchange (79)
               :- * Project (108)
               :  +- * Filter (107)
               :     +- * HashAggregate (106)
               :        +- Exchange (105)
               :           +- * HashAggregate (104)
               :              +- * Project (103)
               :                 +- * BroadcastHashJoin Inner BuildRight (102)
               :                    :- * Project (100)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (99)
               :                    :     :- SortMergeJoin LeftSemi (97)
               :                    :     :  :- * Sort (94)
               :                    :     :  :  +- Exchange (93)
               :                    :     :  :     +- * Filter (92)
               :                    :     :  :        +- * ColumnarToRow (91)
               :                    :     :  :           +- Scan parquet default.catalog_sales (90)
               :                    :     :  +- * Sort (96)
               :                    :     :     +- ReusedExchange (95)
               :                    :     +- ReusedExchange (98)
               :                    +- ReusedExchange (101)
               +- * Project (127)
                  +- * Filter (126)
                     +- * HashAggregate (125)
                        +- Exchange (124)
                           +- * HashAggregate (123)
                              +- * Project (122)
                                 +- * BroadcastHashJoin Inner BuildRight (121)
                                    :- * Project (119)
                                    :  +- * BroadcastHashJoin Inner BuildRight (118)
                                    :     :- SortMergeJoin LeftSemi (116)
                                    :     :  :- * Sort (113)
                                    :     :  :  +- Exchange (112)
                                    :     :  :     +- * Filter (111)
                                    :     :  :        +- * ColumnarToRow (110)
                                    :     :  :           +- Scan parquet default.web_sales (109)
                                    :     :  +- * Sort (115)
                                    :     :     +- ReusedExchange (114)
                                    :     +- ReusedExchange (117)
                                    +- ReusedExchange (120)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 15]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(8) Filter [codegen id : 15]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(9) Scan parquet default.store_sales
Output [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#11)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(10) ColumnarToRow [codegen id : 13]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]

(11) Filter [codegen id : 13]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(12) Scan parquet default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(13) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#12, d_year#13]

(14) Filter [codegen id : 3]
Input [2]: [d_date_sk#12, d_year#13]
Condition : (((isnotnull(d_year#13) AND (d_year#13 >= 1999)) AND (d_year#13 <= 2001)) AND isnotnull(d_date_sk#12))

(15) Project [codegen id : 3]
Output [1]: [d_date_sk#12]
Input [2]: [d_date_sk#12, d_year#13]

(16) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(17) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#12]
Join condition: None

(18) Project [codegen id : 13]
Output [1]: [ss_item_sk#1]
Input [3]: [ss_item_sk#1, ss_sold_date_sk#4, d_date_sk#12]

(19) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(20) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(21) Filter [codegen id : 4]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : (((isnotnull(i_item_sk#7) AND isnotnull(i_brand_id#8)) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(22) BroadcastExchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#15]

(23) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join condition: None

(24) Project [codegen id : 13]
Output [3]: [i_brand_id#8 AS brand_id#16, i_class_id#9 AS class_id#17, i_category_id#10 AS category_id#18]
Input [5]: [ss_item_sk#1, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(25) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#19, cs_sold_date_sk#20]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#20), dynamicpruningexpression(cs_sold_date_sk#20 IN dynamicpruning#11)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(26) ColumnarToRow [codegen id : 7]
Input [2]: [cs_item_sk#19, cs_sold_date_sk#20]

(27) Filter [codegen id : 7]
Input [2]: [cs_item_sk#19, cs_sold_date_sk#20]
Condition : isnotnull(cs_item_sk#19)

(28) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#12]

(29) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cs_sold_date_sk#20]
Right keys [1]: [d_date_sk#12]
Join condition: None

(30) Project [codegen id : 7]
Output [1]: [cs_item_sk#19]
Input [3]: [cs_item_sk#19, cs_sold_date_sk#20, d_date_sk#12]

(31) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(32) ColumnarToRow [codegen id : 6]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(33) Filter [codegen id : 6]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : isnotnull(i_item_sk#7)

(34) BroadcastExchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#21]

(35) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [i_item_sk#7]
Join condition: None

(36) Project [codegen id : 7]
Output [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Input [5]: [cs_item_sk#19, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(37) HashAggregate [codegen id : 7]
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]

(38) Exchange
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#22]

(39) HashAggregate [codegen id : 8]
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]

(40) BroadcastExchange
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#23]

(41) BroadcastHashJoin [codegen id : 13]
Left keys [6]: [coalesce(brand_id#16, 0), isnull(brand_id#16), coalesce(class_id#17, 0), isnull(class_id#17), coalesce(category_id#18, 0), isnull(category_id#18)]
Right keys [6]: [coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10)]
Join condition: None

(42) Scan parquet default.web_sales
Output [2]: [ws_item_sk#24, ws_sold_date_sk#25]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#25), dynamicpruningexpression(ws_sold_date_sk#25 IN dynamicpruning#11)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(43) ColumnarToRow [codegen id : 11]
Input [2]: [ws_item_sk#24, ws_sold_date_sk#25]

(44) Filter [codegen id : 11]
Input [2]: [ws_item_sk#24, ws_sold_date_sk#25]
Condition : isnotnull(ws_item_sk#24)

(45) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#12]

(46) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ws_sold_date_sk#25]
Right keys [1]: [d_date_sk#12]
Join condition: None

(47) Project [codegen id : 11]
Output [1]: [ws_item_sk#24]
Input [3]: [ws_item_sk#24, ws_sold_date_sk#25, d_date_sk#12]

(48) ReusedExchange [Reuses operator id: 34]
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(49) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ws_item_sk#24]
Right keys [1]: [i_item_sk#7]
Join condition: None

(50) Project [codegen id : 11]
Output [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Input [5]: [ws_item_sk#24, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(51) HashAggregate [codegen id : 11]
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]

(52) Exchange
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#26]

(53) HashAggregate [codegen id : 12]
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]

(54) BroadcastExchange
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#27]

(55) BroadcastHashJoin [codegen id : 13]
Left keys [6]: [coalesce(brand_id#16, 0), isnull(brand_id#16), coalesce(class_id#17, 0), isnull(class_id#17), coalesce(category_id#18, 0), isnull(category_id#18)]
Right keys [6]: [coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10)]
Join condition: None

(56) HashAggregate [codegen id : 13]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Keys [3]: [brand_id#16, class_id#17, category_id#18]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#16, class_id#17, category_id#18]

(57) Exchange
Input [3]: [brand_id#16, class_id#17, category_id#18]
Arguments: hashpartitioning(brand_id#16, class_id#17, category_id#18, 5), ENSURE_REQUIREMENTS, [id=#28]

(58) HashAggregate [codegen id : 14]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Keys [3]: [brand_id#16, class_id#17, category_id#18]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#16, class_id#17, category_id#18]

(59) HashAggregate [codegen id : 14]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Keys [3]: [brand_id#16, class_id#17, category_id#18]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#16, class_id#17, category_id#18]

(60) HashAggregate [codegen id : 14]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Keys [3]: [brand_id#16, class_id#17, category_id#18]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#16, class_id#17, category_id#18]

(61) BroadcastExchange
Input [3]: [brand_id#16, class_id#17, category_id#18]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#29]

(62) BroadcastHashJoin [codegen id : 15]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#16, class_id#17, category_id#18]
Join condition: None

(63) Project [codegen id : 15]
Output [1]: [i_item_sk#7 AS ss_item_sk#30]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#16, class_id#17, category_id#18]

(64) Exchange
Input [1]: [ss_item_sk#30]
Arguments: hashpartitioning(ss_item_sk#30, 5), ENSURE_REQUIREMENTS, [id=#31]

(65) Sort [codegen id : 16]
Input [1]: [ss_item_sk#30]
Arguments: [ss_item_sk#30 ASC NULLS FIRST], false, 0

(66) SortMergeJoin
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#30]
Join condition: None

(67) Scan parquet default.date_dim
Output [3]: [d_date_sk#12, d_year#13, d_moy#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(68) ColumnarToRow [codegen id : 17]
Input [3]: [d_date_sk#12, d_year#13, d_moy#32]

(69) Filter [codegen id : 17]
Input [3]: [d_date_sk#12, d_year#13, d_moy#32]
Condition : ((((isnotnull(d_year#13) AND isnotnull(d_moy#32)) AND (d_year#13 = 2001)) AND (d_moy#32 = 11)) AND isnotnull(d_date_sk#12))

(70) Project [codegen id : 17]
Output [1]: [d_date_sk#12]
Input [3]: [d_date_sk#12, d_year#13, d_moy#32]

(71) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#33]

(72) BroadcastHashJoin [codegen id : 34]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#12]
Join condition: None

(73) Project [codegen id : 34]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#12]

(74) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(75) ColumnarToRow [codegen id : 18]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(76) Filter [codegen id : 18]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : isnotnull(i_item_sk#7)

(77) Exchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(i_item_sk#7, 5), ENSURE_REQUIREMENTS, [id=#34]

(78) Sort [codegen id : 19]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [i_item_sk#7 ASC NULLS FIRST], false, 0

(79) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#30]

(80) Sort [codegen id : 33]
Input [1]: [ss_item_sk#30]
Arguments: [ss_item_sk#30 ASC NULLS FIRST], false, 0

(81) SortMergeJoin
Left keys [1]: [i_item_sk#7]
Right keys [1]: [ss_item_sk#30]
Join condition: None

(82) BroadcastExchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#35]

(83) BroadcastHashJoin [codegen id : 34]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join condition: None

(84) Project [codegen id : 34]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(85) HashAggregate [codegen id : 34]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#36, isEmpty#37, count#38]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#39, isEmpty#40, count#41]

(86) Exchange
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#39, isEmpty#40, count#41]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#42]

(87) HashAggregate [codegen id : 35]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#39, isEmpty#40, count#41]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#43, count(1)#44]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#43 AS sales#45, count(1)#44 AS number_sales#46, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#43 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#47]

(88) Filter [codegen id : 35]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#45, number_sales#46, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#47]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#47) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#47 as decimal(32,6)) > cast(Subquery scalar-subquery#48, [id=#49] as decimal(32,6))))

(89) Project [codegen id : 35]
Output [6]: [sales#45, number_sales#46, store AS channel#50, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#45, number_sales#46, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#47]

(90) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#19, cs_quantity#51, cs_list_price#52, cs_sold_date_sk#20]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#20), dynamicpruningexpression(cs_sold_date_sk#20 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(91) ColumnarToRow [codegen id : 36]
Input [4]: [cs_item_sk#19, cs_quantity#51, cs_list_price#52, cs_sold_date_sk#20]

(92) Filter [codegen id : 36]
Input [4]: [cs_item_sk#19, cs_quantity#51, cs_list_price#52, cs_sold_date_sk#20]
Condition : isnotnull(cs_item_sk#19)

(93) Exchange
Input [4]: [cs_item_sk#19, cs_quantity#51, cs_list_price#52, cs_sold_date_sk#20]
Arguments: hashpartitioning(cs_item_sk#19, 5), ENSURE_REQUIREMENTS, [id=#53]

(94) Sort [codegen id : 37]
Input [4]: [cs_item_sk#19, cs_quantity#51, cs_list_price#52, cs_sold_date_sk#20]
Arguments: [cs_item_sk#19 ASC NULLS FIRST], false, 0

(95) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#30]

(96) Sort [codegen id : 51]
Input [1]: [ss_item_sk#30]
Arguments: [ss_item_sk#30 ASC NULLS FIRST], false, 0

(97) SortMergeJoin
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [ss_item_sk#30]
Join condition: None

(98) ReusedExchange [Reuses operator id: 71]
Output [1]: [d_date_sk#12]

(99) BroadcastHashJoin [codegen id : 69]
Left keys [1]: [cs_sold_date_sk#20]
Right keys [1]: [d_date_sk#12]
Join condition: None

(100) Project [codegen id : 69]
Output [3]: [cs_item_sk#19, cs_quantity#51, cs_list_price#52]
Input [5]: [cs_item_sk#19, cs_quantity#51, cs_list_price#52, cs_sold_date_sk#20, d_date_sk#12]

(101) ReusedExchange [Reuses operator id: 82]
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(102) BroadcastHashJoin [codegen id : 69]
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [i_item_sk#7]
Join condition: None

(103) Project [codegen id : 69]
Output [5]: [cs_quantity#51, cs_list_price#52, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [7]: [cs_item_sk#19, cs_quantity#51, cs_list_price#52, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(104) HashAggregate [codegen id : 69]
Input [5]: [cs_quantity#51, cs_list_price#52, i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#54, isEmpty#55, count#56]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#57, isEmpty#58, count#59]

(105) Exchange
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#57, isEmpty#58, count#59]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#60]

(106) HashAggregate [codegen id : 70]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#57, isEmpty#58, count#59]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#61, count(1)#62]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#61 AS sales#63, count(1)#62 AS number_sales#64, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#61 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#65]

(107) Filter [codegen id : 70]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#63, number_sales#64, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#65]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#65) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#65 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#48, [id=#49] as decimal(32,6))))

(108) Project [codegen id : 70]
Output [6]: [sales#63, number_sales#64, catalog AS channel#66, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#63, number_sales#64, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#52 as decimal(12,2)))), DecimalType(18,2), true))#65]

(109) Scan parquet default.web_sales
Output [4]: [ws_item_sk#24, ws_quantity#67, ws_list_price#68, ws_sold_date_sk#25]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#25), dynamicpruningexpression(ws_sold_date_sk#25 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(110) ColumnarToRow [codegen id : 71]
Input [4]: [ws_item_sk#24, ws_quantity#67, ws_list_price#68, ws_sold_date_sk#25]

(111) Filter [codegen id : 71]
Input [4]: [ws_item_sk#24, ws_quantity#67, ws_list_price#68, ws_sold_date_sk#25]
Condition : isnotnull(ws_item_sk#24)

(112) Exchange
Input [4]: [ws_item_sk#24, ws_quantity#67, ws_list_price#68, ws_sold_date_sk#25]
Arguments: hashpartitioning(ws_item_sk#24, 5), ENSURE_REQUIREMENTS, [id=#69]

(113) Sort [codegen id : 72]
Input [4]: [ws_item_sk#24, ws_quantity#67, ws_list_price#68, ws_sold_date_sk#25]
Arguments: [ws_item_sk#24 ASC NULLS FIRST], false, 0

(114) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#30]

(115) Sort [codegen id : 86]
Input [1]: [ss_item_sk#30]
Arguments: [ss_item_sk#30 ASC NULLS FIRST], false, 0

(116) SortMergeJoin
Left keys [1]: [ws_item_sk#24]
Right keys [1]: [ss_item_sk#30]
Join condition: None

(117) ReusedExchange [Reuses operator id: 71]
Output [1]: [d_date_sk#12]

(118) BroadcastHashJoin [codegen id : 104]
Left keys [1]: [ws_sold_date_sk#25]
Right keys [1]: [d_date_sk#12]
Join condition: None

(119) Project [codegen id : 104]
Output [3]: [ws_item_sk#24, ws_quantity#67, ws_list_price#68]
Input [5]: [ws_item_sk#24, ws_quantity#67, ws_list_price#68, ws_sold_date_sk#25, d_date_sk#12]

(120) ReusedExchange [Reuses operator id: 82]
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(121) BroadcastHashJoin [codegen id : 104]
Left keys [1]: [ws_item_sk#24]
Right keys [1]: [i_item_sk#7]
Join condition: None

(122) Project [codegen id : 104]
Output [5]: [ws_quantity#67, ws_list_price#68, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [7]: [ws_item_sk#24, ws_quantity#67, ws_list_price#68, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(123) HashAggregate [codegen id : 104]
Input [5]: [ws_quantity#67, ws_list_price#68, i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#70, isEmpty#71, count#72]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#73, isEmpty#74, count#75]

(124) Exchange
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#73, isEmpty#74, count#75]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#76]

(125) HashAggregate [codegen id : 105]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#73, isEmpty#74, count#75]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#77, count(1)#78]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#77 AS sales#79, count(1)#78 AS number_sales#80, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#77 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#81]

(126) Filter [codegen id : 105]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#79, number_sales#80, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#81]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#81) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#81 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#48, [id=#49] as decimal(32,6))))

(127) Project [codegen id : 105]
Output [6]: [sales#79, number_sales#80, web AS channel#82, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#79, number_sales#80, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#81]

(128) Union

(129) Expand [codegen id : 106]
Input [6]: [sales#45, number_sales#46, channel#50, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [List(sales#45, number_sales#46, channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, 0), List(sales#45, number_sales#46, channel#50, i_brand_id#8, i_class_id#9, null, 1), List(sales#45, number_sales#46, channel#50, i_brand_id#8, null, null, 3), List(sales#45, number_sales#46, channel#50, null, null, null, 7), List(sales#45, number_sales#46, null, null, null, null, 15)], [sales#45, number_sales#46, channel#83, i_brand_id#84, i_class_id#85, i_category_id#86, spark_grouping_id#87]

(130) HashAggregate [codegen id : 106]
Input [7]: [sales#45, number_sales#46, channel#83, i_brand_id#84, i_class_id#85, i_category_id#86, spark_grouping_id#87]
Keys [5]: [channel#83, i_brand_id#84, i_class_id#85, i_category_id#86, spark_grouping_id#87]
Functions [2]: [partial_sum(sales#45), partial_sum(number_sales#46)]
Aggregate Attributes [3]: [sum#88, isEmpty#89, sum#90]
Results [8]: [channel#83, i_brand_id#84, i_class_id#85, i_category_id#86, spark_grouping_id#87, sum#91, isEmpty#92, sum#93]

(131) Exchange
Input [8]: [channel#83, i_brand_id#84, i_class_id#85, i_category_id#86, spark_grouping_id#87, sum#91, isEmpty#92, sum#93]
Arguments: hashpartitioning(channel#83, i_brand_id#84, i_class_id#85, i_category_id#86, spark_grouping_id#87, 5), ENSURE_REQUIREMENTS, [id=#94]

(132) HashAggregate [codegen id : 107]
Input [8]: [channel#83, i_brand_id#84, i_class_id#85, i_category_id#86, spark_grouping_id#87, sum#91, isEmpty#92, sum#93]
Keys [5]: [channel#83, i_brand_id#84, i_class_id#85, i_category_id#86, spark_grouping_id#87]
Functions [2]: [sum(sales#45), sum(number_sales#46)]
Aggregate Attributes [2]: [sum(sales#45)#95, sum(number_sales#46)#96]
Results [6]: [channel#83, i_brand_id#84, i_class_id#85, i_category_id#86, sum(sales#45)#95 AS sum(sales)#97, sum(number_sales#46)#96 AS sum(number_sales)#98]

(133) TakeOrderedAndProject
Input [6]: [channel#83, i_brand_id#84, i_class_id#85, i_category_id#86, sum(sales)#97, sum(number_sales)#98]
Arguments: 100, [channel#83 ASC NULLS FIRST, i_brand_id#84 ASC NULLS FIRST, i_class_id#85 ASC NULLS FIRST, i_category_id#86 ASC NULLS FIRST], [channel#83, i_brand_id#84, i_class_id#85, i_category_id#86, sum(sales)#97, sum(number_sales)#98]

===== Subqueries =====

Subquery:1 Hosting operator id = 88 Hosting Expression = Subquery scalar-subquery#48, [id=#49]
* HashAggregate (156)
+- Exchange (155)
   +- * HashAggregate (154)
      +- Union (153)
         :- * Project (142)
         :  +- * BroadcastHashJoin Inner BuildRight (141)
         :     :- * ColumnarToRow (135)
         :     :  +- Scan parquet default.store_sales (134)
         :     +- BroadcastExchange (140)
         :        +- * Project (139)
         :           +- * Filter (138)
         :              +- * ColumnarToRow (137)
         :                 +- Scan parquet default.date_dim (136)
         :- * Project (147)
         :  +- * BroadcastHashJoin Inner BuildRight (146)
         :     :- * ColumnarToRow (144)
         :     :  +- Scan parquet default.catalog_sales (143)
         :     +- ReusedExchange (145)
         +- * Project (152)
            +- * BroadcastHashJoin Inner BuildRight (151)
               :- * ColumnarToRow (149)
               :  +- Scan parquet default.web_sales (148)
               +- ReusedExchange (150)


(134) Scan parquet default.store_sales
Output [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#99)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(135) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(136) Scan parquet default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(137) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#12, d_year#13]

(138) Filter [codegen id : 1]
Input [2]: [d_date_sk#12, d_year#13]
Condition : (((isnotnull(d_year#13) AND (d_year#13 >= 1999)) AND (d_year#13 <= 2001)) AND isnotnull(d_date_sk#12))

(139) Project [codegen id : 1]
Output [1]: [d_date_sk#12]
Input [2]: [d_date_sk#12, d_year#13]

(140) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#100]

(141) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#12]
Join condition: None

(142) Project [codegen id : 2]
Output [2]: [ss_quantity#2 AS quantity#101, ss_list_price#3 AS list_price#102]
Input [4]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#12]

(143) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#51, cs_list_price#52, cs_sold_date_sk#20]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#20), dynamicpruningexpression(cs_sold_date_sk#20 IN dynamicpruning#99)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(144) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#51, cs_list_price#52, cs_sold_date_sk#20]

(145) ReusedExchange [Reuses operator id: 140]
Output [1]: [d_date_sk#12]

(146) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#20]
Right keys [1]: [d_date_sk#12]
Join condition: None

(147) Project [codegen id : 4]
Output [2]: [cs_quantity#51 AS quantity#103, cs_list_price#52 AS list_price#104]
Input [4]: [cs_quantity#51, cs_list_price#52, cs_sold_date_sk#20, d_date_sk#12]

(148) Scan parquet default.web_sales
Output [3]: [ws_quantity#67, ws_list_price#68, ws_sold_date_sk#25]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#25), dynamicpruningexpression(ws_sold_date_sk#25 IN dynamicpruning#99)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(149) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#67, ws_list_price#68, ws_sold_date_sk#25]

(150) ReusedExchange [Reuses operator id: 140]
Output [1]: [d_date_sk#12]

(151) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#25]
Right keys [1]: [d_date_sk#12]
Join condition: None

(152) Project [codegen id : 6]
Output [2]: [ws_quantity#67 AS quantity#105, ws_list_price#68 AS list_price#106]
Input [4]: [ws_quantity#67, ws_list_price#68, ws_sold_date_sk#25, d_date_sk#12]

(153) Union

(154) HashAggregate [codegen id : 7]
Input [2]: [quantity#101, list_price#102]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#101 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#102 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#107, count#108]
Results [2]: [sum#109, count#110]

(155) Exchange
Input [2]: [sum#109, count#110]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#111]

(156) HashAggregate [codegen id : 8]
Input [2]: [sum#109, count#110]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#101 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#102 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#101 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#102 as decimal(12,2)))), DecimalType(18,2), true))#112]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#101 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#102 as decimal(12,2)))), DecimalType(18,2), true))#112 AS average_sales#113]

Subquery:2 Hosting operator id = 134 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#99
ReusedExchange (157)


(157) ReusedExchange [Reuses operator id: 140]
Output [1]: [d_date_sk#12]

Subquery:3 Hosting operator id = 143 Hosting Expression = cs_sold_date_sk#20 IN dynamicpruning#99

Subquery:4 Hosting operator id = 148 Hosting Expression = ws_sold_date_sk#25 IN dynamicpruning#99

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (158)


(158) ReusedExchange [Reuses operator id: 71]
Output [1]: [d_date_sk#12]

Subquery:6 Hosting operator id = 9 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#11
ReusedExchange (159)


(159) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#12]

Subquery:7 Hosting operator id = 25 Hosting Expression = cs_sold_date_sk#20 IN dynamicpruning#11

Subquery:8 Hosting operator id = 42 Hosting Expression = ws_sold_date_sk#25 IN dynamicpruning#11

Subquery:9 Hosting operator id = 107 Hosting Expression = ReusedSubquery Subquery scalar-subquery#48, [id=#49]

Subquery:10 Hosting operator id = 90 Hosting Expression = cs_sold_date_sk#20 IN dynamicpruning#5

Subquery:11 Hosting operator id = 126 Hosting Expression = ReusedSubquery Subquery scalar-subquery#48, [id=#49]

Subquery:12 Hosting operator id = 109 Hosting Expression = ws_sold_date_sk#25 IN dynamicpruning#5


