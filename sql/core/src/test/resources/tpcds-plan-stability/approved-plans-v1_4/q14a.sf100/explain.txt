== Physical Plan ==
TakeOrderedAndProject (111)
+- * HashAggregate (110)
   +- Exchange (109)
      +- * HashAggregate (108)
         +- * Expand (107)
            +- Union (106)
               :- * Project (73)
               :  +- * Filter (72)
               :     +- * HashAggregate (71)
               :        +- Exchange (70)
               :           +- * HashAggregate (69)
               :              +- * Project (68)
               :                 +- * BroadcastHashJoin Inner BuildRight (67)
               :                    :- * Project (60)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (59)
               :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (57)
               :                    :     :  :- * Filter (3)
               :                    :     :  :  +- * ColumnarToRow (2)
               :                    :     :  :     +- Scan parquet spark_catalog.default.store_sales (1)
               :                    :     :  +- BroadcastExchange (56)
               :                    :     :     +- * Project (55)
               :                    :     :        +- * BroadcastHashJoin Inner BuildRight (54)
               :                    :     :           :- * Filter (6)
               :                    :     :           :  +- * ColumnarToRow (5)
               :                    :     :           :     +- Scan parquet spark_catalog.default.item (4)
               :                    :     :           +- BroadcastExchange (53)
               :                    :     :              +- * SortMergeJoin LeftSemi (52)
               :                    :     :                 :- * Sort (40)
               :                    :     :                 :  +- Exchange (39)
               :                    :     :                 :     +- * HashAggregate (38)
               :                    :     :                 :        +- Exchange (37)
               :                    :     :                 :           +- * HashAggregate (36)
               :                    :     :                 :              +- * SortMergeJoin LeftSemi (35)
               :                    :     :                 :                 :- * Sort (20)
               :                    :     :                 :                 :  +- Exchange (19)
               :                    :     :                 :                 :     +- * Project (18)
               :                    :     :                 :                 :        +- * BroadcastHashJoin Inner BuildRight (17)
               :                    :     :                 :                 :           :- * Project (12)
               :                    :     :                 :                 :           :  +- * BroadcastHashJoin Inner BuildRight (11)
               :                    :     :                 :                 :           :     :- * Filter (9)
               :                    :     :                 :                 :           :     :  +- * ColumnarToRow (8)
               :                    :     :                 :                 :           :     :     +- Scan parquet spark_catalog.default.store_sales (7)
               :                    :     :                 :                 :           :     +- ReusedExchange (10)
               :                    :     :                 :                 :           +- BroadcastExchange (16)
               :                    :     :                 :                 :              +- * Filter (15)
               :                    :     :                 :                 :                 +- * ColumnarToRow (14)
               :                    :     :                 :                 :                    +- Scan parquet spark_catalog.default.item (13)
               :                    :     :                 :                 +- * Sort (34)
               :                    :     :                 :                    +- Exchange (33)
               :                    :     :                 :                       +- * Project (32)
               :                    :     :                 :                          +- * BroadcastHashJoin Inner BuildRight (31)
               :                    :     :                 :                             :- * Project (26)
               :                    :     :                 :                             :  +- * BroadcastHashJoin Inner BuildRight (25)
               :                    :     :                 :                             :     :- * Filter (23)
               :                    :     :                 :                             :     :  +- * ColumnarToRow (22)
               :                    :     :                 :                             :     :     +- Scan parquet spark_catalog.default.catalog_sales (21)
               :                    :     :                 :                             :     +- ReusedExchange (24)
               :                    :     :                 :                             +- BroadcastExchange (30)
               :                    :     :                 :                                +- * Filter (29)
               :                    :     :                 :                                   +- * ColumnarToRow (28)
               :                    :     :                 :                                      +- Scan parquet spark_catalog.default.item (27)
               :                    :     :                 +- * Sort (51)
               :                    :     :                    +- Exchange (50)
               :                    :     :                       +- * Project (49)
               :                    :     :                          +- * BroadcastHashJoin Inner BuildRight (48)
               :                    :     :                             :- * Project (46)
               :                    :     :                             :  +- * BroadcastHashJoin Inner BuildRight (45)
               :                    :     :                             :     :- * Filter (43)
               :                    :     :                             :     :  +- * ColumnarToRow (42)
               :                    :     :                             :     :     +- Scan parquet spark_catalog.default.web_sales (41)
               :                    :     :                             :     +- ReusedExchange (44)
               :                    :     :                             +- ReusedExchange (47)
               :                    :     +- ReusedExchange (58)
               :                    +- BroadcastExchange (66)
               :                       +- * BroadcastHashJoin LeftSemi BuildRight (65)
               :                          :- * Filter (63)
               :                          :  +- * ColumnarToRow (62)
               :                          :     +- Scan parquet spark_catalog.default.item (61)
               :                          +- ReusedExchange (64)
               :- * Project (89)
               :  +- * Filter (88)
               :     +- * HashAggregate (87)
               :        +- Exchange (86)
               :           +- * HashAggregate (85)
               :              +- * Project (84)
               :                 +- * BroadcastHashJoin Inner BuildRight (83)
               :                    :- * Project (81)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (80)
               :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (78)
               :                    :     :  :- * Filter (76)
               :                    :     :  :  +- * ColumnarToRow (75)
               :                    :     :  :     +- Scan parquet spark_catalog.default.catalog_sales (74)
               :                    :     :  +- ReusedExchange (77)
               :                    :     +- ReusedExchange (79)
               :                    +- ReusedExchange (82)
               +- * Project (105)
                  +- * Filter (104)
                     +- * HashAggregate (103)
                        +- Exchange (102)
                           +- * HashAggregate (101)
                              +- * Project (100)
                                 +- * BroadcastHashJoin Inner BuildRight (99)
                                    :- * Project (97)
                                    :  +- * BroadcastHashJoin Inner BuildRight (96)
                                    :     :- * BroadcastHashJoin LeftSemi BuildRight (94)
                                    :     :  :- * Filter (92)
                                    :     :  :  +- * ColumnarToRow (91)
                                    :     :  :     +- Scan parquet spark_catalog.default.web_sales (90)
                                    :     :  +- ReusedExchange (93)
                                    :     +- ReusedExchange (95)
                                    +- ReusedExchange (98)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 37]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 37]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 17]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(6) Filter [codegen id : 17]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(7) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 3]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]

(9) Filter [codegen id : 3]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(10) ReusedExchange [Reuses operator id: 140]
Output [1]: [d_date_sk#11]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(12) Project [codegen id : 3]
Output [1]: [ss_item_sk#1]
Input [3]: [ss_item_sk#1, ss_sold_date_sk#4, d_date_sk#11]

(13) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(14) ColumnarToRow [codegen id : 2]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(15) Filter [codegen id : 2]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : (((isnotnull(i_item_sk#6) AND isnotnull(i_brand_id#7)) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(16) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(17) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(18) Project [codegen id : 3]
Output [3]: [i_brand_id#7 AS brand_id#12, i_class_id#8 AS class_id#13, i_category_id#9 AS category_id#14]
Input [5]: [ss_item_sk#1, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(19) Exchange
Input [3]: [brand_id#12, class_id#13, category_id#14]
Arguments: hashpartitioning(coalesce(brand_id#12, 0), isnull(brand_id#12), coalesce(class_id#13, 0), isnull(class_id#13), coalesce(category_id#14, 0), isnull(category_id#14), 5), ENSURE_REQUIREMENTS, [plan_id=2]

(20) Sort [codegen id : 4]
Input [3]: [brand_id#12, class_id#13, category_id#14]
Arguments: [coalesce(brand_id#12, 0) ASC NULLS FIRST, isnull(brand_id#12) ASC NULLS FIRST, coalesce(class_id#13, 0) ASC NULLS FIRST, isnull(class_id#13) ASC NULLS FIRST, coalesce(category_id#14, 0) ASC NULLS FIRST, isnull(category_id#14) ASC NULLS FIRST], false, 0

(21) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_item_sk#15, cs_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#16), dynamicpruningexpression(cs_sold_date_sk#16 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(22) ColumnarToRow [codegen id : 7]
Input [2]: [cs_item_sk#15, cs_sold_date_sk#16]

(23) Filter [codegen id : 7]
Input [2]: [cs_item_sk#15, cs_sold_date_sk#16]
Condition : isnotnull(cs_item_sk#15)

(24) ReusedExchange [Reuses operator id: 140]
Output [1]: [d_date_sk#11]

(25) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(26) Project [codegen id : 7]
Output [1]: [cs_item_sk#15]
Input [3]: [cs_item_sk#15, cs_sold_date_sk#16, d_date_sk#11]

(27) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(28) ColumnarToRow [codegen id : 6]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(29) Filter [codegen id : 6]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : isnotnull(i_item_sk#6)

(30) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(31) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cs_item_sk#15]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(32) Project [codegen id : 7]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [cs_item_sk#15, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(33) Exchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9), 5), ENSURE_REQUIREMENTS, [plan_id=4]

(34) Sort [codegen id : 8]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: [coalesce(i_brand_id#7, 0) ASC NULLS FIRST, isnull(i_brand_id#7) ASC NULLS FIRST, coalesce(i_class_id#8, 0) ASC NULLS FIRST, isnull(i_class_id#8) ASC NULLS FIRST, coalesce(i_category_id#9, 0) ASC NULLS FIRST, isnull(i_category_id#9) ASC NULLS FIRST], false, 0

(35) SortMergeJoin [codegen id : 9]
Left keys [6]: [coalesce(brand_id#12, 0), isnull(brand_id#12), coalesce(class_id#13, 0), isnull(class_id#13), coalesce(category_id#14, 0), isnull(category_id#14)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join type: LeftSemi
Join condition: None

(36) HashAggregate [codegen id : 9]
Input [3]: [brand_id#12, class_id#13, category_id#14]
Keys [3]: [brand_id#12, class_id#13, category_id#14]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#12, class_id#13, category_id#14]

(37) Exchange
Input [3]: [brand_id#12, class_id#13, category_id#14]
Arguments: hashpartitioning(brand_id#12, class_id#13, category_id#14, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(38) HashAggregate [codegen id : 10]
Input [3]: [brand_id#12, class_id#13, category_id#14]
Keys [3]: [brand_id#12, class_id#13, category_id#14]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#12, class_id#13, category_id#14]

(39) Exchange
Input [3]: [brand_id#12, class_id#13, category_id#14]
Arguments: hashpartitioning(coalesce(brand_id#12, 0), isnull(brand_id#12), coalesce(class_id#13, 0), isnull(class_id#13), coalesce(category_id#14, 0), isnull(category_id#14), 5), ENSURE_REQUIREMENTS, [plan_id=6]

(40) Sort [codegen id : 11]
Input [3]: [brand_id#12, class_id#13, category_id#14]
Arguments: [coalesce(brand_id#12, 0) ASC NULLS FIRST, isnull(brand_id#12) ASC NULLS FIRST, coalesce(class_id#13, 0) ASC NULLS FIRST, isnull(class_id#13) ASC NULLS FIRST, coalesce(category_id#14, 0) ASC NULLS FIRST, isnull(category_id#14) ASC NULLS FIRST], false, 0

(41) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_item_sk#17, ws_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#18), dynamicpruningexpression(ws_sold_date_sk#18 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(42) ColumnarToRow [codegen id : 14]
Input [2]: [ws_item_sk#17, ws_sold_date_sk#18]

(43) Filter [codegen id : 14]
Input [2]: [ws_item_sk#17, ws_sold_date_sk#18]
Condition : isnotnull(ws_item_sk#17)

(44) ReusedExchange [Reuses operator id: 140]
Output [1]: [d_date_sk#11]

(45) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_sold_date_sk#18]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(46) Project [codegen id : 14]
Output [1]: [ws_item_sk#17]
Input [3]: [ws_item_sk#17, ws_sold_date_sk#18, d_date_sk#11]

(47) ReusedExchange [Reuses operator id: 30]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(48) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_item_sk#17]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(49) Project [codegen id : 14]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [ws_item_sk#17, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(50) Exchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9), 5), ENSURE_REQUIREMENTS, [plan_id=7]

(51) Sort [codegen id : 15]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: [coalesce(i_brand_id#7, 0) ASC NULLS FIRST, isnull(i_brand_id#7) ASC NULLS FIRST, coalesce(i_class_id#8, 0) ASC NULLS FIRST, isnull(i_class_id#8) ASC NULLS FIRST, coalesce(i_category_id#9, 0) ASC NULLS FIRST, isnull(i_category_id#9) ASC NULLS FIRST], false, 0

(52) SortMergeJoin [codegen id : 16]
Left keys [6]: [coalesce(brand_id#12, 0), isnull(brand_id#12), coalesce(class_id#13, 0), isnull(class_id#13), coalesce(category_id#14, 0), isnull(category_id#14)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join type: LeftSemi
Join condition: None

(53) BroadcastExchange
Input [3]: [brand_id#12, class_id#13, category_id#14]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [plan_id=8]

(54) BroadcastHashJoin [codegen id : 17]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#12, class_id#13, category_id#14]
Join type: Inner
Join condition: None

(55) Project [codegen id : 17]
Output [1]: [i_item_sk#6 AS ss_item_sk#19]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#12, class_id#13, category_id#14]

(56) BroadcastExchange
Input [1]: [ss_item_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

(57) BroadcastHashJoin [codegen id : 37]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#19]
Join type: LeftSemi
Join condition: None

(58) ReusedExchange [Reuses operator id: 135]
Output [1]: [d_date_sk#11]

(59) BroadcastHashJoin [codegen id : 37]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(60) Project [codegen id : 37]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#11]

(61) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(62) ColumnarToRow [codegen id : 36]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(63) Filter [codegen id : 36]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : isnotnull(i_item_sk#6)

(64) ReusedExchange [Reuses operator id: 56]
Output [1]: [ss_item_sk#19]

(65) BroadcastHashJoin [codegen id : 36]
Left keys [1]: [i_item_sk#6]
Right keys [1]: [ss_item_sk#19]
Join type: LeftSemi
Join condition: None

(66) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=10]

(67) BroadcastHashJoin [codegen id : 37]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(68) Project [codegen id : 37]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(69) HashAggregate [codegen id : 37]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), partial_count(1)]
Aggregate Attributes [3]: [sum#20, isEmpty#21, count#22]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#23, isEmpty#24, count#25]

(70) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#23, isEmpty#24, count#25]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(71) HashAggregate [codegen id : 38]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#23, isEmpty#24, count#25]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#26, count(1)#27]
Results [5]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#26 AS sales#28, count(1)#27 AS number_sales#29]

(72) Filter [codegen id : 38]
Input [5]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#28, number_sales#29]
Condition : (isnotnull(sales#28) AND (cast(sales#28 as decimal(32,6)) > cast(Subquery scalar-subquery#30, [id=#31] as decimal(32,6))))

(73) Project [codegen id : 38]
Output [6]: [sales#28, number_sales#29, store AS channel#32, i_brand_id#7 AS i_brand_id#33, i_class_id#8 AS i_class_id#34, i_category_id#9 AS i_category_id#35]
Input [5]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#28, number_sales#29]

(74) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_item_sk#15, cs_quantity#36, cs_list_price#37, cs_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#16), dynamicpruningexpression(cs_sold_date_sk#16 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(75) ColumnarToRow [codegen id : 75]
Input [4]: [cs_item_sk#15, cs_quantity#36, cs_list_price#37, cs_sold_date_sk#16]

(76) Filter [codegen id : 75]
Input [4]: [cs_item_sk#15, cs_quantity#36, cs_list_price#37, cs_sold_date_sk#16]
Condition : isnotnull(cs_item_sk#15)

(77) ReusedExchange [Reuses operator id: 56]
Output [1]: [ss_item_sk#19]

(78) BroadcastHashJoin [codegen id : 75]
Left keys [1]: [cs_item_sk#15]
Right keys [1]: [ss_item_sk#19]
Join type: LeftSemi
Join condition: None

(79) ReusedExchange [Reuses operator id: 135]
Output [1]: [d_date_sk#11]

(80) BroadcastHashJoin [codegen id : 75]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(81) Project [codegen id : 75]
Output [3]: [cs_item_sk#15, cs_quantity#36, cs_list_price#37]
Input [5]: [cs_item_sk#15, cs_quantity#36, cs_list_price#37, cs_sold_date_sk#16, d_date_sk#11]

(82) ReusedExchange [Reuses operator id: 66]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(83) BroadcastHashJoin [codegen id : 75]
Left keys [1]: [cs_item_sk#15]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(84) Project [codegen id : 75]
Output [5]: [cs_quantity#36, cs_list_price#37, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [cs_item_sk#15, cs_quantity#36, cs_list_price#37, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(85) HashAggregate [codegen id : 75]
Input [5]: [cs_quantity#36, cs_list_price#37, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum((cast(cs_quantity#36 as decimal(10,0)) * cs_list_price#37)), partial_count(1)]
Aggregate Attributes [3]: [sum#38, isEmpty#39, count#40]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#41, isEmpty#42, count#43]

(86) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#41, isEmpty#42, count#43]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(87) HashAggregate [codegen id : 76]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#41, isEmpty#42, count#43]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum((cast(cs_quantity#36 as decimal(10,0)) * cs_list_price#37)), count(1)]
Aggregate Attributes [2]: [sum((cast(cs_quantity#36 as decimal(10,0)) * cs_list_price#37))#44, count(1)#45]
Results [5]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum((cast(cs_quantity#36 as decimal(10,0)) * cs_list_price#37))#44 AS sales#46, count(1)#45 AS number_sales#47]

(88) Filter [codegen id : 76]
Input [5]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#46, number_sales#47]
Condition : (isnotnull(sales#46) AND (cast(sales#46 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#30, [id=#31] as decimal(32,6))))

(89) Project [codegen id : 76]
Output [6]: [sales#46, number_sales#47, catalog AS channel#48, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#46, number_sales#47]

(90) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#17, ws_quantity#49, ws_list_price#50, ws_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#18), dynamicpruningexpression(ws_sold_date_sk#18 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(91) ColumnarToRow [codegen id : 113]
Input [4]: [ws_item_sk#17, ws_quantity#49, ws_list_price#50, ws_sold_date_sk#18]

(92) Filter [codegen id : 113]
Input [4]: [ws_item_sk#17, ws_quantity#49, ws_list_price#50, ws_sold_date_sk#18]
Condition : isnotnull(ws_item_sk#17)

(93) ReusedExchange [Reuses operator id: 56]
Output [1]: [ss_item_sk#19]

(94) BroadcastHashJoin [codegen id : 113]
Left keys [1]: [ws_item_sk#17]
Right keys [1]: [ss_item_sk#19]
Join type: LeftSemi
Join condition: None

(95) ReusedExchange [Reuses operator id: 135]
Output [1]: [d_date_sk#11]

(96) BroadcastHashJoin [codegen id : 113]
Left keys [1]: [ws_sold_date_sk#18]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(97) Project [codegen id : 113]
Output [3]: [ws_item_sk#17, ws_quantity#49, ws_list_price#50]
Input [5]: [ws_item_sk#17, ws_quantity#49, ws_list_price#50, ws_sold_date_sk#18, d_date_sk#11]

(98) ReusedExchange [Reuses operator id: 66]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(99) BroadcastHashJoin [codegen id : 113]
Left keys [1]: [ws_item_sk#17]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(100) Project [codegen id : 113]
Output [5]: [ws_quantity#49, ws_list_price#50, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ws_item_sk#17, ws_quantity#49, ws_list_price#50, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(101) HashAggregate [codegen id : 113]
Input [5]: [ws_quantity#49, ws_list_price#50, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum((cast(ws_quantity#49 as decimal(10,0)) * ws_list_price#50)), partial_count(1)]
Aggregate Attributes [3]: [sum#51, isEmpty#52, count#53]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#54, isEmpty#55, count#56]

(102) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#54, isEmpty#55, count#56]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(103) HashAggregate [codegen id : 114]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#54, isEmpty#55, count#56]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum((cast(ws_quantity#49 as decimal(10,0)) * ws_list_price#50)), count(1)]
Aggregate Attributes [2]: [sum((cast(ws_quantity#49 as decimal(10,0)) * ws_list_price#50))#57, count(1)#58]
Results [5]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum((cast(ws_quantity#49 as decimal(10,0)) * ws_list_price#50))#57 AS sales#59, count(1)#58 AS number_sales#60]

(104) Filter [codegen id : 114]
Input [5]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#59, number_sales#60]
Condition : (isnotnull(sales#59) AND (cast(sales#59 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#30, [id=#31] as decimal(32,6))))

(105) Project [codegen id : 114]
Output [6]: [sales#59, number_sales#60, web AS channel#61, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#59, number_sales#60]

(106) Union

(107) Expand [codegen id : 115]
Input [6]: [sales#28, number_sales#29, channel#32, i_brand_id#33, i_class_id#34, i_category_id#35]
Arguments: [[sales#28, number_sales#29, channel#32, i_brand_id#33, i_class_id#34, i_category_id#35, 0], [sales#28, number_sales#29, channel#32, i_brand_id#33, i_class_id#34, null, 1], [sales#28, number_sales#29, channel#32, i_brand_id#33, null, null, 3], [sales#28, number_sales#29, channel#32, null, null, null, 7], [sales#28, number_sales#29, null, null, null, null, 15]], [sales#28, number_sales#29, channel#62, i_brand_id#63, i_class_id#64, i_category_id#65, spark_grouping_id#66]

(108) HashAggregate [codegen id : 115]
Input [7]: [sales#28, number_sales#29, channel#62, i_brand_id#63, i_class_id#64, i_category_id#65, spark_grouping_id#66]
Keys [5]: [channel#62, i_brand_id#63, i_class_id#64, i_category_id#65, spark_grouping_id#66]
Functions [2]: [partial_sum(sales#28), partial_sum(number_sales#29)]
Aggregate Attributes [3]: [sum#67, isEmpty#68, sum#69]
Results [8]: [channel#62, i_brand_id#63, i_class_id#64, i_category_id#65, spark_grouping_id#66, sum#70, isEmpty#71, sum#72]

(109) Exchange
Input [8]: [channel#62, i_brand_id#63, i_class_id#64, i_category_id#65, spark_grouping_id#66, sum#70, isEmpty#71, sum#72]
Arguments: hashpartitioning(channel#62, i_brand_id#63, i_class_id#64, i_category_id#65, spark_grouping_id#66, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(110) HashAggregate [codegen id : 116]
Input [8]: [channel#62, i_brand_id#63, i_class_id#64, i_category_id#65, spark_grouping_id#66, sum#70, isEmpty#71, sum#72]
Keys [5]: [channel#62, i_brand_id#63, i_class_id#64, i_category_id#65, spark_grouping_id#66]
Functions [2]: [sum(sales#28), sum(number_sales#29)]
Aggregate Attributes [2]: [sum(sales#28)#73, sum(number_sales#29)#74]
Results [6]: [channel#62, i_brand_id#63, i_class_id#64, i_category_id#65, sum(sales#28)#73 AS sum(sales)#75, sum(number_sales#29)#74 AS sum(number_sales)#76]

(111) TakeOrderedAndProject
Input [6]: [channel#62, i_brand_id#63, i_class_id#64, i_category_id#65, sum(sales)#75, sum(number_sales)#76]
Arguments: 100, [channel#62 ASC NULLS FIRST, i_brand_id#63 ASC NULLS FIRST, i_class_id#64 ASC NULLS FIRST, i_category_id#65 ASC NULLS FIRST], [channel#62, i_brand_id#63, i_class_id#64, i_category_id#65, sum(sales)#75, sum(number_sales)#76]

===== Subqueries =====

Subquery:1 Hosting operator id = 72 Hosting Expression = Subquery scalar-subquery#30, [id=#31]
* HashAggregate (130)
+- Exchange (129)
   +- * HashAggregate (128)
      +- Union (127)
         :- * Project (116)
         :  +- * BroadcastHashJoin Inner BuildRight (115)
         :     :- * ColumnarToRow (113)
         :     :  +- Scan parquet spark_catalog.default.store_sales (112)
         :     +- ReusedExchange (114)
         :- * Project (121)
         :  +- * BroadcastHashJoin Inner BuildRight (120)
         :     :- * ColumnarToRow (118)
         :     :  +- Scan parquet spark_catalog.default.catalog_sales (117)
         :     +- ReusedExchange (119)
         +- * Project (126)
            +- * BroadcastHashJoin Inner BuildRight (125)
               :- * ColumnarToRow (123)
               :  +- Scan parquet spark_catalog.default.web_sales (122)
               +- ReusedExchange (124)


(112) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#10)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(113) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(114) ReusedExchange [Reuses operator id: 140]
Output [1]: [d_date_sk#11]

(115) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(116) Project [codegen id : 2]
Output [2]: [ss_quantity#2 AS quantity#77, ss_list_price#3 AS list_price#78]
Input [4]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#11]

(117) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_quantity#36, cs_list_price#37, cs_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#16), dynamicpruningexpression(cs_sold_date_sk#16 IN dynamicpruning#10)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(118) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#36, cs_list_price#37, cs_sold_date_sk#16]

(119) ReusedExchange [Reuses operator id: 140]
Output [1]: [d_date_sk#11]

(120) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(121) Project [codegen id : 4]
Output [2]: [cs_quantity#36 AS quantity#79, cs_list_price#37 AS list_price#80]
Input [4]: [cs_quantity#36, cs_list_price#37, cs_sold_date_sk#16, d_date_sk#11]

(122) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_quantity#49, ws_list_price#50, ws_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#18), dynamicpruningexpression(ws_sold_date_sk#18 IN dynamicpruning#10)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(123) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#49, ws_list_price#50, ws_sold_date_sk#18]

(124) ReusedExchange [Reuses operator id: 140]
Output [1]: [d_date_sk#11]

(125) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#18]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(126) Project [codegen id : 6]
Output [2]: [ws_quantity#49 AS quantity#81, ws_list_price#50 AS list_price#82]
Input [4]: [ws_quantity#49, ws_list_price#50, ws_sold_date_sk#18, d_date_sk#11]

(127) Union

(128) HashAggregate [codegen id : 7]
Input [2]: [quantity#77, list_price#78]
Keys: []
Functions [1]: [partial_avg((cast(quantity#77 as decimal(10,0)) * list_price#78))]
Aggregate Attributes [2]: [sum#83, count#84]
Results [2]: [sum#85, count#86]

(129) Exchange
Input [2]: [sum#85, count#86]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=15]

(130) HashAggregate [codegen id : 8]
Input [2]: [sum#85, count#86]
Keys: []
Functions [1]: [avg((cast(quantity#77 as decimal(10,0)) * list_price#78))]
Aggregate Attributes [1]: [avg((cast(quantity#77 as decimal(10,0)) * list_price#78))#87]
Results [1]: [avg((cast(quantity#77 as decimal(10,0)) * list_price#78))#87 AS average_sales#88]

Subquery:2 Hosting operator id = 112 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#10

Subquery:3 Hosting operator id = 117 Hosting Expression = cs_sold_date_sk#16 IN dynamicpruning#10

Subquery:4 Hosting operator id = 122 Hosting Expression = ws_sold_date_sk#18 IN dynamicpruning#10

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (135)
+- * Project (134)
   +- * Filter (133)
      +- * ColumnarToRow (132)
         +- Scan parquet spark_catalog.default.date_dim (131)


(131) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#11, d_year#89, d_moy#90]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(132) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#11, d_year#89, d_moy#90]

(133) Filter [codegen id : 1]
Input [3]: [d_date_sk#11, d_year#89, d_moy#90]
Condition : ((((isnotnull(d_year#89) AND isnotnull(d_moy#90)) AND (d_year#89 = 2001)) AND (d_moy#90 = 11)) AND isnotnull(d_date_sk#11))

(134) Project [codegen id : 1]
Output [1]: [d_date_sk#11]
Input [3]: [d_date_sk#11, d_year#89, d_moy#90]

(135) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=16]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#10
BroadcastExchange (140)
+- * Project (139)
   +- * Filter (138)
      +- * ColumnarToRow (137)
         +- Scan parquet spark_catalog.default.date_dim (136)


(136) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#11, d_year#89]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(137) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#11, d_year#89]

(138) Filter [codegen id : 1]
Input [2]: [d_date_sk#11, d_year#89]
Condition : (((isnotnull(d_year#89) AND (d_year#89 >= 1999)) AND (d_year#89 <= 2001)) AND isnotnull(d_date_sk#11))

(139) Project [codegen id : 1]
Output [1]: [d_date_sk#11]
Input [2]: [d_date_sk#11, d_year#89]

(140) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=17]

Subquery:7 Hosting operator id = 21 Hosting Expression = cs_sold_date_sk#16 IN dynamicpruning#10

Subquery:8 Hosting operator id = 41 Hosting Expression = ws_sold_date_sk#18 IN dynamicpruning#10

Subquery:9 Hosting operator id = 88 Hosting Expression = ReusedSubquery Subquery scalar-subquery#30, [id=#31]

Subquery:10 Hosting operator id = 74 Hosting Expression = cs_sold_date_sk#16 IN dynamicpruning#5

Subquery:11 Hosting operator id = 104 Hosting Expression = ReusedSubquery Subquery scalar-subquery#30, [id=#31]

Subquery:12 Hosting operator id = 90 Hosting Expression = ws_sold_date_sk#18 IN dynamicpruning#5


