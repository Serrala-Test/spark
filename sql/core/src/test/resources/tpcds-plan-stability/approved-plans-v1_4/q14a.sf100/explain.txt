== Physical Plan ==
TakeOrderedAndProject (131)
+- * HashAggregate (130)
   +- Exchange (129)
      +- * HashAggregate (128)
         +- * Expand (127)
            +- Union (126)
               :- * Project (87)
               :  +- * Filter (86)
               :     +- * HashAggregate (85)
               :        +- Exchange (84)
               :           +- * HashAggregate (83)
               :              +- * Project (82)
               :                 +- * BroadcastHashJoin Inner BuildRight (81)
               :                    :- * Project (71)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (70)
               :                    :     :- SortMergeJoin LeftSemi (64)
               :                    :     :  :- * Sort (5)
               :                    :     :  :  +- Exchange (4)
               :                    :     :  :     +- * Filter (3)
               :                    :     :  :        +- * ColumnarToRow (2)
               :                    :     :  :           +- Scan parquet default.store_sales (1)
               :                    :     :  +- * Sort (63)
               :                    :     :     +- Exchange (62)
               :                    :     :        +- * Project (61)
               :                    :     :           +- * BroadcastHashJoin Inner BuildRight (60)
               :                    :     :              :- * Filter (8)
               :                    :     :              :  +- * ColumnarToRow (7)
               :                    :     :              :     +- Scan parquet default.item (6)
               :                    :     :              +- BroadcastExchange (59)
               :                    :     :                 +- * HashAggregate (58)
               :                    :     :                    +- Exchange (57)
               :                    :     :                       +- * HashAggregate (56)
               :                    :     :                          +- * Project (55)
               :                    :     :                             +- * BroadcastHashJoin Inner BuildRight (54)
               :                    :     :                                :- * Project (18)
               :                    :     :                                :  +- * BroadcastHashJoin Inner BuildRight (17)
               :                    :     :                                :     :- * Filter (11)
               :                    :     :                                :     :  +- * ColumnarToRow (10)
               :                    :     :                                :     :     +- Scan parquet default.store_sales (9)
               :                    :     :                                :     +- BroadcastExchange (16)
               :                    :     :                                :        +- * Project (15)
               :                    :     :                                :           +- * Filter (14)
               :                    :     :                                :              +- * ColumnarToRow (13)
               :                    :     :                                :                 +- Scan parquet default.date_dim (12)
               :                    :     :                                +- BroadcastExchange (53)
               :                    :     :                                   +- * BroadcastHashJoin LeftSemi BuildRight (52)
               :                    :     :                                      :- * BroadcastHashJoin LeftSemi BuildRight (38)
               :                    :     :                                      :  :- * Filter (21)
               :                    :     :                                      :  :  +- * ColumnarToRow (20)
               :                    :     :                                      :  :     +- Scan parquet default.item (19)
               :                    :     :                                      :  +- BroadcastExchange (37)
               :                    :     :                                      :     +- * HashAggregate (36)
               :                    :     :                                      :        +- Exchange (35)
               :                    :     :                                      :           +- * HashAggregate (34)
               :                    :     :                                      :              +- * Project (33)
               :                    :     :                                      :                 +- * BroadcastHashJoin Inner BuildRight (32)
               :                    :     :                                      :                    :- * Project (27)
               :                    :     :                                      :                    :  +- * BroadcastHashJoin Inner BuildRight (26)
               :                    :     :                                      :                    :     :- * Filter (24)
               :                    :     :                                      :                    :     :  +- * ColumnarToRow (23)
               :                    :     :                                      :                    :     :     +- Scan parquet default.catalog_sales (22)
               :                    :     :                                      :                    :     +- ReusedExchange (25)
               :                    :     :                                      :                    +- BroadcastExchange (31)
               :                    :     :                                      :                       +- * Filter (30)
               :                    :     :                                      :                          +- * ColumnarToRow (29)
               :                    :     :                                      :                             +- Scan parquet default.item (28)
               :                    :     :                                      +- BroadcastExchange (51)
               :                    :     :                                         +- * HashAggregate (50)
               :                    :     :                                            +- Exchange (49)
               :                    :     :                                               +- * HashAggregate (48)
               :                    :     :                                                  +- * Project (47)
               :                    :     :                                                     +- * BroadcastHashJoin Inner BuildRight (46)
               :                    :     :                                                        :- * Project (44)
               :                    :     :                                                        :  +- * BroadcastHashJoin Inner BuildRight (43)
               :                    :     :                                                        :     :- * Filter (41)
               :                    :     :                                                        :     :  +- * ColumnarToRow (40)
               :                    :     :                                                        :     :     +- Scan parquet default.web_sales (39)
               :                    :     :                                                        :     +- ReusedExchange (42)
               :                    :     :                                                        +- ReusedExchange (45)
               :                    :     +- BroadcastExchange (69)
               :                    :        +- * Project (68)
               :                    :           +- * Filter (67)
               :                    :              +- * ColumnarToRow (66)
               :                    :                 +- Scan parquet default.date_dim (65)
               :                    +- BroadcastExchange (80)
               :                       +- SortMergeJoin LeftSemi (79)
               :                          :- * Sort (76)
               :                          :  +- Exchange (75)
               :                          :     +- * Filter (74)
               :                          :        +- * ColumnarToRow (73)
               :                          :           +- Scan parquet default.item (72)
               :                          +- * Sort (78)
               :                             +- ReusedExchange (77)
               :- * Project (106)
               :  +- * Filter (105)
               :     +- * HashAggregate (104)
               :        +- Exchange (103)
               :           +- * HashAggregate (102)
               :              +- * Project (101)
               :                 +- * BroadcastHashJoin Inner BuildRight (100)
               :                    :- * Project (98)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (97)
               :                    :     :- SortMergeJoin LeftSemi (95)
               :                    :     :  :- * Sort (92)
               :                    :     :  :  +- Exchange (91)
               :                    :     :  :     +- * Filter (90)
               :                    :     :  :        +- * ColumnarToRow (89)
               :                    :     :  :           +- Scan parquet default.catalog_sales (88)
               :                    :     :  +- * Sort (94)
               :                    :     :     +- ReusedExchange (93)
               :                    :     +- ReusedExchange (96)
               :                    +- ReusedExchange (99)
               +- * Project (125)
                  +- * Filter (124)
                     +- * HashAggregate (123)
                        +- Exchange (122)
                           +- * HashAggregate (121)
                              +- * Project (120)
                                 +- * BroadcastHashJoin Inner BuildRight (119)
                                    :- * Project (117)
                                    :  +- * BroadcastHashJoin Inner BuildRight (116)
                                    :     :- SortMergeJoin LeftSemi (114)
                                    :     :  :- * Sort (111)
                                    :     :  :  +- Exchange (110)
                                    :     :  :     +- * Filter (109)
                                    :     :  :        +- * ColumnarToRow (108)
                                    :     :  :           +- Scan parquet default.web_sales (107)
                                    :     :  +- * Sort (113)
                                    :     :     +- ReusedExchange (112)
                                    :     +- ReusedExchange (115)
                                    +- ReusedExchange (118)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 15]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(8) Filter [codegen id : 15]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(9) Scan parquet default.store_sales
Output [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(10) ColumnarToRow [codegen id : 13]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]

(11) Filter [codegen id : 13]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Condition : isnotnull(ss_item_sk#11)

(12) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(13) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#14, d_year#15]

(14) Filter [codegen id : 3]
Input [2]: [d_date_sk#14, d_year#15]
Condition : (((isnotnull(d_year#15) AND (d_year#15 >= 1999)) AND (d_year#15 <= 2001)) AND isnotnull(d_date_sk#14))

(15) Project [codegen id : 3]
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#15]

(16) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(17) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_sold_date_sk#12]
Right keys [1]: [d_date_sk#14]
Join condition: None

(18) Project [codegen id : 13]
Output [1]: [ss_item_sk#11]
Input [3]: [ss_item_sk#11, ss_sold_date_sk#12, d_date_sk#14]

(19) Scan parquet default.item
Output [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(20) ColumnarToRow [codegen id : 12]
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]

(21) Filter [codegen id : 12]
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Condition : (((isnotnull(i_item_sk#17) AND isnotnull(i_brand_id#18)) AND isnotnull(i_class_id#19)) AND isnotnull(i_category_id#20))

(22) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#21, cs_sold_date_sk#22]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#22), dynamicpruningexpression(cs_sold_date_sk#22 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(23) ColumnarToRow [codegen id : 6]
Input [2]: [cs_item_sk#21, cs_sold_date_sk#22]

(24) Filter [codegen id : 6]
Input [2]: [cs_item_sk#21, cs_sold_date_sk#22]
Condition : isnotnull(cs_item_sk#21)

(25) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#23]

(26) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#22]
Right keys [1]: [d_date_sk#23]
Join condition: None

(27) Project [codegen id : 6]
Output [1]: [cs_item_sk#21]
Input [3]: [cs_item_sk#21, cs_sold_date_sk#22, d_date_sk#23]

(28) Scan parquet default.item
Output [4]: [i_item_sk#24, i_brand_id#25, i_class_id#26, i_category_id#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(29) ColumnarToRow [codegen id : 5]
Input [4]: [i_item_sk#24, i_brand_id#25, i_class_id#26, i_category_id#27]

(30) Filter [codegen id : 5]
Input [4]: [i_item_sk#24, i_brand_id#25, i_class_id#26, i_category_id#27]
Condition : isnotnull(i_item_sk#24)

(31) BroadcastExchange
Input [4]: [i_item_sk#24, i_brand_id#25, i_class_id#26, i_category_id#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28]

(32) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_item_sk#21]
Right keys [1]: [i_item_sk#24]
Join condition: None

(33) Project [codegen id : 6]
Output [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]
Input [5]: [cs_item_sk#21, i_item_sk#24, i_brand_id#25, i_class_id#26, i_category_id#27]

(34) HashAggregate [codegen id : 6]
Input [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]
Keys [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]

(35) Exchange
Input [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]
Arguments: hashpartitioning(i_brand_id#25, i_class_id#26, i_category_id#27, 5), ENSURE_REQUIREMENTS, [id=#29]

(36) HashAggregate [codegen id : 7]
Input [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]
Keys [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]

(37) BroadcastExchange
Input [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#30]

(38) BroadcastHashJoin [codegen id : 12]
Left keys [6]: [coalesce(i_brand_id#18, 0), isnull(i_brand_id#18), coalesce(i_class_id#19, 0), isnull(i_class_id#19), coalesce(i_category_id#20, 0), isnull(i_category_id#20)]
Right keys [6]: [coalesce(i_brand_id#25, 0), isnull(i_brand_id#25), coalesce(i_class_id#26, 0), isnull(i_class_id#26), coalesce(i_category_id#27, 0), isnull(i_category_id#27)]
Join condition: None

(39) Scan parquet default.web_sales
Output [2]: [ws_item_sk#31, ws_sold_date_sk#32]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#32), dynamicpruningexpression(ws_sold_date_sk#32 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(40) ColumnarToRow [codegen id : 10]
Input [2]: [ws_item_sk#31, ws_sold_date_sk#32]

(41) Filter [codegen id : 10]
Input [2]: [ws_item_sk#31, ws_sold_date_sk#32]
Condition : isnotnull(ws_item_sk#31)

(42) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#33]

(43) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_sold_date_sk#32]
Right keys [1]: [d_date_sk#33]
Join condition: None

(44) Project [codegen id : 10]
Output [1]: [ws_item_sk#31]
Input [3]: [ws_item_sk#31, ws_sold_date_sk#32, d_date_sk#33]

(45) ReusedExchange [Reuses operator id: 31]
Output [4]: [i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]

(46) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_item_sk#31]
Right keys [1]: [i_item_sk#34]
Join condition: None

(47) Project [codegen id : 10]
Output [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Input [5]: [ws_item_sk#31, i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]

(48) HashAggregate [codegen id : 10]
Input [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Keys [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]

(49) Exchange
Input [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Arguments: hashpartitioning(i_brand_id#35, i_class_id#36, i_category_id#37, 5), ENSURE_REQUIREMENTS, [id=#38]

(50) HashAggregate [codegen id : 11]
Input [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Keys [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]

(51) BroadcastExchange
Input [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#39]

(52) BroadcastHashJoin [codegen id : 12]
Left keys [6]: [coalesce(i_brand_id#18, 0), isnull(i_brand_id#18), coalesce(i_class_id#19, 0), isnull(i_class_id#19), coalesce(i_category_id#20, 0), isnull(i_category_id#20)]
Right keys [6]: [coalesce(i_brand_id#35, 0), isnull(i_brand_id#35), coalesce(i_class_id#36, 0), isnull(i_class_id#36), coalesce(i_category_id#37, 0), isnull(i_category_id#37)]
Join condition: None

(53) BroadcastExchange
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#40]

(54) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_item_sk#11]
Right keys [1]: [i_item_sk#17]
Join condition: None

(55) Project [codegen id : 13]
Output [3]: [i_brand_id#18 AS brand_id#41, i_class_id#19 AS class_id#42, i_category_id#20 AS category_id#43]
Input [5]: [ss_item_sk#11, i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]

(56) HashAggregate [codegen id : 13]
Input [3]: [brand_id#41, class_id#42, category_id#43]
Keys [3]: [brand_id#41, class_id#42, category_id#43]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#41, class_id#42, category_id#43]

(57) Exchange
Input [3]: [brand_id#41, class_id#42, category_id#43]
Arguments: hashpartitioning(brand_id#41, class_id#42, category_id#43, 5), ENSURE_REQUIREMENTS, [id=#44]

(58) HashAggregate [codegen id : 14]
Input [3]: [brand_id#41, class_id#42, category_id#43]
Keys [3]: [brand_id#41, class_id#42, category_id#43]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#41, class_id#42, category_id#43]

(59) BroadcastExchange
Input [3]: [brand_id#41, class_id#42, category_id#43]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#45]

(60) BroadcastHashJoin [codegen id : 15]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#41, class_id#42, category_id#43]
Join condition: None

(61) Project [codegen id : 15]
Output [1]: [i_item_sk#7 AS ss_item_sk#46]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#41, class_id#42, category_id#43]

(62) Exchange
Input [1]: [ss_item_sk#46]
Arguments: hashpartitioning(ss_item_sk#46, 5), ENSURE_REQUIREMENTS, [id=#47]

(63) Sort [codegen id : 16]
Input [1]: [ss_item_sk#46]
Arguments: [ss_item_sk#46 ASC NULLS FIRST], false, 0

(64) SortMergeJoin
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#46]
Join condition: None

(65) Scan parquet default.date_dim
Output [3]: [d_date_sk#48, d_year#49, d_moy#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(66) ColumnarToRow [codegen id : 17]
Input [3]: [d_date_sk#48, d_year#49, d_moy#50]

(67) Filter [codegen id : 17]
Input [3]: [d_date_sk#48, d_year#49, d_moy#50]
Condition : ((((isnotnull(d_year#49) AND isnotnull(d_moy#50)) AND (d_year#49 = 2001)) AND (d_moy#50 = 11)) AND isnotnull(d_date_sk#48))

(68) Project [codegen id : 17]
Output [1]: [d_date_sk#48]
Input [3]: [d_date_sk#48, d_year#49, d_moy#50]

(69) BroadcastExchange
Input [1]: [d_date_sk#48]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#51]

(70) BroadcastHashJoin [codegen id : 34]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#48]
Join condition: None

(71) Project [codegen id : 34]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#48]

(72) Scan parquet default.item
Output [4]: [i_item_sk#52, i_brand_id#53, i_class_id#54, i_category_id#55]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(73) ColumnarToRow [codegen id : 18]
Input [4]: [i_item_sk#52, i_brand_id#53, i_class_id#54, i_category_id#55]

(74) Filter [codegen id : 18]
Input [4]: [i_item_sk#52, i_brand_id#53, i_class_id#54, i_category_id#55]
Condition : isnotnull(i_item_sk#52)

(75) Exchange
Input [4]: [i_item_sk#52, i_brand_id#53, i_class_id#54, i_category_id#55]
Arguments: hashpartitioning(i_item_sk#52, 5), ENSURE_REQUIREMENTS, [id=#56]

(76) Sort [codegen id : 19]
Input [4]: [i_item_sk#52, i_brand_id#53, i_class_id#54, i_category_id#55]
Arguments: [i_item_sk#52 ASC NULLS FIRST], false, 0

(77) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#46]

(78) Sort [codegen id : 33]
Input [1]: [ss_item_sk#46]
Arguments: [ss_item_sk#46 ASC NULLS FIRST], false, 0

(79) SortMergeJoin
Left keys [1]: [i_item_sk#52]
Right keys [1]: [ss_item_sk#46]
Join condition: None

(80) BroadcastExchange
Input [4]: [i_item_sk#52, i_brand_id#53, i_class_id#54, i_category_id#55]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#57]

(81) BroadcastHashJoin [codegen id : 34]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#52]
Join condition: None

(82) Project [codegen id : 34]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#53, i_class_id#54, i_category_id#55]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#52, i_brand_id#53, i_class_id#54, i_category_id#55]

(83) HashAggregate [codegen id : 34]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#53, i_class_id#54, i_category_id#55]
Keys [3]: [i_brand_id#53, i_class_id#54, i_category_id#55]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#58, isEmpty#59, count#60]
Results [6]: [i_brand_id#53, i_class_id#54, i_category_id#55, sum#61, isEmpty#62, count#63]

(84) Exchange
Input [6]: [i_brand_id#53, i_class_id#54, i_category_id#55, sum#61, isEmpty#62, count#63]
Arguments: hashpartitioning(i_brand_id#53, i_class_id#54, i_category_id#55, 5), ENSURE_REQUIREMENTS, [id=#64]

(85) HashAggregate [codegen id : 35]
Input [6]: [i_brand_id#53, i_class_id#54, i_category_id#55, sum#61, isEmpty#62, count#63]
Keys [3]: [i_brand_id#53, i_class_id#54, i_category_id#55]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#65, count(1)#66]
Results [6]: [i_brand_id#53, i_class_id#54, i_category_id#55, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#65 AS sales#67, count(1)#66 AS number_sales#68, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#65 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#69]

(86) Filter [codegen id : 35]
Input [6]: [i_brand_id#53, i_class_id#54, i_category_id#55, sales#67, number_sales#68, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#69]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#69) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#69 as decimal(32,6)) > cast(Subquery scalar-subquery#70, [id=#71] as decimal(32,6))))

(87) Project [codegen id : 35]
Output [6]: [sales#67, number_sales#68, store AS channel#72, i_brand_id#53, i_class_id#54, i_category_id#55]
Input [6]: [i_brand_id#53, i_class_id#54, i_category_id#55, sales#67, number_sales#68, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#69]

(88) Scan parquet default.catalog_sales
Output [4]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#76), dynamicpruningexpression(cs_sold_date_sk#76 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(89) ColumnarToRow [codegen id : 36]
Input [4]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76]

(90) Filter [codegen id : 36]
Input [4]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76]
Condition : isnotnull(cs_item_sk#73)

(91) Exchange
Input [4]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76]
Arguments: hashpartitioning(cs_item_sk#73, 5), ENSURE_REQUIREMENTS, [id=#77]

(92) Sort [codegen id : 37]
Input [4]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76]
Arguments: [cs_item_sk#73 ASC NULLS FIRST], false, 0

(93) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#46]

(94) Sort [codegen id : 51]
Input [1]: [ss_item_sk#46]
Arguments: [ss_item_sk#46 ASC NULLS FIRST], false, 0

(95) SortMergeJoin
Left keys [1]: [cs_item_sk#73]
Right keys [1]: [ss_item_sk#46]
Join condition: None

(96) ReusedExchange [Reuses operator id: 69]
Output [1]: [d_date_sk#78]

(97) BroadcastHashJoin [codegen id : 69]
Left keys [1]: [cs_sold_date_sk#76]
Right keys [1]: [d_date_sk#78]
Join condition: None

(98) Project [codegen id : 69]
Output [3]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75]
Input [5]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, cs_sold_date_sk#76, d_date_sk#78]

(99) ReusedExchange [Reuses operator id: 80]
Output [4]: [i_item_sk#79, i_brand_id#80, i_class_id#81, i_category_id#82]

(100) BroadcastHashJoin [codegen id : 69]
Left keys [1]: [cs_item_sk#73]
Right keys [1]: [i_item_sk#79]
Join condition: None

(101) Project [codegen id : 69]
Output [5]: [cs_quantity#74, cs_list_price#75, i_brand_id#80, i_class_id#81, i_category_id#82]
Input [7]: [cs_item_sk#73, cs_quantity#74, cs_list_price#75, i_item_sk#79, i_brand_id#80, i_class_id#81, i_category_id#82]

(102) HashAggregate [codegen id : 69]
Input [5]: [cs_quantity#74, cs_list_price#75, i_brand_id#80, i_class_id#81, i_category_id#82]
Keys [3]: [i_brand_id#80, i_class_id#81, i_category_id#82]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#83, isEmpty#84, count#85]
Results [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum#86, isEmpty#87, count#88]

(103) Exchange
Input [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum#86, isEmpty#87, count#88]
Arguments: hashpartitioning(i_brand_id#80, i_class_id#81, i_category_id#82, 5), ENSURE_REQUIREMENTS, [id=#89]

(104) HashAggregate [codegen id : 70]
Input [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum#86, isEmpty#87, count#88]
Keys [3]: [i_brand_id#80, i_class_id#81, i_category_id#82]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true))#90, count(1)#91]
Results [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true))#90 AS sales#92, count(1)#91 AS number_sales#93, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true))#90 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true))#94]

(105) Filter [codegen id : 70]
Input [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sales#92, number_sales#93, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true))#94]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true))#94) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true))#94 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#70, [id=#71] as decimal(32,6))))

(106) Project [codegen id : 70]
Output [6]: [sales#92, number_sales#93, catalog AS channel#95, i_brand_id#80, i_class_id#81, i_category_id#82]
Input [6]: [i_brand_id#80, i_class_id#81, i_category_id#82, sales#92, number_sales#93, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#75 as decimal(12,2)))), DecimalType(18,2), true))#94]

(107) Scan parquet default.web_sales
Output [4]: [ws_item_sk#96, ws_quantity#97, ws_list_price#98, ws_sold_date_sk#99]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#99), dynamicpruningexpression(ws_sold_date_sk#99 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(108) ColumnarToRow [codegen id : 71]
Input [4]: [ws_item_sk#96, ws_quantity#97, ws_list_price#98, ws_sold_date_sk#99]

(109) Filter [codegen id : 71]
Input [4]: [ws_item_sk#96, ws_quantity#97, ws_list_price#98, ws_sold_date_sk#99]
Condition : isnotnull(ws_item_sk#96)

(110) Exchange
Input [4]: [ws_item_sk#96, ws_quantity#97, ws_list_price#98, ws_sold_date_sk#99]
Arguments: hashpartitioning(ws_item_sk#96, 5), ENSURE_REQUIREMENTS, [id=#100]

(111) Sort [codegen id : 72]
Input [4]: [ws_item_sk#96, ws_quantity#97, ws_list_price#98, ws_sold_date_sk#99]
Arguments: [ws_item_sk#96 ASC NULLS FIRST], false, 0

(112) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#46]

(113) Sort [codegen id : 86]
Input [1]: [ss_item_sk#46]
Arguments: [ss_item_sk#46 ASC NULLS FIRST], false, 0

(114) SortMergeJoin
Left keys [1]: [ws_item_sk#96]
Right keys [1]: [ss_item_sk#46]
Join condition: None

(115) ReusedExchange [Reuses operator id: 69]
Output [1]: [d_date_sk#101]

(116) BroadcastHashJoin [codegen id : 104]
Left keys [1]: [ws_sold_date_sk#99]
Right keys [1]: [d_date_sk#101]
Join condition: None

(117) Project [codegen id : 104]
Output [3]: [ws_item_sk#96, ws_quantity#97, ws_list_price#98]
Input [5]: [ws_item_sk#96, ws_quantity#97, ws_list_price#98, ws_sold_date_sk#99, d_date_sk#101]

(118) ReusedExchange [Reuses operator id: 80]
Output [4]: [i_item_sk#102, i_brand_id#103, i_class_id#104, i_category_id#105]

(119) BroadcastHashJoin [codegen id : 104]
Left keys [1]: [ws_item_sk#96]
Right keys [1]: [i_item_sk#102]
Join condition: None

(120) Project [codegen id : 104]
Output [5]: [ws_quantity#97, ws_list_price#98, i_brand_id#103, i_class_id#104, i_category_id#105]
Input [7]: [ws_item_sk#96, ws_quantity#97, ws_list_price#98, i_item_sk#102, i_brand_id#103, i_class_id#104, i_category_id#105]

(121) HashAggregate [codegen id : 104]
Input [5]: [ws_quantity#97, ws_list_price#98, i_brand_id#103, i_class_id#104, i_category_id#105]
Keys [3]: [i_brand_id#103, i_class_id#104, i_category_id#105]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#97 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#98 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#106, isEmpty#107, count#108]
Results [6]: [i_brand_id#103, i_class_id#104, i_category_id#105, sum#109, isEmpty#110, count#111]

(122) Exchange
Input [6]: [i_brand_id#103, i_class_id#104, i_category_id#105, sum#109, isEmpty#110, count#111]
Arguments: hashpartitioning(i_brand_id#103, i_class_id#104, i_category_id#105, 5), ENSURE_REQUIREMENTS, [id=#112]

(123) HashAggregate [codegen id : 105]
Input [6]: [i_brand_id#103, i_class_id#104, i_category_id#105, sum#109, isEmpty#110, count#111]
Keys [3]: [i_brand_id#103, i_class_id#104, i_category_id#105]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#97 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#98 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#97 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#98 as decimal(12,2)))), DecimalType(18,2), true))#113, count(1)#114]
Results [6]: [i_brand_id#103, i_class_id#104, i_category_id#105, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#97 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#98 as decimal(12,2)))), DecimalType(18,2), true))#113 AS sales#115, count(1)#114 AS number_sales#116, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#97 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#98 as decimal(12,2)))), DecimalType(18,2), true))#113 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#97 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#98 as decimal(12,2)))), DecimalType(18,2), true))#117]

(124) Filter [codegen id : 105]
Input [6]: [i_brand_id#103, i_class_id#104, i_category_id#105, sales#115, number_sales#116, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#97 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#98 as decimal(12,2)))), DecimalType(18,2), true))#117]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#97 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#98 as decimal(12,2)))), DecimalType(18,2), true))#117) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#97 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#98 as decimal(12,2)))), DecimalType(18,2), true))#117 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#70, [id=#71] as decimal(32,6))))

(125) Project [codegen id : 105]
Output [6]: [sales#115, number_sales#116, web AS channel#118, i_brand_id#103, i_class_id#104, i_category_id#105]
Input [6]: [i_brand_id#103, i_class_id#104, i_category_id#105, sales#115, number_sales#116, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#97 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#98 as decimal(12,2)))), DecimalType(18,2), true))#117]

(126) Union

(127) Expand [codegen id : 106]
Input [6]: [sales#67, number_sales#68, channel#72, i_brand_id#53, i_class_id#54, i_category_id#55]
Arguments: [ArrayBuffer(sales#67, number_sales#68, channel#72, i_brand_id#53, i_class_id#54, i_category_id#55, 0), ArrayBuffer(sales#67, number_sales#68, channel#72, i_brand_id#53, i_class_id#54, null, 1), ArrayBuffer(sales#67, number_sales#68, channel#72, i_brand_id#53, null, null, 3), ArrayBuffer(sales#67, number_sales#68, channel#72, null, null, null, 7), ArrayBuffer(sales#67, number_sales#68, null, null, null, null, 15)], [sales#67, number_sales#68, channel#119, i_brand_id#120, i_class_id#121, i_category_id#122, spark_grouping_id#123]

(128) HashAggregate [codegen id : 106]
Input [7]: [sales#67, number_sales#68, channel#119, i_brand_id#120, i_class_id#121, i_category_id#122, spark_grouping_id#123]
Keys [5]: [channel#119, i_brand_id#120, i_class_id#121, i_category_id#122, spark_grouping_id#123]
Functions [2]: [partial_sum(sales#67), partial_sum(number_sales#68)]
Aggregate Attributes [3]: [sum#124, isEmpty#125, sum#126]
Results [8]: [channel#119, i_brand_id#120, i_class_id#121, i_category_id#122, spark_grouping_id#123, sum#127, isEmpty#128, sum#129]

(129) Exchange
Input [8]: [channel#119, i_brand_id#120, i_class_id#121, i_category_id#122, spark_grouping_id#123, sum#127, isEmpty#128, sum#129]
Arguments: hashpartitioning(channel#119, i_brand_id#120, i_class_id#121, i_category_id#122, spark_grouping_id#123, 5), ENSURE_REQUIREMENTS, [id=#130]

(130) HashAggregate [codegen id : 107]
Input [8]: [channel#119, i_brand_id#120, i_class_id#121, i_category_id#122, spark_grouping_id#123, sum#127, isEmpty#128, sum#129]
Keys [5]: [channel#119, i_brand_id#120, i_class_id#121, i_category_id#122, spark_grouping_id#123]
Functions [2]: [sum(sales#67), sum(number_sales#68)]
Aggregate Attributes [2]: [sum(sales#67)#131, sum(number_sales#68)#132]
Results [6]: [channel#119, i_brand_id#120, i_class_id#121, i_category_id#122, sum(sales#67)#131 AS sum(sales)#133, sum(number_sales#68)#132 AS sum(number_sales)#134]

(131) TakeOrderedAndProject
Input [6]: [channel#119, i_brand_id#120, i_class_id#121, i_category_id#122, sum(sales)#133, sum(number_sales)#134]
Arguments: 100, [channel#119 ASC NULLS FIRST, i_brand_id#120 ASC NULLS FIRST, i_class_id#121 ASC NULLS FIRST, i_category_id#122 ASC NULLS FIRST], [channel#119, i_brand_id#120, i_class_id#121, i_category_id#122, sum(sales)#133, sum(number_sales)#134]

===== Subqueries =====

Subquery:1 Hosting operator id = 86 Hosting Expression = Subquery scalar-subquery#70, [id=#71]
* HashAggregate (154)
+- Exchange (153)
   +- * HashAggregate (152)
      +- Union (151)
         :- * Project (140)
         :  +- * BroadcastHashJoin Inner BuildRight (139)
         :     :- * ColumnarToRow (133)
         :     :  +- Scan parquet default.store_sales (132)
         :     +- BroadcastExchange (138)
         :        +- * Project (137)
         :           +- * Filter (136)
         :              +- * ColumnarToRow (135)
         :                 +- Scan parquet default.date_dim (134)
         :- * Project (145)
         :  +- * BroadcastHashJoin Inner BuildRight (144)
         :     :- * ColumnarToRow (142)
         :     :  +- Scan parquet default.catalog_sales (141)
         :     +- ReusedExchange (143)
         +- * Project (150)
            +- * BroadcastHashJoin Inner BuildRight (149)
               :- * ColumnarToRow (147)
               :  +- Scan parquet default.web_sales (146)
               +- ReusedExchange (148)


(132) Scan parquet default.store_sales
Output [3]: [ss_quantity#135, ss_list_price#136, ss_sold_date_sk#137]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#137), dynamicpruningexpression(ss_sold_date_sk#137 IN dynamicpruning#138)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(133) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#135, ss_list_price#136, ss_sold_date_sk#137]

(134) Scan parquet default.date_dim
Output [2]: [d_date_sk#139, d_year#140]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(135) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#139, d_year#140]

(136) Filter [codegen id : 1]
Input [2]: [d_date_sk#139, d_year#140]
Condition : (((isnotnull(d_year#140) AND (d_year#140 >= 1999)) AND (d_year#140 <= 2001)) AND isnotnull(d_date_sk#139))

(137) Project [codegen id : 1]
Output [1]: [d_date_sk#139]
Input [2]: [d_date_sk#139, d_year#140]

(138) BroadcastExchange
Input [1]: [d_date_sk#139]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#141]

(139) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#137]
Right keys [1]: [d_date_sk#139]
Join condition: None

(140) Project [codegen id : 2]
Output [2]: [ss_quantity#135 AS quantity#142, ss_list_price#136 AS list_price#143]
Input [4]: [ss_quantity#135, ss_list_price#136, ss_sold_date_sk#137, d_date_sk#139]

(141) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#144, cs_list_price#145, cs_sold_date_sk#146]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#146), dynamicpruningexpression(cs_sold_date_sk#146 IN dynamicpruning#138)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(142) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#144, cs_list_price#145, cs_sold_date_sk#146]

(143) ReusedExchange [Reuses operator id: 138]
Output [1]: [d_date_sk#147]

(144) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#146]
Right keys [1]: [d_date_sk#147]
Join condition: None

(145) Project [codegen id : 4]
Output [2]: [cs_quantity#144 AS quantity#148, cs_list_price#145 AS list_price#149]
Input [4]: [cs_quantity#144, cs_list_price#145, cs_sold_date_sk#146, d_date_sk#147]

(146) Scan parquet default.web_sales
Output [3]: [ws_quantity#150, ws_list_price#151, ws_sold_date_sk#152]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#152), dynamicpruningexpression(ws_sold_date_sk#152 IN dynamicpruning#138)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(147) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#150, ws_list_price#151, ws_sold_date_sk#152]

(148) ReusedExchange [Reuses operator id: 138]
Output [1]: [d_date_sk#153]

(149) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#152]
Right keys [1]: [d_date_sk#153]
Join condition: None

(150) Project [codegen id : 6]
Output [2]: [ws_quantity#150 AS quantity#154, ws_list_price#151 AS list_price#155]
Input [4]: [ws_quantity#150, ws_list_price#151, ws_sold_date_sk#152, d_date_sk#153]

(151) Union

(152) HashAggregate [codegen id : 7]
Input [2]: [quantity#142, list_price#143]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#142 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#143 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#156, count#157]
Results [2]: [sum#158, count#159]

(153) Exchange
Input [2]: [sum#158, count#159]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#160]

(154) HashAggregate [codegen id : 8]
Input [2]: [sum#158, count#159]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#142 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#143 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#142 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#143 as decimal(12,2)))), DecimalType(18,2), true))#161]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#142 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#143 as decimal(12,2)))), DecimalType(18,2), true))#161 AS average_sales#162]

Subquery:2 Hosting operator id = 132 Hosting Expression = ss_sold_date_sk#137 IN dynamicpruning#138
ReusedExchange (155)


(155) ReusedExchange [Reuses operator id: 138]
Output [1]: [d_date_sk#139]

Subquery:3 Hosting operator id = 141 Hosting Expression = cs_sold_date_sk#146 IN dynamicpruning#138

Subquery:4 Hosting operator id = 146 Hosting Expression = ws_sold_date_sk#152 IN dynamicpruning#138

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (156)


(156) ReusedExchange [Reuses operator id: 69]
Output [1]: [d_date_sk#48]

Subquery:6 Hosting operator id = 9 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#13
ReusedExchange (157)


(157) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#14]

Subquery:7 Hosting operator id = 22 Hosting Expression = cs_sold_date_sk#22 IN dynamicpruning#13

Subquery:8 Hosting operator id = 39 Hosting Expression = ws_sold_date_sk#32 IN dynamicpruning#13

Subquery:9 Hosting operator id = 105 Hosting Expression = ReusedSubquery Subquery scalar-subquery#70, [id=#71]

Subquery:10 Hosting operator id = 88 Hosting Expression = cs_sold_date_sk#76 IN dynamicpruning#5

Subquery:11 Hosting operator id = 124 Hosting Expression = ReusedSubquery Subquery scalar-subquery#70, [id=#71]

Subquery:12 Hosting operator id = 107 Hosting Expression = ws_sold_date_sk#99 IN dynamicpruning#5


