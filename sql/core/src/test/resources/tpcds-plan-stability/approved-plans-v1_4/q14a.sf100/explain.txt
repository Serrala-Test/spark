== Physical Plan ==
TakeOrderedAndProject (131)
+- * HashAggregate (130)
   +- Exchange (129)
      +- * HashAggregate (128)
         +- * Expand (127)
            +- Union (126)
               :- * Project (87)
               :  +- * Filter (86)
               :     +- * HashAggregate (85)
               :        +- Exchange (84)
               :           +- * HashAggregate (83)
               :              +- * Project (82)
               :                 +- * BroadcastHashJoin Inner BuildRight (81)
               :                    :- * Project (71)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (70)
               :                    :     :- SortMergeJoin LeftSemi (64)
               :                    :     :  :- * Sort (5)
               :                    :     :  :  +- Exchange (4)
               :                    :     :  :     +- * Filter (3)
               :                    :     :  :        +- * ColumnarToRow (2)
               :                    :     :  :           +- Scan parquet default.store_sales (1)
               :                    :     :  +- * Sort (63)
               :                    :     :     +- Exchange (62)
               :                    :     :        +- * Project (61)
               :                    :     :           +- * BroadcastHashJoin Inner BuildRight (60)
               :                    :     :              :- * Filter (8)
               :                    :     :              :  +- * ColumnarToRow (7)
               :                    :     :              :     +- Scan parquet default.item (6)
               :                    :     :              +- BroadcastExchange (59)
               :                    :     :                 +- * HashAggregate (58)
               :                    :     :                    +- * HashAggregate (57)
               :                    :     :                       +- * HashAggregate (56)
               :                    :     :                          +- Exchange (55)
               :                    :     :                             +- * HashAggregate (54)
               :                    :     :                                +- SortMergeJoin LeftSemi (53)
               :                    :     :                                   :- SortMergeJoin LeftSemi (41)
               :                    :     :                                   :  :- * Sort (26)
               :                    :     :                                   :  :  +- Exchange (25)
               :                    :     :                                   :  :     +- * Project (24)
               :                    :     :                                   :  :        +- * BroadcastHashJoin Inner BuildRight (23)
               :                    :     :                                   :  :           :- * Project (18)
               :                    :     :                                   :  :           :  +- * BroadcastHashJoin Inner BuildRight (17)
               :                    :     :                                   :  :           :     :- * Filter (11)
               :                    :     :                                   :  :           :     :  +- * ColumnarToRow (10)
               :                    :     :                                   :  :           :     :     +- Scan parquet default.store_sales (9)
               :                    :     :                                   :  :           :     +- BroadcastExchange (16)
               :                    :     :                                   :  :           :        +- * Project (15)
               :                    :     :                                   :  :           :           +- * Filter (14)
               :                    :     :                                   :  :           :              +- * ColumnarToRow (13)
               :                    :     :                                   :  :           :                 +- Scan parquet default.date_dim (12)
               :                    :     :                                   :  :           +- BroadcastExchange (22)
               :                    :     :                                   :  :              +- * Filter (21)
               :                    :     :                                   :  :                 +- * ColumnarToRow (20)
               :                    :     :                                   :  :                    +- Scan parquet default.item (19)
               :                    :     :                                   :  +- * Sort (40)
               :                    :     :                                   :     +- Exchange (39)
               :                    :     :                                   :        +- * Project (38)
               :                    :     :                                   :           +- * BroadcastHashJoin Inner BuildRight (37)
               :                    :     :                                   :              :- * Project (32)
               :                    :     :                                   :              :  +- * BroadcastHashJoin Inner BuildRight (31)
               :                    :     :                                   :              :     :- * Filter (29)
               :                    :     :                                   :              :     :  +- * ColumnarToRow (28)
               :                    :     :                                   :              :     :     +- Scan parquet default.catalog_sales (27)
               :                    :     :                                   :              :     +- ReusedExchange (30)
               :                    :     :                                   :              +- BroadcastExchange (36)
               :                    :     :                                   :                 +- * Filter (35)
               :                    :     :                                   :                    +- * ColumnarToRow (34)
               :                    :     :                                   :                       +- Scan parquet default.item (33)
               :                    :     :                                   +- * Sort (52)
               :                    :     :                                      +- Exchange (51)
               :                    :     :                                         +- * Project (50)
               :                    :     :                                            +- * BroadcastHashJoin Inner BuildRight (49)
               :                    :     :                                               :- * Project (47)
               :                    :     :                                               :  +- * BroadcastHashJoin Inner BuildRight (46)
               :                    :     :                                               :     :- * Filter (44)
               :                    :     :                                               :     :  +- * ColumnarToRow (43)
               :                    :     :                                               :     :     +- Scan parquet default.web_sales (42)
               :                    :     :                                               :     +- ReusedExchange (45)
               :                    :     :                                               +- ReusedExchange (48)
               :                    :     +- BroadcastExchange (69)
               :                    :        +- * Project (68)
               :                    :           +- * Filter (67)
               :                    :              +- * ColumnarToRow (66)
               :                    :                 +- Scan parquet default.date_dim (65)
               :                    +- BroadcastExchange (80)
               :                       +- SortMergeJoin LeftSemi (79)
               :                          :- * Sort (76)
               :                          :  +- Exchange (75)
               :                          :     +- * Filter (74)
               :                          :        +- * ColumnarToRow (73)
               :                          :           +- Scan parquet default.item (72)
               :                          +- * Sort (78)
               :                             +- ReusedExchange (77)
               :- * Project (106)
               :  +- * Filter (105)
               :     +- * HashAggregate (104)
               :        +- Exchange (103)
               :           +- * HashAggregate (102)
               :              +- * Project (101)
               :                 +- * BroadcastHashJoin Inner BuildRight (100)
               :                    :- * Project (98)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (97)
               :                    :     :- SortMergeJoin LeftSemi (95)
               :                    :     :  :- * Sort (92)
               :                    :     :  :  +- Exchange (91)
               :                    :     :  :     +- * Filter (90)
               :                    :     :  :        +- * ColumnarToRow (89)
               :                    :     :  :           +- Scan parquet default.catalog_sales (88)
               :                    :     :  +- * Sort (94)
               :                    :     :     +- ReusedExchange (93)
               :                    :     +- ReusedExchange (96)
               :                    +- ReusedExchange (99)
               +- * Project (125)
                  +- * Filter (124)
                     +- * HashAggregate (123)
                        +- Exchange (122)
                           +- * HashAggregate (121)
                              +- * Project (120)
                                 +- * BroadcastHashJoin Inner BuildRight (119)
                                    :- * Project (117)
                                    :  +- * BroadcastHashJoin Inner BuildRight (116)
                                    :     :- SortMergeJoin LeftSemi (114)
                                    :     :  :- * Sort (111)
                                    :     :  :  +- Exchange (110)
                                    :     :  :     +- * Filter (109)
                                    :     :  :        +- * ColumnarToRow (108)
                                    :     :  :           +- Scan parquet default.web_sales (107)
                                    :     :  +- * Sort (113)
                                    :     :     +- ReusedExchange (112)
                                    :     +- ReusedExchange (115)
                                    +- ReusedExchange (118)


(1) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Condition : (((isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1)) AND dynamicpruningexpression(ss_sold_date_sk#1 IN dynamicpruning#5)) AND dynamicpruningexpression(true))

(4) Exchange
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Arguments: hashpartitioning(ss_item_sk#2, 5), true, [id=#6]

(5) Sort [codegen id : 2]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Arguments: [ss_item_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 17]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(8) Filter [codegen id : 17]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(9) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(10) ColumnarToRow [codegen id : 5]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]

(11) Filter [codegen id : 5]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(12) Scan parquet default.date_dim
Output [2]: [d_date_sk#11, d_year#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(13) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#11, d_year#12]

(14) Filter [codegen id : 3]
Input [2]: [d_date_sk#11, d_year#12]
Condition : (((isnotnull(d_year#12) AND (d_year#12 >= 1999)) AND (d_year#12 <= 2001)) AND isnotnull(d_date_sk#11))

(15) Project [codegen id : 3]
Output [1]: [d_date_sk#11]
Input [2]: [d_date_sk#11, d_year#12]

(16) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13]

(17) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#11]
Join condition: None

(18) Project [codegen id : 5]
Output [1]: [ss_item_sk#2]
Input [3]: [ss_sold_date_sk#1, ss_item_sk#2, d_date_sk#11]

(19) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(20) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(21) Filter [codegen id : 4]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : (((isnotnull(i_item_sk#7) AND isnotnull(i_brand_id#8)) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(22) BroadcastExchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14]

(23) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#7]
Join condition: None

(24) Project [codegen id : 5]
Output [3]: [i_brand_id#8 AS brand_id#15, i_class_id#9 AS class_id#16, i_category_id#10 AS category_id#17]
Input [5]: [ss_item_sk#2, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(25) Exchange
Input [3]: [brand_id#15, class_id#16, category_id#17]
Arguments: hashpartitioning(coalesce(brand_id#15, 0), isnull(brand_id#15), coalesce(class_id#16, 0), isnull(class_id#16), coalesce(category_id#17, 0), isnull(category_id#17), 5), true, [id=#18]

(26) Sort [codegen id : 6]
Input [3]: [brand_id#15, class_id#16, category_id#17]
Arguments: [coalesce(brand_id#15, 0) ASC NULLS FIRST, isnull(brand_id#15) ASC NULLS FIRST, coalesce(class_id#16, 0) ASC NULLS FIRST, isnull(class_id#16) ASC NULLS FIRST, coalesce(category_id#17, 0) ASC NULLS FIRST, isnull(category_id#17) ASC NULLS FIRST], false, 0

(27) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#19, cs_item_sk#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int>

(28) ColumnarToRow [codegen id : 9]
Input [2]: [cs_sold_date_sk#19, cs_item_sk#20]

(29) Filter [codegen id : 9]
Input [2]: [cs_sold_date_sk#19, cs_item_sk#20]
Condition : (isnotnull(cs_item_sk#20) AND isnotnull(cs_sold_date_sk#19))

(30) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#11]

(31) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_sold_date_sk#19]
Right keys [1]: [d_date_sk#11]
Join condition: None

(32) Project [codegen id : 9]
Output [1]: [cs_item_sk#20]
Input [3]: [cs_sold_date_sk#19, cs_item_sk#20, d_date_sk#11]

(33) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(34) ColumnarToRow [codegen id : 8]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(35) Filter [codegen id : 8]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : isnotnull(i_item_sk#7)

(36) BroadcastExchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#21]

(37) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#20]
Right keys [1]: [i_item_sk#7]
Join condition: None

(38) Project [codegen id : 9]
Output [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Input [5]: [cs_item_sk#20, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(39) Exchange
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10), 5), true, [id=#22]

(40) Sort [codegen id : 10]
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [coalesce(i_brand_id#8, 0) ASC NULLS FIRST, isnull(i_brand_id#8) ASC NULLS FIRST, coalesce(i_class_id#9, 0) ASC NULLS FIRST, isnull(i_class_id#9) ASC NULLS FIRST, coalesce(i_category_id#10, 0) ASC NULLS FIRST, isnull(i_category_id#10) ASC NULLS FIRST], false, 0

(41) SortMergeJoin
Left keys [6]: [coalesce(brand_id#15, 0), isnull(brand_id#15), coalesce(class_id#16, 0), isnull(class_id#16), coalesce(category_id#17, 0), isnull(category_id#17)]
Right keys [6]: [coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10)]
Join condition: None

(42) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#23, ws_item_sk#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int>

(43) ColumnarToRow [codegen id : 13]
Input [2]: [ws_sold_date_sk#23, ws_item_sk#24]

(44) Filter [codegen id : 13]
Input [2]: [ws_sold_date_sk#23, ws_item_sk#24]
Condition : (isnotnull(ws_item_sk#24) AND isnotnull(ws_sold_date_sk#23))

(45) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#11]

(46) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ws_sold_date_sk#23]
Right keys [1]: [d_date_sk#11]
Join condition: None

(47) Project [codegen id : 13]
Output [1]: [ws_item_sk#24]
Input [3]: [ws_sold_date_sk#23, ws_item_sk#24, d_date_sk#11]

(48) ReusedExchange [Reuses operator id: 36]
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(49) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ws_item_sk#24]
Right keys [1]: [i_item_sk#7]
Join condition: None

(50) Project [codegen id : 13]
Output [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Input [5]: [ws_item_sk#24, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(51) Exchange
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10), 5), true, [id=#25]

(52) Sort [codegen id : 14]
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [coalesce(i_brand_id#8, 0) ASC NULLS FIRST, isnull(i_brand_id#8) ASC NULLS FIRST, coalesce(i_class_id#9, 0) ASC NULLS FIRST, isnull(i_class_id#9) ASC NULLS FIRST, coalesce(i_category_id#10, 0) ASC NULLS FIRST, isnull(i_category_id#10) ASC NULLS FIRST], false, 0

(53) SortMergeJoin
Left keys [6]: [coalesce(brand_id#15, 0), isnull(brand_id#15), coalesce(class_id#16, 0), isnull(class_id#16), coalesce(category_id#17, 0), isnull(category_id#17)]
Right keys [6]: [coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10)]
Join condition: None

(54) HashAggregate [codegen id : 15]
Input [3]: [brand_id#15, class_id#16, category_id#17]
Keys [3]: [brand_id#15, class_id#16, category_id#17]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#15, class_id#16, category_id#17]

(55) Exchange
Input [3]: [brand_id#15, class_id#16, category_id#17]
Arguments: hashpartitioning(brand_id#15, class_id#16, category_id#17, 5), true, [id=#26]

(56) HashAggregate [codegen id : 16]
Input [3]: [brand_id#15, class_id#16, category_id#17]
Keys [3]: [brand_id#15, class_id#16, category_id#17]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#15, class_id#16, category_id#17]

(57) HashAggregate [codegen id : 16]
Input [3]: [brand_id#15, class_id#16, category_id#17]
Keys [3]: [brand_id#15, class_id#16, category_id#17]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#15, class_id#16, category_id#17]

(58) HashAggregate [codegen id : 16]
Input [3]: [brand_id#15, class_id#16, category_id#17]
Keys [3]: [brand_id#15, class_id#16, category_id#17]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#15, class_id#16, category_id#17]

(59) BroadcastExchange
Input [3]: [brand_id#15, class_id#16, category_id#17]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#27]

(60) BroadcastHashJoin [codegen id : 17]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#15, class_id#16, category_id#17]
Join condition: None

(61) Project [codegen id : 17]
Output [1]: [i_item_sk#7 AS ss_item_sk#28]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#15, class_id#16, category_id#17]

(62) Exchange
Input [1]: [ss_item_sk#28]
Arguments: hashpartitioning(ss_item_sk#28, 5), true, [id=#29]

(63) Sort [codegen id : 18]
Input [1]: [ss_item_sk#28]
Arguments: [ss_item_sk#28 ASC NULLS FIRST], false, 0

(64) SortMergeJoin
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [ss_item_sk#28]
Join condition: None

(65) Scan parquet default.date_dim
Output [3]: [d_date_sk#11, d_year#12, d_moy#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(66) ColumnarToRow [codegen id : 19]
Input [3]: [d_date_sk#11, d_year#12, d_moy#30]

(67) Filter [codegen id : 19]
Input [3]: [d_date_sk#11, d_year#12, d_moy#30]
Condition : ((((isnotnull(d_year#12) AND isnotnull(d_moy#30)) AND (d_year#12 = 2001)) AND (d_moy#30 = 11)) AND isnotnull(d_date_sk#11))

(68) Project [codegen id : 19]
Output [1]: [d_date_sk#11]
Input [3]: [d_date_sk#11, d_year#12, d_moy#30]

(69) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#31]

(70) BroadcastHashJoin [codegen id : 38]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#11]
Join condition: None

(71) Project [codegen id : 38]
Output [3]: [ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4, d_date_sk#11]

(72) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(73) ColumnarToRow [codegen id : 20]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(74) Filter [codegen id : 20]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : isnotnull(i_item_sk#7)

(75) Exchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(i_item_sk#7, 5), true, [id=#32]

(76) Sort [codegen id : 21]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [i_item_sk#7 ASC NULLS FIRST], false, 0

(77) ReusedExchange [Reuses operator id: 62]
Output [1]: [ss_item_sk#28]

(78) Sort [codegen id : 37]
Input [1]: [ss_item_sk#28]
Arguments: [ss_item_sk#28 ASC NULLS FIRST], false, 0

(79) SortMergeJoin
Left keys [1]: [i_item_sk#7]
Right keys [1]: [ss_item_sk#28]
Join condition: None

(80) BroadcastExchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#33]

(81) BroadcastHashJoin [codegen id : 38]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#7]
Join condition: None

(82) Project [codegen id : 38]
Output [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [7]: [ss_item_sk#2, ss_quantity#3, ss_list_price#4, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(83) HashAggregate [codegen id : 38]
Input [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#34, isEmpty#35, count#36]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#37, isEmpty#38, count#39]

(84) Exchange
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#37, isEmpty#38, count#39]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), true, [id=#40]

(85) HashAggregate [codegen id : 39]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#37, isEmpty#38, count#39]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#41, count(1)#42]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#41 AS sales#43, count(1)#42 AS number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#41 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#45]

(86) Filter [codegen id : 39]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#43, number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#45]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#45) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#45 as decimal(32,6)) > cast(Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(87) Project [codegen id : 39]
Output [6]: [sales#43, number_sales#44, store AS channel#48, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#43, number_sales#44, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#45]

(88) Scan parquet default.catalog_sales
Output [4]: [cs_sold_date_sk#19, cs_item_sk#20, cs_quantity#49, cs_list_price#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(89) ColumnarToRow [codegen id : 40]
Input [4]: [cs_sold_date_sk#19, cs_item_sk#20, cs_quantity#49, cs_list_price#50]

(90) Filter [codegen id : 40]
Input [4]: [cs_sold_date_sk#19, cs_item_sk#20, cs_quantity#49, cs_list_price#50]
Condition : (((isnotnull(cs_item_sk#20) AND isnotnull(cs_sold_date_sk#19)) AND dynamicpruningexpression(cs_sold_date_sk#19 IN dynamicpruning#5)) AND dynamicpruningexpression(true))

(91) Exchange
Input [4]: [cs_sold_date_sk#19, cs_item_sk#20, cs_quantity#49, cs_list_price#50]
Arguments: hashpartitioning(cs_item_sk#20, 5), true, [id=#51]

(92) Sort [codegen id : 41]
Input [4]: [cs_sold_date_sk#19, cs_item_sk#20, cs_quantity#49, cs_list_price#50]
Arguments: [cs_item_sk#20 ASC NULLS FIRST], false, 0

(93) ReusedExchange [Reuses operator id: 62]
Output [1]: [ss_item_sk#28]

(94) Sort [codegen id : 57]
Input [1]: [ss_item_sk#28]
Arguments: [ss_item_sk#28 ASC NULLS FIRST], false, 0

(95) SortMergeJoin
Left keys [1]: [cs_item_sk#20]
Right keys [1]: [ss_item_sk#28]
Join condition: None

(96) ReusedExchange [Reuses operator id: 69]
Output [1]: [d_date_sk#11]

(97) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [cs_sold_date_sk#19]
Right keys [1]: [d_date_sk#11]
Join condition: None

(98) Project [codegen id : 77]
Output [3]: [cs_item_sk#20, cs_quantity#49, cs_list_price#50]
Input [5]: [cs_sold_date_sk#19, cs_item_sk#20, cs_quantity#49, cs_list_price#50, d_date_sk#11]

(99) ReusedExchange [Reuses operator id: 80]
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(100) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [cs_item_sk#20]
Right keys [1]: [i_item_sk#7]
Join condition: None

(101) Project [codegen id : 77]
Output [5]: [cs_quantity#49, cs_list_price#50, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [7]: [cs_item_sk#20, cs_quantity#49, cs_list_price#50, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(102) HashAggregate [codegen id : 77]
Input [5]: [cs_quantity#49, cs_list_price#50, i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#52, isEmpty#53, count#54]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#55, isEmpty#56, count#57]

(103) Exchange
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#55, isEmpty#56, count#57]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), true, [id=#58]

(104) HashAggregate [codegen id : 78]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#55, isEmpty#56, count#57]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#59, count(1)#60]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#59 AS sales#61, count(1)#60 AS number_sales#62, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#59 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#63]

(105) Filter [codegen id : 78]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#61, number_sales#62, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#63]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#63) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#63 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(106) Project [codegen id : 78]
Output [6]: [sales#61, number_sales#62, catalog AS channel#64, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#61, number_sales#62, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#63]

(107) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#23, ws_item_sk#24, ws_quantity#65, ws_list_price#66]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(108) ColumnarToRow [codegen id : 79]
Input [4]: [ws_sold_date_sk#23, ws_item_sk#24, ws_quantity#65, ws_list_price#66]

(109) Filter [codegen id : 79]
Input [4]: [ws_sold_date_sk#23, ws_item_sk#24, ws_quantity#65, ws_list_price#66]
Condition : (((isnotnull(ws_item_sk#24) AND isnotnull(ws_sold_date_sk#23)) AND dynamicpruningexpression(ws_sold_date_sk#23 IN dynamicpruning#5)) AND dynamicpruningexpression(true))

(110) Exchange
Input [4]: [ws_sold_date_sk#23, ws_item_sk#24, ws_quantity#65, ws_list_price#66]
Arguments: hashpartitioning(ws_item_sk#24, 5), true, [id=#67]

(111) Sort [codegen id : 80]
Input [4]: [ws_sold_date_sk#23, ws_item_sk#24, ws_quantity#65, ws_list_price#66]
Arguments: [ws_item_sk#24 ASC NULLS FIRST], false, 0

(112) ReusedExchange [Reuses operator id: 62]
Output [1]: [ss_item_sk#28]

(113) Sort [codegen id : 96]
Input [1]: [ss_item_sk#28]
Arguments: [ss_item_sk#28 ASC NULLS FIRST], false, 0

(114) SortMergeJoin
Left keys [1]: [ws_item_sk#24]
Right keys [1]: [ss_item_sk#28]
Join condition: None

(115) ReusedExchange [Reuses operator id: 69]
Output [1]: [d_date_sk#11]

(116) BroadcastHashJoin [codegen id : 116]
Left keys [1]: [ws_sold_date_sk#23]
Right keys [1]: [d_date_sk#11]
Join condition: None

(117) Project [codegen id : 116]
Output [3]: [ws_item_sk#24, ws_quantity#65, ws_list_price#66]
Input [5]: [ws_sold_date_sk#23, ws_item_sk#24, ws_quantity#65, ws_list_price#66, d_date_sk#11]

(118) ReusedExchange [Reuses operator id: 80]
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(119) BroadcastHashJoin [codegen id : 116]
Left keys [1]: [ws_item_sk#24]
Right keys [1]: [i_item_sk#7]
Join condition: None

(120) Project [codegen id : 116]
Output [5]: [ws_quantity#65, ws_list_price#66, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [7]: [ws_item_sk#24, ws_quantity#65, ws_list_price#66, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(121) HashAggregate [codegen id : 116]
Input [5]: [ws_quantity#65, ws_list_price#66, i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#68, isEmpty#69, count#70]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#71, isEmpty#72, count#73]

(122) Exchange
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#71, isEmpty#72, count#73]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), true, [id=#74]

(123) HashAggregate [codegen id : 117]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#71, isEmpty#72, count#73]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#75, count(1)#76]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#75 AS sales#77, count(1)#76 AS number_sales#78, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#75 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#79]

(124) Filter [codegen id : 117]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#77, number_sales#78, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#79]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#79) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#79 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#46, [id=#47] as decimal(32,6))))

(125) Project [codegen id : 117]
Output [6]: [sales#77, number_sales#78, web AS channel#80, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#77, number_sales#78, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#79]

(126) Union

(127) Expand [codegen id : 118]
Input [6]: [sales#43, number_sales#44, channel#48, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [List(sales#43, number_sales#44, channel#48, i_brand_id#8, i_class_id#9, i_category_id#10, 0), List(sales#43, number_sales#44, channel#48, i_brand_id#8, i_class_id#9, null, 1), List(sales#43, number_sales#44, channel#48, i_brand_id#8, null, null, 3), List(sales#43, number_sales#44, channel#48, null, null, null, 7), List(sales#43, number_sales#44, null, null, null, null, 15)], [sales#43, number_sales#44, channel#81, i_brand_id#82, i_class_id#83, i_category_id#84, spark_grouping_id#85]

(128) HashAggregate [codegen id : 118]
Input [7]: [sales#43, number_sales#44, channel#81, i_brand_id#82, i_class_id#83, i_category_id#84, spark_grouping_id#85]
Keys [5]: [channel#81, i_brand_id#82, i_class_id#83, i_category_id#84, spark_grouping_id#85]
Functions [2]: [partial_sum(sales#43), partial_sum(number_sales#44)]
Aggregate Attributes [3]: [sum#86, isEmpty#87, sum#88]
Results [8]: [channel#81, i_brand_id#82, i_class_id#83, i_category_id#84, spark_grouping_id#85, sum#89, isEmpty#90, sum#91]

(129) Exchange
Input [8]: [channel#81, i_brand_id#82, i_class_id#83, i_category_id#84, spark_grouping_id#85, sum#89, isEmpty#90, sum#91]
Arguments: hashpartitioning(channel#81, i_brand_id#82, i_class_id#83, i_category_id#84, spark_grouping_id#85, 5), true, [id=#92]

(130) HashAggregate [codegen id : 119]
Input [8]: [channel#81, i_brand_id#82, i_class_id#83, i_category_id#84, spark_grouping_id#85, sum#89, isEmpty#90, sum#91]
Keys [5]: [channel#81, i_brand_id#82, i_class_id#83, i_category_id#84, spark_grouping_id#85]
Functions [2]: [sum(sales#43), sum(number_sales#44)]
Aggregate Attributes [2]: [sum(sales#43)#93, sum(number_sales#44)#94]
Results [6]: [channel#81, i_brand_id#82, i_class_id#83, i_category_id#84, sum(sales#43)#93 AS sum(sales)#95, sum(number_sales#44)#94 AS sum(number_sales)#96]

(131) TakeOrderedAndProject
Input [6]: [channel#81, i_brand_id#82, i_class_id#83, i_category_id#84, sum(sales)#95, sum(number_sales)#96]
Arguments: 100, [channel#81 ASC NULLS FIRST, i_brand_id#82 ASC NULLS FIRST, i_class_id#83 ASC NULLS FIRST, i_category_id#84 ASC NULLS FIRST], [channel#81, i_brand_id#82, i_class_id#83, i_category_id#84, sum(sales)#95, sum(number_sales)#96]

===== Subqueries =====

Subquery:1 Hosting operator id = 86 Hosting Expression = Subquery scalar-subquery#46, [id=#47]
* HashAggregate (157)
+- Exchange (156)
   +- * HashAggregate (155)
      +- Union (154)
         :- * Project (141)
         :  +- * BroadcastHashJoin Inner BuildRight (140)
         :     :- * Filter (134)
         :     :  +- * ColumnarToRow (133)
         :     :     +- Scan parquet default.store_sales (132)
         :     +- BroadcastExchange (139)
         :        +- * Project (138)
         :           +- * Filter (137)
         :              +- * ColumnarToRow (136)
         :                 +- Scan parquet default.date_dim (135)
         :- * Project (147)
         :  +- * BroadcastHashJoin Inner BuildRight (146)
         :     :- * Filter (144)
         :     :  +- * ColumnarToRow (143)
         :     :     +- Scan parquet default.catalog_sales (142)
         :     +- ReusedExchange (145)
         +- * Project (153)
            +- * BroadcastHashJoin Inner BuildRight (152)
               :- * Filter (150)
               :  +- * ColumnarToRow (149)
               :     +- Scan parquet default.web_sales (148)
               +- ReusedExchange (151)


(132) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(133) ColumnarToRow [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]

(134) Filter [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Condition : isnotnull(ss_sold_date_sk#1)

(135) Scan parquet default.date_dim
Output [2]: [d_date_sk#11, d_year#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(136) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#11, d_year#12]

(137) Filter [codegen id : 1]
Input [2]: [d_date_sk#11, d_year#12]
Condition : (((isnotnull(d_year#12) AND (d_year#12 >= 1999)) AND (d_year#12 <= 2001)) AND isnotnull(d_date_sk#11))

(138) Project [codegen id : 1]
Output [1]: [d_date_sk#11]
Input [2]: [d_date_sk#11, d_year#12]

(139) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#97]

(140) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#11]
Join condition: None

(141) Project [codegen id : 2]
Output [2]: [ss_quantity#3 AS quantity#98, ss_list_price#4 AS list_price#99]
Input [4]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, d_date_sk#11]

(142) Scan parquet default.catalog_sales
Output [3]: [cs_sold_date_sk#19, cs_quantity#49, cs_list_price#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(143) ColumnarToRow [codegen id : 4]
Input [3]: [cs_sold_date_sk#19, cs_quantity#49, cs_list_price#50]

(144) Filter [codegen id : 4]
Input [3]: [cs_sold_date_sk#19, cs_quantity#49, cs_list_price#50]
Condition : isnotnull(cs_sold_date_sk#19)

(145) ReusedExchange [Reuses operator id: 139]
Output [1]: [d_date_sk#11]

(146) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#19]
Right keys [1]: [d_date_sk#11]
Join condition: None

(147) Project [codegen id : 4]
Output [2]: [cs_quantity#49 AS quantity#100, cs_list_price#50 AS list_price#101]
Input [4]: [cs_sold_date_sk#19, cs_quantity#49, cs_list_price#50, d_date_sk#11]

(148) Scan parquet default.web_sales
Output [3]: [ws_sold_date_sk#23, ws_quantity#65, ws_list_price#66]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(149) ColumnarToRow [codegen id : 6]
Input [3]: [ws_sold_date_sk#23, ws_quantity#65, ws_list_price#66]

(150) Filter [codegen id : 6]
Input [3]: [ws_sold_date_sk#23, ws_quantity#65, ws_list_price#66]
Condition : isnotnull(ws_sold_date_sk#23)

(151) ReusedExchange [Reuses operator id: 139]
Output [1]: [d_date_sk#11]

(152) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#23]
Right keys [1]: [d_date_sk#11]
Join condition: None

(153) Project [codegen id : 6]
Output [2]: [ws_quantity#65 AS quantity#102, ws_list_price#66 AS list_price#103]
Input [4]: [ws_sold_date_sk#23, ws_quantity#65, ws_list_price#66, d_date_sk#11]

(154) Union

(155) HashAggregate [codegen id : 7]
Input [2]: [quantity#98, list_price#99]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#98 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#99 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#104, count#105]
Results [2]: [sum#106, count#107]

(156) Exchange
Input [2]: [sum#106, count#107]
Arguments: SinglePartition, true, [id=#108]

(157) HashAggregate [codegen id : 8]
Input [2]: [sum#106, count#107]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#98 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#99 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#98 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#99 as decimal(12,2)))), DecimalType(18,2), true))#109]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#98 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#99 as decimal(12,2)))), DecimalType(18,2), true))#109 AS average_sales#110]

Subquery:2 Hosting operator id = 3 Hosting Expression = ss_sold_date_sk#1 IN dynamicpruning#5
ReusedExchange (158)


(158) ReusedExchange [Reuses operator id: 69]
Output [1]: [d_date_sk#11]

Subquery:3 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#1 IN dynamicpruning#5

Subquery:4 Hosting operator id = 105 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:5 Hosting operator id = 90 Hosting Expression = cs_sold_date_sk#19 IN dynamicpruning#5

Subquery:6 Hosting operator id = 88 Hosting Expression = cs_sold_date_sk#19 IN dynamicpruning#5

Subquery:7 Hosting operator id = 124 Hosting Expression = ReusedSubquery Subquery scalar-subquery#46, [id=#47]

Subquery:8 Hosting operator id = 109 Hosting Expression = ws_sold_date_sk#23 IN dynamicpruning#5

Subquery:9 Hosting operator id = 107 Hosting Expression = ws_sold_date_sk#23 IN dynamicpruning#5


