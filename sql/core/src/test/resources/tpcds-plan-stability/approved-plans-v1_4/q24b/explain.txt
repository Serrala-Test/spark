== Physical Plan ==
* Project (47)
+- * Filter (46)
   +- * HashAggregate (45)
      +- Exchange (44)
         +- * HashAggregate (43)
            +- * HashAggregate (42)
               +- Exchange (41)
                  +- * HashAggregate (40)
                     +- * Project (39)
                        +- * BroadcastHashJoin Inner BuildRight (38)
                           :- * Project (33)
                           :  +- * BroadcastHashJoin Inner BuildRight (32)
                           :     :- * Project (27)
                           :     :  +- * BroadcastHashJoin Inner BuildRight (26)
                           :     :     :- * Project (21)
                           :     :     :  +- * BroadcastHashJoin Inner BuildRight (20)
                           :     :     :     :- * Project (14)
                           :     :     :     :  +- * SortMergeJoin Inner (13)
                           :     :     :     :     :- * Sort (6)
                           :     :     :     :     :  +- Exchange (5)
                           :     :     :     :     :     +- * Project (4)
                           :     :     :     :     :        +- * Filter (3)
                           :     :     :     :     :           +- * ColumnarToRow (2)
                           :     :     :     :     :              +- Scan parquet default.store_sales (1)
                           :     :     :     :     +- * Sort (12)
                           :     :     :     :        +- Exchange (11)
                           :     :     :     :           +- * Project (10)
                           :     :     :     :              +- * Filter (9)
                           :     :     :     :                 +- * ColumnarToRow (8)
                           :     :     :     :                    +- Scan parquet default.store_returns (7)
                           :     :     :     +- BroadcastExchange (19)
                           :     :     :        +- * Project (18)
                           :     :     :           +- * Filter (17)
                           :     :     :              +- * ColumnarToRow (16)
                           :     :     :                 +- Scan parquet default.store (15)
                           :     :     +- BroadcastExchange (25)
                           :     :        +- * Filter (24)
                           :     :           +- * ColumnarToRow (23)
                           :     :              +- Scan parquet default.item (22)
                           :     +- BroadcastExchange (31)
                           :        +- * Filter (30)
                           :           +- * ColumnarToRow (29)
                           :              +- Scan parquet default.customer (28)
                           +- BroadcastExchange (37)
                              +- * Filter (36)
                                 +- * ColumnarToRow (35)
                                    +- Scan parquet default.customer_address (34)


(1) Scan parquet default.store_sales
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]

(3) Filter [codegen id : 1]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Condition : (((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2))

(4) Project [codegen id : 1]
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]

(5) Exchange
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Arguments: hashpartitioning(ss_ticket_number#4, ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#7]

(6) Sort [codegen id : 2]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Arguments: [ss_ticket_number#4 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST], false, 0

(7) Scan parquet default.store_returns
Output [3]: [sr_item_sk#8, sr_ticket_number#9, sr_returned_date_sk#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(8) ColumnarToRow [codegen id : 3]
Input [3]: [sr_item_sk#8, sr_ticket_number#9, sr_returned_date_sk#10]

(9) Filter [codegen id : 3]
Input [3]: [sr_item_sk#8, sr_ticket_number#9, sr_returned_date_sk#10]
Condition : (isnotnull(sr_ticket_number#9) AND isnotnull(sr_item_sk#8))

(10) Project [codegen id : 3]
Output [2]: [sr_item_sk#8, sr_ticket_number#9]
Input [3]: [sr_item_sk#8, sr_ticket_number#9, sr_returned_date_sk#10]

(11) Exchange
Input [2]: [sr_item_sk#8, sr_ticket_number#9]
Arguments: hashpartitioning(sr_ticket_number#9, sr_item_sk#8, 5), ENSURE_REQUIREMENTS, [id=#11]

(12) Sort [codegen id : 4]
Input [2]: [sr_item_sk#8, sr_ticket_number#9]
Arguments: [sr_ticket_number#9 ASC NULLS FIRST, sr_item_sk#8 ASC NULLS FIRST], false, 0

(13) SortMergeJoin [codegen id : 9]
Left keys [2]: [ss_ticket_number#4, ss_item_sk#1]
Right keys [2]: [sr_ticket_number#9, sr_item_sk#8]
Join condition: None

(14) Project [codegen id : 9]
Output [4]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, sr_item_sk#8, sr_ticket_number#9]

(15) Scan parquet default.store
Output [5]: [s_store_sk#12, s_store_name#13, s_market_id#14, s_state#15, s_zip#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(16) ColumnarToRow [codegen id : 5]
Input [5]: [s_store_sk#12, s_store_name#13, s_market_id#14, s_state#15, s_zip#16]

(17) Filter [codegen id : 5]
Input [5]: [s_store_sk#12, s_store_name#13, s_market_id#14, s_state#15, s_zip#16]
Condition : (((isnotnull(s_market_id#14) AND (s_market_id#14 = 8)) AND isnotnull(s_store_sk#12)) AND isnotnull(s_zip#16))

(18) Project [codegen id : 5]
Output [4]: [s_store_sk#12, s_store_name#13, s_state#15, s_zip#16]
Input [5]: [s_store_sk#12, s_store_name#13, s_market_id#14, s_state#15, s_zip#16]

(19) BroadcastExchange
Input [4]: [s_store_sk#12, s_store_name#13, s_state#15, s_zip#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#17]

(20) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#12]
Join condition: None

(21) Project [codegen id : 9]
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16]
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5, s_store_sk#12, s_store_name#13, s_state#15, s_zip#16]

(22) Scan parquet default.item
Output [6]: [i_item_sk#18, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon             ), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(23) ColumnarToRow [codegen id : 6]
Input [6]: [i_item_sk#18, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23]

(24) Filter [codegen id : 6]
Input [6]: [i_item_sk#18, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23]
Condition : ((isnotnull(i_color#21) AND (i_color#21 = chiffon             )) AND isnotnull(i_item_sk#18))

(25) BroadcastExchange
Input [6]: [i_item_sk#18, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#24]

(26) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#18]
Join condition: None

(27) Project [codegen id : 9]
Output [10]: [ss_customer_sk#2, ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16, i_item_sk#18, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23]

(28) Scan parquet default.customer
Output [4]: [c_customer_sk#25, c_first_name#26, c_last_name#27, c_birth_country#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(29) ColumnarToRow [codegen id : 7]
Input [4]: [c_customer_sk#25, c_first_name#26, c_last_name#27, c_birth_country#28]

(30) Filter [codegen id : 7]
Input [4]: [c_customer_sk#25, c_first_name#26, c_last_name#27, c_birth_country#28]
Condition : (isnotnull(c_customer_sk#25) AND isnotnull(c_birth_country#28))

(31) BroadcastExchange
Input [4]: [c_customer_sk#25, c_first_name#26, c_last_name#27, c_birth_country#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(32) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#25]
Join condition: None

(33) Project [codegen id : 9]
Output [12]: [ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23, c_first_name#26, c_last_name#27, c_birth_country#28]
Input [14]: [ss_customer_sk#2, ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23, c_customer_sk#25, c_first_name#26, c_last_name#27, c_birth_country#28]

(34) Scan parquet default.customer_address
Output [3]: [ca_state#30, ca_zip#31, ca_country#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>

(35) ColumnarToRow [codegen id : 8]
Input [3]: [ca_state#30, ca_zip#31, ca_country#32]

(36) Filter [codegen id : 8]
Input [3]: [ca_state#30, ca_zip#31, ca_country#32]
Condition : (isnotnull(ca_country#32) AND isnotnull(ca_zip#31))

(37) BroadcastExchange
Input [3]: [ca_state#30, ca_zip#31, ca_country#32]
Arguments: HashedRelationBroadcastMode(List(upper(input[2, string, false]), input[1, string, false]),false), [id=#33]

(38) BroadcastHashJoin [codegen id : 9]
Left keys [2]: [c_birth_country#28, s_zip#16]
Right keys [2]: [upper(ca_country#32), ca_zip#31]
Join condition: None

(39) Project [codegen id : 9]
Output [11]: [ss_net_paid#5, s_store_name#13, s_state#15, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23, c_first_name#26, c_last_name#27, ca_state#30]
Input [15]: [ss_net_paid#5, s_store_name#13, s_state#15, s_zip#16, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23, c_first_name#26, c_last_name#27, c_birth_country#28, ca_state#30, ca_zip#31, ca_country#32]

(40) HashAggregate [codegen id : 9]
Input [11]: [ss_net_paid#5, s_store_name#13, s_state#15, i_current_price#19, i_size#20, i_color#21, i_units#22, i_manager_id#23, c_first_name#26, c_last_name#27, ca_state#30]
Keys [10]: [c_last_name#27, c_first_name#26, s_store_name#13, ca_state#30, s_state#15, i_color#21, i_current_price#19, i_manager_id#23, i_units#22, i_size#20]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum#34]
Results [11]: [c_last_name#27, c_first_name#26, s_store_name#13, ca_state#30, s_state#15, i_color#21, i_current_price#19, i_manager_id#23, i_units#22, i_size#20, sum#35]

(41) Exchange
Input [11]: [c_last_name#27, c_first_name#26, s_store_name#13, ca_state#30, s_state#15, i_color#21, i_current_price#19, i_manager_id#23, i_units#22, i_size#20, sum#35]
Arguments: hashpartitioning(c_last_name#27, c_first_name#26, s_store_name#13, ca_state#30, s_state#15, i_color#21, i_current_price#19, i_manager_id#23, i_units#22, i_size#20, 5), ENSURE_REQUIREMENTS, [id=#36]

(42) HashAggregate [codegen id : 10]
Input [11]: [c_last_name#27, c_first_name#26, s_store_name#13, ca_state#30, s_state#15, i_color#21, i_current_price#19, i_manager_id#23, i_units#22, i_size#20, sum#35]
Keys [10]: [c_last_name#27, c_first_name#26, s_store_name#13, ca_state#30, s_state#15, i_color#21, i_current_price#19, i_manager_id#23, i_units#22, i_size#20]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#5))#37]
Results [4]: [c_last_name#27, c_first_name#26, s_store_name#13, MakeDecimal(sum(UnscaledValue(ss_net_paid#5))#37,17,2) AS netpaid#38]

(43) HashAggregate [codegen id : 10]
Input [4]: [c_last_name#27, c_first_name#26, s_store_name#13, netpaid#38]
Keys [3]: [c_last_name#27, c_first_name#26, s_store_name#13]
Functions [1]: [partial_sum(netpaid#38)]
Aggregate Attributes [2]: [sum#39, isEmpty#40]
Results [5]: [c_last_name#27, c_first_name#26, s_store_name#13, sum#41, isEmpty#42]

(44) Exchange
Input [5]: [c_last_name#27, c_first_name#26, s_store_name#13, sum#41, isEmpty#42]
Arguments: hashpartitioning(c_last_name#27, c_first_name#26, s_store_name#13, 5), ENSURE_REQUIREMENTS, [id=#43]

(45) HashAggregate [codegen id : 11]
Input [5]: [c_last_name#27, c_first_name#26, s_store_name#13, sum#41, isEmpty#42]
Keys [3]: [c_last_name#27, c_first_name#26, s_store_name#13]
Functions [1]: [sum(netpaid#38)]
Aggregate Attributes [1]: [sum(netpaid#38)#44]
Results [5]: [c_last_name#27, c_first_name#26, s_store_name#13, sum(netpaid#38)#44 AS paid#45, sum(netpaid#38)#44 AS sum(netpaid#38)#46]

(46) Filter [codegen id : 11]
Input [5]: [c_last_name#27, c_first_name#26, s_store_name#13, paid#45, sum(netpaid#38)#46]
Condition : (isnotnull(sum(netpaid#38)#46) AND (cast(sum(netpaid#38)#46 as decimal(33,8)) > cast(Subquery scalar-subquery#47, [id=#48] as decimal(33,8))))

(47) Project [codegen id : 11]
Output [4]: [c_last_name#27, c_first_name#26, s_store_name#13, paid#45]
Input [5]: [c_last_name#27, c_first_name#26, s_store_name#13, paid#45, sum(netpaid#38)#46]

===== Subqueries =====

Subquery:1 Hosting operator id = 46 Hosting Expression = Subquery scalar-subquery#47, [id=#48]
* HashAggregate (74)
+- Exchange (73)
   +- * HashAggregate (72)
      +- * HashAggregate (71)
         +- Exchange (70)
            +- * HashAggregate (69)
               +- * Project (68)
                  +- * BroadcastHashJoin Inner BuildRight (67)
                     :- * Project (65)
                     :  +- * BroadcastHashJoin Inner BuildRight (64)
                     :     :- * Project (62)
                     :     :  +- * BroadcastHashJoin Inner BuildRight (61)
                     :     :     :- * Project (56)
                     :     :     :  +- * BroadcastHashJoin Inner BuildRight (55)
                     :     :     :     :- * Project (53)
                     :     :     :     :  +- * SortMergeJoin Inner (52)
                     :     :     :     :     :- * Sort (49)
                     :     :     :     :     :  +- ReusedExchange (48)
                     :     :     :     :     +- * Sort (51)
                     :     :     :     :        +- ReusedExchange (50)
                     :     :     :     +- ReusedExchange (54)
                     :     :     +- BroadcastExchange (60)
                     :     :        +- * Filter (59)
                     :     :           +- * ColumnarToRow (58)
                     :     :              +- Scan parquet default.item (57)
                     :     +- ReusedExchange (63)
                     +- ReusedExchange (66)


(48) ReusedExchange [Reuses operator id: 5]
Output [5]: [ss_item_sk#49, ss_customer_sk#50, ss_store_sk#51, ss_ticket_number#52, ss_net_paid#53]

(49) Sort [codegen id : 2]
Input [5]: [ss_item_sk#49, ss_customer_sk#50, ss_store_sk#51, ss_ticket_number#52, ss_net_paid#53]
Arguments: [ss_ticket_number#52 ASC NULLS FIRST, ss_item_sk#49 ASC NULLS FIRST], false, 0

(50) ReusedExchange [Reuses operator id: 11]
Output [2]: [sr_item_sk#54, sr_ticket_number#55]

(51) Sort [codegen id : 4]
Input [2]: [sr_item_sk#54, sr_ticket_number#55]
Arguments: [sr_ticket_number#55 ASC NULLS FIRST, sr_item_sk#54 ASC NULLS FIRST], false, 0

(52) SortMergeJoin [codegen id : 9]
Left keys [2]: [ss_ticket_number#52, ss_item_sk#49]
Right keys [2]: [sr_ticket_number#55, sr_item_sk#54]
Join condition: None

(53) Project [codegen id : 9]
Output [4]: [ss_item_sk#49, ss_customer_sk#50, ss_store_sk#51, ss_net_paid#53]
Input [7]: [ss_item_sk#49, ss_customer_sk#50, ss_store_sk#51, ss_ticket_number#52, ss_net_paid#53, sr_item_sk#54, sr_ticket_number#55]

(54) ReusedExchange [Reuses operator id: 19]
Output [4]: [s_store_sk#56, s_store_name#57, s_state#58, s_zip#59]

(55) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#51]
Right keys [1]: [s_store_sk#56]
Join condition: None

(56) Project [codegen id : 9]
Output [6]: [ss_item_sk#49, ss_customer_sk#50, ss_net_paid#53, s_store_name#57, s_state#58, s_zip#59]
Input [8]: [ss_item_sk#49, ss_customer_sk#50, ss_store_sk#51, ss_net_paid#53, s_store_sk#56, s_store_name#57, s_state#58, s_zip#59]

(57) Scan parquet default.item
Output [6]: [i_item_sk#60, i_current_price#61, i_size#62, i_color#63, i_units#64, i_manager_id#65]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(58) ColumnarToRow [codegen id : 6]
Input [6]: [i_item_sk#60, i_current_price#61, i_size#62, i_color#63, i_units#64, i_manager_id#65]

(59) Filter [codegen id : 6]
Input [6]: [i_item_sk#60, i_current_price#61, i_size#62, i_color#63, i_units#64, i_manager_id#65]
Condition : isnotnull(i_item_sk#60)

(60) BroadcastExchange
Input [6]: [i_item_sk#60, i_current_price#61, i_size#62, i_color#63, i_units#64, i_manager_id#65]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#66]

(61) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#49]
Right keys [1]: [i_item_sk#60]
Join condition: None

(62) Project [codegen id : 9]
Output [10]: [ss_customer_sk#50, ss_net_paid#53, s_store_name#57, s_state#58, s_zip#59, i_current_price#61, i_size#62, i_color#63, i_units#64, i_manager_id#65]
Input [12]: [ss_item_sk#49, ss_customer_sk#50, ss_net_paid#53, s_store_name#57, s_state#58, s_zip#59, i_item_sk#60, i_current_price#61, i_size#62, i_color#63, i_units#64, i_manager_id#65]

(63) ReusedExchange [Reuses operator id: 31]
Output [4]: [c_customer_sk#67, c_first_name#68, c_last_name#69, c_birth_country#70]

(64) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_customer_sk#50]
Right keys [1]: [c_customer_sk#67]
Join condition: None

(65) Project [codegen id : 9]
Output [12]: [ss_net_paid#53, s_store_name#57, s_state#58, s_zip#59, i_current_price#61, i_size#62, i_color#63, i_units#64, i_manager_id#65, c_first_name#68, c_last_name#69, c_birth_country#70]
Input [14]: [ss_customer_sk#50, ss_net_paid#53, s_store_name#57, s_state#58, s_zip#59, i_current_price#61, i_size#62, i_color#63, i_units#64, i_manager_id#65, c_customer_sk#67, c_first_name#68, c_last_name#69, c_birth_country#70]

(66) ReusedExchange [Reuses operator id: 37]
Output [3]: [ca_state#71, ca_zip#72, ca_country#73]

(67) BroadcastHashJoin [codegen id : 9]
Left keys [2]: [c_birth_country#70, s_zip#59]
Right keys [2]: [upper(ca_country#73), ca_zip#72]
Join condition: None

(68) Project [codegen id : 9]
Output [11]: [ss_net_paid#53, s_store_name#57, s_state#58, i_current_price#61, i_size#62, i_color#63, i_units#64, i_manager_id#65, c_first_name#68, c_last_name#69, ca_state#71]
Input [15]: [ss_net_paid#53, s_store_name#57, s_state#58, s_zip#59, i_current_price#61, i_size#62, i_color#63, i_units#64, i_manager_id#65, c_first_name#68, c_last_name#69, c_birth_country#70, ca_state#71, ca_zip#72, ca_country#73]

(69) HashAggregate [codegen id : 9]
Input [11]: [ss_net_paid#53, s_store_name#57, s_state#58, i_current_price#61, i_size#62, i_color#63, i_units#64, i_manager_id#65, c_first_name#68, c_last_name#69, ca_state#71]
Keys [10]: [c_last_name#69, c_first_name#68, s_store_name#57, ca_state#71, s_state#58, i_color#63, i_current_price#61, i_manager_id#65, i_units#64, i_size#62]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#53))]
Aggregate Attributes [1]: [sum#74]
Results [11]: [c_last_name#69, c_first_name#68, s_store_name#57, ca_state#71, s_state#58, i_color#63, i_current_price#61, i_manager_id#65, i_units#64, i_size#62, sum#75]

(70) Exchange
Input [11]: [c_last_name#69, c_first_name#68, s_store_name#57, ca_state#71, s_state#58, i_color#63, i_current_price#61, i_manager_id#65, i_units#64, i_size#62, sum#75]
Arguments: hashpartitioning(c_last_name#69, c_first_name#68, s_store_name#57, ca_state#71, s_state#58, i_color#63, i_current_price#61, i_manager_id#65, i_units#64, i_size#62, 5), ENSURE_REQUIREMENTS, [id=#76]

(71) HashAggregate [codegen id : 10]
Input [11]: [c_last_name#69, c_first_name#68, s_store_name#57, ca_state#71, s_state#58, i_color#63, i_current_price#61, i_manager_id#65, i_units#64, i_size#62, sum#75]
Keys [10]: [c_last_name#69, c_first_name#68, s_store_name#57, ca_state#71, s_state#58, i_color#63, i_current_price#61, i_manager_id#65, i_units#64, i_size#62]
Functions [1]: [sum(UnscaledValue(ss_net_paid#53))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#53))#77]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_paid#53))#77,17,2) AS netpaid#38]

(72) HashAggregate [codegen id : 10]
Input [1]: [netpaid#38]
Keys: []
Functions [1]: [partial_avg(netpaid#38)]
Aggregate Attributes [2]: [sum#78, count#79]
Results [2]: [sum#80, count#81]

(73) Exchange
Input [2]: [sum#80, count#81]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#82]

(74) HashAggregate [codegen id : 11]
Input [2]: [sum#80, count#81]
Keys: []
Functions [1]: [avg(netpaid#38)]
Aggregate Attributes [1]: [avg(netpaid#38)#83]
Results [1]: [CheckOverflow((0.050000 * promote_precision(avg(netpaid#38)#83)), DecimalType(24,8), true) AS (0.05 * avg(netpaid))#84]


