== Physical Plan ==
TakeOrderedAndProject (56)
+- * Project (55)
   +- * BroadcastHashJoin Inner BuildRight (54)
      :- * Project (33)
      :  +- * SortMergeJoin Inner (32)
      :     :- * Sort (10)
      :     :  +- Exchange (9)
      :     :     +- * Project (8)
      :     :        +- * BroadcastHashJoin Inner BuildRight (7)
      :     :           :- * ColumnarToRow (2)
      :     :           :  +- Scan parquet default.customer (1)
      :     :           +- BroadcastExchange (6)
      :     :              +- * Filter (5)
      :     :                 +- * ColumnarToRow (4)
      :     :                    +- Scan parquet default.customer_address (3)
      :     +- * Sort (31)
      :        +- Exchange (30)
      :           +- * Filter (29)
      :              +- * HashAggregate (28)
      :                 +- Exchange (27)
      :                    +- * HashAggregate (26)
      :                       +- * Project (25)
      :                          +- * SortMergeJoin Inner (24)
      :                             :- * Sort (18)
      :                             :  +- Exchange (17)
      :                             :     +- * Project (16)
      :                             :        +- * BroadcastHashJoin Inner BuildRight (15)
      :                             :           :- * Filter (13)
      :                             :           :  +- * ColumnarToRow (12)
      :                             :           :     +- Scan parquet default.catalog_returns (11)
      :                             :           +- ReusedExchange (14)
      :                             +- * Sort (23)
      :                                +- Exchange (22)
      :                                   +- * Filter (21)
      :                                      +- * ColumnarToRow (20)
      :                                         +- Scan parquet default.customer_address (19)
      +- BroadcastExchange (53)
         +- * Filter (52)
            +- * HashAggregate (51)
               +- Exchange (50)
                  +- * HashAggregate (49)
                     +- * HashAggregate (48)
                        +- Exchange (47)
                           +- * HashAggregate (46)
                              +- * Project (45)
                                 +- * SortMergeJoin Inner (44)
                                    :- * Sort (41)
                                    :  +- Exchange (40)
                                    :     +- * Project (39)
                                    :        +- * BroadcastHashJoin Inner BuildRight (38)
                                    :           :- * Filter (36)
                                    :           :  +- * ColumnarToRow (35)
                                    :           :     +- Scan parquet default.catalog_returns (34)
                                    :           +- ReusedExchange (37)
                                    +- * Sort (43)
                                       +- ReusedExchange (42)


(1) Scan parquet default.customer
Output [6]: [c_customer_sk#1, c_customer_id#2, c_current_addr_sk#3, c_salutation#4, c_first_name#5, c_last_name#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_addr_sk:int,c_salutation:string,c_first_name:string,c_last_name:string>

(2) ColumnarToRow [codegen id : 2]
Input [6]: [c_customer_sk#1, c_customer_id#2, c_current_addr_sk#3, c_salutation#4, c_first_name#5, c_last_name#6]

(3) Scan parquet default.customer_address
Output [12]: [ca_address_sk#7, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA)]
ReadSchema: struct<ca_address_sk:int,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_suite_number:string,ca_city:string,ca_county:string,ca_state:string,ca_zip:string,ca_country:string,ca_gmt_offset:decimal(5,2),ca_location_type:string>

(4) ColumnarToRow [codegen id : 1]
Input [12]: [ca_address_sk#7, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18]

(5) Filter [codegen id : 1]
Input [12]: [ca_address_sk#7, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18]
Condition : (isnotnull(ca_state#14) AND (ca_state#14 = GA))

(6) BroadcastExchange
Input [12]: [ca_address_sk#7, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#19]

(7) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [c_current_addr_sk#3]
Right keys [1]: [ca_address_sk#7]
Join condition: None

(8) Project [codegen id : 2]
Output [16]: [c_customer_sk#1, c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18]
Input [18]: [c_customer_sk#1, c_customer_id#2, c_current_addr_sk#3, c_salutation#4, c_first_name#5, c_last_name#6, ca_address_sk#7, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18]

(9) Exchange
Input [16]: [c_customer_sk#1, c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18]
Arguments: hashpartitioning(c_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#20]

(10) Sort [codegen id : 3]
Input [16]: [c_customer_sk#1, c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(11) Scan parquet default.catalog_returns
Output [4]: [cr_returning_customer_sk#21, cr_returning_addr_sk#22, cr_return_amt_inc_tax#23, cr_returned_date_sk#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PartitionFilters: [dynamicpruningexpression(cr_returned_date_sk#24 IN dynamicpruning#25)]
PushedFilters: [IsNotNull(cr_returning_addr_sk), IsNotNull(cr_returning_customer_sk)]
ReadSchema: struct<cr_returning_customer_sk:int,cr_returning_addr_sk:int,cr_return_amt_inc_tax:decimal(7,2)>

(12) ColumnarToRow [codegen id : 5]
Input [4]: [cr_returning_customer_sk#21, cr_returning_addr_sk#22, cr_return_amt_inc_tax#23, cr_returned_date_sk#24]

(13) Filter [codegen id : 5]
Input [4]: [cr_returning_customer_sk#21, cr_returning_addr_sk#22, cr_return_amt_inc_tax#23, cr_returned_date_sk#24]
Condition : (isnotnull(cr_returning_addr_sk#22) AND isnotnull(cr_returning_customer_sk#21))

(14) ReusedExchange [Reuses operator id: 61]
Output [1]: [d_date_sk#26]

(15) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cr_returned_date_sk#24]
Right keys [1]: [d_date_sk#26]
Join condition: None

(16) Project [codegen id : 5]
Output [3]: [cr_returning_customer_sk#21, cr_returning_addr_sk#22, cr_return_amt_inc_tax#23]
Input [5]: [cr_returning_customer_sk#21, cr_returning_addr_sk#22, cr_return_amt_inc_tax#23, cr_returned_date_sk#24, d_date_sk#26]

(17) Exchange
Input [3]: [cr_returning_customer_sk#21, cr_returning_addr_sk#22, cr_return_amt_inc_tax#23]
Arguments: hashpartitioning(cr_returning_addr_sk#22, 5), ENSURE_REQUIREMENTS, [id=#27]

(18) Sort [codegen id : 6]
Input [3]: [cr_returning_customer_sk#21, cr_returning_addr_sk#22, cr_return_amt_inc_tax#23]
Arguments: [cr_returning_addr_sk#22 ASC NULLS FIRST], false, 0

(19) Scan parquet default.customer_address
Output [2]: [ca_address_sk#28, ca_state#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(20) ColumnarToRow [codegen id : 7]
Input [2]: [ca_address_sk#28, ca_state#29]

(21) Filter [codegen id : 7]
Input [2]: [ca_address_sk#28, ca_state#29]
Condition : isnotnull(ca_state#29)

(22) Exchange
Input [2]: [ca_address_sk#28, ca_state#29]
Arguments: hashpartitioning(ca_address_sk#28, 5), ENSURE_REQUIREMENTS, [id=#30]

(23) Sort [codegen id : 8]
Input [2]: [ca_address_sk#28, ca_state#29]
Arguments: [ca_address_sk#28 ASC NULLS FIRST], false, 0

(24) SortMergeJoin [codegen id : 9]
Left keys [1]: [cr_returning_addr_sk#22]
Right keys [1]: [ca_address_sk#28]
Join condition: None

(25) Project [codegen id : 9]
Output [3]: [cr_returning_customer_sk#21, cr_return_amt_inc_tax#23, ca_state#29]
Input [5]: [cr_returning_customer_sk#21, cr_returning_addr_sk#22, cr_return_amt_inc_tax#23, ca_address_sk#28, ca_state#29]

(26) HashAggregate [codegen id : 9]
Input [3]: [cr_returning_customer_sk#21, cr_return_amt_inc_tax#23, ca_state#29]
Keys [2]: [cr_returning_customer_sk#21, ca_state#29]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#23))]
Aggregate Attributes [1]: [sum#31]
Results [3]: [cr_returning_customer_sk#21, ca_state#29, sum#32]

(27) Exchange
Input [3]: [cr_returning_customer_sk#21, ca_state#29, sum#32]
Arguments: hashpartitioning(cr_returning_customer_sk#21, ca_state#29, 5), ENSURE_REQUIREMENTS, [id=#33]

(28) HashAggregate [codegen id : 10]
Input [3]: [cr_returning_customer_sk#21, ca_state#29, sum#32]
Keys [2]: [cr_returning_customer_sk#21, ca_state#29]
Functions [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#23))]
Aggregate Attributes [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#23))#34]
Results [3]: [cr_returning_customer_sk#21 AS ctr_customer_sk#35, ca_state#29 AS ctr_state#36, MakeDecimal(sum(UnscaledValue(cr_return_amt_inc_tax#23))#34,17,2) AS ctr_total_return#37]

(29) Filter [codegen id : 10]
Input [3]: [ctr_customer_sk#35, ctr_state#36, ctr_total_return#37]
Condition : isnotnull(ctr_total_return#37)

(30) Exchange
Input [3]: [ctr_customer_sk#35, ctr_state#36, ctr_total_return#37]
Arguments: hashpartitioning(ctr_customer_sk#35, 5), ENSURE_REQUIREMENTS, [id=#38]

(31) Sort [codegen id : 11]
Input [3]: [ctr_customer_sk#35, ctr_state#36, ctr_total_return#37]
Arguments: [ctr_customer_sk#35 ASC NULLS FIRST], false, 0

(32) SortMergeJoin [codegen id : 20]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ctr_customer_sk#35]
Join condition: None

(33) Project [codegen id : 20]
Output [17]: [c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18, ctr_state#36, ctr_total_return#37]
Input [19]: [c_customer_sk#1, c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18, ctr_customer_sk#35, ctr_state#36, ctr_total_return#37]

(34) Scan parquet default.catalog_returns
Output [4]: [cr_returning_customer_sk#39, cr_returning_addr_sk#40, cr_return_amt_inc_tax#41, cr_returned_date_sk#42]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PartitionFilters: [dynamicpruningexpression(cr_returned_date_sk#42 IN dynamicpruning#25)]
PushedFilters: [IsNotNull(cr_returning_addr_sk)]
ReadSchema: struct<cr_returning_customer_sk:int,cr_returning_addr_sk:int,cr_return_amt_inc_tax:decimal(7,2)>

(35) ColumnarToRow [codegen id : 13]
Input [4]: [cr_returning_customer_sk#39, cr_returning_addr_sk#40, cr_return_amt_inc_tax#41, cr_returned_date_sk#42]

(36) Filter [codegen id : 13]
Input [4]: [cr_returning_customer_sk#39, cr_returning_addr_sk#40, cr_return_amt_inc_tax#41, cr_returned_date_sk#42]
Condition : isnotnull(cr_returning_addr_sk#40)

(37) ReusedExchange [Reuses operator id: 61]
Output [1]: [d_date_sk#43]

(38) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [cr_returned_date_sk#42]
Right keys [1]: [d_date_sk#43]
Join condition: None

(39) Project [codegen id : 13]
Output [3]: [cr_returning_customer_sk#39, cr_returning_addr_sk#40, cr_return_amt_inc_tax#41]
Input [5]: [cr_returning_customer_sk#39, cr_returning_addr_sk#40, cr_return_amt_inc_tax#41, cr_returned_date_sk#42, d_date_sk#43]

(40) Exchange
Input [3]: [cr_returning_customer_sk#39, cr_returning_addr_sk#40, cr_return_amt_inc_tax#41]
Arguments: hashpartitioning(cr_returning_addr_sk#40, 5), ENSURE_REQUIREMENTS, [id=#44]

(41) Sort [codegen id : 14]
Input [3]: [cr_returning_customer_sk#39, cr_returning_addr_sk#40, cr_return_amt_inc_tax#41]
Arguments: [cr_returning_addr_sk#40 ASC NULLS FIRST], false, 0

(42) ReusedExchange [Reuses operator id: 22]
Output [2]: [ca_address_sk#45, ca_state#46]

(43) Sort [codegen id : 16]
Input [2]: [ca_address_sk#45, ca_state#46]
Arguments: [ca_address_sk#45 ASC NULLS FIRST], false, 0

(44) SortMergeJoin [codegen id : 17]
Left keys [1]: [cr_returning_addr_sk#40]
Right keys [1]: [ca_address_sk#45]
Join condition: None

(45) Project [codegen id : 17]
Output [3]: [cr_returning_customer_sk#39, cr_return_amt_inc_tax#41, ca_state#46]
Input [5]: [cr_returning_customer_sk#39, cr_returning_addr_sk#40, cr_return_amt_inc_tax#41, ca_address_sk#45, ca_state#46]

(46) HashAggregate [codegen id : 17]
Input [3]: [cr_returning_customer_sk#39, cr_return_amt_inc_tax#41, ca_state#46]
Keys [2]: [cr_returning_customer_sk#39, ca_state#46]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#41))]
Aggregate Attributes [1]: [sum#47]
Results [3]: [cr_returning_customer_sk#39, ca_state#46, sum#48]

(47) Exchange
Input [3]: [cr_returning_customer_sk#39, ca_state#46, sum#48]
Arguments: hashpartitioning(cr_returning_customer_sk#39, ca_state#46, 5), ENSURE_REQUIREMENTS, [id=#49]

(48) HashAggregate [codegen id : 18]
Input [3]: [cr_returning_customer_sk#39, ca_state#46, sum#48]
Keys [2]: [cr_returning_customer_sk#39, ca_state#46]
Functions [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#41))]
Aggregate Attributes [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#41))#50]
Results [2]: [ca_state#46 AS ctr_state#36, MakeDecimal(sum(UnscaledValue(cr_return_amt_inc_tax#41))#50,17,2) AS ctr_total_return#37]

(49) HashAggregate [codegen id : 18]
Input [2]: [ctr_state#36, ctr_total_return#37]
Keys [1]: [ctr_state#36]
Functions [1]: [partial_avg(ctr_total_return#37)]
Aggregate Attributes [2]: [sum#51, count#52]
Results [3]: [ctr_state#36, sum#53, count#54]

(50) Exchange
Input [3]: [ctr_state#36, sum#53, count#54]
Arguments: hashpartitioning(ctr_state#36, 5), ENSURE_REQUIREMENTS, [id=#55]

(51) HashAggregate [codegen id : 19]
Input [3]: [ctr_state#36, sum#53, count#54]
Keys [1]: [ctr_state#36]
Functions [1]: [avg(ctr_total_return#37)]
Aggregate Attributes [1]: [avg(ctr_total_return#37)#56]
Results [2]: [CheckOverflow((promote_precision(avg(ctr_total_return#37)#56) * 1.200000), DecimalType(24,7), true) AS (avg(ctr_total_return) * 1.2)#57, ctr_state#36 AS ctr_state#36#58]

(52) Filter [codegen id : 19]
Input [2]: [(avg(ctr_total_return) * 1.2)#57, ctr_state#36#58]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#57)

(53) BroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#57, ctr_state#36#58]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true]),false), [id=#59]

(54) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ctr_state#36]
Right keys [1]: [ctr_state#36#58]
Join condition: (cast(ctr_total_return#37 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#57)

(55) Project [codegen id : 20]
Output [16]: [c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18, ctr_total_return#37]
Input [19]: [c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18, ctr_state#36, ctr_total_return#37, (avg(ctr_total_return) * 1.2)#57, ctr_state#36#58]

(56) TakeOrderedAndProject
Input [16]: [c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18, ctr_total_return#37]
Arguments: 100, [c_customer_id#2 ASC NULLS FIRST, c_salutation#4 ASC NULLS FIRST, c_first_name#5 ASC NULLS FIRST, c_last_name#6 ASC NULLS FIRST, ca_street_number#8 ASC NULLS FIRST, ca_street_name#9 ASC NULLS FIRST, ca_street_type#10 ASC NULLS FIRST, ca_suite_number#11 ASC NULLS FIRST, ca_city#12 ASC NULLS FIRST, ca_county#13 ASC NULLS FIRST, ca_state#14 ASC NULLS FIRST, ca_zip#15 ASC NULLS FIRST, ca_country#16 ASC NULLS FIRST, ca_gmt_offset#17 ASC NULLS FIRST, ca_location_type#18 ASC NULLS FIRST, ctr_total_return#37 ASC NULLS FIRST], [c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, ca_street_number#8, ca_street_name#9, ca_street_type#10, ca_suite_number#11, ca_city#12, ca_county#13, ca_state#14, ca_zip#15, ca_country#16, ca_gmt_offset#17, ca_location_type#18, ctr_total_return#37]

===== Subqueries =====

Subquery:1 Hosting operator id = 11 Hosting Expression = cr_returned_date_sk#24 IN dynamicpruning#25
BroadcastExchange (61)
+- * Project (60)
   +- * Filter (59)
      +- * ColumnarToRow (58)
         +- Scan parquet default.date_dim (57)


(57) Scan parquet default.date_dim
Output [2]: [d_date_sk#26, d_year#60]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [EqualTo(d_year,2000)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(58) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#26, d_year#60]

(59) Filter [codegen id : 1]
Input [2]: [d_date_sk#26, d_year#60]
Condition : (d_year#60 = 2000)

(60) Project [codegen id : 1]
Output [1]: [d_date_sk#26]
Input [2]: [d_date_sk#26, d_year#60]

(61) BroadcastExchange
Input [1]: [d_date_sk#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#61]

Subquery:2 Hosting operator id = 34 Hosting Expression = cr_returned_date_sk#42 IN dynamicpruning#25


