== Physical Plan ==
TakeOrderedAndProject (69)
+- * Project (68)
   +- * SortMergeJoin Inner (67)
      :- * Sort (60)
      :  +- Exchange (59)
      :     +- * Project (58)
      :        +- * SortMergeJoin Inner (57)
      :           :- * Sort (50)
      :           :  +- Exchange (49)
      :           :     +- * Project (48)
      :           :        +- * SortMergeJoin Inner (47)
      :           :           :- * Sort (26)
      :           :           :  +- Exchange (25)
      :           :           :     +- * Filter (24)
      :           :           :        +- * HashAggregate (23)
      :           :           :           +- Exchange (22)
      :           :           :              +- * HashAggregate (21)
      :           :           :                 +- * Project (20)
      :           :           :                    +- * SortMergeJoin Inner (19)
      :           :           :                       :- * Sort (12)
      :           :           :                       :  +- Exchange (11)
      :           :           :                       :     +- * Project (10)
      :           :           :                       :        +- * BroadcastHashJoin Inner BuildRight (9)
      :           :           :                       :           :- * Filter (3)
      :           :           :                       :           :  +- * ColumnarToRow (2)
      :           :           :                       :           :     +- Scan parquet default.catalog_returns (1)
      :           :           :                       :           +- BroadcastExchange (8)
      :           :           :                       :              +- * Project (7)
      :           :           :                       :                 +- * Filter (6)
      :           :           :                       :                    +- * ColumnarToRow (5)
      :           :           :                       :                       +- Scan parquet default.date_dim (4)
      :           :           :                       +- * Sort (18)
      :           :           :                          +- Exchange (17)
      :           :           :                             +- * Project (16)
      :           :           :                                +- * Filter (15)
      :           :           :                                   +- * ColumnarToRow (14)
      :           :           :                                      +- Scan parquet default.customer_address (13)
      :           :           +- * Sort (46)
      :           :              +- * Filter (45)
      :           :                 +- * HashAggregate (44)
      :           :                    +- Exchange (43)
      :           :                       +- * HashAggregate (42)
      :           :                          +- * HashAggregate (41)
      :           :                             +- Exchange (40)
      :           :                                +- * HashAggregate (39)
      :           :                                   +- * Project (38)
      :           :                                      +- * SortMergeJoin Inner (37)
      :           :                                         :- * Sort (34)
      :           :                                         :  +- Exchange (33)
      :           :                                         :     +- * Project (32)
      :           :                                         :        +- * BroadcastHashJoin Inner BuildRight (31)
      :           :                                         :           :- * Filter (29)
      :           :                                         :           :  +- * ColumnarToRow (28)
      :           :                                         :           :     +- Scan parquet default.catalog_returns (27)
      :           :                                         :           +- ReusedExchange (30)
      :           :                                         +- * Sort (36)
      :           :                                            +- ReusedExchange (35)
      :           +- * Sort (56)
      :              +- Exchange (55)
      :                 +- * Project (54)
      :                    +- * Filter (53)
      :                       +- * ColumnarToRow (52)
      :                          +- Scan parquet default.customer (51)
      +- * Sort (66)
         +- Exchange (65)
            +- * Project (64)
               +- * Filter (63)
                  +- * ColumnarToRow (62)
                     +- Scan parquet default.customer_address (61)


(1) Scan parquet default.catalog_returns
Output [4]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_returned_date_sk), IsNotNull(cr_returning_addr_sk), IsNotNull(cr_returning_customer_sk)]
ReadSchema: struct<cr_returned_date_sk:int,cr_returning_customer_sk:int,cr_returning_addr_sk:int,cr_return_amt_inc_tax:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [4]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]

(3) Filter [codegen id : 2]
Input [4]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]
Condition : ((isnotnull(cr_returned_date_sk#1) AND isnotnull(cr_returning_addr_sk#3)) AND isnotnull(cr_returning_customer_sk#2))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#5, d_year#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#5, d_year#6]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#5, d_year#6]
Condition : ((isnotnull(d_year#6) AND (d_year#6 = 2000)) AND isnotnull(d_date_sk#5))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#5]
Input [2]: [d_date_sk#5, d_year#6]

(8) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#7]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [cr_returned_date_sk#1]
Right keys [1]: [d_date_sk#5]
Join condition: None

(10) Project [codegen id : 2]
Output [3]: [cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]
Input [5]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4, d_date_sk#5]

(11) Exchange
Input [3]: [cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]
Arguments: hashpartitioning(cr_returning_addr_sk#3, 5), ENSURE_REQUIREMENTS, [id=#8]

(12) Sort [codegen id : 3]
Input [3]: [cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]
Arguments: [cr_returning_addr_sk#3 ASC NULLS FIRST], false, 0

(13) Scan parquet default.customer_address
Output [2]: [ca_address_sk#9, ca_state#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(14) ColumnarToRow [codegen id : 4]
Input [2]: [ca_address_sk#9, ca_state#10]

(15) Filter [codegen id : 4]
Input [2]: [ca_address_sk#9, ca_state#10]
Condition : (isnotnull(ca_address_sk#9) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#10, 2, false, true)))

(16) Project [codegen id : 4]
Output [2]: [ca_address_sk#9, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#10, 2, false, true) AS ca_state#11]
Input [2]: [ca_address_sk#9, ca_state#10]

(17) Exchange
Input [2]: [ca_address_sk#9, ca_state#11]
Arguments: hashpartitioning(ca_address_sk#9, 5), ENSURE_REQUIREMENTS, [id=#12]

(18) Sort [codegen id : 5]
Input [2]: [ca_address_sk#9, ca_state#11]
Arguments: [ca_address_sk#9 ASC NULLS FIRST], false, 0

(19) SortMergeJoin [codegen id : 6]
Left keys [1]: [cr_returning_addr_sk#3]
Right keys [1]: [ca_address_sk#9]
Join condition: None

(20) Project [codegen id : 6]
Output [3]: [cr_returning_customer_sk#2, cr_return_amt_inc_tax#4, ca_state#11]
Input [5]: [cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4, ca_address_sk#9, ca_state#11]

(21) HashAggregate [codegen id : 6]
Input [3]: [cr_returning_customer_sk#2, cr_return_amt_inc_tax#4, ca_state#11]
Keys [2]: [cr_returning_customer_sk#2, ca_state#11]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#4))]
Aggregate Attributes [1]: [sum#13]
Results [3]: [cr_returning_customer_sk#2, ca_state#11, sum#14]

(22) Exchange
Input [3]: [cr_returning_customer_sk#2, ca_state#11, sum#14]
Arguments: hashpartitioning(cr_returning_customer_sk#2, ca_state#11, 5), ENSURE_REQUIREMENTS, [id=#15]

(23) HashAggregate [codegen id : 7]
Input [3]: [cr_returning_customer_sk#2, ca_state#11, sum#14]
Keys [2]: [cr_returning_customer_sk#2, ca_state#11]
Functions [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#4))]
Aggregate Attributes [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#4))#16]
Results [3]: [cr_returning_customer_sk#2 AS ctr_customer_sk#17, ca_state#11 AS ctr_state#18, MakeDecimal(sum(UnscaledValue(cr_return_amt_inc_tax#4))#16,17,2) AS ctr_total_return#19]

(24) Filter [codegen id : 7]
Input [3]: [ctr_customer_sk#17, ctr_state#18, ctr_total_return#19]
Condition : isnotnull(ctr_total_return#19)

(25) Exchange
Input [3]: [ctr_customer_sk#17, ctr_state#18, ctr_total_return#19]
Arguments: hashpartitioning(ctr_state#18, 5), ENSURE_REQUIREMENTS, [id=#20]

(26) Sort [codegen id : 8]
Input [3]: [ctr_customer_sk#17, ctr_state#18, ctr_total_return#19]
Arguments: [ctr_state#18 ASC NULLS FIRST], false, 0

(27) Scan parquet default.catalog_returns
Output [4]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_returned_date_sk), IsNotNull(cr_returning_addr_sk)]
ReadSchema: struct<cr_returned_date_sk:int,cr_returning_customer_sk:int,cr_returning_addr_sk:int,cr_return_amt_inc_tax:decimal(7,2)>

(28) ColumnarToRow [codegen id : 10]
Input [4]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]

(29) Filter [codegen id : 10]
Input [4]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]
Condition : (isnotnull(cr_returned_date_sk#1) AND isnotnull(cr_returning_addr_sk#3))

(30) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#5]

(31) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cr_returned_date_sk#1]
Right keys [1]: [d_date_sk#5]
Join condition: None

(32) Project [codegen id : 10]
Output [3]: [cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]
Input [5]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4, d_date_sk#5]

(33) Exchange
Input [3]: [cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]
Arguments: hashpartitioning(cr_returning_addr_sk#3, 5), ENSURE_REQUIREMENTS, [id=#21]

(34) Sort [codegen id : 11]
Input [3]: [cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]
Arguments: [cr_returning_addr_sk#3 ASC NULLS FIRST], false, 0

(35) ReusedExchange [Reuses operator id: 17]
Output [2]: [ca_address_sk#9, ca_state#22]

(36) Sort [codegen id : 13]
Input [2]: [ca_address_sk#9, ca_state#22]
Arguments: [ca_address_sk#9 ASC NULLS FIRST], false, 0

(37) SortMergeJoin [codegen id : 14]
Left keys [1]: [cr_returning_addr_sk#3]
Right keys [1]: [ca_address_sk#9]
Join condition: None

(38) Project [codegen id : 14]
Output [3]: [cr_returning_customer_sk#2, cr_return_amt_inc_tax#4, ca_state#22]
Input [5]: [cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4, ca_address_sk#9, ca_state#22]

(39) HashAggregate [codegen id : 14]
Input [3]: [cr_returning_customer_sk#2, cr_return_amt_inc_tax#4, ca_state#22]
Keys [2]: [cr_returning_customer_sk#2, ca_state#22]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#4))]
Aggregate Attributes [1]: [sum#23]
Results [3]: [cr_returning_customer_sk#2, ca_state#22, sum#24]

(40) Exchange
Input [3]: [cr_returning_customer_sk#2, ca_state#22, sum#24]
Arguments: hashpartitioning(cr_returning_customer_sk#2, ca_state#22, 5), ENSURE_REQUIREMENTS, [id=#25]

(41) HashAggregate [codegen id : 15]
Input [3]: [cr_returning_customer_sk#2, ca_state#22, sum#24]
Keys [2]: [cr_returning_customer_sk#2, ca_state#22]
Functions [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#4))]
Aggregate Attributes [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#4))#26]
Results [2]: [ca_state#22 AS ctr_state#18, MakeDecimal(sum(UnscaledValue(cr_return_amt_inc_tax#4))#26,17,2) AS ctr_total_return#19]

(42) HashAggregate [codegen id : 15]
Input [2]: [ctr_state#18, ctr_total_return#19]
Keys [1]: [ctr_state#18]
Functions [1]: [partial_avg(ctr_total_return#19)]
Aggregate Attributes [2]: [sum#27, count#28]
Results [3]: [ctr_state#18, sum#29, count#30]

(43) Exchange
Input [3]: [ctr_state#18, sum#29, count#30]
Arguments: hashpartitioning(ctr_state#18, 5), ENSURE_REQUIREMENTS, [id=#31]

(44) HashAggregate [codegen id : 16]
Input [3]: [ctr_state#18, sum#29, count#30]
Keys [1]: [ctr_state#18]
Functions [1]: [avg(ctr_total_return#19)]
Aggregate Attributes [1]: [avg(ctr_total_return#19)#32]
Results [2]: [CheckOverflow((promote_precision(avg(ctr_total_return#19)#32) * 1.200000), DecimalType(24,7), true) AS (avg(ctr_total_return) * 1.2)#33, ctr_state#18 AS ctr_state#18#34]

(45) Filter [codegen id : 16]
Input [2]: [(avg(ctr_total_return) * 1.2)#33, ctr_state#18#34]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#33)

(46) Sort [codegen id : 16]
Input [2]: [(avg(ctr_total_return) * 1.2)#33, ctr_state#18#34]
Arguments: [ctr_state#18#34 ASC NULLS FIRST], false, 0

(47) SortMergeJoin [codegen id : 17]
Left keys [1]: [ctr_state#18]
Right keys [1]: [ctr_state#18#34]
Join condition: (cast(ctr_total_return#19 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#33)

(48) Project [codegen id : 17]
Output [2]: [ctr_customer_sk#17, ctr_total_return#19]
Input [5]: [ctr_customer_sk#17, ctr_state#18, ctr_total_return#19, (avg(ctr_total_return) * 1.2)#33, ctr_state#18#34]

(49) Exchange
Input [2]: [ctr_customer_sk#17, ctr_total_return#19]
Arguments: hashpartitioning(ctr_customer_sk#17, 5), ENSURE_REQUIREMENTS, [id=#35]

(50) Sort [codegen id : 18]
Input [2]: [ctr_customer_sk#17, ctr_total_return#19]
Arguments: [ctr_customer_sk#17 ASC NULLS FIRST], false, 0

(51) Scan parquet default.customer
Output [6]: [c_customer_sk#36, c_customer_id#37, c_current_addr_sk#38, c_salutation#39, c_first_name#40, c_last_name#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_addr_sk:int,c_salutation:string,c_first_name:string,c_last_name:string>

(52) ColumnarToRow [codegen id : 19]
Input [6]: [c_customer_sk#36, c_customer_id#37, c_current_addr_sk#38, c_salutation#39, c_first_name#40, c_last_name#41]

(53) Filter [codegen id : 19]
Input [6]: [c_customer_sk#36, c_customer_id#37, c_current_addr_sk#38, c_salutation#39, c_first_name#40, c_last_name#41]
Condition : (isnotnull(c_customer_sk#36) AND isnotnull(c_current_addr_sk#38))

(54) Project [codegen id : 19]
Output [6]: [c_customer_sk#36, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#37, 16, false, true) AS c_customer_id#42, c_current_addr_sk#38, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_salutation#39, 10, false, true) AS c_salutation#43, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#40, 20, false, true) AS c_first_name#44, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#41, 30, false, true) AS c_last_name#45]
Input [6]: [c_customer_sk#36, c_customer_id#37, c_current_addr_sk#38, c_salutation#39, c_first_name#40, c_last_name#41]

(55) Exchange
Input [6]: [c_customer_sk#36, c_customer_id#42, c_current_addr_sk#38, c_salutation#43, c_first_name#44, c_last_name#45]
Arguments: hashpartitioning(c_customer_sk#36, 5), ENSURE_REQUIREMENTS, [id=#46]

(56) Sort [codegen id : 20]
Input [6]: [c_customer_sk#36, c_customer_id#42, c_current_addr_sk#38, c_salutation#43, c_first_name#44, c_last_name#45]
Arguments: [c_customer_sk#36 ASC NULLS FIRST], false, 0

(57) SortMergeJoin [codegen id : 21]
Left keys [1]: [ctr_customer_sk#17]
Right keys [1]: [c_customer_sk#36]
Join condition: None

(58) Project [codegen id : 21]
Output [6]: [ctr_total_return#19, c_customer_id#42, c_current_addr_sk#38, c_salutation#43, c_first_name#44, c_last_name#45]
Input [8]: [ctr_customer_sk#17, ctr_total_return#19, c_customer_sk#36, c_customer_id#42, c_current_addr_sk#38, c_salutation#43, c_first_name#44, c_last_name#45]

(59) Exchange
Input [6]: [ctr_total_return#19, c_customer_id#42, c_current_addr_sk#38, c_salutation#43, c_first_name#44, c_last_name#45]
Arguments: hashpartitioning(c_current_addr_sk#38, 5), ENSURE_REQUIREMENTS, [id=#47]

(60) Sort [codegen id : 22]
Input [6]: [ctr_total_return#19, c_customer_id#42, c_current_addr_sk#38, c_salutation#43, c_first_name#44, c_last_name#45]
Arguments: [c_current_addr_sk#38 ASC NULLS FIRST], false, 0

(61) Scan parquet default.customer_address
Output [12]: [ca_address_sk#9, ca_street_number#48, ca_street_name#49, ca_street_type#50, ca_suite_number#51, ca_city#52, ca_county#53, ca_state#10, ca_zip#54, ca_country#55, ca_gmt_offset#56, ca_location_type#57]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_suite_number:string,ca_city:string,ca_county:string,ca_state:string,ca_zip:string,ca_country:string,ca_gmt_offset:decimal(5,2),ca_location_type:string>

(62) ColumnarToRow [codegen id : 23]
Input [12]: [ca_address_sk#9, ca_street_number#48, ca_street_name#49, ca_street_type#50, ca_suite_number#51, ca_city#52, ca_county#53, ca_state#10, ca_zip#54, ca_country#55, ca_gmt_offset#56, ca_location_type#57]

(63) Filter [codegen id : 23]
Input [12]: [ca_address_sk#9, ca_street_number#48, ca_street_name#49, ca_street_type#50, ca_suite_number#51, ca_city#52, ca_county#53, ca_state#10, ca_zip#54, ca_country#55, ca_gmt_offset#56, ca_location_type#57]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#10, 2, false, true) = GA) AND isnotnull(ca_address_sk#9))

(64) Project [codegen id : 23]
Output [12]: [ca_address_sk#9, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_street_number#48, 10, false, true) AS ca_street_number#58, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_street_name#49, 60, false, true) AS ca_street_name#59, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_street_type#50, 15, false, true) AS ca_street_type#60, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_suite_number#51, 10, false, true) AS ca_suite_number#61, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_city#52, 60, false, true) AS ca_city#62, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_county#53, 30, false, true) AS ca_county#63, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#10, 2, false, true) AS ca_state#64, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_zip#54, 10, false, true) AS ca_zip#65, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_country#55, 20, false, true) AS ca_country#66, ca_gmt_offset#56, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_location_type#57, 20, false, true) AS ca_location_type#67]
Input [12]: [ca_address_sk#9, ca_street_number#48, ca_street_name#49, ca_street_type#50, ca_suite_number#51, ca_city#52, ca_county#53, ca_state#10, ca_zip#54, ca_country#55, ca_gmt_offset#56, ca_location_type#57]

(65) Exchange
Input [12]: [ca_address_sk#9, ca_street_number#58, ca_street_name#59, ca_street_type#60, ca_suite_number#61, ca_city#62, ca_county#63, ca_state#64, ca_zip#65, ca_country#66, ca_gmt_offset#56, ca_location_type#67]
Arguments: hashpartitioning(ca_address_sk#9, 5), ENSURE_REQUIREMENTS, [id=#68]

(66) Sort [codegen id : 24]
Input [12]: [ca_address_sk#9, ca_street_number#58, ca_street_name#59, ca_street_type#60, ca_suite_number#61, ca_city#62, ca_county#63, ca_state#64, ca_zip#65, ca_country#66, ca_gmt_offset#56, ca_location_type#67]
Arguments: [ca_address_sk#9 ASC NULLS FIRST], false, 0

(67) SortMergeJoin [codegen id : 25]
Left keys [1]: [c_current_addr_sk#38]
Right keys [1]: [ca_address_sk#9]
Join condition: None

(68) Project [codegen id : 25]
Output [16]: [c_customer_id#42, c_salutation#43, c_first_name#44, c_last_name#45, ca_street_number#58, ca_street_name#59, ca_street_type#60, ca_suite_number#61, ca_city#62, ca_county#63, ca_state#64, ca_zip#65, ca_country#66, ca_gmt_offset#56, ca_location_type#67, ctr_total_return#19]
Input [18]: [ctr_total_return#19, c_customer_id#42, c_current_addr_sk#38, c_salutation#43, c_first_name#44, c_last_name#45, ca_address_sk#9, ca_street_number#58, ca_street_name#59, ca_street_type#60, ca_suite_number#61, ca_city#62, ca_county#63, ca_state#64, ca_zip#65, ca_country#66, ca_gmt_offset#56, ca_location_type#67]

(69) TakeOrderedAndProject
Input [16]: [c_customer_id#42, c_salutation#43, c_first_name#44, c_last_name#45, ca_street_number#58, ca_street_name#59, ca_street_type#60, ca_suite_number#61, ca_city#62, ca_county#63, ca_state#64, ca_zip#65, ca_country#66, ca_gmt_offset#56, ca_location_type#67, ctr_total_return#19]
Arguments: 100, [c_customer_id#42 ASC NULLS FIRST, c_salutation#43 ASC NULLS FIRST, c_first_name#44 ASC NULLS FIRST, c_last_name#45 ASC NULLS FIRST, ca_street_number#58 ASC NULLS FIRST, ca_street_name#59 ASC NULLS FIRST, ca_street_type#60 ASC NULLS FIRST, ca_suite_number#61 ASC NULLS FIRST, ca_city#62 ASC NULLS FIRST, ca_county#63 ASC NULLS FIRST, ca_state#64 ASC NULLS FIRST, ca_zip#65 ASC NULLS FIRST, ca_country#66 ASC NULLS FIRST, ca_gmt_offset#56 ASC NULLS FIRST, ca_location_type#67 ASC NULLS FIRST, ctr_total_return#19 ASC NULLS FIRST], [c_customer_id#42, c_salutation#43, c_first_name#44, c_last_name#45, ca_street_number#58, ca_street_name#59, ca_street_type#60, ca_suite_number#61, ca_city#62, ca_county#63, ca_state#64, ca_zip#65, ca_country#66, ca_gmt_offset#56, ca_location_type#67, ctr_total_return#19]

