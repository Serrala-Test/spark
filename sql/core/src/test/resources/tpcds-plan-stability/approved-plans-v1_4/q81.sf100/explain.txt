== Physical Plan ==
TakeOrderedAndProject (61)
+- * Project (60)
   +- * BroadcastHashJoin Inner BuildRight (59)
      :- * Project (54)
      :  +- * BroadcastHashJoin Inner BuildRight (53)
      :     :- * Project (32)
      :     :  +- * SortMergeJoin Inner (31)
      :     :     :- * Sort (25)
      :     :     :  +- Exchange (24)
      :     :     :     +- * Filter (23)
      :     :     :        +- * HashAggregate (22)
      :     :     :           +- Exchange (21)
      :     :     :              +- * HashAggregate (20)
      :     :     :                 +- * Project (19)
      :     :     :                    +- * BroadcastHashJoin Inner BuildRight (18)
      :     :     :                       :- * Project (12)
      :     :     :                       :  +- * SortMergeJoin Inner (11)
      :     :     :                       :     :- * Sort (5)
      :     :     :                       :     :  +- Exchange (4)
      :     :     :                       :     :     +- * Filter (3)
      :     :     :                       :     :        +- * ColumnarToRow (2)
      :     :     :                       :     :           +- Scan parquet default.catalog_returns (1)
      :     :     :                       :     +- * Sort (10)
      :     :     :                       :        +- Exchange (9)
      :     :     :                       :           +- * Filter (8)
      :     :     :                       :              +- * ColumnarToRow (7)
      :     :     :                       :                 +- Scan parquet default.customer_address (6)
      :     :     :                       +- BroadcastExchange (17)
      :     :     :                          +- * Project (16)
      :     :     :                             +- * Filter (15)
      :     :     :                                +- * ColumnarToRow (14)
      :     :     :                                   +- Scan parquet default.date_dim (13)
      :     :     +- * Sort (30)
      :     :        +- Exchange (29)
      :     :           +- * Filter (28)
      :     :              +- * ColumnarToRow (27)
      :     :                 +- Scan parquet default.customer (26)
      :     +- BroadcastExchange (52)
      :        +- * Filter (51)
      :           +- * HashAggregate (50)
      :              +- Exchange (49)
      :                 +- * HashAggregate (48)
      :                    +- * HashAggregate (47)
      :                       +- Exchange (46)
      :                          +- * HashAggregate (45)
      :                             +- * Project (44)
      :                                +- * BroadcastHashJoin Inner BuildRight (43)
      :                                   :- * Project (41)
      :                                   :  +- * SortMergeJoin Inner (40)
      :                                   :     :- * Sort (37)
      :                                   :     :  +- Exchange (36)
      :                                   :     :     +- * Filter (35)
      :                                   :     :        +- * ColumnarToRow (34)
      :                                   :     :           +- Scan parquet default.catalog_returns (33)
      :                                   :     +- * Sort (39)
      :                                   :        +- ReusedExchange (38)
      :                                   +- ReusedExchange (42)
      +- BroadcastExchange (58)
         +- * Filter (57)
            +- * ColumnarToRow (56)
               +- Scan parquet default.customer_address (55)


(1) Scan parquet default.catalog_returns
Output [4]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_returned_date_sk), IsNotNull(cr_returning_addr_sk), IsNotNull(cr_returning_customer_sk)]
ReadSchema: struct<cr_returned_date_sk:int,cr_returning_customer_sk:int,cr_returning_addr_sk:int,cr_return_amt_inc_tax:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]

(3) Filter [codegen id : 1]
Input [4]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]
Condition : ((isnotnull(cr_returned_date_sk#1) AND isnotnull(cr_returning_addr_sk#3)) AND isnotnull(cr_returning_customer_sk#2))

(4) Exchange
Input [4]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]
Arguments: hashpartitioning(cr_returning_addr_sk#3, 5), ENSURE_REQUIREMENTS, [id=#5]

(5) Sort [codegen id : 2]
Input [4]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]
Arguments: [cr_returning_addr_sk#3 ASC NULLS FIRST], false, 0

(6) Scan parquet default.customer_address
Output [2]: [ca_address_sk#6, ca_state#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_state)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(7) ColumnarToRow [codegen id : 3]
Input [2]: [ca_address_sk#6, ca_state#7]

(8) Filter [codegen id : 3]
Input [2]: [ca_address_sk#6, ca_state#7]
Condition : (isnotnull(ca_address_sk#6) AND isnotnull(ca_state#7))

(9) Exchange
Input [2]: [ca_address_sk#6, ca_state#7]
Arguments: hashpartitioning(ca_address_sk#6, 5), ENSURE_REQUIREMENTS, [id=#8]

(10) Sort [codegen id : 4]
Input [2]: [ca_address_sk#6, ca_state#7]
Arguments: [ca_address_sk#6 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 6]
Left keys [1]: [cr_returning_addr_sk#3]
Right keys [1]: [ca_address_sk#6]
Join condition: None

(12) Project [codegen id : 6]
Output [4]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_return_amt_inc_tax#4, ca_state#7]
Input [6]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4, ca_address_sk#6, ca_state#7]

(13) Scan parquet default.date_dim
Output [2]: [d_date_sk#9, d_year#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(14) ColumnarToRow [codegen id : 5]
Input [2]: [d_date_sk#9, d_year#10]

(15) Filter [codegen id : 5]
Input [2]: [d_date_sk#9, d_year#10]
Condition : ((isnotnull(d_year#10) AND (d_year#10 = 2000)) AND isnotnull(d_date_sk#9))

(16) Project [codegen id : 5]
Output [1]: [d_date_sk#9]
Input [2]: [d_date_sk#9, d_year#10]

(17) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#11]

(18) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cr_returned_date_sk#1]
Right keys [1]: [d_date_sk#9]
Join condition: None

(19) Project [codegen id : 6]
Output [3]: [cr_returning_customer_sk#2, cr_return_amt_inc_tax#4, ca_state#7]
Input [5]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_return_amt_inc_tax#4, ca_state#7, d_date_sk#9]

(20) HashAggregate [codegen id : 6]
Input [3]: [cr_returning_customer_sk#2, cr_return_amt_inc_tax#4, ca_state#7]
Keys [2]: [cr_returning_customer_sk#2, ca_state#7]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#4))]
Aggregate Attributes [1]: [sum#12]
Results [3]: [cr_returning_customer_sk#2, ca_state#7, sum#13]

(21) Exchange
Input [3]: [cr_returning_customer_sk#2, ca_state#7, sum#13]
Arguments: hashpartitioning(cr_returning_customer_sk#2, ca_state#7, 5), ENSURE_REQUIREMENTS, [id=#14]

(22) HashAggregate [codegen id : 7]
Input [3]: [cr_returning_customer_sk#2, ca_state#7, sum#13]
Keys [2]: [cr_returning_customer_sk#2, ca_state#7]
Functions [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#4))]
Aggregate Attributes [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#4))#15]
Results [3]: [cr_returning_customer_sk#2 AS ctr_customer_sk#16, ca_state#7 AS ctr_state#17, MakeDecimal(sum(UnscaledValue(cr_return_amt_inc_tax#4))#15,17,2) AS ctr_total_return#18]

(23) Filter [codegen id : 7]
Input [3]: [ctr_customer_sk#16, ctr_state#17, ctr_total_return#18]
Condition : isnotnull(ctr_total_return#18)

(24) Exchange
Input [3]: [ctr_customer_sk#16, ctr_state#17, ctr_total_return#18]
Arguments: hashpartitioning(ctr_customer_sk#16, 5), ENSURE_REQUIREMENTS, [id=#19]

(25) Sort [codegen id : 8]
Input [3]: [ctr_customer_sk#16, ctr_state#17, ctr_total_return#18]
Arguments: [ctr_customer_sk#16 ASC NULLS FIRST], false, 0

(26) Scan parquet default.customer
Output [6]: [c_customer_sk#20, c_customer_id#21, c_current_addr_sk#22, c_salutation#23, c_first_name#24, c_last_name#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_addr_sk:int,c_salutation:string,c_first_name:string,c_last_name:string>

(27) ColumnarToRow [codegen id : 9]
Input [6]: [c_customer_sk#20, c_customer_id#21, c_current_addr_sk#22, c_salutation#23, c_first_name#24, c_last_name#25]

(28) Filter [codegen id : 9]
Input [6]: [c_customer_sk#20, c_customer_id#21, c_current_addr_sk#22, c_salutation#23, c_first_name#24, c_last_name#25]
Condition : (isnotnull(c_customer_sk#20) AND isnotnull(c_current_addr_sk#22))

(29) Exchange
Input [6]: [c_customer_sk#20, c_customer_id#21, c_current_addr_sk#22, c_salutation#23, c_first_name#24, c_last_name#25]
Arguments: hashpartitioning(c_customer_sk#20, 5), ENSURE_REQUIREMENTS, [id=#26]

(30) Sort [codegen id : 10]
Input [6]: [c_customer_sk#20, c_customer_id#21, c_current_addr_sk#22, c_salutation#23, c_first_name#24, c_last_name#25]
Arguments: [c_customer_sk#20 ASC NULLS FIRST], false, 0

(31) SortMergeJoin [codegen id : 20]
Left keys [1]: [ctr_customer_sk#16]
Right keys [1]: [c_customer_sk#20]
Join condition: None

(32) Project [codegen id : 20]
Output [7]: [ctr_state#17, ctr_total_return#18, c_customer_id#21, c_current_addr_sk#22, c_salutation#23, c_first_name#24, c_last_name#25]
Input [9]: [ctr_customer_sk#16, ctr_state#17, ctr_total_return#18, c_customer_sk#20, c_customer_id#21, c_current_addr_sk#22, c_salutation#23, c_first_name#24, c_last_name#25]

(33) Scan parquet default.catalog_returns
Output [4]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_returned_date_sk), IsNotNull(cr_returning_addr_sk)]
ReadSchema: struct<cr_returned_date_sk:int,cr_returning_customer_sk:int,cr_returning_addr_sk:int,cr_return_amt_inc_tax:decimal(7,2)>

(34) ColumnarToRow [codegen id : 11]
Input [4]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]

(35) Filter [codegen id : 11]
Input [4]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]
Condition : (isnotnull(cr_returned_date_sk#1) AND isnotnull(cr_returning_addr_sk#3))

(36) Exchange
Input [4]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]
Arguments: hashpartitioning(cr_returning_addr_sk#3, 5), ENSURE_REQUIREMENTS, [id=#27]

(37) Sort [codegen id : 12]
Input [4]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]
Arguments: [cr_returning_addr_sk#3 ASC NULLS FIRST], false, 0

(38) ReusedExchange [Reuses operator id: 9]
Output [2]: [ca_address_sk#6, ca_state#7]

(39) Sort [codegen id : 14]
Input [2]: [ca_address_sk#6, ca_state#7]
Arguments: [ca_address_sk#6 ASC NULLS FIRST], false, 0

(40) SortMergeJoin [codegen id : 16]
Left keys [1]: [cr_returning_addr_sk#3]
Right keys [1]: [ca_address_sk#6]
Join condition: None

(41) Project [codegen id : 16]
Output [4]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_return_amt_inc_tax#4, ca_state#7]
Input [6]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4, ca_address_sk#6, ca_state#7]

(42) ReusedExchange [Reuses operator id: 17]
Output [1]: [d_date_sk#9]

(43) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [cr_returned_date_sk#1]
Right keys [1]: [d_date_sk#9]
Join condition: None

(44) Project [codegen id : 16]
Output [3]: [cr_returning_customer_sk#2, cr_return_amt_inc_tax#4, ca_state#7]
Input [5]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_return_amt_inc_tax#4, ca_state#7, d_date_sk#9]

(45) HashAggregate [codegen id : 16]
Input [3]: [cr_returning_customer_sk#2, cr_return_amt_inc_tax#4, ca_state#7]
Keys [2]: [cr_returning_customer_sk#2, ca_state#7]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#4))]
Aggregate Attributes [1]: [sum#28]
Results [3]: [cr_returning_customer_sk#2, ca_state#7, sum#29]

(46) Exchange
Input [3]: [cr_returning_customer_sk#2, ca_state#7, sum#29]
Arguments: hashpartitioning(cr_returning_customer_sk#2, ca_state#7, 5), ENSURE_REQUIREMENTS, [id=#30]

(47) HashAggregate [codegen id : 17]
Input [3]: [cr_returning_customer_sk#2, ca_state#7, sum#29]
Keys [2]: [cr_returning_customer_sk#2, ca_state#7]
Functions [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#4))]
Aggregate Attributes [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#4))#31]
Results [2]: [ca_state#7 AS ctr_state#17, MakeDecimal(sum(UnscaledValue(cr_return_amt_inc_tax#4))#31,17,2) AS ctr_total_return#18]

(48) HashAggregate [codegen id : 17]
Input [2]: [ctr_state#17, ctr_total_return#18]
Keys [1]: [ctr_state#17]
Functions [1]: [partial_avg(ctr_total_return#18)]
Aggregate Attributes [2]: [sum#32, count#33]
Results [3]: [ctr_state#17, sum#34, count#35]

(49) Exchange
Input [3]: [ctr_state#17, sum#34, count#35]
Arguments: hashpartitioning(ctr_state#17, 5), ENSURE_REQUIREMENTS, [id=#36]

(50) HashAggregate [codegen id : 18]
Input [3]: [ctr_state#17, sum#34, count#35]
Keys [1]: [ctr_state#17]
Functions [1]: [avg(ctr_total_return#18)]
Aggregate Attributes [1]: [avg(ctr_total_return#18)#37]
Results [2]: [CheckOverflow((promote_precision(avg(ctr_total_return#18)#37) * 1.200000), DecimalType(24,7), true) AS (CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#38, ctr_state#17 AS ctr_state#17#39]

(51) Filter [codegen id : 18]
Input [2]: [(CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#38, ctr_state#17#39]
Condition : isnotnull((CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#38)

(52) BroadcastExchange
Input [2]: [(CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#38, ctr_state#17#39]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true]),false), [id=#40]

(53) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ctr_state#17]
Right keys [1]: [ctr_state#17#39]
Join condition: (cast(ctr_total_return#18 as decimal(24,7)) > (CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#38)

(54) Project [codegen id : 20]
Output [6]: [ctr_total_return#18, c_customer_id#21, c_current_addr_sk#22, c_salutation#23, c_first_name#24, c_last_name#25]
Input [9]: [ctr_state#17, ctr_total_return#18, c_customer_id#21, c_current_addr_sk#22, c_salutation#23, c_first_name#24, c_last_name#25, (CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#38, ctr_state#17#39]

(55) Scan parquet default.customer_address
Output [12]: [ca_address_sk#6, ca_street_number#41, ca_street_name#42, ca_street_type#43, ca_suite_number#44, ca_city#45, ca_county#46, ca_state#7, ca_zip#47, ca_country#48, ca_gmt_offset#49, ca_location_type#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_suite_number:string,ca_city:string,ca_county:string,ca_state:string,ca_zip:string,ca_country:string,ca_gmt_offset:decimal(5,2),ca_location_type:string>

(56) ColumnarToRow [codegen id : 19]
Input [12]: [ca_address_sk#6, ca_street_number#41, ca_street_name#42, ca_street_type#43, ca_suite_number#44, ca_city#45, ca_county#46, ca_state#7, ca_zip#47, ca_country#48, ca_gmt_offset#49, ca_location_type#50]

(57) Filter [codegen id : 19]
Input [12]: [ca_address_sk#6, ca_street_number#41, ca_street_name#42, ca_street_type#43, ca_suite_number#44, ca_city#45, ca_county#46, ca_state#7, ca_zip#47, ca_country#48, ca_gmt_offset#49, ca_location_type#50]
Condition : ((isnotnull(ca_state#7) AND (ca_state#7 = GA)) AND isnotnull(ca_address_sk#6))

(58) BroadcastExchange
Input [12]: [ca_address_sk#6, ca_street_number#41, ca_street_name#42, ca_street_type#43, ca_suite_number#44, ca_city#45, ca_county#46, ca_state#7, ca_zip#47, ca_country#48, ca_gmt_offset#49, ca_location_type#50]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#51]

(59) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [c_current_addr_sk#22]
Right keys [1]: [ca_address_sk#6]
Join condition: None

(60) Project [codegen id : 20]
Output [16]: [c_customer_id#21, c_salutation#23, c_first_name#24, c_last_name#25, ca_street_number#41, ca_street_name#42, ca_street_type#43, ca_suite_number#44, ca_city#45, ca_county#46, ca_state#7, ca_zip#47, ca_country#48, ca_gmt_offset#49, ca_location_type#50, ctr_total_return#18]
Input [18]: [ctr_total_return#18, c_customer_id#21, c_current_addr_sk#22, c_salutation#23, c_first_name#24, c_last_name#25, ca_address_sk#6, ca_street_number#41, ca_street_name#42, ca_street_type#43, ca_suite_number#44, ca_city#45, ca_county#46, ca_state#7, ca_zip#47, ca_country#48, ca_gmt_offset#49, ca_location_type#50]

(61) TakeOrderedAndProject
Input [16]: [c_customer_id#21, c_salutation#23, c_first_name#24, c_last_name#25, ca_street_number#41, ca_street_name#42, ca_street_type#43, ca_suite_number#44, ca_city#45, ca_county#46, ca_state#7, ca_zip#47, ca_country#48, ca_gmt_offset#49, ca_location_type#50, ctr_total_return#18]
Arguments: 100, [c_customer_id#21 ASC NULLS FIRST, c_salutation#23 ASC NULLS FIRST, c_first_name#24 ASC NULLS FIRST, c_last_name#25 ASC NULLS FIRST, ca_street_number#41 ASC NULLS FIRST, ca_street_name#42 ASC NULLS FIRST, ca_street_type#43 ASC NULLS FIRST, ca_suite_number#44 ASC NULLS FIRST, ca_city#45 ASC NULLS FIRST, ca_county#46 ASC NULLS FIRST, ca_state#7 ASC NULLS FIRST, ca_zip#47 ASC NULLS FIRST, ca_country#48 ASC NULLS FIRST, ca_gmt_offset#49 ASC NULLS FIRST, ca_location_type#50 ASC NULLS FIRST, ctr_total_return#18 ASC NULLS FIRST], [c_customer_id#21, c_salutation#23, c_first_name#24, c_last_name#25, ca_street_number#41, ca_street_name#42, ca_street_type#43, ca_suite_number#44, ca_city#45, ca_county#46, ca_state#7, ca_zip#47, ca_country#48, ca_gmt_offset#49, ca_location_type#50, ctr_total_return#18]

