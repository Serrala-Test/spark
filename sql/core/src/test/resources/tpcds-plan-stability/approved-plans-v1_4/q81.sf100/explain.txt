== Physical Plan ==
TakeOrderedAndProject (64)
+- * Project (63)
   +- * BroadcastHashJoin Inner BuildRight (62)
      :- * Project (57)
      :  +- * SortMergeJoin Inner (56)
      :     :- * Sort (50)
      :     :  +- Exchange (49)
      :     :     +- * Project (48)
      :     :        +- * SortMergeJoin Inner (47)
      :     :           :- * Sort (22)
      :     :           :  +- Exchange (21)
      :     :           :     +- * Filter (20)
      :     :           :        +- * HashAggregate (19)
      :     :           :           +- Exchange (18)
      :     :           :              +- * HashAggregate (17)
      :     :           :                 +- * Project (16)
      :     :           :                    +- * BroadcastHashJoin Inner BuildLeft (15)
      :     :           :                       :- BroadcastExchange (11)
      :     :           :                       :  +- * Project (10)
      :     :           :                       :     +- * BroadcastHashJoin Inner BuildLeft (9)
      :     :           :                       :        :- BroadcastExchange (4)
      :     :           :                       :        :  +- * Filter (3)
      :     :           :                       :        :     +- * ColumnarToRow (2)
      :     :           :                       :        :        +- Scan parquet default.catalog_returns (1)
      :     :           :                       :        +- * Project (8)
      :     :           :                       :           +- * Filter (7)
      :     :           :                       :              +- * ColumnarToRow (6)
      :     :           :                       :                 +- Scan parquet default.date_dim (5)
      :     :           :                       +- * Filter (14)
      :     :           :                          +- * ColumnarToRow (13)
      :     :           :                             +- Scan parquet default.customer_address (12)
      :     :           +- * Sort (46)
      :     :              +- * Filter (45)
      :     :                 +- * HashAggregate (44)
      :     :                    +- Exchange (43)
      :     :                       +- * HashAggregate (42)
      :     :                          +- * HashAggregate (41)
      :     :                             +- Exchange (40)
      :     :                                +- * HashAggregate (39)
      :     :                                   +- * Project (38)
      :     :                                      +- * BroadcastHashJoin Inner BuildLeft (37)
      :     :                                         :- BroadcastExchange (33)
      :     :                                         :  +- * Project (32)
      :     :                                         :     +- * BroadcastHashJoin Inner BuildLeft (31)
      :     :                                         :        :- BroadcastExchange (26)
      :     :                                         :        :  +- * Filter (25)
      :     :                                         :        :     +- * ColumnarToRow (24)
      :     :                                         :        :        +- Scan parquet default.catalog_returns (23)
      :     :                                         :        +- * Project (30)
      :     :                                         :           +- * Filter (29)
      :     :                                         :              +- * ColumnarToRow (28)
      :     :                                         :                 +- Scan parquet default.date_dim (27)
      :     :                                         +- * Filter (36)
      :     :                                            +- * ColumnarToRow (35)
      :     :                                               +- Scan parquet default.customer_address (34)
      :     +- * Sort (55)
      :        +- Exchange (54)
      :           +- * Filter (53)
      :              +- * ColumnarToRow (52)
      :                 +- Scan parquet default.customer (51)
      +- BroadcastExchange (61)
         +- * Filter (60)
            +- * ColumnarToRow (59)
               +- Scan parquet default.customer_address (58)


(1) Scan parquet default.catalog_returns
Output [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#4), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(cr_returning_addr_sk), IsNotNull(cr_returning_customer_sk)]
ReadSchema: struct<cr_returning_customer_sk:int,cr_returning_addr_sk:int,cr_return_amt_inc_tax:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]
Condition : (isnotnull(cr_returning_addr_sk#2) AND isnotnull(cr_returning_customer_sk#1))

(4) BroadcastExchange
Input [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[3, int, true] as bigint)),false), [id=#5]

(5) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_year#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(6) ColumnarToRow
Input [2]: [d_date_sk#6, d_year#7]

(7) Filter
Input [2]: [d_date_sk#6, d_year#7]
Condition : ((isnotnull(d_year#7) AND (d_year#7 = 2000)) AND isnotnull(d_date_sk#6))

(8) Project
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_year#7]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [cr_returned_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(10) Project [codegen id : 2]
Output [3]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3]
Input [5]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4, d_date_sk#6]

(11) BroadcastExchange
Input [3]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#8]

(12) Scan parquet default.customer_address
Output [2]: [ca_address_sk#9, ca_state#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_state)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(13) ColumnarToRow
Input [2]: [ca_address_sk#9, ca_state#10]

(14) Filter
Input [2]: [ca_address_sk#9, ca_state#10]
Condition : (isnotnull(ca_address_sk#9) AND isnotnull(ca_state#10))

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cr_returning_addr_sk#2]
Right keys [1]: [ca_address_sk#9]
Join condition: None

(16) Project [codegen id : 3]
Output [3]: [cr_returning_customer_sk#1, cr_return_amt_inc_tax#3, ca_state#10]
Input [5]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, ca_address_sk#9, ca_state#10]

(17) HashAggregate [codegen id : 3]
Input [3]: [cr_returning_customer_sk#1, cr_return_amt_inc_tax#3, ca_state#10]
Keys [2]: [cr_returning_customer_sk#1, ca_state#10]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#3))]
Aggregate Attributes [1]: [sum#11]
Results [3]: [cr_returning_customer_sk#1, ca_state#10, sum#12]

(18) Exchange
Input [3]: [cr_returning_customer_sk#1, ca_state#10, sum#12]
Arguments: hashpartitioning(cr_returning_customer_sk#1, ca_state#10, 5), ENSURE_REQUIREMENTS, [id=#13]

(19) HashAggregate [codegen id : 4]
Input [3]: [cr_returning_customer_sk#1, ca_state#10, sum#12]
Keys [2]: [cr_returning_customer_sk#1, ca_state#10]
Functions [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#3))#14]
Results [3]: [cr_returning_customer_sk#1 AS ctr_customer_sk#15, ca_state#10 AS ctr_state#16, MakeDecimal(sum(UnscaledValue(cr_return_amt_inc_tax#3))#14,17,2) AS ctr_total_return#17]

(20) Filter [codegen id : 4]
Input [3]: [ctr_customer_sk#15, ctr_state#16, ctr_total_return#17]
Condition : isnotnull(ctr_total_return#17)

(21) Exchange
Input [3]: [ctr_customer_sk#15, ctr_state#16, ctr_total_return#17]
Arguments: hashpartitioning(ctr_state#16, 5), ENSURE_REQUIREMENTS, [id=#18]

(22) Sort [codegen id : 5]
Input [3]: [ctr_customer_sk#15, ctr_state#16, ctr_total_return#17]
Arguments: [ctr_state#16 ASC NULLS FIRST], false, 0

(23) Scan parquet default.catalog_returns
Output [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#4), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(cr_returning_addr_sk)]
ReadSchema: struct<cr_returning_customer_sk:int,cr_returning_addr_sk:int,cr_return_amt_inc_tax:decimal(7,2)>

(24) ColumnarToRow [codegen id : 6]
Input [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]

(25) Filter [codegen id : 6]
Input [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]
Condition : isnotnull(cr_returning_addr_sk#2)

(26) BroadcastExchange
Input [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[3, int, true] as bigint)),false), [id=#19]

(27) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_year#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(28) ColumnarToRow
Input [2]: [d_date_sk#6, d_year#7]

(29) Filter
Input [2]: [d_date_sk#6, d_year#7]
Condition : ((isnotnull(d_year#7) AND (d_year#7 = 2000)) AND isnotnull(d_date_sk#6))

(30) Project
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_year#7]

(31) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cr_returned_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(32) Project [codegen id : 7]
Output [3]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3]
Input [5]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4, d_date_sk#6]

(33) BroadcastExchange
Input [3]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#20]

(34) Scan parquet default.customer_address
Output [2]: [ca_address_sk#9, ca_state#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_state)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(35) ColumnarToRow
Input [2]: [ca_address_sk#9, ca_state#10]

(36) Filter
Input [2]: [ca_address_sk#9, ca_state#10]
Condition : (isnotnull(ca_address_sk#9) AND isnotnull(ca_state#10))

(37) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cr_returning_addr_sk#2]
Right keys [1]: [ca_address_sk#9]
Join condition: None

(38) Project [codegen id : 8]
Output [3]: [cr_returning_customer_sk#1, cr_return_amt_inc_tax#3, ca_state#10]
Input [5]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, ca_address_sk#9, ca_state#10]

(39) HashAggregate [codegen id : 8]
Input [3]: [cr_returning_customer_sk#1, cr_return_amt_inc_tax#3, ca_state#10]
Keys [2]: [cr_returning_customer_sk#1, ca_state#10]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#3))]
Aggregate Attributes [1]: [sum#21]
Results [3]: [cr_returning_customer_sk#1, ca_state#10, sum#22]

(40) Exchange
Input [3]: [cr_returning_customer_sk#1, ca_state#10, sum#22]
Arguments: hashpartitioning(cr_returning_customer_sk#1, ca_state#10, 5), ENSURE_REQUIREMENTS, [id=#23]

(41) HashAggregate [codegen id : 9]
Input [3]: [cr_returning_customer_sk#1, ca_state#10, sum#22]
Keys [2]: [cr_returning_customer_sk#1, ca_state#10]
Functions [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#3))#24]
Results [2]: [ca_state#10 AS ctr_state#16, MakeDecimal(sum(UnscaledValue(cr_return_amt_inc_tax#3))#24,17,2) AS ctr_total_return#17]

(42) HashAggregate [codegen id : 9]
Input [2]: [ctr_state#16, ctr_total_return#17]
Keys [1]: [ctr_state#16]
Functions [1]: [partial_avg(ctr_total_return#17)]
Aggregate Attributes [2]: [sum#25, count#26]
Results [3]: [ctr_state#16, sum#27, count#28]

(43) Exchange
Input [3]: [ctr_state#16, sum#27, count#28]
Arguments: hashpartitioning(ctr_state#16, 5), ENSURE_REQUIREMENTS, [id=#29]

(44) HashAggregate [codegen id : 10]
Input [3]: [ctr_state#16, sum#27, count#28]
Keys [1]: [ctr_state#16]
Functions [1]: [avg(ctr_total_return#17)]
Aggregate Attributes [1]: [avg(ctr_total_return#17)#30]
Results [2]: [CheckOverflow((promote_precision(avg(ctr_total_return#17)#30) * 1.200000), DecimalType(24,7), true) AS (avg(ctr_total_return) * 1.2)#31, ctr_state#16 AS ctr_state#16#32]

(45) Filter [codegen id : 10]
Input [2]: [(avg(ctr_total_return) * 1.2)#31, ctr_state#16#32]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#31)

(46) Sort [codegen id : 10]
Input [2]: [(avg(ctr_total_return) * 1.2)#31, ctr_state#16#32]
Arguments: [ctr_state#16#32 ASC NULLS FIRST], false, 0

(47) SortMergeJoin [codegen id : 11]
Left keys [1]: [ctr_state#16]
Right keys [1]: [ctr_state#16#32]
Join condition: (cast(ctr_total_return#17 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#31)

(48) Project [codegen id : 11]
Output [2]: [ctr_customer_sk#15, ctr_total_return#17]
Input [5]: [ctr_customer_sk#15, ctr_state#16, ctr_total_return#17, (avg(ctr_total_return) * 1.2)#31, ctr_state#16#32]

(49) Exchange
Input [2]: [ctr_customer_sk#15, ctr_total_return#17]
Arguments: hashpartitioning(ctr_customer_sk#15, 5), ENSURE_REQUIREMENTS, [id=#33]

(50) Sort [codegen id : 12]
Input [2]: [ctr_customer_sk#15, ctr_total_return#17]
Arguments: [ctr_customer_sk#15 ASC NULLS FIRST], false, 0

(51) Scan parquet default.customer
Output [6]: [c_customer_sk#34, c_customer_id#35, c_current_addr_sk#36, c_salutation#37, c_first_name#38, c_last_name#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_addr_sk:int,c_salutation:string,c_first_name:string,c_last_name:string>

(52) ColumnarToRow [codegen id : 13]
Input [6]: [c_customer_sk#34, c_customer_id#35, c_current_addr_sk#36, c_salutation#37, c_first_name#38, c_last_name#39]

(53) Filter [codegen id : 13]
Input [6]: [c_customer_sk#34, c_customer_id#35, c_current_addr_sk#36, c_salutation#37, c_first_name#38, c_last_name#39]
Condition : (isnotnull(c_customer_sk#34) AND isnotnull(c_current_addr_sk#36))

(54) Exchange
Input [6]: [c_customer_sk#34, c_customer_id#35, c_current_addr_sk#36, c_salutation#37, c_first_name#38, c_last_name#39]
Arguments: hashpartitioning(c_customer_sk#34, 5), ENSURE_REQUIREMENTS, [id=#40]

(55) Sort [codegen id : 14]
Input [6]: [c_customer_sk#34, c_customer_id#35, c_current_addr_sk#36, c_salutation#37, c_first_name#38, c_last_name#39]
Arguments: [c_customer_sk#34 ASC NULLS FIRST], false, 0

(56) SortMergeJoin [codegen id : 16]
Left keys [1]: [ctr_customer_sk#15]
Right keys [1]: [c_customer_sk#34]
Join condition: None

(57) Project [codegen id : 16]
Output [6]: [ctr_total_return#17, c_customer_id#35, c_current_addr_sk#36, c_salutation#37, c_first_name#38, c_last_name#39]
Input [8]: [ctr_customer_sk#15, ctr_total_return#17, c_customer_sk#34, c_customer_id#35, c_current_addr_sk#36, c_salutation#37, c_first_name#38, c_last_name#39]

(58) Scan parquet default.customer_address
Output [12]: [ca_address_sk#9, ca_street_number#41, ca_street_name#42, ca_street_type#43, ca_suite_number#44, ca_city#45, ca_county#46, ca_state#10, ca_zip#47, ca_country#48, ca_gmt_offset#49, ca_location_type#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_suite_number:string,ca_city:string,ca_county:string,ca_state:string,ca_zip:string,ca_country:string,ca_gmt_offset:decimal(5,2),ca_location_type:string>

(59) ColumnarToRow [codegen id : 15]
Input [12]: [ca_address_sk#9, ca_street_number#41, ca_street_name#42, ca_street_type#43, ca_suite_number#44, ca_city#45, ca_county#46, ca_state#10, ca_zip#47, ca_country#48, ca_gmt_offset#49, ca_location_type#50]

(60) Filter [codegen id : 15]
Input [12]: [ca_address_sk#9, ca_street_number#41, ca_street_name#42, ca_street_type#43, ca_suite_number#44, ca_city#45, ca_county#46, ca_state#10, ca_zip#47, ca_country#48, ca_gmt_offset#49, ca_location_type#50]
Condition : ((isnotnull(ca_state#10) AND (ca_state#10 = GA)) AND isnotnull(ca_address_sk#9))

(61) BroadcastExchange
Input [12]: [ca_address_sk#9, ca_street_number#41, ca_street_name#42, ca_street_type#43, ca_suite_number#44, ca_city#45, ca_county#46, ca_state#10, ca_zip#47, ca_country#48, ca_gmt_offset#49, ca_location_type#50]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#51]

(62) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [c_current_addr_sk#36]
Right keys [1]: [ca_address_sk#9]
Join condition: None

(63) Project [codegen id : 16]
Output [16]: [c_customer_id#35, c_salutation#37, c_first_name#38, c_last_name#39, ca_street_number#41, ca_street_name#42, ca_street_type#43, ca_suite_number#44, ca_city#45, ca_county#46, ca_state#10, ca_zip#47, ca_country#48, ca_gmt_offset#49, ca_location_type#50, ctr_total_return#17]
Input [18]: [ctr_total_return#17, c_customer_id#35, c_current_addr_sk#36, c_salutation#37, c_first_name#38, c_last_name#39, ca_address_sk#9, ca_street_number#41, ca_street_name#42, ca_street_type#43, ca_suite_number#44, ca_city#45, ca_county#46, ca_state#10, ca_zip#47, ca_country#48, ca_gmt_offset#49, ca_location_type#50]

(64) TakeOrderedAndProject
Input [16]: [c_customer_id#35, c_salutation#37, c_first_name#38, c_last_name#39, ca_street_number#41, ca_street_name#42, ca_street_type#43, ca_suite_number#44, ca_city#45, ca_county#46, ca_state#10, ca_zip#47, ca_country#48, ca_gmt_offset#49, ca_location_type#50, ctr_total_return#17]
Arguments: 100, [c_customer_id#35 ASC NULLS FIRST, c_salutation#37 ASC NULLS FIRST, c_first_name#38 ASC NULLS FIRST, c_last_name#39 ASC NULLS FIRST, ca_street_number#41 ASC NULLS FIRST, ca_street_name#42 ASC NULLS FIRST, ca_street_type#43 ASC NULLS FIRST, ca_suite_number#44 ASC NULLS FIRST, ca_city#45 ASC NULLS FIRST, ca_county#46 ASC NULLS FIRST, ca_state#10 ASC NULLS FIRST, ca_zip#47 ASC NULLS FIRST, ca_country#48 ASC NULLS FIRST, ca_gmt_offset#49 ASC NULLS FIRST, ca_location_type#50 ASC NULLS FIRST, ctr_total_return#17 ASC NULLS FIRST], [c_customer_id#35, c_salutation#37, c_first_name#38, c_last_name#39, ca_street_number#41, ca_street_name#42, ca_street_type#43, ca_suite_number#44, ca_city#45, ca_county#46, ca_state#10, ca_zip#47, ca_country#48, ca_gmt_offset#49, ca_location_type#50, ctr_total_return#17]

