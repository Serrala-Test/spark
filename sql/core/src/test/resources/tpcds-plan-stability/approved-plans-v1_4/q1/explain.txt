== Physical Plan ==
TakeOrderedAndProject (41)
+- * Project (40)
   +- * BroadcastHashJoin Inner BuildRight (39)
      :- * Project (34)
      :  +- * BroadcastHashJoin Inner BuildRight (33)
      :     :- * Project (27)
      :     :  +- * BroadcastHashJoin Inner BuildRight (26)
      :     :     :- * Project (11)
      :     :     :  +- * Filter (10)
      :     :     :     +- * HashAggregate (9)
      :     :     :        +- Exchange (8)
      :     :     :           +- * HashAggregate (7)
      :     :     :              +- * Project (6)
      :     :     :                 +- * BroadcastHashJoin Inner BuildRight (5)
      :     :     :                    :- * Filter (3)
      :     :     :                    :  +- * ColumnarToRow (2)
      :     :     :                    :     +- Scan parquet default.store_returns (1)
      :     :     :                    +- ReusedExchange (4)
      :     :     +- BroadcastExchange (25)
      :     :        +- * Filter (24)
      :     :           +- * HashAggregate (23)
      :     :              +- Exchange (22)
      :     :                 +- * HashAggregate (21)
      :     :                    +- * HashAggregate (20)
      :     :                       +- Exchange (19)
      :     :                          +- * HashAggregate (18)
      :     :                             +- * Project (17)
      :     :                                +- * BroadcastHashJoin Inner BuildRight (16)
      :     :                                   :- * Filter (14)
      :     :                                   :  +- * ColumnarToRow (13)
      :     :                                   :     +- Scan parquet default.store_returns (12)
      :     :                                   +- ReusedExchange (15)
      :     +- BroadcastExchange (32)
      :        +- * Project (31)
      :           +- * Filter (30)
      :              +- * ColumnarToRow (29)
      :                 +- Scan parquet default.store (28)
      +- BroadcastExchange (38)
         +- * Filter (37)
            +- * ColumnarToRow (36)
               +- Scan parquet default.customer (35)


(1) Scan parquet default.store_returns
Output [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#4), dynamicpruningexpression(sr_returned_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(sr_store_sk), IsNotNull(sr_customer_sk)]
ReadSchema: struct<sr_customer_sk:int,sr_store_sk:int,sr_return_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]

(3) Filter [codegen id : 2]
Input [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Condition : (isnotnull(sr_store_sk#2) AND isnotnull(sr_customer_sk#1))

(4) ReusedExchange [Reuses operator id: 46]
Output [1]: [d_date_sk#6]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [sr_returned_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(6) Project [codegen id : 2]
Output [3]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3]
Input [5]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4, d_date_sk#6]

(7) HashAggregate [codegen id : 2]
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3]
Keys [2]: [sr_customer_sk#1, sr_store_sk#2]
Functions [1]: [partial_sum(UnscaledValue(sr_return_amt#3))]
Aggregate Attributes [1]: [sum#7]
Results [3]: [sr_customer_sk#1, sr_store_sk#2, sum#8]

(8) Exchange
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#8]
Arguments: hashpartitioning(sr_customer_sk#1, sr_store_sk#2, 5), ENSURE_REQUIREMENTS, [id=#9]

(9) HashAggregate [codegen id : 9]
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#8]
Keys [2]: [sr_customer_sk#1, sr_store_sk#2]
Functions [1]: [sum(UnscaledValue(sr_return_amt#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(sr_return_amt#3))#10]
Results [3]: [sr_customer_sk#1 AS ctr_customer_sk#11, sr_store_sk#2 AS ctr_store_sk#12, MakeDecimal(sum(UnscaledValue(sr_return_amt#3))#10,17,2) AS ctr_total_return#13]

(10) Filter [codegen id : 9]
Input [3]: [ctr_customer_sk#11, ctr_store_sk#12, ctr_total_return#13]
Condition : isnotnull(ctr_total_return#13)

(11) Project [codegen id : 9]
Output [3]: [ctr_customer_sk#11, ctr_store_sk#12, cast(ctr_total_return#13 as decimal(24,7)) AS CAST(ctr1.ctr_total_return AS DECIMAL(24,7))#14]
Input [3]: [ctr_customer_sk#11, ctr_store_sk#12, ctr_total_return#13]

(12) Scan parquet default.store_returns
Output [4]: [sr_customer_sk#15, sr_store_sk#16, sr_return_amt#17, sr_returned_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#18), dynamicpruningexpression(sr_returned_date_sk#18 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_customer_sk:int,sr_store_sk:int,sr_return_amt:decimal(7,2)>

(13) ColumnarToRow [codegen id : 4]
Input [4]: [sr_customer_sk#15, sr_store_sk#16, sr_return_amt#17, sr_returned_date_sk#18]

(14) Filter [codegen id : 4]
Input [4]: [sr_customer_sk#15, sr_store_sk#16, sr_return_amt#17, sr_returned_date_sk#18]
Condition : isnotnull(sr_store_sk#16)

(15) ReusedExchange [Reuses operator id: 46]
Output [1]: [d_date_sk#19]

(16) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [sr_returned_date_sk#18]
Right keys [1]: [d_date_sk#19]
Join condition: None

(17) Project [codegen id : 4]
Output [3]: [sr_customer_sk#15, sr_store_sk#16, sr_return_amt#17]
Input [5]: [sr_customer_sk#15, sr_store_sk#16, sr_return_amt#17, sr_returned_date_sk#18, d_date_sk#19]

(18) HashAggregate [codegen id : 4]
Input [3]: [sr_customer_sk#15, sr_store_sk#16, sr_return_amt#17]
Keys [2]: [sr_customer_sk#15, sr_store_sk#16]
Functions [1]: [partial_sum(UnscaledValue(sr_return_amt#17))]
Aggregate Attributes [1]: [sum#20]
Results [3]: [sr_customer_sk#15, sr_store_sk#16, sum#21]

(19) Exchange
Input [3]: [sr_customer_sk#15, sr_store_sk#16, sum#21]
Arguments: hashpartitioning(sr_customer_sk#15, sr_store_sk#16, 5), ENSURE_REQUIREMENTS, [id=#22]

(20) HashAggregate [codegen id : 5]
Input [3]: [sr_customer_sk#15, sr_store_sk#16, sum#21]
Keys [2]: [sr_customer_sk#15, sr_store_sk#16]
Functions [1]: [sum(UnscaledValue(sr_return_amt#17))]
Aggregate Attributes [1]: [sum(UnscaledValue(sr_return_amt#17))#23]
Results [2]: [sr_store_sk#16 AS ctr_store_sk#12, MakeDecimal(sum(UnscaledValue(sr_return_amt#17))#23,17,2) AS ctr_total_return#13]

(21) HashAggregate [codegen id : 5]
Input [2]: [ctr_store_sk#12, ctr_total_return#13]
Keys [1]: [ctr_store_sk#12]
Functions [1]: [partial_avg(ctr_total_return#13)]
Aggregate Attributes [2]: [sum#24, count#25]
Results [3]: [ctr_store_sk#12, sum#26, count#27]

(22) Exchange
Input [3]: [ctr_store_sk#12, sum#26, count#27]
Arguments: hashpartitioning(ctr_store_sk#12, 5), ENSURE_REQUIREMENTS, [id=#28]

(23) HashAggregate [codegen id : 6]
Input [3]: [ctr_store_sk#12, sum#26, count#27]
Keys [1]: [ctr_store_sk#12]
Functions [1]: [avg(ctr_total_return#13)]
Aggregate Attributes [1]: [avg(ctr_total_return#13)#29]
Results [2]: [CheckOverflow((promote_precision(avg(ctr_total_return#13)#29) * 1.200000), DecimalType(24,7), true) AS (avg(ctr_total_return) * 1.2)#30, ctr_store_sk#12 AS ctr_store_sk#12#31]

(24) Filter [codegen id : 6]
Input [2]: [(avg(ctr_total_return) * 1.2)#30, ctr_store_sk#12#31]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#30)

(25) BroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#30, ctr_store_sk#12#31]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#32]

(26) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ctr_store_sk#12]
Right keys [1]: [ctr_store_sk#12#31]
Join condition: (CAST(ctr1.ctr_total_return AS DECIMAL(24,7))#14 > (avg(ctr_total_return) * 1.2)#30)

(27) Project [codegen id : 9]
Output [2]: [ctr_customer_sk#11, ctr_store_sk#12]
Input [5]: [ctr_customer_sk#11, ctr_store_sk#12, CAST(ctr1.ctr_total_return AS DECIMAL(24,7))#14, (avg(ctr_total_return) * 1.2)#30, ctr_store_sk#12#31]

(28) Scan parquet default.store
Output [2]: [s_store_sk#33, s_state#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(29) ColumnarToRow [codegen id : 7]
Input [2]: [s_store_sk#33, s_state#34]

(30) Filter [codegen id : 7]
Input [2]: [s_store_sk#33, s_state#34]
Condition : ((isnotnull(s_state#34) AND (s_state#34 = TN)) AND isnotnull(s_store_sk#33))

(31) Project [codegen id : 7]
Output [1]: [s_store_sk#33]
Input [2]: [s_store_sk#33, s_state#34]

(32) BroadcastExchange
Input [1]: [s_store_sk#33]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#35]

(33) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ctr_store_sk#12]
Right keys [1]: [s_store_sk#33]
Join condition: None

(34) Project [codegen id : 9]
Output [1]: [ctr_customer_sk#11]
Input [3]: [ctr_customer_sk#11, ctr_store_sk#12, s_store_sk#33]

(35) Scan parquet default.customer
Output [2]: [c_customer_sk#36, c_customer_id#37]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string>

(36) ColumnarToRow [codegen id : 8]
Input [2]: [c_customer_sk#36, c_customer_id#37]

(37) Filter [codegen id : 8]
Input [2]: [c_customer_sk#36, c_customer_id#37]
Condition : isnotnull(c_customer_sk#36)

(38) BroadcastExchange
Input [2]: [c_customer_sk#36, c_customer_id#37]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#38]

(39) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ctr_customer_sk#11]
Right keys [1]: [c_customer_sk#36]
Join condition: None

(40) Project [codegen id : 9]
Output [1]: [c_customer_id#37]
Input [3]: [ctr_customer_sk#11, c_customer_sk#36, c_customer_id#37]

(41) TakeOrderedAndProject
Input [1]: [c_customer_id#37]
Arguments: 100, [c_customer_id#37 ASC NULLS FIRST], [c_customer_id#37]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = sr_returned_date_sk#4 IN dynamicpruning#5
BroadcastExchange (46)
+- * Project (45)
   +- * Filter (44)
      +- * ColumnarToRow (43)
         +- Scan parquet default.date_dim (42)


(42) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_year#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(43) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#39]

(44) Filter [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#39]
Condition : ((isnotnull(d_year#39) AND (d_year#39 = 2000)) AND isnotnull(d_date_sk#6))

(45) Project [codegen id : 1]
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_year#39]

(46) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#40]

Subquery:2 Hosting operator id = 12 Hosting Expression = sr_returned_date_sk#18 IN dynamicpruning#5


