== Physical Plan ==
TakeOrderedAndProject (26)
+- * HashAggregate (25)
   +- Exchange (24)
      +- * HashAggregate (23)
         +- * Project (22)
            +- * SortMergeJoin Inner (21)
               :- * Sort (8)
               :  +- Exchange (7)
               :     +- * Project (6)
               :        +- * BroadcastHashJoin Inner BuildRight (5)
               :           :- * Filter (3)
               :           :  +- * ColumnarToRow (2)
               :           :     +- Scan parquet default.catalog_sales (1)
               :           +- ReusedExchange (4)
               +- * Sort (20)
                  +- Exchange (19)
                     +- * Project (18)
                        +- * SortMergeJoin Inner (17)
                           :- * Sort (12)
                           :  +- Exchange (11)
                           :     +- * ColumnarToRow (10)
                           :        +- Scan parquet default.customer (9)
                           +- * Sort (16)
                              +- Exchange (15)
                                 +- * ColumnarToRow (14)
                                    +- Scan parquet default.customer_address (13)


(1) Scan parquet default.catalog_sales
Output [3]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#3), dynamicpruningexpression(cs_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [3]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3]

(3) Filter [codegen id : 2]
Input [3]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3]
Condition : isnotnull(cs_bill_customer_sk#1)

(4) ReusedExchange [Reuses operator id: 31]
Output [1]: [d_date_sk#5]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [cs_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join condition: None

(6) Project [codegen id : 2]
Output [2]: [cs_bill_customer_sk#1, cs_sales_price#2]
Input [4]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3, d_date_sk#5]

(7) Exchange
Input [2]: [cs_bill_customer_sk#1, cs_sales_price#2]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(8) Sort [codegen id : 3]
Input [2]: [cs_bill_customer_sk#1, cs_sales_price#2]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(9) Scan parquet default.customer
Output [2]: [c_customer_sk#7, c_current_addr_sk#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(10) ColumnarToRow [codegen id : 4]
Input [2]: [c_customer_sk#7, c_current_addr_sk#8]

(11) Exchange
Input [2]: [c_customer_sk#7, c_current_addr_sk#8]
Arguments: hashpartitioning(c_current_addr_sk#8, 5), ENSURE_REQUIREMENTS, [id=#9]

(12) Sort [codegen id : 5]
Input [2]: [c_customer_sk#7, c_current_addr_sk#8]
Arguments: [c_current_addr_sk#8 ASC NULLS FIRST], false, 0

(13) Scan parquet default.customer_address
Output [3]: [ca_address_sk#10, ca_state#11, ca_zip#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_zip:string>

(14) ColumnarToRow [codegen id : 6]
Input [3]: [ca_address_sk#10, ca_state#11, ca_zip#12]

(15) Exchange
Input [3]: [ca_address_sk#10, ca_state#11, ca_zip#12]
Arguments: hashpartitioning(ca_address_sk#10, 5), ENSURE_REQUIREMENTS, [id=#13]

(16) Sort [codegen id : 7]
Input [3]: [ca_address_sk#10, ca_state#11, ca_zip#12]
Arguments: [ca_address_sk#10 ASC NULLS FIRST], false, 0

(17) SortMergeJoin [codegen id : 8]
Left keys [1]: [c_current_addr_sk#8]
Right keys [1]: [ca_address_sk#10]
Join condition: None

(18) Project [codegen id : 8]
Output [3]: [c_customer_sk#7, ca_state#11, ca_zip#12]
Input [5]: [c_customer_sk#7, c_current_addr_sk#8, ca_address_sk#10, ca_state#11, ca_zip#12]

(19) Exchange
Input [3]: [c_customer_sk#7, ca_state#11, ca_zip#12]
Arguments: hashpartitioning(c_customer_sk#7, 5), ENSURE_REQUIREMENTS, [id=#14]

(20) Sort [codegen id : 9]
Input [3]: [c_customer_sk#7, ca_state#11, ca_zip#12]
Arguments: [c_customer_sk#7 ASC NULLS FIRST], false, 0

(21) SortMergeJoin [codegen id : 10]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#7]
Join condition: ((substr(ca_zip#12, 1, 5) IN (85669,86197,88274,83405,86475,85392,85460,80348,81792) OR ca_state#11 IN (CA,WA,GA)) OR (cs_sales_price#2 > 500.00))

(22) Project [codegen id : 10]
Output [2]: [cs_sales_price#2, ca_zip#12]
Input [5]: [cs_bill_customer_sk#1, cs_sales_price#2, c_customer_sk#7, ca_state#11, ca_zip#12]

(23) HashAggregate [codegen id : 10]
Input [2]: [cs_sales_price#2, ca_zip#12]
Keys [1]: [ca_zip#12]
Functions [1]: [partial_sum(UnscaledValue(cs_sales_price#2))]
Aggregate Attributes [1]: [sum#15]
Results [2]: [ca_zip#12, sum#16]

(24) Exchange
Input [2]: [ca_zip#12, sum#16]
Arguments: hashpartitioning(ca_zip#12, 5), ENSURE_REQUIREMENTS, [id=#17]

(25) HashAggregate [codegen id : 11]
Input [2]: [ca_zip#12, sum#16]
Keys [1]: [ca_zip#12]
Functions [1]: [sum(UnscaledValue(cs_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_sales_price#2))#18]
Results [2]: [ca_zip#12, MakeDecimal(sum(UnscaledValue(cs_sales_price#2))#18,17,2) AS sum(cs_sales_price)#19]

(26) TakeOrderedAndProject
Input [2]: [ca_zip#12, sum(cs_sales_price)#19]
Arguments: 100, [ca_zip#12 ASC NULLS FIRST], [ca_zip#12, sum(cs_sales_price)#19]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (31)
+- * Project (30)
   +- * Filter (29)
      +- * ColumnarToRow (28)
         +- Scan parquet default.date_dim (27)


(27) Scan parquet default.date_dim
Output [3]: [d_date_sk#5, d_year#20, d_qoy#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [EqualTo(d_qoy,2), EqualTo(d_year,2001)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(28) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#5, d_year#20, d_qoy#21]

(29) Filter [codegen id : 1]
Input [3]: [d_date_sk#5, d_year#20, d_qoy#21]
Condition : ((d_qoy#21 = 2) AND (d_year#20 = 2001))

(30) Project [codegen id : 1]
Output [1]: [d_date_sk#5]
Input [3]: [d_date_sk#5, d_year#20, d_qoy#21]

(31) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#22]


