== Physical Plan ==
TakeOrderedAndProject (16)
+- * HashAggregate (15)
   +- Exchange (14)
      +- * HashAggregate (13)
         +- * Project (12)
            +- * SortMergeJoin Inner (11)
               :- * Sort (8)
               :  +- Exchange (7)
               :     +- * Project (6)
               :        +- * BroadcastHashJoin Inner BuildRight (5)
               :           :- * Filter (3)
               :           :  +- * ColumnarToRow (2)
               :           :     +- Scan parquet spark_catalog.default.catalog_sales (1)
               :           +- ReusedExchange (4)
               +- * Sort (10)
                  +- ReusedExchange (9)


(1) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#3), dynamicpruningexpression(cs_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [3]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3]

(3) Filter [codegen id : 2]
Input [3]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3]
Condition : (isnotnull(cs_bill_customer_sk#1) AND might_contain(Subquery scalar-subquery#5, [id=#6], xxhash64(cs_bill_customer_sk#1, 42), false))

(4) ReusedExchange [Reuses operator id: 37]
Output [1]: [d_date_sk#7]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [cs_sold_date_sk#3]
Right keys [1]: [d_date_sk#7]
Join type: Inner
Join condition: None

(6) Project [codegen id : 2]
Output [2]: [cs_bill_customer_sk#1, cs_sales_price#2]
Input [4]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3, d_date_sk#7]

(7) Exchange
Input [2]: [cs_bill_customer_sk#1, cs_sales_price#2]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(8) Sort [codegen id : 3]
Input [2]: [cs_bill_customer_sk#1, cs_sales_price#2]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(9) ReusedExchange [Reuses operator id: 29]
Output [3]: [c_customer_sk#8, ca_state#9, ca_zip#10]

(10) Sort [codegen id : 9]
Input [3]: [c_customer_sk#8, ca_state#9, ca_zip#10]
Arguments: [c_customer_sk#8 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 10]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#8]
Join type: Inner
Join condition: ((substr(ca_zip#10, 1, 5) IN (85669,86197,88274,83405,86475,85392,85460,80348,81792) OR ca_state#9 IN (CA,WA,GA)) OR (cs_sales_price#2 > 500.00))

(12) Project [codegen id : 10]
Output [2]: [cs_sales_price#2, ca_zip#10]
Input [5]: [cs_bill_customer_sk#1, cs_sales_price#2, c_customer_sk#8, ca_state#9, ca_zip#10]

(13) HashAggregate [codegen id : 10]
Input [2]: [cs_sales_price#2, ca_zip#10]
Keys [1]: [ca_zip#10]
Functions [1]: [partial_sum(UnscaledValue(cs_sales_price#2))]
Aggregate Attributes [1]: [sum#11]
Results [2]: [ca_zip#10, sum#12]

(14) Exchange
Input [2]: [ca_zip#10, sum#12]
Arguments: hashpartitioning(ca_zip#10, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(15) HashAggregate [codegen id : 11]
Input [2]: [ca_zip#10, sum#12]
Keys [1]: [ca_zip#10]
Functions [1]: [sum(UnscaledValue(cs_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_sales_price#2))#13]
Results [2]: [ca_zip#10, MakeDecimal(sum(UnscaledValue(cs_sales_price#2))#13,17,2) AS sum(cs_sales_price)#14]

(16) TakeOrderedAndProject
Input [2]: [ca_zip#10, sum(cs_sales_price)#14]
Arguments: 100, [ca_zip#10 ASC NULLS FIRST], [ca_zip#10, sum(cs_sales_price)#14]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#5, [id=#6]
ObjectHashAggregate (32)
+- Exchange (31)
   +- ObjectHashAggregate (30)
      +- Exchange (29)
         +- * Project (28)
            +- * SortMergeJoin Inner (27)
               :- * Sort (21)
               :  +- Exchange (20)
               :     +- * Filter (19)
               :        +- * ColumnarToRow (18)
               :           +- Scan parquet spark_catalog.default.customer (17)
               +- * Sort (26)
                  +- Exchange (25)
                     +- * Filter (24)
                        +- * ColumnarToRow (23)
                           +- Scan parquet spark_catalog.default.customer_address (22)


(17) Scan parquet spark_catalog.default.customer
Output [2]: [c_customer_sk#8, c_current_addr_sk#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(18) ColumnarToRow [codegen id : 1]
Input [2]: [c_customer_sk#8, c_current_addr_sk#15]

(19) Filter [codegen id : 1]
Input [2]: [c_customer_sk#8, c_current_addr_sk#15]
Condition : (isnotnull(c_customer_sk#8) AND isnotnull(c_current_addr_sk#15))

(20) Exchange
Input [2]: [c_customer_sk#8, c_current_addr_sk#15]
Arguments: hashpartitioning(c_current_addr_sk#15, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(21) Sort [codegen id : 2]
Input [2]: [c_customer_sk#8, c_current_addr_sk#15]
Arguments: [c_current_addr_sk#15 ASC NULLS FIRST], false, 0

(22) Scan parquet spark_catalog.default.customer_address
Output [3]: [ca_address_sk#16, ca_state#9, ca_zip#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_zip:string>

(23) ColumnarToRow [codegen id : 3]
Input [3]: [ca_address_sk#16, ca_state#9, ca_zip#10]

(24) Filter [codegen id : 3]
Input [3]: [ca_address_sk#16, ca_state#9, ca_zip#10]
Condition : isnotnull(ca_address_sk#16)

(25) Exchange
Input [3]: [ca_address_sk#16, ca_state#9, ca_zip#10]
Arguments: hashpartitioning(ca_address_sk#16, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(26) Sort [codegen id : 4]
Input [3]: [ca_address_sk#16, ca_state#9, ca_zip#10]
Arguments: [ca_address_sk#16 ASC NULLS FIRST], false, 0

(27) SortMergeJoin [codegen id : 5]
Left keys [1]: [c_current_addr_sk#15]
Right keys [1]: [ca_address_sk#16]
Join type: Inner
Join condition: None

(28) Project [codegen id : 5]
Output [3]: [c_customer_sk#8, ca_state#9, ca_zip#10]
Input [5]: [c_customer_sk#8, c_current_addr_sk#15, ca_address_sk#16, ca_state#9, ca_zip#10]

(29) Exchange
Input [3]: [c_customer_sk#8, ca_state#9, ca_zip#10]
Arguments: hashpartitioning(c_customer_sk#8, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(30) ObjectHashAggregate
Input [3]: [c_customer_sk#8, ca_state#9, ca_zip#10]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(c_customer_sk#8, 42), 2120804, 16966432, 0, 0)]
Aggregate Attributes [1]: [buf#17]
Results [1]: [buf#18]

(31) Exchange
Input [1]: [buf#18]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=6]

(32) ObjectHashAggregate
Input [1]: [buf#18]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(c_customer_sk#8, 42), 2120804, 16966432, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(c_customer_sk#8, 42), 2120804, 16966432, 0, 0)#19]
Results [1]: [bloom_filter_agg(xxhash64(c_customer_sk#8, 42), 2120804, 16966432, 0, 0)#19 AS bloomFilter#20]

Subquery:2 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (37)
+- * Project (36)
   +- * Filter (35)
      +- * ColumnarToRow (34)
         +- Scan parquet spark_catalog.default.date_dim (33)


(33) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#7, d_year#21, d_qoy#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(34) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#7, d_year#21, d_qoy#22]

(35) Filter [codegen id : 1]
Input [3]: [d_date_sk#7, d_year#21, d_qoy#22]
Condition : ((((isnotnull(d_qoy#22) AND isnotnull(d_year#21)) AND (d_qoy#22 = 2)) AND (d_year#21 = 2001)) AND isnotnull(d_date_sk#7))

(36) Project [codegen id : 1]
Output [1]: [d_date_sk#7]
Input [3]: [d_date_sk#7, d_year#21, d_qoy#22]

(37) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]


