== Physical Plan ==
TakeOrderedAndProject (29)
+- * HashAggregate (28)
   +- Exchange (27)
      +- * HashAggregate (26)
         +- * Project (25)
            +- * BroadcastHashJoin Inner BuildRight (24)
               :- * Project (18)
               :  +- * SortMergeJoin Inner (17)
               :     :- * Sort (11)
               :     :  +- Exchange (10)
               :     :     +- * Project (9)
               :     :        +- * BroadcastHashJoin Inner BuildLeft (8)
               :     :           :- BroadcastExchange (4)
               :     :           :  +- * Filter (3)
               :     :           :     +- * ColumnarToRow (2)
               :     :           :        +- Scan parquet default.catalog_sales (1)
               :     :           +- * Filter (7)
               :     :              +- * ColumnarToRow (6)
               :     :                 +- Scan parquet default.customer (5)
               :     +- * Sort (16)
               :        +- Exchange (15)
               :           +- * Filter (14)
               :              +- * ColumnarToRow (13)
               :                 +- Scan parquet default.customer_address (12)
               +- BroadcastExchange (23)
                  +- * Project (22)
                     +- * Filter (21)
                        +- * ColumnarToRow (20)
                           +- Scan parquet default.date_dim (19)


(1) Scan parquet default.catalog_sales
Output [3]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#3), dynamicpruningexpression(cs_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3]

(3) Filter [codegen id : 1]
Input [3]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3]
Condition : isnotnull(cs_bill_customer_sk#1)

(4) BroadcastExchange
Input [3]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#5]

(5) Scan parquet default.customer
Output [2]: [c_customer_sk#6, c_current_addr_sk#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(6) ColumnarToRow
Input [2]: [c_customer_sk#6, c_current_addr_sk#7]

(7) Filter
Input [2]: [c_customer_sk#6, c_current_addr_sk#7]
Condition : (isnotnull(c_customer_sk#6) AND isnotnull(c_current_addr_sk#7))

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#6]
Join condition: None

(9) Project [codegen id : 2]
Output [3]: [cs_sales_price#2, cs_sold_date_sk#3, c_current_addr_sk#7]
Input [5]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3, c_customer_sk#6, c_current_addr_sk#7]

(10) Exchange
Input [3]: [cs_sales_price#2, cs_sold_date_sk#3, c_current_addr_sk#7]
Arguments: hashpartitioning(c_current_addr_sk#7, 5), ENSURE_REQUIREMENTS, [id=#8]

(11) Sort [codegen id : 3]
Input [3]: [cs_sales_price#2, cs_sold_date_sk#3, c_current_addr_sk#7]
Arguments: [c_current_addr_sk#7 ASC NULLS FIRST], false, 0

(12) Scan parquet default.customer_address
Output [3]: [ca_address_sk#9, ca_state#10, ca_zip#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_zip:string>

(13) ColumnarToRow [codegen id : 4]
Input [3]: [ca_address_sk#9, ca_state#10, ca_zip#11]

(14) Filter [codegen id : 4]
Input [3]: [ca_address_sk#9, ca_state#10, ca_zip#11]
Condition : isnotnull(ca_address_sk#9)

(15) Exchange
Input [3]: [ca_address_sk#9, ca_state#10, ca_zip#11]
Arguments: hashpartitioning(ca_address_sk#9, 5), ENSURE_REQUIREMENTS, [id=#12]

(16) Sort [codegen id : 5]
Input [3]: [ca_address_sk#9, ca_state#10, ca_zip#11]
Arguments: [ca_address_sk#9 ASC NULLS FIRST], false, 0

(17) SortMergeJoin [codegen id : 7]
Left keys [1]: [c_current_addr_sk#7]
Right keys [1]: [ca_address_sk#9]
Join condition: ((substr(ca_zip#11, 1, 5) IN (85669,86197,88274,83405,86475,85392,85460,80348,81792) OR ca_state#10 IN (CA,WA,GA)) OR (cs_sales_price#2 > 500.00))

(18) Project [codegen id : 7]
Output [3]: [cs_sales_price#2, cs_sold_date_sk#3, ca_zip#11]
Input [6]: [cs_sales_price#2, cs_sold_date_sk#3, c_current_addr_sk#7, ca_address_sk#9, ca_state#10, ca_zip#11]

(19) Scan parquet default.date_dim
Output [3]: [d_date_sk#13, d_year#14, d_qoy#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(20) ColumnarToRow [codegen id : 6]
Input [3]: [d_date_sk#13, d_year#14, d_qoy#15]

(21) Filter [codegen id : 6]
Input [3]: [d_date_sk#13, d_year#14, d_qoy#15]
Condition : ((((isnotnull(d_qoy#15) AND isnotnull(d_year#14)) AND (d_qoy#15 = 2)) AND (d_year#14 = 2001)) AND isnotnull(d_date_sk#13))

(22) Project [codegen id : 6]
Output [1]: [d_date_sk#13]
Input [3]: [d_date_sk#13, d_year#14, d_qoy#15]

(23) BroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(24) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cs_sold_date_sk#3]
Right keys [1]: [d_date_sk#13]
Join condition: None

(25) Project [codegen id : 7]
Output [2]: [cs_sales_price#2, ca_zip#11]
Input [4]: [cs_sales_price#2, cs_sold_date_sk#3, ca_zip#11, d_date_sk#13]

(26) HashAggregate [codegen id : 7]
Input [2]: [cs_sales_price#2, ca_zip#11]
Keys [1]: [ca_zip#11]
Functions [1]: [partial_sum(UnscaledValue(cs_sales_price#2))]
Aggregate Attributes [1]: [sum#17]
Results [2]: [ca_zip#11, sum#18]

(27) Exchange
Input [2]: [ca_zip#11, sum#18]
Arguments: hashpartitioning(ca_zip#11, 5), ENSURE_REQUIREMENTS, [id=#19]

(28) HashAggregate [codegen id : 8]
Input [2]: [ca_zip#11, sum#18]
Keys [1]: [ca_zip#11]
Functions [1]: [sum(UnscaledValue(cs_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_sales_price#2))#20]
Results [2]: [ca_zip#11, MakeDecimal(sum(UnscaledValue(cs_sales_price#2))#20,17,2) AS sum(cs_sales_price)#21]

(29) TakeOrderedAndProject
Input [2]: [ca_zip#11, sum(cs_sales_price)#21]
Arguments: 100, [ca_zip#11 ASC NULLS FIRST], [ca_zip#11, sum(cs_sales_price)#21]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#3 IN dynamicpruning#4
ReusedExchange (30)


(30) ReusedExchange [Reuses operator id: 23]
Output [1]: [d_date_sk#13]


