== Physical Plan ==
TakeOrderedAndProject (28)
+- * HashAggregate (27)
   +- Exchange (26)
      +- * HashAggregate (25)
         +- * Project (24)
            +- * SortMergeJoin Inner (23)
               :- * Sort (8)
               :  +- Exchange (7)
               :     +- * Project (6)
               :        +- * BroadcastHashJoin Inner BuildRight (5)
               :           :- * Filter (3)
               :           :  +- * ColumnarToRow (2)
               :           :     +- Scan parquet default.catalog_sales (1)
               :           +- ReusedExchange (4)
               +- * Sort (22)
                  +- Exchange (21)
                     +- * Project (20)
                        +- * SortMergeJoin Inner (19)
                           :- * Sort (13)
                           :  +- Exchange (12)
                           :     +- * Filter (11)
                           :        +- * ColumnarToRow (10)
                           :           +- Scan parquet default.customer (9)
                           +- * Sort (18)
                              +- Exchange (17)
                                 +- * Filter (16)
                                    +- * ColumnarToRow (15)
                                       +- Scan parquet default.customer_address (14)


(1) Scan parquet default.catalog_sales
Output [3]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#3), dynamicpruningexpression(cs_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [3]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3]

(3) Filter [codegen id : 2]
Input [3]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3]
Condition : isnotnull(cs_bill_customer_sk#1)

(4) ReusedExchange [Reuses operator id: 33]
Output [1]: [d_date_sk#5]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [cs_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join condition: None

(6) Project [codegen id : 2]
Output [3]: [cs_bill_customer_sk#1, cs_sales_price#2, (cs_sales_price#2 > 500.00) AS (spark_catalog.default.catalog_sales.cs_sales_price > 500.00BD)#6]
Input [4]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3, d_date_sk#5]

(7) Exchange
Input [3]: [cs_bill_customer_sk#1, cs_sales_price#2, (spark_catalog.default.catalog_sales.cs_sales_price > 500.00BD)#6]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#7]

(8) Sort [codegen id : 3]
Input [3]: [cs_bill_customer_sk#1, cs_sales_price#2, (spark_catalog.default.catalog_sales.cs_sales_price > 500.00BD)#6]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(9) Scan parquet default.customer
Output [2]: [c_customer_sk#8, c_current_addr_sk#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(10) ColumnarToRow [codegen id : 4]
Input [2]: [c_customer_sk#8, c_current_addr_sk#9]

(11) Filter [codegen id : 4]
Input [2]: [c_customer_sk#8, c_current_addr_sk#9]
Condition : (isnotnull(c_customer_sk#8) AND isnotnull(c_current_addr_sk#9))

(12) Exchange
Input [2]: [c_customer_sk#8, c_current_addr_sk#9]
Arguments: hashpartitioning(c_current_addr_sk#9, 5), ENSURE_REQUIREMENTS, [id=#10]

(13) Sort [codegen id : 5]
Input [2]: [c_customer_sk#8, c_current_addr_sk#9]
Arguments: [c_current_addr_sk#9 ASC NULLS FIRST], false, 0

(14) Scan parquet default.customer_address
Output [3]: [ca_address_sk#11, ca_state#12, ca_zip#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_zip:string>

(15) ColumnarToRow [codegen id : 6]
Input [3]: [ca_address_sk#11, ca_state#12, ca_zip#13]

(16) Filter [codegen id : 6]
Input [3]: [ca_address_sk#11, ca_state#12, ca_zip#13]
Condition : isnotnull(ca_address_sk#11)

(17) Exchange
Input [3]: [ca_address_sk#11, ca_state#12, ca_zip#13]
Arguments: hashpartitioning(ca_address_sk#11, 5), ENSURE_REQUIREMENTS, [id=#14]

(18) Sort [codegen id : 7]
Input [3]: [ca_address_sk#11, ca_state#12, ca_zip#13]
Arguments: [ca_address_sk#11 ASC NULLS FIRST], false, 0

(19) SortMergeJoin [codegen id : 8]
Left keys [1]: [c_current_addr_sk#9]
Right keys [1]: [ca_address_sk#11]
Join condition: None

(20) Project [codegen id : 8]
Output [3]: [c_customer_sk#8, ca_zip#13, (substr(ca_zip#13, 1, 5) IN (85669,86197,88274,83405,86475,85392,85460,80348,81792) OR ca_state#12 IN (CA,WA,GA)) AS ((substr(spark_catalog.default.customer_address.ca_zip, 1, 5) IN ('85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792')) OR (spark_catalog.default.customer_address.ca_state IN ('CA', 'WA', 'GA')))#15]
Input [5]: [c_customer_sk#8, c_current_addr_sk#9, ca_address_sk#11, ca_state#12, ca_zip#13]

(21) Exchange
Input [3]: [c_customer_sk#8, ca_zip#13, ((substr(spark_catalog.default.customer_address.ca_zip, 1, 5) IN ('85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792')) OR (spark_catalog.default.customer_address.ca_state IN ('CA', 'WA', 'GA')))#15]
Arguments: hashpartitioning(c_customer_sk#8, 5), ENSURE_REQUIREMENTS, [id=#16]

(22) Sort [codegen id : 9]
Input [3]: [c_customer_sk#8, ca_zip#13, ((substr(spark_catalog.default.customer_address.ca_zip, 1, 5) IN ('85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792')) OR (spark_catalog.default.customer_address.ca_state IN ('CA', 'WA', 'GA')))#15]
Arguments: [c_customer_sk#8 ASC NULLS FIRST], false, 0

(23) SortMergeJoin [codegen id : 10]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#8]
Join condition: (((substr(spark_catalog.default.customer_address.ca_zip, 1, 5) IN ('85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792')) OR (spark_catalog.default.customer_address.ca_state IN ('CA', 'WA', 'GA')))#15 OR (spark_catalog.default.catalog_sales.cs_sales_price > 500.00BD)#6)

(24) Project [codegen id : 10]
Output [2]: [cs_sales_price#2, ca_zip#13]
Input [6]: [cs_bill_customer_sk#1, cs_sales_price#2, (spark_catalog.default.catalog_sales.cs_sales_price > 500.00BD)#6, c_customer_sk#8, ca_zip#13, ((substr(spark_catalog.default.customer_address.ca_zip, 1, 5) IN ('85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792')) OR (spark_catalog.default.customer_address.ca_state IN ('CA', 'WA', 'GA')))#15]

(25) HashAggregate [codegen id : 10]
Input [2]: [cs_sales_price#2, ca_zip#13]
Keys [1]: [ca_zip#13]
Functions [1]: [partial_sum(UnscaledValue(cs_sales_price#2))]
Aggregate Attributes [1]: [sum#17]
Results [2]: [ca_zip#13, sum#18]

(26) Exchange
Input [2]: [ca_zip#13, sum#18]
Arguments: hashpartitioning(ca_zip#13, 5), ENSURE_REQUIREMENTS, [id=#19]

(27) HashAggregate [codegen id : 11]
Input [2]: [ca_zip#13, sum#18]
Keys [1]: [ca_zip#13]
Functions [1]: [sum(UnscaledValue(cs_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_sales_price#2))#20]
Results [2]: [ca_zip#13, MakeDecimal(sum(UnscaledValue(cs_sales_price#2))#20,17,2) AS sum(cs_sales_price)#21]

(28) TakeOrderedAndProject
Input [2]: [ca_zip#13, sum(cs_sales_price)#21]
Arguments: 100, [ca_zip#13 ASC NULLS FIRST], [ca_zip#13, sum(cs_sales_price)#21]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (33)
+- * Project (32)
   +- * Filter (31)
      +- * ColumnarToRow (30)
         +- Scan parquet default.date_dim (29)


(29) Scan parquet default.date_dim
Output [3]: [d_date_sk#5, d_year#22, d_qoy#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(30) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#5, d_year#22, d_qoy#23]

(31) Filter [codegen id : 1]
Input [3]: [d_date_sk#5, d_year#22, d_qoy#23]
Condition : ((((isnotnull(d_qoy#23) AND isnotnull(d_year#22)) AND (d_qoy#23 = 2)) AND (d_year#22 = 2001)) AND isnotnull(d_date_sk#5))

(32) Project [codegen id : 1]
Output [1]: [d_date_sk#5]
Input [3]: [d_date_sk#5, d_year#22, d_qoy#23]

(33) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#24]


