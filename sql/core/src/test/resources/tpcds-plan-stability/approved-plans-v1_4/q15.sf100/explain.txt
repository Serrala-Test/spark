== Physical Plan ==
TakeOrderedAndProject (28)
+- * HashAggregate (27)
   +- Exchange (26)
      +- * HashAggregate (25)
         +- * Project (24)
            +- * BroadcastHashJoin Inner BuildRight (23)
               :- * Project (17)
               :  +- * SortMergeJoin Inner (16)
               :     :- * Sort (10)
               :     :  +- Exchange (9)
               :     :     +- * Project (8)
               :     :        +- CartesianProduct Inner (7)
               :     :           :- * Filter (3)
               :     :           :  +- * ColumnarToRow (2)
               :     :           :     +- Scan parquet default.catalog_sales (1)
               :     :           +- * Filter (6)
               :     :              +- * ColumnarToRow (5)
               :     :                 +- Scan parquet default.customer_address (4)
               :     +- * Sort (15)
               :        +- Exchange (14)
               :           +- * Filter (13)
               :              +- * ColumnarToRow (12)
               :                 +- Scan parquet default.customer (11)
               +- BroadcastExchange (22)
                  +- * Project (21)
                     +- * Filter (20)
                        +- * ColumnarToRow (19)
                           +- Scan parquet default.date_dim (18)


(1) Scan parquet default.catalog_sales
Output [3]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_sales_price#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_sales_price#3]

(3) Filter [codegen id : 1]
Input [3]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_sales_price#3]
Condition : (isnotnull(cs_bill_customer_sk#2) AND isnotnull(cs_sold_date_sk#1))

(4) Scan parquet default.customer_address
Output [3]: [ca_address_sk#4, ca_state#5, ca_zip#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_zip:string>

(5) ColumnarToRow [codegen id : 2]
Input [3]: [ca_address_sk#4, ca_state#5, ca_zip#6]

(6) Filter [codegen id : 2]
Input [3]: [ca_address_sk#4, ca_state#5, ca_zip#6]
Condition : isnotnull(ca_address_sk#4)

(7) CartesianProduct
Join condition: ((substr(ca_zip#6, 1, 5) IN (85669,86197,88274,83405,86475,85392,85460,80348,81792) OR ca_state#5 IN (CA,WA,GA)) OR (cs_sales_price#3 > 500.00))

(8) Project [codegen id : 3]
Output [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_sales_price#3, ca_address_sk#4, ca_zip#6]
Input [6]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_sales_price#3, ca_address_sk#4, ca_state#5, ca_zip#6]

(9) Exchange
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_sales_price#3, ca_address_sk#4, ca_zip#6]
Arguments: hashpartitioning(cs_bill_customer_sk#2, ca_address_sk#4, 5), ENSURE_REQUIREMENTS, [id=#7]

(10) Sort [codegen id : 4]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_sales_price#3, ca_address_sk#4, ca_zip#6]
Arguments: [cs_bill_customer_sk#2 ASC NULLS FIRST, ca_address_sk#4 ASC NULLS FIRST], false, 0

(11) Scan parquet default.customer
Output [2]: [c_customer_sk#8, c_current_addr_sk#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(12) ColumnarToRow [codegen id : 5]
Input [2]: [c_customer_sk#8, c_current_addr_sk#9]

(13) Filter [codegen id : 5]
Input [2]: [c_customer_sk#8, c_current_addr_sk#9]
Condition : (isnotnull(c_customer_sk#8) AND isnotnull(c_current_addr_sk#9))

(14) Exchange
Input [2]: [c_customer_sk#8, c_current_addr_sk#9]
Arguments: hashpartitioning(c_customer_sk#8, c_current_addr_sk#9, 5), ENSURE_REQUIREMENTS, [id=#10]

(15) Sort [codegen id : 6]
Input [2]: [c_customer_sk#8, c_current_addr_sk#9]
Arguments: [c_customer_sk#8 ASC NULLS FIRST, c_current_addr_sk#9 ASC NULLS FIRST], false, 0

(16) SortMergeJoin [codegen id : 8]
Left keys [2]: [cs_bill_customer_sk#2, ca_address_sk#4]
Right keys [2]: [c_customer_sk#8, c_current_addr_sk#9]
Join condition: None

(17) Project [codegen id : 8]
Output [3]: [cs_sold_date_sk#1, cs_sales_price#3, ca_zip#6]
Input [7]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_sales_price#3, ca_address_sk#4, ca_zip#6, c_customer_sk#8, c_current_addr_sk#9]

(18) Scan parquet default.date_dim
Output [3]: [d_date_sk#11, d_year#12, d_qoy#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(19) ColumnarToRow [codegen id : 7]
Input [3]: [d_date_sk#11, d_year#12, d_qoy#13]

(20) Filter [codegen id : 7]
Input [3]: [d_date_sk#11, d_year#12, d_qoy#13]
Condition : ((((isnotnull(d_qoy#13) AND isnotnull(d_year#12)) AND (d_qoy#13 = 2)) AND (d_year#12 = 2001)) AND isnotnull(d_date_sk#11))

(21) Project [codegen id : 7]
Output [1]: [d_date_sk#11]
Input [3]: [d_date_sk#11, d_year#12, d_qoy#13]

(22) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(23) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#11]
Join condition: None

(24) Project [codegen id : 8]
Output [2]: [cs_sales_price#3, ca_zip#6]
Input [4]: [cs_sold_date_sk#1, cs_sales_price#3, ca_zip#6, d_date_sk#11]

(25) HashAggregate [codegen id : 8]
Input [2]: [cs_sales_price#3, ca_zip#6]
Keys [1]: [ca_zip#6]
Functions [1]: [partial_sum(UnscaledValue(cs_sales_price#3))]
Aggregate Attributes [1]: [sum#15]
Results [2]: [ca_zip#6, sum#16]

(26) Exchange
Input [2]: [ca_zip#6, sum#16]
Arguments: hashpartitioning(ca_zip#6, 5), ENSURE_REQUIREMENTS, [id=#17]

(27) HashAggregate [codegen id : 9]
Input [2]: [ca_zip#6, sum#16]
Keys [1]: [ca_zip#6]
Functions [1]: [sum(UnscaledValue(cs_sales_price#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_sales_price#3))#18]
Results [2]: [ca_zip#6, MakeDecimal(sum(UnscaledValue(cs_sales_price#3))#18,17,2) AS sum(cs_sales_price)#19]

(28) TakeOrderedAndProject
Input [2]: [ca_zip#6, sum(cs_sales_price)#19]
Arguments: 100, [ca_zip#6 ASC NULLS FIRST], [ca_zip#6, sum(cs_sales_price)#19]

