== Physical Plan ==
TakeOrderedAndProject (35)
+- * HashAggregate (34)
   +- Exchange (33)
      +- * HashAggregate (32)
         +- Union (31)
            :- * Project (12)
            :  +- * BroadcastHashJoin Inner BuildRight (11)
            :     :- * Project (9)
            :     :  +- * BroadcastHashJoin Inner BuildRight (8)
            :     :     :- * Filter (3)
            :     :     :  +- * ColumnarToRow (2)
            :     :     :     +- Scan parquet default.store_sales (1)
            :     :     +- BroadcastExchange (7)
            :     :        +- * Filter (6)
            :     :           +- * ColumnarToRow (5)
            :     :              +- Scan parquet default.item (4)
            :     +- ReusedExchange (10)
            :- * Project (21)
            :  +- * BroadcastHashJoin Inner BuildRight (20)
            :     :- * Project (18)
            :     :  +- * BroadcastHashJoin Inner BuildRight (17)
            :     :     :- * Filter (15)
            :     :     :  +- * ColumnarToRow (14)
            :     :     :     +- Scan parquet default.web_sales (13)
            :     :     +- ReusedExchange (16)
            :     +- ReusedExchange (19)
            +- * Project (30)
               +- * BroadcastHashJoin Inner BuildRight (29)
                  :- * Project (27)
                  :  +- * BroadcastHashJoin Inner BuildRight (26)
                  :     :- * Filter (24)
                  :     :  +- * ColumnarToRow (23)
                  :     :     +- Scan parquet default.catalog_sales (22)
                  :     +- ReusedExchange (25)
                  +- ReusedExchange (28)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 3]
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4]
Condition : (isnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1))

(4) Scan parquet default.item
Output [2]: [i_item_sk#6, i_category#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_category:string>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [i_item_sk#6, i_category#7]

(6) Filter [codegen id : 1]
Input [2]: [i_item_sk#6, i_category#7]
Condition : isnotnull(i_item_sk#6)

(7) BroadcastExchange
Input [2]: [i_item_sk#6, i_category#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#8]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join condition: None

(9) Project [codegen id : 3]
Output [4]: [ss_store_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4, i_category#7]
Input [6]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4, i_item_sk#6, i_category#7]

(10) ReusedExchange [Reuses operator id: 39]
Output [3]: [d_date_sk#9, d_year#10, d_qoy#11]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#9]
Join condition: None

(12) Project [codegen id : 3]
Output [6]: [store AS channel#12, ss_store_sk#2 AS col_name#13, d_year#10, d_qoy#11, i_category#7, ss_ext_sales_price#3 AS ext_sales_price#14]
Input [7]: [ss_store_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4, i_category#7, d_date_sk#9, d_year#10, d_qoy#11]

(13) Scan parquet default.web_sales
Output [4]: [ws_item_sk#15, ws_ship_customer_sk#16, ws_ext_sales_price#17, ws_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#18), dynamicpruningexpression(ws_sold_date_sk#18 IN dynamicpruning#5)]
PushedFilters: [IsNull(ws_ship_customer_sk), IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_ship_customer_sk:int,ws_ext_sales_price:decimal(7,2)>

(14) ColumnarToRow [codegen id : 6]
Input [4]: [ws_item_sk#15, ws_ship_customer_sk#16, ws_ext_sales_price#17, ws_sold_date_sk#18]

(15) Filter [codegen id : 6]
Input [4]: [ws_item_sk#15, ws_ship_customer_sk#16, ws_ext_sales_price#17, ws_sold_date_sk#18]
Condition : (isnull(ws_ship_customer_sk#16) AND isnotnull(ws_item_sk#15))

(16) ReusedExchange [Reuses operator id: 7]
Output [2]: [i_item_sk#19, i_category#20]

(17) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_item_sk#15]
Right keys [1]: [i_item_sk#19]
Join condition: None

(18) Project [codegen id : 6]
Output [4]: [ws_ship_customer_sk#16, ws_ext_sales_price#17, ws_sold_date_sk#18, i_category#20]
Input [6]: [ws_item_sk#15, ws_ship_customer_sk#16, ws_ext_sales_price#17, ws_sold_date_sk#18, i_item_sk#19, i_category#20]

(19) ReusedExchange [Reuses operator id: 39]
Output [3]: [d_date_sk#21, d_year#22, d_qoy#23]

(20) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#18]
Right keys [1]: [d_date_sk#21]
Join condition: None

(21) Project [codegen id : 6]
Output [6]: [web AS channel#24, ws_ship_customer_sk#16 AS col_name#25, d_year#22, d_qoy#23, i_category#20, ws_ext_sales_price#17 AS ext_sales_price#26]
Input [7]: [ws_ship_customer_sk#16, ws_ext_sales_price#17, ws_sold_date_sk#18, i_category#20, d_date_sk#21, d_year#22, d_qoy#23]

(22) Scan parquet default.catalog_sales
Output [4]: [cs_ship_addr_sk#27, cs_item_sk#28, cs_ext_sales_price#29, cs_sold_date_sk#30]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#30), dynamicpruningexpression(cs_sold_date_sk#30 IN dynamicpruning#5)]
PushedFilters: [IsNull(cs_ship_addr_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_ship_addr_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(23) ColumnarToRow [codegen id : 9]
Input [4]: [cs_ship_addr_sk#27, cs_item_sk#28, cs_ext_sales_price#29, cs_sold_date_sk#30]

(24) Filter [codegen id : 9]
Input [4]: [cs_ship_addr_sk#27, cs_item_sk#28, cs_ext_sales_price#29, cs_sold_date_sk#30]
Condition : (isnull(cs_ship_addr_sk#27) AND isnotnull(cs_item_sk#28))

(25) ReusedExchange [Reuses operator id: 7]
Output [2]: [i_item_sk#31, i_category#32]

(26) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#28]
Right keys [1]: [i_item_sk#31]
Join condition: None

(27) Project [codegen id : 9]
Output [4]: [cs_ship_addr_sk#27, cs_ext_sales_price#29, cs_sold_date_sk#30, i_category#32]
Input [6]: [cs_ship_addr_sk#27, cs_item_sk#28, cs_ext_sales_price#29, cs_sold_date_sk#30, i_item_sk#31, i_category#32]

(28) ReusedExchange [Reuses operator id: 39]
Output [3]: [d_date_sk#33, d_year#34, d_qoy#35]

(29) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_sold_date_sk#30]
Right keys [1]: [d_date_sk#33]
Join condition: None

(30) Project [codegen id : 9]
Output [6]: [catalog AS channel#36, cs_ship_addr_sk#27 AS col_name#37, d_year#34, d_qoy#35, i_category#32, cs_ext_sales_price#29 AS ext_sales_price#38]
Input [7]: [cs_ship_addr_sk#27, cs_ext_sales_price#29, cs_sold_date_sk#30, i_category#32, d_date_sk#33, d_year#34, d_qoy#35]

(31) Union

(32) HashAggregate [codegen id : 10]
Input [6]: [channel#12, col_name#13, d_year#10, d_qoy#11, i_category#7, ext_sales_price#14]
Keys [5]: [channel#12, col_name#13, d_year#10, d_qoy#11, i_category#7]
Functions [2]: [partial_count(1), partial_sum(UnscaledValue(ext_sales_price#14))]
Aggregate Attributes [2]: [count#39, sum#40]
Results [7]: [channel#12, col_name#13, d_year#10, d_qoy#11, i_category#7, count#41, sum#42]

(33) Exchange
Input [7]: [channel#12, col_name#13, d_year#10, d_qoy#11, i_category#7, count#41, sum#42]
Arguments: hashpartitioning(channel#12, col_name#13, d_year#10, d_qoy#11, i_category#7, 5), ENSURE_REQUIREMENTS, [id=#43]

(34) HashAggregate [codegen id : 11]
Input [7]: [channel#12, col_name#13, d_year#10, d_qoy#11, i_category#7, count#41, sum#42]
Keys [5]: [channel#12, col_name#13, d_year#10, d_qoy#11, i_category#7]
Functions [2]: [count(1), sum(UnscaledValue(ext_sales_price#14))]
Aggregate Attributes [2]: [count(1)#44, sum(UnscaledValue(ext_sales_price#14))#45]
Results [7]: [channel#12, col_name#13, d_year#10, d_qoy#11, i_category#7, count(1)#44 AS sales_cnt#46, MakeDecimal(sum(UnscaledValue(ext_sales_price#14))#45,17,2) AS sales_amt#47]

(35) TakeOrderedAndProject
Input [7]: [channel#12, col_name#13, d_year#10, d_qoy#11, i_category#7, sales_cnt#46, sales_amt#47]
Arguments: 100, [channel#12 ASC NULLS FIRST, col_name#13 ASC NULLS FIRST, d_year#10 ASC NULLS FIRST, d_qoy#11 ASC NULLS FIRST, i_category#7 ASC NULLS FIRST], [channel#12, col_name#13, d_year#10, d_qoy#11, i_category#7, sales_cnt#46, sales_amt#47]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (39)
+- * Filter (38)
   +- * ColumnarToRow (37)
      +- Scan parquet default.date_dim (36)


(36) Scan parquet default.date_dim
Output [3]: [d_date_sk#9, d_year#10, d_qoy#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(37) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#9, d_year#10, d_qoy#11]

(38) Filter [codegen id : 1]
Input [3]: [d_date_sk#9, d_year#10, d_qoy#11]
Condition : isnotnull(d_date_sk#9)

(39) BroadcastExchange
Input [3]: [d_date_sk#9, d_year#10, d_qoy#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#48]

Subquery:2 Hosting operator id = 13 Hosting Expression = ws_sold_date_sk#18 IN dynamicpruning#5

Subquery:3 Hosting operator id = 22 Hosting Expression = cs_sold_date_sk#30 IN dynamicpruning#5


