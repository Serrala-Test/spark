== Physical Plan ==
TakeOrderedAndProject (39)
+- * HashAggregate (38)
   +- Exchange (37)
      +- * HashAggregate (36)
         +- Union (35)
            :- * Project (16)
            :  +- * BroadcastHashJoin Inner BuildRight (15)
            :     :- * Project (10)
            :     :  +- * BroadcastHashJoin Inner BuildRight (9)
            :     :     :- * Filter (3)
            :     :     :  +- * ColumnarToRow (2)
            :     :     :     +- Scan parquet default.store_sales (1)
            :     :     +- BroadcastExchange (8)
            :     :        +- * Project (7)
            :     :           +- * Filter (6)
            :     :              +- * ColumnarToRow (5)
            :     :                 +- Scan parquet default.item (4)
            :     +- BroadcastExchange (14)
            :        +- * Filter (13)
            :           +- * ColumnarToRow (12)
            :              +- Scan parquet default.date_dim (11)
            :- * Project (25)
            :  +- * BroadcastHashJoin Inner BuildRight (24)
            :     :- * Project (22)
            :     :  +- * BroadcastHashJoin Inner BuildRight (21)
            :     :     :- * Filter (19)
            :     :     :  +- * ColumnarToRow (18)
            :     :     :     +- Scan parquet default.web_sales (17)
            :     :     +- ReusedExchange (20)
            :     +- ReusedExchange (23)
            +- * Project (34)
               +- * BroadcastHashJoin Inner BuildRight (33)
                  :- * Project (31)
                  :  +- * BroadcastHashJoin Inner BuildRight (30)
                  :     :- * Filter (28)
                  :     :  +- * ColumnarToRow (27)
                  :     :     +- Scan parquet default.catalog_sales (26)
                  :     +- ReusedExchange (29)
                  +- ReusedExchange (32)


(1) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4]

(3) Filter [codegen id : 3]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4]
Condition : ((isnull(ss_store_sk#3) AND isnotnull(ss_item_sk#2)) AND isnotnull(ss_sold_date_sk#1))

(4) Scan parquet default.item
Output [2]: [i_item_sk#5, i_category#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_category:string>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [i_item_sk#5, i_category#6]

(6) Filter [codegen id : 1]
Input [2]: [i_item_sk#5, i_category#6]
Condition : isnotnull(i_item_sk#5)

(7) Project [codegen id : 1]
Output [2]: [i_item_sk#5, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#6, 50, false, true) AS i_category#7]
Input [2]: [i_item_sk#5, i_category#6]

(8) BroadcastExchange
Input [2]: [i_item_sk#5, i_category#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#5]
Join condition: None

(10) Project [codegen id : 3]
Output [4]: [ss_sold_date_sk#1, ss_store_sk#3, ss_ext_sales_price#4, i_category#7]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, i_item_sk#5, i_category#7]

(11) Scan parquet default.date_dim
Output [3]: [d_date_sk#9, d_year#10, d_qoy#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(12) ColumnarToRow [codegen id : 2]
Input [3]: [d_date_sk#9, d_year#10, d_qoy#11]

(13) Filter [codegen id : 2]
Input [3]: [d_date_sk#9, d_year#10, d_qoy#11]
Condition : isnotnull(d_date_sk#9)

(14) BroadcastExchange
Input [3]: [d_date_sk#9, d_year#10, d_qoy#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#12]

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#9]
Join condition: None

(16) Project [codegen id : 3]
Output [6]: [store AS channel#13, ss_store_sk#3 AS col_name#14, d_year#10, d_qoy#11, i_category#7, ss_ext_sales_price#4 AS ext_sales_price#15]
Input [7]: [ss_sold_date_sk#1, ss_store_sk#3, ss_ext_sales_price#4, i_category#7, d_date_sk#9, d_year#10, d_qoy#11]

(17) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#16, ws_item_sk#17, ws_ship_customer_sk#18, ws_ext_sales_price#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNull(ws_ship_customer_sk), IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_ship_customer_sk:int,ws_ext_sales_price:decimal(7,2)>

(18) ColumnarToRow [codegen id : 6]
Input [4]: [ws_sold_date_sk#16, ws_item_sk#17, ws_ship_customer_sk#18, ws_ext_sales_price#19]

(19) Filter [codegen id : 6]
Input [4]: [ws_sold_date_sk#16, ws_item_sk#17, ws_ship_customer_sk#18, ws_ext_sales_price#19]
Condition : ((isnull(ws_ship_customer_sk#18) AND isnotnull(ws_item_sk#17)) AND isnotnull(ws_sold_date_sk#16))

(20) ReusedExchange [Reuses operator id: 8]
Output [2]: [i_item_sk#5, i_category#20]

(21) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_item_sk#17]
Right keys [1]: [i_item_sk#5]
Join condition: None

(22) Project [codegen id : 6]
Output [4]: [ws_sold_date_sk#16, ws_ship_customer_sk#18, ws_ext_sales_price#19, i_category#20]
Input [6]: [ws_sold_date_sk#16, ws_item_sk#17, ws_ship_customer_sk#18, ws_ext_sales_price#19, i_item_sk#5, i_category#20]

(23) ReusedExchange [Reuses operator id: 14]
Output [3]: [d_date_sk#9, d_year#10, d_qoy#11]

(24) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#16]
Right keys [1]: [d_date_sk#9]
Join condition: None

(25) Project [codegen id : 6]
Output [6]: [web AS channel#21, ws_ship_customer_sk#18 AS col_name#22, d_year#10, d_qoy#11, i_category#20 AS i_category#23, ws_ext_sales_price#19 AS ext_sales_price#24]
Input [7]: [ws_sold_date_sk#16, ws_ship_customer_sk#18, ws_ext_sales_price#19, i_category#20, d_date_sk#9, d_year#10, d_qoy#11]

(26) Scan parquet default.catalog_sales
Output [4]: [cs_sold_date_sk#25, cs_ship_addr_sk#26, cs_item_sk#27, cs_ext_sales_price#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNull(cs_ship_addr_sk), IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_ship_addr_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(27) ColumnarToRow [codegen id : 9]
Input [4]: [cs_sold_date_sk#25, cs_ship_addr_sk#26, cs_item_sk#27, cs_ext_sales_price#28]

(28) Filter [codegen id : 9]
Input [4]: [cs_sold_date_sk#25, cs_ship_addr_sk#26, cs_item_sk#27, cs_ext_sales_price#28]
Condition : ((isnull(cs_ship_addr_sk#26) AND isnotnull(cs_item_sk#27)) AND isnotnull(cs_sold_date_sk#25))

(29) ReusedExchange [Reuses operator id: 8]
Output [2]: [i_item_sk#5, i_category#29]

(30) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#27]
Right keys [1]: [i_item_sk#5]
Join condition: None

(31) Project [codegen id : 9]
Output [4]: [cs_sold_date_sk#25, cs_ship_addr_sk#26, cs_ext_sales_price#28, i_category#29]
Input [6]: [cs_sold_date_sk#25, cs_ship_addr_sk#26, cs_item_sk#27, cs_ext_sales_price#28, i_item_sk#5, i_category#29]

(32) ReusedExchange [Reuses operator id: 14]
Output [3]: [d_date_sk#9, d_year#10, d_qoy#11]

(33) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_sold_date_sk#25]
Right keys [1]: [d_date_sk#9]
Join condition: None

(34) Project [codegen id : 9]
Output [6]: [catalog AS channel#30, cs_ship_addr_sk#26 AS col_name#31, d_year#10, d_qoy#11, i_category#29 AS i_category#32, cs_ext_sales_price#28 AS ext_sales_price#33]
Input [7]: [cs_sold_date_sk#25, cs_ship_addr_sk#26, cs_ext_sales_price#28, i_category#29, d_date_sk#9, d_year#10, d_qoy#11]

(35) Union

(36) HashAggregate [codegen id : 10]
Input [6]: [channel#13, col_name#14, d_year#10, d_qoy#11, i_category#7, ext_sales_price#15]
Keys [5]: [channel#13, col_name#14, d_year#10, d_qoy#11, i_category#7]
Functions [2]: [partial_count(1), partial_sum(UnscaledValue(ext_sales_price#15))]
Aggregate Attributes [2]: [count#34, sum#35]
Results [7]: [channel#13, col_name#14, d_year#10, d_qoy#11, i_category#7, count#36, sum#37]

(37) Exchange
Input [7]: [channel#13, col_name#14, d_year#10, d_qoy#11, i_category#7, count#36, sum#37]
Arguments: hashpartitioning(channel#13, col_name#14, d_year#10, d_qoy#11, i_category#7, 5), ENSURE_REQUIREMENTS, [id=#38]

(38) HashAggregate [codegen id : 11]
Input [7]: [channel#13, col_name#14, d_year#10, d_qoy#11, i_category#7, count#36, sum#37]
Keys [5]: [channel#13, col_name#14, d_year#10, d_qoy#11, i_category#7]
Functions [2]: [count(1), sum(UnscaledValue(ext_sales_price#15))]
Aggregate Attributes [2]: [count(1)#39, sum(UnscaledValue(ext_sales_price#15))#40]
Results [7]: [channel#13, col_name#14, d_year#10, d_qoy#11, i_category#7, count(1)#39 AS sales_cnt#41, MakeDecimal(sum(UnscaledValue(ext_sales_price#15))#40,17,2) AS sales_amt#42]

(39) TakeOrderedAndProject
Input [7]: [channel#13, col_name#14, d_year#10, d_qoy#11, i_category#7, sales_cnt#41, sales_amt#42]
Arguments: 100, [channel#13 ASC NULLS FIRST, col_name#14 ASC NULLS FIRST, d_year#10 ASC NULLS FIRST, d_qoy#11 ASC NULLS FIRST, i_category#7 ASC NULLS FIRST], [channel#13, col_name#14, d_year#10, d_qoy#11, i_category#7, sales_cnt#41, sales_amt#42]

