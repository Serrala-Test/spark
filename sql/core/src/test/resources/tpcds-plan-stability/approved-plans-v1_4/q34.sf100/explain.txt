== Physical Plan ==
* Sort (39)
+- Exchange (38)
   +- * Project (37)
      +- * SortMergeJoin Inner (36)
         :- * Sort (30)
         :  +- Exchange (29)
         :     +- * Filter (28)
         :        +- * HashAggregate (27)
         :           +- Exchange (26)
         :              +- * HashAggregate (25)
         :                 +- * Project (24)
         :                    +- * BroadcastHashJoin Inner BuildRight (23)
         :                       :- * Project (17)
         :                       :  +- * BroadcastHashJoin Inner BuildRight (16)
         :                       :     :- * Project (10)
         :                       :     :  +- * BroadcastHashJoin Inner BuildRight (9)
         :                       :     :     :- * Filter (3)
         :                       :     :     :  +- * ColumnarToRow (2)
         :                       :     :     :     +- Scan parquet default.store_sales (1)
         :                       :     :     +- BroadcastExchange (8)
         :                       :     :        +- * Project (7)
         :                       :     :           +- * Filter (6)
         :                       :     :              +- * ColumnarToRow (5)
         :                       :     :                 +- Scan parquet default.store (4)
         :                       :     +- BroadcastExchange (15)
         :                       :        +- * Project (14)
         :                       :           +- * Filter (13)
         :                       :              +- * ColumnarToRow (12)
         :                       :                 +- Scan parquet default.household_demographics (11)
         :                       +- BroadcastExchange (22)
         :                          +- * Project (21)
         :                             +- * Filter (20)
         :                                +- * ColumnarToRow (19)
         :                                   +- Scan parquet default.date_dim (18)
         +- * Sort (35)
            +- Exchange (34)
               +- * Filter (33)
                  +- * ColumnarToRow (32)
                     +- Scan parquet default.customer (31)


(1) Scan parquet default.store_sales
Output [5]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_store_sk#4, ss_ticket_number#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_hdemo_sk:int,ss_store_sk:int,ss_ticket_number:int>

(2) ColumnarToRow [codegen id : 4]
Input [5]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_store_sk#4, ss_ticket_number#5]

(3) Filter [codegen id : 4]
Input [5]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_store_sk#4, ss_ticket_number#5]
Condition : (((isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_store_sk#4)) AND isnotnull(ss_hdemo_sk#3)) AND isnotnull(ss_customer_sk#2))

(4) Scan parquet default.store
Output [2]: [s_store_sk#6, s_county#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_county), EqualTo(s_county,Williamson County), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_county:string>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [s_store_sk#6, s_county#7]

(6) Filter [codegen id : 1]
Input [2]: [s_store_sk#6, s_county#7]
Condition : ((isnotnull(s_county#7) AND (s_county#7 = Williamson County)) AND isnotnull(s_store_sk#6))

(7) Project [codegen id : 1]
Output [1]: [s_store_sk#6]
Input [2]: [s_store_sk#6, s_county#7]

(8) BroadcastExchange
Input [1]: [s_store_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [s_store_sk#6]
Join condition: None

(10) Project [codegen id : 4]
Output [4]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_ticket_number#5]
Input [6]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_store_sk#4, ss_ticket_number#5, s_store_sk#6]

(11) Scan parquet default.household_demographics
Output [4]: [hd_demo_sk#9, hd_buy_potential#10, hd_dep_count#11, hd_vehicle_count#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_vehicle_count), IsNotNull(hd_dep_count), Or(EqualTo(hd_buy_potential,>10000),EqualTo(hd_buy_potential,unknown)), GreaterThan(hd_vehicle_count,0), GreaterThan(hd_vehicle_count,0), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string,hd_dep_count:int,hd_vehicle_count:int>

(12) ColumnarToRow [codegen id : 2]
Input [4]: [hd_demo_sk#9, hd_buy_potential#10, hd_dep_count#11, hd_vehicle_count#12]

(13) Filter [codegen id : 2]
Input [4]: [hd_demo_sk#9, hd_buy_potential#10, hd_dep_count#11, hd_vehicle_count#12]
Condition : (((((isnotnull(hd_vehicle_count#12) AND isnotnull(hd_dep_count#11)) AND ((hd_buy_potential#10 = >10000) OR (hd_buy_potential#10 = unknown))) AND (hd_vehicle_count#12 > 0)) AND ((cast(hd_dep_count#11 as double) / cast(hd_vehicle_count#12 as double)) > 1.2)) AND isnotnull(hd_demo_sk#9))

(14) Project [codegen id : 2]
Output [1]: [hd_demo_sk#9]
Input [4]: [hd_demo_sk#9, hd_buy_potential#10, hd_dep_count#11, hd_vehicle_count#12]

(15) BroadcastExchange
Input [1]: [hd_demo_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13]

(16) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_hdemo_sk#3]
Right keys [1]: [hd_demo_sk#9]
Join condition: None

(17) Project [codegen id : 4]
Output [3]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ticket_number#5]
Input [5]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_ticket_number#5, hd_demo_sk#9]

(18) Scan parquet default.date_dim
Output [3]: [d_date_sk#14, d_year#15, d_dom#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [Or(And(GreaterThanOrEqual(d_dom,1),LessThanOrEqual(d_dom,3)),And(GreaterThanOrEqual(d_dom,25),LessThanOrEqual(d_dom,28))), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_dom:int>

(19) ColumnarToRow [codegen id : 3]
Input [3]: [d_date_sk#14, d_year#15, d_dom#16]

(20) Filter [codegen id : 3]
Input [3]: [d_date_sk#14, d_year#15, d_dom#16]
Condition : (((((d_dom#16 >= 1) AND (d_dom#16 <= 3)) OR ((d_dom#16 >= 25) AND (d_dom#16 <= 28))) AND d_year#15 IN (1999,2000,2001)) AND isnotnull(d_date_sk#14))

(21) Project [codegen id : 3]
Output [1]: [d_date_sk#14]
Input [3]: [d_date_sk#14, d_year#15, d_dom#16]

(22) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#17]

(23) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#14]
Join condition: None

(24) Project [codegen id : 4]
Output [2]: [ss_customer_sk#2, ss_ticket_number#5]
Input [4]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ticket_number#5, d_date_sk#14]

(25) HashAggregate [codegen id : 4]
Input [2]: [ss_customer_sk#2, ss_ticket_number#5]
Keys [2]: [ss_ticket_number#5, ss_customer_sk#2]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#18]
Results [3]: [ss_ticket_number#5, ss_customer_sk#2, count#19]

(26) Exchange
Input [3]: [ss_ticket_number#5, ss_customer_sk#2, count#19]
Arguments: hashpartitioning(ss_ticket_number#5, ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#20]

(27) HashAggregate [codegen id : 5]
Input [3]: [ss_ticket_number#5, ss_customer_sk#2, count#19]
Keys [2]: [ss_ticket_number#5, ss_customer_sk#2]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#21]
Results [3]: [ss_ticket_number#5, ss_customer_sk#2, count(1)#21 AS cnt#22]

(28) Filter [codegen id : 5]
Input [3]: [ss_ticket_number#5, ss_customer_sk#2, cnt#22]
Condition : ((cnt#22 >= 15) AND (cnt#22 <= 20))

(29) Exchange
Input [3]: [ss_ticket_number#5, ss_customer_sk#2, cnt#22]
Arguments: hashpartitioning(ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#23]

(30) Sort [codegen id : 6]
Input [3]: [ss_ticket_number#5, ss_customer_sk#2, cnt#22]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(31) Scan parquet default.customer
Output [5]: [c_customer_sk#24, c_salutation#25, c_first_name#26, c_last_name#27, c_preferred_cust_flag#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_salutation:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string>

(32) ColumnarToRow [codegen id : 7]
Input [5]: [c_customer_sk#24, c_salutation#25, c_first_name#26, c_last_name#27, c_preferred_cust_flag#28]

(33) Filter [codegen id : 7]
Input [5]: [c_customer_sk#24, c_salutation#25, c_first_name#26, c_last_name#27, c_preferred_cust_flag#28]
Condition : isnotnull(c_customer_sk#24)

(34) Exchange
Input [5]: [c_customer_sk#24, c_salutation#25, c_first_name#26, c_last_name#27, c_preferred_cust_flag#28]
Arguments: hashpartitioning(c_customer_sk#24, 5), ENSURE_REQUIREMENTS, [id=#29]

(35) Sort [codegen id : 8]
Input [5]: [c_customer_sk#24, c_salutation#25, c_first_name#26, c_last_name#27, c_preferred_cust_flag#28]
Arguments: [c_customer_sk#24 ASC NULLS FIRST], false, 0

(36) SortMergeJoin [codegen id : 9]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#24]
Join condition: None

(37) Project [codegen id : 9]
Output [6]: [c_last_name#27, c_first_name#26, c_salutation#25, c_preferred_cust_flag#28, ss_ticket_number#5, cnt#22]
Input [8]: [ss_ticket_number#5, ss_customer_sk#2, cnt#22, c_customer_sk#24, c_salutation#25, c_first_name#26, c_last_name#27, c_preferred_cust_flag#28]

(38) Exchange
Input [6]: [c_last_name#27, c_first_name#26, c_salutation#25, c_preferred_cust_flag#28, ss_ticket_number#5, cnt#22]
Arguments: rangepartitioning(c_last_name#27 ASC NULLS FIRST, c_first_name#26 ASC NULLS FIRST, c_salutation#25 ASC NULLS FIRST, c_preferred_cust_flag#28 DESC NULLS LAST, 5), ENSURE_REQUIREMENTS, [id=#30]

(39) Sort [codegen id : 10]
Input [6]: [c_last_name#27, c_first_name#26, c_salutation#25, c_preferred_cust_flag#28, ss_ticket_number#5, cnt#22]
Arguments: [c_last_name#27 ASC NULLS FIRST, c_first_name#26 ASC NULLS FIRST, c_salutation#25 ASC NULLS FIRST, c_preferred_cust_flag#28 DESC NULLS LAST], true, 0

