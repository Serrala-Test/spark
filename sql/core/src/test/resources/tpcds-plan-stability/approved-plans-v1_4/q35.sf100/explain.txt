== Physical Plan ==
TakeOrderedAndProject (60)
+- * HashAggregate (59)
   +- Exchange (58)
      +- * HashAggregate (57)
         +- * Project (56)
            +- * SortMergeJoin Inner (55)
               :- * Sort (49)
               :  +- Exchange (48)
               :     +- * Project (47)
               :        +- * SortMergeJoin Inner (46)
               :           :- * Sort (40)
               :           :  +- Exchange (39)
               :           :     +- * Project (38)
               :           :        +- * Filter (37)
               :           :           +- * BroadcastHashJoin ExistenceJoin(exists#1) BuildRight (36)
               :           :              :- * BroadcastHashJoin ExistenceJoin(exists#2) BuildRight (25)
               :           :              :  :- * BroadcastHashJoin LeftSemi BuildRight (14)
               :           :              :  :  :- * Filter (3)
               :           :              :  :  :  +- * ColumnarToRow (2)
               :           :              :  :  :     +- Scan parquet default.customer (1)
               :           :              :  :  +- BroadcastExchange (13)
               :           :              :  :     +- * Project (12)
               :           :              :  :        +- * BroadcastHashJoin Inner BuildLeft (11)
               :           :              :  :           :- BroadcastExchange (6)
               :           :              :  :           :  +- * ColumnarToRow (5)
               :           :              :  :           :     +- Scan parquet default.store_sales (4)
               :           :              :  :           +- * Project (10)
               :           :              :  :              +- * Filter (9)
               :           :              :  :                 +- * ColumnarToRow (8)
               :           :              :  :                    +- Scan parquet default.date_dim (7)
               :           :              :  +- BroadcastExchange (24)
               :           :              :     +- * Project (23)
               :           :              :        +- * BroadcastHashJoin Inner BuildLeft (22)
               :           :              :           :- BroadcastExchange (17)
               :           :              :           :  +- * ColumnarToRow (16)
               :           :              :           :     +- Scan parquet default.web_sales (15)
               :           :              :           +- * Project (21)
               :           :              :              +- * Filter (20)
               :           :              :                 +- * ColumnarToRow (19)
               :           :              :                    +- Scan parquet default.date_dim (18)
               :           :              +- BroadcastExchange (35)
               :           :                 +- * Project (34)
               :           :                    +- * BroadcastHashJoin Inner BuildLeft (33)
               :           :                       :- BroadcastExchange (28)
               :           :                       :  +- * ColumnarToRow (27)
               :           :                       :     +- Scan parquet default.catalog_sales (26)
               :           :                       +- * Project (32)
               :           :                          +- * Filter (31)
               :           :                             +- * ColumnarToRow (30)
               :           :                                +- Scan parquet default.date_dim (29)
               :           +- * Sort (45)
               :              +- Exchange (44)
               :                 +- * Filter (43)
               :                    +- * ColumnarToRow (42)
               :                       +- Scan parquet default.customer_address (41)
               +- * Sort (54)
                  +- Exchange (53)
                     +- * Filter (52)
                        +- * ColumnarToRow (51)
                           +- Scan parquet default.customer_demographics (50)


(1) Scan parquet default.customer
Output [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 7]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]

(3) Filter [codegen id : 7]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Condition : (isnotnull(c_current_addr_sk#5) AND isnotnull(c_current_cdemo_sk#4))

(4) Scan parquet default.store_sales
Output [2]: [ss_customer_sk#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(true)]
ReadSchema: struct<ss_customer_sk:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [ss_customer_sk#6, ss_sold_date_sk#7]

(6) BroadcastExchange
Input [2]: [ss_customer_sk#6, ss_sold_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#8]

(7) Scan parquet default.date_dim
Output [3]: [d_date_sk#9, d_year#10, d_qoy#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_qoy), EqualTo(d_year,2002), LessThan(d_qoy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(8) ColumnarToRow
Input [3]: [d_date_sk#9, d_year#10, d_qoy#11]

(9) Filter
Input [3]: [d_date_sk#9, d_year#10, d_qoy#11]
Condition : ((((isnotnull(d_year#10) AND isnotnull(d_qoy#11)) AND (d_year#10 = 2002)) AND (d_qoy#11 < 4)) AND isnotnull(d_date_sk#9))

(10) Project
Output [1]: [d_date_sk#9]
Input [3]: [d_date_sk#9, d_year#10, d_qoy#11]

(11) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#9]
Join condition: None

(12) Project [codegen id : 2]
Output [1]: [ss_customer_sk#6]
Input [3]: [ss_customer_sk#6, ss_sold_date_sk#7, d_date_sk#9]

(13) BroadcastExchange
Input [1]: [ss_customer_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(14) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ss_customer_sk#6]
Join condition: None

(15) Scan parquet default.web_sales
Output [2]: [ws_bill_customer_sk#13, ws_sold_date_sk#14]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#14), dynamicpruningexpression(true)]
ReadSchema: struct<ws_bill_customer_sk:int>

(16) ColumnarToRow [codegen id : 3]
Input [2]: [ws_bill_customer_sk#13, ws_sold_date_sk#14]

(17) BroadcastExchange
Input [2]: [ws_bill_customer_sk#13, ws_sold_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#15]

(18) Scan parquet default.date_dim
Output [3]: [d_date_sk#9, d_year#10, d_qoy#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_qoy), EqualTo(d_year,2002), LessThan(d_qoy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(19) ColumnarToRow
Input [3]: [d_date_sk#9, d_year#10, d_qoy#11]

(20) Filter
Input [3]: [d_date_sk#9, d_year#10, d_qoy#11]
Condition : ((((isnotnull(d_year#10) AND isnotnull(d_qoy#11)) AND (d_year#10 = 2002)) AND (d_qoy#11 < 4)) AND isnotnull(d_date_sk#9))

(21) Project
Output [1]: [d_date_sk#9]
Input [3]: [d_date_sk#9, d_year#10, d_qoy#11]

(22) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ws_sold_date_sk#14]
Right keys [1]: [d_date_sk#9]
Join condition: None

(23) Project [codegen id : 4]
Output [1]: [ws_bill_customer_sk#13]
Input [3]: [ws_bill_customer_sk#13, ws_sold_date_sk#14, d_date_sk#9]

(24) BroadcastExchange
Input [1]: [ws_bill_customer_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(25) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ws_bill_customer_sk#13]
Join condition: None

(26) Scan parquet default.catalog_sales
Output [2]: [cs_ship_customer_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(true)]
ReadSchema: struct<cs_ship_customer_sk:int>

(27) ColumnarToRow [codegen id : 5]
Input [2]: [cs_ship_customer_sk#17, cs_sold_date_sk#18]

(28) BroadcastExchange
Input [2]: [cs_ship_customer_sk#17, cs_sold_date_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#19]

(29) Scan parquet default.date_dim
Output [3]: [d_date_sk#9, d_year#10, d_qoy#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_qoy), EqualTo(d_year,2002), LessThan(d_qoy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(30) ColumnarToRow
Input [3]: [d_date_sk#9, d_year#10, d_qoy#11]

(31) Filter
Input [3]: [d_date_sk#9, d_year#10, d_qoy#11]
Condition : ((((isnotnull(d_year#10) AND isnotnull(d_qoy#11)) AND (d_year#10 = 2002)) AND (d_qoy#11 < 4)) AND isnotnull(d_date_sk#9))

(32) Project
Output [1]: [d_date_sk#9]
Input [3]: [d_date_sk#9, d_year#10, d_qoy#11]

(33) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#9]
Join condition: None

(34) Project [codegen id : 6]
Output [1]: [cs_ship_customer_sk#17]
Input [3]: [cs_ship_customer_sk#17, cs_sold_date_sk#18, d_date_sk#9]

(35) BroadcastExchange
Input [1]: [cs_ship_customer_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#20]

(36) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [cs_ship_customer_sk#17]
Join condition: None

(37) Filter [codegen id : 7]
Input [5]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5, exists#2, exists#1]
Condition : (exists#2 OR exists#1)

(38) Project [codegen id : 7]
Output [2]: [c_current_cdemo_sk#4, c_current_addr_sk#5]
Input [5]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5, exists#2, exists#1]

(39) Exchange
Input [2]: [c_current_cdemo_sk#4, c_current_addr_sk#5]
Arguments: hashpartitioning(c_current_addr_sk#5, 5), ENSURE_REQUIREMENTS, [id=#21]

(40) Sort [codegen id : 8]
Input [2]: [c_current_cdemo_sk#4, c_current_addr_sk#5]
Arguments: [c_current_addr_sk#5 ASC NULLS FIRST], false, 0

(41) Scan parquet default.customer_address
Output [2]: [ca_address_sk#22, ca_state#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(42) ColumnarToRow [codegen id : 9]
Input [2]: [ca_address_sk#22, ca_state#23]

(43) Filter [codegen id : 9]
Input [2]: [ca_address_sk#22, ca_state#23]
Condition : isnotnull(ca_address_sk#22)

(44) Exchange
Input [2]: [ca_address_sk#22, ca_state#23]
Arguments: hashpartitioning(ca_address_sk#22, 5), ENSURE_REQUIREMENTS, [id=#24]

(45) Sort [codegen id : 10]
Input [2]: [ca_address_sk#22, ca_state#23]
Arguments: [ca_address_sk#22 ASC NULLS FIRST], false, 0

(46) SortMergeJoin [codegen id : 11]
Left keys [1]: [c_current_addr_sk#5]
Right keys [1]: [ca_address_sk#22]
Join condition: None

(47) Project [codegen id : 11]
Output [2]: [c_current_cdemo_sk#4, ca_state#23]
Input [4]: [c_current_cdemo_sk#4, c_current_addr_sk#5, ca_address_sk#22, ca_state#23]

(48) Exchange
Input [2]: [c_current_cdemo_sk#4, ca_state#23]
Arguments: hashpartitioning(c_current_cdemo_sk#4, 5), ENSURE_REQUIREMENTS, [id=#25]

(49) Sort [codegen id : 12]
Input [2]: [c_current_cdemo_sk#4, ca_state#23]
Arguments: [c_current_cdemo_sk#4 ASC NULLS FIRST], false, 0

(50) Scan parquet default.customer_demographics
Output [6]: [cd_demo_sk#26, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(51) ColumnarToRow [codegen id : 13]
Input [6]: [cd_demo_sk#26, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]

(52) Filter [codegen id : 13]
Input [6]: [cd_demo_sk#26, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]
Condition : isnotnull(cd_demo_sk#26)

(53) Exchange
Input [6]: [cd_demo_sk#26, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]
Arguments: hashpartitioning(cd_demo_sk#26, 5), ENSURE_REQUIREMENTS, [id=#32]

(54) Sort [codegen id : 14]
Input [6]: [cd_demo_sk#26, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]
Arguments: [cd_demo_sk#26 ASC NULLS FIRST], false, 0

(55) SortMergeJoin [codegen id : 15]
Left keys [1]: [c_current_cdemo_sk#4]
Right keys [1]: [cd_demo_sk#26]
Join condition: None

(56) Project [codegen id : 15]
Output [6]: [ca_state#23, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]
Input [8]: [c_current_cdemo_sk#4, ca_state#23, cd_demo_sk#26, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]

(57) HashAggregate [codegen id : 15]
Input [6]: [ca_state#23, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]
Keys [6]: [ca_state#23, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]
Functions [10]: [partial_count(1), partial_min(cd_dep_count#29), partial_max(cd_dep_count#29), partial_avg(cd_dep_count#29), partial_min(cd_dep_employed_count#30), partial_max(cd_dep_employed_count#30), partial_avg(cd_dep_employed_count#30), partial_min(cd_dep_college_count#31), partial_max(cd_dep_college_count#31), partial_avg(cd_dep_college_count#31)]
Aggregate Attributes [13]: [count#33, min#34, max#35, sum#36, count#37, min#38, max#39, sum#40, count#41, min#42, max#43, sum#44, count#45]
Results [19]: [ca_state#23, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31, count#46, min#47, max#48, sum#49, count#50, min#51, max#52, sum#53, count#54, min#55, max#56, sum#57, count#58]

(58) Exchange
Input [19]: [ca_state#23, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31, count#46, min#47, max#48, sum#49, count#50, min#51, max#52, sum#53, count#54, min#55, max#56, sum#57, count#58]
Arguments: hashpartitioning(ca_state#23, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31, 5), ENSURE_REQUIREMENTS, [id=#59]

(59) HashAggregate [codegen id : 16]
Input [19]: [ca_state#23, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31, count#46, min#47, max#48, sum#49, count#50, min#51, max#52, sum#53, count#54, min#55, max#56, sum#57, count#58]
Keys [6]: [ca_state#23, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]
Functions [10]: [count(1), min(cd_dep_count#29), max(cd_dep_count#29), avg(cd_dep_count#29), min(cd_dep_employed_count#30), max(cd_dep_employed_count#30), avg(cd_dep_employed_count#30), min(cd_dep_college_count#31), max(cd_dep_college_count#31), avg(cd_dep_college_count#31)]
Aggregate Attributes [10]: [count(1)#60, min(cd_dep_count#29)#61, max(cd_dep_count#29)#62, avg(cd_dep_count#29)#63, min(cd_dep_employed_count#30)#64, max(cd_dep_employed_count#30)#65, avg(cd_dep_employed_count#30)#66, min(cd_dep_college_count#31)#67, max(cd_dep_college_count#31)#68, avg(cd_dep_college_count#31)#69]
Results [18]: [ca_state#23, cd_gender#27, cd_marital_status#28, count(1)#60 AS cnt1#70, min(cd_dep_count#29)#61 AS min(cd_dep_count)#71, max(cd_dep_count#29)#62 AS max(cd_dep_count)#72, avg(cd_dep_count#29)#63 AS avg(cd_dep_count)#73, cd_dep_employed_count#30, count(1)#60 AS cnt2#74, min(cd_dep_employed_count#30)#64 AS min(cd_dep_employed_count)#75, max(cd_dep_employed_count#30)#65 AS max(cd_dep_employed_count)#76, avg(cd_dep_employed_count#30)#66 AS avg(cd_dep_employed_count)#77, cd_dep_college_count#31, count(1)#60 AS cnt3#78, min(cd_dep_college_count#31)#67 AS min(cd_dep_college_count)#79, max(cd_dep_college_count#31)#68 AS max(cd_dep_college_count)#80, avg(cd_dep_college_count#31)#69 AS avg(cd_dep_college_count)#81, cd_dep_count#29 AS aggOrder#82]

(60) TakeOrderedAndProject
Input [18]: [ca_state#23, cd_gender#27, cd_marital_status#28, cnt1#70, min(cd_dep_count)#71, max(cd_dep_count)#72, avg(cd_dep_count)#73, cd_dep_employed_count#30, cnt2#74, min(cd_dep_employed_count)#75, max(cd_dep_employed_count)#76, avg(cd_dep_employed_count)#77, cd_dep_college_count#31, cnt3#78, min(cd_dep_college_count)#79, max(cd_dep_college_count)#80, avg(cd_dep_college_count)#81, aggOrder#82]
Arguments: 100, [ca_state#23 ASC NULLS FIRST, cd_gender#27 ASC NULLS FIRST, cd_marital_status#28 ASC NULLS FIRST, aggOrder#82 ASC NULLS FIRST, cd_dep_employed_count#30 ASC NULLS FIRST, cd_dep_college_count#31 ASC NULLS FIRST], [ca_state#23, cd_gender#27, cd_marital_status#28, cnt1#70, min(cd_dep_count)#71, max(cd_dep_count)#72, avg(cd_dep_count)#73, cd_dep_employed_count#30, cnt2#74, min(cd_dep_employed_count)#75, max(cd_dep_employed_count)#76, avg(cd_dep_employed_count)#77, cd_dep_college_count#31, cnt3#78, min(cd_dep_college_count)#79, max(cd_dep_college_count)#80, avg(cd_dep_college_count)#81]

