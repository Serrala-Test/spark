== Physical Plan ==
TakeOrderedAndProject (53)
+- * Project (52)
   +- * SortMergeJoin Inner (51)
      :- * Sort (48)
      :  +- Exchange (47)
      :     +- * Project (46)
      :        +- * SortMergeJoin Inner (45)
      :           :- * Sort (38)
      :           :  +- Exchange (37)
      :           :     +- * HashAggregate (36)
      :           :        +- * HashAggregate (35)
      :           :           +- * Project (34)
      :           :              +- * SortMergeJoin Inner (33)
      :           :                 :- * Sort (26)
      :           :                 :  +- Exchange (25)
      :           :                 :     +- * Project (24)
      :           :                 :        +- * BroadcastHashJoin Inner BuildRight (23)
      :           :                 :           :- * Project (17)
      :           :                 :           :  +- * BroadcastHashJoin Inner BuildRight (16)
      :           :                 :           :     :- * Project (10)
      :           :                 :           :     :  +- * BroadcastHashJoin Inner BuildRight (9)
      :           :                 :           :     :     :- * Filter (3)
      :           :                 :           :     :     :  +- * ColumnarToRow (2)
      :           :                 :           :     :     :     +- Scan parquet default.store_sales (1)
      :           :                 :           :     :     +- BroadcastExchange (8)
      :           :                 :           :     :        +- * Project (7)
      :           :                 :           :     :           +- * Filter (6)
      :           :                 :           :     :              +- * ColumnarToRow (5)
      :           :                 :           :     :                 +- Scan parquet default.date_dim (4)
      :           :                 :           :     +- BroadcastExchange (15)
      :           :                 :           :        +- * Project (14)
      :           :                 :           :           +- * Filter (13)
      :           :                 :           :              +- * ColumnarToRow (12)
      :           :                 :           :                 +- Scan parquet default.store (11)
      :           :                 :           +- BroadcastExchange (22)
      :           :                 :              +- * Project (21)
      :           :                 :                 +- * Filter (20)
      :           :                 :                    +- * ColumnarToRow (19)
      :           :                 :                       +- Scan parquet default.household_demographics (18)
      :           :                 +- * Sort (32)
      :           :                    +- Exchange (31)
      :           :                       +- * Project (30)
      :           :                          +- * Filter (29)
      :           :                             +- * ColumnarToRow (28)
      :           :                                +- Scan parquet default.customer_address (27)
      :           +- * Sort (44)
      :              +- Exchange (43)
      :                 +- * Project (42)
      :                    +- * Filter (41)
      :                       +- * ColumnarToRow (40)
      :                          +- Scan parquet default.customer (39)
      +- * Sort (50)
         +- ReusedExchange (49)


(1) Scan parquet default.store_sales
Output [8]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_coupon_amt:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [8]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]

(3) Filter [codegen id : 4]
Input [8]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]
Condition : ((((isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_store_sk#5)) AND isnotnull(ss_hdemo_sk#3)) AND isnotnull(ss_addr_sk#4)) AND isnotnull(ss_customer_sk#2))

(4) Scan parquet default.date_dim
Output [3]: [d_date_sk#9, d_year#10, d_dow#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_dow, [6,0]), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#9, d_year#10, d_dow#11]

(6) Filter [codegen id : 1]
Input [3]: [d_date_sk#9, d_year#10, d_dow#11]
Condition : ((d_dow#11 IN (6,0) AND d_year#10 IN (1999,2000,2001)) AND isnotnull(d_date_sk#9))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#9]
Input [3]: [d_date_sk#9, d_year#10, d_dow#11]

(8) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#9]
Join condition: None

(10) Project [codegen id : 4]
Output [7]: [ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]
Input [9]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, d_date_sk#9]

(11) Scan parquet default.store
Output [2]: [s_store_sk#13, s_city#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_city:string>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [s_store_sk#13, s_city#14]

(13) Filter [codegen id : 2]
Input [2]: [s_store_sk#13, s_city#14]
Condition : (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_city#14, 60, false, true) IN (Fairview,Midway) AND isnotnull(s_store_sk#13))

(14) Project [codegen id : 2]
Output [1]: [s_store_sk#13]
Input [2]: [s_store_sk#13, s_city#14]

(15) BroadcastExchange
Input [1]: [s_store_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15]

(16) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#5]
Right keys [1]: [s_store_sk#13]
Join condition: None

(17) Project [codegen id : 4]
Output [6]: [ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]
Input [8]: [ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, s_store_sk#13]

(18) Scan parquet default.household_demographics
Output [3]: [hd_demo_sk#16, hd_dep_count#17, hd_vehicle_count#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [Or(EqualTo(hd_dep_count,4),EqualTo(hd_vehicle_count,3)), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>

(19) ColumnarToRow [codegen id : 3]
Input [3]: [hd_demo_sk#16, hd_dep_count#17, hd_vehicle_count#18]

(20) Filter [codegen id : 3]
Input [3]: [hd_demo_sk#16, hd_dep_count#17, hd_vehicle_count#18]
Condition : (((hd_dep_count#17 = 4) OR (hd_vehicle_count#18 = 3)) AND isnotnull(hd_demo_sk#16))

(21) Project [codegen id : 3]
Output [1]: [hd_demo_sk#16]
Input [3]: [hd_demo_sk#16, hd_dep_count#17, hd_vehicle_count#18]

(22) BroadcastExchange
Input [1]: [hd_demo_sk#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#19]

(23) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_hdemo_sk#3]
Right keys [1]: [hd_demo_sk#16]
Join condition: None

(24) Project [codegen id : 4]
Output [5]: [ss_customer_sk#2, ss_addr_sk#4, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]
Input [7]: [ss_customer_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, hd_demo_sk#16]

(25) Exchange
Input [5]: [ss_customer_sk#2, ss_addr_sk#4, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]
Arguments: hashpartitioning(ss_addr_sk#4, 5), ENSURE_REQUIREMENTS, [id=#20]

(26) Sort [codegen id : 5]
Input [5]: [ss_customer_sk#2, ss_addr_sk#4, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8]
Arguments: [ss_addr_sk#4 ASC NULLS FIRST], false, 0

(27) Scan parquet default.customer_address
Output [2]: [ca_address_sk#21, ca_city#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_city:string>

(28) ColumnarToRow [codegen id : 6]
Input [2]: [ca_address_sk#21, ca_city#22]

(29) Filter [codegen id : 6]
Input [2]: [ca_address_sk#21, ca_city#22]
Condition : (isnotnull(ca_address_sk#21) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_city#22, 60, false, true)))

(30) Project [codegen id : 6]
Output [2]: [ca_address_sk#21, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_city#22, 60, false, true) AS ca_city#23]
Input [2]: [ca_address_sk#21, ca_city#22]

(31) Exchange
Input [2]: [ca_address_sk#21, ca_city#23]
Arguments: hashpartitioning(ca_address_sk#21, 5), ENSURE_REQUIREMENTS, [id=#24]

(32) Sort [codegen id : 7]
Input [2]: [ca_address_sk#21, ca_city#23]
Arguments: [ca_address_sk#21 ASC NULLS FIRST], false, 0

(33) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_addr_sk#4]
Right keys [1]: [ca_address_sk#21]
Join condition: None

(34) Project [codegen id : 8]
Output [6]: [ss_customer_sk#2, ss_addr_sk#4, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, ca_city#23]
Input [7]: [ss_customer_sk#2, ss_addr_sk#4, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, ca_address_sk#21, ca_city#23]

(35) HashAggregate [codegen id : 8]
Input [6]: [ss_customer_sk#2, ss_addr_sk#4, ss_ticket_number#6, ss_coupon_amt#7, ss_net_profit#8, ca_city#23]
Keys [4]: [ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, ca_city#23]
Functions [2]: [partial_sum(UnscaledValue(ss_coupon_amt#7)), partial_sum(UnscaledValue(ss_net_profit#8))]
Aggregate Attributes [2]: [sum#25, sum#26]
Results [6]: [ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, ca_city#23, sum#27, sum#28]

(36) HashAggregate [codegen id : 8]
Input [6]: [ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, ca_city#23, sum#27, sum#28]
Keys [4]: [ss_ticket_number#6, ss_customer_sk#2, ss_addr_sk#4, ca_city#23]
Functions [2]: [sum(UnscaledValue(ss_coupon_amt#7)), sum(UnscaledValue(ss_net_profit#8))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_coupon_amt#7))#29, sum(UnscaledValue(ss_net_profit#8))#30]
Results [5]: [ss_ticket_number#6, ss_customer_sk#2, ca_city#23 AS bought_city#31, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#7))#29,17,2) AS amt#32, MakeDecimal(sum(UnscaledValue(ss_net_profit#8))#30,17,2) AS profit#33]

(37) Exchange
Input [5]: [ss_ticket_number#6, ss_customer_sk#2, bought_city#31, amt#32, profit#33]
Arguments: hashpartitioning(ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#34]

(38) Sort [codegen id : 9]
Input [5]: [ss_ticket_number#6, ss_customer_sk#2, bought_city#31, amt#32, profit#33]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(39) Scan parquet default.customer
Output [4]: [c_customer_sk#35, c_current_addr_sk#36, c_first_name#37, c_last_name#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string>

(40) ColumnarToRow [codegen id : 10]
Input [4]: [c_customer_sk#35, c_current_addr_sk#36, c_first_name#37, c_last_name#38]

(41) Filter [codegen id : 10]
Input [4]: [c_customer_sk#35, c_current_addr_sk#36, c_first_name#37, c_last_name#38]
Condition : (isnotnull(c_customer_sk#35) AND isnotnull(c_current_addr_sk#36))

(42) Project [codegen id : 10]
Output [4]: [c_customer_sk#35, c_current_addr_sk#36, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#37, 20, false, true) AS c_first_name#39, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#38, 30, false, true) AS c_last_name#40]
Input [4]: [c_customer_sk#35, c_current_addr_sk#36, c_first_name#37, c_last_name#38]

(43) Exchange
Input [4]: [c_customer_sk#35, c_current_addr_sk#36, c_first_name#39, c_last_name#40]
Arguments: hashpartitioning(c_customer_sk#35, 5), ENSURE_REQUIREMENTS, [id=#41]

(44) Sort [codegen id : 11]
Input [4]: [c_customer_sk#35, c_current_addr_sk#36, c_first_name#39, c_last_name#40]
Arguments: [c_customer_sk#35 ASC NULLS FIRST], false, 0

(45) SortMergeJoin [codegen id : 12]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#35]
Join condition: None

(46) Project [codegen id : 12]
Output [7]: [ss_ticket_number#6, bought_city#31, amt#32, profit#33, c_current_addr_sk#36, c_first_name#39, c_last_name#40]
Input [9]: [ss_ticket_number#6, ss_customer_sk#2, bought_city#31, amt#32, profit#33, c_customer_sk#35, c_current_addr_sk#36, c_first_name#39, c_last_name#40]

(47) Exchange
Input [7]: [ss_ticket_number#6, bought_city#31, amt#32, profit#33, c_current_addr_sk#36, c_first_name#39, c_last_name#40]
Arguments: hashpartitioning(c_current_addr_sk#36, 5), ENSURE_REQUIREMENTS, [id=#42]

(48) Sort [codegen id : 13]
Input [7]: [ss_ticket_number#6, bought_city#31, amt#32, profit#33, c_current_addr_sk#36, c_first_name#39, c_last_name#40]
Arguments: [c_current_addr_sk#36 ASC NULLS FIRST], false, 0

(49) ReusedExchange [Reuses operator id: 31]
Output [2]: [ca_address_sk#21, ca_city#43]

(50) Sort [codegen id : 15]
Input [2]: [ca_address_sk#21, ca_city#43]
Arguments: [ca_address_sk#21 ASC NULLS FIRST], false, 0

(51) SortMergeJoin [codegen id : 16]
Left keys [1]: [c_current_addr_sk#36]
Right keys [1]: [ca_address_sk#21]
Join condition: NOT (ca_city#43 = bought_city#31)

(52) Project [codegen id : 16]
Output [7]: [c_last_name#40, c_first_name#39, ca_city#43, bought_city#31, ss_ticket_number#6, amt#32, profit#33]
Input [9]: [ss_ticket_number#6, bought_city#31, amt#32, profit#33, c_current_addr_sk#36, c_first_name#39, c_last_name#40, ca_address_sk#21, ca_city#43]

(53) TakeOrderedAndProject
Input [7]: [c_last_name#40, c_first_name#39, ca_city#43, bought_city#31, ss_ticket_number#6, amt#32, profit#33]
Arguments: 100, [c_last_name#40 ASC NULLS FIRST, c_first_name#39 ASC NULLS FIRST, ca_city#43 ASC NULLS FIRST, bought_city#31 ASC NULLS FIRST, ss_ticket_number#6 ASC NULLS FIRST], [c_last_name#40, c_first_name#39, ca_city#43, bought_city#31, ss_ticket_number#6, amt#32, profit#33]

