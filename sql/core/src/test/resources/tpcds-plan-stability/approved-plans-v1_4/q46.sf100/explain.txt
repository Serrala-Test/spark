== Physical Plan ==
TakeOrderedAndProject (46)
+- * Project (45)
   +- * SortMergeJoin Inner (44)
      :- * Sort (13)
      :  +- Exchange (12)
      :     +- * Project (11)
      :        +- * SortMergeJoin Inner (10)
      :           :- * Sort (4)
      :           :  +- Exchange (3)
      :           :     +- * ColumnarToRow (2)
      :           :        +- Scan parquet default.customer (1)
      :           +- * Sort (9)
      :              +- Exchange (8)
      :                 +- * Filter (7)
      :                    +- * ColumnarToRow (6)
      :                       +- Scan parquet default.customer_address (5)
      +- * Sort (43)
         +- Exchange (42)
            +- * HashAggregate (41)
               +- * HashAggregate (40)
                  +- * Project (39)
                     +- * SortMergeJoin Inner (38)
                        :- * Sort (35)
                        :  +- Exchange (34)
                        :     +- * Project (33)
                        :        +- * BroadcastHashJoin Inner BuildRight (32)
                        :           :- * Project (26)
                        :           :  +- * BroadcastHashJoin Inner BuildRight (25)
                        :           :     :- * Project (19)
                        :           :     :  +- * BroadcastHashJoin Inner BuildRight (18)
                        :           :     :     :- * Filter (16)
                        :           :     :     :  +- * ColumnarToRow (15)
                        :           :     :     :     +- Scan parquet default.store_sales (14)
                        :           :     :     +- ReusedExchange (17)
                        :           :     +- BroadcastExchange (24)
                        :           :        +- * Project (23)
                        :           :           +- * Filter (22)
                        :           :              +- * ColumnarToRow (21)
                        :           :                 +- Scan parquet default.store (20)
                        :           +- BroadcastExchange (31)
                        :              +- * Project (30)
                        :                 +- * Filter (29)
                        :                    +- * ColumnarToRow (28)
                        :                       +- Scan parquet default.household_demographics (27)
                        +- * Sort (37)
                           +- ReusedExchange (36)


(1) Scan parquet default.customer
Output [4]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4]

(3) Exchange
Input [4]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4]
Arguments: hashpartitioning(c_current_addr_sk#2, 5), ENSURE_REQUIREMENTS, [id=#5]

(4) Sort [codegen id : 2]
Input [4]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4]
Arguments: [c_current_addr_sk#2 ASC NULLS FIRST], false, 0

(5) Scan parquet default.customer_address
Output [2]: [ca_address_sk#6, ca_city#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_city)]
ReadSchema: struct<ca_address_sk:int,ca_city:string>

(6) ColumnarToRow [codegen id : 3]
Input [2]: [ca_address_sk#6, ca_city#7]

(7) Filter [codegen id : 3]
Input [2]: [ca_address_sk#6, ca_city#7]
Condition : isnotnull(ca_city#7)

(8) Exchange
Input [2]: [ca_address_sk#6, ca_city#7]
Arguments: hashpartitioning(ca_address_sk#6, 5), ENSURE_REQUIREMENTS, [id=#8]

(9) Sort [codegen id : 4]
Input [2]: [ca_address_sk#6, ca_city#7]
Arguments: [ca_address_sk#6 ASC NULLS FIRST], false, 0

(10) SortMergeJoin [codegen id : 5]
Left keys [1]: [c_current_addr_sk#2]
Right keys [1]: [ca_address_sk#6]
Join condition: None

(11) Project [codegen id : 5]
Output [4]: [c_customer_sk#1, c_first_name#3, c_last_name#4, ca_city#7]
Input [6]: [c_customer_sk#1, c_current_addr_sk#2, c_first_name#3, c_last_name#4, ca_address_sk#6, ca_city#7]

(12) Exchange
Input [4]: [c_customer_sk#1, c_first_name#3, c_last_name#4, ca_city#7]
Arguments: hashpartitioning(c_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#9]

(13) Sort [codegen id : 6]
Input [4]: [c_customer_sk#1, c_first_name#3, c_last_name#4, ca_city#7]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(14) Scan parquet default.store_sales
Output [8]: [ss_customer_sk#10, ss_hdemo_sk#11, ss_addr_sk#12, ss_store_sk#13, ss_ticket_number#14, ss_coupon_amt#15, ss_net_profit#16, ss_sold_date_sk#17]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#17), dynamicpruningexpression(ss_sold_date_sk#17 IN dynamicpruning#18)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_coupon_amt:decimal(7,2),ss_net_profit:decimal(7,2)>

(15) ColumnarToRow [codegen id : 10]
Input [8]: [ss_customer_sk#10, ss_hdemo_sk#11, ss_addr_sk#12, ss_store_sk#13, ss_ticket_number#14, ss_coupon_amt#15, ss_net_profit#16, ss_sold_date_sk#17]

(16) Filter [codegen id : 10]
Input [8]: [ss_customer_sk#10, ss_hdemo_sk#11, ss_addr_sk#12, ss_store_sk#13, ss_ticket_number#14, ss_coupon_amt#15, ss_net_profit#16, ss_sold_date_sk#17]
Condition : (((isnotnull(ss_store_sk#13) AND isnotnull(ss_hdemo_sk#11)) AND isnotnull(ss_addr_sk#12)) AND isnotnull(ss_customer_sk#10))

(17) ReusedExchange [Reuses operator id: 51]
Output [1]: [d_date_sk#19]

(18) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#17]
Right keys [1]: [d_date_sk#19]
Join condition: None

(19) Project [codegen id : 10]
Output [7]: [ss_customer_sk#10, ss_hdemo_sk#11, ss_addr_sk#12, ss_store_sk#13, ss_ticket_number#14, ss_coupon_amt#15, ss_net_profit#16]
Input [9]: [ss_customer_sk#10, ss_hdemo_sk#11, ss_addr_sk#12, ss_store_sk#13, ss_ticket_number#14, ss_coupon_amt#15, ss_net_profit#16, ss_sold_date_sk#17, d_date_sk#19]

(20) Scan parquet default.store
Output [2]: [s_store_sk#20, s_city#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [In(s_city, [Fairview,Midway])]
ReadSchema: struct<s_store_sk:int,s_city:string>

(21) ColumnarToRow [codegen id : 8]
Input [2]: [s_store_sk#20, s_city#21]

(22) Filter [codegen id : 8]
Input [2]: [s_store_sk#20, s_city#21]
Condition : s_city#21 IN (Fairview,Midway)

(23) Project [codegen id : 8]
Output [1]: [s_store_sk#20]
Input [2]: [s_store_sk#20, s_city#21]

(24) BroadcastExchange
Input [1]: [s_store_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#22]

(25) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_store_sk#13]
Right keys [1]: [s_store_sk#20]
Join condition: None

(26) Project [codegen id : 10]
Output [6]: [ss_customer_sk#10, ss_hdemo_sk#11, ss_addr_sk#12, ss_ticket_number#14, ss_coupon_amt#15, ss_net_profit#16]
Input [8]: [ss_customer_sk#10, ss_hdemo_sk#11, ss_addr_sk#12, ss_store_sk#13, ss_ticket_number#14, ss_coupon_amt#15, ss_net_profit#16, s_store_sk#20]

(27) Scan parquet default.household_demographics
Output [3]: [hd_demo_sk#23, hd_dep_count#24, hd_vehicle_count#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [Or(EqualTo(hd_dep_count,4),EqualTo(hd_vehicle_count,3))]
ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>

(28) ColumnarToRow [codegen id : 9]
Input [3]: [hd_demo_sk#23, hd_dep_count#24, hd_vehicle_count#25]

(29) Filter [codegen id : 9]
Input [3]: [hd_demo_sk#23, hd_dep_count#24, hd_vehicle_count#25]
Condition : ((hd_dep_count#24 = 4) OR (hd_vehicle_count#25 = 3))

(30) Project [codegen id : 9]
Output [1]: [hd_demo_sk#23]
Input [3]: [hd_demo_sk#23, hd_dep_count#24, hd_vehicle_count#25]

(31) BroadcastExchange
Input [1]: [hd_demo_sk#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#26]

(32) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_hdemo_sk#11]
Right keys [1]: [hd_demo_sk#23]
Join condition: None

(33) Project [codegen id : 10]
Output [5]: [ss_customer_sk#10, ss_addr_sk#12, ss_ticket_number#14, ss_coupon_amt#15, ss_net_profit#16]
Input [7]: [ss_customer_sk#10, ss_hdemo_sk#11, ss_addr_sk#12, ss_ticket_number#14, ss_coupon_amt#15, ss_net_profit#16, hd_demo_sk#23]

(34) Exchange
Input [5]: [ss_customer_sk#10, ss_addr_sk#12, ss_ticket_number#14, ss_coupon_amt#15, ss_net_profit#16]
Arguments: hashpartitioning(ss_addr_sk#12, 5), ENSURE_REQUIREMENTS, [id=#27]

(35) Sort [codegen id : 11]
Input [5]: [ss_customer_sk#10, ss_addr_sk#12, ss_ticket_number#14, ss_coupon_amt#15, ss_net_profit#16]
Arguments: [ss_addr_sk#12 ASC NULLS FIRST], false, 0

(36) ReusedExchange [Reuses operator id: 8]
Output [2]: [ca_address_sk#28, ca_city#29]

(37) Sort [codegen id : 13]
Input [2]: [ca_address_sk#28, ca_city#29]
Arguments: [ca_address_sk#28 ASC NULLS FIRST], false, 0

(38) SortMergeJoin [codegen id : 14]
Left keys [1]: [ss_addr_sk#12]
Right keys [1]: [ca_address_sk#28]
Join condition: None

(39) Project [codegen id : 14]
Output [6]: [ss_customer_sk#10, ss_addr_sk#12, ss_ticket_number#14, ss_coupon_amt#15, ss_net_profit#16, ca_city#29]
Input [7]: [ss_customer_sk#10, ss_addr_sk#12, ss_ticket_number#14, ss_coupon_amt#15, ss_net_profit#16, ca_address_sk#28, ca_city#29]

(40) HashAggregate [codegen id : 14]
Input [6]: [ss_customer_sk#10, ss_addr_sk#12, ss_ticket_number#14, ss_coupon_amt#15, ss_net_profit#16, ca_city#29]
Keys [4]: [ss_ticket_number#14, ss_customer_sk#10, ss_addr_sk#12, ca_city#29]
Functions [2]: [partial_sum(UnscaledValue(ss_coupon_amt#15)), partial_sum(UnscaledValue(ss_net_profit#16))]
Aggregate Attributes [2]: [sum#30, sum#31]
Results [6]: [ss_ticket_number#14, ss_customer_sk#10, ss_addr_sk#12, ca_city#29, sum#32, sum#33]

(41) HashAggregate [codegen id : 14]
Input [6]: [ss_ticket_number#14, ss_customer_sk#10, ss_addr_sk#12, ca_city#29, sum#32, sum#33]
Keys [4]: [ss_ticket_number#14, ss_customer_sk#10, ss_addr_sk#12, ca_city#29]
Functions [2]: [sum(UnscaledValue(ss_coupon_amt#15)), sum(UnscaledValue(ss_net_profit#16))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_coupon_amt#15))#34, sum(UnscaledValue(ss_net_profit#16))#35]
Results [5]: [ss_ticket_number#14, ss_customer_sk#10, ca_city#29 AS bought_city#36, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#15))#34,17,2) AS amt#37, MakeDecimal(sum(UnscaledValue(ss_net_profit#16))#35,17,2) AS profit#38]

(42) Exchange
Input [5]: [ss_ticket_number#14, ss_customer_sk#10, bought_city#36, amt#37, profit#38]
Arguments: hashpartitioning(ss_customer_sk#10, 5), ENSURE_REQUIREMENTS, [id=#39]

(43) Sort [codegen id : 15]
Input [5]: [ss_ticket_number#14, ss_customer_sk#10, bought_city#36, amt#37, profit#38]
Arguments: [ss_customer_sk#10 ASC NULLS FIRST], false, 0

(44) SortMergeJoin [codegen id : 16]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#10]
Join condition: NOT (ca_city#7 = bought_city#36)

(45) Project [codegen id : 16]
Output [7]: [c_last_name#4, c_first_name#3, ca_city#7, bought_city#36, ss_ticket_number#14, amt#37, profit#38]
Input [9]: [c_customer_sk#1, c_first_name#3, c_last_name#4, ca_city#7, ss_ticket_number#14, ss_customer_sk#10, bought_city#36, amt#37, profit#38]

(46) TakeOrderedAndProject
Input [7]: [c_last_name#4, c_first_name#3, ca_city#7, bought_city#36, ss_ticket_number#14, amt#37, profit#38]
Arguments: 100, [c_last_name#4 ASC NULLS FIRST, c_first_name#3 ASC NULLS FIRST, ca_city#7 ASC NULLS FIRST, bought_city#36 ASC NULLS FIRST, ss_ticket_number#14 ASC NULLS FIRST], [c_last_name#4, c_first_name#3, ca_city#7, bought_city#36, ss_ticket_number#14, amt#37, profit#38]

===== Subqueries =====

Subquery:1 Hosting operator id = 14 Hosting Expression = ss_sold_date_sk#17 IN dynamicpruning#18
BroadcastExchange (51)
+- * Project (50)
   +- * Filter (49)
      +- * ColumnarToRow (48)
         +- Scan parquet default.date_dim (47)


(47) Scan parquet default.date_dim
Output [3]: [d_date_sk#19, d_year#40, d_dow#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_dow, [0,6]), In(d_year, [1999,2000,2001])]
ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int>

(48) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#19, d_year#40, d_dow#41]

(49) Filter [codegen id : 1]
Input [3]: [d_date_sk#19, d_year#40, d_dow#41]
Condition : (d_dow#41 IN (6,0) AND d_year#40 IN (1999,2000,2001))

(50) Project [codegen id : 1]
Output [1]: [d_date_sk#19]
Input [3]: [d_date_sk#19, d_year#40, d_dow#41]

(51) BroadcastExchange
Input [1]: [d_date_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#42]


