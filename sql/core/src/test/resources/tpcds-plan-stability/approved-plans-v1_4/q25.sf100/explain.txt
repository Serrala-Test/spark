== Physical Plan ==
TakeOrderedAndProject (57)
+- * HashAggregate (56)
   +- Exchange (55)
      +- * HashAggregate (54)
         +- * Project (53)
            +- * BroadcastHashJoin Inner BuildRight (52)
               :- * Project (46)
               :  +- * BroadcastHashJoin Inner BuildRight (45)
               :     :- * Project (43)
               :     :  +- * BroadcastHashJoin Inner BuildRight (42)
               :     :     :- * Project (37)
               :     :     :  +- * SortMergeJoin Inner (36)
               :     :     :     :- * Sort (30)
               :     :     :     :  +- Exchange (29)
               :     :     :     :     +- * Project (28)
               :     :     :     :        +- * BroadcastHashJoin Inner BuildRight (27)
               :     :     :     :           :- * Project (21)
               :     :     :     :           :  +- * SortMergeJoin Inner (20)
               :     :     :     :           :     :- * Sort (14)
               :     :     :     :           :     :  +- Exchange (13)
               :     :     :     :           :     :     +- * Project (12)
               :     :     :     :           :     :        +- * SortMergeJoin Inner (11)
               :     :     :     :           :     :           :- * Sort (5)
               :     :     :     :           :     :           :  +- Exchange (4)
               :     :     :     :           :     :           :     +- * Filter (3)
               :     :     :     :           :     :           :        +- * ColumnarToRow (2)
               :     :     :     :           :     :           :           +- Scan parquet default.store_sales (1)
               :     :     :     :           :     :           +- * Sort (10)
               :     :     :     :           :     :              +- Exchange (9)
               :     :     :     :           :     :                 +- * Filter (8)
               :     :     :     :           :     :                    +- * ColumnarToRow (7)
               :     :     :     :           :     :                       +- Scan parquet default.store_returns (6)
               :     :     :     :           :     +- * Sort (19)
               :     :     :     :           :        +- Exchange (18)
               :     :     :     :           :           +- * Filter (17)
               :     :     :     :           :              +- * ColumnarToRow (16)
               :     :     :     :           :                 +- Scan parquet default.catalog_sales (15)
               :     :     :     :           +- BroadcastExchange (26)
               :     :     :     :              +- * Project (25)
               :     :     :     :                 +- * Filter (24)
               :     :     :     :                    +- * ColumnarToRow (23)
               :     :     :     :                       +- Scan parquet default.date_dim (22)
               :     :     :     +- * Sort (35)
               :     :     :        +- Exchange (34)
               :     :     :           +- * Filter (33)
               :     :     :              +- * ColumnarToRow (32)
               :     :     :                 +- Scan parquet default.item (31)
               :     :     +- BroadcastExchange (41)
               :     :        +- * Filter (40)
               :     :           +- * ColumnarToRow (39)
               :     :              +- Scan parquet default.store (38)
               :     +- ReusedExchange (44)
               +- BroadcastExchange (51)
                  +- * Project (50)
                     +- * Filter (49)
                        +- * ColumnarToRow (48)
                           +- Scan parquet default.date_dim (47)


(1) Scan parquet default.store_sales
Output [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_net_profit#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_net_profit#6]

(3) Filter [codegen id : 1]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_net_profit#6]
Condition : ((((isnotnull(ss_customer_sk#3) AND isnotnull(ss_item_sk#2)) AND isnotnull(ss_ticket_number#5)) AND isnotnull(ss_sold_date_sk#1)) AND isnotnull(ss_store_sk#4))

(4) Exchange
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_net_profit#6]
Arguments: hashpartitioning(cast(ss_customer_sk#3 as bigint), cast(ss_item_sk#2 as bigint), cast(ss_ticket_number#5 as bigint), 5), ENSURE_REQUIREMENTS, [id=#7]

(5) Sort [codegen id : 2]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_net_profit#6]
Arguments: [cast(ss_customer_sk#3 as bigint) ASC NULLS FIRST, cast(ss_item_sk#2 as bigint) ASC NULLS FIRST, cast(ss_ticket_number#5 as bigint) ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_returns
Output [5]: [sr_returned_date_sk#8, sr_item_sk#9, sr_customer_sk#10, sr_ticket_number#11, sr_net_loss#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number), IsNotNull(sr_returned_date_sk)]
ReadSchema: struct<sr_returned_date_sk:bigint,sr_item_sk:bigint,sr_customer_sk:bigint,sr_ticket_number:bigint,sr_net_loss:decimal(7,2)>

(7) ColumnarToRow [codegen id : 3]
Input [5]: [sr_returned_date_sk#8, sr_item_sk#9, sr_customer_sk#10, sr_ticket_number#11, sr_net_loss#12]

(8) Filter [codegen id : 3]
Input [5]: [sr_returned_date_sk#8, sr_item_sk#9, sr_customer_sk#10, sr_ticket_number#11, sr_net_loss#12]
Condition : (((isnotnull(sr_customer_sk#10) AND isnotnull(sr_item_sk#9)) AND isnotnull(sr_ticket_number#11)) AND isnotnull(sr_returned_date_sk#8))

(9) Exchange
Input [5]: [sr_returned_date_sk#8, sr_item_sk#9, sr_customer_sk#10, sr_ticket_number#11, sr_net_loss#12]
Arguments: hashpartitioning(sr_customer_sk#10, sr_item_sk#9, sr_ticket_number#11, 5), ENSURE_REQUIREMENTS, [id=#13]

(10) Sort [codegen id : 4]
Input [5]: [sr_returned_date_sk#8, sr_item_sk#9, sr_customer_sk#10, sr_ticket_number#11, sr_net_loss#12]
Arguments: [sr_customer_sk#10 ASC NULLS FIRST, sr_item_sk#9 ASC NULLS FIRST, sr_ticket_number#11 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 5]
Left keys [3]: [cast(ss_customer_sk#3 as bigint), cast(ss_item_sk#2 as bigint), cast(ss_ticket_number#5 as bigint)]
Right keys [3]: [sr_customer_sk#10, sr_item_sk#9, sr_ticket_number#11]
Join condition: None

(12) Project [codegen id : 5]
Output [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_net_profit#6, sr_returned_date_sk#8, sr_item_sk#9, sr_customer_sk#10, sr_net_loss#12]
Input [11]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_net_profit#6, sr_returned_date_sk#8, sr_item_sk#9, sr_customer_sk#10, sr_ticket_number#11, sr_net_loss#12]

(13) Exchange
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_net_profit#6, sr_returned_date_sk#8, sr_item_sk#9, sr_customer_sk#10, sr_net_loss#12]
Arguments: hashpartitioning(sr_customer_sk#10, sr_item_sk#9, 5), ENSURE_REQUIREMENTS, [id=#14]

(14) Sort [codegen id : 6]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_net_profit#6, sr_returned_date_sk#8, sr_item_sk#9, sr_customer_sk#10, sr_net_loss#12]
Arguments: [sr_customer_sk#10 ASC NULLS FIRST, sr_item_sk#9 ASC NULLS FIRST], false, 0

(15) Scan parquet default.catalog_sales
Output [4]: [cs_sold_date_sk#15, cs_bill_customer_sk#16, cs_item_sk#17, cs_net_profit#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_net_profit:decimal(7,2)>

(16) ColumnarToRow [codegen id : 7]
Input [4]: [cs_sold_date_sk#15, cs_bill_customer_sk#16, cs_item_sk#17, cs_net_profit#18]

(17) Filter [codegen id : 7]
Input [4]: [cs_sold_date_sk#15, cs_bill_customer_sk#16, cs_item_sk#17, cs_net_profit#18]
Condition : ((isnotnull(cs_bill_customer_sk#16) AND isnotnull(cs_item_sk#17)) AND isnotnull(cs_sold_date_sk#15))

(18) Exchange
Input [4]: [cs_sold_date_sk#15, cs_bill_customer_sk#16, cs_item_sk#17, cs_net_profit#18]
Arguments: hashpartitioning(cast(cs_bill_customer_sk#16 as bigint), cast(cs_item_sk#17 as bigint), 5), ENSURE_REQUIREMENTS, [id=#19]

(19) Sort [codegen id : 8]
Input [4]: [cs_sold_date_sk#15, cs_bill_customer_sk#16, cs_item_sk#17, cs_net_profit#18]
Arguments: [cast(cs_bill_customer_sk#16 as bigint) ASC NULLS FIRST, cast(cs_item_sk#17 as bigint) ASC NULLS FIRST], false, 0

(20) SortMergeJoin [codegen id : 10]
Left keys [2]: [sr_customer_sk#10, sr_item_sk#9]
Right keys [2]: [cast(cs_bill_customer_sk#16 as bigint), cast(cs_item_sk#17 as bigint)]
Join condition: None

(21) Project [codegen id : 10]
Output [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_net_profit#6, sr_returned_date_sk#8, sr_net_loss#12, cs_sold_date_sk#15, cs_net_profit#18]
Input [12]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_net_profit#6, sr_returned_date_sk#8, sr_item_sk#9, sr_customer_sk#10, sr_net_loss#12, cs_sold_date_sk#15, cs_bill_customer_sk#16, cs_item_sk#17, cs_net_profit#18]

(22) Scan parquet default.date_dim
Output [3]: [d_date_sk#20, d_year#21, d_moy#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,10), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(23) ColumnarToRow [codegen id : 9]
Input [3]: [d_date_sk#20, d_year#21, d_moy#22]

(24) Filter [codegen id : 9]
Input [3]: [d_date_sk#20, d_year#21, d_moy#22]
Condition : (((((isnotnull(d_moy#22) AND isnotnull(d_year#21)) AND (d_moy#22 >= 4)) AND (d_moy#22 <= 10)) AND (d_year#21 = 2001)) AND isnotnull(d_date_sk#20))

(25) Project [codegen id : 9]
Output [1]: [d_date_sk#20]
Input [3]: [d_date_sk#20, d_year#21, d_moy#22]

(26) BroadcastExchange
Input [1]: [d_date_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#23]

(27) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [sr_returned_date_sk#8]
Right keys [1]: [cast(d_date_sk#20 as bigint)]
Join condition: None

(28) Project [codegen id : 10]
Output [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_net_profit#6, sr_net_loss#12, cs_sold_date_sk#15, cs_net_profit#18]
Input [9]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_net_profit#6, sr_returned_date_sk#8, sr_net_loss#12, cs_sold_date_sk#15, cs_net_profit#18, d_date_sk#20]

(29) Exchange
Input [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_net_profit#6, sr_net_loss#12, cs_sold_date_sk#15, cs_net_profit#18]
Arguments: hashpartitioning(ss_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#24]

(30) Sort [codegen id : 11]
Input [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_net_profit#6, sr_net_loss#12, cs_sold_date_sk#15, cs_net_profit#18]
Arguments: [ss_item_sk#2 ASC NULLS FIRST], false, 0

(31) Scan parquet default.item
Output [3]: [i_item_sk#25, i_item_id#26, i_item_desc#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>

(32) ColumnarToRow [codegen id : 12]
Input [3]: [i_item_sk#25, i_item_id#26, i_item_desc#27]

(33) Filter [codegen id : 12]
Input [3]: [i_item_sk#25, i_item_id#26, i_item_desc#27]
Condition : isnotnull(i_item_sk#25)

(34) Exchange
Input [3]: [i_item_sk#25, i_item_id#26, i_item_desc#27]
Arguments: hashpartitioning(i_item_sk#25, 5), ENSURE_REQUIREMENTS, [id=#28]

(35) Sort [codegen id : 13]
Input [3]: [i_item_sk#25, i_item_id#26, i_item_desc#27]
Arguments: [i_item_sk#25 ASC NULLS FIRST], false, 0

(36) SortMergeJoin [codegen id : 17]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#25]
Join condition: None

(37) Project [codegen id : 17]
Output [8]: [ss_sold_date_sk#1, ss_store_sk#4, ss_net_profit#6, sr_net_loss#12, cs_sold_date_sk#15, cs_net_profit#18, i_item_id#26, i_item_desc#27]
Input [10]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_net_profit#6, sr_net_loss#12, cs_sold_date_sk#15, cs_net_profit#18, i_item_sk#25, i_item_id#26, i_item_desc#27]

(38) Scan parquet default.store
Output [3]: [s_store_sk#29, s_store_id#30, s_store_name#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>

(39) ColumnarToRow [codegen id : 14]
Input [3]: [s_store_sk#29, s_store_id#30, s_store_name#31]

(40) Filter [codegen id : 14]
Input [3]: [s_store_sk#29, s_store_id#30, s_store_name#31]
Condition : isnotnull(s_store_sk#29)

(41) BroadcastExchange
Input [3]: [s_store_sk#29, s_store_id#30, s_store_name#31]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#32]

(42) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [s_store_sk#29]
Join condition: None

(43) Project [codegen id : 17]
Output [9]: [ss_sold_date_sk#1, ss_net_profit#6, sr_net_loss#12, cs_sold_date_sk#15, cs_net_profit#18, i_item_id#26, i_item_desc#27, s_store_id#30, s_store_name#31]
Input [11]: [ss_sold_date_sk#1, ss_store_sk#4, ss_net_profit#6, sr_net_loss#12, cs_sold_date_sk#15, cs_net_profit#18, i_item_id#26, i_item_desc#27, s_store_sk#29, s_store_id#30, s_store_name#31]

(44) ReusedExchange [Reuses operator id: 26]
Output [1]: [d_date_sk#33]

(45) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [cs_sold_date_sk#15]
Right keys [1]: [d_date_sk#33]
Join condition: None

(46) Project [codegen id : 17]
Output [8]: [ss_sold_date_sk#1, ss_net_profit#6, sr_net_loss#12, cs_net_profit#18, i_item_id#26, i_item_desc#27, s_store_id#30, s_store_name#31]
Input [10]: [ss_sold_date_sk#1, ss_net_profit#6, sr_net_loss#12, cs_sold_date_sk#15, cs_net_profit#18, i_item_id#26, i_item_desc#27, s_store_id#30, s_store_name#31, d_date_sk#33]

(47) Scan parquet default.date_dim
Output [3]: [d_date_sk#34, d_year#35, d_moy#36]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(48) ColumnarToRow [codegen id : 16]
Input [3]: [d_date_sk#34, d_year#35, d_moy#36]

(49) Filter [codegen id : 16]
Input [3]: [d_date_sk#34, d_year#35, d_moy#36]
Condition : ((((isnotnull(d_moy#36) AND isnotnull(d_year#35)) AND (d_moy#36 = 4)) AND (d_year#35 = 2001)) AND isnotnull(d_date_sk#34))

(50) Project [codegen id : 16]
Output [1]: [d_date_sk#34]
Input [3]: [d_date_sk#34, d_year#35, d_moy#36]

(51) BroadcastExchange
Input [1]: [d_date_sk#34]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#37]

(52) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#34]
Join condition: None

(53) Project [codegen id : 17]
Output [7]: [ss_net_profit#6, sr_net_loss#12, cs_net_profit#18, s_store_id#30, s_store_name#31, i_item_id#26, i_item_desc#27]
Input [9]: [ss_sold_date_sk#1, ss_net_profit#6, sr_net_loss#12, cs_net_profit#18, i_item_id#26, i_item_desc#27, s_store_id#30, s_store_name#31, d_date_sk#34]

(54) HashAggregate [codegen id : 17]
Input [7]: [ss_net_profit#6, sr_net_loss#12, cs_net_profit#18, s_store_id#30, s_store_name#31, i_item_id#26, i_item_desc#27]
Keys [4]: [i_item_id#26, i_item_desc#27, s_store_id#30, s_store_name#31]
Functions [3]: [partial_sum(UnscaledValue(ss_net_profit#6)), partial_sum(UnscaledValue(sr_net_loss#12)), partial_sum(UnscaledValue(cs_net_profit#18))]
Aggregate Attributes [3]: [sum#38, sum#39, sum#40]
Results [7]: [i_item_id#26, i_item_desc#27, s_store_id#30, s_store_name#31, sum#41, sum#42, sum#43]

(55) Exchange
Input [7]: [i_item_id#26, i_item_desc#27, s_store_id#30, s_store_name#31, sum#41, sum#42, sum#43]
Arguments: hashpartitioning(i_item_id#26, i_item_desc#27, s_store_id#30, s_store_name#31, 5), ENSURE_REQUIREMENTS, [id=#44]

(56) HashAggregate [codegen id : 18]
Input [7]: [i_item_id#26, i_item_desc#27, s_store_id#30, s_store_name#31, sum#41, sum#42, sum#43]
Keys [4]: [i_item_id#26, i_item_desc#27, s_store_id#30, s_store_name#31]
Functions [3]: [sum(UnscaledValue(ss_net_profit#6)), sum(UnscaledValue(sr_net_loss#12)), sum(UnscaledValue(cs_net_profit#18))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_net_profit#6))#45, sum(UnscaledValue(sr_net_loss#12))#46, sum(UnscaledValue(cs_net_profit#18))#47]
Results [7]: [i_item_id#26, i_item_desc#27, s_store_id#30, s_store_name#31, MakeDecimal(sum(UnscaledValue(ss_net_profit#6))#45,17,2) AS store_sales_profit#48, MakeDecimal(sum(UnscaledValue(sr_net_loss#12))#46,17,2) AS store_returns_loss#49, MakeDecimal(sum(UnscaledValue(cs_net_profit#18))#47,17,2) AS catalog_sales_profit#50]

(57) TakeOrderedAndProject
Input [7]: [i_item_id#26, i_item_desc#27, s_store_id#30, s_store_name#31, store_sales_profit#48, store_returns_loss#49, catalog_sales_profit#50]
Arguments: 100, [i_item_id#26 ASC NULLS FIRST, i_item_desc#27 ASC NULLS FIRST, s_store_id#30 ASC NULLS FIRST, s_store_name#31 ASC NULLS FIRST], [i_item_id#26, i_item_desc#27, s_store_id#30, s_store_name#31, store_sales_profit#48, store_returns_loss#49, catalog_sales_profit#50]

