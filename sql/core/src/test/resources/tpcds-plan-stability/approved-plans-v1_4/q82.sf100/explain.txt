== Physical Plan ==
TakeOrderedAndProject (32)
+- * HashAggregate (31)
   +- Exchange (30)
      +- * HashAggregate (29)
         +- * Project (28)
            +- * SortMergeJoin Inner (27)
               :- * Sort (20)
               :  +- Exchange (19)
               :     +- * Project (18)
               :        +- * BroadcastHashJoin Inner BuildLeft (17)
               :           :- BroadcastExchange (12)
               :           :  +- * Project (11)
               :           :     +- * BroadcastHashJoin Inner BuildRight (10)
               :           :        :- * Project (4)
               :           :        :  +- * Filter (3)
               :           :        :     +- * ColumnarToRow (2)
               :           :        :        +- Scan parquet default.item (1)
               :           :        +- BroadcastExchange (9)
               :           :           +- * Project (8)
               :           :              +- * Filter (7)
               :           :                 +- * ColumnarToRow (6)
               :           :                    +- Scan parquet default.inventory (5)
               :           +- * Project (16)
               :              +- * Filter (15)
               :                 +- * ColumnarToRow (14)
               :                    +- Scan parquet default.date_dim (13)
               +- * Sort (26)
                  +- Exchange (25)
                     +- * Project (24)
                        +- * Filter (23)
                           +- * ColumnarToRow (22)
                              +- Scan parquet default.store_sales (21)


(1) Scan parquet default.item
Output [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, i_manufact_id#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,62.00), LessThanOrEqual(i_current_price,92.00), In(i_manufact_id, [129,270,821,423]), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string,i_current_price:decimal(7,2),i_manufact_id:int>

(2) ColumnarToRow [codegen id : 2]
Input [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, i_manufact_id#5]

(3) Filter [codegen id : 2]
Input [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, i_manufact_id#5]
Condition : ((((isnotnull(i_current_price#4) AND (i_current_price#4 >= 62.00)) AND (i_current_price#4 <= 92.00)) AND i_manufact_id#5 IN (129,270,821,423)) AND isnotnull(i_item_sk#1))

(4) Project [codegen id : 2]
Output [4]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4]
Input [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, i_manufact_id#5]

(5) Scan parquet default.inventory
Output [3]: [inv_item_sk#6, inv_quantity_on_hand#7, inv_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(inv_date_sk#8), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(inv_quantity_on_hand), GreaterThanOrEqual(inv_quantity_on_hand,100), LessThanOrEqual(inv_quantity_on_hand,500), IsNotNull(inv_item_sk)]
ReadSchema: struct<inv_item_sk:int,inv_quantity_on_hand:int>

(6) ColumnarToRow [codegen id : 1]
Input [3]: [inv_item_sk#6, inv_quantity_on_hand#7, inv_date_sk#8]

(7) Filter [codegen id : 1]
Input [3]: [inv_item_sk#6, inv_quantity_on_hand#7, inv_date_sk#8]
Condition : (((isnotnull(inv_quantity_on_hand#7) AND (inv_quantity_on_hand#7 >= 100)) AND (inv_quantity_on_hand#7 <= 500)) AND isnotnull(inv_item_sk#6))

(8) Project [codegen id : 1]
Output [2]: [inv_item_sk#6, inv_date_sk#8]
Input [3]: [inv_item_sk#6, inv_quantity_on_hand#7, inv_date_sk#8]

(9) BroadcastExchange
Input [2]: [inv_item_sk#6, inv_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#9]

(10) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [i_item_sk#1]
Right keys [1]: [inv_item_sk#6]
Join condition: None

(11) Project [codegen id : 2]
Output [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, inv_date_sk#8]
Input [6]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, inv_item_sk#6, inv_date_sk#8]

(12) BroadcastExchange
Input [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, inv_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[4, int, true] as bigint)),false), [id=#10]

(13) Scan parquet default.date_dim
Output [2]: [d_date_sk#11, d_date#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-05-25), LessThanOrEqual(d_date,2000-07-24), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(14) ColumnarToRow
Input [2]: [d_date_sk#11, d_date#12]

(15) Filter
Input [2]: [d_date_sk#11, d_date#12]
Condition : (((isnotnull(d_date#12) AND (d_date#12 >= 11102)) AND (d_date#12 <= 11162)) AND isnotnull(d_date_sk#11))

(16) Project
Output [1]: [d_date_sk#11]
Input [2]: [d_date_sk#11, d_date#12]

(17) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [inv_date_sk#8]
Right keys [1]: [d_date_sk#11]
Join condition: None

(18) Project [codegen id : 3]
Output [4]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4]
Input [6]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, inv_date_sk#8, d_date_sk#11]

(19) Exchange
Input [4]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4]
Arguments: hashpartitioning(i_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#13]

(20) Sort [codegen id : 4]
Input [4]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4]
Arguments: [i_item_sk#1 ASC NULLS FIRST], false, 0

(21) Scan parquet default.store_sales
Output [2]: [ss_item_sk#14, ss_sold_date_sk#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(22) ColumnarToRow [codegen id : 5]
Input [2]: [ss_item_sk#14, ss_sold_date_sk#15]

(23) Filter [codegen id : 5]
Input [2]: [ss_item_sk#14, ss_sold_date_sk#15]
Condition : isnotnull(ss_item_sk#14)

(24) Project [codegen id : 5]
Output [1]: [ss_item_sk#14]
Input [2]: [ss_item_sk#14, ss_sold_date_sk#15]

(25) Exchange
Input [1]: [ss_item_sk#14]
Arguments: hashpartitioning(ss_item_sk#14, 5), ENSURE_REQUIREMENTS, [id=#16]

(26) Sort [codegen id : 6]
Input [1]: [ss_item_sk#14]
Arguments: [ss_item_sk#14 ASC NULLS FIRST], false, 0

(27) SortMergeJoin [codegen id : 7]
Left keys [1]: [i_item_sk#1]
Right keys [1]: [ss_item_sk#14]
Join condition: None

(28) Project [codegen id : 7]
Output [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Input [5]: [i_item_sk#1, i_item_id#2, i_item_desc#3, i_current_price#4, ss_item_sk#14]

(29) HashAggregate [codegen id : 7]
Input [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Keys [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Functions: []
Aggregate Attributes: []
Results [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]

(30) Exchange
Input [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Arguments: hashpartitioning(i_item_id#2, i_item_desc#3, i_current_price#4, 5), ENSURE_REQUIREMENTS, [id=#17]

(31) HashAggregate [codegen id : 8]
Input [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Keys [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Functions: []
Aggregate Attributes: []
Results [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]

(32) TakeOrderedAndProject
Input [3]: [i_item_id#2, i_item_desc#3, i_current_price#4]
Arguments: 100, [i_item_id#2 ASC NULLS FIRST], [i_item_id#2, i_item_desc#3, i_current_price#4]

