== Physical Plan ==
* HashAggregate (68)
+- Exchange (67)
   +- * HashAggregate (66)
      +- Union (65)
         :- * Project (46)
         :  +- * BroadcastHashJoin Inner BuildRight (45)
         :     :- * Project (43)
         :     :  +- * SortMergeJoin LeftSemi (42)
         :     :     :- * Sort (25)
         :     :     :  +- Exchange (24)
         :     :     :     +- * Project (23)
         :     :     :        +- * BroadcastHashJoin LeftSemi BuildRight (22)
         :     :     :           :- * Filter (3)
         :     :     :           :  +- * ColumnarToRow (2)
         :     :     :           :     +- Scan parquet spark_catalog.default.catalog_sales (1)
         :     :     :           +- BroadcastExchange (21)
         :     :     :              +- * Project (20)
         :     :     :                 +- * Filter (19)
         :     :     :                    +- * HashAggregate (18)
         :     :     :                       +- Exchange (17)
         :     :     :                          +- * HashAggregate (16)
         :     :     :                             +- * Project (15)
         :     :     :                                +- * BroadcastHashJoin Inner BuildRight (14)
         :     :     :                                   :- * Project (9)
         :     :     :                                   :  +- * BroadcastHashJoin Inner BuildRight (8)
         :     :     :                                   :     :- * Filter (6)
         :     :     :                                   :     :  +- * ColumnarToRow (5)
         :     :     :                                   :     :     +- Scan parquet spark_catalog.default.store_sales (4)
         :     :     :                                   :     +- ReusedExchange (7)
         :     :     :                                   +- BroadcastExchange (13)
         :     :     :                                      +- * Filter (12)
         :     :     :                                         +- * ColumnarToRow (11)
         :     :     :                                            +- Scan parquet spark_catalog.default.item (10)
         :     :     +- * Sort (41)
         :     :        +- * Project (40)
         :     :           +- * Filter (39)
         :     :              +- * HashAggregate (38)
         :     :                 +- Exchange (37)
         :     :                    +- * HashAggregate (36)
         :     :                       +- * Project (35)
         :     :                          +- * BroadcastHashJoin Inner BuildRight (34)
         :     :                             :- * Project (29)
         :     :                             :  +- * Filter (28)
         :     :                             :     +- * ColumnarToRow (27)
         :     :                             :        +- Scan parquet spark_catalog.default.store_sales (26)
         :     :                             +- BroadcastExchange (33)
         :     :                                +- * Filter (32)
         :     :                                   +- * ColumnarToRow (31)
         :     :                                      +- Scan parquet spark_catalog.default.customer (30)
         :     +- ReusedExchange (44)
         +- * Project (64)
            +- * BroadcastHashJoin Inner BuildRight (63)
               :- * Project (61)
               :  +- * SortMergeJoin LeftSemi (60)
               :     :- * Sort (54)
               :     :  +- Exchange (53)
               :     :     +- * Project (52)
               :     :        +- * BroadcastHashJoin LeftSemi BuildRight (51)
               :     :           :- * Filter (49)
               :     :           :  +- * ColumnarToRow (48)
               :     :           :     +- Scan parquet spark_catalog.default.web_sales (47)
               :     :           +- ReusedExchange (50)
               :     +- * Sort (59)
               :        +- * Project (58)
               :           +- * Filter (57)
               :              +- * HashAggregate (56)
               :                 +- ReusedExchange (55)
               +- ReusedExchange (62)


(1) Scan parquet spark_catalog.default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(3) Filter [codegen id : 5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Condition : (isnotnull(cs_item_sk#2) AND isnotnull(cs_bill_customer_sk#1))

(4) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(5) ColumnarToRow [codegen id : 3]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]

(6) Filter [codegen id : 3]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Condition : isnotnull(ss_item_sk#7)

(7) ReusedExchange [Reuses operator id: 78]
Output [2]: [d_date_sk#10, d_date#11]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#10]
Join type: Inner
Join condition: None

(9) Project [codegen id : 3]
Output [2]: [ss_item_sk#7, d_date#11]
Input [4]: [ss_item_sk#7, ss_sold_date_sk#8, d_date_sk#10, d_date#11]

(10) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#12, i_item_desc#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(11) ColumnarToRow [codegen id : 2]
Input [2]: [i_item_sk#12, i_item_desc#13]

(12) Filter [codegen id : 2]
Input [2]: [i_item_sk#12, i_item_desc#13]
Condition : isnotnull(i_item_sk#12)

(13) BroadcastExchange
Input [2]: [i_item_sk#12, i_item_desc#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(14) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#7]
Right keys [1]: [i_item_sk#12]
Join type: Inner
Join condition: None

(15) Project [codegen id : 3]
Output [3]: [d_date#11, i_item_sk#12, substr(i_item_desc#13, 1, 30) AS _groupingexpression#14]
Input [4]: [ss_item_sk#7, d_date#11, i_item_sk#12, i_item_desc#13]

(16) HashAggregate [codegen id : 3]
Input [3]: [d_date#11, i_item_sk#12, _groupingexpression#14]
Keys [3]: [_groupingexpression#14, i_item_sk#12, d_date#11]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#15]
Results [4]: [_groupingexpression#14, i_item_sk#12, d_date#11, count#16]

(17) Exchange
Input [4]: [_groupingexpression#14, i_item_sk#12, d_date#11, count#16]
Arguments: hashpartitioning(_groupingexpression#14, i_item_sk#12, d_date#11, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(18) HashAggregate [codegen id : 4]
Input [4]: [_groupingexpression#14, i_item_sk#12, d_date#11, count#16]
Keys [3]: [_groupingexpression#14, i_item_sk#12, d_date#11]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#17]
Results [2]: [i_item_sk#12 AS item_sk#18, count(1)#17 AS cnt#19]

(19) Filter [codegen id : 4]
Input [2]: [item_sk#18, cnt#19]
Condition : (cnt#19 > 4)

(20) Project [codegen id : 4]
Output [1]: [item_sk#18]
Input [2]: [item_sk#18, cnt#19]

(21) BroadcastExchange
Input [1]: [item_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(22) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#18]
Join type: LeftSemi
Join condition: None

(23) Project [codegen id : 5]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(24) Exchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(25) Sort [codegen id : 6]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(26) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_customer_sk#20, ss_quantity#21, ss_sales_price#22, ss_sold_date_sk#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(27) ColumnarToRow [codegen id : 8]
Input [4]: [ss_customer_sk#20, ss_quantity#21, ss_sales_price#22, ss_sold_date_sk#23]

(28) Filter [codegen id : 8]
Input [4]: [ss_customer_sk#20, ss_quantity#21, ss_sales_price#22, ss_sold_date_sk#23]
Condition : isnotnull(ss_customer_sk#20)

(29) Project [codegen id : 8]
Output [3]: [ss_customer_sk#20, ss_quantity#21, ss_sales_price#22]
Input [4]: [ss_customer_sk#20, ss_quantity#21, ss_sales_price#22, ss_sold_date_sk#23]

(30) Scan parquet spark_catalog.default.customer
Output [1]: [c_customer_sk#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(31) ColumnarToRow [codegen id : 7]
Input [1]: [c_customer_sk#24]

(32) Filter [codegen id : 7]
Input [1]: [c_customer_sk#24]
Condition : isnotnull(c_customer_sk#24)

(33) BroadcastExchange
Input [1]: [c_customer_sk#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=5]

(34) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_customer_sk#20]
Right keys [1]: [c_customer_sk#24]
Join type: Inner
Join condition: None

(35) Project [codegen id : 8]
Output [3]: [ss_quantity#21, ss_sales_price#22, c_customer_sk#24]
Input [4]: [ss_customer_sk#20, ss_quantity#21, ss_sales_price#22, c_customer_sk#24]

(36) HashAggregate [codegen id : 8]
Input [3]: [ss_quantity#21, ss_sales_price#22, c_customer_sk#24]
Keys [1]: [c_customer_sk#24]
Functions [1]: [partial_sum((cast(ss_quantity#21 as decimal(10,0)) * ss_sales_price#22))]
Aggregate Attributes [2]: [sum#25, isEmpty#26]
Results [3]: [c_customer_sk#24, sum#27, isEmpty#28]

(37) Exchange
Input [3]: [c_customer_sk#24, sum#27, isEmpty#28]
Arguments: hashpartitioning(c_customer_sk#24, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(38) HashAggregate [codegen id : 9]
Input [3]: [c_customer_sk#24, sum#27, isEmpty#28]
Keys [1]: [c_customer_sk#24]
Functions [1]: [sum((cast(ss_quantity#21 as decimal(10,0)) * ss_sales_price#22))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#21 as decimal(10,0)) * ss_sales_price#22))#29]
Results [2]: [c_customer_sk#24, sum((cast(ss_quantity#21 as decimal(10,0)) * ss_sales_price#22))#29 AS ssales#30]

(39) Filter [codegen id : 9]
Input [2]: [c_customer_sk#24, ssales#30]
Condition : (isnotnull(ssales#30) AND (cast(ssales#30 as decimal(38,8)) > (0.500000 * Subquery scalar-subquery#31, [id=#32])))

(40) Project [codegen id : 9]
Output [1]: [c_customer_sk#24]
Input [2]: [c_customer_sk#24, ssales#30]

(41) Sort [codegen id : 9]
Input [1]: [c_customer_sk#24]
Arguments: [c_customer_sk#24 ASC NULLS FIRST], false, 0

(42) SortMergeJoin [codegen id : 11]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#24]
Join type: LeftSemi
Join condition: None

(43) Project [codegen id : 11]
Output [3]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(44) ReusedExchange [Reuses operator id: 73]
Output [1]: [d_date_sk#33]

(45) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#33]
Join type: Inner
Join condition: None

(46) Project [codegen id : 11]
Output [1]: [(cast(cs_quantity#3 as decimal(10,0)) * cs_list_price#4) AS sales#34]
Input [4]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, d_date_sk#33]

(47) Scan parquet spark_catalog.default.web_sales
Output [5]: [ws_item_sk#35, ws_bill_customer_sk#36, ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#39), dynamicpruningexpression(ws_sold_date_sk#39 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(48) ColumnarToRow [codegen id : 16]
Input [5]: [ws_item_sk#35, ws_bill_customer_sk#36, ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]

(49) Filter [codegen id : 16]
Input [5]: [ws_item_sk#35, ws_bill_customer_sk#36, ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]
Condition : (isnotnull(ws_item_sk#35) AND isnotnull(ws_bill_customer_sk#36))

(50) ReusedExchange [Reuses operator id: 21]
Output [1]: [item_sk#18]

(51) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_item_sk#35]
Right keys [1]: [item_sk#18]
Join type: LeftSemi
Join condition: None

(52) Project [codegen id : 16]
Output [4]: [ws_bill_customer_sk#36, ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]
Input [5]: [ws_item_sk#35, ws_bill_customer_sk#36, ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]

(53) Exchange
Input [4]: [ws_bill_customer_sk#36, ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]
Arguments: hashpartitioning(ws_bill_customer_sk#36, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(54) Sort [codegen id : 17]
Input [4]: [ws_bill_customer_sk#36, ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]
Arguments: [ws_bill_customer_sk#36 ASC NULLS FIRST], false, 0

(55) ReusedExchange [Reuses operator id: 37]
Output [3]: [c_customer_sk#24, sum#27, isEmpty#28]

(56) HashAggregate [codegen id : 20]
Input [3]: [c_customer_sk#24, sum#27, isEmpty#28]
Keys [1]: [c_customer_sk#24]
Functions [1]: [sum((cast(ss_quantity#21 as decimal(10,0)) * ss_sales_price#22))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#21 as decimal(10,0)) * ss_sales_price#22))#29]
Results [2]: [c_customer_sk#24, sum((cast(ss_quantity#21 as decimal(10,0)) * ss_sales_price#22))#29 AS ssales#30]

(57) Filter [codegen id : 20]
Input [2]: [c_customer_sk#24, ssales#30]
Condition : (isnotnull(ssales#30) AND (cast(ssales#30 as decimal(38,8)) > (0.500000 * ReusedSubquery Subquery scalar-subquery#31, [id=#32])))

(58) Project [codegen id : 20]
Output [1]: [c_customer_sk#24]
Input [2]: [c_customer_sk#24, ssales#30]

(59) Sort [codegen id : 20]
Input [1]: [c_customer_sk#24]
Arguments: [c_customer_sk#24 ASC NULLS FIRST], false, 0

(60) SortMergeJoin [codegen id : 22]
Left keys [1]: [ws_bill_customer_sk#36]
Right keys [1]: [c_customer_sk#24]
Join type: LeftSemi
Join condition: None

(61) Project [codegen id : 22]
Output [3]: [ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]
Input [4]: [ws_bill_customer_sk#36, ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39]

(62) ReusedExchange [Reuses operator id: 73]
Output [1]: [d_date_sk#40]

(63) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ws_sold_date_sk#39]
Right keys [1]: [d_date_sk#40]
Join type: Inner
Join condition: None

(64) Project [codegen id : 22]
Output [1]: [(cast(ws_quantity#37 as decimal(10,0)) * ws_list_price#38) AS sales#41]
Input [4]: [ws_quantity#37, ws_list_price#38, ws_sold_date_sk#39, d_date_sk#40]

(65) Union

(66) HashAggregate [codegen id : 23]
Input [1]: [sales#34]
Keys: []
Functions [1]: [partial_sum(sales#34)]
Aggregate Attributes [2]: [sum#42, isEmpty#43]
Results [2]: [sum#44, isEmpty#45]

(67) Exchange
Input [2]: [sum#44, isEmpty#45]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=8]

(68) HashAggregate [codegen id : 24]
Input [2]: [sum#44, isEmpty#45]
Keys: []
Functions [1]: [sum(sales#34)]
Aggregate Attributes [1]: [sum(sales#34)#46]
Results [1]: [sum(sales#34)#46 AS sum(sales)#47]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (73)
+- * Project (72)
   +- * Filter (71)
      +- * ColumnarToRow (70)
         +- Scan parquet spark_catalog.default.date_dim (69)


(69) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#33, d_year#48, d_moy#49]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(70) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#33, d_year#48, d_moy#49]

(71) Filter [codegen id : 1]
Input [3]: [d_date_sk#33, d_year#48, d_moy#49]
Condition : ((((isnotnull(d_year#48) AND isnotnull(d_moy#49)) AND (d_year#48 = 2000)) AND (d_moy#49 = 2)) AND isnotnull(d_date_sk#33))

(72) Project [codegen id : 1]
Output [1]: [d_date_sk#33]
Input [3]: [d_date_sk#33, d_year#48, d_moy#49]

(73) BroadcastExchange
Input [1]: [d_date_sk#33]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

Subquery:2 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (78)
+- * Project (77)
   +- * Filter (76)
      +- * ColumnarToRow (75)
         +- Scan parquet spark_catalog.default.date_dim (74)


(74) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#10, d_date#11, d_year#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(75) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#10, d_date#11, d_year#50]

(76) Filter [codegen id : 1]
Input [3]: [d_date_sk#10, d_date#11, d_year#50]
Condition : (d_year#50 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#10))

(77) Project [codegen id : 1]
Output [2]: [d_date_sk#10, d_date#11]
Input [3]: [d_date_sk#10, d_date#11, d_year#50]

(78) BroadcastExchange
Input [2]: [d_date_sk#10, d_date#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=10]

Subquery:3 Hosting operator id = 39 Hosting Expression = Subquery scalar-subquery#31, [id=#32]
* HashAggregate (93)
+- Exchange (92)
   +- * HashAggregate (91)
      +- * HashAggregate (90)
         +- Exchange (89)
            +- * HashAggregate (88)
               +- * Project (87)
                  +- * BroadcastHashJoin Inner BuildRight (86)
                     :- * Project (84)
                     :  +- * BroadcastHashJoin Inner BuildRight (83)
                     :     :- * Filter (81)
                     :     :  +- * ColumnarToRow (80)
                     :     :     +- Scan parquet spark_catalog.default.store_sales (79)
                     :     +- ReusedExchange (82)
                     +- ReusedExchange (85)


(79) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_customer_sk#51, ss_quantity#52, ss_sales_price#53, ss_sold_date_sk#54]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#54), dynamicpruningexpression(ss_sold_date_sk#54 IN dynamicpruning#55)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(80) ColumnarToRow [codegen id : 3]
Input [4]: [ss_customer_sk#51, ss_quantity#52, ss_sales_price#53, ss_sold_date_sk#54]

(81) Filter [codegen id : 3]
Input [4]: [ss_customer_sk#51, ss_quantity#52, ss_sales_price#53, ss_sold_date_sk#54]
Condition : isnotnull(ss_customer_sk#51)

(82) ReusedExchange [Reuses operator id: 33]
Output [1]: [c_customer_sk#56]

(83) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_customer_sk#51]
Right keys [1]: [c_customer_sk#56]
Join type: Inner
Join condition: None

(84) Project [codegen id : 3]
Output [4]: [ss_quantity#52, ss_sales_price#53, ss_sold_date_sk#54, c_customer_sk#56]
Input [5]: [ss_customer_sk#51, ss_quantity#52, ss_sales_price#53, ss_sold_date_sk#54, c_customer_sk#56]

(85) ReusedExchange [Reuses operator id: 98]
Output [1]: [d_date_sk#57]

(86) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#54]
Right keys [1]: [d_date_sk#57]
Join type: Inner
Join condition: None

(87) Project [codegen id : 3]
Output [3]: [ss_quantity#52, ss_sales_price#53, c_customer_sk#56]
Input [5]: [ss_quantity#52, ss_sales_price#53, ss_sold_date_sk#54, c_customer_sk#56, d_date_sk#57]

(88) HashAggregate [codegen id : 3]
Input [3]: [ss_quantity#52, ss_sales_price#53, c_customer_sk#56]
Keys [1]: [c_customer_sk#56]
Functions [1]: [partial_sum((cast(ss_quantity#52 as decimal(10,0)) * ss_sales_price#53))]
Aggregate Attributes [2]: [sum#58, isEmpty#59]
Results [3]: [c_customer_sk#56, sum#60, isEmpty#61]

(89) Exchange
Input [3]: [c_customer_sk#56, sum#60, isEmpty#61]
Arguments: hashpartitioning(c_customer_sk#56, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(90) HashAggregate [codegen id : 4]
Input [3]: [c_customer_sk#56, sum#60, isEmpty#61]
Keys [1]: [c_customer_sk#56]
Functions [1]: [sum((cast(ss_quantity#52 as decimal(10,0)) * ss_sales_price#53))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#52 as decimal(10,0)) * ss_sales_price#53))#62]
Results [1]: [sum((cast(ss_quantity#52 as decimal(10,0)) * ss_sales_price#53))#62 AS csales#63]

(91) HashAggregate [codegen id : 4]
Input [1]: [csales#63]
Keys: []
Functions [1]: [partial_max(csales#63)]
Aggregate Attributes [1]: [max#64]
Results [1]: [max#65]

(92) Exchange
Input [1]: [max#65]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=12]

(93) HashAggregate [codegen id : 5]
Input [1]: [max#65]
Keys: []
Functions [1]: [max(csales#63)]
Aggregate Attributes [1]: [max(csales#63)#66]
Results [1]: [max(csales#63)#66 AS tpcds_cmax#67]

Subquery:4 Hosting operator id = 79 Hosting Expression = ss_sold_date_sk#54 IN dynamicpruning#55
BroadcastExchange (98)
+- * Project (97)
   +- * Filter (96)
      +- * ColumnarToRow (95)
         +- Scan parquet spark_catalog.default.date_dim (94)


(94) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#57, d_year#68]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(95) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#57, d_year#68]

(96) Filter [codegen id : 1]
Input [2]: [d_date_sk#57, d_year#68]
Condition : (d_year#68 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#57))

(97) Project [codegen id : 1]
Output [1]: [d_date_sk#57]
Input [2]: [d_date_sk#57, d_year#68]

(98) BroadcastExchange
Input [1]: [d_date_sk#57]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=13]

Subquery:5 Hosting operator id = 47 Hosting Expression = ws_sold_date_sk#39 IN dynamicpruning#6

Subquery:6 Hosting operator id = 57 Hosting Expression = ReusedSubquery Subquery scalar-subquery#31, [id=#32]


