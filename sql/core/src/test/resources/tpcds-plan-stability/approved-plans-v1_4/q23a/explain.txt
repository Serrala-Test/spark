== Physical Plan ==
* HashAggregate (76)
+- Exchange (75)
   +- * HashAggregate (74)
      +- Union (73)
         :- * Project (54)
         :  +- * BroadcastHashJoin Inner BuildRight (53)
         :     :- * Project (47)
         :     :  +- SortMergeJoin LeftSemi (46)
         :     :     :- * Sort (29)
         :     :     :  +- Exchange (28)
         :     :     :     +- * Project (27)
         :     :     :        +- * BroadcastHashJoin LeftSemi BuildRight (26)
         :     :     :           :- * Filter (3)
         :     :     :           :  +- * ColumnarToRow (2)
         :     :     :           :     +- Scan parquet default.catalog_sales (1)
         :     :     :           +- BroadcastExchange (25)
         :     :     :              +- * Project (24)
         :     :     :                 +- * Filter (23)
         :     :     :                    +- * HashAggregate (22)
         :     :     :                       +- Exchange (21)
         :     :     :                          +- * HashAggregate (20)
         :     :     :                             +- * Project (19)
         :     :     :                                +- * BroadcastHashJoin Inner BuildRight (18)
         :     :     :                                   :- * Project (13)
         :     :     :                                   :  +- * BroadcastHashJoin Inner BuildRight (12)
         :     :     :                                   :     :- * Filter (6)
         :     :     :                                   :     :  +- * ColumnarToRow (5)
         :     :     :                                   :     :     +- Scan parquet default.store_sales (4)
         :     :     :                                   :     +- BroadcastExchange (11)
         :     :     :                                   :        +- * Project (10)
         :     :     :                                   :           +- * Filter (9)
         :     :     :                                   :              +- * ColumnarToRow (8)
         :     :     :                                   :                 +- Scan parquet default.date_dim (7)
         :     :     :                                   +- BroadcastExchange (17)
         :     :     :                                      +- * Filter (16)
         :     :     :                                         +- * ColumnarToRow (15)
         :     :     :                                            +- Scan parquet default.item (14)
         :     :     +- * Sort (45)
         :     :        +- * Project (44)
         :     :           +- * Filter (43)
         :     :              +- * HashAggregate (42)
         :     :                 +- Exchange (41)
         :     :                    +- * HashAggregate (40)
         :     :                       +- * Project (39)
         :     :                          +- * BroadcastHashJoin Inner BuildRight (38)
         :     :                             :- * Project (33)
         :     :                             :  +- * Filter (32)
         :     :                             :     +- * ColumnarToRow (31)
         :     :                             :        +- Scan parquet default.store_sales (30)
         :     :                             +- BroadcastExchange (37)
         :     :                                +- * Filter (36)
         :     :                                   +- * ColumnarToRow (35)
         :     :                                      +- Scan parquet default.customer (34)
         :     +- BroadcastExchange (52)
         :        +- * Project (51)
         :           +- * Filter (50)
         :              +- * ColumnarToRow (49)
         :                 +- Scan parquet default.date_dim (48)
         +- * Project (72)
            +- * BroadcastHashJoin Inner BuildRight (71)
               :- * Project (69)
               :  +- SortMergeJoin LeftSemi (68)
               :     :- * Sort (62)
               :     :  +- Exchange (61)
               :     :     +- * Project (60)
               :     :        +- * BroadcastHashJoin LeftSemi BuildRight (59)
               :     :           :- * Filter (57)
               :     :           :  +- * ColumnarToRow (56)
               :     :           :     +- Scan parquet default.web_sales (55)
               :     :           +- ReusedExchange (58)
               :     +- * Sort (67)
               :        +- * Project (66)
               :           +- * Filter (65)
               :              +- * HashAggregate (64)
               :                 +- ReusedExchange (63)
               +- ReusedExchange (70)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(3) Filter [codegen id : 5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Condition : (isnotnull(cs_item_sk#2) AND isnotnull(cs_bill_customer_sk#1))

(4) Scan parquet default.store_sales
Output [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(5) ColumnarToRow [codegen id : 3]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]

(6) Filter [codegen id : 3]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Condition : isnotnull(ss_item_sk#7)

(7) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_date#11, d_year#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(8) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#10, d_date#11, d_year#12]

(9) Filter [codegen id : 1]
Input [3]: [d_date_sk#10, d_date#11, d_year#12]
Condition : (d_year#12 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#10))

(10) Project [codegen id : 1]
Output [2]: [d_date_sk#10, d_date#11]
Input [3]: [d_date_sk#10, d_date#11, d_year#12]

(11) BroadcastExchange
Input [2]: [d_date_sk#10, d_date#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13]

(12) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#10]
Join condition: None

(13) Project [codegen id : 3]
Output [2]: [ss_item_sk#7, d_date#11]
Input [4]: [ss_item_sk#7, ss_sold_date_sk#8, d_date_sk#10, d_date#11]

(14) Scan parquet default.item
Output [2]: [i_item_sk#14, i_item_desc#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(15) ColumnarToRow [codegen id : 2]
Input [2]: [i_item_sk#14, i_item_desc#15]

(16) Filter [codegen id : 2]
Input [2]: [i_item_sk#14, i_item_desc#15]
Condition : isnotnull(i_item_sk#14)

(17) BroadcastExchange
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#16]

(18) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#7]
Right keys [1]: [i_item_sk#14]
Join condition: None

(19) Project [codegen id : 3]
Output [3]: [d_date#11, i_item_sk#14, i_item_desc#15]
Input [4]: [ss_item_sk#7, d_date#11, i_item_sk#14, i_item_desc#15]

(20) HashAggregate [codegen id : 3]
Input [3]: [d_date#11, i_item_sk#14, i_item_desc#15]
Keys [3]: [substr(i_item_desc#15, 1, 30) AS substr(i_item_desc#15, 1, 30)#17, i_item_sk#14, d_date#11]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#18]
Results [4]: [substr(i_item_desc#15, 1, 30)#17, i_item_sk#14, d_date#11, count#19]

(21) Exchange
Input [4]: [substr(i_item_desc#15, 1, 30)#17, i_item_sk#14, d_date#11, count#19]
Arguments: hashpartitioning(substr(i_item_desc#15, 1, 30)#17, i_item_sk#14, d_date#11, 5), ENSURE_REQUIREMENTS, [id=#20]

(22) HashAggregate [codegen id : 4]
Input [4]: [substr(i_item_desc#15, 1, 30)#17, i_item_sk#14, d_date#11, count#19]
Keys [3]: [substr(i_item_desc#15, 1, 30)#17, i_item_sk#14, d_date#11]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#21]
Results [2]: [i_item_sk#14 AS item_sk#22, count(1)#21 AS count(1)#23]

(23) Filter [codegen id : 4]
Input [2]: [item_sk#22, count(1)#23]
Condition : (count(1)#23 > 4)

(24) Project [codegen id : 4]
Output [1]: [item_sk#22]
Input [2]: [item_sk#22, count(1)#23]

(25) BroadcastExchange
Input [1]: [item_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#24]

(26) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#22]
Join condition: None

(27) Project [codegen id : 5]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(28) Exchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#25]

(29) Sort [codegen id : 6]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(30) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(31) ColumnarToRow [codegen id : 8]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#8]

(32) Filter [codegen id : 8]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#8]
Condition : isnotnull(ss_customer_sk#26)

(33) Project [codegen id : 8]
Output [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#8]

(34) Scan parquet default.customer
Output [1]: [c_customer_sk#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(35) ColumnarToRow [codegen id : 7]
Input [1]: [c_customer_sk#29]

(36) Filter [codegen id : 7]
Input [1]: [c_customer_sk#29]
Condition : isnotnull(c_customer_sk#29)

(37) BroadcastExchange
Input [1]: [c_customer_sk#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#30]

(38) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_customer_sk#26]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(39) Project [codegen id : 8]
Output [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#29]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, c_customer_sk#29]

(40) HashAggregate [codegen id : 8]
Input [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#31, isEmpty#32]
Results [3]: [c_customer_sk#29, sum#33, isEmpty#34]

(41) Exchange
Input [3]: [c_customer_sk#29, sum#33, isEmpty#34]
Arguments: hashpartitioning(c_customer_sk#29, 5), ENSURE_REQUIREMENTS, [id=#35]

(42) HashAggregate [codegen id : 9]
Input [3]: [c_customer_sk#29, sum#33, isEmpty#34]
Keys [1]: [c_customer_sk#29]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#36]
Results [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#36 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37]

(43) Filter [codegen id : 9]
Input [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#38, [id=#39] as decimal(32,6)))), DecimalType(38,8), true)))

(44) Project [codegen id : 9]
Output [1]: [c_customer_sk#29]
Input [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37]

(45) Sort [codegen id : 9]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(46) SortMergeJoin
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(47) Project [codegen id : 11]
Output [3]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(48) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_year#12, d_moy#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(49) ColumnarToRow [codegen id : 10]
Input [3]: [d_date_sk#10, d_year#12, d_moy#40]

(50) Filter [codegen id : 10]
Input [3]: [d_date_sk#10, d_year#12, d_moy#40]
Condition : ((((isnotnull(d_year#12) AND isnotnull(d_moy#40)) AND (d_year#12 = 2000)) AND (d_moy#40 = 2)) AND isnotnull(d_date_sk#10))

(51) Project [codegen id : 10]
Output [1]: [d_date_sk#10]
Input [3]: [d_date_sk#10, d_year#12, d_moy#40]

(52) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#41]

(53) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#10]
Join condition: None

(54) Project [codegen id : 11]
Output [1]: [CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true) AS sales#42]
Input [4]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, d_date_sk#10]

(55) Scan parquet default.web_sales
Output [5]: [ws_item_sk#43, ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46, ws_sold_date_sk#47]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#47), dynamicpruningexpression(ws_sold_date_sk#47 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(56) ColumnarToRow [codegen id : 16]
Input [5]: [ws_item_sk#43, ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46, ws_sold_date_sk#47]

(57) Filter [codegen id : 16]
Input [5]: [ws_item_sk#43, ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46, ws_sold_date_sk#47]
Condition : (isnotnull(ws_item_sk#43) AND isnotnull(ws_bill_customer_sk#44))

(58) ReusedExchange [Reuses operator id: unknown]
Output [1]: [item_sk#22]

(59) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_item_sk#43]
Right keys [1]: [item_sk#22]
Join condition: None

(60) Project [codegen id : 16]
Output [4]: [ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46, ws_sold_date_sk#47]
Input [5]: [ws_item_sk#43, ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46, ws_sold_date_sk#47]

(61) Exchange
Input [4]: [ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46, ws_sold_date_sk#47]
Arguments: hashpartitioning(ws_bill_customer_sk#44, 5), ENSURE_REQUIREMENTS, [id=#48]

(62) Sort [codegen id : 17]
Input [4]: [ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46, ws_sold_date_sk#47]
Arguments: [ws_bill_customer_sk#44 ASC NULLS FIRST], false, 0

(63) ReusedExchange [Reuses operator id: 41]
Output [3]: [c_customer_sk#29, sum#49, isEmpty#50]

(64) HashAggregate [codegen id : 20]
Input [3]: [c_customer_sk#29, sum#49, isEmpty#50]
Keys [1]: [c_customer_sk#29]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#51]
Results [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#51 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#52]

(65) Filter [codegen id : 20]
Input [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#52]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#52) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#52 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#38, [id=#39] as decimal(32,6)))), DecimalType(38,8), true)))

(66) Project [codegen id : 20]
Output [1]: [c_customer_sk#29]
Input [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#52]

(67) Sort [codegen id : 20]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(68) SortMergeJoin
Left keys [1]: [ws_bill_customer_sk#44]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(69) Project [codegen id : 22]
Output [3]: [ws_quantity#45, ws_list_price#46, ws_sold_date_sk#47]
Input [4]: [ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46, ws_sold_date_sk#47]

(70) ReusedExchange [Reuses operator id: 52]
Output [1]: [d_date_sk#10]

(71) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ws_sold_date_sk#47]
Right keys [1]: [d_date_sk#10]
Join condition: None

(72) Project [codegen id : 22]
Output [1]: [CheckOverflow((promote_precision(cast(cast(ws_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#46 as decimal(12,2)))), DecimalType(18,2), true) AS sales#53]
Input [4]: [ws_quantity#45, ws_list_price#46, ws_sold_date_sk#47, d_date_sk#10]

(73) Union

(74) HashAggregate [codegen id : 23]
Input [1]: [sales#42]
Keys: []
Functions [1]: [partial_sum(sales#42)]
Aggregate Attributes [2]: [sum#54, isEmpty#55]
Results [2]: [sum#56, isEmpty#57]

(75) Exchange
Input [2]: [sum#56, isEmpty#57]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#58]

(76) HashAggregate [codegen id : 24]
Input [2]: [sum#56, isEmpty#57]
Keys: []
Functions [1]: [sum(sales#42)]
Aggregate Attributes [1]: [sum(sales#42)#59]
Results [1]: [sum(sales#42)#59 AS sum(sales)#60]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
ReusedExchange (77)


(77) ReusedExchange [Reuses operator id: 52]
Output [1]: [d_date_sk#10]

Subquery:2 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
ReusedExchange (78)


(78) ReusedExchange [Reuses operator id: 11]
Output [2]: [d_date_sk#10, d_date#11]

Subquery:3 Hosting operator id = 43 Hosting Expression = Subquery scalar-subquery#38, [id=#39]
* HashAggregate (100)
+- Exchange (99)
   +- * HashAggregate (98)
      +- * HashAggregate (97)
         +- Exchange (96)
            +- * HashAggregate (95)
               +- * Project (94)
                  +- * BroadcastHashJoin Inner BuildRight (93)
                     :- * Project (87)
                     :  +- * BroadcastHashJoin Inner BuildRight (86)
                     :     :- * Filter (81)
                     :     :  +- * ColumnarToRow (80)
                     :     :     +- Scan parquet default.store_sales (79)
                     :     +- BroadcastExchange (85)
                     :        +- * Filter (84)
                     :           +- * ColumnarToRow (83)
                     :              +- Scan parquet default.customer (82)
                     +- BroadcastExchange (92)
                        +- * Project (91)
                           +- * Filter (90)
                              +- * ColumnarToRow (89)
                                 +- Scan parquet default.date_dim (88)


(79) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#61)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(80) ColumnarToRow [codegen id : 3]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#8]

(81) Filter [codegen id : 3]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#8]
Condition : isnotnull(ss_customer_sk#26)

(82) Scan parquet default.customer
Output [1]: [c_customer_sk#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(83) ColumnarToRow [codegen id : 1]
Input [1]: [c_customer_sk#29]

(84) Filter [codegen id : 1]
Input [1]: [c_customer_sk#29]
Condition : isnotnull(c_customer_sk#29)

(85) BroadcastExchange
Input [1]: [c_customer_sk#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#62]

(86) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_customer_sk#26]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(87) Project [codegen id : 3]
Output [4]: [ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#8, c_customer_sk#29]
Input [5]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#8, c_customer_sk#29]

(88) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(89) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#10, d_year#12]

(90) Filter [codegen id : 2]
Input [2]: [d_date_sk#10, d_year#12]
Condition : (d_year#12 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#10))

(91) Project [codegen id : 2]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#12]

(92) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#63]

(93) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#10]
Join condition: None

(94) Project [codegen id : 3]
Output [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#29]
Input [5]: [ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#8, c_customer_sk#29, d_date_sk#10]

(95) HashAggregate [codegen id : 3]
Input [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#64, isEmpty#65]
Results [3]: [c_customer_sk#29, sum#66, isEmpty#67]

(96) Exchange
Input [3]: [c_customer_sk#29, sum#66, isEmpty#67]
Arguments: hashpartitioning(c_customer_sk#29, 5), ENSURE_REQUIREMENTS, [id=#68]

(97) HashAggregate [codegen id : 4]
Input [3]: [c_customer_sk#29, sum#66, isEmpty#67]
Keys [1]: [c_customer_sk#29]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#69]
Results [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#69 AS csales#70]

(98) HashAggregate [codegen id : 4]
Input [1]: [csales#70]
Keys: []
Functions [1]: [partial_max(csales#70)]
Aggregate Attributes [1]: [max#71]
Results [1]: [max#72]

(99) Exchange
Input [1]: [max#72]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#73]

(100) HashAggregate [codegen id : 5]
Input [1]: [max#72]
Keys: []
Functions [1]: [max(csales#70)]
Aggregate Attributes [1]: [max(csales#70)#74]
Results [1]: [max(csales#70)#74 AS tpcds_cmax#75]

Subquery:4 Hosting operator id = 79 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#61
ReusedExchange (101)


(101) ReusedExchange [Reuses operator id: 92]
Output [1]: [d_date_sk#10]

Subquery:5 Hosting operator id = 55 Hosting Expression = ws_sold_date_sk#47 IN dynamicpruning#6

Subquery:6 Hosting operator id = 65 Hosting Expression = ReusedSubquery Subquery scalar-subquery#38, [id=#39]


