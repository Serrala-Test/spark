== Physical Plan ==
* HashAggregate (72)
+- Exchange (71)
   +- * HashAggregate (70)
      +- Union (69)
         :- * Project (48)
         :  +- * BroadcastHashJoin Inner BuildRight (47)
         :     :- * Project (45)
         :     :  +- * SortMergeJoin LeftSemi (44)
         :     :     :- * Sort (24)
         :     :     :  +- Exchange (23)
         :     :     :     +- * Project (22)
         :     :     :        +- * BroadcastHashJoin LeftSemi BuildRight (21)
         :     :     :           :- * ColumnarToRow (2)
         :     :     :           :  +- Scan parquet default.catalog_sales (1)
         :     :     :           +- BroadcastExchange (20)
         :     :     :              +- * Project (19)
         :     :     :                 +- * Filter (18)
         :     :     :                    +- * HashAggregate (17)
         :     :     :                       +- Exchange (16)
         :     :     :                          +- * HashAggregate (15)
         :     :     :                             +- * Project (14)
         :     :     :                                +- * BroadcastHashJoin Inner BuildRight (13)
         :     :     :                                   :- * Project (8)
         :     :     :                                   :  +- * BroadcastHashJoin Inner BuildRight (7)
         :     :     :                                   :     :- * Filter (5)
         :     :     :                                   :     :  +- * ColumnarToRow (4)
         :     :     :                                   :     :     +- Scan parquet default.store_sales (3)
         :     :     :                                   :     +- ReusedExchange (6)
         :     :     :                                   +- BroadcastExchange (12)
         :     :     :                                      +- * Filter (11)
         :     :     :                                         +- * ColumnarToRow (10)
         :     :     :                                            +- Scan parquet default.item (9)
         :     :     +- * Sort (43)
         :     :        +- * BroadcastHashJoin LeftSemi BuildRight (42)
         :     :           :- * Project (39)
         :     :           :  +- * Filter (38)
         :     :           :     +- * HashAggregate (37)
         :     :           :        +- Exchange (36)
         :     :           :           +- * HashAggregate (35)
         :     :           :              +- * Project (34)
         :     :           :                 +- * BroadcastHashJoin Inner BuildRight (33)
         :     :           :                    :- * Project (28)
         :     :           :                    :  +- * Filter (27)
         :     :           :                    :     +- * ColumnarToRow (26)
         :     :           :                    :        +- Scan parquet default.store_sales (25)
         :     :           :                    +- BroadcastExchange (32)
         :     :           :                       +- * Filter (31)
         :     :           :                          +- * ColumnarToRow (30)
         :     :           :                             +- Scan parquet default.customer (29)
         :     :           +- BroadcastExchange (41)
         :     :              +- ReusedExchange (40)
         :     +- ReusedExchange (46)
         +- * Project (68)
            +- * BroadcastHashJoin Inner BuildRight (67)
               :- * Project (65)
               :  +- * SortMergeJoin LeftSemi (64)
               :     :- * Sort (55)
               :     :  +- Exchange (54)
               :     :     +- * Project (53)
               :     :        +- * BroadcastHashJoin LeftSemi BuildRight (52)
               :     :           :- * ColumnarToRow (50)
               :     :           :  +- Scan parquet default.web_sales (49)
               :     :           +- ReusedExchange (51)
               :     +- * Sort (63)
               :        +- * BroadcastHashJoin LeftSemi BuildRight (62)
               :           :- * Project (59)
               :           :  +- * Filter (58)
               :           :     +- * HashAggregate (57)
               :           :        +- ReusedExchange (56)
               :           +- BroadcastExchange (61)
               :              +- ReusedExchange (60)
               +- ReusedExchange (66)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(3) Scan parquet default.store_sales
Output [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(4) ColumnarToRow [codegen id : 3]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]

(5) Filter [codegen id : 3]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Condition : isnotnull(ss_item_sk#7)

(6) ReusedExchange [Reuses operator id: 82]
Output [2]: [d_date_sk#10, d_date#11]

(7) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#10]
Join condition: None

(8) Project [codegen id : 3]
Output [2]: [ss_item_sk#7, d_date#11]
Input [4]: [ss_item_sk#7, ss_sold_date_sk#8, d_date_sk#10, d_date#11]

(9) Scan parquet default.item
Output [2]: [i_item_sk#12, i_item_desc#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(10) ColumnarToRow [codegen id : 2]
Input [2]: [i_item_sk#12, i_item_desc#13]

(11) Filter [codegen id : 2]
Input [2]: [i_item_sk#12, i_item_desc#13]
Condition : isnotnull(i_item_sk#12)

(12) BroadcastExchange
Input [2]: [i_item_sk#12, i_item_desc#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14]

(13) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#7]
Right keys [1]: [i_item_sk#12]
Join condition: None

(14) Project [codegen id : 3]
Output [3]: [d_date#11, i_item_sk#12, substr(i_item_desc#13, 1, 30) AS _groupingexpression#15]
Input [4]: [ss_item_sk#7, d_date#11, i_item_sk#12, i_item_desc#13]

(15) HashAggregate [codegen id : 3]
Input [3]: [d_date#11, i_item_sk#12, _groupingexpression#15]
Keys [3]: [_groupingexpression#15, i_item_sk#12, d_date#11]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#16]
Results [4]: [_groupingexpression#15, i_item_sk#12, d_date#11, count#17]

(16) Exchange
Input [4]: [_groupingexpression#15, i_item_sk#12, d_date#11, count#17]
Arguments: hashpartitioning(_groupingexpression#15, i_item_sk#12, d_date#11, 5), ENSURE_REQUIREMENTS, [id=#18]

(17) HashAggregate [codegen id : 4]
Input [4]: [_groupingexpression#15, i_item_sk#12, d_date#11, count#17]
Keys [3]: [_groupingexpression#15, i_item_sk#12, d_date#11]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#19]
Results [2]: [i_item_sk#12 AS item_sk#20, count(1)#19 AS cnt#21]

(18) Filter [codegen id : 4]
Input [2]: [item_sk#20, cnt#21]
Condition : (cnt#21 > 4)

(19) Project [codegen id : 4]
Output [1]: [item_sk#20]
Input [2]: [item_sk#20, cnt#21]

(20) BroadcastExchange
Input [1]: [item_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22]

(21) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#20]
Join condition: None

(22) Project [codegen id : 5]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(23) Exchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#23]

(24) Sort [codegen id : 6]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(25) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(26) ColumnarToRow [codegen id : 8]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]

(27) Filter [codegen id : 8]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]
Condition : isnotnull(ss_customer_sk#24)

(28) Project [codegen id : 8]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]

(29) Scan parquet default.customer
Output [1]: [c_customer_sk#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(30) ColumnarToRow [codegen id : 7]
Input [1]: [c_customer_sk#28]

(31) Filter [codegen id : 7]
Input [1]: [c_customer_sk#28]
Condition : isnotnull(c_customer_sk#28)

(32) BroadcastExchange
Input [1]: [c_customer_sk#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(33) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#28]
Join condition: None

(34) Project [codegen id : 8]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#28]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#28]

(35) HashAggregate [codegen id : 8]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#28]
Keys [1]: [c_customer_sk#28]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#30, isEmpty#31]
Results [3]: [c_customer_sk#28, sum#32, isEmpty#33]

(36) Exchange
Input [3]: [c_customer_sk#28, sum#32, isEmpty#33]
Arguments: hashpartitioning(c_customer_sk#28, 5), ENSURE_REQUIREMENTS, [id=#34]

(37) HashAggregate [codegen id : 14]
Input [3]: [c_customer_sk#28, sum#32, isEmpty#33]
Keys [1]: [c_customer_sk#28]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]
Results [2]: [c_customer_sk#28, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35 AS ssales#36]

(38) Filter [codegen id : 14]
Input [2]: [c_customer_sk#28, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8), true)))

(39) Project [codegen id : 14]
Output [1]: [c_customer_sk#28]
Input [2]: [c_customer_sk#28, ssales#36]

(40) ReusedExchange [Reuses operator id: 23]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(41) BroadcastExchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#39]

(42) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [c_customer_sk#28]
Right keys [1]: [cs_bill_customer_sk#1]
Join condition: None

(43) Sort [codegen id : 14]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(44) SortMergeJoin [codegen id : 16]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#28]
Join condition: None

(45) Project [codegen id : 16]
Output [3]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(46) ReusedExchange [Reuses operator id: 77]
Output [1]: [d_date_sk#40]

(47) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#40]
Join condition: None

(48) Project [codegen id : 16]
Output [1]: [CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true) AS sales#41]
Input [4]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, d_date_sk#40]

(49) Scan parquet default.web_sales
Output [5]: [ws_item_sk#42, ws_bill_customer_sk#43, ws_quantity#44, ws_list_price#45, ws_sold_date_sk#46]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#46), dynamicpruningexpression(ws_sold_date_sk#46 IN dynamicpruning#6)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(50) ColumnarToRow [codegen id : 21]
Input [5]: [ws_item_sk#42, ws_bill_customer_sk#43, ws_quantity#44, ws_list_price#45, ws_sold_date_sk#46]

(51) ReusedExchange [Reuses operator id: 20]
Output [1]: [item_sk#20]

(52) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [ws_item_sk#42]
Right keys [1]: [item_sk#20]
Join condition: None

(53) Project [codegen id : 21]
Output [4]: [ws_bill_customer_sk#43, ws_quantity#44, ws_list_price#45, ws_sold_date_sk#46]
Input [5]: [ws_item_sk#42, ws_bill_customer_sk#43, ws_quantity#44, ws_list_price#45, ws_sold_date_sk#46]

(54) Exchange
Input [4]: [ws_bill_customer_sk#43, ws_quantity#44, ws_list_price#45, ws_sold_date_sk#46]
Arguments: hashpartitioning(ws_bill_customer_sk#43, 5), ENSURE_REQUIREMENTS, [id=#47]

(55) Sort [codegen id : 22]
Input [4]: [ws_bill_customer_sk#43, ws_quantity#44, ws_list_price#45, ws_sold_date_sk#46]
Arguments: [ws_bill_customer_sk#43 ASC NULLS FIRST], false, 0

(56) ReusedExchange [Reuses operator id: 36]
Output [3]: [c_customer_sk#48, sum#49, isEmpty#50]

(57) HashAggregate [codegen id : 30]
Input [3]: [c_customer_sk#48, sum#49, isEmpty#50]
Keys [1]: [c_customer_sk#48]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#52 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#52 as decimal(12,2)))), DecimalType(18,2), true))#53]
Results [2]: [c_customer_sk#48, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#51 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#52 as decimal(12,2)))), DecimalType(18,2), true))#53 AS ssales#36]

(58) Filter [codegen id : 30]
Input [2]: [c_customer_sk#48, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8), true)))

(59) Project [codegen id : 30]
Output [1]: [c_customer_sk#48]
Input [2]: [c_customer_sk#48, ssales#36]

(60) ReusedExchange [Reuses operator id: 54]
Output [4]: [ws_bill_customer_sk#43, ws_quantity#44, ws_list_price#45, ws_sold_date_sk#46]

(61) BroadcastExchange
Input [4]: [ws_bill_customer_sk#43, ws_quantity#44, ws_list_price#45, ws_sold_date_sk#46]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#54]

(62) BroadcastHashJoin [codegen id : 30]
Left keys [1]: [c_customer_sk#48]
Right keys [1]: [ws_bill_customer_sk#43]
Join condition: None

(63) Sort [codegen id : 30]
Input [1]: [c_customer_sk#48]
Arguments: [c_customer_sk#48 ASC NULLS FIRST], false, 0

(64) SortMergeJoin [codegen id : 32]
Left keys [1]: [ws_bill_customer_sk#43]
Right keys [1]: [c_customer_sk#48]
Join condition: None

(65) Project [codegen id : 32]
Output [3]: [ws_quantity#44, ws_list_price#45, ws_sold_date_sk#46]
Input [4]: [ws_bill_customer_sk#43, ws_quantity#44, ws_list_price#45, ws_sold_date_sk#46]

(66) ReusedExchange [Reuses operator id: 77]
Output [1]: [d_date_sk#55]

(67) BroadcastHashJoin [codegen id : 32]
Left keys [1]: [ws_sold_date_sk#46]
Right keys [1]: [d_date_sk#55]
Join condition: None

(68) Project [codegen id : 32]
Output [1]: [CheckOverflow((promote_precision(cast(cast(ws_quantity#44 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#45 as decimal(12,2)))), DecimalType(18,2), true) AS sales#56]
Input [4]: [ws_quantity#44, ws_list_price#45, ws_sold_date_sk#46, d_date_sk#55]

(69) Union

(70) HashAggregate [codegen id : 33]
Input [1]: [sales#41]
Keys: []
Functions [1]: [partial_sum(sales#41)]
Aggregate Attributes [2]: [sum#57, isEmpty#58]
Results [2]: [sum#59, isEmpty#60]

(71) Exchange
Input [2]: [sum#59, isEmpty#60]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#61]

(72) HashAggregate [codegen id : 34]
Input [2]: [sum#59, isEmpty#60]
Keys: []
Functions [1]: [sum(sales#41)]
Aggregate Attributes [1]: [sum(sales#41)#62]
Results [1]: [sum(sales#41)#62 AS sum(sales)#63]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (77)
+- * Project (76)
   +- * Filter (75)
      +- * ColumnarToRow (74)
         +- Scan parquet default.date_dim (73)


(73) Scan parquet default.date_dim
Output [3]: [d_date_sk#40, d_year#64, d_moy#65]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(74) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#40, d_year#64, d_moy#65]

(75) Filter [codegen id : 1]
Input [3]: [d_date_sk#40, d_year#64, d_moy#65]
Condition : ((((isnotnull(d_year#64) AND isnotnull(d_moy#65)) AND (d_year#64 = 2000)) AND (d_moy#65 = 2)) AND isnotnull(d_date_sk#40))

(76) Project [codegen id : 1]
Output [1]: [d_date_sk#40]
Input [3]: [d_date_sk#40, d_year#64, d_moy#65]

(77) BroadcastExchange
Input [1]: [d_date_sk#40]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#66]

Subquery:2 Hosting operator id = 3 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (82)
+- * Project (81)
   +- * Filter (80)
      +- * ColumnarToRow (79)
         +- Scan parquet default.date_dim (78)


(78) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_date#11, d_year#67]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(79) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#10, d_date#11, d_year#67]

(80) Filter [codegen id : 1]
Input [3]: [d_date_sk#10, d_date#11, d_year#67]
Condition : (d_year#67 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#10))

(81) Project [codegen id : 1]
Output [2]: [d_date_sk#10, d_date#11]
Input [3]: [d_date_sk#10, d_date#11, d_year#67]

(82) BroadcastExchange
Input [2]: [d_date_sk#10, d_date#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#68]

Subquery:3 Hosting operator id = 38 Hosting Expression = Subquery scalar-subquery#37, [id=#38]
* HashAggregate (97)
+- Exchange (96)
   +- * HashAggregate (95)
      +- * HashAggregate (94)
         +- Exchange (93)
            +- * HashAggregate (92)
               +- * Project (91)
                  +- * BroadcastHashJoin Inner BuildRight (90)
                     :- * Project (88)
                     :  +- * BroadcastHashJoin Inner BuildRight (87)
                     :     :- * Filter (85)
                     :     :  +- * ColumnarToRow (84)
                     :     :     +- Scan parquet default.store_sales (83)
                     :     +- ReusedExchange (86)
                     +- ReusedExchange (89)


(83) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#69, ss_quantity#70, ss_sales_price#71, ss_sold_date_sk#72]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#72), dynamicpruningexpression(ss_sold_date_sk#72 IN dynamicpruning#73)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(84) ColumnarToRow [codegen id : 3]
Input [4]: [ss_customer_sk#69, ss_quantity#70, ss_sales_price#71, ss_sold_date_sk#72]

(85) Filter [codegen id : 3]
Input [4]: [ss_customer_sk#69, ss_quantity#70, ss_sales_price#71, ss_sold_date_sk#72]
Condition : isnotnull(ss_customer_sk#69)

(86) ReusedExchange [Reuses operator id: 32]
Output [1]: [c_customer_sk#74]

(87) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_customer_sk#69]
Right keys [1]: [c_customer_sk#74]
Join condition: None

(88) Project [codegen id : 3]
Output [4]: [ss_quantity#70, ss_sales_price#71, ss_sold_date_sk#72, c_customer_sk#74]
Input [5]: [ss_customer_sk#69, ss_quantity#70, ss_sales_price#71, ss_sold_date_sk#72, c_customer_sk#74]

(89) ReusedExchange [Reuses operator id: 102]
Output [1]: [d_date_sk#75]

(90) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#72]
Right keys [1]: [d_date_sk#75]
Join condition: None

(91) Project [codegen id : 3]
Output [3]: [ss_quantity#70, ss_sales_price#71, c_customer_sk#74]
Input [5]: [ss_quantity#70, ss_sales_price#71, ss_sold_date_sk#72, c_customer_sk#74, d_date_sk#75]

(92) HashAggregate [codegen id : 3]
Input [3]: [ss_quantity#70, ss_sales_price#71, c_customer_sk#74]
Keys [1]: [c_customer_sk#74]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#71 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#76, isEmpty#77]
Results [3]: [c_customer_sk#74, sum#78, isEmpty#79]

(93) Exchange
Input [3]: [c_customer_sk#74, sum#78, isEmpty#79]
Arguments: hashpartitioning(c_customer_sk#74, 5), ENSURE_REQUIREMENTS, [id=#80]

(94) HashAggregate [codegen id : 4]
Input [3]: [c_customer_sk#74, sum#78, isEmpty#79]
Keys [1]: [c_customer_sk#74]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#71 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#71 as decimal(12,2)))), DecimalType(18,2), true))#81]
Results [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#70 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#71 as decimal(12,2)))), DecimalType(18,2), true))#81 AS csales#82]

(95) HashAggregate [codegen id : 4]
Input [1]: [csales#82]
Keys: []
Functions [1]: [partial_max(csales#82)]
Aggregate Attributes [1]: [max#83]
Results [1]: [max#84]

(96) Exchange
Input [1]: [max#84]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#85]

(97) HashAggregate [codegen id : 5]
Input [1]: [max#84]
Keys: []
Functions [1]: [max(csales#82)]
Aggregate Attributes [1]: [max(csales#82)#86]
Results [1]: [max(csales#82)#86 AS tpcds_cmax#87]

Subquery:4 Hosting operator id = 83 Hosting Expression = ss_sold_date_sk#72 IN dynamicpruning#73
BroadcastExchange (102)
+- * Project (101)
   +- * Filter (100)
      +- * ColumnarToRow (99)
         +- Scan parquet default.date_dim (98)


(98) Scan parquet default.date_dim
Output [2]: [d_date_sk#75, d_year#88]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(99) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#75, d_year#88]

(100) Filter [codegen id : 1]
Input [2]: [d_date_sk#75, d_year#88]
Condition : (d_year#88 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#75))

(101) Project [codegen id : 1]
Output [1]: [d_date_sk#75]
Input [2]: [d_date_sk#75, d_year#88]

(102) BroadcastExchange
Input [1]: [d_date_sk#75]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#89]

Subquery:5 Hosting operator id = 49 Hosting Expression = ws_sold_date_sk#46 IN dynamicpruning#6

Subquery:6 Hosting operator id = 58 Hosting Expression = ReusedSubquery Subquery scalar-subquery#37, [id=#38]


