== Physical Plan ==
* HashAggregate (72)
+- Exchange (71)
   +- * HashAggregate (70)
      +- Union (69)
         :- * Project (52)
         :  +- * BroadcastHashJoin Inner BuildRight (51)
         :     :- * Project (45)
         :     :  +- * BroadcastHashJoin LeftSemi BuildRight (44)
         :     :     :- * Project (28)
         :     :     :  +- * BroadcastHashJoin LeftSemi BuildRight (27)
         :     :     :     :- * Filter (3)
         :     :     :     :  +- * ColumnarToRow (2)
         :     :     :     :     +- Scan parquet default.catalog_sales (1)
         :     :     :     +- BroadcastExchange (26)
         :     :     :        +- * Project (25)
         :     :     :           +- * Filter (24)
         :     :     :              +- * HashAggregate (23)
         :     :     :                 +- Exchange (22)
         :     :     :                    +- * HashAggregate (21)
         :     :     :                       +- * Project (20)
         :     :     :                          +- * BroadcastHashJoin Inner BuildRight (19)
         :     :     :                             :- * Project (13)
         :     :     :                             :  +- * BroadcastHashJoin Inner BuildRight (12)
         :     :     :                             :     :- * Filter (6)
         :     :     :                             :     :  +- * ColumnarToRow (5)
         :     :     :                             :     :     +- Scan parquet default.store_sales (4)
         :     :     :                             :     +- BroadcastExchange (11)
         :     :     :                             :        +- * Project (10)
         :     :     :                             :           +- * Filter (9)
         :     :     :                             :              +- * ColumnarToRow (8)
         :     :     :                             :                 +- Scan parquet default.date_dim (7)
         :     :     :                             +- BroadcastExchange (18)
         :     :     :                                +- * Project (17)
         :     :     :                                   +- * Filter (16)
         :     :     :                                      +- * ColumnarToRow (15)
         :     :     :                                         +- Scan parquet default.item (14)
         :     :     +- BroadcastExchange (43)
         :     :        +- * Project (42)
         :     :           +- * Filter (41)
         :     :              +- * HashAggregate (40)
         :     :                 +- Exchange (39)
         :     :                    +- * HashAggregate (38)
         :     :                       +- * Project (37)
         :     :                          +- * BroadcastHashJoin Inner BuildRight (36)
         :     :                             :- * Filter (31)
         :     :                             :  +- * ColumnarToRow (30)
         :     :                             :     +- Scan parquet default.store_sales (29)
         :     :                             +- BroadcastExchange (35)
         :     :                                +- * Filter (34)
         :     :                                   +- * ColumnarToRow (33)
         :     :                                      +- Scan parquet default.customer (32)
         :     +- BroadcastExchange (50)
         :        +- * Project (49)
         :           +- * Filter (48)
         :              +- * ColumnarToRow (47)
         :                 +- Scan parquet default.date_dim (46)
         +- * Project (68)
            +- * BroadcastHashJoin Inner BuildRight (67)
               :- * Project (65)
               :  +- * BroadcastHashJoin LeftSemi BuildRight (64)
               :     :- * Project (58)
               :     :  +- * BroadcastHashJoin LeftSemi BuildRight (57)
               :     :     :- * Filter (55)
               :     :     :  +- * ColumnarToRow (54)
               :     :     :     +- Scan parquet default.web_sales (53)
               :     :     +- ReusedExchange (56)
               :     +- BroadcastExchange (63)
               :        +- * Project (62)
               :           +- * Filter (61)
               :              +- * HashAggregate (60)
               :                 +- ReusedExchange (59)
               +- ReusedExchange (66)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 9]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]

(3) Filter [codegen id : 9]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Condition : isnotnull(cs_sold_date_sk#1)

(4) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#6, ss_item_sk#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(5) ColumnarToRow [codegen id : 3]
Input [2]: [ss_sold_date_sk#6, ss_item_sk#7]

(6) Filter [codegen id : 3]
Input [2]: [ss_sold_date_sk#6, ss_item_sk#7]
Condition : (isnotnull(ss_sold_date_sk#6) AND isnotnull(ss_item_sk#7))

(7) Scan parquet default.date_dim
Output [3]: [d_date_sk#8, d_date#9, d_year#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(8) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#8, d_date#9, d_year#10]

(9) Filter [codegen id : 1]
Input [3]: [d_date_sk#8, d_date#9, d_year#10]
Condition : (d_year#10 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#8))

(10) Project [codegen id : 1]
Output [2]: [d_date_sk#8, d_date#9]
Input [3]: [d_date_sk#8, d_date#9, d_year#10]

(11) BroadcastExchange
Input [2]: [d_date_sk#8, d_date#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#11]

(12) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#8]
Join condition: None

(13) Project [codegen id : 3]
Output [2]: [ss_item_sk#7, d_date#9]
Input [4]: [ss_sold_date_sk#6, ss_item_sk#7, d_date_sk#8, d_date#9]

(14) Scan parquet default.item
Output [2]: [i_item_sk#12, i_item_desc#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(15) ColumnarToRow [codegen id : 2]
Input [2]: [i_item_sk#12, i_item_desc#13]

(16) Filter [codegen id : 2]
Input [2]: [i_item_sk#12, i_item_desc#13]
Condition : isnotnull(i_item_sk#12)

(17) Project [codegen id : 2]
Output [2]: [i_item_sk#12, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, i_item_desc#13, 200, false, true) AS i_item_desc#14]
Input [2]: [i_item_sk#12, i_item_desc#13]

(18) BroadcastExchange
Input [2]: [i_item_sk#12, i_item_desc#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15]

(19) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#7]
Right keys [1]: [i_item_sk#12]
Join condition: None

(20) Project [codegen id : 3]
Output [3]: [d_date#9, i_item_sk#12, i_item_desc#14]
Input [4]: [ss_item_sk#7, d_date#9, i_item_sk#12, i_item_desc#14]

(21) HashAggregate [codegen id : 3]
Input [3]: [d_date#9, i_item_sk#12, i_item_desc#14]
Keys [3]: [substr(i_item_desc#14, 1, 30) AS substr(i_item_desc#14, 1, 30)#16, i_item_sk#12, d_date#9]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#17]
Results [4]: [substr(i_item_desc#14, 1, 30)#16, i_item_sk#12, d_date#9, count#18]

(22) Exchange
Input [4]: [substr(i_item_desc#14, 1, 30)#16, i_item_sk#12, d_date#9, count#18]
Arguments: hashpartitioning(substr(i_item_desc#14, 1, 30)#16, i_item_sk#12, d_date#9, 5), ENSURE_REQUIREMENTS, [id=#19]

(23) HashAggregate [codegen id : 4]
Input [4]: [substr(i_item_desc#14, 1, 30)#16, i_item_sk#12, d_date#9, count#18]
Keys [3]: [substr(i_item_desc#14, 1, 30)#16, i_item_sk#12, d_date#9]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#20]
Results [2]: [i_item_sk#12 AS item_sk#21, count(1)#20 AS count(1)#22]

(24) Filter [codegen id : 4]
Input [2]: [item_sk#21, count(1)#22]
Condition : (count(1)#22 > 4)

(25) Project [codegen id : 4]
Output [1]: [item_sk#21]
Input [2]: [item_sk#21, count(1)#22]

(26) BroadcastExchange
Input [1]: [item_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#23]

(27) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [item_sk#21]
Join condition: None

(28) Project [codegen id : 9]
Output [4]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]

(29) Scan parquet default.store_sales
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(30) ColumnarToRow [codegen id : 6]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]

(31) Filter [codegen id : 6]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Condition : isnotnull(ss_customer_sk#24)

(32) Scan parquet default.customer
Output [1]: [c_customer_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(33) ColumnarToRow [codegen id : 5]
Input [1]: [c_customer_sk#27]

(34) Filter [codegen id : 5]
Input [1]: [c_customer_sk#27]
Condition : isnotnull(c_customer_sk#27)

(35) BroadcastExchange
Input [1]: [c_customer_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28]

(36) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#27]
Join condition: None

(37) Project [codegen id : 6]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#27]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#27]

(38) HashAggregate [codegen id : 6]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#27]
Keys [1]: [c_customer_sk#27]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#29, isEmpty#30]
Results [3]: [c_customer_sk#27, sum#31, isEmpty#32]

(39) Exchange
Input [3]: [c_customer_sk#27, sum#31, isEmpty#32]
Arguments: hashpartitioning(c_customer_sk#27, 5), ENSURE_REQUIREMENTS, [id=#33]

(40) HashAggregate [codegen id : 7]
Input [3]: [c_customer_sk#27, sum#31, isEmpty#32]
Keys [1]: [c_customer_sk#27]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#34]
Results [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#34 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]

(41) Filter [codegen id : 7]
Input [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#36, [id=#37] as decimal(32,6)))), DecimalType(38,8), true)))

(42) Project [codegen id : 7]
Output [1]: [c_customer_sk#27]
Input [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]

(43) BroadcastExchange
Input [1]: [c_customer_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#38]

(44) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#27]
Join condition: None

(45) Project [codegen id : 9]
Output [3]: [cs_sold_date_sk#1, cs_quantity#4, cs_list_price#5]
Input [4]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]

(46) Scan parquet default.date_dim
Output [3]: [d_date_sk#8, d_year#10, d_moy#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(47) ColumnarToRow [codegen id : 8]
Input [3]: [d_date_sk#8, d_year#10, d_moy#39]

(48) Filter [codegen id : 8]
Input [3]: [d_date_sk#8, d_year#10, d_moy#39]
Condition : ((((isnotnull(d_year#10) AND isnotnull(d_moy#39)) AND (d_year#10 = 2000)) AND (d_moy#39 = 2)) AND isnotnull(d_date_sk#8))

(49) Project [codegen id : 8]
Output [1]: [d_date_sk#8]
Input [3]: [d_date_sk#8, d_year#10, d_moy#39]

(50) BroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#40]

(51) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#8]
Join condition: None

(52) Project [codegen id : 9]
Output [1]: [CheckOverflow((promote_precision(cast(cast(cs_quantity#4 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#5 as decimal(12,2)))), DecimalType(18,2), true) AS sales#41]
Input [4]: [cs_sold_date_sk#1, cs_quantity#4, cs_list_price#5, d_date_sk#8]

(53) Scan parquet default.web_sales
Output [5]: [ws_sold_date_sk#42, ws_item_sk#43, ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(54) ColumnarToRow [codegen id : 18]
Input [5]: [ws_sold_date_sk#42, ws_item_sk#43, ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46]

(55) Filter [codegen id : 18]
Input [5]: [ws_sold_date_sk#42, ws_item_sk#43, ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46]
Condition : isnotnull(ws_sold_date_sk#42)

(56) ReusedExchange [Reuses operator id: 26]
Output [1]: [item_sk#21]

(57) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [ws_item_sk#43]
Right keys [1]: [item_sk#21]
Join condition: None

(58) Project [codegen id : 18]
Output [4]: [ws_sold_date_sk#42, ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46]
Input [5]: [ws_sold_date_sk#42, ws_item_sk#43, ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46]

(59) ReusedExchange [Reuses operator id: 39]
Output [3]: [c_customer_sk#27, sum#47, isEmpty#48]

(60) HashAggregate [codegen id : 16]
Input [3]: [c_customer_sk#27, sum#47, isEmpty#48]
Keys [1]: [c_customer_sk#27]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#49]
Results [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#49 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#50]

(61) Filter [codegen id : 16]
Input [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#50]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#50) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#50 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#36, [id=#37] as decimal(32,6)))), DecimalType(38,8), true)))

(62) Project [codegen id : 16]
Output [1]: [c_customer_sk#27]
Input [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#50]

(63) BroadcastExchange
Input [1]: [c_customer_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#51]

(64) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [ws_bill_customer_sk#44]
Right keys [1]: [c_customer_sk#27]
Join condition: None

(65) Project [codegen id : 18]
Output [3]: [ws_sold_date_sk#42, ws_quantity#45, ws_list_price#46]
Input [4]: [ws_sold_date_sk#42, ws_bill_customer_sk#44, ws_quantity#45, ws_list_price#46]

(66) ReusedExchange [Reuses operator id: 50]
Output [1]: [d_date_sk#8]

(67) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [ws_sold_date_sk#42]
Right keys [1]: [d_date_sk#8]
Join condition: None

(68) Project [codegen id : 18]
Output [1]: [CheckOverflow((promote_precision(cast(cast(ws_quantity#45 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#46 as decimal(12,2)))), DecimalType(18,2), true) AS sales#52]
Input [4]: [ws_sold_date_sk#42, ws_quantity#45, ws_list_price#46, d_date_sk#8]

(69) Union

(70) HashAggregate [codegen id : 19]
Input [1]: [sales#41]
Keys: []
Functions [1]: [partial_sum(sales#41)]
Aggregate Attributes [2]: [sum#53, isEmpty#54]
Results [2]: [sum#55, isEmpty#56]

(71) Exchange
Input [2]: [sum#55, isEmpty#56]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#57]

(72) HashAggregate [codegen id : 20]
Input [2]: [sum#55, isEmpty#56]
Keys: []
Functions [1]: [sum(sales#41)]
Aggregate Attributes [1]: [sum(sales#41)#58]
Results [1]: [sum(sales#41)#58 AS sum(sales)#59]

===== Subqueries =====

Subquery:1 Hosting operator id = 41 Hosting Expression = Subquery scalar-subquery#36, [id=#37]
* HashAggregate (94)
+- Exchange (93)
   +- * HashAggregate (92)
      +- * HashAggregate (91)
         +- Exchange (90)
            +- * HashAggregate (89)
               +- * Project (88)
                  +- * BroadcastHashJoin Inner BuildRight (87)
                     :- * Project (81)
                     :  +- * BroadcastHashJoin Inner BuildRight (80)
                     :     :- * Filter (75)
                     :     :  +- * ColumnarToRow (74)
                     :     :     +- Scan parquet default.store_sales (73)
                     :     +- BroadcastExchange (79)
                     :        +- * Filter (78)
                     :           +- * ColumnarToRow (77)
                     :              +- Scan parquet default.customer (76)
                     +- BroadcastExchange (86)
                        +- * Project (85)
                           +- * Filter (84)
                              +- * ColumnarToRow (83)
                                 +- Scan parquet default.date_dim (82)


(73) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#6, ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(74) ColumnarToRow [codegen id : 3]
Input [4]: [ss_sold_date_sk#6, ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]

(75) Filter [codegen id : 3]
Input [4]: [ss_sold_date_sk#6, ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Condition : (isnotnull(ss_customer_sk#24) AND isnotnull(ss_sold_date_sk#6))

(76) Scan parquet default.customer
Output [1]: [c_customer_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(77) ColumnarToRow [codegen id : 1]
Input [1]: [c_customer_sk#27]

(78) Filter [codegen id : 1]
Input [1]: [c_customer_sk#27]
Condition : isnotnull(c_customer_sk#27)

(79) BroadcastExchange
Input [1]: [c_customer_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#60]

(80) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#27]
Join condition: None

(81) Project [codegen id : 3]
Output [4]: [ss_sold_date_sk#6, ss_quantity#25, ss_sales_price#26, c_customer_sk#27]
Input [5]: [ss_sold_date_sk#6, ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#27]

(82) Scan parquet default.date_dim
Output [2]: [d_date_sk#8, d_year#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(83) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#8, d_year#10]

(84) Filter [codegen id : 2]
Input [2]: [d_date_sk#8, d_year#10]
Condition : (d_year#10 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#8))

(85) Project [codegen id : 2]
Output [1]: [d_date_sk#8]
Input [2]: [d_date_sk#8, d_year#10]

(86) BroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#61]

(87) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#8]
Join condition: None

(88) Project [codegen id : 3]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#27]
Input [5]: [ss_sold_date_sk#6, ss_quantity#25, ss_sales_price#26, c_customer_sk#27, d_date_sk#8]

(89) HashAggregate [codegen id : 3]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#27]
Keys [1]: [c_customer_sk#27]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#62, isEmpty#63]
Results [3]: [c_customer_sk#27, sum#64, isEmpty#65]

(90) Exchange
Input [3]: [c_customer_sk#27, sum#64, isEmpty#65]
Arguments: hashpartitioning(c_customer_sk#27, 5), ENSURE_REQUIREMENTS, [id=#66]

(91) HashAggregate [codegen id : 4]
Input [3]: [c_customer_sk#27, sum#64, isEmpty#65]
Keys [1]: [c_customer_sk#27]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#67]
Results [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#67 AS csales#68]

(92) HashAggregate [codegen id : 4]
Input [1]: [csales#68]
Keys: []
Functions [1]: [partial_max(csales#68)]
Aggregate Attributes [1]: [max#69]
Results [1]: [max#70]

(93) Exchange
Input [1]: [max#70]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#71]

(94) HashAggregate [codegen id : 5]
Input [1]: [max#70]
Keys: []
Functions [1]: [max(csales#68)]
Aggregate Attributes [1]: [max(csales#68)#72]
Results [1]: [max(csales#68)#72 AS tpcds_cmax#73]

Subquery:2 Hosting operator id = 61 Hosting Expression = ReusedSubquery Subquery scalar-subquery#36, [id=#37]


