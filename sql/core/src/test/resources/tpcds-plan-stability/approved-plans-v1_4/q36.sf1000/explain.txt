== Physical Plan ==
TakeOrderedAndProject (31)
+- * Project (30)
   +- Window (29)
      +- * Sort (28)
         +- Exchange (27)
            +- * HashAggregate (26)
               +- Exchange (25)
                  +- * HashAggregate (24)
                     +- * Expand (23)
                        +- * Project (22)
                           +- * SortMergeJoin Inner (21)
                              :- * Sort (15)
                              :  +- Exchange (14)
                              :     +- * Project (13)
                              :        +- * BroadcastHashJoin Inner BuildRight (12)
                              :           :- * Project (10)
                              :           :  +- * BroadcastHashJoin Inner BuildRight (9)
                              :           :     :- * Filter (3)
                              :           :     :  +- * ColumnarToRow (2)
                              :           :     :     +- Scan parquet spark_catalog.default.store_sales (1)
                              :           :     +- BroadcastExchange (8)
                              :           :        +- * Project (7)
                              :           :           +- * Filter (6)
                              :           :              +- * ColumnarToRow (5)
                              :           :                 +- Scan parquet spark_catalog.default.store (4)
                              :           +- ReusedExchange (11)
                              +- * Sort (20)
                                 +- Exchange (19)
                                    +- * Filter (18)
                                       +- * ColumnarToRow (17)
                                          +- Scan parquet spark_catalog.default.item (16)


(1) Scan parquet spark_catalog.default.store_sales
Output [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#5), dynamicpruningexpression(ss_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]

(3) Filter [codegen id : 3]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Condition : (isnotnull(ss_item_sk#1) AND isnotnull(ss_store_sk#2))

(4) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#7, s_state#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [s_store_sk#7, s_state#8]

(6) Filter [codegen id : 1]
Input [2]: [s_store_sk#7, s_state#8]
Condition : ((isnotnull(s_state#8) AND (s_state#8 = TN)) AND isnotnull(s_store_sk#7))

(7) Project [codegen id : 1]
Output [1]: [s_store_sk#7]
Input [2]: [s_store_sk#7, s_state#8]

(8) BroadcastExchange
Input [1]: [s_store_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#7]
Join type: Inner
Join condition: None

(10) Project [codegen id : 3]
Output [4]: [ss_item_sk#1, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Input [6]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5, s_store_sk#7]

(11) ReusedExchange [Reuses operator id: 36]
Output [1]: [d_date_sk#9]

(12) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#5]
Right keys [1]: [d_date_sk#9]
Join type: Inner
Join condition: None

(13) Project [codegen id : 3]
Output [3]: [ss_item_sk#1, ss_ext_sales_price#3, ss_net_profit#4]
Input [5]: [ss_item_sk#1, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5, d_date_sk#9]

(14) Exchange
Input [3]: [ss_item_sk#1, ss_ext_sales_price#3, ss_net_profit#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(15) Sort [codegen id : 4]
Input [3]: [ss_item_sk#1, ss_ext_sales_price#3, ss_net_profit#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(16) Scan parquet spark_catalog.default.item
Output [3]: [i_item_sk#10, i_class#11, i_category#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(17) ColumnarToRow [codegen id : 5]
Input [3]: [i_item_sk#10, i_class#11, i_category#12]

(18) Filter [codegen id : 5]
Input [3]: [i_item_sk#10, i_class#11, i_category#12]
Condition : isnotnull(i_item_sk#10)

(19) Exchange
Input [3]: [i_item_sk#10, i_class#11, i_category#12]
Arguments: hashpartitioning(i_item_sk#10, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(20) Sort [codegen id : 6]
Input [3]: [i_item_sk#10, i_class#11, i_category#12]
Arguments: [i_item_sk#10 ASC NULLS FIRST], false, 0

(21) SortMergeJoin [codegen id : 7]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#10]
Join type: Inner
Join condition: None

(22) Project [codegen id : 7]
Output [4]: [ss_ext_sales_price#3, ss_net_profit#4, i_category#12, i_class#11]
Input [6]: [ss_item_sk#1, ss_ext_sales_price#3, ss_net_profit#4, i_item_sk#10, i_class#11, i_category#12]

(23) Expand [codegen id : 7]
Input [4]: [ss_ext_sales_price#3, ss_net_profit#4, i_category#12, i_class#11]
Arguments: [[ss_ext_sales_price#3, ss_net_profit#4, i_category#12, i_class#11, 0], [ss_ext_sales_price#3, ss_net_profit#4, i_category#12, null, 1], [ss_ext_sales_price#3, ss_net_profit#4, null, null, 3]], [ss_ext_sales_price#3, ss_net_profit#4, i_category#13, i_class#14, spark_grouping_id#15]

(24) HashAggregate [codegen id : 7]
Input [5]: [ss_ext_sales_price#3, ss_net_profit#4, i_category#13, i_class#14, spark_grouping_id#15]
Keys [3]: [i_category#13, i_class#14, spark_grouping_id#15]
Functions [2]: [partial_sum(UnscaledValue(ss_net_profit#4)), partial_sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [2]: [sum#16, sum#17]
Results [5]: [i_category#13, i_class#14, spark_grouping_id#15, sum#18, sum#19]

(25) Exchange
Input [5]: [i_category#13, i_class#14, spark_grouping_id#15, sum#18, sum#19]
Arguments: hashpartitioning(i_category#13, i_class#14, spark_grouping_id#15, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(26) HashAggregate [codegen id : 8]
Input [5]: [i_category#13, i_class#14, spark_grouping_id#15, sum#18, sum#19]
Keys [3]: [i_category#13, i_class#14, spark_grouping_id#15]
Functions [2]: [sum(UnscaledValue(ss_net_profit#4)), sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#4))#20, sum(UnscaledValue(ss_ext_sales_price#3))#21]
Results [7]: [(MakeDecimal(sum(UnscaledValue(ss_net_profit#4))#20,17,2) / MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#21,17,2)) AS gross_margin#22, i_category#13, i_class#14, (cast((shiftright(spark_grouping_id#15, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#15, 0) & 1) as tinyint)) AS lochierarchy#23, (cast((shiftright(spark_grouping_id#15, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#15, 0) & 1) as tinyint)) AS _w1#24, CASE WHEN (cast((shiftright(spark_grouping_id#15, 0) & 1) as tinyint) = 0) THEN i_category#13 END AS _w2#25, (MakeDecimal(sum(UnscaledValue(ss_net_profit#4))#20,17,2) / MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#21,17,2)) AS _w3#26]

(27) Exchange
Input [7]: [gross_margin#22, i_category#13, i_class#14, lochierarchy#23, _w1#24, _w2#25, _w3#26]
Arguments: hashpartitioning(_w1#24, _w2#25, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(28) Sort [codegen id : 9]
Input [7]: [gross_margin#22, i_category#13, i_class#14, lochierarchy#23, _w1#24, _w2#25, _w3#26]
Arguments: [_w1#24 ASC NULLS FIRST, _w2#25 ASC NULLS FIRST, _w3#26 ASC NULLS FIRST], false, 0

(29) Window
Input [7]: [gross_margin#22, i_category#13, i_class#14, lochierarchy#23, _w1#24, _w2#25, _w3#26]
Arguments: [rank(_w3#26) windowspecdefinition(_w1#24, _w2#25, _w3#26 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#27], [_w1#24, _w2#25], [_w3#26 ASC NULLS FIRST]

(30) Project [codegen id : 10]
Output [5]: [gross_margin#22, i_category#13, i_class#14, lochierarchy#23, rank_within_parent#27]
Input [8]: [gross_margin#22, i_category#13, i_class#14, lochierarchy#23, _w1#24, _w2#25, _w3#26, rank_within_parent#27]

(31) TakeOrderedAndProject
Input [5]: [gross_margin#22, i_category#13, i_class#14, lochierarchy#23, rank_within_parent#27]
Arguments: 100, [lochierarchy#23 DESC NULLS LAST, CASE WHEN (lochierarchy#23 = 0) THEN i_category#13 END ASC NULLS FIRST, rank_within_parent#27 ASC NULLS FIRST], [gross_margin#22, i_category#13, i_class#14, lochierarchy#23, rank_within_parent#27]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (36)
+- * Project (35)
   +- * Filter (34)
      +- * ColumnarToRow (33)
         +- Scan parquet spark_catalog.default.date_dim (32)


(32) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#9, d_year#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(33) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#28]

(34) Filter [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#28]
Condition : ((isnotnull(d_year#28) AND (d_year#28 = 2001)) AND isnotnull(d_date_sk#9))

(35) Project [codegen id : 1]
Output [1]: [d_date_sk#9]
Input [2]: [d_date_sk#9, d_year#28]

(36) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]


