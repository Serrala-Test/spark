== Physical Plan ==
* HashAggregate (57)
+- Exchange (56)
   +- * HashAggregate (55)
      +- * Project (54)
         +- * SortMergeJoin LeftAnti (53)
            :- * SortMergeJoin LeftAnti (35)
            :  :- * Sort (17)
            :  :  +- Exchange (16)
            :  :     +- * HashAggregate (15)
            :  :        +- Exchange (14)
            :  :           +- * HashAggregate (13)
            :  :              +- * Project (12)
            :  :                 +- * SortMergeJoin Inner (11)
            :  :                    :- * Sort (8)
            :  :                    :  +- Exchange (7)
            :  :                    :     +- * Project (6)
            :  :                    :        +- * BroadcastHashJoin Inner BuildRight (5)
            :  :                    :           :- * Filter (3)
            :  :                    :           :  +- * ColumnarToRow (2)
            :  :                    :           :     +- Scan parquet spark_catalog.default.store_sales (1)
            :  :                    :           +- ReusedExchange (4)
            :  :                    +- * Sort (10)
            :  :                       +- ReusedExchange (9)
            :  +- * Sort (34)
            :     +- Exchange (33)
            :        +- * HashAggregate (32)
            :           +- Exchange (31)
            :              +- * HashAggregate (30)
            :                 +- * Project (29)
            :                    +- * SortMergeJoin Inner (28)
            :                       :- * Sort (25)
            :                       :  +- Exchange (24)
            :                       :     +- * Project (23)
            :                       :        +- * BroadcastHashJoin Inner BuildRight (22)
            :                       :           :- * Filter (20)
            :                       :           :  +- * ColumnarToRow (19)
            :                       :           :     +- Scan parquet spark_catalog.default.catalog_sales (18)
            :                       :           +- ReusedExchange (21)
            :                       +- * Sort (27)
            :                          +- ReusedExchange (26)
            +- * Sort (52)
               +- Exchange (51)
                  +- * HashAggregate (50)
                     +- Exchange (49)
                        +- * HashAggregate (48)
                           +- * Project (47)
                              +- * SortMergeJoin Inner (46)
                                 :- * Sort (43)
                                 :  +- Exchange (42)
                                 :     +- * Project (41)
                                 :        +- * BroadcastHashJoin Inner BuildRight (40)
                                 :           :- * Filter (38)
                                 :           :  +- * ColumnarToRow (37)
                                 :           :     +- Scan parquet spark_catalog.default.web_sales (36)
                                 :           +- ReusedExchange (39)
                                 +- * Sort (45)
                                    +- ReusedExchange (44)


(1) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_customer_sk#1, ss_sold_date_sk#2]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#2), dynamicpruningexpression(ss_sold_date_sk#2 IN dynamicpruning#3)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int>

(2) ColumnarToRow [codegen id : 2]
Input [2]: [ss_customer_sk#1, ss_sold_date_sk#2]

(3) Filter [codegen id : 2]
Input [2]: [ss_customer_sk#1, ss_sold_date_sk#2]
Condition : (isnotnull(ss_customer_sk#1) AND might_contain(Subquery scalar-subquery#4, [id=#5], xxhash64(ss_customer_sk#1, 42), false))

(4) ReusedExchange [Reuses operator id: 69]
Output [2]: [d_date_sk#6, d_date#7]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#2]
Right keys [1]: [d_date_sk#6]
Join type: Inner
Join condition: None

(6) Project [codegen id : 2]
Output [2]: [ss_customer_sk#1, d_date#7]
Input [4]: [ss_customer_sk#1, ss_sold_date_sk#2, d_date_sk#6, d_date#7]

(7) Exchange
Input [2]: [ss_customer_sk#1, d_date#7]
Arguments: hashpartitioning(ss_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(8) Sort [codegen id : 3]
Input [2]: [ss_customer_sk#1, d_date#7]
Arguments: [ss_customer_sk#1 ASC NULLS FIRST], false, 0

(9) ReusedExchange [Reuses operator id: 61]
Output [3]: [c_customer_sk#8, c_first_name#9, c_last_name#10]

(10) Sort [codegen id : 5]
Input [3]: [c_customer_sk#8, c_first_name#9, c_last_name#10]
Arguments: [c_customer_sk#8 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#8]
Join type: Inner
Join condition: None

(12) Project [codegen id : 6]
Output [3]: [c_last_name#10, c_first_name#9, d_date#7]
Input [5]: [ss_customer_sk#1, d_date#7, c_customer_sk#8, c_first_name#9, c_last_name#10]

(13) HashAggregate [codegen id : 6]
Input [3]: [c_last_name#10, c_first_name#9, d_date#7]
Keys [3]: [c_last_name#10, c_first_name#9, d_date#7]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#10, c_first_name#9, d_date#7]

(14) Exchange
Input [3]: [c_last_name#10, c_first_name#9, d_date#7]
Arguments: hashpartitioning(c_last_name#10, c_first_name#9, d_date#7, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(15) HashAggregate [codegen id : 7]
Input [3]: [c_last_name#10, c_first_name#9, d_date#7]
Keys [3]: [c_last_name#10, c_first_name#9, d_date#7]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#10, c_first_name#9, d_date#7]

(16) Exchange
Input [3]: [c_last_name#10, c_first_name#9, d_date#7]
Arguments: hashpartitioning(coalesce(c_last_name#10, ), isnull(c_last_name#10), coalesce(c_first_name#9, ), isnull(c_first_name#9), coalesce(d_date#7, 1970-01-01), isnull(d_date#7), 5), ENSURE_REQUIREMENTS, [plan_id=3]

(17) Sort [codegen id : 8]
Input [3]: [c_last_name#10, c_first_name#9, d_date#7]
Arguments: [coalesce(c_last_name#10, ) ASC NULLS FIRST, isnull(c_last_name#10) ASC NULLS FIRST, coalesce(c_first_name#9, ) ASC NULLS FIRST, isnull(c_first_name#9) ASC NULLS FIRST, coalesce(d_date#7, 1970-01-01) ASC NULLS FIRST, isnull(d_date#7) ASC NULLS FIRST], false, 0

(18) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_bill_customer_sk#11, cs_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#12), dynamicpruningexpression(cs_sold_date_sk#12 IN dynamicpruning#3)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int>

(19) ColumnarToRow [codegen id : 10]
Input [2]: [cs_bill_customer_sk#11, cs_sold_date_sk#12]

(20) Filter [codegen id : 10]
Input [2]: [cs_bill_customer_sk#11, cs_sold_date_sk#12]
Condition : (isnotnull(cs_bill_customer_sk#11) AND might_contain(Subquery scalar-subquery#13, [id=#14], xxhash64(cs_bill_customer_sk#11, 42), false))

(21) ReusedExchange [Reuses operator id: 69]
Output [2]: [d_date_sk#15, d_date#16]

(22) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#12]
Right keys [1]: [d_date_sk#15]
Join type: Inner
Join condition: None

(23) Project [codegen id : 10]
Output [2]: [cs_bill_customer_sk#11, d_date#16]
Input [4]: [cs_bill_customer_sk#11, cs_sold_date_sk#12, d_date_sk#15, d_date#16]

(24) Exchange
Input [2]: [cs_bill_customer_sk#11, d_date#16]
Arguments: hashpartitioning(cs_bill_customer_sk#11, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(25) Sort [codegen id : 11]
Input [2]: [cs_bill_customer_sk#11, d_date#16]
Arguments: [cs_bill_customer_sk#11 ASC NULLS FIRST], false, 0

(26) ReusedExchange [Reuses operator id: 61]
Output [3]: [c_customer_sk#17, c_first_name#18, c_last_name#19]

(27) Sort [codegen id : 13]
Input [3]: [c_customer_sk#17, c_first_name#18, c_last_name#19]
Arguments: [c_customer_sk#17 ASC NULLS FIRST], false, 0

(28) SortMergeJoin [codegen id : 14]
Left keys [1]: [cs_bill_customer_sk#11]
Right keys [1]: [c_customer_sk#17]
Join type: Inner
Join condition: None

(29) Project [codegen id : 14]
Output [3]: [c_last_name#19, c_first_name#18, d_date#16]
Input [5]: [cs_bill_customer_sk#11, d_date#16, c_customer_sk#17, c_first_name#18, c_last_name#19]

(30) HashAggregate [codegen id : 14]
Input [3]: [c_last_name#19, c_first_name#18, d_date#16]
Keys [3]: [c_last_name#19, c_first_name#18, d_date#16]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#19, c_first_name#18, d_date#16]

(31) Exchange
Input [3]: [c_last_name#19, c_first_name#18, d_date#16]
Arguments: hashpartitioning(c_last_name#19, c_first_name#18, d_date#16, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(32) HashAggregate [codegen id : 15]
Input [3]: [c_last_name#19, c_first_name#18, d_date#16]
Keys [3]: [c_last_name#19, c_first_name#18, d_date#16]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#19, c_first_name#18, d_date#16]

(33) Exchange
Input [3]: [c_last_name#19, c_first_name#18, d_date#16]
Arguments: hashpartitioning(coalesce(c_last_name#19, ), isnull(c_last_name#19), coalesce(c_first_name#18, ), isnull(c_first_name#18), coalesce(d_date#16, 1970-01-01), isnull(d_date#16), 5), ENSURE_REQUIREMENTS, [plan_id=6]

(34) Sort [codegen id : 16]
Input [3]: [c_last_name#19, c_first_name#18, d_date#16]
Arguments: [coalesce(c_last_name#19, ) ASC NULLS FIRST, isnull(c_last_name#19) ASC NULLS FIRST, coalesce(c_first_name#18, ) ASC NULLS FIRST, isnull(c_first_name#18) ASC NULLS FIRST, coalesce(d_date#16, 1970-01-01) ASC NULLS FIRST, isnull(d_date#16) ASC NULLS FIRST], false, 0

(35) SortMergeJoin [codegen id : 17]
Left keys [6]: [coalesce(c_last_name#10, ), isnull(c_last_name#10), coalesce(c_first_name#9, ), isnull(c_first_name#9), coalesce(d_date#7, 1970-01-01), isnull(d_date#7)]
Right keys [6]: [coalesce(c_last_name#19, ), isnull(c_last_name#19), coalesce(c_first_name#18, ), isnull(c_first_name#18), coalesce(d_date#16, 1970-01-01), isnull(d_date#16)]
Join type: LeftAnti
Join condition: None

(36) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_bill_customer_sk#20, ws_sold_date_sk#21]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#21), dynamicpruningexpression(ws_sold_date_sk#21 IN dynamicpruning#3)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int>

(37) ColumnarToRow [codegen id : 19]
Input [2]: [ws_bill_customer_sk#20, ws_sold_date_sk#21]

(38) Filter [codegen id : 19]
Input [2]: [ws_bill_customer_sk#20, ws_sold_date_sk#21]
Condition : (isnotnull(ws_bill_customer_sk#20) AND might_contain(ReusedSubquery Subquery scalar-subquery#13, [id=#14], xxhash64(ws_bill_customer_sk#20, 42), false))

(39) ReusedExchange [Reuses operator id: 69]
Output [2]: [d_date_sk#22, d_date#23]

(40) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [ws_sold_date_sk#21]
Right keys [1]: [d_date_sk#22]
Join type: Inner
Join condition: None

(41) Project [codegen id : 19]
Output [2]: [ws_bill_customer_sk#20, d_date#23]
Input [4]: [ws_bill_customer_sk#20, ws_sold_date_sk#21, d_date_sk#22, d_date#23]

(42) Exchange
Input [2]: [ws_bill_customer_sk#20, d_date#23]
Arguments: hashpartitioning(ws_bill_customer_sk#20, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(43) Sort [codegen id : 20]
Input [2]: [ws_bill_customer_sk#20, d_date#23]
Arguments: [ws_bill_customer_sk#20 ASC NULLS FIRST], false, 0

(44) ReusedExchange [Reuses operator id: 61]
Output [3]: [c_customer_sk#24, c_first_name#25, c_last_name#26]

(45) Sort [codegen id : 22]
Input [3]: [c_customer_sk#24, c_first_name#25, c_last_name#26]
Arguments: [c_customer_sk#24 ASC NULLS FIRST], false, 0

(46) SortMergeJoin [codegen id : 23]
Left keys [1]: [ws_bill_customer_sk#20]
Right keys [1]: [c_customer_sk#24]
Join type: Inner
Join condition: None

(47) Project [codegen id : 23]
Output [3]: [c_last_name#26, c_first_name#25, d_date#23]
Input [5]: [ws_bill_customer_sk#20, d_date#23, c_customer_sk#24, c_first_name#25, c_last_name#26]

(48) HashAggregate [codegen id : 23]
Input [3]: [c_last_name#26, c_first_name#25, d_date#23]
Keys [3]: [c_last_name#26, c_first_name#25, d_date#23]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#26, c_first_name#25, d_date#23]

(49) Exchange
Input [3]: [c_last_name#26, c_first_name#25, d_date#23]
Arguments: hashpartitioning(c_last_name#26, c_first_name#25, d_date#23, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(50) HashAggregate [codegen id : 24]
Input [3]: [c_last_name#26, c_first_name#25, d_date#23]
Keys [3]: [c_last_name#26, c_first_name#25, d_date#23]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#26, c_first_name#25, d_date#23]

(51) Exchange
Input [3]: [c_last_name#26, c_first_name#25, d_date#23]
Arguments: hashpartitioning(coalesce(c_last_name#26, ), isnull(c_last_name#26), coalesce(c_first_name#25, ), isnull(c_first_name#25), coalesce(d_date#23, 1970-01-01), isnull(d_date#23), 5), ENSURE_REQUIREMENTS, [plan_id=9]

(52) Sort [codegen id : 25]
Input [3]: [c_last_name#26, c_first_name#25, d_date#23]
Arguments: [coalesce(c_last_name#26, ) ASC NULLS FIRST, isnull(c_last_name#26) ASC NULLS FIRST, coalesce(c_first_name#25, ) ASC NULLS FIRST, isnull(c_first_name#25) ASC NULLS FIRST, coalesce(d_date#23, 1970-01-01) ASC NULLS FIRST, isnull(d_date#23) ASC NULLS FIRST], false, 0

(53) SortMergeJoin [codegen id : 26]
Left keys [6]: [coalesce(c_last_name#10, ), isnull(c_last_name#10), coalesce(c_first_name#9, ), isnull(c_first_name#9), coalesce(d_date#7, 1970-01-01), isnull(d_date#7)]
Right keys [6]: [coalesce(c_last_name#26, ), isnull(c_last_name#26), coalesce(c_first_name#25, ), isnull(c_first_name#25), coalesce(d_date#23, 1970-01-01), isnull(d_date#23)]
Join type: LeftAnti
Join condition: None

(54) Project [codegen id : 26]
Output: []
Input [3]: [c_last_name#10, c_first_name#9, d_date#7]

(55) HashAggregate [codegen id : 26]
Input: []
Keys: []
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#27]
Results [1]: [count#28]

(56) Exchange
Input [1]: [count#28]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=10]

(57) HashAggregate [codegen id : 27]
Input [1]: [count#28]
Keys: []
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#29]
Results [1]: [count(1)#29 AS count(1)#30]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#4, [id=#5]
ObjectHashAggregate (64)
+- Exchange (63)
   +- ObjectHashAggregate (62)
      +- Exchange (61)
         +- * Filter (60)
            +- * ColumnarToRow (59)
               +- Scan parquet spark_catalog.default.customer (58)


(58) Scan parquet spark_catalog.default.customer
Output [3]: [c_customer_sk#8, c_first_name#9, c_last_name#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(59) ColumnarToRow [codegen id : 1]
Input [3]: [c_customer_sk#8, c_first_name#9, c_last_name#10]

(60) Filter [codegen id : 1]
Input [3]: [c_customer_sk#8, c_first_name#9, c_last_name#10]
Condition : isnotnull(c_customer_sk#8)

(61) Exchange
Input [3]: [c_customer_sk#8, c_first_name#9, c_last_name#10]
Arguments: hashpartitioning(c_customer_sk#8, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(62) ObjectHashAggregate
Input [3]: [c_customer_sk#8, c_first_name#9, c_last_name#10]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(c_customer_sk#8, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [buf#31]
Results [1]: [buf#32]

(63) Exchange
Input [1]: [buf#32]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=12]

(64) ObjectHashAggregate
Input [1]: [buf#32]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(c_customer_sk#8, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(c_customer_sk#8, 42), 2000000, 16000000, 0, 0)#33]
Results [1]: [bloom_filter_agg(xxhash64(c_customer_sk#8, 42), 2000000, 16000000, 0, 0)#33 AS bloomFilter#34]

Subquery:2 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#2 IN dynamicpruning#3
BroadcastExchange (69)
+- * Project (68)
   +- * Filter (67)
      +- * ColumnarToRow (66)
         +- Scan parquet spark_catalog.default.date_dim (65)


(65) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#6, d_date#7, d_month_seq#35]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(66) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#6, d_date#7, d_month_seq#35]

(67) Filter [codegen id : 1]
Input [3]: [d_date_sk#6, d_date#7, d_month_seq#35]
Condition : (((isnotnull(d_month_seq#35) AND (d_month_seq#35 >= 1200)) AND (d_month_seq#35 <= 1211)) AND isnotnull(d_date_sk#6))

(68) Project [codegen id : 1]
Output [2]: [d_date_sk#6, d_date#7]
Input [3]: [d_date_sk#6, d_date#7, d_month_seq#35]

(69) BroadcastExchange
Input [2]: [d_date_sk#6, d_date#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=13]

Subquery:3 Hosting operator id = 20 Hosting Expression = Subquery scalar-subquery#13, [id=#14]
ObjectHashAggregate (76)
+- Exchange (75)
   +- ObjectHashAggregate (74)
      +- Exchange (73)
         +- * Filter (72)
            +- * ColumnarToRow (71)
               +- Scan parquet spark_catalog.default.customer (70)


(70) Scan parquet spark_catalog.default.customer
Output [3]: [c_customer_sk#17, c_first_name#18, c_last_name#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(71) ColumnarToRow [codegen id : 1]
Input [3]: [c_customer_sk#17, c_first_name#18, c_last_name#19]

(72) Filter [codegen id : 1]
Input [3]: [c_customer_sk#17, c_first_name#18, c_last_name#19]
Condition : isnotnull(c_customer_sk#17)

(73) Exchange
Input [3]: [c_customer_sk#17, c_first_name#18, c_last_name#19]
Arguments: hashpartitioning(c_customer_sk#8, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(74) ObjectHashAggregate
Input [3]: [c_customer_sk#17, c_first_name#18, c_last_name#19]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(c_customer_sk#17, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [buf#36]
Results [1]: [buf#37]

(75) Exchange
Input [1]: [buf#37]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=15]

(76) ObjectHashAggregate
Input [1]: [buf#37]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(c_customer_sk#17, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(c_customer_sk#17, 42), 2000000, 16000000, 0, 0)#38]
Results [1]: [bloom_filter_agg(xxhash64(c_customer_sk#17, 42), 2000000, 16000000, 0, 0)#38 AS bloomFilter#39]

Subquery:4 Hosting operator id = 18 Hosting Expression = cs_sold_date_sk#12 IN dynamicpruning#3

Subquery:5 Hosting operator id = 38 Hosting Expression = ReusedSubquery Subquery scalar-subquery#13, [id=#14]

Subquery:6 Hosting operator id = 36 Hosting Expression = ws_sold_date_sk#21 IN dynamicpruning#3


