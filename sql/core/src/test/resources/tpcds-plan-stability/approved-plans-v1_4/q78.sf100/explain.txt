== Physical Plan ==
TakeOrderedAndProject (70)
+- * Project (69)
   +- * SortMergeJoin Inner (68)
      :- * Project (46)
      :  +- * SortMergeJoin Inner (45)
      :     :- * Sort (24)
      :     :  +- * Filter (23)
      :     :     +- * HashAggregate (22)
      :     :        +- Exchange (21)
      :     :           +- * HashAggregate (20)
      :     :              +- * Project (19)
      :     :                 +- * BroadcastHashJoin Inner BuildRight (18)
      :     :                    :- * Project (13)
      :     :                    :  +- * Filter (12)
      :     :                    :     +- SortMergeJoin LeftOuter (11)
      :     :                    :        :- * Sort (5)
      :     :                    :        :  +- Exchange (4)
      :     :                    :        :     +- * Filter (3)
      :     :                    :        :        +- * ColumnarToRow (2)
      :     :                    :        :           +- Scan parquet default.catalog_sales (1)
      :     :                    :        +- * Sort (10)
      :     :                    :           +- Exchange (9)
      :     :                    :              +- * Filter (8)
      :     :                    :                 +- * ColumnarToRow (7)
      :     :                    :                    +- Scan parquet default.catalog_returns (6)
      :     :                    +- BroadcastExchange (17)
      :     :                       +- * Filter (16)
      :     :                          +- * ColumnarToRow (15)
      :     :                             +- Scan parquet default.date_dim (14)
      :     +- * Sort (44)
      :        +- * HashAggregate (43)
      :           +- Exchange (42)
      :              +- * HashAggregate (41)
      :                 +- * Project (40)
      :                    +- * BroadcastHashJoin Inner BuildRight (39)
      :                       :- * Project (37)
      :                       :  +- * Filter (36)
      :                       :     +- SortMergeJoin LeftOuter (35)
      :                       :        :- * Sort (29)
      :                       :        :  +- Exchange (28)
      :                       :        :     +- * Filter (27)
      :                       :        :        +- * ColumnarToRow (26)
      :                       :        :           +- Scan parquet default.store_sales (25)
      :                       :        +- * Sort (34)
      :                       :           +- Exchange (33)
      :                       :              +- * Filter (32)
      :                       :                 +- * ColumnarToRow (31)
      :                       :                    +- Scan parquet default.store_returns (30)
      :                       +- ReusedExchange (38)
      +- * Sort (67)
         +- * Filter (66)
            +- * HashAggregate (65)
               +- Exchange (64)
                  +- * HashAggregate (63)
                     +- * Project (62)
                        +- * BroadcastHashJoin Inner BuildRight (61)
                           :- * Project (59)
                           :  +- * Filter (58)
                           :     +- SortMergeJoin LeftOuter (57)
                           :        :- * Sort (51)
                           :        :  +- Exchange (50)
                           :        :     +- * Filter (49)
                           :        :        +- * ColumnarToRow (48)
                           :        :           +- Scan parquet default.web_sales (47)
                           :        +- * Sort (56)
                           :           +- Exchange (55)
                           :              +- * Filter (54)
                           :                 +- * ColumnarToRow (53)
                           :                    +- Scan parquet default.web_returns (52)
                           +- ReusedExchange (60)


(1) Scan parquet default.catalog_sales
Output [7]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_order_number#4, cs_quantity#5, cs_wholesale_cost#6, cs_sales_price#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_order_number:int,cs_quantity:int,cs_wholesale_cost:decimal(7,2),cs_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [7]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_order_number#4, cs_quantity#5, cs_wholesale_cost#6, cs_sales_price#7]

(3) Filter [codegen id : 1]
Input [7]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_order_number#4, cs_quantity#5, cs_wholesale_cost#6, cs_sales_price#7]
Condition : ((isnotnull(cs_sold_date_sk#1) AND isnotnull(cs_item_sk#3)) AND isnotnull(cs_bill_customer_sk#2))

(4) Exchange
Input [7]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_order_number#4, cs_quantity#5, cs_wholesale_cost#6, cs_sales_price#7]
Arguments: hashpartitioning(cs_order_number#4, cs_item_sk#3, 5), true, [id=#8]

(5) Sort [codegen id : 2]
Input [7]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_order_number#4, cs_quantity#5, cs_wholesale_cost#6, cs_sales_price#7]
Arguments: [cs_order_number#4 ASC NULLS FIRST, cs_item_sk#3 ASC NULLS FIRST], false, 0

(6) Scan parquet default.catalog_returns
Output [2]: [cr_item_sk#9, cr_order_number#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int>

(7) ColumnarToRow [codegen id : 3]
Input [2]: [cr_item_sk#9, cr_order_number#10]

(8) Filter [codegen id : 3]
Input [2]: [cr_item_sk#9, cr_order_number#10]
Condition : (isnotnull(cr_order_number#10) AND isnotnull(cr_item_sk#9))

(9) Exchange
Input [2]: [cr_item_sk#9, cr_order_number#10]
Arguments: hashpartitioning(cr_order_number#10, cr_item_sk#9, 5), true, [id=#11]

(10) Sort [codegen id : 4]
Input [2]: [cr_item_sk#9, cr_order_number#10]
Arguments: [cr_order_number#10 ASC NULLS FIRST, cr_item_sk#9 ASC NULLS FIRST], false, 0

(11) SortMergeJoin
Left keys [2]: [cs_order_number#4, cs_item_sk#3]
Right keys [2]: [cr_order_number#10, cr_item_sk#9]
Join condition: None

(12) Filter [codegen id : 6]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_order_number#4, cs_quantity#5, cs_wholesale_cost#6, cs_sales_price#7, cr_item_sk#9, cr_order_number#10]
Condition : isnull(cr_order_number#10)

(13) Project [codegen id : 6]
Output [6]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#5, cs_wholesale_cost#6, cs_sales_price#7]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_order_number#4, cs_quantity#5, cs_wholesale_cost#6, cs_sales_price#7, cr_item_sk#9, cr_order_number#10]

(14) Scan parquet default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk), EqualTo(d_year,2000), IsNotNull(d_year)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(15) ColumnarToRow [codegen id : 5]
Input [2]: [d_date_sk#12, d_year#13]

(16) Filter [codegen id : 5]
Input [2]: [d_date_sk#12, d_year#13]
Condition : ((isnotnull(d_date_sk#12) AND (d_year#13 = 2000)) AND isnotnull(d_year#13))

(17) BroadcastExchange
Input [2]: [d_date_sk#12, d_year#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14]

(18) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#12]
Join condition: None

(19) Project [codegen id : 6]
Output [6]: [cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#5, cs_wholesale_cost#6, cs_sales_price#7, d_year#13]
Input [8]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#5, cs_wholesale_cost#6, cs_sales_price#7, d_date_sk#12, d_year#13]

(20) HashAggregate [codegen id : 6]
Input [6]: [cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#5, cs_wholesale_cost#6, cs_sales_price#7, d_year#13]
Keys [3]: [d_year#13, cs_item_sk#3, cs_bill_customer_sk#2]
Functions [3]: [partial_sum(cast(cs_quantity#5 as bigint)), partial_sum(UnscaledValue(cs_wholesale_cost#6)), partial_sum(UnscaledValue(cs_sales_price#7))]
Aggregate Attributes [3]: [sum#15, sum#16, sum#17]
Results [6]: [d_year#13, cs_item_sk#3, cs_bill_customer_sk#2, sum#18, sum#19, sum#20]

(21) Exchange
Input [6]: [d_year#13, cs_item_sk#3, cs_bill_customer_sk#2, sum#18, sum#19, sum#20]
Arguments: hashpartitioning(d_year#13, cs_item_sk#3, cs_bill_customer_sk#2, 5), true, [id=#21]

(22) HashAggregate [codegen id : 7]
Input [6]: [d_year#13, cs_item_sk#3, cs_bill_customer_sk#2, sum#18, sum#19, sum#20]
Keys [3]: [d_year#13, cs_item_sk#3, cs_bill_customer_sk#2]
Functions [3]: [sum(cast(cs_quantity#5 as bigint)), sum(UnscaledValue(cs_wholesale_cost#6)), sum(UnscaledValue(cs_sales_price#7))]
Aggregate Attributes [3]: [sum(cast(cs_quantity#5 as bigint))#22, sum(UnscaledValue(cs_wholesale_cost#6))#23, sum(UnscaledValue(cs_sales_price#7))#24]
Results [6]: [d_year#13 AS cs_sold_year#25, cs_item_sk#3, cs_bill_customer_sk#2 AS cs_customer_sk#26, sum(cast(cs_quantity#5 as bigint))#22 AS cs_qty#27, MakeDecimal(sum(UnscaledValue(cs_wholesale_cost#6))#23,17,2) AS cs_wc#28, MakeDecimal(sum(UnscaledValue(cs_sales_price#7))#24,17,2) AS cs_sp#29]

(23) Filter [codegen id : 7]
Input [6]: [cs_sold_year#25, cs_item_sk#3, cs_customer_sk#26, cs_qty#27, cs_wc#28, cs_sp#29]
Condition : (coalesce(cs_qty#27, 0) > 0)

(24) Sort [codegen id : 7]
Input [6]: [cs_sold_year#25, cs_item_sk#3, cs_customer_sk#26, cs_qty#27, cs_wc#28, cs_sp#29]
Arguments: [cs_sold_year#25 ASC NULLS FIRST, cs_item_sk#3 ASC NULLS FIRST, cs_customer_sk#26 ASC NULLS FIRST], false, 0

(25) Scan parquet default.store_sales
Output [7]: [ss_sold_date_sk#30, ss_item_sk#31, ss_customer_sk#32, ss_ticket_number#33, ss_quantity#34, ss_wholesale_cost#35, ss_sales_price#36]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_sales_price:decimal(7,2)>

(26) ColumnarToRow [codegen id : 8]
Input [7]: [ss_sold_date_sk#30, ss_item_sk#31, ss_customer_sk#32, ss_ticket_number#33, ss_quantity#34, ss_wholesale_cost#35, ss_sales_price#36]

(27) Filter [codegen id : 8]
Input [7]: [ss_sold_date_sk#30, ss_item_sk#31, ss_customer_sk#32, ss_ticket_number#33, ss_quantity#34, ss_wholesale_cost#35, ss_sales_price#36]
Condition : ((isnotnull(ss_sold_date_sk#30) AND isnotnull(ss_item_sk#31)) AND isnotnull(ss_customer_sk#32))

(28) Exchange
Input [7]: [ss_sold_date_sk#30, ss_item_sk#31, ss_customer_sk#32, ss_ticket_number#33, ss_quantity#34, ss_wholesale_cost#35, ss_sales_price#36]
Arguments: hashpartitioning(cast(ss_ticket_number#33 as bigint), cast(ss_item_sk#31 as bigint), 5), true, [id=#37]

(29) Sort [codegen id : 9]
Input [7]: [ss_sold_date_sk#30, ss_item_sk#31, ss_customer_sk#32, ss_ticket_number#33, ss_quantity#34, ss_wholesale_cost#35, ss_sales_price#36]
Arguments: [cast(ss_ticket_number#33 as bigint) ASC NULLS FIRST, cast(ss_item_sk#31 as bigint) ASC NULLS FIRST], false, 0

(30) Scan parquet default.store_returns
Output [2]: [sr_item_sk#38, sr_ticket_number#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:bigint,sr_ticket_number:bigint>

(31) ColumnarToRow [codegen id : 10]
Input [2]: [sr_item_sk#38, sr_ticket_number#39]

(32) Filter [codegen id : 10]
Input [2]: [sr_item_sk#38, sr_ticket_number#39]
Condition : (isnotnull(sr_ticket_number#39) AND isnotnull(sr_item_sk#38))

(33) Exchange
Input [2]: [sr_item_sk#38, sr_ticket_number#39]
Arguments: hashpartitioning(sr_ticket_number#39, sr_item_sk#38, 5), true, [id=#40]

(34) Sort [codegen id : 11]
Input [2]: [sr_item_sk#38, sr_ticket_number#39]
Arguments: [sr_ticket_number#39 ASC NULLS FIRST, sr_item_sk#38 ASC NULLS FIRST], false, 0

(35) SortMergeJoin
Left keys [2]: [cast(ss_ticket_number#33 as bigint), cast(ss_item_sk#31 as bigint)]
Right keys [2]: [sr_ticket_number#39, sr_item_sk#38]
Join condition: None

(36) Filter [codegen id : 13]
Input [9]: [ss_sold_date_sk#30, ss_item_sk#31, ss_customer_sk#32, ss_ticket_number#33, ss_quantity#34, ss_wholesale_cost#35, ss_sales_price#36, sr_item_sk#38, sr_ticket_number#39]
Condition : isnull(sr_ticket_number#39)

(37) Project [codegen id : 13]
Output [6]: [ss_sold_date_sk#30, ss_item_sk#31, ss_customer_sk#32, ss_quantity#34, ss_wholesale_cost#35, ss_sales_price#36]
Input [9]: [ss_sold_date_sk#30, ss_item_sk#31, ss_customer_sk#32, ss_ticket_number#33, ss_quantity#34, ss_wholesale_cost#35, ss_sales_price#36, sr_item_sk#38, sr_ticket_number#39]

(38) ReusedExchange [Reuses operator id: 17]
Output [2]: [d_date_sk#12, d_year#13]

(39) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_sold_date_sk#30]
Right keys [1]: [d_date_sk#12]
Join condition: None

(40) Project [codegen id : 13]
Output [6]: [ss_item_sk#31, ss_customer_sk#32, ss_quantity#34, ss_wholesale_cost#35, ss_sales_price#36, d_year#13]
Input [8]: [ss_sold_date_sk#30, ss_item_sk#31, ss_customer_sk#32, ss_quantity#34, ss_wholesale_cost#35, ss_sales_price#36, d_date_sk#12, d_year#13]

(41) HashAggregate [codegen id : 13]
Input [6]: [ss_item_sk#31, ss_customer_sk#32, ss_quantity#34, ss_wholesale_cost#35, ss_sales_price#36, d_year#13]
Keys [3]: [d_year#13, ss_item_sk#31, ss_customer_sk#32]
Functions [3]: [partial_sum(cast(ss_quantity#34 as bigint)), partial_sum(UnscaledValue(ss_wholesale_cost#35)), partial_sum(UnscaledValue(ss_sales_price#36))]
Aggregate Attributes [3]: [sum#41, sum#42, sum#43]
Results [6]: [d_year#13, ss_item_sk#31, ss_customer_sk#32, sum#44, sum#45, sum#46]

(42) Exchange
Input [6]: [d_year#13, ss_item_sk#31, ss_customer_sk#32, sum#44, sum#45, sum#46]
Arguments: hashpartitioning(d_year#13, ss_item_sk#31, ss_customer_sk#32, 5), true, [id=#47]

(43) HashAggregate [codegen id : 14]
Input [6]: [d_year#13, ss_item_sk#31, ss_customer_sk#32, sum#44, sum#45, sum#46]
Keys [3]: [d_year#13, ss_item_sk#31, ss_customer_sk#32]
Functions [3]: [sum(cast(ss_quantity#34 as bigint)), sum(UnscaledValue(ss_wholesale_cost#35)), sum(UnscaledValue(ss_sales_price#36))]
Aggregate Attributes [3]: [sum(cast(ss_quantity#34 as bigint))#48, sum(UnscaledValue(ss_wholesale_cost#35))#49, sum(UnscaledValue(ss_sales_price#36))#50]
Results [6]: [d_year#13 AS ss_sold_year#51, ss_item_sk#31, ss_customer_sk#32, sum(cast(ss_quantity#34 as bigint))#48 AS ss_qty#52, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#35))#49,17,2) AS ss_wc#53, MakeDecimal(sum(UnscaledValue(ss_sales_price#36))#50,17,2) AS ss_sp#54]

(44) Sort [codegen id : 14]
Input [6]: [ss_sold_year#51, ss_item_sk#31, ss_customer_sk#32, ss_qty#52, ss_wc#53, ss_sp#54]
Arguments: [ss_sold_year#51 ASC NULLS FIRST, ss_item_sk#31 ASC NULLS FIRST, ss_customer_sk#32 ASC NULLS FIRST], false, 0

(45) SortMergeJoin [codegen id : 15]
Left keys [3]: [cs_sold_year#25, cs_item_sk#3, cs_customer_sk#26]
Right keys [3]: [ss_sold_year#51, ss_item_sk#31, ss_customer_sk#32]
Join condition: None

(46) Project [codegen id : 15]
Output [9]: [cs_qty#27, cs_wc#28, cs_sp#29, ss_sold_year#51, ss_item_sk#31, ss_customer_sk#32, ss_qty#52, ss_wc#53, ss_sp#54]
Input [12]: [cs_sold_year#25, cs_item_sk#3, cs_customer_sk#26, cs_qty#27, cs_wc#28, cs_sp#29, ss_sold_year#51, ss_item_sk#31, ss_customer_sk#32, ss_qty#52, ss_wc#53, ss_sp#54]

(47) Scan parquet default.web_sales
Output [7]: [ws_sold_date_sk#55, ws_item_sk#56, ws_bill_customer_sk#57, ws_order_number#58, ws_quantity#59, ws_wholesale_cost#60, ws_sales_price#61]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_order_number:int,ws_quantity:int,ws_wholesale_cost:decimal(7,2),ws_sales_price:decimal(7,2)>

(48) ColumnarToRow [codegen id : 16]
Input [7]: [ws_sold_date_sk#55, ws_item_sk#56, ws_bill_customer_sk#57, ws_order_number#58, ws_quantity#59, ws_wholesale_cost#60, ws_sales_price#61]

(49) Filter [codegen id : 16]
Input [7]: [ws_sold_date_sk#55, ws_item_sk#56, ws_bill_customer_sk#57, ws_order_number#58, ws_quantity#59, ws_wholesale_cost#60, ws_sales_price#61]
Condition : ((isnotnull(ws_sold_date_sk#55) AND isnotnull(ws_item_sk#56)) AND isnotnull(ws_bill_customer_sk#57))

(50) Exchange
Input [7]: [ws_sold_date_sk#55, ws_item_sk#56, ws_bill_customer_sk#57, ws_order_number#58, ws_quantity#59, ws_wholesale_cost#60, ws_sales_price#61]
Arguments: hashpartitioning(cast(ws_order_number#58 as bigint), cast(ws_item_sk#56 as bigint), 5), true, [id=#62]

(51) Sort [codegen id : 17]
Input [7]: [ws_sold_date_sk#55, ws_item_sk#56, ws_bill_customer_sk#57, ws_order_number#58, ws_quantity#59, ws_wholesale_cost#60, ws_sales_price#61]
Arguments: [cast(ws_order_number#58 as bigint) ASC NULLS FIRST, cast(ws_item_sk#56 as bigint) ASC NULLS FIRST], false, 0

(52) Scan parquet default.web_returns
Output [2]: [wr_item_sk#63, wr_order_number#64]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_order_number), IsNotNull(wr_item_sk)]
ReadSchema: struct<wr_item_sk:bigint,wr_order_number:bigint>

(53) ColumnarToRow [codegen id : 18]
Input [2]: [wr_item_sk#63, wr_order_number#64]

(54) Filter [codegen id : 18]
Input [2]: [wr_item_sk#63, wr_order_number#64]
Condition : (isnotnull(wr_order_number#64) AND isnotnull(wr_item_sk#63))

(55) Exchange
Input [2]: [wr_item_sk#63, wr_order_number#64]
Arguments: hashpartitioning(wr_order_number#64, wr_item_sk#63, 5), true, [id=#65]

(56) Sort [codegen id : 19]
Input [2]: [wr_item_sk#63, wr_order_number#64]
Arguments: [wr_order_number#64 ASC NULLS FIRST, wr_item_sk#63 ASC NULLS FIRST], false, 0

(57) SortMergeJoin
Left keys [2]: [cast(ws_order_number#58 as bigint), cast(ws_item_sk#56 as bigint)]
Right keys [2]: [wr_order_number#64, wr_item_sk#63]
Join condition: None

(58) Filter [codegen id : 21]
Input [9]: [ws_sold_date_sk#55, ws_item_sk#56, ws_bill_customer_sk#57, ws_order_number#58, ws_quantity#59, ws_wholesale_cost#60, ws_sales_price#61, wr_item_sk#63, wr_order_number#64]
Condition : isnull(wr_order_number#64)

(59) Project [codegen id : 21]
Output [6]: [ws_sold_date_sk#55, ws_item_sk#56, ws_bill_customer_sk#57, ws_quantity#59, ws_wholesale_cost#60, ws_sales_price#61]
Input [9]: [ws_sold_date_sk#55, ws_item_sk#56, ws_bill_customer_sk#57, ws_order_number#58, ws_quantity#59, ws_wholesale_cost#60, ws_sales_price#61, wr_item_sk#63, wr_order_number#64]

(60) ReusedExchange [Reuses operator id: 17]
Output [2]: [d_date_sk#12, d_year#13]

(61) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [ws_sold_date_sk#55]
Right keys [1]: [d_date_sk#12]
Join condition: None

(62) Project [codegen id : 21]
Output [6]: [ws_item_sk#56, ws_bill_customer_sk#57, ws_quantity#59, ws_wholesale_cost#60, ws_sales_price#61, d_year#13]
Input [8]: [ws_sold_date_sk#55, ws_item_sk#56, ws_bill_customer_sk#57, ws_quantity#59, ws_wholesale_cost#60, ws_sales_price#61, d_date_sk#12, d_year#13]

(63) HashAggregate [codegen id : 21]
Input [6]: [ws_item_sk#56, ws_bill_customer_sk#57, ws_quantity#59, ws_wholesale_cost#60, ws_sales_price#61, d_year#13]
Keys [3]: [d_year#13, ws_item_sk#56, ws_bill_customer_sk#57]
Functions [3]: [partial_sum(cast(ws_quantity#59 as bigint)), partial_sum(UnscaledValue(ws_wholesale_cost#60)), partial_sum(UnscaledValue(ws_sales_price#61))]
Aggregate Attributes [3]: [sum#66, sum#67, sum#68]
Results [6]: [d_year#13, ws_item_sk#56, ws_bill_customer_sk#57, sum#69, sum#70, sum#71]

(64) Exchange
Input [6]: [d_year#13, ws_item_sk#56, ws_bill_customer_sk#57, sum#69, sum#70, sum#71]
Arguments: hashpartitioning(d_year#13, ws_item_sk#56, ws_bill_customer_sk#57, 5), true, [id=#72]

(65) HashAggregate [codegen id : 22]
Input [6]: [d_year#13, ws_item_sk#56, ws_bill_customer_sk#57, sum#69, sum#70, sum#71]
Keys [3]: [d_year#13, ws_item_sk#56, ws_bill_customer_sk#57]
Functions [3]: [sum(cast(ws_quantity#59 as bigint)), sum(UnscaledValue(ws_wholesale_cost#60)), sum(UnscaledValue(ws_sales_price#61))]
Aggregate Attributes [3]: [sum(cast(ws_quantity#59 as bigint))#73, sum(UnscaledValue(ws_wholesale_cost#60))#74, sum(UnscaledValue(ws_sales_price#61))#75]
Results [6]: [d_year#13 AS ws_sold_year#76, ws_item_sk#56, ws_bill_customer_sk#57 AS ws_customer_sk#77, sum(cast(ws_quantity#59 as bigint))#73 AS ws_qty#78, MakeDecimal(sum(UnscaledValue(ws_wholesale_cost#60))#74,17,2) AS ws_wc#79, MakeDecimal(sum(UnscaledValue(ws_sales_price#61))#75,17,2) AS ws_sp#80]

(66) Filter [codegen id : 22]
Input [6]: [ws_sold_year#76, ws_item_sk#56, ws_customer_sk#77, ws_qty#78, ws_wc#79, ws_sp#80]
Condition : (coalesce(ws_qty#78, 0) > 0)

(67) Sort [codegen id : 22]
Input [6]: [ws_sold_year#76, ws_item_sk#56, ws_customer_sk#77, ws_qty#78, ws_wc#79, ws_sp#80]
Arguments: [ws_sold_year#76 ASC NULLS FIRST, ws_item_sk#56 ASC NULLS FIRST, ws_customer_sk#77 ASC NULLS FIRST], false, 0

(68) SortMergeJoin [codegen id : 23]
Left keys [3]: [ss_sold_year#51, ss_item_sk#31, ss_customer_sk#32]
Right keys [3]: [ws_sold_year#76, ws_item_sk#56, ws_customer_sk#77]
Join condition: None

(69) Project [codegen id : 23]
Output [12]: [round((cast(ss_qty#52 as double) / cast(coalesce((ws_qty#78 + cs_qty#27), 1) as double)), 2) AS ratio#81, ss_qty#52 AS store_qty#82, ss_wc#53 AS store_wholesale_cost#83, ss_sp#54 AS store_sales_price#84, (coalesce(ws_qty#78, 0) + coalesce(cs_qty#27, 0)) AS other_chan_qty#85, CheckOverflow((promote_precision(cast(coalesce(ws_wc#79, 0.00) as decimal(18,2))) + promote_precision(cast(coalesce(cs_wc#28, 0.00) as decimal(18,2)))), DecimalType(18,2), true) AS other_chan_wholesale_cost#86, CheckOverflow((promote_precision(cast(coalesce(ws_sp#80, 0.00) as decimal(18,2))) + promote_precision(cast(coalesce(cs_sp#29, 0.00) as decimal(18,2)))), DecimalType(18,2), true) AS other_chan_sales_price#87, ss_qty#52, ss_wc#53, ss_sp#54, ws_qty#78, cs_qty#27]
Input [15]: [cs_qty#27, cs_wc#28, cs_sp#29, ss_sold_year#51, ss_item_sk#31, ss_customer_sk#32, ss_qty#52, ss_wc#53, ss_sp#54, ws_sold_year#76, ws_item_sk#56, ws_customer_sk#77, ws_qty#78, ws_wc#79, ws_sp#80]

(70) TakeOrderedAndProject
Input [12]: [ratio#81, store_qty#82, store_wholesale_cost#83, store_sales_price#84, other_chan_qty#85, other_chan_wholesale_cost#86, other_chan_sales_price#87, ss_qty#52, ss_wc#53, ss_sp#54, ws_qty#78, cs_qty#27]
Arguments: 100, [ratio#81 ASC NULLS FIRST, ss_qty#52 DESC NULLS LAST, ss_wc#53 DESC NULLS LAST, ss_sp#54 DESC NULLS LAST, other_chan_qty#85 ASC NULLS FIRST, other_chan_wholesale_cost#86 ASC NULLS FIRST, other_chan_sales_price#87 ASC NULLS FIRST, round((cast(ss_qty#52 as double) / cast(coalesce((ws_qty#78 + cs_qty#27), 1) as double)), 2) ASC NULLS FIRST], [ratio#81, store_qty#82, store_wholesale_cost#83, store_sales_price#84, other_chan_qty#85, other_chan_wholesale_cost#86, other_chan_sales_price#87]

