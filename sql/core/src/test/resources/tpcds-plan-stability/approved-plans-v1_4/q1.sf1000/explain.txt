== Physical Plan ==
TakeOrderedAndProject (43)
+- * Project (42)
   +- * SortMergeJoin Inner (41)
      :- * Sort (35)
      :  +- Exchange (34)
      :     +- * Project (33)
      :        +- * BroadcastHashJoin Inner BuildRight (32)
      :           :- * Project (17)
      :           :  +- * BroadcastHashJoin Inner BuildRight (16)
      :           :     :- * Filter (10)
      :           :     :  +- * HashAggregate (9)
      :           :     :     +- Exchange (8)
      :           :     :        +- * HashAggregate (7)
      :           :     :           +- * Project (6)
      :           :     :              +- * BroadcastHashJoin Inner BuildRight (5)
      :           :     :                 :- * Filter (3)
      :           :     :                 :  +- * ColumnarToRow (2)
      :           :     :                 :     +- Scan parquet spark_catalog.default.store_returns (1)
      :           :     :                 +- ReusedExchange (4)
      :           :     +- BroadcastExchange (15)
      :           :        +- * Project (14)
      :           :           +- * Filter (13)
      :           :              +- * ColumnarToRow (12)
      :           :                 +- Scan parquet spark_catalog.default.store (11)
      :           +- BroadcastExchange (31)
      :              +- * Filter (30)
      :                 +- * HashAggregate (29)
      :                    +- Exchange (28)
      :                       +- * HashAggregate (27)
      :                          +- * HashAggregate (26)
      :                             +- Exchange (25)
      :                                +- * HashAggregate (24)
      :                                   +- * Project (23)
      :                                      +- * BroadcastHashJoin Inner BuildRight (22)
      :                                         :- * Filter (20)
      :                                         :  +- * ColumnarToRow (19)
      :                                         :     +- Scan parquet spark_catalog.default.store_returns (18)
      :                                         +- ReusedExchange (21)
      +- * Sort (40)
         +- Exchange (39)
            +- * Filter (38)
               +- * ColumnarToRow (37)
                  +- Scan parquet spark_catalog.default.customer (36)


(1) Scan parquet spark_catalog.default.store_returns
Output [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#4), dynamicpruningexpression(sr_returned_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(sr_store_sk), IsNotNull(sr_customer_sk)]
ReadSchema: struct<sr_customer_sk:int,sr_store_sk:int,sr_return_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]

(3) Filter [codegen id : 2]
Input [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Condition : ((isnotnull(sr_store_sk#2) AND isnotnull(sr_customer_sk#1)) AND might_contain(Subquery scalar-subquery#6, [id=#7], xxhash64(sr_store_sk#2, 42)))

(4) ReusedExchange [Reuses operator id: 55]
Output [1]: [d_date_sk#8]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [sr_returned_date_sk#4]
Right keys [1]: [d_date_sk#8]
Join type: Inner
Join condition: None

(6) Project [codegen id : 2]
Output [3]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3]
Input [5]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4, d_date_sk#8]

(7) HashAggregate [codegen id : 2]
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3]
Keys [2]: [sr_customer_sk#1, sr_store_sk#2]
Functions [1]: [partial_sum(UnscaledValue(sr_return_amt#3))]
Aggregate Attributes [1]: [sum#9]
Results [3]: [sr_customer_sk#1, sr_store_sk#2, sum#10]

(8) Exchange
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#10]
Arguments: hashpartitioning(sr_customer_sk#1, sr_store_sk#2, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(9) HashAggregate [codegen id : 8]
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#10]
Keys [2]: [sr_customer_sk#1, sr_store_sk#2]
Functions [1]: [sum(UnscaledValue(sr_return_amt#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(sr_return_amt#3))#11]
Results [3]: [sr_customer_sk#1 AS ctr_customer_sk#12, sr_store_sk#2 AS ctr_store_sk#13, MakeDecimal(sum(UnscaledValue(sr_return_amt#3))#11,17,2) AS ctr_total_return#14]

(10) Filter [codegen id : 8]
Input [3]: [ctr_customer_sk#12, ctr_store_sk#13, ctr_total_return#14]
Condition : isnotnull(ctr_total_return#14)

(11) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#15, s_state#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(12) ColumnarToRow [codegen id : 3]
Input [2]: [s_store_sk#15, s_state#16]

(13) Filter [codegen id : 3]
Input [2]: [s_store_sk#15, s_state#16]
Condition : ((isnotnull(s_state#16) AND (s_state#16 = TN)) AND isnotnull(s_store_sk#15))

(14) Project [codegen id : 3]
Output [1]: [s_store_sk#15]
Input [2]: [s_store_sk#15, s_state#16]

(15) BroadcastExchange
Input [1]: [s_store_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(16) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ctr_store_sk#13]
Right keys [1]: [s_store_sk#15]
Join type: Inner
Join condition: None

(17) Project [codegen id : 8]
Output [3]: [ctr_customer_sk#12, ctr_store_sk#13, ctr_total_return#14]
Input [4]: [ctr_customer_sk#12, ctr_store_sk#13, ctr_total_return#14, s_store_sk#15]

(18) Scan parquet spark_catalog.default.store_returns
Output [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#4), dynamicpruningexpression(sr_returned_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_customer_sk:int,sr_store_sk:int,sr_return_amt:decimal(7,2)>

(19) ColumnarToRow [codegen id : 5]
Input [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]

(20) Filter [codegen id : 5]
Input [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Condition : isnotnull(sr_store_sk#2)

(21) ReusedExchange [Reuses operator id: 55]
Output [1]: [d_date_sk#8]

(22) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [sr_returned_date_sk#4]
Right keys [1]: [d_date_sk#8]
Join type: Inner
Join condition: None

(23) Project [codegen id : 5]
Output [3]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3]
Input [5]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4, d_date_sk#8]

(24) HashAggregate [codegen id : 5]
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3]
Keys [2]: [sr_customer_sk#1, sr_store_sk#2]
Functions [1]: [partial_sum(UnscaledValue(sr_return_amt#3))]
Aggregate Attributes [1]: [sum#17]
Results [3]: [sr_customer_sk#1, sr_store_sk#2, sum#18]

(25) Exchange
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#18]
Arguments: hashpartitioning(sr_customer_sk#1, sr_store_sk#2, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(26) HashAggregate [codegen id : 6]
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#18]
Keys [2]: [sr_customer_sk#1, sr_store_sk#2]
Functions [1]: [sum(UnscaledValue(sr_return_amt#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(sr_return_amt#3))#11]
Results [2]: [sr_store_sk#2 AS ctr_store_sk#13, MakeDecimal(sum(UnscaledValue(sr_return_amt#3))#11,17,2) AS ctr_total_return#14]

(27) HashAggregate [codegen id : 6]
Input [2]: [ctr_store_sk#13, ctr_total_return#14]
Keys [1]: [ctr_store_sk#13]
Functions [1]: [partial_avg(ctr_total_return#14)]
Aggregate Attributes [2]: [sum#19, count#20]
Results [3]: [ctr_store_sk#13, sum#21, count#22]

(28) Exchange
Input [3]: [ctr_store_sk#13, sum#21, count#22]
Arguments: hashpartitioning(ctr_store_sk#13, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(29) HashAggregate [codegen id : 7]
Input [3]: [ctr_store_sk#13, sum#21, count#22]
Keys [1]: [ctr_store_sk#13]
Functions [1]: [avg(ctr_total_return#14)]
Aggregate Attributes [1]: [avg(ctr_total_return#14)#23]
Results [2]: [(avg(ctr_total_return#14)#23 * 1.2) AS (avg(ctr_total_return) * 1.2)#24, ctr_store_sk#13 AS ctr_store_sk#13#25]

(30) Filter [codegen id : 7]
Input [2]: [(avg(ctr_total_return) * 1.2)#24, ctr_store_sk#13#25]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#24)

(31) BroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#24, ctr_store_sk#13#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=5]

(32) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ctr_store_sk#13]
Right keys [1]: [ctr_store_sk#13#25]
Join type: Inner
Join condition: (cast(ctr_total_return#14 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#24)

(33) Project [codegen id : 8]
Output [1]: [ctr_customer_sk#12]
Input [5]: [ctr_customer_sk#12, ctr_store_sk#13, ctr_total_return#14, (avg(ctr_total_return) * 1.2)#24, ctr_store_sk#13#25]

(34) Exchange
Input [1]: [ctr_customer_sk#12]
Arguments: hashpartitioning(ctr_customer_sk#12, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(35) Sort [codegen id : 9]
Input [1]: [ctr_customer_sk#12]
Arguments: [ctr_customer_sk#12 ASC NULLS FIRST], false, 0

(36) Scan parquet spark_catalog.default.customer
Output [2]: [c_customer_sk#26, c_customer_id#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string>

(37) ColumnarToRow [codegen id : 10]
Input [2]: [c_customer_sk#26, c_customer_id#27]

(38) Filter [codegen id : 10]
Input [2]: [c_customer_sk#26, c_customer_id#27]
Condition : isnotnull(c_customer_sk#26)

(39) Exchange
Input [2]: [c_customer_sk#26, c_customer_id#27]
Arguments: hashpartitioning(c_customer_sk#26, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(40) Sort [codegen id : 11]
Input [2]: [c_customer_sk#26, c_customer_id#27]
Arguments: [c_customer_sk#26 ASC NULLS FIRST], false, 0

(41) SortMergeJoin [codegen id : 12]
Left keys [1]: [ctr_customer_sk#12]
Right keys [1]: [c_customer_sk#26]
Join type: Inner
Join condition: None

(42) Project [codegen id : 12]
Output [1]: [c_customer_id#27]
Input [3]: [ctr_customer_sk#12, c_customer_sk#26, c_customer_id#27]

(43) TakeOrderedAndProject
Input [1]: [c_customer_id#27]
Arguments: 100, [c_customer_id#27 ASC NULLS FIRST], [c_customer_id#27]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#6, [id=#7]
ObjectHashAggregate (50)
+- Exchange (49)
   +- ObjectHashAggregate (48)
      +- * Project (47)
         +- * Filter (46)
            +- * ColumnarToRow (45)
               +- Scan parquet spark_catalog.default.store (44)


(44) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#15, s_state#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(45) ColumnarToRow [codegen id : 1]
Input [2]: [s_store_sk#15, s_state#16]

(46) Filter [codegen id : 1]
Input [2]: [s_store_sk#15, s_state#16]
Condition : ((isnotnull(s_state#16) AND (s_state#16 = TN)) AND isnotnull(s_store_sk#15))

(47) Project [codegen id : 1]
Output [1]: [s_store_sk#15]
Input [2]: [s_store_sk#15, s_state#16]

(48) ObjectHashAggregate
Input [1]: [s_store_sk#15]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(s_store_sk#15, 42), 48, 384, 0, 0)]
Aggregate Attributes [1]: [buf#28]
Results [1]: [buf#29]

(49) Exchange
Input [1]: [buf#29]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=8]

(50) ObjectHashAggregate
Input [1]: [buf#29]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(s_store_sk#15, 42), 48, 384, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(s_store_sk#15, 42), 48, 384, 0, 0)#30]
Results [1]: [bloom_filter_agg(xxhash64(s_store_sk#15, 42), 48, 384, 0, 0)#30 AS bloomFilter#31]

Subquery:2 Hosting operator id = 1 Hosting Expression = sr_returned_date_sk#4 IN dynamicpruning#5
BroadcastExchange (55)
+- * Project (54)
   +- * Filter (53)
      +- * ColumnarToRow (52)
         +- Scan parquet spark_catalog.default.date_dim (51)


(51) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#8, d_year#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(52) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#8, d_year#32]

(53) Filter [codegen id : 1]
Input [2]: [d_date_sk#8, d_year#32]
Condition : ((isnotnull(d_year#32) AND (d_year#32 = 2000)) AND isnotnull(d_date_sk#8))

(54) Project [codegen id : 1]
Output [1]: [d_date_sk#8]
Input [2]: [d_date_sk#8, d_year#32]

(55) BroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

Subquery:3 Hosting operator id = 18 Hosting Expression = sr_returned_date_sk#4 IN dynamicpruning#5


