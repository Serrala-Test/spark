== Physical Plan ==
* Sort (79)
+- Exchange (78)
   +- * Project (77)
      +- BroadcastNestedLoopJoin Inner BuildRight (76)
         :- * HashAggregate (50)
         :  +- Exchange (49)
         :     +- * HashAggregate (48)
         :        +- * Project (47)
         :           +- * BroadcastHashJoin Inner BuildRight (46)
         :              :- * Project (40)
         :              :  +- * BroadcastHashJoin Inner BuildRight (39)
         :              :     :- * Project (33)
         :              :     :  +- * BroadcastHashJoin Inner BuildRight (32)
         :              :     :     :- * Project (26)
         :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (25)
         :              :     :     :     :- * Project (19)
         :              :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (18)
         :              :     :     :     :     :- * Project (12)
         :              :     :     :     :     :  +- * SortMergeJoin Inner (11)
         :              :     :     :     :     :     :- * Sort (5)
         :              :     :     :     :     :     :  +- Exchange (4)
         :              :     :     :     :     :     :     +- * Filter (3)
         :              :     :     :     :     :     :        +- * ColumnarToRow (2)
         :              :     :     :     :     :     :           +- Scan parquet default.store_sales (1)
         :              :     :     :     :     :     +- * Sort (10)
         :              :     :     :     :     :        +- Exchange (9)
         :              :     :     :     :     :           +- * Filter (8)
         :              :     :     :     :     :              +- * ColumnarToRow (7)
         :              :     :     :     :     :                 +- Scan parquet default.customer (6)
         :              :     :     :     :     +- BroadcastExchange (17)
         :              :     :     :     :        +- * Project (16)
         :              :     :     :     :           +- * Filter (15)
         :              :     :     :     :              +- * ColumnarToRow (14)
         :              :     :     :     :                 +- Scan parquet default.store (13)
         :              :     :     :     +- BroadcastExchange (24)
         :              :     :     :        +- * Project (23)
         :              :     :     :           +- * Filter (22)
         :              :     :     :              +- * ColumnarToRow (21)
         :              :     :     :                 +- Scan parquet default.promotion (20)
         :              :     :     +- BroadcastExchange (31)
         :              :     :        +- * Project (30)
         :              :     :           +- * Filter (29)
         :              :     :              +- * ColumnarToRow (28)
         :              :     :                 +- Scan parquet default.customer_address (27)
         :              :     +- BroadcastExchange (38)
         :              :        +- * Project (37)
         :              :           +- * Filter (36)
         :              :              +- * ColumnarToRow (35)
         :              :                 +- Scan parquet default.item (34)
         :              +- BroadcastExchange (45)
         :                 +- * Project (44)
         :                    +- * Filter (43)
         :                       +- * ColumnarToRow (42)
         :                          +- Scan parquet default.date_dim (41)
         +- BroadcastExchange (75)
            +- * HashAggregate (74)
               +- Exchange (73)
                  +- * HashAggregate (72)
                     +- * Project (71)
                        +- * BroadcastHashJoin Inner BuildRight (70)
                           :- * Project (68)
                           :  +- * BroadcastHashJoin Inner BuildRight (67)
                           :     :- * Project (65)
                           :     :  +- * BroadcastHashJoin Inner BuildRight (64)
                           :     :     :- * Project (62)
                           :     :     :  +- * BroadcastHashJoin Inner BuildRight (61)
                           :     :     :     :- * Project (59)
                           :     :     :     :  +- * SortMergeJoin Inner (58)
                           :     :     :     :     :- * Sort (55)
                           :     :     :     :     :  +- Exchange (54)
                           :     :     :     :     :     +- * Filter (53)
                           :     :     :     :     :        +- * ColumnarToRow (52)
                           :     :     :     :     :           +- Scan parquet default.store_sales (51)
                           :     :     :     :     +- * Sort (57)
                           :     :     :     :        +- ReusedExchange (56)
                           :     :     :     +- ReusedExchange (60)
                           :     :     +- ReusedExchange (63)
                           :     +- ReusedExchange (66)
                           +- ReusedExchange (69)


(1) Scan parquet default.store_sales
Output [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_promo_sk#5, ss_ext_sales_price#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_promo_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_promo_sk#5, ss_ext_sales_price#6]

(3) Filter [codegen id : 1]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_promo_sk#5, ss_ext_sales_price#6]
Condition : ((((isnotnull(ss_store_sk#4) AND isnotnull(ss_promo_sk#5)) AND isnotnull(ss_sold_date_sk#1)) AND isnotnull(ss_customer_sk#3)) AND isnotnull(ss_item_sk#2))

(4) Exchange
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_promo_sk#5, ss_ext_sales_price#6]
Arguments: hashpartitioning(ss_customer_sk#3, 5), ENSURE_REQUIREMENTS, [id=#7]

(5) Sort [codegen id : 2]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_promo_sk#5, ss_ext_sales_price#6]
Arguments: [ss_customer_sk#3 ASC NULLS FIRST], false, 0

(6) Scan parquet default.customer
Output [2]: [c_customer_sk#8, c_current_addr_sk#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(7) ColumnarToRow [codegen id : 3]
Input [2]: [c_customer_sk#8, c_current_addr_sk#9]

(8) Filter [codegen id : 3]
Input [2]: [c_customer_sk#8, c_current_addr_sk#9]
Condition : (isnotnull(c_customer_sk#8) AND isnotnull(c_current_addr_sk#9))

(9) Exchange
Input [2]: [c_customer_sk#8, c_current_addr_sk#9]
Arguments: hashpartitioning(c_customer_sk#8, 5), ENSURE_REQUIREMENTS, [id=#10]

(10) Sort [codegen id : 4]
Input [2]: [c_customer_sk#8, c_current_addr_sk#9]
Arguments: [c_customer_sk#8 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 10]
Left keys [1]: [ss_customer_sk#3]
Right keys [1]: [c_customer_sk#8]
Join condition: None

(12) Project [codegen id : 10]
Output [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_promo_sk#5, ss_ext_sales_price#6, c_current_addr_sk#9]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_promo_sk#5, ss_ext_sales_price#6, c_customer_sk#8, c_current_addr_sk#9]

(13) Scan parquet default.store
Output [2]: [s_store_sk#11, s_gmt_offset#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_gmt_offset), EqualTo(s_gmt_offset,-5.00), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_gmt_offset:decimal(5,2)>

(14) ColumnarToRow [codegen id : 5]
Input [2]: [s_store_sk#11, s_gmt_offset#12]

(15) Filter [codegen id : 5]
Input [2]: [s_store_sk#11, s_gmt_offset#12]
Condition : ((isnotnull(s_gmt_offset#12) AND (s_gmt_offset#12 = -5.00)) AND isnotnull(s_store_sk#11))

(16) Project [codegen id : 5]
Output [1]: [s_store_sk#11]
Input [2]: [s_store_sk#11, s_gmt_offset#12]

(17) BroadcastExchange
Input [1]: [s_store_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13]

(18) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [s_store_sk#11]
Join condition: None

(19) Project [codegen id : 10]
Output [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_promo_sk#5, ss_ext_sales_price#6, c_current_addr_sk#9]
Input [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_promo_sk#5, ss_ext_sales_price#6, c_current_addr_sk#9, s_store_sk#11]

(20) Scan parquet default.promotion
Output [4]: [p_promo_sk#14, p_channel_dmail#15, p_channel_email#16, p_channel_tv#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [Or(Or(EqualTo(p_channel_dmail,Y),EqualTo(p_channel_email,Y)),EqualTo(p_channel_tv,Y)), IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int,p_channel_dmail:string,p_channel_email:string,p_channel_tv:string>

(21) ColumnarToRow [codegen id : 6]
Input [4]: [p_promo_sk#14, p_channel_dmail#15, p_channel_email#16, p_channel_tv#17]

(22) Filter [codegen id : 6]
Input [4]: [p_promo_sk#14, p_channel_dmail#15, p_channel_email#16, p_channel_tv#17]
Condition : ((((p_channel_dmail#15 = Y) OR (p_channel_email#16 = Y)) OR (p_channel_tv#17 = Y)) AND isnotnull(p_promo_sk#14))

(23) Project [codegen id : 6]
Output [1]: [p_promo_sk#14]
Input [4]: [p_promo_sk#14, p_channel_dmail#15, p_channel_email#16, p_channel_tv#17]

(24) BroadcastExchange
Input [1]: [p_promo_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#18]

(25) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_promo_sk#5]
Right keys [1]: [p_promo_sk#14]
Join condition: None

(26) Project [codegen id : 10]
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#6, c_current_addr_sk#9]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_promo_sk#5, ss_ext_sales_price#6, c_current_addr_sk#9, p_promo_sk#14]

(27) Scan parquet default.customer_address
Output [2]: [ca_address_sk#19, ca_gmt_offset#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_gmt_offset), EqualTo(ca_gmt_offset,-5.00), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_gmt_offset:decimal(5,2)>

(28) ColumnarToRow [codegen id : 7]
Input [2]: [ca_address_sk#19, ca_gmt_offset#20]

(29) Filter [codegen id : 7]
Input [2]: [ca_address_sk#19, ca_gmt_offset#20]
Condition : ((isnotnull(ca_gmt_offset#20) AND (ca_gmt_offset#20 = -5.00)) AND isnotnull(ca_address_sk#19))

(30) Project [codegen id : 7]
Output [1]: [ca_address_sk#19]
Input [2]: [ca_address_sk#19, ca_gmt_offset#20]

(31) BroadcastExchange
Input [1]: [ca_address_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21]

(32) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [c_current_addr_sk#9]
Right keys [1]: [ca_address_sk#19]
Join condition: None

(33) Project [codegen id : 10]
Output [3]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#6]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#6, c_current_addr_sk#9, ca_address_sk#19]

(34) Scan parquet default.item
Output [2]: [i_item_sk#22, i_category#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Jewelry), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_category:string>

(35) ColumnarToRow [codegen id : 8]
Input [2]: [i_item_sk#22, i_category#23]

(36) Filter [codegen id : 8]
Input [2]: [i_item_sk#22, i_category#23]
Condition : ((isnotnull(i_category#23) AND (i_category#23 = Jewelry)) AND isnotnull(i_item_sk#22))

(37) Project [codegen id : 8]
Output [1]: [i_item_sk#22]
Input [2]: [i_item_sk#22, i_category#23]

(38) BroadcastExchange
Input [1]: [i_item_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#24]

(39) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#22]
Join condition: None

(40) Project [codegen id : 10]
Output [2]: [ss_sold_date_sk#1, ss_ext_sales_price#6]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#6, i_item_sk#22]

(41) Scan parquet default.date_dim
Output [3]: [d_date_sk#25, d_year#26, d_moy#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(42) ColumnarToRow [codegen id : 9]
Input [3]: [d_date_sk#25, d_year#26, d_moy#27]

(43) Filter [codegen id : 9]
Input [3]: [d_date_sk#25, d_year#26, d_moy#27]
Condition : ((((isnotnull(d_year#26) AND isnotnull(d_moy#27)) AND (d_year#26 = 1998)) AND (d_moy#27 = 11)) AND isnotnull(d_date_sk#25))

(44) Project [codegen id : 9]
Output [1]: [d_date_sk#25]
Input [3]: [d_date_sk#25, d_year#26, d_moy#27]

(45) BroadcastExchange
Input [1]: [d_date_sk#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#28]

(46) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#25]
Join condition: None

(47) Project [codegen id : 10]
Output [1]: [ss_ext_sales_price#6]
Input [3]: [ss_sold_date_sk#1, ss_ext_sales_price#6, d_date_sk#25]

(48) HashAggregate [codegen id : 10]
Input [1]: [ss_ext_sales_price#6]
Keys: []
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#6))]
Aggregate Attributes [1]: [sum#29]
Results [1]: [sum#30]

(49) Exchange
Input [1]: [sum#30]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#31]

(50) HashAggregate [codegen id : 11]
Input [1]: [sum#30]
Keys: []
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#6))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#6))#32]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#6))#32,17,2) AS promotions#33]

(51) Scan parquet default.store_sales
Output [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ext_sales_price#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2)>

(52) ColumnarToRow [codegen id : 12]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ext_sales_price#6]

(53) Filter [codegen id : 12]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ext_sales_price#6]
Condition : (((isnotnull(ss_store_sk#4) AND isnotnull(ss_sold_date_sk#1)) AND isnotnull(ss_customer_sk#3)) AND isnotnull(ss_item_sk#2))

(54) Exchange
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ext_sales_price#6]
Arguments: hashpartitioning(ss_customer_sk#3, 5), ENSURE_REQUIREMENTS, [id=#34]

(55) Sort [codegen id : 13]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ext_sales_price#6]
Arguments: [ss_customer_sk#3 ASC NULLS FIRST], false, 0

(56) ReusedExchange [Reuses operator id: 9]
Output [2]: [c_customer_sk#8, c_current_addr_sk#9]

(57) Sort [codegen id : 15]
Input [2]: [c_customer_sk#8, c_current_addr_sk#9]
Arguments: [c_customer_sk#8 ASC NULLS FIRST], false, 0

(58) SortMergeJoin [codegen id : 20]
Left keys [1]: [ss_customer_sk#3]
Right keys [1]: [c_customer_sk#8]
Join condition: None

(59) Project [codegen id : 20]
Output [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_ext_sales_price#6, c_current_addr_sk#9]
Input [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ext_sales_price#6, c_customer_sk#8, c_current_addr_sk#9]

(60) ReusedExchange [Reuses operator id: 17]
Output [1]: [s_store_sk#11]

(61) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [s_store_sk#11]
Join condition: None

(62) Project [codegen id : 20]
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#6, c_current_addr_sk#9]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_ext_sales_price#6, c_current_addr_sk#9, s_store_sk#11]

(63) ReusedExchange [Reuses operator id: 31]
Output [1]: [ca_address_sk#19]

(64) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [c_current_addr_sk#9]
Right keys [1]: [ca_address_sk#19]
Join condition: None

(65) Project [codegen id : 20]
Output [3]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#6]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#6, c_current_addr_sk#9, ca_address_sk#19]

(66) ReusedExchange [Reuses operator id: 38]
Output [1]: [i_item_sk#22]

(67) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#22]
Join condition: None

(68) Project [codegen id : 20]
Output [2]: [ss_sold_date_sk#1, ss_ext_sales_price#6]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#6, i_item_sk#22]

(69) ReusedExchange [Reuses operator id: 45]
Output [1]: [d_date_sk#25]

(70) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#25]
Join condition: None

(71) Project [codegen id : 20]
Output [1]: [ss_ext_sales_price#6]
Input [3]: [ss_sold_date_sk#1, ss_ext_sales_price#6, d_date_sk#25]

(72) HashAggregate [codegen id : 20]
Input [1]: [ss_ext_sales_price#6]
Keys: []
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#6))]
Aggregate Attributes [1]: [sum#35]
Results [1]: [sum#36]

(73) Exchange
Input [1]: [sum#36]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#37]

(74) HashAggregate [codegen id : 21]
Input [1]: [sum#36]
Keys: []
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#6))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#6))#38]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#6))#38,17,2) AS total#39]

(75) BroadcastExchange
Input [1]: [total#39]
Arguments: IdentityBroadcastMode, [id=#40]

(76) BroadcastNestedLoopJoin
Join condition: None

(77) Project [codegen id : 22]
Output [3]: [promotions#33, total#39, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(promotions#33 as decimal(15,4))) / promote_precision(cast(total#39 as decimal(15,4)))), DecimalType(35,20), true)) * 100.00000000000000000000), DecimalType(38,19), true) AS (CAST((CAST(CAST(promotions AS DECIMAL(15,4)) AS DECIMAL(15,4)) / CAST(CAST(total AS DECIMAL(15,4)) AS DECIMAL(15,4))) AS DECIMAL(35,20)) * CAST(CAST(100 AS DECIMAL(3,0)) AS DECIMAL(35,20)))#41]
Input [2]: [promotions#33, total#39]

(78) Exchange
Input [3]: [promotions#33, total#39, (CAST((CAST(CAST(promotions AS DECIMAL(15,4)) AS DECIMAL(15,4)) / CAST(CAST(total AS DECIMAL(15,4)) AS DECIMAL(15,4))) AS DECIMAL(35,20)) * CAST(CAST(100 AS DECIMAL(3,0)) AS DECIMAL(35,20)))#41]
Arguments: rangepartitioning(promotions#33 ASC NULLS FIRST, total#39 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [id=#42]

(79) Sort [codegen id : 23]
Input [3]: [promotions#33, total#39, (CAST((CAST(CAST(promotions AS DECIMAL(15,4)) AS DECIMAL(15,4)) / CAST(CAST(total AS DECIMAL(15,4)) AS DECIMAL(15,4))) AS DECIMAL(35,20)) * CAST(CAST(100 AS DECIMAL(3,0)) AS DECIMAL(35,20)))#41]
Arguments: [promotions#33 ASC NULLS FIRST, total#39 ASC NULLS FIRST], true, 0

