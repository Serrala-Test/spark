== Physical Plan ==
* Project (63)
+- * BroadcastNestedLoopJoin Inner BuildRight (62)
   :- * HashAggregate (42)
   :  +- Exchange (41)
   :     +- * HashAggregate (40)
   :        +- * Project (39)
   :           +- * BroadcastHashJoin Inner BuildRight (38)
   :              :- * Project (27)
   :              :  +- * BroadcastHashJoin Inner BuildRight (26)
   :              :     :- * Project (20)
   :              :     :  +- * BroadcastHashJoin Inner BuildRight (19)
   :              :     :     :- * Project (13)
   :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (12)
   :              :     :     :     :- * Project (6)
   :              :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (5)
   :              :     :     :     :     :- * Filter (3)
   :              :     :     :     :     :  +- * ColumnarToRow (2)
   :              :     :     :     :     :     +- Scan parquet default.store_sales (1)
   :              :     :     :     :     +- ReusedExchange (4)
   :              :     :     :     +- BroadcastExchange (11)
   :              :     :     :        +- * Project (10)
   :              :     :     :           +- * Filter (9)
   :              :     :     :              +- * ColumnarToRow (8)
   :              :     :     :                 +- Scan parquet default.item (7)
   :              :     :     +- BroadcastExchange (18)
   :              :     :        +- * Project (17)
   :              :     :           +- * Filter (16)
   :              :     :              +- * ColumnarToRow (15)
   :              :     :                 +- Scan parquet default.promotion (14)
   :              :     +- BroadcastExchange (25)
   :              :        +- * Project (24)
   :              :           +- * Filter (23)
   :              :              +- * ColumnarToRow (22)
   :              :                 +- Scan parquet default.store (21)
   :              +- BroadcastExchange (37)
   :                 +- * Project (36)
   :                    +- * BroadcastHashJoin Inner BuildRight (35)
   :                       :- * ColumnarToRow (29)
   :                       :  +- Scan parquet default.customer (28)
   :                       +- BroadcastExchange (34)
   :                          +- * Project (33)
   :                             +- * Filter (32)
   :                                +- * ColumnarToRow (31)
   :                                   +- Scan parquet default.customer_address (30)
   +- BroadcastExchange (61)
      +- * HashAggregate (60)
         +- Exchange (59)
            +- * HashAggregate (58)
               +- * Project (57)
                  +- * BroadcastHashJoin Inner BuildRight (56)
                     :- * Project (54)
                     :  +- * BroadcastHashJoin Inner BuildRight (53)
                     :     :- * Project (51)
                     :     :  +- * BroadcastHashJoin Inner BuildRight (50)
                     :     :     :- * Project (48)
                     :     :     :  +- * BroadcastHashJoin Inner BuildRight (47)
                     :     :     :     :- * Filter (45)
                     :     :     :     :  +- * ColumnarToRow (44)
                     :     :     :     :     +- Scan parquet default.store_sales (43)
                     :     :     :     +- ReusedExchange (46)
                     :     :     +- ReusedExchange (49)
                     :     +- ReusedExchange (52)
                     +- ReusedExchange (55)


(1) Scan parquet default.store_sales
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#6), dynamicpruningexpression(ss_sold_date_sk#6 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_promo_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 7]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6]

(3) Filter [codegen id : 7]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6]
Condition : ((isnotnull(ss_store_sk#3) AND isnotnull(ss_promo_sk#4)) AND isnotnull(ss_customer_sk#2))

(4) ReusedExchange [Reuses operator id: 68]
Output [1]: [d_date_sk#8]

(5) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#8]
Join condition: None

(6) Project [codegen id : 7]
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#5]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6, d_date_sk#8]

(7) Scan parquet default.item
Output [2]: [i_item_sk#9, i_category#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Jewelry                                           )]
ReadSchema: struct<i_item_sk:int,i_category:string>

(8) ColumnarToRow [codegen id : 2]
Input [2]: [i_item_sk#9, i_category#10]

(9) Filter [codegen id : 2]
Input [2]: [i_item_sk#9, i_category#10]
Condition : (isnotnull(i_category#10) AND (i_category#10 = Jewelry                                           ))

(10) Project [codegen id : 2]
Output [1]: [i_item_sk#9]
Input [2]: [i_item_sk#9, i_category#10]

(11) BroadcastExchange
Input [1]: [i_item_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#11]

(12) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#9]
Join condition: None

(13) Project [codegen id : 7]
Output [4]: [ss_customer_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#5]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#5, i_item_sk#9]

(14) Scan parquet default.promotion
Output [4]: [p_promo_sk#12, p_channel_dmail#13, p_channel_email#14, p_channel_tv#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [Or(Or(EqualTo(p_channel_dmail,Y),EqualTo(p_channel_email,Y)),EqualTo(p_channel_tv,Y))]
ReadSchema: struct<p_promo_sk:int,p_channel_dmail:string,p_channel_email:string,p_channel_tv:string>

(15) ColumnarToRow [codegen id : 3]
Input [4]: [p_promo_sk#12, p_channel_dmail#13, p_channel_email#14, p_channel_tv#15]

(16) Filter [codegen id : 3]
Input [4]: [p_promo_sk#12, p_channel_dmail#13, p_channel_email#14, p_channel_tv#15]
Condition : (((p_channel_dmail#13 = Y) OR (p_channel_email#14 = Y)) OR (p_channel_tv#15 = Y))

(17) Project [codegen id : 3]
Output [1]: [p_promo_sk#12]
Input [4]: [p_promo_sk#12, p_channel_dmail#13, p_channel_email#14, p_channel_tv#15]

(18) BroadcastExchange
Input [1]: [p_promo_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#16]

(19) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_promo_sk#4]
Right keys [1]: [p_promo_sk#12]
Join condition: None

(20) Project [codegen id : 7]
Output [3]: [ss_customer_sk#2, ss_store_sk#3, ss_ext_sales_price#5]
Input [5]: [ss_customer_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#5, p_promo_sk#12]

(21) Scan parquet default.store
Output [2]: [s_store_sk#17, s_gmt_offset#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_gmt_offset), EqualTo(s_gmt_offset,-5.00)]
ReadSchema: struct<s_store_sk:int,s_gmt_offset:decimal(5,2)>

(22) ColumnarToRow [codegen id : 4]
Input [2]: [s_store_sk#17, s_gmt_offset#18]

(23) Filter [codegen id : 4]
Input [2]: [s_store_sk#17, s_gmt_offset#18]
Condition : (isnotnull(s_gmt_offset#18) AND (s_gmt_offset#18 = -5.00))

(24) Project [codegen id : 4]
Output [1]: [s_store_sk#17]
Input [2]: [s_store_sk#17, s_gmt_offset#18]

(25) BroadcastExchange
Input [1]: [s_store_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#19]

(26) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#17]
Join condition: None

(27) Project [codegen id : 7]
Output [2]: [ss_customer_sk#2, ss_ext_sales_price#5]
Input [4]: [ss_customer_sk#2, ss_store_sk#3, ss_ext_sales_price#5, s_store_sk#17]

(28) Scan parquet default.customer
Output [2]: [c_customer_sk#20, c_current_addr_sk#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(29) ColumnarToRow [codegen id : 6]
Input [2]: [c_customer_sk#20, c_current_addr_sk#21]

(30) Scan parquet default.customer_address
Output [2]: [ca_address_sk#22, ca_gmt_offset#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_gmt_offset), EqualTo(ca_gmt_offset,-5.00)]
ReadSchema: struct<ca_address_sk:int,ca_gmt_offset:decimal(5,2)>

(31) ColumnarToRow [codegen id : 5]
Input [2]: [ca_address_sk#22, ca_gmt_offset#23]

(32) Filter [codegen id : 5]
Input [2]: [ca_address_sk#22, ca_gmt_offset#23]
Condition : (isnotnull(ca_gmt_offset#23) AND (ca_gmt_offset#23 = -5.00))

(33) Project [codegen id : 5]
Output [1]: [ca_address_sk#22]
Input [2]: [ca_address_sk#22, ca_gmt_offset#23]

(34) BroadcastExchange
Input [1]: [ca_address_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#24]

(35) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [c_current_addr_sk#21]
Right keys [1]: [ca_address_sk#22]
Join condition: None

(36) Project [codegen id : 6]
Output [1]: [c_customer_sk#20]
Input [3]: [c_customer_sk#20, c_current_addr_sk#21, ca_address_sk#22]

(37) BroadcastExchange
Input [1]: [c_customer_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#25]

(38) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#20]
Join condition: None

(39) Project [codegen id : 7]
Output [1]: [ss_ext_sales_price#5]
Input [3]: [ss_customer_sk#2, ss_ext_sales_price#5, c_customer_sk#20]

(40) HashAggregate [codegen id : 7]
Input [1]: [ss_ext_sales_price#5]
Keys: []
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#5))]
Aggregate Attributes [1]: [sum#26]
Results [1]: [sum#27]

(41) Exchange
Input [1]: [sum#27]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#28]

(42) HashAggregate [codegen id : 15]
Input [1]: [sum#27]
Keys: []
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#5))#29]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#5))#29,17,2) AS promotions#30]

(43) Scan parquet default.store_sales
Output [5]: [ss_item_sk#31, ss_customer_sk#32, ss_store_sk#33, ss_ext_sales_price#34, ss_sold_date_sk#35]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#35), dynamicpruningexpression(ss_sold_date_sk#35 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2)>

(44) ColumnarToRow [codegen id : 13]
Input [5]: [ss_item_sk#31, ss_customer_sk#32, ss_store_sk#33, ss_ext_sales_price#34, ss_sold_date_sk#35]

(45) Filter [codegen id : 13]
Input [5]: [ss_item_sk#31, ss_customer_sk#32, ss_store_sk#33, ss_ext_sales_price#34, ss_sold_date_sk#35]
Condition : (isnotnull(ss_store_sk#33) AND isnotnull(ss_customer_sk#32))

(46) ReusedExchange [Reuses operator id: 68]
Output [1]: [d_date_sk#36]

(47) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_sold_date_sk#35]
Right keys [1]: [d_date_sk#36]
Join condition: None

(48) Project [codegen id : 13]
Output [4]: [ss_item_sk#31, ss_customer_sk#32, ss_store_sk#33, ss_ext_sales_price#34]
Input [6]: [ss_item_sk#31, ss_customer_sk#32, ss_store_sk#33, ss_ext_sales_price#34, ss_sold_date_sk#35, d_date_sk#36]

(49) ReusedExchange [Reuses operator id: 11]
Output [1]: [i_item_sk#37]

(50) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_item_sk#31]
Right keys [1]: [i_item_sk#37]
Join condition: None

(51) Project [codegen id : 13]
Output [3]: [ss_customer_sk#32, ss_store_sk#33, ss_ext_sales_price#34]
Input [5]: [ss_item_sk#31, ss_customer_sk#32, ss_store_sk#33, ss_ext_sales_price#34, i_item_sk#37]

(52) ReusedExchange [Reuses operator id: 25]
Output [1]: [s_store_sk#38]

(53) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_store_sk#33]
Right keys [1]: [s_store_sk#38]
Join condition: None

(54) Project [codegen id : 13]
Output [2]: [ss_customer_sk#32, ss_ext_sales_price#34]
Input [4]: [ss_customer_sk#32, ss_store_sk#33, ss_ext_sales_price#34, s_store_sk#38]

(55) ReusedExchange [Reuses operator id: 37]
Output [1]: [c_customer_sk#39]

(56) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_customer_sk#32]
Right keys [1]: [c_customer_sk#39]
Join condition: None

(57) Project [codegen id : 13]
Output [1]: [ss_ext_sales_price#34]
Input [3]: [ss_customer_sk#32, ss_ext_sales_price#34, c_customer_sk#39]

(58) HashAggregate [codegen id : 13]
Input [1]: [ss_ext_sales_price#34]
Keys: []
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#34))]
Aggregate Attributes [1]: [sum#40]
Results [1]: [sum#41]

(59) Exchange
Input [1]: [sum#41]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#42]

(60) HashAggregate [codegen id : 14]
Input [1]: [sum#41]
Keys: []
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#34))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#34))#43]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#34))#43,17,2) AS total#44]

(61) BroadcastExchange
Input [1]: [total#44]
Arguments: IdentityBroadcastMode, [id=#45]

(62) BroadcastNestedLoopJoin [codegen id : 15]
Join condition: None

(63) Project [codegen id : 15]
Output [3]: [promotions#30, total#44, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(promotions#30 as decimal(15,4))) / promote_precision(cast(total#44 as decimal(15,4)))), DecimalType(35,20), true)) * 100.00000000000000000000), DecimalType(38,19), true) AS ((CAST(promotions AS DECIMAL(15,4)) / CAST(total AS DECIMAL(15,4))) * 100)#46]
Input [2]: [promotions#30, total#44]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#6 IN dynamicpruning#7
BroadcastExchange (68)
+- * Project (67)
   +- * Filter (66)
      +- * ColumnarToRow (65)
         +- Scan parquet default.date_dim (64)


(64) Scan parquet default.date_dim
Output [3]: [d_date_sk#8, d_year#47, d_moy#48]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [EqualTo(d_year,1998), EqualTo(d_moy,11)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(65) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#8, d_year#47, d_moy#48]

(66) Filter [codegen id : 1]
Input [3]: [d_date_sk#8, d_year#47, d_moy#48]
Condition : ((d_year#47 = 1998) AND (d_moy#48 = 11))

(67) Project [codegen id : 1]
Output [1]: [d_date_sk#8]
Input [3]: [d_date_sk#8, d_year#47, d_moy#48]

(68) BroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#49]

Subquery:2 Hosting operator id = 43 Hosting Expression = ss_sold_date_sk#35 IN dynamicpruning#7


