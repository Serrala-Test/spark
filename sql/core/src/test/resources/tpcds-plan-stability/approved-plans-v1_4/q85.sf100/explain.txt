== Physical Plan ==
TakeOrderedAndProject (51)
+- * HashAggregate (50)
   +- Exchange (49)
      +- * HashAggregate (48)
         +- * Project (47)
            +- * BroadcastHashJoin Inner BuildRight (46)
               :- * Project (42)
               :  +- * BroadcastHashJoin Inner BuildRight (41)
               :     :- * Project (39)
               :     :  +- * BroadcastHashJoin Inner BuildRight (38)
               :     :     :- * Project (32)
               :     :     :  +- * SortMergeJoin Inner (31)
               :     :     :     :- * Sort (26)
               :     :     :     :  +- Exchange (25)
               :     :     :     :     +- * Project (24)
               :     :     :     :        +- * BroadcastHashJoin Inner BuildRight (23)
               :     :     :     :           :- * Project (18)
               :     :     :     :           :  +- * SortMergeJoin Inner (17)
               :     :     :     :           :     :- * Sort (10)
               :     :     :     :           :     :  +- Exchange (9)
               :     :     :     :           :     :     +- * Project (8)
               :     :     :     :           :     :        +- * BroadcastHashJoin Inner BuildRight (7)
               :     :     :     :           :     :           :- * Filter (3)
               :     :     :     :           :     :           :  +- * ColumnarToRow (2)
               :     :     :     :           :     :           :     +- Scan parquet default.web_sales (1)
               :     :     :     :           :     :           +- BroadcastExchange (6)
               :     :     :     :           :     :              +- * ColumnarToRow (5)
               :     :     :     :           :     :                 +- Scan parquet default.web_page (4)
               :     :     :     :           :     +- * Sort (16)
               :     :     :     :           :        +- Exchange (15)
               :     :     :     :           :           +- * Project (14)
               :     :     :     :           :              +- * Filter (13)
               :     :     :     :           :                 +- * ColumnarToRow (12)
               :     :     :     :           :                    +- Scan parquet default.web_returns (11)
               :     :     :     :           +- BroadcastExchange (22)
               :     :     :     :              +- * Filter (21)
               :     :     :     :                 +- * ColumnarToRow (20)
               :     :     :     :                    +- Scan parquet default.customer_demographics (19)
               :     :     :     +- * Sort (30)
               :     :     :        +- Exchange (29)
               :     :     :           +- * ColumnarToRow (28)
               :     :     :              +- Scan parquet default.customer_demographics (27)
               :     :     +- BroadcastExchange (37)
               :     :        +- * Project (36)
               :     :           +- * Filter (35)
               :     :              +- * ColumnarToRow (34)
               :     :                 +- Scan parquet default.customer_address (33)
               :     +- ReusedExchange (40)
               +- BroadcastExchange (45)
                  +- * ColumnarToRow (44)
                     +- Scan parquet default.reason (43)


(1) Scan parquet default.web_sales
Output [7]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#7), dynamicpruningexpression(ws_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ws_web_page_sk), Or(Or(And(GreaterThanOrEqual(ws_sales_price,100.00),LessThanOrEqual(ws_sales_price,150.00)),And(GreaterThanOrEqual(ws_sales_price,50.00),LessThanOrEqual(ws_sales_price,100.00))),And(GreaterThanOrEqual(ws_sales_price,150.00),LessThanOrEqual(ws_sales_price,200.00))), Or(Or(And(GreaterThanOrEqual(ws_net_profit,100.00),LessThanOrEqual(ws_net_profit,200.00)),And(GreaterThanOrEqual(ws_net_profit,150.00),LessThanOrEqual(ws_net_profit,300.00))),And(GreaterThanOrEqual(ws_net_profit,50.00),LessThanOrEqual(ws_net_profit,250.00)))]
ReadSchema: struct<ws_item_sk:int,ws_web_page_sk:int,ws_order_number:int,ws_quantity:int,ws_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [7]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]

(3) Filter [codegen id : 2]
Input [7]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Condition : ((isnotnull(ws_web_page_sk#2) AND ((((ws_sales_price#5 >= 100.00) AND (ws_sales_price#5 <= 150.00)) OR ((ws_sales_price#5 >= 50.00) AND (ws_sales_price#5 <= 100.00))) OR ((ws_sales_price#5 >= 150.00) AND (ws_sales_price#5 <= 200.00)))) AND ((((ws_net_profit#6 >= 100.00) AND (ws_net_profit#6 <= 200.00)) OR ((ws_net_profit#6 >= 150.00) AND (ws_net_profit#6 <= 300.00))) OR ((ws_net_profit#6 >= 50.00) AND (ws_net_profit#6 <= 250.00))))

(4) Scan parquet default.web_page
Output [1]: [wp_web_page_sk#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_page]
ReadSchema: struct<wp_web_page_sk:int>

(5) ColumnarToRow [codegen id : 1]
Input [1]: [wp_web_page_sk#9]

(6) BroadcastExchange
Input [1]: [wp_web_page_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#10]

(7) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_web_page_sk#2]
Right keys [1]: [wp_web_page_sk#9]
Join condition: None

(8) Project [codegen id : 2]
Output [6]: [ws_item_sk#1, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Input [8]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wp_web_page_sk#9]

(9) Exchange
Input [6]: [ws_item_sk#1, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Arguments: hashpartitioning(ws_item_sk#1, ws_order_number#3, 5), ENSURE_REQUIREMENTS, [id=#11]

(10) Sort [codegen id : 3]
Input [6]: [ws_item_sk#1, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Arguments: [ws_item_sk#1 ASC NULLS FIRST, ws_order_number#3 ASC NULLS FIRST], false, 0

(11) Scan parquet default.web_returns
Output [9]: [wr_item_sk#12, wr_refunded_cdemo_sk#13, wr_refunded_addr_sk#14, wr_returning_cdemo_sk#15, wr_reason_sk#16, wr_order_number#17, wr_fee#18, wr_refunded_cash#19, wr_returned_date_sk#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_refunded_cdemo_sk), IsNotNull(wr_returning_cdemo_sk), IsNotNull(wr_refunded_addr_sk), IsNotNull(wr_reason_sk)]
ReadSchema: struct<wr_item_sk:int,wr_refunded_cdemo_sk:int,wr_refunded_addr_sk:int,wr_returning_cdemo_sk:int,wr_reason_sk:int,wr_order_number:int,wr_fee:decimal(7,2),wr_refunded_cash:decimal(7,2)>

(12) ColumnarToRow [codegen id : 4]
Input [9]: [wr_item_sk#12, wr_refunded_cdemo_sk#13, wr_refunded_addr_sk#14, wr_returning_cdemo_sk#15, wr_reason_sk#16, wr_order_number#17, wr_fee#18, wr_refunded_cash#19, wr_returned_date_sk#20]

(13) Filter [codegen id : 4]
Input [9]: [wr_item_sk#12, wr_refunded_cdemo_sk#13, wr_refunded_addr_sk#14, wr_returning_cdemo_sk#15, wr_reason_sk#16, wr_order_number#17, wr_fee#18, wr_refunded_cash#19, wr_returned_date_sk#20]
Condition : (((isnotnull(wr_refunded_cdemo_sk#13) AND isnotnull(wr_returning_cdemo_sk#15)) AND isnotnull(wr_refunded_addr_sk#14)) AND isnotnull(wr_reason_sk#16))

(14) Project [codegen id : 4]
Output [8]: [wr_item_sk#12, wr_refunded_cdemo_sk#13, wr_refunded_addr_sk#14, wr_returning_cdemo_sk#15, wr_reason_sk#16, wr_order_number#17, wr_fee#18, wr_refunded_cash#19]
Input [9]: [wr_item_sk#12, wr_refunded_cdemo_sk#13, wr_refunded_addr_sk#14, wr_returning_cdemo_sk#15, wr_reason_sk#16, wr_order_number#17, wr_fee#18, wr_refunded_cash#19, wr_returned_date_sk#20]

(15) Exchange
Input [8]: [wr_item_sk#12, wr_refunded_cdemo_sk#13, wr_refunded_addr_sk#14, wr_returning_cdemo_sk#15, wr_reason_sk#16, wr_order_number#17, wr_fee#18, wr_refunded_cash#19]
Arguments: hashpartitioning(wr_item_sk#12, wr_order_number#17, 5), ENSURE_REQUIREMENTS, [id=#21]

(16) Sort [codegen id : 5]
Input [8]: [wr_item_sk#12, wr_refunded_cdemo_sk#13, wr_refunded_addr_sk#14, wr_returning_cdemo_sk#15, wr_reason_sk#16, wr_order_number#17, wr_fee#18, wr_refunded_cash#19]
Arguments: [wr_item_sk#12 ASC NULLS FIRST, wr_order_number#17 ASC NULLS FIRST], false, 0

(17) SortMergeJoin [codegen id : 7]
Left keys [2]: [ws_item_sk#1, ws_order_number#3]
Right keys [2]: [wr_item_sk#12, wr_order_number#17]
Join condition: None

(18) Project [codegen id : 7]
Output [10]: [ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#13, wr_refunded_addr_sk#14, wr_returning_cdemo_sk#15, wr_reason_sk#16, wr_fee#18, wr_refunded_cash#19]
Input [14]: [ws_item_sk#1, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_item_sk#12, wr_refunded_cdemo_sk#13, wr_refunded_addr_sk#14, wr_returning_cdemo_sk#15, wr_reason_sk#16, wr_order_number#17, wr_fee#18, wr_refunded_cash#19]

(19) Scan parquet default.customer_demographics
Output [3]: [cd_demo_sk#22, cd_marital_status#23, cd_education_status#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [Or(Or(And(EqualTo(cd_marital_status,M),EqualTo(cd_education_status,Advanced Degree     )),And(EqualTo(cd_marital_status,S),EqualTo(cd_education_status,College             ))),And(EqualTo(cd_marital_status,W),EqualTo(cd_education_status,2 yr Degree         )))]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(20) ColumnarToRow [codegen id : 6]
Input [3]: [cd_demo_sk#22, cd_marital_status#23, cd_education_status#24]

(21) Filter [codegen id : 6]
Input [3]: [cd_demo_sk#22, cd_marital_status#23, cd_education_status#24]
Condition : ((((cd_marital_status#23 = M) AND (cd_education_status#24 = Advanced Degree     )) OR ((cd_marital_status#23 = S) AND (cd_education_status#24 = College             ))) OR ((cd_marital_status#23 = W) AND (cd_education_status#24 = 2 yr Degree         )))

(22) BroadcastExchange
Input [3]: [cd_demo_sk#22, cd_marital_status#23, cd_education_status#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#25]

(23) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [wr_refunded_cdemo_sk#13]
Right keys [1]: [cd_demo_sk#22]
Join condition: ((((((cd_marital_status#23 = M) AND (cd_education_status#24 = Advanced Degree     )) AND (ws_sales_price#5 >= 100.00)) AND (ws_sales_price#5 <= 150.00)) OR ((((cd_marital_status#23 = S) AND (cd_education_status#24 = College             )) AND (ws_sales_price#5 >= 50.00)) AND (ws_sales_price#5 <= 100.00))) OR ((((cd_marital_status#23 = W) AND (cd_education_status#24 = 2 yr Degree         )) AND (ws_sales_price#5 >= 150.00)) AND (ws_sales_price#5 <= 200.00)))

(24) Project [codegen id : 7]
Output [10]: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#14, wr_returning_cdemo_sk#15, wr_reason_sk#16, wr_fee#18, wr_refunded_cash#19, cd_marital_status#23, cd_education_status#24]
Input [13]: [ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#13, wr_refunded_addr_sk#14, wr_returning_cdemo_sk#15, wr_reason_sk#16, wr_fee#18, wr_refunded_cash#19, cd_demo_sk#22, cd_marital_status#23, cd_education_status#24]

(25) Exchange
Input [10]: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#14, wr_returning_cdemo_sk#15, wr_reason_sk#16, wr_fee#18, wr_refunded_cash#19, cd_marital_status#23, cd_education_status#24]
Arguments: hashpartitioning(wr_returning_cdemo_sk#15, cd_marital_status#23, cd_education_status#24, 5), ENSURE_REQUIREMENTS, [id=#26]

(26) Sort [codegen id : 8]
Input [10]: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#14, wr_returning_cdemo_sk#15, wr_reason_sk#16, wr_fee#18, wr_refunded_cash#19, cd_marital_status#23, cd_education_status#24]
Arguments: [wr_returning_cdemo_sk#15 ASC NULLS FIRST, cd_marital_status#23 ASC NULLS FIRST, cd_education_status#24 ASC NULLS FIRST], false, 0

(27) Scan parquet default.customer_demographics
Output [3]: [cd_demo_sk#27, cd_marital_status#28, cd_education_status#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(28) ColumnarToRow [codegen id : 9]
Input [3]: [cd_demo_sk#27, cd_marital_status#28, cd_education_status#29]

(29) Exchange
Input [3]: [cd_demo_sk#27, cd_marital_status#28, cd_education_status#29]
Arguments: hashpartitioning(cd_demo_sk#27, cd_marital_status#28, cd_education_status#29, 5), ENSURE_REQUIREMENTS, [id=#30]

(30) Sort [codegen id : 10]
Input [3]: [cd_demo_sk#27, cd_marital_status#28, cd_education_status#29]
Arguments: [cd_demo_sk#27 ASC NULLS FIRST, cd_marital_status#28 ASC NULLS FIRST, cd_education_status#29 ASC NULLS FIRST], false, 0

(31) SortMergeJoin [codegen id : 14]
Left keys [3]: [wr_returning_cdemo_sk#15, cd_marital_status#23, cd_education_status#24]
Right keys [3]: [cd_demo_sk#27, cd_marital_status#28, cd_education_status#29]
Join condition: None

(32) Project [codegen id : 14]
Output [7]: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#14, wr_reason_sk#16, wr_fee#18, wr_refunded_cash#19]
Input [13]: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#14, wr_returning_cdemo_sk#15, wr_reason_sk#16, wr_fee#18, wr_refunded_cash#19, cd_marital_status#23, cd_education_status#24, cd_demo_sk#27, cd_marital_status#28, cd_education_status#29]

(33) Scan parquet default.customer_address
Output [3]: [ca_address_sk#31, ca_state#32, ca_country#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), Or(Or(In(ca_state, [IN,NJ,OH]),In(ca_state, [CT,KY,WI])),In(ca_state, [AR,IA,LA]))]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(34) ColumnarToRow [codegen id : 11]
Input [3]: [ca_address_sk#31, ca_state#32, ca_country#33]

(35) Filter [codegen id : 11]
Input [3]: [ca_address_sk#31, ca_state#32, ca_country#33]
Condition : ((isnotnull(ca_country#33) AND (ca_country#33 = United States)) AND ((ca_state#32 IN (IN,OH,NJ) OR ca_state#32 IN (WI,CT,KY)) OR ca_state#32 IN (LA,IA,AR)))

(36) Project [codegen id : 11]
Output [2]: [ca_address_sk#31, ca_state#32]
Input [3]: [ca_address_sk#31, ca_state#32, ca_country#33]

(37) BroadcastExchange
Input [2]: [ca_address_sk#31, ca_state#32]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#34]

(38) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [wr_refunded_addr_sk#14]
Right keys [1]: [ca_address_sk#31]
Join condition: ((((ca_state#32 IN (IN,OH,NJ) AND (ws_net_profit#6 >= 100.00)) AND (ws_net_profit#6 <= 200.00)) OR ((ca_state#32 IN (WI,CT,KY) AND (ws_net_profit#6 >= 150.00)) AND (ws_net_profit#6 <= 300.00))) OR ((ca_state#32 IN (LA,IA,AR) AND (ws_net_profit#6 >= 50.00)) AND (ws_net_profit#6 <= 250.00)))

(39) Project [codegen id : 14]
Output [5]: [ws_quantity#4, ws_sold_date_sk#7, wr_reason_sk#16, wr_fee#18, wr_refunded_cash#19]
Input [9]: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#14, wr_reason_sk#16, wr_fee#18, wr_refunded_cash#19, ca_address_sk#31, ca_state#32]

(40) ReusedExchange [Reuses operator id: 56]
Output [1]: [d_date_sk#35]

(41) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_sold_date_sk#7]
Right keys [1]: [d_date_sk#35]
Join condition: None

(42) Project [codegen id : 14]
Output [4]: [ws_quantity#4, wr_reason_sk#16, wr_fee#18, wr_refunded_cash#19]
Input [6]: [ws_quantity#4, ws_sold_date_sk#7, wr_reason_sk#16, wr_fee#18, wr_refunded_cash#19, d_date_sk#35]

(43) Scan parquet default.reason
Output [2]: [r_reason_sk#36, r_reason_desc#37]
Batched: true
Location [not included in comparison]/{warehouse_dir}/reason]
ReadSchema: struct<r_reason_sk:int,r_reason_desc:string>

(44) ColumnarToRow [codegen id : 13]
Input [2]: [r_reason_sk#36, r_reason_desc#37]

(45) BroadcastExchange
Input [2]: [r_reason_sk#36, r_reason_desc#37]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#38]

(46) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [wr_reason_sk#16]
Right keys [1]: [r_reason_sk#36]
Join condition: None

(47) Project [codegen id : 14]
Output [4]: [ws_quantity#4, wr_fee#18, wr_refunded_cash#19, r_reason_desc#37]
Input [6]: [ws_quantity#4, wr_reason_sk#16, wr_fee#18, wr_refunded_cash#19, r_reason_sk#36, r_reason_desc#37]

(48) HashAggregate [codegen id : 14]
Input [4]: [ws_quantity#4, wr_fee#18, wr_refunded_cash#19, r_reason_desc#37]
Keys [1]: [r_reason_desc#37]
Functions [3]: [partial_avg(ws_quantity#4), partial_avg(UnscaledValue(wr_refunded_cash#19)), partial_avg(UnscaledValue(wr_fee#18))]
Aggregate Attributes [6]: [sum#39, count#40, sum#41, count#42, sum#43, count#44]
Results [7]: [r_reason_desc#37, sum#45, count#46, sum#47, count#48, sum#49, count#50]

(49) Exchange
Input [7]: [r_reason_desc#37, sum#45, count#46, sum#47, count#48, sum#49, count#50]
Arguments: hashpartitioning(r_reason_desc#37, 5), ENSURE_REQUIREMENTS, [id=#51]

(50) HashAggregate [codegen id : 15]
Input [7]: [r_reason_desc#37, sum#45, count#46, sum#47, count#48, sum#49, count#50]
Keys [1]: [r_reason_desc#37]
Functions [3]: [avg(ws_quantity#4), avg(UnscaledValue(wr_refunded_cash#19)), avg(UnscaledValue(wr_fee#18))]
Aggregate Attributes [3]: [avg(ws_quantity#4)#52, avg(UnscaledValue(wr_refunded_cash#19))#53, avg(UnscaledValue(wr_fee#18))#54]
Results [4]: [substr(r_reason_desc#37, 1, 20) AS substr(r_reason_desc, 1, 20)#55, avg(ws_quantity#4)#52 AS avg(ws_quantity)#56, cast((avg(UnscaledValue(wr_refunded_cash#19))#53 / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#57, cast((avg(UnscaledValue(wr_fee#18))#54 / 100.0) as decimal(11,6)) AS avg(wr_fee)#58]

(51) TakeOrderedAndProject
Input [4]: [substr(r_reason_desc, 1, 20)#55, avg(ws_quantity)#56, avg(wr_refunded_cash)#57, avg(wr_fee)#58]
Arguments: 100, [substr(r_reason_desc, 1, 20)#55 ASC NULLS FIRST, avg(ws_quantity)#56 ASC NULLS FIRST, avg(wr_refunded_cash)#57 ASC NULLS FIRST, avg(wr_fee)#58 ASC NULLS FIRST], [substr(r_reason_desc, 1, 20)#55, avg(ws_quantity)#56, avg(wr_refunded_cash)#57, avg(wr_fee)#58]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (56)
+- * Project (55)
   +- * Filter (54)
      +- * ColumnarToRow (53)
         +- Scan parquet default.date_dim (52)


(52) Scan parquet default.date_dim
Output [2]: [d_date_sk#35, d_year#59]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [EqualTo(d_year,2000)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(53) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#35, d_year#59]

(54) Filter [codegen id : 1]
Input [2]: [d_date_sk#35, d_year#59]
Condition : (d_year#59 = 2000)

(55) Project [codegen id : 1]
Output [1]: [d_date_sk#35]
Input [2]: [d_date_sk#35, d_year#59]

(56) BroadcastExchange
Input [1]: [d_date_sk#35]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#60]


