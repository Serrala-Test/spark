== Physical Plan ==
TakeOrderedAndProject (57)
+- * HashAggregate (56)
   +- Exchange (55)
      +- * HashAggregate (54)
         +- * Project (53)
            +- * BroadcastHashJoin Inner BuildRight (52)
               :- * Project (46)
               :  +- * BroadcastHashJoin Inner BuildRight (45)
               :     :- * Project (40)
               :     :  +- * BroadcastHashJoin Inner BuildRight (39)
               :     :     :- * Project (34)
               :     :     :  +- * BroadcastHashJoin Inner BuildRight (33)
               :     :     :     :- * Project (27)
               :     :     :     :  +- * SortMergeJoin Inner (26)
               :     :     :     :     :- * Sort (20)
               :     :     :     :     :  +- Exchange (19)
               :     :     :     :     :     +- * Project (18)
               :     :     :     :     :        +- * BroadcastHashJoin Inner BuildRight (17)
               :     :     :     :     :           :- * Project (12)
               :     :     :     :     :           :  +- * SortMergeJoin Inner (11)
               :     :     :     :     :           :     :- * Sort (5)
               :     :     :     :     :           :     :  +- Exchange (4)
               :     :     :     :     :           :     :     +- * Filter (3)
               :     :     :     :     :           :     :        +- * ColumnarToRow (2)
               :     :     :     :     :           :     :           +- Scan parquet default.web_sales (1)
               :     :     :     :     :           :     +- * Sort (10)
               :     :     :     :     :           :        +- Exchange (9)
               :     :     :     :     :           :           +- * Filter (8)
               :     :     :     :     :           :              +- * ColumnarToRow (7)
               :     :     :     :     :           :                 +- Scan parquet default.web_returns (6)
               :     :     :     :     :           +- BroadcastExchange (16)
               :     :     :     :     :              +- * Filter (15)
               :     :     :     :     :                 +- * ColumnarToRow (14)
               :     :     :     :     :                    +- Scan parquet default.web_page (13)
               :     :     :     :     +- * Sort (25)
               :     :     :     :        +- Exchange (24)
               :     :     :     :           +- * Filter (23)
               :     :     :     :              +- * ColumnarToRow (22)
               :     :     :     :                 +- Scan parquet default.customer_demographics (21)
               :     :     :     +- BroadcastExchange (32)
               :     :     :        +- * Project (31)
               :     :     :           +- * Filter (30)
               :     :     :              +- * ColumnarToRow (29)
               :     :     :                 +- Scan parquet default.customer_address (28)
               :     :     +- BroadcastExchange (38)
               :     :        +- * Filter (37)
               :     :           +- * ColumnarToRow (36)
               :     :              +- Scan parquet default.customer_demographics (35)
               :     +- BroadcastExchange (44)
               :        +- * Filter (43)
               :           +- * ColumnarToRow (42)
               :              +- Scan parquet default.reason (41)
               +- BroadcastExchange (51)
                  +- * Project (50)
                     +- * Filter (49)
                        +- * ColumnarToRow (48)
                           +- Scan parquet default.date_dim (47)


(1) Scan parquet default.web_sales
Output [7]: [ws_sold_date_sk#1, ws_item_sk#2, ws_web_page_sk#3, ws_order_number#4, ws_quantity#5, ws_sales_price#6, ws_net_profit#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_page_sk), IsNotNull(ws_sold_date_sk), Or(Or(And(GreaterThanOrEqual(ws_sales_price,100.00),LessThanOrEqual(ws_sales_price,150.00)),And(GreaterThanOrEqual(ws_sales_price,50.00),LessThanOrEqual(ws_sales_price,100.00))),And(GreaterThanOrEqual(ws_sales_price,150.00),LessThanOrEqual(ws_sales_price,200.00))), Or(Or(And(GreaterThanOrEqual(ws_net_profit,100.00),LessThanOrEqual(ws_net_profit,200.00)),And(GreaterThanOrEqual(ws_net_profit,150.00),LessThanOrEqual(ws_net_profit,300.00))),And(GreaterThanOrEqual(ws_net_profit,50.00),LessThanOrEqual(ws_net_profit,250.00)))]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_web_page_sk:int,ws_order_number:int,ws_quantity:int,ws_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [7]: [ws_sold_date_sk#1, ws_item_sk#2, ws_web_page_sk#3, ws_order_number#4, ws_quantity#5, ws_sales_price#6, ws_net_profit#7]

(3) Filter [codegen id : 1]
Input [7]: [ws_sold_date_sk#1, ws_item_sk#2, ws_web_page_sk#3, ws_order_number#4, ws_quantity#5, ws_sales_price#6, ws_net_profit#7]
Condition : (((((isnotnull(ws_item_sk#2) AND isnotnull(ws_order_number#4)) AND isnotnull(ws_web_page_sk#3)) AND isnotnull(ws_sold_date_sk#1)) AND ((((ws_sales_price#6 >= 100.00) AND (ws_sales_price#6 <= 150.00)) OR ((ws_sales_price#6 >= 50.00) AND (ws_sales_price#6 <= 100.00))) OR ((ws_sales_price#6 >= 150.00) AND (ws_sales_price#6 <= 200.00)))) AND ((((ws_net_profit#7 >= 100.00) AND (ws_net_profit#7 <= 200.00)) OR ((ws_net_profit#7 >= 150.00) AND (ws_net_profit#7 <= 300.00))) OR ((ws_net_profit#7 >= 50.00) AND (ws_net_profit#7 <= 250.00))))

(4) Exchange
Input [7]: [ws_sold_date_sk#1, ws_item_sk#2, ws_web_page_sk#3, ws_order_number#4, ws_quantity#5, ws_sales_price#6, ws_net_profit#7]
Arguments: hashpartitioning(cast(ws_item_sk#2 as bigint), cast(ws_order_number#4 as bigint), 5), ENSURE_REQUIREMENTS, [id=#8]

(5) Sort [codegen id : 2]
Input [7]: [ws_sold_date_sk#1, ws_item_sk#2, ws_web_page_sk#3, ws_order_number#4, ws_quantity#5, ws_sales_price#6, ws_net_profit#7]
Arguments: [cast(ws_item_sk#2 as bigint) ASC NULLS FIRST, cast(ws_order_number#4 as bigint) ASC NULLS FIRST], false, 0

(6) Scan parquet default.web_returns
Output [8]: [wr_item_sk#9, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_order_number#14, wr_fee#15, wr_refunded_cash#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number), IsNotNull(wr_refunded_cdemo_sk), IsNotNull(wr_returning_cdemo_sk), IsNotNull(wr_refunded_addr_sk), IsNotNull(wr_reason_sk)]
ReadSchema: struct<wr_item_sk:bigint,wr_refunded_cdemo_sk:bigint,wr_refunded_addr_sk:bigint,wr_returning_cdemo_sk:bigint,wr_reason_sk:bigint,wr_order_number:bigint,wr_fee:decimal(7,2),wr_refunded_cash:decimal(7,2)>

(7) ColumnarToRow [codegen id : 3]
Input [8]: [wr_item_sk#9, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_order_number#14, wr_fee#15, wr_refunded_cash#16]

(8) Filter [codegen id : 3]
Input [8]: [wr_item_sk#9, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_order_number#14, wr_fee#15, wr_refunded_cash#16]
Condition : (((((isnotnull(wr_item_sk#9) AND isnotnull(wr_order_number#14)) AND isnotnull(wr_refunded_cdemo_sk#10)) AND isnotnull(wr_returning_cdemo_sk#12)) AND isnotnull(wr_refunded_addr_sk#11)) AND isnotnull(wr_reason_sk#13))

(9) Exchange
Input [8]: [wr_item_sk#9, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_order_number#14, wr_fee#15, wr_refunded_cash#16]
Arguments: hashpartitioning(wr_item_sk#9, wr_order_number#14, 5), ENSURE_REQUIREMENTS, [id=#17]

(10) Sort [codegen id : 4]
Input [8]: [wr_item_sk#9, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_order_number#14, wr_fee#15, wr_refunded_cash#16]
Arguments: [wr_item_sk#9 ASC NULLS FIRST, wr_order_number#14 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 6]
Left keys [2]: [cast(ws_item_sk#2 as bigint), cast(ws_order_number#4 as bigint)]
Right keys [2]: [wr_item_sk#9, wr_order_number#14]
Join condition: None

(12) Project [codegen id : 6]
Output [11]: [ws_sold_date_sk#1, ws_web_page_sk#3, ws_quantity#5, ws_sales_price#6, ws_net_profit#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16]
Input [15]: [ws_sold_date_sk#1, ws_item_sk#2, ws_web_page_sk#3, ws_order_number#4, ws_quantity#5, ws_sales_price#6, ws_net_profit#7, wr_item_sk#9, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_order_number#14, wr_fee#15, wr_refunded_cash#16]

(13) Scan parquet default.web_page
Output [1]: [wp_web_page_sk#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_page]
PushedFilters: [IsNotNull(wp_web_page_sk)]
ReadSchema: struct<wp_web_page_sk:int>

(14) ColumnarToRow [codegen id : 5]
Input [1]: [wp_web_page_sk#18]

(15) Filter [codegen id : 5]
Input [1]: [wp_web_page_sk#18]
Condition : isnotnull(wp_web_page_sk#18)

(16) BroadcastExchange
Input [1]: [wp_web_page_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#19]

(17) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_web_page_sk#3]
Right keys [1]: [wp_web_page_sk#18]
Join condition: None

(18) Project [codegen id : 6]
Output [10]: [ws_sold_date_sk#1, ws_quantity#5, ws_sales_price#6, ws_net_profit#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16]
Input [12]: [ws_sold_date_sk#1, ws_web_page_sk#3, ws_quantity#5, ws_sales_price#6, ws_net_profit#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, wp_web_page_sk#18]

(19) Exchange
Input [10]: [ws_sold_date_sk#1, ws_quantity#5, ws_sales_price#6, ws_net_profit#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16]
Arguments: hashpartitioning(wr_returning_cdemo_sk#12, 5), ENSURE_REQUIREMENTS, [id=#20]

(20) Sort [codegen id : 7]
Input [10]: [ws_sold_date_sk#1, ws_quantity#5, ws_sales_price#6, ws_net_profit#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16]
Arguments: [wr_returning_cdemo_sk#12 ASC NULLS FIRST], false, 0

(21) Scan parquet default.customer_demographics
Output [3]: [cd_demo_sk#21, cd_marital_status#22, cd_education_status#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(22) ColumnarToRow [codegen id : 8]
Input [3]: [cd_demo_sk#21, cd_marital_status#22, cd_education_status#23]

(23) Filter [codegen id : 8]
Input [3]: [cd_demo_sk#21, cd_marital_status#22, cd_education_status#23]
Condition : ((isnotnull(cd_demo_sk#21) AND isnotnull(cd_marital_status#22)) AND isnotnull(cd_education_status#23))

(24) Exchange
Input [3]: [cd_demo_sk#21, cd_marital_status#22, cd_education_status#23]
Arguments: hashpartitioning(cast(cd_demo_sk#21 as bigint), 5), ENSURE_REQUIREMENTS, [id=#24]

(25) Sort [codegen id : 9]
Input [3]: [cd_demo_sk#21, cd_marital_status#22, cd_education_status#23]
Arguments: [cast(cd_demo_sk#21 as bigint) ASC NULLS FIRST], false, 0

(26) SortMergeJoin [codegen id : 14]
Left keys [1]: [wr_returning_cdemo_sk#12]
Right keys [1]: [cast(cd_demo_sk#21 as bigint)]
Join condition: None

(27) Project [codegen id : 14]
Output [11]: [ws_sold_date_sk#1, ws_quantity#5, ws_sales_price#6, ws_net_profit#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, cd_marital_status#22, cd_education_status#23]
Input [13]: [ws_sold_date_sk#1, ws_quantity#5, ws_sales_price#6, ws_net_profit#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, cd_demo_sk#21, cd_marital_status#22, cd_education_status#23]

(28) Scan parquet default.customer_address
Output [3]: [ca_address_sk#25, ca_state#26, ca_country#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_state, [IN,OH,NJ]),In(ca_state, [WI,CT,KY])),In(ca_state, [LA,IA,AR]))]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(29) ColumnarToRow [codegen id : 10]
Input [3]: [ca_address_sk#25, ca_state#26, ca_country#27]

(30) Filter [codegen id : 10]
Input [3]: [ca_address_sk#25, ca_state#26, ca_country#27]
Condition : (((isnotnull(ca_country#27) AND (ca_country#27 = United States)) AND isnotnull(ca_address_sk#25)) AND ((ca_state#26 IN (IN,OH,NJ) OR ca_state#26 IN (WI,CT,KY)) OR ca_state#26 IN (LA,IA,AR)))

(31) Project [codegen id : 10]
Output [2]: [ca_address_sk#25, ca_state#26]
Input [3]: [ca_address_sk#25, ca_state#26, ca_country#27]

(32) BroadcastExchange
Input [2]: [ca_address_sk#25, ca_state#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#28]

(33) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [wr_refunded_addr_sk#11]
Right keys [1]: [cast(ca_address_sk#25 as bigint)]
Join condition: ((((ca_state#26 IN (IN,OH,NJ) AND (ws_net_profit#7 >= 100.00)) AND (ws_net_profit#7 <= 200.00)) OR ((ca_state#26 IN (WI,CT,KY) AND (ws_net_profit#7 >= 150.00)) AND (ws_net_profit#7 <= 300.00))) OR ((ca_state#26 IN (LA,IA,AR) AND (ws_net_profit#7 >= 50.00)) AND (ws_net_profit#7 <= 250.00)))

(34) Project [codegen id : 14]
Output [9]: [ws_sold_date_sk#1, ws_quantity#5, ws_sales_price#6, wr_refunded_cdemo_sk#10, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, cd_marital_status#22, cd_education_status#23]
Input [13]: [ws_sold_date_sk#1, ws_quantity#5, ws_sales_price#6, ws_net_profit#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, cd_marital_status#22, cd_education_status#23, ca_address_sk#25, ca_state#26]

(35) Scan parquet default.customer_demographics
Output [3]: [cd_demo_sk#29, cd_marital_status#30, cd_education_status#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(EqualTo(cd_marital_status,M),EqualTo(cd_education_status,Advanced Degree)),And(EqualTo(cd_marital_status,S),EqualTo(cd_education_status,College))),And(EqualTo(cd_marital_status,W),EqualTo(cd_education_status,2 yr Degree)))]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(36) ColumnarToRow [codegen id : 11]
Input [3]: [cd_demo_sk#29, cd_marital_status#30, cd_education_status#31]

(37) Filter [codegen id : 11]
Input [3]: [cd_demo_sk#29, cd_marital_status#30, cd_education_status#31]
Condition : (((isnotnull(cd_demo_sk#29) AND isnotnull(cd_marital_status#30)) AND isnotnull(cd_education_status#31)) AND ((((cd_marital_status#30 = M) AND (cd_education_status#31 = Advanced Degree)) OR ((cd_marital_status#30 = S) AND (cd_education_status#31 = College))) OR ((cd_marital_status#30 = W) AND (cd_education_status#31 = 2 yr Degree))))

(38) BroadcastExchange
Input [3]: [cd_demo_sk#29, cd_marital_status#30, cd_education_status#31]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint), input[1, string, false], input[2, string, false]),false), [id=#32]

(39) BroadcastHashJoin [codegen id : 14]
Left keys [3]: [wr_refunded_cdemo_sk#10, cd_marital_status#22, cd_education_status#23]
Right keys [3]: [cast(cd_demo_sk#29 as bigint), cd_marital_status#30, cd_education_status#31]
Join condition: ((((((cd_marital_status#30 = M) AND (cd_education_status#31 = Advanced Degree)) AND (ws_sales_price#6 >= 100.00)) AND (ws_sales_price#6 <= 150.00)) OR ((((cd_marital_status#30 = S) AND (cd_education_status#31 = College)) AND (ws_sales_price#6 >= 50.00)) AND (ws_sales_price#6 <= 100.00))) OR ((((cd_marital_status#30 = W) AND (cd_education_status#31 = 2 yr Degree)) AND (ws_sales_price#6 >= 150.00)) AND (ws_sales_price#6 <= 200.00)))

(40) Project [codegen id : 14]
Output [5]: [ws_sold_date_sk#1, ws_quantity#5, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16]
Input [12]: [ws_sold_date_sk#1, ws_quantity#5, ws_sales_price#6, wr_refunded_cdemo_sk#10, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, cd_marital_status#22, cd_education_status#23, cd_demo_sk#29, cd_marital_status#30, cd_education_status#31]

(41) Scan parquet default.reason
Output [2]: [r_reason_sk#33, r_reason_desc#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/reason]
PushedFilters: [IsNotNull(r_reason_sk)]
ReadSchema: struct<r_reason_sk:int,r_reason_desc:string>

(42) ColumnarToRow [codegen id : 12]
Input [2]: [r_reason_sk#33, r_reason_desc#34]

(43) Filter [codegen id : 12]
Input [2]: [r_reason_sk#33, r_reason_desc#34]
Condition : isnotnull(r_reason_sk#33)

(44) BroadcastExchange
Input [2]: [r_reason_sk#33, r_reason_desc#34]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#35]

(45) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [wr_reason_sk#13]
Right keys [1]: [cast(r_reason_sk#33 as bigint)]
Join condition: None

(46) Project [codegen id : 14]
Output [5]: [ws_sold_date_sk#1, ws_quantity#5, wr_fee#15, wr_refunded_cash#16, r_reason_desc#34]
Input [7]: [ws_sold_date_sk#1, ws_quantity#5, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, r_reason_sk#33, r_reason_desc#34]

(47) Scan parquet default.date_dim
Output [2]: [d_date_sk#36, d_year#37]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(48) ColumnarToRow [codegen id : 13]
Input [2]: [d_date_sk#36, d_year#37]

(49) Filter [codegen id : 13]
Input [2]: [d_date_sk#36, d_year#37]
Condition : ((isnotnull(d_year#37) AND (d_year#37 = 2000)) AND isnotnull(d_date_sk#36))

(50) Project [codegen id : 13]
Output [1]: [d_date_sk#36]
Input [2]: [d_date_sk#36, d_year#37]

(51) BroadcastExchange
Input [1]: [d_date_sk#36]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#38]

(52) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_sold_date_sk#1]
Right keys [1]: [d_date_sk#36]
Join condition: None

(53) Project [codegen id : 14]
Output [4]: [ws_quantity#5, wr_fee#15, wr_refunded_cash#16, r_reason_desc#34]
Input [6]: [ws_sold_date_sk#1, ws_quantity#5, wr_fee#15, wr_refunded_cash#16, r_reason_desc#34, d_date_sk#36]

(54) HashAggregate [codegen id : 14]
Input [4]: [ws_quantity#5, wr_fee#15, wr_refunded_cash#16, r_reason_desc#34]
Keys [1]: [r_reason_desc#34]
Functions [3]: [partial_avg(cast(ws_quantity#5 as bigint)), partial_avg(UnscaledValue(wr_refunded_cash#16)), partial_avg(UnscaledValue(wr_fee#15))]
Aggregate Attributes [6]: [sum#39, count#40, sum#41, count#42, sum#43, count#44]
Results [7]: [r_reason_desc#34, sum#45, count#46, sum#47, count#48, sum#49, count#50]

(55) Exchange
Input [7]: [r_reason_desc#34, sum#45, count#46, sum#47, count#48, sum#49, count#50]
Arguments: hashpartitioning(r_reason_desc#34, 5), ENSURE_REQUIREMENTS, [id=#51]

(56) HashAggregate [codegen id : 15]
Input [7]: [r_reason_desc#34, sum#45, count#46, sum#47, count#48, sum#49, count#50]
Keys [1]: [r_reason_desc#34]
Functions [3]: [avg(cast(ws_quantity#5 as bigint)), avg(UnscaledValue(wr_refunded_cash#16)), avg(UnscaledValue(wr_fee#15))]
Aggregate Attributes [3]: [avg(cast(ws_quantity#5 as bigint))#52, avg(UnscaledValue(wr_refunded_cash#16))#53, avg(UnscaledValue(wr_fee#15))#54]
Results [5]: [substr(r_reason_desc#34, 1, 20) AS substr(r_reason_desc, 1, 20)#55, avg(cast(ws_quantity#5 as bigint))#52 AS avg(ws_quantity)#56, cast((avg(UnscaledValue(wr_refunded_cash#16))#53 / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#57, cast((avg(UnscaledValue(wr_fee#15))#54 / 100.0) as decimal(11,6)) AS avg(wr_fee)#58, avg(cast(ws_quantity#5 as bigint))#52 AS aggOrder#59]

(57) TakeOrderedAndProject
Input [5]: [substr(r_reason_desc, 1, 20)#55, avg(ws_quantity)#56, avg(wr_refunded_cash)#57, avg(wr_fee)#58, aggOrder#59]
Arguments: 100, [substr(r_reason_desc, 1, 20)#55 ASC NULLS FIRST, aggOrder#59 ASC NULLS FIRST, avg(wr_refunded_cash)#57 ASC NULLS FIRST, avg(wr_fee)#58 ASC NULLS FIRST], [substr(r_reason_desc, 1, 20)#55, avg(ws_quantity)#56, avg(wr_refunded_cash)#57, avg(wr_fee)#58]

