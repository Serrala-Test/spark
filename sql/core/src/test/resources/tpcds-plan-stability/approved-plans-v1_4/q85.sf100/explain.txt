== Physical Plan ==
TakeOrderedAndProject (51)
+- * HashAggregate (50)
   +- Exchange (49)
      +- * HashAggregate (48)
         +- * Project (47)
            +- * BroadcastHashJoin Inner BuildRight (46)
               :- * Project (41)
               :  +- * BroadcastHashJoin Inner BuildRight (40)
               :     :- * Project (38)
               :     :  +- * SortMergeJoin Inner (37)
               :     :     :- * Sort (31)
               :     :     :  +- Exchange (30)
               :     :     :     +- * Project (29)
               :     :     :        +- * BroadcastHashJoin Inner BuildRight (28)
               :     :     :           :- * Project (22)
               :     :     :           :  +- * BroadcastHashJoin Inner BuildRight (21)
               :     :     :           :     :- * Project (16)
               :     :     :           :     :  +- * BroadcastHashJoin Inner BuildRight (15)
               :     :     :           :     :     :- * Project (10)
               :     :     :           :     :     :  +- * BroadcastHashJoin Inner BuildRight (9)
               :     :     :           :     :     :     :- * Project (4)
               :     :     :           :     :     :     :  +- * Filter (3)
               :     :     :           :     :     :     :     +- * ColumnarToRow (2)
               :     :     :           :     :     :     :        +- Scan parquet spark_catalog.default.web_returns (1)
               :     :     :           :     :     :     +- BroadcastExchange (8)
               :     :     :           :     :     :        +- * Filter (7)
               :     :     :           :     :     :           +- * ColumnarToRow (6)
               :     :     :           :     :     :              +- Scan parquet spark_catalog.default.customer_demographics (5)
               :     :     :           :     :     +- BroadcastExchange (14)
               :     :     :           :     :        +- * Filter (13)
               :     :     :           :     :           +- * ColumnarToRow (12)
               :     :     :           :     :              +- Scan parquet spark_catalog.default.customer_demographics (11)
               :     :     :           :     +- BroadcastExchange (20)
               :     :     :           :        +- * Filter (19)
               :     :     :           :           +- * ColumnarToRow (18)
               :     :     :           :              +- Scan parquet spark_catalog.default.reason (17)
               :     :     :           +- BroadcastExchange (27)
               :     :     :              +- * Project (26)
               :     :     :                 +- * Filter (25)
               :     :     :                    +- * ColumnarToRow (24)
               :     :     :                       +- Scan parquet spark_catalog.default.customer_address (23)
               :     :     +- * Sort (36)
               :     :        +- Exchange (35)
               :     :           +- * Filter (34)
               :     :              +- * ColumnarToRow (33)
               :     :                 +- Scan parquet spark_catalog.default.web_sales (32)
               :     +- ReusedExchange (39)
               +- BroadcastExchange (45)
                  +- * Filter (44)
                     +- * ColumnarToRow (43)
                        +- Scan parquet spark_catalog.default.web_page (42)


(1) Scan parquet spark_catalog.default.web_returns
Output [9]: [wr_item_sk#1, wr_refunded_cdemo_sk#2, wr_refunded_addr_sk#3, wr_returning_cdemo_sk#4, wr_reason_sk#5, wr_order_number#6, wr_fee#7, wr_refunded_cash#8, wr_returned_date_sk#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number), IsNotNull(wr_refunded_cdemo_sk), IsNotNull(wr_returning_cdemo_sk), IsNotNull(wr_refunded_addr_sk), IsNotNull(wr_reason_sk)]
ReadSchema: struct<wr_item_sk:int,wr_refunded_cdemo_sk:int,wr_refunded_addr_sk:int,wr_returning_cdemo_sk:int,wr_reason_sk:int,wr_order_number:int,wr_fee:decimal(7,2),wr_refunded_cash:decimal(7,2)>

(2) ColumnarToRow [codegen id : 5]
Input [9]: [wr_item_sk#1, wr_refunded_cdemo_sk#2, wr_refunded_addr_sk#3, wr_returning_cdemo_sk#4, wr_reason_sk#5, wr_order_number#6, wr_fee#7, wr_refunded_cash#8, wr_returned_date_sk#9]

(3) Filter [codegen id : 5]
Input [9]: [wr_item_sk#1, wr_refunded_cdemo_sk#2, wr_refunded_addr_sk#3, wr_returning_cdemo_sk#4, wr_reason_sk#5, wr_order_number#6, wr_fee#7, wr_refunded_cash#8, wr_returned_date_sk#9]
Condition : (((((isnotnull(wr_item_sk#1) AND isnotnull(wr_order_number#6)) AND isnotnull(wr_refunded_cdemo_sk#2)) AND isnotnull(wr_returning_cdemo_sk#4)) AND isnotnull(wr_refunded_addr_sk#3)) AND isnotnull(wr_reason_sk#5))

(4) Project [codegen id : 5]
Output [8]: [wr_item_sk#1, wr_refunded_cdemo_sk#2, wr_refunded_addr_sk#3, wr_returning_cdemo_sk#4, wr_reason_sk#5, wr_order_number#6, wr_fee#7, wr_refunded_cash#8]
Input [9]: [wr_item_sk#1, wr_refunded_cdemo_sk#2, wr_refunded_addr_sk#3, wr_returning_cdemo_sk#4, wr_reason_sk#5, wr_order_number#6, wr_fee#7, wr_refunded_cash#8, wr_returned_date_sk#9]

(5) Scan parquet spark_catalog.default.customer_demographics
Output [3]: [cd_demo_sk#10, cd_marital_status#11, cd_education_status#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(EqualTo(cd_marital_status,M),EqualTo(cd_education_status,Advanced Degree     )),And(EqualTo(cd_marital_status,S),EqualTo(cd_education_status,College             ))),And(EqualTo(cd_marital_status,W),EqualTo(cd_education_status,2 yr Degree         )))]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(6) ColumnarToRow [codegen id : 1]
Input [3]: [cd_demo_sk#10, cd_marital_status#11, cd_education_status#12]

(7) Filter [codegen id : 1]
Input [3]: [cd_demo_sk#10, cd_marital_status#11, cd_education_status#12]
Condition : (((isnotnull(cd_demo_sk#10) AND isnotnull(cd_marital_status#11)) AND isnotnull(cd_education_status#12)) AND ((((cd_marital_status#11 = M) AND (cd_education_status#12 = Advanced Degree     )) OR ((cd_marital_status#11 = S) AND (cd_education_status#12 = College             ))) OR ((cd_marital_status#11 = W) AND (cd_education_status#12 = 2 yr Degree         ))))

(8) BroadcastExchange
Input [3]: [cd_demo_sk#10, cd_marital_status#11, cd_education_status#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(9) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [wr_returning_cdemo_sk#4]
Right keys [1]: [cd_demo_sk#10]
Join type: Inner
Join condition: None

(10) Project [codegen id : 5]
Output [9]: [wr_item_sk#1, wr_refunded_cdemo_sk#2, wr_refunded_addr_sk#3, wr_reason_sk#5, wr_order_number#6, wr_fee#7, wr_refunded_cash#8, cd_marital_status#11, cd_education_status#12]
Input [11]: [wr_item_sk#1, wr_refunded_cdemo_sk#2, wr_refunded_addr_sk#3, wr_returning_cdemo_sk#4, wr_reason_sk#5, wr_order_number#6, wr_fee#7, wr_refunded_cash#8, cd_demo_sk#10, cd_marital_status#11, cd_education_status#12]

(11) Scan parquet spark_catalog.default.customer_demographics
Output [3]: [cd_demo_sk#13, cd_marital_status#14, cd_education_status#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(EqualTo(cd_marital_status,M),EqualTo(cd_education_status,Advanced Degree     )),And(EqualTo(cd_marital_status,S),EqualTo(cd_education_status,College             ))),And(EqualTo(cd_marital_status,W),EqualTo(cd_education_status,2 yr Degree         )))]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(12) ColumnarToRow [codegen id : 2]
Input [3]: [cd_demo_sk#13, cd_marital_status#14, cd_education_status#15]

(13) Filter [codegen id : 2]
Input [3]: [cd_demo_sk#13, cd_marital_status#14, cd_education_status#15]
Condition : (((isnotnull(cd_demo_sk#13) AND isnotnull(cd_marital_status#14)) AND isnotnull(cd_education_status#15)) AND ((((cd_marital_status#14 = M) AND (cd_education_status#15 = Advanced Degree     )) OR ((cd_marital_status#14 = S) AND (cd_education_status#15 = College             ))) OR ((cd_marital_status#14 = W) AND (cd_education_status#15 = 2 yr Degree         ))))

(14) BroadcastExchange
Input [3]: [cd_demo_sk#13, cd_marital_status#14, cd_education_status#15]
Arguments: HashedRelationBroadcastMode(List(input[0, int, false], input[1, string, false], input[2, string, false]),false), [plan_id=2]

(15) BroadcastHashJoin [codegen id : 5]
Left keys [3]: [wr_refunded_cdemo_sk#2, cd_marital_status#11, cd_education_status#12]
Right keys [3]: [cd_demo_sk#13, cd_marital_status#14, cd_education_status#15]
Join type: Inner
Join condition: None

(16) Project [codegen id : 5]
Output [8]: [wr_item_sk#1, wr_refunded_addr_sk#3, wr_reason_sk#5, wr_order_number#6, wr_fee#7, wr_refunded_cash#8, cd_marital_status#14, cd_education_status#15]
Input [12]: [wr_item_sk#1, wr_refunded_cdemo_sk#2, wr_refunded_addr_sk#3, wr_reason_sk#5, wr_order_number#6, wr_fee#7, wr_refunded_cash#8, cd_marital_status#11, cd_education_status#12, cd_demo_sk#13, cd_marital_status#14, cd_education_status#15]

(17) Scan parquet spark_catalog.default.reason
Output [2]: [r_reason_sk#16, r_reason_desc#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/reason]
PushedFilters: [IsNotNull(r_reason_sk)]
ReadSchema: struct<r_reason_sk:int,r_reason_desc:string>

(18) ColumnarToRow [codegen id : 3]
Input [2]: [r_reason_sk#16, r_reason_desc#17]

(19) Filter [codegen id : 3]
Input [2]: [r_reason_sk#16, r_reason_desc#17]
Condition : isnotnull(r_reason_sk#16)

(20) BroadcastExchange
Input [2]: [r_reason_sk#16, r_reason_desc#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(21) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [wr_reason_sk#5]
Right keys [1]: [r_reason_sk#16]
Join type: Inner
Join condition: None

(22) Project [codegen id : 5]
Output [8]: [wr_item_sk#1, wr_refunded_addr_sk#3, wr_order_number#6, wr_fee#7, wr_refunded_cash#8, cd_marital_status#14, cd_education_status#15, r_reason_desc#17]
Input [10]: [wr_item_sk#1, wr_refunded_addr_sk#3, wr_reason_sk#5, wr_order_number#6, wr_fee#7, wr_refunded_cash#8, cd_marital_status#14, cd_education_status#15, r_reason_sk#16, r_reason_desc#17]

(23) Scan parquet spark_catalog.default.customer_address
Output [3]: [ca_address_sk#18, ca_state#19, ca_country#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_state, [IN,NJ,OH]),In(ca_state, [CT,KY,WI])),In(ca_state, [AR,IA,LA]))]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(24) ColumnarToRow [codegen id : 4]
Input [3]: [ca_address_sk#18, ca_state#19, ca_country#20]

(25) Filter [codegen id : 4]
Input [3]: [ca_address_sk#18, ca_state#19, ca_country#20]
Condition : (((isnotnull(ca_country#20) AND (ca_country#20 = United States)) AND isnotnull(ca_address_sk#18)) AND ((ca_state#19 IN (IN,OH,NJ) OR ca_state#19 IN (WI,CT,KY)) OR ca_state#19 IN (LA,IA,AR)))

(26) Project [codegen id : 4]
Output [2]: [ca_address_sk#18, ca_state#19]
Input [3]: [ca_address_sk#18, ca_state#19, ca_country#20]

(27) BroadcastExchange
Input [2]: [ca_address_sk#18, ca_state#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(28) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [wr_refunded_addr_sk#3]
Right keys [1]: [ca_address_sk#18]
Join type: Inner
Join condition: None

(29) Project [codegen id : 5]
Output [8]: [wr_item_sk#1, wr_order_number#6, wr_fee#7, wr_refunded_cash#8, cd_marital_status#14, cd_education_status#15, r_reason_desc#17, ca_state#19]
Input [10]: [wr_item_sk#1, wr_refunded_addr_sk#3, wr_order_number#6, wr_fee#7, wr_refunded_cash#8, cd_marital_status#14, cd_education_status#15, r_reason_desc#17, ca_address_sk#18, ca_state#19]

(30) Exchange
Input [8]: [wr_item_sk#1, wr_order_number#6, wr_fee#7, wr_refunded_cash#8, cd_marital_status#14, cd_education_status#15, r_reason_desc#17, ca_state#19]
Arguments: hashpartitioning(wr_item_sk#1, wr_order_number#6, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(31) Sort [codegen id : 6]
Input [8]: [wr_item_sk#1, wr_order_number#6, wr_fee#7, wr_refunded_cash#8, cd_marital_status#14, cd_education_status#15, r_reason_desc#17, ca_state#19]
Arguments: [wr_item_sk#1 ASC NULLS FIRST, wr_order_number#6 ASC NULLS FIRST], false, 0

(32) Scan parquet spark_catalog.default.web_sales
Output [7]: [ws_item_sk#21, ws_web_page_sk#22, ws_order_number#23, ws_quantity#24, ws_sales_price#25, ws_net_profit#26, ws_sold_date_sk#27]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#27), dynamicpruningexpression(ws_sold_date_sk#27 IN dynamicpruning#28)]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_page_sk), Or(Or(And(GreaterThanOrEqual(ws_sales_price,100.00),LessThanOrEqual(ws_sales_price,150.00)),And(GreaterThanOrEqual(ws_sales_price,50.00),LessThanOrEqual(ws_sales_price,100.00))),And(GreaterThanOrEqual(ws_sales_price,150.00),LessThanOrEqual(ws_sales_price,200.00))), Or(Or(And(GreaterThanOrEqual(ws_net_profit,100.00),LessThanOrEqual(ws_net_profit,200.00)),And(GreaterThanOrEqual(ws_net_profit,150.00),LessThanOrEqual(ws_net_profit,300.00))),And(GreaterThanOrEqual(ws_net_profit,50.00),LessThanOrEqual(ws_net_profit,250.00)))]
ReadSchema: struct<ws_item_sk:int,ws_web_page_sk:int,ws_order_number:int,ws_quantity:int,ws_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(33) ColumnarToRow [codegen id : 7]
Input [7]: [ws_item_sk#21, ws_web_page_sk#22, ws_order_number#23, ws_quantity#24, ws_sales_price#25, ws_net_profit#26, ws_sold_date_sk#27]

(34) Filter [codegen id : 7]
Input [7]: [ws_item_sk#21, ws_web_page_sk#22, ws_order_number#23, ws_quantity#24, ws_sales_price#25, ws_net_profit#26, ws_sold_date_sk#27]
Condition : ((((isnotnull(ws_item_sk#21) AND isnotnull(ws_order_number#23)) AND isnotnull(ws_web_page_sk#22)) AND ((((ws_sales_price#25 >= 100.00) AND (ws_sales_price#25 <= 150.00)) OR ((ws_sales_price#25 >= 50.00) AND (ws_sales_price#25 <= 100.00))) OR ((ws_sales_price#25 >= 150.00) AND (ws_sales_price#25 <= 200.00)))) AND ((((ws_net_profit#26 >= 100.00) AND (ws_net_profit#26 <= 200.00)) OR ((ws_net_profit#26 >= 150.00) AND (ws_net_profit#26 <= 300.00))) OR ((ws_net_profit#26 >= 50.00) AND (ws_net_profit#26 <= 250.00))))

(35) Exchange
Input [7]: [ws_item_sk#21, ws_web_page_sk#22, ws_order_number#23, ws_quantity#24, ws_sales_price#25, ws_net_profit#26, ws_sold_date_sk#27]
Arguments: hashpartitioning(ws_item_sk#21, ws_order_number#23, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(36) Sort [codegen id : 8]
Input [7]: [ws_item_sk#21, ws_web_page_sk#22, ws_order_number#23, ws_quantity#24, ws_sales_price#25, ws_net_profit#26, ws_sold_date_sk#27]
Arguments: [ws_item_sk#21 ASC NULLS FIRST, ws_order_number#23 ASC NULLS FIRST], false, 0

(37) SortMergeJoin [codegen id : 11]
Left keys [2]: [wr_item_sk#1, wr_order_number#6]
Right keys [2]: [ws_item_sk#21, ws_order_number#23]
Join type: Inner
Join condition: (((((((cd_marital_status#14 = M) AND (cd_education_status#15 = Advanced Degree     )) AND (ws_sales_price#25 >= 100.00)) AND (ws_sales_price#25 <= 150.00)) OR ((((cd_marital_status#14 = S) AND (cd_education_status#15 = College             )) AND (ws_sales_price#25 >= 50.00)) AND (ws_sales_price#25 <= 100.00))) OR ((((cd_marital_status#14 = W) AND (cd_education_status#15 = 2 yr Degree         )) AND (ws_sales_price#25 >= 150.00)) AND (ws_sales_price#25 <= 200.00))) AND ((((ca_state#19 IN (IN,OH,NJ) AND (ws_net_profit#26 >= 100.00)) AND (ws_net_profit#26 <= 200.00)) OR ((ca_state#19 IN (WI,CT,KY) AND (ws_net_profit#26 >= 150.00)) AND (ws_net_profit#26 <= 300.00))) OR ((ca_state#19 IN (LA,IA,AR) AND (ws_net_profit#26 >= 50.00)) AND (ws_net_profit#26 <= 250.00))))

(38) Project [codegen id : 11]
Output [6]: [wr_fee#7, wr_refunded_cash#8, r_reason_desc#17, ws_web_page_sk#22, ws_quantity#24, ws_sold_date_sk#27]
Input [15]: [wr_item_sk#1, wr_order_number#6, wr_fee#7, wr_refunded_cash#8, cd_marital_status#14, cd_education_status#15, r_reason_desc#17, ca_state#19, ws_item_sk#21, ws_web_page_sk#22, ws_order_number#23, ws_quantity#24, ws_sales_price#25, ws_net_profit#26, ws_sold_date_sk#27]

(39) ReusedExchange [Reuses operator id: 56]
Output [1]: [d_date_sk#29]

(40) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ws_sold_date_sk#27]
Right keys [1]: [d_date_sk#29]
Join type: Inner
Join condition: None

(41) Project [codegen id : 11]
Output [5]: [wr_fee#7, wr_refunded_cash#8, r_reason_desc#17, ws_web_page_sk#22, ws_quantity#24]
Input [7]: [wr_fee#7, wr_refunded_cash#8, r_reason_desc#17, ws_web_page_sk#22, ws_quantity#24, ws_sold_date_sk#27, d_date_sk#29]

(42) Scan parquet spark_catalog.default.web_page
Output [1]: [wp_web_page_sk#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_page]
PushedFilters: [IsNotNull(wp_web_page_sk)]
ReadSchema: struct<wp_web_page_sk:int>

(43) ColumnarToRow [codegen id : 10]
Input [1]: [wp_web_page_sk#30]

(44) Filter [codegen id : 10]
Input [1]: [wp_web_page_sk#30]
Condition : isnotnull(wp_web_page_sk#30)

(45) BroadcastExchange
Input [1]: [wp_web_page_sk#30]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=7]

(46) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ws_web_page_sk#22]
Right keys [1]: [wp_web_page_sk#30]
Join type: Inner
Join condition: None

(47) Project [codegen id : 11]
Output [4]: [ws_quantity#24, wr_fee#7, wr_refunded_cash#8, r_reason_desc#17]
Input [6]: [wr_fee#7, wr_refunded_cash#8, r_reason_desc#17, ws_web_page_sk#22, ws_quantity#24, wp_web_page_sk#30]

(48) HashAggregate [codegen id : 11]
Input [4]: [ws_quantity#24, wr_fee#7, wr_refunded_cash#8, r_reason_desc#17]
Keys [1]: [r_reason_desc#17]
Functions [3]: [partial_avg(ws_quantity#24), partial_avg(UnscaledValue(wr_refunded_cash#8)), partial_avg(UnscaledValue(wr_fee#7))]
Aggregate Attributes [6]: [sum#31, count#32, sum#33, count#34, sum#35, count#36]
Results [7]: [r_reason_desc#17, sum#37, count#38, sum#39, count#40, sum#41, count#42]

(49) Exchange
Input [7]: [r_reason_desc#17, sum#37, count#38, sum#39, count#40, sum#41, count#42]
Arguments: hashpartitioning(r_reason_desc#17, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(50) HashAggregate [codegen id : 12]
Input [7]: [r_reason_desc#17, sum#37, count#38, sum#39, count#40, sum#41, count#42]
Keys [1]: [r_reason_desc#17]
Functions [3]: [avg(ws_quantity#24), avg(UnscaledValue(wr_refunded_cash#8)), avg(UnscaledValue(wr_fee#7))]
Aggregate Attributes [3]: [avg(ws_quantity#24)#43, avg(UnscaledValue(wr_refunded_cash#8))#44, avg(UnscaledValue(wr_fee#7))#45]
Results [4]: [substr(r_reason_desc#17, 1, 20) AS substr(r_reason_desc, 1, 20)#46, avg(ws_quantity#24)#43 AS avg(ws_quantity)#47, cast((avg(UnscaledValue(wr_refunded_cash#8))#44 / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#48, cast((avg(UnscaledValue(wr_fee#7))#45 / 100.0) as decimal(11,6)) AS avg(wr_fee)#49]

(51) TakeOrderedAndProject
Input [4]: [substr(r_reason_desc, 1, 20)#46, avg(ws_quantity)#47, avg(wr_refunded_cash)#48, avg(wr_fee)#49]
Arguments: 100, [substr(r_reason_desc, 1, 20)#46 ASC NULLS FIRST, avg(ws_quantity)#47 ASC NULLS FIRST, avg(wr_refunded_cash)#48 ASC NULLS FIRST, avg(wr_fee)#49 ASC NULLS FIRST], [substr(r_reason_desc, 1, 20)#46, avg(ws_quantity)#47, avg(wr_refunded_cash)#48, avg(wr_fee)#49]

===== Subqueries =====

Subquery:1 Hosting operator id = 32 Hosting Expression = ws_sold_date_sk#27 IN dynamicpruning#28
BroadcastExchange (56)
+- * Project (55)
   +- * Filter (54)
      +- * ColumnarToRow (53)
         +- Scan parquet spark_catalog.default.date_dim (52)


(52) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#29, d_year#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(53) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#29, d_year#50]

(54) Filter [codegen id : 1]
Input [2]: [d_date_sk#29, d_year#50]
Condition : ((isnotnull(d_year#50) AND (d_year#50 = 2000)) AND isnotnull(d_date_sk#29))

(55) Project [codegen id : 1]
Output [1]: [d_date_sk#29]
Input [2]: [d_date_sk#29, d_year#50]

(56) BroadcastExchange
Input [1]: [d_date_sk#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]


