== Physical Plan ==
TakeOrderedAndProject (50)
+- * HashAggregate (49)
   +- Exchange (48)
      +- * HashAggregate (47)
         +- * Project (46)
            +- * BroadcastHashJoin Inner BuildRight (45)
               :- * Project (40)
               :  +- * BroadcastHashJoin Inner BuildRight (39)
               :     :- * Project (34)
               :     :  +- * Filter (33)
               :     :     +- * SortMergeJoin ExistenceJoin(exists#1) (32)
               :     :        :- * SortMergeJoin ExistenceJoin(exists#2) (24)
               :     :        :  :- * SortMergeJoin LeftSemi (16)
               :     :        :  :  :- * Sort (5)
               :     :        :  :  :  +- Exchange (4)
               :     :        :  :  :     +- * Project (3)
               :     :        :  :  :        +- * Filter (2)
               :     :        :  :  :           +- BatchScan default.customer (1)
               :     :        :  :  +- * Sort (15)
               :     :        :  :     +- Exchange (14)
               :     :        :  :        +- * Project (13)
               :     :        :  :           +- * BroadcastHashJoin Inner BuildRight (12)
               :     :        :  :              :- * Project (7)
               :     :        :  :              :  +- BatchScan default.store_sales (6)
               :     :        :  :              +- BroadcastExchange (11)
               :     :        :  :                 +- * Project (10)
               :     :        :  :                    +- * Filter (9)
               :     :        :  :                       +- BatchScan default.date_dim (8)
               :     :        :  +- * Sort (23)
               :     :        :     +- Exchange (22)
               :     :        :        +- * Project (21)
               :     :        :           +- * BroadcastHashJoin Inner BuildRight (20)
               :     :        :              :- * Project (18)
               :     :        :              :  +- BatchScan default.web_sales (17)
               :     :        :              +- ReusedExchange (19)
               :     :        +- * Sort (31)
               :     :           +- Exchange (30)
               :     :              +- * Project (29)
               :     :                 +- * BroadcastHashJoin Inner BuildRight (28)
               :     :                    :- * Project (26)
               :     :                    :  +- BatchScan default.catalog_sales (25)
               :     :                    +- ReusedExchange (27)
               :     +- BroadcastExchange (38)
               :        +- * Project (37)
               :           +- * Filter (36)
               :              +- BatchScan default.customer_address (35)
               +- BroadcastExchange (44)
                  +- * Project (43)
                     +- * Filter (42)
                        +- BatchScan default.customer_demographics (41)


(1) BatchScan default.customer
Output [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
DataFilters: [isnotnull(c_current_addr_sk#5), isnotnull(c_current_cdemo_sk#4)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) Filter [codegen id : 1]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Condition : ((isnotnull(c_current_addr_sk#5) AND isnotnull(c_current_cdemo_sk#4)) AND might_contain(Subquery scalar-subquery#6, [id=#7], xxhash64(c_current_addr_sk#5, 42)))

(3) Project [codegen id : 1]
Output [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]

(4) Exchange
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Arguments: hashpartitioning(c_customer_sk#3, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Arguments: [c_customer_sk#3 ASC NULLS FIRST], false, 0

(6) BatchScan default.store_sales
Output [23]: [ss_sold_time_sk#8, ss_item_sk#9, ss_customer_sk#10, ss_cdemo_sk#11, ss_hdemo_sk#12, ss_addr_sk#13, ss_store_sk#14, ss_promo_sk#15, ss_ticket_number#16, ss_quantity#17, ss_wholesale_cost#18, ss_list_price#19, ss_sales_price#20, ss_ext_discount_amt#21, ss_ext_sales_price#22, ss_ext_wholesale_cost#23, ss_ext_list_price#24, ss_ext_tax#25, ss_coupon_amt#26, ss_net_paid#27, ss_net_paid_inc_tax#28, ss_net_profit#29, ss_sold_date_sk#30]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_sales]
PartitionFilters: [isnotnull(ss_sold_date_sk#30)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2),ss_coupon_amt:decimal(7,2),ss_net_paid:decimal(7,2),ss_net_paid_inc_tax:decimal(7,2),ss_net_profit:decimal(7,2)>

(7) Project [codegen id : 4]
Output [2]: [ss_customer_sk#10, ss_sold_date_sk#30]
Input [23]: [ss_sold_time_sk#8, ss_item_sk#9, ss_customer_sk#10, ss_cdemo_sk#11, ss_hdemo_sk#12, ss_addr_sk#13, ss_store_sk#14, ss_promo_sk#15, ss_ticket_number#16, ss_quantity#17, ss_wholesale_cost#18, ss_list_price#19, ss_sales_price#20, ss_ext_discount_amt#21, ss_ext_sales_price#22, ss_ext_wholesale_cost#23, ss_ext_list_price#24, ss_ext_tax#25, ss_coupon_amt#26, ss_net_paid#27, ss_net_paid_inc_tax#28, ss_net_profit#29, ss_sold_date_sk#30]

(8) BatchScan default.date_dim
Output [28]: [d_date_sk#31, d_date_id#32, d_date#33, d_month_seq#34, d_week_seq#35, d_quarter_seq#36, d_year#37, d_dow#38, d_moy#39, d_dom#40, d_qoy#41, d_fy_year#42, d_fy_quarter_seq#43, d_fy_week_seq#44, d_day_name#45, d_quarter_name#46, d_holiday#47, d_weekend#48, d_following_holiday#49, d_first_dom#50, d_last_dom#51, d_same_day_ly#52, d_same_day_lq#53, d_current_day#54, d_current_week#55, d_current_month#56, d_current_quarter#57, d_current_year#58]
DataFilters: [isnotnull(d_year#37), isnotnull(d_moy#39), (d_year#37 = 2002), (d_moy#39 >= 1), (d_moy#39 <= 4), isnotnull(d_date_sk#31)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2002), GreaterThanOrEqual(d_moy,1), LessThanOrEqual(d_moy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date_id:string,d_date:date,d_month_seq:int,d_week_seq:int,d_quarter_seq:int,d_year:int,d_dow:int,d_moy:int,d_dom:int,d_qoy:int,d_fy_year:int,d_fy_quarter_seq:int,d_fy_week_seq:int,d_day_name:string,d_quarter_name:string,d_holiday:string,d_weekend:string,d_following_holiday:string,d_first_dom:int,d_last_dom:int,d_same_day_ly:int,d_same_day_lq:int,d_current_day:string,d_current_week:string,d_current_month:string,d_current_quarter:string,d_current_year:string>

(9) Filter [codegen id : 3]
Input [28]: [d_date_sk#31, d_date_id#32, d_date#33, d_month_seq#34, d_week_seq#35, d_quarter_seq#36, d_year#37, d_dow#38, d_moy#39, d_dom#40, d_qoy#41, d_fy_year#42, d_fy_quarter_seq#43, d_fy_week_seq#44, d_day_name#45, d_quarter_name#46, d_holiday#47, d_weekend#48, d_following_holiday#49, d_first_dom#50, d_last_dom#51, d_same_day_ly#52, d_same_day_lq#53, d_current_day#54, d_current_week#55, d_current_month#56, d_current_quarter#57, d_current_year#58]
Condition : (((((isnotnull(d_year#37) AND isnotnull(d_moy#39)) AND (d_year#37 = 2002)) AND (d_moy#39 >= 1)) AND (d_moy#39 <= 4)) AND isnotnull(d_date_sk#31))

(10) Project [codegen id : 3]
Output [1]: [d_date_sk#31]
Input [28]: [d_date_sk#31, d_date_id#32, d_date#33, d_month_seq#34, d_week_seq#35, d_quarter_seq#36, d_year#37, d_dow#38, d_moy#39, d_dom#40, d_qoy#41, d_fy_year#42, d_fy_quarter_seq#43, d_fy_week_seq#44, d_day_name#45, d_quarter_name#46, d_holiday#47, d_weekend#48, d_following_holiday#49, d_first_dom#50, d_last_dom#51, d_same_day_ly#52, d_same_day_lq#53, d_current_day#54, d_current_week#55, d_current_month#56, d_current_quarter#57, d_current_year#58]

(11) BroadcastExchange
Input [1]: [d_date_sk#31]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(12) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#30]
Right keys [1]: [d_date_sk#31]
Join type: Inner
Join condition: None

(13) Project [codegen id : 4]
Output [1]: [ss_customer_sk#10]
Input [3]: [ss_customer_sk#10, ss_sold_date_sk#30, d_date_sk#31]

(14) Exchange
Input [1]: [ss_customer_sk#10]
Arguments: hashpartitioning(ss_customer_sk#10, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(15) Sort [codegen id : 5]
Input [1]: [ss_customer_sk#10]
Arguments: [ss_customer_sk#10 ASC NULLS FIRST], false, 0

(16) SortMergeJoin [codegen id : 6]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ss_customer_sk#10]
Join type: LeftSemi
Join condition: None

(17) BatchScan default.web_sales
Output [34]: [ws_sold_time_sk#59, ws_ship_date_sk#60, ws_item_sk#61, ws_bill_customer_sk#62, ws_bill_cdemo_sk#63, ws_bill_hdemo_sk#64, ws_bill_addr_sk#65, ws_ship_customer_sk#66, ws_ship_cdemo_sk#67, ws_ship_hdemo_sk#68, ws_ship_addr_sk#69, ws_web_page_sk#70, ws_web_site_sk#71, ws_ship_mode_sk#72, ws_warehouse_sk#73, ws_promo_sk#74, ws_order_number#75, ws_quantity#76, ws_wholesale_cost#77, ws_list_price#78, ws_sales_price#79, ws_ext_discount_amt#80, ws_ext_sales_price#81, ws_ext_wholesale_cost#82, ws_ext_list_price#83, ws_ext_tax#84, ws_coupon_amt#85, ws_ext_ship_cost#86, ws_net_paid#87, ws_net_paid_inc_tax#88, ws_net_paid_inc_ship#89, ws_net_paid_inc_ship_tax#90, ws_net_profit#91, ws_sold_date_sk#92]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/web_sales]
PartitionFilters: [isnotnull(ws_sold_date_sk#92)]
ReadSchema: struct<ws_sold_time_sk:int,ws_ship_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_bill_cdemo_sk:int,ws_bill_hdemo_sk:int,ws_bill_addr_sk:int,ws_ship_customer_sk:int,ws_ship_cdemo_sk:int,ws_ship_hdemo_sk:int,ws_ship_addr_sk:int,ws_web_page_sk:int,ws_web_site_sk:int,ws_ship_mode_sk:int,ws_warehouse_sk:int,ws_promo_sk:int,ws_order_number:int,ws_quantity:int,ws_wholesale_cost:decimal(7,2),ws_list_price:decimal(7,2),ws_sales_price:decimal(7,2),ws_ext_discount_amt:decimal(7,2),ws_ext_sales_price:decimal(7,2),ws_ext_wholesale_cost:decimal(7,2),ws_ext_list_price:decimal(7,2),ws_ext_tax:decimal(7,2),ws_coupon_amt:decimal(7,2),ws_ext_ship_cost:decimal(7,2),ws_net_paid:decimal(7,2),ws_net_paid_inc_tax:decimal(7,2),ws_net_paid_inc_ship:decimal(7,2),ws_net_paid_inc_ship_tax:decimal(7,2),ws_net_profit:decimal(7,2)>

(18) Project [codegen id : 8]
Output [2]: [ws_bill_customer_sk#62, ws_sold_date_sk#92]
Input [34]: [ws_sold_time_sk#59, ws_ship_date_sk#60, ws_item_sk#61, ws_bill_customer_sk#62, ws_bill_cdemo_sk#63, ws_bill_hdemo_sk#64, ws_bill_addr_sk#65, ws_ship_customer_sk#66, ws_ship_cdemo_sk#67, ws_ship_hdemo_sk#68, ws_ship_addr_sk#69, ws_web_page_sk#70, ws_web_site_sk#71, ws_ship_mode_sk#72, ws_warehouse_sk#73, ws_promo_sk#74, ws_order_number#75, ws_quantity#76, ws_wholesale_cost#77, ws_list_price#78, ws_sales_price#79, ws_ext_discount_amt#80, ws_ext_sales_price#81, ws_ext_wholesale_cost#82, ws_ext_list_price#83, ws_ext_tax#84, ws_coupon_amt#85, ws_ext_ship_cost#86, ws_net_paid#87, ws_net_paid_inc_tax#88, ws_net_paid_inc_ship#89, ws_net_paid_inc_ship_tax#90, ws_net_profit#91, ws_sold_date_sk#92]

(19) ReusedExchange [Reuses operator id: 11]
Output [1]: [d_date_sk#93]

(20) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ws_sold_date_sk#92]
Right keys [1]: [d_date_sk#93]
Join type: Inner
Join condition: None

(21) Project [codegen id : 8]
Output [1]: [ws_bill_customer_sk#62]
Input [3]: [ws_bill_customer_sk#62, ws_sold_date_sk#92, d_date_sk#93]

(22) Exchange
Input [1]: [ws_bill_customer_sk#62]
Arguments: hashpartitioning(ws_bill_customer_sk#62, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(23) Sort [codegen id : 9]
Input [1]: [ws_bill_customer_sk#62]
Arguments: [ws_bill_customer_sk#62 ASC NULLS FIRST], false, 0

(24) SortMergeJoin [codegen id : 10]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ws_bill_customer_sk#62]
Join type: ExistenceJoin(exists#2)
Join condition: None

(25) BatchScan default.catalog_sales
Output [34]: [cs_sold_time_sk#94, cs_ship_date_sk#95, cs_bill_customer_sk#96, cs_bill_cdemo_sk#97, cs_bill_hdemo_sk#98, cs_bill_addr_sk#99, cs_ship_customer_sk#100, cs_ship_cdemo_sk#101, cs_ship_hdemo_sk#102, cs_ship_addr_sk#103, cs_call_center_sk#104, cs_catalog_page_sk#105, cs_ship_mode_sk#106, cs_warehouse_sk#107, cs_item_sk#108, cs_promo_sk#109, cs_order_number#110, cs_quantity#111, cs_wholesale_cost#112, cs_list_price#113, cs_sales_price#114, cs_ext_discount_amt#115, cs_ext_sales_price#116, cs_ext_wholesale_cost#117, cs_ext_list_price#118, cs_ext_tax#119, cs_coupon_amt#120, cs_ext_ship_cost#121, cs_net_paid#122, cs_net_paid_inc_tax#123, cs_net_paid_inc_ship#124, cs_net_paid_inc_ship_tax#125, cs_net_profit#126, cs_sold_date_sk#127]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PartitionFilters: [isnotnull(cs_sold_date_sk#127)]
ReadSchema: struct<cs_sold_time_sk:int,cs_ship_date_sk:int,cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_bill_hdemo_sk:int,cs_bill_addr_sk:int,cs_ship_customer_sk:int,cs_ship_cdemo_sk:int,cs_ship_hdemo_sk:int,cs_ship_addr_sk:int,cs_call_center_sk:int,cs_catalog_page_sk:int,cs_ship_mode_sk:int,cs_warehouse_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_quantity:int,cs_wholesale_cost:decimal(7,2),cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2),cs_ext_tax:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_ext_ship_cost:decimal(7,2),cs_net_paid:decimal(7,2),cs_net_paid_inc_tax:decimal(7,2),cs_net_paid_inc_ship:decimal(7,2),cs_net_paid_inc_ship_tax:decimal(7,2),cs_net_profit:decimal(7,2)>

(26) Project [codegen id : 12]
Output [2]: [cs_ship_customer_sk#100, cs_sold_date_sk#127]
Input [34]: [cs_sold_time_sk#94, cs_ship_date_sk#95, cs_bill_customer_sk#96, cs_bill_cdemo_sk#97, cs_bill_hdemo_sk#98, cs_bill_addr_sk#99, cs_ship_customer_sk#100, cs_ship_cdemo_sk#101, cs_ship_hdemo_sk#102, cs_ship_addr_sk#103, cs_call_center_sk#104, cs_catalog_page_sk#105, cs_ship_mode_sk#106, cs_warehouse_sk#107, cs_item_sk#108, cs_promo_sk#109, cs_order_number#110, cs_quantity#111, cs_wholesale_cost#112, cs_list_price#113, cs_sales_price#114, cs_ext_discount_amt#115, cs_ext_sales_price#116, cs_ext_wholesale_cost#117, cs_ext_list_price#118, cs_ext_tax#119, cs_coupon_amt#120, cs_ext_ship_cost#121, cs_net_paid#122, cs_net_paid_inc_tax#123, cs_net_paid_inc_ship#124, cs_net_paid_inc_ship_tax#125, cs_net_profit#126, cs_sold_date_sk#127]

(27) ReusedExchange [Reuses operator id: 11]
Output [1]: [d_date_sk#128]

(28) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [cs_sold_date_sk#127]
Right keys [1]: [d_date_sk#128]
Join type: Inner
Join condition: None

(29) Project [codegen id : 12]
Output [1]: [cs_ship_customer_sk#100]
Input [3]: [cs_ship_customer_sk#100, cs_sold_date_sk#127, d_date_sk#128]

(30) Exchange
Input [1]: [cs_ship_customer_sk#100]
Arguments: hashpartitioning(cs_ship_customer_sk#100, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(31) Sort [codegen id : 13]
Input [1]: [cs_ship_customer_sk#100]
Arguments: [cs_ship_customer_sk#100 ASC NULLS FIRST], false, 0

(32) SortMergeJoin [codegen id : 16]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [cs_ship_customer_sk#100]
Join type: ExistenceJoin(exists#1)
Join condition: None

(33) Filter [codegen id : 16]
Input [5]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5, exists#2, exists#1]
Condition : (exists#2 OR exists#1)

(34) Project [codegen id : 16]
Output [2]: [c_current_cdemo_sk#4, c_current_addr_sk#5]
Input [5]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5, exists#2, exists#1]

(35) BatchScan default.customer_address
Output [2]: [ca_address_sk#129, ca_county#130]
DataFilters: [ca_county#130 IN (Rush County,Toole County,Jefferson County,Dona Ana County,La Porte County), isnotnull(ca_address_sk#129)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_county, [Dona Ana County,Jefferson County,La Porte County,Rush County,Toole County]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(36) Filter [codegen id : 14]
Input [2]: [ca_address_sk#129, ca_county#130]
Condition : (ca_county#130 IN (Rush County,Toole County,Jefferson County,Dona Ana County,La Porte County) AND isnotnull(ca_address_sk#129))

(37) Project [codegen id : 14]
Output [1]: [ca_address_sk#129]
Input [2]: [ca_address_sk#129, ca_county#130]

(38) BroadcastExchange
Input [1]: [ca_address_sk#129]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

(39) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [c_current_addr_sk#5]
Right keys [1]: [ca_address_sk#129]
Join type: Inner
Join condition: None

(40) Project [codegen id : 16]
Output [1]: [c_current_cdemo_sk#4]
Input [3]: [c_current_cdemo_sk#4, c_current_addr_sk#5, ca_address_sk#129]

(41) BatchScan default.customer_demographics
Output [9]: [cd_demo_sk#131, cd_gender#132, cd_marital_status#133, cd_education_status#134, cd_purchase_estimate#135, cd_credit_rating#136, cd_dep_count#137, cd_dep_employed_count#138, cd_dep_college_count#139]
DataFilters: [isnotnull(cd_demo_sk#131)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_purchase_estimate:int,cd_credit_rating:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(42) Filter [codegen id : 15]
Input [9]: [cd_demo_sk#131, cd_gender#132, cd_marital_status#133, cd_education_status#134, cd_purchase_estimate#135, cd_credit_rating#136, cd_dep_count#137, cd_dep_employed_count#138, cd_dep_college_count#139]
Condition : isnotnull(cd_demo_sk#131)

(43) Project [codegen id : 15]
Output [9]: [cd_demo_sk#131, cd_gender#132, cd_marital_status#133, cd_education_status#134, cd_purchase_estimate#135, cd_credit_rating#136, cd_dep_count#137, cd_dep_employed_count#138, cd_dep_college_count#139]
Input [9]: [cd_demo_sk#131, cd_gender#132, cd_marital_status#133, cd_education_status#134, cd_purchase_estimate#135, cd_credit_rating#136, cd_dep_count#137, cd_dep_employed_count#138, cd_dep_college_count#139]

(44) BroadcastExchange
Input [9]: [cd_demo_sk#131, cd_gender#132, cd_marital_status#133, cd_education_status#134, cd_purchase_estimate#135, cd_credit_rating#136, cd_dep_count#137, cd_dep_employed_count#138, cd_dep_college_count#139]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

(45) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [c_current_cdemo_sk#4]
Right keys [1]: [cd_demo_sk#131]
Join type: Inner
Join condition: None

(46) Project [codegen id : 16]
Output [8]: [cd_gender#132, cd_marital_status#133, cd_education_status#134, cd_purchase_estimate#135, cd_credit_rating#136, cd_dep_count#137, cd_dep_employed_count#138, cd_dep_college_count#139]
Input [10]: [c_current_cdemo_sk#4, cd_demo_sk#131, cd_gender#132, cd_marital_status#133, cd_education_status#134, cd_purchase_estimate#135, cd_credit_rating#136, cd_dep_count#137, cd_dep_employed_count#138, cd_dep_college_count#139]

(47) HashAggregate [codegen id : 16]
Input [8]: [cd_gender#132, cd_marital_status#133, cd_education_status#134, cd_purchase_estimate#135, cd_credit_rating#136, cd_dep_count#137, cd_dep_employed_count#138, cd_dep_college_count#139]
Keys [8]: [cd_gender#132, cd_marital_status#133, cd_education_status#134, cd_purchase_estimate#135, cd_credit_rating#136, cd_dep_count#137, cd_dep_employed_count#138, cd_dep_college_count#139]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#140]
Results [9]: [cd_gender#132, cd_marital_status#133, cd_education_status#134, cd_purchase_estimate#135, cd_credit_rating#136, cd_dep_count#137, cd_dep_employed_count#138, cd_dep_college_count#139, count#141]

(48) Exchange
Input [9]: [cd_gender#132, cd_marital_status#133, cd_education_status#134, cd_purchase_estimate#135, cd_credit_rating#136, cd_dep_count#137, cd_dep_employed_count#138, cd_dep_college_count#139, count#141]
Arguments: hashpartitioning(cd_gender#132, cd_marital_status#133, cd_education_status#134, cd_purchase_estimate#135, cd_credit_rating#136, cd_dep_count#137, cd_dep_employed_count#138, cd_dep_college_count#139, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(49) HashAggregate [codegen id : 17]
Input [9]: [cd_gender#132, cd_marital_status#133, cd_education_status#134, cd_purchase_estimate#135, cd_credit_rating#136, cd_dep_count#137, cd_dep_employed_count#138, cd_dep_college_count#139, count#141]
Keys [8]: [cd_gender#132, cd_marital_status#133, cd_education_status#134, cd_purchase_estimate#135, cd_credit_rating#136, cd_dep_count#137, cd_dep_employed_count#138, cd_dep_college_count#139]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#142]
Results [14]: [cd_gender#132, cd_marital_status#133, cd_education_status#134, count(1)#142 AS cnt1#143, cd_purchase_estimate#135, count(1)#142 AS cnt2#144, cd_credit_rating#136, count(1)#142 AS cnt3#145, cd_dep_count#137, count(1)#142 AS cnt4#146, cd_dep_employed_count#138, count(1)#142 AS cnt5#147, cd_dep_college_count#139, count(1)#142 AS cnt6#148]

(50) TakeOrderedAndProject
Input [14]: [cd_gender#132, cd_marital_status#133, cd_education_status#134, cnt1#143, cd_purchase_estimate#135, cnt2#144, cd_credit_rating#136, cnt3#145, cd_dep_count#137, cnt4#146, cd_dep_employed_count#138, cnt5#147, cd_dep_college_count#139, cnt6#148]
Arguments: 100, [cd_gender#132 ASC NULLS FIRST, cd_marital_status#133 ASC NULLS FIRST, cd_education_status#134 ASC NULLS FIRST, cd_purchase_estimate#135 ASC NULLS FIRST, cd_credit_rating#136 ASC NULLS FIRST, cd_dep_count#137 ASC NULLS FIRST, cd_dep_employed_count#138 ASC NULLS FIRST, cd_dep_college_count#139 ASC NULLS FIRST], [cd_gender#132, cd_marital_status#133, cd_education_status#134, cnt1#143, cd_purchase_estimate#135, cnt2#144, cd_credit_rating#136, cnt3#145, cd_dep_count#137, cnt4#146, cd_dep_employed_count#138, cnt5#147, cd_dep_college_count#139, cnt6#148]

===== Subqueries =====

Subquery:1 Hosting operator id = 2 Hosting Expression = Subquery scalar-subquery#6, [id=#7]
ObjectHashAggregate (56)
+- Exchange (55)
   +- ObjectHashAggregate (54)
      +- * Project (53)
         +- * Filter (52)
            +- BatchScan default.customer_address (51)


(51) BatchScan default.customer_address
Output [2]: [ca_address_sk#129, ca_county#130]
DataFilters: [ca_county#130 IN (Rush County,Toole County,Jefferson County,Dona Ana County,La Porte County), isnotnull(ca_address_sk#129)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_county, [Dona Ana County,Jefferson County,La Porte County,Rush County,Toole County]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(52) Filter [codegen id : 1]
Input [2]: [ca_address_sk#129, ca_county#130]
Condition : (ca_county#130 IN (Rush County,Toole County,Jefferson County,Dona Ana County,La Porte County) AND isnotnull(ca_address_sk#129))

(53) Project [codegen id : 1]
Output [1]: [ca_address_sk#129]
Input [2]: [ca_address_sk#129, ca_county#130]

(54) ObjectHashAggregate
Input [1]: [ca_address_sk#129]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(ca_address_sk#129, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#149]
Results [1]: [buf#150]

(55) Exchange
Input [1]: [buf#150]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=9]

(56) ObjectHashAggregate
Input [1]: [buf#150]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(ca_address_sk#129, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(ca_address_sk#129, 42), 1000000, 8388608, 0, 0)#151]
Results [1]: [bloom_filter_agg(xxhash64(ca_address_sk#129, 42), 1000000, 8388608, 0, 0)#151 AS bloomFilter#152]


