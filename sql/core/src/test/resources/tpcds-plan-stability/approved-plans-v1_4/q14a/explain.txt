== Physical Plan ==
TakeOrderedAndProject (100)
+- * HashAggregate (99)
   +- Exchange (98)
      +- * HashAggregate (97)
         +- * Expand (96)
            +- Union (95)
               :- * Project (62)
               :  +- * Filter (61)
               :     +- * HashAggregate (60)
               :        +- Exchange (59)
               :           +- * HashAggregate (58)
               :              +- * Project (57)
               :                 +- * BroadcastHashJoin Inner BuildRight (56)
               :                    :- * Project (54)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (53)
               :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (51)
               :                    :     :  :- * Filter (3)
               :                    :     :  :  +- * ColumnarToRow (2)
               :                    :     :  :     +- Scan parquet spark_catalog.default.store_sales (1)
               :                    :     :  +- BroadcastExchange (50)
               :                    :     :     +- * Project (49)
               :                    :     :        +- * BroadcastHashJoin Inner BuildRight (48)
               :                    :     :           :- * Filter (6)
               :                    :     :           :  +- * ColumnarToRow (5)
               :                    :     :           :     +- Scan parquet spark_catalog.default.item (4)
               :                    :     :           +- BroadcastExchange (47)
               :                    :     :              +- * BroadcastHashJoin LeftSemi BuildRight (46)
               :                    :     :                 :- * HashAggregate (35)
               :                    :     :                 :  +- Exchange (34)
               :                    :     :                 :     +- * HashAggregate (33)
               :                    :     :                 :        +- * Project (32)
               :                    :     :                 :           +- * BroadcastHashJoin Inner BuildRight (31)
               :                    :     :                 :              :- * Project (29)
               :                    :     :                 :              :  +- * BroadcastHashJoin Inner BuildRight (28)
               :                    :     :                 :              :     :- * Filter (9)
               :                    :     :                 :              :     :  +- * ColumnarToRow (8)
               :                    :     :                 :              :     :     +- Scan parquet spark_catalog.default.store_sales (7)
               :                    :     :                 :              :     +- BroadcastExchange (27)
               :                    :     :                 :              :        +- * BroadcastHashJoin LeftSemi BuildRight (26)
               :                    :     :                 :              :           :- * Filter (12)
               :                    :     :                 :              :           :  +- * ColumnarToRow (11)
               :                    :     :                 :              :           :     +- Scan parquet spark_catalog.default.item (10)
               :                    :     :                 :              :           +- BroadcastExchange (25)
               :                    :     :                 :              :              +- * Project (24)
               :                    :     :                 :              :                 +- * BroadcastHashJoin Inner BuildRight (23)
               :                    :     :                 :              :                    :- * Project (21)
               :                    :     :                 :              :                    :  +- * BroadcastHashJoin Inner BuildRight (20)
               :                    :     :                 :              :                    :     :- * Filter (15)
               :                    :     :                 :              :                    :     :  +- * ColumnarToRow (14)
               :                    :     :                 :              :                    :     :     +- Scan parquet spark_catalog.default.catalog_sales (13)
               :                    :     :                 :              :                    :     +- BroadcastExchange (19)
               :                    :     :                 :              :                    :        +- * Filter (18)
               :                    :     :                 :              :                    :           +- * ColumnarToRow (17)
               :                    :     :                 :              :                    :              +- Scan parquet spark_catalog.default.item (16)
               :                    :     :                 :              :                    +- ReusedExchange (22)
               :                    :     :                 :              +- ReusedExchange (30)
               :                    :     :                 +- BroadcastExchange (45)
               :                    :     :                    +- * Project (44)
               :                    :     :                       +- * BroadcastHashJoin Inner BuildRight (43)
               :                    :     :                          :- * Project (41)
               :                    :     :                          :  +- * BroadcastHashJoin Inner BuildRight (40)
               :                    :     :                          :     :- * Filter (38)
               :                    :     :                          :     :  +- * ColumnarToRow (37)
               :                    :     :                          :     :     +- Scan parquet spark_catalog.default.web_sales (36)
               :                    :     :                          :     +- ReusedExchange (39)
               :                    :     :                          +- ReusedExchange (42)
               :                    :     +- ReusedExchange (52)
               :                    +- ReusedExchange (55)
               :- * Project (78)
               :  +- * Filter (77)
               :     +- * HashAggregate (76)
               :        +- Exchange (75)
               :           +- * HashAggregate (74)
               :              +- * Project (73)
               :                 +- * BroadcastHashJoin Inner BuildRight (72)
               :                    :- * Project (70)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (69)
               :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (67)
               :                    :     :  :- * Filter (65)
               :                    :     :  :  +- * ColumnarToRow (64)
               :                    :     :  :     +- Scan parquet spark_catalog.default.catalog_sales (63)
               :                    :     :  +- ReusedExchange (66)
               :                    :     +- ReusedExchange (68)
               :                    +- ReusedExchange (71)
               +- * Project (94)
                  +- * Filter (93)
                     +- * HashAggregate (92)
                        +- Exchange (91)
                           +- * HashAggregate (90)
                              +- * Project (89)
                                 +- * BroadcastHashJoin Inner BuildRight (88)
                                    :- * Project (86)
                                    :  +- * BroadcastHashJoin Inner BuildRight (85)
                                    :     :- * BroadcastHashJoin LeftSemi BuildRight (83)
                                    :     :  :- * Filter (81)
                                    :     :  :  +- * ColumnarToRow (80)
                                    :     :  :     +- Scan parquet spark_catalog.default.web_sales (79)
                                    :     :  +- ReusedExchange (82)
                                    :     +- ReusedExchange (84)
                                    +- ReusedExchange (87)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 14]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 14]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(6) Filter [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(7) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 6]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]

(9) Filter [codegen id : 6]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(10) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(12) Filter [codegen id : 4]
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Condition : (((isnotnull(i_item_sk#13) AND isnotnull(i_brand_id#14)) AND isnotnull(i_class_id#15)) AND isnotnull(i_category_id#16))

(13) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(cs_sold_date_sk#18 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(14) ColumnarToRow [codegen id : 3]
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]

(15) Filter [codegen id : 3]
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Condition : isnotnull(cs_item_sk#17)

(16) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(17) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]

(18) Filter [codegen id : 1]
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Condition : isnotnull(i_item_sk#19)

(19) BroadcastExchange
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(20) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_item_sk#17]
Right keys [1]: [i_item_sk#19]
Join type: Inner
Join condition: None

(21) Project [codegen id : 3]
Output [4]: [cs_sold_date_sk#18, i_brand_id#20, i_class_id#21, i_category_id#22]
Input [6]: [cs_item_sk#17, cs_sold_date_sk#18, i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]

(22) ReusedExchange [Reuses operator id: 129]
Output [1]: [d_date_sk#23]

(23) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#23]
Join type: Inner
Join condition: None

(24) Project [codegen id : 3]
Output [3]: [i_brand_id#20, i_class_id#21, i_category_id#22]
Input [5]: [cs_sold_date_sk#18, i_brand_id#20, i_class_id#21, i_category_id#22, d_date_sk#23]

(25) BroadcastExchange
Input [3]: [i_brand_id#20, i_class_id#21, i_category_id#22]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=2]

(26) BroadcastHashJoin [codegen id : 4]
Left keys [6]: [coalesce(i_brand_id#14, 0), isnull(i_brand_id#14), coalesce(i_class_id#15, 0), isnull(i_class_id#15), coalesce(i_category_id#16, 0), isnull(i_category_id#16)]
Right keys [6]: [coalesce(i_brand_id#20, 0), isnull(i_brand_id#20), coalesce(i_class_id#21, 0), isnull(i_class_id#21), coalesce(i_category_id#22, 0), isnull(i_category_id#22)]
Join type: LeftSemi
Join condition: None

(27) BroadcastExchange
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(28) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#10]
Right keys [1]: [i_item_sk#13]
Join type: Inner
Join condition: None

(29) Project [codegen id : 6]
Output [4]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16]
Input [6]: [ss_item_sk#10, ss_sold_date_sk#11, i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(30) ReusedExchange [Reuses operator id: 129]
Output [1]: [d_date_sk#24]

(31) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#24]
Join type: Inner
Join condition: None

(32) Project [codegen id : 6]
Output [3]: [i_brand_id#14 AS brand_id#25, i_class_id#15 AS class_id#26, i_category_id#16 AS category_id#27]
Input [5]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16, d_date_sk#24]

(33) HashAggregate [codegen id : 6]
Input [3]: [brand_id#25, class_id#26, category_id#27]
Keys [3]: [brand_id#25, class_id#26, category_id#27]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#25, class_id#26, category_id#27]

(34) Exchange
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: hashpartitioning(brand_id#25, class_id#26, category_id#27, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(35) HashAggregate [codegen id : 10]
Input [3]: [brand_id#25, class_id#26, category_id#27]
Keys [3]: [brand_id#25, class_id#26, category_id#27]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#25, class_id#26, category_id#27]

(36) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_item_sk#28, ws_sold_date_sk#29]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#29), dynamicpruningexpression(ws_sold_date_sk#29 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(37) ColumnarToRow [codegen id : 9]
Input [2]: [ws_item_sk#28, ws_sold_date_sk#29]

(38) Filter [codegen id : 9]
Input [2]: [ws_item_sk#28, ws_sold_date_sk#29]
Condition : isnotnull(ws_item_sk#28)

(39) ReusedExchange [Reuses operator id: 19]
Output [4]: [i_item_sk#30, i_brand_id#31, i_class_id#32, i_category_id#33]

(40) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_item_sk#28]
Right keys [1]: [i_item_sk#30]
Join type: Inner
Join condition: None

(41) Project [codegen id : 9]
Output [4]: [ws_sold_date_sk#29, i_brand_id#31, i_class_id#32, i_category_id#33]
Input [6]: [ws_item_sk#28, ws_sold_date_sk#29, i_item_sk#30, i_brand_id#31, i_class_id#32, i_category_id#33]

(42) ReusedExchange [Reuses operator id: 129]
Output [1]: [d_date_sk#34]

(43) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_sold_date_sk#29]
Right keys [1]: [d_date_sk#34]
Join type: Inner
Join condition: None

(44) Project [codegen id : 9]
Output [3]: [i_brand_id#31, i_class_id#32, i_category_id#33]
Input [5]: [ws_sold_date_sk#29, i_brand_id#31, i_class_id#32, i_category_id#33, d_date_sk#34]

(45) BroadcastExchange
Input [3]: [i_brand_id#31, i_class_id#32, i_category_id#33]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=5]

(46) BroadcastHashJoin [codegen id : 10]
Left keys [6]: [coalesce(brand_id#25, 0), isnull(brand_id#25), coalesce(class_id#26, 0), isnull(class_id#26), coalesce(category_id#27, 0), isnull(category_id#27)]
Right keys [6]: [coalesce(i_brand_id#31, 0), isnull(i_brand_id#31), coalesce(i_class_id#32, 0), isnull(i_class_id#32), coalesce(i_category_id#33, 0), isnull(i_category_id#33)]
Join type: LeftSemi
Join condition: None

(47) BroadcastExchange
Input [3]: [brand_id#25, class_id#26, category_id#27]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [plan_id=6]

(48) BroadcastHashJoin [codegen id : 11]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#25, class_id#26, category_id#27]
Join type: Inner
Join condition: None

(49) Project [codegen id : 11]
Output [1]: [i_item_sk#6 AS ss_item_sk#35]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#25, class_id#26, category_id#27]

(50) BroadcastExchange
Input [1]: [ss_item_sk#35]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

(51) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#35]
Join type: LeftSemi
Join condition: None

(52) ReusedExchange [Reuses operator id: 19]
Output [4]: [i_item_sk#36, i_brand_id#37, i_class_id#38, i_category_id#39]

(53) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#36]
Join type: Inner
Join condition: None

(54) Project [codegen id : 14]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#37, i_class_id#38, i_category_id#39]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#36, i_brand_id#37, i_class_id#38, i_category_id#39]

(55) ReusedExchange [Reuses operator id: 124]
Output [1]: [d_date_sk#40]

(56) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#40]
Join type: Inner
Join condition: None

(57) Project [codegen id : 14]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#37, i_class_id#38, i_category_id#39]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#37, i_class_id#38, i_category_id#39, d_date_sk#40]

(58) HashAggregate [codegen id : 14]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#37, i_class_id#38, i_category_id#39]
Keys [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Functions [2]: [partial_sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), partial_count(1)]
Aggregate Attributes [3]: [sum#41, isEmpty#42, count#43]
Results [6]: [i_brand_id#37, i_class_id#38, i_category_id#39, sum#44, isEmpty#45, count#46]

(59) Exchange
Input [6]: [i_brand_id#37, i_class_id#38, i_category_id#39, sum#44, isEmpty#45, count#46]
Arguments: hashpartitioning(i_brand_id#37, i_class_id#38, i_category_id#39, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(60) HashAggregate [codegen id : 15]
Input [6]: [i_brand_id#37, i_class_id#38, i_category_id#39, sum#44, isEmpty#45, count#46]
Keys [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Functions [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#47, count(1)#48]
Results [5]: [i_brand_id#37, i_class_id#38, i_category_id#39, sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#47 AS sales#49, count(1)#48 AS number_sales#50]

(61) Filter [codegen id : 15]
Input [5]: [i_brand_id#37, i_class_id#38, i_category_id#39, sales#49, number_sales#50]
Condition : (isnotnull(sales#49) AND (cast(sales#49 as decimal(32,6)) > cast(Subquery scalar-subquery#51, [id=#52] as decimal(32,6))))

(62) Project [codegen id : 15]
Output [6]: [sales#49, number_sales#50, store AS channel#53, i_brand_id#37 AS i_brand_id#54, i_class_id#38 AS i_class_id#55, i_category_id#39 AS i_category_id#56]
Input [5]: [i_brand_id#37, i_class_id#38, i_category_id#39, sales#49, number_sales#50]

(63) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_item_sk#57, cs_quantity#58, cs_list_price#59, cs_sold_date_sk#60]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#60), dynamicpruningexpression(cs_sold_date_sk#60 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(64) ColumnarToRow [codegen id : 29]
Input [4]: [cs_item_sk#57, cs_quantity#58, cs_list_price#59, cs_sold_date_sk#60]

(65) Filter [codegen id : 29]
Input [4]: [cs_item_sk#57, cs_quantity#58, cs_list_price#59, cs_sold_date_sk#60]
Condition : isnotnull(cs_item_sk#57)

(66) ReusedExchange [Reuses operator id: 50]
Output [1]: [ss_item_sk#35]

(67) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [cs_item_sk#57]
Right keys [1]: [ss_item_sk#35]
Join type: LeftSemi
Join condition: None

(68) ReusedExchange [Reuses operator id: 19]
Output [4]: [i_item_sk#61, i_brand_id#62, i_class_id#63, i_category_id#64]

(69) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [cs_item_sk#57]
Right keys [1]: [i_item_sk#61]
Join type: Inner
Join condition: None

(70) Project [codegen id : 29]
Output [6]: [cs_quantity#58, cs_list_price#59, cs_sold_date_sk#60, i_brand_id#62, i_class_id#63, i_category_id#64]
Input [8]: [cs_item_sk#57, cs_quantity#58, cs_list_price#59, cs_sold_date_sk#60, i_item_sk#61, i_brand_id#62, i_class_id#63, i_category_id#64]

(71) ReusedExchange [Reuses operator id: 124]
Output [1]: [d_date_sk#65]

(72) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [cs_sold_date_sk#60]
Right keys [1]: [d_date_sk#65]
Join type: Inner
Join condition: None

(73) Project [codegen id : 29]
Output [5]: [cs_quantity#58, cs_list_price#59, i_brand_id#62, i_class_id#63, i_category_id#64]
Input [7]: [cs_quantity#58, cs_list_price#59, cs_sold_date_sk#60, i_brand_id#62, i_class_id#63, i_category_id#64, d_date_sk#65]

(74) HashAggregate [codegen id : 29]
Input [5]: [cs_quantity#58, cs_list_price#59, i_brand_id#62, i_class_id#63, i_category_id#64]
Keys [3]: [i_brand_id#62, i_class_id#63, i_category_id#64]
Functions [2]: [partial_sum((cast(cs_quantity#58 as decimal(10,0)) * cs_list_price#59)), partial_count(1)]
Aggregate Attributes [3]: [sum#66, isEmpty#67, count#68]
Results [6]: [i_brand_id#62, i_class_id#63, i_category_id#64, sum#69, isEmpty#70, count#71]

(75) Exchange
Input [6]: [i_brand_id#62, i_class_id#63, i_category_id#64, sum#69, isEmpty#70, count#71]
Arguments: hashpartitioning(i_brand_id#62, i_class_id#63, i_category_id#64, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(76) HashAggregate [codegen id : 30]
Input [6]: [i_brand_id#62, i_class_id#63, i_category_id#64, sum#69, isEmpty#70, count#71]
Keys [3]: [i_brand_id#62, i_class_id#63, i_category_id#64]
Functions [2]: [sum((cast(cs_quantity#58 as decimal(10,0)) * cs_list_price#59)), count(1)]
Aggregate Attributes [2]: [sum((cast(cs_quantity#58 as decimal(10,0)) * cs_list_price#59))#72, count(1)#73]
Results [5]: [i_brand_id#62, i_class_id#63, i_category_id#64, sum((cast(cs_quantity#58 as decimal(10,0)) * cs_list_price#59))#72 AS sales#74, count(1)#73 AS number_sales#75]

(77) Filter [codegen id : 30]
Input [5]: [i_brand_id#62, i_class_id#63, i_category_id#64, sales#74, number_sales#75]
Condition : (isnotnull(sales#74) AND (cast(sales#74 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#51, [id=#52] as decimal(32,6))))

(78) Project [codegen id : 30]
Output [6]: [sales#74, number_sales#75, catalog AS channel#76, i_brand_id#62, i_class_id#63, i_category_id#64]
Input [5]: [i_brand_id#62, i_class_id#63, i_category_id#64, sales#74, number_sales#75]

(79) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#77, ws_quantity#78, ws_list_price#79, ws_sold_date_sk#80]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#80), dynamicpruningexpression(ws_sold_date_sk#80 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(80) ColumnarToRow [codegen id : 44]
Input [4]: [ws_item_sk#77, ws_quantity#78, ws_list_price#79, ws_sold_date_sk#80]

(81) Filter [codegen id : 44]
Input [4]: [ws_item_sk#77, ws_quantity#78, ws_list_price#79, ws_sold_date_sk#80]
Condition : isnotnull(ws_item_sk#77)

(82) ReusedExchange [Reuses operator id: 50]
Output [1]: [ss_item_sk#35]

(83) BroadcastHashJoin [codegen id : 44]
Left keys [1]: [ws_item_sk#77]
Right keys [1]: [ss_item_sk#35]
Join type: LeftSemi
Join condition: None

(84) ReusedExchange [Reuses operator id: 19]
Output [4]: [i_item_sk#81, i_brand_id#82, i_class_id#83, i_category_id#84]

(85) BroadcastHashJoin [codegen id : 44]
Left keys [1]: [ws_item_sk#77]
Right keys [1]: [i_item_sk#81]
Join type: Inner
Join condition: None

(86) Project [codegen id : 44]
Output [6]: [ws_quantity#78, ws_list_price#79, ws_sold_date_sk#80, i_brand_id#82, i_class_id#83, i_category_id#84]
Input [8]: [ws_item_sk#77, ws_quantity#78, ws_list_price#79, ws_sold_date_sk#80, i_item_sk#81, i_brand_id#82, i_class_id#83, i_category_id#84]

(87) ReusedExchange [Reuses operator id: 124]
Output [1]: [d_date_sk#85]

(88) BroadcastHashJoin [codegen id : 44]
Left keys [1]: [ws_sold_date_sk#80]
Right keys [1]: [d_date_sk#85]
Join type: Inner
Join condition: None

(89) Project [codegen id : 44]
Output [5]: [ws_quantity#78, ws_list_price#79, i_brand_id#82, i_class_id#83, i_category_id#84]
Input [7]: [ws_quantity#78, ws_list_price#79, ws_sold_date_sk#80, i_brand_id#82, i_class_id#83, i_category_id#84, d_date_sk#85]

(90) HashAggregate [codegen id : 44]
Input [5]: [ws_quantity#78, ws_list_price#79, i_brand_id#82, i_class_id#83, i_category_id#84]
Keys [3]: [i_brand_id#82, i_class_id#83, i_category_id#84]
Functions [2]: [partial_sum((cast(ws_quantity#78 as decimal(10,0)) * ws_list_price#79)), partial_count(1)]
Aggregate Attributes [3]: [sum#86, isEmpty#87, count#88]
Results [6]: [i_brand_id#82, i_class_id#83, i_category_id#84, sum#89, isEmpty#90, count#91]

(91) Exchange
Input [6]: [i_brand_id#82, i_class_id#83, i_category_id#84, sum#89, isEmpty#90, count#91]
Arguments: hashpartitioning(i_brand_id#82, i_class_id#83, i_category_id#84, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(92) HashAggregate [codegen id : 45]
Input [6]: [i_brand_id#82, i_class_id#83, i_category_id#84, sum#89, isEmpty#90, count#91]
Keys [3]: [i_brand_id#82, i_class_id#83, i_category_id#84]
Functions [2]: [sum((cast(ws_quantity#78 as decimal(10,0)) * ws_list_price#79)), count(1)]
Aggregate Attributes [2]: [sum((cast(ws_quantity#78 as decimal(10,0)) * ws_list_price#79))#92, count(1)#93]
Results [5]: [i_brand_id#82, i_class_id#83, i_category_id#84, sum((cast(ws_quantity#78 as decimal(10,0)) * ws_list_price#79))#92 AS sales#94, count(1)#93 AS number_sales#95]

(93) Filter [codegen id : 45]
Input [5]: [i_brand_id#82, i_class_id#83, i_category_id#84, sales#94, number_sales#95]
Condition : (isnotnull(sales#94) AND (cast(sales#94 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#51, [id=#52] as decimal(32,6))))

(94) Project [codegen id : 45]
Output [6]: [sales#94, number_sales#95, web AS channel#96, i_brand_id#82, i_class_id#83, i_category_id#84]
Input [5]: [i_brand_id#82, i_class_id#83, i_category_id#84, sales#94, number_sales#95]

(95) Union

(96) Expand [codegen id : 46]
Input [6]: [sales#49, number_sales#50, channel#53, i_brand_id#54, i_class_id#55, i_category_id#56]
Arguments: [[sales#49, number_sales#50, channel#53, i_brand_id#54, i_class_id#55, i_category_id#56, 0], [sales#49, number_sales#50, channel#53, i_brand_id#54, i_class_id#55, null, 1], [sales#49, number_sales#50, channel#53, i_brand_id#54, null, null, 3], [sales#49, number_sales#50, channel#53, null, null, null, 7], [sales#49, number_sales#50, null, null, null, null, 15]], [sales#49, number_sales#50, channel#97, i_brand_id#98, i_class_id#99, i_category_id#100, spark_grouping_id#101]

(97) HashAggregate [codegen id : 46]
Input [7]: [sales#49, number_sales#50, channel#97, i_brand_id#98, i_class_id#99, i_category_id#100, spark_grouping_id#101]
Keys [5]: [channel#97, i_brand_id#98, i_class_id#99, i_category_id#100, spark_grouping_id#101]
Functions [2]: [partial_sum(sales#49), partial_sum(number_sales#50)]
Aggregate Attributes [3]: [sum#102, isEmpty#103, sum#104]
Results [8]: [channel#97, i_brand_id#98, i_class_id#99, i_category_id#100, spark_grouping_id#101, sum#105, isEmpty#106, sum#107]

(98) Exchange
Input [8]: [channel#97, i_brand_id#98, i_class_id#99, i_category_id#100, spark_grouping_id#101, sum#105, isEmpty#106, sum#107]
Arguments: hashpartitioning(channel#97, i_brand_id#98, i_class_id#99, i_category_id#100, spark_grouping_id#101, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(99) HashAggregate [codegen id : 47]
Input [8]: [channel#97, i_brand_id#98, i_class_id#99, i_category_id#100, spark_grouping_id#101, sum#105, isEmpty#106, sum#107]
Keys [5]: [channel#97, i_brand_id#98, i_class_id#99, i_category_id#100, spark_grouping_id#101]
Functions [2]: [sum(sales#49), sum(number_sales#50)]
Aggregate Attributes [2]: [sum(sales#49)#108, sum(number_sales#50)#109]
Results [6]: [channel#97, i_brand_id#98, i_class_id#99, i_category_id#100, sum(sales#49)#108 AS sum(sales)#110, sum(number_sales#50)#109 AS sum(number_sales)#111]

(100) TakeOrderedAndProject
Input [6]: [channel#97, i_brand_id#98, i_class_id#99, i_category_id#100, sum(sales)#110, sum(number_sales)#111]
Arguments: 100, [channel#97 ASC NULLS FIRST, i_brand_id#98 ASC NULLS FIRST, i_class_id#99 ASC NULLS FIRST, i_category_id#100 ASC NULLS FIRST], [channel#97, i_brand_id#98, i_class_id#99, i_category_id#100, sum(sales)#110, sum(number_sales)#111]

===== Subqueries =====

Subquery:1 Hosting operator id = 61 Hosting Expression = Subquery scalar-subquery#51, [id=#52]
* HashAggregate (119)
+- Exchange (118)
   +- * HashAggregate (117)
      +- Union (116)
         :- * Project (105)
         :  +- * BroadcastHashJoin Inner BuildRight (104)
         :     :- * ColumnarToRow (102)
         :     :  +- Scan parquet spark_catalog.default.store_sales (101)
         :     +- ReusedExchange (103)
         :- * Project (110)
         :  +- * BroadcastHashJoin Inner BuildRight (109)
         :     :- * ColumnarToRow (107)
         :     :  +- Scan parquet spark_catalog.default.catalog_sales (106)
         :     +- ReusedExchange (108)
         +- * Project (115)
            +- * BroadcastHashJoin Inner BuildRight (114)
               :- * ColumnarToRow (112)
               :  +- Scan parquet spark_catalog.default.web_sales (111)
               +- ReusedExchange (113)


(101) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_quantity#112, ss_list_price#113, ss_sold_date_sk#114]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#114), dynamicpruningexpression(ss_sold_date_sk#114 IN dynamicpruning#12)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(102) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#112, ss_list_price#113, ss_sold_date_sk#114]

(103) ReusedExchange [Reuses operator id: 129]
Output [1]: [d_date_sk#115]

(104) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#114]
Right keys [1]: [d_date_sk#115]
Join type: Inner
Join condition: None

(105) Project [codegen id : 2]
Output [2]: [ss_quantity#112 AS quantity#116, ss_list_price#113 AS list_price#117]
Input [4]: [ss_quantity#112, ss_list_price#113, ss_sold_date_sk#114, d_date_sk#115]

(106) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_quantity#118, cs_list_price#119, cs_sold_date_sk#120]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#120), dynamicpruningexpression(cs_sold_date_sk#120 IN dynamicpruning#12)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(107) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#118, cs_list_price#119, cs_sold_date_sk#120]

(108) ReusedExchange [Reuses operator id: 129]
Output [1]: [d_date_sk#121]

(109) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#120]
Right keys [1]: [d_date_sk#121]
Join type: Inner
Join condition: None

(110) Project [codegen id : 4]
Output [2]: [cs_quantity#118 AS quantity#122, cs_list_price#119 AS list_price#123]
Input [4]: [cs_quantity#118, cs_list_price#119, cs_sold_date_sk#120, d_date_sk#121]

(111) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_quantity#124, ws_list_price#125, ws_sold_date_sk#126]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#126), dynamicpruningexpression(ws_sold_date_sk#126 IN dynamicpruning#12)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(112) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#124, ws_list_price#125, ws_sold_date_sk#126]

(113) ReusedExchange [Reuses operator id: 129]
Output [1]: [d_date_sk#127]

(114) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#126]
Right keys [1]: [d_date_sk#127]
Join type: Inner
Join condition: None

(115) Project [codegen id : 6]
Output [2]: [ws_quantity#124 AS quantity#128, ws_list_price#125 AS list_price#129]
Input [4]: [ws_quantity#124, ws_list_price#125, ws_sold_date_sk#126, d_date_sk#127]

(116) Union

(117) HashAggregate [codegen id : 7]
Input [2]: [quantity#116, list_price#117]
Keys: []
Functions [1]: [partial_avg((cast(quantity#116 as decimal(10,0)) * list_price#117))]
Aggregate Attributes [2]: [sum#130, count#131]
Results [2]: [sum#132, count#133]

(118) Exchange
Input [2]: [sum#132, count#133]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=12]

(119) HashAggregate [codegen id : 8]
Input [2]: [sum#132, count#133]
Keys: []
Functions [1]: [avg((cast(quantity#116 as decimal(10,0)) * list_price#117))]
Aggregate Attributes [1]: [avg((cast(quantity#116 as decimal(10,0)) * list_price#117))#134]
Results [1]: [avg((cast(quantity#116 as decimal(10,0)) * list_price#117))#134 AS average_sales#135]

Subquery:2 Hosting operator id = 101 Hosting Expression = ss_sold_date_sk#114 IN dynamicpruning#12

Subquery:3 Hosting operator id = 106 Hosting Expression = cs_sold_date_sk#120 IN dynamicpruning#12

Subquery:4 Hosting operator id = 111 Hosting Expression = ws_sold_date_sk#126 IN dynamicpruning#12

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (124)
+- * Project (123)
   +- * Filter (122)
      +- * ColumnarToRow (121)
         +- Scan parquet spark_catalog.default.date_dim (120)


(120) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#40, d_year#136, d_moy#137]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(121) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#40, d_year#136, d_moy#137]

(122) Filter [codegen id : 1]
Input [3]: [d_date_sk#40, d_year#136, d_moy#137]
Condition : ((((isnotnull(d_year#136) AND isnotnull(d_moy#137)) AND (d_year#136 = 2001)) AND (d_moy#137 = 11)) AND isnotnull(d_date_sk#40))

(123) Project [codegen id : 1]
Output [1]: [d_date_sk#40]
Input [3]: [d_date_sk#40, d_year#136, d_moy#137]

(124) BroadcastExchange
Input [1]: [d_date_sk#40]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=13]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (129)
+- * Project (128)
   +- * Filter (127)
      +- * ColumnarToRow (126)
         +- Scan parquet spark_catalog.default.date_dim (125)


(125) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#24, d_year#138]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(126) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#24, d_year#138]

(127) Filter [codegen id : 1]
Input [2]: [d_date_sk#24, d_year#138]
Condition : (((isnotnull(d_year#138) AND (d_year#138 >= 1999)) AND (d_year#138 <= 2001)) AND isnotnull(d_date_sk#24))

(128) Project [codegen id : 1]
Output [1]: [d_date_sk#24]
Input [2]: [d_date_sk#24, d_year#138]

(129) BroadcastExchange
Input [1]: [d_date_sk#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=14]

Subquery:7 Hosting operator id = 13 Hosting Expression = cs_sold_date_sk#18 IN dynamicpruning#12

Subquery:8 Hosting operator id = 36 Hosting Expression = ws_sold_date_sk#29 IN dynamicpruning#12

Subquery:9 Hosting operator id = 77 Hosting Expression = ReusedSubquery Subquery scalar-subquery#51, [id=#52]

Subquery:10 Hosting operator id = 63 Hosting Expression = cs_sold_date_sk#60 IN dynamicpruning#5

Subquery:11 Hosting operator id = 93 Hosting Expression = ReusedSubquery Subquery scalar-subquery#51, [id=#52]

Subquery:12 Hosting operator id = 79 Hosting Expression = ws_sold_date_sk#80 IN dynamicpruning#5


