== Physical Plan ==
TakeOrderedAndProject (121)
+- * HashAggregate (120)
   +- Exchange (119)
      +- * HashAggregate (118)
         +- * Expand (117)
            +- Union (116)
               :- * Project (83)
               :  +- * Filter (82)
               :     +- * HashAggregate (81)
               :        +- Exchange (80)
               :           +- * HashAggregate (79)
               :              +- * Project (78)
               :                 +- * BroadcastHashJoin Inner BuildRight (77)
               :                    :- * Project (71)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (70)
               :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (63)
               :                    :     :  :- * Filter (3)
               :                    :     :  :  +- * ColumnarToRow (2)
               :                    :     :  :     +- Scan parquet default.store_sales (1)
               :                    :     :  +- BroadcastExchange (62)
               :                    :     :     +- * Project (61)
               :                    :     :        +- * BroadcastHashJoin Inner BuildRight (60)
               :                    :     :           :- * Filter (6)
               :                    :     :           :  +- * ColumnarToRow (5)
               :                    :     :           :     +- Scan parquet default.item (4)
               :                    :     :           +- BroadcastExchange (59)
               :                    :     :              +- * BroadcastHashJoin LeftSemi BuildRight (58)
               :                    :     :                 :- * HashAggregate (44)
               :                    :     :                 :  +- * HashAggregate (43)
               :                    :     :                 :     +- * BroadcastHashJoin LeftSemi BuildRight (42)
               :                    :     :                 :        :- * HashAggregate (25)
               :                    :     :                 :        :  +- Exchange (24)
               :                    :     :                 :        :     +- * HashAggregate (23)
               :                    :     :                 :        :        +- * Project (22)
               :                    :     :                 :        :           +- * BroadcastHashJoin Inner BuildRight (21)
               :                    :     :                 :        :              :- * Project (15)
               :                    :     :                 :        :              :  +- * BroadcastHashJoin Inner BuildRight (14)
               :                    :     :                 :        :              :     :- * Filter (9)
               :                    :     :                 :        :              :     :  +- * ColumnarToRow (8)
               :                    :     :                 :        :              :     :     +- Scan parquet default.store_sales (7)
               :                    :     :                 :        :              :     +- BroadcastExchange (13)
               :                    :     :                 :        :              :        +- * Filter (12)
               :                    :     :                 :        :              :           +- * ColumnarToRow (11)
               :                    :     :                 :        :              :              +- Scan parquet default.item (10)
               :                    :     :                 :        :              +- BroadcastExchange (20)
               :                    :     :                 :        :                 +- * Project (19)
               :                    :     :                 :        :                    +- * Filter (18)
               :                    :     :                 :        :                       +- * ColumnarToRow (17)
               :                    :     :                 :        :                          +- Scan parquet default.date_dim (16)
               :                    :     :                 :        +- BroadcastExchange (41)
               :                    :     :                 :           +- * HashAggregate (40)
               :                    :     :                 :              +- Exchange (39)
               :                    :     :                 :                 +- * HashAggregate (38)
               :                    :     :                 :                    +- * Project (37)
               :                    :     :                 :                       +- * BroadcastHashJoin Inner BuildRight (36)
               :                    :     :                 :                          :- * Project (34)
               :                    :     :                 :                          :  +- * BroadcastHashJoin Inner BuildRight (33)
               :                    :     :                 :                          :     :- * Filter (28)
               :                    :     :                 :                          :     :  +- * ColumnarToRow (27)
               :                    :     :                 :                          :     :     +- Scan parquet default.catalog_sales (26)
               :                    :     :                 :                          :     +- BroadcastExchange (32)
               :                    :     :                 :                          :        +- * Filter (31)
               :                    :     :                 :                          :           +- * ColumnarToRow (30)
               :                    :     :                 :                          :              +- Scan parquet default.item (29)
               :                    :     :                 :                          +- ReusedExchange (35)
               :                    :     :                 +- BroadcastExchange (57)
               :                    :     :                    +- * HashAggregate (56)
               :                    :     :                       +- Exchange (55)
               :                    :     :                          +- * HashAggregate (54)
               :                    :     :                             +- * Project (53)
               :                    :     :                                +- * BroadcastHashJoin Inner BuildRight (52)
               :                    :     :                                   :- * Project (50)
               :                    :     :                                   :  +- * BroadcastHashJoin Inner BuildRight (49)
               :                    :     :                                   :     :- * Filter (47)
               :                    :     :                                   :     :  +- * ColumnarToRow (46)
               :                    :     :                                   :     :     +- Scan parquet default.web_sales (45)
               :                    :     :                                   :     +- ReusedExchange (48)
               :                    :     :                                   +- ReusedExchange (51)
               :                    :     +- BroadcastExchange (69)
               :                    :        +- * BroadcastHashJoin LeftSemi BuildRight (68)
               :                    :           :- * Filter (66)
               :                    :           :  +- * ColumnarToRow (65)
               :                    :           :     +- Scan parquet default.item (64)
               :                    :           +- ReusedExchange (67)
               :                    +- BroadcastExchange (76)
               :                       +- * Project (75)
               :                          +- * Filter (74)
               :                             +- * ColumnarToRow (73)
               :                                +- Scan parquet default.date_dim (72)
               :- * Project (99)
               :  +- * Filter (98)
               :     +- * HashAggregate (97)
               :        +- Exchange (96)
               :           +- * HashAggregate (95)
               :              +- * Project (94)
               :                 +- * BroadcastHashJoin Inner BuildRight (93)
               :                    :- * Project (91)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (90)
               :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (88)
               :                    :     :  :- * Filter (86)
               :                    :     :  :  +- * ColumnarToRow (85)
               :                    :     :  :     +- Scan parquet default.catalog_sales (84)
               :                    :     :  +- ReusedExchange (87)
               :                    :     +- ReusedExchange (89)
               :                    +- ReusedExchange (92)
               +- * Project (115)
                  +- * Filter (114)
                     +- * HashAggregate (113)
                        +- Exchange (112)
                           +- * HashAggregate (111)
                              +- * Project (110)
                                 +- * BroadcastHashJoin Inner BuildRight (109)
                                    :- * Project (107)
                                    :  +- * BroadcastHashJoin Inner BuildRight (106)
                                    :     :- * BroadcastHashJoin LeftSemi BuildRight (104)
                                    :     :  :- * Filter (102)
                                    :     :  :  +- * ColumnarToRow (101)
                                    :     :  :     +- Scan parquet default.web_sales (100)
                                    :     :  +- ReusedExchange (103)
                                    :     +- ReusedExchange (105)
                                    +- ReusedExchange (108)


(1) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 29]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]

(3) Filter [codegen id : 29]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(4) Scan parquet default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 13]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(6) Filter [codegen id : 13]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : ((isnotnull(i_brand_id#6) AND isnotnull(i_class_id#7)) AND isnotnull(i_category_id#8))

(7) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(8) ColumnarToRow [codegen id : 3]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]

(9) Filter [codegen id : 3]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(10) Scan parquet default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(12) Filter [codegen id : 1]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : (((isnotnull(i_item_sk#5) AND isnotnull(i_brand_id#6)) AND isnotnull(i_class_id#7)) AND isnotnull(i_category_id#8))

(13) BroadcastExchange
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9]

(14) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#5]
Join condition: None

(15) Project [codegen id : 3]
Output [4]: [ss_sold_date_sk#1, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(16) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(17) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#10, d_year#11]

(18) Filter [codegen id : 2]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1999)) AND (d_year#11 <= 2001)) AND isnotnull(d_date_sk#10))

(19) Project [codegen id : 2]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(20) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(21) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(22) Project [codegen id : 3]
Output [3]: [i_brand_id#6 AS brand_id#13, i_class_id#7 AS class_id#14, i_category_id#8 AS category_id#15]
Input [5]: [ss_sold_date_sk#1, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(23) HashAggregate [codegen id : 3]
Input [3]: [brand_id#13, class_id#14, category_id#15]
Keys [3]: [brand_id#13, class_id#14, category_id#15]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#13, class_id#14, category_id#15]

(24) Exchange
Input [3]: [brand_id#13, class_id#14, category_id#15]
Arguments: hashpartitioning(brand_id#13, class_id#14, category_id#15, 5), ENSURE_REQUIREMENTS, [id=#16]

(25) HashAggregate [codegen id : 12]
Input [3]: [brand_id#13, class_id#14, category_id#15]
Keys [3]: [brand_id#13, class_id#14, category_id#15]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#13, class_id#14, category_id#15]

(26) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#17, cs_item_sk#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int>

(27) ColumnarToRow [codegen id : 6]
Input [2]: [cs_sold_date_sk#17, cs_item_sk#18]

(28) Filter [codegen id : 6]
Input [2]: [cs_sold_date_sk#17, cs_item_sk#18]
Condition : (isnotnull(cs_item_sk#18) AND isnotnull(cs_sold_date_sk#17))

(29) Scan parquet default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(30) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(31) Filter [codegen id : 4]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : isnotnull(i_item_sk#5)

(32) BroadcastExchange
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#19]

(33) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_item_sk#18]
Right keys [1]: [i_item_sk#5]
Join condition: None

(34) Project [codegen id : 6]
Output [4]: [cs_sold_date_sk#17, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [6]: [cs_sold_date_sk#17, cs_item_sk#18, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(35) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#10]

(36) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#17]
Right keys [1]: [d_date_sk#10]
Join condition: None

(37) Project [codegen id : 6]
Output [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Input [5]: [cs_sold_date_sk#17, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(38) HashAggregate [codegen id : 6]
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]

(39) Exchange
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: hashpartitioning(i_brand_id#6, i_class_id#7, i_category_id#8, 5), ENSURE_REQUIREMENTS, [id=#20]

(40) HashAggregate [codegen id : 7]
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]

(41) BroadcastExchange
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#21]

(42) BroadcastHashJoin [codegen id : 12]
Left keys [6]: [coalesce(brand_id#13, 0), isnull(brand_id#13), coalesce(class_id#14, 0), isnull(class_id#14), coalesce(category_id#15, 0), isnull(category_id#15)]
Right keys [6]: [coalesce(i_brand_id#6, 0), isnull(i_brand_id#6), coalesce(i_class_id#7, 0), isnull(i_class_id#7), coalesce(i_category_id#8, 0), isnull(i_category_id#8)]
Join condition: None

(43) HashAggregate [codegen id : 12]
Input [3]: [brand_id#13, class_id#14, category_id#15]
Keys [3]: [brand_id#13, class_id#14, category_id#15]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#13, class_id#14, category_id#15]

(44) HashAggregate [codegen id : 12]
Input [3]: [brand_id#13, class_id#14, category_id#15]
Keys [3]: [brand_id#13, class_id#14, category_id#15]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#13, class_id#14, category_id#15]

(45) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#22, ws_item_sk#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int>

(46) ColumnarToRow [codegen id : 10]
Input [2]: [ws_sold_date_sk#22, ws_item_sk#23]

(47) Filter [codegen id : 10]
Input [2]: [ws_sold_date_sk#22, ws_item_sk#23]
Condition : (isnotnull(ws_item_sk#23) AND isnotnull(ws_sold_date_sk#22))

(48) ReusedExchange [Reuses operator id: 32]
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(49) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_item_sk#23]
Right keys [1]: [i_item_sk#5]
Join condition: None

(50) Project [codegen id : 10]
Output [4]: [ws_sold_date_sk#22, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [6]: [ws_sold_date_sk#22, ws_item_sk#23, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(51) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#10]

(52) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_sold_date_sk#22]
Right keys [1]: [d_date_sk#10]
Join condition: None

(53) Project [codegen id : 10]
Output [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Input [5]: [ws_sold_date_sk#22, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(54) HashAggregate [codegen id : 10]
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]

(55) Exchange
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: hashpartitioning(i_brand_id#6, i_class_id#7, i_category_id#8, 5), ENSURE_REQUIREMENTS, [id=#24]

(56) HashAggregate [codegen id : 11]
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]

(57) BroadcastExchange
Input [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#25]

(58) BroadcastHashJoin [codegen id : 12]
Left keys [6]: [coalesce(brand_id#13, 0), isnull(brand_id#13), coalesce(class_id#14, 0), isnull(class_id#14), coalesce(category_id#15, 0), isnull(category_id#15)]
Right keys [6]: [coalesce(i_brand_id#6, 0), isnull(i_brand_id#6), coalesce(i_class_id#7, 0), isnull(i_class_id#7), coalesce(i_category_id#8, 0), isnull(i_category_id#8)]
Join condition: None

(59) BroadcastExchange
Input [3]: [brand_id#13, class_id#14, category_id#15]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#26]

(60) BroadcastHashJoin [codegen id : 13]
Left keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Right keys [3]: [brand_id#13, class_id#14, category_id#15]
Join condition: None

(61) Project [codegen id : 13]
Output [1]: [i_item_sk#5 AS ss_item_sk#27]
Input [7]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8, brand_id#13, class_id#14, category_id#15]

(62) BroadcastExchange
Input [1]: [ss_item_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#28]

(63) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [ss_item_sk#27]
Join condition: None

(64) Scan parquet default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(65) ColumnarToRow [codegen id : 27]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(66) Filter [codegen id : 27]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : isnotnull(i_item_sk#5)

(67) ReusedExchange [Reuses operator id: 62]
Output [1]: [ss_item_sk#27]

(68) BroadcastHashJoin [codegen id : 27]
Left keys [1]: [i_item_sk#5]
Right keys [1]: [ss_item_sk#27]
Join condition: None

(69) BroadcastExchange
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(70) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#5]
Join condition: None

(71) Project [codegen id : 29]
Output [6]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(72) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(73) ColumnarToRow [codegen id : 28]
Input [3]: [d_date_sk#10, d_year#11, d_moy#30]

(74) Filter [codegen id : 28]
Input [3]: [d_date_sk#10, d_year#11, d_moy#30]
Condition : ((((isnotnull(d_year#11) AND isnotnull(d_moy#30)) AND (d_year#11 = 2001)) AND (d_moy#30 = 11)) AND isnotnull(d_date_sk#10))

(75) Project [codegen id : 28]
Output [1]: [d_date_sk#10]
Input [3]: [d_date_sk#10, d_year#11, d_moy#30]

(76) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#31]

(77) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(78) Project [codegen id : 29]
Output [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [7]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(79) HashAggregate [codegen id : 29]
Input [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#32, isEmpty#33, count#34]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#35, isEmpty#36, count#37]

(80) Exchange
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#35, isEmpty#36, count#37]
Arguments: hashpartitioning(i_brand_id#6, i_class_id#7, i_category_id#8, 5), ENSURE_REQUIREMENTS, [id=#38]

(81) HashAggregate [codegen id : 30]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#35, isEmpty#36, count#37]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#39, count(1)#40]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#39 AS sales#41, count(1)#40 AS number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#39 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#43]

(82) Filter [codegen id : 30]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#41, number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#43]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#43) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#43 as decimal(32,6)) > cast(Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(83) Project [codegen id : 30]
Output [6]: [sales#41, number_sales#42, store AS channel#46, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#41, number_sales#42, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#43]

(84) Scan parquet default.catalog_sales
Output [4]: [cs_sold_date_sk#17, cs_item_sk#18, cs_quantity#47, cs_list_price#48]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(85) ColumnarToRow [codegen id : 59]
Input [4]: [cs_sold_date_sk#17, cs_item_sk#18, cs_quantity#47, cs_list_price#48]

(86) Filter [codegen id : 59]
Input [4]: [cs_sold_date_sk#17, cs_item_sk#18, cs_quantity#47, cs_list_price#48]
Condition : (isnotnull(cs_item_sk#18) AND isnotnull(cs_sold_date_sk#17))

(87) ReusedExchange [Reuses operator id: 62]
Output [1]: [ss_item_sk#27]

(88) BroadcastHashJoin [codegen id : 59]
Left keys [1]: [cs_item_sk#18]
Right keys [1]: [ss_item_sk#27]
Join condition: None

(89) ReusedExchange [Reuses operator id: 69]
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(90) BroadcastHashJoin [codegen id : 59]
Left keys [1]: [cs_item_sk#18]
Right keys [1]: [i_item_sk#5]
Join condition: None

(91) Project [codegen id : 59]
Output [6]: [cs_sold_date_sk#17, cs_quantity#47, cs_list_price#48, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [8]: [cs_sold_date_sk#17, cs_item_sk#18, cs_quantity#47, cs_list_price#48, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(92) ReusedExchange [Reuses operator id: 76]
Output [1]: [d_date_sk#10]

(93) BroadcastHashJoin [codegen id : 59]
Left keys [1]: [cs_sold_date_sk#17]
Right keys [1]: [d_date_sk#10]
Join condition: None

(94) Project [codegen id : 59]
Output [5]: [cs_quantity#47, cs_list_price#48, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [7]: [cs_sold_date_sk#17, cs_quantity#47, cs_list_price#48, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(95) HashAggregate [codegen id : 59]
Input [5]: [cs_quantity#47, cs_list_price#48, i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#49, isEmpty#50, count#51]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#52, isEmpty#53, count#54]

(96) Exchange
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#52, isEmpty#53, count#54]
Arguments: hashpartitioning(i_brand_id#6, i_class_id#7, i_category_id#8, 5), ENSURE_REQUIREMENTS, [id=#55]

(97) HashAggregate [codegen id : 60]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#52, isEmpty#53, count#54]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#56, count(1)#57]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#56 AS sales#58, count(1)#57 AS number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#56 AS sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#60]

(98) Filter [codegen id : 60]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#58, number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#60]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#60) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#60 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(99) Project [codegen id : 60]
Output [6]: [sales#58, number_sales#59, catalog AS channel#61, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#58, number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#47 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#48 as decimal(12,2)))), DecimalType(18,2), true))#60]

(100) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#22, ws_item_sk#23, ws_quantity#62, ws_list_price#63]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(101) ColumnarToRow [codegen id : 89]
Input [4]: [ws_sold_date_sk#22, ws_item_sk#23, ws_quantity#62, ws_list_price#63]

(102) Filter [codegen id : 89]
Input [4]: [ws_sold_date_sk#22, ws_item_sk#23, ws_quantity#62, ws_list_price#63]
Condition : (isnotnull(ws_item_sk#23) AND isnotnull(ws_sold_date_sk#22))

(103) ReusedExchange [Reuses operator id: 62]
Output [1]: [ss_item_sk#27]

(104) BroadcastHashJoin [codegen id : 89]
Left keys [1]: [ws_item_sk#23]
Right keys [1]: [ss_item_sk#27]
Join condition: None

(105) ReusedExchange [Reuses operator id: 69]
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(106) BroadcastHashJoin [codegen id : 89]
Left keys [1]: [ws_item_sk#23]
Right keys [1]: [i_item_sk#5]
Join condition: None

(107) Project [codegen id : 89]
Output [6]: [ws_sold_date_sk#22, ws_quantity#62, ws_list_price#63, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [8]: [ws_sold_date_sk#22, ws_item_sk#23, ws_quantity#62, ws_list_price#63, i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(108) ReusedExchange [Reuses operator id: 76]
Output [1]: [d_date_sk#10]

(109) BroadcastHashJoin [codegen id : 89]
Left keys [1]: [ws_sold_date_sk#22]
Right keys [1]: [d_date_sk#10]
Join condition: None

(110) Project [codegen id : 89]
Output [5]: [ws_quantity#62, ws_list_price#63, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [7]: [ws_sold_date_sk#22, ws_quantity#62, ws_list_price#63, i_brand_id#6, i_class_id#7, i_category_id#8, d_date_sk#10]

(111) HashAggregate [codegen id : 89]
Input [5]: [ws_quantity#62, ws_list_price#63, i_brand_id#6, i_class_id#7, i_category_id#8]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#64, isEmpty#65, count#66]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#67, isEmpty#68, count#69]

(112) Exchange
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#67, isEmpty#68, count#69]
Arguments: hashpartitioning(i_brand_id#6, i_class_id#7, i_category_id#8, 5), ENSURE_REQUIREMENTS, [id=#70]

(113) HashAggregate [codegen id : 90]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum#67, isEmpty#68, count#69]
Keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#71, count(1)#72]
Results [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#71 AS sales#73, count(1)#72 AS number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#71 AS sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#75]

(114) Filter [codegen id : 90]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#73, number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#75]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#75) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#75 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#44, [id=#45] as decimal(32,6))))

(115) Project [codegen id : 90]
Output [6]: [sales#73, number_sales#74, web AS channel#76, i_brand_id#6, i_class_id#7, i_category_id#8]
Input [6]: [i_brand_id#6, i_class_id#7, i_category_id#8, sales#73, number_sales#74, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#62 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#63 as decimal(12,2)))), DecimalType(18,2), true))#75]

(116) Union

(117) Expand [codegen id : 91]
Input [6]: [sales#41, number_sales#42, channel#46, i_brand_id#6, i_class_id#7, i_category_id#8]
Arguments: [List(sales#41, number_sales#42, channel#46, i_brand_id#6, i_class_id#7, i_category_id#8, 0), List(sales#41, number_sales#42, channel#46, i_brand_id#6, i_class_id#7, null, 1), List(sales#41, number_sales#42, channel#46, i_brand_id#6, null, null, 3), List(sales#41, number_sales#42, channel#46, null, null, null, 7), List(sales#41, number_sales#42, null, null, null, null, 15)], [sales#41, number_sales#42, channel#77, i_brand_id#78, i_class_id#79, i_category_id#80, spark_grouping_id#81]

(118) HashAggregate [codegen id : 91]
Input [7]: [sales#41, number_sales#42, channel#77, i_brand_id#78, i_class_id#79, i_category_id#80, spark_grouping_id#81]
Keys [5]: [channel#77, i_brand_id#78, i_class_id#79, i_category_id#80, spark_grouping_id#81]
Functions [2]: [partial_sum(sales#41), partial_sum(number_sales#42)]
Aggregate Attributes [3]: [sum#82, isEmpty#83, sum#84]
Results [8]: [channel#77, i_brand_id#78, i_class_id#79, i_category_id#80, spark_grouping_id#81, sum#85, isEmpty#86, sum#87]

(119) Exchange
Input [8]: [channel#77, i_brand_id#78, i_class_id#79, i_category_id#80, spark_grouping_id#81, sum#85, isEmpty#86, sum#87]
Arguments: hashpartitioning(channel#77, i_brand_id#78, i_class_id#79, i_category_id#80, spark_grouping_id#81, 5), ENSURE_REQUIREMENTS, [id=#88]

(120) HashAggregate [codegen id : 92]
Input [8]: [channel#77, i_brand_id#78, i_class_id#79, i_category_id#80, spark_grouping_id#81, sum#85, isEmpty#86, sum#87]
Keys [5]: [channel#77, i_brand_id#78, i_class_id#79, i_category_id#80, spark_grouping_id#81]
Functions [2]: [sum(sales#41), sum(number_sales#42)]
Aggregate Attributes [2]: [sum(sales#41)#89, sum(number_sales#42)#90]
Results [6]: [channel#77, i_brand_id#78, i_class_id#79, i_category_id#80, sum(sales#41)#89 AS sum(sales)#91, sum(number_sales#42)#90 AS sum(number_sales)#92]

(121) TakeOrderedAndProject
Input [6]: [channel#77, i_brand_id#78, i_class_id#79, i_category_id#80, sum(sales)#91, sum(number_sales)#92]
Arguments: 100, [channel#77 ASC NULLS FIRST, i_brand_id#78 ASC NULLS FIRST, i_class_id#79 ASC NULLS FIRST, i_category_id#80 ASC NULLS FIRST], [channel#77, i_brand_id#78, i_class_id#79, i_category_id#80, sum(sales)#91, sum(number_sales)#92]

===== Subqueries =====

Subquery:1 Hosting operator id = 82 Hosting Expression = Subquery scalar-subquery#44, [id=#45]
* HashAggregate (147)
+- Exchange (146)
   +- * HashAggregate (145)
      +- Union (144)
         :- * Project (131)
         :  +- * BroadcastHashJoin Inner BuildRight (130)
         :     :- * Filter (124)
         :     :  +- * ColumnarToRow (123)
         :     :     +- Scan parquet default.store_sales (122)
         :     +- BroadcastExchange (129)
         :        +- * Project (128)
         :           +- * Filter (127)
         :              +- * ColumnarToRow (126)
         :                 +- Scan parquet default.date_dim (125)
         :- * Project (137)
         :  +- * BroadcastHashJoin Inner BuildRight (136)
         :     :- * Filter (134)
         :     :  +- * ColumnarToRow (133)
         :     :     +- Scan parquet default.catalog_sales (132)
         :     +- ReusedExchange (135)
         +- * Project (143)
            +- * BroadcastHashJoin Inner BuildRight (142)
               :- * Filter (140)
               :  +- * ColumnarToRow (139)
               :     +- Scan parquet default.web_sales (138)
               +- ReusedExchange (141)


(122) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(123) ColumnarToRow [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]

(124) Filter [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Condition : isnotnull(ss_sold_date_sk#1)

(125) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(126) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]

(127) Filter [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1999)) AND (d_year#11 <= 2001)) AND isnotnull(d_date_sk#10))

(128) Project [codegen id : 1]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(129) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#93]

(130) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(131) Project [codegen id : 2]
Output [2]: [ss_quantity#3 AS quantity#94, ss_list_price#4 AS list_price#95]
Input [4]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, d_date_sk#10]

(132) Scan parquet default.catalog_sales
Output [3]: [cs_sold_date_sk#17, cs_quantity#47, cs_list_price#48]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(133) ColumnarToRow [codegen id : 4]
Input [3]: [cs_sold_date_sk#17, cs_quantity#47, cs_list_price#48]

(134) Filter [codegen id : 4]
Input [3]: [cs_sold_date_sk#17, cs_quantity#47, cs_list_price#48]
Condition : isnotnull(cs_sold_date_sk#17)

(135) ReusedExchange [Reuses operator id: 129]
Output [1]: [d_date_sk#10]

(136) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#17]
Right keys [1]: [d_date_sk#10]
Join condition: None

(137) Project [codegen id : 4]
Output [2]: [cs_quantity#47 AS quantity#96, cs_list_price#48 AS list_price#97]
Input [4]: [cs_sold_date_sk#17, cs_quantity#47, cs_list_price#48, d_date_sk#10]

(138) Scan parquet default.web_sales
Output [3]: [ws_sold_date_sk#22, ws_quantity#62, ws_list_price#63]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(139) ColumnarToRow [codegen id : 6]
Input [3]: [ws_sold_date_sk#22, ws_quantity#62, ws_list_price#63]

(140) Filter [codegen id : 6]
Input [3]: [ws_sold_date_sk#22, ws_quantity#62, ws_list_price#63]
Condition : isnotnull(ws_sold_date_sk#22)

(141) ReusedExchange [Reuses operator id: 129]
Output [1]: [d_date_sk#10]

(142) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#22]
Right keys [1]: [d_date_sk#10]
Join condition: None

(143) Project [codegen id : 6]
Output [2]: [ws_quantity#62 AS quantity#98, ws_list_price#63 AS list_price#99]
Input [4]: [ws_sold_date_sk#22, ws_quantity#62, ws_list_price#63, d_date_sk#10]

(144) Union

(145) HashAggregate [codegen id : 7]
Input [2]: [quantity#94, list_price#95]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#94 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#95 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#100, count#101]
Results [2]: [sum#102, count#103]

(146) Exchange
Input [2]: [sum#102, count#103]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#104]

(147) HashAggregate [codegen id : 8]
Input [2]: [sum#102, count#103]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#94 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#95 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#94 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#95 as decimal(12,2)))), DecimalType(18,2), true))#105]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#94 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#95 as decimal(12,2)))), DecimalType(18,2), true))#105 AS average_sales#106]

Subquery:2 Hosting operator id = 98 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:3 Hosting operator id = 114 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]


