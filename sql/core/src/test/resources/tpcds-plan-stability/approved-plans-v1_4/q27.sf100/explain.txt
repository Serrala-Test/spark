== Physical Plan ==
TakeOrderedAndProject (34)
+- * HashAggregate (33)
   +- Exchange (32)
      +- * HashAggregate (31)
         +- * Expand (30)
            +- * Project (29)
               +- * BroadcastHashJoin Inner BuildRight (28)
                  :- * Project (22)
                  :  +- * BroadcastHashJoin Inner BuildRight (21)
                  :     :- * Project (15)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (14)
                  :     :     :- * Project (9)
                  :     :     :  +- * BroadcastHashJoin Inner BuildRight (8)
                  :     :     :     :- * Filter (3)
                  :     :     :     :  +- * ColumnarToRow (2)
                  :     :     :     :     +- Scan parquet default.store_sales (1)
                  :     :     :     +- BroadcastExchange (7)
                  :     :     :        +- * Filter (6)
                  :     :     :           +- * ColumnarToRow (5)
                  :     :     :              +- Scan parquet default.item (4)
                  :     :     +- BroadcastExchange (13)
                  :     :        +- * Filter (12)
                  :     :           +- * ColumnarToRow (11)
                  :     :              +- Scan parquet default.store (10)
                  :     +- BroadcastExchange (20)
                  :        +- * Project (19)
                  :           +- * Filter (18)
                  :              +- * ColumnarToRow (17)
                  :                 +- Scan parquet default.date_dim (16)
                  +- BroadcastExchange (27)
                     +- * Project (26)
                        +- * Filter (25)
                           +- * ColumnarToRow (24)
                              +- Scan parquet default.customer_demographics (23)


(1) Scan parquet default.store_sales
Output [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 5]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]

(3) Filter [codegen id : 5]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Condition : (((isnotnull(ss_cdemo_sk#3) AND isnotnull(ss_sold_date_sk#1)) AND isnotnull(ss_store_sk#4)) AND isnotnull(ss_item_sk#2))

(4) Scan parquet default.item
Output [2]: [i_item_sk#9, i_item_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [i_item_sk#9, i_item_id#10]

(6) Filter [codegen id : 1]
Input [2]: [i_item_sk#9, i_item_id#10]
Condition : isnotnull(i_item_sk#9)

(7) BroadcastExchange
Input [2]: [i_item_sk#9, i_item_id#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#11]

(8) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#9]
Join condition: None

(9) Project [codegen id : 5]
Output [8]: [ss_sold_date_sk#1, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_id#10]
Input [10]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_sk#9, i_item_id#10]

(10) Scan parquet default.store
Output [2]: [s_store_sk#12, s_state#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(11) ColumnarToRow [codegen id : 2]
Input [2]: [s_store_sk#12, s_state#13]

(12) Filter [codegen id : 2]
Input [2]: [s_store_sk#12, s_state#13]
Condition : ((isnotnull(s_state#13) AND (s_state#13 = TN)) AND isnotnull(s_store_sk#12))

(13) BroadcastExchange
Input [2]: [s_store_sk#12, s_state#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14]

(14) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [s_store_sk#12]
Join condition: None

(15) Project [codegen id : 5]
Output [8]: [ss_sold_date_sk#1, ss_cdemo_sk#3, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_id#10, s_state#13]
Input [10]: [ss_sold_date_sk#1, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_id#10, s_store_sk#12, s_state#13]

(16) Scan parquet default.date_dim
Output [2]: [d_date_sk#15, d_year#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(17) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#15, d_year#16]

(18) Filter [codegen id : 3]
Input [2]: [d_date_sk#15, d_year#16]
Condition : ((isnotnull(d_year#16) AND (d_year#16 = 2002)) AND isnotnull(d_date_sk#15))

(19) Project [codegen id : 3]
Output [1]: [d_date_sk#15]
Input [2]: [d_date_sk#15, d_year#16]

(20) BroadcastExchange
Input [1]: [d_date_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#17]

(21) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#15]
Join condition: None

(22) Project [codegen id : 5]
Output [7]: [ss_cdemo_sk#3, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_id#10, s_state#13]
Input [9]: [ss_sold_date_sk#1, ss_cdemo_sk#3, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_id#10, s_state#13, d_date_sk#15]

(23) Scan parquet default.customer_demographics
Output [4]: [cd_demo_sk#18, cd_gender#19, cd_marital_status#20, cd_education_status#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), EqualTo(cd_gender,M), EqualTo(cd_marital_status,S), EqualTo(cd_education_status,College), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>

(24) ColumnarToRow [codegen id : 4]
Input [4]: [cd_demo_sk#18, cd_gender#19, cd_marital_status#20, cd_education_status#21]

(25) Filter [codegen id : 4]
Input [4]: [cd_demo_sk#18, cd_gender#19, cd_marital_status#20, cd_education_status#21]
Condition : ((((((isnotnull(cd_gender#19) AND isnotnull(cd_marital_status#20)) AND isnotnull(cd_education_status#21)) AND (cd_gender#19 = M)) AND (cd_marital_status#20 = S)) AND (cd_education_status#21 = College)) AND isnotnull(cd_demo_sk#18))

(26) Project [codegen id : 4]
Output [1]: [cd_demo_sk#18]
Input [4]: [cd_demo_sk#18, cd_gender#19, cd_marital_status#20, cd_education_status#21]

(27) BroadcastExchange
Input [1]: [cd_demo_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22]

(28) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#18]
Join condition: None

(29) Project [codegen id : 5]
Output [6]: [ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_id#10, s_state#13]
Input [8]: [ss_cdemo_sk#3, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_id#10, s_state#13, cd_demo_sk#18]

(30) Expand [codegen id : 5]
Input [6]: [ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_id#10, s_state#13]
Arguments: [List(ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_id#10, s_state#13, 0), List(ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_id#10, null, 1), List(ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, null, null, 3)], [ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_id#23, s_state#24, spark_grouping_id#25]

(31) HashAggregate [codegen id : 5]
Input [7]: [ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_id#23, s_state#24, spark_grouping_id#25]
Keys [3]: [i_item_id#23, s_state#24, spark_grouping_id#25]
Functions [4]: [partial_avg(cast(ss_quantity#5 as bigint)), partial_avg(UnscaledValue(ss_list_price#6)), partial_avg(UnscaledValue(ss_coupon_amt#8)), partial_avg(UnscaledValue(ss_sales_price#7))]
Aggregate Attributes [8]: [sum#26, count#27, sum#28, count#29, sum#30, count#31, sum#32, count#33]
Results [11]: [i_item_id#23, s_state#24, spark_grouping_id#25, sum#34, count#35, sum#36, count#37, sum#38, count#39, sum#40, count#41]

(32) Exchange
Input [11]: [i_item_id#23, s_state#24, spark_grouping_id#25, sum#34, count#35, sum#36, count#37, sum#38, count#39, sum#40, count#41]
Arguments: hashpartitioning(i_item_id#23, s_state#24, spark_grouping_id#25, 5), ENSURE_REQUIREMENTS, [id=#42]

(33) HashAggregate [codegen id : 6]
Input [11]: [i_item_id#23, s_state#24, spark_grouping_id#25, sum#34, count#35, sum#36, count#37, sum#38, count#39, sum#40, count#41]
Keys [3]: [i_item_id#23, s_state#24, spark_grouping_id#25]
Functions [4]: [avg(cast(ss_quantity#5 as bigint)), avg(UnscaledValue(ss_list_price#6)), avg(UnscaledValue(ss_coupon_amt#8)), avg(UnscaledValue(ss_sales_price#7))]
Aggregate Attributes [4]: [avg(cast(ss_quantity#5 as bigint))#43, avg(UnscaledValue(ss_list_price#6))#44, avg(UnscaledValue(ss_coupon_amt#8))#45, avg(UnscaledValue(ss_sales_price#7))#46]
Results [7]: [i_item_id#23, s_state#24, cast((shiftright(spark_grouping_id#25, 0) & 1) as tinyint) AS g_state#47, avg(cast(ss_quantity#5 as bigint))#43 AS agg1#48, cast((avg(UnscaledValue(ss_list_price#6))#44 / 100.0) as decimal(11,6)) AS agg2#49, cast((avg(UnscaledValue(ss_coupon_amt#8))#45 / 100.0) as decimal(11,6)) AS agg3#50, cast((avg(UnscaledValue(ss_sales_price#7))#46 / 100.0) as decimal(11,6)) AS agg4#51]

(34) TakeOrderedAndProject
Input [7]: [i_item_id#23, s_state#24, g_state#47, agg1#48, agg2#49, agg3#50, agg4#51]
Arguments: 100, [i_item_id#23 ASC NULLS FIRST, s_state#24 ASC NULLS FIRST], [i_item_id#23, s_state#24, g_state#47, agg1#48, agg2#49, agg3#50, agg4#51]

