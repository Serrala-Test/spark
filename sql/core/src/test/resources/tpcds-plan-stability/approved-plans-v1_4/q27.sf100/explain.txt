== Physical Plan ==
TakeOrderedAndProject (39)
+- * HashAggregate (38)
   +- Exchange (37)
      +- * HashAggregate (36)
         +- * Expand (35)
            +- * Project (34)
               +- * BroadcastHashJoin Inner BuildRight (33)
                  :- * Project (27)
                  :  +- * BroadcastHashJoin Inner BuildRight (26)
                  :     :- * Project (20)
                  :     :  +- * SortMergeJoin Inner (19)
                  :     :     :- * Sort (12)
                  :     :     :  +- Exchange (11)
                  :     :     :     +- * Project (10)
                  :     :     :        +- * BroadcastHashJoin Inner BuildRight (9)
                  :     :     :           :- * Filter (3)
                  :     :     :           :  +- * ColumnarToRow (2)
                  :     :     :           :     +- Scan parquet default.store_sales (1)
                  :     :     :           +- BroadcastExchange (8)
                  :     :     :              +- * Project (7)
                  :     :     :                 +- * Filter (6)
                  :     :     :                    +- * ColumnarToRow (5)
                  :     :     :                       +- Scan parquet default.date_dim (4)
                  :     :     +- * Sort (18)
                  :     :        +- Exchange (17)
                  :     :           +- * Project (16)
                  :     :              +- * Filter (15)
                  :     :                 +- * ColumnarToRow (14)
                  :     :                    +- Scan parquet default.customer_demographics (13)
                  :     +- BroadcastExchange (25)
                  :        +- * Project (24)
                  :           +- * Filter (23)
                  :              +- * ColumnarToRow (22)
                  :                 +- Scan parquet default.store (21)
                  +- BroadcastExchange (32)
                     +- * Project (31)
                        +- * Filter (30)
                           +- * ColumnarToRow (29)
                              +- Scan parquet default.item (28)


(1) Scan parquet default.store_sales
Output [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]

(3) Filter [codegen id : 2]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Condition : (((isnotnull(ss_cdemo_sk#3) AND isnotnull(ss_sold_date_sk#1)) AND isnotnull(ss_store_sk#4)) AND isnotnull(ss_item_sk#2))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#9, d_year#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#10]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#10]
Condition : ((isnotnull(d_year#10) AND (d_year#10 = 2002)) AND isnotnull(d_date_sk#9))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#9]
Input [2]: [d_date_sk#9, d_year#10]

(8) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#11]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#9]
Join condition: None

(10) Project [codegen id : 2]
Output [7]: [ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Input [9]: [ss_sold_date_sk#1, ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, d_date_sk#9]

(11) Exchange
Input [7]: [ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Arguments: hashpartitioning(ss_cdemo_sk#3, 5), ENSURE_REQUIREMENTS, [id=#12]

(12) Sort [codegen id : 3]
Input [7]: [ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Arguments: [ss_cdemo_sk#3 ASC NULLS FIRST], false, 0

(13) Scan parquet default.customer_demographics
Output [4]: [cd_demo_sk#13, cd_gender#14, cd_marital_status#15, cd_education_status#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>

(14) ColumnarToRow [codegen id : 4]
Input [4]: [cd_demo_sk#13, cd_gender#14, cd_marital_status#15, cd_education_status#16]

(15) Filter [codegen id : 4]
Input [4]: [cd_demo_sk#13, cd_gender#14, cd_marital_status#15, cd_education_status#16]
Condition : ((((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_gender#14, 1, false, true) = M) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_marital_status#15, 1, false, true) = S)) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_education_status#16, 20, false, true) = College             )) AND isnotnull(cd_demo_sk#13))

(16) Project [codegen id : 4]
Output [1]: [cd_demo_sk#13]
Input [4]: [cd_demo_sk#13, cd_gender#14, cd_marital_status#15, cd_education_status#16]

(17) Exchange
Input [1]: [cd_demo_sk#13]
Arguments: hashpartitioning(cd_demo_sk#13, 5), ENSURE_REQUIREMENTS, [id=#17]

(18) Sort [codegen id : 5]
Input [1]: [cd_demo_sk#13]
Arguments: [cd_demo_sk#13 ASC NULLS FIRST], false, 0

(19) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#13]
Join condition: None

(20) Project [codegen id : 8]
Output [6]: [ss_item_sk#2, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8]
Input [8]: [ss_item_sk#2, ss_cdemo_sk#3, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, cd_demo_sk#13]

(21) Scan parquet default.store
Output [2]: [s_store_sk#18, s_state#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(22) ColumnarToRow [codegen id : 6]
Input [2]: [s_store_sk#18, s_state#19]

(23) Filter [codegen id : 6]
Input [2]: [s_store_sk#18, s_state#19]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#19, 2, false, true) = TN) AND isnotnull(s_store_sk#18))

(24) Project [codegen id : 6]
Output [2]: [s_store_sk#18, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#19, 2, false, true) AS s_state#20]
Input [2]: [s_store_sk#18, s_state#19]

(25) BroadcastExchange
Input [2]: [s_store_sk#18, s_state#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21]

(26) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [s_store_sk#18]
Join condition: None

(27) Project [codegen id : 8]
Output [6]: [ss_item_sk#2, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, s_state#20]
Input [8]: [ss_item_sk#2, ss_store_sk#4, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, s_store_sk#18, s_state#20]

(28) Scan parquet default.item
Output [2]: [i_item_sk#22, i_item_id#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(29) ColumnarToRow [codegen id : 7]
Input [2]: [i_item_sk#22, i_item_id#23]

(30) Filter [codegen id : 7]
Input [2]: [i_item_sk#22, i_item_id#23]
Condition : isnotnull(i_item_sk#22)

(31) Project [codegen id : 7]
Output [2]: [i_item_sk#22, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_item_id#23, 16, false, true) AS i_item_id#24]
Input [2]: [i_item_sk#22, i_item_id#23]

(32) BroadcastExchange
Input [2]: [i_item_sk#22, i_item_id#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#25]

(33) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#22]
Join condition: None

(34) Project [codegen id : 8]
Output [6]: [ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_id#24 AS i_item_id#26, s_state#20 AS s_state#27]
Input [8]: [ss_item_sk#2, ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, s_state#20, i_item_sk#22, i_item_id#24]

(35) Expand [codegen id : 8]
Input [6]: [ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_id#26, s_state#27]
Arguments: [List(ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_id#26, s_state#27, 0), List(ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_id#26, null, 1), List(ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, null, null, 3)], [ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_id#28, s_state#29, spark_grouping_id#30]

(36) HashAggregate [codegen id : 8]
Input [7]: [ss_quantity#5, ss_list_price#6, ss_sales_price#7, ss_coupon_amt#8, i_item_id#28, s_state#29, spark_grouping_id#30]
Keys [3]: [i_item_id#28, s_state#29, spark_grouping_id#30]
Functions [4]: [partial_avg(cast(ss_quantity#5 as bigint)), partial_avg(UnscaledValue(ss_list_price#6)), partial_avg(UnscaledValue(ss_coupon_amt#8)), partial_avg(UnscaledValue(ss_sales_price#7))]
Aggregate Attributes [8]: [sum#31, count#32, sum#33, count#34, sum#35, count#36, sum#37, count#38]
Results [11]: [i_item_id#28, s_state#29, spark_grouping_id#30, sum#39, count#40, sum#41, count#42, sum#43, count#44, sum#45, count#46]

(37) Exchange
Input [11]: [i_item_id#28, s_state#29, spark_grouping_id#30, sum#39, count#40, sum#41, count#42, sum#43, count#44, sum#45, count#46]
Arguments: hashpartitioning(i_item_id#28, s_state#29, spark_grouping_id#30, 5), ENSURE_REQUIREMENTS, [id=#47]

(38) HashAggregate [codegen id : 9]
Input [11]: [i_item_id#28, s_state#29, spark_grouping_id#30, sum#39, count#40, sum#41, count#42, sum#43, count#44, sum#45, count#46]
Keys [3]: [i_item_id#28, s_state#29, spark_grouping_id#30]
Functions [4]: [avg(cast(ss_quantity#5 as bigint)), avg(UnscaledValue(ss_list_price#6)), avg(UnscaledValue(ss_coupon_amt#8)), avg(UnscaledValue(ss_sales_price#7))]
Aggregate Attributes [4]: [avg(cast(ss_quantity#5 as bigint))#48, avg(UnscaledValue(ss_list_price#6))#49, avg(UnscaledValue(ss_coupon_amt#8))#50, avg(UnscaledValue(ss_sales_price#7))#51]
Results [7]: [i_item_id#28, s_state#29, cast((shiftright(spark_grouping_id#30, 0) & 1) as tinyint) AS g_state#52, avg(cast(ss_quantity#5 as bigint))#48 AS agg1#53, cast((avg(UnscaledValue(ss_list_price#6))#49 / 100.0) as decimal(11,6)) AS agg2#54, cast((avg(UnscaledValue(ss_coupon_amt#8))#50 / 100.0) as decimal(11,6)) AS agg3#55, cast((avg(UnscaledValue(ss_sales_price#7))#51 / 100.0) as decimal(11,6)) AS agg4#56]

(39) TakeOrderedAndProject
Input [7]: [i_item_id#28, s_state#29, g_state#52, agg1#53, agg2#54, agg3#55, agg4#56]
Arguments: 100, [i_item_id#28 ASC NULLS FIRST, s_state#29 ASC NULLS FIRST], [i_item_id#28, s_state#29, g_state#52, agg1#53, agg2#54, agg3#55, agg4#56]

