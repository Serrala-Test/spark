== Physical Plan ==
* HashAggregate (27)
+- Exchange (26)
   +- * HashAggregate (25)
      +- * Project (24)
         +- * BroadcastHashJoin Inner BuildRight (23)
            :- * Project (21)
            :  +- * BroadcastHashJoin Inner BuildRight (20)
            :     :- * Project (14)
            :     :  +- * BroadcastHashJoin Inner BuildRight (13)
            :     :     :- * Project (8)
            :     :     :  +- * BroadcastHashJoin Inner BuildRight (7)
            :     :     :     :- * Filter (3)
            :     :     :     :  +- * ColumnarToRow (2)
            :     :     :     :     +- Scan parquet default.store_sales (1)
            :     :     :     +- BroadcastExchange (6)
            :     :     :        +- * ColumnarToRow (5)
            :     :     :           +- Scan parquet default.store (4)
            :     :     +- BroadcastExchange (12)
            :     :        +- * Filter (11)
            :     :           +- * ColumnarToRow (10)
            :     :              +- Scan parquet default.customer_demographics (9)
            :     +- BroadcastExchange (19)
            :        +- * Project (18)
            :           +- * Filter (17)
            :              +- * ColumnarToRow (16)
            :                 +- Scan parquet default.customer_address (15)
            +- ReusedExchange (22)


(1) Scan parquet default.store_sales
Output [7]: [ss_cdemo_sk#1, ss_addr_sk#2, ss_store_sk#3, ss_quantity#4, ss_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_cdemo_sk), IsNotNull(ss_addr_sk), Or(Or(And(GreaterThanOrEqual(ss_sales_price,100.00),LessThanOrEqual(ss_sales_price,150.00)),And(GreaterThanOrEqual(ss_sales_price,50.00),LessThanOrEqual(ss_sales_price,100.00))),And(GreaterThanOrEqual(ss_sales_price,150.00),LessThanOrEqual(ss_sales_price,200.00))), Or(Or(And(GreaterThanOrEqual(ss_net_profit,0.00),LessThanOrEqual(ss_net_profit,2000.00)),And(GreaterThanOrEqual(ss_net_profit,150.00),LessThanOrEqual(ss_net_profit,3000.00))),And(GreaterThanOrEqual(ss_net_profit,50.00),LessThanOrEqual(ss_net_profit,25000.00)))]
ReadSchema: struct<ss_cdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 5]
Input [7]: [ss_cdemo_sk#1, ss_addr_sk#2, ss_store_sk#3, ss_quantity#4, ss_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]

(3) Filter [codegen id : 5]
Input [7]: [ss_cdemo_sk#1, ss_addr_sk#2, ss_store_sk#3, ss_quantity#4, ss_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Condition : ((((isnotnull(ss_store_sk#3) AND isnotnull(ss_cdemo_sk#1)) AND isnotnull(ss_addr_sk#2)) AND ((((ss_sales_price#5 >= 100.00) AND (ss_sales_price#5 <= 150.00)) OR ((ss_sales_price#5 >= 50.00) AND (ss_sales_price#5 <= 100.00))) OR ((ss_sales_price#5 >= 150.00) AND (ss_sales_price#5 <= 200.00)))) AND ((((ss_net_profit#6 >= 0.00) AND (ss_net_profit#6 <= 2000.00)) OR ((ss_net_profit#6 >= 150.00) AND (ss_net_profit#6 <= 3000.00))) OR ((ss_net_profit#6 >= 50.00) AND (ss_net_profit#6 <= 25000.00))))

(4) Scan parquet default.store
Output [1]: [s_store_sk#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
ReadSchema: struct<s_store_sk:int>

(5) ColumnarToRow [codegen id : 1]
Input [1]: [s_store_sk#9]

(6) BroadcastExchange
Input [1]: [s_store_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#10]

(7) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#9]
Join condition: None

(8) Project [codegen id : 5]
Output [6]: [ss_cdemo_sk#1, ss_addr_sk#2, ss_quantity#4, ss_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Input [8]: [ss_cdemo_sk#1, ss_addr_sk#2, ss_store_sk#3, ss_quantity#4, ss_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, s_store_sk#9]

(9) Scan parquet default.customer_demographics
Output [3]: [cd_demo_sk#11, cd_marital_status#12, cd_education_status#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [Or(Or(And(EqualTo(cd_marital_status,M),EqualTo(cd_education_status,4 yr Degree         )),And(EqualTo(cd_marital_status,D),EqualTo(cd_education_status,2 yr Degree         ))),And(EqualTo(cd_marital_status,S),EqualTo(cd_education_status,College             )))]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(10) ColumnarToRow [codegen id : 2]
Input [3]: [cd_demo_sk#11, cd_marital_status#12, cd_education_status#13]

(11) Filter [codegen id : 2]
Input [3]: [cd_demo_sk#11, cd_marital_status#12, cd_education_status#13]
Condition : ((((cd_marital_status#12 = M) AND (cd_education_status#13 = 4 yr Degree         )) OR ((cd_marital_status#12 = D) AND (cd_education_status#13 = 2 yr Degree         ))) OR ((cd_marital_status#12 = S) AND (cd_education_status#13 = College             )))

(12) BroadcastExchange
Input [3]: [cd_demo_sk#11, cd_marital_status#12, cd_education_status#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14]

(13) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_cdemo_sk#1]
Right keys [1]: [cd_demo_sk#11]
Join condition: ((((((cd_marital_status#12 = M) AND (cd_education_status#13 = 4 yr Degree         )) AND (ss_sales_price#5 >= 100.00)) AND (ss_sales_price#5 <= 150.00)) OR ((((cd_marital_status#12 = D) AND (cd_education_status#13 = 2 yr Degree         )) AND (ss_sales_price#5 >= 50.00)) AND (ss_sales_price#5 <= 100.00))) OR ((((cd_marital_status#12 = S) AND (cd_education_status#13 = College             )) AND (ss_sales_price#5 >= 150.00)) AND (ss_sales_price#5 <= 200.00)))

(14) Project [codegen id : 5]
Output [4]: [ss_addr_sk#2, ss_quantity#4, ss_net_profit#6, ss_sold_date_sk#7]
Input [9]: [ss_cdemo_sk#1, ss_addr_sk#2, ss_quantity#4, ss_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, cd_demo_sk#11, cd_marital_status#12, cd_education_status#13]

(15) Scan parquet default.customer_address
Output [3]: [ca_address_sk#15, ca_state#16, ca_country#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), Or(Or(In(ca_state, [CO,OH,TX]),In(ca_state, [KY,MN,OR])),In(ca_state, [CA,MS,VA]))]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(16) ColumnarToRow [codegen id : 3]
Input [3]: [ca_address_sk#15, ca_state#16, ca_country#17]

(17) Filter [codegen id : 3]
Input [3]: [ca_address_sk#15, ca_state#16, ca_country#17]
Condition : ((isnotnull(ca_country#17) AND (ca_country#17 = United States)) AND ((ca_state#16 IN (CO,OH,TX) OR ca_state#16 IN (OR,MN,KY)) OR ca_state#16 IN (VA,CA,MS)))

(18) Project [codegen id : 3]
Output [2]: [ca_address_sk#15, ca_state#16]
Input [3]: [ca_address_sk#15, ca_state#16, ca_country#17]

(19) BroadcastExchange
Input [2]: [ca_address_sk#15, ca_state#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#18]

(20) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_addr_sk#2]
Right keys [1]: [ca_address_sk#15]
Join condition: ((((ca_state#16 IN (CO,OH,TX) AND (ss_net_profit#6 >= 0.00)) AND (ss_net_profit#6 <= 2000.00)) OR ((ca_state#16 IN (OR,MN,KY) AND (ss_net_profit#6 >= 150.00)) AND (ss_net_profit#6 <= 3000.00))) OR ((ca_state#16 IN (VA,CA,MS) AND (ss_net_profit#6 >= 50.00)) AND (ss_net_profit#6 <= 25000.00)))

(21) Project [codegen id : 5]
Output [2]: [ss_quantity#4, ss_sold_date_sk#7]
Input [6]: [ss_addr_sk#2, ss_quantity#4, ss_net_profit#6, ss_sold_date_sk#7, ca_address_sk#15, ca_state#16]

(22) ReusedExchange [Reuses operator id: 32]
Output [1]: [d_date_sk#19]

(23) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#19]
Join condition: None

(24) Project [codegen id : 5]
Output [1]: [ss_quantity#4]
Input [3]: [ss_quantity#4, ss_sold_date_sk#7, d_date_sk#19]

(25) HashAggregate [codegen id : 5]
Input [1]: [ss_quantity#4]
Keys: []
Functions [1]: [partial_sum(ss_quantity#4)]
Aggregate Attributes [1]: [sum#20]
Results [1]: [sum#21]

(26) Exchange
Input [1]: [sum#21]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#22]

(27) HashAggregate [codegen id : 6]
Input [1]: [sum#21]
Keys: []
Functions [1]: [sum(ss_quantity#4)]
Aggregate Attributes [1]: [sum(ss_quantity#4)#23]
Results [1]: [sum(ss_quantity#4)#23 AS sum(ss_quantity)#24]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (32)
+- * Project (31)
   +- * Filter (30)
      +- * ColumnarToRow (29)
         +- Scan parquet default.date_dim (28)


(28) Scan parquet default.date_dim
Output [2]: [d_date_sk#19, d_year#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [EqualTo(d_year,2001)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(29) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#19, d_year#25]

(30) Filter [codegen id : 1]
Input [2]: [d_date_sk#19, d_year#25]
Condition : (d_year#25 = 2001)

(31) Project [codegen id : 1]
Output [1]: [d_date_sk#19]
Input [2]: [d_date_sk#19, d_year#25]

(32) BroadcastExchange
Input [1]: [d_date_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#26]


