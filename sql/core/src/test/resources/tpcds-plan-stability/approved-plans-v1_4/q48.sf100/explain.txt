== Physical Plan ==
* HashAggregate (39)
+- Exchange (38)
   +- * HashAggregate (37)
      +- * Project (36)
         +- * SortMergeJoin Inner (35)
            :- * Sort (28)
            :  +- Exchange (27)
            :     +- * Project (26)
            :        +- * SortMergeJoin Inner (25)
            :           :- * Sort (18)
            :           :  +- Exchange (17)
            :           :     +- * Project (16)
            :           :        +- * BroadcastHashJoin Inner BuildRight (15)
            :           :           :- * Project (9)
            :           :           :  +- * BroadcastHashJoin Inner BuildRight (8)
            :           :           :     :- * Filter (3)
            :           :           :     :  +- * ColumnarToRow (2)
            :           :           :     :     +- Scan parquet default.store_sales (1)
            :           :           :     +- BroadcastExchange (7)
            :           :           :        +- * Filter (6)
            :           :           :           +- * ColumnarToRow (5)
            :           :           :              +- Scan parquet default.store (4)
            :           :           +- BroadcastExchange (14)
            :           :              +- * Project (13)
            :           :                 +- * Filter (12)
            :           :                    +- * ColumnarToRow (11)
            :           :                       +- Scan parquet default.date_dim (10)
            :           +- * Sort (24)
            :              +- Exchange (23)
            :                 +- * Project (22)
            :                    +- * Filter (21)
            :                       +- * ColumnarToRow (20)
            :                          +- Scan parquet default.customer_demographics (19)
            +- * Sort (34)
               +- Exchange (33)
                  +- * Project (32)
                     +- * Filter (31)
                        +- * ColumnarToRow (30)
                           +- Scan parquet default.customer_address (29)


(1) Scan parquet default.store_sales
Output [7]: [ss_sold_date_sk#1, ss_cdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_quantity#5, ss_sales_price#6, ss_net_profit#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_cdemo_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_sold_date_sk), Or(Or(And(GreaterThanOrEqual(ss_sales_price,100.00),LessThanOrEqual(ss_sales_price,150.00)),And(GreaterThanOrEqual(ss_sales_price,50.00),LessThanOrEqual(ss_sales_price,100.00))),And(GreaterThanOrEqual(ss_sales_price,150.00),LessThanOrEqual(ss_sales_price,200.00))), Or(Or(And(GreaterThanOrEqual(ss_net_profit,0.00),LessThanOrEqual(ss_net_profit,2000.00)),And(GreaterThanOrEqual(ss_net_profit,150.00),LessThanOrEqual(ss_net_profit,3000.00))),And(GreaterThanOrEqual(ss_net_profit,50.00),LessThanOrEqual(ss_net_profit,25000.00)))]
ReadSchema: struct<ss_sold_date_sk:int,ss_cdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [7]: [ss_sold_date_sk#1, ss_cdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_quantity#5, ss_sales_price#6, ss_net_profit#7]

(3) Filter [codegen id : 3]
Input [7]: [ss_sold_date_sk#1, ss_cdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_quantity#5, ss_sales_price#6, ss_net_profit#7]
Condition : (((((isnotnull(ss_store_sk#4) AND isnotnull(ss_cdemo_sk#2)) AND isnotnull(ss_addr_sk#3)) AND isnotnull(ss_sold_date_sk#1)) AND ((((ss_sales_price#6 >= 100.00) AND (ss_sales_price#6 <= 150.00)) OR ((ss_sales_price#6 >= 50.00) AND (ss_sales_price#6 <= 100.00))) OR ((ss_sales_price#6 >= 150.00) AND (ss_sales_price#6 <= 200.00)))) AND ((((ss_net_profit#7 >= 0.00) AND (ss_net_profit#7 <= 2000.00)) OR ((ss_net_profit#7 >= 150.00) AND (ss_net_profit#7 <= 3000.00))) OR ((ss_net_profit#7 >= 50.00) AND (ss_net_profit#7 <= 25000.00))))

(4) Scan parquet default.store
Output [1]: [s_store_sk#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int>

(5) ColumnarToRow [codegen id : 1]
Input [1]: [s_store_sk#8]

(6) Filter [codegen id : 1]
Input [1]: [s_store_sk#8]
Condition : isnotnull(s_store_sk#8)

(7) BroadcastExchange
Input [1]: [s_store_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [s_store_sk#8]
Join condition: None

(9) Project [codegen id : 3]
Output [6]: [ss_sold_date_sk#1, ss_cdemo_sk#2, ss_addr_sk#3, ss_quantity#5, ss_sales_price#6, ss_net_profit#7]
Input [8]: [ss_sold_date_sk#1, ss_cdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_quantity#5, ss_sales_price#6, ss_net_profit#7, s_store_sk#8]

(10) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(11) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#10, d_year#11]

(12) Filter [codegen id : 2]
Input [2]: [d_date_sk#10, d_year#11]
Condition : ((isnotnull(d_year#11) AND (d_year#11 = 2001)) AND isnotnull(d_date_sk#10))

(13) Project [codegen id : 2]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(14) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(16) Project [codegen id : 3]
Output [5]: [ss_cdemo_sk#2, ss_addr_sk#3, ss_quantity#5, ss_sales_price#6, ss_net_profit#7]
Input [7]: [ss_sold_date_sk#1, ss_cdemo_sk#2, ss_addr_sk#3, ss_quantity#5, ss_sales_price#6, ss_net_profit#7, d_date_sk#10]

(17) Exchange
Input [5]: [ss_cdemo_sk#2, ss_addr_sk#3, ss_quantity#5, ss_sales_price#6, ss_net_profit#7]
Arguments: hashpartitioning(ss_cdemo_sk#2, 5), ENSURE_REQUIREMENTS, [id=#13]

(18) Sort [codegen id : 4]
Input [5]: [ss_cdemo_sk#2, ss_addr_sk#3, ss_quantity#5, ss_sales_price#6, ss_net_profit#7]
Arguments: [ss_cdemo_sk#2 ASC NULLS FIRST], false, 0

(19) Scan parquet default.customer_demographics
Output [3]: [cd_demo_sk#14, cd_marital_status#15, cd_education_status#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(20) ColumnarToRow [codegen id : 5]
Input [3]: [cd_demo_sk#14, cd_marital_status#15, cd_education_status#16]

(21) Filter [codegen id : 5]
Input [3]: [cd_demo_sk#14, cd_marital_status#15, cd_education_status#16]
Condition : (isnotnull(cd_demo_sk#14) AND ((((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_marital_status#15, 1, false, true) = M) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_education_status#16, 20, false, true) = 4 yr Degree         )) OR ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_marital_status#15, 1, false, true) = D) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_education_status#16, 20, false, true) = 2 yr Degree         ))) OR ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_marital_status#15, 1, false, true) = S) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_education_status#16, 20, false, true) = College             ))))

(22) Project [codegen id : 5]
Output [3]: [cd_demo_sk#14, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_marital_status#15, 1, false, true) AS cd_marital_status#17, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_education_status#16, 20, false, true) AS cd_education_status#18]
Input [3]: [cd_demo_sk#14, cd_marital_status#15, cd_education_status#16]

(23) Exchange
Input [3]: [cd_demo_sk#14, cd_marital_status#17, cd_education_status#18]
Arguments: hashpartitioning(cd_demo_sk#14, 5), ENSURE_REQUIREMENTS, [id=#19]

(24) Sort [codegen id : 6]
Input [3]: [cd_demo_sk#14, cd_marital_status#17, cd_education_status#18]
Arguments: [cd_demo_sk#14 ASC NULLS FIRST], false, 0

(25) SortMergeJoin [codegen id : 7]
Left keys [1]: [ss_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#14]
Join condition: ((((((cd_marital_status#17 = M) AND (cd_education_status#18 = 4 yr Degree         )) AND (ss_sales_price#6 >= 100.00)) AND (ss_sales_price#6 <= 150.00)) OR ((((cd_marital_status#17 = D) AND (cd_education_status#18 = 2 yr Degree         )) AND (ss_sales_price#6 >= 50.00)) AND (ss_sales_price#6 <= 100.00))) OR ((((cd_marital_status#17 = S) AND (cd_education_status#18 = College             )) AND (ss_sales_price#6 >= 150.00)) AND (ss_sales_price#6 <= 200.00)))

(26) Project [codegen id : 7]
Output [3]: [ss_addr_sk#3, ss_quantity#5, ss_net_profit#7]
Input [8]: [ss_cdemo_sk#2, ss_addr_sk#3, ss_quantity#5, ss_sales_price#6, ss_net_profit#7, cd_demo_sk#14, cd_marital_status#17, cd_education_status#18]

(27) Exchange
Input [3]: [ss_addr_sk#3, ss_quantity#5, ss_net_profit#7]
Arguments: hashpartitioning(ss_addr_sk#3, 5), ENSURE_REQUIREMENTS, [id=#20]

(28) Sort [codegen id : 8]
Input [3]: [ss_addr_sk#3, ss_quantity#5, ss_net_profit#7]
Arguments: [ss_addr_sk#3 ASC NULLS FIRST], false, 0

(29) Scan parquet default.customer_address
Output [3]: [ca_address_sk#21, ca_state#22, ca_country#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(30) ColumnarToRow [codegen id : 9]
Input [3]: [ca_address_sk#21, ca_state#22, ca_country#23]

(31) Filter [codegen id : 9]
Input [3]: [ca_address_sk#21, ca_state#22, ca_country#23]
Condition : (((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_country#23, 20, false, true) = United States) AND isnotnull(ca_address_sk#21)) AND ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#22, 2, false, true) IN (CO,OH,TX) OR staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#22, 2, false, true) IN (OR,MN,KY)) OR staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#22, 2, false, true) IN (VA,CA,MS)))

(32) Project [codegen id : 9]
Output [2]: [ca_address_sk#21, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#22, 2, false, true) AS ca_state#24]
Input [3]: [ca_address_sk#21, ca_state#22, ca_country#23]

(33) Exchange
Input [2]: [ca_address_sk#21, ca_state#24]
Arguments: hashpartitioning(ca_address_sk#21, 5), ENSURE_REQUIREMENTS, [id=#25]

(34) Sort [codegen id : 10]
Input [2]: [ca_address_sk#21, ca_state#24]
Arguments: [ca_address_sk#21 ASC NULLS FIRST], false, 0

(35) SortMergeJoin [codegen id : 11]
Left keys [1]: [ss_addr_sk#3]
Right keys [1]: [ca_address_sk#21]
Join condition: ((((ca_state#24 IN (CO,OH,TX) AND (ss_net_profit#7 >= 0.00)) AND (ss_net_profit#7 <= 2000.00)) OR ((ca_state#24 IN (OR,MN,KY) AND (ss_net_profit#7 >= 150.00)) AND (ss_net_profit#7 <= 3000.00))) OR ((ca_state#24 IN (VA,CA,MS) AND (ss_net_profit#7 >= 50.00)) AND (ss_net_profit#7 <= 25000.00)))

(36) Project [codegen id : 11]
Output [1]: [ss_quantity#5]
Input [5]: [ss_addr_sk#3, ss_quantity#5, ss_net_profit#7, ca_address_sk#21, ca_state#24]

(37) HashAggregate [codegen id : 11]
Input [1]: [ss_quantity#5]
Keys: []
Functions [1]: [partial_sum(cast(ss_quantity#5 as bigint))]
Aggregate Attributes [1]: [sum#26]
Results [1]: [sum#27]

(38) Exchange
Input [1]: [sum#27]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#28]

(39) HashAggregate [codegen id : 12]
Input [1]: [sum#27]
Keys: []
Functions [1]: [sum(cast(ss_quantity#5 as bigint))]
Aggregate Attributes [1]: [sum(cast(ss_quantity#5 as bigint))#29]
Results [1]: [sum(cast(ss_quantity#5 as bigint))#29 AS sum(ss_quantity)#30]

