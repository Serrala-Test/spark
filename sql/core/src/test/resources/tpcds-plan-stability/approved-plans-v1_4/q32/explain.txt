== Physical Plan ==
CollectLimit (27)
+- * Project (26)
   +- * BroadcastHashJoin Inner BuildRight (25)
      :- * Project (23)
      :  +- * BroadcastHashJoin Inner BuildRight (22)
      :     :- * Project (10)
      :     :  +- * BroadcastHashJoin Inner BuildRight (9)
      :     :     :- * Filter (3)
      :     :     :  +- * ColumnarToRow (2)
      :     :     :     +- Scan parquet default.catalog_sales (1)
      :     :     +- BroadcastExchange (8)
      :     :        +- * Project (7)
      :     :           +- * Filter (6)
      :     :              +- * ColumnarToRow (5)
      :     :                 +- Scan parquet default.item (4)
      :     +- BroadcastExchange (21)
      :        +- * Filter (20)
      :           +- * HashAggregate (19)
      :              +- Exchange (18)
      :                 +- * HashAggregate (17)
      :                    +- * Project (16)
      :                       +- * BroadcastHashJoin Inner BuildRight (15)
      :                          :- * Filter (13)
      :                          :  +- * ColumnarToRow (12)
      :                          :     +- Scan parquet default.catalog_sales (11)
      :                          +- ReusedExchange (14)
      +- ReusedExchange (24)


(1) Scan parquet default.catalog_sales
Output [3]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#3), dynamicpruningexpression(cs_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_ext_discount_amt)]
ReadSchema: struct<cs_item_sk:int,cs_ext_discount_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 6]
Input [3]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3]

(3) Filter [codegen id : 6]
Input [3]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3]
Condition : (isnotnull(cs_item_sk#1) AND isnotnull(cs_ext_discount_amt#2))

(4) Scan parquet default.item
Output [2]: [i_item_sk#5, i_manufact_id#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,977), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_manufact_id:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [i_item_sk#5, i_manufact_id#6]

(6) Filter [codegen id : 1]
Input [2]: [i_item_sk#5, i_manufact_id#6]
Condition : ((isnotnull(i_manufact_id#6) AND (i_manufact_id#6 = 977)) AND isnotnull(i_item_sk#5))

(7) Project [codegen id : 1]
Output [1]: [i_item_sk#5]
Input [2]: [i_item_sk#5, i_manufact_id#6]

(8) BroadcastExchange
Input [1]: [i_item_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#7]

(9) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_item_sk#1]
Right keys [1]: [i_item_sk#5]
Join condition: None

(10) Project [codegen id : 6]
Output [3]: [cs_sold_date_sk#3, i_item_sk#5, cast(cs_ext_discount_amt#2 as decimal(14,7)) AS CAST(spark_catalog.default.catalog_sales.cs_ext_discount_amt AS DECIMAL(14,7))#8]
Input [4]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3, i_item_sk#5]

(11) Scan parquet default.catalog_sales
Output [3]: [cs_item_sk#9, cs_ext_discount_amt#10, cs_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#11), dynamicpruningexpression(cs_sold_date_sk#11 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_ext_discount_amt:decimal(7,2)>

(12) ColumnarToRow [codegen id : 3]
Input [3]: [cs_item_sk#9, cs_ext_discount_amt#10, cs_sold_date_sk#11]

(13) Filter [codegen id : 3]
Input [3]: [cs_item_sk#9, cs_ext_discount_amt#10, cs_sold_date_sk#11]
Condition : isnotnull(cs_item_sk#9)

(14) ReusedExchange [Reuses operator id: 32]
Output [1]: [d_date_sk#12]

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#11]
Right keys [1]: [d_date_sk#12]
Join condition: None

(16) Project [codegen id : 3]
Output [2]: [cs_item_sk#9, cs_ext_discount_amt#10]
Input [4]: [cs_item_sk#9, cs_ext_discount_amt#10, cs_sold_date_sk#11, d_date_sk#12]

(17) HashAggregate [codegen id : 3]
Input [2]: [cs_item_sk#9, cs_ext_discount_amt#10]
Keys [1]: [cs_item_sk#9]
Functions [1]: [partial_avg(UnscaledValue(cs_ext_discount_amt#10))]
Aggregate Attributes [2]: [sum#13, count#14]
Results [3]: [cs_item_sk#9, sum#15, count#16]

(18) Exchange
Input [3]: [cs_item_sk#9, sum#15, count#16]
Arguments: hashpartitioning(cs_item_sk#9, 5), ENSURE_REQUIREMENTS, [id=#17]

(19) HashAggregate [codegen id : 4]
Input [3]: [cs_item_sk#9, sum#15, count#16]
Keys [1]: [cs_item_sk#9]
Functions [1]: [avg(UnscaledValue(cs_ext_discount_amt#10))]
Aggregate Attributes [1]: [avg(UnscaledValue(cs_ext_discount_amt#10))#18]
Results [2]: [CheckOverflow((1.300000 * promote_precision(cast((avg(UnscaledValue(cs_ext_discount_amt#10))#18 / 100.0) as decimal(11,6)))), DecimalType(14,7), true) AS (1.3 * avg(cs_ext_discount_amt))#19, cs_item_sk#9]

(20) Filter [codegen id : 4]
Input [2]: [(1.3 * avg(cs_ext_discount_amt))#19, cs_item_sk#9]
Condition : isnotnull((1.3 * avg(cs_ext_discount_amt))#19)

(21) BroadcastExchange
Input [2]: [(1.3 * avg(cs_ext_discount_amt))#19, cs_item_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#20]

(22) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [i_item_sk#5]
Right keys [1]: [cs_item_sk#9]
Join condition: (CAST(spark_catalog.default.catalog_sales.cs_ext_discount_amt AS DECIMAL(14,7))#8 > (1.3 * avg(cs_ext_discount_amt))#19)

(23) Project [codegen id : 6]
Output [1]: [cs_sold_date_sk#3]
Input [5]: [cs_sold_date_sk#3, i_item_sk#5, CAST(spark_catalog.default.catalog_sales.cs_ext_discount_amt AS DECIMAL(14,7))#8, (1.3 * avg(cs_ext_discount_amt))#19, cs_item_sk#9]

(24) ReusedExchange [Reuses operator id: 32]
Output [1]: [d_date_sk#21]

(25) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#3]
Right keys [1]: [d_date_sk#21]
Join condition: None

(26) Project [codegen id : 6]
Output [1]: [1 AS excess discount amount #22]
Input [2]: [cs_sold_date_sk#3, d_date_sk#21]

(27) CollectLimit
Input [1]: [excess discount amount #22]
Arguments: 100

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (32)
+- * Project (31)
   +- * Filter (30)
      +- * ColumnarToRow (29)
         +- Scan parquet default.date_dim (28)


(28) Scan parquet default.date_dim
Output [2]: [d_date_sk#21, d_date#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-01-27), LessThanOrEqual(d_date,2000-04-26), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(29) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#21, d_date#23]

(30) Filter [codegen id : 1]
Input [2]: [d_date_sk#21, d_date#23]
Condition : (((isnotnull(d_date#23) AND (d_date#23 >= 2000-01-27)) AND (d_date#23 <= 2000-04-26)) AND isnotnull(d_date_sk#21))

(31) Project [codegen id : 1]
Output [1]: [d_date_sk#21]
Input [2]: [d_date_sk#21, d_date#23]

(32) BroadcastExchange
Input [1]: [d_date_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#24]

Subquery:2 Hosting operator id = 11 Hosting Expression = cs_sold_date_sk#11 IN dynamicpruning#4


