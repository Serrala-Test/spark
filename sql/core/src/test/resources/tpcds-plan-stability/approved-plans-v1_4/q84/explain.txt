== Physical Plan ==
TakeOrderedAndProject (37)
+- * Project (36)
   +- * BroadcastHashJoin Inner BuildRight (35)
      :- * Project (30)
      :  +- * BroadcastHashJoin Inner BuildRight (29)
      :     :- * Project (23)
      :     :  +- * BroadcastHashJoin Inner BuildRight (22)
      :     :     :- * Project (17)
      :     :     :  +- * BroadcastHashJoin Inner BuildRight (16)
      :     :     :     :- * Project (11)
      :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (10)
      :     :     :     :     :- * Project (4)
      :     :     :     :     :  +- * Filter (3)
      :     :     :     :     :     +- * ColumnarToRow (2)
      :     :     :     :     :        +- Scan parquet default.customer (1)
      :     :     :     :     +- BroadcastExchange (9)
      :     :     :     :        +- * Project (8)
      :     :     :     :           +- * Filter (7)
      :     :     :     :              +- * ColumnarToRow (6)
      :     :     :     :                 +- Scan parquet default.customer_address (5)
      :     :     :     +- BroadcastExchange (15)
      :     :     :        +- * Filter (14)
      :     :     :           +- * ColumnarToRow (13)
      :     :     :              +- Scan parquet default.customer_demographics (12)
      :     :     +- BroadcastExchange (21)
      :     :        +- * Filter (20)
      :     :           +- * ColumnarToRow (19)
      :     :              +- Scan parquet default.household_demographics (18)
      :     +- BroadcastExchange (28)
      :        +- * Project (27)
      :           +- * Filter (26)
      :              +- * ColumnarToRow (25)
      :                 +- Scan parquet default.income_band (24)
      +- BroadcastExchange (34)
         +- * Filter (33)
            +- * ColumnarToRow (32)
               +- Scan parquet default.store_returns (31)


(1) Scan parquet default.customer
Output [6]: [c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, c_first_name#5, c_last_name#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_hdemo_sk)]
ReadSchema: struct<c_customer_id:string,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string>

(2) ColumnarToRow [codegen id : 6]
Input [6]: [c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, c_first_name#5, c_last_name#6]

(3) Filter [codegen id : 6]
Input [6]: [c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, c_first_name#5, c_last_name#6]
Condition : ((isnotnull(c_current_addr_sk#4) AND isnotnull(c_current_cdemo_sk#2)) AND isnotnull(c_current_hdemo_sk#3))

(4) Project [codegen id : 6]
Output [6]: [staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#1, 16, false, true) AS c_customer_id#7, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#5, 20, false, true) AS c_first_name#8, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#6, 30, false, true) AS c_last_name#9]
Input [6]: [c_customer_id#1, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, c_first_name#5, c_last_name#6]

(5) Scan parquet default.customer_address
Output [2]: [ca_address_sk#10, ca_city#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_city:string>

(6) ColumnarToRow [codegen id : 1]
Input [2]: [ca_address_sk#10, ca_city#11]

(7) Filter [codegen id : 1]
Input [2]: [ca_address_sk#10, ca_city#11]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_city#11, 60, false, true) = Edgewood) AND isnotnull(ca_address_sk#10))

(8) Project [codegen id : 1]
Output [1]: [ca_address_sk#10]
Input [2]: [ca_address_sk#10, ca_city#11]

(9) BroadcastExchange
Input [1]: [ca_address_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(10) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [c_current_addr_sk#4]
Right keys [1]: [ca_address_sk#10]
Join condition: None

(11) Project [codegen id : 6]
Output [5]: [c_customer_id#7, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_first_name#8, c_last_name#9]
Input [7]: [c_customer_id#7, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_current_addr_sk#4, c_first_name#8, c_last_name#9, ca_address_sk#10]

(12) Scan parquet default.customer_demographics
Output [1]: [cd_demo_sk#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int>

(13) ColumnarToRow [codegen id : 2]
Input [1]: [cd_demo_sk#13]

(14) Filter [codegen id : 2]
Input [1]: [cd_demo_sk#13]
Condition : isnotnull(cd_demo_sk#13)

(15) BroadcastExchange
Input [1]: [cd_demo_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14]

(16) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [c_current_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#13]
Join condition: None

(17) Project [codegen id : 6]
Output [5]: [c_customer_id#7, c_current_hdemo_sk#3, c_first_name#8, c_last_name#9, cd_demo_sk#13]
Input [6]: [c_customer_id#7, c_current_cdemo_sk#2, c_current_hdemo_sk#3, c_first_name#8, c_last_name#9, cd_demo_sk#13]

(18) Scan parquet default.household_demographics
Output [2]: [hd_demo_sk#15, hd_income_band_sk#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_demo_sk), IsNotNull(hd_income_band_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_income_band_sk:int>

(19) ColumnarToRow [codegen id : 3]
Input [2]: [hd_demo_sk#15, hd_income_band_sk#16]

(20) Filter [codegen id : 3]
Input [2]: [hd_demo_sk#15, hd_income_band_sk#16]
Condition : (isnotnull(hd_demo_sk#15) AND isnotnull(hd_income_band_sk#16))

(21) BroadcastExchange
Input [2]: [hd_demo_sk#15, hd_income_band_sk#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#17]

(22) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [c_current_hdemo_sk#3]
Right keys [1]: [hd_demo_sk#15]
Join condition: None

(23) Project [codegen id : 6]
Output [5]: [c_customer_id#7, c_first_name#8, c_last_name#9, cd_demo_sk#13, hd_income_band_sk#16]
Input [7]: [c_customer_id#7, c_current_hdemo_sk#3, c_first_name#8, c_last_name#9, cd_demo_sk#13, hd_demo_sk#15, hd_income_band_sk#16]

(24) Scan parquet default.income_band
Output [3]: [ib_income_band_sk#18, ib_lower_bound#19, ib_upper_bound#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/income_band]
PushedFilters: [IsNotNull(ib_lower_bound), IsNotNull(ib_upper_bound), GreaterThanOrEqual(ib_lower_bound,38128), LessThanOrEqual(ib_upper_bound,88128), IsNotNull(ib_income_band_sk)]
ReadSchema: struct<ib_income_band_sk:int,ib_lower_bound:int,ib_upper_bound:int>

(25) ColumnarToRow [codegen id : 4]
Input [3]: [ib_income_band_sk#18, ib_lower_bound#19, ib_upper_bound#20]

(26) Filter [codegen id : 4]
Input [3]: [ib_income_band_sk#18, ib_lower_bound#19, ib_upper_bound#20]
Condition : ((((isnotnull(ib_lower_bound#19) AND isnotnull(ib_upper_bound#20)) AND (ib_lower_bound#19 >= 38128)) AND (ib_upper_bound#20 <= 88128)) AND isnotnull(ib_income_band_sk#18))

(27) Project [codegen id : 4]
Output [1]: [ib_income_band_sk#18]
Input [3]: [ib_income_band_sk#18, ib_lower_bound#19, ib_upper_bound#20]

(28) BroadcastExchange
Input [1]: [ib_income_band_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21]

(29) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [hd_income_band_sk#16]
Right keys [1]: [ib_income_band_sk#18]
Join condition: None

(30) Project [codegen id : 6]
Output [4]: [c_customer_id#7, c_first_name#8, c_last_name#9, cd_demo_sk#13]
Input [6]: [c_customer_id#7, c_first_name#8, c_last_name#9, cd_demo_sk#13, hd_income_band_sk#16, ib_income_band_sk#18]

(31) Scan parquet default.store_returns
Output [1]: [sr_cdemo_sk#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_cdemo_sk)]
ReadSchema: struct<sr_cdemo_sk:bigint>

(32) ColumnarToRow [codegen id : 5]
Input [1]: [sr_cdemo_sk#22]

(33) Filter [codegen id : 5]
Input [1]: [sr_cdemo_sk#22]
Condition : isnotnull(sr_cdemo_sk#22)

(34) BroadcastExchange
Input [1]: [sr_cdemo_sk#22]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [id=#23]

(35) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cast(cd_demo_sk#13 as bigint)]
Right keys [1]: [sr_cdemo_sk#22]
Join condition: None

(36) Project [codegen id : 6]
Output [3]: [c_customer_id#7 AS customer_id#24, concat(c_last_name#9, , , c_first_name#8) AS customername#25, c_customer_id#7]
Input [5]: [c_customer_id#7, c_first_name#8, c_last_name#9, cd_demo_sk#13, sr_cdemo_sk#22]

(37) TakeOrderedAndProject
Input [3]: [customer_id#24, customername#25, c_customer_id#7]
Arguments: 100, [c_customer_id#7 ASC NULLS FIRST], [customer_id#24, customername#25]

