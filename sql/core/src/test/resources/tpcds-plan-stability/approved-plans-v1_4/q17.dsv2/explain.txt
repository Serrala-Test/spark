== Physical Plan ==
TakeOrderedAndProject (52)
+- * HashAggregate (51)
   +- Exchange (50)
      +- * HashAggregate (49)
         +- * Project (48)
            +- * BroadcastHashJoin Inner BuildRight (47)
               :- * Project (42)
               :  +- * BroadcastHashJoin Inner BuildRight (41)
               :     :- * Project (36)
               :     :  +- * BroadcastHashJoin Inner BuildRight (35)
               :     :     :- * Project (33)
               :     :     :  +- * BroadcastHashJoin Inner BuildRight (32)
               :     :     :     :- * Project (27)
               :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (26)
               :     :     :     :     :- * Project (21)
               :     :     :     :     :  +- * SortMergeJoin Inner (20)
               :     :     :     :     :     :- * Sort (14)
               :     :     :     :     :     :  +- Exchange (13)
               :     :     :     :     :     :     +- * Project (12)
               :     :     :     :     :     :        +- * SortMergeJoin Inner (11)
               :     :     :     :     :     :           :- * Sort (5)
               :     :     :     :     :     :           :  +- Exchange (4)
               :     :     :     :     :     :           :     +- * Project (3)
               :     :     :     :     :     :           :        +- * Filter (2)
               :     :     :     :     :     :           :           +- BatchScan default.store_sales (1)
               :     :     :     :     :     :           +- * Sort (10)
               :     :     :     :     :     :              +- Exchange (9)
               :     :     :     :     :     :                 +- * Project (8)
               :     :     :     :     :     :                    +- * Filter (7)
               :     :     :     :     :     :                       +- BatchScan default.store_returns (6)
               :     :     :     :     :     +- * Sort (19)
               :     :     :     :     :        +- Exchange (18)
               :     :     :     :     :           +- * Project (17)
               :     :     :     :     :              +- * Filter (16)
               :     :     :     :     :                 +- BatchScan default.catalog_sales (15)
               :     :     :     :     +- BroadcastExchange (25)
               :     :     :     :        +- * Project (24)
               :     :     :     :           +- * Filter (23)
               :     :     :     :              +- BatchScan default.date_dim (22)
               :     :     :     +- BroadcastExchange (31)
               :     :     :        +- * Project (30)
               :     :     :           +- * Filter (29)
               :     :     :              +- BatchScan default.date_dim (28)
               :     :     +- ReusedExchange (34)
               :     +- BroadcastExchange (40)
               :        +- * Project (39)
               :           +- * Filter (38)
               :              +- BatchScan default.store (37)
               +- BroadcastExchange (46)
                  +- * Project (45)
                     +- * Filter (44)
                        +- BatchScan default.item (43)


(1) BatchScan default.store_sales
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6]
DataFilters: [isnotnull(ss_customer_sk#2), isnotnull(ss_item_sk#1), isnotnull(ss_ticket_number#4), isnotnull(ss_store_sk#3)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_sales]
PartitionFilters: [isnotnull(ss_sold_date_sk#6)]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_quantity:int>

(2) Filter [codegen id : 1]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6]
Condition : ((((isnotnull(ss_customer_sk#2) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_ticket_number#4)) AND isnotnull(ss_store_sk#3)) AND might_contain(Subquery scalar-subquery#7, [id=#8], xxhash64(ss_sold_date_sk#6, 42)))

(3) Project [codegen id : 1]
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6]

(4) Exchange
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6]
Arguments: hashpartitioning(ss_customer_sk#2, ss_item_sk#1, ss_ticket_number#4, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST, ss_ticket_number#4 ASC NULLS FIRST], false, 0

(6) BatchScan default.store_returns
Output [5]: [sr_item_sk#9, sr_customer_sk#10, sr_ticket_number#11, sr_return_quantity#12, sr_returned_date_sk#13]
DataFilters: [isnotnull(sr_customer_sk#10), isnotnull(sr_item_sk#9), isnotnull(sr_ticket_number#11)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_returns]
PartitionFilters: [isnotnull(sr_returned_date_sk#13)]
PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:int,sr_customer_sk:int,sr_ticket_number:int,sr_return_quantity:int>

(7) Filter [codegen id : 3]
Input [5]: [sr_item_sk#9, sr_customer_sk#10, sr_ticket_number#11, sr_return_quantity#12, sr_returned_date_sk#13]
Condition : (((isnotnull(sr_customer_sk#10) AND isnotnull(sr_item_sk#9)) AND isnotnull(sr_ticket_number#11)) AND might_contain(Subquery scalar-subquery#14, [id=#15], xxhash64(sr_returned_date_sk#13, 42)))

(8) Project [codegen id : 3]
Output [5]: [sr_item_sk#9, sr_customer_sk#10, sr_ticket_number#11, sr_return_quantity#12, sr_returned_date_sk#13]
Input [5]: [sr_item_sk#9, sr_customer_sk#10, sr_ticket_number#11, sr_return_quantity#12, sr_returned_date_sk#13]

(9) Exchange
Input [5]: [sr_item_sk#9, sr_customer_sk#10, sr_ticket_number#11, sr_return_quantity#12, sr_returned_date_sk#13]
Arguments: hashpartitioning(sr_customer_sk#10, sr_item_sk#9, sr_ticket_number#11, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(10) Sort [codegen id : 4]
Input [5]: [sr_item_sk#9, sr_customer_sk#10, sr_ticket_number#11, sr_return_quantity#12, sr_returned_date_sk#13]
Arguments: [sr_customer_sk#10 ASC NULLS FIRST, sr_item_sk#9 ASC NULLS FIRST, sr_ticket_number#11 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 5]
Left keys [3]: [ss_customer_sk#2, ss_item_sk#1, ss_ticket_number#4]
Right keys [3]: [sr_customer_sk#10, sr_item_sk#9, sr_ticket_number#11]
Join type: Inner
Join condition: None

(12) Project [codegen id : 5]
Output [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, ss_sold_date_sk#6, sr_item_sk#9, sr_customer_sk#10, sr_return_quantity#12, sr_returned_date_sk#13]
Input [11]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6, sr_item_sk#9, sr_customer_sk#10, sr_ticket_number#11, sr_return_quantity#12, sr_returned_date_sk#13]

(13) Exchange
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, ss_sold_date_sk#6, sr_item_sk#9, sr_customer_sk#10, sr_return_quantity#12, sr_returned_date_sk#13]
Arguments: hashpartitioning(sr_customer_sk#10, sr_item_sk#9, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(14) Sort [codegen id : 6]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, ss_sold_date_sk#6, sr_item_sk#9, sr_customer_sk#10, sr_return_quantity#12, sr_returned_date_sk#13]
Arguments: [sr_customer_sk#10 ASC NULLS FIRST, sr_item_sk#9 ASC NULLS FIRST], false, 0

(15) BatchScan default.catalog_sales
Output [4]: [cs_bill_customer_sk#16, cs_item_sk#17, cs_quantity#18, cs_sold_date_sk#19]
DataFilters: [isnotnull(cs_bill_customer_sk#16), isnotnull(cs_item_sk#17)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PartitionFilters: [isnotnull(cs_sold_date_sk#19)]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int>

(16) Filter [codegen id : 7]
Input [4]: [cs_bill_customer_sk#16, cs_item_sk#17, cs_quantity#18, cs_sold_date_sk#19]
Condition : ((isnotnull(cs_bill_customer_sk#16) AND isnotnull(cs_item_sk#17)) AND might_contain(ReusedSubquery Subquery scalar-subquery#14, [id=#15], xxhash64(cs_sold_date_sk#19, 42)))

(17) Project [codegen id : 7]
Output [4]: [cs_bill_customer_sk#16, cs_item_sk#17, cs_quantity#18, cs_sold_date_sk#19]
Input [4]: [cs_bill_customer_sk#16, cs_item_sk#17, cs_quantity#18, cs_sold_date_sk#19]

(18) Exchange
Input [4]: [cs_bill_customer_sk#16, cs_item_sk#17, cs_quantity#18, cs_sold_date_sk#19]
Arguments: hashpartitioning(cs_bill_customer_sk#16, cs_item_sk#17, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(19) Sort [codegen id : 8]
Input [4]: [cs_bill_customer_sk#16, cs_item_sk#17, cs_quantity#18, cs_sold_date_sk#19]
Arguments: [cs_bill_customer_sk#16 ASC NULLS FIRST, cs_item_sk#17 ASC NULLS FIRST], false, 0

(20) SortMergeJoin [codegen id : 14]
Left keys [2]: [sr_customer_sk#10, sr_item_sk#9]
Right keys [2]: [cs_bill_customer_sk#16, cs_item_sk#17]
Join type: Inner
Join condition: None

(21) Project [codegen id : 14]
Output [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, ss_sold_date_sk#6, sr_return_quantity#12, sr_returned_date_sk#13, cs_quantity#18, cs_sold_date_sk#19]
Input [12]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, ss_sold_date_sk#6, sr_item_sk#9, sr_customer_sk#10, sr_return_quantity#12, sr_returned_date_sk#13, cs_bill_customer_sk#16, cs_item_sk#17, cs_quantity#18, cs_sold_date_sk#19]

(22) BatchScan default.date_dim
Output [2]: [d_date_sk#20, d_quarter_name#21]
DataFilters: [isnotnull(d_quarter_name#21), (d_quarter_name#21 = 2001Q1), isnotnull(d_date_sk#20)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_quarter_name), EqualTo(d_quarter_name,2001Q1), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_quarter_name:string>

(23) Filter [codegen id : 9]
Input [2]: [d_date_sk#20, d_quarter_name#21]
Condition : ((isnotnull(d_quarter_name#21) AND (d_quarter_name#21 = 2001Q1)) AND isnotnull(d_date_sk#20))

(24) Project [codegen id : 9]
Output [1]: [d_date_sk#20]
Input [2]: [d_date_sk#20, d_quarter_name#21]

(25) BroadcastExchange
Input [1]: [d_date_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(26) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#20]
Join type: Inner
Join condition: None

(27) Project [codegen id : 14]
Output [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#12, sr_returned_date_sk#13, cs_quantity#18, cs_sold_date_sk#19]
Input [9]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, ss_sold_date_sk#6, sr_return_quantity#12, sr_returned_date_sk#13, cs_quantity#18, cs_sold_date_sk#19, d_date_sk#20]

(28) BatchScan default.date_dim
Output [2]: [d_date_sk#22, d_quarter_name#23]
DataFilters: [d_quarter_name#23 IN (2001Q1,2001Q2,2001Q3), isnotnull(d_date_sk#22)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_quarter_name, [2001Q1,2001Q2,2001Q3]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_quarter_name:string>

(29) Filter [codegen id : 10]
Input [2]: [d_date_sk#22, d_quarter_name#23]
Condition : (d_quarter_name#23 IN (2001Q1,2001Q2,2001Q3) AND isnotnull(d_date_sk#22))

(30) Project [codegen id : 10]
Output [1]: [d_date_sk#22]
Input [2]: [d_date_sk#22, d_quarter_name#23]

(31) BroadcastExchange
Input [1]: [d_date_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

(32) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [sr_returned_date_sk#13]
Right keys [1]: [d_date_sk#22]
Join type: Inner
Join condition: None

(33) Project [codegen id : 14]
Output [6]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#12, cs_quantity#18, cs_sold_date_sk#19]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#12, sr_returned_date_sk#13, cs_quantity#18, cs_sold_date_sk#19, d_date_sk#22]

(34) ReusedExchange [Reuses operator id: 31]
Output [1]: [d_date_sk#24]

(35) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [cs_sold_date_sk#19]
Right keys [1]: [d_date_sk#24]
Join type: Inner
Join condition: None

(36) Project [codegen id : 14]
Output [5]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#12, cs_quantity#18]
Input [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#12, cs_quantity#18, cs_sold_date_sk#19, d_date_sk#24]

(37) BatchScan default.store
Output [2]: [s_store_sk#25, s_state#26]
DataFilters: [isnotnull(s_store_sk#25)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(38) Filter [codegen id : 12]
Input [2]: [s_store_sk#25, s_state#26]
Condition : isnotnull(s_store_sk#25)

(39) Project [codegen id : 12]
Output [2]: [s_store_sk#25, s_state#26]
Input [2]: [s_store_sk#25, s_state#26]

(40) BroadcastExchange
Input [2]: [s_store_sk#25, s_state#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

(41) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#25]
Join type: Inner
Join condition: None

(42) Project [codegen id : 14]
Output [5]: [ss_item_sk#1, ss_quantity#5, sr_return_quantity#12, cs_quantity#18, s_state#26]
Input [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#12, cs_quantity#18, s_store_sk#25, s_state#26]

(43) BatchScan default.item
Output [3]: [i_item_sk#27, i_item_id#28, i_item_desc#29]
DataFilters: [isnotnull(i_item_sk#27)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>

(44) Filter [codegen id : 13]
Input [3]: [i_item_sk#27, i_item_id#28, i_item_desc#29]
Condition : isnotnull(i_item_sk#27)

(45) Project [codegen id : 13]
Output [3]: [i_item_sk#27, i_item_id#28, i_item_desc#29]
Input [3]: [i_item_sk#27, i_item_id#28, i_item_desc#29]

(46) BroadcastExchange
Input [3]: [i_item_sk#27, i_item_id#28, i_item_desc#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

(47) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#27]
Join type: Inner
Join condition: None

(48) Project [codegen id : 14]
Output [6]: [ss_quantity#5, sr_return_quantity#12, cs_quantity#18, s_state#26, i_item_id#28, i_item_desc#29]
Input [8]: [ss_item_sk#1, ss_quantity#5, sr_return_quantity#12, cs_quantity#18, s_state#26, i_item_sk#27, i_item_id#28, i_item_desc#29]

(49) HashAggregate [codegen id : 14]
Input [6]: [ss_quantity#5, sr_return_quantity#12, cs_quantity#18, s_state#26, i_item_id#28, i_item_desc#29]
Keys [3]: [i_item_id#28, i_item_desc#29, s_state#26]
Functions [9]: [partial_count(ss_quantity#5), partial_avg(ss_quantity#5), partial_stddev_samp(cast(ss_quantity#5 as double)), partial_count(sr_return_quantity#12), partial_avg(sr_return_quantity#12), partial_stddev_samp(cast(sr_return_quantity#12 as double)), partial_count(cs_quantity#18), partial_avg(cs_quantity#18), partial_stddev_samp(cast(cs_quantity#18 as double))]
Aggregate Attributes [18]: [count#30, sum#31, count#32, n#33, avg#34, m2#35, count#36, sum#37, count#38, n#39, avg#40, m2#41, count#42, sum#43, count#44, n#45, avg#46, m2#47]
Results [21]: [i_item_id#28, i_item_desc#29, s_state#26, count#48, sum#49, count#50, n#51, avg#52, m2#53, count#54, sum#55, count#56, n#57, avg#58, m2#59, count#60, sum#61, count#62, n#63, avg#64, m2#65]

(50) Exchange
Input [21]: [i_item_id#28, i_item_desc#29, s_state#26, count#48, sum#49, count#50, n#51, avg#52, m2#53, count#54, sum#55, count#56, n#57, avg#58, m2#59, count#60, sum#61, count#62, n#63, avg#64, m2#65]
Arguments: hashpartitioning(i_item_id#28, i_item_desc#29, s_state#26, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(51) HashAggregate [codegen id : 15]
Input [21]: [i_item_id#28, i_item_desc#29, s_state#26, count#48, sum#49, count#50, n#51, avg#52, m2#53, count#54, sum#55, count#56, n#57, avg#58, m2#59, count#60, sum#61, count#62, n#63, avg#64, m2#65]
Keys [3]: [i_item_id#28, i_item_desc#29, s_state#26]
Functions [9]: [count(ss_quantity#5), avg(ss_quantity#5), stddev_samp(cast(ss_quantity#5 as double)), count(sr_return_quantity#12), avg(sr_return_quantity#12), stddev_samp(cast(sr_return_quantity#12 as double)), count(cs_quantity#18), avg(cs_quantity#18), stddev_samp(cast(cs_quantity#18 as double))]
Aggregate Attributes [9]: [count(ss_quantity#5)#66, avg(ss_quantity#5)#67, stddev_samp(cast(ss_quantity#5 as double))#68, count(sr_return_quantity#12)#69, avg(sr_return_quantity#12)#70, stddev_samp(cast(sr_return_quantity#12 as double))#71, count(cs_quantity#18)#72, avg(cs_quantity#18)#73, stddev_samp(cast(cs_quantity#18 as double))#74]
Results [15]: [i_item_id#28, i_item_desc#29, s_state#26, count(ss_quantity#5)#66 AS store_sales_quantitycount#75, avg(ss_quantity#5)#67 AS store_sales_quantityave#76, stddev_samp(cast(ss_quantity#5 as double))#68 AS store_sales_quantitystdev#77, (stddev_samp(cast(ss_quantity#5 as double))#68 / avg(ss_quantity#5)#67) AS store_sales_quantitycov#78, count(sr_return_quantity#12)#69 AS as_store_returns_quantitycount#79, avg(sr_return_quantity#12)#70 AS as_store_returns_quantityave#80, stddev_samp(cast(sr_return_quantity#12 as double))#71 AS as_store_returns_quantitystdev#81, (stddev_samp(cast(sr_return_quantity#12 as double))#71 / avg(sr_return_quantity#12)#70) AS store_returns_quantitycov#82, count(cs_quantity#18)#72 AS catalog_sales_quantitycount#83, avg(cs_quantity#18)#73 AS catalog_sales_quantityave#84, (stddev_samp(cast(cs_quantity#18 as double))#74 / avg(cs_quantity#18)#73) AS catalog_sales_quantitystdev#85, (stddev_samp(cast(cs_quantity#18 as double))#74 / avg(cs_quantity#18)#73) AS catalog_sales_quantitycov#86]

(52) TakeOrderedAndProject
Input [15]: [i_item_id#28, i_item_desc#29, s_state#26, store_sales_quantitycount#75, store_sales_quantityave#76, store_sales_quantitystdev#77, store_sales_quantitycov#78, as_store_returns_quantitycount#79, as_store_returns_quantityave#80, as_store_returns_quantitystdev#81, store_returns_quantitycov#82, catalog_sales_quantitycount#83, catalog_sales_quantityave#84, catalog_sales_quantitystdev#85, catalog_sales_quantitycov#86]
Arguments: 100, [i_item_id#28 ASC NULLS FIRST, i_item_desc#29 ASC NULLS FIRST, s_state#26 ASC NULLS FIRST], [i_item_id#28, i_item_desc#29, s_state#26, store_sales_quantitycount#75, store_sales_quantityave#76, store_sales_quantitystdev#77, store_sales_quantitycov#78, as_store_returns_quantitycount#79, as_store_returns_quantityave#80, as_store_returns_quantitystdev#81, store_returns_quantitycov#82, catalog_sales_quantitycount#83, catalog_sales_quantityave#84, catalog_sales_quantitystdev#85, catalog_sales_quantitycov#86]

===== Subqueries =====

Subquery:1 Hosting operator id = 2 Hosting Expression = Subquery scalar-subquery#7, [id=#8]
ObjectHashAggregate (58)
+- Exchange (57)
   +- ObjectHashAggregate (56)
      +- * Project (55)
         +- * Filter (54)
            +- BatchScan default.date_dim (53)


(53) BatchScan default.date_dim
Output [2]: [d_date_sk#20, d_quarter_name#21]
DataFilters: [isnotnull(d_quarter_name#21), (d_quarter_name#21 = 2001Q1), isnotnull(d_date_sk#20)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_quarter_name), EqualTo(d_quarter_name,2001Q1), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_quarter_name:string>

(54) Filter [codegen id : 1]
Input [2]: [d_date_sk#20, d_quarter_name#21]
Condition : ((isnotnull(d_quarter_name#21) AND (d_quarter_name#21 = 2001Q1)) AND isnotnull(d_date_sk#20))

(55) Project [codegen id : 1]
Output [1]: [d_date_sk#20]
Input [2]: [d_date_sk#20, d_quarter_name#21]

(56) ObjectHashAggregate
Input [1]: [d_date_sk#20]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(d_date_sk#20, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#87]
Results [1]: [buf#88]

(57) Exchange
Input [1]: [buf#88]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=10]

(58) ObjectHashAggregate
Input [1]: [buf#88]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(d_date_sk#20, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(d_date_sk#20, 42), 1000000, 8388608, 0, 0)#89]
Results [1]: [bloom_filter_agg(xxhash64(d_date_sk#20, 42), 1000000, 8388608, 0, 0)#89 AS bloomFilter#90]

Subquery:2 Hosting operator id = 7 Hosting Expression = Subquery scalar-subquery#14, [id=#15]
ObjectHashAggregate (64)
+- Exchange (63)
   +- ObjectHashAggregate (62)
      +- * Project (61)
         +- * Filter (60)
            +- BatchScan default.date_dim (59)


(59) BatchScan default.date_dim
Output [2]: [d_date_sk#22, d_quarter_name#23]
DataFilters: [d_quarter_name#23 IN (2001Q1,2001Q2,2001Q3), isnotnull(d_date_sk#22)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_quarter_name, [2001Q1,2001Q2,2001Q3]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_quarter_name:string>

(60) Filter [codegen id : 1]
Input [2]: [d_date_sk#22, d_quarter_name#23]
Condition : (d_quarter_name#23 IN (2001Q1,2001Q2,2001Q3) AND isnotnull(d_date_sk#22))

(61) Project [codegen id : 1]
Output [1]: [d_date_sk#22]
Input [2]: [d_date_sk#22, d_quarter_name#23]

(62) ObjectHashAggregate
Input [1]: [d_date_sk#22]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(d_date_sk#22, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#91]
Results [1]: [buf#92]

(63) Exchange
Input [1]: [buf#92]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=11]

(64) ObjectHashAggregate
Input [1]: [buf#92]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(d_date_sk#22, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(d_date_sk#22, 42), 1000000, 8388608, 0, 0)#93]
Results [1]: [bloom_filter_agg(xxhash64(d_date_sk#22, 42), 1000000, 8388608, 0, 0)#93 AS bloomFilter#94]

Subquery:3 Hosting operator id = 16 Hosting Expression = ReusedSubquery Subquery scalar-subquery#14, [id=#15]


