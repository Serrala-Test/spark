== Physical Plan ==
CollectLimit (35)
+- * Project (34)
   +- * BroadcastHashJoin Inner BuildRight (33)
      :- * Project (27)
      :  +- * BroadcastHashJoin Inner BuildLeft (26)
      :     :- BroadcastExchange (11)
      :     :  +- * Project (10)
      :     :     +- * BroadcastHashJoin Inner BuildLeft (9)
      :     :        :- BroadcastExchange (4)
      :     :        :  +- * Filter (3)
      :     :        :     +- * ColumnarToRow (2)
      :     :        :        +- Scan parquet default.catalog_sales (1)
      :     :        +- * Project (8)
      :     :           +- * Filter (7)
      :     :              +- * ColumnarToRow (6)
      :     :                 +- Scan parquet default.item (5)
      :     +- * Filter (25)
      :        +- * HashAggregate (24)
      :           +- Exchange (23)
      :              +- * HashAggregate (22)
      :                 +- * Project (21)
      :                    +- * BroadcastHashJoin Inner BuildLeft (20)
      :                       :- BroadcastExchange (15)
      :                       :  +- * Filter (14)
      :                       :     +- * ColumnarToRow (13)
      :                       :        +- Scan parquet default.catalog_sales (12)
      :                       +- * Project (19)
      :                          +- * Filter (18)
      :                             +- * ColumnarToRow (17)
      :                                +- Scan parquet default.date_dim (16)
      +- BroadcastExchange (32)
         +- * Project (31)
            +- * Filter (30)
               +- * ColumnarToRow (29)
                  +- Scan parquet default.date_dim (28)


(1) Scan parquet default.catalog_sales
Output [3]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#3), dynamicpruningexpression(cs_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_ext_discount_amt)]
ReadSchema: struct<cs_item_sk:int,cs_ext_discount_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3]

(3) Filter [codegen id : 1]
Input [3]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3]
Condition : (isnotnull(cs_item_sk#1) AND isnotnull(cs_ext_discount_amt#2))

(4) BroadcastExchange
Input [3]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#5]

(5) Scan parquet default.item
Output [2]: [i_item_sk#6, i_manufact_id#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,977), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_manufact_id:int>

(6) ColumnarToRow
Input [2]: [i_item_sk#6, i_manufact_id#7]

(7) Filter
Input [2]: [i_item_sk#6, i_manufact_id#7]
Condition : ((isnotnull(i_manufact_id#7) AND (i_manufact_id#7 = 977)) AND isnotnull(i_item_sk#6))

(8) Project
Output [1]: [i_item_sk#6]
Input [2]: [i_item_sk#6, i_manufact_id#7]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [cs_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join condition: None

(10) Project [codegen id : 2]
Output [3]: [cs_ext_discount_amt#2, cs_sold_date_sk#3, i_item_sk#6]
Input [4]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3, i_item_sk#6]

(11) BroadcastExchange
Input [3]: [cs_ext_discount_amt#2, cs_sold_date_sk#3, i_item_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#8]

(12) Scan parquet default.catalog_sales
Output [3]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#3), dynamicpruningexpression(cs_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_ext_discount_amt:decimal(7,2)>

(13) ColumnarToRow [codegen id : 3]
Input [3]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3]

(14) Filter [codegen id : 3]
Input [3]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3]
Condition : isnotnull(cs_item_sk#1)

(15) BroadcastExchange
Input [3]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#9]

(16) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_date#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-01-27), LessThanOrEqual(d_date,2000-04-26), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(17) ColumnarToRow
Input [2]: [d_date_sk#10, d_date#11]

(18) Filter
Input [2]: [d_date_sk#10, d_date#11]
Condition : (((isnotnull(d_date#11) AND (d_date#11 >= 10983)) AND (d_date#11 <= 11073)) AND isnotnull(d_date_sk#10))

(19) Project
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_date#11]

(20) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#3]
Right keys [1]: [d_date_sk#10]
Join condition: None

(21) Project [codegen id : 4]
Output [2]: [cs_item_sk#1, cs_ext_discount_amt#2]
Input [4]: [cs_item_sk#1, cs_ext_discount_amt#2, cs_sold_date_sk#3, d_date_sk#10]

(22) HashAggregate [codegen id : 4]
Input [2]: [cs_item_sk#1, cs_ext_discount_amt#2]
Keys [1]: [cs_item_sk#1]
Functions [1]: [partial_avg(UnscaledValue(cs_ext_discount_amt#2))]
Aggregate Attributes [2]: [sum#12, count#13]
Results [3]: [cs_item_sk#1, sum#14, count#15]

(23) Exchange
Input [3]: [cs_item_sk#1, sum#14, count#15]
Arguments: hashpartitioning(cs_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#16]

(24) HashAggregate
Input [3]: [cs_item_sk#1, sum#14, count#15]
Keys [1]: [cs_item_sk#1]
Functions [1]: [avg(UnscaledValue(cs_ext_discount_amt#2))]
Aggregate Attributes [1]: [avg(UnscaledValue(cs_ext_discount_amt#2))#17]
Results [2]: [CheckOverflow((1.300000 * promote_precision(cast((avg(UnscaledValue(cs_ext_discount_amt#2))#17 / 100.0) as decimal(11,6)))), DecimalType(14,7), true) AS (1.3 * avg(cs_ext_discount_amt))#18, cs_item_sk#1 AS cs_item_sk#1#19]

(25) Filter
Input [2]: [(1.3 * avg(cs_ext_discount_amt))#18, cs_item_sk#1#19]
Condition : isnotnull((1.3 * avg(cs_ext_discount_amt))#18)

(26) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [i_item_sk#6]
Right keys [1]: [cs_item_sk#1#19]
Join condition: (cast(cs_ext_discount_amt#2 as decimal(14,7)) > (1.3 * avg(cs_ext_discount_amt))#18)

(27) Project [codegen id : 6]
Output [1]: [cs_sold_date_sk#3]
Input [5]: [cs_ext_discount_amt#2, cs_sold_date_sk#3, i_item_sk#6, (1.3 * avg(cs_ext_discount_amt))#18, cs_item_sk#1#19]

(28) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_date#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-01-27), LessThanOrEqual(d_date,2000-04-26), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(29) ColumnarToRow [codegen id : 5]
Input [2]: [d_date_sk#10, d_date#11]

(30) Filter [codegen id : 5]
Input [2]: [d_date_sk#10, d_date#11]
Condition : (((isnotnull(d_date#11) AND (d_date#11 >= 10983)) AND (d_date#11 <= 11073)) AND isnotnull(d_date_sk#10))

(31) Project [codegen id : 5]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_date#11]

(32) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#20]

(33) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#3]
Right keys [1]: [d_date_sk#10]
Join condition: None

(34) Project [codegen id : 6]
Output [1]: [1 AS excess discount amount #21]
Input [2]: [cs_sold_date_sk#3, d_date_sk#10]

(35) CollectLimit
Input [1]: [excess discount amount #21]
Arguments: 100

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#3 IN dynamicpruning#4
ReusedExchange (36)


(36) ReusedExchange [Reuses operator id: 32]
Output [1]: [d_date_sk#10]

Subquery:2 Hosting operator id = 12 Hosting Expression = cs_sold_date_sk#3 IN dynamicpruning#4


