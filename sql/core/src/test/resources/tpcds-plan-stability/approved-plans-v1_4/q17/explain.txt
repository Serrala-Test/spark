== Physical Plan ==
TakeOrderedAndProject (50)
+- * HashAggregate (49)
   +- Exchange (48)
      +- * HashAggregate (47)
         +- * Project (46)
            +- * BroadcastHashJoin Inner BuildRight (45)
               :- * Project (39)
               :  +- * BroadcastHashJoin Inner BuildRight (38)
               :     :- * Project (32)
               :     :  +- * BroadcastHashJoin Inner BuildRight (31)
               :     :     :- * Project (29)
               :     :     :  +- * BroadcastHashJoin Inner BuildRight (28)
               :     :     :     :- * Project (22)
               :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (21)
               :     :     :     :     :- * Project (15)
               :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (14)
               :     :     :     :     :     :- * Project (9)
               :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (8)
               :     :     :     :     :     :     :- * Filter (3)
               :     :     :     :     :     :     :  +- * ColumnarToRow (2)
               :     :     :     :     :     :     :     +- Scan parquet default.store_sales (1)
               :     :     :     :     :     :     +- BroadcastExchange (7)
               :     :     :     :     :     :        +- * Filter (6)
               :     :     :     :     :     :           +- * ColumnarToRow (5)
               :     :     :     :     :     :              +- Scan parquet default.store_returns (4)
               :     :     :     :     :     +- BroadcastExchange (13)
               :     :     :     :     :        +- * Filter (12)
               :     :     :     :     :           +- * ColumnarToRow (11)
               :     :     :     :     :              +- Scan parquet default.catalog_sales (10)
               :     :     :     :     +- BroadcastExchange (20)
               :     :     :     :        +- * Project (19)
               :     :     :     :           +- * Filter (18)
               :     :     :     :              +- * ColumnarToRow (17)
               :     :     :     :                 +- Scan parquet default.date_dim (16)
               :     :     :     +- BroadcastExchange (27)
               :     :     :        +- * Project (26)
               :     :     :           +- * Filter (25)
               :     :     :              +- * ColumnarToRow (24)
               :     :     :                 +- Scan parquet default.date_dim (23)
               :     :     +- ReusedExchange (30)
               :     +- BroadcastExchange (37)
               :        +- * Project (36)
               :           +- * Filter (35)
               :              +- * ColumnarToRow (34)
               :                 +- Scan parquet default.store (33)
               +- BroadcastExchange (44)
                  +- * Project (43)
                     +- * Filter (42)
                        +- * ColumnarToRow (41)
                           +- Scan parquet default.item (40)


(1) Scan parquet default.store_sales
Output [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_quantity#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_quantity:int>

(2) ColumnarToRow [codegen id : 8]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_quantity#6]

(3) Filter [codegen id : 8]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_quantity#6]
Condition : ((((isnotnull(ss_customer_sk#3) AND isnotnull(ss_item_sk#2)) AND isnotnull(ss_ticket_number#5)) AND isnotnull(ss_sold_date_sk#1)) AND isnotnull(ss_store_sk#4))

(4) Scan parquet default.store_returns
Output [5]: [sr_returned_date_sk#7, sr_item_sk#8, sr_customer_sk#9, sr_ticket_number#10, sr_return_quantity#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number), IsNotNull(sr_returned_date_sk)]
ReadSchema: struct<sr_returned_date_sk:bigint,sr_item_sk:bigint,sr_customer_sk:bigint,sr_ticket_number:bigint,sr_return_quantity:int>

(5) ColumnarToRow [codegen id : 1]
Input [5]: [sr_returned_date_sk#7, sr_item_sk#8, sr_customer_sk#9, sr_ticket_number#10, sr_return_quantity#11]

(6) Filter [codegen id : 1]
Input [5]: [sr_returned_date_sk#7, sr_item_sk#8, sr_customer_sk#9, sr_ticket_number#10, sr_return_quantity#11]
Condition : (((isnotnull(sr_customer_sk#9) AND isnotnull(sr_item_sk#8)) AND isnotnull(sr_ticket_number#10)) AND isnotnull(sr_returned_date_sk#7))

(7) BroadcastExchange
Input [5]: [sr_returned_date_sk#7, sr_item_sk#8, sr_customer_sk#9, sr_ticket_number#10, sr_return_quantity#11]
Arguments: HashedRelationBroadcastMode(List(input[2, bigint, false], input[1, bigint, false], input[3, bigint, false]),false), [id=#12]

(8) BroadcastHashJoin [codegen id : 8]
Left keys [3]: [cast(ss_customer_sk#3 as bigint), cast(ss_item_sk#2 as bigint), cast(ss_ticket_number#5 as bigint)]
Right keys [3]: [sr_customer_sk#9, sr_item_sk#8, sr_ticket_number#10]
Join condition: None

(9) Project [codegen id : 8]
Output [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_returned_date_sk#7, sr_item_sk#8, sr_customer_sk#9, sr_return_quantity#11]
Input [11]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_quantity#6, sr_returned_date_sk#7, sr_item_sk#8, sr_customer_sk#9, sr_ticket_number#10, sr_return_quantity#11]

(10) Scan parquet default.catalog_sales
Output [4]: [cs_sold_date_sk#13, cs_bill_customer_sk#14, cs_item_sk#15, cs_quantity#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int>

(11) ColumnarToRow [codegen id : 2]
Input [4]: [cs_sold_date_sk#13, cs_bill_customer_sk#14, cs_item_sk#15, cs_quantity#16]

(12) Filter [codegen id : 2]
Input [4]: [cs_sold_date_sk#13, cs_bill_customer_sk#14, cs_item_sk#15, cs_quantity#16]
Condition : ((isnotnull(cs_bill_customer_sk#14) AND isnotnull(cs_item_sk#15)) AND isnotnull(cs_sold_date_sk#13))

(13) BroadcastExchange
Input [4]: [cs_sold_date_sk#13, cs_bill_customer_sk#14, cs_item_sk#15, cs_quantity#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint), cast(input[2, int, false] as bigint)),false), [id=#17]

(14) BroadcastHashJoin [codegen id : 8]
Left keys [2]: [sr_customer_sk#9, sr_item_sk#8]
Right keys [2]: [cast(cs_bill_customer_sk#14 as bigint), cast(cs_item_sk#15 as bigint)]
Join condition: None

(15) Project [codegen id : 8]
Output [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_returned_date_sk#7, sr_return_quantity#11, cs_sold_date_sk#13, cs_quantity#16]
Input [12]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_returned_date_sk#7, sr_item_sk#8, sr_customer_sk#9, sr_return_quantity#11, cs_sold_date_sk#13, cs_bill_customer_sk#14, cs_item_sk#15, cs_quantity#16]

(16) Scan parquet default.date_dim
Output [2]: [d_date_sk#18, d_quarter_name#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_quarter_name:string>

(17) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#18, d_quarter_name#19]

(18) Filter [codegen id : 3]
Input [2]: [d_date_sk#18, d_quarter_name#19]
Condition : ((rpad(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, d_quarter_name#19, 1, false, true), 6,  ) = 2001Q1) AND isnotnull(d_date_sk#18))

(19) Project [codegen id : 3]
Output [1]: [d_date_sk#18]
Input [2]: [d_date_sk#18, d_quarter_name#19]

(20) BroadcastExchange
Input [1]: [d_date_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#20]

(21) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#18]
Join condition: None

(22) Project [codegen id : 8]
Output [7]: [ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_returned_date_sk#7, sr_return_quantity#11, cs_sold_date_sk#13, cs_quantity#16]
Input [9]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_returned_date_sk#7, sr_return_quantity#11, cs_sold_date_sk#13, cs_quantity#16, d_date_sk#18]

(23) Scan parquet default.date_dim
Output [2]: [d_date_sk#21, d_quarter_name#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_quarter_name:string>

(24) ColumnarToRow [codegen id : 4]
Input [2]: [d_date_sk#21, d_quarter_name#22]

(25) Filter [codegen id : 4]
Input [2]: [d_date_sk#21, d_quarter_name#22]
Condition : (rpad(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, d_quarter_name#22, 1, false, true), 6,  ) IN (2001Q1,2001Q2,2001Q3) AND isnotnull(d_date_sk#21))

(26) Project [codegen id : 4]
Output [1]: [d_date_sk#21]
Input [2]: [d_date_sk#21, d_quarter_name#22]

(27) BroadcastExchange
Input [1]: [d_date_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#23]

(28) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [sr_returned_date_sk#7]
Right keys [1]: [cast(d_date_sk#21 as bigint)]
Join condition: None

(29) Project [codegen id : 8]
Output [6]: [ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_return_quantity#11, cs_sold_date_sk#13, cs_quantity#16]
Input [8]: [ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_returned_date_sk#7, sr_return_quantity#11, cs_sold_date_sk#13, cs_quantity#16, d_date_sk#21]

(30) ReusedExchange [Reuses operator id: 27]
Output [1]: [d_date_sk#24]

(31) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#13]
Right keys [1]: [d_date_sk#24]
Join condition: None

(32) Project [codegen id : 8]
Output [5]: [ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_return_quantity#11, cs_quantity#16]
Input [7]: [ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_return_quantity#11, cs_sold_date_sk#13, cs_quantity#16, d_date_sk#24]

(33) Scan parquet default.store
Output [2]: [s_store_sk#25, s_state#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(34) ColumnarToRow [codegen id : 6]
Input [2]: [s_store_sk#25, s_state#26]

(35) Filter [codegen id : 6]
Input [2]: [s_store_sk#25, s_state#26]
Condition : isnotnull(s_store_sk#25)

(36) Project [codegen id : 6]
Output [2]: [s_store_sk#25, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#26, 2, false, true) AS s_state#27]
Input [2]: [s_store_sk#25, s_state#26]

(37) BroadcastExchange
Input [2]: [s_store_sk#25, s_state#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#28]

(38) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [s_store_sk#25]
Join condition: None

(39) Project [codegen id : 8]
Output [5]: [ss_item_sk#2, ss_quantity#6, sr_return_quantity#11, cs_quantity#16, s_state#27]
Input [7]: [ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_return_quantity#11, cs_quantity#16, s_store_sk#25, s_state#27]

(40) Scan parquet default.item
Output [3]: [i_item_sk#29, i_item_id#30, i_item_desc#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>

(41) ColumnarToRow [codegen id : 7]
Input [3]: [i_item_sk#29, i_item_id#30, i_item_desc#31]

(42) Filter [codegen id : 7]
Input [3]: [i_item_sk#29, i_item_id#30, i_item_desc#31]
Condition : isnotnull(i_item_sk#29)

(43) Project [codegen id : 7]
Output [3]: [i_item_sk#29, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_item_id#30, 16, false, true) AS i_item_id#32, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, i_item_desc#31, 200, false, true) AS i_item_desc#33]
Input [3]: [i_item_sk#29, i_item_id#30, i_item_desc#31]

(44) BroadcastExchange
Input [3]: [i_item_sk#29, i_item_id#32, i_item_desc#33]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#34]

(45) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#29]
Join condition: None

(46) Project [codegen id : 8]
Output [6]: [ss_quantity#6, sr_return_quantity#11, cs_quantity#16, s_state#27, i_item_id#32, i_item_desc#33]
Input [8]: [ss_item_sk#2, ss_quantity#6, sr_return_quantity#11, cs_quantity#16, s_state#27, i_item_sk#29, i_item_id#32, i_item_desc#33]

(47) HashAggregate [codegen id : 8]
Input [6]: [ss_quantity#6, sr_return_quantity#11, cs_quantity#16, s_state#27, i_item_id#32, i_item_desc#33]
Keys [3]: [i_item_id#32, i_item_desc#33, s_state#27]
Functions [9]: [partial_count(ss_quantity#6), partial_avg(cast(ss_quantity#6 as bigint)), partial_stddev_samp(cast(ss_quantity#6 as double)), partial_count(sr_return_quantity#11), partial_avg(cast(sr_return_quantity#11 as bigint)), partial_stddev_samp(cast(sr_return_quantity#11 as double)), partial_count(cs_quantity#16), partial_avg(cast(cs_quantity#16 as bigint)), partial_stddev_samp(cast(cs_quantity#16 as double))]
Aggregate Attributes [18]: [count#35, sum#36, count#37, n#38, avg#39, m2#40, count#41, sum#42, count#43, n#44, avg#45, m2#46, count#47, sum#48, count#49, n#50, avg#51, m2#52]
Results [21]: [i_item_id#32, i_item_desc#33, s_state#27, count#53, sum#54, count#55, n#56, avg#57, m2#58, count#59, sum#60, count#61, n#62, avg#63, m2#64, count#65, sum#66, count#67, n#68, avg#69, m2#70]

(48) Exchange
Input [21]: [i_item_id#32, i_item_desc#33, s_state#27, count#53, sum#54, count#55, n#56, avg#57, m2#58, count#59, sum#60, count#61, n#62, avg#63, m2#64, count#65, sum#66, count#67, n#68, avg#69, m2#70]
Arguments: hashpartitioning(i_item_id#32, i_item_desc#33, s_state#27, 5), ENSURE_REQUIREMENTS, [id=#71]

(49) HashAggregate [codegen id : 9]
Input [21]: [i_item_id#32, i_item_desc#33, s_state#27, count#53, sum#54, count#55, n#56, avg#57, m2#58, count#59, sum#60, count#61, n#62, avg#63, m2#64, count#65, sum#66, count#67, n#68, avg#69, m2#70]
Keys [3]: [i_item_id#32, i_item_desc#33, s_state#27]
Functions [9]: [count(ss_quantity#6), avg(cast(ss_quantity#6 as bigint)), stddev_samp(cast(ss_quantity#6 as double)), count(sr_return_quantity#11), avg(cast(sr_return_quantity#11 as bigint)), stddev_samp(cast(sr_return_quantity#11 as double)), count(cs_quantity#16), avg(cast(cs_quantity#16 as bigint)), stddev_samp(cast(cs_quantity#16 as double))]
Aggregate Attributes [9]: [count(ss_quantity#6)#72, avg(cast(ss_quantity#6 as bigint))#73, stddev_samp(cast(ss_quantity#6 as double))#74, count(sr_return_quantity#11)#75, avg(cast(sr_return_quantity#11 as bigint))#76, stddev_samp(cast(sr_return_quantity#11 as double))#77, count(cs_quantity#16)#78, avg(cast(cs_quantity#16 as bigint))#79, stddev_samp(cast(cs_quantity#16 as double))#80]
Results [15]: [i_item_id#32, i_item_desc#33, s_state#27, count(ss_quantity#6)#72 AS store_sales_quantitycount#81, avg(cast(ss_quantity#6 as bigint))#73 AS store_sales_quantityave#82, stddev_samp(cast(ss_quantity#6 as double))#74 AS store_sales_quantitystdev#83, (stddev_samp(cast(ss_quantity#6 as double))#74 / avg(cast(ss_quantity#6 as bigint))#73) AS store_sales_quantitycov#84, count(sr_return_quantity#11)#75 AS as_store_returns_quantitycount#85, avg(cast(sr_return_quantity#11 as bigint))#76 AS as_store_returns_quantityave#86, stddev_samp(cast(sr_return_quantity#11 as double))#77 AS as_store_returns_quantitystdev#87, (stddev_samp(cast(sr_return_quantity#11 as double))#77 / avg(cast(sr_return_quantity#11 as bigint))#76) AS store_returns_quantitycov#88, count(cs_quantity#16)#78 AS catalog_sales_quantitycount#89, avg(cast(cs_quantity#16 as bigint))#79 AS catalog_sales_quantityave#90, (stddev_samp(cast(cs_quantity#16 as double))#80 / avg(cast(cs_quantity#16 as bigint))#79) AS catalog_sales_quantitystdev#91, (stddev_samp(cast(cs_quantity#16 as double))#80 / avg(cast(cs_quantity#16 as bigint))#79) AS catalog_sales_quantitycov#92]

(50) TakeOrderedAndProject
Input [15]: [i_item_id#32, i_item_desc#33, s_state#27, store_sales_quantitycount#81, store_sales_quantityave#82, store_sales_quantitystdev#83, store_sales_quantitycov#84, as_store_returns_quantitycount#85, as_store_returns_quantityave#86, as_store_returns_quantitystdev#87, store_returns_quantitycov#88, catalog_sales_quantitycount#89, catalog_sales_quantityave#90, catalog_sales_quantitystdev#91, catalog_sales_quantitycov#92]
Arguments: 100, [i_item_id#32 ASC NULLS FIRST, i_item_desc#33 ASC NULLS FIRST, s_state#27 ASC NULLS FIRST], [i_item_id#32, i_item_desc#33, s_state#27, store_sales_quantitycount#81, store_sales_quantityave#82, store_sales_quantitystdev#83, store_sales_quantitycov#84, as_store_returns_quantitycount#85, as_store_returns_quantityave#86, as_store_returns_quantitystdev#87, store_returns_quantitycov#88, catalog_sales_quantitycount#89, catalog_sales_quantityave#90, catalog_sales_quantitystdev#91, catalog_sales_quantitycov#92]

