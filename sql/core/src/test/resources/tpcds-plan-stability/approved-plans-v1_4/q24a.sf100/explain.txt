== Physical Plan ==
* Project (48)
+- * Filter (47)
   +- * HashAggregate (46)
      +- Exchange (45)
         +- * HashAggregate (44)
            +- * HashAggregate (43)
               +- Exchange (42)
                  +- * HashAggregate (41)
                     +- * Project (40)
                        +- * SortMergeJoin Inner (39)
                           :- * Sort (33)
                           :  +- Exchange (32)
                           :     +- * Project (31)
                           :        +- * BroadcastHashJoin Inner BuildRight (30)
                           :           :- * Project (18)
                           :           :  +- * SortMergeJoin Inner (17)
                           :           :     :- * Sort (11)
                           :           :     :  +- Exchange (10)
                           :           :     :     +- * Project (9)
                           :           :     :        +- * BroadcastHashJoin Inner BuildRight (8)
                           :           :     :           :- * Filter (3)
                           :           :     :           :  +- * ColumnarToRow (2)
                           :           :     :           :     +- Scan parquet default.store_sales (1)
                           :           :     :           +- BroadcastExchange (7)
                           :           :     :              +- * Filter (6)
                           :           :     :                 +- * ColumnarToRow (5)
                           :           :     :                    +- Scan parquet default.item (4)
                           :           :     +- * Sort (16)
                           :           :        +- Exchange (15)
                           :           :           +- * Filter (14)
                           :           :              +- * ColumnarToRow (13)
                           :           :                 +- Scan parquet default.customer (12)
                           :           +- BroadcastExchange (29)
                           :              +- * Project (28)
                           :                 +- * BroadcastHashJoin Inner BuildLeft (27)
                           :                    :- BroadcastExchange (23)
                           :                    :  +- * Project (22)
                           :                    :     +- * Filter (21)
                           :                    :        +- * ColumnarToRow (20)
                           :                    :           +- Scan parquet default.store (19)
                           :                    +- * Filter (26)
                           :                       +- * ColumnarToRow (25)
                           :                          +- Scan parquet default.customer_address (24)
                           +- * Sort (38)
                              +- Exchange (37)
                                 +- * Filter (36)
                                    +- * ColumnarToRow (35)
                                       +- Scan parquet default.store_returns (34)


(1) Scan parquet default.store_sales
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]

(3) Filter [codegen id : 2]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Condition : ((((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2)) AND dynamicpruningexpression(ss_store_sk#3 IN dynamicpruning#6))

(4) Scan parquet default.item
Output [6]: [i_item_sk#7, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_color), EqualTo(i_color,pale), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(5) ColumnarToRow [codegen id : 1]
Input [6]: [i_item_sk#7, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]

(6) Filter [codegen id : 1]
Input [6]: [i_item_sk#7, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Condition : ((isnotnull(i_color#10) AND (i_color#10 = pale)) AND isnotnull(i_item_sk#7))

(7) BroadcastExchange
Input [6]: [i_item_sk#7, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join condition: None

(9) Project [codegen id : 2]
Output [10]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Input [11]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_item_sk#7, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]

(10) Exchange
Input [10]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Arguments: hashpartitioning(ss_customer_sk#2, 5), true, [id=#14]

(11) Sort [codegen id : 3]
Input [10]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(12) Scan parquet default.customer
Output [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(13) ColumnarToRow [codegen id : 4]
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]

(14) Filter [codegen id : 4]
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Condition : (isnotnull(c_customer_sk#15) AND isnotnull(c_birth_country#18))

(15) Exchange
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: hashpartitioning(c_customer_sk#15, 5), true, [id=#19]

(16) Sort [codegen id : 5]
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: [c_customer_sk#15 ASC NULLS FIRST], false, 0

(17) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#15]
Join condition: None

(18) Project [codegen id : 8]
Output [12]: [ss_item_sk#1, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, c_birth_country#18]
Input [14]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]

(19) Scan parquet default.store
Output [5]: [s_store_sk#20, s_store_name#21, s_market_id#22, s_state#23, s_zip#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(20) ColumnarToRow [codegen id : 6]
Input [5]: [s_store_sk#20, s_store_name#21, s_market_id#22, s_state#23, s_zip#24]

(21) Filter [codegen id : 6]
Input [5]: [s_store_sk#20, s_store_name#21, s_market_id#22, s_state#23, s_zip#24]
Condition : (((isnotnull(s_market_id#22) AND (s_market_id#22 = 8)) AND isnotnull(s_store_sk#20)) AND isnotnull(s_zip#24))

(22) Project [codegen id : 6]
Output [4]: [s_store_sk#20, s_store_name#21, s_state#23, s_zip#24]
Input [5]: [s_store_sk#20, s_store_name#21, s_market_id#22, s_state#23, s_zip#24]

(23) BroadcastExchange
Input [4]: [s_store_sk#20, s_store_name#21, s_state#23, s_zip#24]
Arguments: HashedRelationBroadcastMode(List(input[3, string, true]),false), [id=#25]

(24) Scan parquet default.customer_address
Output [3]: [ca_state#26, ca_zip#27, ca_country#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>

(25) ColumnarToRow
Input [3]: [ca_state#26, ca_zip#27, ca_country#28]

(26) Filter
Input [3]: [ca_state#26, ca_zip#27, ca_country#28]
Condition : (isnotnull(ca_country#28) AND isnotnull(ca_zip#27))

(27) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [s_zip#24]
Right keys [1]: [ca_zip#27]
Join condition: None

(28) Project [codegen id : 7]
Output [5]: [s_store_sk#20, s_store_name#21, s_state#23, ca_state#26, ca_country#28]
Input [7]: [s_store_sk#20, s_store_name#21, s_state#23, s_zip#24, ca_state#26, ca_zip#27, ca_country#28]

(29) BroadcastExchange
Input [5]: [s_store_sk#20, s_store_name#21, s_state#23, ca_state#26, ca_country#28]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], upper(input[4, string, true])),false), [id=#29]

(30) BroadcastHashJoin [codegen id : 8]
Left keys [2]: [ss_store_sk#3, c_birth_country#18]
Right keys [2]: [s_store_sk#20, upper(ca_country#28)]
Join condition: None

(31) Project [codegen id : 8]
Output [13]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, s_store_name#21, s_state#23, ca_state#26]
Input [17]: [ss_item_sk#1, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, c_birth_country#18, s_store_sk#20, s_store_name#21, s_state#23, ca_state#26, ca_country#28]

(32) Exchange
Input [13]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, s_store_name#21, s_state#23, ca_state#26]
Arguments: hashpartitioning(cast(ss_ticket_number#4 as bigint), cast(ss_item_sk#1 as bigint), 5), true, [id=#30]

(33) Sort [codegen id : 9]
Input [13]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, s_store_name#21, s_state#23, ca_state#26]
Arguments: [cast(ss_ticket_number#4 as bigint) ASC NULLS FIRST, cast(ss_item_sk#1 as bigint) ASC NULLS FIRST], false, 0

(34) Scan parquet default.store_returns
Output [2]: [sr_item_sk#31, sr_ticket_number#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:bigint,sr_ticket_number:bigint>

(35) ColumnarToRow [codegen id : 10]
Input [2]: [sr_item_sk#31, sr_ticket_number#32]

(36) Filter [codegen id : 10]
Input [2]: [sr_item_sk#31, sr_ticket_number#32]
Condition : (isnotnull(sr_ticket_number#32) AND isnotnull(sr_item_sk#31))

(37) Exchange
Input [2]: [sr_item_sk#31, sr_ticket_number#32]
Arguments: hashpartitioning(sr_ticket_number#32, sr_item_sk#31, 5), true, [id=#33]

(38) Sort [codegen id : 11]
Input [2]: [sr_item_sk#31, sr_ticket_number#32]
Arguments: [sr_ticket_number#32 ASC NULLS FIRST, sr_item_sk#31 ASC NULLS FIRST], false, 0

(39) SortMergeJoin [codegen id : 12]
Left keys [2]: [cast(ss_ticket_number#4 as bigint), cast(ss_item_sk#1 as bigint)]
Right keys [2]: [sr_ticket_number#32, sr_item_sk#31]
Join condition: None

(40) Project [codegen id : 12]
Output [11]: [ss_net_paid#5, s_store_name#21, s_state#23, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, ca_state#26]
Input [15]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, s_store_name#21, s_state#23, ca_state#26, sr_item_sk#31, sr_ticket_number#32]

(41) HashAggregate [codegen id : 12]
Input [11]: [ss_net_paid#5, s_store_name#21, s_state#23, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, ca_state#26]
Keys [10]: [c_last_name#17, c_first_name#16, s_store_name#21, ca_state#26, s_state#23, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum#34]
Results [11]: [c_last_name#17, c_first_name#16, s_store_name#21, ca_state#26, s_state#23, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9, sum#35]

(42) Exchange
Input [11]: [c_last_name#17, c_first_name#16, s_store_name#21, ca_state#26, s_state#23, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9, sum#35]
Arguments: hashpartitioning(c_last_name#17, c_first_name#16, s_store_name#21, ca_state#26, s_state#23, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9, 5), true, [id=#36]

(43) HashAggregate [codegen id : 13]
Input [11]: [c_last_name#17, c_first_name#16, s_store_name#21, ca_state#26, s_state#23, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9, sum#35]
Keys [10]: [c_last_name#17, c_first_name#16, s_store_name#21, ca_state#26, s_state#23, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#5))#37]
Results [4]: [c_last_name#17, c_first_name#16, s_store_name#21, MakeDecimal(sum(UnscaledValue(ss_net_paid#5))#37,17,2) AS netpaid#38]

(44) HashAggregate [codegen id : 13]
Input [4]: [c_last_name#17, c_first_name#16, s_store_name#21, netpaid#38]
Keys [3]: [c_last_name#17, c_first_name#16, s_store_name#21]
Functions [1]: [partial_sum(netpaid#38)]
Aggregate Attributes [2]: [sum#39, isEmpty#40]
Results [5]: [c_last_name#17, c_first_name#16, s_store_name#21, sum#41, isEmpty#42]

(45) Exchange
Input [5]: [c_last_name#17, c_first_name#16, s_store_name#21, sum#41, isEmpty#42]
Arguments: hashpartitioning(c_last_name#17, c_first_name#16, s_store_name#21, 5), true, [id=#43]

(46) HashAggregate [codegen id : 14]
Input [5]: [c_last_name#17, c_first_name#16, s_store_name#21, sum#41, isEmpty#42]
Keys [3]: [c_last_name#17, c_first_name#16, s_store_name#21]
Functions [1]: [sum(netpaid#38)]
Aggregate Attributes [1]: [sum(netpaid#38)#44]
Results [5]: [c_last_name#17, c_first_name#16, s_store_name#21, sum(netpaid#38)#44 AS paid#45, sum(netpaid#38)#44 AS sum(netpaid#38)#46]

(47) Filter [codegen id : 14]
Input [5]: [c_last_name#17, c_first_name#16, s_store_name#21, paid#45, sum(netpaid#38)#46]
Condition : (isnotnull(sum(netpaid#38)#46) AND (cast(sum(netpaid#38)#46 as decimal(33,8)) > cast(Subquery scalar-subquery#47, [id=#48] as decimal(33,8))))

(48) Project [codegen id : 14]
Output [4]: [c_last_name#17, c_first_name#16, s_store_name#21, paid#45]
Input [5]: [c_last_name#17, c_first_name#16, s_store_name#21, paid#45, sum(netpaid#38)#46]

===== Subqueries =====

Subquery:1 Hosting operator id = 47 Hosting Expression = Subquery scalar-subquery#47, [id=#48]
* HashAggregate (100)
+- Exchange (99)
   +- * HashAggregate (98)
      +- * HashAggregate (97)
         +- Exchange (96)
            +- * HashAggregate (95)
               +- * Project (94)
                  +- * SortMergeJoin Inner (93)
                     :- * Sort (87)
                     :  +- Exchange (86)
                     :     +- * Project (85)
                     :        +- * SortMergeJoin Inner (84)
                     :           :- * Sort (78)
                     :           :  +- Exchange (77)
                     :           :     +- * Project (76)
                     :           :        +- * SortMergeJoin Inner (75)
                     :           :           :- * Sort (69)
                     :           :           :  +- Exchange (68)
                     :           :           :     +- * Project (67)
                     :           :           :        +- * SortMergeJoin Inner (66)
                     :           :           :           :- * Sort (60)
                     :           :           :           :  +- Exchange (59)
                     :           :           :           :     +- * Project (58)
                     :           :           :           :        +- * BroadcastHashJoin Inner BuildRight (57)
                     :           :           :           :           :- * Filter (51)
                     :           :           :           :           :  +- * ColumnarToRow (50)
                     :           :           :           :           :     +- Scan parquet default.store_sales (49)
                     :           :           :           :           +- BroadcastExchange (56)
                     :           :           :           :              +- * Project (55)
                     :           :           :           :                 +- * Filter (54)
                     :           :           :           :                    +- * ColumnarToRow (53)
                     :           :           :           :                       +- Scan parquet default.store (52)
                     :           :           :           +- * Sort (65)
                     :           :           :              +- Exchange (64)
                     :           :           :                 +- * Filter (63)
                     :           :           :                    +- * ColumnarToRow (62)
                     :           :           :                       +- Scan parquet default.item (61)
                     :           :           +- * Sort (74)
                     :           :              +- Exchange (73)
                     :           :                 +- * Filter (72)
                     :           :                    +- * ColumnarToRow (71)
                     :           :                       +- Scan parquet default.customer (70)
                     :           +- * Sort (83)
                     :              +- Exchange (82)
                     :                 +- * Filter (81)
                     :                    +- * ColumnarToRow (80)
                     :                       +- Scan parquet default.customer_address (79)
                     +- * Sort (92)
                        +- Exchange (91)
                           +- * Filter (90)
                              +- * ColumnarToRow (89)
                                 +- Scan parquet default.store_returns (88)


(49) Scan parquet default.store_sales
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(50) ColumnarToRow [codegen id : 2]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]

(51) Filter [codegen id : 2]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Condition : (((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2))

(52) Scan parquet default.store
Output [5]: [s_store_sk#20, s_store_name#21, s_market_id#22, s_state#23, s_zip#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(53) ColumnarToRow [codegen id : 1]
Input [5]: [s_store_sk#20, s_store_name#21, s_market_id#22, s_state#23, s_zip#24]

(54) Filter [codegen id : 1]
Input [5]: [s_store_sk#20, s_store_name#21, s_market_id#22, s_state#23, s_zip#24]
Condition : (((isnotnull(s_market_id#22) AND (s_market_id#22 = 8)) AND isnotnull(s_store_sk#20)) AND isnotnull(s_zip#24))

(55) Project [codegen id : 1]
Output [4]: [s_store_sk#20, s_store_name#21, s_state#23, s_zip#24]
Input [5]: [s_store_sk#20, s_store_name#21, s_market_id#22, s_state#23, s_zip#24]

(56) BroadcastExchange
Input [4]: [s_store_sk#20, s_store_name#21, s_state#23, s_zip#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#49]

(57) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#20]
Join condition: None

(58) Project [codegen id : 2]
Output [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#21, s_state#23, s_zip#24]
Input [9]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, s_store_sk#20, s_store_name#21, s_state#23, s_zip#24]

(59) Exchange
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#21, s_state#23, s_zip#24]
Arguments: hashpartitioning(ss_item_sk#1, 5), true, [id=#50]

(60) Sort [codegen id : 3]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#21, s_state#23, s_zip#24]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(61) Scan parquet default.item
Output [6]: [i_item_sk#7, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(62) ColumnarToRow [codegen id : 4]
Input [6]: [i_item_sk#7, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]

(63) Filter [codegen id : 4]
Input [6]: [i_item_sk#7, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Condition : isnotnull(i_item_sk#7)

(64) Exchange
Input [6]: [i_item_sk#7, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Arguments: hashpartitioning(i_item_sk#7, 5), true, [id=#51]

(65) Sort [codegen id : 5]
Input [6]: [i_item_sk#7, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Arguments: [i_item_sk#7 ASC NULLS FIRST], false, 0

(66) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join condition: None

(67) Project [codegen id : 6]
Output [12]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#21, s_state#23, s_zip#24, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Input [13]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#21, s_state#23, s_zip#24, i_item_sk#7, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]

(68) Exchange
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#21, s_state#23, s_zip#24, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Arguments: hashpartitioning(ss_customer_sk#2, 5), true, [id=#52]

(69) Sort [codegen id : 7]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#21, s_state#23, s_zip#24, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(70) Scan parquet default.customer
Output [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(71) ColumnarToRow [codegen id : 8]
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]

(72) Filter [codegen id : 8]
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Condition : (isnotnull(c_customer_sk#15) AND isnotnull(c_birth_country#18))

(73) Exchange
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: hashpartitioning(c_customer_sk#15, 5), true, [id=#53]

(74) Sort [codegen id : 9]
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: [c_customer_sk#15 ASC NULLS FIRST], false, 0

(75) SortMergeJoin [codegen id : 10]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#15]
Join condition: None

(76) Project [codegen id : 10]
Output [14]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#21, s_state#23, s_zip#24, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, c_birth_country#18]
Input [16]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#21, s_state#23, s_zip#24, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]

(77) Exchange
Input [14]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#21, s_state#23, s_zip#24, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: hashpartitioning(c_birth_country#18, s_zip#24, 5), true, [id=#54]

(78) Sort [codegen id : 11]
Input [14]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#21, s_state#23, s_zip#24, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: [c_birth_country#18 ASC NULLS FIRST, s_zip#24 ASC NULLS FIRST], false, 0

(79) Scan parquet default.customer_address
Output [3]: [ca_state#26, ca_zip#27, ca_country#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>

(80) ColumnarToRow [codegen id : 12]
Input [3]: [ca_state#26, ca_zip#27, ca_country#28]

(81) Filter [codegen id : 12]
Input [3]: [ca_state#26, ca_zip#27, ca_country#28]
Condition : (isnotnull(ca_country#28) AND isnotnull(ca_zip#27))

(82) Exchange
Input [3]: [ca_state#26, ca_zip#27, ca_country#28]
Arguments: hashpartitioning(upper(ca_country#28), ca_zip#27, 5), true, [id=#55]

(83) Sort [codegen id : 13]
Input [3]: [ca_state#26, ca_zip#27, ca_country#28]
Arguments: [upper(ca_country#28) ASC NULLS FIRST, ca_zip#27 ASC NULLS FIRST], false, 0

(84) SortMergeJoin [codegen id : 14]
Left keys [2]: [c_birth_country#18, s_zip#24]
Right keys [2]: [upper(ca_country#28), ca_zip#27]
Join condition: None

(85) Project [codegen id : 14]
Output [13]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#21, s_state#23, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, ca_state#26]
Input [17]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#21, s_state#23, s_zip#24, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, c_birth_country#18, ca_state#26, ca_zip#27, ca_country#28]

(86) Exchange
Input [13]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#21, s_state#23, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, ca_state#26]
Arguments: hashpartitioning(cast(ss_ticket_number#4 as bigint), cast(ss_item_sk#1 as bigint), 5), true, [id=#56]

(87) Sort [codegen id : 15]
Input [13]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#21, s_state#23, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, ca_state#26]
Arguments: [cast(ss_ticket_number#4 as bigint) ASC NULLS FIRST, cast(ss_item_sk#1 as bigint) ASC NULLS FIRST], false, 0

(88) Scan parquet default.store_returns
Output [2]: [sr_item_sk#31, sr_ticket_number#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:bigint,sr_ticket_number:bigint>

(89) ColumnarToRow [codegen id : 16]
Input [2]: [sr_item_sk#31, sr_ticket_number#32]

(90) Filter [codegen id : 16]
Input [2]: [sr_item_sk#31, sr_ticket_number#32]
Condition : (isnotnull(sr_ticket_number#32) AND isnotnull(sr_item_sk#31))

(91) Exchange
Input [2]: [sr_item_sk#31, sr_ticket_number#32]
Arguments: hashpartitioning(sr_ticket_number#32, sr_item_sk#31, 5), true, [id=#57]

(92) Sort [codegen id : 17]
Input [2]: [sr_item_sk#31, sr_ticket_number#32]
Arguments: [sr_ticket_number#32 ASC NULLS FIRST, sr_item_sk#31 ASC NULLS FIRST], false, 0

(93) SortMergeJoin [codegen id : 18]
Left keys [2]: [cast(ss_ticket_number#4 as bigint), cast(ss_item_sk#1 as bigint)]
Right keys [2]: [sr_ticket_number#32, sr_item_sk#31]
Join condition: None

(94) Project [codegen id : 18]
Output [11]: [ss_net_paid#5, s_store_name#21, s_state#23, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, ca_state#26]
Input [15]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#21, s_state#23, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, ca_state#26, sr_item_sk#31, sr_ticket_number#32]

(95) HashAggregate [codegen id : 18]
Input [11]: [ss_net_paid#5, s_store_name#21, s_state#23, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, ca_state#26]
Keys [10]: [c_last_name#17, c_first_name#16, s_store_name#21, ca_state#26, s_state#23, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum#58]
Results [11]: [c_last_name#17, c_first_name#16, s_store_name#21, ca_state#26, s_state#23, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9, sum#59]

(96) Exchange
Input [11]: [c_last_name#17, c_first_name#16, s_store_name#21, ca_state#26, s_state#23, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9, sum#59]
Arguments: hashpartitioning(c_last_name#17, c_first_name#16, s_store_name#21, ca_state#26, s_state#23, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9, 5), true, [id=#60]

(97) HashAggregate [codegen id : 19]
Input [11]: [c_last_name#17, c_first_name#16, s_store_name#21, ca_state#26, s_state#23, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9, sum#59]
Keys [10]: [c_last_name#17, c_first_name#16, s_store_name#21, ca_state#26, s_state#23, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#5))#61]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_paid#5))#61,17,2) AS netpaid#38]

(98) HashAggregate [codegen id : 19]
Input [1]: [netpaid#38]
Keys: []
Functions [1]: [partial_avg(netpaid#38)]
Aggregate Attributes [2]: [sum#62, count#63]
Results [2]: [sum#64, count#65]

(99) Exchange
Input [2]: [sum#64, count#65]
Arguments: SinglePartition, true, [id=#66]

(100) HashAggregate [codegen id : 20]
Input [2]: [sum#64, count#65]
Keys: []
Functions [1]: [avg(netpaid#38)]
Aggregate Attributes [1]: [avg(netpaid#38)#67]
Results [1]: [CheckOverflow((0.050000 * promote_precision(avg(netpaid#38)#67)), DecimalType(24,8), true) AS (CAST(0.05 AS DECIMAL(21,6)) * CAST(avg(netpaid) AS DECIMAL(21,6)))#68]

Subquery:2 Hosting operator id = 3 Hosting Expression = ss_store_sk#3 IN dynamicpruning#6
ReusedExchange (101)


(101) ReusedExchange [Reuses operator id: 29]
Output [5]: [s_store_sk#20, s_store_name#21, s_state#23, ca_state#26, ca_country#28]

Subquery:3 Hosting operator id = 1 Hosting Expression = ss_store_sk#3 IN dynamicpruning#6


