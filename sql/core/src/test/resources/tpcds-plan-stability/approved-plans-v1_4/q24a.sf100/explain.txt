== Physical Plan ==
* Filter (48)
+- * HashAggregate (47)
   +- Exchange (46)
      +- * HashAggregate (45)
         +- * HashAggregate (44)
            +- Exchange (43)
               +- * HashAggregate (42)
                  +- * Project (41)
                     +- * BroadcastHashJoin Inner BuildRight (40)
                        :- * Project (28)
                        :  +- * SortMergeJoin Inner (27)
                        :     :- * Sort (21)
                        :     :  +- Exchange (20)
                        :     :     +- * Project (19)
                        :     :        +- * SortMergeJoin Inner (18)
                        :     :           :- * Sort (12)
                        :     :           :  +- Exchange (11)
                        :     :           :     +- * Project (10)
                        :     :           :        +- * BroadcastHashJoin Inner BuildRight (9)
                        :     :           :           :- * Project (4)
                        :     :           :           :  +- * Filter (3)
                        :     :           :           :     +- * ColumnarToRow (2)
                        :     :           :           :        +- Scan parquet default.store_sales (1)
                        :     :           :           +- BroadcastExchange (8)
                        :     :           :              +- * Filter (7)
                        :     :           :                 +- * ColumnarToRow (6)
                        :     :           :                    +- Scan parquet default.item (5)
                        :     :           +- * Sort (17)
                        :     :              +- Exchange (16)
                        :     :                 +- * Filter (15)
                        :     :                    +- * ColumnarToRow (14)
                        :     :                       +- Scan parquet default.customer (13)
                        :     +- * Sort (26)
                        :        +- Exchange (25)
                        :           +- * Project (24)
                        :              +- * ColumnarToRow (23)
                        :                 +- Scan parquet default.store_returns (22)
                        +- BroadcastExchange (39)
                           +- * Project (38)
                              +- * BroadcastHashJoin Inner BuildLeft (37)
                                 :- BroadcastExchange (33)
                                 :  +- * Project (32)
                                 :     +- * Filter (31)
                                 :        +- * ColumnarToRow (30)
                                 :           +- Scan parquet default.store (29)
                                 +- * Filter (36)
                                    +- * ColumnarToRow (35)
                                       +- Scan parquet default.customer_address (34)


(1) Scan parquet default.store_sales
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]

(3) Filter [codegen id : 2]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Condition : (isnotnull(ss_store_sk#3) AND isnotnull(ss_customer_sk#2))

(4) Project [codegen id : 2]
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]

(5) Scan parquet default.item
Output [6]: [i_item_sk#7, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_color), EqualTo(i_color,pale                )]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(6) ColumnarToRow [codegen id : 1]
Input [6]: [i_item_sk#7, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]

(7) Filter [codegen id : 1]
Input [6]: [i_item_sk#7, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Condition : (isnotnull(i_color#10) AND (i_color#10 = pale                ))

(8) BroadcastExchange
Input [6]: [i_item_sk#7, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join condition: None

(10) Project [codegen id : 2]
Output [10]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Input [11]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_item_sk#7, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]

(11) Exchange
Input [10]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Arguments: hashpartitioning(ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#14]

(12) Sort [codegen id : 3]
Input [10]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(13) Scan parquet default.customer
Output [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(14) ColumnarToRow [codegen id : 4]
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]

(15) Filter [codegen id : 4]
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Condition : isnotnull(c_birth_country#18)

(16) Exchange
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: hashpartitioning(c_customer_sk#15, 5), ENSURE_REQUIREMENTS, [id=#19]

(17) Sort [codegen id : 5]
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: [c_customer_sk#15 ASC NULLS FIRST], false, 0

(18) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#15]
Join condition: None

(19) Project [codegen id : 6]
Output [12]: [ss_item_sk#1, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, c_birth_country#18]
Input [14]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]

(20) Exchange
Input [12]: [ss_item_sk#1, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: hashpartitioning(ss_ticket_number#4, ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#20]

(21) Sort [codegen id : 7]
Input [12]: [ss_item_sk#1, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: [ss_ticket_number#4 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST], false, 0

(22) Scan parquet default.store_returns
Output [3]: [sr_item_sk#21, sr_ticket_number#22, sr_returned_date_sk#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(23) ColumnarToRow [codegen id : 8]
Input [3]: [sr_item_sk#21, sr_ticket_number#22, sr_returned_date_sk#23]

(24) Project [codegen id : 8]
Output [2]: [sr_item_sk#21, sr_ticket_number#22]
Input [3]: [sr_item_sk#21, sr_ticket_number#22, sr_returned_date_sk#23]

(25) Exchange
Input [2]: [sr_item_sk#21, sr_ticket_number#22]
Arguments: hashpartitioning(sr_ticket_number#22, sr_item_sk#21, 5), ENSURE_REQUIREMENTS, [id=#24]

(26) Sort [codegen id : 9]
Input [2]: [sr_item_sk#21, sr_ticket_number#22]
Arguments: [sr_ticket_number#22 ASC NULLS FIRST, sr_item_sk#21 ASC NULLS FIRST], false, 0

(27) SortMergeJoin [codegen id : 12]
Left keys [2]: [ss_ticket_number#4, ss_item_sk#1]
Right keys [2]: [sr_ticket_number#22, sr_item_sk#21]
Join condition: None

(28) Project [codegen id : 12]
Output [10]: [ss_store_sk#3, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, c_birth_country#18]
Input [14]: [ss_item_sk#1, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, c_birth_country#18, sr_item_sk#21, sr_ticket_number#22]

(29) Scan parquet default.store
Output [5]: [s_store_sk#25, s_store_name#26, s_market_id#27, s_state#28, s_zip#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(30) ColumnarToRow [codegen id : 10]
Input [5]: [s_store_sk#25, s_store_name#26, s_market_id#27, s_state#28, s_zip#29]

(31) Filter [codegen id : 10]
Input [5]: [s_store_sk#25, s_store_name#26, s_market_id#27, s_state#28, s_zip#29]
Condition : ((isnotnull(s_market_id#27) AND (s_market_id#27 = 8)) AND isnotnull(s_zip#29))

(32) Project [codegen id : 10]
Output [4]: [s_store_sk#25, s_store_name#26, s_state#28, s_zip#29]
Input [5]: [s_store_sk#25, s_store_name#26, s_market_id#27, s_state#28, s_zip#29]

(33) BroadcastExchange
Input [4]: [s_store_sk#25, s_store_name#26, s_state#28, s_zip#29]
Arguments: HashedRelationBroadcastMode(List(input[3, string, true]),false), [id=#30]

(34) Scan parquet default.customer_address
Output [3]: [ca_state#31, ca_zip#32, ca_country#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>

(35) ColumnarToRow
Input [3]: [ca_state#31, ca_zip#32, ca_country#33]

(36) Filter
Input [3]: [ca_state#31, ca_zip#32, ca_country#33]
Condition : (isnotnull(ca_country#33) AND isnotnull(ca_zip#32))

(37) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [s_zip#29]
Right keys [1]: [ca_zip#32]
Join condition: None

(38) Project [codegen id : 11]
Output [5]: [s_store_sk#25, s_store_name#26, s_state#28, ca_state#31, ca_country#33]
Input [7]: [s_store_sk#25, s_store_name#26, s_state#28, s_zip#29, ca_state#31, ca_zip#32, ca_country#33]

(39) BroadcastExchange
Input [5]: [s_store_sk#25, s_store_name#26, s_state#28, ca_state#31, ca_country#33]
Arguments: HashedRelationBroadcastMode(List(input[0, int, false], upper(input[4, string, true])),false), [id=#34]

(40) BroadcastHashJoin [codegen id : 12]
Left keys [2]: [ss_store_sk#3, c_birth_country#18]
Right keys [2]: [s_store_sk#25, upper(ca_country#33)]
Join condition: None

(41) Project [codegen id : 12]
Output [11]: [ss_net_paid#5, s_store_name#26, s_state#28, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, ca_state#31]
Input [15]: [ss_store_sk#3, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, c_birth_country#18, s_store_sk#25, s_store_name#26, s_state#28, ca_state#31, ca_country#33]

(42) HashAggregate [codegen id : 12]
Input [11]: [ss_net_paid#5, s_store_name#26, s_state#28, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, ca_state#31]
Keys [10]: [c_last_name#17, c_first_name#16, s_store_name#26, ca_state#31, s_state#28, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum#35]
Results [11]: [c_last_name#17, c_first_name#16, s_store_name#26, ca_state#31, s_state#28, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9, sum#36]

(43) Exchange
Input [11]: [c_last_name#17, c_first_name#16, s_store_name#26, ca_state#31, s_state#28, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9, sum#36]
Arguments: hashpartitioning(c_last_name#17, c_first_name#16, s_store_name#26, ca_state#31, s_state#28, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9, 5), ENSURE_REQUIREMENTS, [id=#37]

(44) HashAggregate [codegen id : 13]
Input [11]: [c_last_name#17, c_first_name#16, s_store_name#26, ca_state#31, s_state#28, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9, sum#36]
Keys [10]: [c_last_name#17, c_first_name#16, s_store_name#26, ca_state#31, s_state#28, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#5))#38]
Results [4]: [c_last_name#17, c_first_name#16, s_store_name#26, MakeDecimal(sum(UnscaledValue(ss_net_paid#5))#38,17,2) AS netpaid#39]

(45) HashAggregate [codegen id : 13]
Input [4]: [c_last_name#17, c_first_name#16, s_store_name#26, netpaid#39]
Keys [3]: [c_last_name#17, c_first_name#16, s_store_name#26]
Functions [1]: [partial_sum(netpaid#39)]
Aggregate Attributes [2]: [sum#40, isEmpty#41]
Results [5]: [c_last_name#17, c_first_name#16, s_store_name#26, sum#42, isEmpty#43]

(46) Exchange
Input [5]: [c_last_name#17, c_first_name#16, s_store_name#26, sum#42, isEmpty#43]
Arguments: hashpartitioning(c_last_name#17, c_first_name#16, s_store_name#26, 5), ENSURE_REQUIREMENTS, [id=#44]

(47) HashAggregate [codegen id : 14]
Input [5]: [c_last_name#17, c_first_name#16, s_store_name#26, sum#42, isEmpty#43]
Keys [3]: [c_last_name#17, c_first_name#16, s_store_name#26]
Functions [1]: [sum(netpaid#39)]
Aggregate Attributes [1]: [sum(netpaid#39)#45]
Results [4]: [c_last_name#17, c_first_name#16, s_store_name#26, sum(netpaid#39)#45 AS paid#46]

(48) Filter [codegen id : 14]
Input [4]: [c_last_name#17, c_first_name#16, s_store_name#26, paid#46]
Condition : (isnotnull(paid#46) AND (cast(paid#46 as decimal(33,8)) > cast(Subquery scalar-subquery#47, [id=#48] as decimal(33,8))))

===== Subqueries =====

Subquery:1 Hosting operator id = 48 Hosting Expression = Subquery scalar-subquery#47, [id=#48]
* HashAggregate (94)
+- Exchange (93)
   +- * HashAggregate (92)
      +- * HashAggregate (91)
         +- Exchange (90)
            +- * HashAggregate (89)
               +- * Project (88)
                  +- * SortMergeJoin Inner (87)
                     :- * Sort (81)
                     :  +- Exchange (80)
                     :     +- * Project (79)
                     :        +- * SortMergeJoin Inner (78)
                     :           :- * Sort (75)
                     :           :  +- Exchange (74)
                     :           :     +- * Project (73)
                     :           :        +- * SortMergeJoin Inner (72)
                     :           :           :- * Sort (69)
                     :           :           :  +- Exchange (68)
                     :           :           :     +- * Project (67)
                     :           :           :        +- * SortMergeJoin Inner (66)
                     :           :           :           :- * Sort (61)
                     :           :           :           :  +- Exchange (60)
                     :           :           :           :     +- * Project (59)
                     :           :           :           :        +- * BroadcastHashJoin Inner BuildRight (58)
                     :           :           :           :           :- * Project (52)
                     :           :           :           :           :  +- * Filter (51)
                     :           :           :           :           :     +- * ColumnarToRow (50)
                     :           :           :           :           :        +- Scan parquet default.store_sales (49)
                     :           :           :           :           +- BroadcastExchange (57)
                     :           :           :           :              +- * Project (56)
                     :           :           :           :                 +- * Filter (55)
                     :           :           :           :                    +- * ColumnarToRow (54)
                     :           :           :           :                       +- Scan parquet default.store (53)
                     :           :           :           +- * Sort (65)
                     :           :           :              +- Exchange (64)
                     :           :           :                 +- * ColumnarToRow (63)
                     :           :           :                    +- Scan parquet default.item (62)
                     :           :           +- * Sort (71)
                     :           :              +- ReusedExchange (70)
                     :           +- * Sort (77)
                     :              +- ReusedExchange (76)
                     +- * Sort (86)
                        +- Exchange (85)
                           +- * Filter (84)
                              +- * ColumnarToRow (83)
                                 +- Scan parquet default.customer_address (82)


(49) Scan parquet default.store_sales
Output [6]: [ss_item_sk#49, ss_customer_sk#50, ss_store_sk#51, ss_ticket_number#52, ss_net_paid#53, ss_sold_date_sk#54]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(50) ColumnarToRow [codegen id : 2]
Input [6]: [ss_item_sk#49, ss_customer_sk#50, ss_store_sk#51, ss_ticket_number#52, ss_net_paid#53, ss_sold_date_sk#54]

(51) Filter [codegen id : 2]
Input [6]: [ss_item_sk#49, ss_customer_sk#50, ss_store_sk#51, ss_ticket_number#52, ss_net_paid#53, ss_sold_date_sk#54]
Condition : (isnotnull(ss_store_sk#51) AND isnotnull(ss_customer_sk#50))

(52) Project [codegen id : 2]
Output [5]: [ss_item_sk#49, ss_customer_sk#50, ss_store_sk#51, ss_ticket_number#52, ss_net_paid#53]
Input [6]: [ss_item_sk#49, ss_customer_sk#50, ss_store_sk#51, ss_ticket_number#52, ss_net_paid#53, ss_sold_date_sk#54]

(53) Scan parquet default.store
Output [5]: [s_store_sk#55, s_store_name#56, s_market_id#57, s_state#58, s_zip#59]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(54) ColumnarToRow [codegen id : 1]
Input [5]: [s_store_sk#55, s_store_name#56, s_market_id#57, s_state#58, s_zip#59]

(55) Filter [codegen id : 1]
Input [5]: [s_store_sk#55, s_store_name#56, s_market_id#57, s_state#58, s_zip#59]
Condition : ((isnotnull(s_market_id#57) AND (s_market_id#57 = 8)) AND isnotnull(s_zip#59))

(56) Project [codegen id : 1]
Output [4]: [s_store_sk#55, s_store_name#56, s_state#58, s_zip#59]
Input [5]: [s_store_sk#55, s_store_name#56, s_market_id#57, s_state#58, s_zip#59]

(57) BroadcastExchange
Input [4]: [s_store_sk#55, s_store_name#56, s_state#58, s_zip#59]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#60]

(58) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_store_sk#51]
Right keys [1]: [s_store_sk#55]
Join condition: None

(59) Project [codegen id : 2]
Output [7]: [ss_item_sk#49, ss_customer_sk#50, ss_ticket_number#52, ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59]
Input [9]: [ss_item_sk#49, ss_customer_sk#50, ss_store_sk#51, ss_ticket_number#52, ss_net_paid#53, s_store_sk#55, s_store_name#56, s_state#58, s_zip#59]

(60) Exchange
Input [7]: [ss_item_sk#49, ss_customer_sk#50, ss_ticket_number#52, ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59]
Arguments: hashpartitioning(ss_item_sk#49, 5), ENSURE_REQUIREMENTS, [id=#61]

(61) Sort [codegen id : 3]
Input [7]: [ss_item_sk#49, ss_customer_sk#50, ss_ticket_number#52, ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59]
Arguments: [ss_item_sk#49 ASC NULLS FIRST], false, 0

(62) Scan parquet default.item
Output [6]: [i_item_sk#62, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(63) ColumnarToRow [codegen id : 4]
Input [6]: [i_item_sk#62, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67]

(64) Exchange
Input [6]: [i_item_sk#62, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67]
Arguments: hashpartitioning(i_item_sk#62, 5), ENSURE_REQUIREMENTS, [id=#68]

(65) Sort [codegen id : 5]
Input [6]: [i_item_sk#62, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67]
Arguments: [i_item_sk#62 ASC NULLS FIRST], false, 0

(66) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#49]
Right keys [1]: [i_item_sk#62]
Join condition: None

(67) Project [codegen id : 6]
Output [12]: [ss_item_sk#49, ss_customer_sk#50, ss_ticket_number#52, ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67]
Input [13]: [ss_item_sk#49, ss_customer_sk#50, ss_ticket_number#52, ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59, i_item_sk#62, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67]

(68) Exchange
Input [12]: [ss_item_sk#49, ss_customer_sk#50, ss_ticket_number#52, ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67]
Arguments: hashpartitioning(ss_customer_sk#50, 5), ENSURE_REQUIREMENTS, [id=#69]

(69) Sort [codegen id : 7]
Input [12]: [ss_item_sk#49, ss_customer_sk#50, ss_ticket_number#52, ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67]
Arguments: [ss_customer_sk#50 ASC NULLS FIRST], false, 0

(70) ReusedExchange [Reuses operator id: 16]
Output [4]: [c_customer_sk#70, c_first_name#71, c_last_name#72, c_birth_country#73]

(71) Sort [codegen id : 9]
Input [4]: [c_customer_sk#70, c_first_name#71, c_last_name#72, c_birth_country#73]
Arguments: [c_customer_sk#70 ASC NULLS FIRST], false, 0

(72) SortMergeJoin [codegen id : 10]
Left keys [1]: [ss_customer_sk#50]
Right keys [1]: [c_customer_sk#70]
Join condition: None

(73) Project [codegen id : 10]
Output [14]: [ss_item_sk#49, ss_ticket_number#52, ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67, c_first_name#71, c_last_name#72, c_birth_country#73]
Input [16]: [ss_item_sk#49, ss_customer_sk#50, ss_ticket_number#52, ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67, c_customer_sk#70, c_first_name#71, c_last_name#72, c_birth_country#73]

(74) Exchange
Input [14]: [ss_item_sk#49, ss_ticket_number#52, ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67, c_first_name#71, c_last_name#72, c_birth_country#73]
Arguments: hashpartitioning(ss_ticket_number#52, ss_item_sk#49, 5), ENSURE_REQUIREMENTS, [id=#74]

(75) Sort [codegen id : 11]
Input [14]: [ss_item_sk#49, ss_ticket_number#52, ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67, c_first_name#71, c_last_name#72, c_birth_country#73]
Arguments: [ss_ticket_number#52 ASC NULLS FIRST, ss_item_sk#49 ASC NULLS FIRST], false, 0

(76) ReusedExchange [Reuses operator id: 25]
Output [2]: [sr_item_sk#75, sr_ticket_number#76]

(77) Sort [codegen id : 13]
Input [2]: [sr_item_sk#75, sr_ticket_number#76]
Arguments: [sr_ticket_number#76 ASC NULLS FIRST, sr_item_sk#75 ASC NULLS FIRST], false, 0

(78) SortMergeJoin [codegen id : 14]
Left keys [2]: [ss_ticket_number#52, ss_item_sk#49]
Right keys [2]: [sr_ticket_number#76, sr_item_sk#75]
Join condition: None

(79) Project [codegen id : 14]
Output [12]: [ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67, c_first_name#71, c_last_name#72, c_birth_country#73]
Input [16]: [ss_item_sk#49, ss_ticket_number#52, ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67, c_first_name#71, c_last_name#72, c_birth_country#73, sr_item_sk#75, sr_ticket_number#76]

(80) Exchange
Input [12]: [ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67, c_first_name#71, c_last_name#72, c_birth_country#73]
Arguments: hashpartitioning(c_birth_country#73, s_zip#59, 5), ENSURE_REQUIREMENTS, [id=#77]

(81) Sort [codegen id : 15]
Input [12]: [ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67, c_first_name#71, c_last_name#72, c_birth_country#73]
Arguments: [c_birth_country#73 ASC NULLS FIRST, s_zip#59 ASC NULLS FIRST], false, 0

(82) Scan parquet default.customer_address
Output [3]: [ca_state#78, ca_zip#79, ca_country#80]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>

(83) ColumnarToRow [codegen id : 16]
Input [3]: [ca_state#78, ca_zip#79, ca_country#80]

(84) Filter [codegen id : 16]
Input [3]: [ca_state#78, ca_zip#79, ca_country#80]
Condition : (isnotnull(ca_country#80) AND isnotnull(ca_zip#79))

(85) Exchange
Input [3]: [ca_state#78, ca_zip#79, ca_country#80]
Arguments: hashpartitioning(upper(ca_country#80), ca_zip#79, 5), ENSURE_REQUIREMENTS, [id=#81]

(86) Sort [codegen id : 17]
Input [3]: [ca_state#78, ca_zip#79, ca_country#80]
Arguments: [upper(ca_country#80) ASC NULLS FIRST, ca_zip#79 ASC NULLS FIRST], false, 0

(87) SortMergeJoin [codegen id : 18]
Left keys [2]: [c_birth_country#73, s_zip#59]
Right keys [2]: [upper(ca_country#80), ca_zip#79]
Join condition: None

(88) Project [codegen id : 18]
Output [11]: [ss_net_paid#53, s_store_name#56, s_state#58, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67, c_first_name#71, c_last_name#72, ca_state#78]
Input [15]: [ss_net_paid#53, s_store_name#56, s_state#58, s_zip#59, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67, c_first_name#71, c_last_name#72, c_birth_country#73, ca_state#78, ca_zip#79, ca_country#80]

(89) HashAggregate [codegen id : 18]
Input [11]: [ss_net_paid#53, s_store_name#56, s_state#58, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67, c_first_name#71, c_last_name#72, ca_state#78]
Keys [10]: [c_last_name#72, c_first_name#71, s_store_name#56, ca_state#78, s_state#58, i_color#65, i_current_price#63, i_manager_id#67, i_units#66, i_size#64]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#53))]
Aggregate Attributes [1]: [sum#82]
Results [11]: [c_last_name#72, c_first_name#71, s_store_name#56, ca_state#78, s_state#58, i_color#65, i_current_price#63, i_manager_id#67, i_units#66, i_size#64, sum#83]

(90) Exchange
Input [11]: [c_last_name#72, c_first_name#71, s_store_name#56, ca_state#78, s_state#58, i_color#65, i_current_price#63, i_manager_id#67, i_units#66, i_size#64, sum#83]
Arguments: hashpartitioning(c_last_name#72, c_first_name#71, s_store_name#56, ca_state#78, s_state#58, i_color#65, i_current_price#63, i_manager_id#67, i_units#66, i_size#64, 5), ENSURE_REQUIREMENTS, [id=#84]

(91) HashAggregate [codegen id : 19]
Input [11]: [c_last_name#72, c_first_name#71, s_store_name#56, ca_state#78, s_state#58, i_color#65, i_current_price#63, i_manager_id#67, i_units#66, i_size#64, sum#83]
Keys [10]: [c_last_name#72, c_first_name#71, s_store_name#56, ca_state#78, s_state#58, i_color#65, i_current_price#63, i_manager_id#67, i_units#66, i_size#64]
Functions [1]: [sum(UnscaledValue(ss_net_paid#53))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#53))#85]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_paid#53))#85,17,2) AS netpaid#39]

(92) HashAggregate [codegen id : 19]
Input [1]: [netpaid#39]
Keys: []
Functions [1]: [partial_avg(netpaid#39)]
Aggregate Attributes [2]: [sum#86, count#87]
Results [2]: [sum#88, count#89]

(93) Exchange
Input [2]: [sum#88, count#89]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#90]

(94) HashAggregate [codegen id : 20]
Input [2]: [sum#88, count#89]
Keys: []
Functions [1]: [avg(netpaid#39)]
Aggregate Attributes [1]: [avg(netpaid#39)#91]
Results [1]: [CheckOverflow((0.050000 * promote_precision(avg(netpaid#39)#91)), DecimalType(24,8), true) AS (0.05 * avg(netpaid))#92]


