== Physical Plan ==
* Filter (49)
+- * HashAggregate (48)
   +- Exchange (47)
      +- * HashAggregate (46)
         +- * HashAggregate (45)
            +- Exchange (44)
               +- * HashAggregate (43)
                  +- * Project (42)
                     +- * BroadcastHashJoin Inner BuildRight (41)
                        :- * Project (29)
                        :  +- * SortMergeJoin Inner (28)
                        :     :- * Sort (21)
                        :     :  +- Exchange (20)
                        :     :     +- * Project (19)
                        :     :        +- * SortMergeJoin Inner (18)
                        :     :           :- * Sort (12)
                        :     :           :  +- Exchange (11)
                        :     :           :     +- * Project (10)
                        :     :           :        +- * BroadcastHashJoin Inner BuildRight (9)
                        :     :           :           :- * Project (4)
                        :     :           :           :  +- * Filter (3)
                        :     :           :           :     +- * ColumnarToRow (2)
                        :     :           :           :        +- Scan parquet default.store_sales (1)
                        :     :           :           +- BroadcastExchange (8)
                        :     :           :              +- * Filter (7)
                        :     :           :                 +- * ColumnarToRow (6)
                        :     :           :                    +- Scan parquet default.item (5)
                        :     :           +- * Sort (17)
                        :     :              +- Exchange (16)
                        :     :                 +- * Filter (15)
                        :     :                    +- * ColumnarToRow (14)
                        :     :                       +- Scan parquet default.customer (13)
                        :     +- * Sort (27)
                        :        +- Exchange (26)
                        :           +- * Project (25)
                        :              +- * Filter (24)
                        :                 +- * ColumnarToRow (23)
                        :                    +- Scan parquet default.store_returns (22)
                        +- BroadcastExchange (40)
                           +- * Project (39)
                              +- * BroadcastHashJoin Inner BuildLeft (38)
                                 :- BroadcastExchange (34)
                                 :  +- * Project (33)
                                 :     +- * Filter (32)
                                 :        +- * ColumnarToRow (31)
                                 :           +- Scan parquet default.store (30)
                                 +- * Filter (37)
                                    +- * ColumnarToRow (36)
                                       +- Scan parquet default.customer_address (35)


(1) Scan parquet default.store_sales
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]

(3) Filter [codegen id : 2]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Condition : (((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2))

(4) Project [codegen id : 2]
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]

(5) Scan parquet default.item
Output [6]: [i_item_sk#7, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_color), EqualTo(i_color,pale                ), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(6) ColumnarToRow [codegen id : 1]
Input [6]: [i_item_sk#7, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]

(7) Filter [codegen id : 1]
Input [6]: [i_item_sk#7, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Condition : ((isnotnull(i_color#10) AND (i_color#10 = pale                )) AND isnotnull(i_item_sk#7))

(8) BroadcastExchange
Input [6]: [i_item_sk#7, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join condition: None

(10) Project [codegen id : 2]
Output [10]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Input [11]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_item_sk#7, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]

(11) Exchange
Input [10]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Arguments: hashpartitioning(ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#14]

(12) Sort [codegen id : 3]
Input [10]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(13) Scan parquet default.customer
Output [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(14) ColumnarToRow [codegen id : 4]
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]

(15) Filter [codegen id : 4]
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Condition : (isnotnull(c_customer_sk#15) AND isnotnull(c_birth_country#18))

(16) Exchange
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: hashpartitioning(c_customer_sk#15, 5), ENSURE_REQUIREMENTS, [id=#19]

(17) Sort [codegen id : 5]
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: [c_customer_sk#15 ASC NULLS FIRST], false, 0

(18) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#15]
Join condition: None

(19) Project [codegen id : 6]
Output [12]: [ss_item_sk#1, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, c_birth_country#18]
Input [14]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]

(20) Exchange
Input [12]: [ss_item_sk#1, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: hashpartitioning(ss_ticket_number#4, ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#20]

(21) Sort [codegen id : 7]
Input [12]: [ss_item_sk#1, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: [ss_ticket_number#4 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST], false, 0

(22) Scan parquet default.store_returns
Output [3]: [sr_item_sk#21, sr_ticket_number#22, sr_returned_date_sk#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(23) ColumnarToRow [codegen id : 8]
Input [3]: [sr_item_sk#21, sr_ticket_number#22, sr_returned_date_sk#23]

(24) Filter [codegen id : 8]
Input [3]: [sr_item_sk#21, sr_ticket_number#22, sr_returned_date_sk#23]
Condition : (isnotnull(sr_ticket_number#22) AND isnotnull(sr_item_sk#21))

(25) Project [codegen id : 8]
Output [2]: [sr_item_sk#21, sr_ticket_number#22]
Input [3]: [sr_item_sk#21, sr_ticket_number#22, sr_returned_date_sk#23]

(26) Exchange
Input [2]: [sr_item_sk#21, sr_ticket_number#22]
Arguments: hashpartitioning(sr_ticket_number#22, sr_item_sk#21, 5), ENSURE_REQUIREMENTS, [id=#24]

(27) Sort [codegen id : 9]
Input [2]: [sr_item_sk#21, sr_ticket_number#22]
Arguments: [sr_ticket_number#22 ASC NULLS FIRST, sr_item_sk#21 ASC NULLS FIRST], false, 0

(28) SortMergeJoin [codegen id : 12]
Left keys [2]: [ss_ticket_number#4, ss_item_sk#1]
Right keys [2]: [sr_ticket_number#22, sr_item_sk#21]
Join condition: None

(29) Project [codegen id : 12]
Output [10]: [ss_store_sk#3, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, c_birth_country#18]
Input [14]: [ss_item_sk#1, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, c_birth_country#18, sr_item_sk#21, sr_ticket_number#22]

(30) Scan parquet default.store
Output [5]: [s_store_sk#25, s_store_name#26, s_market_id#27, s_state#28, s_zip#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(31) ColumnarToRow [codegen id : 10]
Input [5]: [s_store_sk#25, s_store_name#26, s_market_id#27, s_state#28, s_zip#29]

(32) Filter [codegen id : 10]
Input [5]: [s_store_sk#25, s_store_name#26, s_market_id#27, s_state#28, s_zip#29]
Condition : (((isnotnull(s_market_id#27) AND (s_market_id#27 = 8)) AND isnotnull(s_store_sk#25)) AND isnotnull(s_zip#29))

(33) Project [codegen id : 10]
Output [4]: [s_store_sk#25, s_store_name#26, s_state#28, s_zip#29]
Input [5]: [s_store_sk#25, s_store_name#26, s_market_id#27, s_state#28, s_zip#29]

(34) BroadcastExchange
Input [4]: [s_store_sk#25, s_store_name#26, s_state#28, s_zip#29]
Arguments: HashedRelationBroadcastMode(List(input[3, string, true]),false), [id=#30]

(35) Scan parquet default.customer_address
Output [3]: [ca_state#31, ca_zip#32, ca_country#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>

(36) ColumnarToRow
Input [3]: [ca_state#31, ca_zip#32, ca_country#33]

(37) Filter
Input [3]: [ca_state#31, ca_zip#32, ca_country#33]
Condition : (isnotnull(ca_country#33) AND isnotnull(ca_zip#32))

(38) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [s_zip#29]
Right keys [1]: [ca_zip#32]
Join condition: None

(39) Project [codegen id : 11]
Output [5]: [s_store_sk#25, s_store_name#26, s_state#28, ca_state#31, upper(ca_country#33) AS upper(spark_catalog.default.customer_address.ca_country)#34]
Input [7]: [s_store_sk#25, s_store_name#26, s_state#28, s_zip#29, ca_state#31, ca_zip#32, ca_country#33]

(40) BroadcastExchange
Input [5]: [s_store_sk#25, s_store_name#26, s_state#28, ca_state#31, upper(spark_catalog.default.customer_address.ca_country)#34]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[4, string, true]),false), [id=#35]

(41) BroadcastHashJoin [codegen id : 12]
Left keys [2]: [ss_store_sk#3, c_birth_country#18]
Right keys [2]: [s_store_sk#25, upper(spark_catalog.default.customer_address.ca_country)#34]
Join condition: None

(42) Project [codegen id : 12]
Output [11]: [ss_net_paid#5, s_store_name#26, s_state#28, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, ca_state#31]
Input [15]: [ss_store_sk#3, ss_net_paid#5, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, c_birth_country#18, s_store_sk#25, s_store_name#26, s_state#28, ca_state#31, upper(spark_catalog.default.customer_address.ca_country)#34]

(43) HashAggregate [codegen id : 12]
Input [11]: [ss_net_paid#5, s_store_name#26, s_state#28, i_current_price#8, i_size#9, i_color#10, i_units#11, i_manager_id#12, c_first_name#16, c_last_name#17, ca_state#31]
Keys [10]: [c_last_name#17, c_first_name#16, s_store_name#26, ca_state#31, s_state#28, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum#36]
Results [11]: [c_last_name#17, c_first_name#16, s_store_name#26, ca_state#31, s_state#28, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9, sum#37]

(44) Exchange
Input [11]: [c_last_name#17, c_first_name#16, s_store_name#26, ca_state#31, s_state#28, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9, sum#37]
Arguments: hashpartitioning(c_last_name#17, c_first_name#16, s_store_name#26, ca_state#31, s_state#28, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9, 5), ENSURE_REQUIREMENTS, [id=#38]

(45) HashAggregate [codegen id : 13]
Input [11]: [c_last_name#17, c_first_name#16, s_store_name#26, ca_state#31, s_state#28, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9, sum#37]
Keys [10]: [c_last_name#17, c_first_name#16, s_store_name#26, ca_state#31, s_state#28, i_color#10, i_current_price#8, i_manager_id#12, i_units#11, i_size#9]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#5))#39]
Results [4]: [c_last_name#17, c_first_name#16, s_store_name#26, MakeDecimal(sum(UnscaledValue(ss_net_paid#5))#39,17,2) AS netpaid#40]

(46) HashAggregate [codegen id : 13]
Input [4]: [c_last_name#17, c_first_name#16, s_store_name#26, netpaid#40]
Keys [3]: [c_last_name#17, c_first_name#16, s_store_name#26]
Functions [1]: [partial_sum(netpaid#40)]
Aggregate Attributes [2]: [sum#41, isEmpty#42]
Results [5]: [c_last_name#17, c_first_name#16, s_store_name#26, sum#43, isEmpty#44]

(47) Exchange
Input [5]: [c_last_name#17, c_first_name#16, s_store_name#26, sum#43, isEmpty#44]
Arguments: hashpartitioning(c_last_name#17, c_first_name#16, s_store_name#26, 5), ENSURE_REQUIREMENTS, [id=#45]

(48) HashAggregate [codegen id : 14]
Input [5]: [c_last_name#17, c_first_name#16, s_store_name#26, sum#43, isEmpty#44]
Keys [3]: [c_last_name#17, c_first_name#16, s_store_name#26]
Functions [1]: [sum(netpaid#40)]
Aggregate Attributes [1]: [sum(netpaid#40)#46]
Results [4]: [c_last_name#17, c_first_name#16, s_store_name#26, sum(netpaid#40)#46 AS paid#47]

(49) Filter [codegen id : 14]
Input [4]: [c_last_name#17, c_first_name#16, s_store_name#26, paid#47]
Condition : (isnotnull(paid#47) AND (cast(paid#47 as decimal(33,8)) > cast(Subquery scalar-subquery#48, [id=#49] as decimal(33,8))))

===== Subqueries =====

Subquery:1 Hosting operator id = 49 Hosting Expression = Subquery scalar-subquery#48, [id=#49]
* HashAggregate (97)
+- Exchange (96)
   +- * HashAggregate (95)
      +- * HashAggregate (94)
         +- Exchange (93)
            +- * HashAggregate (92)
               +- * Project (91)
                  +- * SortMergeJoin Inner (90)
                     :- * Sort (83)
                     :  +- Exchange (82)
                     :     +- * Project (81)
                     :        +- * SortMergeJoin Inner (80)
                     :           :- * Sort (77)
                     :           :  +- Exchange (76)
                     :           :     +- * Project (75)
                     :           :        +- * SortMergeJoin Inner (74)
                     :           :           :- * Sort (71)
                     :           :           :  +- Exchange (70)
                     :           :           :     +- * Project (69)
                     :           :           :        +- * SortMergeJoin Inner (68)
                     :           :           :           :- * Sort (62)
                     :           :           :           :  +- Exchange (61)
                     :           :           :           :     +- * Project (60)
                     :           :           :           :        +- * BroadcastHashJoin Inner BuildRight (59)
                     :           :           :           :           :- * Project (53)
                     :           :           :           :           :  +- * Filter (52)
                     :           :           :           :           :     +- * ColumnarToRow (51)
                     :           :           :           :           :        +- Scan parquet default.store_sales (50)
                     :           :           :           :           +- BroadcastExchange (58)
                     :           :           :           :              +- * Project (57)
                     :           :           :           :                 +- * Filter (56)
                     :           :           :           :                    +- * ColumnarToRow (55)
                     :           :           :           :                       +- Scan parquet default.store (54)
                     :           :           :           +- * Sort (67)
                     :           :           :              +- Exchange (66)
                     :           :           :                 +- * Filter (65)
                     :           :           :                    +- * ColumnarToRow (64)
                     :           :           :                       +- Scan parquet default.item (63)
                     :           :           +- * Sort (73)
                     :           :              +- ReusedExchange (72)
                     :           +- * Sort (79)
                     :              +- ReusedExchange (78)
                     +- * Sort (89)
                        +- Exchange (88)
                           +- * Project (87)
                              +- * Filter (86)
                                 +- * ColumnarToRow (85)
                                    +- Scan parquet default.customer_address (84)


(50) Scan parquet default.store_sales
Output [6]: [ss_item_sk#50, ss_customer_sk#51, ss_store_sk#52, ss_ticket_number#53, ss_net_paid#54, ss_sold_date_sk#55]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(51) ColumnarToRow [codegen id : 2]
Input [6]: [ss_item_sk#50, ss_customer_sk#51, ss_store_sk#52, ss_ticket_number#53, ss_net_paid#54, ss_sold_date_sk#55]

(52) Filter [codegen id : 2]
Input [6]: [ss_item_sk#50, ss_customer_sk#51, ss_store_sk#52, ss_ticket_number#53, ss_net_paid#54, ss_sold_date_sk#55]
Condition : (((isnotnull(ss_ticket_number#53) AND isnotnull(ss_item_sk#50)) AND isnotnull(ss_store_sk#52)) AND isnotnull(ss_customer_sk#51))

(53) Project [codegen id : 2]
Output [5]: [ss_item_sk#50, ss_customer_sk#51, ss_store_sk#52, ss_ticket_number#53, ss_net_paid#54]
Input [6]: [ss_item_sk#50, ss_customer_sk#51, ss_store_sk#52, ss_ticket_number#53, ss_net_paid#54, ss_sold_date_sk#55]

(54) Scan parquet default.store
Output [5]: [s_store_sk#56, s_store_name#57, s_market_id#58, s_state#59, s_zip#60]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(55) ColumnarToRow [codegen id : 1]
Input [5]: [s_store_sk#56, s_store_name#57, s_market_id#58, s_state#59, s_zip#60]

(56) Filter [codegen id : 1]
Input [5]: [s_store_sk#56, s_store_name#57, s_market_id#58, s_state#59, s_zip#60]
Condition : (((isnotnull(s_market_id#58) AND (s_market_id#58 = 8)) AND isnotnull(s_store_sk#56)) AND isnotnull(s_zip#60))

(57) Project [codegen id : 1]
Output [4]: [s_store_sk#56, s_store_name#57, s_state#59, s_zip#60]
Input [5]: [s_store_sk#56, s_store_name#57, s_market_id#58, s_state#59, s_zip#60]

(58) BroadcastExchange
Input [4]: [s_store_sk#56, s_store_name#57, s_state#59, s_zip#60]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#61]

(59) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_store_sk#52]
Right keys [1]: [s_store_sk#56]
Join condition: None

(60) Project [codegen id : 2]
Output [7]: [ss_item_sk#50, ss_customer_sk#51, ss_ticket_number#53, ss_net_paid#54, s_store_name#57, s_state#59, s_zip#60]
Input [9]: [ss_item_sk#50, ss_customer_sk#51, ss_store_sk#52, ss_ticket_number#53, ss_net_paid#54, s_store_sk#56, s_store_name#57, s_state#59, s_zip#60]

(61) Exchange
Input [7]: [ss_item_sk#50, ss_customer_sk#51, ss_ticket_number#53, ss_net_paid#54, s_store_name#57, s_state#59, s_zip#60]
Arguments: hashpartitioning(ss_item_sk#50, 5), ENSURE_REQUIREMENTS, [id=#62]

(62) Sort [codegen id : 3]
Input [7]: [ss_item_sk#50, ss_customer_sk#51, ss_ticket_number#53, ss_net_paid#54, s_store_name#57, s_state#59, s_zip#60]
Arguments: [ss_item_sk#50 ASC NULLS FIRST], false, 0

(63) Scan parquet default.item
Output [6]: [i_item_sk#63, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(64) ColumnarToRow [codegen id : 4]
Input [6]: [i_item_sk#63, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68]

(65) Filter [codegen id : 4]
Input [6]: [i_item_sk#63, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68]
Condition : isnotnull(i_item_sk#63)

(66) Exchange
Input [6]: [i_item_sk#63, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68]
Arguments: hashpartitioning(i_item_sk#63, 5), ENSURE_REQUIREMENTS, [id=#69]

(67) Sort [codegen id : 5]
Input [6]: [i_item_sk#63, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68]
Arguments: [i_item_sk#63 ASC NULLS FIRST], false, 0

(68) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#50]
Right keys [1]: [i_item_sk#63]
Join condition: None

(69) Project [codegen id : 6]
Output [12]: [ss_item_sk#50, ss_customer_sk#51, ss_ticket_number#53, ss_net_paid#54, s_store_name#57, s_state#59, s_zip#60, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68]
Input [13]: [ss_item_sk#50, ss_customer_sk#51, ss_ticket_number#53, ss_net_paid#54, s_store_name#57, s_state#59, s_zip#60, i_item_sk#63, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68]

(70) Exchange
Input [12]: [ss_item_sk#50, ss_customer_sk#51, ss_ticket_number#53, ss_net_paid#54, s_store_name#57, s_state#59, s_zip#60, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68]
Arguments: hashpartitioning(ss_customer_sk#51, 5), ENSURE_REQUIREMENTS, [id=#70]

(71) Sort [codegen id : 7]
Input [12]: [ss_item_sk#50, ss_customer_sk#51, ss_ticket_number#53, ss_net_paid#54, s_store_name#57, s_state#59, s_zip#60, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68]
Arguments: [ss_customer_sk#51 ASC NULLS FIRST], false, 0

(72) ReusedExchange [Reuses operator id: 16]
Output [4]: [c_customer_sk#71, c_first_name#72, c_last_name#73, c_birth_country#74]

(73) Sort [codegen id : 9]
Input [4]: [c_customer_sk#71, c_first_name#72, c_last_name#73, c_birth_country#74]
Arguments: [c_customer_sk#71 ASC NULLS FIRST], false, 0

(74) SortMergeJoin [codegen id : 10]
Left keys [1]: [ss_customer_sk#51]
Right keys [1]: [c_customer_sk#71]
Join condition: None

(75) Project [codegen id : 10]
Output [14]: [ss_item_sk#50, ss_ticket_number#53, ss_net_paid#54, s_store_name#57, s_state#59, s_zip#60, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68, c_first_name#72, c_last_name#73, c_birth_country#74]
Input [16]: [ss_item_sk#50, ss_customer_sk#51, ss_ticket_number#53, ss_net_paid#54, s_store_name#57, s_state#59, s_zip#60, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68, c_customer_sk#71, c_first_name#72, c_last_name#73, c_birth_country#74]

(76) Exchange
Input [14]: [ss_item_sk#50, ss_ticket_number#53, ss_net_paid#54, s_store_name#57, s_state#59, s_zip#60, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68, c_first_name#72, c_last_name#73, c_birth_country#74]
Arguments: hashpartitioning(ss_ticket_number#53, ss_item_sk#50, 5), ENSURE_REQUIREMENTS, [id=#75]

(77) Sort [codegen id : 11]
Input [14]: [ss_item_sk#50, ss_ticket_number#53, ss_net_paid#54, s_store_name#57, s_state#59, s_zip#60, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68, c_first_name#72, c_last_name#73, c_birth_country#74]
Arguments: [ss_ticket_number#53 ASC NULLS FIRST, ss_item_sk#50 ASC NULLS FIRST], false, 0

(78) ReusedExchange [Reuses operator id: 26]
Output [2]: [sr_item_sk#76, sr_ticket_number#77]

(79) Sort [codegen id : 13]
Input [2]: [sr_item_sk#76, sr_ticket_number#77]
Arguments: [sr_ticket_number#77 ASC NULLS FIRST, sr_item_sk#76 ASC NULLS FIRST], false, 0

(80) SortMergeJoin [codegen id : 14]
Left keys [2]: [ss_ticket_number#53, ss_item_sk#50]
Right keys [2]: [sr_ticket_number#77, sr_item_sk#76]
Join condition: None

(81) Project [codegen id : 14]
Output [12]: [ss_net_paid#54, s_store_name#57, s_state#59, s_zip#60, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68, c_first_name#72, c_last_name#73, c_birth_country#74]
Input [16]: [ss_item_sk#50, ss_ticket_number#53, ss_net_paid#54, s_store_name#57, s_state#59, s_zip#60, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68, c_first_name#72, c_last_name#73, c_birth_country#74, sr_item_sk#76, sr_ticket_number#77]

(82) Exchange
Input [12]: [ss_net_paid#54, s_store_name#57, s_state#59, s_zip#60, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68, c_first_name#72, c_last_name#73, c_birth_country#74]
Arguments: hashpartitioning(c_birth_country#74, s_zip#60, 5), ENSURE_REQUIREMENTS, [id=#78]

(83) Sort [codegen id : 15]
Input [12]: [ss_net_paid#54, s_store_name#57, s_state#59, s_zip#60, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68, c_first_name#72, c_last_name#73, c_birth_country#74]
Arguments: [c_birth_country#74 ASC NULLS FIRST, s_zip#60 ASC NULLS FIRST], false, 0

(84) Scan parquet default.customer_address
Output [3]: [ca_state#79, ca_zip#80, ca_country#81]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>

(85) ColumnarToRow [codegen id : 16]
Input [3]: [ca_state#79, ca_zip#80, ca_country#81]

(86) Filter [codegen id : 16]
Input [3]: [ca_state#79, ca_zip#80, ca_country#81]
Condition : ((isnotnull(ca_country#81) AND isnotnull(ca_zip#80)) AND isnotnull(upper(ca_country#81)))

(87) Project [codegen id : 16]
Output [3]: [ca_state#79, ca_zip#80, upper(ca_country#81) AS upper(spark_catalog.default.customer_address.ca_country)#82]
Input [3]: [ca_state#79, ca_zip#80, ca_country#81]

(88) Exchange
Input [3]: [ca_state#79, ca_zip#80, upper(spark_catalog.default.customer_address.ca_country)#82]
Arguments: hashpartitioning(upper(spark_catalog.default.customer_address.ca_country)#82, ca_zip#80, 5), ENSURE_REQUIREMENTS, [id=#83]

(89) Sort [codegen id : 17]
Input [3]: [ca_state#79, ca_zip#80, upper(spark_catalog.default.customer_address.ca_country)#82]
Arguments: [upper(spark_catalog.default.customer_address.ca_country)#82 ASC NULLS FIRST, ca_zip#80 ASC NULLS FIRST], false, 0

(90) SortMergeJoin [codegen id : 18]
Left keys [2]: [c_birth_country#74, s_zip#60]
Right keys [2]: [upper(spark_catalog.default.customer_address.ca_country)#82, ca_zip#80]
Join condition: None

(91) Project [codegen id : 18]
Output [11]: [ss_net_paid#54, s_store_name#57, s_state#59, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68, c_first_name#72, c_last_name#73, ca_state#79]
Input [15]: [ss_net_paid#54, s_store_name#57, s_state#59, s_zip#60, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68, c_first_name#72, c_last_name#73, c_birth_country#74, ca_state#79, ca_zip#80, upper(spark_catalog.default.customer_address.ca_country)#82]

(92) HashAggregate [codegen id : 18]
Input [11]: [ss_net_paid#54, s_store_name#57, s_state#59, i_current_price#64, i_size#65, i_color#66, i_units#67, i_manager_id#68, c_first_name#72, c_last_name#73, ca_state#79]
Keys [10]: [c_last_name#73, c_first_name#72, s_store_name#57, ca_state#79, s_state#59, i_color#66, i_current_price#64, i_manager_id#68, i_units#67, i_size#65]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#54))]
Aggregate Attributes [1]: [sum#84]
Results [11]: [c_last_name#73, c_first_name#72, s_store_name#57, ca_state#79, s_state#59, i_color#66, i_current_price#64, i_manager_id#68, i_units#67, i_size#65, sum#85]

(93) Exchange
Input [11]: [c_last_name#73, c_first_name#72, s_store_name#57, ca_state#79, s_state#59, i_color#66, i_current_price#64, i_manager_id#68, i_units#67, i_size#65, sum#85]
Arguments: hashpartitioning(c_last_name#73, c_first_name#72, s_store_name#57, ca_state#79, s_state#59, i_color#66, i_current_price#64, i_manager_id#68, i_units#67, i_size#65, 5), ENSURE_REQUIREMENTS, [id=#86]

(94) HashAggregate [codegen id : 19]
Input [11]: [c_last_name#73, c_first_name#72, s_store_name#57, ca_state#79, s_state#59, i_color#66, i_current_price#64, i_manager_id#68, i_units#67, i_size#65, sum#85]
Keys [10]: [c_last_name#73, c_first_name#72, s_store_name#57, ca_state#79, s_state#59, i_color#66, i_current_price#64, i_manager_id#68, i_units#67, i_size#65]
Functions [1]: [sum(UnscaledValue(ss_net_paid#54))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#54))#87]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_paid#54))#87,17,2) AS netpaid#40]

(95) HashAggregate [codegen id : 19]
Input [1]: [netpaid#40]
Keys: []
Functions [1]: [partial_avg(netpaid#40)]
Aggregate Attributes [2]: [sum#88, count#89]
Results [2]: [sum#90, count#91]

(96) Exchange
Input [2]: [sum#90, count#91]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#92]

(97) HashAggregate [codegen id : 20]
Input [2]: [sum#90, count#91]
Keys: []
Functions [1]: [avg(netpaid#40)]
Aggregate Attributes [1]: [avg(netpaid#40)#93]
Results [1]: [CheckOverflow((0.050000 * promote_precision(avg(netpaid#40)#93)), DecimalType(24,8), true) AS (0.05 * avg(netpaid))#94]


