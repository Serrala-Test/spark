== Physical Plan ==
* HashAggregate (55)
+- Exchange (54)
   +- * HashAggregate (53)
      +- * HashAggregate (52)
         +- * HashAggregate (51)
            +- * HashAggregate (50)
               +- * HashAggregate (49)
                  +- * HashAggregate (48)
                     +- Exchange (47)
                        +- * HashAggregate (46)
                           +- * BroadcastHashJoin LeftAnti BuildRight (45)
                              :- * BroadcastHashJoin LeftAnti BuildRight (31)
                              :  :- * Project (17)
                              :  :  +- * BroadcastHashJoin Inner BuildRight (16)
                              :  :     :- * Project (10)
                              :  :     :  +- * BroadcastHashJoin Inner BuildRight (9)
                              :  :     :     :- * Filter (3)
                              :  :     :     :  +- * ColumnarToRow (2)
                              :  :     :     :     +- Scan parquet default.store_sales (1)
                              :  :     :     +- BroadcastExchange (8)
                              :  :     :        +- * Project (7)
                              :  :     :           +- * Filter (6)
                              :  :     :              +- * ColumnarToRow (5)
                              :  :     :                 +- Scan parquet default.date_dim (4)
                              :  :     +- BroadcastExchange (15)
                              :  :        +- * Project (14)
                              :  :           +- * Filter (13)
                              :  :              +- * ColumnarToRow (12)
                              :  :                 +- Scan parquet default.customer (11)
                              :  +- BroadcastExchange (30)
                              :     +- * HashAggregate (29)
                              :        +- Exchange (28)
                              :           +- * HashAggregate (27)
                              :              +- * Project (26)
                              :                 +- * BroadcastHashJoin Inner BuildRight (25)
                              :                    :- * Project (23)
                              :                    :  +- * BroadcastHashJoin Inner BuildRight (22)
                              :                    :     :- * Filter (20)
                              :                    :     :  +- * ColumnarToRow (19)
                              :                    :     :     +- Scan parquet default.catalog_sales (18)
                              :                    :     +- ReusedExchange (21)
                              :                    +- ReusedExchange (24)
                              +- BroadcastExchange (44)
                                 +- * HashAggregate (43)
                                    +- Exchange (42)
                                       +- * HashAggregate (41)
                                          +- * Project (40)
                                             +- * BroadcastHashJoin Inner BuildRight (39)
                                                :- * Project (37)
                                                :  +- * BroadcastHashJoin Inner BuildRight (36)
                                                :     :- * Filter (34)
                                                :     :  +- * ColumnarToRow (33)
                                                :     :     +- Scan parquet default.web_sales (32)
                                                :     +- ReusedExchange (35)
                                                +- ReusedExchange (38)


(1) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#1, ss_customer_sk#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int>

(2) ColumnarToRow [codegen id : 11]
Input [2]: [ss_sold_date_sk#1, ss_customer_sk#2]

(3) Filter [codegen id : 11]
Input [2]: [ss_sold_date_sk#1, ss_customer_sk#2]
Condition : (isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_customer_sk#2))

(4) Scan parquet default.date_dim
Output [3]: [d_date_sk#3, d_date#4, d_month_seq#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#3, d_date#4, d_month_seq#5]

(6) Filter [codegen id : 1]
Input [3]: [d_date_sk#3, d_date#4, d_month_seq#5]
Condition : (((isnotnull(d_month_seq#5) AND (d_month_seq#5 >= 1200)) AND (d_month_seq#5 <= 1211)) AND isnotnull(d_date_sk#3))

(7) Project [codegen id : 1]
Output [2]: [d_date_sk#3, d_date#4]
Input [3]: [d_date_sk#3, d_date#4, d_month_seq#5]

(8) BroadcastExchange
Input [2]: [d_date_sk#3, d_date#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#6]

(9) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#3]
Join condition: None

(10) Project [codegen id : 11]
Output [2]: [ss_customer_sk#2, d_date#4]
Input [4]: [ss_sold_date_sk#1, ss_customer_sk#2, d_date_sk#3, d_date#4]

(11) Scan parquet default.customer
Output [3]: [c_customer_sk#7, c_first_name#8, c_last_name#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(12) ColumnarToRow [codegen id : 2]
Input [3]: [c_customer_sk#7, c_first_name#8, c_last_name#9]

(13) Filter [codegen id : 2]
Input [3]: [c_customer_sk#7, c_first_name#8, c_last_name#9]
Condition : isnotnull(c_customer_sk#7)

(14) Project [codegen id : 2]
Output [3]: [c_customer_sk#7, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#8, 20, false, true) AS c_first_name#10, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#9, 30, false, true) AS c_last_name#11]
Input [3]: [c_customer_sk#7, c_first_name#8, c_last_name#9]

(15) BroadcastExchange
Input [3]: [c_customer_sk#7, c_first_name#10, c_last_name#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(16) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#7]
Join condition: None

(17) Project [codegen id : 11]
Output [3]: [d_date#4, c_first_name#10, c_last_name#11]
Input [5]: [ss_customer_sk#2, d_date#4, c_customer_sk#7, c_first_name#10, c_last_name#11]

(18) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#13, cs_bill_customer_sk#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int>

(19) ColumnarToRow [codegen id : 5]
Input [2]: [cs_sold_date_sk#13, cs_bill_customer_sk#14]

(20) Filter [codegen id : 5]
Input [2]: [cs_sold_date_sk#13, cs_bill_customer_sk#14]
Condition : (isnotnull(cs_sold_date_sk#13) AND isnotnull(cs_bill_customer_sk#14))

(21) ReusedExchange [Reuses operator id: 8]
Output [2]: [d_date_sk#15, d_date#16]

(22) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_sold_date_sk#13]
Right keys [1]: [d_date_sk#15]
Join condition: None

(23) Project [codegen id : 5]
Output [2]: [cs_bill_customer_sk#14, d_date#16]
Input [4]: [cs_sold_date_sk#13, cs_bill_customer_sk#14, d_date_sk#15, d_date#16]

(24) ReusedExchange [Reuses operator id: 15]
Output [3]: [c_customer_sk#17, c_first_name#18, c_last_name#19]

(25) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_bill_customer_sk#14]
Right keys [1]: [c_customer_sk#17]
Join condition: None

(26) Project [codegen id : 5]
Output [3]: [c_last_name#19, c_first_name#18, d_date#16]
Input [5]: [cs_bill_customer_sk#14, d_date#16, c_customer_sk#17, c_first_name#18, c_last_name#19]

(27) HashAggregate [codegen id : 5]
Input [3]: [c_last_name#19, c_first_name#18, d_date#16]
Keys [3]: [c_last_name#19, c_first_name#18, d_date#16]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#19, c_first_name#18, d_date#16]

(28) Exchange
Input [3]: [c_last_name#19, c_first_name#18, d_date#16]
Arguments: hashpartitioning(c_last_name#19, c_first_name#18, d_date#16, 5), ENSURE_REQUIREMENTS, [id=#20]

(29) HashAggregate [codegen id : 6]
Input [3]: [c_last_name#19, c_first_name#18, d_date#16]
Keys [3]: [c_last_name#19, c_first_name#18, d_date#16]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#19, c_first_name#18, d_date#16]

(30) BroadcastExchange
Input [3]: [c_last_name#19, c_first_name#18, d_date#16]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true]), coalesce(input[1, string, true], ), isnull(input[1, string, true]), coalesce(input[2, date, true], 0), isnull(input[2, date, true])),false), [id=#21]

(31) BroadcastHashJoin [codegen id : 11]
Left keys [6]: [coalesce(c_last_name#11, ), isnull(c_last_name#11), coalesce(c_first_name#10, ), isnull(c_first_name#10), coalesce(d_date#4, 0), isnull(d_date#4)]
Right keys [6]: [coalesce(c_last_name#19, ), isnull(c_last_name#19), coalesce(c_first_name#18, ), isnull(c_first_name#18), coalesce(d_date#16, 0), isnull(d_date#16)]
Join condition: None

(32) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#22, ws_bill_customer_sk#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int>

(33) ColumnarToRow [codegen id : 9]
Input [2]: [ws_sold_date_sk#22, ws_bill_customer_sk#23]

(34) Filter [codegen id : 9]
Input [2]: [ws_sold_date_sk#22, ws_bill_customer_sk#23]
Condition : (isnotnull(ws_sold_date_sk#22) AND isnotnull(ws_bill_customer_sk#23))

(35) ReusedExchange [Reuses operator id: 8]
Output [2]: [d_date_sk#24, d_date#25]

(36) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_sold_date_sk#22]
Right keys [1]: [d_date_sk#24]
Join condition: None

(37) Project [codegen id : 9]
Output [2]: [ws_bill_customer_sk#23, d_date#25]
Input [4]: [ws_sold_date_sk#22, ws_bill_customer_sk#23, d_date_sk#24, d_date#25]

(38) ReusedExchange [Reuses operator id: 15]
Output [3]: [c_customer_sk#26, c_first_name#27, c_last_name#28]

(39) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_bill_customer_sk#23]
Right keys [1]: [c_customer_sk#26]
Join condition: None

(40) Project [codegen id : 9]
Output [3]: [c_last_name#28, c_first_name#27, d_date#25]
Input [5]: [ws_bill_customer_sk#23, d_date#25, c_customer_sk#26, c_first_name#27, c_last_name#28]

(41) HashAggregate [codegen id : 9]
Input [3]: [c_last_name#28, c_first_name#27, d_date#25]
Keys [3]: [c_last_name#28, c_first_name#27, d_date#25]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#28, c_first_name#27, d_date#25]

(42) Exchange
Input [3]: [c_last_name#28, c_first_name#27, d_date#25]
Arguments: hashpartitioning(c_last_name#28, c_first_name#27, d_date#25, 5), ENSURE_REQUIREMENTS, [id=#29]

(43) HashAggregate [codegen id : 10]
Input [3]: [c_last_name#28, c_first_name#27, d_date#25]
Keys [3]: [c_last_name#28, c_first_name#27, d_date#25]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#28, c_first_name#27, d_date#25]

(44) BroadcastExchange
Input [3]: [c_last_name#28, c_first_name#27, d_date#25]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true]), coalesce(input[1, string, true], ), isnull(input[1, string, true]), coalesce(input[2, date, true], 0), isnull(input[2, date, true])),false), [id=#30]

(45) BroadcastHashJoin [codegen id : 11]
Left keys [6]: [coalesce(c_last_name#11, ), isnull(c_last_name#11), coalesce(c_first_name#10, ), isnull(c_first_name#10), coalesce(d_date#4, 0), isnull(d_date#4)]
Right keys [6]: [coalesce(c_last_name#28, ), isnull(c_last_name#28), coalesce(c_first_name#27, ), isnull(c_first_name#27), coalesce(d_date#25, 0), isnull(d_date#25)]
Join condition: None

(46) HashAggregate [codegen id : 11]
Input [3]: [d_date#4, c_first_name#10, c_last_name#11]
Keys [3]: [c_last_name#11, c_first_name#10, d_date#4]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#11, c_first_name#10, d_date#4]

(47) Exchange
Input [3]: [c_last_name#11, c_first_name#10, d_date#4]
Arguments: hashpartitioning(c_last_name#11, c_first_name#10, d_date#4, 5), ENSURE_REQUIREMENTS, [id=#31]

(48) HashAggregate [codegen id : 12]
Input [3]: [c_last_name#11, c_first_name#10, d_date#4]
Keys [3]: [c_last_name#11, c_first_name#10, d_date#4]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#11, c_first_name#10, d_date#4]

(49) HashAggregate [codegen id : 12]
Input [3]: [c_last_name#11, c_first_name#10, d_date#4]
Keys [3]: [c_last_name#11, c_first_name#10, d_date#4]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#11, c_first_name#10, d_date#4]

(50) HashAggregate [codegen id : 12]
Input [3]: [c_last_name#11, c_first_name#10, d_date#4]
Keys [3]: [c_last_name#11, c_first_name#10, d_date#4]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#11, c_first_name#10, d_date#4]

(51) HashAggregate [codegen id : 12]
Input [3]: [c_last_name#11, c_first_name#10, d_date#4]
Keys [3]: [c_last_name#11, c_first_name#10, d_date#4]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#11, c_first_name#10, d_date#4]

(52) HashAggregate [codegen id : 12]
Input [3]: [c_last_name#11, c_first_name#10, d_date#4]
Keys [3]: [c_last_name#11, c_first_name#10, d_date#4]
Functions: []
Aggregate Attributes: []
Results: []

(53) HashAggregate [codegen id : 12]
Input: []
Keys: []
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#32]
Results [1]: [count#33]

(54) Exchange
Input [1]: [count#33]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#34]

(55) HashAggregate [codegen id : 13]
Input [1]: [count#33]
Keys: []
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#35]
Results [1]: [count(1)#35 AS count(1)#36]

