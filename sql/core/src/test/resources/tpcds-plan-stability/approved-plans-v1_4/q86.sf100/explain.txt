== Physical Plan ==
TakeOrderedAndProject (19)
+- * Project (18)
   +- Window (17)
      +- * Sort (16)
         +- Exchange (15)
            +- * HashAggregate (14)
               +- Exchange (13)
                  +- * HashAggregate (12)
                     +- * Expand (11)
                        +- * Project (10)
                           +- * BroadcastHashJoin Inner BuildRight (9)
                              :- * Project (5)
                              :  +- * BroadcastHashJoin Inner BuildRight (4)
                              :     :- * ColumnarToRow (2)
                              :     :  +- Scan parquet default.web_sales (1)
                              :     +- ReusedExchange (3)
                              +- BroadcastExchange (8)
                                 +- * ColumnarToRow (7)
                                    +- Scan parquet default.item (6)


(1) Scan parquet default.web_sales
Output [3]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#3), dynamicpruningexpression(ws_sold_date_sk#3 IN dynamicpruning#4)]
ReadSchema: struct<ws_item_sk:int,ws_net_paid:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [3]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3]

(3) ReusedExchange [Reuses operator id: 24]
Output [1]: [d_date_sk#5]

(4) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ws_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join condition: None

(5) Project [codegen id : 3]
Output [2]: [ws_item_sk#1, ws_net_paid#2]
Input [4]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3, d_date_sk#5]

(6) Scan parquet default.item
Output [3]: [i_item_sk#6, i_class#7, i_category#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(7) ColumnarToRow [codegen id : 2]
Input [3]: [i_item_sk#6, i_class#7, i_category#8]

(8) BroadcastExchange
Input [3]: [i_item_sk#6, i_class#7, i_category#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ws_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join condition: None

(10) Project [codegen id : 3]
Output [3]: [ws_net_paid#2, i_category#8, i_class#7]
Input [5]: [ws_item_sk#1, ws_net_paid#2, i_item_sk#6, i_class#7, i_category#8]

(11) Expand [codegen id : 3]
Input [3]: [ws_net_paid#2, i_category#8, i_class#7]
Arguments: [[ws_net_paid#2, i_category#8, i_class#7, 0], [ws_net_paid#2, i_category#8, null, 1], [ws_net_paid#2, null, null, 3]], [ws_net_paid#2, i_category#10, i_class#11, spark_grouping_id#12]

(12) HashAggregate [codegen id : 3]
Input [4]: [ws_net_paid#2, i_category#10, i_class#11, spark_grouping_id#12]
Keys [3]: [i_category#10, i_class#11, spark_grouping_id#12]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#2))]
Aggregate Attributes [1]: [sum#13]
Results [4]: [i_category#10, i_class#11, spark_grouping_id#12, sum#14]

(13) Exchange
Input [4]: [i_category#10, i_class#11, spark_grouping_id#12, sum#14]
Arguments: hashpartitioning(i_category#10, i_class#11, spark_grouping_id#12, 5), ENSURE_REQUIREMENTS, [id=#15]

(14) HashAggregate [codegen id : 4]
Input [4]: [i_category#10, i_class#11, spark_grouping_id#12, sum#14]
Keys [3]: [i_category#10, i_class#11, spark_grouping_id#12]
Functions [1]: [sum(UnscaledValue(ws_net_paid#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#2))#16]
Results [7]: [MakeDecimal(sum(UnscaledValue(ws_net_paid#2))#16,17,2) AS total_sum#17, i_category#10, i_class#11, (cast((shiftright(spark_grouping_id#12, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#12, 0) & 1) as tinyint)) AS lochierarchy#18, (cast((shiftright(spark_grouping_id#12, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#12, 0) & 1) as tinyint)) AS _w1#19, CASE WHEN (cast((shiftright(spark_grouping_id#12, 0) & 1) as tinyint) = 0) THEN i_category#10 END AS _w2#20, MakeDecimal(sum(UnscaledValue(ws_net_paid#2))#16,17,2) AS _w3#21]

(15) Exchange
Input [7]: [total_sum#17, i_category#10, i_class#11, lochierarchy#18, _w1#19, _w2#20, _w3#21]
Arguments: hashpartitioning(_w1#19, _w2#20, 5), ENSURE_REQUIREMENTS, [id=#22]

(16) Sort [codegen id : 5]
Input [7]: [total_sum#17, i_category#10, i_class#11, lochierarchy#18, _w1#19, _w2#20, _w3#21]
Arguments: [_w1#19 ASC NULLS FIRST, _w2#20 ASC NULLS FIRST, _w3#21 DESC NULLS LAST], false, 0

(17) Window
Input [7]: [total_sum#17, i_category#10, i_class#11, lochierarchy#18, _w1#19, _w2#20, _w3#21]
Arguments: [rank(_w3#21) windowspecdefinition(_w1#19, _w2#20, _w3#21 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#23], [_w1#19, _w2#20], [_w3#21 DESC NULLS LAST]

(18) Project [codegen id : 6]
Output [5]: [total_sum#17, i_category#10, i_class#11, lochierarchy#18, rank_within_parent#23]
Input [8]: [total_sum#17, i_category#10, i_class#11, lochierarchy#18, _w1#19, _w2#20, _w3#21, rank_within_parent#23]

(19) TakeOrderedAndProject
Input [5]: [total_sum#17, i_category#10, i_class#11, lochierarchy#18, rank_within_parent#23]
Arguments: 100, [lochierarchy#18 DESC NULLS LAST, CASE WHEN (lochierarchy#18 = 0) THEN i_category#10 END ASC NULLS FIRST, rank_within_parent#23 ASC NULLS FIRST], [total_sum#17, i_category#10, i_class#11, lochierarchy#18, rank_within_parent#23]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (24)
+- * Project (23)
   +- * Filter (22)
      +- * ColumnarToRow (21)
         +- Scan parquet default.date_dim (20)


(20) Scan parquet default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(21) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#5, d_month_seq#24]

(22) Filter [codegen id : 1]
Input [2]: [d_date_sk#5, d_month_seq#24]
Condition : ((d_month_seq#24 >= 1200) AND (d_month_seq#24 <= 1211))

(23) Project [codegen id : 1]
Output [1]: [d_date_sk#5]
Input [2]: [d_date_sk#5, d_month_seq#24]

(24) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#25]


