== Physical Plan ==
TakeOrderedAndProject (25)
+- * Project (24)
   +- Window (23)
      +- * Sort (22)
         +- Exchange (21)
            +- * HashAggregate (20)
               +- Exchange (19)
                  +- * HashAggregate (18)
                     +- * Expand (17)
                        +- * Project (16)
                           +- * BroadcastHashJoin Inner BuildLeft (15)
                              :- BroadcastExchange (11)
                              :  +- * Project (10)
                              :     +- * BroadcastHashJoin Inner BuildLeft (9)
                              :        :- BroadcastExchange (4)
                              :        :  +- * Filter (3)
                              :        :     +- * ColumnarToRow (2)
                              :        :        +- Scan parquet default.web_sales (1)
                              :        +- * Project (8)
                              :           +- * Filter (7)
                              :              +- * ColumnarToRow (6)
                              :                 +- Scan parquet default.date_dim (5)
                              +- * Filter (14)
                                 +- * ColumnarToRow (13)
                                    +- Scan parquet default.item (12)


(1) Scan parquet default.web_sales
Output [3]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#3), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_net_paid:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3]

(3) Filter [codegen id : 1]
Input [3]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3]
Condition : isnotnull(ws_item_sk#1)

(4) BroadcastExchange
Input [3]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#4]

(5) Scan parquet default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(6) ColumnarToRow
Input [2]: [d_date_sk#5, d_month_seq#6]

(7) Filter
Input [2]: [d_date_sk#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1200)) AND (d_month_seq#6 <= 1211)) AND isnotnull(d_date_sk#5))

(8) Project
Output [1]: [d_date_sk#5]
Input [2]: [d_date_sk#5, d_month_seq#6]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join condition: None

(10) Project [codegen id : 2]
Output [2]: [ws_item_sk#1, ws_net_paid#2]
Input [4]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3, d_date_sk#5]

(11) BroadcastExchange
Input [2]: [ws_item_sk#1, ws_net_paid#2]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#7]

(12) Scan parquet default.item
Output [3]: [i_item_sk#8, i_class#9, i_category#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(13) ColumnarToRow
Input [3]: [i_item_sk#8, i_class#9, i_category#10]

(14) Filter
Input [3]: [i_item_sk#8, i_class#9, i_category#10]
Condition : isnotnull(i_item_sk#8)

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ws_item_sk#1]
Right keys [1]: [i_item_sk#8]
Join condition: None

(16) Project [codegen id : 3]
Output [3]: [ws_net_paid#2, i_category#10, i_class#9]
Input [5]: [ws_item_sk#1, ws_net_paid#2, i_item_sk#8, i_class#9, i_category#10]

(17) Expand [codegen id : 3]
Input [3]: [ws_net_paid#2, i_category#10, i_class#9]
Arguments: [List(ws_net_paid#2, i_category#10, i_class#9, 0), List(ws_net_paid#2, i_category#10, null, 1), List(ws_net_paid#2, null, null, 3)], [ws_net_paid#2, i_category#11, i_class#12, spark_grouping_id#13]

(18) HashAggregate [codegen id : 3]
Input [4]: [ws_net_paid#2, i_category#11, i_class#12, spark_grouping_id#13]
Keys [3]: [i_category#11, i_class#12, spark_grouping_id#13]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#2))]
Aggregate Attributes [1]: [sum#14]
Results [4]: [i_category#11, i_class#12, spark_grouping_id#13, sum#15]

(19) Exchange
Input [4]: [i_category#11, i_class#12, spark_grouping_id#13, sum#15]
Arguments: hashpartitioning(i_category#11, i_class#12, spark_grouping_id#13, 5), ENSURE_REQUIREMENTS, [id=#16]

(20) HashAggregate [codegen id : 4]
Input [4]: [i_category#11, i_class#12, spark_grouping_id#13, sum#15]
Keys [3]: [i_category#11, i_class#12, spark_grouping_id#13]
Functions [1]: [sum(UnscaledValue(ws_net_paid#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#2))#17]
Results [7]: [MakeDecimal(sum(UnscaledValue(ws_net_paid#2))#17,17,2) AS total_sum#18, i_category#11, i_class#12, (cast((shiftright(spark_grouping_id#13, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#13, 0) & 1) as tinyint)) AS lochierarchy#19, (cast((shiftright(spark_grouping_id#13, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#13, 0) & 1) as tinyint)) AS _w1#20, CASE WHEN (cast((shiftright(spark_grouping_id#13, 0) & 1) as tinyint) = 0) THEN i_category#11 END AS _w2#21, MakeDecimal(sum(UnscaledValue(ws_net_paid#2))#17,17,2) AS _w3#22]

(21) Exchange
Input [7]: [total_sum#18, i_category#11, i_class#12, lochierarchy#19, _w1#20, _w2#21, _w3#22]
Arguments: hashpartitioning(_w1#20, _w2#21, 5), ENSURE_REQUIREMENTS, [id=#23]

(22) Sort [codegen id : 5]
Input [7]: [total_sum#18, i_category#11, i_class#12, lochierarchy#19, _w1#20, _w2#21, _w3#22]
Arguments: [_w1#20 ASC NULLS FIRST, _w2#21 ASC NULLS FIRST, _w3#22 DESC NULLS LAST], false, 0

(23) Window
Input [7]: [total_sum#18, i_category#11, i_class#12, lochierarchy#19, _w1#20, _w2#21, _w3#22]
Arguments: [rank(_w3#22) windowspecdefinition(_w1#20, _w2#21, _w3#22 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#24], [_w1#20, _w2#21], [_w3#22 DESC NULLS LAST]

(24) Project [codegen id : 6]
Output [5]: [total_sum#18, i_category#11, i_class#12, lochierarchy#19, rank_within_parent#24]
Input [8]: [total_sum#18, i_category#11, i_class#12, lochierarchy#19, _w1#20, _w2#21, _w3#22, rank_within_parent#24]

(25) TakeOrderedAndProject
Input [5]: [total_sum#18, i_category#11, i_class#12, lochierarchy#19, rank_within_parent#24]
Arguments: 100, [lochierarchy#19 DESC NULLS LAST, CASE WHEN (lochierarchy#19 = 0) THEN i_category#11 END ASC NULLS FIRST, rank_within_parent#24 ASC NULLS FIRST], [total_sum#18, i_category#11, i_class#12, lochierarchy#19, rank_within_parent#24]

