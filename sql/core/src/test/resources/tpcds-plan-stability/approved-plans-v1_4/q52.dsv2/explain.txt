== Physical Plan ==
TakeOrderedAndProject (19)
+- * HashAggregate (18)
   +- Exchange (17)
      +- * HashAggregate (16)
         +- * Project (15)
            +- * BroadcastHashJoin Inner BuildRight (14)
               :- * Project (9)
               :  +- * BroadcastHashJoin Inner BuildLeft (8)
               :     :- BroadcastExchange (4)
               :     :  +- * Project (3)
               :     :     +- * Filter (2)
               :     :        +- BatchScan default.date_dim (1)
               :     +- * Project (7)
               :        +- * Filter (6)
               :           +- BatchScan default.store_sales (5)
               +- BroadcastExchange (13)
                  +- * Project (12)
                     +- * Filter (11)
                        +- BatchScan default.item (10)


(1) BatchScan default.date_dim
Output [3]: [d_date_sk#1, d_year#2, d_moy#3]
DataFilters: [isnotnull(d_moy#3), isnotnull(d_year#2), (d_moy#3 = 11), (d_year#2 = 2000), isnotnull(d_date_sk#1)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(2) Filter [codegen id : 1]
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]
Condition : ((((isnotnull(d_moy#3) AND isnotnull(d_year#2)) AND (d_moy#3 = 11)) AND (d_year#2 = 2000)) AND isnotnull(d_date_sk#1))

(3) Project [codegen id : 1]
Output [2]: [d_date_sk#1, d_year#2]
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]

(4) BroadcastExchange
Input [2]: [d_date_sk#1, d_year#2]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(5) BatchScan default.store_sales
Output [3]: [ss_item_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6]
DataFilters: [isnotnull(ss_item_sk#4)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_sales]
PartitionFilters: [isnotnull(ss_sold_date_sk#6)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>

(6) Filter
Input [3]: [ss_item_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6]
Condition : isnotnull(ss_item_sk#4)

(7) Project
Output [3]: [ss_item_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6]
Input [3]: [ss_item_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [d_date_sk#1]
Right keys [1]: [ss_sold_date_sk#6]
Join type: Inner
Join condition: None

(9) Project [codegen id : 3]
Output [3]: [d_year#2, ss_item_sk#4, ss_ext_sales_price#5]
Input [5]: [d_date_sk#1, d_year#2, ss_item_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6]

(10) BatchScan default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_brand#9, i_manager_id#10]
DataFilters: [isnotnull(i_manager_id#10), (i_manager_id#10 = 1), isnotnull(i_item_sk#7)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,1), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manager_id:int>

(11) Filter [codegen id : 2]
Input [4]: [i_item_sk#7, i_brand_id#8, i_brand#9, i_manager_id#10]
Condition : ((isnotnull(i_manager_id#10) AND (i_manager_id#10 = 1)) AND isnotnull(i_item_sk#7))

(12) Project [codegen id : 2]
Output [3]: [i_item_sk#7, i_brand_id#8, i_brand#9]
Input [4]: [i_item_sk#7, i_brand_id#8, i_brand#9, i_manager_id#10]

(13) BroadcastExchange
Input [3]: [i_item_sk#7, i_brand_id#8, i_brand#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(14) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#4]
Right keys [1]: [i_item_sk#7]
Join type: Inner
Join condition: None

(15) Project [codegen id : 3]
Output [4]: [d_year#2, ss_ext_sales_price#5, i_brand_id#8, i_brand#9]
Input [6]: [d_year#2, ss_item_sk#4, ss_ext_sales_price#5, i_item_sk#7, i_brand_id#8, i_brand#9]

(16) HashAggregate [codegen id : 3]
Input [4]: [d_year#2, ss_ext_sales_price#5, i_brand_id#8, i_brand#9]
Keys [3]: [d_year#2, i_brand#9, i_brand_id#8]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#5))]
Aggregate Attributes [1]: [sum#11]
Results [4]: [d_year#2, i_brand#9, i_brand_id#8, sum#12]

(17) Exchange
Input [4]: [d_year#2, i_brand#9, i_brand_id#8, sum#12]
Arguments: hashpartitioning(d_year#2, i_brand#9, i_brand_id#8, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(18) HashAggregate [codegen id : 4]
Input [4]: [d_year#2, i_brand#9, i_brand_id#8, sum#12]
Keys [3]: [d_year#2, i_brand#9, i_brand_id#8]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#5))#13]
Results [4]: [d_year#2, i_brand_id#8 AS brand_id#14, i_brand#9 AS brand#15, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#5))#13,17,2) AS ext_price#16]

(19) TakeOrderedAndProject
Input [4]: [d_year#2, brand_id#14, brand#15, ext_price#16]
Arguments: 100, [d_year#2 ASC NULLS FIRST, ext_price#16 DESC NULLS LAST, brand_id#14 ASC NULLS FIRST], [d_year#2, brand_id#14, brand#15, ext_price#16]

