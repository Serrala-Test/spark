== Physical Plan ==
TakeOrderedAndProject (52)
+- * HashAggregate (51)
   +- Exchange (50)
      +- * HashAggregate (49)
         +- * Project (48)
            +- * BroadcastHashJoin Inner BuildRight (47)
               :- * Project (42)
               :  +- * BroadcastHashJoin Inner BuildRight (41)
               :     :- * Project (36)
               :     :  +- * BroadcastHashJoin Inner BuildRight (35)
               :     :     :- * Project (30)
               :     :     :  +- * BroadcastHashJoin Inner BuildRight (29)
               :     :     :     :- * Project (24)
               :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (23)
               :     :     :     :     :- * Project (18)
               :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (17)
               :     :     :     :     :     :- * Project (12)
               :     :     :     :     :     :  +- * SortMergeJoin Inner (11)
               :     :     :     :     :     :     :- * Sort (5)
               :     :     :     :     :     :     :  +- Exchange (4)
               :     :     :     :     :     :     :     +- * Project (3)
               :     :     :     :     :     :     :        +- * Filter (2)
               :     :     :     :     :     :     :           +- BatchScan default.web_sales (1)
               :     :     :     :     :     :     +- * Sort (10)
               :     :     :     :     :     :        +- Exchange (9)
               :     :     :     :     :     :           +- * Project (8)
               :     :     :     :     :     :              +- * Filter (7)
               :     :     :     :     :     :                 +- BatchScan default.web_returns (6)
               :     :     :     :     :     +- BroadcastExchange (16)
               :     :     :     :     :        +- * Project (15)
               :     :     :     :     :           +- * Filter (14)
               :     :     :     :     :              +- BatchScan default.web_page (13)
               :     :     :     :     +- BroadcastExchange (22)
               :     :     :     :        +- * Project (21)
               :     :     :     :           +- * Filter (20)
               :     :     :     :              +- BatchScan default.customer_demographics (19)
               :     :     :     +- BroadcastExchange (28)
               :     :     :        +- * Project (27)
               :     :     :           +- * Filter (26)
               :     :     :              +- BatchScan default.customer_demographics (25)
               :     :     +- BroadcastExchange (34)
               :     :        +- * Project (33)
               :     :           +- * Filter (32)
               :     :              +- BatchScan default.customer_address (31)
               :     +- BroadcastExchange (40)
               :        +- * Project (39)
               :           +- * Filter (38)
               :              +- BatchScan default.date_dim (37)
               +- BroadcastExchange (46)
                  +- * Project (45)
                     +- * Filter (44)
                        +- BatchScan default.reason (43)


(1) BatchScan default.web_sales
Output [7]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
DataFilters: [isnotnull(ws_item_sk#1), isnotnull(ws_order_number#3), isnotnull(ws_web_page_sk#2)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/web_sales]
PartitionFilters: [isnotnull(ws_sold_date_sk#7)]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_page_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_page_sk:int,ws_order_number:int,ws_quantity:int,ws_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(2) Filter [codegen id : 1]
Input [7]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Condition : (((((isnotnull(ws_item_sk#1) AND isnotnull(ws_order_number#3)) AND isnotnull(ws_web_page_sk#2)) AND ((((ws_sales_price#5 >= 100.00) AND (ws_sales_price#5 <= 150.00)) OR ((ws_sales_price#5 >= 50.00) AND (ws_sales_price#5 <= 100.00))) OR ((ws_sales_price#5 >= 150.00) AND (ws_sales_price#5 <= 200.00)))) AND ((((ws_net_profit#6 >= 100.00) AND (ws_net_profit#6 <= 200.00)) OR ((ws_net_profit#6 >= 150.00) AND (ws_net_profit#6 <= 300.00))) OR ((ws_net_profit#6 >= 50.00) AND (ws_net_profit#6 <= 250.00)))) AND might_contain(Subquery scalar-subquery#8, [id=#9], xxhash64(ws_sold_date_sk#7, 42)))

(3) Project [codegen id : 1]
Output [7]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Input [7]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]

(4) Exchange
Input [7]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Arguments: hashpartitioning(ws_item_sk#1, ws_order_number#3, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [7]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Arguments: [ws_item_sk#1 ASC NULLS FIRST, ws_order_number#3 ASC NULLS FIRST], false, 0

(6) BatchScan default.web_returns
Output [8]: [wr_item_sk#10, wr_refunded_cdemo_sk#11, wr_refunded_addr_sk#12, wr_returning_cdemo_sk#13, wr_reason_sk#14, wr_order_number#15, wr_fee#16, wr_refunded_cash#17]
DataFilters: [isnotnull(wr_item_sk#10), isnotnull(wr_order_number#15), isnotnull(wr_refunded_cdemo_sk#11), isnotnull(wr_returning_cdemo_sk#13), isnotnull(wr_refunded_addr_sk#12), isnotnull(wr_reason_sk#14)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number), IsNotNull(wr_refunded_cdemo_sk), IsNotNull(wr_returning_cdemo_sk), IsNotNull(wr_refunded_addr_sk), IsNotNull(wr_reason_sk)]
ReadSchema: struct<wr_item_sk:int,wr_refunded_cdemo_sk:int,wr_refunded_addr_sk:int,wr_returning_cdemo_sk:int,wr_reason_sk:int,wr_order_number:int,wr_fee:decimal(7,2),wr_refunded_cash:decimal(7,2)>

(7) Filter [codegen id : 3]
Input [8]: [wr_item_sk#10, wr_refunded_cdemo_sk#11, wr_refunded_addr_sk#12, wr_returning_cdemo_sk#13, wr_reason_sk#14, wr_order_number#15, wr_fee#16, wr_refunded_cash#17]
Condition : (((((((isnotnull(wr_item_sk#10) AND isnotnull(wr_order_number#15)) AND isnotnull(wr_refunded_cdemo_sk#11)) AND isnotnull(wr_returning_cdemo_sk#13)) AND isnotnull(wr_refunded_addr_sk#12)) AND isnotnull(wr_reason_sk#14)) AND might_contain(Subquery scalar-subquery#18, [id=#19], xxhash64(wr_refunded_cdemo_sk#11, 42))) AND might_contain(Subquery scalar-subquery#20, [id=#21], xxhash64(wr_refunded_addr_sk#12, 42)))

(8) Project [codegen id : 3]
Output [8]: [wr_item_sk#10, wr_refunded_cdemo_sk#11, wr_refunded_addr_sk#12, wr_returning_cdemo_sk#13, wr_reason_sk#14, wr_order_number#15, wr_fee#16, wr_refunded_cash#17]
Input [8]: [wr_item_sk#10, wr_refunded_cdemo_sk#11, wr_refunded_addr_sk#12, wr_returning_cdemo_sk#13, wr_reason_sk#14, wr_order_number#15, wr_fee#16, wr_refunded_cash#17]

(9) Exchange
Input [8]: [wr_item_sk#10, wr_refunded_cdemo_sk#11, wr_refunded_addr_sk#12, wr_returning_cdemo_sk#13, wr_reason_sk#14, wr_order_number#15, wr_fee#16, wr_refunded_cash#17]
Arguments: hashpartitioning(wr_item_sk#10, wr_order_number#15, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(10) Sort [codegen id : 4]
Input [8]: [wr_item_sk#10, wr_refunded_cdemo_sk#11, wr_refunded_addr_sk#12, wr_returning_cdemo_sk#13, wr_reason_sk#14, wr_order_number#15, wr_fee#16, wr_refunded_cash#17]
Arguments: [wr_item_sk#10 ASC NULLS FIRST, wr_order_number#15 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 11]
Left keys [2]: [ws_item_sk#1, ws_order_number#3]
Right keys [2]: [wr_item_sk#10, wr_order_number#15]
Join type: Inner
Join condition: None

(12) Project [codegen id : 11]
Output [11]: [ws_web_page_sk#2, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#11, wr_refunded_addr_sk#12, wr_returning_cdemo_sk#13, wr_reason_sk#14, wr_fee#16, wr_refunded_cash#17]
Input [15]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_item_sk#10, wr_refunded_cdemo_sk#11, wr_refunded_addr_sk#12, wr_returning_cdemo_sk#13, wr_reason_sk#14, wr_order_number#15, wr_fee#16, wr_refunded_cash#17]

(13) BatchScan default.web_page
Output [1]: [wp_web_page_sk#22]
DataFilters: [isnotnull(wp_web_page_sk#22)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/web_page]
PushedFilters: [IsNotNull(wp_web_page_sk)]
ReadSchema: struct<wp_web_page_sk:int>

(14) Filter [codegen id : 5]
Input [1]: [wp_web_page_sk#22]
Condition : isnotnull(wp_web_page_sk#22)

(15) Project [codegen id : 5]
Output [1]: [wp_web_page_sk#22]
Input [1]: [wp_web_page_sk#22]

(16) BroadcastExchange
Input [1]: [wp_web_page_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(17) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ws_web_page_sk#2]
Right keys [1]: [wp_web_page_sk#22]
Join type: Inner
Join condition: None

(18) Project [codegen id : 11]
Output [10]: [ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#11, wr_refunded_addr_sk#12, wr_returning_cdemo_sk#13, wr_reason_sk#14, wr_fee#16, wr_refunded_cash#17]
Input [12]: [ws_web_page_sk#2, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#11, wr_refunded_addr_sk#12, wr_returning_cdemo_sk#13, wr_reason_sk#14, wr_fee#16, wr_refunded_cash#17, wp_web_page_sk#22]

(19) BatchScan default.customer_demographics
Output [3]: [cd_demo_sk#23, cd_marital_status#24, cd_education_status#25]
DataFilters: [isnotnull(cd_demo_sk#23), isnotnull(cd_marital_status#24), isnotnull(cd_education_status#25), ((((cd_marital_status#24 = M) AND (cd_education_status#25 = Advanced Degree     )) OR ((cd_marital_status#24 = S) AND (cd_education_status#25 = College             ))) OR ((cd_marital_status#24 = W) AND (cd_education_status#25 = 2 yr Degree         )))]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(EqualTo(cd_marital_status,M),EqualTo(cd_education_status,Advanced Degree     )),And(EqualTo(cd_marital_status,S),EqualTo(cd_education_status,College             ))),And(EqualTo(cd_marital_status,W),EqualTo(cd_education_status,2 yr Degree         )))]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(20) Filter [codegen id : 6]
Input [3]: [cd_demo_sk#23, cd_marital_status#24, cd_education_status#25]
Condition : (((isnotnull(cd_demo_sk#23) AND isnotnull(cd_marital_status#24)) AND isnotnull(cd_education_status#25)) AND ((((cd_marital_status#24 = M) AND (cd_education_status#25 = Advanced Degree     )) OR ((cd_marital_status#24 = S) AND (cd_education_status#25 = College             ))) OR ((cd_marital_status#24 = W) AND (cd_education_status#25 = 2 yr Degree         ))))

(21) Project [codegen id : 6]
Output [3]: [cd_demo_sk#23, cd_marital_status#24, cd_education_status#25]
Input [3]: [cd_demo_sk#23, cd_marital_status#24, cd_education_status#25]

(22) BroadcastExchange
Input [3]: [cd_demo_sk#23, cd_marital_status#24, cd_education_status#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(23) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [wr_refunded_cdemo_sk#11]
Right keys [1]: [cd_demo_sk#23]
Join type: Inner
Join condition: ((((((cd_marital_status#24 = M) AND (cd_education_status#25 = Advanced Degree     )) AND (ws_sales_price#5 >= 100.00)) AND (ws_sales_price#5 <= 150.00)) OR ((((cd_marital_status#24 = S) AND (cd_education_status#25 = College             )) AND (ws_sales_price#5 >= 50.00)) AND (ws_sales_price#5 <= 100.00))) OR ((((cd_marital_status#24 = W) AND (cd_education_status#25 = 2 yr Degree         )) AND (ws_sales_price#5 >= 150.00)) AND (ws_sales_price#5 <= 200.00)))

(24) Project [codegen id : 11]
Output [10]: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#12, wr_returning_cdemo_sk#13, wr_reason_sk#14, wr_fee#16, wr_refunded_cash#17, cd_marital_status#24, cd_education_status#25]
Input [13]: [ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#11, wr_refunded_addr_sk#12, wr_returning_cdemo_sk#13, wr_reason_sk#14, wr_fee#16, wr_refunded_cash#17, cd_demo_sk#23, cd_marital_status#24, cd_education_status#25]

(25) BatchScan default.customer_demographics
Output [3]: [cd_demo_sk#26, cd_marital_status#27, cd_education_status#28]
DataFilters: [isnotnull(cd_demo_sk#26), isnotnull(cd_marital_status#27), isnotnull(cd_education_status#28)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(26) Filter [codegen id : 7]
Input [3]: [cd_demo_sk#26, cd_marital_status#27, cd_education_status#28]
Condition : ((isnotnull(cd_demo_sk#26) AND isnotnull(cd_marital_status#27)) AND isnotnull(cd_education_status#28))

(27) Project [codegen id : 7]
Output [3]: [cd_demo_sk#26, cd_marital_status#27, cd_education_status#28]
Input [3]: [cd_demo_sk#26, cd_marital_status#27, cd_education_status#28]

(28) BroadcastExchange
Input [3]: [cd_demo_sk#26, cd_marital_status#27, cd_education_status#28]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, string, true], input[2, string, true]),false), [plan_id=5]

(29) BroadcastHashJoin [codegen id : 11]
Left keys [3]: [wr_returning_cdemo_sk#13, cd_marital_status#24, cd_education_status#25]
Right keys [3]: [cd_demo_sk#26, cd_marital_status#27, cd_education_status#28]
Join type: Inner
Join condition: None

(30) Project [codegen id : 11]
Output [7]: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#12, wr_reason_sk#14, wr_fee#16, wr_refunded_cash#17]
Input [13]: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#12, wr_returning_cdemo_sk#13, wr_reason_sk#14, wr_fee#16, wr_refunded_cash#17, cd_marital_status#24, cd_education_status#25, cd_demo_sk#26, cd_marital_status#27, cd_education_status#28]

(31) BatchScan default.customer_address
Output [3]: [ca_address_sk#29, ca_state#30, ca_country#31]
DataFilters: [isnotnull(ca_country#31), (ca_country#31 = United States), isnotnull(ca_address_sk#29), ((ca_state#30 IN (IN,OH,NJ) OR ca_state#30 IN (WI,CT,KY)) OR ca_state#30 IN (LA,IA,AR))]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_state, [IN,NJ,OH]),In(ca_state, [CT,KY,WI])),In(ca_state, [AR,IA,LA]))]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(32) Filter [codegen id : 8]
Input [3]: [ca_address_sk#29, ca_state#30, ca_country#31]
Condition : (((isnotnull(ca_country#31) AND (ca_country#31 = United States)) AND isnotnull(ca_address_sk#29)) AND ((ca_state#30 IN (IN,OH,NJ) OR ca_state#30 IN (WI,CT,KY)) OR ca_state#30 IN (LA,IA,AR)))

(33) Project [codegen id : 8]
Output [2]: [ca_address_sk#29, ca_state#30]
Input [3]: [ca_address_sk#29, ca_state#30, ca_country#31]

(34) BroadcastExchange
Input [2]: [ca_address_sk#29, ca_state#30]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

(35) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [wr_refunded_addr_sk#12]
Right keys [1]: [ca_address_sk#29]
Join type: Inner
Join condition: ((((ca_state#30 IN (IN,OH,NJ) AND (ws_net_profit#6 >= 100.00)) AND (ws_net_profit#6 <= 200.00)) OR ((ca_state#30 IN (WI,CT,KY) AND (ws_net_profit#6 >= 150.00)) AND (ws_net_profit#6 <= 300.00))) OR ((ca_state#30 IN (LA,IA,AR) AND (ws_net_profit#6 >= 50.00)) AND (ws_net_profit#6 <= 250.00)))

(36) Project [codegen id : 11]
Output [5]: [ws_quantity#4, ws_sold_date_sk#7, wr_reason_sk#14, wr_fee#16, wr_refunded_cash#17]
Input [9]: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#12, wr_reason_sk#14, wr_fee#16, wr_refunded_cash#17, ca_address_sk#29, ca_state#30]

(37) BatchScan default.date_dim
Output [2]: [d_date_sk#32, d_year#33]
DataFilters: [isnotnull(d_year#33), (d_year#33 = 2000), isnotnull(d_date_sk#32)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(38) Filter [codegen id : 9]
Input [2]: [d_date_sk#32, d_year#33]
Condition : ((isnotnull(d_year#33) AND (d_year#33 = 2000)) AND isnotnull(d_date_sk#32))

(39) Project [codegen id : 9]
Output [1]: [d_date_sk#32]
Input [2]: [d_date_sk#32, d_year#33]

(40) BroadcastExchange
Input [1]: [d_date_sk#32]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

(41) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ws_sold_date_sk#7]
Right keys [1]: [d_date_sk#32]
Join type: Inner
Join condition: None

(42) Project [codegen id : 11]
Output [4]: [ws_quantity#4, wr_reason_sk#14, wr_fee#16, wr_refunded_cash#17]
Input [6]: [ws_quantity#4, ws_sold_date_sk#7, wr_reason_sk#14, wr_fee#16, wr_refunded_cash#17, d_date_sk#32]

(43) BatchScan default.reason
Output [2]: [r_reason_sk#34, r_reason_desc#35]
DataFilters: [isnotnull(r_reason_sk#34)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/reason]
PushedFilters: [IsNotNull(r_reason_sk)]
ReadSchema: struct<r_reason_sk:int,r_reason_desc:string>

(44) Filter [codegen id : 10]
Input [2]: [r_reason_sk#34, r_reason_desc#35]
Condition : isnotnull(r_reason_sk#34)

(45) Project [codegen id : 10]
Output [2]: [r_reason_sk#34, r_reason_desc#35]
Input [2]: [r_reason_sk#34, r_reason_desc#35]

(46) BroadcastExchange
Input [2]: [r_reason_sk#34, r_reason_desc#35]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

(47) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [wr_reason_sk#14]
Right keys [1]: [r_reason_sk#34]
Join type: Inner
Join condition: None

(48) Project [codegen id : 11]
Output [4]: [ws_quantity#4, wr_fee#16, wr_refunded_cash#17, r_reason_desc#35]
Input [6]: [ws_quantity#4, wr_reason_sk#14, wr_fee#16, wr_refunded_cash#17, r_reason_sk#34, r_reason_desc#35]

(49) HashAggregate [codegen id : 11]
Input [4]: [ws_quantity#4, wr_fee#16, wr_refunded_cash#17, r_reason_desc#35]
Keys [1]: [r_reason_desc#35]
Functions [3]: [partial_avg(ws_quantity#4), partial_avg(UnscaledValue(wr_refunded_cash#17)), partial_avg(UnscaledValue(wr_fee#16))]
Aggregate Attributes [6]: [sum#36, count#37, sum#38, count#39, sum#40, count#41]
Results [7]: [r_reason_desc#35, sum#42, count#43, sum#44, count#45, sum#46, count#47]

(50) Exchange
Input [7]: [r_reason_desc#35, sum#42, count#43, sum#44, count#45, sum#46, count#47]
Arguments: hashpartitioning(r_reason_desc#35, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(51) HashAggregate [codegen id : 12]
Input [7]: [r_reason_desc#35, sum#42, count#43, sum#44, count#45, sum#46, count#47]
Keys [1]: [r_reason_desc#35]
Functions [3]: [avg(ws_quantity#4), avg(UnscaledValue(wr_refunded_cash#17)), avg(UnscaledValue(wr_fee#16))]
Aggregate Attributes [3]: [avg(ws_quantity#4)#48, avg(UnscaledValue(wr_refunded_cash#17))#49, avg(UnscaledValue(wr_fee#16))#50]
Results [4]: [substr(r_reason_desc#35, 1, 20) AS substr(r_reason_desc, 1, 20)#51, avg(ws_quantity#4)#48 AS avg(ws_quantity)#52, cast((avg(UnscaledValue(wr_refunded_cash#17))#49 / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#53, cast((avg(UnscaledValue(wr_fee#16))#50 / 100.0) as decimal(11,6)) AS avg(wr_fee)#54]

(52) TakeOrderedAndProject
Input [4]: [substr(r_reason_desc, 1, 20)#51, avg(ws_quantity)#52, avg(wr_refunded_cash)#53, avg(wr_fee)#54]
Arguments: 100, [substr(r_reason_desc, 1, 20)#51 ASC NULLS FIRST, avg(ws_quantity)#52 ASC NULLS FIRST, avg(wr_refunded_cash)#53 ASC NULLS FIRST, avg(wr_fee)#54 ASC NULLS FIRST], [substr(r_reason_desc, 1, 20)#51, avg(ws_quantity)#52, avg(wr_refunded_cash)#53, avg(wr_fee)#54]

===== Subqueries =====

Subquery:1 Hosting operator id = 2 Hosting Expression = Subquery scalar-subquery#8, [id=#9]
ObjectHashAggregate (58)
+- Exchange (57)
   +- ObjectHashAggregate (56)
      +- * Project (55)
         +- * Filter (54)
            +- BatchScan default.date_dim (53)


(53) BatchScan default.date_dim
Output [2]: [d_date_sk#32, d_year#33]
DataFilters: [isnotnull(d_year#33), (d_year#33 = 2000), isnotnull(d_date_sk#32)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(54) Filter [codegen id : 1]
Input [2]: [d_date_sk#32, d_year#33]
Condition : ((isnotnull(d_year#33) AND (d_year#33 = 2000)) AND isnotnull(d_date_sk#32))

(55) Project [codegen id : 1]
Output [1]: [d_date_sk#32]
Input [2]: [d_date_sk#32, d_year#33]

(56) ObjectHashAggregate
Input [1]: [d_date_sk#32]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(d_date_sk#32, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#55]
Results [1]: [buf#56]

(57) Exchange
Input [1]: [buf#56]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=10]

(58) ObjectHashAggregate
Input [1]: [buf#56]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(d_date_sk#32, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(d_date_sk#32, 42), 1000000, 8388608, 0, 0)#57]
Results [1]: [bloom_filter_agg(xxhash64(d_date_sk#32, 42), 1000000, 8388608, 0, 0)#57 AS bloomFilter#58]

Subquery:2 Hosting operator id = 7 Hosting Expression = Subquery scalar-subquery#18, [id=#19]
ObjectHashAggregate (64)
+- Exchange (63)
   +- ObjectHashAggregate (62)
      +- * Project (61)
         +- * Filter (60)
            +- BatchScan default.customer_demographics (59)


(59) BatchScan default.customer_demographics
Output [3]: [cd_demo_sk#23, cd_marital_status#24, cd_education_status#25]
DataFilters: [isnotnull(cd_demo_sk#23), isnotnull(cd_marital_status#24), isnotnull(cd_education_status#25), ((((cd_marital_status#24 = M) AND (cd_education_status#25 = Advanced Degree     )) OR ((cd_marital_status#24 = S) AND (cd_education_status#25 = College             ))) OR ((cd_marital_status#24 = W) AND (cd_education_status#25 = 2 yr Degree         )))]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(EqualTo(cd_marital_status,M),EqualTo(cd_education_status,Advanced Degree     )),And(EqualTo(cd_marital_status,S),EqualTo(cd_education_status,College             ))),And(EqualTo(cd_marital_status,W),EqualTo(cd_education_status,2 yr Degree         )))]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(60) Filter [codegen id : 1]
Input [3]: [cd_demo_sk#23, cd_marital_status#24, cd_education_status#25]
Condition : (((isnotnull(cd_demo_sk#23) AND isnotnull(cd_marital_status#24)) AND isnotnull(cd_education_status#25)) AND ((((cd_marital_status#24 = M) AND (cd_education_status#25 = Advanced Degree     )) OR ((cd_marital_status#24 = S) AND (cd_education_status#25 = College             ))) OR ((cd_marital_status#24 = W) AND (cd_education_status#25 = 2 yr Degree         ))))

(61) Project [codegen id : 1]
Output [1]: [cd_demo_sk#23]
Input [3]: [cd_demo_sk#23, cd_marital_status#24, cd_education_status#25]

(62) ObjectHashAggregate
Input [1]: [cd_demo_sk#23]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(cd_demo_sk#23, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#59]
Results [1]: [buf#60]

(63) Exchange
Input [1]: [buf#60]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=11]

(64) ObjectHashAggregate
Input [1]: [buf#60]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#23, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#23, 42), 1000000, 8388608, 0, 0)#61]
Results [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#23, 42), 1000000, 8388608, 0, 0)#61 AS bloomFilter#62]

Subquery:3 Hosting operator id = 7 Hosting Expression = Subquery scalar-subquery#20, [id=#21]
ObjectHashAggregate (70)
+- Exchange (69)
   +- ObjectHashAggregate (68)
      +- * Project (67)
         +- * Filter (66)
            +- BatchScan default.customer_address (65)


(65) BatchScan default.customer_address
Output [3]: [ca_address_sk#29, ca_state#30, ca_country#31]
DataFilters: [isnotnull(ca_country#31), (ca_country#31 = United States), isnotnull(ca_address_sk#29), ((ca_state#30 IN (IN,OH,NJ) OR ca_state#30 IN (WI,CT,KY)) OR ca_state#30 IN (LA,IA,AR))]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_state, [IN,NJ,OH]),In(ca_state, [CT,KY,WI])),In(ca_state, [AR,IA,LA]))]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(66) Filter [codegen id : 1]
Input [3]: [ca_address_sk#29, ca_state#30, ca_country#31]
Condition : (((isnotnull(ca_country#31) AND (ca_country#31 = United States)) AND isnotnull(ca_address_sk#29)) AND ((ca_state#30 IN (IN,OH,NJ) OR ca_state#30 IN (WI,CT,KY)) OR ca_state#30 IN (LA,IA,AR)))

(67) Project [codegen id : 1]
Output [1]: [ca_address_sk#29]
Input [3]: [ca_address_sk#29, ca_state#30, ca_country#31]

(68) ObjectHashAggregate
Input [1]: [ca_address_sk#29]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(ca_address_sk#29, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#63]
Results [1]: [buf#64]

(69) Exchange
Input [1]: [buf#64]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=12]

(70) ObjectHashAggregate
Input [1]: [buf#64]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(ca_address_sk#29, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(ca_address_sk#29, 42), 1000000, 8388608, 0, 0)#65]
Results [1]: [bloom_filter_agg(xxhash64(ca_address_sk#29, 42), 1000000, 8388608, 0, 0)#65 AS bloomFilter#66]


