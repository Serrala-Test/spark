== Physical Plan ==
TakeOrderedAndProject (76)
+- * Project (75)
   +- * BroadcastHashJoin Inner BuildRight (74)
      :- * Project (59)
      :  +- * BroadcastHashJoin Inner BuildRight (58)
      :     :- * BroadcastHashJoin Inner BuildRight (38)
      :     :  :- * Filter (20)
      :     :  :  +- * HashAggregate (19)
      :     :  :     +- Exchange (18)
      :     :  :        +- * HashAggregate (17)
      :     :  :           +- * Project (16)
      :     :  :              +- * BroadcastHashJoin Inner BuildRight (15)
      :     :  :                 :- * Project (10)
      :     :  :                 :  +- * BroadcastHashJoin Inner BuildRight (9)
      :     :  :                 :     :- * Project (4)
      :     :  :                 :     :  +- * Filter (3)
      :     :  :                 :     :     +- * ColumnarToRow (2)
      :     :  :                 :     :        +- Scan parquet default.customer (1)
      :     :  :                 :     +- BroadcastExchange (8)
      :     :  :                 :        +- * Filter (7)
      :     :  :                 :           +- * ColumnarToRow (6)
      :     :  :                 :              +- Scan parquet default.store_sales (5)
      :     :  :                 +- BroadcastExchange (14)
      :     :  :                    +- * Filter (13)
      :     :  :                       +- * ColumnarToRow (12)
      :     :  :                          +- Scan parquet default.date_dim (11)
      :     :  +- BroadcastExchange (37)
      :     :     +- * HashAggregate (36)
      :     :        +- Exchange (35)
      :     :           +- * HashAggregate (34)
      :     :              +- * Project (33)
      :     :                 +- * BroadcastHashJoin Inner BuildRight (32)
      :     :                    :- * Project (27)
      :     :                    :  +- * BroadcastHashJoin Inner BuildRight (26)
      :     :                    :     :- * Project (24)
      :     :                    :     :  +- * Filter (23)
      :     :                    :     :     +- * ColumnarToRow (22)
      :     :                    :     :        +- Scan parquet default.customer (21)
      :     :                    :     +- ReusedExchange (25)
      :     :                    +- BroadcastExchange (31)
      :     :                       +- * Filter (30)
      :     :                          +- * ColumnarToRow (29)
      :     :                             +- Scan parquet default.date_dim (28)
      :     +- BroadcastExchange (57)
      :        +- * Project (56)
      :           +- * Filter (55)
      :              +- * HashAggregate (54)
      :                 +- Exchange (53)
      :                    +- * HashAggregate (52)
      :                       +- * Project (51)
      :                          +- * BroadcastHashJoin Inner BuildRight (50)
      :                             :- * Project (48)
      :                             :  +- * BroadcastHashJoin Inner BuildRight (47)
      :                             :     :- * Project (42)
      :                             :     :  +- * Filter (41)
      :                             :     :     +- * ColumnarToRow (40)
      :                             :     :        +- Scan parquet default.customer (39)
      :                             :     +- BroadcastExchange (46)
      :                             :        +- * Filter (45)
      :                             :           +- * ColumnarToRow (44)
      :                             :              +- Scan parquet default.web_sales (43)
      :                             +- ReusedExchange (49)
      +- BroadcastExchange (73)
         +- * HashAggregate (72)
            +- Exchange (71)
               +- * HashAggregate (70)
                  +- * Project (69)
                     +- * BroadcastHashJoin Inner BuildRight (68)
                        :- * Project (66)
                        :  +- * BroadcastHashJoin Inner BuildRight (65)
                        :     :- * Project (63)
                        :     :  +- * Filter (62)
                        :     :     +- * ColumnarToRow (61)
                        :     :        +- Scan parquet default.customer (60)
                        :     +- ReusedExchange (64)
                        +- ReusedExchange (67)


(1) Scan parquet default.customer
Output [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(2) ColumnarToRow [codegen id : 3]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]

(3) Filter [codegen id : 3]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true)))

(4) Project [codegen id : 3]
Output [4]: [c_customer_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true) AS c_customer_id#5, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#3, 20, false, true) AS c_first_name#6, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#4, 30, false, true) AS c_last_name#7]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]

(5) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#8, ss_customer_sk#9, ss_net_paid#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_net_paid:decimal(7,2)>

(6) ColumnarToRow [codegen id : 1]
Input [3]: [ss_sold_date_sk#8, ss_customer_sk#9, ss_net_paid#10]

(7) Filter [codegen id : 1]
Input [3]: [ss_sold_date_sk#8, ss_customer_sk#9, ss_net_paid#10]
Condition : (isnotnull(ss_customer_sk#9) AND isnotnull(ss_sold_date_sk#8))

(8) BroadcastExchange
Input [3]: [ss_sold_date_sk#8, ss_customer_sk#9, ss_net_paid#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#11]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#9]
Join condition: None

(10) Project [codegen id : 3]
Output [5]: [c_customer_id#5, c_first_name#6, c_last_name#7, ss_sold_date_sk#8, ss_net_paid#10]
Input [7]: [c_customer_sk#1, c_customer_id#5, c_first_name#6, c_last_name#7, ss_sold_date_sk#8, ss_customer_sk#9, ss_net_paid#10]

(11) Scan parquet default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#12, d_year#13]

(13) Filter [codegen id : 2]
Input [2]: [d_date_sk#12, d_year#13]
Condition : (((isnotnull(d_year#13) AND (d_year#13 = 2001)) AND d_year#13 IN (2001,2002)) AND isnotnull(d_date_sk#12))

(14) BroadcastExchange
Input [2]: [d_date_sk#12, d_year#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14]

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#12]
Join condition: None

(16) Project [codegen id : 3]
Output [5]: [c_customer_id#5, c_first_name#6, c_last_name#7, ss_net_paid#10, d_year#13]
Input [7]: [c_customer_id#5, c_first_name#6, c_last_name#7, ss_sold_date_sk#8, ss_net_paid#10, d_date_sk#12, d_year#13]

(17) HashAggregate [codegen id : 3]
Input [5]: [c_customer_id#5, c_first_name#6, c_last_name#7, ss_net_paid#10, d_year#13]
Keys [4]: [c_customer_id#5, c_first_name#6, c_last_name#7, d_year#13]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#10))]
Aggregate Attributes [1]: [sum#15]
Results [5]: [c_customer_id#5, c_first_name#6, c_last_name#7, d_year#13, sum#16]

(18) Exchange
Input [5]: [c_customer_id#5, c_first_name#6, c_last_name#7, d_year#13, sum#16]
Arguments: hashpartitioning(c_customer_id#5, c_first_name#6, c_last_name#7, d_year#13, 5), ENSURE_REQUIREMENTS, [id=#17]

(19) HashAggregate [codegen id : 16]
Input [5]: [c_customer_id#5, c_first_name#6, c_last_name#7, d_year#13, sum#16]
Keys [4]: [c_customer_id#5, c_first_name#6, c_last_name#7, d_year#13]
Functions [1]: [sum(UnscaledValue(ss_net_paid#10))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#10))#18]
Results [2]: [c_customer_id#5 AS customer_id#19, MakeDecimal(sum(UnscaledValue(ss_net_paid#10))#18,17,2) AS year_total#20]

(20) Filter [codegen id : 16]
Input [2]: [customer_id#19, year_total#20]
Condition : (isnotnull(year_total#20) AND (year_total#20 > 0.00))

(21) Scan parquet default.customer
Output [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(22) ColumnarToRow [codegen id : 6]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]

(23) Filter [codegen id : 6]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true)))

(24) Project [codegen id : 6]
Output [4]: [c_customer_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true) AS c_customer_id#21, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#3, 20, false, true) AS c_first_name#22, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#4, 30, false, true) AS c_last_name#23]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]

(25) ReusedExchange [Reuses operator id: 8]
Output [3]: [ss_sold_date_sk#8, ss_customer_sk#9, ss_net_paid#10]

(26) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#9]
Join condition: None

(27) Project [codegen id : 6]
Output [5]: [c_customer_id#21, c_first_name#22, c_last_name#23, ss_sold_date_sk#8, ss_net_paid#10]
Input [7]: [c_customer_sk#1, c_customer_id#21, c_first_name#22, c_last_name#23, ss_sold_date_sk#8, ss_customer_sk#9, ss_net_paid#10]

(28) Scan parquet default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(29) ColumnarToRow [codegen id : 5]
Input [2]: [d_date_sk#12, d_year#13]

(30) Filter [codegen id : 5]
Input [2]: [d_date_sk#12, d_year#13]
Condition : (((isnotnull(d_year#13) AND (d_year#13 = 2002)) AND d_year#13 IN (2001,2002)) AND isnotnull(d_date_sk#12))

(31) BroadcastExchange
Input [2]: [d_date_sk#12, d_year#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#24]

(32) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#12]
Join condition: None

(33) Project [codegen id : 6]
Output [5]: [c_customer_id#21, c_first_name#22, c_last_name#23, ss_net_paid#10, d_year#13]
Input [7]: [c_customer_id#21, c_first_name#22, c_last_name#23, ss_sold_date_sk#8, ss_net_paid#10, d_date_sk#12, d_year#13]

(34) HashAggregate [codegen id : 6]
Input [5]: [c_customer_id#21, c_first_name#22, c_last_name#23, ss_net_paid#10, d_year#13]
Keys [4]: [c_customer_id#21, c_first_name#22, c_last_name#23, d_year#13]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#10))]
Aggregate Attributes [1]: [sum#25]
Results [5]: [c_customer_id#21, c_first_name#22, c_last_name#23, d_year#13, sum#26]

(35) Exchange
Input [5]: [c_customer_id#21, c_first_name#22, c_last_name#23, d_year#13, sum#26]
Arguments: hashpartitioning(c_customer_id#21, c_first_name#22, c_last_name#23, d_year#13, 5), ENSURE_REQUIREMENTS, [id=#27]

(36) HashAggregate [codegen id : 7]
Input [5]: [c_customer_id#21, c_first_name#22, c_last_name#23, d_year#13, sum#26]
Keys [4]: [c_customer_id#21, c_first_name#22, c_last_name#23, d_year#13]
Functions [1]: [sum(UnscaledValue(ss_net_paid#10))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#10))#28]
Results [4]: [c_customer_id#21 AS customer_id#29, c_first_name#22 AS customer_first_name#30, c_last_name#23 AS customer_last_name#31, MakeDecimal(sum(UnscaledValue(ss_net_paid#10))#28,17,2) AS year_total#32]

(37) BroadcastExchange
Input [4]: [customer_id#29, customer_first_name#30, customer_last_name#31, year_total#32]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#33]

(38) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [customer_id#19]
Right keys [1]: [customer_id#29]
Join condition: None

(39) Scan parquet default.customer
Output [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(40) ColumnarToRow [codegen id : 10]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]

(41) Filter [codegen id : 10]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true)))

(42) Project [codegen id : 10]
Output [4]: [c_customer_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true) AS c_customer_id#34, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#3, 20, false, true) AS c_first_name#35, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#4, 30, false, true) AS c_last_name#36]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]

(43) Scan parquet default.web_sales
Output [3]: [ws_sold_date_sk#37, ws_bill_customer_sk#38, ws_net_paid#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>

(44) ColumnarToRow [codegen id : 8]
Input [3]: [ws_sold_date_sk#37, ws_bill_customer_sk#38, ws_net_paid#39]

(45) Filter [codegen id : 8]
Input [3]: [ws_sold_date_sk#37, ws_bill_customer_sk#38, ws_net_paid#39]
Condition : (isnotnull(ws_bill_customer_sk#38) AND isnotnull(ws_sold_date_sk#37))

(46) BroadcastExchange
Input [3]: [ws_sold_date_sk#37, ws_bill_customer_sk#38, ws_net_paid#39]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#40]

(47) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#38]
Join condition: None

(48) Project [codegen id : 10]
Output [5]: [c_customer_id#34, c_first_name#35, c_last_name#36, ws_sold_date_sk#37, ws_net_paid#39]
Input [7]: [c_customer_sk#1, c_customer_id#34, c_first_name#35, c_last_name#36, ws_sold_date_sk#37, ws_bill_customer_sk#38, ws_net_paid#39]

(49) ReusedExchange [Reuses operator id: 14]
Output [2]: [d_date_sk#12, d_year#13]

(50) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_sold_date_sk#37]
Right keys [1]: [d_date_sk#12]
Join condition: None

(51) Project [codegen id : 10]
Output [5]: [c_customer_id#34, c_first_name#35, c_last_name#36, ws_net_paid#39, d_year#13]
Input [7]: [c_customer_id#34, c_first_name#35, c_last_name#36, ws_sold_date_sk#37, ws_net_paid#39, d_date_sk#12, d_year#13]

(52) HashAggregate [codegen id : 10]
Input [5]: [c_customer_id#34, c_first_name#35, c_last_name#36, ws_net_paid#39, d_year#13]
Keys [4]: [c_customer_id#34, c_first_name#35, c_last_name#36, d_year#13]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#39))]
Aggregate Attributes [1]: [sum#41]
Results [5]: [c_customer_id#34, c_first_name#35, c_last_name#36, d_year#13, sum#42]

(53) Exchange
Input [5]: [c_customer_id#34, c_first_name#35, c_last_name#36, d_year#13, sum#42]
Arguments: hashpartitioning(c_customer_id#34, c_first_name#35, c_last_name#36, d_year#13, 5), ENSURE_REQUIREMENTS, [id=#43]

(54) HashAggregate [codegen id : 11]
Input [5]: [c_customer_id#34, c_first_name#35, c_last_name#36, d_year#13, sum#42]
Keys [4]: [c_customer_id#34, c_first_name#35, c_last_name#36, d_year#13]
Functions [1]: [sum(UnscaledValue(ws_net_paid#39))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#39))#44]
Results [2]: [c_customer_id#34 AS customer_id#45, MakeDecimal(sum(UnscaledValue(ws_net_paid#39))#44,17,2) AS year_total#46]

(55) Filter [codegen id : 11]
Input [2]: [customer_id#45, year_total#46]
Condition : (isnotnull(year_total#46) AND (year_total#46 > 0.00))

(56) Project [codegen id : 11]
Output [2]: [customer_id#45 AS customer_id#47, year_total#46 AS year_total#48]
Input [2]: [customer_id#45, year_total#46]

(57) BroadcastExchange
Input [2]: [customer_id#47, year_total#48]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#49]

(58) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [customer_id#19]
Right keys [1]: [customer_id#47]
Join condition: None

(59) Project [codegen id : 16]
Output [7]: [customer_id#19, year_total#20, customer_id#29, customer_first_name#30, customer_last_name#31, year_total#32, year_total#48]
Input [8]: [customer_id#19, year_total#20, customer_id#29, customer_first_name#30, customer_last_name#31, year_total#32, customer_id#47, year_total#48]

(60) Scan parquet default.customer
Output [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(61) ColumnarToRow [codegen id : 14]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]

(62) Filter [codegen id : 14]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true)))

(63) Project [codegen id : 14]
Output [4]: [c_customer_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true) AS c_customer_id#50, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#3, 20, false, true) AS c_first_name#51, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#4, 30, false, true) AS c_last_name#52]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]

(64) ReusedExchange [Reuses operator id: 46]
Output [3]: [ws_sold_date_sk#37, ws_bill_customer_sk#38, ws_net_paid#39]

(65) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#38]
Join condition: None

(66) Project [codegen id : 14]
Output [5]: [c_customer_id#50, c_first_name#51, c_last_name#52, ws_sold_date_sk#37, ws_net_paid#39]
Input [7]: [c_customer_sk#1, c_customer_id#50, c_first_name#51, c_last_name#52, ws_sold_date_sk#37, ws_bill_customer_sk#38, ws_net_paid#39]

(67) ReusedExchange [Reuses operator id: 31]
Output [2]: [d_date_sk#12, d_year#13]

(68) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_sold_date_sk#37]
Right keys [1]: [d_date_sk#12]
Join condition: None

(69) Project [codegen id : 14]
Output [5]: [c_customer_id#50, c_first_name#51, c_last_name#52, ws_net_paid#39, d_year#13]
Input [7]: [c_customer_id#50, c_first_name#51, c_last_name#52, ws_sold_date_sk#37, ws_net_paid#39, d_date_sk#12, d_year#13]

(70) HashAggregate [codegen id : 14]
Input [5]: [c_customer_id#50, c_first_name#51, c_last_name#52, ws_net_paid#39, d_year#13]
Keys [4]: [c_customer_id#50, c_first_name#51, c_last_name#52, d_year#13]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#39))]
Aggregate Attributes [1]: [sum#53]
Results [5]: [c_customer_id#50, c_first_name#51, c_last_name#52, d_year#13, sum#54]

(71) Exchange
Input [5]: [c_customer_id#50, c_first_name#51, c_last_name#52, d_year#13, sum#54]
Arguments: hashpartitioning(c_customer_id#50, c_first_name#51, c_last_name#52, d_year#13, 5), ENSURE_REQUIREMENTS, [id=#55]

(72) HashAggregate [codegen id : 15]
Input [5]: [c_customer_id#50, c_first_name#51, c_last_name#52, d_year#13, sum#54]
Keys [4]: [c_customer_id#50, c_first_name#51, c_last_name#52, d_year#13]
Functions [1]: [sum(UnscaledValue(ws_net_paid#39))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#39))#56]
Results [2]: [c_customer_id#50 AS customer_id#57, MakeDecimal(sum(UnscaledValue(ws_net_paid#39))#56,17,2) AS year_total#58]

(73) BroadcastExchange
Input [2]: [customer_id#57, year_total#58]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#59]

(74) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [customer_id#19]
Right keys [1]: [customer_id#57]
Join condition: (CASE WHEN (year_total#48 > 0.00) THEN CheckOverflow((promote_precision(year_total#58) / promote_precision(year_total#48)), DecimalType(37,20), true) ELSE null END > CASE WHEN (year_total#20 > 0.00) THEN CheckOverflow((promote_precision(year_total#32) / promote_precision(year_total#20)), DecimalType(37,20), true) ELSE null END)

(75) Project [codegen id : 16]
Output [3]: [customer_id#29, customer_first_name#30, customer_last_name#31]
Input [9]: [customer_id#19, year_total#20, customer_id#29, customer_first_name#30, customer_last_name#31, year_total#32, year_total#48, customer_id#57, year_total#58]

(76) TakeOrderedAndProject
Input [3]: [customer_id#29, customer_first_name#30, customer_last_name#31]
Arguments: 100, [customer_id#29 ASC NULLS FIRST, customer_id#29 ASC NULLS FIRST, customer_id#29 ASC NULLS FIRST], [customer_id#29, customer_first_name#30, customer_last_name#31]

