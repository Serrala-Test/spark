== Physical Plan ==
* Sort (50)
+- Exchange (49)
   +- * HashAggregate (48)
      +- Exchange (47)
         +- * HashAggregate (46)
            +- * Project (45)
               +- * BroadcastHashJoin Inner BuildRight (44)
                  :- * Project (38)
                  :  +- * BroadcastHashJoin Inner BuildRight (37)
                  :     :- * Project (4)
                  :     :  +- * Filter (3)
                  :     :     +- * ColumnarToRow (2)
                  :     :        +- Scan parquet default.item (1)
                  :     +- BroadcastExchange (36)
                  :        +- Union (35)
                  :           :- * Project (14)
                  :           :  +- * BroadcastHashJoin Inner BuildLeft (13)
                  :           :     :- BroadcastExchange (8)
                  :           :     :  +- * Filter (7)
                  :           :     :     +- * ColumnarToRow (6)
                  :           :     :        +- Scan parquet default.web_sales (5)
                  :           :     +- * Project (12)
                  :           :        +- * Filter (11)
                  :           :           +- * ColumnarToRow (10)
                  :           :              +- Scan parquet default.date_dim (9)
                  :           :- * Project (24)
                  :           :  +- * BroadcastHashJoin Inner BuildLeft (23)
                  :           :     :- BroadcastExchange (18)
                  :           :     :  +- * Filter (17)
                  :           :     :     +- * ColumnarToRow (16)
                  :           :     :        +- Scan parquet default.catalog_sales (15)
                  :           :     +- * Project (22)
                  :           :        +- * Filter (21)
                  :           :           +- * ColumnarToRow (20)
                  :           :              +- Scan parquet default.date_dim (19)
                  :           +- * Project (34)
                  :              +- * BroadcastHashJoin Inner BuildLeft (33)
                  :                 :- BroadcastExchange (28)
                  :                 :  +- * Filter (27)
                  :                 :     +- * ColumnarToRow (26)
                  :                 :        +- Scan parquet default.store_sales (25)
                  :                 +- * Project (32)
                  :                    +- * Filter (31)
                  :                       +- * ColumnarToRow (30)
                  :                          +- Scan parquet default.date_dim (29)
                  +- BroadcastExchange (43)
                     +- * Project (42)
                        +- * Filter (41)
                           +- * ColumnarToRow (40)
                              +- Scan parquet default.time_dim (39)


(1) Scan parquet default.item
Output [4]: [i_item_sk#1, i_brand_id#2, i_brand#3, i_manager_id#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,1), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manager_id:int>

(2) ColumnarToRow [codegen id : 8]
Input [4]: [i_item_sk#1, i_brand_id#2, i_brand#3, i_manager_id#4]

(3) Filter [codegen id : 8]
Input [4]: [i_item_sk#1, i_brand_id#2, i_brand#3, i_manager_id#4]
Condition : ((isnotnull(i_manager_id#4) AND (i_manager_id#4 = 1)) AND isnotnull(i_item_sk#1))

(4) Project [codegen id : 8]
Output [3]: [i_item_sk#1, i_brand_id#2, i_brand#3]
Input [4]: [i_item_sk#1, i_brand_id#2, i_brand#3, i_manager_id#4]

(5) Scan parquet default.web_sales
Output [4]: [ws_sold_time_sk#5, ws_item_sk#6, ws_ext_sales_price#7, ws_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#8), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_time_sk)]
ReadSchema: struct<ws_sold_time_sk:int,ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>

(6) ColumnarToRow [codegen id : 1]
Input [4]: [ws_sold_time_sk#5, ws_item_sk#6, ws_ext_sales_price#7, ws_sold_date_sk#8]

(7) Filter [codegen id : 1]
Input [4]: [ws_sold_time_sk#5, ws_item_sk#6, ws_ext_sales_price#7, ws_sold_date_sk#8]
Condition : (isnotnull(ws_item_sk#6) AND isnotnull(ws_sold_time_sk#5))

(8) BroadcastExchange
Input [4]: [ws_sold_time_sk#5, ws_item_sk#6, ws_ext_sales_price#7, ws_sold_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[3, int, true] as bigint)),false), [id=#9]

(9) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1999), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(10) ColumnarToRow
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]

(11) Filter
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]
Condition : ((((isnotnull(d_moy#12) AND isnotnull(d_year#11)) AND (d_moy#12 = 11)) AND (d_year#11 = 1999)) AND isnotnull(d_date_sk#10))

(12) Project
Output [1]: [d_date_sk#10]
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]

(13) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_sold_date_sk#8]
Right keys [1]: [d_date_sk#10]
Join condition: None

(14) Project [codegen id : 2]
Output [3]: [ws_ext_sales_price#7 AS ext_price#13, ws_item_sk#6 AS sold_item_sk#14, ws_sold_time_sk#5 AS time_sk#15]
Input [5]: [ws_sold_time_sk#5, ws_item_sk#6, ws_ext_sales_price#7, ws_sold_date_sk#8, d_date_sk#10]

(15) Scan parquet default.catalog_sales
Output [4]: [cs_sold_time_sk#16, cs_item_sk#17, cs_ext_sales_price#18, cs_sold_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#19), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_time_sk)]
ReadSchema: struct<cs_sold_time_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(16) ColumnarToRow [codegen id : 3]
Input [4]: [cs_sold_time_sk#16, cs_item_sk#17, cs_ext_sales_price#18, cs_sold_date_sk#19]

(17) Filter [codegen id : 3]
Input [4]: [cs_sold_time_sk#16, cs_item_sk#17, cs_ext_sales_price#18, cs_sold_date_sk#19]
Condition : (isnotnull(cs_item_sk#17) AND isnotnull(cs_sold_time_sk#16))

(18) BroadcastExchange
Input [4]: [cs_sold_time_sk#16, cs_item_sk#17, cs_ext_sales_price#18, cs_sold_date_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[3, int, true] as bigint)),false), [id=#20]

(19) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1999), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(20) ColumnarToRow
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]

(21) Filter
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]
Condition : ((((isnotnull(d_moy#12) AND isnotnull(d_year#11)) AND (d_moy#12 = 11)) AND (d_year#11 = 1999)) AND isnotnull(d_date_sk#10))

(22) Project
Output [1]: [d_date_sk#10]
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]

(23) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#19]
Right keys [1]: [d_date_sk#10]
Join condition: None

(24) Project [codegen id : 4]
Output [3]: [cs_ext_sales_price#18 AS ext_price#21, cs_item_sk#17 AS sold_item_sk#22, cs_sold_time_sk#16 AS time_sk#23]
Input [5]: [cs_sold_time_sk#16, cs_item_sk#17, cs_ext_sales_price#18, cs_sold_date_sk#19, d_date_sk#10]

(25) Scan parquet default.store_sales
Output [4]: [ss_sold_time_sk#24, ss_item_sk#25, ss_ext_sales_price#26, ss_sold_date_sk#27]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#27), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_time_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>

(26) ColumnarToRow [codegen id : 5]
Input [4]: [ss_sold_time_sk#24, ss_item_sk#25, ss_ext_sales_price#26, ss_sold_date_sk#27]

(27) Filter [codegen id : 5]
Input [4]: [ss_sold_time_sk#24, ss_item_sk#25, ss_ext_sales_price#26, ss_sold_date_sk#27]
Condition : (isnotnull(ss_item_sk#25) AND isnotnull(ss_sold_time_sk#24))

(28) BroadcastExchange
Input [4]: [ss_sold_time_sk#24, ss_item_sk#25, ss_ext_sales_price#26, ss_sold_date_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[3, int, true] as bigint)),false), [id=#28]

(29) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1999), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(30) ColumnarToRow
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]

(31) Filter
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]
Condition : ((((isnotnull(d_moy#12) AND isnotnull(d_year#11)) AND (d_moy#12 = 11)) AND (d_year#11 = 1999)) AND isnotnull(d_date_sk#10))

(32) Project
Output [1]: [d_date_sk#10]
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]

(33) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#27]
Right keys [1]: [d_date_sk#10]
Join condition: None

(34) Project [codegen id : 6]
Output [3]: [ss_ext_sales_price#26 AS ext_price#29, ss_item_sk#25 AS sold_item_sk#30, ss_sold_time_sk#24 AS time_sk#31]
Input [5]: [ss_sold_time_sk#24, ss_item_sk#25, ss_ext_sales_price#26, ss_sold_date_sk#27, d_date_sk#10]

(35) Union

(36) BroadcastExchange
Input [3]: [ext_price#13, sold_item_sk#14, time_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#32]

(37) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [i_item_sk#1]
Right keys [1]: [sold_item_sk#14]
Join condition: None

(38) Project [codegen id : 8]
Output [4]: [i_brand_id#2, i_brand#3, ext_price#13, time_sk#15]
Input [6]: [i_item_sk#1, i_brand_id#2, i_brand#3, ext_price#13, sold_item_sk#14, time_sk#15]

(39) Scan parquet default.time_dim
Output [4]: [t_time_sk#33, t_hour#34, t_minute#35, t_meal_time#36]
Batched: true
Location [not included in comparison]/{warehouse_dir}/time_dim]
PushedFilters: [Or(EqualTo(t_meal_time,breakfast),EqualTo(t_meal_time,dinner)), IsNotNull(t_time_sk)]
ReadSchema: struct<t_time_sk:int,t_hour:int,t_minute:int,t_meal_time:string>

(40) ColumnarToRow [codegen id : 7]
Input [4]: [t_time_sk#33, t_hour#34, t_minute#35, t_meal_time#36]

(41) Filter [codegen id : 7]
Input [4]: [t_time_sk#33, t_hour#34, t_minute#35, t_meal_time#36]
Condition : (((t_meal_time#36 = breakfast) OR (t_meal_time#36 = dinner)) AND isnotnull(t_time_sk#33))

(42) Project [codegen id : 7]
Output [3]: [t_time_sk#33, t_hour#34, t_minute#35]
Input [4]: [t_time_sk#33, t_hour#34, t_minute#35, t_meal_time#36]

(43) BroadcastExchange
Input [3]: [t_time_sk#33, t_hour#34, t_minute#35]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#37]

(44) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [time_sk#15]
Right keys [1]: [t_time_sk#33]
Join condition: None

(45) Project [codegen id : 8]
Output [5]: [i_brand_id#2, i_brand#3, ext_price#13, t_hour#34, t_minute#35]
Input [7]: [i_brand_id#2, i_brand#3, ext_price#13, time_sk#15, t_time_sk#33, t_hour#34, t_minute#35]

(46) HashAggregate [codegen id : 8]
Input [5]: [i_brand_id#2, i_brand#3, ext_price#13, t_hour#34, t_minute#35]
Keys [4]: [i_brand#3, i_brand_id#2, t_hour#34, t_minute#35]
Functions [1]: [partial_sum(UnscaledValue(ext_price#13))]
Aggregate Attributes [1]: [sum#38]
Results [5]: [i_brand#3, i_brand_id#2, t_hour#34, t_minute#35, sum#39]

(47) Exchange
Input [5]: [i_brand#3, i_brand_id#2, t_hour#34, t_minute#35, sum#39]
Arguments: hashpartitioning(i_brand#3, i_brand_id#2, t_hour#34, t_minute#35, 5), ENSURE_REQUIREMENTS, [id=#40]

(48) HashAggregate [codegen id : 9]
Input [5]: [i_brand#3, i_brand_id#2, t_hour#34, t_minute#35, sum#39]
Keys [4]: [i_brand#3, i_brand_id#2, t_hour#34, t_minute#35]
Functions [1]: [sum(UnscaledValue(ext_price#13))]
Aggregate Attributes [1]: [sum(UnscaledValue(ext_price#13))#41]
Results [5]: [i_brand_id#2 AS brand_id#42, i_brand#3 AS brand#43, t_hour#34, t_minute#35, MakeDecimal(sum(UnscaledValue(ext_price#13))#41,17,2) AS ext_price#44]

(49) Exchange
Input [5]: [brand_id#42, brand#43, t_hour#34, t_minute#35, ext_price#44]
Arguments: rangepartitioning(ext_price#44 DESC NULLS LAST, brand_id#42 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [id=#45]

(50) Sort [codegen id : 10]
Input [5]: [brand_id#42, brand#43, t_hour#34, t_minute#35, ext_price#44]
Arguments: [ext_price#44 DESC NULLS LAST, brand_id#42 ASC NULLS FIRST], true, 0

