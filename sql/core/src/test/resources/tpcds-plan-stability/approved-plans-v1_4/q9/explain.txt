== Physical Plan ==
* Project (4)
+- * Filter (3)
   +- * ColumnarToRow (2)
      +- Scan parquet default.reason (1)


(1) Scan parquet default.reason
Output [1]: [r_reason_sk#1]
Batched: true
Location [not included in comparison]/{warehouse_dir}/reason]
PushedFilters: [IsNotNull(r_reason_sk), EqualTo(r_reason_sk,1)]
ReadSchema: struct<r_reason_sk:int>

(2) ColumnarToRow [codegen id : 1]
Input [1]: [r_reason_sk#1]

(3) Filter [codegen id : 1]
Input [1]: [r_reason_sk#1]
Condition : (isnotnull(r_reason_sk#1) AND (r_reason_sk#1 = 1))

(4) Project [codegen id : 1]
Output [5]: [CASE WHEN (Subquery multi-scalar-subquery#2, [id=#3].count(1) > 62316685) THEN ReusedSubquery Subquery multi-scalar-subquery#2, [id=#3].avg(ss_ext_discount_amt) ELSE ReusedSubquery Subquery multi-scalar-subquery#2, [id=#3].avg(ss_net_paid) END AS bucket1#4, CASE WHEN (Subquery multi-scalar-subquery#5, [id=#6].count(1) > 19045798) THEN ReusedSubquery Subquery multi-scalar-subquery#5, [id=#6].avg(ss_ext_discount_amt) ELSE ReusedSubquery Subquery multi-scalar-subquery#5, [id=#6].avg(ss_net_paid) END AS bucket2#7, CASE WHEN (Subquery multi-scalar-subquery#8, [id=#9].count(1) > 365541424) THEN ReusedSubquery Subquery multi-scalar-subquery#8, [id=#9].avg(ss_ext_discount_amt) ELSE ReusedSubquery Subquery multi-scalar-subquery#8, [id=#9].avg(ss_net_paid) END AS bucket3#10, CASE WHEN (Subquery multi-scalar-subquery#11, [id=#12].count(1) > 216357808) THEN ReusedSubquery Subquery multi-scalar-subquery#11, [id=#12].avg(ss_ext_discount_amt) ELSE ReusedSubquery Subquery multi-scalar-subquery#11, [id=#12].avg(ss_net_paid) END AS bucket4#13, CASE WHEN (Subquery multi-scalar-subquery#14, [id=#15].count(1) > 184483884) THEN ReusedSubquery Subquery multi-scalar-subquery#14, [id=#15].avg(ss_ext_discount_amt) ELSE ReusedSubquery Subquery multi-scalar-subquery#14, [id=#15].avg(ss_net_paid) END AS bucket5#16]
Input [1]: [r_reason_sk#1]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = Subquery multi-scalar-subquery#2, [id=#3]
* HashAggregate (11)
+- Exchange (10)
   +- * HashAggregate (9)
      +- * Project (8)
         +- * Filter (7)
            +- * ColumnarToRow (6)
               +- Scan parquet default.store_sales (5)


(5) Scan parquet default.store_sales
Output [4]: [ss_quantity#17, ss_ext_discount_amt#18, ss_net_paid#19, ss_sold_date_sk#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,1), LessThanOrEqual(ss_quantity,20)]
ReadSchema: struct<ss_quantity:int,ss_ext_discount_amt:decimal(7,2),ss_net_paid:decimal(7,2)>

(6) ColumnarToRow [codegen id : 1]
Input [4]: [ss_quantity#17, ss_ext_discount_amt#18, ss_net_paid#19, ss_sold_date_sk#20]

(7) Filter [codegen id : 1]
Input [4]: [ss_quantity#17, ss_ext_discount_amt#18, ss_net_paid#19, ss_sold_date_sk#20]
Condition : ((isnotnull(ss_quantity#17) AND (ss_quantity#17 >= 1)) AND (ss_quantity#17 <= 20))

(8) Project [codegen id : 1]
Output [2]: [ss_ext_discount_amt#18, ss_net_paid#19]
Input [4]: [ss_quantity#17, ss_ext_discount_amt#18, ss_net_paid#19, ss_sold_date_sk#20]

(9) HashAggregate [codegen id : 1]
Input [2]: [ss_ext_discount_amt#18, ss_net_paid#19]
Keys: []
Functions [3]: [partial_count(1), partial_avg(UnscaledValue(ss_ext_discount_amt#18)), partial_avg(UnscaledValue(ss_net_paid#19))]
Aggregate Attributes [5]: [count#21, sum#22, count#23, sum#24, count#25]
Results [5]: [count#26, sum#27, count#28, sum#29, count#30]

(10) Exchange
Input [5]: [count#26, sum#27, count#28, sum#29, count#30]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#31]

(11) HashAggregate [codegen id : 2]
Input [5]: [count#26, sum#27, count#28, sum#29, count#30]
Keys: []
Functions [3]: [count(1), avg(UnscaledValue(ss_ext_discount_amt#18)), avg(UnscaledValue(ss_net_paid#19))]
Aggregate Attributes [3]: [count(1)#32, avg(UnscaledValue(ss_ext_discount_amt#18))#33, avg(UnscaledValue(ss_net_paid#19))#34]
Results [3]: [count(1)#32 AS count(1)#35, cast((avg(UnscaledValue(ss_ext_discount_amt#18))#33 / 100.0) as decimal(11,6)) AS avg(ss_ext_discount_amt)#36, cast((avg(UnscaledValue(ss_net_paid#19))#34 / 100.0) as decimal(11,6)) AS avg(ss_net_paid)#37]

Subquery:2 Hosting operator id = 4 Hosting Expression = ReusedSubquery Subquery multi-scalar-subquery#2, [id=#3]

Subquery:3 Hosting operator id = 4 Hosting Expression = ReusedSubquery Subquery multi-scalar-subquery#2, [id=#3]

Subquery:4 Hosting operator id = 4 Hosting Expression = Subquery multi-scalar-subquery#5, [id=#6]
* HashAggregate (18)
+- Exchange (17)
   +- * HashAggregate (16)
      +- * Project (15)
         +- * Filter (14)
            +- * ColumnarToRow (13)
               +- Scan parquet default.store_sales (12)


(12) Scan parquet default.store_sales
Output [4]: [ss_quantity#38, ss_ext_discount_amt#39, ss_net_paid#40, ss_sold_date_sk#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,21), LessThanOrEqual(ss_quantity,40)]
ReadSchema: struct<ss_quantity:int,ss_ext_discount_amt:decimal(7,2),ss_net_paid:decimal(7,2)>

(13) ColumnarToRow [codegen id : 1]
Input [4]: [ss_quantity#38, ss_ext_discount_amt#39, ss_net_paid#40, ss_sold_date_sk#41]

(14) Filter [codegen id : 1]
Input [4]: [ss_quantity#38, ss_ext_discount_amt#39, ss_net_paid#40, ss_sold_date_sk#41]
Condition : ((isnotnull(ss_quantity#38) AND (ss_quantity#38 >= 21)) AND (ss_quantity#38 <= 40))

(15) Project [codegen id : 1]
Output [2]: [ss_ext_discount_amt#39, ss_net_paid#40]
Input [4]: [ss_quantity#38, ss_ext_discount_amt#39, ss_net_paid#40, ss_sold_date_sk#41]

(16) HashAggregate [codegen id : 1]
Input [2]: [ss_ext_discount_amt#39, ss_net_paid#40]
Keys: []
Functions [3]: [partial_count(1), partial_avg(UnscaledValue(ss_ext_discount_amt#39)), partial_avg(UnscaledValue(ss_net_paid#40))]
Aggregate Attributes [5]: [count#42, sum#43, count#44, sum#45, count#46]
Results [5]: [count#47, sum#48, count#49, sum#50, count#51]

(17) Exchange
Input [5]: [count#47, sum#48, count#49, sum#50, count#51]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#52]

(18) HashAggregate [codegen id : 2]
Input [5]: [count#47, sum#48, count#49, sum#50, count#51]
Keys: []
Functions [3]: [count(1), avg(UnscaledValue(ss_ext_discount_amt#39)), avg(UnscaledValue(ss_net_paid#40))]
Aggregate Attributes [3]: [count(1)#53, avg(UnscaledValue(ss_ext_discount_amt#39))#54, avg(UnscaledValue(ss_net_paid#40))#55]
Results [3]: [count(1)#53 AS count(1)#56, cast((avg(UnscaledValue(ss_ext_discount_amt#39))#54 / 100.0) as decimal(11,6)) AS avg(ss_ext_discount_amt)#57, cast((avg(UnscaledValue(ss_net_paid#40))#55 / 100.0) as decimal(11,6)) AS avg(ss_net_paid)#58]

Subquery:5 Hosting operator id = 4 Hosting Expression = ReusedSubquery Subquery multi-scalar-subquery#5, [id=#6]

Subquery:6 Hosting operator id = 4 Hosting Expression = ReusedSubquery Subquery multi-scalar-subquery#5, [id=#6]

Subquery:7 Hosting operator id = 4 Hosting Expression = Subquery multi-scalar-subquery#8, [id=#9]
* HashAggregate (25)
+- Exchange (24)
   +- * HashAggregate (23)
      +- * Project (22)
         +- * Filter (21)
            +- * ColumnarToRow (20)
               +- Scan parquet default.store_sales (19)


(19) Scan parquet default.store_sales
Output [4]: [ss_quantity#59, ss_ext_discount_amt#60, ss_net_paid#61, ss_sold_date_sk#62]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,41), LessThanOrEqual(ss_quantity,60)]
ReadSchema: struct<ss_quantity:int,ss_ext_discount_amt:decimal(7,2),ss_net_paid:decimal(7,2)>

(20) ColumnarToRow [codegen id : 1]
Input [4]: [ss_quantity#59, ss_ext_discount_amt#60, ss_net_paid#61, ss_sold_date_sk#62]

(21) Filter [codegen id : 1]
Input [4]: [ss_quantity#59, ss_ext_discount_amt#60, ss_net_paid#61, ss_sold_date_sk#62]
Condition : ((isnotnull(ss_quantity#59) AND (ss_quantity#59 >= 41)) AND (ss_quantity#59 <= 60))

(22) Project [codegen id : 1]
Output [2]: [ss_ext_discount_amt#60, ss_net_paid#61]
Input [4]: [ss_quantity#59, ss_ext_discount_amt#60, ss_net_paid#61, ss_sold_date_sk#62]

(23) HashAggregate [codegen id : 1]
Input [2]: [ss_ext_discount_amt#60, ss_net_paid#61]
Keys: []
Functions [3]: [partial_count(1), partial_avg(UnscaledValue(ss_ext_discount_amt#60)), partial_avg(UnscaledValue(ss_net_paid#61))]
Aggregate Attributes [5]: [count#63, sum#64, count#65, sum#66, count#67]
Results [5]: [count#68, sum#69, count#70, sum#71, count#72]

(24) Exchange
Input [5]: [count#68, sum#69, count#70, sum#71, count#72]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#73]

(25) HashAggregate [codegen id : 2]
Input [5]: [count#68, sum#69, count#70, sum#71, count#72]
Keys: []
Functions [3]: [count(1), avg(UnscaledValue(ss_ext_discount_amt#60)), avg(UnscaledValue(ss_net_paid#61))]
Aggregate Attributes [3]: [count(1)#74, avg(UnscaledValue(ss_ext_discount_amt#60))#75, avg(UnscaledValue(ss_net_paid#61))#76]
Results [3]: [count(1)#74 AS count(1)#77, cast((avg(UnscaledValue(ss_ext_discount_amt#60))#75 / 100.0) as decimal(11,6)) AS avg(ss_ext_discount_amt)#78, cast((avg(UnscaledValue(ss_net_paid#61))#76 / 100.0) as decimal(11,6)) AS avg(ss_net_paid)#79]

Subquery:8 Hosting operator id = 4 Hosting Expression = ReusedSubquery Subquery multi-scalar-subquery#8, [id=#9]

Subquery:9 Hosting operator id = 4 Hosting Expression = ReusedSubquery Subquery multi-scalar-subquery#8, [id=#9]

Subquery:10 Hosting operator id = 4 Hosting Expression = Subquery multi-scalar-subquery#11, [id=#12]
* HashAggregate (32)
+- Exchange (31)
   +- * HashAggregate (30)
      +- * Project (29)
         +- * Filter (28)
            +- * ColumnarToRow (27)
               +- Scan parquet default.store_sales (26)


(26) Scan parquet default.store_sales
Output [4]: [ss_quantity#80, ss_ext_discount_amt#81, ss_net_paid#82, ss_sold_date_sk#83]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,61), LessThanOrEqual(ss_quantity,80)]
ReadSchema: struct<ss_quantity:int,ss_ext_discount_amt:decimal(7,2),ss_net_paid:decimal(7,2)>

(27) ColumnarToRow [codegen id : 1]
Input [4]: [ss_quantity#80, ss_ext_discount_amt#81, ss_net_paid#82, ss_sold_date_sk#83]

(28) Filter [codegen id : 1]
Input [4]: [ss_quantity#80, ss_ext_discount_amt#81, ss_net_paid#82, ss_sold_date_sk#83]
Condition : ((isnotnull(ss_quantity#80) AND (ss_quantity#80 >= 61)) AND (ss_quantity#80 <= 80))

(29) Project [codegen id : 1]
Output [2]: [ss_ext_discount_amt#81, ss_net_paid#82]
Input [4]: [ss_quantity#80, ss_ext_discount_amt#81, ss_net_paid#82, ss_sold_date_sk#83]

(30) HashAggregate [codegen id : 1]
Input [2]: [ss_ext_discount_amt#81, ss_net_paid#82]
Keys: []
Functions [3]: [partial_count(1), partial_avg(UnscaledValue(ss_ext_discount_amt#81)), partial_avg(UnscaledValue(ss_net_paid#82))]
Aggregate Attributes [5]: [count#84, sum#85, count#86, sum#87, count#88]
Results [5]: [count#89, sum#90, count#91, sum#92, count#93]

(31) Exchange
Input [5]: [count#89, sum#90, count#91, sum#92, count#93]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#94]

(32) HashAggregate [codegen id : 2]
Input [5]: [count#89, sum#90, count#91, sum#92, count#93]
Keys: []
Functions [3]: [count(1), avg(UnscaledValue(ss_ext_discount_amt#81)), avg(UnscaledValue(ss_net_paid#82))]
Aggregate Attributes [3]: [count(1)#95, avg(UnscaledValue(ss_ext_discount_amt#81))#96, avg(UnscaledValue(ss_net_paid#82))#97]
Results [3]: [count(1)#95 AS count(1)#98, cast((avg(UnscaledValue(ss_ext_discount_amt#81))#96 / 100.0) as decimal(11,6)) AS avg(ss_ext_discount_amt)#99, cast((avg(UnscaledValue(ss_net_paid#82))#97 / 100.0) as decimal(11,6)) AS avg(ss_net_paid)#100]

Subquery:11 Hosting operator id = 4 Hosting Expression = ReusedSubquery Subquery multi-scalar-subquery#11, [id=#12]

Subquery:12 Hosting operator id = 4 Hosting Expression = ReusedSubquery Subquery multi-scalar-subquery#11, [id=#12]

Subquery:13 Hosting operator id = 4 Hosting Expression = Subquery multi-scalar-subquery#14, [id=#15]
* HashAggregate (39)
+- Exchange (38)
   +- * HashAggregate (37)
      +- * Project (36)
         +- * Filter (35)
            +- * ColumnarToRow (34)
               +- Scan parquet default.store_sales (33)


(33) Scan parquet default.store_sales
Output [4]: [ss_quantity#101, ss_ext_discount_amt#102, ss_net_paid#103, ss_sold_date_sk#104]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,81), LessThanOrEqual(ss_quantity,100)]
ReadSchema: struct<ss_quantity:int,ss_ext_discount_amt:decimal(7,2),ss_net_paid:decimal(7,2)>

(34) ColumnarToRow [codegen id : 1]
Input [4]: [ss_quantity#101, ss_ext_discount_amt#102, ss_net_paid#103, ss_sold_date_sk#104]

(35) Filter [codegen id : 1]
Input [4]: [ss_quantity#101, ss_ext_discount_amt#102, ss_net_paid#103, ss_sold_date_sk#104]
Condition : ((isnotnull(ss_quantity#101) AND (ss_quantity#101 >= 81)) AND (ss_quantity#101 <= 100))

(36) Project [codegen id : 1]
Output [2]: [ss_ext_discount_amt#102, ss_net_paid#103]
Input [4]: [ss_quantity#101, ss_ext_discount_amt#102, ss_net_paid#103, ss_sold_date_sk#104]

(37) HashAggregate [codegen id : 1]
Input [2]: [ss_ext_discount_amt#102, ss_net_paid#103]
Keys: []
Functions [3]: [partial_count(1), partial_avg(UnscaledValue(ss_ext_discount_amt#102)), partial_avg(UnscaledValue(ss_net_paid#103))]
Aggregate Attributes [5]: [count#105, sum#106, count#107, sum#108, count#109]
Results [5]: [count#110, sum#111, count#112, sum#113, count#114]

(38) Exchange
Input [5]: [count#110, sum#111, count#112, sum#113, count#114]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#115]

(39) HashAggregate [codegen id : 2]
Input [5]: [count#110, sum#111, count#112, sum#113, count#114]
Keys: []
Functions [3]: [count(1), avg(UnscaledValue(ss_ext_discount_amt#102)), avg(UnscaledValue(ss_net_paid#103))]
Aggregate Attributes [3]: [count(1)#116, avg(UnscaledValue(ss_ext_discount_amt#102))#117, avg(UnscaledValue(ss_net_paid#103))#118]
Results [3]: [count(1)#116 AS count(1)#119, cast((avg(UnscaledValue(ss_ext_discount_amt#102))#117 / 100.0) as decimal(11,6)) AS avg(ss_ext_discount_amt)#120, cast((avg(UnscaledValue(ss_net_paid#103))#118 / 100.0) as decimal(11,6)) AS avg(ss_net_paid)#121]

Subquery:14 Hosting operator id = 4 Hosting Expression = ReusedSubquery Subquery multi-scalar-subquery#14, [id=#15]

Subquery:15 Hosting operator id = 4 Hosting Expression = ReusedSubquery Subquery multi-scalar-subquery#14, [id=#15]


