== Physical Plan ==
TakeOrderedAndProject (46)
+- * HashAggregate (45)
   +- Exchange (44)
      +- * HashAggregate (43)
         +- Union (42)
            :- * Project (16)
            :  +- * BroadcastHashJoin Inner BuildRight (15)
            :     :- * Project (9)
            :     :  +- * BroadcastHashJoin Inner BuildRight (8)
            :     :     :- * Filter (3)
            :     :     :  +- * ColumnarToRow (2)
            :     :     :     +- Scan parquet default.store_sales (1)
            :     :     +- BroadcastExchange (7)
            :     :        +- * Filter (6)
            :     :           +- * ColumnarToRow (5)
            :     :              +- Scan parquet default.date_dim (4)
            :     +- BroadcastExchange (14)
            :        +- * Project (13)
            :           +- * Filter (12)
            :              +- * ColumnarToRow (11)
            :                 +- Scan parquet default.item (10)
            :- * Project (32)
            :  +- * BroadcastHashJoin Inner BuildLeft (31)
            :     :- BroadcastExchange (26)
            :     :  +- * Project (25)
            :     :     +- * BroadcastHashJoin Inner BuildLeft (24)
            :     :        :- BroadcastExchange (20)
            :     :        :  +- * Filter (19)
            :     :        :     +- * ColumnarToRow (18)
            :     :        :        +- Scan parquet default.web_sales (17)
            :     :        +- * Filter (23)
            :     :           +- * ColumnarToRow (22)
            :     :              +- Scan parquet default.date_dim (21)
            :     +- * Project (30)
            :        +- * Filter (29)
            :           +- * ColumnarToRow (28)
            :              +- Scan parquet default.item (27)
            +- * Project (41)
               +- * BroadcastHashJoin Inner BuildRight (40)
                  :- * Project (38)
                  :  +- * BroadcastHashJoin Inner BuildRight (37)
                  :     :- * Filter (35)
                  :     :  +- * ColumnarToRow (34)
                  :     :     +- Scan parquet default.catalog_sales (33)
                  :     +- ReusedExchange (36)
                  +- ReusedExchange (39)


(1) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4]

(3) Filter [codegen id : 3]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4]
Condition : ((isnull(ss_store_sk#3) AND isnotnull(ss_item_sk#2)) AND isnotnull(ss_sold_date_sk#1))

(4) Scan parquet default.date_dim
Output [3]: [d_date_sk#5, d_year#6, d_qoy#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#5, d_year#6, d_qoy#7]

(6) Filter [codegen id : 1]
Input [3]: [d_date_sk#5, d_year#6, d_qoy#7]
Condition : isnotnull(d_date_sk#5)

(7) BroadcastExchange
Input [3]: [d_date_sk#5, d_year#6, d_qoy#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#8]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#5]
Join condition: None

(9) Project [codegen id : 3]
Output [5]: [ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, d_year#6, d_qoy#7]
Input [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, d_date_sk#5, d_year#6, d_qoy#7]

(10) Scan parquet default.item
Output [2]: [i_item_sk#9, i_category#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_category:string>

(11) ColumnarToRow [codegen id : 2]
Input [2]: [i_item_sk#9, i_category#10]

(12) Filter [codegen id : 2]
Input [2]: [i_item_sk#9, i_category#10]
Condition : isnotnull(i_item_sk#9)

(13) Project [codegen id : 2]
Output [2]: [i_item_sk#9, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#10, 50, false, true) AS i_category#11]
Input [2]: [i_item_sk#9, i_category#10]

(14) BroadcastExchange
Input [2]: [i_item_sk#9, i_category#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#9]
Join condition: None

(16) Project [codegen id : 3]
Output [6]: [store AS channel#13, ss_store_sk#3 AS col_name#14, d_year#6, d_qoy#7, i_category#11, ss_ext_sales_price#4 AS ext_sales_price#15]
Input [7]: [ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, d_year#6, d_qoy#7, i_item_sk#9, i_category#11]

(17) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#16, ws_item_sk#17, ws_ship_customer_sk#18, ws_ext_sales_price#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNull(ws_ship_customer_sk), IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_ship_customer_sk:int,ws_ext_sales_price:decimal(7,2)>

(18) ColumnarToRow [codegen id : 4]
Input [4]: [ws_sold_date_sk#16, ws_item_sk#17, ws_ship_customer_sk#18, ws_ext_sales_price#19]

(19) Filter [codegen id : 4]
Input [4]: [ws_sold_date_sk#16, ws_item_sk#17, ws_ship_customer_sk#18, ws_ext_sales_price#19]
Condition : ((isnull(ws_ship_customer_sk#18) AND isnotnull(ws_item_sk#17)) AND isnotnull(ws_sold_date_sk#16))

(20) BroadcastExchange
Input [4]: [ws_sold_date_sk#16, ws_item_sk#17, ws_ship_customer_sk#18, ws_ext_sales_price#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#20]

(21) Scan parquet default.date_dim
Output [3]: [d_date_sk#5, d_year#6, d_qoy#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(22) ColumnarToRow
Input [3]: [d_date_sk#5, d_year#6, d_qoy#7]

(23) Filter
Input [3]: [d_date_sk#5, d_year#6, d_qoy#7]
Condition : isnotnull(d_date_sk#5)

(24) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ws_sold_date_sk#16]
Right keys [1]: [d_date_sk#5]
Join condition: None

(25) Project [codegen id : 5]
Output [5]: [ws_item_sk#17, ws_ship_customer_sk#18, ws_ext_sales_price#19, d_year#6, d_qoy#7]
Input [7]: [ws_sold_date_sk#16, ws_item_sk#17, ws_ship_customer_sk#18, ws_ext_sales_price#19, d_date_sk#5, d_year#6, d_qoy#7]

(26) BroadcastExchange
Input [5]: [ws_item_sk#17, ws_ship_customer_sk#18, ws_ext_sales_price#19, d_year#6, d_qoy#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21]

(27) Scan parquet default.item
Output [2]: [i_item_sk#9, i_category#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_category:string>

(28) ColumnarToRow
Input [2]: [i_item_sk#9, i_category#10]

(29) Filter
Input [2]: [i_item_sk#9, i_category#10]
Condition : isnotnull(i_item_sk#9)

(30) Project
Output [2]: [i_item_sk#9, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#10, 50, false, true) AS i_category#22]
Input [2]: [i_item_sk#9, i_category#10]

(31) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_item_sk#17]
Right keys [1]: [i_item_sk#9]
Join condition: None

(32) Project [codegen id : 6]
Output [6]: [web AS channel#23, ws_ship_customer_sk#18 AS col_name#24, d_year#6, d_qoy#7, i_category#22 AS i_category#25, ws_ext_sales_price#19 AS ext_sales_price#26]
Input [7]: [ws_item_sk#17, ws_ship_customer_sk#18, ws_ext_sales_price#19, d_year#6, d_qoy#7, i_item_sk#9, i_category#22]

(33) Scan parquet default.catalog_sales
Output [4]: [cs_sold_date_sk#27, cs_ship_addr_sk#28, cs_item_sk#29, cs_ext_sales_price#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNull(cs_ship_addr_sk), IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_ship_addr_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(34) ColumnarToRow [codegen id : 9]
Input [4]: [cs_sold_date_sk#27, cs_ship_addr_sk#28, cs_item_sk#29, cs_ext_sales_price#30]

(35) Filter [codegen id : 9]
Input [4]: [cs_sold_date_sk#27, cs_ship_addr_sk#28, cs_item_sk#29, cs_ext_sales_price#30]
Condition : ((isnull(cs_ship_addr_sk#28) AND isnotnull(cs_item_sk#29)) AND isnotnull(cs_sold_date_sk#27))

(36) ReusedExchange [Reuses operator id: 7]
Output [3]: [d_date_sk#5, d_year#6, d_qoy#7]

(37) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_sold_date_sk#27]
Right keys [1]: [d_date_sk#5]
Join condition: None

(38) Project [codegen id : 9]
Output [5]: [cs_ship_addr_sk#28, cs_item_sk#29, cs_ext_sales_price#30, d_year#6, d_qoy#7]
Input [7]: [cs_sold_date_sk#27, cs_ship_addr_sk#28, cs_item_sk#29, cs_ext_sales_price#30, d_date_sk#5, d_year#6, d_qoy#7]

(39) ReusedExchange [Reuses operator id: 14]
Output [2]: [i_item_sk#9, i_category#31]

(40) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#29]
Right keys [1]: [i_item_sk#9]
Join condition: None

(41) Project [codegen id : 9]
Output [6]: [catalog AS channel#32, cs_ship_addr_sk#28 AS col_name#33, d_year#6, d_qoy#7, i_category#31 AS i_category#34, cs_ext_sales_price#30 AS ext_sales_price#35]
Input [7]: [cs_ship_addr_sk#28, cs_item_sk#29, cs_ext_sales_price#30, d_year#6, d_qoy#7, i_item_sk#9, i_category#31]

(42) Union

(43) HashAggregate [codegen id : 10]
Input [6]: [channel#13, col_name#14, d_year#6, d_qoy#7, i_category#11, ext_sales_price#15]
Keys [5]: [channel#13, col_name#14, d_year#6, d_qoy#7, i_category#11]
Functions [2]: [partial_count(1), partial_sum(UnscaledValue(ext_sales_price#15))]
Aggregate Attributes [2]: [count#36, sum#37]
Results [7]: [channel#13, col_name#14, d_year#6, d_qoy#7, i_category#11, count#38, sum#39]

(44) Exchange
Input [7]: [channel#13, col_name#14, d_year#6, d_qoy#7, i_category#11, count#38, sum#39]
Arguments: hashpartitioning(channel#13, col_name#14, d_year#6, d_qoy#7, i_category#11, 5), ENSURE_REQUIREMENTS, [id=#40]

(45) HashAggregate [codegen id : 11]
Input [7]: [channel#13, col_name#14, d_year#6, d_qoy#7, i_category#11, count#38, sum#39]
Keys [5]: [channel#13, col_name#14, d_year#6, d_qoy#7, i_category#11]
Functions [2]: [count(1), sum(UnscaledValue(ext_sales_price#15))]
Aggregate Attributes [2]: [count(1)#41, sum(UnscaledValue(ext_sales_price#15))#42]
Results [7]: [channel#13, col_name#14, d_year#6, d_qoy#7, i_category#11, count(1)#41 AS sales_cnt#43, MakeDecimal(sum(UnscaledValue(ext_sales_price#15))#42,17,2) AS sales_amt#44]

(46) TakeOrderedAndProject
Input [7]: [channel#13, col_name#14, d_year#6, d_qoy#7, i_category#11, sales_cnt#43, sales_amt#44]
Arguments: 100, [channel#13 ASC NULLS FIRST, col_name#14 ASC NULLS FIRST, d_year#6 ASC NULLS FIRST, d_qoy#7 ASC NULLS FIRST, i_category#11 ASC NULLS FIRST], [channel#13, col_name#14, d_year#6, d_qoy#7, i_category#11, sales_cnt#43, sales_amt#44]

