== Physical Plan ==
TakeOrderedAndProject (49)
+- * Project (48)
   +- * BroadcastHashJoin Inner BuildRight (47)
      :- * Project (29)
      :  +- * SortMergeJoin Inner (28)
      :     :- * Sort (22)
      :     :  +- Exchange (21)
      :     :     +- * Project (20)
      :     :        +- * BroadcastHashJoin Inner BuildRight (19)
      :     :           :- * Filter (3)
      :     :           :  +- * ColumnarToRow (2)
      :     :           :     +- Scan parquet default.store (1)
      :     :           +- BroadcastExchange (18)
      :     :              +- * Filter (17)
      :     :                 +- * HashAggregate (16)
      :     :                    +- Exchange (15)
      :     :                       +- * HashAggregate (14)
      :     :                          +- * Project (13)
      :     :                             +- * BroadcastHashJoin Inner BuildLeft (12)
      :     :                                :- BroadcastExchange (7)
      :     :                                :  +- * Filter (6)
      :     :                                :     +- * ColumnarToRow (5)
      :     :                                :        +- Scan parquet default.store_sales (4)
      :     :                                +- * Project (11)
      :     :                                   +- * Filter (10)
      :     :                                      +- * ColumnarToRow (9)
      :     :                                         +- Scan parquet default.date_dim (8)
      :     +- * Sort (27)
      :        +- Exchange (26)
      :           +- * Filter (25)
      :              +- * ColumnarToRow (24)
      :                 +- Scan parquet default.item (23)
      +- BroadcastExchange (46)
         +- * HashAggregate (45)
            +- Exchange (44)
               +- * HashAggregate (43)
                  +- * HashAggregate (42)
                     +- Exchange (41)
                        +- * HashAggregate (40)
                           +- * Project (39)
                              +- * BroadcastHashJoin Inner BuildLeft (38)
                                 :- BroadcastExchange (33)
                                 :  +- * Filter (32)
                                 :     +- * ColumnarToRow (31)
                                 :        +- Scan parquet default.store_sales (30)
                                 +- * Project (37)
                                    +- * Filter (36)
                                       +- * ColumnarToRow (35)
                                          +- Scan parquet default.date_dim (34)


(1) Scan parquet default.store
Output [2]: [s_store_sk#1, s_store_name#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string>

(2) ColumnarToRow [codegen id : 4]
Input [2]: [s_store_sk#1, s_store_name#2]

(3) Filter [codegen id : 4]
Input [2]: [s_store_sk#1, s_store_name#2]
Condition : isnotnull(s_store_sk#1)

(4) Scan parquet default.store_sales
Output [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#6), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(5) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]

(6) Filter [codegen id : 1]
Input [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]
Condition : (isnotnull(ss_store_sk#4) AND isnotnull(ss_item_sk#3))

(7) BroadcastExchange
Input [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[3, int, true] as bigint)),false), [id=#7]

(8) Scan parquet default.date_dim
Output [2]: [d_date_sk#8, d_month_seq#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1176), LessThanOrEqual(d_month_seq,1187), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(9) ColumnarToRow
Input [2]: [d_date_sk#8, d_month_seq#9]

(10) Filter
Input [2]: [d_date_sk#8, d_month_seq#9]
Condition : (((isnotnull(d_month_seq#9) AND (d_month_seq#9 >= 1176)) AND (d_month_seq#9 <= 1187)) AND isnotnull(d_date_sk#8))

(11) Project
Output [1]: [d_date_sk#8]
Input [2]: [d_date_sk#8, d_month_seq#9]

(12) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#8]
Join condition: None

(13) Project [codegen id : 2]
Output [3]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5]
Input [5]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6, d_date_sk#8]

(14) HashAggregate [codegen id : 2]
Input [3]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5]
Keys [2]: [ss_store_sk#4, ss_item_sk#3]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#5))]
Aggregate Attributes [1]: [sum#10]
Results [3]: [ss_store_sk#4, ss_item_sk#3, sum#11]

(15) Exchange
Input [3]: [ss_store_sk#4, ss_item_sk#3, sum#11]
Arguments: hashpartitioning(ss_store_sk#4, ss_item_sk#3, 5), ENSURE_REQUIREMENTS, [id=#12]

(16) HashAggregate [codegen id : 3]
Input [3]: [ss_store_sk#4, ss_item_sk#3, sum#11]
Keys [2]: [ss_store_sk#4, ss_item_sk#3]
Functions [1]: [sum(UnscaledValue(ss_sales_price#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#5))#13]
Results [3]: [ss_store_sk#4, ss_item_sk#3, MakeDecimal(sum(UnscaledValue(ss_sales_price#5))#13,17,2) AS revenue#14]

(17) Filter [codegen id : 3]
Input [3]: [ss_store_sk#4, ss_item_sk#3, revenue#14]
Condition : isnotnull(revenue#14)

(18) BroadcastExchange
Input [3]: [ss_store_sk#4, ss_item_sk#3, revenue#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15]

(19) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [s_store_sk#1]
Right keys [1]: [ss_store_sk#4]
Join condition: None

(20) Project [codegen id : 4]
Output [4]: [s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#14]
Input [5]: [s_store_sk#1, s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#14]

(21) Exchange
Input [4]: [s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#14]
Arguments: hashpartitioning(ss_item_sk#3, 5), ENSURE_REQUIREMENTS, [id=#16]

(22) Sort [codegen id : 5]
Input [4]: [s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#14]
Arguments: [ss_item_sk#3 ASC NULLS FIRST], false, 0

(23) Scan parquet default.item
Output [5]: [i_item_sk#17, i_item_desc#18, i_current_price#19, i_wholesale_cost#20, i_brand#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand:string>

(24) ColumnarToRow [codegen id : 6]
Input [5]: [i_item_sk#17, i_item_desc#18, i_current_price#19, i_wholesale_cost#20, i_brand#21]

(25) Filter [codegen id : 6]
Input [5]: [i_item_sk#17, i_item_desc#18, i_current_price#19, i_wholesale_cost#20, i_brand#21]
Condition : isnotnull(i_item_sk#17)

(26) Exchange
Input [5]: [i_item_sk#17, i_item_desc#18, i_current_price#19, i_wholesale_cost#20, i_brand#21]
Arguments: hashpartitioning(i_item_sk#17, 5), ENSURE_REQUIREMENTS, [id=#22]

(27) Sort [codegen id : 7]
Input [5]: [i_item_sk#17, i_item_desc#18, i_current_price#19, i_wholesale_cost#20, i_brand#21]
Arguments: [i_item_sk#17 ASC NULLS FIRST], false, 0

(28) SortMergeJoin [codegen id : 12]
Left keys [1]: [ss_item_sk#3]
Right keys [1]: [i_item_sk#17]
Join condition: None

(29) Project [codegen id : 12]
Output [7]: [s_store_name#2, ss_store_sk#4, revenue#14, i_item_desc#18, i_current_price#19, i_wholesale_cost#20, i_brand#21]
Input [9]: [s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#14, i_item_sk#17, i_item_desc#18, i_current_price#19, i_wholesale_cost#20, i_brand#21]

(30) Scan parquet default.store_sales
Output [4]: [ss_item_sk#23, ss_store_sk#24, ss_sales_price#25, ss_sold_date_sk#26]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#26), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(31) ColumnarToRow [codegen id : 8]
Input [4]: [ss_item_sk#23, ss_store_sk#24, ss_sales_price#25, ss_sold_date_sk#26]

(32) Filter [codegen id : 8]
Input [4]: [ss_item_sk#23, ss_store_sk#24, ss_sales_price#25, ss_sold_date_sk#26]
Condition : isnotnull(ss_store_sk#24)

(33) BroadcastExchange
Input [4]: [ss_item_sk#23, ss_store_sk#24, ss_sales_price#25, ss_sold_date_sk#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[3, int, true] as bigint)),false), [id=#27]

(34) Scan parquet default.date_dim
Output [2]: [d_date_sk#8, d_month_seq#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1176), LessThanOrEqual(d_month_seq,1187), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(35) ColumnarToRow
Input [2]: [d_date_sk#8, d_month_seq#9]

(36) Filter
Input [2]: [d_date_sk#8, d_month_seq#9]
Condition : (((isnotnull(d_month_seq#9) AND (d_month_seq#9 >= 1176)) AND (d_month_seq#9 <= 1187)) AND isnotnull(d_date_sk#8))

(37) Project
Output [1]: [d_date_sk#8]
Input [2]: [d_date_sk#8, d_month_seq#9]

(38) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_sold_date_sk#26]
Right keys [1]: [d_date_sk#8]
Join condition: None

(39) Project [codegen id : 9]
Output [3]: [ss_item_sk#23, ss_store_sk#24, ss_sales_price#25]
Input [5]: [ss_item_sk#23, ss_store_sk#24, ss_sales_price#25, ss_sold_date_sk#26, d_date_sk#8]

(40) HashAggregate [codegen id : 9]
Input [3]: [ss_item_sk#23, ss_store_sk#24, ss_sales_price#25]
Keys [2]: [ss_store_sk#24, ss_item_sk#23]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#25))]
Aggregate Attributes [1]: [sum#28]
Results [3]: [ss_store_sk#24, ss_item_sk#23, sum#29]

(41) Exchange
Input [3]: [ss_store_sk#24, ss_item_sk#23, sum#29]
Arguments: hashpartitioning(ss_store_sk#24, ss_item_sk#23, 5), ENSURE_REQUIREMENTS, [id=#30]

(42) HashAggregate [codegen id : 10]
Input [3]: [ss_store_sk#24, ss_item_sk#23, sum#29]
Keys [2]: [ss_store_sk#24, ss_item_sk#23]
Functions [1]: [sum(UnscaledValue(ss_sales_price#25))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#25))#31]
Results [2]: [ss_store_sk#24, MakeDecimal(sum(UnscaledValue(ss_sales_price#25))#31,17,2) AS revenue#32]

(43) HashAggregate [codegen id : 10]
Input [2]: [ss_store_sk#24, revenue#32]
Keys [1]: [ss_store_sk#24]
Functions [1]: [partial_avg(revenue#32)]
Aggregate Attributes [2]: [sum#33, count#34]
Results [3]: [ss_store_sk#24, sum#35, count#36]

(44) Exchange
Input [3]: [ss_store_sk#24, sum#35, count#36]
Arguments: hashpartitioning(ss_store_sk#24, 5), ENSURE_REQUIREMENTS, [id=#37]

(45) HashAggregate [codegen id : 11]
Input [3]: [ss_store_sk#24, sum#35, count#36]
Keys [1]: [ss_store_sk#24]
Functions [1]: [avg(revenue#32)]
Aggregate Attributes [1]: [avg(revenue#32)#38]
Results [2]: [ss_store_sk#24, avg(revenue#32)#38 AS ave#39]

(46) BroadcastExchange
Input [2]: [ss_store_sk#24, ave#39]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#40]

(47) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [ss_store_sk#24]
Join condition: (cast(revenue#14 as decimal(23,7)) <= CheckOverflow((0.100000 * promote_precision(ave#39)), DecimalType(23,7), true))

(48) Project [codegen id : 12]
Output [6]: [s_store_name#2, i_item_desc#18, revenue#14, i_current_price#19, i_wholesale_cost#20, i_brand#21]
Input [9]: [s_store_name#2, ss_store_sk#4, revenue#14, i_item_desc#18, i_current_price#19, i_wholesale_cost#20, i_brand#21, ss_store_sk#24, ave#39]

(49) TakeOrderedAndProject
Input [6]: [s_store_name#2, i_item_desc#18, revenue#14, i_current_price#19, i_wholesale_cost#20, i_brand#21]
Arguments: 100, [s_store_name#2 ASC NULLS FIRST, i_item_desc#18 ASC NULLS FIRST], [s_store_name#2, i_item_desc#18, revenue#14, i_current_price#19, i_wholesale_cost#20, i_brand#21]

