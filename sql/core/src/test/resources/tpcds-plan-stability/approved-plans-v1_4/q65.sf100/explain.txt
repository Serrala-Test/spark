== Physical Plan ==
TakeOrderedAndProject (39)
+- * Project (38)
   +- * SortMergeJoin Inner (37)
      :- * Sort (34)
      :  +- Exchange (33)
      :     +- * Project (32)
      :        +- * BroadcastHashJoin Inner BuildRight (31)
      :           :- * Project (26)
      :           :  +- * BroadcastHashJoin Inner BuildRight (25)
      :           :     :- * Filter (10)
      :           :     :  +- * HashAggregate (9)
      :           :     :     +- Exchange (8)
      :           :     :        +- * HashAggregate (7)
      :           :     :           +- * Project (6)
      :           :     :              +- * BroadcastHashJoin Inner BuildRight (5)
      :           :     :                 :- * Filter (3)
      :           :     :                 :  +- * ColumnarToRow (2)
      :           :     :                 :     +- Scan parquet spark_catalog.default.store_sales (1)
      :           :     :                 +- ReusedExchange (4)
      :           :     +- BroadcastExchange (24)
      :           :        +- * Filter (23)
      :           :           +- * HashAggregate (22)
      :           :              +- Exchange (21)
      :           :                 +- * HashAggregate (20)
      :           :                    +- * HashAggregate (19)
      :           :                       +- Exchange (18)
      :           :                          +- * HashAggregate (17)
      :           :                             +- * Project (16)
      :           :                                +- * BroadcastHashJoin Inner BuildRight (15)
      :           :                                   :- * Filter (13)
      :           :                                   :  +- * ColumnarToRow (12)
      :           :                                   :     +- Scan parquet spark_catalog.default.store_sales (11)
      :           :                                   +- ReusedExchange (14)
      :           +- BroadcastExchange (30)
      :              +- * Filter (29)
      :                 +- * ColumnarToRow (28)
      :                    +- Scan parquet spark_catalog.default.store (27)
      +- * Sort (36)
         +- ReusedExchange (35)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4]
Condition : ((isnotnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1)) AND might_contain(Subquery scalar-subquery#6, [id=#7], xxhash64(ss_item_sk#1, 42), false))

(4) ReusedExchange [Reuses operator id: 51]
Output [1]: [d_date_sk#8]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#8]
Join type: Inner
Join condition: None

(6) Project [codegen id : 2]
Output [3]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3, ss_sold_date_sk#4, d_date_sk#8]

(7) HashAggregate [codegen id : 2]
Input [3]: [ss_item_sk#1, ss_store_sk#2, ss_sales_price#3]
Keys [2]: [ss_store_sk#2, ss_item_sk#1]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#3))]
Aggregate Attributes [1]: [sum#9]
Results [3]: [ss_store_sk#2, ss_item_sk#1, sum#10]

(8) Exchange
Input [3]: [ss_store_sk#2, ss_item_sk#1, sum#10]
Arguments: hashpartitioning(ss_store_sk#2, ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(9) HashAggregate [codegen id : 8]
Input [3]: [ss_store_sk#2, ss_item_sk#1, sum#10]
Keys [2]: [ss_store_sk#2, ss_item_sk#1]
Functions [1]: [sum(UnscaledValue(ss_sales_price#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#3))#11]
Results [3]: [ss_store_sk#2, ss_item_sk#1, MakeDecimal(sum(UnscaledValue(ss_sales_price#3))#11,17,2) AS revenue#12]

(10) Filter [codegen id : 8]
Input [3]: [ss_store_sk#2, ss_item_sk#1, revenue#12]
Condition : isnotnull(revenue#12)

(11) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#13, ss_store_sk#14, ss_sales_price#15, ss_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#16), dynamicpruningexpression(ss_sold_date_sk#16 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(12) ColumnarToRow [codegen id : 4]
Input [4]: [ss_item_sk#13, ss_store_sk#14, ss_sales_price#15, ss_sold_date_sk#16]

(13) Filter [codegen id : 4]
Input [4]: [ss_item_sk#13, ss_store_sk#14, ss_sales_price#15, ss_sold_date_sk#16]
Condition : (isnotnull(ss_store_sk#14) AND true)

(14) ReusedExchange [Reuses operator id: 51]
Output [1]: [d_date_sk#17]

(15) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#16]
Right keys [1]: [d_date_sk#17]
Join type: Inner
Join condition: None

(16) Project [codegen id : 4]
Output [3]: [ss_item_sk#13, ss_store_sk#14, ss_sales_price#15]
Input [5]: [ss_item_sk#13, ss_store_sk#14, ss_sales_price#15, ss_sold_date_sk#16, d_date_sk#17]

(17) HashAggregate [codegen id : 4]
Input [3]: [ss_item_sk#13, ss_store_sk#14, ss_sales_price#15]
Keys [2]: [ss_store_sk#14, ss_item_sk#13]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#15))]
Aggregate Attributes [1]: [sum#18]
Results [3]: [ss_store_sk#14, ss_item_sk#13, sum#19]

(18) Exchange
Input [3]: [ss_store_sk#14, ss_item_sk#13, sum#19]
Arguments: hashpartitioning(ss_store_sk#14, ss_item_sk#13, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(19) HashAggregate [codegen id : 5]
Input [3]: [ss_store_sk#14, ss_item_sk#13, sum#19]
Keys [2]: [ss_store_sk#14, ss_item_sk#13]
Functions [1]: [sum(UnscaledValue(ss_sales_price#15))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#15))#20]
Results [2]: [ss_store_sk#14, MakeDecimal(sum(UnscaledValue(ss_sales_price#15))#20,17,2) AS revenue#21]

(20) HashAggregate [codegen id : 5]
Input [2]: [ss_store_sk#14, revenue#21]
Keys [1]: [ss_store_sk#14]
Functions [1]: [partial_avg(revenue#21)]
Aggregate Attributes [2]: [sum#22, count#23]
Results [3]: [ss_store_sk#14, sum#24, count#25]

(21) Exchange
Input [3]: [ss_store_sk#14, sum#24, count#25]
Arguments: hashpartitioning(ss_store_sk#14, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(22) HashAggregate [codegen id : 6]
Input [3]: [ss_store_sk#14, sum#24, count#25]
Keys [1]: [ss_store_sk#14]
Functions [1]: [avg(revenue#21)]
Aggregate Attributes [1]: [avg(revenue#21)#26]
Results [2]: [ss_store_sk#14, avg(revenue#21)#26 AS ave#27]

(23) Filter [codegen id : 6]
Input [2]: [ss_store_sk#14, ave#27]
Condition : isnotnull(ave#27)

(24) BroadcastExchange
Input [2]: [ss_store_sk#14, ave#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(25) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [ss_store_sk#14]
Join type: Inner
Join condition: (cast(revenue#12 as decimal(23,7)) <= (0.1 * ave#27))

(26) Project [codegen id : 8]
Output [3]: [ss_store_sk#2, ss_item_sk#1, revenue#12]
Input [5]: [ss_store_sk#2, ss_item_sk#1, revenue#12, ss_store_sk#14, ave#27]

(27) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#28, s_store_name#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string>

(28) ColumnarToRow [codegen id : 7]
Input [2]: [s_store_sk#28, s_store_name#29]

(29) Filter [codegen id : 7]
Input [2]: [s_store_sk#28, s_store_name#29]
Condition : isnotnull(s_store_sk#28)

(30) BroadcastExchange
Input [2]: [s_store_sk#28, s_store_name#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=5]

(31) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#28]
Join type: Inner
Join condition: None

(32) Project [codegen id : 8]
Output [3]: [ss_item_sk#1, revenue#12, s_store_name#29]
Input [5]: [ss_store_sk#2, ss_item_sk#1, revenue#12, s_store_sk#28, s_store_name#29]

(33) Exchange
Input [3]: [ss_item_sk#1, revenue#12, s_store_name#29]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(34) Sort [codegen id : 9]
Input [3]: [ss_item_sk#1, revenue#12, s_store_name#29]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(35) ReusedExchange [Reuses operator id: 43]
Output [5]: [i_item_sk#30, i_item_desc#31, i_current_price#32, i_wholesale_cost#33, i_brand#34]

(36) Sort [codegen id : 11]
Input [5]: [i_item_sk#30, i_item_desc#31, i_current_price#32, i_wholesale_cost#33, i_brand#34]
Arguments: [i_item_sk#30 ASC NULLS FIRST], false, 0

(37) SortMergeJoin [codegen id : 12]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#30]
Join type: Inner
Join condition: None

(38) Project [codegen id : 12]
Output [6]: [s_store_name#29, i_item_desc#31, revenue#12, i_current_price#32, i_wholesale_cost#33, i_brand#34]
Input [8]: [ss_item_sk#1, revenue#12, s_store_name#29, i_item_sk#30, i_item_desc#31, i_current_price#32, i_wholesale_cost#33, i_brand#34]

(39) TakeOrderedAndProject
Input [6]: [s_store_name#29, i_item_desc#31, revenue#12, i_current_price#32, i_wholesale_cost#33, i_brand#34]
Arguments: 100, [s_store_name#29 ASC NULLS FIRST, i_item_desc#31 ASC NULLS FIRST], [s_store_name#29, i_item_desc#31, revenue#12, i_current_price#32, i_wholesale_cost#33, i_brand#34]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#6, [id=#7]
ObjectHashAggregate (46)
+- Exchange (45)
   +- ObjectHashAggregate (44)
      +- Exchange (43)
         +- * Filter (42)
            +- * ColumnarToRow (41)
               +- Scan parquet spark_catalog.default.item (40)


(40) Scan parquet spark_catalog.default.item
Output [5]: [i_item_sk#30, i_item_desc#31, i_current_price#32, i_wholesale_cost#33, i_brand#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand:string>

(41) ColumnarToRow [codegen id : 1]
Input [5]: [i_item_sk#30, i_item_desc#31, i_current_price#32, i_wholesale_cost#33, i_brand#34]

(42) Filter [codegen id : 1]
Input [5]: [i_item_sk#30, i_item_desc#31, i_current_price#32, i_wholesale_cost#33, i_brand#34]
Condition : isnotnull(i_item_sk#30)

(43) Exchange
Input [5]: [i_item_sk#30, i_item_desc#31, i_current_price#32, i_wholesale_cost#33, i_brand#34]
Arguments: hashpartitioning(i_item_sk#30, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(44) ObjectHashAggregate
Input [5]: [i_item_sk#30, i_item_desc#31, i_current_price#32, i_wholesale_cost#33, i_brand#34]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(i_item_sk#30, 42), 204000, 1632000, 0, 0)]
Aggregate Attributes [1]: [buf#35]
Results [1]: [buf#36]

(45) Exchange
Input [1]: [buf#36]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=8]

(46) ObjectHashAggregate
Input [1]: [buf#36]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(i_item_sk#30, 42), 204000, 1632000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(i_item_sk#30, 42), 204000, 1632000, 0, 0)#37]
Results [1]: [bloom_filter_agg(xxhash64(i_item_sk#30, 42), 204000, 1632000, 0, 0)#37 AS bloomFilter#38]

Subquery:2 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (51)
+- * Project (50)
   +- * Filter (49)
      +- * ColumnarToRow (48)
         +- Scan parquet spark_catalog.default.date_dim (47)


(47) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#8, d_month_seq#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1176), LessThanOrEqual(d_month_seq,1187), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(48) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#8, d_month_seq#39]

(49) Filter [codegen id : 1]
Input [2]: [d_date_sk#8, d_month_seq#39]
Condition : (((isnotnull(d_month_seq#39) AND (d_month_seq#39 >= 1176)) AND (d_month_seq#39 <= 1187)) AND isnotnull(d_date_sk#8))

(50) Project [codegen id : 1]
Output [1]: [d_date_sk#8]
Input [2]: [d_date_sk#8, d_month_seq#39]

(51) BroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

Subquery:3 Hosting operator id = 11 Hosting Expression = ss_sold_date_sk#16 IN dynamicpruning#5


