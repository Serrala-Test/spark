== Physical Plan ==
TakeOrderedAndProject (61)
+- * HashAggregate (60)
   +- Exchange (59)
      +- * HashAggregate (58)
         +- * Expand (57)
            +- * Project (56)
               +- * SortMergeJoin Inner (55)
                  :- * Sort (29)
                  :  +- Exchange (28)
                  :     +- * Project (27)
                  :        +- * BroadcastHashJoin Inner BuildRight (26)
                  :           :- * Project (20)
                  :           :  +- * SortMergeJoin Inner (19)
                  :           :     :- * Sort (12)
                  :           :     :  +- Exchange (11)
                  :           :     :     +- * Project (10)
                  :           :     :        +- * BroadcastHashJoin Inner BuildRight (9)
                  :           :     :           :- * Filter (3)
                  :           :     :           :  +- * ColumnarToRow (2)
                  :           :     :           :     +- Scan parquet default.catalog_sales (1)
                  :           :     :           +- BroadcastExchange (8)
                  :           :     :              +- * Project (7)
                  :           :     :                 +- * Filter (6)
                  :           :     :                    +- * ColumnarToRow (5)
                  :           :     :                       +- Scan parquet default.date_dim (4)
                  :           :     +- * Sort (18)
                  :           :        +- Exchange (17)
                  :           :           +- * Project (16)
                  :           :              +- * Filter (15)
                  :           :                 +- * ColumnarToRow (14)
                  :           :                    +- Scan parquet default.customer_demographics (13)
                  :           +- BroadcastExchange (25)
                  :              +- * Project (24)
                  :                 +- * Filter (23)
                  :                    +- * ColumnarToRow (22)
                  :                       +- Scan parquet default.item (21)
                  +- * Sort (54)
                     +- Exchange (53)
                        +- * Project (52)
                           +- * SortMergeJoin Inner (51)
                              :- * Sort (44)
                              :  +- Exchange (43)
                              :     +- * Project (42)
                              :        +- * SortMergeJoin Inner (41)
                              :           :- * Sort (35)
                              :           :  +- Exchange (34)
                              :           :     +- * Project (33)
                              :           :        +- * Filter (32)
                              :           :           +- * ColumnarToRow (31)
                              :           :              +- Scan parquet default.customer (30)
                              :           +- * Sort (40)
                              :              +- Exchange (39)
                              :                 +- * Filter (38)
                              :                    +- * ColumnarToRow (37)
                              :                       +- Scan parquet default.customer_demographics (36)
                              +- * Sort (50)
                                 +- Exchange (49)
                                    +- * Project (48)
                                       +- * Filter (47)
                                          +- * ColumnarToRow (46)
                                             +- Scan parquet default.customer_address (45)


(1) Scan parquet default.catalog_sales
Output [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]

(3) Filter [codegen id : 2]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Condition : (((isnotnull(cs_bill_cdemo_sk#3) AND isnotnull(cs_bill_customer_sk#2)) AND isnotnull(cs_sold_date_sk#1)) AND isnotnull(cs_item_sk#4))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]
Condition : ((isnotnull(d_year#11) AND (d_year#11 = 1998)) AND isnotnull(d_date_sk#10))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(8) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(10) Project [codegen id : 2]
Output [8]: [cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Input [10]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, d_date_sk#10]

(11) Exchange
Input [8]: [cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Arguments: hashpartitioning(cs_bill_cdemo_sk#3, 5), ENSURE_REQUIREMENTS, [id=#13]

(12) Sort [codegen id : 3]
Input [8]: [cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Arguments: [cs_bill_cdemo_sk#3 ASC NULLS FIRST], false, 0

(13) Scan parquet default.customer_demographics
Output [4]: [cd_demo_sk#14, cd_gender#15, cd_education_status#16, cd_dep_count#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_education_status:string,cd_dep_count:int>

(14) ColumnarToRow [codegen id : 4]
Input [4]: [cd_demo_sk#14, cd_gender#15, cd_education_status#16, cd_dep_count#17]

(15) Filter [codegen id : 4]
Input [4]: [cd_demo_sk#14, cd_gender#15, cd_education_status#16, cd_dep_count#17]
Condition : (((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_gender#15, 1, false, true) = F) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_education_status#16, 20, false, true) = Unknown             )) AND isnotnull(cd_demo_sk#14))

(16) Project [codegen id : 4]
Output [2]: [cd_demo_sk#14, cd_dep_count#17]
Input [4]: [cd_demo_sk#14, cd_gender#15, cd_education_status#16, cd_dep_count#17]

(17) Exchange
Input [2]: [cd_demo_sk#14, cd_dep_count#17]
Arguments: hashpartitioning(cd_demo_sk#14, 5), ENSURE_REQUIREMENTS, [id=#18]

(18) Sort [codegen id : 5]
Input [2]: [cd_demo_sk#14, cd_dep_count#17]
Arguments: [cd_demo_sk#14 ASC NULLS FIRST], false, 0

(19) SortMergeJoin [codegen id : 7]
Left keys [1]: [cs_bill_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#14]
Join condition: None

(20) Project [codegen id : 7]
Output [8]: [cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17]
Input [10]: [cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_demo_sk#14, cd_dep_count#17]

(21) Scan parquet default.item
Output [2]: [i_item_sk#19, i_item_id#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(22) ColumnarToRow [codegen id : 6]
Input [2]: [i_item_sk#19, i_item_id#20]

(23) Filter [codegen id : 6]
Input [2]: [i_item_sk#19, i_item_id#20]
Condition : isnotnull(i_item_sk#19)

(24) Project [codegen id : 6]
Output [2]: [i_item_sk#19, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_item_id#20, 16, false, true) AS i_item_id#21]
Input [2]: [i_item_sk#19, i_item_id#20]

(25) BroadcastExchange
Input [2]: [i_item_sk#19, i_item_id#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22]

(26) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cs_item_sk#4]
Right keys [1]: [i_item_sk#19]
Join condition: None

(27) Project [codegen id : 7]
Output [8]: [cs_bill_customer_sk#2, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, i_item_id#21]
Input [10]: [cs_bill_customer_sk#2, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, i_item_sk#19, i_item_id#21]

(28) Exchange
Input [8]: [cs_bill_customer_sk#2, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, i_item_id#21]
Arguments: hashpartitioning(cs_bill_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#23]

(29) Sort [codegen id : 8]
Input [8]: [cs_bill_customer_sk#2, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, i_item_id#21]
Arguments: [cs_bill_customer_sk#2 ASC NULLS FIRST], false, 0

(30) Scan parquet default.customer
Output [5]: [c_customer_sk#24, c_current_cdemo_sk#25, c_current_addr_sk#26, c_birth_month#27, c_birth_year#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [In(c_birth_month, [1,6,8,9,12,2]), IsNotNull(c_customer_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int,c_birth_month:int,c_birth_year:int>

(31) ColumnarToRow [codegen id : 9]
Input [5]: [c_customer_sk#24, c_current_cdemo_sk#25, c_current_addr_sk#26, c_birth_month#27, c_birth_year#28]

(32) Filter [codegen id : 9]
Input [5]: [c_customer_sk#24, c_current_cdemo_sk#25, c_current_addr_sk#26, c_birth_month#27, c_birth_year#28]
Condition : (((c_birth_month#27 IN (1,6,8,9,12,2) AND isnotnull(c_customer_sk#24)) AND isnotnull(c_current_cdemo_sk#25)) AND isnotnull(c_current_addr_sk#26))

(33) Project [codegen id : 9]
Output [4]: [c_customer_sk#24, c_current_cdemo_sk#25, c_current_addr_sk#26, c_birth_year#28]
Input [5]: [c_customer_sk#24, c_current_cdemo_sk#25, c_current_addr_sk#26, c_birth_month#27, c_birth_year#28]

(34) Exchange
Input [4]: [c_customer_sk#24, c_current_cdemo_sk#25, c_current_addr_sk#26, c_birth_year#28]
Arguments: hashpartitioning(c_current_cdemo_sk#25, 5), ENSURE_REQUIREMENTS, [id=#29]

(35) Sort [codegen id : 10]
Input [4]: [c_customer_sk#24, c_current_cdemo_sk#25, c_current_addr_sk#26, c_birth_year#28]
Arguments: [c_current_cdemo_sk#25 ASC NULLS FIRST], false, 0

(36) Scan parquet default.customer_demographics
Output [1]: [cd_demo_sk#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int>

(37) ColumnarToRow [codegen id : 11]
Input [1]: [cd_demo_sk#30]

(38) Filter [codegen id : 11]
Input [1]: [cd_demo_sk#30]
Condition : isnotnull(cd_demo_sk#30)

(39) Exchange
Input [1]: [cd_demo_sk#30]
Arguments: hashpartitioning(cd_demo_sk#30, 5), ENSURE_REQUIREMENTS, [id=#31]

(40) Sort [codegen id : 12]
Input [1]: [cd_demo_sk#30]
Arguments: [cd_demo_sk#30 ASC NULLS FIRST], false, 0

(41) SortMergeJoin [codegen id : 13]
Left keys [1]: [c_current_cdemo_sk#25]
Right keys [1]: [cd_demo_sk#30]
Join condition: None

(42) Project [codegen id : 13]
Output [3]: [c_customer_sk#24, c_current_addr_sk#26, c_birth_year#28]
Input [5]: [c_customer_sk#24, c_current_cdemo_sk#25, c_current_addr_sk#26, c_birth_year#28, cd_demo_sk#30]

(43) Exchange
Input [3]: [c_customer_sk#24, c_current_addr_sk#26, c_birth_year#28]
Arguments: hashpartitioning(c_current_addr_sk#26, 5), ENSURE_REQUIREMENTS, [id=#32]

(44) Sort [codegen id : 14]
Input [3]: [c_customer_sk#24, c_current_addr_sk#26, c_birth_year#28]
Arguments: [c_current_addr_sk#26 ASC NULLS FIRST], false, 0

(45) Scan parquet default.customer_address
Output [4]: [ca_address_sk#33, ca_county#34, ca_state#35, ca_country#36]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string,ca_state:string,ca_country:string>

(46) ColumnarToRow [codegen id : 15]
Input [4]: [ca_address_sk#33, ca_county#34, ca_state#35, ca_country#36]

(47) Filter [codegen id : 15]
Input [4]: [ca_address_sk#33, ca_county#34, ca_state#35, ca_country#36]
Condition : (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#35, 2, false, true) IN (MS,IN,ND,OK,NM,VA) AND isnotnull(ca_address_sk#33))

(48) Project [codegen id : 15]
Output [4]: [ca_address_sk#33, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_county#34, 30, false, true) AS ca_county#37, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#35, 2, false, true) AS ca_state#38, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_country#36, 20, false, true) AS ca_country#39]
Input [4]: [ca_address_sk#33, ca_county#34, ca_state#35, ca_country#36]

(49) Exchange
Input [4]: [ca_address_sk#33, ca_county#37, ca_state#38, ca_country#39]
Arguments: hashpartitioning(ca_address_sk#33, 5), ENSURE_REQUIREMENTS, [id=#40]

(50) Sort [codegen id : 16]
Input [4]: [ca_address_sk#33, ca_county#37, ca_state#38, ca_country#39]
Arguments: [ca_address_sk#33 ASC NULLS FIRST], false, 0

(51) SortMergeJoin [codegen id : 17]
Left keys [1]: [c_current_addr_sk#26]
Right keys [1]: [ca_address_sk#33]
Join condition: None

(52) Project [codegen id : 17]
Output [5]: [c_customer_sk#24, c_birth_year#28, ca_county#37, ca_state#38, ca_country#39]
Input [7]: [c_customer_sk#24, c_current_addr_sk#26, c_birth_year#28, ca_address_sk#33, ca_county#37, ca_state#38, ca_country#39]

(53) Exchange
Input [5]: [c_customer_sk#24, c_birth_year#28, ca_county#37, ca_state#38, ca_country#39]
Arguments: hashpartitioning(c_customer_sk#24, 5), ENSURE_REQUIREMENTS, [id=#41]

(54) Sort [codegen id : 18]
Input [5]: [c_customer_sk#24, c_birth_year#28, ca_county#37, ca_state#38, ca_country#39]
Arguments: [c_customer_sk#24 ASC NULLS FIRST], false, 0

(55) SortMergeJoin [codegen id : 19]
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#24]
Join condition: None

(56) Project [codegen id : 19]
Output [11]: [cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, c_birth_year#28, i_item_id#21 AS i_item_id#42, ca_country#39 AS ca_country#43, ca_state#38 AS ca_state#44, ca_county#37 AS ca_county#45]
Input [13]: [cs_bill_customer_sk#2, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, i_item_id#21, c_customer_sk#24, c_birth_year#28, ca_county#37, ca_state#38, ca_country#39]

(57) Expand [codegen id : 19]
Input [11]: [cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, c_birth_year#28, i_item_id#42, ca_country#43, ca_state#44, ca_county#45]
Arguments: [List(cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, c_birth_year#28, i_item_id#42, ca_country#43, ca_state#44, ca_county#45, 0), List(cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, c_birth_year#28, i_item_id#42, ca_country#43, ca_state#44, null, 1), List(cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, c_birth_year#28, i_item_id#42, ca_country#43, null, null, 3), List(cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, c_birth_year#28, i_item_id#42, null, null, null, 7), List(cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, c_birth_year#28, null, null, null, null, 15)], [cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, c_birth_year#28, i_item_id#46, ca_country#47, ca_state#48, ca_county#49, spark_grouping_id#50]

(58) HashAggregate [codegen id : 19]
Input [12]: [cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#17, c_birth_year#28, i_item_id#46, ca_country#47, ca_state#48, ca_county#49, spark_grouping_id#50]
Keys [5]: [i_item_id#46, ca_country#47, ca_state#48, ca_county#49, spark_grouping_id#50]
Functions [7]: [partial_avg(cast(cs_quantity#5 as decimal(12,2))), partial_avg(cast(cs_list_price#6 as decimal(12,2))), partial_avg(cast(cs_coupon_amt#8 as decimal(12,2))), partial_avg(cast(cs_sales_price#7 as decimal(12,2))), partial_avg(cast(cs_net_profit#9 as decimal(12,2))), partial_avg(cast(c_birth_year#28 as decimal(12,2))), partial_avg(cast(cd_dep_count#17 as decimal(12,2)))]
Aggregate Attributes [14]: [sum#51, count#52, sum#53, count#54, sum#55, count#56, sum#57, count#58, sum#59, count#60, sum#61, count#62, sum#63, count#64]
Results [19]: [i_item_id#46, ca_country#47, ca_state#48, ca_county#49, spark_grouping_id#50, sum#65, count#66, sum#67, count#68, sum#69, count#70, sum#71, count#72, sum#73, count#74, sum#75, count#76, sum#77, count#78]

(59) Exchange
Input [19]: [i_item_id#46, ca_country#47, ca_state#48, ca_county#49, spark_grouping_id#50, sum#65, count#66, sum#67, count#68, sum#69, count#70, sum#71, count#72, sum#73, count#74, sum#75, count#76, sum#77, count#78]
Arguments: hashpartitioning(i_item_id#46, ca_country#47, ca_state#48, ca_county#49, spark_grouping_id#50, 5), ENSURE_REQUIREMENTS, [id=#79]

(60) HashAggregate [codegen id : 20]
Input [19]: [i_item_id#46, ca_country#47, ca_state#48, ca_county#49, spark_grouping_id#50, sum#65, count#66, sum#67, count#68, sum#69, count#70, sum#71, count#72, sum#73, count#74, sum#75, count#76, sum#77, count#78]
Keys [5]: [i_item_id#46, ca_country#47, ca_state#48, ca_county#49, spark_grouping_id#50]
Functions [7]: [avg(cast(cs_quantity#5 as decimal(12,2))), avg(cast(cs_list_price#6 as decimal(12,2))), avg(cast(cs_coupon_amt#8 as decimal(12,2))), avg(cast(cs_sales_price#7 as decimal(12,2))), avg(cast(cs_net_profit#9 as decimal(12,2))), avg(cast(c_birth_year#28 as decimal(12,2))), avg(cast(cd_dep_count#17 as decimal(12,2)))]
Aggregate Attributes [7]: [avg(cast(cs_quantity#5 as decimal(12,2)))#80, avg(cast(cs_list_price#6 as decimal(12,2)))#81, avg(cast(cs_coupon_amt#8 as decimal(12,2)))#82, avg(cast(cs_sales_price#7 as decimal(12,2)))#83, avg(cast(cs_net_profit#9 as decimal(12,2)))#84, avg(cast(c_birth_year#28 as decimal(12,2)))#85, avg(cast(cd_dep_count#17 as decimal(12,2)))#86]
Results [11]: [i_item_id#46, ca_country#47, ca_state#48, ca_county#49, avg(cast(cs_quantity#5 as decimal(12,2)))#80 AS agg1#87, avg(cast(cs_list_price#6 as decimal(12,2)))#81 AS agg2#88, avg(cast(cs_coupon_amt#8 as decimal(12,2)))#82 AS agg3#89, avg(cast(cs_sales_price#7 as decimal(12,2)))#83 AS agg4#90, avg(cast(cs_net_profit#9 as decimal(12,2)))#84 AS agg5#91, avg(cast(c_birth_year#28 as decimal(12,2)))#85 AS agg6#92, avg(cast(cd_dep_count#17 as decimal(12,2)))#86 AS agg7#93]

(61) TakeOrderedAndProject
Input [11]: [i_item_id#46, ca_country#47, ca_state#48, ca_county#49, agg1#87, agg2#88, agg3#89, agg4#90, agg5#91, agg6#92, agg7#93]
Arguments: 100, [ca_country#47 ASC NULLS FIRST, ca_state#48 ASC NULLS FIRST, ca_county#49 ASC NULLS FIRST, i_item_id#46 ASC NULLS FIRST], [i_item_id#46, ca_country#47, ca_state#48, ca_county#49, agg1#87, agg2#88, agg3#89, agg4#90, agg5#91, agg6#92, agg7#93]

