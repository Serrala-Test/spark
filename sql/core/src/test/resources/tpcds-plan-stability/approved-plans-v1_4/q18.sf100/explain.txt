== Physical Plan ==
TakeOrderedAndProject (30)
+- * HashAggregate (29)
   +- Exchange (28)
      +- * HashAggregate (27)
         +- * Expand (26)
            +- * Project (25)
               +- * SortMergeJoin Inner (24)
                  :- * Sort (21)
                  :  +- Exchange (20)
                  :     +- * Project (19)
                  :        +- * BroadcastHashJoin Inner BuildRight (18)
                  :           :- * Project (13)
                  :           :  +- * BroadcastHashJoin Inner BuildRight (12)
                  :           :     :- * Project (10)
                  :           :     :  +- * BroadcastHashJoin Inner BuildRight (9)
                  :           :     :     :- * Filter (3)
                  :           :     :     :  +- * ColumnarToRow (2)
                  :           :     :     :     +- Scan parquet spark_catalog.default.catalog_sales (1)
                  :           :     :     +- BroadcastExchange (8)
                  :           :     :        +- * Project (7)
                  :           :     :           +- * Filter (6)
                  :           :     :              +- * ColumnarToRow (5)
                  :           :     :                 +- Scan parquet spark_catalog.default.customer_demographics (4)
                  :           :     +- ReusedExchange (11)
                  :           +- BroadcastExchange (17)
                  :              +- * Filter (16)
                  :                 +- * ColumnarToRow (15)
                  :                    +- Scan parquet spark_catalog.default.item (14)
                  +- * Sort (23)
                     +- ReusedExchange (22)


(1) Scan parquet spark_catalog.default.catalog_sales
Output [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#9), dynamicpruningexpression(cs_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]

(3) Filter [codegen id : 4]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Condition : (((isnotnull(cs_bill_cdemo_sk#2) AND isnotnull(cs_bill_customer_sk#1)) AND isnotnull(cs_item_sk#3)) AND might_contain(Subquery scalar-subquery#11, [id=#12], xxhash64(cs_bill_customer_sk#1, 42), false))

(4) Scan parquet spark_catalog.default.customer_demographics
Output [4]: [cd_demo_sk#13, cd_gender#14, cd_education_status#15, cd_dep_count#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_education_status), EqualTo(cd_gender,F), EqualTo(cd_education_status,Unknown             ), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_education_status:string,cd_dep_count:int>

(5) ColumnarToRow [codegen id : 1]
Input [4]: [cd_demo_sk#13, cd_gender#14, cd_education_status#15, cd_dep_count#16]

(6) Filter [codegen id : 1]
Input [4]: [cd_demo_sk#13, cd_gender#14, cd_education_status#15, cd_dep_count#16]
Condition : ((((isnotnull(cd_gender#14) AND isnotnull(cd_education_status#15)) AND (cd_gender#14 = F)) AND (cd_education_status#15 = Unknown             )) AND isnotnull(cd_demo_sk#13))

(7) Project [codegen id : 1]
Output [2]: [cd_demo_sk#13, cd_dep_count#16]
Input [4]: [cd_demo_sk#13, cd_gender#14, cd_education_status#15, cd_dep_count#16]

(8) BroadcastExchange
Input [2]: [cd_demo_sk#13, cd_dep_count#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_bill_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#13]
Join type: Inner
Join condition: None

(10) Project [codegen id : 4]
Output [9]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#16]
Input [11]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_demo_sk#13, cd_dep_count#16]

(11) ReusedExchange [Reuses operator id: 58]
Output [1]: [d_date_sk#17]

(12) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#9]
Right keys [1]: [d_date_sk#17]
Join type: Inner
Join condition: None

(13) Project [codegen id : 4]
Output [8]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16]
Input [10]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#16, d_date_sk#17]

(14) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#18, i_item_id#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(15) ColumnarToRow [codegen id : 3]
Input [2]: [i_item_sk#18, i_item_id#19]

(16) Filter [codegen id : 3]
Input [2]: [i_item_sk#18, i_item_id#19]
Condition : isnotnull(i_item_sk#18)

(17) BroadcastExchange
Input [2]: [i_item_sk#18, i_item_id#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(18) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [i_item_sk#18]
Join type: Inner
Join condition: None

(19) Project [codegen id : 4]
Output [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_id#19]
Input [10]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_sk#18, i_item_id#19]

(20) Exchange
Input [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_id#19]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(21) Sort [codegen id : 5]
Input [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_id#19]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(22) ReusedExchange [Reuses operator id: 50]
Output [5]: [c_customer_sk#20, c_birth_year#21, ca_county#22, ca_state#23, ca_country#24]

(23) Sort [codegen id : 12]
Input [5]: [c_customer_sk#20, c_birth_year#21, ca_county#22, ca_state#23, ca_country#24]
Arguments: [c_customer_sk#20 ASC NULLS FIRST], false, 0

(24) SortMergeJoin [codegen id : 13]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#20]
Join type: Inner
Join condition: None

(25) Project [codegen id : 13]
Output [11]: [cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, c_birth_year#21, i_item_id#19, ca_country#24, ca_state#23, ca_county#22]
Input [13]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_id#19, c_customer_sk#20, c_birth_year#21, ca_county#22, ca_state#23, ca_country#24]

(26) Expand [codegen id : 13]
Input [11]: [cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, c_birth_year#21, i_item_id#19, ca_country#24, ca_state#23, ca_county#22]
Arguments: [[cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, c_birth_year#21, i_item_id#19, ca_country#24, ca_state#23, ca_county#22, 0], [cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, c_birth_year#21, i_item_id#19, ca_country#24, ca_state#23, null, 1], [cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, c_birth_year#21, i_item_id#19, ca_country#24, null, null, 3], [cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, c_birth_year#21, i_item_id#19, null, null, null, 7], [cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, c_birth_year#21, null, null, null, null, 15]], [cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, c_birth_year#21, i_item_id#25, ca_country#26, ca_state#27, ca_county#28, spark_grouping_id#29]

(27) HashAggregate [codegen id : 13]
Input [12]: [cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, c_birth_year#21, i_item_id#25, ca_country#26, ca_state#27, ca_county#28, spark_grouping_id#29]
Keys [5]: [i_item_id#25, ca_country#26, ca_state#27, ca_county#28, spark_grouping_id#29]
Functions [7]: [partial_avg(cast(cs_quantity#4 as decimal(12,2))), partial_avg(cast(cs_list_price#5 as decimal(12,2))), partial_avg(cast(cs_coupon_amt#7 as decimal(12,2))), partial_avg(cast(cs_sales_price#6 as decimal(12,2))), partial_avg(cast(cs_net_profit#8 as decimal(12,2))), partial_avg(cast(c_birth_year#21 as decimal(12,2))), partial_avg(cast(cd_dep_count#16 as decimal(12,2)))]
Aggregate Attributes [14]: [sum#30, count#31, sum#32, count#33, sum#34, count#35, sum#36, count#37, sum#38, count#39, sum#40, count#41, sum#42, count#43]
Results [19]: [i_item_id#25, ca_country#26, ca_state#27, ca_county#28, spark_grouping_id#29, sum#44, count#45, sum#46, count#47, sum#48, count#49, sum#50, count#51, sum#52, count#53, sum#54, count#55, sum#56, count#57]

(28) Exchange
Input [19]: [i_item_id#25, ca_country#26, ca_state#27, ca_county#28, spark_grouping_id#29, sum#44, count#45, sum#46, count#47, sum#48, count#49, sum#50, count#51, sum#52, count#53, sum#54, count#55, sum#56, count#57]
Arguments: hashpartitioning(i_item_id#25, ca_country#26, ca_state#27, ca_county#28, spark_grouping_id#29, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(29) HashAggregate [codegen id : 14]
Input [19]: [i_item_id#25, ca_country#26, ca_state#27, ca_county#28, spark_grouping_id#29, sum#44, count#45, sum#46, count#47, sum#48, count#49, sum#50, count#51, sum#52, count#53, sum#54, count#55, sum#56, count#57]
Keys [5]: [i_item_id#25, ca_country#26, ca_state#27, ca_county#28, spark_grouping_id#29]
Functions [7]: [avg(cast(cs_quantity#4 as decimal(12,2))), avg(cast(cs_list_price#5 as decimal(12,2))), avg(cast(cs_coupon_amt#7 as decimal(12,2))), avg(cast(cs_sales_price#6 as decimal(12,2))), avg(cast(cs_net_profit#8 as decimal(12,2))), avg(cast(c_birth_year#21 as decimal(12,2))), avg(cast(cd_dep_count#16 as decimal(12,2)))]
Aggregate Attributes [7]: [avg(cast(cs_quantity#4 as decimal(12,2)))#58, avg(cast(cs_list_price#5 as decimal(12,2)))#59, avg(cast(cs_coupon_amt#7 as decimal(12,2)))#60, avg(cast(cs_sales_price#6 as decimal(12,2)))#61, avg(cast(cs_net_profit#8 as decimal(12,2)))#62, avg(cast(c_birth_year#21 as decimal(12,2)))#63, avg(cast(cd_dep_count#16 as decimal(12,2)))#64]
Results [11]: [i_item_id#25, ca_country#26, ca_state#27, ca_county#28, avg(cast(cs_quantity#4 as decimal(12,2)))#58 AS agg1#65, avg(cast(cs_list_price#5 as decimal(12,2)))#59 AS agg2#66, avg(cast(cs_coupon_amt#7 as decimal(12,2)))#60 AS agg3#67, avg(cast(cs_sales_price#6 as decimal(12,2)))#61 AS agg4#68, avg(cast(cs_net_profit#8 as decimal(12,2)))#62 AS agg5#69, avg(cast(c_birth_year#21 as decimal(12,2)))#63 AS agg6#70, avg(cast(cd_dep_count#16 as decimal(12,2)))#64 AS agg7#71]

(30) TakeOrderedAndProject
Input [11]: [i_item_id#25, ca_country#26, ca_state#27, ca_county#28, agg1#65, agg2#66, agg3#67, agg4#68, agg5#69, agg6#70, agg7#71]
Arguments: 100, [ca_country#26 ASC NULLS FIRST, ca_state#27 ASC NULLS FIRST, ca_county#28 ASC NULLS FIRST, i_item_id#25 ASC NULLS FIRST], [i_item_id#25, ca_country#26, ca_state#27, ca_county#28, agg1#65, agg2#66, agg3#67, agg4#68, agg5#69, agg6#70, agg7#71]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#11, [id=#12]
ObjectHashAggregate (53)
+- Exchange (52)
   +- ObjectHashAggregate (51)
      +- Exchange (50)
         +- * Project (49)
            +- * SortMergeJoin Inner (48)
               :- * Sort (42)
               :  +- Exchange (41)
               :     +- * Project (40)
               :        +- * BroadcastHashJoin Inner BuildRight (39)
               :           :- * Project (34)
               :           :  +- * Filter (33)
               :           :     +- * ColumnarToRow (32)
               :           :        +- Scan parquet spark_catalog.default.customer (31)
               :           +- BroadcastExchange (38)
               :              +- * Filter (37)
               :                 +- * ColumnarToRow (36)
               :                    +- Scan parquet spark_catalog.default.customer_address (35)
               +- * Sort (47)
                  +- Exchange (46)
                     +- * Filter (45)
                        +- * ColumnarToRow (44)
                           +- Scan parquet spark_catalog.default.customer_demographics (43)


(31) Scan parquet spark_catalog.default.customer
Output [5]: [c_customer_sk#20, c_current_cdemo_sk#72, c_current_addr_sk#73, c_birth_month#74, c_birth_year#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [In(c_birth_month, [1,12,2,6,8,9]), IsNotNull(c_customer_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int,c_birth_month:int,c_birth_year:int>

(32) ColumnarToRow [codegen id : 2]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#72, c_current_addr_sk#73, c_birth_month#74, c_birth_year#21]

(33) Filter [codegen id : 2]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#72, c_current_addr_sk#73, c_birth_month#74, c_birth_year#21]
Condition : (((c_birth_month#74 IN (1,6,8,9,12,2) AND isnotnull(c_customer_sk#20)) AND isnotnull(c_current_cdemo_sk#72)) AND isnotnull(c_current_addr_sk#73))

(34) Project [codegen id : 2]
Output [4]: [c_customer_sk#20, c_current_cdemo_sk#72, c_current_addr_sk#73, c_birth_year#21]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#72, c_current_addr_sk#73, c_birth_month#74, c_birth_year#21]

(35) Scan parquet spark_catalog.default.customer_address
Output [4]: [ca_address_sk#75, ca_county#22, ca_state#23, ca_country#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [IN,MS,ND,NM,OK,VA]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string,ca_state:string,ca_country:string>

(36) ColumnarToRow [codegen id : 1]
Input [4]: [ca_address_sk#75, ca_county#22, ca_state#23, ca_country#24]

(37) Filter [codegen id : 1]
Input [4]: [ca_address_sk#75, ca_county#22, ca_state#23, ca_country#24]
Condition : (ca_state#23 IN (MS,IN,ND,OK,NM,VA) AND isnotnull(ca_address_sk#75))

(38) BroadcastExchange
Input [4]: [ca_address_sk#75, ca_county#22, ca_state#23, ca_country#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=5]

(39) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [c_current_addr_sk#73]
Right keys [1]: [ca_address_sk#75]
Join type: Inner
Join condition: None

(40) Project [codegen id : 2]
Output [6]: [c_customer_sk#20, c_current_cdemo_sk#72, c_birth_year#21, ca_county#22, ca_state#23, ca_country#24]
Input [8]: [c_customer_sk#20, c_current_cdemo_sk#72, c_current_addr_sk#73, c_birth_year#21, ca_address_sk#75, ca_county#22, ca_state#23, ca_country#24]

(41) Exchange
Input [6]: [c_customer_sk#20, c_current_cdemo_sk#72, c_birth_year#21, ca_county#22, ca_state#23, ca_country#24]
Arguments: hashpartitioning(c_current_cdemo_sk#72, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(42) Sort [codegen id : 3]
Input [6]: [c_customer_sk#20, c_current_cdemo_sk#72, c_birth_year#21, ca_county#22, ca_state#23, ca_country#24]
Arguments: [c_current_cdemo_sk#72 ASC NULLS FIRST], false, 0

(43) Scan parquet spark_catalog.default.customer_demographics
Output [1]: [cd_demo_sk#76]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int>

(44) ColumnarToRow [codegen id : 4]
Input [1]: [cd_demo_sk#76]

(45) Filter [codegen id : 4]
Input [1]: [cd_demo_sk#76]
Condition : isnotnull(cd_demo_sk#76)

(46) Exchange
Input [1]: [cd_demo_sk#76]
Arguments: hashpartitioning(cd_demo_sk#76, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(47) Sort [codegen id : 5]
Input [1]: [cd_demo_sk#76]
Arguments: [cd_demo_sk#76 ASC NULLS FIRST], false, 0

(48) SortMergeJoin [codegen id : 6]
Left keys [1]: [c_current_cdemo_sk#72]
Right keys [1]: [cd_demo_sk#76]
Join type: Inner
Join condition: None

(49) Project [codegen id : 6]
Output [5]: [c_customer_sk#20, c_birth_year#21, ca_county#22, ca_state#23, ca_country#24]
Input [7]: [c_customer_sk#20, c_current_cdemo_sk#72, c_birth_year#21, ca_county#22, ca_state#23, ca_country#24, cd_demo_sk#76]

(50) Exchange
Input [5]: [c_customer_sk#20, c_birth_year#21, ca_county#22, ca_state#23, ca_country#24]
Arguments: hashpartitioning(c_customer_sk#20, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(51) ObjectHashAggregate
Input [5]: [c_customer_sk#20, c_birth_year#21, ca_county#22, ca_state#23, ca_country#24]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(c_customer_sk#20, 42), 280323, 2242584, 0, 0)]
Aggregate Attributes [1]: [buf#77]
Results [1]: [buf#78]

(52) Exchange
Input [1]: [buf#78]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=9]

(53) ObjectHashAggregate
Input [1]: [buf#78]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(c_customer_sk#20, 42), 280323, 2242584, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(c_customer_sk#20, 42), 280323, 2242584, 0, 0)#79]
Results [1]: [bloom_filter_agg(xxhash64(c_customer_sk#20, 42), 280323, 2242584, 0, 0)#79 AS bloomFilter#80]

Subquery:2 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#9 IN dynamicpruning#10
BroadcastExchange (58)
+- * Project (57)
   +- * Filter (56)
      +- * ColumnarToRow (55)
         +- Scan parquet spark_catalog.default.date_dim (54)


(54) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#17, d_year#81]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(55) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#17, d_year#81]

(56) Filter [codegen id : 1]
Input [2]: [d_date_sk#17, d_year#81]
Condition : ((isnotnull(d_year#81) AND (d_year#81 = 1998)) AND isnotnull(d_date_sk#17))

(57) Project [codegen id : 1]
Output [1]: [d_date_sk#17]
Input [2]: [d_date_sk#17, d_year#81]

(58) BroadcastExchange
Input [1]: [d_date_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=10]


