== Physical Plan ==
TakeOrderedAndProject (53)
+- * HashAggregate (52)
   +- Exchange (51)
      +- * HashAggregate (50)
         +- * Expand (49)
            +- * Project (48)
               +- * BroadcastHashJoin Inner BuildRight (47)
                  :- * Project (41)
                  :  +- * BroadcastHashJoin Inner BuildRight (40)
                  :     :- * Project (34)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (33)
                  :     :     :- * Project (28)
                  :     :     :  +- * SortMergeJoin Inner (27)
                  :     :     :     :- * Sort (21)
                  :     :     :     :  +- Exchange (20)
                  :     :     :     :     +- * Project (19)
                  :     :     :     :        +- * SortMergeJoin Inner (18)
                  :     :     :     :           :- * Sort (11)
                  :     :     :     :           :  +- Exchange (10)
                  :     :     :     :           :     +- * Project (9)
                  :     :     :     :           :        +- * BroadcastHashJoin Inner BuildRight (8)
                  :     :     :     :           :           :- * Filter (3)
                  :     :     :     :           :           :  +- * ColumnarToRow (2)
                  :     :     :     :           :           :     +- Scan parquet default.catalog_sales (1)
                  :     :     :     :           :           +- BroadcastExchange (7)
                  :     :     :     :           :              +- * Filter (6)
                  :     :     :     :           :                 +- * ColumnarToRow (5)
                  :     :     :     :           :                    +- Scan parquet default.item (4)
                  :     :     :     :           +- * Sort (17)
                  :     :     :     :              +- Exchange (16)
                  :     :     :     :                 +- * Project (15)
                  :     :     :     :                    +- * Filter (14)
                  :     :     :     :                       +- * ColumnarToRow (13)
                  :     :     :     :                          +- Scan parquet default.customer (12)
                  :     :     :     +- * Sort (26)
                  :     :     :        +- Exchange (25)
                  :     :     :           +- * Filter (24)
                  :     :     :              +- * ColumnarToRow (23)
                  :     :     :                 +- Scan parquet default.customer_demographics (22)
                  :     :     +- BroadcastExchange (32)
                  :     :        +- * Filter (31)
                  :     :           +- * ColumnarToRow (30)
                  :     :              +- Scan parquet default.customer_address (29)
                  :     +- BroadcastExchange (39)
                  :        +- * Project (38)
                  :           +- * Filter (37)
                  :              +- * ColumnarToRow (36)
                  :                 +- Scan parquet default.date_dim (35)
                  +- BroadcastExchange (46)
                     +- * Project (45)
                        +- * Filter (44)
                           +- * ColumnarToRow (43)
                              +- Scan parquet default.customer_demographics (42)


(1) Scan parquet default.catalog_sales
Output [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]

(3) Filter [codegen id : 2]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9]
Condition : (((isnotnull(cs_bill_cdemo_sk#3) AND isnotnull(cs_bill_customer_sk#2)) AND isnotnull(cs_sold_date_sk#1)) AND isnotnull(cs_item_sk#4))

(4) Scan parquet default.item
Output [2]: [i_item_sk#10, i_item_id#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [i_item_sk#10, i_item_id#11]

(6) Filter [codegen id : 1]
Input [2]: [i_item_sk#10, i_item_id#11]
Condition : isnotnull(i_item_sk#10)

(7) BroadcastExchange
Input [2]: [i_item_sk#10, i_item_id#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#12]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [cs_item_sk#4]
Right keys [1]: [i_item_sk#10]
Join condition: None

(9) Project [codegen id : 2]
Output [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, i_item_id#11]
Input [11]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_item_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, i_item_sk#10, i_item_id#11]

(10) Exchange
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, i_item_id#11]
Arguments: hashpartitioning(cs_bill_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#13]

(11) Sort [codegen id : 3]
Input [9]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, i_item_id#11]
Arguments: [cs_bill_customer_sk#2 ASC NULLS FIRST], false, 0

(12) Scan parquet default.customer
Output [5]: [c_customer_sk#14, c_current_cdemo_sk#15, c_current_addr_sk#16, c_birth_month#17, c_birth_year#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [In(c_birth_month, [1,6,8,9,12,2]), IsNotNull(c_customer_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int,c_birth_month:int,c_birth_year:int>

(13) ColumnarToRow [codegen id : 4]
Input [5]: [c_customer_sk#14, c_current_cdemo_sk#15, c_current_addr_sk#16, c_birth_month#17, c_birth_year#18]

(14) Filter [codegen id : 4]
Input [5]: [c_customer_sk#14, c_current_cdemo_sk#15, c_current_addr_sk#16, c_birth_month#17, c_birth_year#18]
Condition : (((c_birth_month#17 IN (1,6,8,9,12,2) AND isnotnull(c_customer_sk#14)) AND isnotnull(c_current_cdemo_sk#15)) AND isnotnull(c_current_addr_sk#16))

(15) Project [codegen id : 4]
Output [4]: [c_customer_sk#14, c_current_cdemo_sk#15, c_current_addr_sk#16, c_birth_year#18]
Input [5]: [c_customer_sk#14, c_current_cdemo_sk#15, c_current_addr_sk#16, c_birth_month#17, c_birth_year#18]

(16) Exchange
Input [4]: [c_customer_sk#14, c_current_cdemo_sk#15, c_current_addr_sk#16, c_birth_year#18]
Arguments: hashpartitioning(c_customer_sk#14, 5), ENSURE_REQUIREMENTS, [id=#19]

(17) Sort [codegen id : 5]
Input [4]: [c_customer_sk#14, c_current_cdemo_sk#15, c_current_addr_sk#16, c_birth_year#18]
Arguments: [c_customer_sk#14 ASC NULLS FIRST], false, 0

(18) SortMergeJoin [codegen id : 6]
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#14]
Join condition: None

(19) Project [codegen id : 6]
Output [11]: [cs_sold_date_sk#1, cs_bill_cdemo_sk#3, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, i_item_id#11, c_current_cdemo_sk#15, c_current_addr_sk#16, c_birth_year#18]
Input [13]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_bill_cdemo_sk#3, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, i_item_id#11, c_customer_sk#14, c_current_cdemo_sk#15, c_current_addr_sk#16, c_birth_year#18]

(20) Exchange
Input [11]: [cs_sold_date_sk#1, cs_bill_cdemo_sk#3, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, i_item_id#11, c_current_cdemo_sk#15, c_current_addr_sk#16, c_birth_year#18]
Arguments: hashpartitioning(c_current_cdemo_sk#15, 5), ENSURE_REQUIREMENTS, [id=#20]

(21) Sort [codegen id : 7]
Input [11]: [cs_sold_date_sk#1, cs_bill_cdemo_sk#3, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, i_item_id#11, c_current_cdemo_sk#15, c_current_addr_sk#16, c_birth_year#18]
Arguments: [c_current_cdemo_sk#15 ASC NULLS FIRST], false, 0

(22) Scan parquet default.customer_demographics
Output [1]: [cd_demo_sk#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int>

(23) ColumnarToRow [codegen id : 8]
Input [1]: [cd_demo_sk#21]

(24) Filter [codegen id : 8]
Input [1]: [cd_demo_sk#21]
Condition : isnotnull(cd_demo_sk#21)

(25) Exchange
Input [1]: [cd_demo_sk#21]
Arguments: hashpartitioning(cd_demo_sk#21, 5), ENSURE_REQUIREMENTS, [id=#22]

(26) Sort [codegen id : 9]
Input [1]: [cd_demo_sk#21]
Arguments: [cd_demo_sk#21 ASC NULLS FIRST], false, 0

(27) SortMergeJoin [codegen id : 13]
Left keys [1]: [c_current_cdemo_sk#15]
Right keys [1]: [cd_demo_sk#21]
Join condition: None

(28) Project [codegen id : 13]
Output [10]: [cs_sold_date_sk#1, cs_bill_cdemo_sk#3, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, i_item_id#11, c_current_addr_sk#16, c_birth_year#18]
Input [12]: [cs_sold_date_sk#1, cs_bill_cdemo_sk#3, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, i_item_id#11, c_current_cdemo_sk#15, c_current_addr_sk#16, c_birth_year#18, cd_demo_sk#21]

(29) Scan parquet default.customer_address
Output [4]: [ca_address_sk#23, ca_county#24, ca_state#25, ca_country#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [MS,IN,ND,OK,NM,VA]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string,ca_state:string,ca_country:string>

(30) ColumnarToRow [codegen id : 10]
Input [4]: [ca_address_sk#23, ca_county#24, ca_state#25, ca_country#26]

(31) Filter [codegen id : 10]
Input [4]: [ca_address_sk#23, ca_county#24, ca_state#25, ca_country#26]
Condition : (ca_state#25 IN (MS,IN,ND,OK,NM,VA) AND isnotnull(ca_address_sk#23))

(32) BroadcastExchange
Input [4]: [ca_address_sk#23, ca_county#24, ca_state#25, ca_country#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(33) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [c_current_addr_sk#16]
Right keys [1]: [ca_address_sk#23]
Join condition: None

(34) Project [codegen id : 13]
Output [12]: [cs_sold_date_sk#1, cs_bill_cdemo_sk#3, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, i_item_id#11, c_birth_year#18, ca_county#24, ca_state#25, ca_country#26]
Input [14]: [cs_sold_date_sk#1, cs_bill_cdemo_sk#3, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, i_item_id#11, c_current_addr_sk#16, c_birth_year#18, ca_address_sk#23, ca_county#24, ca_state#25, ca_country#26]

(35) Scan parquet default.date_dim
Output [2]: [d_date_sk#28, d_year#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(36) ColumnarToRow [codegen id : 11]
Input [2]: [d_date_sk#28, d_year#29]

(37) Filter [codegen id : 11]
Input [2]: [d_date_sk#28, d_year#29]
Condition : ((isnotnull(d_year#29) AND (d_year#29 = 1998)) AND isnotnull(d_date_sk#28))

(38) Project [codegen id : 11]
Output [1]: [d_date_sk#28]
Input [2]: [d_date_sk#28, d_year#29]

(39) BroadcastExchange
Input [1]: [d_date_sk#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#30]

(40) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#28]
Join condition: None

(41) Project [codegen id : 13]
Output [11]: [cs_bill_cdemo_sk#3, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, i_item_id#11, c_birth_year#18, ca_county#24, ca_state#25, ca_country#26]
Input [13]: [cs_sold_date_sk#1, cs_bill_cdemo_sk#3, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, i_item_id#11, c_birth_year#18, ca_county#24, ca_state#25, ca_country#26, d_date_sk#28]

(42) Scan parquet default.customer_demographics
Output [4]: [cd_demo_sk#31, cd_gender#32, cd_education_status#33, cd_dep_count#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_education_status), EqualTo(cd_gender,F), EqualTo(cd_education_status,Unknown), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_education_status:string,cd_dep_count:int>

(43) ColumnarToRow [codegen id : 12]
Input [4]: [cd_demo_sk#31, cd_gender#32, cd_education_status#33, cd_dep_count#34]

(44) Filter [codegen id : 12]
Input [4]: [cd_demo_sk#31, cd_gender#32, cd_education_status#33, cd_dep_count#34]
Condition : ((((isnotnull(cd_gender#32) AND isnotnull(cd_education_status#33)) AND (cd_gender#32 = F)) AND (cd_education_status#33 = Unknown)) AND isnotnull(cd_demo_sk#31))

(45) Project [codegen id : 12]
Output [2]: [cd_demo_sk#31, cd_dep_count#34]
Input [4]: [cd_demo_sk#31, cd_gender#32, cd_education_status#33, cd_dep_count#34]

(46) BroadcastExchange
Input [2]: [cd_demo_sk#31, cd_dep_count#34]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#35]

(47) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [cs_bill_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#31]
Join condition: None

(48) Project [codegen id : 13]
Output [11]: [cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#34, c_birth_year#18, i_item_id#11, ca_country#26, ca_state#25, ca_county#24]
Input [13]: [cs_bill_cdemo_sk#3, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, i_item_id#11, c_birth_year#18, ca_county#24, ca_state#25, ca_country#26, cd_demo_sk#31, cd_dep_count#34]

(49) Expand [codegen id : 13]
Input [11]: [cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#34, c_birth_year#18, i_item_id#11, ca_country#26, ca_state#25, ca_county#24]
Arguments: [List(cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#34, c_birth_year#18, i_item_id#11, ca_country#26, ca_state#25, ca_county#24, 0), List(cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#34, c_birth_year#18, i_item_id#11, ca_country#26, ca_state#25, null, 1), List(cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#34, c_birth_year#18, i_item_id#11, ca_country#26, null, null, 3), List(cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#34, c_birth_year#18, i_item_id#11, null, null, null, 7), List(cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#34, c_birth_year#18, null, null, null, null, 15)], [cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#34, c_birth_year#18, i_item_id#36, ca_country#37, ca_state#38, ca_county#39, spark_grouping_id#40]

(50) HashAggregate [codegen id : 13]
Input [12]: [cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cs_net_profit#9, cd_dep_count#34, c_birth_year#18, i_item_id#36, ca_country#37, ca_state#38, ca_county#39, spark_grouping_id#40]
Keys [5]: [i_item_id#36, ca_country#37, ca_state#38, ca_county#39, spark_grouping_id#40]
Functions [7]: [partial_avg(cast(cs_quantity#5 as decimal(12,2))), partial_avg(cast(cs_list_price#6 as decimal(12,2))), partial_avg(cast(cs_coupon_amt#8 as decimal(12,2))), partial_avg(cast(cs_sales_price#7 as decimal(12,2))), partial_avg(cast(cs_net_profit#9 as decimal(12,2))), partial_avg(cast(c_birth_year#18 as decimal(12,2))), partial_avg(cast(cd_dep_count#34 as decimal(12,2)))]
Aggregate Attributes [14]: [sum#41, count#42, sum#43, count#44, sum#45, count#46, sum#47, count#48, sum#49, count#50, sum#51, count#52, sum#53, count#54]
Results [19]: [i_item_id#36, ca_country#37, ca_state#38, ca_county#39, spark_grouping_id#40, sum#55, count#56, sum#57, count#58, sum#59, count#60, sum#61, count#62, sum#63, count#64, sum#65, count#66, sum#67, count#68]

(51) Exchange
Input [19]: [i_item_id#36, ca_country#37, ca_state#38, ca_county#39, spark_grouping_id#40, sum#55, count#56, sum#57, count#58, sum#59, count#60, sum#61, count#62, sum#63, count#64, sum#65, count#66, sum#67, count#68]
Arguments: hashpartitioning(i_item_id#36, ca_country#37, ca_state#38, ca_county#39, spark_grouping_id#40, 5), ENSURE_REQUIREMENTS, [id=#69]

(52) HashAggregate [codegen id : 14]
Input [19]: [i_item_id#36, ca_country#37, ca_state#38, ca_county#39, spark_grouping_id#40, sum#55, count#56, sum#57, count#58, sum#59, count#60, sum#61, count#62, sum#63, count#64, sum#65, count#66, sum#67, count#68]
Keys [5]: [i_item_id#36, ca_country#37, ca_state#38, ca_county#39, spark_grouping_id#40]
Functions [7]: [avg(cast(cs_quantity#5 as decimal(12,2))), avg(cast(cs_list_price#6 as decimal(12,2))), avg(cast(cs_coupon_amt#8 as decimal(12,2))), avg(cast(cs_sales_price#7 as decimal(12,2))), avg(cast(cs_net_profit#9 as decimal(12,2))), avg(cast(c_birth_year#18 as decimal(12,2))), avg(cast(cd_dep_count#34 as decimal(12,2)))]
Aggregate Attributes [7]: [avg(cast(cs_quantity#5 as decimal(12,2)))#70, avg(cast(cs_list_price#6 as decimal(12,2)))#71, avg(cast(cs_coupon_amt#8 as decimal(12,2)))#72, avg(cast(cs_sales_price#7 as decimal(12,2)))#73, avg(cast(cs_net_profit#9 as decimal(12,2)))#74, avg(cast(c_birth_year#18 as decimal(12,2)))#75, avg(cast(cd_dep_count#34 as decimal(12,2)))#76]
Results [11]: [i_item_id#36, ca_country#37, ca_state#38, ca_county#39, avg(cast(cs_quantity#5 as decimal(12,2)))#70 AS agg1#77, avg(cast(cs_list_price#6 as decimal(12,2)))#71 AS agg2#78, avg(cast(cs_coupon_amt#8 as decimal(12,2)))#72 AS agg3#79, avg(cast(cs_sales_price#7 as decimal(12,2)))#73 AS agg4#80, avg(cast(cs_net_profit#9 as decimal(12,2)))#74 AS agg5#81, avg(cast(c_birth_year#18 as decimal(12,2)))#75 AS agg6#82, avg(cast(cd_dep_count#34 as decimal(12,2)))#76 AS agg7#83]

(53) TakeOrderedAndProject
Input [11]: [i_item_id#36, ca_country#37, ca_state#38, ca_county#39, agg1#77, agg2#78, agg3#79, agg4#80, agg5#81, agg6#82, agg7#83]
Arguments: 100, [ca_country#37 ASC NULLS FIRST, ca_state#38 ASC NULLS FIRST, ca_county#39 ASC NULLS FIRST, i_item_id#36 ASC NULLS FIRST], [i_item_id#36, ca_country#37, ca_state#38, ca_county#39, agg1#77, agg2#78, agg3#79, agg4#80, agg5#81, agg6#82, agg7#83]

