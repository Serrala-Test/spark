== Physical Plan ==
TakeOrderedAndProject (50)
+- * HashAggregate (49)
   +- Exchange (48)
      +- * HashAggregate (47)
         +- * Expand (46)
            +- * Project (45)
               +- * BroadcastHashJoin Inner BuildRight (44)
                  :- * Project (39)
                  :  +- * BroadcastHashJoin Inner BuildRight (38)
                  :     :- * Project (32)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (31)
                  :     :     :- * Project (26)
                  :     :     :  +- * SortMergeJoin Inner (25)
                  :     :     :     :- * Sort (19)
                  :     :     :     :  +- Exchange (18)
                  :     :     :     :     +- * Project (17)
                  :     :     :     :        +- * BroadcastHashJoin Inner BuildLeft (16)
                  :     :     :     :           :- BroadcastExchange (11)
                  :     :     :     :           :  +- * Project (10)
                  :     :     :     :           :     +- * BroadcastHashJoin Inner BuildLeft (9)
                  :     :     :     :           :        :- BroadcastExchange (4)
                  :     :     :     :           :        :  +- * Filter (3)
                  :     :     :     :           :        :     +- * ColumnarToRow (2)
                  :     :     :     :           :        :        +- Scan parquet default.catalog_sales (1)
                  :     :     :     :           :        +- * Project (8)
                  :     :     :     :           :           +- * Filter (7)
                  :     :     :     :           :              +- * ColumnarToRow (6)
                  :     :     :     :           :                 +- Scan parquet default.customer_demographics (5)
                  :     :     :     :           +- * Project (15)
                  :     :     :     :              +- * Filter (14)
                  :     :     :     :                 +- * ColumnarToRow (13)
                  :     :     :     :                    +- Scan parquet default.customer (12)
                  :     :     :     +- * Sort (24)
                  :     :     :        +- Exchange (23)
                  :     :     :           +- * Filter (22)
                  :     :     :              +- * ColumnarToRow (21)
                  :     :     :                 +- Scan parquet default.customer_demographics (20)
                  :     :     +- BroadcastExchange (30)
                  :     :        +- * Filter (29)
                  :     :           +- * ColumnarToRow (28)
                  :     :              +- Scan parquet default.customer_address (27)
                  :     +- BroadcastExchange (37)
                  :        +- * Project (36)
                  :           +- * Filter (35)
                  :              +- * ColumnarToRow (34)
                  :                 +- Scan parquet default.date_dim (33)
                  +- BroadcastExchange (43)
                     +- * Filter (42)
                        +- * ColumnarToRow (41)
                           +- Scan parquet default.item (40)


(1) Scan parquet default.catalog_sales
Output [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#9), dynamicpruningexpression(cs_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]

(3) Filter [codegen id : 1]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Condition : ((isnotnull(cs_bill_cdemo_sk#2) AND isnotnull(cs_bill_customer_sk#1)) AND isnotnull(cs_item_sk#3))

(4) BroadcastExchange
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#11]

(5) Scan parquet default.customer_demographics
Output [4]: [cd_demo_sk#12, cd_gender#13, cd_education_status#14, cd_dep_count#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_education_status), EqualTo(cd_gender,F), EqualTo(cd_education_status,Unknown), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_education_status:string,cd_dep_count:int>

(6) ColumnarToRow
Input [4]: [cd_demo_sk#12, cd_gender#13, cd_education_status#14, cd_dep_count#15]

(7) Filter
Input [4]: [cd_demo_sk#12, cd_gender#13, cd_education_status#14, cd_dep_count#15]
Condition : ((((isnotnull(cd_gender#13) AND isnotnull(cd_education_status#14)) AND (cd_gender#13 = F)) AND (cd_education_status#14 = Unknown)) AND isnotnull(cd_demo_sk#12))

(8) Project
Output [2]: [cd_demo_sk#12, cd_dep_count#15]
Input [4]: [cd_demo_sk#12, cd_gender#13, cd_education_status#14, cd_dep_count#15]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [cs_bill_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#12]
Join condition: None

(10) Project [codegen id : 2]
Output [9]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15]
Input [11]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_demo_sk#12, cd_dep_count#15]

(11) BroadcastExchange
Input [9]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(12) Scan parquet default.customer
Output [5]: [c_customer_sk#17, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_month#20, c_birth_year#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [In(c_birth_month, [1,6,8,9,12,2]), IsNotNull(c_customer_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int,c_birth_month:int,c_birth_year:int>

(13) ColumnarToRow
Input [5]: [c_customer_sk#17, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_month#20, c_birth_year#21]

(14) Filter
Input [5]: [c_customer_sk#17, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_month#20, c_birth_year#21]
Condition : (((c_birth_month#20 IN (1,6,8,9,12,2) AND isnotnull(c_customer_sk#17)) AND isnotnull(c_current_cdemo_sk#18)) AND isnotnull(c_current_addr_sk#19))

(15) Project
Output [4]: [c_customer_sk#17, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_year#21]
Input [5]: [c_customer_sk#17, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_month#20, c_birth_year#21]

(16) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#17]
Join condition: None

(17) Project [codegen id : 3]
Output [11]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_year#21]
Input [13]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_customer_sk#17, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_year#21]

(18) Exchange
Input [11]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_year#21]
Arguments: hashpartitioning(c_current_cdemo_sk#18, 5), ENSURE_REQUIREMENTS, [id=#22]

(19) Sort [codegen id : 4]
Input [11]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_year#21]
Arguments: [c_current_cdemo_sk#18 ASC NULLS FIRST], false, 0

(20) Scan parquet default.customer_demographics
Output [1]: [cd_demo_sk#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int>

(21) ColumnarToRow [codegen id : 5]
Input [1]: [cd_demo_sk#23]

(22) Filter [codegen id : 5]
Input [1]: [cd_demo_sk#23]
Condition : isnotnull(cd_demo_sk#23)

(23) Exchange
Input [1]: [cd_demo_sk#23]
Arguments: hashpartitioning(cd_demo_sk#23, 5), ENSURE_REQUIREMENTS, [id=#24]

(24) Sort [codegen id : 6]
Input [1]: [cd_demo_sk#23]
Arguments: [cd_demo_sk#23 ASC NULLS FIRST], false, 0

(25) SortMergeJoin [codegen id : 10]
Left keys [1]: [c_current_cdemo_sk#18]
Right keys [1]: [cd_demo_sk#23]
Join condition: None

(26) Project [codegen id : 10]
Output [10]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_addr_sk#19, c_birth_year#21]
Input [12]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_cdemo_sk#18, c_current_addr_sk#19, c_birth_year#21, cd_demo_sk#23]

(27) Scan parquet default.customer_address
Output [4]: [ca_address_sk#25, ca_county#26, ca_state#27, ca_country#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [MS,IN,ND,OK,NM,VA]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string,ca_state:string,ca_country:string>

(28) ColumnarToRow [codegen id : 7]
Input [4]: [ca_address_sk#25, ca_county#26, ca_state#27, ca_country#28]

(29) Filter [codegen id : 7]
Input [4]: [ca_address_sk#25, ca_county#26, ca_state#27, ca_country#28]
Condition : (ca_state#27 IN (MS,IN,ND,OK,NM,VA) AND isnotnull(ca_address_sk#25))

(30) BroadcastExchange
Input [4]: [ca_address_sk#25, ca_county#26, ca_state#27, ca_country#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(31) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [c_current_addr_sk#19]
Right keys [1]: [ca_address_sk#25]
Join condition: None

(32) Project [codegen id : 10]
Output [12]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_birth_year#21, ca_county#26, ca_state#27, ca_country#28]
Input [14]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_current_addr_sk#19, c_birth_year#21, ca_address_sk#25, ca_county#26, ca_state#27, ca_country#28]

(33) Scan parquet default.date_dim
Output [2]: [d_date_sk#30, d_year#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(34) ColumnarToRow [codegen id : 8]
Input [2]: [d_date_sk#30, d_year#31]

(35) Filter [codegen id : 8]
Input [2]: [d_date_sk#30, d_year#31]
Condition : ((isnotnull(d_year#31) AND (d_year#31 = 1998)) AND isnotnull(d_date_sk#30))

(36) Project [codegen id : 8]
Output [1]: [d_date_sk#30]
Input [2]: [d_date_sk#30, d_year#31]

(37) BroadcastExchange
Input [1]: [d_date_sk#30]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#32]

(38) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#9]
Right keys [1]: [d_date_sk#30]
Join condition: None

(39) Project [codegen id : 10]
Output [11]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#15, c_birth_year#21, ca_county#26, ca_state#27, ca_country#28]
Input [13]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#15, c_birth_year#21, ca_county#26, ca_state#27, ca_country#28, d_date_sk#30]

(40) Scan parquet default.item
Output [2]: [i_item_sk#33, i_item_id#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(41) ColumnarToRow [codegen id : 9]
Input [2]: [i_item_sk#33, i_item_id#34]

(42) Filter [codegen id : 9]
Input [2]: [i_item_sk#33, i_item_id#34]
Condition : isnotnull(i_item_sk#33)

(43) BroadcastExchange
Input [2]: [i_item_sk#33, i_item_id#34]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#35]

(44) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [i_item_sk#33]
Join condition: None

(45) Project [codegen id : 10]
Output [11]: [cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#15, c_birth_year#21, i_item_id#34, ca_country#28, ca_state#27, ca_county#26]
Input [13]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#15, c_birth_year#21, ca_county#26, ca_state#27, ca_country#28, i_item_sk#33, i_item_id#34]

(46) Expand [codegen id : 10]
Input [11]: [cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#15, c_birth_year#21, i_item_id#34, ca_country#28, ca_state#27, ca_county#26]
Arguments: [List(cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#15, c_birth_year#21, i_item_id#34, ca_country#28, ca_state#27, ca_county#26, 0), List(cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#15, c_birth_year#21, i_item_id#34, ca_country#28, ca_state#27, null, 1), List(cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#15, c_birth_year#21, i_item_id#34, ca_country#28, null, null, 3), List(cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#15, c_birth_year#21, i_item_id#34, null, null, null, 7), List(cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#15, c_birth_year#21, null, null, null, null, 15)], [cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#15, c_birth_year#21, i_item_id#36, ca_country#37, ca_state#38, ca_county#39, spark_grouping_id#40]

(47) HashAggregate [codegen id : 10]
Input [12]: [cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#15, c_birth_year#21, i_item_id#36, ca_country#37, ca_state#38, ca_county#39, spark_grouping_id#40]
Keys [5]: [i_item_id#36, ca_country#37, ca_state#38, ca_county#39, spark_grouping_id#40]
Functions [7]: [partial_avg(cast(cs_quantity#4 as decimal(12,2))), partial_avg(cast(cs_list_price#5 as decimal(12,2))), partial_avg(cast(cs_coupon_amt#7 as decimal(12,2))), partial_avg(cast(cs_sales_price#6 as decimal(12,2))), partial_avg(cast(cs_net_profit#8 as decimal(12,2))), partial_avg(cast(c_birth_year#21 as decimal(12,2))), partial_avg(cast(cd_dep_count#15 as decimal(12,2)))]
Aggregate Attributes [14]: [sum#41, count#42, sum#43, count#44, sum#45, count#46, sum#47, count#48, sum#49, count#50, sum#51, count#52, sum#53, count#54]
Results [19]: [i_item_id#36, ca_country#37, ca_state#38, ca_county#39, spark_grouping_id#40, sum#55, count#56, sum#57, count#58, sum#59, count#60, sum#61, count#62, sum#63, count#64, sum#65, count#66, sum#67, count#68]

(48) Exchange
Input [19]: [i_item_id#36, ca_country#37, ca_state#38, ca_county#39, spark_grouping_id#40, sum#55, count#56, sum#57, count#58, sum#59, count#60, sum#61, count#62, sum#63, count#64, sum#65, count#66, sum#67, count#68]
Arguments: hashpartitioning(i_item_id#36, ca_country#37, ca_state#38, ca_county#39, spark_grouping_id#40, 5), ENSURE_REQUIREMENTS, [id=#69]

(49) HashAggregate [codegen id : 11]
Input [19]: [i_item_id#36, ca_country#37, ca_state#38, ca_county#39, spark_grouping_id#40, sum#55, count#56, sum#57, count#58, sum#59, count#60, sum#61, count#62, sum#63, count#64, sum#65, count#66, sum#67, count#68]
Keys [5]: [i_item_id#36, ca_country#37, ca_state#38, ca_county#39, spark_grouping_id#40]
Functions [7]: [avg(cast(cs_quantity#4 as decimal(12,2))), avg(cast(cs_list_price#5 as decimal(12,2))), avg(cast(cs_coupon_amt#7 as decimal(12,2))), avg(cast(cs_sales_price#6 as decimal(12,2))), avg(cast(cs_net_profit#8 as decimal(12,2))), avg(cast(c_birth_year#21 as decimal(12,2))), avg(cast(cd_dep_count#15 as decimal(12,2)))]
Aggregate Attributes [7]: [avg(cast(cs_quantity#4 as decimal(12,2)))#70, avg(cast(cs_list_price#5 as decimal(12,2)))#71, avg(cast(cs_coupon_amt#7 as decimal(12,2)))#72, avg(cast(cs_sales_price#6 as decimal(12,2)))#73, avg(cast(cs_net_profit#8 as decimal(12,2)))#74, avg(cast(c_birth_year#21 as decimal(12,2)))#75, avg(cast(cd_dep_count#15 as decimal(12,2)))#76]
Results [11]: [i_item_id#36, ca_country#37, ca_state#38, ca_county#39, avg(cast(cs_quantity#4 as decimal(12,2)))#70 AS agg1#77, avg(cast(cs_list_price#5 as decimal(12,2)))#71 AS agg2#78, avg(cast(cs_coupon_amt#7 as decimal(12,2)))#72 AS agg3#79, avg(cast(cs_sales_price#6 as decimal(12,2)))#73 AS agg4#80, avg(cast(cs_net_profit#8 as decimal(12,2)))#74 AS agg5#81, avg(cast(c_birth_year#21 as decimal(12,2)))#75 AS agg6#82, avg(cast(cd_dep_count#15 as decimal(12,2)))#76 AS agg7#83]

(50) TakeOrderedAndProject
Input [11]: [i_item_id#36, ca_country#37, ca_state#38, ca_county#39, agg1#77, agg2#78, agg3#79, agg4#80, agg5#81, agg6#82, agg7#83]
Arguments: 100, [ca_country#37 ASC NULLS FIRST, ca_state#38 ASC NULLS FIRST, ca_county#39 ASC NULLS FIRST, i_item_id#36 ASC NULLS FIRST], [i_item_id#36, ca_country#37, ca_state#38, ca_county#39, agg1#77, agg2#78, agg3#79, agg4#80, agg5#81, agg6#82, agg7#83]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#9 IN dynamicpruning#10
ReusedExchange (51)


(51) ReusedExchange [Reuses operator id: 37]
Output [1]: [d_date_sk#30]


