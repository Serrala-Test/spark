== Physical Plan ==
TakeOrderedAndProject (46)
+- * HashAggregate (45)
   +- Exchange (44)
      +- * HashAggregate (43)
         +- * Project (42)
            +- * Filter (41)
               +- * BroadcastHashJoin ExistenceJoin(exists#1) BuildRight (40)
                  :- * Project (34)
                  :  +- * BroadcastHashJoin Inner BuildRight (33)
                  :     :- * Project (27)
                  :     :  +- * SortMergeJoin Inner (26)
                  :     :     :- * Sort (20)
                  :     :     :  +- Exchange (19)
                  :     :     :     +- * Project (18)
                  :     :     :        +- * SortMergeJoin Inner (17)
                  :     :     :           :- * Sort (11)
                  :     :     :           :  +- Exchange (10)
                  :     :     :           :     +- * Project (9)
                  :     :     :           :        +- * BroadcastHashJoin Inner BuildRight (8)
                  :     :     :           :           :- * Filter (3)
                  :     :     :           :           :  +- * ColumnarToRow (2)
                  :     :     :           :           :     +- Scan parquet default.web_sales (1)
                  :     :     :           :           +- BroadcastExchange (7)
                  :     :     :           :              +- * Filter (6)
                  :     :     :           :                 +- * ColumnarToRow (5)
                  :     :     :           :                    +- Scan parquet default.item (4)
                  :     :     :           +- * Sort (16)
                  :     :     :              +- Exchange (15)
                  :     :     :                 +- * Filter (14)
                  :     :     :                    +- * ColumnarToRow (13)
                  :     :     :                       +- Scan parquet default.customer (12)
                  :     :     +- * Sort (25)
                  :     :        +- Exchange (24)
                  :     :           +- * Filter (23)
                  :     :              +- * ColumnarToRow (22)
                  :     :                 +- Scan parquet default.customer_address (21)
                  :     +- BroadcastExchange (32)
                  :        +- * Project (31)
                  :           +- * Filter (30)
                  :              +- * ColumnarToRow (29)
                  :                 +- Scan parquet default.date_dim (28)
                  +- BroadcastExchange (39)
                     +- * Project (38)
                        +- * Filter (37)
                           +- * ColumnarToRow (36)
                              +- Scan parquet default.item (35)


(1) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#2, ws_item_sk#3, ws_bill_customer_sk#4, ws_sales_price#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk), IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [4]: [ws_sold_date_sk#2, ws_item_sk#3, ws_bill_customer_sk#4, ws_sales_price#5]

(3) Filter [codegen id : 2]
Input [4]: [ws_sold_date_sk#2, ws_item_sk#3, ws_bill_customer_sk#4, ws_sales_price#5]
Condition : ((isnotnull(ws_bill_customer_sk#4) AND isnotnull(ws_sold_date_sk#2)) AND isnotnull(ws_item_sk#3))

(4) Scan parquet default.item
Output [2]: [i_item_sk#6, i_item_id#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [i_item_sk#6, i_item_id#7]

(6) Filter [codegen id : 1]
Input [2]: [i_item_sk#6, i_item_id#7]
Condition : isnotnull(i_item_sk#6)

(7) BroadcastExchange
Input [2]: [i_item_sk#6, i_item_id#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#8]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_item_sk#3]
Right keys [1]: [i_item_sk#6]
Join condition: None

(9) Project [codegen id : 2]
Output [4]: [ws_sold_date_sk#2, ws_bill_customer_sk#4, ws_sales_price#5, i_item_id#7]
Input [6]: [ws_sold_date_sk#2, ws_item_sk#3, ws_bill_customer_sk#4, ws_sales_price#5, i_item_sk#6, i_item_id#7]

(10) Exchange
Input [4]: [ws_sold_date_sk#2, ws_bill_customer_sk#4, ws_sales_price#5, i_item_id#7]
Arguments: hashpartitioning(ws_bill_customer_sk#4, 5), ENSURE_REQUIREMENTS, [id=#9]

(11) Sort [codegen id : 3]
Input [4]: [ws_sold_date_sk#2, ws_bill_customer_sk#4, ws_sales_price#5, i_item_id#7]
Arguments: [ws_bill_customer_sk#4 ASC NULLS FIRST], false, 0

(12) Scan parquet default.customer
Output [2]: [c_customer_sk#10, c_current_addr_sk#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(13) ColumnarToRow [codegen id : 4]
Input [2]: [c_customer_sk#10, c_current_addr_sk#11]

(14) Filter [codegen id : 4]
Input [2]: [c_customer_sk#10, c_current_addr_sk#11]
Condition : (isnotnull(c_customer_sk#10) AND isnotnull(c_current_addr_sk#11))

(15) Exchange
Input [2]: [c_customer_sk#10, c_current_addr_sk#11]
Arguments: hashpartitioning(c_customer_sk#10, 5), ENSURE_REQUIREMENTS, [id=#12]

(16) Sort [codegen id : 5]
Input [2]: [c_customer_sk#10, c_current_addr_sk#11]
Arguments: [c_customer_sk#10 ASC NULLS FIRST], false, 0

(17) SortMergeJoin [codegen id : 6]
Left keys [1]: [ws_bill_customer_sk#4]
Right keys [1]: [c_customer_sk#10]
Join condition: None

(18) Project [codegen id : 6]
Output [4]: [ws_sold_date_sk#2, ws_sales_price#5, i_item_id#7, c_current_addr_sk#11]
Input [6]: [ws_sold_date_sk#2, ws_bill_customer_sk#4, ws_sales_price#5, i_item_id#7, c_customer_sk#10, c_current_addr_sk#11]

(19) Exchange
Input [4]: [ws_sold_date_sk#2, ws_sales_price#5, i_item_id#7, c_current_addr_sk#11]
Arguments: hashpartitioning(c_current_addr_sk#11, 5), ENSURE_REQUIREMENTS, [id=#13]

(20) Sort [codegen id : 7]
Input [4]: [ws_sold_date_sk#2, ws_sales_price#5, i_item_id#7, c_current_addr_sk#11]
Arguments: [c_current_addr_sk#11 ASC NULLS FIRST], false, 0

(21) Scan parquet default.customer_address
Output [3]: [ca_address_sk#14, ca_city#15, ca_zip#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_city:string,ca_zip:string>

(22) ColumnarToRow [codegen id : 8]
Input [3]: [ca_address_sk#14, ca_city#15, ca_zip#16]

(23) Filter [codegen id : 8]
Input [3]: [ca_address_sk#14, ca_city#15, ca_zip#16]
Condition : isnotnull(ca_address_sk#14)

(24) Exchange
Input [3]: [ca_address_sk#14, ca_city#15, ca_zip#16]
Arguments: hashpartitioning(ca_address_sk#14, 5), ENSURE_REQUIREMENTS, [id=#17]

(25) Sort [codegen id : 9]
Input [3]: [ca_address_sk#14, ca_city#15, ca_zip#16]
Arguments: [ca_address_sk#14 ASC NULLS FIRST], false, 0

(26) SortMergeJoin [codegen id : 12]
Left keys [1]: [c_current_addr_sk#11]
Right keys [1]: [ca_address_sk#14]
Join condition: None

(27) Project [codegen id : 12]
Output [5]: [ws_sold_date_sk#2, ws_sales_price#5, i_item_id#7, ca_city#15, ca_zip#16]
Input [7]: [ws_sold_date_sk#2, ws_sales_price#5, i_item_id#7, c_current_addr_sk#11, ca_address_sk#14, ca_city#15, ca_zip#16]

(28) Scan parquet default.date_dim
Output [3]: [d_date_sk#18, d_year#19, d_qoy#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(29) ColumnarToRow [codegen id : 10]
Input [3]: [d_date_sk#18, d_year#19, d_qoy#20]

(30) Filter [codegen id : 10]
Input [3]: [d_date_sk#18, d_year#19, d_qoy#20]
Condition : ((((isnotnull(d_qoy#20) AND isnotnull(d_year#19)) AND (d_qoy#20 = 2)) AND (d_year#19 = 2001)) AND isnotnull(d_date_sk#18))

(31) Project [codegen id : 10]
Output [1]: [d_date_sk#18]
Input [3]: [d_date_sk#18, d_year#19, d_qoy#20]

(32) BroadcastExchange
Input [1]: [d_date_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21]

(33) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ws_sold_date_sk#2]
Right keys [1]: [d_date_sk#18]
Join condition: None

(34) Project [codegen id : 12]
Output [4]: [ws_sales_price#5, ca_city#15, ca_zip#16, i_item_id#7]
Input [6]: [ws_sold_date_sk#2, ws_sales_price#5, i_item_id#7, ca_city#15, ca_zip#16, d_date_sk#18]

(35) Scan parquet default.item
Output [2]: [i_item_sk#6, i_item_id#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [In(i_item_sk, [2,3,5,7,11,13,17,19,23,29])]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(36) ColumnarToRow [codegen id : 11]
Input [2]: [i_item_sk#6, i_item_id#7]

(37) Filter [codegen id : 11]
Input [2]: [i_item_sk#6, i_item_id#7]
Condition : i_item_sk#6 IN (2,3,5,7,11,13,17,19,23,29)

(38) Project [codegen id : 11]
Output [1]: [i_item_id#7 AS i_item_id#7#22]
Input [2]: [i_item_sk#6, i_item_id#7]

(39) BroadcastExchange
Input [1]: [i_item_id#7#22]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#23]

(40) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [i_item_id#7]
Right keys [1]: [i_item_id#7#22]
Join condition: None

(41) Filter [codegen id : 12]
Input [5]: [ws_sales_price#5, ca_city#15, ca_zip#16, i_item_id#7, exists#1]
Condition : (substr(ca_zip#16, 1, 5) IN (85669,86197,88274,83405,86475,85392,85460,80348,81792) OR exists#1)

(42) Project [codegen id : 12]
Output [3]: [ws_sales_price#5, ca_city#15, ca_zip#16]
Input [5]: [ws_sales_price#5, ca_city#15, ca_zip#16, i_item_id#7, exists#1]

(43) HashAggregate [codegen id : 12]
Input [3]: [ws_sales_price#5, ca_city#15, ca_zip#16]
Keys [2]: [ca_zip#16, ca_city#15]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#5))]
Aggregate Attributes [1]: [sum#24]
Results [3]: [ca_zip#16, ca_city#15, sum#25]

(44) Exchange
Input [3]: [ca_zip#16, ca_city#15, sum#25]
Arguments: hashpartitioning(ca_zip#16, ca_city#15, 5), ENSURE_REQUIREMENTS, [id=#26]

(45) HashAggregate [codegen id : 13]
Input [3]: [ca_zip#16, ca_city#15, sum#25]
Keys [2]: [ca_zip#16, ca_city#15]
Functions [1]: [sum(UnscaledValue(ws_sales_price#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_sales_price#5))#27]
Results [3]: [ca_zip#16, ca_city#15, MakeDecimal(sum(UnscaledValue(ws_sales_price#5))#27,17,2) AS sum(ws_sales_price)#28]

(46) TakeOrderedAndProject
Input [3]: [ca_zip#16, ca_city#15, sum(ws_sales_price)#28]
Arguments: 100, [ca_zip#16 ASC NULLS FIRST, ca_city#15 ASC NULLS FIRST], [ca_zip#16, ca_city#15, sum(ws_sales_price)#28]

