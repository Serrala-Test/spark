== Physical Plan ==
TakeOrderedAndProject (30)
+- * HashAggregate (29)
   +- Exchange (28)
      +- * HashAggregate (27)
         +- * Project (26)
            +- * Filter (25)
               +- * BroadcastHashJoin ExistenceJoin(exists#1) BuildRight (24)
                  :- * Project (18)
                  :  +- * SortMergeJoin Inner (17)
                  :     :- * Sort (14)
                  :     :  +- Exchange (13)
                  :     :     +- * Project (12)
                  :     :        +- * BroadcastHashJoin Inner BuildRight (11)
                  :     :           :- * Project (6)
                  :     :           :  +- * BroadcastHashJoin Inner BuildRight (5)
                  :     :           :     :- * Filter (3)
                  :     :           :     :  +- * ColumnarToRow (2)
                  :     :           :     :     +- Scan parquet spark_catalog.default.web_sales (1)
                  :     :           :     +- ReusedExchange (4)
                  :     :           +- BroadcastExchange (10)
                  :     :              +- * Filter (9)
                  :     :                 +- * ColumnarToRow (8)
                  :     :                    +- Scan parquet spark_catalog.default.item (7)
                  :     +- * Sort (16)
                  :        +- ReusedExchange (15)
                  +- BroadcastExchange (23)
                     +- * Project (22)
                        +- * Filter (21)
                           +- * ColumnarToRow (20)
                              +- Scan parquet spark_catalog.default.item (19)


(1) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#2, ws_bill_customer_sk#3, ws_sales_price#4, ws_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#5), dynamicpruningexpression(ws_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [4]: [ws_item_sk#2, ws_bill_customer_sk#3, ws_sales_price#4, ws_sold_date_sk#5]

(3) Filter [codegen id : 3]
Input [4]: [ws_item_sk#2, ws_bill_customer_sk#3, ws_sales_price#4, ws_sold_date_sk#5]
Condition : ((isnotnull(ws_bill_customer_sk#3) AND isnotnull(ws_item_sk#2)) AND might_contain(Subquery scalar-subquery#7, [id=#8], xxhash64(ws_bill_customer_sk#3, 42), false))

(4) ReusedExchange [Reuses operator id: 51]
Output [1]: [d_date_sk#9]

(5) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ws_sold_date_sk#5]
Right keys [1]: [d_date_sk#9]
Join type: Inner
Join condition: None

(6) Project [codegen id : 3]
Output [3]: [ws_item_sk#2, ws_bill_customer_sk#3, ws_sales_price#4]
Input [5]: [ws_item_sk#2, ws_bill_customer_sk#3, ws_sales_price#4, ws_sold_date_sk#5, d_date_sk#9]

(7) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#10, i_item_id#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(8) ColumnarToRow [codegen id : 2]
Input [2]: [i_item_sk#10, i_item_id#11]

(9) Filter [codegen id : 2]
Input [2]: [i_item_sk#10, i_item_id#11]
Condition : isnotnull(i_item_sk#10)

(10) BroadcastExchange
Input [2]: [i_item_sk#10, i_item_id#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ws_item_sk#2]
Right keys [1]: [i_item_sk#10]
Join type: Inner
Join condition: None

(12) Project [codegen id : 3]
Output [3]: [ws_bill_customer_sk#3, ws_sales_price#4, i_item_id#11]
Input [5]: [ws_item_sk#2, ws_bill_customer_sk#3, ws_sales_price#4, i_item_sk#10, i_item_id#11]

(13) Exchange
Input [3]: [ws_bill_customer_sk#3, ws_sales_price#4, i_item_id#11]
Arguments: hashpartitioning(ws_bill_customer_sk#3, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(14) Sort [codegen id : 4]
Input [3]: [ws_bill_customer_sk#3, ws_sales_price#4, i_item_id#11]
Arguments: [ws_bill_customer_sk#3 ASC NULLS FIRST], false, 0

(15) ReusedExchange [Reuses operator id: 43]
Output [3]: [c_customer_sk#12, ca_city#13, ca_zip#14]

(16) Sort [codegen id : 10]
Input [3]: [c_customer_sk#12, ca_city#13, ca_zip#14]
Arguments: [c_customer_sk#12 ASC NULLS FIRST], false, 0

(17) SortMergeJoin [codegen id : 12]
Left keys [1]: [ws_bill_customer_sk#3]
Right keys [1]: [c_customer_sk#12]
Join type: Inner
Join condition: None

(18) Project [codegen id : 12]
Output [4]: [ws_sales_price#4, ca_city#13, ca_zip#14, i_item_id#11]
Input [6]: [ws_bill_customer_sk#3, ws_sales_price#4, i_item_id#11, c_customer_sk#12, ca_city#13, ca_zip#14]

(19) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#15, i_item_id#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [In(i_item_sk, [11,13,17,19,2,23,29,3,5,7])]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(20) ColumnarToRow [codegen id : 11]
Input [2]: [i_item_sk#15, i_item_id#16]

(21) Filter [codegen id : 11]
Input [2]: [i_item_sk#15, i_item_id#16]
Condition : i_item_sk#15 IN (2,3,5,7,11,13,17,19,23,29)

(22) Project [codegen id : 11]
Output [1]: [i_item_id#16]
Input [2]: [i_item_sk#15, i_item_id#16]

(23) BroadcastExchange
Input [1]: [i_item_id#16]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=3]

(24) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [i_item_id#11]
Right keys [1]: [i_item_id#16]
Join type: ExistenceJoin(exists#1)
Join condition: None

(25) Filter [codegen id : 12]
Input [5]: [ws_sales_price#4, ca_city#13, ca_zip#14, i_item_id#11, exists#1]
Condition : (substr(ca_zip#14, 1, 5) IN (85669,86197,88274,83405,86475,85392,85460,80348,81792) OR exists#1)

(26) Project [codegen id : 12]
Output [3]: [ws_sales_price#4, ca_city#13, ca_zip#14]
Input [5]: [ws_sales_price#4, ca_city#13, ca_zip#14, i_item_id#11, exists#1]

(27) HashAggregate [codegen id : 12]
Input [3]: [ws_sales_price#4, ca_city#13, ca_zip#14]
Keys [2]: [ca_zip#14, ca_city#13]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#4))]
Aggregate Attributes [1]: [sum#17]
Results [3]: [ca_zip#14, ca_city#13, sum#18]

(28) Exchange
Input [3]: [ca_zip#14, ca_city#13, sum#18]
Arguments: hashpartitioning(ca_zip#14, ca_city#13, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(29) HashAggregate [codegen id : 13]
Input [3]: [ca_zip#14, ca_city#13, sum#18]
Keys [2]: [ca_zip#14, ca_city#13]
Functions [1]: [sum(UnscaledValue(ws_sales_price#4))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_sales_price#4))#19]
Results [3]: [ca_zip#14, ca_city#13, MakeDecimal(sum(UnscaledValue(ws_sales_price#4))#19,17,2) AS sum(ws_sales_price)#20]

(30) TakeOrderedAndProject
Input [3]: [ca_zip#14, ca_city#13, sum(ws_sales_price)#20]
Arguments: 100, [ca_zip#14 ASC NULLS FIRST, ca_city#13 ASC NULLS FIRST], [ca_zip#14, ca_city#13, sum(ws_sales_price)#20]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#7, [id=#8]
ObjectHashAggregate (46)
+- Exchange (45)
   +- ObjectHashAggregate (44)
      +- Exchange (43)
         +- * Project (42)
            +- * SortMergeJoin Inner (41)
               :- * Sort (35)
               :  +- Exchange (34)
               :     +- * Filter (33)
               :        +- * ColumnarToRow (32)
               :           +- Scan parquet spark_catalog.default.customer (31)
               +- * Sort (40)
                  +- Exchange (39)
                     +- * Filter (38)
                        +- * ColumnarToRow (37)
                           +- Scan parquet spark_catalog.default.customer_address (36)


(31) Scan parquet spark_catalog.default.customer
Output [2]: [c_customer_sk#12, c_current_addr_sk#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(32) ColumnarToRow [codegen id : 1]
Input [2]: [c_customer_sk#12, c_current_addr_sk#21]

(33) Filter [codegen id : 1]
Input [2]: [c_customer_sk#12, c_current_addr_sk#21]
Condition : (isnotnull(c_customer_sk#12) AND isnotnull(c_current_addr_sk#21))

(34) Exchange
Input [2]: [c_customer_sk#12, c_current_addr_sk#21]
Arguments: hashpartitioning(c_current_addr_sk#21, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(35) Sort [codegen id : 2]
Input [2]: [c_customer_sk#12, c_current_addr_sk#21]
Arguments: [c_current_addr_sk#21 ASC NULLS FIRST], false, 0

(36) Scan parquet spark_catalog.default.customer_address
Output [3]: [ca_address_sk#22, ca_city#13, ca_zip#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_city:string,ca_zip:string>

(37) ColumnarToRow [codegen id : 3]
Input [3]: [ca_address_sk#22, ca_city#13, ca_zip#14]

(38) Filter [codegen id : 3]
Input [3]: [ca_address_sk#22, ca_city#13, ca_zip#14]
Condition : isnotnull(ca_address_sk#22)

(39) Exchange
Input [3]: [ca_address_sk#22, ca_city#13, ca_zip#14]
Arguments: hashpartitioning(ca_address_sk#22, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(40) Sort [codegen id : 4]
Input [3]: [ca_address_sk#22, ca_city#13, ca_zip#14]
Arguments: [ca_address_sk#22 ASC NULLS FIRST], false, 0

(41) SortMergeJoin [codegen id : 5]
Left keys [1]: [c_current_addr_sk#21]
Right keys [1]: [ca_address_sk#22]
Join type: Inner
Join condition: None

(42) Project [codegen id : 5]
Output [3]: [c_customer_sk#12, ca_city#13, ca_zip#14]
Input [5]: [c_customer_sk#12, c_current_addr_sk#21, ca_address_sk#22, ca_city#13, ca_zip#14]

(43) Exchange
Input [3]: [c_customer_sk#12, ca_city#13, ca_zip#14]
Arguments: hashpartitioning(c_customer_sk#12, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(44) ObjectHashAggregate
Input [3]: [c_customer_sk#12, ca_city#13, ca_zip#14]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(c_customer_sk#12, 42), 2120804, 16966432, 0, 0)]
Aggregate Attributes [1]: [buf#23]
Results [1]: [buf#24]

(45) Exchange
Input [1]: [buf#24]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=8]

(46) ObjectHashAggregate
Input [1]: [buf#24]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(c_customer_sk#12, 42), 2120804, 16966432, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(c_customer_sk#12, 42), 2120804, 16966432, 0, 0)#25]
Results [1]: [bloom_filter_agg(xxhash64(c_customer_sk#12, 42), 2120804, 16966432, 0, 0)#25 AS bloomFilter#26]

Subquery:2 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (51)
+- * Project (50)
   +- * Filter (49)
      +- * ColumnarToRow (48)
         +- Scan parquet spark_catalog.default.date_dim (47)


(47) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#9, d_year#27, d_qoy#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(48) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#9, d_year#27, d_qoy#28]

(49) Filter [codegen id : 1]
Input [3]: [d_date_sk#9, d_year#27, d_qoy#28]
Condition : ((((isnotnull(d_qoy#28) AND isnotnull(d_year#27)) AND (d_qoy#28 = 2)) AND (d_year#27 = 2001)) AND isnotnull(d_date_sk#9))

(50) Project [codegen id : 1]
Output [1]: [d_date_sk#9]
Input [3]: [d_date_sk#9, d_year#27, d_qoy#28]

(51) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]


