== Physical Plan ==
TakeOrderedAndProject (43)
+- * HashAggregate (42)
   +- Exchange (41)
      +- * HashAggregate (40)
         +- * Project (39)
            +- * Filter (38)
               +- * BroadcastHashJoin ExistenceJoin(exists#1) BuildRight (37)
                  :- * Project (31)
                  :  +- * BroadcastHashJoin Inner BuildRight (30)
                  :     :- * Project (25)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (24)
                  :     :     :- * Project (18)
                  :     :     :  +- * SortMergeJoin Inner (17)
                  :     :     :     :- * Sort (11)
                  :     :     :     :  +- Exchange (10)
                  :     :     :     :     +- * Project (9)
                  :     :     :     :        +- * BroadcastHashJoin Inner BuildLeft (8)
                  :     :     :     :           :- BroadcastExchange (4)
                  :     :     :     :           :  +- * Filter (3)
                  :     :     :     :           :     +- * ColumnarToRow (2)
                  :     :     :     :           :        +- Scan parquet default.web_sales (1)
                  :     :     :     :           +- * Filter (7)
                  :     :     :     :              +- * ColumnarToRow (6)
                  :     :     :     :                 +- Scan parquet default.customer (5)
                  :     :     :     +- * Sort (16)
                  :     :     :        +- Exchange (15)
                  :     :     :           +- * Filter (14)
                  :     :     :              +- * ColumnarToRow (13)
                  :     :     :                 +- Scan parquet default.customer_address (12)
                  :     :     +- BroadcastExchange (23)
                  :     :        +- * Project (22)
                  :     :           +- * Filter (21)
                  :     :              +- * ColumnarToRow (20)
                  :     :                 +- Scan parquet default.date_dim (19)
                  :     +- BroadcastExchange (29)
                  :        +- * Filter (28)
                  :           +- * ColumnarToRow (27)
                  :              +- Scan parquet default.item (26)
                  +- BroadcastExchange (36)
                     +- * Project (35)
                        +- * Filter (34)
                           +- * ColumnarToRow (33)
                              +- Scan parquet default.item (32)


(1) Scan parquet default.web_sales
Output [4]: [ws_item_sk#2, ws_bill_customer_sk#3, ws_sales_price#4, ws_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#5), dynamicpruningexpression(ws_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ws_item_sk#2, ws_bill_customer_sk#3, ws_sales_price#4, ws_sold_date_sk#5]

(3) Filter [codegen id : 1]
Input [4]: [ws_item_sk#2, ws_bill_customer_sk#3, ws_sales_price#4, ws_sold_date_sk#5]
Condition : (isnotnull(ws_bill_customer_sk#3) AND isnotnull(ws_item_sk#2))

(4) BroadcastExchange
Input [4]: [ws_item_sk#2, ws_bill_customer_sk#3, ws_sales_price#4, ws_sold_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#7]

(5) Scan parquet default.customer
Output [2]: [c_customer_sk#8, c_current_addr_sk#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(6) ColumnarToRow
Input [2]: [c_customer_sk#8, c_current_addr_sk#9]

(7) Filter
Input [2]: [c_customer_sk#8, c_current_addr_sk#9]
Condition : (isnotnull(c_customer_sk#8) AND isnotnull(c_current_addr_sk#9))

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_bill_customer_sk#3]
Right keys [1]: [c_customer_sk#8]
Join condition: None

(9) Project [codegen id : 2]
Output [4]: [ws_item_sk#2, ws_sales_price#4, ws_sold_date_sk#5, c_current_addr_sk#9]
Input [6]: [ws_item_sk#2, ws_bill_customer_sk#3, ws_sales_price#4, ws_sold_date_sk#5, c_customer_sk#8, c_current_addr_sk#9]

(10) Exchange
Input [4]: [ws_item_sk#2, ws_sales_price#4, ws_sold_date_sk#5, c_current_addr_sk#9]
Arguments: hashpartitioning(c_current_addr_sk#9, 5), ENSURE_REQUIREMENTS, [id=#10]

(11) Sort [codegen id : 3]
Input [4]: [ws_item_sk#2, ws_sales_price#4, ws_sold_date_sk#5, c_current_addr_sk#9]
Arguments: [c_current_addr_sk#9 ASC NULLS FIRST], false, 0

(12) Scan parquet default.customer_address
Output [3]: [ca_address_sk#11, ca_city#12, ca_zip#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_city:string,ca_zip:string>

(13) ColumnarToRow [codegen id : 4]
Input [3]: [ca_address_sk#11, ca_city#12, ca_zip#13]

(14) Filter [codegen id : 4]
Input [3]: [ca_address_sk#11, ca_city#12, ca_zip#13]
Condition : isnotnull(ca_address_sk#11)

(15) Exchange
Input [3]: [ca_address_sk#11, ca_city#12, ca_zip#13]
Arguments: hashpartitioning(ca_address_sk#11, 5), ENSURE_REQUIREMENTS, [id=#14]

(16) Sort [codegen id : 5]
Input [3]: [ca_address_sk#11, ca_city#12, ca_zip#13]
Arguments: [ca_address_sk#11 ASC NULLS FIRST], false, 0

(17) SortMergeJoin [codegen id : 9]
Left keys [1]: [c_current_addr_sk#9]
Right keys [1]: [ca_address_sk#11]
Join condition: None

(18) Project [codegen id : 9]
Output [5]: [ws_item_sk#2, ws_sales_price#4, ws_sold_date_sk#5, ca_city#12, ca_zip#13]
Input [7]: [ws_item_sk#2, ws_sales_price#4, ws_sold_date_sk#5, c_current_addr_sk#9, ca_address_sk#11, ca_city#12, ca_zip#13]

(19) Scan parquet default.date_dim
Output [3]: [d_date_sk#15, d_year#16, d_qoy#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(20) ColumnarToRow [codegen id : 6]
Input [3]: [d_date_sk#15, d_year#16, d_qoy#17]

(21) Filter [codegen id : 6]
Input [3]: [d_date_sk#15, d_year#16, d_qoy#17]
Condition : ((((isnotnull(d_qoy#17) AND isnotnull(d_year#16)) AND (d_qoy#17 = 2)) AND (d_year#16 = 2001)) AND isnotnull(d_date_sk#15))

(22) Project [codegen id : 6]
Output [1]: [d_date_sk#15]
Input [3]: [d_date_sk#15, d_year#16, d_qoy#17]

(23) BroadcastExchange
Input [1]: [d_date_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#18]

(24) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_sold_date_sk#5]
Right keys [1]: [d_date_sk#15]
Join condition: None

(25) Project [codegen id : 9]
Output [4]: [ws_item_sk#2, ws_sales_price#4, ca_city#12, ca_zip#13]
Input [6]: [ws_item_sk#2, ws_sales_price#4, ws_sold_date_sk#5, ca_city#12, ca_zip#13, d_date_sk#15]

(26) Scan parquet default.item
Output [2]: [i_item_sk#19, i_item_id#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(27) ColumnarToRow [codegen id : 7]
Input [2]: [i_item_sk#19, i_item_id#20]

(28) Filter [codegen id : 7]
Input [2]: [i_item_sk#19, i_item_id#20]
Condition : isnotnull(i_item_sk#19)

(29) BroadcastExchange
Input [2]: [i_item_sk#19, i_item_id#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#21]

(30) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_item_sk#2]
Right keys [1]: [i_item_sk#19]
Join condition: None

(31) Project [codegen id : 9]
Output [4]: [ws_sales_price#4, ca_city#12, ca_zip#13, i_item_id#20]
Input [6]: [ws_item_sk#2, ws_sales_price#4, ca_city#12, ca_zip#13, i_item_sk#19, i_item_id#20]

(32) Scan parquet default.item
Output [2]: [i_item_sk#19, i_item_id#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [In(i_item_sk, [2,3,5,7,11,13,17,19,23,29])]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(33) ColumnarToRow [codegen id : 8]
Input [2]: [i_item_sk#19, i_item_id#20]

(34) Filter [codegen id : 8]
Input [2]: [i_item_sk#19, i_item_id#20]
Condition : i_item_sk#19 IN (2,3,5,7,11,13,17,19,23,29)

(35) Project [codegen id : 8]
Output [1]: [i_item_id#20 AS i_item_id#20#22]
Input [2]: [i_item_sk#19, i_item_id#20]

(36) BroadcastExchange
Input [1]: [i_item_id#20#22]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#23]

(37) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [i_item_id#20]
Right keys [1]: [i_item_id#20#22]
Join condition: None

(38) Filter [codegen id : 9]
Input [5]: [ws_sales_price#4, ca_city#12, ca_zip#13, i_item_id#20, exists#1]
Condition : (substr(ca_zip#13, 1, 5) IN (85669,86197,88274,83405,86475,85392,85460,80348,81792) OR exists#1)

(39) Project [codegen id : 9]
Output [3]: [ws_sales_price#4, ca_city#12, ca_zip#13]
Input [5]: [ws_sales_price#4, ca_city#12, ca_zip#13, i_item_id#20, exists#1]

(40) HashAggregate [codegen id : 9]
Input [3]: [ws_sales_price#4, ca_city#12, ca_zip#13]
Keys [2]: [ca_zip#13, ca_city#12]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#4))]
Aggregate Attributes [1]: [sum#24]
Results [3]: [ca_zip#13, ca_city#12, sum#25]

(41) Exchange
Input [3]: [ca_zip#13, ca_city#12, sum#25]
Arguments: hashpartitioning(ca_zip#13, ca_city#12, 5), ENSURE_REQUIREMENTS, [id=#26]

(42) HashAggregate [codegen id : 10]
Input [3]: [ca_zip#13, ca_city#12, sum#25]
Keys [2]: [ca_zip#13, ca_city#12]
Functions [1]: [sum(UnscaledValue(ws_sales_price#4))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_sales_price#4))#27]
Results [3]: [ca_zip#13, ca_city#12, MakeDecimal(sum(UnscaledValue(ws_sales_price#4))#27,17,2) AS sum(ws_sales_price)#28]

(43) TakeOrderedAndProject
Input [3]: [ca_zip#13, ca_city#12, sum(ws_sales_price)#28]
Arguments: 100, [ca_zip#13 ASC NULLS FIRST, ca_city#12 ASC NULLS FIRST], [ca_zip#13, ca_city#12, sum(ws_sales_price)#28]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#5 IN dynamicpruning#6
ReusedExchange (44)


(44) ReusedExchange [Reuses operator id: 23]
Output [1]: [d_date_sk#15]


