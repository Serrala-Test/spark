== Physical Plan ==
TakeOrderedAndProject (55)
+- * HashAggregate (54)
   +- Exchange (53)
      +- * HashAggregate (52)
         +- * Project (51)
            +- * BroadcastHashJoin Inner BuildRight (50)
               :- * Project (45)
               :  +- * BroadcastHashJoin Inner BuildRight (44)
               :     :- * Project (39)
               :     :  +- * BroadcastHashJoin Inner BuildRight (38)
               :     :     :- * Project (33)
               :     :     :  +- * BroadcastHashJoin Inner BuildRight (32)
               :     :     :     :- * Project (27)
               :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (26)
               :     :     :     :     :- * Project (21)
               :     :     :     :     :  +- * SortMergeJoin Inner (20)
               :     :     :     :     :     :- * Sort (14)
               :     :     :     :     :     :  +- Exchange (13)
               :     :     :     :     :     :     +- * Project (12)
               :     :     :     :     :     :        +- * SortMergeJoin Inner (11)
               :     :     :     :     :     :           :- * Sort (5)
               :     :     :     :     :     :           :  +- Exchange (4)
               :     :     :     :     :     :           :     +- * Project (3)
               :     :     :     :     :     :           :        +- * Filter (2)
               :     :     :     :     :     :           :           +- BatchScan default.store_sales (1)
               :     :     :     :     :     :           +- * Sort (10)
               :     :     :     :     :     :              +- Exchange (9)
               :     :     :     :     :     :                 +- * Project (8)
               :     :     :     :     :     :                    +- * Filter (7)
               :     :     :     :     :     :                       +- BatchScan default.store_returns (6)
               :     :     :     :     :     +- * Sort (19)
               :     :     :     :     :        +- Exchange (18)
               :     :     :     :     :           +- * Project (17)
               :     :     :     :     :              +- * Filter (16)
               :     :     :     :     :                 +- BatchScan default.catalog_sales (15)
               :     :     :     :     +- BroadcastExchange (25)
               :     :     :     :        +- * Project (24)
               :     :     :     :           +- * Filter (23)
               :     :     :     :              +- BatchScan default.date_dim (22)
               :     :     :     +- BroadcastExchange (31)
               :     :     :        +- * Project (30)
               :     :     :           +- * Filter (29)
               :     :     :              +- BatchScan default.date_dim (28)
               :     :     +- BroadcastExchange (37)
               :     :        +- * Project (36)
               :     :           +- * Filter (35)
               :     :              +- BatchScan default.date_dim (34)
               :     +- BroadcastExchange (43)
               :        +- * Project (42)
               :           +- * Filter (41)
               :              +- BatchScan default.store (40)
               +- BroadcastExchange (49)
                  +- * Project (48)
                     +- * Filter (47)
                        +- BatchScan default.item (46)


(1) BatchScan default.store_sales
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6]
DataFilters: [isnotnull(ss_customer_sk#2), isnotnull(ss_item_sk#1), isnotnull(ss_ticket_number#4), isnotnull(ss_store_sk#3)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_sales]
PartitionFilters: [isnotnull(ss_sold_date_sk#6)]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_quantity:int>

(2) Filter [codegen id : 1]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6]
Condition : ((((isnotnull(ss_customer_sk#2) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_ticket_number#4)) AND isnotnull(ss_store_sk#3)) AND might_contain(Subquery scalar-subquery#7, [id=#8], xxhash64(ss_sold_date_sk#6, 42)))

(3) Project [codegen id : 1]
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6]

(4) Exchange
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6]
Arguments: hashpartitioning(ss_customer_sk#2, ss_item_sk#1, ss_ticket_number#4, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST, ss_ticket_number#4 ASC NULLS FIRST], false, 0

(6) BatchScan default.store_returns
Output [5]: [sr_item_sk#9, sr_customer_sk#10, sr_ticket_number#11, sr_return_quantity#12, sr_returned_date_sk#13]
DataFilters: [isnotnull(sr_customer_sk#10), isnotnull(sr_item_sk#9), isnotnull(sr_ticket_number#11)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_returns]
PartitionFilters: [isnotnull(sr_returned_date_sk#13)]
PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:int,sr_customer_sk:int,sr_ticket_number:int,sr_return_quantity:int>

(7) Filter [codegen id : 3]
Input [5]: [sr_item_sk#9, sr_customer_sk#10, sr_ticket_number#11, sr_return_quantity#12, sr_returned_date_sk#13]
Condition : (((isnotnull(sr_customer_sk#10) AND isnotnull(sr_item_sk#9)) AND isnotnull(sr_ticket_number#11)) AND might_contain(Subquery scalar-subquery#14, [id=#15], xxhash64(sr_returned_date_sk#13, 42)))

(8) Project [codegen id : 3]
Output [5]: [sr_item_sk#9, sr_customer_sk#10, sr_ticket_number#11, sr_return_quantity#12, sr_returned_date_sk#13]
Input [5]: [sr_item_sk#9, sr_customer_sk#10, sr_ticket_number#11, sr_return_quantity#12, sr_returned_date_sk#13]

(9) Exchange
Input [5]: [sr_item_sk#9, sr_customer_sk#10, sr_ticket_number#11, sr_return_quantity#12, sr_returned_date_sk#13]
Arguments: hashpartitioning(sr_customer_sk#10, sr_item_sk#9, sr_ticket_number#11, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(10) Sort [codegen id : 4]
Input [5]: [sr_item_sk#9, sr_customer_sk#10, sr_ticket_number#11, sr_return_quantity#12, sr_returned_date_sk#13]
Arguments: [sr_customer_sk#10 ASC NULLS FIRST, sr_item_sk#9 ASC NULLS FIRST, sr_ticket_number#11 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 5]
Left keys [3]: [ss_customer_sk#2, ss_item_sk#1, ss_ticket_number#4]
Right keys [3]: [sr_customer_sk#10, sr_item_sk#9, sr_ticket_number#11]
Join type: Inner
Join condition: None

(12) Project [codegen id : 5]
Output [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, ss_sold_date_sk#6, sr_item_sk#9, sr_customer_sk#10, sr_return_quantity#12, sr_returned_date_sk#13]
Input [11]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6, sr_item_sk#9, sr_customer_sk#10, sr_ticket_number#11, sr_return_quantity#12, sr_returned_date_sk#13]

(13) Exchange
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, ss_sold_date_sk#6, sr_item_sk#9, sr_customer_sk#10, sr_return_quantity#12, sr_returned_date_sk#13]
Arguments: hashpartitioning(sr_customer_sk#10, sr_item_sk#9, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(14) Sort [codegen id : 6]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, ss_sold_date_sk#6, sr_item_sk#9, sr_customer_sk#10, sr_return_quantity#12, sr_returned_date_sk#13]
Arguments: [sr_customer_sk#10 ASC NULLS FIRST, sr_item_sk#9 ASC NULLS FIRST], false, 0

(15) BatchScan default.catalog_sales
Output [4]: [cs_bill_customer_sk#16, cs_item_sk#17, cs_quantity#18, cs_sold_date_sk#19]
DataFilters: [isnotnull(cs_bill_customer_sk#16), isnotnull(cs_item_sk#17)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PartitionFilters: [isnotnull(cs_sold_date_sk#19)]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int>

(16) Filter [codegen id : 7]
Input [4]: [cs_bill_customer_sk#16, cs_item_sk#17, cs_quantity#18, cs_sold_date_sk#19]
Condition : ((isnotnull(cs_bill_customer_sk#16) AND isnotnull(cs_item_sk#17)) AND might_contain(Subquery scalar-subquery#20, [id=#21], xxhash64(cs_sold_date_sk#19, 42)))

(17) Project [codegen id : 7]
Output [4]: [cs_bill_customer_sk#16, cs_item_sk#17, cs_quantity#18, cs_sold_date_sk#19]
Input [4]: [cs_bill_customer_sk#16, cs_item_sk#17, cs_quantity#18, cs_sold_date_sk#19]

(18) Exchange
Input [4]: [cs_bill_customer_sk#16, cs_item_sk#17, cs_quantity#18, cs_sold_date_sk#19]
Arguments: hashpartitioning(cs_bill_customer_sk#16, cs_item_sk#17, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(19) Sort [codegen id : 8]
Input [4]: [cs_bill_customer_sk#16, cs_item_sk#17, cs_quantity#18, cs_sold_date_sk#19]
Arguments: [cs_bill_customer_sk#16 ASC NULLS FIRST, cs_item_sk#17 ASC NULLS FIRST], false, 0

(20) SortMergeJoin [codegen id : 14]
Left keys [2]: [sr_customer_sk#10, sr_item_sk#9]
Right keys [2]: [cs_bill_customer_sk#16, cs_item_sk#17]
Join type: Inner
Join condition: None

(21) Project [codegen id : 14]
Output [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, ss_sold_date_sk#6, sr_return_quantity#12, sr_returned_date_sk#13, cs_quantity#18, cs_sold_date_sk#19]
Input [12]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, ss_sold_date_sk#6, sr_item_sk#9, sr_customer_sk#10, sr_return_quantity#12, sr_returned_date_sk#13, cs_bill_customer_sk#16, cs_item_sk#17, cs_quantity#18, cs_sold_date_sk#19]

(22) BatchScan default.date_dim
Output [3]: [d_date_sk#22, d_year#23, d_moy#24]
DataFilters: [isnotnull(d_moy#24), isnotnull(d_year#23), (d_moy#24 = 9), (d_year#23 = 1999), isnotnull(d_date_sk#22)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,9), EqualTo(d_year,1999), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(23) Filter [codegen id : 9]
Input [3]: [d_date_sk#22, d_year#23, d_moy#24]
Condition : ((((isnotnull(d_moy#24) AND isnotnull(d_year#23)) AND (d_moy#24 = 9)) AND (d_year#23 = 1999)) AND isnotnull(d_date_sk#22))

(24) Project [codegen id : 9]
Output [1]: [d_date_sk#22]
Input [3]: [d_date_sk#22, d_year#23, d_moy#24]

(25) BroadcastExchange
Input [1]: [d_date_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(26) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#22]
Join type: Inner
Join condition: None

(27) Project [codegen id : 14]
Output [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#12, sr_returned_date_sk#13, cs_quantity#18, cs_sold_date_sk#19]
Input [9]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, ss_sold_date_sk#6, sr_return_quantity#12, sr_returned_date_sk#13, cs_quantity#18, cs_sold_date_sk#19, d_date_sk#22]

(28) BatchScan default.date_dim
Output [3]: [d_date_sk#25, d_year#26, d_moy#27]
DataFilters: [isnotnull(d_moy#27), isnotnull(d_year#26), (d_moy#27 >= 9), (d_moy#27 <= 12), (d_year#26 = 1999), isnotnull(d_date_sk#25)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,9), LessThanOrEqual(d_moy,12), EqualTo(d_year,1999), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(29) Filter [codegen id : 10]
Input [3]: [d_date_sk#25, d_year#26, d_moy#27]
Condition : (((((isnotnull(d_moy#27) AND isnotnull(d_year#26)) AND (d_moy#27 >= 9)) AND (d_moy#27 <= 12)) AND (d_year#26 = 1999)) AND isnotnull(d_date_sk#25))

(30) Project [codegen id : 10]
Output [1]: [d_date_sk#25]
Input [3]: [d_date_sk#25, d_year#26, d_moy#27]

(31) BroadcastExchange
Input [1]: [d_date_sk#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

(32) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [sr_returned_date_sk#13]
Right keys [1]: [d_date_sk#25]
Join type: Inner
Join condition: None

(33) Project [codegen id : 14]
Output [6]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#12, cs_quantity#18, cs_sold_date_sk#19]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#12, sr_returned_date_sk#13, cs_quantity#18, cs_sold_date_sk#19, d_date_sk#25]

(34) BatchScan default.date_dim
Output [2]: [d_date_sk#28, d_year#29]
DataFilters: [d_year#29 IN (1999,2000,2001), isnotnull(d_date_sk#28)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(35) Filter [codegen id : 11]
Input [2]: [d_date_sk#28, d_year#29]
Condition : (d_year#29 IN (1999,2000,2001) AND isnotnull(d_date_sk#28))

(36) Project [codegen id : 11]
Output [1]: [d_date_sk#28]
Input [2]: [d_date_sk#28, d_year#29]

(37) BroadcastExchange
Input [1]: [d_date_sk#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

(38) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [cs_sold_date_sk#19]
Right keys [1]: [d_date_sk#28]
Join type: Inner
Join condition: None

(39) Project [codegen id : 14]
Output [5]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#12, cs_quantity#18]
Input [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#12, cs_quantity#18, cs_sold_date_sk#19, d_date_sk#28]

(40) BatchScan default.store
Output [3]: [s_store_sk#30, s_store_id#31, s_store_name#32]
DataFilters: [isnotnull(s_store_sk#30)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>

(41) Filter [codegen id : 12]
Input [3]: [s_store_sk#30, s_store_id#31, s_store_name#32]
Condition : isnotnull(s_store_sk#30)

(42) Project [codegen id : 12]
Output [3]: [s_store_sk#30, s_store_id#31, s_store_name#32]
Input [3]: [s_store_sk#30, s_store_id#31, s_store_name#32]

(43) BroadcastExchange
Input [3]: [s_store_sk#30, s_store_id#31, s_store_name#32]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

(44) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#30]
Join type: Inner
Join condition: None

(45) Project [codegen id : 14]
Output [6]: [ss_item_sk#1, ss_quantity#5, sr_return_quantity#12, cs_quantity#18, s_store_id#31, s_store_name#32]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#12, cs_quantity#18, s_store_sk#30, s_store_id#31, s_store_name#32]

(46) BatchScan default.item
Output [3]: [i_item_sk#33, i_item_id#34, i_item_desc#35]
DataFilters: [isnotnull(i_item_sk#33)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>

(47) Filter [codegen id : 13]
Input [3]: [i_item_sk#33, i_item_id#34, i_item_desc#35]
Condition : isnotnull(i_item_sk#33)

(48) Project [codegen id : 13]
Output [3]: [i_item_sk#33, i_item_id#34, i_item_desc#35]
Input [3]: [i_item_sk#33, i_item_id#34, i_item_desc#35]

(49) BroadcastExchange
Input [3]: [i_item_sk#33, i_item_id#34, i_item_desc#35]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

(50) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#33]
Join type: Inner
Join condition: None

(51) Project [codegen id : 14]
Output [7]: [ss_quantity#5, sr_return_quantity#12, cs_quantity#18, s_store_id#31, s_store_name#32, i_item_id#34, i_item_desc#35]
Input [9]: [ss_item_sk#1, ss_quantity#5, sr_return_quantity#12, cs_quantity#18, s_store_id#31, s_store_name#32, i_item_sk#33, i_item_id#34, i_item_desc#35]

(52) HashAggregate [codegen id : 14]
Input [7]: [ss_quantity#5, sr_return_quantity#12, cs_quantity#18, s_store_id#31, s_store_name#32, i_item_id#34, i_item_desc#35]
Keys [4]: [i_item_id#34, i_item_desc#35, s_store_id#31, s_store_name#32]
Functions [3]: [partial_sum(ss_quantity#5), partial_sum(sr_return_quantity#12), partial_sum(cs_quantity#18)]
Aggregate Attributes [3]: [sum#36, sum#37, sum#38]
Results [7]: [i_item_id#34, i_item_desc#35, s_store_id#31, s_store_name#32, sum#39, sum#40, sum#41]

(53) Exchange
Input [7]: [i_item_id#34, i_item_desc#35, s_store_id#31, s_store_name#32, sum#39, sum#40, sum#41]
Arguments: hashpartitioning(i_item_id#34, i_item_desc#35, s_store_id#31, s_store_name#32, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(54) HashAggregate [codegen id : 15]
Input [7]: [i_item_id#34, i_item_desc#35, s_store_id#31, s_store_name#32, sum#39, sum#40, sum#41]
Keys [4]: [i_item_id#34, i_item_desc#35, s_store_id#31, s_store_name#32]
Functions [3]: [sum(ss_quantity#5), sum(sr_return_quantity#12), sum(cs_quantity#18)]
Aggregate Attributes [3]: [sum(ss_quantity#5)#42, sum(sr_return_quantity#12)#43, sum(cs_quantity#18)#44]
Results [7]: [i_item_id#34, i_item_desc#35, s_store_id#31, s_store_name#32, sum(ss_quantity#5)#42 AS store_sales_quantity#45, sum(sr_return_quantity#12)#43 AS store_returns_quantity#46, sum(cs_quantity#18)#44 AS catalog_sales_quantity#47]

(55) TakeOrderedAndProject
Input [7]: [i_item_id#34, i_item_desc#35, s_store_id#31, s_store_name#32, store_sales_quantity#45, store_returns_quantity#46, catalog_sales_quantity#47]
Arguments: 100, [i_item_id#34 ASC NULLS FIRST, i_item_desc#35 ASC NULLS FIRST, s_store_id#31 ASC NULLS FIRST, s_store_name#32 ASC NULLS FIRST], [i_item_id#34, i_item_desc#35, s_store_id#31, s_store_name#32, store_sales_quantity#45, store_returns_quantity#46, catalog_sales_quantity#47]

===== Subqueries =====

Subquery:1 Hosting operator id = 2 Hosting Expression = Subquery scalar-subquery#7, [id=#8]
ObjectHashAggregate (61)
+- Exchange (60)
   +- ObjectHashAggregate (59)
      +- * Project (58)
         +- * Filter (57)
            +- BatchScan default.date_dim (56)


(56) BatchScan default.date_dim
Output [3]: [d_date_sk#22, d_year#23, d_moy#24]
DataFilters: [isnotnull(d_moy#24), isnotnull(d_year#23), (d_moy#24 = 9), (d_year#23 = 1999), isnotnull(d_date_sk#22)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,9), EqualTo(d_year,1999), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(57) Filter [codegen id : 1]
Input [3]: [d_date_sk#22, d_year#23, d_moy#24]
Condition : ((((isnotnull(d_moy#24) AND isnotnull(d_year#23)) AND (d_moy#24 = 9)) AND (d_year#23 = 1999)) AND isnotnull(d_date_sk#22))

(58) Project [codegen id : 1]
Output [1]: [d_date_sk#22]
Input [3]: [d_date_sk#22, d_year#23, d_moy#24]

(59) ObjectHashAggregate
Input [1]: [d_date_sk#22]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(d_date_sk#22, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#48]
Results [1]: [buf#49]

(60) Exchange
Input [1]: [buf#49]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=11]

(61) ObjectHashAggregate
Input [1]: [buf#49]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(d_date_sk#22, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(d_date_sk#22, 42), 1000000, 8388608, 0, 0)#50]
Results [1]: [bloom_filter_agg(xxhash64(d_date_sk#22, 42), 1000000, 8388608, 0, 0)#50 AS bloomFilter#51]

Subquery:2 Hosting operator id = 7 Hosting Expression = Subquery scalar-subquery#14, [id=#15]
ObjectHashAggregate (67)
+- Exchange (66)
   +- ObjectHashAggregate (65)
      +- * Project (64)
         +- * Filter (63)
            +- BatchScan default.date_dim (62)


(62) BatchScan default.date_dim
Output [3]: [d_date_sk#25, d_year#26, d_moy#27]
DataFilters: [isnotnull(d_moy#27), isnotnull(d_year#26), (d_moy#27 >= 9), (d_moy#27 <= 12), (d_year#26 = 1999), isnotnull(d_date_sk#25)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,9), LessThanOrEqual(d_moy,12), EqualTo(d_year,1999), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(63) Filter [codegen id : 1]
Input [3]: [d_date_sk#25, d_year#26, d_moy#27]
Condition : (((((isnotnull(d_moy#27) AND isnotnull(d_year#26)) AND (d_moy#27 >= 9)) AND (d_moy#27 <= 12)) AND (d_year#26 = 1999)) AND isnotnull(d_date_sk#25))

(64) Project [codegen id : 1]
Output [1]: [d_date_sk#25]
Input [3]: [d_date_sk#25, d_year#26, d_moy#27]

(65) ObjectHashAggregate
Input [1]: [d_date_sk#25]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(d_date_sk#25, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#52]
Results [1]: [buf#53]

(66) Exchange
Input [1]: [buf#53]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=12]

(67) ObjectHashAggregate
Input [1]: [buf#53]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(d_date_sk#25, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(d_date_sk#25, 42), 1000000, 8388608, 0, 0)#54]
Results [1]: [bloom_filter_agg(xxhash64(d_date_sk#25, 42), 1000000, 8388608, 0, 0)#54 AS bloomFilter#55]

Subquery:3 Hosting operator id = 16 Hosting Expression = Subquery scalar-subquery#20, [id=#21]
ObjectHashAggregate (73)
+- Exchange (72)
   +- ObjectHashAggregate (71)
      +- * Project (70)
         +- * Filter (69)
            +- BatchScan default.date_dim (68)


(68) BatchScan default.date_dim
Output [2]: [d_date_sk#28, d_year#29]
DataFilters: [d_year#29 IN (1999,2000,2001), isnotnull(d_date_sk#28)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(69) Filter [codegen id : 1]
Input [2]: [d_date_sk#28, d_year#29]
Condition : (d_year#29 IN (1999,2000,2001) AND isnotnull(d_date_sk#28))

(70) Project [codegen id : 1]
Output [1]: [d_date_sk#28]
Input [2]: [d_date_sk#28, d_year#29]

(71) ObjectHashAggregate
Input [1]: [d_date_sk#28]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(d_date_sk#28, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#56]
Results [1]: [buf#57]

(72) Exchange
Input [1]: [buf#57]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=13]

(73) ObjectHashAggregate
Input [1]: [buf#57]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(d_date_sk#28, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(d_date_sk#28, 42), 1000000, 8388608, 0, 0)#58]
Results [1]: [bloom_filter_agg(xxhash64(d_date_sk#28, 42), 1000000, 8388608, 0, 0)#58 AS bloomFilter#59]


