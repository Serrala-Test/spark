== Physical Plan ==
TakeOrderedAndProject (41)
+- * HashAggregate (40)
   +- Exchange (39)
      +- * HashAggregate (38)
         +- * Project (37)
            +- * BroadcastHashJoin Inner BuildRight (36)
               :- * Project (30)
               :  +- * BroadcastHashJoin Inner BuildRight (29)
               :     :- * Project (23)
               :     :  +- * SortMergeJoin Inner (22)
               :     :     :- * Sort (16)
               :     :     :  +- Exchange (15)
               :     :     :     +- * Project (14)
               :     :     :        +- CartesianProduct Inner (13)
               :     :     :           :- * Project (9)
               :     :     :           :  +- * BroadcastHashJoin Inner BuildRight (8)
               :     :     :           :     :- * Filter (3)
               :     :     :           :     :  +- * ColumnarToRow (2)
               :     :     :           :     :     +- Scan parquet default.store_sales (1)
               :     :     :           :     +- BroadcastExchange (7)
               :     :     :           :        +- * Filter (6)
               :     :     :           :           +- * ColumnarToRow (5)
               :     :     :           :              +- Scan parquet default.store (4)
               :     :     :           +- * Filter (12)
               :     :     :              +- * ColumnarToRow (11)
               :     :     :                 +- Scan parquet default.customer_address (10)
               :     :     +- * Sort (21)
               :     :        +- Exchange (20)
               :     :           +- * Filter (19)
               :     :              +- * ColumnarToRow (18)
               :     :                 +- Scan parquet default.customer (17)
               :     +- BroadcastExchange (28)
               :        +- * Project (27)
               :           +- * Filter (26)
               :              +- * ColumnarToRow (25)
               :                 +- Scan parquet default.item (24)
               +- BroadcastExchange (35)
                  +- * Project (34)
                     +- * Filter (33)
                        +- * ColumnarToRow (32)
                           +- Scan parquet default.date_dim (31)


(1) Scan parquet default.store_sales
Output [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ext_sales_price#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ext_sales_price#5]

(3) Filter [codegen id : 2]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ext_sales_price#5]
Condition : (((isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_item_sk#2)) AND isnotnull(ss_customer_sk#3)) AND isnotnull(ss_store_sk#4))

(4) Scan parquet default.store
Output [2]: [s_store_sk#6, s_zip#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_zip), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_zip:string>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [s_store_sk#6, s_zip#7]

(6) Filter [codegen id : 1]
Input [2]: [s_store_sk#6, s_zip#7]
Condition : (isnotnull(s_zip#7) AND isnotnull(s_store_sk#6))

(7) BroadcastExchange
Input [2]: [s_store_sk#6, s_zip#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#8]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [s_store_sk#6]
Join condition: None

(9) Project [codegen id : 2]
Output [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_ext_sales_price#5, s_zip#7]
Input [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ext_sales_price#5, s_store_sk#6, s_zip#7]

(10) Scan parquet default.customer_address
Output [2]: [ca_address_sk#9, ca_zip#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_zip)]
ReadSchema: struct<ca_address_sk:int,ca_zip:string>

(11) ColumnarToRow [codegen id : 3]
Input [2]: [ca_address_sk#9, ca_zip#10]

(12) Filter [codegen id : 3]
Input [2]: [ca_address_sk#9, ca_zip#10]
Condition : (isnotnull(ca_address_sk#9) AND isnotnull(ca_zip#10))

(13) CartesianProduct
Join condition: NOT (substr(ca_zip#10, 1, 5) = substr(s_zip#7, 1, 5))

(14) Project [codegen id : 4]
Output [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_ext_sales_price#5, ca_address_sk#9]
Input [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_ext_sales_price#5, s_zip#7, ca_address_sk#9, ca_zip#10]

(15) Exchange
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_ext_sales_price#5, ca_address_sk#9]
Arguments: hashpartitioning(ss_customer_sk#3, ca_address_sk#9, 5), ENSURE_REQUIREMENTS, [id=#11]

(16) Sort [codegen id : 5]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_ext_sales_price#5, ca_address_sk#9]
Arguments: [ss_customer_sk#3 ASC NULLS FIRST, ca_address_sk#9 ASC NULLS FIRST], false, 0

(17) Scan parquet default.customer
Output [2]: [c_customer_sk#12, c_current_addr_sk#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(18) ColumnarToRow [codegen id : 6]
Input [2]: [c_customer_sk#12, c_current_addr_sk#13]

(19) Filter [codegen id : 6]
Input [2]: [c_customer_sk#12, c_current_addr_sk#13]
Condition : (isnotnull(c_customer_sk#12) AND isnotnull(c_current_addr_sk#13))

(20) Exchange
Input [2]: [c_customer_sk#12, c_current_addr_sk#13]
Arguments: hashpartitioning(c_customer_sk#12, c_current_addr_sk#13, 5), ENSURE_REQUIREMENTS, [id=#14]

(21) Sort [codegen id : 7]
Input [2]: [c_customer_sk#12, c_current_addr_sk#13]
Arguments: [c_customer_sk#12 ASC NULLS FIRST, c_current_addr_sk#13 ASC NULLS FIRST], false, 0

(22) SortMergeJoin [codegen id : 10]
Left keys [2]: [ss_customer_sk#3, ca_address_sk#9]
Right keys [2]: [c_customer_sk#12, c_current_addr_sk#13]
Join condition: None

(23) Project [codegen id : 10]
Output [3]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#5]
Input [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_ext_sales_price#5, ca_address_sk#9, c_customer_sk#12, c_current_addr_sk#13]

(24) Scan parquet default.item
Output [6]: [i_item_sk#15, i_brand_id#16, i_brand#17, i_manufact_id#18, i_manufact#19, i_manager_id#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,8), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manufact_id:int,i_manufact:string,i_manager_id:int>

(25) ColumnarToRow [codegen id : 8]
Input [6]: [i_item_sk#15, i_brand_id#16, i_brand#17, i_manufact_id#18, i_manufact#19, i_manager_id#20]

(26) Filter [codegen id : 8]
Input [6]: [i_item_sk#15, i_brand_id#16, i_brand#17, i_manufact_id#18, i_manufact#19, i_manager_id#20]
Condition : ((isnotnull(i_manager_id#20) AND (i_manager_id#20 = 8)) AND isnotnull(i_item_sk#15))

(27) Project [codegen id : 8]
Output [5]: [i_item_sk#15, i_brand_id#16, i_brand#17, i_manufact_id#18, i_manufact#19]
Input [6]: [i_item_sk#15, i_brand_id#16, i_brand#17, i_manufact_id#18, i_manufact#19, i_manager_id#20]

(28) BroadcastExchange
Input [5]: [i_item_sk#15, i_brand_id#16, i_brand#17, i_manufact_id#18, i_manufact#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21]

(29) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#15]
Join condition: None

(30) Project [codegen id : 10]
Output [6]: [ss_sold_date_sk#1, ss_ext_sales_price#5, i_brand_id#16, i_brand#17, i_manufact_id#18, i_manufact#19]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#5, i_item_sk#15, i_brand_id#16, i_brand#17, i_manufact_id#18, i_manufact#19]

(31) Scan parquet default.date_dim
Output [3]: [d_date_sk#22, d_year#23, d_moy#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(32) ColumnarToRow [codegen id : 9]
Input [3]: [d_date_sk#22, d_year#23, d_moy#24]

(33) Filter [codegen id : 9]
Input [3]: [d_date_sk#22, d_year#23, d_moy#24]
Condition : ((((isnotnull(d_moy#24) AND isnotnull(d_year#23)) AND (d_moy#24 = 11)) AND (d_year#23 = 1998)) AND isnotnull(d_date_sk#22))

(34) Project [codegen id : 9]
Output [1]: [d_date_sk#22]
Input [3]: [d_date_sk#22, d_year#23, d_moy#24]

(35) BroadcastExchange
Input [1]: [d_date_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#25]

(36) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#22]
Join condition: None

(37) Project [codegen id : 10]
Output [5]: [ss_ext_sales_price#5, i_brand_id#16, i_brand#17, i_manufact_id#18, i_manufact#19]
Input [7]: [ss_sold_date_sk#1, ss_ext_sales_price#5, i_brand_id#16, i_brand#17, i_manufact_id#18, i_manufact#19, d_date_sk#22]

(38) HashAggregate [codegen id : 10]
Input [5]: [ss_ext_sales_price#5, i_brand_id#16, i_brand#17, i_manufact_id#18, i_manufact#19]
Keys [4]: [i_brand#17, i_brand_id#16, i_manufact_id#18, i_manufact#19]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#5))]
Aggregate Attributes [1]: [sum#26]
Results [5]: [i_brand#17, i_brand_id#16, i_manufact_id#18, i_manufact#19, sum#27]

(39) Exchange
Input [5]: [i_brand#17, i_brand_id#16, i_manufact_id#18, i_manufact#19, sum#27]
Arguments: hashpartitioning(i_brand#17, i_brand_id#16, i_manufact_id#18, i_manufact#19, 5), ENSURE_REQUIREMENTS, [id=#28]

(40) HashAggregate [codegen id : 11]
Input [5]: [i_brand#17, i_brand_id#16, i_manufact_id#18, i_manufact#19, sum#27]
Keys [4]: [i_brand#17, i_brand_id#16, i_manufact_id#18, i_manufact#19]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#5))#29]
Results [5]: [i_brand_id#16 AS brand_id#30, i_brand#17 AS brand#31, i_manufact_id#18, i_manufact#19, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#5))#29,17,2) AS ext_price#32]

(41) TakeOrderedAndProject
Input [5]: [brand_id#30, brand#31, i_manufact_id#18, i_manufact#19, ext_price#32]
Arguments: 100, [ext_price#32 DESC NULLS LAST, brand#31 ASC NULLS FIRST, brand_id#30 ASC NULLS FIRST, i_manufact_id#18 ASC NULLS FIRST, i_manufact#19 ASC NULLS FIRST], [brand_id#30, brand#31, i_manufact_id#18, i_manufact#19, ext_price#32]

