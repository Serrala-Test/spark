== Physical Plan ==
TakeOrderedAndProject (45)
+- * HashAggregate (44)
   +- Exchange (43)
      +- * HashAggregate (42)
         +- * Project (41)
            +- * BroadcastHashJoin Inner BuildRight (40)
               :- * Project (35)
               :  +- * SortMergeJoin Inner (34)
               :     :- * Sort (28)
               :     :  +- Exchange (27)
               :     :     +- * Project (26)
               :     :        +- * SortMergeJoin Inner (25)
               :     :           :- * Sort (19)
               :     :           :  +- Exchange (18)
               :     :           :     +- * Project (17)
               :     :           :        +- * BroadcastHashJoin Inner BuildLeft (16)
               :     :           :           :- BroadcastExchange (11)
               :     :           :           :  +- * Project (10)
               :     :           :           :     +- * BroadcastHashJoin Inner BuildRight (9)
               :     :           :           :        :- * Project (4)
               :     :           :           :        :  +- * Filter (3)
               :     :           :           :        :     +- * ColumnarToRow (2)
               :     :           :           :        :        +- Scan parquet default.date_dim (1)
               :     :           :           :        +- BroadcastExchange (8)
               :     :           :           :           +- * Filter (7)
               :     :           :           :              +- * ColumnarToRow (6)
               :     :           :           :                 +- Scan parquet default.store_sales (5)
               :     :           :           +- * Project (15)
               :     :           :              +- * Filter (14)
               :     :           :                 +- * ColumnarToRow (13)
               :     :           :                    +- Scan parquet default.item (12)
               :     :           +- * Sort (24)
               :     :              +- Exchange (23)
               :     :                 +- * Filter (22)
               :     :                    +- * ColumnarToRow (21)
               :     :                       +- Scan parquet default.customer (20)
               :     +- * Sort (33)
               :        +- Exchange (32)
               :           +- * Filter (31)
               :              +- * ColumnarToRow (30)
               :                 +- Scan parquet default.customer_address (29)
               +- BroadcastExchange (39)
                  +- * Filter (38)
                     +- * ColumnarToRow (37)
                        +- Scan parquet default.store (36)


(1) Scan parquet default.date_dim
Output [3]: [d_date_sk#1, d_year#2, d_moy#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(2) ColumnarToRow [codegen id : 2]
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]

(3) Filter [codegen id : 2]
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]
Condition : ((((isnotnull(d_moy#3) AND isnotnull(d_year#2)) AND (d_moy#3 = 11)) AND (d_year#2 = 1998)) AND isnotnull(d_date_sk#1))

(4) Project [codegen id : 2]
Output [1]: [d_date_sk#1]
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]

(5) Scan parquet default.store_sales
Output [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2)>

(6) ColumnarToRow [codegen id : 1]
Input [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, ss_sold_date_sk#8]

(7) Filter [codegen id : 1]
Input [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, ss_sold_date_sk#8]
Condition : ((isnotnull(ss_item_sk#4) AND isnotnull(ss_customer_sk#5)) AND isnotnull(ss_store_sk#6))

(8) BroadcastExchange
Input [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, ss_sold_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[4, int, true] as bigint)),false), [id=#9]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [d_date_sk#1]
Right keys [1]: [ss_sold_date_sk#8]
Join condition: None

(10) Project [codegen id : 2]
Output [4]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7]
Input [6]: [d_date_sk#1, ss_item_sk#4, ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, ss_sold_date_sk#8]

(11) BroadcastExchange
Input [4]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#10]

(12) Scan parquet default.item
Output [6]: [i_item_sk#11, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15, i_manager_id#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,8), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manufact_id:int,i_manufact:string,i_manager_id:int>

(13) ColumnarToRow
Input [6]: [i_item_sk#11, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15, i_manager_id#16]

(14) Filter
Input [6]: [i_item_sk#11, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15, i_manager_id#16]
Condition : ((isnotnull(i_manager_id#16) AND (i_manager_id#16 = 8)) AND isnotnull(i_item_sk#11))

(15) Project
Output [5]: [i_item_sk#11, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15]
Input [6]: [i_item_sk#11, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15, i_manager_id#16]

(16) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#4]
Right keys [1]: [i_item_sk#11]
Join condition: None

(17) Project [codegen id : 3]
Output [7]: [ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15]
Input [9]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, i_item_sk#11, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15]

(18) Exchange
Input [7]: [ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15]
Arguments: hashpartitioning(ss_customer_sk#5, 5), ENSURE_REQUIREMENTS, [id=#17]

(19) Sort [codegen id : 4]
Input [7]: [ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15]
Arguments: [ss_customer_sk#5 ASC NULLS FIRST], false, 0

(20) Scan parquet default.customer
Output [2]: [c_customer_sk#18, c_current_addr_sk#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(21) ColumnarToRow [codegen id : 5]
Input [2]: [c_customer_sk#18, c_current_addr_sk#19]

(22) Filter [codegen id : 5]
Input [2]: [c_customer_sk#18, c_current_addr_sk#19]
Condition : (isnotnull(c_customer_sk#18) AND isnotnull(c_current_addr_sk#19))

(23) Exchange
Input [2]: [c_customer_sk#18, c_current_addr_sk#19]
Arguments: hashpartitioning(c_customer_sk#18, 5), ENSURE_REQUIREMENTS, [id=#20]

(24) Sort [codegen id : 6]
Input [2]: [c_customer_sk#18, c_current_addr_sk#19]
Arguments: [c_customer_sk#18 ASC NULLS FIRST], false, 0

(25) SortMergeJoin [codegen id : 7]
Left keys [1]: [ss_customer_sk#5]
Right keys [1]: [c_customer_sk#18]
Join condition: None

(26) Project [codegen id : 7]
Output [7]: [ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15, c_current_addr_sk#19]
Input [9]: [ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15, c_customer_sk#18, c_current_addr_sk#19]

(27) Exchange
Input [7]: [ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15, c_current_addr_sk#19]
Arguments: hashpartitioning(c_current_addr_sk#19, 5), ENSURE_REQUIREMENTS, [id=#21]

(28) Sort [codegen id : 8]
Input [7]: [ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15, c_current_addr_sk#19]
Arguments: [c_current_addr_sk#19 ASC NULLS FIRST], false, 0

(29) Scan parquet default.customer_address
Output [2]: [ca_address_sk#22, ca_zip#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_zip)]
ReadSchema: struct<ca_address_sk:int,ca_zip:string>

(30) ColumnarToRow [codegen id : 9]
Input [2]: [ca_address_sk#22, ca_zip#23]

(31) Filter [codegen id : 9]
Input [2]: [ca_address_sk#22, ca_zip#23]
Condition : (isnotnull(ca_address_sk#22) AND isnotnull(ca_zip#23))

(32) Exchange
Input [2]: [ca_address_sk#22, ca_zip#23]
Arguments: hashpartitioning(ca_address_sk#22, 5), ENSURE_REQUIREMENTS, [id=#24]

(33) Sort [codegen id : 10]
Input [2]: [ca_address_sk#22, ca_zip#23]
Arguments: [ca_address_sk#22 ASC NULLS FIRST], false, 0

(34) SortMergeJoin [codegen id : 12]
Left keys [1]: [c_current_addr_sk#19]
Right keys [1]: [ca_address_sk#22]
Join condition: None

(35) Project [codegen id : 12]
Output [7]: [ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15, ca_zip#23]
Input [9]: [ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15, c_current_addr_sk#19, ca_address_sk#22, ca_zip#23]

(36) Scan parquet default.store
Output [2]: [s_store_sk#25, s_zip#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_zip), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_zip:string>

(37) ColumnarToRow [codegen id : 11]
Input [2]: [s_store_sk#25, s_zip#26]

(38) Filter [codegen id : 11]
Input [2]: [s_store_sk#25, s_zip#26]
Condition : (isnotnull(s_zip#26) AND isnotnull(s_store_sk#25))

(39) BroadcastExchange
Input [2]: [s_store_sk#25, s_zip#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(40) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ss_store_sk#6]
Right keys [1]: [s_store_sk#25]
Join condition: NOT (substr(ca_zip#23, 1, 5) = substr(s_zip#26, 1, 5))

(41) Project [codegen id : 12]
Output [5]: [ss_ext_sales_price#7, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15]
Input [9]: [ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15, ca_zip#23, s_store_sk#25, s_zip#26]

(42) HashAggregate [codegen id : 12]
Input [5]: [ss_ext_sales_price#7, i_brand_id#12, i_brand#13, i_manufact_id#14, i_manufact#15]
Keys [4]: [i_brand#13, i_brand_id#12, i_manufact_id#14, i_manufact#15]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#7))]
Aggregate Attributes [1]: [sum#28]
Results [5]: [i_brand#13, i_brand_id#12, i_manufact_id#14, i_manufact#15, sum#29]

(43) Exchange
Input [5]: [i_brand#13, i_brand_id#12, i_manufact_id#14, i_manufact#15, sum#29]
Arguments: hashpartitioning(i_brand#13, i_brand_id#12, i_manufact_id#14, i_manufact#15, 5), ENSURE_REQUIREMENTS, [id=#30]

(44) HashAggregate [codegen id : 13]
Input [5]: [i_brand#13, i_brand_id#12, i_manufact_id#14, i_manufact#15, sum#29]
Keys [4]: [i_brand#13, i_brand_id#12, i_manufact_id#14, i_manufact#15]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#7))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#7))#31]
Results [5]: [i_brand_id#12 AS brand_id#32, i_brand#13 AS brand#33, i_manufact_id#14, i_manufact#15, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#7))#31,17,2) AS ext_price#34]

(45) TakeOrderedAndProject
Input [5]: [brand_id#32, brand#33, i_manufact_id#14, i_manufact#15, ext_price#34]
Arguments: 100, [ext_price#34 DESC NULLS LAST, brand#33 ASC NULLS FIRST, brand_id#32 ASC NULLS FIRST, i_manufact_id#14 ASC NULLS FIRST, i_manufact#15 ASC NULLS FIRST], [brand_id#32, brand#33, i_manufact_id#14, i_manufact#15, ext_price#34]

