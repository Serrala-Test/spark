== Physical Plan ==
TakeOrderedAndProject (47)
+- * HashAggregate (46)
   +- Exchange (45)
      +- * HashAggregate (44)
         +- * Project (43)
            +- * BroadcastHashJoin Inner BuildRight (42)
               :- * Project (36)
               :  +- * SortMergeJoin Inner (35)
               :     :- * Sort (19)
               :     :  +- Exchange (18)
               :     :     +- * Project (17)
               :     :        +- * BroadcastHashJoin Inner BuildRight (16)
               :     :           :- * Project (10)
               :     :           :  +- * BroadcastHashJoin Inner BuildLeft (9)
               :     :           :     :- BroadcastExchange (5)
               :     :           :     :  +- * Project (4)
               :     :           :     :     +- * Filter (3)
               :     :           :     :        +- * ColumnarToRow (2)
               :     :           :     :           +- Scan parquet default.date_dim (1)
               :     :           :     +- * Filter (8)
               :     :           :        +- * ColumnarToRow (7)
               :     :           :           +- Scan parquet default.store_sales (6)
               :     :           +- BroadcastExchange (15)
               :     :              +- * Project (14)
               :     :                 +- * Filter (13)
               :     :                    +- * ColumnarToRow (12)
               :     :                       +- Scan parquet default.store (11)
               :     +- * Sort (34)
               :        +- Exchange (33)
               :           +- * Project (32)
               :              +- * SortMergeJoin Inner (31)
               :                 :- * Sort (24)
               :                 :  +- Exchange (23)
               :                 :     +- * Filter (22)
               :                 :        +- * ColumnarToRow (21)
               :                 :           +- Scan parquet default.customer (20)
               :                 +- * Sort (30)
               :                    +- Exchange (29)
               :                       +- * Project (28)
               :                          +- * Filter (27)
               :                             +- * ColumnarToRow (26)
               :                                +- Scan parquet default.customer_address (25)
               +- BroadcastExchange (41)
                  +- * Project (40)
                     +- * Filter (39)
                        +- * ColumnarToRow (38)
                           +- Scan parquet default.item (37)


(1) Scan parquet default.date_dim
Output [3]: [d_date_sk#1, d_year#2, d_moy#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]

(3) Filter [codegen id : 1]
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]
Condition : ((((isnotnull(d_moy#3) AND isnotnull(d_year#2)) AND (d_moy#3 = 11)) AND (d_year#2 = 1998)) AND isnotnull(d_date_sk#1))

(4) Project [codegen id : 1]
Output [1]: [d_date_sk#1]
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]

(5) BroadcastExchange
Input [1]: [d_date_sk#1]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#4]

(6) Scan parquet default.store_sales
Output [5]: [ss_sold_date_sk#5, ss_item_sk#6, ss_customer_sk#7, ss_store_sk#8, ss_ext_sales_price#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2)>

(7) ColumnarToRow
Input [5]: [ss_sold_date_sk#5, ss_item_sk#6, ss_customer_sk#7, ss_store_sk#8, ss_ext_sales_price#9]

(8) Filter
Input [5]: [ss_sold_date_sk#5, ss_item_sk#6, ss_customer_sk#7, ss_store_sk#8, ss_ext_sales_price#9]
Condition : (((isnotnull(ss_sold_date_sk#5) AND isnotnull(ss_item_sk#6)) AND isnotnull(ss_customer_sk#7)) AND isnotnull(ss_store_sk#8))

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [d_date_sk#1]
Right keys [1]: [ss_sold_date_sk#5]
Join condition: None

(10) Project [codegen id : 3]
Output [4]: [ss_item_sk#6, ss_customer_sk#7, ss_store_sk#8, ss_ext_sales_price#9]
Input [6]: [d_date_sk#1, ss_sold_date_sk#5, ss_item_sk#6, ss_customer_sk#7, ss_store_sk#8, ss_ext_sales_price#9]

(11) Scan parquet default.store
Output [2]: [s_store_sk#10, s_zip#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_zip:string>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [s_store_sk#10, s_zip#11]

(13) Filter [codegen id : 2]
Input [2]: [s_store_sk#10, s_zip#11]
Condition : (isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_zip#11, 10, false, true)) AND isnotnull(s_store_sk#10))

(14) Project [codegen id : 2]
Output [2]: [s_store_sk#10, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_zip#11, 10, false, true) AS s_zip#12]
Input [2]: [s_store_sk#10, s_zip#11]

(15) BroadcastExchange
Input [2]: [s_store_sk#10, s_zip#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13]

(16) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#8]
Right keys [1]: [s_store_sk#10]
Join condition: None

(17) Project [codegen id : 3]
Output [4]: [ss_item_sk#6, ss_customer_sk#7, ss_ext_sales_price#9, s_zip#12]
Input [6]: [ss_item_sk#6, ss_customer_sk#7, ss_store_sk#8, ss_ext_sales_price#9, s_store_sk#10, s_zip#12]

(18) Exchange
Input [4]: [ss_item_sk#6, ss_customer_sk#7, ss_ext_sales_price#9, s_zip#12]
Arguments: hashpartitioning(ss_customer_sk#7, 5), ENSURE_REQUIREMENTS, [id=#14]

(19) Sort [codegen id : 4]
Input [4]: [ss_item_sk#6, ss_customer_sk#7, ss_ext_sales_price#9, s_zip#12]
Arguments: [ss_customer_sk#7 ASC NULLS FIRST], false, 0

(20) Scan parquet default.customer
Output [2]: [c_customer_sk#15, c_current_addr_sk#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(21) ColumnarToRow [codegen id : 5]
Input [2]: [c_customer_sk#15, c_current_addr_sk#16]

(22) Filter [codegen id : 5]
Input [2]: [c_customer_sk#15, c_current_addr_sk#16]
Condition : (isnotnull(c_customer_sk#15) AND isnotnull(c_current_addr_sk#16))

(23) Exchange
Input [2]: [c_customer_sk#15, c_current_addr_sk#16]
Arguments: hashpartitioning(c_current_addr_sk#16, 5), ENSURE_REQUIREMENTS, [id=#17]

(24) Sort [codegen id : 6]
Input [2]: [c_customer_sk#15, c_current_addr_sk#16]
Arguments: [c_current_addr_sk#16 ASC NULLS FIRST], false, 0

(25) Scan parquet default.customer_address
Output [2]: [ca_address_sk#18, ca_zip#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_zip:string>

(26) ColumnarToRow [codegen id : 7]
Input [2]: [ca_address_sk#18, ca_zip#19]

(27) Filter [codegen id : 7]
Input [2]: [ca_address_sk#18, ca_zip#19]
Condition : (isnotnull(ca_address_sk#18) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_zip#19, 10, false, true)))

(28) Project [codegen id : 7]
Output [2]: [ca_address_sk#18, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_zip#19, 10, false, true) AS ca_zip#20]
Input [2]: [ca_address_sk#18, ca_zip#19]

(29) Exchange
Input [2]: [ca_address_sk#18, ca_zip#20]
Arguments: hashpartitioning(ca_address_sk#18, 5), ENSURE_REQUIREMENTS, [id=#21]

(30) Sort [codegen id : 8]
Input [2]: [ca_address_sk#18, ca_zip#20]
Arguments: [ca_address_sk#18 ASC NULLS FIRST], false, 0

(31) SortMergeJoin [codegen id : 9]
Left keys [1]: [c_current_addr_sk#16]
Right keys [1]: [ca_address_sk#18]
Join condition: None

(32) Project [codegen id : 9]
Output [2]: [c_customer_sk#15, ca_zip#20]
Input [4]: [c_customer_sk#15, c_current_addr_sk#16, ca_address_sk#18, ca_zip#20]

(33) Exchange
Input [2]: [c_customer_sk#15, ca_zip#20]
Arguments: hashpartitioning(c_customer_sk#15, 5), ENSURE_REQUIREMENTS, [id=#22]

(34) Sort [codegen id : 10]
Input [2]: [c_customer_sk#15, ca_zip#20]
Arguments: [c_customer_sk#15 ASC NULLS FIRST], false, 0

(35) SortMergeJoin [codegen id : 12]
Left keys [1]: [ss_customer_sk#7]
Right keys [1]: [c_customer_sk#15]
Join condition: NOT (substr(ca_zip#20, 1, 5) = substr(s_zip#12, 1, 5))

(36) Project [codegen id : 12]
Output [2]: [ss_item_sk#6, ss_ext_sales_price#9]
Input [6]: [ss_item_sk#6, ss_customer_sk#7, ss_ext_sales_price#9, s_zip#12, c_customer_sk#15, ca_zip#20]

(37) Scan parquet default.item
Output [6]: [i_item_sk#23, i_brand_id#24, i_brand#25, i_manufact_id#26, i_manufact#27, i_manager_id#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,8), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manufact_id:int,i_manufact:string,i_manager_id:int>

(38) ColumnarToRow [codegen id : 11]
Input [6]: [i_item_sk#23, i_brand_id#24, i_brand#25, i_manufact_id#26, i_manufact#27, i_manager_id#28]

(39) Filter [codegen id : 11]
Input [6]: [i_item_sk#23, i_brand_id#24, i_brand#25, i_manufact_id#26, i_manufact#27, i_manager_id#28]
Condition : ((isnotnull(i_manager_id#28) AND (i_manager_id#28 = 8)) AND isnotnull(i_item_sk#23))

(40) Project [codegen id : 11]
Output [5]: [i_item_sk#23, i_brand_id#24, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_brand#25, 50, false, true) AS i_brand#29, i_manufact_id#26, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_manufact#27, 50, false, true) AS i_manufact#30]
Input [6]: [i_item_sk#23, i_brand_id#24, i_brand#25, i_manufact_id#26, i_manufact#27, i_manager_id#28]

(41) BroadcastExchange
Input [5]: [i_item_sk#23, i_brand_id#24, i_brand#29, i_manufact_id#26, i_manufact#30]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#31]

(42) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ss_item_sk#6]
Right keys [1]: [i_item_sk#23]
Join condition: None

(43) Project [codegen id : 12]
Output [5]: [ss_ext_sales_price#9, i_brand_id#24, i_brand#29, i_manufact_id#26, i_manufact#30]
Input [7]: [ss_item_sk#6, ss_ext_sales_price#9, i_item_sk#23, i_brand_id#24, i_brand#29, i_manufact_id#26, i_manufact#30]

(44) HashAggregate [codegen id : 12]
Input [5]: [ss_ext_sales_price#9, i_brand_id#24, i_brand#29, i_manufact_id#26, i_manufact#30]
Keys [4]: [i_brand#29, i_brand_id#24, i_manufact_id#26, i_manufact#30]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#9))]
Aggregate Attributes [1]: [sum#32]
Results [5]: [i_brand#29, i_brand_id#24, i_manufact_id#26, i_manufact#30, sum#33]

(45) Exchange
Input [5]: [i_brand#29, i_brand_id#24, i_manufact_id#26, i_manufact#30, sum#33]
Arguments: hashpartitioning(i_brand#29, i_brand_id#24, i_manufact_id#26, i_manufact#30, 5), ENSURE_REQUIREMENTS, [id=#34]

(46) HashAggregate [codegen id : 13]
Input [5]: [i_brand#29, i_brand_id#24, i_manufact_id#26, i_manufact#30, sum#33]
Keys [4]: [i_brand#29, i_brand_id#24, i_manufact_id#26, i_manufact#30]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#9))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#9))#35]
Results [5]: [i_brand_id#24 AS brand_id#36, i_brand#29 AS brand#37, i_manufact_id#26, i_manufact#30, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#9))#35,17,2) AS ext_price#38]

(47) TakeOrderedAndProject
Input [5]: [brand_id#36, brand#37, i_manufact_id#26, i_manufact#30, ext_price#38]
Arguments: 100, [ext_price#38 DESC NULLS LAST, brand#37 ASC NULLS FIRST, brand_id#36 ASC NULLS FIRST, i_manufact_id#26 ASC NULLS FIRST, i_manufact#30 ASC NULLS FIRST], [brand_id#36, brand#37, i_manufact_id#26, i_manufact#30, ext_price#38]

