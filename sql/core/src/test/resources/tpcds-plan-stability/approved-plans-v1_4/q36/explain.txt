== Physical Plan ==
TakeOrderedAndProject (33)
+- * Project (32)
   +- Window (31)
      +- * Sort (30)
         +- Exchange (29)
            +- * HashAggregate (28)
               +- Exchange (27)
                  +- * HashAggregate (26)
                     +- * Expand (25)
                        +- * Project (24)
                           +- * BroadcastHashJoin Inner BuildRight (23)
                              :- * Project (17)
                              :  +- * BroadcastHashJoin Inner BuildRight (16)
                              :     :- * Project (10)
                              :     :  +- * BroadcastHashJoin Inner BuildRight (9)
                              :     :     :- * Filter (3)
                              :     :     :  +- * ColumnarToRow (2)
                              :     :     :     +- Scan parquet default.store_sales (1)
                              :     :     +- BroadcastExchange (8)
                              :     :        +- * Project (7)
                              :     :           +- * Filter (6)
                              :     :              +- * ColumnarToRow (5)
                              :     :                 +- Scan parquet default.date_dim (4)
                              :     +- BroadcastExchange (15)
                              :        +- * Project (14)
                              :           +- * Filter (13)
                              :              +- * ColumnarToRow (12)
                              :                 +- Scan parquet default.item (11)
                              +- BroadcastExchange (22)
                                 +- * Project (21)
                                    +- * Filter (20)
                                       +- * ColumnarToRow (19)
                                          +- Scan parquet default.store (18)


(1) Scan parquet default.store_sales
Output [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5]

(3) Filter [codegen id : 4]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5]
Condition : ((isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_item_sk#2)) AND isnotnull(ss_store_sk#3))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_year#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#7]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#7]
Condition : ((isnotnull(d_year#7) AND (d_year#7 = 2001)) AND isnotnull(d_date_sk#6))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_year#7]

(8) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#6]
Join condition: None

(10) Project [codegen id : 4]
Output [4]: [ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5, d_date_sk#6]

(11) Scan parquet default.item
Output [3]: [i_item_sk#9, i_class#10, i_category#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(12) ColumnarToRow [codegen id : 2]
Input [3]: [i_item_sk#9, i_class#10, i_category#11]

(13) Filter [codegen id : 2]
Input [3]: [i_item_sk#9, i_class#10, i_category#11]
Condition : isnotnull(i_item_sk#9)

(14) Project [codegen id : 2]
Output [3]: [i_item_sk#9, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_class#10, 50, false, true) AS i_class#12, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#11, 50, false, true) AS i_category#13]
Input [3]: [i_item_sk#9, i_class#10, i_category#11]

(15) BroadcastExchange
Input [3]: [i_item_sk#9, i_class#12, i_category#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(16) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#9]
Join condition: None

(17) Project [codegen id : 4]
Output [5]: [ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5, i_class#12, i_category#13]
Input [7]: [ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5, i_item_sk#9, i_class#12, i_category#13]

(18) Scan parquet default.store
Output [2]: [s_store_sk#15, s_state#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(19) ColumnarToRow [codegen id : 3]
Input [2]: [s_store_sk#15, s_state#16]

(20) Filter [codegen id : 3]
Input [2]: [s_store_sk#15, s_state#16]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#16, 2, false, true) = TN) AND isnotnull(s_store_sk#15))

(21) Project [codegen id : 3]
Output [1]: [s_store_sk#15]
Input [2]: [s_store_sk#15, s_state#16]

(22) BroadcastExchange
Input [1]: [s_store_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#17]

(23) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#15]
Join condition: None

(24) Project [codegen id : 4]
Output [4]: [ss_ext_sales_price#4, ss_net_profit#5, i_category#13 AS i_category#18, i_class#12 AS i_class#19]
Input [6]: [ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5, i_class#12, i_category#13, s_store_sk#15]

(25) Expand [codegen id : 4]
Input [4]: [ss_ext_sales_price#4, ss_net_profit#5, i_category#18, i_class#19]
Arguments: [List(ss_ext_sales_price#4, ss_net_profit#5, i_category#18, i_class#19, 0), List(ss_ext_sales_price#4, ss_net_profit#5, i_category#18, null, 1), List(ss_ext_sales_price#4, ss_net_profit#5, null, null, 3)], [ss_ext_sales_price#4, ss_net_profit#5, i_category#20, i_class#21, spark_grouping_id#22]

(26) HashAggregate [codegen id : 4]
Input [5]: [ss_ext_sales_price#4, ss_net_profit#5, i_category#20, i_class#21, spark_grouping_id#22]
Keys [3]: [i_category#20, i_class#21, spark_grouping_id#22]
Functions [2]: [partial_sum(UnscaledValue(ss_net_profit#5)), partial_sum(UnscaledValue(ss_ext_sales_price#4))]
Aggregate Attributes [2]: [sum#23, sum#24]
Results [5]: [i_category#20, i_class#21, spark_grouping_id#22, sum#25, sum#26]

(27) Exchange
Input [5]: [i_category#20, i_class#21, spark_grouping_id#22, sum#25, sum#26]
Arguments: hashpartitioning(i_category#20, i_class#21, spark_grouping_id#22, 5), ENSURE_REQUIREMENTS, [id=#27]

(28) HashAggregate [codegen id : 5]
Input [5]: [i_category#20, i_class#21, spark_grouping_id#22, sum#25, sum#26]
Keys [3]: [i_category#20, i_class#21, spark_grouping_id#22]
Functions [2]: [sum(UnscaledValue(ss_net_profit#5)), sum(UnscaledValue(ss_ext_sales_price#4))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#5))#28, sum(UnscaledValue(ss_ext_sales_price#4))#29]
Results [7]: [CheckOverflow((promote_precision(MakeDecimal(sum(UnscaledValue(ss_net_profit#5))#28,17,2)) / promote_precision(MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#4))#29,17,2))), DecimalType(37,20), true) AS gross_margin#30, i_category#20, i_class#21, (cast((shiftright(spark_grouping_id#22, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#22, 0) & 1) as tinyint)) AS lochierarchy#31, (cast((shiftright(spark_grouping_id#22, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#22, 0) & 1) as tinyint)) AS _w1#32, CASE WHEN (cast((shiftright(spark_grouping_id#22, 0) & 1) as tinyint) = 0) THEN i_category#20 END AS _w2#33, CheckOverflow((promote_precision(MakeDecimal(sum(UnscaledValue(ss_net_profit#5))#28,17,2)) / promote_precision(MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#4))#29,17,2))), DecimalType(37,20), true) AS _w3#34]

(29) Exchange
Input [7]: [gross_margin#30, i_category#20, i_class#21, lochierarchy#31, _w1#32, _w2#33, _w3#34]
Arguments: hashpartitioning(_w1#32, _w2#33, 5), ENSURE_REQUIREMENTS, [id=#35]

(30) Sort [codegen id : 6]
Input [7]: [gross_margin#30, i_category#20, i_class#21, lochierarchy#31, _w1#32, _w2#33, _w3#34]
Arguments: [_w1#32 ASC NULLS FIRST, _w2#33 ASC NULLS FIRST, _w3#34 ASC NULLS FIRST], false, 0

(31) Window
Input [7]: [gross_margin#30, i_category#20, i_class#21, lochierarchy#31, _w1#32, _w2#33, _w3#34]
Arguments: [rank(_w3#34) windowspecdefinition(_w1#32, _w2#33, _w3#34 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#36], [_w1#32, _w2#33], [_w3#34 ASC NULLS FIRST]

(32) Project [codegen id : 7]
Output [5]: [gross_margin#30, i_category#20, i_class#21, lochierarchy#31, rank_within_parent#36]
Input [8]: [gross_margin#30, i_category#20, i_class#21, lochierarchy#31, _w1#32, _w2#33, _w3#34, rank_within_parent#36]

(33) TakeOrderedAndProject
Input [5]: [gross_margin#30, i_category#20, i_class#21, lochierarchy#31, rank_within_parent#36]
Arguments: 100, [lochierarchy#31 DESC NULLS LAST, CASE WHEN (lochierarchy#31 = 0) THEN i_category#20 END ASC NULLS FIRST, rank_within_parent#36 ASC NULLS FIRST], [gross_margin#30, i_category#20, i_class#21, lochierarchy#31, rank_within_parent#36]

