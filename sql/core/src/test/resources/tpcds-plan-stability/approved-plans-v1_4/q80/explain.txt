== Physical Plan ==
TakeOrderedAndProject (102)
+- * HashAggregate (101)
   +- Exchange (100)
      +- * HashAggregate (99)
         +- * Expand (98)
            +- Union (97)
               :- * HashAggregate (40)
               :  +- Exchange (39)
               :     +- * HashAggregate (38)
               :        +- * Project (37)
               :           +- * BroadcastHashJoin Inner BuildRight (36)
               :              :- * Project (30)
               :              :  +- * BroadcastHashJoin Inner BuildRight (29)
               :              :     :- * Project (23)
               :              :     :  +- * BroadcastHashJoin Inner BuildRight (22)
               :              :     :     :- * Project (16)
               :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (15)
               :              :     :     :     :- * Project (9)
               :              :     :     :     :  +- * BroadcastHashJoin LeftOuter BuildRight (8)
               :              :     :     :     :     :- * Filter (3)
               :              :     :     :     :     :  +- * ColumnarToRow (2)
               :              :     :     :     :     :     +- Scan parquet default.store_sales (1)
               :              :     :     :     :     +- BroadcastExchange (7)
               :              :     :     :     :        +- * Filter (6)
               :              :     :     :     :           +- * ColumnarToRow (5)
               :              :     :     :     :              +- Scan parquet default.store_returns (4)
               :              :     :     :     +- BroadcastExchange (14)
               :              :     :     :        +- * Project (13)
               :              :     :     :           +- * Filter (12)
               :              :     :     :              +- * ColumnarToRow (11)
               :              :     :     :                 +- Scan parquet default.date_dim (10)
               :              :     :     +- BroadcastExchange (21)
               :              :     :        +- * Project (20)
               :              :     :           +- * Filter (19)
               :              :     :              +- * ColumnarToRow (18)
               :              :     :                 +- Scan parquet default.store (17)
               :              :     +- BroadcastExchange (28)
               :              :        +- * Project (27)
               :              :           +- * Filter (26)
               :              :              +- * ColumnarToRow (25)
               :              :                 +- Scan parquet default.item (24)
               :              +- BroadcastExchange (35)
               :                 +- * Project (34)
               :                    +- * Filter (33)
               :                       +- * ColumnarToRow (32)
               :                          +- Scan parquet default.promotion (31)
               :- * HashAggregate (68)
               :  +- Exchange (67)
               :     +- * HashAggregate (66)
               :        +- * Project (65)
               :           +- * BroadcastHashJoin Inner BuildRight (64)
               :              :- * Project (62)
               :              :  +- * BroadcastHashJoin Inner BuildRight (61)
               :              :     :- * Project (59)
               :              :     :  +- * BroadcastHashJoin Inner BuildRight (58)
               :              :     :     :- * Project (52)
               :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (51)
               :              :     :     :     :- * Project (49)
               :              :     :     :     :  +- * BroadcastHashJoin LeftOuter BuildRight (48)
               :              :     :     :     :     :- * Filter (43)
               :              :     :     :     :     :  +- * ColumnarToRow (42)
               :              :     :     :     :     :     +- Scan parquet default.catalog_sales (41)
               :              :     :     :     :     +- BroadcastExchange (47)
               :              :     :     :     :        +- * Filter (46)
               :              :     :     :     :           +- * ColumnarToRow (45)
               :              :     :     :     :              +- Scan parquet default.catalog_returns (44)
               :              :     :     :     +- ReusedExchange (50)
               :              :     :     +- BroadcastExchange (57)
               :              :     :        +- * Project (56)
               :              :     :           +- * Filter (55)
               :              :     :              +- * ColumnarToRow (54)
               :              :     :                 +- Scan parquet default.catalog_page (53)
               :              :     +- ReusedExchange (60)
               :              +- ReusedExchange (63)
               +- * HashAggregate (96)
                  +- Exchange (95)
                     +- * HashAggregate (94)
                        +- * Project (93)
                           +- * BroadcastHashJoin Inner BuildRight (92)
                              :- * Project (90)
                              :  +- * BroadcastHashJoin Inner BuildRight (89)
                              :     :- * Project (87)
                              :     :  +- * BroadcastHashJoin Inner BuildRight (86)
                              :     :     :- * Project (80)
                              :     :     :  +- * BroadcastHashJoin Inner BuildRight (79)
                              :     :     :     :- * Project (77)
                              :     :     :     :  +- * BroadcastHashJoin LeftOuter BuildRight (76)
                              :     :     :     :     :- * Filter (71)
                              :     :     :     :     :  +- * ColumnarToRow (70)
                              :     :     :     :     :     +- Scan parquet default.web_sales (69)
                              :     :     :     :     +- BroadcastExchange (75)
                              :     :     :     :        +- * Filter (74)
                              :     :     :     :           +- * ColumnarToRow (73)
                              :     :     :     :              +- Scan parquet default.web_returns (72)
                              :     :     :     +- ReusedExchange (78)
                              :     :     +- BroadcastExchange (85)
                              :     :        +- * Project (84)
                              :     :           +- * Filter (83)
                              :     :              +- * ColumnarToRow (82)
                              :     :                 +- Scan parquet default.web_site (81)
                              :     +- ReusedExchange (88)
                              +- ReusedExchange (91)


(1) Scan parquet default.store_sales
Output [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_net_profit#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 6]
Input [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_net_profit#7]

(3) Filter [codegen id : 6]
Input [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_net_profit#7]
Condition : (((isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_item_sk#2)) AND isnotnull(ss_promo_sk#4))

(4) Scan parquet default.store_returns
Output [4]: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:bigint,sr_ticket_number:bigint,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(5) ColumnarToRow [codegen id : 1]
Input [4]: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11]

(6) Filter [codegen id : 1]
Input [4]: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11]
Condition : (isnotnull(sr_item_sk#8) AND isnotnull(sr_ticket_number#9))

(7) BroadcastExchange
Input [4]: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false], input[1, bigint, false]),false), [id=#12]

(8) BroadcastHashJoin [codegen id : 6]
Left keys [2]: [cast(ss_item_sk#2 as bigint), cast(ss_ticket_number#5 as bigint)]
Right keys [2]: [sr_item_sk#8, sr_ticket_number#9]
Join condition: None

(9) Project [codegen id : 6]
Output [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#10, sr_net_loss#11]
Input [11]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_net_profit#7, sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11]

(10) Scan parquet default.date_dim
Output [2]: [d_date_sk#13, d_date#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-08-23), LessThanOrEqual(d_date,2000-09-22), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(11) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#13, d_date#14]

(12) Filter [codegen id : 2]
Input [2]: [d_date_sk#13, d_date#14]
Condition : (((isnotnull(d_date#14) AND (d_date#14 >= 11192)) AND (d_date#14 <= 11222)) AND isnotnull(d_date_sk#13))

(13) Project [codegen id : 2]
Output [1]: [d_date_sk#13]
Input [2]: [d_date_sk#13, d_date#14]

(14) BroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15]

(15) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#13]
Join condition: None

(16) Project [codegen id : 6]
Output [7]: [ss_item_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#10, sr_net_loss#11]
Input [9]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#10, sr_net_loss#11, d_date_sk#13]

(17) Scan parquet default.store
Output [2]: [s_store_sk#16, s_store_id#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(18) ColumnarToRow [codegen id : 3]
Input [2]: [s_store_sk#16, s_store_id#17]

(19) Filter [codegen id : 3]
Input [2]: [s_store_sk#16, s_store_id#17]
Condition : isnotnull(s_store_sk#16)

(20) Project [codegen id : 3]
Output [2]: [s_store_sk#16, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_store_id#17, 16, false, true) AS s_store_id#18]
Input [2]: [s_store_sk#16, s_store_id#17]

(21) BroadcastExchange
Input [2]: [s_store_sk#16, s_store_id#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#19]

(22) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#16]
Join condition: None

(23) Project [codegen id : 6]
Output [7]: [ss_item_sk#2, ss_promo_sk#4, ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#10, sr_net_loss#11, s_store_id#18]
Input [9]: [ss_item_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#10, sr_net_loss#11, s_store_sk#16, s_store_id#18]

(24) Scan parquet default.item
Output [2]: [i_item_sk#20, i_current_price#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>

(25) ColumnarToRow [codegen id : 4]
Input [2]: [i_item_sk#20, i_current_price#21]

(26) Filter [codegen id : 4]
Input [2]: [i_item_sk#20, i_current_price#21]
Condition : ((isnotnull(i_current_price#21) AND (i_current_price#21 > 50.00)) AND isnotnull(i_item_sk#20))

(27) Project [codegen id : 4]
Output [1]: [i_item_sk#20]
Input [2]: [i_item_sk#20, i_current_price#21]

(28) BroadcastExchange
Input [1]: [i_item_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22]

(29) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#20]
Join condition: None

(30) Project [codegen id : 6]
Output [6]: [ss_promo_sk#4, ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#10, sr_net_loss#11, s_store_id#18]
Input [8]: [ss_item_sk#2, ss_promo_sk#4, ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#10, sr_net_loss#11, s_store_id#18, i_item_sk#20]

(31) Scan parquet default.promotion
Output [2]: [p_promo_sk#23, p_channel_tv#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>

(32) ColumnarToRow [codegen id : 5]
Input [2]: [p_promo_sk#23, p_channel_tv#24]

(33) Filter [codegen id : 5]
Input [2]: [p_promo_sk#23, p_channel_tv#24]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, p_channel_tv#24, 1, false, true) = N) AND isnotnull(p_promo_sk#23))

(34) Project [codegen id : 5]
Output [1]: [p_promo_sk#23]
Input [2]: [p_promo_sk#23, p_channel_tv#24]

(35) BroadcastExchange
Input [1]: [p_promo_sk#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#25]

(36) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_promo_sk#4]
Right keys [1]: [p_promo_sk#23]
Join condition: None

(37) Project [codegen id : 6]
Output [5]: [ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#10, sr_net_loss#11, s_store_id#18]
Input [7]: [ss_promo_sk#4, ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#10, sr_net_loss#11, s_store_id#18, p_promo_sk#23]

(38) HashAggregate [codegen id : 6]
Input [5]: [ss_ext_sales_price#6, ss_net_profit#7, sr_return_amt#10, sr_net_loss#11, s_store_id#18]
Keys [1]: [s_store_id#18]
Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#6)), partial_sum(coalesce(cast(sr_return_amt#10 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(ss_net_profit#7 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#11 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [5]: [sum#26, sum#27, isEmpty#28, sum#29, isEmpty#30]
Results [6]: [s_store_id#18, sum#31, sum#32, isEmpty#33, sum#34, isEmpty#35]

(39) Exchange
Input [6]: [s_store_id#18, sum#31, sum#32, isEmpty#33, sum#34, isEmpty#35]
Arguments: hashpartitioning(s_store_id#18, 5), ENSURE_REQUIREMENTS, [id=#36]

(40) HashAggregate [codegen id : 7]
Input [6]: [s_store_id#18, sum#31, sum#32, isEmpty#33, sum#34, isEmpty#35]
Keys [1]: [s_store_id#18]
Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#6)), sum(coalesce(cast(sr_return_amt#10 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(ss_net_profit#7 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#11 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_ext_sales_price#6))#37, sum(coalesce(cast(sr_return_amt#10 as decimal(12,2)), 0.00))#38, sum(CheckOverflow((promote_precision(cast(ss_net_profit#7 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#11 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#39]
Results [5]: [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#6))#37,17,2) AS sales#40, sum(coalesce(cast(sr_return_amt#10 as decimal(12,2)), 0.00))#38 AS returns#41, sum(CheckOverflow((promote_precision(cast(ss_net_profit#7 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#11 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#39 AS profit#42, store channel AS channel#43, concat(store, s_store_id#18) AS id#44]

(41) Scan parquet default.catalog_sales
Output [7]: [cs_sold_date_sk#45, cs_catalog_page_sk#46, cs_item_sk#47, cs_promo_sk#48, cs_order_number#49, cs_ext_sales_price#50, cs_net_profit#51]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_catalog_page_sk), IsNotNull(cs_item_sk), IsNotNull(cs_promo_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_catalog_page_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(42) ColumnarToRow [codegen id : 13]
Input [7]: [cs_sold_date_sk#45, cs_catalog_page_sk#46, cs_item_sk#47, cs_promo_sk#48, cs_order_number#49, cs_ext_sales_price#50, cs_net_profit#51]

(43) Filter [codegen id : 13]
Input [7]: [cs_sold_date_sk#45, cs_catalog_page_sk#46, cs_item_sk#47, cs_promo_sk#48, cs_order_number#49, cs_ext_sales_price#50, cs_net_profit#51]
Condition : (((isnotnull(cs_sold_date_sk#45) AND isnotnull(cs_catalog_page_sk#46)) AND isnotnull(cs_item_sk#47)) AND isnotnull(cs_promo_sk#48))

(44) Scan parquet default.catalog_returns
Output [4]: [cr_item_sk#52, cr_order_number#53, cr_return_amount#54, cr_net_loss#55]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(45) ColumnarToRow [codegen id : 8]
Input [4]: [cr_item_sk#52, cr_order_number#53, cr_return_amount#54, cr_net_loss#55]

(46) Filter [codegen id : 8]
Input [4]: [cr_item_sk#52, cr_order_number#53, cr_return_amount#54, cr_net_loss#55]
Condition : (isnotnull(cr_item_sk#52) AND isnotnull(cr_order_number#53))

(47) BroadcastExchange
Input [4]: [cr_item_sk#52, cr_order_number#53, cr_return_amount#54, cr_net_loss#55]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[0, int, false] as bigint), 32) | (cast(input[1, int, false] as bigint) & 4294967295))),false), [id=#56]

(48) BroadcastHashJoin [codegen id : 13]
Left keys [2]: [cs_item_sk#47, cs_order_number#49]
Right keys [2]: [cr_item_sk#52, cr_order_number#53]
Join condition: None

(49) Project [codegen id : 13]
Output [8]: [cs_sold_date_sk#45, cs_catalog_page_sk#46, cs_item_sk#47, cs_promo_sk#48, cs_ext_sales_price#50, cs_net_profit#51, cr_return_amount#54, cr_net_loss#55]
Input [11]: [cs_sold_date_sk#45, cs_catalog_page_sk#46, cs_item_sk#47, cs_promo_sk#48, cs_order_number#49, cs_ext_sales_price#50, cs_net_profit#51, cr_item_sk#52, cr_order_number#53, cr_return_amount#54, cr_net_loss#55]

(50) ReusedExchange [Reuses operator id: 14]
Output [1]: [d_date_sk#13]

(51) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [cs_sold_date_sk#45]
Right keys [1]: [d_date_sk#13]
Join condition: None

(52) Project [codegen id : 13]
Output [7]: [cs_catalog_page_sk#46, cs_item_sk#47, cs_promo_sk#48, cs_ext_sales_price#50, cs_net_profit#51, cr_return_amount#54, cr_net_loss#55]
Input [9]: [cs_sold_date_sk#45, cs_catalog_page_sk#46, cs_item_sk#47, cs_promo_sk#48, cs_ext_sales_price#50, cs_net_profit#51, cr_return_amount#54, cr_net_loss#55, d_date_sk#13]

(53) Scan parquet default.catalog_page
Output [2]: [cp_catalog_page_sk#57, cp_catalog_page_id#58]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>

(54) ColumnarToRow [codegen id : 10]
Input [2]: [cp_catalog_page_sk#57, cp_catalog_page_id#58]

(55) Filter [codegen id : 10]
Input [2]: [cp_catalog_page_sk#57, cp_catalog_page_id#58]
Condition : isnotnull(cp_catalog_page_sk#57)

(56) Project [codegen id : 10]
Output [2]: [cp_catalog_page_sk#57, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cp_catalog_page_id#58, 16, false, true) AS cp_catalog_page_id#59]
Input [2]: [cp_catalog_page_sk#57, cp_catalog_page_id#58]

(57) BroadcastExchange
Input [2]: [cp_catalog_page_sk#57, cp_catalog_page_id#59]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#60]

(58) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [cs_catalog_page_sk#46]
Right keys [1]: [cp_catalog_page_sk#57]
Join condition: None

(59) Project [codegen id : 13]
Output [7]: [cs_item_sk#47, cs_promo_sk#48, cs_ext_sales_price#50, cs_net_profit#51, cr_return_amount#54, cr_net_loss#55, cp_catalog_page_id#59]
Input [9]: [cs_catalog_page_sk#46, cs_item_sk#47, cs_promo_sk#48, cs_ext_sales_price#50, cs_net_profit#51, cr_return_amount#54, cr_net_loss#55, cp_catalog_page_sk#57, cp_catalog_page_id#59]

(60) ReusedExchange [Reuses operator id: 28]
Output [1]: [i_item_sk#20]

(61) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [cs_item_sk#47]
Right keys [1]: [i_item_sk#20]
Join condition: None

(62) Project [codegen id : 13]
Output [6]: [cs_promo_sk#48, cs_ext_sales_price#50, cs_net_profit#51, cr_return_amount#54, cr_net_loss#55, cp_catalog_page_id#59]
Input [8]: [cs_item_sk#47, cs_promo_sk#48, cs_ext_sales_price#50, cs_net_profit#51, cr_return_amount#54, cr_net_loss#55, cp_catalog_page_id#59, i_item_sk#20]

(63) ReusedExchange [Reuses operator id: 35]
Output [1]: [p_promo_sk#23]

(64) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [cs_promo_sk#48]
Right keys [1]: [p_promo_sk#23]
Join condition: None

(65) Project [codegen id : 13]
Output [5]: [cs_ext_sales_price#50, cs_net_profit#51, cr_return_amount#54, cr_net_loss#55, cp_catalog_page_id#59]
Input [7]: [cs_promo_sk#48, cs_ext_sales_price#50, cs_net_profit#51, cr_return_amount#54, cr_net_loss#55, cp_catalog_page_id#59, p_promo_sk#23]

(66) HashAggregate [codegen id : 13]
Input [5]: [cs_ext_sales_price#50, cs_net_profit#51, cr_return_amount#54, cr_net_loss#55, cp_catalog_page_id#59]
Keys [1]: [cp_catalog_page_id#59]
Functions [3]: [partial_sum(UnscaledValue(cs_ext_sales_price#50)), partial_sum(coalesce(cast(cr_return_amount#54 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(cs_net_profit#51 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#55 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [5]: [sum#61, sum#62, isEmpty#63, sum#64, isEmpty#65]
Results [6]: [cp_catalog_page_id#59, sum#66, sum#67, isEmpty#68, sum#69, isEmpty#70]

(67) Exchange
Input [6]: [cp_catalog_page_id#59, sum#66, sum#67, isEmpty#68, sum#69, isEmpty#70]
Arguments: hashpartitioning(cp_catalog_page_id#59, 5), ENSURE_REQUIREMENTS, [id=#71]

(68) HashAggregate [codegen id : 14]
Input [6]: [cp_catalog_page_id#59, sum#66, sum#67, isEmpty#68, sum#69, isEmpty#70]
Keys [1]: [cp_catalog_page_id#59]
Functions [3]: [sum(UnscaledValue(cs_ext_sales_price#50)), sum(coalesce(cast(cr_return_amount#54 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(cs_net_profit#51 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#55 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_sales_price#50))#72, sum(coalesce(cast(cr_return_amount#54 as decimal(12,2)), 0.00))#73, sum(CheckOverflow((promote_precision(cast(cs_net_profit#51 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#55 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#74]
Results [5]: [MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#50))#72,17,2) AS sales#75, sum(coalesce(cast(cr_return_amount#54 as decimal(12,2)), 0.00))#73 AS returns#76, sum(CheckOverflow((promote_precision(cast(cs_net_profit#51 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#55 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#74 AS profit#77, catalog channel AS channel#78, concat(catalog_page, cp_catalog_page_id#59) AS id#79]

(69) Scan parquet default.web_sales
Output [7]: [ws_sold_date_sk#80, ws_item_sk#81, ws_web_site_sk#82, ws_promo_sk#83, ws_order_number#84, ws_ext_sales_price#85, ws_net_profit#86]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_web_site_sk), IsNotNull(ws_item_sk), IsNotNull(ws_promo_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_web_site_sk:int,ws_promo_sk:int,ws_order_number:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(70) ColumnarToRow [codegen id : 20]
Input [7]: [ws_sold_date_sk#80, ws_item_sk#81, ws_web_site_sk#82, ws_promo_sk#83, ws_order_number#84, ws_ext_sales_price#85, ws_net_profit#86]

(71) Filter [codegen id : 20]
Input [7]: [ws_sold_date_sk#80, ws_item_sk#81, ws_web_site_sk#82, ws_promo_sk#83, ws_order_number#84, ws_ext_sales_price#85, ws_net_profit#86]
Condition : (((isnotnull(ws_sold_date_sk#80) AND isnotnull(ws_web_site_sk#82)) AND isnotnull(ws_item_sk#81)) AND isnotnull(ws_promo_sk#83))

(72) Scan parquet default.web_returns
Output [4]: [wr_item_sk#87, wr_order_number#88, wr_return_amt#89, wr_net_loss#90]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number)]
ReadSchema: struct<wr_item_sk:bigint,wr_order_number:bigint,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(73) ColumnarToRow [codegen id : 15]
Input [4]: [wr_item_sk#87, wr_order_number#88, wr_return_amt#89, wr_net_loss#90]

(74) Filter [codegen id : 15]
Input [4]: [wr_item_sk#87, wr_order_number#88, wr_return_amt#89, wr_net_loss#90]
Condition : (isnotnull(wr_item_sk#87) AND isnotnull(wr_order_number#88))

(75) BroadcastExchange
Input [4]: [wr_item_sk#87, wr_order_number#88, wr_return_amt#89, wr_net_loss#90]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false], input[1, bigint, false]),false), [id=#91]

(76) BroadcastHashJoin [codegen id : 20]
Left keys [2]: [cast(ws_item_sk#81 as bigint), cast(ws_order_number#84 as bigint)]
Right keys [2]: [wr_item_sk#87, wr_order_number#88]
Join condition: None

(77) Project [codegen id : 20]
Output [8]: [ws_sold_date_sk#80, ws_item_sk#81, ws_web_site_sk#82, ws_promo_sk#83, ws_ext_sales_price#85, ws_net_profit#86, wr_return_amt#89, wr_net_loss#90]
Input [11]: [ws_sold_date_sk#80, ws_item_sk#81, ws_web_site_sk#82, ws_promo_sk#83, ws_order_number#84, ws_ext_sales_price#85, ws_net_profit#86, wr_item_sk#87, wr_order_number#88, wr_return_amt#89, wr_net_loss#90]

(78) ReusedExchange [Reuses operator id: 14]
Output [1]: [d_date_sk#13]

(79) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ws_sold_date_sk#80]
Right keys [1]: [d_date_sk#13]
Join condition: None

(80) Project [codegen id : 20]
Output [7]: [ws_item_sk#81, ws_web_site_sk#82, ws_promo_sk#83, ws_ext_sales_price#85, ws_net_profit#86, wr_return_amt#89, wr_net_loss#90]
Input [9]: [ws_sold_date_sk#80, ws_item_sk#81, ws_web_site_sk#82, ws_promo_sk#83, ws_ext_sales_price#85, ws_net_profit#86, wr_return_amt#89, wr_net_loss#90, d_date_sk#13]

(81) Scan parquet default.web_site
Output [2]: [web_site_sk#92, web_site_id#93]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string>

(82) ColumnarToRow [codegen id : 17]
Input [2]: [web_site_sk#92, web_site_id#93]

(83) Filter [codegen id : 17]
Input [2]: [web_site_sk#92, web_site_id#93]
Condition : isnotnull(web_site_sk#92)

(84) Project [codegen id : 17]
Output [2]: [web_site_sk#92, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, web_site_id#93, 16, false, true) AS web_site_id#94]
Input [2]: [web_site_sk#92, web_site_id#93]

(85) BroadcastExchange
Input [2]: [web_site_sk#92, web_site_id#94]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#95]

(86) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ws_web_site_sk#82]
Right keys [1]: [web_site_sk#92]
Join condition: None

(87) Project [codegen id : 20]
Output [7]: [ws_item_sk#81, ws_promo_sk#83, ws_ext_sales_price#85, ws_net_profit#86, wr_return_amt#89, wr_net_loss#90, web_site_id#94]
Input [9]: [ws_item_sk#81, ws_web_site_sk#82, ws_promo_sk#83, ws_ext_sales_price#85, ws_net_profit#86, wr_return_amt#89, wr_net_loss#90, web_site_sk#92, web_site_id#94]

(88) ReusedExchange [Reuses operator id: 28]
Output [1]: [i_item_sk#20]

(89) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ws_item_sk#81]
Right keys [1]: [i_item_sk#20]
Join condition: None

(90) Project [codegen id : 20]
Output [6]: [ws_promo_sk#83, ws_ext_sales_price#85, ws_net_profit#86, wr_return_amt#89, wr_net_loss#90, web_site_id#94]
Input [8]: [ws_item_sk#81, ws_promo_sk#83, ws_ext_sales_price#85, ws_net_profit#86, wr_return_amt#89, wr_net_loss#90, web_site_id#94, i_item_sk#20]

(91) ReusedExchange [Reuses operator id: 35]
Output [1]: [p_promo_sk#23]

(92) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ws_promo_sk#83]
Right keys [1]: [p_promo_sk#23]
Join condition: None

(93) Project [codegen id : 20]
Output [5]: [ws_ext_sales_price#85, ws_net_profit#86, wr_return_amt#89, wr_net_loss#90, web_site_id#94]
Input [7]: [ws_promo_sk#83, ws_ext_sales_price#85, ws_net_profit#86, wr_return_amt#89, wr_net_loss#90, web_site_id#94, p_promo_sk#23]

(94) HashAggregate [codegen id : 20]
Input [5]: [ws_ext_sales_price#85, ws_net_profit#86, wr_return_amt#89, wr_net_loss#90, web_site_id#94]
Keys [1]: [web_site_id#94]
Functions [3]: [partial_sum(UnscaledValue(ws_ext_sales_price#85)), partial_sum(coalesce(cast(wr_return_amt#89 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(ws_net_profit#86 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#90 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [5]: [sum#96, sum#97, isEmpty#98, sum#99, isEmpty#100]
Results [6]: [web_site_id#94, sum#101, sum#102, isEmpty#103, sum#104, isEmpty#105]

(95) Exchange
Input [6]: [web_site_id#94, sum#101, sum#102, isEmpty#103, sum#104, isEmpty#105]
Arguments: hashpartitioning(web_site_id#94, 5), ENSURE_REQUIREMENTS, [id=#106]

(96) HashAggregate [codegen id : 21]
Input [6]: [web_site_id#94, sum#101, sum#102, isEmpty#103, sum#104, isEmpty#105]
Keys [1]: [web_site_id#94]
Functions [3]: [sum(UnscaledValue(ws_ext_sales_price#85)), sum(coalesce(cast(wr_return_amt#89 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(ws_net_profit#86 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#90 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_sales_price#85))#107, sum(coalesce(cast(wr_return_amt#89 as decimal(12,2)), 0.00))#108, sum(CheckOverflow((promote_precision(cast(ws_net_profit#86 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#90 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#109]
Results [5]: [MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#85))#107,17,2) AS sales#110, sum(coalesce(cast(wr_return_amt#89 as decimal(12,2)), 0.00))#108 AS returns#111, sum(CheckOverflow((promote_precision(cast(ws_net_profit#86 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#90 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#109 AS profit#112, web channel AS channel#113, concat(web_site, web_site_id#94) AS id#114]

(97) Union

(98) Expand [codegen id : 22]
Input [5]: [sales#40, returns#41, profit#42, channel#43, id#44]
Arguments: [List(sales#40, returns#41, profit#42, channel#43, id#44, 0), List(sales#40, returns#41, profit#42, channel#43, null, 1), List(sales#40, returns#41, profit#42, null, null, 3)], [sales#40, returns#41, profit#42, channel#115, id#116, spark_grouping_id#117]

(99) HashAggregate [codegen id : 22]
Input [6]: [sales#40, returns#41, profit#42, channel#115, id#116, spark_grouping_id#117]
Keys [3]: [channel#115, id#116, spark_grouping_id#117]
Functions [3]: [partial_sum(sales#40), partial_sum(returns#41), partial_sum(profit#42)]
Aggregate Attributes [6]: [sum#118, isEmpty#119, sum#120, isEmpty#121, sum#122, isEmpty#123]
Results [9]: [channel#115, id#116, spark_grouping_id#117, sum#124, isEmpty#125, sum#126, isEmpty#127, sum#128, isEmpty#129]

(100) Exchange
Input [9]: [channel#115, id#116, spark_grouping_id#117, sum#124, isEmpty#125, sum#126, isEmpty#127, sum#128, isEmpty#129]
Arguments: hashpartitioning(channel#115, id#116, spark_grouping_id#117, 5), ENSURE_REQUIREMENTS, [id=#130]

(101) HashAggregate [codegen id : 23]
Input [9]: [channel#115, id#116, spark_grouping_id#117, sum#124, isEmpty#125, sum#126, isEmpty#127, sum#128, isEmpty#129]
Keys [3]: [channel#115, id#116, spark_grouping_id#117]
Functions [3]: [sum(sales#40), sum(returns#41), sum(profit#42)]
Aggregate Attributes [3]: [sum(sales#40)#131, sum(returns#41)#132, sum(profit#42)#133]
Results [5]: [channel#115, id#116, sum(sales#40)#131 AS sales#134, sum(returns#41)#132 AS returns#135, sum(profit#42)#133 AS profit#136]

(102) TakeOrderedAndProject
Input [5]: [channel#115, id#116, sales#134, returns#135, profit#136]
Arguments: 100, [channel#115 ASC NULLS FIRST, id#116 ASC NULLS FIRST], [channel#115, id#116, sales#134, returns#135, profit#136]

