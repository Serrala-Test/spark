== Physical Plan ==
TakeOrderedAndProject (116)
+- * HashAggregate (115)
   +- Exchange (114)
      +- * HashAggregate (113)
         +- * Expand (112)
            +- Union (111)
               :- * HashAggregate (42)
               :  +- Exchange (41)
               :     +- * HashAggregate (40)
               :        +- * Project (39)
               :           +- * BroadcastHashJoin Inner BuildRight (38)
               :              :- * Project (32)
               :              :  +- * BroadcastHashJoin Inner BuildRight (31)
               :              :     :- * Project (25)
               :              :     :  +- * BroadcastHashJoin Inner BuildRight (24)
               :              :     :     :- * Project (19)
               :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (18)
               :              :     :     :     :- * Project (16)
               :              :     :     :     :  +- * SortMergeJoin LeftOuter (15)
               :              :     :     :     :     :- * Sort (5)
               :              :     :     :     :     :  +- Exchange (4)
               :              :     :     :     :     :     +- * Filter (3)
               :              :     :     :     :     :        +- * ColumnarToRow (2)
               :              :     :     :     :     :           +- Scan parquet default.store_sales (1)
               :              :     :     :     :     +- * Sort (14)
               :              :     :     :     :        +- Exchange (13)
               :              :     :     :     :           +- * BroadcastHashJoin LeftSemi BuildRight (12)
               :              :     :     :     :              :- * Project (9)
               :              :     :     :     :              :  +- * Filter (8)
               :              :     :     :     :              :     +- * ColumnarToRow (7)
               :              :     :     :     :              :        +- Scan parquet default.store_returns (6)
               :              :     :     :     :              +- BroadcastExchange (11)
               :              :     :     :     :                 +- ReusedExchange (10)
               :              :     :     :     +- ReusedExchange (17)
               :              :     :     +- BroadcastExchange (23)
               :              :     :        +- * Filter (22)
               :              :     :           +- * ColumnarToRow (21)
               :              :     :              +- Scan parquet default.store (20)
               :              :     +- BroadcastExchange (30)
               :              :        +- * Project (29)
               :              :           +- * Filter (28)
               :              :              +- * ColumnarToRow (27)
               :              :                 +- Scan parquet default.item (26)
               :              +- BroadcastExchange (37)
               :                 +- * Project (36)
               :                    +- * Filter (35)
               :                       +- * ColumnarToRow (34)
               :                          +- Scan parquet default.promotion (33)
               :- * HashAggregate (76)
               :  +- Exchange (75)
               :     +- * HashAggregate (74)
               :        +- * Project (73)
               :           +- * BroadcastHashJoin Inner BuildRight (72)
               :              :- * Project (70)
               :              :  +- * BroadcastHashJoin Inner BuildRight (69)
               :              :     :- * Project (67)
               :              :     :  +- * BroadcastHashJoin Inner BuildRight (66)
               :              :     :     :- * Project (61)
               :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (60)
               :              :     :     :     :- * Project (58)
               :              :     :     :     :  +- * SortMergeJoin LeftOuter (57)
               :              :     :     :     :     :- * Sort (47)
               :              :     :     :     :     :  +- Exchange (46)
               :              :     :     :     :     :     +- * Filter (45)
               :              :     :     :     :     :        +- * ColumnarToRow (44)
               :              :     :     :     :     :           +- Scan parquet default.catalog_sales (43)
               :              :     :     :     :     +- * Sort (56)
               :              :     :     :     :        +- Exchange (55)
               :              :     :     :     :           +- * BroadcastHashJoin LeftSemi BuildRight (54)
               :              :     :     :     :              :- * Project (51)
               :              :     :     :     :              :  +- * Filter (50)
               :              :     :     :     :              :     +- * ColumnarToRow (49)
               :              :     :     :     :              :        +- Scan parquet default.catalog_returns (48)
               :              :     :     :     :              +- BroadcastExchange (53)
               :              :     :     :     :                 +- ReusedExchange (52)
               :              :     :     :     +- ReusedExchange (59)
               :              :     :     +- BroadcastExchange (65)
               :              :     :        +- * Filter (64)
               :              :     :           +- * ColumnarToRow (63)
               :              :     :              +- Scan parquet default.catalog_page (62)
               :              :     +- ReusedExchange (68)
               :              +- ReusedExchange (71)
               +- * HashAggregate (110)
                  +- Exchange (109)
                     +- * HashAggregate (108)
                        +- * Project (107)
                           +- * BroadcastHashJoin Inner BuildRight (106)
                              :- * Project (104)
                              :  +- * BroadcastHashJoin Inner BuildRight (103)
                              :     :- * Project (101)
                              :     :  +- * BroadcastHashJoin Inner BuildRight (100)
                              :     :     :- * Project (95)
                              :     :     :  +- * BroadcastHashJoin Inner BuildRight (94)
                              :     :     :     :- * Project (92)
                              :     :     :     :  +- * SortMergeJoin LeftOuter (91)
                              :     :     :     :     :- * Sort (81)
                              :     :     :     :     :  +- Exchange (80)
                              :     :     :     :     :     +- * Filter (79)
                              :     :     :     :     :        +- * ColumnarToRow (78)
                              :     :     :     :     :           +- Scan parquet default.web_sales (77)
                              :     :     :     :     +- * Sort (90)
                              :     :     :     :        +- Exchange (89)
                              :     :     :     :           +- * BroadcastHashJoin LeftSemi BuildRight (88)
                              :     :     :     :              :- * Project (85)
                              :     :     :     :              :  +- * Filter (84)
                              :     :     :     :              :     +- * ColumnarToRow (83)
                              :     :     :     :              :        +- Scan parquet default.web_returns (82)
                              :     :     :     :              +- BroadcastExchange (87)
                              :     :     :     :                 +- ReusedExchange (86)
                              :     :     :     +- ReusedExchange (93)
                              :     :     +- BroadcastExchange (99)
                              :     :        +- * Filter (98)
                              :     :           +- * ColumnarToRow (97)
                              :     :              +- Scan parquet default.web_site (96)
                              :     +- ReusedExchange (102)
                              +- ReusedExchange (105)


(1) Scan parquet default.store_sales
Output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]

(3) Filter [codegen id : 1]
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Condition : ((isnotnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_promo_sk#3))

(4) Exchange
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: hashpartitioning(ss_item_sk#1, ss_ticket_number#4, 5), ENSURE_REQUIREMENTS, [id=#9]

(5) Sort [codegen id : 2]
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: [ss_item_sk#1 ASC NULLS FIRST, ss_ticket_number#4 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_returns
Output [5]: [sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13, sr_returned_date_sk#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(7) ColumnarToRow [codegen id : 4]
Input [5]: [sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13, sr_returned_date_sk#14]

(8) Filter [codegen id : 4]
Input [5]: [sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13, sr_returned_date_sk#14]
Condition : (isnotnull(sr_item_sk#10) AND isnotnull(sr_ticket_number#11))

(9) Project [codegen id : 4]
Output [4]: [sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13]
Input [5]: [sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13, sr_returned_date_sk#14]

(10) ReusedExchange [Reuses operator id: 4]
Output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]

(11) BroadcastExchange
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[0, int, false] as bigint), 32) | (cast(input[3, int, true] as bigint) & 4294967295))),false), [id=#15]

(12) BroadcastHashJoin [codegen id : 4]
Left keys [2]: [sr_item_sk#10, sr_ticket_number#11]
Right keys [2]: [ss_item_sk#1, ss_ticket_number#4]
Join condition: None

(13) Exchange
Input [4]: [sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13]
Arguments: hashpartitioning(sr_item_sk#10, sr_ticket_number#11, 5), ENSURE_REQUIREMENTS, [id=#16]

(14) Sort [codegen id : 5]
Input [4]: [sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13]
Arguments: [sr_item_sk#10 ASC NULLS FIRST, sr_ticket_number#11 ASC NULLS FIRST], false, 0

(15) SortMergeJoin [codegen id : 10]
Left keys [2]: [ss_item_sk#1, ss_ticket_number#4]
Right keys [2]: [sr_item_sk#10, sr_ticket_number#11]
Join condition: None

(16) Project [codegen id : 10]
Output [8]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#12, sr_net_loss#13]
Input [11]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_item_sk#10, sr_ticket_number#11, sr_return_amt#12, sr_net_loss#13]

(17) ReusedExchange [Reuses operator id: 121]
Output [1]: [d_date_sk#17]

(18) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#17]
Join condition: None

(19) Project [codegen id : 10]
Output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#12, sr_net_loss#13]
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#12, sr_net_loss#13, d_date_sk#17]

(20) Scan parquet default.store
Output [2]: [s_store_sk#18, s_store_id#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(21) ColumnarToRow [codegen id : 7]
Input [2]: [s_store_sk#18, s_store_id#19]

(22) Filter [codegen id : 7]
Input [2]: [s_store_sk#18, s_store_id#19]
Condition : isnotnull(s_store_sk#18)

(23) BroadcastExchange
Input [2]: [s_store_sk#18, s_store_id#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#20]

(24) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#18]
Join condition: None

(25) Project [codegen id : 10]
Output [7]: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#12, sr_net_loss#13, s_store_id#19]
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#12, sr_net_loss#13, s_store_sk#18, s_store_id#19]

(26) Scan parquet default.item
Output [2]: [i_item_sk#21, i_current_price#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>

(27) ColumnarToRow [codegen id : 8]
Input [2]: [i_item_sk#21, i_current_price#22]

(28) Filter [codegen id : 8]
Input [2]: [i_item_sk#21, i_current_price#22]
Condition : ((isnotnull(i_current_price#22) AND (i_current_price#22 > 50.00)) AND isnotnull(i_item_sk#21))

(29) Project [codegen id : 8]
Output [1]: [i_item_sk#21]
Input [2]: [i_item_sk#21, i_current_price#22]

(30) BroadcastExchange
Input [1]: [i_item_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#23]

(31) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#21]
Join condition: None

(32) Project [codegen id : 10]
Output [6]: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#12, sr_net_loss#13, s_store_id#19]
Input [8]: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#12, sr_net_loss#13, s_store_id#19, i_item_sk#21]

(33) Scan parquet default.promotion
Output [2]: [p_promo_sk#24, p_channel_tv#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_channel_tv), EqualTo(p_channel_tv,N), IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>

(34) ColumnarToRow [codegen id : 9]
Input [2]: [p_promo_sk#24, p_channel_tv#25]

(35) Filter [codegen id : 9]
Input [2]: [p_promo_sk#24, p_channel_tv#25]
Condition : ((isnotnull(p_channel_tv#25) AND (p_channel_tv#25 = N)) AND isnotnull(p_promo_sk#24))

(36) Project [codegen id : 9]
Output [1]: [p_promo_sk#24]
Input [2]: [p_promo_sk#24, p_channel_tv#25]

(37) BroadcastExchange
Input [1]: [p_promo_sk#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#26]

(38) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_promo_sk#3]
Right keys [1]: [p_promo_sk#24]
Join condition: None

(39) Project [codegen id : 10]
Output [5]: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#12, sr_net_loss#13, s_store_id#19]
Input [7]: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#12, sr_net_loss#13, s_store_id#19, p_promo_sk#24]

(40) HashAggregate [codegen id : 10]
Input [5]: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#12, sr_net_loss#13, s_store_id#19]
Keys [1]: [s_store_id#19]
Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#5)), partial_sum(coalesce(cast(sr_return_amt#12 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(ss_net_profit#6 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#13 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [5]: [sum#27, sum#28, isEmpty#29, sum#30, isEmpty#31]
Results [6]: [s_store_id#19, sum#32, sum#33, isEmpty#34, sum#35, isEmpty#36]

(41) Exchange
Input [6]: [s_store_id#19, sum#32, sum#33, isEmpty#34, sum#35, isEmpty#36]
Arguments: hashpartitioning(s_store_id#19, 5), ENSURE_REQUIREMENTS, [id=#37]

(42) HashAggregate [codegen id : 11]
Input [6]: [s_store_id#19, sum#32, sum#33, isEmpty#34, sum#35, isEmpty#36]
Keys [1]: [s_store_id#19]
Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#5)), sum(coalesce(cast(sr_return_amt#12 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(ss_net_profit#6 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#13 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_ext_sales_price#5))#38, sum(coalesce(cast(sr_return_amt#12 as decimal(12,2)), 0.00))#39, sum(CheckOverflow((promote_precision(cast(ss_net_profit#6 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#13 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#40]
Results [5]: [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#5))#38,17,2) AS sales#41, sum(coalesce(cast(sr_return_amt#12 as decimal(12,2)), 0.00))#39 AS returns#42, sum(CheckOverflow((promote_precision(cast(ss_net_profit#6 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#13 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#40 AS profit#43, store channel AS channel#44, concat(store, s_store_id#19) AS id#45]

(43) Scan parquet default.catalog_sales
Output [7]: [cs_catalog_page_sk#46, cs_item_sk#47, cs_promo_sk#48, cs_order_number#49, cs_ext_sales_price#50, cs_net_profit#51, cs_sold_date_sk#52]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#52), dynamicpruningexpression(cs_sold_date_sk#52 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(cs_catalog_page_sk), IsNotNull(cs_item_sk), IsNotNull(cs_promo_sk)]
ReadSchema: struct<cs_catalog_page_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(44) ColumnarToRow [codegen id : 12]
Input [7]: [cs_catalog_page_sk#46, cs_item_sk#47, cs_promo_sk#48, cs_order_number#49, cs_ext_sales_price#50, cs_net_profit#51, cs_sold_date_sk#52]

(45) Filter [codegen id : 12]
Input [7]: [cs_catalog_page_sk#46, cs_item_sk#47, cs_promo_sk#48, cs_order_number#49, cs_ext_sales_price#50, cs_net_profit#51, cs_sold_date_sk#52]
Condition : ((isnotnull(cs_catalog_page_sk#46) AND isnotnull(cs_item_sk#47)) AND isnotnull(cs_promo_sk#48))

(46) Exchange
Input [7]: [cs_catalog_page_sk#46, cs_item_sk#47, cs_promo_sk#48, cs_order_number#49, cs_ext_sales_price#50, cs_net_profit#51, cs_sold_date_sk#52]
Arguments: hashpartitioning(cs_item_sk#47, cs_order_number#49, 5), ENSURE_REQUIREMENTS, [id=#53]

(47) Sort [codegen id : 13]
Input [7]: [cs_catalog_page_sk#46, cs_item_sk#47, cs_promo_sk#48, cs_order_number#49, cs_ext_sales_price#50, cs_net_profit#51, cs_sold_date_sk#52]
Arguments: [cs_item_sk#47 ASC NULLS FIRST, cs_order_number#49 ASC NULLS FIRST], false, 0

(48) Scan parquet default.catalog_returns
Output [5]: [cr_item_sk#54, cr_order_number#55, cr_return_amount#56, cr_net_loss#57, cr_returned_date_sk#58]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(49) ColumnarToRow [codegen id : 15]
Input [5]: [cr_item_sk#54, cr_order_number#55, cr_return_amount#56, cr_net_loss#57, cr_returned_date_sk#58]

(50) Filter [codegen id : 15]
Input [5]: [cr_item_sk#54, cr_order_number#55, cr_return_amount#56, cr_net_loss#57, cr_returned_date_sk#58]
Condition : (isnotnull(cr_item_sk#54) AND isnotnull(cr_order_number#55))

(51) Project [codegen id : 15]
Output [4]: [cr_item_sk#54, cr_order_number#55, cr_return_amount#56, cr_net_loss#57]
Input [5]: [cr_item_sk#54, cr_order_number#55, cr_return_amount#56, cr_net_loss#57, cr_returned_date_sk#58]

(52) ReusedExchange [Reuses operator id: 46]
Output [7]: [cs_catalog_page_sk#46, cs_item_sk#47, cs_promo_sk#48, cs_order_number#49, cs_ext_sales_price#50, cs_net_profit#51, cs_sold_date_sk#52]

(53) BroadcastExchange
Input [7]: [cs_catalog_page_sk#46, cs_item_sk#47, cs_promo_sk#48, cs_order_number#49, cs_ext_sales_price#50, cs_net_profit#51, cs_sold_date_sk#52]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, false] as bigint), 32) | (cast(input[3, int, true] as bigint) & 4294967295))),false), [id=#59]

(54) BroadcastHashJoin [codegen id : 15]
Left keys [2]: [cr_item_sk#54, cr_order_number#55]
Right keys [2]: [cs_item_sk#47, cs_order_number#49]
Join condition: None

(55) Exchange
Input [4]: [cr_item_sk#54, cr_order_number#55, cr_return_amount#56, cr_net_loss#57]
Arguments: hashpartitioning(cr_item_sk#54, cr_order_number#55, 5), ENSURE_REQUIREMENTS, [id=#60]

(56) Sort [codegen id : 16]
Input [4]: [cr_item_sk#54, cr_order_number#55, cr_return_amount#56, cr_net_loss#57]
Arguments: [cr_item_sk#54 ASC NULLS FIRST, cr_order_number#55 ASC NULLS FIRST], false, 0

(57) SortMergeJoin [codegen id : 21]
Left keys [2]: [cs_item_sk#47, cs_order_number#49]
Right keys [2]: [cr_item_sk#54, cr_order_number#55]
Join condition: None

(58) Project [codegen id : 21]
Output [8]: [cs_catalog_page_sk#46, cs_item_sk#47, cs_promo_sk#48, cs_ext_sales_price#50, cs_net_profit#51, cs_sold_date_sk#52, cr_return_amount#56, cr_net_loss#57]
Input [11]: [cs_catalog_page_sk#46, cs_item_sk#47, cs_promo_sk#48, cs_order_number#49, cs_ext_sales_price#50, cs_net_profit#51, cs_sold_date_sk#52, cr_item_sk#54, cr_order_number#55, cr_return_amount#56, cr_net_loss#57]

(59) ReusedExchange [Reuses operator id: 121]
Output [1]: [d_date_sk#61]

(60) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [cs_sold_date_sk#52]
Right keys [1]: [d_date_sk#61]
Join condition: None

(61) Project [codegen id : 21]
Output [7]: [cs_catalog_page_sk#46, cs_item_sk#47, cs_promo_sk#48, cs_ext_sales_price#50, cs_net_profit#51, cr_return_amount#56, cr_net_loss#57]
Input [9]: [cs_catalog_page_sk#46, cs_item_sk#47, cs_promo_sk#48, cs_ext_sales_price#50, cs_net_profit#51, cs_sold_date_sk#52, cr_return_amount#56, cr_net_loss#57, d_date_sk#61]

(62) Scan parquet default.catalog_page
Output [2]: [cp_catalog_page_sk#62, cp_catalog_page_id#63]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>

(63) ColumnarToRow [codegen id : 18]
Input [2]: [cp_catalog_page_sk#62, cp_catalog_page_id#63]

(64) Filter [codegen id : 18]
Input [2]: [cp_catalog_page_sk#62, cp_catalog_page_id#63]
Condition : isnotnull(cp_catalog_page_sk#62)

(65) BroadcastExchange
Input [2]: [cp_catalog_page_sk#62, cp_catalog_page_id#63]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#64]

(66) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [cs_catalog_page_sk#46]
Right keys [1]: [cp_catalog_page_sk#62]
Join condition: None

(67) Project [codegen id : 21]
Output [7]: [cs_item_sk#47, cs_promo_sk#48, cs_ext_sales_price#50, cs_net_profit#51, cr_return_amount#56, cr_net_loss#57, cp_catalog_page_id#63]
Input [9]: [cs_catalog_page_sk#46, cs_item_sk#47, cs_promo_sk#48, cs_ext_sales_price#50, cs_net_profit#51, cr_return_amount#56, cr_net_loss#57, cp_catalog_page_sk#62, cp_catalog_page_id#63]

(68) ReusedExchange [Reuses operator id: 30]
Output [1]: [i_item_sk#65]

(69) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [cs_item_sk#47]
Right keys [1]: [i_item_sk#65]
Join condition: None

(70) Project [codegen id : 21]
Output [6]: [cs_promo_sk#48, cs_ext_sales_price#50, cs_net_profit#51, cr_return_amount#56, cr_net_loss#57, cp_catalog_page_id#63]
Input [8]: [cs_item_sk#47, cs_promo_sk#48, cs_ext_sales_price#50, cs_net_profit#51, cr_return_amount#56, cr_net_loss#57, cp_catalog_page_id#63, i_item_sk#65]

(71) ReusedExchange [Reuses operator id: 37]
Output [1]: [p_promo_sk#66]

(72) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [cs_promo_sk#48]
Right keys [1]: [p_promo_sk#66]
Join condition: None

(73) Project [codegen id : 21]
Output [5]: [cs_ext_sales_price#50, cs_net_profit#51, cr_return_amount#56, cr_net_loss#57, cp_catalog_page_id#63]
Input [7]: [cs_promo_sk#48, cs_ext_sales_price#50, cs_net_profit#51, cr_return_amount#56, cr_net_loss#57, cp_catalog_page_id#63, p_promo_sk#66]

(74) HashAggregate [codegen id : 21]
Input [5]: [cs_ext_sales_price#50, cs_net_profit#51, cr_return_amount#56, cr_net_loss#57, cp_catalog_page_id#63]
Keys [1]: [cp_catalog_page_id#63]
Functions [3]: [partial_sum(UnscaledValue(cs_ext_sales_price#50)), partial_sum(coalesce(cast(cr_return_amount#56 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(cs_net_profit#51 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#57 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [5]: [sum#67, sum#68, isEmpty#69, sum#70, isEmpty#71]
Results [6]: [cp_catalog_page_id#63, sum#72, sum#73, isEmpty#74, sum#75, isEmpty#76]

(75) Exchange
Input [6]: [cp_catalog_page_id#63, sum#72, sum#73, isEmpty#74, sum#75, isEmpty#76]
Arguments: hashpartitioning(cp_catalog_page_id#63, 5), ENSURE_REQUIREMENTS, [id=#77]

(76) HashAggregate [codegen id : 22]
Input [6]: [cp_catalog_page_id#63, sum#72, sum#73, isEmpty#74, sum#75, isEmpty#76]
Keys [1]: [cp_catalog_page_id#63]
Functions [3]: [sum(UnscaledValue(cs_ext_sales_price#50)), sum(coalesce(cast(cr_return_amount#56 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(cs_net_profit#51 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#57 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_sales_price#50))#78, sum(coalesce(cast(cr_return_amount#56 as decimal(12,2)), 0.00))#79, sum(CheckOverflow((promote_precision(cast(cs_net_profit#51 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#57 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#80]
Results [5]: [MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#50))#78,17,2) AS sales#81, sum(coalesce(cast(cr_return_amount#56 as decimal(12,2)), 0.00))#79 AS returns#82, sum(CheckOverflow((promote_precision(cast(cs_net_profit#51 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#57 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#80 AS profit#83, catalog channel AS channel#84, concat(catalog_page, cp_catalog_page_id#63) AS id#85]

(77) Scan parquet default.web_sales
Output [7]: [ws_item_sk#86, ws_web_site_sk#87, ws_promo_sk#88, ws_order_number#89, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#92), dynamicpruningexpression(ws_sold_date_sk#92 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ws_web_site_sk), IsNotNull(ws_item_sk), IsNotNull(ws_promo_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_promo_sk:int,ws_order_number:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(78) ColumnarToRow [codegen id : 23]
Input [7]: [ws_item_sk#86, ws_web_site_sk#87, ws_promo_sk#88, ws_order_number#89, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92]

(79) Filter [codegen id : 23]
Input [7]: [ws_item_sk#86, ws_web_site_sk#87, ws_promo_sk#88, ws_order_number#89, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92]
Condition : ((isnotnull(ws_web_site_sk#87) AND isnotnull(ws_item_sk#86)) AND isnotnull(ws_promo_sk#88))

(80) Exchange
Input [7]: [ws_item_sk#86, ws_web_site_sk#87, ws_promo_sk#88, ws_order_number#89, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92]
Arguments: hashpartitioning(ws_item_sk#86, ws_order_number#89, 5), ENSURE_REQUIREMENTS, [id=#93]

(81) Sort [codegen id : 24]
Input [7]: [ws_item_sk#86, ws_web_site_sk#87, ws_promo_sk#88, ws_order_number#89, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92]
Arguments: [ws_item_sk#86 ASC NULLS FIRST, ws_order_number#89 ASC NULLS FIRST], false, 0

(82) Scan parquet default.web_returns
Output [5]: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97, wr_returned_date_sk#98]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(83) ColumnarToRow [codegen id : 26]
Input [5]: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97, wr_returned_date_sk#98]

(84) Filter [codegen id : 26]
Input [5]: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97, wr_returned_date_sk#98]
Condition : (isnotnull(wr_item_sk#94) AND isnotnull(wr_order_number#95))

(85) Project [codegen id : 26]
Output [4]: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97]
Input [5]: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97, wr_returned_date_sk#98]

(86) ReusedExchange [Reuses operator id: 80]
Output [7]: [ws_item_sk#86, ws_web_site_sk#87, ws_promo_sk#88, ws_order_number#89, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92]

(87) BroadcastExchange
Input [7]: [ws_item_sk#86, ws_web_site_sk#87, ws_promo_sk#88, ws_order_number#89, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[0, int, false] as bigint), 32) | (cast(input[3, int, true] as bigint) & 4294967295))),false), [id=#99]

(88) BroadcastHashJoin [codegen id : 26]
Left keys [2]: [wr_item_sk#94, wr_order_number#95]
Right keys [2]: [ws_item_sk#86, ws_order_number#89]
Join condition: None

(89) Exchange
Input [4]: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97]
Arguments: hashpartitioning(wr_item_sk#94, wr_order_number#95, 5), ENSURE_REQUIREMENTS, [id=#100]

(90) Sort [codegen id : 27]
Input [4]: [wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97]
Arguments: [wr_item_sk#94 ASC NULLS FIRST, wr_order_number#95 ASC NULLS FIRST], false, 0

(91) SortMergeJoin [codegen id : 32]
Left keys [2]: [ws_item_sk#86, ws_order_number#89]
Right keys [2]: [wr_item_sk#94, wr_order_number#95]
Join condition: None

(92) Project [codegen id : 32]
Output [8]: [ws_item_sk#86, ws_web_site_sk#87, ws_promo_sk#88, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92, wr_return_amt#96, wr_net_loss#97]
Input [11]: [ws_item_sk#86, ws_web_site_sk#87, ws_promo_sk#88, ws_order_number#89, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92, wr_item_sk#94, wr_order_number#95, wr_return_amt#96, wr_net_loss#97]

(93) ReusedExchange [Reuses operator id: 121]
Output [1]: [d_date_sk#101]

(94) BroadcastHashJoin [codegen id : 32]
Left keys [1]: [ws_sold_date_sk#92]
Right keys [1]: [d_date_sk#101]
Join condition: None

(95) Project [codegen id : 32]
Output [7]: [ws_item_sk#86, ws_web_site_sk#87, ws_promo_sk#88, ws_ext_sales_price#90, ws_net_profit#91, wr_return_amt#96, wr_net_loss#97]
Input [9]: [ws_item_sk#86, ws_web_site_sk#87, ws_promo_sk#88, ws_ext_sales_price#90, ws_net_profit#91, ws_sold_date_sk#92, wr_return_amt#96, wr_net_loss#97, d_date_sk#101]

(96) Scan parquet default.web_site
Output [2]: [web_site_sk#102, web_site_id#103]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string>

(97) ColumnarToRow [codegen id : 29]
Input [2]: [web_site_sk#102, web_site_id#103]

(98) Filter [codegen id : 29]
Input [2]: [web_site_sk#102, web_site_id#103]
Condition : isnotnull(web_site_sk#102)

(99) BroadcastExchange
Input [2]: [web_site_sk#102, web_site_id#103]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#104]

(100) BroadcastHashJoin [codegen id : 32]
Left keys [1]: [ws_web_site_sk#87]
Right keys [1]: [web_site_sk#102]
Join condition: None

(101) Project [codegen id : 32]
Output [7]: [ws_item_sk#86, ws_promo_sk#88, ws_ext_sales_price#90, ws_net_profit#91, wr_return_amt#96, wr_net_loss#97, web_site_id#103]
Input [9]: [ws_item_sk#86, ws_web_site_sk#87, ws_promo_sk#88, ws_ext_sales_price#90, ws_net_profit#91, wr_return_amt#96, wr_net_loss#97, web_site_sk#102, web_site_id#103]

(102) ReusedExchange [Reuses operator id: 30]
Output [1]: [i_item_sk#105]

(103) BroadcastHashJoin [codegen id : 32]
Left keys [1]: [ws_item_sk#86]
Right keys [1]: [i_item_sk#105]
Join condition: None

(104) Project [codegen id : 32]
Output [6]: [ws_promo_sk#88, ws_ext_sales_price#90, ws_net_profit#91, wr_return_amt#96, wr_net_loss#97, web_site_id#103]
Input [8]: [ws_item_sk#86, ws_promo_sk#88, ws_ext_sales_price#90, ws_net_profit#91, wr_return_amt#96, wr_net_loss#97, web_site_id#103, i_item_sk#105]

(105) ReusedExchange [Reuses operator id: 37]
Output [1]: [p_promo_sk#106]

(106) BroadcastHashJoin [codegen id : 32]
Left keys [1]: [ws_promo_sk#88]
Right keys [1]: [p_promo_sk#106]
Join condition: None

(107) Project [codegen id : 32]
Output [5]: [ws_ext_sales_price#90, ws_net_profit#91, wr_return_amt#96, wr_net_loss#97, web_site_id#103]
Input [7]: [ws_promo_sk#88, ws_ext_sales_price#90, ws_net_profit#91, wr_return_amt#96, wr_net_loss#97, web_site_id#103, p_promo_sk#106]

(108) HashAggregate [codegen id : 32]
Input [5]: [ws_ext_sales_price#90, ws_net_profit#91, wr_return_amt#96, wr_net_loss#97, web_site_id#103]
Keys [1]: [web_site_id#103]
Functions [3]: [partial_sum(UnscaledValue(ws_ext_sales_price#90)), partial_sum(coalesce(cast(wr_return_amt#96 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(ws_net_profit#91 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#97 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [5]: [sum#107, sum#108, isEmpty#109, sum#110, isEmpty#111]
Results [6]: [web_site_id#103, sum#112, sum#113, isEmpty#114, sum#115, isEmpty#116]

(109) Exchange
Input [6]: [web_site_id#103, sum#112, sum#113, isEmpty#114, sum#115, isEmpty#116]
Arguments: hashpartitioning(web_site_id#103, 5), ENSURE_REQUIREMENTS, [id=#117]

(110) HashAggregate [codegen id : 33]
Input [6]: [web_site_id#103, sum#112, sum#113, isEmpty#114, sum#115, isEmpty#116]
Keys [1]: [web_site_id#103]
Functions [3]: [sum(UnscaledValue(ws_ext_sales_price#90)), sum(coalesce(cast(wr_return_amt#96 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(ws_net_profit#91 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#97 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_sales_price#90))#118, sum(coalesce(cast(wr_return_amt#96 as decimal(12,2)), 0.00))#119, sum(CheckOverflow((promote_precision(cast(ws_net_profit#91 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#97 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#120]
Results [5]: [MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#90))#118,17,2) AS sales#121, sum(coalesce(cast(wr_return_amt#96 as decimal(12,2)), 0.00))#119 AS returns#122, sum(CheckOverflow((promote_precision(cast(ws_net_profit#91 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#97 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))#120 AS profit#123, web channel AS channel#124, concat(web_site, web_site_id#103) AS id#125]

(111) Union

(112) Expand [codegen id : 34]
Input [5]: [sales#41, returns#42, profit#43, channel#44, id#45]
Arguments: [[sales#41, returns#42, profit#43, channel#44, id#45, 0], [sales#41, returns#42, profit#43, channel#44, null, 1], [sales#41, returns#42, profit#43, null, null, 3]], [sales#41, returns#42, profit#43, channel#126, id#127, spark_grouping_id#128]

(113) HashAggregate [codegen id : 34]
Input [6]: [sales#41, returns#42, profit#43, channel#126, id#127, spark_grouping_id#128]
Keys [3]: [channel#126, id#127, spark_grouping_id#128]
Functions [3]: [partial_sum(sales#41), partial_sum(returns#42), partial_sum(profit#43)]
Aggregate Attributes [6]: [sum#129, isEmpty#130, sum#131, isEmpty#132, sum#133, isEmpty#134]
Results [9]: [channel#126, id#127, spark_grouping_id#128, sum#135, isEmpty#136, sum#137, isEmpty#138, sum#139, isEmpty#140]

(114) Exchange
Input [9]: [channel#126, id#127, spark_grouping_id#128, sum#135, isEmpty#136, sum#137, isEmpty#138, sum#139, isEmpty#140]
Arguments: hashpartitioning(channel#126, id#127, spark_grouping_id#128, 5), ENSURE_REQUIREMENTS, [id=#141]

(115) HashAggregate [codegen id : 35]
Input [9]: [channel#126, id#127, spark_grouping_id#128, sum#135, isEmpty#136, sum#137, isEmpty#138, sum#139, isEmpty#140]
Keys [3]: [channel#126, id#127, spark_grouping_id#128]
Functions [3]: [sum(sales#41), sum(returns#42), sum(profit#43)]
Aggregate Attributes [3]: [sum(sales#41)#142, sum(returns#42)#143, sum(profit#43)#144]
Results [5]: [channel#126, id#127, sum(sales#41)#142 AS sales#145, sum(returns#42)#143 AS returns#146, sum(profit#43)#144 AS profit#147]

(116) TakeOrderedAndProject
Input [5]: [channel#126, id#127, sales#145, returns#146, profit#147]
Arguments: 100, [channel#126 ASC NULLS FIRST, id#127 ASC NULLS FIRST], [channel#126, id#127, sales#145, returns#146, profit#147]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (121)
+- * Project (120)
   +- * Filter (119)
      +- * ColumnarToRow (118)
         +- Scan parquet default.date_dim (117)


(117) Scan parquet default.date_dim
Output [2]: [d_date_sk#17, d_date#148]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-08-23), LessThanOrEqual(d_date,2000-09-22), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(118) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#17, d_date#148]

(119) Filter [codegen id : 1]
Input [2]: [d_date_sk#17, d_date#148]
Condition : (((isnotnull(d_date#148) AND (d_date#148 >= 2000-08-23)) AND (d_date#148 <= 2000-09-22)) AND isnotnull(d_date_sk#17))

(120) Project [codegen id : 1]
Output [1]: [d_date_sk#17]
Input [2]: [d_date_sk#17, d_date#148]

(121) BroadcastExchange
Input [1]: [d_date_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#149]

Subquery:2 Hosting operator id = 43 Hosting Expression = cs_sold_date_sk#52 IN dynamicpruning#8

Subquery:3 Hosting operator id = 77 Hosting Expression = ws_sold_date_sk#92 IN dynamicpruning#8


