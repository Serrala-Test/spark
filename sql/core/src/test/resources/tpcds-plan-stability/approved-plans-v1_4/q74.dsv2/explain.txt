== Physical Plan ==
TakeOrderedAndProject (73)
+- * Project (72)
   +- * SortMergeJoin Inner (71)
      :- * Project (56)
      :  +- * SortMergeJoin Inner (55)
      :     :- * SortMergeJoin Inner (39)
      :     :  :- * Sort (21)
      :     :  :  +- Exchange (20)
      :     :  :     +- * Filter (19)
      :     :  :        +- * HashAggregate (18)
      :     :  :           +- Exchange (17)
      :     :  :              +- * HashAggregate (16)
      :     :  :                 +- * Project (15)
      :     :  :                    +- * BroadcastHashJoin Inner BuildRight (14)
      :     :  :                       :- * Project (9)
      :     :  :                       :  +- * BroadcastHashJoin Inner BuildLeft (8)
      :     :  :                       :     :- BroadcastExchange (4)
      :     :  :                       :     :  +- * Project (3)
      :     :  :                       :     :     +- * Filter (2)
      :     :  :                       :     :        +- BatchScan default.customer (1)
      :     :  :                       :     +- * Project (7)
      :     :  :                       :        +- * Filter (6)
      :     :  :                       :           +- BatchScan default.store_sales (5)
      :     :  :                       +- BroadcastExchange (13)
      :     :  :                          +- * Project (12)
      :     :  :                             +- * Filter (11)
      :     :  :                                +- BatchScan default.date_dim (10)
      :     :  +- * Sort (38)
      :     :     +- Exchange (37)
      :     :        +- * HashAggregate (36)
      :     :           +- Exchange (35)
      :     :              +- * HashAggregate (34)
      :     :                 +- * Project (33)
      :     :                    +- * BroadcastHashJoin Inner BuildRight (32)
      :     :                       :- * Project (27)
      :     :                       :  +- * BroadcastHashJoin Inner BuildLeft (26)
      :     :                       :     :- ReusedExchange (22)
      :     :                       :     +- * Project (25)
      :     :                       :        +- * Filter (24)
      :     :                       :           +- BatchScan default.store_sales (23)
      :     :                       +- BroadcastExchange (31)
      :     :                          +- * Project (30)
      :     :                             +- * Filter (29)
      :     :                                +- BatchScan default.date_dim (28)
      :     +- * Sort (54)
      :        +- Exchange (53)
      :           +- * Filter (52)
      :              +- * HashAggregate (51)
      :                 +- Exchange (50)
      :                    +- * HashAggregate (49)
      :                       +- * Project (48)
      :                          +- * BroadcastHashJoin Inner BuildRight (47)
      :                             :- * Project (45)
      :                             :  +- * BroadcastHashJoin Inner BuildLeft (44)
      :                             :     :- ReusedExchange (40)
      :                             :     +- * Project (43)
      :                             :        +- * Filter (42)
      :                             :           +- BatchScan default.web_sales (41)
      :                             +- ReusedExchange (46)
      +- * Sort (70)
         +- Exchange (69)
            +- * HashAggregate (68)
               +- Exchange (67)
                  +- * HashAggregate (66)
                     +- * Project (65)
                        +- * BroadcastHashJoin Inner BuildRight (64)
                           :- * Project (62)
                           :  +- * BroadcastHashJoin Inner BuildLeft (61)
                           :     :- ReusedExchange (57)
                           :     +- * Project (60)
                           :        +- * Filter (59)
                           :           +- BatchScan default.web_sales (58)
                           +- ReusedExchange (63)


(1) BatchScan default.customer
Output [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
DataFilters: [isnotnull(c_customer_sk#1), isnotnull(c_customer_id#2)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(2) Filter [codegen id : 1]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(3) Project [codegen id : 1]
Output [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]

(4) BroadcastExchange
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(5) BatchScan default.store_sales
Output [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]
DataFilters: [isnotnull(ss_customer_sk#5)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_sales]
PartitionFilters: [isnotnull(ss_sold_date_sk#7)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>

(6) Filter
Input [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]
Condition : isnotnull(ss_customer_sk#5)

(7) Project
Output [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]
Input [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#5]
Join type: Inner
Join condition: None

(9) Project [codegen id : 3]
Output [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, ss_sold_date_sk#7]
Input [7]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]

(10) BatchScan default.date_dim
Output [2]: [d_date_sk#8, d_year#9]
DataFilters: [isnotnull(d_year#9), (d_year#9 = 2001), d_year#9 IN (2001,2002), isnotnull(d_date_sk#8)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(11) Filter [codegen id : 2]
Input [2]: [d_date_sk#8, d_year#9]
Condition : (((isnotnull(d_year#9) AND (d_year#9 = 2001)) AND d_year#9 IN (2001,2002)) AND isnotnull(d_date_sk#8))

(12) Project [codegen id : 2]
Output [2]: [d_date_sk#8, d_year#9]
Input [2]: [d_date_sk#8, d_year#9]

(13) BroadcastExchange
Input [2]: [d_date_sk#8, d_year#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(14) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#8]
Join type: Inner
Join condition: None

(15) Project [codegen id : 3]
Output [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, d_year#9]
Input [7]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, ss_sold_date_sk#7, d_date_sk#8, d_year#9]

(16) HashAggregate [codegen id : 3]
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, d_year#9]
Keys [4]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#9]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#6))]
Aggregate Attributes [1]: [sum#10]
Results [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#9, sum#11]

(17) Exchange
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#9, sum#11]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, d_year#9, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(18) HashAggregate [codegen id : 4]
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#9, sum#11]
Keys [4]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#9]
Functions [1]: [sum(UnscaledValue(ss_net_paid#6))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#6))#12]
Results [2]: [c_customer_id#2 AS customer_id#13, MakeDecimal(sum(UnscaledValue(ss_net_paid#6))#12,17,2) AS year_total#14]

(19) Filter [codegen id : 4]
Input [2]: [customer_id#13, year_total#14]
Condition : (isnotnull(year_total#14) AND (year_total#14 > 0.00))

(20) Exchange
Input [2]: [customer_id#13, year_total#14]
Arguments: hashpartitioning(customer_id#13, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(21) Sort [codegen id : 5]
Input [2]: [customer_id#13, year_total#14]
Arguments: [customer_id#13 ASC NULLS FIRST], false, 0

(22) ReusedExchange [Reuses operator id: 4]
Output [4]: [c_customer_sk#15, c_customer_id#16, c_first_name#17, c_last_name#18]

(23) BatchScan default.store_sales
Output [3]: [ss_customer_sk#19, ss_net_paid#20, ss_sold_date_sk#21]
DataFilters: [isnotnull(ss_customer_sk#19)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_sales]
PartitionFilters: [isnotnull(ss_sold_date_sk#21)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>

(24) Filter
Input [3]: [ss_customer_sk#19, ss_net_paid#20, ss_sold_date_sk#21]
Condition : isnotnull(ss_customer_sk#19)

(25) Project
Output [3]: [ss_customer_sk#19, ss_net_paid#20, ss_sold_date_sk#21]
Input [3]: [ss_customer_sk#19, ss_net_paid#20, ss_sold_date_sk#21]

(26) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [c_customer_sk#15]
Right keys [1]: [ss_customer_sk#19]
Join type: Inner
Join condition: None

(27) Project [codegen id : 8]
Output [5]: [c_customer_id#16, c_first_name#17, c_last_name#18, ss_net_paid#20, ss_sold_date_sk#21]
Input [7]: [c_customer_sk#15, c_customer_id#16, c_first_name#17, c_last_name#18, ss_customer_sk#19, ss_net_paid#20, ss_sold_date_sk#21]

(28) BatchScan default.date_dim
Output [2]: [d_date_sk#22, d_year#23]
DataFilters: [isnotnull(d_year#23), (d_year#23 = 2002), d_year#23 IN (2001,2002), isnotnull(d_date_sk#22)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(29) Filter [codegen id : 7]
Input [2]: [d_date_sk#22, d_year#23]
Condition : (((isnotnull(d_year#23) AND (d_year#23 = 2002)) AND d_year#23 IN (2001,2002)) AND isnotnull(d_date_sk#22))

(30) Project [codegen id : 7]
Output [2]: [d_date_sk#22, d_year#23]
Input [2]: [d_date_sk#22, d_year#23]

(31) BroadcastExchange
Input [2]: [d_date_sk#22, d_year#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(32) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_sold_date_sk#21]
Right keys [1]: [d_date_sk#22]
Join type: Inner
Join condition: None

(33) Project [codegen id : 8]
Output [5]: [c_customer_id#16, c_first_name#17, c_last_name#18, ss_net_paid#20, d_year#23]
Input [7]: [c_customer_id#16, c_first_name#17, c_last_name#18, ss_net_paid#20, ss_sold_date_sk#21, d_date_sk#22, d_year#23]

(34) HashAggregate [codegen id : 8]
Input [5]: [c_customer_id#16, c_first_name#17, c_last_name#18, ss_net_paid#20, d_year#23]
Keys [4]: [c_customer_id#16, c_first_name#17, c_last_name#18, d_year#23]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#20))]
Aggregate Attributes [1]: [sum#24]
Results [5]: [c_customer_id#16, c_first_name#17, c_last_name#18, d_year#23, sum#25]

(35) Exchange
Input [5]: [c_customer_id#16, c_first_name#17, c_last_name#18, d_year#23, sum#25]
Arguments: hashpartitioning(c_customer_id#16, c_first_name#17, c_last_name#18, d_year#23, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(36) HashAggregate [codegen id : 9]
Input [5]: [c_customer_id#16, c_first_name#17, c_last_name#18, d_year#23, sum#25]
Keys [4]: [c_customer_id#16, c_first_name#17, c_last_name#18, d_year#23]
Functions [1]: [sum(UnscaledValue(ss_net_paid#20))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#20))#12]
Results [4]: [c_customer_id#16 AS customer_id#26, c_first_name#17 AS customer_first_name#27, c_last_name#18 AS customer_last_name#28, MakeDecimal(sum(UnscaledValue(ss_net_paid#20))#12,17,2) AS year_total#29]

(37) Exchange
Input [4]: [customer_id#26, customer_first_name#27, customer_last_name#28, year_total#29]
Arguments: hashpartitioning(customer_id#26, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(38) Sort [codegen id : 10]
Input [4]: [customer_id#26, customer_first_name#27, customer_last_name#28, year_total#29]
Arguments: [customer_id#26 ASC NULLS FIRST], false, 0

(39) SortMergeJoin [codegen id : 11]
Left keys [1]: [customer_id#13]
Right keys [1]: [customer_id#26]
Join type: Inner
Join condition: None

(40) ReusedExchange [Reuses operator id: 4]
Output [4]: [c_customer_sk#30, c_customer_id#31, c_first_name#32, c_last_name#33]

(41) BatchScan default.web_sales
Output [3]: [ws_bill_customer_sk#34, ws_net_paid#35, ws_sold_date_sk#36]
DataFilters: [isnotnull(ws_bill_customer_sk#34)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/web_sales]
PartitionFilters: [isnotnull(ws_sold_date_sk#36)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>

(42) Filter
Input [3]: [ws_bill_customer_sk#34, ws_net_paid#35, ws_sold_date_sk#36]
Condition : isnotnull(ws_bill_customer_sk#34)

(43) Project
Output [3]: [ws_bill_customer_sk#34, ws_net_paid#35, ws_sold_date_sk#36]
Input [3]: [ws_bill_customer_sk#34, ws_net_paid#35, ws_sold_date_sk#36]

(44) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [c_customer_sk#30]
Right keys [1]: [ws_bill_customer_sk#34]
Join type: Inner
Join condition: None

(45) Project [codegen id : 14]
Output [5]: [c_customer_id#31, c_first_name#32, c_last_name#33, ws_net_paid#35, ws_sold_date_sk#36]
Input [7]: [c_customer_sk#30, c_customer_id#31, c_first_name#32, c_last_name#33, ws_bill_customer_sk#34, ws_net_paid#35, ws_sold_date_sk#36]

(46) ReusedExchange [Reuses operator id: 13]
Output [2]: [d_date_sk#37, d_year#38]

(47) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_sold_date_sk#36]
Right keys [1]: [d_date_sk#37]
Join type: Inner
Join condition: None

(48) Project [codegen id : 14]
Output [5]: [c_customer_id#31, c_first_name#32, c_last_name#33, ws_net_paid#35, d_year#38]
Input [7]: [c_customer_id#31, c_first_name#32, c_last_name#33, ws_net_paid#35, ws_sold_date_sk#36, d_date_sk#37, d_year#38]

(49) HashAggregate [codegen id : 14]
Input [5]: [c_customer_id#31, c_first_name#32, c_last_name#33, ws_net_paid#35, d_year#38]
Keys [4]: [c_customer_id#31, c_first_name#32, c_last_name#33, d_year#38]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#35))]
Aggregate Attributes [1]: [sum#39]
Results [5]: [c_customer_id#31, c_first_name#32, c_last_name#33, d_year#38, sum#40]

(50) Exchange
Input [5]: [c_customer_id#31, c_first_name#32, c_last_name#33, d_year#38, sum#40]
Arguments: hashpartitioning(c_customer_id#31, c_first_name#32, c_last_name#33, d_year#38, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(51) HashAggregate [codegen id : 15]
Input [5]: [c_customer_id#31, c_first_name#32, c_last_name#33, d_year#38, sum#40]
Keys [4]: [c_customer_id#31, c_first_name#32, c_last_name#33, d_year#38]
Functions [1]: [sum(UnscaledValue(ws_net_paid#35))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#35))#41]
Results [2]: [c_customer_id#31 AS customer_id#42, MakeDecimal(sum(UnscaledValue(ws_net_paid#35))#41,17,2) AS year_total#43]

(52) Filter [codegen id : 15]
Input [2]: [customer_id#42, year_total#43]
Condition : (isnotnull(year_total#43) AND (year_total#43 > 0.00))

(53) Exchange
Input [2]: [customer_id#42, year_total#43]
Arguments: hashpartitioning(customer_id#42, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(54) Sort [codegen id : 16]
Input [2]: [customer_id#42, year_total#43]
Arguments: [customer_id#42 ASC NULLS FIRST], false, 0

(55) SortMergeJoin [codegen id : 17]
Left keys [1]: [customer_id#13]
Right keys [1]: [customer_id#42]
Join type: Inner
Join condition: None

(56) Project [codegen id : 17]
Output [7]: [customer_id#13, year_total#14, customer_id#26, customer_first_name#27, customer_last_name#28, year_total#29, year_total#43]
Input [8]: [customer_id#13, year_total#14, customer_id#26, customer_first_name#27, customer_last_name#28, year_total#29, customer_id#42, year_total#43]

(57) ReusedExchange [Reuses operator id: 4]
Output [4]: [c_customer_sk#44, c_customer_id#45, c_first_name#46, c_last_name#47]

(58) BatchScan default.web_sales
Output [3]: [ws_bill_customer_sk#48, ws_net_paid#49, ws_sold_date_sk#50]
DataFilters: [isnotnull(ws_bill_customer_sk#48)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/web_sales]
PartitionFilters: [isnotnull(ws_sold_date_sk#50)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>

(59) Filter
Input [3]: [ws_bill_customer_sk#48, ws_net_paid#49, ws_sold_date_sk#50]
Condition : isnotnull(ws_bill_customer_sk#48)

(60) Project
Output [3]: [ws_bill_customer_sk#48, ws_net_paid#49, ws_sold_date_sk#50]
Input [3]: [ws_bill_customer_sk#48, ws_net_paid#49, ws_sold_date_sk#50]

(61) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [c_customer_sk#44]
Right keys [1]: [ws_bill_customer_sk#48]
Join type: Inner
Join condition: None

(62) Project [codegen id : 20]
Output [5]: [c_customer_id#45, c_first_name#46, c_last_name#47, ws_net_paid#49, ws_sold_date_sk#50]
Input [7]: [c_customer_sk#44, c_customer_id#45, c_first_name#46, c_last_name#47, ws_bill_customer_sk#48, ws_net_paid#49, ws_sold_date_sk#50]

(63) ReusedExchange [Reuses operator id: 31]
Output [2]: [d_date_sk#51, d_year#52]

(64) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ws_sold_date_sk#50]
Right keys [1]: [d_date_sk#51]
Join type: Inner
Join condition: None

(65) Project [codegen id : 20]
Output [5]: [c_customer_id#45, c_first_name#46, c_last_name#47, ws_net_paid#49, d_year#52]
Input [7]: [c_customer_id#45, c_first_name#46, c_last_name#47, ws_net_paid#49, ws_sold_date_sk#50, d_date_sk#51, d_year#52]

(66) HashAggregate [codegen id : 20]
Input [5]: [c_customer_id#45, c_first_name#46, c_last_name#47, ws_net_paid#49, d_year#52]
Keys [4]: [c_customer_id#45, c_first_name#46, c_last_name#47, d_year#52]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#49))]
Aggregate Attributes [1]: [sum#53]
Results [5]: [c_customer_id#45, c_first_name#46, c_last_name#47, d_year#52, sum#54]

(67) Exchange
Input [5]: [c_customer_id#45, c_first_name#46, c_last_name#47, d_year#52, sum#54]
Arguments: hashpartitioning(c_customer_id#45, c_first_name#46, c_last_name#47, d_year#52, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(68) HashAggregate [codegen id : 21]
Input [5]: [c_customer_id#45, c_first_name#46, c_last_name#47, d_year#52, sum#54]
Keys [4]: [c_customer_id#45, c_first_name#46, c_last_name#47, d_year#52]
Functions [1]: [sum(UnscaledValue(ws_net_paid#49))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#49))#41]
Results [2]: [c_customer_id#45 AS customer_id#55, MakeDecimal(sum(UnscaledValue(ws_net_paid#49))#41,17,2) AS year_total#56]

(69) Exchange
Input [2]: [customer_id#55, year_total#56]
Arguments: hashpartitioning(customer_id#55, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(70) Sort [codegen id : 22]
Input [2]: [customer_id#55, year_total#56]
Arguments: [customer_id#55 ASC NULLS FIRST], false, 0

(71) SortMergeJoin [codegen id : 23]
Left keys [1]: [customer_id#13]
Right keys [1]: [customer_id#55]
Join type: Inner
Join condition: (CASE WHEN (year_total#43 > 0.00) THEN (year_total#56 / year_total#43) END > CASE WHEN (year_total#14 > 0.00) THEN (year_total#29 / year_total#14) END)

(72) Project [codegen id : 23]
Output [3]: [customer_id#26, customer_first_name#27, customer_last_name#28]
Input [9]: [customer_id#13, year_total#14, customer_id#26, customer_first_name#27, customer_last_name#28, year_total#29, year_total#43, customer_id#55, year_total#56]

(73) TakeOrderedAndProject
Input [3]: [customer_id#26, customer_first_name#27, customer_last_name#28]
Arguments: 100, [customer_id#26 ASC NULLS FIRST, customer_id#26 ASC NULLS FIRST, customer_id#26 ASC NULLS FIRST], [customer_id#26, customer_first_name#27, customer_last_name#28]

