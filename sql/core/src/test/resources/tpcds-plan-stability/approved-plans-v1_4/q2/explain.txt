== Physical Plan ==
* Sort (34)
+- Exchange (33)
   +- * Project (32)
      +- * BroadcastHashJoin Inner BuildRight (31)
         :- * Project (20)
         :  +- * BroadcastHashJoin Inner BuildRight (19)
         :     :- * HashAggregate (13)
         :     :  +- Exchange (12)
         :     :     +- * HashAggregate (11)
         :     :        +- * Project (10)
         :     :           +- * BroadcastHashJoin Inner BuildRight (9)
         :     :              :- Union (7)
         :     :              :  :- * Project (3)
         :     :              :  :  +- * ColumnarToRow (2)
         :     :              :  :     +- Scan parquet default.web_sales (1)
         :     :              :  +- * Project (6)
         :     :              :     +- * ColumnarToRow (5)
         :     :              :        +- Scan parquet default.catalog_sales (4)
         :     :              +- ReusedExchange (8)
         :     +- BroadcastExchange (18)
         :        +- * Project (17)
         :           +- * Filter (16)
         :              +- * ColumnarToRow (15)
         :                 +- Scan parquet default.date_dim (14)
         +- BroadcastExchange (30)
            +- * Project (29)
               +- * BroadcastHashJoin Inner BuildRight (28)
                  :- * HashAggregate (22)
                  :  +- ReusedExchange (21)
                  +- BroadcastExchange (27)
                     +- * Project (26)
                        +- * Filter (25)
                           +- * ColumnarToRow (24)
                              +- Scan parquet default.date_dim (23)


(1) Scan parquet default.web_sales
Output [2]: [ws_ext_sales_price#1, ws_sold_date_sk#2]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#2), dynamicpruningexpression(ws_sold_date_sk#2 IN dynamicpruning#3)]
ReadSchema: struct<ws_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [2]: [ws_ext_sales_price#1, ws_sold_date_sk#2]

(3) Project [codegen id : 1]
Output [2]: [ws_sold_date_sk#2 AS sold_date_sk#4, ws_ext_sales_price#1 AS sales_price#5]
Input [2]: [ws_ext_sales_price#1, ws_sold_date_sk#2]

(4) Scan parquet default.catalog_sales
Output [2]: [cs_ext_sales_price#6, cs_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#7), dynamicpruningexpression(cs_sold_date_sk#7 IN dynamicpruning#3)]
ReadSchema: struct<cs_ext_sales_price:decimal(7,2)>

(5) ColumnarToRow [codegen id : 2]
Input [2]: [cs_ext_sales_price#6, cs_sold_date_sk#7]

(6) Project [codegen id : 2]
Output [2]: [cs_sold_date_sk#7 AS sold_date_sk#8, cs_ext_sales_price#6 AS sales_price#9]
Input [2]: [cs_ext_sales_price#6, cs_sold_date_sk#7]

(7) Union

(8) ReusedExchange [Reuses operator id: 38]
Output [3]: [d_date_sk#10, d_week_seq#11, d_day_name#12]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [sold_date_sk#4]
Right keys [1]: [d_date_sk#10]
Join condition: None

(10) Project [codegen id : 4]
Output [3]: [sales_price#5, d_week_seq#11, d_day_name#12]
Input [5]: [sold_date_sk#4, sales_price#5, d_date_sk#10, d_week_seq#11, d_day_name#12]

(11) HashAggregate [codegen id : 4]
Input [3]: [sales_price#5, d_week_seq#11, d_day_name#12]
Keys [1]: [d_week_seq#11]
Functions [7]: [partial_sum(UnscaledValue(CASE WHEN (d_day_name#12 = Sunday   ) THEN sales_price#5 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#12 = Monday   ) THEN sales_price#5 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#12 = Tuesday  ) THEN sales_price#5 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#12 = Wednesday) THEN sales_price#5 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#12 = Thursday ) THEN sales_price#5 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#12 = Friday   ) THEN sales_price#5 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#12 = Saturday ) THEN sales_price#5 END))]
Aggregate Attributes [7]: [sum#13, sum#14, sum#15, sum#16, sum#17, sum#18, sum#19]
Results [8]: [d_week_seq#11, sum#20, sum#21, sum#22, sum#23, sum#24, sum#25, sum#26]

(12) Exchange
Input [8]: [d_week_seq#11, sum#20, sum#21, sum#22, sum#23, sum#24, sum#25, sum#26]
Arguments: hashpartitioning(d_week_seq#11, 5), ENSURE_REQUIREMENTS, [id=#27]

(13) HashAggregate [codegen id : 12]
Input [8]: [d_week_seq#11, sum#20, sum#21, sum#22, sum#23, sum#24, sum#25, sum#26]
Keys [1]: [d_week_seq#11]
Functions [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#12 = Sunday   ) THEN sales_price#5 END)), sum(UnscaledValue(CASE WHEN (d_day_name#12 = Monday   ) THEN sales_price#5 END)), sum(UnscaledValue(CASE WHEN (d_day_name#12 = Tuesday  ) THEN sales_price#5 END)), sum(UnscaledValue(CASE WHEN (d_day_name#12 = Wednesday) THEN sales_price#5 END)), sum(UnscaledValue(CASE WHEN (d_day_name#12 = Thursday ) THEN sales_price#5 END)), sum(UnscaledValue(CASE WHEN (d_day_name#12 = Friday   ) THEN sales_price#5 END)), sum(UnscaledValue(CASE WHEN (d_day_name#12 = Saturday ) THEN sales_price#5 END))]
Aggregate Attributes [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#12 = Sunday   ) THEN sales_price#5 END))#28, sum(UnscaledValue(CASE WHEN (d_day_name#12 = Monday   ) THEN sales_price#5 END))#29, sum(UnscaledValue(CASE WHEN (d_day_name#12 = Tuesday  ) THEN sales_price#5 END))#30, sum(UnscaledValue(CASE WHEN (d_day_name#12 = Wednesday) THEN sales_price#5 END))#31, sum(UnscaledValue(CASE WHEN (d_day_name#12 = Thursday ) THEN sales_price#5 END))#32, sum(UnscaledValue(CASE WHEN (d_day_name#12 = Friday   ) THEN sales_price#5 END))#33, sum(UnscaledValue(CASE WHEN (d_day_name#12 = Saturday ) THEN sales_price#5 END))#34]
Results [8]: [d_week_seq#11, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#12 = Sunday   ) THEN sales_price#5 END))#28,17,2) AS sun_sales#35, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#12 = Monday   ) THEN sales_price#5 END))#29,17,2) AS mon_sales#36, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#12 = Tuesday  ) THEN sales_price#5 END))#30,17,2) AS tue_sales#37, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#12 = Wednesday) THEN sales_price#5 END))#31,17,2) AS wed_sales#38, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#12 = Thursday ) THEN sales_price#5 END))#32,17,2) AS thu_sales#39, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#12 = Friday   ) THEN sales_price#5 END))#33,17,2) AS fri_sales#40, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#12 = Saturday ) THEN sales_price#5 END))#34,17,2) AS sat_sales#41]

(14) Scan parquet default.date_dim
Output [2]: [d_week_seq#42, d_year#43]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_week_seq)]
ReadSchema: struct<d_week_seq:int,d_year:int>

(15) ColumnarToRow [codegen id : 5]
Input [2]: [d_week_seq#42, d_year#43]

(16) Filter [codegen id : 5]
Input [2]: [d_week_seq#42, d_year#43]
Condition : ((isnotnull(d_year#43) AND (d_year#43 = 2001)) AND isnotnull(d_week_seq#42))

(17) Project [codegen id : 5]
Output [1]: [d_week_seq#42]
Input [2]: [d_week_seq#42, d_year#43]

(18) BroadcastExchange
Input [1]: [d_week_seq#42]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#44]

(19) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [d_week_seq#11]
Right keys [1]: [d_week_seq#42]
Join condition: None

(20) Project [codegen id : 12]
Output [8]: [d_week_seq#11 AS d_week_seq1#45, sun_sales#35 AS sun_sales1#46, mon_sales#36 AS mon_sales1#47, tue_sales#37 AS tue_sales1#48, wed_sales#38 AS wed_sales1#49, thu_sales#39 AS thu_sales1#50, fri_sales#40 AS fri_sales1#51, sat_sales#41 AS sat_sales1#52]
Input [9]: [d_week_seq#11, sun_sales#35, mon_sales#36, tue_sales#37, wed_sales#38, thu_sales#39, fri_sales#40, sat_sales#41, d_week_seq#42]

(21) ReusedExchange [Reuses operator id: 12]
Output [8]: [d_week_seq#11, sum#53, sum#54, sum#55, sum#56, sum#57, sum#58, sum#59]

(22) HashAggregate [codegen id : 11]
Input [8]: [d_week_seq#11, sum#53, sum#54, sum#55, sum#56, sum#57, sum#58, sum#59]
Keys [1]: [d_week_seq#11]
Functions [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#12 = Sunday   ) THEN sales_price#5 END)), sum(UnscaledValue(CASE WHEN (d_day_name#12 = Monday   ) THEN sales_price#5 END)), sum(UnscaledValue(CASE WHEN (d_day_name#12 = Tuesday  ) THEN sales_price#5 END)), sum(UnscaledValue(CASE WHEN (d_day_name#12 = Wednesday) THEN sales_price#5 END)), sum(UnscaledValue(CASE WHEN (d_day_name#12 = Thursday ) THEN sales_price#5 END)), sum(UnscaledValue(CASE WHEN (d_day_name#12 = Friday   ) THEN sales_price#5 END)), sum(UnscaledValue(CASE WHEN (d_day_name#12 = Saturday ) THEN sales_price#5 END))]
Aggregate Attributes [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#12 = Sunday   ) THEN sales_price#5 END))#28, sum(UnscaledValue(CASE WHEN (d_day_name#12 = Monday   ) THEN sales_price#5 END))#29, sum(UnscaledValue(CASE WHEN (d_day_name#12 = Tuesday  ) THEN sales_price#5 END))#30, sum(UnscaledValue(CASE WHEN (d_day_name#12 = Wednesday) THEN sales_price#5 END))#31, sum(UnscaledValue(CASE WHEN (d_day_name#12 = Thursday ) THEN sales_price#5 END))#32, sum(UnscaledValue(CASE WHEN (d_day_name#12 = Friday   ) THEN sales_price#5 END))#33, sum(UnscaledValue(CASE WHEN (d_day_name#12 = Saturday ) THEN sales_price#5 END))#34]
Results [8]: [d_week_seq#11, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#12 = Sunday   ) THEN sales_price#5 END))#28,17,2) AS sun_sales#35, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#12 = Monday   ) THEN sales_price#5 END))#29,17,2) AS mon_sales#36, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#12 = Tuesday  ) THEN sales_price#5 END))#30,17,2) AS tue_sales#37, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#12 = Wednesday) THEN sales_price#5 END))#31,17,2) AS wed_sales#38, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#12 = Thursday ) THEN sales_price#5 END))#32,17,2) AS thu_sales#39, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#12 = Friday   ) THEN sales_price#5 END))#33,17,2) AS fri_sales#40, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#12 = Saturday ) THEN sales_price#5 END))#34,17,2) AS sat_sales#41]

(23) Scan parquet default.date_dim
Output [2]: [d_week_seq#60, d_year#61]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_week_seq)]
ReadSchema: struct<d_week_seq:int,d_year:int>

(24) ColumnarToRow [codegen id : 10]
Input [2]: [d_week_seq#60, d_year#61]

(25) Filter [codegen id : 10]
Input [2]: [d_week_seq#60, d_year#61]
Condition : ((isnotnull(d_year#61) AND (d_year#61 = 2002)) AND isnotnull(d_week_seq#60))

(26) Project [codegen id : 10]
Output [1]: [d_week_seq#60]
Input [2]: [d_week_seq#60, d_year#61]

(27) BroadcastExchange
Input [1]: [d_week_seq#60]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#62]

(28) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [d_week_seq#11]
Right keys [1]: [d_week_seq#60]
Join condition: None

(29) Project [codegen id : 11]
Output [8]: [d_week_seq#11 AS d_week_seq2#63, sun_sales#35 AS sun_sales2#64, mon_sales#36 AS mon_sales2#65, tue_sales#37 AS tue_sales2#66, wed_sales#38 AS wed_sales2#67, thu_sales#39 AS thu_sales2#68, fri_sales#40 AS fri_sales2#69, sat_sales#41 AS sat_sales2#70]
Input [9]: [d_week_seq#11, sun_sales#35, mon_sales#36, tue_sales#37, wed_sales#38, thu_sales#39, fri_sales#40, sat_sales#41, d_week_seq#60]

(30) BroadcastExchange
Input [8]: [d_week_seq2#63, sun_sales2#64, mon_sales2#65, tue_sales2#66, wed_sales2#67, thu_sales2#68, fri_sales2#69, sat_sales2#70]
Arguments: HashedRelationBroadcastMode(List(cast((input[0, int, true] - 53) as bigint)),false), [id=#71]

(31) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [d_week_seq1#45]
Right keys [1]: [(d_week_seq2#63 - 53)]
Join condition: None

(32) Project [codegen id : 12]
Output [8]: [d_week_seq1#45, round(CheckOverflow((promote_precision(sun_sales1#46) / promote_precision(sun_sales2#64)), DecimalType(37,20), true), 2) AS round((sun_sales1 / sun_sales2), 2)#72, round(CheckOverflow((promote_precision(mon_sales1#47) / promote_precision(mon_sales2#65)), DecimalType(37,20), true), 2) AS round((mon_sales1 / mon_sales2), 2)#73, round(CheckOverflow((promote_precision(tue_sales1#48) / promote_precision(tue_sales2#66)), DecimalType(37,20), true), 2) AS round((tue_sales1 / tue_sales2), 2)#74, round(CheckOverflow((promote_precision(wed_sales1#49) / promote_precision(wed_sales2#67)), DecimalType(37,20), true), 2) AS round((wed_sales1 / wed_sales2), 2)#75, round(CheckOverflow((promote_precision(thu_sales1#50) / promote_precision(thu_sales2#68)), DecimalType(37,20), true), 2) AS round((thu_sales1 / thu_sales2), 2)#76, round(CheckOverflow((promote_precision(fri_sales1#51) / promote_precision(fri_sales2#69)), DecimalType(37,20), true), 2) AS round((fri_sales1 / fri_sales2), 2)#77, round(CheckOverflow((promote_precision(sat_sales1#52) / promote_precision(sat_sales2#70)), DecimalType(37,20), true), 2) AS round((sat_sales1 / sat_sales2), 2)#78]
Input [16]: [d_week_seq1#45, sun_sales1#46, mon_sales1#47, tue_sales1#48, wed_sales1#49, thu_sales1#50, fri_sales1#51, sat_sales1#52, d_week_seq2#63, sun_sales2#64, mon_sales2#65, tue_sales2#66, wed_sales2#67, thu_sales2#68, fri_sales2#69, sat_sales2#70]

(33) Exchange
Input [8]: [d_week_seq1#45, round((sun_sales1 / sun_sales2), 2)#72, round((mon_sales1 / mon_sales2), 2)#73, round((tue_sales1 / tue_sales2), 2)#74, round((wed_sales1 / wed_sales2), 2)#75, round((thu_sales1 / thu_sales2), 2)#76, round((fri_sales1 / fri_sales2), 2)#77, round((sat_sales1 / sat_sales2), 2)#78]
Arguments: rangepartitioning(d_week_seq1#45 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [id=#79]

(34) Sort [codegen id : 13]
Input [8]: [d_week_seq1#45, round((sun_sales1 / sun_sales2), 2)#72, round((mon_sales1 / mon_sales2), 2)#73, round((tue_sales1 / tue_sales2), 2)#74, round((wed_sales1 / wed_sales2), 2)#75, round((thu_sales1 / thu_sales2), 2)#76, round((fri_sales1 / fri_sales2), 2)#77, round((sat_sales1 / sat_sales2), 2)#78]
Arguments: [d_week_seq1#45 ASC NULLS FIRST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#2 IN dynamicpruning#3
BroadcastExchange (38)
+- * Filter (37)
   +- * ColumnarToRow (36)
      +- Scan parquet default.date_dim (35)


(35) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_week_seq#11, d_day_name#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk), IsNotNull(d_week_seq)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int,d_day_name:string>

(36) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#10, d_week_seq#11, d_day_name#12]

(37) Filter [codegen id : 1]
Input [3]: [d_date_sk#10, d_week_seq#11, d_day_name#12]
Condition : (isnotnull(d_date_sk#10) AND isnotnull(d_week_seq#11))

(38) BroadcastExchange
Input [3]: [d_date_sk#10, d_week_seq#11, d_day_name#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#80]

Subquery:2 Hosting operator id = 4 Hosting Expression = cs_sold_date_sk#7 IN dynamicpruning#3


