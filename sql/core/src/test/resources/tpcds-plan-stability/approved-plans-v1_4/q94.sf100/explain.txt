== Physical Plan ==
TakeOrderedAndProject (47)
+- * HashAggregate (46)
   +- Exchange (45)
      +- * HashAggregate (44)
         +- * HashAggregate (43)
            +- Exchange (42)
               +- * HashAggregate (41)
                  +- * Project (40)
                     +- * BroadcastHashJoin Inner BuildRight (39)
                        :- * Project (33)
                        :  +- * BroadcastHashJoin Inner BuildRight (32)
                        :     :- * Project (26)
                        :     :  +- * BroadcastHashJoin Inner BuildLeft (25)
                        :     :     :- BroadcastExchange (5)
                        :     :     :  +- * Project (4)
                        :     :     :     +- * Filter (3)
                        :     :     :        +- * ColumnarToRow (2)
                        :     :     :           +- Scan parquet default.customer_address (1)
                        :     :     +- SortMergeJoin LeftAnti (24)
                        :     :        :- * Sort (19)
                        :     :        :  +- Exchange (18)
                        :     :        :     +- * Project (17)
                        :     :        :        +- SortMergeJoin LeftSemi (16)
                        :     :        :           :- * Sort (10)
                        :     :        :           :  +- Exchange (9)
                        :     :        :           :     +- * Filter (8)
                        :     :        :           :        +- * ColumnarToRow (7)
                        :     :        :           :           +- Scan parquet default.web_sales (6)
                        :     :        :           +- * Sort (15)
                        :     :        :              +- Exchange (14)
                        :     :        :                 +- * Project (13)
                        :     :        :                    +- * ColumnarToRow (12)
                        :     :        :                       +- Scan parquet default.web_sales (11)
                        :     :        +- * Sort (23)
                        :     :           +- Exchange (22)
                        :     :              +- * ColumnarToRow (21)
                        :     :                 +- Scan parquet default.web_returns (20)
                        :     +- BroadcastExchange (31)
                        :        +- * Project (30)
                        :           +- * Filter (29)
                        :              +- * ColumnarToRow (28)
                        :                 +- Scan parquet default.date_dim (27)
                        +- BroadcastExchange (38)
                           +- * Project (37)
                              +- * Filter (36)
                                 +- * ColumnarToRow (35)
                                    +- Scan parquet default.web_site (34)


(1) Scan parquet default.customer_address
Output [2]: [ca_address_sk#1, ca_state#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,IL), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(2) ColumnarToRow [codegen id : 1]
Input [2]: [ca_address_sk#1, ca_state#2]

(3) Filter [codegen id : 1]
Input [2]: [ca_address_sk#1, ca_state#2]
Condition : ((isnotnull(ca_state#2) AND (ca_state#2 = IL)) AND isnotnull(ca_address_sk#1))

(4) Project [codegen id : 1]
Output [1]: [ca_address_sk#1]
Input [2]: [ca_address_sk#1, ca_state#2]

(5) BroadcastExchange
Input [1]: [ca_address_sk#1]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#3]

(6) Scan parquet default.web_sales
Output [7]: [ws_ship_date_sk#4, ws_ship_addr_sk#5, ws_web_site_sk#6, ws_warehouse_sk#7, ws_order_number#8, ws_ext_ship_cost#9, ws_net_profit#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_ship_date_sk), IsNotNull(ws_ship_addr_sk), IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_ship_date_sk:int,ws_ship_addr_sk:int,ws_web_site_sk:int,ws_warehouse_sk:int,ws_order_number:int,ws_ext_ship_cost:decimal(7,2),ws_net_profit:decimal(7,2)>

(7) ColumnarToRow [codegen id : 2]
Input [7]: [ws_ship_date_sk#4, ws_ship_addr_sk#5, ws_web_site_sk#6, ws_warehouse_sk#7, ws_order_number#8, ws_ext_ship_cost#9, ws_net_profit#10]

(8) Filter [codegen id : 2]
Input [7]: [ws_ship_date_sk#4, ws_ship_addr_sk#5, ws_web_site_sk#6, ws_warehouse_sk#7, ws_order_number#8, ws_ext_ship_cost#9, ws_net_profit#10]
Condition : ((isnotnull(ws_ship_date_sk#4) AND isnotnull(ws_ship_addr_sk#5)) AND isnotnull(ws_web_site_sk#6))

(9) Exchange
Input [7]: [ws_ship_date_sk#4, ws_ship_addr_sk#5, ws_web_site_sk#6, ws_warehouse_sk#7, ws_order_number#8, ws_ext_ship_cost#9, ws_net_profit#10]
Arguments: hashpartitioning(ws_order_number#8, 5), true, [id=#11]

(10) Sort [codegen id : 3]
Input [7]: [ws_ship_date_sk#4, ws_ship_addr_sk#5, ws_web_site_sk#6, ws_warehouse_sk#7, ws_order_number#8, ws_ext_ship_cost#9, ws_net_profit#10]
Arguments: [ws_order_number#8 ASC NULLS FIRST], false, 0

(11) Scan parquet default.web_sales
Output [2]: [ws_warehouse_sk#7, ws_order_number#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
ReadSchema: struct<ws_warehouse_sk:int,ws_order_number:int>

(12) ColumnarToRow [codegen id : 4]
Input [2]: [ws_warehouse_sk#7, ws_order_number#8]

(13) Project [codegen id : 4]
Output [2]: [ws_warehouse_sk#7 AS ws_warehouse_sk#7#12, ws_order_number#8 AS ws_order_number#8#13]
Input [2]: [ws_warehouse_sk#7, ws_order_number#8]

(14) Exchange
Input [2]: [ws_warehouse_sk#7#12, ws_order_number#8#13]
Arguments: hashpartitioning(ws_order_number#8#13, 5), true, [id=#14]

(15) Sort [codegen id : 5]
Input [2]: [ws_warehouse_sk#7#12, ws_order_number#8#13]
Arguments: [ws_order_number#8#13 ASC NULLS FIRST], false, 0

(16) SortMergeJoin
Left keys [1]: [ws_order_number#8]
Right keys [1]: [ws_order_number#8#13]
Join condition: NOT (ws_warehouse_sk#7 = ws_warehouse_sk#7#12)

(17) Project [codegen id : 6]
Output [6]: [ws_ship_date_sk#4, ws_ship_addr_sk#5, ws_web_site_sk#6, ws_order_number#8, ws_ext_ship_cost#9, ws_net_profit#10]
Input [7]: [ws_ship_date_sk#4, ws_ship_addr_sk#5, ws_web_site_sk#6, ws_warehouse_sk#7, ws_order_number#8, ws_ext_ship_cost#9, ws_net_profit#10]

(18) Exchange
Input [6]: [ws_ship_date_sk#4, ws_ship_addr_sk#5, ws_web_site_sk#6, ws_order_number#8, ws_ext_ship_cost#9, ws_net_profit#10]
Arguments: hashpartitioning(cast(ws_order_number#8 as bigint), 5), true, [id=#15]

(19) Sort [codegen id : 7]
Input [6]: [ws_ship_date_sk#4, ws_ship_addr_sk#5, ws_web_site_sk#6, ws_order_number#8, ws_ext_ship_cost#9, ws_net_profit#10]
Arguments: [cast(ws_order_number#8 as bigint) ASC NULLS FIRST], false, 0

(20) Scan parquet default.web_returns
Output [1]: [wr_order_number#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
ReadSchema: struct<wr_order_number:bigint>

(21) ColumnarToRow [codegen id : 8]
Input [1]: [wr_order_number#16]

(22) Exchange
Input [1]: [wr_order_number#16]
Arguments: hashpartitioning(wr_order_number#16, 5), true, [id=#17]

(23) Sort [codegen id : 9]
Input [1]: [wr_order_number#16]
Arguments: [wr_order_number#16 ASC NULLS FIRST], false, 0

(24) SortMergeJoin
Left keys [1]: [cast(ws_order_number#8 as bigint)]
Right keys [1]: [wr_order_number#16]
Join condition: None

(25) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ca_address_sk#1]
Right keys [1]: [ws_ship_addr_sk#5]
Join condition: None

(26) Project [codegen id : 12]
Output [5]: [ws_ship_date_sk#4, ws_web_site_sk#6, ws_order_number#8, ws_ext_ship_cost#9, ws_net_profit#10]
Input [7]: [ca_address_sk#1, ws_ship_date_sk#4, ws_ship_addr_sk#5, ws_web_site_sk#6, ws_order_number#8, ws_ext_ship_cost#9, ws_net_profit#10]

(27) Scan parquet default.date_dim
Output [2]: [d_date_sk#18, d_date#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-01), LessThanOrEqual(d_date,1999-04-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(28) ColumnarToRow [codegen id : 10]
Input [2]: [d_date_sk#18, d_date#19]

(29) Filter [codegen id : 10]
Input [2]: [d_date_sk#18, d_date#19]
Condition : (((isnotnull(d_date#19) AND (d_date#19 >= 10623)) AND (d_date#19 <= 10683)) AND isnotnull(d_date_sk#18))

(30) Project [codegen id : 10]
Output [1]: [d_date_sk#18]
Input [2]: [d_date_sk#18, d_date#19]

(31) BroadcastExchange
Input [1]: [d_date_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#20]

(32) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ws_ship_date_sk#4]
Right keys [1]: [d_date_sk#18]
Join condition: None

(33) Project [codegen id : 12]
Output [4]: [ws_web_site_sk#6, ws_order_number#8, ws_ext_ship_cost#9, ws_net_profit#10]
Input [6]: [ws_ship_date_sk#4, ws_web_site_sk#6, ws_order_number#8, ws_ext_ship_cost#9, ws_net_profit#10, d_date_sk#18]

(34) Scan parquet default.web_site
Output [2]: [web_site_sk#21, web_company_name#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_company_name:string>

(35) ColumnarToRow [codegen id : 11]
Input [2]: [web_site_sk#21, web_company_name#22]

(36) Filter [codegen id : 11]
Input [2]: [web_site_sk#21, web_company_name#22]
Condition : ((isnotnull(web_company_name#22) AND (web_company_name#22 = pri)) AND isnotnull(web_site_sk#21))

(37) Project [codegen id : 11]
Output [1]: [web_site_sk#21]
Input [2]: [web_site_sk#21, web_company_name#22]

(38) BroadcastExchange
Input [1]: [web_site_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#23]

(39) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ws_web_site_sk#6]
Right keys [1]: [web_site_sk#21]
Join condition: None

(40) Project [codegen id : 12]
Output [3]: [ws_order_number#8, ws_ext_ship_cost#9, ws_net_profit#10]
Input [5]: [ws_web_site_sk#6, ws_order_number#8, ws_ext_ship_cost#9, ws_net_profit#10, web_site_sk#21]

(41) HashAggregate [codegen id : 12]
Input [3]: [ws_order_number#8, ws_ext_ship_cost#9, ws_net_profit#10]
Keys [1]: [ws_order_number#8]
Functions [2]: [partial_sum(UnscaledValue(ws_ext_ship_cost#9)), partial_sum(UnscaledValue(ws_net_profit#10))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#9))#24, sum(UnscaledValue(ws_net_profit#10))#25]
Results [3]: [ws_order_number#8, sum#26, sum#27]

(42) Exchange
Input [3]: [ws_order_number#8, sum#26, sum#27]
Arguments: hashpartitioning(ws_order_number#8, 5), true, [id=#28]

(43) HashAggregate [codegen id : 13]
Input [3]: [ws_order_number#8, sum#26, sum#27]
Keys [1]: [ws_order_number#8]
Functions [2]: [merge_sum(UnscaledValue(ws_ext_ship_cost#9)), merge_sum(UnscaledValue(ws_net_profit#10))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#9))#24, sum(UnscaledValue(ws_net_profit#10))#25]
Results [3]: [ws_order_number#8, sum#26, sum#27]

(44) HashAggregate [codegen id : 13]
Input [3]: [ws_order_number#8, sum#26, sum#27]
Keys: []
Functions [3]: [merge_sum(UnscaledValue(ws_ext_ship_cost#9)), merge_sum(UnscaledValue(ws_net_profit#10)), partial_count(distinct ws_order_number#8)]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#9))#24, sum(UnscaledValue(ws_net_profit#10))#25, count(ws_order_number#8)#29]
Results [3]: [sum#26, sum#27, count#30]

(45) Exchange
Input [3]: [sum#26, sum#27, count#30]
Arguments: SinglePartition, true, [id=#31]

(46) HashAggregate [codegen id : 14]
Input [3]: [sum#26, sum#27, count#30]
Keys: []
Functions [3]: [sum(UnscaledValue(ws_ext_ship_cost#9)), sum(UnscaledValue(ws_net_profit#10)), count(distinct ws_order_number#8)]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#9))#24, sum(UnscaledValue(ws_net_profit#10))#25, count(ws_order_number#8)#29]
Results [3]: [count(ws_order_number#8)#29 AS order count #32, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#9))#24,17,2) AS total shipping cost #33, MakeDecimal(sum(UnscaledValue(ws_net_profit#10))#25,17,2) AS total net profit #34]

(47) TakeOrderedAndProject
Input [3]: [order count #32, total shipping cost #33, total net profit #34]
Arguments: 100, [order count #32 ASC NULLS FIRST], [order count #32, total shipping cost #33, total net profit #34]

