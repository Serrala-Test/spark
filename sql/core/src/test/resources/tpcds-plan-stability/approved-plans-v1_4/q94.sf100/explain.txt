== Physical Plan ==
* Sort (51)
+- * HashAggregate (50)
   +- Exchange (49)
      +- * HashAggregate (48)
         +- * HashAggregate (47)
            +- Exchange (46)
               +- * HashAggregate (45)
                  +- * Project (44)
                     +- * BroadcastHashJoin Inner BuildRight (43)
                        :- * Project (37)
                        :  +- * BroadcastHashJoin Inner BuildRight (36)
                        :     :- * Project (30)
                        :     :  +- * BroadcastHashJoin Inner BuildRight (29)
                        :     :     :- SortMergeJoin LeftAnti (23)
                        :     :     :  :- * Sort (16)
                        :     :     :  :  +- Exchange (15)
                        :     :     :  :     +- * Project (14)
                        :     :     :  :        +- SortMergeJoin LeftSemi (13)
                        :     :     :  :           :- * Sort (6)
                        :     :     :  :           :  +- Exchange (5)
                        :     :     :  :           :     +- * Project (4)
                        :     :     :  :           :        +- * Filter (3)
                        :     :     :  :           :           +- * ColumnarToRow (2)
                        :     :     :  :           :              +- Scan parquet default.web_sales (1)
                        :     :     :  :           +- * Sort (12)
                        :     :     :  :              +- Exchange (11)
                        :     :     :  :                 +- * Project (10)
                        :     :     :  :                    +- * Filter (9)
                        :     :     :  :                       +- * ColumnarToRow (8)
                        :     :     :  :                          +- Scan parquet default.web_sales (7)
                        :     :     :  +- * Sort (22)
                        :     :     :     +- Exchange (21)
                        :     :     :        +- * Project (20)
                        :     :     :           +- * Filter (19)
                        :     :     :              +- * ColumnarToRow (18)
                        :     :     :                 +- Scan parquet default.web_returns (17)
                        :     :     +- BroadcastExchange (28)
                        :     :        +- * Project (27)
                        :     :           +- * Filter (26)
                        :     :              +- * ColumnarToRow (25)
                        :     :                 +- Scan parquet default.customer_address (24)
                        :     +- BroadcastExchange (35)
                        :        +- * Project (34)
                        :           +- * Filter (33)
                        :              +- * ColumnarToRow (32)
                        :                 +- Scan parquet default.web_site (31)
                        +- BroadcastExchange (42)
                           +- * Project (41)
                              +- * Filter (40)
                                 +- * ColumnarToRow (39)
                                    +- Scan parquet default.date_dim (38)


(1) Scan parquet default.web_sales
Output [8]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_warehouse_sk#4, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7, ws_sold_date_sk#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_ship_date_sk), IsNotNull(ws_ship_addr_sk), IsNotNull(ws_web_site_sk), IsNotNull(ws_order_number), IsNotNull(ws_warehouse_sk)]
ReadSchema: struct<ws_ship_date_sk:int,ws_ship_addr_sk:int,ws_web_site_sk:int,ws_warehouse_sk:int,ws_order_number:int,ws_ext_ship_cost:decimal(7,2),ws_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [8]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_warehouse_sk#4, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7, ws_sold_date_sk#8]

(3) Filter [codegen id : 1]
Input [8]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_warehouse_sk#4, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7, ws_sold_date_sk#8]
Condition : ((((isnotnull(ws_ship_date_sk#1) AND isnotnull(ws_ship_addr_sk#2)) AND isnotnull(ws_web_site_sk#3)) AND isnotnull(ws_order_number#5)) AND isnotnull(ws_warehouse_sk#4))

(4) Project [codegen id : 1]
Output [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_warehouse_sk#4, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7]
Input [8]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_warehouse_sk#4, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7, ws_sold_date_sk#8]

(5) Exchange
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_warehouse_sk#4, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7]
Arguments: hashpartitioning(ws_order_number#5, 5), ENSURE_REQUIREMENTS, [id=#9]

(6) Sort [codegen id : 2]
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_warehouse_sk#4, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7]
Arguments: [ws_order_number#5 ASC NULLS FIRST], false, 0

(7) Scan parquet default.web_sales
Output [3]: [ws_warehouse_sk#4, ws_order_number#5, ws_sold_date_sk#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_order_number), IsNotNull(ws_warehouse_sk)]
ReadSchema: struct<ws_warehouse_sk:int,ws_order_number:int>

(8) ColumnarToRow [codegen id : 3]
Input [3]: [ws_warehouse_sk#4, ws_order_number#5, ws_sold_date_sk#8]

(9) Filter [codegen id : 3]
Input [3]: [ws_warehouse_sk#4, ws_order_number#5, ws_sold_date_sk#8]
Condition : (isnotnull(ws_order_number#5) AND isnotnull(ws_warehouse_sk#4))

(10) Project [codegen id : 3]
Output [2]: [ws_warehouse_sk#4 AS ws_warehouse_sk#4#10, ws_order_number#5 AS ws_order_number#5#11]
Input [3]: [ws_warehouse_sk#4, ws_order_number#5, ws_sold_date_sk#8]

(11) Exchange
Input [2]: [ws_warehouse_sk#4#10, ws_order_number#5#11]
Arguments: hashpartitioning(ws_order_number#5#11, 5), ENSURE_REQUIREMENTS, [id=#12]

(12) Sort [codegen id : 4]
Input [2]: [ws_warehouse_sk#4#10, ws_order_number#5#11]
Arguments: [ws_order_number#5#11 ASC NULLS FIRST], false, 0

(13) SortMergeJoin
Left keys [1]: [ws_order_number#5]
Right keys [1]: [ws_order_number#5#11]
Join condition: NOT (ws_warehouse_sk#4 = ws_warehouse_sk#4#10)

(14) Project [codegen id : 5]
Output [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7]
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_warehouse_sk#4, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7]

(15) Exchange
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7]
Arguments: hashpartitioning(cast(ws_order_number#5 as bigint), 5), ENSURE_REQUIREMENTS, [id=#13]

(16) Sort [codegen id : 6]
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7]
Arguments: [cast(ws_order_number#5 as bigint) ASC NULLS FIRST], false, 0

(17) Scan parquet default.web_returns
Output [2]: [wr_order_number#14, wr_returned_date_sk#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_order_number)]
ReadSchema: struct<wr_order_number:bigint>

(18) ColumnarToRow [codegen id : 7]
Input [2]: [wr_order_number#14, wr_returned_date_sk#15]

(19) Filter [codegen id : 7]
Input [2]: [wr_order_number#14, wr_returned_date_sk#15]
Condition : isnotnull(wr_order_number#14)

(20) Project [codegen id : 7]
Output [1]: [wr_order_number#14]
Input [2]: [wr_order_number#14, wr_returned_date_sk#15]

(21) Exchange
Input [1]: [wr_order_number#14]
Arguments: hashpartitioning(wr_order_number#14, 5), ENSURE_REQUIREMENTS, [id=#16]

(22) Sort [codegen id : 8]
Input [1]: [wr_order_number#14]
Arguments: [wr_order_number#14 ASC NULLS FIRST], false, 0

(23) SortMergeJoin
Left keys [1]: [cast(ws_order_number#5 as bigint)]
Right keys [1]: [wr_order_number#14]
Join condition: None

(24) Scan parquet default.customer_address
Output [2]: [ca_address_sk#17, ca_state#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,IL), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(25) ColumnarToRow [codegen id : 9]
Input [2]: [ca_address_sk#17, ca_state#18]

(26) Filter [codegen id : 9]
Input [2]: [ca_address_sk#17, ca_state#18]
Condition : ((isnotnull(ca_state#18) AND (ca_state#18 = IL)) AND isnotnull(ca_address_sk#17))

(27) Project [codegen id : 9]
Output [1]: [ca_address_sk#17]
Input [2]: [ca_address_sk#17, ca_state#18]

(28) BroadcastExchange
Input [1]: [ca_address_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#19]

(29) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ws_ship_addr_sk#2]
Right keys [1]: [ca_address_sk#17]
Join condition: None

(30) Project [codegen id : 12]
Output [5]: [ws_ship_date_sk#1, ws_web_site_sk#3, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7]
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7, ca_address_sk#17]

(31) Scan parquet default.web_site
Output [2]: [web_site_sk#20, web_company_name#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri                                               ), IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_company_name:string>

(32) ColumnarToRow [codegen id : 10]
Input [2]: [web_site_sk#20, web_company_name#21]

(33) Filter [codegen id : 10]
Input [2]: [web_site_sk#20, web_company_name#21]
Condition : ((isnotnull(web_company_name#21) AND (web_company_name#21 = pri                                               )) AND isnotnull(web_site_sk#20))

(34) Project [codegen id : 10]
Output [1]: [web_site_sk#20]
Input [2]: [web_site_sk#20, web_company_name#21]

(35) BroadcastExchange
Input [1]: [web_site_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22]

(36) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ws_web_site_sk#3]
Right keys [1]: [web_site_sk#20]
Join condition: None

(37) Project [codegen id : 12]
Output [4]: [ws_ship_date_sk#1, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7]
Input [6]: [ws_ship_date_sk#1, ws_web_site_sk#3, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7, web_site_sk#20]

(38) Scan parquet default.date_dim
Output [2]: [d_date_sk#23, d_date#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-01), LessThanOrEqual(d_date,1999-04-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(39) ColumnarToRow [codegen id : 11]
Input [2]: [d_date_sk#23, d_date#24]

(40) Filter [codegen id : 11]
Input [2]: [d_date_sk#23, d_date#24]
Condition : (((isnotnull(d_date#24) AND (d_date#24 >= 1999-02-01)) AND (d_date#24 <= 1999-04-02)) AND isnotnull(d_date_sk#23))

(41) Project [codegen id : 11]
Output [1]: [d_date_sk#23]
Input [2]: [d_date_sk#23, d_date#24]

(42) BroadcastExchange
Input [1]: [d_date_sk#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#25]

(43) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ws_ship_date_sk#1]
Right keys [1]: [d_date_sk#23]
Join condition: None

(44) Project [codegen id : 12]
Output [3]: [ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7]
Input [5]: [ws_ship_date_sk#1, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7, d_date_sk#23]

(45) HashAggregate [codegen id : 12]
Input [3]: [ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7]
Keys [1]: [ws_order_number#5]
Functions [2]: [partial_sum(UnscaledValue(ws_ext_ship_cost#6)), partial_sum(UnscaledValue(ws_net_profit#7))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#6))#26, sum(UnscaledValue(ws_net_profit#7))#27]
Results [3]: [ws_order_number#5, sum#28, sum#29]

(46) Exchange
Input [3]: [ws_order_number#5, sum#28, sum#29]
Arguments: hashpartitioning(ws_order_number#5, 5), ENSURE_REQUIREMENTS, [id=#30]

(47) HashAggregate [codegen id : 13]
Input [3]: [ws_order_number#5, sum#28, sum#29]
Keys [1]: [ws_order_number#5]
Functions [2]: [merge_sum(UnscaledValue(ws_ext_ship_cost#6)), merge_sum(UnscaledValue(ws_net_profit#7))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#6))#26, sum(UnscaledValue(ws_net_profit#7))#27]
Results [3]: [ws_order_number#5, sum#28, sum#29]

(48) HashAggregate [codegen id : 13]
Input [3]: [ws_order_number#5, sum#28, sum#29]
Keys: []
Functions [3]: [merge_sum(UnscaledValue(ws_ext_ship_cost#6)), merge_sum(UnscaledValue(ws_net_profit#7)), partial_count(distinct ws_order_number#5)]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#6))#26, sum(UnscaledValue(ws_net_profit#7))#27, count(ws_order_number#5)#31]
Results [3]: [sum#28, sum#29, count#32]

(49) Exchange
Input [3]: [sum#28, sum#29, count#32]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#33]

(50) HashAggregate [codegen id : 14]
Input [3]: [sum#28, sum#29, count#32]
Keys: []
Functions [3]: [sum(UnscaledValue(ws_ext_ship_cost#6)), sum(UnscaledValue(ws_net_profit#7)), count(distinct ws_order_number#5)]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#6))#26, sum(UnscaledValue(ws_net_profit#7))#27, count(ws_order_number#5)#31]
Results [3]: [count(ws_order_number#5)#31 AS order count #34, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#6))#26,17,2) AS total shipping cost #35, MakeDecimal(sum(UnscaledValue(ws_net_profit#7))#27,17,2) AS total net profit #36]

(51) Sort [codegen id : 14]
Input [3]: [order count #34, total shipping cost #35, total net profit #36]
Arguments: [order count #34 ASC NULLS FIRST], true, 0

