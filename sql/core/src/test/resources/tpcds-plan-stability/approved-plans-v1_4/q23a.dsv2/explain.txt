== Physical Plan ==
* HashAggregate (79)
+- Exchange (78)
   +- * HashAggregate (77)
      +- Union (76)
         :- * Project (54)
         :  +- * BroadcastHashJoin Inner BuildRight (53)
         :     :- * Project (48)
         :     :  +- * SortMergeJoin LeftSemi (47)
         :     :     :- * Sort (31)
         :     :     :  +- Exchange (30)
         :     :     :     +- * Project (29)
         :     :     :        +- * SortMergeJoin LeftSemi (28)
         :     :     :           :- * Sort (5)
         :     :     :           :  +- Exchange (4)
         :     :     :           :     +- * Project (3)
         :     :     :           :        +- * Filter (2)
         :     :     :           :           +- BatchScan default.catalog_sales (1)
         :     :     :           +- * Sort (27)
         :     :     :              +- Exchange (26)
         :     :     :                 +- * Project (25)
         :     :     :                    +- * Filter (24)
         :     :     :                       +- * HashAggregate (23)
         :     :     :                          +- Exchange (22)
         :     :     :                             +- * HashAggregate (21)
         :     :     :                                +- * Project (20)
         :     :     :                                   +- * BroadcastHashJoin Inner BuildRight (19)
         :     :     :                                      :- * Project (14)
         :     :     :                                      :  +- * BroadcastHashJoin Inner BuildRight (13)
         :     :     :                                      :     :- * Project (8)
         :     :     :                                      :     :  +- * Filter (7)
         :     :     :                                      :     :     +- BatchScan default.store_sales (6)
         :     :     :                                      :     +- BroadcastExchange (12)
         :     :     :                                      :        +- * Project (11)
         :     :     :                                      :           +- * Filter (10)
         :     :     :                                      :              +- BatchScan default.date_dim (9)
         :     :     :                                      +- BroadcastExchange (18)
         :     :     :                                         +- * Project (17)
         :     :     :                                            +- * Filter (16)
         :     :     :                                               +- BatchScan default.item (15)
         :     :     +- * Sort (46)
         :     :        +- * Project (45)
         :     :           +- * Filter (44)
         :     :              +- * HashAggregate (43)
         :     :                 +- Exchange (42)
         :     :                    +- * HashAggregate (41)
         :     :                       +- * Project (40)
         :     :                          +- * BroadcastHashJoin Inner BuildRight (39)
         :     :                             :- * Project (34)
         :     :                             :  +- * Filter (33)
         :     :                             :     +- BatchScan default.store_sales (32)
         :     :                             +- BroadcastExchange (38)
         :     :                                +- * Project (37)
         :     :                                   +- * Filter (36)
         :     :                                      +- BatchScan default.customer (35)
         :     +- BroadcastExchange (52)
         :        +- * Project (51)
         :           +- * Filter (50)
         :              +- BatchScan default.date_dim (49)
         +- * Project (75)
            +- * BroadcastHashJoin Inner BuildRight (74)
               :- * Project (72)
               :  +- * SortMergeJoin LeftSemi (71)
               :     :- * Sort (65)
               :     :  +- Exchange (64)
               :     :     +- * Project (63)
               :     :        +- * SortMergeJoin LeftSemi (62)
               :     :           :- * Sort (59)
               :     :           :  +- Exchange (58)
               :     :           :     +- * Project (57)
               :     :           :        +- * Filter (56)
               :     :           :           +- BatchScan default.web_sales (55)
               :     :           +- * Sort (61)
               :     :              +- ReusedExchange (60)
               :     +- * Sort (70)
               :        +- * Project (69)
               :           +- * Filter (68)
               :              +- * HashAggregate (67)
               :                 +- ReusedExchange (66)
               +- ReusedExchange (73)


(1) BatchScan default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PartitionFilters: [isnotnull(cs_sold_date_sk#5)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) Filter [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Condition : might_contain(Subquery scalar-subquery#6, [id=#7], xxhash64(cs_sold_date_sk#5, 42))

(3) Project [codegen id : 1]
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(4) Exchange
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_item_sk#2, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_item_sk#2 ASC NULLS FIRST], false, 0

(6) BatchScan default.store_sales
Output [2]: [ss_item_sk#8, ss_sold_date_sk#9]
DataFilters: [isnotnull(ss_item_sk#8)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_sales]
PartitionFilters: [isnotnull(ss_sold_date_sk#9)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(7) Filter [codegen id : 5]
Input [2]: [ss_item_sk#8, ss_sold_date_sk#9]
Condition : isnotnull(ss_item_sk#8)

(8) Project [codegen id : 5]
Output [2]: [ss_item_sk#8, ss_sold_date_sk#9]
Input [2]: [ss_item_sk#8, ss_sold_date_sk#9]

(9) BatchScan default.date_dim
Output [3]: [d_date_sk#10, d_date#11, d_year#12]
DataFilters: [d_year#12 IN (2000,2001,2002,2003), isnotnull(d_date_sk#10)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(10) Filter [codegen id : 3]
Input [3]: [d_date_sk#10, d_date#11, d_year#12]
Condition : (d_year#12 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#10))

(11) Project [codegen id : 3]
Output [2]: [d_date_sk#10, d_date#11]
Input [3]: [d_date_sk#10, d_date#11, d_year#12]

(12) BroadcastExchange
Input [2]: [d_date_sk#10, d_date#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(13) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#9]
Right keys [1]: [d_date_sk#10]
Join type: Inner
Join condition: None

(14) Project [codegen id : 5]
Output [2]: [ss_item_sk#8, d_date#11]
Input [4]: [ss_item_sk#8, ss_sold_date_sk#9, d_date_sk#10, d_date#11]

(15) BatchScan default.item
Output [2]: [i_item_sk#13, i_item_desc#14]
DataFilters: [isnotnull(i_item_sk#13)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(16) Filter [codegen id : 4]
Input [2]: [i_item_sk#13, i_item_desc#14]
Condition : isnotnull(i_item_sk#13)

(17) Project [codegen id : 4]
Output [2]: [i_item_sk#13, i_item_desc#14]
Input [2]: [i_item_sk#13, i_item_desc#14]

(18) BroadcastExchange
Input [2]: [i_item_sk#13, i_item_desc#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(19) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#13]
Join type: Inner
Join condition: None

(20) Project [codegen id : 5]
Output [3]: [d_date#11, i_item_sk#13, substr(i_item_desc#14, 1, 30) AS _groupingexpression#15]
Input [4]: [ss_item_sk#8, d_date#11, i_item_sk#13, i_item_desc#14]

(21) HashAggregate [codegen id : 5]
Input [3]: [d_date#11, i_item_sk#13, _groupingexpression#15]
Keys [3]: [_groupingexpression#15, i_item_sk#13, d_date#11]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#16]
Results [4]: [_groupingexpression#15, i_item_sk#13, d_date#11, count#17]

(22) Exchange
Input [4]: [_groupingexpression#15, i_item_sk#13, d_date#11, count#17]
Arguments: hashpartitioning(_groupingexpression#15, i_item_sk#13, d_date#11, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(23) HashAggregate [codegen id : 6]
Input [4]: [_groupingexpression#15, i_item_sk#13, d_date#11, count#17]
Keys [3]: [_groupingexpression#15, i_item_sk#13, d_date#11]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#18]
Results [2]: [i_item_sk#13 AS item_sk#19, count(1)#18 AS cnt#20]

(24) Filter [codegen id : 6]
Input [2]: [item_sk#19, cnt#20]
Condition : (cnt#20 > 4)

(25) Project [codegen id : 6]
Output [1]: [item_sk#19]
Input [2]: [item_sk#19, cnt#20]

(26) Exchange
Input [1]: [item_sk#19]
Arguments: hashpartitioning(item_sk#19, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(27) Sort [codegen id : 7]
Input [1]: [item_sk#19]
Arguments: [item_sk#19 ASC NULLS FIRST], false, 0

(28) SortMergeJoin [codegen id : 8]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#19]
Join type: LeftSemi
Join condition: None

(29) Project [codegen id : 8]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(30) Exchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(31) Sort [codegen id : 9]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(32) BatchScan default.store_sales
Output [3]: [ss_customer_sk#21, ss_quantity#22, ss_sales_price#23]
DataFilters: [isnotnull(ss_customer_sk#21)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(33) Filter [codegen id : 11]
Input [3]: [ss_customer_sk#21, ss_quantity#22, ss_sales_price#23]
Condition : isnotnull(ss_customer_sk#21)

(34) Project [codegen id : 11]
Output [3]: [ss_customer_sk#21, ss_quantity#22, ss_sales_price#23]
Input [3]: [ss_customer_sk#21, ss_quantity#22, ss_sales_price#23]

(35) BatchScan default.customer
Output [1]: [c_customer_sk#24]
DataFilters: [isnotnull(c_customer_sk#24)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(36) Filter [codegen id : 10]
Input [1]: [c_customer_sk#24]
Condition : isnotnull(c_customer_sk#24)

(37) Project [codegen id : 10]
Output [1]: [c_customer_sk#24]
Input [1]: [c_customer_sk#24]

(38) BroadcastExchange
Input [1]: [c_customer_sk#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

(39) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_customer_sk#21]
Right keys [1]: [c_customer_sk#24]
Join type: Inner
Join condition: None

(40) Project [codegen id : 11]
Output [3]: [ss_quantity#22, ss_sales_price#23, c_customer_sk#24]
Input [4]: [ss_customer_sk#21, ss_quantity#22, ss_sales_price#23, c_customer_sk#24]

(41) HashAggregate [codegen id : 11]
Input [3]: [ss_quantity#22, ss_sales_price#23, c_customer_sk#24]
Keys [1]: [c_customer_sk#24]
Functions [1]: [partial_sum((cast(ss_quantity#22 as decimal(10,0)) * ss_sales_price#23))]
Aggregate Attributes [2]: [sum#25, isEmpty#26]
Results [3]: [c_customer_sk#24, sum#27, isEmpty#28]

(42) Exchange
Input [3]: [c_customer_sk#24, sum#27, isEmpty#28]
Arguments: hashpartitioning(c_customer_sk#24, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(43) HashAggregate [codegen id : 12]
Input [3]: [c_customer_sk#24, sum#27, isEmpty#28]
Keys [1]: [c_customer_sk#24]
Functions [1]: [sum((cast(ss_quantity#22 as decimal(10,0)) * ss_sales_price#23))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#22 as decimal(10,0)) * ss_sales_price#23))#29]
Results [2]: [c_customer_sk#24, sum((cast(ss_quantity#22 as decimal(10,0)) * ss_sales_price#23))#29 AS ssales#30]

(44) Filter [codegen id : 12]
Input [2]: [c_customer_sk#24, ssales#30]
Condition : (isnotnull(ssales#30) AND (cast(ssales#30 as decimal(38,8)) > (0.500000 * Subquery scalar-subquery#31, [id=#32])))

(45) Project [codegen id : 12]
Output [1]: [c_customer_sk#24]
Input [2]: [c_customer_sk#24, ssales#30]

(46) Sort [codegen id : 12]
Input [1]: [c_customer_sk#24]
Arguments: [c_customer_sk#24 ASC NULLS FIRST], false, 0

(47) SortMergeJoin [codegen id : 14]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#24]
Join type: LeftSemi
Join condition: None

(48) Project [codegen id : 14]
Output [3]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(49) BatchScan default.date_dim
Output [3]: [d_date_sk#33, d_year#34, d_moy#35]
DataFilters: [isnotnull(d_year#34), isnotnull(d_moy#35), (d_year#34 = 2000), (d_moy#35 = 2), isnotnull(d_date_sk#33)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(50) Filter [codegen id : 13]
Input [3]: [d_date_sk#33, d_year#34, d_moy#35]
Condition : ((((isnotnull(d_year#34) AND isnotnull(d_moy#35)) AND (d_year#34 = 2000)) AND (d_moy#35 = 2)) AND isnotnull(d_date_sk#33))

(51) Project [codegen id : 13]
Output [1]: [d_date_sk#33]
Input [3]: [d_date_sk#33, d_year#34, d_moy#35]

(52) BroadcastExchange
Input [1]: [d_date_sk#33]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

(53) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#33]
Join type: Inner
Join condition: None

(54) Project [codegen id : 14]
Output [1]: [(cast(cs_quantity#3 as decimal(10,0)) * cs_list_price#4) AS sales#36]
Input [4]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, d_date_sk#33]

(55) BatchScan default.web_sales
Output [5]: [ws_item_sk#37, ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/web_sales]
PartitionFilters: [isnotnull(ws_sold_date_sk#41)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(56) Filter [codegen id : 15]
Input [5]: [ws_item_sk#37, ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Condition : might_contain(ReusedSubquery Subquery scalar-subquery#6, [id=#7], xxhash64(ws_sold_date_sk#41, 42))

(57) Project [codegen id : 15]
Output [5]: [ws_item_sk#37, ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Input [5]: [ws_item_sk#37, ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]

(58) Exchange
Input [5]: [ws_item_sk#37, ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Arguments: hashpartitioning(ws_item_sk#37, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(59) Sort [codegen id : 16]
Input [5]: [ws_item_sk#37, ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Arguments: [ws_item_sk#37 ASC NULLS FIRST], false, 0

(60) ReusedExchange [Reuses operator id: 26]
Output [1]: [item_sk#19]

(61) Sort [codegen id : 21]
Input [1]: [item_sk#19]
Arguments: [item_sk#19 ASC NULLS FIRST], false, 0

(62) SortMergeJoin [codegen id : 22]
Left keys [1]: [ws_item_sk#37]
Right keys [1]: [item_sk#19]
Join type: LeftSemi
Join condition: None

(63) Project [codegen id : 22]
Output [4]: [ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Input [5]: [ws_item_sk#37, ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]

(64) Exchange
Input [4]: [ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Arguments: hashpartitioning(ws_bill_customer_sk#38, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(65) Sort [codegen id : 23]
Input [4]: [ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Arguments: [ws_bill_customer_sk#38 ASC NULLS FIRST], false, 0

(66) ReusedExchange [Reuses operator id: 42]
Output [3]: [c_customer_sk#24, sum#27, isEmpty#28]

(67) HashAggregate [codegen id : 26]
Input [3]: [c_customer_sk#24, sum#27, isEmpty#28]
Keys [1]: [c_customer_sk#24]
Functions [1]: [sum((cast(ss_quantity#22 as decimal(10,0)) * ss_sales_price#23))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#22 as decimal(10,0)) * ss_sales_price#23))#29]
Results [2]: [c_customer_sk#24, sum((cast(ss_quantity#22 as decimal(10,0)) * ss_sales_price#23))#29 AS ssales#30]

(68) Filter [codegen id : 26]
Input [2]: [c_customer_sk#24, ssales#30]
Condition : (isnotnull(ssales#30) AND (cast(ssales#30 as decimal(38,8)) > (0.500000 * ReusedSubquery Subquery scalar-subquery#31, [id=#32])))

(69) Project [codegen id : 26]
Output [1]: [c_customer_sk#24]
Input [2]: [c_customer_sk#24, ssales#30]

(70) Sort [codegen id : 26]
Input [1]: [c_customer_sk#24]
Arguments: [c_customer_sk#24 ASC NULLS FIRST], false, 0

(71) SortMergeJoin [codegen id : 28]
Left keys [1]: [ws_bill_customer_sk#38]
Right keys [1]: [c_customer_sk#24]
Join type: LeftSemi
Join condition: None

(72) Project [codegen id : 28]
Output [3]: [ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Input [4]: [ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]

(73) ReusedExchange [Reuses operator id: 52]
Output [1]: [d_date_sk#42]

(74) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [ws_sold_date_sk#41]
Right keys [1]: [d_date_sk#42]
Join type: Inner
Join condition: None

(75) Project [codegen id : 28]
Output [1]: [(cast(ws_quantity#39 as decimal(10,0)) * ws_list_price#40) AS sales#43]
Input [4]: [ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41, d_date_sk#42]

(76) Union

(77) HashAggregate [codegen id : 29]
Input [1]: [sales#36]
Keys: []
Functions [1]: [partial_sum(sales#36)]
Aggregate Attributes [2]: [sum#44, isEmpty#45]
Results [2]: [sum#46, isEmpty#47]

(78) Exchange
Input [2]: [sum#46, isEmpty#47]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=12]

(79) HashAggregate [codegen id : 30]
Input [2]: [sum#46, isEmpty#47]
Keys: []
Functions [1]: [sum(sales#36)]
Aggregate Attributes [1]: [sum(sales#36)#48]
Results [1]: [sum(sales#36)#48 AS sum(sales)#49]

===== Subqueries =====

Subquery:1 Hosting operator id = 2 Hosting Expression = Subquery scalar-subquery#6, [id=#7]
ObjectHashAggregate (85)
+- Exchange (84)
   +- ObjectHashAggregate (83)
      +- * Project (82)
         +- * Filter (81)
            +- BatchScan default.date_dim (80)


(80) BatchScan default.date_dim
Output [3]: [d_date_sk#33, d_year#34, d_moy#35]
DataFilters: [isnotnull(d_year#34), isnotnull(d_moy#35), (d_year#34 = 2000), (d_moy#35 = 2), isnotnull(d_date_sk#33)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(81) Filter [codegen id : 1]
Input [3]: [d_date_sk#33, d_year#34, d_moy#35]
Condition : ((((isnotnull(d_year#34) AND isnotnull(d_moy#35)) AND (d_year#34 = 2000)) AND (d_moy#35 = 2)) AND isnotnull(d_date_sk#33))

(82) Project [codegen id : 1]
Output [1]: [d_date_sk#33]
Input [3]: [d_date_sk#33, d_year#34, d_moy#35]

(83) ObjectHashAggregate
Input [1]: [d_date_sk#33]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(d_date_sk#33, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#50]
Results [1]: [buf#51]

(84) Exchange
Input [1]: [buf#51]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=13]

(85) ObjectHashAggregate
Input [1]: [buf#51]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(d_date_sk#33, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(d_date_sk#33, 42), 1000000, 8388608, 0, 0)#52]
Results [1]: [bloom_filter_agg(xxhash64(d_date_sk#33, 42), 1000000, 8388608, 0, 0)#52 AS bloomFilter#53]

Subquery:2 Hosting operator id = 44 Hosting Expression = Subquery scalar-subquery#31, [id=#32]
* HashAggregate (103)
+- Exchange (102)
   +- * HashAggregate (101)
      +- * HashAggregate (100)
         +- Exchange (99)
            +- * HashAggregate (98)
               +- * Project (97)
                  +- * BroadcastHashJoin Inner BuildRight (96)
                     :- * Project (91)
                     :  +- * BroadcastHashJoin Inner BuildRight (90)
                     :     :- * Project (88)
                     :     :  +- * Filter (87)
                     :     :     +- BatchScan default.store_sales (86)
                     :     +- ReusedExchange (89)
                     +- BroadcastExchange (95)
                        +- * Project (94)
                           +- * Filter (93)
                              +- BatchScan default.date_dim (92)


(86) BatchScan default.store_sales
Output [4]: [ss_customer_sk#54, ss_quantity#55, ss_sales_price#56, ss_sold_date_sk#57]
DataFilters: [isnotnull(ss_customer_sk#54)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_sales]
PartitionFilters: [isnotnull(ss_sold_date_sk#57)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(87) Filter [codegen id : 3]
Input [4]: [ss_customer_sk#54, ss_quantity#55, ss_sales_price#56, ss_sold_date_sk#57]
Condition : isnotnull(ss_customer_sk#54)

(88) Project [codegen id : 3]
Output [4]: [ss_customer_sk#54, ss_quantity#55, ss_sales_price#56, ss_sold_date_sk#57]
Input [4]: [ss_customer_sk#54, ss_quantity#55, ss_sales_price#56, ss_sold_date_sk#57]

(89) ReusedExchange [Reuses operator id: 38]
Output [1]: [c_customer_sk#58]

(90) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_customer_sk#54]
Right keys [1]: [c_customer_sk#58]
Join type: Inner
Join condition: None

(91) Project [codegen id : 3]
Output [4]: [ss_quantity#55, ss_sales_price#56, ss_sold_date_sk#57, c_customer_sk#58]
Input [5]: [ss_customer_sk#54, ss_quantity#55, ss_sales_price#56, ss_sold_date_sk#57, c_customer_sk#58]

(92) BatchScan default.date_dim
Output [2]: [d_date_sk#59, d_year#60]
DataFilters: [d_year#60 IN (2000,2001,2002,2003), isnotnull(d_date_sk#59)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(93) Filter [codegen id : 2]
Input [2]: [d_date_sk#59, d_year#60]
Condition : (d_year#60 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#59))

(94) Project [codegen id : 2]
Output [1]: [d_date_sk#59]
Input [2]: [d_date_sk#59, d_year#60]

(95) BroadcastExchange
Input [1]: [d_date_sk#59]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=14]

(96) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#57]
Right keys [1]: [d_date_sk#59]
Join type: Inner
Join condition: None

(97) Project [codegen id : 3]
Output [3]: [ss_quantity#55, ss_sales_price#56, c_customer_sk#58]
Input [5]: [ss_quantity#55, ss_sales_price#56, ss_sold_date_sk#57, c_customer_sk#58, d_date_sk#59]

(98) HashAggregate [codegen id : 3]
Input [3]: [ss_quantity#55, ss_sales_price#56, c_customer_sk#58]
Keys [1]: [c_customer_sk#58]
Functions [1]: [partial_sum((cast(ss_quantity#55 as decimal(10,0)) * ss_sales_price#56))]
Aggregate Attributes [2]: [sum#61, isEmpty#62]
Results [3]: [c_customer_sk#58, sum#63, isEmpty#64]

(99) Exchange
Input [3]: [c_customer_sk#58, sum#63, isEmpty#64]
Arguments: hashpartitioning(c_customer_sk#58, 5), ENSURE_REQUIREMENTS, [plan_id=15]

(100) HashAggregate [codegen id : 4]
Input [3]: [c_customer_sk#58, sum#63, isEmpty#64]
Keys [1]: [c_customer_sk#58]
Functions [1]: [sum((cast(ss_quantity#55 as decimal(10,0)) * ss_sales_price#56))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#55 as decimal(10,0)) * ss_sales_price#56))#65]
Results [1]: [sum((cast(ss_quantity#55 as decimal(10,0)) * ss_sales_price#56))#65 AS csales#66]

(101) HashAggregate [codegen id : 4]
Input [1]: [csales#66]
Keys: []
Functions [1]: [partial_max(csales#66)]
Aggregate Attributes [1]: [max#67]
Results [1]: [max#68]

(102) Exchange
Input [1]: [max#68]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=16]

(103) HashAggregate [codegen id : 5]
Input [1]: [max#68]
Keys: []
Functions [1]: [max(csales#66)]
Aggregate Attributes [1]: [max(csales#66)#69]
Results [1]: [max(csales#66)#69 AS tpcds_cmax#70]

Subquery:3 Hosting operator id = 56 Hosting Expression = ReusedSubquery Subquery scalar-subquery#6, [id=#7]

Subquery:4 Hosting operator id = 68 Hosting Expression = ReusedSubquery Subquery scalar-subquery#31, [id=#32]


