== Physical Plan ==
TakeOrderedAndProject (62)
+- * Project (61)
   +- * BroadcastHashJoin Inner BuildRight (60)
      :- * Project (46)
      :  +- * BroadcastHashJoin Inner BuildRight (45)
      :     :- * HashAggregate (31)
      :     :  +- Exchange (30)
      :     :     +- * HashAggregate (29)
      :     :        +- * Project (28)
      :     :           +- * BroadcastHashJoin Inner BuildRight (27)
      :     :              :- * Project (9)
      :     :              :  +- * BroadcastHashJoin Inner BuildRight (8)
      :     :              :     :- * Filter (3)
      :     :              :     :  +- * ColumnarToRow (2)
      :     :              :     :     +- Scan parquet default.store_returns (1)
      :     :              :     +- BroadcastExchange (7)
      :     :              :        +- * Filter (6)
      :     :              :           +- * ColumnarToRow (5)
      :     :              :              +- Scan parquet default.item (4)
      :     :              +- BroadcastExchange (26)
      :     :                 +- * Project (25)
      :     :                    +- * BroadcastHashJoin LeftSemi BuildRight (24)
      :     :                       :- * Filter (12)
      :     :                       :  +- * ColumnarToRow (11)
      :     :                       :     +- Scan parquet default.date_dim (10)
      :     :                       +- BroadcastExchange (23)
      :     :                          +- * Project (22)
      :     :                             +- * BroadcastHashJoin LeftSemi BuildRight (21)
      :     :                                :- * Filter (15)
      :     :                                :  +- * ColumnarToRow (14)
      :     :                                :     +- Scan parquet default.date_dim (13)
      :     :                                +- BroadcastExchange (20)
      :     :                                   +- * Project (19)
      :     :                                      +- * Filter (18)
      :     :                                         +- * ColumnarToRow (17)
      :     :                                            +- Scan parquet default.date_dim (16)
      :     +- BroadcastExchange (44)
      :        +- * HashAggregate (43)
      :           +- Exchange (42)
      :              +- * HashAggregate (41)
      :                 +- * Project (40)
      :                    +- * BroadcastHashJoin Inner BuildRight (39)
      :                       :- * Project (37)
      :                       :  +- * BroadcastHashJoin Inner BuildRight (36)
      :                       :     :- * Filter (34)
      :                       :     :  +- * ColumnarToRow (33)
      :                       :     :     +- Scan parquet default.catalog_returns (32)
      :                       :     +- ReusedExchange (35)
      :                       +- ReusedExchange (38)
      +- BroadcastExchange (59)
         +- * HashAggregate (58)
            +- Exchange (57)
               +- * HashAggregate (56)
                  +- * Project (55)
                     +- * BroadcastHashJoin Inner BuildRight (54)
                        :- * Project (52)
                        :  +- * BroadcastHashJoin Inner BuildRight (51)
                        :     :- * Filter (49)
                        :     :  +- * ColumnarToRow (48)
                        :     :     +- Scan parquet default.web_returns (47)
                        :     +- ReusedExchange (50)
                        +- ReusedExchange (53)


(1) Scan parquet default.store_returns
Output [3]: [sr_returned_date_sk#1, sr_item_sk#2, sr_return_quantity#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_returned_date_sk)]
ReadSchema: struct<sr_returned_date_sk:bigint,sr_item_sk:bigint,sr_return_quantity:int>

(2) ColumnarToRow [codegen id : 5]
Input [3]: [sr_returned_date_sk#1, sr_item_sk#2, sr_return_quantity#3]

(3) Filter [codegen id : 5]
Input [3]: [sr_returned_date_sk#1, sr_item_sk#2, sr_return_quantity#3]
Condition : (isnotnull(sr_item_sk#2) AND isnotnull(sr_returned_date_sk#1))

(4) Scan parquet default.item
Output [2]: [i_item_sk#4, i_item_id#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_item_id)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [i_item_sk#4, i_item_id#5]

(6) Filter [codegen id : 1]
Input [2]: [i_item_sk#4, i_item_id#5]
Condition : (isnotnull(i_item_sk#4) AND isnotnull(i_item_id#5))

(7) BroadcastExchange
Input [2]: [i_item_sk#4, i_item_id#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#6]

(8) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [sr_item_sk#2]
Right keys [1]: [cast(i_item_sk#4 as bigint)]
Join condition: None

(9) Project [codegen id : 5]
Output [3]: [sr_returned_date_sk#1, sr_return_quantity#3, i_item_id#5]
Input [5]: [sr_returned_date_sk#1, sr_item_sk#2, sr_return_quantity#3, i_item_sk#4, i_item_id#5]

(10) Scan parquet default.date_dim
Output [2]: [d_date_sk#7, d_date#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk), IsNotNull(d_date)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(11) ColumnarToRow [codegen id : 4]
Input [2]: [d_date_sk#7, d_date#8]

(12) Filter [codegen id : 4]
Input [2]: [d_date_sk#7, d_date#8]
Condition : (isnotnull(d_date_sk#7) AND isnotnull(d_date#8))

(13) Scan parquet default.date_dim
Output [2]: [d_date#8, d_week_seq#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(14) ColumnarToRow [codegen id : 3]
Input [2]: [d_date#8, d_week_seq#9]

(15) Filter [codegen id : 3]
Input [2]: [d_date#8, d_week_seq#9]
Condition : (isnotnull(d_week_seq#9) AND isnotnull(d_date#8))

(16) Scan parquet default.date_dim
Output [2]: [d_date#8, d_week_seq#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(17) ColumnarToRow [codegen id : 2]
Input [2]: [d_date#8, d_week_seq#9]

(18) Filter [codegen id : 2]
Input [2]: [d_date#8, d_week_seq#9]
Condition : (cast(d_date#8 as string) IN (2000-06-30,2000-09-27,2000-11-17) AND isnotnull(d_week_seq#9))

(19) Project [codegen id : 2]
Output [1]: [d_week_seq#9 AS d_week_seq#9#10]
Input [2]: [d_date#8, d_week_seq#9]

(20) BroadcastExchange
Input [1]: [d_week_seq#9#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#11]

(21) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [d_week_seq#9]
Right keys [1]: [d_week_seq#9#10]
Join condition: None

(22) Project [codegen id : 3]
Output [1]: [d_date#8 AS d_date#8#12]
Input [2]: [d_date#8, d_week_seq#9]

(23) BroadcastExchange
Input [1]: [d_date#8#12]
Arguments: HashedRelationBroadcastMode(List(input[0, date, true]),false), [id=#13]

(24) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [d_date#8]
Right keys [1]: [d_date#8#12]
Join condition: None

(25) Project [codegen id : 4]
Output [1]: [d_date_sk#7]
Input [2]: [d_date_sk#7, d_date#8]

(26) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(27) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [sr_returned_date_sk#1]
Right keys [1]: [cast(d_date_sk#7 as bigint)]
Join condition: None

(28) Project [codegen id : 5]
Output [2]: [sr_return_quantity#3, i_item_id#5]
Input [4]: [sr_returned_date_sk#1, sr_return_quantity#3, i_item_id#5, d_date_sk#7]

(29) HashAggregate [codegen id : 5]
Input [2]: [sr_return_quantity#3, i_item_id#5]
Keys [1]: [i_item_id#5]
Functions [1]: [partial_sum(cast(sr_return_quantity#3 as bigint))]
Aggregate Attributes [1]: [sum#15]
Results [2]: [i_item_id#5, sum#16]

(30) Exchange
Input [2]: [i_item_id#5, sum#16]
Arguments: hashpartitioning(i_item_id#5, 5), true, [id=#17]

(31) HashAggregate [codegen id : 18]
Input [2]: [i_item_id#5, sum#16]
Keys [1]: [i_item_id#5]
Functions [1]: [sum(cast(sr_return_quantity#3 as bigint))]
Aggregate Attributes [1]: [sum(cast(sr_return_quantity#3 as bigint))#18]
Results [2]: [i_item_id#5 AS item_id#19, sum(cast(sr_return_quantity#3 as bigint))#18 AS sr_item_qty#20]

(32) Scan parquet default.catalog_returns
Output [3]: [cr_returned_date_sk#21, cr_item_sk#22, cr_return_quantity#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_returned_date_sk)]
ReadSchema: struct<cr_returned_date_sk:int,cr_item_sk:int,cr_return_quantity:int>

(33) ColumnarToRow [codegen id : 10]
Input [3]: [cr_returned_date_sk#21, cr_item_sk#22, cr_return_quantity#23]

(34) Filter [codegen id : 10]
Input [3]: [cr_returned_date_sk#21, cr_item_sk#22, cr_return_quantity#23]
Condition : (isnotnull(cr_item_sk#22) AND isnotnull(cr_returned_date_sk#21))

(35) ReusedExchange [Reuses operator id: 7]
Output [2]: [i_item_sk#4, i_item_id#5]

(36) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cr_item_sk#22]
Right keys [1]: [i_item_sk#4]
Join condition: None

(37) Project [codegen id : 10]
Output [3]: [cr_returned_date_sk#21, cr_return_quantity#23, i_item_id#5]
Input [5]: [cr_returned_date_sk#21, cr_item_sk#22, cr_return_quantity#23, i_item_sk#4, i_item_id#5]

(38) ReusedExchange [Reuses operator id: 26]
Output [1]: [d_date_sk#7]

(39) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cr_returned_date_sk#21]
Right keys [1]: [d_date_sk#7]
Join condition: None

(40) Project [codegen id : 10]
Output [2]: [cr_return_quantity#23, i_item_id#5]
Input [4]: [cr_returned_date_sk#21, cr_return_quantity#23, i_item_id#5, d_date_sk#7]

(41) HashAggregate [codegen id : 10]
Input [2]: [cr_return_quantity#23, i_item_id#5]
Keys [1]: [i_item_id#5]
Functions [1]: [partial_sum(cast(cr_return_quantity#23 as bigint))]
Aggregate Attributes [1]: [sum#24]
Results [2]: [i_item_id#5, sum#25]

(42) Exchange
Input [2]: [i_item_id#5, sum#25]
Arguments: hashpartitioning(i_item_id#5, 5), true, [id=#26]

(43) HashAggregate [codegen id : 11]
Input [2]: [i_item_id#5, sum#25]
Keys [1]: [i_item_id#5]
Functions [1]: [sum(cast(cr_return_quantity#23 as bigint))]
Aggregate Attributes [1]: [sum(cast(cr_return_quantity#23 as bigint))#27]
Results [2]: [i_item_id#5 AS item_id#28, sum(cast(cr_return_quantity#23 as bigint))#27 AS cr_item_qty#29]

(44) BroadcastExchange
Input [2]: [item_id#28, cr_item_qty#29]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#30]

(45) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [item_id#19]
Right keys [1]: [item_id#28]
Join condition: None

(46) Project [codegen id : 18]
Output [3]: [item_id#19, sr_item_qty#20, cr_item_qty#29]
Input [4]: [item_id#19, sr_item_qty#20, item_id#28, cr_item_qty#29]

(47) Scan parquet default.web_returns
Output [3]: [wr_returned_date_sk#31, wr_item_sk#32, wr_return_quantity#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_returned_date_sk)]
ReadSchema: struct<wr_returned_date_sk:bigint,wr_item_sk:bigint,wr_return_quantity:int>

(48) ColumnarToRow [codegen id : 16]
Input [3]: [wr_returned_date_sk#31, wr_item_sk#32, wr_return_quantity#33]

(49) Filter [codegen id : 16]
Input [3]: [wr_returned_date_sk#31, wr_item_sk#32, wr_return_quantity#33]
Condition : (isnotnull(wr_item_sk#32) AND isnotnull(wr_returned_date_sk#31))

(50) ReusedExchange [Reuses operator id: 7]
Output [2]: [i_item_sk#4, i_item_id#5]

(51) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [wr_item_sk#32]
Right keys [1]: [cast(i_item_sk#4 as bigint)]
Join condition: None

(52) Project [codegen id : 16]
Output [3]: [wr_returned_date_sk#31, wr_return_quantity#33, i_item_id#5]
Input [5]: [wr_returned_date_sk#31, wr_item_sk#32, wr_return_quantity#33, i_item_sk#4, i_item_id#5]

(53) ReusedExchange [Reuses operator id: 26]
Output [1]: [d_date_sk#7]

(54) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [wr_returned_date_sk#31]
Right keys [1]: [cast(d_date_sk#7 as bigint)]
Join condition: None

(55) Project [codegen id : 16]
Output [2]: [wr_return_quantity#33, i_item_id#5]
Input [4]: [wr_returned_date_sk#31, wr_return_quantity#33, i_item_id#5, d_date_sk#7]

(56) HashAggregate [codegen id : 16]
Input [2]: [wr_return_quantity#33, i_item_id#5]
Keys [1]: [i_item_id#5]
Functions [1]: [partial_sum(cast(wr_return_quantity#33 as bigint))]
Aggregate Attributes [1]: [sum#34]
Results [2]: [i_item_id#5, sum#35]

(57) Exchange
Input [2]: [i_item_id#5, sum#35]
Arguments: hashpartitioning(i_item_id#5, 5), true, [id=#36]

(58) HashAggregate [codegen id : 17]
Input [2]: [i_item_id#5, sum#35]
Keys [1]: [i_item_id#5]
Functions [1]: [sum(cast(wr_return_quantity#33 as bigint))]
Aggregate Attributes [1]: [sum(cast(wr_return_quantity#33 as bigint))#37]
Results [2]: [i_item_id#5 AS item_id#38, sum(cast(wr_return_quantity#33 as bigint))#37 AS wr_item_qty#39]

(59) BroadcastExchange
Input [2]: [item_id#38, wr_item_qty#39]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#40]

(60) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [item_id#19]
Right keys [1]: [item_id#38]
Join condition: None

(61) Project [codegen id : 18]
Output [8]: [item_id#19, sr_item_qty#20, (((cast(sr_item_qty#20 as double) / cast(((sr_item_qty#20 + cr_item_qty#29) + wr_item_qty#39) as double)) / 3.0) * 100.0) AS sr_dev#41, cr_item_qty#29, (((cast(cr_item_qty#29 as double) / cast(((sr_item_qty#20 + cr_item_qty#29) + wr_item_qty#39) as double)) / 3.0) * 100.0) AS cr_dev#42, wr_item_qty#39, (((cast(wr_item_qty#39 as double) / cast(((sr_item_qty#20 + cr_item_qty#29) + wr_item_qty#39) as double)) / 3.0) * 100.0) AS wr_dev#43, CheckOverflow((promote_precision(cast(cast(((sr_item_qty#20 + cr_item_qty#29) + wr_item_qty#39) as decimal(20,0)) as decimal(21,1))) / 3.0), DecimalType(27,6), true) AS average#44]
Input [5]: [item_id#19, sr_item_qty#20, cr_item_qty#29, item_id#38, wr_item_qty#39]

(62) TakeOrderedAndProject
Input [8]: [item_id#19, sr_item_qty#20, sr_dev#41, cr_item_qty#29, cr_dev#42, wr_item_qty#39, wr_dev#43, average#44]
Arguments: 100, [item_id#19 ASC NULLS FIRST, sr_item_qty#20 ASC NULLS FIRST], [item_id#19, sr_item_qty#20, sr_dev#41, cr_item_qty#29, cr_dev#42, wr_item_qty#39, wr_dev#43, average#44]

