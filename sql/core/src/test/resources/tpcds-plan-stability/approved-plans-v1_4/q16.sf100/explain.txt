== Physical Plan ==
* HashAggregate (33)
+- Exchange (32)
   +- * HashAggregate (31)
      +- * HashAggregate (30)
         +- * HashAggregate (29)
            +- * Project (28)
               +- * BroadcastHashJoin Inner BuildRight (27)
                  :- * Project (25)
                  :  +- * BroadcastHashJoin Inner BuildRight (24)
                  :     :- * Project (22)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (21)
                  :     :     :- * SortMergeJoin LeftAnti (19)
                  :     :     :  :- * Project (13)
                  :     :     :  :  +- * SortMergeJoin LeftSemi (12)
                  :     :     :  :     :- * Sort (6)
                  :     :     :  :     :  +- Exchange (5)
                  :     :     :  :     :     +- * Project (4)
                  :     :     :  :     :        +- * Filter (3)
                  :     :     :  :     :           +- * ColumnarToRow (2)
                  :     :     :  :     :              +- Scan parquet spark_catalog.default.catalog_sales (1)
                  :     :     :  :     +- * Sort (11)
                  :     :     :  :        +- Exchange (10)
                  :     :     :  :           +- * Project (9)
                  :     :     :  :              +- * ColumnarToRow (8)
                  :     :     :  :                 +- Scan parquet spark_catalog.default.catalog_sales (7)
                  :     :     :  +- * Sort (18)
                  :     :     :     +- Exchange (17)
                  :     :     :        +- * Project (16)
                  :     :     :           +- * ColumnarToRow (15)
                  :     :     :              +- Scan parquet spark_catalog.default.catalog_returns (14)
                  :     :     +- ReusedExchange (20)
                  :     +- ReusedExchange (23)
                  +- ReusedExchange (26)


(1) Scan parquet spark_catalog.default.catalog_sales
Output [8]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_warehouse_sk#4, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7, cs_sold_date_sk#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_ship_date_sk), IsNotNull(cs_ship_addr_sk), IsNotNull(cs_call_center_sk)]
ReadSchema: struct<cs_ship_date_sk:int,cs_ship_addr_sk:int,cs_call_center_sk:int,cs_warehouse_sk:int,cs_order_number:int,cs_ext_ship_cost:decimal(7,2),cs_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [8]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_warehouse_sk#4, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7, cs_sold_date_sk#8]

(3) Filter [codegen id : 1]
Input [8]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_warehouse_sk#4, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7, cs_sold_date_sk#8]
Condition : (((((isnotnull(cs_ship_date_sk#1) AND isnotnull(cs_ship_addr_sk#2)) AND isnotnull(cs_call_center_sk#3)) AND might_contain(runtimefilterexpression(Subquery scalar-subquery#9, [id=#10]), xxhash64(cs_ship_addr_sk#2, 42))) AND might_contain(runtimefilterexpression(Subquery scalar-subquery#11, [id=#12]), xxhash64(cs_call_center_sk#3, 42))) AND might_contain(runtimefilterexpression(Subquery scalar-subquery#13, [id=#14]), xxhash64(cs_ship_date_sk#1, 42)))

(4) Project [codegen id : 1]
Output [7]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_warehouse_sk#4, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Input [8]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_warehouse_sk#4, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7, cs_sold_date_sk#8]

(5) Exchange
Input [7]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_warehouse_sk#4, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Arguments: hashpartitioning(cs_order_number#5, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(6) Sort [codegen id : 2]
Input [7]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_warehouse_sk#4, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Arguments: [cs_order_number#5 ASC NULLS FIRST], false, 0

(7) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_warehouse_sk#15, cs_order_number#16, cs_sold_date_sk#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
ReadSchema: struct<cs_warehouse_sk:int,cs_order_number:int>

(8) ColumnarToRow [codegen id : 3]
Input [3]: [cs_warehouse_sk#15, cs_order_number#16, cs_sold_date_sk#17]

(9) Project [codegen id : 3]
Output [2]: [cs_warehouse_sk#15, cs_order_number#16]
Input [3]: [cs_warehouse_sk#15, cs_order_number#16, cs_sold_date_sk#17]

(10) Exchange
Input [2]: [cs_warehouse_sk#15, cs_order_number#16]
Arguments: hashpartitioning(cs_order_number#16, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(11) Sort [codegen id : 4]
Input [2]: [cs_warehouse_sk#15, cs_order_number#16]
Arguments: [cs_order_number#16 ASC NULLS FIRST], false, 0

(12) SortMergeJoin [codegen id : 5]
Left keys [1]: [cs_order_number#5]
Right keys [1]: [cs_order_number#16]
Join type: LeftSemi
Join condition: NOT (cs_warehouse_sk#4 = cs_warehouse_sk#15)

(13) Project [codegen id : 5]
Output [6]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Input [7]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_warehouse_sk#4, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]

(14) Scan parquet spark_catalog.default.catalog_returns
Output [2]: [cr_order_number#18, cr_returned_date_sk#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
ReadSchema: struct<cr_order_number:int>

(15) ColumnarToRow [codegen id : 6]
Input [2]: [cr_order_number#18, cr_returned_date_sk#19]

(16) Project [codegen id : 6]
Output [1]: [cr_order_number#18]
Input [2]: [cr_order_number#18, cr_returned_date_sk#19]

(17) Exchange
Input [1]: [cr_order_number#18]
Arguments: hashpartitioning(cr_order_number#18, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(18) Sort [codegen id : 7]
Input [1]: [cr_order_number#18]
Arguments: [cr_order_number#18 ASC NULLS FIRST], false, 0

(19) SortMergeJoin [codegen id : 11]
Left keys [1]: [cs_order_number#5]
Right keys [1]: [cr_order_number#18]
Join type: LeftAnti
Join condition: None

(20) ReusedExchange [Reuses operator id: 38]
Output [1]: [ca_address_sk#20]

(21) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [cs_ship_addr_sk#2]
Right keys [1]: [ca_address_sk#20]
Join type: Inner
Join condition: None

(22) Project [codegen id : 11]
Output [5]: [cs_ship_date_sk#1, cs_call_center_sk#3, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Input [7]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7, ca_address_sk#20]

(23) ReusedExchange [Reuses operator id: 48]
Output [1]: [cc_call_center_sk#21]

(24) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [cs_call_center_sk#3]
Right keys [1]: [cc_call_center_sk#21]
Join type: Inner
Join condition: None

(25) Project [codegen id : 11]
Output [4]: [cs_ship_date_sk#1, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Input [6]: [cs_ship_date_sk#1, cs_call_center_sk#3, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7, cc_call_center_sk#21]

(26) ReusedExchange [Reuses operator id: 58]
Output [1]: [d_date_sk#22]

(27) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [cs_ship_date_sk#1]
Right keys [1]: [d_date_sk#22]
Join type: Inner
Join condition: None

(28) Project [codegen id : 11]
Output [3]: [cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Input [5]: [cs_ship_date_sk#1, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7, d_date_sk#22]

(29) HashAggregate [codegen id : 11]
Input [3]: [cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Keys [1]: [cs_order_number#5]
Functions [2]: [partial_sum(UnscaledValue(cs_ext_ship_cost#6)), partial_sum(UnscaledValue(cs_net_profit#7))]
Aggregate Attributes [2]: [sum(UnscaledValue(cs_ext_ship_cost#6))#23, sum(UnscaledValue(cs_net_profit#7))#24]
Results [3]: [cs_order_number#5, sum#25, sum#26]

(30) HashAggregate [codegen id : 11]
Input [3]: [cs_order_number#5, sum#25, sum#26]
Keys [1]: [cs_order_number#5]
Functions [2]: [merge_sum(UnscaledValue(cs_ext_ship_cost#6)), merge_sum(UnscaledValue(cs_net_profit#7))]
Aggregate Attributes [2]: [sum(UnscaledValue(cs_ext_ship_cost#6))#23, sum(UnscaledValue(cs_net_profit#7))#24]
Results [3]: [cs_order_number#5, sum#25, sum#26]

(31) HashAggregate [codegen id : 11]
Input [3]: [cs_order_number#5, sum#25, sum#26]
Keys: []
Functions [3]: [merge_sum(UnscaledValue(cs_ext_ship_cost#6)), merge_sum(UnscaledValue(cs_net_profit#7)), partial_count(distinct cs_order_number#5)]
Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_ship_cost#6))#23, sum(UnscaledValue(cs_net_profit#7))#24, count(cs_order_number#5)#27]
Results [3]: [sum#25, sum#26, count#28]

(32) Exchange
Input [3]: [sum#25, sum#26, count#28]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=4]

(33) HashAggregate [codegen id : 12]
Input [3]: [sum#25, sum#26, count#28]
Keys: []
Functions [3]: [sum(UnscaledValue(cs_ext_ship_cost#6)), sum(UnscaledValue(cs_net_profit#7)), count(distinct cs_order_number#5)]
Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_ship_cost#6))#23, sum(UnscaledValue(cs_net_profit#7))#24, count(cs_order_number#5)#27]
Results [3]: [count(cs_order_number#5)#27 AS order count #29, MakeDecimal(sum(UnscaledValue(cs_ext_ship_cost#6))#23,17,2) AS total shipping cost #30, MakeDecimal(sum(UnscaledValue(cs_net_profit#7))#24,17,2) AS total net profit #31]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#9, [id=#10]
ObjectHashAggregate (43)
+- Exchange (42)
   +- ObjectHashAggregate (41)
      +- BroadcastExchangeExecProxy (40)


(34) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#20, ca_state#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(35) ColumnarToRow [codegen id : 1]
Input [2]: [ca_address_sk#20, ca_state#32]

(36) Filter [codegen id : 1]
Input [2]: [ca_address_sk#20, ca_state#32]
Condition : ((isnotnull(ca_state#32) AND (ca_state#32 = GA)) AND isnotnull(ca_address_sk#20))

(37) Project [codegen id : 1]
Output [1]: [ca_address_sk#20]
Input [2]: [ca_address_sk#20, ca_state#32]

(38) BroadcastExchange
Input [1]: [ca_address_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(39) SubqueryBroadcast
Input [1]: [ca_address_sk#20]
Arguments: runtimefilter#9, 0, [ca_address_sk#20], [id=#33]

(40) BroadcastExchangeExecProxy
Input [1]: [ca_address_sk#34]
Arguments: [ca_address_sk#20]

(41) ObjectHashAggregate
Input [1]: [ca_address_sk#20]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(ca_address_sk#20, 42), 17961, 333176, 0, 0)]
Aggregate Attributes [1]: [buf#35]
Results [1]: [buf#36]

(42) Exchange
Input [1]: [buf#36]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=6]

(43) ObjectHashAggregate
Input [1]: [buf#36]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(ca_address_sk#20, 42), 17961, 333176, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(ca_address_sk#20, 42), 17961, 333176, 0, 0)#37]
Results [1]: [bloom_filter_agg(xxhash64(ca_address_sk#20, 42), 17961, 333176, 0, 0)#37 AS bloomFilter#38]

Subquery:2 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#11, [id=#12]
ObjectHashAggregate (53)
+- Exchange (52)
   +- ObjectHashAggregate (51)
      +- BroadcastExchangeExecProxy (50)


(44) Scan parquet spark_catalog.default.call_center
Output [2]: [cc_call_center_sk#21, cc_county#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/call_center]
PushedFilters: [IsNotNull(cc_county), EqualTo(cc_county,Williamson County), IsNotNull(cc_call_center_sk)]
ReadSchema: struct<cc_call_center_sk:int,cc_county:string>

(45) ColumnarToRow [codegen id : 1]
Input [2]: [cc_call_center_sk#21, cc_county#39]

(46) Filter [codegen id : 1]
Input [2]: [cc_call_center_sk#21, cc_county#39]
Condition : ((isnotnull(cc_county#39) AND (cc_county#39 = Williamson County)) AND isnotnull(cc_call_center_sk#21))

(47) Project [codegen id : 1]
Output [1]: [cc_call_center_sk#21]
Input [2]: [cc_call_center_sk#21, cc_county#39]

(48) BroadcastExchange
Input [1]: [cc_call_center_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

(49) SubqueryBroadcast
Input [1]: [cc_call_center_sk#21]
Arguments: runtimefilter#11, 0, [cc_call_center_sk#21], [id=#40]

(50) BroadcastExchangeExecProxy
Input [1]: [cc_call_center_sk#41]
Arguments: [cc_call_center_sk#21]

(51) ObjectHashAggregate
Input [1]: [cc_call_center_sk#21]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(cc_call_center_sk#21, 42), 4, 144, 0, 0)]
Aggregate Attributes [1]: [buf#42]
Results [1]: [buf#43]

(52) Exchange
Input [1]: [buf#43]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=8]

(53) ObjectHashAggregate
Input [1]: [buf#43]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(cc_call_center_sk#21, 42), 4, 144, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(cc_call_center_sk#21, 42), 4, 144, 0, 0)#44]
Results [1]: [bloom_filter_agg(xxhash64(cc_call_center_sk#21, 42), 4, 144, 0, 0)#44 AS bloomFilter#45]

Subquery:3 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#13, [id=#14]
ObjectHashAggregate (63)
+- Exchange (62)
   +- ObjectHashAggregate (61)
      +- BroadcastExchangeExecProxy (60)


(54) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#22, d_date#46]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2002-02-01), LessThanOrEqual(d_date,2002-04-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(55) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#22, d_date#46]

(56) Filter [codegen id : 1]
Input [2]: [d_date_sk#22, d_date#46]
Condition : (((isnotnull(d_date#46) AND (d_date#46 >= 2002-02-01)) AND (d_date#46 <= 2002-04-02)) AND isnotnull(d_date_sk#22))

(57) Project [codegen id : 1]
Output [1]: [d_date_sk#22]
Input [2]: [d_date_sk#22, d_date#46]

(58) BroadcastExchange
Input [1]: [d_date_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

(59) SubqueryBroadcast
Input [1]: [d_date_sk#22]
Arguments: runtimefilter#13, 0, [d_date_sk#22], [id=#47]

(60) BroadcastExchangeExecProxy
Input [1]: [d_date_sk#48]
Arguments: [d_date_sk#22]

(61) ObjectHashAggregate
Input [1]: [d_date_sk#22]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(d_date_sk#22, 42), 73049, 1141755, 0, 0)]
Aggregate Attributes [1]: [buf#49]
Results [1]: [buf#50]

(62) Exchange
Input [1]: [buf#50]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=10]

(63) ObjectHashAggregate
Input [1]: [buf#50]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(d_date_sk#22, 42), 73049, 1141755, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(d_date_sk#22, 42), 73049, 1141755, 0, 0)#51]
Results [1]: [bloom_filter_agg(xxhash64(d_date_sk#22, 42), 73049, 1141755, 0, 0)#51 AS bloomFilter#52]


