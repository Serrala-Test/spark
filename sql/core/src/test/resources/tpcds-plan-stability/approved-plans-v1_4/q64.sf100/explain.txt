== Physical Plan ==
* Sort (206)
+- Exchange (205)
   +- * Project (204)
      +- * SortMergeJoin Inner (203)
         :- * Sort (122)
         :  +- Exchange (121)
         :     +- * HashAggregate (120)
         :        +- Exchange (119)
         :           +- * HashAggregate (118)
         :              +- * Project (117)
         :                 +- * BroadcastHashJoin Inner BuildRight (116)
         :                    :- * Project (110)
         :                    :  +- * BroadcastHashJoin Inner BuildRight (109)
         :                    :     :- * Project (107)
         :                    :     :  +- * BroadcastHashJoin Inner BuildRight (106)
         :                    :     :     :- * Project (101)
         :                    :     :     :  +- * SortMergeJoin Inner (100)
         :                    :     :     :     :- * Sort (97)
         :                    :     :     :     :  +- Exchange (96)
         :                    :     :     :     :     +- * Project (95)
         :                    :     :     :     :        +- * SortMergeJoin Inner (94)
         :                    :     :     :     :           :- * Sort (91)
         :                    :     :     :     :           :  +- Exchange (90)
         :                    :     :     :     :           :     +- * Project (89)
         :                    :     :     :     :           :        +- * BroadcastHashJoin Inner BuildRight (88)
         :                    :     :     :     :           :           :- * Project (86)
         :                    :     :     :     :           :           :  +- * BroadcastHashJoin Inner BuildRight (85)
         :                    :     :     :     :           :           :     :- * Project (80)
         :                    :     :     :     :           :           :     :  +- * BroadcastHashJoin Inner BuildRight (79)
         :                    :     :     :     :           :           :     :     :- * Project (74)
         :                    :     :     :     :           :           :     :     :  +- * SortMergeJoin Inner (73)
         :                    :     :     :     :           :           :     :     :     :- * Sort (70)
         :                    :     :     :     :           :           :     :     :     :  +- Exchange (69)
         :                    :     :     :     :           :           :     :     :     :     +- * Project (68)
         :                    :     :     :     :           :           :     :     :     :        +- * SortMergeJoin Inner (67)
         :                    :     :     :     :           :           :     :     :     :           :- * Sort (64)
         :                    :     :     :     :           :           :     :     :     :           :  +- Exchange (63)
         :                    :     :     :     :           :           :     :     :     :           :     +- * Project (62)
         :                    :     :     :     :           :           :     :     :     :           :        +- * BroadcastHashJoin Inner BuildRight (61)
         :                    :     :     :     :           :           :     :     :     :           :           :- * Project (59)
         :                    :     :     :     :           :           :     :     :     :           :           :  +- * BroadcastHashJoin Inner BuildRight (58)
         :                    :     :     :     :           :           :     :     :     :           :           :     :- * Project (53)
         :                    :     :     :     :           :           :     :     :     :           :           :     :  +- * SortMergeJoin Inner (52)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :- * Sort (46)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :  +- Exchange (45)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :     +- * Project (44)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :        +- * BroadcastHashJoin Inner BuildRight (43)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :- * Project (38)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :  +- * BroadcastHashJoin Inner BuildRight (37)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :- * Project (35)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :  +- * BroadcastHashJoin Inner BuildRight (34)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :- * Project (13)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :  +- * SortMergeJoin Inner (12)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :- * Sort (5)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :  +- Exchange (4)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :     +- * Filter (3)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :        +- * ColumnarToRow (2)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :           +- Scan parquet spark_catalog.default.store_sales (1)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     +- * Sort (11)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :        +- Exchange (10)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :           +- * Project (9)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :              +- * Filter (8)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :                 +- * ColumnarToRow (7)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :                    +- Scan parquet spark_catalog.default.store_returns (6)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     +- BroadcastExchange (33)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :        +- * Project (32)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :           +- * Filter (31)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :              +- * HashAggregate (30)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                 +- Exchange (29)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                    +- * HashAggregate (28)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                       +- * Project (27)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                          +- * SortMergeJoin Inner (26)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                             :- * Sort (19)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                             :  +- Exchange (18)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                             :     +- * Project (17)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                             :        +- * Filter (16)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                             :           +- * ColumnarToRow (15)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                             :              +- Scan parquet spark_catalog.default.catalog_sales (14)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                             +- * Sort (25)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                                +- Exchange (24)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                                   +- * Project (23)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                                      +- * Filter (22)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                                         +- * ColumnarToRow (21)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     :                                            +- Scan parquet spark_catalog.default.catalog_returns (20)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           :     +- ReusedExchange (36)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :           +- BroadcastExchange (42)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :              +- * Filter (41)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :                 +- * ColumnarToRow (40)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     :                    +- Scan parquet spark_catalog.default.store (39)
         :                    :     :     :     :           :           :     :     :     :           :           :     :     +- * Sort (51)
         :                    :     :     :     :           :           :     :     :     :           :           :     :        +- Exchange (50)
         :                    :     :     :     :           :           :     :     :     :           :           :     :           +- * Filter (49)
         :                    :     :     :     :           :           :     :     :     :           :           :     :              +- * ColumnarToRow (48)
         :                    :     :     :     :           :           :     :     :     :           :           :     :                 +- Scan parquet spark_catalog.default.customer (47)
         :                    :     :     :     :           :           :     :     :     :           :           :     +- BroadcastExchange (57)
         :                    :     :     :     :           :           :     :     :     :           :           :        +- * Filter (56)
         :                    :     :     :     :           :           :     :     :     :           :           :           +- * ColumnarToRow (55)
         :                    :     :     :     :           :           :     :     :     :           :           :              +- Scan parquet spark_catalog.default.date_dim (54)
         :                    :     :     :     :           :           :     :     :     :           :           +- ReusedExchange (60)
         :                    :     :     :     :           :           :     :     :     :           +- * Sort (66)
         :                    :     :     :     :           :           :     :     :     :              +- ReusedExchange (65)
         :                    :     :     :     :           :           :     :     :     +- * Sort (72)
         :                    :     :     :     :           :           :     :     :        +- ReusedExchange (71)
         :                    :     :     :     :           :           :     :     +- BroadcastExchange (78)
         :                    :     :     :     :           :           :     :        +- * Filter (77)
         :                    :     :     :     :           :           :     :           +- * ColumnarToRow (76)
         :                    :     :     :     :           :           :     :              +- Scan parquet spark_catalog.default.promotion (75)
         :                    :     :     :     :           :           :     +- BroadcastExchange (84)
         :                    :     :     :     :           :           :        +- * Filter (83)
         :                    :     :     :     :           :           :           +- * ColumnarToRow (82)
         :                    :     :     :     :           :           :              +- Scan parquet spark_catalog.default.household_demographics (81)
         :                    :     :     :     :           :           +- ReusedExchange (87)
         :                    :     :     :     :           +- * Sort (93)
         :                    :     :     :     :              +- ReusedExchange (92)
         :                    :     :     :     +- * Sort (99)
         :                    :     :     :        +- ReusedExchange (98)
         :                    :     :     +- BroadcastExchange (105)
         :                    :     :        +- * Filter (104)
         :                    :     :           +- * ColumnarToRow (103)
         :                    :     :              +- Scan parquet spark_catalog.default.income_band (102)
         :                    :     +- ReusedExchange (108)
         :                    +- BroadcastExchange (115)
         :                       +- * Project (114)
         :                          +- * Filter (113)
         :                             +- * ColumnarToRow (112)
         :                                +- Scan parquet spark_catalog.default.item (111)
         +- * Sort (202)
            +- Exchange (201)
               +- * HashAggregate (200)
                  +- Exchange (199)
                     +- * HashAggregate (198)
                        +- * Project (197)
                           +- * BroadcastHashJoin Inner BuildRight (196)
                              :- * Project (194)
                              :  +- * BroadcastHashJoin Inner BuildRight (193)
                              :     :- * Project (191)
                              :     :  +- * BroadcastHashJoin Inner BuildRight (190)
                              :     :     :- * Project (188)
                              :     :     :  +- * SortMergeJoin Inner (187)
                              :     :     :     :- * Sort (184)
                              :     :     :     :  +- Exchange (183)
                              :     :     :     :     +- * Project (182)
                              :     :     :     :        +- * SortMergeJoin Inner (181)
                              :     :     :     :           :- * Sort (178)
                              :     :     :     :           :  +- Exchange (177)
                              :     :     :     :           :     +- * Project (176)
                              :     :     :     :           :        +- * BroadcastHashJoin Inner BuildRight (175)
                              :     :     :     :           :           :- * Project (173)
                              :     :     :     :           :           :  +- * BroadcastHashJoin Inner BuildRight (172)
                              :     :     :     :           :           :     :- * Project (170)
                              :     :     :     :           :           :     :  +- * BroadcastHashJoin Inner BuildRight (169)
                              :     :     :     :           :           :     :     :- * Project (167)
                              :     :     :     :           :           :     :     :  +- * SortMergeJoin Inner (166)
                              :     :     :     :           :           :     :     :     :- * Sort (163)
                              :     :     :     :           :           :     :     :     :  +- Exchange (162)
                              :     :     :     :           :           :     :     :     :     +- * Project (161)
                              :     :     :     :           :           :     :     :     :        +- * SortMergeJoin Inner (160)
                              :     :     :     :           :           :     :     :     :           :- * Sort (157)
                              :     :     :     :           :           :     :     :     :           :  +- Exchange (156)
                              :     :     :     :           :           :     :     :     :           :     +- * Project (155)
                              :     :     :     :           :           :     :     :     :           :        +- * BroadcastHashJoin Inner BuildRight (154)
                              :     :     :     :           :           :     :     :     :           :           :- * Project (152)
                              :     :     :     :           :           :     :     :     :           :           :  +- * BroadcastHashJoin Inner BuildRight (151)
                              :     :     :     :           :           :     :     :     :           :           :     :- * Project (149)
                              :     :     :     :           :           :     :     :     :           :           :     :  +- * SortMergeJoin Inner (148)
                              :     :     :     :           :           :     :     :     :           :           :     :     :- * Sort (142)
                              :     :     :     :           :           :     :     :     :           :           :     :     :  +- Exchange (141)
                              :     :     :     :           :           :     :     :     :           :           :     :     :     +- * Project (140)
                              :     :     :     :           :           :     :     :     :           :           :     :     :        +- * BroadcastHashJoin Inner BuildRight (139)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :- * Project (137)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :  +- * BroadcastHashJoin Inner BuildRight (136)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :- * Project (134)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :  +- * BroadcastHashJoin Inner BuildRight (133)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :- * Project (131)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :  +- * SortMergeJoin Inner (130)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :- * Sort (127)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :  +- Exchange (126)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :     +- * Filter (125)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :        +- * ColumnarToRow (124)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     :           +- Scan parquet spark_catalog.default.store_sales (123)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :     +- * Sort (129)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     :        +- ReusedExchange (128)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     :     +- ReusedExchange (132)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           :     +- ReusedExchange (135)
                              :     :     :     :           :           :     :     :     :           :           :     :     :           +- ReusedExchange (138)
                              :     :     :     :           :           :     :     :     :           :           :     :     +- * Sort (147)
                              :     :     :     :           :           :     :     :     :           :           :     :        +- Exchange (146)
                              :     :     :     :           :           :     :     :     :           :           :     :           +- * Filter (145)
                              :     :     :     :           :           :     :     :     :           :           :     :              +- * ColumnarToRow (144)
                              :     :     :     :           :           :     :     :     :           :           :     :                 +- Scan parquet spark_catalog.default.customer (143)
                              :     :     :     :           :           :     :     :     :           :           :     +- ReusedExchange (150)
                              :     :     :     :           :           :     :     :     :           :           +- ReusedExchange (153)
                              :     :     :     :           :           :     :     :     :           +- * Sort (159)
                              :     :     :     :           :           :     :     :     :              +- ReusedExchange (158)
                              :     :     :     :           :           :     :     :     +- * Sort (165)
                              :     :     :     :           :           :     :     :        +- ReusedExchange (164)
                              :     :     :     :           :           :     :     +- ReusedExchange (168)
                              :     :     :     :           :           :     +- ReusedExchange (171)
                              :     :     :     :           :           +- ReusedExchange (174)
                              :     :     :     :           +- * Sort (180)
                              :     :     :     :              +- ReusedExchange (179)
                              :     :     :     +- * Sort (186)
                              :     :     :        +- ReusedExchange (185)
                              :     :     +- ReusedExchange (189)
                              :     +- ReusedExchange (192)
                              +- ReusedExchange (195)


(1) Scan parquet spark_catalog.default.store_sales
Output [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_cdemo_sk), IsNotNull(ss_promo_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]

(3) Filter [codegen id : 1]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Condition : (((((((((((isnotnull(ss_item_sk#1) AND isnotnull(ss_ticket_number#8)) AND isnotnull(ss_store_sk#6)) AND isnotnull(ss_customer_sk#2)) AND isnotnull(ss_cdemo_sk#3)) AND isnotnull(ss_promo_sk#7)) AND isnotnull(ss_hdemo_sk#4)) AND isnotnull(ss_addr_sk#5)) AND true) AND might_contain(Subquery scalar-subquery#14, [id=#15], xxhash64(ss_cdemo_sk#3, 42), false)) AND might_contain(Subquery scalar-subquery#16, [id=#17], xxhash64(ss_addr_sk#5, 42), false)) AND might_contain(Subquery scalar-subquery#18, [id=#19], xxhash64(ss_item_sk#1, 42), true))

(4) Exchange
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Arguments: hashpartitioning(ss_item_sk#1, ss_ticket_number#8, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Arguments: [ss_item_sk#1 ASC NULLS FIRST, ss_ticket_number#8 ASC NULLS FIRST], false, 0

(6) Scan parquet spark_catalog.default.store_returns
Output [3]: [sr_item_sk#20, sr_ticket_number#21, sr_returned_date_sk#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(7) ColumnarToRow [codegen id : 3]
Input [3]: [sr_item_sk#20, sr_ticket_number#21, sr_returned_date_sk#22]

(8) Filter [codegen id : 3]
Input [3]: [sr_item_sk#20, sr_ticket_number#21, sr_returned_date_sk#22]
Condition : (isnotnull(sr_item_sk#20) AND isnotnull(sr_ticket_number#21))

(9) Project [codegen id : 3]
Output [2]: [sr_item_sk#20, sr_ticket_number#21]
Input [3]: [sr_item_sk#20, sr_ticket_number#21, sr_returned_date_sk#22]

(10) Exchange
Input [2]: [sr_item_sk#20, sr_ticket_number#21]
Arguments: hashpartitioning(sr_item_sk#20, sr_ticket_number#21, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(11) Sort [codegen id : 4]
Input [2]: [sr_item_sk#20, sr_ticket_number#21]
Arguments: [sr_item_sk#20 ASC NULLS FIRST, sr_ticket_number#21 ASC NULLS FIRST], false, 0

(12) SortMergeJoin [codegen id : 13]
Left keys [2]: [ss_item_sk#1, ss_ticket_number#8]
Right keys [2]: [sr_item_sk#20, sr_ticket_number#21]
Join type: Inner
Join condition: None

(13) Project [codegen id : 13]
Output [11]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Input [14]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_ticket_number#8, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12, sr_item_sk#20, sr_ticket_number#21]

(14) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_item_sk#23, cs_order_number#24, cs_ext_list_price#25, cs_sold_date_sk#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_order_number)]
ReadSchema: struct<cs_item_sk:int,cs_order_number:int,cs_ext_list_price:decimal(7,2)>

(15) ColumnarToRow [codegen id : 5]
Input [4]: [cs_item_sk#23, cs_order_number#24, cs_ext_list_price#25, cs_sold_date_sk#26]

(16) Filter [codegen id : 5]
Input [4]: [cs_item_sk#23, cs_order_number#24, cs_ext_list_price#25, cs_sold_date_sk#26]
Condition : (isnotnull(cs_item_sk#23) AND isnotnull(cs_order_number#24))

(17) Project [codegen id : 5]
Output [3]: [cs_item_sk#23, cs_order_number#24, cs_ext_list_price#25]
Input [4]: [cs_item_sk#23, cs_order_number#24, cs_ext_list_price#25, cs_sold_date_sk#26]

(18) Exchange
Input [3]: [cs_item_sk#23, cs_order_number#24, cs_ext_list_price#25]
Arguments: hashpartitioning(cs_item_sk#23, cs_order_number#24, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(19) Sort [codegen id : 6]
Input [3]: [cs_item_sk#23, cs_order_number#24, cs_ext_list_price#25]
Arguments: [cs_item_sk#23 ASC NULLS FIRST, cs_order_number#24 ASC NULLS FIRST], false, 0

(20) Scan parquet spark_catalog.default.catalog_returns
Output [6]: [cr_item_sk#27, cr_order_number#28, cr_refunded_cash#29, cr_reversed_charge#30, cr_store_credit#31, cr_returned_date_sk#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_refunded_cash:decimal(7,2),cr_reversed_charge:decimal(7,2),cr_store_credit:decimal(7,2)>

(21) ColumnarToRow [codegen id : 7]
Input [6]: [cr_item_sk#27, cr_order_number#28, cr_refunded_cash#29, cr_reversed_charge#30, cr_store_credit#31, cr_returned_date_sk#32]

(22) Filter [codegen id : 7]
Input [6]: [cr_item_sk#27, cr_order_number#28, cr_refunded_cash#29, cr_reversed_charge#30, cr_store_credit#31, cr_returned_date_sk#32]
Condition : (isnotnull(cr_item_sk#27) AND isnotnull(cr_order_number#28))

(23) Project [codegen id : 7]
Output [5]: [cr_item_sk#27, cr_order_number#28, cr_refunded_cash#29, cr_reversed_charge#30, cr_store_credit#31]
Input [6]: [cr_item_sk#27, cr_order_number#28, cr_refunded_cash#29, cr_reversed_charge#30, cr_store_credit#31, cr_returned_date_sk#32]

(24) Exchange
Input [5]: [cr_item_sk#27, cr_order_number#28, cr_refunded_cash#29, cr_reversed_charge#30, cr_store_credit#31]
Arguments: hashpartitioning(cr_item_sk#27, cr_order_number#28, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(25) Sort [codegen id : 8]
Input [5]: [cr_item_sk#27, cr_order_number#28, cr_refunded_cash#29, cr_reversed_charge#30, cr_store_credit#31]
Arguments: [cr_item_sk#27 ASC NULLS FIRST, cr_order_number#28 ASC NULLS FIRST], false, 0

(26) SortMergeJoin [codegen id : 9]
Left keys [2]: [cs_item_sk#23, cs_order_number#24]
Right keys [2]: [cr_item_sk#27, cr_order_number#28]
Join type: Inner
Join condition: None

(27) Project [codegen id : 9]
Output [5]: [cs_item_sk#23, cs_ext_list_price#25, cr_refunded_cash#29, cr_reversed_charge#30, cr_store_credit#31]
Input [8]: [cs_item_sk#23, cs_order_number#24, cs_ext_list_price#25, cr_item_sk#27, cr_order_number#28, cr_refunded_cash#29, cr_reversed_charge#30, cr_store_credit#31]

(28) HashAggregate [codegen id : 9]
Input [5]: [cs_item_sk#23, cs_ext_list_price#25, cr_refunded_cash#29, cr_reversed_charge#30, cr_store_credit#31]
Keys [1]: [cs_item_sk#23]
Functions [2]: [partial_sum(UnscaledValue(cs_ext_list_price#25)), partial_sum(((cr_refunded_cash#29 + cr_reversed_charge#30) + cr_store_credit#31))]
Aggregate Attributes [3]: [sum#33, sum#34, isEmpty#35]
Results [4]: [cs_item_sk#23, sum#36, sum#37, isEmpty#38]

(29) Exchange
Input [4]: [cs_item_sk#23, sum#36, sum#37, isEmpty#38]
Arguments: hashpartitioning(cs_item_sk#23, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(30) HashAggregate [codegen id : 10]
Input [4]: [cs_item_sk#23, sum#36, sum#37, isEmpty#38]
Keys [1]: [cs_item_sk#23]
Functions [2]: [sum(UnscaledValue(cs_ext_list_price#25)), sum(((cr_refunded_cash#29 + cr_reversed_charge#30) + cr_store_credit#31))]
Aggregate Attributes [2]: [sum(UnscaledValue(cs_ext_list_price#25))#39, sum(((cr_refunded_cash#29 + cr_reversed_charge#30) + cr_store_credit#31))#40]
Results [3]: [cs_item_sk#23, MakeDecimal(sum(UnscaledValue(cs_ext_list_price#25))#39,17,2) AS sale#41, sum(((cr_refunded_cash#29 + cr_reversed_charge#30) + cr_store_credit#31))#40 AS refund#42]

(31) Filter [codegen id : 10]
Input [3]: [cs_item_sk#23, sale#41, refund#42]
Condition : ((isnotnull(sale#41) AND isnotnull(refund#42)) AND (cast(sale#41 as decimal(21,2)) > (2 * refund#42)))

(32) Project [codegen id : 10]
Output [1]: [cs_item_sk#23]
Input [3]: [cs_item_sk#23, sale#41, refund#42]

(33) BroadcastExchange
Input [1]: [cs_item_sk#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

(34) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [cs_item_sk#23]
Join type: Inner
Join condition: None

(35) Project [codegen id : 13]
Output [11]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12, cs_item_sk#23]

(36) ReusedExchange [Reuses operator id: 231]
Output [2]: [d_date_sk#43, d_year#44]

(37) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_sold_date_sk#12]
Right keys [1]: [d_date_sk#43]
Join type: Inner
Join condition: None

(38) Project [codegen id : 13]
Output [11]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44]
Input [13]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, ss_sold_date_sk#12, d_date_sk#43, d_year#44]

(39) Scan parquet spark_catalog.default.store
Output [3]: [s_store_sk#45, s_store_name#46, s_zip#47]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_store_name), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_zip:string>

(40) ColumnarToRow [codegen id : 12]
Input [3]: [s_store_sk#45, s_store_name#46, s_zip#47]

(41) Filter [codegen id : 12]
Input [3]: [s_store_sk#45, s_store_name#46, s_zip#47]
Condition : ((isnotnull(s_store_sk#45) AND isnotnull(s_store_name#46)) AND isnotnull(s_zip#47))

(42) BroadcastExchange
Input [3]: [s_store_sk#45, s_store_name#46, s_zip#47]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=7]

(43) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_store_sk#6]
Right keys [1]: [s_store_sk#45]
Join type: Inner
Join condition: None

(44) Project [codegen id : 13]
Output [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47]
Input [14]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_store_sk#6, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_sk#45, s_store_name#46, s_zip#47]

(45) Exchange
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47]
Arguments: hashpartitioning(ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(46) Sort [codegen id : 14]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(47) Scan parquet spark_catalog.default.customer
Output [6]: [c_customer_sk#48, c_current_cdemo_sk#49, c_current_hdemo_sk#50, c_current_addr_sk#51, c_first_shipto_date_sk#52, c_first_sales_date_sk#53]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_first_sales_date_sk), IsNotNull(c_first_shipto_date_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_hdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int,c_first_shipto_date_sk:int,c_first_sales_date_sk:int>

(48) ColumnarToRow [codegen id : 15]
Input [6]: [c_customer_sk#48, c_current_cdemo_sk#49, c_current_hdemo_sk#50, c_current_addr_sk#51, c_first_shipto_date_sk#52, c_first_sales_date_sk#53]

(49) Filter [codegen id : 15]
Input [6]: [c_customer_sk#48, c_current_cdemo_sk#49, c_current_hdemo_sk#50, c_current_addr_sk#51, c_first_shipto_date_sk#52, c_first_sales_date_sk#53]
Condition : (((((((isnotnull(c_customer_sk#48) AND isnotnull(c_first_sales_date_sk#53)) AND isnotnull(c_first_shipto_date_sk#52)) AND isnotnull(c_current_cdemo_sk#49)) AND isnotnull(c_current_hdemo_sk#50)) AND isnotnull(c_current_addr_sk#51)) AND might_contain(Subquery scalar-subquery#54, [id=#55], xxhash64(c_current_cdemo_sk#49, 42), false)) AND might_contain(Subquery scalar-subquery#56, [id=#57], xxhash64(c_current_addr_sk#51, 42), false))

(50) Exchange
Input [6]: [c_customer_sk#48, c_current_cdemo_sk#49, c_current_hdemo_sk#50, c_current_addr_sk#51, c_first_shipto_date_sk#52, c_first_sales_date_sk#53]
Arguments: hashpartitioning(c_customer_sk#48, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(51) Sort [codegen id : 16]
Input [6]: [c_customer_sk#48, c_current_cdemo_sk#49, c_current_hdemo_sk#50, c_current_addr_sk#51, c_first_shipto_date_sk#52, c_first_sales_date_sk#53]
Arguments: [c_customer_sk#48 ASC NULLS FIRST], false, 0

(52) SortMergeJoin [codegen id : 19]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#48]
Join type: Inner
Join condition: None

(53) Project [codegen id : 19]
Output [16]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_cdemo_sk#49, c_current_hdemo_sk#50, c_current_addr_sk#51, c_first_shipto_date_sk#52, c_first_sales_date_sk#53]
Input [18]: [ss_item_sk#1, ss_customer_sk#2, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_customer_sk#48, c_current_cdemo_sk#49, c_current_hdemo_sk#50, c_current_addr_sk#51, c_first_shipto_date_sk#52, c_first_sales_date_sk#53]

(54) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#58, d_year#59]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(55) ColumnarToRow [codegen id : 17]
Input [2]: [d_date_sk#58, d_year#59]

(56) Filter [codegen id : 17]
Input [2]: [d_date_sk#58, d_year#59]
Condition : isnotnull(d_date_sk#58)

(57) BroadcastExchange
Input [2]: [d_date_sk#58, d_year#59]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=10]

(58) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [c_first_sales_date_sk#53]
Right keys [1]: [d_date_sk#58]
Join type: Inner
Join condition: None

(59) Project [codegen id : 19]
Output [16]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_cdemo_sk#49, c_current_hdemo_sk#50, c_current_addr_sk#51, c_first_shipto_date_sk#52, d_year#59]
Input [18]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_cdemo_sk#49, c_current_hdemo_sk#50, c_current_addr_sk#51, c_first_shipto_date_sk#52, c_first_sales_date_sk#53, d_date_sk#58, d_year#59]

(60) ReusedExchange [Reuses operator id: 57]
Output [2]: [d_date_sk#60, d_year#61]

(61) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [c_first_shipto_date_sk#52]
Right keys [1]: [d_date_sk#60]
Join type: Inner
Join condition: None

(62) Project [codegen id : 19]
Output [16]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_cdemo_sk#49, c_current_hdemo_sk#50, c_current_addr_sk#51, d_year#59, d_year#61]
Input [18]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_cdemo_sk#49, c_current_hdemo_sk#50, c_current_addr_sk#51, c_first_shipto_date_sk#52, d_year#59, d_date_sk#60, d_year#61]

(63) Exchange
Input [16]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_cdemo_sk#49, c_current_hdemo_sk#50, c_current_addr_sk#51, d_year#59, d_year#61]
Arguments: hashpartitioning(ss_cdemo_sk#3, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(64) Sort [codegen id : 20]
Input [16]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_cdemo_sk#49, c_current_hdemo_sk#50, c_current_addr_sk#51, d_year#59, d_year#61]
Arguments: [ss_cdemo_sk#3 ASC NULLS FIRST], false, 0

(65) ReusedExchange [Reuses operator id: 235]
Output [2]: [cd_demo_sk#62, cd_marital_status#63]

(66) Sort [codegen id : 22]
Input [2]: [cd_demo_sk#62, cd_marital_status#63]
Arguments: [cd_demo_sk#62 ASC NULLS FIRST], false, 0

(67) SortMergeJoin [codegen id : 23]
Left keys [1]: [ss_cdemo_sk#3]
Right keys [1]: [cd_demo_sk#62]
Join type: Inner
Join condition: None

(68) Project [codegen id : 23]
Output [16]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_cdemo_sk#49, c_current_hdemo_sk#50, c_current_addr_sk#51, d_year#59, d_year#61, cd_marital_status#63]
Input [18]: [ss_item_sk#1, ss_cdemo_sk#3, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_cdemo_sk#49, c_current_hdemo_sk#50, c_current_addr_sk#51, d_year#59, d_year#61, cd_demo_sk#62, cd_marital_status#63]

(69) Exchange
Input [16]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_cdemo_sk#49, c_current_hdemo_sk#50, c_current_addr_sk#51, d_year#59, d_year#61, cd_marital_status#63]
Arguments: hashpartitioning(c_current_cdemo_sk#49, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(70) Sort [codegen id : 24]
Input [16]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_cdemo_sk#49, c_current_hdemo_sk#50, c_current_addr_sk#51, d_year#59, d_year#61, cd_marital_status#63]
Arguments: [c_current_cdemo_sk#49 ASC NULLS FIRST], false, 0

(71) ReusedExchange [Reuses operator id: 235]
Output [2]: [cd_demo_sk#64, cd_marital_status#65]

(72) Sort [codegen id : 26]
Input [2]: [cd_demo_sk#64, cd_marital_status#65]
Arguments: [cd_demo_sk#64 ASC NULLS FIRST], false, 0

(73) SortMergeJoin [codegen id : 30]
Left keys [1]: [c_current_cdemo_sk#49]
Right keys [1]: [cd_demo_sk#64]
Join type: Inner
Join condition: NOT (cd_marital_status#63 = cd_marital_status#65)

(74) Project [codegen id : 30]
Output [14]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_hdemo_sk#50, c_current_addr_sk#51, d_year#59, d_year#61]
Input [18]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_cdemo_sk#49, c_current_hdemo_sk#50, c_current_addr_sk#51, d_year#59, d_year#61, cd_marital_status#63, cd_demo_sk#64, cd_marital_status#65]

(75) Scan parquet spark_catalog.default.promotion
Output [1]: [p_promo_sk#66]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int>

(76) ColumnarToRow [codegen id : 27]
Input [1]: [p_promo_sk#66]

(77) Filter [codegen id : 27]
Input [1]: [p_promo_sk#66]
Condition : isnotnull(p_promo_sk#66)

(78) BroadcastExchange
Input [1]: [p_promo_sk#66]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=13]

(79) BroadcastHashJoin [codegen id : 30]
Left keys [1]: [ss_promo_sk#7]
Right keys [1]: [p_promo_sk#66]
Join type: Inner
Join condition: None

(80) Project [codegen id : 30]
Output [13]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_hdemo_sk#50, c_current_addr_sk#51, d_year#59, d_year#61]
Input [15]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_promo_sk#7, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_hdemo_sk#50, c_current_addr_sk#51, d_year#59, d_year#61, p_promo_sk#66]

(81) Scan parquet spark_catalog.default.household_demographics
Output [2]: [hd_demo_sk#67, hd_income_band_sk#68]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_demo_sk), IsNotNull(hd_income_band_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_income_band_sk:int>

(82) ColumnarToRow [codegen id : 28]
Input [2]: [hd_demo_sk#67, hd_income_band_sk#68]

(83) Filter [codegen id : 28]
Input [2]: [hd_demo_sk#67, hd_income_band_sk#68]
Condition : (isnotnull(hd_demo_sk#67) AND isnotnull(hd_income_band_sk#68))

(84) BroadcastExchange
Input [2]: [hd_demo_sk#67, hd_income_band_sk#68]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=14]

(85) BroadcastHashJoin [codegen id : 30]
Left keys [1]: [ss_hdemo_sk#4]
Right keys [1]: [hd_demo_sk#67]
Join type: Inner
Join condition: None

(86) Project [codegen id : 30]
Output [13]: [ss_item_sk#1, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_hdemo_sk#50, c_current_addr_sk#51, d_year#59, d_year#61, hd_income_band_sk#68]
Input [15]: [ss_item_sk#1, ss_hdemo_sk#4, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_hdemo_sk#50, c_current_addr_sk#51, d_year#59, d_year#61, hd_demo_sk#67, hd_income_band_sk#68]

(87) ReusedExchange [Reuses operator id: 84]
Output [2]: [hd_demo_sk#69, hd_income_band_sk#70]

(88) BroadcastHashJoin [codegen id : 30]
Left keys [1]: [c_current_hdemo_sk#50]
Right keys [1]: [hd_demo_sk#69]
Join type: Inner
Join condition: None

(89) Project [codegen id : 30]
Output [13]: [ss_item_sk#1, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_addr_sk#51, d_year#59, d_year#61, hd_income_band_sk#68, hd_income_band_sk#70]
Input [15]: [ss_item_sk#1, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_hdemo_sk#50, c_current_addr_sk#51, d_year#59, d_year#61, hd_income_band_sk#68, hd_demo_sk#69, hd_income_band_sk#70]

(90) Exchange
Input [13]: [ss_item_sk#1, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_addr_sk#51, d_year#59, d_year#61, hd_income_band_sk#68, hd_income_band_sk#70]
Arguments: hashpartitioning(ss_addr_sk#5, 5), ENSURE_REQUIREMENTS, [plan_id=15]

(91) Sort [codegen id : 31]
Input [13]: [ss_item_sk#1, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_addr_sk#51, d_year#59, d_year#61, hd_income_band_sk#68, hd_income_band_sk#70]
Arguments: [ss_addr_sk#5 ASC NULLS FIRST], false, 0

(92) ReusedExchange [Reuses operator id: 242]
Output [5]: [ca_address_sk#71, ca_street_number#72, ca_street_name#73, ca_city#74, ca_zip#75]

(93) Sort [codegen id : 33]
Input [5]: [ca_address_sk#71, ca_street_number#72, ca_street_name#73, ca_city#74, ca_zip#75]
Arguments: [ca_address_sk#71 ASC NULLS FIRST], false, 0

(94) SortMergeJoin [codegen id : 34]
Left keys [1]: [ss_addr_sk#5]
Right keys [1]: [ca_address_sk#71]
Join type: Inner
Join condition: None

(95) Project [codegen id : 34]
Output [16]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_addr_sk#51, d_year#59, d_year#61, hd_income_band_sk#68, hd_income_band_sk#70, ca_street_number#72, ca_street_name#73, ca_city#74, ca_zip#75]
Input [18]: [ss_item_sk#1, ss_addr_sk#5, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_addr_sk#51, d_year#59, d_year#61, hd_income_band_sk#68, hd_income_band_sk#70, ca_address_sk#71, ca_street_number#72, ca_street_name#73, ca_city#74, ca_zip#75]

(96) Exchange
Input [16]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_addr_sk#51, d_year#59, d_year#61, hd_income_band_sk#68, hd_income_band_sk#70, ca_street_number#72, ca_street_name#73, ca_city#74, ca_zip#75]
Arguments: hashpartitioning(c_current_addr_sk#51, 5), ENSURE_REQUIREMENTS, [plan_id=16]

(97) Sort [codegen id : 35]
Input [16]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_addr_sk#51, d_year#59, d_year#61, hd_income_band_sk#68, hd_income_band_sk#70, ca_street_number#72, ca_street_name#73, ca_city#74, ca_zip#75]
Arguments: [c_current_addr_sk#51 ASC NULLS FIRST], false, 0

(98) ReusedExchange [Reuses operator id: 242]
Output [5]: [ca_address_sk#76, ca_street_number#77, ca_street_name#78, ca_city#79, ca_zip#80]

(99) Sort [codegen id : 37]
Input [5]: [ca_address_sk#76, ca_street_number#77, ca_street_name#78, ca_city#79, ca_zip#80]
Arguments: [ca_address_sk#76 ASC NULLS FIRST], false, 0

(100) SortMergeJoin [codegen id : 41]
Left keys [1]: [c_current_addr_sk#51]
Right keys [1]: [ca_address_sk#76]
Join type: Inner
Join condition: None

(101) Project [codegen id : 41]
Output [19]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, d_year#59, d_year#61, hd_income_band_sk#68, hd_income_band_sk#70, ca_street_number#72, ca_street_name#73, ca_city#74, ca_zip#75, ca_street_number#77, ca_street_name#78, ca_city#79, ca_zip#80]
Input [21]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, c_current_addr_sk#51, d_year#59, d_year#61, hd_income_band_sk#68, hd_income_band_sk#70, ca_street_number#72, ca_street_name#73, ca_city#74, ca_zip#75, ca_address_sk#76, ca_street_number#77, ca_street_name#78, ca_city#79, ca_zip#80]

(102) Scan parquet spark_catalog.default.income_band
Output [1]: [ib_income_band_sk#81]
Batched: true
Location [not included in comparison]/{warehouse_dir}/income_band]
PushedFilters: [IsNotNull(ib_income_band_sk)]
ReadSchema: struct<ib_income_band_sk:int>

(103) ColumnarToRow [codegen id : 38]
Input [1]: [ib_income_band_sk#81]

(104) Filter [codegen id : 38]
Input [1]: [ib_income_band_sk#81]
Condition : isnotnull(ib_income_band_sk#81)

(105) BroadcastExchange
Input [1]: [ib_income_band_sk#81]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=17]

(106) BroadcastHashJoin [codegen id : 41]
Left keys [1]: [hd_income_band_sk#68]
Right keys [1]: [ib_income_band_sk#81]
Join type: Inner
Join condition: None

(107) Project [codegen id : 41]
Output [18]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, d_year#59, d_year#61, hd_income_band_sk#70, ca_street_number#72, ca_street_name#73, ca_city#74, ca_zip#75, ca_street_number#77, ca_street_name#78, ca_city#79, ca_zip#80]
Input [20]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, d_year#59, d_year#61, hd_income_band_sk#68, hd_income_band_sk#70, ca_street_number#72, ca_street_name#73, ca_city#74, ca_zip#75, ca_street_number#77, ca_street_name#78, ca_city#79, ca_zip#80, ib_income_band_sk#81]

(108) ReusedExchange [Reuses operator id: 105]
Output [1]: [ib_income_band_sk#82]

(109) BroadcastHashJoin [codegen id : 41]
Left keys [1]: [hd_income_band_sk#70]
Right keys [1]: [ib_income_band_sk#82]
Join type: Inner
Join condition: None

(110) Project [codegen id : 41]
Output [17]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, d_year#59, d_year#61, ca_street_number#72, ca_street_name#73, ca_city#74, ca_zip#75, ca_street_number#77, ca_street_name#78, ca_city#79, ca_zip#80]
Input [19]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, d_year#59, d_year#61, hd_income_band_sk#70, ca_street_number#72, ca_street_name#73, ca_city#74, ca_zip#75, ca_street_number#77, ca_street_name#78, ca_city#79, ca_zip#80, ib_income_band_sk#82]

(111) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#83, i_current_price#84, i_color#85, i_product_name#86]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), In(i_color, [burlywood           ,floral              ,indian              ,medium              ,purple              ,spring              ]), GreaterThanOrEqual(i_current_price,64.00), LessThanOrEqual(i_current_price,74.00), GreaterThanOrEqual(i_current_price,65.00), LessThanOrEqual(i_current_price,79.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_color:string,i_product_name:string>

(112) ColumnarToRow [codegen id : 40]
Input [4]: [i_item_sk#83, i_current_price#84, i_color#85, i_product_name#86]

(113) Filter [codegen id : 40]
Input [4]: [i_item_sk#83, i_current_price#84, i_color#85, i_product_name#86]
Condition : ((((((isnotnull(i_current_price#84) AND i_color#85 IN (purple              ,burlywood           ,indian              ,spring              ,floral              ,medium              )) AND (i_current_price#84 >= 64.00)) AND (i_current_price#84 <= 74.00)) AND (i_current_price#84 >= 65.00)) AND (i_current_price#84 <= 79.00)) AND isnotnull(i_item_sk#83))

(114) Project [codegen id : 40]
Output [2]: [i_item_sk#83, i_product_name#86]
Input [4]: [i_item_sk#83, i_current_price#84, i_color#85, i_product_name#86]

(115) BroadcastExchange
Input [2]: [i_item_sk#83, i_product_name#86]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=18]

(116) BroadcastHashJoin [codegen id : 41]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#83]
Join type: Inner
Join condition: None

(117) Project [codegen id : 41]
Output [18]: [ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, d_year#59, d_year#61, s_store_name#46, s_zip#47, ca_street_number#72, ca_street_name#73, ca_city#74, ca_zip#75, ca_street_number#77, ca_street_name#78, ca_city#79, ca_zip#80, i_item_sk#83, i_product_name#86]
Input [19]: [ss_item_sk#1, ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, s_store_name#46, s_zip#47, d_year#59, d_year#61, ca_street_number#72, ca_street_name#73, ca_city#74, ca_zip#75, ca_street_number#77, ca_street_name#78, ca_city#79, ca_zip#80, i_item_sk#83, i_product_name#86]

(118) HashAggregate [codegen id : 41]
Input [18]: [ss_wholesale_cost#9, ss_list_price#10, ss_coupon_amt#11, d_year#44, d_year#59, d_year#61, s_store_name#46, s_zip#47, ca_street_number#72, ca_street_name#73, ca_city#74, ca_zip#75, ca_street_number#77, ca_street_name#78, ca_city#79, ca_zip#80, i_item_sk#83, i_product_name#86]
Keys [15]: [i_product_name#86, i_item_sk#83, s_store_name#46, s_zip#47, ca_street_number#72, ca_street_name#73, ca_city#74, ca_zip#75, ca_street_number#77, ca_street_name#78, ca_city#79, ca_zip#80, d_year#44, d_year#59, d_year#61]
Functions [4]: [partial_count(1), partial_sum(UnscaledValue(ss_wholesale_cost#9)), partial_sum(UnscaledValue(ss_list_price#10)), partial_sum(UnscaledValue(ss_coupon_amt#11))]
Aggregate Attributes [4]: [count#87, sum#88, sum#89, sum#90]
Results [19]: [i_product_name#86, i_item_sk#83, s_store_name#46, s_zip#47, ca_street_number#72, ca_street_name#73, ca_city#74, ca_zip#75, ca_street_number#77, ca_street_name#78, ca_city#79, ca_zip#80, d_year#44, d_year#59, d_year#61, count#91, sum#92, sum#93, sum#94]

(119) Exchange
Input [19]: [i_product_name#86, i_item_sk#83, s_store_name#46, s_zip#47, ca_street_number#72, ca_street_name#73, ca_city#74, ca_zip#75, ca_street_number#77, ca_street_name#78, ca_city#79, ca_zip#80, d_year#44, d_year#59, d_year#61, count#91, sum#92, sum#93, sum#94]
Arguments: hashpartitioning(i_product_name#86, i_item_sk#83, s_store_name#46, s_zip#47, ca_street_number#72, ca_street_name#73, ca_city#74, ca_zip#75, ca_street_number#77, ca_street_name#78, ca_city#79, ca_zip#80, d_year#44, d_year#59, d_year#61, 5), ENSURE_REQUIREMENTS, [plan_id=19]

(120) HashAggregate [codegen id : 42]
Input [19]: [i_product_name#86, i_item_sk#83, s_store_name#46, s_zip#47, ca_street_number#72, ca_street_name#73, ca_city#74, ca_zip#75, ca_street_number#77, ca_street_name#78, ca_city#79, ca_zip#80, d_year#44, d_year#59, d_year#61, count#91, sum#92, sum#93, sum#94]
Keys [15]: [i_product_name#86, i_item_sk#83, s_store_name#46, s_zip#47, ca_street_number#72, ca_street_name#73, ca_city#74, ca_zip#75, ca_street_number#77, ca_street_name#78, ca_city#79, ca_zip#80, d_year#44, d_year#59, d_year#61]
Functions [4]: [count(1), sum(UnscaledValue(ss_wholesale_cost#9)), sum(UnscaledValue(ss_list_price#10)), sum(UnscaledValue(ss_coupon_amt#11))]
Aggregate Attributes [4]: [count(1)#95, sum(UnscaledValue(ss_wholesale_cost#9))#96, sum(UnscaledValue(ss_list_price#10))#97, sum(UnscaledValue(ss_coupon_amt#11))#98]
Results [17]: [i_product_name#86 AS product_name#99, i_item_sk#83 AS item_sk#100, s_store_name#46 AS store_name#101, s_zip#47 AS store_zip#102, ca_street_number#72 AS b_street_number#103, ca_street_name#73 AS b_streen_name#104, ca_city#74 AS b_city#105, ca_zip#75 AS b_zip#106, ca_street_number#77 AS c_street_number#107, ca_street_name#78 AS c_street_name#108, ca_city#79 AS c_city#109, ca_zip#80 AS c_zip#110, d_year#44 AS syear#111, count(1)#95 AS cnt#112, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#9))#96,17,2) AS s1#113, MakeDecimal(sum(UnscaledValue(ss_list_price#10))#97,17,2) AS s2#114, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#11))#98,17,2) AS s3#115]

(121) Exchange
Input [17]: [product_name#99, item_sk#100, store_name#101, store_zip#102, b_street_number#103, b_streen_name#104, b_city#105, b_zip#106, c_street_number#107, c_street_name#108, c_city#109, c_zip#110, syear#111, cnt#112, s1#113, s2#114, s3#115]
Arguments: hashpartitioning(item_sk#100, store_name#101, store_zip#102, 5), ENSURE_REQUIREMENTS, [plan_id=20]

(122) Sort [codegen id : 43]
Input [17]: [product_name#99, item_sk#100, store_name#101, store_zip#102, b_street_number#103, b_streen_name#104, b_city#105, b_zip#106, c_street_number#107, c_street_name#108, c_city#109, c_zip#110, syear#111, cnt#112, s1#113, s2#114, s3#115]
Arguments: [item_sk#100 ASC NULLS FIRST, store_name#101 ASC NULLS FIRST, store_zip#102 ASC NULLS FIRST], false, 0

(123) Scan parquet spark_catalog.default.store_sales
Output [12]: [ss_item_sk#116, ss_customer_sk#117, ss_cdemo_sk#118, ss_hdemo_sk#119, ss_addr_sk#120, ss_store_sk#121, ss_promo_sk#122, ss_ticket_number#123, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, ss_sold_date_sk#127]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#127), dynamicpruningexpression(ss_sold_date_sk#127 IN dynamicpruning#128)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_cdemo_sk), IsNotNull(ss_promo_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(124) ColumnarToRow [codegen id : 44]
Input [12]: [ss_item_sk#116, ss_customer_sk#117, ss_cdemo_sk#118, ss_hdemo_sk#119, ss_addr_sk#120, ss_store_sk#121, ss_promo_sk#122, ss_ticket_number#123, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, ss_sold_date_sk#127]

(125) Filter [codegen id : 44]
Input [12]: [ss_item_sk#116, ss_customer_sk#117, ss_cdemo_sk#118, ss_hdemo_sk#119, ss_addr_sk#120, ss_store_sk#121, ss_promo_sk#122, ss_ticket_number#123, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, ss_sold_date_sk#127]
Condition : ((((((((((isnotnull(ss_item_sk#116) AND isnotnull(ss_ticket_number#123)) AND isnotnull(ss_store_sk#121)) AND isnotnull(ss_customer_sk#117)) AND isnotnull(ss_cdemo_sk#118)) AND isnotnull(ss_promo_sk#122)) AND isnotnull(ss_hdemo_sk#119)) AND isnotnull(ss_addr_sk#120)) AND true) AND might_contain(ReusedSubquery Subquery scalar-subquery#14, [id=#15], xxhash64(ss_cdemo_sk#118, 42), false)) AND might_contain(ReusedSubquery Subquery scalar-subquery#16, [id=#17], xxhash64(ss_addr_sk#120, 42), false))

(126) Exchange
Input [12]: [ss_item_sk#116, ss_customer_sk#117, ss_cdemo_sk#118, ss_hdemo_sk#119, ss_addr_sk#120, ss_store_sk#121, ss_promo_sk#122, ss_ticket_number#123, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, ss_sold_date_sk#127]
Arguments: hashpartitioning(ss_item_sk#116, ss_ticket_number#123, 5), ENSURE_REQUIREMENTS, [plan_id=21]

(127) Sort [codegen id : 45]
Input [12]: [ss_item_sk#116, ss_customer_sk#117, ss_cdemo_sk#118, ss_hdemo_sk#119, ss_addr_sk#120, ss_store_sk#121, ss_promo_sk#122, ss_ticket_number#123, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, ss_sold_date_sk#127]
Arguments: [ss_item_sk#116 ASC NULLS FIRST, ss_ticket_number#123 ASC NULLS FIRST], false, 0

(128) ReusedExchange [Reuses operator id: 10]
Output [2]: [sr_item_sk#129, sr_ticket_number#130]

(129) Sort [codegen id : 47]
Input [2]: [sr_item_sk#129, sr_ticket_number#130]
Arguments: [sr_item_sk#129 ASC NULLS FIRST, sr_ticket_number#130 ASC NULLS FIRST], false, 0

(130) SortMergeJoin [codegen id : 56]
Left keys [2]: [ss_item_sk#116, ss_ticket_number#123]
Right keys [2]: [sr_item_sk#129, sr_ticket_number#130]
Join type: Inner
Join condition: None

(131) Project [codegen id : 56]
Output [11]: [ss_item_sk#116, ss_customer_sk#117, ss_cdemo_sk#118, ss_hdemo_sk#119, ss_addr_sk#120, ss_store_sk#121, ss_promo_sk#122, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, ss_sold_date_sk#127]
Input [14]: [ss_item_sk#116, ss_customer_sk#117, ss_cdemo_sk#118, ss_hdemo_sk#119, ss_addr_sk#120, ss_store_sk#121, ss_promo_sk#122, ss_ticket_number#123, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, ss_sold_date_sk#127, sr_item_sk#129, sr_ticket_number#130]

(132) ReusedExchange [Reuses operator id: 33]
Output [1]: [cs_item_sk#131]

(133) BroadcastHashJoin [codegen id : 56]
Left keys [1]: [ss_item_sk#116]
Right keys [1]: [cs_item_sk#131]
Join type: Inner
Join condition: None

(134) Project [codegen id : 56]
Output [11]: [ss_item_sk#116, ss_customer_sk#117, ss_cdemo_sk#118, ss_hdemo_sk#119, ss_addr_sk#120, ss_store_sk#121, ss_promo_sk#122, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, ss_sold_date_sk#127]
Input [12]: [ss_item_sk#116, ss_customer_sk#117, ss_cdemo_sk#118, ss_hdemo_sk#119, ss_addr_sk#120, ss_store_sk#121, ss_promo_sk#122, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, ss_sold_date_sk#127, cs_item_sk#131]

(135) ReusedExchange [Reuses operator id: 249]
Output [2]: [d_date_sk#132, d_year#133]

(136) BroadcastHashJoin [codegen id : 56]
Left keys [1]: [ss_sold_date_sk#127]
Right keys [1]: [d_date_sk#132]
Join type: Inner
Join condition: None

(137) Project [codegen id : 56]
Output [11]: [ss_item_sk#116, ss_customer_sk#117, ss_cdemo_sk#118, ss_hdemo_sk#119, ss_addr_sk#120, ss_store_sk#121, ss_promo_sk#122, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133]
Input [13]: [ss_item_sk#116, ss_customer_sk#117, ss_cdemo_sk#118, ss_hdemo_sk#119, ss_addr_sk#120, ss_store_sk#121, ss_promo_sk#122, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, ss_sold_date_sk#127, d_date_sk#132, d_year#133]

(138) ReusedExchange [Reuses operator id: 42]
Output [3]: [s_store_sk#134, s_store_name#135, s_zip#136]

(139) BroadcastHashJoin [codegen id : 56]
Left keys [1]: [ss_store_sk#121]
Right keys [1]: [s_store_sk#134]
Join type: Inner
Join condition: None

(140) Project [codegen id : 56]
Output [12]: [ss_item_sk#116, ss_customer_sk#117, ss_cdemo_sk#118, ss_hdemo_sk#119, ss_addr_sk#120, ss_promo_sk#122, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136]
Input [14]: [ss_item_sk#116, ss_customer_sk#117, ss_cdemo_sk#118, ss_hdemo_sk#119, ss_addr_sk#120, ss_store_sk#121, ss_promo_sk#122, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_sk#134, s_store_name#135, s_zip#136]

(141) Exchange
Input [12]: [ss_item_sk#116, ss_customer_sk#117, ss_cdemo_sk#118, ss_hdemo_sk#119, ss_addr_sk#120, ss_promo_sk#122, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136]
Arguments: hashpartitioning(ss_customer_sk#117, 5), ENSURE_REQUIREMENTS, [plan_id=22]

(142) Sort [codegen id : 57]
Input [12]: [ss_item_sk#116, ss_customer_sk#117, ss_cdemo_sk#118, ss_hdemo_sk#119, ss_addr_sk#120, ss_promo_sk#122, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136]
Arguments: [ss_customer_sk#117 ASC NULLS FIRST], false, 0

(143) Scan parquet spark_catalog.default.customer
Output [6]: [c_customer_sk#137, c_current_cdemo_sk#138, c_current_hdemo_sk#139, c_current_addr_sk#140, c_first_shipto_date_sk#141, c_first_sales_date_sk#142]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_first_sales_date_sk), IsNotNull(c_first_shipto_date_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_hdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int,c_first_shipto_date_sk:int,c_first_sales_date_sk:int>

(144) ColumnarToRow [codegen id : 58]
Input [6]: [c_customer_sk#137, c_current_cdemo_sk#138, c_current_hdemo_sk#139, c_current_addr_sk#140, c_first_shipto_date_sk#141, c_first_sales_date_sk#142]

(145) Filter [codegen id : 58]
Input [6]: [c_customer_sk#137, c_current_cdemo_sk#138, c_current_hdemo_sk#139, c_current_addr_sk#140, c_first_shipto_date_sk#141, c_first_sales_date_sk#142]
Condition : ((((((isnotnull(c_customer_sk#137) AND isnotnull(c_first_sales_date_sk#142)) AND isnotnull(c_first_shipto_date_sk#141)) AND isnotnull(c_current_cdemo_sk#138)) AND isnotnull(c_current_hdemo_sk#139)) AND isnotnull(c_current_addr_sk#140)) AND might_contain(ReusedSubquery Subquery scalar-subquery#14, [id=#15], xxhash64(c_current_cdemo_sk#138, 42), false))

(146) Exchange
Input [6]: [c_customer_sk#137, c_current_cdemo_sk#138, c_current_hdemo_sk#139, c_current_addr_sk#140, c_first_shipto_date_sk#141, c_first_sales_date_sk#142]
Arguments: hashpartitioning(c_customer_sk#137, 5), ENSURE_REQUIREMENTS, [plan_id=23]

(147) Sort [codegen id : 59]
Input [6]: [c_customer_sk#137, c_current_cdemo_sk#138, c_current_hdemo_sk#139, c_current_addr_sk#140, c_first_shipto_date_sk#141, c_first_sales_date_sk#142]
Arguments: [c_customer_sk#137 ASC NULLS FIRST], false, 0

(148) SortMergeJoin [codegen id : 62]
Left keys [1]: [ss_customer_sk#117]
Right keys [1]: [c_customer_sk#137]
Join type: Inner
Join condition: None

(149) Project [codegen id : 62]
Output [16]: [ss_item_sk#116, ss_cdemo_sk#118, ss_hdemo_sk#119, ss_addr_sk#120, ss_promo_sk#122, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, c_current_cdemo_sk#138, c_current_hdemo_sk#139, c_current_addr_sk#140, c_first_shipto_date_sk#141, c_first_sales_date_sk#142]
Input [18]: [ss_item_sk#116, ss_customer_sk#117, ss_cdemo_sk#118, ss_hdemo_sk#119, ss_addr_sk#120, ss_promo_sk#122, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, c_customer_sk#137, c_current_cdemo_sk#138, c_current_hdemo_sk#139, c_current_addr_sk#140, c_first_shipto_date_sk#141, c_first_sales_date_sk#142]

(150) ReusedExchange [Reuses operator id: 57]
Output [2]: [d_date_sk#143, d_year#144]

(151) BroadcastHashJoin [codegen id : 62]
Left keys [1]: [c_first_sales_date_sk#142]
Right keys [1]: [d_date_sk#143]
Join type: Inner
Join condition: None

(152) Project [codegen id : 62]
Output [16]: [ss_item_sk#116, ss_cdemo_sk#118, ss_hdemo_sk#119, ss_addr_sk#120, ss_promo_sk#122, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, c_current_cdemo_sk#138, c_current_hdemo_sk#139, c_current_addr_sk#140, c_first_shipto_date_sk#141, d_year#144]
Input [18]: [ss_item_sk#116, ss_cdemo_sk#118, ss_hdemo_sk#119, ss_addr_sk#120, ss_promo_sk#122, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, c_current_cdemo_sk#138, c_current_hdemo_sk#139, c_current_addr_sk#140, c_first_shipto_date_sk#141, c_first_sales_date_sk#142, d_date_sk#143, d_year#144]

(153) ReusedExchange [Reuses operator id: 57]
Output [2]: [d_date_sk#145, d_year#146]

(154) BroadcastHashJoin [codegen id : 62]
Left keys [1]: [c_first_shipto_date_sk#141]
Right keys [1]: [d_date_sk#145]
Join type: Inner
Join condition: None

(155) Project [codegen id : 62]
Output [16]: [ss_item_sk#116, ss_cdemo_sk#118, ss_hdemo_sk#119, ss_addr_sk#120, ss_promo_sk#122, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, c_current_cdemo_sk#138, c_current_hdemo_sk#139, c_current_addr_sk#140, d_year#144, d_year#146]
Input [18]: [ss_item_sk#116, ss_cdemo_sk#118, ss_hdemo_sk#119, ss_addr_sk#120, ss_promo_sk#122, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, c_current_cdemo_sk#138, c_current_hdemo_sk#139, c_current_addr_sk#140, c_first_shipto_date_sk#141, d_year#144, d_date_sk#145, d_year#146]

(156) Exchange
Input [16]: [ss_item_sk#116, ss_cdemo_sk#118, ss_hdemo_sk#119, ss_addr_sk#120, ss_promo_sk#122, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, c_current_cdemo_sk#138, c_current_hdemo_sk#139, c_current_addr_sk#140, d_year#144, d_year#146]
Arguments: hashpartitioning(ss_cdemo_sk#118, 5), ENSURE_REQUIREMENTS, [plan_id=24]

(157) Sort [codegen id : 63]
Input [16]: [ss_item_sk#116, ss_cdemo_sk#118, ss_hdemo_sk#119, ss_addr_sk#120, ss_promo_sk#122, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, c_current_cdemo_sk#138, c_current_hdemo_sk#139, c_current_addr_sk#140, d_year#144, d_year#146]
Arguments: [ss_cdemo_sk#118 ASC NULLS FIRST], false, 0

(158) ReusedExchange [Reuses operator id: 235]
Output [2]: [cd_demo_sk#147, cd_marital_status#148]

(159) Sort [codegen id : 65]
Input [2]: [cd_demo_sk#147, cd_marital_status#148]
Arguments: [cd_demo_sk#147 ASC NULLS FIRST], false, 0

(160) SortMergeJoin [codegen id : 66]
Left keys [1]: [ss_cdemo_sk#118]
Right keys [1]: [cd_demo_sk#147]
Join type: Inner
Join condition: None

(161) Project [codegen id : 66]
Output [16]: [ss_item_sk#116, ss_hdemo_sk#119, ss_addr_sk#120, ss_promo_sk#122, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, c_current_cdemo_sk#138, c_current_hdemo_sk#139, c_current_addr_sk#140, d_year#144, d_year#146, cd_marital_status#148]
Input [18]: [ss_item_sk#116, ss_cdemo_sk#118, ss_hdemo_sk#119, ss_addr_sk#120, ss_promo_sk#122, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, c_current_cdemo_sk#138, c_current_hdemo_sk#139, c_current_addr_sk#140, d_year#144, d_year#146, cd_demo_sk#147, cd_marital_status#148]

(162) Exchange
Input [16]: [ss_item_sk#116, ss_hdemo_sk#119, ss_addr_sk#120, ss_promo_sk#122, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, c_current_cdemo_sk#138, c_current_hdemo_sk#139, c_current_addr_sk#140, d_year#144, d_year#146, cd_marital_status#148]
Arguments: hashpartitioning(c_current_cdemo_sk#138, 5), ENSURE_REQUIREMENTS, [plan_id=25]

(163) Sort [codegen id : 67]
Input [16]: [ss_item_sk#116, ss_hdemo_sk#119, ss_addr_sk#120, ss_promo_sk#122, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, c_current_cdemo_sk#138, c_current_hdemo_sk#139, c_current_addr_sk#140, d_year#144, d_year#146, cd_marital_status#148]
Arguments: [c_current_cdemo_sk#138 ASC NULLS FIRST], false, 0

(164) ReusedExchange [Reuses operator id: 235]
Output [2]: [cd_demo_sk#149, cd_marital_status#150]

(165) Sort [codegen id : 69]
Input [2]: [cd_demo_sk#149, cd_marital_status#150]
Arguments: [cd_demo_sk#149 ASC NULLS FIRST], false, 0

(166) SortMergeJoin [codegen id : 73]
Left keys [1]: [c_current_cdemo_sk#138]
Right keys [1]: [cd_demo_sk#149]
Join type: Inner
Join condition: NOT (cd_marital_status#148 = cd_marital_status#150)

(167) Project [codegen id : 73]
Output [14]: [ss_item_sk#116, ss_hdemo_sk#119, ss_addr_sk#120, ss_promo_sk#122, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, c_current_hdemo_sk#139, c_current_addr_sk#140, d_year#144, d_year#146]
Input [18]: [ss_item_sk#116, ss_hdemo_sk#119, ss_addr_sk#120, ss_promo_sk#122, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, c_current_cdemo_sk#138, c_current_hdemo_sk#139, c_current_addr_sk#140, d_year#144, d_year#146, cd_marital_status#148, cd_demo_sk#149, cd_marital_status#150]

(168) ReusedExchange [Reuses operator id: 78]
Output [1]: [p_promo_sk#151]

(169) BroadcastHashJoin [codegen id : 73]
Left keys [1]: [ss_promo_sk#122]
Right keys [1]: [p_promo_sk#151]
Join type: Inner
Join condition: None

(170) Project [codegen id : 73]
Output [13]: [ss_item_sk#116, ss_hdemo_sk#119, ss_addr_sk#120, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, c_current_hdemo_sk#139, c_current_addr_sk#140, d_year#144, d_year#146]
Input [15]: [ss_item_sk#116, ss_hdemo_sk#119, ss_addr_sk#120, ss_promo_sk#122, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, c_current_hdemo_sk#139, c_current_addr_sk#140, d_year#144, d_year#146, p_promo_sk#151]

(171) ReusedExchange [Reuses operator id: 84]
Output [2]: [hd_demo_sk#152, hd_income_band_sk#153]

(172) BroadcastHashJoin [codegen id : 73]
Left keys [1]: [ss_hdemo_sk#119]
Right keys [1]: [hd_demo_sk#152]
Join type: Inner
Join condition: None

(173) Project [codegen id : 73]
Output [13]: [ss_item_sk#116, ss_addr_sk#120, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, c_current_hdemo_sk#139, c_current_addr_sk#140, d_year#144, d_year#146, hd_income_band_sk#153]
Input [15]: [ss_item_sk#116, ss_hdemo_sk#119, ss_addr_sk#120, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, c_current_hdemo_sk#139, c_current_addr_sk#140, d_year#144, d_year#146, hd_demo_sk#152, hd_income_band_sk#153]

(174) ReusedExchange [Reuses operator id: 84]
Output [2]: [hd_demo_sk#154, hd_income_band_sk#155]

(175) BroadcastHashJoin [codegen id : 73]
Left keys [1]: [c_current_hdemo_sk#139]
Right keys [1]: [hd_demo_sk#154]
Join type: Inner
Join condition: None

(176) Project [codegen id : 73]
Output [13]: [ss_item_sk#116, ss_addr_sk#120, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, c_current_addr_sk#140, d_year#144, d_year#146, hd_income_band_sk#153, hd_income_band_sk#155]
Input [15]: [ss_item_sk#116, ss_addr_sk#120, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, c_current_hdemo_sk#139, c_current_addr_sk#140, d_year#144, d_year#146, hd_income_band_sk#153, hd_demo_sk#154, hd_income_band_sk#155]

(177) Exchange
Input [13]: [ss_item_sk#116, ss_addr_sk#120, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, c_current_addr_sk#140, d_year#144, d_year#146, hd_income_band_sk#153, hd_income_band_sk#155]
Arguments: hashpartitioning(ss_addr_sk#120, 5), ENSURE_REQUIREMENTS, [plan_id=26]

(178) Sort [codegen id : 74]
Input [13]: [ss_item_sk#116, ss_addr_sk#120, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, c_current_addr_sk#140, d_year#144, d_year#146, hd_income_band_sk#153, hd_income_band_sk#155]
Arguments: [ss_addr_sk#120 ASC NULLS FIRST], false, 0

(179) ReusedExchange [Reuses operator id: 242]
Output [5]: [ca_address_sk#156, ca_street_number#157, ca_street_name#158, ca_city#159, ca_zip#160]

(180) Sort [codegen id : 76]
Input [5]: [ca_address_sk#156, ca_street_number#157, ca_street_name#158, ca_city#159, ca_zip#160]
Arguments: [ca_address_sk#156 ASC NULLS FIRST], false, 0

(181) SortMergeJoin [codegen id : 77]
Left keys [1]: [ss_addr_sk#120]
Right keys [1]: [ca_address_sk#156]
Join type: Inner
Join condition: None

(182) Project [codegen id : 77]
Output [16]: [ss_item_sk#116, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, c_current_addr_sk#140, d_year#144, d_year#146, hd_income_band_sk#153, hd_income_band_sk#155, ca_street_number#157, ca_street_name#158, ca_city#159, ca_zip#160]
Input [18]: [ss_item_sk#116, ss_addr_sk#120, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, c_current_addr_sk#140, d_year#144, d_year#146, hd_income_band_sk#153, hd_income_band_sk#155, ca_address_sk#156, ca_street_number#157, ca_street_name#158, ca_city#159, ca_zip#160]

(183) Exchange
Input [16]: [ss_item_sk#116, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, c_current_addr_sk#140, d_year#144, d_year#146, hd_income_band_sk#153, hd_income_band_sk#155, ca_street_number#157, ca_street_name#158, ca_city#159, ca_zip#160]
Arguments: hashpartitioning(c_current_addr_sk#140, 5), ENSURE_REQUIREMENTS, [plan_id=27]

(184) Sort [codegen id : 78]
Input [16]: [ss_item_sk#116, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, c_current_addr_sk#140, d_year#144, d_year#146, hd_income_band_sk#153, hd_income_band_sk#155, ca_street_number#157, ca_street_name#158, ca_city#159, ca_zip#160]
Arguments: [c_current_addr_sk#140 ASC NULLS FIRST], false, 0

(185) ReusedExchange [Reuses operator id: 242]
Output [5]: [ca_address_sk#161, ca_street_number#162, ca_street_name#163, ca_city#164, ca_zip#165]

(186) Sort [codegen id : 80]
Input [5]: [ca_address_sk#161, ca_street_number#162, ca_street_name#163, ca_city#164, ca_zip#165]
Arguments: [ca_address_sk#161 ASC NULLS FIRST], false, 0

(187) SortMergeJoin [codegen id : 84]
Left keys [1]: [c_current_addr_sk#140]
Right keys [1]: [ca_address_sk#161]
Join type: Inner
Join condition: None

(188) Project [codegen id : 84]
Output [19]: [ss_item_sk#116, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, d_year#144, d_year#146, hd_income_band_sk#153, hd_income_band_sk#155, ca_street_number#157, ca_street_name#158, ca_city#159, ca_zip#160, ca_street_number#162, ca_street_name#163, ca_city#164, ca_zip#165]
Input [21]: [ss_item_sk#116, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, c_current_addr_sk#140, d_year#144, d_year#146, hd_income_band_sk#153, hd_income_band_sk#155, ca_street_number#157, ca_street_name#158, ca_city#159, ca_zip#160, ca_address_sk#161, ca_street_number#162, ca_street_name#163, ca_city#164, ca_zip#165]

(189) ReusedExchange [Reuses operator id: 105]
Output [1]: [ib_income_band_sk#166]

(190) BroadcastHashJoin [codegen id : 84]
Left keys [1]: [hd_income_band_sk#153]
Right keys [1]: [ib_income_band_sk#166]
Join type: Inner
Join condition: None

(191) Project [codegen id : 84]
Output [18]: [ss_item_sk#116, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, d_year#144, d_year#146, hd_income_band_sk#155, ca_street_number#157, ca_street_name#158, ca_city#159, ca_zip#160, ca_street_number#162, ca_street_name#163, ca_city#164, ca_zip#165]
Input [20]: [ss_item_sk#116, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, d_year#144, d_year#146, hd_income_band_sk#153, hd_income_band_sk#155, ca_street_number#157, ca_street_name#158, ca_city#159, ca_zip#160, ca_street_number#162, ca_street_name#163, ca_city#164, ca_zip#165, ib_income_band_sk#166]

(192) ReusedExchange [Reuses operator id: 105]
Output [1]: [ib_income_band_sk#167]

(193) BroadcastHashJoin [codegen id : 84]
Left keys [1]: [hd_income_band_sk#155]
Right keys [1]: [ib_income_band_sk#167]
Join type: Inner
Join condition: None

(194) Project [codegen id : 84]
Output [17]: [ss_item_sk#116, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, d_year#144, d_year#146, ca_street_number#157, ca_street_name#158, ca_city#159, ca_zip#160, ca_street_number#162, ca_street_name#163, ca_city#164, ca_zip#165]
Input [19]: [ss_item_sk#116, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, d_year#144, d_year#146, hd_income_band_sk#155, ca_street_number#157, ca_street_name#158, ca_city#159, ca_zip#160, ca_street_number#162, ca_street_name#163, ca_city#164, ca_zip#165, ib_income_band_sk#167]

(195) ReusedExchange [Reuses operator id: 115]
Output [2]: [i_item_sk#168, i_product_name#169]

(196) BroadcastHashJoin [codegen id : 84]
Left keys [1]: [ss_item_sk#116]
Right keys [1]: [i_item_sk#168]
Join type: Inner
Join condition: None

(197) Project [codegen id : 84]
Output [18]: [ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, d_year#144, d_year#146, s_store_name#135, s_zip#136, ca_street_number#157, ca_street_name#158, ca_city#159, ca_zip#160, ca_street_number#162, ca_street_name#163, ca_city#164, ca_zip#165, i_item_sk#168, i_product_name#169]
Input [19]: [ss_item_sk#116, ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, s_store_name#135, s_zip#136, d_year#144, d_year#146, ca_street_number#157, ca_street_name#158, ca_city#159, ca_zip#160, ca_street_number#162, ca_street_name#163, ca_city#164, ca_zip#165, i_item_sk#168, i_product_name#169]

(198) HashAggregate [codegen id : 84]
Input [18]: [ss_wholesale_cost#124, ss_list_price#125, ss_coupon_amt#126, d_year#133, d_year#144, d_year#146, s_store_name#135, s_zip#136, ca_street_number#157, ca_street_name#158, ca_city#159, ca_zip#160, ca_street_number#162, ca_street_name#163, ca_city#164, ca_zip#165, i_item_sk#168, i_product_name#169]
Keys [15]: [i_product_name#169, i_item_sk#168, s_store_name#135, s_zip#136, ca_street_number#157, ca_street_name#158, ca_city#159, ca_zip#160, ca_street_number#162, ca_street_name#163, ca_city#164, ca_zip#165, d_year#133, d_year#144, d_year#146]
Functions [4]: [partial_count(1), partial_sum(UnscaledValue(ss_wholesale_cost#124)), partial_sum(UnscaledValue(ss_list_price#125)), partial_sum(UnscaledValue(ss_coupon_amt#126))]
Aggregate Attributes [4]: [count#87, sum#170, sum#171, sum#172]
Results [19]: [i_product_name#169, i_item_sk#168, s_store_name#135, s_zip#136, ca_street_number#157, ca_street_name#158, ca_city#159, ca_zip#160, ca_street_number#162, ca_street_name#163, ca_city#164, ca_zip#165, d_year#133, d_year#144, d_year#146, count#91, sum#173, sum#174, sum#175]

(199) Exchange
Input [19]: [i_product_name#169, i_item_sk#168, s_store_name#135, s_zip#136, ca_street_number#157, ca_street_name#158, ca_city#159, ca_zip#160, ca_street_number#162, ca_street_name#163, ca_city#164, ca_zip#165, d_year#133, d_year#144, d_year#146, count#91, sum#173, sum#174, sum#175]
Arguments: hashpartitioning(i_product_name#169, i_item_sk#168, s_store_name#135, s_zip#136, ca_street_number#157, ca_street_name#158, ca_city#159, ca_zip#160, ca_street_number#162, ca_street_name#163, ca_city#164, ca_zip#165, d_year#133, d_year#144, d_year#146, 5), ENSURE_REQUIREMENTS, [plan_id=28]

(200) HashAggregate [codegen id : 85]
Input [19]: [i_product_name#169, i_item_sk#168, s_store_name#135, s_zip#136, ca_street_number#157, ca_street_name#158, ca_city#159, ca_zip#160, ca_street_number#162, ca_street_name#163, ca_city#164, ca_zip#165, d_year#133, d_year#144, d_year#146, count#91, sum#173, sum#174, sum#175]
Keys [15]: [i_product_name#169, i_item_sk#168, s_store_name#135, s_zip#136, ca_street_number#157, ca_street_name#158, ca_city#159, ca_zip#160, ca_street_number#162, ca_street_name#163, ca_city#164, ca_zip#165, d_year#133, d_year#144, d_year#146]
Functions [4]: [count(1), sum(UnscaledValue(ss_wholesale_cost#124)), sum(UnscaledValue(ss_list_price#125)), sum(UnscaledValue(ss_coupon_amt#126))]
Aggregate Attributes [4]: [count(1)#95, sum(UnscaledValue(ss_wholesale_cost#124))#96, sum(UnscaledValue(ss_list_price#125))#97, sum(UnscaledValue(ss_coupon_amt#126))#98]
Results [8]: [i_item_sk#168 AS item_sk#176, s_store_name#135 AS store_name#177, s_zip#136 AS store_zip#178, d_year#133 AS syear#179, count(1)#95 AS cnt#180, MakeDecimal(sum(UnscaledValue(ss_wholesale_cost#124))#96,17,2) AS s1#181, MakeDecimal(sum(UnscaledValue(ss_list_price#125))#97,17,2) AS s2#182, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#126))#98,17,2) AS s3#183]

(201) Exchange
Input [8]: [item_sk#176, store_name#177, store_zip#178, syear#179, cnt#180, s1#181, s2#182, s3#183]
Arguments: hashpartitioning(item_sk#176, store_name#177, store_zip#178, 5), ENSURE_REQUIREMENTS, [plan_id=29]

(202) Sort [codegen id : 86]
Input [8]: [item_sk#176, store_name#177, store_zip#178, syear#179, cnt#180, s1#181, s2#182, s3#183]
Arguments: [item_sk#176 ASC NULLS FIRST, store_name#177 ASC NULLS FIRST, store_zip#178 ASC NULLS FIRST], false, 0

(203) SortMergeJoin [codegen id : 87]
Left keys [3]: [item_sk#100, store_name#101, store_zip#102]
Right keys [3]: [item_sk#176, store_name#177, store_zip#178]
Join type: Inner
Join condition: (cnt#180 <= cnt#112)

(204) Project [codegen id : 87]
Output [21]: [product_name#99, store_name#101, store_zip#102, b_street_number#103, b_streen_name#104, b_city#105, b_zip#106, c_street_number#107, c_street_name#108, c_city#109, c_zip#110, syear#111, cnt#112, s1#113, s2#114, s3#115, s1#181, s2#182, s3#183, syear#179, cnt#180]
Input [25]: [product_name#99, item_sk#100, store_name#101, store_zip#102, b_street_number#103, b_streen_name#104, b_city#105, b_zip#106, c_street_number#107, c_street_name#108, c_city#109, c_zip#110, syear#111, cnt#112, s1#113, s2#114, s3#115, item_sk#176, store_name#177, store_zip#178, syear#179, cnt#180, s1#181, s2#182, s3#183]

(205) Exchange
Input [21]: [product_name#99, store_name#101, store_zip#102, b_street_number#103, b_streen_name#104, b_city#105, b_zip#106, c_street_number#107, c_street_name#108, c_city#109, c_zip#110, syear#111, cnt#112, s1#113, s2#114, s3#115, s1#181, s2#182, s3#183, syear#179, cnt#180]
Arguments: rangepartitioning(product_name#99 ASC NULLS FIRST, store_name#101 ASC NULLS FIRST, cnt#180 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [plan_id=30]

(206) Sort [codegen id : 88]
Input [21]: [product_name#99, store_name#101, store_zip#102, b_street_number#103, b_streen_name#104, b_city#105, b_zip#106, c_street_number#107, c_street_name#108, c_city#109, c_zip#110, syear#111, cnt#112, s1#113, s2#114, s3#115, s1#181, s2#182, s3#183, syear#179, cnt#180]
Arguments: [product_name#99 ASC NULLS FIRST, store_name#101 ASC NULLS FIRST, cnt#180 ASC NULLS FIRST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#14, [id=#15]
ObjectHashAggregate (213)
+- Exchange (212)
   +- ObjectHashAggregate (211)
      +- Exchange (210)
         +- * Filter (209)
            +- * ColumnarToRow (208)
               +- Scan parquet spark_catalog.default.customer_demographics (207)


(207) Scan parquet spark_catalog.default.customer_demographics
Output [2]: [cd_demo_sk#62, cd_marital_status#63]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string>

(208) ColumnarToRow [codegen id : 1]
Input [2]: [cd_demo_sk#62, cd_marital_status#63]

(209) Filter [codegen id : 1]
Input [2]: [cd_demo_sk#62, cd_marital_status#63]
Condition : (isnotnull(cd_demo_sk#62) AND isnotnull(cd_marital_status#63))

(210) Exchange
Input [2]: [cd_demo_sk#62, cd_marital_status#63]
Arguments: hashpartitioning(cd_demo_sk#64, 5), ENSURE_REQUIREMENTS, [plan_id=31]

(211) ObjectHashAggregate
Input [2]: [cd_demo_sk#62, cd_marital_status#63]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(cd_demo_sk#62, 42), 1920800, 15366400, 0, 0)]
Aggregate Attributes [1]: [buf#184]
Results [1]: [buf#185]

(212) Exchange
Input [1]: [buf#185]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=32]

(213) ObjectHashAggregate
Input [1]: [buf#185]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#62, 42), 1920800, 15366400, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#62, 42), 1920800, 15366400, 0, 0)#186]
Results [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#62, 42), 1920800, 15366400, 0, 0)#186 AS bloomFilter#187]

Subquery:2 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#16, [id=#17]
ObjectHashAggregate (220)
+- Exchange (219)
   +- ObjectHashAggregate (218)
      +- Exchange (217)
         +- * Filter (216)
            +- * ColumnarToRow (215)
               +- Scan parquet spark_catalog.default.customer_address (214)


(214) Scan parquet spark_catalog.default.customer_address
Output [5]: [ca_address_sk#71, ca_street_number#72, ca_street_name#73, ca_city#74, ca_zip#75]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_street_number:string,ca_street_name:string,ca_city:string,ca_zip:string>

(215) ColumnarToRow [codegen id : 1]
Input [5]: [ca_address_sk#71, ca_street_number#72, ca_street_name#73, ca_city#74, ca_zip#75]

(216) Filter [codegen id : 1]
Input [5]: [ca_address_sk#71, ca_street_number#72, ca_street_name#73, ca_city#74, ca_zip#75]
Condition : isnotnull(ca_address_sk#71)

(217) Exchange
Input [5]: [ca_address_sk#71, ca_street_number#72, ca_street_name#73, ca_city#74, ca_zip#75]
Arguments: hashpartitioning(ca_address_sk#76, 5), ENSURE_REQUIREMENTS, [plan_id=33]

(218) ObjectHashAggregate
Input [5]: [ca_address_sk#71, ca_street_number#72, ca_street_name#73, ca_city#74, ca_zip#75]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(ca_address_sk#71, 42), 1000000, 8000000, 0, 0)]
Aggregate Attributes [1]: [buf#188]
Results [1]: [buf#189]

(219) Exchange
Input [1]: [buf#189]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=34]

(220) ObjectHashAggregate
Input [1]: [buf#189]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(ca_address_sk#71, 42), 1000000, 8000000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(ca_address_sk#71, 42), 1000000, 8000000, 0, 0)#190]
Results [1]: [bloom_filter_agg(xxhash64(ca_address_sk#71, 42), 1000000, 8000000, 0, 0)#190 AS bloomFilter#191]

Subquery:3 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#18, [id=#19]
ObjectHashAggregate (227)
+- Exchange (226)
   +- ObjectHashAggregate (225)
      +- * Project (224)
         +- * Filter (223)
            +- * ColumnarToRow (222)
               +- Scan parquet spark_catalog.default.item (221)


(221) Scan parquet spark_catalog.default.item
Output [3]: [i_item_sk#83, i_current_price#84, i_color#85]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), In(i_color, [burlywood           ,floral              ,indian              ,medium              ,purple              ,spring              ]), GreaterThanOrEqual(i_current_price,64.00), LessThanOrEqual(i_current_price,74.00), GreaterThanOrEqual(i_current_price,65.00), LessThanOrEqual(i_current_price,79.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_color:string>

(222) ColumnarToRow [codegen id : 1]
Input [3]: [i_item_sk#83, i_current_price#84, i_color#85]

(223) Filter [codegen id : 1]
Input [3]: [i_item_sk#83, i_current_price#84, i_color#85]
Condition : ((((((isnotnull(i_current_price#84) AND i_color#85 IN (purple              ,burlywood           ,indian              ,spring              ,floral              ,medium              )) AND (i_current_price#84 >= 64.00)) AND (i_current_price#84 <= 74.00)) AND (i_current_price#84 >= 65.00)) AND (i_current_price#84 <= 79.00)) AND isnotnull(i_item_sk#83))

(224) Project [codegen id : 1]
Output [1]: [i_item_sk#83]
Input [3]: [i_item_sk#83, i_current_price#84, i_color#85]

(225) ObjectHashAggregate
Input [1]: [i_item_sk#83]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(i_item_sk#83, 42), 1250, 10000, 0, 0)]
Aggregate Attributes [1]: [buf#192]
Results [1]: [buf#193]

(226) Exchange
Input [1]: [buf#193]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=35]

(227) ObjectHashAggregate
Input [1]: [buf#193]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(i_item_sk#83, 42), 1250, 10000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(i_item_sk#83, 42), 1250, 10000, 0, 0)#194]
Results [1]: [bloom_filter_agg(xxhash64(i_item_sk#83, 42), 1250, 10000, 0, 0)#194 AS bloomFilter#195]

Subquery:4 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#13
BroadcastExchange (231)
+- * Filter (230)
   +- * ColumnarToRow (229)
      +- Scan parquet spark_catalog.default.date_dim (228)


(228) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#43, d_year#44]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1999), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(229) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#43, d_year#44]

(230) Filter [codegen id : 1]
Input [2]: [d_date_sk#43, d_year#44]
Condition : ((isnotnull(d_year#44) AND (d_year#44 = 1999)) AND isnotnull(d_date_sk#43))

(231) BroadcastExchange
Input [2]: [d_date_sk#43, d_year#44]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=36]

Subquery:5 Hosting operator id = 49 Hosting Expression = Subquery scalar-subquery#54, [id=#55]
ObjectHashAggregate (238)
+- Exchange (237)
   +- ObjectHashAggregate (236)
      +- Exchange (235)
         +- * Filter (234)
            +- * ColumnarToRow (233)
               +- Scan parquet spark_catalog.default.customer_demographics (232)


(232) Scan parquet spark_catalog.default.customer_demographics
Output [2]: [cd_demo_sk#64, cd_marital_status#65]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string>

(233) ColumnarToRow [codegen id : 1]
Input [2]: [cd_demo_sk#64, cd_marital_status#65]

(234) Filter [codegen id : 1]
Input [2]: [cd_demo_sk#64, cd_marital_status#65]
Condition : (isnotnull(cd_demo_sk#64) AND isnotnull(cd_marital_status#65))

(235) Exchange
Input [2]: [cd_demo_sk#64, cd_marital_status#65]
Arguments: hashpartitioning(cd_demo_sk#64, 5), ENSURE_REQUIREMENTS, [plan_id=37]

(236) ObjectHashAggregate
Input [2]: [cd_demo_sk#64, cd_marital_status#65]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(cd_demo_sk#64, 42), 1920800, 15366400, 0, 0)]
Aggregate Attributes [1]: [buf#196]
Results [1]: [buf#197]

(237) Exchange
Input [1]: [buf#197]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=38]

(238) ObjectHashAggregate
Input [1]: [buf#197]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#64, 42), 1920800, 15366400, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#64, 42), 1920800, 15366400, 0, 0)#198]
Results [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#64, 42), 1920800, 15366400, 0, 0)#198 AS bloomFilter#199]

Subquery:6 Hosting operator id = 49 Hosting Expression = Subquery scalar-subquery#56, [id=#57]
ObjectHashAggregate (245)
+- Exchange (244)
   +- ObjectHashAggregate (243)
      +- Exchange (242)
         +- * Filter (241)
            +- * ColumnarToRow (240)
               +- Scan parquet spark_catalog.default.customer_address (239)


(239) Scan parquet spark_catalog.default.customer_address
Output [5]: [ca_address_sk#76, ca_street_number#77, ca_street_name#78, ca_city#79, ca_zip#80]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_street_number:string,ca_street_name:string,ca_city:string,ca_zip:string>

(240) ColumnarToRow [codegen id : 1]
Input [5]: [ca_address_sk#76, ca_street_number#77, ca_street_name#78, ca_city#79, ca_zip#80]

(241) Filter [codegen id : 1]
Input [5]: [ca_address_sk#76, ca_street_number#77, ca_street_name#78, ca_city#79, ca_zip#80]
Condition : isnotnull(ca_address_sk#76)

(242) Exchange
Input [5]: [ca_address_sk#76, ca_street_number#77, ca_street_name#78, ca_city#79, ca_zip#80]
Arguments: hashpartitioning(ca_address_sk#76, 5), ENSURE_REQUIREMENTS, [plan_id=39]

(243) ObjectHashAggregate
Input [5]: [ca_address_sk#76, ca_street_number#77, ca_street_name#78, ca_city#79, ca_zip#80]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(ca_address_sk#76, 42), 1000000, 8000000, 0, 0)]
Aggregate Attributes [1]: [buf#200]
Results [1]: [buf#201]

(244) Exchange
Input [1]: [buf#201]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=40]

(245) ObjectHashAggregate
Input [1]: [buf#201]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(ca_address_sk#76, 42), 1000000, 8000000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(ca_address_sk#76, 42), 1000000, 8000000, 0, 0)#202]
Results [1]: [bloom_filter_agg(xxhash64(ca_address_sk#76, 42), 1000000, 8000000, 0, 0)#202 AS bloomFilter#203]

Subquery:7 Hosting operator id = 125 Hosting Expression = ReusedSubquery Subquery scalar-subquery#14, [id=#15]

Subquery:8 Hosting operator id = 125 Hosting Expression = ReusedSubquery Subquery scalar-subquery#16, [id=#17]

Subquery:9 Hosting operator id = 123 Hosting Expression = ss_sold_date_sk#127 IN dynamicpruning#128
BroadcastExchange (249)
+- * Filter (248)
   +- * ColumnarToRow (247)
      +- Scan parquet spark_catalog.default.date_dim (246)


(246) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#132, d_year#133]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(247) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#132, d_year#133]

(248) Filter [codegen id : 1]
Input [2]: [d_date_sk#132, d_year#133]
Condition : ((isnotnull(d_year#133) AND (d_year#133 = 2000)) AND isnotnull(d_date_sk#132))

(249) BroadcastExchange
Input [2]: [d_date_sk#132, d_year#133]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=41]

Subquery:10 Hosting operator id = 145 Hosting Expression = ReusedSubquery Subquery scalar-subquery#14, [id=#15]


