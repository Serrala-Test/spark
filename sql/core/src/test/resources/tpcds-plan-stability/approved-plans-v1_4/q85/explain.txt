== Physical Plan ==
TakeOrderedAndProject (54)
+- * HashAggregate (53)
   +- Exchange (52)
      +- * HashAggregate (51)
         +- * Project (50)
            +- * BroadcastHashJoin Inner BuildRight (49)
               :- * Project (43)
               :  +- * BroadcastHashJoin Inner BuildRight (42)
               :     :- * Project (36)
               :     :  +- * BroadcastHashJoin Inner BuildRight (35)
               :     :     :- * Project (29)
               :     :     :  +- * BroadcastHashJoin Inner BuildRight (28)
               :     :     :     :- * Project (22)
               :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (21)
               :     :     :     :     :- * Project (15)
               :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (14)
               :     :     :     :     :     :- * Project (9)
               :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (8)
               :     :     :     :     :     :     :- * Filter (3)
               :     :     :     :     :     :     :  +- * ColumnarToRow (2)
               :     :     :     :     :     :     :     +- Scan parquet default.web_sales (1)
               :     :     :     :     :     :     +- BroadcastExchange (7)
               :     :     :     :     :     :        +- * Filter (6)
               :     :     :     :     :     :           +- * ColumnarToRow (5)
               :     :     :     :     :     :              +- Scan parquet default.web_returns (4)
               :     :     :     :     :     +- BroadcastExchange (13)
               :     :     :     :     :        +- * Filter (12)
               :     :     :     :     :           +- * ColumnarToRow (11)
               :     :     :     :     :              +- Scan parquet default.web_page (10)
               :     :     :     :     +- BroadcastExchange (20)
               :     :     :     :        +- * Project (19)
               :     :     :     :           +- * Filter (18)
               :     :     :     :              +- * ColumnarToRow (17)
               :     :     :     :                 +- Scan parquet default.customer_demographics (16)
               :     :     :     +- BroadcastExchange (27)
               :     :     :        +- * Project (26)
               :     :     :           +- * Filter (25)
               :     :     :              +- * ColumnarToRow (24)
               :     :     :                 +- Scan parquet default.customer_demographics (23)
               :     :     +- BroadcastExchange (34)
               :     :        +- * Project (33)
               :     :           +- * Filter (32)
               :     :              +- * ColumnarToRow (31)
               :     :                 +- Scan parquet default.customer_address (30)
               :     +- BroadcastExchange (41)
               :        +- * Project (40)
               :           +- * Filter (39)
               :              +- * ColumnarToRow (38)
               :                 +- Scan parquet default.date_dim (37)
               +- BroadcastExchange (48)
                  +- * Project (47)
                     +- * Filter (46)
                        +- * ColumnarToRow (45)
                           +- Scan parquet default.reason (44)


(1) Scan parquet default.web_sales
Output [7]: [ws_sold_date_sk#1, ws_item_sk#2, ws_web_page_sk#3, ws_order_number#4, ws_quantity#5, ws_sales_price#6, ws_net_profit#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_page_sk), IsNotNull(ws_sold_date_sk), Or(Or(And(GreaterThanOrEqual(ws_sales_price,100.00),LessThanOrEqual(ws_sales_price,150.00)),And(GreaterThanOrEqual(ws_sales_price,50.00),LessThanOrEqual(ws_sales_price,100.00))),And(GreaterThanOrEqual(ws_sales_price,150.00),LessThanOrEqual(ws_sales_price,200.00))), Or(Or(And(GreaterThanOrEqual(ws_net_profit,100.00),LessThanOrEqual(ws_net_profit,200.00)),And(GreaterThanOrEqual(ws_net_profit,150.00),LessThanOrEqual(ws_net_profit,300.00))),And(GreaterThanOrEqual(ws_net_profit,50.00),LessThanOrEqual(ws_net_profit,250.00)))]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_web_page_sk:int,ws_order_number:int,ws_quantity:int,ws_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 8]
Input [7]: [ws_sold_date_sk#1, ws_item_sk#2, ws_web_page_sk#3, ws_order_number#4, ws_quantity#5, ws_sales_price#6, ws_net_profit#7]

(3) Filter [codegen id : 8]
Input [7]: [ws_sold_date_sk#1, ws_item_sk#2, ws_web_page_sk#3, ws_order_number#4, ws_quantity#5, ws_sales_price#6, ws_net_profit#7]
Condition : (((((isnotnull(ws_item_sk#2) AND isnotnull(ws_order_number#4)) AND isnotnull(ws_web_page_sk#3)) AND isnotnull(ws_sold_date_sk#1)) AND ((((ws_sales_price#6 >= 100.00) AND (ws_sales_price#6 <= 150.00)) OR ((ws_sales_price#6 >= 50.00) AND (ws_sales_price#6 <= 100.00))) OR ((ws_sales_price#6 >= 150.00) AND (ws_sales_price#6 <= 200.00)))) AND ((((ws_net_profit#7 >= 100.00) AND (ws_net_profit#7 <= 200.00)) OR ((ws_net_profit#7 >= 150.00) AND (ws_net_profit#7 <= 300.00))) OR ((ws_net_profit#7 >= 50.00) AND (ws_net_profit#7 <= 250.00))))

(4) Scan parquet default.web_returns
Output [8]: [wr_item_sk#8, wr_refunded_cdemo_sk#9, wr_refunded_addr_sk#10, wr_returning_cdemo_sk#11, wr_reason_sk#12, wr_order_number#13, wr_fee#14, wr_refunded_cash#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number), IsNotNull(wr_refunded_cdemo_sk), IsNotNull(wr_returning_cdemo_sk), IsNotNull(wr_refunded_addr_sk), IsNotNull(wr_reason_sk)]
ReadSchema: struct<wr_item_sk:bigint,wr_refunded_cdemo_sk:bigint,wr_refunded_addr_sk:bigint,wr_returning_cdemo_sk:bigint,wr_reason_sk:bigint,wr_order_number:bigint,wr_fee:decimal(7,2),wr_refunded_cash:decimal(7,2)>

(5) ColumnarToRow [codegen id : 1]
Input [8]: [wr_item_sk#8, wr_refunded_cdemo_sk#9, wr_refunded_addr_sk#10, wr_returning_cdemo_sk#11, wr_reason_sk#12, wr_order_number#13, wr_fee#14, wr_refunded_cash#15]

(6) Filter [codegen id : 1]
Input [8]: [wr_item_sk#8, wr_refunded_cdemo_sk#9, wr_refunded_addr_sk#10, wr_returning_cdemo_sk#11, wr_reason_sk#12, wr_order_number#13, wr_fee#14, wr_refunded_cash#15]
Condition : (((((isnotnull(wr_item_sk#8) AND isnotnull(wr_order_number#13)) AND isnotnull(wr_refunded_cdemo_sk#9)) AND isnotnull(wr_returning_cdemo_sk#11)) AND isnotnull(wr_refunded_addr_sk#10)) AND isnotnull(wr_reason_sk#12))

(7) BroadcastExchange
Input [8]: [wr_item_sk#8, wr_refunded_cdemo_sk#9, wr_refunded_addr_sk#10, wr_returning_cdemo_sk#11, wr_reason_sk#12, wr_order_number#13, wr_fee#14, wr_refunded_cash#15]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false], input[5, bigint, false]),false), [id=#16]

(8) BroadcastHashJoin [codegen id : 8]
Left keys [2]: [cast(ws_item_sk#2 as bigint), cast(ws_order_number#4 as bigint)]
Right keys [2]: [wr_item_sk#8, wr_order_number#13]
Join condition: None

(9) Project [codegen id : 8]
Output [11]: [ws_sold_date_sk#1, ws_web_page_sk#3, ws_quantity#5, ws_sales_price#6, ws_net_profit#7, wr_refunded_cdemo_sk#9, wr_refunded_addr_sk#10, wr_returning_cdemo_sk#11, wr_reason_sk#12, wr_fee#14, wr_refunded_cash#15]
Input [15]: [ws_sold_date_sk#1, ws_item_sk#2, ws_web_page_sk#3, ws_order_number#4, ws_quantity#5, ws_sales_price#6, ws_net_profit#7, wr_item_sk#8, wr_refunded_cdemo_sk#9, wr_refunded_addr_sk#10, wr_returning_cdemo_sk#11, wr_reason_sk#12, wr_order_number#13, wr_fee#14, wr_refunded_cash#15]

(10) Scan parquet default.web_page
Output [1]: [wp_web_page_sk#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_page]
PushedFilters: [IsNotNull(wp_web_page_sk)]
ReadSchema: struct<wp_web_page_sk:int>

(11) ColumnarToRow [codegen id : 2]
Input [1]: [wp_web_page_sk#17]

(12) Filter [codegen id : 2]
Input [1]: [wp_web_page_sk#17]
Condition : isnotnull(wp_web_page_sk#17)

(13) BroadcastExchange
Input [1]: [wp_web_page_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#18]

(14) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ws_web_page_sk#3]
Right keys [1]: [wp_web_page_sk#17]
Join condition: None

(15) Project [codegen id : 8]
Output [10]: [ws_sold_date_sk#1, ws_quantity#5, ws_sales_price#6, ws_net_profit#7, wr_refunded_cdemo_sk#9, wr_refunded_addr_sk#10, wr_returning_cdemo_sk#11, wr_reason_sk#12, wr_fee#14, wr_refunded_cash#15]
Input [12]: [ws_sold_date_sk#1, ws_web_page_sk#3, ws_quantity#5, ws_sales_price#6, ws_net_profit#7, wr_refunded_cdemo_sk#9, wr_refunded_addr_sk#10, wr_returning_cdemo_sk#11, wr_reason_sk#12, wr_fee#14, wr_refunded_cash#15, wp_web_page_sk#17]

(16) Scan parquet default.customer_demographics
Output [3]: [cd_demo_sk#19, cd_marital_status#20, cd_education_status#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(17) ColumnarToRow [codegen id : 3]
Input [3]: [cd_demo_sk#19, cd_marital_status#20, cd_education_status#21]

(18) Filter [codegen id : 3]
Input [3]: [cd_demo_sk#19, cd_marital_status#20, cd_education_status#21]
Condition : (((isnotnull(cd_demo_sk#19) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_marital_status#20, 1, false, true))) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_education_status#21, 20, false, true))) AND ((((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_marital_status#20, 1, false, true) = M) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_education_status#21, 20, false, true) = Advanced Degree     )) OR ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_marital_status#20, 1, false, true) = S) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_education_status#21, 20, false, true) = College             ))) OR ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_marital_status#20, 1, false, true) = W) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_education_status#21, 20, false, true) = 2 yr Degree         ))))

(19) Project [codegen id : 3]
Output [3]: [cd_demo_sk#19, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_marital_status#20, 1, false, true) AS cd_marital_status#22, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_education_status#21, 20, false, true) AS cd_education_status#23]
Input [3]: [cd_demo_sk#19, cd_marital_status#20, cd_education_status#21]

(20) BroadcastExchange
Input [3]: [cd_demo_sk#19, cd_marital_status#22, cd_education_status#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#24]

(21) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [wr_refunded_cdemo_sk#9]
Right keys [1]: [cast(cd_demo_sk#19 as bigint)]
Join condition: ((((((cd_marital_status#22 = M) AND (cd_education_status#23 = Advanced Degree     )) AND (ws_sales_price#6 >= 100.00)) AND (ws_sales_price#6 <= 150.00)) OR ((((cd_marital_status#22 = S) AND (cd_education_status#23 = College             )) AND (ws_sales_price#6 >= 50.00)) AND (ws_sales_price#6 <= 100.00))) OR ((((cd_marital_status#22 = W) AND (cd_education_status#23 = 2 yr Degree         )) AND (ws_sales_price#6 >= 150.00)) AND (ws_sales_price#6 <= 200.00)))

(22) Project [codegen id : 8]
Output [10]: [ws_sold_date_sk#1, ws_quantity#5, ws_net_profit#7, wr_refunded_addr_sk#10, wr_returning_cdemo_sk#11, wr_reason_sk#12, wr_fee#14, wr_refunded_cash#15, cd_marital_status#22, cd_education_status#23]
Input [13]: [ws_sold_date_sk#1, ws_quantity#5, ws_sales_price#6, ws_net_profit#7, wr_refunded_cdemo_sk#9, wr_refunded_addr_sk#10, wr_returning_cdemo_sk#11, wr_reason_sk#12, wr_fee#14, wr_refunded_cash#15, cd_demo_sk#19, cd_marital_status#22, cd_education_status#23]

(23) Scan parquet default.customer_demographics
Output [3]: [cd_demo_sk#25, cd_marital_status#26, cd_education_status#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(24) ColumnarToRow [codegen id : 4]
Input [3]: [cd_demo_sk#25, cd_marital_status#26, cd_education_status#27]

(25) Filter [codegen id : 4]
Input [3]: [cd_demo_sk#25, cd_marital_status#26, cd_education_status#27]
Condition : ((isnotnull(cd_demo_sk#25) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_marital_status#26, 1, false, true))) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_education_status#27, 20, false, true)))

(26) Project [codegen id : 4]
Output [3]: [cd_demo_sk#25, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_marital_status#26, 1, false, true) AS cd_marital_status#28, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_education_status#27, 20, false, true) AS cd_education_status#29]
Input [3]: [cd_demo_sk#25, cd_marital_status#26, cd_education_status#27]

(27) BroadcastExchange
Input [3]: [cd_demo_sk#25, cd_marital_status#28, cd_education_status#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint), input[1, string, true], input[2, string, true]),false), [id=#30]

(28) BroadcastHashJoin [codegen id : 8]
Left keys [3]: [wr_returning_cdemo_sk#11, cd_marital_status#22, cd_education_status#23]
Right keys [3]: [cast(cd_demo_sk#25 as bigint), cd_marital_status#28, cd_education_status#29]
Join condition: None

(29) Project [codegen id : 8]
Output [7]: [ws_sold_date_sk#1, ws_quantity#5, ws_net_profit#7, wr_refunded_addr_sk#10, wr_reason_sk#12, wr_fee#14, wr_refunded_cash#15]
Input [13]: [ws_sold_date_sk#1, ws_quantity#5, ws_net_profit#7, wr_refunded_addr_sk#10, wr_returning_cdemo_sk#11, wr_reason_sk#12, wr_fee#14, wr_refunded_cash#15, cd_marital_status#22, cd_education_status#23, cd_demo_sk#25, cd_marital_status#28, cd_education_status#29]

(30) Scan parquet default.customer_address
Output [3]: [ca_address_sk#31, ca_state#32, ca_country#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(31) ColumnarToRow [codegen id : 5]
Input [3]: [ca_address_sk#31, ca_state#32, ca_country#33]

(32) Filter [codegen id : 5]
Input [3]: [ca_address_sk#31, ca_state#32, ca_country#33]
Condition : (((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_country#33, 20, false, true) = United States) AND isnotnull(ca_address_sk#31)) AND ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#32, 2, false, true) IN (IN,OH,NJ) OR staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#32, 2, false, true) IN (WI,CT,KY)) OR staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#32, 2, false, true) IN (LA,IA,AR)))

(33) Project [codegen id : 5]
Output [2]: [ca_address_sk#31, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#32, 2, false, true) AS ca_state#34]
Input [3]: [ca_address_sk#31, ca_state#32, ca_country#33]

(34) BroadcastExchange
Input [2]: [ca_address_sk#31, ca_state#34]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#35]

(35) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [wr_refunded_addr_sk#10]
Right keys [1]: [cast(ca_address_sk#31 as bigint)]
Join condition: ((((ca_state#34 IN (IN,OH,NJ) AND (ws_net_profit#7 >= 100.00)) AND (ws_net_profit#7 <= 200.00)) OR ((ca_state#34 IN (WI,CT,KY) AND (ws_net_profit#7 >= 150.00)) AND (ws_net_profit#7 <= 300.00))) OR ((ca_state#34 IN (LA,IA,AR) AND (ws_net_profit#7 >= 50.00)) AND (ws_net_profit#7 <= 250.00)))

(36) Project [codegen id : 8]
Output [5]: [ws_sold_date_sk#1, ws_quantity#5, wr_reason_sk#12, wr_fee#14, wr_refunded_cash#15]
Input [9]: [ws_sold_date_sk#1, ws_quantity#5, ws_net_profit#7, wr_refunded_addr_sk#10, wr_reason_sk#12, wr_fee#14, wr_refunded_cash#15, ca_address_sk#31, ca_state#34]

(37) Scan parquet default.date_dim
Output [2]: [d_date_sk#36, d_year#37]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(38) ColumnarToRow [codegen id : 6]
Input [2]: [d_date_sk#36, d_year#37]

(39) Filter [codegen id : 6]
Input [2]: [d_date_sk#36, d_year#37]
Condition : ((isnotnull(d_year#37) AND (d_year#37 = 2000)) AND isnotnull(d_date_sk#36))

(40) Project [codegen id : 6]
Output [1]: [d_date_sk#36]
Input [2]: [d_date_sk#36, d_year#37]

(41) BroadcastExchange
Input [1]: [d_date_sk#36]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#38]

(42) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ws_sold_date_sk#1]
Right keys [1]: [d_date_sk#36]
Join condition: None

(43) Project [codegen id : 8]
Output [4]: [ws_quantity#5, wr_reason_sk#12, wr_fee#14, wr_refunded_cash#15]
Input [6]: [ws_sold_date_sk#1, ws_quantity#5, wr_reason_sk#12, wr_fee#14, wr_refunded_cash#15, d_date_sk#36]

(44) Scan parquet default.reason
Output [2]: [r_reason_sk#39, r_reason_desc#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/reason]
PushedFilters: [IsNotNull(r_reason_sk)]
ReadSchema: struct<r_reason_sk:int,r_reason_desc:string>

(45) ColumnarToRow [codegen id : 7]
Input [2]: [r_reason_sk#39, r_reason_desc#40]

(46) Filter [codegen id : 7]
Input [2]: [r_reason_sk#39, r_reason_desc#40]
Condition : isnotnull(r_reason_sk#39)

(47) Project [codegen id : 7]
Output [2]: [r_reason_sk#39, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, r_reason_desc#40, 100, false, true) AS r_reason_desc#41]
Input [2]: [r_reason_sk#39, r_reason_desc#40]

(48) BroadcastExchange
Input [2]: [r_reason_sk#39, r_reason_desc#41]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#42]

(49) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [wr_reason_sk#12]
Right keys [1]: [cast(r_reason_sk#39 as bigint)]
Join condition: None

(50) Project [codegen id : 8]
Output [4]: [ws_quantity#5, wr_fee#14, wr_refunded_cash#15, r_reason_desc#41]
Input [6]: [ws_quantity#5, wr_reason_sk#12, wr_fee#14, wr_refunded_cash#15, r_reason_sk#39, r_reason_desc#41]

(51) HashAggregate [codegen id : 8]
Input [4]: [ws_quantity#5, wr_fee#14, wr_refunded_cash#15, r_reason_desc#41]
Keys [1]: [r_reason_desc#41]
Functions [3]: [partial_avg(cast(ws_quantity#5 as bigint)), partial_avg(UnscaledValue(wr_refunded_cash#15)), partial_avg(UnscaledValue(wr_fee#14))]
Aggregate Attributes [6]: [sum#43, count#44, sum#45, count#46, sum#47, count#48]
Results [7]: [r_reason_desc#41, sum#49, count#50, sum#51, count#52, sum#53, count#54]

(52) Exchange
Input [7]: [r_reason_desc#41, sum#49, count#50, sum#51, count#52, sum#53, count#54]
Arguments: hashpartitioning(r_reason_desc#41, 5), ENSURE_REQUIREMENTS, [id=#55]

(53) HashAggregate [codegen id : 9]
Input [7]: [r_reason_desc#41, sum#49, count#50, sum#51, count#52, sum#53, count#54]
Keys [1]: [r_reason_desc#41]
Functions [3]: [avg(cast(ws_quantity#5 as bigint)), avg(UnscaledValue(wr_refunded_cash#15)), avg(UnscaledValue(wr_fee#14))]
Aggregate Attributes [3]: [avg(cast(ws_quantity#5 as bigint))#56, avg(UnscaledValue(wr_refunded_cash#15))#57, avg(UnscaledValue(wr_fee#14))#58]
Results [4]: [substr(r_reason_desc#41, 1, 20) AS substr(r_reason_desc, 1, 20)#59, avg(cast(ws_quantity#5 as bigint))#56 AS avg(ws_quantity)#60, cast((avg(UnscaledValue(wr_refunded_cash#15))#57 / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#61, cast((avg(UnscaledValue(wr_fee#14))#58 / 100.0) as decimal(11,6)) AS avg(wr_fee)#62]

(54) TakeOrderedAndProject
Input [4]: [substr(r_reason_desc, 1, 20)#59, avg(ws_quantity)#60, avg(wr_refunded_cash)#61, avg(wr_fee)#62]
Arguments: 100, [substr(r_reason_desc, 1, 20)#59 ASC NULLS FIRST, avg(ws_quantity)#60 ASC NULLS FIRST, avg(wr_refunded_cash)#61 ASC NULLS FIRST, avg(wr_fee)#62 ASC NULLS FIRST], [substr(r_reason_desc, 1, 20)#59, avg(ws_quantity)#60, avg(wr_refunded_cash)#61, avg(wr_fee)#62]

