== Physical Plan ==
* Sort (50)
+- Exchange (49)
   +- * HashAggregate (48)
      +- Exchange (47)
         +- * HashAggregate (46)
            +- * Project (45)
               +- * BroadcastHashJoin Inner BuildRight (44)
                  :- * Project (38)
                  :  +- * BroadcastHashJoin Inner BuildRight (37)
                  :     :- * Project (32)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (31)
                  :     :     :- * Project (25)
                  :     :     :  +- * BroadcastHashJoin Inner BuildRight (24)
                  :     :     :     :- * Project (18)
                  :     :     :     :  +- * SortMergeJoin Inner (17)
                  :     :     :     :     :- * Sort (11)
                  :     :     :     :     :  +- Exchange (10)
                  :     :     :     :     :     +- * Project (9)
                  :     :     :     :     :        +- * BroadcastHashJoin Inner BuildLeft (8)
                  :     :     :     :     :           :- BroadcastExchange (4)
                  :     :     :     :     :           :  +- * Filter (3)
                  :     :     :     :     :           :     +- * ColumnarToRow (2)
                  :     :     :     :     :           :        +- Scan parquet default.call_center (1)
                  :     :     :     :     :           +- * Filter (7)
                  :     :     :     :     :              +- * ColumnarToRow (6)
                  :     :     :     :     :                 +- Scan parquet default.catalog_returns (5)
                  :     :     :     :     +- * Sort (16)
                  :     :     :     :        +- Exchange (15)
                  :     :     :     :           +- * Filter (14)
                  :     :     :     :              +- * ColumnarToRow (13)
                  :     :     :     :                 +- Scan parquet default.customer (12)
                  :     :     :     +- BroadcastExchange (23)
                  :     :     :        +- * Project (22)
                  :     :     :           +- * Filter (21)
                  :     :     :              +- * ColumnarToRow (20)
                  :     :     :                 +- Scan parquet default.household_demographics (19)
                  :     :     +- BroadcastExchange (30)
                  :     :        +- * Project (29)
                  :     :           +- * Filter (28)
                  :     :              +- * ColumnarToRow (27)
                  :     :                 +- Scan parquet default.customer_address (26)
                  :     +- BroadcastExchange (36)
                  :        +- * Filter (35)
                  :           +- * ColumnarToRow (34)
                  :              +- Scan parquet default.customer_demographics (33)
                  +- BroadcastExchange (43)
                     +- * Project (42)
                        +- * Filter (41)
                           +- * ColumnarToRow (40)
                              +- Scan parquet default.date_dim (39)


(1) Scan parquet default.call_center
Output [4]: [cc_call_center_sk#1, cc_call_center_id#2, cc_name#3, cc_manager#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/call_center]
PushedFilters: [IsNotNull(cc_call_center_sk)]
ReadSchema: struct<cc_call_center_sk:int,cc_call_center_id:string,cc_name:string,cc_manager:string>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [cc_call_center_sk#1, cc_call_center_id#2, cc_name#3, cc_manager#4]

(3) Filter [codegen id : 1]
Input [4]: [cc_call_center_sk#1, cc_call_center_id#2, cc_name#3, cc_manager#4]
Condition : isnotnull(cc_call_center_sk#1)

(4) BroadcastExchange
Input [4]: [cc_call_center_sk#1, cc_call_center_id#2, cc_name#3, cc_manager#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#5]

(5) Scan parquet default.catalog_returns
Output [4]: [cr_returned_date_sk#6, cr_returning_customer_sk#7, cr_call_center_sk#8, cr_net_loss#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_call_center_sk), IsNotNull(cr_returned_date_sk), IsNotNull(cr_returning_customer_sk)]
ReadSchema: struct<cr_returned_date_sk:int,cr_returning_customer_sk:int,cr_call_center_sk:int,cr_net_loss:decimal(7,2)>

(6) ColumnarToRow
Input [4]: [cr_returned_date_sk#6, cr_returning_customer_sk#7, cr_call_center_sk#8, cr_net_loss#9]

(7) Filter
Input [4]: [cr_returned_date_sk#6, cr_returning_customer_sk#7, cr_call_center_sk#8, cr_net_loss#9]
Condition : ((isnotnull(cr_call_center_sk#8) AND isnotnull(cr_returned_date_sk#6)) AND isnotnull(cr_returning_customer_sk#7))

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [cc_call_center_sk#1]
Right keys [1]: [cr_call_center_sk#8]
Join condition: None

(9) Project [codegen id : 2]
Output [6]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returned_date_sk#6, cr_returning_customer_sk#7, cr_net_loss#9]
Input [8]: [cc_call_center_sk#1, cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returned_date_sk#6, cr_returning_customer_sk#7, cr_call_center_sk#8, cr_net_loss#9]

(10) Exchange
Input [6]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returned_date_sk#6, cr_returning_customer_sk#7, cr_net_loss#9]
Arguments: hashpartitioning(cr_returning_customer_sk#7, 5), ENSURE_REQUIREMENTS, [id=#10]

(11) Sort [codegen id : 3]
Input [6]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returned_date_sk#6, cr_returning_customer_sk#7, cr_net_loss#9]
Arguments: [cr_returning_customer_sk#7 ASC NULLS FIRST], false, 0

(12) Scan parquet default.customer
Output [4]: [c_customer_sk#11, c_current_cdemo_sk#12, c_current_hdemo_sk#13, c_current_addr_sk#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_hdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int>

(13) ColumnarToRow [codegen id : 4]
Input [4]: [c_customer_sk#11, c_current_cdemo_sk#12, c_current_hdemo_sk#13, c_current_addr_sk#14]

(14) Filter [codegen id : 4]
Input [4]: [c_customer_sk#11, c_current_cdemo_sk#12, c_current_hdemo_sk#13, c_current_addr_sk#14]
Condition : (((isnotnull(c_customer_sk#11) AND isnotnull(c_current_addr_sk#14)) AND isnotnull(c_current_cdemo_sk#12)) AND isnotnull(c_current_hdemo_sk#13))

(15) Exchange
Input [4]: [c_customer_sk#11, c_current_cdemo_sk#12, c_current_hdemo_sk#13, c_current_addr_sk#14]
Arguments: hashpartitioning(c_customer_sk#11, 5), ENSURE_REQUIREMENTS, [id=#15]

(16) Sort [codegen id : 5]
Input [4]: [c_customer_sk#11, c_current_cdemo_sk#12, c_current_hdemo_sk#13, c_current_addr_sk#14]
Arguments: [c_customer_sk#11 ASC NULLS FIRST], false, 0

(17) SortMergeJoin [codegen id : 10]
Left keys [1]: [cr_returning_customer_sk#7]
Right keys [1]: [c_customer_sk#11]
Join condition: None

(18) Project [codegen id : 10]
Output [8]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returned_date_sk#6, cr_net_loss#9, c_current_cdemo_sk#12, c_current_hdemo_sk#13, c_current_addr_sk#14]
Input [10]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returned_date_sk#6, cr_returning_customer_sk#7, cr_net_loss#9, c_customer_sk#11, c_current_cdemo_sk#12, c_current_hdemo_sk#13, c_current_addr_sk#14]

(19) Scan parquet default.household_demographics
Output [2]: [hd_demo_sk#16, hd_buy_potential#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_buy_potential), StringStartsWith(hd_buy_potential,Unknown), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string>

(20) ColumnarToRow [codegen id : 6]
Input [2]: [hd_demo_sk#16, hd_buy_potential#17]

(21) Filter [codegen id : 6]
Input [2]: [hd_demo_sk#16, hd_buy_potential#17]
Condition : ((isnotnull(hd_buy_potential#17) AND StartsWith(hd_buy_potential#17, Unknown)) AND isnotnull(hd_demo_sk#16))

(22) Project [codegen id : 6]
Output [1]: [hd_demo_sk#16]
Input [2]: [hd_demo_sk#16, hd_buy_potential#17]

(23) BroadcastExchange
Input [1]: [hd_demo_sk#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#18]

(24) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [c_current_hdemo_sk#13]
Right keys [1]: [hd_demo_sk#16]
Join condition: None

(25) Project [codegen id : 10]
Output [7]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returned_date_sk#6, cr_net_loss#9, c_current_cdemo_sk#12, c_current_addr_sk#14]
Input [9]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returned_date_sk#6, cr_net_loss#9, c_current_cdemo_sk#12, c_current_hdemo_sk#13, c_current_addr_sk#14, hd_demo_sk#16]

(26) Scan parquet default.customer_address
Output [2]: [ca_address_sk#19, ca_gmt_offset#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_gmt_offset), EqualTo(ca_gmt_offset,-7.00), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_gmt_offset:decimal(5,2)>

(27) ColumnarToRow [codegen id : 7]
Input [2]: [ca_address_sk#19, ca_gmt_offset#20]

(28) Filter [codegen id : 7]
Input [2]: [ca_address_sk#19, ca_gmt_offset#20]
Condition : ((isnotnull(ca_gmt_offset#20) AND (ca_gmt_offset#20 = -7.00)) AND isnotnull(ca_address_sk#19))

(29) Project [codegen id : 7]
Output [1]: [ca_address_sk#19]
Input [2]: [ca_address_sk#19, ca_gmt_offset#20]

(30) BroadcastExchange
Input [1]: [ca_address_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21]

(31) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [c_current_addr_sk#14]
Right keys [1]: [ca_address_sk#19]
Join condition: None

(32) Project [codegen id : 10]
Output [6]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returned_date_sk#6, cr_net_loss#9, c_current_cdemo_sk#12]
Input [8]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returned_date_sk#6, cr_net_loss#9, c_current_cdemo_sk#12, c_current_addr_sk#14, ca_address_sk#19]

(33) Scan parquet default.customer_demographics
Output [3]: [cd_demo_sk#22, cd_marital_status#23, cd_education_status#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [Or(And(EqualTo(cd_marital_status,M),EqualTo(cd_education_status,Unknown)),And(EqualTo(cd_marital_status,W),EqualTo(cd_education_status,Advanced Degree))), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(34) ColumnarToRow [codegen id : 8]
Input [3]: [cd_demo_sk#22, cd_marital_status#23, cd_education_status#24]

(35) Filter [codegen id : 8]
Input [3]: [cd_demo_sk#22, cd_marital_status#23, cd_education_status#24]
Condition : ((((cd_marital_status#23 = M) AND (cd_education_status#24 = Unknown)) OR ((cd_marital_status#23 = W) AND (cd_education_status#24 = Advanced Degree))) AND isnotnull(cd_demo_sk#22))

(36) BroadcastExchange
Input [3]: [cd_demo_sk#22, cd_marital_status#23, cd_education_status#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#25]

(37) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [c_current_cdemo_sk#12]
Right keys [1]: [cd_demo_sk#22]
Join condition: None

(38) Project [codegen id : 10]
Output [7]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returned_date_sk#6, cr_net_loss#9, cd_marital_status#23, cd_education_status#24]
Input [9]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returned_date_sk#6, cr_net_loss#9, c_current_cdemo_sk#12, cd_demo_sk#22, cd_marital_status#23, cd_education_status#24]

(39) Scan parquet default.date_dim
Output [3]: [d_date_sk#26, d_year#27, d_moy#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(40) ColumnarToRow [codegen id : 9]
Input [3]: [d_date_sk#26, d_year#27, d_moy#28]

(41) Filter [codegen id : 9]
Input [3]: [d_date_sk#26, d_year#27, d_moy#28]
Condition : ((((isnotnull(d_year#27) AND isnotnull(d_moy#28)) AND (d_year#27 = 1998)) AND (d_moy#28 = 11)) AND isnotnull(d_date_sk#26))

(42) Project [codegen id : 9]
Output [1]: [d_date_sk#26]
Input [3]: [d_date_sk#26, d_year#27, d_moy#28]

(43) BroadcastExchange
Input [1]: [d_date_sk#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#29]

(44) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cr_returned_date_sk#6]
Right keys [1]: [d_date_sk#26]
Join condition: None

(45) Project [codegen id : 10]
Output [6]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#9, cd_marital_status#23, cd_education_status#24]
Input [8]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returned_date_sk#6, cr_net_loss#9, cd_marital_status#23, cd_education_status#24, d_date_sk#26]

(46) HashAggregate [codegen id : 10]
Input [6]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#9, cd_marital_status#23, cd_education_status#24]
Keys [5]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cd_marital_status#23, cd_education_status#24]
Functions [1]: [partial_sum(UnscaledValue(cr_net_loss#9))]
Aggregate Attributes [1]: [sum#30]
Results [6]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cd_marital_status#23, cd_education_status#24, sum#31]

(47) Exchange
Input [6]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cd_marital_status#23, cd_education_status#24, sum#31]
Arguments: hashpartitioning(cc_call_center_id#2, cc_name#3, cc_manager#4, cd_marital_status#23, cd_education_status#24, 5), ENSURE_REQUIREMENTS, [id=#32]

(48) HashAggregate [codegen id : 11]
Input [6]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cd_marital_status#23, cd_education_status#24, sum#31]
Keys [5]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cd_marital_status#23, cd_education_status#24]
Functions [1]: [sum(UnscaledValue(cr_net_loss#9))]
Aggregate Attributes [1]: [sum(UnscaledValue(cr_net_loss#9))#33]
Results [4]: [cc_call_center_id#2 AS Call_Center#34, cc_name#3 AS Call_Center_Name#35, cc_manager#4 AS Manager#36, MakeDecimal(sum(UnscaledValue(cr_net_loss#9))#33,17,2) AS Returns_Loss#37]

(49) Exchange
Input [4]: [Call_Center#34, Call_Center_Name#35, Manager#36, Returns_Loss#37]
Arguments: rangepartitioning(Returns_Loss#37 DESC NULLS LAST, 5), ENSURE_REQUIREMENTS, [id=#38]

(50) Sort [codegen id : 12]
Input [4]: [Call_Center#34, Call_Center_Name#35, Manager#36, Returns_Loss#37]
Arguments: [Returns_Loss#37 DESC NULLS LAST], true, 0

