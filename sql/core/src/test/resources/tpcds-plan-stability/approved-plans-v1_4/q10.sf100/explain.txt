== Physical Plan ==
TakeOrderedAndProject (49)
+- * HashAggregate (48)
   +- Exchange (47)
      +- * HashAggregate (46)
         +- * Project (45)
            +- * SortMergeJoin Inner (44)
               :- * Sort (41)
               :  +- Exchange (40)
               :     +- * Project (39)
               :        +- * BroadcastHashJoin Inner BuildRight (38)
               :           :- * Project (32)
               :           :  +- * Filter (31)
               :           :     +- * SortMergeJoin ExistenceJoin(exists#1) (30)
               :           :        :- * SortMergeJoin ExistenceJoin(exists#2) (22)
               :           :        :  :- * SortMergeJoin LeftSemi (14)
               :           :        :  :  :- * Sort (5)
               :           :        :  :  :  +- Exchange (4)
               :           :        :  :  :     +- * Filter (3)
               :           :        :  :  :        +- * ColumnarToRow (2)
               :           :        :  :  :           +- Scan parquet spark_catalog.default.customer (1)
               :           :        :  :  +- * Sort (13)
               :           :        :  :     +- Exchange (12)
               :           :        :  :        +- * Project (11)
               :           :        :  :           +- * BroadcastHashJoin Inner BuildRight (10)
               :           :        :  :              :- * Filter (8)
               :           :        :  :              :  +- * ColumnarToRow (7)
               :           :        :  :              :     +- Scan parquet spark_catalog.default.store_sales (6)
               :           :        :  :              +- ReusedExchange (9)
               :           :        :  +- * Sort (21)
               :           :        :     +- Exchange (20)
               :           :        :        +- * Project (19)
               :           :        :           +- * BroadcastHashJoin Inner BuildRight (18)
               :           :        :              :- * ColumnarToRow (16)
               :           :        :              :  +- Scan parquet spark_catalog.default.web_sales (15)
               :           :        :              +- ReusedExchange (17)
               :           :        +- * Sort (29)
               :           :           +- Exchange (28)
               :           :              +- * Project (27)
               :           :                 +- * BroadcastHashJoin Inner BuildRight (26)
               :           :                    :- * ColumnarToRow (24)
               :           :                    :  +- Scan parquet spark_catalog.default.catalog_sales (23)
               :           :                    +- ReusedExchange (25)
               :           +- BroadcastExchange (37)
               :              +- * Project (36)
               :                 +- * Filter (35)
               :                    +- * ColumnarToRow (34)
               :                       +- Scan parquet spark_catalog.default.customer_address (33)
               +- * Sort (43)
                  +- ReusedExchange (42)


(1) Scan parquet spark_catalog.default.customer
Output [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]

(3) Filter [codegen id : 1]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Condition : (((isnotnull(c_current_addr_sk#5) AND isnotnull(c_current_cdemo_sk#4)) AND might_contain(Subquery scalar-subquery#6, [id=#7], xxhash64(c_current_addr_sk#5, 42), true)) AND might_contain(Subquery scalar-subquery#8, [id=#9], xxhash64(c_current_cdemo_sk#4, 42), false))

(4) Exchange
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Arguments: hashpartitioning(c_customer_sk#3, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Arguments: [c_customer_sk#3 ASC NULLS FIRST], false, 0

(6) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_customer_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
ReadSchema: struct<ss_customer_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ss_customer_sk#10, ss_sold_date_sk#11]

(8) Filter [codegen id : 4]
Input [2]: [ss_customer_sk#10, ss_sold_date_sk#11]
Condition : true

(9) ReusedExchange [Reuses operator id: 68]
Output [1]: [d_date_sk#13]

(10) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#13]
Join type: Inner
Join condition: None

(11) Project [codegen id : 4]
Output [1]: [ss_customer_sk#10]
Input [3]: [ss_customer_sk#10, ss_sold_date_sk#11, d_date_sk#13]

(12) Exchange
Input [1]: [ss_customer_sk#10]
Arguments: hashpartitioning(ss_customer_sk#10, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(13) Sort [codegen id : 5]
Input [1]: [ss_customer_sk#10]
Arguments: [ss_customer_sk#10 ASC NULLS FIRST], false, 0

(14) SortMergeJoin [codegen id : 6]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ss_customer_sk#10]
Join type: LeftSemi
Join condition: None

(15) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_bill_customer_sk#14, ws_sold_date_sk#15]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#15), dynamicpruningexpression(ws_sold_date_sk#15 IN dynamicpruning#12)]
ReadSchema: struct<ws_bill_customer_sk:int>

(16) ColumnarToRow [codegen id : 8]
Input [2]: [ws_bill_customer_sk#14, ws_sold_date_sk#15]

(17) ReusedExchange [Reuses operator id: 68]
Output [1]: [d_date_sk#16]

(18) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ws_sold_date_sk#15]
Right keys [1]: [d_date_sk#16]
Join type: Inner
Join condition: None

(19) Project [codegen id : 8]
Output [1]: [ws_bill_customer_sk#14]
Input [3]: [ws_bill_customer_sk#14, ws_sold_date_sk#15, d_date_sk#16]

(20) Exchange
Input [1]: [ws_bill_customer_sk#14]
Arguments: hashpartitioning(ws_bill_customer_sk#14, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(21) Sort [codegen id : 9]
Input [1]: [ws_bill_customer_sk#14]
Arguments: [ws_bill_customer_sk#14 ASC NULLS FIRST], false, 0

(22) SortMergeJoin [codegen id : 10]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ws_bill_customer_sk#14]
Join type: ExistenceJoin(exists#2)
Join condition: None

(23) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_ship_customer_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(cs_sold_date_sk#18 IN dynamicpruning#12)]
ReadSchema: struct<cs_ship_customer_sk:int>

(24) ColumnarToRow [codegen id : 12]
Input [2]: [cs_ship_customer_sk#17, cs_sold_date_sk#18]

(25) ReusedExchange [Reuses operator id: 68]
Output [1]: [d_date_sk#19]

(26) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#19]
Join type: Inner
Join condition: None

(27) Project [codegen id : 12]
Output [1]: [cs_ship_customer_sk#17]
Input [3]: [cs_ship_customer_sk#17, cs_sold_date_sk#18, d_date_sk#19]

(28) Exchange
Input [1]: [cs_ship_customer_sk#17]
Arguments: hashpartitioning(cs_ship_customer_sk#17, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(29) Sort [codegen id : 13]
Input [1]: [cs_ship_customer_sk#17]
Arguments: [cs_ship_customer_sk#17 ASC NULLS FIRST], false, 0

(30) SortMergeJoin [codegen id : 15]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [cs_ship_customer_sk#17]
Join type: ExistenceJoin(exists#1)
Join condition: None

(31) Filter [codegen id : 15]
Input [5]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5, exists#2, exists#1]
Condition : (exists#2 OR exists#1)

(32) Project [codegen id : 15]
Output [2]: [c_current_cdemo_sk#4, c_current_addr_sk#5]
Input [5]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5, exists#2, exists#1]

(33) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#20, ca_county#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_county, [Dona Ana County,Jefferson County,La Porte County,Rush County,Toole County]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(34) ColumnarToRow [codegen id : 14]
Input [2]: [ca_address_sk#20, ca_county#21]

(35) Filter [codegen id : 14]
Input [2]: [ca_address_sk#20, ca_county#21]
Condition : (ca_county#21 IN (Rush County,Toole County,Jefferson County,Dona Ana County,La Porte County) AND isnotnull(ca_address_sk#20))

(36) Project [codegen id : 14]
Output [1]: [ca_address_sk#20]
Input [2]: [ca_address_sk#20, ca_county#21]

(37) BroadcastExchange
Input [1]: [ca_address_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(38) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [c_current_addr_sk#5]
Right keys [1]: [ca_address_sk#20]
Join type: Inner
Join condition: None

(39) Project [codegen id : 15]
Output [1]: [c_current_cdemo_sk#4]
Input [3]: [c_current_cdemo_sk#4, c_current_addr_sk#5, ca_address_sk#20]

(40) Exchange
Input [1]: [c_current_cdemo_sk#4]
Arguments: hashpartitioning(c_current_cdemo_sk#4, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(41) Sort [codegen id : 16]
Input [1]: [c_current_cdemo_sk#4]
Arguments: [c_current_cdemo_sk#4 ASC NULLS FIRST], false, 0

(42) ReusedExchange [Reuses operator id: 60]
Output [9]: [cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]

(43) Sort [codegen id : 18]
Input [9]: [cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]
Arguments: [cd_demo_sk#22 ASC NULLS FIRST], false, 0

(44) SortMergeJoin [codegen id : 19]
Left keys [1]: [c_current_cdemo_sk#4]
Right keys [1]: [cd_demo_sk#22]
Join type: Inner
Join condition: None

(45) Project [codegen id : 19]
Output [8]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]
Input [10]: [c_current_cdemo_sk#4, cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]

(46) HashAggregate [codegen id : 19]
Input [8]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]
Keys [8]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#31]
Results [9]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30, count#32]

(47) Exchange
Input [9]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30, count#32]
Arguments: hashpartitioning(cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(48) HashAggregate [codegen id : 20]
Input [9]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30, count#32]
Keys [8]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#33]
Results [14]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, count(1)#33 AS cnt1#34, cd_purchase_estimate#26, count(1)#33 AS cnt2#35, cd_credit_rating#27, count(1)#33 AS cnt3#36, cd_dep_count#28, count(1)#33 AS cnt4#37, cd_dep_employed_count#29, count(1)#33 AS cnt5#38, cd_dep_college_count#30, count(1)#33 AS cnt6#39]

(49) TakeOrderedAndProject
Input [14]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cnt1#34, cd_purchase_estimate#26, cnt2#35, cd_credit_rating#27, cnt3#36, cd_dep_count#28, cnt4#37, cd_dep_employed_count#29, cnt5#38, cd_dep_college_count#30, cnt6#39]
Arguments: 100, [cd_gender#23 ASC NULLS FIRST, cd_marital_status#24 ASC NULLS FIRST, cd_education_status#25 ASC NULLS FIRST, cd_purchase_estimate#26 ASC NULLS FIRST, cd_credit_rating#27 ASC NULLS FIRST, cd_dep_count#28 ASC NULLS FIRST, cd_dep_employed_count#29 ASC NULLS FIRST, cd_dep_college_count#30 ASC NULLS FIRST], [cd_gender#23, cd_marital_status#24, cd_education_status#25, cnt1#34, cd_purchase_estimate#26, cnt2#35, cd_credit_rating#27, cnt3#36, cd_dep_count#28, cnt4#37, cd_dep_employed_count#29, cnt5#38, cd_dep_college_count#30, cnt6#39]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#6, [id=#7]
ObjectHashAggregate (56)
+- Exchange (55)
   +- ObjectHashAggregate (54)
      +- * Project (53)
         +- * Filter (52)
            +- * ColumnarToRow (51)
               +- Scan parquet spark_catalog.default.customer_address (50)


(50) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#20, ca_county#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_county, [Dona Ana County,Jefferson County,La Porte County,Rush County,Toole County]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(51) ColumnarToRow [codegen id : 1]
Input [2]: [ca_address_sk#20, ca_county#21]

(52) Filter [codegen id : 1]
Input [2]: [ca_address_sk#20, ca_county#21]
Condition : (ca_county#21 IN (Rush County,Toole County,Jefferson County,Dona Ana County,La Porte County) AND isnotnull(ca_address_sk#20))

(53) Project [codegen id : 1]
Output [1]: [ca_address_sk#20]
Input [2]: [ca_address_sk#20, ca_county#21]

(54) ObjectHashAggregate
Input [1]: [ca_address_sk#20]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(ca_address_sk#20, 42), 2555, 20440, 0, 0)]
Aggregate Attributes [1]: [buf#40]
Results [1]: [buf#41]

(55) Exchange
Input [1]: [buf#41]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=8]

(56) ObjectHashAggregate
Input [1]: [buf#41]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(ca_address_sk#20, 42), 2555, 20440, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(ca_address_sk#20, 42), 2555, 20440, 0, 0)#42]
Results [1]: [bloom_filter_agg(xxhash64(ca_address_sk#20, 42), 2555, 20440, 0, 0)#42 AS bloomFilter#43]

Subquery:2 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#8, [id=#9]
ObjectHashAggregate (63)
+- Exchange (62)
   +- ObjectHashAggregate (61)
      +- Exchange (60)
         +- * Filter (59)
            +- * ColumnarToRow (58)
               +- Scan parquet spark_catalog.default.customer_demographics (57)


(57) Scan parquet spark_catalog.default.customer_demographics
Output [9]: [cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_purchase_estimate:int,cd_credit_rating:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(58) ColumnarToRow [codegen id : 1]
Input [9]: [cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]

(59) Filter [codegen id : 1]
Input [9]: [cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]
Condition : isnotnull(cd_demo_sk#22)

(60) Exchange
Input [9]: [cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]
Arguments: hashpartitioning(cd_demo_sk#22, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(61) ObjectHashAggregate
Input [9]: [cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, cd_dep_count#28, cd_dep_employed_count#29, cd_dep_college_count#30]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(cd_demo_sk#22, 42), 1920800, 15366400, 0, 0)]
Aggregate Attributes [1]: [buf#44]
Results [1]: [buf#45]

(62) Exchange
Input [1]: [buf#45]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=10]

(63) ObjectHashAggregate
Input [1]: [buf#45]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#22, 42), 1920800, 15366400, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#22, 42), 1920800, 15366400, 0, 0)#46]
Results [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#22, 42), 1920800, 15366400, 0, 0)#46 AS bloomFilter#47]

Subquery:3 Hosting operator id = 6 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (68)
+- * Project (67)
   +- * Filter (66)
      +- * ColumnarToRow (65)
         +- Scan parquet spark_catalog.default.date_dim (64)


(64) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#13, d_year#48, d_moy#49]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2002), GreaterThanOrEqual(d_moy,1), LessThanOrEqual(d_moy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(65) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#13, d_year#48, d_moy#49]

(66) Filter [codegen id : 1]
Input [3]: [d_date_sk#13, d_year#48, d_moy#49]
Condition : (((((isnotnull(d_year#48) AND isnotnull(d_moy#49)) AND (d_year#48 = 2002)) AND (d_moy#49 >= 1)) AND (d_moy#49 <= 4)) AND isnotnull(d_date_sk#13))

(67) Project [codegen id : 1]
Output [1]: [d_date_sk#13]
Input [3]: [d_date_sk#13, d_year#48, d_moy#49]

(68) BroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=11]

Subquery:4 Hosting operator id = 15 Hosting Expression = ws_sold_date_sk#15 IN dynamicpruning#12

Subquery:5 Hosting operator id = 23 Hosting Expression = cs_sold_date_sk#18 IN dynamicpruning#12


