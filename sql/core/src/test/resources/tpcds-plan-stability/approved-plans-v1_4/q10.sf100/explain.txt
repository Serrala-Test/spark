== Physical Plan ==
TakeOrderedAndProject (56)
+- * HashAggregate (55)
   +- Exchange (54)
      +- * HashAggregate (53)
         +- * Project (52)
            +- * SortMergeJoin Inner (51)
               :- * Sort (45)
               :  +- Exchange (44)
               :     +- * Project (43)
               :        +- * BroadcastHashJoin Inner BuildRight (42)
               :           :- * Project (36)
               :           :  +- * Filter (35)
               :           :     +- SortMergeJoin ExistenceJoin(exists#1) (34)
               :           :        :- SortMergeJoin ExistenceJoin(exists#2) (26)
               :           :        :  :- SortMergeJoin LeftSemi (18)
               :           :        :  :  :- * Sort (5)
               :           :        :  :  :  +- Exchange (4)
               :           :        :  :  :     +- * Filter (3)
               :           :        :  :  :        +- * ColumnarToRow (2)
               :           :        :  :  :           +- Scan parquet default.customer (1)
               :           :        :  :  +- * Sort (17)
               :           :        :  :     +- Exchange (16)
               :           :        :  :        +- * Project (15)
               :           :        :  :           +- * BroadcastHashJoin Inner BuildRight (14)
               :           :        :  :              :- * Filter (8)
               :           :        :  :              :  +- * ColumnarToRow (7)
               :           :        :  :              :     +- Scan parquet default.store_sales (6)
               :           :        :  :              +- BroadcastExchange (13)
               :           :        :  :                 +- * Project (12)
               :           :        :  :                    +- * Filter (11)
               :           :        :  :                       +- * ColumnarToRow (10)
               :           :        :  :                          +- Scan parquet default.date_dim (9)
               :           :        :  +- * Sort (25)
               :           :        :     +- Exchange (24)
               :           :        :        +- * Project (23)
               :           :        :           +- * BroadcastHashJoin Inner BuildRight (22)
               :           :        :              :- * ColumnarToRow (20)
               :           :        :              :  +- Scan parquet default.web_sales (19)
               :           :        :              +- ReusedExchange (21)
               :           :        +- * Sort (33)
               :           :           +- Exchange (32)
               :           :              +- * Project (31)
               :           :                 +- * BroadcastHashJoin Inner BuildRight (30)
               :           :                    :- * ColumnarToRow (28)
               :           :                    :  +- Scan parquet default.catalog_sales (27)
               :           :                    +- ReusedExchange (29)
               :           +- BroadcastExchange (41)
               :              +- * Project (40)
               :                 +- * Filter (39)
               :                    +- * ColumnarToRow (38)
               :                       +- Scan parquet default.customer_address (37)
               +- * Sort (50)
                  +- Exchange (49)
                     +- * Filter (48)
                        +- * ColumnarToRow (47)
                           +- Scan parquet default.customer_demographics (46)


(1) Scan parquet default.customer
Output [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]

(3) Filter [codegen id : 1]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Condition : ((isnotnull(c_current_addr_sk#5) AND isnotnull(c_current_cdemo_sk#4)) AND isnotnull(c_customer_sk#3))

(4) Exchange
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Arguments: hashpartitioning(c_customer_sk#3, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Arguments: [c_customer_sk#3 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [2]: [ss_customer_sk#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ss_customer_sk#7, ss_sold_date_sk#8]

(8) Filter [codegen id : 4]
Input [2]: [ss_customer_sk#7, ss_sold_date_sk#8]
Condition : isnotnull(ss_customer_sk#7)

(9) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2002), GreaterThanOrEqual(d_moy,1), LessThanOrEqual(d_moy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(10) ColumnarToRow [codegen id : 3]
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]

(11) Filter [codegen id : 3]
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]
Condition : (((((isnotnull(d_year#11) AND isnotnull(d_moy#12)) AND (d_year#11 = 2002)) AND (d_moy#12 >= 1)) AND (d_moy#12 <= 4)) AND isnotnull(d_date_sk#10))

(12) Project [codegen id : 3]
Output [1]: [d_date_sk#10]
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]

(13) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13]

(14) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#10]
Join condition: None

(15) Project [codegen id : 4]
Output [1]: [ss_customer_sk#7]
Input [3]: [ss_customer_sk#7, ss_sold_date_sk#8, d_date_sk#10]

(16) Exchange
Input [1]: [ss_customer_sk#7]
Arguments: hashpartitioning(ss_customer_sk#7, 5), ENSURE_REQUIREMENTS, [id=#14]

(17) Sort [codegen id : 5]
Input [1]: [ss_customer_sk#7]
Arguments: [ss_customer_sk#7 ASC NULLS FIRST], false, 0

(18) SortMergeJoin
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ss_customer_sk#7]
Join condition: None

(19) Scan parquet default.web_sales
Output [2]: [ws_bill_customer_sk#15, ws_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#16), dynamicpruningexpression(ws_sold_date_sk#16 IN dynamicpruning#9)]
ReadSchema: struct<ws_bill_customer_sk:int>

(20) ColumnarToRow [codegen id : 7]
Input [2]: [ws_bill_customer_sk#15, ws_sold_date_sk#16]

(21) ReusedExchange [Reuses operator id: 13]
Output [1]: [d_date_sk#10]

(22) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ws_sold_date_sk#16]
Right keys [1]: [d_date_sk#10]
Join condition: None

(23) Project [codegen id : 7]
Output [1]: [ws_bill_customer_sk#15]
Input [3]: [ws_bill_customer_sk#15, ws_sold_date_sk#16, d_date_sk#10]

(24) Exchange
Input [1]: [ws_bill_customer_sk#15]
Arguments: hashpartitioning(ws_bill_customer_sk#15, 5), ENSURE_REQUIREMENTS, [id=#17]

(25) Sort [codegen id : 8]
Input [1]: [ws_bill_customer_sk#15]
Arguments: [ws_bill_customer_sk#15 ASC NULLS FIRST], false, 0

(26) SortMergeJoin
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ws_bill_customer_sk#15]
Join condition: None

(27) Scan parquet default.catalog_sales
Output [2]: [cs_ship_customer_sk#18, cs_sold_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#19), dynamicpruningexpression(cs_sold_date_sk#19 IN dynamicpruning#9)]
ReadSchema: struct<cs_ship_customer_sk:int>

(28) ColumnarToRow [codegen id : 10]
Input [2]: [cs_ship_customer_sk#18, cs_sold_date_sk#19]

(29) ReusedExchange [Reuses operator id: 13]
Output [1]: [d_date_sk#10]

(30) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#19]
Right keys [1]: [d_date_sk#10]
Join condition: None

(31) Project [codegen id : 10]
Output [1]: [cs_ship_customer_sk#18]
Input [3]: [cs_ship_customer_sk#18, cs_sold_date_sk#19, d_date_sk#10]

(32) Exchange
Input [1]: [cs_ship_customer_sk#18]
Arguments: hashpartitioning(cs_ship_customer_sk#18, 5), ENSURE_REQUIREMENTS, [id=#20]

(33) Sort [codegen id : 11]
Input [1]: [cs_ship_customer_sk#18]
Arguments: [cs_ship_customer_sk#18 ASC NULLS FIRST], false, 0

(34) SortMergeJoin
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [cs_ship_customer_sk#18]
Join condition: None

(35) Filter [codegen id : 13]
Input [5]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5, exists#2, exists#1]
Condition : (exists#2 OR exists#1)

(36) Project [codegen id : 13]
Output [2]: [c_current_cdemo_sk#4, c_current_addr_sk#5]
Input [5]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5, exists#2, exists#1]

(37) Scan parquet default.customer_address
Output [2]: [ca_address_sk#21, ca_county#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_county, [Rush County,Toole County,Jefferson County,Dona Ana County,La Porte County]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(38) ColumnarToRow [codegen id : 12]
Input [2]: [ca_address_sk#21, ca_county#22]

(39) Filter [codegen id : 12]
Input [2]: [ca_address_sk#21, ca_county#22]
Condition : (ca_county#22 IN (Rush County,Toole County,Jefferson County,Dona Ana County,La Porte County) AND isnotnull(ca_address_sk#21))

(40) Project [codegen id : 12]
Output [1]: [ca_address_sk#21]
Input [2]: [ca_address_sk#21, ca_county#22]

(41) BroadcastExchange
Input [1]: [ca_address_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#23]

(42) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [c_current_addr_sk#5]
Right keys [1]: [ca_address_sk#21]
Join condition: None

(43) Project [codegen id : 13]
Output [1]: [c_current_cdemo_sk#4]
Input [3]: [c_current_cdemo_sk#4, c_current_addr_sk#5, ca_address_sk#21]

(44) Exchange
Input [1]: [c_current_cdemo_sk#4]
Arguments: hashpartitioning(c_current_cdemo_sk#4, 5), ENSURE_REQUIREMENTS, [id=#24]

(45) Sort [codegen id : 14]
Input [1]: [c_current_cdemo_sk#4]
Arguments: [c_current_cdemo_sk#4 ASC NULLS FIRST], false, 0

(46) Scan parquet default.customer_demographics
Output [9]: [cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_purchase_estimate:int,cd_credit_rating:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(47) ColumnarToRow [codegen id : 15]
Input [9]: [cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]

(48) Filter [codegen id : 15]
Input [9]: [cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Condition : isnotnull(cd_demo_sk#25)

(49) Exchange
Input [9]: [cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Arguments: hashpartitioning(cd_demo_sk#25, 5), ENSURE_REQUIREMENTS, [id=#34]

(50) Sort [codegen id : 16]
Input [9]: [cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Arguments: [cd_demo_sk#25 ASC NULLS FIRST], false, 0

(51) SortMergeJoin [codegen id : 17]
Left keys [1]: [c_current_cdemo_sk#4]
Right keys [1]: [cd_demo_sk#25]
Join condition: None

(52) Project [codegen id : 17]
Output [8]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Input [10]: [c_current_cdemo_sk#4, cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]

(53) HashAggregate [codegen id : 17]
Input [8]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Keys [8]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#35]
Results [9]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33, count#36]

(54) Exchange
Input [9]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33, count#36]
Arguments: hashpartitioning(cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33, 5), ENSURE_REQUIREMENTS, [id=#37]

(55) HashAggregate [codegen id : 18]
Input [9]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33, count#36]
Keys [8]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#38]
Results [14]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, count(1)#38 AS cnt1#39, cd_purchase_estimate#29, count(1)#38 AS cnt2#40, cd_credit_rating#30, count(1)#38 AS cnt3#41, cd_dep_count#31, count(1)#38 AS cnt4#42, cd_dep_employed_count#32, count(1)#38 AS cnt5#43, cd_dep_college_count#33, count(1)#38 AS cnt6#44]

(56) TakeOrderedAndProject
Input [14]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cnt1#39, cd_purchase_estimate#29, cnt2#40, cd_credit_rating#30, cnt3#41, cd_dep_count#31, cnt4#42, cd_dep_employed_count#32, cnt5#43, cd_dep_college_count#33, cnt6#44]
Arguments: 100, [cd_gender#26 ASC NULLS FIRST, cd_marital_status#27 ASC NULLS FIRST, cd_education_status#28 ASC NULLS FIRST, cd_purchase_estimate#29 ASC NULLS FIRST, cd_credit_rating#30 ASC NULLS FIRST, cd_dep_count#31 ASC NULLS FIRST, cd_dep_employed_count#32 ASC NULLS FIRST, cd_dep_college_count#33 ASC NULLS FIRST], [cd_gender#26, cd_marital_status#27, cd_education_status#28, cnt1#39, cd_purchase_estimate#29, cnt2#40, cd_credit_rating#30, cnt3#41, cd_dep_count#31, cnt4#42, cd_dep_employed_count#32, cnt5#43, cd_dep_college_count#33, cnt6#44]

===== Subqueries =====

Subquery:1 Hosting operator id = 6 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
ReusedExchange (57)


(57) ReusedExchange [Reuses operator id: 13]
Output [1]: [d_date_sk#10]

Subquery:2 Hosting operator id = 19 Hosting Expression = ws_sold_date_sk#16 IN dynamicpruning#9

Subquery:3 Hosting operator id = 27 Hosting Expression = cs_sold_date_sk#19 IN dynamicpruning#9


