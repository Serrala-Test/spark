== Physical Plan ==
TakeOrderedAndProject (51)
+- * HashAggregate (50)
   +- Exchange (49)
      +- * HashAggregate (48)
         +- * Project (47)
            +- * Filter (46)
               +- * SortMergeJoin ExistenceJoin(exists#1) (45)
                  :- * SortMergeJoin ExistenceJoin(exists#2) (37)
                  :  :- * Sort (29)
                  :  :  +- Exchange (28)
                  :  :     +- * Project (27)
                  :  :        +- * BroadcastHashJoin Inner BuildLeft (26)
                  :  :           :- BroadcastExchange (22)
                  :  :           :  +- * Project (21)
                  :  :           :     +- * BroadcastHashJoin Inner BuildRight (20)
                  :  :           :        :- * SortMergeJoin LeftSemi (14)
                  :  :           :        :  :- * Sort (5)
                  :  :           :        :  :  +- Exchange (4)
                  :  :           :        :  :     +- * Filter (3)
                  :  :           :        :  :        +- * ColumnarToRow (2)
                  :  :           :        :  :           +- Scan parquet spark_catalog.default.customer (1)
                  :  :           :        :  +- * Sort (13)
                  :  :           :        :     +- Exchange (12)
                  :  :           :        :        +- * Project (11)
                  :  :           :        :           +- * BroadcastHashJoin Inner BuildRight (10)
                  :  :           :        :              :- * Filter (8)
                  :  :           :        :              :  +- * ColumnarToRow (7)
                  :  :           :        :              :     +- Scan parquet spark_catalog.default.store_sales (6)
                  :  :           :        :              +- ReusedExchange (9)
                  :  :           :        +- BroadcastExchange (19)
                  :  :           :           +- * Project (18)
                  :  :           :              +- * Filter (17)
                  :  :           :                 +- * ColumnarToRow (16)
                  :  :           :                    +- Scan parquet spark_catalog.default.customer_address (15)
                  :  :           +- * Filter (25)
                  :  :              +- * ColumnarToRow (24)
                  :  :                 +- Scan parquet spark_catalog.default.customer_demographics (23)
                  :  +- * Sort (36)
                  :     +- Exchange (35)
                  :        +- * Project (34)
                  :           +- * BroadcastHashJoin Inner BuildRight (33)
                  :              :- * ColumnarToRow (31)
                  :              :  +- Scan parquet spark_catalog.default.web_sales (30)
                  :              +- ReusedExchange (32)
                  +- * Sort (44)
                     +- Exchange (43)
                        +- * Project (42)
                           +- * BroadcastHashJoin Inner BuildRight (41)
                              :- * ColumnarToRow (39)
                              :  +- Scan parquet spark_catalog.default.catalog_sales (38)
                              +- ReusedExchange (40)


(1) Scan parquet spark_catalog.default.customer
Output [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]

(3) Filter [codegen id : 1]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Condition : (((isnotnull(c_customer_sk#3) AND isnotnull(c_current_addr_sk#5)) AND isnotnull(c_current_cdemo_sk#4)) AND might_contain(Subquery scalar-subquery#6, [id=#7], xxhash64(c_current_addr_sk#5, 42)))

(4) Exchange
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Arguments: hashpartitioning(c_customer_sk#3, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Arguments: [c_customer_sk#3 ASC NULLS FIRST], false, 0

(6) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_customer_sk#8, ss_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#9), dynamicpruningexpression(ss_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ss_customer_sk#8, ss_sold_date_sk#9]

(8) Filter [codegen id : 4]
Input [2]: [ss_customer_sk#8, ss_sold_date_sk#9]
Condition : isnotnull(ss_customer_sk#8)

(9) ReusedExchange [Reuses operator id: 63]
Output [1]: [d_date_sk#11]

(10) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#9]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(11) Project [codegen id : 4]
Output [1]: [ss_customer_sk#8]
Input [3]: [ss_customer_sk#8, ss_sold_date_sk#9, d_date_sk#11]

(12) Exchange
Input [1]: [ss_customer_sk#8]
Arguments: hashpartitioning(ss_customer_sk#8, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(13) Sort [codegen id : 5]
Input [1]: [ss_customer_sk#8]
Arguments: [ss_customer_sk#8 ASC NULLS FIRST], false, 0

(14) SortMergeJoin [codegen id : 7]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ss_customer_sk#8]
Join type: LeftSemi
Join condition: None

(15) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#12, ca_county#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_county, [Dona Ana County,Jefferson County,La Porte County,Rush County,Toole County]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(16) ColumnarToRow [codegen id : 6]
Input [2]: [ca_address_sk#12, ca_county#13]

(17) Filter [codegen id : 6]
Input [2]: [ca_address_sk#12, ca_county#13]
Condition : (ca_county#13 IN (Rush County,Toole County,Jefferson County,Dona Ana County,La Porte County) AND isnotnull(ca_address_sk#12))

(18) Project [codegen id : 6]
Output [1]: [ca_address_sk#12]
Input [2]: [ca_address_sk#12, ca_county#13]

(19) BroadcastExchange
Input [1]: [ca_address_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(20) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [c_current_addr_sk#5]
Right keys [1]: [ca_address_sk#12]
Join type: Inner
Join condition: None

(21) Project [codegen id : 7]
Output [2]: [c_customer_sk#3, c_current_cdemo_sk#4]
Input [4]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5, ca_address_sk#12]

(22) BroadcastExchange
Input [2]: [c_customer_sk#3, c_current_cdemo_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=4]

(23) Scan parquet spark_catalog.default.customer_demographics
Output [9]: [cd_demo_sk#14, cd_gender#15, cd_marital_status#16, cd_education_status#17, cd_purchase_estimate#18, cd_credit_rating#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_purchase_estimate:int,cd_credit_rating:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(24) ColumnarToRow
Input [9]: [cd_demo_sk#14, cd_gender#15, cd_marital_status#16, cd_education_status#17, cd_purchase_estimate#18, cd_credit_rating#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22]

(25) Filter
Input [9]: [cd_demo_sk#14, cd_gender#15, cd_marital_status#16, cd_education_status#17, cd_purchase_estimate#18, cd_credit_rating#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22]
Condition : isnotnull(cd_demo_sk#14)

(26) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [c_current_cdemo_sk#4]
Right keys [1]: [cd_demo_sk#14]
Join type: Inner
Join condition: None

(27) Project [codegen id : 8]
Output [9]: [c_customer_sk#3, cd_gender#15, cd_marital_status#16, cd_education_status#17, cd_purchase_estimate#18, cd_credit_rating#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22]
Input [11]: [c_customer_sk#3, c_current_cdemo_sk#4, cd_demo_sk#14, cd_gender#15, cd_marital_status#16, cd_education_status#17, cd_purchase_estimate#18, cd_credit_rating#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22]

(28) Exchange
Input [9]: [c_customer_sk#3, cd_gender#15, cd_marital_status#16, cd_education_status#17, cd_purchase_estimate#18, cd_credit_rating#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22]
Arguments: hashpartitioning(c_customer_sk#3, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(29) Sort [codegen id : 9]
Input [9]: [c_customer_sk#3, cd_gender#15, cd_marital_status#16, cd_education_status#17, cd_purchase_estimate#18, cd_credit_rating#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22]
Arguments: [c_customer_sk#3 ASC NULLS FIRST], false, 0

(30) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_bill_customer_sk#23, ws_sold_date_sk#24]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#24), dynamicpruningexpression(ws_sold_date_sk#24 IN dynamicpruning#10)]
ReadSchema: struct<ws_bill_customer_sk:int>

(31) ColumnarToRow [codegen id : 11]
Input [2]: [ws_bill_customer_sk#23, ws_sold_date_sk#24]

(32) ReusedExchange [Reuses operator id: 63]
Output [1]: [d_date_sk#25]

(33) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ws_sold_date_sk#24]
Right keys [1]: [d_date_sk#25]
Join type: Inner
Join condition: None

(34) Project [codegen id : 11]
Output [1]: [ws_bill_customer_sk#23]
Input [3]: [ws_bill_customer_sk#23, ws_sold_date_sk#24, d_date_sk#25]

(35) Exchange
Input [1]: [ws_bill_customer_sk#23]
Arguments: hashpartitioning(ws_bill_customer_sk#23, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(36) Sort [codegen id : 12]
Input [1]: [ws_bill_customer_sk#23]
Arguments: [ws_bill_customer_sk#23 ASC NULLS FIRST], false, 0

(37) SortMergeJoin [codegen id : 13]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ws_bill_customer_sk#23]
Join type: ExistenceJoin(exists#2)
Join condition: None

(38) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_ship_customer_sk#26, cs_sold_date_sk#27]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#27), dynamicpruningexpression(cs_sold_date_sk#27 IN dynamicpruning#10)]
ReadSchema: struct<cs_ship_customer_sk:int>

(39) ColumnarToRow [codegen id : 15]
Input [2]: [cs_ship_customer_sk#26, cs_sold_date_sk#27]

(40) ReusedExchange [Reuses operator id: 63]
Output [1]: [d_date_sk#28]

(41) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [cs_sold_date_sk#27]
Right keys [1]: [d_date_sk#28]
Join type: Inner
Join condition: None

(42) Project [codegen id : 15]
Output [1]: [cs_ship_customer_sk#26]
Input [3]: [cs_ship_customer_sk#26, cs_sold_date_sk#27, d_date_sk#28]

(43) Exchange
Input [1]: [cs_ship_customer_sk#26]
Arguments: hashpartitioning(cs_ship_customer_sk#26, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(44) Sort [codegen id : 16]
Input [1]: [cs_ship_customer_sk#26]
Arguments: [cs_ship_customer_sk#26 ASC NULLS FIRST], false, 0

(45) SortMergeJoin [codegen id : 17]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [cs_ship_customer_sk#26]
Join type: ExistenceJoin(exists#1)
Join condition: None

(46) Filter [codegen id : 17]
Input [11]: [c_customer_sk#3, cd_gender#15, cd_marital_status#16, cd_education_status#17, cd_purchase_estimate#18, cd_credit_rating#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22, exists#2, exists#1]
Condition : (exists#2 OR exists#1)

(47) Project [codegen id : 17]
Output [8]: [cd_gender#15, cd_marital_status#16, cd_education_status#17, cd_purchase_estimate#18, cd_credit_rating#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22]
Input [11]: [c_customer_sk#3, cd_gender#15, cd_marital_status#16, cd_education_status#17, cd_purchase_estimate#18, cd_credit_rating#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22, exists#2, exists#1]

(48) HashAggregate [codegen id : 17]
Input [8]: [cd_gender#15, cd_marital_status#16, cd_education_status#17, cd_purchase_estimate#18, cd_credit_rating#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22]
Keys [8]: [cd_gender#15, cd_marital_status#16, cd_education_status#17, cd_purchase_estimate#18, cd_credit_rating#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#29]
Results [9]: [cd_gender#15, cd_marital_status#16, cd_education_status#17, cd_purchase_estimate#18, cd_credit_rating#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22, count#30]

(49) Exchange
Input [9]: [cd_gender#15, cd_marital_status#16, cd_education_status#17, cd_purchase_estimate#18, cd_credit_rating#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22, count#30]
Arguments: hashpartitioning(cd_gender#15, cd_marital_status#16, cd_education_status#17, cd_purchase_estimate#18, cd_credit_rating#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(50) HashAggregate [codegen id : 18]
Input [9]: [cd_gender#15, cd_marital_status#16, cd_education_status#17, cd_purchase_estimate#18, cd_credit_rating#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22, count#30]
Keys [8]: [cd_gender#15, cd_marital_status#16, cd_education_status#17, cd_purchase_estimate#18, cd_credit_rating#19, cd_dep_count#20, cd_dep_employed_count#21, cd_dep_college_count#22]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#31]
Results [14]: [cd_gender#15, cd_marital_status#16, cd_education_status#17, count(1)#31 AS cnt1#32, cd_purchase_estimate#18, count(1)#31 AS cnt2#33, cd_credit_rating#19, count(1)#31 AS cnt3#34, cd_dep_count#20, count(1)#31 AS cnt4#35, cd_dep_employed_count#21, count(1)#31 AS cnt5#36, cd_dep_college_count#22, count(1)#31 AS cnt6#37]

(51) TakeOrderedAndProject
Input [14]: [cd_gender#15, cd_marital_status#16, cd_education_status#17, cnt1#32, cd_purchase_estimate#18, cnt2#33, cd_credit_rating#19, cnt3#34, cd_dep_count#20, cnt4#35, cd_dep_employed_count#21, cnt5#36, cd_dep_college_count#22, cnt6#37]
Arguments: 100, [cd_gender#15 ASC NULLS FIRST, cd_marital_status#16 ASC NULLS FIRST, cd_education_status#17 ASC NULLS FIRST, cd_purchase_estimate#18 ASC NULLS FIRST, cd_credit_rating#19 ASC NULLS FIRST, cd_dep_count#20 ASC NULLS FIRST, cd_dep_employed_count#21 ASC NULLS FIRST, cd_dep_college_count#22 ASC NULLS FIRST], [cd_gender#15, cd_marital_status#16, cd_education_status#17, cnt1#32, cd_purchase_estimate#18, cnt2#33, cd_credit_rating#19, cnt3#34, cd_dep_count#20, cnt4#35, cd_dep_employed_count#21, cnt5#36, cd_dep_college_count#22, cnt6#37]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#6, [id=#7]
ObjectHashAggregate (58)
+- Exchange (57)
   +- ObjectHashAggregate (56)
      +- * Project (55)
         +- * Filter (54)
            +- * ColumnarToRow (53)
               +- Scan parquet spark_catalog.default.customer_address (52)


(52) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#12, ca_county#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_county, [Dona Ana County,Jefferson County,La Porte County,Rush County,Toole County]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(53) ColumnarToRow [codegen id : 1]
Input [2]: [ca_address_sk#12, ca_county#13]

(54) Filter [codegen id : 1]
Input [2]: [ca_address_sk#12, ca_county#13]
Condition : (ca_county#13 IN (Rush County,Toole County,Jefferson County,Dona Ana County,La Porte County) AND isnotnull(ca_address_sk#12))

(55) Project [codegen id : 1]
Output [1]: [ca_address_sk#12]
Input [2]: [ca_address_sk#12, ca_county#13]

(56) ObjectHashAggregate
Input [1]: [ca_address_sk#12]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(ca_address_sk#12, 42), 2555, 57765, 0, 0)]
Aggregate Attributes [1]: [buf#38]
Results [1]: [buf#39]

(57) Exchange
Input [1]: [buf#39]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=9]

(58) ObjectHashAggregate
Input [1]: [buf#39]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(ca_address_sk#12, 42), 2555, 57765, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(ca_address_sk#12, 42), 2555, 57765, 0, 0)#40]
Results [1]: [bloom_filter_agg(xxhash64(ca_address_sk#12, 42), 2555, 57765, 0, 0)#40 AS bloomFilter#41]

Subquery:2 Hosting operator id = 6 Hosting Expression = ss_sold_date_sk#9 IN dynamicpruning#10
BroadcastExchange (63)
+- * Project (62)
   +- * Filter (61)
      +- * ColumnarToRow (60)
         +- Scan parquet spark_catalog.default.date_dim (59)


(59) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#11, d_year#42, d_moy#43]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2002), GreaterThanOrEqual(d_moy,1), LessThanOrEqual(d_moy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(60) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#11, d_year#42, d_moy#43]

(61) Filter [codegen id : 1]
Input [3]: [d_date_sk#11, d_year#42, d_moy#43]
Condition : (((((isnotnull(d_year#42) AND isnotnull(d_moy#43)) AND (d_year#42 = 2002)) AND (d_moy#43 >= 1)) AND (d_moy#43 <= 4)) AND isnotnull(d_date_sk#11))

(62) Project [codegen id : 1]
Output [1]: [d_date_sk#11]
Input [3]: [d_date_sk#11, d_year#42, d_moy#43]

(63) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=10]

Subquery:3 Hosting operator id = 30 Hosting Expression = ws_sold_date_sk#24 IN dynamicpruning#10

Subquery:4 Hosting operator id = 38 Hosting Expression = cs_sold_date_sk#27 IN dynamicpruning#10


