== Physical Plan ==
TakeOrderedAndProject (58)
+- * HashAggregate (57)
   +- Exchange (56)
      +- * HashAggregate (55)
         +- * Project (54)
            +- * SortMergeJoin Inner (53)
               :- * Sort (47)
               :  +- Exchange (46)
               :     +- * Project (45)
               :        +- * BroadcastHashJoin Inner BuildRight (44)
               :           :- * Project (38)
               :           :  +- * Filter (37)
               :           :     +- * BroadcastHashJoin ExistenceJoin(exists#1) BuildRight (36)
               :           :        :- * BroadcastHashJoin ExistenceJoin(exists#2) BuildRight (25)
               :           :        :  :- * BroadcastHashJoin LeftSemi BuildRight (14)
               :           :        :  :  :- * Filter (3)
               :           :        :  :  :  +- * ColumnarToRow (2)
               :           :        :  :  :     +- Scan parquet default.customer (1)
               :           :        :  :  +- BroadcastExchange (13)
               :           :        :  :     +- * Project (12)
               :           :        :  :        +- * BroadcastHashJoin Inner BuildLeft (11)
               :           :        :  :           :- BroadcastExchange (6)
               :           :        :  :           :  +- * ColumnarToRow (5)
               :           :        :  :           :     +- Scan parquet default.store_sales (4)
               :           :        :  :           +- * Project (10)
               :           :        :  :              +- * Filter (9)
               :           :        :  :                 +- * ColumnarToRow (8)
               :           :        :  :                    +- Scan parquet default.date_dim (7)
               :           :        :  +- BroadcastExchange (24)
               :           :        :     +- * Project (23)
               :           :        :        +- * BroadcastHashJoin Inner BuildLeft (22)
               :           :        :           :- BroadcastExchange (17)
               :           :        :           :  +- * ColumnarToRow (16)
               :           :        :           :     +- Scan parquet default.web_sales (15)
               :           :        :           +- * Project (21)
               :           :        :              +- * Filter (20)
               :           :        :                 +- * ColumnarToRow (19)
               :           :        :                    +- Scan parquet default.date_dim (18)
               :           :        +- BroadcastExchange (35)
               :           :           +- * Project (34)
               :           :              +- * BroadcastHashJoin Inner BuildLeft (33)
               :           :                 :- BroadcastExchange (28)
               :           :                 :  +- * ColumnarToRow (27)
               :           :                 :     +- Scan parquet default.catalog_sales (26)
               :           :                 +- * Project (32)
               :           :                    +- * Filter (31)
               :           :                       +- * ColumnarToRow (30)
               :           :                          +- Scan parquet default.date_dim (29)
               :           +- BroadcastExchange (43)
               :              +- * Project (42)
               :                 +- * Filter (41)
               :                    +- * ColumnarToRow (40)
               :                       +- Scan parquet default.customer_address (39)
               +- * Sort (52)
                  +- Exchange (51)
                     +- * Filter (50)
                        +- * ColumnarToRow (49)
                           +- Scan parquet default.customer_demographics (48)


(1) Scan parquet default.customer
Output [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 8]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]

(3) Filter [codegen id : 8]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Condition : (isnotnull(c_current_addr_sk#5) AND isnotnull(c_current_cdemo_sk#4))

(4) Scan parquet default.store_sales
Output [2]: [ss_customer_sk#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(true)]
ReadSchema: struct<ss_customer_sk:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [ss_customer_sk#6, ss_sold_date_sk#7]

(6) BroadcastExchange
Input [2]: [ss_customer_sk#6, ss_sold_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#8]

(7) Scan parquet default.date_dim
Output [3]: [d_date_sk#9, d_year#10, d_moy#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2002), GreaterThanOrEqual(d_moy,1), LessThanOrEqual(d_moy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(8) ColumnarToRow
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]

(9) Filter
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]
Condition : (((((isnotnull(d_year#10) AND isnotnull(d_moy#11)) AND (d_year#10 = 2002)) AND (d_moy#11 >= 1)) AND (d_moy#11 <= 4)) AND isnotnull(d_date_sk#9))

(10) Project
Output [1]: [d_date_sk#9]
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]

(11) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#9]
Join condition: None

(12) Project [codegen id : 2]
Output [1]: [ss_customer_sk#6]
Input [3]: [ss_customer_sk#6, ss_sold_date_sk#7, d_date_sk#9]

(13) BroadcastExchange
Input [1]: [ss_customer_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(14) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ss_customer_sk#6]
Join condition: None

(15) Scan parquet default.web_sales
Output [2]: [ws_bill_customer_sk#13, ws_sold_date_sk#14]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#14), dynamicpruningexpression(true)]
ReadSchema: struct<ws_bill_customer_sk:int>

(16) ColumnarToRow [codegen id : 3]
Input [2]: [ws_bill_customer_sk#13, ws_sold_date_sk#14]

(17) BroadcastExchange
Input [2]: [ws_bill_customer_sk#13, ws_sold_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#15]

(18) Scan parquet default.date_dim
Output [3]: [d_date_sk#9, d_year#10, d_moy#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2002), GreaterThanOrEqual(d_moy,1), LessThanOrEqual(d_moy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(19) ColumnarToRow
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]

(20) Filter
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]
Condition : (((((isnotnull(d_year#10) AND isnotnull(d_moy#11)) AND (d_year#10 = 2002)) AND (d_moy#11 >= 1)) AND (d_moy#11 <= 4)) AND isnotnull(d_date_sk#9))

(21) Project
Output [1]: [d_date_sk#9]
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]

(22) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ws_sold_date_sk#14]
Right keys [1]: [d_date_sk#9]
Join condition: None

(23) Project [codegen id : 4]
Output [1]: [ws_bill_customer_sk#13]
Input [3]: [ws_bill_customer_sk#13, ws_sold_date_sk#14, d_date_sk#9]

(24) BroadcastExchange
Input [1]: [ws_bill_customer_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(25) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ws_bill_customer_sk#13]
Join condition: None

(26) Scan parquet default.catalog_sales
Output [2]: [cs_ship_customer_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(true)]
ReadSchema: struct<cs_ship_customer_sk:int>

(27) ColumnarToRow [codegen id : 5]
Input [2]: [cs_ship_customer_sk#17, cs_sold_date_sk#18]

(28) BroadcastExchange
Input [2]: [cs_ship_customer_sk#17, cs_sold_date_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#19]

(29) Scan parquet default.date_dim
Output [3]: [d_date_sk#9, d_year#10, d_moy#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2002), GreaterThanOrEqual(d_moy,1), LessThanOrEqual(d_moy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(30) ColumnarToRow
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]

(31) Filter
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]
Condition : (((((isnotnull(d_year#10) AND isnotnull(d_moy#11)) AND (d_year#10 = 2002)) AND (d_moy#11 >= 1)) AND (d_moy#11 <= 4)) AND isnotnull(d_date_sk#9))

(32) Project
Output [1]: [d_date_sk#9]
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]

(33) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#9]
Join condition: None

(34) Project [codegen id : 6]
Output [1]: [cs_ship_customer_sk#17]
Input [3]: [cs_ship_customer_sk#17, cs_sold_date_sk#18, d_date_sk#9]

(35) BroadcastExchange
Input [1]: [cs_ship_customer_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#20]

(36) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [cs_ship_customer_sk#17]
Join condition: None

(37) Filter [codegen id : 8]
Input [5]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5, exists#2, exists#1]
Condition : (exists#2 OR exists#1)

(38) Project [codegen id : 8]
Output [2]: [c_current_cdemo_sk#4, c_current_addr_sk#5]
Input [5]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5, exists#2, exists#1]

(39) Scan parquet default.customer_address
Output [2]: [ca_address_sk#21, ca_county#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_county, [Rush County,Toole County,Jefferson County,Dona Ana County,La Porte County]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(40) ColumnarToRow [codegen id : 7]
Input [2]: [ca_address_sk#21, ca_county#22]

(41) Filter [codegen id : 7]
Input [2]: [ca_address_sk#21, ca_county#22]
Condition : (ca_county#22 IN (Rush County,Toole County,Jefferson County,Dona Ana County,La Porte County) AND isnotnull(ca_address_sk#21))

(42) Project [codegen id : 7]
Output [1]: [ca_address_sk#21]
Input [2]: [ca_address_sk#21, ca_county#22]

(43) BroadcastExchange
Input [1]: [ca_address_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#23]

(44) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [c_current_addr_sk#5]
Right keys [1]: [ca_address_sk#21]
Join condition: None

(45) Project [codegen id : 8]
Output [1]: [c_current_cdemo_sk#4]
Input [3]: [c_current_cdemo_sk#4, c_current_addr_sk#5, ca_address_sk#21]

(46) Exchange
Input [1]: [c_current_cdemo_sk#4]
Arguments: hashpartitioning(c_current_cdemo_sk#4, 5), ENSURE_REQUIREMENTS, [id=#24]

(47) Sort [codegen id : 9]
Input [1]: [c_current_cdemo_sk#4]
Arguments: [c_current_cdemo_sk#4 ASC NULLS FIRST], false, 0

(48) Scan parquet default.customer_demographics
Output [9]: [cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_purchase_estimate:int,cd_credit_rating:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(49) ColumnarToRow [codegen id : 10]
Input [9]: [cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]

(50) Filter [codegen id : 10]
Input [9]: [cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Condition : isnotnull(cd_demo_sk#25)

(51) Exchange
Input [9]: [cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Arguments: hashpartitioning(cd_demo_sk#25, 5), ENSURE_REQUIREMENTS, [id=#34]

(52) Sort [codegen id : 11]
Input [9]: [cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Arguments: [cd_demo_sk#25 ASC NULLS FIRST], false, 0

(53) SortMergeJoin [codegen id : 12]
Left keys [1]: [c_current_cdemo_sk#4]
Right keys [1]: [cd_demo_sk#25]
Join condition: None

(54) Project [codegen id : 12]
Output [8]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Input [10]: [c_current_cdemo_sk#4, cd_demo_sk#25, cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]

(55) HashAggregate [codegen id : 12]
Input [8]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Keys [8]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#35]
Results [9]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33, count#36]

(56) Exchange
Input [9]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33, count#36]
Arguments: hashpartitioning(cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33, 5), ENSURE_REQUIREMENTS, [id=#37]

(57) HashAggregate [codegen id : 13]
Input [9]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33, count#36]
Keys [8]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cd_purchase_estimate#29, cd_credit_rating#30, cd_dep_count#31, cd_dep_employed_count#32, cd_dep_college_count#33]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#38]
Results [14]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, count(1)#38 AS cnt1#39, cd_purchase_estimate#29, count(1)#38 AS cnt2#40, cd_credit_rating#30, count(1)#38 AS cnt3#41, cd_dep_count#31, count(1)#38 AS cnt4#42, cd_dep_employed_count#32, count(1)#38 AS cnt5#43, cd_dep_college_count#33, count(1)#38 AS cnt6#44]

(58) TakeOrderedAndProject
Input [14]: [cd_gender#26, cd_marital_status#27, cd_education_status#28, cnt1#39, cd_purchase_estimate#29, cnt2#40, cd_credit_rating#30, cnt3#41, cd_dep_count#31, cnt4#42, cd_dep_employed_count#32, cnt5#43, cd_dep_college_count#33, cnt6#44]
Arguments: 100, [cd_gender#26 ASC NULLS FIRST, cd_marital_status#27 ASC NULLS FIRST, cd_education_status#28 ASC NULLS FIRST, cd_purchase_estimate#29 ASC NULLS FIRST, cd_credit_rating#30 ASC NULLS FIRST, cd_dep_count#31 ASC NULLS FIRST, cd_dep_employed_count#32 ASC NULLS FIRST, cd_dep_college_count#33 ASC NULLS FIRST], [cd_gender#26, cd_marital_status#27, cd_education_status#28, cnt1#39, cd_purchase_estimate#29, cnt2#40, cd_credit_rating#30, cnt3#41, cd_dep_count#31, cnt4#42, cd_dep_employed_count#32, cnt5#43, cd_dep_college_count#33, cnt6#44]

