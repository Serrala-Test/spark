== Physical Plan ==
* HashAggregate (39)
+- Exchange (38)
   +- * HashAggregate (37)
      +- * Project (36)
         +- * BroadcastHashJoin Inner BuildRight (35)
            :- * Project (30)
            :  +- * BroadcastHashJoin Inner BuildRight (29)
            :     :- * Project (23)
            :     :  +- * BroadcastHashJoin Inner BuildRight (22)
            :     :     :- * Project (16)
            :     :     :  +- * BroadcastHashJoin Inner BuildRight (15)
            :     :     :     :- * Project (9)
            :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (8)
            :     :     :     :     :- * Filter (3)
            :     :     :     :     :  +- * ColumnarToRow (2)
            :     :     :     :     :     +- Scan parquet default.store_sales (1)
            :     :     :     :     +- BroadcastExchange (7)
            :     :     :     :        +- * Filter (6)
            :     :     :     :           +- * ColumnarToRow (5)
            :     :     :     :              +- Scan parquet default.store (4)
            :     :     :     +- BroadcastExchange (14)
            :     :     :        +- * Project (13)
            :     :     :           +- * Filter (12)
            :     :     :              +- * ColumnarToRow (11)
            :     :     :                 +- Scan parquet default.customer_address (10)
            :     :     +- BroadcastExchange (21)
            :     :        +- * Project (20)
            :     :           +- * Filter (19)
            :     :              +- * ColumnarToRow (18)
            :     :                 +- Scan parquet default.date_dim (17)
            :     +- BroadcastExchange (28)
            :        +- * Project (27)
            :           +- * Filter (26)
            :              +- * ColumnarToRow (25)
            :                 +- Scan parquet default.customer_demographics (24)
            +- BroadcastExchange (34)
               +- * Filter (33)
                  +- * ColumnarToRow (32)
                     +- Scan parquet default.household_demographics (31)


(1) Scan parquet default.store_sales
Output [10]: [ss_sold_date_sk#1, ss_cdemo_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_quantity#6, ss_sales_price#7, ss_ext_sales_price#8, ss_ext_wholesale_cost#9, ss_net_profit#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_cdemo_sk), IsNotNull(ss_hdemo_sk), Or(Or(And(GreaterThanOrEqual(ss_net_profit,100.00),LessThanOrEqual(ss_net_profit,200.00)),And(GreaterThanOrEqual(ss_net_profit,150.00),LessThanOrEqual(ss_net_profit,300.00))),And(GreaterThanOrEqual(ss_net_profit,50.00),LessThanOrEqual(ss_net_profit,250.00))), Or(Or(And(GreaterThanOrEqual(ss_sales_price,100.00),LessThanOrEqual(ss_sales_price,150.00)),And(GreaterThanOrEqual(ss_sales_price,50.00),LessThanOrEqual(ss_sales_price,100.00))),And(GreaterThanOrEqual(ss_sales_price,150.00),LessThanOrEqual(ss_sales_price,200.00)))]
ReadSchema: struct<ss_sold_date_sk:int,ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 6]
Input [10]: [ss_sold_date_sk#1, ss_cdemo_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_quantity#6, ss_sales_price#7, ss_ext_sales_price#8, ss_ext_wholesale_cost#9, ss_net_profit#10]

(3) Filter [codegen id : 6]
Input [10]: [ss_sold_date_sk#1, ss_cdemo_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_quantity#6, ss_sales_price#7, ss_ext_sales_price#8, ss_ext_wholesale_cost#9, ss_net_profit#10]
Condition : ((((((isnotnull(ss_store_sk#5) AND isnotnull(ss_addr_sk#4)) AND isnotnull(ss_sold_date_sk#1)) AND isnotnull(ss_cdemo_sk#2)) AND isnotnull(ss_hdemo_sk#3)) AND ((((ss_net_profit#10 >= 100.00) AND (ss_net_profit#10 <= 200.00)) OR ((ss_net_profit#10 >= 150.00) AND (ss_net_profit#10 <= 300.00))) OR ((ss_net_profit#10 >= 50.00) AND (ss_net_profit#10 <= 250.00)))) AND ((((ss_sales_price#7 >= 100.00) AND (ss_sales_price#7 <= 150.00)) OR ((ss_sales_price#7 >= 50.00) AND (ss_sales_price#7 <= 100.00))) OR ((ss_sales_price#7 >= 150.00) AND (ss_sales_price#7 <= 200.00))))

(4) Scan parquet default.store
Output [1]: [s_store_sk#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int>

(5) ColumnarToRow [codegen id : 1]
Input [1]: [s_store_sk#11]

(6) Filter [codegen id : 1]
Input [1]: [s_store_sk#11]
Condition : isnotnull(s_store_sk#11)

(7) BroadcastExchange
Input [1]: [s_store_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#12]

(8) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_store_sk#5]
Right keys [1]: [s_store_sk#11]
Join condition: None

(9) Project [codegen id : 6]
Output [9]: [ss_sold_date_sk#1, ss_cdemo_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_quantity#6, ss_sales_price#7, ss_ext_sales_price#8, ss_ext_wholesale_cost#9, ss_net_profit#10]
Input [11]: [ss_sold_date_sk#1, ss_cdemo_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_store_sk#5, ss_quantity#6, ss_sales_price#7, ss_ext_sales_price#8, ss_ext_wholesale_cost#9, ss_net_profit#10, s_store_sk#11]

(10) Scan parquet default.customer_address
Output [3]: [ca_address_sk#13, ca_state#14, ca_country#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(11) ColumnarToRow [codegen id : 2]
Input [3]: [ca_address_sk#13, ca_state#14, ca_country#15]

(12) Filter [codegen id : 2]
Input [3]: [ca_address_sk#13, ca_state#14, ca_country#15]
Condition : (((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_country#15, 20, false, true) = United States) AND isnotnull(ca_address_sk#13)) AND ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#14, 2, false, true) IN (TX,OH) OR staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#14, 2, false, true) IN (OR,NM,KY)) OR staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#14, 2, false, true) IN (VA,TX,MS)))

(13) Project [codegen id : 2]
Output [2]: [ca_address_sk#13, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#14, 2, false, true) AS ca_state#16]
Input [3]: [ca_address_sk#13, ca_state#14, ca_country#15]

(14) BroadcastExchange
Input [2]: [ca_address_sk#13, ca_state#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#17]

(15) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_addr_sk#4]
Right keys [1]: [ca_address_sk#13]
Join condition: ((((ca_state#16 IN (TX,OH) AND (ss_net_profit#10 >= 100.00)) AND (ss_net_profit#10 <= 200.00)) OR ((ca_state#16 IN (OR,NM,KY) AND (ss_net_profit#10 >= 150.00)) AND (ss_net_profit#10 <= 300.00))) OR ((ca_state#16 IN (VA,TX,MS) AND (ss_net_profit#10 >= 50.00)) AND (ss_net_profit#10 <= 250.00)))

(16) Project [codegen id : 6]
Output [7]: [ss_sold_date_sk#1, ss_cdemo_sk#2, ss_hdemo_sk#3, ss_quantity#6, ss_sales_price#7, ss_ext_sales_price#8, ss_ext_wholesale_cost#9]
Input [11]: [ss_sold_date_sk#1, ss_cdemo_sk#2, ss_hdemo_sk#3, ss_addr_sk#4, ss_quantity#6, ss_sales_price#7, ss_ext_sales_price#8, ss_ext_wholesale_cost#9, ss_net_profit#10, ca_address_sk#13, ca_state#16]

(17) Scan parquet default.date_dim
Output [2]: [d_date_sk#18, d_year#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(18) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#18, d_year#19]

(19) Filter [codegen id : 3]
Input [2]: [d_date_sk#18, d_year#19]
Condition : ((isnotnull(d_year#19) AND (d_year#19 = 2001)) AND isnotnull(d_date_sk#18))

(20) Project [codegen id : 3]
Output [1]: [d_date_sk#18]
Input [2]: [d_date_sk#18, d_year#19]

(21) BroadcastExchange
Input [1]: [d_date_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#20]

(22) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#18]
Join condition: None

(23) Project [codegen id : 6]
Output [6]: [ss_cdemo_sk#2, ss_hdemo_sk#3, ss_quantity#6, ss_sales_price#7, ss_ext_sales_price#8, ss_ext_wholesale_cost#9]
Input [8]: [ss_sold_date_sk#1, ss_cdemo_sk#2, ss_hdemo_sk#3, ss_quantity#6, ss_sales_price#7, ss_ext_sales_price#8, ss_ext_wholesale_cost#9, d_date_sk#18]

(24) Scan parquet default.customer_demographics
Output [3]: [cd_demo_sk#21, cd_marital_status#22, cd_education_status#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(25) ColumnarToRow [codegen id : 4]
Input [3]: [cd_demo_sk#21, cd_marital_status#22, cd_education_status#23]

(26) Filter [codegen id : 4]
Input [3]: [cd_demo_sk#21, cd_marital_status#22, cd_education_status#23]
Condition : (isnotnull(cd_demo_sk#21) AND ((((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_marital_status#22, 1, false, true) = M) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_education_status#23, 20, false, true) = Advanced Degree     )) OR ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_marital_status#22, 1, false, true) = S) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_education_status#23, 20, false, true) = College             ))) OR ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_marital_status#22, 1, false, true) = W) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_education_status#23, 20, false, true) = 2 yr Degree         ))))

(27) Project [codegen id : 4]
Output [3]: [cd_demo_sk#21, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_marital_status#22, 1, false, true) AS cd_marital_status#24, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_education_status#23, 20, false, true) AS cd_education_status#25]
Input [3]: [cd_demo_sk#21, cd_marital_status#22, cd_education_status#23]

(28) BroadcastExchange
Input [3]: [cd_demo_sk#21, cd_marital_status#24, cd_education_status#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#26]

(29) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#21]
Join condition: ((((((cd_marital_status#24 = M) AND (cd_education_status#25 = Advanced Degree     )) AND (ss_sales_price#7 >= 100.00)) AND (ss_sales_price#7 <= 150.00)) OR ((((cd_marital_status#24 = S) AND (cd_education_status#25 = College             )) AND (ss_sales_price#7 >= 50.00)) AND (ss_sales_price#7 <= 100.00))) OR ((((cd_marital_status#24 = W) AND (cd_education_status#25 = 2 yr Degree         )) AND (ss_sales_price#7 >= 150.00)) AND (ss_sales_price#7 <= 200.00)))

(30) Project [codegen id : 6]
Output [7]: [ss_hdemo_sk#3, ss_quantity#6, ss_sales_price#7, ss_ext_sales_price#8, ss_ext_wholesale_cost#9, cd_marital_status#24, cd_education_status#25]
Input [9]: [ss_cdemo_sk#2, ss_hdemo_sk#3, ss_quantity#6, ss_sales_price#7, ss_ext_sales_price#8, ss_ext_wholesale_cost#9, cd_demo_sk#21, cd_marital_status#24, cd_education_status#25]

(31) Scan parquet default.household_demographics
Output [2]: [hd_demo_sk#27, hd_dep_count#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_demo_sk), Or(Or(EqualTo(hd_dep_count,3),EqualTo(hd_dep_count,1)),EqualTo(hd_dep_count,1))]
ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int>

(32) ColumnarToRow [codegen id : 5]
Input [2]: [hd_demo_sk#27, hd_dep_count#28]

(33) Filter [codegen id : 5]
Input [2]: [hd_demo_sk#27, hd_dep_count#28]
Condition : (isnotnull(hd_demo_sk#27) AND (((hd_dep_count#28 = 3) OR (hd_dep_count#28 = 1)) OR (hd_dep_count#28 = 1)))

(34) BroadcastExchange
Input [2]: [hd_demo_sk#27, hd_dep_count#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(35) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_hdemo_sk#3]
Right keys [1]: [hd_demo_sk#27]
Join condition: (((((((cd_marital_status#24 = M) AND (cd_education_status#25 = Advanced Degree     )) AND (ss_sales_price#7 >= 100.00)) AND (ss_sales_price#7 <= 150.00)) AND (hd_dep_count#28 = 3)) OR (((((cd_marital_status#24 = S) AND (cd_education_status#25 = College             )) AND (ss_sales_price#7 >= 50.00)) AND (ss_sales_price#7 <= 100.00)) AND (hd_dep_count#28 = 1))) OR (((((cd_marital_status#24 = W) AND (cd_education_status#25 = 2 yr Degree         )) AND (ss_sales_price#7 >= 150.00)) AND (ss_sales_price#7 <= 200.00)) AND (hd_dep_count#28 = 1)))

(36) Project [codegen id : 6]
Output [3]: [ss_quantity#6, ss_ext_sales_price#8, ss_ext_wholesale_cost#9]
Input [9]: [ss_hdemo_sk#3, ss_quantity#6, ss_sales_price#7, ss_ext_sales_price#8, ss_ext_wholesale_cost#9, cd_marital_status#24, cd_education_status#25, hd_demo_sk#27, hd_dep_count#28]

(37) HashAggregate [codegen id : 6]
Input [3]: [ss_quantity#6, ss_ext_sales_price#8, ss_ext_wholesale_cost#9]
Keys: []
Functions [4]: [partial_avg(cast(ss_quantity#6 as bigint)), partial_avg(UnscaledValue(ss_ext_sales_price#8)), partial_avg(UnscaledValue(ss_ext_wholesale_cost#9)), partial_sum(UnscaledValue(ss_ext_wholesale_cost#9))]
Aggregate Attributes [7]: [sum#30, count#31, sum#32, count#33, sum#34, count#35, sum#36]
Results [7]: [sum#37, count#38, sum#39, count#40, sum#41, count#42, sum#43]

(38) Exchange
Input [7]: [sum#37, count#38, sum#39, count#40, sum#41, count#42, sum#43]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#44]

(39) HashAggregate [codegen id : 7]
Input [7]: [sum#37, count#38, sum#39, count#40, sum#41, count#42, sum#43]
Keys: []
Functions [4]: [avg(cast(ss_quantity#6 as bigint)), avg(UnscaledValue(ss_ext_sales_price#8)), avg(UnscaledValue(ss_ext_wholesale_cost#9)), sum(UnscaledValue(ss_ext_wholesale_cost#9))]
Aggregate Attributes [4]: [avg(cast(ss_quantity#6 as bigint))#45, avg(UnscaledValue(ss_ext_sales_price#8))#46, avg(UnscaledValue(ss_ext_wholesale_cost#9))#47, sum(UnscaledValue(ss_ext_wholesale_cost#9))#48]
Results [4]: [avg(cast(ss_quantity#6 as bigint))#45 AS avg(ss_quantity)#49, cast((avg(UnscaledValue(ss_ext_sales_price#8))#46 / 100.0) as decimal(11,6)) AS avg(ss_ext_sales_price)#50, cast((avg(UnscaledValue(ss_ext_wholesale_cost#9))#47 / 100.0) as decimal(11,6)) AS avg(ss_ext_wholesale_cost)#51, MakeDecimal(sum(UnscaledValue(ss_ext_wholesale_cost#9))#48,17,2) AS sum(ss_ext_wholesale_cost)#52]

