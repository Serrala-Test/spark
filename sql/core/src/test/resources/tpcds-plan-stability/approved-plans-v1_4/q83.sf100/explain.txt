== Physical Plan ==
TakeOrderedAndProject (42)
+- * Project (41)
   +- * BroadcastHashJoin Inner BuildRight (40)
      :- * Project (27)
      :  +- * BroadcastHashJoin Inner BuildRight (26)
      :     :- * HashAggregate (13)
      :     :  +- Exchange (12)
      :     :     +- * HashAggregate (11)
      :     :        +- * Project (10)
      :     :           +- * BroadcastHashJoin Inner BuildRight (9)
      :     :              :- * Project (5)
      :     :              :  +- * BroadcastHashJoin Inner BuildRight (4)
      :     :              :     :- * ColumnarToRow (2)
      :     :              :     :  +- Scan parquet default.store_returns (1)
      :     :              :     +- ReusedExchange (3)
      :     :              +- BroadcastExchange (8)
      :     :                 +- * ColumnarToRow (7)
      :     :                    +- Scan parquet default.item (6)
      :     +- BroadcastExchange (25)
      :        +- * HashAggregate (24)
      :           +- Exchange (23)
      :              +- * HashAggregate (22)
      :                 +- * Project (21)
      :                    +- * BroadcastHashJoin Inner BuildRight (20)
      :                       :- * Project (18)
      :                       :  +- * BroadcastHashJoin Inner BuildRight (17)
      :                       :     :- * ColumnarToRow (15)
      :                       :     :  +- Scan parquet default.catalog_returns (14)
      :                       :     +- ReusedExchange (16)
      :                       +- ReusedExchange (19)
      +- BroadcastExchange (39)
         +- * HashAggregate (38)
            +- Exchange (37)
               +- * HashAggregate (36)
                  +- * Project (35)
                     +- * BroadcastHashJoin Inner BuildRight (34)
                        :- * Project (32)
                        :  +- * BroadcastHashJoin Inner BuildRight (31)
                        :     :- * ColumnarToRow (29)
                        :     :  +- Scan parquet default.web_returns (28)
                        :     +- ReusedExchange (30)
                        +- ReusedExchange (33)


(1) Scan parquet default.store_returns
Output [3]: [sr_item_sk#1, sr_return_quantity#2, sr_returned_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#3), dynamicpruningexpression(sr_returned_date_sk#3 IN dynamicpruning#4)]
ReadSchema: struct<sr_item_sk:int,sr_return_quantity:int>

(2) ColumnarToRow [codegen id : 5]
Input [3]: [sr_item_sk#1, sr_return_quantity#2, sr_returned_date_sk#3]

(3) ReusedExchange [Reuses operator id: 57]
Output [1]: [d_date_sk#5]

(4) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [sr_returned_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join condition: None

(5) Project [codegen id : 5]
Output [2]: [sr_item_sk#1, sr_return_quantity#2]
Input [4]: [sr_item_sk#1, sr_return_quantity#2, sr_returned_date_sk#3, d_date_sk#5]

(6) Scan parquet default.item
Output [2]: [i_item_sk#6, i_item_id#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [i_item_sk#6, i_item_id#7]

(8) BroadcastExchange
Input [2]: [i_item_sk#6, i_item_id#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#8]

(9) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [sr_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join condition: None

(10) Project [codegen id : 5]
Output [2]: [sr_return_quantity#2, i_item_id#7]
Input [4]: [sr_item_sk#1, sr_return_quantity#2, i_item_sk#6, i_item_id#7]

(11) HashAggregate [codegen id : 5]
Input [2]: [sr_return_quantity#2, i_item_id#7]
Keys [1]: [i_item_id#7]
Functions [1]: [partial_sum(sr_return_quantity#2)]
Aggregate Attributes [1]: [sum#9]
Results [2]: [i_item_id#7, sum#10]

(12) Exchange
Input [2]: [i_item_id#7, sum#10]
Arguments: hashpartitioning(i_item_id#7, 5), ENSURE_REQUIREMENTS, [id=#11]

(13) HashAggregate [codegen id : 18]
Input [2]: [i_item_id#7, sum#10]
Keys [1]: [i_item_id#7]
Functions [1]: [sum(sr_return_quantity#2)]
Aggregate Attributes [1]: [sum(sr_return_quantity#2)#12]
Results [2]: [i_item_id#7 AS item_id#13, sum(sr_return_quantity#2)#12 AS sr_item_qty#14]

(14) Scan parquet default.catalog_returns
Output [3]: [cr_item_sk#15, cr_return_quantity#16, cr_returned_date_sk#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PartitionFilters: [dynamicpruningexpression(cr_returned_date_sk#17 IN dynamicpruning#4)]
ReadSchema: struct<cr_item_sk:int,cr_return_quantity:int>

(15) ColumnarToRow [codegen id : 10]
Input [3]: [cr_item_sk#15, cr_return_quantity#16, cr_returned_date_sk#17]

(16) ReusedExchange [Reuses operator id: 57]
Output [1]: [d_date_sk#18]

(17) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cr_returned_date_sk#17]
Right keys [1]: [d_date_sk#18]
Join condition: None

(18) Project [codegen id : 10]
Output [2]: [cr_item_sk#15, cr_return_quantity#16]
Input [4]: [cr_item_sk#15, cr_return_quantity#16, cr_returned_date_sk#17, d_date_sk#18]

(19) ReusedExchange [Reuses operator id: 8]
Output [2]: [i_item_sk#19, i_item_id#20]

(20) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cr_item_sk#15]
Right keys [1]: [i_item_sk#19]
Join condition: None

(21) Project [codegen id : 10]
Output [2]: [cr_return_quantity#16, i_item_id#20]
Input [4]: [cr_item_sk#15, cr_return_quantity#16, i_item_sk#19, i_item_id#20]

(22) HashAggregate [codegen id : 10]
Input [2]: [cr_return_quantity#16, i_item_id#20]
Keys [1]: [i_item_id#20]
Functions [1]: [partial_sum(cr_return_quantity#16)]
Aggregate Attributes [1]: [sum#21]
Results [2]: [i_item_id#20, sum#22]

(23) Exchange
Input [2]: [i_item_id#20, sum#22]
Arguments: hashpartitioning(i_item_id#20, 5), ENSURE_REQUIREMENTS, [id=#23]

(24) HashAggregate [codegen id : 11]
Input [2]: [i_item_id#20, sum#22]
Keys [1]: [i_item_id#20]
Functions [1]: [sum(cr_return_quantity#16)]
Aggregate Attributes [1]: [sum(cr_return_quantity#16)#24]
Results [2]: [i_item_id#20 AS item_id#25, sum(cr_return_quantity#16)#24 AS cr_item_qty#26]

(25) BroadcastExchange
Input [2]: [item_id#25, cr_item_qty#26]
Arguments: HashedRelationBroadcastMode(List(input[0, string, false]),false), [id=#27]

(26) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [item_id#13]
Right keys [1]: [item_id#25]
Join condition: None

(27) Project [codegen id : 18]
Output [3]: [item_id#13, sr_item_qty#14, cr_item_qty#26]
Input [4]: [item_id#13, sr_item_qty#14, item_id#25, cr_item_qty#26]

(28) Scan parquet default.web_returns
Output [3]: [wr_item_sk#28, wr_return_quantity#29, wr_returned_date_sk#30]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#30), dynamicpruningexpression(wr_returned_date_sk#30 IN dynamicpruning#4)]
ReadSchema: struct<wr_item_sk:int,wr_return_quantity:int>

(29) ColumnarToRow [codegen id : 16]
Input [3]: [wr_item_sk#28, wr_return_quantity#29, wr_returned_date_sk#30]

(30) ReusedExchange [Reuses operator id: 57]
Output [1]: [d_date_sk#31]

(31) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [wr_returned_date_sk#30]
Right keys [1]: [d_date_sk#31]
Join condition: None

(32) Project [codegen id : 16]
Output [2]: [wr_item_sk#28, wr_return_quantity#29]
Input [4]: [wr_item_sk#28, wr_return_quantity#29, wr_returned_date_sk#30, d_date_sk#31]

(33) ReusedExchange [Reuses operator id: 8]
Output [2]: [i_item_sk#32, i_item_id#33]

(34) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [wr_item_sk#28]
Right keys [1]: [i_item_sk#32]
Join condition: None

(35) Project [codegen id : 16]
Output [2]: [wr_return_quantity#29, i_item_id#33]
Input [4]: [wr_item_sk#28, wr_return_quantity#29, i_item_sk#32, i_item_id#33]

(36) HashAggregate [codegen id : 16]
Input [2]: [wr_return_quantity#29, i_item_id#33]
Keys [1]: [i_item_id#33]
Functions [1]: [partial_sum(wr_return_quantity#29)]
Aggregate Attributes [1]: [sum#34]
Results [2]: [i_item_id#33, sum#35]

(37) Exchange
Input [2]: [i_item_id#33, sum#35]
Arguments: hashpartitioning(i_item_id#33, 5), ENSURE_REQUIREMENTS, [id=#36]

(38) HashAggregate [codegen id : 17]
Input [2]: [i_item_id#33, sum#35]
Keys [1]: [i_item_id#33]
Functions [1]: [sum(wr_return_quantity#29)]
Aggregate Attributes [1]: [sum(wr_return_quantity#29)#37]
Results [2]: [i_item_id#33 AS item_id#38, sum(wr_return_quantity#29)#37 AS wr_item_qty#39]

(39) BroadcastExchange
Input [2]: [item_id#38, wr_item_qty#39]
Arguments: HashedRelationBroadcastMode(List(input[0, string, false]),false), [id=#40]

(40) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [item_id#13]
Right keys [1]: [item_id#38]
Join condition: None

(41) Project [codegen id : 18]
Output [8]: [item_id#13, sr_item_qty#14, (((cast(sr_item_qty#14 as double) / cast(((sr_item_qty#14 + cr_item_qty#26) + wr_item_qty#39) as double)) / 3.0) * 100.0) AS sr_dev#41, cr_item_qty#26, (((cast(cr_item_qty#26 as double) / cast(((sr_item_qty#14 + cr_item_qty#26) + wr_item_qty#39) as double)) / 3.0) * 100.0) AS cr_dev#42, wr_item_qty#39, (((cast(wr_item_qty#39 as double) / cast(((sr_item_qty#14 + cr_item_qty#26) + wr_item_qty#39) as double)) / 3.0) * 100.0) AS wr_dev#43, CheckOverflow((promote_precision(cast(cast(((sr_item_qty#14 + cr_item_qty#26) + wr_item_qty#39) as decimal(20,0)) as decimal(21,1))) / 3.0), DecimalType(27,6), true) AS average#44]
Input [5]: [item_id#13, sr_item_qty#14, cr_item_qty#26, item_id#38, wr_item_qty#39]

(42) TakeOrderedAndProject
Input [8]: [item_id#13, sr_item_qty#14, sr_dev#41, cr_item_qty#26, cr_dev#42, wr_item_qty#39, wr_dev#43, average#44]
Arguments: 100, [item_id#13 ASC NULLS FIRST, sr_item_qty#14 ASC NULLS FIRST], [item_id#13, sr_item_qty#14, sr_dev#41, cr_item_qty#26, cr_dev#42, wr_item_qty#39, wr_dev#43, average#44]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = sr_returned_date_sk#3 IN dynamicpruning#4
BroadcastExchange (57)
+- * Project (56)
   +- * BroadcastHashJoin LeftSemi BuildRight (55)
      :- * ColumnarToRow (44)
      :  +- Scan parquet default.date_dim (43)
      +- BroadcastExchange (54)
         +- * Project (53)
            +- * BroadcastHashJoin LeftSemi BuildRight (52)
               :- * ColumnarToRow (46)
               :  +- Scan parquet default.date_dim (45)
               +- BroadcastExchange (51)
                  +- * Project (50)
                     +- * Filter (49)
                        +- * ColumnarToRow (48)
                           +- Scan parquet default.date_dim (47)


(43) Scan parquet default.date_dim
Output [2]: [d_date_sk#5, d_date#45]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
ReadSchema: struct<d_date_sk:int,d_date:date>

(44) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#5, d_date#45]

(45) Scan parquet default.date_dim
Output [2]: [d_date#46, d_week_seq#47]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
ReadSchema: struct<d_date:date,d_week_seq:int>

(46) ColumnarToRow [codegen id : 2]
Input [2]: [d_date#46, d_week_seq#47]

(47) Scan parquet default.date_dim
Output [2]: [d_date#48, d_week_seq#49]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
ReadSchema: struct<d_date:date,d_week_seq:int>

(48) ColumnarToRow [codegen id : 1]
Input [2]: [d_date#48, d_week_seq#49]

(49) Filter [codegen id : 1]
Input [2]: [d_date#48, d_week_seq#49]
Condition : cast(d_date#48 as string) IN (2000-06-30,2000-09-27,2000-11-17)

(50) Project [codegen id : 1]
Output [1]: [d_week_seq#49]
Input [2]: [d_date#48, d_week_seq#49]

(51) BroadcastExchange
Input [1]: [d_week_seq#49]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#50]

(52) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [d_week_seq#47]
Right keys [1]: [d_week_seq#49]
Join condition: None

(53) Project [codegen id : 2]
Output [1]: [d_date#46]
Input [2]: [d_date#46, d_week_seq#47]

(54) BroadcastExchange
Input [1]: [d_date#46]
Arguments: HashedRelationBroadcastMode(List(input[0, date, false]),false), [id=#51]

(55) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [d_date#45]
Right keys [1]: [d_date#46]
Join condition: None

(56) Project [codegen id : 3]
Output [1]: [d_date_sk#5]
Input [2]: [d_date_sk#5, d_date#45]

(57) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#52]

Subquery:2 Hosting operator id = 14 Hosting Expression = cr_returned_date_sk#17 IN dynamicpruning#4

Subquery:3 Hosting operator id = 28 Hosting Expression = wr_returned_date_sk#30 IN dynamicpruning#4


