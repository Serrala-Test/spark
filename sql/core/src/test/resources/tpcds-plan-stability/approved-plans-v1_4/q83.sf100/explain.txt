== Physical Plan ==
TakeOrderedAndProject (63)
+- * Project (62)
   +- * SortMergeJoin Inner (61)
      :- * Project (47)
      :  +- * SortMergeJoin Inner (46)
      :     :- * Sort (32)
      :     :  +- * HashAggregate (31)
      :     :     +- Exchange (30)
      :     :        +- * HashAggregate (29)
      :     :           +- * Project (28)
      :     :              +- * BroadcastHashJoin Inner BuildRight (27)
      :     :                 :- * Project (21)
      :     :                 :  +- * BroadcastHashJoin Inner BuildRight (20)
      :     :                 :     :- * Filter (3)
      :     :                 :     :  +- * ColumnarToRow (2)
      :     :                 :     :     +- Scan parquet default.store_returns (1)
      :     :                 :     +- BroadcastExchange (19)
      :     :                 :        +- * Project (18)
      :     :                 :           +- * BroadcastHashJoin LeftSemi BuildRight (17)
      :     :                 :              :- * Filter (6)
      :     :                 :              :  +- * ColumnarToRow (5)
      :     :                 :              :     +- Scan parquet default.date_dim (4)
      :     :                 :              +- BroadcastExchange (16)
      :     :                 :                 +- * Project (15)
      :     :                 :                    +- * BroadcastHashJoin LeftSemi BuildRight (14)
      :     :                 :                       :- * ColumnarToRow (8)
      :     :                 :                       :  +- Scan parquet default.date_dim (7)
      :     :                 :                       +- BroadcastExchange (13)
      :     :                 :                          +- * Project (12)
      :     :                 :                             +- * Filter (11)
      :     :                 :                                +- * ColumnarToRow (10)
      :     :                 :                                   +- Scan parquet default.date_dim (9)
      :     :                 +- BroadcastExchange (26)
      :     :                    +- * Project (25)
      :     :                       +- * Filter (24)
      :     :                          +- * ColumnarToRow (23)
      :     :                             +- Scan parquet default.item (22)
      :     +- * Sort (45)
      :        +- * HashAggregate (44)
      :           +- Exchange (43)
      :              +- * HashAggregate (42)
      :                 +- * Project (41)
      :                    +- * BroadcastHashJoin Inner BuildRight (40)
      :                       :- * Project (38)
      :                       :  +- * BroadcastHashJoin Inner BuildRight (37)
      :                       :     :- * Filter (35)
      :                       :     :  +- * ColumnarToRow (34)
      :                       :     :     +- Scan parquet default.catalog_returns (33)
      :                       :     +- ReusedExchange (36)
      :                       +- ReusedExchange (39)
      +- * Sort (60)
         +- * HashAggregate (59)
            +- Exchange (58)
               +- * HashAggregate (57)
                  +- * Project (56)
                     +- * BroadcastHashJoin Inner BuildRight (55)
                        :- * Project (53)
                        :  +- * BroadcastHashJoin Inner BuildRight (52)
                        :     :- * Filter (50)
                        :     :  +- * ColumnarToRow (49)
                        :     :     +- Scan parquet default.web_returns (48)
                        :     +- ReusedExchange (51)
                        +- ReusedExchange (54)


(1) Scan parquet default.store_returns
Output [3]: [sr_returned_date_sk#1, sr_item_sk#2, sr_return_quantity#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_returned_date_sk)]
ReadSchema: struct<sr_returned_date_sk:bigint,sr_item_sk:bigint,sr_return_quantity:int>

(2) ColumnarToRow [codegen id : 5]
Input [3]: [sr_returned_date_sk#1, sr_item_sk#2, sr_return_quantity#3]

(3) Filter [codegen id : 5]
Input [3]: [sr_returned_date_sk#1, sr_item_sk#2, sr_return_quantity#3]
Condition : (isnotnull(sr_item_sk#2) AND isnotnull(sr_returned_date_sk#1))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#4, d_date#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(5) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#4, d_date#5]

(6) Filter [codegen id : 3]
Input [2]: [d_date_sk#4, d_date#5]
Condition : isnotnull(d_date_sk#4)

(7) Scan parquet default.date_dim
Output [2]: [d_date#5, d_week_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
ReadSchema: struct<d_date:date,d_week_seq:int>

(8) ColumnarToRow [codegen id : 2]
Input [2]: [d_date#5, d_week_seq#6]

(9) Scan parquet default.date_dim
Output [2]: [d_date#5, d_week_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
ReadSchema: struct<d_date:date,d_week_seq:int>

(10) ColumnarToRow [codegen id : 1]
Input [2]: [d_date#5, d_week_seq#6]

(11) Filter [codegen id : 1]
Input [2]: [d_date#5, d_week_seq#6]
Condition : cast(d_date#5 as string) IN (2000-06-30,2000-09-27,2000-11-17)

(12) Project [codegen id : 1]
Output [1]: [d_week_seq#6 AS d_week_seq#6#7]
Input [2]: [d_date#5, d_week_seq#6]

(13) BroadcastExchange
Input [1]: [d_week_seq#6#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8]

(14) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [d_week_seq#6]
Right keys [1]: [d_week_seq#6#7]
Join condition: None

(15) Project [codegen id : 2]
Output [1]: [d_date#5 AS d_date#5#9]
Input [2]: [d_date#5, d_week_seq#6]

(16) BroadcastExchange
Input [1]: [d_date#5#9]
Arguments: HashedRelationBroadcastMode(List(input[0, date, true]),false), [id=#10]

(17) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [d_date#5]
Right keys [1]: [d_date#5#9]
Join condition: None

(18) Project [codegen id : 3]
Output [1]: [d_date_sk#4]
Input [2]: [d_date_sk#4, d_date#5]

(19) BroadcastExchange
Input [1]: [d_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#11]

(20) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [sr_returned_date_sk#1]
Right keys [1]: [cast(d_date_sk#4 as bigint)]
Join condition: None

(21) Project [codegen id : 5]
Output [2]: [sr_item_sk#2, sr_return_quantity#3]
Input [4]: [sr_returned_date_sk#1, sr_item_sk#2, sr_return_quantity#3, d_date_sk#4]

(22) Scan parquet default.item
Output [2]: [i_item_sk#12, i_item_id#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(23) ColumnarToRow [codegen id : 4]
Input [2]: [i_item_sk#12, i_item_id#13]

(24) Filter [codegen id : 4]
Input [2]: [i_item_sk#12, i_item_id#13]
Condition : (isnotnull(i_item_sk#12) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_item_id#13, 16, false, true)))

(25) Project [codegen id : 4]
Output [2]: [i_item_sk#12, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_item_id#13, 16, false, true) AS i_item_id#14]
Input [2]: [i_item_sk#12, i_item_id#13]

(26) BroadcastExchange
Input [2]: [i_item_sk#12, i_item_id#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15]

(27) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [sr_item_sk#2]
Right keys [1]: [cast(i_item_sk#12 as bigint)]
Join condition: None

(28) Project [codegen id : 5]
Output [2]: [sr_return_quantity#3, i_item_id#14]
Input [4]: [sr_item_sk#2, sr_return_quantity#3, i_item_sk#12, i_item_id#14]

(29) HashAggregate [codegen id : 5]
Input [2]: [sr_return_quantity#3, i_item_id#14]
Keys [1]: [i_item_id#14]
Functions [1]: [partial_sum(cast(sr_return_quantity#3 as bigint))]
Aggregate Attributes [1]: [sum#16]
Results [2]: [i_item_id#14, sum#17]

(30) Exchange
Input [2]: [i_item_id#14, sum#17]
Arguments: hashpartitioning(i_item_id#14, 5), ENSURE_REQUIREMENTS, [id=#18]

(31) HashAggregate [codegen id : 6]
Input [2]: [i_item_id#14, sum#17]
Keys [1]: [i_item_id#14]
Functions [1]: [sum(cast(sr_return_quantity#3 as bigint))]
Aggregate Attributes [1]: [sum(cast(sr_return_quantity#3 as bigint))#19]
Results [2]: [i_item_id#14 AS item_id#20, sum(cast(sr_return_quantity#3 as bigint))#19 AS sr_item_qty#21]

(32) Sort [codegen id : 6]
Input [2]: [item_id#20, sr_item_qty#21]
Arguments: [item_id#20 ASC NULLS FIRST], false, 0

(33) Scan parquet default.catalog_returns
Output [3]: [cr_returned_date_sk#22, cr_item_sk#23, cr_return_quantity#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_returned_date_sk)]
ReadSchema: struct<cr_returned_date_sk:int,cr_item_sk:int,cr_return_quantity:int>

(34) ColumnarToRow [codegen id : 11]
Input [3]: [cr_returned_date_sk#22, cr_item_sk#23, cr_return_quantity#24]

(35) Filter [codegen id : 11]
Input [3]: [cr_returned_date_sk#22, cr_item_sk#23, cr_return_quantity#24]
Condition : (isnotnull(cr_item_sk#23) AND isnotnull(cr_returned_date_sk#22))

(36) ReusedExchange [Reuses operator id: 19]
Output [1]: [d_date_sk#4]

(37) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [cr_returned_date_sk#22]
Right keys [1]: [d_date_sk#4]
Join condition: None

(38) Project [codegen id : 11]
Output [2]: [cr_item_sk#23, cr_return_quantity#24]
Input [4]: [cr_returned_date_sk#22, cr_item_sk#23, cr_return_quantity#24, d_date_sk#4]

(39) ReusedExchange [Reuses operator id: 26]
Output [2]: [i_item_sk#12, i_item_id#25]

(40) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [cr_item_sk#23]
Right keys [1]: [i_item_sk#12]
Join condition: None

(41) Project [codegen id : 11]
Output [2]: [cr_return_quantity#24, i_item_id#25]
Input [4]: [cr_item_sk#23, cr_return_quantity#24, i_item_sk#12, i_item_id#25]

(42) HashAggregate [codegen id : 11]
Input [2]: [cr_return_quantity#24, i_item_id#25]
Keys [1]: [i_item_id#25]
Functions [1]: [partial_sum(cast(cr_return_quantity#24 as bigint))]
Aggregate Attributes [1]: [sum#26]
Results [2]: [i_item_id#25, sum#27]

(43) Exchange
Input [2]: [i_item_id#25, sum#27]
Arguments: hashpartitioning(i_item_id#25, 5), ENSURE_REQUIREMENTS, [id=#28]

(44) HashAggregate [codegen id : 12]
Input [2]: [i_item_id#25, sum#27]
Keys [1]: [i_item_id#25]
Functions [1]: [sum(cast(cr_return_quantity#24 as bigint))]
Aggregate Attributes [1]: [sum(cast(cr_return_quantity#24 as bigint))#29]
Results [2]: [i_item_id#25 AS item_id#30, sum(cast(cr_return_quantity#24 as bigint))#29 AS cr_item_qty#31]

(45) Sort [codegen id : 12]
Input [2]: [item_id#30, cr_item_qty#31]
Arguments: [item_id#30 ASC NULLS FIRST], false, 0

(46) SortMergeJoin [codegen id : 13]
Left keys [1]: [item_id#20]
Right keys [1]: [item_id#30]
Join condition: None

(47) Project [codegen id : 13]
Output [3]: [item_id#20, sr_item_qty#21, cr_item_qty#31]
Input [4]: [item_id#20, sr_item_qty#21, item_id#30, cr_item_qty#31]

(48) Scan parquet default.web_returns
Output [3]: [wr_returned_date_sk#32, wr_item_sk#33, wr_return_quantity#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_returned_date_sk)]
ReadSchema: struct<wr_returned_date_sk:bigint,wr_item_sk:bigint,wr_return_quantity:int>

(49) ColumnarToRow [codegen id : 18]
Input [3]: [wr_returned_date_sk#32, wr_item_sk#33, wr_return_quantity#34]

(50) Filter [codegen id : 18]
Input [3]: [wr_returned_date_sk#32, wr_item_sk#33, wr_return_quantity#34]
Condition : (isnotnull(wr_item_sk#33) AND isnotnull(wr_returned_date_sk#32))

(51) ReusedExchange [Reuses operator id: 19]
Output [1]: [d_date_sk#4]

(52) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [wr_returned_date_sk#32]
Right keys [1]: [cast(d_date_sk#4 as bigint)]
Join condition: None

(53) Project [codegen id : 18]
Output [2]: [wr_item_sk#33, wr_return_quantity#34]
Input [4]: [wr_returned_date_sk#32, wr_item_sk#33, wr_return_quantity#34, d_date_sk#4]

(54) ReusedExchange [Reuses operator id: 26]
Output [2]: [i_item_sk#12, i_item_id#35]

(55) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [wr_item_sk#33]
Right keys [1]: [cast(i_item_sk#12 as bigint)]
Join condition: None

(56) Project [codegen id : 18]
Output [2]: [wr_return_quantity#34, i_item_id#35]
Input [4]: [wr_item_sk#33, wr_return_quantity#34, i_item_sk#12, i_item_id#35]

(57) HashAggregate [codegen id : 18]
Input [2]: [wr_return_quantity#34, i_item_id#35]
Keys [1]: [i_item_id#35]
Functions [1]: [partial_sum(cast(wr_return_quantity#34 as bigint))]
Aggregate Attributes [1]: [sum#36]
Results [2]: [i_item_id#35, sum#37]

(58) Exchange
Input [2]: [i_item_id#35, sum#37]
Arguments: hashpartitioning(i_item_id#35, 5), ENSURE_REQUIREMENTS, [id=#38]

(59) HashAggregate [codegen id : 19]
Input [2]: [i_item_id#35, sum#37]
Keys [1]: [i_item_id#35]
Functions [1]: [sum(cast(wr_return_quantity#34 as bigint))]
Aggregate Attributes [1]: [sum(cast(wr_return_quantity#34 as bigint))#39]
Results [2]: [i_item_id#35 AS item_id#40, sum(cast(wr_return_quantity#34 as bigint))#39 AS wr_item_qty#41]

(60) Sort [codegen id : 19]
Input [2]: [item_id#40, wr_item_qty#41]
Arguments: [item_id#40 ASC NULLS FIRST], false, 0

(61) SortMergeJoin [codegen id : 20]
Left keys [1]: [item_id#20]
Right keys [1]: [item_id#40]
Join condition: None

(62) Project [codegen id : 20]
Output [8]: [item_id#20, sr_item_qty#21, (((cast(sr_item_qty#21 as double) / cast(((sr_item_qty#21 + cr_item_qty#31) + wr_item_qty#41) as double)) / 3.0) * 100.0) AS sr_dev#42, cr_item_qty#31, (((cast(cr_item_qty#31 as double) / cast(((sr_item_qty#21 + cr_item_qty#31) + wr_item_qty#41) as double)) / 3.0) * 100.0) AS cr_dev#43, wr_item_qty#41, (((cast(wr_item_qty#41 as double) / cast(((sr_item_qty#21 + cr_item_qty#31) + wr_item_qty#41) as double)) / 3.0) * 100.0) AS wr_dev#44, CheckOverflow((promote_precision(cast(cast(((sr_item_qty#21 + cr_item_qty#31) + wr_item_qty#41) as decimal(20,0)) as decimal(21,1))) / 3.0), DecimalType(27,6), true) AS average#45]
Input [5]: [item_id#20, sr_item_qty#21, cr_item_qty#31, item_id#40, wr_item_qty#41]

(63) TakeOrderedAndProject
Input [8]: [item_id#20, sr_item_qty#21, sr_dev#42, cr_item_qty#31, cr_dev#43, wr_item_qty#41, wr_dev#44, average#45]
Arguments: 100, [item_id#20 ASC NULLS FIRST, sr_item_qty#21 ASC NULLS FIRST], [item_id#20, sr_item_qty#21, sr_dev#42, cr_item_qty#31, cr_dev#43, wr_item_qty#41, wr_dev#44, average#45]

