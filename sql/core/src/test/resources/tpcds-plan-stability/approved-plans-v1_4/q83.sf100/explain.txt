== Physical Plan ==
TakeOrderedAndProject (62)
+- * Project (61)
   +- * BroadcastHashJoin Inner BuildRight (60)
      :- * Project (46)
      :  +- * BroadcastHashJoin Inner BuildRight (45)
      :     :- * HashAggregate (31)
      :     :  +- Exchange (30)
      :     :     +- * HashAggregate (29)
      :     :        +- * Project (28)
      :     :           +- * BroadcastHashJoin Inner BuildRight (27)
      :     :              :- * Project (22)
      :     :              :  +- * BroadcastHashJoin Inner BuildRight (21)
      :     :              :     :- * Filter (3)
      :     :              :     :  +- * ColumnarToRow (2)
      :     :              :     :     +- Scan parquet default.store_returns (1)
      :     :              :     +- BroadcastExchange (20)
      :     :              :        +- * Project (19)
      :     :              :           +- * BroadcastHashJoin LeftSemi BuildRight (18)
      :     :              :              :- * Filter (6)
      :     :              :              :  +- * ColumnarToRow (5)
      :     :              :              :     +- Scan parquet default.date_dim (4)
      :     :              :              +- BroadcastExchange (17)
      :     :              :                 +- * Project (16)
      :     :              :                    +- * BroadcastHashJoin LeftSemi BuildRight (15)
      :     :              :                       :- * Filter (9)
      :     :              :                       :  +- * ColumnarToRow (8)
      :     :              :                       :     +- Scan parquet default.date_dim (7)
      :     :              :                       +- BroadcastExchange (14)
      :     :              :                          +- * Project (13)
      :     :              :                             +- * Filter (12)
      :     :              :                                +- * ColumnarToRow (11)
      :     :              :                                   +- Scan parquet default.date_dim (10)
      :     :              +- BroadcastExchange (26)
      :     :                 +- * Filter (25)
      :     :                    +- * ColumnarToRow (24)
      :     :                       +- Scan parquet default.item (23)
      :     +- BroadcastExchange (44)
      :        +- * HashAggregate (43)
      :           +- Exchange (42)
      :              +- * HashAggregate (41)
      :                 +- * Project (40)
      :                    +- * BroadcastHashJoin Inner BuildRight (39)
      :                       :- * Project (37)
      :                       :  +- * BroadcastHashJoin Inner BuildRight (36)
      :                       :     :- * Filter (34)
      :                       :     :  +- * ColumnarToRow (33)
      :                       :     :     +- Scan parquet default.catalog_returns (32)
      :                       :     +- ReusedExchange (35)
      :                       +- ReusedExchange (38)
      +- BroadcastExchange (59)
         +- * HashAggregate (58)
            +- Exchange (57)
               +- * HashAggregate (56)
                  +- * Project (55)
                     +- * BroadcastHashJoin Inner BuildRight (54)
                        :- * Project (52)
                        :  +- * BroadcastHashJoin Inner BuildRight (51)
                        :     :- * Filter (49)
                        :     :  +- * ColumnarToRow (48)
                        :     :     +- Scan parquet default.web_returns (47)
                        :     +- ReusedExchange (50)
                        +- ReusedExchange (53)


(1) Scan parquet default.store_returns
Output [3]: [sr_item_sk#1, sr_return_quantity#2, sr_returned_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#3), dynamicpruningexpression(sr_returned_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:bigint,sr_return_quantity:int>

(2) ColumnarToRow [codegen id : 5]
Input [3]: [sr_item_sk#1, sr_return_quantity#2, sr_returned_date_sk#3]

(3) Filter [codegen id : 5]
Input [3]: [sr_item_sk#1, sr_return_quantity#2, sr_returned_date_sk#3]
Condition : isnotnull(sr_item_sk#1)

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#5, d_date#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk), IsNotNull(d_date)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(5) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#5, d_date#6]

(6) Filter [codegen id : 3]
Input [2]: [d_date_sk#5, d_date#6]
Condition : (isnotnull(d_date_sk#5) AND isnotnull(d_date#6))

(7) Scan parquet default.date_dim
Output [2]: [d_date#6, d_week_seq#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(8) ColumnarToRow [codegen id : 2]
Input [2]: [d_date#6, d_week_seq#7]

(9) Filter [codegen id : 2]
Input [2]: [d_date#6, d_week_seq#7]
Condition : (isnotnull(d_week_seq#7) AND isnotnull(d_date#6))

(10) Scan parquet default.date_dim
Output [2]: [d_date#6, d_week_seq#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(11) ColumnarToRow [codegen id : 1]
Input [2]: [d_date#6, d_week_seq#7]

(12) Filter [codegen id : 1]
Input [2]: [d_date#6, d_week_seq#7]
Condition : (cast(d_date#6 as string) IN (2000-06-30,2000-09-27,2000-11-17) AND isnotnull(d_week_seq#7))

(13) Project [codegen id : 1]
Output [1]: [d_week_seq#7 AS d_week_seq#7#8]
Input [2]: [d_date#6, d_week_seq#7]

(14) BroadcastExchange
Input [1]: [d_week_seq#7#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#9]

(15) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [d_week_seq#7]
Right keys [1]: [d_week_seq#7#8]
Join condition: None

(16) Project [codegen id : 2]
Output [1]: [d_date#6 AS d_date#6#10]
Input [2]: [d_date#6, d_week_seq#7]

(17) BroadcastExchange
Input [1]: [d_date#6#10]
Arguments: HashedRelationBroadcastMode(List(input[0, date, true]),false), [id=#11]

(18) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [d_date#6]
Right keys [1]: [d_date#6#10]
Join condition: None

(19) Project [codegen id : 3]
Output [1]: [d_date_sk#5]
Input [2]: [d_date_sk#5, d_date#6]

(20) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(21) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [sr_returned_date_sk#3]
Right keys [1]: [cast(d_date_sk#5 as bigint)]
Join condition: None

(22) Project [codegen id : 5]
Output [2]: [sr_item_sk#1, sr_return_quantity#2]
Input [4]: [sr_item_sk#1, sr_return_quantity#2, sr_returned_date_sk#3, d_date_sk#5]

(23) Scan parquet default.item
Output [2]: [i_item_sk#13, i_item_id#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_item_id)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(24) ColumnarToRow [codegen id : 4]
Input [2]: [i_item_sk#13, i_item_id#14]

(25) Filter [codegen id : 4]
Input [2]: [i_item_sk#13, i_item_id#14]
Condition : (isnotnull(i_item_sk#13) AND isnotnull(i_item_id#14))

(26) BroadcastExchange
Input [2]: [i_item_sk#13, i_item_id#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#15]

(27) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [sr_item_sk#1]
Right keys [1]: [cast(i_item_sk#13 as bigint)]
Join condition: None

(28) Project [codegen id : 5]
Output [2]: [sr_return_quantity#2, i_item_id#14]
Input [4]: [sr_item_sk#1, sr_return_quantity#2, i_item_sk#13, i_item_id#14]

(29) HashAggregate [codegen id : 5]
Input [2]: [sr_return_quantity#2, i_item_id#14]
Keys [1]: [i_item_id#14]
Functions [1]: [partial_sum(sr_return_quantity#2)]
Aggregate Attributes [1]: [sum#16]
Results [2]: [i_item_id#14, sum#17]

(30) Exchange
Input [2]: [i_item_id#14, sum#17]
Arguments: hashpartitioning(i_item_id#14, 5), ENSURE_REQUIREMENTS, [id=#18]

(31) HashAggregate [codegen id : 18]
Input [2]: [i_item_id#14, sum#17]
Keys [1]: [i_item_id#14]
Functions [1]: [sum(sr_return_quantity#2)]
Aggregate Attributes [1]: [sum(sr_return_quantity#2)#19]
Results [2]: [i_item_id#14 AS item_id#20, sum(sr_return_quantity#2)#19 AS sr_item_qty#21]

(32) Scan parquet default.catalog_returns
Output [3]: [cr_item_sk#22, cr_return_quantity#23, cr_returned_date_sk#24]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#24), dynamicpruningexpression(cr_returned_date_sk#24 IN dynamicpruning#25)]
PushedFilters: [IsNotNull(cr_item_sk)]
ReadSchema: struct<cr_item_sk:int,cr_return_quantity:int>

(33) ColumnarToRow [codegen id : 10]
Input [3]: [cr_item_sk#22, cr_return_quantity#23, cr_returned_date_sk#24]

(34) Filter [codegen id : 10]
Input [3]: [cr_item_sk#22, cr_return_quantity#23, cr_returned_date_sk#24]
Condition : isnotnull(cr_item_sk#22)

(35) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#5]

(36) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cr_returned_date_sk#24]
Right keys [1]: [d_date_sk#5]
Join condition: None

(37) Project [codegen id : 10]
Output [2]: [cr_item_sk#22, cr_return_quantity#23]
Input [4]: [cr_item_sk#22, cr_return_quantity#23, cr_returned_date_sk#24, d_date_sk#5]

(38) ReusedExchange [Reuses operator id: 26]
Output [2]: [i_item_sk#13, i_item_id#14]

(39) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cr_item_sk#22]
Right keys [1]: [i_item_sk#13]
Join condition: None

(40) Project [codegen id : 10]
Output [2]: [cr_return_quantity#23, i_item_id#14]
Input [4]: [cr_item_sk#22, cr_return_quantity#23, i_item_sk#13, i_item_id#14]

(41) HashAggregate [codegen id : 10]
Input [2]: [cr_return_quantity#23, i_item_id#14]
Keys [1]: [i_item_id#14]
Functions [1]: [partial_sum(cr_return_quantity#23)]
Aggregate Attributes [1]: [sum#26]
Results [2]: [i_item_id#14, sum#27]

(42) Exchange
Input [2]: [i_item_id#14, sum#27]
Arguments: hashpartitioning(i_item_id#14, 5), ENSURE_REQUIREMENTS, [id=#28]

(43) HashAggregate [codegen id : 11]
Input [2]: [i_item_id#14, sum#27]
Keys [1]: [i_item_id#14]
Functions [1]: [sum(cr_return_quantity#23)]
Aggregate Attributes [1]: [sum(cr_return_quantity#23)#29]
Results [2]: [i_item_id#14 AS item_id#30, sum(cr_return_quantity#23)#29 AS cr_item_qty#31]

(44) BroadcastExchange
Input [2]: [item_id#30, cr_item_qty#31]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#32]

(45) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [item_id#20]
Right keys [1]: [item_id#30]
Join condition: None

(46) Project [codegen id : 18]
Output [3]: [item_id#20, sr_item_qty#21, cr_item_qty#31]
Input [4]: [item_id#20, sr_item_qty#21, item_id#30, cr_item_qty#31]

(47) Scan parquet default.web_returns
Output [3]: [wr_item_sk#33, wr_return_quantity#34, wr_returned_date_sk#35]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#35), dynamicpruningexpression(wr_returned_date_sk#35 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(wr_item_sk)]
ReadSchema: struct<wr_item_sk:bigint,wr_return_quantity:int>

(48) ColumnarToRow [codegen id : 16]
Input [3]: [wr_item_sk#33, wr_return_quantity#34, wr_returned_date_sk#35]

(49) Filter [codegen id : 16]
Input [3]: [wr_item_sk#33, wr_return_quantity#34, wr_returned_date_sk#35]
Condition : isnotnull(wr_item_sk#33)

(50) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#5]

(51) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [wr_returned_date_sk#35]
Right keys [1]: [cast(d_date_sk#5 as bigint)]
Join condition: None

(52) Project [codegen id : 16]
Output [2]: [wr_item_sk#33, wr_return_quantity#34]
Input [4]: [wr_item_sk#33, wr_return_quantity#34, wr_returned_date_sk#35, d_date_sk#5]

(53) ReusedExchange [Reuses operator id: 26]
Output [2]: [i_item_sk#13, i_item_id#14]

(54) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [wr_item_sk#33]
Right keys [1]: [cast(i_item_sk#13 as bigint)]
Join condition: None

(55) Project [codegen id : 16]
Output [2]: [wr_return_quantity#34, i_item_id#14]
Input [4]: [wr_item_sk#33, wr_return_quantity#34, i_item_sk#13, i_item_id#14]

(56) HashAggregate [codegen id : 16]
Input [2]: [wr_return_quantity#34, i_item_id#14]
Keys [1]: [i_item_id#14]
Functions [1]: [partial_sum(wr_return_quantity#34)]
Aggregate Attributes [1]: [sum#36]
Results [2]: [i_item_id#14, sum#37]

(57) Exchange
Input [2]: [i_item_id#14, sum#37]
Arguments: hashpartitioning(i_item_id#14, 5), ENSURE_REQUIREMENTS, [id=#38]

(58) HashAggregate [codegen id : 17]
Input [2]: [i_item_id#14, sum#37]
Keys [1]: [i_item_id#14]
Functions [1]: [sum(wr_return_quantity#34)]
Aggregate Attributes [1]: [sum(wr_return_quantity#34)#39]
Results [2]: [i_item_id#14 AS item_id#40, sum(wr_return_quantity#34)#39 AS wr_item_qty#41]

(59) BroadcastExchange
Input [2]: [item_id#40, wr_item_qty#41]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#42]

(60) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [item_id#20]
Right keys [1]: [item_id#40]
Join condition: None

(61) Project [codegen id : 18]
Output [8]: [item_id#20, sr_item_qty#21, (((cast(sr_item_qty#21 as double) / cast(((sr_item_qty#21 + cr_item_qty#31) + wr_item_qty#41) as double)) / 3.0) * 100.0) AS sr_dev#43, cr_item_qty#31, (((cast(cr_item_qty#31 as double) / cast(((sr_item_qty#21 + cr_item_qty#31) + wr_item_qty#41) as double)) / 3.0) * 100.0) AS cr_dev#44, wr_item_qty#41, (((cast(wr_item_qty#41 as double) / cast(((sr_item_qty#21 + cr_item_qty#31) + wr_item_qty#41) as double)) / 3.0) * 100.0) AS wr_dev#45, CheckOverflow((promote_precision(cast(cast(((sr_item_qty#21 + cr_item_qty#31) + wr_item_qty#41) as decimal(20,0)) as decimal(21,1))) / 3.0), DecimalType(27,6), true) AS average#46]
Input [5]: [item_id#20, sr_item_qty#21, cr_item_qty#31, item_id#40, wr_item_qty#41]

(62) TakeOrderedAndProject
Input [8]: [item_id#20, sr_item_qty#21, sr_dev#43, cr_item_qty#31, cr_dev#44, wr_item_qty#41, wr_dev#45, average#46]
Arguments: 100, [item_id#20 ASC NULLS FIRST, sr_item_qty#21 ASC NULLS FIRST], [item_id#20, sr_item_qty#21, sr_dev#43, cr_item_qty#31, cr_dev#44, wr_item_qty#41, wr_dev#45, average#46]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = sr_returned_date_sk#3 IN dynamicpruning#4
ReusedExchange (63)


(63) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#5]

Subquery:2 Hosting operator id = 32 Hosting Expression = cr_returned_date_sk#24 IN dynamicpruning#25
ReusedExchange (64)


(64) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#5]

Subquery:3 Hosting operator id = 47 Hosting Expression = wr_returned_date_sk#35 IN dynamicpruning#4


