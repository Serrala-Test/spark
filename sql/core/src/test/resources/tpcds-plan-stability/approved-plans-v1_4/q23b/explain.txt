== Physical Plan ==
TakeOrderedAndProject (96)
+- Union (95)
   :- * HashAggregate (68)
   :  +- Exchange (67)
   :     +- * HashAggregate (66)
   :        +- * Project (65)
   :           +- * BroadcastHashJoin Inner BuildRight (64)
   :              :- * Project (62)
   :              :  +- * BroadcastHashJoin Inner BuildRight (61)
   :              :     :- * SortMergeJoin LeftSemi (45)
   :              :     :  :- * Sort (25)
   :              :     :  :  +- Exchange (24)
   :              :     :  :     +- * Project (23)
   :              :     :  :        +- * BroadcastHashJoin LeftSemi BuildRight (22)
   :              :     :  :           :- * Filter (3)
   :              :     :  :           :  +- * ColumnarToRow (2)
   :              :     :  :           :     +- Scan parquet default.catalog_sales (1)
   :              :     :  :           +- BroadcastExchange (21)
   :              :     :  :              +- * Project (20)
   :              :     :  :                 +- * Filter (19)
   :              :     :  :                    +- * HashAggregate (18)
   :              :     :  :                       +- Exchange (17)
   :              :     :  :                          +- * HashAggregate (16)
   :              :     :  :                             +- * Project (15)
   :              :     :  :                                +- * BroadcastHashJoin Inner BuildRight (14)
   :              :     :  :                                   :- * Project (9)
   :              :     :  :                                   :  +- * BroadcastHashJoin Inner BuildRight (8)
   :              :     :  :                                   :     :- * Filter (6)
   :              :     :  :                                   :     :  +- * ColumnarToRow (5)
   :              :     :  :                                   :     :     +- Scan parquet default.store_sales (4)
   :              :     :  :                                   :     +- ReusedExchange (7)
   :              :     :  :                                   +- BroadcastExchange (13)
   :              :     :  :                                      +- * Filter (12)
   :              :     :  :                                         +- * ColumnarToRow (11)
   :              :     :  :                                            +- Scan parquet default.item (10)
   :              :     :  +- * Sort (44)
   :              :     :     +- * BroadcastHashJoin LeftSemi BuildRight (43)
   :              :     :        :- * Project (40)
   :              :     :        :  +- * Filter (39)
   :              :     :        :     +- * HashAggregate (38)
   :              :     :        :        +- Exchange (37)
   :              :     :        :           +- * HashAggregate (36)
   :              :     :        :              +- * Project (35)
   :              :     :        :                 +- * BroadcastHashJoin Inner BuildRight (34)
   :              :     :        :                    :- * Project (29)
   :              :     :        :                    :  +- * Filter (28)
   :              :     :        :                    :     +- * ColumnarToRow (27)
   :              :     :        :                    :        +- Scan parquet default.store_sales (26)
   :              :     :        :                    +- BroadcastExchange (33)
   :              :     :        :                       +- * Filter (32)
   :              :     :        :                          +- * ColumnarToRow (31)
   :              :     :        :                             +- Scan parquet default.customer (30)
   :              :     :        +- BroadcastExchange (42)
   :              :     :           +- ReusedExchange (41)
   :              :     +- BroadcastExchange (60)
   :              :        +- * SortMergeJoin LeftSemi (59)
   :              :           :- * Sort (50)
   :              :           :  +- Exchange (49)
   :              :           :     +- * Filter (48)
   :              :           :        +- * ColumnarToRow (47)
   :              :           :           +- Scan parquet default.customer (46)
   :              :           +- * Sort (58)
   :              :              +- * BroadcastHashJoin LeftSemi BuildRight (57)
   :              :                 :- * Project (54)
   :              :                 :  +- * Filter (53)
   :              :                 :     +- * HashAggregate (52)
   :              :                 :        +- ReusedExchange (51)
   :              :                 +- BroadcastExchange (56)
   :              :                    +- ReusedExchange (55)
   :              +- ReusedExchange (63)
   +- * HashAggregate (94)
      +- Exchange (93)
         +- * HashAggregate (92)
            +- * Project (91)
               +- * BroadcastHashJoin Inner BuildRight (90)
                  :- * Project (88)
                  :  +- * BroadcastHashJoin Inner BuildRight (87)
                  :     :- * SortMergeJoin LeftSemi (85)
                  :     :  :- * Sort (76)
                  :     :  :  +- Exchange (75)
                  :     :  :     +- * Project (74)
                  :     :  :        +- * BroadcastHashJoin LeftSemi BuildRight (73)
                  :     :  :           :- * Filter (71)
                  :     :  :           :  +- * ColumnarToRow (70)
                  :     :  :           :     +- Scan parquet default.web_sales (69)
                  :     :  :           +- ReusedExchange (72)
                  :     :  +- * Sort (84)
                  :     :     +- * BroadcastHashJoin LeftSemi BuildRight (83)
                  :     :        :- * Project (80)
                  :     :        :  +- * Filter (79)
                  :     :        :     +- * HashAggregate (78)
                  :     :        :        +- ReusedExchange (77)
                  :     :        +- BroadcastExchange (82)
                  :     :           +- ReusedExchange (81)
                  :     +- ReusedExchange (86)
                  +- ReusedExchange (89)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(3) Filter [codegen id : 5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Condition : isnotnull(cs_bill_customer_sk#1)

(4) Scan parquet default.store_sales
Output [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(5) ColumnarToRow [codegen id : 3]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]

(6) Filter [codegen id : 3]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Condition : isnotnull(ss_item_sk#7)

(7) ReusedExchange [Reuses operator id: 106]
Output [2]: [d_date_sk#10, d_date#11]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#10]
Join condition: None

(9) Project [codegen id : 3]
Output [2]: [ss_item_sk#7, d_date#11]
Input [4]: [ss_item_sk#7, ss_sold_date_sk#8, d_date_sk#10, d_date#11]

(10) Scan parquet default.item
Output [2]: [i_item_sk#12, i_item_desc#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(11) ColumnarToRow [codegen id : 2]
Input [2]: [i_item_sk#12, i_item_desc#13]

(12) Filter [codegen id : 2]
Input [2]: [i_item_sk#12, i_item_desc#13]
Condition : isnotnull(i_item_sk#12)

(13) BroadcastExchange
Input [2]: [i_item_sk#12, i_item_desc#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14]

(14) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#7]
Right keys [1]: [i_item_sk#12]
Join condition: None

(15) Project [codegen id : 3]
Output [3]: [d_date#11, i_item_sk#12, substr(i_item_desc#13, 1, 30) AS _groupingexpression#15]
Input [4]: [ss_item_sk#7, d_date#11, i_item_sk#12, i_item_desc#13]

(16) HashAggregate [codegen id : 3]
Input [3]: [d_date#11, i_item_sk#12, _groupingexpression#15]
Keys [3]: [_groupingexpression#15, i_item_sk#12, d_date#11]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#16]
Results [4]: [_groupingexpression#15, i_item_sk#12, d_date#11, count#17]

(17) Exchange
Input [4]: [_groupingexpression#15, i_item_sk#12, d_date#11, count#17]
Arguments: hashpartitioning(_groupingexpression#15, i_item_sk#12, d_date#11, 5), ENSURE_REQUIREMENTS, [id=#18]

(18) HashAggregate [codegen id : 4]
Input [4]: [_groupingexpression#15, i_item_sk#12, d_date#11, count#17]
Keys [3]: [_groupingexpression#15, i_item_sk#12, d_date#11]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#19]
Results [2]: [i_item_sk#12 AS item_sk#20, count(1)#19 AS cnt#21]

(19) Filter [codegen id : 4]
Input [2]: [item_sk#20, cnt#21]
Condition : (cnt#21 > 4)

(20) Project [codegen id : 4]
Output [1]: [item_sk#20]
Input [2]: [item_sk#20, cnt#21]

(21) BroadcastExchange
Input [1]: [item_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22]

(22) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#20]
Join condition: None

(23) Project [codegen id : 5]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(24) Exchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#23]

(25) Sort [codegen id : 6]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(26) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(27) ColumnarToRow [codegen id : 8]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]

(28) Filter [codegen id : 8]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]
Condition : isnotnull(ss_customer_sk#24)

(29) Project [codegen id : 8]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]

(30) Scan parquet default.customer
Output [1]: [c_customer_sk#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(31) ColumnarToRow [codegen id : 7]
Input [1]: [c_customer_sk#28]

(32) Filter [codegen id : 7]
Input [1]: [c_customer_sk#28]
Condition : isnotnull(c_customer_sk#28)

(33) BroadcastExchange
Input [1]: [c_customer_sk#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(34) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#28]
Join condition: None

(35) Project [codegen id : 8]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#28]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#28]

(36) HashAggregate [codegen id : 8]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#28]
Keys [1]: [c_customer_sk#28]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#30, isEmpty#31]
Results [3]: [c_customer_sk#28, sum#32, isEmpty#33]

(37) Exchange
Input [3]: [c_customer_sk#28, sum#32, isEmpty#33]
Arguments: hashpartitioning(c_customer_sk#28, 5), ENSURE_REQUIREMENTS, [id=#34]

(38) HashAggregate [codegen id : 14]
Input [3]: [c_customer_sk#28, sum#32, isEmpty#33]
Keys [1]: [c_customer_sk#28]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]
Results [2]: [c_customer_sk#28, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35 AS ssales#36]

(39) Filter [codegen id : 14]
Input [2]: [c_customer_sk#28, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8), true)))

(40) Project [codegen id : 14]
Output [1]: [c_customer_sk#28]
Input [2]: [c_customer_sk#28, ssales#36]

(41) ReusedExchange [Reuses operator id: 24]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(42) BroadcastExchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#39]

(43) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [c_customer_sk#28]
Right keys [1]: [cs_bill_customer_sk#1]
Join condition: None

(44) Sort [codegen id : 14]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(45) SortMergeJoin [codegen id : 23]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#28]
Join condition: None

(46) Scan parquet default.customer
Output [3]: [c_customer_sk#40, c_first_name#41, c_last_name#42]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(47) ColumnarToRow [codegen id : 15]
Input [3]: [c_customer_sk#40, c_first_name#41, c_last_name#42]

(48) Filter [codegen id : 15]
Input [3]: [c_customer_sk#40, c_first_name#41, c_last_name#42]
Condition : isnotnull(c_customer_sk#40)

(49) Exchange
Input [3]: [c_customer_sk#40, c_first_name#41, c_last_name#42]
Arguments: hashpartitioning(c_customer_sk#40, 5), ENSURE_REQUIREMENTS, [id=#43]

(50) Sort [codegen id : 16]
Input [3]: [c_customer_sk#40, c_first_name#41, c_last_name#42]
Arguments: [c_customer_sk#40 ASC NULLS FIRST], false, 0

(51) ReusedExchange [Reuses operator id: 37]
Output [3]: [c_customer_sk#28, sum#32, isEmpty#33]

(52) HashAggregate [codegen id : 20]
Input [3]: [c_customer_sk#28, sum#32, isEmpty#33]
Keys [1]: [c_customer_sk#28]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]
Results [2]: [c_customer_sk#28, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35 AS ssales#36]

(53) Filter [codegen id : 20]
Input [2]: [c_customer_sk#28, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8), true)))

(54) Project [codegen id : 20]
Output [1]: [c_customer_sk#28]
Input [2]: [c_customer_sk#28, ssales#36]

(55) ReusedExchange [Reuses operator id: 49]
Output [3]: [c_customer_sk#40, c_first_name#41, c_last_name#42]

(56) BroadcastExchange
Input [3]: [c_customer_sk#40, c_first_name#41, c_last_name#42]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#44]

(57) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [c_customer_sk#28]
Right keys [1]: [c_customer_sk#40]
Join condition: None

(58) Sort [codegen id : 20]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(59) SortMergeJoin [codegen id : 21]
Left keys [1]: [c_customer_sk#40]
Right keys [1]: [c_customer_sk#28]
Join condition: None

(60) BroadcastExchange
Input [3]: [c_customer_sk#40, c_first_name#41, c_last_name#42]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#45]

(61) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#40]
Join condition: None

(62) Project [codegen id : 23]
Output [5]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_first_name#41, c_last_name#42]
Input [7]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_customer_sk#40, c_first_name#41, c_last_name#42]

(63) ReusedExchange [Reuses operator id: 101]
Output [1]: [d_date_sk#46]

(64) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#46]
Join condition: None

(65) Project [codegen id : 23]
Output [4]: [cs_quantity#3, cs_list_price#4, c_first_name#41, c_last_name#42]
Input [6]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_first_name#41, c_last_name#42, d_date_sk#46]

(66) HashAggregate [codegen id : 23]
Input [4]: [cs_quantity#3, cs_list_price#4, c_first_name#41, c_last_name#42]
Keys [2]: [c_last_name#42, c_first_name#41]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#47, isEmpty#48]
Results [4]: [c_last_name#42, c_first_name#41, sum#49, isEmpty#50]

(67) Exchange
Input [4]: [c_last_name#42, c_first_name#41, sum#49, isEmpty#50]
Arguments: hashpartitioning(c_last_name#42, c_first_name#41, 5), ENSURE_REQUIREMENTS, [id=#51]

(68) HashAggregate [codegen id : 24]
Input [4]: [c_last_name#42, c_first_name#41, sum#49, isEmpty#50]
Keys [2]: [c_last_name#42, c_first_name#41]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#52]
Results [3]: [c_last_name#42, c_first_name#41, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#52 AS sales#53]

(69) Scan parquet default.web_sales
Output [5]: [ws_item_sk#54, ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57, ws_sold_date_sk#58]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#58), dynamicpruningexpression(ws_sold_date_sk#58 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(70) ColumnarToRow [codegen id : 29]
Input [5]: [ws_item_sk#54, ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57, ws_sold_date_sk#58]

(71) Filter [codegen id : 29]
Input [5]: [ws_item_sk#54, ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57, ws_sold_date_sk#58]
Condition : isnotnull(ws_bill_customer_sk#55)

(72) ReusedExchange [Reuses operator id: 21]
Output [1]: [item_sk#20]

(73) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_item_sk#54]
Right keys [1]: [item_sk#20]
Join condition: None

(74) Project [codegen id : 29]
Output [4]: [ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57, ws_sold_date_sk#58]
Input [5]: [ws_item_sk#54, ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57, ws_sold_date_sk#58]

(75) Exchange
Input [4]: [ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57, ws_sold_date_sk#58]
Arguments: hashpartitioning(ws_bill_customer_sk#55, 5), ENSURE_REQUIREMENTS, [id=#59]

(76) Sort [codegen id : 30]
Input [4]: [ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57, ws_sold_date_sk#58]
Arguments: [ws_bill_customer_sk#55 ASC NULLS FIRST], false, 0

(77) ReusedExchange [Reuses operator id: 37]
Output [3]: [c_customer_sk#60, sum#61, isEmpty#62]

(78) HashAggregate [codegen id : 38]
Input [3]: [c_customer_sk#60, sum#61, isEmpty#62]
Keys [1]: [c_customer_sk#60]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#63 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#64 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#63 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#64 as decimal(12,2)))), DecimalType(18,2), true))#65]
Results [2]: [c_customer_sk#60, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#63 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#64 as decimal(12,2)))), DecimalType(18,2), true))#65 AS ssales#36]

(79) Filter [codegen id : 38]
Input [2]: [c_customer_sk#60, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8), true)))

(80) Project [codegen id : 38]
Output [1]: [c_customer_sk#60]
Input [2]: [c_customer_sk#60, ssales#36]

(81) ReusedExchange [Reuses operator id: 75]
Output [4]: [ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57, ws_sold_date_sk#58]

(82) BroadcastExchange
Input [4]: [ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57, ws_sold_date_sk#58]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#66]

(83) BroadcastHashJoin [codegen id : 38]
Left keys [1]: [c_customer_sk#60]
Right keys [1]: [ws_bill_customer_sk#55]
Join condition: None

(84) Sort [codegen id : 38]
Input [1]: [c_customer_sk#60]
Arguments: [c_customer_sk#60 ASC NULLS FIRST], false, 0

(85) SortMergeJoin [codegen id : 47]
Left keys [1]: [ws_bill_customer_sk#55]
Right keys [1]: [c_customer_sk#60]
Join condition: None

(86) ReusedExchange [Reuses operator id: 60]
Output [3]: [c_customer_sk#67, c_first_name#68, c_last_name#69]

(87) BroadcastHashJoin [codegen id : 47]
Left keys [1]: [ws_bill_customer_sk#55]
Right keys [1]: [c_customer_sk#67]
Join condition: None

(88) Project [codegen id : 47]
Output [5]: [ws_quantity#56, ws_list_price#57, ws_sold_date_sk#58, c_first_name#68, c_last_name#69]
Input [7]: [ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57, ws_sold_date_sk#58, c_customer_sk#67, c_first_name#68, c_last_name#69]

(89) ReusedExchange [Reuses operator id: 101]
Output [1]: [d_date_sk#70]

(90) BroadcastHashJoin [codegen id : 47]
Left keys [1]: [ws_sold_date_sk#58]
Right keys [1]: [d_date_sk#70]
Join condition: None

(91) Project [codegen id : 47]
Output [4]: [ws_quantity#56, ws_list_price#57, c_first_name#68, c_last_name#69]
Input [6]: [ws_quantity#56, ws_list_price#57, ws_sold_date_sk#58, c_first_name#68, c_last_name#69, d_date_sk#70]

(92) HashAggregate [codegen id : 47]
Input [4]: [ws_quantity#56, ws_list_price#57, c_first_name#68, c_last_name#69]
Keys [2]: [c_last_name#69, c_first_name#68]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#56 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#57 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#71, isEmpty#72]
Results [4]: [c_last_name#69, c_first_name#68, sum#73, isEmpty#74]

(93) Exchange
Input [4]: [c_last_name#69, c_first_name#68, sum#73, isEmpty#74]
Arguments: hashpartitioning(c_last_name#69, c_first_name#68, 5), ENSURE_REQUIREMENTS, [id=#75]

(94) HashAggregate [codegen id : 48]
Input [4]: [c_last_name#69, c_first_name#68, sum#73, isEmpty#74]
Keys [2]: [c_last_name#69, c_first_name#68]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#56 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#57 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#56 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#57 as decimal(12,2)))), DecimalType(18,2), true))#76]
Results [3]: [c_last_name#69, c_first_name#68, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#56 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#57 as decimal(12,2)))), DecimalType(18,2), true))#76 AS sales#77]

(95) Union

(96) TakeOrderedAndProject
Input [3]: [c_last_name#42, c_first_name#41, sales#53]
Arguments: 100, [c_last_name#42 ASC NULLS FIRST, c_first_name#41 ASC NULLS FIRST, sales#53 ASC NULLS FIRST], [c_last_name#42, c_first_name#41, sales#53]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (101)
+- * Project (100)
   +- * Filter (99)
      +- * ColumnarToRow (98)
         +- Scan parquet default.date_dim (97)


(97) Scan parquet default.date_dim
Output [3]: [d_date_sk#46, d_year#78, d_moy#79]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(98) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#46, d_year#78, d_moy#79]

(99) Filter [codegen id : 1]
Input [3]: [d_date_sk#46, d_year#78, d_moy#79]
Condition : ((((isnotnull(d_year#78) AND isnotnull(d_moy#79)) AND (d_year#78 = 2000)) AND (d_moy#79 = 2)) AND isnotnull(d_date_sk#46))

(100) Project [codegen id : 1]
Output [1]: [d_date_sk#46]
Input [3]: [d_date_sk#46, d_year#78, d_moy#79]

(101) BroadcastExchange
Input [1]: [d_date_sk#46]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#80]

Subquery:2 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (106)
+- * Project (105)
   +- * Filter (104)
      +- * ColumnarToRow (103)
         +- Scan parquet default.date_dim (102)


(102) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_date#11, d_year#81]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(103) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#10, d_date#11, d_year#81]

(104) Filter [codegen id : 1]
Input [3]: [d_date_sk#10, d_date#11, d_year#81]
Condition : (d_year#81 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#10))

(105) Project [codegen id : 1]
Output [2]: [d_date_sk#10, d_date#11]
Input [3]: [d_date_sk#10, d_date#11, d_year#81]

(106) BroadcastExchange
Input [2]: [d_date_sk#10, d_date#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#82]

Subquery:3 Hosting operator id = 39 Hosting Expression = Subquery scalar-subquery#37, [id=#38]
* HashAggregate (121)
+- Exchange (120)
   +- * HashAggregate (119)
      +- * HashAggregate (118)
         +- Exchange (117)
            +- * HashAggregate (116)
               +- * Project (115)
                  +- * BroadcastHashJoin Inner BuildRight (114)
                     :- * Project (112)
                     :  +- * BroadcastHashJoin Inner BuildRight (111)
                     :     :- * Filter (109)
                     :     :  +- * ColumnarToRow (108)
                     :     :     +- Scan parquet default.store_sales (107)
                     :     +- ReusedExchange (110)
                     +- ReusedExchange (113)


(107) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#83, ss_quantity#84, ss_sales_price#85, ss_sold_date_sk#86]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#86), dynamicpruningexpression(ss_sold_date_sk#86 IN dynamicpruning#87)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(108) ColumnarToRow [codegen id : 3]
Input [4]: [ss_customer_sk#83, ss_quantity#84, ss_sales_price#85, ss_sold_date_sk#86]

(109) Filter [codegen id : 3]
Input [4]: [ss_customer_sk#83, ss_quantity#84, ss_sales_price#85, ss_sold_date_sk#86]
Condition : isnotnull(ss_customer_sk#83)

(110) ReusedExchange [Reuses operator id: 33]
Output [1]: [c_customer_sk#88]

(111) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_customer_sk#83]
Right keys [1]: [c_customer_sk#88]
Join condition: None

(112) Project [codegen id : 3]
Output [4]: [ss_quantity#84, ss_sales_price#85, ss_sold_date_sk#86, c_customer_sk#88]
Input [5]: [ss_customer_sk#83, ss_quantity#84, ss_sales_price#85, ss_sold_date_sk#86, c_customer_sk#88]

(113) ReusedExchange [Reuses operator id: 126]
Output [1]: [d_date_sk#89]

(114) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#86]
Right keys [1]: [d_date_sk#89]
Join condition: None

(115) Project [codegen id : 3]
Output [3]: [ss_quantity#84, ss_sales_price#85, c_customer_sk#88]
Input [5]: [ss_quantity#84, ss_sales_price#85, ss_sold_date_sk#86, c_customer_sk#88, d_date_sk#89]

(116) HashAggregate [codegen id : 3]
Input [3]: [ss_quantity#84, ss_sales_price#85, c_customer_sk#88]
Keys [1]: [c_customer_sk#88]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#84 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#85 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#90, isEmpty#91]
Results [3]: [c_customer_sk#88, sum#92, isEmpty#93]

(117) Exchange
Input [3]: [c_customer_sk#88, sum#92, isEmpty#93]
Arguments: hashpartitioning(c_customer_sk#88, 5), ENSURE_REQUIREMENTS, [id=#94]

(118) HashAggregate [codegen id : 4]
Input [3]: [c_customer_sk#88, sum#92, isEmpty#93]
Keys [1]: [c_customer_sk#88]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#84 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#85 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#84 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#85 as decimal(12,2)))), DecimalType(18,2), true))#95]
Results [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#84 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#85 as decimal(12,2)))), DecimalType(18,2), true))#95 AS csales#96]

(119) HashAggregate [codegen id : 4]
Input [1]: [csales#96]
Keys: []
Functions [1]: [partial_max(csales#96)]
Aggregate Attributes [1]: [max#97]
Results [1]: [max#98]

(120) Exchange
Input [1]: [max#98]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#99]

(121) HashAggregate [codegen id : 5]
Input [1]: [max#98]
Keys: []
Functions [1]: [max(csales#96)]
Aggregate Attributes [1]: [max(csales#96)#100]
Results [1]: [max(csales#96)#100 AS tpcds_cmax#101]

Subquery:4 Hosting operator id = 107 Hosting Expression = ss_sold_date_sk#86 IN dynamicpruning#87
BroadcastExchange (126)
+- * Project (125)
   +- * Filter (124)
      +- * ColumnarToRow (123)
         +- Scan parquet default.date_dim (122)


(122) Scan parquet default.date_dim
Output [2]: [d_date_sk#89, d_year#102]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(123) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#89, d_year#102]

(124) Filter [codegen id : 1]
Input [2]: [d_date_sk#89, d_year#102]
Condition : (d_year#102 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#89))

(125) Project [codegen id : 1]
Output [1]: [d_date_sk#89]
Input [2]: [d_date_sk#89, d_year#102]

(126) BroadcastExchange
Input [1]: [d_date_sk#89]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#103]

Subquery:5 Hosting operator id = 53 Hosting Expression = ReusedSubquery Subquery scalar-subquery#37, [id=#38]

Subquery:6 Hosting operator id = 69 Hosting Expression = ws_sold_date_sk#58 IN dynamicpruning#6

Subquery:7 Hosting operator id = 79 Hosting Expression = ReusedSubquery Subquery scalar-subquery#37, [id=#38]


