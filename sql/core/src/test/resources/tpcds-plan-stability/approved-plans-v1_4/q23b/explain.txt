== Physical Plan ==
TakeOrderedAndProject (79)
+- Union (78)
   :- * HashAggregate (54)
   :  +- Exchange (53)
   :     +- * HashAggregate (52)
   :        +- * Project (51)
   :           +- * BroadcastHashJoin Inner BuildRight (50)
   :              :- * Project (48)
   :              :  +- * BroadcastHashJoin Inner BuildRight (47)
   :              :     :- * SortMergeJoin LeftSemi (42)
   :              :     :  :- * Sort (25)
   :              :     :  :  +- Exchange (24)
   :              :     :  :     +- * Project (23)
   :              :     :  :        +- * BroadcastHashJoin LeftSemi BuildRight (22)
   :              :     :  :           :- * Filter (3)
   :              :     :  :           :  +- * ColumnarToRow (2)
   :              :     :  :           :     +- Scan parquet default.catalog_sales (1)
   :              :     :  :           +- BroadcastExchange (21)
   :              :     :  :              +- * Project (20)
   :              :     :  :                 +- * Filter (19)
   :              :     :  :                    +- * HashAggregate (18)
   :              :     :  :                       +- Exchange (17)
   :              :     :  :                          +- * HashAggregate (16)
   :              :     :  :                             +- * Project (15)
   :              :     :  :                                +- * BroadcastHashJoin Inner BuildRight (14)
   :              :     :  :                                   :- * Project (9)
   :              :     :  :                                   :  +- * BroadcastHashJoin Inner BuildRight (8)
   :              :     :  :                                   :     :- * Filter (6)
   :              :     :  :                                   :     :  +- * ColumnarToRow (5)
   :              :     :  :                                   :     :     +- Scan parquet default.store_sales (4)
   :              :     :  :                                   :     +- ReusedExchange (7)
   :              :     :  :                                   +- BroadcastExchange (13)
   :              :     :  :                                      +- * Filter (12)
   :              :     :  :                                         +- * ColumnarToRow (11)
   :              :     :  :                                            +- Scan parquet default.item (10)
   :              :     :  +- * Sort (41)
   :              :     :     +- * Project (40)
   :              :     :        +- * Filter (39)
   :              :     :           +- * HashAggregate (38)
   :              :     :              +- Exchange (37)
   :              :     :                 +- * HashAggregate (36)
   :              :     :                    +- * Project (35)
   :              :     :                       +- * BroadcastHashJoin Inner BuildRight (34)
   :              :     :                          :- * Project (29)
   :              :     :                          :  +- * Filter (28)
   :              :     :                          :     +- * ColumnarToRow (27)
   :              :     :                          :        +- Scan parquet default.store_sales (26)
   :              :     :                          +- BroadcastExchange (33)
   :              :     :                             +- * Filter (32)
   :              :     :                                +- * ColumnarToRow (31)
   :              :     :                                   +- Scan parquet default.customer (30)
   :              :     +- BroadcastExchange (46)
   :              :        +- * Filter (45)
   :              :           +- * ColumnarToRow (44)
   :              :              +- Scan parquet default.customer (43)
   :              +- ReusedExchange (49)
   +- * HashAggregate (77)
      +- Exchange (76)
         +- * HashAggregate (75)
            +- * Project (74)
               +- * BroadcastHashJoin Inner BuildRight (73)
                  :- * Project (71)
                  :  +- * BroadcastHashJoin Inner BuildRight (70)
                  :     :- * SortMergeJoin LeftSemi (68)
                  :     :  :- * Sort (62)
                  :     :  :  +- Exchange (61)
                  :     :  :     +- * Project (60)
                  :     :  :        +- * BroadcastHashJoin LeftSemi BuildRight (59)
                  :     :  :           :- * Filter (57)
                  :     :  :           :  +- * ColumnarToRow (56)
                  :     :  :           :     +- Scan parquet default.web_sales (55)
                  :     :  :           +- ReusedExchange (58)
                  :     :  +- * Sort (67)
                  :     :     +- * Project (66)
                  :     :        +- * Filter (65)
                  :     :           +- * HashAggregate (64)
                  :     :              +- ReusedExchange (63)
                  :     +- ReusedExchange (69)
                  +- ReusedExchange (72)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(3) Filter [codegen id : 5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Condition : isnotnull(cs_bill_customer_sk#1)

(4) Scan parquet default.store_sales
Output [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(5) ColumnarToRow [codegen id : 3]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]

(6) Filter [codegen id : 3]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Condition : isnotnull(ss_item_sk#7)

(7) ReusedExchange [Reuses operator id: 89]
Output [2]: [d_date_sk#10, d_date#11]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#10]
Join condition: None

(9) Project [codegen id : 3]
Output [2]: [ss_item_sk#7, d_date#11]
Input [4]: [ss_item_sk#7, ss_sold_date_sk#8, d_date_sk#10, d_date#11]

(10) Scan parquet default.item
Output [2]: [i_item_sk#12, i_item_desc#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(11) ColumnarToRow [codegen id : 2]
Input [2]: [i_item_sk#12, i_item_desc#13]

(12) Filter [codegen id : 2]
Input [2]: [i_item_sk#12, i_item_desc#13]
Condition : isnotnull(i_item_sk#12)

(13) BroadcastExchange
Input [2]: [i_item_sk#12, i_item_desc#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14]

(14) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#7]
Right keys [1]: [i_item_sk#12]
Join condition: None

(15) Project [codegen id : 3]
Output [3]: [d_date#11, i_item_sk#12, substr(i_item_desc#13, 1, 30) AS _groupingexpression#15]
Input [4]: [ss_item_sk#7, d_date#11, i_item_sk#12, i_item_desc#13]

(16) HashAggregate [codegen id : 3]
Input [3]: [d_date#11, i_item_sk#12, _groupingexpression#15]
Keys [3]: [_groupingexpression#15, i_item_sk#12, d_date#11]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#16]
Results [4]: [_groupingexpression#15, i_item_sk#12, d_date#11, count#17]

(17) Exchange
Input [4]: [_groupingexpression#15, i_item_sk#12, d_date#11, count#17]
Arguments: hashpartitioning(_groupingexpression#15, i_item_sk#12, d_date#11, 5), ENSURE_REQUIREMENTS, [id=#18]

(18) HashAggregate [codegen id : 4]
Input [4]: [_groupingexpression#15, i_item_sk#12, d_date#11, count#17]
Keys [3]: [_groupingexpression#15, i_item_sk#12, d_date#11]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#19]
Results [2]: [i_item_sk#12 AS item_sk#20, count(1)#19 AS cnt#21]

(19) Filter [codegen id : 4]
Input [2]: [item_sk#20, cnt#21]
Condition : (cnt#21 > 4)

(20) Project [codegen id : 4]
Output [1]: [item_sk#20]
Input [2]: [item_sk#20, cnt#21]

(21) BroadcastExchange
Input [1]: [item_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22]

(22) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#20]
Join condition: None

(23) Project [codegen id : 5]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(24) Exchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#23]

(25) Sort [codegen id : 6]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(26) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(27) ColumnarToRow [codegen id : 8]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]

(28) Filter [codegen id : 8]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]
Condition : isnotnull(ss_customer_sk#24)

(29) Project [codegen id : 8]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]

(30) Scan parquet default.customer
Output [1]: [c_customer_sk#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(31) ColumnarToRow [codegen id : 7]
Input [1]: [c_customer_sk#28]

(32) Filter [codegen id : 7]
Input [1]: [c_customer_sk#28]
Condition : isnotnull(c_customer_sk#28)

(33) BroadcastExchange
Input [1]: [c_customer_sk#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(34) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#28]
Join condition: None

(35) Project [codegen id : 8]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#28]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#28]

(36) HashAggregate [codegen id : 8]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#28]
Keys [1]: [c_customer_sk#28]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#30, isEmpty#31]
Results [3]: [c_customer_sk#28, sum#32, isEmpty#33]

(37) Exchange
Input [3]: [c_customer_sk#28, sum#32, isEmpty#33]
Arguments: hashpartitioning(c_customer_sk#28, 5), ENSURE_REQUIREMENTS, [id=#34]

(38) HashAggregate [codegen id : 9]
Input [3]: [c_customer_sk#28, sum#32, isEmpty#33]
Keys [1]: [c_customer_sk#28]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35]
Results [2]: [c_customer_sk#28, sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35 AS ssales#36]

(39) Filter [codegen id : 9]
Input [2]: [c_customer_sk#28, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8))))

(40) Project [codegen id : 9]
Output [1]: [c_customer_sk#28]
Input [2]: [c_customer_sk#28, ssales#36]

(41) Sort [codegen id : 9]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(42) SortMergeJoin [codegen id : 12]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#28]
Join condition: None

(43) Scan parquet default.customer
Output [3]: [c_customer_sk#39, c_first_name#40, c_last_name#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(44) ColumnarToRow [codegen id : 10]
Input [3]: [c_customer_sk#39, c_first_name#40, c_last_name#41]

(45) Filter [codegen id : 10]
Input [3]: [c_customer_sk#39, c_first_name#40, c_last_name#41]
Condition : isnotnull(c_customer_sk#39)

(46) BroadcastExchange
Input [3]: [c_customer_sk#39, c_first_name#40, c_last_name#41]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#42]

(47) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#39]
Join condition: None

(48) Project [codegen id : 12]
Output [5]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_first_name#40, c_last_name#41]
Input [7]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_customer_sk#39, c_first_name#40, c_last_name#41]

(49) ReusedExchange [Reuses operator id: 84]
Output [1]: [d_date_sk#43]

(50) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#43]
Join condition: None

(51) Project [codegen id : 12]
Output [4]: [cs_quantity#3, cs_list_price#4, c_first_name#40, c_last_name#41]
Input [6]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_first_name#40, c_last_name#41, d_date_sk#43]

(52) HashAggregate [codegen id : 12]
Input [4]: [cs_quantity#3, cs_list_price#4, c_first_name#40, c_last_name#41]
Keys [2]: [c_last_name#41, c_first_name#40]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cs_quantity#3 as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#44, isEmpty#45]
Results [4]: [c_last_name#41, c_first_name#40, sum#46, isEmpty#47]

(53) Exchange
Input [4]: [c_last_name#41, c_first_name#40, sum#46, isEmpty#47]
Arguments: hashpartitioning(c_last_name#41, c_first_name#40, 5), ENSURE_REQUIREMENTS, [id=#48]

(54) HashAggregate [codegen id : 13]
Input [4]: [c_last_name#41, c_first_name#40, sum#46, isEmpty#47]
Keys [2]: [c_last_name#41, c_first_name#40]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cs_quantity#3 as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cs_quantity#3 as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2)))#49]
Results [3]: [c_last_name#41, c_first_name#40, sum(CheckOverflow((promote_precision(cast(cs_quantity#3 as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2)))#49 AS sales#50]

(55) Scan parquet default.web_sales
Output [5]: [ws_item_sk#51, ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#55), dynamicpruningexpression(ws_sold_date_sk#55 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(56) ColumnarToRow [codegen id : 18]
Input [5]: [ws_item_sk#51, ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]

(57) Filter [codegen id : 18]
Input [5]: [ws_item_sk#51, ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Condition : isnotnull(ws_bill_customer_sk#52)

(58) ReusedExchange [Reuses operator id: 21]
Output [1]: [item_sk#20]

(59) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [ws_item_sk#51]
Right keys [1]: [item_sk#20]
Join condition: None

(60) Project [codegen id : 18]
Output [4]: [ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Input [5]: [ws_item_sk#51, ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]

(61) Exchange
Input [4]: [ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Arguments: hashpartitioning(ws_bill_customer_sk#52, 5), ENSURE_REQUIREMENTS, [id=#56]

(62) Sort [codegen id : 19]
Input [4]: [ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Arguments: [ws_bill_customer_sk#52 ASC NULLS FIRST], false, 0

(63) ReusedExchange [Reuses operator id: 37]
Output [3]: [c_customer_sk#28, sum#57, isEmpty#58]

(64) HashAggregate [codegen id : 22]
Input [3]: [c_customer_sk#28, sum#57, isEmpty#58]
Keys [1]: [c_customer_sk#28]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35]
Results [2]: [c_customer_sk#28, sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35 AS ssales#36]

(65) Filter [codegen id : 22]
Input [2]: [c_customer_sk#28, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8))))

(66) Project [codegen id : 22]
Output [1]: [c_customer_sk#28]
Input [2]: [c_customer_sk#28, ssales#36]

(67) Sort [codegen id : 22]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(68) SortMergeJoin [codegen id : 25]
Left keys [1]: [ws_bill_customer_sk#52]
Right keys [1]: [c_customer_sk#28]
Join condition: None

(69) ReusedExchange [Reuses operator id: 46]
Output [3]: [c_customer_sk#59, c_first_name#60, c_last_name#61]

(70) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ws_bill_customer_sk#52]
Right keys [1]: [c_customer_sk#59]
Join condition: None

(71) Project [codegen id : 25]
Output [5]: [ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55, c_first_name#60, c_last_name#61]
Input [7]: [ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55, c_customer_sk#59, c_first_name#60, c_last_name#61]

(72) ReusedExchange [Reuses operator id: 84]
Output [1]: [d_date_sk#62]

(73) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ws_sold_date_sk#55]
Right keys [1]: [d_date_sk#62]
Join condition: None

(74) Project [codegen id : 25]
Output [4]: [ws_quantity#53, ws_list_price#54, c_first_name#60, c_last_name#61]
Input [6]: [ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55, c_first_name#60, c_last_name#61, d_date_sk#62]

(75) HashAggregate [codegen id : 25]
Input [4]: [ws_quantity#53, ws_list_price#54, c_first_name#60, c_last_name#61]
Keys [2]: [c_last_name#61, c_first_name#60]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(ws_quantity#53 as decimal(12,2))) * promote_precision(cast(ws_list_price#54 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#63, isEmpty#64]
Results [4]: [c_last_name#61, c_first_name#60, sum#65, isEmpty#66]

(76) Exchange
Input [4]: [c_last_name#61, c_first_name#60, sum#65, isEmpty#66]
Arguments: hashpartitioning(c_last_name#61, c_first_name#60, 5), ENSURE_REQUIREMENTS, [id=#67]

(77) HashAggregate [codegen id : 26]
Input [4]: [c_last_name#61, c_first_name#60, sum#65, isEmpty#66]
Keys [2]: [c_last_name#61, c_first_name#60]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(ws_quantity#53 as decimal(12,2))) * promote_precision(cast(ws_list_price#54 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(ws_quantity#53 as decimal(12,2))) * promote_precision(cast(ws_list_price#54 as decimal(12,2)))), DecimalType(18,2)))#68]
Results [3]: [c_last_name#61, c_first_name#60, sum(CheckOverflow((promote_precision(cast(ws_quantity#53 as decimal(12,2))) * promote_precision(cast(ws_list_price#54 as decimal(12,2)))), DecimalType(18,2)))#68 AS sales#69]

(78) Union

(79) TakeOrderedAndProject
Input [3]: [c_last_name#41, c_first_name#40, sales#50]
Arguments: 100, [c_last_name#41 ASC NULLS FIRST, c_first_name#40 ASC NULLS FIRST, sales#50 ASC NULLS FIRST], [c_last_name#41, c_first_name#40, sales#50]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (84)
+- * Project (83)
   +- * Filter (82)
      +- * ColumnarToRow (81)
         +- Scan parquet default.date_dim (80)


(80) Scan parquet default.date_dim
Output [3]: [d_date_sk#43, d_year#70, d_moy#71]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(81) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#43, d_year#70, d_moy#71]

(82) Filter [codegen id : 1]
Input [3]: [d_date_sk#43, d_year#70, d_moy#71]
Condition : ((((isnotnull(d_year#70) AND isnotnull(d_moy#71)) AND (d_year#70 = 2000)) AND (d_moy#71 = 2)) AND isnotnull(d_date_sk#43))

(83) Project [codegen id : 1]
Output [1]: [d_date_sk#43]
Input [3]: [d_date_sk#43, d_year#70, d_moy#71]

(84) BroadcastExchange
Input [1]: [d_date_sk#43]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#72]

Subquery:2 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (89)
+- * Project (88)
   +- * Filter (87)
      +- * ColumnarToRow (86)
         +- Scan parquet default.date_dim (85)


(85) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_date#11, d_year#73]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(86) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#10, d_date#11, d_year#73]

(87) Filter [codegen id : 1]
Input [3]: [d_date_sk#10, d_date#11, d_year#73]
Condition : (d_year#73 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#10))

(88) Project [codegen id : 1]
Output [2]: [d_date_sk#10, d_date#11]
Input [3]: [d_date_sk#10, d_date#11, d_year#73]

(89) BroadcastExchange
Input [2]: [d_date_sk#10, d_date#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#74]

Subquery:3 Hosting operator id = 39 Hosting Expression = Subquery scalar-subquery#37, [id=#38]
* HashAggregate (104)
+- Exchange (103)
   +- * HashAggregate (102)
      +- * HashAggregate (101)
         +- Exchange (100)
            +- * HashAggregate (99)
               +- * Project (98)
                  +- * BroadcastHashJoin Inner BuildRight (97)
                     :- * Project (95)
                     :  +- * BroadcastHashJoin Inner BuildRight (94)
                     :     :- * Filter (92)
                     :     :  +- * ColumnarToRow (91)
                     :     :     +- Scan parquet default.store_sales (90)
                     :     +- ReusedExchange (93)
                     +- ReusedExchange (96)


(90) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#75, ss_quantity#76, ss_sales_price#77, ss_sold_date_sk#78]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#78), dynamicpruningexpression(ss_sold_date_sk#78 IN dynamicpruning#79)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(91) ColumnarToRow [codegen id : 3]
Input [4]: [ss_customer_sk#75, ss_quantity#76, ss_sales_price#77, ss_sold_date_sk#78]

(92) Filter [codegen id : 3]
Input [4]: [ss_customer_sk#75, ss_quantity#76, ss_sales_price#77, ss_sold_date_sk#78]
Condition : isnotnull(ss_customer_sk#75)

(93) ReusedExchange [Reuses operator id: 33]
Output [1]: [c_customer_sk#80]

(94) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_customer_sk#75]
Right keys [1]: [c_customer_sk#80]
Join condition: None

(95) Project [codegen id : 3]
Output [4]: [ss_quantity#76, ss_sales_price#77, ss_sold_date_sk#78, c_customer_sk#80]
Input [5]: [ss_customer_sk#75, ss_quantity#76, ss_sales_price#77, ss_sold_date_sk#78, c_customer_sk#80]

(96) ReusedExchange [Reuses operator id: 109]
Output [1]: [d_date_sk#81]

(97) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#78]
Right keys [1]: [d_date_sk#81]
Join condition: None

(98) Project [codegen id : 3]
Output [3]: [ss_quantity#76, ss_sales_price#77, c_customer_sk#80]
Input [5]: [ss_quantity#76, ss_sales_price#77, ss_sold_date_sk#78, c_customer_sk#80, d_date_sk#81]

(99) HashAggregate [codegen id : 3]
Input [3]: [ss_quantity#76, ss_sales_price#77, c_customer_sk#80]
Keys [1]: [c_customer_sk#80]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#76 as decimal(12,2))) * promote_precision(cast(ss_sales_price#77 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#82, isEmpty#83]
Results [3]: [c_customer_sk#80, sum#84, isEmpty#85]

(100) Exchange
Input [3]: [c_customer_sk#80, sum#84, isEmpty#85]
Arguments: hashpartitioning(c_customer_sk#80, 5), ENSURE_REQUIREMENTS, [id=#86]

(101) HashAggregate [codegen id : 4]
Input [3]: [c_customer_sk#80, sum#84, isEmpty#85]
Keys [1]: [c_customer_sk#80]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#76 as decimal(12,2))) * promote_precision(cast(ss_sales_price#77 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#76 as decimal(12,2))) * promote_precision(cast(ss_sales_price#77 as decimal(12,2)))), DecimalType(18,2)))#87]
Results [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#76 as decimal(12,2))) * promote_precision(cast(ss_sales_price#77 as decimal(12,2)))), DecimalType(18,2)))#87 AS csales#88]

(102) HashAggregate [codegen id : 4]
Input [1]: [csales#88]
Keys: []
Functions [1]: [partial_max(csales#88)]
Aggregate Attributes [1]: [max#89]
Results [1]: [max#90]

(103) Exchange
Input [1]: [max#90]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#91]

(104) HashAggregate [codegen id : 5]
Input [1]: [max#90]
Keys: []
Functions [1]: [max(csales#88)]
Aggregate Attributes [1]: [max(csales#88)#92]
Results [1]: [max(csales#88)#92 AS tpcds_cmax#93]

Subquery:4 Hosting operator id = 90 Hosting Expression = ss_sold_date_sk#78 IN dynamicpruning#79
BroadcastExchange (109)
+- * Project (108)
   +- * Filter (107)
      +- * ColumnarToRow (106)
         +- Scan parquet default.date_dim (105)


(105) Scan parquet default.date_dim
Output [2]: [d_date_sk#81, d_year#94]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(106) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#81, d_year#94]

(107) Filter [codegen id : 1]
Input [2]: [d_date_sk#81, d_year#94]
Condition : (d_year#94 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#81))

(108) Project [codegen id : 1]
Output [1]: [d_date_sk#81]
Input [2]: [d_date_sk#81, d_year#94]

(109) BroadcastExchange
Input [1]: [d_date_sk#81]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#95]

Subquery:5 Hosting operator id = 55 Hosting Expression = ws_sold_date_sk#55 IN dynamicpruning#6

Subquery:6 Hosting operator id = 65 Hosting Expression = ReusedSubquery Subquery scalar-subquery#37, [id=#38]


