== Physical Plan ==
TakeOrderedAndProject (100)
+- Union (99)
   :- * HashAggregate (67)
   :  +- Exchange (66)
   :     +- * HashAggregate (65)
   :        +- * Project (64)
   :           +- * BroadcastHashJoin Inner BuildRight (63)
   :              :- * Project (57)
   :              :  +- * BroadcastHashJoin Inner BuildRight (56)
   :              :     :- * BroadcastHashJoin LeftSemi BuildRight (44)
   :              :     :  :- * Project (28)
   :              :     :  :  +- * BroadcastHashJoin LeftSemi BuildRight (27)
   :              :     :  :     :- * Filter (3)
   :              :     :  :     :  +- * ColumnarToRow (2)
   :              :     :  :     :     +- Scan parquet default.catalog_sales (1)
   :              :     :  :     +- BroadcastExchange (26)
   :              :     :  :        +- * Project (25)
   :              :     :  :           +- * Filter (24)
   :              :     :  :              +- * HashAggregate (23)
   :              :     :  :                 +- Exchange (22)
   :              :     :  :                    +- * HashAggregate (21)
   :              :     :  :                       +- * Project (20)
   :              :     :  :                          +- * BroadcastHashJoin Inner BuildRight (19)
   :              :     :  :                             :- * Project (13)
   :              :     :  :                             :  +- * BroadcastHashJoin Inner BuildRight (12)
   :              :     :  :                             :     :- * Filter (6)
   :              :     :  :                             :     :  +- * ColumnarToRow (5)
   :              :     :  :                             :     :     +- Scan parquet default.store_sales (4)
   :              :     :  :                             :     +- BroadcastExchange (11)
   :              :     :  :                             :        +- * Project (10)
   :              :     :  :                             :           +- * Filter (9)
   :              :     :  :                             :              +- * ColumnarToRow (8)
   :              :     :  :                             :                 +- Scan parquet default.date_dim (7)
   :              :     :  :                             +- BroadcastExchange (18)
   :              :     :  :                                +- * Project (17)
   :              :     :  :                                   +- * Filter (16)
   :              :     :  :                                      +- * ColumnarToRow (15)
   :              :     :  :                                         +- Scan parquet default.item (14)
   :              :     :  +- BroadcastExchange (43)
   :              :     :     +- * Project (42)
   :              :     :        +- * Filter (41)
   :              :     :           +- * HashAggregate (40)
   :              :     :              +- Exchange (39)
   :              :     :                 +- * HashAggregate (38)
   :              :     :                    +- * Project (37)
   :              :     :                       +- * BroadcastHashJoin Inner BuildRight (36)
   :              :     :                          :- * Filter (31)
   :              :     :                          :  +- * ColumnarToRow (30)
   :              :     :                          :     +- Scan parquet default.store_sales (29)
   :              :     :                          +- BroadcastExchange (35)
   :              :     :                             +- * Filter (34)
   :              :     :                                +- * ColumnarToRow (33)
   :              :     :                                   +- Scan parquet default.customer (32)
   :              :     +- BroadcastExchange (55)
   :              :        +- * BroadcastHashJoin LeftSemi BuildRight (54)
   :              :           :- * Project (48)
   :              :           :  +- * Filter (47)
   :              :           :     +- * ColumnarToRow (46)
   :              :           :        +- Scan parquet default.customer (45)
   :              :           +- BroadcastExchange (53)
   :              :              +- * Project (52)
   :              :                 +- * Filter (51)
   :              :                    +- * HashAggregate (50)
   :              :                       +- ReusedExchange (49)
   :              +- BroadcastExchange (62)
   :                 +- * Project (61)
   :                    +- * Filter (60)
   :                       +- * ColumnarToRow (59)
   :                          +- Scan parquet default.date_dim (58)
   +- * HashAggregate (98)
      +- Exchange (97)
         +- * HashAggregate (96)
            +- * Project (95)
               +- * BroadcastHashJoin Inner BuildRight (94)
                  :- * Project (92)
                  :  +- * BroadcastHashJoin Inner BuildRight (91)
                  :     :- * BroadcastHashJoin LeftSemi BuildRight (79)
                  :     :  :- * Project (73)
                  :     :  :  +- * BroadcastHashJoin LeftSemi BuildRight (72)
                  :     :  :     :- * Filter (70)
                  :     :  :     :  +- * ColumnarToRow (69)
                  :     :  :     :     +- Scan parquet default.web_sales (68)
                  :     :  :     +- ReusedExchange (71)
                  :     :  +- BroadcastExchange (78)
                  :     :     +- * Project (77)
                  :     :        +- * Filter (76)
                  :     :           +- * HashAggregate (75)
                  :     :              +- ReusedExchange (74)
                  :     +- BroadcastExchange (90)
                  :        +- * BroadcastHashJoin LeftSemi BuildRight (89)
                  :           :- * Project (83)
                  :           :  +- * Filter (82)
                  :           :     +- * ColumnarToRow (81)
                  :           :        +- Scan parquet default.customer (80)
                  :           +- BroadcastExchange (88)
                  :              +- * Project (87)
                  :                 +- * Filter (86)
                  :                    +- * HashAggregate (85)
                  :                       +- ReusedExchange (84)
                  +- ReusedExchange (93)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 13]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]

(3) Filter [codegen id : 13]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Condition : (isnotnull(cs_bill_customer_sk#2) AND isnotnull(cs_sold_date_sk#1))

(4) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#6, ss_item_sk#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(5) ColumnarToRow [codegen id : 3]
Input [2]: [ss_sold_date_sk#6, ss_item_sk#7]

(6) Filter [codegen id : 3]
Input [2]: [ss_sold_date_sk#6, ss_item_sk#7]
Condition : (isnotnull(ss_sold_date_sk#6) AND isnotnull(ss_item_sk#7))

(7) Scan parquet default.date_dim
Output [3]: [d_date_sk#8, d_date#9, d_year#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(8) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#8, d_date#9, d_year#10]

(9) Filter [codegen id : 1]
Input [3]: [d_date_sk#8, d_date#9, d_year#10]
Condition : (d_year#10 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#8))

(10) Project [codegen id : 1]
Output [2]: [d_date_sk#8, d_date#9]
Input [3]: [d_date_sk#8, d_date#9, d_year#10]

(11) BroadcastExchange
Input [2]: [d_date_sk#8, d_date#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#11]

(12) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#8]
Join condition: None

(13) Project [codegen id : 3]
Output [2]: [ss_item_sk#7, d_date#9]
Input [4]: [ss_sold_date_sk#6, ss_item_sk#7, d_date_sk#8, d_date#9]

(14) Scan parquet default.item
Output [2]: [i_item_sk#12, i_item_desc#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(15) ColumnarToRow [codegen id : 2]
Input [2]: [i_item_sk#12, i_item_desc#13]

(16) Filter [codegen id : 2]
Input [2]: [i_item_sk#12, i_item_desc#13]
Condition : isnotnull(i_item_sk#12)

(17) Project [codegen id : 2]
Output [2]: [i_item_sk#12, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, i_item_desc#13, 200, false, true) AS i_item_desc#14]
Input [2]: [i_item_sk#12, i_item_desc#13]

(18) BroadcastExchange
Input [2]: [i_item_sk#12, i_item_desc#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15]

(19) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#7]
Right keys [1]: [i_item_sk#12]
Join condition: None

(20) Project [codegen id : 3]
Output [3]: [d_date#9, i_item_sk#12, i_item_desc#14]
Input [4]: [ss_item_sk#7, d_date#9, i_item_sk#12, i_item_desc#14]

(21) HashAggregate [codegen id : 3]
Input [3]: [d_date#9, i_item_sk#12, i_item_desc#14]
Keys [3]: [substr(i_item_desc#14, 1, 30) AS substr(i_item_desc#14, 1, 30)#16, i_item_sk#12, d_date#9]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#17]
Results [4]: [substr(i_item_desc#14, 1, 30)#16, i_item_sk#12, d_date#9, count#18]

(22) Exchange
Input [4]: [substr(i_item_desc#14, 1, 30)#16, i_item_sk#12, d_date#9, count#18]
Arguments: hashpartitioning(substr(i_item_desc#14, 1, 30)#16, i_item_sk#12, d_date#9, 5), ENSURE_REQUIREMENTS, [id=#19]

(23) HashAggregate [codegen id : 4]
Input [4]: [substr(i_item_desc#14, 1, 30)#16, i_item_sk#12, d_date#9, count#18]
Keys [3]: [substr(i_item_desc#14, 1, 30)#16, i_item_sk#12, d_date#9]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#20]
Results [2]: [i_item_sk#12 AS item_sk#21, count(1)#20 AS count(1)#22]

(24) Filter [codegen id : 4]
Input [2]: [item_sk#21, count(1)#22]
Condition : (count(1)#22 > 4)

(25) Project [codegen id : 4]
Output [1]: [item_sk#21]
Input [2]: [item_sk#21, count(1)#22]

(26) BroadcastExchange
Input [1]: [item_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#23]

(27) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [item_sk#21]
Join condition: None

(28) Project [codegen id : 13]
Output [4]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]

(29) Scan parquet default.store_sales
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(30) ColumnarToRow [codegen id : 6]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]

(31) Filter [codegen id : 6]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Condition : isnotnull(ss_customer_sk#24)

(32) Scan parquet default.customer
Output [1]: [c_customer_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(33) ColumnarToRow [codegen id : 5]
Input [1]: [c_customer_sk#27]

(34) Filter [codegen id : 5]
Input [1]: [c_customer_sk#27]
Condition : isnotnull(c_customer_sk#27)

(35) BroadcastExchange
Input [1]: [c_customer_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28]

(36) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#27]
Join condition: None

(37) Project [codegen id : 6]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#27]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#27]

(38) HashAggregate [codegen id : 6]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#27]
Keys [1]: [c_customer_sk#27]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#29, isEmpty#30]
Results [3]: [c_customer_sk#27, sum#31, isEmpty#32]

(39) Exchange
Input [3]: [c_customer_sk#27, sum#31, isEmpty#32]
Arguments: hashpartitioning(c_customer_sk#27, 5), ENSURE_REQUIREMENTS, [id=#33]

(40) HashAggregate [codegen id : 7]
Input [3]: [c_customer_sk#27, sum#31, isEmpty#32]
Keys [1]: [c_customer_sk#27]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#34]
Results [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#34 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]

(41) Filter [codegen id : 7]
Input [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#36, [id=#37] as decimal(32,6)))), DecimalType(38,8), true)))

(42) Project [codegen id : 7]
Output [1]: [c_customer_sk#27]
Input [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]

(43) BroadcastExchange
Input [1]: [c_customer_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#38]

(44) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#27]
Join condition: None

(45) Scan parquet default.customer
Output [3]: [c_customer_sk#27, c_first_name#39, c_last_name#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(46) ColumnarToRow [codegen id : 11]
Input [3]: [c_customer_sk#27, c_first_name#39, c_last_name#40]

(47) Filter [codegen id : 11]
Input [3]: [c_customer_sk#27, c_first_name#39, c_last_name#40]
Condition : isnotnull(c_customer_sk#27)

(48) Project [codegen id : 11]
Output [3]: [c_customer_sk#27, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#39, 20, false, true) AS c_first_name#41, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#40, 30, false, true) AS c_last_name#42]
Input [3]: [c_customer_sk#27, c_first_name#39, c_last_name#40]

(49) ReusedExchange [Reuses operator id: 39]
Output [3]: [c_customer_sk#27, sum#31, isEmpty#32]

(50) HashAggregate [codegen id : 10]
Input [3]: [c_customer_sk#27, sum#31, isEmpty#32]
Keys [1]: [c_customer_sk#27]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#34]
Results [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#34 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]

(51) Filter [codegen id : 10]
Input [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#36, [id=#37] as decimal(32,6)))), DecimalType(38,8), true)))

(52) Project [codegen id : 10]
Output [1]: [c_customer_sk#27 AS c_customer_sk#27#43]
Input [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]

(53) BroadcastExchange
Input [1]: [c_customer_sk#27#43]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#44]

(54) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [c_customer_sk#27]
Right keys [1]: [c_customer_sk#27#43]
Join condition: None

(55) BroadcastExchange
Input [3]: [c_customer_sk#27, c_first_name#41, c_last_name#42]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#45]

(56) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#27]
Join condition: None

(57) Project [codegen id : 13]
Output [5]: [cs_sold_date_sk#1, cs_quantity#4, cs_list_price#5, c_first_name#41, c_last_name#42]
Input [7]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5, c_customer_sk#27, c_first_name#41, c_last_name#42]

(58) Scan parquet default.date_dim
Output [3]: [d_date_sk#8, d_year#10, d_moy#46]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(59) ColumnarToRow [codegen id : 12]
Input [3]: [d_date_sk#8, d_year#10, d_moy#46]

(60) Filter [codegen id : 12]
Input [3]: [d_date_sk#8, d_year#10, d_moy#46]
Condition : ((((isnotnull(d_year#10) AND isnotnull(d_moy#46)) AND (d_year#10 = 2000)) AND (d_moy#46 = 2)) AND isnotnull(d_date_sk#8))

(61) Project [codegen id : 12]
Output [1]: [d_date_sk#8]
Input [3]: [d_date_sk#8, d_year#10, d_moy#46]

(62) BroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#47]

(63) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#8]
Join condition: None

(64) Project [codegen id : 13]
Output [4]: [cs_quantity#4, cs_list_price#5, c_first_name#41, c_last_name#42]
Input [6]: [cs_sold_date_sk#1, cs_quantity#4, cs_list_price#5, c_first_name#41, c_last_name#42, d_date_sk#8]

(65) HashAggregate [codegen id : 13]
Input [4]: [cs_quantity#4, cs_list_price#5, c_first_name#41, c_last_name#42]
Keys [2]: [c_last_name#42, c_first_name#41]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#4 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#5 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#48, isEmpty#49]
Results [4]: [c_last_name#42, c_first_name#41, sum#50, isEmpty#51]

(66) Exchange
Input [4]: [c_last_name#42, c_first_name#41, sum#50, isEmpty#51]
Arguments: hashpartitioning(c_last_name#42, c_first_name#41, 5), ENSURE_REQUIREMENTS, [id=#52]

(67) HashAggregate [codegen id : 14]
Input [4]: [c_last_name#42, c_first_name#41, sum#50, isEmpty#51]
Keys [2]: [c_last_name#42, c_first_name#41]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#4 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#5 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#4 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#5 as decimal(12,2)))), DecimalType(18,2), true))#53]
Results [3]: [c_last_name#42, c_first_name#41, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#4 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#5 as decimal(12,2)))), DecimalType(18,2), true))#53 AS sales#54]

(68) Scan parquet default.web_sales
Output [5]: [ws_sold_date_sk#55, ws_item_sk#56, ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(69) ColumnarToRow [codegen id : 27]
Input [5]: [ws_sold_date_sk#55, ws_item_sk#56, ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59]

(70) Filter [codegen id : 27]
Input [5]: [ws_sold_date_sk#55, ws_item_sk#56, ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59]
Condition : (isnotnull(ws_bill_customer_sk#57) AND isnotnull(ws_sold_date_sk#55))

(71) ReusedExchange [Reuses operator id: 26]
Output [1]: [item_sk#21]

(72) BroadcastHashJoin [codegen id : 27]
Left keys [1]: [ws_item_sk#56]
Right keys [1]: [item_sk#21]
Join condition: None

(73) Project [codegen id : 27]
Output [4]: [ws_sold_date_sk#55, ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59]
Input [5]: [ws_sold_date_sk#55, ws_item_sk#56, ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59]

(74) ReusedExchange [Reuses operator id: 39]
Output [3]: [c_customer_sk#27, sum#60, isEmpty#61]

(75) HashAggregate [codegen id : 21]
Input [3]: [c_customer_sk#27, sum#60, isEmpty#61]
Keys [1]: [c_customer_sk#27]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#62]
Results [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#62 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#63]

(76) Filter [codegen id : 21]
Input [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#63]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#63) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#63 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#36, [id=#37] as decimal(32,6)))), DecimalType(38,8), true)))

(77) Project [codegen id : 21]
Output [1]: [c_customer_sk#27]
Input [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#63]

(78) BroadcastExchange
Input [1]: [c_customer_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#64]

(79) BroadcastHashJoin [codegen id : 27]
Left keys [1]: [ws_bill_customer_sk#57]
Right keys [1]: [c_customer_sk#27]
Join condition: None

(80) Scan parquet default.customer
Output [3]: [c_customer_sk#27, c_first_name#39, c_last_name#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(81) ColumnarToRow [codegen id : 25]
Input [3]: [c_customer_sk#27, c_first_name#39, c_last_name#40]

(82) Filter [codegen id : 25]
Input [3]: [c_customer_sk#27, c_first_name#39, c_last_name#40]
Condition : isnotnull(c_customer_sk#27)

(83) Project [codegen id : 25]
Output [3]: [c_customer_sk#27, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#39, 20, false, true) AS c_first_name#65, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#40, 30, false, true) AS c_last_name#66]
Input [3]: [c_customer_sk#27, c_first_name#39, c_last_name#40]

(84) ReusedExchange [Reuses operator id: 39]
Output [3]: [c_customer_sk#27, sum#60, isEmpty#61]

(85) HashAggregate [codegen id : 24]
Input [3]: [c_customer_sk#27, sum#60, isEmpty#61]
Keys [1]: [c_customer_sk#27]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#62]
Results [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#62 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#63]

(86) Filter [codegen id : 24]
Input [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#63]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#63) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#63 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#36, [id=#37] as decimal(32,6)))), DecimalType(38,8), true)))

(87) Project [codegen id : 24]
Output [1]: [c_customer_sk#27 AS c_customer_sk#27#67]
Input [2]: [c_customer_sk#27, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#63]

(88) BroadcastExchange
Input [1]: [c_customer_sk#27#67]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#68]

(89) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [c_customer_sk#27]
Right keys [1]: [c_customer_sk#27#67]
Join condition: None

(90) BroadcastExchange
Input [3]: [c_customer_sk#27, c_first_name#65, c_last_name#66]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#69]

(91) BroadcastHashJoin [codegen id : 27]
Left keys [1]: [ws_bill_customer_sk#57]
Right keys [1]: [c_customer_sk#27]
Join condition: None

(92) Project [codegen id : 27]
Output [5]: [ws_sold_date_sk#55, ws_quantity#58, ws_list_price#59, c_first_name#65, c_last_name#66]
Input [7]: [ws_sold_date_sk#55, ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59, c_customer_sk#27, c_first_name#65, c_last_name#66]

(93) ReusedExchange [Reuses operator id: 62]
Output [1]: [d_date_sk#8]

(94) BroadcastHashJoin [codegen id : 27]
Left keys [1]: [ws_sold_date_sk#55]
Right keys [1]: [d_date_sk#8]
Join condition: None

(95) Project [codegen id : 27]
Output [4]: [ws_quantity#58, ws_list_price#59, c_first_name#65, c_last_name#66]
Input [6]: [ws_sold_date_sk#55, ws_quantity#58, ws_list_price#59, c_first_name#65, c_last_name#66, d_date_sk#8]

(96) HashAggregate [codegen id : 27]
Input [4]: [ws_quantity#58, ws_list_price#59, c_first_name#65, c_last_name#66]
Keys [2]: [c_last_name#66, c_first_name#65]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#58 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#59 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#70, isEmpty#71]
Results [4]: [c_last_name#66, c_first_name#65, sum#72, isEmpty#73]

(97) Exchange
Input [4]: [c_last_name#66, c_first_name#65, sum#72, isEmpty#73]
Arguments: hashpartitioning(c_last_name#66, c_first_name#65, 5), ENSURE_REQUIREMENTS, [id=#74]

(98) HashAggregate [codegen id : 28]
Input [4]: [c_last_name#66, c_first_name#65, sum#72, isEmpty#73]
Keys [2]: [c_last_name#66, c_first_name#65]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#58 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#59 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#58 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#59 as decimal(12,2)))), DecimalType(18,2), true))#75]
Results [3]: [c_last_name#66 AS c_last_name#76, c_first_name#65 AS c_first_name#77, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#58 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#59 as decimal(12,2)))), DecimalType(18,2), true))#75 AS sales#78]

(99) Union

(100) TakeOrderedAndProject
Input [3]: [c_last_name#42, c_first_name#41, sales#54]
Arguments: 100, [c_last_name#42 ASC NULLS FIRST, c_first_name#41 ASC NULLS FIRST, sales#54 ASC NULLS FIRST], [c_last_name#42, c_first_name#41, sales#54]

===== Subqueries =====

Subquery:1 Hosting operator id = 41 Hosting Expression = Subquery scalar-subquery#36, [id=#37]
* HashAggregate (122)
+- Exchange (121)
   +- * HashAggregate (120)
      +- * HashAggregate (119)
         +- Exchange (118)
            +- * HashAggregate (117)
               +- * Project (116)
                  +- * BroadcastHashJoin Inner BuildRight (115)
                     :- * Project (109)
                     :  +- * BroadcastHashJoin Inner BuildRight (108)
                     :     :- * Filter (103)
                     :     :  +- * ColumnarToRow (102)
                     :     :     +- Scan parquet default.store_sales (101)
                     :     +- BroadcastExchange (107)
                     :        +- * Filter (106)
                     :           +- * ColumnarToRow (105)
                     :              +- Scan parquet default.customer (104)
                     +- BroadcastExchange (114)
                        +- * Project (113)
                           +- * Filter (112)
                              +- * ColumnarToRow (111)
                                 +- Scan parquet default.date_dim (110)


(101) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#6, ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(102) ColumnarToRow [codegen id : 3]
Input [4]: [ss_sold_date_sk#6, ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]

(103) Filter [codegen id : 3]
Input [4]: [ss_sold_date_sk#6, ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Condition : (isnotnull(ss_customer_sk#24) AND isnotnull(ss_sold_date_sk#6))

(104) Scan parquet default.customer
Output [1]: [c_customer_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(105) ColumnarToRow [codegen id : 1]
Input [1]: [c_customer_sk#27]

(106) Filter [codegen id : 1]
Input [1]: [c_customer_sk#27]
Condition : isnotnull(c_customer_sk#27)

(107) BroadcastExchange
Input [1]: [c_customer_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#79]

(108) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#27]
Join condition: None

(109) Project [codegen id : 3]
Output [4]: [ss_sold_date_sk#6, ss_quantity#25, ss_sales_price#26, c_customer_sk#27]
Input [5]: [ss_sold_date_sk#6, ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#27]

(110) Scan parquet default.date_dim
Output [2]: [d_date_sk#8, d_year#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(111) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#8, d_year#10]

(112) Filter [codegen id : 2]
Input [2]: [d_date_sk#8, d_year#10]
Condition : (d_year#10 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#8))

(113) Project [codegen id : 2]
Output [1]: [d_date_sk#8]
Input [2]: [d_date_sk#8, d_year#10]

(114) BroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#80]

(115) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#8]
Join condition: None

(116) Project [codegen id : 3]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#27]
Input [5]: [ss_sold_date_sk#6, ss_quantity#25, ss_sales_price#26, c_customer_sk#27, d_date_sk#8]

(117) HashAggregate [codegen id : 3]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#27]
Keys [1]: [c_customer_sk#27]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#81, isEmpty#82]
Results [3]: [c_customer_sk#27, sum#83, isEmpty#84]

(118) Exchange
Input [3]: [c_customer_sk#27, sum#83, isEmpty#84]
Arguments: hashpartitioning(c_customer_sk#27, 5), ENSURE_REQUIREMENTS, [id=#85]

(119) HashAggregate [codegen id : 4]
Input [3]: [c_customer_sk#27, sum#83, isEmpty#84]
Keys [1]: [c_customer_sk#27]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#86]
Results [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#86 AS csales#87]

(120) HashAggregate [codegen id : 4]
Input [1]: [csales#87]
Keys: []
Functions [1]: [partial_max(csales#87)]
Aggregate Attributes [1]: [max#88]
Results [1]: [max#89]

(121) Exchange
Input [1]: [max#89]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#90]

(122) HashAggregate [codegen id : 5]
Input [1]: [max#89]
Keys: []
Functions [1]: [max(csales#87)]
Aggregate Attributes [1]: [max(csales#87)#91]
Results [1]: [max(csales#87)#91 AS tpcds_cmax#92]

Subquery:2 Hosting operator id = 51 Hosting Expression = ReusedSubquery Subquery scalar-subquery#36, [id=#37]

Subquery:3 Hosting operator id = 76 Hosting Expression = ReusedSubquery Subquery scalar-subquery#36, [id=#37]

Subquery:4 Hosting operator id = 86 Hosting Expression = ReusedSubquery Subquery scalar-subquery#36, [id=#37]


