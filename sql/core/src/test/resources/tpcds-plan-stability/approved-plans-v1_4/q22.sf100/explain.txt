== Physical Plan ==
TakeOrderedAndProject (23)
+- * HashAggregate (22)
   +- Exchange (21)
      +- * HashAggregate (20)
         +- * Expand (19)
            +- * Project (18)
               +- * SortMergeJoin Inner (17)
                  :- * Sort (12)
                  :  +- Exchange (11)
                  :     +- * Project (10)
                  :        +- * BroadcastHashJoin Inner BuildRight (9)
                  :           :- * Project (7)
                  :           :  +- * BroadcastHashJoin Inner BuildRight (6)
                  :           :     :- * ColumnarToRow (2)
                  :           :     :  +- Scan parquet default.inventory (1)
                  :           :     +- BroadcastExchange (5)
                  :           :        +- * ColumnarToRow (4)
                  :           :           +- Scan parquet default.warehouse (3)
                  :           +- ReusedExchange (8)
                  +- * Sort (16)
                     +- Exchange (15)
                        +- * ColumnarToRow (14)
                           +- Scan parquet default.item (13)


(1) Scan parquet default.inventory
Output [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/inventory]
PartitionFilters: [dynamicpruningexpression(inv_date_sk#4 IN dynamicpruning#5)]
ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(2) ColumnarToRow [codegen id : 3]
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]

(3) Scan parquet default.warehouse
Output [1]: [w_warehouse_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
ReadSchema: struct<w_warehouse_sk:int>

(4) ColumnarToRow [codegen id : 1]
Input [1]: [w_warehouse_sk#6]

(5) BroadcastExchange
Input [1]: [w_warehouse_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#7]

(6) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [inv_warehouse_sk#2]
Right keys [1]: [w_warehouse_sk#6]
Join condition: None

(7) Project [codegen id : 3]
Output [3]: [inv_item_sk#1, inv_quantity_on_hand#3, inv_date_sk#4]
Input [5]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, w_warehouse_sk#6]

(8) ReusedExchange [Reuses operator id: 28]
Output [1]: [d_date_sk#8]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [inv_date_sk#4]
Right keys [1]: [d_date_sk#8]
Join condition: None

(10) Project [codegen id : 3]
Output [2]: [inv_item_sk#1, inv_quantity_on_hand#3]
Input [4]: [inv_item_sk#1, inv_quantity_on_hand#3, inv_date_sk#4, d_date_sk#8]

(11) Exchange
Input [2]: [inv_item_sk#1, inv_quantity_on_hand#3]
Arguments: hashpartitioning(inv_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#9]

(12) Sort [codegen id : 4]
Input [2]: [inv_item_sk#1, inv_quantity_on_hand#3]
Arguments: [inv_item_sk#1 ASC NULLS FIRST], false, 0

(13) Scan parquet default.item
Output [5]: [i_item_sk#10, i_brand#11, i_class#12, i_category#13, i_product_name#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_product_name:string>

(14) ColumnarToRow [codegen id : 5]
Input [5]: [i_item_sk#10, i_brand#11, i_class#12, i_category#13, i_product_name#14]

(15) Exchange
Input [5]: [i_item_sk#10, i_brand#11, i_class#12, i_category#13, i_product_name#14]
Arguments: hashpartitioning(i_item_sk#10, 5), ENSURE_REQUIREMENTS, [id=#15]

(16) Sort [codegen id : 6]
Input [5]: [i_item_sk#10, i_brand#11, i_class#12, i_category#13, i_product_name#14]
Arguments: [i_item_sk#10 ASC NULLS FIRST], false, 0

(17) SortMergeJoin [codegen id : 7]
Left keys [1]: [inv_item_sk#1]
Right keys [1]: [i_item_sk#10]
Join condition: None

(18) Project [codegen id : 7]
Output [5]: [inv_quantity_on_hand#3, i_product_name#14, i_brand#11, i_class#12, i_category#13]
Input [7]: [inv_item_sk#1, inv_quantity_on_hand#3, i_item_sk#10, i_brand#11, i_class#12, i_category#13, i_product_name#14]

(19) Expand [codegen id : 7]
Input [5]: [inv_quantity_on_hand#3, i_product_name#14, i_brand#11, i_class#12, i_category#13]
Arguments: [[inv_quantity_on_hand#3, i_product_name#14, i_brand#11, i_class#12, i_category#13, 0], [inv_quantity_on_hand#3, i_product_name#14, i_brand#11, i_class#12, null, 1], [inv_quantity_on_hand#3, i_product_name#14, i_brand#11, null, null, 3], [inv_quantity_on_hand#3, i_product_name#14, null, null, null, 7], [inv_quantity_on_hand#3, null, null, null, null, 15]], [inv_quantity_on_hand#3, i_product_name#16, i_brand#17, i_class#18, i_category#19, spark_grouping_id#20]

(20) HashAggregate [codegen id : 7]
Input [6]: [inv_quantity_on_hand#3, i_product_name#16, i_brand#17, i_class#18, i_category#19, spark_grouping_id#20]
Keys [5]: [i_product_name#16, i_brand#17, i_class#18, i_category#19, spark_grouping_id#20]
Functions [1]: [partial_avg(inv_quantity_on_hand#3)]
Aggregate Attributes [2]: [sum#21, count#22]
Results [7]: [i_product_name#16, i_brand#17, i_class#18, i_category#19, spark_grouping_id#20, sum#23, count#24]

(21) Exchange
Input [7]: [i_product_name#16, i_brand#17, i_class#18, i_category#19, spark_grouping_id#20, sum#23, count#24]
Arguments: hashpartitioning(i_product_name#16, i_brand#17, i_class#18, i_category#19, spark_grouping_id#20, 5), ENSURE_REQUIREMENTS, [id=#25]

(22) HashAggregate [codegen id : 8]
Input [7]: [i_product_name#16, i_brand#17, i_class#18, i_category#19, spark_grouping_id#20, sum#23, count#24]
Keys [5]: [i_product_name#16, i_brand#17, i_class#18, i_category#19, spark_grouping_id#20]
Functions [1]: [avg(inv_quantity_on_hand#3)]
Aggregate Attributes [1]: [avg(inv_quantity_on_hand#3)#26]
Results [5]: [i_product_name#16, i_brand#17, i_class#18, i_category#19, avg(inv_quantity_on_hand#3)#26 AS qoh#27]

(23) TakeOrderedAndProject
Input [5]: [i_product_name#16, i_brand#17, i_class#18, i_category#19, qoh#27]
Arguments: 100, [qoh#27 ASC NULLS FIRST, i_product_name#16 ASC NULLS FIRST, i_brand#17 ASC NULLS FIRST, i_class#18 ASC NULLS FIRST, i_category#19 ASC NULLS FIRST], [i_product_name#16, i_brand#17, i_class#18, i_category#19, qoh#27]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = inv_date_sk#4 IN dynamicpruning#5
BroadcastExchange (28)
+- * Project (27)
   +- * Filter (26)
      +- * ColumnarToRow (25)
         +- Scan parquet default.date_dim (24)


(24) Scan parquet default.date_dim
Output [2]: [d_date_sk#8, d_month_seq#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(25) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#8, d_month_seq#28]

(26) Filter [codegen id : 1]
Input [2]: [d_date_sk#8, d_month_seq#28]
Condition : ((d_month_seq#28 >= 1200) AND (d_month_seq#28 <= 1211))

(27) Project [codegen id : 1]
Output [1]: [d_date_sk#8]
Input [2]: [d_date_sk#8, d_month_seq#28]

(28) BroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]


