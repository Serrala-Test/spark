== Physical Plan ==
TakeOrderedAndProject (31)
+- * HashAggregate (30)
   +- Exchange (29)
      +- * HashAggregate (28)
         +- * Expand (27)
            +- * Project (26)
               +- * SortMergeJoin Inner (25)
                  :- * Sort (18)
                  :  +- Exchange (17)
                  :     +- * Project (16)
                  :        +- * BroadcastHashJoin Inner BuildRight (15)
                  :           :- * Project (10)
                  :           :  +- * BroadcastHashJoin Inner BuildRight (9)
                  :           :     :- * Filter (3)
                  :           :     :  +- * ColumnarToRow (2)
                  :           :     :     +- Scan parquet default.inventory (1)
                  :           :     +- BroadcastExchange (8)
                  :           :        +- * Project (7)
                  :           :           +- * Filter (6)
                  :           :              +- * ColumnarToRow (5)
                  :           :                 +- Scan parquet default.date_dim (4)
                  :           +- BroadcastExchange (14)
                  :              +- * Filter (13)
                  :                 +- * ColumnarToRow (12)
                  :                    +- Scan parquet default.warehouse (11)
                  +- * Sort (24)
                     +- Exchange (23)
                        +- * Project (22)
                           +- * Filter (21)
                              +- * ColumnarToRow (20)
                                 +- Scan parquet default.item (19)


(1) Scan parquet default.inventory
Output [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/inventory]
PushedFilters: [IsNotNull(inv_date_sk), IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)]
ReadSchema: struct<inv_date_sk:int,inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(2) ColumnarToRow [codegen id : 3]
Input [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]

(3) Filter [codegen id : 3]
Input [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]
Condition : ((isnotnull(inv_date_sk#1) AND isnotnull(inv_item_sk#2)) AND isnotnull(inv_warehouse_sk#3))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#5, d_month_seq#6]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1200)) AND (d_month_seq#6 <= 1211)) AND isnotnull(d_date_sk#5))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#5]
Input [2]: [d_date_sk#5, d_month_seq#6]

(8) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#7]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [inv_date_sk#1]
Right keys [1]: [d_date_sk#5]
Join condition: None

(10) Project [codegen id : 3]
Output [3]: [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]
Input [5]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date_sk#5]

(11) Scan parquet default.warehouse
Output [1]: [w_warehouse_sk#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int>

(12) ColumnarToRow [codegen id : 2]
Input [1]: [w_warehouse_sk#8]

(13) Filter [codegen id : 2]
Input [1]: [w_warehouse_sk#8]
Condition : isnotnull(w_warehouse_sk#8)

(14) BroadcastExchange
Input [1]: [w_warehouse_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9]

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [inv_warehouse_sk#3]
Right keys [1]: [w_warehouse_sk#8]
Join condition: None

(16) Project [codegen id : 3]
Output [2]: [inv_item_sk#2, inv_quantity_on_hand#4]
Input [4]: [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, w_warehouse_sk#8]

(17) Exchange
Input [2]: [inv_item_sk#2, inv_quantity_on_hand#4]
Arguments: hashpartitioning(inv_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#10]

(18) Sort [codegen id : 4]
Input [2]: [inv_item_sk#2, inv_quantity_on_hand#4]
Arguments: [inv_item_sk#2 ASC NULLS FIRST], false, 0

(19) Scan parquet default.item
Output [5]: [i_item_sk#11, i_brand#12, i_class#13, i_category#14, i_product_name#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_product_name:string>

(20) ColumnarToRow [codegen id : 5]
Input [5]: [i_item_sk#11, i_brand#12, i_class#13, i_category#14, i_product_name#15]

(21) Filter [codegen id : 5]
Input [5]: [i_item_sk#11, i_brand#12, i_class#13, i_category#14, i_product_name#15]
Condition : isnotnull(i_item_sk#11)

(22) Project [codegen id : 5]
Output [5]: [i_item_sk#11, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_brand#12, 50, false, true) AS i_brand#16, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_class#13, 50, false, true) AS i_class#17, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#14, 50, false, true) AS i_category#18, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_product_name#15, 50, false, true) AS i_product_name#19]
Input [5]: [i_item_sk#11, i_brand#12, i_class#13, i_category#14, i_product_name#15]

(23) Exchange
Input [5]: [i_item_sk#11, i_brand#16, i_class#17, i_category#18, i_product_name#19]
Arguments: hashpartitioning(i_item_sk#11, 5), ENSURE_REQUIREMENTS, [id=#20]

(24) Sort [codegen id : 6]
Input [5]: [i_item_sk#11, i_brand#16, i_class#17, i_category#18, i_product_name#19]
Arguments: [i_item_sk#11 ASC NULLS FIRST], false, 0

(25) SortMergeJoin [codegen id : 7]
Left keys [1]: [inv_item_sk#2]
Right keys [1]: [i_item_sk#11]
Join condition: None

(26) Project [codegen id : 7]
Output [5]: [inv_quantity_on_hand#4, i_product_name#19 AS i_product_name#21, i_brand#16 AS i_brand#22, i_class#17 AS i_class#23, i_category#18 AS i_category#24]
Input [7]: [inv_item_sk#2, inv_quantity_on_hand#4, i_item_sk#11, i_brand#16, i_class#17, i_category#18, i_product_name#19]

(27) Expand [codegen id : 7]
Input [5]: [inv_quantity_on_hand#4, i_product_name#21, i_brand#22, i_class#23, i_category#24]
Arguments: [List(inv_quantity_on_hand#4, i_product_name#21, i_brand#22, i_class#23, i_category#24, 0), List(inv_quantity_on_hand#4, i_product_name#21, i_brand#22, i_class#23, null, 1), List(inv_quantity_on_hand#4, i_product_name#21, i_brand#22, null, null, 3), List(inv_quantity_on_hand#4, i_product_name#21, null, null, null, 7), List(inv_quantity_on_hand#4, null, null, null, null, 15)], [inv_quantity_on_hand#4, i_product_name#25, i_brand#26, i_class#27, i_category#28, spark_grouping_id#29]

(28) HashAggregate [codegen id : 7]
Input [6]: [inv_quantity_on_hand#4, i_product_name#25, i_brand#26, i_class#27, i_category#28, spark_grouping_id#29]
Keys [5]: [i_product_name#25, i_brand#26, i_class#27, i_category#28, spark_grouping_id#29]
Functions [1]: [partial_avg(cast(inv_quantity_on_hand#4 as bigint))]
Aggregate Attributes [2]: [sum#30, count#31]
Results [7]: [i_product_name#25, i_brand#26, i_class#27, i_category#28, spark_grouping_id#29, sum#32, count#33]

(29) Exchange
Input [7]: [i_product_name#25, i_brand#26, i_class#27, i_category#28, spark_grouping_id#29, sum#32, count#33]
Arguments: hashpartitioning(i_product_name#25, i_brand#26, i_class#27, i_category#28, spark_grouping_id#29, 5), ENSURE_REQUIREMENTS, [id=#34]

(30) HashAggregate [codegen id : 8]
Input [7]: [i_product_name#25, i_brand#26, i_class#27, i_category#28, spark_grouping_id#29, sum#32, count#33]
Keys [5]: [i_product_name#25, i_brand#26, i_class#27, i_category#28, spark_grouping_id#29]
Functions [1]: [avg(cast(inv_quantity_on_hand#4 as bigint))]
Aggregate Attributes [1]: [avg(cast(inv_quantity_on_hand#4 as bigint))#35]
Results [5]: [i_product_name#25, i_brand#26, i_class#27, i_category#28, avg(cast(inv_quantity_on_hand#4 as bigint))#35 AS qoh#36]

(31) TakeOrderedAndProject
Input [5]: [i_product_name#25, i_brand#26, i_class#27, i_category#28, qoh#36]
Arguments: 100, [qoh#36 ASC NULLS FIRST, i_product_name#25 ASC NULLS FIRST, i_brand#26 ASC NULLS FIRST, i_class#27 ASC NULLS FIRST, i_category#28 ASC NULLS FIRST], [i_product_name#25, i_brand#26, i_class#27, i_category#28, qoh#36]

