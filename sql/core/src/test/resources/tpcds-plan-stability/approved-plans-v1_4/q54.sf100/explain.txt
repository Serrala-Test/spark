== Physical Plan ==
TakeOrderedAndProject (73)
+- * HashAggregate (72)
   +- Exchange (71)
      +- * HashAggregate (70)
         +- * HashAggregate (69)
            +- Exchange (68)
               +- * HashAggregate (67)
                  +- * Project (66)
                     +- * SortMergeJoin Inner (65)
                        :- * Sort (51)
                        :  +- Exchange (50)
                        :     +- * Project (49)
                        :        +- * SortMergeJoin Inner (48)
                        :           :- * Sort (12)
                        :           :  +- Exchange (11)
                        :           :     +- * Project (10)
                        :           :        +- * BroadcastHashJoin Inner BuildRight (9)
                        :           :           :- * Filter (3)
                        :           :           :  +- * ColumnarToRow (2)
                        :           :           :     +- Scan parquet default.store_sales (1)
                        :           :           +- BroadcastExchange (8)
                        :           :              +- * Project (7)
                        :           :                 +- * Filter (6)
                        :           :                    +- * ColumnarToRow (5)
                        :           :                       +- Scan parquet default.date_dim (4)
                        :           +- * Sort (47)
                        :              +- * HashAggregate (46)
                        :                 +- * HashAggregate (45)
                        :                    +- * Project (44)
                        :                       +- * SortMergeJoin Inner (43)
                        :                          :- * Sort (37)
                        :                          :  +- Exchange (36)
                        :                          :     +- * Project (35)
                        :                          :        +- * BroadcastHashJoin Inner BuildRight (34)
                        :                          :           :- * Project (28)
                        :                          :           :  +- * BroadcastHashJoin Inner BuildRight (27)
                        :                          :           :     :- Union (21)
                        :                          :           :     :  :- * Project (16)
                        :                          :           :     :  :  +- * Filter (15)
                        :                          :           :     :  :     +- * ColumnarToRow (14)
                        :                          :           :     :  :        +- Scan parquet default.catalog_sales (13)
                        :                          :           :     :  +- * Project (20)
                        :                          :           :     :     +- * Filter (19)
                        :                          :           :     :        +- * ColumnarToRow (18)
                        :                          :           :     :           +- Scan parquet default.web_sales (17)
                        :                          :           :     +- BroadcastExchange (26)
                        :                          :           :        +- * Project (25)
                        :                          :           :           +- * Filter (24)
                        :                          :           :              +- * ColumnarToRow (23)
                        :                          :           :                 +- Scan parquet default.date_dim (22)
                        :                          :           +- BroadcastExchange (33)
                        :                          :              +- * Project (32)
                        :                          :                 +- * Filter (31)
                        :                          :                    +- * ColumnarToRow (30)
                        :                          :                       +- Scan parquet default.item (29)
                        :                          +- * Sort (42)
                        :                             +- Exchange (41)
                        :                                +- * Filter (40)
                        :                                   +- * ColumnarToRow (39)
                        :                                      +- Scan parquet default.customer (38)
                        +- * Sort (64)
                           +- Exchange (63)
                              +- * Project (62)
                                 +- * BroadcastHashJoin Inner BuildRight (61)
                                    :- * Project (55)
                                    :  +- * Filter (54)
                                    :     +- * ColumnarToRow (53)
                                    :        +- Scan parquet default.customer_address (52)
                                    +- BroadcastExchange (60)
                                       +- * Project (59)
                                          +- * Filter (58)
                                             +- * ColumnarToRow (57)
                                                +- Scan parquet default.store (56)


(1) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ext_sales_price#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ext_sales_price#3]

(3) Filter [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ext_sales_price#3]
Condition : (isnotnull(ss_customer_sk#2) AND isnotnull(ss_sold_date_sk#1))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#4, d_month_seq#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#4, d_month_seq#5]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#4, d_month_seq#5]
Condition : (((isnotnull(d_month_seq#5) AND (d_month_seq#5 >= Subquery scalar-subquery#6, [id=#7])) AND (d_month_seq#5 <= Subquery scalar-subquery#8, [id=#9])) AND isnotnull(d_date_sk#4))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#4]
Input [2]: [d_date_sk#4, d_month_seq#5]

(8) BroadcastExchange
Input [1]: [d_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#10]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#4]
Join condition: None

(10) Project [codegen id : 2]
Output [2]: [ss_customer_sk#2, ss_ext_sales_price#3]
Input [4]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ext_sales_price#3, d_date_sk#4]

(11) Exchange
Input [2]: [ss_customer_sk#2, ss_ext_sales_price#3]
Arguments: hashpartitioning(ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#11]

(12) Sort [codegen id : 3]
Input [2]: [ss_customer_sk#2, ss_ext_sales_price#3]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(13) Scan parquet default.catalog_sales
Output [3]: [cs_sold_date_sk#12, cs_bill_customer_sk#13, cs_item_sk#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int>

(14) ColumnarToRow [codegen id : 4]
Input [3]: [cs_sold_date_sk#12, cs_bill_customer_sk#13, cs_item_sk#14]

(15) Filter [codegen id : 4]
Input [3]: [cs_sold_date_sk#12, cs_bill_customer_sk#13, cs_item_sk#14]
Condition : ((isnotnull(cs_item_sk#14) AND isnotnull(cs_sold_date_sk#12)) AND isnotnull(cs_bill_customer_sk#13))

(16) Project [codegen id : 4]
Output [3]: [cs_sold_date_sk#12 AS sold_date_sk#15, cs_bill_customer_sk#13 AS customer_sk#16, cs_item_sk#14 AS item_sk#17]
Input [3]: [cs_sold_date_sk#12, cs_bill_customer_sk#13, cs_item_sk#14]

(17) Scan parquet default.web_sales
Output [3]: [ws_sold_date_sk#18, ws_item_sk#19, ws_bill_customer_sk#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk), IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int>

(18) ColumnarToRow [codegen id : 5]
Input [3]: [ws_sold_date_sk#18, ws_item_sk#19, ws_bill_customer_sk#20]

(19) Filter [codegen id : 5]
Input [3]: [ws_sold_date_sk#18, ws_item_sk#19, ws_bill_customer_sk#20]
Condition : ((isnotnull(ws_item_sk#19) AND isnotnull(ws_sold_date_sk#18)) AND isnotnull(ws_bill_customer_sk#20))

(20) Project [codegen id : 5]
Output [3]: [ws_sold_date_sk#18 AS sold_date_sk#21, ws_bill_customer_sk#20 AS customer_sk#22, ws_item_sk#19 AS item_sk#23]
Input [3]: [ws_sold_date_sk#18, ws_item_sk#19, ws_bill_customer_sk#20]

(21) Union

(22) Scan parquet default.date_dim
Output [3]: [d_date_sk#4, d_year#24, d_moy#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,12), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(23) ColumnarToRow [codegen id : 6]
Input [3]: [d_date_sk#4, d_year#24, d_moy#25]

(24) Filter [codegen id : 6]
Input [3]: [d_date_sk#4, d_year#24, d_moy#25]
Condition : ((((isnotnull(d_moy#25) AND isnotnull(d_year#24)) AND (d_moy#25 = 12)) AND (d_year#24 = 1998)) AND isnotnull(d_date_sk#4))

(25) Project [codegen id : 6]
Output [1]: [d_date_sk#4]
Input [3]: [d_date_sk#4, d_year#24, d_moy#25]

(26) BroadcastExchange
Input [1]: [d_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#26]

(27) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [sold_date_sk#15]
Right keys [1]: [d_date_sk#4]
Join condition: None

(28) Project [codegen id : 8]
Output [2]: [customer_sk#16, item_sk#17]
Input [4]: [sold_date_sk#15, customer_sk#16, item_sk#17, d_date_sk#4]

(29) Scan parquet default.item
Output [3]: [i_item_sk#27, i_class#28, i_category#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(30) ColumnarToRow [codegen id : 7]
Input [3]: [i_item_sk#27, i_class#28, i_category#29]

(31) Filter [codegen id : 7]
Input [3]: [i_item_sk#27, i_class#28, i_category#29]
Condition : (((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#29, 50, false, true) = Women                                             ) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_class#28, 50, false, true) = maternity                                         )) AND isnotnull(i_item_sk#27))

(32) Project [codegen id : 7]
Output [1]: [i_item_sk#27]
Input [3]: [i_item_sk#27, i_class#28, i_category#29]

(33) BroadcastExchange
Input [1]: [i_item_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#30]

(34) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [item_sk#17]
Right keys [1]: [i_item_sk#27]
Join condition: None

(35) Project [codegen id : 8]
Output [1]: [customer_sk#16]
Input [3]: [customer_sk#16, item_sk#17, i_item_sk#27]

(36) Exchange
Input [1]: [customer_sk#16]
Arguments: hashpartitioning(customer_sk#16, 5), ENSURE_REQUIREMENTS, [id=#31]

(37) Sort [codegen id : 9]
Input [1]: [customer_sk#16]
Arguments: [customer_sk#16 ASC NULLS FIRST], false, 0

(38) Scan parquet default.customer
Output [2]: [c_customer_sk#32, c_current_addr_sk#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(39) ColumnarToRow [codegen id : 10]
Input [2]: [c_customer_sk#32, c_current_addr_sk#33]

(40) Filter [codegen id : 10]
Input [2]: [c_customer_sk#32, c_current_addr_sk#33]
Condition : (isnotnull(c_customer_sk#32) AND isnotnull(c_current_addr_sk#33))

(41) Exchange
Input [2]: [c_customer_sk#32, c_current_addr_sk#33]
Arguments: hashpartitioning(c_customer_sk#32, 5), ENSURE_REQUIREMENTS, [id=#34]

(42) Sort [codegen id : 11]
Input [2]: [c_customer_sk#32, c_current_addr_sk#33]
Arguments: [c_customer_sk#32 ASC NULLS FIRST], false, 0

(43) SortMergeJoin [codegen id : 12]
Left keys [1]: [customer_sk#16]
Right keys [1]: [c_customer_sk#32]
Join condition: None

(44) Project [codegen id : 12]
Output [2]: [c_customer_sk#32, c_current_addr_sk#33]
Input [3]: [customer_sk#16, c_customer_sk#32, c_current_addr_sk#33]

(45) HashAggregate [codegen id : 12]
Input [2]: [c_customer_sk#32, c_current_addr_sk#33]
Keys [2]: [c_customer_sk#32, c_current_addr_sk#33]
Functions: []
Aggregate Attributes: []
Results [2]: [c_customer_sk#32, c_current_addr_sk#33]

(46) HashAggregate [codegen id : 12]
Input [2]: [c_customer_sk#32, c_current_addr_sk#33]
Keys [2]: [c_customer_sk#32, c_current_addr_sk#33]
Functions: []
Aggregate Attributes: []
Results [2]: [c_customer_sk#32, c_current_addr_sk#33]

(47) Sort [codegen id : 12]
Input [2]: [c_customer_sk#32, c_current_addr_sk#33]
Arguments: [c_customer_sk#32 ASC NULLS FIRST], false, 0

(48) SortMergeJoin [codegen id : 13]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#32]
Join condition: None

(49) Project [codegen id : 13]
Output [3]: [ss_ext_sales_price#3, c_customer_sk#32, c_current_addr_sk#33]
Input [4]: [ss_customer_sk#2, ss_ext_sales_price#3, c_customer_sk#32, c_current_addr_sk#33]

(50) Exchange
Input [3]: [ss_ext_sales_price#3, c_customer_sk#32, c_current_addr_sk#33]
Arguments: hashpartitioning(c_current_addr_sk#33, 5), ENSURE_REQUIREMENTS, [id=#35]

(51) Sort [codegen id : 14]
Input [3]: [ss_ext_sales_price#3, c_customer_sk#32, c_current_addr_sk#33]
Arguments: [c_current_addr_sk#33 ASC NULLS FIRST], false, 0

(52) Scan parquet default.customer_address
Output [3]: [ca_address_sk#36, ca_county#37, ca_state#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string,ca_state:string>

(53) ColumnarToRow [codegen id : 16]
Input [3]: [ca_address_sk#36, ca_county#37, ca_state#38]

(54) Filter [codegen id : 16]
Input [3]: [ca_address_sk#36, ca_county#37, ca_state#38]
Condition : ((isnotnull(ca_address_sk#36) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_county#37, 30, false, true))) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#38, 2, false, true)))

(55) Project [codegen id : 16]
Output [3]: [ca_address_sk#36, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_county#37, 30, false, true) AS ca_county#39, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#38, 2, false, true) AS ca_state#40]
Input [3]: [ca_address_sk#36, ca_county#37, ca_state#38]

(56) Scan parquet default.store
Output [2]: [s_county#41, s_state#42]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
ReadSchema: struct<s_county:string,s_state:string>

(57) ColumnarToRow [codegen id : 15]
Input [2]: [s_county#41, s_state#42]

(58) Filter [codegen id : 15]
Input [2]: [s_county#41, s_state#42]
Condition : (isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_county#41, 30, false, true)) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#42, 2, false, true)))

(59) Project [codegen id : 15]
Output [2]: [staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_county#41, 30, false, true) AS s_county#43, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#42, 2, false, true) AS s_state#44]
Input [2]: [s_county#41, s_state#42]

(60) BroadcastExchange
Input [2]: [s_county#43, s_state#44]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true], input[1, string, true]),false), [id=#45]

(61) BroadcastHashJoin [codegen id : 16]
Left keys [2]: [ca_county#39, ca_state#40]
Right keys [2]: [s_county#43, s_state#44]
Join condition: None

(62) Project [codegen id : 16]
Output [1]: [ca_address_sk#36]
Input [5]: [ca_address_sk#36, ca_county#39, ca_state#40, s_county#43, s_state#44]

(63) Exchange
Input [1]: [ca_address_sk#36]
Arguments: hashpartitioning(ca_address_sk#36, 5), ENSURE_REQUIREMENTS, [id=#46]

(64) Sort [codegen id : 17]
Input [1]: [ca_address_sk#36]
Arguments: [ca_address_sk#36 ASC NULLS FIRST], false, 0

(65) SortMergeJoin [codegen id : 18]
Left keys [1]: [c_current_addr_sk#33]
Right keys [1]: [ca_address_sk#36]
Join condition: None

(66) Project [codegen id : 18]
Output [2]: [c_customer_sk#32, ss_ext_sales_price#3]
Input [4]: [ss_ext_sales_price#3, c_customer_sk#32, c_current_addr_sk#33, ca_address_sk#36]

(67) HashAggregate [codegen id : 18]
Input [2]: [c_customer_sk#32, ss_ext_sales_price#3]
Keys [1]: [c_customer_sk#32]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [1]: [sum#47]
Results [2]: [c_customer_sk#32, sum#48]

(68) Exchange
Input [2]: [c_customer_sk#32, sum#48]
Arguments: hashpartitioning(c_customer_sk#32, 5), ENSURE_REQUIREMENTS, [id=#49]

(69) HashAggregate [codegen id : 19]
Input [2]: [c_customer_sk#32, sum#48]
Keys [1]: [c_customer_sk#32]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#3))#50]
Results [1]: [cast(CheckOverflow((promote_precision(MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#50,17,2)) / 50.00), DecimalType(21,6), true) as int) AS segment#51]

(70) HashAggregate [codegen id : 19]
Input [1]: [segment#51]
Keys [1]: [segment#51]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#52]
Results [2]: [segment#51, count#53]

(71) Exchange
Input [2]: [segment#51, count#53]
Arguments: hashpartitioning(segment#51, 5), ENSURE_REQUIREMENTS, [id=#54]

(72) HashAggregate [codegen id : 20]
Input [2]: [segment#51, count#53]
Keys [1]: [segment#51]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#55]
Results [3]: [segment#51, count(1)#55 AS num_customers#56, (segment#51 * 50) AS segment_base#57]

(73) TakeOrderedAndProject
Input [3]: [segment#51, num_customers#56, segment_base#57]
Arguments: 100, [segment#51 ASC NULLS FIRST, num_customers#56 ASC NULLS FIRST], [segment#51, num_customers#56, segment_base#57]

===== Subqueries =====

Subquery:1 Hosting operator id = 6 Hosting Expression = Subquery scalar-subquery#6, [id=#7]
* HashAggregate (80)
+- Exchange (79)
   +- * HashAggregate (78)
      +- * Project (77)
         +- * Filter (76)
            +- * ColumnarToRow (75)
               +- Scan parquet default.date_dim (74)


(74) Scan parquet default.date_dim
Output [3]: [d_month_seq#5, d_year#24, d_moy#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,12)]
ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>

(75) ColumnarToRow [codegen id : 1]
Input [3]: [d_month_seq#5, d_year#24, d_moy#25]

(76) Filter [codegen id : 1]
Input [3]: [d_month_seq#5, d_year#24, d_moy#25]
Condition : (((isnotnull(d_year#24) AND isnotnull(d_moy#25)) AND (d_year#24 = 1998)) AND (d_moy#25 = 12))

(77) Project [codegen id : 1]
Output [1]: [(d_month_seq#5 + 1) AS (d_month_seq + 1)#58]
Input [3]: [d_month_seq#5, d_year#24, d_moy#25]

(78) HashAggregate [codegen id : 1]
Input [1]: [(d_month_seq + 1)#58]
Keys [1]: [(d_month_seq + 1)#58]
Functions: []
Aggregate Attributes: []
Results [1]: [(d_month_seq + 1)#58]

(79) Exchange
Input [1]: [(d_month_seq + 1)#58]
Arguments: hashpartitioning((d_month_seq + 1)#58, 5), ENSURE_REQUIREMENTS, [id=#59]

(80) HashAggregate [codegen id : 2]
Input [1]: [(d_month_seq + 1)#58]
Keys [1]: [(d_month_seq + 1)#58]
Functions: []
Aggregate Attributes: []
Results [1]: [(d_month_seq + 1)#58]

Subquery:2 Hosting operator id = 6 Hosting Expression = Subquery scalar-subquery#8, [id=#9]
* HashAggregate (87)
+- Exchange (86)
   +- * HashAggregate (85)
      +- * Project (84)
         +- * Filter (83)
            +- * ColumnarToRow (82)
               +- Scan parquet default.date_dim (81)


(81) Scan parquet default.date_dim
Output [3]: [d_month_seq#5, d_year#24, d_moy#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,12)]
ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>

(82) ColumnarToRow [codegen id : 1]
Input [3]: [d_month_seq#5, d_year#24, d_moy#25]

(83) Filter [codegen id : 1]
Input [3]: [d_month_seq#5, d_year#24, d_moy#25]
Condition : (((isnotnull(d_year#24) AND isnotnull(d_moy#25)) AND (d_year#24 = 1998)) AND (d_moy#25 = 12))

(84) Project [codegen id : 1]
Output [1]: [(d_month_seq#5 + 3) AS (d_month_seq + 3)#60]
Input [3]: [d_month_seq#5, d_year#24, d_moy#25]

(85) HashAggregate [codegen id : 1]
Input [1]: [(d_month_seq + 3)#60]
Keys [1]: [(d_month_seq + 3)#60]
Functions: []
Aggregate Attributes: []
Results [1]: [(d_month_seq + 3)#60]

(86) Exchange
Input [1]: [(d_month_seq + 3)#60]
Arguments: hashpartitioning((d_month_seq + 3)#60, 5), ENSURE_REQUIREMENTS, [id=#61]

(87) HashAggregate [codegen id : 2]
Input [1]: [(d_month_seq + 3)#60]
Keys [1]: [(d_month_seq + 3)#60]
Functions: []
Aggregate Attributes: []
Results [1]: [(d_month_seq + 3)#60]


