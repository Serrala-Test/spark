== Physical Plan ==
TakeOrderedAndProject (57)
+- * HashAggregate (56)
   +- Exchange (55)
      +- * HashAggregate (54)
         +- * HashAggregate (53)
            +- * Project (52)
               +- * SortMergeJoin Inner (51)
                  :- * Sort (42)
                  :  +- * Project (41)
                  :     +- * BroadcastHashJoin Inner BuildLeft (40)
                  :        :- BroadcastExchange (10)
                  :        :  +- * Project (9)
                  :        :     +- * BroadcastHashJoin Inner BuildRight (8)
                  :        :        :- * Filter (3)
                  :        :        :  +- * ColumnarToRow (2)
                  :        :        :     +- Scan parquet spark_catalog.default.customer_address (1)
                  :        :        +- BroadcastExchange (7)
                  :        :           +- * Filter (6)
                  :        :              +- * ColumnarToRow (5)
                  :        :                 +- Scan parquet spark_catalog.default.store (4)
                  :        +- * HashAggregate (39)
                  :           +- * Project (38)
                  :              +- * SortMergeJoin Inner (37)
                  :                 :- * Sort (31)
                  :                 :  +- Exchange (30)
                  :                 :     +- * Project (29)
                  :                 :        +- * BroadcastHashJoin Inner BuildRight (28)
                  :                 :           :- * Project (22)
                  :                 :           :  +- * BroadcastHashJoin Inner BuildRight (21)
                  :                 :           :     :- Union (19)
                  :                 :           :     :  :- * Project (14)
                  :                 :           :     :  :  +- * Filter (13)
                  :                 :           :     :  :     +- * ColumnarToRow (12)
                  :                 :           :     :  :        +- Scan parquet spark_catalog.default.catalog_sales (11)
                  :                 :           :     :  +- * Project (18)
                  :                 :           :     :     +- * Filter (17)
                  :                 :           :     :        +- * ColumnarToRow (16)
                  :                 :           :     :           +- Scan parquet spark_catalog.default.web_sales (15)
                  :                 :           :     +- ReusedExchange (20)
                  :                 :           +- BroadcastExchange (27)
                  :                 :              +- * Project (26)
                  :                 :                 +- * Filter (25)
                  :                 :                    +- * ColumnarToRow (24)
                  :                 :                       +- Scan parquet spark_catalog.default.item (23)
                  :                 +- * Sort (36)
                  :                    +- Exchange (35)
                  :                       +- * Filter (34)
                  :                          +- * ColumnarToRow (33)
                  :                             +- Scan parquet spark_catalog.default.customer (32)
                  +- * Sort (50)
                     +- Exchange (49)
                        +- * Project (48)
                           +- * BroadcastHashJoin Inner BuildRight (47)
                              :- * Filter (45)
                              :  +- * ColumnarToRow (44)
                              :     +- Scan parquet spark_catalog.default.store_sales (43)
                              +- ReusedExchange (46)


(1) Scan parquet spark_catalog.default.customer_address
Output [3]: [ca_address_sk#1, ca_county#2, ca_state#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county), IsNotNull(ca_state)]
ReadSchema: struct<ca_address_sk:int,ca_county:string,ca_state:string>

(2) ColumnarToRow [codegen id : 2]
Input [3]: [ca_address_sk#1, ca_county#2, ca_state#3]

(3) Filter [codegen id : 2]
Input [3]: [ca_address_sk#1, ca_county#2, ca_state#3]
Condition : ((isnotnull(ca_address_sk#1) AND isnotnull(ca_county#2)) AND isnotnull(ca_state#3))

(4) Scan parquet spark_catalog.default.store
Output [2]: [s_county#4, s_state#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_county), IsNotNull(s_state)]
ReadSchema: struct<s_county:string,s_state:string>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [s_county#4, s_state#5]

(6) Filter [codegen id : 1]
Input [2]: [s_county#4, s_state#5]
Condition : (isnotnull(s_county#4) AND isnotnull(s_state#5))

(7) BroadcastExchange
Input [2]: [s_county#4, s_state#5]
Arguments: HashedRelationBroadcastMode(List(input[0, string, false], input[1, string, false]),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [2]: [ca_county#2, ca_state#3]
Right keys [2]: [s_county#4, s_state#5]
Join type: Inner
Join condition: None

(9) Project [codegen id : 2]
Output [1]: [ca_address_sk#1]
Input [5]: [ca_address_sk#1, ca_county#2, ca_state#3, s_county#4, s_state#5]

(10) BroadcastExchange
Input [1]: [ca_address_sk#1]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(11) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_bill_customer_sk#6, cs_item_sk#7, cs_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#8), dynamicpruningexpression(cs_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int>

(12) ColumnarToRow [codegen id : 3]
Input [3]: [cs_bill_customer_sk#6, cs_item_sk#7, cs_sold_date_sk#8]

(13) Filter [codegen id : 3]
Input [3]: [cs_bill_customer_sk#6, cs_item_sk#7, cs_sold_date_sk#8]
Condition : (isnotnull(cs_item_sk#7) AND isnotnull(cs_bill_customer_sk#6))

(14) Project [codegen id : 3]
Output [3]: [cs_sold_date_sk#8 AS sold_date_sk#10, cs_bill_customer_sk#6 AS customer_sk#11, cs_item_sk#7 AS item_sk#12]
Input [3]: [cs_bill_customer_sk#6, cs_item_sk#7, cs_sold_date_sk#8]

(15) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#13, ws_bill_customer_sk#14, ws_sold_date_sk#15]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#15), dynamicpruningexpression(ws_sold_date_sk#15 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int>

(16) ColumnarToRow [codegen id : 4]
Input [3]: [ws_item_sk#13, ws_bill_customer_sk#14, ws_sold_date_sk#15]

(17) Filter [codegen id : 4]
Input [3]: [ws_item_sk#13, ws_bill_customer_sk#14, ws_sold_date_sk#15]
Condition : (isnotnull(ws_item_sk#13) AND isnotnull(ws_bill_customer_sk#14))

(18) Project [codegen id : 4]
Output [3]: [ws_sold_date_sk#15 AS sold_date_sk#16, ws_bill_customer_sk#14 AS customer_sk#17, ws_item_sk#13 AS item_sk#18]
Input [3]: [ws_item_sk#13, ws_bill_customer_sk#14, ws_sold_date_sk#15]

(19) Union

(20) ReusedExchange [Reuses operator id: 62]
Output [1]: [d_date_sk#19]

(21) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [sold_date_sk#10]
Right keys [1]: [d_date_sk#19]
Join type: Inner
Join condition: None

(22) Project [codegen id : 7]
Output [2]: [customer_sk#11, item_sk#12]
Input [4]: [sold_date_sk#10, customer_sk#11, item_sk#12, d_date_sk#19]

(23) Scan parquet spark_catalog.default.item
Output [3]: [i_item_sk#20, i_class#21, i_category#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), IsNotNull(i_class), EqualTo(i_category,Women                                             ), EqualTo(i_class,maternity                                         ), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(24) ColumnarToRow [codegen id : 6]
Input [3]: [i_item_sk#20, i_class#21, i_category#22]

(25) Filter [codegen id : 6]
Input [3]: [i_item_sk#20, i_class#21, i_category#22]
Condition : ((((isnotnull(i_category#22) AND isnotnull(i_class#21)) AND (i_category#22 = Women                                             )) AND (i_class#21 = maternity                                         )) AND isnotnull(i_item_sk#20))

(26) Project [codegen id : 6]
Output [1]: [i_item_sk#20]
Input [3]: [i_item_sk#20, i_class#21, i_category#22]

(27) BroadcastExchange
Input [1]: [i_item_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(28) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [item_sk#12]
Right keys [1]: [i_item_sk#20]
Join type: Inner
Join condition: None

(29) Project [codegen id : 7]
Output [1]: [customer_sk#11]
Input [3]: [customer_sk#11, item_sk#12, i_item_sk#20]

(30) Exchange
Input [1]: [customer_sk#11]
Arguments: hashpartitioning(customer_sk#11, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(31) Sort [codegen id : 8]
Input [1]: [customer_sk#11]
Arguments: [customer_sk#11 ASC NULLS FIRST], false, 0

(32) Scan parquet spark_catalog.default.customer
Output [2]: [c_customer_sk#23, c_current_addr_sk#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(33) ColumnarToRow [codegen id : 9]
Input [2]: [c_customer_sk#23, c_current_addr_sk#24]

(34) Filter [codegen id : 9]
Input [2]: [c_customer_sk#23, c_current_addr_sk#24]
Condition : (isnotnull(c_customer_sk#23) AND isnotnull(c_current_addr_sk#24))

(35) Exchange
Input [2]: [c_customer_sk#23, c_current_addr_sk#24]
Arguments: hashpartitioning(c_customer_sk#23, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(36) Sort [codegen id : 10]
Input [2]: [c_customer_sk#23, c_current_addr_sk#24]
Arguments: [c_customer_sk#23 ASC NULLS FIRST], false, 0

(37) SortMergeJoin
Left keys [1]: [customer_sk#11]
Right keys [1]: [c_customer_sk#23]
Join type: Inner
Join condition: None

(38) Project
Output [2]: [c_customer_sk#23, c_current_addr_sk#24]
Input [3]: [customer_sk#11, c_customer_sk#23, c_current_addr_sk#24]

(39) HashAggregate
Input [2]: [c_customer_sk#23, c_current_addr_sk#24]
Keys [2]: [c_customer_sk#23, c_current_addr_sk#24]
Functions: []
Aggregate Attributes: []
Results [2]: [c_customer_sk#23, c_current_addr_sk#24]

(40) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ca_address_sk#1]
Right keys [1]: [c_current_addr_sk#24]
Join type: Inner
Join condition: None

(41) Project [codegen id : 11]
Output [1]: [c_customer_sk#23]
Input [3]: [ca_address_sk#1, c_customer_sk#23, c_current_addr_sk#24]

(42) Sort [codegen id : 11]
Input [1]: [c_customer_sk#23]
Arguments: [c_customer_sk#23 ASC NULLS FIRST], false, 0

(43) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_customer_sk#25, ss_ext_sales_price#26, ss_sold_date_sk#27]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#27), dynamicpruningexpression(ss_sold_date_sk#27 IN dynamicpruning#28)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_sales_price:decimal(7,2)>

(44) ColumnarToRow [codegen id : 13]
Input [3]: [ss_customer_sk#25, ss_ext_sales_price#26, ss_sold_date_sk#27]

(45) Filter [codegen id : 13]
Input [3]: [ss_customer_sk#25, ss_ext_sales_price#26, ss_sold_date_sk#27]
Condition : isnotnull(ss_customer_sk#25)

(46) ReusedExchange [Reuses operator id: 67]
Output [1]: [d_date_sk#29]

(47) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_sold_date_sk#27]
Right keys [1]: [d_date_sk#29]
Join type: Inner
Join condition: None

(48) Project [codegen id : 13]
Output [2]: [ss_customer_sk#25, ss_ext_sales_price#26]
Input [4]: [ss_customer_sk#25, ss_ext_sales_price#26, ss_sold_date_sk#27, d_date_sk#29]

(49) Exchange
Input [2]: [ss_customer_sk#25, ss_ext_sales_price#26]
Arguments: hashpartitioning(ss_customer_sk#25, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(50) Sort [codegen id : 14]
Input [2]: [ss_customer_sk#25, ss_ext_sales_price#26]
Arguments: [ss_customer_sk#25 ASC NULLS FIRST], false, 0

(51) SortMergeJoin [codegen id : 15]
Left keys [1]: [c_customer_sk#23]
Right keys [1]: [ss_customer_sk#25]
Join type: Inner
Join condition: None

(52) Project [codegen id : 15]
Output [2]: [c_customer_sk#23, ss_ext_sales_price#26]
Input [3]: [c_customer_sk#23, ss_customer_sk#25, ss_ext_sales_price#26]

(53) HashAggregate [codegen id : 15]
Input [2]: [c_customer_sk#23, ss_ext_sales_price#26]
Keys [1]: [c_customer_sk#23]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#26))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#26))#30]
Results [1]: [cast((MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#26))#30,17,2) / 50) as int) AS segment#31]

(54) HashAggregate [codegen id : 15]
Input [1]: [segment#31]
Keys [1]: [segment#31]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#32]
Results [2]: [segment#31, count#33]

(55) Exchange
Input [2]: [segment#31, count#33]
Arguments: hashpartitioning(segment#31, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(56) HashAggregate [codegen id : 16]
Input [2]: [segment#31, count#33]
Keys [1]: [segment#31]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#34]
Results [3]: [segment#31, count(1)#34 AS num_customers#35, (segment#31 * 50) AS segment_base#36]

(57) TakeOrderedAndProject
Input [3]: [segment#31, num_customers#35, segment_base#36]
Arguments: 100, [segment#31 ASC NULLS FIRST, num_customers#35 ASC NULLS FIRST], [segment#31, num_customers#35, segment_base#36]

===== Subqueries =====

Subquery:1 Hosting operator id = 11 Hosting Expression = cs_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (62)
+- * Project (61)
   +- * Filter (60)
      +- * ColumnarToRow (59)
         +- Scan parquet spark_catalog.default.date_dim (58)


(58) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#19, d_year#37, d_moy#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,12), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(59) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#19, d_year#37, d_moy#38]

(60) Filter [codegen id : 1]
Input [3]: [d_date_sk#19, d_year#37, d_moy#38]
Condition : ((((isnotnull(d_moy#38) AND isnotnull(d_year#37)) AND (d_moy#38 = 12)) AND (d_year#37 = 1998)) AND isnotnull(d_date_sk#19))

(61) Project [codegen id : 1]
Output [1]: [d_date_sk#19]
Input [3]: [d_date_sk#19, d_year#37, d_moy#38]

(62) BroadcastExchange
Input [1]: [d_date_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

Subquery:2 Hosting operator id = 15 Hosting Expression = ws_sold_date_sk#15 IN dynamicpruning#9

Subquery:3 Hosting operator id = 43 Hosting Expression = ss_sold_date_sk#27 IN dynamicpruning#28
BroadcastExchange (67)
+- * Project (66)
   +- * Filter (65)
      +- * ColumnarToRow (64)
         +- Scan parquet spark_catalog.default.date_dim (63)


(63) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#29, d_month_seq#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(64) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#29, d_month_seq#39]

(65) Filter [codegen id : 1]
Input [2]: [d_date_sk#29, d_month_seq#39]
Condition : (((isnotnull(d_month_seq#39) AND (d_month_seq#39 >= Subquery scalar-subquery#40, [id=#41])) AND (d_month_seq#39 <= Subquery scalar-subquery#42, [id=#43])) AND isnotnull(d_date_sk#29))

(66) Project [codegen id : 1]
Output [1]: [d_date_sk#29]
Input [2]: [d_date_sk#29, d_month_seq#39]

(67) BroadcastExchange
Input [1]: [d_date_sk#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

Subquery:4 Hosting operator id = 65 Hosting Expression = Subquery scalar-subquery#40, [id=#41]
* HashAggregate (74)
+- Exchange (73)
   +- * HashAggregate (72)
      +- * Project (71)
         +- * Filter (70)
            +- * ColumnarToRow (69)
               +- Scan parquet spark_catalog.default.date_dim (68)


(68) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_month_seq#44, d_year#45, d_moy#46]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,12)]
ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>

(69) ColumnarToRow [codegen id : 1]
Input [3]: [d_month_seq#44, d_year#45, d_moy#46]

(70) Filter [codegen id : 1]
Input [3]: [d_month_seq#44, d_year#45, d_moy#46]
Condition : (((isnotnull(d_year#45) AND isnotnull(d_moy#46)) AND (d_year#45 = 1998)) AND (d_moy#46 = 12))

(71) Project [codegen id : 1]
Output [1]: [(d_month_seq#44 + 1) AS (d_month_seq + 1)#47]
Input [3]: [d_month_seq#44, d_year#45, d_moy#46]

(72) HashAggregate [codegen id : 1]
Input [1]: [(d_month_seq + 1)#47]
Keys [1]: [(d_month_seq + 1)#47]
Functions: []
Aggregate Attributes: []
Results [1]: [(d_month_seq + 1)#47]

(73) Exchange
Input [1]: [(d_month_seq + 1)#47]
Arguments: hashpartitioning((d_month_seq + 1)#47, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(74) HashAggregate [codegen id : 2]
Input [1]: [(d_month_seq + 1)#47]
Keys [1]: [(d_month_seq + 1)#47]
Functions: []
Aggregate Attributes: []
Results [1]: [(d_month_seq + 1)#47]

Subquery:5 Hosting operator id = 65 Hosting Expression = Subquery scalar-subquery#42, [id=#43]
* HashAggregate (81)
+- Exchange (80)
   +- * HashAggregate (79)
      +- * Project (78)
         +- * Filter (77)
            +- * ColumnarToRow (76)
               +- Scan parquet spark_catalog.default.date_dim (75)


(75) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_month_seq#48, d_year#49, d_moy#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,12)]
ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>

(76) ColumnarToRow [codegen id : 1]
Input [3]: [d_month_seq#48, d_year#49, d_moy#50]

(77) Filter [codegen id : 1]
Input [3]: [d_month_seq#48, d_year#49, d_moy#50]
Condition : (((isnotnull(d_year#49) AND isnotnull(d_moy#50)) AND (d_year#49 = 1998)) AND (d_moy#50 = 12))

(78) Project [codegen id : 1]
Output [1]: [(d_month_seq#48 + 3) AS (d_month_seq + 3)#51]
Input [3]: [d_month_seq#48, d_year#49, d_moy#50]

(79) HashAggregate [codegen id : 1]
Input [1]: [(d_month_seq + 3)#51]
Keys [1]: [(d_month_seq + 3)#51]
Functions: []
Aggregate Attributes: []
Results [1]: [(d_month_seq + 3)#51]

(80) Exchange
Input [1]: [(d_month_seq + 3)#51]
Arguments: hashpartitioning((d_month_seq + 3)#51, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(81) HashAggregate [codegen id : 2]
Input [1]: [(d_month_seq + 3)#51]
Keys [1]: [(d_month_seq + 3)#51]
Functions: []
Aggregate Attributes: []
Results [1]: [(d_month_seq + 3)#51]


