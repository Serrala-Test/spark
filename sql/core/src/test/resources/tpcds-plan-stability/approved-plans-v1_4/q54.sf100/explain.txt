== Physical Plan ==
TakeOrderedAndProject (67)
+- * HashAggregate (66)
   +- Exchange (65)
      +- * HashAggregate (64)
         +- * HashAggregate (63)
            +- Exchange (62)
               +- * HashAggregate (61)
                  +- * Project (60)
                     +- * BroadcastHashJoin Inner BuildRight (59)
                        :- * Project (53)
                        :  +- * BroadcastHashJoin Inner BuildRight (52)
                        :     :- * Project (47)
                        :     :  +- * SortMergeJoin Inner (46)
                        :     :     :- * Sort (40)
                        :     :     :  +- Exchange (39)
                        :     :     :     +- * Project (38)
                        :     :     :        +- * BroadcastHashJoin Inner BuildRight (37)
                        :     :     :           :- * HashAggregate (32)
                        :     :     :           :  +- Exchange (31)
                        :     :     :           :     +- * HashAggregate (30)
                        :     :     :           :        +- * Project (29)
                        :     :     :           :           +- * BroadcastHashJoin Inner BuildLeft (28)
                        :     :     :           :              :- BroadcastExchange (24)
                        :     :     :           :              :  +- * Project (23)
                        :     :     :           :              :     +- * BroadcastHashJoin Inner BuildRight (22)
                        :     :     :           :              :        :- * Project (16)
                        :     :     :           :              :        :  +- * BroadcastHashJoin Inner BuildLeft (15)
                        :     :     :           :              :        :     :- BroadcastExchange (10)
                        :     :     :           :              :        :     :  +- Union (9)
                        :     :     :           :              :        :     :     :- * Project (4)
                        :     :     :           :              :        :     :     :  +- * Filter (3)
                        :     :     :           :              :        :     :     :     +- * ColumnarToRow (2)
                        :     :     :           :              :        :     :     :        +- Scan parquet default.catalog_sales (1)
                        :     :     :           :              :        :     :     +- * Project (8)
                        :     :     :           :              :        :     :        +- * Filter (7)
                        :     :     :           :              :        :     :           +- * ColumnarToRow (6)
                        :     :     :           :              :        :     :              +- Scan parquet default.web_sales (5)
                        :     :     :           :              :        :     +- * Project (14)
                        :     :     :           :              :        :        +- * Filter (13)
                        :     :     :           :              :        :           +- * ColumnarToRow (12)
                        :     :     :           :              :        :              +- Scan parquet default.item (11)
                        :     :     :           :              :        +- BroadcastExchange (21)
                        :     :     :           :              :           +- * Project (20)
                        :     :     :           :              :              +- * Filter (19)
                        :     :     :           :              :                 +- * ColumnarToRow (18)
                        :     :     :           :              :                    +- Scan parquet default.date_dim (17)
                        :     :     :           :              +- * Filter (27)
                        :     :     :           :                 +- * ColumnarToRow (26)
                        :     :     :           :                    +- Scan parquet default.customer (25)
                        :     :     :           +- BroadcastExchange (36)
                        :     :     :              +- * Filter (35)
                        :     :     :                 +- * ColumnarToRow (34)
                        :     :     :                    +- Scan parquet default.store_sales (33)
                        :     :     +- * Sort (45)
                        :     :        +- Exchange (44)
                        :     :           +- * Filter (43)
                        :     :              +- * ColumnarToRow (42)
                        :     :                 +- Scan parquet default.customer_address (41)
                        :     +- BroadcastExchange (51)
                        :        +- * Filter (50)
                        :           +- * ColumnarToRow (49)
                        :              +- Scan parquet default.store (48)
                        +- BroadcastExchange (58)
                           +- * Project (57)
                              +- * Filter (56)
                                 +- * ColumnarToRow (55)
                                    +- Scan parquet default.date_dim (54)


(1) Scan parquet default.catalog_sales
Output [3]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#3), dynamicpruningexpression(cs_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_sold_date_sk#3]

(3) Filter [codegen id : 1]
Input [3]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_sold_date_sk#3]
Condition : (isnotnull(cs_item_sk#2) AND isnotnull(cs_bill_customer_sk#1))

(4) Project [codegen id : 1]
Output [3]: [cs_sold_date_sk#3 AS sold_date_sk#5, cs_bill_customer_sk#1 AS customer_sk#6, cs_item_sk#2 AS item_sk#7]
Input [3]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_sold_date_sk#3]

(5) Scan parquet default.web_sales
Output [3]: [ws_item_sk#8, ws_bill_customer_sk#9, ws_sold_date_sk#10]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#10), dynamicpruningexpression(ws_sold_date_sk#10 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int>

(6) ColumnarToRow [codegen id : 2]
Input [3]: [ws_item_sk#8, ws_bill_customer_sk#9, ws_sold_date_sk#10]

(7) Filter [codegen id : 2]
Input [3]: [ws_item_sk#8, ws_bill_customer_sk#9, ws_sold_date_sk#10]
Condition : (isnotnull(ws_item_sk#8) AND isnotnull(ws_bill_customer_sk#9))

(8) Project [codegen id : 2]
Output [3]: [ws_sold_date_sk#10 AS sold_date_sk#11, ws_bill_customer_sk#9 AS customer_sk#12, ws_item_sk#8 AS item_sk#13]
Input [3]: [ws_item_sk#8, ws_bill_customer_sk#9, ws_sold_date_sk#10]

(9) Union

(10) BroadcastExchange
Input [3]: [sold_date_sk#5, customer_sk#6, item_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#14]

(11) Scan parquet default.item
Output [3]: [i_item_sk#15, i_class#16, i_category#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), IsNotNull(i_class), EqualTo(i_category,Women), EqualTo(i_class,maternity), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(12) ColumnarToRow
Input [3]: [i_item_sk#15, i_class#16, i_category#17]

(13) Filter
Input [3]: [i_item_sk#15, i_class#16, i_category#17]
Condition : ((((isnotnull(i_category#17) AND isnotnull(i_class#16)) AND (i_category#17 = Women)) AND (i_class#16 = maternity)) AND isnotnull(i_item_sk#15))

(14) Project
Output [1]: [i_item_sk#15]
Input [3]: [i_item_sk#15, i_class#16, i_category#17]

(15) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [item_sk#7]
Right keys [1]: [i_item_sk#15]
Join condition: None

(16) Project [codegen id : 4]
Output [2]: [sold_date_sk#5, customer_sk#6]
Input [4]: [sold_date_sk#5, customer_sk#6, item_sk#7, i_item_sk#15]

(17) Scan parquet default.date_dim
Output [3]: [d_date_sk#18, d_year#19, d_moy#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,12), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(18) ColumnarToRow [codegen id : 3]
Input [3]: [d_date_sk#18, d_year#19, d_moy#20]

(19) Filter [codegen id : 3]
Input [3]: [d_date_sk#18, d_year#19, d_moy#20]
Condition : ((((isnotnull(d_moy#20) AND isnotnull(d_year#19)) AND (d_moy#20 = 12)) AND (d_year#19 = 1998)) AND isnotnull(d_date_sk#18))

(20) Project [codegen id : 3]
Output [1]: [d_date_sk#18]
Input [3]: [d_date_sk#18, d_year#19, d_moy#20]

(21) BroadcastExchange
Input [1]: [d_date_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21]

(22) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [sold_date_sk#5]
Right keys [1]: [d_date_sk#18]
Join condition: None

(23) Project [codegen id : 4]
Output [1]: [customer_sk#6]
Input [3]: [sold_date_sk#5, customer_sk#6, d_date_sk#18]

(24) BroadcastExchange
Input [1]: [customer_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22]

(25) Scan parquet default.customer
Output [2]: [c_customer_sk#23, c_current_addr_sk#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(26) ColumnarToRow
Input [2]: [c_customer_sk#23, c_current_addr_sk#24]

(27) Filter
Input [2]: [c_customer_sk#23, c_current_addr_sk#24]
Condition : (isnotnull(c_customer_sk#23) AND isnotnull(c_current_addr_sk#24))

(28) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [customer_sk#6]
Right keys [1]: [c_customer_sk#23]
Join condition: None

(29) Project [codegen id : 5]
Output [2]: [c_customer_sk#23, c_current_addr_sk#24]
Input [3]: [customer_sk#6, c_customer_sk#23, c_current_addr_sk#24]

(30) HashAggregate [codegen id : 5]
Input [2]: [c_customer_sk#23, c_current_addr_sk#24]
Keys [2]: [c_customer_sk#23, c_current_addr_sk#24]
Functions: []
Aggregate Attributes: []
Results [2]: [c_customer_sk#23, c_current_addr_sk#24]

(31) Exchange
Input [2]: [c_customer_sk#23, c_current_addr_sk#24]
Arguments: hashpartitioning(c_customer_sk#23, c_current_addr_sk#24, 5), ENSURE_REQUIREMENTS, [id=#25]

(32) HashAggregate [codegen id : 7]
Input [2]: [c_customer_sk#23, c_current_addr_sk#24]
Keys [2]: [c_customer_sk#23, c_current_addr_sk#24]
Functions: []
Aggregate Attributes: []
Results [2]: [c_customer_sk#23, c_current_addr_sk#24]

(33) Scan parquet default.store_sales
Output [3]: [ss_customer_sk#26, ss_ext_sales_price#27, ss_sold_date_sk#28]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#28), dynamicpruningexpression(ss_sold_date_sk#28 IN dynamicpruning#29)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_sales_price:decimal(7,2)>

(34) ColumnarToRow [codegen id : 6]
Input [3]: [ss_customer_sk#26, ss_ext_sales_price#27, ss_sold_date_sk#28]

(35) Filter [codegen id : 6]
Input [3]: [ss_customer_sk#26, ss_ext_sales_price#27, ss_sold_date_sk#28]
Condition : isnotnull(ss_customer_sk#26)

(36) BroadcastExchange
Input [3]: [ss_customer_sk#26, ss_ext_sales_price#27, ss_sold_date_sk#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#30]

(37) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [c_customer_sk#23]
Right keys [1]: [ss_customer_sk#26]
Join condition: None

(38) Project [codegen id : 7]
Output [4]: [c_customer_sk#23, c_current_addr_sk#24, ss_ext_sales_price#27, ss_sold_date_sk#28]
Input [5]: [c_customer_sk#23, c_current_addr_sk#24, ss_customer_sk#26, ss_ext_sales_price#27, ss_sold_date_sk#28]

(39) Exchange
Input [4]: [c_customer_sk#23, c_current_addr_sk#24, ss_ext_sales_price#27, ss_sold_date_sk#28]
Arguments: hashpartitioning(c_current_addr_sk#24, 5), ENSURE_REQUIREMENTS, [id=#31]

(40) Sort [codegen id : 8]
Input [4]: [c_customer_sk#23, c_current_addr_sk#24, ss_ext_sales_price#27, ss_sold_date_sk#28]
Arguments: [c_current_addr_sk#24 ASC NULLS FIRST], false, 0

(41) Scan parquet default.customer_address
Output [3]: [ca_address_sk#32, ca_county#33, ca_state#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county), IsNotNull(ca_state)]
ReadSchema: struct<ca_address_sk:int,ca_county:string,ca_state:string>

(42) ColumnarToRow [codegen id : 9]
Input [3]: [ca_address_sk#32, ca_county#33, ca_state#34]

(43) Filter [codegen id : 9]
Input [3]: [ca_address_sk#32, ca_county#33, ca_state#34]
Condition : ((isnotnull(ca_address_sk#32) AND isnotnull(ca_county#33)) AND isnotnull(ca_state#34))

(44) Exchange
Input [3]: [ca_address_sk#32, ca_county#33, ca_state#34]
Arguments: hashpartitioning(ca_address_sk#32, 5), ENSURE_REQUIREMENTS, [id=#35]

(45) Sort [codegen id : 10]
Input [3]: [ca_address_sk#32, ca_county#33, ca_state#34]
Arguments: [ca_address_sk#32 ASC NULLS FIRST], false, 0

(46) SortMergeJoin [codegen id : 13]
Left keys [1]: [c_current_addr_sk#24]
Right keys [1]: [ca_address_sk#32]
Join condition: None

(47) Project [codegen id : 13]
Output [5]: [c_customer_sk#23, ss_ext_sales_price#27, ss_sold_date_sk#28, ca_county#33, ca_state#34]
Input [7]: [c_customer_sk#23, c_current_addr_sk#24, ss_ext_sales_price#27, ss_sold_date_sk#28, ca_address_sk#32, ca_county#33, ca_state#34]

(48) Scan parquet default.store
Output [2]: [s_county#36, s_state#37]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_county), IsNotNull(s_state)]
ReadSchema: struct<s_county:string,s_state:string>

(49) ColumnarToRow [codegen id : 11]
Input [2]: [s_county#36, s_state#37]

(50) Filter [codegen id : 11]
Input [2]: [s_county#36, s_state#37]
Condition : (isnotnull(s_county#36) AND isnotnull(s_state#37))

(51) BroadcastExchange
Input [2]: [s_county#36, s_state#37]
Arguments: HashedRelationBroadcastMode(List(input[0, string, false], input[1, string, false]),false), [id=#38]

(52) BroadcastHashJoin [codegen id : 13]
Left keys [2]: [ca_county#33, ca_state#34]
Right keys [2]: [s_county#36, s_state#37]
Join condition: None

(53) Project [codegen id : 13]
Output [3]: [c_customer_sk#23, ss_ext_sales_price#27, ss_sold_date_sk#28]
Input [7]: [c_customer_sk#23, ss_ext_sales_price#27, ss_sold_date_sk#28, ca_county#33, ca_state#34, s_county#36, s_state#37]

(54) Scan parquet default.date_dim
Output [2]: [d_date_sk#18, d_month_seq#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(55) ColumnarToRow [codegen id : 12]
Input [2]: [d_date_sk#18, d_month_seq#39]

(56) Filter [codegen id : 12]
Input [2]: [d_date_sk#18, d_month_seq#39]
Condition : (((isnotnull(d_month_seq#39) AND (d_month_seq#39 >= Subquery scalar-subquery#40, [id=#41])) AND (d_month_seq#39 <= Subquery scalar-subquery#42, [id=#43])) AND isnotnull(d_date_sk#18))

(57) Project [codegen id : 12]
Output [1]: [d_date_sk#18]
Input [2]: [d_date_sk#18, d_month_seq#39]

(58) BroadcastExchange
Input [1]: [d_date_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#44]

(59) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_sold_date_sk#28]
Right keys [1]: [d_date_sk#18]
Join condition: None

(60) Project [codegen id : 13]
Output [2]: [c_customer_sk#23, ss_ext_sales_price#27]
Input [4]: [c_customer_sk#23, ss_ext_sales_price#27, ss_sold_date_sk#28, d_date_sk#18]

(61) HashAggregate [codegen id : 13]
Input [2]: [c_customer_sk#23, ss_ext_sales_price#27]
Keys [1]: [c_customer_sk#23]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#27))]
Aggregate Attributes [1]: [sum#45]
Results [2]: [c_customer_sk#23, sum#46]

(62) Exchange
Input [2]: [c_customer_sk#23, sum#46]
Arguments: hashpartitioning(c_customer_sk#23, 5), ENSURE_REQUIREMENTS, [id=#47]

(63) HashAggregate [codegen id : 14]
Input [2]: [c_customer_sk#23, sum#46]
Keys [1]: [c_customer_sk#23]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#27))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#27))#48]
Results [1]: [cast(CheckOverflow((promote_precision(MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#27))#48,17,2)) / 50.00), DecimalType(21,6), true) as int) AS segment#49]

(64) HashAggregate [codegen id : 14]
Input [1]: [segment#49]
Keys [1]: [segment#49]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#50]
Results [2]: [segment#49, count#51]

(65) Exchange
Input [2]: [segment#49, count#51]
Arguments: hashpartitioning(segment#49, 5), ENSURE_REQUIREMENTS, [id=#52]

(66) HashAggregate [codegen id : 15]
Input [2]: [segment#49, count#51]
Keys [1]: [segment#49]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#53]
Results [3]: [segment#49, count(1)#53 AS num_customers#54, (segment#49 * 50) AS segment_base#55]

(67) TakeOrderedAndProject
Input [3]: [segment#49, num_customers#54, segment_base#55]
Arguments: 100, [segment#49 ASC NULLS FIRST, num_customers#54 ASC NULLS FIRST], [segment#49, num_customers#54, segment_base#55]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#3 IN dynamicpruning#4
ReusedExchange (68)


(68) ReusedExchange [Reuses operator id: 21]
Output [1]: [d_date_sk#18]

Subquery:2 Hosting operator id = 5 Hosting Expression = ws_sold_date_sk#10 IN dynamicpruning#4

Subquery:3 Hosting operator id = 33 Hosting Expression = ss_sold_date_sk#28 IN dynamicpruning#29
ReusedExchange (69)


(69) ReusedExchange [Reuses operator id: 58]
Output [1]: [d_date_sk#18]

Subquery:4 Hosting operator id = 56 Hosting Expression = Subquery scalar-subquery#40, [id=#41]
* HashAggregate (76)
+- Exchange (75)
   +- * HashAggregate (74)
      +- * Project (73)
         +- * Filter (72)
            +- * ColumnarToRow (71)
               +- Scan parquet default.date_dim (70)


(70) Scan parquet default.date_dim
Output [3]: [d_month_seq#39, d_year#19, d_moy#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,12)]
ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>

(71) ColumnarToRow [codegen id : 1]
Input [3]: [d_month_seq#39, d_year#19, d_moy#20]

(72) Filter [codegen id : 1]
Input [3]: [d_month_seq#39, d_year#19, d_moy#20]
Condition : (((isnotnull(d_year#19) AND isnotnull(d_moy#20)) AND (d_year#19 = 1998)) AND (d_moy#20 = 12))

(73) Project [codegen id : 1]
Output [1]: [(d_month_seq#39 + 1) AS (d_month_seq + 1)#56]
Input [3]: [d_month_seq#39, d_year#19, d_moy#20]

(74) HashAggregate [codegen id : 1]
Input [1]: [(d_month_seq + 1)#56]
Keys [1]: [(d_month_seq + 1)#56]
Functions: []
Aggregate Attributes: []
Results [1]: [(d_month_seq + 1)#56]

(75) Exchange
Input [1]: [(d_month_seq + 1)#56]
Arguments: hashpartitioning((d_month_seq + 1)#56, 5), ENSURE_REQUIREMENTS, [id=#57]

(76) HashAggregate [codegen id : 2]
Input [1]: [(d_month_seq + 1)#56]
Keys [1]: [(d_month_seq + 1)#56]
Functions: []
Aggregate Attributes: []
Results [1]: [(d_month_seq + 1)#56]

Subquery:5 Hosting operator id = 56 Hosting Expression = Subquery scalar-subquery#42, [id=#43]
* HashAggregate (83)
+- Exchange (82)
   +- * HashAggregate (81)
      +- * Project (80)
         +- * Filter (79)
            +- * ColumnarToRow (78)
               +- Scan parquet default.date_dim (77)


(77) Scan parquet default.date_dim
Output [3]: [d_month_seq#39, d_year#19, d_moy#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,12)]
ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>

(78) ColumnarToRow [codegen id : 1]
Input [3]: [d_month_seq#39, d_year#19, d_moy#20]

(79) Filter [codegen id : 1]
Input [3]: [d_month_seq#39, d_year#19, d_moy#20]
Condition : (((isnotnull(d_year#19) AND isnotnull(d_moy#20)) AND (d_year#19 = 1998)) AND (d_moy#20 = 12))

(80) Project [codegen id : 1]
Output [1]: [(d_month_seq#39 + 3) AS (d_month_seq + 3)#58]
Input [3]: [d_month_seq#39, d_year#19, d_moy#20]

(81) HashAggregate [codegen id : 1]
Input [1]: [(d_month_seq + 3)#58]
Keys [1]: [(d_month_seq + 3)#58]
Functions: []
Aggregate Attributes: []
Results [1]: [(d_month_seq + 3)#58]

(82) Exchange
Input [1]: [(d_month_seq + 3)#58]
Arguments: hashpartitioning((d_month_seq + 3)#58, 5), ENSURE_REQUIREMENTS, [id=#59]

(83) HashAggregate [codegen id : 2]
Input [1]: [(d_month_seq + 3)#58]
Keys [1]: [(d_month_seq + 3)#58]
Functions: []
Aggregate Attributes: []
Results [1]: [(d_month_seq + 3)#58]


