== Physical Plan ==
TakeOrderedAndProject (121)
+- * BroadcastHashJoin Inner BuildRight (120)
   :- * Filter (100)
   :  +- * HashAggregate (99)
   :     +- Exchange (98)
   :        +- * HashAggregate (97)
   :           +- * Project (96)
   :              +- * BroadcastHashJoin Inner BuildRight (95)
   :                 :- * Project (76)
   :                 :  +- * BroadcastHashJoin Inner BuildRight (75)
   :                 :     :- * SortMergeJoin LeftSemi (73)
   :                 :     :  :- * Sort (5)
   :                 :     :  :  +- Exchange (4)
   :                 :     :  :     +- * Filter (3)
   :                 :     :  :        +- * ColumnarToRow (2)
   :                 :     :  :           +- Scan parquet default.store_sales (1)
   :                 :     :  +- * Sort (72)
   :                 :     :     +- Exchange (71)
   :                 :     :        +- * Project (70)
   :                 :     :           +- * BroadcastHashJoin Inner BuildRight (69)
   :                 :     :              :- * Filter (8)
   :                 :     :              :  +- * ColumnarToRow (7)
   :                 :     :              :     +- Scan parquet default.item (6)
   :                 :     :              +- BroadcastExchange (68)
   :                 :     :                 +- * HashAggregate (67)
   :                 :     :                    +- Exchange (66)
   :                 :     :                       +- * HashAggregate (65)
   :                 :     :                          +- * SortMergeJoin LeftSemi (64)
   :                 :     :                             :- * Sort (49)
   :                 :     :                             :  +- Exchange (48)
   :                 :     :                             :     +- * HashAggregate (47)
   :                 :     :                             :        +- Exchange (46)
   :                 :     :                             :           +- * HashAggregate (45)
   :                 :     :                             :              +- * Project (44)
   :                 :     :                             :                 +- * BroadcastHashJoin Inner BuildRight (43)
   :                 :     :                             :                    :- * Project (14)
   :                 :     :                             :                    :  +- * BroadcastHashJoin Inner BuildRight (13)
   :                 :     :                             :                    :     :- * Filter (11)
   :                 :     :                             :                    :     :  +- * ColumnarToRow (10)
   :                 :     :                             :                    :     :     +- Scan parquet default.store_sales (9)
   :                 :     :                             :                    :     +- ReusedExchange (12)
   :                 :     :                             :                    +- BroadcastExchange (42)
   :                 :     :                             :                       +- * SortMergeJoin LeftSemi (41)
   :                 :     :                             :                          :- * Sort (19)
   :                 :     :                             :                          :  +- Exchange (18)
   :                 :     :                             :                          :     +- * Filter (17)
   :                 :     :                             :                          :        +- * ColumnarToRow (16)
   :                 :     :                             :                          :           +- Scan parquet default.item (15)
   :                 :     :                             :                          +- * Sort (40)
   :                 :     :                             :                             +- Exchange (39)
   :                 :     :                             :                                +- * BroadcastHashJoin LeftSemi BuildRight (38)
   :                 :     :                             :                                   :- * Project (31)
   :                 :     :                             :                                   :  +- * BroadcastHashJoin Inner BuildRight (30)
   :                 :     :                             :                                   :     :- * Project (25)
   :                 :     :                             :                                   :     :  +- * BroadcastHashJoin Inner BuildRight (24)
   :                 :     :                             :                                   :     :     :- * Filter (22)
   :                 :     :                             :                                   :     :     :  +- * ColumnarToRow (21)
   :                 :     :                             :                                   :     :     :     +- Scan parquet default.catalog_sales (20)
   :                 :     :                             :                                   :     :     +- ReusedExchange (23)
   :                 :     :                             :                                   :     +- BroadcastExchange (29)
   :                 :     :                             :                                   :        +- * Filter (28)
   :                 :     :                             :                                   :           +- * ColumnarToRow (27)
   :                 :     :                             :                                   :              +- Scan parquet default.item (26)
   :                 :     :                             :                                   +- BroadcastExchange (37)
   :                 :     :                             :                                      +- Exchange (36)
   :                 :     :                             :                                         +- * Project (35)
   :                 :     :                             :                                            +- * Filter (34)
   :                 :     :                             :                                               +- * ColumnarToRow (33)
   :                 :     :                             :                                                  +- Scan parquet default.item (32)
   :                 :     :                             +- * Sort (63)
   :                 :     :                                +- Exchange (62)
   :                 :     :                                   +- * BroadcastHashJoin LeftSemi BuildRight (61)
   :                 :     :                                      :- * Project (58)
   :                 :     :                                      :  +- * BroadcastHashJoin Inner BuildRight (57)
   :                 :     :                                      :     :- * Project (55)
   :                 :     :                                      :     :  +- * BroadcastHashJoin Inner BuildRight (54)
   :                 :     :                                      :     :     :- * Filter (52)
   :                 :     :                                      :     :     :  +- * ColumnarToRow (51)
   :                 :     :                                      :     :     :     +- Scan parquet default.web_sales (50)
   :                 :     :                                      :     :     +- ReusedExchange (53)
   :                 :     :                                      :     +- ReusedExchange (56)
   :                 :     :                                      +- BroadcastExchange (60)
   :                 :     :                                         +- ReusedExchange (59)
   :                 :     +- ReusedExchange (74)
   :                 +- BroadcastExchange (94)
   :                    +- * SortMergeJoin LeftSemi (93)
   :                       :- * Sort (81)
   :                       :  +- Exchange (80)
   :                       :     +- * Filter (79)
   :                       :        +- * ColumnarToRow (78)
   :                       :           +- Scan parquet default.item (77)
   :                       +- * Sort (92)
   :                          +- Exchange (91)
   :                             +- * BroadcastHashJoin LeftSemi BuildRight (90)
   :                                :- * Project (87)
   :                                :  +- * BroadcastHashJoin Inner BuildRight (86)
   :                                :     :- * Filter (84)
   :                                :     :  +- * ColumnarToRow (83)
   :                                :     :     +- Scan parquet default.item (82)
   :                                :     +- ReusedExchange (85)
   :                                +- BroadcastExchange (89)
   :                                   +- ReusedExchange (88)
   +- BroadcastExchange (119)
      +- * Filter (118)
         +- * HashAggregate (117)
            +- Exchange (116)
               +- * HashAggregate (115)
                  +- * Project (114)
                     +- * BroadcastHashJoin Inner BuildRight (113)
                        :- * Project (111)
                        :  +- * BroadcastHashJoin Inner BuildRight (110)
                        :     :- * SortMergeJoin LeftSemi (108)
                        :     :  :- * Sort (105)
                        :     :  :  +- Exchange (104)
                        :     :  :     +- * Filter (103)
                        :     :  :        +- * ColumnarToRow (102)
                        :     :  :           +- Scan parquet default.store_sales (101)
                        :     :  +- * Sort (107)
                        :     :     +- ReusedExchange (106)
                        :     +- ReusedExchange (109)
                        +- ReusedExchange (112)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 32]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(8) Filter [codegen id : 32]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(9) Scan parquet default.store_sales
Output [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(10) ColumnarToRow [codegen id : 12]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]

(11) Filter [codegen id : 12]
Input [2]: [ss_item_sk#11, ss_sold_date_sk#12]
Condition : isnotnull(ss_item_sk#11)

(12) ReusedExchange [Reuses operator id: 154]
Output [1]: [d_date_sk#14]

(13) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ss_sold_date_sk#12]
Right keys [1]: [d_date_sk#14]
Join condition: None

(14) Project [codegen id : 12]
Output [1]: [ss_item_sk#11]
Input [3]: [ss_item_sk#11, ss_sold_date_sk#12, d_date_sk#14]

(15) Scan parquet default.item
Output [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(16) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(17) Filter [codegen id : 4]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Condition : (((isnotnull(i_item_sk#15) AND isnotnull(i_brand_id#16)) AND isnotnull(i_class_id#17)) AND isnotnull(i_category_id#18))

(18) Exchange
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: hashpartitioning(coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18), 5), ENSURE_REQUIREMENTS, [id=#19]

(19) Sort [codegen id : 5]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: [coalesce(i_brand_id#16, 0) ASC NULLS FIRST, isnull(i_brand_id#16) ASC NULLS FIRST, coalesce(i_class_id#17, 0) ASC NULLS FIRST, isnull(i_class_id#17) ASC NULLS FIRST, coalesce(i_category_id#18, 0) ASC NULLS FIRST, isnull(i_category_id#18) ASC NULLS FIRST], false, 0

(20) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#20, cs_sold_date_sk#21]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#21), dynamicpruningexpression(cs_sold_date_sk#21 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(21) ColumnarToRow [codegen id : 9]
Input [2]: [cs_item_sk#20, cs_sold_date_sk#21]

(22) Filter [codegen id : 9]
Input [2]: [cs_item_sk#20, cs_sold_date_sk#21]
Condition : isnotnull(cs_item_sk#20)

(23) ReusedExchange [Reuses operator id: 154]
Output [1]: [d_date_sk#22]

(24) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_sold_date_sk#21]
Right keys [1]: [d_date_sk#22]
Join condition: None

(25) Project [codegen id : 9]
Output [1]: [cs_item_sk#20]
Input [3]: [cs_item_sk#20, cs_sold_date_sk#21, d_date_sk#22]

(26) Scan parquet default.item
Output [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(27) ColumnarToRow [codegen id : 7]
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]

(28) Filter [codegen id : 7]
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Condition : isnotnull(i_item_sk#23)

(29) BroadcastExchange
Input [4]: [i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(30) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#20]
Right keys [1]: [i_item_sk#23]
Join condition: None

(31) Project [codegen id : 9]
Output [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Input [5]: [cs_item_sk#20, i_item_sk#23, i_brand_id#24, i_class_id#25, i_category_id#26]

(32) Scan parquet default.item
Output [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(33) ColumnarToRow [codegen id : 8]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(34) Filter [codegen id : 8]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Condition : (((isnotnull(i_item_sk#15) AND isnotnull(i_brand_id#16)) AND isnotnull(i_class_id#17)) AND isnotnull(i_category_id#18))

(35) Project [codegen id : 8]
Output [3]: [i_brand_id#16, i_class_id#17, i_category_id#18]
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(36) Exchange
Input [3]: [i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: hashpartitioning(coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18), 5), ENSURE_REQUIREMENTS, [id=#28]

(37) BroadcastExchange
Input [3]: [i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#29]

(38) BroadcastHashJoin [codegen id : 9]
Left keys [6]: [coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26)]
Right keys [6]: [coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18)]
Join condition: None

(39) Exchange
Input [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: hashpartitioning(coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26), 5), ENSURE_REQUIREMENTS, [id=#30]

(40) Sort [codegen id : 10]
Input [3]: [i_brand_id#24, i_class_id#25, i_category_id#26]
Arguments: [coalesce(i_brand_id#24, 0) ASC NULLS FIRST, isnull(i_brand_id#24) ASC NULLS FIRST, coalesce(i_class_id#25, 0) ASC NULLS FIRST, isnull(i_class_id#25) ASC NULLS FIRST, coalesce(i_category_id#26, 0) ASC NULLS FIRST, isnull(i_category_id#26) ASC NULLS FIRST], false, 0

(41) SortMergeJoin [codegen id : 11]
Left keys [6]: [coalesce(i_brand_id#16, 0), isnull(i_brand_id#16), coalesce(i_class_id#17, 0), isnull(i_class_id#17), coalesce(i_category_id#18, 0), isnull(i_category_id#18)]
Right keys [6]: [coalesce(i_brand_id#24, 0), isnull(i_brand_id#24), coalesce(i_class_id#25, 0), isnull(i_class_id#25), coalesce(i_category_id#26, 0), isnull(i_category_id#26)]
Join condition: None

(42) BroadcastExchange
Input [4]: [i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#31]

(43) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ss_item_sk#11]
Right keys [1]: [i_item_sk#15]
Join condition: None

(44) Project [codegen id : 12]
Output [3]: [i_brand_id#16 AS brand_id#32, i_class_id#17 AS class_id#33, i_category_id#18 AS category_id#34]
Input [5]: [ss_item_sk#11, i_item_sk#15, i_brand_id#16, i_class_id#17, i_category_id#18]

(45) HashAggregate [codegen id : 12]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Keys [3]: [brand_id#32, class_id#33, category_id#34]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#32, class_id#33, category_id#34]

(46) Exchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: hashpartitioning(brand_id#32, class_id#33, category_id#34, 5), ENSURE_REQUIREMENTS, [id=#35]

(47) HashAggregate [codegen id : 13]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Keys [3]: [brand_id#32, class_id#33, category_id#34]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#32, class_id#33, category_id#34]

(48) Exchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: hashpartitioning(coalesce(brand_id#32, 0), isnull(brand_id#32), coalesce(class_id#33, 0), isnull(class_id#33), coalesce(category_id#34, 0), isnull(category_id#34), 5), ENSURE_REQUIREMENTS, [id=#36]

(49) Sort [codegen id : 14]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: [coalesce(brand_id#32, 0) ASC NULLS FIRST, isnull(brand_id#32) ASC NULLS FIRST, coalesce(class_id#33, 0) ASC NULLS FIRST, isnull(class_id#33) ASC NULLS FIRST, coalesce(category_id#34, 0) ASC NULLS FIRST, isnull(category_id#34) ASC NULLS FIRST], false, 0

(50) Scan parquet default.web_sales
Output [2]: [ws_item_sk#37, ws_sold_date_sk#38]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#38), dynamicpruningexpression(ws_sold_date_sk#38 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(51) ColumnarToRow [codegen id : 28]
Input [2]: [ws_item_sk#37, ws_sold_date_sk#38]

(52) Filter [codegen id : 28]
Input [2]: [ws_item_sk#37, ws_sold_date_sk#38]
Condition : isnotnull(ws_item_sk#37)

(53) ReusedExchange [Reuses operator id: 154]
Output [1]: [d_date_sk#39]

(54) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [ws_sold_date_sk#38]
Right keys [1]: [d_date_sk#39]
Join condition: None

(55) Project [codegen id : 28]
Output [1]: [ws_item_sk#37]
Input [3]: [ws_item_sk#37, ws_sold_date_sk#38, d_date_sk#39]

(56) ReusedExchange [Reuses operator id: 29]
Output [4]: [i_item_sk#40, i_brand_id#41, i_class_id#42, i_category_id#43]

(57) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [ws_item_sk#37]
Right keys [1]: [i_item_sk#40]
Join condition: None

(58) Project [codegen id : 28]
Output [3]: [i_brand_id#41, i_class_id#42, i_category_id#43]
Input [5]: [ws_item_sk#37, i_item_sk#40, i_brand_id#41, i_class_id#42, i_category_id#43]

(59) ReusedExchange [Reuses operator id: 48]
Output [3]: [brand_id#32, class_id#33, category_id#34]

(60) BroadcastExchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#44]

(61) BroadcastHashJoin [codegen id : 28]
Left keys [6]: [coalesce(i_brand_id#41, 0), isnull(i_brand_id#41), coalesce(i_class_id#42, 0), isnull(i_class_id#42), coalesce(i_category_id#43, 0), isnull(i_category_id#43)]
Right keys [6]: [coalesce(brand_id#32, 0), isnull(brand_id#32), coalesce(class_id#33, 0), isnull(class_id#33), coalesce(category_id#34, 0), isnull(category_id#34)]
Join condition: None

(62) Exchange
Input [3]: [i_brand_id#41, i_class_id#42, i_category_id#43]
Arguments: hashpartitioning(coalesce(i_brand_id#41, 0), isnull(i_brand_id#41), coalesce(i_class_id#42, 0), isnull(i_class_id#42), coalesce(i_category_id#43, 0), isnull(i_category_id#43), 5), ENSURE_REQUIREMENTS, [id=#45]

(63) Sort [codegen id : 29]
Input [3]: [i_brand_id#41, i_class_id#42, i_category_id#43]
Arguments: [coalesce(i_brand_id#41, 0) ASC NULLS FIRST, isnull(i_brand_id#41) ASC NULLS FIRST, coalesce(i_class_id#42, 0) ASC NULLS FIRST, isnull(i_class_id#42) ASC NULLS FIRST, coalesce(i_category_id#43, 0) ASC NULLS FIRST, isnull(i_category_id#43) ASC NULLS FIRST], false, 0

(64) SortMergeJoin [codegen id : 30]
Left keys [6]: [coalesce(brand_id#32, 0), isnull(brand_id#32), coalesce(class_id#33, 0), isnull(class_id#33), coalesce(category_id#34, 0), isnull(category_id#34)]
Right keys [6]: [coalesce(i_brand_id#41, 0), isnull(i_brand_id#41), coalesce(i_class_id#42, 0), isnull(i_class_id#42), coalesce(i_category_id#43, 0), isnull(i_category_id#43)]
Join condition: None

(65) HashAggregate [codegen id : 30]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Keys [3]: [brand_id#32, class_id#33, category_id#34]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#32, class_id#33, category_id#34]

(66) Exchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: hashpartitioning(brand_id#32, class_id#33, category_id#34, 5), ENSURE_REQUIREMENTS, [id=#46]

(67) HashAggregate [codegen id : 31]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Keys [3]: [brand_id#32, class_id#33, category_id#34]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#32, class_id#33, category_id#34]

(68) BroadcastExchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#47]

(69) BroadcastHashJoin [codegen id : 32]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#32, class_id#33, category_id#34]
Join condition: None

(70) Project [codegen id : 32]
Output [1]: [i_item_sk#7 AS ss_item_sk#48]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#32, class_id#33, category_id#34]

(71) Exchange
Input [1]: [ss_item_sk#48]
Arguments: hashpartitioning(ss_item_sk#48, 5), ENSURE_REQUIREMENTS, [id=#49]

(72) Sort [codegen id : 33]
Input [1]: [ss_item_sk#48]
Arguments: [ss_item_sk#48 ASC NULLS FIRST], false, 0

(73) SortMergeJoin [codegen id : 70]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#48]
Join condition: None

(74) ReusedExchange [Reuses operator id: 145]
Output [1]: [d_date_sk#50]

(75) BroadcastHashJoin [codegen id : 70]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#50]
Join condition: None

(76) Project [codegen id : 70]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#50]

(77) Scan parquet default.item
Output [4]: [i_item_sk#51, i_brand_id#52, i_class_id#53, i_category_id#54]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(78) ColumnarToRow [codegen id : 35]
Input [4]: [i_item_sk#51, i_brand_id#52, i_class_id#53, i_category_id#54]

(79) Filter [codegen id : 35]
Input [4]: [i_item_sk#51, i_brand_id#52, i_class_id#53, i_category_id#54]
Condition : (((isnotnull(i_item_sk#51) AND isnotnull(i_brand_id#52)) AND isnotnull(i_class_id#53)) AND isnotnull(i_category_id#54))

(80) Exchange
Input [4]: [i_item_sk#51, i_brand_id#52, i_class_id#53, i_category_id#54]
Arguments: hashpartitioning(i_item_sk#51, 5), ENSURE_REQUIREMENTS, [id=#55]

(81) Sort [codegen id : 36]
Input [4]: [i_item_sk#51, i_brand_id#52, i_class_id#53, i_category_id#54]
Arguments: [i_item_sk#51 ASC NULLS FIRST], false, 0

(82) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(83) ColumnarToRow [codegen id : 67]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(84) Filter [codegen id : 67]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(85) ReusedExchange [Reuses operator id: 68]
Output [3]: [brand_id#32, class_id#33, category_id#34]

(86) BroadcastHashJoin [codegen id : 67]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#32, class_id#33, category_id#34]
Join condition: None

(87) Project [codegen id : 67]
Output [1]: [i_item_sk#7 AS ss_item_sk#48]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#32, class_id#33, category_id#34]

(88) ReusedExchange [Reuses operator id: 80]
Output [4]: [i_item_sk#51, i_brand_id#52, i_class_id#53, i_category_id#54]

(89) BroadcastExchange
Input [4]: [i_item_sk#51, i_brand_id#52, i_class_id#53, i_category_id#54]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#56]

(90) BroadcastHashJoin [codegen id : 67]
Left keys [1]: [ss_item_sk#48]
Right keys [1]: [i_item_sk#51]
Join condition: None

(91) Exchange
Input [1]: [ss_item_sk#48]
Arguments: hashpartitioning(ss_item_sk#48, 5), ENSURE_REQUIREMENTS, [id=#57]

(92) Sort [codegen id : 68]
Input [1]: [ss_item_sk#48]
Arguments: [ss_item_sk#48 ASC NULLS FIRST], false, 0

(93) SortMergeJoin [codegen id : 69]
Left keys [1]: [i_item_sk#51]
Right keys [1]: [ss_item_sk#48]
Join condition: None

(94) BroadcastExchange
Input [4]: [i_item_sk#51, i_brand_id#52, i_class_id#53, i_category_id#54]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#58]

(95) BroadcastHashJoin [codegen id : 70]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#51]
Join condition: None

(96) Project [codegen id : 70]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#52, i_class_id#53, i_category_id#54]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#51, i_brand_id#52, i_class_id#53, i_category_id#54]

(97) HashAggregate [codegen id : 70]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#52, i_class_id#53, i_category_id#54]
Keys [3]: [i_brand_id#52, i_class_id#53, i_category_id#54]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#59, isEmpty#60, count#61]
Results [6]: [i_brand_id#52, i_class_id#53, i_category_id#54, sum#62, isEmpty#63, count#64]

(98) Exchange
Input [6]: [i_brand_id#52, i_class_id#53, i_category_id#54, sum#62, isEmpty#63, count#64]
Arguments: hashpartitioning(i_brand_id#52, i_class_id#53, i_category_id#54, 5), ENSURE_REQUIREMENTS, [id=#65]

(99) HashAggregate [codegen id : 142]
Input [6]: [i_brand_id#52, i_class_id#53, i_category_id#54, sum#62, isEmpty#63, count#64]
Keys [3]: [i_brand_id#52, i_class_id#53, i_category_id#54]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#66, count(1)#67]
Results [6]: [store AS channel#68, i_brand_id#52, i_class_id#53, i_category_id#54, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#66 AS sales#69, count(1)#67 AS number_sales#70]

(100) Filter [codegen id : 142]
Input [6]: [channel#68, i_brand_id#52, i_class_id#53, i_category_id#54, sales#69, number_sales#70]
Condition : (isnotnull(sales#69) AND (cast(sales#69 as decimal(32,6)) > cast(Subquery scalar-subquery#71, [id=#72] as decimal(32,6))))

(101) Scan parquet default.store_sales
Output [4]: [ss_item_sk#73, ss_quantity#74, ss_list_price#75, ss_sold_date_sk#76]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#76), dynamicpruningexpression(ss_sold_date_sk#76 IN dynamicpruning#77)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(102) ColumnarToRow [codegen id : 71]
Input [4]: [ss_item_sk#73, ss_quantity#74, ss_list_price#75, ss_sold_date_sk#76]

(103) Filter [codegen id : 71]
Input [4]: [ss_item_sk#73, ss_quantity#74, ss_list_price#75, ss_sold_date_sk#76]
Condition : isnotnull(ss_item_sk#73)

(104) Exchange
Input [4]: [ss_item_sk#73, ss_quantity#74, ss_list_price#75, ss_sold_date_sk#76]
Arguments: hashpartitioning(ss_item_sk#73, 5), ENSURE_REQUIREMENTS, [id=#78]

(105) Sort [codegen id : 72]
Input [4]: [ss_item_sk#73, ss_quantity#74, ss_list_price#75, ss_sold_date_sk#76]
Arguments: [ss_item_sk#73 ASC NULLS FIRST], false, 0

(106) ReusedExchange [Reuses operator id: 71]
Output [1]: [ss_item_sk#48]

(107) Sort [codegen id : 103]
Input [1]: [ss_item_sk#48]
Arguments: [ss_item_sk#48 ASC NULLS FIRST], false, 0

(108) SortMergeJoin [codegen id : 140]
Left keys [1]: [ss_item_sk#73]
Right keys [1]: [ss_item_sk#48]
Join condition: None

(109) ReusedExchange [Reuses operator id: 159]
Output [1]: [d_date_sk#79]

(110) BroadcastHashJoin [codegen id : 140]
Left keys [1]: [ss_sold_date_sk#76]
Right keys [1]: [d_date_sk#79]
Join condition: None

(111) Project [codegen id : 140]
Output [3]: [ss_item_sk#73, ss_quantity#74, ss_list_price#75]
Input [5]: [ss_item_sk#73, ss_quantity#74, ss_list_price#75, ss_sold_date_sk#76, d_date_sk#79]

(112) ReusedExchange [Reuses operator id: 94]
Output [4]: [i_item_sk#80, i_brand_id#81, i_class_id#82, i_category_id#83]

(113) BroadcastHashJoin [codegen id : 140]
Left keys [1]: [ss_item_sk#73]
Right keys [1]: [i_item_sk#80]
Join condition: None

(114) Project [codegen id : 140]
Output [5]: [ss_quantity#74, ss_list_price#75, i_brand_id#81, i_class_id#82, i_category_id#83]
Input [7]: [ss_item_sk#73, ss_quantity#74, ss_list_price#75, i_item_sk#80, i_brand_id#81, i_class_id#82, i_category_id#83]

(115) HashAggregate [codegen id : 140]
Input [5]: [ss_quantity#74, ss_list_price#75, i_brand_id#81, i_class_id#82, i_category_id#83]
Keys [3]: [i_brand_id#81, i_class_id#82, i_category_id#83]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#75 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#84, isEmpty#85, count#86]
Results [6]: [i_brand_id#81, i_class_id#82, i_category_id#83, sum#87, isEmpty#88, count#89]

(116) Exchange
Input [6]: [i_brand_id#81, i_class_id#82, i_category_id#83, sum#87, isEmpty#88, count#89]
Arguments: hashpartitioning(i_brand_id#81, i_class_id#82, i_category_id#83, 5), ENSURE_REQUIREMENTS, [id=#90]

(117) HashAggregate [codegen id : 141]
Input [6]: [i_brand_id#81, i_class_id#82, i_category_id#83, sum#87, isEmpty#88, count#89]
Keys [3]: [i_brand_id#81, i_class_id#82, i_category_id#83]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#75 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#75 as decimal(12,2)))), DecimalType(18,2), true))#91, count(1)#92]
Results [6]: [store AS channel#93, i_brand_id#81, i_class_id#82, i_category_id#83, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#74 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#75 as decimal(12,2)))), DecimalType(18,2), true))#91 AS sales#94, count(1)#92 AS number_sales#95]

(118) Filter [codegen id : 141]
Input [6]: [channel#93, i_brand_id#81, i_class_id#82, i_category_id#83, sales#94, number_sales#95]
Condition : (isnotnull(sales#94) AND (cast(sales#94 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#71, [id=#72] as decimal(32,6))))

(119) BroadcastExchange
Input [6]: [channel#93, i_brand_id#81, i_class_id#82, i_category_id#83, sales#94, number_sales#95]
Arguments: HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true]),false), [id=#96]

(120) BroadcastHashJoin [codegen id : 142]
Left keys [3]: [i_brand_id#52, i_class_id#53, i_category_id#54]
Right keys [3]: [i_brand_id#81, i_class_id#82, i_category_id#83]
Join condition: None

(121) TakeOrderedAndProject
Input [12]: [channel#68, i_brand_id#52, i_class_id#53, i_category_id#54, sales#69, number_sales#70, channel#93, i_brand_id#81, i_class_id#82, i_category_id#83, sales#94, number_sales#95]
Arguments: 100, [i_brand_id#52 ASC NULLS FIRST, i_class_id#53 ASC NULLS FIRST, i_category_id#54 ASC NULLS FIRST], [channel#68, i_brand_id#52, i_class_id#53, i_category_id#54, sales#69, number_sales#70, channel#93, i_brand_id#81, i_class_id#82, i_category_id#83, sales#94, number_sales#95]

===== Subqueries =====

Subquery:1 Hosting operator id = 100 Hosting Expression = Subquery scalar-subquery#71, [id=#72]
* HashAggregate (140)
+- Exchange (139)
   +- * HashAggregate (138)
      +- Union (137)
         :- * Project (126)
         :  +- * BroadcastHashJoin Inner BuildRight (125)
         :     :- * ColumnarToRow (123)
         :     :  +- Scan parquet default.store_sales (122)
         :     +- ReusedExchange (124)
         :- * Project (131)
         :  +- * BroadcastHashJoin Inner BuildRight (130)
         :     :- * ColumnarToRow (128)
         :     :  +- Scan parquet default.catalog_sales (127)
         :     +- ReusedExchange (129)
         +- * Project (136)
            +- * BroadcastHashJoin Inner BuildRight (135)
               :- * ColumnarToRow (133)
               :  +- Scan parquet default.web_sales (132)
               +- ReusedExchange (134)


(122) Scan parquet default.store_sales
Output [3]: [ss_quantity#97, ss_list_price#98, ss_sold_date_sk#99]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#99), dynamicpruningexpression(ss_sold_date_sk#99 IN dynamicpruning#13)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(123) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#97, ss_list_price#98, ss_sold_date_sk#99]

(124) ReusedExchange [Reuses operator id: 154]
Output [1]: [d_date_sk#100]

(125) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#99]
Right keys [1]: [d_date_sk#100]
Join condition: None

(126) Project [codegen id : 2]
Output [2]: [ss_quantity#97 AS quantity#101, ss_list_price#98 AS list_price#102]
Input [4]: [ss_quantity#97, ss_list_price#98, ss_sold_date_sk#99, d_date_sk#100]

(127) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#103, cs_list_price#104, cs_sold_date_sk#105]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#105), dynamicpruningexpression(cs_sold_date_sk#105 IN dynamicpruning#13)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(128) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#103, cs_list_price#104, cs_sold_date_sk#105]

(129) ReusedExchange [Reuses operator id: 154]
Output [1]: [d_date_sk#106]

(130) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#105]
Right keys [1]: [d_date_sk#106]
Join condition: None

(131) Project [codegen id : 4]
Output [2]: [cs_quantity#103 AS quantity#107, cs_list_price#104 AS list_price#108]
Input [4]: [cs_quantity#103, cs_list_price#104, cs_sold_date_sk#105, d_date_sk#106]

(132) Scan parquet default.web_sales
Output [3]: [ws_quantity#109, ws_list_price#110, ws_sold_date_sk#111]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#111), dynamicpruningexpression(ws_sold_date_sk#111 IN dynamicpruning#13)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(133) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#109, ws_list_price#110, ws_sold_date_sk#111]

(134) ReusedExchange [Reuses operator id: 154]
Output [1]: [d_date_sk#112]

(135) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#111]
Right keys [1]: [d_date_sk#112]
Join condition: None

(136) Project [codegen id : 6]
Output [2]: [ws_quantity#109 AS quantity#113, ws_list_price#110 AS list_price#114]
Input [4]: [ws_quantity#109, ws_list_price#110, ws_sold_date_sk#111, d_date_sk#112]

(137) Union

(138) HashAggregate [codegen id : 7]
Input [2]: [quantity#101, list_price#102]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#101 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#102 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#115, count#116]
Results [2]: [sum#117, count#118]

(139) Exchange
Input [2]: [sum#117, count#118]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#119]

(140) HashAggregate [codegen id : 8]
Input [2]: [sum#117, count#118]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#101 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#102 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#101 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#102 as decimal(12,2)))), DecimalType(18,2), true))#120]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#101 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#102 as decimal(12,2)))), DecimalType(18,2), true))#120 AS average_sales#121]

Subquery:2 Hosting operator id = 122 Hosting Expression = ss_sold_date_sk#99 IN dynamicpruning#13

Subquery:3 Hosting operator id = 127 Hosting Expression = cs_sold_date_sk#105 IN dynamicpruning#13

Subquery:4 Hosting operator id = 132 Hosting Expression = ws_sold_date_sk#111 IN dynamicpruning#13

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (145)
+- * Project (144)
   +- * Filter (143)
      +- * ColumnarToRow (142)
         +- Scan parquet default.date_dim (141)


(141) Scan parquet default.date_dim
Output [2]: [d_date_sk#50, d_week_seq#122]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(142) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#50, d_week_seq#122]

(143) Filter [codegen id : 1]
Input [2]: [d_date_sk#50, d_week_seq#122]
Condition : ((isnotnull(d_week_seq#122) AND (d_week_seq#122 = Subquery scalar-subquery#123, [id=#124])) AND isnotnull(d_date_sk#50))

(144) Project [codegen id : 1]
Output [1]: [d_date_sk#50]
Input [2]: [d_date_sk#50, d_week_seq#122]

(145) BroadcastExchange
Input [1]: [d_date_sk#50]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#125]

Subquery:6 Hosting operator id = 143 Hosting Expression = Subquery scalar-subquery#123, [id=#124]
* Project (149)
+- * Filter (148)
   +- * ColumnarToRow (147)
      +- Scan parquet default.date_dim (146)


(146) Scan parquet default.date_dim
Output [4]: [d_week_seq#126, d_year#127, d_moy#128, d_dom#129]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,2000), EqualTo(d_moy,12), EqualTo(d_dom,11)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(147) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#126, d_year#127, d_moy#128, d_dom#129]

(148) Filter [codegen id : 1]
Input [4]: [d_week_seq#126, d_year#127, d_moy#128, d_dom#129]
Condition : (((((isnotnull(d_year#127) AND isnotnull(d_moy#128)) AND isnotnull(d_dom#129)) AND (d_year#127 = 2000)) AND (d_moy#128 = 12)) AND (d_dom#129 = 11))

(149) Project [codegen id : 1]
Output [1]: [d_week_seq#126]
Input [4]: [d_week_seq#126, d_year#127, d_moy#128, d_dom#129]

Subquery:7 Hosting operator id = 9 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#13
BroadcastExchange (154)
+- * Project (153)
   +- * Filter (152)
      +- * ColumnarToRow (151)
         +- Scan parquet default.date_dim (150)


(150) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#130]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(151) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#130]

(152) Filter [codegen id : 1]
Input [2]: [d_date_sk#14, d_year#130]
Condition : (((isnotnull(d_year#130) AND (d_year#130 >= 1999)) AND (d_year#130 <= 2001)) AND isnotnull(d_date_sk#14))

(153) Project [codegen id : 1]
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#130]

(154) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#131]

Subquery:8 Hosting operator id = 20 Hosting Expression = cs_sold_date_sk#21 IN dynamicpruning#13

Subquery:9 Hosting operator id = 50 Hosting Expression = ws_sold_date_sk#38 IN dynamicpruning#13

Subquery:10 Hosting operator id = 118 Hosting Expression = ReusedSubquery Subquery scalar-subquery#71, [id=#72]

Subquery:11 Hosting operator id = 101 Hosting Expression = ss_sold_date_sk#76 IN dynamicpruning#77
BroadcastExchange (159)
+- * Project (158)
   +- * Filter (157)
      +- * ColumnarToRow (156)
         +- Scan parquet default.date_dim (155)


(155) Scan parquet default.date_dim
Output [2]: [d_date_sk#79, d_week_seq#132]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(156) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#79, d_week_seq#132]

(157) Filter [codegen id : 1]
Input [2]: [d_date_sk#79, d_week_seq#132]
Condition : ((isnotnull(d_week_seq#132) AND (d_week_seq#132 = Subquery scalar-subquery#133, [id=#134])) AND isnotnull(d_date_sk#79))

(158) Project [codegen id : 1]
Output [1]: [d_date_sk#79]
Input [2]: [d_date_sk#79, d_week_seq#132]

(159) BroadcastExchange
Input [1]: [d_date_sk#79]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#135]

Subquery:12 Hosting operator id = 157 Hosting Expression = Subquery scalar-subquery#133, [id=#134]
* Project (163)
+- * Filter (162)
   +- * ColumnarToRow (161)
      +- Scan parquet default.date_dim (160)


(160) Scan parquet default.date_dim
Output [4]: [d_week_seq#136, d_year#137, d_moy#138, d_dom#139]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), EqualTo(d_dom,11)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(161) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#136, d_year#137, d_moy#138, d_dom#139]

(162) Filter [codegen id : 1]
Input [4]: [d_week_seq#136, d_year#137, d_moy#138, d_dom#139]
Condition : (((((isnotnull(d_year#137) AND isnotnull(d_moy#138)) AND isnotnull(d_dom#139)) AND (d_year#137 = 1999)) AND (d_moy#138 = 12)) AND (d_dom#139 = 11))

(163) Project [codegen id : 1]
Output [1]: [d_week_seq#136]
Input [4]: [d_week_seq#136, d_year#137, d_moy#138, d_dom#139]


