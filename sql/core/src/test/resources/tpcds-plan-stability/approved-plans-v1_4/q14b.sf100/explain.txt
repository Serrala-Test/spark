== Physical Plan ==
TakeOrderedAndProject (125)
+- * SortMergeJoin Inner (124)
   :- * Sort (94)
   :  +- * Project (93)
   :     +- * Filter (92)
   :        +- * HashAggregate (91)
   :           +- Exchange (90)
   :              +- * HashAggregate (89)
   :                 +- * Project (88)
   :                    +- * BroadcastHashJoin Inner BuildRight (87)
   :                       :- * Project (81)
   :                       :  +- * BroadcastHashJoin Inner BuildLeft (80)
   :                       :     :- BroadcastExchange (71)
   :                       :     :  +- SortMergeJoin LeftSemi (70)
   :                       :     :     :- * Sort (5)
   :                       :     :     :  +- Exchange (4)
   :                       :     :     :     +- * Filter (3)
   :                       :     :     :        +- * ColumnarToRow (2)
   :                       :     :     :           +- Scan parquet default.store_sales (1)
   :                       :     :     +- * Sort (69)
   :                       :     :        +- Exchange (68)
   :                       :     :           +- * Project (67)
   :                       :     :              +- * BroadcastHashJoin Inner BuildLeft (66)
   :                       :     :                 :- BroadcastExchange (9)
   :                       :     :                 :  +- * Filter (8)
   :                       :     :                 :     +- * ColumnarToRow (7)
   :                       :     :                 :        +- Scan parquet default.item (6)
   :                       :     :                 +- * HashAggregate (65)
   :                       :     :                    +- Exchange (64)
   :                       :     :                       +- * HashAggregate (63)
   :                       :     :                          +- SortMergeJoin LeftSemi (62)
   :                       :     :                             :- * Sort (47)
   :                       :     :                             :  +- Exchange (46)
   :                       :     :                             :     +- * HashAggregate (45)
   :                       :     :                             :        +- Exchange (44)
   :                       :     :                             :           +- * HashAggregate (43)
   :                       :     :                             :              +- SortMergeJoin LeftSemi (42)
   :                       :     :                             :                 :- * Sort (27)
   :                       :     :                             :                 :  +- Exchange (26)
   :                       :     :                             :                 :     +- * Project (25)
   :                       :     :                             :                 :        +- * BroadcastHashJoin Inner BuildRight (24)
   :                       :     :                             :                 :           :- * Project (18)
   :                       :     :                             :                 :           :  +- * BroadcastHashJoin Inner BuildLeft (17)
   :                       :     :                             :                 :           :     :- BroadcastExchange (13)
   :                       :     :                             :                 :           :     :  +- * Filter (12)
   :                       :     :                             :                 :           :     :     +- * ColumnarToRow (11)
   :                       :     :                             :                 :           :     :        +- Scan parquet default.store_sales (10)
   :                       :     :                             :                 :           :     +- * Filter (16)
   :                       :     :                             :                 :           :        +- * ColumnarToRow (15)
   :                       :     :                             :                 :           :           +- Scan parquet default.item (14)
   :                       :     :                             :                 :           +- BroadcastExchange (23)
   :                       :     :                             :                 :              +- * Project (22)
   :                       :     :                             :                 :                 +- * Filter (21)
   :                       :     :                             :                 :                    +- * ColumnarToRow (20)
   :                       :     :                             :                 :                       +- Scan parquet default.date_dim (19)
   :                       :     :                             :                 +- * Sort (41)
   :                       :     :                             :                    +- Exchange (40)
   :                       :     :                             :                       +- * Project (39)
   :                       :     :                             :                          +- * BroadcastHashJoin Inner BuildRight (38)
   :                       :     :                             :                             :- * Project (36)
   :                       :     :                             :                             :  +- * BroadcastHashJoin Inner BuildLeft (35)
   :                       :     :                             :                             :     :- BroadcastExchange (31)
   :                       :     :                             :                             :     :  +- * Filter (30)
   :                       :     :                             :                             :     :     +- * ColumnarToRow (29)
   :                       :     :                             :                             :     :        +- Scan parquet default.catalog_sales (28)
   :                       :     :                             :                             :     +- * Filter (34)
   :                       :     :                             :                             :        +- * ColumnarToRow (33)
   :                       :     :                             :                             :           +- Scan parquet default.item (32)
   :                       :     :                             :                             +- ReusedExchange (37)
   :                       :     :                             +- * Sort (61)
   :                       :     :                                +- Exchange (60)
   :                       :     :                                   +- * Project (59)
   :                       :     :                                      +- * BroadcastHashJoin Inner BuildRight (58)
   :                       :     :                                         :- * Project (56)
   :                       :     :                                         :  +- * BroadcastHashJoin Inner BuildLeft (55)
   :                       :     :                                         :     :- BroadcastExchange (51)
   :                       :     :                                         :     :  +- * Filter (50)
   :                       :     :                                         :     :     +- * ColumnarToRow (49)
   :                       :     :                                         :     :        +- Scan parquet default.web_sales (48)
   :                       :     :                                         :     +- * Filter (54)
   :                       :     :                                         :        +- * ColumnarToRow (53)
   :                       :     :                                         :           +- Scan parquet default.item (52)
   :                       :     :                                         +- ReusedExchange (57)
   :                       :     +- SortMergeJoin LeftSemi (79)
   :                       :        :- * Sort (76)
   :                       :        :  +- Exchange (75)
   :                       :        :     +- * Filter (74)
   :                       :        :        +- * ColumnarToRow (73)
   :                       :        :           +- Scan parquet default.item (72)
   :                       :        +- * Sort (78)
   :                       :           +- ReusedExchange (77)
   :                       +- BroadcastExchange (86)
   :                          +- * Project (85)
   :                             +- * Filter (84)
   :                                +- * ColumnarToRow (83)
   :                                   +- Scan parquet default.date_dim (82)
   +- * Sort (123)
      +- * Project (122)
         +- * Filter (121)
            +- * HashAggregate (120)
               +- Exchange (119)
                  +- * HashAggregate (118)
                     +- * Project (117)
                        +- * BroadcastHashJoin Inner BuildRight (116)
                           :- * Project (110)
                           :  +- * BroadcastHashJoin Inner BuildLeft (109)
                           :     :- BroadcastExchange (103)
                           :     :  +- SortMergeJoin LeftSemi (102)
                           :     :     :- * Sort (99)
                           :     :     :  +- Exchange (98)
                           :     :     :     +- * Filter (97)
                           :     :     :        +- * ColumnarToRow (96)
                           :     :     :           +- Scan parquet default.store_sales (95)
                           :     :     +- * Sort (101)
                           :     :        +- ReusedExchange (100)
                           :     +- SortMergeJoin LeftSemi (108)
                           :        :- * Sort (105)
                           :        :  +- ReusedExchange (104)
                           :        +- * Sort (107)
                           :           +- ReusedExchange (106)
                           +- BroadcastExchange (115)
                              +- * Project (114)
                                 +- * Filter (113)
                                    +- * ColumnarToRow (112)
                                       +- Scan parquet default.date_dim (111)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 3]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(8) Filter [codegen id : 3]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(9) BroadcastExchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(input[1, int, false], input[2, int, false], input[3, int, false]),false), [id=#11]

(10) Scan parquet default.store_sales
Output [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(11) ColumnarToRow [codegen id : 4]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]

(12) Filter [codegen id : 4]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(13) BroadcastExchange
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13]

(14) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(15) ColumnarToRow
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(16) Filter
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : (((isnotnull(i_item_sk#7) AND isnotnull(i_brand_id#8)) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(17) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join condition: None

(18) Project [codegen id : 6]
Output [4]: [ss_sold_date_sk#4, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [6]: [ss_item_sk#1, ss_sold_date_sk#4, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(19) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(20) ColumnarToRow [codegen id : 5]
Input [2]: [d_date_sk#14, d_year#15]

(21) Filter [codegen id : 5]
Input [2]: [d_date_sk#14, d_year#15]
Condition : (((isnotnull(d_year#15) AND (d_year#15 >= 1999)) AND (d_year#15 <= 2001)) AND isnotnull(d_date_sk#14))

(22) Project [codegen id : 5]
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#15]

(23) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(24) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#14]
Join condition: None

(25) Project [codegen id : 6]
Output [3]: [i_brand_id#8 AS brand_id#17, i_class_id#9 AS class_id#18, i_category_id#10 AS category_id#19]
Input [5]: [ss_sold_date_sk#4, i_brand_id#8, i_class_id#9, i_category_id#10, d_date_sk#14]

(26) Exchange
Input [3]: [brand_id#17, class_id#18, category_id#19]
Arguments: hashpartitioning(coalesce(brand_id#17, 0), isnull(brand_id#17), coalesce(class_id#18, 0), isnull(class_id#18), coalesce(category_id#19, 0), isnull(category_id#19), 5), ENSURE_REQUIREMENTS, [id=#20]

(27) Sort [codegen id : 7]
Input [3]: [brand_id#17, class_id#18, category_id#19]
Arguments: [coalesce(brand_id#17, 0) ASC NULLS FIRST, isnull(brand_id#17) ASC NULLS FIRST, coalesce(class_id#18, 0) ASC NULLS FIRST, isnull(class_id#18) ASC NULLS FIRST, coalesce(category_id#19, 0) ASC NULLS FIRST, isnull(category_id#19) ASC NULLS FIRST], false, 0

(28) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#21, cs_sold_date_sk#22]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#22), dynamicpruningexpression(cs_sold_date_sk#22 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(29) ColumnarToRow [codegen id : 8]
Input [2]: [cs_item_sk#21, cs_sold_date_sk#22]

(30) Filter [codegen id : 8]
Input [2]: [cs_item_sk#21, cs_sold_date_sk#22]
Condition : isnotnull(cs_item_sk#21)

(31) BroadcastExchange
Input [2]: [cs_item_sk#21, cs_sold_date_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#23]

(32) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(33) ColumnarToRow
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(34) Filter
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : isnotnull(i_item_sk#7)

(35) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_item_sk#21]
Right keys [1]: [i_item_sk#7]
Join condition: None

(36) Project [codegen id : 10]
Output [4]: [cs_sold_date_sk#22, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [6]: [cs_item_sk#21, cs_sold_date_sk#22, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(37) ReusedExchange [Reuses operator id: 23]
Output [1]: [d_date_sk#14]

(38) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#22]
Right keys [1]: [d_date_sk#14]
Join condition: None

(39) Project [codegen id : 10]
Output [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Input [5]: [cs_sold_date_sk#22, i_brand_id#8, i_class_id#9, i_category_id#10, d_date_sk#14]

(40) Exchange
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10), 5), ENSURE_REQUIREMENTS, [id=#24]

(41) Sort [codegen id : 11]
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [coalesce(i_brand_id#8, 0) ASC NULLS FIRST, isnull(i_brand_id#8) ASC NULLS FIRST, coalesce(i_class_id#9, 0) ASC NULLS FIRST, isnull(i_class_id#9) ASC NULLS FIRST, coalesce(i_category_id#10, 0) ASC NULLS FIRST, isnull(i_category_id#10) ASC NULLS FIRST], false, 0

(42) SortMergeJoin
Left keys [6]: [coalesce(brand_id#17, 0), isnull(brand_id#17), coalesce(class_id#18, 0), isnull(class_id#18), coalesce(category_id#19, 0), isnull(category_id#19)]
Right keys [6]: [coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10)]
Join condition: None

(43) HashAggregate [codegen id : 12]
Input [3]: [brand_id#17, class_id#18, category_id#19]
Keys [3]: [brand_id#17, class_id#18, category_id#19]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#17, class_id#18, category_id#19]

(44) Exchange
Input [3]: [brand_id#17, class_id#18, category_id#19]
Arguments: hashpartitioning(brand_id#17, class_id#18, category_id#19, 5), ENSURE_REQUIREMENTS, [id=#25]

(45) HashAggregate [codegen id : 13]
Input [3]: [brand_id#17, class_id#18, category_id#19]
Keys [3]: [brand_id#17, class_id#18, category_id#19]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#17, class_id#18, category_id#19]

(46) Exchange
Input [3]: [brand_id#17, class_id#18, category_id#19]
Arguments: hashpartitioning(coalesce(brand_id#17, 0), isnull(brand_id#17), coalesce(class_id#18, 0), isnull(class_id#18), coalesce(category_id#19, 0), isnull(category_id#19), 5), ENSURE_REQUIREMENTS, [id=#26]

(47) Sort [codegen id : 14]
Input [3]: [brand_id#17, class_id#18, category_id#19]
Arguments: [coalesce(brand_id#17, 0) ASC NULLS FIRST, isnull(brand_id#17) ASC NULLS FIRST, coalesce(class_id#18, 0) ASC NULLS FIRST, isnull(class_id#18) ASC NULLS FIRST, coalesce(category_id#19, 0) ASC NULLS FIRST, isnull(category_id#19) ASC NULLS FIRST], false, 0

(48) Scan parquet default.web_sales
Output [2]: [ws_item_sk#27, ws_sold_date_sk#28]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#28), dynamicpruningexpression(ws_sold_date_sk#28 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(49) ColumnarToRow [codegen id : 15]
Input [2]: [ws_item_sk#27, ws_sold_date_sk#28]

(50) Filter [codegen id : 15]
Input [2]: [ws_item_sk#27, ws_sold_date_sk#28]
Condition : isnotnull(ws_item_sk#27)

(51) BroadcastExchange
Input [2]: [ws_item_sk#27, ws_sold_date_sk#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(52) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(53) ColumnarToRow
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(54) Filter
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : isnotnull(i_item_sk#7)

(55) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_item_sk#27]
Right keys [1]: [i_item_sk#7]
Join condition: None

(56) Project [codegen id : 17]
Output [4]: [ws_sold_date_sk#28, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [6]: [ws_item_sk#27, ws_sold_date_sk#28, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(57) ReusedExchange [Reuses operator id: 23]
Output [1]: [d_date_sk#14]

(58) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_sold_date_sk#28]
Right keys [1]: [d_date_sk#14]
Join condition: None

(59) Project [codegen id : 17]
Output [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Input [5]: [ws_sold_date_sk#28, i_brand_id#8, i_class_id#9, i_category_id#10, d_date_sk#14]

(60) Exchange
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10), 5), ENSURE_REQUIREMENTS, [id=#30]

(61) Sort [codegen id : 18]
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [coalesce(i_brand_id#8, 0) ASC NULLS FIRST, isnull(i_brand_id#8) ASC NULLS FIRST, coalesce(i_class_id#9, 0) ASC NULLS FIRST, isnull(i_class_id#9) ASC NULLS FIRST, coalesce(i_category_id#10, 0) ASC NULLS FIRST, isnull(i_category_id#10) ASC NULLS FIRST], false, 0

(62) SortMergeJoin
Left keys [6]: [coalesce(brand_id#17, 0), isnull(brand_id#17), coalesce(class_id#18, 0), isnull(class_id#18), coalesce(category_id#19, 0), isnull(category_id#19)]
Right keys [6]: [coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10)]
Join condition: None

(63) HashAggregate [codegen id : 19]
Input [3]: [brand_id#17, class_id#18, category_id#19]
Keys [3]: [brand_id#17, class_id#18, category_id#19]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#17, class_id#18, category_id#19]

(64) Exchange
Input [3]: [brand_id#17, class_id#18, category_id#19]
Arguments: hashpartitioning(brand_id#17, class_id#18, category_id#19, 5), ENSURE_REQUIREMENTS, [id=#31]

(65) HashAggregate
Input [3]: [brand_id#17, class_id#18, category_id#19]
Keys [3]: [brand_id#17, class_id#18, category_id#19]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#17, class_id#18, category_id#19]

(66) BroadcastHashJoin [codegen id : 20]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#17, class_id#18, category_id#19]
Join condition: None

(67) Project [codegen id : 20]
Output [1]: [i_item_sk#7 AS ss_item_sk#32]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#17, class_id#18, category_id#19]

(68) Exchange
Input [1]: [ss_item_sk#32]
Arguments: hashpartitioning(ss_item_sk#32, 5), ENSURE_REQUIREMENTS, [id=#33]

(69) Sort [codegen id : 21]
Input [1]: [ss_item_sk#32]
Arguments: [ss_item_sk#32 ASC NULLS FIRST], false, 0

(70) SortMergeJoin
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#32]
Join condition: None

(71) BroadcastExchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#34]

(72) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(73) ColumnarToRow [codegen id : 22]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(74) Filter [codegen id : 22]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : (((isnotnull(i_item_sk#7) AND isnotnull(i_brand_id#8)) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(75) Exchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(i_item_sk#7, 5), ENSURE_REQUIREMENTS, [id=#35]

(76) Sort [codegen id : 23]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [i_item_sk#7 ASC NULLS FIRST], false, 0

(77) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#32]

(78) Sort [codegen id : 42]
Input [1]: [ss_item_sk#32]
Arguments: [ss_item_sk#32 ASC NULLS FIRST], false, 0

(79) SortMergeJoin
Left keys [1]: [i_item_sk#7]
Right keys [1]: [ss_item_sk#32]
Join condition: None

(80) BroadcastHashJoin [codegen id : 44]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join condition: None

(81) Project [codegen id : 44]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(82) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_week_seq#36]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(83) ColumnarToRow [codegen id : 43]
Input [2]: [d_date_sk#14, d_week_seq#36]

(84) Filter [codegen id : 43]
Input [2]: [d_date_sk#14, d_week_seq#36]
Condition : ((isnotnull(d_week_seq#36) AND (d_week_seq#36 = Subquery scalar-subquery#37, [id=#38])) AND isnotnull(d_date_sk#14))

(85) Project [codegen id : 43]
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_week_seq#36]

(86) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#39]

(87) BroadcastHashJoin [codegen id : 44]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#14]
Join condition: None

(88) Project [codegen id : 44]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#8, i_class_id#9, i_category_id#10, d_date_sk#14]

(89) HashAggregate [codegen id : 44]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#40, isEmpty#41, count#42]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#43, isEmpty#44, count#45]

(90) Exchange
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#43, isEmpty#44, count#45]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#46]

(91) HashAggregate [codegen id : 45]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#43, isEmpty#44, count#45]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#47, count(1)#48]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#47 AS sales#49, count(1)#48 AS number_sales#50, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#47 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#51]

(92) Filter [codegen id : 45]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#49, number_sales#50, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#51]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#51) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#51 as decimal(32,6)) > cast(Subquery scalar-subquery#52, [id=#53] as decimal(32,6))))

(93) Project [codegen id : 45]
Output [6]: [store AS channel#54, i_brand_id#8, i_class_id#9, i_category_id#10, sales#49, number_sales#50]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#49, number_sales#50, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#51]

(94) Sort [codegen id : 45]
Input [6]: [channel#54, i_brand_id#8, i_class_id#9, i_category_id#10, sales#49, number_sales#50]
Arguments: [i_brand_id#8 ASC NULLS FIRST, i_class_id#9 ASC NULLS FIRST, i_category_id#10 ASC NULLS FIRST], false, 0

(95) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#55)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(96) ColumnarToRow [codegen id : 46]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(97) Filter [codegen id : 46]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(98) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#56]

(99) Sort [codegen id : 47]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(100) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#32]

(101) Sort [codegen id : 66]
Input [1]: [ss_item_sk#32]
Arguments: [ss_item_sk#32 ASC NULLS FIRST], false, 0

(102) SortMergeJoin
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#32]
Join condition: None

(103) BroadcastExchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#57]

(104) ReusedExchange [Reuses operator id: 75]
Output [4]: [i_item_sk#58, i_brand_id#59, i_class_id#60, i_category_id#61]

(105) Sort [codegen id : 68]
Input [4]: [i_item_sk#58, i_brand_id#59, i_class_id#60, i_category_id#61]
Arguments: [i_item_sk#58 ASC NULLS FIRST], false, 0

(106) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#32]

(107) Sort [codegen id : 87]
Input [1]: [ss_item_sk#32]
Arguments: [ss_item_sk#32 ASC NULLS FIRST], false, 0

(108) SortMergeJoin
Left keys [1]: [i_item_sk#58]
Right keys [1]: [ss_item_sk#32]
Join condition: None

(109) BroadcastHashJoin [codegen id : 89]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#58]
Join condition: None

(110) Project [codegen id : 89]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#59, i_class_id#60, i_category_id#61]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#58, i_brand_id#59, i_class_id#60, i_category_id#61]

(111) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_week_seq#36]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(112) ColumnarToRow [codegen id : 88]
Input [2]: [d_date_sk#14, d_week_seq#36]

(113) Filter [codegen id : 88]
Input [2]: [d_date_sk#14, d_week_seq#36]
Condition : ((isnotnull(d_week_seq#36) AND (d_week_seq#36 = Subquery scalar-subquery#62, [id=#63])) AND isnotnull(d_date_sk#14))

(114) Project [codegen id : 88]
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_week_seq#36]

(115) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#64]

(116) BroadcastHashJoin [codegen id : 89]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#14]
Join condition: None

(117) Project [codegen id : 89]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#59, i_class_id#60, i_category_id#61]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#59, i_class_id#60, i_category_id#61, d_date_sk#14]

(118) HashAggregate [codegen id : 89]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#59, i_class_id#60, i_category_id#61]
Keys [3]: [i_brand_id#59, i_class_id#60, i_category_id#61]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#65, isEmpty#66, count#67]
Results [6]: [i_brand_id#59, i_class_id#60, i_category_id#61, sum#68, isEmpty#69, count#70]

(119) Exchange
Input [6]: [i_brand_id#59, i_class_id#60, i_category_id#61, sum#68, isEmpty#69, count#70]
Arguments: hashpartitioning(i_brand_id#59, i_class_id#60, i_category_id#61, 5), ENSURE_REQUIREMENTS, [id=#71]

(120) HashAggregate [codegen id : 90]
Input [6]: [i_brand_id#59, i_class_id#60, i_category_id#61, sum#68, isEmpty#69, count#70]
Keys [3]: [i_brand_id#59, i_class_id#60, i_category_id#61]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#72, count(1)#73]
Results [6]: [i_brand_id#59, i_class_id#60, i_category_id#61, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#72 AS sales#74, count(1)#73 AS number_sales#75, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#72 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#76]

(121) Filter [codegen id : 90]
Input [6]: [i_brand_id#59, i_class_id#60, i_category_id#61, sales#74, number_sales#75, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#76]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#76) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#76 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#52, [id=#53] as decimal(32,6))))

(122) Project [codegen id : 90]
Output [6]: [store AS channel#77, i_brand_id#59, i_class_id#60, i_category_id#61, sales#74, number_sales#75]
Input [6]: [i_brand_id#59, i_class_id#60, i_category_id#61, sales#74, number_sales#75, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#76]

(123) Sort [codegen id : 90]
Input [6]: [channel#77, i_brand_id#59, i_class_id#60, i_category_id#61, sales#74, number_sales#75]
Arguments: [i_brand_id#59 ASC NULLS FIRST, i_class_id#60 ASC NULLS FIRST, i_category_id#61 ASC NULLS FIRST], false, 0

(124) SortMergeJoin [codegen id : 91]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [i_brand_id#59, i_class_id#60, i_category_id#61]
Join condition: None

(125) TakeOrderedAndProject
Input [12]: [channel#54, i_brand_id#8, i_class_id#9, i_category_id#10, sales#49, number_sales#50, channel#77, i_brand_id#59, i_class_id#60, i_category_id#61, sales#74, number_sales#75]
Arguments: 100, [i_brand_id#8 ASC NULLS FIRST, i_class_id#9 ASC NULLS FIRST, i_category_id#10 ASC NULLS FIRST], [channel#54, i_brand_id#8, i_class_id#9, i_category_id#10, sales#49, number_sales#50, channel#77, i_brand_id#59, i_class_id#60, i_category_id#61, sales#74, number_sales#75]

===== Subqueries =====

Subquery:1 Hosting operator id = 92 Hosting Expression = Subquery scalar-subquery#52, [id=#53]
* HashAggregate (156)
+- Exchange (155)
   +- * HashAggregate (154)
      +- Union (153)
         :- * Project (134)
         :  +- * BroadcastHashJoin Inner BuildLeft (133)
         :     :- BroadcastExchange (128)
         :     :  +- * ColumnarToRow (127)
         :     :     +- Scan parquet default.store_sales (126)
         :     +- * Project (132)
         :        +- * Filter (131)
         :           +- * ColumnarToRow (130)
         :              +- Scan parquet default.date_dim (129)
         :- * Project (143)
         :  +- * BroadcastHashJoin Inner BuildLeft (142)
         :     :- BroadcastExchange (137)
         :     :  +- * ColumnarToRow (136)
         :     :     +- Scan parquet default.catalog_sales (135)
         :     +- * Project (141)
         :        +- * Filter (140)
         :           +- * ColumnarToRow (139)
         :              +- Scan parquet default.date_dim (138)
         +- * Project (152)
            +- * BroadcastHashJoin Inner BuildLeft (151)
               :- BroadcastExchange (146)
               :  +- * ColumnarToRow (145)
               :     +- Scan parquet default.web_sales (144)
               +- * Project (150)
                  +- * Filter (149)
                     +- * ColumnarToRow (148)
                        +- Scan parquet default.date_dim (147)


(126) Scan parquet default.store_sales
Output [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(true)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(127) ColumnarToRow [codegen id : 1]
Input [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(128) BroadcastExchange
Input [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#78]

(129) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(130) ColumnarToRow
Input [2]: [d_date_sk#14, d_year#15]

(131) Filter
Input [2]: [d_date_sk#14, d_year#15]
Condition : (((isnotnull(d_year#15) AND (d_year#15 >= 1999)) AND (d_year#15 <= 2001)) AND isnotnull(d_date_sk#14))

(132) Project
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#15]

(133) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#14]
Join condition: None

(134) Project [codegen id : 2]
Output [2]: [ss_quantity#2 AS quantity#79, ss_list_price#3 AS list_price#80]
Input [4]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#14]

(135) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#81, cs_list_price#82, cs_sold_date_sk#22]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#22), dynamicpruningexpression(true)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(136) ColumnarToRow [codegen id : 3]
Input [3]: [cs_quantity#81, cs_list_price#82, cs_sold_date_sk#22]

(137) BroadcastExchange
Input [3]: [cs_quantity#81, cs_list_price#82, cs_sold_date_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#83]

(138) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(139) ColumnarToRow
Input [2]: [d_date_sk#14, d_year#15]

(140) Filter
Input [2]: [d_date_sk#14, d_year#15]
Condition : (((isnotnull(d_year#15) AND (d_year#15 >= 1999)) AND (d_year#15 <= 2001)) AND isnotnull(d_date_sk#14))

(141) Project
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#15]

(142) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#22]
Right keys [1]: [d_date_sk#14]
Join condition: None

(143) Project [codegen id : 4]
Output [2]: [cs_quantity#81 AS quantity#84, cs_list_price#82 AS list_price#85]
Input [4]: [cs_quantity#81, cs_list_price#82, cs_sold_date_sk#22, d_date_sk#14]

(144) Scan parquet default.web_sales
Output [3]: [ws_quantity#86, ws_list_price#87, ws_sold_date_sk#28]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#28), dynamicpruningexpression(true)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(145) ColumnarToRow [codegen id : 5]
Input [3]: [ws_quantity#86, ws_list_price#87, ws_sold_date_sk#28]

(146) BroadcastExchange
Input [3]: [ws_quantity#86, ws_list_price#87, ws_sold_date_sk#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#88]

(147) Scan parquet default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(148) ColumnarToRow
Input [2]: [d_date_sk#14, d_year#15]

(149) Filter
Input [2]: [d_date_sk#14, d_year#15]
Condition : (((isnotnull(d_year#15) AND (d_year#15 >= 1999)) AND (d_year#15 <= 2001)) AND isnotnull(d_date_sk#14))

(150) Project
Output [1]: [d_date_sk#14]
Input [2]: [d_date_sk#14, d_year#15]

(151) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#28]
Right keys [1]: [d_date_sk#14]
Join condition: None

(152) Project [codegen id : 6]
Output [2]: [ws_quantity#86 AS quantity#89, ws_list_price#87 AS list_price#90]
Input [4]: [ws_quantity#86, ws_list_price#87, ws_sold_date_sk#28, d_date_sk#14]

(153) Union

(154) HashAggregate [codegen id : 7]
Input [2]: [quantity#79, list_price#80]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#79 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#80 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#91, count#92]
Results [2]: [sum#93, count#94]

(155) Exchange
Input [2]: [sum#93, count#94]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#95]

(156) HashAggregate [codegen id : 8]
Input [2]: [sum#93, count#94]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#79 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#80 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#79 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#80 as decimal(12,2)))), DecimalType(18,2), true))#96]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#79 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#80 as decimal(12,2)))), DecimalType(18,2), true))#96 AS average_sales#97]

Subquery:2 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (157)


(157) ReusedExchange [Reuses operator id: 86]
Output [1]: [d_date_sk#14]

Subquery:3 Hosting operator id = 10 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#12
ReusedExchange (158)


(158) ReusedExchange [Reuses operator id: 23]
Output [1]: [d_date_sk#14]

Subquery:4 Hosting operator id = 28 Hosting Expression = cs_sold_date_sk#22 IN dynamicpruning#12

Subquery:5 Hosting operator id = 48 Hosting Expression = ws_sold_date_sk#28 IN dynamicpruning#12

Subquery:6 Hosting operator id = 84 Hosting Expression = Subquery scalar-subquery#37, [id=#38]
* Project (162)
+- * Filter (161)
   +- * ColumnarToRow (160)
      +- Scan parquet default.date_dim (159)


(159) Scan parquet default.date_dim
Output [4]: [d_week_seq#36, d_year#15, d_moy#98, d_dom#99]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,2000), EqualTo(d_moy,12), EqualTo(d_dom,11)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(160) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#36, d_year#15, d_moy#98, d_dom#99]

(161) Filter [codegen id : 1]
Input [4]: [d_week_seq#36, d_year#15, d_moy#98, d_dom#99]
Condition : (((((isnotnull(d_year#15) AND isnotnull(d_moy#98)) AND isnotnull(d_dom#99)) AND (d_year#15 = 2000)) AND (d_moy#98 = 12)) AND (d_dom#99 = 11))

(162) Project [codegen id : 1]
Output [1]: [d_week_seq#36]
Input [4]: [d_week_seq#36, d_year#15, d_moy#98, d_dom#99]

Subquery:7 Hosting operator id = 121 Hosting Expression = ReusedSubquery Subquery scalar-subquery#52, [id=#53]

Subquery:8 Hosting operator id = 95 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#55
ReusedExchange (163)


(163) ReusedExchange [Reuses operator id: 115]
Output [1]: [d_date_sk#14]

Subquery:9 Hosting operator id = 113 Hosting Expression = Subquery scalar-subquery#62, [id=#63]
* Project (167)
+- * Filter (166)
   +- * ColumnarToRow (165)
      +- Scan parquet default.date_dim (164)


(164) Scan parquet default.date_dim
Output [4]: [d_week_seq#36, d_year#15, d_moy#98, d_dom#99]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), EqualTo(d_dom,11)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(165) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#36, d_year#15, d_moy#98, d_dom#99]

(166) Filter [codegen id : 1]
Input [4]: [d_week_seq#36, d_year#15, d_moy#98, d_dom#99]
Condition : (((((isnotnull(d_year#15) AND isnotnull(d_moy#98)) AND isnotnull(d_dom#99)) AND (d_year#15 = 1999)) AND (d_moy#98 = 12)) AND (d_dom#99 = 11))

(167) Project [codegen id : 1]
Output [1]: [d_week_seq#36]
Input [4]: [d_week_seq#36, d_year#15, d_moy#98, d_dom#99]


