== Physical Plan ==
TakeOrderedAndProject (99)
+- * BroadcastHashJoin Inner BuildRight (98)
   :- * Filter (78)
   :  +- * HashAggregate (77)
   :     +- Exchange (76)
   :        +- * HashAggregate (75)
   :           +- * Project (74)
   :              +- * BroadcastHashJoin Inner BuildRight (73)
   :                 :- * Project (63)
   :                 :  +- * BroadcastHashJoin Inner BuildRight (62)
   :                 :     :- * SortMergeJoin LeftSemi (60)
   :                 :     :  :- * Sort (5)
   :                 :     :  :  +- Exchange (4)
   :                 :     :  :     +- * Filter (3)
   :                 :     :  :        +- * ColumnarToRow (2)
   :                 :     :  :           +- Scan parquet default.store_sales (1)
   :                 :     :  +- * Sort (59)
   :                 :     :     +- Exchange (58)
   :                 :     :        +- * Project (57)
   :                 :     :           +- * BroadcastHashJoin Inner BuildLeft (56)
   :                 :     :              :- BroadcastExchange (9)
   :                 :     :              :  +- * Filter (8)
   :                 :     :              :     +- * ColumnarToRow (7)
   :                 :     :              :        +- Scan parquet default.item (6)
   :                 :     :              +- * SortMergeJoin LeftSemi (55)
   :                 :     :                 :- * Sort (43)
   :                 :     :                 :  +- Exchange (42)
   :                 :     :                 :     +- * HashAggregate (41)
   :                 :     :                 :        +- Exchange (40)
   :                 :     :                 :           +- * HashAggregate (39)
   :                 :     :                 :              +- * Project (38)
   :                 :     :                 :                 +- * BroadcastHashJoin Inner BuildRight (37)
   :                 :     :                 :                    :- * Project (15)
   :                 :     :                 :                    :  +- * BroadcastHashJoin Inner BuildRight (14)
   :                 :     :                 :                    :     :- * Filter (12)
   :                 :     :                 :                    :     :  +- * ColumnarToRow (11)
   :                 :     :                 :                    :     :     +- Scan parquet default.store_sales (10)
   :                 :     :                 :                    :     +- ReusedExchange (13)
   :                 :     :                 :                    +- BroadcastExchange (36)
   :                 :     :                 :                       +- * SortMergeJoin LeftSemi (35)
   :                 :     :                 :                          :- * Sort (20)
   :                 :     :                 :                          :  +- Exchange (19)
   :                 :     :                 :                          :     +- * Filter (18)
   :                 :     :                 :                          :        +- * ColumnarToRow (17)
   :                 :     :                 :                          :           +- Scan parquet default.item (16)
   :                 :     :                 :                          +- * Sort (34)
   :                 :     :                 :                             +- Exchange (33)
   :                 :     :                 :                                +- * Project (32)
   :                 :     :                 :                                   +- * BroadcastHashJoin Inner BuildRight (31)
   :                 :     :                 :                                      :- * Project (26)
   :                 :     :                 :                                      :  +- * BroadcastHashJoin Inner BuildRight (25)
   :                 :     :                 :                                      :     :- * Filter (23)
   :                 :     :                 :                                      :     :  +- * ColumnarToRow (22)
   :                 :     :                 :                                      :     :     +- Scan parquet default.catalog_sales (21)
   :                 :     :                 :                                      :     +- ReusedExchange (24)
   :                 :     :                 :                                      +- BroadcastExchange (30)
   :                 :     :                 :                                         +- * Filter (29)
   :                 :     :                 :                                            +- * ColumnarToRow (28)
   :                 :     :                 :                                               +- Scan parquet default.item (27)
   :                 :     :                 +- * Sort (54)
   :                 :     :                    +- Exchange (53)
   :                 :     :                       +- * Project (52)
   :                 :     :                          +- * BroadcastHashJoin Inner BuildRight (51)
   :                 :     :                             :- * Project (49)
   :                 :     :                             :  +- * BroadcastHashJoin Inner BuildRight (48)
   :                 :     :                             :     :- * Filter (46)
   :                 :     :                             :     :  +- * ColumnarToRow (45)
   :                 :     :                             :     :     +- Scan parquet default.web_sales (44)
   :                 :     :                             :     +- ReusedExchange (47)
   :                 :     :                             +- ReusedExchange (50)
   :                 :     +- ReusedExchange (61)
   :                 +- BroadcastExchange (72)
   :                    +- * SortMergeJoin LeftSemi (71)
   :                       :- * Sort (68)
   :                       :  +- Exchange (67)
   :                       :     +- * Filter (66)
   :                       :        +- * ColumnarToRow (65)
   :                       :           +- Scan parquet default.item (64)
   :                       +- * Sort (70)
   :                          +- ReusedExchange (69)
   +- BroadcastExchange (97)
      +- * Filter (96)
         +- * HashAggregate (95)
            +- Exchange (94)
               +- * HashAggregate (93)
                  +- * Project (92)
                     +- * BroadcastHashJoin Inner BuildRight (91)
                        :- * Project (89)
                        :  +- * BroadcastHashJoin Inner BuildRight (88)
                        :     :- * SortMergeJoin LeftSemi (86)
                        :     :  :- * Sort (83)
                        :     :  :  +- Exchange (82)
                        :     :  :     +- * Filter (81)
                        :     :  :        +- * ColumnarToRow (80)
                        :     :  :           +- Scan parquet default.store_sales (79)
                        :     :  +- * Sort (85)
                        :     :     +- ReusedExchange (84)
                        :     +- ReusedExchange (87)
                        +- ReusedExchange (90)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 3]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(8) Filter [codegen id : 3]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(9) BroadcastExchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(input[1, int, false], input[2, int, false], input[3, int, false]),false), [id=#11]

(10) Scan parquet default.store_sales
Output [2]: [ss_item_sk#12, ss_sold_date_sk#13]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#13), dynamicpruningexpression(ss_sold_date_sk#13 IN dynamicpruning#14)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(11) ColumnarToRow [codegen id : 12]
Input [2]: [ss_item_sk#12, ss_sold_date_sk#13]

(12) Filter [codegen id : 12]
Input [2]: [ss_item_sk#12, ss_sold_date_sk#13]
Condition : isnotnull(ss_item_sk#12)

(13) ReusedExchange [Reuses operator id: 132]
Output [1]: [d_date_sk#15]

(14) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ss_sold_date_sk#13]
Right keys [1]: [d_date_sk#15]
Join condition: None

(15) Project [codegen id : 12]
Output [1]: [ss_item_sk#12]
Input [3]: [ss_item_sk#12, ss_sold_date_sk#13, d_date_sk#15]

(16) Scan parquet default.item
Output [4]: [i_item_sk#16, i_brand_id#17, i_class_id#18, i_category_id#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(17) ColumnarToRow [codegen id : 5]
Input [4]: [i_item_sk#16, i_brand_id#17, i_class_id#18, i_category_id#19]

(18) Filter [codegen id : 5]
Input [4]: [i_item_sk#16, i_brand_id#17, i_class_id#18, i_category_id#19]
Condition : (((isnotnull(i_item_sk#16) AND isnotnull(i_brand_id#17)) AND isnotnull(i_class_id#18)) AND isnotnull(i_category_id#19))

(19) Exchange
Input [4]: [i_item_sk#16, i_brand_id#17, i_class_id#18, i_category_id#19]
Arguments: hashpartitioning(coalesce(i_brand_id#17, 0), isnull(i_brand_id#17), coalesce(i_class_id#18, 0), isnull(i_class_id#18), coalesce(i_category_id#19, 0), isnull(i_category_id#19), 5), ENSURE_REQUIREMENTS, [id=#20]

(20) Sort [codegen id : 6]
Input [4]: [i_item_sk#16, i_brand_id#17, i_class_id#18, i_category_id#19]
Arguments: [coalesce(i_brand_id#17, 0) ASC NULLS FIRST, isnull(i_brand_id#17) ASC NULLS FIRST, coalesce(i_class_id#18, 0) ASC NULLS FIRST, isnull(i_class_id#18) ASC NULLS FIRST, coalesce(i_category_id#19, 0) ASC NULLS FIRST, isnull(i_category_id#19) ASC NULLS FIRST], false, 0

(21) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#21, cs_sold_date_sk#22]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#22), dynamicpruningexpression(cs_sold_date_sk#22 IN dynamicpruning#14)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(22) ColumnarToRow [codegen id : 9]
Input [2]: [cs_item_sk#21, cs_sold_date_sk#22]

(23) Filter [codegen id : 9]
Input [2]: [cs_item_sk#21, cs_sold_date_sk#22]
Condition : isnotnull(cs_item_sk#21)

(24) ReusedExchange [Reuses operator id: 132]
Output [1]: [d_date_sk#23]

(25) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_sold_date_sk#22]
Right keys [1]: [d_date_sk#23]
Join condition: None

(26) Project [codegen id : 9]
Output [1]: [cs_item_sk#21]
Input [3]: [cs_item_sk#21, cs_sold_date_sk#22, d_date_sk#23]

(27) Scan parquet default.item
Output [4]: [i_item_sk#24, i_brand_id#25, i_class_id#26, i_category_id#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(28) ColumnarToRow [codegen id : 8]
Input [4]: [i_item_sk#24, i_brand_id#25, i_class_id#26, i_category_id#27]

(29) Filter [codegen id : 8]
Input [4]: [i_item_sk#24, i_brand_id#25, i_class_id#26, i_category_id#27]
Condition : isnotnull(i_item_sk#24)

(30) BroadcastExchange
Input [4]: [i_item_sk#24, i_brand_id#25, i_class_id#26, i_category_id#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28]

(31) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#21]
Right keys [1]: [i_item_sk#24]
Join condition: None

(32) Project [codegen id : 9]
Output [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]
Input [5]: [cs_item_sk#21, i_item_sk#24, i_brand_id#25, i_class_id#26, i_category_id#27]

(33) Exchange
Input [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]
Arguments: hashpartitioning(coalesce(i_brand_id#25, 0), isnull(i_brand_id#25), coalesce(i_class_id#26, 0), isnull(i_class_id#26), coalesce(i_category_id#27, 0), isnull(i_category_id#27), 5), ENSURE_REQUIREMENTS, [id=#29]

(34) Sort [codegen id : 10]
Input [3]: [i_brand_id#25, i_class_id#26, i_category_id#27]
Arguments: [coalesce(i_brand_id#25, 0) ASC NULLS FIRST, isnull(i_brand_id#25) ASC NULLS FIRST, coalesce(i_class_id#26, 0) ASC NULLS FIRST, isnull(i_class_id#26) ASC NULLS FIRST, coalesce(i_category_id#27, 0) ASC NULLS FIRST, isnull(i_category_id#27) ASC NULLS FIRST], false, 0

(35) SortMergeJoin [codegen id : 11]
Left keys [6]: [coalesce(i_brand_id#17, 0), isnull(i_brand_id#17), coalesce(i_class_id#18, 0), isnull(i_class_id#18), coalesce(i_category_id#19, 0), isnull(i_category_id#19)]
Right keys [6]: [coalesce(i_brand_id#25, 0), isnull(i_brand_id#25), coalesce(i_class_id#26, 0), isnull(i_class_id#26), coalesce(i_category_id#27, 0), isnull(i_category_id#27)]
Join condition: None

(36) BroadcastExchange
Input [4]: [i_item_sk#16, i_brand_id#17, i_class_id#18, i_category_id#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#30]

(37) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ss_item_sk#12]
Right keys [1]: [i_item_sk#16]
Join condition: None

(38) Project [codegen id : 12]
Output [3]: [i_brand_id#17 AS brand_id#31, i_class_id#18 AS class_id#32, i_category_id#19 AS category_id#33]
Input [5]: [ss_item_sk#12, i_item_sk#16, i_brand_id#17, i_class_id#18, i_category_id#19]

(39) HashAggregate [codegen id : 12]
Input [3]: [brand_id#31, class_id#32, category_id#33]
Keys [3]: [brand_id#31, class_id#32, category_id#33]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#31, class_id#32, category_id#33]

(40) Exchange
Input [3]: [brand_id#31, class_id#32, category_id#33]
Arguments: hashpartitioning(brand_id#31, class_id#32, category_id#33, 5), ENSURE_REQUIREMENTS, [id=#34]

(41) HashAggregate [codegen id : 13]
Input [3]: [brand_id#31, class_id#32, category_id#33]
Keys [3]: [brand_id#31, class_id#32, category_id#33]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#31, class_id#32, category_id#33]

(42) Exchange
Input [3]: [brand_id#31, class_id#32, category_id#33]
Arguments: hashpartitioning(coalesce(brand_id#31, 0), isnull(brand_id#31), coalesce(class_id#32, 0), isnull(class_id#32), coalesce(category_id#33, 0), isnull(category_id#33), 5), ENSURE_REQUIREMENTS, [id=#35]

(43) Sort [codegen id : 14]
Input [3]: [brand_id#31, class_id#32, category_id#33]
Arguments: [coalesce(brand_id#31, 0) ASC NULLS FIRST, isnull(brand_id#31) ASC NULLS FIRST, coalesce(class_id#32, 0) ASC NULLS FIRST, isnull(class_id#32) ASC NULLS FIRST, coalesce(category_id#33, 0) ASC NULLS FIRST, isnull(category_id#33) ASC NULLS FIRST], false, 0

(44) Scan parquet default.web_sales
Output [2]: [ws_item_sk#36, ws_sold_date_sk#37]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#37), dynamicpruningexpression(ws_sold_date_sk#37 IN dynamicpruning#14)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(45) ColumnarToRow [codegen id : 17]
Input [2]: [ws_item_sk#36, ws_sold_date_sk#37]

(46) Filter [codegen id : 17]
Input [2]: [ws_item_sk#36, ws_sold_date_sk#37]
Condition : isnotnull(ws_item_sk#36)

(47) ReusedExchange [Reuses operator id: 132]
Output [1]: [d_date_sk#38]

(48) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_sold_date_sk#37]
Right keys [1]: [d_date_sk#38]
Join condition: None

(49) Project [codegen id : 17]
Output [1]: [ws_item_sk#36]
Input [3]: [ws_item_sk#36, ws_sold_date_sk#37, d_date_sk#38]

(50) ReusedExchange [Reuses operator id: 30]
Output [4]: [i_item_sk#39, i_brand_id#40, i_class_id#41, i_category_id#42]

(51) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_item_sk#36]
Right keys [1]: [i_item_sk#39]
Join condition: None

(52) Project [codegen id : 17]
Output [3]: [i_brand_id#40, i_class_id#41, i_category_id#42]
Input [5]: [ws_item_sk#36, i_item_sk#39, i_brand_id#40, i_class_id#41, i_category_id#42]

(53) Exchange
Input [3]: [i_brand_id#40, i_class_id#41, i_category_id#42]
Arguments: hashpartitioning(coalesce(i_brand_id#40, 0), isnull(i_brand_id#40), coalesce(i_class_id#41, 0), isnull(i_class_id#41), coalesce(i_category_id#42, 0), isnull(i_category_id#42), 5), ENSURE_REQUIREMENTS, [id=#43]

(54) Sort [codegen id : 18]
Input [3]: [i_brand_id#40, i_class_id#41, i_category_id#42]
Arguments: [coalesce(i_brand_id#40, 0) ASC NULLS FIRST, isnull(i_brand_id#40) ASC NULLS FIRST, coalesce(i_class_id#41, 0) ASC NULLS FIRST, isnull(i_class_id#41) ASC NULLS FIRST, coalesce(i_category_id#42, 0) ASC NULLS FIRST, isnull(i_category_id#42) ASC NULLS FIRST], false, 0

(55) SortMergeJoin
Left keys [6]: [coalesce(brand_id#31, 0), isnull(brand_id#31), coalesce(class_id#32, 0), isnull(class_id#32), coalesce(category_id#33, 0), isnull(category_id#33)]
Right keys [6]: [coalesce(i_brand_id#40, 0), isnull(i_brand_id#40), coalesce(i_class_id#41, 0), isnull(i_class_id#41), coalesce(i_category_id#42, 0), isnull(i_category_id#42)]
Join condition: None

(56) BroadcastHashJoin [codegen id : 19]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#31, class_id#32, category_id#33]
Join condition: None

(57) Project [codegen id : 19]
Output [1]: [i_item_sk#7 AS ss_item_sk#44]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#31, class_id#32, category_id#33]

(58) Exchange
Input [1]: [ss_item_sk#44]
Arguments: hashpartitioning(ss_item_sk#44, 5), ENSURE_REQUIREMENTS, [id=#45]

(59) Sort [codegen id : 20]
Input [1]: [ss_item_sk#44]
Arguments: [ss_item_sk#44 ASC NULLS FIRST], false, 0

(60) SortMergeJoin [codegen id : 43]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#44]
Join condition: None

(61) ReusedExchange [Reuses operator id: 123]
Output [1]: [d_date_sk#46]

(62) BroadcastHashJoin [codegen id : 43]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#46]
Join condition: None

(63) Project [codegen id : 43]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#46]

(64) Scan parquet default.item
Output [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(65) ColumnarToRow [codegen id : 22]
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]

(66) Filter [codegen id : 22]
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Condition : (((isnotnull(i_item_sk#47) AND isnotnull(i_brand_id#48)) AND isnotnull(i_class_id#49)) AND isnotnull(i_category_id#50))

(67) Exchange
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Arguments: hashpartitioning(i_item_sk#47, 5), ENSURE_REQUIREMENTS, [id=#51]

(68) Sort [codegen id : 23]
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Arguments: [i_item_sk#47 ASC NULLS FIRST], false, 0

(69) ReusedExchange [Reuses operator id: 58]
Output [1]: [ss_item_sk#44]

(70) Sort [codegen id : 41]
Input [1]: [ss_item_sk#44]
Arguments: [ss_item_sk#44 ASC NULLS FIRST], false, 0

(71) SortMergeJoin [codegen id : 42]
Left keys [1]: [i_item_sk#47]
Right keys [1]: [ss_item_sk#44]
Join condition: None

(72) BroadcastExchange
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#52]

(73) BroadcastHashJoin [codegen id : 43]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#47]
Join condition: None

(74) Project [codegen id : 43]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#48, i_class_id#49, i_category_id#50]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]

(75) HashAggregate [codegen id : 43]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#48, i_class_id#49, i_category_id#50]
Keys [3]: [i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)]
Aggregate Attributes [3]: [sum#53, isEmpty#54, count#55]
Results [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#56, isEmpty#57, count#58]

(76) Exchange
Input [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#56, isEmpty#57, count#58]
Arguments: hashpartitioning(i_brand_id#48, i_class_id#49, i_category_id#50, 5), ENSURE_REQUIREMENTS, [id=#59]

(77) HashAggregate [codegen id : 88]
Input [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#56, isEmpty#57, count#58]
Keys [3]: [i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2))), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2)))#60, count(1)#61]
Results [6]: [store AS channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sum(CheckOverflow((promote_precision(cast(ss_quantity#2 as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2)))#60 AS sales#63, count(1)#61 AS number_sales#64]

(78) Filter [codegen id : 88]
Input [6]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sales#63, number_sales#64]
Condition : (isnotnull(sales#63) AND (cast(sales#63 as decimal(32,6)) > cast(Subquery scalar-subquery#65, [id=#66] as decimal(32,6))))

(79) Scan parquet default.store_sales
Output [4]: [ss_item_sk#67, ss_quantity#68, ss_list_price#69, ss_sold_date_sk#70]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#70), dynamicpruningexpression(ss_sold_date_sk#70 IN dynamicpruning#71)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(80) ColumnarToRow [codegen id : 44]
Input [4]: [ss_item_sk#67, ss_quantity#68, ss_list_price#69, ss_sold_date_sk#70]

(81) Filter [codegen id : 44]
Input [4]: [ss_item_sk#67, ss_quantity#68, ss_list_price#69, ss_sold_date_sk#70]
Condition : isnotnull(ss_item_sk#67)

(82) Exchange
Input [4]: [ss_item_sk#67, ss_quantity#68, ss_list_price#69, ss_sold_date_sk#70]
Arguments: hashpartitioning(ss_item_sk#67, 5), ENSURE_REQUIREMENTS, [id=#72]

(83) Sort [codegen id : 45]
Input [4]: [ss_item_sk#67, ss_quantity#68, ss_list_price#69, ss_sold_date_sk#70]
Arguments: [ss_item_sk#67 ASC NULLS FIRST], false, 0

(84) ReusedExchange [Reuses operator id: 58]
Output [1]: [ss_item_sk#44]

(85) Sort [codegen id : 63]
Input [1]: [ss_item_sk#44]
Arguments: [ss_item_sk#44 ASC NULLS FIRST], false, 0

(86) SortMergeJoin [codegen id : 86]
Left keys [1]: [ss_item_sk#67]
Right keys [1]: [ss_item_sk#44]
Join condition: None

(87) ReusedExchange [Reuses operator id: 137]
Output [1]: [d_date_sk#73]

(88) BroadcastHashJoin [codegen id : 86]
Left keys [1]: [ss_sold_date_sk#70]
Right keys [1]: [d_date_sk#73]
Join condition: None

(89) Project [codegen id : 86]
Output [3]: [ss_item_sk#67, ss_quantity#68, ss_list_price#69]
Input [5]: [ss_item_sk#67, ss_quantity#68, ss_list_price#69, ss_sold_date_sk#70, d_date_sk#73]

(90) ReusedExchange [Reuses operator id: 72]
Output [4]: [i_item_sk#74, i_brand_id#75, i_class_id#76, i_category_id#77]

(91) BroadcastHashJoin [codegen id : 86]
Left keys [1]: [ss_item_sk#67]
Right keys [1]: [i_item_sk#74]
Join condition: None

(92) Project [codegen id : 86]
Output [5]: [ss_quantity#68, ss_list_price#69, i_brand_id#75, i_class_id#76, i_category_id#77]
Input [7]: [ss_item_sk#67, ss_quantity#68, ss_list_price#69, i_item_sk#74, i_brand_id#75, i_class_id#76, i_category_id#77]

(93) HashAggregate [codegen id : 86]
Input [5]: [ss_quantity#68, ss_list_price#69, i_brand_id#75, i_class_id#76, i_category_id#77]
Keys [3]: [i_brand_id#75, i_class_id#76, i_category_id#77]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#68 as decimal(12,2))) * promote_precision(cast(ss_list_price#69 as decimal(12,2)))), DecimalType(18,2))), partial_count(1)]
Aggregate Attributes [3]: [sum#78, isEmpty#79, count#80]
Results [6]: [i_brand_id#75, i_class_id#76, i_category_id#77, sum#81, isEmpty#82, count#83]

(94) Exchange
Input [6]: [i_brand_id#75, i_class_id#76, i_category_id#77, sum#81, isEmpty#82, count#83]
Arguments: hashpartitioning(i_brand_id#75, i_class_id#76, i_category_id#77, 5), ENSURE_REQUIREMENTS, [id=#84]

(95) HashAggregate [codegen id : 87]
Input [6]: [i_brand_id#75, i_class_id#76, i_category_id#77, sum#81, isEmpty#82, count#83]
Keys [3]: [i_brand_id#75, i_class_id#76, i_category_id#77]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#68 as decimal(12,2))) * promote_precision(cast(ss_list_price#69 as decimal(12,2)))), DecimalType(18,2))), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#68 as decimal(12,2))) * promote_precision(cast(ss_list_price#69 as decimal(12,2)))), DecimalType(18,2)))#85, count(1)#86]
Results [6]: [store AS channel#87, i_brand_id#75, i_class_id#76, i_category_id#77, sum(CheckOverflow((promote_precision(cast(ss_quantity#68 as decimal(12,2))) * promote_precision(cast(ss_list_price#69 as decimal(12,2)))), DecimalType(18,2)))#85 AS sales#88, count(1)#86 AS number_sales#89]

(96) Filter [codegen id : 87]
Input [6]: [channel#87, i_brand_id#75, i_class_id#76, i_category_id#77, sales#88, number_sales#89]
Condition : (isnotnull(sales#88) AND (cast(sales#88 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#65, [id=#66] as decimal(32,6))))

(97) BroadcastExchange
Input [6]: [channel#87, i_brand_id#75, i_class_id#76, i_category_id#77, sales#88, number_sales#89]
Arguments: HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true]),false), [id=#90]

(98) BroadcastHashJoin [codegen id : 88]
Left keys [3]: [i_brand_id#48, i_class_id#49, i_category_id#50]
Right keys [3]: [i_brand_id#75, i_class_id#76, i_category_id#77]
Join condition: None

(99) TakeOrderedAndProject
Input [12]: [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sales#63, number_sales#64, channel#87, i_brand_id#75, i_class_id#76, i_category_id#77, sales#88, number_sales#89]
Arguments: 100, [i_brand_id#48 ASC NULLS FIRST, i_class_id#49 ASC NULLS FIRST, i_category_id#50 ASC NULLS FIRST], [channel#62, i_brand_id#48, i_class_id#49, i_category_id#50, sales#63, number_sales#64, channel#87, i_brand_id#75, i_class_id#76, i_category_id#77, sales#88, number_sales#89]

===== Subqueries =====

Subquery:1 Hosting operator id = 78 Hosting Expression = Subquery scalar-subquery#65, [id=#66]
* HashAggregate (118)
+- Exchange (117)
   +- * HashAggregate (116)
      +- Union (115)
         :- * Project (104)
         :  +- * BroadcastHashJoin Inner BuildRight (103)
         :     :- * ColumnarToRow (101)
         :     :  +- Scan parquet default.store_sales (100)
         :     +- ReusedExchange (102)
         :- * Project (109)
         :  +- * BroadcastHashJoin Inner BuildRight (108)
         :     :- * ColumnarToRow (106)
         :     :  +- Scan parquet default.catalog_sales (105)
         :     +- ReusedExchange (107)
         +- * Project (114)
            +- * BroadcastHashJoin Inner BuildRight (113)
               :- * ColumnarToRow (111)
               :  +- Scan parquet default.web_sales (110)
               +- ReusedExchange (112)


(100) Scan parquet default.store_sales
Output [3]: [ss_quantity#91, ss_list_price#92, ss_sold_date_sk#93]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#93), dynamicpruningexpression(ss_sold_date_sk#93 IN dynamicpruning#14)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(101) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#91, ss_list_price#92, ss_sold_date_sk#93]

(102) ReusedExchange [Reuses operator id: 132]
Output [1]: [d_date_sk#94]

(103) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#93]
Right keys [1]: [d_date_sk#94]
Join condition: None

(104) Project [codegen id : 2]
Output [2]: [ss_quantity#91 AS quantity#95, ss_list_price#92 AS list_price#96]
Input [4]: [ss_quantity#91, ss_list_price#92, ss_sold_date_sk#93, d_date_sk#94]

(105) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#97, cs_list_price#98, cs_sold_date_sk#99]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#99), dynamicpruningexpression(cs_sold_date_sk#99 IN dynamicpruning#14)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(106) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#97, cs_list_price#98, cs_sold_date_sk#99]

(107) ReusedExchange [Reuses operator id: 132]
Output [1]: [d_date_sk#100]

(108) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#99]
Right keys [1]: [d_date_sk#100]
Join condition: None

(109) Project [codegen id : 4]
Output [2]: [cs_quantity#97 AS quantity#101, cs_list_price#98 AS list_price#102]
Input [4]: [cs_quantity#97, cs_list_price#98, cs_sold_date_sk#99, d_date_sk#100]

(110) Scan parquet default.web_sales
Output [3]: [ws_quantity#103, ws_list_price#104, ws_sold_date_sk#105]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#105), dynamicpruningexpression(ws_sold_date_sk#105 IN dynamicpruning#14)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(111) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#103, ws_list_price#104, ws_sold_date_sk#105]

(112) ReusedExchange [Reuses operator id: 132]
Output [1]: [d_date_sk#106]

(113) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#105]
Right keys [1]: [d_date_sk#106]
Join condition: None

(114) Project [codegen id : 6]
Output [2]: [ws_quantity#103 AS quantity#107, ws_list_price#104 AS list_price#108]
Input [4]: [ws_quantity#103, ws_list_price#104, ws_sold_date_sk#105, d_date_sk#106]

(115) Union

(116) HashAggregate [codegen id : 7]
Input [2]: [quantity#95, list_price#96]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(quantity#95 as decimal(12,2))) * promote_precision(cast(list_price#96 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#109, count#110]
Results [2]: [sum#111, count#112]

(117) Exchange
Input [2]: [sum#111, count#112]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#113]

(118) HashAggregate [codegen id : 8]
Input [2]: [sum#111, count#112]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(quantity#95 as decimal(12,2))) * promote_precision(cast(list_price#96 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(quantity#95 as decimal(12,2))) * promote_precision(cast(list_price#96 as decimal(12,2)))), DecimalType(18,2)))#114]
Results [1]: [avg(CheckOverflow((promote_precision(cast(quantity#95 as decimal(12,2))) * promote_precision(cast(list_price#96 as decimal(12,2)))), DecimalType(18,2)))#114 AS average_sales#115]

Subquery:2 Hosting operator id = 100 Hosting Expression = ss_sold_date_sk#93 IN dynamicpruning#14

Subquery:3 Hosting operator id = 105 Hosting Expression = cs_sold_date_sk#99 IN dynamicpruning#14

Subquery:4 Hosting operator id = 110 Hosting Expression = ws_sold_date_sk#105 IN dynamicpruning#14

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (123)
+- * Project (122)
   +- * Filter (121)
      +- * ColumnarToRow (120)
         +- Scan parquet default.date_dim (119)


(119) Scan parquet default.date_dim
Output [2]: [d_date_sk#46, d_week_seq#116]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(120) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#46, d_week_seq#116]

(121) Filter [codegen id : 1]
Input [2]: [d_date_sk#46, d_week_seq#116]
Condition : ((isnotnull(d_week_seq#116) AND (d_week_seq#116 = Subquery scalar-subquery#117, [id=#118])) AND isnotnull(d_date_sk#46))

(122) Project [codegen id : 1]
Output [1]: [d_date_sk#46]
Input [2]: [d_date_sk#46, d_week_seq#116]

(123) BroadcastExchange
Input [1]: [d_date_sk#46]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#119]

Subquery:6 Hosting operator id = 121 Hosting Expression = Subquery scalar-subquery#117, [id=#118]
* Project (127)
+- * Filter (126)
   +- * ColumnarToRow (125)
      +- Scan parquet default.date_dim (124)


(124) Scan parquet default.date_dim
Output [4]: [d_week_seq#120, d_year#121, d_moy#122, d_dom#123]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,2000), EqualTo(d_moy,12), EqualTo(d_dom,11)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(125) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#120, d_year#121, d_moy#122, d_dom#123]

(126) Filter [codegen id : 1]
Input [4]: [d_week_seq#120, d_year#121, d_moy#122, d_dom#123]
Condition : (((((isnotnull(d_year#121) AND isnotnull(d_moy#122)) AND isnotnull(d_dom#123)) AND (d_year#121 = 2000)) AND (d_moy#122 = 12)) AND (d_dom#123 = 11))

(127) Project [codegen id : 1]
Output [1]: [d_week_seq#120]
Input [4]: [d_week_seq#120, d_year#121, d_moy#122, d_dom#123]

Subquery:7 Hosting operator id = 10 Hosting Expression = ss_sold_date_sk#13 IN dynamicpruning#14
BroadcastExchange (132)
+- * Project (131)
   +- * Filter (130)
      +- * ColumnarToRow (129)
         +- Scan parquet default.date_dim (128)


(128) Scan parquet default.date_dim
Output [2]: [d_date_sk#15, d_year#124]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(129) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#15, d_year#124]

(130) Filter [codegen id : 1]
Input [2]: [d_date_sk#15, d_year#124]
Condition : (((isnotnull(d_year#124) AND (d_year#124 >= 1999)) AND (d_year#124 <= 2001)) AND isnotnull(d_date_sk#15))

(131) Project [codegen id : 1]
Output [1]: [d_date_sk#15]
Input [2]: [d_date_sk#15, d_year#124]

(132) BroadcastExchange
Input [1]: [d_date_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#125]

Subquery:8 Hosting operator id = 21 Hosting Expression = cs_sold_date_sk#22 IN dynamicpruning#14

Subquery:9 Hosting operator id = 44 Hosting Expression = ws_sold_date_sk#37 IN dynamicpruning#14

Subquery:10 Hosting operator id = 96 Hosting Expression = ReusedSubquery Subquery scalar-subquery#65, [id=#66]

Subquery:11 Hosting operator id = 79 Hosting Expression = ss_sold_date_sk#70 IN dynamicpruning#71
BroadcastExchange (137)
+- * Project (136)
   +- * Filter (135)
      +- * ColumnarToRow (134)
         +- Scan parquet default.date_dim (133)


(133) Scan parquet default.date_dim
Output [2]: [d_date_sk#73, d_week_seq#126]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(134) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#73, d_week_seq#126]

(135) Filter [codegen id : 1]
Input [2]: [d_date_sk#73, d_week_seq#126]
Condition : ((isnotnull(d_week_seq#126) AND (d_week_seq#126 = Subquery scalar-subquery#127, [id=#128])) AND isnotnull(d_date_sk#73))

(136) Project [codegen id : 1]
Output [1]: [d_date_sk#73]
Input [2]: [d_date_sk#73, d_week_seq#126]

(137) BroadcastExchange
Input [1]: [d_date_sk#73]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#129]

Subquery:12 Hosting operator id = 135 Hosting Expression = Subquery scalar-subquery#127, [id=#128]
* Project (141)
+- * Filter (140)
   +- * ColumnarToRow (139)
      +- Scan parquet default.date_dim (138)


(138) Scan parquet default.date_dim
Output [4]: [d_week_seq#130, d_year#131, d_moy#132, d_dom#133]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), EqualTo(d_dom,11)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(139) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#130, d_year#131, d_moy#132, d_dom#133]

(140) Filter [codegen id : 1]
Input [4]: [d_week_seq#130, d_year#131, d_moy#132, d_dom#133]
Condition : (((((isnotnull(d_year#131) AND isnotnull(d_moy#132)) AND isnotnull(d_dom#133)) AND (d_year#131 = 1999)) AND (d_moy#132 = 12)) AND (d_dom#133 = 11))

(141) Project [codegen id : 1]
Output [1]: [d_week_seq#130]
Input [4]: [d_week_seq#130, d_year#131, d_moy#132, d_dom#133]


