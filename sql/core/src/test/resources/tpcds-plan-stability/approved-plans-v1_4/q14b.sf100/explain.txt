== Physical Plan ==
TakeOrderedAndProject (114)
+- * BroadcastHashJoin Inner BuildRight (113)
   :- * Project (91)
   :  +- * Filter (90)
   :     +- * HashAggregate (89)
   :        +- Exchange (88)
   :           +- * HashAggregate (87)
   :              +- * Project (86)
   :                 +- * BroadcastHashJoin Inner BuildRight (85)
   :                    :- * Project (75)
   :                    :  +- * BroadcastHashJoin Inner BuildRight (74)
   :                    :     :- SortMergeJoin LeftSemi (68)
   :                    :     :  :- * Sort (5)
   :                    :     :  :  +- Exchange (4)
   :                    :     :  :     +- * Filter (3)
   :                    :     :  :        +- * ColumnarToRow (2)
   :                    :     :  :           +- Scan parquet default.store_sales (1)
   :                    :     :  +- * Sort (67)
   :                    :     :     +- Exchange (66)
   :                    :     :        +- * Project (65)
   :                    :     :           +- * BroadcastHashJoin Inner BuildRight (64)
   :                    :     :              :- * Filter (8)
   :                    :     :              :  +- * ColumnarToRow (7)
   :                    :     :              :     +- Scan parquet default.item (6)
   :                    :     :              +- BroadcastExchange (63)
   :                    :     :                 +- * HashAggregate (62)
   :                    :     :                    +- * HashAggregate (61)
   :                    :     :                       +- * BroadcastHashJoin LeftSemi BuildRight (60)
   :                    :     :                          :- * HashAggregate (46)
   :                    :     :                          :  +- * HashAggregate (45)
   :                    :     :                          :     +- * BroadcastHashJoin LeftSemi BuildRight (44)
   :                    :     :                          :        :- * HashAggregate (27)
   :                    :     :                          :        :  +- Exchange (26)
   :                    :     :                          :        :     +- * HashAggregate (25)
   :                    :     :                          :        :        +- * Project (24)
   :                    :     :                          :        :           +- * BroadcastHashJoin Inner BuildRight (23)
   :                    :     :                          :        :              :- * Project (18)
   :                    :     :                          :        :              :  +- * BroadcastHashJoin Inner BuildRight (17)
   :                    :     :                          :        :              :     :- * Filter (11)
   :                    :     :                          :        :              :     :  +- * ColumnarToRow (10)
   :                    :     :                          :        :              :     :     +- Scan parquet default.store_sales (9)
   :                    :     :                          :        :              :     +- BroadcastExchange (16)
   :                    :     :                          :        :              :        +- * Project (15)
   :                    :     :                          :        :              :           +- * Filter (14)
   :                    :     :                          :        :              :              +- * ColumnarToRow (13)
   :                    :     :                          :        :              :                 +- Scan parquet default.date_dim (12)
   :                    :     :                          :        :              +- BroadcastExchange (22)
   :                    :     :                          :        :                 +- * Filter (21)
   :                    :     :                          :        :                    +- * ColumnarToRow (20)
   :                    :     :                          :        :                       +- Scan parquet default.item (19)
   :                    :     :                          :        +- BroadcastExchange (43)
   :                    :     :                          :           +- * HashAggregate (42)
   :                    :     :                          :              +- Exchange (41)
   :                    :     :                          :                 +- * HashAggregate (40)
   :                    :     :                          :                    +- * Project (39)
   :                    :     :                          :                       +- * BroadcastHashJoin Inner BuildRight (38)
   :                    :     :                          :                          :- * Project (33)
   :                    :     :                          :                          :  +- * BroadcastHashJoin Inner BuildRight (32)
   :                    :     :                          :                          :     :- * Filter (30)
   :                    :     :                          :                          :     :  +- * ColumnarToRow (29)
   :                    :     :                          :                          :     :     +- Scan parquet default.catalog_sales (28)
   :                    :     :                          :                          :     +- ReusedExchange (31)
   :                    :     :                          :                          +- BroadcastExchange (37)
   :                    :     :                          :                             +- * Filter (36)
   :                    :     :                          :                                +- * ColumnarToRow (35)
   :                    :     :                          :                                   +- Scan parquet default.item (34)
   :                    :     :                          +- BroadcastExchange (59)
   :                    :     :                             +- * HashAggregate (58)
   :                    :     :                                +- Exchange (57)
   :                    :     :                                   +- * HashAggregate (56)
   :                    :     :                                      +- * Project (55)
   :                    :     :                                         +- * BroadcastHashJoin Inner BuildRight (54)
   :                    :     :                                            :- * Project (52)
   :                    :     :                                            :  +- * BroadcastHashJoin Inner BuildRight (51)
   :                    :     :                                            :     :- * Filter (49)
   :                    :     :                                            :     :  +- * ColumnarToRow (48)
   :                    :     :                                            :     :     +- Scan parquet default.web_sales (47)
   :                    :     :                                            :     +- ReusedExchange (50)
   :                    :     :                                            +- ReusedExchange (53)
   :                    :     +- BroadcastExchange (73)
   :                    :        +- * Project (72)
   :                    :           +- * Filter (71)
   :                    :              +- * ColumnarToRow (70)
   :                    :                 +- Scan parquet default.date_dim (69)
   :                    +- BroadcastExchange (84)
   :                       +- SortMergeJoin LeftSemi (83)
   :                          :- * Sort (80)
   :                          :  +- Exchange (79)
   :                          :     +- * Filter (78)
   :                          :        +- * ColumnarToRow (77)
   :                          :           +- Scan parquet default.item (76)
   :                          +- * Sort (82)
   :                             +- ReusedExchange (81)
   +- BroadcastExchange (112)
      +- * Project (111)
         +- * Filter (110)
            +- * HashAggregate (109)
               +- Exchange (108)
                  +- * HashAggregate (107)
                     +- * Project (106)
                        +- * BroadcastHashJoin Inner BuildRight (105)
                           :- * Project (103)
                           :  +- * BroadcastHashJoin Inner BuildRight (102)
                           :     :- SortMergeJoin LeftSemi (96)
                           :     :  :- * Sort (93)
                           :     :  :  +- ReusedExchange (92)
                           :     :  +- * Sort (95)
                           :     :     +- ReusedExchange (94)
                           :     +- BroadcastExchange (101)
                           :        +- * Project (100)
                           :           +- * Filter (99)
                           :              +- * ColumnarToRow (98)
                           :                 +- Scan parquet default.date_dim (97)
                           +- ReusedExchange (104)


(1) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(4) Exchange
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Arguments: hashpartitioning(ss_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#5]

(5) Sort [codegen id : 2]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Arguments: [ss_item_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 15]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(8) Filter [codegen id : 15]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(9) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(10) ColumnarToRow [codegen id : 5]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]

(11) Filter [codegen id : 5]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(12) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(13) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]

(14) Filter [codegen id : 3]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1999)) AND (d_year#11 <= 2001)) AND isnotnull(d_date_sk#10))

(15) Project [codegen id : 3]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(16) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(17) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(18) Project [codegen id : 5]
Output [1]: [ss_item_sk#2]
Input [3]: [ss_sold_date_sk#1, ss_item_sk#2, d_date_sk#10]

(19) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(20) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(21) Filter [codegen id : 4]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : (((isnotnull(i_item_sk#6) AND isnotnull(i_brand_id#7)) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(22) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13]

(23) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#6]
Join condition: None

(24) Project [codegen id : 5]
Output [3]: [i_brand_id#7 AS brand_id#14, i_class_id#8 AS class_id#15, i_category_id#9 AS category_id#16]
Input [5]: [ss_item_sk#2, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(25) HashAggregate [codegen id : 5]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(26) Exchange
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: hashpartitioning(brand_id#14, class_id#15, category_id#16, 5), ENSURE_REQUIREMENTS, [id=#17]

(27) HashAggregate [codegen id : 14]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(28) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#18, cs_item_sk#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int>

(29) ColumnarToRow [codegen id : 8]
Input [2]: [cs_sold_date_sk#18, cs_item_sk#19]

(30) Filter [codegen id : 8]
Input [2]: [cs_sold_date_sk#18, cs_item_sk#19]
Condition : (isnotnull(cs_item_sk#19) AND isnotnull(cs_sold_date_sk#18))

(31) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#10]

(32) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#10]
Join condition: None

(33) Project [codegen id : 8]
Output [1]: [cs_item_sk#19]
Input [3]: [cs_sold_date_sk#18, cs_item_sk#19, d_date_sk#10]

(34) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(35) ColumnarToRow [codegen id : 7]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(36) Filter [codegen id : 7]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : isnotnull(i_item_sk#6)

(37) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#20]

(38) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [i_item_sk#6]
Join condition: None

(39) Project [codegen id : 8]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [cs_item_sk#19, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(40) HashAggregate [codegen id : 8]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]

(41) Exchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#21]

(42) HashAggregate [codegen id : 9]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]

(43) BroadcastExchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#22]

(44) BroadcastHashJoin [codegen id : 14]
Left keys [6]: [coalesce(brand_id#14, 0), isnull(brand_id#14), coalesce(class_id#15, 0), isnull(class_id#15), coalesce(category_id#16, 0), isnull(category_id#16)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join condition: None

(45) HashAggregate [codegen id : 14]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(46) HashAggregate [codegen id : 14]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(47) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#23, ws_item_sk#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int>

(48) ColumnarToRow [codegen id : 12]
Input [2]: [ws_sold_date_sk#23, ws_item_sk#24]

(49) Filter [codegen id : 12]
Input [2]: [ws_sold_date_sk#23, ws_item_sk#24]
Condition : (isnotnull(ws_item_sk#24) AND isnotnull(ws_sold_date_sk#23))

(50) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#10]

(51) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ws_sold_date_sk#23]
Right keys [1]: [d_date_sk#10]
Join condition: None

(52) Project [codegen id : 12]
Output [1]: [ws_item_sk#24]
Input [3]: [ws_sold_date_sk#23, ws_item_sk#24, d_date_sk#10]

(53) ReusedExchange [Reuses operator id: 37]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(54) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ws_item_sk#24]
Right keys [1]: [i_item_sk#6]
Join condition: None

(55) Project [codegen id : 12]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [ws_item_sk#24, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(56) HashAggregate [codegen id : 12]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]

(57) Exchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#25]

(58) HashAggregate [codegen id : 13]
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]

(59) BroadcastExchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#26]

(60) BroadcastHashJoin [codegen id : 14]
Left keys [6]: [coalesce(brand_id#14, 0), isnull(brand_id#14), coalesce(class_id#15, 0), isnull(class_id#15), coalesce(category_id#16, 0), isnull(category_id#16)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join condition: None

(61) HashAggregate [codegen id : 14]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(62) HashAggregate [codegen id : 14]
Input [3]: [brand_id#14, class_id#15, category_id#16]
Keys [3]: [brand_id#14, class_id#15, category_id#16]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#14, class_id#15, category_id#16]

(63) BroadcastExchange
Input [3]: [brand_id#14, class_id#15, category_id#16]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#27]

(64) BroadcastHashJoin [codegen id : 15]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#14, class_id#15, category_id#16]
Join condition: None

(65) Project [codegen id : 15]
Output [1]: [i_item_sk#6 AS ss_item_sk#28]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#14, class_id#15, category_id#16]

(66) Exchange
Input [1]: [ss_item_sk#28]
Arguments: hashpartitioning(ss_item_sk#28, 5), ENSURE_REQUIREMENTS, [id=#29]

(67) Sort [codegen id : 16]
Input [1]: [ss_item_sk#28]
Arguments: [ss_item_sk#28 ASC NULLS FIRST], false, 0

(68) SortMergeJoin
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [ss_item_sk#28]
Join condition: None

(69) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_week_seq#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(70) ColumnarToRow [codegen id : 17]
Input [2]: [d_date_sk#10, d_week_seq#30]

(71) Filter [codegen id : 17]
Input [2]: [d_date_sk#10, d_week_seq#30]
Condition : ((isnotnull(d_week_seq#30) AND (d_week_seq#30 = Subquery scalar-subquery#31, [id=#32])) AND isnotnull(d_date_sk#10))

(72) Project [codegen id : 17]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_week_seq#30]

(73) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#33]

(74) BroadcastHashJoin [codegen id : 34]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(75) Project [codegen id : 34]
Output [3]: [ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4, d_date_sk#10]

(76) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(77) ColumnarToRow [codegen id : 18]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(78) Filter [codegen id : 18]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : (((isnotnull(i_item_sk#6) AND isnotnull(i_brand_id#7)) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(79) Exchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: hashpartitioning(i_item_sk#6, 5), ENSURE_REQUIREMENTS, [id=#34]

(80) Sort [codegen id : 19]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: [i_item_sk#6 ASC NULLS FIRST], false, 0

(81) ReusedExchange [Reuses operator id: 66]
Output [1]: [ss_item_sk#28]

(82) Sort [codegen id : 33]
Input [1]: [ss_item_sk#28]
Arguments: [ss_item_sk#28 ASC NULLS FIRST], false, 0

(83) SortMergeJoin
Left keys [1]: [i_item_sk#6]
Right keys [1]: [ss_item_sk#28]
Join condition: None

(84) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#35]

(85) BroadcastHashJoin [codegen id : 34]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#6]
Join condition: None

(86) Project [codegen id : 34]
Output [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ss_item_sk#2, ss_quantity#3, ss_list_price#4, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(87) HashAggregate [codegen id : 34]
Input [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#36, isEmpty#37, count#38]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#39, isEmpty#40, count#41]

(88) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#39, isEmpty#40, count#41]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [id=#42]

(89) HashAggregate [codegen id : 70]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#39, isEmpty#40, count#41]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#43, count(1)#44]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#43 AS sales#45, count(1)#44 AS number_sales#46, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#43 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#47]

(90) Filter [codegen id : 70]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#45, number_sales#46, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#47]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#47) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#47 as decimal(32,6)) > cast(Subquery scalar-subquery#48, [id=#49] as decimal(32,6))))

(91) Project [codegen id : 70]
Output [6]: [store AS channel#50, i_brand_id#7, i_class_id#8, i_category_id#9, sales#45, number_sales#46]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sales#45, number_sales#46, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#47]

(92) ReusedExchange [Reuses operator id: 4]
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]

(93) Sort [codegen id : 36]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Arguments: [ss_item_sk#2 ASC NULLS FIRST], false, 0

(94) ReusedExchange [Reuses operator id: 66]
Output [1]: [ss_item_sk#28]

(95) Sort [codegen id : 50]
Input [1]: [ss_item_sk#28]
Arguments: [ss_item_sk#28 ASC NULLS FIRST], false, 0

(96) SortMergeJoin
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [ss_item_sk#28]
Join condition: None

(97) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_week_seq#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(98) ColumnarToRow [codegen id : 51]
Input [2]: [d_date_sk#10, d_week_seq#30]

(99) Filter [codegen id : 51]
Input [2]: [d_date_sk#10, d_week_seq#30]
Condition : ((isnotnull(d_week_seq#30) AND (d_week_seq#30 = Subquery scalar-subquery#51, [id=#52])) AND isnotnull(d_date_sk#10))

(100) Project [codegen id : 51]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_week_seq#30]

(101) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#53]

(102) BroadcastHashJoin [codegen id : 68]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(103) Project [codegen id : 68]
Output [3]: [ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4, d_date_sk#10]

(104) ReusedExchange [Reuses operator id: 84]
Output [4]: [i_item_sk#54, i_brand_id#55, i_class_id#56, i_category_id#57]

(105) BroadcastHashJoin [codegen id : 68]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#54]
Join condition: None

(106) Project [codegen id : 68]
Output [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#55, i_class_id#56, i_category_id#57]
Input [7]: [ss_item_sk#2, ss_quantity#3, ss_list_price#4, i_item_sk#54, i_brand_id#55, i_class_id#56, i_category_id#57]

(107) HashAggregate [codegen id : 68]
Input [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#55, i_class_id#56, i_category_id#57]
Keys [3]: [i_brand_id#55, i_class_id#56, i_category_id#57]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#58, isEmpty#59, count#60]
Results [6]: [i_brand_id#55, i_class_id#56, i_category_id#57, sum#61, isEmpty#62, count#63]

(108) Exchange
Input [6]: [i_brand_id#55, i_class_id#56, i_category_id#57, sum#61, isEmpty#62, count#63]
Arguments: hashpartitioning(i_brand_id#55, i_class_id#56, i_category_id#57, 5), ENSURE_REQUIREMENTS, [id=#64]

(109) HashAggregate [codegen id : 69]
Input [6]: [i_brand_id#55, i_class_id#56, i_category_id#57, sum#61, isEmpty#62, count#63]
Keys [3]: [i_brand_id#55, i_class_id#56, i_category_id#57]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#65, count(1)#66]
Results [6]: [i_brand_id#55, i_class_id#56, i_category_id#57, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#65 AS sales#67, count(1)#66 AS number_sales#68, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#65 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#69]

(110) Filter [codegen id : 69]
Input [6]: [i_brand_id#55, i_class_id#56, i_category_id#57, sales#67, number_sales#68, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#69]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#69) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#69 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#48, [id=#49] as decimal(32,6))))

(111) Project [codegen id : 69]
Output [6]: [store AS channel#70, i_brand_id#55, i_class_id#56, i_category_id#57, sales#67, number_sales#68]
Input [6]: [i_brand_id#55, i_class_id#56, i_category_id#57, sales#67, number_sales#68, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#69]

(112) BroadcastExchange
Input [6]: [channel#70, i_brand_id#55, i_class_id#56, i_category_id#57, sales#67, number_sales#68]
Arguments: HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true]),false), [id=#71]

(113) BroadcastHashJoin [codegen id : 70]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [i_brand_id#55, i_class_id#56, i_category_id#57]
Join condition: None

(114) TakeOrderedAndProject
Input [12]: [channel#50, i_brand_id#7, i_class_id#8, i_category_id#9, sales#45, number_sales#46, channel#70, i_brand_id#55, i_class_id#56, i_category_id#57, sales#67, number_sales#68]
Arguments: 100, [i_brand_id#7 ASC NULLS FIRST, i_class_id#8 ASC NULLS FIRST, i_category_id#9 ASC NULLS FIRST], [channel#50, i_brand_id#7, i_class_id#8, i_category_id#9, sales#45, number_sales#46, channel#70, i_brand_id#55, i_class_id#56, i_category_id#57, sales#67, number_sales#68]

===== Subqueries =====

Subquery:1 Hosting operator id = 90 Hosting Expression = Subquery scalar-subquery#48, [id=#49]
* HashAggregate (140)
+- Exchange (139)
   +- * HashAggregate (138)
      +- Union (137)
         :- * Project (124)
         :  +- * BroadcastHashJoin Inner BuildRight (123)
         :     :- * Filter (117)
         :     :  +- * ColumnarToRow (116)
         :     :     +- Scan parquet default.store_sales (115)
         :     +- BroadcastExchange (122)
         :        +- * Project (121)
         :           +- * Filter (120)
         :              +- * ColumnarToRow (119)
         :                 +- Scan parquet default.date_dim (118)
         :- * Project (130)
         :  +- * BroadcastHashJoin Inner BuildRight (129)
         :     :- * Filter (127)
         :     :  +- * ColumnarToRow (126)
         :     :     +- Scan parquet default.catalog_sales (125)
         :     +- ReusedExchange (128)
         +- * Project (136)
            +- * BroadcastHashJoin Inner BuildRight (135)
               :- * Filter (133)
               :  +- * ColumnarToRow (132)
               :     +- Scan parquet default.web_sales (131)
               +- ReusedExchange (134)


(115) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(116) ColumnarToRow [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]

(117) Filter [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Condition : isnotnull(ss_sold_date_sk#1)

(118) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(119) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]

(120) Filter [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 >= 1999)) AND (d_year#11 <= 2001)) AND isnotnull(d_date_sk#10))

(121) Project [codegen id : 1]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_year#11]

(122) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#72]

(123) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#10]
Join condition: None

(124) Project [codegen id : 2]
Output [2]: [ss_quantity#3 AS quantity#73, ss_list_price#4 AS list_price#74]
Input [4]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, d_date_sk#10]

(125) Scan parquet default.catalog_sales
Output [3]: [cs_sold_date_sk#18, cs_quantity#75, cs_list_price#76]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(126) ColumnarToRow [codegen id : 4]
Input [3]: [cs_sold_date_sk#18, cs_quantity#75, cs_list_price#76]

(127) Filter [codegen id : 4]
Input [3]: [cs_sold_date_sk#18, cs_quantity#75, cs_list_price#76]
Condition : isnotnull(cs_sold_date_sk#18)

(128) ReusedExchange [Reuses operator id: 122]
Output [1]: [d_date_sk#10]

(129) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#10]
Join condition: None

(130) Project [codegen id : 4]
Output [2]: [cs_quantity#75 AS quantity#77, cs_list_price#76 AS list_price#78]
Input [4]: [cs_sold_date_sk#18, cs_quantity#75, cs_list_price#76, d_date_sk#10]

(131) Scan parquet default.web_sales
Output [3]: [ws_sold_date_sk#23, ws_quantity#79, ws_list_price#80]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(132) ColumnarToRow [codegen id : 6]
Input [3]: [ws_sold_date_sk#23, ws_quantity#79, ws_list_price#80]

(133) Filter [codegen id : 6]
Input [3]: [ws_sold_date_sk#23, ws_quantity#79, ws_list_price#80]
Condition : isnotnull(ws_sold_date_sk#23)

(134) ReusedExchange [Reuses operator id: 122]
Output [1]: [d_date_sk#10]

(135) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#23]
Right keys [1]: [d_date_sk#10]
Join condition: None

(136) Project [codegen id : 6]
Output [2]: [ws_quantity#79 AS quantity#81, ws_list_price#80 AS list_price#82]
Input [4]: [ws_sold_date_sk#23, ws_quantity#79, ws_list_price#80, d_date_sk#10]

(137) Union

(138) HashAggregate [codegen id : 7]
Input [2]: [quantity#73, list_price#74]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#73 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#74 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#83, count#84]
Results [2]: [sum#85, count#86]

(139) Exchange
Input [2]: [sum#85, count#86]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#87]

(140) HashAggregate [codegen id : 8]
Input [2]: [sum#85, count#86]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#73 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#74 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#73 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#74 as decimal(12,2)))), DecimalType(18,2), true))#88]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#73 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#74 as decimal(12,2)))), DecimalType(18,2), true))#88 AS average_sales#89]

Subquery:2 Hosting operator id = 71 Hosting Expression = Subquery scalar-subquery#31, [id=#32]
* Project (144)
+- * Filter (143)
   +- * ColumnarToRow (142)
      +- Scan parquet default.date_dim (141)


(141) Scan parquet default.date_dim
Output [4]: [d_week_seq#30, d_year#11, d_moy#90, d_dom#91]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,2000), EqualTo(d_moy,12), EqualTo(d_dom,11)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(142) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#30, d_year#11, d_moy#90, d_dom#91]

(143) Filter [codegen id : 1]
Input [4]: [d_week_seq#30, d_year#11, d_moy#90, d_dom#91]
Condition : (((((isnotnull(d_year#11) AND isnotnull(d_moy#90)) AND isnotnull(d_dom#91)) AND (d_year#11 = 2000)) AND (d_moy#90 = 12)) AND (d_dom#91 = 11))

(144) Project [codegen id : 1]
Output [1]: [d_week_seq#30]
Input [4]: [d_week_seq#30, d_year#11, d_moy#90, d_dom#91]

Subquery:3 Hosting operator id = 110 Hosting Expression = ReusedSubquery Subquery scalar-subquery#48, [id=#49]

Subquery:4 Hosting operator id = 99 Hosting Expression = Subquery scalar-subquery#51, [id=#52]
* Project (148)
+- * Filter (147)
   +- * ColumnarToRow (146)
      +- Scan parquet default.date_dim (145)


(145) Scan parquet default.date_dim
Output [4]: [d_week_seq#30, d_year#11, d_moy#90, d_dom#91]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), EqualTo(d_dom,11)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(146) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#30, d_year#11, d_moy#90, d_dom#91]

(147) Filter [codegen id : 1]
Input [4]: [d_week_seq#30, d_year#11, d_moy#90, d_dom#91]
Condition : (((((isnotnull(d_year#11) AND isnotnull(d_moy#90)) AND isnotnull(d_dom#91)) AND (d_year#11 = 1999)) AND (d_moy#90 = 12)) AND (d_dom#91 = 11))

(148) Project [codegen id : 1]
Output [1]: [d_week_seq#30]
Input [4]: [d_week_seq#30, d_year#11, d_moy#90, d_dom#91]


