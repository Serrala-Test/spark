== Physical Plan ==
TakeOrderedAndProject (115)
+- * BroadcastHashJoin Inner BuildRight (114)
   :- * Project (89)
   :  +- * Filter (88)
   :     +- * HashAggregate (87)
   :        +- Exchange (86)
   :           +- * HashAggregate (85)
   :              +- * Project (84)
   :                 +- * BroadcastHashJoin Inner BuildRight (83)
   :                    :- * Project (73)
   :                    :  +- * BroadcastHashJoin Inner BuildRight (72)
   :                    :     :- SortMergeJoin LeftSemi (66)
   :                    :     :  :- * Sort (5)
   :                    :     :  :  +- Exchange (4)
   :                    :     :  :     +- * Filter (3)
   :                    :     :  :        +- * ColumnarToRow (2)
   :                    :     :  :           +- Scan parquet default.store_sales (1)
   :                    :     :  +- * Sort (65)
   :                    :     :     +- Exchange (64)
   :                    :     :        +- * Project (63)
   :                    :     :           +- * BroadcastHashJoin Inner BuildRight (62)
   :                    :     :              :- * Filter (8)
   :                    :     :              :  +- * ColumnarToRow (7)
   :                    :     :              :     +- Scan parquet default.item (6)
   :                    :     :              +- BroadcastExchange (61)
   :                    :     :                 +- * HashAggregate (60)
   :                    :     :                    +- * HashAggregate (59)
   :                    :     :                       +- * HashAggregate (58)
   :                    :     :                          +- Exchange (57)
   :                    :     :                             +- * HashAggregate (56)
   :                    :     :                                +- * BroadcastHashJoin LeftSemi BuildRight (55)
   :                    :     :                                   :- * BroadcastHashJoin LeftSemi BuildRight (41)
   :                    :     :                                   :  :- * Project (24)
   :                    :     :                                   :  :  +- * BroadcastHashJoin Inner BuildRight (23)
   :                    :     :                                   :  :     :- * Project (18)
   :                    :     :                                   :  :     :  +- * BroadcastHashJoin Inner BuildRight (17)
   :                    :     :                                   :  :     :     :- * Filter (11)
   :                    :     :                                   :  :     :     :  +- * ColumnarToRow (10)
   :                    :     :                                   :  :     :     :     +- Scan parquet default.store_sales (9)
   :                    :     :                                   :  :     :     +- BroadcastExchange (16)
   :                    :     :                                   :  :     :        +- * Project (15)
   :                    :     :                                   :  :     :           +- * Filter (14)
   :                    :     :                                   :  :     :              +- * ColumnarToRow (13)
   :                    :     :                                   :  :     :                 +- Scan parquet default.date_dim (12)
   :                    :     :                                   :  :     +- BroadcastExchange (22)
   :                    :     :                                   :  :        +- * Filter (21)
   :                    :     :                                   :  :           +- * ColumnarToRow (20)
   :                    :     :                                   :  :              +- Scan parquet default.item (19)
   :                    :     :                                   :  +- BroadcastExchange (40)
   :                    :     :                                   :     +- * HashAggregate (39)
   :                    :     :                                   :        +- Exchange (38)
   :                    :     :                                   :           +- * HashAggregate (37)
   :                    :     :                                   :              +- * Project (36)
   :                    :     :                                   :                 +- * BroadcastHashJoin Inner BuildRight (35)
   :                    :     :                                   :                    :- * Project (30)
   :                    :     :                                   :                    :  +- * BroadcastHashJoin Inner BuildRight (29)
   :                    :     :                                   :                    :     :- * Filter (27)
   :                    :     :                                   :                    :     :  +- * ColumnarToRow (26)
   :                    :     :                                   :                    :     :     +- Scan parquet default.catalog_sales (25)
   :                    :     :                                   :                    :     +- ReusedExchange (28)
   :                    :     :                                   :                    +- BroadcastExchange (34)
   :                    :     :                                   :                       +- * Filter (33)
   :                    :     :                                   :                          +- * ColumnarToRow (32)
   :                    :     :                                   :                             +- Scan parquet default.item (31)
   :                    :     :                                   +- BroadcastExchange (54)
   :                    :     :                                      +- * HashAggregate (53)
   :                    :     :                                         +- Exchange (52)
   :                    :     :                                            +- * HashAggregate (51)
   :                    :     :                                               +- * Project (50)
   :                    :     :                                                  +- * BroadcastHashJoin Inner BuildRight (49)
   :                    :     :                                                     :- * Project (47)
   :                    :     :                                                     :  +- * BroadcastHashJoin Inner BuildRight (46)
   :                    :     :                                                     :     :- * Filter (44)
   :                    :     :                                                     :     :  +- * ColumnarToRow (43)
   :                    :     :                                                     :     :     +- Scan parquet default.web_sales (42)
   :                    :     :                                                     :     +- ReusedExchange (45)
   :                    :     :                                                     +- ReusedExchange (48)
   :                    :     +- BroadcastExchange (71)
   :                    :        +- * Project (70)
   :                    :           +- * Filter (69)
   :                    :              +- * ColumnarToRow (68)
   :                    :                 +- Scan parquet default.date_dim (67)
   :                    +- BroadcastExchange (82)
   :                       +- SortMergeJoin LeftSemi (81)
   :                          :- * Sort (78)
   :                          :  +- Exchange (77)
   :                          :     +- * Filter (76)
   :                          :        +- * ColumnarToRow (75)
   :                          :           +- Scan parquet default.item (74)
   :                          +- * Sort (80)
   :                             +- ReusedExchange (79)
   +- BroadcastExchange (113)
      +- * Project (112)
         +- * Filter (111)
            +- * HashAggregate (110)
               +- Exchange (109)
                  +- * HashAggregate (108)
                     +- * Project (107)
                        +- * BroadcastHashJoin Inner BuildRight (106)
                           :- * Project (104)
                           :  +- * BroadcastHashJoin Inner BuildRight (103)
                           :     :- SortMergeJoin LeftSemi (97)
                           :     :  :- * Sort (94)
                           :     :  :  +- Exchange (93)
                           :     :  :     +- * Filter (92)
                           :     :  :        +- * ColumnarToRow (91)
                           :     :  :           +- Scan parquet default.store_sales (90)
                           :     :  +- * Sort (96)
                           :     :     +- ReusedExchange (95)
                           :     +- BroadcastExchange (102)
                           :        +- * Project (101)
                           :           +- * Filter (100)
                           :              +- * ColumnarToRow (99)
                           :                 +- Scan parquet default.date_dim (98)
                           +- ReusedExchange (105)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 15]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(8) Filter [codegen id : 15]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(9) Scan parquet default.store_sales
Output [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#11)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(10) ColumnarToRow [codegen id : 13]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]

(11) Filter [codegen id : 13]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(12) Scan parquet default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(13) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#12, d_year#13]

(14) Filter [codegen id : 3]
Input [2]: [d_date_sk#12, d_year#13]
Condition : (((isnotnull(d_year#13) AND (d_year#13 >= 1999)) AND (d_year#13 <= 2001)) AND isnotnull(d_date_sk#12))

(15) Project [codegen id : 3]
Output [1]: [d_date_sk#12]
Input [2]: [d_date_sk#12, d_year#13]

(16) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(17) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#12]
Join condition: None

(18) Project [codegen id : 13]
Output [1]: [ss_item_sk#1]
Input [3]: [ss_item_sk#1, ss_sold_date_sk#4, d_date_sk#12]

(19) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(20) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(21) Filter [codegen id : 4]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : (((isnotnull(i_item_sk#7) AND isnotnull(i_brand_id#8)) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(22) BroadcastExchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#15]

(23) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join condition: None

(24) Project [codegen id : 13]
Output [3]: [i_brand_id#8 AS brand_id#16, i_class_id#9 AS class_id#17, i_category_id#10 AS category_id#18]
Input [5]: [ss_item_sk#1, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(25) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#19, cs_sold_date_sk#20]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#20), dynamicpruningexpression(cs_sold_date_sk#20 IN dynamicpruning#11)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(26) ColumnarToRow [codegen id : 7]
Input [2]: [cs_item_sk#19, cs_sold_date_sk#20]

(27) Filter [codegen id : 7]
Input [2]: [cs_item_sk#19, cs_sold_date_sk#20]
Condition : isnotnull(cs_item_sk#19)

(28) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#12]

(29) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cs_sold_date_sk#20]
Right keys [1]: [d_date_sk#12]
Join condition: None

(30) Project [codegen id : 7]
Output [1]: [cs_item_sk#19]
Input [3]: [cs_item_sk#19, cs_sold_date_sk#20, d_date_sk#12]

(31) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(32) ColumnarToRow [codegen id : 6]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(33) Filter [codegen id : 6]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : isnotnull(i_item_sk#7)

(34) BroadcastExchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#21]

(35) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cs_item_sk#19]
Right keys [1]: [i_item_sk#7]
Join condition: None

(36) Project [codegen id : 7]
Output [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Input [5]: [cs_item_sk#19, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(37) HashAggregate [codegen id : 7]
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]

(38) Exchange
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#22]

(39) HashAggregate [codegen id : 8]
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]

(40) BroadcastExchange
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#23]

(41) BroadcastHashJoin [codegen id : 13]
Left keys [6]: [coalesce(brand_id#16, 0), isnull(brand_id#16), coalesce(class_id#17, 0), isnull(class_id#17), coalesce(category_id#18, 0), isnull(category_id#18)]
Right keys [6]: [coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10)]
Join condition: None

(42) Scan parquet default.web_sales
Output [2]: [ws_item_sk#24, ws_sold_date_sk#25]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#25), dynamicpruningexpression(ws_sold_date_sk#25 IN dynamicpruning#11)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(43) ColumnarToRow [codegen id : 11]
Input [2]: [ws_item_sk#24, ws_sold_date_sk#25]

(44) Filter [codegen id : 11]
Input [2]: [ws_item_sk#24, ws_sold_date_sk#25]
Condition : isnotnull(ws_item_sk#24)

(45) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#12]

(46) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ws_sold_date_sk#25]
Right keys [1]: [d_date_sk#12]
Join condition: None

(47) Project [codegen id : 11]
Output [1]: [ws_item_sk#24]
Input [3]: [ws_item_sk#24, ws_sold_date_sk#25, d_date_sk#12]

(48) ReusedExchange [Reuses operator id: 34]
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(49) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ws_item_sk#24]
Right keys [1]: [i_item_sk#7]
Join condition: None

(50) Project [codegen id : 11]
Output [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Input [5]: [ws_item_sk#24, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(51) HashAggregate [codegen id : 11]
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]

(52) Exchange
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#26]

(53) HashAggregate [codegen id : 12]
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]

(54) BroadcastExchange
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#27]

(55) BroadcastHashJoin [codegen id : 13]
Left keys [6]: [coalesce(brand_id#16, 0), isnull(brand_id#16), coalesce(class_id#17, 0), isnull(class_id#17), coalesce(category_id#18, 0), isnull(category_id#18)]
Right keys [6]: [coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10)]
Join condition: None

(56) HashAggregate [codegen id : 13]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Keys [3]: [brand_id#16, class_id#17, category_id#18]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#16, class_id#17, category_id#18]

(57) Exchange
Input [3]: [brand_id#16, class_id#17, category_id#18]
Arguments: hashpartitioning(brand_id#16, class_id#17, category_id#18, 5), ENSURE_REQUIREMENTS, [id=#28]

(58) HashAggregate [codegen id : 14]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Keys [3]: [brand_id#16, class_id#17, category_id#18]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#16, class_id#17, category_id#18]

(59) HashAggregate [codegen id : 14]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Keys [3]: [brand_id#16, class_id#17, category_id#18]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#16, class_id#17, category_id#18]

(60) HashAggregate [codegen id : 14]
Input [3]: [brand_id#16, class_id#17, category_id#18]
Keys [3]: [brand_id#16, class_id#17, category_id#18]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#16, class_id#17, category_id#18]

(61) BroadcastExchange
Input [3]: [brand_id#16, class_id#17, category_id#18]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#29]

(62) BroadcastHashJoin [codegen id : 15]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#16, class_id#17, category_id#18]
Join condition: None

(63) Project [codegen id : 15]
Output [1]: [i_item_sk#7 AS ss_item_sk#30]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#16, class_id#17, category_id#18]

(64) Exchange
Input [1]: [ss_item_sk#30]
Arguments: hashpartitioning(ss_item_sk#30, 5), ENSURE_REQUIREMENTS, [id=#31]

(65) Sort [codegen id : 16]
Input [1]: [ss_item_sk#30]
Arguments: [ss_item_sk#30 ASC NULLS FIRST], false, 0

(66) SortMergeJoin
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#30]
Join condition: None

(67) Scan parquet default.date_dim
Output [2]: [d_date_sk#12, d_week_seq#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(68) ColumnarToRow [codegen id : 17]
Input [2]: [d_date_sk#12, d_week_seq#32]

(69) Filter [codegen id : 17]
Input [2]: [d_date_sk#12, d_week_seq#32]
Condition : ((isnotnull(d_week_seq#32) AND (d_week_seq#32 = Subquery scalar-subquery#33, [id=#34])) AND isnotnull(d_date_sk#12))

(70) Project [codegen id : 17]
Output [1]: [d_date_sk#12]
Input [2]: [d_date_sk#12, d_week_seq#32]

(71) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#35]

(72) BroadcastHashJoin [codegen id : 34]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#12]
Join condition: None

(73) Project [codegen id : 34]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#12]

(74) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(75) ColumnarToRow [codegen id : 18]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(76) Filter [codegen id : 18]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : (((isnotnull(i_item_sk#7) AND isnotnull(i_brand_id#8)) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(77) Exchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(i_item_sk#7, 5), ENSURE_REQUIREMENTS, [id=#36]

(78) Sort [codegen id : 19]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [i_item_sk#7 ASC NULLS FIRST], false, 0

(79) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#30]

(80) Sort [codegen id : 33]
Input [1]: [ss_item_sk#30]
Arguments: [ss_item_sk#30 ASC NULLS FIRST], false, 0

(81) SortMergeJoin
Left keys [1]: [i_item_sk#7]
Right keys [1]: [ss_item_sk#30]
Join condition: None

(82) BroadcastExchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#37]

(83) BroadcastHashJoin [codegen id : 34]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join condition: None

(84) Project [codegen id : 34]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(85) HashAggregate [codegen id : 34]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#38, isEmpty#39, count#40]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#41, isEmpty#42, count#43]

(86) Exchange
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#41, isEmpty#42, count#43]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), ENSURE_REQUIREMENTS, [id=#44]

(87) HashAggregate [codegen id : 70]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#41, isEmpty#42, count#43]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#45, count(1)#46]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#45 AS sales#47, count(1)#46 AS number_sales#48, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#45 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#49]

(88) Filter [codegen id : 70]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#47, number_sales#48, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#49]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#49) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#49 as decimal(32,6)) > cast(Subquery scalar-subquery#50, [id=#51] as decimal(32,6))))

(89) Project [codegen id : 70]
Output [6]: [store AS channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sales#47, number_sales#48]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#47, number_sales#48, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#49]

(90) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#53)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(91) ColumnarToRow [codegen id : 35]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(92) Filter [codegen id : 35]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(93) Exchange
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#54]

(94) Sort [codegen id : 36]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(95) ReusedExchange [Reuses operator id: unknown]
Output [1]: [ss_item_sk#30]

(96) Sort [codegen id : 50]
Input [1]: [ss_item_sk#30]
Arguments: [ss_item_sk#30 ASC NULLS FIRST], false, 0

(97) SortMergeJoin
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#30]
Join condition: None

(98) Scan parquet default.date_dim
Output [2]: [d_date_sk#12, d_week_seq#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(99) ColumnarToRow [codegen id : 51]
Input [2]: [d_date_sk#12, d_week_seq#32]

(100) Filter [codegen id : 51]
Input [2]: [d_date_sk#12, d_week_seq#32]
Condition : ((isnotnull(d_week_seq#32) AND (d_week_seq#32 = Subquery scalar-subquery#55, [id=#56])) AND isnotnull(d_date_sk#12))

(101) Project [codegen id : 51]
Output [1]: [d_date_sk#12]
Input [2]: [d_date_sk#12, d_week_seq#32]

(102) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#57]

(103) BroadcastHashJoin [codegen id : 68]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#12]
Join condition: None

(104) Project [codegen id : 68]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#12]

(105) ReusedExchange [Reuses operator id: 82]
Output [4]: [i_item_sk#58, i_brand_id#59, i_class_id#60, i_category_id#61]

(106) BroadcastHashJoin [codegen id : 68]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#58]
Join condition: None

(107) Project [codegen id : 68]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#59, i_class_id#60, i_category_id#61]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#58, i_brand_id#59, i_class_id#60, i_category_id#61]

(108) HashAggregate [codegen id : 68]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#59, i_class_id#60, i_category_id#61]
Keys [3]: [i_brand_id#59, i_class_id#60, i_category_id#61]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#62, isEmpty#63, count#64]
Results [6]: [i_brand_id#59, i_class_id#60, i_category_id#61, sum#65, isEmpty#66, count#67]

(109) Exchange
Input [6]: [i_brand_id#59, i_class_id#60, i_category_id#61, sum#65, isEmpty#66, count#67]
Arguments: hashpartitioning(i_brand_id#59, i_class_id#60, i_category_id#61, 5), ENSURE_REQUIREMENTS, [id=#68]

(110) HashAggregate [codegen id : 69]
Input [6]: [i_brand_id#59, i_class_id#60, i_category_id#61, sum#65, isEmpty#66, count#67]
Keys [3]: [i_brand_id#59, i_class_id#60, i_category_id#61]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#69, count(1)#70]
Results [6]: [i_brand_id#59, i_class_id#60, i_category_id#61, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#69 AS sales#71, count(1)#70 AS number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#69 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#73]

(111) Filter [codegen id : 69]
Input [6]: [i_brand_id#59, i_class_id#60, i_category_id#61, sales#71, number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#73]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#73) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#73 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#50, [id=#51] as decimal(32,6))))

(112) Project [codegen id : 69]
Output [6]: [store AS channel#74, i_brand_id#59, i_class_id#60, i_category_id#61, sales#71, number_sales#72]
Input [6]: [i_brand_id#59, i_class_id#60, i_category_id#61, sales#71, number_sales#72, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#73]

(113) BroadcastExchange
Input [6]: [channel#74, i_brand_id#59, i_class_id#60, i_category_id#61, sales#71, number_sales#72]
Arguments: HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true]),false), [id=#75]

(114) BroadcastHashJoin [codegen id : 70]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [i_brand_id#59, i_class_id#60, i_category_id#61]
Join condition: None

(115) TakeOrderedAndProject
Input [12]: [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sales#47, number_sales#48, channel#74, i_brand_id#59, i_class_id#60, i_category_id#61, sales#71, number_sales#72]
Arguments: 100, [i_brand_id#8 ASC NULLS FIRST, i_class_id#9 ASC NULLS FIRST, i_category_id#10 ASC NULLS FIRST], [channel#52, i_brand_id#8, i_class_id#9, i_category_id#10, sales#47, number_sales#48, channel#74, i_brand_id#59, i_class_id#60, i_category_id#61, sales#71, number_sales#72]

===== Subqueries =====

Subquery:1 Hosting operator id = 88 Hosting Expression = Subquery scalar-subquery#50, [id=#51]
* HashAggregate (138)
+- Exchange (137)
   +- * HashAggregate (136)
      +- Union (135)
         :- * Project (124)
         :  +- * BroadcastHashJoin Inner BuildRight (123)
         :     :- * ColumnarToRow (117)
         :     :  +- Scan parquet default.store_sales (116)
         :     +- BroadcastExchange (122)
         :        +- * Project (121)
         :           +- * Filter (120)
         :              +- * ColumnarToRow (119)
         :                 +- Scan parquet default.date_dim (118)
         :- * Project (129)
         :  +- * BroadcastHashJoin Inner BuildRight (128)
         :     :- * ColumnarToRow (126)
         :     :  +- Scan parquet default.catalog_sales (125)
         :     +- ReusedExchange (127)
         +- * Project (134)
            +- * BroadcastHashJoin Inner BuildRight (133)
               :- * ColumnarToRow (131)
               :  +- Scan parquet default.web_sales (130)
               +- ReusedExchange (132)


(116) Scan parquet default.store_sales
Output [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#76)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(117) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(118) Scan parquet default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(119) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#12, d_year#13]

(120) Filter [codegen id : 1]
Input [2]: [d_date_sk#12, d_year#13]
Condition : (((isnotnull(d_year#13) AND (d_year#13 >= 1999)) AND (d_year#13 <= 2001)) AND isnotnull(d_date_sk#12))

(121) Project [codegen id : 1]
Output [1]: [d_date_sk#12]
Input [2]: [d_date_sk#12, d_year#13]

(122) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#77]

(123) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#12]
Join condition: None

(124) Project [codegen id : 2]
Output [2]: [ss_quantity#2 AS quantity#78, ss_list_price#3 AS list_price#79]
Input [4]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#12]

(125) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#80, cs_list_price#81, cs_sold_date_sk#20]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#20), dynamicpruningexpression(cs_sold_date_sk#20 IN dynamicpruning#76)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(126) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#80, cs_list_price#81, cs_sold_date_sk#20]

(127) ReusedExchange [Reuses operator id: 122]
Output [1]: [d_date_sk#12]

(128) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#20]
Right keys [1]: [d_date_sk#12]
Join condition: None

(129) Project [codegen id : 4]
Output [2]: [cs_quantity#80 AS quantity#82, cs_list_price#81 AS list_price#83]
Input [4]: [cs_quantity#80, cs_list_price#81, cs_sold_date_sk#20, d_date_sk#12]

(130) Scan parquet default.web_sales
Output [3]: [ws_quantity#84, ws_list_price#85, ws_sold_date_sk#25]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#25), dynamicpruningexpression(ws_sold_date_sk#25 IN dynamicpruning#76)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(131) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#84, ws_list_price#85, ws_sold_date_sk#25]

(132) ReusedExchange [Reuses operator id: 122]
Output [1]: [d_date_sk#12]

(133) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#25]
Right keys [1]: [d_date_sk#12]
Join condition: None

(134) Project [codegen id : 6]
Output [2]: [ws_quantity#84 AS quantity#86, ws_list_price#85 AS list_price#87]
Input [4]: [ws_quantity#84, ws_list_price#85, ws_sold_date_sk#25, d_date_sk#12]

(135) Union

(136) HashAggregate [codegen id : 7]
Input [2]: [quantity#78, list_price#79]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#78 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#79 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#88, count#89]
Results [2]: [sum#90, count#91]

(137) Exchange
Input [2]: [sum#90, count#91]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#92]

(138) HashAggregate [codegen id : 8]
Input [2]: [sum#90, count#91]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#78 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#79 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#78 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#79 as decimal(12,2)))), DecimalType(18,2), true))#93]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#78 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#79 as decimal(12,2)))), DecimalType(18,2), true))#93 AS average_sales#94]

Subquery:2 Hosting operator id = 116 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#76
ReusedExchange (139)


(139) ReusedExchange [Reuses operator id: 122]
Output [1]: [d_date_sk#12]

Subquery:3 Hosting operator id = 125 Hosting Expression = cs_sold_date_sk#20 IN dynamicpruning#76

Subquery:4 Hosting operator id = 130 Hosting Expression = ws_sold_date_sk#25 IN dynamicpruning#76

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
ReusedExchange (140)


(140) ReusedExchange [Reuses operator id: 71]
Output [1]: [d_date_sk#12]

Subquery:6 Hosting operator id = 9 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#11
ReusedExchange (141)


(141) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#12]

Subquery:7 Hosting operator id = 25 Hosting Expression = cs_sold_date_sk#20 IN dynamicpruning#11

Subquery:8 Hosting operator id = 42 Hosting Expression = ws_sold_date_sk#25 IN dynamicpruning#11

Subquery:9 Hosting operator id = 69 Hosting Expression = Subquery scalar-subquery#33, [id=#34]
* Project (145)
+- * Filter (144)
   +- * ColumnarToRow (143)
      +- Scan parquet default.date_dim (142)


(142) Scan parquet default.date_dim
Output [4]: [d_week_seq#32, d_year#13, d_moy#95, d_dom#96]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,2000), EqualTo(d_moy,12), EqualTo(d_dom,11)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(143) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#32, d_year#13, d_moy#95, d_dom#96]

(144) Filter [codegen id : 1]
Input [4]: [d_week_seq#32, d_year#13, d_moy#95, d_dom#96]
Condition : (((((isnotnull(d_year#13) AND isnotnull(d_moy#95)) AND isnotnull(d_dom#96)) AND (d_year#13 = 2000)) AND (d_moy#95 = 12)) AND (d_dom#96 = 11))

(145) Project [codegen id : 1]
Output [1]: [d_week_seq#32]
Input [4]: [d_week_seq#32, d_year#13, d_moy#95, d_dom#96]

Subquery:10 Hosting operator id = 111 Hosting Expression = ReusedSubquery Subquery scalar-subquery#50, [id=#51]

Subquery:11 Hosting operator id = 90 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#53
ReusedExchange (146)


(146) ReusedExchange [Reuses operator id: 102]
Output [1]: [d_date_sk#12]

Subquery:12 Hosting operator id = 100 Hosting Expression = Subquery scalar-subquery#55, [id=#56]
* Project (150)
+- * Filter (149)
   +- * ColumnarToRow (148)
      +- Scan parquet default.date_dim (147)


(147) Scan parquet default.date_dim
Output [4]: [d_week_seq#32, d_year#13, d_moy#95, d_dom#96]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), EqualTo(d_dom,11)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(148) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#32, d_year#13, d_moy#95, d_dom#96]

(149) Filter [codegen id : 1]
Input [4]: [d_week_seq#32, d_year#13, d_moy#95, d_dom#96]
Condition : (((((isnotnull(d_year#13) AND isnotnull(d_moy#95)) AND isnotnull(d_dom#96)) AND (d_year#13 = 1999)) AND (d_moy#95 = 12)) AND (d_dom#96 = 11))

(150) Project [codegen id : 1]
Output [1]: [d_week_seq#32]
Input [4]: [d_week_seq#32, d_year#13, d_moy#95, d_dom#96]


