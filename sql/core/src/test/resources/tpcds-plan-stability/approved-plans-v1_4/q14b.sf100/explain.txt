== Physical Plan ==
TakeOrderedAndProject (110)
+- * BroadcastHashJoin Inner BuildRight (109)
   :- * Project (87)
   :  +- * Filter (86)
   :     +- * HashAggregate (85)
   :        +- Exchange (84)
   :           +- * HashAggregate (83)
   :              +- * Project (82)
   :                 +- * BroadcastHashJoin Inner BuildRight (81)
   :                    :- * Project (71)
   :                    :  +- * BroadcastHashJoin Inner BuildLeft (70)
   :                    :     :- BroadcastExchange (5)
   :                    :     :  +- * Project (4)
   :                    :     :     +- * Filter (3)
   :                    :     :        +- * ColumnarToRow (2)
   :                    :     :           +- Scan parquet default.date_dim (1)
   :                    :     +- SortMergeJoin LeftSemi (69)
   :                    :        :- * Sort (10)
   :                    :        :  +- Exchange (9)
   :                    :        :     +- * Filter (8)
   :                    :        :        +- * ColumnarToRow (7)
   :                    :        :           +- Scan parquet default.store_sales (6)
   :                    :        +- * Sort (68)
   :                    :           +- Exchange (67)
   :                    :              +- * Project (66)
   :                    :                 +- * BroadcastHashJoin Inner BuildRight (65)
   :                    :                    :- * Filter (13)
   :                    :                    :  +- * ColumnarToRow (12)
   :                    :                    :     +- Scan parquet default.item (11)
   :                    :                    +- BroadcastExchange (64)
   :                    :                       +- * HashAggregate (63)
   :                    :                          +- * HashAggregate (62)
   :                    :                             +- * HashAggregate (61)
   :                    :                                +- Exchange (60)
   :                    :                                   +- * HashAggregate (59)
   :                    :                                      +- SortMergeJoin LeftSemi (58)
   :                    :                                         :- SortMergeJoin LeftSemi (46)
   :                    :                                         :  :- * Sort (31)
   :                    :                                         :  :  +- Exchange (30)
   :                    :                                         :  :     +- * Project (29)
   :                    :                                         :  :        +- * BroadcastHashJoin Inner BuildRight (28)
   :                    :                                         :  :           :- * Project (23)
   :                    :                                         :  :           :  +- * BroadcastHashJoin Inner BuildRight (22)
   :                    :                                         :  :           :     :- * Filter (16)
   :                    :                                         :  :           :     :  +- * ColumnarToRow (15)
   :                    :                                         :  :           :     :     +- Scan parquet default.store_sales (14)
   :                    :                                         :  :           :     +- BroadcastExchange (21)
   :                    :                                         :  :           :        +- * Project (20)
   :                    :                                         :  :           :           +- * Filter (19)
   :                    :                                         :  :           :              +- * ColumnarToRow (18)
   :                    :                                         :  :           :                 +- Scan parquet default.date_dim (17)
   :                    :                                         :  :           +- BroadcastExchange (27)
   :                    :                                         :  :              +- * Filter (26)
   :                    :                                         :  :                 +- * ColumnarToRow (25)
   :                    :                                         :  :                    +- Scan parquet default.item (24)
   :                    :                                         :  +- * Sort (45)
   :                    :                                         :     +- Exchange (44)
   :                    :                                         :        +- * Project (43)
   :                    :                                         :           +- * BroadcastHashJoin Inner BuildRight (42)
   :                    :                                         :              :- * Project (37)
   :                    :                                         :              :  +- * BroadcastHashJoin Inner BuildRight (36)
   :                    :                                         :              :     :- * Filter (34)
   :                    :                                         :              :     :  +- * ColumnarToRow (33)
   :                    :                                         :              :     :     +- Scan parquet default.catalog_sales (32)
   :                    :                                         :              :     +- ReusedExchange (35)
   :                    :                                         :              +- BroadcastExchange (41)
   :                    :                                         :                 +- * Filter (40)
   :                    :                                         :                    +- * ColumnarToRow (39)
   :                    :                                         :                       +- Scan parquet default.item (38)
   :                    :                                         +- * Sort (57)
   :                    :                                            +- Exchange (56)
   :                    :                                               +- * Project (55)
   :                    :                                                  +- * BroadcastHashJoin Inner BuildRight (54)
   :                    :                                                     :- * Project (52)
   :                    :                                                     :  +- * BroadcastHashJoin Inner BuildRight (51)
   :                    :                                                     :     :- * Filter (49)
   :                    :                                                     :     :  +- * ColumnarToRow (48)
   :                    :                                                     :     :     +- Scan parquet default.web_sales (47)
   :                    :                                                     :     +- ReusedExchange (50)
   :                    :                                                     +- ReusedExchange (53)
   :                    +- BroadcastExchange (80)
   :                       +- SortMergeJoin LeftSemi (79)
   :                          :- * Sort (76)
   :                          :  +- Exchange (75)
   :                          :     +- * Filter (74)
   :                          :        +- * ColumnarToRow (73)
   :                          :           +- Scan parquet default.item (72)
   :                          +- * Sort (78)
   :                             +- ReusedExchange (77)
   +- BroadcastExchange (108)
      +- * Project (107)
         +- * Filter (106)
            +- * HashAggregate (105)
               +- Exchange (104)
                  +- * HashAggregate (103)
                     +- * Project (102)
                        +- * BroadcastHashJoin Inner BuildRight (101)
                           :- * Project (99)
                           :  +- * BroadcastHashJoin Inner BuildRight (98)
                           :     :- SortMergeJoin LeftSemi (92)
                           :     :  :- * Sort (89)
                           :     :  :  +- ReusedExchange (88)
                           :     :  +- * Sort (91)
                           :     :     +- ReusedExchange (90)
                           :     +- BroadcastExchange (97)
                           :        +- * Project (96)
                           :           +- * Filter (95)
                           :              +- * ColumnarToRow (94)
                           :                 +- Scan parquet default.date_dim (93)
                           +- ReusedExchange (100)


(1) Scan parquet default.date_dim
Output [2]: [d_date_sk#1, d_week_seq#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(2) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#1, d_week_seq#2]

(3) Filter [codegen id : 1]
Input [2]: [d_date_sk#1, d_week_seq#2]
Condition : ((isnotnull(d_week_seq#2) AND (d_week_seq#2 = Subquery scalar-subquery#3, [id=#4])) AND isnotnull(d_date_sk#1))

(4) Project [codegen id : 1]
Output [1]: [d_date_sk#1]
Input [2]: [d_date_sk#1, d_week_seq#2]

(5) BroadcastExchange
Input [1]: [d_date_sk#1]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#5]

(6) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#6, ss_item_sk#7, ss_quantity#8, ss_list_price#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(7) ColumnarToRow [codegen id : 2]
Input [4]: [ss_sold_date_sk#6, ss_item_sk#7, ss_quantity#8, ss_list_price#9]

(8) Filter [codegen id : 2]
Input [4]: [ss_sold_date_sk#6, ss_item_sk#7, ss_quantity#8, ss_list_price#9]
Condition : (isnotnull(ss_item_sk#7) AND isnotnull(ss_sold_date_sk#6))

(9) Exchange
Input [4]: [ss_sold_date_sk#6, ss_item_sk#7, ss_quantity#8, ss_list_price#9]
Arguments: hashpartitioning(ss_item_sk#7, 5), true, [id=#10]

(10) Sort [codegen id : 3]
Input [4]: [ss_sold_date_sk#6, ss_item_sk#7, ss_quantity#8, ss_list_price#9]
Arguments: [ss_item_sk#7 ASC NULLS FIRST], false, 0

(11) Scan parquet default.item
Output [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(12) ColumnarToRow [codegen id : 18]
Input [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]

(13) Filter [codegen id : 18]
Input [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]
Condition : ((isnotnull(i_brand_id#12) AND isnotnull(i_class_id#13)) AND isnotnull(i_category_id#14))

(14) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#6, ss_item_sk#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(15) ColumnarToRow [codegen id : 6]
Input [2]: [ss_sold_date_sk#6, ss_item_sk#7]

(16) Filter [codegen id : 6]
Input [2]: [ss_sold_date_sk#6, ss_item_sk#7]
Condition : (isnotnull(ss_item_sk#7) AND isnotnull(ss_sold_date_sk#6))

(17) Scan parquet default.date_dim
Output [2]: [d_date_sk#1, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(18) ColumnarToRow [codegen id : 4]
Input [2]: [d_date_sk#1, d_year#15]

(19) Filter [codegen id : 4]
Input [2]: [d_date_sk#1, d_year#15]
Condition : (((isnotnull(d_year#15) AND (d_year#15 >= 1999)) AND (d_year#15 <= 2001)) AND isnotnull(d_date_sk#1))

(20) Project [codegen id : 4]
Output [1]: [d_date_sk#1]
Input [2]: [d_date_sk#1, d_year#15]

(21) BroadcastExchange
Input [1]: [d_date_sk#1]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(22) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#1]
Join condition: None

(23) Project [codegen id : 6]
Output [1]: [ss_item_sk#7]
Input [3]: [ss_sold_date_sk#6, ss_item_sk#7, d_date_sk#1]

(24) Scan parquet default.item
Output [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(25) ColumnarToRow [codegen id : 5]
Input [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]

(26) Filter [codegen id : 5]
Input [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]
Condition : (((isnotnull(i_item_sk#11) AND isnotnull(i_brand_id#12)) AND isnotnull(i_class_id#13)) AND isnotnull(i_category_id#14))

(27) BroadcastExchange
Input [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#17]

(28) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#7]
Right keys [1]: [i_item_sk#11]
Join condition: None

(29) Project [codegen id : 6]
Output [3]: [i_brand_id#12 AS brand_id#18, i_class_id#13 AS class_id#19, i_category_id#14 AS category_id#20]
Input [5]: [ss_item_sk#7, i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]

(30) Exchange
Input [3]: [brand_id#18, class_id#19, category_id#20]
Arguments: hashpartitioning(coalesce(brand_id#18, 0), isnull(brand_id#18), coalesce(class_id#19, 0), isnull(class_id#19), coalesce(category_id#20, 0), isnull(category_id#20), 5), true, [id=#21]

(31) Sort [codegen id : 7]
Input [3]: [brand_id#18, class_id#19, category_id#20]
Arguments: [coalesce(brand_id#18, 0) ASC NULLS FIRST, isnull(brand_id#18) ASC NULLS FIRST, coalesce(class_id#19, 0) ASC NULLS FIRST, isnull(class_id#19) ASC NULLS FIRST, coalesce(category_id#20, 0) ASC NULLS FIRST, isnull(category_id#20) ASC NULLS FIRST], false, 0

(32) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#22, cs_item_sk#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int>

(33) ColumnarToRow [codegen id : 10]
Input [2]: [cs_sold_date_sk#22, cs_item_sk#23]

(34) Filter [codegen id : 10]
Input [2]: [cs_sold_date_sk#22, cs_item_sk#23]
Condition : (isnotnull(cs_item_sk#23) AND isnotnull(cs_sold_date_sk#22))

(35) ReusedExchange [Reuses operator id: 21]
Output [1]: [d_date_sk#1]

(36) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#22]
Right keys [1]: [d_date_sk#1]
Join condition: None

(37) Project [codegen id : 10]
Output [1]: [cs_item_sk#23]
Input [3]: [cs_sold_date_sk#22, cs_item_sk#23, d_date_sk#1]

(38) Scan parquet default.item
Output [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(39) ColumnarToRow [codegen id : 9]
Input [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]

(40) Filter [codegen id : 9]
Input [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]
Condition : isnotnull(i_item_sk#11)

(41) BroadcastExchange
Input [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#24]

(42) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_item_sk#23]
Right keys [1]: [i_item_sk#11]
Join condition: None

(43) Project [codegen id : 10]
Output [3]: [i_brand_id#12, i_class_id#13, i_category_id#14]
Input [5]: [cs_item_sk#23, i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]

(44) Exchange
Input [3]: [i_brand_id#12, i_class_id#13, i_category_id#14]
Arguments: hashpartitioning(coalesce(i_brand_id#12, 0), isnull(i_brand_id#12), coalesce(i_class_id#13, 0), isnull(i_class_id#13), coalesce(i_category_id#14, 0), isnull(i_category_id#14), 5), true, [id=#25]

(45) Sort [codegen id : 11]
Input [3]: [i_brand_id#12, i_class_id#13, i_category_id#14]
Arguments: [coalesce(i_brand_id#12, 0) ASC NULLS FIRST, isnull(i_brand_id#12) ASC NULLS FIRST, coalesce(i_class_id#13, 0) ASC NULLS FIRST, isnull(i_class_id#13) ASC NULLS FIRST, coalesce(i_category_id#14, 0) ASC NULLS FIRST, isnull(i_category_id#14) ASC NULLS FIRST], false, 0

(46) SortMergeJoin
Left keys [6]: [coalesce(brand_id#18, 0), isnull(brand_id#18), coalesce(class_id#19, 0), isnull(class_id#19), coalesce(category_id#20, 0), isnull(category_id#20)]
Right keys [6]: [coalesce(i_brand_id#12, 0), isnull(i_brand_id#12), coalesce(i_class_id#13, 0), isnull(i_class_id#13), coalesce(i_category_id#14, 0), isnull(i_category_id#14)]
Join condition: None

(47) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#26, ws_item_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int>

(48) ColumnarToRow [codegen id : 14]
Input [2]: [ws_sold_date_sk#26, ws_item_sk#27]

(49) Filter [codegen id : 14]
Input [2]: [ws_sold_date_sk#26, ws_item_sk#27]
Condition : (isnotnull(ws_item_sk#27) AND isnotnull(ws_sold_date_sk#26))

(50) ReusedExchange [Reuses operator id: 21]
Output [1]: [d_date_sk#1]

(51) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_sold_date_sk#26]
Right keys [1]: [d_date_sk#1]
Join condition: None

(52) Project [codegen id : 14]
Output [1]: [ws_item_sk#27]
Input [3]: [ws_sold_date_sk#26, ws_item_sk#27, d_date_sk#1]

(53) ReusedExchange [Reuses operator id: 41]
Output [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]

(54) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_item_sk#27]
Right keys [1]: [i_item_sk#11]
Join condition: None

(55) Project [codegen id : 14]
Output [3]: [i_brand_id#12, i_class_id#13, i_category_id#14]
Input [5]: [ws_item_sk#27, i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]

(56) Exchange
Input [3]: [i_brand_id#12, i_class_id#13, i_category_id#14]
Arguments: hashpartitioning(coalesce(i_brand_id#12, 0), isnull(i_brand_id#12), coalesce(i_class_id#13, 0), isnull(i_class_id#13), coalesce(i_category_id#14, 0), isnull(i_category_id#14), 5), true, [id=#28]

(57) Sort [codegen id : 15]
Input [3]: [i_brand_id#12, i_class_id#13, i_category_id#14]
Arguments: [coalesce(i_brand_id#12, 0) ASC NULLS FIRST, isnull(i_brand_id#12) ASC NULLS FIRST, coalesce(i_class_id#13, 0) ASC NULLS FIRST, isnull(i_class_id#13) ASC NULLS FIRST, coalesce(i_category_id#14, 0) ASC NULLS FIRST, isnull(i_category_id#14) ASC NULLS FIRST], false, 0

(58) SortMergeJoin
Left keys [6]: [coalesce(brand_id#18, 0), isnull(brand_id#18), coalesce(class_id#19, 0), isnull(class_id#19), coalesce(category_id#20, 0), isnull(category_id#20)]
Right keys [6]: [coalesce(i_brand_id#12, 0), isnull(i_brand_id#12), coalesce(i_class_id#13, 0), isnull(i_class_id#13), coalesce(i_category_id#14, 0), isnull(i_category_id#14)]
Join condition: None

(59) HashAggregate [codegen id : 16]
Input [3]: [brand_id#18, class_id#19, category_id#20]
Keys [3]: [brand_id#18, class_id#19, category_id#20]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#18, class_id#19, category_id#20]

(60) Exchange
Input [3]: [brand_id#18, class_id#19, category_id#20]
Arguments: hashpartitioning(brand_id#18, class_id#19, category_id#20, 5), true, [id=#29]

(61) HashAggregate [codegen id : 17]
Input [3]: [brand_id#18, class_id#19, category_id#20]
Keys [3]: [brand_id#18, class_id#19, category_id#20]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#18, class_id#19, category_id#20]

(62) HashAggregate [codegen id : 17]
Input [3]: [brand_id#18, class_id#19, category_id#20]
Keys [3]: [brand_id#18, class_id#19, category_id#20]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#18, class_id#19, category_id#20]

(63) HashAggregate [codegen id : 17]
Input [3]: [brand_id#18, class_id#19, category_id#20]
Keys [3]: [brand_id#18, class_id#19, category_id#20]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#18, class_id#19, category_id#20]

(64) BroadcastExchange
Input [3]: [brand_id#18, class_id#19, category_id#20]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#30]

(65) BroadcastHashJoin [codegen id : 18]
Left keys [3]: [i_brand_id#12, i_class_id#13, i_category_id#14]
Right keys [3]: [brand_id#18, class_id#19, category_id#20]
Join condition: None

(66) Project [codegen id : 18]
Output [1]: [i_item_sk#11 AS ss_item_sk#31]
Input [7]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14, brand_id#18, class_id#19, category_id#20]

(67) Exchange
Input [1]: [ss_item_sk#31]
Arguments: hashpartitioning(ss_item_sk#31, 5), true, [id=#32]

(68) Sort [codegen id : 19]
Input [1]: [ss_item_sk#31]
Arguments: [ss_item_sk#31 ASC NULLS FIRST], false, 0

(69) SortMergeJoin
Left keys [1]: [ss_item_sk#7]
Right keys [1]: [ss_item_sk#31]
Join condition: None

(70) BroadcastHashJoin [codegen id : 38]
Left keys [1]: [d_date_sk#1]
Right keys [1]: [ss_sold_date_sk#6]
Join condition: None

(71) Project [codegen id : 38]
Output [3]: [ss_item_sk#7, ss_quantity#8, ss_list_price#9]
Input [5]: [d_date_sk#1, ss_sold_date_sk#6, ss_item_sk#7, ss_quantity#8, ss_list_price#9]

(72) Scan parquet default.item
Output [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(73) ColumnarToRow [codegen id : 20]
Input [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]

(74) Filter [codegen id : 20]
Input [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]
Condition : (((isnotnull(i_item_sk#11) AND isnotnull(i_brand_id#12)) AND isnotnull(i_class_id#13)) AND isnotnull(i_category_id#14))

(75) Exchange
Input [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]
Arguments: hashpartitioning(i_item_sk#11, 5), true, [id=#33]

(76) Sort [codegen id : 21]
Input [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]
Arguments: [i_item_sk#11 ASC NULLS FIRST], false, 0

(77) ReusedExchange [Reuses operator id: 67]
Output [1]: [ss_item_sk#31]

(78) Sort [codegen id : 37]
Input [1]: [ss_item_sk#31]
Arguments: [ss_item_sk#31 ASC NULLS FIRST], false, 0

(79) SortMergeJoin
Left keys [1]: [i_item_sk#11]
Right keys [1]: [ss_item_sk#31]
Join condition: None

(80) BroadcastExchange
Input [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#34]

(81) BroadcastHashJoin [codegen id : 38]
Left keys [1]: [ss_item_sk#7]
Right keys [1]: [i_item_sk#11]
Join condition: None

(82) Project [codegen id : 38]
Output [5]: [ss_quantity#8, ss_list_price#9, i_brand_id#12, i_class_id#13, i_category_id#14]
Input [7]: [ss_item_sk#7, ss_quantity#8, ss_list_price#9, i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]

(83) HashAggregate [codegen id : 38]
Input [5]: [ss_quantity#8, ss_list_price#9, i_brand_id#12, i_class_id#13, i_category_id#14]
Keys [3]: [i_brand_id#12, i_class_id#13, i_category_id#14]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#8 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#9 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#35, isEmpty#36, count#37]
Results [6]: [i_brand_id#12, i_class_id#13, i_category_id#14, sum#38, isEmpty#39, count#40]

(84) Exchange
Input [6]: [i_brand_id#12, i_class_id#13, i_category_id#14, sum#38, isEmpty#39, count#40]
Arguments: hashpartitioning(i_brand_id#12, i_class_id#13, i_category_id#14, 5), true, [id=#41]

(85) HashAggregate [codegen id : 78]
Input [6]: [i_brand_id#12, i_class_id#13, i_category_id#14, sum#38, isEmpty#39, count#40]
Keys [3]: [i_brand_id#12, i_class_id#13, i_category_id#14]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#8 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#9 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#8 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#9 as decimal(12,2)))), DecimalType(18,2), true))#42, count(1)#43]
Results [6]: [i_brand_id#12, i_class_id#13, i_category_id#14, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#8 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#9 as decimal(12,2)))), DecimalType(18,2), true))#42 AS sales#44, count(1)#43 AS number_sales#45, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#8 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#9 as decimal(12,2)))), DecimalType(18,2), true))#42 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#8 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#9 as decimal(12,2)))), DecimalType(18,2), true))#46]

(86) Filter [codegen id : 78]
Input [6]: [i_brand_id#12, i_class_id#13, i_category_id#14, sales#44, number_sales#45, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#8 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#9 as decimal(12,2)))), DecimalType(18,2), true))#46]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#8 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#9 as decimal(12,2)))), DecimalType(18,2), true))#46) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#8 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#9 as decimal(12,2)))), DecimalType(18,2), true))#46 as decimal(32,6)) > cast(Subquery scalar-subquery#47, [id=#48] as decimal(32,6))))

(87) Project [codegen id : 78]
Output [6]: [store AS channel#49, i_brand_id#12, i_class_id#13, i_category_id#14, sales#44, number_sales#45]
Input [6]: [i_brand_id#12, i_class_id#13, i_category_id#14, sales#44, number_sales#45, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#8 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#9 as decimal(12,2)))), DecimalType(18,2), true))#46]

(88) ReusedExchange [Reuses operator id: 9]
Output [4]: [ss_sold_date_sk#6, ss_item_sk#7, ss_quantity#8, ss_list_price#9]

(89) Sort [codegen id : 40]
Input [4]: [ss_sold_date_sk#6, ss_item_sk#7, ss_quantity#8, ss_list_price#9]
Arguments: [ss_item_sk#7 ASC NULLS FIRST], false, 0

(90) ReusedExchange [Reuses operator id: 67]
Output [1]: [ss_item_sk#31]

(91) Sort [codegen id : 56]
Input [1]: [ss_item_sk#31]
Arguments: [ss_item_sk#31 ASC NULLS FIRST], false, 0

(92) SortMergeJoin
Left keys [1]: [ss_item_sk#7]
Right keys [1]: [ss_item_sk#31]
Join condition: None

(93) Scan parquet default.date_dim
Output [2]: [d_date_sk#1, d_week_seq#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(94) ColumnarToRow [codegen id : 57]
Input [2]: [d_date_sk#1, d_week_seq#2]

(95) Filter [codegen id : 57]
Input [2]: [d_date_sk#1, d_week_seq#2]
Condition : ((isnotnull(d_week_seq#2) AND (d_week_seq#2 = Subquery scalar-subquery#50, [id=#51])) AND isnotnull(d_date_sk#1))

(96) Project [codegen id : 57]
Output [1]: [d_date_sk#1]
Input [2]: [d_date_sk#1, d_week_seq#2]

(97) BroadcastExchange
Input [1]: [d_date_sk#1]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#52]

(98) BroadcastHashJoin [codegen id : 76]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#1]
Join condition: None

(99) Project [codegen id : 76]
Output [3]: [ss_item_sk#7, ss_quantity#8, ss_list_price#9]
Input [5]: [ss_sold_date_sk#6, ss_item_sk#7, ss_quantity#8, ss_list_price#9, d_date_sk#1]

(100) ReusedExchange [Reuses operator id: 80]
Output [4]: [i_item_sk#53, i_brand_id#54, i_class_id#55, i_category_id#56]

(101) BroadcastHashJoin [codegen id : 76]
Left keys [1]: [ss_item_sk#7]
Right keys [1]: [i_item_sk#53]
Join condition: None

(102) Project [codegen id : 76]
Output [5]: [ss_quantity#8, ss_list_price#9, i_brand_id#54, i_class_id#55, i_category_id#56]
Input [7]: [ss_item_sk#7, ss_quantity#8, ss_list_price#9, i_item_sk#53, i_brand_id#54, i_class_id#55, i_category_id#56]

(103) HashAggregate [codegen id : 76]
Input [5]: [ss_quantity#8, ss_list_price#9, i_brand_id#54, i_class_id#55, i_category_id#56]
Keys [3]: [i_brand_id#54, i_class_id#55, i_category_id#56]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#8 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#9 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#57, isEmpty#58, count#59]
Results [6]: [i_brand_id#54, i_class_id#55, i_category_id#56, sum#60, isEmpty#61, count#62]

(104) Exchange
Input [6]: [i_brand_id#54, i_class_id#55, i_category_id#56, sum#60, isEmpty#61, count#62]
Arguments: hashpartitioning(i_brand_id#54, i_class_id#55, i_category_id#56, 5), true, [id=#63]

(105) HashAggregate [codegen id : 77]
Input [6]: [i_brand_id#54, i_class_id#55, i_category_id#56, sum#60, isEmpty#61, count#62]
Keys [3]: [i_brand_id#54, i_class_id#55, i_category_id#56]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#8 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#9 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#8 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#9 as decimal(12,2)))), DecimalType(18,2), true))#64, count(1)#65]
Results [6]: [i_brand_id#54, i_class_id#55, i_category_id#56, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#8 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#9 as decimal(12,2)))), DecimalType(18,2), true))#64 AS sales#66, count(1)#65 AS number_sales#67, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#8 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#9 as decimal(12,2)))), DecimalType(18,2), true))#64 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#8 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#9 as decimal(12,2)))), DecimalType(18,2), true))#68]

(106) Filter [codegen id : 77]
Input [6]: [i_brand_id#54, i_class_id#55, i_category_id#56, sales#66, number_sales#67, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#8 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#9 as decimal(12,2)))), DecimalType(18,2), true))#68]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#8 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#9 as decimal(12,2)))), DecimalType(18,2), true))#68) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#8 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#9 as decimal(12,2)))), DecimalType(18,2), true))#68 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#47, [id=#48] as decimal(32,6))))

(107) Project [codegen id : 77]
Output [6]: [store AS channel#69, i_brand_id#54, i_class_id#55, i_category_id#56, sales#66, number_sales#67]
Input [6]: [i_brand_id#54, i_class_id#55, i_category_id#56, sales#66, number_sales#67, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#8 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#9 as decimal(12,2)))), DecimalType(18,2), true))#68]

(108) BroadcastExchange
Input [6]: [channel#69, i_brand_id#54, i_class_id#55, i_category_id#56, sales#66, number_sales#67]
Arguments: HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true]),false), [id=#70]

(109) BroadcastHashJoin [codegen id : 78]
Left keys [3]: [i_brand_id#12, i_class_id#13, i_category_id#14]
Right keys [3]: [i_brand_id#54, i_class_id#55, i_category_id#56]
Join condition: None

(110) TakeOrderedAndProject
Input [12]: [channel#49, i_brand_id#12, i_class_id#13, i_category_id#14, sales#44, number_sales#45, channel#69, i_brand_id#54, i_class_id#55, i_category_id#56, sales#66, number_sales#67]
Arguments: 100, [i_brand_id#12 ASC NULLS FIRST, i_class_id#13 ASC NULLS FIRST, i_category_id#14 ASC NULLS FIRST], [channel#49, i_brand_id#12, i_class_id#13, i_category_id#14, sales#44, number_sales#45, channel#69, i_brand_id#54, i_class_id#55, i_category_id#56, sales#66, number_sales#67]

===== Subqueries =====

Subquery:1 Hosting operator id = 86 Hosting Expression = Subquery scalar-subquery#47, [id=#48]
* HashAggregate (136)
+- Exchange (135)
   +- * HashAggregate (134)
      +- Union (133)
         :- * Project (120)
         :  +- * BroadcastHashJoin Inner BuildRight (119)
         :     :- * Filter (113)
         :     :  +- * ColumnarToRow (112)
         :     :     +- Scan parquet default.store_sales (111)
         :     +- BroadcastExchange (118)
         :        +- * Project (117)
         :           +- * Filter (116)
         :              +- * ColumnarToRow (115)
         :                 +- Scan parquet default.date_dim (114)
         :- * Project (126)
         :  +- * BroadcastHashJoin Inner BuildRight (125)
         :     :- * Filter (123)
         :     :  +- * ColumnarToRow (122)
         :     :     +- Scan parquet default.catalog_sales (121)
         :     +- ReusedExchange (124)
         +- * Project (132)
            +- * BroadcastHashJoin Inner BuildRight (131)
               :- * Filter (129)
               :  +- * ColumnarToRow (128)
               :     +- Scan parquet default.web_sales (127)
               +- ReusedExchange (130)


(111) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#6, ss_quantity#8, ss_list_price#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(112) ColumnarToRow [codegen id : 2]
Input [3]: [ss_sold_date_sk#6, ss_quantity#8, ss_list_price#9]

(113) Filter [codegen id : 2]
Input [3]: [ss_sold_date_sk#6, ss_quantity#8, ss_list_price#9]
Condition : isnotnull(ss_sold_date_sk#6)

(114) Scan parquet default.date_dim
Output [2]: [d_date_sk#1, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(115) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#1, d_year#15]

(116) Filter [codegen id : 1]
Input [2]: [d_date_sk#1, d_year#15]
Condition : (((isnotnull(d_year#15) AND (d_year#15 >= 1999)) AND (d_year#15 <= 2001)) AND isnotnull(d_date_sk#1))

(117) Project [codegen id : 1]
Output [1]: [d_date_sk#1]
Input [2]: [d_date_sk#1, d_year#15]

(118) BroadcastExchange
Input [1]: [d_date_sk#1]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#71]

(119) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#1]
Join condition: None

(120) Project [codegen id : 2]
Output [2]: [ss_quantity#8 AS quantity#72, ss_list_price#9 AS list_price#73]
Input [4]: [ss_sold_date_sk#6, ss_quantity#8, ss_list_price#9, d_date_sk#1]

(121) Scan parquet default.catalog_sales
Output [3]: [cs_sold_date_sk#22, cs_quantity#74, cs_list_price#75]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(122) ColumnarToRow [codegen id : 4]
Input [3]: [cs_sold_date_sk#22, cs_quantity#74, cs_list_price#75]

(123) Filter [codegen id : 4]
Input [3]: [cs_sold_date_sk#22, cs_quantity#74, cs_list_price#75]
Condition : isnotnull(cs_sold_date_sk#22)

(124) ReusedExchange [Reuses operator id: 118]
Output [1]: [d_date_sk#1]

(125) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#22]
Right keys [1]: [d_date_sk#1]
Join condition: None

(126) Project [codegen id : 4]
Output [2]: [cs_quantity#74 AS quantity#76, cs_list_price#75 AS list_price#77]
Input [4]: [cs_sold_date_sk#22, cs_quantity#74, cs_list_price#75, d_date_sk#1]

(127) Scan parquet default.web_sales
Output [3]: [ws_sold_date_sk#26, ws_quantity#78, ws_list_price#79]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(128) ColumnarToRow [codegen id : 6]
Input [3]: [ws_sold_date_sk#26, ws_quantity#78, ws_list_price#79]

(129) Filter [codegen id : 6]
Input [3]: [ws_sold_date_sk#26, ws_quantity#78, ws_list_price#79]
Condition : isnotnull(ws_sold_date_sk#26)

(130) ReusedExchange [Reuses operator id: 118]
Output [1]: [d_date_sk#1]

(131) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#26]
Right keys [1]: [d_date_sk#1]
Join condition: None

(132) Project [codegen id : 6]
Output [2]: [ws_quantity#78 AS quantity#80, ws_list_price#79 AS list_price#81]
Input [4]: [ws_sold_date_sk#26, ws_quantity#78, ws_list_price#79, d_date_sk#1]

(133) Union

(134) HashAggregate [codegen id : 7]
Input [2]: [quantity#72, list_price#73]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#72 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#73 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#82, count#83]
Results [2]: [sum#84, count#85]

(135) Exchange
Input [2]: [sum#84, count#85]
Arguments: SinglePartition, true, [id=#86]

(136) HashAggregate [codegen id : 8]
Input [2]: [sum#84, count#85]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#72 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#73 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#72 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#73 as decimal(12,2)))), DecimalType(18,2), true))#87]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#72 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#73 as decimal(12,2)))), DecimalType(18,2), true))#87 AS average_sales#88]

Subquery:2 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#3, [id=#4]
* Project (140)
+- * Filter (139)
   +- * ColumnarToRow (138)
      +- Scan parquet default.date_dim (137)


(137) Scan parquet default.date_dim
Output [4]: [d_week_seq#2, d_year#15, d_moy#89, d_dom#90]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,2000), EqualTo(d_moy,12), EqualTo(d_dom,11)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(138) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#2, d_year#15, d_moy#89, d_dom#90]

(139) Filter [codegen id : 1]
Input [4]: [d_week_seq#2, d_year#15, d_moy#89, d_dom#90]
Condition : (((((isnotnull(d_year#15) AND isnotnull(d_moy#89)) AND isnotnull(d_dom#90)) AND (d_year#15 = 2000)) AND (d_moy#89 = 12)) AND (d_dom#90 = 11))

(140) Project [codegen id : 1]
Output [1]: [d_week_seq#2]
Input [4]: [d_week_seq#2, d_year#15, d_moy#89, d_dom#90]

Subquery:3 Hosting operator id = 106 Hosting Expression = ReusedSubquery Subquery scalar-subquery#47, [id=#48]

Subquery:4 Hosting operator id = 95 Hosting Expression = Subquery scalar-subquery#50, [id=#51]
* Project (144)
+- * Filter (143)
   +- * ColumnarToRow (142)
      +- Scan parquet default.date_dim (141)


(141) Scan parquet default.date_dim
Output [4]: [d_week_seq#2, d_year#15, d_moy#89, d_dom#90]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), EqualTo(d_dom,11)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(142) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#2, d_year#15, d_moy#89, d_dom#90]

(143) Filter [codegen id : 1]
Input [4]: [d_week_seq#2, d_year#15, d_moy#89, d_dom#90]
Condition : (((((isnotnull(d_year#15) AND isnotnull(d_moy#89)) AND isnotnull(d_dom#90)) AND (d_year#15 = 1999)) AND (d_moy#89 = 12)) AND (d_dom#90 = 11))

(144) Project [codegen id : 1]
Output [1]: [d_week_seq#2]
Input [4]: [d_week_seq#2, d_year#15, d_moy#89, d_dom#90]


