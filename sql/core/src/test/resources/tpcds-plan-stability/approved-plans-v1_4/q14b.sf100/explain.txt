== Physical Plan ==
TakeOrderedAndProject (113)
+- * BroadcastHashJoin Inner BuildRight (112)
   :- * Project (87)
   :  +- * Filter (86)
   :     +- * HashAggregate (85)
   :        +- Exchange (84)
   :           +- * HashAggregate (83)
   :              +- * Project (82)
   :                 +- * BroadcastHashJoin Inner BuildRight (81)
   :                    :- * Project (71)
   :                    :  +- * BroadcastHashJoin Inner BuildRight (70)
   :                    :     :- SortMergeJoin LeftSemi (64)
   :                    :     :  :- * Sort (5)
   :                    :     :  :  +- Exchange (4)
   :                    :     :  :     +- * Filter (3)
   :                    :     :  :        +- * ColumnarToRow (2)
   :                    :     :  :           +- Scan parquet default.store_sales (1)
   :                    :     :  +- * Sort (63)
   :                    :     :     +- Exchange (62)
   :                    :     :        +- * Project (61)
   :                    :     :           +- * BroadcastHashJoin Inner BuildRight (60)
   :                    :     :              :- * Filter (8)
   :                    :     :              :  +- * ColumnarToRow (7)
   :                    :     :              :     +- Scan parquet default.item (6)
   :                    :     :              +- BroadcastExchange (59)
   :                    :     :                 +- * HashAggregate (58)
   :                    :     :                    +- * HashAggregate (57)
   :                    :     :                       +- * HashAggregate (56)
   :                    :     :                          +- Exchange (55)
   :                    :     :                             +- * HashAggregate (54)
   :                    :     :                                +- SortMergeJoin LeftSemi (53)
   :                    :     :                                   :- SortMergeJoin LeftSemi (41)
   :                    :     :                                   :  :- * Sort (26)
   :                    :     :                                   :  :  +- Exchange (25)
   :                    :     :                                   :  :     +- * Project (24)
   :                    :     :                                   :  :        +- * BroadcastHashJoin Inner BuildRight (23)
   :                    :     :                                   :  :           :- * Project (18)
   :                    :     :                                   :  :           :  +- * BroadcastHashJoin Inner BuildRight (17)
   :                    :     :                                   :  :           :     :- * Filter (11)
   :                    :     :                                   :  :           :     :  +- * ColumnarToRow (10)
   :                    :     :                                   :  :           :     :     +- Scan parquet default.store_sales (9)
   :                    :     :                                   :  :           :     +- BroadcastExchange (16)
   :                    :     :                                   :  :           :        +- * Project (15)
   :                    :     :                                   :  :           :           +- * Filter (14)
   :                    :     :                                   :  :           :              +- * ColumnarToRow (13)
   :                    :     :                                   :  :           :                 +- Scan parquet default.date_dim (12)
   :                    :     :                                   :  :           +- BroadcastExchange (22)
   :                    :     :                                   :  :              +- * Filter (21)
   :                    :     :                                   :  :                 +- * ColumnarToRow (20)
   :                    :     :                                   :  :                    +- Scan parquet default.item (19)
   :                    :     :                                   :  +- * Sort (40)
   :                    :     :                                   :     +- Exchange (39)
   :                    :     :                                   :        +- * Project (38)
   :                    :     :                                   :           +- * BroadcastHashJoin Inner BuildRight (37)
   :                    :     :                                   :              :- * Project (32)
   :                    :     :                                   :              :  +- * BroadcastHashJoin Inner BuildRight (31)
   :                    :     :                                   :              :     :- * Filter (29)
   :                    :     :                                   :              :     :  +- * ColumnarToRow (28)
   :                    :     :                                   :              :     :     +- Scan parquet default.catalog_sales (27)
   :                    :     :                                   :              :     +- ReusedExchange (30)
   :                    :     :                                   :              +- BroadcastExchange (36)
   :                    :     :                                   :                 +- * Filter (35)
   :                    :     :                                   :                    +- * ColumnarToRow (34)
   :                    :     :                                   :                       +- Scan parquet default.item (33)
   :                    :     :                                   +- * Sort (52)
   :                    :     :                                      +- Exchange (51)
   :                    :     :                                         +- * Project (50)
   :                    :     :                                            +- * BroadcastHashJoin Inner BuildRight (49)
   :                    :     :                                               :- * Project (47)
   :                    :     :                                               :  +- * BroadcastHashJoin Inner BuildRight (46)
   :                    :     :                                               :     :- * Filter (44)
   :                    :     :                                               :     :  +- * ColumnarToRow (43)
   :                    :     :                                               :     :     +- Scan parquet default.web_sales (42)
   :                    :     :                                               :     +- ReusedExchange (45)
   :                    :     :                                               +- ReusedExchange (48)
   :                    :     +- BroadcastExchange (69)
   :                    :        +- * Project (68)
   :                    :           +- * Filter (67)
   :                    :              +- * ColumnarToRow (66)
   :                    :                 +- Scan parquet default.date_dim (65)
   :                    +- BroadcastExchange (80)
   :                       +- SortMergeJoin LeftSemi (79)
   :                          :- * Sort (76)
   :                          :  +- Exchange (75)
   :                          :     +- * Filter (74)
   :                          :        +- * ColumnarToRow (73)
   :                          :           +- Scan parquet default.item (72)
   :                          +- * Sort (78)
   :                             +- ReusedExchange (77)
   +- BroadcastExchange (111)
      +- * Project (110)
         +- * Filter (109)
            +- * HashAggregate (108)
               +- Exchange (107)
                  +- * HashAggregate (106)
                     +- * Project (105)
                        +- * BroadcastHashJoin Inner BuildRight (104)
                           :- * Project (102)
                           :  +- * BroadcastHashJoin Inner BuildRight (101)
                           :     :- SortMergeJoin LeftSemi (95)
                           :     :  :- * Sort (92)
                           :     :  :  +- Exchange (91)
                           :     :  :     +- * Filter (90)
                           :     :  :        +- * ColumnarToRow (89)
                           :     :  :           +- Scan parquet default.store_sales (88)
                           :     :  +- * Sort (94)
                           :     :     +- ReusedExchange (93)
                           :     +- BroadcastExchange (100)
                           :        +- * Project (99)
                           :           +- * Filter (98)
                           :              +- * ColumnarToRow (97)
                           :                 +- Scan parquet default.date_dim (96)
                           +- ReusedExchange (103)


(1) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Condition : (((isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1)) AND dynamicpruningexpression(ss_sold_date_sk#1 IN dynamicpruning#5)) AND dynamicpruningexpression(true))

(4) Exchange
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Arguments: hashpartitioning(ss_item_sk#2, 5), true, [id=#6]

(5) Sort [codegen id : 2]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Arguments: [ss_item_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(7) ColumnarToRow [codegen id : 17]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(8) Filter [codegen id : 17]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : ((isnotnull(i_brand_id#8) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(9) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(10) ColumnarToRow [codegen id : 5]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]

(11) Filter [codegen id : 5]
Input [2]: [ss_sold_date_sk#1, ss_item_sk#2]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(12) Scan parquet default.date_dim
Output [2]: [d_date_sk#11, d_year#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(13) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#11, d_year#12]

(14) Filter [codegen id : 3]
Input [2]: [d_date_sk#11, d_year#12]
Condition : (((isnotnull(d_year#12) AND (d_year#12 >= 1999)) AND (d_year#12 <= 2001)) AND isnotnull(d_date_sk#11))

(15) Project [codegen id : 3]
Output [1]: [d_date_sk#11]
Input [2]: [d_date_sk#11, d_year#12]

(16) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13]

(17) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#11]
Join condition: None

(18) Project [codegen id : 5]
Output [1]: [ss_item_sk#2]
Input [3]: [ss_sold_date_sk#1, ss_item_sk#2, d_date_sk#11]

(19) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(20) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(21) Filter [codegen id : 4]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : (((isnotnull(i_item_sk#7) AND isnotnull(i_brand_id#8)) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(22) BroadcastExchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14]

(23) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#7]
Join condition: None

(24) Project [codegen id : 5]
Output [3]: [i_brand_id#8 AS brand_id#15, i_class_id#9 AS class_id#16, i_category_id#10 AS category_id#17]
Input [5]: [ss_item_sk#2, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(25) Exchange
Input [3]: [brand_id#15, class_id#16, category_id#17]
Arguments: hashpartitioning(coalesce(brand_id#15, 0), isnull(brand_id#15), coalesce(class_id#16, 0), isnull(class_id#16), coalesce(category_id#17, 0), isnull(category_id#17), 5), true, [id=#18]

(26) Sort [codegen id : 6]
Input [3]: [brand_id#15, class_id#16, category_id#17]
Arguments: [coalesce(brand_id#15, 0) ASC NULLS FIRST, isnull(brand_id#15) ASC NULLS FIRST, coalesce(class_id#16, 0) ASC NULLS FIRST, isnull(class_id#16) ASC NULLS FIRST, coalesce(category_id#17, 0) ASC NULLS FIRST, isnull(category_id#17) ASC NULLS FIRST], false, 0

(27) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#19, cs_item_sk#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int>

(28) ColumnarToRow [codegen id : 9]
Input [2]: [cs_sold_date_sk#19, cs_item_sk#20]

(29) Filter [codegen id : 9]
Input [2]: [cs_sold_date_sk#19, cs_item_sk#20]
Condition : (isnotnull(cs_item_sk#20) AND isnotnull(cs_sold_date_sk#19))

(30) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#11]

(31) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_sold_date_sk#19]
Right keys [1]: [d_date_sk#11]
Join condition: None

(32) Project [codegen id : 9]
Output [1]: [cs_item_sk#20]
Input [3]: [cs_sold_date_sk#19, cs_item_sk#20, d_date_sk#11]

(33) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(34) ColumnarToRow [codegen id : 8]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(35) Filter [codegen id : 8]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : isnotnull(i_item_sk#7)

(36) BroadcastExchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#21]

(37) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#20]
Right keys [1]: [i_item_sk#7]
Join condition: None

(38) Project [codegen id : 9]
Output [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Input [5]: [cs_item_sk#20, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(39) Exchange
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10), 5), true, [id=#22]

(40) Sort [codegen id : 10]
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [coalesce(i_brand_id#8, 0) ASC NULLS FIRST, isnull(i_brand_id#8) ASC NULLS FIRST, coalesce(i_class_id#9, 0) ASC NULLS FIRST, isnull(i_class_id#9) ASC NULLS FIRST, coalesce(i_category_id#10, 0) ASC NULLS FIRST, isnull(i_category_id#10) ASC NULLS FIRST], false, 0

(41) SortMergeJoin
Left keys [6]: [coalesce(brand_id#15, 0), isnull(brand_id#15), coalesce(class_id#16, 0), isnull(class_id#16), coalesce(category_id#17, 0), isnull(category_id#17)]
Right keys [6]: [coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10)]
Join condition: None

(42) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#23, ws_item_sk#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int>

(43) ColumnarToRow [codegen id : 13]
Input [2]: [ws_sold_date_sk#23, ws_item_sk#24]

(44) Filter [codegen id : 13]
Input [2]: [ws_sold_date_sk#23, ws_item_sk#24]
Condition : (isnotnull(ws_item_sk#24) AND isnotnull(ws_sold_date_sk#23))

(45) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#11]

(46) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ws_sold_date_sk#23]
Right keys [1]: [d_date_sk#11]
Join condition: None

(47) Project [codegen id : 13]
Output [1]: [ws_item_sk#24]
Input [3]: [ws_sold_date_sk#23, ws_item_sk#24, d_date_sk#11]

(48) ReusedExchange [Reuses operator id: 36]
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(49) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ws_item_sk#24]
Right keys [1]: [i_item_sk#7]
Join condition: None

(50) Project [codegen id : 13]
Output [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Input [5]: [ws_item_sk#24, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(51) Exchange
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10), 5), true, [id=#25]

(52) Sort [codegen id : 14]
Input [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [coalesce(i_brand_id#8, 0) ASC NULLS FIRST, isnull(i_brand_id#8) ASC NULLS FIRST, coalesce(i_class_id#9, 0) ASC NULLS FIRST, isnull(i_class_id#9) ASC NULLS FIRST, coalesce(i_category_id#10, 0) ASC NULLS FIRST, isnull(i_category_id#10) ASC NULLS FIRST], false, 0

(53) SortMergeJoin
Left keys [6]: [coalesce(brand_id#15, 0), isnull(brand_id#15), coalesce(class_id#16, 0), isnull(class_id#16), coalesce(category_id#17, 0), isnull(category_id#17)]
Right keys [6]: [coalesce(i_brand_id#8, 0), isnull(i_brand_id#8), coalesce(i_class_id#9, 0), isnull(i_class_id#9), coalesce(i_category_id#10, 0), isnull(i_category_id#10)]
Join condition: None

(54) HashAggregate [codegen id : 15]
Input [3]: [brand_id#15, class_id#16, category_id#17]
Keys [3]: [brand_id#15, class_id#16, category_id#17]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#15, class_id#16, category_id#17]

(55) Exchange
Input [3]: [brand_id#15, class_id#16, category_id#17]
Arguments: hashpartitioning(brand_id#15, class_id#16, category_id#17, 5), true, [id=#26]

(56) HashAggregate [codegen id : 16]
Input [3]: [brand_id#15, class_id#16, category_id#17]
Keys [3]: [brand_id#15, class_id#16, category_id#17]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#15, class_id#16, category_id#17]

(57) HashAggregate [codegen id : 16]
Input [3]: [brand_id#15, class_id#16, category_id#17]
Keys [3]: [brand_id#15, class_id#16, category_id#17]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#15, class_id#16, category_id#17]

(58) HashAggregate [codegen id : 16]
Input [3]: [brand_id#15, class_id#16, category_id#17]
Keys [3]: [brand_id#15, class_id#16, category_id#17]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#15, class_id#16, category_id#17]

(59) BroadcastExchange
Input [3]: [brand_id#15, class_id#16, category_id#17]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#27]

(60) BroadcastHashJoin [codegen id : 17]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [brand_id#15, class_id#16, category_id#17]
Join condition: None

(61) Project [codegen id : 17]
Output [1]: [i_item_sk#7 AS ss_item_sk#28]
Input [7]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, brand_id#15, class_id#16, category_id#17]

(62) Exchange
Input [1]: [ss_item_sk#28]
Arguments: hashpartitioning(ss_item_sk#28, 5), true, [id=#29]

(63) Sort [codegen id : 18]
Input [1]: [ss_item_sk#28]
Arguments: [ss_item_sk#28 ASC NULLS FIRST], false, 0

(64) SortMergeJoin
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [ss_item_sk#28]
Join condition: None

(65) Scan parquet default.date_dim
Output [2]: [d_date_sk#11, d_week_seq#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(66) ColumnarToRow [codegen id : 19]
Input [2]: [d_date_sk#11, d_week_seq#30]

(67) Filter [codegen id : 19]
Input [2]: [d_date_sk#11, d_week_seq#30]
Condition : ((isnotnull(d_week_seq#30) AND (d_week_seq#30 = Subquery scalar-subquery#31, [id=#32])) AND isnotnull(d_date_sk#11))

(68) Project [codegen id : 19]
Output [1]: [d_date_sk#11]
Input [2]: [d_date_sk#11, d_week_seq#30]

(69) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#33]

(70) BroadcastHashJoin [codegen id : 38]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#11]
Join condition: None

(71) Project [codegen id : 38]
Output [3]: [ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4, d_date_sk#11]

(72) Scan parquet default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(73) ColumnarToRow [codegen id : 20]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(74) Filter [codegen id : 20]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Condition : (((isnotnull(i_item_sk#7) AND isnotnull(i_brand_id#8)) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10))

(75) Exchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: hashpartitioning(i_item_sk#7, 5), true, [id=#34]

(76) Sort [codegen id : 21]
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: [i_item_sk#7 ASC NULLS FIRST], false, 0

(77) ReusedExchange [Reuses operator id: 62]
Output [1]: [ss_item_sk#28]

(78) Sort [codegen id : 37]
Input [1]: [ss_item_sk#28]
Arguments: [ss_item_sk#28 ASC NULLS FIRST], false, 0

(79) SortMergeJoin
Left keys [1]: [i_item_sk#7]
Right keys [1]: [ss_item_sk#28]
Join condition: None

(80) BroadcastExchange
Input [4]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#35]

(81) BroadcastHashJoin [codegen id : 38]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#7]
Join condition: None

(82) Project [codegen id : 38]
Output [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#8, i_class_id#9, i_category_id#10]
Input [7]: [ss_item_sk#2, ss_quantity#3, ss_list_price#4, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10]

(83) HashAggregate [codegen id : 38]
Input [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#8, i_class_id#9, i_category_id#10]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#36, isEmpty#37, count#38]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#39, isEmpty#40, count#41]

(84) Exchange
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#39, isEmpty#40, count#41]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, 5), true, [id=#42]

(85) HashAggregate [codegen id : 78]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum#39, isEmpty#40, count#41]
Keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#43, count(1)#44]
Results [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#43 AS sales#45, count(1)#44 AS number_sales#46, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#43 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#47]

(86) Filter [codegen id : 78]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#45, number_sales#46, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#47]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#47) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#47 as decimal(32,6)) > cast(Subquery scalar-subquery#48, [id=#49] as decimal(32,6))))

(87) Project [codegen id : 78]
Output [6]: [store AS channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sales#45, number_sales#46]
Input [6]: [i_brand_id#8, i_class_id#9, i_category_id#10, sales#45, number_sales#46, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#47]

(88) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(89) ColumnarToRow [codegen id : 39]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]

(90) Filter [codegen id : 39]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Condition : (((isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1)) AND dynamicpruningexpression(ss_sold_date_sk#1 IN dynamicpruning#51)) AND dynamicpruningexpression(true))

(91) Exchange
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Arguments: hashpartitioning(ss_item_sk#2, 5), true, [id=#52]

(92) Sort [codegen id : 40]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Arguments: [ss_item_sk#2 ASC NULLS FIRST], false, 0

(93) ReusedExchange [Reuses operator id: 62]
Output [1]: [ss_item_sk#28]

(94) Sort [codegen id : 56]
Input [1]: [ss_item_sk#28]
Arguments: [ss_item_sk#28 ASC NULLS FIRST], false, 0

(95) SortMergeJoin
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [ss_item_sk#28]
Join condition: None

(96) Scan parquet default.date_dim
Output [2]: [d_date_sk#11, d_week_seq#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(97) ColumnarToRow [codegen id : 57]
Input [2]: [d_date_sk#11, d_week_seq#30]

(98) Filter [codegen id : 57]
Input [2]: [d_date_sk#11, d_week_seq#30]
Condition : ((isnotnull(d_week_seq#30) AND (d_week_seq#30 = Subquery scalar-subquery#53, [id=#54])) AND isnotnull(d_date_sk#11))

(99) Project [codegen id : 57]
Output [1]: [d_date_sk#11]
Input [2]: [d_date_sk#11, d_week_seq#30]

(100) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#55]

(101) BroadcastHashJoin [codegen id : 76]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#11]
Join condition: None

(102) Project [codegen id : 76]
Output [3]: [ss_item_sk#2, ss_quantity#3, ss_list_price#4]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_quantity#3, ss_list_price#4, d_date_sk#11]

(103) ReusedExchange [Reuses operator id: 80]
Output [4]: [i_item_sk#56, i_brand_id#57, i_class_id#58, i_category_id#59]

(104) BroadcastHashJoin [codegen id : 76]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#56]
Join condition: None

(105) Project [codegen id : 76]
Output [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#57, i_class_id#58, i_category_id#59]
Input [7]: [ss_item_sk#2, ss_quantity#3, ss_list_price#4, i_item_sk#56, i_brand_id#57, i_class_id#58, i_category_id#59]

(106) HashAggregate [codegen id : 76]
Input [5]: [ss_quantity#3, ss_list_price#4, i_brand_id#57, i_class_id#58, i_category_id#59]
Keys [3]: [i_brand_id#57, i_class_id#58, i_category_id#59]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#60, isEmpty#61, count#62]
Results [6]: [i_brand_id#57, i_class_id#58, i_category_id#59, sum#63, isEmpty#64, count#65]

(107) Exchange
Input [6]: [i_brand_id#57, i_class_id#58, i_category_id#59, sum#63, isEmpty#64, count#65]
Arguments: hashpartitioning(i_brand_id#57, i_class_id#58, i_category_id#59, 5), true, [id=#66]

(108) HashAggregate [codegen id : 77]
Input [6]: [i_brand_id#57, i_class_id#58, i_category_id#59, sum#63, isEmpty#64, count#65]
Keys [3]: [i_brand_id#57, i_class_id#58, i_category_id#59]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#67, count(1)#68]
Results [6]: [i_brand_id#57, i_class_id#58, i_category_id#59, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#67 AS sales#69, count(1)#68 AS number_sales#70, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#67 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#71]

(109) Filter [codegen id : 77]
Input [6]: [i_brand_id#57, i_class_id#58, i_category_id#59, sales#69, number_sales#70, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#71]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#71) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#71 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#48, [id=#49] as decimal(32,6))))

(110) Project [codegen id : 77]
Output [6]: [store AS channel#72, i_brand_id#57, i_class_id#58, i_category_id#59, sales#69, number_sales#70]
Input [6]: [i_brand_id#57, i_class_id#58, i_category_id#59, sales#69, number_sales#70, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#71]

(111) BroadcastExchange
Input [6]: [channel#72, i_brand_id#57, i_class_id#58, i_category_id#59, sales#69, number_sales#70]
Arguments: HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true]),false), [id=#73]

(112) BroadcastHashJoin [codegen id : 78]
Left keys [3]: [i_brand_id#8, i_class_id#9, i_category_id#10]
Right keys [3]: [i_brand_id#57, i_class_id#58, i_category_id#59]
Join condition: None

(113) TakeOrderedAndProject
Input [12]: [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sales#45, number_sales#46, channel#72, i_brand_id#57, i_class_id#58, i_category_id#59, sales#69, number_sales#70]
Arguments: 100, [i_brand_id#8 ASC NULLS FIRST, i_class_id#9 ASC NULLS FIRST, i_category_id#10 ASC NULLS FIRST], [channel#50, i_brand_id#8, i_class_id#9, i_category_id#10, sales#45, number_sales#46, channel#72, i_brand_id#57, i_class_id#58, i_category_id#59, sales#69, number_sales#70]

===== Subqueries =====

Subquery:1 Hosting operator id = 86 Hosting Expression = Subquery scalar-subquery#48, [id=#49]
* HashAggregate (139)
+- Exchange (138)
   +- * HashAggregate (137)
      +- Union (136)
         :- * Project (123)
         :  +- * BroadcastHashJoin Inner BuildRight (122)
         :     :- * Filter (116)
         :     :  +- * ColumnarToRow (115)
         :     :     +- Scan parquet default.store_sales (114)
         :     +- BroadcastExchange (121)
         :        +- * Project (120)
         :           +- * Filter (119)
         :              +- * ColumnarToRow (118)
         :                 +- Scan parquet default.date_dim (117)
         :- * Project (129)
         :  +- * BroadcastHashJoin Inner BuildRight (128)
         :     :- * Filter (126)
         :     :  +- * ColumnarToRow (125)
         :     :     +- Scan parquet default.catalog_sales (124)
         :     +- ReusedExchange (127)
         +- * Project (135)
            +- * BroadcastHashJoin Inner BuildRight (134)
               :- * Filter (132)
               :  +- * ColumnarToRow (131)
               :     +- Scan parquet default.web_sales (130)
               +- ReusedExchange (133)


(114) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(115) ColumnarToRow [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]

(116) Filter [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4]
Condition : isnotnull(ss_sold_date_sk#1)

(117) Scan parquet default.date_dim
Output [2]: [d_date_sk#11, d_year#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(118) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#11, d_year#12]

(119) Filter [codegen id : 1]
Input [2]: [d_date_sk#11, d_year#12]
Condition : (((isnotnull(d_year#12) AND (d_year#12 >= 1999)) AND (d_year#12 <= 2001)) AND isnotnull(d_date_sk#11))

(120) Project [codegen id : 1]
Output [1]: [d_date_sk#11]
Input [2]: [d_date_sk#11, d_year#12]

(121) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#74]

(122) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#11]
Join condition: None

(123) Project [codegen id : 2]
Output [2]: [ss_quantity#3 AS quantity#75, ss_list_price#4 AS list_price#76]
Input [4]: [ss_sold_date_sk#1, ss_quantity#3, ss_list_price#4, d_date_sk#11]

(124) Scan parquet default.catalog_sales
Output [3]: [cs_sold_date_sk#19, cs_quantity#77, cs_list_price#78]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(125) ColumnarToRow [codegen id : 4]
Input [3]: [cs_sold_date_sk#19, cs_quantity#77, cs_list_price#78]

(126) Filter [codegen id : 4]
Input [3]: [cs_sold_date_sk#19, cs_quantity#77, cs_list_price#78]
Condition : isnotnull(cs_sold_date_sk#19)

(127) ReusedExchange [Reuses operator id: 121]
Output [1]: [d_date_sk#11]

(128) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#19]
Right keys [1]: [d_date_sk#11]
Join condition: None

(129) Project [codegen id : 4]
Output [2]: [cs_quantity#77 AS quantity#79, cs_list_price#78 AS list_price#80]
Input [4]: [cs_sold_date_sk#19, cs_quantity#77, cs_list_price#78, d_date_sk#11]

(130) Scan parquet default.web_sales
Output [3]: [ws_sold_date_sk#23, ws_quantity#81, ws_list_price#82]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(131) ColumnarToRow [codegen id : 6]
Input [3]: [ws_sold_date_sk#23, ws_quantity#81, ws_list_price#82]

(132) Filter [codegen id : 6]
Input [3]: [ws_sold_date_sk#23, ws_quantity#81, ws_list_price#82]
Condition : isnotnull(ws_sold_date_sk#23)

(133) ReusedExchange [Reuses operator id: 121]
Output [1]: [d_date_sk#11]

(134) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#23]
Right keys [1]: [d_date_sk#11]
Join condition: None

(135) Project [codegen id : 6]
Output [2]: [ws_quantity#81 AS quantity#83, ws_list_price#82 AS list_price#84]
Input [4]: [ws_sold_date_sk#23, ws_quantity#81, ws_list_price#82, d_date_sk#11]

(136) Union

(137) HashAggregate [codegen id : 7]
Input [2]: [quantity#75, list_price#76]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#75 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#76 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#85, count#86]
Results [2]: [sum#87, count#88]

(138) Exchange
Input [2]: [sum#87, count#88]
Arguments: SinglePartition, true, [id=#89]

(139) HashAggregate [codegen id : 8]
Input [2]: [sum#87, count#88]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#75 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#76 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#75 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#76 as decimal(12,2)))), DecimalType(18,2), true))#90]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#75 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#76 as decimal(12,2)))), DecimalType(18,2), true))#90 AS average_sales#91]

Subquery:2 Hosting operator id = 3 Hosting Expression = ss_sold_date_sk#1 IN dynamicpruning#5
ReusedExchange (140)


(140) ReusedExchange [Reuses operator id: 69]
Output [1]: [d_date_sk#11]

Subquery:3 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#1 IN dynamicpruning#5

Subquery:4 Hosting operator id = 67 Hosting Expression = Subquery scalar-subquery#31, [id=#32]
* Project (144)
+- * Filter (143)
   +- * ColumnarToRow (142)
      +- Scan parquet default.date_dim (141)


(141) Scan parquet default.date_dim
Output [4]: [d_week_seq#30, d_year#12, d_moy#92, d_dom#93]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,2000), EqualTo(d_moy,12), EqualTo(d_dom,11)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(142) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#30, d_year#12, d_moy#92, d_dom#93]

(143) Filter [codegen id : 1]
Input [4]: [d_week_seq#30, d_year#12, d_moy#92, d_dom#93]
Condition : (((((isnotnull(d_year#12) AND isnotnull(d_moy#92)) AND isnotnull(d_dom#93)) AND (d_year#12 = 2000)) AND (d_moy#92 = 12)) AND (d_dom#93 = 11))

(144) Project [codegen id : 1]
Output [1]: [d_week_seq#30]
Input [4]: [d_week_seq#30, d_year#12, d_moy#92, d_dom#93]

Subquery:5 Hosting operator id = 109 Hosting Expression = ReusedSubquery Subquery scalar-subquery#48, [id=#49]

Subquery:6 Hosting operator id = 90 Hosting Expression = ss_sold_date_sk#1 IN dynamicpruning#51
ReusedExchange (145)


(145) ReusedExchange [Reuses operator id: 100]
Output [1]: [d_date_sk#11]

Subquery:7 Hosting operator id = 88 Hosting Expression = ss_sold_date_sk#1 IN dynamicpruning#51

Subquery:8 Hosting operator id = 98 Hosting Expression = Subquery scalar-subquery#53, [id=#54]
* Project (149)
+- * Filter (148)
   +- * ColumnarToRow (147)
      +- Scan parquet default.date_dim (146)


(146) Scan parquet default.date_dim
Output [4]: [d_week_seq#30, d_year#12, d_moy#92, d_dom#93]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), EqualTo(d_dom,11)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(147) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#30, d_year#12, d_moy#92, d_dom#93]

(148) Filter [codegen id : 1]
Input [4]: [d_week_seq#30, d_year#12, d_moy#92, d_dom#93]
Condition : (((((isnotnull(d_year#12) AND isnotnull(d_moy#92)) AND isnotnull(d_dom#93)) AND (d_year#12 = 1999)) AND (d_moy#92 = 12)) AND (d_dom#93 = 11))

(149) Project [codegen id : 1]
Output [1]: [d_week_seq#30]
Input [4]: [d_week_seq#30, d_year#12, d_moy#92, d_dom#93]


