== Physical Plan ==
TakeOrderedAndProject (95)
+- * BroadcastHashJoin Inner BuildRight (94)
   :- * Filter (77)
   :  +- * HashAggregate (76)
   :     +- Exchange (75)
   :        +- * HashAggregate (74)
   :           +- * Project (73)
   :              +- * BroadcastHashJoin Inner BuildRight (72)
   :                 :- * Project (65)
   :                 :  +- * BroadcastHashJoin Inner BuildRight (64)
   :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (62)
   :                 :     :  :- * Filter (3)
   :                 :     :  :  +- * ColumnarToRow (2)
   :                 :     :  :     +- Scan parquet default.store_sales (1)
   :                 :     :  +- BroadcastExchange (61)
   :                 :     :     +- * HashAggregate (60)
   :                 :     :        +- Exchange (59)
   :                 :     :           +- * HashAggregate (58)
   :                 :     :              +- * Project (57)
   :                 :     :                 +- * BroadcastHashJoin Inner BuildRight (56)
   :                 :     :                    :- * Filter (6)
   :                 :     :                    :  +- * ColumnarToRow (5)
   :                 :     :                    :     +- Scan parquet default.item (4)
   :                 :     :                    +- BroadcastExchange (55)
   :                 :     :                       +- * HashAggregate (54)
   :                 :     :                          +- * HashAggregate (53)
   :                 :     :                             +- * BroadcastHashJoin LeftSemi BuildRight (52)
   :                 :     :                                :- * HashAggregate (38)
   :                 :     :                                :  +- Exchange (37)
   :                 :     :                                :     +- * HashAggregate (36)
   :                 :     :                                :        +- * Project (35)
   :                 :     :                                :           +- * BroadcastHashJoin Inner BuildRight (34)
   :                 :     :                                :              :- * Project (12)
   :                 :     :                                :              :  +- * BroadcastHashJoin Inner BuildRight (11)
   :                 :     :                                :              :     :- * Filter (9)
   :                 :     :                                :              :     :  +- * ColumnarToRow (8)
   :                 :     :                                :              :     :     +- Scan parquet default.store_sales (7)
   :                 :     :                                :              :     +- ReusedExchange (10)
   :                 :     :                                :              +- BroadcastExchange (33)
   :                 :     :                                :                 +- * BroadcastHashJoin LeftSemi BuildRight (32)
   :                 :     :                                :                    :- * Filter (15)
   :                 :     :                                :                    :  +- * ColumnarToRow (14)
   :                 :     :                                :                    :     +- Scan parquet default.item (13)
   :                 :     :                                :                    +- BroadcastExchange (31)
   :                 :     :                                :                       +- * HashAggregate (30)
   :                 :     :                                :                          +- Exchange (29)
   :                 :     :                                :                             +- * HashAggregate (28)
   :                 :     :                                :                                +- * Project (27)
   :                 :     :                                :                                   +- * BroadcastHashJoin Inner BuildRight (26)
   :                 :     :                                :                                      :- * Project (21)
   :                 :     :                                :                                      :  +- * BroadcastHashJoin Inner BuildRight (20)
   :                 :     :                                :                                      :     :- * Filter (18)
   :                 :     :                                :                                      :     :  +- * ColumnarToRow (17)
   :                 :     :                                :                                      :     :     +- Scan parquet default.catalog_sales (16)
   :                 :     :                                :                                      :     +- ReusedExchange (19)
   :                 :     :                                :                                      +- BroadcastExchange (25)
   :                 :     :                                :                                         +- * Filter (24)
   :                 :     :                                :                                            +- * ColumnarToRow (23)
   :                 :     :                                :                                               +- Scan parquet default.item (22)
   :                 :     :                                +- BroadcastExchange (51)
   :                 :     :                                   +- * HashAggregate (50)
   :                 :     :                                      +- Exchange (49)
   :                 :     :                                         +- * HashAggregate (48)
   :                 :     :                                            +- * Project (47)
   :                 :     :                                               +- * BroadcastHashJoin Inner BuildRight (46)
   :                 :     :                                                  :- * Project (44)
   :                 :     :                                                  :  +- * BroadcastHashJoin Inner BuildRight (43)
   :                 :     :                                                  :     :- * Filter (41)
   :                 :     :                                                  :     :  +- * ColumnarToRow (40)
   :                 :     :                                                  :     :     +- Scan parquet default.web_sales (39)
   :                 :     :                                                  :     +- ReusedExchange (42)
   :                 :     :                                                  +- ReusedExchange (45)
   :                 :     +- ReusedExchange (63)
   :                 +- BroadcastExchange (71)
   :                    +- * BroadcastHashJoin LeftSemi BuildRight (70)
   :                       :- * Filter (68)
   :                       :  +- * ColumnarToRow (67)
   :                       :     +- Scan parquet default.item (66)
   :                       +- ReusedExchange (69)
   +- BroadcastExchange (93)
      +- * Filter (92)
         +- * HashAggregate (91)
            +- Exchange (90)
               +- * HashAggregate (89)
                  +- * Project (88)
                     +- * BroadcastHashJoin Inner BuildRight (87)
                        :- * Project (85)
                        :  +- * BroadcastHashJoin Inner BuildRight (84)
                        :     :- * BroadcastHashJoin LeftSemi BuildRight (82)
                        :     :  :- * Filter (80)
                        :     :  :  +- * ColumnarToRow (79)
                        :     :  :     +- Scan parquet default.store_sales (78)
                        :     :  +- ReusedExchange (81)
                        :     +- ReusedExchange (83)
                        +- ReusedExchange (86)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 31]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 31]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 13]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(6) Filter [codegen id : 13]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(7) Scan parquet default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 7]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]

(9) Filter [codegen id : 7]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(10) ReusedExchange [Reuses operator id: 128]
Output [1]: [d_date_sk#13]

(11) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#13]
Join condition: None

(12) Project [codegen id : 7]
Output [1]: [ss_item_sk#10]
Input [3]: [ss_item_sk#10, ss_sold_date_sk#11, d_date_sk#13]

(13) Scan parquet default.item
Output [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(14) ColumnarToRow [codegen id : 6]
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]

(15) Filter [codegen id : 6]
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Condition : (((isnotnull(i_item_sk#14) AND isnotnull(i_brand_id#15)) AND isnotnull(i_class_id#16)) AND isnotnull(i_category_id#17))

(16) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#18, cs_sold_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#19), dynamicpruningexpression(cs_sold_date_sk#19 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(17) ColumnarToRow [codegen id : 4]
Input [2]: [cs_item_sk#18, cs_sold_date_sk#19]

(18) Filter [codegen id : 4]
Input [2]: [cs_item_sk#18, cs_sold_date_sk#19]
Condition : isnotnull(cs_item_sk#18)

(19) ReusedExchange [Reuses operator id: 128]
Output [1]: [d_date_sk#20]

(20) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#19]
Right keys [1]: [d_date_sk#20]
Join condition: None

(21) Project [codegen id : 4]
Output [1]: [cs_item_sk#18]
Input [3]: [cs_item_sk#18, cs_sold_date_sk#19, d_date_sk#20]

(22) Scan parquet default.item
Output [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(23) ColumnarToRow [codegen id : 3]
Input [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]

(24) Filter [codegen id : 3]
Input [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]
Condition : isnotnull(i_item_sk#21)

(25) BroadcastExchange
Input [4]: [i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#25]

(26) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_item_sk#18]
Right keys [1]: [i_item_sk#21]
Join condition: None

(27) Project [codegen id : 4]
Output [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Input [5]: [cs_item_sk#18, i_item_sk#21, i_brand_id#22, i_class_id#23, i_category_id#24]

(28) HashAggregate [codegen id : 4]
Input [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Keys [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]

(29) Exchange
Input [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Arguments: hashpartitioning(i_brand_id#22, i_class_id#23, i_category_id#24, 5), ENSURE_REQUIREMENTS, [id=#26]

(30) HashAggregate [codegen id : 5]
Input [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Keys [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]

(31) BroadcastExchange
Input [3]: [i_brand_id#22, i_class_id#23, i_category_id#24]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#27]

(32) BroadcastHashJoin [codegen id : 6]
Left keys [6]: [coalesce(i_brand_id#15, 0), isnull(i_brand_id#15), coalesce(i_class_id#16, 0), isnull(i_class_id#16), coalesce(i_category_id#17, 0), isnull(i_category_id#17)]
Right keys [6]: [coalesce(i_brand_id#22, 0), isnull(i_brand_id#22), coalesce(i_class_id#23, 0), isnull(i_class_id#23), coalesce(i_category_id#24, 0), isnull(i_category_id#24)]
Join condition: None

(33) BroadcastExchange
Input [4]: [i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28]

(34) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_item_sk#10]
Right keys [1]: [i_item_sk#14]
Join condition: None

(35) Project [codegen id : 7]
Output [3]: [i_brand_id#15 AS brand_id#29, i_class_id#16 AS class_id#30, i_category_id#17 AS category_id#31]
Input [5]: [ss_item_sk#10, i_item_sk#14, i_brand_id#15, i_class_id#16, i_category_id#17]

(36) HashAggregate [codegen id : 7]
Input [3]: [brand_id#29, class_id#30, category_id#31]
Keys [3]: [brand_id#29, class_id#30, category_id#31]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#29, class_id#30, category_id#31]

(37) Exchange
Input [3]: [brand_id#29, class_id#30, category_id#31]
Arguments: hashpartitioning(brand_id#29, class_id#30, category_id#31, 5), ENSURE_REQUIREMENTS, [id=#32]

(38) HashAggregate [codegen id : 12]
Input [3]: [brand_id#29, class_id#30, category_id#31]
Keys [3]: [brand_id#29, class_id#30, category_id#31]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#29, class_id#30, category_id#31]

(39) Scan parquet default.web_sales
Output [2]: [ws_item_sk#33, ws_sold_date_sk#34]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#34), dynamicpruningexpression(ws_sold_date_sk#34 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(40) ColumnarToRow [codegen id : 10]
Input [2]: [ws_item_sk#33, ws_sold_date_sk#34]

(41) Filter [codegen id : 10]
Input [2]: [ws_item_sk#33, ws_sold_date_sk#34]
Condition : isnotnull(ws_item_sk#33)

(42) ReusedExchange [Reuses operator id: 128]
Output [1]: [d_date_sk#35]

(43) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_sold_date_sk#34]
Right keys [1]: [d_date_sk#35]
Join condition: None

(44) Project [codegen id : 10]
Output [1]: [ws_item_sk#33]
Input [3]: [ws_item_sk#33, ws_sold_date_sk#34, d_date_sk#35]

(45) ReusedExchange [Reuses operator id: 25]
Output [4]: [i_item_sk#36, i_brand_id#37, i_class_id#38, i_category_id#39]

(46) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_item_sk#33]
Right keys [1]: [i_item_sk#36]
Join condition: None

(47) Project [codegen id : 10]
Output [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Input [5]: [ws_item_sk#33, i_item_sk#36, i_brand_id#37, i_class_id#38, i_category_id#39]

(48) HashAggregate [codegen id : 10]
Input [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Keys [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]

(49) Exchange
Input [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Arguments: hashpartitioning(i_brand_id#37, i_class_id#38, i_category_id#39, 5), ENSURE_REQUIREMENTS, [id=#40]

(50) HashAggregate [codegen id : 11]
Input [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Keys [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Functions: []
Aggregate Attributes: []
Results [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]

(51) BroadcastExchange
Input [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#41]

(52) BroadcastHashJoin [codegen id : 12]
Left keys [6]: [coalesce(brand_id#29, 0), isnull(brand_id#29), coalesce(class_id#30, 0), isnull(class_id#30), coalesce(category_id#31, 0), isnull(category_id#31)]
Right keys [6]: [coalesce(i_brand_id#37, 0), isnull(i_brand_id#37), coalesce(i_class_id#38, 0), isnull(i_class_id#38), coalesce(i_category_id#39, 0), isnull(i_category_id#39)]
Join condition: None

(53) HashAggregate [codegen id : 12]
Input [3]: [brand_id#29, class_id#30, category_id#31]
Keys [3]: [brand_id#29, class_id#30, category_id#31]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#29, class_id#30, category_id#31]

(54) HashAggregate [codegen id : 12]
Input [3]: [brand_id#29, class_id#30, category_id#31]
Keys [3]: [brand_id#29, class_id#30, category_id#31]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#29, class_id#30, category_id#31]

(55) BroadcastExchange
Input [3]: [brand_id#29, class_id#30, category_id#31]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#42]

(56) BroadcastHashJoin [codegen id : 13]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#29, class_id#30, category_id#31]
Join condition: None

(57) Project [codegen id : 13]
Output [1]: [i_item_sk#6 AS ss_item_sk#43]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#29, class_id#30, category_id#31]

(58) HashAggregate [codegen id : 13]
Input [1]: [ss_item_sk#43]
Keys [1]: [ss_item_sk#43]
Functions: []
Aggregate Attributes: []
Results [1]: [ss_item_sk#43]

(59) Exchange
Input [1]: [ss_item_sk#43]
Arguments: hashpartitioning(ss_item_sk#43, 5), ENSURE_REQUIREMENTS, [id=#44]

(60) HashAggregate [codegen id : 14]
Input [1]: [ss_item_sk#43]
Keys [1]: [ss_item_sk#43]
Functions: []
Aggregate Attributes: []
Results [1]: [ss_item_sk#43]

(61) BroadcastExchange
Input [1]: [ss_item_sk#43]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#45]

(62) BroadcastHashJoin [codegen id : 31]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#43]
Join condition: None

(63) ReusedExchange [Reuses operator id: 119]
Output [1]: [d_date_sk#46]

(64) BroadcastHashJoin [codegen id : 31]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#46]
Join condition: None

(65) Project [codegen id : 31]
Output [3]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3]
Input [5]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#46]

(66) Scan parquet default.item
Output [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(67) ColumnarToRow [codegen id : 30]
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]

(68) Filter [codegen id : 30]
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Condition : (((isnotnull(i_item_sk#47) AND isnotnull(i_brand_id#48)) AND isnotnull(i_class_id#49)) AND isnotnull(i_category_id#50))

(69) ReusedExchange [Reuses operator id: 61]
Output [1]: [ss_item_sk#43]

(70) BroadcastHashJoin [codegen id : 30]
Left keys [1]: [i_item_sk#47]
Right keys [1]: [ss_item_sk#43]
Join condition: None

(71) BroadcastExchange
Input [4]: [i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#51]

(72) BroadcastHashJoin [codegen id : 31]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#47]
Join condition: None

(73) Project [codegen id : 31]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#48, i_class_id#49, i_category_id#50]
Input [7]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, i_item_sk#47, i_brand_id#48, i_class_id#49, i_category_id#50]

(74) HashAggregate [codegen id : 31]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#48, i_class_id#49, i_category_id#50]
Keys [3]: [i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#52, isEmpty#53, count#54]
Results [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#55, isEmpty#56, count#57]

(75) Exchange
Input [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#55, isEmpty#56, count#57]
Arguments: hashpartitioning(i_brand_id#48, i_class_id#49, i_category_id#50, 5), ENSURE_REQUIREMENTS, [id=#58]

(76) HashAggregate [codegen id : 64]
Input [6]: [i_brand_id#48, i_class_id#49, i_category_id#50, sum#55, isEmpty#56, count#57]
Keys [3]: [i_brand_id#48, i_class_id#49, i_category_id#50]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#59, count(1)#60]
Results [6]: [store AS channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#59 AS sales#62, count(1)#60 AS number_sales#63]

(77) Filter [codegen id : 64]
Input [6]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sales#62, number_sales#63]
Condition : (isnotnull(sales#62) AND (cast(sales#62 as decimal(32,6)) > cast(Subquery scalar-subquery#64, [id=#65] as decimal(32,6))))

(78) Scan parquet default.store_sales
Output [4]: [ss_item_sk#66, ss_quantity#67, ss_list_price#68, ss_sold_date_sk#69]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#69), dynamicpruningexpression(ss_sold_date_sk#69 IN dynamicpruning#70)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(79) ColumnarToRow [codegen id : 62]
Input [4]: [ss_item_sk#66, ss_quantity#67, ss_list_price#68, ss_sold_date_sk#69]

(80) Filter [codegen id : 62]
Input [4]: [ss_item_sk#66, ss_quantity#67, ss_list_price#68, ss_sold_date_sk#69]
Condition : isnotnull(ss_item_sk#66)

(81) ReusedExchange [Reuses operator id: 61]
Output [1]: [ss_item_sk#43]

(82) BroadcastHashJoin [codegen id : 62]
Left keys [1]: [ss_item_sk#66]
Right keys [1]: [ss_item_sk#43]
Join condition: None

(83) ReusedExchange [Reuses operator id: 133]
Output [1]: [d_date_sk#71]

(84) BroadcastHashJoin [codegen id : 62]
Left keys [1]: [ss_sold_date_sk#69]
Right keys [1]: [d_date_sk#71]
Join condition: None

(85) Project [codegen id : 62]
Output [3]: [ss_item_sk#66, ss_quantity#67, ss_list_price#68]
Input [5]: [ss_item_sk#66, ss_quantity#67, ss_list_price#68, ss_sold_date_sk#69, d_date_sk#71]

(86) ReusedExchange [Reuses operator id: 71]
Output [4]: [i_item_sk#72, i_brand_id#73, i_class_id#74, i_category_id#75]

(87) BroadcastHashJoin [codegen id : 62]
Left keys [1]: [ss_item_sk#66]
Right keys [1]: [i_item_sk#72]
Join condition: None

(88) Project [codegen id : 62]
Output [5]: [ss_quantity#67, ss_list_price#68, i_brand_id#73, i_class_id#74, i_category_id#75]
Input [7]: [ss_item_sk#66, ss_quantity#67, ss_list_price#68, i_item_sk#72, i_brand_id#73, i_class_id#74, i_category_id#75]

(89) HashAggregate [codegen id : 62]
Input [5]: [ss_quantity#67, ss_list_price#68, i_brand_id#73, i_class_id#74, i_category_id#75]
Keys [3]: [i_brand_id#73, i_class_id#74, i_category_id#75]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#68 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#76, isEmpty#77, count#78]
Results [6]: [i_brand_id#73, i_class_id#74, i_category_id#75, sum#79, isEmpty#80, count#81]

(90) Exchange
Input [6]: [i_brand_id#73, i_class_id#74, i_category_id#75, sum#79, isEmpty#80, count#81]
Arguments: hashpartitioning(i_brand_id#73, i_class_id#74, i_category_id#75, 5), ENSURE_REQUIREMENTS, [id=#82]

(91) HashAggregate [codegen id : 63]
Input [6]: [i_brand_id#73, i_class_id#74, i_category_id#75, sum#79, isEmpty#80, count#81]
Keys [3]: [i_brand_id#73, i_class_id#74, i_category_id#75]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#68 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#83, count(1)#84]
Results [6]: [store AS channel#85, i_brand_id#73, i_class_id#74, i_category_id#75, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#68 as decimal(12,2)))), DecimalType(18,2), true))#83 AS sales#86, count(1)#84 AS number_sales#87]

(92) Filter [codegen id : 63]
Input [6]: [channel#85, i_brand_id#73, i_class_id#74, i_category_id#75, sales#86, number_sales#87]
Condition : (isnotnull(sales#86) AND (cast(sales#86 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#64, [id=#65] as decimal(32,6))))

(93) BroadcastExchange
Input [6]: [channel#85, i_brand_id#73, i_class_id#74, i_category_id#75, sales#86, number_sales#87]
Arguments: HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true]),false), [id=#88]

(94) BroadcastHashJoin [codegen id : 64]
Left keys [3]: [i_brand_id#48, i_class_id#49, i_category_id#50]
Right keys [3]: [i_brand_id#73, i_class_id#74, i_category_id#75]
Join condition: None

(95) TakeOrderedAndProject
Input [12]: [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sales#62, number_sales#63, channel#85, i_brand_id#73, i_class_id#74, i_category_id#75, sales#86, number_sales#87]
Arguments: 100, [i_brand_id#48 ASC NULLS FIRST, i_class_id#49 ASC NULLS FIRST, i_category_id#50 ASC NULLS FIRST], [channel#61, i_brand_id#48, i_class_id#49, i_category_id#50, sales#62, number_sales#63, channel#85, i_brand_id#73, i_class_id#74, i_category_id#75, sales#86, number_sales#87]

===== Subqueries =====

Subquery:1 Hosting operator id = 77 Hosting Expression = Subquery scalar-subquery#64, [id=#65]
* HashAggregate (114)
+- Exchange (113)
   +- * HashAggregate (112)
      +- Union (111)
         :- * Project (100)
         :  +- * BroadcastHashJoin Inner BuildRight (99)
         :     :- * ColumnarToRow (97)
         :     :  +- Scan parquet default.store_sales (96)
         :     +- ReusedExchange (98)
         :- * Project (105)
         :  +- * BroadcastHashJoin Inner BuildRight (104)
         :     :- * ColumnarToRow (102)
         :     :  +- Scan parquet default.catalog_sales (101)
         :     +- ReusedExchange (103)
         +- * Project (110)
            +- * BroadcastHashJoin Inner BuildRight (109)
               :- * ColumnarToRow (107)
               :  +- Scan parquet default.web_sales (106)
               +- ReusedExchange (108)


(96) Scan parquet default.store_sales
Output [3]: [ss_quantity#89, ss_list_price#90, ss_sold_date_sk#91]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#91), dynamicpruningexpression(ss_sold_date_sk#91 IN dynamicpruning#12)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(97) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#89, ss_list_price#90, ss_sold_date_sk#91]

(98) ReusedExchange [Reuses operator id: 128]
Output [1]: [d_date_sk#92]

(99) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#91]
Right keys [1]: [d_date_sk#92]
Join condition: None

(100) Project [codegen id : 2]
Output [2]: [ss_quantity#89 AS quantity#93, ss_list_price#90 AS list_price#94]
Input [4]: [ss_quantity#89, ss_list_price#90, ss_sold_date_sk#91, d_date_sk#92]

(101) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#95, cs_list_price#96, cs_sold_date_sk#97]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#97), dynamicpruningexpression(cs_sold_date_sk#97 IN dynamicpruning#12)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(102) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#95, cs_list_price#96, cs_sold_date_sk#97]

(103) ReusedExchange [Reuses operator id: 128]
Output [1]: [d_date_sk#98]

(104) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#97]
Right keys [1]: [d_date_sk#98]
Join condition: None

(105) Project [codegen id : 4]
Output [2]: [cs_quantity#95 AS quantity#99, cs_list_price#96 AS list_price#100]
Input [4]: [cs_quantity#95, cs_list_price#96, cs_sold_date_sk#97, d_date_sk#98]

(106) Scan parquet default.web_sales
Output [3]: [ws_quantity#101, ws_list_price#102, ws_sold_date_sk#103]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#103), dynamicpruningexpression(ws_sold_date_sk#103 IN dynamicpruning#12)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(107) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#101, ws_list_price#102, ws_sold_date_sk#103]

(108) ReusedExchange [Reuses operator id: 128]
Output [1]: [d_date_sk#104]

(109) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#103]
Right keys [1]: [d_date_sk#104]
Join condition: None

(110) Project [codegen id : 6]
Output [2]: [ws_quantity#101 AS quantity#105, ws_list_price#102 AS list_price#106]
Input [4]: [ws_quantity#101, ws_list_price#102, ws_sold_date_sk#103, d_date_sk#104]

(111) Union

(112) HashAggregate [codegen id : 7]
Input [2]: [quantity#93, list_price#94]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#93 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#94 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#107, count#108]
Results [2]: [sum#109, count#110]

(113) Exchange
Input [2]: [sum#109, count#110]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#111]

(114) HashAggregate [codegen id : 8]
Input [2]: [sum#109, count#110]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#93 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#94 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#93 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#94 as decimal(12,2)))), DecimalType(18,2), true))#112]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#93 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#94 as decimal(12,2)))), DecimalType(18,2), true))#112 AS average_sales#113]

Subquery:2 Hosting operator id = 96 Hosting Expression = ss_sold_date_sk#91 IN dynamicpruning#12

Subquery:3 Hosting operator id = 101 Hosting Expression = cs_sold_date_sk#97 IN dynamicpruning#12

Subquery:4 Hosting operator id = 106 Hosting Expression = ws_sold_date_sk#103 IN dynamicpruning#12

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (119)
+- * Project (118)
   +- * Filter (117)
      +- * ColumnarToRow (116)
         +- Scan parquet default.date_dim (115)


(115) Scan parquet default.date_dim
Output [2]: [d_date_sk#46, d_week_seq#114]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(116) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#46, d_week_seq#114]

(117) Filter [codegen id : 1]
Input [2]: [d_date_sk#46, d_week_seq#114]
Condition : ((isnotnull(d_week_seq#114) AND (d_week_seq#114 = Subquery scalar-subquery#115, [id=#116])) AND isnotnull(d_date_sk#46))

(118) Project [codegen id : 1]
Output [1]: [d_date_sk#46]
Input [2]: [d_date_sk#46, d_week_seq#114]

(119) BroadcastExchange
Input [1]: [d_date_sk#46]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#117]

Subquery:6 Hosting operator id = 117 Hosting Expression = Subquery scalar-subquery#115, [id=#116]
* Project (123)
+- * Filter (122)
   +- * ColumnarToRow (121)
      +- Scan parquet default.date_dim (120)


(120) Scan parquet default.date_dim
Output [4]: [d_week_seq#118, d_year#119, d_moy#120, d_dom#121]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,2000), EqualTo(d_moy,12), EqualTo(d_dom,11)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(121) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#118, d_year#119, d_moy#120, d_dom#121]

(122) Filter [codegen id : 1]
Input [4]: [d_week_seq#118, d_year#119, d_moy#120, d_dom#121]
Condition : (((((isnotnull(d_year#119) AND isnotnull(d_moy#120)) AND isnotnull(d_dom#121)) AND (d_year#119 = 2000)) AND (d_moy#120 = 12)) AND (d_dom#121 = 11))

(123) Project [codegen id : 1]
Output [1]: [d_week_seq#118]
Input [4]: [d_week_seq#118, d_year#119, d_moy#120, d_dom#121]

Subquery:7 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (128)
+- * Project (127)
   +- * Filter (126)
      +- * ColumnarToRow (125)
         +- Scan parquet default.date_dim (124)


(124) Scan parquet default.date_dim
Output [2]: [d_date_sk#13, d_year#122]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(125) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#13, d_year#122]

(126) Filter [codegen id : 1]
Input [2]: [d_date_sk#13, d_year#122]
Condition : (((isnotnull(d_year#122) AND (d_year#122 >= 1999)) AND (d_year#122 <= 2001)) AND isnotnull(d_date_sk#13))

(127) Project [codegen id : 1]
Output [1]: [d_date_sk#13]
Input [2]: [d_date_sk#13, d_year#122]

(128) BroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#123]

Subquery:8 Hosting operator id = 16 Hosting Expression = cs_sold_date_sk#19 IN dynamicpruning#12

Subquery:9 Hosting operator id = 39 Hosting Expression = ws_sold_date_sk#34 IN dynamicpruning#12

Subquery:10 Hosting operator id = 92 Hosting Expression = ReusedSubquery Subquery scalar-subquery#64, [id=#65]

Subquery:11 Hosting operator id = 78 Hosting Expression = ss_sold_date_sk#69 IN dynamicpruning#70
BroadcastExchange (133)
+- * Project (132)
   +- * Filter (131)
      +- * ColumnarToRow (130)
         +- Scan parquet default.date_dim (129)


(129) Scan parquet default.date_dim
Output [2]: [d_date_sk#71, d_week_seq#124]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(130) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#71, d_week_seq#124]

(131) Filter [codegen id : 1]
Input [2]: [d_date_sk#71, d_week_seq#124]
Condition : ((isnotnull(d_week_seq#124) AND (d_week_seq#124 = Subquery scalar-subquery#125, [id=#126])) AND isnotnull(d_date_sk#71))

(132) Project [codegen id : 1]
Output [1]: [d_date_sk#71]
Input [2]: [d_date_sk#71, d_week_seq#124]

(133) BroadcastExchange
Input [1]: [d_date_sk#71]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#127]

Subquery:12 Hosting operator id = 131 Hosting Expression = Subquery scalar-subquery#125, [id=#126]
* Project (137)
+- * Filter (136)
   +- * ColumnarToRow (135)
      +- Scan parquet default.date_dim (134)


(134) Scan parquet default.date_dim
Output [4]: [d_week_seq#128, d_year#129, d_moy#130, d_dom#131]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), EqualTo(d_dom,11)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(135) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#128, d_year#129, d_moy#130, d_dom#131]

(136) Filter [codegen id : 1]
Input [4]: [d_week_seq#128, d_year#129, d_moy#130, d_dom#131]
Condition : (((((isnotnull(d_year#129) AND isnotnull(d_moy#130)) AND isnotnull(d_dom#131)) AND (d_year#129 = 1999)) AND (d_moy#130 = 12)) AND (d_dom#131 = 11))

(137) Project [codegen id : 1]
Output [1]: [d_week_seq#128]
Input [4]: [d_week_seq#128, d_year#129, d_moy#130, d_dom#131]


