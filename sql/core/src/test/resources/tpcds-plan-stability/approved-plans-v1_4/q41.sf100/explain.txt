== Physical Plan ==
TakeOrderedAndProject (20)
+- * HashAggregate (19)
   +- Exchange (18)
      +- * HashAggregate (17)
         +- * Project (16)
            +- * BroadcastHashJoin Inner BuildLeft (15)
               :- BroadcastExchange (5)
               :  +- * Project (4)
               :     +- * Filter (3)
               :        +- * ColumnarToRow (2)
               :           +- Scan parquet default.item (1)
               +- * Project (14)
                  +- * Filter (13)
                     +- * HashAggregate (12)
                        +- Exchange (11)
                           +- * HashAggregate (10)
                              +- * Project (9)
                                 +- * Filter (8)
                                    +- * ColumnarToRow (7)
                                       +- Scan parquet default.item (6)


(1) Scan parquet default.item
Output [3]: [i_manufact_id#1, i_manufact#2, i_product_name#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manufact_id), GreaterThanOrEqual(i_manufact_id,738), LessThanOrEqual(i_manufact_id,778)]
ReadSchema: struct<i_manufact_id:int,i_manufact:string,i_product_name:string>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [i_manufact_id#1, i_manufact#2, i_product_name#3]

(3) Filter [codegen id : 1]
Input [3]: [i_manufact_id#1, i_manufact#2, i_product_name#3]
Condition : ((isnotnull(i_manufact_id#1) AND (i_manufact_id#1 >= 738)) AND (i_manufact_id#1 <= 778))

(4) Project [codegen id : 1]
Output [2]: [i_manufact#2, i_product_name#3]
Input [3]: [i_manufact_id#1, i_manufact#2, i_product_name#3]

(5) BroadcastExchange
Input [2]: [i_manufact#2, i_product_name#3]
Arguments: HashedRelationBroadcastMode(List(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, input[0, string, true], 50, false, true)),false), [id=#4]

(6) Scan parquet default.item
Output [5]: [i_category#5, i_manufact#2, i_size#6, i_color#7, i_units#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
ReadSchema: struct<i_category:string,i_manufact:string,i_size:string,i_color:string,i_units:string>

(7) ColumnarToRow [codegen id : 2]
Input [5]: [i_category#5, i_manufact#2, i_size#6, i_color#7, i_units#8]

(8) Filter [codegen id : 2]
Input [5]: [i_category#5, i_manufact#2, i_size#6, i_color#7, i_units#8]
Condition : (((((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#5, 50, false, true) = Women) AND (((((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_color#7, 20, false, true) = powder) OR (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_color#7, 20, false, true) = khaki)) AND ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_units#8, 10, false, true) = Ounce) OR (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_units#8, 10, false, true) = Oz))) AND ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_size#6, 20, false, true) = medium) OR (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_size#6, 20, false, true) = extra large))) OR ((((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_color#7, 20, false, true) = brown) OR (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_color#7, 20, false, true) = honeydew)) AND ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_units#8, 10, false, true) = Bunch) OR (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_units#8, 10, false, true) = Ton))) AND ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_size#6, 20, false, true) = N/A) OR (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_size#6, 20, false, true) = small))))) OR ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#5, 50, false, true) = Men) AND (((((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_color#7, 20, false, true) = floral) OR (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_color#7, 20, false, true) = deep)) AND ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_units#8, 10, false, true) = N/A) OR (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_units#8, 10, false, true) = Dozen))) AND ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_size#6, 20, false, true) = petite) OR (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_size#6, 20, false, true) = large))) OR ((((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_color#7, 20, false, true) = light) OR (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_color#7, 20, false, true) = cornflower)) AND ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_units#8, 10, false, true) = Box) OR (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_units#8, 10, false, true) = Pound))) AND ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_size#6, 20, false, true) = medium) OR (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_size#6, 20, false, true) = extra large)))))) OR (((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#5, 50, false, true) = Women) AND (((((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_color#7, 20, false, true) = midnight) OR (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_color#7, 20, false, true) = snow)) AND ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_units#8, 10, false, true) = Pallet) OR (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_units#8, 10, false, true) = Gross))) AND ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_size#6, 20, false, true) = medium) OR (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_size#6, 20, false, true) = extra large))) OR ((((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_color#7, 20, false, true) = cyan) OR (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_color#7, 20, false, true) = papaya)) AND ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_units#8, 10, false, true) = Cup) OR (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_units#8, 10, false, true) = Dram))) AND ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_size#6, 20, false, true) = N/A) OR (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_size#6, 20, false, true) = small))))) OR ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#5, 50, false, true) = Men) AND (((((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_color#7, 20, false, true) = orange) OR (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_color#7, 20, false, true) = frosted)) AND ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_units#8, 10, false, true) = Each) OR (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_units#8, 10, false, true) = Tbl))) AND ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_size#6, 20, false, true) = petite) OR (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_size#6, 20, false, true) = large))) OR ((((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_color#7, 20, false, true) = forest) OR (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_color#7, 20, false, true) = ghost)) AND ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_units#8, 10, false, true) = Lb) OR (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_units#8, 10, false, true) = Bundle))) AND ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_size#6, 20, false, true) = medium) OR (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_size#6, 20, false, true) = extra large))))))) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_manufact#2, 50, false, true)))

(9) Project [codegen id : 2]
Output [1]: [staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_manufact#2, 50, false, true) AS i_manufact#9]
Input [5]: [i_category#5, i_manufact#2, i_size#6, i_color#7, i_units#8]

(10) HashAggregate [codegen id : 2]
Input [1]: [i_manufact#9]
Keys [1]: [i_manufact#9]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#10]
Results [2]: [i_manufact#9, count#11]

(11) Exchange
Input [2]: [i_manufact#9, count#11]
Arguments: hashpartitioning(i_manufact#9, 5), ENSURE_REQUIREMENTS, [id=#12]

(12) HashAggregate
Input [2]: [i_manufact#9, count#11]
Keys [1]: [i_manufact#9]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#13]
Results [2]: [count(1)#13 AS item_cnt#14, i_manufact#9]

(13) Filter
Input [2]: [item_cnt#14, i_manufact#9]
Condition : (item_cnt#14 > 0)

(14) Project
Output [1]: [i_manufact#9]
Input [2]: [item_cnt#14, i_manufact#9]

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_manufact#2, 50, false, true)]
Right keys [1]: [i_manufact#9]
Join condition: None

(16) Project [codegen id : 3]
Output [1]: [staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_product_name#3, 50, false, true) AS i_product_name#15]
Input [3]: [i_manufact#2, i_product_name#3, i_manufact#9]

(17) HashAggregate [codegen id : 3]
Input [1]: [i_product_name#15]
Keys [1]: [i_product_name#15]
Functions: []
Aggregate Attributes: []
Results [1]: [i_product_name#15]

(18) Exchange
Input [1]: [i_product_name#15]
Arguments: hashpartitioning(i_product_name#15, 5), ENSURE_REQUIREMENTS, [id=#16]

(19) HashAggregate [codegen id : 4]
Input [1]: [i_product_name#15]
Keys [1]: [i_product_name#15]
Functions: []
Aggregate Attributes: []
Results [1]: [i_product_name#15]

(20) TakeOrderedAndProject
Input [1]: [i_product_name#15]
Arguments: 100, [i_product_name#15 ASC NULLS FIRST], [i_product_name#15]

