== Physical Plan ==
TakeOrderedAndProject (83)
+- * HashAggregate (82)
   +- Exchange (81)
      +- * HashAggregate (80)
         +- Union (79)
            :- * HashAggregate (32)
            :  +- Exchange (31)
            :     +- * HashAggregate (30)
            :        +- * Project (29)
            :           +- * BroadcastHashJoin Inner BuildRight (28)
            :              :- * Project (17)
            :              :  +- * BroadcastHashJoin Inner BuildLeft (16)
            :              :     :- BroadcastExchange (11)
            :              :     :  +- * Project (10)
            :              :     :     +- * BroadcastHashJoin Inner BuildLeft (9)
            :              :     :        :- BroadcastExchange (4)
            :              :     :        :  +- * Filter (3)
            :              :     :        :     +- * ColumnarToRow (2)
            :              :     :        :        +- Scan parquet default.store_sales (1)
            :              :     :        +- * Project (8)
            :              :     :           +- * Filter (7)
            :              :     :              +- * ColumnarToRow (6)
            :              :     :                 +- Scan parquet default.date_dim (5)
            :              :     +- * Project (15)
            :              :        +- * Filter (14)
            :              :           +- * ColumnarToRow (13)
            :              :              +- Scan parquet default.customer_address (12)
            :              +- BroadcastExchange (27)
            :                 +- * BroadcastHashJoin LeftSemi BuildRight (26)
            :                    :- * Filter (20)
            :                    :  +- * ColumnarToRow (19)
            :                    :     +- Scan parquet default.item (18)
            :                    +- BroadcastExchange (25)
            :                       +- * Project (24)
            :                          +- * Filter (23)
            :                             +- * ColumnarToRow (22)
            :                                +- Scan parquet default.item (21)
            :- * HashAggregate (55)
            :  +- Exchange (54)
            :     +- * HashAggregate (53)
            :        +- * Project (52)
            :           +- * BroadcastHashJoin Inner BuildRight (51)
            :              :- * Project (49)
            :              :  +- * BroadcastHashJoin Inner BuildLeft (48)
            :              :     :- BroadcastExchange (43)
            :              :     :  +- * Project (42)
            :              :     :     +- * BroadcastHashJoin Inner BuildLeft (41)
            :              :     :        :- BroadcastExchange (36)
            :              :     :        :  +- * Filter (35)
            :              :     :        :     +- * ColumnarToRow (34)
            :              :     :        :        +- Scan parquet default.catalog_sales (33)
            :              :     :        +- * Project (40)
            :              :     :           +- * Filter (39)
            :              :     :              +- * ColumnarToRow (38)
            :              :     :                 +- Scan parquet default.date_dim (37)
            :              :     +- * Project (47)
            :              :        +- * Filter (46)
            :              :           +- * ColumnarToRow (45)
            :              :              +- Scan parquet default.customer_address (44)
            :              +- ReusedExchange (50)
            +- * HashAggregate (78)
               +- Exchange (77)
                  +- * HashAggregate (76)
                     +- * Project (75)
                        +- * BroadcastHashJoin Inner BuildRight (74)
                           :- * Project (72)
                           :  +- * BroadcastHashJoin Inner BuildLeft (71)
                           :     :- BroadcastExchange (66)
                           :     :  +- * Project (65)
                           :     :     +- * BroadcastHashJoin Inner BuildLeft (64)
                           :     :        :- BroadcastExchange (59)
                           :     :        :  +- * Filter (58)
                           :     :        :     +- * ColumnarToRow (57)
                           :     :        :        +- Scan parquet default.web_sales (56)
                           :     :        +- * Project (63)
                           :     :           +- * Filter (62)
                           :     :              +- * ColumnarToRow (61)
                           :     :                 +- Scan parquet default.date_dim (60)
                           :     +- * Project (70)
                           :        +- * Filter (69)
                           :           +- * ColumnarToRow (68)
                           :              +- Scan parquet default.customer_address (67)
                           +- ReusedExchange (73)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ss_addr_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4]
Condition : (isnotnull(ss_addr_sk#2) AND isnotnull(ss_item_sk#1))

(4) BroadcastExchange
Input [4]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[3, int, true] as bigint)),false), [id=#5]

(5) Scan parquet default.date_dim
Output [3]: [d_date_sk#6, d_year#7, d_moy#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(6) ColumnarToRow
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]

(7) Filter
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]
Condition : ((((isnotnull(d_year#7) AND isnotnull(d_moy#8)) AND (d_year#7 = 2001)) AND (d_moy#8 = 2)) AND isnotnull(d_date_sk#6))

(8) Project
Output [1]: [d_date_sk#6]
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(10) Project [codegen id : 2]
Output [3]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3]
Input [5]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4, d_date_sk#6]

(11) BroadcastExchange
Input [3]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#9]

(12) Scan parquet default.customer_address
Output [2]: [ca_address_sk#10, ca_gmt_offset#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_gmt_offset), EqualTo(ca_gmt_offset,-5.00), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_gmt_offset:decimal(5,2)>

(13) ColumnarToRow
Input [2]: [ca_address_sk#10, ca_gmt_offset#11]

(14) Filter
Input [2]: [ca_address_sk#10, ca_gmt_offset#11]
Condition : ((isnotnull(ca_gmt_offset#11) AND (ca_gmt_offset#11 = -5.00)) AND isnotnull(ca_address_sk#10))

(15) Project
Output [1]: [ca_address_sk#10]
Input [2]: [ca_address_sk#10, ca_gmt_offset#11]

(16) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_addr_sk#2]
Right keys [1]: [ca_address_sk#10]
Join condition: None

(17) Project [codegen id : 5]
Output [2]: [ss_item_sk#1, ss_ext_sales_price#3]
Input [4]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ca_address_sk#10]

(18) Scan parquet default.item
Output [2]: [i_item_sk#12, i_item_id#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(19) ColumnarToRow [codegen id : 4]
Input [2]: [i_item_sk#12, i_item_id#13]

(20) Filter [codegen id : 4]
Input [2]: [i_item_sk#12, i_item_id#13]
Condition : isnotnull(i_item_sk#12)

(21) Scan parquet default.item
Output [2]: [i_item_id#13, i_color#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [In(i_color, [slate,blanched,burnished])]
ReadSchema: struct<i_item_id:string,i_color:string>

(22) ColumnarToRow [codegen id : 3]
Input [2]: [i_item_id#13, i_color#14]

(23) Filter [codegen id : 3]
Input [2]: [i_item_id#13, i_color#14]
Condition : i_color#14 IN (slate,blanched,burnished)

(24) Project [codegen id : 3]
Output [1]: [i_item_id#13 AS i_item_id#13#15]
Input [2]: [i_item_id#13, i_color#14]

(25) BroadcastExchange
Input [1]: [i_item_id#13#15]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#16]

(26) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [i_item_id#13]
Right keys [1]: [i_item_id#13#15]
Join condition: None

(27) BroadcastExchange
Input [2]: [i_item_sk#12, i_item_id#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#17]

(28) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#12]
Join condition: None

(29) Project [codegen id : 5]
Output [2]: [ss_ext_sales_price#3, i_item_id#13]
Input [4]: [ss_item_sk#1, ss_ext_sales_price#3, i_item_sk#12, i_item_id#13]

(30) HashAggregate [codegen id : 5]
Input [2]: [ss_ext_sales_price#3, i_item_id#13]
Keys [1]: [i_item_id#13]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [1]: [sum#18]
Results [2]: [i_item_id#13, sum#19]

(31) Exchange
Input [2]: [i_item_id#13, sum#19]
Arguments: hashpartitioning(i_item_id#13, 5), ENSURE_REQUIREMENTS, [id=#20]

(32) HashAggregate [codegen id : 6]
Input [2]: [i_item_id#13, sum#19]
Keys [1]: [i_item_id#13]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#3))#21]
Results [2]: [i_item_id#13, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#21,17,2) AS total_sales#22]

(33) Scan parquet default.catalog_sales
Output [4]: [cs_bill_addr_sk#23, cs_item_sk#24, cs_ext_sales_price#25, cs_sold_date_sk#26]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#26), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(cs_bill_addr_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_addr_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(34) ColumnarToRow [codegen id : 7]
Input [4]: [cs_bill_addr_sk#23, cs_item_sk#24, cs_ext_sales_price#25, cs_sold_date_sk#26]

(35) Filter [codegen id : 7]
Input [4]: [cs_bill_addr_sk#23, cs_item_sk#24, cs_ext_sales_price#25, cs_sold_date_sk#26]
Condition : (isnotnull(cs_bill_addr_sk#23) AND isnotnull(cs_item_sk#24))

(36) BroadcastExchange
Input [4]: [cs_bill_addr_sk#23, cs_item_sk#24, cs_ext_sales_price#25, cs_sold_date_sk#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[3, int, true] as bigint)),false), [id=#27]

(37) Scan parquet default.date_dim
Output [3]: [d_date_sk#6, d_year#7, d_moy#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(38) ColumnarToRow
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]

(39) Filter
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]
Condition : ((((isnotnull(d_year#7) AND isnotnull(d_moy#8)) AND (d_year#7 = 2001)) AND (d_moy#8 = 2)) AND isnotnull(d_date_sk#6))

(40) Project
Output [1]: [d_date_sk#6]
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]

(41) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#26]
Right keys [1]: [d_date_sk#6]
Join condition: None

(42) Project [codegen id : 8]
Output [3]: [cs_bill_addr_sk#23, cs_item_sk#24, cs_ext_sales_price#25]
Input [5]: [cs_bill_addr_sk#23, cs_item_sk#24, cs_ext_sales_price#25, cs_sold_date_sk#26, d_date_sk#6]

(43) BroadcastExchange
Input [3]: [cs_bill_addr_sk#23, cs_item_sk#24, cs_ext_sales_price#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#28]

(44) Scan parquet default.customer_address
Output [2]: [ca_address_sk#10, ca_gmt_offset#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_gmt_offset), EqualTo(ca_gmt_offset,-5.00), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_gmt_offset:decimal(5,2)>

(45) ColumnarToRow
Input [2]: [ca_address_sk#10, ca_gmt_offset#11]

(46) Filter
Input [2]: [ca_address_sk#10, ca_gmt_offset#11]
Condition : ((isnotnull(ca_gmt_offset#11) AND (ca_gmt_offset#11 = -5.00)) AND isnotnull(ca_address_sk#10))

(47) Project
Output [1]: [ca_address_sk#10]
Input [2]: [ca_address_sk#10, ca_gmt_offset#11]

(48) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [cs_bill_addr_sk#23]
Right keys [1]: [ca_address_sk#10]
Join condition: None

(49) Project [codegen id : 11]
Output [2]: [cs_item_sk#24, cs_ext_sales_price#25]
Input [4]: [cs_bill_addr_sk#23, cs_item_sk#24, cs_ext_sales_price#25, ca_address_sk#10]

(50) ReusedExchange [Reuses operator id: 27]
Output [2]: [i_item_sk#12, i_item_id#13]

(51) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [cs_item_sk#24]
Right keys [1]: [i_item_sk#12]
Join condition: None

(52) Project [codegen id : 11]
Output [2]: [cs_ext_sales_price#25, i_item_id#13]
Input [4]: [cs_item_sk#24, cs_ext_sales_price#25, i_item_sk#12, i_item_id#13]

(53) HashAggregate [codegen id : 11]
Input [2]: [cs_ext_sales_price#25, i_item_id#13]
Keys [1]: [i_item_id#13]
Functions [1]: [partial_sum(UnscaledValue(cs_ext_sales_price#25))]
Aggregate Attributes [1]: [sum#29]
Results [2]: [i_item_id#13, sum#30]

(54) Exchange
Input [2]: [i_item_id#13, sum#30]
Arguments: hashpartitioning(i_item_id#13, 5), ENSURE_REQUIREMENTS, [id=#31]

(55) HashAggregate [codegen id : 12]
Input [2]: [i_item_id#13, sum#30]
Keys [1]: [i_item_id#13]
Functions [1]: [sum(UnscaledValue(cs_ext_sales_price#25))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_ext_sales_price#25))#32]
Results [2]: [i_item_id#13, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#25))#32,17,2) AS total_sales#33]

(56) Scan parquet default.web_sales
Output [4]: [ws_item_sk#34, ws_bill_addr_sk#35, ws_ext_sales_price#36, ws_sold_date_sk#37]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#37), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ws_bill_addr_sk), IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_addr_sk:int,ws_ext_sales_price:decimal(7,2)>

(57) ColumnarToRow [codegen id : 13]
Input [4]: [ws_item_sk#34, ws_bill_addr_sk#35, ws_ext_sales_price#36, ws_sold_date_sk#37]

(58) Filter [codegen id : 13]
Input [4]: [ws_item_sk#34, ws_bill_addr_sk#35, ws_ext_sales_price#36, ws_sold_date_sk#37]
Condition : (isnotnull(ws_bill_addr_sk#35) AND isnotnull(ws_item_sk#34))

(59) BroadcastExchange
Input [4]: [ws_item_sk#34, ws_bill_addr_sk#35, ws_ext_sales_price#36, ws_sold_date_sk#37]
Arguments: HashedRelationBroadcastMode(List(cast(input[3, int, true] as bigint)),false), [id=#38]

(60) Scan parquet default.date_dim
Output [3]: [d_date_sk#6, d_year#7, d_moy#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(61) ColumnarToRow
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]

(62) Filter
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]
Condition : ((((isnotnull(d_year#7) AND isnotnull(d_moy#8)) AND (d_year#7 = 2001)) AND (d_moy#8 = 2)) AND isnotnull(d_date_sk#6))

(63) Project
Output [1]: [d_date_sk#6]
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]

(64) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_sold_date_sk#37]
Right keys [1]: [d_date_sk#6]
Join condition: None

(65) Project [codegen id : 14]
Output [3]: [ws_item_sk#34, ws_bill_addr_sk#35, ws_ext_sales_price#36]
Input [5]: [ws_item_sk#34, ws_bill_addr_sk#35, ws_ext_sales_price#36, ws_sold_date_sk#37, d_date_sk#6]

(66) BroadcastExchange
Input [3]: [ws_item_sk#34, ws_bill_addr_sk#35, ws_ext_sales_price#36]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#39]

(67) Scan parquet default.customer_address
Output [2]: [ca_address_sk#10, ca_gmt_offset#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_gmt_offset), EqualTo(ca_gmt_offset,-5.00), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_gmt_offset:decimal(5,2)>

(68) ColumnarToRow
Input [2]: [ca_address_sk#10, ca_gmt_offset#11]

(69) Filter
Input [2]: [ca_address_sk#10, ca_gmt_offset#11]
Condition : ((isnotnull(ca_gmt_offset#11) AND (ca_gmt_offset#11 = -5.00)) AND isnotnull(ca_address_sk#10))

(70) Project
Output [1]: [ca_address_sk#10]
Input [2]: [ca_address_sk#10, ca_gmt_offset#11]

(71) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_bill_addr_sk#35]
Right keys [1]: [ca_address_sk#10]
Join condition: None

(72) Project [codegen id : 17]
Output [2]: [ws_item_sk#34, ws_ext_sales_price#36]
Input [4]: [ws_item_sk#34, ws_bill_addr_sk#35, ws_ext_sales_price#36, ca_address_sk#10]

(73) ReusedExchange [Reuses operator id: 27]
Output [2]: [i_item_sk#12, i_item_id#13]

(74) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_item_sk#34]
Right keys [1]: [i_item_sk#12]
Join condition: None

(75) Project [codegen id : 17]
Output [2]: [ws_ext_sales_price#36, i_item_id#13]
Input [4]: [ws_item_sk#34, ws_ext_sales_price#36, i_item_sk#12, i_item_id#13]

(76) HashAggregate [codegen id : 17]
Input [2]: [ws_ext_sales_price#36, i_item_id#13]
Keys [1]: [i_item_id#13]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#36))]
Aggregate Attributes [1]: [sum#40]
Results [2]: [i_item_id#13, sum#41]

(77) Exchange
Input [2]: [i_item_id#13, sum#41]
Arguments: hashpartitioning(i_item_id#13, 5), ENSURE_REQUIREMENTS, [id=#42]

(78) HashAggregate [codegen id : 18]
Input [2]: [i_item_id#13, sum#41]
Keys [1]: [i_item_id#13]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#36))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#36))#43]
Results [2]: [i_item_id#13, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#36))#43,17,2) AS total_sales#44]

(79) Union

(80) HashAggregate [codegen id : 19]
Input [2]: [i_item_id#13, total_sales#22]
Keys [1]: [i_item_id#13]
Functions [1]: [partial_sum(total_sales#22)]
Aggregate Attributes [2]: [sum#45, isEmpty#46]
Results [3]: [i_item_id#13, sum#47, isEmpty#48]

(81) Exchange
Input [3]: [i_item_id#13, sum#47, isEmpty#48]
Arguments: hashpartitioning(i_item_id#13, 5), ENSURE_REQUIREMENTS, [id=#49]

(82) HashAggregate [codegen id : 20]
Input [3]: [i_item_id#13, sum#47, isEmpty#48]
Keys [1]: [i_item_id#13]
Functions [1]: [sum(total_sales#22)]
Aggregate Attributes [1]: [sum(total_sales#22)#50]
Results [2]: [i_item_id#13, sum(total_sales#22)#50 AS total_sales#51]

(83) TakeOrderedAndProject
Input [2]: [i_item_id#13, total_sales#51]
Arguments: 100, [total_sales#51 ASC NULLS FIRST], [i_item_id#13, total_sales#51]

