== Physical Plan ==
TakeOrderedAndProject (33)
+- * HashAggregate (32)
   +- Exchange (31)
      +- * HashAggregate (30)
         +- * Project (29)
            +- * BroadcastHashJoin Inner BuildRight (28)
               :- * Project (22)
               :  +- * BroadcastHashJoin Inner BuildRight (21)
               :     :- * Project (16)
               :     :  +- * BroadcastHashJoin Inner BuildRight (15)
               :     :     :- * Project (9)
               :     :     :  +- * BroadcastHashJoin Inner BuildRight (8)
               :     :     :     :- * Filter (3)
               :     :     :     :  +- * ColumnarToRow (2)
               :     :     :     :     +- Scan parquet default.store_sales (1)
               :     :     :     +- BroadcastExchange (7)
               :     :     :        +- * Filter (6)
               :     :     :           +- * ColumnarToRow (5)
               :     :     :              +- Scan parquet default.store_returns (4)
               :     :     +- BroadcastExchange (14)
               :     :        +- * Project (13)
               :     :           +- * Filter (12)
               :     :              +- * ColumnarToRow (11)
               :     :                 +- Scan parquet default.store (10)
               :     +- BroadcastExchange (20)
               :        +- * Filter (19)
               :           +- * ColumnarToRow (18)
               :              +- Scan parquet default.date_dim (17)
               +- BroadcastExchange (27)
                  +- * Project (26)
                     +- * Filter (25)
                        +- * ColumnarToRow (24)
                           +- Scan parquet default.date_dim (23)


(1) Scan parquet default.store_sales
Output [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_store_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int>

(2) ColumnarToRow [codegen id : 5]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5]

(3) Filter [codegen id : 5]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5]
Condition : ((((isnotnull(ss_ticket_number#5) AND isnotnull(ss_item_sk#2)) AND isnotnull(ss_customer_sk#3)) AND isnotnull(ss_store_sk#4)) AND isnotnull(ss_sold_date_sk#1))

(4) Scan parquet default.store_returns
Output [4]: [sr_returned_date_sk#6, sr_item_sk#7, sr_customer_sk#8, sr_ticket_number#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk), IsNotNull(sr_customer_sk), IsNotNull(sr_returned_date_sk)]
ReadSchema: struct<sr_returned_date_sk:bigint,sr_item_sk:bigint,sr_customer_sk:bigint,sr_ticket_number:bigint>

(5) ColumnarToRow [codegen id : 1]
Input [4]: [sr_returned_date_sk#6, sr_item_sk#7, sr_customer_sk#8, sr_ticket_number#9]

(6) Filter [codegen id : 1]
Input [4]: [sr_returned_date_sk#6, sr_item_sk#7, sr_customer_sk#8, sr_ticket_number#9]
Condition : (((isnotnull(sr_ticket_number#9) AND isnotnull(sr_item_sk#7)) AND isnotnull(sr_customer_sk#8)) AND isnotnull(sr_returned_date_sk#6))

(7) BroadcastExchange
Input [4]: [sr_returned_date_sk#6, sr_item_sk#7, sr_customer_sk#8, sr_ticket_number#9]
Arguments: HashedRelationBroadcastMode(List(input[3, bigint, false], input[1, bigint, false], input[2, bigint, false]),false), [id=#10]

(8) BroadcastHashJoin [codegen id : 5]
Left keys [3]: [cast(ss_ticket_number#5 as bigint), cast(ss_item_sk#2 as bigint), cast(ss_customer_sk#3 as bigint)]
Right keys [3]: [sr_ticket_number#9, sr_item_sk#7, sr_customer_sk#8]
Join condition: None

(9) Project [codegen id : 5]
Output [3]: [ss_sold_date_sk#1, ss_store_sk#4, sr_returned_date_sk#6]
Input [9]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, sr_returned_date_sk#6, sr_item_sk#7, sr_customer_sk#8, sr_ticket_number#9]

(10) Scan parquet default.store
Output [11]: [s_store_sk#11, s_store_name#12, s_company_id#13, s_street_number#14, s_street_name#15, s_street_type#16, s_suite_number#17, s_city#18, s_county#19, s_state#20, s_zip#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_company_id:int,s_street_number:string,s_street_name:string,s_street_type:string,s_suite_number:string,s_city:string,s_county:string,s_state:string,s_zip:string>

(11) ColumnarToRow [codegen id : 2]
Input [11]: [s_store_sk#11, s_store_name#12, s_company_id#13, s_street_number#14, s_street_name#15, s_street_type#16, s_suite_number#17, s_city#18, s_county#19, s_state#20, s_zip#21]

(12) Filter [codegen id : 2]
Input [11]: [s_store_sk#11, s_store_name#12, s_company_id#13, s_street_number#14, s_street_name#15, s_street_type#16, s_suite_number#17, s_city#18, s_county#19, s_state#20, s_zip#21]
Condition : isnotnull(s_store_sk#11)

(13) Project [codegen id : 2]
Output [11]: [s_store_sk#11, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_store_name#12, 50, false, true) AS s_store_name#22, s_company_id#13, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_street_number#14, 10, false, true) AS s_street_number#23, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_street_name#15, 60, false, true) AS s_street_name#24, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_street_type#16, 15, false, true) AS s_street_type#25, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_suite_number#17, 10, false, true) AS s_suite_number#26, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_city#18, 60, false, true) AS s_city#27, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_county#19, 30, false, true) AS s_county#28, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#20, 2, false, true) AS s_state#29, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_zip#21, 10, false, true) AS s_zip#30]
Input [11]: [s_store_sk#11, s_store_name#12, s_company_id#13, s_street_number#14, s_street_name#15, s_street_type#16, s_suite_number#17, s_city#18, s_county#19, s_state#20, s_zip#21]

(14) BroadcastExchange
Input [11]: [s_store_sk#11, s_store_name#22, s_company_id#13, s_street_number#23, s_street_name#24, s_street_type#25, s_suite_number#26, s_city#27, s_county#28, s_state#29, s_zip#30]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#31]

(15) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [s_store_sk#11]
Join condition: None

(16) Project [codegen id : 5]
Output [12]: [ss_sold_date_sk#1, sr_returned_date_sk#6, s_store_name#22, s_company_id#13, s_street_number#23, s_street_name#24, s_street_type#25, s_suite_number#26, s_city#27, s_county#28, s_state#29, s_zip#30]
Input [14]: [ss_sold_date_sk#1, ss_store_sk#4, sr_returned_date_sk#6, s_store_sk#11, s_store_name#22, s_company_id#13, s_street_number#23, s_street_name#24, s_street_type#25, s_suite_number#26, s_city#27, s_county#28, s_state#29, s_zip#30]

(17) Scan parquet default.date_dim
Output [1]: [d_date_sk#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int>

(18) ColumnarToRow [codegen id : 3]
Input [1]: [d_date_sk#32]

(19) Filter [codegen id : 3]
Input [1]: [d_date_sk#32]
Condition : isnotnull(d_date_sk#32)

(20) BroadcastExchange
Input [1]: [d_date_sk#32]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#33]

(21) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#32]
Join condition: None

(22) Project [codegen id : 5]
Output [12]: [ss_sold_date_sk#1, sr_returned_date_sk#6, s_store_name#22, s_company_id#13, s_street_number#23, s_street_name#24, s_street_type#25, s_suite_number#26, s_city#27, s_county#28, s_state#29, s_zip#30]
Input [13]: [ss_sold_date_sk#1, sr_returned_date_sk#6, s_store_name#22, s_company_id#13, s_street_number#23, s_street_name#24, s_street_type#25, s_suite_number#26, s_city#27, s_county#28, s_state#29, s_zip#30, d_date_sk#32]

(23) Scan parquet default.date_dim
Output [3]: [d_date_sk#34, d_year#35, d_moy#36]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,8), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(24) ColumnarToRow [codegen id : 4]
Input [3]: [d_date_sk#34, d_year#35, d_moy#36]

(25) Filter [codegen id : 4]
Input [3]: [d_date_sk#34, d_year#35, d_moy#36]
Condition : ((((isnotnull(d_year#35) AND isnotnull(d_moy#36)) AND (d_year#35 = 2001)) AND (d_moy#36 = 8)) AND isnotnull(d_date_sk#34))

(26) Project [codegen id : 4]
Output [1]: [d_date_sk#34]
Input [3]: [d_date_sk#34, d_year#35, d_moy#36]

(27) BroadcastExchange
Input [1]: [d_date_sk#34]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#37]

(28) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [sr_returned_date_sk#6]
Right keys [1]: [cast(d_date_sk#34 as bigint)]
Join condition: None

(29) Project [codegen id : 5]
Output [12]: [ss_sold_date_sk#1, sr_returned_date_sk#6, s_store_name#22, s_company_id#13, s_street_number#23, s_street_name#24, s_street_type#25, s_suite_number#26, s_city#27, s_county#28, s_state#29, s_zip#30]
Input [13]: [ss_sold_date_sk#1, sr_returned_date_sk#6, s_store_name#22, s_company_id#13, s_street_number#23, s_street_name#24, s_street_type#25, s_suite_number#26, s_city#27, s_county#28, s_state#29, s_zip#30, d_date_sk#34]

(30) HashAggregate [codegen id : 5]
Input [12]: [ss_sold_date_sk#1, sr_returned_date_sk#6, s_store_name#22, s_company_id#13, s_street_number#23, s_street_name#24, s_street_type#25, s_suite_number#26, s_city#27, s_county#28, s_state#29, s_zip#30]
Keys [10]: [s_store_name#22, s_company_id#13, s_street_number#23, s_street_name#24, s_street_type#25, s_suite_number#26, s_city#27, s_county#28, s_state#29, s_zip#30]
Functions [5]: [partial_sum(CASE WHEN ((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) <= 30) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) > 30) AND ((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) <= 60)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) > 60) AND ((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) <= 90)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) > 90) AND ((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) <= 120)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN ((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) > 120) THEN 1 ELSE 0 END)]
Aggregate Attributes [5]: [sum#38, sum#39, sum#40, sum#41, sum#42]
Results [15]: [s_store_name#22, s_company_id#13, s_street_number#23, s_street_name#24, s_street_type#25, s_suite_number#26, s_city#27, s_county#28, s_state#29, s_zip#30, sum#43, sum#44, sum#45, sum#46, sum#47]

(31) Exchange
Input [15]: [s_store_name#22, s_company_id#13, s_street_number#23, s_street_name#24, s_street_type#25, s_suite_number#26, s_city#27, s_county#28, s_state#29, s_zip#30, sum#43, sum#44, sum#45, sum#46, sum#47]
Arguments: hashpartitioning(s_store_name#22, s_company_id#13, s_street_number#23, s_street_name#24, s_street_type#25, s_suite_number#26, s_city#27, s_county#28, s_state#29, s_zip#30, 5), ENSURE_REQUIREMENTS, [id=#48]

(32) HashAggregate [codegen id : 6]
Input [15]: [s_store_name#22, s_company_id#13, s_street_number#23, s_street_name#24, s_street_type#25, s_suite_number#26, s_city#27, s_county#28, s_state#29, s_zip#30, sum#43, sum#44, sum#45, sum#46, sum#47]
Keys [10]: [s_store_name#22, s_company_id#13, s_street_number#23, s_street_name#24, s_street_type#25, s_suite_number#26, s_city#27, s_county#28, s_state#29, s_zip#30]
Functions [5]: [sum(CASE WHEN ((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) <= 30) THEN 1 ELSE 0 END), sum(CASE WHEN (((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) > 30) AND ((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) <= 60)) THEN 1 ELSE 0 END), sum(CASE WHEN (((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) > 60) AND ((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) <= 90)) THEN 1 ELSE 0 END), sum(CASE WHEN (((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) > 90) AND ((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) <= 120)) THEN 1 ELSE 0 END), sum(CASE WHEN ((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) > 120) THEN 1 ELSE 0 END)]
Aggregate Attributes [5]: [sum(CASE WHEN ((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) <= 30) THEN 1 ELSE 0 END)#49, sum(CASE WHEN (((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) > 30) AND ((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) <= 60)) THEN 1 ELSE 0 END)#50, sum(CASE WHEN (((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) > 60) AND ((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) <= 90)) THEN 1 ELSE 0 END)#51, sum(CASE WHEN (((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) > 90) AND ((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) <= 120)) THEN 1 ELSE 0 END)#52, sum(CASE WHEN ((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) > 120) THEN 1 ELSE 0 END)#53]
Results [15]: [s_store_name#22, s_company_id#13, s_street_number#23, s_street_name#24, s_street_type#25, s_suite_number#26, s_city#27, s_county#28, s_state#29, s_zip#30, sum(CASE WHEN ((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) <= 30) THEN 1 ELSE 0 END)#49 AS 30 days #54, sum(CASE WHEN (((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) > 30) AND ((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) <= 60)) THEN 1 ELSE 0 END)#50 AS 31 - 60 days #55, sum(CASE WHEN (((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) > 60) AND ((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) <= 90)) THEN 1 ELSE 0 END)#51 AS 61 - 90 days #56, sum(CASE WHEN (((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) > 90) AND ((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) <= 120)) THEN 1 ELSE 0 END)#52 AS 91 - 120 days #57, sum(CASE WHEN ((sr_returned_date_sk#6 - cast(ss_sold_date_sk#1 as bigint)) > 120) THEN 1 ELSE 0 END)#53 AS >120 days #58]

(33) TakeOrderedAndProject
Input [15]: [s_store_name#22, s_company_id#13, s_street_number#23, s_street_name#24, s_street_type#25, s_suite_number#26, s_city#27, s_county#28, s_state#29, s_zip#30, 30 days #54, 31 - 60 days #55, 61 - 90 days #56, 91 - 120 days #57, >120 days #58]
Arguments: 100, [s_store_name#22 ASC NULLS FIRST, s_company_id#13 ASC NULLS FIRST, s_street_number#23 ASC NULLS FIRST, s_street_name#24 ASC NULLS FIRST, s_street_type#25 ASC NULLS FIRST, s_suite_number#26 ASC NULLS FIRST, s_city#27 ASC NULLS FIRST, s_county#28 ASC NULLS FIRST, s_state#29 ASC NULLS FIRST, s_zip#30 ASC NULLS FIRST], [s_store_name#22, s_company_id#13, s_street_number#23, s_street_name#24, s_street_type#25, s_suite_number#26, s_city#27, s_county#28, s_state#29, s_zip#30, 30 days #54, 31 - 60 days #55, 61 - 90 days #56, 91 - 120 days #57, >120 days #58]

