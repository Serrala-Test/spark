== Physical Plan ==
TakeOrderedAndProject (49)
+- * Project (48)
   +- Window (47)
      +- * Sort (46)
         +- Exchange (45)
            +- * HashAggregate (44)
               +- Exchange (43)
                  +- * HashAggregate (42)
                     +- * Expand (41)
                        +- * Project (40)
                           +- * BroadcastHashJoin Inner BuildRight (39)
                              :- * Project (10)
                              :  +- * BroadcastHashJoin Inner BuildRight (9)
                              :     :- * Filter (3)
                              :     :  +- * ColumnarToRow (2)
                              :     :     +- Scan parquet default.store_sales (1)
                              :     +- BroadcastExchange (8)
                              :        +- * Project (7)
                              :           +- * Filter (6)
                              :              +- * ColumnarToRow (5)
                              :                 +- Scan parquet default.date_dim (4)
                              +- BroadcastExchange (38)
                                 +- * Project (37)
                                    +- * BroadcastHashJoin LeftSemi BuildRight (36)
                                       :- * Filter (13)
                                       :  +- * ColumnarToRow (12)
                                       :     +- Scan parquet default.store (11)
                                       +- BroadcastExchange (35)
                                          +- * Project (34)
                                             +- * Filter (33)
                                                +- Window (32)
                                                   +- * Sort (31)
                                                      +- Exchange (30)
                                                         +- * HashAggregate (29)
                                                            +- Exchange (28)
                                                               +- * HashAggregate (27)
                                                                  +- * Project (26)
                                                                     +- * BroadcastHashJoin Inner BuildRight (25)
                                                                        :- * Project (23)
                                                                        :  +- * BroadcastHashJoin Inner BuildRight (22)
                                                                        :     :- * Filter (16)
                                                                        :     :  +- * ColumnarToRow (15)
                                                                        :     :     +- Scan parquet default.store_sales (14)
                                                                        :     +- BroadcastExchange (21)
                                                                        :        +- * Project (20)
                                                                        :           +- * Filter (19)
                                                                        :              +- * ColumnarToRow (18)
                                                                        :                 +- Scan parquet default.store (17)
                                                                        +- ReusedExchange (24)


(1) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 9]
Input [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]

(3) Filter [codegen id : 9]
Input [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
Condition : (isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_store_sk#2))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#4, d_month_seq#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#4, d_month_seq#5]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#4, d_month_seq#5]
Condition : (((isnotnull(d_month_seq#5) AND (d_month_seq#5 >= 1200)) AND (d_month_seq#5 <= 1211)) AND isnotnull(d_date_sk#4))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#4]
Input [2]: [d_date_sk#4, d_month_seq#5]

(8) BroadcastExchange
Input [1]: [d_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#6]

(9) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#4]
Join condition: None

(10) Project [codegen id : 9]
Output [2]: [ss_store_sk#2, ss_net_profit#3]
Input [4]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3, d_date_sk#4]

(11) Scan parquet default.store
Output [3]: [s_store_sk#7, s_county#8, s_state#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_county:string,s_state:string>

(12) ColumnarToRow [codegen id : 8]
Input [3]: [s_store_sk#7, s_county#8, s_state#9]

(13) Filter [codegen id : 8]
Input [3]: [s_store_sk#7, s_county#8, s_state#9]
Condition : isnotnull(s_store_sk#7)

(14) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>

(15) ColumnarToRow [codegen id : 4]
Input [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]

(16) Filter [codegen id : 4]
Input [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
Condition : (isnotnull(ss_store_sk#2) AND isnotnull(ss_sold_date_sk#1))

(17) Scan parquet default.store
Output [2]: [s_store_sk#7, s_state#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(18) ColumnarToRow [codegen id : 2]
Input [2]: [s_store_sk#7, s_state#9]

(19) Filter [codegen id : 2]
Input [2]: [s_store_sk#7, s_state#9]
Condition : isnotnull(s_store_sk#7)

(20) Project [codegen id : 2]
Output [2]: [s_store_sk#7, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#9, 2, false, true) AS s_state#10]
Input [2]: [s_store_sk#7, s_state#9]

(21) BroadcastExchange
Input [2]: [s_store_sk#7, s_state#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#11]

(22) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#7]
Join condition: None

(23) Project [codegen id : 4]
Output [3]: [ss_sold_date_sk#1, ss_net_profit#3, s_state#10]
Input [5]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3, s_store_sk#7, s_state#10]

(24) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#4]

(25) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#4]
Join condition: None

(26) Project [codegen id : 4]
Output [2]: [ss_net_profit#3, s_state#10]
Input [4]: [ss_sold_date_sk#1, ss_net_profit#3, s_state#10, d_date_sk#4]

(27) HashAggregate [codegen id : 4]
Input [2]: [ss_net_profit#3, s_state#10]
Keys [1]: [s_state#10]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum#12]
Results [2]: [s_state#10, sum#13]

(28) Exchange
Input [2]: [s_state#10, sum#13]
Arguments: hashpartitioning(s_state#10, 5), ENSURE_REQUIREMENTS, [id=#14]

(29) HashAggregate [codegen id : 5]
Input [2]: [s_state#10, sum#13]
Keys [1]: [s_state#10]
Functions [1]: [sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#3))#15]
Results [3]: [s_state#10 AS s_state#16, s_state#10, MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#15,17,2) AS _w2#17]

(30) Exchange
Input [3]: [s_state#16, s_state#10, _w2#17]
Arguments: hashpartitioning(s_state#10, 5), ENSURE_REQUIREMENTS, [id=#18]

(31) Sort [codegen id : 6]
Input [3]: [s_state#16, s_state#10, _w2#17]
Arguments: [s_state#10 ASC NULLS FIRST, _w2#17 DESC NULLS LAST], false, 0

(32) Window
Input [3]: [s_state#16, s_state#10, _w2#17]
Arguments: [rank(_w2#17) windowspecdefinition(s_state#10, _w2#17 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#19], [s_state#10], [_w2#17 DESC NULLS LAST]

(33) Filter [codegen id : 7]
Input [4]: [s_state#16, s_state#10, _w2#17, ranking#19]
Condition : (isnotnull(ranking#19) AND (ranking#19 <= 5))

(34) Project [codegen id : 7]
Output [1]: [s_state#16]
Input [4]: [s_state#16, s_state#10, _w2#17, ranking#19]

(35) BroadcastExchange
Input [1]: [s_state#16]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#20]

(36) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#9, 2, false, true)]
Right keys [1]: [s_state#16]
Join condition: None

(37) Project [codegen id : 8]
Output [3]: [s_store_sk#7, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_county#8, 30, false, true) AS s_county#21, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#9, 2, false, true) AS s_state#22]
Input [3]: [s_store_sk#7, s_county#8, s_state#9]

(38) BroadcastExchange
Input [3]: [s_store_sk#7, s_county#21, s_state#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#23]

(39) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#7]
Join condition: None

(40) Project [codegen id : 9]
Output [3]: [ss_net_profit#3, s_state#22 AS s_state#24, s_county#21 AS s_county#25]
Input [5]: [ss_store_sk#2, ss_net_profit#3, s_store_sk#7, s_county#21, s_state#22]

(41) Expand [codegen id : 9]
Input [3]: [ss_net_profit#3, s_state#24, s_county#25]
Arguments: [List(ss_net_profit#3, s_state#24, s_county#25, 0), List(ss_net_profit#3, s_state#24, null, 1), List(ss_net_profit#3, null, null, 3)], [ss_net_profit#3, s_state#26, s_county#27, spark_grouping_id#28]

(42) HashAggregate [codegen id : 9]
Input [4]: [ss_net_profit#3, s_state#26, s_county#27, spark_grouping_id#28]
Keys [3]: [s_state#26, s_county#27, spark_grouping_id#28]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum#29]
Results [4]: [s_state#26, s_county#27, spark_grouping_id#28, sum#30]

(43) Exchange
Input [4]: [s_state#26, s_county#27, spark_grouping_id#28, sum#30]
Arguments: hashpartitioning(s_state#26, s_county#27, spark_grouping_id#28, 5), ENSURE_REQUIREMENTS, [id=#31]

(44) HashAggregate [codegen id : 10]
Input [4]: [s_state#26, s_county#27, spark_grouping_id#28, sum#30]
Keys [3]: [s_state#26, s_county#27, spark_grouping_id#28]
Functions [1]: [sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#3))#32]
Results [7]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#32,17,2) AS total_sum#33, s_state#26, s_county#27, (cast((shiftright(spark_grouping_id#28, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#28, 0) & 1) as tinyint)) AS lochierarchy#34, (cast((shiftright(spark_grouping_id#28, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#28, 0) & 1) as tinyint)) AS _w1#35, CASE WHEN (cast((shiftright(spark_grouping_id#28, 0) & 1) as tinyint) = 0) THEN s_state#26 END AS _w2#36, MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#32,17,2) AS _w3#37]

(45) Exchange
Input [7]: [total_sum#33, s_state#26, s_county#27, lochierarchy#34, _w1#35, _w2#36, _w3#37]
Arguments: hashpartitioning(_w1#35, _w2#36, 5), ENSURE_REQUIREMENTS, [id=#38]

(46) Sort [codegen id : 11]
Input [7]: [total_sum#33, s_state#26, s_county#27, lochierarchy#34, _w1#35, _w2#36, _w3#37]
Arguments: [_w1#35 ASC NULLS FIRST, _w2#36 ASC NULLS FIRST, _w3#37 DESC NULLS LAST], false, 0

(47) Window
Input [7]: [total_sum#33, s_state#26, s_county#27, lochierarchy#34, _w1#35, _w2#36, _w3#37]
Arguments: [rank(_w3#37) windowspecdefinition(_w1#35, _w2#36, _w3#37 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#39], [_w1#35, _w2#36], [_w3#37 DESC NULLS LAST]

(48) Project [codegen id : 12]
Output [5]: [total_sum#33, s_state#26, s_county#27, lochierarchy#34, rank_within_parent#39]
Input [8]: [total_sum#33, s_state#26, s_county#27, lochierarchy#34, _w1#35, _w2#36, _w3#37, rank_within_parent#39]

(49) TakeOrderedAndProject
Input [5]: [total_sum#33, s_state#26, s_county#27, lochierarchy#34, rank_within_parent#39]
Arguments: 100, [lochierarchy#34 DESC NULLS LAST, CASE WHEN (lochierarchy#34 = 0) THEN s_state#26 END ASC NULLS FIRST, rank_within_parent#39 ASC NULLS FIRST], [total_sum#33, s_state#26, s_county#27, lochierarchy#34, rank_within_parent#39]

