== Physical Plan ==
TakeOrderedAndProject (55)
+- * Project (54)
   +- * BroadcastHashJoin Inner BuildRight (53)
      :- * Project (47)
      :  +- * BroadcastHashJoin Inner BuildRight (46)
      :     :- * Project (40)
      :     :  +- * BroadcastHashJoin Inner BuildRight (39)
      :     :     :- * Filter (21)
      :     :     :  +- * HashAggregate (20)
      :     :     :     +- Exchange (19)
      :     :     :        +- * HashAggregate (18)
      :     :     :           +- * Project (17)
      :     :     :              +- * BroadcastHashJoin Inner BuildRight (16)
      :     :     :                 :- * Project (10)
      :     :     :                 :  +- * BroadcastHashJoin Inner BuildRight (9)
      :     :     :                 :     :- * Filter (3)
      :     :     :                 :     :  +- * ColumnarToRow (2)
      :     :     :                 :     :     +- Scan parquet default.catalog_returns (1)
      :     :     :                 :     +- BroadcastExchange (8)
      :     :     :                 :        +- * Project (7)
      :     :     :                 :           +- * Filter (6)
      :     :     :                 :              +- * ColumnarToRow (5)
      :     :     :                 :                 +- Scan parquet default.date_dim (4)
      :     :     :                 +- BroadcastExchange (15)
      :     :     :                    +- * Project (14)
      :     :     :                       +- * Filter (13)
      :     :     :                          +- * ColumnarToRow (12)
      :     :     :                             +- Scan parquet default.customer_address (11)
      :     :     +- BroadcastExchange (38)
      :     :        +- * Filter (37)
      :     :           +- * HashAggregate (36)
      :     :              +- Exchange (35)
      :     :                 +- * HashAggregate (34)
      :     :                    +- * HashAggregate (33)
      :     :                       +- Exchange (32)
      :     :                          +- * HashAggregate (31)
      :     :                             +- * Project (30)
      :     :                                +- * BroadcastHashJoin Inner BuildRight (29)
      :     :                                   :- * Project (27)
      :     :                                   :  +- * BroadcastHashJoin Inner BuildRight (26)
      :     :                                   :     :- * Filter (24)
      :     :                                   :     :  +- * ColumnarToRow (23)
      :     :                                   :     :     +- Scan parquet default.catalog_returns (22)
      :     :                                   :     +- ReusedExchange (25)
      :     :                                   +- ReusedExchange (28)
      :     +- BroadcastExchange (45)
      :        +- * Project (44)
      :           +- * Filter (43)
      :              +- * ColumnarToRow (42)
      :                 +- Scan parquet default.customer (41)
      +- BroadcastExchange (52)
         +- * Project (51)
            +- * Filter (50)
               +- * ColumnarToRow (49)
                  +- Scan parquet default.customer_address (48)


(1) Scan parquet default.catalog_returns
Output [4]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_returned_date_sk), IsNotNull(cr_returning_addr_sk), IsNotNull(cr_returning_customer_sk)]
ReadSchema: struct<cr_returned_date_sk:int,cr_returning_customer_sk:int,cr_returning_addr_sk:int,cr_return_amt_inc_tax:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [4]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]

(3) Filter [codegen id : 3]
Input [4]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]
Condition : ((isnotnull(cr_returned_date_sk#1) AND isnotnull(cr_returning_addr_sk#3)) AND isnotnull(cr_returning_customer_sk#2))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#5, d_year#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#5, d_year#6]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#5, d_year#6]
Condition : ((isnotnull(d_year#6) AND (d_year#6 = 2000)) AND isnotnull(d_date_sk#5))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#5]
Input [2]: [d_date_sk#5, d_year#6]

(8) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#7]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cr_returned_date_sk#1]
Right keys [1]: [d_date_sk#5]
Join condition: None

(10) Project [codegen id : 3]
Output [3]: [cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]
Input [5]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4, d_date_sk#5]

(11) Scan parquet default.customer_address
Output [2]: [ca_address_sk#8, ca_state#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [ca_address_sk#8, ca_state#9]

(13) Filter [codegen id : 2]
Input [2]: [ca_address_sk#8, ca_state#9]
Condition : (isnotnull(ca_address_sk#8) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#9, 2, false, true)))

(14) Project [codegen id : 2]
Output [2]: [ca_address_sk#8, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#9, 2, false, true) AS ca_state#10]
Input [2]: [ca_address_sk#8, ca_state#9]

(15) BroadcastExchange
Input [2]: [ca_address_sk#8, ca_state#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#11]

(16) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cr_returning_addr_sk#3]
Right keys [1]: [ca_address_sk#8]
Join condition: None

(17) Project [codegen id : 3]
Output [3]: [cr_returning_customer_sk#2, cr_return_amt_inc_tax#4, ca_state#10]
Input [5]: [cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4, ca_address_sk#8, ca_state#10]

(18) HashAggregate [codegen id : 3]
Input [3]: [cr_returning_customer_sk#2, cr_return_amt_inc_tax#4, ca_state#10]
Keys [2]: [cr_returning_customer_sk#2, ca_state#10]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#4))]
Aggregate Attributes [1]: [sum#12]
Results [3]: [cr_returning_customer_sk#2, ca_state#10, sum#13]

(19) Exchange
Input [3]: [cr_returning_customer_sk#2, ca_state#10, sum#13]
Arguments: hashpartitioning(cr_returning_customer_sk#2, ca_state#10, 5), ENSURE_REQUIREMENTS, [id=#14]

(20) HashAggregate [codegen id : 11]
Input [3]: [cr_returning_customer_sk#2, ca_state#10, sum#13]
Keys [2]: [cr_returning_customer_sk#2, ca_state#10]
Functions [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#4))]
Aggregate Attributes [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#4))#15]
Results [3]: [cr_returning_customer_sk#2 AS ctr_customer_sk#16, ca_state#10 AS ctr_state#17, MakeDecimal(sum(UnscaledValue(cr_return_amt_inc_tax#4))#15,17,2) AS ctr_total_return#18]

(21) Filter [codegen id : 11]
Input [3]: [ctr_customer_sk#16, ctr_state#17, ctr_total_return#18]
Condition : isnotnull(ctr_total_return#18)

(22) Scan parquet default.catalog_returns
Output [4]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_returned_date_sk), IsNotNull(cr_returning_addr_sk)]
ReadSchema: struct<cr_returned_date_sk:int,cr_returning_customer_sk:int,cr_returning_addr_sk:int,cr_return_amt_inc_tax:decimal(7,2)>

(23) ColumnarToRow [codegen id : 6]
Input [4]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]

(24) Filter [codegen id : 6]
Input [4]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]
Condition : (isnotnull(cr_returned_date_sk#1) AND isnotnull(cr_returning_addr_sk#3))

(25) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#5]

(26) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cr_returned_date_sk#1]
Right keys [1]: [d_date_sk#5]
Join condition: None

(27) Project [codegen id : 6]
Output [3]: [cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4]
Input [5]: [cr_returned_date_sk#1, cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4, d_date_sk#5]

(28) ReusedExchange [Reuses operator id: 15]
Output [2]: [ca_address_sk#8, ca_state#19]

(29) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cr_returning_addr_sk#3]
Right keys [1]: [ca_address_sk#8]
Join condition: None

(30) Project [codegen id : 6]
Output [3]: [cr_returning_customer_sk#2, cr_return_amt_inc_tax#4, ca_state#19]
Input [5]: [cr_returning_customer_sk#2, cr_returning_addr_sk#3, cr_return_amt_inc_tax#4, ca_address_sk#8, ca_state#19]

(31) HashAggregate [codegen id : 6]
Input [3]: [cr_returning_customer_sk#2, cr_return_amt_inc_tax#4, ca_state#19]
Keys [2]: [cr_returning_customer_sk#2, ca_state#19]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#4))]
Aggregate Attributes [1]: [sum#20]
Results [3]: [cr_returning_customer_sk#2, ca_state#19, sum#21]

(32) Exchange
Input [3]: [cr_returning_customer_sk#2, ca_state#19, sum#21]
Arguments: hashpartitioning(cr_returning_customer_sk#2, ca_state#19, 5), ENSURE_REQUIREMENTS, [id=#22]

(33) HashAggregate [codegen id : 7]
Input [3]: [cr_returning_customer_sk#2, ca_state#19, sum#21]
Keys [2]: [cr_returning_customer_sk#2, ca_state#19]
Functions [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#4))]
Aggregate Attributes [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#4))#23]
Results [2]: [ca_state#19 AS ctr_state#17, MakeDecimal(sum(UnscaledValue(cr_return_amt_inc_tax#4))#23,17,2) AS ctr_total_return#18]

(34) HashAggregate [codegen id : 7]
Input [2]: [ctr_state#17, ctr_total_return#18]
Keys [1]: [ctr_state#17]
Functions [1]: [partial_avg(ctr_total_return#18)]
Aggregate Attributes [2]: [sum#24, count#25]
Results [3]: [ctr_state#17, sum#26, count#27]

(35) Exchange
Input [3]: [ctr_state#17, sum#26, count#27]
Arguments: hashpartitioning(ctr_state#17, 5), ENSURE_REQUIREMENTS, [id=#28]

(36) HashAggregate [codegen id : 8]
Input [3]: [ctr_state#17, sum#26, count#27]
Keys [1]: [ctr_state#17]
Functions [1]: [avg(ctr_total_return#18)]
Aggregate Attributes [1]: [avg(ctr_total_return#18)#29]
Results [2]: [CheckOverflow((promote_precision(avg(ctr_total_return#18)#29) * 1.200000), DecimalType(24,7), true) AS (avg(ctr_total_return) * 1.2)#30, ctr_state#17 AS ctr_state#17#31]

(37) Filter [codegen id : 8]
Input [2]: [(avg(ctr_total_return) * 1.2)#30, ctr_state#17#31]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#30)

(38) BroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#30, ctr_state#17#31]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true]),false), [id=#32]

(39) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ctr_state#17]
Right keys [1]: [ctr_state#17#31]
Join condition: (cast(ctr_total_return#18 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#30)

(40) Project [codegen id : 11]
Output [2]: [ctr_customer_sk#16, ctr_total_return#18]
Input [5]: [ctr_customer_sk#16, ctr_state#17, ctr_total_return#18, (avg(ctr_total_return) * 1.2)#30, ctr_state#17#31]

(41) Scan parquet default.customer
Output [6]: [c_customer_sk#33, c_customer_id#34, c_current_addr_sk#35, c_salutation#36, c_first_name#37, c_last_name#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_addr_sk:int,c_salutation:string,c_first_name:string,c_last_name:string>

(42) ColumnarToRow [codegen id : 9]
Input [6]: [c_customer_sk#33, c_customer_id#34, c_current_addr_sk#35, c_salutation#36, c_first_name#37, c_last_name#38]

(43) Filter [codegen id : 9]
Input [6]: [c_customer_sk#33, c_customer_id#34, c_current_addr_sk#35, c_salutation#36, c_first_name#37, c_last_name#38]
Condition : (isnotnull(c_customer_sk#33) AND isnotnull(c_current_addr_sk#35))

(44) Project [codegen id : 9]
Output [6]: [c_customer_sk#33, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#34, 16, false, true) AS c_customer_id#39, c_current_addr_sk#35, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_salutation#36, 10, false, true) AS c_salutation#40, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#37, 20, false, true) AS c_first_name#41, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#38, 30, false, true) AS c_last_name#42]
Input [6]: [c_customer_sk#33, c_customer_id#34, c_current_addr_sk#35, c_salutation#36, c_first_name#37, c_last_name#38]

(45) BroadcastExchange
Input [6]: [c_customer_sk#33, c_customer_id#39, c_current_addr_sk#35, c_salutation#40, c_first_name#41, c_last_name#42]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#43]

(46) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ctr_customer_sk#16]
Right keys [1]: [c_customer_sk#33]
Join condition: None

(47) Project [codegen id : 11]
Output [6]: [ctr_total_return#18, c_customer_id#39, c_current_addr_sk#35, c_salutation#40, c_first_name#41, c_last_name#42]
Input [8]: [ctr_customer_sk#16, ctr_total_return#18, c_customer_sk#33, c_customer_id#39, c_current_addr_sk#35, c_salutation#40, c_first_name#41, c_last_name#42]

(48) Scan parquet default.customer_address
Output [12]: [ca_address_sk#8, ca_street_number#44, ca_street_name#45, ca_street_type#46, ca_suite_number#47, ca_city#48, ca_county#49, ca_state#9, ca_zip#50, ca_country#51, ca_gmt_offset#52, ca_location_type#53]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_suite_number:string,ca_city:string,ca_county:string,ca_state:string,ca_zip:string,ca_country:string,ca_gmt_offset:decimal(5,2),ca_location_type:string>

(49) ColumnarToRow [codegen id : 10]
Input [12]: [ca_address_sk#8, ca_street_number#44, ca_street_name#45, ca_street_type#46, ca_suite_number#47, ca_city#48, ca_county#49, ca_state#9, ca_zip#50, ca_country#51, ca_gmt_offset#52, ca_location_type#53]

(50) Filter [codegen id : 10]
Input [12]: [ca_address_sk#8, ca_street_number#44, ca_street_name#45, ca_street_type#46, ca_suite_number#47, ca_city#48, ca_county#49, ca_state#9, ca_zip#50, ca_country#51, ca_gmt_offset#52, ca_location_type#53]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#9, 2, false, true) = GA) AND isnotnull(ca_address_sk#8))

(51) Project [codegen id : 10]
Output [12]: [ca_address_sk#8, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_street_number#44, 10, false, true) AS ca_street_number#54, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_street_name#45, 60, false, true) AS ca_street_name#55, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_street_type#46, 15, false, true) AS ca_street_type#56, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_suite_number#47, 10, false, true) AS ca_suite_number#57, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_city#48, 60, false, true) AS ca_city#58, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_county#49, 30, false, true) AS ca_county#59, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#9, 2, false, true) AS ca_state#60, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_zip#50, 10, false, true) AS ca_zip#61, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_country#51, 20, false, true) AS ca_country#62, ca_gmt_offset#52, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_location_type#53, 20, false, true) AS ca_location_type#63]
Input [12]: [ca_address_sk#8, ca_street_number#44, ca_street_name#45, ca_street_type#46, ca_suite_number#47, ca_city#48, ca_county#49, ca_state#9, ca_zip#50, ca_country#51, ca_gmt_offset#52, ca_location_type#53]

(52) BroadcastExchange
Input [12]: [ca_address_sk#8, ca_street_number#54, ca_street_name#55, ca_street_type#56, ca_suite_number#57, ca_city#58, ca_county#59, ca_state#60, ca_zip#61, ca_country#62, ca_gmt_offset#52, ca_location_type#63]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#64]

(53) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [c_current_addr_sk#35]
Right keys [1]: [ca_address_sk#8]
Join condition: None

(54) Project [codegen id : 11]
Output [16]: [c_customer_id#39, c_salutation#40, c_first_name#41, c_last_name#42, ca_street_number#54, ca_street_name#55, ca_street_type#56, ca_suite_number#57, ca_city#58, ca_county#59, ca_state#60, ca_zip#61, ca_country#62, ca_gmt_offset#52, ca_location_type#63, ctr_total_return#18]
Input [18]: [ctr_total_return#18, c_customer_id#39, c_current_addr_sk#35, c_salutation#40, c_first_name#41, c_last_name#42, ca_address_sk#8, ca_street_number#54, ca_street_name#55, ca_street_type#56, ca_suite_number#57, ca_city#58, ca_county#59, ca_state#60, ca_zip#61, ca_country#62, ca_gmt_offset#52, ca_location_type#63]

(55) TakeOrderedAndProject
Input [16]: [c_customer_id#39, c_salutation#40, c_first_name#41, c_last_name#42, ca_street_number#54, ca_street_name#55, ca_street_type#56, ca_suite_number#57, ca_city#58, ca_county#59, ca_state#60, ca_zip#61, ca_country#62, ca_gmt_offset#52, ca_location_type#63, ctr_total_return#18]
Arguments: 100, [c_customer_id#39 ASC NULLS FIRST, c_salutation#40 ASC NULLS FIRST, c_first_name#41 ASC NULLS FIRST, c_last_name#42 ASC NULLS FIRST, ca_street_number#54 ASC NULLS FIRST, ca_street_name#55 ASC NULLS FIRST, ca_street_type#56 ASC NULLS FIRST, ca_suite_number#57 ASC NULLS FIRST, ca_city#58 ASC NULLS FIRST, ca_county#59 ASC NULLS FIRST, ca_state#60 ASC NULLS FIRST, ca_zip#61 ASC NULLS FIRST, ca_country#62 ASC NULLS FIRST, ca_gmt_offset#52 ASC NULLS FIRST, ca_location_type#63 ASC NULLS FIRST, ctr_total_return#18 ASC NULLS FIRST], [c_customer_id#39, c_salutation#40, c_first_name#41, c_last_name#42, ca_street_number#54, ca_street_name#55, ca_street_type#56, ca_suite_number#57, ca_city#58, ca_county#59, ca_state#60, ca_zip#61, ca_country#62, ca_gmt_offset#52, ca_location_type#63, ctr_total_return#18]

