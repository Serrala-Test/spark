== Physical Plan ==
TakeOrderedAndProject (47)
+- * HashAggregate (46)
   +- Exchange (45)
      +- * HashAggregate (44)
         +- * Project (43)
            +- * BroadcastHashJoin Inner BuildRight (42)
               :- * Project (37)
               :  +- * BroadcastHashJoin Inner BuildRight (36)
               :     :- * Project (31)
               :     :  +- * Filter (30)
               :     :     +- * BroadcastHashJoin ExistenceJoin(exists#1) BuildRight (29)
               :     :        :- * BroadcastHashJoin ExistenceJoin(exists#2) BuildRight (22)
               :     :        :  :- * BroadcastHashJoin LeftSemi BuildRight (15)
               :     :        :  :  :- * Filter (3)
               :     :        :  :  :  +- * ColumnarToRow (2)
               :     :        :  :  :     +- Scan parquet default.customer (1)
               :     :        :  :  +- BroadcastExchange (14)
               :     :        :  :     +- * Project (13)
               :     :        :  :        +- * BroadcastHashJoin Inner BuildRight (12)
               :     :        :  :           :- * Filter (6)
               :     :        :  :           :  +- * ColumnarToRow (5)
               :     :        :  :           :     +- Scan parquet default.store_sales (4)
               :     :        :  :           +- BroadcastExchange (11)
               :     :        :  :              +- * Project (10)
               :     :        :  :                 +- * Filter (9)
               :     :        :  :                    +- * ColumnarToRow (8)
               :     :        :  :                       +- Scan parquet default.date_dim (7)
               :     :        :  +- BroadcastExchange (21)
               :     :        :     +- * Project (20)
               :     :        :        +- * BroadcastHashJoin Inner BuildRight (19)
               :     :        :           :- * ColumnarToRow (17)
               :     :        :           :  +- Scan parquet default.web_sales (16)
               :     :        :           +- ReusedExchange (18)
               :     :        +- BroadcastExchange (28)
               :     :           +- * Project (27)
               :     :              +- * BroadcastHashJoin Inner BuildRight (26)
               :     :                 :- * ColumnarToRow (24)
               :     :                 :  +- Scan parquet default.catalog_sales (23)
               :     :                 +- ReusedExchange (25)
               :     +- BroadcastExchange (35)
               :        +- * Filter (34)
               :           +- * ColumnarToRow (33)
               :              +- Scan parquet default.customer_address (32)
               +- BroadcastExchange (41)
                  +- * Filter (40)
                     +- * ColumnarToRow (39)
                        +- Scan parquet default.customer_demographics (38)


(1) Scan parquet default.customer
Output [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 9]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]

(3) Filter [codegen id : 9]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Condition : ((isnotnull(c_current_addr_sk#5) AND isnotnull(c_current_cdemo_sk#4)) AND isnotnull(c_customer_sk#3))

(4) Scan parquet default.store_sales
Output [2]: [ss_customer_sk#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int>

(5) ColumnarToRow [codegen id : 2]
Input [2]: [ss_customer_sk#6, ss_sold_date_sk#7]

(6) Filter [codegen id : 2]
Input [2]: [ss_customer_sk#6, ss_sold_date_sk#7]
Condition : isnotnull(ss_customer_sk#6)

(7) Scan parquet default.date_dim
Output [3]: [d_date_sk#9, d_year#10, d_qoy#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_qoy), EqualTo(d_year,2002), LessThan(d_qoy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(8) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#9, d_year#10, d_qoy#11]

(9) Filter [codegen id : 1]
Input [3]: [d_date_sk#9, d_year#10, d_qoy#11]
Condition : ((((isnotnull(d_year#10) AND isnotnull(d_qoy#11)) AND (d_year#10 = 2002)) AND (d_qoy#11 < 4)) AND isnotnull(d_date_sk#9))

(10) Project [codegen id : 1]
Output [1]: [d_date_sk#9]
Input [3]: [d_date_sk#9, d_year#10, d_qoy#11]

(11) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(12) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#9]
Join condition: None

(13) Project [codegen id : 2]
Output [1]: [ss_customer_sk#6]
Input [3]: [ss_customer_sk#6, ss_sold_date_sk#7, d_date_sk#9]

(14) BroadcastExchange
Input [1]: [ss_customer_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13]

(15) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ss_customer_sk#6]
Join condition: None

(16) Scan parquet default.web_sales
Output [2]: [ws_bill_customer_sk#14, ws_sold_date_sk#15]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#15), dynamicpruningexpression(ws_sold_date_sk#15 IN dynamicpruning#8)]
ReadSchema: struct<ws_bill_customer_sk:int>

(17) ColumnarToRow [codegen id : 4]
Input [2]: [ws_bill_customer_sk#14, ws_sold_date_sk#15]

(18) ReusedExchange [Reuses operator id: 11]
Output [1]: [d_date_sk#9]

(19) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ws_sold_date_sk#15]
Right keys [1]: [d_date_sk#9]
Join condition: None

(20) Project [codegen id : 4]
Output [1]: [ws_bill_customer_sk#14]
Input [3]: [ws_bill_customer_sk#14, ws_sold_date_sk#15, d_date_sk#9]

(21) BroadcastExchange
Input [1]: [ws_bill_customer_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(22) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ws_bill_customer_sk#14]
Join condition: None

(23) Scan parquet default.catalog_sales
Output [2]: [cs_ship_customer_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(cs_sold_date_sk#18 IN dynamicpruning#8)]
ReadSchema: struct<cs_ship_customer_sk:int>

(24) ColumnarToRow [codegen id : 6]
Input [2]: [cs_ship_customer_sk#17, cs_sold_date_sk#18]

(25) ReusedExchange [Reuses operator id: 11]
Output [1]: [d_date_sk#9]

(26) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#9]
Join condition: None

(27) Project [codegen id : 6]
Output [1]: [cs_ship_customer_sk#17]
Input [3]: [cs_ship_customer_sk#17, cs_sold_date_sk#18, d_date_sk#9]

(28) BroadcastExchange
Input [1]: [cs_ship_customer_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#19]

(29) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [cs_ship_customer_sk#17]
Join condition: None

(30) Filter [codegen id : 9]
Input [5]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5, exists#2, exists#1]
Condition : (exists#2 OR exists#1)

(31) Project [codegen id : 9]
Output [2]: [c_current_cdemo_sk#4, c_current_addr_sk#5]
Input [5]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5, exists#2, exists#1]

(32) Scan parquet default.customer_address
Output [2]: [ca_address_sk#20, ca_state#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(33) ColumnarToRow [codegen id : 7]
Input [2]: [ca_address_sk#20, ca_state#21]

(34) Filter [codegen id : 7]
Input [2]: [ca_address_sk#20, ca_state#21]
Condition : isnotnull(ca_address_sk#20)

(35) BroadcastExchange
Input [2]: [ca_address_sk#20, ca_state#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#22]

(36) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_current_addr_sk#5]
Right keys [1]: [ca_address_sk#20]
Join condition: None

(37) Project [codegen id : 9]
Output [2]: [c_current_cdemo_sk#4, ca_state#21]
Input [4]: [c_current_cdemo_sk#4, c_current_addr_sk#5, ca_address_sk#20, ca_state#21]

(38) Scan parquet default.customer_demographics
Output [6]: [cd_demo_sk#23, cd_gender#24, cd_marital_status#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(39) ColumnarToRow [codegen id : 8]
Input [6]: [cd_demo_sk#23, cd_gender#24, cd_marital_status#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28]

(40) Filter [codegen id : 8]
Input [6]: [cd_demo_sk#23, cd_gender#24, cd_marital_status#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28]
Condition : isnotnull(cd_demo_sk#23)

(41) BroadcastExchange
Input [6]: [cd_demo_sk#23, cd_gender#24, cd_marital_status#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(42) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_current_cdemo_sk#4]
Right keys [1]: [cd_demo_sk#23]
Join condition: None

(43) Project [codegen id : 9]
Output [6]: [ca_state#21, cd_gender#24, cd_marital_status#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28]
Input [8]: [c_current_cdemo_sk#4, ca_state#21, cd_demo_sk#23, cd_gender#24, cd_marital_status#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28]

(44) HashAggregate [codegen id : 9]
Input [6]: [ca_state#21, cd_gender#24, cd_marital_status#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28]
Keys [6]: [ca_state#21, cd_gender#24, cd_marital_status#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28]
Functions [10]: [partial_count(1), partial_min(cd_dep_count#26), partial_max(cd_dep_count#26), partial_avg(cd_dep_count#26), partial_min(cd_dep_employed_count#27), partial_max(cd_dep_employed_count#27), partial_avg(cd_dep_employed_count#27), partial_min(cd_dep_college_count#28), partial_max(cd_dep_college_count#28), partial_avg(cd_dep_college_count#28)]
Aggregate Attributes [13]: [count#30, min#31, max#32, sum#33, count#34, min#35, max#36, sum#37, count#38, min#39, max#40, sum#41, count#42]
Results [19]: [ca_state#21, cd_gender#24, cd_marital_status#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28, count#43, min#44, max#45, sum#46, count#47, min#48, max#49, sum#50, count#51, min#52, max#53, sum#54, count#55]

(45) Exchange
Input [19]: [ca_state#21, cd_gender#24, cd_marital_status#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28, count#43, min#44, max#45, sum#46, count#47, min#48, max#49, sum#50, count#51, min#52, max#53, sum#54, count#55]
Arguments: hashpartitioning(ca_state#21, cd_gender#24, cd_marital_status#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28, 5), ENSURE_REQUIREMENTS, [id=#56]

(46) HashAggregate [codegen id : 10]
Input [19]: [ca_state#21, cd_gender#24, cd_marital_status#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28, count#43, min#44, max#45, sum#46, count#47, min#48, max#49, sum#50, count#51, min#52, max#53, sum#54, count#55]
Keys [6]: [ca_state#21, cd_gender#24, cd_marital_status#25, cd_dep_count#26, cd_dep_employed_count#27, cd_dep_college_count#28]
Functions [10]: [count(1), min(cd_dep_count#26), max(cd_dep_count#26), avg(cd_dep_count#26), min(cd_dep_employed_count#27), max(cd_dep_employed_count#27), avg(cd_dep_employed_count#27), min(cd_dep_college_count#28), max(cd_dep_college_count#28), avg(cd_dep_college_count#28)]
Aggregate Attributes [10]: [count(1)#57, min(cd_dep_count#26)#58, max(cd_dep_count#26)#59, avg(cd_dep_count#26)#60, min(cd_dep_employed_count#27)#61, max(cd_dep_employed_count#27)#62, avg(cd_dep_employed_count#27)#63, min(cd_dep_college_count#28)#64, max(cd_dep_college_count#28)#65, avg(cd_dep_college_count#28)#66]
Results [18]: [ca_state#21, cd_gender#24, cd_marital_status#25, count(1)#57 AS cnt1#67, min(cd_dep_count#26)#58 AS min(cd_dep_count)#68, max(cd_dep_count#26)#59 AS max(cd_dep_count)#69, avg(cd_dep_count#26)#60 AS avg(cd_dep_count)#70, cd_dep_employed_count#27, count(1)#57 AS cnt2#71, min(cd_dep_employed_count#27)#61 AS min(cd_dep_employed_count)#72, max(cd_dep_employed_count#27)#62 AS max(cd_dep_employed_count)#73, avg(cd_dep_employed_count#27)#63 AS avg(cd_dep_employed_count)#74, cd_dep_college_count#28, count(1)#57 AS cnt3#75, min(cd_dep_college_count#28)#64 AS min(cd_dep_college_count)#76, max(cd_dep_college_count#28)#65 AS max(cd_dep_college_count)#77, avg(cd_dep_college_count#28)#66 AS avg(cd_dep_college_count)#78, cd_dep_count#26 AS aggOrder#79]

(47) TakeOrderedAndProject
Input [18]: [ca_state#21, cd_gender#24, cd_marital_status#25, cnt1#67, min(cd_dep_count)#68, max(cd_dep_count)#69, avg(cd_dep_count)#70, cd_dep_employed_count#27, cnt2#71, min(cd_dep_employed_count)#72, max(cd_dep_employed_count)#73, avg(cd_dep_employed_count)#74, cd_dep_college_count#28, cnt3#75, min(cd_dep_college_count)#76, max(cd_dep_college_count)#77, avg(cd_dep_college_count)#78, aggOrder#79]
Arguments: 100, [ca_state#21 ASC NULLS FIRST, cd_gender#24 ASC NULLS FIRST, cd_marital_status#25 ASC NULLS FIRST, aggOrder#79 ASC NULLS FIRST, cd_dep_employed_count#27 ASC NULLS FIRST, cd_dep_college_count#28 ASC NULLS FIRST], [ca_state#21, cd_gender#24, cd_marital_status#25, cnt1#67, min(cd_dep_count)#68, max(cd_dep_count)#69, avg(cd_dep_count)#70, cd_dep_employed_count#27, cnt2#71, min(cd_dep_employed_count)#72, max(cd_dep_employed_count)#73, avg(cd_dep_employed_count)#74, cd_dep_college_count#28, cnt3#75, min(cd_dep_college_count)#76, max(cd_dep_college_count)#77, avg(cd_dep_college_count)#78]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
ReusedExchange (48)


(48) ReusedExchange [Reuses operator id: 11]
Output [1]: [d_date_sk#9]

Subquery:2 Hosting operator id = 16 Hosting Expression = ws_sold_date_sk#15 IN dynamicpruning#8

Subquery:3 Hosting operator id = 23 Hosting Expression = cs_sold_date_sk#18 IN dynamicpruning#8


