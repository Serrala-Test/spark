== Physical Plan ==
TakeOrderedAndProject (43)
+- * HashAggregate (42)
   +- Exchange (41)
      +- * HashAggregate (40)
         +- * Project (39)
            +- * Filter (38)
               +- * BroadcastHashJoin ExistenceJoin(exists#1) BuildRight (37)
                  :- * BroadcastHashJoin ExistenceJoin(exists#2) BuildRight (30)
                  :  :- * Project (23)
                  :  :  +- * BroadcastHashJoin Inner BuildRight (22)
                  :  :     :- * Project (17)
                  :  :     :  +- * BroadcastHashJoin Inner BuildRight (16)
                  :  :     :     :- * BroadcastHashJoin LeftSemi BuildRight (11)
                  :  :     :     :  :- * Filter (3)
                  :  :     :     :  :  +- * ColumnarToRow (2)
                  :  :     :     :  :     +- Scan parquet spark_catalog.default.customer (1)
                  :  :     :     :  +- BroadcastExchange (10)
                  :  :     :     :     +- * Project (9)
                  :  :     :     :        +- * BroadcastHashJoin Inner BuildRight (8)
                  :  :     :     :           :- * Filter (6)
                  :  :     :     :           :  +- * ColumnarToRow (5)
                  :  :     :     :           :     +- Scan parquet spark_catalog.default.store_sales (4)
                  :  :     :     :           +- ReusedExchange (7)
                  :  :     :     +- BroadcastExchange (15)
                  :  :     :        +- * Filter (14)
                  :  :     :           +- * ColumnarToRow (13)
                  :  :     :              +- Scan parquet spark_catalog.default.customer_address (12)
                  :  :     +- BroadcastExchange (21)
                  :  :        +- * Filter (20)
                  :  :           +- * ColumnarToRow (19)
                  :  :              +- Scan parquet spark_catalog.default.customer_demographics (18)
                  :  +- BroadcastExchange (29)
                  :     +- * Project (28)
                  :        +- * BroadcastHashJoin Inner BuildRight (27)
                  :           :- * ColumnarToRow (25)
                  :           :  +- Scan parquet spark_catalog.default.web_sales (24)
                  :           +- ReusedExchange (26)
                  +- BroadcastExchange (36)
                     +- * Project (35)
                        +- * BroadcastHashJoin Inner BuildRight (34)
                           :- * ColumnarToRow (32)
                           :  +- Scan parquet spark_catalog.default.catalog_sales (31)
                           +- ReusedExchange (33)


(1) Scan parquet spark_catalog.default.customer
Output [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 9]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]

(3) Filter [codegen id : 9]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Condition : ((isnotnull(c_customer_sk#3) AND isnotnull(c_current_addr_sk#5)) AND isnotnull(c_current_cdemo_sk#4))

(4) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_customer_sk#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int>

(5) ColumnarToRow [codegen id : 2]
Input [2]: [ss_customer_sk#6, ss_sold_date_sk#7]

(6) Filter [codegen id : 2]
Input [2]: [ss_customer_sk#6, ss_sold_date_sk#7]
Condition : isnotnull(ss_customer_sk#6)

(7) ReusedExchange [Reuses operator id: 48]
Output [1]: [d_date_sk#9]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#9]
Join type: Inner
Join condition: None

(9) Project [codegen id : 2]
Output [1]: [ss_customer_sk#6]
Input [3]: [ss_customer_sk#6, ss_sold_date_sk#7, d_date_sk#9]

(10) BroadcastExchange
Input [1]: [ss_customer_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ss_customer_sk#6]
Join type: LeftSemi
Join condition: None

(12) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#10, ca_state#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(13) ColumnarToRow [codegen id : 3]
Input [2]: [ca_address_sk#10, ca_state#11]

(14) Filter [codegen id : 3]
Input [2]: [ca_address_sk#10, ca_state#11]
Condition : isnotnull(ca_address_sk#10)

(15) BroadcastExchange
Input [2]: [ca_address_sk#10, ca_state#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(16) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_current_addr_sk#5]
Right keys [1]: [ca_address_sk#10]
Join type: Inner
Join condition: None

(17) Project [codegen id : 9]
Output [3]: [c_customer_sk#3, c_current_cdemo_sk#4, ca_state#11]
Input [5]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5, ca_address_sk#10, ca_state#11]

(18) Scan parquet spark_catalog.default.customer_demographics
Output [6]: [cd_demo_sk#12, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(19) ColumnarToRow [codegen id : 4]
Input [6]: [cd_demo_sk#12, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17]

(20) Filter [codegen id : 4]
Input [6]: [cd_demo_sk#12, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17]
Condition : isnotnull(cd_demo_sk#12)

(21) BroadcastExchange
Input [6]: [cd_demo_sk#12, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(22) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_current_cdemo_sk#4]
Right keys [1]: [cd_demo_sk#12]
Join type: Inner
Join condition: None

(23) Project [codegen id : 9]
Output [7]: [c_customer_sk#3, ca_state#11, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17]
Input [9]: [c_customer_sk#3, c_current_cdemo_sk#4, ca_state#11, cd_demo_sk#12, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17]

(24) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_bill_customer_sk#18, ws_sold_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#19), dynamicpruningexpression(ws_sold_date_sk#19 IN dynamicpruning#8)]
ReadSchema: struct<ws_bill_customer_sk:int>

(25) ColumnarToRow [codegen id : 6]
Input [2]: [ws_bill_customer_sk#18, ws_sold_date_sk#19]

(26) ReusedExchange [Reuses operator id: 48]
Output [1]: [d_date_sk#20]

(27) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#19]
Right keys [1]: [d_date_sk#20]
Join type: Inner
Join condition: None

(28) Project [codegen id : 6]
Output [1]: [ws_bill_customer_sk#18]
Input [3]: [ws_bill_customer_sk#18, ws_sold_date_sk#19, d_date_sk#20]

(29) BroadcastExchange
Input [1]: [ws_bill_customer_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(30) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ws_bill_customer_sk#18]
Join type: ExistenceJoin(exists#2)
Join condition: None

(31) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_ship_customer_sk#21, cs_sold_date_sk#22]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#22), dynamicpruningexpression(cs_sold_date_sk#22 IN dynamicpruning#8)]
ReadSchema: struct<cs_ship_customer_sk:int>

(32) ColumnarToRow [codegen id : 8]
Input [2]: [cs_ship_customer_sk#21, cs_sold_date_sk#22]

(33) ReusedExchange [Reuses operator id: 48]
Output [1]: [d_date_sk#23]

(34) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#22]
Right keys [1]: [d_date_sk#23]
Join type: Inner
Join condition: None

(35) Project [codegen id : 8]
Output [1]: [cs_ship_customer_sk#21]
Input [3]: [cs_ship_customer_sk#21, cs_sold_date_sk#22, d_date_sk#23]

(36) BroadcastExchange
Input [1]: [cs_ship_customer_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(37) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [cs_ship_customer_sk#21]
Join type: ExistenceJoin(exists#1)
Join condition: None

(38) Filter [codegen id : 9]
Input [9]: [c_customer_sk#3, ca_state#11, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17, exists#2, exists#1]
Condition : (exists#2 OR exists#1)

(39) Project [codegen id : 9]
Output [6]: [ca_state#11, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17]
Input [9]: [c_customer_sk#3, ca_state#11, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17, exists#2, exists#1]

(40) HashAggregate [codegen id : 9]
Input [6]: [ca_state#11, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17]
Keys [6]: [ca_state#11, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17]
Functions [10]: [partial_count(1), partial_min(cd_dep_count#15), partial_max(cd_dep_count#15), partial_avg(cd_dep_count#15), partial_min(cd_dep_employed_count#16), partial_max(cd_dep_employed_count#16), partial_avg(cd_dep_employed_count#16), partial_min(cd_dep_college_count#17), partial_max(cd_dep_college_count#17), partial_avg(cd_dep_college_count#17)]
Aggregate Attributes [13]: [count#24, min#25, max#26, sum#27, count#28, min#29, max#30, sum#31, count#32, min#33, max#34, sum#35, count#36]
Results [19]: [ca_state#11, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17, count#37, min#38, max#39, sum#40, count#41, min#42, max#43, sum#44, count#45, min#46, max#47, sum#48, count#49]

(41) Exchange
Input [19]: [ca_state#11, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17, count#37, min#38, max#39, sum#40, count#41, min#42, max#43, sum#44, count#45, min#46, max#47, sum#48, count#49]
Arguments: hashpartitioning(ca_state#11, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(42) HashAggregate [codegen id : 10]
Input [19]: [ca_state#11, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17, count#37, min#38, max#39, sum#40, count#41, min#42, max#43, sum#44, count#45, min#46, max#47, sum#48, count#49]
Keys [6]: [ca_state#11, cd_gender#13, cd_marital_status#14, cd_dep_count#15, cd_dep_employed_count#16, cd_dep_college_count#17]
Functions [10]: [count(1), min(cd_dep_count#15), max(cd_dep_count#15), avg(cd_dep_count#15), min(cd_dep_employed_count#16), max(cd_dep_employed_count#16), avg(cd_dep_employed_count#16), min(cd_dep_college_count#17), max(cd_dep_college_count#17), avg(cd_dep_college_count#17)]
Aggregate Attributes [10]: [count(1)#50, min(cd_dep_count#15)#51, max(cd_dep_count#15)#52, avg(cd_dep_count#15)#53, min(cd_dep_employed_count#16)#54, max(cd_dep_employed_count#16)#55, avg(cd_dep_employed_count#16)#56, min(cd_dep_college_count#17)#57, max(cd_dep_college_count#17)#58, avg(cd_dep_college_count#17)#59]
Results [18]: [ca_state#11, cd_gender#13, cd_marital_status#14, count(1)#50 AS cnt1#60, min(cd_dep_count#15)#51 AS min(cd_dep_count)#61, max(cd_dep_count#15)#52 AS max(cd_dep_count)#62, avg(cd_dep_count#15)#53 AS avg(cd_dep_count)#63, cd_dep_employed_count#16, count(1)#50 AS cnt2#64, min(cd_dep_employed_count#16)#54 AS min(cd_dep_employed_count)#65, max(cd_dep_employed_count#16)#55 AS max(cd_dep_employed_count)#66, avg(cd_dep_employed_count#16)#56 AS avg(cd_dep_employed_count)#67, cd_dep_college_count#17, count(1)#50 AS cnt3#68, min(cd_dep_college_count#17)#57 AS min(cd_dep_college_count)#69, max(cd_dep_college_count#17)#58 AS max(cd_dep_college_count)#70, avg(cd_dep_college_count#17)#59 AS avg(cd_dep_college_count)#71, cd_dep_count#15]

(43) TakeOrderedAndProject
Input [18]: [ca_state#11, cd_gender#13, cd_marital_status#14, cnt1#60, min(cd_dep_count)#61, max(cd_dep_count)#62, avg(cd_dep_count)#63, cd_dep_employed_count#16, cnt2#64, min(cd_dep_employed_count)#65, max(cd_dep_employed_count)#66, avg(cd_dep_employed_count)#67, cd_dep_college_count#17, cnt3#68, min(cd_dep_college_count)#69, max(cd_dep_college_count)#70, avg(cd_dep_college_count)#71, cd_dep_count#15]
Arguments: 100, [ca_state#11 ASC NULLS FIRST, cd_gender#13 ASC NULLS FIRST, cd_marital_status#14 ASC NULLS FIRST, cd_dep_count#15 ASC NULLS FIRST, cd_dep_employed_count#16 ASC NULLS FIRST, cd_dep_college_count#17 ASC NULLS FIRST], [ca_state#11, cd_gender#13, cd_marital_status#14, cnt1#60, min(cd_dep_count)#61, max(cd_dep_count)#62, avg(cd_dep_count)#63, cd_dep_employed_count#16, cnt2#64, min(cd_dep_employed_count)#65, max(cd_dep_employed_count)#66, avg(cd_dep_employed_count)#67, cd_dep_college_count#17, cnt3#68, min(cd_dep_college_count)#69, max(cd_dep_college_count)#70, avg(cd_dep_college_count)#71]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (48)
+- * Project (47)
   +- * Filter (46)
      +- * ColumnarToRow (45)
         +- Scan parquet spark_catalog.default.date_dim (44)


(44) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#9, d_year#72, d_qoy#73]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_qoy), EqualTo(d_year,2002), LessThan(d_qoy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(45) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#9, d_year#72, d_qoy#73]

(46) Filter [codegen id : 1]
Input [3]: [d_date_sk#9, d_year#72, d_qoy#73]
Condition : ((((isnotnull(d_year#72) AND isnotnull(d_qoy#73)) AND (d_year#72 = 2002)) AND (d_qoy#73 < 4)) AND isnotnull(d_date_sk#9))

(47) Project [codegen id : 1]
Output [1]: [d_date_sk#9]
Input [3]: [d_date_sk#9, d_year#72, d_qoy#73]

(48) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

Subquery:2 Hosting operator id = 24 Hosting Expression = ws_sold_date_sk#19 IN dynamicpruning#8

Subquery:3 Hosting operator id = 31 Hosting Expression = cs_sold_date_sk#22 IN dynamicpruning#8


