== Physical Plan ==
TakeOrderedAndProject (47)
+- * Project (46)
   +- * BroadcastHashJoin Inner BuildRight (45)
      :- * Project (27)
      :  +- * BroadcastHashJoin Inner BuildRight (26)
      :     :- * Project (20)
      :     :  +- * BroadcastHashJoin Inner BuildRight (19)
      :     :     :- * HashAggregate (13)
      :     :     :  +- Exchange (12)
      :     :     :     +- * HashAggregate (11)
      :     :     :        +- * Project (10)
      :     :     :           +- * BroadcastHashJoin Inner BuildRight (9)
      :     :     :              :- * Filter (3)
      :     :     :              :  +- * ColumnarToRow (2)
      :     :     :              :     +- Scan parquet default.store_sales (1)
      :     :     :              +- BroadcastExchange (8)
      :     :     :                 +- * Project (7)
      :     :     :                    +- * Filter (6)
      :     :     :                       +- * ColumnarToRow (5)
      :     :     :                          +- Scan parquet default.date_dim (4)
      :     :     +- BroadcastExchange (18)
      :     :        +- * Project (17)
      :     :           +- * Filter (16)
      :     :              +- * ColumnarToRow (15)
      :     :                 +- Scan parquet default.store (14)
      :     +- BroadcastExchange (25)
      :        +- * Project (24)
      :           +- * Filter (23)
      :              +- * ColumnarToRow (22)
      :                 +- Scan parquet default.date_dim (21)
      +- BroadcastExchange (44)
         +- * Project (43)
            +- * BroadcastHashJoin Inner BuildRight (42)
               :- * Project (36)
               :  +- * BroadcastHashJoin Inner BuildRight (35)
               :     :- * HashAggregate (29)
               :     :  +- ReusedExchange (28)
               :     +- BroadcastExchange (34)
               :        +- * Project (33)
               :           +- * Filter (32)
               :              +- * ColumnarToRow (31)
               :                 +- Scan parquet default.store (30)
               +- BroadcastExchange (41)
                  +- * Project (40)
                     +- * Filter (39)
                        +- * ColumnarToRow (38)
                           +- Scan parquet default.date_dim (37)


(1) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_sales_price#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_sales_price#3]

(3) Filter [codegen id : 2]
Input [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_sales_price#3]
Condition : (isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_store_sk#2))

(4) Scan parquet default.date_dim
Output [3]: [d_date_sk#4, d_week_seq#5, d_day_name#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk), IsNotNull(d_week_seq)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int,d_day_name:string>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#4, d_week_seq#5, d_day_name#6]

(6) Filter [codegen id : 1]
Input [3]: [d_date_sk#4, d_week_seq#5, d_day_name#6]
Condition : (isnotnull(d_date_sk#4) AND isnotnull(d_week_seq#5))

(7) Project [codegen id : 1]
Output [3]: [d_date_sk#4, d_week_seq#5, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, d_day_name#6, 9, false, true) AS d_day_name#7]
Input [3]: [d_date_sk#4, d_week_seq#5, d_day_name#6]

(8) BroadcastExchange
Input [3]: [d_date_sk#4, d_week_seq#5, d_day_name#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#4]
Join condition: None

(10) Project [codegen id : 2]
Output [4]: [ss_store_sk#2, ss_sales_price#3, d_week_seq#5, d_day_name#7]
Input [6]: [ss_sold_date_sk#1, ss_store_sk#2, ss_sales_price#3, d_date_sk#4, d_week_seq#5, d_day_name#7]

(11) HashAggregate [codegen id : 2]
Input [4]: [ss_store_sk#2, ss_sales_price#3, d_week_seq#5, d_day_name#7]
Keys [2]: [d_week_seq#5, ss_store_sk#2]
Functions [7]: [partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday   ) THEN ss_sales_price#3 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday   ) THEN ss_sales_price#3 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Tuesday  ) THEN ss_sales_price#3 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#3 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday ) THEN ss_sales_price#3 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday   ) THEN ss_sales_price#3 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday ) THEN ss_sales_price#3 ELSE null END))]
Aggregate Attributes [7]: [sum#9, sum#10, sum#11, sum#12, sum#13, sum#14, sum#15]
Results [9]: [d_week_seq#5, ss_store_sk#2, sum#16, sum#17, sum#18, sum#19, sum#20, sum#21, sum#22]

(12) Exchange
Input [9]: [d_week_seq#5, ss_store_sk#2, sum#16, sum#17, sum#18, sum#19, sum#20, sum#21, sum#22]
Arguments: hashpartitioning(d_week_seq#5, ss_store_sk#2, 5), ENSURE_REQUIREMENTS, [id=#23]

(13) HashAggregate [codegen id : 10]
Input [9]: [d_week_seq#5, ss_store_sk#2, sum#16, sum#17, sum#18, sum#19, sum#20, sum#21, sum#22]
Keys [2]: [d_week_seq#5, ss_store_sk#2]
Functions [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday   ) THEN ss_sales_price#3 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday   ) THEN ss_sales_price#3 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Tuesday  ) THEN ss_sales_price#3 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#3 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday ) THEN ss_sales_price#3 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday   ) THEN ss_sales_price#3 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday ) THEN ss_sales_price#3 ELSE null END))]
Aggregate Attributes [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday   ) THEN ss_sales_price#3 ELSE null END))#24, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday   ) THEN ss_sales_price#3 ELSE null END))#25, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Tuesday  ) THEN ss_sales_price#3 ELSE null END))#26, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#3 ELSE null END))#27, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday ) THEN ss_sales_price#3 ELSE null END))#28, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday   ) THEN ss_sales_price#3 ELSE null END))#29, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday ) THEN ss_sales_price#3 ELSE null END))#30]
Results [9]: [d_week_seq#5, ss_store_sk#2, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday   ) THEN ss_sales_price#3 ELSE null END))#24,17,2) AS sun_sales#31, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday   ) THEN ss_sales_price#3 ELSE null END))#25,17,2) AS mon_sales#32, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Tuesday  ) THEN ss_sales_price#3 ELSE null END))#26,17,2) AS tue_sales#33, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#3 ELSE null END))#27,17,2) AS wed_sales#34, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday ) THEN ss_sales_price#3 ELSE null END))#28,17,2) AS thu_sales#35, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday   ) THEN ss_sales_price#3 ELSE null END))#29,17,2) AS fri_sales#36, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday ) THEN ss_sales_price#3 ELSE null END))#30,17,2) AS sat_sales#37]

(14) Scan parquet default.store
Output [3]: [s_store_sk#38, s_store_id#39, s_store_name#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>

(15) ColumnarToRow [codegen id : 3]
Input [3]: [s_store_sk#38, s_store_id#39, s_store_name#40]

(16) Filter [codegen id : 3]
Input [3]: [s_store_sk#38, s_store_id#39, s_store_name#40]
Condition : (isnotnull(s_store_sk#38) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_store_id#39, 16, false, true)))

(17) Project [codegen id : 3]
Output [3]: [s_store_sk#38, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_store_id#39, 16, false, true) AS s_store_id#41, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_store_name#40, 50, false, true) AS s_store_name#42]
Input [3]: [s_store_sk#38, s_store_id#39, s_store_name#40]

(18) BroadcastExchange
Input [3]: [s_store_sk#38, s_store_id#41, s_store_name#42]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#43]

(19) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#38]
Join condition: None

(20) Project [codegen id : 10]
Output [10]: [d_week_seq#5, sun_sales#31, mon_sales#32, tue_sales#33, wed_sales#34, thu_sales#35, fri_sales#36, sat_sales#37, s_store_id#41, s_store_name#42]
Input [12]: [d_week_seq#5, ss_store_sk#2, sun_sales#31, mon_sales#32, tue_sales#33, wed_sales#34, thu_sales#35, fri_sales#36, sat_sales#37, s_store_sk#38, s_store_id#41, s_store_name#42]

(21) Scan parquet default.date_dim
Output [2]: [d_month_seq#44, d_week_seq#45]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_week_seq)]
ReadSchema: struct<d_month_seq:int,d_week_seq:int>

(22) ColumnarToRow [codegen id : 4]
Input [2]: [d_month_seq#44, d_week_seq#45]

(23) Filter [codegen id : 4]
Input [2]: [d_month_seq#44, d_week_seq#45]
Condition : (((isnotnull(d_month_seq#44) AND (d_month_seq#44 >= 1212)) AND (d_month_seq#44 <= 1223)) AND isnotnull(d_week_seq#45))

(24) Project [codegen id : 4]
Output [1]: [d_week_seq#45]
Input [2]: [d_month_seq#44, d_week_seq#45]

(25) BroadcastExchange
Input [1]: [d_week_seq#45]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#46]

(26) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [d_week_seq#5]
Right keys [1]: [d_week_seq#45]
Join condition: None

(27) Project [codegen id : 10]
Output [10]: [s_store_name#42 AS s_store_name1#47, d_week_seq#5 AS d_week_seq1#48, s_store_id#41 AS s_store_id1#49, sun_sales#31 AS sun_sales1#50, mon_sales#32 AS mon_sales1#51, tue_sales#33 AS tue_sales1#52, wed_sales#34 AS wed_sales1#53, thu_sales#35 AS thu_sales1#54, fri_sales#36 AS fri_sales1#55, sat_sales#37 AS sat_sales1#56]
Input [11]: [d_week_seq#5, sun_sales#31, mon_sales#32, tue_sales#33, wed_sales#34, thu_sales#35, fri_sales#36, sat_sales#37, s_store_id#41, s_store_name#42, d_week_seq#45]

(28) ReusedExchange [Reuses operator id: 12]
Output [9]: [d_week_seq#5, ss_store_sk#2, sum#57, sum#58, sum#59, sum#60, sum#61, sum#62, sum#63]

(29) HashAggregate [codegen id : 9]
Input [9]: [d_week_seq#5, ss_store_sk#2, sum#57, sum#58, sum#59, sum#60, sum#61, sum#62, sum#63]
Keys [2]: [d_week_seq#5, ss_store_sk#2]
Functions [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#64 = Sunday   ) THEN ss_sales_price#3 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#64 = Monday   ) THEN ss_sales_price#3 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#64 = Tuesday  ) THEN ss_sales_price#3 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#64 = Wednesday) THEN ss_sales_price#3 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#64 = Thursday ) THEN ss_sales_price#3 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#64 = Friday   ) THEN ss_sales_price#3 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#64 = Saturday ) THEN ss_sales_price#3 ELSE null END))]
Aggregate Attributes [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#64 = Sunday   ) THEN ss_sales_price#3 ELSE null END))#65, sum(UnscaledValue(CASE WHEN (d_day_name#64 = Monday   ) THEN ss_sales_price#3 ELSE null END))#66, sum(UnscaledValue(CASE WHEN (d_day_name#64 = Tuesday  ) THEN ss_sales_price#3 ELSE null END))#67, sum(UnscaledValue(CASE WHEN (d_day_name#64 = Wednesday) THEN ss_sales_price#3 ELSE null END))#68, sum(UnscaledValue(CASE WHEN (d_day_name#64 = Thursday ) THEN ss_sales_price#3 ELSE null END))#69, sum(UnscaledValue(CASE WHEN (d_day_name#64 = Friday   ) THEN ss_sales_price#3 ELSE null END))#70, sum(UnscaledValue(CASE WHEN (d_day_name#64 = Saturday ) THEN ss_sales_price#3 ELSE null END))#71]
Results [9]: [d_week_seq#5, ss_store_sk#2, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#64 = Sunday   ) THEN ss_sales_price#3 ELSE null END))#65,17,2) AS sun_sales#31, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#64 = Monday   ) THEN ss_sales_price#3 ELSE null END))#66,17,2) AS mon_sales#32, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#64 = Tuesday  ) THEN ss_sales_price#3 ELSE null END))#67,17,2) AS tue_sales#33, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#64 = Wednesday) THEN ss_sales_price#3 ELSE null END))#68,17,2) AS wed_sales#34, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#64 = Thursday ) THEN ss_sales_price#3 ELSE null END))#69,17,2) AS thu_sales#35, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#64 = Friday   ) THEN ss_sales_price#3 ELSE null END))#70,17,2) AS fri_sales#36, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#64 = Saturday ) THEN ss_sales_price#3 ELSE null END))#71,17,2) AS sat_sales#37]

(30) Scan parquet default.store
Output [2]: [s_store_sk#38, s_store_id#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(31) ColumnarToRow [codegen id : 7]
Input [2]: [s_store_sk#38, s_store_id#39]

(32) Filter [codegen id : 7]
Input [2]: [s_store_sk#38, s_store_id#39]
Condition : (isnotnull(s_store_sk#38) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_store_id#39, 16, false, true)))

(33) Project [codegen id : 7]
Output [2]: [s_store_sk#38, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_store_id#39, 16, false, true) AS s_store_id#72]
Input [2]: [s_store_sk#38, s_store_id#39]

(34) BroadcastExchange
Input [2]: [s_store_sk#38, s_store_id#72]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#73]

(35) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#38]
Join condition: None

(36) Project [codegen id : 9]
Output [9]: [d_week_seq#5, sun_sales#31, mon_sales#32, tue_sales#33, wed_sales#34, thu_sales#35, fri_sales#36, sat_sales#37, s_store_id#72]
Input [11]: [d_week_seq#5, ss_store_sk#2, sun_sales#31, mon_sales#32, tue_sales#33, wed_sales#34, thu_sales#35, fri_sales#36, sat_sales#37, s_store_sk#38, s_store_id#72]

(37) Scan parquet default.date_dim
Output [2]: [d_month_seq#74, d_week_seq#75]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1224), LessThanOrEqual(d_month_seq,1235), IsNotNull(d_week_seq)]
ReadSchema: struct<d_month_seq:int,d_week_seq:int>

(38) ColumnarToRow [codegen id : 8]
Input [2]: [d_month_seq#74, d_week_seq#75]

(39) Filter [codegen id : 8]
Input [2]: [d_month_seq#74, d_week_seq#75]
Condition : (((isnotnull(d_month_seq#74) AND (d_month_seq#74 >= 1224)) AND (d_month_seq#74 <= 1235)) AND isnotnull(d_week_seq#75))

(40) Project [codegen id : 8]
Output [1]: [d_week_seq#75]
Input [2]: [d_month_seq#74, d_week_seq#75]

(41) BroadcastExchange
Input [1]: [d_week_seq#75]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#76]

(42) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [d_week_seq#5]
Right keys [1]: [d_week_seq#75]
Join condition: None

(43) Project [codegen id : 9]
Output [9]: [d_week_seq#5 AS d_week_seq2#77, s_store_id#72 AS s_store_id2#78, sun_sales#31 AS sun_sales2#79, mon_sales#32 AS mon_sales2#80, tue_sales#33 AS tue_sales2#81, wed_sales#34 AS wed_sales2#82, thu_sales#35 AS thu_sales2#83, fri_sales#36 AS fri_sales2#84, sat_sales#37 AS sat_sales2#85]
Input [10]: [d_week_seq#5, sun_sales#31, mon_sales#32, tue_sales#33, wed_sales#34, thu_sales#35, fri_sales#36, sat_sales#37, s_store_id#72, d_week_seq#75]

(44) BroadcastExchange
Input [9]: [d_week_seq2#77, s_store_id2#78, sun_sales2#79, mon_sales2#80, tue_sales2#81, wed_sales2#82, thu_sales2#83, fri_sales2#84, sat_sales2#85]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true], (input[0, int, true] - 52)),false), [id=#86]

(45) BroadcastHashJoin [codegen id : 10]
Left keys [2]: [s_store_id1#49, d_week_seq1#48]
Right keys [2]: [s_store_id2#78, (d_week_seq2#77 - 52)]
Join condition: None

(46) Project [codegen id : 10]
Output [10]: [s_store_name1#47, s_store_id1#49, d_week_seq1#48, CheckOverflow((promote_precision(sun_sales1#50) / promote_precision(sun_sales2#79)), DecimalType(37,20), true) AS (sun_sales1 / sun_sales2)#87, CheckOverflow((promote_precision(mon_sales1#51) / promote_precision(mon_sales2#80)), DecimalType(37,20), true) AS (mon_sales1 / mon_sales2)#88, CheckOverflow((promote_precision(tue_sales1#52) / promote_precision(tue_sales2#81)), DecimalType(37,20), true) AS (tue_sales1 / tue_sales2)#89, CheckOverflow((promote_precision(wed_sales1#53) / promote_precision(wed_sales2#82)), DecimalType(37,20), true) AS (wed_sales1 / wed_sales2)#90, CheckOverflow((promote_precision(thu_sales1#54) / promote_precision(thu_sales2#83)), DecimalType(37,20), true) AS (thu_sales1 / thu_sales2)#91, CheckOverflow((promote_precision(fri_sales1#55) / promote_precision(fri_sales2#84)), DecimalType(37,20), true) AS (fri_sales1 / fri_sales2)#92, CheckOverflow((promote_precision(sat_sales1#56) / promote_precision(sat_sales2#85)), DecimalType(37,20), true) AS (sat_sales1 / sat_sales2)#93]
Input [19]: [s_store_name1#47, d_week_seq1#48, s_store_id1#49, sun_sales1#50, mon_sales1#51, tue_sales1#52, wed_sales1#53, thu_sales1#54, fri_sales1#55, sat_sales1#56, d_week_seq2#77, s_store_id2#78, sun_sales2#79, mon_sales2#80, tue_sales2#81, wed_sales2#82, thu_sales2#83, fri_sales2#84, sat_sales2#85]

(47) TakeOrderedAndProject
Input [10]: [s_store_name1#47, s_store_id1#49, d_week_seq1#48, (sun_sales1 / sun_sales2)#87, (mon_sales1 / mon_sales2)#88, (tue_sales1 / tue_sales2)#89, (wed_sales1 / wed_sales2)#90, (thu_sales1 / thu_sales2)#91, (fri_sales1 / fri_sales2)#92, (sat_sales1 / sat_sales2)#93]
Arguments: 100, [s_store_name1#47 ASC NULLS FIRST, s_store_id1#49 ASC NULLS FIRST, d_week_seq1#48 ASC NULLS FIRST], [s_store_name1#47, s_store_id1#49, d_week_seq1#48, (sun_sales1 / sun_sales2)#87, (mon_sales1 / mon_sales2)#88, (tue_sales1 / tue_sales2)#89, (wed_sales1 / wed_sales2)#90, (thu_sales1 / thu_sales2)#91, (fri_sales1 / fri_sales2)#92, (sat_sales1 / sat_sales2)#93]

