== Physical Plan ==
TakeOrderedAndProject (47)
+- * Project (46)
   +- * SortMergeJoin Inner (45)
      :- * Sort (27)
      :  +- Exchange (26)
      :     +- * Project (25)
      :        +- * BroadcastHashJoin Inner BuildRight (24)
      :           :- * Project (18)
      :           :  +- * BroadcastHashJoin Inner BuildRight (17)
      :           :     :- * HashAggregate (12)
      :           :     :  +- Exchange (11)
      :           :     :     +- * HashAggregate (10)
      :           :     :        +- * Project (9)
      :           :     :           +- * BroadcastHashJoin Inner BuildLeft (8)
      :           :     :              :- BroadcastExchange (4)
      :           :     :              :  +- * Filter (3)
      :           :     :              :     +- * ColumnarToRow (2)
      :           :     :              :        +- Scan parquet default.store_sales (1)
      :           :     :              +- * Filter (7)
      :           :     :                 +- * ColumnarToRow (6)
      :           :     :                    +- Scan parquet default.date_dim (5)
      :           :     +- BroadcastExchange (16)
      :           :        +- * Filter (15)
      :           :           +- * ColumnarToRow (14)
      :           :              +- Scan parquet default.store (13)
      :           +- BroadcastExchange (23)
      :              +- * Project (22)
      :                 +- * Filter (21)
      :                    +- * ColumnarToRow (20)
      :                       +- Scan parquet default.date_dim (19)
      +- * Sort (44)
         +- Exchange (43)
            +- * Project (42)
               +- * BroadcastHashJoin Inner BuildRight (41)
                  :- * Project (35)
                  :  +- * BroadcastHashJoin Inner BuildRight (34)
                  :     :- * HashAggregate (29)
                  :     :  +- ReusedExchange (28)
                  :     +- BroadcastExchange (33)
                  :        +- * Filter (32)
                  :           +- * ColumnarToRow (31)
                  :              +- Scan parquet default.store (30)
                  +- BroadcastExchange (40)
                     +- * Project (39)
                        +- * Filter (38)
                           +- * ColumnarToRow (37)
                              +- Scan parquet default.date_dim (36)


(1) Scan parquet default.store_sales
Output [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]

(3) Filter [codegen id : 1]
Input [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(4) BroadcastExchange
Input [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#4]

(5) Scan parquet default.date_dim
Output [3]: [d_date_sk#5, d_week_seq#6, d_day_name#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk), IsNotNull(d_week_seq)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int,d_day_name:string>

(6) ColumnarToRow
Input [3]: [d_date_sk#5, d_week_seq#6, d_day_name#7]

(7) Filter
Input [3]: [d_date_sk#5, d_week_seq#6, d_day_name#7]
Condition : (isnotnull(d_date_sk#5) AND isnotnull(d_week_seq#6))

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join condition: None

(9) Project [codegen id : 2]
Output [4]: [ss_store_sk#1, ss_sales_price#2, d_week_seq#6, d_day_name#7]
Input [6]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3, d_date_sk#5, d_week_seq#6, d_day_name#7]

(10) HashAggregate [codegen id : 2]
Input [4]: [ss_store_sk#1, ss_sales_price#2, d_week_seq#6, d_day_name#7]
Keys [2]: [d_week_seq#6, ss_store_sk#1]
Functions [7]: [partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday) THEN ss_sales_price#2 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday) THEN ss_sales_price#2 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Tuesday) THEN ss_sales_price#2 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#2 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday) THEN ss_sales_price#2 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday) THEN ss_sales_price#2 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday) THEN ss_sales_price#2 ELSE null END))]
Aggregate Attributes [7]: [sum#8, sum#9, sum#10, sum#11, sum#12, sum#13, sum#14]
Results [9]: [d_week_seq#6, ss_store_sk#1, sum#15, sum#16, sum#17, sum#18, sum#19, sum#20, sum#21]

(11) Exchange
Input [9]: [d_week_seq#6, ss_store_sk#1, sum#15, sum#16, sum#17, sum#18, sum#19, sum#20, sum#21]
Arguments: hashpartitioning(d_week_seq#6, ss_store_sk#1, 5), ENSURE_REQUIREMENTS, [id=#22]

(12) HashAggregate [codegen id : 5]
Input [9]: [d_week_seq#6, ss_store_sk#1, sum#15, sum#16, sum#17, sum#18, sum#19, sum#20, sum#21]
Keys [2]: [d_week_seq#6, ss_store_sk#1]
Functions [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday) THEN ss_sales_price#2 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday) THEN ss_sales_price#2 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Tuesday) THEN ss_sales_price#2 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#2 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday) THEN ss_sales_price#2 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday) THEN ss_sales_price#2 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday) THEN ss_sales_price#2 ELSE null END))]
Aggregate Attributes [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday) THEN ss_sales_price#2 ELSE null END))#23, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday) THEN ss_sales_price#2 ELSE null END))#24, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Tuesday) THEN ss_sales_price#2 ELSE null END))#25, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#2 ELSE null END))#26, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday) THEN ss_sales_price#2 ELSE null END))#27, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday) THEN ss_sales_price#2 ELSE null END))#28, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday) THEN ss_sales_price#2 ELSE null END))#29]
Results [9]: [d_week_seq#6, ss_store_sk#1, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday) THEN ss_sales_price#2 ELSE null END))#23,17,2) AS sun_sales#30, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday) THEN ss_sales_price#2 ELSE null END))#24,17,2) AS mon_sales#31, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Tuesday) THEN ss_sales_price#2 ELSE null END))#25,17,2) AS tue_sales#32, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#2 ELSE null END))#26,17,2) AS wed_sales#33, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday) THEN ss_sales_price#2 ELSE null END))#27,17,2) AS thu_sales#34, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday) THEN ss_sales_price#2 ELSE null END))#28,17,2) AS fri_sales#35, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday) THEN ss_sales_price#2 ELSE null END))#29,17,2) AS sat_sales#36]

(13) Scan parquet default.store
Output [3]: [s_store_sk#37, s_store_id#38, s_store_name#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_store_id)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>

(14) ColumnarToRow [codegen id : 3]
Input [3]: [s_store_sk#37, s_store_id#38, s_store_name#39]

(15) Filter [codegen id : 3]
Input [3]: [s_store_sk#37, s_store_id#38, s_store_name#39]
Condition : (isnotnull(s_store_sk#37) AND isnotnull(s_store_id#38))

(16) BroadcastExchange
Input [3]: [s_store_sk#37, s_store_id#38, s_store_name#39]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#40]

(17) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#37]
Join condition: None

(18) Project [codegen id : 5]
Output [10]: [d_week_seq#6, sun_sales#30, mon_sales#31, tue_sales#32, wed_sales#33, thu_sales#34, fri_sales#35, sat_sales#36, s_store_id#38, s_store_name#39]
Input [12]: [d_week_seq#6, ss_store_sk#1, sun_sales#30, mon_sales#31, tue_sales#32, wed_sales#33, thu_sales#34, fri_sales#35, sat_sales#36, s_store_sk#37, s_store_id#38, s_store_name#39]

(19) Scan parquet default.date_dim
Output [2]: [d_month_seq#41, d_week_seq#42]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_week_seq)]
ReadSchema: struct<d_month_seq:int,d_week_seq:int>

(20) ColumnarToRow [codegen id : 4]
Input [2]: [d_month_seq#41, d_week_seq#42]

(21) Filter [codegen id : 4]
Input [2]: [d_month_seq#41, d_week_seq#42]
Condition : (((isnotnull(d_month_seq#41) AND (d_month_seq#41 >= 1212)) AND (d_month_seq#41 <= 1223)) AND isnotnull(d_week_seq#42))

(22) Project [codegen id : 4]
Output [1]: [d_week_seq#42]
Input [2]: [d_month_seq#41, d_week_seq#42]

(23) BroadcastExchange
Input [1]: [d_week_seq#42]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#43]

(24) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [d_week_seq#6]
Right keys [1]: [d_week_seq#42]
Join condition: None

(25) Project [codegen id : 5]
Output [10]: [s_store_name#39 AS s_store_name1#44, d_week_seq#6 AS d_week_seq1#45, s_store_id#38 AS s_store_id1#46, sun_sales#30 AS sun_sales1#47, mon_sales#31 AS mon_sales1#48, tue_sales#32 AS tue_sales1#49, wed_sales#33 AS wed_sales1#50, thu_sales#34 AS thu_sales1#51, fri_sales#35 AS fri_sales1#52, sat_sales#36 AS sat_sales1#53]
Input [11]: [d_week_seq#6, sun_sales#30, mon_sales#31, tue_sales#32, wed_sales#33, thu_sales#34, fri_sales#35, sat_sales#36, s_store_id#38, s_store_name#39, d_week_seq#42]

(26) Exchange
Input [10]: [s_store_name1#44, d_week_seq1#45, s_store_id1#46, sun_sales1#47, mon_sales1#48, tue_sales1#49, wed_sales1#50, thu_sales1#51, fri_sales1#52, sat_sales1#53]
Arguments: hashpartitioning(s_store_id1#46, d_week_seq1#45, 5), ENSURE_REQUIREMENTS, [id=#54]

(27) Sort [codegen id : 6]
Input [10]: [s_store_name1#44, d_week_seq1#45, s_store_id1#46, sun_sales1#47, mon_sales1#48, tue_sales1#49, wed_sales1#50, thu_sales1#51, fri_sales1#52, sat_sales1#53]
Arguments: [s_store_id1#46 ASC NULLS FIRST, d_week_seq1#45 ASC NULLS FIRST], false, 0

(28) ReusedExchange [Reuses operator id: 11]
Output [9]: [d_week_seq#6, ss_store_sk#1, sum#55, sum#56, sum#57, sum#58, sum#59, sum#60, sum#61]

(29) HashAggregate [codegen id : 11]
Input [9]: [d_week_seq#6, ss_store_sk#1, sum#55, sum#56, sum#57, sum#58, sum#59, sum#60, sum#61]
Keys [2]: [d_week_seq#6, ss_store_sk#1]
Functions [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday) THEN ss_sales_price#2 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday) THEN ss_sales_price#2 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Tuesday) THEN ss_sales_price#2 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#2 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday) THEN ss_sales_price#2 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday) THEN ss_sales_price#2 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday) THEN ss_sales_price#2 ELSE null END))]
Aggregate Attributes [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday) THEN ss_sales_price#2 ELSE null END))#62, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday) THEN ss_sales_price#2 ELSE null END))#63, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Tuesday) THEN ss_sales_price#2 ELSE null END))#64, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#2 ELSE null END))#65, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday) THEN ss_sales_price#2 ELSE null END))#66, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday) THEN ss_sales_price#2 ELSE null END))#67, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday) THEN ss_sales_price#2 ELSE null END))#68]
Results [9]: [d_week_seq#6, ss_store_sk#1, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday) THEN ss_sales_price#2 ELSE null END))#62,17,2) AS sun_sales#30, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday) THEN ss_sales_price#2 ELSE null END))#63,17,2) AS mon_sales#31, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Tuesday) THEN ss_sales_price#2 ELSE null END))#64,17,2) AS tue_sales#32, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#2 ELSE null END))#65,17,2) AS wed_sales#33, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday) THEN ss_sales_price#2 ELSE null END))#66,17,2) AS thu_sales#34, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday) THEN ss_sales_price#2 ELSE null END))#67,17,2) AS fri_sales#35, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday) THEN ss_sales_price#2 ELSE null END))#68,17,2) AS sat_sales#36]

(30) Scan parquet default.store
Output [2]: [s_store_sk#37, s_store_id#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_store_id)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(31) ColumnarToRow [codegen id : 9]
Input [2]: [s_store_sk#37, s_store_id#38]

(32) Filter [codegen id : 9]
Input [2]: [s_store_sk#37, s_store_id#38]
Condition : (isnotnull(s_store_sk#37) AND isnotnull(s_store_id#38))

(33) BroadcastExchange
Input [2]: [s_store_sk#37, s_store_id#38]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69]

(34) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#37]
Join condition: None

(35) Project [codegen id : 11]
Output [9]: [d_week_seq#6, sun_sales#30, mon_sales#31, tue_sales#32, wed_sales#33, thu_sales#34, fri_sales#35, sat_sales#36, s_store_id#38]
Input [11]: [d_week_seq#6, ss_store_sk#1, sun_sales#30, mon_sales#31, tue_sales#32, wed_sales#33, thu_sales#34, fri_sales#35, sat_sales#36, s_store_sk#37, s_store_id#38]

(36) Scan parquet default.date_dim
Output [2]: [d_month_seq#70, d_week_seq#71]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1224), LessThanOrEqual(d_month_seq,1235), IsNotNull(d_week_seq)]
ReadSchema: struct<d_month_seq:int,d_week_seq:int>

(37) ColumnarToRow [codegen id : 10]
Input [2]: [d_month_seq#70, d_week_seq#71]

(38) Filter [codegen id : 10]
Input [2]: [d_month_seq#70, d_week_seq#71]
Condition : (((isnotnull(d_month_seq#70) AND (d_month_seq#70 >= 1224)) AND (d_month_seq#70 <= 1235)) AND isnotnull(d_week_seq#71))

(39) Project [codegen id : 10]
Output [1]: [d_week_seq#71]
Input [2]: [d_month_seq#70, d_week_seq#71]

(40) BroadcastExchange
Input [1]: [d_week_seq#71]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#72]

(41) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [d_week_seq#6]
Right keys [1]: [d_week_seq#71]
Join condition: None

(42) Project [codegen id : 11]
Output [9]: [d_week_seq#6 AS d_week_seq2#73, s_store_id#38 AS s_store_id2#74, sun_sales#30 AS sun_sales2#75, mon_sales#31 AS mon_sales2#76, tue_sales#32 AS tue_sales2#77, wed_sales#33 AS wed_sales2#78, thu_sales#34 AS thu_sales2#79, fri_sales#35 AS fri_sales2#80, sat_sales#36 AS sat_sales2#81]
Input [10]: [d_week_seq#6, sun_sales#30, mon_sales#31, tue_sales#32, wed_sales#33, thu_sales#34, fri_sales#35, sat_sales#36, s_store_id#38, d_week_seq#71]

(43) Exchange
Input [9]: [d_week_seq2#73, s_store_id2#74, sun_sales2#75, mon_sales2#76, tue_sales2#77, wed_sales2#78, thu_sales2#79, fri_sales2#80, sat_sales2#81]
Arguments: hashpartitioning(s_store_id2#74, (d_week_seq2#73 - 52), 5), ENSURE_REQUIREMENTS, [id=#82]

(44) Sort [codegen id : 12]
Input [9]: [d_week_seq2#73, s_store_id2#74, sun_sales2#75, mon_sales2#76, tue_sales2#77, wed_sales2#78, thu_sales2#79, fri_sales2#80, sat_sales2#81]
Arguments: [s_store_id2#74 ASC NULLS FIRST, (d_week_seq2#73 - 52) ASC NULLS FIRST], false, 0

(45) SortMergeJoin [codegen id : 13]
Left keys [2]: [s_store_id1#46, d_week_seq1#45]
Right keys [2]: [s_store_id2#74, (d_week_seq2#73 - 52)]
Join condition: None

(46) Project [codegen id : 13]
Output [10]: [s_store_name1#44, s_store_id1#46, d_week_seq1#45, CheckOverflow((promote_precision(sun_sales1#47) / promote_precision(sun_sales2#75)), DecimalType(37,20), true) AS (sun_sales1 / sun_sales2)#83, CheckOverflow((promote_precision(mon_sales1#48) / promote_precision(mon_sales2#76)), DecimalType(37,20), true) AS (mon_sales1 / mon_sales2)#84, CheckOverflow((promote_precision(tue_sales1#49) / promote_precision(tue_sales2#77)), DecimalType(37,20), true) AS (tue_sales1 / tue_sales2)#85, CheckOverflow((promote_precision(wed_sales1#50) / promote_precision(wed_sales2#78)), DecimalType(37,20), true) AS (wed_sales1 / wed_sales2)#86, CheckOverflow((promote_precision(thu_sales1#51) / promote_precision(thu_sales2#79)), DecimalType(37,20), true) AS (thu_sales1 / thu_sales2)#87, CheckOverflow((promote_precision(fri_sales1#52) / promote_precision(fri_sales2#80)), DecimalType(37,20), true) AS (fri_sales1 / fri_sales2)#88, CheckOverflow((promote_precision(sat_sales1#53) / promote_precision(sat_sales2#81)), DecimalType(37,20), true) AS (sat_sales1 / sat_sales2)#89]
Input [19]: [s_store_name1#44, d_week_seq1#45, s_store_id1#46, sun_sales1#47, mon_sales1#48, tue_sales1#49, wed_sales1#50, thu_sales1#51, fri_sales1#52, sat_sales1#53, d_week_seq2#73, s_store_id2#74, sun_sales2#75, mon_sales2#76, tue_sales2#77, wed_sales2#78, thu_sales2#79, fri_sales2#80, sat_sales2#81]

(47) TakeOrderedAndProject
Input [10]: [s_store_name1#44, s_store_id1#46, d_week_seq1#45, (sun_sales1 / sun_sales2)#83, (mon_sales1 / mon_sales2)#84, (tue_sales1 / tue_sales2)#85, (wed_sales1 / wed_sales2)#86, (thu_sales1 / thu_sales2)#87, (fri_sales1 / fri_sales2)#88, (sat_sales1 / sat_sales2)#89]
Arguments: 100, [s_store_name1#44 ASC NULLS FIRST, s_store_id1#46 ASC NULLS FIRST, d_week_seq1#45 ASC NULLS FIRST], [s_store_name1#44, s_store_id1#46, d_week_seq1#45, (sun_sales1 / sun_sales2)#83, (mon_sales1 / mon_sales2)#84, (tue_sales1 / tue_sales2)#85, (wed_sales1 / wed_sales2)#86, (thu_sales1 / thu_sales2)#87, (fri_sales1 / fri_sales2)#88, (sat_sales1 / sat_sales2)#89]

