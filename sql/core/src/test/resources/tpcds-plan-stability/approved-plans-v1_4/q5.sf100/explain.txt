== Physical Plan ==
TakeOrderedAndProject (84)
+- * HashAggregate (83)
   +- Exchange (82)
      +- * HashAggregate (81)
         +- * Expand (80)
            +- Union (79)
               :- * HashAggregate (26)
               :  +- Exchange (25)
               :     +- * HashAggregate (24)
               :        +- * Project (23)
               :           +- * BroadcastHashJoin Inner BuildRight (22)
               :              :- * Project (16)
               :              :  +- * BroadcastHashJoin Inner BuildRight (15)
               :              :     :- Union (9)
               :              :     :  :- * Project (4)
               :              :     :  :  +- * Filter (3)
               :              :     :  :     +- * ColumnarToRow (2)
               :              :     :  :        +- Scan parquet default.store_sales (1)
               :              :     :  +- * Project (8)
               :              :     :     +- * Filter (7)
               :              :     :        +- * ColumnarToRow (6)
               :              :     :           +- Scan parquet default.store_returns (5)
               :              :     +- BroadcastExchange (14)
               :              :        +- * Project (13)
               :              :           +- * Filter (12)
               :              :              +- * ColumnarToRow (11)
               :              :                 +- Scan parquet default.store (10)
               :              +- BroadcastExchange (21)
               :                 +- * Project (20)
               :                    +- * Filter (19)
               :                       +- * ColumnarToRow (18)
               :                          +- Scan parquet default.date_dim (17)
               :- * HashAggregate (48)
               :  +- Exchange (47)
               :     +- * HashAggregate (46)
               :        +- * Project (45)
               :           +- * BroadcastHashJoin Inner BuildRight (44)
               :              :- * Project (42)
               :              :  +- * BroadcastHashJoin Inner BuildRight (41)
               :              :     :- Union (35)
               :              :     :  :- * Project (30)
               :              :     :  :  +- * Filter (29)
               :              :     :  :     +- * ColumnarToRow (28)
               :              :     :  :        +- Scan parquet default.catalog_sales (27)
               :              :     :  +- * Project (34)
               :              :     :     +- * Filter (33)
               :              :     :        +- * ColumnarToRow (32)
               :              :     :           +- Scan parquet default.catalog_returns (31)
               :              :     +- BroadcastExchange (40)
               :              :        +- * Project (39)
               :              :           +- * Filter (38)
               :              :              +- * ColumnarToRow (37)
               :              :                 +- Scan parquet default.catalog_page (36)
               :              +- ReusedExchange (43)
               +- * HashAggregate (78)
                  +- Exchange (77)
                     +- * HashAggregate (76)
                        +- * Project (75)
                           +- * BroadcastHashJoin Inner BuildRight (74)
                              :- * Project (72)
                              :  +- * BroadcastHashJoin Inner BuildRight (71)
                              :     :- Union (65)
                              :     :  :- * Project (52)
                              :     :  :  +- * Filter (51)
                              :     :  :     +- * ColumnarToRow (50)
                              :     :  :        +- Scan parquet default.web_sales (49)
                              :     :  +- * Project (64)
                              :     :     +- * SortMergeJoin Inner (63)
                              :     :        :- * Sort (57)
                              :     :        :  +- Exchange (56)
                              :     :        :     +- * Filter (55)
                              :     :        :        +- * ColumnarToRow (54)
                              :     :        :           +- Scan parquet default.web_returns (53)
                              :     :        +- * Sort (62)
                              :     :           +- Exchange (61)
                              :     :              +- * Filter (60)
                              :     :                 +- * ColumnarToRow (59)
                              :     :                    +- Scan parquet default.web_sales (58)
                              :     +- BroadcastExchange (70)
                              :        +- * Project (69)
                              :           +- * Filter (68)
                              :              +- * ColumnarToRow (67)
                              :                 +- Scan parquet default.web_site (66)
                              +- ReusedExchange (73)


(1) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [ss_sold_date_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4]

(3) Filter [codegen id : 1]
Input [4]: [ss_sold_date_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4]
Condition : (isnotnull(cast(ss_sold_date_sk#1 as bigint)) AND isnotnull(cast(ss_store_sk#2 as bigint)))

(4) Project [codegen id : 1]
Output [6]: [cast(ss_store_sk#2 as bigint) AS store_sk#5, cast(ss_sold_date_sk#1 as bigint) AS date_sk#6, ss_ext_sales_price#3 AS sales_price#7, ss_net_profit#4 AS profit#8, 0.00 AS return_amt#9, 0.00 AS net_loss#10]
Input [4]: [ss_sold_date_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4]

(5) Scan parquet default.store_returns
Output [4]: [sr_returned_date_sk#11, sr_store_sk#12, sr_return_amt#13, sr_net_loss#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_returned_date_sk), IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_returned_date_sk:bigint,sr_store_sk:bigint,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(6) ColumnarToRow [codegen id : 2]
Input [4]: [sr_returned_date_sk#11, sr_store_sk#12, sr_return_amt#13, sr_net_loss#14]

(7) Filter [codegen id : 2]
Input [4]: [sr_returned_date_sk#11, sr_store_sk#12, sr_return_amt#13, sr_net_loss#14]
Condition : (isnotnull(sr_returned_date_sk#11) AND isnotnull(sr_store_sk#12))

(8) Project [codegen id : 2]
Output [6]: [sr_store_sk#12 AS store_sk#15, sr_returned_date_sk#11 AS date_sk#16, 0.00 AS sales_price#17, 0.00 AS profit#18, sr_return_amt#13 AS return_amt#19, sr_net_loss#14 AS net_loss#20]
Input [4]: [sr_returned_date_sk#11, sr_store_sk#12, sr_return_amt#13, sr_net_loss#14]

(9) Union

(10) Scan parquet default.store
Output [2]: [s_store_sk#21, s_store_id#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(11) ColumnarToRow [codegen id : 3]
Input [2]: [s_store_sk#21, s_store_id#22]

(12) Filter [codegen id : 3]
Input [2]: [s_store_sk#21, s_store_id#22]
Condition : isnotnull(s_store_sk#21)

(13) Project [codegen id : 3]
Output [2]: [s_store_sk#21, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_store_id#22, 16, false, true) AS s_store_id#23]
Input [2]: [s_store_sk#21, s_store_id#22]

(14) BroadcastExchange
Input [2]: [s_store_sk#21, s_store_id#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#24]

(15) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [store_sk#5]
Right keys [1]: [cast(s_store_sk#21 as bigint)]
Join condition: None

(16) Project [codegen id : 5]
Output [6]: [date_sk#6, sales_price#7, profit#8, return_amt#9, net_loss#10, s_store_id#23]
Input [8]: [store_sk#5, date_sk#6, sales_price#7, profit#8, return_amt#9, net_loss#10, s_store_sk#21, s_store_id#23]

(17) Scan parquet default.date_dim
Output [2]: [d_date_sk#25, d_date#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-08-23), LessThanOrEqual(d_date,2000-09-06), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(18) ColumnarToRow [codegen id : 4]
Input [2]: [d_date_sk#25, d_date#26]

(19) Filter [codegen id : 4]
Input [2]: [d_date_sk#25, d_date#26]
Condition : (((isnotnull(d_date#26) AND (d_date#26 >= 11192)) AND (d_date#26 <= 11206)) AND isnotnull(d_date_sk#25))

(20) Project [codegen id : 4]
Output [1]: [d_date_sk#25]
Input [2]: [d_date_sk#25, d_date#26]

(21) BroadcastExchange
Input [1]: [d_date_sk#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#27]

(22) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [date_sk#6]
Right keys [1]: [cast(d_date_sk#25 as bigint)]
Join condition: None

(23) Project [codegen id : 5]
Output [5]: [sales_price#7, profit#8, return_amt#9, net_loss#10, s_store_id#23]
Input [7]: [date_sk#6, sales_price#7, profit#8, return_amt#9, net_loss#10, s_store_id#23, d_date_sk#25]

(24) HashAggregate [codegen id : 5]
Input [5]: [sales_price#7, profit#8, return_amt#9, net_loss#10, s_store_id#23]
Keys [1]: [s_store_id#23]
Functions [4]: [partial_sum(UnscaledValue(sales_price#7)), partial_sum(UnscaledValue(return_amt#9)), partial_sum(UnscaledValue(profit#8)), partial_sum(UnscaledValue(net_loss#10))]
Aggregate Attributes [4]: [sum#28, sum#29, sum#30, sum#31]
Results [5]: [s_store_id#23, sum#32, sum#33, sum#34, sum#35]

(25) Exchange
Input [5]: [s_store_id#23, sum#32, sum#33, sum#34, sum#35]
Arguments: hashpartitioning(s_store_id#23, 5), ENSURE_REQUIREMENTS, [id=#36]

(26) HashAggregate [codegen id : 6]
Input [5]: [s_store_id#23, sum#32, sum#33, sum#34, sum#35]
Keys [1]: [s_store_id#23]
Functions [4]: [sum(UnscaledValue(sales_price#7)), sum(UnscaledValue(return_amt#9)), sum(UnscaledValue(profit#8)), sum(UnscaledValue(net_loss#10))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#7))#37, sum(UnscaledValue(return_amt#9))#38, sum(UnscaledValue(profit#8))#39, sum(UnscaledValue(net_loss#10))#40]
Results [5]: [MakeDecimal(sum(UnscaledValue(sales_price#7))#37,17,2) AS sales#41, MakeDecimal(sum(UnscaledValue(return_amt#9))#38,17,2) AS RETURNS#42, CheckOverflow((promote_precision(cast(MakeDecimal(sum(UnscaledValue(profit#8))#39,17,2) as decimal(18,2))) - promote_precision(cast(MakeDecimal(sum(UnscaledValue(net_loss#10))#40,17,2) as decimal(18,2)))), DecimalType(18,2), true) AS profit#43, store channel AS channel#44, concat(store, s_store_id#23) AS id#45]

(27) Scan parquet default.catalog_sales
Output [4]: [cs_sold_date_sk#46, cs_catalog_page_sk#47, cs_ext_sales_price#48, cs_net_profit#49]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_catalog_page_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_catalog_page_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(28) ColumnarToRow [codegen id : 7]
Input [4]: [cs_sold_date_sk#46, cs_catalog_page_sk#47, cs_ext_sales_price#48, cs_net_profit#49]

(29) Filter [codegen id : 7]
Input [4]: [cs_sold_date_sk#46, cs_catalog_page_sk#47, cs_ext_sales_price#48, cs_net_profit#49]
Condition : (isnotnull(cs_sold_date_sk#46) AND isnotnull(cs_catalog_page_sk#47))

(30) Project [codegen id : 7]
Output [6]: [cs_catalog_page_sk#47 AS page_sk#50, cs_sold_date_sk#46 AS date_sk#51, cs_ext_sales_price#48 AS sales_price#52, cs_net_profit#49 AS profit#53, 0.00 AS return_amt#54, 0.00 AS net_loss#55]
Input [4]: [cs_sold_date_sk#46, cs_catalog_page_sk#47, cs_ext_sales_price#48, cs_net_profit#49]

(31) Scan parquet default.catalog_returns
Output [4]: [cr_returned_date_sk#56, cr_catalog_page_sk#57, cr_return_amount#58, cr_net_loss#59]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_returned_date_sk), IsNotNull(cr_catalog_page_sk)]
ReadSchema: struct<cr_returned_date_sk:int,cr_catalog_page_sk:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(32) ColumnarToRow [codegen id : 8]
Input [4]: [cr_returned_date_sk#56, cr_catalog_page_sk#57, cr_return_amount#58, cr_net_loss#59]

(33) Filter [codegen id : 8]
Input [4]: [cr_returned_date_sk#56, cr_catalog_page_sk#57, cr_return_amount#58, cr_net_loss#59]
Condition : (isnotnull(cr_returned_date_sk#56) AND isnotnull(cr_catalog_page_sk#57))

(34) Project [codegen id : 8]
Output [6]: [cr_catalog_page_sk#57 AS page_sk#60, cr_returned_date_sk#56 AS date_sk#61, 0.00 AS sales_price#62, 0.00 AS profit#63, cr_return_amount#58 AS return_amt#64, cr_net_loss#59 AS net_loss#65]
Input [4]: [cr_returned_date_sk#56, cr_catalog_page_sk#57, cr_return_amount#58, cr_net_loss#59]

(35) Union

(36) Scan parquet default.catalog_page
Output [2]: [cp_catalog_page_sk#66, cp_catalog_page_id#67]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>

(37) ColumnarToRow [codegen id : 9]
Input [2]: [cp_catalog_page_sk#66, cp_catalog_page_id#67]

(38) Filter [codegen id : 9]
Input [2]: [cp_catalog_page_sk#66, cp_catalog_page_id#67]
Condition : isnotnull(cp_catalog_page_sk#66)

(39) Project [codegen id : 9]
Output [2]: [cp_catalog_page_sk#66, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cp_catalog_page_id#67, 16, false, true) AS cp_catalog_page_id#68]
Input [2]: [cp_catalog_page_sk#66, cp_catalog_page_id#67]

(40) BroadcastExchange
Input [2]: [cp_catalog_page_sk#66, cp_catalog_page_id#68]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#69]

(41) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [page_sk#50]
Right keys [1]: [cp_catalog_page_sk#66]
Join condition: None

(42) Project [codegen id : 11]
Output [6]: [date_sk#51, sales_price#52, profit#53, return_amt#54, net_loss#55, cp_catalog_page_id#68]
Input [8]: [page_sk#50, date_sk#51, sales_price#52, profit#53, return_amt#54, net_loss#55, cp_catalog_page_sk#66, cp_catalog_page_id#68]

(43) ReusedExchange [Reuses operator id: 21]
Output [1]: [d_date_sk#25]

(44) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [date_sk#51]
Right keys [1]: [d_date_sk#25]
Join condition: None

(45) Project [codegen id : 11]
Output [5]: [sales_price#52, profit#53, return_amt#54, net_loss#55, cp_catalog_page_id#68]
Input [7]: [date_sk#51, sales_price#52, profit#53, return_amt#54, net_loss#55, cp_catalog_page_id#68, d_date_sk#25]

(46) HashAggregate [codegen id : 11]
Input [5]: [sales_price#52, profit#53, return_amt#54, net_loss#55, cp_catalog_page_id#68]
Keys [1]: [cp_catalog_page_id#68]
Functions [4]: [partial_sum(UnscaledValue(sales_price#52)), partial_sum(UnscaledValue(return_amt#54)), partial_sum(UnscaledValue(profit#53)), partial_sum(UnscaledValue(net_loss#55))]
Aggregate Attributes [4]: [sum#70, sum#71, sum#72, sum#73]
Results [5]: [cp_catalog_page_id#68, sum#74, sum#75, sum#76, sum#77]

(47) Exchange
Input [5]: [cp_catalog_page_id#68, sum#74, sum#75, sum#76, sum#77]
Arguments: hashpartitioning(cp_catalog_page_id#68, 5), ENSURE_REQUIREMENTS, [id=#78]

(48) HashAggregate [codegen id : 12]
Input [5]: [cp_catalog_page_id#68, sum#74, sum#75, sum#76, sum#77]
Keys [1]: [cp_catalog_page_id#68]
Functions [4]: [sum(UnscaledValue(sales_price#52)), sum(UnscaledValue(return_amt#54)), sum(UnscaledValue(profit#53)), sum(UnscaledValue(net_loss#55))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#52))#79, sum(UnscaledValue(return_amt#54))#80, sum(UnscaledValue(profit#53))#81, sum(UnscaledValue(net_loss#55))#82]
Results [5]: [MakeDecimal(sum(UnscaledValue(sales_price#52))#79,17,2) AS sales#83, MakeDecimal(sum(UnscaledValue(return_amt#54))#80,17,2) AS RETURNS#84, CheckOverflow((promote_precision(cast(MakeDecimal(sum(UnscaledValue(profit#53))#81,17,2) as decimal(18,2))) - promote_precision(cast(MakeDecimal(sum(UnscaledValue(net_loss#55))#82,17,2) as decimal(18,2)))), DecimalType(18,2), true) AS profit#85, catalog channel AS channel#86, concat(catalog_page, cp_catalog_page_id#68) AS id#87]

(49) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#88, ws_web_site_sk#89, ws_ext_sales_price#90, ws_net_profit#91]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_web_site_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(50) ColumnarToRow [codegen id : 13]
Input [4]: [ws_sold_date_sk#88, ws_web_site_sk#89, ws_ext_sales_price#90, ws_net_profit#91]

(51) Filter [codegen id : 13]
Input [4]: [ws_sold_date_sk#88, ws_web_site_sk#89, ws_ext_sales_price#90, ws_net_profit#91]
Condition : (isnotnull(cast(ws_sold_date_sk#88 as bigint)) AND isnotnull(ws_web_site_sk#89))

(52) Project [codegen id : 13]
Output [6]: [ws_web_site_sk#89 AS wsr_web_site_sk#92, cast(ws_sold_date_sk#88 as bigint) AS date_sk#93, ws_ext_sales_price#90 AS sales_price#94, ws_net_profit#91 AS profit#95, 0.00 AS return_amt#96, 0.00 AS net_loss#97]
Input [4]: [ws_sold_date_sk#88, ws_web_site_sk#89, ws_ext_sales_price#90, ws_net_profit#91]

(53) Scan parquet default.web_returns
Output [5]: [wr_returned_date_sk#98, wr_item_sk#99, wr_order_number#100, wr_return_amt#101, wr_net_loss#102]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_returned_date_sk)]
ReadSchema: struct<wr_returned_date_sk:bigint,wr_item_sk:bigint,wr_order_number:bigint,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(54) ColumnarToRow [codegen id : 14]
Input [5]: [wr_returned_date_sk#98, wr_item_sk#99, wr_order_number#100, wr_return_amt#101, wr_net_loss#102]

(55) Filter [codegen id : 14]
Input [5]: [wr_returned_date_sk#98, wr_item_sk#99, wr_order_number#100, wr_return_amt#101, wr_net_loss#102]
Condition : isnotnull(wr_returned_date_sk#98)

(56) Exchange
Input [5]: [wr_returned_date_sk#98, wr_item_sk#99, wr_order_number#100, wr_return_amt#101, wr_net_loss#102]
Arguments: hashpartitioning(wr_item_sk#99, wr_order_number#100, 5), ENSURE_REQUIREMENTS, [id=#103]

(57) Sort [codegen id : 15]
Input [5]: [wr_returned_date_sk#98, wr_item_sk#99, wr_order_number#100, wr_return_amt#101, wr_net_loss#102]
Arguments: [wr_item_sk#99 ASC NULLS FIRST, wr_order_number#100 ASC NULLS FIRST], false, 0

(58) Scan parquet default.web_sales
Output [3]: [ws_item_sk#104, ws_web_site_sk#89, ws_order_number#105]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_order_number:int>

(59) ColumnarToRow [codegen id : 16]
Input [3]: [ws_item_sk#104, ws_web_site_sk#89, ws_order_number#105]

(60) Filter [codegen id : 16]
Input [3]: [ws_item_sk#104, ws_web_site_sk#89, ws_order_number#105]
Condition : ((isnotnull(ws_item_sk#104) AND isnotnull(ws_order_number#105)) AND isnotnull(ws_web_site_sk#89))

(61) Exchange
Input [3]: [ws_item_sk#104, ws_web_site_sk#89, ws_order_number#105]
Arguments: hashpartitioning(cast(ws_item_sk#104 as bigint), cast(ws_order_number#105 as bigint), 5), ENSURE_REQUIREMENTS, [id=#106]

(62) Sort [codegen id : 17]
Input [3]: [ws_item_sk#104, ws_web_site_sk#89, ws_order_number#105]
Arguments: [cast(ws_item_sk#104 as bigint) ASC NULLS FIRST, cast(ws_order_number#105 as bigint) ASC NULLS FIRST], false, 0

(63) SortMergeJoin [codegen id : 18]
Left keys [2]: [wr_item_sk#99, wr_order_number#100]
Right keys [2]: [cast(ws_item_sk#104 as bigint), cast(ws_order_number#105 as bigint)]
Join condition: None

(64) Project [codegen id : 18]
Output [6]: [ws_web_site_sk#89 AS wsr_web_site_sk#107, wr_returned_date_sk#98 AS date_sk#108, 0.00 AS sales_price#109, 0.00 AS profit#110, wr_return_amt#101 AS return_amt#111, wr_net_loss#102 AS net_loss#112]
Input [8]: [wr_returned_date_sk#98, wr_item_sk#99, wr_order_number#100, wr_return_amt#101, wr_net_loss#102, ws_item_sk#104, ws_web_site_sk#89, ws_order_number#105]

(65) Union

(66) Scan parquet default.web_site
Output [2]: [web_site_sk#113, web_site_id#114]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string>

(67) ColumnarToRow [codegen id : 19]
Input [2]: [web_site_sk#113, web_site_id#114]

(68) Filter [codegen id : 19]
Input [2]: [web_site_sk#113, web_site_id#114]
Condition : isnotnull(web_site_sk#113)

(69) Project [codegen id : 19]
Output [2]: [web_site_sk#113, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, web_site_id#114, 16, false, true) AS web_site_id#115]
Input [2]: [web_site_sk#113, web_site_id#114]

(70) BroadcastExchange
Input [2]: [web_site_sk#113, web_site_id#115]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#116]

(71) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [wsr_web_site_sk#92]
Right keys [1]: [web_site_sk#113]
Join condition: None

(72) Project [codegen id : 21]
Output [6]: [date_sk#93, sales_price#94, profit#95, return_amt#96, net_loss#97, web_site_id#115]
Input [8]: [wsr_web_site_sk#92, date_sk#93, sales_price#94, profit#95, return_amt#96, net_loss#97, web_site_sk#113, web_site_id#115]

(73) ReusedExchange [Reuses operator id: 21]
Output [1]: [d_date_sk#25]

(74) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [date_sk#93]
Right keys [1]: [cast(d_date_sk#25 as bigint)]
Join condition: None

(75) Project [codegen id : 21]
Output [5]: [sales_price#94, profit#95, return_amt#96, net_loss#97, web_site_id#115]
Input [7]: [date_sk#93, sales_price#94, profit#95, return_amt#96, net_loss#97, web_site_id#115, d_date_sk#25]

(76) HashAggregate [codegen id : 21]
Input [5]: [sales_price#94, profit#95, return_amt#96, net_loss#97, web_site_id#115]
Keys [1]: [web_site_id#115]
Functions [4]: [partial_sum(UnscaledValue(sales_price#94)), partial_sum(UnscaledValue(return_amt#96)), partial_sum(UnscaledValue(profit#95)), partial_sum(UnscaledValue(net_loss#97))]
Aggregate Attributes [4]: [sum#117, sum#118, sum#119, sum#120]
Results [5]: [web_site_id#115, sum#121, sum#122, sum#123, sum#124]

(77) Exchange
Input [5]: [web_site_id#115, sum#121, sum#122, sum#123, sum#124]
Arguments: hashpartitioning(web_site_id#115, 5), ENSURE_REQUIREMENTS, [id=#125]

(78) HashAggregate [codegen id : 22]
Input [5]: [web_site_id#115, sum#121, sum#122, sum#123, sum#124]
Keys [1]: [web_site_id#115]
Functions [4]: [sum(UnscaledValue(sales_price#94)), sum(UnscaledValue(return_amt#96)), sum(UnscaledValue(profit#95)), sum(UnscaledValue(net_loss#97))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#94))#126, sum(UnscaledValue(return_amt#96))#127, sum(UnscaledValue(profit#95))#128, sum(UnscaledValue(net_loss#97))#129]
Results [5]: [MakeDecimal(sum(UnscaledValue(sales_price#94))#126,17,2) AS sales#130, MakeDecimal(sum(UnscaledValue(return_amt#96))#127,17,2) AS RETURNS#131, CheckOverflow((promote_precision(cast(MakeDecimal(sum(UnscaledValue(profit#95))#128,17,2) as decimal(18,2))) - promote_precision(cast(MakeDecimal(sum(UnscaledValue(net_loss#97))#129,17,2) as decimal(18,2)))), DecimalType(18,2), true) AS profit#132, web channel AS channel#133, concat(web_site, web_site_id#115) AS id#134]

(79) Union

(80) Expand [codegen id : 23]
Input [5]: [sales#41, RETURNS#42, profit#43, channel#44, id#45]
Arguments: [List(sales#41, returns#42, profit#43, channel#44, id#45, 0), List(sales#41, returns#42, profit#43, channel#44, null, 1), List(sales#41, returns#42, profit#43, null, null, 3)], [sales#41, returns#42, profit#43, channel#135, id#136, spark_grouping_id#137]

(81) HashAggregate [codegen id : 23]
Input [6]: [sales#41, returns#42, profit#43, channel#135, id#136, spark_grouping_id#137]
Keys [3]: [channel#135, id#136, spark_grouping_id#137]
Functions [3]: [partial_sum(sales#41), partial_sum(returns#42), partial_sum(profit#43)]
Aggregate Attributes [6]: [sum#138, isEmpty#139, sum#140, isEmpty#141, sum#142, isEmpty#143]
Results [9]: [channel#135, id#136, spark_grouping_id#137, sum#144, isEmpty#145, sum#146, isEmpty#147, sum#148, isEmpty#149]

(82) Exchange
Input [9]: [channel#135, id#136, spark_grouping_id#137, sum#144, isEmpty#145, sum#146, isEmpty#147, sum#148, isEmpty#149]
Arguments: hashpartitioning(channel#135, id#136, spark_grouping_id#137, 5), ENSURE_REQUIREMENTS, [id=#150]

(83) HashAggregate [codegen id : 24]
Input [9]: [channel#135, id#136, spark_grouping_id#137, sum#144, isEmpty#145, sum#146, isEmpty#147, sum#148, isEmpty#149]
Keys [3]: [channel#135, id#136, spark_grouping_id#137]
Functions [3]: [sum(sales#41), sum(returns#42), sum(profit#43)]
Aggregate Attributes [3]: [sum(sales#41)#151, sum(returns#42)#152, sum(profit#43)#153]
Results [5]: [channel#135, id#136, sum(sales#41)#151 AS sales#154, sum(returns#42)#152 AS returns#155, sum(profit#43)#153 AS profit#156]

(84) TakeOrderedAndProject
Input [5]: [channel#135, id#136, sales#154, returns#155, profit#156]
Arguments: 100, [channel#135 ASC NULLS FIRST, id#136 ASC NULLS FIRST], [channel#135, id#136, sales#154, returns#155, profit#156]

