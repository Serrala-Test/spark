== Physical Plan ==
TakeOrderedAndProject (21)
+- * HashAggregate (20)
   +- Exchange (19)
      +- * HashAggregate (18)
         +- * Project (17)
            +- * BroadcastHashJoin Inner BuildRight (16)
               :- * Project (10)
               :  +- * BroadcastHashJoin Inner BuildLeft (9)
               :     :- BroadcastExchange (5)
               :     :  +- * Project (4)
               :     :     +- * Filter (3)
               :     :        +- * ColumnarToRow (2)
               :     :           +- Scan parquet default.item (1)
               :     +- * Filter (8)
               :        +- * ColumnarToRow (7)
               :           +- Scan parquet default.store_sales (6)
               +- BroadcastExchange (15)
                  +- * Project (14)
                     +- * Filter (13)
                        +- * ColumnarToRow (12)
                           +- Scan parquet default.date_dim (11)


(1) Scan parquet default.item
Output [4]: [i_item_sk#1, i_brand_id#2, i_brand#3, i_manufact_id#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,128), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manufact_id:int>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#1, i_brand_id#2, i_brand#3, i_manufact_id#4]

(3) Filter [codegen id : 1]
Input [4]: [i_item_sk#1, i_brand_id#2, i_brand#3, i_manufact_id#4]
Condition : ((isnotnull(i_manufact_id#4) AND (i_manufact_id#4 = 128)) AND isnotnull(i_item_sk#1))

(4) Project [codegen id : 1]
Output [3]: [i_item_sk#1, i_brand_id#2, i_brand#3]
Input [4]: [i_item_sk#1, i_brand_id#2, i_brand#3, i_manufact_id#4]

(5) BroadcastExchange
Input [3]: [i_item_sk#1, i_brand_id#2, i_brand#3]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#5]

(6) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#6, ss_item_sk#7, ss_ext_sales_price#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>

(7) ColumnarToRow
Input [3]: [ss_sold_date_sk#6, ss_item_sk#7, ss_ext_sales_price#8]

(8) Filter
Input [3]: [ss_sold_date_sk#6, ss_item_sk#7, ss_ext_sales_price#8]
Condition : (isnotnull(ss_sold_date_sk#6) AND isnotnull(ss_item_sk#7))

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [i_item_sk#1]
Right keys [1]: [ss_item_sk#7]
Join condition: None

(10) Project [codegen id : 3]
Output [4]: [i_brand_id#2, i_brand#3, ss_sold_date_sk#6, ss_ext_sales_price#8]
Input [6]: [i_item_sk#1, i_brand_id#2, i_brand#3, ss_sold_date_sk#6, ss_item_sk#7, ss_ext_sales_price#8]

(11) Scan parquet default.date_dim
Output [3]: [d_date_sk#9, d_year#10, d_moy#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(12) ColumnarToRow [codegen id : 2]
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]

(13) Filter [codegen id : 2]
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]
Condition : ((isnotnull(d_moy#11) AND (d_moy#11 = 11)) AND isnotnull(d_date_sk#9))

(14) Project [codegen id : 2]
Output [2]: [d_date_sk#9, d_year#10]
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]

(15) BroadcastExchange
Input [2]: [d_date_sk#9, d_year#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(16) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#9]
Join condition: None

(17) Project [codegen id : 3]
Output [4]: [d_year#10, ss_ext_sales_price#8, i_brand_id#2, i_brand#3]
Input [6]: [i_brand_id#2, i_brand#3, ss_sold_date_sk#6, ss_ext_sales_price#8, d_date_sk#9, d_year#10]

(18) HashAggregate [codegen id : 3]
Input [4]: [d_year#10, ss_ext_sales_price#8, i_brand_id#2, i_brand#3]
Keys [3]: [d_year#10, i_brand#3, i_brand_id#2]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#8))]
Aggregate Attributes [1]: [sum#13]
Results [4]: [d_year#10, i_brand#3, i_brand_id#2, sum#14]

(19) Exchange
Input [4]: [d_year#10, i_brand#3, i_brand_id#2, sum#14]
Arguments: hashpartitioning(d_year#10, i_brand#3, i_brand_id#2, 5), true, [id=#15]

(20) HashAggregate [codegen id : 4]
Input [4]: [d_year#10, i_brand#3, i_brand_id#2, sum#14]
Keys [3]: [d_year#10, i_brand#3, i_brand_id#2]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#8))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#8))#16]
Results [4]: [d_year#10, i_brand_id#2 AS brand_id#17, i_brand#3 AS brand#18, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#8))#16,17,2) AS sum_agg#19]

(21) TakeOrderedAndProject
Input [4]: [d_year#10, brand_id#17, brand#18, sum_agg#19]
Arguments: 100, [d_year#10 ASC NULLS FIRST, sum_agg#19 DESC NULLS LAST, brand_id#17 ASC NULLS FIRST], [d_year#10, brand_id#17, brand#18, sum_agg#19]

