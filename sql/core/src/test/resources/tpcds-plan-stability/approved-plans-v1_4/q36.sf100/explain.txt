== Physical Plan ==
TakeOrderedAndProject (36)
+- * Project (35)
   +- Window (34)
      +- * Sort (33)
         +- Exchange (32)
            +- * HashAggregate (31)
               +- Exchange (30)
                  +- * HashAggregate (29)
                     +- * Expand (28)
                        +- * Project (27)
                           +- * SortMergeJoin Inner (26)
                              :- * Sort (19)
                              :  +- Exchange (18)
                              :     +- * Project (17)
                              :        +- * BroadcastHashJoin Inner BuildRight (16)
                              :           :- * Project (10)
                              :           :  +- * BroadcastHashJoin Inner BuildRight (9)
                              :           :     :- * Filter (3)
                              :           :     :  +- * ColumnarToRow (2)
                              :           :     :     +- Scan parquet default.store_sales (1)
                              :           :     +- BroadcastExchange (8)
                              :           :        +- * Project (7)
                              :           :           +- * Filter (6)
                              :           :              +- * ColumnarToRow (5)
                              :           :                 +- Scan parquet default.date_dim (4)
                              :           +- BroadcastExchange (15)
                              :              +- * Project (14)
                              :                 +- * Filter (13)
                              :                    +- * ColumnarToRow (12)
                              :                       +- Scan parquet default.store (11)
                              +- * Sort (25)
                                 +- Exchange (24)
                                    +- * Project (23)
                                       +- * Filter (22)
                                          +- * ColumnarToRow (21)
                                             +- Scan parquet default.item (20)


(1) Scan parquet default.store_sales
Output [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5]

(3) Filter [codegen id : 3]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5]
Condition : ((isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_item_sk#2)) AND isnotnull(ss_store_sk#3))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_year#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#7]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#6, d_year#7]
Condition : ((isnotnull(d_year#7) AND (d_year#7 = 2001)) AND isnotnull(d_date_sk#6))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_year#7]

(8) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#6]
Join condition: None

(10) Project [codegen id : 3]
Output [4]: [ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5, d_date_sk#6]

(11) Scan parquet default.store
Output [2]: [s_store_sk#9, s_state#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [s_store_sk#9, s_state#10]

(13) Filter [codegen id : 2]
Input [2]: [s_store_sk#9, s_state#10]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#10, 2, false, true) = TN) AND isnotnull(s_store_sk#9))

(14) Project [codegen id : 2]
Output [1]: [s_store_sk#9]
Input [2]: [s_store_sk#9, s_state#10]

(15) BroadcastExchange
Input [1]: [s_store_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#11]

(16) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#9]
Join condition: None

(17) Project [codegen id : 3]
Output [3]: [ss_item_sk#2, ss_ext_sales_price#4, ss_net_profit#5]
Input [5]: [ss_item_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_net_profit#5, s_store_sk#9]

(18) Exchange
Input [3]: [ss_item_sk#2, ss_ext_sales_price#4, ss_net_profit#5]
Arguments: hashpartitioning(ss_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#12]

(19) Sort [codegen id : 4]
Input [3]: [ss_item_sk#2, ss_ext_sales_price#4, ss_net_profit#5]
Arguments: [ss_item_sk#2 ASC NULLS FIRST], false, 0

(20) Scan parquet default.item
Output [3]: [i_item_sk#13, i_class#14, i_category#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(21) ColumnarToRow [codegen id : 5]
Input [3]: [i_item_sk#13, i_class#14, i_category#15]

(22) Filter [codegen id : 5]
Input [3]: [i_item_sk#13, i_class#14, i_category#15]
Condition : isnotnull(i_item_sk#13)

(23) Project [codegen id : 5]
Output [3]: [i_item_sk#13, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_class#14, 50, false, true) AS i_class#16, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#15, 50, false, true) AS i_category#17]
Input [3]: [i_item_sk#13, i_class#14, i_category#15]

(24) Exchange
Input [3]: [i_item_sk#13, i_class#16, i_category#17]
Arguments: hashpartitioning(i_item_sk#13, 5), ENSURE_REQUIREMENTS, [id=#18]

(25) Sort [codegen id : 6]
Input [3]: [i_item_sk#13, i_class#16, i_category#17]
Arguments: [i_item_sk#13 ASC NULLS FIRST], false, 0

(26) SortMergeJoin [codegen id : 7]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#13]
Join condition: None

(27) Project [codegen id : 7]
Output [4]: [ss_ext_sales_price#4, ss_net_profit#5, i_category#17 AS i_category#19, i_class#16 AS i_class#20]
Input [6]: [ss_item_sk#2, ss_ext_sales_price#4, ss_net_profit#5, i_item_sk#13, i_class#16, i_category#17]

(28) Expand [codegen id : 7]
Input [4]: [ss_ext_sales_price#4, ss_net_profit#5, i_category#19, i_class#20]
Arguments: [List(ss_ext_sales_price#4, ss_net_profit#5, i_category#19, i_class#20, 0), List(ss_ext_sales_price#4, ss_net_profit#5, i_category#19, null, 1), List(ss_ext_sales_price#4, ss_net_profit#5, null, null, 3)], [ss_ext_sales_price#4, ss_net_profit#5, i_category#21, i_class#22, spark_grouping_id#23]

(29) HashAggregate [codegen id : 7]
Input [5]: [ss_ext_sales_price#4, ss_net_profit#5, i_category#21, i_class#22, spark_grouping_id#23]
Keys [3]: [i_category#21, i_class#22, spark_grouping_id#23]
Functions [2]: [partial_sum(UnscaledValue(ss_net_profit#5)), partial_sum(UnscaledValue(ss_ext_sales_price#4))]
Aggregate Attributes [2]: [sum#24, sum#25]
Results [5]: [i_category#21, i_class#22, spark_grouping_id#23, sum#26, sum#27]

(30) Exchange
Input [5]: [i_category#21, i_class#22, spark_grouping_id#23, sum#26, sum#27]
Arguments: hashpartitioning(i_category#21, i_class#22, spark_grouping_id#23, 5), ENSURE_REQUIREMENTS, [id=#28]

(31) HashAggregate [codegen id : 8]
Input [5]: [i_category#21, i_class#22, spark_grouping_id#23, sum#26, sum#27]
Keys [3]: [i_category#21, i_class#22, spark_grouping_id#23]
Functions [2]: [sum(UnscaledValue(ss_net_profit#5)), sum(UnscaledValue(ss_ext_sales_price#4))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#5))#29, sum(UnscaledValue(ss_ext_sales_price#4))#30]
Results [7]: [CheckOverflow((promote_precision(MakeDecimal(sum(UnscaledValue(ss_net_profit#5))#29,17,2)) / promote_precision(MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#4))#30,17,2))), DecimalType(37,20), true) AS gross_margin#31, i_category#21, i_class#22, (cast((shiftright(spark_grouping_id#23, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#23, 0) & 1) as tinyint)) AS lochierarchy#32, (cast((shiftright(spark_grouping_id#23, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#23, 0) & 1) as tinyint)) AS _w1#33, CASE WHEN (cast((shiftright(spark_grouping_id#23, 0) & 1) as tinyint) = 0) THEN i_category#21 END AS _w2#34, CheckOverflow((promote_precision(MakeDecimal(sum(UnscaledValue(ss_net_profit#5))#29,17,2)) / promote_precision(MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#4))#30,17,2))), DecimalType(37,20), true) AS _w3#35]

(32) Exchange
Input [7]: [gross_margin#31, i_category#21, i_class#22, lochierarchy#32, _w1#33, _w2#34, _w3#35]
Arguments: hashpartitioning(_w1#33, _w2#34, 5), ENSURE_REQUIREMENTS, [id=#36]

(33) Sort [codegen id : 9]
Input [7]: [gross_margin#31, i_category#21, i_class#22, lochierarchy#32, _w1#33, _w2#34, _w3#35]
Arguments: [_w1#33 ASC NULLS FIRST, _w2#34 ASC NULLS FIRST, _w3#35 ASC NULLS FIRST], false, 0

(34) Window
Input [7]: [gross_margin#31, i_category#21, i_class#22, lochierarchy#32, _w1#33, _w2#34, _w3#35]
Arguments: [rank(_w3#35) windowspecdefinition(_w1#33, _w2#34, _w3#35 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#37], [_w1#33, _w2#34], [_w3#35 ASC NULLS FIRST]

(35) Project [codegen id : 10]
Output [5]: [gross_margin#31, i_category#21, i_class#22, lochierarchy#32, rank_within_parent#37]
Input [8]: [gross_margin#31, i_category#21, i_class#22, lochierarchy#32, _w1#33, _w2#34, _w3#35, rank_within_parent#37]

(36) TakeOrderedAndProject
Input [5]: [gross_margin#31, i_category#21, i_class#22, lochierarchy#32, rank_within_parent#37]
Arguments: 100, [lochierarchy#32 DESC NULLS LAST, CASE WHEN (lochierarchy#32 = 0) THEN i_category#21 END ASC NULLS FIRST, rank_within_parent#37 ASC NULLS FIRST], [gross_margin#31, i_category#21, i_class#22, lochierarchy#32, rank_within_parent#37]

