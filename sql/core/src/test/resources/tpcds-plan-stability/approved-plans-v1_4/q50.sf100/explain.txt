== Physical Plan ==
TakeOrderedAndProject (35)
+- * HashAggregate (34)
   +- Exchange (33)
      +- * HashAggregate (32)
         +- * Project (31)
            +- * BroadcastHashJoin Inner BuildRight (30)
               :- * Project (25)
               :  +- * BroadcastHashJoin Inner BuildRight (24)
               :     :- * Project (19)
               :     :  +- * BroadcastHashJoin Inner BuildRight (18)
               :     :     :- * Project (12)
               :     :     :  +- * SortMergeJoin Inner (11)
               :     :     :     :- * Sort (5)
               :     :     :     :  +- Exchange (4)
               :     :     :     :     +- * Filter (3)
               :     :     :     :        +- * ColumnarToRow (2)
               :     :     :     :           +- Scan parquet default.store_sales (1)
               :     :     :     +- * Sort (10)
               :     :     :        +- Exchange (9)
               :     :     :           +- * Filter (8)
               :     :     :              +- * ColumnarToRow (7)
               :     :     :                 +- Scan parquet default.store_returns (6)
               :     :     +- BroadcastExchange (17)
               :     :        +- * Project (16)
               :     :           +- * Filter (15)
               :     :              +- * ColumnarToRow (14)
               :     :                 +- Scan parquet default.date_dim (13)
               :     +- BroadcastExchange (23)
               :        +- * Filter (22)
               :           +- * ColumnarToRow (21)
               :              +- Scan parquet default.store (20)
               +- BroadcastExchange (29)
                  +- * Filter (28)
                     +- * ColumnarToRow (27)
                        +- Scan parquet default.date_dim (26)


(1) Scan parquet default.store_sales
Output [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_store_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5]

(3) Filter [codegen id : 1]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5]
Condition : ((((isnotnull(ss_ticket_number#5) AND isnotnull(ss_item_sk#2)) AND isnotnull(ss_customer_sk#3)) AND isnotnull(ss_store_sk#4)) AND isnotnull(ss_sold_date_sk#1))

(4) Exchange
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5]
Arguments: hashpartitioning(cast(ss_ticket_number#5 as bigint), cast(ss_item_sk#2 as bigint), cast(ss_customer_sk#3 as bigint), 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5]
Arguments: [cast(ss_ticket_number#5 as bigint) ASC NULLS FIRST, cast(ss_item_sk#2 as bigint) ASC NULLS FIRST, cast(ss_customer_sk#3 as bigint) ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_returns
Output [4]: [sr_returned_date_sk#7, sr_item_sk#8, sr_customer_sk#9, sr_ticket_number#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk), IsNotNull(sr_customer_sk), IsNotNull(sr_returned_date_sk)]
ReadSchema: struct<sr_returned_date_sk:bigint,sr_item_sk:bigint,sr_customer_sk:bigint,sr_ticket_number:bigint>

(7) ColumnarToRow [codegen id : 3]
Input [4]: [sr_returned_date_sk#7, sr_item_sk#8, sr_customer_sk#9, sr_ticket_number#10]

(8) Filter [codegen id : 3]
Input [4]: [sr_returned_date_sk#7, sr_item_sk#8, sr_customer_sk#9, sr_ticket_number#10]
Condition : (((isnotnull(sr_ticket_number#10) AND isnotnull(sr_item_sk#8)) AND isnotnull(sr_customer_sk#9)) AND isnotnull(sr_returned_date_sk#7))

(9) Exchange
Input [4]: [sr_returned_date_sk#7, sr_item_sk#8, sr_customer_sk#9, sr_ticket_number#10]
Arguments: hashpartitioning(sr_ticket_number#10, sr_item_sk#8, sr_customer_sk#9, 5), ENSURE_REQUIREMENTS, [id=#11]

(10) Sort [codegen id : 4]
Input [4]: [sr_returned_date_sk#7, sr_item_sk#8, sr_customer_sk#9, sr_ticket_number#10]
Arguments: [sr_ticket_number#10 ASC NULLS FIRST, sr_item_sk#8 ASC NULLS FIRST, sr_customer_sk#9 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 8]
Left keys [3]: [cast(ss_ticket_number#5 as bigint), cast(ss_item_sk#2 as bigint), cast(ss_customer_sk#3 as bigint)]
Right keys [3]: [sr_ticket_number#10, sr_item_sk#8, sr_customer_sk#9]
Join condition: None

(12) Project [codegen id : 8]
Output [3]: [ss_sold_date_sk#1, ss_store_sk#4, sr_returned_date_sk#7]
Input [9]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, sr_returned_date_sk#7, sr_item_sk#8, sr_customer_sk#9, sr_ticket_number#10]

(13) Scan parquet default.date_dim
Output [3]: [d_date_sk#12, d_year#13, d_moy#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,8), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(14) ColumnarToRow [codegen id : 5]
Input [3]: [d_date_sk#12, d_year#13, d_moy#14]

(15) Filter [codegen id : 5]
Input [3]: [d_date_sk#12, d_year#13, d_moy#14]
Condition : ((((isnotnull(d_year#13) AND isnotnull(d_moy#14)) AND (d_year#13 = 2001)) AND (d_moy#14 = 8)) AND isnotnull(d_date_sk#12))

(16) Project [codegen id : 5]
Output [1]: [d_date_sk#12]
Input [3]: [d_date_sk#12, d_year#13, d_moy#14]

(17) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15]

(18) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [sr_returned_date_sk#7]
Right keys [1]: [cast(d_date_sk#12 as bigint)]
Join condition: None

(19) Project [codegen id : 8]
Output [3]: [ss_sold_date_sk#1, ss_store_sk#4, sr_returned_date_sk#7]
Input [4]: [ss_sold_date_sk#1, ss_store_sk#4, sr_returned_date_sk#7, d_date_sk#12]

(20) Scan parquet default.store
Output [11]: [s_store_sk#16, s_store_name#17, s_company_id#18, s_street_number#19, s_street_name#20, s_street_type#21, s_suite_number#22, s_city#23, s_county#24, s_state#25, s_zip#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_company_id:int,s_street_number:string,s_street_name:string,s_street_type:string,s_suite_number:string,s_city:string,s_county:string,s_state:string,s_zip:string>

(21) ColumnarToRow [codegen id : 6]
Input [11]: [s_store_sk#16, s_store_name#17, s_company_id#18, s_street_number#19, s_street_name#20, s_street_type#21, s_suite_number#22, s_city#23, s_county#24, s_state#25, s_zip#26]

(22) Filter [codegen id : 6]
Input [11]: [s_store_sk#16, s_store_name#17, s_company_id#18, s_street_number#19, s_street_name#20, s_street_type#21, s_suite_number#22, s_city#23, s_county#24, s_state#25, s_zip#26]
Condition : isnotnull(s_store_sk#16)

(23) BroadcastExchange
Input [11]: [s_store_sk#16, s_store_name#17, s_company_id#18, s_street_number#19, s_street_name#20, s_street_type#21, s_suite_number#22, s_city#23, s_county#24, s_state#25, s_zip#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(24) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [s_store_sk#16]
Join condition: None

(25) Project [codegen id : 8]
Output [12]: [ss_sold_date_sk#1, sr_returned_date_sk#7, s_store_name#17, s_company_id#18, s_street_number#19, s_street_name#20, s_street_type#21, s_suite_number#22, s_city#23, s_county#24, s_state#25, s_zip#26]
Input [14]: [ss_sold_date_sk#1, ss_store_sk#4, sr_returned_date_sk#7, s_store_sk#16, s_store_name#17, s_company_id#18, s_street_number#19, s_street_name#20, s_street_type#21, s_suite_number#22, s_city#23, s_county#24, s_state#25, s_zip#26]

(26) Scan parquet default.date_dim
Output [1]: [d_date_sk#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int>

(27) ColumnarToRow [codegen id : 7]
Input [1]: [d_date_sk#28]

(28) Filter [codegen id : 7]
Input [1]: [d_date_sk#28]
Condition : isnotnull(d_date_sk#28)

(29) BroadcastExchange
Input [1]: [d_date_sk#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(30) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#28]
Join condition: None

(31) Project [codegen id : 8]
Output [12]: [ss_sold_date_sk#1, sr_returned_date_sk#7, s_store_name#17, s_company_id#18, s_street_number#19, s_street_name#20, s_street_type#21, s_suite_number#22, s_city#23, s_county#24, s_state#25, s_zip#26]
Input [13]: [ss_sold_date_sk#1, sr_returned_date_sk#7, s_store_name#17, s_company_id#18, s_street_number#19, s_street_name#20, s_street_type#21, s_suite_number#22, s_city#23, s_county#24, s_state#25, s_zip#26, d_date_sk#28]

(32) HashAggregate [codegen id : 8]
Input [12]: [ss_sold_date_sk#1, sr_returned_date_sk#7, s_store_name#17, s_company_id#18, s_street_number#19, s_street_name#20, s_street_type#21, s_suite_number#22, s_city#23, s_county#24, s_state#25, s_zip#26]
Keys [10]: [s_store_name#17, s_company_id#18, s_street_number#19, s_street_name#20, s_street_type#21, s_suite_number#22, s_city#23, s_county#24, s_state#25, s_zip#26]
Functions [5]: [partial_sum(CASE WHEN ((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) <= 30) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) > 30) AND ((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) <= 60)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) > 60) AND ((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) <= 90)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) > 90) AND ((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) <= 120)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN ((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) > 120) THEN 1 ELSE 0 END)]
Aggregate Attributes [5]: [sum#30, sum#31, sum#32, sum#33, sum#34]
Results [15]: [s_store_name#17, s_company_id#18, s_street_number#19, s_street_name#20, s_street_type#21, s_suite_number#22, s_city#23, s_county#24, s_state#25, s_zip#26, sum#35, sum#36, sum#37, sum#38, sum#39]

(33) Exchange
Input [15]: [s_store_name#17, s_company_id#18, s_street_number#19, s_street_name#20, s_street_type#21, s_suite_number#22, s_city#23, s_county#24, s_state#25, s_zip#26, sum#35, sum#36, sum#37, sum#38, sum#39]
Arguments: hashpartitioning(s_store_name#17, s_company_id#18, s_street_number#19, s_street_name#20, s_street_type#21, s_suite_number#22, s_city#23, s_county#24, s_state#25, s_zip#26, 5), ENSURE_REQUIREMENTS, [id=#40]

(34) HashAggregate [codegen id : 9]
Input [15]: [s_store_name#17, s_company_id#18, s_street_number#19, s_street_name#20, s_street_type#21, s_suite_number#22, s_city#23, s_county#24, s_state#25, s_zip#26, sum#35, sum#36, sum#37, sum#38, sum#39]
Keys [10]: [s_store_name#17, s_company_id#18, s_street_number#19, s_street_name#20, s_street_type#21, s_suite_number#22, s_city#23, s_county#24, s_state#25, s_zip#26]
Functions [5]: [sum(CASE WHEN ((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) <= 30) THEN 1 ELSE 0 END), sum(CASE WHEN (((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) > 30) AND ((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) <= 60)) THEN 1 ELSE 0 END), sum(CASE WHEN (((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) > 60) AND ((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) <= 90)) THEN 1 ELSE 0 END), sum(CASE WHEN (((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) > 90) AND ((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) <= 120)) THEN 1 ELSE 0 END), sum(CASE WHEN ((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) > 120) THEN 1 ELSE 0 END)]
Aggregate Attributes [5]: [sum(CASE WHEN ((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) <= 30) THEN 1 ELSE 0 END)#41, sum(CASE WHEN (((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) > 30) AND ((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) <= 60)) THEN 1 ELSE 0 END)#42, sum(CASE WHEN (((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) > 60) AND ((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) <= 90)) THEN 1 ELSE 0 END)#43, sum(CASE WHEN (((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) > 90) AND ((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) <= 120)) THEN 1 ELSE 0 END)#44, sum(CASE WHEN ((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) > 120) THEN 1 ELSE 0 END)#45]
Results [15]: [s_store_name#17, s_company_id#18, s_street_number#19, s_street_name#20, s_street_type#21, s_suite_number#22, s_city#23, s_county#24, s_state#25, s_zip#26, sum(CASE WHEN ((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) <= 30) THEN 1 ELSE 0 END)#41 AS 30 days #46, sum(CASE WHEN (((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) > 30) AND ((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) <= 60)) THEN 1 ELSE 0 END)#42 AS 31 - 60 days #47, sum(CASE WHEN (((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) > 60) AND ((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) <= 90)) THEN 1 ELSE 0 END)#43 AS 61 - 90 days #48, sum(CASE WHEN (((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) > 90) AND ((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) <= 120)) THEN 1 ELSE 0 END)#44 AS 91 - 120 days #49, sum(CASE WHEN ((sr_returned_date_sk#7 - cast(ss_sold_date_sk#1 as bigint)) > 120) THEN 1 ELSE 0 END)#45 AS >120 days #50]

(35) TakeOrderedAndProject
Input [15]: [s_store_name#17, s_company_id#18, s_street_number#19, s_street_name#20, s_street_type#21, s_suite_number#22, s_city#23, s_county#24, s_state#25, s_zip#26, 30 days #46, 31 - 60 days #47, 61 - 90 days #48, 91 - 120 days #49, >120 days #50]
Arguments: 100, [s_store_name#17 ASC NULLS FIRST, s_company_id#18 ASC NULLS FIRST, s_street_number#19 ASC NULLS FIRST, s_street_name#20 ASC NULLS FIRST, s_street_type#21 ASC NULLS FIRST, s_suite_number#22 ASC NULLS FIRST, s_city#23 ASC NULLS FIRST, s_county#24 ASC NULLS FIRST, s_state#25 ASC NULLS FIRST, s_zip#26 ASC NULLS FIRST], [s_store_name#17, s_company_id#18, s_street_number#19, s_street_name#20, s_street_type#21, s_suite_number#22, s_city#23, s_county#24, s_state#25, s_zip#26, 30 days #46, 31 - 60 days #47, 61 - 90 days #48, 91 - 120 days #49, >120 days #50]

