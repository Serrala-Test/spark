== Physical Plan ==
* Sort (58)
+- Exchange (57)
   +- * SortMergeJoin Inner (56)
      :- * Sort (29)
      :  +- Exchange (28)
      :     +- * Project (27)
      :        +- * Filter (26)
      :           +- * HashAggregate (25)
      :              +- Exchange (24)
      :                 +- * HashAggregate (23)
      :                    +- * Project (22)
      :                       +- * BroadcastHashJoin Inner BuildRight (21)
      :                          :- * Project (15)
      :                          :  +- * BroadcastHashJoin Inner BuildRight (14)
      :                          :     :- * Project (9)
      :                          :     :  +- * BroadcastHashJoin Inner BuildLeft (8)
      :                          :     :     :- BroadcastExchange (4)
      :                          :     :     :  +- * Filter (3)
      :                          :     :     :     +- * ColumnarToRow (2)
      :                          :     :     :        +- Scan parquet default.inventory (1)
      :                          :     :     +- * Filter (7)
      :                          :     :        +- * ColumnarToRow (6)
      :                          :     :           +- Scan parquet default.item (5)
      :                          :     +- BroadcastExchange (13)
      :                          :        +- * Filter (12)
      :                          :           +- * ColumnarToRow (11)
      :                          :              +- Scan parquet default.warehouse (10)
      :                          +- BroadcastExchange (20)
      :                             +- * Project (19)
      :                                +- * Filter (18)
      :                                   +- * ColumnarToRow (17)
      :                                      +- Scan parquet default.date_dim (16)
      +- * Sort (55)
         +- Exchange (54)
            +- * Project (53)
               +- * Filter (52)
                  +- * HashAggregate (51)
                     +- Exchange (50)
                        +- * HashAggregate (49)
                           +- * Project (48)
                              +- * BroadcastHashJoin Inner BuildRight (47)
                                 :- * Project (41)
                                 :  +- * BroadcastHashJoin Inner BuildRight (40)
                                 :     :- * Project (38)
                                 :     :  +- * BroadcastHashJoin Inner BuildLeft (37)
                                 :     :     :- BroadcastExchange (33)
                                 :     :     :  +- * Filter (32)
                                 :     :     :     +- * ColumnarToRow (31)
                                 :     :     :        +- Scan parquet default.inventory (30)
                                 :     :     +- * Filter (36)
                                 :     :        +- * ColumnarToRow (35)
                                 :     :           +- Scan parquet default.item (34)
                                 :     +- ReusedExchange (39)
                                 +- BroadcastExchange (46)
                                    +- * Project (45)
                                       +- * Filter (44)
                                          +- * ColumnarToRow (43)
                                             +- Scan parquet default.date_dim (42)


(1) Scan parquet default.inventory
Output [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(inv_date_sk#4), dynamicpruningexpression(inv_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)]
ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Condition : (isnotnull(inv_item_sk#1) AND isnotnull(inv_warehouse_sk#2))

(4) BroadcastExchange
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#6]

(5) Scan parquet default.item
Output [1]: [i_item_sk#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int>

(6) ColumnarToRow
Input [1]: [i_item_sk#7]

(7) Filter
Input [1]: [i_item_sk#7]
Condition : isnotnull(i_item_sk#7)

(8) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join condition: None

(9) Project [codegen id : 4]
Output [4]: [inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#7]
Input [5]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#7]

(10) Scan parquet default.warehouse
Output [2]: [w_warehouse_sk#8, w_warehouse_name#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>

(11) ColumnarToRow [codegen id : 2]
Input [2]: [w_warehouse_sk#8, w_warehouse_name#9]

(12) Filter [codegen id : 2]
Input [2]: [w_warehouse_sk#8, w_warehouse_name#9]
Condition : isnotnull(w_warehouse_sk#8)

(13) BroadcastExchange
Input [2]: [w_warehouse_sk#8, w_warehouse_name#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#10]

(14) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_warehouse_sk#2]
Right keys [1]: [w_warehouse_sk#8]
Join condition: None

(15) Project [codegen id : 4]
Output [5]: [inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#7, w_warehouse_sk#8, w_warehouse_name#9]
Input [6]: [inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#7, w_warehouse_sk#8, w_warehouse_name#9]

(16) Scan parquet default.date_dim
Output [3]: [d_date_sk#11, d_year#12, d_moy#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,1), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(17) ColumnarToRow [codegen id : 3]
Input [3]: [d_date_sk#11, d_year#12, d_moy#13]

(18) Filter [codegen id : 3]
Input [3]: [d_date_sk#11, d_year#12, d_moy#13]
Condition : ((((isnotnull(d_year#12) AND isnotnull(d_moy#13)) AND (d_year#12 = 2001)) AND (d_moy#13 = 1)) AND isnotnull(d_date_sk#11))

(19) Project [codegen id : 3]
Output [2]: [d_date_sk#11, d_moy#13]
Input [3]: [d_date_sk#11, d_year#12, d_moy#13]

(20) BroadcastExchange
Input [2]: [d_date_sk#11, d_moy#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(21) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_date_sk#4]
Right keys [1]: [d_date_sk#11]
Join condition: None

(22) Project [codegen id : 4]
Output [5]: [inv_quantity_on_hand#3, i_item_sk#7, w_warehouse_sk#8, w_warehouse_name#9, d_moy#13]
Input [7]: [inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#7, w_warehouse_sk#8, w_warehouse_name#9, d_date_sk#11, d_moy#13]

(23) HashAggregate [codegen id : 4]
Input [5]: [inv_quantity_on_hand#3, i_item_sk#7, w_warehouse_sk#8, w_warehouse_name#9, d_moy#13]
Keys [4]: [w_warehouse_name#9, w_warehouse_sk#8, i_item_sk#7, d_moy#13]
Functions [2]: [partial_stddev_samp(cast(inv_quantity_on_hand#3 as double)), partial_avg(inv_quantity_on_hand#3)]
Aggregate Attributes [5]: [n#15, avg#16, m2#17, sum#18, count#19]
Results [9]: [w_warehouse_name#9, w_warehouse_sk#8, i_item_sk#7, d_moy#13, n#20, avg#21, m2#22, sum#23, count#24]

(24) Exchange
Input [9]: [w_warehouse_name#9, w_warehouse_sk#8, i_item_sk#7, d_moy#13, n#20, avg#21, m2#22, sum#23, count#24]
Arguments: hashpartitioning(w_warehouse_name#9, w_warehouse_sk#8, i_item_sk#7, d_moy#13, 5), ENSURE_REQUIREMENTS, [id=#25]

(25) HashAggregate [codegen id : 5]
Input [9]: [w_warehouse_name#9, w_warehouse_sk#8, i_item_sk#7, d_moy#13, n#20, avg#21, m2#22, sum#23, count#24]
Keys [4]: [w_warehouse_name#9, w_warehouse_sk#8, i_item_sk#7, d_moy#13]
Functions [2]: [stddev_samp(cast(inv_quantity_on_hand#3 as double)), avg(inv_quantity_on_hand#3)]
Aggregate Attributes [2]: [stddev_samp(cast(inv_quantity_on_hand#3 as double))#26, avg(inv_quantity_on_hand#3)#27]
Results [5]: [w_warehouse_sk#8, i_item_sk#7, d_moy#13, stddev_samp(cast(inv_quantity_on_hand#3 as double))#26 AS stdev#28, avg(inv_quantity_on_hand#3)#27 AS mean#29]

(26) Filter [codegen id : 5]
Input [5]: [w_warehouse_sk#8, i_item_sk#7, d_moy#13, stdev#28, mean#29]
Condition : (((isnotnull(mean#29) AND isnotnull(stdev#28)) AND NOT (mean#29 = 0.0)) AND ((stdev#28 / mean#29) > 1.0))

(27) Project [codegen id : 5]
Output [5]: [w_warehouse_sk#8, i_item_sk#7, d_moy#13, mean#29, CASE WHEN (mean#29 = 0.0) THEN null ELSE (stdev#28 / mean#29) END AS cov#30]
Input [5]: [w_warehouse_sk#8, i_item_sk#7, d_moy#13, stdev#28, mean#29]

(28) Exchange
Input [5]: [w_warehouse_sk#8, i_item_sk#7, d_moy#13, mean#29, cov#30]
Arguments: hashpartitioning(i_item_sk#7, w_warehouse_sk#8, 5), ENSURE_REQUIREMENTS, [id=#31]

(29) Sort [codegen id : 6]
Input [5]: [w_warehouse_sk#8, i_item_sk#7, d_moy#13, mean#29, cov#30]
Arguments: [i_item_sk#7 ASC NULLS FIRST, w_warehouse_sk#8 ASC NULLS FIRST], false, 0

(30) Scan parquet default.inventory
Output [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(inv_date_sk#4), dynamicpruningexpression(inv_date_sk#4 IN dynamicpruning#32)]
PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)]
ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(31) ColumnarToRow [codegen id : 7]
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]

(32) Filter [codegen id : 7]
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Condition : (isnotnull(inv_item_sk#1) AND isnotnull(inv_warehouse_sk#2))

(33) BroadcastExchange
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#33]

(34) Scan parquet default.item
Output [1]: [i_item_sk#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int>

(35) ColumnarToRow
Input [1]: [i_item_sk#34]

(36) Filter
Input [1]: [i_item_sk#34]
Condition : isnotnull(i_item_sk#34)

(37) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [inv_item_sk#1]
Right keys [1]: [i_item_sk#34]
Join condition: None

(38) Project [codegen id : 10]
Output [4]: [inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#34]
Input [5]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#34]

(39) ReusedExchange [Reuses operator id: 13]
Output [2]: [w_warehouse_sk#35, w_warehouse_name#36]

(40) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [inv_warehouse_sk#2]
Right keys [1]: [w_warehouse_sk#35]
Join condition: None

(41) Project [codegen id : 10]
Output [5]: [inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#34, w_warehouse_sk#35, w_warehouse_name#36]
Input [6]: [inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#34, w_warehouse_sk#35, w_warehouse_name#36]

(42) Scan parquet default.date_dim
Output [3]: [d_date_sk#37, d_year#38, d_moy#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(43) ColumnarToRow [codegen id : 9]
Input [3]: [d_date_sk#37, d_year#38, d_moy#39]

(44) Filter [codegen id : 9]
Input [3]: [d_date_sk#37, d_year#38, d_moy#39]
Condition : ((((isnotnull(d_year#38) AND isnotnull(d_moy#39)) AND (d_year#38 = 2001)) AND (d_moy#39 = 2)) AND isnotnull(d_date_sk#37))

(45) Project [codegen id : 9]
Output [2]: [d_date_sk#37, d_moy#39]
Input [3]: [d_date_sk#37, d_year#38, d_moy#39]

(46) BroadcastExchange
Input [2]: [d_date_sk#37, d_moy#39]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#40]

(47) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [inv_date_sk#4]
Right keys [1]: [d_date_sk#37]
Join condition: None

(48) Project [codegen id : 10]
Output [5]: [inv_quantity_on_hand#3, i_item_sk#34, w_warehouse_sk#35, w_warehouse_name#36, d_moy#39]
Input [7]: [inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#34, w_warehouse_sk#35, w_warehouse_name#36, d_date_sk#37, d_moy#39]

(49) HashAggregate [codegen id : 10]
Input [5]: [inv_quantity_on_hand#3, i_item_sk#34, w_warehouse_sk#35, w_warehouse_name#36, d_moy#39]
Keys [4]: [w_warehouse_name#36, w_warehouse_sk#35, i_item_sk#34, d_moy#39]
Functions [2]: [partial_stddev_samp(cast(inv_quantity_on_hand#3 as double)), partial_avg(inv_quantity_on_hand#3)]
Aggregate Attributes [5]: [n#41, avg#42, m2#43, sum#44, count#45]
Results [9]: [w_warehouse_name#36, w_warehouse_sk#35, i_item_sk#34, d_moy#39, n#46, avg#47, m2#48, sum#49, count#50]

(50) Exchange
Input [9]: [w_warehouse_name#36, w_warehouse_sk#35, i_item_sk#34, d_moy#39, n#46, avg#47, m2#48, sum#49, count#50]
Arguments: hashpartitioning(w_warehouse_name#36, w_warehouse_sk#35, i_item_sk#34, d_moy#39, 5), ENSURE_REQUIREMENTS, [id=#51]

(51) HashAggregate [codegen id : 11]
Input [9]: [w_warehouse_name#36, w_warehouse_sk#35, i_item_sk#34, d_moy#39, n#46, avg#47, m2#48, sum#49, count#50]
Keys [4]: [w_warehouse_name#36, w_warehouse_sk#35, i_item_sk#34, d_moy#39]
Functions [2]: [stddev_samp(cast(inv_quantity_on_hand#3 as double)), avg(inv_quantity_on_hand#3)]
Aggregate Attributes [2]: [stddev_samp(cast(inv_quantity_on_hand#3 as double))#52, avg(inv_quantity_on_hand#3)#53]
Results [5]: [w_warehouse_sk#35, i_item_sk#34, d_moy#39, stddev_samp(cast(inv_quantity_on_hand#3 as double))#52 AS stdev#54, avg(inv_quantity_on_hand#3)#53 AS mean#55]

(52) Filter [codegen id : 11]
Input [5]: [w_warehouse_sk#35, i_item_sk#34, d_moy#39, stdev#54, mean#55]
Condition : (((isnotnull(mean#55) AND isnotnull(stdev#54)) AND NOT (mean#55 = 0.0)) AND ((stdev#54 / mean#55) > 1.0))

(53) Project [codegen id : 11]
Output [5]: [w_warehouse_sk#35, i_item_sk#34, d_moy#39, mean#55, CASE WHEN (mean#55 = 0.0) THEN null ELSE (stdev#54 / mean#55) END AS cov#56]
Input [5]: [w_warehouse_sk#35, i_item_sk#34, d_moy#39, stdev#54, mean#55]

(54) Exchange
Input [5]: [w_warehouse_sk#35, i_item_sk#34, d_moy#39, mean#55, cov#56]
Arguments: hashpartitioning(i_item_sk#34, w_warehouse_sk#35, 5), ENSURE_REQUIREMENTS, [id=#57]

(55) Sort [codegen id : 12]
Input [5]: [w_warehouse_sk#35, i_item_sk#34, d_moy#39, mean#55, cov#56]
Arguments: [i_item_sk#34 ASC NULLS FIRST, w_warehouse_sk#35 ASC NULLS FIRST], false, 0

(56) SortMergeJoin [codegen id : 13]
Left keys [2]: [i_item_sk#7, w_warehouse_sk#8]
Right keys [2]: [i_item_sk#34, w_warehouse_sk#35]
Join condition: None

(57) Exchange
Input [10]: [w_warehouse_sk#8, i_item_sk#7, d_moy#13, mean#29, cov#30, w_warehouse_sk#35, i_item_sk#34, d_moy#39, mean#55, cov#56]
Arguments: rangepartitioning(w_warehouse_sk#8 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#13 ASC NULLS FIRST, mean#29 ASC NULLS FIRST, cov#30 ASC NULLS FIRST, d_moy#39 ASC NULLS FIRST, mean#55 ASC NULLS FIRST, cov#56 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [id=#58]

(58) Sort [codegen id : 14]
Input [10]: [w_warehouse_sk#8, i_item_sk#7, d_moy#13, mean#29, cov#30, w_warehouse_sk#35, i_item_sk#34, d_moy#39, mean#55, cov#56]
Arguments: [w_warehouse_sk#8 ASC NULLS FIRST, i_item_sk#7 ASC NULLS FIRST, d_moy#13 ASC NULLS FIRST, mean#29 ASC NULLS FIRST, cov#30 ASC NULLS FIRST, d_moy#39 ASC NULLS FIRST, mean#55 ASC NULLS FIRST, cov#56 ASC NULLS FIRST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = inv_date_sk#4 IN dynamicpruning#5
ReusedExchange (59)


(59) ReusedExchange [Reuses operator id: 20]
Output [2]: [d_date_sk#11, d_moy#13]

Subquery:2 Hosting operator id = 30 Hosting Expression = inv_date_sk#4 IN dynamicpruning#32
ReusedExchange (60)


(60) ReusedExchange [Reuses operator id: 46]
Output [2]: [d_date_sk#37, d_moy#39]


