== Physical Plan ==
* HashAggregate (31)
+- Exchange (30)
   +- * HashAggregate (29)
      +- * Project (28)
         +- SortMergeJoin FullOuter (27)
            :- * Sort (13)
            :  +- * HashAggregate (12)
            :     +- Exchange (11)
            :        +- * HashAggregate (10)
            :           +- * Project (9)
            :              +- * BroadcastHashJoin Inner BuildLeft (8)
            :                 :- BroadcastExchange (3)
            :                 :  +- * ColumnarToRow (2)
            :                 :     +- Scan parquet default.store_sales (1)
            :                 +- * Project (7)
            :                    +- * Filter (6)
            :                       +- * ColumnarToRow (5)
            :                          +- Scan parquet default.date_dim (4)
            +- * Sort (26)
               +- * HashAggregate (25)
                  +- Exchange (24)
                     +- * HashAggregate (23)
                        +- * Project (22)
                           +- * BroadcastHashJoin Inner BuildLeft (21)
                              :- BroadcastExchange (16)
                              :  +- * ColumnarToRow (15)
                              :     +- Scan parquet default.catalog_sales (14)
                              +- * Project (20)
                                 +- * Filter (19)
                                    +- * ColumnarToRow (18)
                                       +- Scan parquet default.date_dim (17)


(1) Scan parquet default.store_sales
Output [3]: [ss_item_sk#1, ss_customer_sk#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(true)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [ss_item_sk#1, ss_customer_sk#2, ss_sold_date_sk#3]

(3) BroadcastExchange
Input [3]: [ss_item_sk#1, ss_customer_sk#2, ss_sold_date_sk#3]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#4]

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(5) ColumnarToRow
Input [2]: [d_date_sk#5, d_month_seq#6]

(6) Filter
Input [2]: [d_date_sk#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1200)) AND (d_month_seq#6 <= 1211)) AND isnotnull(d_date_sk#5))

(7) Project
Output [1]: [d_date_sk#5]
Input [2]: [d_date_sk#5, d_month_seq#6]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join condition: None

(9) Project [codegen id : 2]
Output [2]: [ss_item_sk#1, ss_customer_sk#2]
Input [4]: [ss_item_sk#1, ss_customer_sk#2, ss_sold_date_sk#3, d_date_sk#5]

(10) HashAggregate [codegen id : 2]
Input [2]: [ss_item_sk#1, ss_customer_sk#2]
Keys [2]: [ss_customer_sk#2, ss_item_sk#1]
Functions: []
Aggregate Attributes: []
Results [2]: [ss_customer_sk#2, ss_item_sk#1]

(11) Exchange
Input [2]: [ss_customer_sk#2, ss_item_sk#1]
Arguments: hashpartitioning(ss_customer_sk#2, ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#7]

(12) HashAggregate [codegen id : 3]
Input [2]: [ss_customer_sk#2, ss_item_sk#1]
Keys [2]: [ss_customer_sk#2, ss_item_sk#1]
Functions: []
Aggregate Attributes: []
Results [2]: [ss_customer_sk#2 AS customer_sk#8, ss_item_sk#1 AS item_sk#9]

(13) Sort [codegen id : 3]
Input [2]: [customer_sk#8, item_sk#9]
Arguments: [customer_sk#8 ASC NULLS FIRST, item_sk#9 ASC NULLS FIRST], false, 0

(14) Scan parquet default.catalog_sales
Output [3]: [cs_bill_customer_sk#10, cs_item_sk#11, cs_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#12), dynamicpruningexpression(true)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int>

(15) ColumnarToRow [codegen id : 4]
Input [3]: [cs_bill_customer_sk#10, cs_item_sk#11, cs_sold_date_sk#12]

(16) BroadcastExchange
Input [3]: [cs_bill_customer_sk#10, cs_item_sk#11, cs_sold_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#13]

(17) Scan parquet default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(18) ColumnarToRow
Input [2]: [d_date_sk#5, d_month_seq#6]

(19) Filter
Input [2]: [d_date_sk#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1200)) AND (d_month_seq#6 <= 1211)) AND isnotnull(d_date_sk#5))

(20) Project
Output [1]: [d_date_sk#5]
Input [2]: [d_date_sk#5, d_month_seq#6]

(21) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_sold_date_sk#12]
Right keys [1]: [d_date_sk#5]
Join condition: None

(22) Project [codegen id : 5]
Output [2]: [cs_bill_customer_sk#10, cs_item_sk#11]
Input [4]: [cs_bill_customer_sk#10, cs_item_sk#11, cs_sold_date_sk#12, d_date_sk#5]

(23) HashAggregate [codegen id : 5]
Input [2]: [cs_bill_customer_sk#10, cs_item_sk#11]
Keys [2]: [cs_bill_customer_sk#10, cs_item_sk#11]
Functions: []
Aggregate Attributes: []
Results [2]: [cs_bill_customer_sk#10, cs_item_sk#11]

(24) Exchange
Input [2]: [cs_bill_customer_sk#10, cs_item_sk#11]
Arguments: hashpartitioning(cs_bill_customer_sk#10, cs_item_sk#11, 5), ENSURE_REQUIREMENTS, [id=#14]

(25) HashAggregate [codegen id : 6]
Input [2]: [cs_bill_customer_sk#10, cs_item_sk#11]
Keys [2]: [cs_bill_customer_sk#10, cs_item_sk#11]
Functions: []
Aggregate Attributes: []
Results [2]: [cs_bill_customer_sk#10 AS customer_sk#15, cs_item_sk#11 AS item_sk#16]

(26) Sort [codegen id : 6]
Input [2]: [customer_sk#15, item_sk#16]
Arguments: [customer_sk#15 ASC NULLS FIRST, item_sk#16 ASC NULLS FIRST], false, 0

(27) SortMergeJoin
Left keys [2]: [customer_sk#8, item_sk#9]
Right keys [2]: [customer_sk#15, item_sk#16]
Join condition: None

(28) Project [codegen id : 7]
Output [2]: [customer_sk#8, customer_sk#15]
Input [4]: [customer_sk#8, item_sk#9, customer_sk#15, item_sk#16]

(29) HashAggregate [codegen id : 7]
Input [2]: [customer_sk#8, customer_sk#15]
Keys: []
Functions [3]: [partial_sum(CASE WHEN (isnotnull(customer_sk#8) AND isnull(customer_sk#15)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (isnull(customer_sk#8) AND isnotnull(customer_sk#15)) THEN 1 ELSE 0 END), partial_sum(CASE WHEN (isnotnull(customer_sk#8) AND isnotnull(customer_sk#15)) THEN 1 ELSE 0 END)]
Aggregate Attributes [3]: [sum#17, sum#18, sum#19]
Results [3]: [sum#20, sum#21, sum#22]

(30) Exchange
Input [3]: [sum#20, sum#21, sum#22]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#23]

(31) HashAggregate [codegen id : 8]
Input [3]: [sum#20, sum#21, sum#22]
Keys: []
Functions [3]: [sum(CASE WHEN (isnotnull(customer_sk#8) AND isnull(customer_sk#15)) THEN 1 ELSE 0 END), sum(CASE WHEN (isnull(customer_sk#8) AND isnotnull(customer_sk#15)) THEN 1 ELSE 0 END), sum(CASE WHEN (isnotnull(customer_sk#8) AND isnotnull(customer_sk#15)) THEN 1 ELSE 0 END)]
Aggregate Attributes [3]: [sum(CASE WHEN (isnotnull(customer_sk#8) AND isnull(customer_sk#15)) THEN 1 ELSE 0 END)#24, sum(CASE WHEN (isnull(customer_sk#8) AND isnotnull(customer_sk#15)) THEN 1 ELSE 0 END)#25, sum(CASE WHEN (isnotnull(customer_sk#8) AND isnotnull(customer_sk#15)) THEN 1 ELSE 0 END)#26]
Results [3]: [sum(CASE WHEN (isnotnull(customer_sk#8) AND isnull(customer_sk#15)) THEN 1 ELSE 0 END)#24 AS store_only#27, sum(CASE WHEN (isnull(customer_sk#8) AND isnotnull(customer_sk#15)) THEN 1 ELSE 0 END)#25 AS catalog_only#28, sum(CASE WHEN (isnotnull(customer_sk#8) AND isnotnull(customer_sk#15)) THEN 1 ELSE 0 END)#26 AS store_and_catalog#29]

