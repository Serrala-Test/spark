== Physical Plan ==
TakeOrderedAndProject (67)
+- * HashAggregate (66)
   +- Exchange (65)
      +- * HashAggregate (64)
         +- * Project (63)
            +- * SortMergeJoin LeftOuter (62)
               :- * Sort (55)
               :  +- Exchange (54)
               :     +- * Project (53)
               :        +- * BroadcastHashJoin LeftOuter BuildRight (52)
               :           :- * Project (47)
               :           :  +- * SortMergeJoin Inner (46)
               :           :     :- * Sort (34)
               :           :     :  +- Exchange (33)
               :           :     :     +- * Project (32)
               :           :     :        +- * BroadcastHashJoin Inner BuildRight (31)
               :           :     :           :- * Project (29)
               :           :     :           :  +- * SortMergeJoin Inner (28)
               :           :     :           :     :- * Sort (25)
               :           :     :           :     :  +- Exchange (24)
               :           :     :           :     :     +- * Project (23)
               :           :     :           :     :        +- * BroadcastHashJoin Inner BuildRight (22)
               :           :     :           :     :           :- * Project (17)
               :           :     :           :     :           :  +- * BroadcastHashJoin Inner BuildRight (16)
               :           :     :           :     :           :     :- * Project (10)
               :           :     :           :     :           :     :  +- * BroadcastHashJoin Inner BuildRight (9)
               :           :     :           :     :           :     :     :- * Filter (3)
               :           :     :           :     :           :     :     :  +- * ColumnarToRow (2)
               :           :     :           :     :           :     :     :     +- Scan parquet spark_catalog.default.catalog_sales (1)
               :           :     :           :     :           :     :     +- BroadcastExchange (8)
               :           :     :           :     :           :     :        +- * Project (7)
               :           :     :           :     :           :     :           +- * Filter (6)
               :           :     :           :     :           :     :              +- * ColumnarToRow (5)
               :           :     :           :     :           :     :                 +- Scan parquet spark_catalog.default.household_demographics (4)
               :           :     :           :     :           :     +- BroadcastExchange (15)
               :           :     :           :     :           :        +- * Project (14)
               :           :     :           :     :           :           +- * Filter (13)
               :           :     :           :     :           :              +- * ColumnarToRow (12)
               :           :     :           :     :           :                 +- Scan parquet spark_catalog.default.customer_demographics (11)
               :           :     :           :     :           +- BroadcastExchange (21)
               :           :     :           :     :              +- * Filter (20)
               :           :     :           :     :                 +- * ColumnarToRow (19)
               :           :     :           :     :                    +- Scan parquet spark_catalog.default.date_dim (18)
               :           :     :           :     +- * Sort (27)
               :           :     :           :        +- ReusedExchange (26)
               :           :     :           +- ReusedExchange (30)
               :           :     +- * Sort (45)
               :           :        +- Exchange (44)
               :           :           +- * Project (43)
               :           :              +- * BroadcastHashJoin Inner BuildRight (42)
               :           :                 :- * Filter (37)
               :           :                 :  +- * ColumnarToRow (36)
               :           :                 :     +- Scan parquet spark_catalog.default.inventory (35)
               :           :                 +- BroadcastExchange (41)
               :           :                    +- * Filter (40)
               :           :                       +- * ColumnarToRow (39)
               :           :                          +- Scan parquet spark_catalog.default.warehouse (38)
               :           +- BroadcastExchange (51)
               :              +- * Filter (50)
               :                 +- * ColumnarToRow (49)
               :                    +- Scan parquet spark_catalog.default.promotion (48)
               +- * Sort (61)
                  +- Exchange (60)
                     +- * Project (59)
                        +- * Filter (58)
                           +- * ColumnarToRow (57)
                              +- Scan parquet spark_catalog.default.catalog_returns (56)


(1) Scan parquet spark_catalog.default.catalog_sales
Output [8]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#8), dynamicpruningexpression(cs_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(cs_quantity), IsNotNull(cs_item_sk), IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_hdemo_sk), IsNotNull(cs_ship_date_sk)]
ReadSchema: struct<cs_ship_date_sk:int,cs_bill_cdemo_sk:int,cs_bill_hdemo_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_quantity:int>

(2) ColumnarToRow [codegen id : 4]
Input [8]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]

(3) Filter [codegen id : 4]
Input [8]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]
Condition : (((((isnotnull(cs_quantity#7) AND isnotnull(cs_item_sk#4)) AND isnotnull(cs_bill_cdemo_sk#2)) AND isnotnull(cs_bill_hdemo_sk#3)) AND isnotnull(cs_ship_date_sk#1)) AND might_contain(Subquery scalar-subquery#10, [id=#11], xxhash64(cs_item_sk#4, 42), false))

(4) Scan parquet spark_catalog.default.household_demographics
Output [2]: [hd_demo_sk#12, hd_buy_potential#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_buy_potential), EqualTo(hd_buy_potential,>10000         ), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [hd_demo_sk#12, hd_buy_potential#13]

(6) Filter [codegen id : 1]
Input [2]: [hd_demo_sk#12, hd_buy_potential#13]
Condition : ((isnotnull(hd_buy_potential#13) AND (hd_buy_potential#13 = >10000         )) AND isnotnull(hd_demo_sk#12))

(7) Project [codegen id : 1]
Output [1]: [hd_demo_sk#12]
Input [2]: [hd_demo_sk#12, hd_buy_potential#13]

(8) BroadcastExchange
Input [1]: [hd_demo_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_bill_hdemo_sk#3]
Right keys [1]: [hd_demo_sk#12]
Join type: Inner
Join condition: None

(10) Project [codegen id : 4]
Output [7]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]
Input [9]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, hd_demo_sk#12]

(11) Scan parquet spark_catalog.default.customer_demographics
Output [2]: [cd_demo_sk#14, cd_marital_status#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_marital_status), EqualTo(cd_marital_status,D), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [cd_demo_sk#14, cd_marital_status#15]

(13) Filter [codegen id : 2]
Input [2]: [cd_demo_sk#14, cd_marital_status#15]
Condition : ((isnotnull(cd_marital_status#15) AND (cd_marital_status#15 = D)) AND isnotnull(cd_demo_sk#14))

(14) Project [codegen id : 2]
Output [1]: [cd_demo_sk#14]
Input [2]: [cd_demo_sk#14, cd_marital_status#15]

(15) BroadcastExchange
Input [1]: [cd_demo_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(16) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_bill_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#14]
Join type: Inner
Join condition: None

(17) Project [codegen id : 4]
Output [6]: [cs_ship_date_sk#1, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]
Input [8]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, cd_demo_sk#14]

(18) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#16, d_date#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(19) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#16, d_date#17]

(20) Filter [codegen id : 3]
Input [2]: [d_date_sk#16, d_date#17]
Condition : (isnotnull(d_date#17) AND isnotnull(d_date_sk#16))

(21) BroadcastExchange
Input [2]: [d_date_sk#16, d_date#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(22) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_ship_date_sk#1]
Right keys [1]: [d_date_sk#16]
Join type: Inner
Join condition: None

(23) Project [codegen id : 4]
Output [6]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, d_date#17]
Input [8]: [cs_ship_date_sk#1, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, d_date_sk#16, d_date#17]

(24) Exchange
Input [6]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, d_date#17]
Arguments: hashpartitioning(cs_item_sk#4, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(25) Sort [codegen id : 5]
Input [6]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, d_date#17]
Arguments: [cs_item_sk#4 ASC NULLS FIRST], false, 0

(26) ReusedExchange [Reuses operator id: 71]
Output [2]: [i_item_sk#18, i_item_desc#19]

(27) Sort [codegen id : 7]
Input [2]: [i_item_sk#18, i_item_desc#19]
Arguments: [i_item_sk#18 ASC NULLS FIRST], false, 0

(28) SortMergeJoin [codegen id : 10]
Left keys [1]: [cs_item_sk#4]
Right keys [1]: [i_item_sk#18]
Join type: Inner
Join condition: None

(29) Project [codegen id : 10]
Output [7]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, d_date#17, i_item_desc#19]
Input [8]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, d_date#17, i_item_sk#18, i_item_desc#19]

(30) ReusedExchange [Reuses operator id: 85]
Output [4]: [d_date_sk#20, d_date#21, d_week_seq#22, d_date_sk#23]

(31) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#8]
Right keys [1]: [d_date_sk#20]
Join type: Inner
Join condition: (d_date#17 > date_add(d_date#21, 5))

(32) Project [codegen id : 10]
Output [7]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, i_item_desc#19, d_week_seq#22, d_date_sk#23]
Input [11]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, d_date#17, i_item_desc#19, d_date_sk#20, d_date#21, d_week_seq#22, d_date_sk#23]

(33) Exchange
Input [7]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, i_item_desc#19, d_week_seq#22, d_date_sk#23]
Arguments: hashpartitioning(cs_item_sk#4, d_date_sk#23, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(34) Sort [codegen id : 11]
Input [7]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, i_item_desc#19, d_week_seq#22, d_date_sk#23]
Arguments: [cs_item_sk#4 ASC NULLS FIRST, d_date_sk#23 ASC NULLS FIRST], false, 0

(35) Scan parquet spark_catalog.default.inventory
Output [4]: [inv_item_sk#24, inv_warehouse_sk#25, inv_quantity_on_hand#26, inv_date_sk#27]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(inv_date_sk#27), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(inv_quantity_on_hand), IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)]
ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(36) ColumnarToRow [codegen id : 13]
Input [4]: [inv_item_sk#24, inv_warehouse_sk#25, inv_quantity_on_hand#26, inv_date_sk#27]

(37) Filter [codegen id : 13]
Input [4]: [inv_item_sk#24, inv_warehouse_sk#25, inv_quantity_on_hand#26, inv_date_sk#27]
Condition : ((isnotnull(inv_quantity_on_hand#26) AND isnotnull(inv_item_sk#24)) AND isnotnull(inv_warehouse_sk#25))

(38) Scan parquet spark_catalog.default.warehouse
Output [2]: [w_warehouse_sk#28, w_warehouse_name#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>

(39) ColumnarToRow [codegen id : 12]
Input [2]: [w_warehouse_sk#28, w_warehouse_name#29]

(40) Filter [codegen id : 12]
Input [2]: [w_warehouse_sk#28, w_warehouse_name#29]
Condition : isnotnull(w_warehouse_sk#28)

(41) BroadcastExchange
Input [2]: [w_warehouse_sk#28, w_warehouse_name#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=6]

(42) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [inv_warehouse_sk#25]
Right keys [1]: [w_warehouse_sk#28]
Join type: Inner
Join condition: None

(43) Project [codegen id : 13]
Output [4]: [inv_item_sk#24, inv_quantity_on_hand#26, inv_date_sk#27, w_warehouse_name#29]
Input [6]: [inv_item_sk#24, inv_warehouse_sk#25, inv_quantity_on_hand#26, inv_date_sk#27, w_warehouse_sk#28, w_warehouse_name#29]

(44) Exchange
Input [4]: [inv_item_sk#24, inv_quantity_on_hand#26, inv_date_sk#27, w_warehouse_name#29]
Arguments: hashpartitioning(inv_item_sk#24, inv_date_sk#27, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(45) Sort [codegen id : 14]
Input [4]: [inv_item_sk#24, inv_quantity_on_hand#26, inv_date_sk#27, w_warehouse_name#29]
Arguments: [inv_item_sk#24 ASC NULLS FIRST, inv_date_sk#27 ASC NULLS FIRST], false, 0

(46) SortMergeJoin [codegen id : 16]
Left keys [2]: [cs_item_sk#4, d_date_sk#23]
Right keys [2]: [inv_item_sk#24, inv_date_sk#27]
Join type: Inner
Join condition: (inv_quantity_on_hand#26 < cs_quantity#7)

(47) Project [codegen id : 16]
Output [6]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, w_warehouse_name#29, i_item_desc#19, d_week_seq#22]
Input [11]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, i_item_desc#19, d_week_seq#22, d_date_sk#23, inv_item_sk#24, inv_quantity_on_hand#26, inv_date_sk#27, w_warehouse_name#29]

(48) Scan parquet spark_catalog.default.promotion
Output [1]: [p_promo_sk#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int>

(49) ColumnarToRow [codegen id : 15]
Input [1]: [p_promo_sk#30]

(50) Filter [codegen id : 15]
Input [1]: [p_promo_sk#30]
Condition : isnotnull(p_promo_sk#30)

(51) BroadcastExchange
Input [1]: [p_promo_sk#30]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=8]

(52) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [cs_promo_sk#5]
Right keys [1]: [p_promo_sk#30]
Join type: LeftOuter
Join condition: None

(53) Project [codegen id : 16]
Output [5]: [cs_item_sk#4, cs_order_number#6, w_warehouse_name#29, i_item_desc#19, d_week_seq#22]
Input [7]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, w_warehouse_name#29, i_item_desc#19, d_week_seq#22, p_promo_sk#30]

(54) Exchange
Input [5]: [cs_item_sk#4, cs_order_number#6, w_warehouse_name#29, i_item_desc#19, d_week_seq#22]
Arguments: hashpartitioning(cs_item_sk#4, cs_order_number#6, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(55) Sort [codegen id : 17]
Input [5]: [cs_item_sk#4, cs_order_number#6, w_warehouse_name#29, i_item_desc#19, d_week_seq#22]
Arguments: [cs_item_sk#4 ASC NULLS FIRST, cs_order_number#6 ASC NULLS FIRST], false, 0

(56) Scan parquet spark_catalog.default.catalog_returns
Output [3]: [cr_item_sk#31, cr_order_number#32, cr_returned_date_sk#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int>

(57) ColumnarToRow [codegen id : 18]
Input [3]: [cr_item_sk#31, cr_order_number#32, cr_returned_date_sk#33]

(58) Filter [codegen id : 18]
Input [3]: [cr_item_sk#31, cr_order_number#32, cr_returned_date_sk#33]
Condition : (isnotnull(cr_item_sk#31) AND isnotnull(cr_order_number#32))

(59) Project [codegen id : 18]
Output [2]: [cr_item_sk#31, cr_order_number#32]
Input [3]: [cr_item_sk#31, cr_order_number#32, cr_returned_date_sk#33]

(60) Exchange
Input [2]: [cr_item_sk#31, cr_order_number#32]
Arguments: hashpartitioning(cr_item_sk#31, cr_order_number#32, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(61) Sort [codegen id : 19]
Input [2]: [cr_item_sk#31, cr_order_number#32]
Arguments: [cr_item_sk#31 ASC NULLS FIRST, cr_order_number#32 ASC NULLS FIRST], false, 0

(62) SortMergeJoin [codegen id : 20]
Left keys [2]: [cs_item_sk#4, cs_order_number#6]
Right keys [2]: [cr_item_sk#31, cr_order_number#32]
Join type: LeftOuter
Join condition: None

(63) Project [codegen id : 20]
Output [3]: [w_warehouse_name#29, i_item_desc#19, d_week_seq#22]
Input [7]: [cs_item_sk#4, cs_order_number#6, w_warehouse_name#29, i_item_desc#19, d_week_seq#22, cr_item_sk#31, cr_order_number#32]

(64) HashAggregate [codegen id : 20]
Input [3]: [w_warehouse_name#29, i_item_desc#19, d_week_seq#22]
Keys [3]: [i_item_desc#19, w_warehouse_name#29, d_week_seq#22]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#34]
Results [4]: [i_item_desc#19, w_warehouse_name#29, d_week_seq#22, count#35]

(65) Exchange
Input [4]: [i_item_desc#19, w_warehouse_name#29, d_week_seq#22, count#35]
Arguments: hashpartitioning(i_item_desc#19, w_warehouse_name#29, d_week_seq#22, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(66) HashAggregate [codegen id : 21]
Input [4]: [i_item_desc#19, w_warehouse_name#29, d_week_seq#22, count#35]
Keys [3]: [i_item_desc#19, w_warehouse_name#29, d_week_seq#22]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#36]
Results [6]: [i_item_desc#19, w_warehouse_name#29, d_week_seq#22, count(1)#36 AS no_promo#37, count(1)#36 AS promo#38, count(1)#36 AS total_cnt#39]

(67) TakeOrderedAndProject
Input [6]: [i_item_desc#19, w_warehouse_name#29, d_week_seq#22, no_promo#37, promo#38, total_cnt#39]
Arguments: 100, [total_cnt#39 DESC NULLS LAST, i_item_desc#19 ASC NULLS FIRST, w_warehouse_name#29 ASC NULLS FIRST, d_week_seq#22 ASC NULLS FIRST], [i_item_desc#19, w_warehouse_name#29, d_week_seq#22, no_promo#37, promo#38, total_cnt#39]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#10, [id=#11]
ObjectHashAggregate (74)
+- Exchange (73)
   +- ObjectHashAggregate (72)
      +- Exchange (71)
         +- * Filter (70)
            +- * ColumnarToRow (69)
               +- Scan parquet spark_catalog.default.item (68)


(68) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#18, i_item_desc#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(69) ColumnarToRow [codegen id : 1]
Input [2]: [i_item_sk#18, i_item_desc#19]

(70) Filter [codegen id : 1]
Input [2]: [i_item_sk#18, i_item_desc#19]
Condition : isnotnull(i_item_sk#18)

(71) Exchange
Input [2]: [i_item_sk#18, i_item_desc#19]
Arguments: hashpartitioning(i_item_sk#18, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(72) ObjectHashAggregate
Input [2]: [i_item_sk#18, i_item_desc#19]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(i_item_sk#18, 42), 204000, 1632000, 0, 0)]
Aggregate Attributes [1]: [buf#40]
Results [1]: [buf#41]

(73) Exchange
Input [1]: [buf#41]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=13]

(74) ObjectHashAggregate
Input [1]: [buf#41]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(i_item_sk#18, 42), 204000, 1632000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(i_item_sk#18, 42), 204000, 1632000, 0, 0)#42]
Results [1]: [bloom_filter_agg(xxhash64(i_item_sk#18, 42), 204000, 1632000, 0, 0)#42 AS bloomFilter#43]

Subquery:2 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (85)
+- * Project (84)
   +- * BroadcastHashJoin Inner BuildLeft (83)
      :- BroadcastExchange (79)
      :  +- * Project (78)
      :     +- * Filter (77)
      :        +- * ColumnarToRow (76)
      :           +- Scan parquet spark_catalog.default.date_dim (75)
      +- * Filter (82)
         +- * ColumnarToRow (81)
            +- Scan parquet spark_catalog.default.date_dim (80)


(75) Scan parquet spark_catalog.default.date_dim
Output [4]: [d_date_sk#20, d_date#21, d_week_seq#22, d_year#44]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1999), IsNotNull(d_date_sk), IsNotNull(d_week_seq), IsNotNull(d_date)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_week_seq:int,d_year:int>

(76) ColumnarToRow [codegen id : 1]
Input [4]: [d_date_sk#20, d_date#21, d_week_seq#22, d_year#44]

(77) Filter [codegen id : 1]
Input [4]: [d_date_sk#20, d_date#21, d_week_seq#22, d_year#44]
Condition : ((((isnotnull(d_year#44) AND (d_year#44 = 1999)) AND isnotnull(d_date_sk#20)) AND isnotnull(d_week_seq#22)) AND isnotnull(d_date#21))

(78) Project [codegen id : 1]
Output [3]: [d_date_sk#20, d_date#21, d_week_seq#22]
Input [4]: [d_date_sk#20, d_date#21, d_week_seq#22, d_year#44]

(79) BroadcastExchange
Input [3]: [d_date_sk#20, d_date#21, d_week_seq#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [plan_id=14]

(80) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#23, d_week_seq#45]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(81) ColumnarToRow
Input [2]: [d_date_sk#23, d_week_seq#45]

(82) Filter
Input [2]: [d_date_sk#23, d_week_seq#45]
Condition : (isnotnull(d_week_seq#45) AND isnotnull(d_date_sk#23))

(83) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [d_week_seq#22]
Right keys [1]: [d_week_seq#45]
Join type: Inner
Join condition: None

(84) Project [codegen id : 2]
Output [4]: [d_date_sk#20, d_date#21, d_week_seq#22, d_date_sk#23]
Input [5]: [d_date_sk#20, d_date#21, d_week_seq#22, d_date_sk#23, d_week_seq#45]

(85) BroadcastExchange
Input [4]: [d_date_sk#20, d_date#21, d_week_seq#22, d_date_sk#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=15]


