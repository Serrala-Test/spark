== Physical Plan ==
* HashAggregate (52)
+- Exchange (51)
   +- * HashAggregate (50)
      +- * HashAggregate (49)
         +- * HashAggregate (48)
            +- * Project (47)
               +- * BroadcastHashJoin Inner BuildRight (46)
                  :- * Project (41)
                  :  +- * BroadcastHashJoin Inner BuildRight (40)
                  :     :- * Project (35)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (34)
                  :     :     :- * SortMergeJoin LeftSemi (29)
                  :     :     :  :- * SortMergeJoin LeftSemi (15)
                  :     :     :  :  :- * Sort (5)
                  :     :     :  :  :  +- Exchange (4)
                  :     :     :  :  :     +- * Project (3)
                  :     :     :  :  :        +- * Filter (2)
                  :     :     :  :  :           +- BatchScan default.web_sales (1)
                  :     :     :  :  +- * Project (14)
                  :     :     :  :     +- * SortMergeJoin Inner (13)
                  :     :     :  :        :- * Sort (10)
                  :     :     :  :        :  +- Exchange (9)
                  :     :     :  :        :     +- * Project (8)
                  :     :     :  :        :        +- * Filter (7)
                  :     :     :  :        :           +- BatchScan default.web_sales (6)
                  :     :     :  :        +- * Sort (12)
                  :     :     :  :           +- ReusedExchange (11)
                  :     :     :  +- * Project (28)
                  :     :     :     +- * SortMergeJoin Inner (27)
                  :     :     :        :- * Sort (20)
                  :     :     :        :  +- Exchange (19)
                  :     :     :        :     +- * Project (18)
                  :     :     :        :        +- * Filter (17)
                  :     :     :        :           +- BatchScan default.web_returns (16)
                  :     :     :        +- * Project (26)
                  :     :     :           +- * SortMergeJoin Inner (25)
                  :     :     :              :- * Sort (22)
                  :     :     :              :  +- ReusedExchange (21)
                  :     :     :              +- * Sort (24)
                  :     :     :                 +- ReusedExchange (23)
                  :     :     +- BroadcastExchange (33)
                  :     :        +- * Project (32)
                  :     :           +- * Filter (31)
                  :     :              +- BatchScan default.date_dim (30)
                  :     +- BroadcastExchange (39)
                  :        +- * Project (38)
                  :           +- * Filter (37)
                  :              +- BatchScan default.customer_address (36)
                  +- BroadcastExchange (45)
                     +- * Project (44)
                        +- * Filter (43)
                           +- BatchScan default.web_site (42)


(1) BatchScan default.web_sales
Output [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
DataFilters: [isnotnull(ws_ship_date_sk#1), isnotnull(ws_ship_addr_sk#2), isnotnull(ws_web_site_sk#3)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_ship_date_sk), IsNotNull(ws_ship_addr_sk), IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_ship_date_sk:int,ws_ship_addr_sk:int,ws_web_site_sk:int,ws_order_number:int,ws_ext_ship_cost:decimal(7,2),ws_net_profit:decimal(7,2)>

(2) Filter [codegen id : 1]
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Condition : (((((isnotnull(ws_ship_date_sk#1) AND isnotnull(ws_ship_addr_sk#2)) AND isnotnull(ws_web_site_sk#3)) AND might_contain(Subquery scalar-subquery#7, [id=#8], xxhash64(ws_ship_date_sk#1, 42))) AND might_contain(Subquery scalar-subquery#9, [id=#10], xxhash64(ws_ship_addr_sk#2, 42))) AND might_contain(Subquery scalar-subquery#11, [id=#12], xxhash64(ws_web_site_sk#3, 42)))

(3) Project [codegen id : 1]
Output [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]

(4) Exchange
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Arguments: hashpartitioning(ws_order_number#4, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Arguments: [ws_order_number#4 ASC NULLS FIRST], false, 0

(6) BatchScan default.web_sales
Output [2]: [ws_warehouse_sk#13, ws_order_number#14]
DataFilters: [isnotnull(ws_order_number#14), isnotnull(ws_warehouse_sk#13)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_order_number), IsNotNull(ws_warehouse_sk)]
ReadSchema: struct<ws_warehouse_sk:int,ws_order_number:int>

(7) Filter [codegen id : 3]
Input [2]: [ws_warehouse_sk#13, ws_order_number#14]
Condition : (isnotnull(ws_order_number#14) AND isnotnull(ws_warehouse_sk#13))

(8) Project [codegen id : 3]
Output [2]: [ws_warehouse_sk#13, ws_order_number#14]
Input [2]: [ws_warehouse_sk#13, ws_order_number#14]

(9) Exchange
Input [2]: [ws_warehouse_sk#13, ws_order_number#14]
Arguments: hashpartitioning(ws_order_number#14, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(10) Sort [codegen id : 4]
Input [2]: [ws_warehouse_sk#13, ws_order_number#14]
Arguments: [ws_order_number#14 ASC NULLS FIRST], false, 0

(11) ReusedExchange [Reuses operator id: 9]
Output [2]: [ws_warehouse_sk#15, ws_order_number#16]

(12) Sort [codegen id : 6]
Input [2]: [ws_warehouse_sk#15, ws_order_number#16]
Arguments: [ws_order_number#16 ASC NULLS FIRST], false, 0

(13) SortMergeJoin [codegen id : 7]
Left keys [1]: [ws_order_number#14]
Right keys [1]: [ws_order_number#16]
Join type: Inner
Join condition: NOT (ws_warehouse_sk#13 = ws_warehouse_sk#15)

(14) Project [codegen id : 7]
Output [1]: [ws_order_number#14]
Input [4]: [ws_warehouse_sk#13, ws_order_number#14, ws_warehouse_sk#15, ws_order_number#16]

(15) SortMergeJoin [codegen id : 8]
Left keys [1]: [ws_order_number#4]
Right keys [1]: [ws_order_number#14]
Join type: LeftSemi
Join condition: None

(16) BatchScan default.web_returns
Output [1]: [wr_order_number#17]
DataFilters: [isnotnull(wr_order_number#17)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_order_number)]
ReadSchema: struct<wr_order_number:int>

(17) Filter [codegen id : 9]
Input [1]: [wr_order_number#17]
Condition : isnotnull(wr_order_number#17)

(18) Project [codegen id : 9]
Output [1]: [wr_order_number#17]
Input [1]: [wr_order_number#17]

(19) Exchange
Input [1]: [wr_order_number#17]
Arguments: hashpartitioning(wr_order_number#17, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(20) Sort [codegen id : 10]
Input [1]: [wr_order_number#17]
Arguments: [wr_order_number#17 ASC NULLS FIRST], false, 0

(21) ReusedExchange [Reuses operator id: 9]
Output [2]: [ws_warehouse_sk#13, ws_order_number#14]

(22) Sort [codegen id : 12]
Input [2]: [ws_warehouse_sk#13, ws_order_number#14]
Arguments: [ws_order_number#14 ASC NULLS FIRST], false, 0

(23) ReusedExchange [Reuses operator id: 9]
Output [2]: [ws_warehouse_sk#15, ws_order_number#16]

(24) Sort [codegen id : 14]
Input [2]: [ws_warehouse_sk#15, ws_order_number#16]
Arguments: [ws_order_number#16 ASC NULLS FIRST], false, 0

(25) SortMergeJoin [codegen id : 15]
Left keys [1]: [ws_order_number#14]
Right keys [1]: [ws_order_number#16]
Join type: Inner
Join condition: NOT (ws_warehouse_sk#13 = ws_warehouse_sk#15)

(26) Project [codegen id : 15]
Output [1]: [ws_order_number#14]
Input [4]: [ws_warehouse_sk#13, ws_order_number#14, ws_warehouse_sk#15, ws_order_number#16]

(27) SortMergeJoin [codegen id : 16]
Left keys [1]: [wr_order_number#17]
Right keys [1]: [ws_order_number#14]
Join type: Inner
Join condition: None

(28) Project [codegen id : 16]
Output [1]: [wr_order_number#17]
Input [2]: [wr_order_number#17, ws_order_number#14]

(29) SortMergeJoin [codegen id : 20]
Left keys [1]: [ws_order_number#4]
Right keys [1]: [wr_order_number#17]
Join type: LeftSemi
Join condition: None

(30) BatchScan default.date_dim
Output [2]: [d_date_sk#18, d_date#19]
DataFilters: [isnotnull(d_date#19), (d_date#19 >= 1999-02-01), (d_date#19 <= 1999-04-02), isnotnull(d_date_sk#18)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-01), LessThanOrEqual(d_date,1999-04-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(31) Filter [codegen id : 17]
Input [2]: [d_date_sk#18, d_date#19]
Condition : (((isnotnull(d_date#19) AND (d_date#19 >= 1999-02-01)) AND (d_date#19 <= 1999-04-02)) AND isnotnull(d_date_sk#18))

(32) Project [codegen id : 17]
Output [1]: [d_date_sk#18]
Input [2]: [d_date_sk#18, d_date#19]

(33) BroadcastExchange
Input [1]: [d_date_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(34) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ws_ship_date_sk#1]
Right keys [1]: [d_date_sk#18]
Join type: Inner
Join condition: None

(35) Project [codegen id : 20]
Output [5]: [ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, d_date_sk#18]

(36) BatchScan default.customer_address
Output [2]: [ca_address_sk#20, ca_state#21]
DataFilters: [isnotnull(ca_state#21), (ca_state#21 = IL), isnotnull(ca_address_sk#20)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,IL), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(37) Filter [codegen id : 18]
Input [2]: [ca_address_sk#20, ca_state#21]
Condition : ((isnotnull(ca_state#21) AND (ca_state#21 = IL)) AND isnotnull(ca_address_sk#20))

(38) Project [codegen id : 18]
Output [1]: [ca_address_sk#20]
Input [2]: [ca_address_sk#20, ca_state#21]

(39) BroadcastExchange
Input [1]: [ca_address_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(40) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ws_ship_addr_sk#2]
Right keys [1]: [ca_address_sk#20]
Join type: Inner
Join condition: None

(41) Project [codegen id : 20]
Output [4]: [ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [6]: [ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ca_address_sk#20]

(42) BatchScan default.web_site
Output [2]: [web_site_sk#22, web_company_name#23]
DataFilters: [isnotnull(web_company_name#23), (web_company_name#23 = pri                                               ), isnotnull(web_site_sk#22)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri                                               ), IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_company_name:string>

(43) Filter [codegen id : 19]
Input [2]: [web_site_sk#22, web_company_name#23]
Condition : ((isnotnull(web_company_name#23) AND (web_company_name#23 = pri                                               )) AND isnotnull(web_site_sk#22))

(44) Project [codegen id : 19]
Output [1]: [web_site_sk#22]
Input [2]: [web_site_sk#22, web_company_name#23]

(45) BroadcastExchange
Input [1]: [web_site_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

(46) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ws_web_site_sk#3]
Right keys [1]: [web_site_sk#22]
Join type: Inner
Join condition: None

(47) Project [codegen id : 20]
Output [3]: [ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [5]: [ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, web_site_sk#22]

(48) HashAggregate [codegen id : 20]
Input [3]: [ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Keys [1]: [ws_order_number#4]
Functions [2]: [partial_sum(UnscaledValue(ws_ext_ship_cost#5)), partial_sum(UnscaledValue(ws_net_profit#6))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#5))#24, sum(UnscaledValue(ws_net_profit#6))#25]
Results [3]: [ws_order_number#4, sum#26, sum#27]

(49) HashAggregate [codegen id : 20]
Input [3]: [ws_order_number#4, sum#26, sum#27]
Keys [1]: [ws_order_number#4]
Functions [2]: [merge_sum(UnscaledValue(ws_ext_ship_cost#5)), merge_sum(UnscaledValue(ws_net_profit#6))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#5))#24, sum(UnscaledValue(ws_net_profit#6))#25]
Results [3]: [ws_order_number#4, sum#26, sum#27]

(50) HashAggregate [codegen id : 20]
Input [3]: [ws_order_number#4, sum#26, sum#27]
Keys: []
Functions [3]: [merge_sum(UnscaledValue(ws_ext_ship_cost#5)), merge_sum(UnscaledValue(ws_net_profit#6)), partial_count(distinct ws_order_number#4)]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#5))#24, sum(UnscaledValue(ws_net_profit#6))#25, count(ws_order_number#4)#28]
Results [3]: [sum#26, sum#27, count#29]

(51) Exchange
Input [3]: [sum#26, sum#27, count#29]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=7]

(52) HashAggregate [codegen id : 21]
Input [3]: [sum#26, sum#27, count#29]
Keys: []
Functions [3]: [sum(UnscaledValue(ws_ext_ship_cost#5)), sum(UnscaledValue(ws_net_profit#6)), count(distinct ws_order_number#4)]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#5))#24, sum(UnscaledValue(ws_net_profit#6))#25, count(ws_order_number#4)#28]
Results [3]: [count(ws_order_number#4)#28 AS order count #30, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#5))#24,17,2) AS total shipping cost #31, MakeDecimal(sum(UnscaledValue(ws_net_profit#6))#25,17,2) AS total net profit #32]

===== Subqueries =====

Subquery:1 Hosting operator id = 2 Hosting Expression = Subquery scalar-subquery#7, [id=#8]
ObjectHashAggregate (58)
+- Exchange (57)
   +- ObjectHashAggregate (56)
      +- * Project (55)
         +- * Filter (54)
            +- BatchScan default.date_dim (53)


(53) BatchScan default.date_dim
Output [2]: [d_date_sk#18, d_date#19]
DataFilters: [isnotnull(d_date#19), (d_date#19 >= 1999-02-01), (d_date#19 <= 1999-04-02), isnotnull(d_date_sk#18)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-01), LessThanOrEqual(d_date,1999-04-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(54) Filter [codegen id : 1]
Input [2]: [d_date_sk#18, d_date#19]
Condition : (((isnotnull(d_date#19) AND (d_date#19 >= 1999-02-01)) AND (d_date#19 <= 1999-04-02)) AND isnotnull(d_date_sk#18))

(55) Project [codegen id : 1]
Output [1]: [d_date_sk#18]
Input [2]: [d_date_sk#18, d_date#19]

(56) ObjectHashAggregate
Input [1]: [d_date_sk#18]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(d_date_sk#18, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#33]
Results [1]: [buf#34]

(57) Exchange
Input [1]: [buf#34]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=8]

(58) ObjectHashAggregate
Input [1]: [buf#34]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(d_date_sk#18, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(d_date_sk#18, 42), 1000000, 8388608, 0, 0)#35]
Results [1]: [bloom_filter_agg(xxhash64(d_date_sk#18, 42), 1000000, 8388608, 0, 0)#35 AS bloomFilter#36]

Subquery:2 Hosting operator id = 2 Hosting Expression = Subquery scalar-subquery#9, [id=#10]
ObjectHashAggregate (64)
+- Exchange (63)
   +- ObjectHashAggregate (62)
      +- * Project (61)
         +- * Filter (60)
            +- BatchScan default.customer_address (59)


(59) BatchScan default.customer_address
Output [2]: [ca_address_sk#20, ca_state#21]
DataFilters: [isnotnull(ca_state#21), (ca_state#21 = IL), isnotnull(ca_address_sk#20)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,IL), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(60) Filter [codegen id : 1]
Input [2]: [ca_address_sk#20, ca_state#21]
Condition : ((isnotnull(ca_state#21) AND (ca_state#21 = IL)) AND isnotnull(ca_address_sk#20))

(61) Project [codegen id : 1]
Output [1]: [ca_address_sk#20]
Input [2]: [ca_address_sk#20, ca_state#21]

(62) ObjectHashAggregate
Input [1]: [ca_address_sk#20]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(ca_address_sk#20, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#37]
Results [1]: [buf#38]

(63) Exchange
Input [1]: [buf#38]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=9]

(64) ObjectHashAggregate
Input [1]: [buf#38]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(ca_address_sk#20, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(ca_address_sk#20, 42), 1000000, 8388608, 0, 0)#39]
Results [1]: [bloom_filter_agg(xxhash64(ca_address_sk#20, 42), 1000000, 8388608, 0, 0)#39 AS bloomFilter#40]

Subquery:3 Hosting operator id = 2 Hosting Expression = Subquery scalar-subquery#11, [id=#12]
ObjectHashAggregate (70)
+- Exchange (69)
   +- ObjectHashAggregate (68)
      +- * Project (67)
         +- * Filter (66)
            +- BatchScan default.web_site (65)


(65) BatchScan default.web_site
Output [2]: [web_site_sk#22, web_company_name#23]
DataFilters: [isnotnull(web_company_name#23), (web_company_name#23 = pri                                               ), isnotnull(web_site_sk#22)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri                                               ), IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_company_name:string>

(66) Filter [codegen id : 1]
Input [2]: [web_site_sk#22, web_company_name#23]
Condition : ((isnotnull(web_company_name#23) AND (web_company_name#23 = pri                                               )) AND isnotnull(web_site_sk#22))

(67) Project [codegen id : 1]
Output [1]: [web_site_sk#22]
Input [2]: [web_site_sk#22, web_company_name#23]

(68) ObjectHashAggregate
Input [1]: [web_site_sk#22]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(web_site_sk#22, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#41]
Results [1]: [buf#42]

(69) Exchange
Input [1]: [buf#42]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=10]

(70) ObjectHashAggregate
Input [1]: [buf#42]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(web_site_sk#22, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(web_site_sk#22, 42), 1000000, 8388608, 0, 0)#43]
Results [1]: [bloom_filter_agg(xxhash64(web_site_sk#22, 42), 1000000, 8388608, 0, 0)#43 AS bloomFilter#44]


