== Physical Plan ==
TakeOrderedAndProject (36)
+- * HashAggregate (35)
   +- Exchange (34)
      +- * HashAggregate (33)
         +- * Project (32)
            +- * BroadcastHashJoin Inner BuildRight (31)
               :- * Project (29)
               :  +- * BroadcastHashJoin Inner BuildRight (28)
               :     :- * Project (22)
               :     :  +- * BroadcastHashJoin Inner BuildRight (21)
               :     :     :- * Project (16)
               :     :     :  +- * SortMergeJoin LeftOuter (15)
               :     :     :     :- * Sort (5)
               :     :     :     :  +- Exchange (4)
               :     :     :     :     +- * Filter (3)
               :     :     :     :        +- * ColumnarToRow (2)
               :     :     :     :           +- Scan parquet default.catalog_sales (1)
               :     :     :     +- * Sort (14)
               :     :     :        +- Exchange (13)
               :     :     :           +- * BroadcastHashJoin LeftSemi BuildRight (12)
               :     :     :              :- * Project (9)
               :     :     :              :  +- * Filter (8)
               :     :     :              :     +- * ColumnarToRow (7)
               :     :     :              :        +- Scan parquet default.catalog_returns (6)
               :     :     :              +- BroadcastExchange (11)
               :     :     :                 +- ReusedExchange (10)
               :     :     +- BroadcastExchange (20)
               :     :        +- * Filter (19)
               :     :           +- * ColumnarToRow (18)
               :     :              +- Scan parquet default.warehouse (17)
               :     +- BroadcastExchange (27)
               :        +- * Project (26)
               :           +- * Filter (25)
               :              +- * ColumnarToRow (24)
               :                 +- Scan parquet default.item (23)
               +- ReusedExchange (30)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_warehouse_sk#1, cs_item_sk#2, cs_order_number#3, cs_sales_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(cs_warehouse_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_warehouse_sk:int,cs_item_sk:int,cs_order_number:int,cs_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [cs_warehouse_sk#1, cs_item_sk#2, cs_order_number#3, cs_sales_price#4, cs_sold_date_sk#5]

(3) Filter [codegen id : 1]
Input [5]: [cs_warehouse_sk#1, cs_item_sk#2, cs_order_number#3, cs_sales_price#4, cs_sold_date_sk#5]
Condition : (isnotnull(cs_warehouse_sk#1) AND isnotnull(cs_item_sk#2))

(4) Exchange
Input [5]: [cs_warehouse_sk#1, cs_item_sk#2, cs_order_number#3, cs_sales_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_order_number#3, cs_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#7]

(5) Sort [codegen id : 2]
Input [5]: [cs_warehouse_sk#1, cs_item_sk#2, cs_order_number#3, cs_sales_price#4, cs_sold_date_sk#5]
Arguments: [cs_order_number#3 ASC NULLS FIRST, cs_item_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet default.catalog_returns
Output [4]: [cr_item_sk#8, cr_order_number#9, cr_refunded_cash#10, cr_returned_date_sk#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_refunded_cash:decimal(7,2)>

(7) ColumnarToRow [codegen id : 4]
Input [4]: [cr_item_sk#8, cr_order_number#9, cr_refunded_cash#10, cr_returned_date_sk#11]

(8) Filter [codegen id : 4]
Input [4]: [cr_item_sk#8, cr_order_number#9, cr_refunded_cash#10, cr_returned_date_sk#11]
Condition : (isnotnull(cr_order_number#9) AND isnotnull(cr_item_sk#8))

(9) Project [codegen id : 4]
Output [3]: [cr_item_sk#8, cr_order_number#9, cr_refunded_cash#10]
Input [4]: [cr_item_sk#8, cr_order_number#9, cr_refunded_cash#10, cr_returned_date_sk#11]

(10) ReusedExchange [Reuses operator id: 4]
Output [5]: [cs_warehouse_sk#1, cs_item_sk#2, cs_order_number#3, cs_sales_price#4, cs_sold_date_sk#5]

(11) BroadcastExchange
Input [5]: [cs_warehouse_sk#1, cs_item_sk#2, cs_order_number#3, cs_sales_price#4, cs_sold_date_sk#5]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[2, int, true] as bigint), 32) | (cast(input[1, int, false] as bigint) & 4294967295))),false), [id=#12]

(12) BroadcastHashJoin [codegen id : 4]
Left keys [2]: [cr_order_number#9, cr_item_sk#8]
Right keys [2]: [cs_order_number#3, cs_item_sk#2]
Join condition: None

(13) Exchange
Input [3]: [cr_item_sk#8, cr_order_number#9, cr_refunded_cash#10]
Arguments: hashpartitioning(cr_order_number#9, cr_item_sk#8, 5), ENSURE_REQUIREMENTS, [id=#13]

(14) Sort [codegen id : 5]
Input [3]: [cr_item_sk#8, cr_order_number#9, cr_refunded_cash#10]
Arguments: [cr_order_number#9 ASC NULLS FIRST, cr_item_sk#8 ASC NULLS FIRST], false, 0

(15) SortMergeJoin [codegen id : 9]
Left keys [2]: [cs_order_number#3, cs_item_sk#2]
Right keys [2]: [cr_order_number#9, cr_item_sk#8]
Join condition: None

(16) Project [codegen id : 9]
Output [5]: [cs_warehouse_sk#1, cs_item_sk#2, cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#10]
Input [8]: [cs_warehouse_sk#1, cs_item_sk#2, cs_order_number#3, cs_sales_price#4, cs_sold_date_sk#5, cr_item_sk#8, cr_order_number#9, cr_refunded_cash#10]

(17) Scan parquet default.warehouse
Output [2]: [w_warehouse_sk#14, w_state#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int,w_state:string>

(18) ColumnarToRow [codegen id : 6]
Input [2]: [w_warehouse_sk#14, w_state#15]

(19) Filter [codegen id : 6]
Input [2]: [w_warehouse_sk#14, w_state#15]
Condition : isnotnull(w_warehouse_sk#14)

(20) BroadcastExchange
Input [2]: [w_warehouse_sk#14, w_state#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#16]

(21) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_warehouse_sk#1]
Right keys [1]: [w_warehouse_sk#14]
Join condition: None

(22) Project [codegen id : 9]
Output [5]: [cs_item_sk#2, cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#10, w_state#15]
Input [7]: [cs_warehouse_sk#1, cs_item_sk#2, cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#10, w_warehouse_sk#14, w_state#15]

(23) Scan parquet default.item
Output [3]: [i_item_sk#17, i_item_id#18, i_current_price#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,0.99), LessThanOrEqual(i_current_price,1.49), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_current_price:decimal(7,2)>

(24) ColumnarToRow [codegen id : 7]
Input [3]: [i_item_sk#17, i_item_id#18, i_current_price#19]

(25) Filter [codegen id : 7]
Input [3]: [i_item_sk#17, i_item_id#18, i_current_price#19]
Condition : (((isnotnull(i_current_price#19) AND (i_current_price#19 >= 0.99)) AND (i_current_price#19 <= 1.49)) AND isnotnull(i_item_sk#17))

(26) Project [codegen id : 7]
Output [2]: [i_item_sk#17, i_item_id#18]
Input [3]: [i_item_sk#17, i_item_id#18, i_current_price#19]

(27) BroadcastExchange
Input [2]: [i_item_sk#17, i_item_id#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#20]

(28) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [i_item_sk#17]
Join condition: None

(29) Project [codegen id : 9]
Output [5]: [cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#10, w_state#15, i_item_id#18]
Input [7]: [cs_item_sk#2, cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#10, w_state#15, i_item_sk#17, i_item_id#18]

(30) ReusedExchange [Reuses operator id: 40]
Output [2]: [d_date_sk#21, d_date#22]

(31) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#21]
Join condition: None

(32) Project [codegen id : 9]
Output [5]: [cs_sales_price#4, cr_refunded_cash#10, w_state#15, i_item_id#18, d_date#22]
Input [7]: [cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#10, w_state#15, i_item_id#18, d_date_sk#21, d_date#22]

(33) HashAggregate [codegen id : 9]
Input [5]: [cs_sales_price#4, cr_refunded_cash#10, w_state#15, i_item_id#18, d_date#22]
Keys [2]: [w_state#15, i_item_id#18]
Functions [2]: [partial_sum(CASE WHEN (d_date#22 < 2000-03-11) THEN CheckOverflow((promote_precision(cast(cs_sales_price#4 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#10 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_date#22 >= 2000-03-11) THEN CheckOverflow((promote_precision(cast(cs_sales_price#4 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#10 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END)]
Aggregate Attributes [4]: [sum#23, isEmpty#24, sum#25, isEmpty#26]
Results [6]: [w_state#15, i_item_id#18, sum#27, isEmpty#28, sum#29, isEmpty#30]

(34) Exchange
Input [6]: [w_state#15, i_item_id#18, sum#27, isEmpty#28, sum#29, isEmpty#30]
Arguments: hashpartitioning(w_state#15, i_item_id#18, 5), ENSURE_REQUIREMENTS, [id=#31]

(35) HashAggregate [codegen id : 10]
Input [6]: [w_state#15, i_item_id#18, sum#27, isEmpty#28, sum#29, isEmpty#30]
Keys [2]: [w_state#15, i_item_id#18]
Functions [2]: [sum(CASE WHEN (d_date#22 < 2000-03-11) THEN CheckOverflow((promote_precision(cast(cs_sales_price#4 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#10 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END), sum(CASE WHEN (d_date#22 >= 2000-03-11) THEN CheckOverflow((promote_precision(cast(cs_sales_price#4 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#10 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END)]
Aggregate Attributes [2]: [sum(CASE WHEN (d_date#22 < 2000-03-11) THEN CheckOverflow((promote_precision(cast(cs_sales_price#4 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#10 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END)#32, sum(CASE WHEN (d_date#22 >= 2000-03-11) THEN CheckOverflow((promote_precision(cast(cs_sales_price#4 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#10 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END)#33]
Results [4]: [w_state#15, i_item_id#18, sum(CASE WHEN (d_date#22 < 2000-03-11) THEN CheckOverflow((promote_precision(cast(cs_sales_price#4 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#10 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END)#32 AS sales_before#34, sum(CASE WHEN (d_date#22 >= 2000-03-11) THEN CheckOverflow((promote_precision(cast(cs_sales_price#4 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#10 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END)#33 AS sales_after#35]

(36) TakeOrderedAndProject
Input [4]: [w_state#15, i_item_id#18, sales_before#34, sales_after#35]
Arguments: 100, [w_state#15 ASC NULLS FIRST, i_item_id#18 ASC NULLS FIRST], [w_state#15, i_item_id#18, sales_before#34, sales_after#35]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (40)
+- * Filter (39)
   +- * ColumnarToRow (38)
      +- Scan parquet default.date_dim (37)


(37) Scan parquet default.date_dim
Output [2]: [d_date_sk#21, d_date#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-02-10), LessThanOrEqual(d_date,2000-04-10), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(38) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#21, d_date#22]

(39) Filter [codegen id : 1]
Input [2]: [d_date_sk#21, d_date#22]
Condition : (((isnotnull(d_date#22) AND (d_date#22 >= 2000-02-10)) AND (d_date#22 <= 2000-04-10)) AND isnotnull(d_date_sk#21))

(40) BroadcastExchange
Input [2]: [d_date_sk#21, d_date#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#36]


