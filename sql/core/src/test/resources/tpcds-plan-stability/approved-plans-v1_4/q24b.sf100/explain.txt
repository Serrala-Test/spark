== Physical Plan ==
* Filter (46)
+- * HashAggregate (45)
   +- Exchange (44)
      +- * HashAggregate (43)
         +- * HashAggregate (42)
            +- Exchange (41)
               +- * HashAggregate (40)
                  +- * Project (39)
                     +- * BroadcastHashJoin Inner BuildRight (38)
                        :- * Project (26)
                        :  +- * SortMergeJoin Inner (25)
                        :     :- * Sort (18)
                        :     :  +- Exchange (17)
                        :     :     +- * Project (16)
                        :     :        +- * SortMergeJoin Inner (15)
                        :     :           :- * Sort (12)
                        :     :           :  +- Exchange (11)
                        :     :           :     +- * Project (10)
                        :     :           :        +- * BroadcastHashJoin Inner BuildRight (9)
                        :     :           :           :- * Project (4)
                        :     :           :           :  +- * Filter (3)
                        :     :           :           :     +- * ColumnarToRow (2)
                        :     :           :           :        +- Scan parquet spark_catalog.default.store_sales (1)
                        :     :           :           +- BroadcastExchange (8)
                        :     :           :              +- * Filter (7)
                        :     :           :                 +- * ColumnarToRow (6)
                        :     :           :                    +- Scan parquet spark_catalog.default.item (5)
                        :     :           +- * Sort (14)
                        :     :              +- ReusedExchange (13)
                        :     +- * Sort (24)
                        :        +- Exchange (23)
                        :           +- * Project (22)
                        :              +- * Filter (21)
                        :                 +- * ColumnarToRow (20)
                        :                    +- Scan parquet spark_catalog.default.store_returns (19)
                        +- BroadcastExchange (37)
                           +- * Project (36)
                              +- * BroadcastHashJoin Inner BuildLeft (35)
                                 :- BroadcastExchange (31)
                                 :  +- * Project (30)
                                 :     +- * Filter (29)
                                 :        +- * ColumnarToRow (28)
                                 :           +- Scan parquet spark_catalog.default.store (27)
                                 +- * Filter (34)
                                    +- * ColumnarToRow (33)
                                       +- Scan parquet spark_catalog.default.customer_address (32)


(1) Scan parquet spark_catalog.default.store_sales
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]

(3) Filter [codegen id : 2]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Condition : ((((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2)) AND might_contain(Subquery scalar-subquery#7, [id=#8], xxhash64(ss_customer_sk#2, 42), false))

(4) Project [codegen id : 2]
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]

(5) Scan parquet spark_catalog.default.item
Output [6]: [i_item_sk#9, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon             ), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(6) ColumnarToRow [codegen id : 1]
Input [6]: [i_item_sk#9, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14]

(7) Filter [codegen id : 1]
Input [6]: [i_item_sk#9, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14]
Condition : ((isnotnull(i_color#12) AND (i_color#12 = chiffon             )) AND isnotnull(i_item_sk#9))

(8) BroadcastExchange
Input [6]: [i_item_sk#9, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#9]
Join type: Inner
Join condition: None

(10) Project [codegen id : 2]
Output [10]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14]
Input [11]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_item_sk#9, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14]

(11) Exchange
Input [10]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14]
Arguments: hashpartitioning(ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(12) Sort [codegen id : 3]
Input [10]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(13) ReusedExchange [Reuses operator id: 111]
Output [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]

(14) Sort [codegen id : 5]
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: [c_customer_sk#15 ASC NULLS FIRST], false, 0

(15) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#15]
Join type: Inner
Join condition: None

(16) Project [codegen id : 6]
Output [12]: [ss_item_sk#1, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_first_name#16, c_last_name#17, c_birth_country#18]
Input [14]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]

(17) Exchange
Input [12]: [ss_item_sk#1, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: hashpartitioning(ss_ticket_number#4, ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(18) Sort [codegen id : 7]
Input [12]: [ss_item_sk#1, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: [ss_ticket_number#4 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST], false, 0

(19) Scan parquet spark_catalog.default.store_returns
Output [3]: [sr_item_sk#19, sr_ticket_number#20, sr_returned_date_sk#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(20) ColumnarToRow [codegen id : 8]
Input [3]: [sr_item_sk#19, sr_ticket_number#20, sr_returned_date_sk#21]

(21) Filter [codegen id : 8]
Input [3]: [sr_item_sk#19, sr_ticket_number#20, sr_returned_date_sk#21]
Condition : (isnotnull(sr_ticket_number#20) AND isnotnull(sr_item_sk#19))

(22) Project [codegen id : 8]
Output [2]: [sr_item_sk#19, sr_ticket_number#20]
Input [3]: [sr_item_sk#19, sr_ticket_number#20, sr_returned_date_sk#21]

(23) Exchange
Input [2]: [sr_item_sk#19, sr_ticket_number#20]
Arguments: hashpartitioning(sr_ticket_number#20, sr_item_sk#19, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(24) Sort [codegen id : 9]
Input [2]: [sr_item_sk#19, sr_ticket_number#20]
Arguments: [sr_ticket_number#20 ASC NULLS FIRST, sr_item_sk#19 ASC NULLS FIRST], false, 0

(25) SortMergeJoin [codegen id : 12]
Left keys [2]: [ss_ticket_number#4, ss_item_sk#1]
Right keys [2]: [sr_ticket_number#20, sr_item_sk#19]
Join type: Inner
Join condition: None

(26) Project [codegen id : 12]
Output [10]: [ss_store_sk#3, ss_net_paid#5, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_first_name#16, c_last_name#17, c_birth_country#18]
Input [14]: [ss_item_sk#1, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_first_name#16, c_last_name#17, c_birth_country#18, sr_item_sk#19, sr_ticket_number#20]

(27) Scan parquet spark_catalog.default.store
Output [5]: [s_store_sk#22, s_store_name#23, s_market_id#24, s_state#25, s_zip#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(28) ColumnarToRow [codegen id : 10]
Input [5]: [s_store_sk#22, s_store_name#23, s_market_id#24, s_state#25, s_zip#26]

(29) Filter [codegen id : 10]
Input [5]: [s_store_sk#22, s_store_name#23, s_market_id#24, s_state#25, s_zip#26]
Condition : (((isnotnull(s_market_id#24) AND (s_market_id#24 = 8)) AND isnotnull(s_store_sk#22)) AND isnotnull(s_zip#26))

(30) Project [codegen id : 10]
Output [4]: [s_store_sk#22, s_store_name#23, s_state#25, s_zip#26]
Input [5]: [s_store_sk#22, s_store_name#23, s_market_id#24, s_state#25, s_zip#26]

(31) BroadcastExchange
Input [4]: [s_store_sk#22, s_store_name#23, s_state#25, s_zip#26]
Arguments: HashedRelationBroadcastMode(List(input[3, string, true]),false), [plan_id=5]

(32) Scan parquet spark_catalog.default.customer_address
Output [3]: [ca_state#27, ca_zip#28, ca_country#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>

(33) ColumnarToRow
Input [3]: [ca_state#27, ca_zip#28, ca_country#29]

(34) Filter
Input [3]: [ca_state#27, ca_zip#28, ca_country#29]
Condition : (isnotnull(ca_country#29) AND isnotnull(ca_zip#28))

(35) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [s_zip#26]
Right keys [1]: [ca_zip#28]
Join type: Inner
Join condition: None

(36) Project [codegen id : 11]
Output [5]: [s_store_sk#22, s_store_name#23, s_state#25, ca_state#27, ca_country#29]
Input [7]: [s_store_sk#22, s_store_name#23, s_state#25, s_zip#26, ca_state#27, ca_zip#28, ca_country#29]

(37) BroadcastExchange
Input [5]: [s_store_sk#22, s_store_name#23, s_state#25, ca_state#27, ca_country#29]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], upper(input[4, string, true])),false), [plan_id=6]

(38) BroadcastHashJoin [codegen id : 12]
Left keys [2]: [ss_store_sk#3, c_birth_country#18]
Right keys [2]: [s_store_sk#22, upper(ca_country#29)]
Join type: Inner
Join condition: None

(39) Project [codegen id : 12]
Output [11]: [ss_net_paid#5, s_store_name#23, s_state#25, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_first_name#16, c_last_name#17, ca_state#27]
Input [15]: [ss_store_sk#3, ss_net_paid#5, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_first_name#16, c_last_name#17, c_birth_country#18, s_store_sk#22, s_store_name#23, s_state#25, ca_state#27, ca_country#29]

(40) HashAggregate [codegen id : 12]
Input [11]: [ss_net_paid#5, s_store_name#23, s_state#25, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_first_name#16, c_last_name#17, ca_state#27]
Keys [10]: [c_last_name#17, c_first_name#16, s_store_name#23, ca_state#27, s_state#25, i_color#12, i_current_price#10, i_manager_id#14, i_units#13, i_size#11]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum#30]
Results [11]: [c_last_name#17, c_first_name#16, s_store_name#23, ca_state#27, s_state#25, i_color#12, i_current_price#10, i_manager_id#14, i_units#13, i_size#11, sum#31]

(41) Exchange
Input [11]: [c_last_name#17, c_first_name#16, s_store_name#23, ca_state#27, s_state#25, i_color#12, i_current_price#10, i_manager_id#14, i_units#13, i_size#11, sum#31]
Arguments: hashpartitioning(c_last_name#17, c_first_name#16, s_store_name#23, ca_state#27, s_state#25, i_color#12, i_current_price#10, i_manager_id#14, i_units#13, i_size#11, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(42) HashAggregate [codegen id : 13]
Input [11]: [c_last_name#17, c_first_name#16, s_store_name#23, ca_state#27, s_state#25, i_color#12, i_current_price#10, i_manager_id#14, i_units#13, i_size#11, sum#31]
Keys [10]: [c_last_name#17, c_first_name#16, s_store_name#23, ca_state#27, s_state#25, i_color#12, i_current_price#10, i_manager_id#14, i_units#13, i_size#11]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#5))#32]
Results [4]: [c_last_name#17, c_first_name#16, s_store_name#23, MakeDecimal(sum(UnscaledValue(ss_net_paid#5))#32,17,2) AS netpaid#33]

(43) HashAggregate [codegen id : 13]
Input [4]: [c_last_name#17, c_first_name#16, s_store_name#23, netpaid#33]
Keys [3]: [c_last_name#17, c_first_name#16, s_store_name#23]
Functions [1]: [partial_sum(netpaid#33)]
Aggregate Attributes [2]: [sum#34, isEmpty#35]
Results [5]: [c_last_name#17, c_first_name#16, s_store_name#23, sum#36, isEmpty#37]

(44) Exchange
Input [5]: [c_last_name#17, c_first_name#16, s_store_name#23, sum#36, isEmpty#37]
Arguments: hashpartitioning(c_last_name#17, c_first_name#16, s_store_name#23, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(45) HashAggregate [codegen id : 14]
Input [5]: [c_last_name#17, c_first_name#16, s_store_name#23, sum#36, isEmpty#37]
Keys [3]: [c_last_name#17, c_first_name#16, s_store_name#23]
Functions [1]: [sum(netpaid#33)]
Aggregate Attributes [1]: [sum(netpaid#33)#38]
Results [4]: [c_last_name#17, c_first_name#16, s_store_name#23, sum(netpaid#33)#38 AS paid#39]

(46) Filter [codegen id : 14]
Input [4]: [c_last_name#17, c_first_name#16, s_store_name#23, paid#39]
Condition : (isnotnull(paid#39) AND (cast(paid#39 as decimal(33,8)) > cast(Subquery scalar-subquery#40, [id=#41] as decimal(33,8))))

===== Subqueries =====

Subquery:1 Hosting operator id = 46 Hosting Expression = Subquery scalar-subquery#40, [id=#41]
* HashAggregate (93)
+- Exchange (92)
   +- * HashAggregate (91)
      +- * HashAggregate (90)
         +- Exchange (89)
            +- * HashAggregate (88)
               +- * Project (87)
                  +- * SortMergeJoin Inner (86)
                     :- * Sort (80)
                     :  +- Exchange (79)
                     :     +- * Project (78)
                     :        +- * SortMergeJoin Inner (77)
                     :           :- * Sort (74)
                     :           :  +- Exchange (73)
                     :           :     +- * Project (72)
                     :           :        +- * SortMergeJoin Inner (71)
                     :           :           :- * Sort (65)
                     :           :           :  +- Exchange (64)
                     :           :           :     +- * Project (63)
                     :           :           :        +- * SortMergeJoin Inner (62)
                     :           :           :           :- * Sort (59)
                     :           :           :           :  +- Exchange (58)
                     :           :           :           :     +- * Project (57)
                     :           :           :           :        +- * BroadcastHashJoin Inner BuildRight (56)
                     :           :           :           :           :- * Project (50)
                     :           :           :           :           :  +- * Filter (49)
                     :           :           :           :           :     +- * ColumnarToRow (48)
                     :           :           :           :           :        +- Scan parquet spark_catalog.default.store_sales (47)
                     :           :           :           :           +- BroadcastExchange (55)
                     :           :           :           :              +- * Project (54)
                     :           :           :           :                 +- * Filter (53)
                     :           :           :           :                    +- * ColumnarToRow (52)
                     :           :           :           :                       +- Scan parquet spark_catalog.default.store (51)
                     :           :           :           +- * Sort (61)
                     :           :           :              +- ReusedExchange (60)
                     :           :           +- * Sort (70)
                     :           :              +- Exchange (69)
                     :           :                 +- * Filter (68)
                     :           :                    +- * ColumnarToRow (67)
                     :           :                       +- Scan parquet spark_catalog.default.customer (66)
                     :           +- * Sort (76)
                     :              +- ReusedExchange (75)
                     +- * Sort (85)
                        +- Exchange (84)
                           +- * Filter (83)
                              +- * ColumnarToRow (82)
                                 +- Scan parquet spark_catalog.default.customer_address (81)


(47) Scan parquet spark_catalog.default.store_sales
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(48) ColumnarToRow [codegen id : 2]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]

(49) Filter [codegen id : 2]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Condition : (((((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2)) AND might_contain(Subquery scalar-subquery#42, [id=#43], xxhash64(ss_item_sk#1, 42), false)) AND true)

(50) Project [codegen id : 2]
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]

(51) Scan parquet spark_catalog.default.store
Output [5]: [s_store_sk#22, s_store_name#23, s_market_id#24, s_state#25, s_zip#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(52) ColumnarToRow [codegen id : 1]
Input [5]: [s_store_sk#22, s_store_name#23, s_market_id#24, s_state#25, s_zip#26]

(53) Filter [codegen id : 1]
Input [5]: [s_store_sk#22, s_store_name#23, s_market_id#24, s_state#25, s_zip#26]
Condition : ((((isnotnull(s_market_id#24) AND (s_market_id#24 = 8)) AND isnotnull(s_store_sk#22)) AND isnotnull(s_zip#26)) AND might_contain(Subquery scalar-subquery#44, [id=#45].bloomFilter, xxhash64(s_zip#26, 42), false))

(54) Project [codegen id : 1]
Output [4]: [s_store_sk#22, s_store_name#23, s_state#25, s_zip#26]
Input [5]: [s_store_sk#22, s_store_name#23, s_market_id#24, s_state#25, s_zip#26]

(55) BroadcastExchange
Input [4]: [s_store_sk#22, s_store_name#23, s_state#25, s_zip#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

(56) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#22]
Join type: Inner
Join condition: None

(57) Project [codegen id : 2]
Output [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#23, s_state#25, s_zip#26]
Input [9]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, s_store_sk#22, s_store_name#23, s_state#25, s_zip#26]

(58) Exchange
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#23, s_state#25, s_zip#26]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(59) Sort [codegen id : 3]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#23, s_state#25, s_zip#26]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(60) ReusedExchange [Reuses operator id: 97]
Output [6]: [i_item_sk#9, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14]

(61) Sort [codegen id : 5]
Input [6]: [i_item_sk#9, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14]
Arguments: [i_item_sk#9 ASC NULLS FIRST], false, 0

(62) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#9]
Join type: Inner
Join condition: None

(63) Project [codegen id : 6]
Output [12]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#23, s_state#25, s_zip#26, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14]
Input [13]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#23, s_state#25, s_zip#26, i_item_sk#9, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14]

(64) Exchange
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#23, s_state#25, s_zip#26, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14]
Arguments: hashpartitioning(ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(65) Sort [codegen id : 7]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#23, s_state#25, s_zip#26, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(66) Scan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(67) ColumnarToRow [codegen id : 8]
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]

(68) Filter [codegen id : 8]
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Condition : ((isnotnull(c_customer_sk#15) AND isnotnull(c_birth_country#18)) AND might_contain(ReusedSubquery Subquery scalar-subquery#44, [id=#45].bloomFilter, xxhash64(c_birth_country#18, 42), false))

(69) Exchange
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: hashpartitioning(c_customer_sk#15, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(70) Sort [codegen id : 9]
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: [c_customer_sk#15 ASC NULLS FIRST], false, 0

(71) SortMergeJoin [codegen id : 10]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#15]
Join type: Inner
Join condition: None

(72) Project [codegen id : 10]
Output [14]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#23, s_state#25, s_zip#26, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_first_name#16, c_last_name#17, c_birth_country#18]
Input [16]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#23, s_state#25, s_zip#26, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]

(73) Exchange
Input [14]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#23, s_state#25, s_zip#26, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: hashpartitioning(ss_ticket_number#4, ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(74) Sort [codegen id : 11]
Input [14]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#23, s_state#25, s_zip#26, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: [ss_ticket_number#4 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST], false, 0

(75) ReusedExchange [Reuses operator id: 23]
Output [2]: [sr_item_sk#19, sr_ticket_number#20]

(76) Sort [codegen id : 13]
Input [2]: [sr_item_sk#19, sr_ticket_number#20]
Arguments: [sr_ticket_number#20 ASC NULLS FIRST, sr_item_sk#19 ASC NULLS FIRST], false, 0

(77) SortMergeJoin [codegen id : 14]
Left keys [2]: [ss_ticket_number#4, ss_item_sk#1]
Right keys [2]: [sr_ticket_number#20, sr_item_sk#19]
Join type: Inner
Join condition: None

(78) Project [codegen id : 14]
Output [12]: [ss_net_paid#5, s_store_name#23, s_state#25, s_zip#26, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_first_name#16, c_last_name#17, c_birth_country#18]
Input [16]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#23, s_state#25, s_zip#26, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_first_name#16, c_last_name#17, c_birth_country#18, sr_item_sk#19, sr_ticket_number#20]

(79) Exchange
Input [12]: [ss_net_paid#5, s_store_name#23, s_state#25, s_zip#26, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: hashpartitioning(c_birth_country#18, s_zip#26, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(80) Sort [codegen id : 15]
Input [12]: [ss_net_paid#5, s_store_name#23, s_state#25, s_zip#26, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: [c_birth_country#18 ASC NULLS FIRST, s_zip#26 ASC NULLS FIRST], false, 0

(81) Scan parquet spark_catalog.default.customer_address
Output [3]: [ca_state#27, ca_zip#28, ca_country#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>

(82) ColumnarToRow [codegen id : 16]
Input [3]: [ca_state#27, ca_zip#28, ca_country#29]

(83) Filter [codegen id : 16]
Input [3]: [ca_state#27, ca_zip#28, ca_country#29]
Condition : (isnotnull(ca_country#29) AND isnotnull(ca_zip#28))

(84) Exchange
Input [3]: [ca_state#27, ca_zip#28, ca_country#29]
Arguments: hashpartitioning(upper(ca_country#29), ca_zip#28, 5), ENSURE_REQUIREMENTS, [plan_id=15]

(85) Sort [codegen id : 17]
Input [3]: [ca_state#27, ca_zip#28, ca_country#29]
Arguments: [upper(ca_country#29) ASC NULLS FIRST, ca_zip#28 ASC NULLS FIRST], false, 0

(86) SortMergeJoin [codegen id : 18]
Left keys [2]: [c_birth_country#18, s_zip#26]
Right keys [2]: [upper(ca_country#29), ca_zip#28]
Join type: Inner
Join condition: None

(87) Project [codegen id : 18]
Output [11]: [ss_net_paid#5, s_store_name#23, s_state#25, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_first_name#16, c_last_name#17, ca_state#27]
Input [15]: [ss_net_paid#5, s_store_name#23, s_state#25, s_zip#26, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_first_name#16, c_last_name#17, c_birth_country#18, ca_state#27, ca_zip#28, ca_country#29]

(88) HashAggregate [codegen id : 18]
Input [11]: [ss_net_paid#5, s_store_name#23, s_state#25, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14, c_first_name#16, c_last_name#17, ca_state#27]
Keys [10]: [c_last_name#17, c_first_name#16, s_store_name#23, ca_state#27, s_state#25, i_color#12, i_current_price#10, i_manager_id#14, i_units#13, i_size#11]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum#46]
Results [11]: [c_last_name#17, c_first_name#16, s_store_name#23, ca_state#27, s_state#25, i_color#12, i_current_price#10, i_manager_id#14, i_units#13, i_size#11, sum#47]

(89) Exchange
Input [11]: [c_last_name#17, c_first_name#16, s_store_name#23, ca_state#27, s_state#25, i_color#12, i_current_price#10, i_manager_id#14, i_units#13, i_size#11, sum#47]
Arguments: hashpartitioning(c_last_name#17, c_first_name#16, s_store_name#23, ca_state#27, s_state#25, i_color#12, i_current_price#10, i_manager_id#14, i_units#13, i_size#11, 5), ENSURE_REQUIREMENTS, [plan_id=16]

(90) HashAggregate [codegen id : 19]
Input [11]: [c_last_name#17, c_first_name#16, s_store_name#23, ca_state#27, s_state#25, i_color#12, i_current_price#10, i_manager_id#14, i_units#13, i_size#11, sum#47]
Keys [10]: [c_last_name#17, c_first_name#16, s_store_name#23, ca_state#27, s_state#25, i_color#12, i_current_price#10, i_manager_id#14, i_units#13, i_size#11]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#5))#32]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_paid#5))#32,17,2) AS netpaid#33]

(91) HashAggregate [codegen id : 19]
Input [1]: [netpaid#33]
Keys: []
Functions [1]: [partial_avg(netpaid#33)]
Aggregate Attributes [2]: [sum#48, count#49]
Results [2]: [sum#50, count#51]

(92) Exchange
Input [2]: [sum#50, count#51]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=17]

(93) HashAggregate [codegen id : 20]
Input [2]: [sum#50, count#51]
Keys: []
Functions [1]: [avg(netpaid#33)]
Aggregate Attributes [1]: [avg(netpaid#33)#52]
Results [1]: [(0.05 * avg(netpaid#33)#52) AS (0.05 * avg(netpaid))#53]

Subquery:2 Hosting operator id = 49 Hosting Expression = Subquery scalar-subquery#42, [id=#43]
ObjectHashAggregate (100)
+- Exchange (99)
   +- ObjectHashAggregate (98)
      +- Exchange (97)
         +- * Filter (96)
            +- * ColumnarToRow (95)
               +- Scan parquet spark_catalog.default.item (94)


(94) Scan parquet spark_catalog.default.item
Output [6]: [i_item_sk#9, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(95) ColumnarToRow [codegen id : 1]
Input [6]: [i_item_sk#9, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14]

(96) Filter [codegen id : 1]
Input [6]: [i_item_sk#9, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14]
Condition : isnotnull(i_item_sk#9)

(97) Exchange
Input [6]: [i_item_sk#9, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14]
Arguments: hashpartitioning(i_item_sk#9, 5), ENSURE_REQUIREMENTS, [plan_id=18]

(98) ObjectHashAggregate
Input [6]: [i_item_sk#9, i_current_price#10, i_size#11, i_color#12, i_units#13, i_manager_id#14]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(i_item_sk#9, 42), 204000, 1632000, 0, 0)]
Aggregate Attributes [1]: [buf#54]
Results [1]: [buf#55]

(99) Exchange
Input [1]: [buf#55]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=19]

(100) ObjectHashAggregate
Input [1]: [buf#55]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(i_item_sk#9, 42), 204000, 1632000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(i_item_sk#9, 42), 204000, 1632000, 0, 0)#56]
Results [1]: [bloom_filter_agg(xxhash64(i_item_sk#9, 42), 204000, 1632000, 0, 0)#56 AS bloomFilter#57]

Subquery:3 Hosting operator id = 53 Hosting Expression = Subquery scalar-subquery#44, [id=#45]
* Project (107)
+- ObjectHashAggregate (106)
   +- Exchange (105)
      +- ObjectHashAggregate (104)
         +- * Filter (103)
            +- * ColumnarToRow (102)
               +- Scan parquet spark_catalog.default.customer_address (101)


(101) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_zip#28, ca_country#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_zip:string,ca_country:string>

(102) ColumnarToRow [codegen id : 1]
Input [2]: [ca_zip#28, ca_country#29]

(103) Filter [codegen id : 1]
Input [2]: [ca_zip#28, ca_country#29]
Condition : (isnotnull(ca_country#29) AND isnotnull(ca_zip#28))

(104) ObjectHashAggregate
Input [2]: [ca_zip#28, ca_country#29]
Keys: []
Functions [2]: [partial_bloom_filter_agg(xxhash64(ca_zip#28, 42), 940448, 7523584, 0, 0), partial_bloom_filter_agg(xxhash64(upper(ca_country#29), 42), 940448, 7523584, 0, 0)]
Aggregate Attributes [2]: [buf#58, buf#59]
Results [2]: [buf#60, buf#61]

(105) Exchange
Input [2]: [buf#60, buf#61]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=20]

(106) ObjectHashAggregate
Input [2]: [buf#60, buf#61]
Keys: []
Functions [2]: [bloom_filter_agg(xxhash64(ca_zip#28, 42), 940448, 7523584, 0, 0), bloom_filter_agg(xxhash64(upper(ca_country#29), 42), 940448, 7523584, 0, 0)]
Aggregate Attributes [2]: [bloom_filter_agg(xxhash64(ca_zip#28, 42), 940448, 7523584, 0, 0)#62, bloom_filter_agg(xxhash64(upper(ca_country#29), 42), 940448, 7523584, 0, 0)#63]
Results [2]: [bloom_filter_agg(xxhash64(ca_zip#28, 42), 940448, 7523584, 0, 0)#62 AS bloomFilter#64, bloom_filter_agg(xxhash64(upper(ca_country#29), 42), 940448, 7523584, 0, 0)#63 AS bloomFilter#65]

(107) Project [codegen id : 2]
Output [1]: [named_struct(bloomFilter, bloomFilter#64, bloomFilter, bloomFilter#65) AS mergedValue#66]
Input [2]: [bloomFilter#64, bloomFilter#65]

Subquery:4 Hosting operator id = 68 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:5 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#7, [id=#8]
ObjectHashAggregate (114)
+- Exchange (113)
   +- ObjectHashAggregate (112)
      +- Exchange (111)
         +- * Filter (110)
            +- * ColumnarToRow (109)
               +- Scan parquet spark_catalog.default.customer (108)


(108) Scan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(109) ColumnarToRow [codegen id : 1]
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]

(110) Filter [codegen id : 1]
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Condition : (isnotnull(c_customer_sk#15) AND isnotnull(c_birth_country#18))

(111) Exchange
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Arguments: hashpartitioning(c_customer_sk#15, 5), ENSURE_REQUIREMENTS, [plan_id=21]

(112) ObjectHashAggregate
Input [4]: [c_customer_sk#15, c_first_name#16, c_last_name#17, c_birth_country#18]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(c_customer_sk#15, 42), 1930374, 15442992, 0, 0)]
Aggregate Attributes [1]: [buf#67]
Results [1]: [buf#68]

(113) Exchange
Input [1]: [buf#68]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=22]

(114) ObjectHashAggregate
Input [1]: [buf#68]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(c_customer_sk#15, 42), 1930374, 15442992, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(c_customer_sk#15, 42), 1930374, 15442992, 0, 0)#69]
Results [1]: [bloom_filter_agg(xxhash64(c_customer_sk#15, 42), 1930374, 15442992, 0, 0)#69 AS bloomFilter#70]


