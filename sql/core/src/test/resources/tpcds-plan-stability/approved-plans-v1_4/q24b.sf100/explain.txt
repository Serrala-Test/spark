== Physical Plan ==
* Project (57)
+- * Filter (56)
   +- * HashAggregate (55)
      +- Exchange (54)
         +- * HashAggregate (53)
            +- * HashAggregate (52)
               +- Exchange (51)
                  +- * HashAggregate (50)
                     +- * Project (49)
                        +- * SortMergeJoin Inner (48)
                           :- * Sort (42)
                           :  +- Exchange (41)
                           :     +- * Project (40)
                           :        +- * SortMergeJoin Inner (39)
                           :           :- * Sort (32)
                           :           :  +- Exchange (31)
                           :           :     +- * Project (30)
                           :           :        +- * SortMergeJoin Inner (29)
                           :           :           :- * Sort (22)
                           :           :           :  +- Exchange (21)
                           :           :           :     +- * Project (20)
                           :           :           :        +- * SortMergeJoin Inner (19)
                           :           :           :           :- * Sort (12)
                           :           :           :           :  +- Exchange (11)
                           :           :           :           :     +- * Project (10)
                           :           :           :           :        +- * BroadcastHashJoin Inner BuildRight (9)
                           :           :           :           :           :- * Filter (3)
                           :           :           :           :           :  +- * ColumnarToRow (2)
                           :           :           :           :           :     +- Scan parquet default.store_sales (1)
                           :           :           :           :           +- BroadcastExchange (8)
                           :           :           :           :              +- * Project (7)
                           :           :           :           :                 +- * Filter (6)
                           :           :           :           :                    +- * ColumnarToRow (5)
                           :           :           :           :                       +- Scan parquet default.store (4)
                           :           :           :           +- * Sort (18)
                           :           :           :              +- Exchange (17)
                           :           :           :                 +- * Project (16)
                           :           :           :                    +- * Filter (15)
                           :           :           :                       +- * ColumnarToRow (14)
                           :           :           :                          +- Scan parquet default.customer (13)
                           :           :           +- * Sort (28)
                           :           :              +- Exchange (27)
                           :           :                 +- * Project (26)
                           :           :                    +- * Filter (25)
                           :           :                       +- * ColumnarToRow (24)
                           :           :                          +- Scan parquet default.item (23)
                           :           +- * Sort (38)
                           :              +- Exchange (37)
                           :                 +- * Project (36)
                           :                    +- * Filter (35)
                           :                       +- * ColumnarToRow (34)
                           :                          +- Scan parquet default.customer_address (33)
                           +- * Sort (47)
                              +- Exchange (46)
                                 +- * Filter (45)
                                    +- * ColumnarToRow (44)
                                       +- Scan parquet default.store_returns (43)


(1) Scan parquet default.store_sales
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]

(3) Filter [codegen id : 2]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Condition : (((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2))

(4) Scan parquet default.store
Output [5]: [s_store_sk#6, s_store_name#7, s_market_id#8, s_state#9, s_zip#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(5) ColumnarToRow [codegen id : 1]
Input [5]: [s_store_sk#6, s_store_name#7, s_market_id#8, s_state#9, s_zip#10]

(6) Filter [codegen id : 1]
Input [5]: [s_store_sk#6, s_store_name#7, s_market_id#8, s_state#9, s_zip#10]
Condition : (((isnotnull(s_market_id#8) AND (s_market_id#8 = 8)) AND isnotnull(s_store_sk#6)) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_zip#10, 10, false, true)))

(7) Project [codegen id : 1]
Output [4]: [s_store_sk#6, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_store_name#7, 50, false, true) AS s_store_name#11, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#9, 2, false, true) AS s_state#12, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_zip#10, 10, false, true) AS s_zip#13]
Input [5]: [s_store_sk#6, s_store_name#7, s_market_id#8, s_state#9, s_zip#10]

(8) BroadcastExchange
Input [4]: [s_store_sk#6, s_store_name#11, s_state#12, s_zip#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#6]
Join condition: None

(10) Project [codegen id : 2]
Output [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#11, s_state#12, s_zip#13]
Input [9]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, s_store_sk#6, s_store_name#11, s_state#12, s_zip#13]

(11) Exchange
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#11, s_state#12, s_zip#13]
Arguments: hashpartitioning(ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#15]

(12) Sort [codegen id : 3]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#11, s_state#12, s_zip#13]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(13) Scan parquet default.customer
Output [4]: [c_customer_sk#16, c_first_name#17, c_last_name#18, c_birth_country#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(14) ColumnarToRow [codegen id : 4]
Input [4]: [c_customer_sk#16, c_first_name#17, c_last_name#18, c_birth_country#19]

(15) Filter [codegen id : 4]
Input [4]: [c_customer_sk#16, c_first_name#17, c_last_name#18, c_birth_country#19]
Condition : (isnotnull(c_customer_sk#16) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, c_birth_country#19, 20, false, true)))

(16) Project [codegen id : 4]
Output [4]: [c_customer_sk#16, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#17, 20, false, true) AS c_first_name#20, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#18, 30, false, true) AS c_last_name#21, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, c_birth_country#19, 20, false, true) AS c_birth_country#22]
Input [4]: [c_customer_sk#16, c_first_name#17, c_last_name#18, c_birth_country#19]

(17) Exchange
Input [4]: [c_customer_sk#16, c_first_name#20, c_last_name#21, c_birth_country#22]
Arguments: hashpartitioning(c_customer_sk#16, 5), ENSURE_REQUIREMENTS, [id=#23]

(18) Sort [codegen id : 5]
Input [4]: [c_customer_sk#16, c_first_name#20, c_last_name#21, c_birth_country#22]
Arguments: [c_customer_sk#16 ASC NULLS FIRST], false, 0

(19) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#16]
Join condition: None

(20) Project [codegen id : 6]
Output [9]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#11, s_state#12, s_zip#13, c_first_name#20, c_last_name#21, c_birth_country#22]
Input [11]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#11, s_state#12, s_zip#13, c_customer_sk#16, c_first_name#20, c_last_name#21, c_birth_country#22]

(21) Exchange
Input [9]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#11, s_state#12, s_zip#13, c_first_name#20, c_last_name#21, c_birth_country#22]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#24]

(22) Sort [codegen id : 7]
Input [9]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#11, s_state#12, s_zip#13, c_first_name#20, c_last_name#21, c_birth_country#22]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(23) Scan parquet default.item
Output [6]: [i_item_sk#25, i_current_price#26, i_size#27, i_color#28, i_units#29, i_manager_id#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(24) ColumnarToRow [codegen id : 8]
Input [6]: [i_item_sk#25, i_current_price#26, i_size#27, i_color#28, i_units#29, i_manager_id#30]

(25) Filter [codegen id : 8]
Input [6]: [i_item_sk#25, i_current_price#26, i_size#27, i_color#28, i_units#29, i_manager_id#30]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_color#28, 20, false, true) = chiffon             ) AND isnotnull(i_item_sk#25))

(26) Project [codegen id : 8]
Output [6]: [i_item_sk#25, i_current_price#26, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_size#27, 20, false, true) AS i_size#31, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_color#28, 20, false, true) AS i_color#32, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_units#29, 10, false, true) AS i_units#33, i_manager_id#30]
Input [6]: [i_item_sk#25, i_current_price#26, i_size#27, i_color#28, i_units#29, i_manager_id#30]

(27) Exchange
Input [6]: [i_item_sk#25, i_current_price#26, i_size#31, i_color#32, i_units#33, i_manager_id#30]
Arguments: hashpartitioning(i_item_sk#25, 5), ENSURE_REQUIREMENTS, [id=#34]

(28) Sort [codegen id : 9]
Input [6]: [i_item_sk#25, i_current_price#26, i_size#31, i_color#32, i_units#33, i_manager_id#30]
Arguments: [i_item_sk#25 ASC NULLS FIRST], false, 0

(29) SortMergeJoin [codegen id : 10]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#25]
Join condition: None

(30) Project [codegen id : 10]
Output [14]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#11, s_state#12, s_zip#13, c_first_name#20, c_last_name#21, c_birth_country#22, i_current_price#26, i_size#31, i_color#32, i_units#33, i_manager_id#30]
Input [15]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#11, s_state#12, s_zip#13, c_first_name#20, c_last_name#21, c_birth_country#22, i_item_sk#25, i_current_price#26, i_size#31, i_color#32, i_units#33, i_manager_id#30]

(31) Exchange
Input [14]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#11, s_state#12, s_zip#13, c_first_name#20, c_last_name#21, c_birth_country#22, i_current_price#26, i_size#31, i_color#32, i_units#33, i_manager_id#30]
Arguments: hashpartitioning(c_birth_country#22, s_zip#13, 5), ENSURE_REQUIREMENTS, [id=#35]

(32) Sort [codegen id : 11]
Input [14]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#11, s_state#12, s_zip#13, c_first_name#20, c_last_name#21, c_birth_country#22, i_current_price#26, i_size#31, i_color#32, i_units#33, i_manager_id#30]
Arguments: [c_birth_country#22 ASC NULLS FIRST, s_zip#13 ASC NULLS FIRST], false, 0

(33) Scan parquet default.customer_address
Output [3]: [ca_state#36, ca_zip#37, ca_country#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>

(34) ColumnarToRow [codegen id : 12]
Input [3]: [ca_state#36, ca_zip#37, ca_country#38]

(35) Filter [codegen id : 12]
Input [3]: [ca_state#36, ca_zip#37, ca_country#38]
Condition : (isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_country#38, 20, false, true)) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_zip#37, 10, false, true)))

(36) Project [codegen id : 12]
Output [3]: [staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#36, 2, false, true) AS ca_state#39, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_zip#37, 10, false, true) AS ca_zip#40, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_country#38, 20, false, true) AS ca_country#41]
Input [3]: [ca_state#36, ca_zip#37, ca_country#38]

(37) Exchange
Input [3]: [ca_state#39, ca_zip#40, ca_country#41]
Arguments: hashpartitioning(upper(ca_country#41), ca_zip#40, 5), ENSURE_REQUIREMENTS, [id=#42]

(38) Sort [codegen id : 13]
Input [3]: [ca_state#39, ca_zip#40, ca_country#41]
Arguments: [upper(ca_country#41) ASC NULLS FIRST, ca_zip#40 ASC NULLS FIRST], false, 0

(39) SortMergeJoin [codegen id : 14]
Left keys [2]: [c_birth_country#22, s_zip#13]
Right keys [2]: [upper(ca_country#41), ca_zip#40]
Join condition: None

(40) Project [codegen id : 14]
Output [13]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#11, s_state#12, c_first_name#20, c_last_name#21, i_current_price#26, i_size#31, i_color#32, i_units#33, i_manager_id#30, ca_state#39]
Input [17]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#11, s_state#12, s_zip#13, c_first_name#20, c_last_name#21, c_birth_country#22, i_current_price#26, i_size#31, i_color#32, i_units#33, i_manager_id#30, ca_state#39, ca_zip#40, ca_country#41]

(41) Exchange
Input [13]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#11, s_state#12, c_first_name#20, c_last_name#21, i_current_price#26, i_size#31, i_color#32, i_units#33, i_manager_id#30, ca_state#39]
Arguments: hashpartitioning(cast(ss_ticket_number#4 as bigint), cast(ss_item_sk#1 as bigint), 5), ENSURE_REQUIREMENTS, [id=#43]

(42) Sort [codegen id : 15]
Input [13]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#11, s_state#12, c_first_name#20, c_last_name#21, i_current_price#26, i_size#31, i_color#32, i_units#33, i_manager_id#30, ca_state#39]
Arguments: [cast(ss_ticket_number#4 as bigint) ASC NULLS FIRST, cast(ss_item_sk#1 as bigint) ASC NULLS FIRST], false, 0

(43) Scan parquet default.store_returns
Output [2]: [sr_item_sk#44, sr_ticket_number#45]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:bigint,sr_ticket_number:bigint>

(44) ColumnarToRow [codegen id : 16]
Input [2]: [sr_item_sk#44, sr_ticket_number#45]

(45) Filter [codegen id : 16]
Input [2]: [sr_item_sk#44, sr_ticket_number#45]
Condition : (isnotnull(sr_ticket_number#45) AND isnotnull(sr_item_sk#44))

(46) Exchange
Input [2]: [sr_item_sk#44, sr_ticket_number#45]
Arguments: hashpartitioning(sr_ticket_number#45, sr_item_sk#44, 5), ENSURE_REQUIREMENTS, [id=#46]

(47) Sort [codegen id : 17]
Input [2]: [sr_item_sk#44, sr_ticket_number#45]
Arguments: [sr_ticket_number#45 ASC NULLS FIRST, sr_item_sk#44 ASC NULLS FIRST], false, 0

(48) SortMergeJoin [codegen id : 18]
Left keys [2]: [cast(ss_ticket_number#4 as bigint), cast(ss_item_sk#1 as bigint)]
Right keys [2]: [sr_ticket_number#45, sr_item_sk#44]
Join condition: None

(49) Project [codegen id : 18]
Output [11]: [ss_net_paid#5, s_store_name#11, s_state#12, i_current_price#26, i_size#31, i_color#32, i_units#33, i_manager_id#30, c_first_name#20, c_last_name#21, ca_state#39]
Input [15]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#11, s_state#12, c_first_name#20, c_last_name#21, i_current_price#26, i_size#31, i_color#32, i_units#33, i_manager_id#30, ca_state#39, sr_item_sk#44, sr_ticket_number#45]

(50) HashAggregate [codegen id : 18]
Input [11]: [ss_net_paid#5, s_store_name#11, s_state#12, i_current_price#26, i_size#31, i_color#32, i_units#33, i_manager_id#30, c_first_name#20, c_last_name#21, ca_state#39]
Keys [10]: [c_last_name#21, c_first_name#20, s_store_name#11, ca_state#39, s_state#12, i_color#32, i_current_price#26, i_manager_id#30, i_units#33, i_size#31]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum#47]
Results [11]: [c_last_name#21, c_first_name#20, s_store_name#11, ca_state#39, s_state#12, i_color#32, i_current_price#26, i_manager_id#30, i_units#33, i_size#31, sum#48]

(51) Exchange
Input [11]: [c_last_name#21, c_first_name#20, s_store_name#11, ca_state#39, s_state#12, i_color#32, i_current_price#26, i_manager_id#30, i_units#33, i_size#31, sum#48]
Arguments: hashpartitioning(c_last_name#21, c_first_name#20, s_store_name#11, ca_state#39, s_state#12, i_color#32, i_current_price#26, i_manager_id#30, i_units#33, i_size#31, 5), ENSURE_REQUIREMENTS, [id=#49]

(52) HashAggregate [codegen id : 19]
Input [11]: [c_last_name#21, c_first_name#20, s_store_name#11, ca_state#39, s_state#12, i_color#32, i_current_price#26, i_manager_id#30, i_units#33, i_size#31, sum#48]
Keys [10]: [c_last_name#21, c_first_name#20, s_store_name#11, ca_state#39, s_state#12, i_color#32, i_current_price#26, i_manager_id#30, i_units#33, i_size#31]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#5))#50]
Results [4]: [c_last_name#21, c_first_name#20, s_store_name#11, MakeDecimal(sum(UnscaledValue(ss_net_paid#5))#50,17,2) AS netpaid#51]

(53) HashAggregate [codegen id : 19]
Input [4]: [c_last_name#21, c_first_name#20, s_store_name#11, netpaid#51]
Keys [3]: [c_last_name#21, c_first_name#20, s_store_name#11]
Functions [1]: [partial_sum(netpaid#51)]
Aggregate Attributes [2]: [sum#52, isEmpty#53]
Results [5]: [c_last_name#21, c_first_name#20, s_store_name#11, sum#54, isEmpty#55]

(54) Exchange
Input [5]: [c_last_name#21, c_first_name#20, s_store_name#11, sum#54, isEmpty#55]
Arguments: hashpartitioning(c_last_name#21, c_first_name#20, s_store_name#11, 5), ENSURE_REQUIREMENTS, [id=#56]

(55) HashAggregate [codegen id : 20]
Input [5]: [c_last_name#21, c_first_name#20, s_store_name#11, sum#54, isEmpty#55]
Keys [3]: [c_last_name#21, c_first_name#20, s_store_name#11]
Functions [1]: [sum(netpaid#51)]
Aggregate Attributes [1]: [sum(netpaid#51)#57]
Results [5]: [c_last_name#21, c_first_name#20, s_store_name#11, sum(netpaid#51)#57 AS paid#58, sum(netpaid#51)#57 AS sum(netpaid#51)#59]

(56) Filter [codegen id : 20]
Input [5]: [c_last_name#21, c_first_name#20, s_store_name#11, paid#58, sum(netpaid#51)#59]
Condition : (isnotnull(sum(netpaid#51)#59) AND (cast(sum(netpaid#51)#59 as decimal(33,8)) > cast(Subquery scalar-subquery#60, [id=#61] as decimal(33,8))))

(57) Project [codegen id : 20]
Output [4]: [c_last_name#21, c_first_name#20, s_store_name#11, paid#58]
Input [5]: [c_last_name#21, c_first_name#20, s_store_name#11, paid#58, sum(netpaid#51)#59]

===== Subqueries =====

Subquery:1 Hosting operator id = 56 Hosting Expression = Subquery scalar-subquery#60, [id=#61]
* HashAggregate (112)
+- Exchange (111)
   +- * HashAggregate (110)
      +- * HashAggregate (109)
         +- Exchange (108)
            +- * HashAggregate (107)
               +- * Project (106)
                  +- * SortMergeJoin Inner (105)
                     :- * Sort (99)
                     :  +- Exchange (98)
                     :     +- * Project (97)
                     :        +- * SortMergeJoin Inner (96)
                     :           :- * Sort (89)
                     :           :  +- Exchange (88)
                     :           :     +- * Project (87)
                     :           :        +- * SortMergeJoin Inner (86)
                     :           :           :- * Sort (79)
                     :           :           :  +- Exchange (78)
                     :           :           :     +- * Project (77)
                     :           :           :        +- * SortMergeJoin Inner (76)
                     :           :           :           :- * Sort (69)
                     :           :           :           :  +- Exchange (68)
                     :           :           :           :     +- * Project (67)
                     :           :           :           :        +- * BroadcastHashJoin Inner BuildRight (66)
                     :           :           :           :           :- * Filter (60)
                     :           :           :           :           :  +- * ColumnarToRow (59)
                     :           :           :           :           :     +- Scan parquet default.store_sales (58)
                     :           :           :           :           +- BroadcastExchange (65)
                     :           :           :           :              +- * Project (64)
                     :           :           :           :                 +- * Filter (63)
                     :           :           :           :                    +- * ColumnarToRow (62)
                     :           :           :           :                       +- Scan parquet default.store (61)
                     :           :           :           +- * Sort (75)
                     :           :           :              +- Exchange (74)
                     :           :           :                 +- * Project (73)
                     :           :           :                    +- * Filter (72)
                     :           :           :                       +- * ColumnarToRow (71)
                     :           :           :                          +- Scan parquet default.customer (70)
                     :           :           +- * Sort (85)
                     :           :              +- Exchange (84)
                     :           :                 +- * Project (83)
                     :           :                    +- * Filter (82)
                     :           :                       +- * ColumnarToRow (81)
                     :           :                          +- Scan parquet default.item (80)
                     :           +- * Sort (95)
                     :              +- Exchange (94)
                     :                 +- * Project (93)
                     :                    +- * Filter (92)
                     :                       +- * ColumnarToRow (91)
                     :                          +- Scan parquet default.customer_address (90)
                     +- * Sort (104)
                        +- Exchange (103)
                           +- * Filter (102)
                              +- * ColumnarToRow (101)
                                 +- Scan parquet default.store_returns (100)


(58) Scan parquet default.store_sales
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(59) ColumnarToRow [codegen id : 2]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]

(60) Filter [codegen id : 2]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Condition : (((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2))

(61) Scan parquet default.store
Output [5]: [s_store_sk#6, s_store_name#7, s_market_id#8, s_state#9, s_zip#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(62) ColumnarToRow [codegen id : 1]
Input [5]: [s_store_sk#6, s_store_name#7, s_market_id#8, s_state#9, s_zip#10]

(63) Filter [codegen id : 1]
Input [5]: [s_store_sk#6, s_store_name#7, s_market_id#8, s_state#9, s_zip#10]
Condition : (((isnotnull(s_market_id#8) AND (s_market_id#8 = 8)) AND isnotnull(s_store_sk#6)) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_zip#10, 10, false, true)))

(64) Project [codegen id : 1]
Output [4]: [s_store_sk#6, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_store_name#7, 50, false, true) AS s_store_name#62, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#9, 2, false, true) AS s_state#63, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_zip#10, 10, false, true) AS s_zip#64]
Input [5]: [s_store_sk#6, s_store_name#7, s_market_id#8, s_state#9, s_zip#10]

(65) BroadcastExchange
Input [4]: [s_store_sk#6, s_store_name#62, s_state#63, s_zip#64]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#65]

(66) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#6]
Join condition: None

(67) Project [codegen id : 2]
Output [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#62, s_state#63, s_zip#64]
Input [9]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, s_store_sk#6, s_store_name#62, s_state#63, s_zip#64]

(68) Exchange
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#62, s_state#63, s_zip#64]
Arguments: hashpartitioning(ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#66]

(69) Sort [codegen id : 3]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#62, s_state#63, s_zip#64]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(70) Scan parquet default.customer
Output [4]: [c_customer_sk#16, c_first_name#17, c_last_name#18, c_birth_country#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(71) ColumnarToRow [codegen id : 4]
Input [4]: [c_customer_sk#16, c_first_name#17, c_last_name#18, c_birth_country#19]

(72) Filter [codegen id : 4]
Input [4]: [c_customer_sk#16, c_first_name#17, c_last_name#18, c_birth_country#19]
Condition : (isnotnull(c_customer_sk#16) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, c_birth_country#19, 20, false, true)))

(73) Project [codegen id : 4]
Output [4]: [c_customer_sk#16, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#17, 20, false, true) AS c_first_name#67, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#18, 30, false, true) AS c_last_name#68, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, c_birth_country#19, 20, false, true) AS c_birth_country#69]
Input [4]: [c_customer_sk#16, c_first_name#17, c_last_name#18, c_birth_country#19]

(74) Exchange
Input [4]: [c_customer_sk#16, c_first_name#67, c_last_name#68, c_birth_country#69]
Arguments: hashpartitioning(c_customer_sk#16, 5), ENSURE_REQUIREMENTS, [id=#70]

(75) Sort [codegen id : 5]
Input [4]: [c_customer_sk#16, c_first_name#67, c_last_name#68, c_birth_country#69]
Arguments: [c_customer_sk#16 ASC NULLS FIRST], false, 0

(76) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#16]
Join condition: None

(77) Project [codegen id : 6]
Output [9]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#62, s_state#63, s_zip#64, c_first_name#67, c_last_name#68, c_birth_country#69]
Input [11]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_net_paid#5, s_store_name#62, s_state#63, s_zip#64, c_customer_sk#16, c_first_name#67, c_last_name#68, c_birth_country#69]

(78) Exchange
Input [9]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#62, s_state#63, s_zip#64, c_first_name#67, c_last_name#68, c_birth_country#69]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#71]

(79) Sort [codegen id : 7]
Input [9]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#62, s_state#63, s_zip#64, c_first_name#67, c_last_name#68, c_birth_country#69]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(80) Scan parquet default.item
Output [6]: [i_item_sk#25, i_current_price#26, i_size#27, i_color#28, i_units#29, i_manager_id#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(81) ColumnarToRow [codegen id : 8]
Input [6]: [i_item_sk#25, i_current_price#26, i_size#27, i_color#28, i_units#29, i_manager_id#30]

(82) Filter [codegen id : 8]
Input [6]: [i_item_sk#25, i_current_price#26, i_size#27, i_color#28, i_units#29, i_manager_id#30]
Condition : isnotnull(i_item_sk#25)

(83) Project [codegen id : 8]
Output [6]: [i_item_sk#25, i_current_price#26, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_size#27, 20, false, true) AS i_size#72, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_color#28, 20, false, true) AS i_color#73, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_units#29, 10, false, true) AS i_units#74, i_manager_id#30]
Input [6]: [i_item_sk#25, i_current_price#26, i_size#27, i_color#28, i_units#29, i_manager_id#30]

(84) Exchange
Input [6]: [i_item_sk#25, i_current_price#26, i_size#72, i_color#73, i_units#74, i_manager_id#30]
Arguments: hashpartitioning(i_item_sk#25, 5), ENSURE_REQUIREMENTS, [id=#75]

(85) Sort [codegen id : 9]
Input [6]: [i_item_sk#25, i_current_price#26, i_size#72, i_color#73, i_units#74, i_manager_id#30]
Arguments: [i_item_sk#25 ASC NULLS FIRST], false, 0

(86) SortMergeJoin [codegen id : 10]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#25]
Join condition: None

(87) Project [codegen id : 10]
Output [14]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#62, s_state#63, s_zip#64, c_first_name#67, c_last_name#68, c_birth_country#69, i_current_price#26, i_size#72, i_color#73, i_units#74, i_manager_id#30]
Input [15]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#62, s_state#63, s_zip#64, c_first_name#67, c_last_name#68, c_birth_country#69, i_item_sk#25, i_current_price#26, i_size#72, i_color#73, i_units#74, i_manager_id#30]

(88) Exchange
Input [14]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#62, s_state#63, s_zip#64, c_first_name#67, c_last_name#68, c_birth_country#69, i_current_price#26, i_size#72, i_color#73, i_units#74, i_manager_id#30]
Arguments: hashpartitioning(c_birth_country#69, s_zip#64, 5), ENSURE_REQUIREMENTS, [id=#76]

(89) Sort [codegen id : 11]
Input [14]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#62, s_state#63, s_zip#64, c_first_name#67, c_last_name#68, c_birth_country#69, i_current_price#26, i_size#72, i_color#73, i_units#74, i_manager_id#30]
Arguments: [c_birth_country#69 ASC NULLS FIRST, s_zip#64 ASC NULLS FIRST], false, 0

(90) Scan parquet default.customer_address
Output [3]: [ca_state#36, ca_zip#37, ca_country#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>

(91) ColumnarToRow [codegen id : 12]
Input [3]: [ca_state#36, ca_zip#37, ca_country#38]

(92) Filter [codegen id : 12]
Input [3]: [ca_state#36, ca_zip#37, ca_country#38]
Condition : (isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_country#38, 20, false, true)) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_zip#37, 10, false, true)))

(93) Project [codegen id : 12]
Output [3]: [staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#36, 2, false, true) AS ca_state#77, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_zip#37, 10, false, true) AS ca_zip#78, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, ca_country#38, 20, false, true) AS ca_country#79]
Input [3]: [ca_state#36, ca_zip#37, ca_country#38]

(94) Exchange
Input [3]: [ca_state#77, ca_zip#78, ca_country#79]
Arguments: hashpartitioning(upper(ca_country#79), ca_zip#78, 5), ENSURE_REQUIREMENTS, [id=#80]

(95) Sort [codegen id : 13]
Input [3]: [ca_state#77, ca_zip#78, ca_country#79]
Arguments: [upper(ca_country#79) ASC NULLS FIRST, ca_zip#78 ASC NULLS FIRST], false, 0

(96) SortMergeJoin [codegen id : 14]
Left keys [2]: [c_birth_country#69, s_zip#64]
Right keys [2]: [upper(ca_country#79), ca_zip#78]
Join condition: None

(97) Project [codegen id : 14]
Output [13]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#62, s_state#63, c_first_name#67, c_last_name#68, i_current_price#26, i_size#72, i_color#73, i_units#74, i_manager_id#30, ca_state#77]
Input [17]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#62, s_state#63, s_zip#64, c_first_name#67, c_last_name#68, c_birth_country#69, i_current_price#26, i_size#72, i_color#73, i_units#74, i_manager_id#30, ca_state#77, ca_zip#78, ca_country#79]

(98) Exchange
Input [13]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#62, s_state#63, c_first_name#67, c_last_name#68, i_current_price#26, i_size#72, i_color#73, i_units#74, i_manager_id#30, ca_state#77]
Arguments: hashpartitioning(cast(ss_ticket_number#4 as bigint), cast(ss_item_sk#1 as bigint), 5), ENSURE_REQUIREMENTS, [id=#81]

(99) Sort [codegen id : 15]
Input [13]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#62, s_state#63, c_first_name#67, c_last_name#68, i_current_price#26, i_size#72, i_color#73, i_units#74, i_manager_id#30, ca_state#77]
Arguments: [cast(ss_ticket_number#4 as bigint) ASC NULLS FIRST, cast(ss_item_sk#1 as bigint) ASC NULLS FIRST], false, 0

(100) Scan parquet default.store_returns
Output [2]: [sr_item_sk#44, sr_ticket_number#45]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:bigint,sr_ticket_number:bigint>

(101) ColumnarToRow [codegen id : 16]
Input [2]: [sr_item_sk#44, sr_ticket_number#45]

(102) Filter [codegen id : 16]
Input [2]: [sr_item_sk#44, sr_ticket_number#45]
Condition : (isnotnull(sr_ticket_number#45) AND isnotnull(sr_item_sk#44))

(103) Exchange
Input [2]: [sr_item_sk#44, sr_ticket_number#45]
Arguments: hashpartitioning(sr_ticket_number#45, sr_item_sk#44, 5), ENSURE_REQUIREMENTS, [id=#82]

(104) Sort [codegen id : 17]
Input [2]: [sr_item_sk#44, sr_ticket_number#45]
Arguments: [sr_ticket_number#45 ASC NULLS FIRST, sr_item_sk#44 ASC NULLS FIRST], false, 0

(105) SortMergeJoin [codegen id : 18]
Left keys [2]: [cast(ss_ticket_number#4 as bigint), cast(ss_item_sk#1 as bigint)]
Right keys [2]: [sr_ticket_number#45, sr_item_sk#44]
Join condition: None

(106) Project [codegen id : 18]
Output [11]: [ss_net_paid#5, s_store_name#62, s_state#63, i_current_price#26, i_size#72, i_color#73, i_units#74, i_manager_id#30, c_first_name#67, c_last_name#68, ca_state#77]
Input [15]: [ss_item_sk#1, ss_ticket_number#4, ss_net_paid#5, s_store_name#62, s_state#63, c_first_name#67, c_last_name#68, i_current_price#26, i_size#72, i_color#73, i_units#74, i_manager_id#30, ca_state#77, sr_item_sk#44, sr_ticket_number#45]

(107) HashAggregate [codegen id : 18]
Input [11]: [ss_net_paid#5, s_store_name#62, s_state#63, i_current_price#26, i_size#72, i_color#73, i_units#74, i_manager_id#30, c_first_name#67, c_last_name#68, ca_state#77]
Keys [10]: [c_last_name#68, c_first_name#67, s_store_name#62, ca_state#77, s_state#63, i_color#73, i_current_price#26, i_manager_id#30, i_units#74, i_size#72]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum#83]
Results [11]: [c_last_name#68, c_first_name#67, s_store_name#62, ca_state#77, s_state#63, i_color#73, i_current_price#26, i_manager_id#30, i_units#74, i_size#72, sum#84]

(108) Exchange
Input [11]: [c_last_name#68, c_first_name#67, s_store_name#62, ca_state#77, s_state#63, i_color#73, i_current_price#26, i_manager_id#30, i_units#74, i_size#72, sum#84]
Arguments: hashpartitioning(c_last_name#68, c_first_name#67, s_store_name#62, ca_state#77, s_state#63, i_color#73, i_current_price#26, i_manager_id#30, i_units#74, i_size#72, 5), ENSURE_REQUIREMENTS, [id=#85]

(109) HashAggregate [codegen id : 19]
Input [11]: [c_last_name#68, c_first_name#67, s_store_name#62, ca_state#77, s_state#63, i_color#73, i_current_price#26, i_manager_id#30, i_units#74, i_size#72, sum#84]
Keys [10]: [c_last_name#68, c_first_name#67, s_store_name#62, ca_state#77, s_state#63, i_color#73, i_current_price#26, i_manager_id#30, i_units#74, i_size#72]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#5))#86]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_paid#5))#86,17,2) AS netpaid#51]

(110) HashAggregate [codegen id : 19]
Input [1]: [netpaid#51]
Keys: []
Functions [1]: [partial_avg(netpaid#51)]
Aggregate Attributes [2]: [sum#87, count#88]
Results [2]: [sum#89, count#90]

(111) Exchange
Input [2]: [sum#89, count#90]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#91]

(112) HashAggregate [codegen id : 20]
Input [2]: [sum#89, count#90]
Keys: []
Functions [1]: [avg(netpaid#51)]
Aggregate Attributes [1]: [avg(netpaid#51)#92]
Results [1]: [CheckOverflow((0.050000 * promote_precision(avg(netpaid#51)#92)), DecimalType(24,8), true) AS (0.05 * avg(netpaid))#93]


