== Physical Plan ==
* Project (51)
+- * Filter (50)
   +- * HashAggregate (49)
      +- Exchange (48)
         +- * HashAggregate (47)
            +- * HashAggregate (46)
               +- Exchange (45)
                  +- * HashAggregate (44)
                     +- * Project (43)
                        +- * BroadcastHashJoin Inner BuildRight (42)
                           :- * Project (36)
                           :  +- * BroadcastHashJoin Inner BuildRight (35)
                           :     :- * Project (30)
                           :     :  +- * SortMergeJoin Inner (29)
                           :     :     :- * Sort (23)
                           :     :     :  +- Exchange (22)
                           :     :     :     +- * Project (21)
                           :     :     :        +- * SortMergeJoin Inner (20)
                           :     :     :           :- * Sort (14)
                           :     :     :           :  +- Exchange (13)
                           :     :     :           :     +- * Project (12)
                           :     :     :           :        +- * SortMergeJoin Inner (11)
                           :     :     :           :           :- * Sort (5)
                           :     :     :           :           :  +- Exchange (4)
                           :     :     :           :           :     +- * Filter (3)
                           :     :     :           :           :        +- * ColumnarToRow (2)
                           :     :     :           :           :           +- Scan parquet default.store_sales (1)
                           :     :     :           :           +- * Sort (10)
                           :     :     :           :              +- Exchange (9)
                           :     :     :           :                 +- * Filter (8)
                           :     :     :           :                    +- * ColumnarToRow (7)
                           :     :     :           :                       +- Scan parquet default.store_returns (6)
                           :     :     :           +- * Sort (19)
                           :     :     :              +- Exchange (18)
                           :     :     :                 +- * Filter (17)
                           :     :     :                    +- * ColumnarToRow (16)
                           :     :     :                       +- Scan parquet default.customer (15)
                           :     :     +- * Sort (28)
                           :     :        +- Exchange (27)
                           :     :           +- * Filter (26)
                           :     :              +- * ColumnarToRow (25)
                           :     :                 +- Scan parquet default.customer_address (24)
                           :     +- BroadcastExchange (34)
                           :        +- * Filter (33)
                           :           +- * ColumnarToRow (32)
                           :              +- Scan parquet default.item (31)
                           +- BroadcastExchange (41)
                              +- * Project (40)
                                 +- * Filter (39)
                                    +- * ColumnarToRow (38)
                                       +- Scan parquet default.store (37)


(1) Scan parquet default.store_sales
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]

(3) Filter [codegen id : 1]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Condition : (((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2))

(4) Exchange
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Arguments: hashpartitioning(cast(ss_ticket_number#4 as bigint), cast(ss_item_sk#1 as bigint), 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Arguments: [cast(ss_ticket_number#4 as bigint) ASC NULLS FIRST, cast(ss_item_sk#1 as bigint) ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_returns
Output [2]: [sr_item_sk#7, sr_ticket_number#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:bigint,sr_ticket_number:bigint>

(7) ColumnarToRow [codegen id : 3]
Input [2]: [sr_item_sk#7, sr_ticket_number#8]

(8) Filter [codegen id : 3]
Input [2]: [sr_item_sk#7, sr_ticket_number#8]
Condition : (isnotnull(sr_ticket_number#8) AND isnotnull(sr_item_sk#7))

(9) Exchange
Input [2]: [sr_item_sk#7, sr_ticket_number#8]
Arguments: hashpartitioning(sr_ticket_number#8, sr_item_sk#7, 5), ENSURE_REQUIREMENTS, [id=#9]

(10) Sort [codegen id : 4]
Input [2]: [sr_item_sk#7, sr_ticket_number#8]
Arguments: [sr_ticket_number#8 ASC NULLS FIRST, sr_item_sk#7 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 5]
Left keys [2]: [cast(ss_ticket_number#4 as bigint), cast(ss_item_sk#1 as bigint)]
Right keys [2]: [sr_ticket_number#8, sr_item_sk#7]
Join condition: None

(12) Project [codegen id : 5]
Output [4]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, sr_item_sk#7, sr_ticket_number#8]

(13) Exchange
Input [4]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5]
Arguments: hashpartitioning(ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#10]

(14) Sort [codegen id : 6]
Input [4]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(15) Scan parquet default.customer
Output [4]: [c_customer_sk#11, c_first_name#12, c_last_name#13, c_birth_country#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(16) ColumnarToRow [codegen id : 7]
Input [4]: [c_customer_sk#11, c_first_name#12, c_last_name#13, c_birth_country#14]

(17) Filter [codegen id : 7]
Input [4]: [c_customer_sk#11, c_first_name#12, c_last_name#13, c_birth_country#14]
Condition : (isnotnull(c_customer_sk#11) AND isnotnull(c_birth_country#14))

(18) Exchange
Input [4]: [c_customer_sk#11, c_first_name#12, c_last_name#13, c_birth_country#14]
Arguments: hashpartitioning(c_customer_sk#11, 5), ENSURE_REQUIREMENTS, [id=#15]

(19) Sort [codegen id : 8]
Input [4]: [c_customer_sk#11, c_first_name#12, c_last_name#13, c_birth_country#14]
Arguments: [c_customer_sk#11 ASC NULLS FIRST], false, 0

(20) SortMergeJoin [codegen id : 9]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#11]
Join condition: None

(21) Project [codegen id : 9]
Output [6]: [ss_item_sk#1, ss_store_sk#3, ss_net_paid#5, c_first_name#12, c_last_name#13, c_birth_country#14]
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5, c_customer_sk#11, c_first_name#12, c_last_name#13, c_birth_country#14]

(22) Exchange
Input [6]: [ss_item_sk#1, ss_store_sk#3, ss_net_paid#5, c_first_name#12, c_last_name#13, c_birth_country#14]
Arguments: hashpartitioning(c_birth_country#14, 5), ENSURE_REQUIREMENTS, [id=#16]

(23) Sort [codegen id : 10]
Input [6]: [ss_item_sk#1, ss_store_sk#3, ss_net_paid#5, c_first_name#12, c_last_name#13, c_birth_country#14]
Arguments: [c_birth_country#14 ASC NULLS FIRST], false, 0

(24) Scan parquet default.customer_address
Output [3]: [ca_state#17, ca_zip#18, ca_country#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>

(25) ColumnarToRow [codegen id : 11]
Input [3]: [ca_state#17, ca_zip#18, ca_country#19]

(26) Filter [codegen id : 11]
Input [3]: [ca_state#17, ca_zip#18, ca_country#19]
Condition : (isnotnull(ca_country#19) AND isnotnull(ca_zip#18))

(27) Exchange
Input [3]: [ca_state#17, ca_zip#18, ca_country#19]
Arguments: hashpartitioning(upper(ca_country#19), 5), ENSURE_REQUIREMENTS, [id=#20]

(28) Sort [codegen id : 12]
Input [3]: [ca_state#17, ca_zip#18, ca_country#19]
Arguments: [upper(ca_country#19) ASC NULLS FIRST], false, 0

(29) SortMergeJoin [codegen id : 15]
Left keys [1]: [c_birth_country#14]
Right keys [1]: [upper(ca_country#19)]
Join condition: None

(30) Project [codegen id : 15]
Output [7]: [ss_item_sk#1, ss_store_sk#3, ss_net_paid#5, c_first_name#12, c_last_name#13, ca_state#17, ca_zip#18]
Input [9]: [ss_item_sk#1, ss_store_sk#3, ss_net_paid#5, c_first_name#12, c_last_name#13, c_birth_country#14, ca_state#17, ca_zip#18, ca_country#19]

(31) Scan parquet default.item
Output [6]: [i_item_sk#21, i_current_price#22, i_size#23, i_color#24, i_units#25, i_manager_id#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(32) ColumnarToRow [codegen id : 13]
Input [6]: [i_item_sk#21, i_current_price#22, i_size#23, i_color#24, i_units#25, i_manager_id#26]

(33) Filter [codegen id : 13]
Input [6]: [i_item_sk#21, i_current_price#22, i_size#23, i_color#24, i_units#25, i_manager_id#26]
Condition : ((isnotnull(i_color#24) AND (i_color#24 = chiffon)) AND isnotnull(i_item_sk#21))

(34) BroadcastExchange
Input [6]: [i_item_sk#21, i_current_price#22, i_size#23, i_color#24, i_units#25, i_manager_id#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27]

(35) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#21]
Join condition: None

(36) Project [codegen id : 15]
Output [11]: [ss_store_sk#3, ss_net_paid#5, c_first_name#12, c_last_name#13, ca_state#17, ca_zip#18, i_current_price#22, i_size#23, i_color#24, i_units#25, i_manager_id#26]
Input [13]: [ss_item_sk#1, ss_store_sk#3, ss_net_paid#5, c_first_name#12, c_last_name#13, ca_state#17, ca_zip#18, i_item_sk#21, i_current_price#22, i_size#23, i_color#24, i_units#25, i_manager_id#26]

(37) Scan parquet default.store
Output [5]: [s_store_sk#28, s_store_name#29, s_market_id#30, s_state#31, s_zip#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(38) ColumnarToRow [codegen id : 14]
Input [5]: [s_store_sk#28, s_store_name#29, s_market_id#30, s_state#31, s_zip#32]

(39) Filter [codegen id : 14]
Input [5]: [s_store_sk#28, s_store_name#29, s_market_id#30, s_state#31, s_zip#32]
Condition : (((isnotnull(s_market_id#30) AND (s_market_id#30 = 8)) AND isnotnull(s_store_sk#28)) AND isnotnull(s_zip#32))

(40) Project [codegen id : 14]
Output [4]: [s_store_sk#28, s_store_name#29, s_state#31, s_zip#32]
Input [5]: [s_store_sk#28, s_store_name#29, s_market_id#30, s_state#31, s_zip#32]

(41) BroadcastExchange
Input [4]: [s_store_sk#28, s_store_name#29, s_state#31, s_zip#32]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[3, string, true]),false), [id=#33]

(42) BroadcastHashJoin [codegen id : 15]
Left keys [2]: [ss_store_sk#3, ca_zip#18]
Right keys [2]: [s_store_sk#28, s_zip#32]
Join condition: None

(43) Project [codegen id : 15]
Output [11]: [ss_net_paid#5, s_store_name#29, s_state#31, i_current_price#22, i_size#23, i_color#24, i_units#25, i_manager_id#26, c_first_name#12, c_last_name#13, ca_state#17]
Input [15]: [ss_store_sk#3, ss_net_paid#5, c_first_name#12, c_last_name#13, ca_state#17, ca_zip#18, i_current_price#22, i_size#23, i_color#24, i_units#25, i_manager_id#26, s_store_sk#28, s_store_name#29, s_state#31, s_zip#32]

(44) HashAggregate [codegen id : 15]
Input [11]: [ss_net_paid#5, s_store_name#29, s_state#31, i_current_price#22, i_size#23, i_color#24, i_units#25, i_manager_id#26, c_first_name#12, c_last_name#13, ca_state#17]
Keys [10]: [c_last_name#13, c_first_name#12, s_store_name#29, ca_state#17, s_state#31, i_color#24, i_current_price#22, i_manager_id#26, i_units#25, i_size#23]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum#34]
Results [11]: [c_last_name#13, c_first_name#12, s_store_name#29, ca_state#17, s_state#31, i_color#24, i_current_price#22, i_manager_id#26, i_units#25, i_size#23, sum#35]

(45) Exchange
Input [11]: [c_last_name#13, c_first_name#12, s_store_name#29, ca_state#17, s_state#31, i_color#24, i_current_price#22, i_manager_id#26, i_units#25, i_size#23, sum#35]
Arguments: hashpartitioning(c_last_name#13, c_first_name#12, s_store_name#29, ca_state#17, s_state#31, i_color#24, i_current_price#22, i_manager_id#26, i_units#25, i_size#23, 5), ENSURE_REQUIREMENTS, [id=#36]

(46) HashAggregate [codegen id : 16]
Input [11]: [c_last_name#13, c_first_name#12, s_store_name#29, ca_state#17, s_state#31, i_color#24, i_current_price#22, i_manager_id#26, i_units#25, i_size#23, sum#35]
Keys [10]: [c_last_name#13, c_first_name#12, s_store_name#29, ca_state#17, s_state#31, i_color#24, i_current_price#22, i_manager_id#26, i_units#25, i_size#23]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#5))#37]
Results [4]: [c_last_name#13, c_first_name#12, s_store_name#29, MakeDecimal(sum(UnscaledValue(ss_net_paid#5))#37,17,2) AS netpaid#38]

(47) HashAggregate [codegen id : 16]
Input [4]: [c_last_name#13, c_first_name#12, s_store_name#29, netpaid#38]
Keys [3]: [c_last_name#13, c_first_name#12, s_store_name#29]
Functions [1]: [partial_sum(netpaid#38)]
Aggregate Attributes [2]: [sum#39, isEmpty#40]
Results [5]: [c_last_name#13, c_first_name#12, s_store_name#29, sum#41, isEmpty#42]

(48) Exchange
Input [5]: [c_last_name#13, c_first_name#12, s_store_name#29, sum#41, isEmpty#42]
Arguments: hashpartitioning(c_last_name#13, c_first_name#12, s_store_name#29, 5), ENSURE_REQUIREMENTS, [id=#43]

(49) HashAggregate [codegen id : 17]
Input [5]: [c_last_name#13, c_first_name#12, s_store_name#29, sum#41, isEmpty#42]
Keys [3]: [c_last_name#13, c_first_name#12, s_store_name#29]
Functions [1]: [sum(netpaid#38)]
Aggregate Attributes [1]: [sum(netpaid#38)#44]
Results [5]: [c_last_name#13, c_first_name#12, s_store_name#29, sum(netpaid#38)#44 AS paid#45, sum(netpaid#38)#44 AS sum(netpaid#38)#46]

(50) Filter [codegen id : 17]
Input [5]: [c_last_name#13, c_first_name#12, s_store_name#29, paid#45, sum(netpaid#38)#46]
Condition : (isnotnull(sum(netpaid#38)#46) AND (cast(sum(netpaid#38)#46 as decimal(33,8)) > cast(Subquery scalar-subquery#47, [id=#48] as decimal(33,8))))

(51) Project [codegen id : 17]
Output [4]: [c_last_name#13, c_first_name#12, s_store_name#29, paid#45]
Input [5]: [c_last_name#13, c_first_name#12, s_store_name#29, paid#45, sum(netpaid#38)#46]

===== Subqueries =====

Subquery:1 Hosting operator id = 50 Hosting Expression = Subquery scalar-subquery#47, [id=#48]
* HashAggregate (103)
+- Exchange (102)
   +- * HashAggregate (101)
      +- * HashAggregate (100)
         +- Exchange (99)
            +- * HashAggregate (98)
               +- * Project (97)
                  +- * BroadcastHashJoin Inner BuildRight (96)
                     :- * Project (90)
                     :  +- * SortMergeJoin Inner (89)
                     :     :- * Sort (83)
                     :     :  +- Exchange (82)
                     :     :     +- * Project (81)
                     :     :        +- * SortMergeJoin Inner (80)
                     :     :           :- * Sort (74)
                     :     :           :  +- Exchange (73)
                     :     :           :     +- * Project (72)
                     :     :           :        +- * SortMergeJoin Inner (71)
                     :     :           :           :- * Sort (65)
                     :     :           :           :  +- Exchange (64)
                     :     :           :           :     +- * Project (63)
                     :     :           :           :        +- * SortMergeJoin Inner (62)
                     :     :           :           :           :- * Sort (56)
                     :     :           :           :           :  +- Exchange (55)
                     :     :           :           :           :     +- * Filter (54)
                     :     :           :           :           :        +- * ColumnarToRow (53)
                     :     :           :           :           :           +- Scan parquet default.store_sales (52)
                     :     :           :           :           +- * Sort (61)
                     :     :           :           :              +- Exchange (60)
                     :     :           :           :                 +- * Filter (59)
                     :     :           :           :                    +- * ColumnarToRow (58)
                     :     :           :           :                       +- Scan parquet default.store_returns (57)
                     :     :           :           +- * Sort (70)
                     :     :           :              +- Exchange (69)
                     :     :           :                 +- * Filter (68)
                     :     :           :                    +- * ColumnarToRow (67)
                     :     :           :                       +- Scan parquet default.customer (66)
                     :     :           +- * Sort (79)
                     :     :              +- Exchange (78)
                     :     :                 +- * Filter (77)
                     :     :                    +- * ColumnarToRow (76)
                     :     :                       +- Scan parquet default.customer_address (75)
                     :     +- * Sort (88)
                     :        +- Exchange (87)
                     :           +- * Filter (86)
                     :              +- * ColumnarToRow (85)
                     :                 +- Scan parquet default.item (84)
                     +- BroadcastExchange (95)
                        +- * Project (94)
                           +- * Filter (93)
                              +- * ColumnarToRow (92)
                                 +- Scan parquet default.store (91)


(52) Scan parquet default.store_sales
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(53) ColumnarToRow [codegen id : 1]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]

(54) Filter [codegen id : 1]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Condition : (((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2))

(55) Exchange
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Arguments: hashpartitioning(cast(ss_ticket_number#4 as bigint), cast(ss_item_sk#1 as bigint), 5), ENSURE_REQUIREMENTS, [id=#49]

(56) Sort [codegen id : 2]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Arguments: [cast(ss_ticket_number#4 as bigint) ASC NULLS FIRST, cast(ss_item_sk#1 as bigint) ASC NULLS FIRST], false, 0

(57) Scan parquet default.store_returns
Output [2]: [sr_item_sk#7, sr_ticket_number#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:bigint,sr_ticket_number:bigint>

(58) ColumnarToRow [codegen id : 3]
Input [2]: [sr_item_sk#7, sr_ticket_number#8]

(59) Filter [codegen id : 3]
Input [2]: [sr_item_sk#7, sr_ticket_number#8]
Condition : (isnotnull(sr_ticket_number#8) AND isnotnull(sr_item_sk#7))

(60) Exchange
Input [2]: [sr_item_sk#7, sr_ticket_number#8]
Arguments: hashpartitioning(sr_ticket_number#8, sr_item_sk#7, 5), ENSURE_REQUIREMENTS, [id=#50]

(61) Sort [codegen id : 4]
Input [2]: [sr_item_sk#7, sr_ticket_number#8]
Arguments: [sr_ticket_number#8 ASC NULLS FIRST, sr_item_sk#7 ASC NULLS FIRST], false, 0

(62) SortMergeJoin [codegen id : 5]
Left keys [2]: [cast(ss_ticket_number#4 as bigint), cast(ss_item_sk#1 as bigint)]
Right keys [2]: [sr_ticket_number#8, sr_item_sk#7]
Join condition: None

(63) Project [codegen id : 5]
Output [4]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, sr_item_sk#7, sr_ticket_number#8]

(64) Exchange
Input [4]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5]
Arguments: hashpartitioning(ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#51]

(65) Sort [codegen id : 6]
Input [4]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(66) Scan parquet default.customer
Output [4]: [c_customer_sk#11, c_first_name#12, c_last_name#13, c_birth_country#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(67) ColumnarToRow [codegen id : 7]
Input [4]: [c_customer_sk#11, c_first_name#12, c_last_name#13, c_birth_country#14]

(68) Filter [codegen id : 7]
Input [4]: [c_customer_sk#11, c_first_name#12, c_last_name#13, c_birth_country#14]
Condition : (isnotnull(c_customer_sk#11) AND isnotnull(c_birth_country#14))

(69) Exchange
Input [4]: [c_customer_sk#11, c_first_name#12, c_last_name#13, c_birth_country#14]
Arguments: hashpartitioning(c_customer_sk#11, 5), ENSURE_REQUIREMENTS, [id=#52]

(70) Sort [codegen id : 8]
Input [4]: [c_customer_sk#11, c_first_name#12, c_last_name#13, c_birth_country#14]
Arguments: [c_customer_sk#11 ASC NULLS FIRST], false, 0

(71) SortMergeJoin [codegen id : 9]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#11]
Join condition: None

(72) Project [codegen id : 9]
Output [6]: [ss_item_sk#1, ss_store_sk#3, ss_net_paid#5, c_first_name#12, c_last_name#13, c_birth_country#14]
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5, c_customer_sk#11, c_first_name#12, c_last_name#13, c_birth_country#14]

(73) Exchange
Input [6]: [ss_item_sk#1, ss_store_sk#3, ss_net_paid#5, c_first_name#12, c_last_name#13, c_birth_country#14]
Arguments: hashpartitioning(c_birth_country#14, 5), ENSURE_REQUIREMENTS, [id=#53]

(74) Sort [codegen id : 10]
Input [6]: [ss_item_sk#1, ss_store_sk#3, ss_net_paid#5, c_first_name#12, c_last_name#13, c_birth_country#14]
Arguments: [c_birth_country#14 ASC NULLS FIRST], false, 0

(75) Scan parquet default.customer_address
Output [3]: [ca_state#17, ca_zip#18, ca_country#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>

(76) ColumnarToRow [codegen id : 11]
Input [3]: [ca_state#17, ca_zip#18, ca_country#19]

(77) Filter [codegen id : 11]
Input [3]: [ca_state#17, ca_zip#18, ca_country#19]
Condition : (isnotnull(ca_country#19) AND isnotnull(ca_zip#18))

(78) Exchange
Input [3]: [ca_state#17, ca_zip#18, ca_country#19]
Arguments: hashpartitioning(upper(ca_country#19), 5), ENSURE_REQUIREMENTS, [id=#54]

(79) Sort [codegen id : 12]
Input [3]: [ca_state#17, ca_zip#18, ca_country#19]
Arguments: [upper(ca_country#19) ASC NULLS FIRST], false, 0

(80) SortMergeJoin [codegen id : 13]
Left keys [1]: [c_birth_country#14]
Right keys [1]: [upper(ca_country#19)]
Join condition: None

(81) Project [codegen id : 13]
Output [7]: [ss_item_sk#1, ss_store_sk#3, ss_net_paid#5, c_first_name#12, c_last_name#13, ca_state#17, ca_zip#18]
Input [9]: [ss_item_sk#1, ss_store_sk#3, ss_net_paid#5, c_first_name#12, c_last_name#13, c_birth_country#14, ca_state#17, ca_zip#18, ca_country#19]

(82) Exchange
Input [7]: [ss_item_sk#1, ss_store_sk#3, ss_net_paid#5, c_first_name#12, c_last_name#13, ca_state#17, ca_zip#18]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#55]

(83) Sort [codegen id : 14]
Input [7]: [ss_item_sk#1, ss_store_sk#3, ss_net_paid#5, c_first_name#12, c_last_name#13, ca_state#17, ca_zip#18]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(84) Scan parquet default.item
Output [6]: [i_item_sk#21, i_current_price#22, i_size#23, i_color#24, i_units#25, i_manager_id#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(85) ColumnarToRow [codegen id : 15]
Input [6]: [i_item_sk#21, i_current_price#22, i_size#23, i_color#24, i_units#25, i_manager_id#26]

(86) Filter [codegen id : 15]
Input [6]: [i_item_sk#21, i_current_price#22, i_size#23, i_color#24, i_units#25, i_manager_id#26]
Condition : isnotnull(i_item_sk#21)

(87) Exchange
Input [6]: [i_item_sk#21, i_current_price#22, i_size#23, i_color#24, i_units#25, i_manager_id#26]
Arguments: hashpartitioning(i_item_sk#21, 5), ENSURE_REQUIREMENTS, [id=#56]

(88) Sort [codegen id : 16]
Input [6]: [i_item_sk#21, i_current_price#22, i_size#23, i_color#24, i_units#25, i_manager_id#26]
Arguments: [i_item_sk#21 ASC NULLS FIRST], false, 0

(89) SortMergeJoin [codegen id : 18]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#21]
Join condition: None

(90) Project [codegen id : 18]
Output [11]: [ss_store_sk#3, ss_net_paid#5, c_first_name#12, c_last_name#13, ca_state#17, ca_zip#18, i_current_price#22, i_size#23, i_color#24, i_units#25, i_manager_id#26]
Input [13]: [ss_item_sk#1, ss_store_sk#3, ss_net_paid#5, c_first_name#12, c_last_name#13, ca_state#17, ca_zip#18, i_item_sk#21, i_current_price#22, i_size#23, i_color#24, i_units#25, i_manager_id#26]

(91) Scan parquet default.store
Output [5]: [s_store_sk#28, s_store_name#29, s_market_id#30, s_state#31, s_zip#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(92) ColumnarToRow [codegen id : 17]
Input [5]: [s_store_sk#28, s_store_name#29, s_market_id#30, s_state#31, s_zip#32]

(93) Filter [codegen id : 17]
Input [5]: [s_store_sk#28, s_store_name#29, s_market_id#30, s_state#31, s_zip#32]
Condition : (((isnotnull(s_market_id#30) AND (s_market_id#30 = 8)) AND isnotnull(s_store_sk#28)) AND isnotnull(s_zip#32))

(94) Project [codegen id : 17]
Output [4]: [s_store_sk#28, s_store_name#29, s_state#31, s_zip#32]
Input [5]: [s_store_sk#28, s_store_name#29, s_market_id#30, s_state#31, s_zip#32]

(95) BroadcastExchange
Input [4]: [s_store_sk#28, s_store_name#29, s_state#31, s_zip#32]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[3, string, true]),false), [id=#57]

(96) BroadcastHashJoin [codegen id : 18]
Left keys [2]: [ss_store_sk#3, ca_zip#18]
Right keys [2]: [s_store_sk#28, s_zip#32]
Join condition: None

(97) Project [codegen id : 18]
Output [11]: [ss_net_paid#5, s_store_name#29, s_state#31, i_current_price#22, i_size#23, i_color#24, i_units#25, i_manager_id#26, c_first_name#12, c_last_name#13, ca_state#17]
Input [15]: [ss_store_sk#3, ss_net_paid#5, c_first_name#12, c_last_name#13, ca_state#17, ca_zip#18, i_current_price#22, i_size#23, i_color#24, i_units#25, i_manager_id#26, s_store_sk#28, s_store_name#29, s_state#31, s_zip#32]

(98) HashAggregate [codegen id : 18]
Input [11]: [ss_net_paid#5, s_store_name#29, s_state#31, i_current_price#22, i_size#23, i_color#24, i_units#25, i_manager_id#26, c_first_name#12, c_last_name#13, ca_state#17]
Keys [10]: [c_last_name#13, c_first_name#12, s_store_name#29, ca_state#17, s_state#31, i_color#24, i_current_price#22, i_manager_id#26, i_units#25, i_size#23]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum#58]
Results [11]: [c_last_name#13, c_first_name#12, s_store_name#29, ca_state#17, s_state#31, i_color#24, i_current_price#22, i_manager_id#26, i_units#25, i_size#23, sum#59]

(99) Exchange
Input [11]: [c_last_name#13, c_first_name#12, s_store_name#29, ca_state#17, s_state#31, i_color#24, i_current_price#22, i_manager_id#26, i_units#25, i_size#23, sum#59]
Arguments: hashpartitioning(c_last_name#13, c_first_name#12, s_store_name#29, ca_state#17, s_state#31, i_color#24, i_current_price#22, i_manager_id#26, i_units#25, i_size#23, 5), ENSURE_REQUIREMENTS, [id=#60]

(100) HashAggregate [codegen id : 19]
Input [11]: [c_last_name#13, c_first_name#12, s_store_name#29, ca_state#17, s_state#31, i_color#24, i_current_price#22, i_manager_id#26, i_units#25, i_size#23, sum#59]
Keys [10]: [c_last_name#13, c_first_name#12, s_store_name#29, ca_state#17, s_state#31, i_color#24, i_current_price#22, i_manager_id#26, i_units#25, i_size#23]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#5))#61]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_paid#5))#61,17,2) AS netpaid#38]

(101) HashAggregate [codegen id : 19]
Input [1]: [netpaid#38]
Keys: []
Functions [1]: [partial_avg(netpaid#38)]
Aggregate Attributes [2]: [sum#62, count#63]
Results [2]: [sum#64, count#65]

(102) Exchange
Input [2]: [sum#64, count#65]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#66]

(103) HashAggregate [codegen id : 20]
Input [2]: [sum#64, count#65]
Keys: []
Functions [1]: [avg(netpaid#38)]
Aggregate Attributes [1]: [avg(netpaid#38)#67]
Results [1]: [CheckOverflow((0.050000 * promote_precision(avg(netpaid#38)#67)), DecimalType(24,8), true) AS (CAST(0.05 AS DECIMAL(21,6)) * CAST(avg(netpaid) AS DECIMAL(21,6)))#68]


