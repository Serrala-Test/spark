== Physical Plan ==
TakeOrderedAndProject (129)
+- Union (128)
   :- * HashAggregate (70)
   :  +- Exchange (69)
   :     +- * HashAggregate (68)
   :        +- * Project (67)
   :           +- * SortMergeJoin Inner (66)
   :              :- * Project (45)
   :              :  +- * BroadcastHashJoin Inner BuildRight (44)
   :              :     :- * SortMergeJoin LeftSemi (42)
   :              :     :  :- * Sort (26)
   :              :     :  :  +- Exchange (25)
   :              :     :  :     +- * Project (24)
   :              :     :  :        +- * SortMergeJoin LeftSemi (23)
   :              :     :  :           :- * Sort (5)
   :              :     :  :           :  +- Exchange (4)
   :              :     :  :           :     +- * Filter (3)
   :              :     :  :           :        +- * ColumnarToRow (2)
   :              :     :  :           :           +- Scan parquet spark_catalog.default.catalog_sales (1)
   :              :     :  :           +- * Sort (22)
   :              :     :  :              +- * Project (21)
   :              :     :  :                 +- * Filter (20)
   :              :     :  :                    +- * HashAggregate (19)
   :              :     :  :                       +- * HashAggregate (18)
   :              :     :  :                          +- * Project (17)
   :              :     :  :                             +- * SortMergeJoin Inner (16)
   :              :     :  :                                :- * Sort (13)
   :              :     :  :                                :  +- Exchange (12)
   :              :     :  :                                :     +- * Project (11)
   :              :     :  :                                :        +- * BroadcastHashJoin Inner BuildRight (10)
   :              :     :  :                                :           :- * Filter (8)
   :              :     :  :                                :           :  +- * ColumnarToRow (7)
   :              :     :  :                                :           :     +- Scan parquet spark_catalog.default.store_sales (6)
   :              :     :  :                                :           +- ReusedExchange (9)
   :              :     :  :                                +- * Sort (15)
   :              :     :  :                                   +- ReusedExchange (14)
   :              :     :  +- * Sort (41)
   :              :     :     +- * Project (40)
   :              :     :        +- * Filter (39)
   :              :     :           +- * HashAggregate (38)
   :              :     :              +- * HashAggregate (37)
   :              :     :                 +- * Project (36)
   :              :     :                    +- * SortMergeJoin Inner (35)
   :              :     :                       :- * Sort (32)
   :              :     :                       :  +- Exchange (31)
   :              :     :                       :     +- * Project (30)
   :              :     :                       :        +- * Filter (29)
   :              :     :                       :           +- * ColumnarToRow (28)
   :              :     :                       :              +- Scan parquet spark_catalog.default.store_sales (27)
   :              :     :                       +- * Sort (34)
   :              :     :                          +- ReusedExchange (33)
   :              :     +- ReusedExchange (43)
   :              +- * SortMergeJoin LeftSemi (65)
   :                 :- * Sort (50)
   :                 :  +- Exchange (49)
   :                 :     +- * Filter (48)
   :                 :        +- * ColumnarToRow (47)
   :                 :           +- Scan parquet spark_catalog.default.customer (46)
   :                 +- * Sort (64)
   :                    +- * Project (63)
   :                       +- * Filter (62)
   :                          +- * HashAggregate (61)
   :                             +- * HashAggregate (60)
   :                                +- * Project (59)
   :                                   +- * SortMergeJoin Inner (58)
   :                                      :- * Sort (52)
   :                                      :  +- ReusedExchange (51)
   :                                      +- * Sort (57)
   :                                         +- Exchange (56)
   :                                            +- * Filter (55)
   :                                               +- * ColumnarToRow (54)
   :                                                  +- Scan parquet spark_catalog.default.customer (53)
   +- * HashAggregate (127)
      +- Exchange (126)
         +- * HashAggregate (125)
            +- * Project (124)
               +- * SortMergeJoin Inner (123)
                  :- * Project (105)
                  :  +- * BroadcastHashJoin Inner BuildRight (104)
                  :     :- * SortMergeJoin LeftSemi (102)
                  :     :  :- * Sort (90)
                  :     :  :  +- Exchange (89)
                  :     :  :     +- * Project (88)
                  :     :  :        +- * SortMergeJoin LeftSemi (87)
                  :     :  :           :- * Sort (75)
                  :     :  :           :  +- Exchange (74)
                  :     :  :           :     +- * Filter (73)
                  :     :  :           :        +- * ColumnarToRow (72)
                  :     :  :           :           +- Scan parquet spark_catalog.default.web_sales (71)
                  :     :  :           +- * Sort (86)
                  :     :  :              +- * Project (85)
                  :     :  :                 +- * Filter (84)
                  :     :  :                    +- * HashAggregate (83)
                  :     :  :                       +- * HashAggregate (82)
                  :     :  :                          +- * Project (81)
                  :     :  :                             +- * SortMergeJoin Inner (80)
                  :     :  :                                :- * Sort (77)
                  :     :  :                                :  +- ReusedExchange (76)
                  :     :  :                                +- * Sort (79)
                  :     :  :                                   +- ReusedExchange (78)
                  :     :  +- * Sort (101)
                  :     :     +- * Project (100)
                  :     :        +- * Filter (99)
                  :     :           +- * HashAggregate (98)
                  :     :              +- * HashAggregate (97)
                  :     :                 +- * Project (96)
                  :     :                    +- * SortMergeJoin Inner (95)
                  :     :                       :- * Sort (92)
                  :     :                       :  +- ReusedExchange (91)
                  :     :                       +- * Sort (94)
                  :     :                          +- ReusedExchange (93)
                  :     +- ReusedExchange (103)
                  +- * SortMergeJoin LeftSemi (122)
                     :- * Sort (107)
                     :  +- ReusedExchange (106)
                     +- * Sort (121)
                        +- * Project (120)
                           +- * Filter (119)
                              +- * HashAggregate (118)
                                 +- * HashAggregate (117)
                                    +- * Project (116)
                                       +- * SortMergeJoin Inner (115)
                                          :- * Sort (109)
                                          :  +- ReusedExchange (108)
                                          +- * Sort (114)
                                             +- Exchange (113)
                                                +- * Filter (112)
                                                   +- * ColumnarToRow (111)
                                                      +- Scan parquet spark_catalog.default.customer (110)


(1) Scan parquet spark_catalog.default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(3) Filter [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Condition : ((isnotnull(cs_bill_customer_sk#1) AND true) AND true)

(4) Exchange
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_item_sk#2, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_item_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]

(8) Filter [codegen id : 4]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Condition : (isnotnull(ss_item_sk#7) AND might_contain(Subquery scalar-subquery#10, [id=#11], xxhash64(ss_item_sk#7, 42), false))

(9) ReusedExchange [Reuses operator id: 146]
Output [2]: [d_date_sk#12, d_date#13]

(10) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#12]
Join type: Inner
Join condition: None

(11) Project [codegen id : 4]
Output [2]: [ss_item_sk#7, d_date#13]
Input [4]: [ss_item_sk#7, ss_sold_date_sk#8, d_date_sk#12, d_date#13]

(12) Exchange
Input [2]: [ss_item_sk#7, d_date#13]
Arguments: hashpartitioning(ss_item_sk#7, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(13) Sort [codegen id : 5]
Input [2]: [ss_item_sk#7, d_date#13]
Arguments: [ss_item_sk#7 ASC NULLS FIRST], false, 0

(14) ReusedExchange [Reuses operator id: 138]
Output [2]: [i_item_sk#14, i_item_desc#15]

(15) Sort [codegen id : 7]
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: [i_item_sk#14 ASC NULLS FIRST], false, 0

(16) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#7]
Right keys [1]: [i_item_sk#14]
Join type: Inner
Join condition: None

(17) Project [codegen id : 8]
Output [3]: [d_date#13, i_item_sk#14, substr(i_item_desc#15, 1, 30) AS _groupingexpression#16]
Input [4]: [ss_item_sk#7, d_date#13, i_item_sk#14, i_item_desc#15]

(18) HashAggregate [codegen id : 8]
Input [3]: [d_date#13, i_item_sk#14, _groupingexpression#16]
Keys [3]: [_groupingexpression#16, i_item_sk#14, d_date#13]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#17]
Results [4]: [_groupingexpression#16, i_item_sk#14, d_date#13, count#18]

(19) HashAggregate [codegen id : 8]
Input [4]: [_groupingexpression#16, i_item_sk#14, d_date#13, count#18]
Keys [3]: [_groupingexpression#16, i_item_sk#14, d_date#13]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#19]
Results [2]: [i_item_sk#14 AS item_sk#20, count(1)#19 AS cnt#21]

(20) Filter [codegen id : 8]
Input [2]: [item_sk#20, cnt#21]
Condition : (cnt#21 > 4)

(21) Project [codegen id : 8]
Output [1]: [item_sk#20]
Input [2]: [item_sk#20, cnt#21]

(22) Sort [codegen id : 8]
Input [1]: [item_sk#20]
Arguments: [item_sk#20 ASC NULLS FIRST], false, 0

(23) SortMergeJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#20]
Join type: LeftSemi
Join condition: None

(24) Project [codegen id : 9]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(25) Exchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(26) Sort [codegen id : 10]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(27) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24, ss_sold_date_sk#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(28) ColumnarToRow [codegen id : 11]
Input [4]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24, ss_sold_date_sk#25]

(29) Filter [codegen id : 11]
Input [4]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24, ss_sold_date_sk#25]
Condition : (isnotnull(ss_customer_sk#22) AND might_contain(Subquery scalar-subquery#26, [id=#27], xxhash64(ss_customer_sk#22, 42), false))

(30) Project [codegen id : 11]
Output [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Input [4]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24, ss_sold_date_sk#25]

(31) Exchange
Input [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Arguments: hashpartitioning(ss_customer_sk#22, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(32) Sort [codegen id : 12]
Input [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Arguments: [ss_customer_sk#22 ASC NULLS FIRST], false, 0

(33) ReusedExchange [Reuses operator id: 179]
Output [1]: [c_customer_sk#28]

(34) Sort [codegen id : 14]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(35) SortMergeJoin [codegen id : 15]
Left keys [1]: [ss_customer_sk#22]
Right keys [1]: [c_customer_sk#28]
Join type: Inner
Join condition: None

(36) Project [codegen id : 15]
Output [3]: [ss_quantity#23, ss_sales_price#24, c_customer_sk#28]
Input [4]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24, c_customer_sk#28]

(37) HashAggregate [codegen id : 15]
Input [3]: [ss_quantity#23, ss_sales_price#24, c_customer_sk#28]
Keys [1]: [c_customer_sk#28]
Functions [1]: [partial_sum((cast(ss_quantity#23 as decimal(10,0)) * ss_sales_price#24))]
Aggregate Attributes [2]: [sum#29, isEmpty#30]
Results [3]: [c_customer_sk#28, sum#31, isEmpty#32]

(38) HashAggregate [codegen id : 15]
Input [3]: [c_customer_sk#28, sum#31, isEmpty#32]
Keys [1]: [c_customer_sk#28]
Functions [1]: [sum((cast(ss_quantity#23 as decimal(10,0)) * ss_sales_price#24))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#23 as decimal(10,0)) * ss_sales_price#24))#33]
Results [2]: [c_customer_sk#28, sum((cast(ss_quantity#23 as decimal(10,0)) * ss_sales_price#24))#33 AS ssales#34]

(39) Filter [codegen id : 15]
Input [2]: [c_customer_sk#28, ssales#34]
Condition : (isnotnull(ssales#34) AND (cast(ssales#34 as decimal(38,8)) > (0.500000 * Subquery scalar-subquery#35, [id=#36])))

(40) Project [codegen id : 15]
Output [1]: [c_customer_sk#28]
Input [2]: [c_customer_sk#28, ssales#34]

(41) Sort [codegen id : 15]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(42) SortMergeJoin [codegen id : 17]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#28]
Join type: LeftSemi
Join condition: None

(43) ReusedExchange [Reuses operator id: 134]
Output [1]: [d_date_sk#37]

(44) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#37]
Join type: Inner
Join condition: None

(45) Project [codegen id : 17]
Output [3]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4]
Input [5]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, d_date_sk#37]

(46) Scan parquet spark_catalog.default.customer
Output [3]: [c_customer_sk#38, c_first_name#39, c_last_name#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(47) ColumnarToRow [codegen id : 18]
Input [3]: [c_customer_sk#38, c_first_name#39, c_last_name#40]

(48) Filter [codegen id : 18]
Input [3]: [c_customer_sk#38, c_first_name#39, c_last_name#40]
Condition : isnotnull(c_customer_sk#38)

(49) Exchange
Input [3]: [c_customer_sk#38, c_first_name#39, c_last_name#40]
Arguments: hashpartitioning(c_customer_sk#38, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(50) Sort [codegen id : 19]
Input [3]: [c_customer_sk#38, c_first_name#39, c_last_name#40]
Arguments: [c_customer_sk#38 ASC NULLS FIRST], false, 0

(51) ReusedExchange [Reuses operator id: 31]
Output [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]

(52) Sort [codegen id : 21]
Input [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Arguments: [ss_customer_sk#22 ASC NULLS FIRST], false, 0

(53) Scan parquet spark_catalog.default.customer
Output [1]: [c_customer_sk#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(54) ColumnarToRow [codegen id : 22]
Input [1]: [c_customer_sk#28]

(55) Filter [codegen id : 22]
Input [1]: [c_customer_sk#28]
Condition : (isnotnull(c_customer_sk#28) AND might_contain(Subquery scalar-subquery#41, [id=#42], xxhash64(c_customer_sk#28, 42), false))

(56) Exchange
Input [1]: [c_customer_sk#28]
Arguments: hashpartitioning(c_customer_sk#28, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(57) Sort [codegen id : 23]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(58) SortMergeJoin [codegen id : 24]
Left keys [1]: [ss_customer_sk#22]
Right keys [1]: [c_customer_sk#28]
Join type: Inner
Join condition: None

(59) Project [codegen id : 24]
Output [3]: [ss_quantity#23, ss_sales_price#24, c_customer_sk#28]
Input [4]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24, c_customer_sk#28]

(60) HashAggregate [codegen id : 24]
Input [3]: [ss_quantity#23, ss_sales_price#24, c_customer_sk#28]
Keys [1]: [c_customer_sk#28]
Functions [1]: [partial_sum((cast(ss_quantity#23 as decimal(10,0)) * ss_sales_price#24))]
Aggregate Attributes [2]: [sum#29, isEmpty#30]
Results [3]: [c_customer_sk#28, sum#31, isEmpty#32]

(61) HashAggregate [codegen id : 24]
Input [3]: [c_customer_sk#28, sum#31, isEmpty#32]
Keys [1]: [c_customer_sk#28]
Functions [1]: [sum((cast(ss_quantity#23 as decimal(10,0)) * ss_sales_price#24))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#23 as decimal(10,0)) * ss_sales_price#24))#33]
Results [2]: [c_customer_sk#28, sum((cast(ss_quantity#23 as decimal(10,0)) * ss_sales_price#24))#33 AS ssales#34]

(62) Filter [codegen id : 24]
Input [2]: [c_customer_sk#28, ssales#34]
Condition : (isnotnull(ssales#34) AND (cast(ssales#34 as decimal(38,8)) > (0.500000 * ReusedSubquery Subquery scalar-subquery#35, [id=#36])))

(63) Project [codegen id : 24]
Output [1]: [c_customer_sk#28]
Input [2]: [c_customer_sk#28, ssales#34]

(64) Sort [codegen id : 24]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(65) SortMergeJoin [codegen id : 25]
Left keys [1]: [c_customer_sk#38]
Right keys [1]: [c_customer_sk#28]
Join type: LeftSemi
Join condition: None

(66) SortMergeJoin [codegen id : 26]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#38]
Join type: Inner
Join condition: None

(67) Project [codegen id : 26]
Output [4]: [cs_quantity#3, cs_list_price#4, c_first_name#39, c_last_name#40]
Input [6]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, c_customer_sk#38, c_first_name#39, c_last_name#40]

(68) HashAggregate [codegen id : 26]
Input [4]: [cs_quantity#3, cs_list_price#4, c_first_name#39, c_last_name#40]
Keys [2]: [c_last_name#40, c_first_name#39]
Functions [1]: [partial_sum((cast(cs_quantity#3 as decimal(10,0)) * cs_list_price#4))]
Aggregate Attributes [2]: [sum#43, isEmpty#44]
Results [4]: [c_last_name#40, c_first_name#39, sum#45, isEmpty#46]

(69) Exchange
Input [4]: [c_last_name#40, c_first_name#39, sum#45, isEmpty#46]
Arguments: hashpartitioning(c_last_name#40, c_first_name#39, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(70) HashAggregate [codegen id : 27]
Input [4]: [c_last_name#40, c_first_name#39, sum#45, isEmpty#46]
Keys [2]: [c_last_name#40, c_first_name#39]
Functions [1]: [sum((cast(cs_quantity#3 as decimal(10,0)) * cs_list_price#4))]
Aggregate Attributes [1]: [sum((cast(cs_quantity#3 as decimal(10,0)) * cs_list_price#4))#47]
Results [3]: [c_last_name#40, c_first_name#39, sum((cast(cs_quantity#3 as decimal(10,0)) * cs_list_price#4))#47 AS sales#48]

(71) Scan parquet spark_catalog.default.web_sales
Output [5]: [ws_item_sk#49, ws_bill_customer_sk#50, ws_quantity#51, ws_list_price#52, ws_sold_date_sk#53]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#53), dynamicpruningexpression(ws_sold_date_sk#53 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(72) ColumnarToRow [codegen id : 28]
Input [5]: [ws_item_sk#49, ws_bill_customer_sk#50, ws_quantity#51, ws_list_price#52, ws_sold_date_sk#53]

(73) Filter [codegen id : 28]
Input [5]: [ws_item_sk#49, ws_bill_customer_sk#50, ws_quantity#51, ws_list_price#52, ws_sold_date_sk#53]
Condition : ((isnotnull(ws_bill_customer_sk#50) AND true) AND true)

(74) Exchange
Input [5]: [ws_item_sk#49, ws_bill_customer_sk#50, ws_quantity#51, ws_list_price#52, ws_sold_date_sk#53]
Arguments: hashpartitioning(ws_item_sk#49, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(75) Sort [codegen id : 29]
Input [5]: [ws_item_sk#49, ws_bill_customer_sk#50, ws_quantity#51, ws_list_price#52, ws_sold_date_sk#53]
Arguments: [ws_item_sk#49 ASC NULLS FIRST], false, 0

(76) ReusedExchange [Reuses operator id: 12]
Output [2]: [ss_item_sk#7, d_date#13]

(77) Sort [codegen id : 32]
Input [2]: [ss_item_sk#7, d_date#13]
Arguments: [ss_item_sk#7 ASC NULLS FIRST], false, 0

(78) ReusedExchange [Reuses operator id: 138]
Output [2]: [i_item_sk#14, i_item_desc#15]

(79) Sort [codegen id : 34]
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: [i_item_sk#14 ASC NULLS FIRST], false, 0

(80) SortMergeJoin [codegen id : 35]
Left keys [1]: [ss_item_sk#7]
Right keys [1]: [i_item_sk#14]
Join type: Inner
Join condition: None

(81) Project [codegen id : 35]
Output [3]: [d_date#13, i_item_sk#14, substr(i_item_desc#15, 1, 30) AS _groupingexpression#16]
Input [4]: [ss_item_sk#7, d_date#13, i_item_sk#14, i_item_desc#15]

(82) HashAggregate [codegen id : 35]
Input [3]: [d_date#13, i_item_sk#14, _groupingexpression#16]
Keys [3]: [_groupingexpression#16, i_item_sk#14, d_date#13]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#17]
Results [4]: [_groupingexpression#16, i_item_sk#14, d_date#13, count#18]

(83) HashAggregate [codegen id : 35]
Input [4]: [_groupingexpression#16, i_item_sk#14, d_date#13, count#18]
Keys [3]: [_groupingexpression#16, i_item_sk#14, d_date#13]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#19]
Results [2]: [i_item_sk#14 AS item_sk#20, count(1)#19 AS cnt#21]

(84) Filter [codegen id : 35]
Input [2]: [item_sk#20, cnt#21]
Condition : (cnt#21 > 4)

(85) Project [codegen id : 35]
Output [1]: [item_sk#20]
Input [2]: [item_sk#20, cnt#21]

(86) Sort [codegen id : 35]
Input [1]: [item_sk#20]
Arguments: [item_sk#20 ASC NULLS FIRST], false, 0

(87) SortMergeJoin [codegen id : 36]
Left keys [1]: [ws_item_sk#49]
Right keys [1]: [item_sk#20]
Join type: LeftSemi
Join condition: None

(88) Project [codegen id : 36]
Output [4]: [ws_bill_customer_sk#50, ws_quantity#51, ws_list_price#52, ws_sold_date_sk#53]
Input [5]: [ws_item_sk#49, ws_bill_customer_sk#50, ws_quantity#51, ws_list_price#52, ws_sold_date_sk#53]

(89) Exchange
Input [4]: [ws_bill_customer_sk#50, ws_quantity#51, ws_list_price#52, ws_sold_date_sk#53]
Arguments: hashpartitioning(ws_bill_customer_sk#50, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(90) Sort [codegen id : 37]
Input [4]: [ws_bill_customer_sk#50, ws_quantity#51, ws_list_price#52, ws_sold_date_sk#53]
Arguments: [ws_bill_customer_sk#50 ASC NULLS FIRST], false, 0

(91) ReusedExchange [Reuses operator id: 31]
Output [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]

(92) Sort [codegen id : 39]
Input [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Arguments: [ss_customer_sk#22 ASC NULLS FIRST], false, 0

(93) ReusedExchange [Reuses operator id: 179]
Output [1]: [c_customer_sk#28]

(94) Sort [codegen id : 41]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(95) SortMergeJoin [codegen id : 42]
Left keys [1]: [ss_customer_sk#22]
Right keys [1]: [c_customer_sk#28]
Join type: Inner
Join condition: None

(96) Project [codegen id : 42]
Output [3]: [ss_quantity#23, ss_sales_price#24, c_customer_sk#28]
Input [4]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24, c_customer_sk#28]

(97) HashAggregate [codegen id : 42]
Input [3]: [ss_quantity#23, ss_sales_price#24, c_customer_sk#28]
Keys [1]: [c_customer_sk#28]
Functions [1]: [partial_sum((cast(ss_quantity#23 as decimal(10,0)) * ss_sales_price#24))]
Aggregate Attributes [2]: [sum#29, isEmpty#30]
Results [3]: [c_customer_sk#28, sum#31, isEmpty#32]

(98) HashAggregate [codegen id : 42]
Input [3]: [c_customer_sk#28, sum#31, isEmpty#32]
Keys [1]: [c_customer_sk#28]
Functions [1]: [sum((cast(ss_quantity#23 as decimal(10,0)) * ss_sales_price#24))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#23 as decimal(10,0)) * ss_sales_price#24))#33]
Results [2]: [c_customer_sk#28, sum((cast(ss_quantity#23 as decimal(10,0)) * ss_sales_price#24))#33 AS ssales#34]

(99) Filter [codegen id : 42]
Input [2]: [c_customer_sk#28, ssales#34]
Condition : (isnotnull(ssales#34) AND (cast(ssales#34 as decimal(38,8)) > (0.500000 * ReusedSubquery Subquery scalar-subquery#35, [id=#36])))

(100) Project [codegen id : 42]
Output [1]: [c_customer_sk#28]
Input [2]: [c_customer_sk#28, ssales#34]

(101) Sort [codegen id : 42]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(102) SortMergeJoin [codegen id : 44]
Left keys [1]: [ws_bill_customer_sk#50]
Right keys [1]: [c_customer_sk#28]
Join type: LeftSemi
Join condition: None

(103) ReusedExchange [Reuses operator id: 134]
Output [1]: [d_date_sk#54]

(104) BroadcastHashJoin [codegen id : 44]
Left keys [1]: [ws_sold_date_sk#53]
Right keys [1]: [d_date_sk#54]
Join type: Inner
Join condition: None

(105) Project [codegen id : 44]
Output [3]: [ws_bill_customer_sk#50, ws_quantity#51, ws_list_price#52]
Input [5]: [ws_bill_customer_sk#50, ws_quantity#51, ws_list_price#52, ws_sold_date_sk#53, d_date_sk#54]

(106) ReusedExchange [Reuses operator id: 49]
Output [3]: [c_customer_sk#55, c_first_name#56, c_last_name#57]

(107) Sort [codegen id : 46]
Input [3]: [c_customer_sk#55, c_first_name#56, c_last_name#57]
Arguments: [c_customer_sk#55 ASC NULLS FIRST], false, 0

(108) ReusedExchange [Reuses operator id: 31]
Output [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]

(109) Sort [codegen id : 48]
Input [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Arguments: [ss_customer_sk#22 ASC NULLS FIRST], false, 0

(110) Scan parquet spark_catalog.default.customer
Output [1]: [c_customer_sk#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(111) ColumnarToRow [codegen id : 49]
Input [1]: [c_customer_sk#28]

(112) Filter [codegen id : 49]
Input [1]: [c_customer_sk#28]
Condition : (isnotnull(c_customer_sk#28) AND might_contain(Subquery scalar-subquery#58, [id=#59], xxhash64(c_customer_sk#28, 42), false))

(113) Exchange
Input [1]: [c_customer_sk#28]
Arguments: hashpartitioning(c_customer_sk#28, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(114) Sort [codegen id : 50]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(115) SortMergeJoin [codegen id : 51]
Left keys [1]: [ss_customer_sk#22]
Right keys [1]: [c_customer_sk#28]
Join type: Inner
Join condition: None

(116) Project [codegen id : 51]
Output [3]: [ss_quantity#23, ss_sales_price#24, c_customer_sk#28]
Input [4]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24, c_customer_sk#28]

(117) HashAggregate [codegen id : 51]
Input [3]: [ss_quantity#23, ss_sales_price#24, c_customer_sk#28]
Keys [1]: [c_customer_sk#28]
Functions [1]: [partial_sum((cast(ss_quantity#23 as decimal(10,0)) * ss_sales_price#24))]
Aggregate Attributes [2]: [sum#29, isEmpty#30]
Results [3]: [c_customer_sk#28, sum#31, isEmpty#32]

(118) HashAggregate [codegen id : 51]
Input [3]: [c_customer_sk#28, sum#31, isEmpty#32]
Keys [1]: [c_customer_sk#28]
Functions [1]: [sum((cast(ss_quantity#23 as decimal(10,0)) * ss_sales_price#24))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#23 as decimal(10,0)) * ss_sales_price#24))#33]
Results [2]: [c_customer_sk#28, sum((cast(ss_quantity#23 as decimal(10,0)) * ss_sales_price#24))#33 AS ssales#34]

(119) Filter [codegen id : 51]
Input [2]: [c_customer_sk#28, ssales#34]
Condition : (isnotnull(ssales#34) AND (cast(ssales#34 as decimal(38,8)) > (0.500000 * ReusedSubquery Subquery scalar-subquery#35, [id=#36])))

(120) Project [codegen id : 51]
Output [1]: [c_customer_sk#28]
Input [2]: [c_customer_sk#28, ssales#34]

(121) Sort [codegen id : 51]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(122) SortMergeJoin [codegen id : 52]
Left keys [1]: [c_customer_sk#55]
Right keys [1]: [c_customer_sk#28]
Join type: LeftSemi
Join condition: None

(123) SortMergeJoin [codegen id : 53]
Left keys [1]: [ws_bill_customer_sk#50]
Right keys [1]: [c_customer_sk#55]
Join type: Inner
Join condition: None

(124) Project [codegen id : 53]
Output [4]: [ws_quantity#51, ws_list_price#52, c_first_name#56, c_last_name#57]
Input [6]: [ws_bill_customer_sk#50, ws_quantity#51, ws_list_price#52, c_customer_sk#55, c_first_name#56, c_last_name#57]

(125) HashAggregate [codegen id : 53]
Input [4]: [ws_quantity#51, ws_list_price#52, c_first_name#56, c_last_name#57]
Keys [2]: [c_last_name#57, c_first_name#56]
Functions [1]: [partial_sum((cast(ws_quantity#51 as decimal(10,0)) * ws_list_price#52))]
Aggregate Attributes [2]: [sum#60, isEmpty#61]
Results [4]: [c_last_name#57, c_first_name#56, sum#62, isEmpty#63]

(126) Exchange
Input [4]: [c_last_name#57, c_first_name#56, sum#62, isEmpty#63]
Arguments: hashpartitioning(c_last_name#57, c_first_name#56, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(127) HashAggregate [codegen id : 54]
Input [4]: [c_last_name#57, c_first_name#56, sum#62, isEmpty#63]
Keys [2]: [c_last_name#57, c_first_name#56]
Functions [1]: [sum((cast(ws_quantity#51 as decimal(10,0)) * ws_list_price#52))]
Aggregate Attributes [1]: [sum((cast(ws_quantity#51 as decimal(10,0)) * ws_list_price#52))#64]
Results [3]: [c_last_name#57, c_first_name#56, sum((cast(ws_quantity#51 as decimal(10,0)) * ws_list_price#52))#64 AS sales#65]

(128) Union

(129) TakeOrderedAndProject
Input [3]: [c_last_name#40, c_first_name#39, sales#48]
Arguments: 100, [c_last_name#40 ASC NULLS FIRST, c_first_name#39 ASC NULLS FIRST, sales#48 ASC NULLS FIRST], [c_last_name#40, c_first_name#39, sales#48]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (134)
+- * Project (133)
   +- * Filter (132)
      +- * ColumnarToRow (131)
         +- Scan parquet spark_catalog.default.date_dim (130)


(130) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#37, d_year#66, d_moy#67]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(131) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#37, d_year#66, d_moy#67]

(132) Filter [codegen id : 1]
Input [3]: [d_date_sk#37, d_year#66, d_moy#67]
Condition : ((((isnotnull(d_year#66) AND isnotnull(d_moy#67)) AND (d_year#66 = 2000)) AND (d_moy#67 = 2)) AND isnotnull(d_date_sk#37))

(133) Project [codegen id : 1]
Output [1]: [d_date_sk#37]
Input [3]: [d_date_sk#37, d_year#66, d_moy#67]

(134) BroadcastExchange
Input [1]: [d_date_sk#37]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=12]

Subquery:2 Hosting operator id = 8 Hosting Expression = Subquery scalar-subquery#10, [id=#11]
ObjectHashAggregate (141)
+- Exchange (140)
   +- ObjectHashAggregate (139)
      +- Exchange (138)
         +- * Filter (137)
            +- * ColumnarToRow (136)
               +- Scan parquet spark_catalog.default.item (135)


(135) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#14, i_item_desc#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(136) ColumnarToRow [codegen id : 1]
Input [2]: [i_item_sk#14, i_item_desc#15]

(137) Filter [codegen id : 1]
Input [2]: [i_item_sk#14, i_item_desc#15]
Condition : isnotnull(i_item_sk#14)

(138) Exchange
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: hashpartitioning(i_item_sk#14, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(139) ObjectHashAggregate
Input [2]: [i_item_sk#14, i_item_desc#15]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(i_item_sk#14, 42), 204000, 1632000, 0, 0)]
Aggregate Attributes [1]: [buf#68]
Results [1]: [buf#69]

(140) Exchange
Input [1]: [buf#69]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=14]

(141) ObjectHashAggregate
Input [1]: [buf#69]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(i_item_sk#14, 42), 204000, 1632000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(i_item_sk#14, 42), 204000, 1632000, 0, 0)#70]
Results [1]: [bloom_filter_agg(xxhash64(i_item_sk#14, 42), 204000, 1632000, 0, 0)#70 AS bloomFilter#71]

Subquery:3 Hosting operator id = 6 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (146)
+- * Project (145)
   +- * Filter (144)
      +- * ColumnarToRow (143)
         +- Scan parquet spark_catalog.default.date_dim (142)


(142) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#12, d_date#13, d_year#72]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(143) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#12, d_date#13, d_year#72]

(144) Filter [codegen id : 1]
Input [3]: [d_date_sk#12, d_date#13, d_year#72]
Condition : (d_year#72 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#12))

(145) Project [codegen id : 1]
Output [2]: [d_date_sk#12, d_date#13]
Input [3]: [d_date_sk#12, d_date#13, d_year#72]

(146) BroadcastExchange
Input [2]: [d_date_sk#12, d_date#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=15]

Subquery:4 Hosting operator id = 39 Hosting Expression = Subquery scalar-subquery#35, [id=#36]
* HashAggregate (163)
+- Exchange (162)
   +- * HashAggregate (161)
      +- * HashAggregate (160)
         +- * HashAggregate (159)
            +- * Project (158)
               +- * SortMergeJoin Inner (157)
                  :- * Sort (154)
                  :  +- Exchange (153)
                  :     +- * Project (152)
                  :        +- * BroadcastHashJoin Inner BuildRight (151)
                  :           :- * Filter (149)
                  :           :  +- * ColumnarToRow (148)
                  :           :     +- Scan parquet spark_catalog.default.store_sales (147)
                  :           +- ReusedExchange (150)
                  +- * Sort (156)
                     +- ReusedExchange (155)


(147) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_customer_sk#73, ss_quantity#74, ss_sales_price#75, ss_sold_date_sk#76]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#76), dynamicpruningexpression(ss_sold_date_sk#76 IN dynamicpruning#77)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(148) ColumnarToRow [codegen id : 2]
Input [4]: [ss_customer_sk#73, ss_quantity#74, ss_sales_price#75, ss_sold_date_sk#76]

(149) Filter [codegen id : 2]
Input [4]: [ss_customer_sk#73, ss_quantity#74, ss_sales_price#75, ss_sold_date_sk#76]
Condition : (isnotnull(ss_customer_sk#73) AND might_contain(Subquery scalar-subquery#78, [id=#79], xxhash64(ss_customer_sk#73, 42), false))

(150) ReusedExchange [Reuses operator id: 175]
Output [1]: [d_date_sk#80]

(151) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#76]
Right keys [1]: [d_date_sk#80]
Join type: Inner
Join condition: None

(152) Project [codegen id : 2]
Output [3]: [ss_customer_sk#73, ss_quantity#74, ss_sales_price#75]
Input [5]: [ss_customer_sk#73, ss_quantity#74, ss_sales_price#75, ss_sold_date_sk#76, d_date_sk#80]

(153) Exchange
Input [3]: [ss_customer_sk#73, ss_quantity#74, ss_sales_price#75]
Arguments: hashpartitioning(ss_customer_sk#73, 5), ENSURE_REQUIREMENTS, [plan_id=16]

(154) Sort [codegen id : 3]
Input [3]: [ss_customer_sk#73, ss_quantity#74, ss_sales_price#75]
Arguments: [ss_customer_sk#73 ASC NULLS FIRST], false, 0

(155) ReusedExchange [Reuses operator id: 179]
Output [1]: [c_customer_sk#81]

(156) Sort [codegen id : 5]
Input [1]: [c_customer_sk#81]
Arguments: [c_customer_sk#81 ASC NULLS FIRST], false, 0

(157) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#73]
Right keys [1]: [c_customer_sk#81]
Join type: Inner
Join condition: None

(158) Project [codegen id : 6]
Output [3]: [ss_quantity#74, ss_sales_price#75, c_customer_sk#81]
Input [4]: [ss_customer_sk#73, ss_quantity#74, ss_sales_price#75, c_customer_sk#81]

(159) HashAggregate [codegen id : 6]
Input [3]: [ss_quantity#74, ss_sales_price#75, c_customer_sk#81]
Keys [1]: [c_customer_sk#81]
Functions [1]: [partial_sum((cast(ss_quantity#74 as decimal(10,0)) * ss_sales_price#75))]
Aggregate Attributes [2]: [sum#82, isEmpty#83]
Results [3]: [c_customer_sk#81, sum#84, isEmpty#85]

(160) HashAggregate [codegen id : 6]
Input [3]: [c_customer_sk#81, sum#84, isEmpty#85]
Keys [1]: [c_customer_sk#81]
Functions [1]: [sum((cast(ss_quantity#74 as decimal(10,0)) * ss_sales_price#75))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#74 as decimal(10,0)) * ss_sales_price#75))#86]
Results [1]: [sum((cast(ss_quantity#74 as decimal(10,0)) * ss_sales_price#75))#86 AS csales#87]

(161) HashAggregate [codegen id : 6]
Input [1]: [csales#87]
Keys: []
Functions [1]: [partial_max(csales#87)]
Aggregate Attributes [1]: [max#88]
Results [1]: [max#89]

(162) Exchange
Input [1]: [max#89]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=17]

(163) HashAggregate [codegen id : 7]
Input [1]: [max#89]
Keys: []
Functions [1]: [max(csales#87)]
Aggregate Attributes [1]: [max(csales#87)#90]
Results [1]: [max(csales#87)#90 AS tpcds_cmax#91]

Subquery:5 Hosting operator id = 149 Hosting Expression = Subquery scalar-subquery#78, [id=#79]
ObjectHashAggregate (170)
+- Exchange (169)
   +- ObjectHashAggregate (168)
      +- Exchange (167)
         +- * Filter (166)
            +- * ColumnarToRow (165)
               +- Scan parquet spark_catalog.default.customer (164)


(164) Scan parquet spark_catalog.default.customer
Output [1]: [c_customer_sk#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(165) ColumnarToRow [codegen id : 1]
Input [1]: [c_customer_sk#28]

(166) Filter [codegen id : 1]
Input [1]: [c_customer_sk#28]
Condition : isnotnull(c_customer_sk#28)

(167) Exchange
Input [1]: [c_customer_sk#28]
Arguments: hashpartitioning(c_customer_sk#81, 5), ENSURE_REQUIREMENTS, [plan_id=18]

(168) ObjectHashAggregate
Input [1]: [c_customer_sk#28]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(c_customer_sk#28, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [buf#92]
Results [1]: [buf#93]

(169) Exchange
Input [1]: [buf#93]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=19]

(170) ObjectHashAggregate
Input [1]: [buf#93]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(c_customer_sk#28, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(c_customer_sk#28, 42), 2000000, 16000000, 0, 0)#94]
Results [1]: [bloom_filter_agg(xxhash64(c_customer_sk#28, 42), 2000000, 16000000, 0, 0)#94 AS bloomFilter#95]

Subquery:6 Hosting operator id = 147 Hosting Expression = ss_sold_date_sk#76 IN dynamicpruning#77
BroadcastExchange (175)
+- * Project (174)
   +- * Filter (173)
      +- * ColumnarToRow (172)
         +- Scan parquet spark_catalog.default.date_dim (171)


(171) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#80, d_year#96]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(172) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#80, d_year#96]

(173) Filter [codegen id : 1]
Input [2]: [d_date_sk#80, d_year#96]
Condition : (d_year#96 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#80))

(174) Project [codegen id : 1]
Output [1]: [d_date_sk#80]
Input [2]: [d_date_sk#80, d_year#96]

(175) BroadcastExchange
Input [1]: [d_date_sk#80]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=20]

Subquery:7 Hosting operator id = 29 Hosting Expression = Subquery scalar-subquery#26, [id=#27]
ObjectHashAggregate (182)
+- Exchange (181)
   +- ObjectHashAggregate (180)
      +- Exchange (179)
         +- * Filter (178)
            +- * ColumnarToRow (177)
               +- Scan parquet spark_catalog.default.customer (176)


(176) Scan parquet spark_catalog.default.customer
Output [1]: [c_customer_sk#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(177) ColumnarToRow [codegen id : 1]
Input [1]: [c_customer_sk#28]

(178) Filter [codegen id : 1]
Input [1]: [c_customer_sk#28]
Condition : isnotnull(c_customer_sk#28)

(179) Exchange
Input [1]: [c_customer_sk#28]
Arguments: hashpartitioning(c_customer_sk#28, 5), ENSURE_REQUIREMENTS, [plan_id=21]

(180) ObjectHashAggregate
Input [1]: [c_customer_sk#28]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(c_customer_sk#28, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [buf#92]
Results [1]: [buf#93]

(181) Exchange
Input [1]: [buf#93]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=22]

(182) ObjectHashAggregate
Input [1]: [buf#93]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(c_customer_sk#28, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(c_customer_sk#28, 42), 2000000, 16000000, 0, 0)#94]
Results [1]: [bloom_filter_agg(xxhash64(c_customer_sk#28, 42), 2000000, 16000000, 0, 0)#94 AS bloomFilter#95]

Subquery:8 Hosting operator id = 62 Hosting Expression = ReusedSubquery Subquery scalar-subquery#35, [id=#36]

Subquery:9 Hosting operator id = 55 Hosting Expression = Subquery scalar-subquery#41, [id=#42]
ObjectHashAggregate (186)
+- Exchange (185)
   +- ObjectHashAggregate (184)
      +- ReusedExchange (183)


(183) ReusedExchange [Reuses operator id: 49]
Output [3]: [c_customer_sk#38, c_first_name#39, c_last_name#40]

(184) ObjectHashAggregate
Input [3]: [c_customer_sk#38, c_first_name#39, c_last_name#40]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(c_customer_sk#38, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [buf#97]
Results [1]: [buf#98]

(185) Exchange
Input [1]: [buf#98]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=23]

(186) ObjectHashAggregate
Input [1]: [buf#98]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(c_customer_sk#38, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(c_customer_sk#38, 42), 2000000, 16000000, 0, 0)#99]
Results [1]: [bloom_filter_agg(xxhash64(c_customer_sk#38, 42), 2000000, 16000000, 0, 0)#99 AS bloomFilter#100]

Subquery:10 Hosting operator id = 71 Hosting Expression = ws_sold_date_sk#53 IN dynamicpruning#6

Subquery:11 Hosting operator id = 99 Hosting Expression = ReusedSubquery Subquery scalar-subquery#35, [id=#36]

Subquery:12 Hosting operator id = 119 Hosting Expression = ReusedSubquery Subquery scalar-subquery#35, [id=#36]

Subquery:13 Hosting operator id = 112 Hosting Expression = Subquery scalar-subquery#58, [id=#59]
ObjectHashAggregate (193)
+- Exchange (192)
   +- ObjectHashAggregate (191)
      +- Exchange (190)
         +- * Filter (189)
            +- * ColumnarToRow (188)
               +- Scan parquet spark_catalog.default.customer (187)


(187) Scan parquet spark_catalog.default.customer
Output [3]: [c_customer_sk#55, c_first_name#56, c_last_name#57]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(188) ColumnarToRow [codegen id : 1]
Input [3]: [c_customer_sk#55, c_first_name#56, c_last_name#57]

(189) Filter [codegen id : 1]
Input [3]: [c_customer_sk#55, c_first_name#56, c_last_name#57]
Condition : isnotnull(c_customer_sk#55)

(190) Exchange
Input [3]: [c_customer_sk#55, c_first_name#56, c_last_name#57]
Arguments: hashpartitioning(c_customer_sk#38, 5), ENSURE_REQUIREMENTS, [plan_id=24]

(191) ObjectHashAggregate
Input [3]: [c_customer_sk#55, c_first_name#56, c_last_name#57]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(c_customer_sk#55, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [buf#101]
Results [1]: [buf#102]

(192) Exchange
Input [1]: [buf#102]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=25]

(193) ObjectHashAggregate
Input [1]: [buf#102]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(c_customer_sk#55, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(c_customer_sk#55, 42), 2000000, 16000000, 0, 0)#103]
Results [1]: [bloom_filter_agg(xxhash64(c_customer_sk#55, 42), 2000000, 16000000, 0, 0)#103 AS bloomFilter#104]


