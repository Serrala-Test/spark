== Physical Plan ==
TakeOrderedAndProject (125)
+- Union (124)
   :- * HashAggregate (69)
   :  +- Exchange (68)
   :     +- * HashAggregate (67)
   :        +- * Project (66)
   :           +- * SortMergeJoin Inner (65)
   :              :- * Project (48)
   :              :  +- * BroadcastHashJoin Inner BuildRight (47)
   :              :     :- * SortMergeJoin LeftSemi (45)
   :              :     :  :- * Sort (27)
   :              :     :  :  +- Exchange (26)
   :              :     :  :     +- * Project (25)
   :              :     :  :        +- * SortMergeJoin LeftSemi (24)
   :              :     :  :           :- * Sort (5)
   :              :     :  :           :  +- Exchange (4)
   :              :     :  :           :     +- * Filter (3)
   :              :     :  :           :        +- * ColumnarToRow (2)
   :              :     :  :           :           +- Scan parquet default.catalog_sales (1)
   :              :     :  :           +- * Sort (23)
   :              :     :  :              +- * Project (22)
   :              :     :  :                 +- * Filter (21)
   :              :     :  :                    +- * HashAggregate (20)
   :              :     :  :                       +- * HashAggregate (19)
   :              :     :  :                          +- * Project (18)
   :              :     :  :                             +- * SortMergeJoin Inner (17)
   :              :     :  :                                :- * Sort (12)
   :              :     :  :                                :  +- Exchange (11)
   :              :     :  :                                :     +- * Project (10)
   :              :     :  :                                :        +- * BroadcastHashJoin Inner BuildRight (9)
   :              :     :  :                                :           :- * ColumnarToRow (7)
   :              :     :  :                                :           :  +- Scan parquet default.store_sales (6)
   :              :     :  :                                :           +- ReusedExchange (8)
   :              :     :  :                                +- * Sort (16)
   :              :     :  :                                   +- Exchange (15)
   :              :     :  :                                      +- * ColumnarToRow (14)
   :              :     :  :                                         +- Scan parquet default.item (13)
   :              :     :  +- * Sort (44)
   :              :     :     +- * Project (43)
   :              :     :        +- * Filter (42)
   :              :     :           +- * HashAggregate (41)
   :              :     :              +- * HashAggregate (40)
   :              :     :                 +- * Project (39)
   :              :     :                    +- * SortMergeJoin Inner (38)
   :              :     :                       :- * Sort (33)
   :              :     :                       :  +- Exchange (32)
   :              :     :                       :     +- * Project (31)
   :              :     :                       :        +- * Filter (30)
   :              :     :                       :           +- * ColumnarToRow (29)
   :              :     :                       :              +- Scan parquet default.store_sales (28)
   :              :     :                       +- * Sort (37)
   :              :     :                          +- Exchange (36)
   :              :     :                             +- * ColumnarToRow (35)
   :              :     :                                +- Scan parquet default.customer (34)
   :              :     +- ReusedExchange (46)
   :              +- * SortMergeJoin LeftSemi (64)
   :                 :- * Sort (52)
   :                 :  +- Exchange (51)
   :                 :     +- * ColumnarToRow (50)
   :                 :        +- Scan parquet default.customer (49)
   :                 +- * Sort (63)
   :                    +- * Project (62)
   :                       +- * Filter (61)
   :                          +- * HashAggregate (60)
   :                             +- * HashAggregate (59)
   :                                +- * Project (58)
   :                                   +- * SortMergeJoin Inner (57)
   :                                      :- * Sort (54)
   :                                      :  +- ReusedExchange (53)
   :                                      +- * Sort (56)
   :                                         +- ReusedExchange (55)
   +- * HashAggregate (123)
      +- Exchange (122)
         +- * HashAggregate (121)
            +- * Project (120)
               +- * SortMergeJoin Inner (119)
                  :- * Project (104)
                  :  +- * BroadcastHashJoin Inner BuildRight (103)
                  :     :- * SortMergeJoin LeftSemi (101)
                  :     :  :- * Sort (89)
                  :     :  :  +- Exchange (88)
                  :     :  :     +- * Project (87)
                  :     :  :        +- * SortMergeJoin LeftSemi (86)
                  :     :  :           :- * Sort (74)
                  :     :  :           :  +- Exchange (73)
                  :     :  :           :     +- * Filter (72)
                  :     :  :           :        +- * ColumnarToRow (71)
                  :     :  :           :           +- Scan parquet default.web_sales (70)
                  :     :  :           +- * Sort (85)
                  :     :  :              +- * Project (84)
                  :     :  :                 +- * Filter (83)
                  :     :  :                    +- * HashAggregate (82)
                  :     :  :                       +- * HashAggregate (81)
                  :     :  :                          +- * Project (80)
                  :     :  :                             +- * SortMergeJoin Inner (79)
                  :     :  :                                :- * Sort (76)
                  :     :  :                                :  +- ReusedExchange (75)
                  :     :  :                                +- * Sort (78)
                  :     :  :                                   +- ReusedExchange (77)
                  :     :  +- * Sort (100)
                  :     :     +- * Project (99)
                  :     :        +- * Filter (98)
                  :     :           +- * HashAggregate (97)
                  :     :              +- * HashAggregate (96)
                  :     :                 +- * Project (95)
                  :     :                    +- * SortMergeJoin Inner (94)
                  :     :                       :- * Sort (91)
                  :     :                       :  +- ReusedExchange (90)
                  :     :                       +- * Sort (93)
                  :     :                          +- ReusedExchange (92)
                  :     +- ReusedExchange (102)
                  +- * SortMergeJoin LeftSemi (118)
                     :- * Sort (106)
                     :  +- ReusedExchange (105)
                     +- * Sort (117)
                        +- * Project (116)
                           +- * Filter (115)
                              +- * HashAggregate (114)
                                 +- * HashAggregate (113)
                                    +- * Project (112)
                                       +- * SortMergeJoin Inner (111)
                                          :- * Sort (108)
                                          :  +- ReusedExchange (107)
                                          +- * Sort (110)
                                             +- ReusedExchange (109)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(3) Filter [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Condition : isnotnull(cs_bill_customer_sk#1)

(4) Exchange
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#7]

(5) Sort [codegen id : 2]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_item_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [2]: [ss_item_sk#8, ss_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#9), dynamicpruningexpression(ss_sold_date_sk#9 IN dynamicpruning#10)]
ReadSchema: struct<ss_item_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ss_item_sk#8, ss_sold_date_sk#9]

(8) ReusedExchange [Reuses operator id: 135]
Output [2]: [d_date_sk#11, d_date#12]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#9]
Right keys [1]: [d_date_sk#11]
Join condition: None

(10) Project [codegen id : 4]
Output [2]: [ss_item_sk#8, d_date#12]
Input [4]: [ss_item_sk#8, ss_sold_date_sk#9, d_date_sk#11, d_date#12]

(11) Exchange
Input [2]: [ss_item_sk#8, d_date#12]
Arguments: hashpartitioning(ss_item_sk#8, 5), ENSURE_REQUIREMENTS, [id=#13]

(12) Sort [codegen id : 5]
Input [2]: [ss_item_sk#8, d_date#12]
Arguments: [ss_item_sk#8 ASC NULLS FIRST], false, 0

(13) Scan parquet default.item
Output [2]: [i_item_sk#14, i_item_desc#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(14) ColumnarToRow [codegen id : 6]
Input [2]: [i_item_sk#14, i_item_desc#15]

(15) Exchange
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: hashpartitioning(i_item_sk#14, 5), ENSURE_REQUIREMENTS, [id=#16]

(16) Sort [codegen id : 7]
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: [i_item_sk#14 ASC NULLS FIRST], false, 0

(17) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#14]
Join condition: None

(18) Project [codegen id : 8]
Output [3]: [d_date#12, i_item_sk#14, substr(i_item_desc#15, 1, 30) AS _groupingexpression#17]
Input [4]: [ss_item_sk#8, d_date#12, i_item_sk#14, i_item_desc#15]

(19) HashAggregate [codegen id : 8]
Input [3]: [d_date#12, i_item_sk#14, _groupingexpression#17]
Keys [3]: [_groupingexpression#17, i_item_sk#14, d_date#12]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#18]
Results [4]: [_groupingexpression#17, i_item_sk#14, d_date#12, count#19]

(20) HashAggregate [codegen id : 8]
Input [4]: [_groupingexpression#17, i_item_sk#14, d_date#12, count#19]
Keys [3]: [_groupingexpression#17, i_item_sk#14, d_date#12]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#20]
Results [2]: [i_item_sk#14 AS item_sk#21, count(1)#20 AS cnt#22]

(21) Filter [codegen id : 8]
Input [2]: [item_sk#21, cnt#22]
Condition : (cnt#22 > 4)

(22) Project [codegen id : 8]
Output [1]: [item_sk#21]
Input [2]: [item_sk#21, cnt#22]

(23) Sort [codegen id : 8]
Input [1]: [item_sk#21]
Arguments: [item_sk#21 ASC NULLS FIRST], false, 0

(24) SortMergeJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#21]
Join condition: None

(25) Project [codegen id : 9]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(26) Exchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#23]

(27) Sort [codegen id : 10]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(28) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(29) ColumnarToRow [codegen id : 11]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]

(30) Filter [codegen id : 11]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]
Condition : isnotnull(ss_customer_sk#24)

(31) Project [codegen id : 11]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]

(32) Exchange
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: hashpartitioning(ss_customer_sk#24, 5), ENSURE_REQUIREMENTS, [id=#28]

(33) Sort [codegen id : 12]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: [ss_customer_sk#24 ASC NULLS FIRST], false, 0

(34) Scan parquet default.customer
Output [1]: [c_customer_sk#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
ReadSchema: struct<c_customer_sk:int>

(35) ColumnarToRow [codegen id : 13]
Input [1]: [c_customer_sk#29]

(36) Exchange
Input [1]: [c_customer_sk#29]
Arguments: hashpartitioning(c_customer_sk#29, 5), ENSURE_REQUIREMENTS, [id=#30]

(37) Sort [codegen id : 14]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(38) SortMergeJoin [codegen id : 15]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(39) Project [codegen id : 15]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#29]

(40) HashAggregate [codegen id : 15]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#31, isEmpty#32]
Results [3]: [c_customer_sk#29, sum#33, isEmpty#34]

(41) HashAggregate [codegen id : 15]
Input [3]: [c_customer_sk#29, sum#33, isEmpty#34]
Keys [1]: [c_customer_sk#29]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]
Results [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35 AS ssales#36]

(42) Filter [codegen id : 15]
Input [2]: [c_customer_sk#29, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8), true)))

(43) Project [codegen id : 15]
Output [1]: [c_customer_sk#29]
Input [2]: [c_customer_sk#29, ssales#36]

(44) Sort [codegen id : 15]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(45) SortMergeJoin [codegen id : 17]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(46) ReusedExchange [Reuses operator id: 130]
Output [1]: [d_date_sk#39]

(47) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#39]
Join condition: None

(48) Project [codegen id : 17]
Output [3]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4]
Input [5]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, d_date_sk#39]

(49) Scan parquet default.customer
Output [3]: [c_customer_sk#40, c_first_name#41, c_last_name#42]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(50) ColumnarToRow [codegen id : 18]
Input [3]: [c_customer_sk#40, c_first_name#41, c_last_name#42]

(51) Exchange
Input [3]: [c_customer_sk#40, c_first_name#41, c_last_name#42]
Arguments: hashpartitioning(c_customer_sk#40, 5), ENSURE_REQUIREMENTS, [id=#43]

(52) Sort [codegen id : 19]
Input [3]: [c_customer_sk#40, c_first_name#41, c_last_name#42]
Arguments: [c_customer_sk#40 ASC NULLS FIRST], false, 0

(53) ReusedExchange [Reuses operator id: 32]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]

(54) Sort [codegen id : 21]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: [ss_customer_sk#24 ASC NULLS FIRST], false, 0

(55) ReusedExchange [Reuses operator id: 36]
Output [1]: [c_customer_sk#29]

(56) Sort [codegen id : 23]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(57) SortMergeJoin [codegen id : 24]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(58) Project [codegen id : 24]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#29]

(59) HashAggregate [codegen id : 24]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#31, isEmpty#32]
Results [3]: [c_customer_sk#29, sum#33, isEmpty#34]

(60) HashAggregate [codegen id : 24]
Input [3]: [c_customer_sk#29, sum#33, isEmpty#34]
Keys [1]: [c_customer_sk#29]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]
Results [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35 AS ssales#36]

(61) Filter [codegen id : 24]
Input [2]: [c_customer_sk#29, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8), true)))

(62) Project [codegen id : 24]
Output [1]: [c_customer_sk#29]
Input [2]: [c_customer_sk#29, ssales#36]

(63) Sort [codegen id : 24]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(64) SortMergeJoin [codegen id : 25]
Left keys [1]: [c_customer_sk#40]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(65) SortMergeJoin [codegen id : 26]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#40]
Join condition: None

(66) Project [codegen id : 26]
Output [4]: [cs_quantity#3, cs_list_price#4, c_first_name#41, c_last_name#42]
Input [6]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, c_customer_sk#40, c_first_name#41, c_last_name#42]

(67) HashAggregate [codegen id : 26]
Input [4]: [cs_quantity#3, cs_list_price#4, c_first_name#41, c_last_name#42]
Keys [2]: [c_last_name#42, c_first_name#41]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#44, isEmpty#45]
Results [4]: [c_last_name#42, c_first_name#41, sum#46, isEmpty#47]

(68) Exchange
Input [4]: [c_last_name#42, c_first_name#41, sum#46, isEmpty#47]
Arguments: hashpartitioning(c_last_name#42, c_first_name#41, 5), ENSURE_REQUIREMENTS, [id=#48]

(69) HashAggregate [codegen id : 27]
Input [4]: [c_last_name#42, c_first_name#41, sum#46, isEmpty#47]
Keys [2]: [c_last_name#42, c_first_name#41]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#49]
Results [3]: [c_last_name#42, c_first_name#41, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#49 AS sales#50]

(70) Scan parquet default.web_sales
Output [5]: [ws_item_sk#51, ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#55), dynamicpruningexpression(ws_sold_date_sk#55 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(71) ColumnarToRow [codegen id : 28]
Input [5]: [ws_item_sk#51, ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]

(72) Filter [codegen id : 28]
Input [5]: [ws_item_sk#51, ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Condition : isnotnull(ws_bill_customer_sk#52)

(73) Exchange
Input [5]: [ws_item_sk#51, ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Arguments: hashpartitioning(ws_item_sk#51, 5), ENSURE_REQUIREMENTS, [id=#56]

(74) Sort [codegen id : 29]
Input [5]: [ws_item_sk#51, ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Arguments: [ws_item_sk#51 ASC NULLS FIRST], false, 0

(75) ReusedExchange [Reuses operator id: 11]
Output [2]: [ss_item_sk#57, d_date#58]

(76) Sort [codegen id : 32]
Input [2]: [ss_item_sk#57, d_date#58]
Arguments: [ss_item_sk#57 ASC NULLS FIRST], false, 0

(77) ReusedExchange [Reuses operator id: 15]
Output [2]: [i_item_sk#59, i_item_desc#60]

(78) Sort [codegen id : 34]
Input [2]: [i_item_sk#59, i_item_desc#60]
Arguments: [i_item_sk#59 ASC NULLS FIRST], false, 0

(79) SortMergeJoin [codegen id : 35]
Left keys [1]: [ss_item_sk#57]
Right keys [1]: [i_item_sk#59]
Join condition: None

(80) Project [codegen id : 35]
Output [3]: [d_date#58, i_item_sk#59, substr(i_item_desc#60, 1, 30) AS _groupingexpression#61]
Input [4]: [ss_item_sk#57, d_date#58, i_item_sk#59, i_item_desc#60]

(81) HashAggregate [codegen id : 35]
Input [3]: [d_date#58, i_item_sk#59, _groupingexpression#61]
Keys [3]: [_groupingexpression#61, i_item_sk#59, d_date#58]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#62]
Results [4]: [_groupingexpression#61, i_item_sk#59, d_date#58, count#63]

(82) HashAggregate [codegen id : 35]
Input [4]: [_groupingexpression#61, i_item_sk#59, d_date#58, count#63]
Keys [3]: [_groupingexpression#61, i_item_sk#59, d_date#58]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#64]
Results [2]: [i_item_sk#59 AS item_sk#21, count(1)#64 AS cnt#22]

(83) Filter [codegen id : 35]
Input [2]: [item_sk#21, cnt#22]
Condition : (cnt#22 > 4)

(84) Project [codegen id : 35]
Output [1]: [item_sk#21]
Input [2]: [item_sk#21, cnt#22]

(85) Sort [codegen id : 35]
Input [1]: [item_sk#21]
Arguments: [item_sk#21 ASC NULLS FIRST], false, 0

(86) SortMergeJoin [codegen id : 36]
Left keys [1]: [ws_item_sk#51]
Right keys [1]: [item_sk#21]
Join condition: None

(87) Project [codegen id : 36]
Output [4]: [ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Input [5]: [ws_item_sk#51, ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]

(88) Exchange
Input [4]: [ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Arguments: hashpartitioning(ws_bill_customer_sk#52, 5), ENSURE_REQUIREMENTS, [id=#65]

(89) Sort [codegen id : 37]
Input [4]: [ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Arguments: [ws_bill_customer_sk#52 ASC NULLS FIRST], false, 0

(90) ReusedExchange [Reuses operator id: 32]
Output [3]: [ss_customer_sk#66, ss_quantity#67, ss_sales_price#68]

(91) Sort [codegen id : 39]
Input [3]: [ss_customer_sk#66, ss_quantity#67, ss_sales_price#68]
Arguments: [ss_customer_sk#66 ASC NULLS FIRST], false, 0

(92) ReusedExchange [Reuses operator id: 36]
Output [1]: [c_customer_sk#69]

(93) Sort [codegen id : 41]
Input [1]: [c_customer_sk#69]
Arguments: [c_customer_sk#69 ASC NULLS FIRST], false, 0

(94) SortMergeJoin [codegen id : 42]
Left keys [1]: [ss_customer_sk#66]
Right keys [1]: [c_customer_sk#69]
Join condition: None

(95) Project [codegen id : 42]
Output [3]: [ss_quantity#67, ss_sales_price#68, c_customer_sk#69]
Input [4]: [ss_customer_sk#66, ss_quantity#67, ss_sales_price#68, c_customer_sk#69]

(96) HashAggregate [codegen id : 42]
Input [3]: [ss_quantity#67, ss_sales_price#68, c_customer_sk#69]
Keys [1]: [c_customer_sk#69]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#68 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#70, isEmpty#71]
Results [3]: [c_customer_sk#69, sum#72, isEmpty#73]

(97) HashAggregate [codegen id : 42]
Input [3]: [c_customer_sk#69, sum#72, isEmpty#73]
Keys [1]: [c_customer_sk#69]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#68 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#68 as decimal(12,2)))), DecimalType(18,2), true))#74]
Results [2]: [c_customer_sk#69, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#68 as decimal(12,2)))), DecimalType(18,2), true))#74 AS ssales#36]

(98) Filter [codegen id : 42]
Input [2]: [c_customer_sk#69, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8), true)))

(99) Project [codegen id : 42]
Output [1]: [c_customer_sk#69]
Input [2]: [c_customer_sk#69, ssales#36]

(100) Sort [codegen id : 42]
Input [1]: [c_customer_sk#69]
Arguments: [c_customer_sk#69 ASC NULLS FIRST], false, 0

(101) SortMergeJoin [codegen id : 44]
Left keys [1]: [ws_bill_customer_sk#52]
Right keys [1]: [c_customer_sk#69]
Join condition: None

(102) ReusedExchange [Reuses operator id: 130]
Output [1]: [d_date_sk#75]

(103) BroadcastHashJoin [codegen id : 44]
Left keys [1]: [ws_sold_date_sk#55]
Right keys [1]: [d_date_sk#75]
Join condition: None

(104) Project [codegen id : 44]
Output [3]: [ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54]
Input [5]: [ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55, d_date_sk#75]

(105) ReusedExchange [Reuses operator id: 51]
Output [3]: [c_customer_sk#76, c_first_name#77, c_last_name#78]

(106) Sort [codegen id : 46]
Input [3]: [c_customer_sk#76, c_first_name#77, c_last_name#78]
Arguments: [c_customer_sk#76 ASC NULLS FIRST], false, 0

(107) ReusedExchange [Reuses operator id: 32]
Output [3]: [ss_customer_sk#66, ss_quantity#67, ss_sales_price#68]

(108) Sort [codegen id : 48]
Input [3]: [ss_customer_sk#66, ss_quantity#67, ss_sales_price#68]
Arguments: [ss_customer_sk#66 ASC NULLS FIRST], false, 0

(109) ReusedExchange [Reuses operator id: 36]
Output [1]: [c_customer_sk#69]

(110) Sort [codegen id : 50]
Input [1]: [c_customer_sk#69]
Arguments: [c_customer_sk#69 ASC NULLS FIRST], false, 0

(111) SortMergeJoin [codegen id : 51]
Left keys [1]: [ss_customer_sk#66]
Right keys [1]: [c_customer_sk#69]
Join condition: None

(112) Project [codegen id : 51]
Output [3]: [ss_quantity#67, ss_sales_price#68, c_customer_sk#69]
Input [4]: [ss_customer_sk#66, ss_quantity#67, ss_sales_price#68, c_customer_sk#69]

(113) HashAggregate [codegen id : 51]
Input [3]: [ss_quantity#67, ss_sales_price#68, c_customer_sk#69]
Keys [1]: [c_customer_sk#69]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#68 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#70, isEmpty#71]
Results [3]: [c_customer_sk#69, sum#72, isEmpty#73]

(114) HashAggregate [codegen id : 51]
Input [3]: [c_customer_sk#69, sum#72, isEmpty#73]
Keys [1]: [c_customer_sk#69]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#68 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#68 as decimal(12,2)))), DecimalType(18,2), true))#74]
Results [2]: [c_customer_sk#69, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#68 as decimal(12,2)))), DecimalType(18,2), true))#74 AS ssales#36]

(115) Filter [codegen id : 51]
Input [2]: [c_customer_sk#69, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8), true)))

(116) Project [codegen id : 51]
Output [1]: [c_customer_sk#69]
Input [2]: [c_customer_sk#69, ssales#36]

(117) Sort [codegen id : 51]
Input [1]: [c_customer_sk#69]
Arguments: [c_customer_sk#69 ASC NULLS FIRST], false, 0

(118) SortMergeJoin [codegen id : 52]
Left keys [1]: [c_customer_sk#76]
Right keys [1]: [c_customer_sk#69]
Join condition: None

(119) SortMergeJoin [codegen id : 53]
Left keys [1]: [ws_bill_customer_sk#52]
Right keys [1]: [c_customer_sk#76]
Join condition: None

(120) Project [codegen id : 53]
Output [4]: [ws_quantity#53, ws_list_price#54, c_first_name#77, c_last_name#78]
Input [6]: [ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, c_customer_sk#76, c_first_name#77, c_last_name#78]

(121) HashAggregate [codegen id : 53]
Input [4]: [ws_quantity#53, ws_list_price#54, c_first_name#77, c_last_name#78]
Keys [2]: [c_last_name#78, c_first_name#77]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#79, isEmpty#80]
Results [4]: [c_last_name#78, c_first_name#77, sum#81, isEmpty#82]

(122) Exchange
Input [4]: [c_last_name#78, c_first_name#77, sum#81, isEmpty#82]
Arguments: hashpartitioning(c_last_name#78, c_first_name#77, 5), ENSURE_REQUIREMENTS, [id=#83]

(123) HashAggregate [codegen id : 54]
Input [4]: [c_last_name#78, c_first_name#77, sum#81, isEmpty#82]
Keys [2]: [c_last_name#78, c_first_name#77]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#84]
Results [3]: [c_last_name#78, c_first_name#77, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#53 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#54 as decimal(12,2)))), DecimalType(18,2), true))#84 AS sales#85]

(124) Union

(125) TakeOrderedAndProject
Input [3]: [c_last_name#42, c_first_name#41, sales#50]
Arguments: 100, [c_last_name#42 ASC NULLS FIRST, c_first_name#41 ASC NULLS FIRST, sales#50 ASC NULLS FIRST], [c_last_name#42, c_first_name#41, sales#50]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (130)
+- * Project (129)
   +- * Filter (128)
      +- * ColumnarToRow (127)
         +- Scan parquet default.date_dim (126)


(126) Scan parquet default.date_dim
Output [3]: [d_date_sk#39, d_year#86, d_moy#87]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [EqualTo(d_year,2000), EqualTo(d_moy,2)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(127) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#39, d_year#86, d_moy#87]

(128) Filter [codegen id : 1]
Input [3]: [d_date_sk#39, d_year#86, d_moy#87]
Condition : ((d_year#86 = 2000) AND (d_moy#87 = 2))

(129) Project [codegen id : 1]
Output [1]: [d_date_sk#39]
Input [3]: [d_date_sk#39, d_year#86, d_moy#87]

(130) BroadcastExchange
Input [1]: [d_date_sk#39]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#88]

Subquery:2 Hosting operator id = 6 Hosting Expression = ss_sold_date_sk#9 IN dynamicpruning#10
BroadcastExchange (135)
+- * Project (134)
   +- * Filter (133)
      +- * ColumnarToRow (132)
         +- Scan parquet default.date_dim (131)


(131) Scan parquet default.date_dim
Output [3]: [d_date_sk#11, d_date#12, d_year#89]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003])]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(132) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#11, d_date#12, d_year#89]

(133) Filter [codegen id : 1]
Input [3]: [d_date_sk#11, d_date#12, d_year#89]
Condition : d_year#89 IN (2000,2001,2002,2003)

(134) Project [codegen id : 1]
Output [2]: [d_date_sk#11, d_date#12]
Input [3]: [d_date_sk#11, d_date#12, d_year#89]

(135) BroadcastExchange
Input [2]: [d_date_sk#11, d_date#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#90]

Subquery:3 Hosting operator id = 42 Hosting Expression = Subquery scalar-subquery#37, [id=#38]
* HashAggregate (152)
+- Exchange (151)
   +- * HashAggregate (150)
      +- * HashAggregate (149)
         +- * HashAggregate (148)
            +- * Project (147)
               +- * SortMergeJoin Inner (146)
                  :- * Sort (143)
                  :  +- Exchange (142)
                  :     +- * Project (141)
                  :        +- * BroadcastHashJoin Inner BuildRight (140)
                  :           :- * Filter (138)
                  :           :  +- * ColumnarToRow (137)
                  :           :     +- Scan parquet default.store_sales (136)
                  :           +- ReusedExchange (139)
                  +- * Sort (145)
                     +- ReusedExchange (144)


(136) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#91, ss_quantity#92, ss_sales_price#93, ss_sold_date_sk#94]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#94), dynamicpruningexpression(ss_sold_date_sk#94 IN dynamicpruning#95)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(137) ColumnarToRow [codegen id : 2]
Input [4]: [ss_customer_sk#91, ss_quantity#92, ss_sales_price#93, ss_sold_date_sk#94]

(138) Filter [codegen id : 2]
Input [4]: [ss_customer_sk#91, ss_quantity#92, ss_sales_price#93, ss_sold_date_sk#94]
Condition : isnotnull(ss_customer_sk#91)

(139) ReusedExchange [Reuses operator id: 157]
Output [1]: [d_date_sk#96]

(140) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#94]
Right keys [1]: [d_date_sk#96]
Join condition: None

(141) Project [codegen id : 2]
Output [3]: [ss_customer_sk#91, ss_quantity#92, ss_sales_price#93]
Input [5]: [ss_customer_sk#91, ss_quantity#92, ss_sales_price#93, ss_sold_date_sk#94, d_date_sk#96]

(142) Exchange
Input [3]: [ss_customer_sk#91, ss_quantity#92, ss_sales_price#93]
Arguments: hashpartitioning(ss_customer_sk#91, 5), ENSURE_REQUIREMENTS, [id=#97]

(143) Sort [codegen id : 3]
Input [3]: [ss_customer_sk#91, ss_quantity#92, ss_sales_price#93]
Arguments: [ss_customer_sk#91 ASC NULLS FIRST], false, 0

(144) ReusedExchange [Reuses operator id: 36]
Output [1]: [c_customer_sk#98]

(145) Sort [codegen id : 5]
Input [1]: [c_customer_sk#98]
Arguments: [c_customer_sk#98 ASC NULLS FIRST], false, 0

(146) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#91]
Right keys [1]: [c_customer_sk#98]
Join condition: None

(147) Project [codegen id : 6]
Output [3]: [ss_quantity#92, ss_sales_price#93, c_customer_sk#98]
Input [4]: [ss_customer_sk#91, ss_quantity#92, ss_sales_price#93, c_customer_sk#98]

(148) HashAggregate [codegen id : 6]
Input [3]: [ss_quantity#92, ss_sales_price#93, c_customer_sk#98]
Keys [1]: [c_customer_sk#98]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#92 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#93 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#99, isEmpty#100]
Results [3]: [c_customer_sk#98, sum#101, isEmpty#102]

(149) HashAggregate [codegen id : 6]
Input [3]: [c_customer_sk#98, sum#101, isEmpty#102]
Keys [1]: [c_customer_sk#98]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#92 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#93 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#92 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#93 as decimal(12,2)))), DecimalType(18,2), true))#103]
Results [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#92 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#93 as decimal(12,2)))), DecimalType(18,2), true))#103 AS csales#104]

(150) HashAggregate [codegen id : 6]
Input [1]: [csales#104]
Keys: []
Functions [1]: [partial_max(csales#104)]
Aggregate Attributes [1]: [max#105]
Results [1]: [max#106]

(151) Exchange
Input [1]: [max#106]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#107]

(152) HashAggregate [codegen id : 7]
Input [1]: [max#106]
Keys: []
Functions [1]: [max(csales#104)]
Aggregate Attributes [1]: [max(csales#104)#108]
Results [1]: [max(csales#104)#108 AS tpcds_cmax#109]

Subquery:4 Hosting operator id = 136 Hosting Expression = ss_sold_date_sk#94 IN dynamicpruning#95
BroadcastExchange (157)
+- * Project (156)
   +- * Filter (155)
      +- * ColumnarToRow (154)
         +- Scan parquet default.date_dim (153)


(153) Scan parquet default.date_dim
Output [2]: [d_date_sk#96, d_year#110]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003])]
ReadSchema: struct<d_date_sk:int,d_year:int>

(154) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#96, d_year#110]

(155) Filter [codegen id : 1]
Input [2]: [d_date_sk#96, d_year#110]
Condition : d_year#110 IN (2000,2001,2002,2003)

(156) Project [codegen id : 1]
Output [1]: [d_date_sk#96]
Input [2]: [d_date_sk#96, d_year#110]

(157) BroadcastExchange
Input [1]: [d_date_sk#96]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#111]

Subquery:5 Hosting operator id = 61 Hosting Expression = ReusedSubquery Subquery scalar-subquery#37, [id=#38]

Subquery:6 Hosting operator id = 70 Hosting Expression = ws_sold_date_sk#55 IN dynamicpruning#6

Subquery:7 Hosting operator id = 98 Hosting Expression = ReusedSubquery Subquery scalar-subquery#37, [id=#38]

Subquery:8 Hosting operator id = 115 Hosting Expression = ReusedSubquery Subquery scalar-subquery#37, [id=#38]


