== Physical Plan ==
TakeOrderedAndProject (121)
+- Union (120)
   :- * HashAggregate (69)
   :  +- Exchange (68)
   :     +- * HashAggregate (67)
   :        +- * Project (66)
   :           +- * SortMergeJoin Inner (65)
   :              :- * Project (49)
   :              :  +- * BroadcastHashJoin Inner BuildRight (48)
   :              :     :- * SortMergeJoin LeftSemi (46)
   :              :     :  :- * Sort (29)
   :              :     :  :  +- Exchange (28)
   :              :     :  :     +- * Project (27)
   :              :     :  :        +- * SortMergeJoin LeftSemi (26)
   :              :     :  :           :- * Sort (5)
   :              :     :  :           :  +- Exchange (4)
   :              :     :  :           :     +- * Filter (3)
   :              :     :  :           :        +- * ColumnarToRow (2)
   :              :     :  :           :           +- Scan parquet default.catalog_sales (1)
   :              :     :  :           +- * Sort (25)
   :              :     :  :              +- * Project (24)
   :              :     :  :                 +- * Filter (23)
   :              :     :  :                    +- * HashAggregate (22)
   :              :     :  :                       +- * HashAggregate (21)
   :              :     :  :                          +- * Project (20)
   :              :     :  :                             +- * SortMergeJoin Inner (19)
   :              :     :  :                                :- * Sort (13)
   :              :     :  :                                :  +- Exchange (12)
   :              :     :  :                                :     +- * Project (11)
   :              :     :  :                                :        +- * BroadcastHashJoin Inner BuildRight (10)
   :              :     :  :                                :           :- * Filter (8)
   :              :     :  :                                :           :  +- * ColumnarToRow (7)
   :              :     :  :                                :           :     +- Scan parquet default.store_sales (6)
   :              :     :  :                                :           +- ReusedExchange (9)
   :              :     :  :                                +- * Sort (18)
   :              :     :  :                                   +- Exchange (17)
   :              :     :  :                                      +- * Filter (16)
   :              :     :  :                                         +- * ColumnarToRow (15)
   :              :     :  :                                            +- Scan parquet default.item (14)
   :              :     :  +- * Project (45)
   :              :     :     +- * Filter (44)
   :              :     :        +- SortAggregate (43)
   :              :     :           +- * Project (42)
   :              :     :              +- * SortMergeJoin Inner (41)
   :              :     :                 :- * Sort (35)
   :              :     :                 :  +- Exchange (34)
   :              :     :                 :     +- * Project (33)
   :              :     :                 :        +- * Filter (32)
   :              :     :                 :           +- * ColumnarToRow (31)
   :              :     :                 :              +- Scan parquet default.store_sales (30)
   :              :     :                 +- * Sort (40)
   :              :     :                    +- Exchange (39)
   :              :     :                       +- * Filter (38)
   :              :     :                          +- * ColumnarToRow (37)
   :              :     :                             +- Scan parquet default.customer (36)
   :              :     +- ReusedExchange (47)
   :              +- * SortMergeJoin LeftSemi (64)
   :                 :- * Sort (54)
   :                 :  +- Exchange (53)
   :                 :     +- * Filter (52)
   :                 :        +- * ColumnarToRow (51)
   :                 :           +- Scan parquet default.customer (50)
   :                 +- * Project (63)
   :                    +- * Filter (62)
   :                       +- SortAggregate (61)
   :                          +- * Project (60)
   :                             +- * SortMergeJoin Inner (59)
   :                                :- * Sort (56)
   :                                :  +- ReusedExchange (55)
   :                                +- * Sort (58)
   :                                   +- ReusedExchange (57)
   +- * HashAggregate (119)
      +- Exchange (118)
         +- * HashAggregate (117)
            +- * Project (116)
               +- * SortMergeJoin Inner (115)
                  :- * Project (102)
                  :  +- * BroadcastHashJoin Inner BuildRight (101)
                  :     :- * SortMergeJoin LeftSemi (99)
                  :     :  :- * Sort (89)
                  :     :  :  +- Exchange (88)
                  :     :  :     +- * Project (87)
                  :     :  :        +- * SortMergeJoin LeftSemi (86)
                  :     :  :           :- * Sort (74)
                  :     :  :           :  +- Exchange (73)
                  :     :  :           :     +- * Filter (72)
                  :     :  :           :        +- * ColumnarToRow (71)
                  :     :  :           :           +- Scan parquet default.web_sales (70)
                  :     :  :           +- * Sort (85)
                  :     :  :              +- * Project (84)
                  :     :  :                 +- * Filter (83)
                  :     :  :                    +- * HashAggregate (82)
                  :     :  :                       +- * HashAggregate (81)
                  :     :  :                          +- * Project (80)
                  :     :  :                             +- * SortMergeJoin Inner (79)
                  :     :  :                                :- * Sort (76)
                  :     :  :                                :  +- ReusedExchange (75)
                  :     :  :                                +- * Sort (78)
                  :     :  :                                   +- ReusedExchange (77)
                  :     :  +- * Project (98)
                  :     :     +- * Filter (97)
                  :     :        +- SortAggregate (96)
                  :     :           +- * Project (95)
                  :     :              +- * SortMergeJoin Inner (94)
                  :     :                 :- * Sort (91)
                  :     :                 :  +- ReusedExchange (90)
                  :     :                 +- * Sort (93)
                  :     :                    +- ReusedExchange (92)
                  :     +- ReusedExchange (100)
                  +- * SortMergeJoin LeftSemi (114)
                     :- * Sort (104)
                     :  +- ReusedExchange (103)
                     +- * Project (113)
                        +- * Filter (112)
                           +- SortAggregate (111)
                              +- * Project (110)
                                 +- * SortMergeJoin Inner (109)
                                    :- * Sort (106)
                                    :  +- ReusedExchange (105)
                                    +- * Sort (108)
                                       +- ReusedExchange (107)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(3) Filter [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Condition : isnotnull(cs_bill_customer_sk#1)

(4) Exchange
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#7]

(5) Sort [codegen id : 2]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_item_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [2]: [ss_item_sk#8, ss_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#9), dynamicpruningexpression(ss_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ss_item_sk#8, ss_sold_date_sk#9]

(8) Filter [codegen id : 4]
Input [2]: [ss_item_sk#8, ss_sold_date_sk#9]
Condition : isnotnull(ss_item_sk#8)

(9) ReusedExchange [Reuses operator id: 131]
Output [2]: [d_date_sk#11, d_date#12]

(10) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#9]
Right keys [1]: [d_date_sk#11]
Join condition: None

(11) Project [codegen id : 4]
Output [2]: [ss_item_sk#8, d_date#12]
Input [4]: [ss_item_sk#8, ss_sold_date_sk#9, d_date_sk#11, d_date#12]

(12) Exchange
Input [2]: [ss_item_sk#8, d_date#12]
Arguments: hashpartitioning(ss_item_sk#8, 5), ENSURE_REQUIREMENTS, [id=#13]

(13) Sort [codegen id : 5]
Input [2]: [ss_item_sk#8, d_date#12]
Arguments: [ss_item_sk#8 ASC NULLS FIRST], false, 0

(14) Scan parquet default.item
Output [2]: [i_item_sk#14, i_item_desc#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(15) ColumnarToRow [codegen id : 6]
Input [2]: [i_item_sk#14, i_item_desc#15]

(16) Filter [codegen id : 6]
Input [2]: [i_item_sk#14, i_item_desc#15]
Condition : isnotnull(i_item_sk#14)

(17) Exchange
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: hashpartitioning(i_item_sk#14, 5), ENSURE_REQUIREMENTS, [id=#16]

(18) Sort [codegen id : 7]
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: [i_item_sk#14 ASC NULLS FIRST], false, 0

(19) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#14]
Join condition: None

(20) Project [codegen id : 8]
Output [3]: [d_date#12, i_item_sk#14, substr(i_item_desc#15, 1, 30) AS _groupingexpression#17]
Input [4]: [ss_item_sk#8, d_date#12, i_item_sk#14, i_item_desc#15]

(21) HashAggregate [codegen id : 8]
Input [3]: [d_date#12, i_item_sk#14, _groupingexpression#17]
Keys [3]: [_groupingexpression#17, i_item_sk#14, d_date#12]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#18]
Results [4]: [_groupingexpression#17, i_item_sk#14, d_date#12, count#19]

(22) HashAggregate [codegen id : 8]
Input [4]: [_groupingexpression#17, i_item_sk#14, d_date#12, count#19]
Keys [3]: [_groupingexpression#17, i_item_sk#14, d_date#12]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#20]
Results [2]: [i_item_sk#14 AS item_sk#21, count(1)#20 AS cnt#22]

(23) Filter [codegen id : 8]
Input [2]: [item_sk#21, cnt#22]
Condition : (cnt#22 > 4)

(24) Project [codegen id : 8]
Output [1]: [item_sk#21]
Input [2]: [item_sk#21, cnt#22]

(25) Sort [codegen id : 8]
Input [1]: [item_sk#21]
Arguments: [item_sk#21 ASC NULLS FIRST], false, 0

(26) SortMergeJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#21]
Join condition: None

(27) Project [codegen id : 9]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(28) Exchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#23]

(29) Sort [codegen id : 10]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(30) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(31) ColumnarToRow [codegen id : 11]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]

(32) Filter [codegen id : 11]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]
Condition : isnotnull(ss_customer_sk#24)

(33) Project [codegen id : 11]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]

(34) Exchange
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: hashpartitioning(ss_customer_sk#24, 5), ENSURE_REQUIREMENTS, [id=#28]

(35) Sort [codegen id : 12]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: [ss_customer_sk#24 ASC NULLS FIRST], false, 0

(36) Scan parquet default.customer
Output [1]: [c_customer_sk#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(37) ColumnarToRow [codegen id : 13]
Input [1]: [c_customer_sk#29]

(38) Filter [codegen id : 13]
Input [1]: [c_customer_sk#29]
Condition : isnotnull(c_customer_sk#29)

(39) Exchange
Input [1]: [c_customer_sk#29]
Arguments: hashpartitioning(c_customer_sk#29, 5), ENSURE_REQUIREMENTS, [id=#30]

(40) Sort [codegen id : 14]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(41) SortMergeJoin [codegen id : 15]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(42) Project [codegen id : 15]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#29]

(43) SortAggregate
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#31]
Results [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#31 AS ssales#32]

(44) Filter [codegen id : 16]
Input [2]: [c_customer_sk#29, ssales#32]
Condition : (isnotnull(ssales#32) AND (cast(ssales#32 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#33, [id=#34] as decimal(32,6)))), DecimalType(38,8), true)))

(45) Project [codegen id : 16]
Output [1]: [c_customer_sk#29]
Input [2]: [c_customer_sk#29, ssales#32]

(46) SortMergeJoin [codegen id : 18]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(47) ReusedExchange [Reuses operator id: 126]
Output [1]: [d_date_sk#35]

(48) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#35]
Join condition: None

(49) Project [codegen id : 18]
Output [3]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4]
Input [5]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, d_date_sk#35]

(50) Scan parquet default.customer
Output [3]: [c_customer_sk#36, c_first_name#37, c_last_name#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(51) ColumnarToRow [codegen id : 19]
Input [3]: [c_customer_sk#36, c_first_name#37, c_last_name#38]

(52) Filter [codegen id : 19]
Input [3]: [c_customer_sk#36, c_first_name#37, c_last_name#38]
Condition : isnotnull(c_customer_sk#36)

(53) Exchange
Input [3]: [c_customer_sk#36, c_first_name#37, c_last_name#38]
Arguments: hashpartitioning(c_customer_sk#36, 5), ENSURE_REQUIREMENTS, [id=#39]

(54) Sort [codegen id : 20]
Input [3]: [c_customer_sk#36, c_first_name#37, c_last_name#38]
Arguments: [c_customer_sk#36 ASC NULLS FIRST], false, 0

(55) ReusedExchange [Reuses operator id: 34]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]

(56) Sort [codegen id : 22]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: [ss_customer_sk#24 ASC NULLS FIRST], false, 0

(57) ReusedExchange [Reuses operator id: 39]
Output [1]: [c_customer_sk#29]

(58) Sort [codegen id : 24]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(59) SortMergeJoin [codegen id : 25]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(60) Project [codegen id : 25]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#29]

(61) SortAggregate
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#31]
Results [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#31 AS ssales#32]

(62) Filter [codegen id : 26]
Input [2]: [c_customer_sk#29, ssales#32]
Condition : (isnotnull(ssales#32) AND (cast(ssales#32 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#33, [id=#34] as decimal(32,6)))), DecimalType(38,8), true)))

(63) Project [codegen id : 26]
Output [1]: [c_customer_sk#29]
Input [2]: [c_customer_sk#29, ssales#32]

(64) SortMergeJoin [codegen id : 27]
Left keys [1]: [c_customer_sk#36]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(65) SortMergeJoin [codegen id : 28]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#36]
Join condition: None

(66) Project [codegen id : 28]
Output [4]: [cs_quantity#3, cs_list_price#4, c_first_name#37, c_last_name#38]
Input [6]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, c_customer_sk#36, c_first_name#37, c_last_name#38]

(67) HashAggregate [codegen id : 28]
Input [4]: [cs_quantity#3, cs_list_price#4, c_first_name#37, c_last_name#38]
Keys [2]: [c_last_name#38, c_first_name#37]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#40, isEmpty#41]
Results [4]: [c_last_name#38, c_first_name#37, sum#42, isEmpty#43]

(68) Exchange
Input [4]: [c_last_name#38, c_first_name#37, sum#42, isEmpty#43]
Arguments: hashpartitioning(c_last_name#38, c_first_name#37, 5), ENSURE_REQUIREMENTS, [id=#44]

(69) HashAggregate [codegen id : 29]
Input [4]: [c_last_name#38, c_first_name#37, sum#42, isEmpty#43]
Keys [2]: [c_last_name#38, c_first_name#37]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#45]
Results [3]: [c_last_name#38, c_first_name#37, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#45 AS sales#46]

(70) Scan parquet default.web_sales
Output [5]: [ws_item_sk#47, ws_bill_customer_sk#48, ws_quantity#49, ws_list_price#50, ws_sold_date_sk#51]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#51), dynamicpruningexpression(ws_sold_date_sk#51 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(71) ColumnarToRow [codegen id : 30]
Input [5]: [ws_item_sk#47, ws_bill_customer_sk#48, ws_quantity#49, ws_list_price#50, ws_sold_date_sk#51]

(72) Filter [codegen id : 30]
Input [5]: [ws_item_sk#47, ws_bill_customer_sk#48, ws_quantity#49, ws_list_price#50, ws_sold_date_sk#51]
Condition : isnotnull(ws_bill_customer_sk#48)

(73) Exchange
Input [5]: [ws_item_sk#47, ws_bill_customer_sk#48, ws_quantity#49, ws_list_price#50, ws_sold_date_sk#51]
Arguments: hashpartitioning(ws_item_sk#47, 5), ENSURE_REQUIREMENTS, [id=#52]

(74) Sort [codegen id : 31]
Input [5]: [ws_item_sk#47, ws_bill_customer_sk#48, ws_quantity#49, ws_list_price#50, ws_sold_date_sk#51]
Arguments: [ws_item_sk#47 ASC NULLS FIRST], false, 0

(75) ReusedExchange [Reuses operator id: 12]
Output [2]: [ss_item_sk#8, d_date#12]

(76) Sort [codegen id : 34]
Input [2]: [ss_item_sk#8, d_date#12]
Arguments: [ss_item_sk#8 ASC NULLS FIRST], false, 0

(77) ReusedExchange [Reuses operator id: 17]
Output [2]: [i_item_sk#14, i_item_desc#15]

(78) Sort [codegen id : 36]
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: [i_item_sk#14 ASC NULLS FIRST], false, 0

(79) SortMergeJoin [codegen id : 37]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#14]
Join condition: None

(80) Project [codegen id : 37]
Output [3]: [d_date#12, i_item_sk#14, substr(i_item_desc#15, 1, 30) AS _groupingexpression#53]
Input [4]: [ss_item_sk#8, d_date#12, i_item_sk#14, i_item_desc#15]

(81) HashAggregate [codegen id : 37]
Input [3]: [d_date#12, i_item_sk#14, _groupingexpression#53]
Keys [3]: [_groupingexpression#53, i_item_sk#14, d_date#12]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#18]
Results [4]: [_groupingexpression#53, i_item_sk#14, d_date#12, count#19]

(82) HashAggregate [codegen id : 37]
Input [4]: [_groupingexpression#53, i_item_sk#14, d_date#12, count#19]
Keys [3]: [_groupingexpression#53, i_item_sk#14, d_date#12]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#20]
Results [2]: [i_item_sk#14 AS item_sk#21, count(1)#20 AS cnt#22]

(83) Filter [codegen id : 37]
Input [2]: [item_sk#21, cnt#22]
Condition : (cnt#22 > 4)

(84) Project [codegen id : 37]
Output [1]: [item_sk#21]
Input [2]: [item_sk#21, cnt#22]

(85) Sort [codegen id : 37]
Input [1]: [item_sk#21]
Arguments: [item_sk#21 ASC NULLS FIRST], false, 0

(86) SortMergeJoin [codegen id : 38]
Left keys [1]: [ws_item_sk#47]
Right keys [1]: [item_sk#21]
Join condition: None

(87) Project [codegen id : 38]
Output [4]: [ws_bill_customer_sk#48, ws_quantity#49, ws_list_price#50, ws_sold_date_sk#51]
Input [5]: [ws_item_sk#47, ws_bill_customer_sk#48, ws_quantity#49, ws_list_price#50, ws_sold_date_sk#51]

(88) Exchange
Input [4]: [ws_bill_customer_sk#48, ws_quantity#49, ws_list_price#50, ws_sold_date_sk#51]
Arguments: hashpartitioning(ws_bill_customer_sk#48, 5), ENSURE_REQUIREMENTS, [id=#54]

(89) Sort [codegen id : 39]
Input [4]: [ws_bill_customer_sk#48, ws_quantity#49, ws_list_price#50, ws_sold_date_sk#51]
Arguments: [ws_bill_customer_sk#48 ASC NULLS FIRST], false, 0

(90) ReusedExchange [Reuses operator id: 34]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]

(91) Sort [codegen id : 41]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: [ss_customer_sk#24 ASC NULLS FIRST], false, 0

(92) ReusedExchange [Reuses operator id: 39]
Output [1]: [c_customer_sk#29]

(93) Sort [codegen id : 43]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(94) SortMergeJoin [codegen id : 44]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(95) Project [codegen id : 44]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#29]

(96) SortAggregate
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#31]
Results [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#31 AS ssales#32]

(97) Filter [codegen id : 45]
Input [2]: [c_customer_sk#29, ssales#32]
Condition : (isnotnull(ssales#32) AND (cast(ssales#32 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#33, [id=#34] as decimal(32,6)))), DecimalType(38,8), true)))

(98) Project [codegen id : 45]
Output [1]: [c_customer_sk#29]
Input [2]: [c_customer_sk#29, ssales#32]

(99) SortMergeJoin [codegen id : 47]
Left keys [1]: [ws_bill_customer_sk#48]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(100) ReusedExchange [Reuses operator id: 126]
Output [1]: [d_date_sk#55]

(101) BroadcastHashJoin [codegen id : 47]
Left keys [1]: [ws_sold_date_sk#51]
Right keys [1]: [d_date_sk#55]
Join condition: None

(102) Project [codegen id : 47]
Output [3]: [ws_bill_customer_sk#48, ws_quantity#49, ws_list_price#50]
Input [5]: [ws_bill_customer_sk#48, ws_quantity#49, ws_list_price#50, ws_sold_date_sk#51, d_date_sk#55]

(103) ReusedExchange [Reuses operator id: 53]
Output [3]: [c_customer_sk#56, c_first_name#57, c_last_name#58]

(104) Sort [codegen id : 49]
Input [3]: [c_customer_sk#56, c_first_name#57, c_last_name#58]
Arguments: [c_customer_sk#56 ASC NULLS FIRST], false, 0

(105) ReusedExchange [Reuses operator id: 34]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]

(106) Sort [codegen id : 51]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: [ss_customer_sk#24 ASC NULLS FIRST], false, 0

(107) ReusedExchange [Reuses operator id: 39]
Output [1]: [c_customer_sk#29]

(108) Sort [codegen id : 53]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(109) SortMergeJoin [codegen id : 54]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(110) Project [codegen id : 54]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#29]

(111) SortAggregate
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#31]
Results [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#31 AS ssales#32]

(112) Filter [codegen id : 55]
Input [2]: [c_customer_sk#29, ssales#32]
Condition : (isnotnull(ssales#32) AND (cast(ssales#32 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#33, [id=#34] as decimal(32,6)))), DecimalType(38,8), true)))

(113) Project [codegen id : 55]
Output [1]: [c_customer_sk#29]
Input [2]: [c_customer_sk#29, ssales#32]

(114) SortMergeJoin [codegen id : 56]
Left keys [1]: [c_customer_sk#56]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(115) SortMergeJoin [codegen id : 57]
Left keys [1]: [ws_bill_customer_sk#48]
Right keys [1]: [c_customer_sk#56]
Join condition: None

(116) Project [codegen id : 57]
Output [4]: [ws_quantity#49, ws_list_price#50, c_first_name#57, c_last_name#58]
Input [6]: [ws_bill_customer_sk#48, ws_quantity#49, ws_list_price#50, c_customer_sk#56, c_first_name#57, c_last_name#58]

(117) HashAggregate [codegen id : 57]
Input [4]: [ws_quantity#49, ws_list_price#50, c_first_name#57, c_last_name#58]
Keys [2]: [c_last_name#58, c_first_name#57]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#59, isEmpty#60]
Results [4]: [c_last_name#58, c_first_name#57, sum#61, isEmpty#62]

(118) Exchange
Input [4]: [c_last_name#58, c_first_name#57, sum#61, isEmpty#62]
Arguments: hashpartitioning(c_last_name#58, c_first_name#57, 5), ENSURE_REQUIREMENTS, [id=#63]

(119) HashAggregate [codegen id : 58]
Input [4]: [c_last_name#58, c_first_name#57, sum#61, isEmpty#62]
Keys [2]: [c_last_name#58, c_first_name#57]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#64]
Results [3]: [c_last_name#58, c_first_name#57, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#49 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#50 as decimal(12,2)))), DecimalType(18,2), true))#64 AS sales#65]

(120) Union

(121) TakeOrderedAndProject
Input [3]: [c_last_name#38, c_first_name#37, sales#46]
Arguments: 100, [c_last_name#38 ASC NULLS FIRST, c_first_name#37 ASC NULLS FIRST, sales#46 ASC NULLS FIRST], [c_last_name#38, c_first_name#37, sales#46]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (126)
+- * Project (125)
   +- * Filter (124)
      +- * ColumnarToRow (123)
         +- Scan parquet default.date_dim (122)


(122) Scan parquet default.date_dim
Output [3]: [d_date_sk#35, d_year#66, d_moy#67]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(123) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#35, d_year#66, d_moy#67]

(124) Filter [codegen id : 1]
Input [3]: [d_date_sk#35, d_year#66, d_moy#67]
Condition : ((((isnotnull(d_year#66) AND isnotnull(d_moy#67)) AND (d_year#66 = 2000)) AND (d_moy#67 = 2)) AND isnotnull(d_date_sk#35))

(125) Project [codegen id : 1]
Output [1]: [d_date_sk#35]
Input [3]: [d_date_sk#35, d_year#66, d_moy#67]

(126) BroadcastExchange
Input [1]: [d_date_sk#35]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#68]

Subquery:2 Hosting operator id = 6 Hosting Expression = ss_sold_date_sk#9 IN dynamicpruning#10
BroadcastExchange (131)
+- * Project (130)
   +- * Filter (129)
      +- * ColumnarToRow (128)
         +- Scan parquet default.date_dim (127)


(127) Scan parquet default.date_dim
Output [3]: [d_date_sk#11, d_date#12, d_year#69]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(128) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#11, d_date#12, d_year#69]

(129) Filter [codegen id : 1]
Input [3]: [d_date_sk#11, d_date#12, d_year#69]
Condition : (d_year#69 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#11))

(130) Project [codegen id : 1]
Output [2]: [d_date_sk#11, d_date#12]
Input [3]: [d_date_sk#11, d_date#12, d_year#69]

(131) BroadcastExchange
Input [2]: [d_date_sk#11, d_date#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#70]

Subquery:3 Hosting operator id = 44 Hosting Expression = Subquery scalar-subquery#33, [id=#34]
* HashAggregate (147)
+- Exchange (146)
   +- * HashAggregate (145)
      +- SortAggregate (144)
         +- * Project (143)
            +- * SortMergeJoin Inner (142)
               :- * Sort (139)
               :  +- Exchange (138)
               :     +- * Project (137)
               :        +- * BroadcastHashJoin Inner BuildRight (136)
               :           :- * Filter (134)
               :           :  +- * ColumnarToRow (133)
               :           :     +- Scan parquet default.store_sales (132)
               :           +- ReusedExchange (135)
               +- * Sort (141)
                  +- ReusedExchange (140)


(132) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#71, ss_quantity#72, ss_sales_price#73, ss_sold_date_sk#74]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#74), dynamicpruningexpression(ss_sold_date_sk#74 IN dynamicpruning#75)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(133) ColumnarToRow [codegen id : 2]
Input [4]: [ss_customer_sk#71, ss_quantity#72, ss_sales_price#73, ss_sold_date_sk#74]

(134) Filter [codegen id : 2]
Input [4]: [ss_customer_sk#71, ss_quantity#72, ss_sales_price#73, ss_sold_date_sk#74]
Condition : isnotnull(ss_customer_sk#71)

(135) ReusedExchange [Reuses operator id: 152]
Output [1]: [d_date_sk#76]

(136) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#74]
Right keys [1]: [d_date_sk#76]
Join condition: None

(137) Project [codegen id : 2]
Output [3]: [ss_customer_sk#71, ss_quantity#72, ss_sales_price#73]
Input [5]: [ss_customer_sk#71, ss_quantity#72, ss_sales_price#73, ss_sold_date_sk#74, d_date_sk#76]

(138) Exchange
Input [3]: [ss_customer_sk#71, ss_quantity#72, ss_sales_price#73]
Arguments: hashpartitioning(ss_customer_sk#71, 5), ENSURE_REQUIREMENTS, [id=#77]

(139) Sort [codegen id : 3]
Input [3]: [ss_customer_sk#71, ss_quantity#72, ss_sales_price#73]
Arguments: [ss_customer_sk#71 ASC NULLS FIRST], false, 0

(140) ReusedExchange [Reuses operator id: 39]
Output [1]: [c_customer_sk#78]

(141) Sort [codegen id : 5]
Input [1]: [c_customer_sk#78]
Arguments: [c_customer_sk#78 ASC NULLS FIRST], false, 0

(142) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#71]
Right keys [1]: [c_customer_sk#78]
Join condition: None

(143) Project [codegen id : 6]
Output [3]: [ss_quantity#72, ss_sales_price#73, c_customer_sk#78]
Input [4]: [ss_customer_sk#71, ss_quantity#72, ss_sales_price#73, c_customer_sk#78]

(144) SortAggregate
Input [3]: [ss_quantity#72, ss_sales_price#73, c_customer_sk#78]
Keys [1]: [c_customer_sk#78]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#72 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#73 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#72 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#73 as decimal(12,2)))), DecimalType(18,2), true))#79]
Results [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#72 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#73 as decimal(12,2)))), DecimalType(18,2), true))#79 AS csales#80]

(145) HashAggregate [codegen id : 7]
Input [1]: [csales#80]
Keys: []
Functions [1]: [partial_max(csales#80)]
Aggregate Attributes [1]: [max#81]
Results [1]: [max#82]

(146) Exchange
Input [1]: [max#82]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#83]

(147) HashAggregate [codegen id : 8]
Input [1]: [max#82]
Keys: []
Functions [1]: [max(csales#80)]
Aggregate Attributes [1]: [max(csales#80)#84]
Results [1]: [max(csales#80)#84 AS tpcds_cmax#85]

Subquery:4 Hosting operator id = 132 Hosting Expression = ss_sold_date_sk#74 IN dynamicpruning#75
BroadcastExchange (152)
+- * Project (151)
   +- * Filter (150)
      +- * ColumnarToRow (149)
         +- Scan parquet default.date_dim (148)


(148) Scan parquet default.date_dim
Output [2]: [d_date_sk#76, d_year#86]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(149) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#76, d_year#86]

(150) Filter [codegen id : 1]
Input [2]: [d_date_sk#76, d_year#86]
Condition : (d_year#86 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#76))

(151) Project [codegen id : 1]
Output [1]: [d_date_sk#76]
Input [2]: [d_date_sk#76, d_year#86]

(152) BroadcastExchange
Input [1]: [d_date_sk#76]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#87]

Subquery:5 Hosting operator id = 62 Hosting Expression = ReusedSubquery Subquery scalar-subquery#33, [id=#34]

Subquery:6 Hosting operator id = 70 Hosting Expression = ws_sold_date_sk#51 IN dynamicpruning#6

Subquery:7 Hosting operator id = 97 Hosting Expression = ReusedSubquery Subquery scalar-subquery#33, [id=#34]

Subquery:8 Hosting operator id = 112 Hosting Expression = ReusedSubquery Subquery scalar-subquery#33, [id=#34]


