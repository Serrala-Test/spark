== Physical Plan ==
TakeOrderedAndProject (105)
+- Union (104)
   :- * HashAggregate (61)
   :  +- Exchange (60)
   :     +- * HashAggregate (59)
   :        +- * Project (58)
   :           +- * SortMergeJoin Inner (57)
   :              :- * Project (51)
   :              :  +- * BroadcastHashJoin Inner BuildRight (50)
   :              :     :- * SortMergeJoin LeftSemi (48)
   :              :     :  :- * Sort (29)
   :              :     :  :  +- Exchange (28)
   :              :     :  :     +- * Project (27)
   :              :     :  :        +- * SortMergeJoin LeftSemi (26)
   :              :     :  :           :- * Sort (5)
   :              :     :  :           :  +- Exchange (4)
   :              :     :  :           :     +- * Filter (3)
   :              :     :  :           :        +- * ColumnarToRow (2)
   :              :     :  :           :           +- Scan parquet default.catalog_sales (1)
   :              :     :  :           +- * Sort (25)
   :              :     :  :              +- * Project (24)
   :              :     :  :                 +- * Filter (23)
   :              :     :  :                    +- * HashAggregate (22)
   :              :     :  :                       +- * HashAggregate (21)
   :              :     :  :                          +- * Project (20)
   :              :     :  :                             +- * SortMergeJoin Inner (19)
   :              :     :  :                                :- * Sort (13)
   :              :     :  :                                :  +- Exchange (12)
   :              :     :  :                                :     +- * Project (11)
   :              :     :  :                                :        +- * BroadcastHashJoin Inner BuildRight (10)
   :              :     :  :                                :           :- * Filter (8)
   :              :     :  :                                :           :  +- * ColumnarToRow (7)
   :              :     :  :                                :           :     +- Scan parquet default.store_sales (6)
   :              :     :  :                                :           +- ReusedExchange (9)
   :              :     :  :                                +- * Sort (18)
   :              :     :  :                                   +- Exchange (17)
   :              :     :  :                                      +- * Filter (16)
   :              :     :  :                                         +- * ColumnarToRow (15)
   :              :     :  :                                            +- Scan parquet default.item (14)
   :              :     :  +- * Sort (47)
   :              :     :     +- * Project (46)
   :              :     :        +- * Filter (45)
   :              :     :           +- * HashAggregate (44)
   :              :     :              +- * HashAggregate (43)
   :              :     :                 +- * Project (42)
   :              :     :                    +- * SortMergeJoin Inner (41)
   :              :     :                       :- * Sort (35)
   :              :     :                       :  +- Exchange (34)
   :              :     :                       :     +- * Project (33)
   :              :     :                       :        +- * Filter (32)
   :              :     :                       :           +- * ColumnarToRow (31)
   :              :     :                       :              +- Scan parquet default.store_sales (30)
   :              :     :                       +- * Sort (40)
   :              :     :                          +- Exchange (39)
   :              :     :                             +- * Filter (38)
   :              :     :                                +- * ColumnarToRow (37)
   :              :     :                                   +- Scan parquet default.customer (36)
   :              :     +- ReusedExchange (49)
   :              +- * Sort (56)
   :                 +- Exchange (55)
   :                    +- * Filter (54)
   :                       +- * ColumnarToRow (53)
   :                          +- Scan parquet default.customer (52)
   +- * HashAggregate (103)
      +- Exchange (102)
         +- * HashAggregate (101)
            +- * Project (100)
               +- * SortMergeJoin Inner (99)
                  :- * Project (96)
                  :  +- * BroadcastHashJoin Inner BuildRight (95)
                  :     :- * SortMergeJoin LeftSemi (93)
                  :     :  :- * Sort (81)
                  :     :  :  +- Exchange (80)
                  :     :  :     +- * Project (79)
                  :     :  :        +- * SortMergeJoin LeftSemi (78)
                  :     :  :           :- * Sort (66)
                  :     :  :           :  +- Exchange (65)
                  :     :  :           :     +- * Filter (64)
                  :     :  :           :        +- * ColumnarToRow (63)
                  :     :  :           :           +- Scan parquet default.web_sales (62)
                  :     :  :           +- * Sort (77)
                  :     :  :              +- * Project (76)
                  :     :  :                 +- * Filter (75)
                  :     :  :                    +- * HashAggregate (74)
                  :     :  :                       +- * HashAggregate (73)
                  :     :  :                          +- * Project (72)
                  :     :  :                             +- * SortMergeJoin Inner (71)
                  :     :  :                                :- * Sort (68)
                  :     :  :                                :  +- ReusedExchange (67)
                  :     :  :                                +- * Sort (70)
                  :     :  :                                   +- ReusedExchange (69)
                  :     :  +- * Sort (92)
                  :     :     +- * Project (91)
                  :     :        +- * Filter (90)
                  :     :           +- * HashAggregate (89)
                  :     :              +- * HashAggregate (88)
                  :     :                 +- * Project (87)
                  :     :                    +- * SortMergeJoin Inner (86)
                  :     :                       :- * Sort (83)
                  :     :                       :  +- ReusedExchange (82)
                  :     :                       +- * Sort (85)
                  :     :                          +- ReusedExchange (84)
                  :     +- ReusedExchange (94)
                  +- * Sort (98)
                     +- ReusedExchange (97)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(3) Filter [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Condition : isnotnull(cs_bill_customer_sk#1)

(4) Exchange
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#7]

(5) Sort [codegen id : 2]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_item_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [2]: [ss_item_sk#8, ss_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#9), dynamicpruningexpression(ss_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ss_item_sk#8, ss_sold_date_sk#9]

(8) Filter [codegen id : 4]
Input [2]: [ss_item_sk#8, ss_sold_date_sk#9]
Condition : isnotnull(ss_item_sk#8)

(9) ReusedExchange [Reuses operator id: 115]
Output [2]: [d_date_sk#11, d_date#12]

(10) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#9]
Right keys [1]: [d_date_sk#11]
Join condition: None

(11) Project [codegen id : 4]
Output [2]: [ss_item_sk#8, d_date#12]
Input [4]: [ss_item_sk#8, ss_sold_date_sk#9, d_date_sk#11, d_date#12]

(12) Exchange
Input [2]: [ss_item_sk#8, d_date#12]
Arguments: hashpartitioning(ss_item_sk#8, 5), ENSURE_REQUIREMENTS, [id=#13]

(13) Sort [codegen id : 5]
Input [2]: [ss_item_sk#8, d_date#12]
Arguments: [ss_item_sk#8 ASC NULLS FIRST], false, 0

(14) Scan parquet default.item
Output [2]: [i_item_sk#14, i_item_desc#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(15) ColumnarToRow [codegen id : 6]
Input [2]: [i_item_sk#14, i_item_desc#15]

(16) Filter [codegen id : 6]
Input [2]: [i_item_sk#14, i_item_desc#15]
Condition : isnotnull(i_item_sk#14)

(17) Exchange
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: hashpartitioning(i_item_sk#14, 5), ENSURE_REQUIREMENTS, [id=#16]

(18) Sort [codegen id : 7]
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: [i_item_sk#14 ASC NULLS FIRST], false, 0

(19) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#14]
Join condition: None

(20) Project [codegen id : 8]
Output [3]: [d_date#12, i_item_sk#14, substr(i_item_desc#15, 1, 30) AS _groupingexpression#17]
Input [4]: [ss_item_sk#8, d_date#12, i_item_sk#14, i_item_desc#15]

(21) HashAggregate [codegen id : 8]
Input [3]: [d_date#12, i_item_sk#14, _groupingexpression#17]
Keys [3]: [_groupingexpression#17, i_item_sk#14, d_date#12]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#18]
Results [4]: [_groupingexpression#17, i_item_sk#14, d_date#12, count#19]

(22) HashAggregate [codegen id : 8]
Input [4]: [_groupingexpression#17, i_item_sk#14, d_date#12, count#19]
Keys [3]: [_groupingexpression#17, i_item_sk#14, d_date#12]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#20]
Results [2]: [i_item_sk#14 AS item_sk#21, count(1)#20 AS cnt#22]

(23) Filter [codegen id : 8]
Input [2]: [item_sk#21, cnt#22]
Condition : (cnt#22 > 4)

(24) Project [codegen id : 8]
Output [1]: [item_sk#21]
Input [2]: [item_sk#21, cnt#22]

(25) Sort [codegen id : 8]
Input [1]: [item_sk#21]
Arguments: [item_sk#21 ASC NULLS FIRST], false, 0

(26) SortMergeJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#21]
Join condition: None

(27) Project [codegen id : 9]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(28) Exchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#23]

(29) Sort [codegen id : 10]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(30) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(31) ColumnarToRow [codegen id : 11]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]

(32) Filter [codegen id : 11]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]
Condition : isnotnull(ss_customer_sk#24)

(33) Project [codegen id : 11]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, ss_sold_date_sk#27]

(34) Exchange
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: hashpartitioning(ss_customer_sk#24, 5), ENSURE_REQUIREMENTS, [id=#28]

(35) Sort [codegen id : 12]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: [ss_customer_sk#24 ASC NULLS FIRST], false, 0

(36) Scan parquet default.customer
Output [1]: [c_customer_sk#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(37) ColumnarToRow [codegen id : 13]
Input [1]: [c_customer_sk#29]

(38) Filter [codegen id : 13]
Input [1]: [c_customer_sk#29]
Condition : isnotnull(c_customer_sk#29)

(39) Exchange
Input [1]: [c_customer_sk#29]
Arguments: hashpartitioning(c_customer_sk#29, 5), ENSURE_REQUIREMENTS, [id=#30]

(40) Sort [codegen id : 14]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(41) SortMergeJoin [codegen id : 15]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(42) Project [codegen id : 15]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#29]

(43) HashAggregate [codegen id : 15]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#31, isEmpty#32]
Results [3]: [c_customer_sk#29, sum#33, isEmpty#34]

(44) HashAggregate [codegen id : 15]
Input [3]: [c_customer_sk#29, sum#33, isEmpty#34]
Keys [1]: [c_customer_sk#29]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35]
Results [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35 AS ssales#36]

(45) Filter [codegen id : 15]
Input [2]: [c_customer_sk#29, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8))))

(46) Project [codegen id : 15]
Output [1]: [c_customer_sk#29]
Input [2]: [c_customer_sk#29, ssales#36]

(47) Sort [codegen id : 15]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(48) SortMergeJoin [codegen id : 17]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(49) ReusedExchange [Reuses operator id: 110]
Output [1]: [d_date_sk#39]

(50) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#39]
Join condition: None

(51) Project [codegen id : 17]
Output [3]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4]
Input [5]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, d_date_sk#39]

(52) Scan parquet default.customer
Output [3]: [c_customer_sk#40, c_first_name#41, c_last_name#42]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(53) ColumnarToRow [codegen id : 18]
Input [3]: [c_customer_sk#40, c_first_name#41, c_last_name#42]

(54) Filter [codegen id : 18]
Input [3]: [c_customer_sk#40, c_first_name#41, c_last_name#42]
Condition : isnotnull(c_customer_sk#40)

(55) Exchange
Input [3]: [c_customer_sk#40, c_first_name#41, c_last_name#42]
Arguments: hashpartitioning(c_customer_sk#40, 5), ENSURE_REQUIREMENTS, [id=#43]

(56) Sort [codegen id : 19]
Input [3]: [c_customer_sk#40, c_first_name#41, c_last_name#42]
Arguments: [c_customer_sk#40 ASC NULLS FIRST], false, 0

(57) SortMergeJoin [codegen id : 20]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#40]
Join condition: None

(58) Project [codegen id : 20]
Output [4]: [cs_quantity#3, cs_list_price#4, c_first_name#41, c_last_name#42]
Input [6]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, c_customer_sk#40, c_first_name#41, c_last_name#42]

(59) HashAggregate [codegen id : 20]
Input [4]: [cs_quantity#3, cs_list_price#4, c_first_name#41, c_last_name#42]
Keys [2]: [c_last_name#42, c_first_name#41]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cs_quantity#3 as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#44, isEmpty#45]
Results [4]: [c_last_name#42, c_first_name#41, sum#46, isEmpty#47]

(60) Exchange
Input [4]: [c_last_name#42, c_first_name#41, sum#46, isEmpty#47]
Arguments: hashpartitioning(c_last_name#42, c_first_name#41, 5), ENSURE_REQUIREMENTS, [id=#48]

(61) HashAggregate [codegen id : 21]
Input [4]: [c_last_name#42, c_first_name#41, sum#46, isEmpty#47]
Keys [2]: [c_last_name#42, c_first_name#41]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cs_quantity#3 as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cs_quantity#3 as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2)))#49]
Results [3]: [c_last_name#42, c_first_name#41, sum(CheckOverflow((promote_precision(cast(cs_quantity#3 as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2)))#49 AS sales#50]

(62) Scan parquet default.web_sales
Output [5]: [ws_item_sk#51, ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#55), dynamicpruningexpression(ws_sold_date_sk#55 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(63) ColumnarToRow [codegen id : 22]
Input [5]: [ws_item_sk#51, ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]

(64) Filter [codegen id : 22]
Input [5]: [ws_item_sk#51, ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Condition : isnotnull(ws_bill_customer_sk#52)

(65) Exchange
Input [5]: [ws_item_sk#51, ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Arguments: hashpartitioning(ws_item_sk#51, 5), ENSURE_REQUIREMENTS, [id=#56]

(66) Sort [codegen id : 23]
Input [5]: [ws_item_sk#51, ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Arguments: [ws_item_sk#51 ASC NULLS FIRST], false, 0

(67) ReusedExchange [Reuses operator id: 12]
Output [2]: [ss_item_sk#8, d_date#12]

(68) Sort [codegen id : 26]
Input [2]: [ss_item_sk#8, d_date#12]
Arguments: [ss_item_sk#8 ASC NULLS FIRST], false, 0

(69) ReusedExchange [Reuses operator id: 17]
Output [2]: [i_item_sk#14, i_item_desc#15]

(70) Sort [codegen id : 28]
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: [i_item_sk#14 ASC NULLS FIRST], false, 0

(71) SortMergeJoin [codegen id : 29]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#14]
Join condition: None

(72) Project [codegen id : 29]
Output [3]: [d_date#12, i_item_sk#14, substr(i_item_desc#15, 1, 30) AS _groupingexpression#17]
Input [4]: [ss_item_sk#8, d_date#12, i_item_sk#14, i_item_desc#15]

(73) HashAggregate [codegen id : 29]
Input [3]: [d_date#12, i_item_sk#14, _groupingexpression#17]
Keys [3]: [_groupingexpression#17, i_item_sk#14, d_date#12]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#18]
Results [4]: [_groupingexpression#17, i_item_sk#14, d_date#12, count#19]

(74) HashAggregate [codegen id : 29]
Input [4]: [_groupingexpression#17, i_item_sk#14, d_date#12, count#19]
Keys [3]: [_groupingexpression#17, i_item_sk#14, d_date#12]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#20]
Results [2]: [i_item_sk#14 AS item_sk#21, count(1)#20 AS cnt#22]

(75) Filter [codegen id : 29]
Input [2]: [item_sk#21, cnt#22]
Condition : (cnt#22 > 4)

(76) Project [codegen id : 29]
Output [1]: [item_sk#21]
Input [2]: [item_sk#21, cnt#22]

(77) Sort [codegen id : 29]
Input [1]: [item_sk#21]
Arguments: [item_sk#21 ASC NULLS FIRST], false, 0

(78) SortMergeJoin [codegen id : 30]
Left keys [1]: [ws_item_sk#51]
Right keys [1]: [item_sk#21]
Join condition: None

(79) Project [codegen id : 30]
Output [4]: [ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Input [5]: [ws_item_sk#51, ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]

(80) Exchange
Input [4]: [ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Arguments: hashpartitioning(ws_bill_customer_sk#52, 5), ENSURE_REQUIREMENTS, [id=#57]

(81) Sort [codegen id : 31]
Input [4]: [ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55]
Arguments: [ws_bill_customer_sk#52 ASC NULLS FIRST], false, 0

(82) ReusedExchange [Reuses operator id: 34]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]

(83) Sort [codegen id : 33]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: [ss_customer_sk#24 ASC NULLS FIRST], false, 0

(84) ReusedExchange [Reuses operator id: 39]
Output [1]: [c_customer_sk#29]

(85) Sort [codegen id : 35]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(86) SortMergeJoin [codegen id : 36]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(87) Project [codegen id : 36]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#29]

(88) HashAggregate [codegen id : 36]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#29]
Keys [1]: [c_customer_sk#29]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#58, isEmpty#59]
Results [3]: [c_customer_sk#29, sum#60, isEmpty#61]

(89) HashAggregate [codegen id : 36]
Input [3]: [c_customer_sk#29, sum#60, isEmpty#61]
Keys [1]: [c_customer_sk#29]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35]
Results [2]: [c_customer_sk#29, sum(CheckOverflow((promote_precision(cast(ss_quantity#25 as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2)))#35 AS ssales#36]

(90) Filter [codegen id : 36]
Input [2]: [c_customer_sk#29, ssales#36]
Condition : (isnotnull(ssales#36) AND (cast(ssales#36 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#37, [id=#38] as decimal(32,6)))), DecimalType(38,8))))

(91) Project [codegen id : 36]
Output [1]: [c_customer_sk#29]
Input [2]: [c_customer_sk#29, ssales#36]

(92) Sort [codegen id : 36]
Input [1]: [c_customer_sk#29]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(93) SortMergeJoin [codegen id : 38]
Left keys [1]: [ws_bill_customer_sk#52]
Right keys [1]: [c_customer_sk#29]
Join condition: None

(94) ReusedExchange [Reuses operator id: 110]
Output [1]: [d_date_sk#62]

(95) BroadcastHashJoin [codegen id : 38]
Left keys [1]: [ws_sold_date_sk#55]
Right keys [1]: [d_date_sk#62]
Join condition: None

(96) Project [codegen id : 38]
Output [3]: [ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54]
Input [5]: [ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, ws_sold_date_sk#55, d_date_sk#62]

(97) ReusedExchange [Reuses operator id: 55]
Output [3]: [c_customer_sk#63, c_first_name#64, c_last_name#65]

(98) Sort [codegen id : 40]
Input [3]: [c_customer_sk#63, c_first_name#64, c_last_name#65]
Arguments: [c_customer_sk#63 ASC NULLS FIRST], false, 0

(99) SortMergeJoin [codegen id : 41]
Left keys [1]: [ws_bill_customer_sk#52]
Right keys [1]: [c_customer_sk#63]
Join condition: None

(100) Project [codegen id : 41]
Output [4]: [ws_quantity#53, ws_list_price#54, c_first_name#64, c_last_name#65]
Input [6]: [ws_bill_customer_sk#52, ws_quantity#53, ws_list_price#54, c_customer_sk#63, c_first_name#64, c_last_name#65]

(101) HashAggregate [codegen id : 41]
Input [4]: [ws_quantity#53, ws_list_price#54, c_first_name#64, c_last_name#65]
Keys [2]: [c_last_name#65, c_first_name#64]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(ws_quantity#53 as decimal(12,2))) * promote_precision(cast(ws_list_price#54 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#66, isEmpty#67]
Results [4]: [c_last_name#65, c_first_name#64, sum#68, isEmpty#69]

(102) Exchange
Input [4]: [c_last_name#65, c_first_name#64, sum#68, isEmpty#69]
Arguments: hashpartitioning(c_last_name#65, c_first_name#64, 5), ENSURE_REQUIREMENTS, [id=#70]

(103) HashAggregate [codegen id : 42]
Input [4]: [c_last_name#65, c_first_name#64, sum#68, isEmpty#69]
Keys [2]: [c_last_name#65, c_first_name#64]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(ws_quantity#53 as decimal(12,2))) * promote_precision(cast(ws_list_price#54 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(ws_quantity#53 as decimal(12,2))) * promote_precision(cast(ws_list_price#54 as decimal(12,2)))), DecimalType(18,2)))#71]
Results [3]: [c_last_name#65, c_first_name#64, sum(CheckOverflow((promote_precision(cast(ws_quantity#53 as decimal(12,2))) * promote_precision(cast(ws_list_price#54 as decimal(12,2)))), DecimalType(18,2)))#71 AS sales#72]

(104) Union

(105) TakeOrderedAndProject
Input [3]: [c_last_name#42, c_first_name#41, sales#50]
Arguments: 100, [c_last_name#42 ASC NULLS FIRST, c_first_name#41 ASC NULLS FIRST, sales#50 ASC NULLS FIRST], [c_last_name#42, c_first_name#41, sales#50]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (110)
+- * Project (109)
   +- * Filter (108)
      +- * ColumnarToRow (107)
         +- Scan parquet default.date_dim (106)


(106) Scan parquet default.date_dim
Output [3]: [d_date_sk#39, d_year#73, d_moy#74]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(107) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#39, d_year#73, d_moy#74]

(108) Filter [codegen id : 1]
Input [3]: [d_date_sk#39, d_year#73, d_moy#74]
Condition : ((((isnotnull(d_year#73) AND isnotnull(d_moy#74)) AND (d_year#73 = 2000)) AND (d_moy#74 = 2)) AND isnotnull(d_date_sk#39))

(109) Project [codegen id : 1]
Output [1]: [d_date_sk#39]
Input [3]: [d_date_sk#39, d_year#73, d_moy#74]

(110) BroadcastExchange
Input [1]: [d_date_sk#39]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#75]

Subquery:2 Hosting operator id = 6 Hosting Expression = ss_sold_date_sk#9 IN dynamicpruning#10
BroadcastExchange (115)
+- * Project (114)
   +- * Filter (113)
      +- * ColumnarToRow (112)
         +- Scan parquet default.date_dim (111)


(111) Scan parquet default.date_dim
Output [3]: [d_date_sk#11, d_date#12, d_year#76]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(112) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#11, d_date#12, d_year#76]

(113) Filter [codegen id : 1]
Input [3]: [d_date_sk#11, d_date#12, d_year#76]
Condition : (d_year#76 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#11))

(114) Project [codegen id : 1]
Output [2]: [d_date_sk#11, d_date#12]
Input [3]: [d_date_sk#11, d_date#12, d_year#76]

(115) BroadcastExchange
Input [2]: [d_date_sk#11, d_date#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#77]

Subquery:3 Hosting operator id = 45 Hosting Expression = Subquery scalar-subquery#37, [id=#38]
* HashAggregate (132)
+- Exchange (131)
   +- * HashAggregate (130)
      +- * HashAggregate (129)
         +- * HashAggregate (128)
            +- * Project (127)
               +- * SortMergeJoin Inner (126)
                  :- * Sort (123)
                  :  +- Exchange (122)
                  :     +- * Project (121)
                  :        +- * BroadcastHashJoin Inner BuildRight (120)
                  :           :- * Filter (118)
                  :           :  +- * ColumnarToRow (117)
                  :           :     +- Scan parquet default.store_sales (116)
                  :           +- ReusedExchange (119)
                  +- * Sort (125)
                     +- ReusedExchange (124)


(116) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#78, ss_quantity#79, ss_sales_price#80, ss_sold_date_sk#81]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#81), dynamicpruningexpression(ss_sold_date_sk#81 IN dynamicpruning#82)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(117) ColumnarToRow [codegen id : 2]
Input [4]: [ss_customer_sk#78, ss_quantity#79, ss_sales_price#80, ss_sold_date_sk#81]

(118) Filter [codegen id : 2]
Input [4]: [ss_customer_sk#78, ss_quantity#79, ss_sales_price#80, ss_sold_date_sk#81]
Condition : isnotnull(ss_customer_sk#78)

(119) ReusedExchange [Reuses operator id: 137]
Output [1]: [d_date_sk#83]

(120) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#81]
Right keys [1]: [d_date_sk#83]
Join condition: None

(121) Project [codegen id : 2]
Output [3]: [ss_customer_sk#78, ss_quantity#79, ss_sales_price#80]
Input [5]: [ss_customer_sk#78, ss_quantity#79, ss_sales_price#80, ss_sold_date_sk#81, d_date_sk#83]

(122) Exchange
Input [3]: [ss_customer_sk#78, ss_quantity#79, ss_sales_price#80]
Arguments: hashpartitioning(ss_customer_sk#78, 5), ENSURE_REQUIREMENTS, [id=#84]

(123) Sort [codegen id : 3]
Input [3]: [ss_customer_sk#78, ss_quantity#79, ss_sales_price#80]
Arguments: [ss_customer_sk#78 ASC NULLS FIRST], false, 0

(124) ReusedExchange [Reuses operator id: 39]
Output [1]: [c_customer_sk#85]

(125) Sort [codegen id : 5]
Input [1]: [c_customer_sk#85]
Arguments: [c_customer_sk#85 ASC NULLS FIRST], false, 0

(126) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#78]
Right keys [1]: [c_customer_sk#85]
Join condition: None

(127) Project [codegen id : 6]
Output [3]: [ss_quantity#79, ss_sales_price#80, c_customer_sk#85]
Input [4]: [ss_customer_sk#78, ss_quantity#79, ss_sales_price#80, c_customer_sk#85]

(128) HashAggregate [codegen id : 6]
Input [3]: [ss_quantity#79, ss_sales_price#80, c_customer_sk#85]
Keys [1]: [c_customer_sk#85]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(ss_quantity#79 as decimal(12,2))) * promote_precision(cast(ss_sales_price#80 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [2]: [sum#86, isEmpty#87]
Results [3]: [c_customer_sk#85, sum#88, isEmpty#89]

(129) HashAggregate [codegen id : 6]
Input [3]: [c_customer_sk#85, sum#88, isEmpty#89]
Keys [1]: [c_customer_sk#85]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#79 as decimal(12,2))) * promote_precision(cast(ss_sales_price#80 as decimal(12,2)))), DecimalType(18,2)))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#79 as decimal(12,2))) * promote_precision(cast(ss_sales_price#80 as decimal(12,2)))), DecimalType(18,2)))#90]
Results [1]: [sum(CheckOverflow((promote_precision(cast(ss_quantity#79 as decimal(12,2))) * promote_precision(cast(ss_sales_price#80 as decimal(12,2)))), DecimalType(18,2)))#90 AS csales#91]

(130) HashAggregate [codegen id : 6]
Input [1]: [csales#91]
Keys: []
Functions [1]: [partial_max(csales#91)]
Aggregate Attributes [1]: [max#92]
Results [1]: [max#93]

(131) Exchange
Input [1]: [max#93]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#94]

(132) HashAggregate [codegen id : 7]
Input [1]: [max#93]
Keys: []
Functions [1]: [max(csales#91)]
Aggregate Attributes [1]: [max(csales#91)#95]
Results [1]: [max(csales#91)#95 AS tpcds_cmax#96]

Subquery:4 Hosting operator id = 116 Hosting Expression = ss_sold_date_sk#81 IN dynamicpruning#82
BroadcastExchange (137)
+- * Project (136)
   +- * Filter (135)
      +- * ColumnarToRow (134)
         +- Scan parquet default.date_dim (133)


(133) Scan parquet default.date_dim
Output [2]: [d_date_sk#83, d_year#97]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(134) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#83, d_year#97]

(135) Filter [codegen id : 1]
Input [2]: [d_date_sk#83, d_year#97]
Condition : (d_year#97 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#83))

(136) Project [codegen id : 1]
Output [1]: [d_date_sk#83]
Input [2]: [d_date_sk#83, d_year#97]

(137) BroadcastExchange
Input [1]: [d_date_sk#83]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#98]

Subquery:5 Hosting operator id = 62 Hosting Expression = ws_sold_date_sk#55 IN dynamicpruning#6

Subquery:6 Hosting operator id = 90 Hosting Expression = ReusedSubquery Subquery scalar-subquery#37, [id=#38]


