== Physical Plan ==
TakeOrderedAndProject (123)
+- Union (122)
   :- * HashAggregate (70)
   :  +- Exchange (69)
   :     +- * HashAggregate (68)
   :        +- * Project (67)
   :           +- * SortMergeJoin Inner (66)
   :              :- * Project (49)
   :              :  +- * BroadcastHashJoin Inner BuildRight (48)
   :              :     :- * SortMergeJoin LeftSemi (46)
   :              :     :  :- * Sort (28)
   :              :     :  :  +- Exchange (27)
   :              :     :  :     +- * Project (26)
   :              :     :  :        +- * SortMergeJoin LeftSemi (25)
   :              :     :  :           :- * Sort (5)
   :              :     :  :           :  +- Exchange (4)
   :              :     :  :           :     +- * Filter (3)
   :              :     :  :           :        +- * ColumnarToRow (2)
   :              :     :  :           :           +- Scan parquet spark_catalog.default.catalog_sales (1)
   :              :     :  :           +- * Sort (24)
   :              :     :  :              +- * Project (23)
   :              :     :  :                 +- * Filter (22)
   :              :     :  :                    +- * HashAggregate (21)
   :              :     :  :                       +- * Project (20)
   :              :     :  :                          +- * SortMergeJoin Inner (19)
   :              :     :  :                             :- * Sort (13)
   :              :     :  :                             :  +- Exchange (12)
   :              :     :  :                             :     +- * Project (11)
   :              :     :  :                             :        +- * BroadcastHashJoin Inner BuildRight (10)
   :              :     :  :                             :           :- * Filter (8)
   :              :     :  :                             :           :  +- * ColumnarToRow (7)
   :              :     :  :                             :           :     +- Scan parquet spark_catalog.default.store_sales (6)
   :              :     :  :                             :           +- ReusedExchange (9)
   :              :     :  :                             +- * Sort (18)
   :              :     :  :                                +- Exchange (17)
   :              :     :  :                                   +- * Filter (16)
   :              :     :  :                                      +- * ColumnarToRow (15)
   :              :     :  :                                         +- Scan parquet spark_catalog.default.item (14)
   :              :     :  +- * Sort (45)
   :              :     :     +- * Project (44)
   :              :     :        +- * Filter (43)
   :              :     :           +- * HashAggregate (42)
   :              :     :              +- * Project (41)
   :              :     :                 +- * SortMergeJoin Inner (40)
   :              :     :                    :- * Sort (34)
   :              :     :                    :  +- Exchange (33)
   :              :     :                    :     +- * Project (32)
   :              :     :                    :        +- * Filter (31)
   :              :     :                    :           +- * ColumnarToRow (30)
   :              :     :                    :              +- Scan parquet spark_catalog.default.store_sales (29)
   :              :     :                    +- * Sort (39)
   :              :     :                       +- Exchange (38)
   :              :     :                          +- * Filter (37)
   :              :     :                             +- * ColumnarToRow (36)
   :              :     :                                +- Scan parquet spark_catalog.default.customer (35)
   :              :     +- ReusedExchange (47)
   :              +- * SortMergeJoin LeftSemi (65)
   :                 :- * Sort (54)
   :                 :  +- Exchange (53)
   :                 :     +- * Filter (52)
   :                 :        +- * ColumnarToRow (51)
   :                 :           +- Scan parquet spark_catalog.default.customer (50)
   :                 +- * Sort (64)
   :                    +- * Project (63)
   :                       +- * Filter (62)
   :                          +- * HashAggregate (61)
   :                             +- * Project (60)
   :                                +- * SortMergeJoin Inner (59)
   :                                   :- * Sort (56)
   :                                   :  +- ReusedExchange (55)
   :                                   +- * Sort (58)
   :                                      +- ReusedExchange (57)
   +- * HashAggregate (121)
      +- Exchange (120)
         +- * HashAggregate (119)
            +- * Project (118)
               +- * SortMergeJoin Inner (117)
                  :- * Project (103)
                  :  +- * BroadcastHashJoin Inner BuildRight (102)
                  :     :- * SortMergeJoin LeftSemi (100)
                  :     :  :- * Sort (89)
                  :     :  :  +- Exchange (88)
                  :     :  :     +- * Project (87)
                  :     :  :        +- * SortMergeJoin LeftSemi (86)
                  :     :  :           :- * Sort (75)
                  :     :  :           :  +- Exchange (74)
                  :     :  :           :     +- * Filter (73)
                  :     :  :           :        +- * ColumnarToRow (72)
                  :     :  :           :           +- Scan parquet spark_catalog.default.web_sales (71)
                  :     :  :           +- * Sort (85)
                  :     :  :              +- * Project (84)
                  :     :  :                 +- * Filter (83)
                  :     :  :                    +- * HashAggregate (82)
                  :     :  :                       +- * Project (81)
                  :     :  :                          +- * SortMergeJoin Inner (80)
                  :     :  :                             :- * Sort (77)
                  :     :  :                             :  +- ReusedExchange (76)
                  :     :  :                             +- * Sort (79)
                  :     :  :                                +- ReusedExchange (78)
                  :     :  +- * Sort (99)
                  :     :     +- * Project (98)
                  :     :        +- * Filter (97)
                  :     :           +- * HashAggregate (96)
                  :     :              +- * Project (95)
                  :     :                 +- * SortMergeJoin Inner (94)
                  :     :                    :- * Sort (91)
                  :     :                    :  +- ReusedExchange (90)
                  :     :                    +- * Sort (93)
                  :     :                       +- ReusedExchange (92)
                  :     +- ReusedExchange (101)
                  +- * SortMergeJoin LeftSemi (116)
                     :- * Sort (105)
                     :  +- ReusedExchange (104)
                     +- * Sort (115)
                        +- * Project (114)
                           +- * Filter (113)
                              +- * HashAggregate (112)
                                 +- * Project (111)
                                    +- * SortMergeJoin Inner (110)
                                       :- * Sort (107)
                                       :  +- ReusedExchange (106)
                                       +- * Sort (109)
                                          +- ReusedExchange (108)


(1) Scan parquet spark_catalog.default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(3) Filter [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Condition : isnotnull(cs_bill_customer_sk#1)

(4) Exchange
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_item_sk#2, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_item_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]

(8) Filter [codegen id : 4]
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Condition : isnotnull(ss_item_sk#7)

(9) ReusedExchange [Reuses operator id: 133]
Output [2]: [d_date_sk#10, d_date#11]

(10) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#10]
Join type: Inner
Join condition: None

(11) Project [codegen id : 4]
Output [2]: [ss_item_sk#7, d_date#11]
Input [4]: [ss_item_sk#7, ss_sold_date_sk#8, d_date_sk#10, d_date#11]

(12) Exchange
Input [2]: [ss_item_sk#7, d_date#11]
Arguments: hashpartitioning(ss_item_sk#7, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(13) Sort [codegen id : 5]
Input [2]: [ss_item_sk#7, d_date#11]
Arguments: [ss_item_sk#7 ASC NULLS FIRST], false, 0

(14) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#12, i_item_desc#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(15) ColumnarToRow [codegen id : 6]
Input [2]: [i_item_sk#12, i_item_desc#13]

(16) Filter [codegen id : 6]
Input [2]: [i_item_sk#12, i_item_desc#13]
Condition : isnotnull(i_item_sk#12)

(17) Exchange
Input [2]: [i_item_sk#12, i_item_desc#13]
Arguments: hashpartitioning(i_item_sk#12, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(18) Sort [codegen id : 7]
Input [2]: [i_item_sk#12, i_item_desc#13]
Arguments: [i_item_sk#12 ASC NULLS FIRST], false, 0

(19) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#7]
Right keys [1]: [i_item_sk#12]
Join type: Inner
Join condition: None

(20) Project [codegen id : 8]
Output [3]: [d_date#11, i_item_sk#12, substr(i_item_desc#13, 1, 30) AS _groupingexpression#14]
Input [4]: [ss_item_sk#7, d_date#11, i_item_sk#12, i_item_desc#13]

(21) HashAggregate [codegen id : 8]
Input [3]: [d_date#11, i_item_sk#12, _groupingexpression#14]
Keys [3]: [_groupingexpression#14, i_item_sk#12, d_date#11]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#15]
Results [2]: [i_item_sk#12 AS item_sk#16, count(1)#15 AS cnt#17]

(22) Filter [codegen id : 8]
Input [2]: [item_sk#16, cnt#17]
Condition : (cnt#17 > 4)

(23) Project [codegen id : 8]
Output [1]: [item_sk#16]
Input [2]: [item_sk#16, cnt#17]

(24) Sort [codegen id : 8]
Input [1]: [item_sk#16]
Arguments: [item_sk#16 ASC NULLS FIRST], false, 0

(25) SortMergeJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#16]
Join type: LeftSemi
Join condition: None

(26) Project [codegen id : 9]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(27) Exchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(28) Sort [codegen id : 10]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(29) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_customer_sk#18, ss_quantity#19, ss_sales_price#20, ss_sold_date_sk#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(30) ColumnarToRow [codegen id : 11]
Input [4]: [ss_customer_sk#18, ss_quantity#19, ss_sales_price#20, ss_sold_date_sk#21]

(31) Filter [codegen id : 11]
Input [4]: [ss_customer_sk#18, ss_quantity#19, ss_sales_price#20, ss_sold_date_sk#21]
Condition : isnotnull(ss_customer_sk#18)

(32) Project [codegen id : 11]
Output [3]: [ss_customer_sk#18, ss_quantity#19, ss_sales_price#20]
Input [4]: [ss_customer_sk#18, ss_quantity#19, ss_sales_price#20, ss_sold_date_sk#21]

(33) Exchange
Input [3]: [ss_customer_sk#18, ss_quantity#19, ss_sales_price#20]
Arguments: hashpartitioning(ss_customer_sk#18, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(34) Sort [codegen id : 12]
Input [3]: [ss_customer_sk#18, ss_quantity#19, ss_sales_price#20]
Arguments: [ss_customer_sk#18 ASC NULLS FIRST], false, 0

(35) Scan parquet spark_catalog.default.customer
Output [1]: [c_customer_sk#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(36) ColumnarToRow [codegen id : 13]
Input [1]: [c_customer_sk#22]

(37) Filter [codegen id : 13]
Input [1]: [c_customer_sk#22]
Condition : isnotnull(c_customer_sk#22)

(38) Exchange
Input [1]: [c_customer_sk#22]
Arguments: hashpartitioning(c_customer_sk#22, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(39) Sort [codegen id : 14]
Input [1]: [c_customer_sk#22]
Arguments: [c_customer_sk#22 ASC NULLS FIRST], false, 0

(40) SortMergeJoin [codegen id : 15]
Left keys [1]: [ss_customer_sk#18]
Right keys [1]: [c_customer_sk#22]
Join type: Inner
Join condition: None

(41) Project [codegen id : 15]
Output [3]: [ss_quantity#19, ss_sales_price#20, c_customer_sk#22]
Input [4]: [ss_customer_sk#18, ss_quantity#19, ss_sales_price#20, c_customer_sk#22]

(42) HashAggregate [codegen id : 15]
Input [3]: [ss_quantity#19, ss_sales_price#20, c_customer_sk#22]
Keys [1]: [c_customer_sk#22]
Functions [1]: [sum((cast(ss_quantity#19 as decimal(10,0)) * ss_sales_price#20))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#19 as decimal(10,0)) * ss_sales_price#20))#23]
Results [2]: [c_customer_sk#22, sum((cast(ss_quantity#19 as decimal(10,0)) * ss_sales_price#20))#23 AS ssales#24]

(43) Filter [codegen id : 15]
Input [2]: [c_customer_sk#22, ssales#24]
Condition : (isnotnull(ssales#24) AND (cast(ssales#24 as decimal(38,8)) > (0.500000 * Subquery scalar-subquery#25, [id=#26])))

(44) Project [codegen id : 15]
Output [1]: [c_customer_sk#22]
Input [2]: [c_customer_sk#22, ssales#24]

(45) Sort [codegen id : 15]
Input [1]: [c_customer_sk#22]
Arguments: [c_customer_sk#22 ASC NULLS FIRST], false, 0

(46) SortMergeJoin [codegen id : 17]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#22]
Join type: LeftSemi
Join condition: None

(47) ReusedExchange [Reuses operator id: 128]
Output [1]: [d_date_sk#27]

(48) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#27]
Join type: Inner
Join condition: None

(49) Project [codegen id : 17]
Output [3]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4]
Input [5]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, d_date_sk#27]

(50) Scan parquet spark_catalog.default.customer
Output [3]: [c_customer_sk#28, c_first_name#29, c_last_name#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(51) ColumnarToRow [codegen id : 18]
Input [3]: [c_customer_sk#28, c_first_name#29, c_last_name#30]

(52) Filter [codegen id : 18]
Input [3]: [c_customer_sk#28, c_first_name#29, c_last_name#30]
Condition : isnotnull(c_customer_sk#28)

(53) Exchange
Input [3]: [c_customer_sk#28, c_first_name#29, c_last_name#30]
Arguments: hashpartitioning(c_customer_sk#28, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(54) Sort [codegen id : 19]
Input [3]: [c_customer_sk#28, c_first_name#29, c_last_name#30]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(55) ReusedExchange [Reuses operator id: 33]
Output [3]: [ss_customer_sk#18, ss_quantity#19, ss_sales_price#20]

(56) Sort [codegen id : 21]
Input [3]: [ss_customer_sk#18, ss_quantity#19, ss_sales_price#20]
Arguments: [ss_customer_sk#18 ASC NULLS FIRST], false, 0

(57) ReusedExchange [Reuses operator id: 38]
Output [1]: [c_customer_sk#22]

(58) Sort [codegen id : 23]
Input [1]: [c_customer_sk#22]
Arguments: [c_customer_sk#22 ASC NULLS FIRST], false, 0

(59) SortMergeJoin [codegen id : 24]
Left keys [1]: [ss_customer_sk#18]
Right keys [1]: [c_customer_sk#22]
Join type: Inner
Join condition: None

(60) Project [codegen id : 24]
Output [3]: [ss_quantity#19, ss_sales_price#20, c_customer_sk#22]
Input [4]: [ss_customer_sk#18, ss_quantity#19, ss_sales_price#20, c_customer_sk#22]

(61) HashAggregate [codegen id : 24]
Input [3]: [ss_quantity#19, ss_sales_price#20, c_customer_sk#22]
Keys [1]: [c_customer_sk#22]
Functions [1]: [sum((cast(ss_quantity#19 as decimal(10,0)) * ss_sales_price#20))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#19 as decimal(10,0)) * ss_sales_price#20))#23]
Results [2]: [c_customer_sk#22, sum((cast(ss_quantity#19 as decimal(10,0)) * ss_sales_price#20))#23 AS ssales#24]

(62) Filter [codegen id : 24]
Input [2]: [c_customer_sk#22, ssales#24]
Condition : (isnotnull(ssales#24) AND (cast(ssales#24 as decimal(38,8)) > (0.500000 * ReusedSubquery Subquery scalar-subquery#25, [id=#26])))

(63) Project [codegen id : 24]
Output [1]: [c_customer_sk#22]
Input [2]: [c_customer_sk#22, ssales#24]

(64) Sort [codegen id : 24]
Input [1]: [c_customer_sk#22]
Arguments: [c_customer_sk#22 ASC NULLS FIRST], false, 0

(65) SortMergeJoin [codegen id : 25]
Left keys [1]: [c_customer_sk#28]
Right keys [1]: [c_customer_sk#22]
Join type: LeftSemi
Join condition: None

(66) SortMergeJoin [codegen id : 26]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#28]
Join type: Inner
Join condition: None

(67) Project [codegen id : 26]
Output [4]: [cs_quantity#3, cs_list_price#4, c_first_name#29, c_last_name#30]
Input [6]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, c_customer_sk#28, c_first_name#29, c_last_name#30]

(68) HashAggregate [codegen id : 26]
Input [4]: [cs_quantity#3, cs_list_price#4, c_first_name#29, c_last_name#30]
Keys [2]: [c_last_name#30, c_first_name#29]
Functions [1]: [partial_sum((cast(cs_quantity#3 as decimal(10,0)) * cs_list_price#4))]
Aggregate Attributes [2]: [sum#31, isEmpty#32]
Results [4]: [c_last_name#30, c_first_name#29, sum#33, isEmpty#34]

(69) Exchange
Input [4]: [c_last_name#30, c_first_name#29, sum#33, isEmpty#34]
Arguments: hashpartitioning(c_last_name#30, c_first_name#29, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(70) HashAggregate [codegen id : 27]
Input [4]: [c_last_name#30, c_first_name#29, sum#33, isEmpty#34]
Keys [2]: [c_last_name#30, c_first_name#29]
Functions [1]: [sum((cast(cs_quantity#3 as decimal(10,0)) * cs_list_price#4))]
Aggregate Attributes [1]: [sum((cast(cs_quantity#3 as decimal(10,0)) * cs_list_price#4))#35]
Results [3]: [c_last_name#30, c_first_name#29, sum((cast(cs_quantity#3 as decimal(10,0)) * cs_list_price#4))#35 AS sales#36]

(71) Scan parquet spark_catalog.default.web_sales
Output [5]: [ws_item_sk#37, ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#41), dynamicpruningexpression(ws_sold_date_sk#41 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(72) ColumnarToRow [codegen id : 28]
Input [5]: [ws_item_sk#37, ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]

(73) Filter [codegen id : 28]
Input [5]: [ws_item_sk#37, ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Condition : isnotnull(ws_bill_customer_sk#38)

(74) Exchange
Input [5]: [ws_item_sk#37, ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Arguments: hashpartitioning(ws_item_sk#37, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(75) Sort [codegen id : 29]
Input [5]: [ws_item_sk#37, ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Arguments: [ws_item_sk#37 ASC NULLS FIRST], false, 0

(76) ReusedExchange [Reuses operator id: 12]
Output [2]: [ss_item_sk#42, d_date#43]

(77) Sort [codegen id : 32]
Input [2]: [ss_item_sk#42, d_date#43]
Arguments: [ss_item_sk#42 ASC NULLS FIRST], false, 0

(78) ReusedExchange [Reuses operator id: 17]
Output [2]: [i_item_sk#44, i_item_desc#45]

(79) Sort [codegen id : 34]
Input [2]: [i_item_sk#44, i_item_desc#45]
Arguments: [i_item_sk#44 ASC NULLS FIRST], false, 0

(80) SortMergeJoin [codegen id : 35]
Left keys [1]: [ss_item_sk#42]
Right keys [1]: [i_item_sk#44]
Join type: Inner
Join condition: None

(81) Project [codegen id : 35]
Output [3]: [d_date#43, i_item_sk#44, substr(i_item_desc#45, 1, 30) AS _groupingexpression#14]
Input [4]: [ss_item_sk#42, d_date#43, i_item_sk#44, i_item_desc#45]

(82) HashAggregate [codegen id : 35]
Input [3]: [d_date#43, i_item_sk#44, _groupingexpression#14]
Keys [3]: [_groupingexpression#14, i_item_sk#44, d_date#43]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#15]
Results [2]: [i_item_sk#44 AS item_sk#46, count(1)#15 AS cnt#47]

(83) Filter [codegen id : 35]
Input [2]: [item_sk#46, cnt#47]
Condition : (cnt#47 > 4)

(84) Project [codegen id : 35]
Output [1]: [item_sk#46]
Input [2]: [item_sk#46, cnt#47]

(85) Sort [codegen id : 35]
Input [1]: [item_sk#46]
Arguments: [item_sk#46 ASC NULLS FIRST], false, 0

(86) SortMergeJoin [codegen id : 36]
Left keys [1]: [ws_item_sk#37]
Right keys [1]: [item_sk#46]
Join type: LeftSemi
Join condition: None

(87) Project [codegen id : 36]
Output [4]: [ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Input [5]: [ws_item_sk#37, ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]

(88) Exchange
Input [4]: [ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Arguments: hashpartitioning(ws_bill_customer_sk#38, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(89) Sort [codegen id : 37]
Input [4]: [ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Arguments: [ws_bill_customer_sk#38 ASC NULLS FIRST], false, 0

(90) ReusedExchange [Reuses operator id: 33]
Output [3]: [ss_customer_sk#48, ss_quantity#49, ss_sales_price#50]

(91) Sort [codegen id : 39]
Input [3]: [ss_customer_sk#48, ss_quantity#49, ss_sales_price#50]
Arguments: [ss_customer_sk#48 ASC NULLS FIRST], false, 0

(92) ReusedExchange [Reuses operator id: 38]
Output [1]: [c_customer_sk#51]

(93) Sort [codegen id : 41]
Input [1]: [c_customer_sk#51]
Arguments: [c_customer_sk#51 ASC NULLS FIRST], false, 0

(94) SortMergeJoin [codegen id : 42]
Left keys [1]: [ss_customer_sk#48]
Right keys [1]: [c_customer_sk#51]
Join type: Inner
Join condition: None

(95) Project [codegen id : 42]
Output [3]: [ss_quantity#49, ss_sales_price#50, c_customer_sk#51]
Input [4]: [ss_customer_sk#48, ss_quantity#49, ss_sales_price#50, c_customer_sk#51]

(96) HashAggregate [codegen id : 42]
Input [3]: [ss_quantity#49, ss_sales_price#50, c_customer_sk#51]
Keys [1]: [c_customer_sk#51]
Functions [1]: [sum((cast(ss_quantity#49 as decimal(10,0)) * ss_sales_price#50))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#49 as decimal(10,0)) * ss_sales_price#50))#23]
Results [2]: [c_customer_sk#51, sum((cast(ss_quantity#49 as decimal(10,0)) * ss_sales_price#50))#23 AS ssales#52]

(97) Filter [codegen id : 42]
Input [2]: [c_customer_sk#51, ssales#52]
Condition : (isnotnull(ssales#52) AND (cast(ssales#52 as decimal(38,8)) > (0.500000 * ReusedSubquery Subquery scalar-subquery#25, [id=#26])))

(98) Project [codegen id : 42]
Output [1]: [c_customer_sk#51]
Input [2]: [c_customer_sk#51, ssales#52]

(99) Sort [codegen id : 42]
Input [1]: [c_customer_sk#51]
Arguments: [c_customer_sk#51 ASC NULLS FIRST], false, 0

(100) SortMergeJoin [codegen id : 44]
Left keys [1]: [ws_bill_customer_sk#38]
Right keys [1]: [c_customer_sk#51]
Join type: LeftSemi
Join condition: None

(101) ReusedExchange [Reuses operator id: 128]
Output [1]: [d_date_sk#53]

(102) BroadcastHashJoin [codegen id : 44]
Left keys [1]: [ws_sold_date_sk#41]
Right keys [1]: [d_date_sk#53]
Join type: Inner
Join condition: None

(103) Project [codegen id : 44]
Output [3]: [ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40]
Input [5]: [ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41, d_date_sk#53]

(104) ReusedExchange [Reuses operator id: 53]
Output [3]: [c_customer_sk#54, c_first_name#55, c_last_name#56]

(105) Sort [codegen id : 46]
Input [3]: [c_customer_sk#54, c_first_name#55, c_last_name#56]
Arguments: [c_customer_sk#54 ASC NULLS FIRST], false, 0

(106) ReusedExchange [Reuses operator id: 33]
Output [3]: [ss_customer_sk#48, ss_quantity#49, ss_sales_price#50]

(107) Sort [codegen id : 48]
Input [3]: [ss_customer_sk#48, ss_quantity#49, ss_sales_price#50]
Arguments: [ss_customer_sk#48 ASC NULLS FIRST], false, 0

(108) ReusedExchange [Reuses operator id: 38]
Output [1]: [c_customer_sk#51]

(109) Sort [codegen id : 50]
Input [1]: [c_customer_sk#51]
Arguments: [c_customer_sk#51 ASC NULLS FIRST], false, 0

(110) SortMergeJoin [codegen id : 51]
Left keys [1]: [ss_customer_sk#48]
Right keys [1]: [c_customer_sk#51]
Join type: Inner
Join condition: None

(111) Project [codegen id : 51]
Output [3]: [ss_quantity#49, ss_sales_price#50, c_customer_sk#51]
Input [4]: [ss_customer_sk#48, ss_quantity#49, ss_sales_price#50, c_customer_sk#51]

(112) HashAggregate [codegen id : 51]
Input [3]: [ss_quantity#49, ss_sales_price#50, c_customer_sk#51]
Keys [1]: [c_customer_sk#51]
Functions [1]: [sum((cast(ss_quantity#49 as decimal(10,0)) * ss_sales_price#50))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#49 as decimal(10,0)) * ss_sales_price#50))#23]
Results [2]: [c_customer_sk#51, sum((cast(ss_quantity#49 as decimal(10,0)) * ss_sales_price#50))#23 AS ssales#52]

(113) Filter [codegen id : 51]
Input [2]: [c_customer_sk#51, ssales#52]
Condition : (isnotnull(ssales#52) AND (cast(ssales#52 as decimal(38,8)) > (0.500000 * ReusedSubquery Subquery scalar-subquery#25, [id=#26])))

(114) Project [codegen id : 51]
Output [1]: [c_customer_sk#51]
Input [2]: [c_customer_sk#51, ssales#52]

(115) Sort [codegen id : 51]
Input [1]: [c_customer_sk#51]
Arguments: [c_customer_sk#51 ASC NULLS FIRST], false, 0

(116) SortMergeJoin [codegen id : 52]
Left keys [1]: [c_customer_sk#54]
Right keys [1]: [c_customer_sk#51]
Join type: LeftSemi
Join condition: None

(117) SortMergeJoin [codegen id : 53]
Left keys [1]: [ws_bill_customer_sk#38]
Right keys [1]: [c_customer_sk#54]
Join type: Inner
Join condition: None

(118) Project [codegen id : 53]
Output [4]: [ws_quantity#39, ws_list_price#40, c_first_name#55, c_last_name#56]
Input [6]: [ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, c_customer_sk#54, c_first_name#55, c_last_name#56]

(119) HashAggregate [codegen id : 53]
Input [4]: [ws_quantity#39, ws_list_price#40, c_first_name#55, c_last_name#56]
Keys [2]: [c_last_name#56, c_first_name#55]
Functions [1]: [partial_sum((cast(ws_quantity#39 as decimal(10,0)) * ws_list_price#40))]
Aggregate Attributes [2]: [sum#57, isEmpty#58]
Results [4]: [c_last_name#56, c_first_name#55, sum#59, isEmpty#60]

(120) Exchange
Input [4]: [c_last_name#56, c_first_name#55, sum#59, isEmpty#60]
Arguments: hashpartitioning(c_last_name#56, c_first_name#55, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(121) HashAggregate [codegen id : 54]
Input [4]: [c_last_name#56, c_first_name#55, sum#59, isEmpty#60]
Keys [2]: [c_last_name#56, c_first_name#55]
Functions [1]: [sum((cast(ws_quantity#39 as decimal(10,0)) * ws_list_price#40))]
Aggregate Attributes [1]: [sum((cast(ws_quantity#39 as decimal(10,0)) * ws_list_price#40))#61]
Results [3]: [c_last_name#56, c_first_name#55, sum((cast(ws_quantity#39 as decimal(10,0)) * ws_list_price#40))#61 AS sales#62]

(122) Union

(123) TakeOrderedAndProject
Input [3]: [c_last_name#30, c_first_name#29, sales#36]
Arguments: 100, [c_last_name#30 ASC NULLS FIRST, c_first_name#29 ASC NULLS FIRST, sales#36 ASC NULLS FIRST], [c_last_name#30, c_first_name#29, sales#36]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (128)
+- * Project (127)
   +- * Filter (126)
      +- * ColumnarToRow (125)
         +- Scan parquet spark_catalog.default.date_dim (124)


(124) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#27, d_year#63, d_moy#64]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(125) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#27, d_year#63, d_moy#64]

(126) Filter [codegen id : 1]
Input [3]: [d_date_sk#27, d_year#63, d_moy#64]
Condition : ((((isnotnull(d_year#63) AND isnotnull(d_moy#64)) AND (d_year#63 = 2000)) AND (d_moy#64 = 2)) AND isnotnull(d_date_sk#27))

(127) Project [codegen id : 1]
Output [1]: [d_date_sk#27]
Input [3]: [d_date_sk#27, d_year#63, d_moy#64]

(128) BroadcastExchange
Input [1]: [d_date_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=12]

Subquery:2 Hosting operator id = 6 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (133)
+- * Project (132)
   +- * Filter (131)
      +- * ColumnarToRow (130)
         +- Scan parquet spark_catalog.default.date_dim (129)


(129) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#10, d_date#11, d_year#65]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(130) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#10, d_date#11, d_year#65]

(131) Filter [codegen id : 1]
Input [3]: [d_date_sk#10, d_date#11, d_year#65]
Condition : (d_year#65 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#10))

(132) Project [codegen id : 1]
Output [2]: [d_date_sk#10, d_date#11]
Input [3]: [d_date_sk#10, d_date#11, d_year#65]

(133) BroadcastExchange
Input [2]: [d_date_sk#10, d_date#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=13]

Subquery:3 Hosting operator id = 43 Hosting Expression = Subquery scalar-subquery#25, [id=#26]
* HashAggregate (149)
+- Exchange (148)
   +- * HashAggregate (147)
      +- * HashAggregate (146)
         +- * Project (145)
            +- * SortMergeJoin Inner (144)
               :- * Sort (141)
               :  +- Exchange (140)
               :     +- * Project (139)
               :        +- * BroadcastHashJoin Inner BuildRight (138)
               :           :- * Filter (136)
               :           :  +- * ColumnarToRow (135)
               :           :     +- Scan parquet spark_catalog.default.store_sales (134)
               :           +- ReusedExchange (137)
               +- * Sort (143)
                  +- ReusedExchange (142)


(134) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_customer_sk#66, ss_quantity#67, ss_sales_price#68, ss_sold_date_sk#69]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#69), dynamicpruningexpression(ss_sold_date_sk#69 IN dynamicpruning#70)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(135) ColumnarToRow [codegen id : 2]
Input [4]: [ss_customer_sk#66, ss_quantity#67, ss_sales_price#68, ss_sold_date_sk#69]

(136) Filter [codegen id : 2]
Input [4]: [ss_customer_sk#66, ss_quantity#67, ss_sales_price#68, ss_sold_date_sk#69]
Condition : isnotnull(ss_customer_sk#66)

(137) ReusedExchange [Reuses operator id: 154]
Output [1]: [d_date_sk#71]

(138) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#69]
Right keys [1]: [d_date_sk#71]
Join type: Inner
Join condition: None

(139) Project [codegen id : 2]
Output [3]: [ss_customer_sk#66, ss_quantity#67, ss_sales_price#68]
Input [5]: [ss_customer_sk#66, ss_quantity#67, ss_sales_price#68, ss_sold_date_sk#69, d_date_sk#71]

(140) Exchange
Input [3]: [ss_customer_sk#66, ss_quantity#67, ss_sales_price#68]
Arguments: hashpartitioning(ss_customer_sk#66, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(141) Sort [codegen id : 3]
Input [3]: [ss_customer_sk#66, ss_quantity#67, ss_sales_price#68]
Arguments: [ss_customer_sk#66 ASC NULLS FIRST], false, 0

(142) ReusedExchange [Reuses operator id: 38]
Output [1]: [c_customer_sk#72]

(143) Sort [codegen id : 5]
Input [1]: [c_customer_sk#72]
Arguments: [c_customer_sk#72 ASC NULLS FIRST], false, 0

(144) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#66]
Right keys [1]: [c_customer_sk#72]
Join type: Inner
Join condition: None

(145) Project [codegen id : 6]
Output [3]: [ss_quantity#67, ss_sales_price#68, c_customer_sk#72]
Input [4]: [ss_customer_sk#66, ss_quantity#67, ss_sales_price#68, c_customer_sk#72]

(146) HashAggregate [codegen id : 6]
Input [3]: [ss_quantity#67, ss_sales_price#68, c_customer_sk#72]
Keys [1]: [c_customer_sk#72]
Functions [1]: [sum((cast(ss_quantity#67 as decimal(10,0)) * ss_sales_price#68))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#67 as decimal(10,0)) * ss_sales_price#68))#73]
Results [1]: [sum((cast(ss_quantity#67 as decimal(10,0)) * ss_sales_price#68))#73 AS csales#74]

(147) HashAggregate [codegen id : 6]
Input [1]: [csales#74]
Keys: []
Functions [1]: [partial_max(csales#74)]
Aggregate Attributes [1]: [max#75]
Results [1]: [max#76]

(148) Exchange
Input [1]: [max#76]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=15]

(149) HashAggregate [codegen id : 7]
Input [1]: [max#76]
Keys: []
Functions [1]: [max(csales#74)]
Aggregate Attributes [1]: [max(csales#74)#77]
Results [1]: [max(csales#74)#77 AS tpcds_cmax#78]

Subquery:4 Hosting operator id = 134 Hosting Expression = ss_sold_date_sk#69 IN dynamicpruning#70
BroadcastExchange (154)
+- * Project (153)
   +- * Filter (152)
      +- * ColumnarToRow (151)
         +- Scan parquet spark_catalog.default.date_dim (150)


(150) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#71, d_year#79]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(151) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#71, d_year#79]

(152) Filter [codegen id : 1]
Input [2]: [d_date_sk#71, d_year#79]
Condition : (d_year#79 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#71))

(153) Project [codegen id : 1]
Output [1]: [d_date_sk#71]
Input [2]: [d_date_sk#71, d_year#79]

(154) BroadcastExchange
Input [1]: [d_date_sk#71]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=16]

Subquery:5 Hosting operator id = 62 Hosting Expression = ReusedSubquery Subquery scalar-subquery#25, [id=#26]

Subquery:6 Hosting operator id = 71 Hosting Expression = ws_sold_date_sk#41 IN dynamicpruning#6

Subquery:7 Hosting operator id = 97 Hosting Expression = ReusedSubquery Subquery scalar-subquery#25, [id=#26]

Subquery:8 Hosting operator id = 113 Hosting Expression = ReusedSubquery Subquery scalar-subquery#25, [id=#26]


