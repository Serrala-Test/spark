== Physical Plan ==
TakeOrderedAndProject (130)
+- Union (129)
   :- * HashAggregate (82)
   :  +- Exchange (81)
   :     +- * HashAggregate (80)
   :        +- * Project (79)
   :           +- * SortMergeJoin Inner (78)
   :              :- * Project (59)
   :              :  +- * BroadcastHashJoin Inner BuildLeft (58)
   :              :     :- BroadcastExchange (5)
   :              :     :  +- * Project (4)
   :              :     :     +- * Filter (3)
   :              :     :        +- * ColumnarToRow (2)
   :              :     :           +- Scan parquet default.date_dim (1)
   :              :     +- SortMergeJoin LeftSemi (57)
   :              :        :- * Sort (39)
   :              :        :  +- Exchange (38)
   :              :        :     +- * Project (37)
   :              :        :        +- SortMergeJoin LeftSemi (36)
   :              :        :           :- * Sort (10)
   :              :        :           :  +- Exchange (9)
   :              :        :           :     +- * Filter (8)
   :              :        :           :        +- * ColumnarToRow (7)
   :              :        :           :           +- Scan parquet default.catalog_sales (6)
   :              :        :           +- * Sort (35)
   :              :        :              +- Exchange (34)
   :              :        :                 +- * Project (33)
   :              :        :                    +- * Filter (32)
   :              :        :                       +- * HashAggregate (31)
   :              :        :                          +- * HashAggregate (30)
   :              :        :                             +- * Project (29)
   :              :        :                                +- * SortMergeJoin Inner (28)
   :              :        :                                   :- * Sort (22)
   :              :        :                                   :  +- Exchange (21)
   :              :        :                                   :     +- * Project (20)
   :              :        :                                   :        +- * BroadcastHashJoin Inner BuildRight (19)
   :              :        :                                   :           :- * Filter (13)
   :              :        :                                   :           :  +- * ColumnarToRow (12)
   :              :        :                                   :           :     +- Scan parquet default.store_sales (11)
   :              :        :                                   :           +- BroadcastExchange (18)
   :              :        :                                   :              +- * Project (17)
   :              :        :                                   :                 +- * Filter (16)
   :              :        :                                   :                    +- * ColumnarToRow (15)
   :              :        :                                   :                       +- Scan parquet default.date_dim (14)
   :              :        :                                   +- * Sort (27)
   :              :        :                                      +- Exchange (26)
   :              :        :                                         +- * Filter (25)
   :              :        :                                            +- * ColumnarToRow (24)
   :              :        :                                               +- Scan parquet default.item (23)
   :              :        +- * Sort (56)
   :              :           +- * Project (55)
   :              :              +- * Filter (54)
   :              :                 +- * HashAggregate (53)
   :              :                    +- * HashAggregate (52)
   :              :                       +- * Project (51)
   :              :                          +- * SortMergeJoin Inner (50)
   :              :                             :- * Sort (44)
   :              :                             :  +- Exchange (43)
   :              :                             :     +- * Filter (42)
   :              :                             :        +- * ColumnarToRow (41)
   :              :                             :           +- Scan parquet default.store_sales (40)
   :              :                             +- * Sort (49)
   :              :                                +- Exchange (48)
   :              :                                   +- * Filter (47)
   :              :                                      +- * ColumnarToRow (46)
   :              :                                         +- Scan parquet default.customer (45)
   :              +- SortMergeJoin LeftSemi (77)
   :                 :- * Sort (64)
   :                 :  +- Exchange (63)
   :                 :     +- * Filter (62)
   :                 :        +- * ColumnarToRow (61)
   :                 :           +- Scan parquet default.customer (60)
   :                 +- * Sort (76)
   :                    +- Exchange (75)
   :                       +- * Project (74)
   :                          +- * Filter (73)
   :                             +- * HashAggregate (72)
   :                                +- * HashAggregate (71)
   :                                   +- * Project (70)
   :                                      +- * SortMergeJoin Inner (69)
   :                                         :- * Sort (66)
   :                                         :  +- ReusedExchange (65)
   :                                         +- * Sort (68)
   :                                            +- ReusedExchange (67)
   +- * HashAggregate (128)
      +- Exchange (127)
         +- * HashAggregate (126)
            +- * Project (125)
               +- * SortMergeJoin Inner (124)
                  :- * Project (108)
                  :  +- * BroadcastHashJoin Inner BuildLeft (107)
                  :     :- ReusedExchange (83)
                  :     +- SortMergeJoin LeftSemi (106)
                  :        :- * Sort (94)
                  :        :  +- Exchange (93)
                  :        :     +- * Project (92)
                  :        :        +- SortMergeJoin LeftSemi (91)
                  :        :           :- * Sort (88)
                  :        :           :  +- Exchange (87)
                  :        :           :     +- * Filter (86)
                  :        :           :        +- * ColumnarToRow (85)
                  :        :           :           +- Scan parquet default.web_sales (84)
                  :        :           +- * Sort (90)
                  :        :              +- ReusedExchange (89)
                  :        +- * Sort (105)
                  :           +- * Project (104)
                  :              +- * Filter (103)
                  :                 +- * HashAggregate (102)
                  :                    +- * HashAggregate (101)
                  :                       +- * Project (100)
                  :                          +- * SortMergeJoin Inner (99)
                  :                             :- * Sort (96)
                  :                             :  +- ReusedExchange (95)
                  :                             +- * Sort (98)
                  :                                +- ReusedExchange (97)
                  +- SortMergeJoin LeftSemi (123)
                     :- * Sort (110)
                     :  +- ReusedExchange (109)
                     +- * Sort (122)
                        +- Exchange (121)
                           +- * Project (120)
                              +- * Filter (119)
                                 +- * HashAggregate (118)
                                    +- * HashAggregate (117)
                                       +- * Project (116)
                                          +- * SortMergeJoin Inner (115)
                                             :- * Sort (112)
                                             :  +- ReusedExchange (111)
                                             +- * Sort (114)
                                                +- ReusedExchange (113)


(1) Scan parquet default.date_dim
Output [3]: [d_date_sk#1, d_year#2, d_moy#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]

(3) Filter [codegen id : 1]
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]
Condition : ((((isnotnull(d_year#2) AND isnotnull(d_moy#3)) AND (d_year#2 = 2000)) AND (d_moy#3 = 2)) AND isnotnull(d_date_sk#1))

(4) Project [codegen id : 1]
Output [1]: [d_date_sk#1]
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]

(5) BroadcastExchange
Input [1]: [d_date_sk#1]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#4]

(6) Scan parquet default.catalog_sales
Output [5]: [cs_sold_date_sk#5, cs_bill_customer_sk#6, cs_item_sk#7, cs_quantity#8, cs_list_price#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(7) ColumnarToRow [codegen id : 2]
Input [5]: [cs_sold_date_sk#5, cs_bill_customer_sk#6, cs_item_sk#7, cs_quantity#8, cs_list_price#9]

(8) Filter [codegen id : 2]
Input [5]: [cs_sold_date_sk#5, cs_bill_customer_sk#6, cs_item_sk#7, cs_quantity#8, cs_list_price#9]
Condition : (isnotnull(cs_bill_customer_sk#6) AND isnotnull(cs_sold_date_sk#5))

(9) Exchange
Input [5]: [cs_sold_date_sk#5, cs_bill_customer_sk#6, cs_item_sk#7, cs_quantity#8, cs_list_price#9]
Arguments: hashpartitioning(cs_item_sk#7, 5), true, [id=#10]

(10) Sort [codegen id : 3]
Input [5]: [cs_sold_date_sk#5, cs_bill_customer_sk#6, cs_item_sk#7, cs_quantity#8, cs_list_price#9]
Arguments: [cs_item_sk#7 ASC NULLS FIRST], false, 0

(11) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#11, ss_item_sk#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(12) ColumnarToRow [codegen id : 5]
Input [2]: [ss_sold_date_sk#11, ss_item_sk#12]

(13) Filter [codegen id : 5]
Input [2]: [ss_sold_date_sk#11, ss_item_sk#12]
Condition : (isnotnull(ss_sold_date_sk#11) AND isnotnull(ss_item_sk#12))

(14) Scan parquet default.date_dim
Output [3]: [d_date_sk#1, d_date#13, d_year#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(15) ColumnarToRow [codegen id : 4]
Input [3]: [d_date_sk#1, d_date#13, d_year#2]

(16) Filter [codegen id : 4]
Input [3]: [d_date_sk#1, d_date#13, d_year#2]
Condition : (d_year#2 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#1))

(17) Project [codegen id : 4]
Output [2]: [d_date_sk#1, d_date#13]
Input [3]: [d_date_sk#1, d_date#13, d_year#2]

(18) BroadcastExchange
Input [2]: [d_date_sk#1, d_date#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(19) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#1]
Join condition: None

(20) Project [codegen id : 5]
Output [2]: [ss_item_sk#12, d_date#13]
Input [4]: [ss_sold_date_sk#11, ss_item_sk#12, d_date_sk#1, d_date#13]

(21) Exchange
Input [2]: [ss_item_sk#12, d_date#13]
Arguments: hashpartitioning(ss_item_sk#12, 5), true, [id=#15]

(22) Sort [codegen id : 6]
Input [2]: [ss_item_sk#12, d_date#13]
Arguments: [ss_item_sk#12 ASC NULLS FIRST], false, 0

(23) Scan parquet default.item
Output [2]: [i_item_sk#16, i_item_desc#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(24) ColumnarToRow [codegen id : 7]
Input [2]: [i_item_sk#16, i_item_desc#17]

(25) Filter [codegen id : 7]
Input [2]: [i_item_sk#16, i_item_desc#17]
Condition : isnotnull(i_item_sk#16)

(26) Exchange
Input [2]: [i_item_sk#16, i_item_desc#17]
Arguments: hashpartitioning(i_item_sk#16, 5), true, [id=#18]

(27) Sort [codegen id : 8]
Input [2]: [i_item_sk#16, i_item_desc#17]
Arguments: [i_item_sk#16 ASC NULLS FIRST], false, 0

(28) SortMergeJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#12]
Right keys [1]: [i_item_sk#16]
Join condition: None

(29) Project [codegen id : 9]
Output [3]: [d_date#13, i_item_sk#16, i_item_desc#17]
Input [4]: [ss_item_sk#12, d_date#13, i_item_sk#16, i_item_desc#17]

(30) HashAggregate [codegen id : 9]
Input [3]: [d_date#13, i_item_sk#16, i_item_desc#17]
Keys [3]: [substr(i_item_desc#17, 1, 30) AS substr(i_item_desc#17, 1, 30)#19, i_item_sk#16, d_date#13]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#20]
Results [4]: [substr(i_item_desc#17, 1, 30)#19, i_item_sk#16, d_date#13, count#21]

(31) HashAggregate [codegen id : 9]
Input [4]: [substr(i_item_desc#17, 1, 30)#19, i_item_sk#16, d_date#13, count#21]
Keys [3]: [substr(i_item_desc#17, 1, 30)#19, i_item_sk#16, d_date#13]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#22]
Results [2]: [i_item_sk#16 AS item_sk#23, count(1)#22 AS count(1)#24]

(32) Filter [codegen id : 9]
Input [2]: [item_sk#23, count(1)#24]
Condition : (count(1)#24 > 4)

(33) Project [codegen id : 9]
Output [1]: [item_sk#23]
Input [2]: [item_sk#23, count(1)#24]

(34) Exchange
Input [1]: [item_sk#23]
Arguments: hashpartitioning(item_sk#23, 5), true, [id=#25]

(35) Sort [codegen id : 10]
Input [1]: [item_sk#23]
Arguments: [item_sk#23 ASC NULLS FIRST], false, 0

(36) SortMergeJoin
Left keys [1]: [cs_item_sk#7]
Right keys [1]: [item_sk#23]
Join condition: None

(37) Project [codegen id : 11]
Output [4]: [cs_sold_date_sk#5, cs_bill_customer_sk#6, cs_quantity#8, cs_list_price#9]
Input [5]: [cs_sold_date_sk#5, cs_bill_customer_sk#6, cs_item_sk#7, cs_quantity#8, cs_list_price#9]

(38) Exchange
Input [4]: [cs_sold_date_sk#5, cs_bill_customer_sk#6, cs_quantity#8, cs_list_price#9]
Arguments: hashpartitioning(cs_bill_customer_sk#6, 5), true, [id=#26]

(39) Sort [codegen id : 12]
Input [4]: [cs_sold_date_sk#5, cs_bill_customer_sk#6, cs_quantity#8, cs_list_price#9]
Arguments: [cs_bill_customer_sk#6 ASC NULLS FIRST], false, 0

(40) Scan parquet default.store_sales
Output [3]: [ss_customer_sk#27, ss_quantity#28, ss_sales_price#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(41) ColumnarToRow [codegen id : 13]
Input [3]: [ss_customer_sk#27, ss_quantity#28, ss_sales_price#29]

(42) Filter [codegen id : 13]
Input [3]: [ss_customer_sk#27, ss_quantity#28, ss_sales_price#29]
Condition : isnotnull(ss_customer_sk#27)

(43) Exchange
Input [3]: [ss_customer_sk#27, ss_quantity#28, ss_sales_price#29]
Arguments: hashpartitioning(ss_customer_sk#27, 5), true, [id=#30]

(44) Sort [codegen id : 14]
Input [3]: [ss_customer_sk#27, ss_quantity#28, ss_sales_price#29]
Arguments: [ss_customer_sk#27 ASC NULLS FIRST], false, 0

(45) Scan parquet default.customer
Output [1]: [c_customer_sk#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(46) ColumnarToRow [codegen id : 15]
Input [1]: [c_customer_sk#31]

(47) Filter [codegen id : 15]
Input [1]: [c_customer_sk#31]
Condition : isnotnull(c_customer_sk#31)

(48) Exchange
Input [1]: [c_customer_sk#31]
Arguments: hashpartitioning(c_customer_sk#31, 5), true, [id=#32]

(49) Sort [codegen id : 16]
Input [1]: [c_customer_sk#31]
Arguments: [c_customer_sk#31 ASC NULLS FIRST], false, 0

(50) SortMergeJoin [codegen id : 17]
Left keys [1]: [ss_customer_sk#27]
Right keys [1]: [c_customer_sk#31]
Join condition: None

(51) Project [codegen id : 17]
Output [3]: [ss_quantity#28, ss_sales_price#29, c_customer_sk#31]
Input [4]: [ss_customer_sk#27, ss_quantity#28, ss_sales_price#29, c_customer_sk#31]

(52) HashAggregate [codegen id : 17]
Input [3]: [ss_quantity#28, ss_sales_price#29, c_customer_sk#31]
Keys [1]: [c_customer_sk#31]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#33, isEmpty#34]
Results [3]: [c_customer_sk#31, sum#35, isEmpty#36]

(53) HashAggregate [codegen id : 17]
Input [3]: [c_customer_sk#31, sum#35, isEmpty#36]
Keys [1]: [c_customer_sk#31]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#37]
Results [2]: [c_customer_sk#31, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#37 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#38]

(54) Filter [codegen id : 17]
Input [2]: [c_customer_sk#31, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#38]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#38) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#38 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#39, [id=#40] as decimal(32,6)))), DecimalType(38,8), true)))

(55) Project [codegen id : 17]
Output [1]: [c_customer_sk#31]
Input [2]: [c_customer_sk#31, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#38]

(56) Sort [codegen id : 17]
Input [1]: [c_customer_sk#31]
Arguments: [c_customer_sk#31 ASC NULLS FIRST], false, 0

(57) SortMergeJoin
Left keys [1]: [cs_bill_customer_sk#6]
Right keys [1]: [c_customer_sk#31]
Join condition: None

(58) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [d_date_sk#1]
Right keys [1]: [cs_sold_date_sk#5]
Join condition: None

(59) Project [codegen id : 18]
Output [3]: [cs_bill_customer_sk#6, cs_quantity#8, cs_list_price#9]
Input [5]: [d_date_sk#1, cs_sold_date_sk#5, cs_bill_customer_sk#6, cs_quantity#8, cs_list_price#9]

(60) Scan parquet default.customer
Output [3]: [c_customer_sk#31, c_first_name#41, c_last_name#42]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(61) ColumnarToRow [codegen id : 19]
Input [3]: [c_customer_sk#31, c_first_name#41, c_last_name#42]

(62) Filter [codegen id : 19]
Input [3]: [c_customer_sk#31, c_first_name#41, c_last_name#42]
Condition : isnotnull(c_customer_sk#31)

(63) Exchange
Input [3]: [c_customer_sk#31, c_first_name#41, c_last_name#42]
Arguments: hashpartitioning(c_customer_sk#31, 5), true, [id=#43]

(64) Sort [codegen id : 20]
Input [3]: [c_customer_sk#31, c_first_name#41, c_last_name#42]
Arguments: [c_customer_sk#31 ASC NULLS FIRST], false, 0

(65) ReusedExchange [Reuses operator id: 43]
Output [3]: [ss_customer_sk#27, ss_quantity#28, ss_sales_price#29]

(66) Sort [codegen id : 22]
Input [3]: [ss_customer_sk#27, ss_quantity#28, ss_sales_price#29]
Arguments: [ss_customer_sk#27 ASC NULLS FIRST], false, 0

(67) ReusedExchange [Reuses operator id: 48]
Output [1]: [c_customer_sk#31]

(68) Sort [codegen id : 24]
Input [1]: [c_customer_sk#31]
Arguments: [c_customer_sk#31 ASC NULLS FIRST], false, 0

(69) SortMergeJoin [codegen id : 25]
Left keys [1]: [ss_customer_sk#27]
Right keys [1]: [c_customer_sk#31]
Join condition: None

(70) Project [codegen id : 25]
Output [3]: [ss_quantity#28, ss_sales_price#29, c_customer_sk#31]
Input [4]: [ss_customer_sk#27, ss_quantity#28, ss_sales_price#29, c_customer_sk#31]

(71) HashAggregate [codegen id : 25]
Input [3]: [ss_quantity#28, ss_sales_price#29, c_customer_sk#31]
Keys [1]: [c_customer_sk#31]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#33, isEmpty#34]
Results [3]: [c_customer_sk#31, sum#35, isEmpty#36]

(72) HashAggregate [codegen id : 25]
Input [3]: [c_customer_sk#31, sum#35, isEmpty#36]
Keys [1]: [c_customer_sk#31]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#37]
Results [2]: [c_customer_sk#31, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#37 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#38]

(73) Filter [codegen id : 25]
Input [2]: [c_customer_sk#31, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#38]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#38) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#38 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#39, [id=#40] as decimal(32,6)))), DecimalType(38,8), true)))

(74) Project [codegen id : 25]
Output [1]: [c_customer_sk#31 AS c_customer_sk#31#44]
Input [2]: [c_customer_sk#31, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#38]

(75) Exchange
Input [1]: [c_customer_sk#31#44]
Arguments: hashpartitioning(c_customer_sk#31#44, 5), true, [id=#45]

(76) Sort [codegen id : 26]
Input [1]: [c_customer_sk#31#44]
Arguments: [c_customer_sk#31#44 ASC NULLS FIRST], false, 0

(77) SortMergeJoin
Left keys [1]: [c_customer_sk#31]
Right keys [1]: [c_customer_sk#31#44]
Join condition: None

(78) SortMergeJoin [codegen id : 27]
Left keys [1]: [cs_bill_customer_sk#6]
Right keys [1]: [c_customer_sk#31]
Join condition: None

(79) Project [codegen id : 27]
Output [4]: [cs_quantity#8, cs_list_price#9, c_first_name#41, c_last_name#42]
Input [6]: [cs_bill_customer_sk#6, cs_quantity#8, cs_list_price#9, c_customer_sk#31, c_first_name#41, c_last_name#42]

(80) HashAggregate [codegen id : 27]
Input [4]: [cs_quantity#8, cs_list_price#9, c_first_name#41, c_last_name#42]
Keys [2]: [c_last_name#42, c_first_name#41]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#8 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#9 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#46, isEmpty#47]
Results [4]: [c_last_name#42, c_first_name#41, sum#48, isEmpty#49]

(81) Exchange
Input [4]: [c_last_name#42, c_first_name#41, sum#48, isEmpty#49]
Arguments: hashpartitioning(c_last_name#42, c_first_name#41, 5), true, [id=#50]

(82) HashAggregate [codegen id : 28]
Input [4]: [c_last_name#42, c_first_name#41, sum#48, isEmpty#49]
Keys [2]: [c_last_name#42, c_first_name#41]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#8 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#9 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#8 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#9 as decimal(12,2)))), DecimalType(18,2), true))#51]
Results [3]: [c_last_name#42, c_first_name#41, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#8 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#9 as decimal(12,2)))), DecimalType(18,2), true))#51 AS sales#52]

(83) ReusedExchange [Reuses operator id: 5]
Output [1]: [d_date_sk#1]

(84) Scan parquet default.web_sales
Output [5]: [ws_sold_date_sk#53, ws_item_sk#54, ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(85) ColumnarToRow [codegen id : 30]
Input [5]: [ws_sold_date_sk#53, ws_item_sk#54, ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57]

(86) Filter [codegen id : 30]
Input [5]: [ws_sold_date_sk#53, ws_item_sk#54, ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57]
Condition : (isnotnull(ws_bill_customer_sk#55) AND isnotnull(ws_sold_date_sk#53))

(87) Exchange
Input [5]: [ws_sold_date_sk#53, ws_item_sk#54, ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57]
Arguments: hashpartitioning(ws_item_sk#54, 5), true, [id=#58]

(88) Sort [codegen id : 31]
Input [5]: [ws_sold_date_sk#53, ws_item_sk#54, ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57]
Arguments: [ws_item_sk#54 ASC NULLS FIRST], false, 0

(89) ReusedExchange [Reuses operator id: 34]
Output [1]: [item_sk#23]

(90) Sort [codegen id : 38]
Input [1]: [item_sk#23]
Arguments: [item_sk#23 ASC NULLS FIRST], false, 0

(91) SortMergeJoin
Left keys [1]: [ws_item_sk#54]
Right keys [1]: [item_sk#23]
Join condition: None

(92) Project [codegen id : 39]
Output [4]: [ws_sold_date_sk#53, ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57]
Input [5]: [ws_sold_date_sk#53, ws_item_sk#54, ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57]

(93) Exchange
Input [4]: [ws_sold_date_sk#53, ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57]
Arguments: hashpartitioning(ws_bill_customer_sk#55, 5), true, [id=#59]

(94) Sort [codegen id : 40]
Input [4]: [ws_sold_date_sk#53, ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57]
Arguments: [ws_bill_customer_sk#55 ASC NULLS FIRST], false, 0

(95) ReusedExchange [Reuses operator id: 43]
Output [3]: [ss_customer_sk#27, ss_quantity#28, ss_sales_price#29]

(96) Sort [codegen id : 42]
Input [3]: [ss_customer_sk#27, ss_quantity#28, ss_sales_price#29]
Arguments: [ss_customer_sk#27 ASC NULLS FIRST], false, 0

(97) ReusedExchange [Reuses operator id: 48]
Output [1]: [c_customer_sk#31]

(98) Sort [codegen id : 44]
Input [1]: [c_customer_sk#31]
Arguments: [c_customer_sk#31 ASC NULLS FIRST], false, 0

(99) SortMergeJoin [codegen id : 45]
Left keys [1]: [ss_customer_sk#27]
Right keys [1]: [c_customer_sk#31]
Join condition: None

(100) Project [codegen id : 45]
Output [3]: [ss_quantity#28, ss_sales_price#29, c_customer_sk#31]
Input [4]: [ss_customer_sk#27, ss_quantity#28, ss_sales_price#29, c_customer_sk#31]

(101) HashAggregate [codegen id : 45]
Input [3]: [ss_quantity#28, ss_sales_price#29, c_customer_sk#31]
Keys [1]: [c_customer_sk#31]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#60, isEmpty#61]
Results [3]: [c_customer_sk#31, sum#62, isEmpty#63]

(102) HashAggregate [codegen id : 45]
Input [3]: [c_customer_sk#31, sum#62, isEmpty#63]
Keys [1]: [c_customer_sk#31]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#64]
Results [2]: [c_customer_sk#31, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#64 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#65]

(103) Filter [codegen id : 45]
Input [2]: [c_customer_sk#31, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#65]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#65) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#65 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#39, [id=#40] as decimal(32,6)))), DecimalType(38,8), true)))

(104) Project [codegen id : 45]
Output [1]: [c_customer_sk#31]
Input [2]: [c_customer_sk#31, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#65]

(105) Sort [codegen id : 45]
Input [1]: [c_customer_sk#31]
Arguments: [c_customer_sk#31 ASC NULLS FIRST], false, 0

(106) SortMergeJoin
Left keys [1]: [ws_bill_customer_sk#55]
Right keys [1]: [c_customer_sk#31]
Join condition: None

(107) BroadcastHashJoin [codegen id : 46]
Left keys [1]: [d_date_sk#1]
Right keys [1]: [ws_sold_date_sk#53]
Join condition: None

(108) Project [codegen id : 46]
Output [3]: [ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57]
Input [5]: [d_date_sk#1, ws_sold_date_sk#53, ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57]

(109) ReusedExchange [Reuses operator id: 63]
Output [3]: [c_customer_sk#31, c_first_name#41, c_last_name#42]

(110) Sort [codegen id : 48]
Input [3]: [c_customer_sk#31, c_first_name#41, c_last_name#42]
Arguments: [c_customer_sk#31 ASC NULLS FIRST], false, 0

(111) ReusedExchange [Reuses operator id: 43]
Output [3]: [ss_customer_sk#27, ss_quantity#28, ss_sales_price#29]

(112) Sort [codegen id : 50]
Input [3]: [ss_customer_sk#27, ss_quantity#28, ss_sales_price#29]
Arguments: [ss_customer_sk#27 ASC NULLS FIRST], false, 0

(113) ReusedExchange [Reuses operator id: 48]
Output [1]: [c_customer_sk#31]

(114) Sort [codegen id : 52]
Input [1]: [c_customer_sk#31]
Arguments: [c_customer_sk#31 ASC NULLS FIRST], false, 0

(115) SortMergeJoin [codegen id : 53]
Left keys [1]: [ss_customer_sk#27]
Right keys [1]: [c_customer_sk#31]
Join condition: None

(116) Project [codegen id : 53]
Output [3]: [ss_quantity#28, ss_sales_price#29, c_customer_sk#31]
Input [4]: [ss_customer_sk#27, ss_quantity#28, ss_sales_price#29, c_customer_sk#31]

(117) HashAggregate [codegen id : 53]
Input [3]: [ss_quantity#28, ss_sales_price#29, c_customer_sk#31]
Keys [1]: [c_customer_sk#31]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#60, isEmpty#61]
Results [3]: [c_customer_sk#31, sum#62, isEmpty#63]

(118) HashAggregate [codegen id : 53]
Input [3]: [c_customer_sk#31, sum#62, isEmpty#63]
Keys [1]: [c_customer_sk#31]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#64]
Results [2]: [c_customer_sk#31, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#64 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#65]

(119) Filter [codegen id : 53]
Input [2]: [c_customer_sk#31, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#65]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#65) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#65 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#39, [id=#40] as decimal(32,6)))), DecimalType(38,8), true)))

(120) Project [codegen id : 53]
Output [1]: [c_customer_sk#31 AS c_customer_sk#31#66]
Input [2]: [c_customer_sk#31, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#65]

(121) Exchange
Input [1]: [c_customer_sk#31#66]
Arguments: hashpartitioning(c_customer_sk#31#66, 5), true, [id=#67]

(122) Sort [codegen id : 54]
Input [1]: [c_customer_sk#31#66]
Arguments: [c_customer_sk#31#66 ASC NULLS FIRST], false, 0

(123) SortMergeJoin
Left keys [1]: [c_customer_sk#31]
Right keys [1]: [c_customer_sk#31#66]
Join condition: None

(124) SortMergeJoin [codegen id : 55]
Left keys [1]: [ws_bill_customer_sk#55]
Right keys [1]: [c_customer_sk#31]
Join condition: None

(125) Project [codegen id : 55]
Output [4]: [ws_quantity#56, ws_list_price#57, c_first_name#41, c_last_name#42]
Input [6]: [ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57, c_customer_sk#31, c_first_name#41, c_last_name#42]

(126) HashAggregate [codegen id : 55]
Input [4]: [ws_quantity#56, ws_list_price#57, c_first_name#41, c_last_name#42]
Keys [2]: [c_last_name#42, c_first_name#41]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#56 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#57 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#68, isEmpty#69]
Results [4]: [c_last_name#42, c_first_name#41, sum#70, isEmpty#71]

(127) Exchange
Input [4]: [c_last_name#42, c_first_name#41, sum#70, isEmpty#71]
Arguments: hashpartitioning(c_last_name#42, c_first_name#41, 5), true, [id=#72]

(128) HashAggregate [codegen id : 56]
Input [4]: [c_last_name#42, c_first_name#41, sum#70, isEmpty#71]
Keys [2]: [c_last_name#42, c_first_name#41]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#56 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#57 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#56 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#57 as decimal(12,2)))), DecimalType(18,2), true))#73]
Results [3]: [c_last_name#42, c_first_name#41, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#56 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#57 as decimal(12,2)))), DecimalType(18,2), true))#73 AS sales#74]

(129) Union

(130) TakeOrderedAndProject
Input [3]: [c_last_name#42, c_first_name#41, sales#52]
Arguments: 100, [c_last_name#42 ASC NULLS FIRST, c_first_name#41 ASC NULLS FIRST, sales#52 ASC NULLS FIRST], [c_last_name#42, c_first_name#41, sales#52]

===== Subqueries =====

Subquery:1 Hosting operator id = 54 Hosting Expression = Subquery scalar-subquery#39, [id=#40]
* HashAggregate (154)
+- Exchange (153)
   +- * HashAggregate (152)
      +- * HashAggregate (151)
         +- * HashAggregate (150)
            +- * Project (149)
               +- * SortMergeJoin Inner (148)
                  :- * Sort (142)
                  :  +- Exchange (141)
                  :     +- * Project (140)
                  :        +- * BroadcastHashJoin Inner BuildRight (139)
                  :           :- * Filter (133)
                  :           :  +- * ColumnarToRow (132)
                  :           :     +- Scan parquet default.store_sales (131)
                  :           +- BroadcastExchange (138)
                  :              +- * Project (137)
                  :                 +- * Filter (136)
                  :                    +- * ColumnarToRow (135)
                  :                       +- Scan parquet default.date_dim (134)
                  +- * Sort (147)
                     +- Exchange (146)
                        +- * Filter (145)
                           +- * ColumnarToRow (144)
                              +- Scan parquet default.customer (143)


(131) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#11, ss_customer_sk#27, ss_quantity#28, ss_sales_price#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(132) ColumnarToRow [codegen id : 2]
Input [4]: [ss_sold_date_sk#11, ss_customer_sk#27, ss_quantity#28, ss_sales_price#29]

(133) Filter [codegen id : 2]
Input [4]: [ss_sold_date_sk#11, ss_customer_sk#27, ss_quantity#28, ss_sales_price#29]
Condition : (isnotnull(ss_customer_sk#27) AND isnotnull(ss_sold_date_sk#11))

(134) Scan parquet default.date_dim
Output [2]: [d_date_sk#1, d_year#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(135) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#1, d_year#2]

(136) Filter [codegen id : 1]
Input [2]: [d_date_sk#1, d_year#2]
Condition : (d_year#2 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#1))

(137) Project [codegen id : 1]
Output [1]: [d_date_sk#1]
Input [2]: [d_date_sk#1, d_year#2]

(138) BroadcastExchange
Input [1]: [d_date_sk#1]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#75]

(139) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#1]
Join condition: None

(140) Project [codegen id : 2]
Output [3]: [ss_customer_sk#27, ss_quantity#28, ss_sales_price#29]
Input [5]: [ss_sold_date_sk#11, ss_customer_sk#27, ss_quantity#28, ss_sales_price#29, d_date_sk#1]

(141) Exchange
Input [3]: [ss_customer_sk#27, ss_quantity#28, ss_sales_price#29]
Arguments: hashpartitioning(ss_customer_sk#27, 5), true, [id=#76]

(142) Sort [codegen id : 3]
Input [3]: [ss_customer_sk#27, ss_quantity#28, ss_sales_price#29]
Arguments: [ss_customer_sk#27 ASC NULLS FIRST], false, 0

(143) Scan parquet default.customer
Output [1]: [c_customer_sk#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(144) ColumnarToRow [codegen id : 4]
Input [1]: [c_customer_sk#31]

(145) Filter [codegen id : 4]
Input [1]: [c_customer_sk#31]
Condition : isnotnull(c_customer_sk#31)

(146) Exchange
Input [1]: [c_customer_sk#31]
Arguments: hashpartitioning(c_customer_sk#31, 5), true, [id=#77]

(147) Sort [codegen id : 5]
Input [1]: [c_customer_sk#31]
Arguments: [c_customer_sk#31 ASC NULLS FIRST], false, 0

(148) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#27]
Right keys [1]: [c_customer_sk#31]
Join condition: None

(149) Project [codegen id : 6]
Output [3]: [ss_quantity#28, ss_sales_price#29, c_customer_sk#31]
Input [4]: [ss_customer_sk#27, ss_quantity#28, ss_sales_price#29, c_customer_sk#31]

(150) HashAggregate [codegen id : 6]
Input [3]: [ss_quantity#28, ss_sales_price#29, c_customer_sk#31]
Keys [1]: [c_customer_sk#31]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#78, isEmpty#79]
Results [3]: [c_customer_sk#31, sum#80, isEmpty#81]

(151) HashAggregate [codegen id : 6]
Input [3]: [c_customer_sk#31, sum#80, isEmpty#81]
Keys [1]: [c_customer_sk#31]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#82]
Results [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#28 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29 as decimal(12,2)))), DecimalType(18,2), true))#82 AS csales#83]

(152) HashAggregate [codegen id : 6]
Input [1]: [csales#83]
Keys: []
Functions [1]: [partial_max(csales#83)]
Aggregate Attributes [1]: [max#84]
Results [1]: [max#85]

(153) Exchange
Input [1]: [max#85]
Arguments: SinglePartition, true, [id=#86]

(154) HashAggregate [codegen id : 7]
Input [1]: [max#85]
Keys: []
Functions [1]: [max(csales#83)]
Aggregate Attributes [1]: [max(csales#83)#87]
Results [1]: [max(csales#83)#87 AS tpcds_cmax#88]

Subquery:2 Hosting operator id = 73 Hosting Expression = ReusedSubquery Subquery scalar-subquery#39, [id=#40]

Subquery:3 Hosting operator id = 103 Hosting Expression = ReusedSubquery Subquery scalar-subquery#39, [id=#40]

Subquery:4 Hosting operator id = 119 Hosting Expression = ReusedSubquery Subquery scalar-subquery#39, [id=#40]


