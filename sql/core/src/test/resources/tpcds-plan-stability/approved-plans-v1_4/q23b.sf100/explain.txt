== Physical Plan ==
TakeOrderedAndProject (130)
+- Union (129)
   :- * HashAggregate (77)
   :  +- Exchange (76)
   :     +- * HashAggregate (75)
   :        +- * Project (74)
   :           +- * SortMergeJoin Inner (73)
   :              :- * Project (56)
   :              :  +- * BroadcastHashJoin Inner BuildRight (55)
   :              :     :- SortMergeJoin LeftSemi (49)
   :              :     :  :- * Sort (32)
   :              :     :  :  +- Exchange (31)
   :              :     :  :     +- * Project (30)
   :              :     :  :        +- SortMergeJoin LeftSemi (29)
   :              :     :  :           :- * Sort (5)
   :              :     :  :           :  +- Exchange (4)
   :              :     :  :           :     +- * Filter (3)
   :              :     :  :           :        +- * ColumnarToRow (2)
   :              :     :  :           :           +- Scan parquet default.catalog_sales (1)
   :              :     :  :           +- * Sort (28)
   :              :     :  :              +- * Project (27)
   :              :     :  :                 +- * Filter (26)
   :              :     :  :                    +- * HashAggregate (25)
   :              :     :  :                       +- * Project (24)
   :              :     :  :                          +- * SortMergeJoin Inner (23)
   :              :     :  :                             :- * Sort (17)
   :              :     :  :                             :  +- Exchange (16)
   :              :     :  :                             :     +- * Project (15)
   :              :     :  :                             :        +- * BroadcastHashJoin Inner BuildRight (14)
   :              :     :  :                             :           :- * Filter (8)
   :              :     :  :                             :           :  +- * ColumnarToRow (7)
   :              :     :  :                             :           :     +- Scan parquet default.store_sales (6)
   :              :     :  :                             :           +- BroadcastExchange (13)
   :              :     :  :                             :              +- * Project (12)
   :              :     :  :                             :                 +- * Filter (11)
   :              :     :  :                             :                    +- * ColumnarToRow (10)
   :              :     :  :                             :                       +- Scan parquet default.date_dim (9)
   :              :     :  :                             +- * Sort (22)
   :              :     :  :                                +- Exchange (21)
   :              :     :  :                                   +- * Filter (20)
   :              :     :  :                                      +- * ColumnarToRow (19)
   :              :     :  :                                         +- Scan parquet default.item (18)
   :              :     :  +- * Sort (48)
   :              :     :     +- * Project (47)
   :              :     :        +- * Filter (46)
   :              :     :           +- * HashAggregate (45)
   :              :     :              +- * Project (44)
   :              :     :                 +- * SortMergeJoin Inner (43)
   :              :     :                    :- * Sort (37)
   :              :     :                    :  +- Exchange (36)
   :              :     :                    :     +- * Filter (35)
   :              :     :                    :        +- * ColumnarToRow (34)
   :              :     :                    :           +- Scan parquet default.store_sales (33)
   :              :     :                    +- * Sort (42)
   :              :     :                       +- Exchange (41)
   :              :     :                          +- * Filter (40)
   :              :     :                             +- * ColumnarToRow (39)
   :              :     :                                +- Scan parquet default.customer (38)
   :              :     +- BroadcastExchange (54)
   :              :        +- * Project (53)
   :              :           +- * Filter (52)
   :              :              +- * ColumnarToRow (51)
   :              :                 +- Scan parquet default.date_dim (50)
   :              +- SortMergeJoin LeftSemi (72)
   :                 :- * Sort (61)
   :                 :  +- Exchange (60)
   :                 :     +- * Filter (59)
   :                 :        +- * ColumnarToRow (58)
   :                 :           +- Scan parquet default.customer (57)
   :                 +- * Sort (71)
   :                    +- * Project (70)
   :                       +- * Filter (69)
   :                          +- * HashAggregate (68)
   :                             +- * Project (67)
   :                                +- * SortMergeJoin Inner (66)
   :                                   :- * Sort (63)
   :                                   :  +- ReusedExchange (62)
   :                                   +- * Sort (65)
   :                                      +- ReusedExchange (64)
   +- * HashAggregate (128)
      +- Exchange (127)
         +- * HashAggregate (126)
            +- * Project (125)
               +- * SortMergeJoin Inner (124)
                  :- * Project (110)
                  :  +- * BroadcastHashJoin Inner BuildRight (109)
                  :     :- SortMergeJoin LeftSemi (107)
                  :     :  :- * Sort (96)
                  :     :  :  +- Exchange (95)
                  :     :  :     +- * Project (94)
                  :     :  :        +- SortMergeJoin LeftSemi (93)
                  :     :  :           :- * Sort (82)
                  :     :  :           :  +- Exchange (81)
                  :     :  :           :     +- * Filter (80)
                  :     :  :           :        +- * ColumnarToRow (79)
                  :     :  :           :           +- Scan parquet default.web_sales (78)
                  :     :  :           +- * Sort (92)
                  :     :  :              +- * Project (91)
                  :     :  :                 +- * Filter (90)
                  :     :  :                    +- * HashAggregate (89)
                  :     :  :                       +- * Project (88)
                  :     :  :                          +- * SortMergeJoin Inner (87)
                  :     :  :                             :- * Sort (84)
                  :     :  :                             :  +- ReusedExchange (83)
                  :     :  :                             +- * Sort (86)
                  :     :  :                                +- ReusedExchange (85)
                  :     :  +- * Sort (106)
                  :     :     +- * Project (105)
                  :     :        +- * Filter (104)
                  :     :           +- * HashAggregate (103)
                  :     :              +- * Project (102)
                  :     :                 +- * SortMergeJoin Inner (101)
                  :     :                    :- * Sort (98)
                  :     :                    :  +- ReusedExchange (97)
                  :     :                    +- * Sort (100)
                  :     :                       +- ReusedExchange (99)
                  :     +- ReusedExchange (108)
                  +- SortMergeJoin LeftSemi (123)
                     :- * Sort (112)
                     :  +- ReusedExchange (111)
                     +- * Sort (122)
                        +- * Project (121)
                           +- * Filter (120)
                              +- * HashAggregate (119)
                                 +- * Project (118)
                                    +- * SortMergeJoin Inner (117)
                                       :- * Sort (114)
                                       :  +- ReusedExchange (113)
                                       +- * Sort (116)
                                          +- ReusedExchange (115)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]

(3) Filter [codegen id : 1]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Condition : (isnotnull(cs_bill_customer_sk#2) AND isnotnull(cs_sold_date_sk#1))

(4) Exchange
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Arguments: hashpartitioning(cs_item_sk#3, 5), true, [id=#6]

(5) Sort [codegen id : 2]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Arguments: [cs_item_sk#3 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#7, ss_item_sk#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ss_sold_date_sk#7, ss_item_sk#8]

(8) Filter [codegen id : 4]
Input [2]: [ss_sold_date_sk#7, ss_item_sk#8]
Condition : (isnotnull(ss_sold_date_sk#7) AND isnotnull(ss_item_sk#8))

(9) Scan parquet default.date_dim
Output [3]: [d_date_sk#9, d_date#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(10) ColumnarToRow [codegen id : 3]
Input [3]: [d_date_sk#9, d_date#10, d_year#11]

(11) Filter [codegen id : 3]
Input [3]: [d_date_sk#9, d_date#10, d_year#11]
Condition : (d_year#11 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#9))

(12) Project [codegen id : 3]
Output [2]: [d_date_sk#9, d_date#10]
Input [3]: [d_date_sk#9, d_date#10, d_year#11]

(13) BroadcastExchange
Input [2]: [d_date_sk#9, d_date#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(14) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#9]
Join condition: None

(15) Project [codegen id : 4]
Output [2]: [ss_item_sk#8, d_date#10]
Input [4]: [ss_sold_date_sk#7, ss_item_sk#8, d_date_sk#9, d_date#10]

(16) Exchange
Input [2]: [ss_item_sk#8, d_date#10]
Arguments: hashpartitioning(ss_item_sk#8, 5), true, [id=#13]

(17) Sort [codegen id : 5]
Input [2]: [ss_item_sk#8, d_date#10]
Arguments: [ss_item_sk#8 ASC NULLS FIRST], false, 0

(18) Scan parquet default.item
Output [2]: [i_item_sk#14, i_item_desc#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(19) ColumnarToRow [codegen id : 6]
Input [2]: [i_item_sk#14, i_item_desc#15]

(20) Filter [codegen id : 6]
Input [2]: [i_item_sk#14, i_item_desc#15]
Condition : isnotnull(i_item_sk#14)

(21) Exchange
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: hashpartitioning(i_item_sk#14, 5), true, [id=#16]

(22) Sort [codegen id : 7]
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: [i_item_sk#14 ASC NULLS FIRST], false, 0

(23) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#14]
Join condition: None

(24) Project [codegen id : 8]
Output [3]: [d_date#10, i_item_sk#14, i_item_desc#15]
Input [4]: [ss_item_sk#8, d_date#10, i_item_sk#14, i_item_desc#15]

(25) HashAggregate [codegen id : 8]
Input [3]: [d_date#10, i_item_sk#14, i_item_desc#15]
Keys [3]: [substr(i_item_desc#15, 1, 30) AS substr(i_item_desc#15, 1, 30)#17, i_item_sk#14, d_date#10]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#18]
Results [2]: [i_item_sk#14 AS item_sk#19, count(1)#18 AS count(1)#20]

(26) Filter [codegen id : 8]
Input [2]: [item_sk#19, count(1)#20]
Condition : (count(1)#20 > 4)

(27) Project [codegen id : 8]
Output [1]: [item_sk#19]
Input [2]: [item_sk#19, count(1)#20]

(28) Sort [codegen id : 8]
Input [1]: [item_sk#19]
Arguments: [item_sk#19 ASC NULLS FIRST], false, 0

(29) SortMergeJoin
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [item_sk#19]
Join condition: None

(30) Project [codegen id : 9]
Output [4]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]

(31) Exchange
Input [4]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]
Arguments: hashpartitioning(cs_bill_customer_sk#2, 5), true, [id=#21]

(32) Sort [codegen id : 10]
Input [4]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]
Arguments: [cs_bill_customer_sk#2 ASC NULLS FIRST], false, 0

(33) Scan parquet default.store_sales
Output [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(34) ColumnarToRow [codegen id : 11]
Input [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]

(35) Filter [codegen id : 11]
Input [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Condition : isnotnull(ss_customer_sk#22)

(36) Exchange
Input [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Arguments: hashpartitioning(ss_customer_sk#22, 5), true, [id=#25]

(37) Sort [codegen id : 12]
Input [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Arguments: [ss_customer_sk#22 ASC NULLS FIRST], false, 0

(38) Scan parquet default.customer
Output [1]: [c_customer_sk#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(39) ColumnarToRow [codegen id : 13]
Input [1]: [c_customer_sk#26]

(40) Filter [codegen id : 13]
Input [1]: [c_customer_sk#26]
Condition : isnotnull(c_customer_sk#26)

(41) Exchange
Input [1]: [c_customer_sk#26]
Arguments: hashpartitioning(c_customer_sk#26, 5), true, [id=#27]

(42) Sort [codegen id : 14]
Input [1]: [c_customer_sk#26]
Arguments: [c_customer_sk#26 ASC NULLS FIRST], false, 0

(43) SortMergeJoin [codegen id : 15]
Left keys [1]: [ss_customer_sk#22]
Right keys [1]: [c_customer_sk#26]
Join condition: None

(44) Project [codegen id : 15]
Output [3]: [ss_quantity#23, ss_sales_price#24, c_customer_sk#26]
Input [4]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24, c_customer_sk#26]

(45) HashAggregate [codegen id : 15]
Input [3]: [ss_quantity#23, ss_sales_price#24, c_customer_sk#26]
Keys [1]: [c_customer_sk#26]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#28]
Results [2]: [c_customer_sk#26, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#28 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#29]

(46) Filter [codegen id : 15]
Input [2]: [c_customer_sk#26, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#29]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#29) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#29 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#30, [id=#31] as decimal(32,6)))), DecimalType(38,8), true)))

(47) Project [codegen id : 15]
Output [1]: [c_customer_sk#26]
Input [2]: [c_customer_sk#26, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#29]

(48) Sort [codegen id : 15]
Input [1]: [c_customer_sk#26]
Arguments: [c_customer_sk#26 ASC NULLS FIRST], false, 0

(49) SortMergeJoin
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#26]
Join condition: None

(50) Scan parquet default.date_dim
Output [3]: [d_date_sk#9, d_year#11, d_moy#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(51) ColumnarToRow [codegen id : 16]
Input [3]: [d_date_sk#9, d_year#11, d_moy#32]

(52) Filter [codegen id : 16]
Input [3]: [d_date_sk#9, d_year#11, d_moy#32]
Condition : ((((isnotnull(d_year#11) AND isnotnull(d_moy#32)) AND (d_year#11 = 2000)) AND (d_moy#32 = 2)) AND isnotnull(d_date_sk#9))

(53) Project [codegen id : 16]
Output [1]: [d_date_sk#9]
Input [3]: [d_date_sk#9, d_year#11, d_moy#32]

(54) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#33]

(55) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#9]
Join condition: None

(56) Project [codegen id : 17]
Output [3]: [cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5, d_date_sk#9]

(57) Scan parquet default.customer
Output [3]: [c_customer_sk#26, c_first_name#34, c_last_name#35]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(58) ColumnarToRow [codegen id : 18]
Input [3]: [c_customer_sk#26, c_first_name#34, c_last_name#35]

(59) Filter [codegen id : 18]
Input [3]: [c_customer_sk#26, c_first_name#34, c_last_name#35]
Condition : isnotnull(c_customer_sk#26)

(60) Exchange
Input [3]: [c_customer_sk#26, c_first_name#34, c_last_name#35]
Arguments: hashpartitioning(c_customer_sk#26, 5), true, [id=#36]

(61) Sort [codegen id : 19]
Input [3]: [c_customer_sk#26, c_first_name#34, c_last_name#35]
Arguments: [c_customer_sk#26 ASC NULLS FIRST], false, 0

(62) ReusedExchange [Reuses operator id: 36]
Output [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]

(63) Sort [codegen id : 21]
Input [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Arguments: [ss_customer_sk#22 ASC NULLS FIRST], false, 0

(64) ReusedExchange [Reuses operator id: 41]
Output [1]: [c_customer_sk#26]

(65) Sort [codegen id : 23]
Input [1]: [c_customer_sk#26]
Arguments: [c_customer_sk#26 ASC NULLS FIRST], false, 0

(66) SortMergeJoin [codegen id : 24]
Left keys [1]: [ss_customer_sk#22]
Right keys [1]: [c_customer_sk#26]
Join condition: None

(67) Project [codegen id : 24]
Output [3]: [ss_quantity#23, ss_sales_price#24, c_customer_sk#26]
Input [4]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24, c_customer_sk#26]

(68) HashAggregate [codegen id : 24]
Input [3]: [ss_quantity#23, ss_sales_price#24, c_customer_sk#26]
Keys [1]: [c_customer_sk#26]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#28]
Results [2]: [c_customer_sk#26, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#28 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#29]

(69) Filter [codegen id : 24]
Input [2]: [c_customer_sk#26, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#29]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#29) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#29 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#30, [id=#31] as decimal(32,6)))), DecimalType(38,8), true)))

(70) Project [codegen id : 24]
Output [1]: [c_customer_sk#26 AS c_customer_sk#26#37]
Input [2]: [c_customer_sk#26, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#29]

(71) Sort [codegen id : 24]
Input [1]: [c_customer_sk#26#37]
Arguments: [c_customer_sk#26#37 ASC NULLS FIRST], false, 0

(72) SortMergeJoin
Left keys [1]: [c_customer_sk#26]
Right keys [1]: [c_customer_sk#26#37]
Join condition: None

(73) SortMergeJoin [codegen id : 25]
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#26]
Join condition: None

(74) Project [codegen id : 25]
Output [4]: [cs_quantity#4, cs_list_price#5, c_first_name#34, c_last_name#35]
Input [6]: [cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5, c_customer_sk#26, c_first_name#34, c_last_name#35]

(75) HashAggregate [codegen id : 25]
Input [4]: [cs_quantity#4, cs_list_price#5, c_first_name#34, c_last_name#35]
Keys [2]: [c_last_name#35, c_first_name#34]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#4 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#5 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#38, isEmpty#39]
Results [4]: [c_last_name#35, c_first_name#34, sum#40, isEmpty#41]

(76) Exchange
Input [4]: [c_last_name#35, c_first_name#34, sum#40, isEmpty#41]
Arguments: hashpartitioning(c_last_name#35, c_first_name#34, 5), true, [id=#42]

(77) HashAggregate [codegen id : 26]
Input [4]: [c_last_name#35, c_first_name#34, sum#40, isEmpty#41]
Keys [2]: [c_last_name#35, c_first_name#34]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#4 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#5 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#4 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#5 as decimal(12,2)))), DecimalType(18,2), true))#43]
Results [3]: [c_last_name#35, c_first_name#34, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#4 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#5 as decimal(12,2)))), DecimalType(18,2), true))#43 AS sales#44]

(78) Scan parquet default.web_sales
Output [5]: [ws_sold_date_sk#45, ws_item_sk#46, ws_bill_customer_sk#47, ws_quantity#48, ws_list_price#49]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(79) ColumnarToRow [codegen id : 27]
Input [5]: [ws_sold_date_sk#45, ws_item_sk#46, ws_bill_customer_sk#47, ws_quantity#48, ws_list_price#49]

(80) Filter [codegen id : 27]
Input [5]: [ws_sold_date_sk#45, ws_item_sk#46, ws_bill_customer_sk#47, ws_quantity#48, ws_list_price#49]
Condition : (isnotnull(ws_bill_customer_sk#47) AND isnotnull(ws_sold_date_sk#45))

(81) Exchange
Input [5]: [ws_sold_date_sk#45, ws_item_sk#46, ws_bill_customer_sk#47, ws_quantity#48, ws_list_price#49]
Arguments: hashpartitioning(ws_item_sk#46, 5), true, [id=#50]

(82) Sort [codegen id : 28]
Input [5]: [ws_sold_date_sk#45, ws_item_sk#46, ws_bill_customer_sk#47, ws_quantity#48, ws_list_price#49]
Arguments: [ws_item_sk#46 ASC NULLS FIRST], false, 0

(83) ReusedExchange [Reuses operator id: 16]
Output [2]: [ss_item_sk#8, d_date#10]

(84) Sort [codegen id : 31]
Input [2]: [ss_item_sk#8, d_date#10]
Arguments: [ss_item_sk#8 ASC NULLS FIRST], false, 0

(85) ReusedExchange [Reuses operator id: 21]
Output [2]: [i_item_sk#14, i_item_desc#15]

(86) Sort [codegen id : 33]
Input [2]: [i_item_sk#14, i_item_desc#15]
Arguments: [i_item_sk#14 ASC NULLS FIRST], false, 0

(87) SortMergeJoin [codegen id : 34]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#14]
Join condition: None

(88) Project [codegen id : 34]
Output [3]: [d_date#10, i_item_sk#14, i_item_desc#15]
Input [4]: [ss_item_sk#8, d_date#10, i_item_sk#14, i_item_desc#15]

(89) HashAggregate [codegen id : 34]
Input [3]: [d_date#10, i_item_sk#14, i_item_desc#15]
Keys [3]: [substr(i_item_desc#15, 1, 30) AS substr(i_item_desc#15, 1, 30)#51, i_item_sk#14, d_date#10]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#52]
Results [2]: [i_item_sk#14 AS item_sk#19, count(1)#52 AS count(1)#53]

(90) Filter [codegen id : 34]
Input [2]: [item_sk#19, count(1)#53]
Condition : (count(1)#53 > 4)

(91) Project [codegen id : 34]
Output [1]: [item_sk#19]
Input [2]: [item_sk#19, count(1)#53]

(92) Sort [codegen id : 34]
Input [1]: [item_sk#19]
Arguments: [item_sk#19 ASC NULLS FIRST], false, 0

(93) SortMergeJoin
Left keys [1]: [ws_item_sk#46]
Right keys [1]: [item_sk#19]
Join condition: None

(94) Project [codegen id : 35]
Output [4]: [ws_sold_date_sk#45, ws_bill_customer_sk#47, ws_quantity#48, ws_list_price#49]
Input [5]: [ws_sold_date_sk#45, ws_item_sk#46, ws_bill_customer_sk#47, ws_quantity#48, ws_list_price#49]

(95) Exchange
Input [4]: [ws_sold_date_sk#45, ws_bill_customer_sk#47, ws_quantity#48, ws_list_price#49]
Arguments: hashpartitioning(ws_bill_customer_sk#47, 5), true, [id=#54]

(96) Sort [codegen id : 36]
Input [4]: [ws_sold_date_sk#45, ws_bill_customer_sk#47, ws_quantity#48, ws_list_price#49]
Arguments: [ws_bill_customer_sk#47 ASC NULLS FIRST], false, 0

(97) ReusedExchange [Reuses operator id: 36]
Output [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]

(98) Sort [codegen id : 38]
Input [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Arguments: [ss_customer_sk#22 ASC NULLS FIRST], false, 0

(99) ReusedExchange [Reuses operator id: 41]
Output [1]: [c_customer_sk#26]

(100) Sort [codegen id : 40]
Input [1]: [c_customer_sk#26]
Arguments: [c_customer_sk#26 ASC NULLS FIRST], false, 0

(101) SortMergeJoin [codegen id : 41]
Left keys [1]: [ss_customer_sk#22]
Right keys [1]: [c_customer_sk#26]
Join condition: None

(102) Project [codegen id : 41]
Output [3]: [ss_quantity#23, ss_sales_price#24, c_customer_sk#26]
Input [4]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24, c_customer_sk#26]

(103) HashAggregate [codegen id : 41]
Input [3]: [ss_quantity#23, ss_sales_price#24, c_customer_sk#26]
Keys [1]: [c_customer_sk#26]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#55]
Results [2]: [c_customer_sk#26, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#55 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#56]

(104) Filter [codegen id : 41]
Input [2]: [c_customer_sk#26, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#56]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#56) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#56 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#30, [id=#31] as decimal(32,6)))), DecimalType(38,8), true)))

(105) Project [codegen id : 41]
Output [1]: [c_customer_sk#26]
Input [2]: [c_customer_sk#26, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#56]

(106) Sort [codegen id : 41]
Input [1]: [c_customer_sk#26]
Arguments: [c_customer_sk#26 ASC NULLS FIRST], false, 0

(107) SortMergeJoin
Left keys [1]: [ws_bill_customer_sk#47]
Right keys [1]: [c_customer_sk#26]
Join condition: None

(108) ReusedExchange [Reuses operator id: 54]
Output [1]: [d_date_sk#9]

(109) BroadcastHashJoin [codegen id : 43]
Left keys [1]: [ws_sold_date_sk#45]
Right keys [1]: [d_date_sk#9]
Join condition: None

(110) Project [codegen id : 43]
Output [3]: [ws_bill_customer_sk#47, ws_quantity#48, ws_list_price#49]
Input [5]: [ws_sold_date_sk#45, ws_bill_customer_sk#47, ws_quantity#48, ws_list_price#49, d_date_sk#9]

(111) ReusedExchange [Reuses operator id: 60]
Output [3]: [c_customer_sk#26, c_first_name#34, c_last_name#35]

(112) Sort [codegen id : 45]
Input [3]: [c_customer_sk#26, c_first_name#34, c_last_name#35]
Arguments: [c_customer_sk#26 ASC NULLS FIRST], false, 0

(113) ReusedExchange [Reuses operator id: 36]
Output [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]

(114) Sort [codegen id : 47]
Input [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Arguments: [ss_customer_sk#22 ASC NULLS FIRST], false, 0

(115) ReusedExchange [Reuses operator id: 41]
Output [1]: [c_customer_sk#26]

(116) Sort [codegen id : 49]
Input [1]: [c_customer_sk#26]
Arguments: [c_customer_sk#26 ASC NULLS FIRST], false, 0

(117) SortMergeJoin [codegen id : 50]
Left keys [1]: [ss_customer_sk#22]
Right keys [1]: [c_customer_sk#26]
Join condition: None

(118) Project [codegen id : 50]
Output [3]: [ss_quantity#23, ss_sales_price#24, c_customer_sk#26]
Input [4]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24, c_customer_sk#26]

(119) HashAggregate [codegen id : 50]
Input [3]: [ss_quantity#23, ss_sales_price#24, c_customer_sk#26]
Keys [1]: [c_customer_sk#26]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#55]
Results [2]: [c_customer_sk#26, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#55 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#56]

(120) Filter [codegen id : 50]
Input [2]: [c_customer_sk#26, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#56]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#56) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#56 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#30, [id=#31] as decimal(32,6)))), DecimalType(38,8), true)))

(121) Project [codegen id : 50]
Output [1]: [c_customer_sk#26 AS c_customer_sk#26#57]
Input [2]: [c_customer_sk#26, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#56]

(122) Sort [codegen id : 50]
Input [1]: [c_customer_sk#26#57]
Arguments: [c_customer_sk#26#57 ASC NULLS FIRST], false, 0

(123) SortMergeJoin
Left keys [1]: [c_customer_sk#26]
Right keys [1]: [c_customer_sk#26#57]
Join condition: None

(124) SortMergeJoin [codegen id : 51]
Left keys [1]: [ws_bill_customer_sk#47]
Right keys [1]: [c_customer_sk#26]
Join condition: None

(125) Project [codegen id : 51]
Output [4]: [ws_quantity#48, ws_list_price#49, c_first_name#34, c_last_name#35]
Input [6]: [ws_bill_customer_sk#47, ws_quantity#48, ws_list_price#49, c_customer_sk#26, c_first_name#34, c_last_name#35]

(126) HashAggregate [codegen id : 51]
Input [4]: [ws_quantity#48, ws_list_price#49, c_first_name#34, c_last_name#35]
Keys [2]: [c_last_name#35, c_first_name#34]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#58, isEmpty#59]
Results [4]: [c_last_name#35, c_first_name#34, sum#60, isEmpty#61]

(127) Exchange
Input [4]: [c_last_name#35, c_first_name#34, sum#60, isEmpty#61]
Arguments: hashpartitioning(c_last_name#35, c_first_name#34, 5), true, [id=#62]

(128) HashAggregate [codegen id : 52]
Input [4]: [c_last_name#35, c_first_name#34, sum#60, isEmpty#61]
Keys [2]: [c_last_name#35, c_first_name#34]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#63]
Results [3]: [c_last_name#35, c_first_name#34, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#48 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#49 as decimal(12,2)))), DecimalType(18,2), true))#63 AS sales#64]

(129) Union

(130) TakeOrderedAndProject
Input [3]: [c_last_name#35, c_first_name#34, sales#44]
Arguments: 100, [c_last_name#35 ASC NULLS FIRST, c_first_name#34 ASC NULLS FIRST, sales#44 ASC NULLS FIRST], [c_last_name#35, c_first_name#34, sales#44]

===== Subqueries =====

Subquery:1 Hosting operator id = 46 Hosting Expression = Subquery scalar-subquery#30, [id=#31]
* HashAggregate (153)
+- Exchange (152)
   +- * HashAggregate (151)
      +- * HashAggregate (150)
         +- * Project (149)
            +- * SortMergeJoin Inner (148)
               :- * Sort (142)
               :  +- Exchange (141)
               :     +- * Project (140)
               :        +- * BroadcastHashJoin Inner BuildRight (139)
               :           :- * Filter (133)
               :           :  +- * ColumnarToRow (132)
               :           :     +- Scan parquet default.store_sales (131)
               :           +- BroadcastExchange (138)
               :              +- * Project (137)
               :                 +- * Filter (136)
               :                    +- * ColumnarToRow (135)
               :                       +- Scan parquet default.date_dim (134)
               +- * Sort (147)
                  +- Exchange (146)
                     +- * Filter (145)
                        +- * ColumnarToRow (144)
                           +- Scan parquet default.customer (143)


(131) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#7, ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(132) ColumnarToRow [codegen id : 2]
Input [4]: [ss_sold_date_sk#7, ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]

(133) Filter [codegen id : 2]
Input [4]: [ss_sold_date_sk#7, ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Condition : (isnotnull(ss_customer_sk#22) AND isnotnull(ss_sold_date_sk#7))

(134) Scan parquet default.date_dim
Output [2]: [d_date_sk#9, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(135) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#11]

(136) Filter [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#11]
Condition : (d_year#11 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#9))

(137) Project [codegen id : 1]
Output [1]: [d_date_sk#9]
Input [2]: [d_date_sk#9, d_year#11]

(138) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#65]

(139) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#9]
Join condition: None

(140) Project [codegen id : 2]
Output [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Input [5]: [ss_sold_date_sk#7, ss_customer_sk#22, ss_quantity#23, ss_sales_price#24, d_date_sk#9]

(141) Exchange
Input [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Arguments: hashpartitioning(ss_customer_sk#22, 5), true, [id=#66]

(142) Sort [codegen id : 3]
Input [3]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24]
Arguments: [ss_customer_sk#22 ASC NULLS FIRST], false, 0

(143) Scan parquet default.customer
Output [1]: [c_customer_sk#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(144) ColumnarToRow [codegen id : 4]
Input [1]: [c_customer_sk#26]

(145) Filter [codegen id : 4]
Input [1]: [c_customer_sk#26]
Condition : isnotnull(c_customer_sk#26)

(146) Exchange
Input [1]: [c_customer_sk#26]
Arguments: hashpartitioning(c_customer_sk#26, 5), true, [id=#67]

(147) Sort [codegen id : 5]
Input [1]: [c_customer_sk#26]
Arguments: [c_customer_sk#26 ASC NULLS FIRST], false, 0

(148) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#22]
Right keys [1]: [c_customer_sk#26]
Join condition: None

(149) Project [codegen id : 6]
Output [3]: [ss_quantity#23, ss_sales_price#24, c_customer_sk#26]
Input [4]: [ss_customer_sk#22, ss_quantity#23, ss_sales_price#24, c_customer_sk#26]

(150) HashAggregate [codegen id : 6]
Input [3]: [ss_quantity#23, ss_sales_price#24, c_customer_sk#26]
Keys [1]: [c_customer_sk#26]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#68]
Results [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#23 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#24 as decimal(12,2)))), DecimalType(18,2), true))#68 AS csales#69]

(151) HashAggregate [codegen id : 6]
Input [1]: [csales#69]
Keys: []
Functions [1]: [partial_max(csales#69)]
Aggregate Attributes [1]: [max#70]
Results [1]: [max#71]

(152) Exchange
Input [1]: [max#71]
Arguments: SinglePartition, true, [id=#72]

(153) HashAggregate [codegen id : 7]
Input [1]: [max#71]
Keys: []
Functions [1]: [max(csales#69)]
Aggregate Attributes [1]: [max(csales#69)#73]
Results [1]: [max(csales#69)#73 AS tpcds_cmax#74]

Subquery:2 Hosting operator id = 69 Hosting Expression = ReusedSubquery Subquery scalar-subquery#30, [id=#31]

Subquery:3 Hosting operator id = 104 Hosting Expression = ReusedSubquery Subquery scalar-subquery#30, [id=#31]

Subquery:4 Hosting operator id = 120 Hosting Expression = ReusedSubquery Subquery scalar-subquery#30, [id=#31]


