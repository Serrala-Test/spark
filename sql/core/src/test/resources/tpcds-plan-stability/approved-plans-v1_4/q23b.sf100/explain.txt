== Physical Plan ==
TakeOrderedAndProject (129)
+- Union (128)
   :- * HashAggregate (81)
   :  +- Exchange (80)
   :     +- * HashAggregate (79)
   :        +- * Project (78)
   :           +- * BroadcastHashJoin Inner BuildRight (77)
   :              :- * Project (71)
   :              :  +- * BroadcastHashJoin Inner BuildLeft (70)
   :              :     :- BroadcastExchange (52)
   :              :     :  +- SortMergeJoin LeftSemi (51)
   :              :     :     :- * Sort (32)
   :              :     :     :  +- Exchange (31)
   :              :     :     :     +- * Project (30)
   :              :     :     :        +- SortMergeJoin LeftSemi (29)
   :              :     :     :           :- * Sort (5)
   :              :     :     :           :  +- Exchange (4)
   :              :     :     :           :     +- * Filter (3)
   :              :     :     :           :        +- * ColumnarToRow (2)
   :              :     :     :           :           +- Scan parquet default.catalog_sales (1)
   :              :     :     :           +- * Sort (28)
   :              :     :     :              +- Exchange (27)
   :              :     :     :                 +- * Project (26)
   :              :     :     :                    +- * Filter (25)
   :              :     :     :                       +- * HashAggregate (24)
   :              :     :     :                          +- Exchange (23)
   :              :     :     :                             +- * HashAggregate (22)
   :              :     :     :                                +- * Project (21)
   :              :     :     :                                   +- * BroadcastHashJoin Inner BuildLeft (20)
   :              :     :     :                                      :- BroadcastExchange (16)
   :              :     :     :                                      :  +- * Project (15)
   :              :     :     :                                      :     +- * BroadcastHashJoin Inner BuildLeft (14)
   :              :     :     :                                      :        :- BroadcastExchange (9)
   :              :     :     :                                      :        :  +- * Filter (8)
   :              :     :     :                                      :        :     +- * ColumnarToRow (7)
   :              :     :     :                                      :        :        +- Scan parquet default.store_sales (6)
   :              :     :     :                                      :        +- * Project (13)
   :              :     :     :                                      :           +- * Filter (12)
   :              :     :     :                                      :              +- * ColumnarToRow (11)
   :              :     :     :                                      :                 +- Scan parquet default.date_dim (10)
   :              :     :     :                                      +- * Filter (19)
   :              :     :     :                                         +- * ColumnarToRow (18)
   :              :     :     :                                            +- Scan parquet default.item (17)
   :              :     :     +- * Sort (50)
   :              :     :        +- * Project (49)
   :              :     :           +- * Filter (48)
   :              :     :              +- * HashAggregate (47)
   :              :     :                 +- * HashAggregate (46)
   :              :     :                    +- * Project (45)
   :              :     :                       +- * SortMergeJoin Inner (44)
   :              :     :                          :- * Sort (38)
   :              :     :                          :  +- Exchange (37)
   :              :     :                          :     +- * Project (36)
   :              :     :                          :        +- * Filter (35)
   :              :     :                          :           +- * ColumnarToRow (34)
   :              :     :                          :              +- Scan parquet default.store_sales (33)
   :              :     :                          +- * Sort (43)
   :              :     :                             +- Exchange (42)
   :              :     :                                +- * Filter (41)
   :              :     :                                   +- * ColumnarToRow (40)
   :              :     :                                      +- Scan parquet default.customer (39)
   :              :     +- SortMergeJoin LeftSemi (69)
   :              :        :- * Sort (57)
   :              :        :  +- Exchange (56)
   :              :        :     +- * Filter (55)
   :              :        :        +- * ColumnarToRow (54)
   :              :        :           +- Scan parquet default.customer (53)
   :              :        +- * Sort (68)
   :              :           +- * Project (67)
   :              :              +- * Filter (66)
   :              :                 +- * HashAggregate (65)
   :              :                    +- * HashAggregate (64)
   :              :                       +- * Project (63)
   :              :                          +- * SortMergeJoin Inner (62)
   :              :                             :- * Sort (59)
   :              :                             :  +- ReusedExchange (58)
   :              :                             +- * Sort (61)
   :              :                                +- ReusedExchange (60)
   :              +- BroadcastExchange (76)
   :                 +- * Project (75)
   :                    +- * Filter (74)
   :                       +- * ColumnarToRow (73)
   :                          +- Scan parquet default.date_dim (72)
   +- * HashAggregate (127)
      +- Exchange (126)
         +- * HashAggregate (125)
            +- * Project (124)
               +- * BroadcastHashJoin Inner BuildRight (123)
                  :- * Project (121)
                  :  +- * BroadcastHashJoin Inner BuildLeft (120)
                  :     :- BroadcastExchange (105)
                  :     :  +- SortMergeJoin LeftSemi (104)
                  :     :     :- * Sort (92)
                  :     :     :  +- Exchange (91)
                  :     :     :     +- * Project (90)
                  :     :     :        +- SortMergeJoin LeftSemi (89)
                  :     :     :           :- * Sort (86)
                  :     :     :           :  +- Exchange (85)
                  :     :     :           :     +- * Filter (84)
                  :     :     :           :        +- * ColumnarToRow (83)
                  :     :     :           :           +- Scan parquet default.web_sales (82)
                  :     :     :           +- * Sort (88)
                  :     :     :              +- ReusedExchange (87)
                  :     :     +- * Sort (103)
                  :     :        +- * Project (102)
                  :     :           +- * Filter (101)
                  :     :              +- * HashAggregate (100)
                  :     :                 +- * HashAggregate (99)
                  :     :                    +- * Project (98)
                  :     :                       +- * SortMergeJoin Inner (97)
                  :     :                          :- * Sort (94)
                  :     :                          :  +- ReusedExchange (93)
                  :     :                          +- * Sort (96)
                  :     :                             +- ReusedExchange (95)
                  :     +- SortMergeJoin LeftSemi (119)
                  :        :- * Sort (107)
                  :        :  +- ReusedExchange (106)
                  :        +- * Sort (118)
                  :           +- * Project (117)
                  :              +- * Filter (116)
                  :                 +- * HashAggregate (115)
                  :                    +- * HashAggregate (114)
                  :                       +- * Project (113)
                  :                          +- * SortMergeJoin Inner (112)
                  :                             :- * Sort (109)
                  :                             :  +- ReusedExchange (108)
                  :                             +- * Sort (111)
                  :                                +- ReusedExchange (110)
                  +- ReusedExchange (122)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(3) Filter [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Condition : isnotnull(cs_bill_customer_sk#1)

(4) Exchange
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#7]

(5) Sort [codegen id : 2]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_item_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [2]: [ss_item_sk#8, ss_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#9), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(7) ColumnarToRow [codegen id : 3]
Input [2]: [ss_item_sk#8, ss_sold_date_sk#9]

(8) Filter [codegen id : 3]
Input [2]: [ss_item_sk#8, ss_sold_date_sk#9]
Condition : isnotnull(ss_item_sk#8)

(9) BroadcastExchange
Input [2]: [ss_item_sk#8, ss_sold_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#10]

(10) Scan parquet default.date_dim
Output [3]: [d_date_sk#11, d_date#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(11) ColumnarToRow
Input [3]: [d_date_sk#11, d_date#12, d_year#13]

(12) Filter
Input [3]: [d_date_sk#11, d_date#12, d_year#13]
Condition : (d_year#13 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#11))

(13) Project
Output [2]: [d_date_sk#11, d_date#12]
Input [3]: [d_date_sk#11, d_date#12, d_year#13]

(14) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#9]
Right keys [1]: [d_date_sk#11]
Join condition: None

(15) Project [codegen id : 4]
Output [2]: [ss_item_sk#8, d_date#12]
Input [4]: [ss_item_sk#8, ss_sold_date_sk#9, d_date_sk#11, d_date#12]

(16) BroadcastExchange
Input [2]: [ss_item_sk#8, d_date#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(17) Scan parquet default.item
Output [2]: [i_item_sk#15, i_item_desc#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(18) ColumnarToRow
Input [2]: [i_item_sk#15, i_item_desc#16]

(19) Filter
Input [2]: [i_item_sk#15, i_item_desc#16]
Condition : isnotnull(i_item_sk#15)

(20) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#15]
Join condition: None

(21) Project [codegen id : 5]
Output [3]: [d_date#12, i_item_sk#15, i_item_desc#16]
Input [4]: [ss_item_sk#8, d_date#12, i_item_sk#15, i_item_desc#16]

(22) HashAggregate [codegen id : 5]
Input [3]: [d_date#12, i_item_sk#15, i_item_desc#16]
Keys [3]: [substr(i_item_desc#16, 1, 30) AS substr(i_item_desc#16, 1, 30)#17, i_item_sk#15, d_date#12]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#18]
Results [4]: [substr(i_item_desc#16, 1, 30)#17, i_item_sk#15, d_date#12, count#19]

(23) Exchange
Input [4]: [substr(i_item_desc#16, 1, 30)#17, i_item_sk#15, d_date#12, count#19]
Arguments: hashpartitioning(substr(i_item_desc#16, 1, 30)#17, i_item_sk#15, d_date#12, 5), ENSURE_REQUIREMENTS, [id=#20]

(24) HashAggregate [codegen id : 6]
Input [4]: [substr(i_item_desc#16, 1, 30)#17, i_item_sk#15, d_date#12, count#19]
Keys [3]: [substr(i_item_desc#16, 1, 30)#17, i_item_sk#15, d_date#12]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#21]
Results [2]: [i_item_sk#15 AS item_sk#22, count(1)#21 AS count(1)#23]

(25) Filter [codegen id : 6]
Input [2]: [item_sk#22, count(1)#23]
Condition : (count(1)#23 > 4)

(26) Project [codegen id : 6]
Output [1]: [item_sk#22]
Input [2]: [item_sk#22, count(1)#23]

(27) Exchange
Input [1]: [item_sk#22]
Arguments: hashpartitioning(item_sk#22, 5), ENSURE_REQUIREMENTS, [id=#24]

(28) Sort [codegen id : 7]
Input [1]: [item_sk#22]
Arguments: [item_sk#22 ASC NULLS FIRST], false, 0

(29) SortMergeJoin
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#22]
Join condition: None

(30) Project [codegen id : 8]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(31) Exchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#25]

(32) Sort [codegen id : 9]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(33) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(34) ColumnarToRow [codegen id : 10]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#9]

(35) Filter [codegen id : 10]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#9]
Condition : isnotnull(ss_customer_sk#26)

(36) Project [codegen id : 10]
Output [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#9]

(37) Exchange
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: hashpartitioning(ss_customer_sk#26, 5), ENSURE_REQUIREMENTS, [id=#29]

(38) Sort [codegen id : 11]
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: [ss_customer_sk#26 ASC NULLS FIRST], false, 0

(39) Scan parquet default.customer
Output [1]: [c_customer_sk#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(40) ColumnarToRow [codegen id : 12]
Input [1]: [c_customer_sk#30]

(41) Filter [codegen id : 12]
Input [1]: [c_customer_sk#30]
Condition : isnotnull(c_customer_sk#30)

(42) Exchange
Input [1]: [c_customer_sk#30]
Arguments: hashpartitioning(c_customer_sk#30, 5), ENSURE_REQUIREMENTS, [id=#31]

(43) Sort [codegen id : 13]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(44) SortMergeJoin [codegen id : 14]
Left keys [1]: [ss_customer_sk#26]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(45) Project [codegen id : 14]
Output [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, c_customer_sk#30]

(46) HashAggregate [codegen id : 14]
Input [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Keys [1]: [c_customer_sk#30]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#32, isEmpty#33]
Results [3]: [c_customer_sk#30, sum#34, isEmpty#35]

(47) HashAggregate [codegen id : 14]
Input [3]: [c_customer_sk#30, sum#34, isEmpty#35]
Keys [1]: [c_customer_sk#30]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#36]
Results [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#36 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37]

(48) Filter [codegen id : 14]
Input [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#38, [id=#39] as decimal(32,6)))), DecimalType(38,8), true)))

(49) Project [codegen id : 14]
Output [1]: [c_customer_sk#30]
Input [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37]

(50) Sort [codegen id : 14]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(51) SortMergeJoin
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(52) BroadcastExchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#40]

(53) Scan parquet default.customer
Output [3]: [c_customer_sk#30, c_first_name#41, c_last_name#42]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(54) ColumnarToRow [codegen id : 15]
Input [3]: [c_customer_sk#30, c_first_name#41, c_last_name#42]

(55) Filter [codegen id : 15]
Input [3]: [c_customer_sk#30, c_first_name#41, c_last_name#42]
Condition : isnotnull(c_customer_sk#30)

(56) Exchange
Input [3]: [c_customer_sk#30, c_first_name#41, c_last_name#42]
Arguments: hashpartitioning(c_customer_sk#30, 5), ENSURE_REQUIREMENTS, [id=#43]

(57) Sort [codegen id : 16]
Input [3]: [c_customer_sk#30, c_first_name#41, c_last_name#42]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(58) ReusedExchange [Reuses operator id: 37]
Output [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]

(59) Sort [codegen id : 18]
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: [ss_customer_sk#26 ASC NULLS FIRST], false, 0

(60) ReusedExchange [Reuses operator id: 42]
Output [1]: [c_customer_sk#30]

(61) Sort [codegen id : 20]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(62) SortMergeJoin [codegen id : 21]
Left keys [1]: [ss_customer_sk#26]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(63) Project [codegen id : 21]
Output [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, c_customer_sk#30]

(64) HashAggregate [codegen id : 21]
Input [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Keys [1]: [c_customer_sk#30]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#32, isEmpty#33]
Results [3]: [c_customer_sk#30, sum#34, isEmpty#35]

(65) HashAggregate [codegen id : 21]
Input [3]: [c_customer_sk#30, sum#34, isEmpty#35]
Keys [1]: [c_customer_sk#30]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#36]
Results [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#36 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37]

(66) Filter [codegen id : 21]
Input [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#38, [id=#39] as decimal(32,6)))), DecimalType(38,8), true)))

(67) Project [codegen id : 21]
Output [1]: [c_customer_sk#30 AS c_customer_sk#30#44]
Input [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37]

(68) Sort [codegen id : 21]
Input [1]: [c_customer_sk#30#44]
Arguments: [c_customer_sk#30#44 ASC NULLS FIRST], false, 0

(69) SortMergeJoin
Left keys [1]: [c_customer_sk#30]
Right keys [1]: [c_customer_sk#30#44]
Join condition: None

(70) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(71) Project [codegen id : 23]
Output [5]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_first_name#41, c_last_name#42]
Input [7]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_customer_sk#30, c_first_name#41, c_last_name#42]

(72) Scan parquet default.date_dim
Output [3]: [d_date_sk#11, d_year#13, d_moy#45]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(73) ColumnarToRow [codegen id : 22]
Input [3]: [d_date_sk#11, d_year#13, d_moy#45]

(74) Filter [codegen id : 22]
Input [3]: [d_date_sk#11, d_year#13, d_moy#45]
Condition : ((((isnotnull(d_year#13) AND isnotnull(d_moy#45)) AND (d_year#13 = 2000)) AND (d_moy#45 = 2)) AND isnotnull(d_date_sk#11))

(75) Project [codegen id : 22]
Output [1]: [d_date_sk#11]
Input [3]: [d_date_sk#11, d_year#13, d_moy#45]

(76) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#46]

(77) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#11]
Join condition: None

(78) Project [codegen id : 23]
Output [4]: [cs_quantity#3, cs_list_price#4, c_first_name#41, c_last_name#42]
Input [6]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_first_name#41, c_last_name#42, d_date_sk#11]

(79) HashAggregate [codegen id : 23]
Input [4]: [cs_quantity#3, cs_list_price#4, c_first_name#41, c_last_name#42]
Keys [2]: [c_last_name#42, c_first_name#41]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#47, isEmpty#48]
Results [4]: [c_last_name#42, c_first_name#41, sum#49, isEmpty#50]

(80) Exchange
Input [4]: [c_last_name#42, c_first_name#41, sum#49, isEmpty#50]
Arguments: hashpartitioning(c_last_name#42, c_first_name#41, 5), ENSURE_REQUIREMENTS, [id=#51]

(81) HashAggregate [codegen id : 24]
Input [4]: [c_last_name#42, c_first_name#41, sum#49, isEmpty#50]
Keys [2]: [c_last_name#42, c_first_name#41]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#52]
Results [3]: [c_last_name#42, c_first_name#41, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#3 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#4 as decimal(12,2)))), DecimalType(18,2), true))#52 AS sales#53]

(82) Scan parquet default.web_sales
Output [5]: [ws_item_sk#54, ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57, ws_sold_date_sk#58]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#58), dynamicpruningexpression(ws_sold_date_sk#58 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(83) ColumnarToRow [codegen id : 25]
Input [5]: [ws_item_sk#54, ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57, ws_sold_date_sk#58]

(84) Filter [codegen id : 25]
Input [5]: [ws_item_sk#54, ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57, ws_sold_date_sk#58]
Condition : isnotnull(ws_bill_customer_sk#55)

(85) Exchange
Input [5]: [ws_item_sk#54, ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57, ws_sold_date_sk#58]
Arguments: hashpartitioning(ws_item_sk#54, 5), ENSURE_REQUIREMENTS, [id=#59]

(86) Sort [codegen id : 26]
Input [5]: [ws_item_sk#54, ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57, ws_sold_date_sk#58]
Arguments: [ws_item_sk#54 ASC NULLS FIRST], false, 0

(87) ReusedExchange [Reuses operator id: 27]
Output [1]: [item_sk#22]

(88) Sort [codegen id : 31]
Input [1]: [item_sk#22]
Arguments: [item_sk#22 ASC NULLS FIRST], false, 0

(89) SortMergeJoin
Left keys [1]: [ws_item_sk#54]
Right keys [1]: [item_sk#22]
Join condition: None

(90) Project [codegen id : 32]
Output [4]: [ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57, ws_sold_date_sk#58]
Input [5]: [ws_item_sk#54, ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57, ws_sold_date_sk#58]

(91) Exchange
Input [4]: [ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57, ws_sold_date_sk#58]
Arguments: hashpartitioning(ws_bill_customer_sk#55, 5), ENSURE_REQUIREMENTS, [id=#60]

(92) Sort [codegen id : 33]
Input [4]: [ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57, ws_sold_date_sk#58]
Arguments: [ws_bill_customer_sk#55 ASC NULLS FIRST], false, 0

(93) ReusedExchange [Reuses operator id: 37]
Output [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]

(94) Sort [codegen id : 35]
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: [ss_customer_sk#26 ASC NULLS FIRST], false, 0

(95) ReusedExchange [Reuses operator id: 42]
Output [1]: [c_customer_sk#30]

(96) Sort [codegen id : 37]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(97) SortMergeJoin [codegen id : 38]
Left keys [1]: [ss_customer_sk#26]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(98) Project [codegen id : 38]
Output [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, c_customer_sk#30]

(99) HashAggregate [codegen id : 38]
Input [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Keys [1]: [c_customer_sk#30]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#61, isEmpty#62]
Results [3]: [c_customer_sk#30, sum#63, isEmpty#64]

(100) HashAggregate [codegen id : 38]
Input [3]: [c_customer_sk#30, sum#63, isEmpty#64]
Keys [1]: [c_customer_sk#30]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#65]
Results [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#65 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#66]

(101) Filter [codegen id : 38]
Input [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#66]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#66) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#66 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#38, [id=#39] as decimal(32,6)))), DecimalType(38,8), true)))

(102) Project [codegen id : 38]
Output [1]: [c_customer_sk#30]
Input [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#66]

(103) Sort [codegen id : 38]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(104) SortMergeJoin
Left keys [1]: [ws_bill_customer_sk#55]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(105) BroadcastExchange
Input [4]: [ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57, ws_sold_date_sk#58]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#67]

(106) ReusedExchange [Reuses operator id: 56]
Output [3]: [c_customer_sk#30, c_first_name#41, c_last_name#42]

(107) Sort [codegen id : 40]
Input [3]: [c_customer_sk#30, c_first_name#41, c_last_name#42]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(108) ReusedExchange [Reuses operator id: 37]
Output [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]

(109) Sort [codegen id : 42]
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: [ss_customer_sk#26 ASC NULLS FIRST], false, 0

(110) ReusedExchange [Reuses operator id: 42]
Output [1]: [c_customer_sk#30]

(111) Sort [codegen id : 44]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(112) SortMergeJoin [codegen id : 45]
Left keys [1]: [ss_customer_sk#26]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(113) Project [codegen id : 45]
Output [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, c_customer_sk#30]

(114) HashAggregate [codegen id : 45]
Input [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Keys [1]: [c_customer_sk#30]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#61, isEmpty#62]
Results [3]: [c_customer_sk#30, sum#63, isEmpty#64]

(115) HashAggregate [codegen id : 45]
Input [3]: [c_customer_sk#30, sum#63, isEmpty#64]
Keys [1]: [c_customer_sk#30]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#65]
Results [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#65 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#66]

(116) Filter [codegen id : 45]
Input [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#66]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#66) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#66 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#38, [id=#39] as decimal(32,6)))), DecimalType(38,8), true)))

(117) Project [codegen id : 45]
Output [1]: [c_customer_sk#30 AS c_customer_sk#30#68]
Input [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#66]

(118) Sort [codegen id : 45]
Input [1]: [c_customer_sk#30#68]
Arguments: [c_customer_sk#30#68 ASC NULLS FIRST], false, 0

(119) SortMergeJoin
Left keys [1]: [c_customer_sk#30]
Right keys [1]: [c_customer_sk#30#68]
Join condition: None

(120) BroadcastHashJoin [codegen id : 47]
Left keys [1]: [ws_bill_customer_sk#55]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(121) Project [codegen id : 47]
Output [5]: [ws_quantity#56, ws_list_price#57, ws_sold_date_sk#58, c_first_name#41, c_last_name#42]
Input [7]: [ws_bill_customer_sk#55, ws_quantity#56, ws_list_price#57, ws_sold_date_sk#58, c_customer_sk#30, c_first_name#41, c_last_name#42]

(122) ReusedExchange [Reuses operator id: 76]
Output [1]: [d_date_sk#11]

(123) BroadcastHashJoin [codegen id : 47]
Left keys [1]: [ws_sold_date_sk#58]
Right keys [1]: [d_date_sk#11]
Join condition: None

(124) Project [codegen id : 47]
Output [4]: [ws_quantity#56, ws_list_price#57, c_first_name#41, c_last_name#42]
Input [6]: [ws_quantity#56, ws_list_price#57, ws_sold_date_sk#58, c_first_name#41, c_last_name#42, d_date_sk#11]

(125) HashAggregate [codegen id : 47]
Input [4]: [ws_quantity#56, ws_list_price#57, c_first_name#41, c_last_name#42]
Keys [2]: [c_last_name#42, c_first_name#41]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#56 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#57 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#69, isEmpty#70]
Results [4]: [c_last_name#42, c_first_name#41, sum#71, isEmpty#72]

(126) Exchange
Input [4]: [c_last_name#42, c_first_name#41, sum#71, isEmpty#72]
Arguments: hashpartitioning(c_last_name#42, c_first_name#41, 5), ENSURE_REQUIREMENTS, [id=#73]

(127) HashAggregate [codegen id : 48]
Input [4]: [c_last_name#42, c_first_name#41, sum#71, isEmpty#72]
Keys [2]: [c_last_name#42, c_first_name#41]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#56 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#57 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#56 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#57 as decimal(12,2)))), DecimalType(18,2), true))#74]
Results [3]: [c_last_name#42, c_first_name#41, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#56 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#57 as decimal(12,2)))), DecimalType(18,2), true))#74 AS sales#75]

(128) Union

(129) TakeOrderedAndProject
Input [3]: [c_last_name#42, c_first_name#41, sales#53]
Arguments: 100, [c_last_name#42 ASC NULLS FIRST, c_first_name#41 ASC NULLS FIRST, sales#53 ASC NULLS FIRST], [c_last_name#42, c_first_name#41, sales#53]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
ReusedExchange (130)


(130) ReusedExchange [Reuses operator id: 76]
Output [1]: [d_date_sk#11]

Subquery:2 Hosting operator id = 48 Hosting Expression = Subquery scalar-subquery#38, [id=#39]
* HashAggregate (152)
+- Exchange (151)
   +- * HashAggregate (150)
      +- * HashAggregate (149)
         +- Exchange (148)
            +- * HashAggregate (147)
               +- * Project (146)
                  +- * BroadcastHashJoin Inner BuildRight (145)
                     :- * Project (139)
                     :  +- * BroadcastHashJoin Inner BuildLeft (138)
                     :     :- BroadcastExchange (134)
                     :     :  +- * Filter (133)
                     :     :     +- * ColumnarToRow (132)
                     :     :        +- Scan parquet default.store_sales (131)
                     :     +- * Filter (137)
                     :        +- * ColumnarToRow (136)
                     :           +- Scan parquet default.customer (135)
                     +- BroadcastExchange (144)
                        +- * Project (143)
                           +- * Filter (142)
                              +- * ColumnarToRow (141)
                                 +- Scan parquet default.date_dim (140)


(131) Scan parquet default.store_sales
Output [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#9), dynamicpruningexpression(ss_sold_date_sk#9 IN dynamicpruning#76)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(132) ColumnarToRow [codegen id : 1]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#9]

(133) Filter [codegen id : 1]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#9]
Condition : isnotnull(ss_customer_sk#26)

(134) BroadcastExchange
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#77]

(135) Scan parquet default.customer
Output [1]: [c_customer_sk#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(136) ColumnarToRow
Input [1]: [c_customer_sk#30]

(137) Filter
Input [1]: [c_customer_sk#30]
Condition : isnotnull(c_customer_sk#30)

(138) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_customer_sk#26]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(139) Project [codegen id : 3]
Output [4]: [ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#9, c_customer_sk#30]
Input [5]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#9, c_customer_sk#30]

(140) Scan parquet default.date_dim
Output [2]: [d_date_sk#11, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(141) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#11, d_year#13]

(142) Filter [codegen id : 2]
Input [2]: [d_date_sk#11, d_year#13]
Condition : (d_year#13 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#11))

(143) Project [codegen id : 2]
Output [1]: [d_date_sk#11]
Input [2]: [d_date_sk#11, d_year#13]

(144) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#78]

(145) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#9]
Right keys [1]: [d_date_sk#11]
Join condition: None

(146) Project [codegen id : 3]
Output [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Input [5]: [ss_quantity#27, ss_sales_price#28, ss_sold_date_sk#9, c_customer_sk#30, d_date_sk#11]

(147) HashAggregate [codegen id : 3]
Input [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Keys [1]: [c_customer_sk#30]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#79, isEmpty#80]
Results [3]: [c_customer_sk#30, sum#81, isEmpty#82]

(148) Exchange
Input [3]: [c_customer_sk#30, sum#81, isEmpty#82]
Arguments: hashpartitioning(c_customer_sk#30, 5), ENSURE_REQUIREMENTS, [id=#83]

(149) HashAggregate [codegen id : 4]
Input [3]: [c_customer_sk#30, sum#81, isEmpty#82]
Keys [1]: [c_customer_sk#30]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#84]
Results [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#84 AS csales#85]

(150) HashAggregate [codegen id : 4]
Input [1]: [csales#85]
Keys: []
Functions [1]: [partial_max(csales#85)]
Aggregate Attributes [1]: [max#86]
Results [1]: [max#87]

(151) Exchange
Input [1]: [max#87]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#88]

(152) HashAggregate [codegen id : 5]
Input [1]: [max#87]
Keys: []
Functions [1]: [max(csales#85)]
Aggregate Attributes [1]: [max(csales#85)#89]
Results [1]: [max(csales#85)#89 AS tpcds_cmax#90]

Subquery:3 Hosting operator id = 131 Hosting Expression = ss_sold_date_sk#9 IN dynamicpruning#76
ReusedExchange (153)


(153) ReusedExchange [Reuses operator id: 144]
Output [1]: [d_date_sk#11]

Subquery:4 Hosting operator id = 66 Hosting Expression = ReusedSubquery Subquery scalar-subquery#38, [id=#39]

Subquery:5 Hosting operator id = 82 Hosting Expression = ws_sold_date_sk#58 IN dynamicpruning#6

Subquery:6 Hosting operator id = 101 Hosting Expression = ReusedSubquery Subquery scalar-subquery#38, [id=#39]

Subquery:7 Hosting operator id = 116 Hosting Expression = ReusedSubquery Subquery scalar-subquery#38, [id=#39]


