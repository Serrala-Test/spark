== Physical Plan ==
TakeOrderedAndProject (128)
+- Union (127)
   :- * HashAggregate (81)
   :  +- Exchange (80)
   :     +- * HashAggregate (79)
   :        +- * Project (78)
   :           +- * SortMergeJoin Inner (77)
   :              :- * Project (58)
   :              :  +- * BroadcastHashJoin Inner BuildRight (57)
   :              :     :- SortMergeJoin LeftSemi (51)
   :              :     :  :- * Sort (33)
   :              :     :  :  +- Exchange (32)
   :              :     :  :     +- * Project (31)
   :              :     :  :        +- SortMergeJoin LeftSemi (30)
   :              :     :  :           :- * Sort (5)
   :              :     :  :           :  +- Exchange (4)
   :              :     :  :           :     +- * Filter (3)
   :              :     :  :           :        +- * ColumnarToRow (2)
   :              :     :  :           :           +- Scan parquet default.catalog_sales (1)
   :              :     :  :           +- * Sort (29)
   :              :     :  :              +- Exchange (28)
   :              :     :  :                 +- * Project (27)
   :              :     :  :                    +- * Filter (26)
   :              :     :  :                       +- * HashAggregate (25)
   :              :     :  :                          +- Exchange (24)
   :              :     :  :                             +- * HashAggregate (23)
   :              :     :  :                                +- * Project (22)
   :              :     :  :                                   +- * BroadcastHashJoin Inner BuildRight (21)
   :              :     :  :                                      :- * Project (15)
   :              :     :  :                                      :  +- * BroadcastHashJoin Inner BuildRight (14)
   :              :     :  :                                      :     :- * Filter (8)
   :              :     :  :                                      :     :  +- * ColumnarToRow (7)
   :              :     :  :                                      :     :     +- Scan parquet default.store_sales (6)
   :              :     :  :                                      :     +- BroadcastExchange (13)
   :              :     :  :                                      :        +- * Project (12)
   :              :     :  :                                      :           +- * Filter (11)
   :              :     :  :                                      :              +- * ColumnarToRow (10)
   :              :     :  :                                      :                 +- Scan parquet default.date_dim (9)
   :              :     :  :                                      +- BroadcastExchange (20)
   :              :     :  :                                         +- * Project (19)
   :              :     :  :                                            +- * Filter (18)
   :              :     :  :                                               +- * ColumnarToRow (17)
   :              :     :  :                                                  +- Scan parquet default.item (16)
   :              :     :  +- * Sort (50)
   :              :     :     +- * Project (49)
   :              :     :        +- * Filter (48)
   :              :     :           +- * HashAggregate (47)
   :              :     :              +- * HashAggregate (46)
   :              :     :                 +- * Project (45)
   :              :     :                    +- * SortMergeJoin Inner (44)
   :              :     :                       :- * Sort (38)
   :              :     :                       :  +- Exchange (37)
   :              :     :                       :     +- * Filter (36)
   :              :     :                       :        +- * ColumnarToRow (35)
   :              :     :                       :           +- Scan parquet default.store_sales (34)
   :              :     :                       +- * Sort (43)
   :              :     :                          +- Exchange (42)
   :              :     :                             +- * Filter (41)
   :              :     :                                +- * ColumnarToRow (40)
   :              :     :                                   +- Scan parquet default.customer (39)
   :              :     +- BroadcastExchange (56)
   :              :        +- * Project (55)
   :              :           +- * Filter (54)
   :              :              +- * ColumnarToRow (53)
   :              :                 +- Scan parquet default.date_dim (52)
   :              +- SortMergeJoin LeftSemi (76)
   :                 :- * Sort (64)
   :                 :  +- Exchange (63)
   :                 :     +- * Project (62)
   :                 :        +- * Filter (61)
   :                 :           +- * ColumnarToRow (60)
   :                 :              +- Scan parquet default.customer (59)
   :                 +- * Sort (75)
   :                    +- * Project (74)
   :                       +- * Filter (73)
   :                          +- * HashAggregate (72)
   :                             +- * HashAggregate (71)
   :                                +- * Project (70)
   :                                   +- * SortMergeJoin Inner (69)
   :                                      :- * Sort (66)
   :                                      :  +- ReusedExchange (65)
   :                                      +- * Sort (68)
   :                                         +- ReusedExchange (67)
   +- * HashAggregate (126)
      +- Exchange (125)
         +- * HashAggregate (124)
            +- * Project (123)
               +- * SortMergeJoin Inner (122)
                  :- * Project (107)
                  :  +- * BroadcastHashJoin Inner BuildRight (106)
                  :     :- SortMergeJoin LeftSemi (104)
                  :     :  :- * Sort (92)
                  :     :  :  +- Exchange (91)
                  :     :  :     +- * Project (90)
                  :     :  :        +- SortMergeJoin LeftSemi (89)
                  :     :  :           :- * Sort (86)
                  :     :  :           :  +- Exchange (85)
                  :     :  :           :     +- * Filter (84)
                  :     :  :           :        +- * ColumnarToRow (83)
                  :     :  :           :           +- Scan parquet default.web_sales (82)
                  :     :  :           +- * Sort (88)
                  :     :  :              +- ReusedExchange (87)
                  :     :  +- * Sort (103)
                  :     :     +- * Project (102)
                  :     :        +- * Filter (101)
                  :     :           +- * HashAggregate (100)
                  :     :              +- * HashAggregate (99)
                  :     :                 +- * Project (98)
                  :     :                    +- * SortMergeJoin Inner (97)
                  :     :                       :- * Sort (94)
                  :     :                       :  +- ReusedExchange (93)
                  :     :                       +- * Sort (96)
                  :     :                          +- ReusedExchange (95)
                  :     +- ReusedExchange (105)
                  +- SortMergeJoin LeftSemi (121)
                     :- * Sort (109)
                     :  +- ReusedExchange (108)
                     +- * Sort (120)
                        +- * Project (119)
                           +- * Filter (118)
                              +- * HashAggregate (117)
                                 +- * HashAggregate (116)
                                    +- * Project (115)
                                       +- * SortMergeJoin Inner (114)
                                          :- * Sort (111)
                                          :  +- ReusedExchange (110)
                                          +- * Sort (113)
                                             +- ReusedExchange (112)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]

(3) Filter [codegen id : 1]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Condition : (isnotnull(cs_bill_customer_sk#2) AND isnotnull(cs_sold_date_sk#1))

(4) Exchange
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Arguments: hashpartitioning(cs_item_sk#3, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Arguments: [cs_item_sk#3 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#7, ss_item_sk#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(7) ColumnarToRow [codegen id : 5]
Input [2]: [ss_sold_date_sk#7, ss_item_sk#8]

(8) Filter [codegen id : 5]
Input [2]: [ss_sold_date_sk#7, ss_item_sk#8]
Condition : (isnotnull(ss_sold_date_sk#7) AND isnotnull(ss_item_sk#8))

(9) Scan parquet default.date_dim
Output [3]: [d_date_sk#9, d_date#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(10) ColumnarToRow [codegen id : 3]
Input [3]: [d_date_sk#9, d_date#10, d_year#11]

(11) Filter [codegen id : 3]
Input [3]: [d_date_sk#9, d_date#10, d_year#11]
Condition : (d_year#11 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#9))

(12) Project [codegen id : 3]
Output [2]: [d_date_sk#9, d_date#10]
Input [3]: [d_date_sk#9, d_date#10, d_year#11]

(13) BroadcastExchange
Input [2]: [d_date_sk#9, d_date#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(14) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#9]
Join condition: None

(15) Project [codegen id : 5]
Output [2]: [ss_item_sk#8, d_date#10]
Input [4]: [ss_sold_date_sk#7, ss_item_sk#8, d_date_sk#9, d_date#10]

(16) Scan parquet default.item
Output [2]: [i_item_sk#13, i_item_desc#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(17) ColumnarToRow [codegen id : 4]
Input [2]: [i_item_sk#13, i_item_desc#14]

(18) Filter [codegen id : 4]
Input [2]: [i_item_sk#13, i_item_desc#14]
Condition : isnotnull(i_item_sk#13)

(19) Project [codegen id : 4]
Output [2]: [i_item_sk#13, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, i_item_desc#14, 200, false, true) AS i_item_desc#15]
Input [2]: [i_item_sk#13, i_item_desc#14]

(20) BroadcastExchange
Input [2]: [i_item_sk#13, i_item_desc#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(21) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#13]
Join condition: None

(22) Project [codegen id : 5]
Output [3]: [d_date#10, i_item_sk#13, i_item_desc#15]
Input [4]: [ss_item_sk#8, d_date#10, i_item_sk#13, i_item_desc#15]

(23) HashAggregate [codegen id : 5]
Input [3]: [d_date#10, i_item_sk#13, i_item_desc#15]
Keys [3]: [substr(i_item_desc#15, 1, 30) AS substr(i_item_desc#15, 1, 30)#17, i_item_sk#13, d_date#10]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#18]
Results [4]: [substr(i_item_desc#15, 1, 30)#17, i_item_sk#13, d_date#10, count#19]

(24) Exchange
Input [4]: [substr(i_item_desc#15, 1, 30)#17, i_item_sk#13, d_date#10, count#19]
Arguments: hashpartitioning(substr(i_item_desc#15, 1, 30)#17, i_item_sk#13, d_date#10, 5), ENSURE_REQUIREMENTS, [id=#20]

(25) HashAggregate [codegen id : 6]
Input [4]: [substr(i_item_desc#15, 1, 30)#17, i_item_sk#13, d_date#10, count#19]
Keys [3]: [substr(i_item_desc#15, 1, 30)#17, i_item_sk#13, d_date#10]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#21]
Results [2]: [i_item_sk#13 AS item_sk#22, count(1)#21 AS count(1)#23]

(26) Filter [codegen id : 6]
Input [2]: [item_sk#22, count(1)#23]
Condition : (count(1)#23 > 4)

(27) Project [codegen id : 6]
Output [1]: [item_sk#22]
Input [2]: [item_sk#22, count(1)#23]

(28) Exchange
Input [1]: [item_sk#22]
Arguments: hashpartitioning(item_sk#22, 5), ENSURE_REQUIREMENTS, [id=#24]

(29) Sort [codegen id : 7]
Input [1]: [item_sk#22]
Arguments: [item_sk#22 ASC NULLS FIRST], false, 0

(30) SortMergeJoin
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [item_sk#22]
Join condition: None

(31) Project [codegen id : 8]
Output [4]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]

(32) Exchange
Input [4]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]
Arguments: hashpartitioning(cs_bill_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#25]

(33) Sort [codegen id : 9]
Input [4]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]
Arguments: [cs_bill_customer_sk#2 ASC NULLS FIRST], false, 0

(34) Scan parquet default.store_sales
Output [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(35) ColumnarToRow [codegen id : 10]
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]

(36) Filter [codegen id : 10]
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Condition : isnotnull(ss_customer_sk#26)

(37) Exchange
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: hashpartitioning(ss_customer_sk#26, 5), ENSURE_REQUIREMENTS, [id=#29]

(38) Sort [codegen id : 11]
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: [ss_customer_sk#26 ASC NULLS FIRST], false, 0

(39) Scan parquet default.customer
Output [1]: [c_customer_sk#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(40) ColumnarToRow [codegen id : 12]
Input [1]: [c_customer_sk#30]

(41) Filter [codegen id : 12]
Input [1]: [c_customer_sk#30]
Condition : isnotnull(c_customer_sk#30)

(42) Exchange
Input [1]: [c_customer_sk#30]
Arguments: hashpartitioning(c_customer_sk#30, 5), ENSURE_REQUIREMENTS, [id=#31]

(43) Sort [codegen id : 13]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(44) SortMergeJoin [codegen id : 14]
Left keys [1]: [ss_customer_sk#26]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(45) Project [codegen id : 14]
Output [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, c_customer_sk#30]

(46) HashAggregate [codegen id : 14]
Input [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Keys [1]: [c_customer_sk#30]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#32, isEmpty#33]
Results [3]: [c_customer_sk#30, sum#34, isEmpty#35]

(47) HashAggregate [codegen id : 14]
Input [3]: [c_customer_sk#30, sum#34, isEmpty#35]
Keys [1]: [c_customer_sk#30]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#36]
Results [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#36 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37]

(48) Filter [codegen id : 14]
Input [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#38, [id=#39] as decimal(32,6)))), DecimalType(38,8), true)))

(49) Project [codegen id : 14]
Output [1]: [c_customer_sk#30]
Input [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37]

(50) Sort [codegen id : 14]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(51) SortMergeJoin
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(52) Scan parquet default.date_dim
Output [3]: [d_date_sk#9, d_year#11, d_moy#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(53) ColumnarToRow [codegen id : 15]
Input [3]: [d_date_sk#9, d_year#11, d_moy#40]

(54) Filter [codegen id : 15]
Input [3]: [d_date_sk#9, d_year#11, d_moy#40]
Condition : ((((isnotnull(d_year#11) AND isnotnull(d_moy#40)) AND (d_year#11 = 2000)) AND (d_moy#40 = 2)) AND isnotnull(d_date_sk#9))

(55) Project [codegen id : 15]
Output [1]: [d_date_sk#9]
Input [3]: [d_date_sk#9, d_year#11, d_moy#40]

(56) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#41]

(57) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#9]
Join condition: None

(58) Project [codegen id : 16]
Output [3]: [cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5, d_date_sk#9]

(59) Scan parquet default.customer
Output [3]: [c_customer_sk#30, c_first_name#42, c_last_name#43]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(60) ColumnarToRow [codegen id : 17]
Input [3]: [c_customer_sk#30, c_first_name#42, c_last_name#43]

(61) Filter [codegen id : 17]
Input [3]: [c_customer_sk#30, c_first_name#42, c_last_name#43]
Condition : isnotnull(c_customer_sk#30)

(62) Project [codegen id : 17]
Output [3]: [c_customer_sk#30, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#42, 20, false, true) AS c_first_name#44, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#43, 30, false, true) AS c_last_name#45]
Input [3]: [c_customer_sk#30, c_first_name#42, c_last_name#43]

(63) Exchange
Input [3]: [c_customer_sk#30, c_first_name#44, c_last_name#45]
Arguments: hashpartitioning(c_customer_sk#30, 5), ENSURE_REQUIREMENTS, [id=#46]

(64) Sort [codegen id : 18]
Input [3]: [c_customer_sk#30, c_first_name#44, c_last_name#45]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(65) ReusedExchange [Reuses operator id: 37]
Output [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]

(66) Sort [codegen id : 20]
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: [ss_customer_sk#26 ASC NULLS FIRST], false, 0

(67) ReusedExchange [Reuses operator id: 42]
Output [1]: [c_customer_sk#30]

(68) Sort [codegen id : 22]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(69) SortMergeJoin [codegen id : 23]
Left keys [1]: [ss_customer_sk#26]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(70) Project [codegen id : 23]
Output [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, c_customer_sk#30]

(71) HashAggregate [codegen id : 23]
Input [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Keys [1]: [c_customer_sk#30]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#32, isEmpty#33]
Results [3]: [c_customer_sk#30, sum#34, isEmpty#35]

(72) HashAggregate [codegen id : 23]
Input [3]: [c_customer_sk#30, sum#34, isEmpty#35]
Keys [1]: [c_customer_sk#30]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#36]
Results [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#36 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37]

(73) Filter [codegen id : 23]
Input [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#38, [id=#39] as decimal(32,6)))), DecimalType(38,8), true)))

(74) Project [codegen id : 23]
Output [1]: [c_customer_sk#30 AS c_customer_sk#30#47]
Input [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#37]

(75) Sort [codegen id : 23]
Input [1]: [c_customer_sk#30#47]
Arguments: [c_customer_sk#30#47 ASC NULLS FIRST], false, 0

(76) SortMergeJoin
Left keys [1]: [c_customer_sk#30]
Right keys [1]: [c_customer_sk#30#47]
Join condition: None

(77) SortMergeJoin [codegen id : 24]
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(78) Project [codegen id : 24]
Output [4]: [cs_quantity#4, cs_list_price#5, c_first_name#44, c_last_name#45]
Input [6]: [cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5, c_customer_sk#30, c_first_name#44, c_last_name#45]

(79) HashAggregate [codegen id : 24]
Input [4]: [cs_quantity#4, cs_list_price#5, c_first_name#44, c_last_name#45]
Keys [2]: [c_last_name#45, c_first_name#44]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#4 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#5 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#48, isEmpty#49]
Results [4]: [c_last_name#45, c_first_name#44, sum#50, isEmpty#51]

(80) Exchange
Input [4]: [c_last_name#45, c_first_name#44, sum#50, isEmpty#51]
Arguments: hashpartitioning(c_last_name#45, c_first_name#44, 5), ENSURE_REQUIREMENTS, [id=#52]

(81) HashAggregate [codegen id : 25]
Input [4]: [c_last_name#45, c_first_name#44, sum#50, isEmpty#51]
Keys [2]: [c_last_name#45, c_first_name#44]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#4 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#5 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#4 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#5 as decimal(12,2)))), DecimalType(18,2), true))#53]
Results [3]: [c_last_name#45, c_first_name#44, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#4 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#5 as decimal(12,2)))), DecimalType(18,2), true))#53 AS sales#54]

(82) Scan parquet default.web_sales
Output [5]: [ws_sold_date_sk#55, ws_item_sk#56, ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(83) ColumnarToRow [codegen id : 26]
Input [5]: [ws_sold_date_sk#55, ws_item_sk#56, ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59]

(84) Filter [codegen id : 26]
Input [5]: [ws_sold_date_sk#55, ws_item_sk#56, ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59]
Condition : (isnotnull(ws_bill_customer_sk#57) AND isnotnull(ws_sold_date_sk#55))

(85) Exchange
Input [5]: [ws_sold_date_sk#55, ws_item_sk#56, ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59]
Arguments: hashpartitioning(ws_item_sk#56, 5), ENSURE_REQUIREMENTS, [id=#60]

(86) Sort [codegen id : 27]
Input [5]: [ws_sold_date_sk#55, ws_item_sk#56, ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59]
Arguments: [ws_item_sk#56 ASC NULLS FIRST], false, 0

(87) ReusedExchange [Reuses operator id: 28]
Output [1]: [item_sk#22]

(88) Sort [codegen id : 32]
Input [1]: [item_sk#22]
Arguments: [item_sk#22 ASC NULLS FIRST], false, 0

(89) SortMergeJoin
Left keys [1]: [ws_item_sk#56]
Right keys [1]: [item_sk#22]
Join condition: None

(90) Project [codegen id : 33]
Output [4]: [ws_sold_date_sk#55, ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59]
Input [5]: [ws_sold_date_sk#55, ws_item_sk#56, ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59]

(91) Exchange
Input [4]: [ws_sold_date_sk#55, ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59]
Arguments: hashpartitioning(ws_bill_customer_sk#57, 5), ENSURE_REQUIREMENTS, [id=#61]

(92) Sort [codegen id : 34]
Input [4]: [ws_sold_date_sk#55, ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59]
Arguments: [ws_bill_customer_sk#57 ASC NULLS FIRST], false, 0

(93) ReusedExchange [Reuses operator id: 37]
Output [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]

(94) Sort [codegen id : 36]
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: [ss_customer_sk#26 ASC NULLS FIRST], false, 0

(95) ReusedExchange [Reuses operator id: 42]
Output [1]: [c_customer_sk#30]

(96) Sort [codegen id : 38]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(97) SortMergeJoin [codegen id : 39]
Left keys [1]: [ss_customer_sk#26]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(98) Project [codegen id : 39]
Output [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, c_customer_sk#30]

(99) HashAggregate [codegen id : 39]
Input [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Keys [1]: [c_customer_sk#30]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#62, isEmpty#63]
Results [3]: [c_customer_sk#30, sum#64, isEmpty#65]

(100) HashAggregate [codegen id : 39]
Input [3]: [c_customer_sk#30, sum#64, isEmpty#65]
Keys [1]: [c_customer_sk#30]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#66]
Results [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#66 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#67]

(101) Filter [codegen id : 39]
Input [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#67]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#67) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#67 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#38, [id=#39] as decimal(32,6)))), DecimalType(38,8), true)))

(102) Project [codegen id : 39]
Output [1]: [c_customer_sk#30]
Input [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#67]

(103) Sort [codegen id : 39]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(104) SortMergeJoin
Left keys [1]: [ws_bill_customer_sk#57]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(105) ReusedExchange [Reuses operator id: 56]
Output [1]: [d_date_sk#9]

(106) BroadcastHashJoin [codegen id : 41]
Left keys [1]: [ws_sold_date_sk#55]
Right keys [1]: [d_date_sk#9]
Join condition: None

(107) Project [codegen id : 41]
Output [3]: [ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59]
Input [5]: [ws_sold_date_sk#55, ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59, d_date_sk#9]

(108) ReusedExchange [Reuses operator id: 63]
Output [3]: [c_customer_sk#30, c_first_name#68, c_last_name#69]

(109) Sort [codegen id : 43]
Input [3]: [c_customer_sk#30, c_first_name#68, c_last_name#69]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(110) ReusedExchange [Reuses operator id: 37]
Output [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]

(111) Sort [codegen id : 45]
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: [ss_customer_sk#26 ASC NULLS FIRST], false, 0

(112) ReusedExchange [Reuses operator id: 42]
Output [1]: [c_customer_sk#30]

(113) Sort [codegen id : 47]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(114) SortMergeJoin [codegen id : 48]
Left keys [1]: [ss_customer_sk#26]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(115) Project [codegen id : 48]
Output [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, c_customer_sk#30]

(116) HashAggregate [codegen id : 48]
Input [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Keys [1]: [c_customer_sk#30]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#62, isEmpty#63]
Results [3]: [c_customer_sk#30, sum#64, isEmpty#65]

(117) HashAggregate [codegen id : 48]
Input [3]: [c_customer_sk#30, sum#64, isEmpty#65]
Keys [1]: [c_customer_sk#30]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#66]
Results [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#66 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#67]

(118) Filter [codegen id : 48]
Input [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#67]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#67) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#67 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#38, [id=#39] as decimal(32,6)))), DecimalType(38,8), true)))

(119) Project [codegen id : 48]
Output [1]: [c_customer_sk#30 AS c_customer_sk#30#70]
Input [2]: [c_customer_sk#30, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#67]

(120) Sort [codegen id : 48]
Input [1]: [c_customer_sk#30#70]
Arguments: [c_customer_sk#30#70 ASC NULLS FIRST], false, 0

(121) SortMergeJoin
Left keys [1]: [c_customer_sk#30]
Right keys [1]: [c_customer_sk#30#70]
Join condition: None

(122) SortMergeJoin [codegen id : 49]
Left keys [1]: [ws_bill_customer_sk#57]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(123) Project [codegen id : 49]
Output [4]: [ws_quantity#58, ws_list_price#59, c_first_name#68, c_last_name#69]
Input [6]: [ws_bill_customer_sk#57, ws_quantity#58, ws_list_price#59, c_customer_sk#30, c_first_name#68, c_last_name#69]

(124) HashAggregate [codegen id : 49]
Input [4]: [ws_quantity#58, ws_list_price#59, c_first_name#68, c_last_name#69]
Keys [2]: [c_last_name#69, c_first_name#68]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#58 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#59 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#71, isEmpty#72]
Results [4]: [c_last_name#69, c_first_name#68, sum#73, isEmpty#74]

(125) Exchange
Input [4]: [c_last_name#69, c_first_name#68, sum#73, isEmpty#74]
Arguments: hashpartitioning(c_last_name#69, c_first_name#68, 5), ENSURE_REQUIREMENTS, [id=#75]

(126) HashAggregate [codegen id : 50]
Input [4]: [c_last_name#69, c_first_name#68, sum#73, isEmpty#74]
Keys [2]: [c_last_name#69, c_first_name#68]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#58 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#59 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#58 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#59 as decimal(12,2)))), DecimalType(18,2), true))#76]
Results [3]: [c_last_name#69 AS c_last_name#77, c_first_name#68 AS c_first_name#78, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#58 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#59 as decimal(12,2)))), DecimalType(18,2), true))#76 AS sales#79]

(127) Union

(128) TakeOrderedAndProject
Input [3]: [c_last_name#45, c_first_name#44, sales#54]
Arguments: 100, [c_last_name#45 ASC NULLS FIRST, c_first_name#44 ASC NULLS FIRST, sales#54 ASC NULLS FIRST], [c_last_name#45, c_first_name#44, sales#54]

===== Subqueries =====

Subquery:1 Hosting operator id = 48 Hosting Expression = Subquery scalar-subquery#38, [id=#39]
* HashAggregate (152)
+- Exchange (151)
   +- * HashAggregate (150)
      +- * HashAggregate (149)
         +- * HashAggregate (148)
            +- * Project (147)
               +- * SortMergeJoin Inner (146)
                  :- * Sort (140)
                  :  +- Exchange (139)
                  :     +- * Project (138)
                  :        +- * BroadcastHashJoin Inner BuildRight (137)
                  :           :- * Filter (131)
                  :           :  +- * ColumnarToRow (130)
                  :           :     +- Scan parquet default.store_sales (129)
                  :           +- BroadcastExchange (136)
                  :              +- * Project (135)
                  :                 +- * Filter (134)
                  :                    +- * ColumnarToRow (133)
                  :                       +- Scan parquet default.date_dim (132)
                  +- * Sort (145)
                     +- Exchange (144)
                        +- * Filter (143)
                           +- * ColumnarToRow (142)
                              +- Scan parquet default.customer (141)


(129) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#7, ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(130) ColumnarToRow [codegen id : 2]
Input [4]: [ss_sold_date_sk#7, ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]

(131) Filter [codegen id : 2]
Input [4]: [ss_sold_date_sk#7, ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Condition : (isnotnull(ss_customer_sk#26) AND isnotnull(ss_sold_date_sk#7))

(132) Scan parquet default.date_dim
Output [2]: [d_date_sk#9, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(133) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#11]

(134) Filter [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#11]
Condition : (d_year#11 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#9))

(135) Project [codegen id : 1]
Output [1]: [d_date_sk#9]
Input [2]: [d_date_sk#9, d_year#11]

(136) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#80]

(137) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#9]
Join condition: None

(138) Project [codegen id : 2]
Output [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Input [5]: [ss_sold_date_sk#7, ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, d_date_sk#9]

(139) Exchange
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: hashpartitioning(ss_customer_sk#26, 5), ENSURE_REQUIREMENTS, [id=#81]

(140) Sort [codegen id : 3]
Input [3]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28]
Arguments: [ss_customer_sk#26 ASC NULLS FIRST], false, 0

(141) Scan parquet default.customer
Output [1]: [c_customer_sk#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(142) ColumnarToRow [codegen id : 4]
Input [1]: [c_customer_sk#30]

(143) Filter [codegen id : 4]
Input [1]: [c_customer_sk#30]
Condition : isnotnull(c_customer_sk#30)

(144) Exchange
Input [1]: [c_customer_sk#30]
Arguments: hashpartitioning(c_customer_sk#30, 5), ENSURE_REQUIREMENTS, [id=#82]

(145) Sort [codegen id : 5]
Input [1]: [c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(146) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#26]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(147) Project [codegen id : 6]
Output [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Input [4]: [ss_customer_sk#26, ss_quantity#27, ss_sales_price#28, c_customer_sk#30]

(148) HashAggregate [codegen id : 6]
Input [3]: [ss_quantity#27, ss_sales_price#28, c_customer_sk#30]
Keys [1]: [c_customer_sk#30]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#83, isEmpty#84]
Results [3]: [c_customer_sk#30, sum#85, isEmpty#86]

(149) HashAggregate [codegen id : 6]
Input [3]: [c_customer_sk#30, sum#85, isEmpty#86]
Keys [1]: [c_customer_sk#30]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#87]
Results [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#27 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#28 as decimal(12,2)))), DecimalType(18,2), true))#87 AS csales#88]

(150) HashAggregate [codegen id : 6]
Input [1]: [csales#88]
Keys: []
Functions [1]: [partial_max(csales#88)]
Aggregate Attributes [1]: [max#89]
Results [1]: [max#90]

(151) Exchange
Input [1]: [max#90]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#91]

(152) HashAggregate [codegen id : 7]
Input [1]: [max#90]
Keys: []
Functions [1]: [max(csales#88)]
Aggregate Attributes [1]: [max(csales#88)#92]
Results [1]: [max(csales#88)#92 AS tpcds_cmax#93]

Subquery:2 Hosting operator id = 73 Hosting Expression = ReusedSubquery Subquery scalar-subquery#38, [id=#39]

Subquery:3 Hosting operator id = 101 Hosting Expression = ReusedSubquery Subquery scalar-subquery#38, [id=#39]

Subquery:4 Hosting operator id = 118 Hosting Expression = ReusedSubquery Subquery scalar-subquery#38, [id=#39]


