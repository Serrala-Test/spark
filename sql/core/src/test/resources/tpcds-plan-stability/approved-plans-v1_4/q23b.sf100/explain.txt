== Physical Plan ==
TakeOrderedAndProject (139)
+- Union (138)
   :- * HashAggregate (80)
   :  +- Exchange (79)
   :     +- * HashAggregate (78)
   :        +- * Project (77)
   :           +- * BroadcastHashJoin Inner BuildRight (76)
   :              :- * Project (70)
   :              :  +- * SortMergeJoin Inner (69)
   :              :     :- SortMergeJoin LeftSemi (51)
   :              :     :  :- * Sort (33)
   :              :     :  :  +- Exchange (32)
   :              :     :  :     +- * Project (31)
   :              :     :  :        +- SortMergeJoin LeftSemi (30)
   :              :     :  :           :- * Sort (5)
   :              :     :  :           :  +- Exchange (4)
   :              :     :  :           :     +- * Filter (3)
   :              :     :  :           :        +- * ColumnarToRow (2)
   :              :     :  :           :           +- Scan parquet default.catalog_sales (1)
   :              :     :  :           +- * Sort (29)
   :              :     :  :              +- * Project (28)
   :              :     :  :                 +- * Filter (27)
   :              :     :  :                    +- * HashAggregate (26)
   :              :     :  :                       +- * HashAggregate (25)
   :              :     :  :                          +- * Project (24)
   :              :     :  :                             +- * BroadcastHashJoin Inner BuildRight (23)
   :              :     :  :                                :- * Project (17)
   :              :     :  :                                :  +- * SortMergeJoin Inner (16)
   :              :     :  :                                :     :- * Sort (10)
   :              :     :  :                                :     :  +- Exchange (9)
   :              :     :  :                                :     :     +- * Filter (8)
   :              :     :  :                                :     :        +- * ColumnarToRow (7)
   :              :     :  :                                :     :           +- Scan parquet default.store_sales (6)
   :              :     :  :                                :     +- * Sort (15)
   :              :     :  :                                :        +- Exchange (14)
   :              :     :  :                                :           +- * Filter (13)
   :              :     :  :                                :              +- * ColumnarToRow (12)
   :              :     :  :                                :                 +- Scan parquet default.item (11)
   :              :     :  :                                +- BroadcastExchange (22)
   :              :     :  :                                   +- * Project (21)
   :              :     :  :                                      +- * Filter (20)
   :              :     :  :                                         +- * ColumnarToRow (19)
   :              :     :  :                                            +- Scan parquet default.date_dim (18)
   :              :     :  +- * Sort (50)
   :              :     :     +- * Project (49)
   :              :     :        +- * Filter (48)
   :              :     :           +- * HashAggregate (47)
   :              :     :              +- * HashAggregate (46)
   :              :     :                 +- * Project (45)
   :              :     :                    +- * SortMergeJoin Inner (44)
   :              :     :                       :- * Sort (38)
   :              :     :                       :  +- Exchange (37)
   :              :     :                       :     +- * Filter (36)
   :              :     :                       :        +- * ColumnarToRow (35)
   :              :     :                       :           +- Scan parquet default.store_sales (34)
   :              :     :                       +- * Sort (43)
   :              :     :                          +- Exchange (42)
   :              :     :                             +- * Filter (41)
   :              :     :                                +- * ColumnarToRow (40)
   :              :     :                                   +- Scan parquet default.customer (39)
   :              :     +- SortMergeJoin LeftSemi (68)
   :              :        :- * Sort (56)
   :              :        :  +- Exchange (55)
   :              :        :     +- * Filter (54)
   :              :        :        +- * ColumnarToRow (53)
   :              :        :           +- Scan parquet default.customer (52)
   :              :        +- * Sort (67)
   :              :           +- * Project (66)
   :              :              +- * Filter (65)
   :              :                 +- * HashAggregate (64)
   :              :                    +- * HashAggregate (63)
   :              :                       +- * Project (62)
   :              :                          +- * SortMergeJoin Inner (61)
   :              :                             :- * Sort (58)
   :              :                             :  +- ReusedExchange (57)
   :              :                             +- * Sort (60)
   :              :                                +- ReusedExchange (59)
   :              +- BroadcastExchange (75)
   :                 +- * Project (74)
   :                    +- * Filter (73)
   :                       +- * ColumnarToRow (72)
   :                          +- Scan parquet default.date_dim (71)
   +- * HashAggregate (137)
      +- Exchange (136)
         +- * HashAggregate (135)
            +- * Project (134)
               +- * BroadcastHashJoin Inner BuildRight (133)
                  :- * Project (131)
                  :  +- * SortMergeJoin Inner (130)
                  :     :- SortMergeJoin LeftSemi (115)
                  :     :  :- * Sort (103)
                  :     :  :  +- Exchange (102)
                  :     :  :     +- * Project (101)
                  :     :  :        +- SortMergeJoin LeftSemi (100)
                  :     :  :           :- * Sort (85)
                  :     :  :           :  +- Exchange (84)
                  :     :  :           :     +- * Filter (83)
                  :     :  :           :        +- * ColumnarToRow (82)
                  :     :  :           :           +- Scan parquet default.web_sales (81)
                  :     :  :           +- * Sort (99)
                  :     :  :              +- * Project (98)
                  :     :  :                 +- * Filter (97)
                  :     :  :                    +- * HashAggregate (96)
                  :     :  :                       +- * HashAggregate (95)
                  :     :  :                          +- * Project (94)
                  :     :  :                             +- * BroadcastHashJoin Inner BuildRight (93)
                  :     :  :                                :- * Project (91)
                  :     :  :                                :  +- * SortMergeJoin Inner (90)
                  :     :  :                                :     :- * Sort (87)
                  :     :  :                                :     :  +- ReusedExchange (86)
                  :     :  :                                :     +- * Sort (89)
                  :     :  :                                :        +- ReusedExchange (88)
                  :     :  :                                +- ReusedExchange (92)
                  :     :  +- * Sort (114)
                  :     :     +- * Project (113)
                  :     :        +- * Filter (112)
                  :     :           +- * HashAggregate (111)
                  :     :              +- * HashAggregate (110)
                  :     :                 +- * Project (109)
                  :     :                    +- * SortMergeJoin Inner (108)
                  :     :                       :- * Sort (105)
                  :     :                       :  +- ReusedExchange (104)
                  :     :                       +- * Sort (107)
                  :     :                          +- ReusedExchange (106)
                  :     +- SortMergeJoin LeftSemi (129)
                  :        :- * Sort (117)
                  :        :  +- ReusedExchange (116)
                  :        +- * Sort (128)
                  :           +- * Project (127)
                  :              +- * Filter (126)
                  :                 +- * HashAggregate (125)
                  :                    +- * HashAggregate (124)
                  :                       +- * Project (123)
                  :                          +- * SortMergeJoin Inner (122)
                  :                             :- * Sort (119)
                  :                             :  +- ReusedExchange (118)
                  :                             +- * Sort (121)
                  :                                +- ReusedExchange (120)
                  +- ReusedExchange (132)


(1) Scan parquet default.catalog_sales
Output [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]

(3) Filter [codegen id : 1]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Condition : (isnotnull(cs_bill_customer_sk#2) AND isnotnull(cs_sold_date_sk#1))

(4) Exchange
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Arguments: hashpartitioning(cs_item_sk#3, 5), ENSURE_REQUIREMENTS, [id=#6]

(5) Sort [codegen id : 2]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]
Arguments: [cs_item_sk#3 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#7, ss_item_sk#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int>

(7) ColumnarToRow [codegen id : 3]
Input [2]: [ss_sold_date_sk#7, ss_item_sk#8]

(8) Filter [codegen id : 3]
Input [2]: [ss_sold_date_sk#7, ss_item_sk#8]
Condition : (isnotnull(ss_sold_date_sk#7) AND isnotnull(ss_item_sk#8))

(9) Exchange
Input [2]: [ss_sold_date_sk#7, ss_item_sk#8]
Arguments: hashpartitioning(ss_item_sk#8, 5), ENSURE_REQUIREMENTS, [id=#9]

(10) Sort [codegen id : 4]
Input [2]: [ss_sold_date_sk#7, ss_item_sk#8]
Arguments: [ss_item_sk#8 ASC NULLS FIRST], false, 0

(11) Scan parquet default.item
Output [2]: [i_item_sk#10, i_item_desc#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(12) ColumnarToRow [codegen id : 5]
Input [2]: [i_item_sk#10, i_item_desc#11]

(13) Filter [codegen id : 5]
Input [2]: [i_item_sk#10, i_item_desc#11]
Condition : isnotnull(i_item_sk#10)

(14) Exchange
Input [2]: [i_item_sk#10, i_item_desc#11]
Arguments: hashpartitioning(i_item_sk#10, 5), ENSURE_REQUIREMENTS, [id=#12]

(15) Sort [codegen id : 6]
Input [2]: [i_item_sk#10, i_item_desc#11]
Arguments: [i_item_sk#10 ASC NULLS FIRST], false, 0

(16) SortMergeJoin [codegen id : 8]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#10]
Join condition: None

(17) Project [codegen id : 8]
Output [3]: [ss_sold_date_sk#7, i_item_sk#10, i_item_desc#11]
Input [4]: [ss_sold_date_sk#7, ss_item_sk#8, i_item_sk#10, i_item_desc#11]

(18) Scan parquet default.date_dim
Output [3]: [d_date_sk#13, d_date#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(19) ColumnarToRow [codegen id : 7]
Input [3]: [d_date_sk#13, d_date#14, d_year#15]

(20) Filter [codegen id : 7]
Input [3]: [d_date_sk#13, d_date#14, d_year#15]
Condition : (d_year#15 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#13))

(21) Project [codegen id : 7]
Output [2]: [d_date_sk#13, d_date#14]
Input [3]: [d_date_sk#13, d_date#14, d_year#15]

(22) BroadcastExchange
Input [2]: [d_date_sk#13, d_date#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(23) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#13]
Join condition: None

(24) Project [codegen id : 8]
Output [3]: [d_date#14, i_item_sk#10, i_item_desc#11]
Input [5]: [ss_sold_date_sk#7, i_item_sk#10, i_item_desc#11, d_date_sk#13, d_date#14]

(25) HashAggregate [codegen id : 8]
Input [3]: [d_date#14, i_item_sk#10, i_item_desc#11]
Keys [3]: [substr(i_item_desc#11, 1, 30) AS substr(i_item_desc#11, 1, 30)#17, i_item_sk#10, d_date#14]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#18]
Results [4]: [substr(i_item_desc#11, 1, 30)#17, i_item_sk#10, d_date#14, count#19]

(26) HashAggregate [codegen id : 8]
Input [4]: [substr(i_item_desc#11, 1, 30)#17, i_item_sk#10, d_date#14, count#19]
Keys [3]: [substr(i_item_desc#11, 1, 30)#17, i_item_sk#10, d_date#14]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#20]
Results [2]: [i_item_sk#10 AS item_sk#21, count(1)#20 AS count(1)#22]

(27) Filter [codegen id : 8]
Input [2]: [item_sk#21, count(1)#22]
Condition : (count(1)#22 > 4)

(28) Project [codegen id : 8]
Output [1]: [item_sk#21]
Input [2]: [item_sk#21, count(1)#22]

(29) Sort [codegen id : 8]
Input [1]: [item_sk#21]
Arguments: [item_sk#21 ASC NULLS FIRST], false, 0

(30) SortMergeJoin
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [item_sk#21]
Join condition: None

(31) Project [codegen id : 9]
Output [4]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]
Input [5]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5]

(32) Exchange
Input [4]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]
Arguments: hashpartitioning(cs_bill_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#23]

(33) Sort [codegen id : 10]
Input [4]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5]
Arguments: [cs_bill_customer_sk#2 ASC NULLS FIRST], false, 0

(34) Scan parquet default.store_sales
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(35) ColumnarToRow [codegen id : 11]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]

(36) Filter [codegen id : 11]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Condition : isnotnull(ss_customer_sk#24)

(37) Exchange
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: hashpartitioning(ss_customer_sk#24, 5), ENSURE_REQUIREMENTS, [id=#27]

(38) Sort [codegen id : 12]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: [ss_customer_sk#24 ASC NULLS FIRST], false, 0

(39) Scan parquet default.customer
Output [1]: [c_customer_sk#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(40) ColumnarToRow [codegen id : 13]
Input [1]: [c_customer_sk#28]

(41) Filter [codegen id : 13]
Input [1]: [c_customer_sk#28]
Condition : isnotnull(c_customer_sk#28)

(42) Exchange
Input [1]: [c_customer_sk#28]
Arguments: hashpartitioning(c_customer_sk#28, 5), ENSURE_REQUIREMENTS, [id=#29]

(43) Sort [codegen id : 14]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(44) SortMergeJoin [codegen id : 15]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#28]
Join condition: None

(45) Project [codegen id : 15]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#28]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#28]

(46) HashAggregate [codegen id : 15]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#28]
Keys [1]: [c_customer_sk#28]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#30, isEmpty#31]
Results [3]: [c_customer_sk#28, sum#32, isEmpty#33]

(47) HashAggregate [codegen id : 15]
Input [3]: [c_customer_sk#28, sum#32, isEmpty#33]
Keys [1]: [c_customer_sk#28]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#34]
Results [2]: [c_customer_sk#28, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#34 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]

(48) Filter [codegen id : 15]
Input [2]: [c_customer_sk#28, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(Subquery scalar-subquery#36, [id=#37] as decimal(32,6)))), DecimalType(38,8), true)))

(49) Project [codegen id : 15]
Output [1]: [c_customer_sk#28]
Input [2]: [c_customer_sk#28, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]

(50) Sort [codegen id : 15]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(51) SortMergeJoin
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#28]
Join condition: None

(52) Scan parquet default.customer
Output [3]: [c_customer_sk#28, c_first_name#38, c_last_name#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(53) ColumnarToRow [codegen id : 16]
Input [3]: [c_customer_sk#28, c_first_name#38, c_last_name#39]

(54) Filter [codegen id : 16]
Input [3]: [c_customer_sk#28, c_first_name#38, c_last_name#39]
Condition : isnotnull(c_customer_sk#28)

(55) Exchange
Input [3]: [c_customer_sk#28, c_first_name#38, c_last_name#39]
Arguments: hashpartitioning(c_customer_sk#28, 5), ENSURE_REQUIREMENTS, [id=#40]

(56) Sort [codegen id : 17]
Input [3]: [c_customer_sk#28, c_first_name#38, c_last_name#39]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(57) ReusedExchange [Reuses operator id: 37]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]

(58) Sort [codegen id : 19]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: [ss_customer_sk#24 ASC NULLS FIRST], false, 0

(59) ReusedExchange [Reuses operator id: 42]
Output [1]: [c_customer_sk#28]

(60) Sort [codegen id : 21]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(61) SortMergeJoin [codegen id : 22]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#28]
Join condition: None

(62) Project [codegen id : 22]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#28]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#28]

(63) HashAggregate [codegen id : 22]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#28]
Keys [1]: [c_customer_sk#28]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#30, isEmpty#31]
Results [3]: [c_customer_sk#28, sum#32, isEmpty#33]

(64) HashAggregate [codegen id : 22]
Input [3]: [c_customer_sk#28, sum#32, isEmpty#33]
Keys [1]: [c_customer_sk#28]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#34]
Results [2]: [c_customer_sk#28, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#34 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]

(65) Filter [codegen id : 22]
Input [2]: [c_customer_sk#28, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#36, [id=#37] as decimal(32,6)))), DecimalType(38,8), true)))

(66) Project [codegen id : 22]
Output [1]: [c_customer_sk#28 AS c_customer_sk#28#41]
Input [2]: [c_customer_sk#28, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#35]

(67) Sort [codegen id : 22]
Input [1]: [c_customer_sk#28#41]
Arguments: [c_customer_sk#28#41 ASC NULLS FIRST], false, 0

(68) SortMergeJoin
Left keys [1]: [c_customer_sk#28]
Right keys [1]: [c_customer_sk#28#41]
Join condition: None

(69) SortMergeJoin [codegen id : 24]
Left keys [1]: [cs_bill_customer_sk#2]
Right keys [1]: [c_customer_sk#28]
Join condition: None

(70) Project [codegen id : 24]
Output [5]: [cs_sold_date_sk#1, cs_quantity#4, cs_list_price#5, c_first_name#38, c_last_name#39]
Input [7]: [cs_sold_date_sk#1, cs_bill_customer_sk#2, cs_quantity#4, cs_list_price#5, c_customer_sk#28, c_first_name#38, c_last_name#39]

(71) Scan parquet default.date_dim
Output [3]: [d_date_sk#13, d_year#15, d_moy#42]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(72) ColumnarToRow [codegen id : 23]
Input [3]: [d_date_sk#13, d_year#15, d_moy#42]

(73) Filter [codegen id : 23]
Input [3]: [d_date_sk#13, d_year#15, d_moy#42]
Condition : ((((isnotnull(d_year#15) AND isnotnull(d_moy#42)) AND (d_year#15 = 2000)) AND (d_moy#42 = 2)) AND isnotnull(d_date_sk#13))

(74) Project [codegen id : 23]
Output [1]: [d_date_sk#13]
Input [3]: [d_date_sk#13, d_year#15, d_moy#42]

(75) BroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#43]

(76) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#13]
Join condition: None

(77) Project [codegen id : 24]
Output [4]: [cs_quantity#4, cs_list_price#5, c_first_name#38, c_last_name#39]
Input [6]: [cs_sold_date_sk#1, cs_quantity#4, cs_list_price#5, c_first_name#38, c_last_name#39, d_date_sk#13]

(78) HashAggregate [codegen id : 24]
Input [4]: [cs_quantity#4, cs_list_price#5, c_first_name#38, c_last_name#39]
Keys [2]: [c_last_name#39, c_first_name#38]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#4 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#5 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#44, isEmpty#45]
Results [4]: [c_last_name#39, c_first_name#38, sum#46, isEmpty#47]

(79) Exchange
Input [4]: [c_last_name#39, c_first_name#38, sum#46, isEmpty#47]
Arguments: hashpartitioning(c_last_name#39, c_first_name#38, 5), ENSURE_REQUIREMENTS, [id=#48]

(80) HashAggregate [codegen id : 25]
Input [4]: [c_last_name#39, c_first_name#38, sum#46, isEmpty#47]
Keys [2]: [c_last_name#39, c_first_name#38]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#4 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#5 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#4 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#5 as decimal(12,2)))), DecimalType(18,2), true))#49]
Results [3]: [c_last_name#39, c_first_name#38, sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#4 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#5 as decimal(12,2)))), DecimalType(18,2), true))#49 AS sales#50]

(81) Scan parquet default.web_sales
Output [5]: [ws_sold_date_sk#51, ws_item_sk#52, ws_bill_customer_sk#53, ws_quantity#54, ws_list_price#55]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(82) ColumnarToRow [codegen id : 26]
Input [5]: [ws_sold_date_sk#51, ws_item_sk#52, ws_bill_customer_sk#53, ws_quantity#54, ws_list_price#55]

(83) Filter [codegen id : 26]
Input [5]: [ws_sold_date_sk#51, ws_item_sk#52, ws_bill_customer_sk#53, ws_quantity#54, ws_list_price#55]
Condition : (isnotnull(ws_bill_customer_sk#53) AND isnotnull(ws_sold_date_sk#51))

(84) Exchange
Input [5]: [ws_sold_date_sk#51, ws_item_sk#52, ws_bill_customer_sk#53, ws_quantity#54, ws_list_price#55]
Arguments: hashpartitioning(ws_item_sk#52, 5), ENSURE_REQUIREMENTS, [id=#56]

(85) Sort [codegen id : 27]
Input [5]: [ws_sold_date_sk#51, ws_item_sk#52, ws_bill_customer_sk#53, ws_quantity#54, ws_list_price#55]
Arguments: [ws_item_sk#52 ASC NULLS FIRST], false, 0

(86) ReusedExchange [Reuses operator id: 9]
Output [2]: [ss_sold_date_sk#7, ss_item_sk#8]

(87) Sort [codegen id : 29]
Input [2]: [ss_sold_date_sk#7, ss_item_sk#8]
Arguments: [ss_item_sk#8 ASC NULLS FIRST], false, 0

(88) ReusedExchange [Reuses operator id: 14]
Output [2]: [i_item_sk#10, i_item_desc#11]

(89) Sort [codegen id : 31]
Input [2]: [i_item_sk#10, i_item_desc#11]
Arguments: [i_item_sk#10 ASC NULLS FIRST], false, 0

(90) SortMergeJoin [codegen id : 33]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#10]
Join condition: None

(91) Project [codegen id : 33]
Output [3]: [ss_sold_date_sk#7, i_item_sk#10, i_item_desc#11]
Input [4]: [ss_sold_date_sk#7, ss_item_sk#8, i_item_sk#10, i_item_desc#11]

(92) ReusedExchange [Reuses operator id: 22]
Output [2]: [d_date_sk#13, d_date#14]

(93) BroadcastHashJoin [codegen id : 33]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#13]
Join condition: None

(94) Project [codegen id : 33]
Output [3]: [d_date#14, i_item_sk#10, i_item_desc#11]
Input [5]: [ss_sold_date_sk#7, i_item_sk#10, i_item_desc#11, d_date_sk#13, d_date#14]

(95) HashAggregate [codegen id : 33]
Input [3]: [d_date#14, i_item_sk#10, i_item_desc#11]
Keys [3]: [substr(i_item_desc#11, 1, 30) AS substr(i_item_desc#11, 1, 30)#57, i_item_sk#10, d_date#14]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#58]
Results [4]: [substr(i_item_desc#11, 1, 30)#57, i_item_sk#10, d_date#14, count#59]

(96) HashAggregate [codegen id : 33]
Input [4]: [substr(i_item_desc#11, 1, 30)#57, i_item_sk#10, d_date#14, count#59]
Keys [3]: [substr(i_item_desc#11, 1, 30)#57, i_item_sk#10, d_date#14]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#60]
Results [2]: [i_item_sk#10 AS item_sk#21, count(1)#60 AS count(1)#61]

(97) Filter [codegen id : 33]
Input [2]: [item_sk#21, count(1)#61]
Condition : (count(1)#61 > 4)

(98) Project [codegen id : 33]
Output [1]: [item_sk#21]
Input [2]: [item_sk#21, count(1)#61]

(99) Sort [codegen id : 33]
Input [1]: [item_sk#21]
Arguments: [item_sk#21 ASC NULLS FIRST], false, 0

(100) SortMergeJoin
Left keys [1]: [ws_item_sk#52]
Right keys [1]: [item_sk#21]
Join condition: None

(101) Project [codegen id : 34]
Output [4]: [ws_sold_date_sk#51, ws_bill_customer_sk#53, ws_quantity#54, ws_list_price#55]
Input [5]: [ws_sold_date_sk#51, ws_item_sk#52, ws_bill_customer_sk#53, ws_quantity#54, ws_list_price#55]

(102) Exchange
Input [4]: [ws_sold_date_sk#51, ws_bill_customer_sk#53, ws_quantity#54, ws_list_price#55]
Arguments: hashpartitioning(ws_bill_customer_sk#53, 5), ENSURE_REQUIREMENTS, [id=#62]

(103) Sort [codegen id : 35]
Input [4]: [ws_sold_date_sk#51, ws_bill_customer_sk#53, ws_quantity#54, ws_list_price#55]
Arguments: [ws_bill_customer_sk#53 ASC NULLS FIRST], false, 0

(104) ReusedExchange [Reuses operator id: 37]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]

(105) Sort [codegen id : 37]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: [ss_customer_sk#24 ASC NULLS FIRST], false, 0

(106) ReusedExchange [Reuses operator id: 42]
Output [1]: [c_customer_sk#28]

(107) Sort [codegen id : 39]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(108) SortMergeJoin [codegen id : 40]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#28]
Join condition: None

(109) Project [codegen id : 40]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#28]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#28]

(110) HashAggregate [codegen id : 40]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#28]
Keys [1]: [c_customer_sk#28]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#63, isEmpty#64]
Results [3]: [c_customer_sk#28, sum#65, isEmpty#66]

(111) HashAggregate [codegen id : 40]
Input [3]: [c_customer_sk#28, sum#65, isEmpty#66]
Keys [1]: [c_customer_sk#28]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#67]
Results [2]: [c_customer_sk#28, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#67 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#68]

(112) Filter [codegen id : 40]
Input [2]: [c_customer_sk#28, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#68]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#68) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#68 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#36, [id=#37] as decimal(32,6)))), DecimalType(38,8), true)))

(113) Project [codegen id : 40]
Output [1]: [c_customer_sk#28]
Input [2]: [c_customer_sk#28, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#68]

(114) Sort [codegen id : 40]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(115) SortMergeJoin
Left keys [1]: [ws_bill_customer_sk#53]
Right keys [1]: [c_customer_sk#28]
Join condition: None

(116) ReusedExchange [Reuses operator id: 55]
Output [3]: [c_customer_sk#28, c_first_name#38, c_last_name#39]

(117) Sort [codegen id : 42]
Input [3]: [c_customer_sk#28, c_first_name#38, c_last_name#39]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(118) ReusedExchange [Reuses operator id: 37]
Output [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]

(119) Sort [codegen id : 44]
Input [3]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: [ss_customer_sk#24 ASC NULLS FIRST], false, 0

(120) ReusedExchange [Reuses operator id: 42]
Output [1]: [c_customer_sk#28]

(121) Sort [codegen id : 46]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(122) SortMergeJoin [codegen id : 47]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#28]
Join condition: None

(123) Project [codegen id : 47]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#28]
Input [4]: [ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#28]

(124) HashAggregate [codegen id : 47]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#28]
Keys [1]: [c_customer_sk#28]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#63, isEmpty#64]
Results [3]: [c_customer_sk#28, sum#65, isEmpty#66]

(125) HashAggregate [codegen id : 47]
Input [3]: [c_customer_sk#28, sum#65, isEmpty#66]
Keys [1]: [c_customer_sk#28]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#67]
Results [2]: [c_customer_sk#28, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#67 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#68]

(126) Filter [codegen id : 47]
Input [2]: [c_customer_sk#28, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#68]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#68) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#68 as decimal(38,8)) > CheckOverflow((0.500000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#36, [id=#37] as decimal(32,6)))), DecimalType(38,8), true)))

(127) Project [codegen id : 47]
Output [1]: [c_customer_sk#28 AS c_customer_sk#28#69]
Input [2]: [c_customer_sk#28, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#68]

(128) Sort [codegen id : 47]
Input [1]: [c_customer_sk#28#69]
Arguments: [c_customer_sk#28#69 ASC NULLS FIRST], false, 0

(129) SortMergeJoin
Left keys [1]: [c_customer_sk#28]
Right keys [1]: [c_customer_sk#28#69]
Join condition: None

(130) SortMergeJoin [codegen id : 49]
Left keys [1]: [ws_bill_customer_sk#53]
Right keys [1]: [c_customer_sk#28]
Join condition: None

(131) Project [codegen id : 49]
Output [5]: [ws_sold_date_sk#51, ws_quantity#54, ws_list_price#55, c_first_name#38, c_last_name#39]
Input [7]: [ws_sold_date_sk#51, ws_bill_customer_sk#53, ws_quantity#54, ws_list_price#55, c_customer_sk#28, c_first_name#38, c_last_name#39]

(132) ReusedExchange [Reuses operator id: 75]
Output [1]: [d_date_sk#13]

(133) BroadcastHashJoin [codegen id : 49]
Left keys [1]: [ws_sold_date_sk#51]
Right keys [1]: [d_date_sk#13]
Join condition: None

(134) Project [codegen id : 49]
Output [4]: [ws_quantity#54, ws_list_price#55, c_first_name#38, c_last_name#39]
Input [6]: [ws_sold_date_sk#51, ws_quantity#54, ws_list_price#55, c_first_name#38, c_last_name#39, d_date_sk#13]

(135) HashAggregate [codegen id : 49]
Input [4]: [ws_quantity#54, ws_list_price#55, c_first_name#38, c_last_name#39]
Keys [2]: [c_last_name#39, c_first_name#38]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#54 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#55 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#70, isEmpty#71]
Results [4]: [c_last_name#39, c_first_name#38, sum#72, isEmpty#73]

(136) Exchange
Input [4]: [c_last_name#39, c_first_name#38, sum#72, isEmpty#73]
Arguments: hashpartitioning(c_last_name#39, c_first_name#38, 5), ENSURE_REQUIREMENTS, [id=#74]

(137) HashAggregate [codegen id : 50]
Input [4]: [c_last_name#39, c_first_name#38, sum#72, isEmpty#73]
Keys [2]: [c_last_name#39, c_first_name#38]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#54 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#55 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#54 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#55 as decimal(12,2)))), DecimalType(18,2), true))#75]
Results [3]: [c_last_name#39, c_first_name#38, sum(CheckOverflow((promote_precision(cast(cast(ws_quantity#54 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#55 as decimal(12,2)))), DecimalType(18,2), true))#75 AS sales#76]

(138) Union

(139) TakeOrderedAndProject
Input [3]: [c_last_name#39, c_first_name#38, sales#50]
Arguments: 100, [c_last_name#39 ASC NULLS FIRST, c_first_name#38 ASC NULLS FIRST, sales#50 ASC NULLS FIRST], [c_last_name#39, c_first_name#38, sales#50]

===== Subqueries =====

Subquery:1 Hosting operator id = 48 Hosting Expression = Subquery scalar-subquery#36, [id=#37]
* HashAggregate (163)
+- Exchange (162)
   +- * HashAggregate (161)
      +- * HashAggregate (160)
         +- * HashAggregate (159)
            +- * Project (158)
               +- * BroadcastHashJoin Inner BuildRight (157)
                  :- * Project (151)
                  :  +- * SortMergeJoin Inner (150)
                  :     :- * Sort (144)
                  :     :  +- Exchange (143)
                  :     :     +- * Filter (142)
                  :     :        +- * ColumnarToRow (141)
                  :     :           +- Scan parquet default.store_sales (140)
                  :     +- * Sort (149)
                  :        +- Exchange (148)
                  :           +- * Filter (147)
                  :              +- * ColumnarToRow (146)
                  :                 +- Scan parquet default.customer (145)
                  +- BroadcastExchange (156)
                     +- * Project (155)
                        +- * Filter (154)
                           +- * ColumnarToRow (153)
                              +- Scan parquet default.date_dim (152)


(140) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#7, ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(141) ColumnarToRow [codegen id : 1]
Input [4]: [ss_sold_date_sk#7, ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]

(142) Filter [codegen id : 1]
Input [4]: [ss_sold_date_sk#7, ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Condition : (isnotnull(ss_customer_sk#24) AND isnotnull(ss_sold_date_sk#7))

(143) Exchange
Input [4]: [ss_sold_date_sk#7, ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: hashpartitioning(ss_customer_sk#24, 5), ENSURE_REQUIREMENTS, [id=#77]

(144) Sort [codegen id : 2]
Input [4]: [ss_sold_date_sk#7, ss_customer_sk#24, ss_quantity#25, ss_sales_price#26]
Arguments: [ss_customer_sk#24 ASC NULLS FIRST], false, 0

(145) Scan parquet default.customer
Output [1]: [c_customer_sk#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(146) ColumnarToRow [codegen id : 3]
Input [1]: [c_customer_sk#28]

(147) Filter [codegen id : 3]
Input [1]: [c_customer_sk#28]
Condition : isnotnull(c_customer_sk#28)

(148) Exchange
Input [1]: [c_customer_sk#28]
Arguments: hashpartitioning(c_customer_sk#28, 5), ENSURE_REQUIREMENTS, [id=#78]

(149) Sort [codegen id : 4]
Input [1]: [c_customer_sk#28]
Arguments: [c_customer_sk#28 ASC NULLS FIRST], false, 0

(150) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#24]
Right keys [1]: [c_customer_sk#28]
Join condition: None

(151) Project [codegen id : 6]
Output [4]: [ss_sold_date_sk#7, ss_quantity#25, ss_sales_price#26, c_customer_sk#28]
Input [5]: [ss_sold_date_sk#7, ss_customer_sk#24, ss_quantity#25, ss_sales_price#26, c_customer_sk#28]

(152) Scan parquet default.date_dim
Output [2]: [d_date_sk#13, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(153) ColumnarToRow [codegen id : 5]
Input [2]: [d_date_sk#13, d_year#15]

(154) Filter [codegen id : 5]
Input [2]: [d_date_sk#13, d_year#15]
Condition : (d_year#15 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#13))

(155) Project [codegen id : 5]
Output [1]: [d_date_sk#13]
Input [2]: [d_date_sk#13, d_year#15]

(156) BroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#79]

(157) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#13]
Join condition: None

(158) Project [codegen id : 6]
Output [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#28]
Input [5]: [ss_sold_date_sk#7, ss_quantity#25, ss_sales_price#26, c_customer_sk#28, d_date_sk#13]

(159) HashAggregate [codegen id : 6]
Input [3]: [ss_quantity#25, ss_sales_price#26, c_customer_sk#28]
Keys [1]: [c_customer_sk#28]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#80, isEmpty#81]
Results [3]: [c_customer_sk#28, sum#82, isEmpty#83]

(160) HashAggregate [codegen id : 6]
Input [3]: [c_customer_sk#28, sum#82, isEmpty#83]
Keys [1]: [c_customer_sk#28]
Functions [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#84]
Results [1]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#25 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#26 as decimal(12,2)))), DecimalType(18,2), true))#84 AS csales#85]

(161) HashAggregate [codegen id : 6]
Input [1]: [csales#85]
Keys: []
Functions [1]: [partial_max(csales#85)]
Aggregate Attributes [1]: [max#86]
Results [1]: [max#87]

(162) Exchange
Input [1]: [max#87]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#88]

(163) HashAggregate [codegen id : 7]
Input [1]: [max#87]
Keys: []
Functions [1]: [max(csales#85)]
Aggregate Attributes [1]: [max(csales#85)#89]
Results [1]: [max(csales#85)#89 AS tpcds_cmax#90]

Subquery:2 Hosting operator id = 65 Hosting Expression = ReusedSubquery Subquery scalar-subquery#36, [id=#37]

Subquery:3 Hosting operator id = 112 Hosting Expression = ReusedSubquery Subquery scalar-subquery#36, [id=#37]

Subquery:4 Hosting operator id = 126 Hosting Expression = ReusedSubquery Subquery scalar-subquery#36, [id=#37]


