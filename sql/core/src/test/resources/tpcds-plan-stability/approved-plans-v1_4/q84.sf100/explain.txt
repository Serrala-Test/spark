== Physical Plan ==
TakeOrderedAndProject (42)
+- * Project (41)
   +- * BroadcastHashJoin Inner BuildRight (40)
      :- * Project (34)
      :  +- * BroadcastHashJoin Inner BuildRight (33)
      :     :- * Project (27)
      :     :  +- * BroadcastHashJoin Inner BuildRight (26)
      :     :     :- * Project (21)
      :     :     :  +- * SortMergeJoin Inner (20)
      :     :     :     :- * Sort (14)
      :     :     :     :  +- Exchange (13)
      :     :     :     :     +- * Project (12)
      :     :     :     :        +- * SortMergeJoin Inner (11)
      :     :     :     :           :- * Sort (5)
      :     :     :     :           :  +- Exchange (4)
      :     :     :     :           :     +- * Filter (3)
      :     :     :     :           :        +- * ColumnarToRow (2)
      :     :     :     :           :           +- Scan parquet default.customer_demographics (1)
      :     :     :     :           +- * Sort (10)
      :     :     :     :              +- Exchange (9)
      :     :     :     :                 +- * Filter (8)
      :     :     :     :                    +- * ColumnarToRow (7)
      :     :     :     :                       +- Scan parquet default.store_returns (6)
      :     :     :     +- * Sort (19)
      :     :     :        +- Exchange (18)
      :     :     :           +- * Filter (17)
      :     :     :              +- * ColumnarToRow (16)
      :     :     :                 +- Scan parquet default.customer (15)
      :     :     +- BroadcastExchange (25)
      :     :        +- * Filter (24)
      :     :           +- * ColumnarToRow (23)
      :     :              +- Scan parquet default.household_demographics (22)
      :     +- BroadcastExchange (32)
      :        +- * Project (31)
      :           +- * Filter (30)
      :              +- * ColumnarToRow (29)
      :                 +- Scan parquet default.income_band (28)
      +- BroadcastExchange (39)
         +- * Project (38)
            +- * Filter (37)
               +- * ColumnarToRow (36)
                  +- Scan parquet default.customer_address (35)


(1) Scan parquet default.customer_demographics
Output [1]: [cd_demo_sk#1]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int>

(2) ColumnarToRow [codegen id : 1]
Input [1]: [cd_demo_sk#1]

(3) Filter [codegen id : 1]
Input [1]: [cd_demo_sk#1]
Condition : isnotnull(cd_demo_sk#1)

(4) Exchange
Input [1]: [cd_demo_sk#1]
Arguments: hashpartitioning(cast(cd_demo_sk#1 as bigint), 5), ENSURE_REQUIREMENTS, [id=#2]

(5) Sort [codegen id : 2]
Input [1]: [cd_demo_sk#1]
Arguments: [cast(cd_demo_sk#1 as bigint) ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_returns
Output [1]: [sr_cdemo_sk#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_cdemo_sk)]
ReadSchema: struct<sr_cdemo_sk:bigint>

(7) ColumnarToRow [codegen id : 3]
Input [1]: [sr_cdemo_sk#3]

(8) Filter [codegen id : 3]
Input [1]: [sr_cdemo_sk#3]
Condition : isnotnull(sr_cdemo_sk#3)

(9) Exchange
Input [1]: [sr_cdemo_sk#3]
Arguments: hashpartitioning(sr_cdemo_sk#3, 5), ENSURE_REQUIREMENTS, [id=#4]

(10) Sort [codegen id : 4]
Input [1]: [sr_cdemo_sk#3]
Arguments: [sr_cdemo_sk#3 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 5]
Left keys [1]: [cast(cd_demo_sk#1 as bigint)]
Right keys [1]: [sr_cdemo_sk#3]
Join condition: None

(12) Project [codegen id : 5]
Output [1]: [cd_demo_sk#1]
Input [2]: [cd_demo_sk#1, sr_cdemo_sk#3]

(13) Exchange
Input [1]: [cd_demo_sk#1]
Arguments: hashpartitioning(cd_demo_sk#1, 5), ENSURE_REQUIREMENTS, [id=#5]

(14) Sort [codegen id : 6]
Input [1]: [cd_demo_sk#1]
Arguments: [cd_demo_sk#1 ASC NULLS FIRST], false, 0

(15) Scan parquet default.customer
Output [6]: [c_customer_id#6, c_current_cdemo_sk#7, c_current_hdemo_sk#8, c_current_addr_sk#9, c_first_name#10, c_last_name#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_hdemo_sk)]
ReadSchema: struct<c_customer_id:string,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string>

(16) ColumnarToRow [codegen id : 7]
Input [6]: [c_customer_id#6, c_current_cdemo_sk#7, c_current_hdemo_sk#8, c_current_addr_sk#9, c_first_name#10, c_last_name#11]

(17) Filter [codegen id : 7]
Input [6]: [c_customer_id#6, c_current_cdemo_sk#7, c_current_hdemo_sk#8, c_current_addr_sk#9, c_first_name#10, c_last_name#11]
Condition : ((isnotnull(c_current_addr_sk#9) AND isnotnull(c_current_cdemo_sk#7)) AND isnotnull(c_current_hdemo_sk#8))

(18) Exchange
Input [6]: [c_customer_id#6, c_current_cdemo_sk#7, c_current_hdemo_sk#8, c_current_addr_sk#9, c_first_name#10, c_last_name#11]
Arguments: hashpartitioning(c_current_cdemo_sk#7, 5), ENSURE_REQUIREMENTS, [id=#12]

(19) Sort [codegen id : 8]
Input [6]: [c_customer_id#6, c_current_cdemo_sk#7, c_current_hdemo_sk#8, c_current_addr_sk#9, c_first_name#10, c_last_name#11]
Arguments: [c_current_cdemo_sk#7 ASC NULLS FIRST], false, 0

(20) SortMergeJoin [codegen id : 12]
Left keys [1]: [cd_demo_sk#1]
Right keys [1]: [c_current_cdemo_sk#7]
Join condition: None

(21) Project [codegen id : 12]
Output [5]: [c_customer_id#6, c_current_hdemo_sk#8, c_current_addr_sk#9, c_first_name#10, c_last_name#11]
Input [7]: [cd_demo_sk#1, c_customer_id#6, c_current_cdemo_sk#7, c_current_hdemo_sk#8, c_current_addr_sk#9, c_first_name#10, c_last_name#11]

(22) Scan parquet default.household_demographics
Output [2]: [hd_demo_sk#13, hd_income_band_sk#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_demo_sk), IsNotNull(hd_income_band_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_income_band_sk:int>

(23) ColumnarToRow [codegen id : 9]
Input [2]: [hd_demo_sk#13, hd_income_band_sk#14]

(24) Filter [codegen id : 9]
Input [2]: [hd_demo_sk#13, hd_income_band_sk#14]
Condition : (isnotnull(hd_demo_sk#13) AND isnotnull(hd_income_band_sk#14))

(25) BroadcastExchange
Input [2]: [hd_demo_sk#13, hd_income_band_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#15]

(26) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [c_current_hdemo_sk#8]
Right keys [1]: [hd_demo_sk#13]
Join condition: None

(27) Project [codegen id : 12]
Output [5]: [c_customer_id#6, c_current_addr_sk#9, c_first_name#10, c_last_name#11, hd_income_band_sk#14]
Input [7]: [c_customer_id#6, c_current_hdemo_sk#8, c_current_addr_sk#9, c_first_name#10, c_last_name#11, hd_demo_sk#13, hd_income_band_sk#14]

(28) Scan parquet default.income_band
Output [3]: [ib_income_band_sk#16, ib_lower_bound#17, ib_upper_bound#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/income_band]
PushedFilters: [IsNotNull(ib_lower_bound), IsNotNull(ib_upper_bound), GreaterThanOrEqual(ib_lower_bound,38128), LessThanOrEqual(ib_upper_bound,88128), IsNotNull(ib_income_band_sk)]
ReadSchema: struct<ib_income_band_sk:int,ib_lower_bound:int,ib_upper_bound:int>

(29) ColumnarToRow [codegen id : 10]
Input [3]: [ib_income_band_sk#16, ib_lower_bound#17, ib_upper_bound#18]

(30) Filter [codegen id : 10]
Input [3]: [ib_income_band_sk#16, ib_lower_bound#17, ib_upper_bound#18]
Condition : ((((isnotnull(ib_lower_bound#17) AND isnotnull(ib_upper_bound#18)) AND (ib_lower_bound#17 >= 38128)) AND (ib_upper_bound#18 <= 88128)) AND isnotnull(ib_income_band_sk#16))

(31) Project [codegen id : 10]
Output [1]: [ib_income_band_sk#16]
Input [3]: [ib_income_band_sk#16, ib_lower_bound#17, ib_upper_bound#18]

(32) BroadcastExchange
Input [1]: [ib_income_band_sk#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#19]

(33) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [hd_income_band_sk#14]
Right keys [1]: [ib_income_band_sk#16]
Join condition: None

(34) Project [codegen id : 12]
Output [4]: [c_customer_id#6, c_current_addr_sk#9, c_first_name#10, c_last_name#11]
Input [6]: [c_customer_id#6, c_current_addr_sk#9, c_first_name#10, c_last_name#11, hd_income_band_sk#14, ib_income_band_sk#16]

(35) Scan parquet default.customer_address
Output [2]: [ca_address_sk#20, ca_city#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_city), EqualTo(ca_city,Edgewood), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_city:string>

(36) ColumnarToRow [codegen id : 11]
Input [2]: [ca_address_sk#20, ca_city#21]

(37) Filter [codegen id : 11]
Input [2]: [ca_address_sk#20, ca_city#21]
Condition : ((isnotnull(ca_city#21) AND (ca_city#21 = Edgewood)) AND isnotnull(ca_address_sk#20))

(38) Project [codegen id : 11]
Output [1]: [ca_address_sk#20]
Input [2]: [ca_address_sk#20, ca_city#21]

(39) BroadcastExchange
Input [1]: [ca_address_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22]

(40) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [c_current_addr_sk#9]
Right keys [1]: [ca_address_sk#20]
Join condition: None

(41) Project [codegen id : 12]
Output [3]: [c_customer_id#6 AS customer_id#23, concat(c_last_name#11, , , c_first_name#10) AS customername#24, c_customer_id#6]
Input [5]: [c_customer_id#6, c_current_addr_sk#9, c_first_name#10, c_last_name#11, ca_address_sk#20]

(42) TakeOrderedAndProject
Input [3]: [customer_id#23, customername#24, c_customer_id#6]
Arguments: 100, [c_customer_id#6 ASC NULLS FIRST], [customer_id#23, customername#24]

