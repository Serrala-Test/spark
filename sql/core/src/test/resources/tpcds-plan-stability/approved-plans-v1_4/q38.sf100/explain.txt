== Physical Plan ==
* HashAggregate (75)
+- Exchange (74)
   +- * HashAggregate (73)
      +- * Project (72)
         +- SortMergeJoin LeftSemi (71)
            :- * Sort (51)
            :  +- Exchange (50)
            :     +- * HashAggregate (49)
            :        +- Exchange (48)
            :           +- * HashAggregate (47)
            :              +- SortMergeJoin LeftSemi (46)
            :                 :- * Sort (26)
            :                 :  +- Exchange (25)
            :                 :     +- * HashAggregate (24)
            :                 :        +- * HashAggregate (23)
            :                 :           +- * HashAggregate (22)
            :                 :              +- Exchange (21)
            :                 :                 +- * HashAggregate (20)
            :                 :                    +- * Project (19)
            :                 :                       +- * SortMergeJoin Inner (18)
            :                 :                          :- * Sort (12)
            :                 :                          :  +- Exchange (11)
            :                 :                          :     +- * Project (10)
            :                 :                          :        +- * BroadcastHashJoin Inner BuildRight (9)
            :                 :                          :           :- * Filter (3)
            :                 :                          :           :  +- * ColumnarToRow (2)
            :                 :                          :           :     +- Scan parquet default.store_sales (1)
            :                 :                          :           +- BroadcastExchange (8)
            :                 :                          :              +- * Project (7)
            :                 :                          :                 +- * Filter (6)
            :                 :                          :                    +- * ColumnarToRow (5)
            :                 :                          :                       +- Scan parquet default.date_dim (4)
            :                 :                          +- * Sort (17)
            :                 :                             +- Exchange (16)
            :                 :                                +- * Filter (15)
            :                 :                                   +- * ColumnarToRow (14)
            :                 :                                      +- Scan parquet default.customer (13)
            :                 +- * Sort (45)
            :                    +- Exchange (44)
            :                       +- * HashAggregate (43)
            :                          +- * HashAggregate (42)
            :                             +- * HashAggregate (41)
            :                                +- Exchange (40)
            :                                   +- * HashAggregate (39)
            :                                      +- * Project (38)
            :                                         +- * SortMergeJoin Inner (37)
            :                                            :- * Sort (34)
            :                                            :  +- Exchange (33)
            :                                            :     +- * Project (32)
            :                                            :        +- * BroadcastHashJoin Inner BuildRight (31)
            :                                            :           :- * Filter (29)
            :                                            :           :  +- * ColumnarToRow (28)
            :                                            :           :     +- Scan parquet default.catalog_sales (27)
            :                                            :           +- ReusedExchange (30)
            :                                            +- * Sort (36)
            :                                               +- ReusedExchange (35)
            +- * Sort (70)
               +- Exchange (69)
                  +- * HashAggregate (68)
                     +- * HashAggregate (67)
                        +- * HashAggregate (66)
                           +- Exchange (65)
                              +- * HashAggregate (64)
                                 +- * Project (63)
                                    +- * SortMergeJoin Inner (62)
                                       :- * Sort (59)
                                       :  +- Exchange (58)
                                       :     +- * Project (57)
                                       :        +- * BroadcastHashJoin Inner BuildRight (56)
                                       :           :- * Filter (54)
                                       :           :  +- * ColumnarToRow (53)
                                       :           :     +- Scan parquet default.web_sales (52)
                                       :           +- ReusedExchange (55)
                                       +- * Sort (61)
                                          +- ReusedExchange (60)


(1) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#1, ss_customer_sk#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int>

(2) ColumnarToRow [codegen id : 2]
Input [2]: [ss_sold_date_sk#1, ss_customer_sk#2]

(3) Filter [codegen id : 2]
Input [2]: [ss_sold_date_sk#1, ss_customer_sk#2]
Condition : (isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_customer_sk#2))

(4) Scan parquet default.date_dim
Output [3]: [d_date_sk#3, d_date#4, d_month_seq#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#3, d_date#4, d_month_seq#5]

(6) Filter [codegen id : 1]
Input [3]: [d_date_sk#3, d_date#4, d_month_seq#5]
Condition : (((isnotnull(d_month_seq#5) AND (d_month_seq#5 >= 1200)) AND (d_month_seq#5 <= 1211)) AND isnotnull(d_date_sk#3))

(7) Project [codegen id : 1]
Output [2]: [d_date_sk#3, d_date#4]
Input [3]: [d_date_sk#3, d_date#4, d_month_seq#5]

(8) BroadcastExchange
Input [2]: [d_date_sk#3, d_date#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#6]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#3]
Join condition: None

(10) Project [codegen id : 2]
Output [2]: [ss_customer_sk#2, d_date#4]
Input [4]: [ss_sold_date_sk#1, ss_customer_sk#2, d_date_sk#3, d_date#4]

(11) Exchange
Input [2]: [ss_customer_sk#2, d_date#4]
Arguments: hashpartitioning(ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#7]

(12) Sort [codegen id : 3]
Input [2]: [ss_customer_sk#2, d_date#4]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(13) Scan parquet default.customer
Output [3]: [c_customer_sk#8, c_first_name#9, c_last_name#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(14) ColumnarToRow [codegen id : 4]
Input [3]: [c_customer_sk#8, c_first_name#9, c_last_name#10]

(15) Filter [codegen id : 4]
Input [3]: [c_customer_sk#8, c_first_name#9, c_last_name#10]
Condition : isnotnull(c_customer_sk#8)

(16) Exchange
Input [3]: [c_customer_sk#8, c_first_name#9, c_last_name#10]
Arguments: hashpartitioning(c_customer_sk#8, 5), ENSURE_REQUIREMENTS, [id=#11]

(17) Sort [codegen id : 5]
Input [3]: [c_customer_sk#8, c_first_name#9, c_last_name#10]
Arguments: [c_customer_sk#8 ASC NULLS FIRST], false, 0

(18) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#8]
Join condition: None

(19) Project [codegen id : 6]
Output [3]: [c_last_name#10, c_first_name#9, d_date#4]
Input [5]: [ss_customer_sk#2, d_date#4, c_customer_sk#8, c_first_name#9, c_last_name#10]

(20) HashAggregate [codegen id : 6]
Input [3]: [c_last_name#10, c_first_name#9, d_date#4]
Keys [3]: [c_last_name#10, c_first_name#9, d_date#4]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#10, c_first_name#9, d_date#4]

(21) Exchange
Input [3]: [c_last_name#10, c_first_name#9, d_date#4]
Arguments: hashpartitioning(c_last_name#10, c_first_name#9, d_date#4, 5), ENSURE_REQUIREMENTS, [id=#12]

(22) HashAggregate [codegen id : 7]
Input [3]: [c_last_name#10, c_first_name#9, d_date#4]
Keys [3]: [c_last_name#10, c_first_name#9, d_date#4]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#10, c_first_name#9, d_date#4]

(23) HashAggregate [codegen id : 7]
Input [3]: [c_last_name#10, c_first_name#9, d_date#4]
Keys [3]: [c_last_name#10, c_first_name#9, d_date#4]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#10, c_first_name#9, d_date#4]

(24) HashAggregate [codegen id : 7]
Input [3]: [c_last_name#10, c_first_name#9, d_date#4]
Keys [3]: [c_last_name#10, c_first_name#9, d_date#4]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#10, c_first_name#9, d_date#4]

(25) Exchange
Input [3]: [c_last_name#10, c_first_name#9, d_date#4]
Arguments: hashpartitioning(coalesce(c_last_name#10, ), isnull(c_last_name#10), coalesce(c_first_name#9, ), isnull(c_first_name#9), coalesce(d_date#4, 0), isnull(d_date#4), 5), ENSURE_REQUIREMENTS, [id=#13]

(26) Sort [codegen id : 8]
Input [3]: [c_last_name#10, c_first_name#9, d_date#4]
Arguments: [coalesce(c_last_name#10, ) ASC NULLS FIRST, isnull(c_last_name#10) ASC NULLS FIRST, coalesce(c_first_name#9, ) ASC NULLS FIRST, isnull(c_first_name#9) ASC NULLS FIRST, coalesce(d_date#4, 0) ASC NULLS FIRST, isnull(d_date#4) ASC NULLS FIRST], false, 0

(27) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#14, cs_bill_customer_sk#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int>

(28) ColumnarToRow [codegen id : 10]
Input [2]: [cs_sold_date_sk#14, cs_bill_customer_sk#15]

(29) Filter [codegen id : 10]
Input [2]: [cs_sold_date_sk#14, cs_bill_customer_sk#15]
Condition : (isnotnull(cs_sold_date_sk#14) AND isnotnull(cs_bill_customer_sk#15))

(30) ReusedExchange [Reuses operator id: 8]
Output [2]: [d_date_sk#16, d_date#17]

(31) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#14]
Right keys [1]: [d_date_sk#16]
Join condition: None

(32) Project [codegen id : 10]
Output [2]: [cs_bill_customer_sk#15, d_date#17]
Input [4]: [cs_sold_date_sk#14, cs_bill_customer_sk#15, d_date_sk#16, d_date#17]

(33) Exchange
Input [2]: [cs_bill_customer_sk#15, d_date#17]
Arguments: hashpartitioning(cs_bill_customer_sk#15, 5), ENSURE_REQUIREMENTS, [id=#18]

(34) Sort [codegen id : 11]
Input [2]: [cs_bill_customer_sk#15, d_date#17]
Arguments: [cs_bill_customer_sk#15 ASC NULLS FIRST], false, 0

(35) ReusedExchange [Reuses operator id: 16]
Output [3]: [c_customer_sk#19, c_first_name#20, c_last_name#21]

(36) Sort [codegen id : 13]
Input [3]: [c_customer_sk#19, c_first_name#20, c_last_name#21]
Arguments: [c_customer_sk#19 ASC NULLS FIRST], false, 0

(37) SortMergeJoin [codegen id : 14]
Left keys [1]: [cs_bill_customer_sk#15]
Right keys [1]: [c_customer_sk#19]
Join condition: None

(38) Project [codegen id : 14]
Output [3]: [c_last_name#21, c_first_name#20, d_date#17]
Input [5]: [cs_bill_customer_sk#15, d_date#17, c_customer_sk#19, c_first_name#20, c_last_name#21]

(39) HashAggregate [codegen id : 14]
Input [3]: [c_last_name#21, c_first_name#20, d_date#17]
Keys [3]: [c_last_name#21, c_first_name#20, d_date#17]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#21, c_first_name#20, d_date#17]

(40) Exchange
Input [3]: [c_last_name#21, c_first_name#20, d_date#17]
Arguments: hashpartitioning(c_last_name#21, c_first_name#20, d_date#17, 5), ENSURE_REQUIREMENTS, [id=#22]

(41) HashAggregate [codegen id : 15]
Input [3]: [c_last_name#21, c_first_name#20, d_date#17]
Keys [3]: [c_last_name#21, c_first_name#20, d_date#17]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#21, c_first_name#20, d_date#17]

(42) HashAggregate [codegen id : 15]
Input [3]: [c_last_name#21, c_first_name#20, d_date#17]
Keys [3]: [c_last_name#21, c_first_name#20, d_date#17]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#21, c_first_name#20, d_date#17]

(43) HashAggregate [codegen id : 15]
Input [3]: [c_last_name#21, c_first_name#20, d_date#17]
Keys [3]: [c_last_name#21, c_first_name#20, d_date#17]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#21, c_first_name#20, d_date#17]

(44) Exchange
Input [3]: [c_last_name#21, c_first_name#20, d_date#17]
Arguments: hashpartitioning(coalesce(c_last_name#21, ), isnull(c_last_name#21), coalesce(c_first_name#20, ), isnull(c_first_name#20), coalesce(d_date#17, 0), isnull(d_date#17), 5), ENSURE_REQUIREMENTS, [id=#23]

(45) Sort [codegen id : 16]
Input [3]: [c_last_name#21, c_first_name#20, d_date#17]
Arguments: [coalesce(c_last_name#21, ) ASC NULLS FIRST, isnull(c_last_name#21) ASC NULLS FIRST, coalesce(c_first_name#20, ) ASC NULLS FIRST, isnull(c_first_name#20) ASC NULLS FIRST, coalesce(d_date#17, 0) ASC NULLS FIRST, isnull(d_date#17) ASC NULLS FIRST], false, 0

(46) SortMergeJoin
Left keys [6]: [coalesce(c_last_name#10, ), isnull(c_last_name#10), coalesce(c_first_name#9, ), isnull(c_first_name#9), coalesce(d_date#4, 0), isnull(d_date#4)]
Right keys [6]: [coalesce(c_last_name#21, ), isnull(c_last_name#21), coalesce(c_first_name#20, ), isnull(c_first_name#20), coalesce(d_date#17, 0), isnull(d_date#17)]
Join condition: None

(47) HashAggregate [codegen id : 17]
Input [3]: [c_last_name#10, c_first_name#9, d_date#4]
Keys [3]: [c_last_name#10, c_first_name#9, d_date#4]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#10, c_first_name#9, d_date#4]

(48) Exchange
Input [3]: [c_last_name#10, c_first_name#9, d_date#4]
Arguments: hashpartitioning(c_last_name#10, c_first_name#9, d_date#4, 5), ENSURE_REQUIREMENTS, [id=#24]

(49) HashAggregate [codegen id : 18]
Input [3]: [c_last_name#10, c_first_name#9, d_date#4]
Keys [3]: [c_last_name#10, c_first_name#9, d_date#4]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#10, c_first_name#9, d_date#4]

(50) Exchange
Input [3]: [c_last_name#10, c_first_name#9, d_date#4]
Arguments: hashpartitioning(coalesce(c_last_name#10, ), isnull(c_last_name#10), coalesce(c_first_name#9, ), isnull(c_first_name#9), coalesce(d_date#4, 0), isnull(d_date#4), 5), ENSURE_REQUIREMENTS, [id=#25]

(51) Sort [codegen id : 19]
Input [3]: [c_last_name#10, c_first_name#9, d_date#4]
Arguments: [coalesce(c_last_name#10, ) ASC NULLS FIRST, isnull(c_last_name#10) ASC NULLS FIRST, coalesce(c_first_name#9, ) ASC NULLS FIRST, isnull(c_first_name#9) ASC NULLS FIRST, coalesce(d_date#4, 0) ASC NULLS FIRST, isnull(d_date#4) ASC NULLS FIRST], false, 0

(52) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#26, ws_bill_customer_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int>

(53) ColumnarToRow [codegen id : 21]
Input [2]: [ws_sold_date_sk#26, ws_bill_customer_sk#27]

(54) Filter [codegen id : 21]
Input [2]: [ws_sold_date_sk#26, ws_bill_customer_sk#27]
Condition : (isnotnull(ws_sold_date_sk#26) AND isnotnull(ws_bill_customer_sk#27))

(55) ReusedExchange [Reuses operator id: 8]
Output [2]: [d_date_sk#28, d_date#29]

(56) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [ws_sold_date_sk#26]
Right keys [1]: [d_date_sk#28]
Join condition: None

(57) Project [codegen id : 21]
Output [2]: [ws_bill_customer_sk#27, d_date#29]
Input [4]: [ws_sold_date_sk#26, ws_bill_customer_sk#27, d_date_sk#28, d_date#29]

(58) Exchange
Input [2]: [ws_bill_customer_sk#27, d_date#29]
Arguments: hashpartitioning(ws_bill_customer_sk#27, 5), ENSURE_REQUIREMENTS, [id=#30]

(59) Sort [codegen id : 22]
Input [2]: [ws_bill_customer_sk#27, d_date#29]
Arguments: [ws_bill_customer_sk#27 ASC NULLS FIRST], false, 0

(60) ReusedExchange [Reuses operator id: 16]
Output [3]: [c_customer_sk#31, c_first_name#32, c_last_name#33]

(61) Sort [codegen id : 24]
Input [3]: [c_customer_sk#31, c_first_name#32, c_last_name#33]
Arguments: [c_customer_sk#31 ASC NULLS FIRST], false, 0

(62) SortMergeJoin [codegen id : 25]
Left keys [1]: [ws_bill_customer_sk#27]
Right keys [1]: [c_customer_sk#31]
Join condition: None

(63) Project [codegen id : 25]
Output [3]: [c_last_name#33, c_first_name#32, d_date#29]
Input [5]: [ws_bill_customer_sk#27, d_date#29, c_customer_sk#31, c_first_name#32, c_last_name#33]

(64) HashAggregate [codegen id : 25]
Input [3]: [c_last_name#33, c_first_name#32, d_date#29]
Keys [3]: [c_last_name#33, c_first_name#32, d_date#29]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#33, c_first_name#32, d_date#29]

(65) Exchange
Input [3]: [c_last_name#33, c_first_name#32, d_date#29]
Arguments: hashpartitioning(c_last_name#33, c_first_name#32, d_date#29, 5), ENSURE_REQUIREMENTS, [id=#34]

(66) HashAggregate [codegen id : 26]
Input [3]: [c_last_name#33, c_first_name#32, d_date#29]
Keys [3]: [c_last_name#33, c_first_name#32, d_date#29]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#33, c_first_name#32, d_date#29]

(67) HashAggregate [codegen id : 26]
Input [3]: [c_last_name#33, c_first_name#32, d_date#29]
Keys [3]: [c_last_name#33, c_first_name#32, d_date#29]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#33, c_first_name#32, d_date#29]

(68) HashAggregate [codegen id : 26]
Input [3]: [c_last_name#33, c_first_name#32, d_date#29]
Keys [3]: [c_last_name#33, c_first_name#32, d_date#29]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#33, c_first_name#32, d_date#29]

(69) Exchange
Input [3]: [c_last_name#33, c_first_name#32, d_date#29]
Arguments: hashpartitioning(coalesce(c_last_name#33, ), isnull(c_last_name#33), coalesce(c_first_name#32, ), isnull(c_first_name#32), coalesce(d_date#29, 0), isnull(d_date#29), 5), ENSURE_REQUIREMENTS, [id=#35]

(70) Sort [codegen id : 27]
Input [3]: [c_last_name#33, c_first_name#32, d_date#29]
Arguments: [coalesce(c_last_name#33, ) ASC NULLS FIRST, isnull(c_last_name#33) ASC NULLS FIRST, coalesce(c_first_name#32, ) ASC NULLS FIRST, isnull(c_first_name#32) ASC NULLS FIRST, coalesce(d_date#29, 0) ASC NULLS FIRST, isnull(d_date#29) ASC NULLS FIRST], false, 0

(71) SortMergeJoin
Left keys [6]: [coalesce(c_last_name#10, ), isnull(c_last_name#10), coalesce(c_first_name#9, ), isnull(c_first_name#9), coalesce(d_date#4, 0), isnull(d_date#4)]
Right keys [6]: [coalesce(c_last_name#33, ), isnull(c_last_name#33), coalesce(c_first_name#32, ), isnull(c_first_name#32), coalesce(d_date#29, 0), isnull(d_date#29)]
Join condition: None

(72) Project [codegen id : 28]
Output: []
Input [3]: [c_last_name#10, c_first_name#9, d_date#4]

(73) HashAggregate [codegen id : 28]
Input: []
Keys: []
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#36]
Results [1]: [count#37]

(74) Exchange
Input [1]: [count#37]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#38]

(75) HashAggregate [codegen id : 29]
Input [1]: [count#37]
Keys: []
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#39]
Results [1]: [count(1)#39 AS count(1)#40]

