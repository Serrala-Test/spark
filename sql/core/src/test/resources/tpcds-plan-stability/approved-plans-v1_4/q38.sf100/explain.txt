== Physical Plan ==
* HashAggregate (72)
+- Exchange (71)
   +- * HashAggregate (70)
      +- * HashAggregate (69)
         +- Exchange (68)
            +- * HashAggregate (67)
               +- SortMergeJoin LeftSemi (66)
                  :- * Sort (48)
                  :  +- Exchange (47)
                  :     +- * HashAggregate (46)
                  :        +- Exchange (45)
                  :           +- * HashAggregate (44)
                  :              +- SortMergeJoin LeftSemi (43)
                  :                 :- * Sort (25)
                  :                 :  +- Exchange (24)
                  :                 :     +- * HashAggregate (23)
                  :                 :        +- Exchange (22)
                  :                 :           +- * HashAggregate (21)
                  :                 :              +- * Project (20)
                  :                 :                 +- * SortMergeJoin Inner (19)
                  :                 :                    :- * Sort (12)
                  :                 :                    :  +- Exchange (11)
                  :                 :                    :     +- * Project (10)
                  :                 :                    :        +- * BroadcastHashJoin Inner BuildRight (9)
                  :                 :                    :           :- * Filter (3)
                  :                 :                    :           :  +- * ColumnarToRow (2)
                  :                 :                    :           :     +- Scan parquet default.store_sales (1)
                  :                 :                    :           +- BroadcastExchange (8)
                  :                 :                    :              +- * Project (7)
                  :                 :                    :                 +- * Filter (6)
                  :                 :                    :                    +- * ColumnarToRow (5)
                  :                 :                    :                       +- Scan parquet default.date_dim (4)
                  :                 :                    +- * Sort (18)
                  :                 :                       +- Exchange (17)
                  :                 :                          +- * Project (16)
                  :                 :                             +- * Filter (15)
                  :                 :                                +- * ColumnarToRow (14)
                  :                 :                                   +- Scan parquet default.customer (13)
                  :                 +- * Sort (42)
                  :                    +- Exchange (41)
                  :                       +- * HashAggregate (40)
                  :                          +- Exchange (39)
                  :                             +- * HashAggregate (38)
                  :                                +- * Project (37)
                  :                                   +- * SortMergeJoin Inner (36)
                  :                                      :- * Sort (33)
                  :                                      :  +- Exchange (32)
                  :                                      :     +- * Project (31)
                  :                                      :        +- * BroadcastHashJoin Inner BuildRight (30)
                  :                                      :           :- * Filter (28)
                  :                                      :           :  +- * ColumnarToRow (27)
                  :                                      :           :     +- Scan parquet default.catalog_sales (26)
                  :                                      :           +- ReusedExchange (29)
                  :                                      +- * Sort (35)
                  :                                         +- ReusedExchange (34)
                  +- * Sort (65)
                     +- Exchange (64)
                        +- * HashAggregate (63)
                           +- Exchange (62)
                              +- * HashAggregate (61)
                                 +- * Project (60)
                                    +- * SortMergeJoin Inner (59)
                                       :- * Sort (56)
                                       :  +- Exchange (55)
                                       :     +- * Project (54)
                                       :        +- * BroadcastHashJoin Inner BuildRight (53)
                                       :           :- * Filter (51)
                                       :           :  +- * ColumnarToRow (50)
                                       :           :     +- Scan parquet default.web_sales (49)
                                       :           +- ReusedExchange (52)
                                       +- * Sort (58)
                                          +- ReusedExchange (57)


(1) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#1, ss_customer_sk#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int>

(2) ColumnarToRow [codegen id : 2]
Input [2]: [ss_sold_date_sk#1, ss_customer_sk#2]

(3) Filter [codegen id : 2]
Input [2]: [ss_sold_date_sk#1, ss_customer_sk#2]
Condition : (isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_customer_sk#2))

(4) Scan parquet default.date_dim
Output [3]: [d_date_sk#3, d_date#4, d_month_seq#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#3, d_date#4, d_month_seq#5]

(6) Filter [codegen id : 1]
Input [3]: [d_date_sk#3, d_date#4, d_month_seq#5]
Condition : (((isnotnull(d_month_seq#5) AND (d_month_seq#5 >= 1200)) AND (d_month_seq#5 <= 1211)) AND isnotnull(d_date_sk#3))

(7) Project [codegen id : 1]
Output [2]: [d_date_sk#3, d_date#4]
Input [3]: [d_date_sk#3, d_date#4, d_month_seq#5]

(8) BroadcastExchange
Input [2]: [d_date_sk#3, d_date#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#6]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#3]
Join condition: None

(10) Project [codegen id : 2]
Output [2]: [ss_customer_sk#2, d_date#4]
Input [4]: [ss_sold_date_sk#1, ss_customer_sk#2, d_date_sk#3, d_date#4]

(11) Exchange
Input [2]: [ss_customer_sk#2, d_date#4]
Arguments: hashpartitioning(ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#7]

(12) Sort [codegen id : 3]
Input [2]: [ss_customer_sk#2, d_date#4]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(13) Scan parquet default.customer
Output [3]: [c_customer_sk#8, c_first_name#9, c_last_name#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(14) ColumnarToRow [codegen id : 4]
Input [3]: [c_customer_sk#8, c_first_name#9, c_last_name#10]

(15) Filter [codegen id : 4]
Input [3]: [c_customer_sk#8, c_first_name#9, c_last_name#10]
Condition : isnotnull(c_customer_sk#8)

(16) Project [codegen id : 4]
Output [3]: [c_customer_sk#8, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#9, 20, false, true) AS c_first_name#11, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#10, 30, false, true) AS c_last_name#12]
Input [3]: [c_customer_sk#8, c_first_name#9, c_last_name#10]

(17) Exchange
Input [3]: [c_customer_sk#8, c_first_name#11, c_last_name#12]
Arguments: hashpartitioning(c_customer_sk#8, 5), ENSURE_REQUIREMENTS, [id=#13]

(18) Sort [codegen id : 5]
Input [3]: [c_customer_sk#8, c_first_name#11, c_last_name#12]
Arguments: [c_customer_sk#8 ASC NULLS FIRST], false, 0

(19) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#8]
Join condition: None

(20) Project [codegen id : 6]
Output [3]: [c_last_name#12, c_first_name#11, d_date#4]
Input [5]: [ss_customer_sk#2, d_date#4, c_customer_sk#8, c_first_name#11, c_last_name#12]

(21) HashAggregate [codegen id : 6]
Input [3]: [c_last_name#12, c_first_name#11, d_date#4]
Keys [3]: [c_last_name#12, c_first_name#11, d_date#4]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#12, c_first_name#11, d_date#4]

(22) Exchange
Input [3]: [c_last_name#12, c_first_name#11, d_date#4]
Arguments: hashpartitioning(c_last_name#12, c_first_name#11, d_date#4, 5), ENSURE_REQUIREMENTS, [id=#14]

(23) HashAggregate [codegen id : 7]
Input [3]: [c_last_name#12, c_first_name#11, d_date#4]
Keys [3]: [c_last_name#12, c_first_name#11, d_date#4]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#12, c_first_name#11, d_date#4]

(24) Exchange
Input [3]: [c_last_name#12, c_first_name#11, d_date#4]
Arguments: hashpartitioning(coalesce(c_last_name#12, ), isnull(c_last_name#12), coalesce(c_first_name#11, ), isnull(c_first_name#11), coalesce(d_date#4, 0), isnull(d_date#4), 5), ENSURE_REQUIREMENTS, [id=#15]

(25) Sort [codegen id : 8]
Input [3]: [c_last_name#12, c_first_name#11, d_date#4]
Arguments: [coalesce(c_last_name#12, ) ASC NULLS FIRST, isnull(c_last_name#12) ASC NULLS FIRST, coalesce(c_first_name#11, ) ASC NULLS FIRST, isnull(c_first_name#11) ASC NULLS FIRST, coalesce(d_date#4, 0) ASC NULLS FIRST, isnull(d_date#4) ASC NULLS FIRST], false, 0

(26) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#16, cs_bill_customer_sk#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int>

(27) ColumnarToRow [codegen id : 10]
Input [2]: [cs_sold_date_sk#16, cs_bill_customer_sk#17]

(28) Filter [codegen id : 10]
Input [2]: [cs_sold_date_sk#16, cs_bill_customer_sk#17]
Condition : (isnotnull(cs_sold_date_sk#16) AND isnotnull(cs_bill_customer_sk#17))

(29) ReusedExchange [Reuses operator id: 8]
Output [2]: [d_date_sk#18, d_date#19]

(30) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#18]
Join condition: None

(31) Project [codegen id : 10]
Output [2]: [cs_bill_customer_sk#17, d_date#19]
Input [4]: [cs_sold_date_sk#16, cs_bill_customer_sk#17, d_date_sk#18, d_date#19]

(32) Exchange
Input [2]: [cs_bill_customer_sk#17, d_date#19]
Arguments: hashpartitioning(cs_bill_customer_sk#17, 5), ENSURE_REQUIREMENTS, [id=#20]

(33) Sort [codegen id : 11]
Input [2]: [cs_bill_customer_sk#17, d_date#19]
Arguments: [cs_bill_customer_sk#17 ASC NULLS FIRST], false, 0

(34) ReusedExchange [Reuses operator id: 17]
Output [3]: [c_customer_sk#21, c_first_name#22, c_last_name#23]

(35) Sort [codegen id : 13]
Input [3]: [c_customer_sk#21, c_first_name#22, c_last_name#23]
Arguments: [c_customer_sk#21 ASC NULLS FIRST], false, 0

(36) SortMergeJoin [codegen id : 14]
Left keys [1]: [cs_bill_customer_sk#17]
Right keys [1]: [c_customer_sk#21]
Join condition: None

(37) Project [codegen id : 14]
Output [3]: [c_last_name#23, c_first_name#22, d_date#19]
Input [5]: [cs_bill_customer_sk#17, d_date#19, c_customer_sk#21, c_first_name#22, c_last_name#23]

(38) HashAggregate [codegen id : 14]
Input [3]: [c_last_name#23, c_first_name#22, d_date#19]
Keys [3]: [c_last_name#23, c_first_name#22, d_date#19]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#23, c_first_name#22, d_date#19]

(39) Exchange
Input [3]: [c_last_name#23, c_first_name#22, d_date#19]
Arguments: hashpartitioning(c_last_name#23, c_first_name#22, d_date#19, 5), ENSURE_REQUIREMENTS, [id=#24]

(40) HashAggregate [codegen id : 15]
Input [3]: [c_last_name#23, c_first_name#22, d_date#19]
Keys [3]: [c_last_name#23, c_first_name#22, d_date#19]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#23, c_first_name#22, d_date#19]

(41) Exchange
Input [3]: [c_last_name#23, c_first_name#22, d_date#19]
Arguments: hashpartitioning(coalesce(c_last_name#23, ), isnull(c_last_name#23), coalesce(c_first_name#22, ), isnull(c_first_name#22), coalesce(d_date#19, 0), isnull(d_date#19), 5), ENSURE_REQUIREMENTS, [id=#25]

(42) Sort [codegen id : 16]
Input [3]: [c_last_name#23, c_first_name#22, d_date#19]
Arguments: [coalesce(c_last_name#23, ) ASC NULLS FIRST, isnull(c_last_name#23) ASC NULLS FIRST, coalesce(c_first_name#22, ) ASC NULLS FIRST, isnull(c_first_name#22) ASC NULLS FIRST, coalesce(d_date#19, 0) ASC NULLS FIRST, isnull(d_date#19) ASC NULLS FIRST], false, 0

(43) SortMergeJoin
Left keys [6]: [coalesce(c_last_name#12, ), isnull(c_last_name#12), coalesce(c_first_name#11, ), isnull(c_first_name#11), coalesce(d_date#4, 0), isnull(d_date#4)]
Right keys [6]: [coalesce(c_last_name#23, ), isnull(c_last_name#23), coalesce(c_first_name#22, ), isnull(c_first_name#22), coalesce(d_date#19, 0), isnull(d_date#19)]
Join condition: None

(44) HashAggregate [codegen id : 17]
Input [3]: [c_last_name#12, c_first_name#11, d_date#4]
Keys [3]: [c_last_name#12, c_first_name#11, d_date#4]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#12, c_first_name#11, d_date#4]

(45) Exchange
Input [3]: [c_last_name#12, c_first_name#11, d_date#4]
Arguments: hashpartitioning(c_last_name#12, c_first_name#11, d_date#4, 5), ENSURE_REQUIREMENTS, [id=#26]

(46) HashAggregate [codegen id : 18]
Input [3]: [c_last_name#12, c_first_name#11, d_date#4]
Keys [3]: [c_last_name#12, c_first_name#11, d_date#4]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#12, c_first_name#11, d_date#4]

(47) Exchange
Input [3]: [c_last_name#12, c_first_name#11, d_date#4]
Arguments: hashpartitioning(coalesce(c_last_name#12, ), isnull(c_last_name#12), coalesce(c_first_name#11, ), isnull(c_first_name#11), coalesce(d_date#4, 0), isnull(d_date#4), 5), ENSURE_REQUIREMENTS, [id=#27]

(48) Sort [codegen id : 19]
Input [3]: [c_last_name#12, c_first_name#11, d_date#4]
Arguments: [coalesce(c_last_name#12, ) ASC NULLS FIRST, isnull(c_last_name#12) ASC NULLS FIRST, coalesce(c_first_name#11, ) ASC NULLS FIRST, isnull(c_first_name#11) ASC NULLS FIRST, coalesce(d_date#4, 0) ASC NULLS FIRST, isnull(d_date#4) ASC NULLS FIRST], false, 0

(49) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#28, ws_bill_customer_sk#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int>

(50) ColumnarToRow [codegen id : 21]
Input [2]: [ws_sold_date_sk#28, ws_bill_customer_sk#29]

(51) Filter [codegen id : 21]
Input [2]: [ws_sold_date_sk#28, ws_bill_customer_sk#29]
Condition : (isnotnull(ws_sold_date_sk#28) AND isnotnull(ws_bill_customer_sk#29))

(52) ReusedExchange [Reuses operator id: 8]
Output [2]: [d_date_sk#30, d_date#31]

(53) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [ws_sold_date_sk#28]
Right keys [1]: [d_date_sk#30]
Join condition: None

(54) Project [codegen id : 21]
Output [2]: [ws_bill_customer_sk#29, d_date#31]
Input [4]: [ws_sold_date_sk#28, ws_bill_customer_sk#29, d_date_sk#30, d_date#31]

(55) Exchange
Input [2]: [ws_bill_customer_sk#29, d_date#31]
Arguments: hashpartitioning(ws_bill_customer_sk#29, 5), ENSURE_REQUIREMENTS, [id=#32]

(56) Sort [codegen id : 22]
Input [2]: [ws_bill_customer_sk#29, d_date#31]
Arguments: [ws_bill_customer_sk#29 ASC NULLS FIRST], false, 0

(57) ReusedExchange [Reuses operator id: 17]
Output [3]: [c_customer_sk#33, c_first_name#34, c_last_name#35]

(58) Sort [codegen id : 24]
Input [3]: [c_customer_sk#33, c_first_name#34, c_last_name#35]
Arguments: [c_customer_sk#33 ASC NULLS FIRST], false, 0

(59) SortMergeJoin [codegen id : 25]
Left keys [1]: [ws_bill_customer_sk#29]
Right keys [1]: [c_customer_sk#33]
Join condition: None

(60) Project [codegen id : 25]
Output [3]: [c_last_name#35, c_first_name#34, d_date#31]
Input [5]: [ws_bill_customer_sk#29, d_date#31, c_customer_sk#33, c_first_name#34, c_last_name#35]

(61) HashAggregate [codegen id : 25]
Input [3]: [c_last_name#35, c_first_name#34, d_date#31]
Keys [3]: [c_last_name#35, c_first_name#34, d_date#31]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#35, c_first_name#34, d_date#31]

(62) Exchange
Input [3]: [c_last_name#35, c_first_name#34, d_date#31]
Arguments: hashpartitioning(c_last_name#35, c_first_name#34, d_date#31, 5), ENSURE_REQUIREMENTS, [id=#36]

(63) HashAggregate [codegen id : 26]
Input [3]: [c_last_name#35, c_first_name#34, d_date#31]
Keys [3]: [c_last_name#35, c_first_name#34, d_date#31]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#35, c_first_name#34, d_date#31]

(64) Exchange
Input [3]: [c_last_name#35, c_first_name#34, d_date#31]
Arguments: hashpartitioning(coalesce(c_last_name#35, ), isnull(c_last_name#35), coalesce(c_first_name#34, ), isnull(c_first_name#34), coalesce(d_date#31, 0), isnull(d_date#31), 5), ENSURE_REQUIREMENTS, [id=#37]

(65) Sort [codegen id : 27]
Input [3]: [c_last_name#35, c_first_name#34, d_date#31]
Arguments: [coalesce(c_last_name#35, ) ASC NULLS FIRST, isnull(c_last_name#35) ASC NULLS FIRST, coalesce(c_first_name#34, ) ASC NULLS FIRST, isnull(c_first_name#34) ASC NULLS FIRST, coalesce(d_date#31, 0) ASC NULLS FIRST, isnull(d_date#31) ASC NULLS FIRST], false, 0

(66) SortMergeJoin
Left keys [6]: [coalesce(c_last_name#12, ), isnull(c_last_name#12), coalesce(c_first_name#11, ), isnull(c_first_name#11), coalesce(d_date#4, 0), isnull(d_date#4)]
Right keys [6]: [coalesce(c_last_name#35, ), isnull(c_last_name#35), coalesce(c_first_name#34, ), isnull(c_first_name#34), coalesce(d_date#31, 0), isnull(d_date#31)]
Join condition: None

(67) HashAggregate [codegen id : 28]
Input [3]: [c_last_name#12, c_first_name#11, d_date#4]
Keys [3]: [c_last_name#12, c_first_name#11, d_date#4]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#12, c_first_name#11, d_date#4]

(68) Exchange
Input [3]: [c_last_name#12, c_first_name#11, d_date#4]
Arguments: hashpartitioning(c_last_name#12, c_first_name#11, d_date#4, 5), ENSURE_REQUIREMENTS, [id=#38]

(69) HashAggregate [codegen id : 29]
Input [3]: [c_last_name#12, c_first_name#11, d_date#4]
Keys [3]: [c_last_name#12, c_first_name#11, d_date#4]
Functions: []
Aggregate Attributes: []
Results: []

(70) HashAggregate [codegen id : 29]
Input: []
Keys: []
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#39]
Results [1]: [count#40]

(71) Exchange
Input [1]: [count#40]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#41]

(72) HashAggregate [codegen id : 30]
Input [1]: [count#40]
Keys: []
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#42]
Results [1]: [count(1)#42 AS count(1)#43]

