== Physical Plan ==
* HashAggregate (61)
+- Exchange (60)
   +- * HashAggregate (59)
      +- * HashAggregate (58)
         +- * HashAggregate (57)
            +- * HashAggregate (56)
               +- * HashAggregate (55)
                  +- * HashAggregate (54)
                     +- Exchange (53)
                        +- * HashAggregate (52)
                           +- SortMergeJoin LeftSemi (51)
                              :- SortMergeJoin LeftSemi (36)
                              :  :- * Sort (21)
                              :  :  +- Exchange (20)
                              :  :     +- * Project (19)
                              :  :        +- * SortMergeJoin Inner (18)
                              :  :           :- * Sort (12)
                              :  :           :  +- Exchange (11)
                              :  :           :     +- * Project (10)
                              :  :           :        +- * BroadcastHashJoin Inner BuildRight (9)
                              :  :           :           :- * Filter (3)
                              :  :           :           :  +- * ColumnarToRow (2)
                              :  :           :           :     +- Scan parquet default.store_sales (1)
                              :  :           :           +- BroadcastExchange (8)
                              :  :           :              +- * Project (7)
                              :  :           :                 +- * Filter (6)
                              :  :           :                    +- * ColumnarToRow (5)
                              :  :           :                       +- Scan parquet default.date_dim (4)
                              :  :           +- * Sort (17)
                              :  :              +- Exchange (16)
                              :  :                 +- * Filter (15)
                              :  :                    +- * ColumnarToRow (14)
                              :  :                       +- Scan parquet default.customer (13)
                              :  +- * Sort (35)
                              :     +- Exchange (34)
                              :        +- * Project (33)
                              :           +- * SortMergeJoin Inner (32)
                              :              :- * Sort (29)
                              :              :  +- Exchange (28)
                              :              :     +- * Project (27)
                              :              :        +- * BroadcastHashJoin Inner BuildRight (26)
                              :              :           :- * Filter (24)
                              :              :           :  +- * ColumnarToRow (23)
                              :              :           :     +- Scan parquet default.catalog_sales (22)
                              :              :           +- ReusedExchange (25)
                              :              +- * Sort (31)
                              :                 +- ReusedExchange (30)
                              +- * Sort (50)
                                 +- Exchange (49)
                                    +- * Project (48)
                                       +- * SortMergeJoin Inner (47)
                                          :- * Sort (44)
                                          :  +- Exchange (43)
                                          :     +- * Project (42)
                                          :        +- * BroadcastHashJoin Inner BuildRight (41)
                                          :           :- * Filter (39)
                                          :           :  +- * ColumnarToRow (38)
                                          :           :     +- Scan parquet default.web_sales (37)
                                          :           +- ReusedExchange (40)
                                          +- * Sort (46)
                                             +- ReusedExchange (45)


(1) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#1, ss_customer_sk#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int>

(2) ColumnarToRow [codegen id : 2]
Input [2]: [ss_sold_date_sk#1, ss_customer_sk#2]

(3) Filter [codegen id : 2]
Input [2]: [ss_sold_date_sk#1, ss_customer_sk#2]
Condition : (isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_customer_sk#2))

(4) Scan parquet default.date_dim
Output [3]: [d_date_sk#3, d_date#4, d_month_seq#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#3, d_date#4, d_month_seq#5]

(6) Filter [codegen id : 1]
Input [3]: [d_date_sk#3, d_date#4, d_month_seq#5]
Condition : (((isnotnull(d_month_seq#5) AND (d_month_seq#5 >= 1200)) AND (d_month_seq#5 <= 1211)) AND isnotnull(d_date_sk#3))

(7) Project [codegen id : 1]
Output [2]: [d_date_sk#3, d_date#4]
Input [3]: [d_date_sk#3, d_date#4, d_month_seq#5]

(8) BroadcastExchange
Input [2]: [d_date_sk#3, d_date#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#6]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#3]
Join condition: None

(10) Project [codegen id : 2]
Output [2]: [ss_customer_sk#2, d_date#4]
Input [4]: [ss_sold_date_sk#1, ss_customer_sk#2, d_date_sk#3, d_date#4]

(11) Exchange
Input [2]: [ss_customer_sk#2, d_date#4]
Arguments: hashpartitioning(ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#7]

(12) Sort [codegen id : 3]
Input [2]: [ss_customer_sk#2, d_date#4]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(13) Scan parquet default.customer
Output [3]: [c_customer_sk#8, c_first_name#9, c_last_name#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(14) ColumnarToRow [codegen id : 4]
Input [3]: [c_customer_sk#8, c_first_name#9, c_last_name#10]

(15) Filter [codegen id : 4]
Input [3]: [c_customer_sk#8, c_first_name#9, c_last_name#10]
Condition : isnotnull(c_customer_sk#8)

(16) Exchange
Input [3]: [c_customer_sk#8, c_first_name#9, c_last_name#10]
Arguments: hashpartitioning(c_customer_sk#8, 5), ENSURE_REQUIREMENTS, [id=#11]

(17) Sort [codegen id : 5]
Input [3]: [c_customer_sk#8, c_first_name#9, c_last_name#10]
Arguments: [c_customer_sk#8 ASC NULLS FIRST], false, 0

(18) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#8]
Join condition: None

(19) Project [codegen id : 6]
Output [3]: [d_date#4, c_first_name#9, c_last_name#10]
Input [5]: [ss_customer_sk#2, d_date#4, c_customer_sk#8, c_first_name#9, c_last_name#10]

(20) Exchange
Input [3]: [d_date#4, c_first_name#9, c_last_name#10]
Arguments: hashpartitioning(coalesce(c_last_name#10, ), isnull(c_last_name#10), coalesce(c_first_name#9, ), isnull(c_first_name#9), coalesce(d_date#4, 0), isnull(d_date#4), 5), ENSURE_REQUIREMENTS, [id=#12]

(21) Sort [codegen id : 7]
Input [3]: [d_date#4, c_first_name#9, c_last_name#10]
Arguments: [coalesce(c_last_name#10, ) ASC NULLS FIRST, isnull(c_last_name#10) ASC NULLS FIRST, coalesce(c_first_name#9, ) ASC NULLS FIRST, isnull(c_first_name#9) ASC NULLS FIRST, coalesce(d_date#4, 0) ASC NULLS FIRST, isnull(d_date#4) ASC NULLS FIRST], false, 0

(22) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#13, cs_bill_customer_sk#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int>

(23) ColumnarToRow [codegen id : 9]
Input [2]: [cs_sold_date_sk#13, cs_bill_customer_sk#14]

(24) Filter [codegen id : 9]
Input [2]: [cs_sold_date_sk#13, cs_bill_customer_sk#14]
Condition : (isnotnull(cs_sold_date_sk#13) AND isnotnull(cs_bill_customer_sk#14))

(25) ReusedExchange [Reuses operator id: 8]
Output [2]: [d_date_sk#15, d_date#16]

(26) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_sold_date_sk#13]
Right keys [1]: [d_date_sk#15]
Join condition: None

(27) Project [codegen id : 9]
Output [2]: [cs_bill_customer_sk#14, d_date#16]
Input [4]: [cs_sold_date_sk#13, cs_bill_customer_sk#14, d_date_sk#15, d_date#16]

(28) Exchange
Input [2]: [cs_bill_customer_sk#14, d_date#16]
Arguments: hashpartitioning(cs_bill_customer_sk#14, 5), ENSURE_REQUIREMENTS, [id=#17]

(29) Sort [codegen id : 10]
Input [2]: [cs_bill_customer_sk#14, d_date#16]
Arguments: [cs_bill_customer_sk#14 ASC NULLS FIRST], false, 0

(30) ReusedExchange [Reuses operator id: 16]
Output [3]: [c_customer_sk#18, c_first_name#19, c_last_name#20]

(31) Sort [codegen id : 12]
Input [3]: [c_customer_sk#18, c_first_name#19, c_last_name#20]
Arguments: [c_customer_sk#18 ASC NULLS FIRST], false, 0

(32) SortMergeJoin [codegen id : 13]
Left keys [1]: [cs_bill_customer_sk#14]
Right keys [1]: [c_customer_sk#18]
Join condition: None

(33) Project [codegen id : 13]
Output [3]: [c_last_name#20, c_first_name#19, d_date#16]
Input [5]: [cs_bill_customer_sk#14, d_date#16, c_customer_sk#18, c_first_name#19, c_last_name#20]

(34) Exchange
Input [3]: [c_last_name#20, c_first_name#19, d_date#16]
Arguments: hashpartitioning(coalesce(c_last_name#20, ), isnull(c_last_name#20), coalesce(c_first_name#19, ), isnull(c_first_name#19), coalesce(d_date#16, 0), isnull(d_date#16), 5), ENSURE_REQUIREMENTS, [id=#21]

(35) Sort [codegen id : 14]
Input [3]: [c_last_name#20, c_first_name#19, d_date#16]
Arguments: [coalesce(c_last_name#20, ) ASC NULLS FIRST, isnull(c_last_name#20) ASC NULLS FIRST, coalesce(c_first_name#19, ) ASC NULLS FIRST, isnull(c_first_name#19) ASC NULLS FIRST, coalesce(d_date#16, 0) ASC NULLS FIRST, isnull(d_date#16) ASC NULLS FIRST], false, 0

(36) SortMergeJoin
Left keys [6]: [coalesce(c_last_name#10, ), isnull(c_last_name#10), coalesce(c_first_name#9, ), isnull(c_first_name#9), coalesce(d_date#4, 0), isnull(d_date#4)]
Right keys [6]: [coalesce(c_last_name#20, ), isnull(c_last_name#20), coalesce(c_first_name#19, ), isnull(c_first_name#19), coalesce(d_date#16, 0), isnull(d_date#16)]
Join condition: None

(37) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#22, ws_bill_customer_sk#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int>

(38) ColumnarToRow [codegen id : 16]
Input [2]: [ws_sold_date_sk#22, ws_bill_customer_sk#23]

(39) Filter [codegen id : 16]
Input [2]: [ws_sold_date_sk#22, ws_bill_customer_sk#23]
Condition : (isnotnull(ws_sold_date_sk#22) AND isnotnull(ws_bill_customer_sk#23))

(40) ReusedExchange [Reuses operator id: 8]
Output [2]: [d_date_sk#24, d_date#25]

(41) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_sold_date_sk#22]
Right keys [1]: [d_date_sk#24]
Join condition: None

(42) Project [codegen id : 16]
Output [2]: [ws_bill_customer_sk#23, d_date#25]
Input [4]: [ws_sold_date_sk#22, ws_bill_customer_sk#23, d_date_sk#24, d_date#25]

(43) Exchange
Input [2]: [ws_bill_customer_sk#23, d_date#25]
Arguments: hashpartitioning(ws_bill_customer_sk#23, 5), ENSURE_REQUIREMENTS, [id=#26]

(44) Sort [codegen id : 17]
Input [2]: [ws_bill_customer_sk#23, d_date#25]
Arguments: [ws_bill_customer_sk#23 ASC NULLS FIRST], false, 0

(45) ReusedExchange [Reuses operator id: 16]
Output [3]: [c_customer_sk#27, c_first_name#28, c_last_name#29]

(46) Sort [codegen id : 19]
Input [3]: [c_customer_sk#27, c_first_name#28, c_last_name#29]
Arguments: [c_customer_sk#27 ASC NULLS FIRST], false, 0

(47) SortMergeJoin [codegen id : 20]
Left keys [1]: [ws_bill_customer_sk#23]
Right keys [1]: [c_customer_sk#27]
Join condition: None

(48) Project [codegen id : 20]
Output [3]: [c_last_name#29, c_first_name#28, d_date#25]
Input [5]: [ws_bill_customer_sk#23, d_date#25, c_customer_sk#27, c_first_name#28, c_last_name#29]

(49) Exchange
Input [3]: [c_last_name#29, c_first_name#28, d_date#25]
Arguments: hashpartitioning(coalesce(c_last_name#29, ), isnull(c_last_name#29), coalesce(c_first_name#28, ), isnull(c_first_name#28), coalesce(d_date#25, 0), isnull(d_date#25), 5), ENSURE_REQUIREMENTS, [id=#30]

(50) Sort [codegen id : 21]
Input [3]: [c_last_name#29, c_first_name#28, d_date#25]
Arguments: [coalesce(c_last_name#29, ) ASC NULLS FIRST, isnull(c_last_name#29) ASC NULLS FIRST, coalesce(c_first_name#28, ) ASC NULLS FIRST, isnull(c_first_name#28) ASC NULLS FIRST, coalesce(d_date#25, 0) ASC NULLS FIRST, isnull(d_date#25) ASC NULLS FIRST], false, 0

(51) SortMergeJoin
Left keys [6]: [coalesce(c_last_name#10, ), isnull(c_last_name#10), coalesce(c_first_name#9, ), isnull(c_first_name#9), coalesce(d_date#4, 0), isnull(d_date#4)]
Right keys [6]: [coalesce(c_last_name#29, ), isnull(c_last_name#29), coalesce(c_first_name#28, ), isnull(c_first_name#28), coalesce(d_date#25, 0), isnull(d_date#25)]
Join condition: None

(52) HashAggregate [codegen id : 22]
Input [3]: [d_date#4, c_first_name#9, c_last_name#10]
Keys [3]: [c_last_name#10, c_first_name#9, d_date#4]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#10, c_first_name#9, d_date#4]

(53) Exchange
Input [3]: [c_last_name#10, c_first_name#9, d_date#4]
Arguments: hashpartitioning(c_last_name#10, c_first_name#9, d_date#4, 5), ENSURE_REQUIREMENTS, [id=#31]

(54) HashAggregate [codegen id : 23]
Input [3]: [c_last_name#10, c_first_name#9, d_date#4]
Keys [3]: [c_last_name#10, c_first_name#9, d_date#4]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#10, c_first_name#9, d_date#4]

(55) HashAggregate [codegen id : 23]
Input [3]: [c_last_name#10, c_first_name#9, d_date#4]
Keys [3]: [c_last_name#10, c_first_name#9, d_date#4]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#10, c_first_name#9, d_date#4]

(56) HashAggregate [codegen id : 23]
Input [3]: [c_last_name#10, c_first_name#9, d_date#4]
Keys [3]: [c_last_name#10, c_first_name#9, d_date#4]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#10, c_first_name#9, d_date#4]

(57) HashAggregate [codegen id : 23]
Input [3]: [c_last_name#10, c_first_name#9, d_date#4]
Keys [3]: [c_last_name#10, c_first_name#9, d_date#4]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#10, c_first_name#9, d_date#4]

(58) HashAggregate [codegen id : 23]
Input [3]: [c_last_name#10, c_first_name#9, d_date#4]
Keys [3]: [c_last_name#10, c_first_name#9, d_date#4]
Functions: []
Aggregate Attributes: []
Results: []

(59) HashAggregate [codegen id : 23]
Input: []
Keys: []
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#32]
Results [1]: [count#33]

(60) Exchange
Input [1]: [count#33]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#34]

(61) HashAggregate [codegen id : 24]
Input [1]: [count#33]
Keys: []
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#35]
Results [1]: [count(1)#35 AS count(1)#36]

