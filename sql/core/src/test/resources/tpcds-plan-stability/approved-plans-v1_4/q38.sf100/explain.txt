== Physical Plan ==
* HashAggregate (64)
+- Exchange (63)
   +- * HashAggregate (62)
      +- * Project (61)
         +- * SortMergeJoin LeftSemi (60)
            :- * SortMergeJoin LeftSemi (41)
            :  :- * Sort (22)
            :  :  +- Exchange (21)
            :  :     +- * HashAggregate (20)
            :  :        +- Exchange (19)
            :  :           +- * HashAggregate (18)
            :  :              +- * Project (17)
            :  :                 +- * SortMergeJoin Inner (16)
            :  :                    :- * Sort (9)
            :  :                    :  +- Exchange (8)
            :  :                    :     +- * HashAggregate (7)
            :  :                    :        +- * Project (6)
            :  :                    :           +- * BroadcastHashJoin Inner BuildRight (5)
            :  :                    :              :- * Filter (3)
            :  :                    :              :  +- * ColumnarToRow (2)
            :  :                    :              :     +- Scan parquet default.store_sales (1)
            :  :                    :              +- ReusedExchange (4)
            :  :                    +- * Sort (15)
            :  :                       +- Exchange (14)
            :  :                          +- * HashAggregate (13)
            :  :                             +- * Filter (12)
            :  :                                +- * ColumnarToRow (11)
            :  :                                   +- Scan parquet default.customer (10)
            :  +- * Sort (40)
            :     +- Exchange (39)
            :        +- * HashAggregate (38)
            :           +- Exchange (37)
            :              +- * HashAggregate (36)
            :                 +- * Project (35)
            :                    +- * SortMergeJoin Inner (34)
            :                       :- * Sort (31)
            :                       :  +- Exchange (30)
            :                       :     +- * HashAggregate (29)
            :                       :        +- * Project (28)
            :                       :           +- * BroadcastHashJoin Inner BuildRight (27)
            :                       :              :- * Filter (25)
            :                       :              :  +- * ColumnarToRow (24)
            :                       :              :     +- Scan parquet default.catalog_sales (23)
            :                       :              +- ReusedExchange (26)
            :                       +- * Sort (33)
            :                          +- ReusedExchange (32)
            +- * Sort (59)
               +- Exchange (58)
                  +- * HashAggregate (57)
                     +- Exchange (56)
                        +- * HashAggregate (55)
                           +- * Project (54)
                              +- * SortMergeJoin Inner (53)
                                 :- * Sort (50)
                                 :  +- Exchange (49)
                                 :     +- * HashAggregate (48)
                                 :        +- * Project (47)
                                 :           +- * BroadcastHashJoin Inner BuildRight (46)
                                 :              :- * Filter (44)
                                 :              :  +- * ColumnarToRow (43)
                                 :              :     +- Scan parquet default.web_sales (42)
                                 :              +- ReusedExchange (45)
                                 +- * Sort (52)
                                    +- ReusedExchange (51)


(1) Scan parquet default.store_sales
Output [2]: [ss_customer_sk#1, ss_sold_date_sk#2]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#2), dynamicpruningexpression(ss_sold_date_sk#2 IN dynamicpruning#3)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int>

(2) ColumnarToRow [codegen id : 2]
Input [2]: [ss_customer_sk#1, ss_sold_date_sk#2]

(3) Filter [codegen id : 2]
Input [2]: [ss_customer_sk#1, ss_sold_date_sk#2]
Condition : isnotnull(ss_customer_sk#1)

(4) ReusedExchange [Reuses operator id: 69]
Output [2]: [d_date_sk#4, d_date#5]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#2]
Right keys [1]: [d_date_sk#4]
Join condition: None

(6) Project [codegen id : 2]
Output [2]: [ss_customer_sk#1, d_date#5]
Input [4]: [ss_customer_sk#1, ss_sold_date_sk#2, d_date_sk#4, d_date#5]

(7) HashAggregate [codegen id : 2]
Input [2]: [ss_customer_sk#1, d_date#5]
Keys [2]: [d_date#5, ss_customer_sk#1]
Functions: []
Aggregate Attributes: []
Results [2]: [d_date#5, ss_customer_sk#1]

(8) Exchange
Input [2]: [d_date#5, ss_customer_sk#1]
Arguments: hashpartitioning(ss_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(9) Sort [codegen id : 3]
Input [2]: [d_date#5, ss_customer_sk#1]
Arguments: [ss_customer_sk#1 ASC NULLS FIRST], false, 0

(10) Scan parquet default.customer
Output [3]: [c_customer_sk#7, c_first_name#8, c_last_name#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(11) ColumnarToRow [codegen id : 4]
Input [3]: [c_customer_sk#7, c_first_name#8, c_last_name#9]

(12) Filter [codegen id : 4]
Input [3]: [c_customer_sk#7, c_first_name#8, c_last_name#9]
Condition : isnotnull(c_customer_sk#7)

(13) HashAggregate [codegen id : 4]
Input [3]: [c_customer_sk#7, c_first_name#8, c_last_name#9]
Keys [3]: [c_last_name#9, c_first_name#8, c_customer_sk#7]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#9, c_first_name#8, c_customer_sk#7]

(14) Exchange
Input [3]: [c_last_name#9, c_first_name#8, c_customer_sk#7]
Arguments: hashpartitioning(c_customer_sk#7, 5), ENSURE_REQUIREMENTS, [id=#10]

(15) Sort [codegen id : 5]
Input [3]: [c_last_name#9, c_first_name#8, c_customer_sk#7]
Arguments: [c_customer_sk#7 ASC NULLS FIRST], false, 0

(16) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#7]
Join condition: None

(17) Project [codegen id : 6]
Output [3]: [d_date#5, c_last_name#9, c_first_name#8]
Input [5]: [d_date#5, ss_customer_sk#1, c_last_name#9, c_first_name#8, c_customer_sk#7]

(18) HashAggregate [codegen id : 6]
Input [3]: [d_date#5, c_last_name#9, c_first_name#8]
Keys [3]: [c_last_name#9, c_first_name#8, d_date#5]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#9, c_first_name#8, d_date#5]

(19) Exchange
Input [3]: [c_last_name#9, c_first_name#8, d_date#5]
Arguments: hashpartitioning(c_last_name#9, c_first_name#8, d_date#5, 5), ENSURE_REQUIREMENTS, [id=#11]

(20) HashAggregate [codegen id : 7]
Input [3]: [c_last_name#9, c_first_name#8, d_date#5]
Keys [3]: [c_last_name#9, c_first_name#8, d_date#5]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#9, c_first_name#8, d_date#5]

(21) Exchange
Input [3]: [c_last_name#9, c_first_name#8, d_date#5]
Arguments: hashpartitioning(coalesce(c_last_name#9, ), isnull(c_last_name#9), coalesce(c_first_name#8, ), isnull(c_first_name#8), coalesce(d_date#5, 1970-01-01), isnull(d_date#5), 5), ENSURE_REQUIREMENTS, [id=#12]

(22) Sort [codegen id : 8]
Input [3]: [c_last_name#9, c_first_name#8, d_date#5]
Arguments: [coalesce(c_last_name#9, ) ASC NULLS FIRST, isnull(c_last_name#9) ASC NULLS FIRST, coalesce(c_first_name#8, ) ASC NULLS FIRST, isnull(c_first_name#8) ASC NULLS FIRST, coalesce(d_date#5, 1970-01-01) ASC NULLS FIRST, isnull(d_date#5) ASC NULLS FIRST], false, 0

(23) Scan parquet default.catalog_sales
Output [2]: [cs_bill_customer_sk#13, cs_sold_date_sk#14]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#14), dynamicpruningexpression(cs_sold_date_sk#14 IN dynamicpruning#3)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int>

(24) ColumnarToRow [codegen id : 10]
Input [2]: [cs_bill_customer_sk#13, cs_sold_date_sk#14]

(25) Filter [codegen id : 10]
Input [2]: [cs_bill_customer_sk#13, cs_sold_date_sk#14]
Condition : isnotnull(cs_bill_customer_sk#13)

(26) ReusedExchange [Reuses operator id: 69]
Output [2]: [d_date_sk#15, d_date#16]

(27) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#14]
Right keys [1]: [d_date_sk#15]
Join condition: None

(28) Project [codegen id : 10]
Output [2]: [cs_bill_customer_sk#13, d_date#16]
Input [4]: [cs_bill_customer_sk#13, cs_sold_date_sk#14, d_date_sk#15, d_date#16]

(29) HashAggregate [codegen id : 10]
Input [2]: [cs_bill_customer_sk#13, d_date#16]
Keys [2]: [d_date#16, cs_bill_customer_sk#13]
Functions: []
Aggregate Attributes: []
Results [2]: [d_date#16, cs_bill_customer_sk#13]

(30) Exchange
Input [2]: [d_date#16, cs_bill_customer_sk#13]
Arguments: hashpartitioning(cs_bill_customer_sk#13, 5), ENSURE_REQUIREMENTS, [id=#17]

(31) Sort [codegen id : 11]
Input [2]: [d_date#16, cs_bill_customer_sk#13]
Arguments: [cs_bill_customer_sk#13 ASC NULLS FIRST], false, 0

(32) ReusedExchange [Reuses operator id: 14]
Output [3]: [c_last_name#18, c_first_name#19, c_customer_sk#20]

(33) Sort [codegen id : 13]
Input [3]: [c_last_name#18, c_first_name#19, c_customer_sk#20]
Arguments: [c_customer_sk#20 ASC NULLS FIRST], false, 0

(34) SortMergeJoin [codegen id : 14]
Left keys [1]: [cs_bill_customer_sk#13]
Right keys [1]: [c_customer_sk#20]
Join condition: None

(35) Project [codegen id : 14]
Output [3]: [d_date#16, c_last_name#18, c_first_name#19]
Input [5]: [d_date#16, cs_bill_customer_sk#13, c_last_name#18, c_first_name#19, c_customer_sk#20]

(36) HashAggregate [codegen id : 14]
Input [3]: [d_date#16, c_last_name#18, c_first_name#19]
Keys [3]: [c_last_name#18, c_first_name#19, d_date#16]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#18, c_first_name#19, d_date#16]

(37) Exchange
Input [3]: [c_last_name#18, c_first_name#19, d_date#16]
Arguments: hashpartitioning(c_last_name#18, c_first_name#19, d_date#16, 5), ENSURE_REQUIREMENTS, [id=#21]

(38) HashAggregate [codegen id : 15]
Input [3]: [c_last_name#18, c_first_name#19, d_date#16]
Keys [3]: [c_last_name#18, c_first_name#19, d_date#16]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#18, c_first_name#19, d_date#16]

(39) Exchange
Input [3]: [c_last_name#18, c_first_name#19, d_date#16]
Arguments: hashpartitioning(coalesce(c_last_name#18, ), isnull(c_last_name#18), coalesce(c_first_name#19, ), isnull(c_first_name#19), coalesce(d_date#16, 1970-01-01), isnull(d_date#16), 5), ENSURE_REQUIREMENTS, [id=#22]

(40) Sort [codegen id : 16]
Input [3]: [c_last_name#18, c_first_name#19, d_date#16]
Arguments: [coalesce(c_last_name#18, ) ASC NULLS FIRST, isnull(c_last_name#18) ASC NULLS FIRST, coalesce(c_first_name#19, ) ASC NULLS FIRST, isnull(c_first_name#19) ASC NULLS FIRST, coalesce(d_date#16, 1970-01-01) ASC NULLS FIRST, isnull(d_date#16) ASC NULLS FIRST], false, 0

(41) SortMergeJoin [codegen id : 17]
Left keys [6]: [coalesce(c_last_name#9, ), isnull(c_last_name#9), coalesce(c_first_name#8, ), isnull(c_first_name#8), coalesce(d_date#5, 1970-01-01), isnull(d_date#5)]
Right keys [6]: [coalesce(c_last_name#18, ), isnull(c_last_name#18), coalesce(c_first_name#19, ), isnull(c_first_name#19), coalesce(d_date#16, 1970-01-01), isnull(d_date#16)]
Join condition: None

(42) Scan parquet default.web_sales
Output [2]: [ws_bill_customer_sk#23, ws_sold_date_sk#24]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#24), dynamicpruningexpression(ws_sold_date_sk#24 IN dynamicpruning#3)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int>

(43) ColumnarToRow [codegen id : 19]
Input [2]: [ws_bill_customer_sk#23, ws_sold_date_sk#24]

(44) Filter [codegen id : 19]
Input [2]: [ws_bill_customer_sk#23, ws_sold_date_sk#24]
Condition : isnotnull(ws_bill_customer_sk#23)

(45) ReusedExchange [Reuses operator id: 69]
Output [2]: [d_date_sk#25, d_date#26]

(46) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [ws_sold_date_sk#24]
Right keys [1]: [d_date_sk#25]
Join condition: None

(47) Project [codegen id : 19]
Output [2]: [ws_bill_customer_sk#23, d_date#26]
Input [4]: [ws_bill_customer_sk#23, ws_sold_date_sk#24, d_date_sk#25, d_date#26]

(48) HashAggregate [codegen id : 19]
Input [2]: [ws_bill_customer_sk#23, d_date#26]
Keys [2]: [d_date#26, ws_bill_customer_sk#23]
Functions: []
Aggregate Attributes: []
Results [2]: [d_date#26, ws_bill_customer_sk#23]

(49) Exchange
Input [2]: [d_date#26, ws_bill_customer_sk#23]
Arguments: hashpartitioning(ws_bill_customer_sk#23, 5), ENSURE_REQUIREMENTS, [id=#27]

(50) Sort [codegen id : 20]
Input [2]: [d_date#26, ws_bill_customer_sk#23]
Arguments: [ws_bill_customer_sk#23 ASC NULLS FIRST], false, 0

(51) ReusedExchange [Reuses operator id: 14]
Output [3]: [c_last_name#28, c_first_name#29, c_customer_sk#30]

(52) Sort [codegen id : 22]
Input [3]: [c_last_name#28, c_first_name#29, c_customer_sk#30]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(53) SortMergeJoin [codegen id : 23]
Left keys [1]: [ws_bill_customer_sk#23]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(54) Project [codegen id : 23]
Output [3]: [d_date#26, c_last_name#28, c_first_name#29]
Input [5]: [d_date#26, ws_bill_customer_sk#23, c_last_name#28, c_first_name#29, c_customer_sk#30]

(55) HashAggregate [codegen id : 23]
Input [3]: [d_date#26, c_last_name#28, c_first_name#29]
Keys [3]: [c_last_name#28, c_first_name#29, d_date#26]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#28, c_first_name#29, d_date#26]

(56) Exchange
Input [3]: [c_last_name#28, c_first_name#29, d_date#26]
Arguments: hashpartitioning(c_last_name#28, c_first_name#29, d_date#26, 5), ENSURE_REQUIREMENTS, [id=#31]

(57) HashAggregate [codegen id : 24]
Input [3]: [c_last_name#28, c_first_name#29, d_date#26]
Keys [3]: [c_last_name#28, c_first_name#29, d_date#26]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#28, c_first_name#29, d_date#26]

(58) Exchange
Input [3]: [c_last_name#28, c_first_name#29, d_date#26]
Arguments: hashpartitioning(coalesce(c_last_name#28, ), isnull(c_last_name#28), coalesce(c_first_name#29, ), isnull(c_first_name#29), coalesce(d_date#26, 1970-01-01), isnull(d_date#26), 5), ENSURE_REQUIREMENTS, [id=#32]

(59) Sort [codegen id : 25]
Input [3]: [c_last_name#28, c_first_name#29, d_date#26]
Arguments: [coalesce(c_last_name#28, ) ASC NULLS FIRST, isnull(c_last_name#28) ASC NULLS FIRST, coalesce(c_first_name#29, ) ASC NULLS FIRST, isnull(c_first_name#29) ASC NULLS FIRST, coalesce(d_date#26, 1970-01-01) ASC NULLS FIRST, isnull(d_date#26) ASC NULLS FIRST], false, 0

(60) SortMergeJoin [codegen id : 26]
Left keys [6]: [coalesce(c_last_name#9, ), isnull(c_last_name#9), coalesce(c_first_name#8, ), isnull(c_first_name#8), coalesce(d_date#5, 1970-01-01), isnull(d_date#5)]
Right keys [6]: [coalesce(c_last_name#28, ), isnull(c_last_name#28), coalesce(c_first_name#29, ), isnull(c_first_name#29), coalesce(d_date#26, 1970-01-01), isnull(d_date#26)]
Join condition: None

(61) Project [codegen id : 26]
Output: []
Input [3]: [c_last_name#9, c_first_name#8, d_date#5]

(62) HashAggregate [codegen id : 26]
Input: []
Keys: []
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#33]
Results [1]: [count#34]

(63) Exchange
Input [1]: [count#34]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#35]

(64) HashAggregate [codegen id : 27]
Input [1]: [count#34]
Keys: []
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#36]
Results [1]: [count(1)#36 AS count(1)#37]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#2 IN dynamicpruning#3
BroadcastExchange (69)
+- * Project (68)
   +- * Filter (67)
      +- * ColumnarToRow (66)
         +- Scan parquet default.date_dim (65)


(65) Scan parquet default.date_dim
Output [3]: [d_date_sk#4, d_date#5, d_month_seq#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(66) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#38]

(67) Filter [codegen id : 1]
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#38]
Condition : (((isnotnull(d_month_seq#38) AND (d_month_seq#38 >= 1200)) AND (d_month_seq#38 <= 1211)) AND isnotnull(d_date_sk#4))

(68) Project [codegen id : 1]
Output [2]: [d_date_sk#4, d_date#5]
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#38]

(69) BroadcastExchange
Input [2]: [d_date_sk#4, d_date#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#39]

Subquery:2 Hosting operator id = 23 Hosting Expression = cs_sold_date_sk#14 IN dynamicpruning#3

Subquery:3 Hosting operator id = 42 Hosting Expression = ws_sold_date_sk#24 IN dynamicpruning#3


