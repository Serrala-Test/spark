== Physical Plan ==
* HashAggregate (66)
+- Exchange (65)
   +- * HashAggregate (64)
      +- * HashAggregate (63)
         +- Exchange (62)
            +- * HashAggregate (61)
               +- * SortMergeJoin LeftSemi (60)
                  :- * Sort (42)
                  :  +- Exchange (41)
                  :     +- * HashAggregate (40)
                  :        +- Exchange (39)
                  :           +- * HashAggregate (38)
                  :              +- * SortMergeJoin LeftSemi (37)
                  :                 :- * Sort (19)
                  :                 :  +- Exchange (18)
                  :                 :     +- * HashAggregate (17)
                  :                 :        +- Exchange (16)
                  :                 :           +- * HashAggregate (15)
                  :                 :              +- * Project (14)
                  :                 :                 +- * SortMergeJoin Inner (13)
                  :                 :                    :- * Sort (8)
                  :                 :                    :  +- Exchange (7)
                  :                 :                    :     +- * Project (6)
                  :                 :                    :        +- * BroadcastHashJoin Inner BuildRight (5)
                  :                 :                    :           :- * Filter (3)
                  :                 :                    :           :  +- * ColumnarToRow (2)
                  :                 :                    :           :     +- Scan parquet default.store_sales (1)
                  :                 :                    :           +- ReusedExchange (4)
                  :                 :                    +- * Sort (12)
                  :                 :                       +- Exchange (11)
                  :                 :                          +- * ColumnarToRow (10)
                  :                 :                             +- Scan parquet default.customer (9)
                  :                 +- * Sort (36)
                  :                    +- Exchange (35)
                  :                       +- * HashAggregate (34)
                  :                          +- Exchange (33)
                  :                             +- * HashAggregate (32)
                  :                                +- * Project (31)
                  :                                   +- * SortMergeJoin Inner (30)
                  :                                      :- * Sort (27)
                  :                                      :  +- Exchange (26)
                  :                                      :     +- * Project (25)
                  :                                      :        +- * BroadcastHashJoin Inner BuildRight (24)
                  :                                      :           :- * Filter (22)
                  :                                      :           :  +- * ColumnarToRow (21)
                  :                                      :           :     +- Scan parquet default.catalog_sales (20)
                  :                                      :           +- ReusedExchange (23)
                  :                                      +- * Sort (29)
                  :                                         +- ReusedExchange (28)
                  +- * Sort (59)
                     +- Exchange (58)
                        +- * HashAggregate (57)
                           +- Exchange (56)
                              +- * HashAggregate (55)
                                 +- * Project (54)
                                    +- * SortMergeJoin Inner (53)
                                       :- * Sort (50)
                                       :  +- Exchange (49)
                                       :     +- * Project (48)
                                       :        +- * BroadcastHashJoin Inner BuildRight (47)
                                       :           :- * Filter (45)
                                       :           :  +- * ColumnarToRow (44)
                                       :           :     +- Scan parquet default.web_sales (43)
                                       :           +- ReusedExchange (46)
                                       +- * Sort (52)
                                          +- ReusedExchange (51)


(1) Scan parquet default.store_sales
Output [2]: [ss_customer_sk#1, ss_sold_date_sk#2]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#2), dynamicpruningexpression(ss_sold_date_sk#2 IN dynamicpruning#3)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int>

(2) ColumnarToRow [codegen id : 2]
Input [2]: [ss_customer_sk#1, ss_sold_date_sk#2]

(3) Filter [codegen id : 2]
Input [2]: [ss_customer_sk#1, ss_sold_date_sk#2]
Condition : isnotnull(ss_customer_sk#1)

(4) ReusedExchange [Reuses operator id: 71]
Output [2]: [d_date_sk#4, d_date#5]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#2]
Right keys [1]: [d_date_sk#4]
Join condition: None

(6) Project [codegen id : 2]
Output [2]: [ss_customer_sk#1, d_date#5]
Input [4]: [ss_customer_sk#1, ss_sold_date_sk#2, d_date_sk#4, d_date#5]

(7) Exchange
Input [2]: [ss_customer_sk#1, d_date#5]
Arguments: hashpartitioning(ss_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#6]

(8) Sort [codegen id : 3]
Input [2]: [ss_customer_sk#1, d_date#5]
Arguments: [ss_customer_sk#1 ASC NULLS FIRST], false, 0

(9) Scan parquet default.customer
Output [3]: [c_customer_sk#7, c_first_name#8, c_last_name#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(10) ColumnarToRow [codegen id : 4]
Input [3]: [c_customer_sk#7, c_first_name#8, c_last_name#9]

(11) Exchange
Input [3]: [c_customer_sk#7, c_first_name#8, c_last_name#9]
Arguments: hashpartitioning(c_customer_sk#7, 5), ENSURE_REQUIREMENTS, [id=#10]

(12) Sort [codegen id : 5]
Input [3]: [c_customer_sk#7, c_first_name#8, c_last_name#9]
Arguments: [c_customer_sk#7 ASC NULLS FIRST], false, 0

(13) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#7]
Join condition: None

(14) Project [codegen id : 6]
Output [3]: [c_last_name#9, c_first_name#8, d_date#5]
Input [5]: [ss_customer_sk#1, d_date#5, c_customer_sk#7, c_first_name#8, c_last_name#9]

(15) HashAggregate [codegen id : 6]
Input [3]: [c_last_name#9, c_first_name#8, d_date#5]
Keys [3]: [c_last_name#9, c_first_name#8, d_date#5]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#9, c_first_name#8, d_date#5]

(16) Exchange
Input [3]: [c_last_name#9, c_first_name#8, d_date#5]
Arguments: hashpartitioning(c_last_name#9, c_first_name#8, d_date#5, 5), ENSURE_REQUIREMENTS, [id=#11]

(17) HashAggregate [codegen id : 7]
Input [3]: [c_last_name#9, c_first_name#8, d_date#5]
Keys [3]: [c_last_name#9, c_first_name#8, d_date#5]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#9, c_first_name#8, d_date#5]

(18) Exchange
Input [3]: [c_last_name#9, c_first_name#8, d_date#5]
Arguments: hashpartitioning(coalesce(c_last_name#9, ), isnull(c_last_name#9), coalesce(c_first_name#8, ), isnull(c_first_name#8), coalesce(d_date#5, 1970-01-01), isnull(d_date#5), 5), ENSURE_REQUIREMENTS, [id=#12]

(19) Sort [codegen id : 8]
Input [3]: [c_last_name#9, c_first_name#8, d_date#5]
Arguments: [coalesce(c_last_name#9, ) ASC NULLS FIRST, isnull(c_last_name#9) ASC NULLS FIRST, coalesce(c_first_name#8, ) ASC NULLS FIRST, isnull(c_first_name#8) ASC NULLS FIRST, coalesce(d_date#5, 1970-01-01) ASC NULLS FIRST, isnull(d_date#5) ASC NULLS FIRST], false, 0

(20) Scan parquet default.catalog_sales
Output [2]: [cs_bill_customer_sk#13, cs_sold_date_sk#14]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#14), dynamicpruningexpression(cs_sold_date_sk#14 IN dynamicpruning#3)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int>

(21) ColumnarToRow [codegen id : 10]
Input [2]: [cs_bill_customer_sk#13, cs_sold_date_sk#14]

(22) Filter [codegen id : 10]
Input [2]: [cs_bill_customer_sk#13, cs_sold_date_sk#14]
Condition : isnotnull(cs_bill_customer_sk#13)

(23) ReusedExchange [Reuses operator id: 71]
Output [2]: [d_date_sk#15, d_date#16]

(24) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#14]
Right keys [1]: [d_date_sk#15]
Join condition: None

(25) Project [codegen id : 10]
Output [2]: [cs_bill_customer_sk#13, d_date#16]
Input [4]: [cs_bill_customer_sk#13, cs_sold_date_sk#14, d_date_sk#15, d_date#16]

(26) Exchange
Input [2]: [cs_bill_customer_sk#13, d_date#16]
Arguments: hashpartitioning(cs_bill_customer_sk#13, 5), ENSURE_REQUIREMENTS, [id=#17]

(27) Sort [codegen id : 11]
Input [2]: [cs_bill_customer_sk#13, d_date#16]
Arguments: [cs_bill_customer_sk#13 ASC NULLS FIRST], false, 0

(28) ReusedExchange [Reuses operator id: 11]
Output [3]: [c_customer_sk#18, c_first_name#19, c_last_name#20]

(29) Sort [codegen id : 13]
Input [3]: [c_customer_sk#18, c_first_name#19, c_last_name#20]
Arguments: [c_customer_sk#18 ASC NULLS FIRST], false, 0

(30) SortMergeJoin [codegen id : 14]
Left keys [1]: [cs_bill_customer_sk#13]
Right keys [1]: [c_customer_sk#18]
Join condition: None

(31) Project [codegen id : 14]
Output [3]: [c_last_name#20, c_first_name#19, d_date#16]
Input [5]: [cs_bill_customer_sk#13, d_date#16, c_customer_sk#18, c_first_name#19, c_last_name#20]

(32) HashAggregate [codegen id : 14]
Input [3]: [c_last_name#20, c_first_name#19, d_date#16]
Keys [3]: [c_last_name#20, c_first_name#19, d_date#16]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#20, c_first_name#19, d_date#16]

(33) Exchange
Input [3]: [c_last_name#20, c_first_name#19, d_date#16]
Arguments: hashpartitioning(c_last_name#20, c_first_name#19, d_date#16, 5), ENSURE_REQUIREMENTS, [id=#21]

(34) HashAggregate [codegen id : 15]
Input [3]: [c_last_name#20, c_first_name#19, d_date#16]
Keys [3]: [c_last_name#20, c_first_name#19, d_date#16]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#20, c_first_name#19, d_date#16]

(35) Exchange
Input [3]: [c_last_name#20, c_first_name#19, d_date#16]
Arguments: hashpartitioning(coalesce(c_last_name#20, ), isnull(c_last_name#20), coalesce(c_first_name#19, ), isnull(c_first_name#19), coalesce(d_date#16, 1970-01-01), isnull(d_date#16), 5), ENSURE_REQUIREMENTS, [id=#22]

(36) Sort [codegen id : 16]
Input [3]: [c_last_name#20, c_first_name#19, d_date#16]
Arguments: [coalesce(c_last_name#20, ) ASC NULLS FIRST, isnull(c_last_name#20) ASC NULLS FIRST, coalesce(c_first_name#19, ) ASC NULLS FIRST, isnull(c_first_name#19) ASC NULLS FIRST, coalesce(d_date#16, 1970-01-01) ASC NULLS FIRST, isnull(d_date#16) ASC NULLS FIRST], false, 0

(37) SortMergeJoin [codegen id : 17]
Left keys [6]: [coalesce(c_last_name#9, ), isnull(c_last_name#9), coalesce(c_first_name#8, ), isnull(c_first_name#8), coalesce(d_date#5, 1970-01-01), isnull(d_date#5)]
Right keys [6]: [coalesce(c_last_name#20, ), isnull(c_last_name#20), coalesce(c_first_name#19, ), isnull(c_first_name#19), coalesce(d_date#16, 1970-01-01), isnull(d_date#16)]
Join condition: None

(38) HashAggregate [codegen id : 17]
Input [3]: [c_last_name#9, c_first_name#8, d_date#5]
Keys [3]: [c_last_name#9, c_first_name#8, d_date#5]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#9, c_first_name#8, d_date#5]

(39) Exchange
Input [3]: [c_last_name#9, c_first_name#8, d_date#5]
Arguments: hashpartitioning(c_last_name#9, c_first_name#8, d_date#5, 5), ENSURE_REQUIREMENTS, [id=#23]

(40) HashAggregate [codegen id : 18]
Input [3]: [c_last_name#9, c_first_name#8, d_date#5]
Keys [3]: [c_last_name#9, c_first_name#8, d_date#5]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#9, c_first_name#8, d_date#5]

(41) Exchange
Input [3]: [c_last_name#9, c_first_name#8, d_date#5]
Arguments: hashpartitioning(coalesce(c_last_name#9, ), isnull(c_last_name#9), coalesce(c_first_name#8, ), isnull(c_first_name#8), coalesce(d_date#5, 1970-01-01), isnull(d_date#5), 5), ENSURE_REQUIREMENTS, [id=#24]

(42) Sort [codegen id : 19]
Input [3]: [c_last_name#9, c_first_name#8, d_date#5]
Arguments: [coalesce(c_last_name#9, ) ASC NULLS FIRST, isnull(c_last_name#9) ASC NULLS FIRST, coalesce(c_first_name#8, ) ASC NULLS FIRST, isnull(c_first_name#8) ASC NULLS FIRST, coalesce(d_date#5, 1970-01-01) ASC NULLS FIRST, isnull(d_date#5) ASC NULLS FIRST], false, 0

(43) Scan parquet default.web_sales
Output [2]: [ws_bill_customer_sk#25, ws_sold_date_sk#26]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#26), dynamicpruningexpression(ws_sold_date_sk#26 IN dynamicpruning#3)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int>

(44) ColumnarToRow [codegen id : 21]
Input [2]: [ws_bill_customer_sk#25, ws_sold_date_sk#26]

(45) Filter [codegen id : 21]
Input [2]: [ws_bill_customer_sk#25, ws_sold_date_sk#26]
Condition : isnotnull(ws_bill_customer_sk#25)

(46) ReusedExchange [Reuses operator id: 71]
Output [2]: [d_date_sk#27, d_date#28]

(47) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [ws_sold_date_sk#26]
Right keys [1]: [d_date_sk#27]
Join condition: None

(48) Project [codegen id : 21]
Output [2]: [ws_bill_customer_sk#25, d_date#28]
Input [4]: [ws_bill_customer_sk#25, ws_sold_date_sk#26, d_date_sk#27, d_date#28]

(49) Exchange
Input [2]: [ws_bill_customer_sk#25, d_date#28]
Arguments: hashpartitioning(ws_bill_customer_sk#25, 5), ENSURE_REQUIREMENTS, [id=#29]

(50) Sort [codegen id : 22]
Input [2]: [ws_bill_customer_sk#25, d_date#28]
Arguments: [ws_bill_customer_sk#25 ASC NULLS FIRST], false, 0

(51) ReusedExchange [Reuses operator id: 11]
Output [3]: [c_customer_sk#30, c_first_name#31, c_last_name#32]

(52) Sort [codegen id : 24]
Input [3]: [c_customer_sk#30, c_first_name#31, c_last_name#32]
Arguments: [c_customer_sk#30 ASC NULLS FIRST], false, 0

(53) SortMergeJoin [codegen id : 25]
Left keys [1]: [ws_bill_customer_sk#25]
Right keys [1]: [c_customer_sk#30]
Join condition: None

(54) Project [codegen id : 25]
Output [3]: [c_last_name#32, c_first_name#31, d_date#28]
Input [5]: [ws_bill_customer_sk#25, d_date#28, c_customer_sk#30, c_first_name#31, c_last_name#32]

(55) HashAggregate [codegen id : 25]
Input [3]: [c_last_name#32, c_first_name#31, d_date#28]
Keys [3]: [c_last_name#32, c_first_name#31, d_date#28]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#32, c_first_name#31, d_date#28]

(56) Exchange
Input [3]: [c_last_name#32, c_first_name#31, d_date#28]
Arguments: hashpartitioning(c_last_name#32, c_first_name#31, d_date#28, 5), ENSURE_REQUIREMENTS, [id=#33]

(57) HashAggregate [codegen id : 26]
Input [3]: [c_last_name#32, c_first_name#31, d_date#28]
Keys [3]: [c_last_name#32, c_first_name#31, d_date#28]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#32, c_first_name#31, d_date#28]

(58) Exchange
Input [3]: [c_last_name#32, c_first_name#31, d_date#28]
Arguments: hashpartitioning(coalesce(c_last_name#32, ), isnull(c_last_name#32), coalesce(c_first_name#31, ), isnull(c_first_name#31), coalesce(d_date#28, 1970-01-01), isnull(d_date#28), 5), ENSURE_REQUIREMENTS, [id=#34]

(59) Sort [codegen id : 27]
Input [3]: [c_last_name#32, c_first_name#31, d_date#28]
Arguments: [coalesce(c_last_name#32, ) ASC NULLS FIRST, isnull(c_last_name#32) ASC NULLS FIRST, coalesce(c_first_name#31, ) ASC NULLS FIRST, isnull(c_first_name#31) ASC NULLS FIRST, coalesce(d_date#28, 1970-01-01) ASC NULLS FIRST, isnull(d_date#28) ASC NULLS FIRST], false, 0

(60) SortMergeJoin [codegen id : 28]
Left keys [6]: [coalesce(c_last_name#9, ), isnull(c_last_name#9), coalesce(c_first_name#8, ), isnull(c_first_name#8), coalesce(d_date#5, 1970-01-01), isnull(d_date#5)]
Right keys [6]: [coalesce(c_last_name#32, ), isnull(c_last_name#32), coalesce(c_first_name#31, ), isnull(c_first_name#31), coalesce(d_date#28, 1970-01-01), isnull(d_date#28)]
Join condition: None

(61) HashAggregate [codegen id : 28]
Input [3]: [c_last_name#9, c_first_name#8, d_date#5]
Keys [3]: [c_last_name#9, c_first_name#8, d_date#5]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#9, c_first_name#8, d_date#5]

(62) Exchange
Input [3]: [c_last_name#9, c_first_name#8, d_date#5]
Arguments: hashpartitioning(c_last_name#9, c_first_name#8, d_date#5, 5), ENSURE_REQUIREMENTS, [id=#35]

(63) HashAggregate [codegen id : 29]
Input [3]: [c_last_name#9, c_first_name#8, d_date#5]
Keys [3]: [c_last_name#9, c_first_name#8, d_date#5]
Functions: []
Aggregate Attributes: []
Results: []

(64) HashAggregate [codegen id : 29]
Input: []
Keys: []
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#36]
Results [1]: [count#37]

(65) Exchange
Input [1]: [count#37]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#38]

(66) HashAggregate [codegen id : 30]
Input [1]: [count#37]
Keys: []
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#39]
Results [1]: [count(1)#39 AS count(1)#40]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#2 IN dynamicpruning#3
BroadcastExchange (71)
+- * Project (70)
   +- * Filter (69)
      +- * ColumnarToRow (68)
         +- Scan parquet default.date_dim (67)


(67) Scan parquet default.date_dim
Output [3]: [d_date_sk#4, d_date#5, d_month_seq#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(68) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#41]

(69) Filter [codegen id : 1]
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#41]
Condition : ((d_month_seq#41 >= 1200) AND (d_month_seq#41 <= 1211))

(70) Project [codegen id : 1]
Output [2]: [d_date_sk#4, d_date#5]
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#41]

(71) BroadcastExchange
Input [2]: [d_date_sk#4, d_date#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#42]

Subquery:2 Hosting operator id = 20 Hosting Expression = cs_sold_date_sk#14 IN dynamicpruning#3

Subquery:3 Hosting operator id = 43 Hosting Expression = ws_sold_date_sk#26 IN dynamicpruning#3


