== Physical Plan ==
* HashAggregate (67)
+- Exchange (66)
   +- * HashAggregate (65)
      +- * HashAggregate (64)
         +- * HashAggregate (63)
            +- * HashAggregate (62)
               +- * HashAggregate (61)
                  +- * HashAggregate (60)
                     +- Exchange (59)
                        +- * HashAggregate (58)
                           +- SortMergeJoin LeftSemi (57)
                              :- SortMergeJoin LeftSemi (39)
                              :  :- * Sort (21)
                              :  :  +- Exchange (20)
                              :  :     +- * Project (19)
                              :  :        +- * BroadcastHashJoin Inner BuildRight (18)
                              :  :           :- * Project (12)
                              :  :           :  +- * SortMergeJoin Inner (11)
                              :  :           :     :- * Sort (5)
                              :  :           :     :  +- Exchange (4)
                              :  :           :     :     +- * Filter (3)
                              :  :           :     :        +- * ColumnarToRow (2)
                              :  :           :     :           +- Scan parquet default.store_sales (1)
                              :  :           :     +- * Sort (10)
                              :  :           :        +- Exchange (9)
                              :  :           :           +- * Filter (8)
                              :  :           :              +- * ColumnarToRow (7)
                              :  :           :                 +- Scan parquet default.customer (6)
                              :  :           +- BroadcastExchange (17)
                              :  :              +- * Project (16)
                              :  :                 +- * Filter (15)
                              :  :                    +- * ColumnarToRow (14)
                              :  :                       +- Scan parquet default.date_dim (13)
                              :  +- * Sort (38)
                              :     +- Exchange (37)
                              :        +- * HashAggregate (36)
                              :           +- Exchange (35)
                              :              +- * HashAggregate (34)
                              :                 +- * Project (33)
                              :                    +- * BroadcastHashJoin Inner BuildRight (32)
                              :                       :- * Project (30)
                              :                       :  +- * SortMergeJoin Inner (29)
                              :                       :     :- * Sort (26)
                              :                       :     :  +- Exchange (25)
                              :                       :     :     +- * Filter (24)
                              :                       :     :        +- * ColumnarToRow (23)
                              :                       :     :           +- Scan parquet default.catalog_sales (22)
                              :                       :     +- * Sort (28)
                              :                       :        +- ReusedExchange (27)
                              :                       +- ReusedExchange (31)
                              +- * Sort (56)
                                 +- Exchange (55)
                                    +- * HashAggregate (54)
                                       +- Exchange (53)
                                          +- * HashAggregate (52)
                                             +- * Project (51)
                                                +- * BroadcastHashJoin Inner BuildRight (50)
                                                   :- * Project (48)
                                                   :  +- * SortMergeJoin Inner (47)
                                                   :     :- * Sort (44)
                                                   :     :  +- Exchange (43)
                                                   :     :     +- * Filter (42)
                                                   :     :        +- * ColumnarToRow (41)
                                                   :     :           +- Scan parquet default.web_sales (40)
                                                   :     +- * Sort (46)
                                                   :        +- ReusedExchange (45)
                                                   +- ReusedExchange (49)


(1) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#1, ss_customer_sk#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int>

(2) ColumnarToRow [codegen id : 1]
Input [2]: [ss_sold_date_sk#1, ss_customer_sk#2]

(3) Filter [codegen id : 1]
Input [2]: [ss_sold_date_sk#1, ss_customer_sk#2]
Condition : (isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_customer_sk#2))

(4) Exchange
Input [2]: [ss_sold_date_sk#1, ss_customer_sk#2]
Arguments: hashpartitioning(ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#3]

(5) Sort [codegen id : 2]
Input [2]: [ss_sold_date_sk#1, ss_customer_sk#2]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(6) Scan parquet default.customer
Output [3]: [c_customer_sk#4, c_first_name#5, c_last_name#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(7) ColumnarToRow [codegen id : 3]
Input [3]: [c_customer_sk#4, c_first_name#5, c_last_name#6]

(8) Filter [codegen id : 3]
Input [3]: [c_customer_sk#4, c_first_name#5, c_last_name#6]
Condition : isnotnull(c_customer_sk#4)

(9) Exchange
Input [3]: [c_customer_sk#4, c_first_name#5, c_last_name#6]
Arguments: hashpartitioning(c_customer_sk#4, 5), ENSURE_REQUIREMENTS, [id=#7]

(10) Sort [codegen id : 4]
Input [3]: [c_customer_sk#4, c_first_name#5, c_last_name#6]
Arguments: [c_customer_sk#4 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#4]
Join condition: None

(12) Project [codegen id : 6]
Output [3]: [ss_sold_date_sk#1, c_first_name#5, c_last_name#6]
Input [5]: [ss_sold_date_sk#1, ss_customer_sk#2, c_customer_sk#4, c_first_name#5, c_last_name#6]

(13) Scan parquet default.date_dim
Output [3]: [d_date_sk#8, d_date#9, d_month_seq#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(14) ColumnarToRow [codegen id : 5]
Input [3]: [d_date_sk#8, d_date#9, d_month_seq#10]

(15) Filter [codegen id : 5]
Input [3]: [d_date_sk#8, d_date#9, d_month_seq#10]
Condition : (((isnotnull(d_month_seq#10) AND (d_month_seq#10 >= 1200)) AND (d_month_seq#10 <= 1211)) AND isnotnull(d_date_sk#8))

(16) Project [codegen id : 5]
Output [2]: [d_date_sk#8, d_date#9]
Input [3]: [d_date_sk#8, d_date#9, d_month_seq#10]

(17) BroadcastExchange
Input [2]: [d_date_sk#8, d_date#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#11]

(18) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#8]
Join condition: None

(19) Project [codegen id : 6]
Output [3]: [d_date#9, c_first_name#5, c_last_name#6]
Input [5]: [ss_sold_date_sk#1, c_first_name#5, c_last_name#6, d_date_sk#8, d_date#9]

(20) Exchange
Input [3]: [d_date#9, c_first_name#5, c_last_name#6]
Arguments: hashpartitioning(coalesce(c_last_name#6, ), isnull(c_last_name#6), coalesce(c_first_name#5, ), isnull(c_first_name#5), coalesce(d_date#9, 0), isnull(d_date#9), 5), ENSURE_REQUIREMENTS, [id=#12]

(21) Sort [codegen id : 7]
Input [3]: [d_date#9, c_first_name#5, c_last_name#6]
Arguments: [coalesce(c_last_name#6, ) ASC NULLS FIRST, isnull(c_last_name#6) ASC NULLS FIRST, coalesce(c_first_name#5, ) ASC NULLS FIRST, isnull(c_first_name#5) ASC NULLS FIRST, coalesce(d_date#9, 0) ASC NULLS FIRST, isnull(d_date#9) ASC NULLS FIRST], false, 0

(22) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#13, cs_bill_customer_sk#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int>

(23) ColumnarToRow [codegen id : 8]
Input [2]: [cs_sold_date_sk#13, cs_bill_customer_sk#14]

(24) Filter [codegen id : 8]
Input [2]: [cs_sold_date_sk#13, cs_bill_customer_sk#14]
Condition : (isnotnull(cs_sold_date_sk#13) AND isnotnull(cs_bill_customer_sk#14))

(25) Exchange
Input [2]: [cs_sold_date_sk#13, cs_bill_customer_sk#14]
Arguments: hashpartitioning(cs_bill_customer_sk#14, 5), ENSURE_REQUIREMENTS, [id=#15]

(26) Sort [codegen id : 9]
Input [2]: [cs_sold_date_sk#13, cs_bill_customer_sk#14]
Arguments: [cs_bill_customer_sk#14 ASC NULLS FIRST], false, 0

(27) ReusedExchange [Reuses operator id: 9]
Output [3]: [c_customer_sk#16, c_first_name#17, c_last_name#18]

(28) Sort [codegen id : 11]
Input [3]: [c_customer_sk#16, c_first_name#17, c_last_name#18]
Arguments: [c_customer_sk#16 ASC NULLS FIRST], false, 0

(29) SortMergeJoin [codegen id : 13]
Left keys [1]: [cs_bill_customer_sk#14]
Right keys [1]: [c_customer_sk#16]
Join condition: None

(30) Project [codegen id : 13]
Output [3]: [cs_sold_date_sk#13, c_first_name#17, c_last_name#18]
Input [5]: [cs_sold_date_sk#13, cs_bill_customer_sk#14, c_customer_sk#16, c_first_name#17, c_last_name#18]

(31) ReusedExchange [Reuses operator id: 17]
Output [2]: [d_date_sk#19, d_date#20]

(32) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [cs_sold_date_sk#13]
Right keys [1]: [d_date_sk#19]
Join condition: None

(33) Project [codegen id : 13]
Output [3]: [c_last_name#18, c_first_name#17, d_date#20]
Input [5]: [cs_sold_date_sk#13, c_first_name#17, c_last_name#18, d_date_sk#19, d_date#20]

(34) HashAggregate [codegen id : 13]
Input [3]: [c_last_name#18, c_first_name#17, d_date#20]
Keys [3]: [c_last_name#18, c_first_name#17, d_date#20]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#18, c_first_name#17, d_date#20]

(35) Exchange
Input [3]: [c_last_name#18, c_first_name#17, d_date#20]
Arguments: hashpartitioning(c_last_name#18, c_first_name#17, d_date#20, 5), ENSURE_REQUIREMENTS, [id=#21]

(36) HashAggregate [codegen id : 14]
Input [3]: [c_last_name#18, c_first_name#17, d_date#20]
Keys [3]: [c_last_name#18, c_first_name#17, d_date#20]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#18, c_first_name#17, d_date#20]

(37) Exchange
Input [3]: [c_last_name#18, c_first_name#17, d_date#20]
Arguments: hashpartitioning(coalesce(c_last_name#18, ), isnull(c_last_name#18), coalesce(c_first_name#17, ), isnull(c_first_name#17), coalesce(d_date#20, 0), isnull(d_date#20), 5), ENSURE_REQUIREMENTS, [id=#22]

(38) Sort [codegen id : 15]
Input [3]: [c_last_name#18, c_first_name#17, d_date#20]
Arguments: [coalesce(c_last_name#18, ) ASC NULLS FIRST, isnull(c_last_name#18) ASC NULLS FIRST, coalesce(c_first_name#17, ) ASC NULLS FIRST, isnull(c_first_name#17) ASC NULLS FIRST, coalesce(d_date#20, 0) ASC NULLS FIRST, isnull(d_date#20) ASC NULLS FIRST], false, 0

(39) SortMergeJoin
Left keys [6]: [coalesce(c_last_name#6, ), isnull(c_last_name#6), coalesce(c_first_name#5, ), isnull(c_first_name#5), coalesce(d_date#9, 0), isnull(d_date#9)]
Right keys [6]: [coalesce(c_last_name#18, ), isnull(c_last_name#18), coalesce(c_first_name#17, ), isnull(c_first_name#17), coalesce(d_date#20, 0), isnull(d_date#20)]
Join condition: None

(40) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#23, ws_bill_customer_sk#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int>

(41) ColumnarToRow [codegen id : 16]
Input [2]: [ws_sold_date_sk#23, ws_bill_customer_sk#24]

(42) Filter [codegen id : 16]
Input [2]: [ws_sold_date_sk#23, ws_bill_customer_sk#24]
Condition : (isnotnull(ws_sold_date_sk#23) AND isnotnull(ws_bill_customer_sk#24))

(43) Exchange
Input [2]: [ws_sold_date_sk#23, ws_bill_customer_sk#24]
Arguments: hashpartitioning(ws_bill_customer_sk#24, 5), ENSURE_REQUIREMENTS, [id=#25]

(44) Sort [codegen id : 17]
Input [2]: [ws_sold_date_sk#23, ws_bill_customer_sk#24]
Arguments: [ws_bill_customer_sk#24 ASC NULLS FIRST], false, 0

(45) ReusedExchange [Reuses operator id: 9]
Output [3]: [c_customer_sk#26, c_first_name#27, c_last_name#28]

(46) Sort [codegen id : 19]
Input [3]: [c_customer_sk#26, c_first_name#27, c_last_name#28]
Arguments: [c_customer_sk#26 ASC NULLS FIRST], false, 0

(47) SortMergeJoin [codegen id : 21]
Left keys [1]: [ws_bill_customer_sk#24]
Right keys [1]: [c_customer_sk#26]
Join condition: None

(48) Project [codegen id : 21]
Output [3]: [ws_sold_date_sk#23, c_first_name#27, c_last_name#28]
Input [5]: [ws_sold_date_sk#23, ws_bill_customer_sk#24, c_customer_sk#26, c_first_name#27, c_last_name#28]

(49) ReusedExchange [Reuses operator id: 17]
Output [2]: [d_date_sk#29, d_date#30]

(50) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [ws_sold_date_sk#23]
Right keys [1]: [d_date_sk#29]
Join condition: None

(51) Project [codegen id : 21]
Output [3]: [c_last_name#28, c_first_name#27, d_date#30]
Input [5]: [ws_sold_date_sk#23, c_first_name#27, c_last_name#28, d_date_sk#29, d_date#30]

(52) HashAggregate [codegen id : 21]
Input [3]: [c_last_name#28, c_first_name#27, d_date#30]
Keys [3]: [c_last_name#28, c_first_name#27, d_date#30]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#28, c_first_name#27, d_date#30]

(53) Exchange
Input [3]: [c_last_name#28, c_first_name#27, d_date#30]
Arguments: hashpartitioning(c_last_name#28, c_first_name#27, d_date#30, 5), ENSURE_REQUIREMENTS, [id=#31]

(54) HashAggregate [codegen id : 22]
Input [3]: [c_last_name#28, c_first_name#27, d_date#30]
Keys [3]: [c_last_name#28, c_first_name#27, d_date#30]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#28, c_first_name#27, d_date#30]

(55) Exchange
Input [3]: [c_last_name#28, c_first_name#27, d_date#30]
Arguments: hashpartitioning(coalesce(c_last_name#28, ), isnull(c_last_name#28), coalesce(c_first_name#27, ), isnull(c_first_name#27), coalesce(d_date#30, 0), isnull(d_date#30), 5), ENSURE_REQUIREMENTS, [id=#32]

(56) Sort [codegen id : 23]
Input [3]: [c_last_name#28, c_first_name#27, d_date#30]
Arguments: [coalesce(c_last_name#28, ) ASC NULLS FIRST, isnull(c_last_name#28) ASC NULLS FIRST, coalesce(c_first_name#27, ) ASC NULLS FIRST, isnull(c_first_name#27) ASC NULLS FIRST, coalesce(d_date#30, 0) ASC NULLS FIRST, isnull(d_date#30) ASC NULLS FIRST], false, 0

(57) SortMergeJoin
Left keys [6]: [coalesce(c_last_name#6, ), isnull(c_last_name#6), coalesce(c_first_name#5, ), isnull(c_first_name#5), coalesce(d_date#9, 0), isnull(d_date#9)]
Right keys [6]: [coalesce(c_last_name#28, ), isnull(c_last_name#28), coalesce(c_first_name#27, ), isnull(c_first_name#27), coalesce(d_date#30, 0), isnull(d_date#30)]
Join condition: None

(58) HashAggregate [codegen id : 24]
Input [3]: [d_date#9, c_first_name#5, c_last_name#6]
Keys [3]: [c_last_name#6, c_first_name#5, d_date#9]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#6, c_first_name#5, d_date#9]

(59) Exchange
Input [3]: [c_last_name#6, c_first_name#5, d_date#9]
Arguments: hashpartitioning(c_last_name#6, c_first_name#5, d_date#9, 5), ENSURE_REQUIREMENTS, [id=#33]

(60) HashAggregate [codegen id : 25]
Input [3]: [c_last_name#6, c_first_name#5, d_date#9]
Keys [3]: [c_last_name#6, c_first_name#5, d_date#9]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#6, c_first_name#5, d_date#9]

(61) HashAggregate [codegen id : 25]
Input [3]: [c_last_name#6, c_first_name#5, d_date#9]
Keys [3]: [c_last_name#6, c_first_name#5, d_date#9]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#6, c_first_name#5, d_date#9]

(62) HashAggregate [codegen id : 25]
Input [3]: [c_last_name#6, c_first_name#5, d_date#9]
Keys [3]: [c_last_name#6, c_first_name#5, d_date#9]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#6, c_first_name#5, d_date#9]

(63) HashAggregate [codegen id : 25]
Input [3]: [c_last_name#6, c_first_name#5, d_date#9]
Keys [3]: [c_last_name#6, c_first_name#5, d_date#9]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#6, c_first_name#5, d_date#9]

(64) HashAggregate [codegen id : 25]
Input [3]: [c_last_name#6, c_first_name#5, d_date#9]
Keys [3]: [c_last_name#6, c_first_name#5, d_date#9]
Functions: []
Aggregate Attributes: []
Results: []

(65) HashAggregate [codegen id : 25]
Input: []
Keys: []
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#34]
Results [1]: [count#35]

(66) Exchange
Input [1]: [count#35]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#36]

(67) HashAggregate [codegen id : 26]
Input [1]: [count#35]
Keys: []
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#37]
Results [1]: [count(1)#37 AS count(1)#38]

