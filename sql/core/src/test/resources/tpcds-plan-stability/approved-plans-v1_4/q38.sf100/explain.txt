== Physical Plan ==
* HashAggregate (76)
+- Exchange (75)
   +- * HashAggregate (74)
      +- * HashAggregate (73)
         +- Exchange (72)
            +- * HashAggregate (71)
               +- SortMergeJoin LeftSemi (70)
                  :- * Sort (48)
                  :  +- Exchange (47)
                  :     +- * HashAggregate (46)
                  :        +- Exchange (45)
                  :           +- * HashAggregate (44)
                  :              +- SortMergeJoin LeftSemi (43)
                  :                 :- * Sort (21)
                  :                 :  +- Exchange (20)
                  :                 :     +- * HashAggregate (19)
                  :                 :        +- Exchange (18)
                  :                 :           +- * HashAggregate (17)
                  :                 :              +- * Project (16)
                  :                 :                 +- * BroadcastHashJoin Inner BuildLeft (15)
                  :                 :                    :- BroadcastExchange (11)
                  :                 :                    :  +- * Project (10)
                  :                 :                    :     +- * BroadcastHashJoin Inner BuildLeft (9)
                  :                 :                    :        :- BroadcastExchange (4)
                  :                 :                    :        :  +- * Filter (3)
                  :                 :                    :        :     +- * ColumnarToRow (2)
                  :                 :                    :        :        +- Scan parquet default.store_sales (1)
                  :                 :                    :        +- * Project (8)
                  :                 :                    :           +- * Filter (7)
                  :                 :                    :              +- * ColumnarToRow (6)
                  :                 :                    :                 +- Scan parquet default.date_dim (5)
                  :                 :                    +- * Filter (14)
                  :                 :                       +- * ColumnarToRow (13)
                  :                 :                          +- Scan parquet default.customer (12)
                  :                 +- * Sort (42)
                  :                    +- Exchange (41)
                  :                       +- * HashAggregate (40)
                  :                          +- Exchange (39)
                  :                             +- * HashAggregate (38)
                  :                                +- * Project (37)
                  :                                   +- * BroadcastHashJoin Inner BuildLeft (36)
                  :                                      :- BroadcastExchange (32)
                  :                                      :  +- * Project (31)
                  :                                      :     +- * BroadcastHashJoin Inner BuildLeft (30)
                  :                                      :        :- BroadcastExchange (25)
                  :                                      :        :  +- * Filter (24)
                  :                                      :        :     +- * ColumnarToRow (23)
                  :                                      :        :        +- Scan parquet default.catalog_sales (22)
                  :                                      :        +- * Project (29)
                  :                                      :           +- * Filter (28)
                  :                                      :              +- * ColumnarToRow (27)
                  :                                      :                 +- Scan parquet default.date_dim (26)
                  :                                      +- * Filter (35)
                  :                                         +- * ColumnarToRow (34)
                  :                                            +- Scan parquet default.customer (33)
                  +- * Sort (69)
                     +- Exchange (68)
                        +- * HashAggregate (67)
                           +- Exchange (66)
                              +- * HashAggregate (65)
                                 +- * Project (64)
                                    +- * BroadcastHashJoin Inner BuildLeft (63)
                                       :- BroadcastExchange (59)
                                       :  +- * Project (58)
                                       :     +- * BroadcastHashJoin Inner BuildLeft (57)
                                       :        :- BroadcastExchange (52)
                                       :        :  +- * Filter (51)
                                       :        :     +- * ColumnarToRow (50)
                                       :        :        +- Scan parquet default.web_sales (49)
                                       :        +- * Project (56)
                                       :           +- * Filter (55)
                                       :              +- * ColumnarToRow (54)
                                       :                 +- Scan parquet default.date_dim (53)
                                       +- * Filter (62)
                                          +- * ColumnarToRow (61)
                                             +- Scan parquet default.customer (60)


(1) Scan parquet default.store_sales
Output [2]: [ss_customer_sk#1, ss_sold_date_sk#2]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#2), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int>

(2) ColumnarToRow [codegen id : 1]
Input [2]: [ss_customer_sk#1, ss_sold_date_sk#2]

(3) Filter [codegen id : 1]
Input [2]: [ss_customer_sk#1, ss_sold_date_sk#2]
Condition : isnotnull(ss_customer_sk#1)

(4) BroadcastExchange
Input [2]: [ss_customer_sk#1, ss_sold_date_sk#2]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#3]

(5) Scan parquet default.date_dim
Output [3]: [d_date_sk#4, d_date#5, d_month_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(6) ColumnarToRow
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#6]

(7) Filter
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1200)) AND (d_month_seq#6 <= 1211)) AND isnotnull(d_date_sk#4))

(8) Project
Output [2]: [d_date_sk#4, d_date#5]
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#6]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#2]
Right keys [1]: [d_date_sk#4]
Join condition: None

(10) Project [codegen id : 2]
Output [2]: [ss_customer_sk#1, d_date#5]
Input [4]: [ss_customer_sk#1, ss_sold_date_sk#2, d_date_sk#4, d_date#5]

(11) BroadcastExchange
Input [2]: [ss_customer_sk#1, d_date#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#7]

(12) Scan parquet default.customer
Output [3]: [c_customer_sk#8, c_first_name#9, c_last_name#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(13) ColumnarToRow
Input [3]: [c_customer_sk#8, c_first_name#9, c_last_name#10]

(14) Filter
Input [3]: [c_customer_sk#8, c_first_name#9, c_last_name#10]
Condition : isnotnull(c_customer_sk#8)

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#8]
Join condition: None

(16) Project [codegen id : 3]
Output [3]: [c_last_name#10, c_first_name#9, d_date#5]
Input [5]: [ss_customer_sk#1, d_date#5, c_customer_sk#8, c_first_name#9, c_last_name#10]

(17) HashAggregate [codegen id : 3]
Input [3]: [c_last_name#10, c_first_name#9, d_date#5]
Keys [3]: [c_last_name#10, c_first_name#9, d_date#5]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#10, c_first_name#9, d_date#5]

(18) Exchange
Input [3]: [c_last_name#10, c_first_name#9, d_date#5]
Arguments: hashpartitioning(c_last_name#10, c_first_name#9, d_date#5, 5), ENSURE_REQUIREMENTS, [id=#11]

(19) HashAggregate [codegen id : 4]
Input [3]: [c_last_name#10, c_first_name#9, d_date#5]
Keys [3]: [c_last_name#10, c_first_name#9, d_date#5]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#10, c_first_name#9, d_date#5]

(20) Exchange
Input [3]: [c_last_name#10, c_first_name#9, d_date#5]
Arguments: hashpartitioning(coalesce(c_last_name#10, ), isnull(c_last_name#10), coalesce(c_first_name#9, ), isnull(c_first_name#9), coalesce(d_date#5, 0), isnull(d_date#5), 5), ENSURE_REQUIREMENTS, [id=#12]

(21) Sort [codegen id : 5]
Input [3]: [c_last_name#10, c_first_name#9, d_date#5]
Arguments: [coalesce(c_last_name#10, ) ASC NULLS FIRST, isnull(c_last_name#10) ASC NULLS FIRST, coalesce(c_first_name#9, ) ASC NULLS FIRST, isnull(c_first_name#9) ASC NULLS FIRST, coalesce(d_date#5, 0) ASC NULLS FIRST, isnull(d_date#5) ASC NULLS FIRST], false, 0

(22) Scan parquet default.catalog_sales
Output [2]: [cs_bill_customer_sk#13, cs_sold_date_sk#14]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#14), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int>

(23) ColumnarToRow [codegen id : 6]
Input [2]: [cs_bill_customer_sk#13, cs_sold_date_sk#14]

(24) Filter [codegen id : 6]
Input [2]: [cs_bill_customer_sk#13, cs_sold_date_sk#14]
Condition : isnotnull(cs_bill_customer_sk#13)

(25) BroadcastExchange
Input [2]: [cs_bill_customer_sk#13, cs_sold_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#15]

(26) Scan parquet default.date_dim
Output [3]: [d_date_sk#16, d_date#17, d_month_seq#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(27) ColumnarToRow
Input [3]: [d_date_sk#16, d_date#17, d_month_seq#18]

(28) Filter
Input [3]: [d_date_sk#16, d_date#17, d_month_seq#18]
Condition : (((isnotnull(d_month_seq#18) AND (d_month_seq#18 >= 1200)) AND (d_month_seq#18 <= 1211)) AND isnotnull(d_date_sk#16))

(29) Project
Output [2]: [d_date_sk#16, d_date#17]
Input [3]: [d_date_sk#16, d_date#17, d_month_seq#18]

(30) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cs_sold_date_sk#14]
Right keys [1]: [d_date_sk#16]
Join condition: None

(31) Project [codegen id : 7]
Output [2]: [cs_bill_customer_sk#13, d_date#17]
Input [4]: [cs_bill_customer_sk#13, cs_sold_date_sk#14, d_date_sk#16, d_date#17]

(32) BroadcastExchange
Input [2]: [cs_bill_customer_sk#13, d_date#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#19]

(33) Scan parquet default.customer
Output [3]: [c_customer_sk#20, c_first_name#21, c_last_name#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(34) ColumnarToRow
Input [3]: [c_customer_sk#20, c_first_name#21, c_last_name#22]

(35) Filter
Input [3]: [c_customer_sk#20, c_first_name#21, c_last_name#22]
Condition : isnotnull(c_customer_sk#20)

(36) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_bill_customer_sk#13]
Right keys [1]: [c_customer_sk#20]
Join condition: None

(37) Project [codegen id : 8]
Output [3]: [c_last_name#22, c_first_name#21, d_date#17]
Input [5]: [cs_bill_customer_sk#13, d_date#17, c_customer_sk#20, c_first_name#21, c_last_name#22]

(38) HashAggregate [codegen id : 8]
Input [3]: [c_last_name#22, c_first_name#21, d_date#17]
Keys [3]: [c_last_name#22, c_first_name#21, d_date#17]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#22, c_first_name#21, d_date#17]

(39) Exchange
Input [3]: [c_last_name#22, c_first_name#21, d_date#17]
Arguments: hashpartitioning(c_last_name#22, c_first_name#21, d_date#17, 5), ENSURE_REQUIREMENTS, [id=#23]

(40) HashAggregate [codegen id : 9]
Input [3]: [c_last_name#22, c_first_name#21, d_date#17]
Keys [3]: [c_last_name#22, c_first_name#21, d_date#17]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#22, c_first_name#21, d_date#17]

(41) Exchange
Input [3]: [c_last_name#22, c_first_name#21, d_date#17]
Arguments: hashpartitioning(coalesce(c_last_name#22, ), isnull(c_last_name#22), coalesce(c_first_name#21, ), isnull(c_first_name#21), coalesce(d_date#17, 0), isnull(d_date#17), 5), ENSURE_REQUIREMENTS, [id=#24]

(42) Sort [codegen id : 10]
Input [3]: [c_last_name#22, c_first_name#21, d_date#17]
Arguments: [coalesce(c_last_name#22, ) ASC NULLS FIRST, isnull(c_last_name#22) ASC NULLS FIRST, coalesce(c_first_name#21, ) ASC NULLS FIRST, isnull(c_first_name#21) ASC NULLS FIRST, coalesce(d_date#17, 0) ASC NULLS FIRST, isnull(d_date#17) ASC NULLS FIRST], false, 0

(43) SortMergeJoin
Left keys [6]: [coalesce(c_last_name#10, ), isnull(c_last_name#10), coalesce(c_first_name#9, ), isnull(c_first_name#9), coalesce(d_date#5, 0), isnull(d_date#5)]
Right keys [6]: [coalesce(c_last_name#22, ), isnull(c_last_name#22), coalesce(c_first_name#21, ), isnull(c_first_name#21), coalesce(d_date#17, 0), isnull(d_date#17)]
Join condition: None

(44) HashAggregate [codegen id : 11]
Input [3]: [c_last_name#10, c_first_name#9, d_date#5]
Keys [3]: [c_last_name#10, c_first_name#9, d_date#5]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#10, c_first_name#9, d_date#5]

(45) Exchange
Input [3]: [c_last_name#10, c_first_name#9, d_date#5]
Arguments: hashpartitioning(c_last_name#10, c_first_name#9, d_date#5, 5), ENSURE_REQUIREMENTS, [id=#25]

(46) HashAggregate [codegen id : 12]
Input [3]: [c_last_name#10, c_first_name#9, d_date#5]
Keys [3]: [c_last_name#10, c_first_name#9, d_date#5]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#10, c_first_name#9, d_date#5]

(47) Exchange
Input [3]: [c_last_name#10, c_first_name#9, d_date#5]
Arguments: hashpartitioning(coalesce(c_last_name#10, ), isnull(c_last_name#10), coalesce(c_first_name#9, ), isnull(c_first_name#9), coalesce(d_date#5, 0), isnull(d_date#5), 5), ENSURE_REQUIREMENTS, [id=#26]

(48) Sort [codegen id : 13]
Input [3]: [c_last_name#10, c_first_name#9, d_date#5]
Arguments: [coalesce(c_last_name#10, ) ASC NULLS FIRST, isnull(c_last_name#10) ASC NULLS FIRST, coalesce(c_first_name#9, ) ASC NULLS FIRST, isnull(c_first_name#9) ASC NULLS FIRST, coalesce(d_date#5, 0) ASC NULLS FIRST, isnull(d_date#5) ASC NULLS FIRST], false, 0

(49) Scan parquet default.web_sales
Output [2]: [ws_bill_customer_sk#27, ws_sold_date_sk#28]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#28), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int>

(50) ColumnarToRow [codegen id : 14]
Input [2]: [ws_bill_customer_sk#27, ws_sold_date_sk#28]

(51) Filter [codegen id : 14]
Input [2]: [ws_bill_customer_sk#27, ws_sold_date_sk#28]
Condition : isnotnull(ws_bill_customer_sk#27)

(52) BroadcastExchange
Input [2]: [ws_bill_customer_sk#27, ws_sold_date_sk#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#29]

(53) Scan parquet default.date_dim
Output [3]: [d_date_sk#30, d_date#31, d_month_seq#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(54) ColumnarToRow
Input [3]: [d_date_sk#30, d_date#31, d_month_seq#32]

(55) Filter
Input [3]: [d_date_sk#30, d_date#31, d_month_seq#32]
Condition : (((isnotnull(d_month_seq#32) AND (d_month_seq#32 >= 1200)) AND (d_month_seq#32 <= 1211)) AND isnotnull(d_date_sk#30))

(56) Project
Output [2]: [d_date_sk#30, d_date#31]
Input [3]: [d_date_sk#30, d_date#31, d_month_seq#32]

(57) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [ws_sold_date_sk#28]
Right keys [1]: [d_date_sk#30]
Join condition: None

(58) Project [codegen id : 15]
Output [2]: [ws_bill_customer_sk#27, d_date#31]
Input [4]: [ws_bill_customer_sk#27, ws_sold_date_sk#28, d_date_sk#30, d_date#31]

(59) BroadcastExchange
Input [2]: [ws_bill_customer_sk#27, d_date#31]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#33]

(60) Scan parquet default.customer
Output [3]: [c_customer_sk#34, c_first_name#35, c_last_name#36]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(61) ColumnarToRow
Input [3]: [c_customer_sk#34, c_first_name#35, c_last_name#36]

(62) Filter
Input [3]: [c_customer_sk#34, c_first_name#35, c_last_name#36]
Condition : isnotnull(c_customer_sk#34)

(63) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [ws_bill_customer_sk#27]
Right keys [1]: [c_customer_sk#34]
Join condition: None

(64) Project [codegen id : 16]
Output [3]: [c_last_name#36, c_first_name#35, d_date#31]
Input [5]: [ws_bill_customer_sk#27, d_date#31, c_customer_sk#34, c_first_name#35, c_last_name#36]

(65) HashAggregate [codegen id : 16]
Input [3]: [c_last_name#36, c_first_name#35, d_date#31]
Keys [3]: [c_last_name#36, c_first_name#35, d_date#31]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#36, c_first_name#35, d_date#31]

(66) Exchange
Input [3]: [c_last_name#36, c_first_name#35, d_date#31]
Arguments: hashpartitioning(c_last_name#36, c_first_name#35, d_date#31, 5), ENSURE_REQUIREMENTS, [id=#37]

(67) HashAggregate [codegen id : 17]
Input [3]: [c_last_name#36, c_first_name#35, d_date#31]
Keys [3]: [c_last_name#36, c_first_name#35, d_date#31]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#36, c_first_name#35, d_date#31]

(68) Exchange
Input [3]: [c_last_name#36, c_first_name#35, d_date#31]
Arguments: hashpartitioning(coalesce(c_last_name#36, ), isnull(c_last_name#36), coalesce(c_first_name#35, ), isnull(c_first_name#35), coalesce(d_date#31, 0), isnull(d_date#31), 5), ENSURE_REQUIREMENTS, [id=#38]

(69) Sort [codegen id : 18]
Input [3]: [c_last_name#36, c_first_name#35, d_date#31]
Arguments: [coalesce(c_last_name#36, ) ASC NULLS FIRST, isnull(c_last_name#36) ASC NULLS FIRST, coalesce(c_first_name#35, ) ASC NULLS FIRST, isnull(c_first_name#35) ASC NULLS FIRST, coalesce(d_date#31, 0) ASC NULLS FIRST, isnull(d_date#31) ASC NULLS FIRST], false, 0

(70) SortMergeJoin
Left keys [6]: [coalesce(c_last_name#10, ), isnull(c_last_name#10), coalesce(c_first_name#9, ), isnull(c_first_name#9), coalesce(d_date#5, 0), isnull(d_date#5)]
Right keys [6]: [coalesce(c_last_name#36, ), isnull(c_last_name#36), coalesce(c_first_name#35, ), isnull(c_first_name#35), coalesce(d_date#31, 0), isnull(d_date#31)]
Join condition: None

(71) HashAggregate [codegen id : 19]
Input [3]: [c_last_name#10, c_first_name#9, d_date#5]
Keys [3]: [c_last_name#10, c_first_name#9, d_date#5]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#10, c_first_name#9, d_date#5]

(72) Exchange
Input [3]: [c_last_name#10, c_first_name#9, d_date#5]
Arguments: hashpartitioning(c_last_name#10, c_first_name#9, d_date#5, 5), ENSURE_REQUIREMENTS, [id=#39]

(73) HashAggregate [codegen id : 20]
Input [3]: [c_last_name#10, c_first_name#9, d_date#5]
Keys [3]: [c_last_name#10, c_first_name#9, d_date#5]
Functions: []
Aggregate Attributes: []
Results: []

(74) HashAggregate [codegen id : 20]
Input: []
Keys: []
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#40]
Results [1]: [count#41]

(75) Exchange
Input [1]: [count#41]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#42]

(76) HashAggregate [codegen id : 21]
Input [1]: [count#41]
Keys: []
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#43]
Results [1]: [count(1)#43 AS count(1)#44]

