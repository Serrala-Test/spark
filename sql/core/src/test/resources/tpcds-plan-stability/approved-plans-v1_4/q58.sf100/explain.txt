== Physical Plan ==
TakeOrderedAndProject (63)
+- * Project (62)
   +- * SortMergeJoin Inner (61)
      :- * Project (45)
      :  +- * SortMergeJoin Inner (44)
      :     :- * Sort (28)
      :     :  +- * Project (27)
      :     :     +- * Filter (26)
      :     :        +- * HashAggregate (25)
      :     :           +- Exchange (24)
      :     :              +- * HashAggregate (23)
      :     :                 +- * Project (22)
      :     :                    +- * BroadcastHashJoin Inner BuildRight (21)
      :     :                       :- * Project (16)
      :     :                       :  +- * BroadcastHashJoin Inner BuildRight (15)
      :     :                       :     :- * Filter (3)
      :     :                       :     :  +- * ColumnarToRow (2)
      :     :                       :     :     +- Scan parquet default.store_sales (1)
      :     :                       :     +- BroadcastExchange (14)
      :     :                       :        +- * Project (13)
      :     :                       :           +- * BroadcastHashJoin LeftSemi BuildRight (12)
      :     :                       :              :- * Filter (6)
      :     :                       :              :  +- * ColumnarToRow (5)
      :     :                       :              :     +- Scan parquet default.date_dim (4)
      :     :                       :              +- BroadcastExchange (11)
      :     :                       :                 +- * Project (10)
      :     :                       :                    +- * Filter (9)
      :     :                       :                       +- * ColumnarToRow (8)
      :     :                       :                          +- Scan parquet default.date_dim (7)
      :     :                       +- BroadcastExchange (20)
      :     :                          +- * Filter (19)
      :     :                             +- * ColumnarToRow (18)
      :     :                                +- Scan parquet default.item (17)
      :     +- * Sort (43)
      :        +- * Project (42)
      :           +- * Filter (41)
      :              +- * HashAggregate (40)
      :                 +- Exchange (39)
      :                    +- * HashAggregate (38)
      :                       +- * Project (37)
      :                          +- * BroadcastHashJoin Inner BuildRight (36)
      :                             :- * Project (34)
      :                             :  +- * BroadcastHashJoin Inner BuildRight (33)
      :                             :     :- * Filter (31)
      :                             :     :  +- * ColumnarToRow (30)
      :                             :     :     +- Scan parquet default.catalog_sales (29)
      :                             :     +- ReusedExchange (32)
      :                             +- ReusedExchange (35)
      +- * Sort (60)
         +- * Project (59)
            +- * Filter (58)
               +- * HashAggregate (57)
                  +- Exchange (56)
                     +- * HashAggregate (55)
                        +- * Project (54)
                           +- * BroadcastHashJoin Inner BuildRight (53)
                              :- * Project (51)
                              :  +- * BroadcastHashJoin Inner BuildRight (50)
                              :     :- * Filter (48)
                              :     :  +- * ColumnarToRow (47)
                              :     :     +- Scan parquet default.web_sales (46)
                              :     +- ReusedExchange (49)
                              +- ReusedExchange (52)


(1) Scan parquet default.store_sales
Output [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]

(3) Filter [codegen id : 4]
Input [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#4, d_date#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(5) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#4, d_date#5]

(6) Filter [codegen id : 2]
Input [2]: [d_date_sk#4, d_date#5]
Condition : isnotnull(d_date_sk#4)

(7) Scan parquet default.date_dim
Output [2]: [d_date#6, d_week_seq#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(8) ColumnarToRow [codegen id : 1]
Input [2]: [d_date#6, d_week_seq#7]

(9) Filter [codegen id : 1]
Input [2]: [d_date#6, d_week_seq#7]
Condition : (isnotnull(d_week_seq#7) AND (d_week_seq#7 = Subquery scalar-subquery#8, [id=#9]))

(10) Project [codegen id : 1]
Output [1]: [d_date#6]
Input [2]: [d_date#6, d_week_seq#7]

(11) BroadcastExchange
Input [1]: [d_date#6]
Arguments: HashedRelationBroadcastMode(List(input[0, date, true]),false), [id=#10]

(12) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [d_date#5]
Right keys [1]: [d_date#6]
Join condition: None

(13) Project [codegen id : 2]
Output [1]: [d_date_sk#4]
Input [2]: [d_date_sk#4, d_date#5]

(14) BroadcastExchange
Input [1]: [d_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#11]

(15) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#4]
Join condition: None

(16) Project [codegen id : 4]
Output [2]: [ss_item_sk#1, ss_ext_sales_price#2]
Input [4]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3, d_date_sk#4]

(17) Scan parquet default.item
Output [2]: [i_item_sk#12, i_item_id#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_item_id)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(18) ColumnarToRow [codegen id : 3]
Input [2]: [i_item_sk#12, i_item_id#13]

(19) Filter [codegen id : 3]
Input [2]: [i_item_sk#12, i_item_id#13]
Condition : (isnotnull(i_item_sk#12) AND isnotnull(i_item_id#13))

(20) BroadcastExchange
Input [2]: [i_item_sk#12, i_item_id#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14]

(21) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#12]
Join condition: None

(22) Project [codegen id : 4]
Output [2]: [ss_ext_sales_price#2, i_item_id#13]
Input [4]: [ss_item_sk#1, ss_ext_sales_price#2, i_item_sk#12, i_item_id#13]

(23) HashAggregate [codegen id : 4]
Input [2]: [ss_ext_sales_price#2, i_item_id#13]
Keys [1]: [i_item_id#13]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum#15]
Results [2]: [i_item_id#13, sum#16]

(24) Exchange
Input [2]: [i_item_id#13, sum#16]
Arguments: hashpartitioning(i_item_id#13, 5), ENSURE_REQUIREMENTS, [id=#17]

(25) HashAggregate [codegen id : 5]
Input [2]: [i_item_id#13, sum#16]
Keys [1]: [i_item_id#13]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#2))#18]
Results [2]: [i_item_id#13 AS item_id#19, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#18,17,2) AS ss_item_rev#20]

(26) Filter [codegen id : 5]
Input [2]: [item_id#19, ss_item_rev#20]
Condition : isnotnull(ss_item_rev#20)

(27) Project [codegen id : 5]
Output [6]: [item_id#19, ss_item_rev#20, cast(ss_item_rev#20 as decimal(19,3)) AS CAST(ss_items.ss_item_rev AS DECIMAL(19,3))#21, cast(ss_item_rev#20 as decimal(20,3)) AS CAST(ss_items.ss_item_rev AS DECIMAL(20,3))#22, CheckOverflow((0.90 * promote_precision(ss_item_rev#20)), DecimalType(19,3), true) AS (0.90BD * ss_items.ss_item_rev)#23, CheckOverflow((1.10 * promote_precision(ss_item_rev#20)), DecimalType(20,3), true) AS (1.10BD * ss_items.ss_item_rev)#24]
Input [2]: [item_id#19, ss_item_rev#20]

(28) Sort [codegen id : 5]
Input [6]: [item_id#19, ss_item_rev#20, CAST(ss_items.ss_item_rev AS DECIMAL(19,3))#21, CAST(ss_items.ss_item_rev AS DECIMAL(20,3))#22, (0.90BD * ss_items.ss_item_rev)#23, (1.10BD * ss_items.ss_item_rev)#24]
Arguments: [item_id#19 ASC NULLS FIRST], false, 0

(29) Scan parquet default.catalog_sales
Output [3]: [cs_item_sk#25, cs_ext_sales_price#26, cs_sold_date_sk#27]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#27), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(30) ColumnarToRow [codegen id : 9]
Input [3]: [cs_item_sk#25, cs_ext_sales_price#26, cs_sold_date_sk#27]

(31) Filter [codegen id : 9]
Input [3]: [cs_item_sk#25, cs_ext_sales_price#26, cs_sold_date_sk#27]
Condition : isnotnull(cs_item_sk#25)

(32) ReusedExchange [Reuses operator id: 14]
Output [1]: [d_date_sk#28]

(33) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_sold_date_sk#27]
Right keys [1]: [d_date_sk#28]
Join condition: None

(34) Project [codegen id : 9]
Output [2]: [cs_item_sk#25, cs_ext_sales_price#26]
Input [4]: [cs_item_sk#25, cs_ext_sales_price#26, cs_sold_date_sk#27, d_date_sk#28]

(35) ReusedExchange [Reuses operator id: 20]
Output [2]: [i_item_sk#29, i_item_id#30]

(36) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#25]
Right keys [1]: [i_item_sk#29]
Join condition: None

(37) Project [codegen id : 9]
Output [2]: [cs_ext_sales_price#26, i_item_id#30]
Input [4]: [cs_item_sk#25, cs_ext_sales_price#26, i_item_sk#29, i_item_id#30]

(38) HashAggregate [codegen id : 9]
Input [2]: [cs_ext_sales_price#26, i_item_id#30]
Keys [1]: [i_item_id#30]
Functions [1]: [partial_sum(UnscaledValue(cs_ext_sales_price#26))]
Aggregate Attributes [1]: [sum#31]
Results [2]: [i_item_id#30, sum#32]

(39) Exchange
Input [2]: [i_item_id#30, sum#32]
Arguments: hashpartitioning(i_item_id#30, 5), ENSURE_REQUIREMENTS, [id=#33]

(40) HashAggregate [codegen id : 10]
Input [2]: [i_item_id#30, sum#32]
Keys [1]: [i_item_id#30]
Functions [1]: [sum(UnscaledValue(cs_ext_sales_price#26))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_ext_sales_price#26))#34]
Results [2]: [i_item_id#30 AS item_id#35, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#26))#34,17,2) AS cs_item_rev#36]

(41) Filter [codegen id : 10]
Input [2]: [item_id#35, cs_item_rev#36]
Condition : isnotnull(cs_item_rev#36)

(42) Project [codegen id : 10]
Output [6]: [item_id#35, cs_item_rev#36, CheckOverflow((0.90 * promote_precision(cs_item_rev#36)), DecimalType(19,3), true) AS (0.90BD * cs_items.cs_item_rev)#37, CheckOverflow((1.10 * promote_precision(cs_item_rev#36)), DecimalType(20,3), true) AS (1.10BD * cs_items.cs_item_rev)#38, cast(cs_item_rev#36 as decimal(19,3)) AS CAST(cs_items.cs_item_rev AS DECIMAL(19,3))#39, cast(cs_item_rev#36 as decimal(20,3)) AS CAST(cs_items.cs_item_rev AS DECIMAL(20,3))#40]
Input [2]: [item_id#35, cs_item_rev#36]

(43) Sort [codegen id : 10]
Input [6]: [item_id#35, cs_item_rev#36, (0.90BD * cs_items.cs_item_rev)#37, (1.10BD * cs_items.cs_item_rev)#38, CAST(cs_items.cs_item_rev AS DECIMAL(19,3))#39, CAST(cs_items.cs_item_rev AS DECIMAL(20,3))#40]
Arguments: [item_id#35 ASC NULLS FIRST], false, 0

(44) SortMergeJoin [codegen id : 11]
Left keys [1]: [item_id#19]
Right keys [1]: [item_id#35]
Join condition: ((((CAST(ss_items.ss_item_rev AS DECIMAL(19,3))#21 >= (0.90BD * cs_items.cs_item_rev)#37) AND (CAST(ss_items.ss_item_rev AS DECIMAL(20,3))#22 <= (1.10BD * cs_items.cs_item_rev)#38)) AND (CAST(cs_items.cs_item_rev AS DECIMAL(19,3))#39 >= (0.90BD * ss_items.ss_item_rev)#23)) AND (CAST(cs_items.cs_item_rev AS DECIMAL(20,3))#40 <= (1.10BD * ss_items.ss_item_rev)#24))

(45) Project [codegen id : 11]
Output [11]: [item_id#19, ss_item_rev#20, cs_item_rev#36, cast(ss_item_rev#20 as decimal(19,3)) AS CAST(ss_items.ss_item_rev AS DECIMAL(19,3))#41, cast(ss_item_rev#20 as decimal(20,3)) AS CAST(ss_items.ss_item_rev AS DECIMAL(20,3))#42, cast(cs_item_rev#36 as decimal(19,3)) AS CAST(cs_items.cs_item_rev AS DECIMAL(19,3))#43, cast(cs_item_rev#36 as decimal(20,3)) AS CAST(cs_items.cs_item_rev AS DECIMAL(20,3))#44, CheckOverflow((0.90 * promote_precision(ss_item_rev#20)), DecimalType(19,3), true) AS (0.90BD * ss_items.ss_item_rev)#45, CheckOverflow((1.10 * promote_precision(ss_item_rev#20)), DecimalType(20,3), true) AS (1.10BD * ss_items.ss_item_rev)#46, CheckOverflow((0.90 * promote_precision(cs_item_rev#36)), DecimalType(19,3), true) AS (0.90BD * cs_items.cs_item_rev)#47, CheckOverflow((1.10 * promote_precision(cs_item_rev#36)), DecimalType(20,3), true) AS (1.10BD * cs_items.cs_item_rev)#48]
Input [12]: [item_id#19, ss_item_rev#20, CAST(ss_items.ss_item_rev AS DECIMAL(19,3))#21, CAST(ss_items.ss_item_rev AS DECIMAL(20,3))#22, (0.90BD * ss_items.ss_item_rev)#23, (1.10BD * ss_items.ss_item_rev)#24, item_id#35, cs_item_rev#36, (0.90BD * cs_items.cs_item_rev)#37, (1.10BD * cs_items.cs_item_rev)#38, CAST(cs_items.cs_item_rev AS DECIMAL(19,3))#39, CAST(cs_items.cs_item_rev AS DECIMAL(20,3))#40]

(46) Scan parquet default.web_sales
Output [3]: [ws_item_sk#49, ws_ext_sales_price#50, ws_sold_date_sk#51]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#51), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>

(47) ColumnarToRow [codegen id : 15]
Input [3]: [ws_item_sk#49, ws_ext_sales_price#50, ws_sold_date_sk#51]

(48) Filter [codegen id : 15]
Input [3]: [ws_item_sk#49, ws_ext_sales_price#50, ws_sold_date_sk#51]
Condition : isnotnull(ws_item_sk#49)

(49) ReusedExchange [Reuses operator id: 14]
Output [1]: [d_date_sk#52]

(50) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [ws_sold_date_sk#51]
Right keys [1]: [d_date_sk#52]
Join condition: None

(51) Project [codegen id : 15]
Output [2]: [ws_item_sk#49, ws_ext_sales_price#50]
Input [4]: [ws_item_sk#49, ws_ext_sales_price#50, ws_sold_date_sk#51, d_date_sk#52]

(52) ReusedExchange [Reuses operator id: 20]
Output [2]: [i_item_sk#53, i_item_id#54]

(53) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [ws_item_sk#49]
Right keys [1]: [i_item_sk#53]
Join condition: None

(54) Project [codegen id : 15]
Output [2]: [ws_ext_sales_price#50, i_item_id#54]
Input [4]: [ws_item_sk#49, ws_ext_sales_price#50, i_item_sk#53, i_item_id#54]

(55) HashAggregate [codegen id : 15]
Input [2]: [ws_ext_sales_price#50, i_item_id#54]
Keys [1]: [i_item_id#54]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#50))]
Aggregate Attributes [1]: [sum#55]
Results [2]: [i_item_id#54, sum#56]

(56) Exchange
Input [2]: [i_item_id#54, sum#56]
Arguments: hashpartitioning(i_item_id#54, 5), ENSURE_REQUIREMENTS, [id=#57]

(57) HashAggregate [codegen id : 16]
Input [2]: [i_item_id#54, sum#56]
Keys [1]: [i_item_id#54]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#50))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#50))#58]
Results [2]: [i_item_id#54 AS item_id#59, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#50))#58,17,2) AS ws_item_rev#60]

(58) Filter [codegen id : 16]
Input [2]: [item_id#59, ws_item_rev#60]
Condition : isnotnull(ws_item_rev#60)

(59) Project [codegen id : 16]
Output [6]: [item_id#59, ws_item_rev#60, CheckOverflow((0.90 * promote_precision(ws_item_rev#60)), DecimalType(19,3), true) AS (0.90BD * ws_items.ws_item_rev)#61, CheckOverflow((1.10 * promote_precision(ws_item_rev#60)), DecimalType(20,3), true) AS (1.10BD * ws_items.ws_item_rev)#62, cast(ws_item_rev#60 as decimal(19,3)) AS CAST(ws_items.ws_item_rev AS DECIMAL(19,3))#63, cast(ws_item_rev#60 as decimal(20,3)) AS CAST(ws_items.ws_item_rev AS DECIMAL(20,3))#64]
Input [2]: [item_id#59, ws_item_rev#60]

(60) Sort [codegen id : 16]
Input [6]: [item_id#59, ws_item_rev#60, (0.90BD * ws_items.ws_item_rev)#61, (1.10BD * ws_items.ws_item_rev)#62, CAST(ws_items.ws_item_rev AS DECIMAL(19,3))#63, CAST(ws_items.ws_item_rev AS DECIMAL(20,3))#64]
Arguments: [item_id#59 ASC NULLS FIRST], false, 0

(61) SortMergeJoin [codegen id : 17]
Left keys [1]: [item_id#19]
Right keys [1]: [item_id#59]
Join condition: ((((((((CAST(ss_items.ss_item_rev AS DECIMAL(19,3))#41 >= (0.90BD * ws_items.ws_item_rev)#61) AND (CAST(ss_items.ss_item_rev AS DECIMAL(20,3))#42 <= (1.10BD * ws_items.ws_item_rev)#62)) AND (CAST(cs_items.cs_item_rev AS DECIMAL(19,3))#43 >= (0.90BD * ws_items.ws_item_rev)#61)) AND (CAST(cs_items.cs_item_rev AS DECIMAL(20,3))#44 <= (1.10BD * ws_items.ws_item_rev)#62)) AND (CAST(ws_items.ws_item_rev AS DECIMAL(19,3))#63 >= (0.90BD * ss_items.ss_item_rev)#45)) AND (CAST(ws_items.ws_item_rev AS DECIMAL(20,3))#64 <= (1.10BD * ss_items.ss_item_rev)#46)) AND (CAST(ws_items.ws_item_rev AS DECIMAL(19,3))#63 >= (0.90BD * cs_items.cs_item_rev)#47)) AND (CAST(ws_items.ws_item_rev AS DECIMAL(20,3))#64 <= (1.10BD * cs_items.cs_item_rev)#48))

(62) Project [codegen id : 17]
Output [8]: [item_id#19, ss_item_rev#20, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ss_item_rev#20 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#20 as decimal(18,2))) + promote_precision(cast(cs_item_rev#36 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#60 as decimal(19,2)))), DecimalType(19,2), true))), DecimalType(38,21), true)) / 3.000000000000000000000), DecimalType(38,21), true)) * 100.000000000000000000000), DecimalType(38,17), true) AS ss_dev#65, cs_item_rev#36, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(cs_item_rev#36 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#20 as decimal(18,2))) + promote_precision(cast(cs_item_rev#36 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#60 as decimal(19,2)))), DecimalType(19,2), true))), DecimalType(38,21), true)) / 3.000000000000000000000), DecimalType(38,21), true)) * 100.000000000000000000000), DecimalType(38,17), true) AS cs_dev#66, ws_item_rev#60, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ws_item_rev#60 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#20 as decimal(18,2))) + promote_precision(cast(cs_item_rev#36 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#60 as decimal(19,2)))), DecimalType(19,2), true))), DecimalType(38,21), true)) / 3.000000000000000000000), DecimalType(38,21), true)) * 100.000000000000000000000), DecimalType(38,17), true) AS ws_dev#67, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#20 as decimal(18,2))) + promote_precision(cast(cs_item_rev#36 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#60 as decimal(19,2)))), DecimalType(19,2), true)) / 3.00), DecimalType(23,6), true) AS average#68]
Input [17]: [item_id#19, ss_item_rev#20, cs_item_rev#36, CAST(ss_items.ss_item_rev AS DECIMAL(19,3))#41, CAST(ss_items.ss_item_rev AS DECIMAL(20,3))#42, CAST(cs_items.cs_item_rev AS DECIMAL(19,3))#43, CAST(cs_items.cs_item_rev AS DECIMAL(20,3))#44, (0.90BD * ss_items.ss_item_rev)#45, (1.10BD * ss_items.ss_item_rev)#46, (0.90BD * cs_items.cs_item_rev)#47, (1.10BD * cs_items.cs_item_rev)#48, item_id#59, ws_item_rev#60, (0.90BD * ws_items.ws_item_rev)#61, (1.10BD * ws_items.ws_item_rev)#62, CAST(ws_items.ws_item_rev AS DECIMAL(19,3))#63, CAST(ws_items.ws_item_rev AS DECIMAL(20,3))#64]

(63) TakeOrderedAndProject
Input [8]: [item_id#19, ss_item_rev#20, ss_dev#65, cs_item_rev#36, cs_dev#66, ws_item_rev#60, ws_dev#67, average#68]
Arguments: 100, [item_id#19 ASC NULLS FIRST, ss_item_rev#20 ASC NULLS FIRST], [item_id#19, ss_item_rev#20, ss_dev#65, cs_item_rev#36, cs_dev#66, ws_item_rev#60, ws_dev#67, average#68]

===== Subqueries =====

Subquery:1 Hosting operator id = 9 Hosting Expression = Subquery scalar-subquery#8, [id=#9]
* Project (67)
+- * Filter (66)
   +- * ColumnarToRow (65)
      +- Scan parquet default.date_dim (64)


(64) Scan parquet default.date_dim
Output [2]: [d_date#69, d_week_seq#70]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-01-03)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(65) ColumnarToRow [codegen id : 1]
Input [2]: [d_date#69, d_week_seq#70]

(66) Filter [codegen id : 1]
Input [2]: [d_date#69, d_week_seq#70]
Condition : (isnotnull(d_date#69) AND (d_date#69 = 2000-01-03))

(67) Project [codegen id : 1]
Output [1]: [d_week_seq#70]
Input [2]: [d_date#69, d_week_seq#70]


