== Physical Plan ==
TakeOrderedAndProject (45)
+- * Project (44)
   +- * BroadcastHashJoin Inner BuildRight (43)
      :- * Project (29)
      :  +- * BroadcastHashJoin Inner BuildRight (28)
      :     :- * Filter (14)
      :     :  +- * HashAggregate (13)
      :     :     +- Exchange (12)
      :     :        +- * HashAggregate (11)
      :     :           +- * Project (10)
      :     :              +- * BroadcastHashJoin Inner BuildRight (9)
      :     :                 :- * Project (5)
      :     :                 :  +- * BroadcastHashJoin Inner BuildRight (4)
      :     :                 :     :- * ColumnarToRow (2)
      :     :                 :     :  +- Scan parquet default.store_sales (1)
      :     :                 :     +- ReusedExchange (3)
      :     :                 +- BroadcastExchange (8)
      :     :                    +- * ColumnarToRow (7)
      :     :                       +- Scan parquet default.item (6)
      :     +- BroadcastExchange (27)
      :        +- * Filter (26)
      :           +- * HashAggregate (25)
      :              +- Exchange (24)
      :                 +- * HashAggregate (23)
      :                    +- * Project (22)
      :                       +- * BroadcastHashJoin Inner BuildRight (21)
      :                          :- * Project (19)
      :                          :  +- * BroadcastHashJoin Inner BuildRight (18)
      :                          :     :- * ColumnarToRow (16)
      :                          :     :  +- Scan parquet default.catalog_sales (15)
      :                          :     +- ReusedExchange (17)
      :                          +- ReusedExchange (20)
      +- BroadcastExchange (42)
         +- * Filter (41)
            +- * HashAggregate (40)
               +- Exchange (39)
                  +- * HashAggregate (38)
                     +- * Project (37)
                        +- * BroadcastHashJoin Inner BuildRight (36)
                           :- * Project (34)
                           :  +- * BroadcastHashJoin Inner BuildRight (33)
                           :     :- * ColumnarToRow (31)
                           :     :  +- Scan parquet default.web_sales (30)
                           :     +- ReusedExchange (32)
                           +- ReusedExchange (35)


(1) Scan parquet default.store_sales
Output [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
ReadSchema: struct<ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]

(3) ReusedExchange [Reuses operator id: 55]
Output [1]: [d_date_sk#5]

(4) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join condition: None

(5) Project [codegen id : 4]
Output [2]: [ss_item_sk#1, ss_ext_sales_price#2]
Input [4]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3, d_date_sk#5]

(6) Scan parquet default.item
Output [2]: [i_item_sk#6, i_item_id#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(7) ColumnarToRow [codegen id : 3]
Input [2]: [i_item_sk#6, i_item_id#7]

(8) BroadcastExchange
Input [2]: [i_item_sk#6, i_item_id#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#8]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join condition: None

(10) Project [codegen id : 4]
Output [2]: [ss_ext_sales_price#2, i_item_id#7]
Input [4]: [ss_item_sk#1, ss_ext_sales_price#2, i_item_sk#6, i_item_id#7]

(11) HashAggregate [codegen id : 4]
Input [2]: [ss_ext_sales_price#2, i_item_id#7]
Keys [1]: [i_item_id#7]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum#9]
Results [2]: [i_item_id#7, sum#10]

(12) Exchange
Input [2]: [i_item_id#7, sum#10]
Arguments: hashpartitioning(i_item_id#7, 5), ENSURE_REQUIREMENTS, [id=#11]

(13) HashAggregate [codegen id : 15]
Input [2]: [i_item_id#7, sum#10]
Keys [1]: [i_item_id#7]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#2))#12]
Results [2]: [i_item_id#7 AS item_id#13, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#12,17,2) AS ss_item_rev#14]

(14) Filter [codegen id : 15]
Input [2]: [item_id#13, ss_item_rev#14]
Condition : isnotnull(ss_item_rev#14)

(15) Scan parquet default.catalog_sales
Output [3]: [cs_item_sk#15, cs_ext_sales_price#16, cs_sold_date_sk#17]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#17), dynamicpruningexpression(cs_sold_date_sk#17 IN dynamicpruning#4)]
ReadSchema: struct<cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(16) ColumnarToRow [codegen id : 8]
Input [3]: [cs_item_sk#15, cs_ext_sales_price#16, cs_sold_date_sk#17]

(17) ReusedExchange [Reuses operator id: 55]
Output [1]: [d_date_sk#18]

(18) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#17]
Right keys [1]: [d_date_sk#18]
Join condition: None

(19) Project [codegen id : 8]
Output [2]: [cs_item_sk#15, cs_ext_sales_price#16]
Input [4]: [cs_item_sk#15, cs_ext_sales_price#16, cs_sold_date_sk#17, d_date_sk#18]

(20) ReusedExchange [Reuses operator id: 8]
Output [2]: [i_item_sk#19, i_item_id#20]

(21) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_item_sk#15]
Right keys [1]: [i_item_sk#19]
Join condition: None

(22) Project [codegen id : 8]
Output [2]: [cs_ext_sales_price#16, i_item_id#20]
Input [4]: [cs_item_sk#15, cs_ext_sales_price#16, i_item_sk#19, i_item_id#20]

(23) HashAggregate [codegen id : 8]
Input [2]: [cs_ext_sales_price#16, i_item_id#20]
Keys [1]: [i_item_id#20]
Functions [1]: [partial_sum(UnscaledValue(cs_ext_sales_price#16))]
Aggregate Attributes [1]: [sum#21]
Results [2]: [i_item_id#20, sum#22]

(24) Exchange
Input [2]: [i_item_id#20, sum#22]
Arguments: hashpartitioning(i_item_id#20, 5), ENSURE_REQUIREMENTS, [id=#23]

(25) HashAggregate [codegen id : 9]
Input [2]: [i_item_id#20, sum#22]
Keys [1]: [i_item_id#20]
Functions [1]: [sum(UnscaledValue(cs_ext_sales_price#16))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_ext_sales_price#16))#24]
Results [2]: [i_item_id#20 AS item_id#25, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#16))#24,17,2) AS cs_item_rev#26]

(26) Filter [codegen id : 9]
Input [2]: [item_id#25, cs_item_rev#26]
Condition : isnotnull(cs_item_rev#26)

(27) BroadcastExchange
Input [2]: [item_id#25, cs_item_rev#26]
Arguments: HashedRelationBroadcastMode(List(input[0, string, false]),false), [id=#27]

(28) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [item_id#13]
Right keys [1]: [item_id#25]
Join condition: ((((cast(ss_item_rev#14 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(cs_item_rev#26)), DecimalType(19,3), true)) AND (cast(ss_item_rev#14 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(cs_item_rev#26)), DecimalType(20,3), true))) AND (cast(cs_item_rev#26 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ss_item_rev#14)), DecimalType(19,3), true))) AND (cast(cs_item_rev#26 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ss_item_rev#14)), DecimalType(20,3), true)))

(29) Project [codegen id : 15]
Output [3]: [item_id#13, ss_item_rev#14, cs_item_rev#26]
Input [4]: [item_id#13, ss_item_rev#14, item_id#25, cs_item_rev#26]

(30) Scan parquet default.web_sales
Output [3]: [ws_item_sk#28, ws_ext_sales_price#29, ws_sold_date_sk#30]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#30), dynamicpruningexpression(ws_sold_date_sk#30 IN dynamicpruning#4)]
ReadSchema: struct<ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>

(31) ColumnarToRow [codegen id : 13]
Input [3]: [ws_item_sk#28, ws_ext_sales_price#29, ws_sold_date_sk#30]

(32) ReusedExchange [Reuses operator id: 55]
Output [1]: [d_date_sk#31]

(33) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ws_sold_date_sk#30]
Right keys [1]: [d_date_sk#31]
Join condition: None

(34) Project [codegen id : 13]
Output [2]: [ws_item_sk#28, ws_ext_sales_price#29]
Input [4]: [ws_item_sk#28, ws_ext_sales_price#29, ws_sold_date_sk#30, d_date_sk#31]

(35) ReusedExchange [Reuses operator id: 8]
Output [2]: [i_item_sk#32, i_item_id#33]

(36) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ws_item_sk#28]
Right keys [1]: [i_item_sk#32]
Join condition: None

(37) Project [codegen id : 13]
Output [2]: [ws_ext_sales_price#29, i_item_id#33]
Input [4]: [ws_item_sk#28, ws_ext_sales_price#29, i_item_sk#32, i_item_id#33]

(38) HashAggregate [codegen id : 13]
Input [2]: [ws_ext_sales_price#29, i_item_id#33]
Keys [1]: [i_item_id#33]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#29))]
Aggregate Attributes [1]: [sum#34]
Results [2]: [i_item_id#33, sum#35]

(39) Exchange
Input [2]: [i_item_id#33, sum#35]
Arguments: hashpartitioning(i_item_id#33, 5), ENSURE_REQUIREMENTS, [id=#36]

(40) HashAggregate [codegen id : 14]
Input [2]: [i_item_id#33, sum#35]
Keys [1]: [i_item_id#33]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#29))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#29))#37]
Results [2]: [i_item_id#33 AS item_id#38, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#29))#37,17,2) AS ws_item_rev#39]

(41) Filter [codegen id : 14]
Input [2]: [item_id#38, ws_item_rev#39]
Condition : isnotnull(ws_item_rev#39)

(42) BroadcastExchange
Input [2]: [item_id#38, ws_item_rev#39]
Arguments: HashedRelationBroadcastMode(List(input[0, string, false]),false), [id=#40]

(43) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [item_id#13]
Right keys [1]: [item_id#38]
Join condition: ((((((((cast(ss_item_rev#14 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ws_item_rev#39)), DecimalType(19,3), true)) AND (cast(ss_item_rev#14 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ws_item_rev#39)), DecimalType(20,3), true))) AND (cast(cs_item_rev#26 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ws_item_rev#39)), DecimalType(19,3), true))) AND (cast(cs_item_rev#26 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ws_item_rev#39)), DecimalType(20,3), true))) AND (cast(ws_item_rev#39 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ss_item_rev#14)), DecimalType(19,3), true))) AND (cast(ws_item_rev#39 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ss_item_rev#14)), DecimalType(20,3), true))) AND (cast(ws_item_rev#39 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(cs_item_rev#26)), DecimalType(19,3), true))) AND (cast(ws_item_rev#39 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(cs_item_rev#26)), DecimalType(20,3), true)))

(44) Project [codegen id : 15]
Output [8]: [item_id#13, ss_item_rev#14, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ss_item_rev#14 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#14 as decimal(18,2))) + promote_precision(cast(cs_item_rev#26 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#39 as decimal(19,2)))), DecimalType(19,2), true))), DecimalType(38,21), true)) / 3.000000000000000000000), DecimalType(38,21), true)) * 100.000000000000000000000), DecimalType(38,17), true) AS ss_dev#41, cs_item_rev#26, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(cs_item_rev#26 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#14 as decimal(18,2))) + promote_precision(cast(cs_item_rev#26 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#39 as decimal(19,2)))), DecimalType(19,2), true))), DecimalType(38,21), true)) / 3.000000000000000000000), DecimalType(38,21), true)) * 100.000000000000000000000), DecimalType(38,17), true) AS cs_dev#42, ws_item_rev#39, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ws_item_rev#39 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#14 as decimal(18,2))) + promote_precision(cast(cs_item_rev#26 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#39 as decimal(19,2)))), DecimalType(19,2), true))), DecimalType(38,21), true)) / 3.000000000000000000000), DecimalType(38,21), true)) * 100.000000000000000000000), DecimalType(38,17), true) AS ws_dev#43, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#14 as decimal(18,2))) + promote_precision(cast(cs_item_rev#26 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#39 as decimal(19,2)))), DecimalType(19,2), true)) / 3.00), DecimalType(23,6), true) AS average#44]
Input [5]: [item_id#13, ss_item_rev#14, cs_item_rev#26, item_id#38, ws_item_rev#39]

(45) TakeOrderedAndProject
Input [8]: [item_id#13, ss_item_rev#14, ss_dev#41, cs_item_rev#26, cs_dev#42, ws_item_rev#39, ws_dev#43, average#44]
Arguments: 100, [item_id#13 ASC NULLS FIRST, ss_item_rev#14 ASC NULLS FIRST], [item_id#13, ss_item_rev#14, ss_dev#41, cs_item_rev#26, cs_dev#42, ws_item_rev#39, ws_dev#43, average#44]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (55)
+- * Project (54)
   +- * BroadcastHashJoin LeftSemi BuildRight (53)
      :- * ColumnarToRow (47)
      :  +- Scan parquet default.date_dim (46)
      +- BroadcastExchange (52)
         +- * Project (51)
            +- * Filter (50)
               +- * ColumnarToRow (49)
                  +- Scan parquet default.date_dim (48)


(46) Scan parquet default.date_dim
Output [2]: [d_date_sk#5, d_date#45]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
ReadSchema: struct<d_date_sk:int,d_date:date>

(47) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#5, d_date#45]

(48) Scan parquet default.date_dim
Output [2]: [d_date#46, d_week_seq#47]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
ReadSchema: struct<d_date:date,d_week_seq:int>

(49) ColumnarToRow [codegen id : 1]
Input [2]: [d_date#46, d_week_seq#47]

(50) Filter [codegen id : 1]
Input [2]: [d_date#46, d_week_seq#47]
Condition : (d_week_seq#47 = Subquery scalar-subquery#48, [id=#49])

(51) Project [codegen id : 1]
Output [1]: [d_date#46]
Input [2]: [d_date#46, d_week_seq#47]

(52) BroadcastExchange
Input [1]: [d_date#46]
Arguments: HashedRelationBroadcastMode(List(input[0, date, false]),false), [id=#50]

(53) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [d_date#45]
Right keys [1]: [d_date#46]
Join condition: None

(54) Project [codegen id : 2]
Output [1]: [d_date_sk#5]
Input [2]: [d_date_sk#5, d_date#45]

(55) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#51]

Subquery:2 Hosting operator id = 50 Hosting Expression = Subquery scalar-subquery#48, [id=#49]
* Project (59)
+- * Filter (58)
   +- * ColumnarToRow (57)
      +- Scan parquet default.date_dim (56)


(56) Scan parquet default.date_dim
Output [2]: [d_date#52, d_week_seq#53]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [EqualTo(d_date,2000-01-03)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(57) ColumnarToRow [codegen id : 1]
Input [2]: [d_date#52, d_week_seq#53]

(58) Filter [codegen id : 1]
Input [2]: [d_date#52, d_week_seq#53]
Condition : (d_date#52 = 2000-01-03)

(59) Project [codegen id : 1]
Output [1]: [d_week_seq#53]
Input [2]: [d_date#52, d_week_seq#53]

Subquery:3 Hosting operator id = 15 Hosting Expression = cs_sold_date_sk#17 IN dynamicpruning#4

Subquery:4 Hosting operator id = 30 Hosting Expression = ws_sold_date_sk#30 IN dynamicpruning#4


