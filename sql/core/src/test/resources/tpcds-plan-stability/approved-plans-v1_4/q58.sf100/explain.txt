== Physical Plan ==
TakeOrderedAndProject (81)
+- * Project (80)
   +- * SortMergeJoin Inner (79)
      :- * Project (54)
      :  +- * SortMergeJoin Inner (53)
      :     :- * Sort (28)
      :     :  +- * Filter (27)
      :     :     +- * HashAggregate (26)
      :     :        +- Exchange (25)
      :     :           +- * HashAggregate (24)
      :     :              +- * Project (23)
      :     :                 +- * BroadcastHashJoin Inner BuildRight (22)
      :     :                    :- * Project (16)
      :     :                    :  +- * BroadcastHashJoin Inner BuildRight (15)
      :     :                    :     :- * Filter (3)
      :     :                    :     :  +- * ColumnarToRow (2)
      :     :                    :     :     +- Scan parquet default.store_sales (1)
      :     :                    :     +- BroadcastExchange (14)
      :     :                    :        +- * Project (13)
      :     :                    :           +- * BroadcastHashJoin LeftSemi BuildRight (12)
      :     :                    :              :- * Filter (6)
      :     :                    :              :  +- * ColumnarToRow (5)
      :     :                    :              :     +- Scan parquet default.date_dim (4)
      :     :                    :              +- BroadcastExchange (11)
      :     :                    :                 +- * Project (10)
      :     :                    :                    +- * Filter (9)
      :     :                    :                       +- * ColumnarToRow (8)
      :     :                    :                          +- Scan parquet default.date_dim (7)
      :     :                    +- BroadcastExchange (21)
      :     :                       +- * Project (20)
      :     :                          +- * Filter (19)
      :     :                             +- * ColumnarToRow (18)
      :     :                                +- Scan parquet default.item (17)
      :     +- * Sort (52)
      :        +- * Filter (51)
      :           +- * HashAggregate (50)
      :              +- Exchange (49)
      :                 +- * HashAggregate (48)
      :                    +- * Project (47)
      :                       +- * BroadcastHashJoin Inner BuildRight (46)
      :                          :- * Project (44)
      :                          :  +- * BroadcastHashJoin Inner BuildRight (43)
      :                          :     :- * Filter (31)
      :                          :     :  +- * ColumnarToRow (30)
      :                          :     :     +- Scan parquet default.catalog_sales (29)
      :                          :     +- BroadcastExchange (42)
      :                          :        +- * Project (41)
      :                          :           +- * BroadcastHashJoin LeftSemi BuildRight (40)
      :                          :              :- * Filter (34)
      :                          :              :  +- * ColumnarToRow (33)
      :                          :              :     +- Scan parquet default.date_dim (32)
      :                          :              +- BroadcastExchange (39)
      :                          :                 +- * Project (38)
      :                          :                    +- * Filter (37)
      :                          :                       +- * ColumnarToRow (36)
      :                          :                          +- Scan parquet default.date_dim (35)
      :                          +- ReusedExchange (45)
      +- * Sort (78)
         +- * Filter (77)
            +- * HashAggregate (76)
               +- Exchange (75)
                  +- * HashAggregate (74)
                     +- * Project (73)
                        +- * BroadcastHashJoin Inner BuildRight (72)
                           :- * Project (70)
                           :  +- * BroadcastHashJoin Inner BuildRight (69)
                           :     :- * Filter (57)
                           :     :  +- * ColumnarToRow (56)
                           :     :     +- Scan parquet default.web_sales (55)
                           :     +- BroadcastExchange (68)
                           :        +- * Project (67)
                           :           +- * BroadcastHashJoin LeftSemi BuildRight (66)
                           :              :- * Filter (60)
                           :              :  +- * ColumnarToRow (59)
                           :              :     +- Scan parquet default.date_dim (58)
                           :              +- BroadcastExchange (65)
                           :                 +- * Project (64)
                           :                    +- * Filter (63)
                           :                       +- * ColumnarToRow (62)
                           :                          +- Scan parquet default.date_dim (61)
                           +- ReusedExchange (71)


(1) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [3]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#3]

(3) Filter [codegen id : 4]
Input [3]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#3]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#4, d_date#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(5) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#4, d_date#5]

(6) Filter [codegen id : 2]
Input [2]: [d_date_sk#4, d_date#5]
Condition : isnotnull(d_date_sk#4)

(7) Scan parquet default.date_dim
Output [2]: [d_date#5, d_week_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(8) ColumnarToRow [codegen id : 1]
Input [2]: [d_date#5, d_week_seq#6]

(9) Filter [codegen id : 1]
Input [2]: [d_date#5, d_week_seq#6]
Condition : (isnotnull(d_week_seq#6) AND (d_week_seq#6 = Subquery scalar-subquery#7, [id=#8]))

(10) Project [codegen id : 1]
Output [1]: [d_date#5 AS d_date#5#9]
Input [2]: [d_date#5, d_week_seq#6]

(11) BroadcastExchange
Input [1]: [d_date#5#9]
Arguments: HashedRelationBroadcastMode(List(input[0, date, true]),false), [id=#10]

(12) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [d_date#5]
Right keys [1]: [d_date#5#9]
Join condition: None

(13) Project [codegen id : 2]
Output [1]: [d_date_sk#4]
Input [2]: [d_date_sk#4, d_date#5]

(14) BroadcastExchange
Input [1]: [d_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#11]

(15) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#4]
Join condition: None

(16) Project [codegen id : 4]
Output [2]: [ss_item_sk#2, ss_ext_sales_price#3]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#3, d_date_sk#4]

(17) Scan parquet default.item
Output [2]: [i_item_sk#12, i_item_id#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(18) ColumnarToRow [codegen id : 3]
Input [2]: [i_item_sk#12, i_item_id#13]

(19) Filter [codegen id : 3]
Input [2]: [i_item_sk#12, i_item_id#13]
Condition : (isnotnull(i_item_sk#12) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_item_id#13, 16, false, true)))

(20) Project [codegen id : 3]
Output [2]: [i_item_sk#12, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_item_id#13, 16, false, true) AS i_item_id#14]
Input [2]: [i_item_sk#12, i_item_id#13]

(21) BroadcastExchange
Input [2]: [i_item_sk#12, i_item_id#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15]

(22) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#12]
Join condition: None

(23) Project [codegen id : 4]
Output [2]: [ss_ext_sales_price#3, i_item_id#14]
Input [4]: [ss_item_sk#2, ss_ext_sales_price#3, i_item_sk#12, i_item_id#14]

(24) HashAggregate [codegen id : 4]
Input [2]: [ss_ext_sales_price#3, i_item_id#14]
Keys [1]: [i_item_id#14]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [1]: [sum#16]
Results [2]: [i_item_id#14, sum#17]

(25) Exchange
Input [2]: [i_item_id#14, sum#17]
Arguments: hashpartitioning(i_item_id#14, 5), ENSURE_REQUIREMENTS, [id=#18]

(26) HashAggregate [codegen id : 5]
Input [2]: [i_item_id#14, sum#17]
Keys [1]: [i_item_id#14]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#3))#19]
Results [2]: [i_item_id#14 AS item_id#20, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#19,17,2) AS ss_item_rev#21]

(27) Filter [codegen id : 5]
Input [2]: [item_id#20, ss_item_rev#21]
Condition : isnotnull(ss_item_rev#21)

(28) Sort [codegen id : 5]
Input [2]: [item_id#20, ss_item_rev#21]
Arguments: [item_id#20 ASC NULLS FIRST], false, 0

(29) Scan parquet default.catalog_sales
Output [3]: [cs_sold_date_sk#22, cs_item_sk#23, cs_ext_sales_price#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(30) ColumnarToRow [codegen id : 9]
Input [3]: [cs_sold_date_sk#22, cs_item_sk#23, cs_ext_sales_price#24]

(31) Filter [codegen id : 9]
Input [3]: [cs_sold_date_sk#22, cs_item_sk#23, cs_ext_sales_price#24]
Condition : (isnotnull(cs_item_sk#23) AND isnotnull(cs_sold_date_sk#22))

(32) Scan parquet default.date_dim
Output [2]: [d_date_sk#4, d_date#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(33) ColumnarToRow [codegen id : 7]
Input [2]: [d_date_sk#4, d_date#5]

(34) Filter [codegen id : 7]
Input [2]: [d_date_sk#4, d_date#5]
Condition : isnotnull(d_date_sk#4)

(35) Scan parquet default.date_dim
Output [2]: [d_date#5, d_week_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(36) ColumnarToRow [codegen id : 6]
Input [2]: [d_date#5, d_week_seq#6]

(37) Filter [codegen id : 6]
Input [2]: [d_date#5, d_week_seq#6]
Condition : (isnotnull(d_week_seq#6) AND (d_week_seq#6 = ReusedSubquery Subquery scalar-subquery#7, [id=#8]))

(38) Project [codegen id : 6]
Output [1]: [d_date#5 AS d_date#5#25]
Input [2]: [d_date#5, d_week_seq#6]

(39) BroadcastExchange
Input [1]: [d_date#5#25]
Arguments: HashedRelationBroadcastMode(List(input[0, date, true]),false), [id=#26]

(40) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [d_date#5]
Right keys [1]: [d_date#5#25]
Join condition: None

(41) Project [codegen id : 7]
Output [1]: [d_date_sk#4]
Input [2]: [d_date_sk#4, d_date#5]

(42) BroadcastExchange
Input [1]: [d_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#27]

(43) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_sold_date_sk#22]
Right keys [1]: [d_date_sk#4]
Join condition: None

(44) Project [codegen id : 9]
Output [2]: [cs_item_sk#23, cs_ext_sales_price#24]
Input [4]: [cs_sold_date_sk#22, cs_item_sk#23, cs_ext_sales_price#24, d_date_sk#4]

(45) ReusedExchange [Reuses operator id: 21]
Output [2]: [i_item_sk#12, i_item_id#28]

(46) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#23]
Right keys [1]: [i_item_sk#12]
Join condition: None

(47) Project [codegen id : 9]
Output [2]: [cs_ext_sales_price#24, i_item_id#28]
Input [4]: [cs_item_sk#23, cs_ext_sales_price#24, i_item_sk#12, i_item_id#28]

(48) HashAggregate [codegen id : 9]
Input [2]: [cs_ext_sales_price#24, i_item_id#28]
Keys [1]: [i_item_id#28]
Functions [1]: [partial_sum(UnscaledValue(cs_ext_sales_price#24))]
Aggregate Attributes [1]: [sum#29]
Results [2]: [i_item_id#28, sum#30]

(49) Exchange
Input [2]: [i_item_id#28, sum#30]
Arguments: hashpartitioning(i_item_id#28, 5), ENSURE_REQUIREMENTS, [id=#31]

(50) HashAggregate [codegen id : 10]
Input [2]: [i_item_id#28, sum#30]
Keys [1]: [i_item_id#28]
Functions [1]: [sum(UnscaledValue(cs_ext_sales_price#24))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_ext_sales_price#24))#32]
Results [2]: [i_item_id#28 AS item_id#33, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24))#32,17,2) AS cs_item_rev#34]

(51) Filter [codegen id : 10]
Input [2]: [item_id#33, cs_item_rev#34]
Condition : isnotnull(cs_item_rev#34)

(52) Sort [codegen id : 10]
Input [2]: [item_id#33, cs_item_rev#34]
Arguments: [item_id#33 ASC NULLS FIRST], false, 0

(53) SortMergeJoin [codegen id : 11]
Left keys [1]: [item_id#20]
Right keys [1]: [item_id#33]
Join condition: ((((cast(ss_item_rev#21 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(cs_item_rev#34)), DecimalType(19,3), true)) AND (cast(ss_item_rev#21 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(cs_item_rev#34)), DecimalType(20,3), true))) AND (cast(cs_item_rev#34 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ss_item_rev#21)), DecimalType(19,3), true))) AND (cast(cs_item_rev#34 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ss_item_rev#21)), DecimalType(20,3), true)))

(54) Project [codegen id : 11]
Output [3]: [item_id#20, ss_item_rev#21, cs_item_rev#34]
Input [4]: [item_id#20, ss_item_rev#21, item_id#33, cs_item_rev#34]

(55) Scan parquet default.web_sales
Output [3]: [ws_sold_date_sk#35, ws_item_sk#36, ws_ext_sales_price#37]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>

(56) ColumnarToRow [codegen id : 15]
Input [3]: [ws_sold_date_sk#35, ws_item_sk#36, ws_ext_sales_price#37]

(57) Filter [codegen id : 15]
Input [3]: [ws_sold_date_sk#35, ws_item_sk#36, ws_ext_sales_price#37]
Condition : (isnotnull(ws_item_sk#36) AND isnotnull(ws_sold_date_sk#35))

(58) Scan parquet default.date_dim
Output [2]: [d_date_sk#4, d_date#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(59) ColumnarToRow [codegen id : 13]
Input [2]: [d_date_sk#4, d_date#5]

(60) Filter [codegen id : 13]
Input [2]: [d_date_sk#4, d_date#5]
Condition : isnotnull(d_date_sk#4)

(61) Scan parquet default.date_dim
Output [2]: [d_date#5, d_week_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(62) ColumnarToRow [codegen id : 12]
Input [2]: [d_date#5, d_week_seq#6]

(63) Filter [codegen id : 12]
Input [2]: [d_date#5, d_week_seq#6]
Condition : (isnotnull(d_week_seq#6) AND (d_week_seq#6 = ReusedSubquery Subquery scalar-subquery#7, [id=#8]))

(64) Project [codegen id : 12]
Output [1]: [d_date#5 AS d_date#5#38]
Input [2]: [d_date#5, d_week_seq#6]

(65) BroadcastExchange
Input [1]: [d_date#5#38]
Arguments: HashedRelationBroadcastMode(List(input[0, date, true]),false), [id=#39]

(66) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [d_date#5]
Right keys [1]: [d_date#5#38]
Join condition: None

(67) Project [codegen id : 13]
Output [1]: [d_date_sk#4]
Input [2]: [d_date_sk#4, d_date#5]

(68) BroadcastExchange
Input [1]: [d_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#40]

(69) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [ws_sold_date_sk#35]
Right keys [1]: [d_date_sk#4]
Join condition: None

(70) Project [codegen id : 15]
Output [2]: [ws_item_sk#36, ws_ext_sales_price#37]
Input [4]: [ws_sold_date_sk#35, ws_item_sk#36, ws_ext_sales_price#37, d_date_sk#4]

(71) ReusedExchange [Reuses operator id: 21]
Output [2]: [i_item_sk#12, i_item_id#41]

(72) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [ws_item_sk#36]
Right keys [1]: [i_item_sk#12]
Join condition: None

(73) Project [codegen id : 15]
Output [2]: [ws_ext_sales_price#37, i_item_id#41]
Input [4]: [ws_item_sk#36, ws_ext_sales_price#37, i_item_sk#12, i_item_id#41]

(74) HashAggregate [codegen id : 15]
Input [2]: [ws_ext_sales_price#37, i_item_id#41]
Keys [1]: [i_item_id#41]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#37))]
Aggregate Attributes [1]: [sum#42]
Results [2]: [i_item_id#41, sum#43]

(75) Exchange
Input [2]: [i_item_id#41, sum#43]
Arguments: hashpartitioning(i_item_id#41, 5), ENSURE_REQUIREMENTS, [id=#44]

(76) HashAggregate [codegen id : 16]
Input [2]: [i_item_id#41, sum#43]
Keys [1]: [i_item_id#41]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#37))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#37))#45]
Results [2]: [i_item_id#41 AS item_id#46, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#37))#45,17,2) AS ws_item_rev#47]

(77) Filter [codegen id : 16]
Input [2]: [item_id#46, ws_item_rev#47]
Condition : isnotnull(ws_item_rev#47)

(78) Sort [codegen id : 16]
Input [2]: [item_id#46, ws_item_rev#47]
Arguments: [item_id#46 ASC NULLS FIRST], false, 0

(79) SortMergeJoin [codegen id : 17]
Left keys [1]: [item_id#20]
Right keys [1]: [item_id#46]
Join condition: ((((((((cast(ss_item_rev#21 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ws_item_rev#47)), DecimalType(19,3), true)) AND (cast(ss_item_rev#21 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ws_item_rev#47)), DecimalType(20,3), true))) AND (cast(cs_item_rev#34 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ws_item_rev#47)), DecimalType(19,3), true))) AND (cast(cs_item_rev#34 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ws_item_rev#47)), DecimalType(20,3), true))) AND (cast(ws_item_rev#47 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ss_item_rev#21)), DecimalType(19,3), true))) AND (cast(ws_item_rev#47 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ss_item_rev#21)), DecimalType(20,3), true))) AND (cast(ws_item_rev#47 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(cs_item_rev#34)), DecimalType(19,3), true))) AND (cast(ws_item_rev#47 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(cs_item_rev#34)), DecimalType(20,3), true)))

(80) Project [codegen id : 17]
Output [8]: [item_id#20, ss_item_rev#21, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ss_item_rev#21 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#21 as decimal(18,2))) + promote_precision(cast(cs_item_rev#34 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#47 as decimal(19,2)))), DecimalType(19,2), true))), DecimalType(38,21), true)) / 3.000000000000000000000), DecimalType(38,21), true)) * 100.000000000000000000000), DecimalType(38,17), true) AS ss_dev#48, cs_item_rev#34, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(cs_item_rev#34 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#21 as decimal(18,2))) + promote_precision(cast(cs_item_rev#34 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#47 as decimal(19,2)))), DecimalType(19,2), true))), DecimalType(38,21), true)) / 3.000000000000000000000), DecimalType(38,21), true)) * 100.000000000000000000000), DecimalType(38,17), true) AS cs_dev#49, ws_item_rev#47, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ws_item_rev#47 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#21 as decimal(18,2))) + promote_precision(cast(cs_item_rev#34 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#47 as decimal(19,2)))), DecimalType(19,2), true))), DecimalType(38,21), true)) / 3.000000000000000000000), DecimalType(38,21), true)) * 100.000000000000000000000), DecimalType(38,17), true) AS ws_dev#50, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#21 as decimal(18,2))) + promote_precision(cast(cs_item_rev#34 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#47 as decimal(19,2)))), DecimalType(19,2), true)) / 3.00), DecimalType(23,6), true) AS average#51]
Input [5]: [item_id#20, ss_item_rev#21, cs_item_rev#34, item_id#46, ws_item_rev#47]

(81) TakeOrderedAndProject
Input [8]: [item_id#20, ss_item_rev#21, ss_dev#48, cs_item_rev#34, cs_dev#49, ws_item_rev#47, ws_dev#50, average#51]
Arguments: 100, [item_id#20 ASC NULLS FIRST, ss_item_rev#21 ASC NULLS FIRST], [item_id#20, ss_item_rev#21, ss_dev#48, cs_item_rev#34, cs_dev#49, ws_item_rev#47, ws_dev#50, average#51]

===== Subqueries =====

Subquery:1 Hosting operator id = 9 Hosting Expression = Subquery scalar-subquery#7, [id=#8]
* Project (85)
+- * Filter (84)
   +- * ColumnarToRow (83)
      +- Scan parquet default.date_dim (82)


(82) Scan parquet default.date_dim
Output [2]: [d_date#5, d_week_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-01-03)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(83) ColumnarToRow [codegen id : 1]
Input [2]: [d_date#5, d_week_seq#6]

(84) Filter [codegen id : 1]
Input [2]: [d_date#5, d_week_seq#6]
Condition : (isnotnull(d_date#5) AND (d_date#5 = 10959))

(85) Project [codegen id : 1]
Output [1]: [d_week_seq#6]
Input [2]: [d_date#5, d_week_seq#6]

Subquery:2 Hosting operator id = 37 Hosting Expression = ReusedSubquery Subquery scalar-subquery#7, [id=#8]

Subquery:3 Hosting operator id = 63 Hosting Expression = ReusedSubquery Subquery scalar-subquery#7, [id=#8]


