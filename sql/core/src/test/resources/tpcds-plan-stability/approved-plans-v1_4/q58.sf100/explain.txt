== Physical Plan ==
TakeOrderedAndProject (86)
+- * Project (85)
   +- * SortMergeJoin Inner (84)
      :- * Project (56)
      :  +- * SortMergeJoin Inner (55)
      :     :- * Sort (27)
      :     :  +- * Filter (26)
      :     :     +- * HashAggregate (25)
      :     :        +- Exchange (24)
      :     :           +- * HashAggregate (23)
      :     :              +- * Project (22)
      :     :                 +- * BroadcastHashJoin Inner BuildRight (21)
      :     :                    :- * Project (9)
      :     :                    :  +- * BroadcastHashJoin Inner BuildLeft (8)
      :     :                    :     :- BroadcastExchange (4)
      :     :                    :     :  +- * Filter (3)
      :     :                    :     :     +- * ColumnarToRow (2)
      :     :                    :     :        +- Scan parquet default.store_sales (1)
      :     :                    :     +- * Filter (7)
      :     :                    :        +- * ColumnarToRow (6)
      :     :                    :           +- Scan parquet default.item (5)
      :     :                    +- BroadcastExchange (20)
      :     :                       +- * Project (19)
      :     :                          +- * BroadcastHashJoin LeftSemi BuildRight (18)
      :     :                             :- * Filter (12)
      :     :                             :  +- * ColumnarToRow (11)
      :     :                             :     +- Scan parquet default.date_dim (10)
      :     :                             +- BroadcastExchange (17)
      :     :                                +- * Project (16)
      :     :                                   +- * Filter (15)
      :     :                                      +- * ColumnarToRow (14)
      :     :                                         +- Scan parquet default.date_dim (13)
      :     +- * Sort (54)
      :        +- * Filter (53)
      :           +- * HashAggregate (52)
      :              +- Exchange (51)
      :                 +- * HashAggregate (50)
      :                    +- * Project (49)
      :                       +- * BroadcastHashJoin Inner BuildRight (48)
      :                          :- * Project (36)
      :                          :  +- * BroadcastHashJoin Inner BuildLeft (35)
      :                          :     :- BroadcastExchange (31)
      :                          :     :  +- * Filter (30)
      :                          :     :     +- * ColumnarToRow (29)
      :                          :     :        +- Scan parquet default.catalog_sales (28)
      :                          :     +- * Filter (34)
      :                          :        +- * ColumnarToRow (33)
      :                          :           +- Scan parquet default.item (32)
      :                          +- BroadcastExchange (47)
      :                             +- * Project (46)
      :                                +- * BroadcastHashJoin LeftSemi BuildRight (45)
      :                                   :- * Filter (39)
      :                                   :  +- * ColumnarToRow (38)
      :                                   :     +- Scan parquet default.date_dim (37)
      :                                   +- BroadcastExchange (44)
      :                                      +- * Project (43)
      :                                         +- * Filter (42)
      :                                            +- * ColumnarToRow (41)
      :                                               +- Scan parquet default.date_dim (40)
      +- * Sort (83)
         +- * Filter (82)
            +- * HashAggregate (81)
               +- Exchange (80)
                  +- * HashAggregate (79)
                     +- * Project (78)
                        +- * BroadcastHashJoin Inner BuildRight (77)
                           :- * Project (65)
                           :  +- * BroadcastHashJoin Inner BuildLeft (64)
                           :     :- BroadcastExchange (60)
                           :     :  +- * Filter (59)
                           :     :     +- * ColumnarToRow (58)
                           :     :        +- Scan parquet default.web_sales (57)
                           :     +- * Filter (63)
                           :        +- * ColumnarToRow (62)
                           :           +- Scan parquet default.item (61)
                           +- BroadcastExchange (76)
                              +- * Project (75)
                                 +- * BroadcastHashJoin LeftSemi BuildRight (74)
                                    :- * Filter (68)
                                    :  +- * ColumnarToRow (67)
                                    :     +- Scan parquet default.date_dim (66)
                                    +- BroadcastExchange (73)
                                       +- * Project (72)
                                          +- * Filter (71)
                                             +- * ColumnarToRow (70)
                                                +- Scan parquet default.date_dim (69)


(1) Scan parquet default.store_sales
Output [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]

(3) Filter [codegen id : 1]
Input [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_item_sk#1)

(4) BroadcastExchange
Input [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#4]

(5) Scan parquet default.item
Output [2]: [i_item_sk#5, i_item_id#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_item_id)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(6) ColumnarToRow
Input [2]: [i_item_sk#5, i_item_id#6]

(7) Filter
Input [2]: [i_item_sk#5, i_item_id#6]
Condition : (isnotnull(i_item_sk#5) AND isnotnull(i_item_id#6))

(8) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#5]
Join condition: None

(9) Project [codegen id : 4]
Output [3]: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#6]
Input [5]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_sk#5, i_item_id#6]

(10) Scan parquet default.date_dim
Output [2]: [d_date_sk#7, d_date#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(11) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#7, d_date#8]

(12) Filter [codegen id : 3]
Input [2]: [d_date_sk#7, d_date#8]
Condition : isnotnull(d_date_sk#7)

(13) Scan parquet default.date_dim
Output [2]: [d_date#8, d_week_seq#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(14) ColumnarToRow [codegen id : 2]
Input [2]: [d_date#8, d_week_seq#9]

(15) Filter [codegen id : 2]
Input [2]: [d_date#8, d_week_seq#9]
Condition : (isnotnull(d_week_seq#9) AND (d_week_seq#9 = Subquery scalar-subquery#10, [id=#11]))

(16) Project [codegen id : 2]
Output [1]: [d_date#8 AS d_date#8#12]
Input [2]: [d_date#8, d_week_seq#9]

(17) BroadcastExchange
Input [1]: [d_date#8#12]
Arguments: HashedRelationBroadcastMode(List(input[0, date, true]),false), [id=#13]

(18) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [d_date#8]
Right keys [1]: [d_date#8#12]
Join condition: None

(19) Project [codegen id : 3]
Output [1]: [d_date_sk#7]
Input [2]: [d_date_sk#7, d_date#8]

(20) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(21) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#7]
Join condition: None

(22) Project [codegen id : 4]
Output [2]: [ss_ext_sales_price#2, i_item_id#6]
Input [4]: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#6, d_date_sk#7]

(23) HashAggregate [codegen id : 4]
Input [2]: [ss_ext_sales_price#2, i_item_id#6]
Keys [1]: [i_item_id#6]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum#15]
Results [2]: [i_item_id#6, sum#16]

(24) Exchange
Input [2]: [i_item_id#6, sum#16]
Arguments: hashpartitioning(i_item_id#6, 5), ENSURE_REQUIREMENTS, [id=#17]

(25) HashAggregate [codegen id : 5]
Input [2]: [i_item_id#6, sum#16]
Keys [1]: [i_item_id#6]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#2))#18]
Results [2]: [i_item_id#6 AS item_id#19, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#18,17,2) AS ss_item_rev#20]

(26) Filter [codegen id : 5]
Input [2]: [item_id#19, ss_item_rev#20]
Condition : isnotnull(ss_item_rev#20)

(27) Sort [codegen id : 5]
Input [2]: [item_id#19, ss_item_rev#20]
Arguments: [item_id#19 ASC NULLS FIRST], false, 0

(28) Scan parquet default.catalog_sales
Output [3]: [cs_item_sk#21, cs_ext_sales_price#22, cs_sold_date_sk#23]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#23), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(29) ColumnarToRow [codegen id : 6]
Input [3]: [cs_item_sk#21, cs_ext_sales_price#22, cs_sold_date_sk#23]

(30) Filter [codegen id : 6]
Input [3]: [cs_item_sk#21, cs_ext_sales_price#22, cs_sold_date_sk#23]
Condition : isnotnull(cs_item_sk#21)

(31) BroadcastExchange
Input [3]: [cs_item_sk#21, cs_ext_sales_price#22, cs_sold_date_sk#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#24]

(32) Scan parquet default.item
Output [2]: [i_item_sk#5, i_item_id#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_item_id)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(33) ColumnarToRow
Input [2]: [i_item_sk#5, i_item_id#6]

(34) Filter
Input [2]: [i_item_sk#5, i_item_id#6]
Condition : (isnotnull(i_item_sk#5) AND isnotnull(i_item_id#6))

(35) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_item_sk#21]
Right keys [1]: [i_item_sk#5]
Join condition: None

(36) Project [codegen id : 9]
Output [3]: [cs_ext_sales_price#22, cs_sold_date_sk#23, i_item_id#6]
Input [5]: [cs_item_sk#21, cs_ext_sales_price#22, cs_sold_date_sk#23, i_item_sk#5, i_item_id#6]

(37) Scan parquet default.date_dim
Output [2]: [d_date_sk#7, d_date#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(38) ColumnarToRow [codegen id : 8]
Input [2]: [d_date_sk#7, d_date#8]

(39) Filter [codegen id : 8]
Input [2]: [d_date_sk#7, d_date#8]
Condition : isnotnull(d_date_sk#7)

(40) Scan parquet default.date_dim
Output [2]: [d_date#8, d_week_seq#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(41) ColumnarToRow [codegen id : 7]
Input [2]: [d_date#8, d_week_seq#9]

(42) Filter [codegen id : 7]
Input [2]: [d_date#8, d_week_seq#9]
Condition : (isnotnull(d_week_seq#9) AND (d_week_seq#9 = ReusedSubquery Subquery scalar-subquery#10, [id=#11]))

(43) Project [codegen id : 7]
Output [1]: [d_date#8 AS d_date#8#25]
Input [2]: [d_date#8, d_week_seq#9]

(44) BroadcastExchange
Input [1]: [d_date#8#25]
Arguments: HashedRelationBroadcastMode(List(input[0, date, true]),false), [id=#26]

(45) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [d_date#8]
Right keys [1]: [d_date#8#25]
Join condition: None

(46) Project [codegen id : 8]
Output [1]: [d_date_sk#7]
Input [2]: [d_date_sk#7, d_date#8]

(47) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#27]

(48) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [cs_sold_date_sk#23]
Right keys [1]: [d_date_sk#7]
Join condition: None

(49) Project [codegen id : 9]
Output [2]: [cs_ext_sales_price#22, i_item_id#6]
Input [4]: [cs_ext_sales_price#22, cs_sold_date_sk#23, i_item_id#6, d_date_sk#7]

(50) HashAggregate [codegen id : 9]
Input [2]: [cs_ext_sales_price#22, i_item_id#6]
Keys [1]: [i_item_id#6]
Functions [1]: [partial_sum(UnscaledValue(cs_ext_sales_price#22))]
Aggregate Attributes [1]: [sum#28]
Results [2]: [i_item_id#6, sum#29]

(51) Exchange
Input [2]: [i_item_id#6, sum#29]
Arguments: hashpartitioning(i_item_id#6, 5), ENSURE_REQUIREMENTS, [id=#30]

(52) HashAggregate [codegen id : 10]
Input [2]: [i_item_id#6, sum#29]
Keys [1]: [i_item_id#6]
Functions [1]: [sum(UnscaledValue(cs_ext_sales_price#22))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_ext_sales_price#22))#31]
Results [2]: [i_item_id#6 AS item_id#32, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#22))#31,17,2) AS cs_item_rev#33]

(53) Filter [codegen id : 10]
Input [2]: [item_id#32, cs_item_rev#33]
Condition : isnotnull(cs_item_rev#33)

(54) Sort [codegen id : 10]
Input [2]: [item_id#32, cs_item_rev#33]
Arguments: [item_id#32 ASC NULLS FIRST], false, 0

(55) SortMergeJoin [codegen id : 11]
Left keys [1]: [item_id#19]
Right keys [1]: [item_id#32]
Join condition: ((((cast(ss_item_rev#20 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(cs_item_rev#33)), DecimalType(19,3), true)) AND (cast(ss_item_rev#20 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(cs_item_rev#33)), DecimalType(20,3), true))) AND (cast(cs_item_rev#33 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ss_item_rev#20)), DecimalType(19,3), true))) AND (cast(cs_item_rev#33 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ss_item_rev#20)), DecimalType(20,3), true)))

(56) Project [codegen id : 11]
Output [3]: [item_id#19, ss_item_rev#20, cs_item_rev#33]
Input [4]: [item_id#19, ss_item_rev#20, item_id#32, cs_item_rev#33]

(57) Scan parquet default.web_sales
Output [3]: [ws_item_sk#34, ws_ext_sales_price#35, ws_sold_date_sk#36]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#36), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>

(58) ColumnarToRow [codegen id : 12]
Input [3]: [ws_item_sk#34, ws_ext_sales_price#35, ws_sold_date_sk#36]

(59) Filter [codegen id : 12]
Input [3]: [ws_item_sk#34, ws_ext_sales_price#35, ws_sold_date_sk#36]
Condition : isnotnull(ws_item_sk#34)

(60) BroadcastExchange
Input [3]: [ws_item_sk#34, ws_ext_sales_price#35, ws_sold_date_sk#36]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#37]

(61) Scan parquet default.item
Output [2]: [i_item_sk#5, i_item_id#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_item_id)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(62) ColumnarToRow
Input [2]: [i_item_sk#5, i_item_id#6]

(63) Filter
Input [2]: [i_item_sk#5, i_item_id#6]
Condition : (isnotnull(i_item_sk#5) AND isnotnull(i_item_id#6))

(64) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [ws_item_sk#34]
Right keys [1]: [i_item_sk#5]
Join condition: None

(65) Project [codegen id : 15]
Output [3]: [ws_ext_sales_price#35, ws_sold_date_sk#36, i_item_id#6]
Input [5]: [ws_item_sk#34, ws_ext_sales_price#35, ws_sold_date_sk#36, i_item_sk#5, i_item_id#6]

(66) Scan parquet default.date_dim
Output [2]: [d_date_sk#7, d_date#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(67) ColumnarToRow [codegen id : 14]
Input [2]: [d_date_sk#7, d_date#8]

(68) Filter [codegen id : 14]
Input [2]: [d_date_sk#7, d_date#8]
Condition : isnotnull(d_date_sk#7)

(69) Scan parquet default.date_dim
Output [2]: [d_date#8, d_week_seq#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(70) ColumnarToRow [codegen id : 13]
Input [2]: [d_date#8, d_week_seq#9]

(71) Filter [codegen id : 13]
Input [2]: [d_date#8, d_week_seq#9]
Condition : (isnotnull(d_week_seq#9) AND (d_week_seq#9 = ReusedSubquery Subquery scalar-subquery#10, [id=#11]))

(72) Project [codegen id : 13]
Output [1]: [d_date#8 AS d_date#8#38]
Input [2]: [d_date#8, d_week_seq#9]

(73) BroadcastExchange
Input [1]: [d_date#8#38]
Arguments: HashedRelationBroadcastMode(List(input[0, date, true]),false), [id=#39]

(74) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [d_date#8]
Right keys [1]: [d_date#8#38]
Join condition: None

(75) Project [codegen id : 14]
Output [1]: [d_date_sk#7]
Input [2]: [d_date_sk#7, d_date#8]

(76) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#40]

(77) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [ws_sold_date_sk#36]
Right keys [1]: [d_date_sk#7]
Join condition: None

(78) Project [codegen id : 15]
Output [2]: [ws_ext_sales_price#35, i_item_id#6]
Input [4]: [ws_ext_sales_price#35, ws_sold_date_sk#36, i_item_id#6, d_date_sk#7]

(79) HashAggregate [codegen id : 15]
Input [2]: [ws_ext_sales_price#35, i_item_id#6]
Keys [1]: [i_item_id#6]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#35))]
Aggregate Attributes [1]: [sum#41]
Results [2]: [i_item_id#6, sum#42]

(80) Exchange
Input [2]: [i_item_id#6, sum#42]
Arguments: hashpartitioning(i_item_id#6, 5), ENSURE_REQUIREMENTS, [id=#43]

(81) HashAggregate [codegen id : 16]
Input [2]: [i_item_id#6, sum#42]
Keys [1]: [i_item_id#6]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#35))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#35))#44]
Results [2]: [i_item_id#6 AS item_id#45, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#35))#44,17,2) AS ws_item_rev#46]

(82) Filter [codegen id : 16]
Input [2]: [item_id#45, ws_item_rev#46]
Condition : isnotnull(ws_item_rev#46)

(83) Sort [codegen id : 16]
Input [2]: [item_id#45, ws_item_rev#46]
Arguments: [item_id#45 ASC NULLS FIRST], false, 0

(84) SortMergeJoin [codegen id : 17]
Left keys [1]: [item_id#19]
Right keys [1]: [item_id#45]
Join condition: ((((((((cast(ss_item_rev#20 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ws_item_rev#46)), DecimalType(19,3), true)) AND (cast(ss_item_rev#20 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ws_item_rev#46)), DecimalType(20,3), true))) AND (cast(cs_item_rev#33 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ws_item_rev#46)), DecimalType(19,3), true))) AND (cast(cs_item_rev#33 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ws_item_rev#46)), DecimalType(20,3), true))) AND (cast(ws_item_rev#46 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ss_item_rev#20)), DecimalType(19,3), true))) AND (cast(ws_item_rev#46 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ss_item_rev#20)), DecimalType(20,3), true))) AND (cast(ws_item_rev#46 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(cs_item_rev#33)), DecimalType(19,3), true))) AND (cast(ws_item_rev#46 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(cs_item_rev#33)), DecimalType(20,3), true)))

(85) Project [codegen id : 17]
Output [8]: [item_id#19, ss_item_rev#20, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ss_item_rev#20 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#20 as decimal(18,2))) + promote_precision(cast(cs_item_rev#33 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#46 as decimal(19,2)))), DecimalType(19,2), true))), DecimalType(38,21), true)) / 3.000000000000000000000), DecimalType(38,21), true)) * 100.000000000000000000000), DecimalType(38,17), true) AS ss_dev#47, cs_item_rev#33, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(cs_item_rev#33 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#20 as decimal(18,2))) + promote_precision(cast(cs_item_rev#33 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#46 as decimal(19,2)))), DecimalType(19,2), true))), DecimalType(38,21), true)) / 3.000000000000000000000), DecimalType(38,21), true)) * 100.000000000000000000000), DecimalType(38,17), true) AS cs_dev#48, ws_item_rev#46, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ws_item_rev#46 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#20 as decimal(18,2))) + promote_precision(cast(cs_item_rev#33 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#46 as decimal(19,2)))), DecimalType(19,2), true))), DecimalType(38,21), true)) / 3.000000000000000000000), DecimalType(38,21), true)) * 100.000000000000000000000), DecimalType(38,17), true) AS ws_dev#49, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#20 as decimal(18,2))) + promote_precision(cast(cs_item_rev#33 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#46 as decimal(19,2)))), DecimalType(19,2), true)) / 3.00), DecimalType(23,6), true) AS average#50]
Input [5]: [item_id#19, ss_item_rev#20, cs_item_rev#33, item_id#45, ws_item_rev#46]

(86) TakeOrderedAndProject
Input [8]: [item_id#19, ss_item_rev#20, ss_dev#47, cs_item_rev#33, cs_dev#48, ws_item_rev#46, ws_dev#49, average#50]
Arguments: 100, [item_id#19 ASC NULLS FIRST, ss_item_rev#20 ASC NULLS FIRST], [item_id#19, ss_item_rev#20, ss_dev#47, cs_item_rev#33, cs_dev#48, ws_item_rev#46, ws_dev#49, average#50]

===== Subqueries =====

Subquery:1 Hosting operator id = 15 Hosting Expression = Subquery scalar-subquery#10, [id=#11]
* Project (90)
+- * Filter (89)
   +- * ColumnarToRow (88)
      +- Scan parquet default.date_dim (87)


(87) Scan parquet default.date_dim
Output [2]: [d_date#8, d_week_seq#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-01-03)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(88) ColumnarToRow [codegen id : 1]
Input [2]: [d_date#8, d_week_seq#9]

(89) Filter [codegen id : 1]
Input [2]: [d_date#8, d_week_seq#9]
Condition : (isnotnull(d_date#8) AND (d_date#8 = 10959))

(90) Project [codegen id : 1]
Output [1]: [d_week_seq#9]
Input [2]: [d_date#8, d_week_seq#9]

Subquery:2 Hosting operator id = 42 Hosting Expression = ReusedSubquery Subquery scalar-subquery#10, [id=#11]

Subquery:3 Hosting operator id = 71 Hosting Expression = ReusedSubquery Subquery scalar-subquery#10, [id=#11]


