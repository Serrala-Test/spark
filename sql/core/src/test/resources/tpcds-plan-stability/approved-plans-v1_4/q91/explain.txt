== Physical Plan ==
* Sort (49)
+- Exchange (48)
   +- * HashAggregate (47)
      +- Exchange (46)
         +- * HashAggregate (45)
            +- * Project (44)
               +- * BroadcastHashJoin Inner BuildRight (43)
                  :- * Project (37)
                  :  +- * BroadcastHashJoin Inner BuildRight (36)
                  :     :- * Project (30)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (29)
                  :     :     :- * Project (23)
                  :     :     :  +- * BroadcastHashJoin Inner BuildRight (22)
                  :     :     :     :- * Project (17)
                  :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (16)
                  :     :     :     :     :- * Project (10)
                  :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (9)
                  :     :     :     :     :     :- * Project (4)
                  :     :     :     :     :     :  +- * Filter (3)
                  :     :     :     :     :     :     +- * ColumnarToRow (2)
                  :     :     :     :     :     :        +- Scan parquet default.call_center (1)
                  :     :     :     :     :     +- BroadcastExchange (8)
                  :     :     :     :     :        +- * Filter (7)
                  :     :     :     :     :           +- * ColumnarToRow (6)
                  :     :     :     :     :              +- Scan parquet default.catalog_returns (5)
                  :     :     :     :     +- BroadcastExchange (15)
                  :     :     :     :        +- * Project (14)
                  :     :     :     :           +- * Filter (13)
                  :     :     :     :              +- * ColumnarToRow (12)
                  :     :     :     :                 +- Scan parquet default.date_dim (11)
                  :     :     :     +- BroadcastExchange (21)
                  :     :     :        +- * Filter (20)
                  :     :     :           +- * ColumnarToRow (19)
                  :     :     :              +- Scan parquet default.customer (18)
                  :     :     +- BroadcastExchange (28)
                  :     :        +- * Project (27)
                  :     :           +- * Filter (26)
                  :     :              +- * ColumnarToRow (25)
                  :     :                 +- Scan parquet default.customer_address (24)
                  :     +- BroadcastExchange (35)
                  :        +- * Project (34)
                  :           +- * Filter (33)
                  :              +- * ColumnarToRow (32)
                  :                 +- Scan parquet default.customer_demographics (31)
                  +- BroadcastExchange (42)
                     +- * Project (41)
                        +- * Filter (40)
                           +- * ColumnarToRow (39)
                              +- Scan parquet default.household_demographics (38)


(1) Scan parquet default.call_center
Output [4]: [cc_call_center_sk#1, cc_call_center_id#2, cc_name#3, cc_manager#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/call_center]
PushedFilters: [IsNotNull(cc_call_center_sk)]
ReadSchema: struct<cc_call_center_sk:int,cc_call_center_id:string,cc_name:string,cc_manager:string>

(2) ColumnarToRow [codegen id : 7]
Input [4]: [cc_call_center_sk#1, cc_call_center_id#2, cc_name#3, cc_manager#4]

(3) Filter [codegen id : 7]
Input [4]: [cc_call_center_sk#1, cc_call_center_id#2, cc_name#3, cc_manager#4]
Condition : isnotnull(cc_call_center_sk#1)

(4) Project [codegen id : 7]
Output [4]: [cc_call_center_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cc_call_center_id#2, 16, false, true) AS cc_call_center_id#5, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, cc_name#3, 50, false, true) AS cc_name#6, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, cc_manager#4, 40, false, true) AS cc_manager#7]
Input [4]: [cc_call_center_sk#1, cc_call_center_id#2, cc_name#3, cc_manager#4]

(5) Scan parquet default.catalog_returns
Output [4]: [cr_returned_date_sk#8, cr_returning_customer_sk#9, cr_call_center_sk#10, cr_net_loss#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_call_center_sk), IsNotNull(cr_returned_date_sk), IsNotNull(cr_returning_customer_sk)]
ReadSchema: struct<cr_returned_date_sk:int,cr_returning_customer_sk:int,cr_call_center_sk:int,cr_net_loss:decimal(7,2)>

(6) ColumnarToRow [codegen id : 1]
Input [4]: [cr_returned_date_sk#8, cr_returning_customer_sk#9, cr_call_center_sk#10, cr_net_loss#11]

(7) Filter [codegen id : 1]
Input [4]: [cr_returned_date_sk#8, cr_returning_customer_sk#9, cr_call_center_sk#10, cr_net_loss#11]
Condition : ((isnotnull(cr_call_center_sk#10) AND isnotnull(cr_returned_date_sk#8)) AND isnotnull(cr_returning_customer_sk#9))

(8) BroadcastExchange
Input [4]: [cr_returned_date_sk#8, cr_returning_customer_sk#9, cr_call_center_sk#10, cr_net_loss#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, false] as bigint)),false), [id=#12]

(9) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cc_call_center_sk#1]
Right keys [1]: [cr_call_center_sk#10]
Join condition: None

(10) Project [codegen id : 7]
Output [6]: [cc_call_center_id#5, cc_name#6, cc_manager#7, cr_returned_date_sk#8, cr_returning_customer_sk#9, cr_net_loss#11]
Input [8]: [cc_call_center_sk#1, cc_call_center_id#5, cc_name#6, cc_manager#7, cr_returned_date_sk#8, cr_returning_customer_sk#9, cr_call_center_sk#10, cr_net_loss#11]

(11) Scan parquet default.date_dim
Output [3]: [d_date_sk#13, d_year#14, d_moy#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(12) ColumnarToRow [codegen id : 2]
Input [3]: [d_date_sk#13, d_year#14, d_moy#15]

(13) Filter [codegen id : 2]
Input [3]: [d_date_sk#13, d_year#14, d_moy#15]
Condition : ((((isnotnull(d_year#14) AND isnotnull(d_moy#15)) AND (d_year#14 = 1998)) AND (d_moy#15 = 11)) AND isnotnull(d_date_sk#13))

(14) Project [codegen id : 2]
Output [1]: [d_date_sk#13]
Input [3]: [d_date_sk#13, d_year#14, d_moy#15]

(15) BroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(16) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cr_returned_date_sk#8]
Right keys [1]: [d_date_sk#13]
Join condition: None

(17) Project [codegen id : 7]
Output [5]: [cc_call_center_id#5, cc_name#6, cc_manager#7, cr_returning_customer_sk#9, cr_net_loss#11]
Input [7]: [cc_call_center_id#5, cc_name#6, cc_manager#7, cr_returned_date_sk#8, cr_returning_customer_sk#9, cr_net_loss#11, d_date_sk#13]

(18) Scan parquet default.customer
Output [4]: [c_customer_sk#17, c_current_cdemo_sk#18, c_current_hdemo_sk#19, c_current_addr_sk#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_hdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int>

(19) ColumnarToRow [codegen id : 3]
Input [4]: [c_customer_sk#17, c_current_cdemo_sk#18, c_current_hdemo_sk#19, c_current_addr_sk#20]

(20) Filter [codegen id : 3]
Input [4]: [c_customer_sk#17, c_current_cdemo_sk#18, c_current_hdemo_sk#19, c_current_addr_sk#20]
Condition : (((isnotnull(c_customer_sk#17) AND isnotnull(c_current_addr_sk#20)) AND isnotnull(c_current_cdemo_sk#18)) AND isnotnull(c_current_hdemo_sk#19))

(21) BroadcastExchange
Input [4]: [c_customer_sk#17, c_current_cdemo_sk#18, c_current_hdemo_sk#19, c_current_addr_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#21]

(22) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cr_returning_customer_sk#9]
Right keys [1]: [c_customer_sk#17]
Join condition: None

(23) Project [codegen id : 7]
Output [7]: [cc_call_center_id#5, cc_name#6, cc_manager#7, cr_net_loss#11, c_current_cdemo_sk#18, c_current_hdemo_sk#19, c_current_addr_sk#20]
Input [9]: [cc_call_center_id#5, cc_name#6, cc_manager#7, cr_returning_customer_sk#9, cr_net_loss#11, c_customer_sk#17, c_current_cdemo_sk#18, c_current_hdemo_sk#19, c_current_addr_sk#20]

(24) Scan parquet default.customer_address
Output [2]: [ca_address_sk#22, ca_gmt_offset#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_gmt_offset), EqualTo(ca_gmt_offset,-7.00), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_gmt_offset:decimal(5,2)>

(25) ColumnarToRow [codegen id : 4]
Input [2]: [ca_address_sk#22, ca_gmt_offset#23]

(26) Filter [codegen id : 4]
Input [2]: [ca_address_sk#22, ca_gmt_offset#23]
Condition : ((isnotnull(ca_gmt_offset#23) AND (ca_gmt_offset#23 = -7.00)) AND isnotnull(ca_address_sk#22))

(27) Project [codegen id : 4]
Output [1]: [ca_address_sk#22]
Input [2]: [ca_address_sk#22, ca_gmt_offset#23]

(28) BroadcastExchange
Input [1]: [ca_address_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#24]

(29) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [c_current_addr_sk#20]
Right keys [1]: [ca_address_sk#22]
Join condition: None

(30) Project [codegen id : 7]
Output [6]: [cc_call_center_id#5, cc_name#6, cc_manager#7, cr_net_loss#11, c_current_cdemo_sk#18, c_current_hdemo_sk#19]
Input [8]: [cc_call_center_id#5, cc_name#6, cc_manager#7, cr_net_loss#11, c_current_cdemo_sk#18, c_current_hdemo_sk#19, c_current_addr_sk#20, ca_address_sk#22]

(31) Scan parquet default.customer_demographics
Output [3]: [cd_demo_sk#25, cd_marital_status#26, cd_education_status#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(32) ColumnarToRow [codegen id : 5]
Input [3]: [cd_demo_sk#25, cd_marital_status#26, cd_education_status#27]

(33) Filter [codegen id : 5]
Input [3]: [cd_demo_sk#25, cd_marital_status#26, cd_education_status#27]
Condition : ((((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_marital_status#26, 1, false, true) = M) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_education_status#27, 20, false, true) = Unknown             )) OR ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_marital_status#26, 1, false, true) = W) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_education_status#27, 20, false, true) = Advanced Degree     ))) AND isnotnull(cd_demo_sk#25))

(34) Project [codegen id : 5]
Output [3]: [cd_demo_sk#25, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_marital_status#26, 1, false, true) AS cd_marital_status#28, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_education_status#27, 20, false, true) AS cd_education_status#29]
Input [3]: [cd_demo_sk#25, cd_marital_status#26, cd_education_status#27]

(35) BroadcastExchange
Input [3]: [cd_demo_sk#25, cd_marital_status#28, cd_education_status#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#30]

(36) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [c_current_cdemo_sk#18]
Right keys [1]: [cd_demo_sk#25]
Join condition: None

(37) Project [codegen id : 7]
Output [7]: [cc_call_center_id#5, cc_name#6, cc_manager#7, cr_net_loss#11, c_current_hdemo_sk#19, cd_marital_status#28, cd_education_status#29]
Input [9]: [cc_call_center_id#5, cc_name#6, cc_manager#7, cr_net_loss#11, c_current_cdemo_sk#18, c_current_hdemo_sk#19, cd_demo_sk#25, cd_marital_status#28, cd_education_status#29]

(38) Scan parquet default.household_demographics
Output [2]: [hd_demo_sk#31, hd_buy_potential#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string>

(39) ColumnarToRow [codegen id : 6]
Input [2]: [hd_demo_sk#31, hd_buy_potential#32]

(40) Filter [codegen id : 6]
Input [2]: [hd_demo_sk#31, hd_buy_potential#32]
Condition : (StartsWith(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, hd_buy_potential#32, 15, false, true), Unknown) AND isnotnull(hd_demo_sk#31))

(41) Project [codegen id : 6]
Output [1]: [hd_demo_sk#31]
Input [2]: [hd_demo_sk#31, hd_buy_potential#32]

(42) BroadcastExchange
Input [1]: [hd_demo_sk#31]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#33]

(43) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [c_current_hdemo_sk#19]
Right keys [1]: [hd_demo_sk#31]
Join condition: None

(44) Project [codegen id : 7]
Output [6]: [cc_call_center_id#5, cc_name#6, cc_manager#7, cr_net_loss#11, cd_marital_status#28, cd_education_status#29]
Input [8]: [cc_call_center_id#5, cc_name#6, cc_manager#7, cr_net_loss#11, c_current_hdemo_sk#19, cd_marital_status#28, cd_education_status#29, hd_demo_sk#31]

(45) HashAggregate [codegen id : 7]
Input [6]: [cc_call_center_id#5, cc_name#6, cc_manager#7, cr_net_loss#11, cd_marital_status#28, cd_education_status#29]
Keys [5]: [cc_call_center_id#5, cc_name#6, cc_manager#7, cd_marital_status#28, cd_education_status#29]
Functions [1]: [partial_sum(UnscaledValue(cr_net_loss#11))]
Aggregate Attributes [1]: [sum#34]
Results [6]: [cc_call_center_id#5, cc_name#6, cc_manager#7, cd_marital_status#28, cd_education_status#29, sum#35]

(46) Exchange
Input [6]: [cc_call_center_id#5, cc_name#6, cc_manager#7, cd_marital_status#28, cd_education_status#29, sum#35]
Arguments: hashpartitioning(cc_call_center_id#5, cc_name#6, cc_manager#7, cd_marital_status#28, cd_education_status#29, 5), ENSURE_REQUIREMENTS, [id=#36]

(47) HashAggregate [codegen id : 8]
Input [6]: [cc_call_center_id#5, cc_name#6, cc_manager#7, cd_marital_status#28, cd_education_status#29, sum#35]
Keys [5]: [cc_call_center_id#5, cc_name#6, cc_manager#7, cd_marital_status#28, cd_education_status#29]
Functions [1]: [sum(UnscaledValue(cr_net_loss#11))]
Aggregate Attributes [1]: [sum(UnscaledValue(cr_net_loss#11))#37]
Results [4]: [cc_call_center_id#5 AS Call_Center#38, cc_name#6 AS Call_Center_Name#39, cc_manager#7 AS Manager#40, MakeDecimal(sum(UnscaledValue(cr_net_loss#11))#37,17,2) AS Returns_Loss#41]

(48) Exchange
Input [4]: [Call_Center#38, Call_Center_Name#39, Manager#40, Returns_Loss#41]
Arguments: rangepartitioning(Returns_Loss#41 DESC NULLS LAST, 5), ENSURE_REQUIREMENTS, [id=#42]

(49) Sort [codegen id : 9]
Input [4]: [Call_Center#38, Call_Center_Name#39, Manager#40, Returns_Loss#41]
Arguments: [Returns_Loss#41 DESC NULLS LAST], true, 0

