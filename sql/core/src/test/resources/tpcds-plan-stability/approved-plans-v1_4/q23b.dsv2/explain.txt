== Physical Plan ==
TakeOrderedAndProject (98)
+- Union (97)
   :- * HashAggregate (70)
   :  +- Exchange (69)
   :     +- * HashAggregate (68)
   :        +- * Project (67)
   :           +- * BroadcastHashJoin Inner BuildRight (66)
   :              :- * Project (61)
   :              :  +- * BroadcastHashJoin Inner BuildRight (60)
   :              :     :- * SortMergeJoin LeftSemi (47)
   :              :     :  :- * Sort (31)
   :              :     :  :  +- Exchange (30)
   :              :     :  :     +- * Project (29)
   :              :     :  :        +- * SortMergeJoin LeftSemi (28)
   :              :     :  :           :- * Sort (5)
   :              :     :  :           :  +- Exchange (4)
   :              :     :  :           :     +- * Project (3)
   :              :     :  :           :        +- * Filter (2)
   :              :     :  :           :           +- BatchScan default.catalog_sales (1)
   :              :     :  :           +- * Sort (27)
   :              :     :  :              +- Exchange (26)
   :              :     :  :                 +- * Project (25)
   :              :     :  :                    +- * Filter (24)
   :              :     :  :                       +- * HashAggregate (23)
   :              :     :  :                          +- Exchange (22)
   :              :     :  :                             +- * HashAggregate (21)
   :              :     :  :                                +- * Project (20)
   :              :     :  :                                   +- * BroadcastHashJoin Inner BuildRight (19)
   :              :     :  :                                      :- * Project (14)
   :              :     :  :                                      :  +- * BroadcastHashJoin Inner BuildRight (13)
   :              :     :  :                                      :     :- * Project (8)
   :              :     :  :                                      :     :  +- * Filter (7)
   :              :     :  :                                      :     :     +- BatchScan default.store_sales (6)
   :              :     :  :                                      :     +- BroadcastExchange (12)
   :              :     :  :                                      :        +- * Project (11)
   :              :     :  :                                      :           +- * Filter (10)
   :              :     :  :                                      :              +- BatchScan default.date_dim (9)
   :              :     :  :                                      +- BroadcastExchange (18)
   :              :     :  :                                         +- * Project (17)
   :              :     :  :                                            +- * Filter (16)
   :              :     :  :                                               +- BatchScan default.item (15)
   :              :     :  +- * Sort (46)
   :              :     :     +- * Project (45)
   :              :     :        +- * Filter (44)
   :              :     :           +- * HashAggregate (43)
   :              :     :              +- Exchange (42)
   :              :     :                 +- * HashAggregate (41)
   :              :     :                    +- * Project (40)
   :              :     :                       +- * BroadcastHashJoin Inner BuildRight (39)
   :              :     :                          :- * Project (34)
   :              :     :                          :  +- * Filter (33)
   :              :     :                          :     +- BatchScan default.store_sales (32)
   :              :     :                          +- BroadcastExchange (38)
   :              :     :                             +- * Project (37)
   :              :     :                                +- * Filter (36)
   :              :     :                                   +- BatchScan default.customer (35)
   :              :     +- BroadcastExchange (59)
   :              :        +- * SortMergeJoin LeftSemi (58)
   :              :           :- * Sort (52)
   :              :           :  +- Exchange (51)
   :              :           :     +- * Project (50)
   :              :           :        +- * Filter (49)
   :              :           :           +- BatchScan default.customer (48)
   :              :           +- * Sort (57)
   :              :              +- * Project (56)
   :              :                 +- * Filter (55)
   :              :                    +- * HashAggregate (54)
   :              :                       +- ReusedExchange (53)
   :              +- BroadcastExchange (65)
   :                 +- * Project (64)
   :                    +- * Filter (63)
   :                       +- BatchScan default.date_dim (62)
   +- * HashAggregate (96)
      +- Exchange (95)
         +- * HashAggregate (94)
            +- * Project (93)
               +- * BroadcastHashJoin Inner BuildRight (92)
                  :- * Project (90)
                  :  +- * BroadcastHashJoin Inner BuildRight (89)
                  :     :- * SortMergeJoin LeftSemi (87)
                  :     :  :- * Sort (81)
                  :     :  :  +- Exchange (80)
                  :     :  :     +- * Project (79)
                  :     :  :        +- * SortMergeJoin LeftSemi (78)
                  :     :  :           :- * Sort (75)
                  :     :  :           :  +- Exchange (74)
                  :     :  :           :     +- * Project (73)
                  :     :  :           :        +- * Filter (72)
                  :     :  :           :           +- BatchScan default.web_sales (71)
                  :     :  :           +- * Sort (77)
                  :     :  :              +- ReusedExchange (76)
                  :     :  +- * Sort (86)
                  :     :     +- * Project (85)
                  :     :        +- * Filter (84)
                  :     :           +- * HashAggregate (83)
                  :     :              +- ReusedExchange (82)
                  :     +- ReusedExchange (88)
                  +- ReusedExchange (91)


(1) BatchScan default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
DataFilters: [isnotnull(cs_bill_customer_sk#1)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PartitionFilters: [isnotnull(cs_sold_date_sk#5)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) Filter [codegen id : 1]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Condition : (isnotnull(cs_bill_customer_sk#1) AND might_contain(Subquery scalar-subquery#6, [id=#7], xxhash64(cs_sold_date_sk#5, 42)))

(3) Project [codegen id : 1]
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(4) Exchange
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_item_sk#2, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_item_sk#2 ASC NULLS FIRST], false, 0

(6) BatchScan default.store_sales
Output [2]: [ss_item_sk#8, ss_sold_date_sk#9]
DataFilters: [isnotnull(ss_item_sk#8)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_sales]
PartitionFilters: [isnotnull(ss_sold_date_sk#9)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(7) Filter [codegen id : 5]
Input [2]: [ss_item_sk#8, ss_sold_date_sk#9]
Condition : isnotnull(ss_item_sk#8)

(8) Project [codegen id : 5]
Output [2]: [ss_item_sk#8, ss_sold_date_sk#9]
Input [2]: [ss_item_sk#8, ss_sold_date_sk#9]

(9) BatchScan default.date_dim
Output [3]: [d_date_sk#10, d_date#11, d_year#12]
DataFilters: [d_year#12 IN (2000,2001,2002,2003), isnotnull(d_date_sk#10)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(10) Filter [codegen id : 3]
Input [3]: [d_date_sk#10, d_date#11, d_year#12]
Condition : (d_year#12 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#10))

(11) Project [codegen id : 3]
Output [2]: [d_date_sk#10, d_date#11]
Input [3]: [d_date_sk#10, d_date#11, d_year#12]

(12) BroadcastExchange
Input [2]: [d_date_sk#10, d_date#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(13) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#9]
Right keys [1]: [d_date_sk#10]
Join type: Inner
Join condition: None

(14) Project [codegen id : 5]
Output [2]: [ss_item_sk#8, d_date#11]
Input [4]: [ss_item_sk#8, ss_sold_date_sk#9, d_date_sk#10, d_date#11]

(15) BatchScan default.item
Output [2]: [i_item_sk#13, i_item_desc#14]
DataFilters: [isnotnull(i_item_sk#13)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(16) Filter [codegen id : 4]
Input [2]: [i_item_sk#13, i_item_desc#14]
Condition : isnotnull(i_item_sk#13)

(17) Project [codegen id : 4]
Output [2]: [i_item_sk#13, i_item_desc#14]
Input [2]: [i_item_sk#13, i_item_desc#14]

(18) BroadcastExchange
Input [2]: [i_item_sk#13, i_item_desc#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(19) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#13]
Join type: Inner
Join condition: None

(20) Project [codegen id : 5]
Output [3]: [d_date#11, i_item_sk#13, substr(i_item_desc#14, 1, 30) AS _groupingexpression#15]
Input [4]: [ss_item_sk#8, d_date#11, i_item_sk#13, i_item_desc#14]

(21) HashAggregate [codegen id : 5]
Input [3]: [d_date#11, i_item_sk#13, _groupingexpression#15]
Keys [3]: [_groupingexpression#15, i_item_sk#13, d_date#11]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#16]
Results [4]: [_groupingexpression#15, i_item_sk#13, d_date#11, count#17]

(22) Exchange
Input [4]: [_groupingexpression#15, i_item_sk#13, d_date#11, count#17]
Arguments: hashpartitioning(_groupingexpression#15, i_item_sk#13, d_date#11, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(23) HashAggregate [codegen id : 6]
Input [4]: [_groupingexpression#15, i_item_sk#13, d_date#11, count#17]
Keys [3]: [_groupingexpression#15, i_item_sk#13, d_date#11]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#18]
Results [2]: [i_item_sk#13 AS item_sk#19, count(1)#18 AS cnt#20]

(24) Filter [codegen id : 6]
Input [2]: [item_sk#19, cnt#20]
Condition : (cnt#20 > 4)

(25) Project [codegen id : 6]
Output [1]: [item_sk#19]
Input [2]: [item_sk#19, cnt#20]

(26) Exchange
Input [1]: [item_sk#19]
Arguments: hashpartitioning(item_sk#19, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(27) Sort [codegen id : 7]
Input [1]: [item_sk#19]
Arguments: [item_sk#19 ASC NULLS FIRST], false, 0

(28) SortMergeJoin [codegen id : 8]
Left keys [1]: [cs_item_sk#2]
Right keys [1]: [item_sk#19]
Join type: LeftSemi
Join condition: None

(29) Project [codegen id : 8]
Output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(30) Exchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(31) Sort [codegen id : 9]
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(32) BatchScan default.store_sales
Output [3]: [ss_customer_sk#21, ss_quantity#22, ss_sales_price#23]
DataFilters: [isnotnull(ss_customer_sk#21)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(33) Filter [codegen id : 11]
Input [3]: [ss_customer_sk#21, ss_quantity#22, ss_sales_price#23]
Condition : isnotnull(ss_customer_sk#21)

(34) Project [codegen id : 11]
Output [3]: [ss_customer_sk#21, ss_quantity#22, ss_sales_price#23]
Input [3]: [ss_customer_sk#21, ss_quantity#22, ss_sales_price#23]

(35) BatchScan default.customer
Output [1]: [c_customer_sk#24]
DataFilters: [isnotnull(c_customer_sk#24)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(36) Filter [codegen id : 10]
Input [1]: [c_customer_sk#24]
Condition : isnotnull(c_customer_sk#24)

(37) Project [codegen id : 10]
Output [1]: [c_customer_sk#24]
Input [1]: [c_customer_sk#24]

(38) BroadcastExchange
Input [1]: [c_customer_sk#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

(39) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_customer_sk#21]
Right keys [1]: [c_customer_sk#24]
Join type: Inner
Join condition: None

(40) Project [codegen id : 11]
Output [3]: [ss_quantity#22, ss_sales_price#23, c_customer_sk#24]
Input [4]: [ss_customer_sk#21, ss_quantity#22, ss_sales_price#23, c_customer_sk#24]

(41) HashAggregate [codegen id : 11]
Input [3]: [ss_quantity#22, ss_sales_price#23, c_customer_sk#24]
Keys [1]: [c_customer_sk#24]
Functions [1]: [partial_sum((cast(ss_quantity#22 as decimal(10,0)) * ss_sales_price#23))]
Aggregate Attributes [2]: [sum#25, isEmpty#26]
Results [3]: [c_customer_sk#24, sum#27, isEmpty#28]

(42) Exchange
Input [3]: [c_customer_sk#24, sum#27, isEmpty#28]
Arguments: hashpartitioning(c_customer_sk#24, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(43) HashAggregate [codegen id : 12]
Input [3]: [c_customer_sk#24, sum#27, isEmpty#28]
Keys [1]: [c_customer_sk#24]
Functions [1]: [sum((cast(ss_quantity#22 as decimal(10,0)) * ss_sales_price#23))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#22 as decimal(10,0)) * ss_sales_price#23))#29]
Results [2]: [c_customer_sk#24, sum((cast(ss_quantity#22 as decimal(10,0)) * ss_sales_price#23))#29 AS ssales#30]

(44) Filter [codegen id : 12]
Input [2]: [c_customer_sk#24, ssales#30]
Condition : (isnotnull(ssales#30) AND (cast(ssales#30 as decimal(38,8)) > (0.500000 * Subquery scalar-subquery#31, [id=#32])))

(45) Project [codegen id : 12]
Output [1]: [c_customer_sk#24]
Input [2]: [c_customer_sk#24, ssales#30]

(46) Sort [codegen id : 12]
Input [1]: [c_customer_sk#24]
Arguments: [c_customer_sk#24 ASC NULLS FIRST], false, 0

(47) SortMergeJoin [codegen id : 20]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#24]
Join type: LeftSemi
Join condition: None

(48) BatchScan default.customer
Output [3]: [c_customer_sk#33, c_first_name#34, c_last_name#35]
DataFilters: [isnotnull(c_customer_sk#33)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(49) Filter [codegen id : 13]
Input [3]: [c_customer_sk#33, c_first_name#34, c_last_name#35]
Condition : isnotnull(c_customer_sk#33)

(50) Project [codegen id : 13]
Output [3]: [c_customer_sk#33, c_first_name#34, c_last_name#35]
Input [3]: [c_customer_sk#33, c_first_name#34, c_last_name#35]

(51) Exchange
Input [3]: [c_customer_sk#33, c_first_name#34, c_last_name#35]
Arguments: hashpartitioning(c_customer_sk#33, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(52) Sort [codegen id : 14]
Input [3]: [c_customer_sk#33, c_first_name#34, c_last_name#35]
Arguments: [c_customer_sk#33 ASC NULLS FIRST], false, 0

(53) ReusedExchange [Reuses operator id: 42]
Output [3]: [c_customer_sk#24, sum#27, isEmpty#28]

(54) HashAggregate [codegen id : 17]
Input [3]: [c_customer_sk#24, sum#27, isEmpty#28]
Keys [1]: [c_customer_sk#24]
Functions [1]: [sum((cast(ss_quantity#22 as decimal(10,0)) * ss_sales_price#23))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#22 as decimal(10,0)) * ss_sales_price#23))#29]
Results [2]: [c_customer_sk#24, sum((cast(ss_quantity#22 as decimal(10,0)) * ss_sales_price#23))#29 AS ssales#30]

(55) Filter [codegen id : 17]
Input [2]: [c_customer_sk#24, ssales#30]
Condition : (isnotnull(ssales#30) AND (cast(ssales#30 as decimal(38,8)) > (0.500000 * ReusedSubquery Subquery scalar-subquery#31, [id=#32])))

(56) Project [codegen id : 17]
Output [1]: [c_customer_sk#24]
Input [2]: [c_customer_sk#24, ssales#30]

(57) Sort [codegen id : 17]
Input [1]: [c_customer_sk#24]
Arguments: [c_customer_sk#24 ASC NULLS FIRST], false, 0

(58) SortMergeJoin [codegen id : 18]
Left keys [1]: [c_customer_sk#33]
Right keys [1]: [c_customer_sk#24]
Join type: LeftSemi
Join condition: None

(59) BroadcastExchange
Input [3]: [c_customer_sk#33, c_first_name#34, c_last_name#35]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=10]

(60) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#33]
Join type: Inner
Join condition: None

(61) Project [codegen id : 20]
Output [5]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_first_name#34, c_last_name#35]
Input [7]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_customer_sk#33, c_first_name#34, c_last_name#35]

(62) BatchScan default.date_dim
Output [3]: [d_date_sk#36, d_year#37, d_moy#38]
DataFilters: [isnotnull(d_year#37), isnotnull(d_moy#38), (d_year#37 = 2000), (d_moy#38 = 2), isnotnull(d_date_sk#36)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(63) Filter [codegen id : 19]
Input [3]: [d_date_sk#36, d_year#37, d_moy#38]
Condition : ((((isnotnull(d_year#37) AND isnotnull(d_moy#38)) AND (d_year#37 = 2000)) AND (d_moy#38 = 2)) AND isnotnull(d_date_sk#36))

(64) Project [codegen id : 19]
Output [1]: [d_date_sk#36]
Input [3]: [d_date_sk#36, d_year#37, d_moy#38]

(65) BroadcastExchange
Input [1]: [d_date_sk#36]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=11]

(66) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [cs_sold_date_sk#5]
Right keys [1]: [d_date_sk#36]
Join type: Inner
Join condition: None

(67) Project [codegen id : 20]
Output [4]: [cs_quantity#3, cs_list_price#4, c_first_name#34, c_last_name#35]
Input [6]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_first_name#34, c_last_name#35, d_date_sk#36]

(68) HashAggregate [codegen id : 20]
Input [4]: [cs_quantity#3, cs_list_price#4, c_first_name#34, c_last_name#35]
Keys [2]: [c_last_name#35, c_first_name#34]
Functions [1]: [partial_sum((cast(cs_quantity#3 as decimal(10,0)) * cs_list_price#4))]
Aggregate Attributes [2]: [sum#39, isEmpty#40]
Results [4]: [c_last_name#35, c_first_name#34, sum#41, isEmpty#42]

(69) Exchange
Input [4]: [c_last_name#35, c_first_name#34, sum#41, isEmpty#42]
Arguments: hashpartitioning(c_last_name#35, c_first_name#34, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(70) HashAggregate [codegen id : 21]
Input [4]: [c_last_name#35, c_first_name#34, sum#41, isEmpty#42]
Keys [2]: [c_last_name#35, c_first_name#34]
Functions [1]: [sum((cast(cs_quantity#3 as decimal(10,0)) * cs_list_price#4))]
Aggregate Attributes [1]: [sum((cast(cs_quantity#3 as decimal(10,0)) * cs_list_price#4))#43]
Results [3]: [c_last_name#35, c_first_name#34, sum((cast(cs_quantity#3 as decimal(10,0)) * cs_list_price#4))#43 AS sales#44]

(71) BatchScan default.web_sales
Output [5]: [ws_item_sk#45, ws_bill_customer_sk#46, ws_quantity#47, ws_list_price#48, ws_sold_date_sk#49]
DataFilters: [isnotnull(ws_bill_customer_sk#46)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/web_sales]
PartitionFilters: [isnotnull(ws_sold_date_sk#49)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(72) Filter [codegen id : 22]
Input [5]: [ws_item_sk#45, ws_bill_customer_sk#46, ws_quantity#47, ws_list_price#48, ws_sold_date_sk#49]
Condition : (isnotnull(ws_bill_customer_sk#46) AND might_contain(ReusedSubquery Subquery scalar-subquery#6, [id=#7], xxhash64(ws_sold_date_sk#49, 42)))

(73) Project [codegen id : 22]
Output [5]: [ws_item_sk#45, ws_bill_customer_sk#46, ws_quantity#47, ws_list_price#48, ws_sold_date_sk#49]
Input [5]: [ws_item_sk#45, ws_bill_customer_sk#46, ws_quantity#47, ws_list_price#48, ws_sold_date_sk#49]

(74) Exchange
Input [5]: [ws_item_sk#45, ws_bill_customer_sk#46, ws_quantity#47, ws_list_price#48, ws_sold_date_sk#49]
Arguments: hashpartitioning(ws_item_sk#45, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(75) Sort [codegen id : 23]
Input [5]: [ws_item_sk#45, ws_bill_customer_sk#46, ws_quantity#47, ws_list_price#48, ws_sold_date_sk#49]
Arguments: [ws_item_sk#45 ASC NULLS FIRST], false, 0

(76) ReusedExchange [Reuses operator id: 26]
Output [1]: [item_sk#19]

(77) Sort [codegen id : 28]
Input [1]: [item_sk#19]
Arguments: [item_sk#19 ASC NULLS FIRST], false, 0

(78) SortMergeJoin [codegen id : 29]
Left keys [1]: [ws_item_sk#45]
Right keys [1]: [item_sk#19]
Join type: LeftSemi
Join condition: None

(79) Project [codegen id : 29]
Output [4]: [ws_bill_customer_sk#46, ws_quantity#47, ws_list_price#48, ws_sold_date_sk#49]
Input [5]: [ws_item_sk#45, ws_bill_customer_sk#46, ws_quantity#47, ws_list_price#48, ws_sold_date_sk#49]

(80) Exchange
Input [4]: [ws_bill_customer_sk#46, ws_quantity#47, ws_list_price#48, ws_sold_date_sk#49]
Arguments: hashpartitioning(ws_bill_customer_sk#46, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(81) Sort [codegen id : 30]
Input [4]: [ws_bill_customer_sk#46, ws_quantity#47, ws_list_price#48, ws_sold_date_sk#49]
Arguments: [ws_bill_customer_sk#46 ASC NULLS FIRST], false, 0

(82) ReusedExchange [Reuses operator id: 42]
Output [3]: [c_customer_sk#24, sum#27, isEmpty#28]

(83) HashAggregate [codegen id : 33]
Input [3]: [c_customer_sk#24, sum#27, isEmpty#28]
Keys [1]: [c_customer_sk#24]
Functions [1]: [sum((cast(ss_quantity#22 as decimal(10,0)) * ss_sales_price#23))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#22 as decimal(10,0)) * ss_sales_price#23))#29]
Results [2]: [c_customer_sk#24, sum((cast(ss_quantity#22 as decimal(10,0)) * ss_sales_price#23))#29 AS ssales#30]

(84) Filter [codegen id : 33]
Input [2]: [c_customer_sk#24, ssales#30]
Condition : (isnotnull(ssales#30) AND (cast(ssales#30 as decimal(38,8)) > (0.500000 * ReusedSubquery Subquery scalar-subquery#31, [id=#32])))

(85) Project [codegen id : 33]
Output [1]: [c_customer_sk#24]
Input [2]: [c_customer_sk#24, ssales#30]

(86) Sort [codegen id : 33]
Input [1]: [c_customer_sk#24]
Arguments: [c_customer_sk#24 ASC NULLS FIRST], false, 0

(87) SortMergeJoin [codegen id : 41]
Left keys [1]: [ws_bill_customer_sk#46]
Right keys [1]: [c_customer_sk#24]
Join type: LeftSemi
Join condition: None

(88) ReusedExchange [Reuses operator id: 59]
Output [3]: [c_customer_sk#50, c_first_name#51, c_last_name#52]

(89) BroadcastHashJoin [codegen id : 41]
Left keys [1]: [ws_bill_customer_sk#46]
Right keys [1]: [c_customer_sk#50]
Join type: Inner
Join condition: None

(90) Project [codegen id : 41]
Output [5]: [ws_quantity#47, ws_list_price#48, ws_sold_date_sk#49, c_first_name#51, c_last_name#52]
Input [7]: [ws_bill_customer_sk#46, ws_quantity#47, ws_list_price#48, ws_sold_date_sk#49, c_customer_sk#50, c_first_name#51, c_last_name#52]

(91) ReusedExchange [Reuses operator id: 65]
Output [1]: [d_date_sk#53]

(92) BroadcastHashJoin [codegen id : 41]
Left keys [1]: [ws_sold_date_sk#49]
Right keys [1]: [d_date_sk#53]
Join type: Inner
Join condition: None

(93) Project [codegen id : 41]
Output [4]: [ws_quantity#47, ws_list_price#48, c_first_name#51, c_last_name#52]
Input [6]: [ws_quantity#47, ws_list_price#48, ws_sold_date_sk#49, c_first_name#51, c_last_name#52, d_date_sk#53]

(94) HashAggregate [codegen id : 41]
Input [4]: [ws_quantity#47, ws_list_price#48, c_first_name#51, c_last_name#52]
Keys [2]: [c_last_name#52, c_first_name#51]
Functions [1]: [partial_sum((cast(ws_quantity#47 as decimal(10,0)) * ws_list_price#48))]
Aggregate Attributes [2]: [sum#54, isEmpty#55]
Results [4]: [c_last_name#52, c_first_name#51, sum#56, isEmpty#57]

(95) Exchange
Input [4]: [c_last_name#52, c_first_name#51, sum#56, isEmpty#57]
Arguments: hashpartitioning(c_last_name#52, c_first_name#51, 5), ENSURE_REQUIREMENTS, [plan_id=15]

(96) HashAggregate [codegen id : 42]
Input [4]: [c_last_name#52, c_first_name#51, sum#56, isEmpty#57]
Keys [2]: [c_last_name#52, c_first_name#51]
Functions [1]: [sum((cast(ws_quantity#47 as decimal(10,0)) * ws_list_price#48))]
Aggregate Attributes [1]: [sum((cast(ws_quantity#47 as decimal(10,0)) * ws_list_price#48))#58]
Results [3]: [c_last_name#52, c_first_name#51, sum((cast(ws_quantity#47 as decimal(10,0)) * ws_list_price#48))#58 AS sales#59]

(97) Union

(98) TakeOrderedAndProject
Input [3]: [c_last_name#35, c_first_name#34, sales#44]
Arguments: 100, [c_last_name#35 ASC NULLS FIRST, c_first_name#34 ASC NULLS FIRST, sales#44 ASC NULLS FIRST], [c_last_name#35, c_first_name#34, sales#44]

===== Subqueries =====

Subquery:1 Hosting operator id = 2 Hosting Expression = Subquery scalar-subquery#6, [id=#7]
ObjectHashAggregate (104)
+- Exchange (103)
   +- ObjectHashAggregate (102)
      +- * Project (101)
         +- * Filter (100)
            +- BatchScan default.date_dim (99)


(99) BatchScan default.date_dim
Output [3]: [d_date_sk#36, d_year#37, d_moy#38]
DataFilters: [isnotnull(d_year#37), isnotnull(d_moy#38), (d_year#37 = 2000), (d_moy#38 = 2), isnotnull(d_date_sk#36)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(100) Filter [codegen id : 1]
Input [3]: [d_date_sk#36, d_year#37, d_moy#38]
Condition : ((((isnotnull(d_year#37) AND isnotnull(d_moy#38)) AND (d_year#37 = 2000)) AND (d_moy#38 = 2)) AND isnotnull(d_date_sk#36))

(101) Project [codegen id : 1]
Output [1]: [d_date_sk#36]
Input [3]: [d_date_sk#36, d_year#37, d_moy#38]

(102) ObjectHashAggregate
Input [1]: [d_date_sk#36]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(d_date_sk#36, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#60]
Results [1]: [buf#61]

(103) Exchange
Input [1]: [buf#61]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=16]

(104) ObjectHashAggregate
Input [1]: [buf#61]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(d_date_sk#36, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(d_date_sk#36, 42), 1000000, 8388608, 0, 0)#62]
Results [1]: [bloom_filter_agg(xxhash64(d_date_sk#36, 42), 1000000, 8388608, 0, 0)#62 AS bloomFilter#63]

Subquery:2 Hosting operator id = 44 Hosting Expression = Subquery scalar-subquery#31, [id=#32]
* HashAggregate (122)
+- Exchange (121)
   +- * HashAggregate (120)
      +- * HashAggregate (119)
         +- Exchange (118)
            +- * HashAggregate (117)
               +- * Project (116)
                  +- * BroadcastHashJoin Inner BuildRight (115)
                     :- * Project (110)
                     :  +- * BroadcastHashJoin Inner BuildRight (109)
                     :     :- * Project (107)
                     :     :  +- * Filter (106)
                     :     :     +- BatchScan default.store_sales (105)
                     :     +- ReusedExchange (108)
                     +- BroadcastExchange (114)
                        +- * Project (113)
                           +- * Filter (112)
                              +- BatchScan default.date_dim (111)


(105) BatchScan default.store_sales
Output [4]: [ss_customer_sk#64, ss_quantity#65, ss_sales_price#66, ss_sold_date_sk#67]
DataFilters: [isnotnull(ss_customer_sk#64)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_sales]
PartitionFilters: [isnotnull(ss_sold_date_sk#67)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(106) Filter [codegen id : 3]
Input [4]: [ss_customer_sk#64, ss_quantity#65, ss_sales_price#66, ss_sold_date_sk#67]
Condition : isnotnull(ss_customer_sk#64)

(107) Project [codegen id : 3]
Output [4]: [ss_customer_sk#64, ss_quantity#65, ss_sales_price#66, ss_sold_date_sk#67]
Input [4]: [ss_customer_sk#64, ss_quantity#65, ss_sales_price#66, ss_sold_date_sk#67]

(108) ReusedExchange [Reuses operator id: 38]
Output [1]: [c_customer_sk#68]

(109) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_customer_sk#64]
Right keys [1]: [c_customer_sk#68]
Join type: Inner
Join condition: None

(110) Project [codegen id : 3]
Output [4]: [ss_quantity#65, ss_sales_price#66, ss_sold_date_sk#67, c_customer_sk#68]
Input [5]: [ss_customer_sk#64, ss_quantity#65, ss_sales_price#66, ss_sold_date_sk#67, c_customer_sk#68]

(111) BatchScan default.date_dim
Output [2]: [d_date_sk#69, d_year#70]
DataFilters: [d_year#70 IN (2000,2001,2002,2003), isnotnull(d_date_sk#69)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(112) Filter [codegen id : 2]
Input [2]: [d_date_sk#69, d_year#70]
Condition : (d_year#70 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#69))

(113) Project [codegen id : 2]
Output [1]: [d_date_sk#69]
Input [2]: [d_date_sk#69, d_year#70]

(114) BroadcastExchange
Input [1]: [d_date_sk#69]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=17]

(115) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#67]
Right keys [1]: [d_date_sk#69]
Join type: Inner
Join condition: None

(116) Project [codegen id : 3]
Output [3]: [ss_quantity#65, ss_sales_price#66, c_customer_sk#68]
Input [5]: [ss_quantity#65, ss_sales_price#66, ss_sold_date_sk#67, c_customer_sk#68, d_date_sk#69]

(117) HashAggregate [codegen id : 3]
Input [3]: [ss_quantity#65, ss_sales_price#66, c_customer_sk#68]
Keys [1]: [c_customer_sk#68]
Functions [1]: [partial_sum((cast(ss_quantity#65 as decimal(10,0)) * ss_sales_price#66))]
Aggregate Attributes [2]: [sum#71, isEmpty#72]
Results [3]: [c_customer_sk#68, sum#73, isEmpty#74]

(118) Exchange
Input [3]: [c_customer_sk#68, sum#73, isEmpty#74]
Arguments: hashpartitioning(c_customer_sk#68, 5), ENSURE_REQUIREMENTS, [plan_id=18]

(119) HashAggregate [codegen id : 4]
Input [3]: [c_customer_sk#68, sum#73, isEmpty#74]
Keys [1]: [c_customer_sk#68]
Functions [1]: [sum((cast(ss_quantity#65 as decimal(10,0)) * ss_sales_price#66))]
Aggregate Attributes [1]: [sum((cast(ss_quantity#65 as decimal(10,0)) * ss_sales_price#66))#75]
Results [1]: [sum((cast(ss_quantity#65 as decimal(10,0)) * ss_sales_price#66))#75 AS csales#76]

(120) HashAggregate [codegen id : 4]
Input [1]: [csales#76]
Keys: []
Functions [1]: [partial_max(csales#76)]
Aggregate Attributes [1]: [max#77]
Results [1]: [max#78]

(121) Exchange
Input [1]: [max#78]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=19]

(122) HashAggregate [codegen id : 5]
Input [1]: [max#78]
Keys: []
Functions [1]: [max(csales#76)]
Aggregate Attributes [1]: [max(csales#76)#79]
Results [1]: [max(csales#76)#79 AS tpcds_cmax#80]

Subquery:3 Hosting operator id = 55 Hosting Expression = ReusedSubquery Subquery scalar-subquery#31, [id=#32]

Subquery:4 Hosting operator id = 72 Hosting Expression = ReusedSubquery Subquery scalar-subquery#6, [id=#7]

Subquery:5 Hosting operator id = 84 Hosting Expression = ReusedSubquery Subquery scalar-subquery#31, [id=#32]


