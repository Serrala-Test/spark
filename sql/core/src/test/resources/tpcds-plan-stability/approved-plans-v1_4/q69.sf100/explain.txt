== Physical Plan ==
TakeOrderedAndProject (61)
+- * HashAggregate (60)
   +- Exchange (59)
      +- * HashAggregate (58)
         +- * Project (57)
            +- * SortMergeJoin Inner (56)
               :- * Sort (49)
               :  +- Exchange (48)
               :     +- * Project (47)
               :        +- * SortMergeJoin Inner (46)
               :           :- * Sort (39)
               :           :  +- Exchange (38)
               :           :     +- * Project (37)
               :           :        +- SortMergeJoin LeftAnti (36)
               :           :           :- SortMergeJoin LeftAnti (27)
               :           :           :  :- SortMergeJoin LeftSemi (18)
               :           :           :  :  :- * Sort (5)
               :           :           :  :  :  +- Exchange (4)
               :           :           :  :  :     +- * Filter (3)
               :           :           :  :  :        +- * ColumnarToRow (2)
               :           :           :  :  :           +- Scan parquet default.customer (1)
               :           :           :  :  +- * Sort (17)
               :           :           :  :     +- Exchange (16)
               :           :           :  :        +- * Project (15)
               :           :           :  :           +- * BroadcastHashJoin Inner BuildRight (14)
               :           :           :  :              :- * Filter (8)
               :           :           :  :              :  +- * ColumnarToRow (7)
               :           :           :  :              :     +- Scan parquet default.store_sales (6)
               :           :           :  :              +- BroadcastExchange (13)
               :           :           :  :                 +- * Project (12)
               :           :           :  :                    +- * Filter (11)
               :           :           :  :                       +- * ColumnarToRow (10)
               :           :           :  :                          +- Scan parquet default.date_dim (9)
               :           :           :  +- * Sort (26)
               :           :           :     +- Exchange (25)
               :           :           :        +- * Project (24)
               :           :           :           +- * BroadcastHashJoin Inner BuildRight (23)
               :           :           :              :- * Filter (21)
               :           :           :              :  +- * ColumnarToRow (20)
               :           :           :              :     +- Scan parquet default.web_sales (19)
               :           :           :              +- ReusedExchange (22)
               :           :           +- * Sort (35)
               :           :              +- Exchange (34)
               :           :                 +- * Project (33)
               :           :                    +- * BroadcastHashJoin Inner BuildRight (32)
               :           :                       :- * Filter (30)
               :           :                       :  +- * ColumnarToRow (29)
               :           :                       :     +- Scan parquet default.catalog_sales (28)
               :           :                       +- ReusedExchange (31)
               :           +- * Sort (45)
               :              +- Exchange (44)
               :                 +- * Project (43)
               :                    +- * Filter (42)
               :                       +- * ColumnarToRow (41)
               :                          +- Scan parquet default.customer_address (40)
               +- * Sort (55)
                  +- Exchange (54)
                     +- * Project (53)
                        +- * Filter (52)
                           +- * ColumnarToRow (51)
                              +- Scan parquet default.customer_demographics (50)


(1) Scan parquet default.customer
Output [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(3) Filter [codegen id : 1]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Condition : (isnotnull(c_current_addr_sk#3) AND isnotnull(c_current_cdemo_sk#2))

(4) Exchange
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: hashpartitioning(c_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#4]

(5) Sort [codegen id : 2]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#5, ss_customer_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int>

(7) ColumnarToRow [codegen id : 4]
Input [2]: [ss_sold_date_sk#5, ss_customer_sk#6]

(8) Filter [codegen id : 4]
Input [2]: [ss_sold_date_sk#5, ss_customer_sk#6]
Condition : isnotnull(ss_sold_date_sk#5)

(9) Scan parquet default.date_dim
Output [3]: [d_date_sk#7, d_year#8, d_moy#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,6), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(10) ColumnarToRow [codegen id : 3]
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]

(11) Filter [codegen id : 3]
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]
Condition : (((((isnotnull(d_year#8) AND isnotnull(d_moy#9)) AND (d_year#8 = 2001)) AND (d_moy#9 >= 4)) AND (d_moy#9 <= 6)) AND isnotnull(d_date_sk#7))

(12) Project [codegen id : 3]
Output [1]: [d_date_sk#7]
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]

(13) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#10]

(14) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#5]
Right keys [1]: [d_date_sk#7]
Join condition: None

(15) Project [codegen id : 4]
Output [1]: [ss_customer_sk#6]
Input [3]: [ss_sold_date_sk#5, ss_customer_sk#6, d_date_sk#7]

(16) Exchange
Input [1]: [ss_customer_sk#6]
Arguments: hashpartitioning(ss_customer_sk#6, 5), ENSURE_REQUIREMENTS, [id=#11]

(17) Sort [codegen id : 5]
Input [1]: [ss_customer_sk#6]
Arguments: [ss_customer_sk#6 ASC NULLS FIRST], false, 0

(18) SortMergeJoin
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#6]
Join condition: None

(19) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#12, ws_bill_customer_sk#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int>

(20) ColumnarToRow [codegen id : 7]
Input [2]: [ws_sold_date_sk#12, ws_bill_customer_sk#13]

(21) Filter [codegen id : 7]
Input [2]: [ws_sold_date_sk#12, ws_bill_customer_sk#13]
Condition : isnotnull(ws_sold_date_sk#12)

(22) ReusedExchange [Reuses operator id: 13]
Output [1]: [d_date_sk#7]

(23) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ws_sold_date_sk#12]
Right keys [1]: [d_date_sk#7]
Join condition: None

(24) Project [codegen id : 7]
Output [1]: [ws_bill_customer_sk#13]
Input [3]: [ws_sold_date_sk#12, ws_bill_customer_sk#13, d_date_sk#7]

(25) Exchange
Input [1]: [ws_bill_customer_sk#13]
Arguments: hashpartitioning(ws_bill_customer_sk#13, 5), ENSURE_REQUIREMENTS, [id=#14]

(26) Sort [codegen id : 8]
Input [1]: [ws_bill_customer_sk#13]
Arguments: [ws_bill_customer_sk#13 ASC NULLS FIRST], false, 0

(27) SortMergeJoin
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#13]
Join condition: None

(28) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#15, cs_ship_customer_sk#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_ship_customer_sk:int>

(29) ColumnarToRow [codegen id : 10]
Input [2]: [cs_sold_date_sk#15, cs_ship_customer_sk#16]

(30) Filter [codegen id : 10]
Input [2]: [cs_sold_date_sk#15, cs_ship_customer_sk#16]
Condition : isnotnull(cs_sold_date_sk#15)

(31) ReusedExchange [Reuses operator id: 13]
Output [1]: [d_date_sk#7]

(32) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#15]
Right keys [1]: [d_date_sk#7]
Join condition: None

(33) Project [codegen id : 10]
Output [1]: [cs_ship_customer_sk#16]
Input [3]: [cs_sold_date_sk#15, cs_ship_customer_sk#16, d_date_sk#7]

(34) Exchange
Input [1]: [cs_ship_customer_sk#16]
Arguments: hashpartitioning(cs_ship_customer_sk#16, 5), ENSURE_REQUIREMENTS, [id=#17]

(35) Sort [codegen id : 11]
Input [1]: [cs_ship_customer_sk#16]
Arguments: [cs_ship_customer_sk#16 ASC NULLS FIRST], false, 0

(36) SortMergeJoin
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [cs_ship_customer_sk#16]
Join condition: None

(37) Project [codegen id : 12]
Output [2]: [c_current_cdemo_sk#2, c_current_addr_sk#3]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(38) Exchange
Input [2]: [c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: hashpartitioning(c_current_addr_sk#3, 5), ENSURE_REQUIREMENTS, [id=#18]

(39) Sort [codegen id : 13]
Input [2]: [c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: [c_current_addr_sk#3 ASC NULLS FIRST], false, 0

(40) Scan parquet default.customer_address
Output [2]: [ca_address_sk#19, ca_state#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(41) ColumnarToRow [codegen id : 14]
Input [2]: [ca_address_sk#19, ca_state#20]

(42) Filter [codegen id : 14]
Input [2]: [ca_address_sk#19, ca_state#20]
Condition : (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#20, 2, false, true) IN (KY,GA,NM) AND isnotnull(ca_address_sk#19))

(43) Project [codegen id : 14]
Output [1]: [ca_address_sk#19]
Input [2]: [ca_address_sk#19, ca_state#20]

(44) Exchange
Input [1]: [ca_address_sk#19]
Arguments: hashpartitioning(ca_address_sk#19, 5), ENSURE_REQUIREMENTS, [id=#21]

(45) Sort [codegen id : 15]
Input [1]: [ca_address_sk#19]
Arguments: [ca_address_sk#19 ASC NULLS FIRST], false, 0

(46) SortMergeJoin [codegen id : 16]
Left keys [1]: [c_current_addr_sk#3]
Right keys [1]: [ca_address_sk#19]
Join condition: None

(47) Project [codegen id : 16]
Output [1]: [c_current_cdemo_sk#2]
Input [3]: [c_current_cdemo_sk#2, c_current_addr_sk#3, ca_address_sk#19]

(48) Exchange
Input [1]: [c_current_cdemo_sk#2]
Arguments: hashpartitioning(c_current_cdemo_sk#2, 5), ENSURE_REQUIREMENTS, [id=#22]

(49) Sort [codegen id : 17]
Input [1]: [c_current_cdemo_sk#2]
Arguments: [c_current_cdemo_sk#2 ASC NULLS FIRST], false, 0

(50) Scan parquet default.customer_demographics
Output [6]: [cd_demo_sk#23, cd_gender#24, cd_marital_status#25, cd_education_status#26, cd_purchase_estimate#27, cd_credit_rating#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_purchase_estimate:int,cd_credit_rating:string>

(51) ColumnarToRow [codegen id : 18]
Input [6]: [cd_demo_sk#23, cd_gender#24, cd_marital_status#25, cd_education_status#26, cd_purchase_estimate#27, cd_credit_rating#28]

(52) Filter [codegen id : 18]
Input [6]: [cd_demo_sk#23, cd_gender#24, cd_marital_status#25, cd_education_status#26, cd_purchase_estimate#27, cd_credit_rating#28]
Condition : isnotnull(cd_demo_sk#23)

(53) Project [codegen id : 18]
Output [6]: [cd_demo_sk#23, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_gender#24, 1, false, true) AS cd_gender#29, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_marital_status#25, 1, false, true) AS cd_marital_status#30, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_education_status#26, 20, false, true) AS cd_education_status#31, cd_purchase_estimate#27, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_credit_rating#28, 10, false, true) AS cd_credit_rating#32]
Input [6]: [cd_demo_sk#23, cd_gender#24, cd_marital_status#25, cd_education_status#26, cd_purchase_estimate#27, cd_credit_rating#28]

(54) Exchange
Input [6]: [cd_demo_sk#23, cd_gender#29, cd_marital_status#30, cd_education_status#31, cd_purchase_estimate#27, cd_credit_rating#32]
Arguments: hashpartitioning(cd_demo_sk#23, 5), ENSURE_REQUIREMENTS, [id=#33]

(55) Sort [codegen id : 19]
Input [6]: [cd_demo_sk#23, cd_gender#29, cd_marital_status#30, cd_education_status#31, cd_purchase_estimate#27, cd_credit_rating#32]
Arguments: [cd_demo_sk#23 ASC NULLS FIRST], false, 0

(56) SortMergeJoin [codegen id : 20]
Left keys [1]: [c_current_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#23]
Join condition: None

(57) Project [codegen id : 20]
Output [5]: [cd_gender#29, cd_marital_status#30, cd_education_status#31, cd_purchase_estimate#27, cd_credit_rating#32]
Input [7]: [c_current_cdemo_sk#2, cd_demo_sk#23, cd_gender#29, cd_marital_status#30, cd_education_status#31, cd_purchase_estimate#27, cd_credit_rating#32]

(58) HashAggregate [codegen id : 20]
Input [5]: [cd_gender#29, cd_marital_status#30, cd_education_status#31, cd_purchase_estimate#27, cd_credit_rating#32]
Keys [5]: [cd_gender#29, cd_marital_status#30, cd_education_status#31, cd_purchase_estimate#27, cd_credit_rating#32]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#34]
Results [6]: [cd_gender#29, cd_marital_status#30, cd_education_status#31, cd_purchase_estimate#27, cd_credit_rating#32, count#35]

(59) Exchange
Input [6]: [cd_gender#29, cd_marital_status#30, cd_education_status#31, cd_purchase_estimate#27, cd_credit_rating#32, count#35]
Arguments: hashpartitioning(cd_gender#29, cd_marital_status#30, cd_education_status#31, cd_purchase_estimate#27, cd_credit_rating#32, 5), ENSURE_REQUIREMENTS, [id=#36]

(60) HashAggregate [codegen id : 21]
Input [6]: [cd_gender#29, cd_marital_status#30, cd_education_status#31, cd_purchase_estimate#27, cd_credit_rating#32, count#35]
Keys [5]: [cd_gender#29, cd_marital_status#30, cd_education_status#31, cd_purchase_estimate#27, cd_credit_rating#32]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#37]
Results [8]: [cd_gender#29, cd_marital_status#30, cd_education_status#31, count(1)#37 AS cnt1#38, cd_purchase_estimate#27, count(1)#37 AS cnt2#39, cd_credit_rating#32, count(1)#37 AS cnt3#40]

(61) TakeOrderedAndProject
Input [8]: [cd_gender#29, cd_marital_status#30, cd_education_status#31, cnt1#38, cd_purchase_estimate#27, cnt2#39, cd_credit_rating#32, cnt3#40]
Arguments: 100, [cd_gender#29 ASC NULLS FIRST, cd_marital_status#30 ASC NULLS FIRST, cd_education_status#31 ASC NULLS FIRST, cd_purchase_estimate#27 ASC NULLS FIRST, cd_credit_rating#32 ASC NULLS FIRST], [cd_gender#29, cd_marital_status#30, cd_education_status#31, cnt1#38, cd_purchase_estimate#27, cnt2#39, cd_credit_rating#32, cnt3#40]

