== Physical Plan ==
TakeOrderedAndProject (54)
+- * HashAggregate (53)
   +- Exchange (52)
      +- * HashAggregate (51)
         +- * Project (50)
            +- * BroadcastHashJoin Inner BuildLeft (49)
               :- BroadcastExchange (45)
               :  +- * Project (44)
               :     +- * BroadcastHashJoin Inner BuildRight (43)
               :        :- * Project (37)
               :        :  +- * BroadcastHashJoin LeftAnti BuildRight (36)
               :        :     :- * BroadcastHashJoin LeftAnti BuildRight (25)
               :        :     :  :- * BroadcastHashJoin LeftSemi BuildRight (14)
               :        :     :  :  :- * Filter (3)
               :        :     :  :  :  +- * ColumnarToRow (2)
               :        :     :  :  :     +- Scan parquet default.customer (1)
               :        :     :  :  +- BroadcastExchange (13)
               :        :     :  :     +- * Project (12)
               :        :     :  :        +- * BroadcastHashJoin Inner BuildLeft (11)
               :        :     :  :           :- BroadcastExchange (6)
               :        :     :  :           :  +- * ColumnarToRow (5)
               :        :     :  :           :     +- Scan parquet default.store_sales (4)
               :        :     :  :           +- * Project (10)
               :        :     :  :              +- * Filter (9)
               :        :     :  :                 +- * ColumnarToRow (8)
               :        :     :  :                    +- Scan parquet default.date_dim (7)
               :        :     :  +- BroadcastExchange (24)
               :        :     :     +- * Project (23)
               :        :     :        +- * BroadcastHashJoin Inner BuildLeft (22)
               :        :     :           :- BroadcastExchange (17)
               :        :     :           :  +- * ColumnarToRow (16)
               :        :     :           :     +- Scan parquet default.web_sales (15)
               :        :     :           +- * Project (21)
               :        :     :              +- * Filter (20)
               :        :     :                 +- * ColumnarToRow (19)
               :        :     :                    +- Scan parquet default.date_dim (18)
               :        :     +- BroadcastExchange (35)
               :        :        +- * Project (34)
               :        :           +- * BroadcastHashJoin Inner BuildLeft (33)
               :        :              :- BroadcastExchange (28)
               :        :              :  +- * ColumnarToRow (27)
               :        :              :     +- Scan parquet default.catalog_sales (26)
               :        :              +- * Project (32)
               :        :                 +- * Filter (31)
               :        :                    +- * ColumnarToRow (30)
               :        :                       +- Scan parquet default.date_dim (29)
               :        +- BroadcastExchange (42)
               :           +- * Project (41)
               :              +- * Filter (40)
               :                 +- * ColumnarToRow (39)
               :                    +- Scan parquet default.customer_address (38)
               +- * Filter (48)
                  +- * ColumnarToRow (47)
                     +- Scan parquet default.customer_demographics (46)


(1) Scan parquet default.customer
Output [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 8]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(3) Filter [codegen id : 8]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Condition : (isnotnull(c_current_addr_sk#3) AND isnotnull(c_current_cdemo_sk#2))

(4) Scan parquet default.store_sales
Output [2]: [ss_customer_sk#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#5), dynamicpruningexpression(true)]
ReadSchema: struct<ss_customer_sk:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [ss_customer_sk#4, ss_sold_date_sk#5]

(6) BroadcastExchange
Input [2]: [ss_customer_sk#4, ss_sold_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#6]

(7) Scan parquet default.date_dim
Output [3]: [d_date_sk#7, d_year#8, d_moy#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,6), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(8) ColumnarToRow
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]

(9) Filter
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]
Condition : (((((isnotnull(d_year#8) AND isnotnull(d_moy#9)) AND (d_year#8 = 2001)) AND (d_moy#9 >= 4)) AND (d_moy#9 <= 6)) AND isnotnull(d_date_sk#7))

(10) Project
Output [1]: [d_date_sk#7]
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]

(11) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#5]
Right keys [1]: [d_date_sk#7]
Join condition: None

(12) Project [codegen id : 2]
Output [1]: [ss_customer_sk#4]
Input [3]: [ss_customer_sk#4, ss_sold_date_sk#5, d_date_sk#7]

(13) BroadcastExchange
Input [1]: [ss_customer_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#10]

(14) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#4]
Join condition: None

(15) Scan parquet default.web_sales
Output [2]: [ws_bill_customer_sk#11, ws_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#12), dynamicpruningexpression(true)]
ReadSchema: struct<ws_bill_customer_sk:int>

(16) ColumnarToRow [codegen id : 3]
Input [2]: [ws_bill_customer_sk#11, ws_sold_date_sk#12]

(17) BroadcastExchange
Input [2]: [ws_bill_customer_sk#11, ws_sold_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#13]

(18) Scan parquet default.date_dim
Output [3]: [d_date_sk#7, d_year#8, d_moy#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,6), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(19) ColumnarToRow
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]

(20) Filter
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]
Condition : (((((isnotnull(d_year#8) AND isnotnull(d_moy#9)) AND (d_year#8 = 2001)) AND (d_moy#9 >= 4)) AND (d_moy#9 <= 6)) AND isnotnull(d_date_sk#7))

(21) Project
Output [1]: [d_date_sk#7]
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]

(22) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ws_sold_date_sk#12]
Right keys [1]: [d_date_sk#7]
Join condition: None

(23) Project [codegen id : 4]
Output [1]: [ws_bill_customer_sk#11]
Input [3]: [ws_bill_customer_sk#11, ws_sold_date_sk#12, d_date_sk#7]

(24) BroadcastExchange
Input [1]: [ws_bill_customer_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(25) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#11]
Join condition: None

(26) Scan parquet default.catalog_sales
Output [2]: [cs_ship_customer_sk#15, cs_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#16), dynamicpruningexpression(true)]
ReadSchema: struct<cs_ship_customer_sk:int>

(27) ColumnarToRow [codegen id : 5]
Input [2]: [cs_ship_customer_sk#15, cs_sold_date_sk#16]

(28) BroadcastExchange
Input [2]: [cs_ship_customer_sk#15, cs_sold_date_sk#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [id=#17]

(29) Scan parquet default.date_dim
Output [3]: [d_date_sk#7, d_year#8, d_moy#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,6), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(30) ColumnarToRow
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]

(31) Filter
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]
Condition : (((((isnotnull(d_year#8) AND isnotnull(d_moy#9)) AND (d_year#8 = 2001)) AND (d_moy#9 >= 4)) AND (d_moy#9 <= 6)) AND isnotnull(d_date_sk#7))

(32) Project
Output [1]: [d_date_sk#7]
Input [3]: [d_date_sk#7, d_year#8, d_moy#9]

(33) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#7]
Join condition: None

(34) Project [codegen id : 6]
Output [1]: [cs_ship_customer_sk#15]
Input [3]: [cs_ship_customer_sk#15, cs_sold_date_sk#16, d_date_sk#7]

(35) BroadcastExchange
Input [1]: [cs_ship_customer_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#18]

(36) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [cs_ship_customer_sk#15]
Join condition: None

(37) Project [codegen id : 8]
Output [2]: [c_current_cdemo_sk#2, c_current_addr_sk#3]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(38) Scan parquet default.customer_address
Output [2]: [ca_address_sk#19, ca_state#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [KY,GA,NM]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(39) ColumnarToRow [codegen id : 7]
Input [2]: [ca_address_sk#19, ca_state#20]

(40) Filter [codegen id : 7]
Input [2]: [ca_address_sk#19, ca_state#20]
Condition : (ca_state#20 IN (KY,GA,NM) AND isnotnull(ca_address_sk#19))

(41) Project [codegen id : 7]
Output [1]: [ca_address_sk#19]
Input [2]: [ca_address_sk#19, ca_state#20]

(42) BroadcastExchange
Input [1]: [ca_address_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21]

(43) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [c_current_addr_sk#3]
Right keys [1]: [ca_address_sk#19]
Join condition: None

(44) Project [codegen id : 8]
Output [1]: [c_current_cdemo_sk#2]
Input [3]: [c_current_cdemo_sk#2, c_current_addr_sk#3, ca_address_sk#19]

(45) BroadcastExchange
Input [1]: [c_current_cdemo_sk#2]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22]

(46) Scan parquet default.customer_demographics
Output [6]: [cd_demo_sk#23, cd_gender#24, cd_marital_status#25, cd_education_status#26, cd_purchase_estimate#27, cd_credit_rating#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_purchase_estimate:int,cd_credit_rating:string>

(47) ColumnarToRow
Input [6]: [cd_demo_sk#23, cd_gender#24, cd_marital_status#25, cd_education_status#26, cd_purchase_estimate#27, cd_credit_rating#28]

(48) Filter
Input [6]: [cd_demo_sk#23, cd_gender#24, cd_marital_status#25, cd_education_status#26, cd_purchase_estimate#27, cd_credit_rating#28]
Condition : isnotnull(cd_demo_sk#23)

(49) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_current_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#23]
Join condition: None

(50) Project [codegen id : 9]
Output [5]: [cd_gender#24, cd_marital_status#25, cd_education_status#26, cd_purchase_estimate#27, cd_credit_rating#28]
Input [7]: [c_current_cdemo_sk#2, cd_demo_sk#23, cd_gender#24, cd_marital_status#25, cd_education_status#26, cd_purchase_estimate#27, cd_credit_rating#28]

(51) HashAggregate [codegen id : 9]
Input [5]: [cd_gender#24, cd_marital_status#25, cd_education_status#26, cd_purchase_estimate#27, cd_credit_rating#28]
Keys [5]: [cd_gender#24, cd_marital_status#25, cd_education_status#26, cd_purchase_estimate#27, cd_credit_rating#28]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#29]
Results [6]: [cd_gender#24, cd_marital_status#25, cd_education_status#26, cd_purchase_estimate#27, cd_credit_rating#28, count#30]

(52) Exchange
Input [6]: [cd_gender#24, cd_marital_status#25, cd_education_status#26, cd_purchase_estimate#27, cd_credit_rating#28, count#30]
Arguments: hashpartitioning(cd_gender#24, cd_marital_status#25, cd_education_status#26, cd_purchase_estimate#27, cd_credit_rating#28, 5), ENSURE_REQUIREMENTS, [id=#31]

(53) HashAggregate [codegen id : 10]
Input [6]: [cd_gender#24, cd_marital_status#25, cd_education_status#26, cd_purchase_estimate#27, cd_credit_rating#28, count#30]
Keys [5]: [cd_gender#24, cd_marital_status#25, cd_education_status#26, cd_purchase_estimate#27, cd_credit_rating#28]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#32]
Results [8]: [cd_gender#24, cd_marital_status#25, cd_education_status#26, count(1)#32 AS cnt1#33, cd_purchase_estimate#27, count(1)#32 AS cnt2#34, cd_credit_rating#28, count(1)#32 AS cnt3#35]

(54) TakeOrderedAndProject
Input [8]: [cd_gender#24, cd_marital_status#25, cd_education_status#26, cnt1#33, cd_purchase_estimate#27, cnt2#34, cd_credit_rating#28, cnt3#35]
Arguments: 100, [cd_gender#24 ASC NULLS FIRST, cd_marital_status#25 ASC NULLS FIRST, cd_education_status#26 ASC NULLS FIRST, cd_purchase_estimate#27 ASC NULLS FIRST, cd_credit_rating#28 ASC NULLS FIRST], [cd_gender#24, cd_marital_status#25, cd_education_status#26, cnt1#33, cd_purchase_estimate#27, cnt2#34, cd_credit_rating#28, cnt3#35]

