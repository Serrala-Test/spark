== Physical Plan ==
TakeOrderedAndProject (54)
+- * HashAggregate (53)
   +- Exchange (52)
      +- * HashAggregate (51)
         +- * Project (50)
            +- * BroadcastHashJoin Inner BuildLeft (49)
               :- BroadcastExchange (45)
               :  +- * Project (44)
               :     +- * BroadcastHashJoin Inner BuildLeft (43)
               :        :- BroadcastExchange (5)
               :        :  +- * Project (4)
               :        :     +- * Filter (3)
               :        :        +- * ColumnarToRow (2)
               :        :           +- Scan parquet default.customer_address (1)
               :        +- * Project (42)
               :           +- SortMergeJoin LeftAnti (41)
               :              :- SortMergeJoin LeftAnti (32)
               :              :  :- SortMergeJoin LeftSemi (23)
               :              :  :  :- * Sort (10)
               :              :  :  :  +- Exchange (9)
               :              :  :  :     +- * Filter (8)
               :              :  :  :        +- * ColumnarToRow (7)
               :              :  :  :           +- Scan parquet default.customer (6)
               :              :  :  +- * Sort (22)
               :              :  :     +- Exchange (21)
               :              :  :        +- * Project (20)
               :              :  :           +- * BroadcastHashJoin Inner BuildRight (19)
               :              :  :              :- * Filter (13)
               :              :  :              :  +- * ColumnarToRow (12)
               :              :  :              :     +- Scan parquet default.store_sales (11)
               :              :  :              +- BroadcastExchange (18)
               :              :  :                 +- * Project (17)
               :              :  :                    +- * Filter (16)
               :              :  :                       +- * ColumnarToRow (15)
               :              :  :                          +- Scan parquet default.date_dim (14)
               :              :  +- * Sort (31)
               :              :     +- Exchange (30)
               :              :        +- * Project (29)
               :              :           +- * BroadcastHashJoin Inner BuildRight (28)
               :              :              :- * Filter (26)
               :              :              :  +- * ColumnarToRow (25)
               :              :              :     +- Scan parquet default.web_sales (24)
               :              :              +- ReusedExchange (27)
               :              +- * Sort (40)
               :                 +- Exchange (39)
               :                    +- * Project (38)
               :                       +- * BroadcastHashJoin Inner BuildRight (37)
               :                          :- * Filter (35)
               :                          :  +- * ColumnarToRow (34)
               :                          :     +- Scan parquet default.catalog_sales (33)
               :                          +- ReusedExchange (36)
               +- * Filter (48)
                  +- * ColumnarToRow (47)
                     +- Scan parquet default.customer_demographics (46)


(1) Scan parquet default.customer_address
Output [2]: [ca_address_sk#1, ca_state#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [KY,GA,NM]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(2) ColumnarToRow [codegen id : 1]
Input [2]: [ca_address_sk#1, ca_state#2]

(3) Filter [codegen id : 1]
Input [2]: [ca_address_sk#1, ca_state#2]
Condition : (ca_state#2 IN (KY,GA,NM) AND isnotnull(ca_address_sk#1))

(4) Project [codegen id : 1]
Output [1]: [ca_address_sk#1]
Input [2]: [ca_address_sk#1, ca_state#2]

(5) BroadcastExchange
Input [1]: [ca_address_sk#1]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#3]

(6) Scan parquet default.customer
Output [3]: [c_customer_sk#4, c_current_cdemo_sk#5, c_current_addr_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(7) ColumnarToRow [codegen id : 2]
Input [3]: [c_customer_sk#4, c_current_cdemo_sk#5, c_current_addr_sk#6]

(8) Filter [codegen id : 2]
Input [3]: [c_customer_sk#4, c_current_cdemo_sk#5, c_current_addr_sk#6]
Condition : (isnotnull(c_current_addr_sk#6) AND isnotnull(c_current_cdemo_sk#5))

(9) Exchange
Input [3]: [c_customer_sk#4, c_current_cdemo_sk#5, c_current_addr_sk#6]
Arguments: hashpartitioning(c_customer_sk#4, 5), true, [id=#7]

(10) Sort [codegen id : 3]
Input [3]: [c_customer_sk#4, c_current_cdemo_sk#5, c_current_addr_sk#6]
Arguments: [c_customer_sk#4 ASC NULLS FIRST], false, 0

(11) Scan parquet default.store_sales
Output [2]: [ss_sold_date_sk#8, ss_customer_sk#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int>

(12) ColumnarToRow [codegen id : 5]
Input [2]: [ss_sold_date_sk#8, ss_customer_sk#9]

(13) Filter [codegen id : 5]
Input [2]: [ss_sold_date_sk#8, ss_customer_sk#9]
Condition : isnotnull(ss_sold_date_sk#8)

(14) Scan parquet default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,6), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(15) ColumnarToRow [codegen id : 4]
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]

(16) Filter [codegen id : 4]
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]
Condition : (((((isnotnull(d_year#11) AND isnotnull(d_moy#12)) AND (d_year#11 = 2001)) AND (d_moy#12 >= 4)) AND (d_moy#12 <= 6)) AND isnotnull(d_date_sk#10))

(17) Project [codegen id : 4]
Output [1]: [d_date_sk#10]
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]

(18) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13]

(19) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#10]
Join condition: None

(20) Project [codegen id : 5]
Output [1]: [ss_customer_sk#9]
Input [3]: [ss_sold_date_sk#8, ss_customer_sk#9, d_date_sk#10]

(21) Exchange
Input [1]: [ss_customer_sk#9]
Arguments: hashpartitioning(ss_customer_sk#9, 5), true, [id=#14]

(22) Sort [codegen id : 6]
Input [1]: [ss_customer_sk#9]
Arguments: [ss_customer_sk#9 ASC NULLS FIRST], false, 0

(23) SortMergeJoin
Left keys [1]: [c_customer_sk#4]
Right keys [1]: [ss_customer_sk#9]
Join condition: None

(24) Scan parquet default.web_sales
Output [2]: [ws_sold_date_sk#15, ws_bill_customer_sk#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int>

(25) ColumnarToRow [codegen id : 8]
Input [2]: [ws_sold_date_sk#15, ws_bill_customer_sk#16]

(26) Filter [codegen id : 8]
Input [2]: [ws_sold_date_sk#15, ws_bill_customer_sk#16]
Condition : isnotnull(ws_sold_date_sk#15)

(27) ReusedExchange [Reuses operator id: 18]
Output [1]: [d_date_sk#10]

(28) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ws_sold_date_sk#15]
Right keys [1]: [d_date_sk#10]
Join condition: None

(29) Project [codegen id : 8]
Output [1]: [ws_bill_customer_sk#16]
Input [3]: [ws_sold_date_sk#15, ws_bill_customer_sk#16, d_date_sk#10]

(30) Exchange
Input [1]: [ws_bill_customer_sk#16]
Arguments: hashpartitioning(ws_bill_customer_sk#16, 5), true, [id=#17]

(31) Sort [codegen id : 9]
Input [1]: [ws_bill_customer_sk#16]
Arguments: [ws_bill_customer_sk#16 ASC NULLS FIRST], false, 0

(32) SortMergeJoin
Left keys [1]: [c_customer_sk#4]
Right keys [1]: [ws_bill_customer_sk#16]
Join condition: None

(33) Scan parquet default.catalog_sales
Output [2]: [cs_sold_date_sk#18, cs_ship_customer_sk#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_ship_customer_sk:int>

(34) ColumnarToRow [codegen id : 11]
Input [2]: [cs_sold_date_sk#18, cs_ship_customer_sk#19]

(35) Filter [codegen id : 11]
Input [2]: [cs_sold_date_sk#18, cs_ship_customer_sk#19]
Condition : isnotnull(cs_sold_date_sk#18)

(36) ReusedExchange [Reuses operator id: 18]
Output [1]: [d_date_sk#10]

(37) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#10]
Join condition: None

(38) Project [codegen id : 11]
Output [1]: [cs_ship_customer_sk#19]
Input [3]: [cs_sold_date_sk#18, cs_ship_customer_sk#19, d_date_sk#10]

(39) Exchange
Input [1]: [cs_ship_customer_sk#19]
Arguments: hashpartitioning(cs_ship_customer_sk#19, 5), true, [id=#20]

(40) Sort [codegen id : 12]
Input [1]: [cs_ship_customer_sk#19]
Arguments: [cs_ship_customer_sk#19 ASC NULLS FIRST], false, 0

(41) SortMergeJoin
Left keys [1]: [c_customer_sk#4]
Right keys [1]: [cs_ship_customer_sk#19]
Join condition: None

(42) Project
Output [2]: [c_current_cdemo_sk#5, c_current_addr_sk#6]
Input [3]: [c_customer_sk#4, c_current_cdemo_sk#5, c_current_addr_sk#6]

(43) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ca_address_sk#1]
Right keys [1]: [c_current_addr_sk#6]
Join condition: None

(44) Project [codegen id : 13]
Output [1]: [c_current_cdemo_sk#5]
Input [3]: [ca_address_sk#1, c_current_cdemo_sk#5, c_current_addr_sk#6]

(45) BroadcastExchange
Input [1]: [c_current_cdemo_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21]

(46) Scan parquet default.customer_demographics
Output [6]: [cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_purchase_estimate:int,cd_credit_rating:string>

(47) ColumnarToRow
Input [6]: [cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27]

(48) Filter
Input [6]: [cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27]
Condition : isnotnull(cd_demo_sk#22)

(49) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [c_current_cdemo_sk#5]
Right keys [1]: [cd_demo_sk#22]
Join condition: None

(50) Project [codegen id : 14]
Output [5]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27]
Input [7]: [c_current_cdemo_sk#5, cd_demo_sk#22, cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27]

(51) HashAggregate [codegen id : 14]
Input [5]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27]
Keys [5]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#28]
Results [6]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, count#29]

(52) Exchange
Input [6]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, count#29]
Arguments: hashpartitioning(cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, 5), true, [id=#30]

(53) HashAggregate [codegen id : 15]
Input [6]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27, count#29]
Keys [5]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cd_purchase_estimate#26, cd_credit_rating#27]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#31]
Results [8]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, count(1)#31 AS cnt1#32, cd_purchase_estimate#26, count(1)#31 AS cnt2#33, cd_credit_rating#27, count(1)#31 AS cnt3#34]

(54) TakeOrderedAndProject
Input [8]: [cd_gender#23, cd_marital_status#24, cd_education_status#25, cnt1#32, cd_purchase_estimate#26, cnt2#33, cd_credit_rating#27, cnt3#34]
Arguments: 100, [cd_gender#23 ASC NULLS FIRST, cd_marital_status#24 ASC NULLS FIRST, cd_education_status#25 ASC NULLS FIRST, cd_purchase_estimate#26 ASC NULLS FIRST, cd_credit_rating#27 ASC NULLS FIRST], [cd_gender#23, cd_marital_status#24, cd_education_status#25, cnt1#32, cd_purchase_estimate#26, cnt2#33, cd_credit_rating#27, cnt3#34]

