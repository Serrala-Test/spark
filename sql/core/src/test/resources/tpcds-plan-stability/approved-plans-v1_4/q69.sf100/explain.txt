== Physical Plan ==
TakeOrderedAndProject (51)
+- * HashAggregate (50)
   +- Exchange (49)
      +- * HashAggregate (48)
         +- * Project (47)
            +- * BroadcastHashJoin Inner BuildLeft (46)
               :- BroadcastExchange (42)
               :  +- * Project (41)
               :     +- * BroadcastHashJoin Inner BuildRight (40)
               :        :- * Project (34)
               :        :  +- * BroadcastHashJoin LeftAnti BuildRight (33)
               :        :     :- * BroadcastHashJoin LeftAnti BuildRight (23)
               :        :     :  :- * BroadcastHashJoin LeftSemi BuildRight (13)
               :        :     :  :  :- * Filter (3)
               :        :     :  :  :  +- * ColumnarToRow (2)
               :        :     :  :  :     +- Scan parquet default.customer (1)
               :        :     :  :  +- BroadcastExchange (12)
               :        :     :  :     +- * HashAggregate (11)
               :        :     :  :        +- Exchange (10)
               :        :     :  :           +- * HashAggregate (9)
               :        :     :  :              +- * Project (8)
               :        :     :  :                 +- * BroadcastHashJoin Inner BuildRight (7)
               :        :     :  :                    :- * ColumnarToRow (5)
               :        :     :  :                    :  +- Scan parquet default.store_sales (4)
               :        :     :  :                    +- ReusedExchange (6)
               :        :     :  +- BroadcastExchange (22)
               :        :     :     +- * HashAggregate (21)
               :        :     :        +- Exchange (20)
               :        :     :           +- * HashAggregate (19)
               :        :     :              +- * Project (18)
               :        :     :                 +- * BroadcastHashJoin Inner BuildRight (17)
               :        :     :                    :- * ColumnarToRow (15)
               :        :     :                    :  +- Scan parquet default.web_sales (14)
               :        :     :                    +- ReusedExchange (16)
               :        :     +- BroadcastExchange (32)
               :        :        +- * HashAggregate (31)
               :        :           +- Exchange (30)
               :        :              +- * HashAggregate (29)
               :        :                 +- * Project (28)
               :        :                    +- * BroadcastHashJoin Inner BuildRight (27)
               :        :                       :- * ColumnarToRow (25)
               :        :                       :  +- Scan parquet default.catalog_sales (24)
               :        :                       +- ReusedExchange (26)
               :        +- BroadcastExchange (39)
               :           +- * Project (38)
               :              +- * Filter (37)
               :                 +- * ColumnarToRow (36)
               :                    +- Scan parquet default.customer_address (35)
               +- * Filter (45)
                  +- * ColumnarToRow (44)
                     +- Scan parquet default.customer_demographics (43)


(1) Scan parquet default.customer
Output [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 11]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(3) Filter [codegen id : 11]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Condition : (isnotnull(c_current_addr_sk#3) AND isnotnull(c_current_cdemo_sk#2))

(4) Scan parquet default.store_sales
Output [2]: [ss_customer_sk#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#5), dynamicpruningexpression(ss_sold_date_sk#5 IN dynamicpruning#6)]
ReadSchema: struct<ss_customer_sk:int>

(5) ColumnarToRow [codegen id : 2]
Input [2]: [ss_customer_sk#4, ss_sold_date_sk#5]

(6) ReusedExchange [Reuses operator id: 56]
Output [1]: [d_date_sk#7]

(7) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#5]
Right keys [1]: [d_date_sk#7]
Join condition: None

(8) Project [codegen id : 2]
Output [1]: [ss_customer_sk#4]
Input [3]: [ss_customer_sk#4, ss_sold_date_sk#5, d_date_sk#7]

(9) HashAggregate [codegen id : 2]
Input [1]: [ss_customer_sk#4]
Keys [1]: [ss_customer_sk#4]
Functions: []
Aggregate Attributes: []
Results [1]: [ss_customer_sk#4]

(10) Exchange
Input [1]: [ss_customer_sk#4]
Arguments: hashpartitioning(ss_customer_sk#4, 5), ENSURE_REQUIREMENTS, [id=#8]

(11) HashAggregate [codegen id : 3]
Input [1]: [ss_customer_sk#4]
Keys [1]: [ss_customer_sk#4]
Functions: []
Aggregate Attributes: []
Results [1]: [ss_customer_sk#4]

(12) BroadcastExchange
Input [1]: [ss_customer_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#9]

(13) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#4]
Join condition: None

(14) Scan parquet default.web_sales
Output [2]: [ws_bill_customer_sk#10, ws_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#11), dynamicpruningexpression(ws_sold_date_sk#11 IN dynamicpruning#6)]
ReadSchema: struct<ws_bill_customer_sk:int>

(15) ColumnarToRow [codegen id : 5]
Input [2]: [ws_bill_customer_sk#10, ws_sold_date_sk#11]

(16) ReusedExchange [Reuses operator id: 56]
Output [1]: [d_date_sk#12]

(17) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ws_sold_date_sk#11]
Right keys [1]: [d_date_sk#12]
Join condition: None

(18) Project [codegen id : 5]
Output [1]: [ws_bill_customer_sk#10]
Input [3]: [ws_bill_customer_sk#10, ws_sold_date_sk#11, d_date_sk#12]

(19) HashAggregate [codegen id : 5]
Input [1]: [ws_bill_customer_sk#10]
Keys [1]: [ws_bill_customer_sk#10]
Functions: []
Aggregate Attributes: []
Results [1]: [ws_bill_customer_sk#10]

(20) Exchange
Input [1]: [ws_bill_customer_sk#10]
Arguments: hashpartitioning(ws_bill_customer_sk#10, 5), ENSURE_REQUIREMENTS, [id=#13]

(21) HashAggregate [codegen id : 6]
Input [1]: [ws_bill_customer_sk#10]
Keys [1]: [ws_bill_customer_sk#10]
Functions: []
Aggregate Attributes: []
Results [1]: [ws_bill_customer_sk#10]

(22) BroadcastExchange
Input [1]: [ws_bill_customer_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(23) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#10]
Join condition: None

(24) Scan parquet default.catalog_sales
Output [2]: [cs_ship_customer_sk#15, cs_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#16), dynamicpruningexpression(cs_sold_date_sk#16 IN dynamicpruning#6)]
ReadSchema: struct<cs_ship_customer_sk:int>

(25) ColumnarToRow [codegen id : 8]
Input [2]: [cs_ship_customer_sk#15, cs_sold_date_sk#16]

(26) ReusedExchange [Reuses operator id: 56]
Output [1]: [d_date_sk#17]

(27) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#17]
Join condition: None

(28) Project [codegen id : 8]
Output [1]: [cs_ship_customer_sk#15]
Input [3]: [cs_ship_customer_sk#15, cs_sold_date_sk#16, d_date_sk#17]

(29) HashAggregate [codegen id : 8]
Input [1]: [cs_ship_customer_sk#15]
Keys [1]: [cs_ship_customer_sk#15]
Functions: []
Aggregate Attributes: []
Results [1]: [cs_ship_customer_sk#15]

(30) Exchange
Input [1]: [cs_ship_customer_sk#15]
Arguments: hashpartitioning(cs_ship_customer_sk#15, 5), ENSURE_REQUIREMENTS, [id=#18]

(31) HashAggregate [codegen id : 9]
Input [1]: [cs_ship_customer_sk#15]
Keys [1]: [cs_ship_customer_sk#15]
Functions: []
Aggregate Attributes: []
Results [1]: [cs_ship_customer_sk#15]

(32) BroadcastExchange
Input [1]: [cs_ship_customer_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#19]

(33) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [cs_ship_customer_sk#15]
Join condition: None

(34) Project [codegen id : 11]
Output [2]: [c_current_cdemo_sk#2, c_current_addr_sk#3]
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]

(35) Scan parquet default.customer_address
Output [2]: [ca_address_sk#20, ca_state#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [GA,KY,NM]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(36) ColumnarToRow [codegen id : 10]
Input [2]: [ca_address_sk#20, ca_state#21]

(37) Filter [codegen id : 10]
Input [2]: [ca_address_sk#20, ca_state#21]
Condition : (ca_state#21 IN (KY,GA,NM) AND isnotnull(ca_address_sk#20))

(38) Project [codegen id : 10]
Output [1]: [ca_address_sk#20]
Input [2]: [ca_address_sk#20, ca_state#21]

(39) BroadcastExchange
Input [1]: [ca_address_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22]

(40) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [c_current_addr_sk#3]
Right keys [1]: [ca_address_sk#20]
Join condition: None

(41) Project [codegen id : 11]
Output [1]: [c_current_cdemo_sk#2]
Input [3]: [c_current_cdemo_sk#2, c_current_addr_sk#3, ca_address_sk#20]

(42) BroadcastExchange
Input [1]: [c_current_cdemo_sk#2]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#23]

(43) Scan parquet default.customer_demographics
Output [6]: [cd_demo_sk#24, cd_gender#25, cd_marital_status#26, cd_education_status#27, cd_purchase_estimate#28, cd_credit_rating#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_purchase_estimate:int,cd_credit_rating:string>

(44) ColumnarToRow
Input [6]: [cd_demo_sk#24, cd_gender#25, cd_marital_status#26, cd_education_status#27, cd_purchase_estimate#28, cd_credit_rating#29]

(45) Filter
Input [6]: [cd_demo_sk#24, cd_gender#25, cd_marital_status#26, cd_education_status#27, cd_purchase_estimate#28, cd_credit_rating#29]
Condition : isnotnull(cd_demo_sk#24)

(46) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [c_current_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#24]
Join condition: None

(47) Project [codegen id : 12]
Output [5]: [cd_gender#25, cd_marital_status#26, cd_education_status#27, cd_purchase_estimate#28, cd_credit_rating#29]
Input [7]: [c_current_cdemo_sk#2, cd_demo_sk#24, cd_gender#25, cd_marital_status#26, cd_education_status#27, cd_purchase_estimate#28, cd_credit_rating#29]

(48) HashAggregate [codegen id : 12]
Input [5]: [cd_gender#25, cd_marital_status#26, cd_education_status#27, cd_purchase_estimate#28, cd_credit_rating#29]
Keys [5]: [cd_gender#25, cd_marital_status#26, cd_education_status#27, cd_purchase_estimate#28, cd_credit_rating#29]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#30]
Results [6]: [cd_gender#25, cd_marital_status#26, cd_education_status#27, cd_purchase_estimate#28, cd_credit_rating#29, count#31]

(49) Exchange
Input [6]: [cd_gender#25, cd_marital_status#26, cd_education_status#27, cd_purchase_estimate#28, cd_credit_rating#29, count#31]
Arguments: hashpartitioning(cd_gender#25, cd_marital_status#26, cd_education_status#27, cd_purchase_estimate#28, cd_credit_rating#29, 5), ENSURE_REQUIREMENTS, [id=#32]

(50) HashAggregate [codegen id : 13]
Input [6]: [cd_gender#25, cd_marital_status#26, cd_education_status#27, cd_purchase_estimate#28, cd_credit_rating#29, count#31]
Keys [5]: [cd_gender#25, cd_marital_status#26, cd_education_status#27, cd_purchase_estimate#28, cd_credit_rating#29]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#33]
Results [8]: [cd_gender#25, cd_marital_status#26, cd_education_status#27, count(1)#33 AS cnt1#34, cd_purchase_estimate#28, count(1)#33 AS cnt2#35, cd_credit_rating#29, count(1)#33 AS cnt3#36]

(51) TakeOrderedAndProject
Input [8]: [cd_gender#25, cd_marital_status#26, cd_education_status#27, cnt1#34, cd_purchase_estimate#28, cnt2#35, cd_credit_rating#29, cnt3#36]
Arguments: 100, [cd_gender#25 ASC NULLS FIRST, cd_marital_status#26 ASC NULLS FIRST, cd_education_status#27 ASC NULLS FIRST, cd_purchase_estimate#28 ASC NULLS FIRST, cd_credit_rating#29 ASC NULLS FIRST], [cd_gender#25, cd_marital_status#26, cd_education_status#27, cnt1#34, cd_purchase_estimate#28, cnt2#35, cd_credit_rating#29, cnt3#36]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (56)
+- * Project (55)
   +- * Filter (54)
      +- * ColumnarToRow (53)
         +- Scan parquet default.date_dim (52)


(52) Scan parquet default.date_dim
Output [3]: [d_date_sk#7, d_year#37, d_moy#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,6), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(53) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#7, d_year#37, d_moy#38]

(54) Filter [codegen id : 1]
Input [3]: [d_date_sk#7, d_year#37, d_moy#38]
Condition : (((((isnotnull(d_year#37) AND isnotnull(d_moy#38)) AND (d_year#37 = 2001)) AND (d_moy#38 >= 4)) AND (d_moy#38 <= 6)) AND isnotnull(d_date_sk#7))

(55) Project [codegen id : 1]
Output [1]: [d_date_sk#7]
Input [3]: [d_date_sk#7, d_year#37, d_moy#38]

(56) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#39]

Subquery:2 Hosting operator id = 14 Hosting Expression = ws_sold_date_sk#11 IN dynamicpruning#6

Subquery:3 Hosting operator id = 24 Hosting Expression = cs_sold_date_sk#16 IN dynamicpruning#6


