== Physical Plan ==
TakeOrderedAndProject (45)
+- * Filter (44)
   +- Window (43)
      +- * Sort (42)
         +- Exchange (41)
            +- * Project (40)
               +- SortMergeJoin FullOuter (39)
                  :- * Sort (19)
                  :  +- Exchange (18)
                  :     +- * Project (17)
                  :        +- Window (16)
                  :           +- * Sort (15)
                  :              +- Exchange (14)
                  :                 +- * HashAggregate (13)
                  :                    +- Exchange (12)
                  :                       +- * HashAggregate (11)
                  :                          +- * Project (10)
                  :                             +- * BroadcastHashJoin Inner BuildLeft (9)
                  :                                :- BroadcastExchange (4)
                  :                                :  +- * Filter (3)
                  :                                :     +- * ColumnarToRow (2)
                  :                                :        +- Scan parquet default.web_sales (1)
                  :                                +- * Project (8)
                  :                                   +- * Filter (7)
                  :                                      +- * ColumnarToRow (6)
                  :                                         +- Scan parquet default.date_dim (5)
                  +- * Sort (38)
                     +- Exchange (37)
                        +- * Project (36)
                           +- Window (35)
                              +- * Sort (34)
                                 +- Exchange (33)
                                    +- * HashAggregate (32)
                                       +- Exchange (31)
                                          +- * HashAggregate (30)
                                             +- * Project (29)
                                                +- * BroadcastHashJoin Inner BuildLeft (28)
                                                   :- BroadcastExchange (23)
                                                   :  +- * Filter (22)
                                                   :     +- * ColumnarToRow (21)
                                                   :        +- Scan parquet default.store_sales (20)
                                                   +- * Project (27)
                                                      +- * Filter (26)
                                                         +- * ColumnarToRow (25)
                                                            +- Scan parquet default.date_dim (24)


(1) Scan parquet default.web_sales
Output [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#3), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]

(3) Filter [codegen id : 1]
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Condition : isnotnull(ws_item_sk#1)

(4) BroadcastExchange
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#4]

(5) Scan parquet default.date_dim
Output [3]: [d_date_sk#5, d_date#6, d_month_seq#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(6) ColumnarToRow
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#7]

(7) Filter
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#7]
Condition : (((isnotnull(d_month_seq#7) AND (d_month_seq#7 >= 1200)) AND (d_month_seq#7 <= 1211)) AND isnotnull(d_date_sk#5))

(8) Project
Output [2]: [d_date_sk#5, d_date#6]
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#7]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join condition: None

(10) Project [codegen id : 2]
Output [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]
Input [5]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3, d_date_sk#5, d_date#6]

(11) HashAggregate [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum#8]
Results [3]: [ws_item_sk#1, d_date#6, sum#9]

(12) Exchange
Input [3]: [ws_item_sk#1, d_date#6, sum#9]
Arguments: hashpartitioning(ws_item_sk#1, d_date#6, 5), ENSURE_REQUIREMENTS, [id=#10]

(13) HashAggregate [codegen id : 3]
Input [3]: [ws_item_sk#1, d_date#6, sum#9]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_sales_price#2))#11]
Results [4]: [ws_item_sk#1 AS item_sk#12, d_date#6, MakeDecimal(sum(UnscaledValue(ws_sales_price#2))#11,17,2) AS _w0#13, ws_item_sk#1]

(14) Exchange
Input [4]: [item_sk#12, d_date#6, _w0#13, ws_item_sk#1]
Arguments: hashpartitioning(ws_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#14]

(15) Sort [codegen id : 4]
Input [4]: [item_sk#12, d_date#6, _w0#13, ws_item_sk#1]
Arguments: [ws_item_sk#1 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST], false, 0

(16) Window
Input [4]: [item_sk#12, d_date#6, _w0#13, ws_item_sk#1]
Arguments: [sum(_w0#13) windowspecdefinition(ws_item_sk#1, d_date#6 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#15], [ws_item_sk#1], [d_date#6 ASC NULLS FIRST]

(17) Project [codegen id : 5]
Output [3]: [item_sk#12, d_date#6, cume_sales#15]
Input [5]: [item_sk#12, d_date#6, _w0#13, ws_item_sk#1, cume_sales#15]

(18) Exchange
Input [3]: [item_sk#12, d_date#6, cume_sales#15]
Arguments: hashpartitioning(item_sk#12, d_date#6, 5), ENSURE_REQUIREMENTS, [id=#16]

(19) Sort [codegen id : 6]
Input [3]: [item_sk#12, d_date#6, cume_sales#15]
Arguments: [item_sk#12 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST], false, 0

(20) Scan parquet default.store_sales
Output [3]: [ss_item_sk#17, ss_sales_price#18, ss_sold_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#19), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_sales_price:decimal(7,2)>

(21) ColumnarToRow [codegen id : 7]
Input [3]: [ss_item_sk#17, ss_sales_price#18, ss_sold_date_sk#19]

(22) Filter [codegen id : 7]
Input [3]: [ss_item_sk#17, ss_sales_price#18, ss_sold_date_sk#19]
Condition : isnotnull(ss_item_sk#17)

(23) BroadcastExchange
Input [3]: [ss_item_sk#17, ss_sales_price#18, ss_sold_date_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#20]

(24) Scan parquet default.date_dim
Output [3]: [d_date_sk#21, d_date#22, d_month_seq#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(25) ColumnarToRow
Input [3]: [d_date_sk#21, d_date#22, d_month_seq#23]

(26) Filter
Input [3]: [d_date_sk#21, d_date#22, d_month_seq#23]
Condition : (((isnotnull(d_month_seq#23) AND (d_month_seq#23 >= 1200)) AND (d_month_seq#23 <= 1211)) AND isnotnull(d_date_sk#21))

(27) Project
Output [2]: [d_date_sk#21, d_date#22]
Input [3]: [d_date_sk#21, d_date#22, d_month_seq#23]

(28) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_sold_date_sk#19]
Right keys [1]: [d_date_sk#21]
Join condition: None

(29) Project [codegen id : 8]
Output [3]: [ss_item_sk#17, ss_sales_price#18, d_date#22]
Input [5]: [ss_item_sk#17, ss_sales_price#18, ss_sold_date_sk#19, d_date_sk#21, d_date#22]

(30) HashAggregate [codegen id : 8]
Input [3]: [ss_item_sk#17, ss_sales_price#18, d_date#22]
Keys [2]: [ss_item_sk#17, d_date#22]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#18))]
Aggregate Attributes [1]: [sum#24]
Results [3]: [ss_item_sk#17, d_date#22, sum#25]

(31) Exchange
Input [3]: [ss_item_sk#17, d_date#22, sum#25]
Arguments: hashpartitioning(ss_item_sk#17, d_date#22, 5), ENSURE_REQUIREMENTS, [id=#26]

(32) HashAggregate [codegen id : 9]
Input [3]: [ss_item_sk#17, d_date#22, sum#25]
Keys [2]: [ss_item_sk#17, d_date#22]
Functions [1]: [sum(UnscaledValue(ss_sales_price#18))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#18))#27]
Results [4]: [ss_item_sk#17 AS item_sk#28, d_date#22, MakeDecimal(sum(UnscaledValue(ss_sales_price#18))#27,17,2) AS _w0#29, ss_item_sk#17]

(33) Exchange
Input [4]: [item_sk#28, d_date#22, _w0#29, ss_item_sk#17]
Arguments: hashpartitioning(ss_item_sk#17, 5), ENSURE_REQUIREMENTS, [id=#30]

(34) Sort [codegen id : 10]
Input [4]: [item_sk#28, d_date#22, _w0#29, ss_item_sk#17]
Arguments: [ss_item_sk#17 ASC NULLS FIRST, d_date#22 ASC NULLS FIRST], false, 0

(35) Window
Input [4]: [item_sk#28, d_date#22, _w0#29, ss_item_sk#17]
Arguments: [sum(_w0#29) windowspecdefinition(ss_item_sk#17, d_date#22 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#31], [ss_item_sk#17], [d_date#22 ASC NULLS FIRST]

(36) Project [codegen id : 11]
Output [3]: [item_sk#28, d_date#22, cume_sales#31]
Input [5]: [item_sk#28, d_date#22, _w0#29, ss_item_sk#17, cume_sales#31]

(37) Exchange
Input [3]: [item_sk#28, d_date#22, cume_sales#31]
Arguments: hashpartitioning(item_sk#28, d_date#22, 5), ENSURE_REQUIREMENTS, [id=#32]

(38) Sort [codegen id : 12]
Input [3]: [item_sk#28, d_date#22, cume_sales#31]
Arguments: [item_sk#28 ASC NULLS FIRST, d_date#22 ASC NULLS FIRST], false, 0

(39) SortMergeJoin
Left keys [2]: [item_sk#12, d_date#6]
Right keys [2]: [item_sk#28, d_date#22]
Join condition: None

(40) Project [codegen id : 13]
Output [4]: [CASE WHEN isnotnull(item_sk#12) THEN item_sk#12 ELSE item_sk#28 END AS item_sk#33, CASE WHEN isnotnull(d_date#6) THEN d_date#6 ELSE d_date#22 END AS d_date#34, cume_sales#15 AS web_sales#35, cume_sales#31 AS store_sales#36]
Input [6]: [item_sk#12, d_date#6, cume_sales#15, item_sk#28, d_date#22, cume_sales#31]

(41) Exchange
Input [4]: [item_sk#33, d_date#34, web_sales#35, store_sales#36]
Arguments: hashpartitioning(item_sk#33, 5), ENSURE_REQUIREMENTS, [id=#37]

(42) Sort [codegen id : 14]
Input [4]: [item_sk#33, d_date#34, web_sales#35, store_sales#36]
Arguments: [item_sk#33 ASC NULLS FIRST, d_date#34 ASC NULLS FIRST], false, 0

(43) Window
Input [4]: [item_sk#33, d_date#34, web_sales#35, store_sales#36]
Arguments: [max(web_sales#35) windowspecdefinition(item_sk#33, d_date#34 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#38, max(store_sales#36) windowspecdefinition(item_sk#33, d_date#34 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#39], [item_sk#33], [d_date#34 ASC NULLS FIRST]

(44) Filter [codegen id : 15]
Input [6]: [item_sk#33, d_date#34, web_sales#35, store_sales#36, web_cumulative#38, store_cumulative#39]
Condition : ((isnotnull(web_cumulative#38) AND isnotnull(store_cumulative#39)) AND (web_cumulative#38 > store_cumulative#39))

(45) TakeOrderedAndProject
Input [6]: [item_sk#33, d_date#34, web_sales#35, store_sales#36, web_cumulative#38, store_cumulative#39]
Arguments: 100, [item_sk#33 ASC NULLS FIRST, d_date#34 ASC NULLS FIRST], [item_sk#33, d_date#34, web_sales#35, store_sales#36, web_cumulative#38, store_cumulative#39]

