== Physical Plan ==
TakeOrderedAndProject (35)
+- * Filter (34)
   +- Window (33)
      +- * Sort (32)
         +- Exchange (31)
            +- * Project (30)
               +- SortMergeJoin FullOuter (29)
                  :- * Sort (14)
                  :  +- Exchange (13)
                  :     +- * Project (12)
                  :        +- Window (11)
                  :           +- * Sort (10)
                  :              +- Exchange (9)
                  :                 +- * HashAggregate (8)
                  :                    +- Exchange (7)
                  :                       +- * HashAggregate (6)
                  :                          +- * Project (5)
                  :                             +- * BroadcastHashJoin Inner BuildRight (4)
                  :                                :- * ColumnarToRow (2)
                  :                                :  +- Scan parquet default.web_sales (1)
                  :                                +- ReusedExchange (3)
                  +- * Sort (28)
                     +- Exchange (27)
                        +- * Project (26)
                           +- Window (25)
                              +- * Sort (24)
                                 +- Exchange (23)
                                    +- * HashAggregate (22)
                                       +- Exchange (21)
                                          +- * HashAggregate (20)
                                             +- * Project (19)
                                                +- * BroadcastHashJoin Inner BuildRight (18)
                                                   :- * ColumnarToRow (16)
                                                   :  +- Scan parquet default.store_sales (15)
                                                   +- ReusedExchange (17)


(1) Scan parquet default.web_sales
Output [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#3), dynamicpruningexpression(ws_sold_date_sk#3 IN dynamicpruning#4)]
ReadSchema: struct<ws_item_sk:int,ws_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]

(3) ReusedExchange [Reuses operator id: 40]
Output [2]: [d_date_sk#5, d_date#6]

(4) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join condition: None

(5) Project [codegen id : 2]
Output [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]
Input [5]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3, d_date_sk#5, d_date#6]

(6) HashAggregate [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum#7]
Results [3]: [ws_item_sk#1, d_date#6, sum#8]

(7) Exchange
Input [3]: [ws_item_sk#1, d_date#6, sum#8]
Arguments: hashpartitioning(ws_item_sk#1, d_date#6, 5), ENSURE_REQUIREMENTS, [id=#9]

(8) HashAggregate [codegen id : 3]
Input [3]: [ws_item_sk#1, d_date#6, sum#8]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_sales_price#2))#10]
Results [4]: [ws_item_sk#1 AS item_sk#11, d_date#6, MakeDecimal(sum(UnscaledValue(ws_sales_price#2))#10,17,2) AS _w0#12, ws_item_sk#1]

(9) Exchange
Input [4]: [item_sk#11, d_date#6, _w0#12, ws_item_sk#1]
Arguments: hashpartitioning(ws_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#13]

(10) Sort [codegen id : 4]
Input [4]: [item_sk#11, d_date#6, _w0#12, ws_item_sk#1]
Arguments: [ws_item_sk#1 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST], false, 0

(11) Window
Input [4]: [item_sk#11, d_date#6, _w0#12, ws_item_sk#1]
Arguments: [sum(_w0#12) windowspecdefinition(ws_item_sk#1, d_date#6 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#14], [ws_item_sk#1], [d_date#6 ASC NULLS FIRST]

(12) Project [codegen id : 5]
Output [3]: [item_sk#11, d_date#6, cume_sales#14]
Input [5]: [item_sk#11, d_date#6, _w0#12, ws_item_sk#1, cume_sales#14]

(13) Exchange
Input [3]: [item_sk#11, d_date#6, cume_sales#14]
Arguments: hashpartitioning(item_sk#11, d_date#6, 5), ENSURE_REQUIREMENTS, [id=#15]

(14) Sort [codegen id : 6]
Input [3]: [item_sk#11, d_date#6, cume_sales#14]
Arguments: [item_sk#11 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST], false, 0

(15) Scan parquet default.store_sales
Output [3]: [ss_item_sk#16, ss_sales_price#17, ss_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#18), dynamicpruningexpression(ss_sold_date_sk#18 IN dynamicpruning#4)]
ReadSchema: struct<ss_item_sk:int,ss_sales_price:decimal(7,2)>

(16) ColumnarToRow [codegen id : 8]
Input [3]: [ss_item_sk#16, ss_sales_price#17, ss_sold_date_sk#18]

(17) ReusedExchange [Reuses operator id: 40]
Output [2]: [d_date_sk#19, d_date#20]

(18) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_sold_date_sk#18]
Right keys [1]: [d_date_sk#19]
Join condition: None

(19) Project [codegen id : 8]
Output [3]: [ss_item_sk#16, ss_sales_price#17, d_date#20]
Input [5]: [ss_item_sk#16, ss_sales_price#17, ss_sold_date_sk#18, d_date_sk#19, d_date#20]

(20) HashAggregate [codegen id : 8]
Input [3]: [ss_item_sk#16, ss_sales_price#17, d_date#20]
Keys [2]: [ss_item_sk#16, d_date#20]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#17))]
Aggregate Attributes [1]: [sum#21]
Results [3]: [ss_item_sk#16, d_date#20, sum#22]

(21) Exchange
Input [3]: [ss_item_sk#16, d_date#20, sum#22]
Arguments: hashpartitioning(ss_item_sk#16, d_date#20, 5), ENSURE_REQUIREMENTS, [id=#23]

(22) HashAggregate [codegen id : 9]
Input [3]: [ss_item_sk#16, d_date#20, sum#22]
Keys [2]: [ss_item_sk#16, d_date#20]
Functions [1]: [sum(UnscaledValue(ss_sales_price#17))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#17))#24]
Results [4]: [ss_item_sk#16 AS item_sk#25, d_date#20, MakeDecimal(sum(UnscaledValue(ss_sales_price#17))#24,17,2) AS _w0#26, ss_item_sk#16]

(23) Exchange
Input [4]: [item_sk#25, d_date#20, _w0#26, ss_item_sk#16]
Arguments: hashpartitioning(ss_item_sk#16, 5), ENSURE_REQUIREMENTS, [id=#27]

(24) Sort [codegen id : 10]
Input [4]: [item_sk#25, d_date#20, _w0#26, ss_item_sk#16]
Arguments: [ss_item_sk#16 ASC NULLS FIRST, d_date#20 ASC NULLS FIRST], false, 0

(25) Window
Input [4]: [item_sk#25, d_date#20, _w0#26, ss_item_sk#16]
Arguments: [sum(_w0#26) windowspecdefinition(ss_item_sk#16, d_date#20 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#28], [ss_item_sk#16], [d_date#20 ASC NULLS FIRST]

(26) Project [codegen id : 11]
Output [3]: [item_sk#25, d_date#20, cume_sales#28]
Input [5]: [item_sk#25, d_date#20, _w0#26, ss_item_sk#16, cume_sales#28]

(27) Exchange
Input [3]: [item_sk#25, d_date#20, cume_sales#28]
Arguments: hashpartitioning(item_sk#25, d_date#20, 5), ENSURE_REQUIREMENTS, [id=#29]

(28) Sort [codegen id : 12]
Input [3]: [item_sk#25, d_date#20, cume_sales#28]
Arguments: [item_sk#25 ASC NULLS FIRST, d_date#20 ASC NULLS FIRST], false, 0

(29) SortMergeJoin
Left keys [2]: [item_sk#11, d_date#6]
Right keys [2]: [item_sk#25, d_date#20]
Join condition: None

(30) Project [codegen id : 13]
Output [4]: [CASE WHEN isnotnull(item_sk#11) THEN item_sk#11 ELSE item_sk#25 END AS item_sk#30, CASE WHEN isnotnull(d_date#6) THEN d_date#6 ELSE d_date#20 END AS d_date#31, cume_sales#14 AS web_sales#32, cume_sales#28 AS store_sales#33]
Input [6]: [item_sk#11, d_date#6, cume_sales#14, item_sk#25, d_date#20, cume_sales#28]

(31) Exchange
Input [4]: [item_sk#30, d_date#31, web_sales#32, store_sales#33]
Arguments: hashpartitioning(item_sk#30, 5), ENSURE_REQUIREMENTS, [id=#34]

(32) Sort [codegen id : 14]
Input [4]: [item_sk#30, d_date#31, web_sales#32, store_sales#33]
Arguments: [item_sk#30 ASC NULLS FIRST, d_date#31 ASC NULLS FIRST], false, 0

(33) Window
Input [4]: [item_sk#30, d_date#31, web_sales#32, store_sales#33]
Arguments: [max(web_sales#32) windowspecdefinition(item_sk#30, d_date#31 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#35, max(store_sales#33) windowspecdefinition(item_sk#30, d_date#31 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#36], [item_sk#30], [d_date#31 ASC NULLS FIRST]

(34) Filter [codegen id : 15]
Input [6]: [item_sk#30, d_date#31, web_sales#32, store_sales#33, web_cumulative#35, store_cumulative#36]
Condition : ((isnotnull(web_cumulative#35) AND isnotnull(store_cumulative#36)) AND (web_cumulative#35 > store_cumulative#36))

(35) TakeOrderedAndProject
Input [6]: [item_sk#30, d_date#31, web_sales#32, store_sales#33, web_cumulative#35, store_cumulative#36]
Arguments: 100, [item_sk#30 ASC NULLS FIRST, d_date#31 ASC NULLS FIRST], [item_sk#30, d_date#31, web_sales#32, store_sales#33, web_cumulative#35, store_cumulative#36]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (40)
+- * Project (39)
   +- * Filter (38)
      +- * ColumnarToRow (37)
         +- Scan parquet default.date_dim (36)


(36) Scan parquet default.date_dim
Output [3]: [d_date_sk#5, d_date#6, d_month_seq#37]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(37) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#37]

(38) Filter [codegen id : 1]
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#37]
Condition : ((d_month_seq#37 >= 1200) AND (d_month_seq#37 <= 1211))

(39) Project [codegen id : 1]
Output [2]: [d_date_sk#5, d_date#6]
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#37]

(40) BroadcastExchange
Input [2]: [d_date_sk#5, d_date#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#38]

Subquery:2 Hosting operator id = 15 Hosting Expression = ss_sold_date_sk#18 IN dynamicpruning#4


