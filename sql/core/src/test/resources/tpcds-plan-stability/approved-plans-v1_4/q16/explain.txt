== Physical Plan ==
* Sort (48)
+- * HashAggregate (47)
   +- Exchange (46)
      +- * HashAggregate (45)
         +- * HashAggregate (44)
            +- * HashAggregate (43)
               +- * Project (42)
                  +- * BroadcastHashJoin Inner BuildRight (41)
                     :- * Project (35)
                     :  +- * BroadcastHashJoin Inner BuildRight (34)
                     :     :- * Project (28)
                     :     :  +- * BroadcastHashJoin Inner BuildRight (27)
                     :     :     :- SortMergeJoin LeftAnti (21)
                     :     :     :  :- * Project (14)
                     :     :     :  :  +- SortMergeJoin LeftSemi (13)
                     :     :     :  :     :- * Sort (6)
                     :     :     :  :     :  +- Exchange (5)
                     :     :     :  :     :     +- * Project (4)
                     :     :     :  :     :        +- * Filter (3)
                     :     :     :  :     :           +- * ColumnarToRow (2)
                     :     :     :  :     :              +- Scan parquet default.catalog_sales (1)
                     :     :     :  :     +- * Sort (12)
                     :     :     :  :        +- Exchange (11)
                     :     :     :  :           +- * Project (10)
                     :     :     :  :              +- * Filter (9)
                     :     :     :  :                 +- * ColumnarToRow (8)
                     :     :     :  :                    +- Scan parquet default.catalog_sales (7)
                     :     :     :  +- * Sort (20)
                     :     :     :     +- Exchange (19)
                     :     :     :        +- * Project (18)
                     :     :     :           +- * Filter (17)
                     :     :     :              +- * ColumnarToRow (16)
                     :     :     :                 +- Scan parquet default.catalog_returns (15)
                     :     :     +- BroadcastExchange (26)
                     :     :        +- * Project (25)
                     :     :           +- * Filter (24)
                     :     :              +- * ColumnarToRow (23)
                     :     :                 +- Scan parquet default.date_dim (22)
                     :     +- BroadcastExchange (33)
                     :        +- * Project (32)
                     :           +- * Filter (31)
                     :              +- * ColumnarToRow (30)
                     :                 +- Scan parquet default.customer_address (29)
                     +- BroadcastExchange (40)
                        +- * Project (39)
                           +- * Filter (38)
                              +- * ColumnarToRow (37)
                                 +- Scan parquet default.call_center (36)


(1) Scan parquet default.catalog_sales
Output [8]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_warehouse_sk#4, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7, cs_sold_date_sk#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_ship_date_sk), IsNotNull(cs_ship_addr_sk), IsNotNull(cs_call_center_sk), IsNotNull(cs_order_number), IsNotNull(cs_warehouse_sk)]
ReadSchema: struct<cs_ship_date_sk:int,cs_ship_addr_sk:int,cs_call_center_sk:int,cs_warehouse_sk:int,cs_order_number:int,cs_ext_ship_cost:decimal(7,2),cs_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [8]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_warehouse_sk#4, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7, cs_sold_date_sk#8]

(3) Filter [codegen id : 1]
Input [8]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_warehouse_sk#4, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7, cs_sold_date_sk#8]
Condition : ((((isnotnull(cs_ship_date_sk#1) AND isnotnull(cs_ship_addr_sk#2)) AND isnotnull(cs_call_center_sk#3)) AND isnotnull(cs_order_number#5)) AND isnotnull(cs_warehouse_sk#4))

(4) Project [codegen id : 1]
Output [7]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_warehouse_sk#4, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Input [8]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_warehouse_sk#4, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7, cs_sold_date_sk#8]

(5) Exchange
Input [7]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_warehouse_sk#4, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Arguments: hashpartitioning(cs_order_number#5, 5), ENSURE_REQUIREMENTS, [id=#9]

(6) Sort [codegen id : 2]
Input [7]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_warehouse_sk#4, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Arguments: [cs_order_number#5 ASC NULLS FIRST], false, 0

(7) Scan parquet default.catalog_sales
Output [3]: [cs_warehouse_sk#4, cs_order_number#5, cs_sold_date_sk#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_order_number), IsNotNull(cs_warehouse_sk)]
ReadSchema: struct<cs_warehouse_sk:int,cs_order_number:int>

(8) ColumnarToRow [codegen id : 3]
Input [3]: [cs_warehouse_sk#4, cs_order_number#5, cs_sold_date_sk#8]

(9) Filter [codegen id : 3]
Input [3]: [cs_warehouse_sk#4, cs_order_number#5, cs_sold_date_sk#8]
Condition : (isnotnull(cs_order_number#5) AND isnotnull(cs_warehouse_sk#4))

(10) Project [codegen id : 3]
Output [2]: [cs_warehouse_sk#4 AS cs_warehouse_sk#4#10, cs_order_number#5 AS cs_order_number#5#11]
Input [3]: [cs_warehouse_sk#4, cs_order_number#5, cs_sold_date_sk#8]

(11) Exchange
Input [2]: [cs_warehouse_sk#4#10, cs_order_number#5#11]
Arguments: hashpartitioning(cs_order_number#5#11, 5), ENSURE_REQUIREMENTS, [id=#12]

(12) Sort [codegen id : 4]
Input [2]: [cs_warehouse_sk#4#10, cs_order_number#5#11]
Arguments: [cs_order_number#5#11 ASC NULLS FIRST], false, 0

(13) SortMergeJoin
Left keys [1]: [cs_order_number#5]
Right keys [1]: [cs_order_number#5#11]
Join condition: NOT (cs_warehouse_sk#4 = cs_warehouse_sk#4#10)

(14) Project [codegen id : 5]
Output [6]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Input [7]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_warehouse_sk#4, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]

(15) Scan parquet default.catalog_returns
Output [2]: [cr_order_number#13, cr_returned_date_sk#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_order_number)]
ReadSchema: struct<cr_order_number:int>

(16) ColumnarToRow [codegen id : 6]
Input [2]: [cr_order_number#13, cr_returned_date_sk#14]

(17) Filter [codegen id : 6]
Input [2]: [cr_order_number#13, cr_returned_date_sk#14]
Condition : isnotnull(cr_order_number#13)

(18) Project [codegen id : 6]
Output [1]: [cr_order_number#13]
Input [2]: [cr_order_number#13, cr_returned_date_sk#14]

(19) Exchange
Input [1]: [cr_order_number#13]
Arguments: hashpartitioning(cr_order_number#13, 5), ENSURE_REQUIREMENTS, [id=#15]

(20) Sort [codegen id : 7]
Input [1]: [cr_order_number#13]
Arguments: [cr_order_number#13 ASC NULLS FIRST], false, 0

(21) SortMergeJoin
Left keys [1]: [cs_order_number#5]
Right keys [1]: [cr_order_number#13]
Join condition: None

(22) Scan parquet default.date_dim
Output [2]: [d_date_sk#16, d_date#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2002-02-01), LessThanOrEqual(d_date,2002-04-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(23) ColumnarToRow [codegen id : 8]
Input [2]: [d_date_sk#16, d_date#17]

(24) Filter [codegen id : 8]
Input [2]: [d_date_sk#16, d_date#17]
Condition : (((isnotnull(d_date#17) AND (d_date#17 >= 2002-02-01)) AND (d_date#17 <= 2002-04-02)) AND isnotnull(d_date_sk#16))

(25) Project [codegen id : 8]
Output [1]: [d_date_sk#16]
Input [2]: [d_date_sk#16, d_date#17]

(26) BroadcastExchange
Input [1]: [d_date_sk#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#18]

(27) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [cs_ship_date_sk#1]
Right keys [1]: [d_date_sk#16]
Join condition: None

(28) Project [codegen id : 11]
Output [5]: [cs_ship_addr_sk#2, cs_call_center_sk#3, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Input [7]: [cs_ship_date_sk#1, cs_ship_addr_sk#2, cs_call_center_sk#3, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7, d_date_sk#16]

(29) Scan parquet default.customer_address
Output [2]: [ca_address_sk#19, ca_state#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(30) ColumnarToRow [codegen id : 9]
Input [2]: [ca_address_sk#19, ca_state#20]

(31) Filter [codegen id : 9]
Input [2]: [ca_address_sk#19, ca_state#20]
Condition : ((isnotnull(ca_state#20) AND (ca_state#20 = GA)) AND isnotnull(ca_address_sk#19))

(32) Project [codegen id : 9]
Output [1]: [ca_address_sk#19]
Input [2]: [ca_address_sk#19, ca_state#20]

(33) BroadcastExchange
Input [1]: [ca_address_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21]

(34) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [cs_ship_addr_sk#2]
Right keys [1]: [ca_address_sk#19]
Join condition: None

(35) Project [codegen id : 11]
Output [4]: [cs_call_center_sk#3, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Input [6]: [cs_ship_addr_sk#2, cs_call_center_sk#3, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7, ca_address_sk#19]

(36) Scan parquet default.call_center
Output [2]: [cc_call_center_sk#22, cc_county#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/call_center]
PushedFilters: [IsNotNull(cc_county), EqualTo(cc_county,Williamson County), IsNotNull(cc_call_center_sk)]
ReadSchema: struct<cc_call_center_sk:int,cc_county:string>

(37) ColumnarToRow [codegen id : 10]
Input [2]: [cc_call_center_sk#22, cc_county#23]

(38) Filter [codegen id : 10]
Input [2]: [cc_call_center_sk#22, cc_county#23]
Condition : ((isnotnull(cc_county#23) AND (cc_county#23 = Williamson County)) AND isnotnull(cc_call_center_sk#22))

(39) Project [codegen id : 10]
Output [1]: [cc_call_center_sk#22]
Input [2]: [cc_call_center_sk#22, cc_county#23]

(40) BroadcastExchange
Input [1]: [cc_call_center_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#24]

(41) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [cs_call_center_sk#3]
Right keys [1]: [cc_call_center_sk#22]
Join condition: None

(42) Project [codegen id : 11]
Output [3]: [cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Input [5]: [cs_call_center_sk#3, cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7, cc_call_center_sk#22]

(43) HashAggregate [codegen id : 11]
Input [3]: [cs_order_number#5, cs_ext_ship_cost#6, cs_net_profit#7]
Keys [1]: [cs_order_number#5]
Functions [2]: [partial_sum(UnscaledValue(cs_ext_ship_cost#6)), partial_sum(UnscaledValue(cs_net_profit#7))]
Aggregate Attributes [2]: [sum(UnscaledValue(cs_ext_ship_cost#6))#25, sum(UnscaledValue(cs_net_profit#7))#26]
Results [3]: [cs_order_number#5, sum#27, sum#28]

(44) HashAggregate [codegen id : 11]
Input [3]: [cs_order_number#5, sum#27, sum#28]
Keys [1]: [cs_order_number#5]
Functions [2]: [merge_sum(UnscaledValue(cs_ext_ship_cost#6)), merge_sum(UnscaledValue(cs_net_profit#7))]
Aggregate Attributes [2]: [sum(UnscaledValue(cs_ext_ship_cost#6))#25, sum(UnscaledValue(cs_net_profit#7))#26]
Results [3]: [cs_order_number#5, sum#27, sum#28]

(45) HashAggregate [codegen id : 11]
Input [3]: [cs_order_number#5, sum#27, sum#28]
Keys: []
Functions [3]: [merge_sum(UnscaledValue(cs_ext_ship_cost#6)), merge_sum(UnscaledValue(cs_net_profit#7)), partial_count(distinct cs_order_number#5)]
Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_ship_cost#6))#25, sum(UnscaledValue(cs_net_profit#7))#26, count(cs_order_number#5)#29]
Results [3]: [sum#27, sum#28, count#30]

(46) Exchange
Input [3]: [sum#27, sum#28, count#30]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#31]

(47) HashAggregate [codegen id : 12]
Input [3]: [sum#27, sum#28, count#30]
Keys: []
Functions [3]: [sum(UnscaledValue(cs_ext_ship_cost#6)), sum(UnscaledValue(cs_net_profit#7)), count(distinct cs_order_number#5)]
Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_ship_cost#6))#25, sum(UnscaledValue(cs_net_profit#7))#26, count(cs_order_number#5)#29]
Results [3]: [count(cs_order_number#5)#29 AS order count #32, MakeDecimal(sum(UnscaledValue(cs_ext_ship_cost#6))#25,17,2) AS total shipping cost #33, MakeDecimal(sum(UnscaledValue(cs_net_profit#7))#26,17,2) AS total net profit #34]

(48) Sort [codegen id : 12]
Input [3]: [order count #32, total shipping cost #33, total net profit #34]
Arguments: [order count #32 ASC NULLS FIRST], true, 0

