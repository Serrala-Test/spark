== Physical Plan ==
TakeOrderedAndProject (44)
+- * Project (43)
   +- * SortMergeJoin Inner (42)
      :- * Sort (27)
      :  +- Exchange (26)
      :     +- * Project (25)
      :        +- * BroadcastHashJoin Inner BuildRight (24)
      :           :- * Project (19)
      :           :  +- * BroadcastHashJoin Inner BuildLeft (18)
      :           :     :- BroadcastExchange (4)
      :           :     :  +- * Project (3)
      :           :     :     +- * Filter (2)
      :           :     :        +- BatchScan default.store (1)
      :           :     +- * Filter (17)
      :           :        +- * HashAggregate (16)
      :           :           +- Exchange (15)
      :           :              +- * HashAggregate (14)
      :           :                 +- * Project (13)
      :           :                    +- * BroadcastHashJoin Inner BuildRight (12)
      :           :                       :- * Project (7)
      :           :                       :  +- * Filter (6)
      :           :                       :     +- BatchScan default.store_sales (5)
      :           :                       +- BroadcastExchange (11)
      :           :                          +- * Project (10)
      :           :                             +- * Filter (9)
      :           :                                +- BatchScan default.date_dim (8)
      :           +- BroadcastExchange (23)
      :              +- * Project (22)
      :                 +- * Filter (21)
      :                    +- BatchScan default.item (20)
      +- * Sort (41)
         +- * Filter (40)
            +- * HashAggregate (39)
               +- Exchange (38)
                  +- * HashAggregate (37)
                     +- * HashAggregate (36)
                        +- Exchange (35)
                           +- * HashAggregate (34)
                              +- * Project (33)
                                 +- * BroadcastHashJoin Inner BuildRight (32)
                                    :- * Project (30)
                                    :  +- * Filter (29)
                                    :     +- BatchScan default.store_sales (28)
                                    +- ReusedExchange (31)


(1) BatchScan default.store
Output [2]: [s_store_sk#1, s_store_name#2]
DataFilters: [isnotnull(s_store_sk#1)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string>

(2) Filter [codegen id : 1]
Input [2]: [s_store_sk#1, s_store_name#2]
Condition : isnotnull(s_store_sk#1)

(3) Project [codegen id : 1]
Output [2]: [s_store_sk#1, s_store_name#2]
Input [2]: [s_store_sk#1, s_store_name#2]

(4) BroadcastExchange
Input [2]: [s_store_sk#1, s_store_name#2]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(5) BatchScan default.store_sales
Output [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]
DataFilters: [isnotnull(ss_store_sk#4), isnotnull(ss_item_sk#3)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_sales]
PartitionFilters: [isnotnull(ss_sold_date_sk#6)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(6) Filter [codegen id : 3]
Input [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]
Condition : (isnotnull(ss_store_sk#4) AND isnotnull(ss_item_sk#3))

(7) Project [codegen id : 3]
Output [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]
Input [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]

(8) BatchScan default.date_dim
Output [2]: [d_date_sk#7, d_month_seq#8]
DataFilters: [isnotnull(d_month_seq#8), (d_month_seq#8 >= 1176), (d_month_seq#8 <= 1187), isnotnull(d_date_sk#7)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1176), LessThanOrEqual(d_month_seq,1187), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(9) Filter [codegen id : 2]
Input [2]: [d_date_sk#7, d_month_seq#8]
Condition : (((isnotnull(d_month_seq#8) AND (d_month_seq#8 >= 1176)) AND (d_month_seq#8 <= 1187)) AND isnotnull(d_date_sk#7))

(10) Project [codegen id : 2]
Output [1]: [d_date_sk#7]
Input [2]: [d_date_sk#7, d_month_seq#8]

(11) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(12) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#7]
Join type: Inner
Join condition: None

(13) Project [codegen id : 3]
Output [3]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5]
Input [5]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6, d_date_sk#7]

(14) HashAggregate [codegen id : 3]
Input [3]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5]
Keys [2]: [ss_store_sk#4, ss_item_sk#3]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#5))]
Aggregate Attributes [1]: [sum#9]
Results [3]: [ss_store_sk#4, ss_item_sk#3, sum#10]

(15) Exchange
Input [3]: [ss_store_sk#4, ss_item_sk#3, sum#10]
Arguments: hashpartitioning(ss_store_sk#4, ss_item_sk#3, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(16) HashAggregate
Input [3]: [ss_store_sk#4, ss_item_sk#3, sum#10]
Keys [2]: [ss_store_sk#4, ss_item_sk#3]
Functions [1]: [sum(UnscaledValue(ss_sales_price#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#5))#11]
Results [3]: [ss_store_sk#4, ss_item_sk#3, MakeDecimal(sum(UnscaledValue(ss_sales_price#5))#11,17,2) AS revenue#12]

(17) Filter
Input [3]: [ss_store_sk#4, ss_item_sk#3, revenue#12]
Condition : isnotnull(revenue#12)

(18) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [s_store_sk#1]
Right keys [1]: [ss_store_sk#4]
Join type: Inner
Join condition: None

(19) Project [codegen id : 5]
Output [4]: [s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#12]
Input [5]: [s_store_sk#1, s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#12]

(20) BatchScan default.item
Output [5]: [i_item_sk#13, i_item_desc#14, i_current_price#15, i_wholesale_cost#16, i_brand#17]
DataFilters: [isnotnull(i_item_sk#13)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand:string>

(21) Filter [codegen id : 4]
Input [5]: [i_item_sk#13, i_item_desc#14, i_current_price#15, i_wholesale_cost#16, i_brand#17]
Condition : isnotnull(i_item_sk#13)

(22) Project [codegen id : 4]
Output [5]: [i_item_sk#13, i_item_desc#14, i_current_price#15, i_wholesale_cost#16, i_brand#17]
Input [5]: [i_item_sk#13, i_item_desc#14, i_current_price#15, i_wholesale_cost#16, i_brand#17]

(23) BroadcastExchange
Input [5]: [i_item_sk#13, i_item_desc#14, i_current_price#15, i_wholesale_cost#16, i_brand#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(24) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#3]
Right keys [1]: [i_item_sk#13]
Join type: Inner
Join condition: None

(25) Project [codegen id : 5]
Output [7]: [s_store_name#2, ss_store_sk#4, revenue#12, i_item_desc#14, i_current_price#15, i_wholesale_cost#16, i_brand#17]
Input [9]: [s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#12, i_item_sk#13, i_item_desc#14, i_current_price#15, i_wholesale_cost#16, i_brand#17]

(26) Exchange
Input [7]: [s_store_name#2, ss_store_sk#4, revenue#12, i_item_desc#14, i_current_price#15, i_wholesale_cost#16, i_brand#17]
Arguments: hashpartitioning(ss_store_sk#4, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(27) Sort [codegen id : 6]
Input [7]: [s_store_name#2, ss_store_sk#4, revenue#12, i_item_desc#14, i_current_price#15, i_wholesale_cost#16, i_brand#17]
Arguments: [ss_store_sk#4 ASC NULLS FIRST], false, 0

(28) BatchScan default.store_sales
Output [4]: [ss_item_sk#18, ss_store_sk#19, ss_sales_price#20, ss_sold_date_sk#21]
DataFilters: [isnotnull(ss_store_sk#19)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_sales]
PartitionFilters: [isnotnull(ss_sold_date_sk#21)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(29) Filter [codegen id : 8]
Input [4]: [ss_item_sk#18, ss_store_sk#19, ss_sales_price#20, ss_sold_date_sk#21]
Condition : isnotnull(ss_store_sk#19)

(30) Project [codegen id : 8]
Output [4]: [ss_item_sk#18, ss_store_sk#19, ss_sales_price#20, ss_sold_date_sk#21]
Input [4]: [ss_item_sk#18, ss_store_sk#19, ss_sales_price#20, ss_sold_date_sk#21]

(31) ReusedExchange [Reuses operator id: 11]
Output [1]: [d_date_sk#22]

(32) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_sold_date_sk#21]
Right keys [1]: [d_date_sk#22]
Join type: Inner
Join condition: None

(33) Project [codegen id : 8]
Output [3]: [ss_item_sk#18, ss_store_sk#19, ss_sales_price#20]
Input [5]: [ss_item_sk#18, ss_store_sk#19, ss_sales_price#20, ss_sold_date_sk#21, d_date_sk#22]

(34) HashAggregate [codegen id : 8]
Input [3]: [ss_item_sk#18, ss_store_sk#19, ss_sales_price#20]
Keys [2]: [ss_store_sk#19, ss_item_sk#18]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#20))]
Aggregate Attributes [1]: [sum#23]
Results [3]: [ss_store_sk#19, ss_item_sk#18, sum#24]

(35) Exchange
Input [3]: [ss_store_sk#19, ss_item_sk#18, sum#24]
Arguments: hashpartitioning(ss_store_sk#19, ss_item_sk#18, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(36) HashAggregate [codegen id : 9]
Input [3]: [ss_store_sk#19, ss_item_sk#18, sum#24]
Keys [2]: [ss_store_sk#19, ss_item_sk#18]
Functions [1]: [sum(UnscaledValue(ss_sales_price#20))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#20))#25]
Results [2]: [ss_store_sk#19, MakeDecimal(sum(UnscaledValue(ss_sales_price#20))#25,17,2) AS revenue#26]

(37) HashAggregate [codegen id : 9]
Input [2]: [ss_store_sk#19, revenue#26]
Keys [1]: [ss_store_sk#19]
Functions [1]: [partial_avg(revenue#26)]
Aggregate Attributes [2]: [sum#27, count#28]
Results [3]: [ss_store_sk#19, sum#29, count#30]

(38) Exchange
Input [3]: [ss_store_sk#19, sum#29, count#30]
Arguments: hashpartitioning(ss_store_sk#19, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(39) HashAggregate [codegen id : 10]
Input [3]: [ss_store_sk#19, sum#29, count#30]
Keys [1]: [ss_store_sk#19]
Functions [1]: [avg(revenue#26)]
Aggregate Attributes [1]: [avg(revenue#26)#31]
Results [2]: [ss_store_sk#19, avg(revenue#26)#31 AS ave#32]

(40) Filter [codegen id : 10]
Input [2]: [ss_store_sk#19, ave#32]
Condition : isnotnull(ave#32)

(41) Sort [codegen id : 10]
Input [2]: [ss_store_sk#19, ave#32]
Arguments: [ss_store_sk#19 ASC NULLS FIRST], false, 0

(42) SortMergeJoin [codegen id : 11]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [ss_store_sk#19]
Join type: Inner
Join condition: (cast(revenue#12 as decimal(23,7)) <= (0.1 * ave#32))

(43) Project [codegen id : 11]
Output [6]: [s_store_name#2, i_item_desc#14, revenue#12, i_current_price#15, i_wholesale_cost#16, i_brand#17]
Input [9]: [s_store_name#2, ss_store_sk#4, revenue#12, i_item_desc#14, i_current_price#15, i_wholesale_cost#16, i_brand#17, ss_store_sk#19, ave#32]

(44) TakeOrderedAndProject
Input [6]: [s_store_name#2, i_item_desc#14, revenue#12, i_current_price#15, i_wholesale_cost#16, i_brand#17]
Arguments: 100, [s_store_name#2 ASC NULLS FIRST, i_item_desc#14 ASC NULLS FIRST], [s_store_name#2, i_item_desc#14, revenue#12, i_current_price#15, i_wholesale_cost#16, i_brand#17]

