== Physical Plan ==
TakeOrderedAndProject (77)
+- * Project (76)
   +- * BroadcastHashJoin Inner BuildRight (75)
      :- * Project (60)
      :  +- * BroadcastHashJoin Inner BuildRight (59)
      :     :- * Project (39)
      :     :  +- * BroadcastHashJoin Inner BuildRight (38)
      :     :     :- * Filter (20)
      :     :     :  +- * HashAggregate (19)
      :     :     :     +- Exchange (18)
      :     :     :        +- * HashAggregate (17)
      :     :     :           +- * Project (16)
      :     :     :              +- * BroadcastHashJoin Inner BuildRight (15)
      :     :     :                 :- * Project (10)
      :     :     :                 :  +- * BroadcastHashJoin Inner BuildRight (9)
      :     :     :                 :     :- * Project (4)
      :     :     :                 :     :  +- * Filter (3)
      :     :     :                 :     :     +- * ColumnarToRow (2)
      :     :     :                 :     :        +- Scan parquet default.customer (1)
      :     :     :                 :     +- BroadcastExchange (8)
      :     :     :                 :        +- * Filter (7)
      :     :     :                 :           +- * ColumnarToRow (6)
      :     :     :                 :              +- Scan parquet default.store_sales (5)
      :     :     :                 +- BroadcastExchange (14)
      :     :     :                    +- * Filter (13)
      :     :     :                       +- * ColumnarToRow (12)
      :     :     :                          +- Scan parquet default.date_dim (11)
      :     :     +- BroadcastExchange (37)
      :     :        +- * HashAggregate (36)
      :     :           +- Exchange (35)
      :     :              +- * HashAggregate (34)
      :     :                 +- * Project (33)
      :     :                    +- * BroadcastHashJoin Inner BuildRight (32)
      :     :                       :- * Project (27)
      :     :                       :  +- * BroadcastHashJoin Inner BuildRight (26)
      :     :                       :     :- * Project (24)
      :     :                       :     :  +- * Filter (23)
      :     :                       :     :     +- * ColumnarToRow (22)
      :     :                       :     :        +- Scan parquet default.customer (21)
      :     :                       :     +- ReusedExchange (25)
      :     :                       +- BroadcastExchange (31)
      :     :                          +- * Filter (30)
      :     :                             +- * ColumnarToRow (29)
      :     :                                +- Scan parquet default.date_dim (28)
      :     +- BroadcastExchange (58)
      :        +- * Project (57)
      :           +- * Filter (56)
      :              +- * HashAggregate (55)
      :                 +- Exchange (54)
      :                    +- * HashAggregate (53)
      :                       +- * Project (52)
      :                          +- * BroadcastHashJoin Inner BuildRight (51)
      :                             :- * Project (49)
      :                             :  +- * BroadcastHashJoin Inner BuildRight (48)
      :                             :     :- * Project (43)
      :                             :     :  +- * Filter (42)
      :                             :     :     +- * ColumnarToRow (41)
      :                             :     :        +- Scan parquet default.customer (40)
      :                             :     +- BroadcastExchange (47)
      :                             :        +- * Filter (46)
      :                             :           +- * ColumnarToRow (45)
      :                             :              +- Scan parquet default.web_sales (44)
      :                             +- ReusedExchange (50)
      +- BroadcastExchange (74)
         +- * HashAggregate (73)
            +- Exchange (72)
               +- * HashAggregate (71)
                  +- * Project (70)
                     +- * BroadcastHashJoin Inner BuildRight (69)
                        :- * Project (67)
                        :  +- * BroadcastHashJoin Inner BuildRight (66)
                        :     :- * Project (64)
                        :     :  +- * Filter (63)
                        :     :     +- * ColumnarToRow (62)
                        :     :        +- Scan parquet default.customer (61)
                        :     +- ReusedExchange (65)
                        +- ReusedExchange (68)


(1) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(2) ColumnarToRow [codegen id : 3]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(3) Filter [codegen id : 3]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true)))

(4) Project [codegen id : 3]
Output [8]: [c_customer_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true) AS c_customer_id#9, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#3, 20, false, true) AS c_first_name#10, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#4, 30, false, true) AS c_last_name#11, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_preferred_cust_flag#5, 1, false, true) AS c_preferred_cust_flag#12, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, c_birth_country#6, 20, false, true) AS c_birth_country#13, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_login#7, 13, false, true) AS c_login#14, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_email_address#8, 50, false, true) AS c_email_address#15]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(5) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#16, ss_customer_sk#17, ss_ext_discount_amt#18, ss_ext_list_price#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(6) ColumnarToRow [codegen id : 1]
Input [4]: [ss_sold_date_sk#16, ss_customer_sk#17, ss_ext_discount_amt#18, ss_ext_list_price#19]

(7) Filter [codegen id : 1]
Input [4]: [ss_sold_date_sk#16, ss_customer_sk#17, ss_ext_discount_amt#18, ss_ext_list_price#19]
Condition : (isnotnull(ss_customer_sk#17) AND isnotnull(ss_sold_date_sk#16))

(8) BroadcastExchange
Input [4]: [ss_sold_date_sk#16, ss_customer_sk#17, ss_ext_discount_amt#18, ss_ext_list_price#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#20]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#17]
Join condition: None

(10) Project [codegen id : 3]
Output [10]: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, ss_sold_date_sk#16, ss_ext_discount_amt#18, ss_ext_list_price#19]
Input [12]: [c_customer_sk#1, c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, ss_sold_date_sk#16, ss_customer_sk#17, ss_ext_discount_amt#18, ss_ext_list_price#19]

(11) Scan parquet default.date_dim
Output [2]: [d_date_sk#21, d_year#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#21, d_year#22]

(13) Filter [codegen id : 2]
Input [2]: [d_date_sk#21, d_year#22]
Condition : ((isnotnull(d_year#22) AND (d_year#22 = 2001)) AND isnotnull(d_date_sk#21))

(14) BroadcastExchange
Input [2]: [d_date_sk#21, d_year#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#23]

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#16]
Right keys [1]: [d_date_sk#21]
Join condition: None

(16) Project [codegen id : 3]
Output [10]: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, ss_ext_discount_amt#18, ss_ext_list_price#19, d_year#22]
Input [12]: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, ss_sold_date_sk#16, ss_ext_discount_amt#18, ss_ext_list_price#19, d_date_sk#21, d_year#22]

(17) HashAggregate [codegen id : 3]
Input [10]: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, ss_ext_discount_amt#18, ss_ext_list_price#19, d_year#22]
Keys [8]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#22, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#19 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#18 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#24]
Results [9]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#22, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, sum#25]

(18) Exchange
Input [9]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#22, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, sum#25]
Arguments: hashpartitioning(c_customer_id#9, c_first_name#10, c_last_name#11, d_year#22, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, 5), ENSURE_REQUIREMENTS, [id=#26]

(19) HashAggregate [codegen id : 16]
Input [9]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#22, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, sum#25]
Keys [8]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#22, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#19 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#18 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#19 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#18 as decimal(8,2)))), DecimalType(8,2), true)))#27]
Results [2]: [c_customer_id#9 AS customer_id#28, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#19 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#18 as decimal(8,2)))), DecimalType(8,2), true)))#27,18,2) AS year_total#29]

(20) Filter [codegen id : 16]
Input [2]: [customer_id#28, year_total#29]
Condition : (isnotnull(year_total#29) AND (year_total#29 > 0.00))

(21) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(22) ColumnarToRow [codegen id : 6]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(23) Filter [codegen id : 6]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true)))

(24) Project [codegen id : 6]
Output [8]: [c_customer_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true) AS c_customer_id#30, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#3, 20, false, true) AS c_first_name#31, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#4, 30, false, true) AS c_last_name#32, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_preferred_cust_flag#5, 1, false, true) AS c_preferred_cust_flag#33, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, c_birth_country#6, 20, false, true) AS c_birth_country#34, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_login#7, 13, false, true) AS c_login#35, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_email_address#8, 50, false, true) AS c_email_address#36]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(25) ReusedExchange [Reuses operator id: 8]
Output [4]: [ss_sold_date_sk#16, ss_customer_sk#17, ss_ext_discount_amt#18, ss_ext_list_price#19]

(26) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#17]
Join condition: None

(27) Project [codegen id : 6]
Output [10]: [c_customer_id#30, c_first_name#31, c_last_name#32, c_preferred_cust_flag#33, c_birth_country#34, c_login#35, c_email_address#36, ss_sold_date_sk#16, ss_ext_discount_amt#18, ss_ext_list_price#19]
Input [12]: [c_customer_sk#1, c_customer_id#30, c_first_name#31, c_last_name#32, c_preferred_cust_flag#33, c_birth_country#34, c_login#35, c_email_address#36, ss_sold_date_sk#16, ss_customer_sk#17, ss_ext_discount_amt#18, ss_ext_list_price#19]

(28) Scan parquet default.date_dim
Output [2]: [d_date_sk#21, d_year#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(29) ColumnarToRow [codegen id : 5]
Input [2]: [d_date_sk#21, d_year#22]

(30) Filter [codegen id : 5]
Input [2]: [d_date_sk#21, d_year#22]
Condition : ((isnotnull(d_year#22) AND (d_year#22 = 2002)) AND isnotnull(d_date_sk#21))

(31) BroadcastExchange
Input [2]: [d_date_sk#21, d_year#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#37]

(32) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#16]
Right keys [1]: [d_date_sk#21]
Join condition: None

(33) Project [codegen id : 6]
Output [10]: [c_customer_id#30, c_first_name#31, c_last_name#32, c_preferred_cust_flag#33, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#18, ss_ext_list_price#19, d_year#22]
Input [12]: [c_customer_id#30, c_first_name#31, c_last_name#32, c_preferred_cust_flag#33, c_birth_country#34, c_login#35, c_email_address#36, ss_sold_date_sk#16, ss_ext_discount_amt#18, ss_ext_list_price#19, d_date_sk#21, d_year#22]

(34) HashAggregate [codegen id : 6]
Input [10]: [c_customer_id#30, c_first_name#31, c_last_name#32, c_preferred_cust_flag#33, c_birth_country#34, c_login#35, c_email_address#36, ss_ext_discount_amt#18, ss_ext_list_price#19, d_year#22]
Keys [8]: [c_customer_id#30, c_first_name#31, c_last_name#32, d_year#22, c_preferred_cust_flag#33, c_birth_country#34, c_login#35, c_email_address#36]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#19 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#18 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#38]
Results [9]: [c_customer_id#30, c_first_name#31, c_last_name#32, d_year#22, c_preferred_cust_flag#33, c_birth_country#34, c_login#35, c_email_address#36, sum#39]

(35) Exchange
Input [9]: [c_customer_id#30, c_first_name#31, c_last_name#32, d_year#22, c_preferred_cust_flag#33, c_birth_country#34, c_login#35, c_email_address#36, sum#39]
Arguments: hashpartitioning(c_customer_id#30, c_first_name#31, c_last_name#32, d_year#22, c_preferred_cust_flag#33, c_birth_country#34, c_login#35, c_email_address#36, 5), ENSURE_REQUIREMENTS, [id=#40]

(36) HashAggregate [codegen id : 7]
Input [9]: [c_customer_id#30, c_first_name#31, c_last_name#32, d_year#22, c_preferred_cust_flag#33, c_birth_country#34, c_login#35, c_email_address#36, sum#39]
Keys [8]: [c_customer_id#30, c_first_name#31, c_last_name#32, d_year#22, c_preferred_cust_flag#33, c_birth_country#34, c_login#35, c_email_address#36]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#19 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#18 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#19 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#18 as decimal(8,2)))), DecimalType(8,2), true)))#41]
Results [3]: [c_customer_id#30 AS customer_id#42, c_preferred_cust_flag#33 AS customer_preferred_cust_flag#43, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#19 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#18 as decimal(8,2)))), DecimalType(8,2), true)))#41,18,2) AS year_total#44]

(37) BroadcastExchange
Input [3]: [customer_id#42, customer_preferred_cust_flag#43, year_total#44]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#45]

(38) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [customer_id#28]
Right keys [1]: [customer_id#42]
Join condition: None

(39) Project [codegen id : 16]
Output [4]: [customer_id#28, year_total#29, customer_preferred_cust_flag#43, year_total#44]
Input [5]: [customer_id#28, year_total#29, customer_id#42, customer_preferred_cust_flag#43, year_total#44]

(40) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(41) ColumnarToRow [codegen id : 10]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(42) Filter [codegen id : 10]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true)))

(43) Project [codegen id : 10]
Output [8]: [c_customer_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true) AS c_customer_id#46, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#3, 20, false, true) AS c_first_name#47, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#4, 30, false, true) AS c_last_name#48, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_preferred_cust_flag#5, 1, false, true) AS c_preferred_cust_flag#49, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, c_birth_country#6, 20, false, true) AS c_birth_country#50, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_login#7, 13, false, true) AS c_login#51, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_email_address#8, 50, false, true) AS c_email_address#52]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(44) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#53, ws_bill_customer_sk#54, ws_ext_discount_amt#55, ws_ext_list_price#56]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(45) ColumnarToRow [codegen id : 8]
Input [4]: [ws_sold_date_sk#53, ws_bill_customer_sk#54, ws_ext_discount_amt#55, ws_ext_list_price#56]

(46) Filter [codegen id : 8]
Input [4]: [ws_sold_date_sk#53, ws_bill_customer_sk#54, ws_ext_discount_amt#55, ws_ext_list_price#56]
Condition : (isnotnull(ws_bill_customer_sk#54) AND isnotnull(ws_sold_date_sk#53))

(47) BroadcastExchange
Input [4]: [ws_sold_date_sk#53, ws_bill_customer_sk#54, ws_ext_discount_amt#55, ws_ext_list_price#56]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#57]

(48) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#54]
Join condition: None

(49) Project [codegen id : 10]
Output [10]: [c_customer_id#46, c_first_name#47, c_last_name#48, c_preferred_cust_flag#49, c_birth_country#50, c_login#51, c_email_address#52, ws_sold_date_sk#53, ws_ext_discount_amt#55, ws_ext_list_price#56]
Input [12]: [c_customer_sk#1, c_customer_id#46, c_first_name#47, c_last_name#48, c_preferred_cust_flag#49, c_birth_country#50, c_login#51, c_email_address#52, ws_sold_date_sk#53, ws_bill_customer_sk#54, ws_ext_discount_amt#55, ws_ext_list_price#56]

(50) ReusedExchange [Reuses operator id: 14]
Output [2]: [d_date_sk#21, d_year#22]

(51) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_sold_date_sk#53]
Right keys [1]: [d_date_sk#21]
Join condition: None

(52) Project [codegen id : 10]
Output [10]: [c_customer_id#46, c_first_name#47, c_last_name#48, c_preferred_cust_flag#49, c_birth_country#50, c_login#51, c_email_address#52, ws_ext_discount_amt#55, ws_ext_list_price#56, d_year#22]
Input [12]: [c_customer_id#46, c_first_name#47, c_last_name#48, c_preferred_cust_flag#49, c_birth_country#50, c_login#51, c_email_address#52, ws_sold_date_sk#53, ws_ext_discount_amt#55, ws_ext_list_price#56, d_date_sk#21, d_year#22]

(53) HashAggregate [codegen id : 10]
Input [10]: [c_customer_id#46, c_first_name#47, c_last_name#48, c_preferred_cust_flag#49, c_birth_country#50, c_login#51, c_email_address#52, ws_ext_discount_amt#55, ws_ext_list_price#56, d_year#22]
Keys [8]: [c_customer_id#46, c_first_name#47, c_last_name#48, c_preferred_cust_flag#49, c_birth_country#50, c_login#51, c_email_address#52, d_year#22]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#56 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#55 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#58]
Results [9]: [c_customer_id#46, c_first_name#47, c_last_name#48, c_preferred_cust_flag#49, c_birth_country#50, c_login#51, c_email_address#52, d_year#22, sum#59]

(54) Exchange
Input [9]: [c_customer_id#46, c_first_name#47, c_last_name#48, c_preferred_cust_flag#49, c_birth_country#50, c_login#51, c_email_address#52, d_year#22, sum#59]
Arguments: hashpartitioning(c_customer_id#46, c_first_name#47, c_last_name#48, c_preferred_cust_flag#49, c_birth_country#50, c_login#51, c_email_address#52, d_year#22, 5), ENSURE_REQUIREMENTS, [id=#60]

(55) HashAggregate [codegen id : 11]
Input [9]: [c_customer_id#46, c_first_name#47, c_last_name#48, c_preferred_cust_flag#49, c_birth_country#50, c_login#51, c_email_address#52, d_year#22, sum#59]
Keys [8]: [c_customer_id#46, c_first_name#47, c_last_name#48, c_preferred_cust_flag#49, c_birth_country#50, c_login#51, c_email_address#52, d_year#22]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#56 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#55 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#56 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#55 as decimal(8,2)))), DecimalType(8,2), true)))#61]
Results [2]: [c_customer_id#46 AS customer_id#62, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#56 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#55 as decimal(8,2)))), DecimalType(8,2), true)))#61,18,2) AS year_total#63]

(56) Filter [codegen id : 11]
Input [2]: [customer_id#62, year_total#63]
Condition : (isnotnull(year_total#63) AND (year_total#63 > 0.00))

(57) Project [codegen id : 11]
Output [2]: [customer_id#62 AS customer_id#64, year_total#63 AS year_total#65]
Input [2]: [customer_id#62, year_total#63]

(58) BroadcastExchange
Input [2]: [customer_id#64, year_total#65]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#66]

(59) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [customer_id#28]
Right keys [1]: [customer_id#64]
Join condition: None

(60) Project [codegen id : 16]
Output [5]: [customer_id#28, year_total#29, customer_preferred_cust_flag#43, year_total#44, year_total#65]
Input [6]: [customer_id#28, year_total#29, customer_preferred_cust_flag#43, year_total#44, customer_id#64, year_total#65]

(61) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(62) ColumnarToRow [codegen id : 14]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(63) Filter [codegen id : 14]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true)))

(64) Project [codegen id : 14]
Output [8]: [c_customer_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true) AS c_customer_id#67, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#3, 20, false, true) AS c_first_name#68, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#4, 30, false, true) AS c_last_name#69, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_preferred_cust_flag#5, 1, false, true) AS c_preferred_cust_flag#70, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, c_birth_country#6, 20, false, true) AS c_birth_country#71, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_login#7, 13, false, true) AS c_login#72, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_email_address#8, 50, false, true) AS c_email_address#73]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(65) ReusedExchange [Reuses operator id: 47]
Output [4]: [ws_sold_date_sk#53, ws_bill_customer_sk#54, ws_ext_discount_amt#55, ws_ext_list_price#56]

(66) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#54]
Join condition: None

(67) Project [codegen id : 14]
Output [10]: [c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73, ws_sold_date_sk#53, ws_ext_discount_amt#55, ws_ext_list_price#56]
Input [12]: [c_customer_sk#1, c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73, ws_sold_date_sk#53, ws_bill_customer_sk#54, ws_ext_discount_amt#55, ws_ext_list_price#56]

(68) ReusedExchange [Reuses operator id: 31]
Output [2]: [d_date_sk#21, d_year#22]

(69) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_sold_date_sk#53]
Right keys [1]: [d_date_sk#21]
Join condition: None

(70) Project [codegen id : 14]
Output [10]: [c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73, ws_ext_discount_amt#55, ws_ext_list_price#56, d_year#22]
Input [12]: [c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73, ws_sold_date_sk#53, ws_ext_discount_amt#55, ws_ext_list_price#56, d_date_sk#21, d_year#22]

(71) HashAggregate [codegen id : 14]
Input [10]: [c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73, ws_ext_discount_amt#55, ws_ext_list_price#56, d_year#22]
Keys [8]: [c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73, d_year#22]
Functions [1]: [partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#56 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#55 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum#74]
Results [9]: [c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73, d_year#22, sum#75]

(72) Exchange
Input [9]: [c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73, d_year#22, sum#75]
Arguments: hashpartitioning(c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73, d_year#22, 5), ENSURE_REQUIREMENTS, [id=#76]

(73) HashAggregate [codegen id : 15]
Input [9]: [c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73, d_year#22, sum#75]
Keys [8]: [c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73, d_year#22]
Functions [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#56 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#55 as decimal(8,2)))), DecimalType(8,2), true)))]
Aggregate Attributes [1]: [sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#56 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#55 as decimal(8,2)))), DecimalType(8,2), true)))#77]
Results [2]: [c_customer_id#67 AS customer_id#78, MakeDecimal(sum(UnscaledValue(CheckOverflow((promote_precision(cast(ws_ext_list_price#56 as decimal(8,2))) - promote_precision(cast(ws_ext_discount_amt#55 as decimal(8,2)))), DecimalType(8,2), true)))#77,18,2) AS year_total#79]

(74) BroadcastExchange
Input [2]: [customer_id#78, year_total#79]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#80]

(75) BroadcastHashJoin [codegen id : 16]
Left keys [1]: [customer_id#28]
Right keys [1]: [customer_id#78]
Join condition: (CASE WHEN (year_total#65 > 0.00) THEN CheckOverflow((promote_precision(year_total#79) / promote_precision(year_total#65)), DecimalType(38,20), true) ELSE null END > CASE WHEN (year_total#29 > 0.00) THEN CheckOverflow((promote_precision(year_total#44) / promote_precision(year_total#29)), DecimalType(38,20), true) ELSE null END)

(76) Project [codegen id : 16]
Output [1]: [customer_preferred_cust_flag#43]
Input [7]: [customer_id#28, year_total#29, customer_preferred_cust_flag#43, year_total#44, year_total#65, customer_id#78, year_total#79]

(77) TakeOrderedAndProject
Input [1]: [customer_preferred_cust_flag#43]
Arguments: 100, [customer_preferred_cust_flag#43 ASC NULLS FIRST], [customer_preferred_cust_flag#43]

