== Physical Plan ==
* Sort (53)
+- Exchange (52)
   +- * BroadcastHashJoin Inner BuildRight (51)
      :- * Project (28)
      :  +- * Filter (27)
      :     +- * HashAggregate (26)
      :        +- Exchange (25)
      :           +- * HashAggregate (24)
      :              +- * Project (23)
      :                 +- * BroadcastHashJoin Inner BuildRight (22)
      :                    :- * Project (16)
      :                    :  +- * BroadcastHashJoin Inner BuildRight (15)
      :                    :     :- * Project (9)
      :                    :     :  +- * BroadcastHashJoin Inner BuildRight (8)
      :                    :     :     :- * Filter (3)
      :                    :     :     :  +- * ColumnarToRow (2)
      :                    :     :     :     +- Scan parquet default.inventory (1)
      :                    :     :     +- BroadcastExchange (7)
      :                    :     :        +- * Filter (6)
      :                    :     :           +- * ColumnarToRow (5)
      :                    :     :              +- Scan parquet default.item (4)
      :                    :     +- BroadcastExchange (14)
      :                    :        +- * Project (13)
      :                    :           +- * Filter (12)
      :                    :              +- * ColumnarToRow (11)
      :                    :                 +- Scan parquet default.warehouse (10)
      :                    +- BroadcastExchange (21)
      :                       +- * Project (20)
      :                          +- * Filter (19)
      :                             +- * ColumnarToRow (18)
      :                                +- Scan parquet default.date_dim (17)
      +- BroadcastExchange (50)
         +- * Project (49)
            +- * Filter (48)
               +- * HashAggregate (47)
                  +- Exchange (46)
                     +- * HashAggregate (45)
                        +- * Project (44)
                           +- * BroadcastHashJoin Inner BuildRight (43)
                              :- * Project (37)
                              :  +- * BroadcastHashJoin Inner BuildRight (36)
                              :     :- * Project (34)
                              :     :  +- * BroadcastHashJoin Inner BuildRight (33)
                              :     :     :- * Filter (31)
                              :     :     :  +- * ColumnarToRow (30)
                              :     :     :     +- Scan parquet default.inventory (29)
                              :     :     +- ReusedExchange (32)
                              :     +- ReusedExchange (35)
                              +- BroadcastExchange (42)
                                 +- * Project (41)
                                    +- * Filter (40)
                                       +- * ColumnarToRow (39)
                                          +- Scan parquet default.date_dim (38)


(1) Scan parquet default.inventory
Output [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/inventory]
PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk), IsNotNull(inv_date_sk)]
ReadSchema: struct<inv_date_sk:int,inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(2) ColumnarToRow [codegen id : 4]
Input [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]

(3) Filter [codegen id : 4]
Input [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]
Condition : ((isnotnull(inv_item_sk#2) AND isnotnull(inv_warehouse_sk#3)) AND isnotnull(inv_date_sk#1))

(4) Scan parquet default.item
Output [1]: [i_item_sk#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int>

(5) ColumnarToRow [codegen id : 1]
Input [1]: [i_item_sk#5]

(6) Filter [codegen id : 1]
Input [1]: [i_item_sk#5]
Condition : isnotnull(i_item_sk#5)

(7) BroadcastExchange
Input [1]: [i_item_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#6]

(8) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_item_sk#2]
Right keys [1]: [i_item_sk#5]
Join condition: None

(9) Project [codegen id : 4]
Output [4]: [inv_date_sk#1, inv_warehouse_sk#3, inv_quantity_on_hand#4, i_item_sk#5]
Input [5]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, i_item_sk#5]

(10) Scan parquet default.warehouse
Output [2]: [w_warehouse_sk#7, w_warehouse_name#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>

(11) ColumnarToRow [codegen id : 2]
Input [2]: [w_warehouse_sk#7, w_warehouse_name#8]

(12) Filter [codegen id : 2]
Input [2]: [w_warehouse_sk#7, w_warehouse_name#8]
Condition : isnotnull(w_warehouse_sk#7)

(13) Project [codegen id : 2]
Output [2]: [w_warehouse_sk#7, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, w_warehouse_name#8, 20, false, true) AS w_warehouse_name#9]
Input [2]: [w_warehouse_sk#7, w_warehouse_name#8]

(14) BroadcastExchange
Input [2]: [w_warehouse_sk#7, w_warehouse_name#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#10]

(15) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_warehouse_sk#3]
Right keys [1]: [w_warehouse_sk#7]
Join condition: None

(16) Project [codegen id : 4]
Output [5]: [inv_date_sk#1, inv_quantity_on_hand#4, i_item_sk#5, w_warehouse_sk#7, w_warehouse_name#9]
Input [6]: [inv_date_sk#1, inv_warehouse_sk#3, inv_quantity_on_hand#4, i_item_sk#5, w_warehouse_sk#7, w_warehouse_name#9]

(17) Scan parquet default.date_dim
Output [3]: [d_date_sk#11, d_year#12, d_moy#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,1), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(18) ColumnarToRow [codegen id : 3]
Input [3]: [d_date_sk#11, d_year#12, d_moy#13]

(19) Filter [codegen id : 3]
Input [3]: [d_date_sk#11, d_year#12, d_moy#13]
Condition : ((((isnotnull(d_year#12) AND isnotnull(d_moy#13)) AND (d_year#12 = 2001)) AND (d_moy#13 = 1)) AND isnotnull(d_date_sk#11))

(20) Project [codegen id : 3]
Output [2]: [d_date_sk#11, d_moy#13]
Input [3]: [d_date_sk#11, d_year#12, d_moy#13]

(21) BroadcastExchange
Input [2]: [d_date_sk#11, d_moy#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(22) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_date_sk#1]
Right keys [1]: [d_date_sk#11]
Join condition: None

(23) Project [codegen id : 4]
Output [5]: [inv_quantity_on_hand#4, i_item_sk#5, w_warehouse_sk#7, w_warehouse_name#9, d_moy#13]
Input [7]: [inv_date_sk#1, inv_quantity_on_hand#4, i_item_sk#5, w_warehouse_sk#7, w_warehouse_name#9, d_date_sk#11, d_moy#13]

(24) HashAggregate [codegen id : 4]
Input [5]: [inv_quantity_on_hand#4, i_item_sk#5, w_warehouse_sk#7, w_warehouse_name#9, d_moy#13]
Keys [4]: [w_warehouse_name#9, w_warehouse_sk#7, i_item_sk#5, d_moy#13]
Functions [2]: [partial_stddev_samp(cast(inv_quantity_on_hand#4 as double)), partial_avg(cast(inv_quantity_on_hand#4 as bigint))]
Aggregate Attributes [5]: [n#15, avg#16, m2#17, sum#18, count#19]
Results [9]: [w_warehouse_name#9, w_warehouse_sk#7, i_item_sk#5, d_moy#13, n#20, avg#21, m2#22, sum#23, count#24]

(25) Exchange
Input [9]: [w_warehouse_name#9, w_warehouse_sk#7, i_item_sk#5, d_moy#13, n#20, avg#21, m2#22, sum#23, count#24]
Arguments: hashpartitioning(w_warehouse_name#9, w_warehouse_sk#7, i_item_sk#5, d_moy#13, 5), ENSURE_REQUIREMENTS, [id=#25]

(26) HashAggregate [codegen id : 10]
Input [9]: [w_warehouse_name#9, w_warehouse_sk#7, i_item_sk#5, d_moy#13, n#20, avg#21, m2#22, sum#23, count#24]
Keys [4]: [w_warehouse_name#9, w_warehouse_sk#7, i_item_sk#5, d_moy#13]
Functions [2]: [stddev_samp(cast(inv_quantity_on_hand#4 as double)), avg(cast(inv_quantity_on_hand#4 as bigint))]
Aggregate Attributes [2]: [stddev_samp(cast(inv_quantity_on_hand#4 as double))#26, avg(cast(inv_quantity_on_hand#4 as bigint))#27]
Results [5]: [w_warehouse_sk#7, i_item_sk#5, d_moy#13, stddev_samp(cast(inv_quantity_on_hand#4 as double))#26 AS stdev#28, avg(cast(inv_quantity_on_hand#4 as bigint))#27 AS mean#29]

(27) Filter [codegen id : 10]
Input [5]: [w_warehouse_sk#7, i_item_sk#5, d_moy#13, stdev#28, mean#29]
Condition : (((isnotnull(mean#29) AND isnotnull(stdev#28)) AND NOT (mean#29 = 0.0)) AND ((stdev#28 / mean#29) > 1.0))

(28) Project [codegen id : 10]
Output [5]: [w_warehouse_sk#7, i_item_sk#5, d_moy#13, mean#29, CASE WHEN (mean#29 = 0.0) THEN null ELSE (stdev#28 / mean#29) END AS cov#30]
Input [5]: [w_warehouse_sk#7, i_item_sk#5, d_moy#13, stdev#28, mean#29]

(29) Scan parquet default.inventory
Output [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/inventory]
PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk), IsNotNull(inv_date_sk)]
ReadSchema: struct<inv_date_sk:int,inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(30) ColumnarToRow [codegen id : 8]
Input [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]

(31) Filter [codegen id : 8]
Input [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]
Condition : ((isnotnull(inv_item_sk#2) AND isnotnull(inv_warehouse_sk#3)) AND isnotnull(inv_date_sk#1))

(32) ReusedExchange [Reuses operator id: 7]
Output [1]: [i_item_sk#31]

(33) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [inv_item_sk#2]
Right keys [1]: [i_item_sk#31]
Join condition: None

(34) Project [codegen id : 8]
Output [4]: [inv_date_sk#1, inv_warehouse_sk#3, inv_quantity_on_hand#4, i_item_sk#31]
Input [5]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, i_item_sk#31]

(35) ReusedExchange [Reuses operator id: 14]
Output [2]: [w_warehouse_sk#32, w_warehouse_name#33]

(36) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [inv_warehouse_sk#3]
Right keys [1]: [w_warehouse_sk#32]
Join condition: None

(37) Project [codegen id : 8]
Output [5]: [inv_date_sk#1, inv_quantity_on_hand#4, i_item_sk#31, w_warehouse_sk#32, w_warehouse_name#33]
Input [6]: [inv_date_sk#1, inv_warehouse_sk#3, inv_quantity_on_hand#4, i_item_sk#31, w_warehouse_sk#32, w_warehouse_name#33]

(38) Scan parquet default.date_dim
Output [3]: [d_date_sk#34, d_year#35, d_moy#36]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(39) ColumnarToRow [codegen id : 7]
Input [3]: [d_date_sk#34, d_year#35, d_moy#36]

(40) Filter [codegen id : 7]
Input [3]: [d_date_sk#34, d_year#35, d_moy#36]
Condition : ((((isnotnull(d_year#35) AND isnotnull(d_moy#36)) AND (d_year#35 = 2001)) AND (d_moy#36 = 2)) AND isnotnull(d_date_sk#34))

(41) Project [codegen id : 7]
Output [2]: [d_date_sk#34, d_moy#36]
Input [3]: [d_date_sk#34, d_year#35, d_moy#36]

(42) BroadcastExchange
Input [2]: [d_date_sk#34, d_moy#36]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#37]

(43) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [inv_date_sk#1]
Right keys [1]: [d_date_sk#34]
Join condition: None

(44) Project [codegen id : 8]
Output [5]: [inv_quantity_on_hand#4, i_item_sk#31, w_warehouse_sk#32, w_warehouse_name#33, d_moy#36]
Input [7]: [inv_date_sk#1, inv_quantity_on_hand#4, i_item_sk#31, w_warehouse_sk#32, w_warehouse_name#33, d_date_sk#34, d_moy#36]

(45) HashAggregate [codegen id : 8]
Input [5]: [inv_quantity_on_hand#4, i_item_sk#31, w_warehouse_sk#32, w_warehouse_name#33, d_moy#36]
Keys [4]: [w_warehouse_name#33, w_warehouse_sk#32, i_item_sk#31, d_moy#36]
Functions [2]: [partial_stddev_samp(cast(inv_quantity_on_hand#4 as double)), partial_avg(cast(inv_quantity_on_hand#4 as bigint))]
Aggregate Attributes [5]: [n#38, avg#39, m2#40, sum#41, count#42]
Results [9]: [w_warehouse_name#33, w_warehouse_sk#32, i_item_sk#31, d_moy#36, n#43, avg#44, m2#45, sum#46, count#47]

(46) Exchange
Input [9]: [w_warehouse_name#33, w_warehouse_sk#32, i_item_sk#31, d_moy#36, n#43, avg#44, m2#45, sum#46, count#47]
Arguments: hashpartitioning(w_warehouse_name#33, w_warehouse_sk#32, i_item_sk#31, d_moy#36, 5), ENSURE_REQUIREMENTS, [id=#48]

(47) HashAggregate [codegen id : 9]
Input [9]: [w_warehouse_name#33, w_warehouse_sk#32, i_item_sk#31, d_moy#36, n#43, avg#44, m2#45, sum#46, count#47]
Keys [4]: [w_warehouse_name#33, w_warehouse_sk#32, i_item_sk#31, d_moy#36]
Functions [2]: [stddev_samp(cast(inv_quantity_on_hand#4 as double)), avg(cast(inv_quantity_on_hand#4 as bigint))]
Aggregate Attributes [2]: [stddev_samp(cast(inv_quantity_on_hand#4 as double))#49, avg(cast(inv_quantity_on_hand#4 as bigint))#50]
Results [5]: [w_warehouse_sk#32, i_item_sk#31, d_moy#36, stddev_samp(cast(inv_quantity_on_hand#4 as double))#49 AS stdev#51, avg(cast(inv_quantity_on_hand#4 as bigint))#50 AS mean#52]

(48) Filter [codegen id : 9]
Input [5]: [w_warehouse_sk#32, i_item_sk#31, d_moy#36, stdev#51, mean#52]
Condition : (((isnotnull(mean#52) AND isnotnull(stdev#51)) AND NOT (mean#52 = 0.0)) AND ((stdev#51 / mean#52) > 1.0))

(49) Project [codegen id : 9]
Output [5]: [w_warehouse_sk#32, i_item_sk#31, d_moy#36, mean#52, CASE WHEN (mean#52 = 0.0) THEN null ELSE (stdev#51 / mean#52) END AS cov#53]
Input [5]: [w_warehouse_sk#32, i_item_sk#31, d_moy#36, stdev#51, mean#52]

(50) BroadcastExchange
Input [5]: [w_warehouse_sk#32, i_item_sk#31, d_moy#36, mean#52, cov#53]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [id=#54]

(51) BroadcastHashJoin [codegen id : 10]
Left keys [2]: [i_item_sk#5, w_warehouse_sk#7]
Right keys [2]: [i_item_sk#31, w_warehouse_sk#32]
Join condition: None

(52) Exchange
Input [10]: [w_warehouse_sk#7, i_item_sk#5, d_moy#13, mean#29, cov#30, w_warehouse_sk#32, i_item_sk#31, d_moy#36, mean#52, cov#53]
Arguments: rangepartitioning(w_warehouse_sk#7 ASC NULLS FIRST, i_item_sk#5 ASC NULLS FIRST, d_moy#13 ASC NULLS FIRST, mean#29 ASC NULLS FIRST, cov#30 ASC NULLS FIRST, d_moy#36 ASC NULLS FIRST, mean#52 ASC NULLS FIRST, cov#53 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [id=#55]

(53) Sort [codegen id : 11]
Input [10]: [w_warehouse_sk#7, i_item_sk#5, d_moy#13, mean#29, cov#30, w_warehouse_sk#32, i_item_sk#31, d_moy#36, mean#52, cov#53]
Arguments: [w_warehouse_sk#7 ASC NULLS FIRST, i_item_sk#5 ASC NULLS FIRST, d_moy#13 ASC NULLS FIRST, mean#29 ASC NULLS FIRST, cov#30 ASC NULLS FIRST, d_moy#36 ASC NULLS FIRST, mean#52 ASC NULLS FIRST, cov#53 ASC NULLS FIRST], true, 0

