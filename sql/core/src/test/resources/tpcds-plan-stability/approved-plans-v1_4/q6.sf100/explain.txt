== Physical Plan ==
TakeOrderedAndProject (50)
+- * Project (49)
   +- * Filter (48)
      +- * HashAggregate (47)
         +- Exchange (46)
            +- * HashAggregate (45)
               +- * Project (44)
                  +- * BroadcastHashJoin Inner BuildRight (43)
                     :- * Project (37)
                     :  +- * BroadcastHashJoin Inner BuildRight (36)
                     :     :- * Project (21)
                     :     :  +- * SortMergeJoin Inner (20)
                     :     :     :- * Sort (14)
                     :     :     :  +- Exchange (13)
                     :     :     :     +- * Project (12)
                     :     :     :        +- * SortMergeJoin Inner (11)
                     :     :     :           :- * Sort (5)
                     :     :     :           :  +- Exchange (4)
                     :     :     :           :     +- * Filter (3)
                     :     :     :           :        +- * ColumnarToRow (2)
                     :     :     :           :           +- Scan parquet default.customer (1)
                     :     :     :           +- * Sort (10)
                     :     :     :              +- Exchange (9)
                     :     :     :                 +- * Filter (8)
                     :     :     :                    +- * ColumnarToRow (7)
                     :     :     :                       +- Scan parquet default.store_sales (6)
                     :     :     +- * Sort (19)
                     :     :        +- Exchange (18)
                     :     :           +- * Filter (17)
                     :     :              +- * ColumnarToRow (16)
                     :     :                 +- Scan parquet default.customer_address (15)
                     :     +- BroadcastExchange (35)
                     :        +- * Project (34)
                     :           +- * Filter (33)
                     :              +- * BroadcastHashJoin LeftOuter BuildRight (32)
                     :                 :- * Filter (24)
                     :                 :  +- * ColumnarToRow (23)
                     :                 :     +- Scan parquet default.item (22)
                     :                 +- BroadcastExchange (31)
                     :                    +- * HashAggregate (30)
                     :                       +- Exchange (29)
                     :                          +- * HashAggregate (28)
                     :                             +- * Filter (27)
                     :                                +- * ColumnarToRow (26)
                     :                                   +- Scan parquet default.item (25)
                     +- BroadcastExchange (42)
                        +- * Project (41)
                           +- * Filter (40)
                              +- * ColumnarToRow (39)
                                 +- Scan parquet default.date_dim (38)


(1) Scan parquet default.customer
Output [2]: [c_customer_sk#1, c_current_addr_sk#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 1]
Input [2]: [c_customer_sk#1, c_current_addr_sk#2]

(3) Filter [codegen id : 1]
Input [2]: [c_customer_sk#1, c_current_addr_sk#2]
Condition : (isnotnull(c_current_addr_sk#2) AND isnotnull(c_customer_sk#1))

(4) Exchange
Input [2]: [c_customer_sk#1, c_current_addr_sk#2]
Arguments: hashpartitioning(c_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#3]

(5) Sort [codegen id : 2]
Input [2]: [c_customer_sk#1, c_current_addr_sk#2]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#4, ss_item_sk#5, ss_customer_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int>

(7) ColumnarToRow [codegen id : 3]
Input [3]: [ss_sold_date_sk#4, ss_item_sk#5, ss_customer_sk#6]

(8) Filter [codegen id : 3]
Input [3]: [ss_sold_date_sk#4, ss_item_sk#5, ss_customer_sk#6]
Condition : ((isnotnull(ss_customer_sk#6) AND isnotnull(ss_sold_date_sk#4)) AND isnotnull(ss_item_sk#5))

(9) Exchange
Input [3]: [ss_sold_date_sk#4, ss_item_sk#5, ss_customer_sk#6]
Arguments: hashpartitioning(ss_customer_sk#6, 5), ENSURE_REQUIREMENTS, [id=#7]

(10) Sort [codegen id : 4]
Input [3]: [ss_sold_date_sk#4, ss_item_sk#5, ss_customer_sk#6]
Arguments: [ss_customer_sk#6 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 5]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#6]
Join condition: None

(12) Project [codegen id : 5]
Output [3]: [c_current_addr_sk#2, ss_sold_date_sk#4, ss_item_sk#5]
Input [5]: [c_customer_sk#1, c_current_addr_sk#2, ss_sold_date_sk#4, ss_item_sk#5, ss_customer_sk#6]

(13) Exchange
Input [3]: [c_current_addr_sk#2, ss_sold_date_sk#4, ss_item_sk#5]
Arguments: hashpartitioning(c_current_addr_sk#2, 5), ENSURE_REQUIREMENTS, [id=#8]

(14) Sort [codegen id : 6]
Input [3]: [c_current_addr_sk#2, ss_sold_date_sk#4, ss_item_sk#5]
Arguments: [c_current_addr_sk#2 ASC NULLS FIRST], false, 0

(15) Scan parquet default.customer_address
Output [2]: [ca_address_sk#9, ca_state#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(16) ColumnarToRow [codegen id : 7]
Input [2]: [ca_address_sk#9, ca_state#10]

(17) Filter [codegen id : 7]
Input [2]: [ca_address_sk#9, ca_state#10]
Condition : isnotnull(ca_address_sk#9)

(18) Exchange
Input [2]: [ca_address_sk#9, ca_state#10]
Arguments: hashpartitioning(ca_address_sk#9, 5), ENSURE_REQUIREMENTS, [id=#11]

(19) Sort [codegen id : 8]
Input [2]: [ca_address_sk#9, ca_state#10]
Arguments: [ca_address_sk#9 ASC NULLS FIRST], false, 0

(20) SortMergeJoin [codegen id : 13]
Left keys [1]: [c_current_addr_sk#2]
Right keys [1]: [ca_address_sk#9]
Join condition: None

(21) Project [codegen id : 13]
Output [3]: [ss_sold_date_sk#4, ss_item_sk#5, ca_state#10]
Input [5]: [c_current_addr_sk#2, ss_sold_date_sk#4, ss_item_sk#5, ca_address_sk#9, ca_state#10]

(22) Scan parquet default.item
Output [3]: [i_item_sk#12, i_current_price#13, i_category#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_category:string>

(23) ColumnarToRow [codegen id : 11]
Input [3]: [i_item_sk#12, i_current_price#13, i_category#14]

(24) Filter [codegen id : 11]
Input [3]: [i_item_sk#12, i_current_price#13, i_category#14]
Condition : (isnotnull(i_current_price#13) AND isnotnull(i_item_sk#12))

(25) Scan parquet default.item
Output [2]: [i_current_price#13, i_category#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category)]
ReadSchema: struct<i_current_price:decimal(7,2),i_category:string>

(26) ColumnarToRow [codegen id : 9]
Input [2]: [i_current_price#13, i_category#14]

(27) Filter [codegen id : 9]
Input [2]: [i_current_price#13, i_category#14]
Condition : isnotnull(i_category#14)

(28) HashAggregate [codegen id : 9]
Input [2]: [i_current_price#13, i_category#14]
Keys [1]: [i_category#14]
Functions [1]: [partial_avg(UnscaledValue(i_current_price#13))]
Aggregate Attributes [2]: [sum#15, count#16]
Results [3]: [i_category#14, sum#17, count#18]

(29) Exchange
Input [3]: [i_category#14, sum#17, count#18]
Arguments: hashpartitioning(i_category#14, 5), ENSURE_REQUIREMENTS, [id=#19]

(30) HashAggregate [codegen id : 10]
Input [3]: [i_category#14, sum#17, count#18]
Keys [1]: [i_category#14]
Functions [1]: [avg(UnscaledValue(i_current_price#13))]
Aggregate Attributes [1]: [avg(UnscaledValue(i_current_price#13))#20]
Results [2]: [cast((avg(UnscaledValue(i_current_price#13))#20 / 100.0) as decimal(11,6)) AS avg(i_current_price)#21, i_category#14 AS i_category#14#22]

(31) BroadcastExchange
Input [2]: [avg(i_current_price)#21, i_category#14#22]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true]),false), [id=#23]

(32) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [i_category#14]
Right keys [1]: [i_category#14#22]
Join condition: None

(33) Filter [codegen id : 11]
Input [5]: [i_item_sk#12, i_current_price#13, i_category#14, avg(i_current_price)#21, i_category#14#22]
Condition : (cast(i_current_price#13 as decimal(14,7)) > CheckOverflow((1.200000 * promote_precision(avg(i_current_price)#21)), DecimalType(14,7), true))

(34) Project [codegen id : 11]
Output [1]: [i_item_sk#12]
Input [5]: [i_item_sk#12, i_current_price#13, i_category#14, avg(i_current_price)#21, i_category#14#22]

(35) BroadcastExchange
Input [1]: [i_item_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#24]

(36) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_item_sk#5]
Right keys [1]: [i_item_sk#12]
Join condition: None

(37) Project [codegen id : 13]
Output [2]: [ss_sold_date_sk#4, ca_state#10]
Input [4]: [ss_sold_date_sk#4, ss_item_sk#5, ca_state#10, i_item_sk#12]

(38) Scan parquet default.date_dim
Output [2]: [d_date_sk#25, d_month_seq#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(39) ColumnarToRow [codegen id : 12]
Input [2]: [d_date_sk#25, d_month_seq#26]

(40) Filter [codegen id : 12]
Input [2]: [d_date_sk#25, d_month_seq#26]
Condition : ((isnotnull(d_month_seq#26) AND (d_month_seq#26 = Subquery scalar-subquery#27, [id=#28])) AND isnotnull(d_date_sk#25))

(41) Project [codegen id : 12]
Output [1]: [d_date_sk#25]
Input [2]: [d_date_sk#25, d_month_seq#26]

(42) BroadcastExchange
Input [1]: [d_date_sk#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#29]

(43) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#25]
Join condition: None

(44) Project [codegen id : 13]
Output [1]: [ca_state#10]
Input [3]: [ss_sold_date_sk#4, ca_state#10, d_date_sk#25]

(45) HashAggregate [codegen id : 13]
Input [1]: [ca_state#10]
Keys [1]: [ca_state#10]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#30]
Results [2]: [ca_state#10, count#31]

(46) Exchange
Input [2]: [ca_state#10, count#31]
Arguments: hashpartitioning(ca_state#10, 5), ENSURE_REQUIREMENTS, [id=#32]

(47) HashAggregate [codegen id : 14]
Input [2]: [ca_state#10, count#31]
Keys [1]: [ca_state#10]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#33]
Results [3]: [ca_state#10 AS state#34, count(1)#33 AS cnt#35, count(1)#33 AS count(1)#36]

(48) Filter [codegen id : 14]
Input [3]: [state#34, cnt#35, count(1)#36]
Condition : (count(1)#36 >= 10)

(49) Project [codegen id : 14]
Output [2]: [state#34, cnt#35]
Input [3]: [state#34, cnt#35, count(1)#36]

(50) TakeOrderedAndProject
Input [2]: [state#34, cnt#35]
Arguments: 100, [cnt#35 ASC NULLS FIRST], [state#34, cnt#35]

===== Subqueries =====

Subquery:1 Hosting operator id = 40 Hosting Expression = Subquery scalar-subquery#27, [id=#28]
* HashAggregate (57)
+- Exchange (56)
   +- * HashAggregate (55)
      +- * Project (54)
         +- * Filter (53)
            +- * ColumnarToRow (52)
               +- Scan parquet default.date_dim (51)


(51) Scan parquet default.date_dim
Output [3]: [d_month_seq#26, d_year#37, d_moy#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,1)]
ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>

(52) ColumnarToRow [codegen id : 1]
Input [3]: [d_month_seq#26, d_year#37, d_moy#38]

(53) Filter [codegen id : 1]
Input [3]: [d_month_seq#26, d_year#37, d_moy#38]
Condition : (((isnotnull(d_year#37) AND isnotnull(d_moy#38)) AND (d_year#37 = 2000)) AND (d_moy#38 = 1))

(54) Project [codegen id : 1]
Output [1]: [d_month_seq#26]
Input [3]: [d_month_seq#26, d_year#37, d_moy#38]

(55) HashAggregate [codegen id : 1]
Input [1]: [d_month_seq#26]
Keys [1]: [d_month_seq#26]
Functions: []
Aggregate Attributes: []
Results [1]: [d_month_seq#26]

(56) Exchange
Input [1]: [d_month_seq#26]
Arguments: hashpartitioning(d_month_seq#26, 5), ENSURE_REQUIREMENTS, [id=#39]

(57) HashAggregate [codegen id : 2]
Input [1]: [d_month_seq#26]
Keys [1]: [d_month_seq#26]
Functions: []
Aggregate Attributes: []
Results [1]: [d_month_seq#26]


