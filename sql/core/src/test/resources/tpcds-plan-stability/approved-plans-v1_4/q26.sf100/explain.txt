== Physical Plan ==
TakeOrderedAndProject (38)
+- * HashAggregate (37)
   +- Exchange (36)
      +- * HashAggregate (35)
         +- * Project (34)
            +- * BroadcastHashJoin Inner BuildRight (33)
               :- * Project (27)
               :  +- * SortMergeJoin Inner (26)
               :     :- * Sort (19)
               :     :  +- Exchange (18)
               :     :     +- * Project (17)
               :     :        +- * BroadcastHashJoin Inner BuildRight (16)
               :     :           :- * Project (10)
               :     :           :  +- * BroadcastHashJoin Inner BuildRight (9)
               :     :           :     :- * Filter (3)
               :     :           :     :  +- * ColumnarToRow (2)
               :     :           :     :     +- Scan parquet default.catalog_sales (1)
               :     :           :     +- BroadcastExchange (8)
               :     :           :        +- * Project (7)
               :     :           :           +- * Filter (6)
               :     :           :              +- * ColumnarToRow (5)
               :     :           :                 +- Scan parquet default.date_dim (4)
               :     :           +- BroadcastExchange (15)
               :     :              +- * Project (14)
               :     :                 +- * Filter (13)
               :     :                    +- * ColumnarToRow (12)
               :     :                       +- Scan parquet default.promotion (11)
               :     +- * Sort (25)
               :        +- Exchange (24)
               :           +- * Project (23)
               :              +- * Filter (22)
               :                 +- * ColumnarToRow (21)
               :                    +- Scan parquet default.customer_demographics (20)
               +- BroadcastExchange (32)
                  +- * Project (31)
                     +- * Filter (30)
                        +- * ColumnarToRow (29)
                           +- Scan parquet default.item (28)


(1) Scan parquet default.catalog_sales
Output [8]: [cs_sold_date_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_promo_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_item_sk), IsNotNull(cs_promo_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [8]: [cs_sold_date_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_promo_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8]

(3) Filter [codegen id : 3]
Input [8]: [cs_sold_date_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_promo_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8]
Condition : (((isnotnull(cs_bill_cdemo_sk#2) AND isnotnull(cs_sold_date_sk#1)) AND isnotnull(cs_item_sk#3)) AND isnotnull(cs_promo_sk#4))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#9, d_year#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#10]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#10]
Condition : ((isnotnull(d_year#10) AND (d_year#10 = 2000)) AND isnotnull(d_date_sk#9))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#9]
Input [2]: [d_date_sk#9, d_year#10]

(8) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#11]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#1]
Right keys [1]: [d_date_sk#9]
Join condition: None

(10) Project [codegen id : 3]
Output [7]: [cs_bill_cdemo_sk#2, cs_item_sk#3, cs_promo_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8]
Input [9]: [cs_sold_date_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_promo_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, d_date_sk#9]

(11) Scan parquet default.promotion
Output [3]: [p_promo_sk#12, p_channel_email#13, p_channel_event#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int,p_channel_email:string,p_channel_event:string>

(12) ColumnarToRow [codegen id : 2]
Input [3]: [p_promo_sk#12, p_channel_email#13, p_channel_event#14]

(13) Filter [codegen id : 2]
Input [3]: [p_promo_sk#12, p_channel_email#13, p_channel_event#14]
Condition : (((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, p_channel_email#13, 1, false, true) = N) OR (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, p_channel_event#14, 1, false, true) = N)) AND isnotnull(p_promo_sk#12))

(14) Project [codegen id : 2]
Output [1]: [p_promo_sk#12]
Input [3]: [p_promo_sk#12, p_channel_email#13, p_channel_event#14]

(15) BroadcastExchange
Input [1]: [p_promo_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15]

(16) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_promo_sk#4]
Right keys [1]: [p_promo_sk#12]
Join condition: None

(17) Project [codegen id : 3]
Output [6]: [cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8]
Input [8]: [cs_bill_cdemo_sk#2, cs_item_sk#3, cs_promo_sk#4, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, p_promo_sk#12]

(18) Exchange
Input [6]: [cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8]
Arguments: hashpartitioning(cs_bill_cdemo_sk#2, 5), ENSURE_REQUIREMENTS, [id=#16]

(19) Sort [codegen id : 4]
Input [6]: [cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8]
Arguments: [cs_bill_cdemo_sk#2 ASC NULLS FIRST], false, 0

(20) Scan parquet default.customer_demographics
Output [4]: [cd_demo_sk#17, cd_gender#18, cd_marital_status#19, cd_education_status#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>

(21) ColumnarToRow [codegen id : 5]
Input [4]: [cd_demo_sk#17, cd_gender#18, cd_marital_status#19, cd_education_status#20]

(22) Filter [codegen id : 5]
Input [4]: [cd_demo_sk#17, cd_gender#18, cd_marital_status#19, cd_education_status#20]
Condition : ((((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_gender#18, 1, false, true) = M) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_marital_status#19, 1, false, true) = S)) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, cd_education_status#20, 20, false, true) = College             )) AND isnotnull(cd_demo_sk#17))

(23) Project [codegen id : 5]
Output [1]: [cd_demo_sk#17]
Input [4]: [cd_demo_sk#17, cd_gender#18, cd_marital_status#19, cd_education_status#20]

(24) Exchange
Input [1]: [cd_demo_sk#17]
Arguments: hashpartitioning(cd_demo_sk#17, 5), ENSURE_REQUIREMENTS, [id=#21]

(25) Sort [codegen id : 6]
Input [1]: [cd_demo_sk#17]
Arguments: [cd_demo_sk#17 ASC NULLS FIRST], false, 0

(26) SortMergeJoin [codegen id : 8]
Left keys [1]: [cs_bill_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#17]
Join condition: None

(27) Project [codegen id : 8]
Output [5]: [cs_item_sk#3, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8]
Input [7]: [cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, cd_demo_sk#17]

(28) Scan parquet default.item
Output [2]: [i_item_sk#22, i_item_id#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(29) ColumnarToRow [codegen id : 7]
Input [2]: [i_item_sk#22, i_item_id#23]

(30) Filter [codegen id : 7]
Input [2]: [i_item_sk#22, i_item_id#23]
Condition : isnotnull(i_item_sk#22)

(31) Project [codegen id : 7]
Output [2]: [i_item_sk#22, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_item_id#23, 16, false, true) AS i_item_id#24]
Input [2]: [i_item_sk#22, i_item_id#23]

(32) BroadcastExchange
Input [2]: [i_item_sk#22, i_item_id#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#25]

(33) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [i_item_sk#22]
Join condition: None

(34) Project [codegen id : 8]
Output [5]: [cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, i_item_id#24]
Input [7]: [cs_item_sk#3, cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, i_item_sk#22, i_item_id#24]

(35) HashAggregate [codegen id : 8]
Input [5]: [cs_quantity#5, cs_list_price#6, cs_sales_price#7, cs_coupon_amt#8, i_item_id#24]
Keys [1]: [i_item_id#24]
Functions [4]: [partial_avg(cast(cs_quantity#5 as bigint)), partial_avg(UnscaledValue(cs_list_price#6)), partial_avg(UnscaledValue(cs_coupon_amt#8)), partial_avg(UnscaledValue(cs_sales_price#7))]
Aggregate Attributes [8]: [sum#26, count#27, sum#28, count#29, sum#30, count#31, sum#32, count#33]
Results [9]: [i_item_id#24, sum#34, count#35, sum#36, count#37, sum#38, count#39, sum#40, count#41]

(36) Exchange
Input [9]: [i_item_id#24, sum#34, count#35, sum#36, count#37, sum#38, count#39, sum#40, count#41]
Arguments: hashpartitioning(i_item_id#24, 5), ENSURE_REQUIREMENTS, [id=#42]

(37) HashAggregate [codegen id : 9]
Input [9]: [i_item_id#24, sum#34, count#35, sum#36, count#37, sum#38, count#39, sum#40, count#41]
Keys [1]: [i_item_id#24]
Functions [4]: [avg(cast(cs_quantity#5 as bigint)), avg(UnscaledValue(cs_list_price#6)), avg(UnscaledValue(cs_coupon_amt#8)), avg(UnscaledValue(cs_sales_price#7))]
Aggregate Attributes [4]: [avg(cast(cs_quantity#5 as bigint))#43, avg(UnscaledValue(cs_list_price#6))#44, avg(UnscaledValue(cs_coupon_amt#8))#45, avg(UnscaledValue(cs_sales_price#7))#46]
Results [5]: [i_item_id#24, avg(cast(cs_quantity#5 as bigint))#43 AS agg1#47, cast((avg(UnscaledValue(cs_list_price#6))#44 / 100.0) as decimal(11,6)) AS agg2#48, cast((avg(UnscaledValue(cs_coupon_amt#8))#45 / 100.0) as decimal(11,6)) AS agg3#49, cast((avg(UnscaledValue(cs_sales_price#7))#46 / 100.0) as decimal(11,6)) AS agg4#50]

(38) TakeOrderedAndProject
Input [5]: [i_item_id#24, agg1#47, agg2#48, agg3#49, agg4#50]
Arguments: 100, [i_item_id#24 ASC NULLS FIRST], [i_item_id#24, agg1#47, agg2#48, agg3#49, agg4#50]

