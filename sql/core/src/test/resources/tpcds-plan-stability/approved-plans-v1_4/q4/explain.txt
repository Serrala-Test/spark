== Physical Plan ==
TakeOrderedAndProject (112)
+- * Project (111)
   +- * BroadcastHashJoin Inner BuildRight (110)
      :- * Project (92)
      :  +- * BroadcastHashJoin Inner BuildRight (91)
      :     :- * Project (72)
      :     :  +- * BroadcastHashJoin Inner BuildRight (71)
      :     :     :- * Project (53)
      :     :     :  +- * BroadcastHashJoin Inner BuildRight (52)
      :     :     :     :- * BroadcastHashJoin Inner BuildRight (33)
      :     :     :     :  :- * Filter (16)
      :     :     :     :  :  +- * HashAggregate (15)
      :     :     :     :  :     +- Exchange (14)
      :     :     :     :  :        +- * HashAggregate (13)
      :     :     :     :  :           +- * Project (12)
      :     :     :     :  :              +- * BroadcastHashJoin Inner BuildRight (11)
      :     :     :     :  :                 :- * Project (9)
      :     :     :     :  :                 :  +- * BroadcastHashJoin Inner BuildRight (8)
      :     :     :     :  :                 :     :- * Filter (3)
      :     :     :     :  :                 :     :  +- * ColumnarToRow (2)
      :     :     :     :  :                 :     :     +- Scan parquet spark_catalog.default.customer (1)
      :     :     :     :  :                 :     +- BroadcastExchange (7)
      :     :     :     :  :                 :        +- * Filter (6)
      :     :     :     :  :                 :           +- * ColumnarToRow (5)
      :     :     :     :  :                 :              +- Scan parquet spark_catalog.default.store_sales (4)
      :     :     :     :  :                 +- ReusedExchange (10)
      :     :     :     :  +- BroadcastExchange (32)
      :     :     :     :     +- * HashAggregate (31)
      :     :     :     :        +- Exchange (30)
      :     :     :     :           +- * HashAggregate (29)
      :     :     :     :              +- * Project (28)
      :     :     :     :                 +- * BroadcastHashJoin Inner BuildRight (27)
      :     :     :     :                    :- * Project (25)
      :     :     :     :                    :  +- * BroadcastHashJoin Inner BuildRight (24)
      :     :     :     :                    :     :- * Filter (19)
      :     :     :     :                    :     :  +- * ColumnarToRow (18)
      :     :     :     :                    :     :     +- Scan parquet spark_catalog.default.customer (17)
      :     :     :     :                    :     +- BroadcastExchange (23)
      :     :     :     :                    :        +- * Filter (22)
      :     :     :     :                    :           +- * ColumnarToRow (21)
      :     :     :     :                    :              +- Scan parquet spark_catalog.default.store_sales (20)
      :     :     :     :                    +- ReusedExchange (26)
      :     :     :     +- BroadcastExchange (51)
      :     :     :        +- * Project (50)
      :     :     :           +- * Filter (49)
      :     :     :              +- * HashAggregate (48)
      :     :     :                 +- Exchange (47)
      :     :     :                    +- * HashAggregate (46)
      :     :     :                       +- * Project (45)
      :     :     :                          +- * BroadcastHashJoin Inner BuildRight (44)
      :     :     :                             :- * Project (42)
      :     :     :                             :  +- * BroadcastHashJoin Inner BuildRight (41)
      :     :     :                             :     :- * Filter (36)
      :     :     :                             :     :  +- * ColumnarToRow (35)
      :     :     :                             :     :     +- Scan parquet spark_catalog.default.customer (34)
      :     :     :                             :     +- BroadcastExchange (40)
      :     :     :                             :        +- * Filter (39)
      :     :     :                             :           +- * ColumnarToRow (38)
      :     :     :                             :              +- Scan parquet spark_catalog.default.catalog_sales (37)
      :     :     :                             +- ReusedExchange (43)
      :     :     +- BroadcastExchange (70)
      :     :        +- * Project (69)
      :     :           +- * HashAggregate (68)
      :     :              +- Exchange (67)
      :     :                 +- * HashAggregate (66)
      :     :                    +- * Project (65)
      :     :                       +- * BroadcastHashJoin Inner BuildRight (64)
      :     :                          :- * Project (62)
      :     :                          :  +- * BroadcastHashJoin Inner BuildRight (61)
      :     :                          :     :- * Filter (56)
      :     :                          :     :  +- * ColumnarToRow (55)
      :     :                          :     :     +- Scan parquet spark_catalog.default.customer (54)
      :     :                          :     +- BroadcastExchange (60)
      :     :                          :        +- * Filter (59)
      :     :                          :           +- * ColumnarToRow (58)
      :     :                          :              +- Scan parquet spark_catalog.default.catalog_sales (57)
      :     :                          +- ReusedExchange (63)
      :     +- BroadcastExchange (90)
      :        +- * Project (89)
      :           +- * Filter (88)
      :              +- * HashAggregate (87)
      :                 +- Exchange (86)
      :                    +- * HashAggregate (85)
      :                       +- * Project (84)
      :                          +- * BroadcastHashJoin Inner BuildRight (83)
      :                             :- * Project (81)
      :                             :  +- * BroadcastHashJoin Inner BuildRight (80)
      :                             :     :- * Filter (75)
      :                             :     :  +- * ColumnarToRow (74)
      :                             :     :     +- Scan parquet spark_catalog.default.customer (73)
      :                             :     +- BroadcastExchange (79)
      :                             :        +- * Filter (78)
      :                             :           +- * ColumnarToRow (77)
      :                             :              +- Scan parquet spark_catalog.default.web_sales (76)
      :                             +- ReusedExchange (82)
      +- BroadcastExchange (109)
         +- * Project (108)
            +- * HashAggregate (107)
               +- Exchange (106)
                  +- * HashAggregate (105)
                     +- * Project (104)
                        +- * BroadcastHashJoin Inner BuildRight (103)
                           :- * Project (101)
                           :  +- * BroadcastHashJoin Inner BuildRight (100)
                           :     :- * Filter (95)
                           :     :  +- * ColumnarToRow (94)
                           :     :     +- Scan parquet spark_catalog.default.customer (93)
                           :     +- BroadcastExchange (99)
                           :        +- * Filter (98)
                           :           +- * ColumnarToRow (97)
                           :              +- Scan parquet spark_catalog.default.web_sales (96)
                           +- ReusedExchange (102)


(1) Scan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(2) ColumnarToRow [codegen id : 3]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(3) Filter [codegen id : 3]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(4) Scan parquet spark_catalog.default.store_sales
Output [6]: [ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, ss_sold_date_sk#14]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#14), dynamicpruningexpression(ss_sold_date_sk#14 IN dynamicpruning#15)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(5) ColumnarToRow [codegen id : 1]
Input [6]: [ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, ss_sold_date_sk#14]

(6) Filter [codegen id : 1]
Input [6]: [ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, ss_sold_date_sk#14]
Condition : isnotnull(ss_customer_sk#9)

(7) BroadcastExchange
Input [6]: [ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, ss_sold_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#9]
Join type: Inner
Join condition: None

(9) Project [codegen id : 3]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, ss_sold_date_sk#14]
Input [14]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, ss_sold_date_sk#14]

(10) ReusedExchange [Reuses operator id: 116]
Output [2]: [d_date_sk#16, d_year#17]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#14]
Right keys [1]: [d_date_sk#16]
Join type: Inner
Join condition: None

(12) Project [codegen id : 3]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, d_year#17]
Input [14]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, ss_sold_date_sk#14, d_date_sk#16, d_year#17]

(13) HashAggregate [codegen id : 3]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, d_year#17]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17]
Functions [1]: [partial_sum(((((ss_ext_list_price#13 - ss_ext_wholesale_cost#12) - ss_ext_discount_amt#10) + ss_ext_sales_price#11) / 2))]
Aggregate Attributes [2]: [sum#18, isEmpty#19]
Results [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#20, isEmpty#21]

(14) Exchange
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#20, isEmpty#21]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(15) HashAggregate [codegen id : 24]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#20, isEmpty#21]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17]
Functions [1]: [sum(((((ss_ext_list_price#13 - ss_ext_wholesale_cost#12) - ss_ext_discount_amt#10) + ss_ext_sales_price#11) / 2))]
Aggregate Attributes [1]: [sum(((((ss_ext_list_price#13 - ss_ext_wholesale_cost#12) - ss_ext_discount_amt#10) + ss_ext_sales_price#11) / 2))#22]
Results [2]: [c_customer_id#2 AS customer_id#23, sum(((((ss_ext_list_price#13 - ss_ext_wholesale_cost#12) - ss_ext_discount_amt#10) + ss_ext_sales_price#11) / 2))#22 AS year_total#24]

(16) Filter [codegen id : 24]
Input [2]: [customer_id#23, year_total#24]
Condition : (isnotnull(year_total#24) AND (year_total#24 > 0.000000))

(17) Scan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#25, c_customer_id#26, c_first_name#27, c_last_name#28, c_preferred_cust_flag#29, c_birth_country#30, c_login#31, c_email_address#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(18) ColumnarToRow [codegen id : 6]
Input [8]: [c_customer_sk#25, c_customer_id#26, c_first_name#27, c_last_name#28, c_preferred_cust_flag#29, c_birth_country#30, c_login#31, c_email_address#32]

(19) Filter [codegen id : 6]
Input [8]: [c_customer_sk#25, c_customer_id#26, c_first_name#27, c_last_name#28, c_preferred_cust_flag#29, c_birth_country#30, c_login#31, c_email_address#32]
Condition : (isnotnull(c_customer_sk#25) AND isnotnull(c_customer_id#26))

(20) Scan parquet spark_catalog.default.store_sales
Output [6]: [ss_customer_sk#33, ss_ext_discount_amt#34, ss_ext_sales_price#35, ss_ext_wholesale_cost#36, ss_ext_list_price#37, ss_sold_date_sk#38]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#38), dynamicpruningexpression(ss_sold_date_sk#38 IN dynamicpruning#39)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(21) ColumnarToRow [codegen id : 4]
Input [6]: [ss_customer_sk#33, ss_ext_discount_amt#34, ss_ext_sales_price#35, ss_ext_wholesale_cost#36, ss_ext_list_price#37, ss_sold_date_sk#38]

(22) Filter [codegen id : 4]
Input [6]: [ss_customer_sk#33, ss_ext_discount_amt#34, ss_ext_sales_price#35, ss_ext_wholesale_cost#36, ss_ext_list_price#37, ss_sold_date_sk#38]
Condition : isnotnull(ss_customer_sk#33)

(23) BroadcastExchange
Input [6]: [ss_customer_sk#33, ss_ext_discount_amt#34, ss_ext_sales_price#35, ss_ext_wholesale_cost#36, ss_ext_list_price#37, ss_sold_date_sk#38]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(24) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [c_customer_sk#25]
Right keys [1]: [ss_customer_sk#33]
Join type: Inner
Join condition: None

(25) Project [codegen id : 6]
Output [12]: [c_customer_id#26, c_first_name#27, c_last_name#28, c_preferred_cust_flag#29, c_birth_country#30, c_login#31, c_email_address#32, ss_ext_discount_amt#34, ss_ext_sales_price#35, ss_ext_wholesale_cost#36, ss_ext_list_price#37, ss_sold_date_sk#38]
Input [14]: [c_customer_sk#25, c_customer_id#26, c_first_name#27, c_last_name#28, c_preferred_cust_flag#29, c_birth_country#30, c_login#31, c_email_address#32, ss_customer_sk#33, ss_ext_discount_amt#34, ss_ext_sales_price#35, ss_ext_wholesale_cost#36, ss_ext_list_price#37, ss_sold_date_sk#38]

(26) ReusedExchange [Reuses operator id: 120]
Output [2]: [d_date_sk#40, d_year#41]

(27) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#38]
Right keys [1]: [d_date_sk#40]
Join type: Inner
Join condition: None

(28) Project [codegen id : 6]
Output [12]: [c_customer_id#26, c_first_name#27, c_last_name#28, c_preferred_cust_flag#29, c_birth_country#30, c_login#31, c_email_address#32, ss_ext_discount_amt#34, ss_ext_sales_price#35, ss_ext_wholesale_cost#36, ss_ext_list_price#37, d_year#41]
Input [14]: [c_customer_id#26, c_first_name#27, c_last_name#28, c_preferred_cust_flag#29, c_birth_country#30, c_login#31, c_email_address#32, ss_ext_discount_amt#34, ss_ext_sales_price#35, ss_ext_wholesale_cost#36, ss_ext_list_price#37, ss_sold_date_sk#38, d_date_sk#40, d_year#41]

(29) HashAggregate [codegen id : 6]
Input [12]: [c_customer_id#26, c_first_name#27, c_last_name#28, c_preferred_cust_flag#29, c_birth_country#30, c_login#31, c_email_address#32, ss_ext_discount_amt#34, ss_ext_sales_price#35, ss_ext_wholesale_cost#36, ss_ext_list_price#37, d_year#41]
Keys [8]: [c_customer_id#26, c_first_name#27, c_last_name#28, c_preferred_cust_flag#29, c_birth_country#30, c_login#31, c_email_address#32, d_year#41]
Functions [1]: [partial_sum(((((ss_ext_list_price#37 - ss_ext_wholesale_cost#36) - ss_ext_discount_amt#34) + ss_ext_sales_price#35) / 2))]
Aggregate Attributes [2]: [sum#42, isEmpty#43]
Results [10]: [c_customer_id#26, c_first_name#27, c_last_name#28, c_preferred_cust_flag#29, c_birth_country#30, c_login#31, c_email_address#32, d_year#41, sum#44, isEmpty#45]

(30) Exchange
Input [10]: [c_customer_id#26, c_first_name#27, c_last_name#28, c_preferred_cust_flag#29, c_birth_country#30, c_login#31, c_email_address#32, d_year#41, sum#44, isEmpty#45]
Arguments: hashpartitioning(c_customer_id#26, c_first_name#27, c_last_name#28, c_preferred_cust_flag#29, c_birth_country#30, c_login#31, c_email_address#32, d_year#41, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(31) HashAggregate [codegen id : 7]
Input [10]: [c_customer_id#26, c_first_name#27, c_last_name#28, c_preferred_cust_flag#29, c_birth_country#30, c_login#31, c_email_address#32, d_year#41, sum#44, isEmpty#45]
Keys [8]: [c_customer_id#26, c_first_name#27, c_last_name#28, c_preferred_cust_flag#29, c_birth_country#30, c_login#31, c_email_address#32, d_year#41]
Functions [1]: [sum(((((ss_ext_list_price#37 - ss_ext_wholesale_cost#36) - ss_ext_discount_amt#34) + ss_ext_sales_price#35) / 2))]
Aggregate Attributes [1]: [sum(((((ss_ext_list_price#37 - ss_ext_wholesale_cost#36) - ss_ext_discount_amt#34) + ss_ext_sales_price#35) / 2))#22]
Results [8]: [c_customer_id#26 AS customer_id#46, c_first_name#27 AS customer_first_name#47, c_last_name#28 AS customer_last_name#48, c_preferred_cust_flag#29 AS customer_preferred_cust_flag#49, c_birth_country#30 AS customer_birth_country#50, c_login#31 AS customer_login#51, c_email_address#32 AS customer_email_address#52, sum(((((ss_ext_list_price#37 - ss_ext_wholesale_cost#36) - ss_ext_discount_amt#34) + ss_ext_sales_price#35) / 2))#22 AS year_total#53]

(32) BroadcastExchange
Input [8]: [customer_id#46, customer_first_name#47, customer_last_name#48, customer_preferred_cust_flag#49, customer_birth_country#50, customer_login#51, customer_email_address#52, year_total#53]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=5]

(33) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [customer_id#23]
Right keys [1]: [customer_id#46]
Join type: Inner
Join condition: None

(34) Scan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#54, c_customer_id#55, c_first_name#56, c_last_name#57, c_preferred_cust_flag#58, c_birth_country#59, c_login#60, c_email_address#61]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(35) ColumnarToRow [codegen id : 10]
Input [8]: [c_customer_sk#54, c_customer_id#55, c_first_name#56, c_last_name#57, c_preferred_cust_flag#58, c_birth_country#59, c_login#60, c_email_address#61]

(36) Filter [codegen id : 10]
Input [8]: [c_customer_sk#54, c_customer_id#55, c_first_name#56, c_last_name#57, c_preferred_cust_flag#58, c_birth_country#59, c_login#60, c_email_address#61]
Condition : (isnotnull(c_customer_sk#54) AND isnotnull(c_customer_id#55))

(37) Scan parquet spark_catalog.default.catalog_sales
Output [6]: [cs_bill_customer_sk#62, cs_ext_discount_amt#63, cs_ext_sales_price#64, cs_ext_wholesale_cost#65, cs_ext_list_price#66, cs_sold_date_sk#67]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#67), dynamicpruningexpression(cs_sold_date_sk#67 IN dynamicpruning#15)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2)>

(38) ColumnarToRow [codegen id : 8]
Input [6]: [cs_bill_customer_sk#62, cs_ext_discount_amt#63, cs_ext_sales_price#64, cs_ext_wholesale_cost#65, cs_ext_list_price#66, cs_sold_date_sk#67]

(39) Filter [codegen id : 8]
Input [6]: [cs_bill_customer_sk#62, cs_ext_discount_amt#63, cs_ext_sales_price#64, cs_ext_wholesale_cost#65, cs_ext_list_price#66, cs_sold_date_sk#67]
Condition : isnotnull(cs_bill_customer_sk#62)

(40) BroadcastExchange
Input [6]: [cs_bill_customer_sk#62, cs_ext_discount_amt#63, cs_ext_sales_price#64, cs_ext_wholesale_cost#65, cs_ext_list_price#66, cs_sold_date_sk#67]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=6]

(41) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [c_customer_sk#54]
Right keys [1]: [cs_bill_customer_sk#62]
Join type: Inner
Join condition: None

(42) Project [codegen id : 10]
Output [12]: [c_customer_id#55, c_first_name#56, c_last_name#57, c_preferred_cust_flag#58, c_birth_country#59, c_login#60, c_email_address#61, cs_ext_discount_amt#63, cs_ext_sales_price#64, cs_ext_wholesale_cost#65, cs_ext_list_price#66, cs_sold_date_sk#67]
Input [14]: [c_customer_sk#54, c_customer_id#55, c_first_name#56, c_last_name#57, c_preferred_cust_flag#58, c_birth_country#59, c_login#60, c_email_address#61, cs_bill_customer_sk#62, cs_ext_discount_amt#63, cs_ext_sales_price#64, cs_ext_wholesale_cost#65, cs_ext_list_price#66, cs_sold_date_sk#67]

(43) ReusedExchange [Reuses operator id: 116]
Output [2]: [d_date_sk#68, d_year#69]

(44) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#67]
Right keys [1]: [d_date_sk#68]
Join type: Inner
Join condition: None

(45) Project [codegen id : 10]
Output [12]: [c_customer_id#55, c_first_name#56, c_last_name#57, c_preferred_cust_flag#58, c_birth_country#59, c_login#60, c_email_address#61, cs_ext_discount_amt#63, cs_ext_sales_price#64, cs_ext_wholesale_cost#65, cs_ext_list_price#66, d_year#69]
Input [14]: [c_customer_id#55, c_first_name#56, c_last_name#57, c_preferred_cust_flag#58, c_birth_country#59, c_login#60, c_email_address#61, cs_ext_discount_amt#63, cs_ext_sales_price#64, cs_ext_wholesale_cost#65, cs_ext_list_price#66, cs_sold_date_sk#67, d_date_sk#68, d_year#69]

(46) HashAggregate [codegen id : 10]
Input [12]: [c_customer_id#55, c_first_name#56, c_last_name#57, c_preferred_cust_flag#58, c_birth_country#59, c_login#60, c_email_address#61, cs_ext_discount_amt#63, cs_ext_sales_price#64, cs_ext_wholesale_cost#65, cs_ext_list_price#66, d_year#69]
Keys [8]: [c_customer_id#55, c_first_name#56, c_last_name#57, c_preferred_cust_flag#58, c_birth_country#59, c_login#60, c_email_address#61, d_year#69]
Functions [1]: [partial_sum(((((cs_ext_list_price#66 - cs_ext_wholesale_cost#65) - cs_ext_discount_amt#63) + cs_ext_sales_price#64) / 2))]
Aggregate Attributes [2]: [sum#70, isEmpty#71]
Results [10]: [c_customer_id#55, c_first_name#56, c_last_name#57, c_preferred_cust_flag#58, c_birth_country#59, c_login#60, c_email_address#61, d_year#69, sum#72, isEmpty#73]

(47) Exchange
Input [10]: [c_customer_id#55, c_first_name#56, c_last_name#57, c_preferred_cust_flag#58, c_birth_country#59, c_login#60, c_email_address#61, d_year#69, sum#72, isEmpty#73]
Arguments: hashpartitioning(c_customer_id#55, c_first_name#56, c_last_name#57, c_preferred_cust_flag#58, c_birth_country#59, c_login#60, c_email_address#61, d_year#69, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(48) HashAggregate [codegen id : 11]
Input [10]: [c_customer_id#55, c_first_name#56, c_last_name#57, c_preferred_cust_flag#58, c_birth_country#59, c_login#60, c_email_address#61, d_year#69, sum#72, isEmpty#73]
Keys [8]: [c_customer_id#55, c_first_name#56, c_last_name#57, c_preferred_cust_flag#58, c_birth_country#59, c_login#60, c_email_address#61, d_year#69]
Functions [1]: [sum(((((cs_ext_list_price#66 - cs_ext_wholesale_cost#65) - cs_ext_discount_amt#63) + cs_ext_sales_price#64) / 2))]
Aggregate Attributes [1]: [sum(((((cs_ext_list_price#66 - cs_ext_wholesale_cost#65) - cs_ext_discount_amt#63) + cs_ext_sales_price#64) / 2))#74]
Results [2]: [c_customer_id#55 AS customer_id#75, sum(((((cs_ext_list_price#66 - cs_ext_wholesale_cost#65) - cs_ext_discount_amt#63) + cs_ext_sales_price#64) / 2))#74 AS year_total#76]

(49) Filter [codegen id : 11]
Input [2]: [customer_id#75, year_total#76]
Condition : (isnotnull(year_total#76) AND (year_total#76 > 0.000000))

(50) Project [codegen id : 11]
Output [2]: [customer_id#75 AS customer_id#77, year_total#76 AS year_total#78]
Input [2]: [customer_id#75, year_total#76]

(51) BroadcastExchange
Input [2]: [customer_id#77, year_total#78]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=8]

(52) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [customer_id#23]
Right keys [1]: [customer_id#77]
Join type: Inner
Join condition: None

(53) Project [codegen id : 24]
Output [11]: [customer_id#23, year_total#24, customer_id#46, customer_first_name#47, customer_last_name#48, customer_preferred_cust_flag#49, customer_birth_country#50, customer_login#51, customer_email_address#52, year_total#53, year_total#78]
Input [12]: [customer_id#23, year_total#24, customer_id#46, customer_first_name#47, customer_last_name#48, customer_preferred_cust_flag#49, customer_birth_country#50, customer_login#51, customer_email_address#52, year_total#53, customer_id#77, year_total#78]

(54) Scan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#79, c_customer_id#80, c_first_name#81, c_last_name#82, c_preferred_cust_flag#83, c_birth_country#84, c_login#85, c_email_address#86]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(55) ColumnarToRow [codegen id : 14]
Input [8]: [c_customer_sk#79, c_customer_id#80, c_first_name#81, c_last_name#82, c_preferred_cust_flag#83, c_birth_country#84, c_login#85, c_email_address#86]

(56) Filter [codegen id : 14]
Input [8]: [c_customer_sk#79, c_customer_id#80, c_first_name#81, c_last_name#82, c_preferred_cust_flag#83, c_birth_country#84, c_login#85, c_email_address#86]
Condition : (isnotnull(c_customer_sk#79) AND isnotnull(c_customer_id#80))

(57) Scan parquet spark_catalog.default.catalog_sales
Output [6]: [cs_bill_customer_sk#87, cs_ext_discount_amt#88, cs_ext_sales_price#89, cs_ext_wholesale_cost#90, cs_ext_list_price#91, cs_sold_date_sk#92]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#92), dynamicpruningexpression(cs_sold_date_sk#92 IN dynamicpruning#39)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2)>

(58) ColumnarToRow [codegen id : 12]
Input [6]: [cs_bill_customer_sk#87, cs_ext_discount_amt#88, cs_ext_sales_price#89, cs_ext_wholesale_cost#90, cs_ext_list_price#91, cs_sold_date_sk#92]

(59) Filter [codegen id : 12]
Input [6]: [cs_bill_customer_sk#87, cs_ext_discount_amt#88, cs_ext_sales_price#89, cs_ext_wholesale_cost#90, cs_ext_list_price#91, cs_sold_date_sk#92]
Condition : isnotnull(cs_bill_customer_sk#87)

(60) BroadcastExchange
Input [6]: [cs_bill_customer_sk#87, cs_ext_discount_amt#88, cs_ext_sales_price#89, cs_ext_wholesale_cost#90, cs_ext_list_price#91, cs_sold_date_sk#92]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=9]

(61) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [c_customer_sk#79]
Right keys [1]: [cs_bill_customer_sk#87]
Join type: Inner
Join condition: None

(62) Project [codegen id : 14]
Output [12]: [c_customer_id#80, c_first_name#81, c_last_name#82, c_preferred_cust_flag#83, c_birth_country#84, c_login#85, c_email_address#86, cs_ext_discount_amt#88, cs_ext_sales_price#89, cs_ext_wholesale_cost#90, cs_ext_list_price#91, cs_sold_date_sk#92]
Input [14]: [c_customer_sk#79, c_customer_id#80, c_first_name#81, c_last_name#82, c_preferred_cust_flag#83, c_birth_country#84, c_login#85, c_email_address#86, cs_bill_customer_sk#87, cs_ext_discount_amt#88, cs_ext_sales_price#89, cs_ext_wholesale_cost#90, cs_ext_list_price#91, cs_sold_date_sk#92]

(63) ReusedExchange [Reuses operator id: 120]
Output [2]: [d_date_sk#93, d_year#94]

(64) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [cs_sold_date_sk#92]
Right keys [1]: [d_date_sk#93]
Join type: Inner
Join condition: None

(65) Project [codegen id : 14]
Output [12]: [c_customer_id#80, c_first_name#81, c_last_name#82, c_preferred_cust_flag#83, c_birth_country#84, c_login#85, c_email_address#86, cs_ext_discount_amt#88, cs_ext_sales_price#89, cs_ext_wholesale_cost#90, cs_ext_list_price#91, d_year#94]
Input [14]: [c_customer_id#80, c_first_name#81, c_last_name#82, c_preferred_cust_flag#83, c_birth_country#84, c_login#85, c_email_address#86, cs_ext_discount_amt#88, cs_ext_sales_price#89, cs_ext_wholesale_cost#90, cs_ext_list_price#91, cs_sold_date_sk#92, d_date_sk#93, d_year#94]

(66) HashAggregate [codegen id : 14]
Input [12]: [c_customer_id#80, c_first_name#81, c_last_name#82, c_preferred_cust_flag#83, c_birth_country#84, c_login#85, c_email_address#86, cs_ext_discount_amt#88, cs_ext_sales_price#89, cs_ext_wholesale_cost#90, cs_ext_list_price#91, d_year#94]
Keys [8]: [c_customer_id#80, c_first_name#81, c_last_name#82, c_preferred_cust_flag#83, c_birth_country#84, c_login#85, c_email_address#86, d_year#94]
Functions [1]: [partial_sum(((((cs_ext_list_price#91 - cs_ext_wholesale_cost#90) - cs_ext_discount_amt#88) + cs_ext_sales_price#89) / 2))]
Aggregate Attributes [2]: [sum#95, isEmpty#96]
Results [10]: [c_customer_id#80, c_first_name#81, c_last_name#82, c_preferred_cust_flag#83, c_birth_country#84, c_login#85, c_email_address#86, d_year#94, sum#97, isEmpty#98]

(67) Exchange
Input [10]: [c_customer_id#80, c_first_name#81, c_last_name#82, c_preferred_cust_flag#83, c_birth_country#84, c_login#85, c_email_address#86, d_year#94, sum#97, isEmpty#98]
Arguments: hashpartitioning(c_customer_id#80, c_first_name#81, c_last_name#82, c_preferred_cust_flag#83, c_birth_country#84, c_login#85, c_email_address#86, d_year#94, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(68) HashAggregate [codegen id : 15]
Input [10]: [c_customer_id#80, c_first_name#81, c_last_name#82, c_preferred_cust_flag#83, c_birth_country#84, c_login#85, c_email_address#86, d_year#94, sum#97, isEmpty#98]
Keys [8]: [c_customer_id#80, c_first_name#81, c_last_name#82, c_preferred_cust_flag#83, c_birth_country#84, c_login#85, c_email_address#86, d_year#94]
Functions [1]: [sum(((((cs_ext_list_price#91 - cs_ext_wholesale_cost#90) - cs_ext_discount_amt#88) + cs_ext_sales_price#89) / 2))]
Aggregate Attributes [1]: [sum(((((cs_ext_list_price#91 - cs_ext_wholesale_cost#90) - cs_ext_discount_amt#88) + cs_ext_sales_price#89) / 2))#74]
Results [2]: [c_customer_id#80 AS customer_id#99, sum(((((cs_ext_list_price#91 - cs_ext_wholesale_cost#90) - cs_ext_discount_amt#88) + cs_ext_sales_price#89) / 2))#74 AS year_total#100]

(69) Project [codegen id : 15]
Output [2]: [customer_id#99 AS customer_id#101, year_total#100 AS year_total#102]
Input [2]: [customer_id#99, year_total#100]

(70) BroadcastExchange
Input [2]: [customer_id#101, year_total#102]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=11]

(71) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [customer_id#23]
Right keys [1]: [customer_id#101]
Join type: Inner
Join condition: (CASE WHEN (year_total#78 > 0.000000) THEN (year_total#102 / year_total#78) END > CASE WHEN (year_total#24 > 0.000000) THEN (year_total#53 / year_total#24) END)

(72) Project [codegen id : 24]
Output [10]: [customer_id#23, customer_id#46, customer_first_name#47, customer_last_name#48, customer_preferred_cust_flag#49, customer_birth_country#50, customer_login#51, customer_email_address#52, year_total#78, year_total#102]
Input [13]: [customer_id#23, year_total#24, customer_id#46, customer_first_name#47, customer_last_name#48, customer_preferred_cust_flag#49, customer_birth_country#50, customer_login#51, customer_email_address#52, year_total#53, year_total#78, customer_id#101, year_total#102]

(73) Scan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#103, c_customer_id#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_country#108, c_login#109, c_email_address#110]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(74) ColumnarToRow [codegen id : 18]
Input [8]: [c_customer_sk#103, c_customer_id#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_country#108, c_login#109, c_email_address#110]

(75) Filter [codegen id : 18]
Input [8]: [c_customer_sk#103, c_customer_id#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_country#108, c_login#109, c_email_address#110]
Condition : (isnotnull(c_customer_sk#103) AND isnotnull(c_customer_id#104))

(76) Scan parquet spark_catalog.default.web_sales
Output [6]: [ws_bill_customer_sk#111, ws_ext_discount_amt#112, ws_ext_sales_price#113, ws_ext_wholesale_cost#114, ws_ext_list_price#115, ws_sold_date_sk#116]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#116), dynamicpruningexpression(ws_sold_date_sk#116 IN dynamicpruning#15)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_price:decimal(7,2),ws_ext_wholesale_cost:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(77) ColumnarToRow [codegen id : 16]
Input [6]: [ws_bill_customer_sk#111, ws_ext_discount_amt#112, ws_ext_sales_price#113, ws_ext_wholesale_cost#114, ws_ext_list_price#115, ws_sold_date_sk#116]

(78) Filter [codegen id : 16]
Input [6]: [ws_bill_customer_sk#111, ws_ext_discount_amt#112, ws_ext_sales_price#113, ws_ext_wholesale_cost#114, ws_ext_list_price#115, ws_sold_date_sk#116]
Condition : isnotnull(ws_bill_customer_sk#111)

(79) BroadcastExchange
Input [6]: [ws_bill_customer_sk#111, ws_ext_discount_amt#112, ws_ext_sales_price#113, ws_ext_wholesale_cost#114, ws_ext_list_price#115, ws_sold_date_sk#116]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=12]

(80) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [c_customer_sk#103]
Right keys [1]: [ws_bill_customer_sk#111]
Join type: Inner
Join condition: None

(81) Project [codegen id : 18]
Output [12]: [c_customer_id#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_country#108, c_login#109, c_email_address#110, ws_ext_discount_amt#112, ws_ext_sales_price#113, ws_ext_wholesale_cost#114, ws_ext_list_price#115, ws_sold_date_sk#116]
Input [14]: [c_customer_sk#103, c_customer_id#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_country#108, c_login#109, c_email_address#110, ws_bill_customer_sk#111, ws_ext_discount_amt#112, ws_ext_sales_price#113, ws_ext_wholesale_cost#114, ws_ext_list_price#115, ws_sold_date_sk#116]

(82) ReusedExchange [Reuses operator id: 116]
Output [2]: [d_date_sk#117, d_year#118]

(83) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [ws_sold_date_sk#116]
Right keys [1]: [d_date_sk#117]
Join type: Inner
Join condition: None

(84) Project [codegen id : 18]
Output [12]: [c_customer_id#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_country#108, c_login#109, c_email_address#110, ws_ext_discount_amt#112, ws_ext_sales_price#113, ws_ext_wholesale_cost#114, ws_ext_list_price#115, d_year#118]
Input [14]: [c_customer_id#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_country#108, c_login#109, c_email_address#110, ws_ext_discount_amt#112, ws_ext_sales_price#113, ws_ext_wholesale_cost#114, ws_ext_list_price#115, ws_sold_date_sk#116, d_date_sk#117, d_year#118]

(85) HashAggregate [codegen id : 18]
Input [12]: [c_customer_id#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_country#108, c_login#109, c_email_address#110, ws_ext_discount_amt#112, ws_ext_sales_price#113, ws_ext_wholesale_cost#114, ws_ext_list_price#115, d_year#118]
Keys [8]: [c_customer_id#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_country#108, c_login#109, c_email_address#110, d_year#118]
Functions [1]: [partial_sum(((((ws_ext_list_price#115 - ws_ext_wholesale_cost#114) - ws_ext_discount_amt#112) + ws_ext_sales_price#113) / 2))]
Aggregate Attributes [2]: [sum#119, isEmpty#120]
Results [10]: [c_customer_id#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_country#108, c_login#109, c_email_address#110, d_year#118, sum#121, isEmpty#122]

(86) Exchange
Input [10]: [c_customer_id#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_country#108, c_login#109, c_email_address#110, d_year#118, sum#121, isEmpty#122]
Arguments: hashpartitioning(c_customer_id#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_country#108, c_login#109, c_email_address#110, d_year#118, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(87) HashAggregate [codegen id : 19]
Input [10]: [c_customer_id#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_country#108, c_login#109, c_email_address#110, d_year#118, sum#121, isEmpty#122]
Keys [8]: [c_customer_id#104, c_first_name#105, c_last_name#106, c_preferred_cust_flag#107, c_birth_country#108, c_login#109, c_email_address#110, d_year#118]
Functions [1]: [sum(((((ws_ext_list_price#115 - ws_ext_wholesale_cost#114) - ws_ext_discount_amt#112) + ws_ext_sales_price#113) / 2))]
Aggregate Attributes [1]: [sum(((((ws_ext_list_price#115 - ws_ext_wholesale_cost#114) - ws_ext_discount_amt#112) + ws_ext_sales_price#113) / 2))#123]
Results [2]: [c_customer_id#104 AS customer_id#124, sum(((((ws_ext_list_price#115 - ws_ext_wholesale_cost#114) - ws_ext_discount_amt#112) + ws_ext_sales_price#113) / 2))#123 AS year_total#125]

(88) Filter [codegen id : 19]
Input [2]: [customer_id#124, year_total#125]
Condition : (isnotnull(year_total#125) AND (year_total#125 > 0.000000))

(89) Project [codegen id : 19]
Output [2]: [customer_id#124 AS customer_id#126, year_total#125 AS year_total#127]
Input [2]: [customer_id#124, year_total#125]

(90) BroadcastExchange
Input [2]: [customer_id#126, year_total#127]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=14]

(91) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [customer_id#23]
Right keys [1]: [customer_id#126]
Join type: Inner
Join condition: None

(92) Project [codegen id : 24]
Output [11]: [customer_id#23, customer_id#46, customer_first_name#47, customer_last_name#48, customer_preferred_cust_flag#49, customer_birth_country#50, customer_login#51, customer_email_address#52, year_total#78, year_total#102, year_total#127]
Input [12]: [customer_id#23, customer_id#46, customer_first_name#47, customer_last_name#48, customer_preferred_cust_flag#49, customer_birth_country#50, customer_login#51, customer_email_address#52, year_total#78, year_total#102, customer_id#126, year_total#127]

(93) Scan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#128, c_customer_id#129, c_first_name#130, c_last_name#131, c_preferred_cust_flag#132, c_birth_country#133, c_login#134, c_email_address#135]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(94) ColumnarToRow [codegen id : 22]
Input [8]: [c_customer_sk#128, c_customer_id#129, c_first_name#130, c_last_name#131, c_preferred_cust_flag#132, c_birth_country#133, c_login#134, c_email_address#135]

(95) Filter [codegen id : 22]
Input [8]: [c_customer_sk#128, c_customer_id#129, c_first_name#130, c_last_name#131, c_preferred_cust_flag#132, c_birth_country#133, c_login#134, c_email_address#135]
Condition : (isnotnull(c_customer_sk#128) AND isnotnull(c_customer_id#129))

(96) Scan parquet spark_catalog.default.web_sales
Output [6]: [ws_bill_customer_sk#136, ws_ext_discount_amt#137, ws_ext_sales_price#138, ws_ext_wholesale_cost#139, ws_ext_list_price#140, ws_sold_date_sk#141]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#141), dynamicpruningexpression(ws_sold_date_sk#141 IN dynamicpruning#39)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_price:decimal(7,2),ws_ext_wholesale_cost:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(97) ColumnarToRow [codegen id : 20]
Input [6]: [ws_bill_customer_sk#136, ws_ext_discount_amt#137, ws_ext_sales_price#138, ws_ext_wholesale_cost#139, ws_ext_list_price#140, ws_sold_date_sk#141]

(98) Filter [codegen id : 20]
Input [6]: [ws_bill_customer_sk#136, ws_ext_discount_amt#137, ws_ext_sales_price#138, ws_ext_wholesale_cost#139, ws_ext_list_price#140, ws_sold_date_sk#141]
Condition : isnotnull(ws_bill_customer_sk#136)

(99) BroadcastExchange
Input [6]: [ws_bill_customer_sk#136, ws_ext_discount_amt#137, ws_ext_sales_price#138, ws_ext_wholesale_cost#139, ws_ext_list_price#140, ws_sold_date_sk#141]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=15]

(100) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [c_customer_sk#128]
Right keys [1]: [ws_bill_customer_sk#136]
Join type: Inner
Join condition: None

(101) Project [codegen id : 22]
Output [12]: [c_customer_id#129, c_first_name#130, c_last_name#131, c_preferred_cust_flag#132, c_birth_country#133, c_login#134, c_email_address#135, ws_ext_discount_amt#137, ws_ext_sales_price#138, ws_ext_wholesale_cost#139, ws_ext_list_price#140, ws_sold_date_sk#141]
Input [14]: [c_customer_sk#128, c_customer_id#129, c_first_name#130, c_last_name#131, c_preferred_cust_flag#132, c_birth_country#133, c_login#134, c_email_address#135, ws_bill_customer_sk#136, ws_ext_discount_amt#137, ws_ext_sales_price#138, ws_ext_wholesale_cost#139, ws_ext_list_price#140, ws_sold_date_sk#141]

(102) ReusedExchange [Reuses operator id: 120]
Output [2]: [d_date_sk#142, d_year#143]

(103) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ws_sold_date_sk#141]
Right keys [1]: [d_date_sk#142]
Join type: Inner
Join condition: None

(104) Project [codegen id : 22]
Output [12]: [c_customer_id#129, c_first_name#130, c_last_name#131, c_preferred_cust_flag#132, c_birth_country#133, c_login#134, c_email_address#135, ws_ext_discount_amt#137, ws_ext_sales_price#138, ws_ext_wholesale_cost#139, ws_ext_list_price#140, d_year#143]
Input [14]: [c_customer_id#129, c_first_name#130, c_last_name#131, c_preferred_cust_flag#132, c_birth_country#133, c_login#134, c_email_address#135, ws_ext_discount_amt#137, ws_ext_sales_price#138, ws_ext_wholesale_cost#139, ws_ext_list_price#140, ws_sold_date_sk#141, d_date_sk#142, d_year#143]

(105) HashAggregate [codegen id : 22]
Input [12]: [c_customer_id#129, c_first_name#130, c_last_name#131, c_preferred_cust_flag#132, c_birth_country#133, c_login#134, c_email_address#135, ws_ext_discount_amt#137, ws_ext_sales_price#138, ws_ext_wholesale_cost#139, ws_ext_list_price#140, d_year#143]
Keys [8]: [c_customer_id#129, c_first_name#130, c_last_name#131, c_preferred_cust_flag#132, c_birth_country#133, c_login#134, c_email_address#135, d_year#143]
Functions [1]: [partial_sum(((((ws_ext_list_price#140 - ws_ext_wholesale_cost#139) - ws_ext_discount_amt#137) + ws_ext_sales_price#138) / 2))]
Aggregate Attributes [2]: [sum#144, isEmpty#145]
Results [10]: [c_customer_id#129, c_first_name#130, c_last_name#131, c_preferred_cust_flag#132, c_birth_country#133, c_login#134, c_email_address#135, d_year#143, sum#146, isEmpty#147]

(106) Exchange
Input [10]: [c_customer_id#129, c_first_name#130, c_last_name#131, c_preferred_cust_flag#132, c_birth_country#133, c_login#134, c_email_address#135, d_year#143, sum#146, isEmpty#147]
Arguments: hashpartitioning(c_customer_id#129, c_first_name#130, c_last_name#131, c_preferred_cust_flag#132, c_birth_country#133, c_login#134, c_email_address#135, d_year#143, 5), ENSURE_REQUIREMENTS, [plan_id=16]

(107) HashAggregate [codegen id : 23]
Input [10]: [c_customer_id#129, c_first_name#130, c_last_name#131, c_preferred_cust_flag#132, c_birth_country#133, c_login#134, c_email_address#135, d_year#143, sum#146, isEmpty#147]
Keys [8]: [c_customer_id#129, c_first_name#130, c_last_name#131, c_preferred_cust_flag#132, c_birth_country#133, c_login#134, c_email_address#135, d_year#143]
Functions [1]: [sum(((((ws_ext_list_price#140 - ws_ext_wholesale_cost#139) - ws_ext_discount_amt#137) + ws_ext_sales_price#138) / 2))]
Aggregate Attributes [1]: [sum(((((ws_ext_list_price#140 - ws_ext_wholesale_cost#139) - ws_ext_discount_amt#137) + ws_ext_sales_price#138) / 2))#123]
Results [2]: [c_customer_id#129 AS customer_id#148, sum(((((ws_ext_list_price#140 - ws_ext_wholesale_cost#139) - ws_ext_discount_amt#137) + ws_ext_sales_price#138) / 2))#123 AS year_total#149]

(108) Project [codegen id : 23]
Output [2]: [customer_id#148 AS customer_id#150, year_total#149 AS year_total#151]
Input [2]: [customer_id#148, year_total#149]

(109) BroadcastExchange
Input [2]: [customer_id#150, year_total#151]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=17]

(110) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [customer_id#23]
Right keys [1]: [customer_id#150]
Join type: Inner
Join condition: (CASE WHEN (year_total#78 > 0.000000) THEN (year_total#102 / year_total#78) END > CASE WHEN (year_total#127 > 0.000000) THEN (year_total#151 / year_total#127) END)

(111) Project [codegen id : 24]
Output [7]: [customer_id#46, customer_first_name#47, customer_last_name#48, customer_preferred_cust_flag#49, customer_birth_country#50, customer_login#51, customer_email_address#52]
Input [13]: [customer_id#23, customer_id#46, customer_first_name#47, customer_last_name#48, customer_preferred_cust_flag#49, customer_birth_country#50, customer_login#51, customer_email_address#52, year_total#78, year_total#102, year_total#127, customer_id#150, year_total#151]

(112) TakeOrderedAndProject
Input [7]: [customer_id#46, customer_first_name#47, customer_last_name#48, customer_preferred_cust_flag#49, customer_birth_country#50, customer_login#51, customer_email_address#52]
Arguments: 100, [customer_id#46 ASC NULLS FIRST, customer_first_name#47 ASC NULLS FIRST, customer_last_name#48 ASC NULLS FIRST, customer_preferred_cust_flag#49 ASC NULLS FIRST, customer_birth_country#50 ASC NULLS FIRST, customer_login#51 ASC NULLS FIRST, customer_email_address#52 ASC NULLS FIRST], [customer_id#46, customer_first_name#47, customer_last_name#48, customer_preferred_cust_flag#49, customer_birth_country#50, customer_login#51, customer_email_address#52]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#14 IN dynamicpruning#15
BroadcastExchange (116)
+- * Filter (115)
   +- * ColumnarToRow (114)
      +- Scan parquet spark_catalog.default.date_dim (113)


(113) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#16, d_year#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(114) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#16, d_year#17]

(115) Filter [codegen id : 1]
Input [2]: [d_date_sk#16, d_year#17]
Condition : ((isnotnull(d_year#17) AND (d_year#17 = 2001)) AND isnotnull(d_date_sk#16))

(116) BroadcastExchange
Input [2]: [d_date_sk#16, d_year#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=18]

Subquery:2 Hosting operator id = 20 Hosting Expression = ss_sold_date_sk#38 IN dynamicpruning#39
BroadcastExchange (120)
+- * Filter (119)
   +- * ColumnarToRow (118)
      +- Scan parquet spark_catalog.default.date_dim (117)


(117) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#40, d_year#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(118) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#40, d_year#41]

(119) Filter [codegen id : 1]
Input [2]: [d_date_sk#40, d_year#41]
Condition : ((isnotnull(d_year#41) AND (d_year#41 = 2002)) AND isnotnull(d_date_sk#40))

(120) BroadcastExchange
Input [2]: [d_date_sk#40, d_year#41]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=19]

Subquery:3 Hosting operator id = 37 Hosting Expression = cs_sold_date_sk#67 IN dynamicpruning#15

Subquery:4 Hosting operator id = 57 Hosting Expression = cs_sold_date_sk#92 IN dynamicpruning#39

Subquery:5 Hosting operator id = 76 Hosting Expression = ws_sold_date_sk#116 IN dynamicpruning#15

Subquery:6 Hosting operator id = 96 Hosting Expression = ws_sold_date_sk#141 IN dynamicpruning#39


