== Physical Plan ==
TakeOrderedAndProject (113)
+- * Project (112)
   +- * BroadcastHashJoin Inner BuildRight (111)
      :- * Project (96)
      :  +- * BroadcastHashJoin Inner BuildRight (95)
      :     :- * Project (75)
      :     :  +- * BroadcastHashJoin Inner BuildRight (74)
      :     :     :- * Project (59)
      :     :     :  +- * BroadcastHashJoin Inner BuildRight (58)
      :     :     :     :- * BroadcastHashJoin Inner BuildRight (38)
      :     :     :     :  :- * Filter (20)
      :     :     :     :  :  +- * HashAggregate (19)
      :     :     :     :  :     +- Exchange (18)
      :     :     :     :  :        +- * HashAggregate (17)
      :     :     :     :  :           +- * Project (16)
      :     :     :     :  :              +- * BroadcastHashJoin Inner BuildRight (15)
      :     :     :     :  :                 :- * Project (10)
      :     :     :     :  :                 :  +- * BroadcastHashJoin Inner BuildRight (9)
      :     :     :     :  :                 :     :- * Project (4)
      :     :     :     :  :                 :     :  +- * Filter (3)
      :     :     :     :  :                 :     :     +- * ColumnarToRow (2)
      :     :     :     :  :                 :     :        +- Scan parquet default.customer (1)
      :     :     :     :  :                 :     +- BroadcastExchange (8)
      :     :     :     :  :                 :        +- * Filter (7)
      :     :     :     :  :                 :           +- * ColumnarToRow (6)
      :     :     :     :  :                 :              +- Scan parquet default.store_sales (5)
      :     :     :     :  :                 +- BroadcastExchange (14)
      :     :     :     :  :                    +- * Filter (13)
      :     :     :     :  :                       +- * ColumnarToRow (12)
      :     :     :     :  :                          +- Scan parquet default.date_dim (11)
      :     :     :     :  +- BroadcastExchange (37)
      :     :     :     :     +- * HashAggregate (36)
      :     :     :     :        +- Exchange (35)
      :     :     :     :           +- * HashAggregate (34)
      :     :     :     :              +- * Project (33)
      :     :     :     :                 +- * BroadcastHashJoin Inner BuildRight (32)
      :     :     :     :                    :- * Project (27)
      :     :     :     :                    :  +- * BroadcastHashJoin Inner BuildRight (26)
      :     :     :     :                    :     :- * Project (24)
      :     :     :     :                    :     :  +- * Filter (23)
      :     :     :     :                    :     :     +- * ColumnarToRow (22)
      :     :     :     :                    :     :        +- Scan parquet default.customer (21)
      :     :     :     :                    :     +- ReusedExchange (25)
      :     :     :     :                    +- BroadcastExchange (31)
      :     :     :     :                       +- * Filter (30)
      :     :     :     :                          +- * ColumnarToRow (29)
      :     :     :     :                             +- Scan parquet default.date_dim (28)
      :     :     :     +- BroadcastExchange (57)
      :     :     :        +- * Project (56)
      :     :     :           +- * Filter (55)
      :     :     :              +- * HashAggregate (54)
      :     :     :                 +- Exchange (53)
      :     :     :                    +- * HashAggregate (52)
      :     :     :                       +- * Project (51)
      :     :     :                          +- * BroadcastHashJoin Inner BuildRight (50)
      :     :     :                             :- * Project (48)
      :     :     :                             :  +- * BroadcastHashJoin Inner BuildRight (47)
      :     :     :                             :     :- * Project (42)
      :     :     :                             :     :  +- * Filter (41)
      :     :     :                             :     :     +- * ColumnarToRow (40)
      :     :     :                             :     :        +- Scan parquet default.customer (39)
      :     :     :                             :     +- BroadcastExchange (46)
      :     :     :                             :        +- * Filter (45)
      :     :     :                             :           +- * ColumnarToRow (44)
      :     :     :                             :              +- Scan parquet default.catalog_sales (43)
      :     :     :                             +- ReusedExchange (49)
      :     :     +- BroadcastExchange (73)
      :     :        +- * HashAggregate (72)
      :     :           +- Exchange (71)
      :     :              +- * HashAggregate (70)
      :     :                 +- * Project (69)
      :     :                    +- * BroadcastHashJoin Inner BuildRight (68)
      :     :                       :- * Project (66)
      :     :                       :  +- * BroadcastHashJoin Inner BuildRight (65)
      :     :                       :     :- * Project (63)
      :     :                       :     :  +- * Filter (62)
      :     :                       :     :     +- * ColumnarToRow (61)
      :     :                       :     :        +- Scan parquet default.customer (60)
      :     :                       :     +- ReusedExchange (64)
      :     :                       +- ReusedExchange (67)
      :     +- BroadcastExchange (94)
      :        +- * Project (93)
      :           +- * Filter (92)
      :              +- * HashAggregate (91)
      :                 +- Exchange (90)
      :                    +- * HashAggregate (89)
      :                       +- * Project (88)
      :                          +- * BroadcastHashJoin Inner BuildRight (87)
      :                             :- * Project (85)
      :                             :  +- * BroadcastHashJoin Inner BuildRight (84)
      :                             :     :- * Project (79)
      :                             :     :  +- * Filter (78)
      :                             :     :     +- * ColumnarToRow (77)
      :                             :     :        +- Scan parquet default.customer (76)
      :                             :     +- BroadcastExchange (83)
      :                             :        +- * Filter (82)
      :                             :           +- * ColumnarToRow (81)
      :                             :              +- Scan parquet default.web_sales (80)
      :                             +- ReusedExchange (86)
      +- BroadcastExchange (110)
         +- * HashAggregate (109)
            +- Exchange (108)
               +- * HashAggregate (107)
                  +- * Project (106)
                     +- * BroadcastHashJoin Inner BuildRight (105)
                        :- * Project (103)
                        :  +- * BroadcastHashJoin Inner BuildRight (102)
                        :     :- * Project (100)
                        :     :  +- * Filter (99)
                        :     :     +- * ColumnarToRow (98)
                        :     :        +- Scan parquet default.customer (97)
                        :     +- ReusedExchange (101)
                        +- ReusedExchange (104)


(1) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(2) ColumnarToRow [codegen id : 3]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(3) Filter [codegen id : 3]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true)))

(4) Project [codegen id : 3]
Output [8]: [c_customer_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true) AS c_customer_id#9, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#3, 20, false, true) AS c_first_name#10, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#4, 30, false, true) AS c_last_name#11, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_preferred_cust_flag#5, 1, false, true) AS c_preferred_cust_flag#12, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, c_birth_country#6, 20, false, true) AS c_birth_country#13, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_login#7, 13, false, true) AS c_login#14, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_email_address#8, 50, false, true) AS c_email_address#15]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(5) Scan parquet default.store_sales
Output [6]: [ss_sold_date_sk#16, ss_customer_sk#17, ss_ext_discount_amt#18, ss_ext_sales_price#19, ss_ext_wholesale_cost#20, ss_ext_list_price#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(6) ColumnarToRow [codegen id : 1]
Input [6]: [ss_sold_date_sk#16, ss_customer_sk#17, ss_ext_discount_amt#18, ss_ext_sales_price#19, ss_ext_wholesale_cost#20, ss_ext_list_price#21]

(7) Filter [codegen id : 1]
Input [6]: [ss_sold_date_sk#16, ss_customer_sk#17, ss_ext_discount_amt#18, ss_ext_sales_price#19, ss_ext_wholesale_cost#20, ss_ext_list_price#21]
Condition : (isnotnull(ss_customer_sk#17) AND isnotnull(ss_sold_date_sk#16))

(8) BroadcastExchange
Input [6]: [ss_sold_date_sk#16, ss_customer_sk#17, ss_ext_discount_amt#18, ss_ext_sales_price#19, ss_ext_wholesale_cost#20, ss_ext_list_price#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#22]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#17]
Join condition: None

(10) Project [codegen id : 3]
Output [12]: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, ss_sold_date_sk#16, ss_ext_discount_amt#18, ss_ext_sales_price#19, ss_ext_wholesale_cost#20, ss_ext_list_price#21]
Input [14]: [c_customer_sk#1, c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, ss_sold_date_sk#16, ss_customer_sk#17, ss_ext_discount_amt#18, ss_ext_sales_price#19, ss_ext_wholesale_cost#20, ss_ext_list_price#21]

(11) Scan parquet default.date_dim
Output [2]: [d_date_sk#23, d_year#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#23, d_year#24]

(13) Filter [codegen id : 2]
Input [2]: [d_date_sk#23, d_year#24]
Condition : ((isnotnull(d_year#24) AND (d_year#24 = 2001)) AND isnotnull(d_date_sk#23))

(14) BroadcastExchange
Input [2]: [d_date_sk#23, d_year#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#25]

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#16]
Right keys [1]: [d_date_sk#23]
Join condition: None

(16) Project [codegen id : 3]
Output [12]: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, ss_ext_discount_amt#18, ss_ext_sales_price#19, ss_ext_wholesale_cost#20, ss_ext_list_price#21, d_year#24]
Input [14]: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, ss_sold_date_sk#16, ss_ext_discount_amt#18, ss_ext_sales_price#19, ss_ext_wholesale_cost#20, ss_ext_list_price#21, d_date_sk#23, d_year#24]

(17) HashAggregate [codegen id : 3]
Input [12]: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, ss_ext_discount_amt#18, ss_ext_sales_price#19, ss_ext_wholesale_cost#20, ss_ext_list_price#21, d_year#24]
Keys [8]: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, d_year#24]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#21 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#20 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#18 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#19 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#26, isEmpty#27]
Results [10]: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, d_year#24, sum#28, isEmpty#29]

(18) Exchange
Input [10]: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, d_year#24, sum#28, isEmpty#29]
Arguments: hashpartitioning(c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, d_year#24, 5), ENSURE_REQUIREMENTS, [id=#30]

(19) HashAggregate [codegen id : 24]
Input [10]: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, d_year#24, sum#28, isEmpty#29]
Keys [8]: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#13, c_login#14, c_email_address#15, d_year#24]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#21 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#20 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#18 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#19 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#21 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#20 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#18 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#19 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#31]
Results [2]: [c_customer_id#9 AS customer_id#32, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#21 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#20 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#18 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#19 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#31 AS year_total#33]

(20) Filter [codegen id : 24]
Input [2]: [customer_id#32, year_total#33]
Condition : (isnotnull(year_total#33) AND (year_total#33 > 0.000000))

(21) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(22) ColumnarToRow [codegen id : 6]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(23) Filter [codegen id : 6]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true)))

(24) Project [codegen id : 6]
Output [8]: [c_customer_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true) AS c_customer_id#34, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#3, 20, false, true) AS c_first_name#35, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#4, 30, false, true) AS c_last_name#36, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_preferred_cust_flag#5, 1, false, true) AS c_preferred_cust_flag#37, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, c_birth_country#6, 20, false, true) AS c_birth_country#38, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_login#7, 13, false, true) AS c_login#39, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_email_address#8, 50, false, true) AS c_email_address#40]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(25) ReusedExchange [Reuses operator id: 8]
Output [6]: [ss_sold_date_sk#16, ss_customer_sk#17, ss_ext_discount_amt#18, ss_ext_sales_price#19, ss_ext_wholesale_cost#20, ss_ext_list_price#21]

(26) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#17]
Join condition: None

(27) Project [codegen id : 6]
Output [12]: [c_customer_id#34, c_first_name#35, c_last_name#36, c_preferred_cust_flag#37, c_birth_country#38, c_login#39, c_email_address#40, ss_sold_date_sk#16, ss_ext_discount_amt#18, ss_ext_sales_price#19, ss_ext_wholesale_cost#20, ss_ext_list_price#21]
Input [14]: [c_customer_sk#1, c_customer_id#34, c_first_name#35, c_last_name#36, c_preferred_cust_flag#37, c_birth_country#38, c_login#39, c_email_address#40, ss_sold_date_sk#16, ss_customer_sk#17, ss_ext_discount_amt#18, ss_ext_sales_price#19, ss_ext_wholesale_cost#20, ss_ext_list_price#21]

(28) Scan parquet default.date_dim
Output [2]: [d_date_sk#23, d_year#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(29) ColumnarToRow [codegen id : 5]
Input [2]: [d_date_sk#23, d_year#24]

(30) Filter [codegen id : 5]
Input [2]: [d_date_sk#23, d_year#24]
Condition : ((isnotnull(d_year#24) AND (d_year#24 = 2002)) AND isnotnull(d_date_sk#23))

(31) BroadcastExchange
Input [2]: [d_date_sk#23, d_year#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#41]

(32) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#16]
Right keys [1]: [d_date_sk#23]
Join condition: None

(33) Project [codegen id : 6]
Output [12]: [c_customer_id#34, c_first_name#35, c_last_name#36, c_preferred_cust_flag#37, c_birth_country#38, c_login#39, c_email_address#40, ss_ext_discount_amt#18, ss_ext_sales_price#19, ss_ext_wholesale_cost#20, ss_ext_list_price#21, d_year#24]
Input [14]: [c_customer_id#34, c_first_name#35, c_last_name#36, c_preferred_cust_flag#37, c_birth_country#38, c_login#39, c_email_address#40, ss_sold_date_sk#16, ss_ext_discount_amt#18, ss_ext_sales_price#19, ss_ext_wholesale_cost#20, ss_ext_list_price#21, d_date_sk#23, d_year#24]

(34) HashAggregate [codegen id : 6]
Input [12]: [c_customer_id#34, c_first_name#35, c_last_name#36, c_preferred_cust_flag#37, c_birth_country#38, c_login#39, c_email_address#40, ss_ext_discount_amt#18, ss_ext_sales_price#19, ss_ext_wholesale_cost#20, ss_ext_list_price#21, d_year#24]
Keys [8]: [c_customer_id#34, c_first_name#35, c_last_name#36, c_preferred_cust_flag#37, c_birth_country#38, c_login#39, c_email_address#40, d_year#24]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#21 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#20 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#18 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#19 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#42, isEmpty#43]
Results [10]: [c_customer_id#34, c_first_name#35, c_last_name#36, c_preferred_cust_flag#37, c_birth_country#38, c_login#39, c_email_address#40, d_year#24, sum#44, isEmpty#45]

(35) Exchange
Input [10]: [c_customer_id#34, c_first_name#35, c_last_name#36, c_preferred_cust_flag#37, c_birth_country#38, c_login#39, c_email_address#40, d_year#24, sum#44, isEmpty#45]
Arguments: hashpartitioning(c_customer_id#34, c_first_name#35, c_last_name#36, c_preferred_cust_flag#37, c_birth_country#38, c_login#39, c_email_address#40, d_year#24, 5), ENSURE_REQUIREMENTS, [id=#46]

(36) HashAggregate [codegen id : 7]
Input [10]: [c_customer_id#34, c_first_name#35, c_last_name#36, c_preferred_cust_flag#37, c_birth_country#38, c_login#39, c_email_address#40, d_year#24, sum#44, isEmpty#45]
Keys [8]: [c_customer_id#34, c_first_name#35, c_last_name#36, c_preferred_cust_flag#37, c_birth_country#38, c_login#39, c_email_address#40, d_year#24]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#21 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#20 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#18 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#19 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#21 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#20 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#18 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#19 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#47]
Results [8]: [c_customer_id#34 AS customer_id#48, c_first_name#35 AS customer_first_name#49, c_last_name#36 AS customer_last_name#50, c_preferred_cust_flag#37 AS customer_preferred_cust_flag#51, c_birth_country#38 AS customer_birth_country#52, c_login#39 AS customer_login#53, c_email_address#40 AS customer_email_address#54, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#21 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#20 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#18 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#19 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#47 AS year_total#55]

(37) BroadcastExchange
Input [8]: [customer_id#48, customer_first_name#49, customer_last_name#50, customer_preferred_cust_flag#51, customer_birth_country#52, customer_login#53, customer_email_address#54, year_total#55]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#56]

(38) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [customer_id#32]
Right keys [1]: [customer_id#48]
Join condition: None

(39) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(40) ColumnarToRow [codegen id : 10]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(41) Filter [codegen id : 10]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true)))

(42) Project [codegen id : 10]
Output [8]: [c_customer_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true) AS c_customer_id#57, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#3, 20, false, true) AS c_first_name#58, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#4, 30, false, true) AS c_last_name#59, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_preferred_cust_flag#5, 1, false, true) AS c_preferred_cust_flag#60, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, c_birth_country#6, 20, false, true) AS c_birth_country#61, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_login#7, 13, false, true) AS c_login#62, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_email_address#8, 50, false, true) AS c_email_address#63]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(43) Scan parquet default.catalog_sales
Output [6]: [cs_sold_date_sk#64, cs_bill_customer_sk#65, cs_ext_discount_amt#66, cs_ext_sales_price#67, cs_ext_wholesale_cost#68, cs_ext_list_price#69]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2)>

(44) ColumnarToRow [codegen id : 8]
Input [6]: [cs_sold_date_sk#64, cs_bill_customer_sk#65, cs_ext_discount_amt#66, cs_ext_sales_price#67, cs_ext_wholesale_cost#68, cs_ext_list_price#69]

(45) Filter [codegen id : 8]
Input [6]: [cs_sold_date_sk#64, cs_bill_customer_sk#65, cs_ext_discount_amt#66, cs_ext_sales_price#67, cs_ext_wholesale_cost#68, cs_ext_list_price#69]
Condition : (isnotnull(cs_bill_customer_sk#65) AND isnotnull(cs_sold_date_sk#64))

(46) BroadcastExchange
Input [6]: [cs_sold_date_sk#64, cs_bill_customer_sk#65, cs_ext_discount_amt#66, cs_ext_sales_price#67, cs_ext_wholesale_cost#68, cs_ext_list_price#69]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#70]

(47) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [cs_bill_customer_sk#65]
Join condition: None

(48) Project [codegen id : 10]
Output [12]: [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, cs_sold_date_sk#64, cs_ext_discount_amt#66, cs_ext_sales_price#67, cs_ext_wholesale_cost#68, cs_ext_list_price#69]
Input [14]: [c_customer_sk#1, c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, cs_sold_date_sk#64, cs_bill_customer_sk#65, cs_ext_discount_amt#66, cs_ext_sales_price#67, cs_ext_wholesale_cost#68, cs_ext_list_price#69]

(49) ReusedExchange [Reuses operator id: 14]
Output [2]: [d_date_sk#23, d_year#24]

(50) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#64]
Right keys [1]: [d_date_sk#23]
Join condition: None

(51) Project [codegen id : 10]
Output [12]: [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, cs_ext_discount_amt#66, cs_ext_sales_price#67, cs_ext_wholesale_cost#68, cs_ext_list_price#69, d_year#24]
Input [14]: [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, cs_sold_date_sk#64, cs_ext_discount_amt#66, cs_ext_sales_price#67, cs_ext_wholesale_cost#68, cs_ext_list_price#69, d_date_sk#23, d_year#24]

(52) HashAggregate [codegen id : 10]
Input [12]: [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, cs_ext_discount_amt#66, cs_ext_sales_price#67, cs_ext_wholesale_cost#68, cs_ext_list_price#69, d_year#24]
Keys [8]: [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#24]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#69 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#68 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#66 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#67 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#71, isEmpty#72]
Results [10]: [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#24, sum#73, isEmpty#74]

(53) Exchange
Input [10]: [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#24, sum#73, isEmpty#74]
Arguments: hashpartitioning(c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#24, 5), ENSURE_REQUIREMENTS, [id=#75]

(54) HashAggregate [codegen id : 11]
Input [10]: [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#24, sum#73, isEmpty#74]
Keys [8]: [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#61, c_login#62, c_email_address#63, d_year#24]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#69 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#68 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#66 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#67 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#69 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#68 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#66 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#67 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#76]
Results [2]: [c_customer_id#57 AS customer_id#77, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#69 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#68 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#66 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#67 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#76 AS year_total#78]

(55) Filter [codegen id : 11]
Input [2]: [customer_id#77, year_total#78]
Condition : (isnotnull(year_total#78) AND (year_total#78 > 0.000000))

(56) Project [codegen id : 11]
Output [2]: [customer_id#77 AS customer_id#79, year_total#78 AS year_total#80]
Input [2]: [customer_id#77, year_total#78]

(57) BroadcastExchange
Input [2]: [customer_id#79, year_total#80]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#81]

(58) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [customer_id#32]
Right keys [1]: [customer_id#79]
Join condition: None

(59) Project [codegen id : 24]
Output [11]: [customer_id#32, year_total#33, customer_id#48, customer_first_name#49, customer_last_name#50, customer_preferred_cust_flag#51, customer_birth_country#52, customer_login#53, customer_email_address#54, year_total#55, year_total#80]
Input [12]: [customer_id#32, year_total#33, customer_id#48, customer_first_name#49, customer_last_name#50, customer_preferred_cust_flag#51, customer_birth_country#52, customer_login#53, customer_email_address#54, year_total#55, customer_id#79, year_total#80]

(60) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(61) ColumnarToRow [codegen id : 14]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(62) Filter [codegen id : 14]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true)))

(63) Project [codegen id : 14]
Output [8]: [c_customer_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true) AS c_customer_id#82, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#3, 20, false, true) AS c_first_name#83, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#4, 30, false, true) AS c_last_name#84, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_preferred_cust_flag#5, 1, false, true) AS c_preferred_cust_flag#85, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, c_birth_country#6, 20, false, true) AS c_birth_country#86, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_login#7, 13, false, true) AS c_login#87, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_email_address#8, 50, false, true) AS c_email_address#88]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(64) ReusedExchange [Reuses operator id: 46]
Output [6]: [cs_sold_date_sk#64, cs_bill_customer_sk#65, cs_ext_discount_amt#66, cs_ext_sales_price#67, cs_ext_wholesale_cost#68, cs_ext_list_price#69]

(65) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [cs_bill_customer_sk#65]
Join condition: None

(66) Project [codegen id : 14]
Output [12]: [c_customer_id#82, c_first_name#83, c_last_name#84, c_preferred_cust_flag#85, c_birth_country#86, c_login#87, c_email_address#88, cs_sold_date_sk#64, cs_ext_discount_amt#66, cs_ext_sales_price#67, cs_ext_wholesale_cost#68, cs_ext_list_price#69]
Input [14]: [c_customer_sk#1, c_customer_id#82, c_first_name#83, c_last_name#84, c_preferred_cust_flag#85, c_birth_country#86, c_login#87, c_email_address#88, cs_sold_date_sk#64, cs_bill_customer_sk#65, cs_ext_discount_amt#66, cs_ext_sales_price#67, cs_ext_wholesale_cost#68, cs_ext_list_price#69]

(67) ReusedExchange [Reuses operator id: 31]
Output [2]: [d_date_sk#23, d_year#24]

(68) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [cs_sold_date_sk#64]
Right keys [1]: [d_date_sk#23]
Join condition: None

(69) Project [codegen id : 14]
Output [12]: [c_customer_id#82, c_first_name#83, c_last_name#84, c_preferred_cust_flag#85, c_birth_country#86, c_login#87, c_email_address#88, cs_ext_discount_amt#66, cs_ext_sales_price#67, cs_ext_wholesale_cost#68, cs_ext_list_price#69, d_year#24]
Input [14]: [c_customer_id#82, c_first_name#83, c_last_name#84, c_preferred_cust_flag#85, c_birth_country#86, c_login#87, c_email_address#88, cs_sold_date_sk#64, cs_ext_discount_amt#66, cs_ext_sales_price#67, cs_ext_wholesale_cost#68, cs_ext_list_price#69, d_date_sk#23, d_year#24]

(70) HashAggregate [codegen id : 14]
Input [12]: [c_customer_id#82, c_first_name#83, c_last_name#84, c_preferred_cust_flag#85, c_birth_country#86, c_login#87, c_email_address#88, cs_ext_discount_amt#66, cs_ext_sales_price#67, cs_ext_wholesale_cost#68, cs_ext_list_price#69, d_year#24]
Keys [8]: [c_customer_id#82, c_first_name#83, c_last_name#84, c_preferred_cust_flag#85, c_birth_country#86, c_login#87, c_email_address#88, d_year#24]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#69 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#68 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#66 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#67 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#89, isEmpty#90]
Results [10]: [c_customer_id#82, c_first_name#83, c_last_name#84, c_preferred_cust_flag#85, c_birth_country#86, c_login#87, c_email_address#88, d_year#24, sum#91, isEmpty#92]

(71) Exchange
Input [10]: [c_customer_id#82, c_first_name#83, c_last_name#84, c_preferred_cust_flag#85, c_birth_country#86, c_login#87, c_email_address#88, d_year#24, sum#91, isEmpty#92]
Arguments: hashpartitioning(c_customer_id#82, c_first_name#83, c_last_name#84, c_preferred_cust_flag#85, c_birth_country#86, c_login#87, c_email_address#88, d_year#24, 5), ENSURE_REQUIREMENTS, [id=#93]

(72) HashAggregate [codegen id : 15]
Input [10]: [c_customer_id#82, c_first_name#83, c_last_name#84, c_preferred_cust_flag#85, c_birth_country#86, c_login#87, c_email_address#88, d_year#24, sum#91, isEmpty#92]
Keys [8]: [c_customer_id#82, c_first_name#83, c_last_name#84, c_preferred_cust_flag#85, c_birth_country#86, c_login#87, c_email_address#88, d_year#24]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#69 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#68 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#66 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#67 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#69 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#68 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#66 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#67 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#94]
Results [2]: [c_customer_id#82 AS customer_id#95, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#69 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#68 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#66 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#67 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#94 AS year_total#96]

(73) BroadcastExchange
Input [2]: [customer_id#95, year_total#96]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#97]

(74) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [customer_id#32]
Right keys [1]: [customer_id#95]
Join condition: (CASE WHEN (year_total#80 > 0.000000) THEN CheckOverflow((promote_precision(year_total#96) / promote_precision(year_total#80)), DecimalType(38,14), true) ELSE null END > CASE WHEN (year_total#33 > 0.000000) THEN CheckOverflow((promote_precision(year_total#55) / promote_precision(year_total#33)), DecimalType(38,14), true) ELSE null END)

(75) Project [codegen id : 24]
Output [10]: [customer_id#32, customer_id#48, customer_first_name#49, customer_last_name#50, customer_preferred_cust_flag#51, customer_birth_country#52, customer_login#53, customer_email_address#54, year_total#80, year_total#96]
Input [13]: [customer_id#32, year_total#33, customer_id#48, customer_first_name#49, customer_last_name#50, customer_preferred_cust_flag#51, customer_birth_country#52, customer_login#53, customer_email_address#54, year_total#55, year_total#80, customer_id#95, year_total#96]

(76) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(77) ColumnarToRow [codegen id : 18]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(78) Filter [codegen id : 18]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true)))

(79) Project [codegen id : 18]
Output [8]: [c_customer_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true) AS c_customer_id#98, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#3, 20, false, true) AS c_first_name#99, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#4, 30, false, true) AS c_last_name#100, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_preferred_cust_flag#5, 1, false, true) AS c_preferred_cust_flag#101, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, c_birth_country#6, 20, false, true) AS c_birth_country#102, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_login#7, 13, false, true) AS c_login#103, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_email_address#8, 50, false, true) AS c_email_address#104]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(80) Scan parquet default.web_sales
Output [6]: [ws_sold_date_sk#105, ws_bill_customer_sk#106, ws_ext_discount_amt#107, ws_ext_sales_price#108, ws_ext_wholesale_cost#109, ws_ext_list_price#110]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_price:decimal(7,2),ws_ext_wholesale_cost:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(81) ColumnarToRow [codegen id : 16]
Input [6]: [ws_sold_date_sk#105, ws_bill_customer_sk#106, ws_ext_discount_amt#107, ws_ext_sales_price#108, ws_ext_wholesale_cost#109, ws_ext_list_price#110]

(82) Filter [codegen id : 16]
Input [6]: [ws_sold_date_sk#105, ws_bill_customer_sk#106, ws_ext_discount_amt#107, ws_ext_sales_price#108, ws_ext_wholesale_cost#109, ws_ext_list_price#110]
Condition : (isnotnull(ws_bill_customer_sk#106) AND isnotnull(ws_sold_date_sk#105))

(83) BroadcastExchange
Input [6]: [ws_sold_date_sk#105, ws_bill_customer_sk#106, ws_ext_discount_amt#107, ws_ext_sales_price#108, ws_ext_wholesale_cost#109, ws_ext_list_price#110]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#111]

(84) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#106]
Join condition: None

(85) Project [codegen id : 18]
Output [12]: [c_customer_id#98, c_first_name#99, c_last_name#100, c_preferred_cust_flag#101, c_birth_country#102, c_login#103, c_email_address#104, ws_sold_date_sk#105, ws_ext_discount_amt#107, ws_ext_sales_price#108, ws_ext_wholesale_cost#109, ws_ext_list_price#110]
Input [14]: [c_customer_sk#1, c_customer_id#98, c_first_name#99, c_last_name#100, c_preferred_cust_flag#101, c_birth_country#102, c_login#103, c_email_address#104, ws_sold_date_sk#105, ws_bill_customer_sk#106, ws_ext_discount_amt#107, ws_ext_sales_price#108, ws_ext_wholesale_cost#109, ws_ext_list_price#110]

(86) ReusedExchange [Reuses operator id: 14]
Output [2]: [d_date_sk#23, d_year#24]

(87) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [ws_sold_date_sk#105]
Right keys [1]: [d_date_sk#23]
Join condition: None

(88) Project [codegen id : 18]
Output [12]: [c_customer_id#98, c_first_name#99, c_last_name#100, c_preferred_cust_flag#101, c_birth_country#102, c_login#103, c_email_address#104, ws_ext_discount_amt#107, ws_ext_sales_price#108, ws_ext_wholesale_cost#109, ws_ext_list_price#110, d_year#24]
Input [14]: [c_customer_id#98, c_first_name#99, c_last_name#100, c_preferred_cust_flag#101, c_birth_country#102, c_login#103, c_email_address#104, ws_sold_date_sk#105, ws_ext_discount_amt#107, ws_ext_sales_price#108, ws_ext_wholesale_cost#109, ws_ext_list_price#110, d_date_sk#23, d_year#24]

(89) HashAggregate [codegen id : 18]
Input [12]: [c_customer_id#98, c_first_name#99, c_last_name#100, c_preferred_cust_flag#101, c_birth_country#102, c_login#103, c_email_address#104, ws_ext_discount_amt#107, ws_ext_sales_price#108, ws_ext_wholesale_cost#109, ws_ext_list_price#110, d_year#24]
Keys [8]: [c_customer_id#98, c_first_name#99, c_last_name#100, c_preferred_cust_flag#101, c_birth_country#102, c_login#103, c_email_address#104, d_year#24]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#110 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#109 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#107 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#108 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#112, isEmpty#113]
Results [10]: [c_customer_id#98, c_first_name#99, c_last_name#100, c_preferred_cust_flag#101, c_birth_country#102, c_login#103, c_email_address#104, d_year#24, sum#114, isEmpty#115]

(90) Exchange
Input [10]: [c_customer_id#98, c_first_name#99, c_last_name#100, c_preferred_cust_flag#101, c_birth_country#102, c_login#103, c_email_address#104, d_year#24, sum#114, isEmpty#115]
Arguments: hashpartitioning(c_customer_id#98, c_first_name#99, c_last_name#100, c_preferred_cust_flag#101, c_birth_country#102, c_login#103, c_email_address#104, d_year#24, 5), ENSURE_REQUIREMENTS, [id=#116]

(91) HashAggregate [codegen id : 19]
Input [10]: [c_customer_id#98, c_first_name#99, c_last_name#100, c_preferred_cust_flag#101, c_birth_country#102, c_login#103, c_email_address#104, d_year#24, sum#114, isEmpty#115]
Keys [8]: [c_customer_id#98, c_first_name#99, c_last_name#100, c_preferred_cust_flag#101, c_birth_country#102, c_login#103, c_email_address#104, d_year#24]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#110 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#109 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#107 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#108 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#110 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#109 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#107 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#108 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#117]
Results [2]: [c_customer_id#98 AS customer_id#118, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#110 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#109 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#107 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#108 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#117 AS year_total#119]

(92) Filter [codegen id : 19]
Input [2]: [customer_id#118, year_total#119]
Condition : (isnotnull(year_total#119) AND (year_total#119 > 0.000000))

(93) Project [codegen id : 19]
Output [2]: [customer_id#118 AS customer_id#120, year_total#119 AS year_total#121]
Input [2]: [customer_id#118, year_total#119]

(94) BroadcastExchange
Input [2]: [customer_id#120, year_total#121]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#122]

(95) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [customer_id#32]
Right keys [1]: [customer_id#120]
Join condition: None

(96) Project [codegen id : 24]
Output [11]: [customer_id#32, customer_id#48, customer_first_name#49, customer_last_name#50, customer_preferred_cust_flag#51, customer_birth_country#52, customer_login#53, customer_email_address#54, year_total#80, year_total#96, year_total#121]
Input [12]: [customer_id#32, customer_id#48, customer_first_name#49, customer_last_name#50, customer_preferred_cust_flag#51, customer_birth_country#52, customer_login#53, customer_email_address#54, year_total#80, year_total#96, customer_id#120, year_total#121]

(97) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(98) ColumnarToRow [codegen id : 22]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(99) Filter [codegen id : 22]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true)))

(100) Project [codegen id : 22]
Output [8]: [c_customer_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#2, 16, false, true) AS c_customer_id#123, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#3, 20, false, true) AS c_first_name#124, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#4, 30, false, true) AS c_last_name#125, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_preferred_cust_flag#5, 1, false, true) AS c_preferred_cust_flag#126, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, c_birth_country#6, 20, false, true) AS c_birth_country#127, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_login#7, 13, false, true) AS c_login#128, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_email_address#8, 50, false, true) AS c_email_address#129]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(101) ReusedExchange [Reuses operator id: 83]
Output [6]: [ws_sold_date_sk#105, ws_bill_customer_sk#106, ws_ext_discount_amt#107, ws_ext_sales_price#108, ws_ext_wholesale_cost#109, ws_ext_list_price#110]

(102) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#106]
Join condition: None

(103) Project [codegen id : 22]
Output [12]: [c_customer_id#123, c_first_name#124, c_last_name#125, c_preferred_cust_flag#126, c_birth_country#127, c_login#128, c_email_address#129, ws_sold_date_sk#105, ws_ext_discount_amt#107, ws_ext_sales_price#108, ws_ext_wholesale_cost#109, ws_ext_list_price#110]
Input [14]: [c_customer_sk#1, c_customer_id#123, c_first_name#124, c_last_name#125, c_preferred_cust_flag#126, c_birth_country#127, c_login#128, c_email_address#129, ws_sold_date_sk#105, ws_bill_customer_sk#106, ws_ext_discount_amt#107, ws_ext_sales_price#108, ws_ext_wholesale_cost#109, ws_ext_list_price#110]

(104) ReusedExchange [Reuses operator id: 31]
Output [2]: [d_date_sk#23, d_year#24]

(105) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ws_sold_date_sk#105]
Right keys [1]: [d_date_sk#23]
Join condition: None

(106) Project [codegen id : 22]
Output [12]: [c_customer_id#123, c_first_name#124, c_last_name#125, c_preferred_cust_flag#126, c_birth_country#127, c_login#128, c_email_address#129, ws_ext_discount_amt#107, ws_ext_sales_price#108, ws_ext_wholesale_cost#109, ws_ext_list_price#110, d_year#24]
Input [14]: [c_customer_id#123, c_first_name#124, c_last_name#125, c_preferred_cust_flag#126, c_birth_country#127, c_login#128, c_email_address#129, ws_sold_date_sk#105, ws_ext_discount_amt#107, ws_ext_sales_price#108, ws_ext_wholesale_cost#109, ws_ext_list_price#110, d_date_sk#23, d_year#24]

(107) HashAggregate [codegen id : 22]
Input [12]: [c_customer_id#123, c_first_name#124, c_last_name#125, c_preferred_cust_flag#126, c_birth_country#127, c_login#128, c_email_address#129, ws_ext_discount_amt#107, ws_ext_sales_price#108, ws_ext_wholesale_cost#109, ws_ext_list_price#110, d_year#24]
Keys [8]: [c_customer_id#123, c_first_name#124, c_last_name#125, c_preferred_cust_flag#126, c_birth_country#127, c_login#128, c_email_address#129, d_year#24]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#110 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#109 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#107 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#108 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#130, isEmpty#131]
Results [10]: [c_customer_id#123, c_first_name#124, c_last_name#125, c_preferred_cust_flag#126, c_birth_country#127, c_login#128, c_email_address#129, d_year#24, sum#132, isEmpty#133]

(108) Exchange
Input [10]: [c_customer_id#123, c_first_name#124, c_last_name#125, c_preferred_cust_flag#126, c_birth_country#127, c_login#128, c_email_address#129, d_year#24, sum#132, isEmpty#133]
Arguments: hashpartitioning(c_customer_id#123, c_first_name#124, c_last_name#125, c_preferred_cust_flag#126, c_birth_country#127, c_login#128, c_email_address#129, d_year#24, 5), ENSURE_REQUIREMENTS, [id=#134]

(109) HashAggregate [codegen id : 23]
Input [10]: [c_customer_id#123, c_first_name#124, c_last_name#125, c_preferred_cust_flag#126, c_birth_country#127, c_login#128, c_email_address#129, d_year#24, sum#132, isEmpty#133]
Keys [8]: [c_customer_id#123, c_first_name#124, c_last_name#125, c_preferred_cust_flag#126, c_birth_country#127, c_login#128, c_email_address#129, d_year#24]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#110 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#109 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#107 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#108 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#110 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#109 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#107 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#108 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#135]
Results [2]: [c_customer_id#123 AS customer_id#136, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#110 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#109 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#107 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#108 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#135 AS year_total#137]

(110) BroadcastExchange
Input [2]: [customer_id#136, year_total#137]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#138]

(111) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [customer_id#32]
Right keys [1]: [customer_id#136]
Join condition: (CASE WHEN (year_total#80 > 0.000000) THEN CheckOverflow((promote_precision(year_total#96) / promote_precision(year_total#80)), DecimalType(38,14), true) ELSE null END > CASE WHEN (year_total#121 > 0.000000) THEN CheckOverflow((promote_precision(year_total#137) / promote_precision(year_total#121)), DecimalType(38,14), true) ELSE null END)

(112) Project [codegen id : 24]
Output [7]: [customer_id#48, customer_first_name#49, customer_last_name#50, customer_preferred_cust_flag#51, customer_birth_country#52, customer_login#53, customer_email_address#54]
Input [13]: [customer_id#32, customer_id#48, customer_first_name#49, customer_last_name#50, customer_preferred_cust_flag#51, customer_birth_country#52, customer_login#53, customer_email_address#54, year_total#80, year_total#96, year_total#121, customer_id#136, year_total#137]

(113) TakeOrderedAndProject
Input [7]: [customer_id#48, customer_first_name#49, customer_last_name#50, customer_preferred_cust_flag#51, customer_birth_country#52, customer_login#53, customer_email_address#54]
Arguments: 100, [customer_id#48 ASC NULLS FIRST, customer_first_name#49 ASC NULLS FIRST, customer_last_name#50 ASC NULLS FIRST, customer_preferred_cust_flag#51 ASC NULLS FIRST, customer_birth_country#52 ASC NULLS FIRST, customer_login#53 ASC NULLS FIRST, customer_email_address#54 ASC NULLS FIRST], [customer_id#48, customer_first_name#49, customer_last_name#50, customer_preferred_cust_flag#51, customer_birth_country#52, customer_login#53, customer_email_address#54]

