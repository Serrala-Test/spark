== Physical Plan ==
TakeOrderedAndProject (108)
+- * Project (107)
   +- * BroadcastHashJoin Inner BuildRight (106)
      :- * Project (89)
      :  +- * BroadcastHashJoin Inner BuildRight (88)
      :     :- * Project (70)
      :     :  +- * BroadcastHashJoin Inner BuildRight (69)
      :     :     :- * Project (52)
      :     :     :  +- * BroadcastHashJoin Inner BuildRight (51)
      :     :     :     :- * BroadcastHashJoin Inner BuildRight (33)
      :     :     :     :  :- * Filter (16)
      :     :     :     :  :  +- * HashAggregate (15)
      :     :     :     :  :     +- Exchange (14)
      :     :     :     :  :        +- * HashAggregate (13)
      :     :     :     :  :           +- * Project (12)
      :     :     :     :  :              +- * BroadcastHashJoin Inner BuildRight (11)
      :     :     :     :  :                 :- * Project (9)
      :     :     :     :  :                 :  +- * BroadcastHashJoin Inner BuildRight (8)
      :     :     :     :  :                 :     :- * Filter (3)
      :     :     :     :  :                 :     :  +- * ColumnarToRow (2)
      :     :     :     :  :                 :     :     +- Scan parquet spark_catalog.default.customer (1)
      :     :     :     :  :                 :     +- BroadcastExchange (7)
      :     :     :     :  :                 :        +- * Filter (6)
      :     :     :     :  :                 :           +- * ColumnarToRow (5)
      :     :     :     :  :                 :              +- Scan parquet spark_catalog.default.store_sales (4)
      :     :     :     :  :                 +- ReusedExchange (10)
      :     :     :     :  +- BroadcastExchange (32)
      :     :     :     :     +- * HashAggregate (31)
      :     :     :     :        +- Exchange (30)
      :     :     :     :           +- * HashAggregate (29)
      :     :     :     :              +- * Project (28)
      :     :     :     :                 +- * BroadcastHashJoin Inner BuildRight (27)
      :     :     :     :                    :- * Project (25)
      :     :     :     :                    :  +- * BroadcastHashJoin Inner BuildRight (24)
      :     :     :     :                    :     :- * Filter (19)
      :     :     :     :                    :     :  +- * ColumnarToRow (18)
      :     :     :     :                    :     :     +- Scan parquet spark_catalog.default.customer (17)
      :     :     :     :                    :     +- BroadcastExchange (23)
      :     :     :     :                    :        +- * Filter (22)
      :     :     :     :                    :           +- * ColumnarToRow (21)
      :     :     :     :                    :              +- Scan parquet spark_catalog.default.store_sales (20)
      :     :     :     :                    +- ReusedExchange (26)
      :     :     :     +- BroadcastExchange (50)
      :     :     :        +- * Filter (49)
      :     :     :           +- * HashAggregate (48)
      :     :     :              +- Exchange (47)
      :     :     :                 +- * HashAggregate (46)
      :     :     :                    +- * Project (45)
      :     :     :                       +- * BroadcastHashJoin Inner BuildRight (44)
      :     :     :                          :- * Project (42)
      :     :     :                          :  +- * BroadcastHashJoin Inner BuildRight (41)
      :     :     :                          :     :- * Filter (36)
      :     :     :                          :     :  +- * ColumnarToRow (35)
      :     :     :                          :     :     +- Scan parquet spark_catalog.default.customer (34)
      :     :     :                          :     +- BroadcastExchange (40)
      :     :     :                          :        +- * Filter (39)
      :     :     :                          :           +- * ColumnarToRow (38)
      :     :     :                          :              +- Scan parquet spark_catalog.default.catalog_sales (37)
      :     :     :                          +- ReusedExchange (43)
      :     :     +- BroadcastExchange (68)
      :     :        +- * HashAggregate (67)
      :     :           +- Exchange (66)
      :     :              +- * HashAggregate (65)
      :     :                 +- * Project (64)
      :     :                    +- * BroadcastHashJoin Inner BuildRight (63)
      :     :                       :- * Project (61)
      :     :                       :  +- * BroadcastHashJoin Inner BuildRight (60)
      :     :                       :     :- * Filter (55)
      :     :                       :     :  +- * ColumnarToRow (54)
      :     :                       :     :     +- Scan parquet spark_catalog.default.customer (53)
      :     :                       :     +- BroadcastExchange (59)
      :     :                       :        +- * Filter (58)
      :     :                       :           +- * ColumnarToRow (57)
      :     :                       :              +- Scan parquet spark_catalog.default.catalog_sales (56)
      :     :                       +- ReusedExchange (62)
      :     +- BroadcastExchange (87)
      :        +- * Filter (86)
      :           +- * HashAggregate (85)
      :              +- Exchange (84)
      :                 +- * HashAggregate (83)
      :                    +- * Project (82)
      :                       +- * BroadcastHashJoin Inner BuildRight (81)
      :                          :- * Project (79)
      :                          :  +- * BroadcastHashJoin Inner BuildRight (78)
      :                          :     :- * Filter (73)
      :                          :     :  +- * ColumnarToRow (72)
      :                          :     :     +- Scan parquet spark_catalog.default.customer (71)
      :                          :     +- BroadcastExchange (77)
      :                          :        +- * Filter (76)
      :                          :           +- * ColumnarToRow (75)
      :                          :              +- Scan parquet spark_catalog.default.web_sales (74)
      :                          +- ReusedExchange (80)
      +- BroadcastExchange (105)
         +- * HashAggregate (104)
            +- Exchange (103)
               +- * HashAggregate (102)
                  +- * Project (101)
                     +- * BroadcastHashJoin Inner BuildRight (100)
                        :- * Project (98)
                        :  +- * BroadcastHashJoin Inner BuildRight (97)
                        :     :- * Filter (92)
                        :     :  +- * ColumnarToRow (91)
                        :     :     +- Scan parquet spark_catalog.default.customer (90)
                        :     +- BroadcastExchange (96)
                        :        +- * Filter (95)
                        :           +- * ColumnarToRow (94)
                        :              +- Scan parquet spark_catalog.default.web_sales (93)
                        +- ReusedExchange (99)


(1) Scan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(2) ColumnarToRow [codegen id : 3]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(3) Filter [codegen id : 3]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(4) Scan parquet spark_catalog.default.store_sales
Output [6]: [ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, ss_sold_date_sk#14]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#14), dynamicpruningexpression(ss_sold_date_sk#14 IN dynamicpruning#15)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(5) ColumnarToRow [codegen id : 1]
Input [6]: [ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, ss_sold_date_sk#14]

(6) Filter [codegen id : 1]
Input [6]: [ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, ss_sold_date_sk#14]
Condition : isnotnull(ss_customer_sk#9)

(7) BroadcastExchange
Input [6]: [ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, ss_sold_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#9]
Join type: Inner
Join condition: None

(9) Project [codegen id : 3]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, ss_sold_date_sk#14]
Input [14]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, ss_sold_date_sk#14]

(10) ReusedExchange [Reuses operator id: 112]
Output [2]: [d_date_sk#16, d_year#17]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#14]
Right keys [1]: [d_date_sk#16]
Join type: Inner
Join condition: None

(12) Project [codegen id : 3]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, d_year#17]
Input [14]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, ss_sold_date_sk#14, d_date_sk#16, d_year#17]

(13) HashAggregate [codegen id : 3]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, d_year#17]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17]
Functions [1]: [partial_sum(((((ss_ext_list_price#13 - ss_ext_wholesale_cost#12) - ss_ext_discount_amt#10) + ss_ext_sales_price#11) / 2))]
Aggregate Attributes [2]: [sum#18, isEmpty#19]
Results [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#20, isEmpty#21]

(14) Exchange
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#20, isEmpty#21]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(15) HashAggregate [codegen id : 24]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#20, isEmpty#21]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17]
Functions [1]: [sum(((((ss_ext_list_price#13 - ss_ext_wholesale_cost#12) - ss_ext_discount_amt#10) + ss_ext_sales_price#11) / 2))]
Aggregate Attributes [1]: [sum(((((ss_ext_list_price#13 - ss_ext_wholesale_cost#12) - ss_ext_discount_amt#10) + ss_ext_sales_price#11) / 2))#22]
Results [2]: [c_customer_id#2 AS customer_id#23, sum(((((ss_ext_list_price#13 - ss_ext_wholesale_cost#12) - ss_ext_discount_amt#10) + ss_ext_sales_price#11) / 2))#22 AS year_total#24]

(16) Filter [codegen id : 24]
Input [2]: [customer_id#23, year_total#24]
Condition : (isnotnull(year_total#24) AND (year_total#24 > 0.000000))

(17) Scan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(18) ColumnarToRow [codegen id : 6]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(19) Filter [codegen id : 6]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(20) Scan parquet spark_catalog.default.store_sales
Output [6]: [ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, ss_sold_date_sk#14]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#14), dynamicpruningexpression(ss_sold_date_sk#14 IN dynamicpruning#25)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(21) ColumnarToRow [codegen id : 4]
Input [6]: [ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, ss_sold_date_sk#14]

(22) Filter [codegen id : 4]
Input [6]: [ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, ss_sold_date_sk#14]
Condition : isnotnull(ss_customer_sk#9)

(23) BroadcastExchange
Input [6]: [ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, ss_sold_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(24) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#9]
Join type: Inner
Join condition: None

(25) Project [codegen id : 6]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, ss_sold_date_sk#14]
Input [14]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_customer_sk#9, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, ss_sold_date_sk#14]

(26) ReusedExchange [Reuses operator id: 116]
Output [2]: [d_date_sk#16, d_year#17]

(27) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#14]
Right keys [1]: [d_date_sk#16]
Join type: Inner
Join condition: None

(28) Project [codegen id : 6]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, d_year#17]
Input [14]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, ss_sold_date_sk#14, d_date_sk#16, d_year#17]

(29) HashAggregate [codegen id : 6]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#10, ss_ext_sales_price#11, ss_ext_wholesale_cost#12, ss_ext_list_price#13, d_year#17]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17]
Functions [1]: [partial_sum(((((ss_ext_list_price#13 - ss_ext_wholesale_cost#12) - ss_ext_discount_amt#10) + ss_ext_sales_price#11) / 2))]
Aggregate Attributes [2]: [sum#26, isEmpty#27]
Results [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#28, isEmpty#29]

(30) Exchange
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#28, isEmpty#29]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(31) HashAggregate [codegen id : 7]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#28, isEmpty#29]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17]
Functions [1]: [sum(((((ss_ext_list_price#13 - ss_ext_wholesale_cost#12) - ss_ext_discount_amt#10) + ss_ext_sales_price#11) / 2))]
Aggregate Attributes [1]: [sum(((((ss_ext_list_price#13 - ss_ext_wholesale_cost#12) - ss_ext_discount_amt#10) + ss_ext_sales_price#11) / 2))#22]
Results [8]: [c_customer_id#2 AS customer_id#30, c_first_name#3 AS customer_first_name#31, c_last_name#4 AS customer_last_name#32, c_preferred_cust_flag#5 AS customer_preferred_cust_flag#33, c_birth_country#6 AS customer_birth_country#34, c_login#7 AS customer_login#35, c_email_address#8 AS customer_email_address#36, sum(((((ss_ext_list_price#13 - ss_ext_wholesale_cost#12) - ss_ext_discount_amt#10) + ss_ext_sales_price#11) / 2))#22 AS year_total#37]

(32) BroadcastExchange
Input [8]: [customer_id#30, customer_first_name#31, customer_last_name#32, customer_preferred_cust_flag#33, customer_birth_country#34, customer_login#35, customer_email_address#36, year_total#37]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=5]

(33) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [customer_id#23]
Right keys [1]: [customer_id#30]
Join type: Inner
Join condition: None

(34) Scan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(35) ColumnarToRow [codegen id : 10]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(36) Filter [codegen id : 10]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(37) Scan parquet spark_catalog.default.catalog_sales
Output [6]: [cs_bill_customer_sk#38, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, cs_sold_date_sk#43]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#43), dynamicpruningexpression(cs_sold_date_sk#43 IN dynamicpruning#15)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2)>

(38) ColumnarToRow [codegen id : 8]
Input [6]: [cs_bill_customer_sk#38, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, cs_sold_date_sk#43]

(39) Filter [codegen id : 8]
Input [6]: [cs_bill_customer_sk#38, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, cs_sold_date_sk#43]
Condition : isnotnull(cs_bill_customer_sk#38)

(40) BroadcastExchange
Input [6]: [cs_bill_customer_sk#38, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, cs_sold_date_sk#43]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=6]

(41) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [cs_bill_customer_sk#38]
Join type: Inner
Join condition: None

(42) Project [codegen id : 10]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, cs_sold_date_sk#43]
Input [14]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_bill_customer_sk#38, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, cs_sold_date_sk#43]

(43) ReusedExchange [Reuses operator id: 112]
Output [2]: [d_date_sk#16, d_year#17]

(44) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cs_sold_date_sk#43]
Right keys [1]: [d_date_sk#16]
Join type: Inner
Join condition: None

(45) Project [codegen id : 10]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, d_year#17]
Input [14]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, cs_sold_date_sk#43, d_date_sk#16, d_year#17]

(46) HashAggregate [codegen id : 10]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, d_year#17]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17]
Functions [1]: [partial_sum(((((cs_ext_list_price#42 - cs_ext_wholesale_cost#41) - cs_ext_discount_amt#39) + cs_ext_sales_price#40) / 2))]
Aggregate Attributes [2]: [sum#44, isEmpty#45]
Results [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#46, isEmpty#47]

(47) Exchange
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#46, isEmpty#47]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(48) HashAggregate [codegen id : 11]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#46, isEmpty#47]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17]
Functions [1]: [sum(((((cs_ext_list_price#42 - cs_ext_wholesale_cost#41) - cs_ext_discount_amt#39) + cs_ext_sales_price#40) / 2))]
Aggregate Attributes [1]: [sum(((((cs_ext_list_price#42 - cs_ext_wholesale_cost#41) - cs_ext_discount_amt#39) + cs_ext_sales_price#40) / 2))#48]
Results [2]: [c_customer_id#2 AS customer_id#49, sum(((((cs_ext_list_price#42 - cs_ext_wholesale_cost#41) - cs_ext_discount_amt#39) + cs_ext_sales_price#40) / 2))#48 AS year_total#50]

(49) Filter [codegen id : 11]
Input [2]: [customer_id#49, year_total#50]
Condition : (isnotnull(year_total#50) AND (year_total#50 > 0.000000))

(50) BroadcastExchange
Input [2]: [customer_id#49, year_total#50]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=8]

(51) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [customer_id#23]
Right keys [1]: [customer_id#49]
Join type: Inner
Join condition: None

(52) Project [codegen id : 24]
Output [11]: [customer_id#23, year_total#24, customer_id#30, customer_first_name#31, customer_last_name#32, customer_preferred_cust_flag#33, customer_birth_country#34, customer_login#35, customer_email_address#36, year_total#37, year_total#50]
Input [12]: [customer_id#23, year_total#24, customer_id#30, customer_first_name#31, customer_last_name#32, customer_preferred_cust_flag#33, customer_birth_country#34, customer_login#35, customer_email_address#36, year_total#37, customer_id#49, year_total#50]

(53) Scan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(54) ColumnarToRow [codegen id : 14]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(55) Filter [codegen id : 14]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(56) Scan parquet spark_catalog.default.catalog_sales
Output [6]: [cs_bill_customer_sk#38, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, cs_sold_date_sk#43]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#43), dynamicpruningexpression(cs_sold_date_sk#43 IN dynamicpruning#25)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2)>

(57) ColumnarToRow [codegen id : 12]
Input [6]: [cs_bill_customer_sk#38, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, cs_sold_date_sk#43]

(58) Filter [codegen id : 12]
Input [6]: [cs_bill_customer_sk#38, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, cs_sold_date_sk#43]
Condition : isnotnull(cs_bill_customer_sk#38)

(59) BroadcastExchange
Input [6]: [cs_bill_customer_sk#38, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, cs_sold_date_sk#43]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=9]

(60) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [cs_bill_customer_sk#38]
Join type: Inner
Join condition: None

(61) Project [codegen id : 14]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, cs_sold_date_sk#43]
Input [14]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_bill_customer_sk#38, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, cs_sold_date_sk#43]

(62) ReusedExchange [Reuses operator id: 116]
Output [2]: [d_date_sk#16, d_year#17]

(63) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [cs_sold_date_sk#43]
Right keys [1]: [d_date_sk#16]
Join type: Inner
Join condition: None

(64) Project [codegen id : 14]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, d_year#17]
Input [14]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, cs_sold_date_sk#43, d_date_sk#16, d_year#17]

(65) HashAggregate [codegen id : 14]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, d_year#17]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17]
Functions [1]: [partial_sum(((((cs_ext_list_price#42 - cs_ext_wholesale_cost#41) - cs_ext_discount_amt#39) + cs_ext_sales_price#40) / 2))]
Aggregate Attributes [2]: [sum#51, isEmpty#52]
Results [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#53, isEmpty#54]

(66) Exchange
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#53, isEmpty#54]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(67) HashAggregate [codegen id : 15]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#53, isEmpty#54]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17]
Functions [1]: [sum(((((cs_ext_list_price#42 - cs_ext_wholesale_cost#41) - cs_ext_discount_amt#39) + cs_ext_sales_price#40) / 2))]
Aggregate Attributes [1]: [sum(((((cs_ext_list_price#42 - cs_ext_wholesale_cost#41) - cs_ext_discount_amt#39) + cs_ext_sales_price#40) / 2))#48]
Results [2]: [c_customer_id#2 AS customer_id#55, sum(((((cs_ext_list_price#42 - cs_ext_wholesale_cost#41) - cs_ext_discount_amt#39) + cs_ext_sales_price#40) / 2))#48 AS year_total#56]

(68) BroadcastExchange
Input [2]: [customer_id#55, year_total#56]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=11]

(69) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [customer_id#23]
Right keys [1]: [customer_id#55]
Join type: Inner
Join condition: (CASE WHEN (year_total#50 > 0.000000) THEN (year_total#56 / year_total#50) END > CASE WHEN (year_total#24 > 0.000000) THEN (year_total#37 / year_total#24) END)

(70) Project [codegen id : 24]
Output [10]: [customer_id#23, customer_id#30, customer_first_name#31, customer_last_name#32, customer_preferred_cust_flag#33, customer_birth_country#34, customer_login#35, customer_email_address#36, year_total#50, year_total#56]
Input [13]: [customer_id#23, year_total#24, customer_id#30, customer_first_name#31, customer_last_name#32, customer_preferred_cust_flag#33, customer_birth_country#34, customer_login#35, customer_email_address#36, year_total#37, year_total#50, customer_id#55, year_total#56]

(71) Scan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(72) ColumnarToRow [codegen id : 18]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(73) Filter [codegen id : 18]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(74) Scan parquet spark_catalog.default.web_sales
Output [6]: [ws_bill_customer_sk#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, ws_sold_date_sk#62]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#62), dynamicpruningexpression(ws_sold_date_sk#62 IN dynamicpruning#15)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_price:decimal(7,2),ws_ext_wholesale_cost:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(75) ColumnarToRow [codegen id : 16]
Input [6]: [ws_bill_customer_sk#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, ws_sold_date_sk#62]

(76) Filter [codegen id : 16]
Input [6]: [ws_bill_customer_sk#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, ws_sold_date_sk#62]
Condition : isnotnull(ws_bill_customer_sk#57)

(77) BroadcastExchange
Input [6]: [ws_bill_customer_sk#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, ws_sold_date_sk#62]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=12]

(78) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#57]
Join type: Inner
Join condition: None

(79) Project [codegen id : 18]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, ws_sold_date_sk#62]
Input [14]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_bill_customer_sk#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, ws_sold_date_sk#62]

(80) ReusedExchange [Reuses operator id: 112]
Output [2]: [d_date_sk#16, d_year#17]

(81) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [ws_sold_date_sk#62]
Right keys [1]: [d_date_sk#16]
Join type: Inner
Join condition: None

(82) Project [codegen id : 18]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, d_year#17]
Input [14]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, ws_sold_date_sk#62, d_date_sk#16, d_year#17]

(83) HashAggregate [codegen id : 18]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, d_year#17]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17]
Functions [1]: [partial_sum(((((ws_ext_list_price#61 - ws_ext_wholesale_cost#60) - ws_ext_discount_amt#58) + ws_ext_sales_price#59) / 2))]
Aggregate Attributes [2]: [sum#63, isEmpty#64]
Results [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#65, isEmpty#66]

(84) Exchange
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#65, isEmpty#66]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(85) HashAggregate [codegen id : 19]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#65, isEmpty#66]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17]
Functions [1]: [sum(((((ws_ext_list_price#61 - ws_ext_wholesale_cost#60) - ws_ext_discount_amt#58) + ws_ext_sales_price#59) / 2))]
Aggregate Attributes [1]: [sum(((((ws_ext_list_price#61 - ws_ext_wholesale_cost#60) - ws_ext_discount_amt#58) + ws_ext_sales_price#59) / 2))#67]
Results [2]: [c_customer_id#2 AS customer_id#68, sum(((((ws_ext_list_price#61 - ws_ext_wholesale_cost#60) - ws_ext_discount_amt#58) + ws_ext_sales_price#59) / 2))#67 AS year_total#69]

(86) Filter [codegen id : 19]
Input [2]: [customer_id#68, year_total#69]
Condition : (isnotnull(year_total#69) AND (year_total#69 > 0.000000))

(87) BroadcastExchange
Input [2]: [customer_id#68, year_total#69]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=14]

(88) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [customer_id#23]
Right keys [1]: [customer_id#68]
Join type: Inner
Join condition: None

(89) Project [codegen id : 24]
Output [11]: [customer_id#23, customer_id#30, customer_first_name#31, customer_last_name#32, customer_preferred_cust_flag#33, customer_birth_country#34, customer_login#35, customer_email_address#36, year_total#50, year_total#56, year_total#69]
Input [12]: [customer_id#23, customer_id#30, customer_first_name#31, customer_last_name#32, customer_preferred_cust_flag#33, customer_birth_country#34, customer_login#35, customer_email_address#36, year_total#50, year_total#56, customer_id#68, year_total#69]

(90) Scan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(91) ColumnarToRow [codegen id : 22]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(92) Filter [codegen id : 22]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(93) Scan parquet spark_catalog.default.web_sales
Output [6]: [ws_bill_customer_sk#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, ws_sold_date_sk#62]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#62), dynamicpruningexpression(ws_sold_date_sk#62 IN dynamicpruning#25)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_price:decimal(7,2),ws_ext_wholesale_cost:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(94) ColumnarToRow [codegen id : 20]
Input [6]: [ws_bill_customer_sk#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, ws_sold_date_sk#62]

(95) Filter [codegen id : 20]
Input [6]: [ws_bill_customer_sk#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, ws_sold_date_sk#62]
Condition : isnotnull(ws_bill_customer_sk#57)

(96) BroadcastExchange
Input [6]: [ws_bill_customer_sk#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, ws_sold_date_sk#62]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=15]

(97) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#57]
Join type: Inner
Join condition: None

(98) Project [codegen id : 22]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, ws_sold_date_sk#62]
Input [14]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_bill_customer_sk#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, ws_sold_date_sk#62]

(99) ReusedExchange [Reuses operator id: 116]
Output [2]: [d_date_sk#16, d_year#17]

(100) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ws_sold_date_sk#62]
Right keys [1]: [d_date_sk#16]
Join type: Inner
Join condition: None

(101) Project [codegen id : 22]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, d_year#17]
Input [14]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, ws_sold_date_sk#62, d_date_sk#16, d_year#17]

(102) HashAggregate [codegen id : 22]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, d_year#17]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17]
Functions [1]: [partial_sum(((((ws_ext_list_price#61 - ws_ext_wholesale_cost#60) - ws_ext_discount_amt#58) + ws_ext_sales_price#59) / 2))]
Aggregate Attributes [2]: [sum#70, isEmpty#71]
Results [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#72, isEmpty#73]

(103) Exchange
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#72, isEmpty#73]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, 5), ENSURE_REQUIREMENTS, [plan_id=16]

(104) HashAggregate [codegen id : 23]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17, sum#72, isEmpty#73]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#17]
Functions [1]: [sum(((((ws_ext_list_price#61 - ws_ext_wholesale_cost#60) - ws_ext_discount_amt#58) + ws_ext_sales_price#59) / 2))]
Aggregate Attributes [1]: [sum(((((ws_ext_list_price#61 - ws_ext_wholesale_cost#60) - ws_ext_discount_amt#58) + ws_ext_sales_price#59) / 2))#67]
Results [2]: [c_customer_id#2 AS customer_id#74, sum(((((ws_ext_list_price#61 - ws_ext_wholesale_cost#60) - ws_ext_discount_amt#58) + ws_ext_sales_price#59) / 2))#67 AS year_total#75]

(105) BroadcastExchange
Input [2]: [customer_id#74, year_total#75]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=17]

(106) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [customer_id#23]
Right keys [1]: [customer_id#74]
Join type: Inner
Join condition: (CASE WHEN (year_total#50 > 0.000000) THEN (year_total#56 / year_total#50) END > CASE WHEN (year_total#69 > 0.000000) THEN (year_total#75 / year_total#69) END)

(107) Project [codegen id : 24]
Output [7]: [customer_id#30, customer_first_name#31, customer_last_name#32, customer_preferred_cust_flag#33, customer_birth_country#34, customer_login#35, customer_email_address#36]
Input [13]: [customer_id#23, customer_id#30, customer_first_name#31, customer_last_name#32, customer_preferred_cust_flag#33, customer_birth_country#34, customer_login#35, customer_email_address#36, year_total#50, year_total#56, year_total#69, customer_id#74, year_total#75]

(108) TakeOrderedAndProject
Input [7]: [customer_id#30, customer_first_name#31, customer_last_name#32, customer_preferred_cust_flag#33, customer_birth_country#34, customer_login#35, customer_email_address#36]
Arguments: 100, [customer_id#30 ASC NULLS FIRST, customer_first_name#31 ASC NULLS FIRST, customer_last_name#32 ASC NULLS FIRST, customer_preferred_cust_flag#33 ASC NULLS FIRST, customer_birth_country#34 ASC NULLS FIRST, customer_login#35 ASC NULLS FIRST, customer_email_address#36 ASC NULLS FIRST], [customer_id#30, customer_first_name#31, customer_last_name#32, customer_preferred_cust_flag#33, customer_birth_country#34, customer_login#35, customer_email_address#36]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#14 IN dynamicpruning#15
BroadcastExchange (112)
+- * Filter (111)
   +- * ColumnarToRow (110)
      +- Scan parquet spark_catalog.default.date_dim (109)


(109) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#16, d_year#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(110) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#16, d_year#17]

(111) Filter [codegen id : 1]
Input [2]: [d_date_sk#16, d_year#17]
Condition : ((isnotnull(d_year#17) AND (d_year#17 = 2001)) AND isnotnull(d_date_sk#16))

(112) BroadcastExchange
Input [2]: [d_date_sk#16, d_year#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=18]

Subquery:2 Hosting operator id = 20 Hosting Expression = ss_sold_date_sk#14 IN dynamicpruning#25
BroadcastExchange (116)
+- * Filter (115)
   +- * ColumnarToRow (114)
      +- Scan parquet spark_catalog.default.date_dim (113)


(113) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#16, d_year#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(114) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#16, d_year#17]

(115) Filter [codegen id : 1]
Input [2]: [d_date_sk#16, d_year#17]
Condition : ((isnotnull(d_year#17) AND (d_year#17 = 2002)) AND isnotnull(d_date_sk#16))

(116) BroadcastExchange
Input [2]: [d_date_sk#16, d_year#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=19]

Subquery:3 Hosting operator id = 37 Hosting Expression = cs_sold_date_sk#43 IN dynamicpruning#15

Subquery:4 Hosting operator id = 56 Hosting Expression = cs_sold_date_sk#43 IN dynamicpruning#25

Subquery:5 Hosting operator id = 74 Hosting Expression = ws_sold_date_sk#62 IN dynamicpruning#15

Subquery:6 Hosting operator id = 93 Hosting Expression = ws_sold_date_sk#62 IN dynamicpruning#25


