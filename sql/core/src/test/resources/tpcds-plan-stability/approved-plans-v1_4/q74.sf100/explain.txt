== Physical Plan ==
TakeOrderedAndProject (80)
+- * Project (79)
   +- * SortMergeJoin Inner (78)
      :- * Project (63)
      :  +- * SortMergeJoin Inner (62)
      :     :- * SortMergeJoin Inner (42)
      :     :  :- * Sort (24)
      :     :  :  +- Exchange (23)
      :     :  :     +- * Filter (22)
      :     :  :        +- * HashAggregate (21)
      :     :  :           +- Exchange (20)
      :     :  :              +- * HashAggregate (19)
      :     :  :                 +- * Project (18)
      :     :  :                    +- * BroadcastHashJoin Inner BuildRight (17)
      :     :  :                       :- * Project (12)
      :     :  :                       :  +- * SortMergeJoin Inner (11)
      :     :  :                       :     :- * Sort (5)
      :     :  :                       :     :  +- Exchange (4)
      :     :  :                       :     :     +- * Filter (3)
      :     :  :                       :     :        +- * ColumnarToRow (2)
      :     :  :                       :     :           +- Scan parquet default.customer (1)
      :     :  :                       :     +- * Sort (10)
      :     :  :                       :        +- Exchange (9)
      :     :  :                       :           +- * Filter (8)
      :     :  :                       :              +- * ColumnarToRow (7)
      :     :  :                       :                 +- Scan parquet default.store_sales (6)
      :     :  :                       +- BroadcastExchange (16)
      :     :  :                          +- * Filter (15)
      :     :  :                             +- * ColumnarToRow (14)
      :     :  :                                +- Scan parquet default.date_dim (13)
      :     :  +- * Sort (41)
      :     :     +- Exchange (40)
      :     :        +- * HashAggregate (39)
      :     :           +- Exchange (38)
      :     :              +- * HashAggregate (37)
      :     :                 +- * Project (36)
      :     :                    +- * BroadcastHashJoin Inner BuildRight (35)
      :     :                       :- * Project (30)
      :     :                       :  +- * SortMergeJoin Inner (29)
      :     :                       :     :- * Sort (26)
      :     :                       :     :  +- ReusedExchange (25)
      :     :                       :     +- * Sort (28)
      :     :                       :        +- ReusedExchange (27)
      :     :                       +- BroadcastExchange (34)
      :     :                          +- * Filter (33)
      :     :                             +- * ColumnarToRow (32)
      :     :                                +- Scan parquet default.date_dim (31)
      :     +- * Sort (61)
      :        +- Exchange (60)
      :           +- * Project (59)
      :              +- * Filter (58)
      :                 +- * HashAggregate (57)
      :                    +- Exchange (56)
      :                       +- * HashAggregate (55)
      :                          +- * Project (54)
      :                             +- * BroadcastHashJoin Inner BuildRight (53)
      :                                :- * Project (51)
      :                                :  +- * SortMergeJoin Inner (50)
      :                                :     :- * Sort (44)
      :                                :     :  +- ReusedExchange (43)
      :                                :     +- * Sort (49)
      :                                :        +- Exchange (48)
      :                                :           +- * Filter (47)
      :                                :              +- * ColumnarToRow (46)
      :                                :                 +- Scan parquet default.web_sales (45)
      :                                +- ReusedExchange (52)
      +- * Sort (77)
         +- Exchange (76)
            +- * HashAggregate (75)
               +- Exchange (74)
                  +- * HashAggregate (73)
                     +- * Project (72)
                        +- * BroadcastHashJoin Inner BuildRight (71)
                           :- * Project (69)
                           :  +- * SortMergeJoin Inner (68)
                           :     :- * Sort (65)
                           :     :  +- ReusedExchange (64)
                           :     +- * Sort (67)
                           :        +- ReusedExchange (66)
                           +- ReusedExchange (70)


(1) Scan parquet default.customer
Output [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]

(3) Filter [codegen id : 1]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(4) Exchange
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Arguments: hashpartitioning(c_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#5]

(5) Sort [codegen id : 2]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#6, ss_customer_sk#7, ss_net_paid#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_net_paid:decimal(7,2)>

(7) ColumnarToRow [codegen id : 3]
Input [3]: [ss_sold_date_sk#6, ss_customer_sk#7, ss_net_paid#8]

(8) Filter [codegen id : 3]
Input [3]: [ss_sold_date_sk#6, ss_customer_sk#7, ss_net_paid#8]
Condition : (isnotnull(ss_customer_sk#7) AND isnotnull(ss_sold_date_sk#6))

(9) Exchange
Input [3]: [ss_sold_date_sk#6, ss_customer_sk#7, ss_net_paid#8]
Arguments: hashpartitioning(ss_customer_sk#7, 5), ENSURE_REQUIREMENTS, [id=#9]

(10) Sort [codegen id : 4]
Input [3]: [ss_sold_date_sk#6, ss_customer_sk#7, ss_net_paid#8]
Arguments: [ss_customer_sk#7 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 6]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#7]
Join condition: None

(12) Project [codegen id : 6]
Output [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_sold_date_sk#6, ss_net_paid#8]
Input [7]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, ss_sold_date_sk#6, ss_customer_sk#7, ss_net_paid#8]

(13) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(14) ColumnarToRow [codegen id : 5]
Input [2]: [d_date_sk#10, d_year#11]

(15) Filter [codegen id : 5]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 = 2001)) AND d_year#11 IN (2001,2002)) AND isnotnull(d_date_sk#10))

(16) BroadcastExchange
Input [2]: [d_date_sk#10, d_year#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#12]

(17) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#10]
Join condition: None

(18) Project [codegen id : 6]
Output [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#8, d_year#11]
Input [7]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_sold_date_sk#6, ss_net_paid#8, d_date_sk#10, d_year#11]

(19) HashAggregate [codegen id : 6]
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#8, d_year#11]
Keys [4]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#8))]
Aggregate Attributes [1]: [sum#13]
Results [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#14]

(20) Exchange
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#14]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, 5), ENSURE_REQUIREMENTS, [id=#15]

(21) HashAggregate [codegen id : 7]
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#14]
Keys [4]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11]
Functions [1]: [sum(UnscaledValue(ss_net_paid#8))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#8))#16]
Results [2]: [c_customer_id#2 AS customer_id#17, MakeDecimal(sum(UnscaledValue(ss_net_paid#8))#16,17,2) AS year_total#18]

(22) Filter [codegen id : 7]
Input [2]: [customer_id#17, year_total#18]
Condition : (isnotnull(year_total#18) AND (year_total#18 > 0.00))

(23) Exchange
Input [2]: [customer_id#17, year_total#18]
Arguments: hashpartitioning(customer_id#17, 5), ENSURE_REQUIREMENTS, [id=#19]

(24) Sort [codegen id : 8]
Input [2]: [customer_id#17, year_total#18]
Arguments: [customer_id#17 ASC NULLS FIRST], false, 0

(25) ReusedExchange [Reuses operator id: 4]
Output [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]

(26) Sort [codegen id : 10]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(27) ReusedExchange [Reuses operator id: 9]
Output [3]: [ss_sold_date_sk#6, ss_customer_sk#7, ss_net_paid#8]

(28) Sort [codegen id : 12]
Input [3]: [ss_sold_date_sk#6, ss_customer_sk#7, ss_net_paid#8]
Arguments: [ss_customer_sk#7 ASC NULLS FIRST], false, 0

(29) SortMergeJoin [codegen id : 14]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#7]
Join condition: None

(30) Project [codegen id : 14]
Output [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_sold_date_sk#6, ss_net_paid#8]
Input [7]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, ss_sold_date_sk#6, ss_customer_sk#7, ss_net_paid#8]

(31) Scan parquet default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(32) ColumnarToRow [codegen id : 13]
Input [2]: [d_date_sk#10, d_year#11]

(33) Filter [codegen id : 13]
Input [2]: [d_date_sk#10, d_year#11]
Condition : (((isnotnull(d_year#11) AND (d_year#11 = 2002)) AND d_year#11 IN (2001,2002)) AND isnotnull(d_date_sk#10))

(34) BroadcastExchange
Input [2]: [d_date_sk#10, d_year#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#20]

(35) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#10]
Join condition: None

(36) Project [codegen id : 14]
Output [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#8, d_year#11]
Input [7]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_sold_date_sk#6, ss_net_paid#8, d_date_sk#10, d_year#11]

(37) HashAggregate [codegen id : 14]
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#8, d_year#11]
Keys [4]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#8))]
Aggregate Attributes [1]: [sum#21]
Results [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#22]

(38) Exchange
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#22]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, 5), ENSURE_REQUIREMENTS, [id=#23]

(39) HashAggregate [codegen id : 15]
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#22]
Keys [4]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11]
Functions [1]: [sum(UnscaledValue(ss_net_paid#8))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#8))#24]
Results [4]: [c_customer_id#2 AS customer_id#25, c_first_name#3 AS customer_first_name#26, c_last_name#4 AS customer_last_name#27, MakeDecimal(sum(UnscaledValue(ss_net_paid#8))#24,17,2) AS year_total#28]

(40) Exchange
Input [4]: [customer_id#25, customer_first_name#26, customer_last_name#27, year_total#28]
Arguments: hashpartitioning(customer_id#25, 5), ENSURE_REQUIREMENTS, [id=#29]

(41) Sort [codegen id : 16]
Input [4]: [customer_id#25, customer_first_name#26, customer_last_name#27, year_total#28]
Arguments: [customer_id#25 ASC NULLS FIRST], false, 0

(42) SortMergeJoin [codegen id : 17]
Left keys [1]: [customer_id#17]
Right keys [1]: [customer_id#25]
Join condition: None

(43) ReusedExchange [Reuses operator id: 4]
Output [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]

(44) Sort [codegen id : 19]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(45) Scan parquet default.web_sales
Output [3]: [ws_sold_date_sk#30, ws_bill_customer_sk#31, ws_net_paid#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>

(46) ColumnarToRow [codegen id : 20]
Input [3]: [ws_sold_date_sk#30, ws_bill_customer_sk#31, ws_net_paid#32]

(47) Filter [codegen id : 20]
Input [3]: [ws_sold_date_sk#30, ws_bill_customer_sk#31, ws_net_paid#32]
Condition : (isnotnull(ws_bill_customer_sk#31) AND isnotnull(ws_sold_date_sk#30))

(48) Exchange
Input [3]: [ws_sold_date_sk#30, ws_bill_customer_sk#31, ws_net_paid#32]
Arguments: hashpartitioning(ws_bill_customer_sk#31, 5), ENSURE_REQUIREMENTS, [id=#33]

(49) Sort [codegen id : 21]
Input [3]: [ws_sold_date_sk#30, ws_bill_customer_sk#31, ws_net_paid#32]
Arguments: [ws_bill_customer_sk#31 ASC NULLS FIRST], false, 0

(50) SortMergeJoin [codegen id : 23]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#31]
Join condition: None

(51) Project [codegen id : 23]
Output [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ws_sold_date_sk#30, ws_net_paid#32]
Input [7]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, ws_sold_date_sk#30, ws_bill_customer_sk#31, ws_net_paid#32]

(52) ReusedExchange [Reuses operator id: 16]
Output [2]: [d_date_sk#10, d_year#11]

(53) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [ws_sold_date_sk#30]
Right keys [1]: [d_date_sk#10]
Join condition: None

(54) Project [codegen id : 23]
Output [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ws_net_paid#32, d_year#11]
Input [7]: [c_customer_id#2, c_first_name#3, c_last_name#4, ws_sold_date_sk#30, ws_net_paid#32, d_date_sk#10, d_year#11]

(55) HashAggregate [codegen id : 23]
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ws_net_paid#32, d_year#11]
Keys [4]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#32))]
Aggregate Attributes [1]: [sum#34]
Results [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#35]

(56) Exchange
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#35]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, 5), ENSURE_REQUIREMENTS, [id=#36]

(57) HashAggregate [codegen id : 24]
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#35]
Keys [4]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11]
Functions [1]: [sum(UnscaledValue(ws_net_paid#32))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#32))#37]
Results [2]: [c_customer_id#2 AS customer_id#38, MakeDecimal(sum(UnscaledValue(ws_net_paid#32))#37,17,2) AS year_total#39]

(58) Filter [codegen id : 24]
Input [2]: [customer_id#38, year_total#39]
Condition : (isnotnull(year_total#39) AND (year_total#39 > 0.00))

(59) Project [codegen id : 24]
Output [2]: [customer_id#38 AS customer_id#40, year_total#39 AS year_total#41]
Input [2]: [customer_id#38, year_total#39]

(60) Exchange
Input [2]: [customer_id#40, year_total#41]
Arguments: hashpartitioning(customer_id#40, 5), ENSURE_REQUIREMENTS, [id=#42]

(61) Sort [codegen id : 25]
Input [2]: [customer_id#40, year_total#41]
Arguments: [customer_id#40 ASC NULLS FIRST], false, 0

(62) SortMergeJoin [codegen id : 26]
Left keys [1]: [customer_id#17]
Right keys [1]: [customer_id#40]
Join condition: None

(63) Project [codegen id : 26]
Output [7]: [customer_id#17, year_total#18, customer_id#25, customer_first_name#26, customer_last_name#27, year_total#28, year_total#41]
Input [8]: [customer_id#17, year_total#18, customer_id#25, customer_first_name#26, customer_last_name#27, year_total#28, customer_id#40, year_total#41]

(64) ReusedExchange [Reuses operator id: 4]
Output [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]

(65) Sort [codegen id : 28]
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(66) ReusedExchange [Reuses operator id: 48]
Output [3]: [ws_sold_date_sk#30, ws_bill_customer_sk#31, ws_net_paid#32]

(67) Sort [codegen id : 30]
Input [3]: [ws_sold_date_sk#30, ws_bill_customer_sk#31, ws_net_paid#32]
Arguments: [ws_bill_customer_sk#31 ASC NULLS FIRST], false, 0

(68) SortMergeJoin [codegen id : 32]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#31]
Join condition: None

(69) Project [codegen id : 32]
Output [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ws_sold_date_sk#30, ws_net_paid#32]
Input [7]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, ws_sold_date_sk#30, ws_bill_customer_sk#31, ws_net_paid#32]

(70) ReusedExchange [Reuses operator id: 34]
Output [2]: [d_date_sk#10, d_year#11]

(71) BroadcastHashJoin [codegen id : 32]
Left keys [1]: [ws_sold_date_sk#30]
Right keys [1]: [d_date_sk#10]
Join condition: None

(72) Project [codegen id : 32]
Output [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ws_net_paid#32, d_year#11]
Input [7]: [c_customer_id#2, c_first_name#3, c_last_name#4, ws_sold_date_sk#30, ws_net_paid#32, d_date_sk#10, d_year#11]

(73) HashAggregate [codegen id : 32]
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ws_net_paid#32, d_year#11]
Keys [4]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#32))]
Aggregate Attributes [1]: [sum#43]
Results [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#44]

(74) Exchange
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#44]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, 5), ENSURE_REQUIREMENTS, [id=#45]

(75) HashAggregate [codegen id : 33]
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11, sum#44]
Keys [4]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#11]
Functions [1]: [sum(UnscaledValue(ws_net_paid#32))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#32))#46]
Results [2]: [c_customer_id#2 AS customer_id#47, MakeDecimal(sum(UnscaledValue(ws_net_paid#32))#46,17,2) AS year_total#48]

(76) Exchange
Input [2]: [customer_id#47, year_total#48]
Arguments: hashpartitioning(customer_id#47, 5), ENSURE_REQUIREMENTS, [id=#49]

(77) Sort [codegen id : 34]
Input [2]: [customer_id#47, year_total#48]
Arguments: [customer_id#47 ASC NULLS FIRST], false, 0

(78) SortMergeJoin [codegen id : 35]
Left keys [1]: [customer_id#17]
Right keys [1]: [customer_id#47]
Join condition: (CASE WHEN (year_total#41 > 0.00) THEN CheckOverflow((promote_precision(year_total#48) / promote_precision(year_total#41)), DecimalType(37,20), true) ELSE null END > CASE WHEN (year_total#18 > 0.00) THEN CheckOverflow((promote_precision(year_total#28) / promote_precision(year_total#18)), DecimalType(37,20), true) ELSE null END)

(79) Project [codegen id : 35]
Output [3]: [customer_id#25, customer_first_name#26, customer_last_name#27]
Input [9]: [customer_id#17, year_total#18, customer_id#25, customer_first_name#26, customer_last_name#27, year_total#28, year_total#41, customer_id#47, year_total#48]

(80) TakeOrderedAndProject
Input [3]: [customer_id#25, customer_first_name#26, customer_last_name#27]
Arguments: 100, [customer_id#25 ASC NULLS FIRST, customer_id#25 ASC NULLS FIRST, customer_id#25 ASC NULLS FIRST], [customer_id#25, customer_first_name#26, customer_last_name#27]

