== Physical Plan ==
TakeOrderedAndProject (27)
+- * Filter (26)
   +- Window (25)
      +- * Sort (24)
         +- Exchange (23)
            +- * HashAggregate (22)
               +- Exchange (21)
                  +- * HashAggregate (20)
                     +- * Expand (19)
                        +- * Project (18)
                           +- * SortMergeJoin Inner (17)
                              :- * Sort (14)
                              :  +- Exchange (13)
                              :     +- * Project (12)
                              :        +- * BroadcastHashJoin Inner BuildRight (11)
                              :           :- * Project (6)
                              :           :  +- * BroadcastHashJoin Inner BuildRight (5)
                              :           :     :- * Filter (3)
                              :           :     :  +- * ColumnarToRow (2)
                              :           :     :     +- Scan parquet spark_catalog.default.store_sales (1)
                              :           :     +- ReusedExchange (4)
                              :           +- BroadcastExchange (10)
                              :              +- * Filter (9)
                              :                 +- * ColumnarToRow (8)
                              :                    +- Scan parquet spark_catalog.default.store (7)
                              +- * Sort (16)
                                 +- ReusedExchange (15)


(1) Scan parquet spark_catalog.default.store_sales
Output [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#5), dynamicpruningexpression(ss_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]

(3) Filter [codegen id : 3]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]
Condition : ((isnotnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1)) AND might_contain(Subquery scalar-subquery#7, [id=#8], xxhash64(ss_item_sk#1, 42), false))

(4) ReusedExchange [Reuses operator id: 39]
Output [4]: [d_date_sk#9, d_year#10, d_moy#11, d_qoy#12]

(5) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#5]
Right keys [1]: [d_date_sk#9]
Join type: Inner
Join condition: None

(6) Project [codegen id : 3]
Output [7]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, d_year#10, d_moy#11, d_qoy#12]
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5, d_date_sk#9, d_year#10, d_moy#11, d_qoy#12]

(7) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#13, s_store_id#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(8) ColumnarToRow [codegen id : 2]
Input [2]: [s_store_sk#13, s_store_id#14]

(9) Filter [codegen id : 2]
Input [2]: [s_store_sk#13, s_store_id#14]
Condition : isnotnull(s_store_sk#13)

(10) BroadcastExchange
Input [2]: [s_store_sk#13, s_store_id#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#13]
Join type: Inner
Join condition: None

(12) Project [codegen id : 3]
Output [7]: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#10, d_moy#11, d_qoy#12, s_store_id#14]
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, d_year#10, d_moy#11, d_qoy#12, s_store_sk#13, s_store_id#14]

(13) Exchange
Input [7]: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#10, d_moy#11, d_qoy#12, s_store_id#14]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(14) Sort [codegen id : 4]
Input [7]: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#10, d_moy#11, d_qoy#12, s_store_id#14]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(15) ReusedExchange [Reuses operator id: 31]
Output [5]: [i_item_sk#15, i_brand#16, i_class#17, i_category#18, i_product_name#19]

(16) Sort [codegen id : 6]
Input [5]: [i_item_sk#15, i_brand#16, i_class#17, i_category#18, i_product_name#19]
Arguments: [i_item_sk#15 ASC NULLS FIRST], false, 0

(17) SortMergeJoin [codegen id : 7]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#15]
Join type: Inner
Join condition: None

(18) Project [codegen id : 7]
Output [10]: [ss_quantity#3, ss_sales_price#4, i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14]
Input [12]: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#10, d_moy#11, d_qoy#12, s_store_id#14, i_item_sk#15, i_brand#16, i_class#17, i_category#18, i_product_name#19]

(19) Expand [codegen id : 7]
Input [10]: [ss_quantity#3, ss_sales_price#4, i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14]
Arguments: [[ss_quantity#3, ss_sales_price#4, i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, s_store_id#14, 0], [ss_quantity#3, ss_sales_price#4, i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, d_moy#11, null, 1], [ss_quantity#3, ss_sales_price#4, i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, d_qoy#12, null, null, 3], [ss_quantity#3, ss_sales_price#4, i_category#18, i_class#17, i_brand#16, i_product_name#19, d_year#10, null, null, null, 7], [ss_quantity#3, ss_sales_price#4, i_category#18, i_class#17, i_brand#16, i_product_name#19, null, null, null, null, 15], [ss_quantity#3, ss_sales_price#4, i_category#18, i_class#17, i_brand#16, null, null, null, null, null, 31], [ss_quantity#3, ss_sales_price#4, i_category#18, i_class#17, null, null, null, null, null, null, 63], [ss_quantity#3, ss_sales_price#4, i_category#18, null, null, null, null, null, null, null, 127], [ss_quantity#3, ss_sales_price#4, null, null, null, null, null, null, null, null, 255]], [ss_quantity#3, ss_sales_price#4, i_category#20, i_class#21, i_brand#22, i_product_name#23, d_year#24, d_qoy#25, d_moy#26, s_store_id#27, spark_grouping_id#28]

(20) HashAggregate [codegen id : 7]
Input [11]: [ss_quantity#3, ss_sales_price#4, i_category#20, i_class#21, i_brand#22, i_product_name#23, d_year#24, d_qoy#25, d_moy#26, s_store_id#27, spark_grouping_id#28]
Keys [9]: [i_category#20, i_class#21, i_brand#22, i_product_name#23, d_year#24, d_qoy#25, d_moy#26, s_store_id#27, spark_grouping_id#28]
Functions [1]: [partial_sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))]
Aggregate Attributes [2]: [sum#29, isEmpty#30]
Results [11]: [i_category#20, i_class#21, i_brand#22, i_product_name#23, d_year#24, d_qoy#25, d_moy#26, s_store_id#27, spark_grouping_id#28, sum#31, isEmpty#32]

(21) Exchange
Input [11]: [i_category#20, i_class#21, i_brand#22, i_product_name#23, d_year#24, d_qoy#25, d_moy#26, s_store_id#27, spark_grouping_id#28, sum#31, isEmpty#32]
Arguments: hashpartitioning(i_category#20, i_class#21, i_brand#22, i_product_name#23, d_year#24, d_qoy#25, d_moy#26, s_store_id#27, spark_grouping_id#28, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(22) HashAggregate [codegen id : 8]
Input [11]: [i_category#20, i_class#21, i_brand#22, i_product_name#23, d_year#24, d_qoy#25, d_moy#26, s_store_id#27, spark_grouping_id#28, sum#31, isEmpty#32]
Keys [9]: [i_category#20, i_class#21, i_brand#22, i_product_name#23, d_year#24, d_qoy#25, d_moy#26, s_store_id#27, spark_grouping_id#28]
Functions [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))]
Aggregate Attributes [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))#33]
Results [9]: [i_category#20, i_class#21, i_brand#22, i_product_name#23, d_year#24, d_qoy#25, d_moy#26, s_store_id#27, sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))#33 AS sumsales#34]

(23) Exchange
Input [9]: [i_category#20, i_class#21, i_brand#22, i_product_name#23, d_year#24, d_qoy#25, d_moy#26, s_store_id#27, sumsales#34]
Arguments: hashpartitioning(i_category#20, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(24) Sort [codegen id : 9]
Input [9]: [i_category#20, i_class#21, i_brand#22, i_product_name#23, d_year#24, d_qoy#25, d_moy#26, s_store_id#27, sumsales#34]
Arguments: [i_category#20 ASC NULLS FIRST, sumsales#34 DESC NULLS LAST], false, 0

(25) Window
Input [9]: [i_category#20, i_class#21, i_brand#22, i_product_name#23, d_year#24, d_qoy#25, d_moy#26, s_store_id#27, sumsales#34]
Arguments: [rank(sumsales#34) windowspecdefinition(i_category#20, sumsales#34 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#35], [i_category#20], [sumsales#34 DESC NULLS LAST]

(26) Filter [codegen id : 10]
Input [10]: [i_category#20, i_class#21, i_brand#22, i_product_name#23, d_year#24, d_qoy#25, d_moy#26, s_store_id#27, sumsales#34, rk#35]
Condition : (rk#35 <= 100)

(27) TakeOrderedAndProject
Input [10]: [i_category#20, i_class#21, i_brand#22, i_product_name#23, d_year#24, d_qoy#25, d_moy#26, s_store_id#27, sumsales#34, rk#35]
Arguments: 100, [i_category#20 ASC NULLS FIRST, i_class#21 ASC NULLS FIRST, i_brand#22 ASC NULLS FIRST, i_product_name#23 ASC NULLS FIRST, d_year#24 ASC NULLS FIRST, d_qoy#25 ASC NULLS FIRST, d_moy#26 ASC NULLS FIRST, s_store_id#27 ASC NULLS FIRST, sumsales#34 ASC NULLS FIRST, rk#35 ASC NULLS FIRST], [i_category#20, i_class#21, i_brand#22, i_product_name#23, d_year#24, d_qoy#25, d_moy#26, s_store_id#27, sumsales#34, rk#35]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#7, [id=#8]
ObjectHashAggregate (34)
+- Exchange (33)
   +- ObjectHashAggregate (32)
      +- Exchange (31)
         +- * Filter (30)
            +- * ColumnarToRow (29)
               +- Scan parquet spark_catalog.default.item (28)


(28) Scan parquet spark_catalog.default.item
Output [5]: [i_item_sk#15, i_brand#16, i_class#17, i_category#18, i_product_name#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_product_name:string>

(29) ColumnarToRow [codegen id : 1]
Input [5]: [i_item_sk#15, i_brand#16, i_class#17, i_category#18, i_product_name#19]

(30) Filter [codegen id : 1]
Input [5]: [i_item_sk#15, i_brand#16, i_class#17, i_category#18, i_product_name#19]
Condition : isnotnull(i_item_sk#15)

(31) Exchange
Input [5]: [i_item_sk#15, i_brand#16, i_class#17, i_category#18, i_product_name#19]
Arguments: hashpartitioning(i_item_sk#15, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(32) ObjectHashAggregate
Input [5]: [i_item_sk#15, i_brand#16, i_class#17, i_category#18, i_product_name#19]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(i_item_sk#15, 42), 204000, 1632000, 0, 0)]
Aggregate Attributes [1]: [buf#36]
Results [1]: [buf#37]

(33) Exchange
Input [1]: [buf#37]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=6]

(34) ObjectHashAggregate
Input [1]: [buf#37]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(i_item_sk#15, 42), 204000, 1632000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(i_item_sk#15, 42), 204000, 1632000, 0, 0)#38]
Results [1]: [bloom_filter_agg(xxhash64(i_item_sk#15, 42), 204000, 1632000, 0, 0)#38 AS bloomFilter#39]

Subquery:2 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (39)
+- * Project (38)
   +- * Filter (37)
      +- * ColumnarToRow (36)
         +- Scan parquet spark_catalog.default.date_dim (35)


(35) Scan parquet spark_catalog.default.date_dim
Output [5]: [d_date_sk#9, d_month_seq#40, d_year#10, d_moy#11, d_qoy#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int,d_year:int,d_moy:int,d_qoy:int>

(36) ColumnarToRow [codegen id : 1]
Input [5]: [d_date_sk#9, d_month_seq#40, d_year#10, d_moy#11, d_qoy#12]

(37) Filter [codegen id : 1]
Input [5]: [d_date_sk#9, d_month_seq#40, d_year#10, d_moy#11, d_qoy#12]
Condition : (((isnotnull(d_month_seq#40) AND (d_month_seq#40 >= 1200)) AND (d_month_seq#40 <= 1211)) AND isnotnull(d_date_sk#9))

(38) Project [codegen id : 1]
Output [4]: [d_date_sk#9, d_year#10, d_moy#11, d_qoy#12]
Input [5]: [d_date_sk#9, d_month_seq#40, d_year#10, d_moy#11, d_qoy#12]

(39) BroadcastExchange
Input [4]: [d_date_sk#9, d_year#10, d_moy#11, d_qoy#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]


