== Physical Plan ==
TakeOrderedAndProject (44)
+- * HashAggregate (43)
   +- Exchange (42)
      +- * HashAggregate (41)
         +- * Project (40)
            +- * Filter (39)
               +- * BroadcastHashJoin ExistenceJoin(exists#1) BuildRight (38)
                  :- * BroadcastHashJoin ExistenceJoin(exists#2) BuildRight (31)
                  :  :- * Project (24)
                  :  :  +- * BroadcastHashJoin Inner BuildRight (23)
                  :  :     :- * Project (18)
                  :  :     :  +- * BroadcastHashJoin Inner BuildRight (17)
                  :  :     :     :- * BroadcastHashJoin LeftSemi BuildRight (11)
                  :  :     :     :  :- * Filter (3)
                  :  :     :     :  :  +- * ColumnarToRow (2)
                  :  :     :     :  :     +- Scan parquet spark_catalog.default.customer (1)
                  :  :     :     :  +- BroadcastExchange (10)
                  :  :     :     :     +- * Project (9)
                  :  :     :     :        +- * BroadcastHashJoin Inner BuildRight (8)
                  :  :     :     :           :- * Filter (6)
                  :  :     :     :           :  +- * ColumnarToRow (5)
                  :  :     :     :           :     +- Scan parquet spark_catalog.default.store_sales (4)
                  :  :     :     :           +- ReusedExchange (7)
                  :  :     :     +- BroadcastExchange (16)
                  :  :     :        +- * Project (15)
                  :  :     :           +- * Filter (14)
                  :  :     :              +- * ColumnarToRow (13)
                  :  :     :                 +- Scan parquet spark_catalog.default.customer_address (12)
                  :  :     +- BroadcastExchange (22)
                  :  :        +- * Filter (21)
                  :  :           +- * ColumnarToRow (20)
                  :  :              +- Scan parquet spark_catalog.default.customer_demographics (19)
                  :  +- BroadcastExchange (30)
                  :     +- * Project (29)
                  :        +- * BroadcastHashJoin Inner BuildRight (28)
                  :           :- * ColumnarToRow (26)
                  :           :  +- Scan parquet spark_catalog.default.web_sales (25)
                  :           +- ReusedExchange (27)
                  +- BroadcastExchange (37)
                     +- * Project (36)
                        +- * BroadcastHashJoin Inner BuildRight (35)
                           :- * ColumnarToRow (33)
                           :  +- Scan parquet spark_catalog.default.catalog_sales (32)
                           +- ReusedExchange (34)


(1) Scan parquet spark_catalog.default.customer
Output [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) ColumnarToRow [codegen id : 9]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]

(3) Filter [codegen id : 9]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Condition : ((isnotnull(c_customer_sk#3) AND isnotnull(c_current_addr_sk#5)) AND isnotnull(c_current_cdemo_sk#4))

(4) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_customer_sk#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int>

(5) ColumnarToRow [codegen id : 2]
Input [2]: [ss_customer_sk#6, ss_sold_date_sk#7]

(6) Filter [codegen id : 2]
Input [2]: [ss_customer_sk#6, ss_sold_date_sk#7]
Condition : isnotnull(ss_customer_sk#6)

(7) ReusedExchange [Reuses operator id: 49]
Output [1]: [d_date_sk#9]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#9]
Join type: Inner
Join condition: None

(9) Project [codegen id : 2]
Output [1]: [ss_customer_sk#6]
Input [3]: [ss_customer_sk#6, ss_sold_date_sk#7, d_date_sk#9]

(10) BroadcastExchange
Input [1]: [ss_customer_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ss_customer_sk#6]
Join type: LeftSemi
Join condition: None

(12) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#10, ca_county#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_county, [Dona Ana County,Jefferson County,La Porte County,Rush County,Toole County]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(13) ColumnarToRow [codegen id : 3]
Input [2]: [ca_address_sk#10, ca_county#11]

(14) Filter [codegen id : 3]
Input [2]: [ca_address_sk#10, ca_county#11]
Condition : (ca_county#11 IN (Rush County,Toole County,Jefferson County,Dona Ana County,La Porte County) AND isnotnull(ca_address_sk#10))

(15) Project [codegen id : 3]
Output [1]: [ca_address_sk#10]
Input [2]: [ca_address_sk#10, ca_county#11]

(16) BroadcastExchange
Input [1]: [ca_address_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(17) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_current_addr_sk#5]
Right keys [1]: [ca_address_sk#10]
Join type: Inner
Join condition: None

(18) Project [codegen id : 9]
Output [2]: [c_customer_sk#3, c_current_cdemo_sk#4]
Input [4]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5, ca_address_sk#10]

(19) Scan parquet spark_catalog.default.customer_demographics
Output [9]: [cd_demo_sk#12, cd_gender#13, cd_marital_status#14, cd_education_status#15, cd_purchase_estimate#16, cd_credit_rating#17, cd_dep_count#18, cd_dep_employed_count#19, cd_dep_college_count#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_purchase_estimate:int,cd_credit_rating:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(20) ColumnarToRow [codegen id : 4]
Input [9]: [cd_demo_sk#12, cd_gender#13, cd_marital_status#14, cd_education_status#15, cd_purchase_estimate#16, cd_credit_rating#17, cd_dep_count#18, cd_dep_employed_count#19, cd_dep_college_count#20]

(21) Filter [codegen id : 4]
Input [9]: [cd_demo_sk#12, cd_gender#13, cd_marital_status#14, cd_education_status#15, cd_purchase_estimate#16, cd_credit_rating#17, cd_dep_count#18, cd_dep_employed_count#19, cd_dep_college_count#20]
Condition : isnotnull(cd_demo_sk#12)

(22) BroadcastExchange
Input [9]: [cd_demo_sk#12, cd_gender#13, cd_marital_status#14, cd_education_status#15, cd_purchase_estimate#16, cd_credit_rating#17, cd_dep_count#18, cd_dep_employed_count#19, cd_dep_college_count#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(23) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_current_cdemo_sk#4]
Right keys [1]: [cd_demo_sk#12]
Join type: Inner
Join condition: None

(24) Project [codegen id : 9]
Output [9]: [c_customer_sk#3, cd_gender#13, cd_marital_status#14, cd_education_status#15, cd_purchase_estimate#16, cd_credit_rating#17, cd_dep_count#18, cd_dep_employed_count#19, cd_dep_college_count#20]
Input [11]: [c_customer_sk#3, c_current_cdemo_sk#4, cd_demo_sk#12, cd_gender#13, cd_marital_status#14, cd_education_status#15, cd_purchase_estimate#16, cd_credit_rating#17, cd_dep_count#18, cd_dep_employed_count#19, cd_dep_college_count#20]

(25) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_bill_customer_sk#21, ws_sold_date_sk#22]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#22), dynamicpruningexpression(ws_sold_date_sk#22 IN dynamicpruning#8)]
ReadSchema: struct<ws_bill_customer_sk:int>

(26) ColumnarToRow [codegen id : 6]
Input [2]: [ws_bill_customer_sk#21, ws_sold_date_sk#22]

(27) ReusedExchange [Reuses operator id: 49]
Output [1]: [d_date_sk#23]

(28) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#22]
Right keys [1]: [d_date_sk#23]
Join type: Inner
Join condition: None

(29) Project [codegen id : 6]
Output [1]: [ws_bill_customer_sk#21]
Input [3]: [ws_bill_customer_sk#21, ws_sold_date_sk#22, d_date_sk#23]

(30) BroadcastExchange
Input [1]: [ws_bill_customer_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(31) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ws_bill_customer_sk#21]
Join type: ExistenceJoin(exists#2)
Join condition: None

(32) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_ship_customer_sk#24, cs_sold_date_sk#25]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#25), dynamicpruningexpression(cs_sold_date_sk#25 IN dynamicpruning#8)]
ReadSchema: struct<cs_ship_customer_sk:int>

(33) ColumnarToRow [codegen id : 8]
Input [2]: [cs_ship_customer_sk#24, cs_sold_date_sk#25]

(34) ReusedExchange [Reuses operator id: 49]
Output [1]: [d_date_sk#26]

(35) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#25]
Right keys [1]: [d_date_sk#26]
Join type: Inner
Join condition: None

(36) Project [codegen id : 8]
Output [1]: [cs_ship_customer_sk#24]
Input [3]: [cs_ship_customer_sk#24, cs_sold_date_sk#25, d_date_sk#26]

(37) BroadcastExchange
Input [1]: [cs_ship_customer_sk#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(38) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [cs_ship_customer_sk#24]
Join type: ExistenceJoin(exists#1)
Join condition: None

(39) Filter [codegen id : 9]
Input [11]: [c_customer_sk#3, cd_gender#13, cd_marital_status#14, cd_education_status#15, cd_purchase_estimate#16, cd_credit_rating#17, cd_dep_count#18, cd_dep_employed_count#19, cd_dep_college_count#20, exists#2, exists#1]
Condition : (exists#2 OR exists#1)

(40) Project [codegen id : 9]
Output [8]: [cd_gender#13, cd_marital_status#14, cd_education_status#15, cd_purchase_estimate#16, cd_credit_rating#17, cd_dep_count#18, cd_dep_employed_count#19, cd_dep_college_count#20]
Input [11]: [c_customer_sk#3, cd_gender#13, cd_marital_status#14, cd_education_status#15, cd_purchase_estimate#16, cd_credit_rating#17, cd_dep_count#18, cd_dep_employed_count#19, cd_dep_college_count#20, exists#2, exists#1]

(41) HashAggregate [codegen id : 9]
Input [8]: [cd_gender#13, cd_marital_status#14, cd_education_status#15, cd_purchase_estimate#16, cd_credit_rating#17, cd_dep_count#18, cd_dep_employed_count#19, cd_dep_college_count#20]
Keys [8]: [cd_gender#13, cd_marital_status#14, cd_education_status#15, cd_purchase_estimate#16, cd_credit_rating#17, cd_dep_count#18, cd_dep_employed_count#19, cd_dep_college_count#20]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#27]
Results [9]: [cd_gender#13, cd_marital_status#14, cd_education_status#15, cd_purchase_estimate#16, cd_credit_rating#17, cd_dep_count#18, cd_dep_employed_count#19, cd_dep_college_count#20, count#28]

(42) Exchange
Input [9]: [cd_gender#13, cd_marital_status#14, cd_education_status#15, cd_purchase_estimate#16, cd_credit_rating#17, cd_dep_count#18, cd_dep_employed_count#19, cd_dep_college_count#20, count#28]
Arguments: hashpartitioning(cd_gender#13, cd_marital_status#14, cd_education_status#15, cd_purchase_estimate#16, cd_credit_rating#17, cd_dep_count#18, cd_dep_employed_count#19, cd_dep_college_count#20, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(43) HashAggregate [codegen id : 10]
Input [9]: [cd_gender#13, cd_marital_status#14, cd_education_status#15, cd_purchase_estimate#16, cd_credit_rating#17, cd_dep_count#18, cd_dep_employed_count#19, cd_dep_college_count#20, count#28]
Keys [8]: [cd_gender#13, cd_marital_status#14, cd_education_status#15, cd_purchase_estimate#16, cd_credit_rating#17, cd_dep_count#18, cd_dep_employed_count#19, cd_dep_college_count#20]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#29]
Results [14]: [cd_gender#13, cd_marital_status#14, cd_education_status#15, count(1)#29 AS cnt1#30, cd_purchase_estimate#16, count(1)#29 AS cnt2#31, cd_credit_rating#17, count(1)#29 AS cnt3#32, cd_dep_count#18, count(1)#29 AS cnt4#33, cd_dep_employed_count#19, count(1)#29 AS cnt5#34, cd_dep_college_count#20, count(1)#29 AS cnt6#35]

(44) TakeOrderedAndProject
Input [14]: [cd_gender#13, cd_marital_status#14, cd_education_status#15, cnt1#30, cd_purchase_estimate#16, cnt2#31, cd_credit_rating#17, cnt3#32, cd_dep_count#18, cnt4#33, cd_dep_employed_count#19, cnt5#34, cd_dep_college_count#20, cnt6#35]
Arguments: 100, [cd_gender#13 ASC NULLS FIRST, cd_marital_status#14 ASC NULLS FIRST, cd_education_status#15 ASC NULLS FIRST, cd_purchase_estimate#16 ASC NULLS FIRST, cd_credit_rating#17 ASC NULLS FIRST, cd_dep_count#18 ASC NULLS FIRST, cd_dep_employed_count#19 ASC NULLS FIRST, cd_dep_college_count#20 ASC NULLS FIRST], [cd_gender#13, cd_marital_status#14, cd_education_status#15, cnt1#30, cd_purchase_estimate#16, cnt2#31, cd_credit_rating#17, cnt3#32, cd_dep_count#18, cnt4#33, cd_dep_employed_count#19, cnt5#34, cd_dep_college_count#20, cnt6#35]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (49)
+- * Project (48)
   +- * Filter (47)
      +- * ColumnarToRow (46)
         +- Scan parquet spark_catalog.default.date_dim (45)


(45) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#9, d_year#36, d_moy#37]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2002), GreaterThanOrEqual(d_moy,1), LessThanOrEqual(d_moy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(46) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#9, d_year#36, d_moy#37]

(47) Filter [codegen id : 1]
Input [3]: [d_date_sk#9, d_year#36, d_moy#37]
Condition : (((((isnotnull(d_year#36) AND isnotnull(d_moy#37)) AND (d_year#36 = 2002)) AND (d_moy#37 >= 1)) AND (d_moy#37 <= 4)) AND isnotnull(d_date_sk#9))

(48) Project [codegen id : 1]
Output [1]: [d_date_sk#9]
Input [3]: [d_date_sk#9, d_year#36, d_moy#37]

(49) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

Subquery:2 Hosting operator id = 25 Hosting Expression = ws_sold_date_sk#22 IN dynamicpruning#8

Subquery:3 Hosting operator id = 32 Hosting Expression = cs_sold_date_sk#25 IN dynamicpruning#8


