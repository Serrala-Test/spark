== Physical Plan ==
TakeOrderedAndProject (46)
+- * Project (45)
   +- * Filter (44)
      +- * HashAggregate (43)
         +- Exchange (42)
            +- * HashAggregate (41)
               +- * Project (40)
                  +- * BroadcastHashJoin Inner BuildRight (39)
                     :- * Project (23)
                     :  +- * BroadcastHashJoin Inner BuildRight (22)
                     :     :- * Project (16)
                     :     :  +- * BroadcastHashJoin Inner BuildRight (15)
                     :     :     :- * Project (10)
                     :     :     :  +- * BroadcastHashJoin Inner BuildRight (9)
                     :     :     :     :- * Project (4)
                     :     :     :     :  +- * Filter (3)
                     :     :     :     :     +- * ColumnarToRow (2)
                     :     :     :     :        +- Scan parquet default.customer_address (1)
                     :     :     :     +- BroadcastExchange (8)
                     :     :     :        +- * Filter (7)
                     :     :     :           +- * ColumnarToRow (6)
                     :     :     :              +- Scan parquet default.customer (5)
                     :     :     +- BroadcastExchange (14)
                     :     :        +- * Filter (13)
                     :     :           +- * ColumnarToRow (12)
                     :     :              +- Scan parquet default.store_sales (11)
                     :     +- BroadcastExchange (21)
                     :        +- * Project (20)
                     :           +- * Filter (19)
                     :              +- * ColumnarToRow (18)
                     :                 +- Scan parquet default.date_dim (17)
                     +- BroadcastExchange (38)
                        +- * Project (37)
                           +- * Filter (36)
                              +- * BroadcastHashJoin LeftOuter BuildRight (35)
                                 :- * Filter (26)
                                 :  +- * ColumnarToRow (25)
                                 :     +- Scan parquet default.item (24)
                                 +- BroadcastExchange (34)
                                    +- * HashAggregate (33)
                                       +- Exchange (32)
                                          +- * HashAggregate (31)
                                             +- * Project (30)
                                                +- * Filter (29)
                                                   +- * ColumnarToRow (28)
                                                      +- Scan parquet default.item (27)


(1) Scan parquet default.customer_address
Output [2]: [ca_address_sk#1, ca_state#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(2) ColumnarToRow [codegen id : 7]
Input [2]: [ca_address_sk#1, ca_state#2]

(3) Filter [codegen id : 7]
Input [2]: [ca_address_sk#1, ca_state#2]
Condition : isnotnull(ca_address_sk#1)

(4) Project [codegen id : 7]
Output [2]: [ca_address_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, ca_state#2, 2, false, true) AS ca_state#3]
Input [2]: [ca_address_sk#1, ca_state#2]

(5) Scan parquet default.customer
Output [2]: [c_customer_sk#4, c_current_addr_sk#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(6) ColumnarToRow [codegen id : 1]
Input [2]: [c_customer_sk#4, c_current_addr_sk#5]

(7) Filter [codegen id : 1]
Input [2]: [c_customer_sk#4, c_current_addr_sk#5]
Condition : (isnotnull(c_current_addr_sk#5) AND isnotnull(c_customer_sk#4))

(8) BroadcastExchange
Input [2]: [c_customer_sk#4, c_current_addr_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, false] as bigint)),false), [id=#6]

(9) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ca_address_sk#1]
Right keys [1]: [c_current_addr_sk#5]
Join condition: None

(10) Project [codegen id : 7]
Output [2]: [ca_state#3, c_customer_sk#4]
Input [4]: [ca_address_sk#1, ca_state#3, c_customer_sk#4, c_current_addr_sk#5]

(11) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#7, ss_item_sk#8, ss_customer_sk#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int>

(12) ColumnarToRow [codegen id : 2]
Input [3]: [ss_sold_date_sk#7, ss_item_sk#8, ss_customer_sk#9]

(13) Filter [codegen id : 2]
Input [3]: [ss_sold_date_sk#7, ss_item_sk#8, ss_customer_sk#9]
Condition : ((isnotnull(ss_customer_sk#9) AND isnotnull(ss_sold_date_sk#7)) AND isnotnull(ss_item_sk#8))

(14) BroadcastExchange
Input [3]: [ss_sold_date_sk#7, ss_item_sk#8, ss_customer_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, false] as bigint)),false), [id=#10]

(15) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [c_customer_sk#4]
Right keys [1]: [ss_customer_sk#9]
Join condition: None

(16) Project [codegen id : 7]
Output [3]: [ca_state#3, ss_sold_date_sk#7, ss_item_sk#8]
Input [5]: [ca_state#3, c_customer_sk#4, ss_sold_date_sk#7, ss_item_sk#8, ss_customer_sk#9]

(17) Scan parquet default.date_dim
Output [2]: [d_date_sk#11, d_month_seq#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(18) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#11, d_month_seq#12]

(19) Filter [codegen id : 3]
Input [2]: [d_date_sk#11, d_month_seq#12]
Condition : ((isnotnull(d_month_seq#12) AND (d_month_seq#12 = Subquery scalar-subquery#13, [id=#14])) AND isnotnull(d_date_sk#11))

(20) Project [codegen id : 3]
Output [1]: [d_date_sk#11]
Input [2]: [d_date_sk#11, d_month_seq#12]

(21) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15]

(22) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#11]
Join condition: None

(23) Project [codegen id : 7]
Output [2]: [ca_state#3, ss_item_sk#8]
Input [4]: [ca_state#3, ss_sold_date_sk#7, ss_item_sk#8, d_date_sk#11]

(24) Scan parquet default.item
Output [3]: [i_item_sk#16, i_current_price#17, i_category#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_category:string>

(25) ColumnarToRow [codegen id : 6]
Input [3]: [i_item_sk#16, i_current_price#17, i_category#18]

(26) Filter [codegen id : 6]
Input [3]: [i_item_sk#16, i_current_price#17, i_category#18]
Condition : (isnotnull(i_current_price#17) AND isnotnull(i_item_sk#16))

(27) Scan parquet default.item
Output [2]: [i_current_price#17, i_category#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
ReadSchema: struct<i_current_price:decimal(7,2),i_category:string>

(28) ColumnarToRow [codegen id : 4]
Input [2]: [i_current_price#17, i_category#18]

(29) Filter [codegen id : 4]
Input [2]: [i_current_price#17, i_category#18]
Condition : isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#18, 50, false, true))

(30) Project [codegen id : 4]
Output [2]: [i_current_price#17, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#18, 50, false, true) AS i_category#19]
Input [2]: [i_current_price#17, i_category#18]

(31) HashAggregate [codegen id : 4]
Input [2]: [i_current_price#17, i_category#19]
Keys [1]: [i_category#19]
Functions [1]: [partial_avg(UnscaledValue(i_current_price#17))]
Aggregate Attributes [2]: [sum#20, count#21]
Results [3]: [i_category#19, sum#22, count#23]

(32) Exchange
Input [3]: [i_category#19, sum#22, count#23]
Arguments: hashpartitioning(i_category#19, 5), ENSURE_REQUIREMENTS, [id=#24]

(33) HashAggregate [codegen id : 5]
Input [3]: [i_category#19, sum#22, count#23]
Keys [1]: [i_category#19]
Functions [1]: [avg(UnscaledValue(i_current_price#17))]
Aggregate Attributes [1]: [avg(UnscaledValue(i_current_price#17))#25]
Results [2]: [cast((avg(UnscaledValue(i_current_price#17))#25 / 100.0) as decimal(11,6)) AS avg(i_current_price)#26, i_category#19]

(34) BroadcastExchange
Input [2]: [avg(i_current_price)#26, i_category#19]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true]),false), [id=#27]

(35) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#18, 50, false, true)]
Right keys [1]: [i_category#19]
Join condition: None

(36) Filter [codegen id : 6]
Input [5]: [i_item_sk#16, i_current_price#17, i_category#18, avg(i_current_price)#26, i_category#19]
Condition : (cast(i_current_price#17 as decimal(14,7)) > CheckOverflow((1.200000 * promote_precision(avg(i_current_price)#26)), DecimalType(14,7), true))

(37) Project [codegen id : 6]
Output [1]: [i_item_sk#16]
Input [5]: [i_item_sk#16, i_current_price#17, i_category#18, avg(i_current_price)#26, i_category#19]

(38) BroadcastExchange
Input [1]: [i_item_sk#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#28]

(39) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_item_sk#8]
Right keys [1]: [i_item_sk#16]
Join condition: None

(40) Project [codegen id : 7]
Output [1]: [ca_state#3]
Input [3]: [ca_state#3, ss_item_sk#8, i_item_sk#16]

(41) HashAggregate [codegen id : 7]
Input [1]: [ca_state#3]
Keys [1]: [ca_state#3]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#29]
Results [2]: [ca_state#3, count#30]

(42) Exchange
Input [2]: [ca_state#3, count#30]
Arguments: hashpartitioning(ca_state#3, 5), ENSURE_REQUIREMENTS, [id=#31]

(43) HashAggregate [codegen id : 8]
Input [2]: [ca_state#3, count#30]
Keys [1]: [ca_state#3]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#32]
Results [3]: [ca_state#3 AS state#33, count(1)#32 AS cnt#34, count(1)#32 AS count(1)#35]

(44) Filter [codegen id : 8]
Input [3]: [state#33, cnt#34, count(1)#35]
Condition : (count(1)#35 >= 10)

(45) Project [codegen id : 8]
Output [2]: [state#33, cnt#34]
Input [3]: [state#33, cnt#34, count(1)#35]

(46) TakeOrderedAndProject
Input [2]: [state#33, cnt#34]
Arguments: 100, [cnt#34 ASC NULLS FIRST], [state#33, cnt#34]

===== Subqueries =====

Subquery:1 Hosting operator id = 19 Hosting Expression = Subquery scalar-subquery#13, [id=#14]
* HashAggregate (53)
+- Exchange (52)
   +- * HashAggregate (51)
      +- * Project (50)
         +- * Filter (49)
            +- * ColumnarToRow (48)
               +- Scan parquet default.date_dim (47)


(47) Scan parquet default.date_dim
Output [3]: [d_month_seq#12, d_year#36, d_moy#37]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,1)]
ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>

(48) ColumnarToRow [codegen id : 1]
Input [3]: [d_month_seq#12, d_year#36, d_moy#37]

(49) Filter [codegen id : 1]
Input [3]: [d_month_seq#12, d_year#36, d_moy#37]
Condition : (((isnotnull(d_year#36) AND isnotnull(d_moy#37)) AND (d_year#36 = 2000)) AND (d_moy#37 = 1))

(50) Project [codegen id : 1]
Output [1]: [d_month_seq#12]
Input [3]: [d_month_seq#12, d_year#36, d_moy#37]

(51) HashAggregate [codegen id : 1]
Input [1]: [d_month_seq#12]
Keys [1]: [d_month_seq#12]
Functions: []
Aggregate Attributes: []
Results [1]: [d_month_seq#12]

(52) Exchange
Input [1]: [d_month_seq#12]
Arguments: hashpartitioning(d_month_seq#12, 5), ENSURE_REQUIREMENTS, [id=#38]

(53) HashAggregate [codegen id : 2]
Input [1]: [d_month_seq#12]
Keys [1]: [d_month_seq#12]
Functions: []
Aggregate Attributes: []
Results [1]: [d_month_seq#12]


