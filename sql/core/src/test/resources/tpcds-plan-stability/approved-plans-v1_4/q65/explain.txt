== Physical Plan ==
TakeOrderedAndProject (44)
+- * Project (43)
   +- * BroadcastHashJoin Inner BuildRight (42)
      :- * Project (28)
      :  +- * BroadcastHashJoin Inner BuildRight (27)
      :     :- * Project (21)
      :     :  +- * BroadcastHashJoin Inner BuildRight (20)
      :     :     :- * Project (4)
      :     :     :  +- * Filter (3)
      :     :     :     +- * ColumnarToRow (2)
      :     :     :        +- Scan parquet default.store (1)
      :     :     +- BroadcastExchange (19)
      :     :        +- * Filter (18)
      :     :           +- * HashAggregate (17)
      :     :              +- Exchange (16)
      :     :                 +- * HashAggregate (15)
      :     :                    +- * Project (14)
      :     :                       +- * BroadcastHashJoin Inner BuildRight (13)
      :     :                          :- * Filter (7)
      :     :                          :  +- * ColumnarToRow (6)
      :     :                          :     +- Scan parquet default.store_sales (5)
      :     :                          +- BroadcastExchange (12)
      :     :                             +- * Project (11)
      :     :                                +- * Filter (10)
      :     :                                   +- * ColumnarToRow (9)
      :     :                                      +- Scan parquet default.date_dim (8)
      :     +- BroadcastExchange (26)
      :        +- * Project (25)
      :           +- * Filter (24)
      :              +- * ColumnarToRow (23)
      :                 +- Scan parquet default.item (22)
      +- BroadcastExchange (41)
         +- * HashAggregate (40)
            +- Exchange (39)
               +- * HashAggregate (38)
                  +- * HashAggregate (37)
                     +- Exchange (36)
                        +- * HashAggregate (35)
                           +- * Project (34)
                              +- * BroadcastHashJoin Inner BuildRight (33)
                                 :- * Filter (31)
                                 :  +- * ColumnarToRow (30)
                                 :     +- Scan parquet default.store_sales (29)
                                 +- ReusedExchange (32)


(1) Scan parquet default.store
Output [2]: [s_store_sk#1, s_store_name#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string>

(2) ColumnarToRow [codegen id : 9]
Input [2]: [s_store_sk#1, s_store_name#2]

(3) Filter [codegen id : 9]
Input [2]: [s_store_sk#1, s_store_name#2]
Condition : isnotnull(s_store_sk#1)

(4) Project [codegen id : 9]
Output [2]: [s_store_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_store_name#2, 50, false, true) AS s_store_name#3]
Input [2]: [s_store_sk#1, s_store_name#2]

(5) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#4, ss_item_sk#5, ss_store_sk#6, ss_sales_price#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(6) ColumnarToRow [codegen id : 2]
Input [4]: [ss_sold_date_sk#4, ss_item_sk#5, ss_store_sk#6, ss_sales_price#7]

(7) Filter [codegen id : 2]
Input [4]: [ss_sold_date_sk#4, ss_item_sk#5, ss_store_sk#6, ss_sales_price#7]
Condition : ((isnotnull(ss_sold_date_sk#4) AND isnotnull(ss_store_sk#6)) AND isnotnull(ss_item_sk#5))

(8) Scan parquet default.date_dim
Output [2]: [d_date_sk#8, d_month_seq#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1176), LessThanOrEqual(d_month_seq,1187), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(9) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#8, d_month_seq#9]

(10) Filter [codegen id : 1]
Input [2]: [d_date_sk#8, d_month_seq#9]
Condition : (((isnotnull(d_month_seq#9) AND (d_month_seq#9 >= 1176)) AND (d_month_seq#9 <= 1187)) AND isnotnull(d_date_sk#8))

(11) Project [codegen id : 1]
Output [1]: [d_date_sk#8]
Input [2]: [d_date_sk#8, d_month_seq#9]

(12) BroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#10]

(13) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#8]
Join condition: None

(14) Project [codegen id : 2]
Output [3]: [ss_item_sk#5, ss_store_sk#6, ss_sales_price#7]
Input [5]: [ss_sold_date_sk#4, ss_item_sk#5, ss_store_sk#6, ss_sales_price#7, d_date_sk#8]

(15) HashAggregate [codegen id : 2]
Input [3]: [ss_item_sk#5, ss_store_sk#6, ss_sales_price#7]
Keys [2]: [ss_store_sk#6, ss_item_sk#5]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#7))]
Aggregate Attributes [1]: [sum#11]
Results [3]: [ss_store_sk#6, ss_item_sk#5, sum#12]

(16) Exchange
Input [3]: [ss_store_sk#6, ss_item_sk#5, sum#12]
Arguments: hashpartitioning(ss_store_sk#6, ss_item_sk#5, 5), ENSURE_REQUIREMENTS, [id=#13]

(17) HashAggregate [codegen id : 3]
Input [3]: [ss_store_sk#6, ss_item_sk#5, sum#12]
Keys [2]: [ss_store_sk#6, ss_item_sk#5]
Functions [1]: [sum(UnscaledValue(ss_sales_price#7))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#7))#14]
Results [3]: [ss_store_sk#6, ss_item_sk#5, MakeDecimal(sum(UnscaledValue(ss_sales_price#7))#14,17,2) AS revenue#15]

(18) Filter [codegen id : 3]
Input [3]: [ss_store_sk#6, ss_item_sk#5, revenue#15]
Condition : isnotnull(revenue#15)

(19) BroadcastExchange
Input [3]: [ss_store_sk#6, ss_item_sk#5, revenue#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16]

(20) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [s_store_sk#1]
Right keys [1]: [ss_store_sk#6]
Join condition: None

(21) Project [codegen id : 9]
Output [4]: [s_store_name#3, ss_store_sk#6, ss_item_sk#5, revenue#15]
Input [5]: [s_store_sk#1, s_store_name#3, ss_store_sk#6, ss_item_sk#5, revenue#15]

(22) Scan parquet default.item
Output [5]: [i_item_sk#17, i_item_desc#18, i_current_price#19, i_wholesale_cost#20, i_brand#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand:string>

(23) ColumnarToRow [codegen id : 4]
Input [5]: [i_item_sk#17, i_item_desc#18, i_current_price#19, i_wholesale_cost#20, i_brand#21]

(24) Filter [codegen id : 4]
Input [5]: [i_item_sk#17, i_item_desc#18, i_current_price#19, i_wholesale_cost#20, i_brand#21]
Condition : isnotnull(i_item_sk#17)

(25) Project [codegen id : 4]
Output [5]: [i_item_sk#17, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, i_item_desc#18, 200, false, true) AS i_item_desc#22, i_current_price#19, i_wholesale_cost#20, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_brand#21, 50, false, true) AS i_brand#23]
Input [5]: [i_item_sk#17, i_item_desc#18, i_current_price#19, i_wholesale_cost#20, i_brand#21]

(26) BroadcastExchange
Input [5]: [i_item_sk#17, i_item_desc#22, i_current_price#19, i_wholesale_cost#20, i_brand#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#24]

(27) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#5]
Right keys [1]: [i_item_sk#17]
Join condition: None

(28) Project [codegen id : 9]
Output [7]: [s_store_name#3, ss_store_sk#6, revenue#15, i_item_desc#22, i_current_price#19, i_wholesale_cost#20, i_brand#23]
Input [9]: [s_store_name#3, ss_store_sk#6, ss_item_sk#5, revenue#15, i_item_sk#17, i_item_desc#22, i_current_price#19, i_wholesale_cost#20, i_brand#23]

(29) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#25, ss_item_sk#26, ss_store_sk#27, ss_sales_price#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(30) ColumnarToRow [codegen id : 6]
Input [4]: [ss_sold_date_sk#25, ss_item_sk#26, ss_store_sk#27, ss_sales_price#28]

(31) Filter [codegen id : 6]
Input [4]: [ss_sold_date_sk#25, ss_item_sk#26, ss_store_sk#27, ss_sales_price#28]
Condition : (isnotnull(ss_sold_date_sk#25) AND isnotnull(ss_store_sk#27))

(32) ReusedExchange [Reuses operator id: 12]
Output [1]: [d_date_sk#8]

(33) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#25]
Right keys [1]: [d_date_sk#8]
Join condition: None

(34) Project [codegen id : 6]
Output [3]: [ss_item_sk#26, ss_store_sk#27, ss_sales_price#28]
Input [5]: [ss_sold_date_sk#25, ss_item_sk#26, ss_store_sk#27, ss_sales_price#28, d_date_sk#8]

(35) HashAggregate [codegen id : 6]
Input [3]: [ss_item_sk#26, ss_store_sk#27, ss_sales_price#28]
Keys [2]: [ss_store_sk#27, ss_item_sk#26]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#28))]
Aggregate Attributes [1]: [sum#29]
Results [3]: [ss_store_sk#27, ss_item_sk#26, sum#30]

(36) Exchange
Input [3]: [ss_store_sk#27, ss_item_sk#26, sum#30]
Arguments: hashpartitioning(ss_store_sk#27, ss_item_sk#26, 5), ENSURE_REQUIREMENTS, [id=#31]

(37) HashAggregate [codegen id : 7]
Input [3]: [ss_store_sk#27, ss_item_sk#26, sum#30]
Keys [2]: [ss_store_sk#27, ss_item_sk#26]
Functions [1]: [sum(UnscaledValue(ss_sales_price#28))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#28))#32]
Results [2]: [ss_store_sk#27, MakeDecimal(sum(UnscaledValue(ss_sales_price#28))#32,17,2) AS revenue#33]

(38) HashAggregate [codegen id : 7]
Input [2]: [ss_store_sk#27, revenue#33]
Keys [1]: [ss_store_sk#27]
Functions [1]: [partial_avg(revenue#33)]
Aggregate Attributes [2]: [sum#34, count#35]
Results [3]: [ss_store_sk#27, sum#36, count#37]

(39) Exchange
Input [3]: [ss_store_sk#27, sum#36, count#37]
Arguments: hashpartitioning(ss_store_sk#27, 5), ENSURE_REQUIREMENTS, [id=#38]

(40) HashAggregate [codegen id : 8]
Input [3]: [ss_store_sk#27, sum#36, count#37]
Keys [1]: [ss_store_sk#27]
Functions [1]: [avg(revenue#33)]
Aggregate Attributes [1]: [avg(revenue#33)#39]
Results [2]: [ss_store_sk#27, avg(revenue#33)#39 AS ave#40]

(41) BroadcastExchange
Input [2]: [ss_store_sk#27, ave#40]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#41]

(42) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#6]
Right keys [1]: [ss_store_sk#27]
Join condition: (cast(revenue#15 as decimal(23,7)) <= CheckOverflow((0.100000 * promote_precision(ave#40)), DecimalType(23,7), true))

(43) Project [codegen id : 9]
Output [6]: [s_store_name#3, i_item_desc#22, revenue#15, i_current_price#19, i_wholesale_cost#20, i_brand#23]
Input [9]: [s_store_name#3, ss_store_sk#6, revenue#15, i_item_desc#22, i_current_price#19, i_wholesale_cost#20, i_brand#23, ss_store_sk#27, ave#40]

(44) TakeOrderedAndProject
Input [6]: [s_store_name#3, i_item_desc#22, revenue#15, i_current_price#19, i_wholesale_cost#20, i_brand#23]
Arguments: 100, [s_store_name#3 ASC NULLS FIRST, i_item_desc#22 ASC NULLS FIRST], [s_store_name#3, i_item_desc#22, revenue#15, i_current_price#19, i_wholesale_cost#20, i_brand#23]

