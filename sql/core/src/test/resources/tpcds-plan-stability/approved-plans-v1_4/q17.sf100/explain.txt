== Physical Plan ==
TakeOrderedAndProject (57)
+- * HashAggregate (56)
   +- Exchange (55)
      +- * HashAggregate (54)
         +- * Project (53)
            +- * SortMergeJoin Inner (52)
               :- * Sort (43)
               :  +- Exchange (42)
               :     +- * Project (41)
               :        +- * SortMergeJoin Inner (40)
               :           :- * Sort (34)
               :           :  +- Exchange (33)
               :           :     +- * Project (32)
               :           :        +- * SortMergeJoin Inner (31)
               :           :           :- * Sort (18)
               :           :           :  +- Exchange (17)
               :           :           :     +- * Project (16)
               :           :           :        +- * BroadcastHashJoin Inner BuildRight (15)
               :           :           :           :- * Project (10)
               :           :           :           :  +- * BroadcastHashJoin Inner BuildRight (9)
               :           :           :           :     :- * Filter (3)
               :           :           :           :     :  +- * ColumnarToRow (2)
               :           :           :           :     :     +- Scan parquet default.store_sales (1)
               :           :           :           :     +- BroadcastExchange (8)
               :           :           :           :        +- * Project (7)
               :           :           :           :           +- * Filter (6)
               :           :           :           :              +- * ColumnarToRow (5)
               :           :           :           :                 +- Scan parquet default.date_dim (4)
               :           :           :           +- BroadcastExchange (14)
               :           :           :              +- * Filter (13)
               :           :           :                 +- * ColumnarToRow (12)
               :           :           :                    +- Scan parquet default.store (11)
               :           :           +- * Sort (30)
               :           :              +- Exchange (29)
               :           :                 +- * Project (28)
               :           :                    +- * BroadcastHashJoin Inner BuildRight (27)
               :           :                       :- * Filter (21)
               :           :                       :  +- * ColumnarToRow (20)
               :           :                       :     +- Scan parquet default.store_returns (19)
               :           :                       +- BroadcastExchange (26)
               :           :                          +- * Project (25)
               :           :                             +- * Filter (24)
               :           :                                +- * ColumnarToRow (23)
               :           :                                   +- Scan parquet default.date_dim (22)
               :           +- * Sort (39)
               :              +- Exchange (38)
               :                 +- * Filter (37)
               :                    +- * ColumnarToRow (36)
               :                       +- Scan parquet default.item (35)
               +- * Sort (51)
                  +- Exchange (50)
                     +- * Project (49)
                        +- * BroadcastHashJoin Inner BuildRight (48)
                           :- * Filter (46)
                           :  +- * ColumnarToRow (45)
                           :     +- Scan parquet default.catalog_sales (44)
                           +- ReusedExchange (47)


(1) Scan parquet default.store_sales
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#6), dynamicpruningexpression(ss_sold_date_sk#6 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_quantity:int>

(2) ColumnarToRow [codegen id : 3]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6]

(3) Filter [codegen id : 3]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6]
Condition : (((isnotnull(ss_customer_sk#2) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_ticket_number#4)) AND isnotnull(ss_store_sk#3))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#8, d_quarter_name#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_quarter_name), EqualTo(d_quarter_name,2001Q1), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_quarter_name:string>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#8, d_quarter_name#9]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#8, d_quarter_name#9]
Condition : ((isnotnull(d_quarter_name#9) AND (d_quarter_name#9 = 2001Q1)) AND isnotnull(d_date_sk#8))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#8]
Input [2]: [d_date_sk#8, d_quarter_name#9]

(8) BroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#10]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#8]
Join condition: None

(10) Project [codegen id : 3]
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6, d_date_sk#8]

(11) Scan parquet default.store
Output [2]: [s_store_sk#11, s_state#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [s_store_sk#11, s_state#12]

(13) Filter [codegen id : 2]
Input [2]: [s_store_sk#11, s_state#12]
Condition : isnotnull(s_store_sk#11)

(14) BroadcastExchange
Input [2]: [s_store_sk#11, s_state#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13]

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#11]
Join condition: None

(16) Project [codegen id : 3]
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_quantity#5, s_state#12]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, s_store_sk#11, s_state#12]

(17) Exchange
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_quantity#5, s_state#12]
Arguments: hashpartitioning(ss_customer_sk#2, ss_item_sk#1, ss_ticket_number#4, 5), ENSURE_REQUIREMENTS, [id=#14]

(18) Sort [codegen id : 4]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_quantity#5, s_state#12]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST, ss_ticket_number#4 ASC NULLS FIRST], false, 0

(19) Scan parquet default.store_returns
Output [5]: [sr_item_sk#15, sr_customer_sk#16, sr_ticket_number#17, sr_return_quantity#18, sr_returned_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#19), dynamicpruningexpression(sr_returned_date_sk#19 IN dynamicpruning#20)]
PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:int,sr_customer_sk:int,sr_ticket_number:int,sr_return_quantity:int>

(20) ColumnarToRow [codegen id : 6]
Input [5]: [sr_item_sk#15, sr_customer_sk#16, sr_ticket_number#17, sr_return_quantity#18, sr_returned_date_sk#19]

(21) Filter [codegen id : 6]
Input [5]: [sr_item_sk#15, sr_customer_sk#16, sr_ticket_number#17, sr_return_quantity#18, sr_returned_date_sk#19]
Condition : ((isnotnull(sr_customer_sk#16) AND isnotnull(sr_item_sk#15)) AND isnotnull(sr_ticket_number#17))

(22) Scan parquet default.date_dim
Output [2]: [d_date_sk#21, d_quarter_name#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_quarter_name, [2001Q1,2001Q2,2001Q3]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_quarter_name:string>

(23) ColumnarToRow [codegen id : 5]
Input [2]: [d_date_sk#21, d_quarter_name#22]

(24) Filter [codegen id : 5]
Input [2]: [d_date_sk#21, d_quarter_name#22]
Condition : (d_quarter_name#22 IN (2001Q1,2001Q2,2001Q3) AND isnotnull(d_date_sk#21))

(25) Project [codegen id : 5]
Output [1]: [d_date_sk#21]
Input [2]: [d_date_sk#21, d_quarter_name#22]

(26) BroadcastExchange
Input [1]: [d_date_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#23]

(27) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [sr_returned_date_sk#19]
Right keys [1]: [d_date_sk#21]
Join condition: None

(28) Project [codegen id : 6]
Output [4]: [sr_item_sk#15, sr_customer_sk#16, sr_ticket_number#17, sr_return_quantity#18]
Input [6]: [sr_item_sk#15, sr_customer_sk#16, sr_ticket_number#17, sr_return_quantity#18, sr_returned_date_sk#19, d_date_sk#21]

(29) Exchange
Input [4]: [sr_item_sk#15, sr_customer_sk#16, sr_ticket_number#17, sr_return_quantity#18]
Arguments: hashpartitioning(sr_customer_sk#16, sr_item_sk#15, sr_ticket_number#17, 5), ENSURE_REQUIREMENTS, [id=#24]

(30) Sort [codegen id : 7]
Input [4]: [sr_item_sk#15, sr_customer_sk#16, sr_ticket_number#17, sr_return_quantity#18]
Arguments: [sr_customer_sk#16 ASC NULLS FIRST, sr_item_sk#15 ASC NULLS FIRST, sr_ticket_number#17 ASC NULLS FIRST], false, 0

(31) SortMergeJoin [codegen id : 8]
Left keys [3]: [ss_customer_sk#2, ss_item_sk#1, ss_ticket_number#4]
Right keys [3]: [sr_customer_sk#16, sr_item_sk#15, sr_ticket_number#17]
Join condition: None

(32) Project [codegen id : 8]
Output [6]: [ss_item_sk#1, ss_quantity#5, s_state#12, sr_item_sk#15, sr_customer_sk#16, sr_return_quantity#18]
Input [9]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_quantity#5, s_state#12, sr_item_sk#15, sr_customer_sk#16, sr_ticket_number#17, sr_return_quantity#18]

(33) Exchange
Input [6]: [ss_item_sk#1, ss_quantity#5, s_state#12, sr_item_sk#15, sr_customer_sk#16, sr_return_quantity#18]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#25]

(34) Sort [codegen id : 9]
Input [6]: [ss_item_sk#1, ss_quantity#5, s_state#12, sr_item_sk#15, sr_customer_sk#16, sr_return_quantity#18]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(35) Scan parquet default.item
Output [3]: [i_item_sk#26, i_item_id#27, i_item_desc#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>

(36) ColumnarToRow [codegen id : 10]
Input [3]: [i_item_sk#26, i_item_id#27, i_item_desc#28]

(37) Filter [codegen id : 10]
Input [3]: [i_item_sk#26, i_item_id#27, i_item_desc#28]
Condition : isnotnull(i_item_sk#26)

(38) Exchange
Input [3]: [i_item_sk#26, i_item_id#27, i_item_desc#28]
Arguments: hashpartitioning(i_item_sk#26, 5), ENSURE_REQUIREMENTS, [id=#29]

(39) Sort [codegen id : 11]
Input [3]: [i_item_sk#26, i_item_id#27, i_item_desc#28]
Arguments: [i_item_sk#26 ASC NULLS FIRST], false, 0

(40) SortMergeJoin [codegen id : 12]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#26]
Join condition: None

(41) Project [codegen id : 12]
Output [7]: [ss_quantity#5, s_state#12, sr_item_sk#15, sr_customer_sk#16, sr_return_quantity#18, i_item_id#27, i_item_desc#28]
Input [9]: [ss_item_sk#1, ss_quantity#5, s_state#12, sr_item_sk#15, sr_customer_sk#16, sr_return_quantity#18, i_item_sk#26, i_item_id#27, i_item_desc#28]

(42) Exchange
Input [7]: [ss_quantity#5, s_state#12, sr_item_sk#15, sr_customer_sk#16, sr_return_quantity#18, i_item_id#27, i_item_desc#28]
Arguments: hashpartitioning(sr_customer_sk#16, sr_item_sk#15, 5), ENSURE_REQUIREMENTS, [id=#30]

(43) Sort [codegen id : 13]
Input [7]: [ss_quantity#5, s_state#12, sr_item_sk#15, sr_customer_sk#16, sr_return_quantity#18, i_item_id#27, i_item_desc#28]
Arguments: [sr_customer_sk#16 ASC NULLS FIRST, sr_item_sk#15 ASC NULLS FIRST], false, 0

(44) Scan parquet default.catalog_sales
Output [4]: [cs_bill_customer_sk#31, cs_item_sk#32, cs_quantity#33, cs_sold_date_sk#34]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#34), dynamicpruningexpression(cs_sold_date_sk#34 IN dynamicpruning#20)]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int>

(45) ColumnarToRow [codegen id : 15]
Input [4]: [cs_bill_customer_sk#31, cs_item_sk#32, cs_quantity#33, cs_sold_date_sk#34]

(46) Filter [codegen id : 15]
Input [4]: [cs_bill_customer_sk#31, cs_item_sk#32, cs_quantity#33, cs_sold_date_sk#34]
Condition : (isnotnull(cs_bill_customer_sk#31) AND isnotnull(cs_item_sk#32))

(47) ReusedExchange [Reuses operator id: 26]
Output [1]: [d_date_sk#35]

(48) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [cs_sold_date_sk#34]
Right keys [1]: [d_date_sk#35]
Join condition: None

(49) Project [codegen id : 15]
Output [3]: [cs_bill_customer_sk#31, cs_item_sk#32, cs_quantity#33]
Input [5]: [cs_bill_customer_sk#31, cs_item_sk#32, cs_quantity#33, cs_sold_date_sk#34, d_date_sk#35]

(50) Exchange
Input [3]: [cs_bill_customer_sk#31, cs_item_sk#32, cs_quantity#33]
Arguments: hashpartitioning(cs_bill_customer_sk#31, cs_item_sk#32, 5), ENSURE_REQUIREMENTS, [id=#36]

(51) Sort [codegen id : 16]
Input [3]: [cs_bill_customer_sk#31, cs_item_sk#32, cs_quantity#33]
Arguments: [cs_bill_customer_sk#31 ASC NULLS FIRST, cs_item_sk#32 ASC NULLS FIRST], false, 0

(52) SortMergeJoin [codegen id : 17]
Left keys [2]: [sr_customer_sk#16, sr_item_sk#15]
Right keys [2]: [cs_bill_customer_sk#31, cs_item_sk#32]
Join condition: None

(53) Project [codegen id : 17]
Output [6]: [ss_quantity#5, sr_return_quantity#18, cs_quantity#33, s_state#12, i_item_id#27, i_item_desc#28]
Input [10]: [ss_quantity#5, s_state#12, sr_item_sk#15, sr_customer_sk#16, sr_return_quantity#18, i_item_id#27, i_item_desc#28, cs_bill_customer_sk#31, cs_item_sk#32, cs_quantity#33]

(54) HashAggregate [codegen id : 17]
Input [6]: [ss_quantity#5, sr_return_quantity#18, cs_quantity#33, s_state#12, i_item_id#27, i_item_desc#28]
Keys [3]: [i_item_id#27, i_item_desc#28, s_state#12]
Functions [9]: [partial_count(ss_quantity#5), partial_avg(ss_quantity#5), partial_stddev_samp(cast(ss_quantity#5 as double)), partial_count(sr_return_quantity#18), partial_avg(sr_return_quantity#18), partial_stddev_samp(cast(sr_return_quantity#18 as double)), partial_count(cs_quantity#33), partial_avg(cs_quantity#33), partial_stddev_samp(cast(cs_quantity#33 as double))]
Aggregate Attributes [18]: [count#37, sum#38, count#39, n#40, avg#41, m2#42, count#43, sum#44, count#45, n#46, avg#47, m2#48, count#49, sum#50, count#51, n#52, avg#53, m2#54]
Results [21]: [i_item_id#27, i_item_desc#28, s_state#12, count#55, sum#56, count#57, n#58, avg#59, m2#60, count#61, sum#62, count#63, n#64, avg#65, m2#66, count#67, sum#68, count#69, n#70, avg#71, m2#72]

(55) Exchange
Input [21]: [i_item_id#27, i_item_desc#28, s_state#12, count#55, sum#56, count#57, n#58, avg#59, m2#60, count#61, sum#62, count#63, n#64, avg#65, m2#66, count#67, sum#68, count#69, n#70, avg#71, m2#72]
Arguments: hashpartitioning(i_item_id#27, i_item_desc#28, s_state#12, 5), ENSURE_REQUIREMENTS, [id=#73]

(56) HashAggregate [codegen id : 18]
Input [21]: [i_item_id#27, i_item_desc#28, s_state#12, count#55, sum#56, count#57, n#58, avg#59, m2#60, count#61, sum#62, count#63, n#64, avg#65, m2#66, count#67, sum#68, count#69, n#70, avg#71, m2#72]
Keys [3]: [i_item_id#27, i_item_desc#28, s_state#12]
Functions [9]: [count(ss_quantity#5), avg(ss_quantity#5), stddev_samp(cast(ss_quantity#5 as double)), count(sr_return_quantity#18), avg(sr_return_quantity#18), stddev_samp(cast(sr_return_quantity#18 as double)), count(cs_quantity#33), avg(cs_quantity#33), stddev_samp(cast(cs_quantity#33 as double))]
Aggregate Attributes [9]: [count(ss_quantity#5)#74, avg(ss_quantity#5)#75, stddev_samp(cast(ss_quantity#5 as double))#76, count(sr_return_quantity#18)#77, avg(sr_return_quantity#18)#78, stddev_samp(cast(sr_return_quantity#18 as double))#79, count(cs_quantity#33)#80, avg(cs_quantity#33)#81, stddev_samp(cast(cs_quantity#33 as double))#82]
Results [15]: [i_item_id#27, i_item_desc#28, s_state#12, count(ss_quantity#5)#74 AS store_sales_quantitycount#83, avg(ss_quantity#5)#75 AS store_sales_quantityave#84, stddev_samp(cast(ss_quantity#5 as double))#76 AS store_sales_quantitystdev#85, (stddev_samp(cast(ss_quantity#5 as double))#76 / avg(ss_quantity#5)#75) AS store_sales_quantitycov#86, count(sr_return_quantity#18)#77 AS as_store_returns_quantitycount#87, avg(sr_return_quantity#18)#78 AS as_store_returns_quantityave#88, stddev_samp(cast(sr_return_quantity#18 as double))#79 AS as_store_returns_quantitystdev#89, (stddev_samp(cast(sr_return_quantity#18 as double))#79 / avg(sr_return_quantity#18)#78) AS store_returns_quantitycov#90, count(cs_quantity#33)#80 AS catalog_sales_quantitycount#91, avg(cs_quantity#33)#81 AS catalog_sales_quantityave#92, (stddev_samp(cast(cs_quantity#33 as double))#82 / avg(cs_quantity#33)#81) AS catalog_sales_quantitystdev#93, (stddev_samp(cast(cs_quantity#33 as double))#82 / avg(cs_quantity#33)#81) AS catalog_sales_quantitycov#94]

(57) TakeOrderedAndProject
Input [15]: [i_item_id#27, i_item_desc#28, s_state#12, store_sales_quantitycount#83, store_sales_quantityave#84, store_sales_quantitystdev#85, store_sales_quantitycov#86, as_store_returns_quantitycount#87, as_store_returns_quantityave#88, as_store_returns_quantitystdev#89, store_returns_quantitycov#90, catalog_sales_quantitycount#91, catalog_sales_quantityave#92, catalog_sales_quantitystdev#93, catalog_sales_quantitycov#94]
Arguments: 100, [i_item_id#27 ASC NULLS FIRST, i_item_desc#28 ASC NULLS FIRST, s_state#12 ASC NULLS FIRST], [i_item_id#27, i_item_desc#28, s_state#12, store_sales_quantitycount#83, store_sales_quantityave#84, store_sales_quantitystdev#85, store_sales_quantitycov#86, as_store_returns_quantitycount#87, as_store_returns_quantityave#88, as_store_returns_quantitystdev#89, store_returns_quantitycov#90, catalog_sales_quantitycount#91, catalog_sales_quantityave#92, catalog_sales_quantitystdev#93, catalog_sales_quantitycov#94]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#6 IN dynamicpruning#7
ReusedExchange (58)


(58) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#8]

Subquery:2 Hosting operator id = 19 Hosting Expression = sr_returned_date_sk#19 IN dynamicpruning#20
ReusedExchange (59)


(59) ReusedExchange [Reuses operator id: 26]
Output [1]: [d_date_sk#21]

Subquery:3 Hosting operator id = 44 Hosting Expression = cs_sold_date_sk#34 IN dynamicpruning#20


