== Physical Plan ==
TakeOrderedAndProject (57)
+- * HashAggregate (56)
   +- Exchange (55)
      +- * HashAggregate (54)
         +- * Project (53)
            +- * BroadcastHashJoin Inner BuildRight (52)
               :- * Project (46)
               :  +- * BroadcastHashJoin Inner BuildRight (45)
               :     :- * Project (43)
               :     :  +- * BroadcastHashJoin Inner BuildRight (42)
               :     :     :- * Project (37)
               :     :     :  +- * SortMergeJoin Inner (36)
               :     :     :     :- * Sort (30)
               :     :     :     :  +- Exchange (29)
               :     :     :     :     +- * Project (28)
               :     :     :     :        +- * BroadcastHashJoin Inner BuildRight (27)
               :     :     :     :           :- * Project (21)
               :     :     :     :           :  +- * SortMergeJoin Inner (20)
               :     :     :     :           :     :- * Sort (14)
               :     :     :     :           :     :  +- Exchange (13)
               :     :     :     :           :     :     +- * Project (12)
               :     :     :     :           :     :        +- * SortMergeJoin Inner (11)
               :     :     :     :           :     :           :- * Sort (5)
               :     :     :     :           :     :           :  +- Exchange (4)
               :     :     :     :           :     :           :     +- * Filter (3)
               :     :     :     :           :     :           :        +- * ColumnarToRow (2)
               :     :     :     :           :     :           :           +- Scan parquet default.store_sales (1)
               :     :     :     :           :     :           +- * Sort (10)
               :     :     :     :           :     :              +- Exchange (9)
               :     :     :     :           :     :                 +- * Filter (8)
               :     :     :     :           :     :                    +- * ColumnarToRow (7)
               :     :     :     :           :     :                       +- Scan parquet default.store_returns (6)
               :     :     :     :           :     +- * Sort (19)
               :     :     :     :           :        +- Exchange (18)
               :     :     :     :           :           +- * Filter (17)
               :     :     :     :           :              +- * ColumnarToRow (16)
               :     :     :     :           :                 +- Scan parquet default.catalog_sales (15)
               :     :     :     :           +- BroadcastExchange (26)
               :     :     :     :              +- * Project (25)
               :     :     :     :                 +- * Filter (24)
               :     :     :     :                    +- * ColumnarToRow (23)
               :     :     :     :                       +- Scan parquet default.date_dim (22)
               :     :     :     +- * Sort (35)
               :     :     :        +- Exchange (34)
               :     :     :           +- * Filter (33)
               :     :     :              +- * ColumnarToRow (32)
               :     :     :                 +- Scan parquet default.item (31)
               :     :     +- BroadcastExchange (41)
               :     :        +- * Filter (40)
               :     :           +- * ColumnarToRow (39)
               :     :              +- Scan parquet default.store (38)
               :     +- ReusedExchange (44)
               +- BroadcastExchange (51)
                  +- * Project (50)
                     +- * Filter (49)
                        +- * ColumnarToRow (48)
                           +- Scan parquet default.date_dim (47)


(1) Scan parquet default.store_sales
Output [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_quantity#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_quantity:int>

(2) ColumnarToRow [codegen id : 1]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_quantity#6]

(3) Filter [codegen id : 1]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_quantity#6]
Condition : ((((isnotnull(ss_customer_sk#3) AND isnotnull(ss_item_sk#2)) AND isnotnull(ss_ticket_number#5)) AND isnotnull(ss_sold_date_sk#1)) AND isnotnull(ss_store_sk#4))

(4) Exchange
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_quantity#6]
Arguments: hashpartitioning(cast(ss_customer_sk#3 as bigint), cast(ss_item_sk#2 as bigint), cast(ss_ticket_number#5 as bigint), 5), ENSURE_REQUIREMENTS, [id=#7]

(5) Sort [codegen id : 2]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_quantity#6]
Arguments: [cast(ss_customer_sk#3 as bigint) ASC NULLS FIRST, cast(ss_item_sk#2 as bigint) ASC NULLS FIRST, cast(ss_ticket_number#5 as bigint) ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_returns
Output [5]: [sr_returned_date_sk#8, sr_item_sk#9, sr_customer_sk#10, sr_ticket_number#11, sr_return_quantity#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number), IsNotNull(sr_returned_date_sk)]
ReadSchema: struct<sr_returned_date_sk:bigint,sr_item_sk:bigint,sr_customer_sk:bigint,sr_ticket_number:bigint,sr_return_quantity:int>

(7) ColumnarToRow [codegen id : 3]
Input [5]: [sr_returned_date_sk#8, sr_item_sk#9, sr_customer_sk#10, sr_ticket_number#11, sr_return_quantity#12]

(8) Filter [codegen id : 3]
Input [5]: [sr_returned_date_sk#8, sr_item_sk#9, sr_customer_sk#10, sr_ticket_number#11, sr_return_quantity#12]
Condition : (((isnotnull(sr_customer_sk#10) AND isnotnull(sr_item_sk#9)) AND isnotnull(sr_ticket_number#11)) AND isnotnull(sr_returned_date_sk#8))

(9) Exchange
Input [5]: [sr_returned_date_sk#8, sr_item_sk#9, sr_customer_sk#10, sr_ticket_number#11, sr_return_quantity#12]
Arguments: hashpartitioning(sr_customer_sk#10, sr_item_sk#9, sr_ticket_number#11, 5), ENSURE_REQUIREMENTS, [id=#13]

(10) Sort [codegen id : 4]
Input [5]: [sr_returned_date_sk#8, sr_item_sk#9, sr_customer_sk#10, sr_ticket_number#11, sr_return_quantity#12]
Arguments: [sr_customer_sk#10 ASC NULLS FIRST, sr_item_sk#9 ASC NULLS FIRST, sr_ticket_number#11 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 5]
Left keys [3]: [cast(ss_customer_sk#3 as bigint), cast(ss_item_sk#2 as bigint), cast(ss_ticket_number#5 as bigint)]
Right keys [3]: [sr_customer_sk#10, sr_item_sk#9, sr_ticket_number#11]
Join condition: None

(12) Project [codegen id : 5]
Output [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_returned_date_sk#8, sr_item_sk#9, sr_customer_sk#10, sr_return_quantity#12]
Input [11]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_quantity#6, sr_returned_date_sk#8, sr_item_sk#9, sr_customer_sk#10, sr_ticket_number#11, sr_return_quantity#12]

(13) Exchange
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_returned_date_sk#8, sr_item_sk#9, sr_customer_sk#10, sr_return_quantity#12]
Arguments: hashpartitioning(sr_customer_sk#10, sr_item_sk#9, 5), ENSURE_REQUIREMENTS, [id=#14]

(14) Sort [codegen id : 6]
Input [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_returned_date_sk#8, sr_item_sk#9, sr_customer_sk#10, sr_return_quantity#12]
Arguments: [sr_customer_sk#10 ASC NULLS FIRST, sr_item_sk#9 ASC NULLS FIRST], false, 0

(15) Scan parquet default.catalog_sales
Output [4]: [cs_sold_date_sk#15, cs_bill_customer_sk#16, cs_item_sk#17, cs_quantity#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int>

(16) ColumnarToRow [codegen id : 7]
Input [4]: [cs_sold_date_sk#15, cs_bill_customer_sk#16, cs_item_sk#17, cs_quantity#18]

(17) Filter [codegen id : 7]
Input [4]: [cs_sold_date_sk#15, cs_bill_customer_sk#16, cs_item_sk#17, cs_quantity#18]
Condition : ((isnotnull(cs_bill_customer_sk#16) AND isnotnull(cs_item_sk#17)) AND isnotnull(cs_sold_date_sk#15))

(18) Exchange
Input [4]: [cs_sold_date_sk#15, cs_bill_customer_sk#16, cs_item_sk#17, cs_quantity#18]
Arguments: hashpartitioning(cast(cs_bill_customer_sk#16 as bigint), cast(cs_item_sk#17 as bigint), 5), ENSURE_REQUIREMENTS, [id=#19]

(19) Sort [codegen id : 8]
Input [4]: [cs_sold_date_sk#15, cs_bill_customer_sk#16, cs_item_sk#17, cs_quantity#18]
Arguments: [cast(cs_bill_customer_sk#16 as bigint) ASC NULLS FIRST, cast(cs_item_sk#17 as bigint) ASC NULLS FIRST], false, 0

(20) SortMergeJoin [codegen id : 10]
Left keys [2]: [sr_customer_sk#10, sr_item_sk#9]
Right keys [2]: [cast(cs_bill_customer_sk#16 as bigint), cast(cs_item_sk#17 as bigint)]
Join condition: None

(21) Project [codegen id : 10]
Output [8]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_returned_date_sk#8, sr_return_quantity#12, cs_sold_date_sk#15, cs_quantity#18]
Input [12]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_returned_date_sk#8, sr_item_sk#9, sr_customer_sk#10, sr_return_quantity#12, cs_sold_date_sk#15, cs_bill_customer_sk#16, cs_item_sk#17, cs_quantity#18]

(22) Scan parquet default.date_dim
Output [2]: [d_date_sk#20, d_quarter_name#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_quarter_name, [2001Q1,2001Q2,2001Q3]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_quarter_name:string>

(23) ColumnarToRow [codegen id : 9]
Input [2]: [d_date_sk#20, d_quarter_name#21]

(24) Filter [codegen id : 9]
Input [2]: [d_date_sk#20, d_quarter_name#21]
Condition : (d_quarter_name#21 IN (2001Q1,2001Q2,2001Q3) AND isnotnull(d_date_sk#20))

(25) Project [codegen id : 9]
Output [1]: [d_date_sk#20]
Input [2]: [d_date_sk#20, d_quarter_name#21]

(26) BroadcastExchange
Input [1]: [d_date_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22]

(27) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [sr_returned_date_sk#8]
Right keys [1]: [cast(d_date_sk#20 as bigint)]
Join condition: None

(28) Project [codegen id : 10]
Output [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_return_quantity#12, cs_sold_date_sk#15, cs_quantity#18]
Input [9]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_returned_date_sk#8, sr_return_quantity#12, cs_sold_date_sk#15, cs_quantity#18, d_date_sk#20]

(29) Exchange
Input [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_return_quantity#12, cs_sold_date_sk#15, cs_quantity#18]
Arguments: hashpartitioning(ss_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#23]

(30) Sort [codegen id : 11]
Input [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_return_quantity#12, cs_sold_date_sk#15, cs_quantity#18]
Arguments: [ss_item_sk#2 ASC NULLS FIRST], false, 0

(31) Scan parquet default.item
Output [3]: [i_item_sk#24, i_item_id#25, i_item_desc#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>

(32) ColumnarToRow [codegen id : 12]
Input [3]: [i_item_sk#24, i_item_id#25, i_item_desc#26]

(33) Filter [codegen id : 12]
Input [3]: [i_item_sk#24, i_item_id#25, i_item_desc#26]
Condition : isnotnull(i_item_sk#24)

(34) Exchange
Input [3]: [i_item_sk#24, i_item_id#25, i_item_desc#26]
Arguments: hashpartitioning(i_item_sk#24, 5), ENSURE_REQUIREMENTS, [id=#27]

(35) Sort [codegen id : 13]
Input [3]: [i_item_sk#24, i_item_id#25, i_item_desc#26]
Arguments: [i_item_sk#24 ASC NULLS FIRST], false, 0

(36) SortMergeJoin [codegen id : 17]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#24]
Join condition: None

(37) Project [codegen id : 17]
Output [8]: [ss_sold_date_sk#1, ss_store_sk#4, ss_quantity#6, sr_return_quantity#12, cs_sold_date_sk#15, cs_quantity#18, i_item_id#25, i_item_desc#26]
Input [10]: [ss_sold_date_sk#1, ss_item_sk#2, ss_store_sk#4, ss_quantity#6, sr_return_quantity#12, cs_sold_date_sk#15, cs_quantity#18, i_item_sk#24, i_item_id#25, i_item_desc#26]

(38) Scan parquet default.store
Output [2]: [s_store_sk#28, s_state#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(39) ColumnarToRow [codegen id : 14]
Input [2]: [s_store_sk#28, s_state#29]

(40) Filter [codegen id : 14]
Input [2]: [s_store_sk#28, s_state#29]
Condition : isnotnull(s_store_sk#28)

(41) BroadcastExchange
Input [2]: [s_store_sk#28, s_state#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#30]

(42) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [s_store_sk#28]
Join condition: None

(43) Project [codegen id : 17]
Output [8]: [ss_sold_date_sk#1, ss_quantity#6, sr_return_quantity#12, cs_sold_date_sk#15, cs_quantity#18, i_item_id#25, i_item_desc#26, s_state#29]
Input [10]: [ss_sold_date_sk#1, ss_store_sk#4, ss_quantity#6, sr_return_quantity#12, cs_sold_date_sk#15, cs_quantity#18, i_item_id#25, i_item_desc#26, s_store_sk#28, s_state#29]

(44) ReusedExchange [Reuses operator id: 26]
Output [1]: [d_date_sk#31]

(45) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [cs_sold_date_sk#15]
Right keys [1]: [d_date_sk#31]
Join condition: None

(46) Project [codegen id : 17]
Output [7]: [ss_sold_date_sk#1, ss_quantity#6, sr_return_quantity#12, cs_quantity#18, i_item_id#25, i_item_desc#26, s_state#29]
Input [9]: [ss_sold_date_sk#1, ss_quantity#6, sr_return_quantity#12, cs_sold_date_sk#15, cs_quantity#18, i_item_id#25, i_item_desc#26, s_state#29, d_date_sk#31]

(47) Scan parquet default.date_dim
Output [2]: [d_date_sk#32, d_quarter_name#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_quarter_name), EqualTo(d_quarter_name,2001Q1), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_quarter_name:string>

(48) ColumnarToRow [codegen id : 16]
Input [2]: [d_date_sk#32, d_quarter_name#33]

(49) Filter [codegen id : 16]
Input [2]: [d_date_sk#32, d_quarter_name#33]
Condition : ((isnotnull(d_quarter_name#33) AND (d_quarter_name#33 = 2001Q1)) AND isnotnull(d_date_sk#32))

(50) Project [codegen id : 16]
Output [1]: [d_date_sk#32]
Input [2]: [d_date_sk#32, d_quarter_name#33]

(51) BroadcastExchange
Input [1]: [d_date_sk#32]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#34]

(52) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#32]
Join condition: None

(53) Project [codegen id : 17]
Output [6]: [ss_quantity#6, sr_return_quantity#12, cs_quantity#18, s_state#29, i_item_id#25, i_item_desc#26]
Input [8]: [ss_sold_date_sk#1, ss_quantity#6, sr_return_quantity#12, cs_quantity#18, i_item_id#25, i_item_desc#26, s_state#29, d_date_sk#32]

(54) HashAggregate [codegen id : 17]
Input [6]: [ss_quantity#6, sr_return_quantity#12, cs_quantity#18, s_state#29, i_item_id#25, i_item_desc#26]
Keys [3]: [i_item_id#25, i_item_desc#26, s_state#29]
Functions [9]: [partial_count(ss_quantity#6), partial_avg(cast(ss_quantity#6 as bigint)), partial_stddev_samp(cast(ss_quantity#6 as double)), partial_count(sr_return_quantity#12), partial_avg(cast(sr_return_quantity#12 as bigint)), partial_stddev_samp(cast(sr_return_quantity#12 as double)), partial_count(cs_quantity#18), partial_avg(cast(cs_quantity#18 as bigint)), partial_stddev_samp(cast(cs_quantity#18 as double))]
Aggregate Attributes [18]: [count#35, sum#36, count#37, n#38, avg#39, m2#40, count#41, sum#42, count#43, n#44, avg#45, m2#46, count#47, sum#48, count#49, n#50, avg#51, m2#52]
Results [21]: [i_item_id#25, i_item_desc#26, s_state#29, count#53, sum#54, count#55, n#56, avg#57, m2#58, count#59, sum#60, count#61, n#62, avg#63, m2#64, count#65, sum#66, count#67, n#68, avg#69, m2#70]

(55) Exchange
Input [21]: [i_item_id#25, i_item_desc#26, s_state#29, count#53, sum#54, count#55, n#56, avg#57, m2#58, count#59, sum#60, count#61, n#62, avg#63, m2#64, count#65, sum#66, count#67, n#68, avg#69, m2#70]
Arguments: hashpartitioning(i_item_id#25, i_item_desc#26, s_state#29, 5), ENSURE_REQUIREMENTS, [id=#71]

(56) HashAggregate [codegen id : 18]
Input [21]: [i_item_id#25, i_item_desc#26, s_state#29, count#53, sum#54, count#55, n#56, avg#57, m2#58, count#59, sum#60, count#61, n#62, avg#63, m2#64, count#65, sum#66, count#67, n#68, avg#69, m2#70]
Keys [3]: [i_item_id#25, i_item_desc#26, s_state#29]
Functions [9]: [count(ss_quantity#6), avg(cast(ss_quantity#6 as bigint)), stddev_samp(cast(ss_quantity#6 as double)), count(sr_return_quantity#12), avg(cast(sr_return_quantity#12 as bigint)), stddev_samp(cast(sr_return_quantity#12 as double)), count(cs_quantity#18), avg(cast(cs_quantity#18 as bigint)), stddev_samp(cast(cs_quantity#18 as double))]
Aggregate Attributes [9]: [count(ss_quantity#6)#72, avg(cast(ss_quantity#6 as bigint))#73, stddev_samp(cast(ss_quantity#6 as double))#74, count(sr_return_quantity#12)#75, avg(cast(sr_return_quantity#12 as bigint))#76, stddev_samp(cast(sr_return_quantity#12 as double))#77, count(cs_quantity#18)#78, avg(cast(cs_quantity#18 as bigint))#79, stddev_samp(cast(cs_quantity#18 as double))#80]
Results [15]: [i_item_id#25, i_item_desc#26, s_state#29, count(ss_quantity#6)#72 AS store_sales_quantitycount#81, avg(cast(ss_quantity#6 as bigint))#73 AS store_sales_quantityave#82, stddev_samp(cast(ss_quantity#6 as double))#74 AS store_sales_quantitystdev#83, (stddev_samp(cast(ss_quantity#6 as double))#74 / avg(cast(ss_quantity#6 as bigint))#73) AS store_sales_quantitycov#84, count(sr_return_quantity#12)#75 AS as_store_returns_quantitycount#85, avg(cast(sr_return_quantity#12 as bigint))#76 AS as_store_returns_quantityave#86, stddev_samp(cast(sr_return_quantity#12 as double))#77 AS as_store_returns_quantitystdev#87, (stddev_samp(cast(sr_return_quantity#12 as double))#77 / avg(cast(sr_return_quantity#12 as bigint))#76) AS store_returns_quantitycov#88, count(cs_quantity#18)#78 AS catalog_sales_quantitycount#89, avg(cast(cs_quantity#18 as bigint))#79 AS catalog_sales_quantityave#90, (stddev_samp(cast(cs_quantity#18 as double))#80 / avg(cast(cs_quantity#18 as bigint))#79) AS catalog_sales_quantitystdev#91, (stddev_samp(cast(cs_quantity#18 as double))#80 / avg(cast(cs_quantity#18 as bigint))#79) AS catalog_sales_quantitycov#92]

(57) TakeOrderedAndProject
Input [15]: [i_item_id#25, i_item_desc#26, s_state#29, store_sales_quantitycount#81, store_sales_quantityave#82, store_sales_quantitystdev#83, store_sales_quantitycov#84, as_store_returns_quantitycount#85, as_store_returns_quantityave#86, as_store_returns_quantitystdev#87, store_returns_quantitycov#88, catalog_sales_quantitycount#89, catalog_sales_quantityave#90, catalog_sales_quantitystdev#91, catalog_sales_quantitycov#92]
Arguments: 100, [i_item_id#25 ASC NULLS FIRST, i_item_desc#26 ASC NULLS FIRST, s_state#29 ASC NULLS FIRST], [i_item_id#25, i_item_desc#26, s_state#29, store_sales_quantitycount#81, store_sales_quantityave#82, store_sales_quantitystdev#83, store_sales_quantitycov#84, as_store_returns_quantitycount#85, as_store_returns_quantityave#86, as_store_returns_quantitystdev#87, store_returns_quantitycov#88, catalog_sales_quantitycount#89, catalog_sales_quantityave#90, catalog_sales_quantitystdev#91, catalog_sales_quantitycov#92]

