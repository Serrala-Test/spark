== Physical Plan ==
TakeOrderedAndProject (57)
+- * HashAggregate (56)
   +- Exchange (55)
      +- * HashAggregate (54)
         +- * Project (53)
            +- * SortMergeJoin Inner (52)
               :- * Sort (43)
               :  +- Exchange (42)
               :     +- * Project (41)
               :        +- * SortMergeJoin Inner (40)
               :           :- * Sort (27)
               :           :  +- Exchange (26)
               :           :     +- * Project (25)
               :           :        +- * SortMergeJoin Inner (24)
               :           :           :- * Sort (18)
               :           :           :  +- Exchange (17)
               :           :           :     +- * Project (16)
               :           :           :        +- * BroadcastHashJoin Inner BuildRight (15)
               :           :           :           :- * Project (10)
               :           :           :           :  +- * BroadcastHashJoin Inner BuildLeft (9)
               :           :           :           :     :- BroadcastExchange (5)
               :           :           :           :     :  +- * Project (4)
               :           :           :           :     :     +- * Filter (3)
               :           :           :           :     :        +- * ColumnarToRow (2)
               :           :           :           :     :           +- Scan parquet default.date_dim (1)
               :           :           :           :     +- * Filter (8)
               :           :           :           :        +- * ColumnarToRow (7)
               :           :           :           :           +- Scan parquet default.store_sales (6)
               :           :           :           +- BroadcastExchange (14)
               :           :           :              +- * Filter (13)
               :           :           :                 +- * ColumnarToRow (12)
               :           :           :                    +- Scan parquet default.store (11)
               :           :           +- * Sort (23)
               :           :              +- Exchange (22)
               :           :                 +- * Filter (21)
               :           :                    +- * ColumnarToRow (20)
               :           :                       +- Scan parquet default.item (19)
               :           +- * Sort (39)
               :              +- Exchange (38)
               :                 +- * Project (37)
               :                    +- * BroadcastHashJoin Inner BuildLeft (36)
               :                       :- BroadcastExchange (32)
               :                       :  +- * Project (31)
               :                       :     +- * Filter (30)
               :                       :        +- * ColumnarToRow (29)
               :                       :           +- Scan parquet default.date_dim (28)
               :                       +- * Filter (35)
               :                          +- * ColumnarToRow (34)
               :                             +- Scan parquet default.store_returns (33)
               +- * Sort (51)
                  +- Exchange (50)
                     +- * Project (49)
                        +- * BroadcastHashJoin Inner BuildLeft (48)
                           :- ReusedExchange (44)
                           +- * Filter (47)
                              +- * ColumnarToRow (46)
                                 +- Scan parquet default.catalog_sales (45)


(1) Scan parquet default.date_dim
Output [2]: [d_date_sk#1, d_quarter_name#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_quarter_name), EqualTo(d_quarter_name,2001Q1), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_quarter_name:string>

(2) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#1, d_quarter_name#2]

(3) Filter [codegen id : 1]
Input [2]: [d_date_sk#1, d_quarter_name#2]
Condition : ((isnotnull(d_quarter_name#2) AND (d_quarter_name#2 = 2001Q1)) AND isnotnull(d_date_sk#1))

(4) Project [codegen id : 1]
Output [1]: [d_date_sk#1]
Input [2]: [d_date_sk#1, d_quarter_name#2]

(5) BroadcastExchange
Input [1]: [d_date_sk#1]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#3]

(6) Scan parquet default.store_sales
Output [6]: [ss_sold_date_sk#4, ss_item_sk#5, ss_customer_sk#6, ss_store_sk#7, ss_ticket_number#8, ss_quantity#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_quantity:int>

(7) ColumnarToRow
Input [6]: [ss_sold_date_sk#4, ss_item_sk#5, ss_customer_sk#6, ss_store_sk#7, ss_ticket_number#8, ss_quantity#9]

(8) Filter
Input [6]: [ss_sold_date_sk#4, ss_item_sk#5, ss_customer_sk#6, ss_store_sk#7, ss_ticket_number#8, ss_quantity#9]
Condition : ((((isnotnull(ss_customer_sk#6) AND isnotnull(ss_item_sk#5)) AND isnotnull(ss_ticket_number#8)) AND isnotnull(ss_sold_date_sk#4)) AND isnotnull(ss_store_sk#7))

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [d_date_sk#1]
Right keys [1]: [ss_sold_date_sk#4]
Join condition: None

(10) Project [codegen id : 3]
Output [5]: [ss_item_sk#5, ss_customer_sk#6, ss_store_sk#7, ss_ticket_number#8, ss_quantity#9]
Input [7]: [d_date_sk#1, ss_sold_date_sk#4, ss_item_sk#5, ss_customer_sk#6, ss_store_sk#7, ss_ticket_number#8, ss_quantity#9]

(11) Scan parquet default.store
Output [2]: [s_store_sk#10, s_state#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [s_store_sk#10, s_state#11]

(13) Filter [codegen id : 2]
Input [2]: [s_store_sk#10, s_state#11]
Condition : isnotnull(s_store_sk#10)

(14) BroadcastExchange
Input [2]: [s_store_sk#10, s_state#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#12]

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#7]
Right keys [1]: [s_store_sk#10]
Join condition: None

(16) Project [codegen id : 3]
Output [5]: [ss_item_sk#5, ss_customer_sk#6, ss_ticket_number#8, ss_quantity#9, s_state#11]
Input [7]: [ss_item_sk#5, ss_customer_sk#6, ss_store_sk#7, ss_ticket_number#8, ss_quantity#9, s_store_sk#10, s_state#11]

(17) Exchange
Input [5]: [ss_item_sk#5, ss_customer_sk#6, ss_ticket_number#8, ss_quantity#9, s_state#11]
Arguments: hashpartitioning(ss_item_sk#5, 5), true, [id=#13]

(18) Sort [codegen id : 4]
Input [5]: [ss_item_sk#5, ss_customer_sk#6, ss_ticket_number#8, ss_quantity#9, s_state#11]
Arguments: [ss_item_sk#5 ASC NULLS FIRST], false, 0

(19) Scan parquet default.item
Output [3]: [i_item_sk#14, i_item_id#15, i_item_desc#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>

(20) ColumnarToRow [codegen id : 5]
Input [3]: [i_item_sk#14, i_item_id#15, i_item_desc#16]

(21) Filter [codegen id : 5]
Input [3]: [i_item_sk#14, i_item_id#15, i_item_desc#16]
Condition : isnotnull(i_item_sk#14)

(22) Exchange
Input [3]: [i_item_sk#14, i_item_id#15, i_item_desc#16]
Arguments: hashpartitioning(i_item_sk#14, 5), true, [id=#17]

(23) Sort [codegen id : 6]
Input [3]: [i_item_sk#14, i_item_id#15, i_item_desc#16]
Arguments: [i_item_sk#14 ASC NULLS FIRST], false, 0

(24) SortMergeJoin [codegen id : 7]
Left keys [1]: [ss_item_sk#5]
Right keys [1]: [i_item_sk#14]
Join condition: None

(25) Project [codegen id : 7]
Output [7]: [ss_item_sk#5, ss_customer_sk#6, ss_ticket_number#8, ss_quantity#9, s_state#11, i_item_id#15, i_item_desc#16]
Input [8]: [ss_item_sk#5, ss_customer_sk#6, ss_ticket_number#8, ss_quantity#9, s_state#11, i_item_sk#14, i_item_id#15, i_item_desc#16]

(26) Exchange
Input [7]: [ss_item_sk#5, ss_customer_sk#6, ss_ticket_number#8, ss_quantity#9, s_state#11, i_item_id#15, i_item_desc#16]
Arguments: hashpartitioning(cast(ss_customer_sk#6 as bigint), cast(ss_item_sk#5 as bigint), cast(ss_ticket_number#8 as bigint), 5), true, [id=#18]

(27) Sort [codegen id : 8]
Input [7]: [ss_item_sk#5, ss_customer_sk#6, ss_ticket_number#8, ss_quantity#9, s_state#11, i_item_id#15, i_item_desc#16]
Arguments: [cast(ss_customer_sk#6 as bigint) ASC NULLS FIRST, cast(ss_item_sk#5 as bigint) ASC NULLS FIRST, cast(ss_ticket_number#8 as bigint) ASC NULLS FIRST], false, 0

(28) Scan parquet default.date_dim
Output [2]: [d_date_sk#19, d_quarter_name#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_quarter_name, [2001Q1,2001Q2,2001Q3]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_quarter_name:string>

(29) ColumnarToRow [codegen id : 9]
Input [2]: [d_date_sk#19, d_quarter_name#20]

(30) Filter [codegen id : 9]
Input [2]: [d_date_sk#19, d_quarter_name#20]
Condition : (d_quarter_name#20 IN (2001Q1,2001Q2,2001Q3) AND isnotnull(d_date_sk#19))

(31) Project [codegen id : 9]
Output [1]: [d_date_sk#19]
Input [2]: [d_date_sk#19, d_quarter_name#20]

(32) BroadcastExchange
Input [1]: [d_date_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21]

(33) Scan parquet default.store_returns
Output [5]: [sr_returned_date_sk#22, sr_item_sk#23, sr_customer_sk#24, sr_ticket_number#25, sr_return_quantity#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number), IsNotNull(sr_returned_date_sk)]
ReadSchema: struct<sr_returned_date_sk:bigint,sr_item_sk:bigint,sr_customer_sk:bigint,sr_ticket_number:bigint,sr_return_quantity:int>

(34) ColumnarToRow
Input [5]: [sr_returned_date_sk#22, sr_item_sk#23, sr_customer_sk#24, sr_ticket_number#25, sr_return_quantity#26]

(35) Filter
Input [5]: [sr_returned_date_sk#22, sr_item_sk#23, sr_customer_sk#24, sr_ticket_number#25, sr_return_quantity#26]
Condition : (((isnotnull(sr_customer_sk#24) AND isnotnull(sr_item_sk#23)) AND isnotnull(sr_ticket_number#25)) AND isnotnull(sr_returned_date_sk#22))

(36) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cast(d_date_sk#19 as bigint)]
Right keys [1]: [sr_returned_date_sk#22]
Join condition: None

(37) Project [codegen id : 10]
Output [4]: [sr_item_sk#23, sr_customer_sk#24, sr_ticket_number#25, sr_return_quantity#26]
Input [6]: [d_date_sk#19, sr_returned_date_sk#22, sr_item_sk#23, sr_customer_sk#24, sr_ticket_number#25, sr_return_quantity#26]

(38) Exchange
Input [4]: [sr_item_sk#23, sr_customer_sk#24, sr_ticket_number#25, sr_return_quantity#26]
Arguments: hashpartitioning(sr_customer_sk#24, sr_item_sk#23, sr_ticket_number#25, 5), true, [id=#27]

(39) Sort [codegen id : 11]
Input [4]: [sr_item_sk#23, sr_customer_sk#24, sr_ticket_number#25, sr_return_quantity#26]
Arguments: [sr_customer_sk#24 ASC NULLS FIRST, sr_item_sk#23 ASC NULLS FIRST, sr_ticket_number#25 ASC NULLS FIRST], false, 0

(40) SortMergeJoin [codegen id : 12]
Left keys [3]: [cast(ss_customer_sk#6 as bigint), cast(ss_item_sk#5 as bigint), cast(ss_ticket_number#8 as bigint)]
Right keys [3]: [sr_customer_sk#24, sr_item_sk#23, sr_ticket_number#25]
Join condition: None

(41) Project [codegen id : 12]
Output [7]: [ss_quantity#9, s_state#11, i_item_id#15, i_item_desc#16, sr_item_sk#23, sr_customer_sk#24, sr_return_quantity#26]
Input [11]: [ss_item_sk#5, ss_customer_sk#6, ss_ticket_number#8, ss_quantity#9, s_state#11, i_item_id#15, i_item_desc#16, sr_item_sk#23, sr_customer_sk#24, sr_ticket_number#25, sr_return_quantity#26]

(42) Exchange
Input [7]: [ss_quantity#9, s_state#11, i_item_id#15, i_item_desc#16, sr_item_sk#23, sr_customer_sk#24, sr_return_quantity#26]
Arguments: hashpartitioning(sr_customer_sk#24, sr_item_sk#23, 5), true, [id=#28]

(43) Sort [codegen id : 13]
Input [7]: [ss_quantity#9, s_state#11, i_item_id#15, i_item_desc#16, sr_item_sk#23, sr_customer_sk#24, sr_return_quantity#26]
Arguments: [sr_customer_sk#24 ASC NULLS FIRST, sr_item_sk#23 ASC NULLS FIRST], false, 0

(44) ReusedExchange [Reuses operator id: 32]
Output [1]: [d_date_sk#29]

(45) Scan parquet default.catalog_sales
Output [4]: [cs_sold_date_sk#30, cs_bill_customer_sk#31, cs_item_sk#32, cs_quantity#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int>

(46) ColumnarToRow
Input [4]: [cs_sold_date_sk#30, cs_bill_customer_sk#31, cs_item_sk#32, cs_quantity#33]

(47) Filter
Input [4]: [cs_sold_date_sk#30, cs_bill_customer_sk#31, cs_item_sk#32, cs_quantity#33]
Condition : ((isnotnull(cs_bill_customer_sk#31) AND isnotnull(cs_item_sk#32)) AND isnotnull(cs_sold_date_sk#30))

(48) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [d_date_sk#29]
Right keys [1]: [cs_sold_date_sk#30]
Join condition: None

(49) Project [codegen id : 15]
Output [3]: [cs_bill_customer_sk#31, cs_item_sk#32, cs_quantity#33]
Input [5]: [d_date_sk#29, cs_sold_date_sk#30, cs_bill_customer_sk#31, cs_item_sk#32, cs_quantity#33]

(50) Exchange
Input [3]: [cs_bill_customer_sk#31, cs_item_sk#32, cs_quantity#33]
Arguments: hashpartitioning(cast(cs_bill_customer_sk#31 as bigint), cast(cs_item_sk#32 as bigint), 5), true, [id=#34]

(51) Sort [codegen id : 16]
Input [3]: [cs_bill_customer_sk#31, cs_item_sk#32, cs_quantity#33]
Arguments: [cast(cs_bill_customer_sk#31 as bigint) ASC NULLS FIRST, cast(cs_item_sk#32 as bigint) ASC NULLS FIRST], false, 0

(52) SortMergeJoin [codegen id : 17]
Left keys [2]: [sr_customer_sk#24, sr_item_sk#23]
Right keys [2]: [cast(cs_bill_customer_sk#31 as bigint), cast(cs_item_sk#32 as bigint)]
Join condition: None

(53) Project [codegen id : 17]
Output [6]: [ss_quantity#9, sr_return_quantity#26, cs_quantity#33, s_state#11, i_item_id#15, i_item_desc#16]
Input [10]: [ss_quantity#9, s_state#11, i_item_id#15, i_item_desc#16, sr_item_sk#23, sr_customer_sk#24, sr_return_quantity#26, cs_bill_customer_sk#31, cs_item_sk#32, cs_quantity#33]

(54) HashAggregate [codegen id : 17]
Input [6]: [ss_quantity#9, sr_return_quantity#26, cs_quantity#33, s_state#11, i_item_id#15, i_item_desc#16]
Keys [3]: [i_item_id#15, i_item_desc#16, s_state#11]
Functions [9]: [partial_count(ss_quantity#9), partial_avg(cast(ss_quantity#9 as bigint)), partial_stddev_samp(cast(ss_quantity#9 as double)), partial_count(sr_return_quantity#26), partial_avg(cast(sr_return_quantity#26 as bigint)), partial_stddev_samp(cast(sr_return_quantity#26 as double)), partial_count(cs_quantity#33), partial_avg(cast(cs_quantity#33 as bigint)), partial_stddev_samp(cast(cs_quantity#33 as double))]
Aggregate Attributes [18]: [count#35, sum#36, count#37, n#38, avg#39, m2#40, count#41, sum#42, count#43, n#44, avg#45, m2#46, count#47, sum#48, count#49, n#50, avg#51, m2#52]
Results [21]: [i_item_id#15, i_item_desc#16, s_state#11, count#53, sum#54, count#55, n#56, avg#57, m2#58, count#59, sum#60, count#61, n#62, avg#63, m2#64, count#65, sum#66, count#67, n#68, avg#69, m2#70]

(55) Exchange
Input [21]: [i_item_id#15, i_item_desc#16, s_state#11, count#53, sum#54, count#55, n#56, avg#57, m2#58, count#59, sum#60, count#61, n#62, avg#63, m2#64, count#65, sum#66, count#67, n#68, avg#69, m2#70]
Arguments: hashpartitioning(i_item_id#15, i_item_desc#16, s_state#11, 5), true, [id=#71]

(56) HashAggregate [codegen id : 18]
Input [21]: [i_item_id#15, i_item_desc#16, s_state#11, count#53, sum#54, count#55, n#56, avg#57, m2#58, count#59, sum#60, count#61, n#62, avg#63, m2#64, count#65, sum#66, count#67, n#68, avg#69, m2#70]
Keys [3]: [i_item_id#15, i_item_desc#16, s_state#11]
Functions [9]: [count(ss_quantity#9), avg(cast(ss_quantity#9 as bigint)), stddev_samp(cast(ss_quantity#9 as double)), count(sr_return_quantity#26), avg(cast(sr_return_quantity#26 as bigint)), stddev_samp(cast(sr_return_quantity#26 as double)), count(cs_quantity#33), avg(cast(cs_quantity#33 as bigint)), stddev_samp(cast(cs_quantity#33 as double))]
Aggregate Attributes [9]: [count(ss_quantity#9)#72, avg(cast(ss_quantity#9 as bigint))#73, stddev_samp(cast(ss_quantity#9 as double))#74, count(sr_return_quantity#26)#75, avg(cast(sr_return_quantity#26 as bigint))#76, stddev_samp(cast(sr_return_quantity#26 as double))#77, count(cs_quantity#33)#78, avg(cast(cs_quantity#33 as bigint))#79, stddev_samp(cast(cs_quantity#33 as double))#80]
Results [15]: [i_item_id#15, i_item_desc#16, s_state#11, count(ss_quantity#9)#72 AS store_sales_quantitycount#81, avg(cast(ss_quantity#9 as bigint))#73 AS store_sales_quantityave#82, stddev_samp(cast(ss_quantity#9 as double))#74 AS store_sales_quantitystdev#83, (stddev_samp(cast(ss_quantity#9 as double))#74 / avg(cast(ss_quantity#9 as bigint))#73) AS store_sales_quantitycov#84, count(sr_return_quantity#26)#75 AS as_store_returns_quantitycount#85, avg(cast(sr_return_quantity#26 as bigint))#76 AS as_store_returns_quantityave#86, stddev_samp(cast(sr_return_quantity#26 as double))#77 AS as_store_returns_quantitystdev#87, (stddev_samp(cast(sr_return_quantity#26 as double))#77 / avg(cast(sr_return_quantity#26 as bigint))#76) AS store_returns_quantitycov#88, count(cs_quantity#33)#78 AS catalog_sales_quantitycount#89, avg(cast(cs_quantity#33 as bigint))#79 AS catalog_sales_quantityave#90, (stddev_samp(cast(cs_quantity#33 as double))#80 / avg(cast(cs_quantity#33 as bigint))#79) AS catalog_sales_quantitystdev#91, (stddev_samp(cast(cs_quantity#33 as double))#80 / avg(cast(cs_quantity#33 as bigint))#79) AS catalog_sales_quantitycov#92]

(57) TakeOrderedAndProject
Input [15]: [i_item_id#15, i_item_desc#16, s_state#11, store_sales_quantitycount#81, store_sales_quantityave#82, store_sales_quantitystdev#83, store_sales_quantitycov#84, as_store_returns_quantitycount#85, as_store_returns_quantityave#86, as_store_returns_quantitystdev#87, store_returns_quantitycov#88, catalog_sales_quantitycount#89, catalog_sales_quantityave#90, catalog_sales_quantitystdev#91, catalog_sales_quantitycov#92]
Arguments: 100, [i_item_id#15 ASC NULLS FIRST, i_item_desc#16 ASC NULLS FIRST, s_state#11 ASC NULLS FIRST], [i_item_id#15, i_item_desc#16, s_state#11, store_sales_quantitycount#81, store_sales_quantityave#82, store_sales_quantitystdev#83, store_sales_quantitycov#84, as_store_returns_quantitycount#85, as_store_returns_quantityave#86, as_store_returns_quantitystdev#87, store_returns_quantitycov#88, catalog_sales_quantitycount#89, catalog_sales_quantityave#90, catalog_sales_quantitystdev#91, catalog_sales_quantitycov#92]

