== Physical Plan ==
TakeOrderedAndProject (55)
+- * HashAggregate (54)
   +- Exchange (53)
      +- * HashAggregate (52)
         +- * Project (51)
            +- * SortMergeJoin Inner (50)
               :- * Sort (44)
               :  +- Exchange (43)
               :     +- * Project (42)
               :        +- * BroadcastHashJoin Inner BuildRight (41)
               :           :- * Project (36)
               :           :  +- * BroadcastHashJoin Inner BuildRight (35)
               :           :     :- * Project (29)
               :           :     :  +- * BroadcastHashJoin Inner BuildLeft (28)
               :           :     :     :- BroadcastExchange (23)
               :           :     :     :  +- * Project (22)
               :           :     :     :     +- * BroadcastHashJoin Inner BuildLeft (21)
               :           :     :     :        :- BroadcastExchange (16)
               :           :     :     :        :  +- * Project (15)
               :           :     :     :        :     +- * BroadcastHashJoin Inner BuildRight (14)
               :           :     :     :        :        :- * Project (9)
               :           :     :     :        :        :  +- * BroadcastHashJoin Inner BuildRight (8)
               :           :     :     :        :        :     :- * Filter (3)
               :           :     :     :        :        :     :  +- * ColumnarToRow (2)
               :           :     :     :        :        :     :     +- Scan parquet default.store_sales (1)
               :           :     :     :        :        :     +- BroadcastExchange (7)
               :           :     :     :        :        :        +- * Filter (6)
               :           :     :     :        :        :           +- * ColumnarToRow (5)
               :           :     :     :        :        :              +- Scan parquet default.store_returns (4)
               :           :     :     :        :        +- BroadcastExchange (13)
               :           :     :     :        :           +- * Filter (12)
               :           :     :     :        :              +- * ColumnarToRow (11)
               :           :     :     :        :                 +- Scan parquet default.catalog_sales (10)
               :           :     :     :        +- * Project (20)
               :           :     :     :           +- * Filter (19)
               :           :     :     :              +- * ColumnarToRow (18)
               :           :     :     :                 +- Scan parquet default.date_dim (17)
               :           :     :     +- * Project (27)
               :           :     :        +- * Filter (26)
               :           :     :           +- * ColumnarToRow (25)
               :           :     :              +- Scan parquet default.date_dim (24)
               :           :     +- BroadcastExchange (34)
               :           :        +- * Project (33)
               :           :           +- * Filter (32)
               :           :              +- * ColumnarToRow (31)
               :           :                 +- Scan parquet default.date_dim (30)
               :           +- BroadcastExchange (40)
               :              +- * Filter (39)
               :                 +- * ColumnarToRow (38)
               :                    +- Scan parquet default.store (37)
               +- * Sort (49)
                  +- Exchange (48)
                     +- * Filter (47)
                        +- * ColumnarToRow (46)
                           +- Scan parquet default.item (45)


(1) Scan parquet default.store_sales
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#6), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_quantity:int>

(2) ColumnarToRow [codegen id : 3]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6]

(3) Filter [codegen id : 3]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6]
Condition : (((isnotnull(ss_customer_sk#2) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_ticket_number#4)) AND isnotnull(ss_store_sk#3))

(4) Scan parquet default.store_returns
Output [5]: [sr_item_sk#7, sr_customer_sk#8, sr_ticket_number#9, sr_return_quantity#10, sr_returned_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#11), dynamicpruningexpression(sr_returned_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:bigint,sr_customer_sk:bigint,sr_ticket_number:bigint,sr_return_quantity:int>

(5) ColumnarToRow [codegen id : 1]
Input [5]: [sr_item_sk#7, sr_customer_sk#8, sr_ticket_number#9, sr_return_quantity#10, sr_returned_date_sk#11]

(6) Filter [codegen id : 1]
Input [5]: [sr_item_sk#7, sr_customer_sk#8, sr_ticket_number#9, sr_return_quantity#10, sr_returned_date_sk#11]
Condition : ((isnotnull(sr_customer_sk#8) AND isnotnull(sr_item_sk#7)) AND isnotnull(sr_ticket_number#9))

(7) BroadcastExchange
Input [5]: [sr_item_sk#7, sr_customer_sk#8, sr_ticket_number#9, sr_return_quantity#10, sr_returned_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, bigint, false], input[2, bigint, false]),false), [id=#13]

(8) BroadcastHashJoin [codegen id : 3]
Left keys [3]: [cast(ss_customer_sk#2 as bigint), cast(ss_item_sk#1 as bigint), cast(ss_ticket_number#4 as bigint)]
Right keys [3]: [sr_customer_sk#8, sr_item_sk#7, sr_ticket_number#9]
Join condition: None

(9) Project [codegen id : 3]
Output [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, ss_sold_date_sk#6, sr_item_sk#7, sr_customer_sk#8, sr_return_quantity#10, sr_returned_date_sk#11]
Input [11]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6, sr_item_sk#7, sr_customer_sk#8, sr_ticket_number#9, sr_return_quantity#10, sr_returned_date_sk#11]

(10) Scan parquet default.catalog_sales
Output [4]: [cs_bill_customer_sk#14, cs_item_sk#15, cs_quantity#16, cs_sold_date_sk#17]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#17), dynamicpruningexpression(cs_sold_date_sk#17 IN dynamicpruning#18)]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int>

(11) ColumnarToRow [codegen id : 2]
Input [4]: [cs_bill_customer_sk#14, cs_item_sk#15, cs_quantity#16, cs_sold_date_sk#17]

(12) Filter [codegen id : 2]
Input [4]: [cs_bill_customer_sk#14, cs_item_sk#15, cs_quantity#16, cs_sold_date_sk#17]
Condition : (isnotnull(cs_bill_customer_sk#14) AND isnotnull(cs_item_sk#15))

(13) BroadcastExchange
Input [4]: [cs_bill_customer_sk#14, cs_item_sk#15, cs_quantity#16, cs_sold_date_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint), cast(input[1, int, false] as bigint)),false), [id=#19]

(14) BroadcastHashJoin [codegen id : 3]
Left keys [2]: [sr_customer_sk#8, sr_item_sk#7]
Right keys [2]: [cast(cs_bill_customer_sk#14 as bigint), cast(cs_item_sk#15 as bigint)]
Join condition: None

(15) Project [codegen id : 3]
Output [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, ss_sold_date_sk#6, sr_return_quantity#10, sr_returned_date_sk#11, cs_quantity#16, cs_sold_date_sk#17]
Input [12]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, ss_sold_date_sk#6, sr_item_sk#7, sr_customer_sk#8, sr_return_quantity#10, sr_returned_date_sk#11, cs_bill_customer_sk#14, cs_item_sk#15, cs_quantity#16, cs_sold_date_sk#17]

(16) BroadcastExchange
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, ss_sold_date_sk#6, sr_return_quantity#10, sr_returned_date_sk#11, cs_quantity#16, cs_sold_date_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[3, int, true] as bigint)),false), [id=#20]

(17) Scan parquet default.date_dim
Output [2]: [d_date_sk#21, d_quarter_name#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_quarter_name), EqualTo(d_quarter_name,2001Q1), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_quarter_name:string>

(18) ColumnarToRow
Input [2]: [d_date_sk#21, d_quarter_name#22]

(19) Filter
Input [2]: [d_date_sk#21, d_quarter_name#22]
Condition : ((isnotnull(d_quarter_name#22) AND (d_quarter_name#22 = 2001Q1)) AND isnotnull(d_date_sk#21))

(20) Project
Output [1]: [d_date_sk#21]
Input [2]: [d_date_sk#21, d_quarter_name#22]

(21) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#21]
Join condition: None

(22) Project [codegen id : 4]
Output [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#10, sr_returned_date_sk#11, cs_quantity#16, cs_sold_date_sk#17]
Input [9]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, ss_sold_date_sk#6, sr_return_quantity#10, sr_returned_date_sk#11, cs_quantity#16, cs_sold_date_sk#17, d_date_sk#21]

(23) BroadcastExchange
Input [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#10, sr_returned_date_sk#11, cs_quantity#16, cs_sold_date_sk#17]
Arguments: HashedRelationBroadcastMode(List(input[4, bigint, true]),false), [id=#23]

(24) Scan parquet default.date_dim
Output [2]: [d_date_sk#24, d_quarter_name#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_quarter_name, [2001Q1,2001Q2,2001Q3]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_quarter_name:string>

(25) ColumnarToRow
Input [2]: [d_date_sk#24, d_quarter_name#25]

(26) Filter
Input [2]: [d_date_sk#24, d_quarter_name#25]
Condition : (d_quarter_name#25 IN (2001Q1,2001Q2,2001Q3) AND isnotnull(d_date_sk#24))

(27) Project
Output [1]: [d_date_sk#24]
Input [2]: [d_date_sk#24, d_quarter_name#25]

(28) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [sr_returned_date_sk#11]
Right keys [1]: [cast(d_date_sk#24 as bigint)]
Join condition: None

(29) Project [codegen id : 7]
Output [6]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#10, cs_quantity#16, cs_sold_date_sk#17]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#10, sr_returned_date_sk#11, cs_quantity#16, cs_sold_date_sk#17, d_date_sk#24]

(30) Scan parquet default.date_dim
Output [2]: [d_date_sk#26, d_quarter_name#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_quarter_name, [2001Q1,2001Q2,2001Q3]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_quarter_name:string>

(31) ColumnarToRow [codegen id : 5]
Input [2]: [d_date_sk#26, d_quarter_name#27]

(32) Filter [codegen id : 5]
Input [2]: [d_date_sk#26, d_quarter_name#27]
Condition : (d_quarter_name#27 IN (2001Q1,2001Q2,2001Q3) AND isnotnull(d_date_sk#26))

(33) Project [codegen id : 5]
Output [1]: [d_date_sk#26]
Input [2]: [d_date_sk#26, d_quarter_name#27]

(34) BroadcastExchange
Input [1]: [d_date_sk#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#28]

(35) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [cs_sold_date_sk#17]
Right keys [1]: [d_date_sk#26]
Join condition: None

(36) Project [codegen id : 7]
Output [5]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#10, cs_quantity#16]
Input [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#10, cs_quantity#16, cs_sold_date_sk#17, d_date_sk#26]

(37) Scan parquet default.store
Output [2]: [s_store_sk#29, s_state#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(38) ColumnarToRow [codegen id : 6]
Input [2]: [s_store_sk#29, s_state#30]

(39) Filter [codegen id : 6]
Input [2]: [s_store_sk#29, s_state#30]
Condition : isnotnull(s_store_sk#29)

(40) BroadcastExchange
Input [2]: [s_store_sk#29, s_state#30]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#31]

(41) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#29]
Join condition: None

(42) Project [codegen id : 7]
Output [5]: [ss_item_sk#1, ss_quantity#5, sr_return_quantity#10, cs_quantity#16, s_state#30]
Input [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#10, cs_quantity#16, s_store_sk#29, s_state#30]

(43) Exchange
Input [5]: [ss_item_sk#1, ss_quantity#5, sr_return_quantity#10, cs_quantity#16, s_state#30]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#32]

(44) Sort [codegen id : 8]
Input [5]: [ss_item_sk#1, ss_quantity#5, sr_return_quantity#10, cs_quantity#16, s_state#30]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(45) Scan parquet default.item
Output [3]: [i_item_sk#33, i_item_id#34, i_item_desc#35]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>

(46) ColumnarToRow [codegen id : 9]
Input [3]: [i_item_sk#33, i_item_id#34, i_item_desc#35]

(47) Filter [codegen id : 9]
Input [3]: [i_item_sk#33, i_item_id#34, i_item_desc#35]
Condition : isnotnull(i_item_sk#33)

(48) Exchange
Input [3]: [i_item_sk#33, i_item_id#34, i_item_desc#35]
Arguments: hashpartitioning(i_item_sk#33, 5), ENSURE_REQUIREMENTS, [id=#36]

(49) Sort [codegen id : 10]
Input [3]: [i_item_sk#33, i_item_id#34, i_item_desc#35]
Arguments: [i_item_sk#33 ASC NULLS FIRST], false, 0

(50) SortMergeJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#33]
Join condition: None

(51) Project [codegen id : 11]
Output [6]: [ss_quantity#5, sr_return_quantity#10, cs_quantity#16, s_state#30, i_item_id#34, i_item_desc#35]
Input [8]: [ss_item_sk#1, ss_quantity#5, sr_return_quantity#10, cs_quantity#16, s_state#30, i_item_sk#33, i_item_id#34, i_item_desc#35]

(52) HashAggregate [codegen id : 11]
Input [6]: [ss_quantity#5, sr_return_quantity#10, cs_quantity#16, s_state#30, i_item_id#34, i_item_desc#35]
Keys [3]: [i_item_id#34, i_item_desc#35, s_state#30]
Functions [9]: [partial_count(ss_quantity#5), partial_avg(ss_quantity#5), partial_stddev_samp(cast(ss_quantity#5 as double)), partial_count(sr_return_quantity#10), partial_avg(sr_return_quantity#10), partial_stddev_samp(cast(sr_return_quantity#10 as double)), partial_count(cs_quantity#16), partial_avg(cs_quantity#16), partial_stddev_samp(cast(cs_quantity#16 as double))]
Aggregate Attributes [18]: [count#37, sum#38, count#39, n#40, avg#41, m2#42, count#43, sum#44, count#45, n#46, avg#47, m2#48, count#49, sum#50, count#51, n#52, avg#53, m2#54]
Results [21]: [i_item_id#34, i_item_desc#35, s_state#30, count#55, sum#56, count#57, n#58, avg#59, m2#60, count#61, sum#62, count#63, n#64, avg#65, m2#66, count#67, sum#68, count#69, n#70, avg#71, m2#72]

(53) Exchange
Input [21]: [i_item_id#34, i_item_desc#35, s_state#30, count#55, sum#56, count#57, n#58, avg#59, m2#60, count#61, sum#62, count#63, n#64, avg#65, m2#66, count#67, sum#68, count#69, n#70, avg#71, m2#72]
Arguments: hashpartitioning(i_item_id#34, i_item_desc#35, s_state#30, 5), ENSURE_REQUIREMENTS, [id=#73]

(54) HashAggregate [codegen id : 12]
Input [21]: [i_item_id#34, i_item_desc#35, s_state#30, count#55, sum#56, count#57, n#58, avg#59, m2#60, count#61, sum#62, count#63, n#64, avg#65, m2#66, count#67, sum#68, count#69, n#70, avg#71, m2#72]
Keys [3]: [i_item_id#34, i_item_desc#35, s_state#30]
Functions [9]: [count(ss_quantity#5), avg(ss_quantity#5), stddev_samp(cast(ss_quantity#5 as double)), count(sr_return_quantity#10), avg(sr_return_quantity#10), stddev_samp(cast(sr_return_quantity#10 as double)), count(cs_quantity#16), avg(cs_quantity#16), stddev_samp(cast(cs_quantity#16 as double))]
Aggregate Attributes [9]: [count(ss_quantity#5)#74, avg(ss_quantity#5)#75, stddev_samp(cast(ss_quantity#5 as double))#76, count(sr_return_quantity#10)#77, avg(sr_return_quantity#10)#78, stddev_samp(cast(sr_return_quantity#10 as double))#79, count(cs_quantity#16)#80, avg(cs_quantity#16)#81, stddev_samp(cast(cs_quantity#16 as double))#82]
Results [15]: [i_item_id#34, i_item_desc#35, s_state#30, count(ss_quantity#5)#74 AS store_sales_quantitycount#83, avg(ss_quantity#5)#75 AS store_sales_quantityave#84, stddev_samp(cast(ss_quantity#5 as double))#76 AS store_sales_quantitystdev#85, (stddev_samp(cast(ss_quantity#5 as double))#76 / avg(ss_quantity#5)#75) AS store_sales_quantitycov#86, count(sr_return_quantity#10)#77 AS as_store_returns_quantitycount#87, avg(sr_return_quantity#10)#78 AS as_store_returns_quantityave#88, stddev_samp(cast(sr_return_quantity#10 as double))#79 AS as_store_returns_quantitystdev#89, (stddev_samp(cast(sr_return_quantity#10 as double))#79 / avg(sr_return_quantity#10)#78) AS store_returns_quantitycov#90, count(cs_quantity#16)#80 AS catalog_sales_quantitycount#91, avg(cs_quantity#16)#81 AS catalog_sales_quantityave#92, (stddev_samp(cast(cs_quantity#16 as double))#82 / avg(cs_quantity#16)#81) AS catalog_sales_quantitystdev#93, (stddev_samp(cast(cs_quantity#16 as double))#82 / avg(cs_quantity#16)#81) AS catalog_sales_quantitycov#94]

(55) TakeOrderedAndProject
Input [15]: [i_item_id#34, i_item_desc#35, s_state#30, store_sales_quantitycount#83, store_sales_quantityave#84, store_sales_quantitystdev#85, store_sales_quantitycov#86, as_store_returns_quantitycount#87, as_store_returns_quantityave#88, as_store_returns_quantitystdev#89, store_returns_quantitycov#90, catalog_sales_quantitycount#91, catalog_sales_quantityave#92, catalog_sales_quantitystdev#93, catalog_sales_quantitycov#94]
Arguments: 100, [i_item_id#34 ASC NULLS FIRST, i_item_desc#35 ASC NULLS FIRST, s_state#30 ASC NULLS FIRST], [i_item_id#34, i_item_desc#35, s_state#30, store_sales_quantitycount#83, store_sales_quantityave#84, store_sales_quantitystdev#85, store_sales_quantitycov#86, as_store_returns_quantitycount#87, as_store_returns_quantityave#88, as_store_returns_quantitystdev#89, store_returns_quantitycov#90, catalog_sales_quantitycount#91, catalog_sales_quantityave#92, catalog_sales_quantitystdev#93, catalog_sales_quantitycov#94]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = sr_returned_date_sk#11 IN dynamicpruning#12
ReusedExchange (56)


(56) ReusedExchange [Reuses operator id: 34]
Output [1]: [d_date_sk#24]

Subquery:2 Hosting operator id = 10 Hosting Expression = cs_sold_date_sk#17 IN dynamicpruning#18
ReusedExchange (57)


(57) ReusedExchange [Reuses operator id: 34]
Output [1]: [d_date_sk#26]


