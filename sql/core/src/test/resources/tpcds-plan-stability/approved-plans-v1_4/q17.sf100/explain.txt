== Physical Plan ==
TakeOrderedAndProject (46)
+- * HashAggregate (45)
   +- Exchange (44)
      +- * HashAggregate (43)
         +- * Project (42)
            +- * SortMergeJoin Inner (41)
               :- * Sort (32)
               :  +- Exchange (31)
               :     +- * Project (30)
               :        +- * SortMergeJoin Inner (29)
               :           :- * Sort (20)
               :           :  +- Exchange (19)
               :           :     +- * Project (18)
               :           :        +- * SortMergeJoin Inner (17)
               :           :           :- * Sort (14)
               :           :           :  +- Exchange (13)
               :           :           :     +- * Project (12)
               :           :           :        +- * BroadcastHashJoin Inner BuildRight (11)
               :           :           :           :- * Project (6)
               :           :           :           :  +- * BroadcastHashJoin Inner BuildRight (5)
               :           :           :           :     :- * Filter (3)
               :           :           :           :     :  +- * ColumnarToRow (2)
               :           :           :           :     :     +- Scan parquet spark_catalog.default.store_sales (1)
               :           :           :           :     +- ReusedExchange (4)
               :           :           :           +- BroadcastExchange (10)
               :           :           :              +- * Filter (9)
               :           :           :                 +- * ColumnarToRow (8)
               :           :           :                    +- Scan parquet spark_catalog.default.store (7)
               :           :           +- * Sort (16)
               :           :              +- ReusedExchange (15)
               :           +- * Sort (28)
               :              +- Exchange (27)
               :                 +- * Project (26)
               :                    +- * BroadcastHashJoin Inner BuildRight (25)
               :                       :- * Filter (23)
               :                       :  +- * ColumnarToRow (22)
               :                       :     +- Scan parquet spark_catalog.default.store_returns (21)
               :                       +- ReusedExchange (24)
               +- * Sort (40)
                  +- Exchange (39)
                     +- * Project (38)
                        +- * BroadcastHashJoin Inner BuildRight (37)
                           :- * Filter (35)
                           :  +- * ColumnarToRow (34)
                           :     +- Scan parquet spark_catalog.default.catalog_sales (33)
                           +- ReusedExchange (36)


(1) Scan parquet spark_catalog.default.store_sales
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#6), dynamicpruningexpression(ss_sold_date_sk#6 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_quantity:int>

(2) ColumnarToRow [codegen id : 3]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6]

(3) Filter [codegen id : 3]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6]
Condition : ((((isnotnull(ss_customer_sk#2) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_ticket_number#4)) AND isnotnull(ss_store_sk#3)) AND might_contain(Subquery scalar-subquery#8, [id=#9], xxhash64(ss_item_sk#1, 42), false))

(4) ReusedExchange [Reuses operator id: 58]
Output [1]: [d_date_sk#10]

(5) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#10]
Join type: Inner
Join condition: None

(6) Project [codegen id : 3]
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6, d_date_sk#10]

(7) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#11, s_state#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(8) ColumnarToRow [codegen id : 2]
Input [2]: [s_store_sk#11, s_state#12]

(9) Filter [codegen id : 2]
Input [2]: [s_store_sk#11, s_state#12]
Condition : isnotnull(s_store_sk#11)

(10) BroadcastExchange
Input [2]: [s_store_sk#11, s_state#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(11) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#11]
Join type: Inner
Join condition: None

(12) Project [codegen id : 3]
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_quantity#5, s_state#12]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, s_store_sk#11, s_state#12]

(13) Exchange
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_quantity#5, s_state#12]
Arguments: hashpartitioning(ss_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(14) Sort [codegen id : 4]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_quantity#5, s_state#12]
Arguments: [ss_item_sk#1 ASC NULLS FIRST], false, 0

(15) ReusedExchange [Reuses operator id: 50]
Output [3]: [i_item_sk#13, i_item_id#14, i_item_desc#15]

(16) Sort [codegen id : 6]
Input [3]: [i_item_sk#13, i_item_id#14, i_item_desc#15]
Arguments: [i_item_sk#13 ASC NULLS FIRST], false, 0

(17) SortMergeJoin [codegen id : 7]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#13]
Join type: Inner
Join condition: None

(18) Project [codegen id : 7]
Output [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_quantity#5, s_state#12, i_item_id#14, i_item_desc#15]
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_quantity#5, s_state#12, i_item_sk#13, i_item_id#14, i_item_desc#15]

(19) Exchange
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_quantity#5, s_state#12, i_item_id#14, i_item_desc#15]
Arguments: hashpartitioning(ss_customer_sk#2, ss_item_sk#1, ss_ticket_number#4, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(20) Sort [codegen id : 8]
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_quantity#5, s_state#12, i_item_id#14, i_item_desc#15]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST, ss_ticket_number#4 ASC NULLS FIRST], false, 0

(21) Scan parquet spark_catalog.default.store_returns
Output [5]: [sr_item_sk#16, sr_customer_sk#17, sr_ticket_number#18, sr_return_quantity#19, sr_returned_date_sk#20]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#20), dynamicpruningexpression(sr_returned_date_sk#20 IN dynamicpruning#21)]
PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:int,sr_customer_sk:int,sr_ticket_number:int,sr_return_quantity:int>

(22) ColumnarToRow [codegen id : 10]
Input [5]: [sr_item_sk#16, sr_customer_sk#17, sr_ticket_number#18, sr_return_quantity#19, sr_returned_date_sk#20]

(23) Filter [codegen id : 10]
Input [5]: [sr_item_sk#16, sr_customer_sk#17, sr_ticket_number#18, sr_return_quantity#19, sr_returned_date_sk#20]
Condition : ((isnotnull(sr_customer_sk#17) AND isnotnull(sr_item_sk#16)) AND isnotnull(sr_ticket_number#18))

(24) ReusedExchange [Reuses operator id: 63]
Output [1]: [d_date_sk#22]

(25) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [sr_returned_date_sk#20]
Right keys [1]: [d_date_sk#22]
Join type: Inner
Join condition: None

(26) Project [codegen id : 10]
Output [4]: [sr_item_sk#16, sr_customer_sk#17, sr_ticket_number#18, sr_return_quantity#19]
Input [6]: [sr_item_sk#16, sr_customer_sk#17, sr_ticket_number#18, sr_return_quantity#19, sr_returned_date_sk#20, d_date_sk#22]

(27) Exchange
Input [4]: [sr_item_sk#16, sr_customer_sk#17, sr_ticket_number#18, sr_return_quantity#19]
Arguments: hashpartitioning(sr_customer_sk#17, sr_item_sk#16, sr_ticket_number#18, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(28) Sort [codegen id : 11]
Input [4]: [sr_item_sk#16, sr_customer_sk#17, sr_ticket_number#18, sr_return_quantity#19]
Arguments: [sr_customer_sk#17 ASC NULLS FIRST, sr_item_sk#16 ASC NULLS FIRST, sr_ticket_number#18 ASC NULLS FIRST], false, 0

(29) SortMergeJoin [codegen id : 12]
Left keys [3]: [ss_customer_sk#2, ss_item_sk#1, ss_ticket_number#4]
Right keys [3]: [sr_customer_sk#17, sr_item_sk#16, sr_ticket_number#18]
Join type: Inner
Join condition: None

(30) Project [codegen id : 12]
Output [7]: [ss_quantity#5, s_state#12, i_item_id#14, i_item_desc#15, sr_item_sk#16, sr_customer_sk#17, sr_return_quantity#19]
Input [11]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#4, ss_quantity#5, s_state#12, i_item_id#14, i_item_desc#15, sr_item_sk#16, sr_customer_sk#17, sr_ticket_number#18, sr_return_quantity#19]

(31) Exchange
Input [7]: [ss_quantity#5, s_state#12, i_item_id#14, i_item_desc#15, sr_item_sk#16, sr_customer_sk#17, sr_return_quantity#19]
Arguments: hashpartitioning(sr_customer_sk#17, sr_item_sk#16, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(32) Sort [codegen id : 13]
Input [7]: [ss_quantity#5, s_state#12, i_item_id#14, i_item_desc#15, sr_item_sk#16, sr_customer_sk#17, sr_return_quantity#19]
Arguments: [sr_customer_sk#17 ASC NULLS FIRST, sr_item_sk#16 ASC NULLS FIRST], false, 0

(33) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_bill_customer_sk#23, cs_item_sk#24, cs_quantity#25, cs_sold_date_sk#26]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#26), dynamicpruningexpression(cs_sold_date_sk#26 IN dynamicpruning#21)]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int>

(34) ColumnarToRow [codegen id : 15]
Input [4]: [cs_bill_customer_sk#23, cs_item_sk#24, cs_quantity#25, cs_sold_date_sk#26]

(35) Filter [codegen id : 15]
Input [4]: [cs_bill_customer_sk#23, cs_item_sk#24, cs_quantity#25, cs_sold_date_sk#26]
Condition : (isnotnull(cs_bill_customer_sk#23) AND isnotnull(cs_item_sk#24))

(36) ReusedExchange [Reuses operator id: 63]
Output [1]: [d_date_sk#27]

(37) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [cs_sold_date_sk#26]
Right keys [1]: [d_date_sk#27]
Join type: Inner
Join condition: None

(38) Project [codegen id : 15]
Output [3]: [cs_bill_customer_sk#23, cs_item_sk#24, cs_quantity#25]
Input [5]: [cs_bill_customer_sk#23, cs_item_sk#24, cs_quantity#25, cs_sold_date_sk#26, d_date_sk#27]

(39) Exchange
Input [3]: [cs_bill_customer_sk#23, cs_item_sk#24, cs_quantity#25]
Arguments: hashpartitioning(cs_bill_customer_sk#23, cs_item_sk#24, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(40) Sort [codegen id : 16]
Input [3]: [cs_bill_customer_sk#23, cs_item_sk#24, cs_quantity#25]
Arguments: [cs_bill_customer_sk#23 ASC NULLS FIRST, cs_item_sk#24 ASC NULLS FIRST], false, 0

(41) SortMergeJoin [codegen id : 17]
Left keys [2]: [sr_customer_sk#17, sr_item_sk#16]
Right keys [2]: [cs_bill_customer_sk#23, cs_item_sk#24]
Join type: Inner
Join condition: None

(42) Project [codegen id : 17]
Output [6]: [ss_quantity#5, sr_return_quantity#19, cs_quantity#25, s_state#12, i_item_id#14, i_item_desc#15]
Input [10]: [ss_quantity#5, s_state#12, i_item_id#14, i_item_desc#15, sr_item_sk#16, sr_customer_sk#17, sr_return_quantity#19, cs_bill_customer_sk#23, cs_item_sk#24, cs_quantity#25]

(43) HashAggregate [codegen id : 17]
Input [6]: [ss_quantity#5, sr_return_quantity#19, cs_quantity#25, s_state#12, i_item_id#14, i_item_desc#15]
Keys [3]: [i_item_id#14, i_item_desc#15, s_state#12]
Functions [9]: [partial_count(ss_quantity#5), partial_avg(ss_quantity#5), partial_stddev_samp(cast(ss_quantity#5 as double)), partial_count(sr_return_quantity#19), partial_avg(sr_return_quantity#19), partial_stddev_samp(cast(sr_return_quantity#19 as double)), partial_count(cs_quantity#25), partial_avg(cs_quantity#25), partial_stddev_samp(cast(cs_quantity#25 as double))]
Aggregate Attributes [18]: [count#28, sum#29, count#30, n#31, avg#32, m2#33, count#34, sum#35, count#36, n#37, avg#38, m2#39, count#40, sum#41, count#42, n#43, avg#44, m2#45]
Results [21]: [i_item_id#14, i_item_desc#15, s_state#12, count#46, sum#47, count#48, n#49, avg#50, m2#51, count#52, sum#53, count#54, n#55, avg#56, m2#57, count#58, sum#59, count#60, n#61, avg#62, m2#63]

(44) Exchange
Input [21]: [i_item_id#14, i_item_desc#15, s_state#12, count#46, sum#47, count#48, n#49, avg#50, m2#51, count#52, sum#53, count#54, n#55, avg#56, m2#57, count#58, sum#59, count#60, n#61, avg#62, m2#63]
Arguments: hashpartitioning(i_item_id#14, i_item_desc#15, s_state#12, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(45) HashAggregate [codegen id : 18]
Input [21]: [i_item_id#14, i_item_desc#15, s_state#12, count#46, sum#47, count#48, n#49, avg#50, m2#51, count#52, sum#53, count#54, n#55, avg#56, m2#57, count#58, sum#59, count#60, n#61, avg#62, m2#63]
Keys [3]: [i_item_id#14, i_item_desc#15, s_state#12]
Functions [9]: [count(ss_quantity#5), avg(ss_quantity#5), stddev_samp(cast(ss_quantity#5 as double)), count(sr_return_quantity#19), avg(sr_return_quantity#19), stddev_samp(cast(sr_return_quantity#19 as double)), count(cs_quantity#25), avg(cs_quantity#25), stddev_samp(cast(cs_quantity#25 as double))]
Aggregate Attributes [9]: [count(ss_quantity#5)#64, avg(ss_quantity#5)#65, stddev_samp(cast(ss_quantity#5 as double))#66, count(sr_return_quantity#19)#67, avg(sr_return_quantity#19)#68, stddev_samp(cast(sr_return_quantity#19 as double))#69, count(cs_quantity#25)#70, avg(cs_quantity#25)#71, stddev_samp(cast(cs_quantity#25 as double))#72]
Results [15]: [i_item_id#14, i_item_desc#15, s_state#12, count(ss_quantity#5)#64 AS store_sales_quantitycount#73, avg(ss_quantity#5)#65 AS store_sales_quantityave#74, stddev_samp(cast(ss_quantity#5 as double))#66 AS store_sales_quantitystdev#75, (stddev_samp(cast(ss_quantity#5 as double))#66 / avg(ss_quantity#5)#65) AS store_sales_quantitycov#76, count(sr_return_quantity#19)#67 AS as_store_returns_quantitycount#77, avg(sr_return_quantity#19)#68 AS as_store_returns_quantityave#78, stddev_samp(cast(sr_return_quantity#19 as double))#69 AS as_store_returns_quantitystdev#79, (stddev_samp(cast(sr_return_quantity#19 as double))#69 / avg(sr_return_quantity#19)#68) AS store_returns_quantitycov#80, count(cs_quantity#25)#70 AS catalog_sales_quantitycount#81, avg(cs_quantity#25)#71 AS catalog_sales_quantityave#82, (stddev_samp(cast(cs_quantity#25 as double))#72 / avg(cs_quantity#25)#71) AS catalog_sales_quantitystdev#83, (stddev_samp(cast(cs_quantity#25 as double))#72 / avg(cs_quantity#25)#71) AS catalog_sales_quantitycov#84]

(46) TakeOrderedAndProject
Input [15]: [i_item_id#14, i_item_desc#15, s_state#12, store_sales_quantitycount#73, store_sales_quantityave#74, store_sales_quantitystdev#75, store_sales_quantitycov#76, as_store_returns_quantitycount#77, as_store_returns_quantityave#78, as_store_returns_quantitystdev#79, store_returns_quantitycov#80, catalog_sales_quantitycount#81, catalog_sales_quantityave#82, catalog_sales_quantitystdev#83, catalog_sales_quantitycov#84]
Arguments: 100, [i_item_id#14 ASC NULLS FIRST, i_item_desc#15 ASC NULLS FIRST, s_state#12 ASC NULLS FIRST], [i_item_id#14, i_item_desc#15, s_state#12, store_sales_quantitycount#73, store_sales_quantityave#74, store_sales_quantitystdev#75, store_sales_quantitycov#76, as_store_returns_quantitycount#77, as_store_returns_quantityave#78, as_store_returns_quantitystdev#79, store_returns_quantitycov#80, catalog_sales_quantitycount#81, catalog_sales_quantityave#82, catalog_sales_quantitystdev#83, catalog_sales_quantitycov#84]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#8, [id=#9]
ObjectHashAggregate (53)
+- Exchange (52)
   +- ObjectHashAggregate (51)
      +- Exchange (50)
         +- * Filter (49)
            +- * ColumnarToRow (48)
               +- Scan parquet spark_catalog.default.item (47)


(47) Scan parquet spark_catalog.default.item
Output [3]: [i_item_sk#13, i_item_id#14, i_item_desc#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>

(48) ColumnarToRow [codegen id : 1]
Input [3]: [i_item_sk#13, i_item_id#14, i_item_desc#15]

(49) Filter [codegen id : 1]
Input [3]: [i_item_sk#13, i_item_id#14, i_item_desc#15]
Condition : isnotnull(i_item_sk#13)

(50) Exchange
Input [3]: [i_item_sk#13, i_item_id#14, i_item_desc#15]
Arguments: hashpartitioning(i_item_sk#13, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(51) ObjectHashAggregate
Input [3]: [i_item_sk#13, i_item_id#14, i_item_desc#15]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(i_item_sk#13, 42), 204000, 1632000, 0, 0)]
Aggregate Attributes [1]: [buf#85]
Results [1]: [buf#86]

(52) Exchange
Input [1]: [buf#86]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=9]

(53) ObjectHashAggregate
Input [1]: [buf#86]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(i_item_sk#13, 42), 204000, 1632000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(i_item_sk#13, 42), 204000, 1632000, 0, 0)#87]
Results [1]: [bloom_filter_agg(xxhash64(i_item_sk#13, 42), 204000, 1632000, 0, 0)#87 AS bloomFilter#88]

Subquery:2 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#6 IN dynamicpruning#7
BroadcastExchange (58)
+- * Project (57)
   +- * Filter (56)
      +- * ColumnarToRow (55)
         +- Scan parquet spark_catalog.default.date_dim (54)


(54) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#10, d_quarter_name#89]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_quarter_name), EqualTo(d_quarter_name,2001Q1), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_quarter_name:string>

(55) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#10, d_quarter_name#89]

(56) Filter [codegen id : 1]
Input [2]: [d_date_sk#10, d_quarter_name#89]
Condition : ((isnotnull(d_quarter_name#89) AND (d_quarter_name#89 = 2001Q1)) AND isnotnull(d_date_sk#10))

(57) Project [codegen id : 1]
Output [1]: [d_date_sk#10]
Input [2]: [d_date_sk#10, d_quarter_name#89]

(58) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=10]

Subquery:3 Hosting operator id = 21 Hosting Expression = sr_returned_date_sk#20 IN dynamicpruning#21
BroadcastExchange (63)
+- * Project (62)
   +- * Filter (61)
      +- * ColumnarToRow (60)
         +- Scan parquet spark_catalog.default.date_dim (59)


(59) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#22, d_quarter_name#90]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_quarter_name, [2001Q1,2001Q2,2001Q3]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_quarter_name:string>

(60) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#22, d_quarter_name#90]

(61) Filter [codegen id : 1]
Input [2]: [d_date_sk#22, d_quarter_name#90]
Condition : (d_quarter_name#90 IN (2001Q1,2001Q2,2001Q3) AND isnotnull(d_date_sk#22))

(62) Project [codegen id : 1]
Output [1]: [d_date_sk#22]
Input [2]: [d_date_sk#22, d_quarter_name#90]

(63) BroadcastExchange
Input [1]: [d_date_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=11]

Subquery:4 Hosting operator id = 33 Hosting Expression = cs_sold_date_sk#26 IN dynamicpruning#21


