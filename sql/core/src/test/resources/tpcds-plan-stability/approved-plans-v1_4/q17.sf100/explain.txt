== Physical Plan ==
TakeOrderedAndProject (59)
+- * HashAggregate (58)
   +- Exchange (57)
      +- * HashAggregate (56)
         +- * Project (55)
            +- * SortMergeJoin Inner (54)
               :- * Sort (29)
               :  +- Exchange (28)
               :     +- * Project (27)
               :        +- * SortMergeJoin Inner (26)
               :           :- * Sort (19)
               :           :  +- Exchange (18)
               :           :     +- * Project (17)
               :           :        +- * BroadcastHashJoin Inner BuildRight (16)
               :           :           :- * Project (10)
               :           :           :  +- * BroadcastHashJoin Inner BuildRight (9)
               :           :           :     :- * Filter (3)
               :           :           :     :  +- * ColumnarToRow (2)
               :           :           :     :     +- Scan parquet default.store_sales (1)
               :           :           :     +- BroadcastExchange (8)
               :           :           :        +- * Project (7)
               :           :           :           +- * Filter (6)
               :           :           :              +- * ColumnarToRow (5)
               :           :           :                 +- Scan parquet default.date_dim (4)
               :           :           +- BroadcastExchange (15)
               :           :              +- * Project (14)
               :           :                 +- * Filter (13)
               :           :                    +- * ColumnarToRow (12)
               :           :                       +- Scan parquet default.store (11)
               :           +- * Sort (25)
               :              +- Exchange (24)
               :                 +- * Project (23)
               :                    +- * Filter (22)
               :                       +- * ColumnarToRow (21)
               :                          +- Scan parquet default.item (20)
               +- * Sort (53)
                  +- Exchange (52)
                     +- * Project (51)
                        +- * SortMergeJoin Inner (50)
                           :- * Sort (41)
                           :  +- Exchange (40)
                           :     +- * Project (39)
                           :        +- * BroadcastHashJoin Inner BuildRight (38)
                           :           :- * Filter (32)
                           :           :  +- * ColumnarToRow (31)
                           :           :     +- Scan parquet default.store_returns (30)
                           :           +- BroadcastExchange (37)
                           :              +- * Project (36)
                           :                 +- * Filter (35)
                           :                    +- * ColumnarToRow (34)
                           :                       +- Scan parquet default.date_dim (33)
                           +- * Sort (49)
                              +- Exchange (48)
                                 +- * Project (47)
                                    +- * BroadcastHashJoin Inner BuildRight (46)
                                       :- * Filter (44)
                                       :  +- * ColumnarToRow (43)
                                       :     +- Scan parquet default.catalog_sales (42)
                                       +- ReusedExchange (45)


(1) Scan parquet default.store_sales
Output [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_quantity#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_quantity:int>

(2) ColumnarToRow [codegen id : 3]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_quantity#6]

(3) Filter [codegen id : 3]
Input [6]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_quantity#6]
Condition : ((((isnotnull(ss_customer_sk#3) AND isnotnull(ss_item_sk#2)) AND isnotnull(ss_ticket_number#5)) AND isnotnull(ss_sold_date_sk#1)) AND isnotnull(ss_store_sk#4))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#7, d_quarter_name#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_quarter_name:string>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#7, d_quarter_name#8]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#7, d_quarter_name#8]
Condition : ((rpad(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, d_quarter_name#8, 1, false, true), 6,  ) = 2001Q1) AND isnotnull(d_date_sk#7))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#7]
Input [2]: [d_date_sk#7, d_quarter_name#8]

(8) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#9]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#7]
Join condition: None

(10) Project [codegen id : 3]
Output [5]: [ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_quantity#6]
Input [7]: [ss_sold_date_sk#1, ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_quantity#6, d_date_sk#7]

(11) Scan parquet default.store
Output [2]: [s_store_sk#10, s_state#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [s_store_sk#10, s_state#11]

(13) Filter [codegen id : 2]
Input [2]: [s_store_sk#10, s_state#11]
Condition : isnotnull(s_store_sk#10)

(14) Project [codegen id : 2]
Output [2]: [s_store_sk#10, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#11, 2, false, true) AS s_state#12]
Input [2]: [s_store_sk#10, s_state#11]

(15) BroadcastExchange
Input [2]: [s_store_sk#10, s_state#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13]

(16) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [s_store_sk#10]
Join condition: None

(17) Project [codegen id : 3]
Output [5]: [ss_item_sk#2, ss_customer_sk#3, ss_ticket_number#5, ss_quantity#6, s_state#12]
Input [7]: [ss_item_sk#2, ss_customer_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_quantity#6, s_store_sk#10, s_state#12]

(18) Exchange
Input [5]: [ss_item_sk#2, ss_customer_sk#3, ss_ticket_number#5, ss_quantity#6, s_state#12]
Arguments: hashpartitioning(ss_item_sk#2, 5), ENSURE_REQUIREMENTS, [id=#14]

(19) Sort [codegen id : 4]
Input [5]: [ss_item_sk#2, ss_customer_sk#3, ss_ticket_number#5, ss_quantity#6, s_state#12]
Arguments: [ss_item_sk#2 ASC NULLS FIRST], false, 0

(20) Scan parquet default.item
Output [3]: [i_item_sk#15, i_item_id#16, i_item_desc#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>

(21) ColumnarToRow [codegen id : 5]
Input [3]: [i_item_sk#15, i_item_id#16, i_item_desc#17]

(22) Filter [codegen id : 5]
Input [3]: [i_item_sk#15, i_item_id#16, i_item_desc#17]
Condition : isnotnull(i_item_sk#15)

(23) Project [codegen id : 5]
Output [3]: [i_item_sk#15, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_item_id#16, 16, false, true) AS i_item_id#18, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, i_item_desc#17, 200, false, true) AS i_item_desc#19]
Input [3]: [i_item_sk#15, i_item_id#16, i_item_desc#17]

(24) Exchange
Input [3]: [i_item_sk#15, i_item_id#18, i_item_desc#19]
Arguments: hashpartitioning(i_item_sk#15, 5), ENSURE_REQUIREMENTS, [id=#20]

(25) Sort [codegen id : 6]
Input [3]: [i_item_sk#15, i_item_id#18, i_item_desc#19]
Arguments: [i_item_sk#15 ASC NULLS FIRST], false, 0

(26) SortMergeJoin [codegen id : 7]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#15]
Join condition: None

(27) Project [codegen id : 7]
Output [7]: [ss_item_sk#2, ss_customer_sk#3, ss_ticket_number#5, ss_quantity#6, s_state#12, i_item_id#18, i_item_desc#19]
Input [8]: [ss_item_sk#2, ss_customer_sk#3, ss_ticket_number#5, ss_quantity#6, s_state#12, i_item_sk#15, i_item_id#18, i_item_desc#19]

(28) Exchange
Input [7]: [ss_item_sk#2, ss_customer_sk#3, ss_ticket_number#5, ss_quantity#6, s_state#12, i_item_id#18, i_item_desc#19]
Arguments: hashpartitioning(cast(ss_customer_sk#3 as bigint), cast(ss_item_sk#2 as bigint), cast(ss_ticket_number#5 as bigint), 5), ENSURE_REQUIREMENTS, [id=#21]

(29) Sort [codegen id : 8]
Input [7]: [ss_item_sk#2, ss_customer_sk#3, ss_ticket_number#5, ss_quantity#6, s_state#12, i_item_id#18, i_item_desc#19]
Arguments: [cast(ss_customer_sk#3 as bigint) ASC NULLS FIRST, cast(ss_item_sk#2 as bigint) ASC NULLS FIRST, cast(ss_ticket_number#5 as bigint) ASC NULLS FIRST], false, 0

(30) Scan parquet default.store_returns
Output [5]: [sr_returned_date_sk#22, sr_item_sk#23, sr_customer_sk#24, sr_ticket_number#25, sr_return_quantity#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number), IsNotNull(sr_returned_date_sk)]
ReadSchema: struct<sr_returned_date_sk:bigint,sr_item_sk:bigint,sr_customer_sk:bigint,sr_ticket_number:bigint,sr_return_quantity:int>

(31) ColumnarToRow [codegen id : 10]
Input [5]: [sr_returned_date_sk#22, sr_item_sk#23, sr_customer_sk#24, sr_ticket_number#25, sr_return_quantity#26]

(32) Filter [codegen id : 10]
Input [5]: [sr_returned_date_sk#22, sr_item_sk#23, sr_customer_sk#24, sr_ticket_number#25, sr_return_quantity#26]
Condition : (((isnotnull(sr_customer_sk#24) AND isnotnull(sr_item_sk#23)) AND isnotnull(sr_ticket_number#25)) AND isnotnull(sr_returned_date_sk#22))

(33) Scan parquet default.date_dim
Output [2]: [d_date_sk#27, d_quarter_name#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_quarter_name:string>

(34) ColumnarToRow [codegen id : 9]
Input [2]: [d_date_sk#27, d_quarter_name#28]

(35) Filter [codegen id : 9]
Input [2]: [d_date_sk#27, d_quarter_name#28]
Condition : (rpad(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, d_quarter_name#28, 1, false, true), 6,  ) IN (2001Q1,2001Q2,2001Q3) AND isnotnull(d_date_sk#27))

(36) Project [codegen id : 9]
Output [1]: [d_date_sk#27]
Input [2]: [d_date_sk#27, d_quarter_name#28]

(37) BroadcastExchange
Input [1]: [d_date_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#29]

(38) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [sr_returned_date_sk#22]
Right keys [1]: [cast(d_date_sk#27 as bigint)]
Join condition: None

(39) Project [codegen id : 10]
Output [4]: [sr_item_sk#23, sr_customer_sk#24, sr_ticket_number#25, sr_return_quantity#26]
Input [6]: [sr_returned_date_sk#22, sr_item_sk#23, sr_customer_sk#24, sr_ticket_number#25, sr_return_quantity#26, d_date_sk#27]

(40) Exchange
Input [4]: [sr_item_sk#23, sr_customer_sk#24, sr_ticket_number#25, sr_return_quantity#26]
Arguments: hashpartitioning(sr_customer_sk#24, sr_item_sk#23, 5), ENSURE_REQUIREMENTS, [id=#30]

(41) Sort [codegen id : 11]
Input [4]: [sr_item_sk#23, sr_customer_sk#24, sr_ticket_number#25, sr_return_quantity#26]
Arguments: [sr_customer_sk#24 ASC NULLS FIRST, sr_item_sk#23 ASC NULLS FIRST], false, 0

(42) Scan parquet default.catalog_sales
Output [4]: [cs_sold_date_sk#31, cs_bill_customer_sk#32, cs_item_sk#33, cs_quantity#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int>

(43) ColumnarToRow [codegen id : 13]
Input [4]: [cs_sold_date_sk#31, cs_bill_customer_sk#32, cs_item_sk#33, cs_quantity#34]

(44) Filter [codegen id : 13]
Input [4]: [cs_sold_date_sk#31, cs_bill_customer_sk#32, cs_item_sk#33, cs_quantity#34]
Condition : ((isnotnull(cs_bill_customer_sk#32) AND isnotnull(cs_item_sk#33)) AND isnotnull(cs_sold_date_sk#31))

(45) ReusedExchange [Reuses operator id: 37]
Output [1]: [d_date_sk#35]

(46) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [cs_sold_date_sk#31]
Right keys [1]: [d_date_sk#35]
Join condition: None

(47) Project [codegen id : 13]
Output [3]: [cs_bill_customer_sk#32, cs_item_sk#33, cs_quantity#34]
Input [5]: [cs_sold_date_sk#31, cs_bill_customer_sk#32, cs_item_sk#33, cs_quantity#34, d_date_sk#35]

(48) Exchange
Input [3]: [cs_bill_customer_sk#32, cs_item_sk#33, cs_quantity#34]
Arguments: hashpartitioning(cast(cs_bill_customer_sk#32 as bigint), cast(cs_item_sk#33 as bigint), 5), ENSURE_REQUIREMENTS, [id=#36]

(49) Sort [codegen id : 14]
Input [3]: [cs_bill_customer_sk#32, cs_item_sk#33, cs_quantity#34]
Arguments: [cast(cs_bill_customer_sk#32 as bigint) ASC NULLS FIRST, cast(cs_item_sk#33 as bigint) ASC NULLS FIRST], false, 0

(50) SortMergeJoin [codegen id : 15]
Left keys [2]: [sr_customer_sk#24, sr_item_sk#23]
Right keys [2]: [cast(cs_bill_customer_sk#32 as bigint), cast(cs_item_sk#33 as bigint)]
Join condition: None

(51) Project [codegen id : 15]
Output [5]: [sr_item_sk#23, sr_customer_sk#24, sr_ticket_number#25, sr_return_quantity#26, cs_quantity#34]
Input [7]: [sr_item_sk#23, sr_customer_sk#24, sr_ticket_number#25, sr_return_quantity#26, cs_bill_customer_sk#32, cs_item_sk#33, cs_quantity#34]

(52) Exchange
Input [5]: [sr_item_sk#23, sr_customer_sk#24, sr_ticket_number#25, sr_return_quantity#26, cs_quantity#34]
Arguments: hashpartitioning(sr_customer_sk#24, sr_item_sk#23, sr_ticket_number#25, 5), ENSURE_REQUIREMENTS, [id=#37]

(53) Sort [codegen id : 16]
Input [5]: [sr_item_sk#23, sr_customer_sk#24, sr_ticket_number#25, sr_return_quantity#26, cs_quantity#34]
Arguments: [sr_customer_sk#24 ASC NULLS FIRST, sr_item_sk#23 ASC NULLS FIRST, sr_ticket_number#25 ASC NULLS FIRST], false, 0

(54) SortMergeJoin [codegen id : 17]
Left keys [3]: [cast(ss_customer_sk#3 as bigint), cast(ss_item_sk#2 as bigint), cast(ss_ticket_number#5 as bigint)]
Right keys [3]: [sr_customer_sk#24, sr_item_sk#23, sr_ticket_number#25]
Join condition: None

(55) Project [codegen id : 17]
Output [6]: [ss_quantity#6, sr_return_quantity#26, cs_quantity#34, s_state#12, i_item_id#18, i_item_desc#19]
Input [12]: [ss_item_sk#2, ss_customer_sk#3, ss_ticket_number#5, ss_quantity#6, s_state#12, i_item_id#18, i_item_desc#19, sr_item_sk#23, sr_customer_sk#24, sr_ticket_number#25, sr_return_quantity#26, cs_quantity#34]

(56) HashAggregate [codegen id : 17]
Input [6]: [ss_quantity#6, sr_return_quantity#26, cs_quantity#34, s_state#12, i_item_id#18, i_item_desc#19]
Keys [3]: [i_item_id#18, i_item_desc#19, s_state#12]
Functions [9]: [partial_count(ss_quantity#6), partial_avg(cast(ss_quantity#6 as bigint)), partial_stddev_samp(cast(ss_quantity#6 as double)), partial_count(sr_return_quantity#26), partial_avg(cast(sr_return_quantity#26 as bigint)), partial_stddev_samp(cast(sr_return_quantity#26 as double)), partial_count(cs_quantity#34), partial_avg(cast(cs_quantity#34 as bigint)), partial_stddev_samp(cast(cs_quantity#34 as double))]
Aggregate Attributes [18]: [count#38, sum#39, count#40, n#41, avg#42, m2#43, count#44, sum#45, count#46, n#47, avg#48, m2#49, count#50, sum#51, count#52, n#53, avg#54, m2#55]
Results [21]: [i_item_id#18, i_item_desc#19, s_state#12, count#56, sum#57, count#58, n#59, avg#60, m2#61, count#62, sum#63, count#64, n#65, avg#66, m2#67, count#68, sum#69, count#70, n#71, avg#72, m2#73]

(57) Exchange
Input [21]: [i_item_id#18, i_item_desc#19, s_state#12, count#56, sum#57, count#58, n#59, avg#60, m2#61, count#62, sum#63, count#64, n#65, avg#66, m2#67, count#68, sum#69, count#70, n#71, avg#72, m2#73]
Arguments: hashpartitioning(i_item_id#18, i_item_desc#19, s_state#12, 5), ENSURE_REQUIREMENTS, [id=#74]

(58) HashAggregate [codegen id : 18]
Input [21]: [i_item_id#18, i_item_desc#19, s_state#12, count#56, sum#57, count#58, n#59, avg#60, m2#61, count#62, sum#63, count#64, n#65, avg#66, m2#67, count#68, sum#69, count#70, n#71, avg#72, m2#73]
Keys [3]: [i_item_id#18, i_item_desc#19, s_state#12]
Functions [9]: [count(ss_quantity#6), avg(cast(ss_quantity#6 as bigint)), stddev_samp(cast(ss_quantity#6 as double)), count(sr_return_quantity#26), avg(cast(sr_return_quantity#26 as bigint)), stddev_samp(cast(sr_return_quantity#26 as double)), count(cs_quantity#34), avg(cast(cs_quantity#34 as bigint)), stddev_samp(cast(cs_quantity#34 as double))]
Aggregate Attributes [9]: [count(ss_quantity#6)#75, avg(cast(ss_quantity#6 as bigint))#76, stddev_samp(cast(ss_quantity#6 as double))#77, count(sr_return_quantity#26)#78, avg(cast(sr_return_quantity#26 as bigint))#79, stddev_samp(cast(sr_return_quantity#26 as double))#80, count(cs_quantity#34)#81, avg(cast(cs_quantity#34 as bigint))#82, stddev_samp(cast(cs_quantity#34 as double))#83]
Results [15]: [i_item_id#18, i_item_desc#19, s_state#12, count(ss_quantity#6)#75 AS store_sales_quantitycount#84, avg(cast(ss_quantity#6 as bigint))#76 AS store_sales_quantityave#85, stddev_samp(cast(ss_quantity#6 as double))#77 AS store_sales_quantitystdev#86, (stddev_samp(cast(ss_quantity#6 as double))#77 / avg(cast(ss_quantity#6 as bigint))#76) AS store_sales_quantitycov#87, count(sr_return_quantity#26)#78 AS as_store_returns_quantitycount#88, avg(cast(sr_return_quantity#26 as bigint))#79 AS as_store_returns_quantityave#89, stddev_samp(cast(sr_return_quantity#26 as double))#80 AS as_store_returns_quantitystdev#90, (stddev_samp(cast(sr_return_quantity#26 as double))#80 / avg(cast(sr_return_quantity#26 as bigint))#79) AS store_returns_quantitycov#91, count(cs_quantity#34)#81 AS catalog_sales_quantitycount#92, avg(cast(cs_quantity#34 as bigint))#82 AS catalog_sales_quantityave#93, (stddev_samp(cast(cs_quantity#34 as double))#83 / avg(cast(cs_quantity#34 as bigint))#82) AS catalog_sales_quantitystdev#94, (stddev_samp(cast(cs_quantity#34 as double))#83 / avg(cast(cs_quantity#34 as bigint))#82) AS catalog_sales_quantitycov#95]

(59) TakeOrderedAndProject
Input [15]: [i_item_id#18, i_item_desc#19, s_state#12, store_sales_quantitycount#84, store_sales_quantityave#85, store_sales_quantitystdev#86, store_sales_quantitycov#87, as_store_returns_quantitycount#88, as_store_returns_quantityave#89, as_store_returns_quantitystdev#90, store_returns_quantitycov#91, catalog_sales_quantitycount#92, catalog_sales_quantityave#93, catalog_sales_quantitystdev#94, catalog_sales_quantitycov#95]
Arguments: 100, [i_item_id#18 ASC NULLS FIRST, i_item_desc#19 ASC NULLS FIRST, s_state#12 ASC NULLS FIRST], [i_item_id#18, i_item_desc#19, s_state#12, store_sales_quantitycount#84, store_sales_quantityave#85, store_sales_quantitystdev#86, store_sales_quantitycov#87, as_store_returns_quantitycount#88, as_store_returns_quantityave#89, as_store_returns_quantitystdev#90, store_returns_quantitycov#91, catalog_sales_quantitycount#92, catalog_sales_quantityave#93, catalog_sales_quantitystdev#94, catalog_sales_quantitycov#95]

