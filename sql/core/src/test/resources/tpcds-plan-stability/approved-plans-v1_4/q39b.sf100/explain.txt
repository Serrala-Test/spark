== Physical Plan ==
* Sort (43)
+- Exchange (42)
   +- * SortMergeJoin Inner (41)
      :- * Sort (22)
      :  +- Exchange (21)
      :     +- * Project (20)
      :        +- * Filter (19)
      :           +- * HashAggregate (18)
      :              +- Exchange (17)
      :                 +- * HashAggregate (16)
      :                    +- * Project (15)
      :                       +- * BroadcastHashJoin Inner BuildRight (14)
      :                          :- * Project (10)
      :                          :  +- * BroadcastHashJoin Inner BuildRight (9)
      :                          :     :- * Project (5)
      :                          :     :  +- * BroadcastHashJoin Inner BuildRight (4)
      :                          :     :     :- * ColumnarToRow (2)
      :                          :     :     :  +- Scan parquet default.inventory (1)
      :                          :     :     +- ReusedExchange (3)
      :                          :     +- BroadcastExchange (8)
      :                          :        +- * ColumnarToRow (7)
      :                          :           +- Scan parquet default.item (6)
      :                          +- BroadcastExchange (13)
      :                             +- * ColumnarToRow (12)
      :                                +- Scan parquet default.warehouse (11)
      +- * Sort (40)
         +- Exchange (39)
            +- * Project (38)
               +- * Filter (37)
                  +- * HashAggregate (36)
                     +- Exchange (35)
                        +- * HashAggregate (34)
                           +- * Project (33)
                              +- * BroadcastHashJoin Inner BuildRight (32)
                                 :- * Project (30)
                                 :  +- * BroadcastHashJoin Inner BuildRight (29)
                                 :     :- * Project (27)
                                 :     :  +- * BroadcastHashJoin Inner BuildRight (26)
                                 :     :     :- * ColumnarToRow (24)
                                 :     :     :  +- Scan parquet default.inventory (23)
                                 :     :     +- ReusedExchange (25)
                                 :     +- ReusedExchange (28)
                                 +- ReusedExchange (31)


(1) Scan parquet default.inventory
Output [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/inventory]
PartitionFilters: [dynamicpruningexpression(inv_date_sk#4 IN dynamicpruning#5)]
ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(2) ColumnarToRow [codegen id : 4]
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]

(3) ReusedExchange [Reuses operator id: 48]
Output [2]: [d_date_sk#6, d_moy#7]

(4) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_date_sk#4]
Right keys [1]: [d_date_sk#6]
Join condition: None

(5) Project [codegen id : 4]
Output [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, d_moy#7]
Input [6]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, d_date_sk#6, d_moy#7]

(6) Scan parquet default.item
Output [1]: [i_item_sk#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
ReadSchema: struct<i_item_sk:int>

(7) ColumnarToRow [codegen id : 2]
Input [1]: [i_item_sk#8]

(8) BroadcastExchange
Input [1]: [i_item_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_item_sk#1]
Right keys [1]: [i_item_sk#8]
Join condition: None

(10) Project [codegen id : 4]
Output [4]: [inv_warehouse_sk#2, inv_quantity_on_hand#3, d_moy#7, i_item_sk#8]
Input [5]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, d_moy#7, i_item_sk#8]

(11) Scan parquet default.warehouse
Output [2]: [w_warehouse_sk#10, w_warehouse_name#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>

(12) ColumnarToRow [codegen id : 3]
Input [2]: [w_warehouse_sk#10, w_warehouse_name#11]

(13) BroadcastExchange
Input [2]: [w_warehouse_sk#10, w_warehouse_name#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#12]

(14) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_warehouse_sk#2]
Right keys [1]: [w_warehouse_sk#10]
Join condition: None

(15) Project [codegen id : 4]
Output [5]: [inv_quantity_on_hand#3, i_item_sk#8, w_warehouse_sk#10, w_warehouse_name#11, d_moy#7]
Input [6]: [inv_warehouse_sk#2, inv_quantity_on_hand#3, d_moy#7, i_item_sk#8, w_warehouse_sk#10, w_warehouse_name#11]

(16) HashAggregate [codegen id : 4]
Input [5]: [inv_quantity_on_hand#3, i_item_sk#8, w_warehouse_sk#10, w_warehouse_name#11, d_moy#7]
Keys [4]: [w_warehouse_name#11, w_warehouse_sk#10, i_item_sk#8, d_moy#7]
Functions [2]: [partial_stddev_samp(cast(inv_quantity_on_hand#3 as double)), partial_avg(inv_quantity_on_hand#3)]
Aggregate Attributes [5]: [n#13, avg#14, m2#15, sum#16, count#17]
Results [9]: [w_warehouse_name#11, w_warehouse_sk#10, i_item_sk#8, d_moy#7, n#18, avg#19, m2#20, sum#21, count#22]

(17) Exchange
Input [9]: [w_warehouse_name#11, w_warehouse_sk#10, i_item_sk#8, d_moy#7, n#18, avg#19, m2#20, sum#21, count#22]
Arguments: hashpartitioning(w_warehouse_name#11, w_warehouse_sk#10, i_item_sk#8, d_moy#7, 5), ENSURE_REQUIREMENTS, [id=#23]

(18) HashAggregate [codegen id : 5]
Input [9]: [w_warehouse_name#11, w_warehouse_sk#10, i_item_sk#8, d_moy#7, n#18, avg#19, m2#20, sum#21, count#22]
Keys [4]: [w_warehouse_name#11, w_warehouse_sk#10, i_item_sk#8, d_moy#7]
Functions [2]: [stddev_samp(cast(inv_quantity_on_hand#3 as double)), avg(inv_quantity_on_hand#3)]
Aggregate Attributes [2]: [stddev_samp(cast(inv_quantity_on_hand#3 as double))#24, avg(inv_quantity_on_hand#3)#25]
Results [5]: [w_warehouse_sk#10, i_item_sk#8, d_moy#7, stddev_samp(cast(inv_quantity_on_hand#3 as double))#24 AS stdev#26, avg(inv_quantity_on_hand#3)#25 AS mean#27]

(19) Filter [codegen id : 5]
Input [5]: [w_warehouse_sk#10, i_item_sk#8, d_moy#7, stdev#26, mean#27]
Condition : ((isnotnull(mean#27) AND isnotnull(stdev#26)) AND ((NOT (mean#27 = 0.0) AND ((stdev#26 / mean#27) > 1.0)) AND ((stdev#26 / mean#27) > 1.5)))

(20) Project [codegen id : 5]
Output [5]: [w_warehouse_sk#10, i_item_sk#8, d_moy#7, mean#27, CASE WHEN (mean#27 = 0.0) THEN null ELSE (stdev#26 / mean#27) END AS cov#28]
Input [5]: [w_warehouse_sk#10, i_item_sk#8, d_moy#7, stdev#26, mean#27]

(21) Exchange
Input [5]: [w_warehouse_sk#10, i_item_sk#8, d_moy#7, mean#27, cov#28]
Arguments: hashpartitioning(i_item_sk#8, w_warehouse_sk#10, 5), ENSURE_REQUIREMENTS, [id=#29]

(22) Sort [codegen id : 6]
Input [5]: [w_warehouse_sk#10, i_item_sk#8, d_moy#7, mean#27, cov#28]
Arguments: [i_item_sk#8 ASC NULLS FIRST, w_warehouse_sk#10 ASC NULLS FIRST], false, 0

(23) Scan parquet default.inventory
Output [4]: [inv_item_sk#30, inv_warehouse_sk#31, inv_quantity_on_hand#32, inv_date_sk#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/inventory]
PartitionFilters: [dynamicpruningexpression(inv_date_sk#33 IN dynamicpruning#34)]
ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(24) ColumnarToRow [codegen id : 10]
Input [4]: [inv_item_sk#30, inv_warehouse_sk#31, inv_quantity_on_hand#32, inv_date_sk#33]

(25) ReusedExchange [Reuses operator id: 53]
Output [2]: [d_date_sk#35, d_moy#36]

(26) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [inv_date_sk#33]
Right keys [1]: [d_date_sk#35]
Join condition: None

(27) Project [codegen id : 10]
Output [4]: [inv_item_sk#30, inv_warehouse_sk#31, inv_quantity_on_hand#32, d_moy#36]
Input [6]: [inv_item_sk#30, inv_warehouse_sk#31, inv_quantity_on_hand#32, inv_date_sk#33, d_date_sk#35, d_moy#36]

(28) ReusedExchange [Reuses operator id: 8]
Output [1]: [i_item_sk#37]

(29) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [inv_item_sk#30]
Right keys [1]: [i_item_sk#37]
Join condition: None

(30) Project [codegen id : 10]
Output [4]: [inv_warehouse_sk#31, inv_quantity_on_hand#32, d_moy#36, i_item_sk#37]
Input [5]: [inv_item_sk#30, inv_warehouse_sk#31, inv_quantity_on_hand#32, d_moy#36, i_item_sk#37]

(31) ReusedExchange [Reuses operator id: 13]
Output [2]: [w_warehouse_sk#38, w_warehouse_name#39]

(32) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [inv_warehouse_sk#31]
Right keys [1]: [w_warehouse_sk#38]
Join condition: None

(33) Project [codegen id : 10]
Output [5]: [inv_quantity_on_hand#32, i_item_sk#37, w_warehouse_sk#38, w_warehouse_name#39, d_moy#36]
Input [6]: [inv_warehouse_sk#31, inv_quantity_on_hand#32, d_moy#36, i_item_sk#37, w_warehouse_sk#38, w_warehouse_name#39]

(34) HashAggregate [codegen id : 10]
Input [5]: [inv_quantity_on_hand#32, i_item_sk#37, w_warehouse_sk#38, w_warehouse_name#39, d_moy#36]
Keys [4]: [w_warehouse_name#39, w_warehouse_sk#38, i_item_sk#37, d_moy#36]
Functions [2]: [partial_stddev_samp(cast(inv_quantity_on_hand#32 as double)), partial_avg(inv_quantity_on_hand#32)]
Aggregate Attributes [5]: [n#40, avg#41, m2#42, sum#43, count#44]
Results [9]: [w_warehouse_name#39, w_warehouse_sk#38, i_item_sk#37, d_moy#36, n#45, avg#46, m2#47, sum#48, count#49]

(35) Exchange
Input [9]: [w_warehouse_name#39, w_warehouse_sk#38, i_item_sk#37, d_moy#36, n#45, avg#46, m2#47, sum#48, count#49]
Arguments: hashpartitioning(w_warehouse_name#39, w_warehouse_sk#38, i_item_sk#37, d_moy#36, 5), ENSURE_REQUIREMENTS, [id=#50]

(36) HashAggregate [codegen id : 11]
Input [9]: [w_warehouse_name#39, w_warehouse_sk#38, i_item_sk#37, d_moy#36, n#45, avg#46, m2#47, sum#48, count#49]
Keys [4]: [w_warehouse_name#39, w_warehouse_sk#38, i_item_sk#37, d_moy#36]
Functions [2]: [stddev_samp(cast(inv_quantity_on_hand#32 as double)), avg(inv_quantity_on_hand#32)]
Aggregate Attributes [2]: [stddev_samp(cast(inv_quantity_on_hand#32 as double))#51, avg(inv_quantity_on_hand#32)#52]
Results [5]: [w_warehouse_sk#38, i_item_sk#37, d_moy#36, stddev_samp(cast(inv_quantity_on_hand#32 as double))#51 AS stdev#53, avg(inv_quantity_on_hand#32)#52 AS mean#54]

(37) Filter [codegen id : 11]
Input [5]: [w_warehouse_sk#38, i_item_sk#37, d_moy#36, stdev#53, mean#54]
Condition : ((isnotnull(mean#54) AND isnotnull(stdev#53)) AND (NOT (mean#54 = 0.0) AND ((stdev#53 / mean#54) > 1.0)))

(38) Project [codegen id : 11]
Output [5]: [w_warehouse_sk#38, i_item_sk#37, d_moy#36, mean#54, CASE WHEN (mean#54 = 0.0) THEN null ELSE (stdev#53 / mean#54) END AS cov#55]
Input [5]: [w_warehouse_sk#38, i_item_sk#37, d_moy#36, stdev#53, mean#54]

(39) Exchange
Input [5]: [w_warehouse_sk#38, i_item_sk#37, d_moy#36, mean#54, cov#55]
Arguments: hashpartitioning(i_item_sk#37, w_warehouse_sk#38, 5), ENSURE_REQUIREMENTS, [id=#56]

(40) Sort [codegen id : 12]
Input [5]: [w_warehouse_sk#38, i_item_sk#37, d_moy#36, mean#54, cov#55]
Arguments: [i_item_sk#37 ASC NULLS FIRST, w_warehouse_sk#38 ASC NULLS FIRST], false, 0

(41) SortMergeJoin [codegen id : 13]
Left keys [2]: [i_item_sk#8, w_warehouse_sk#10]
Right keys [2]: [i_item_sk#37, w_warehouse_sk#38]
Join condition: None

(42) Exchange
Input [10]: [w_warehouse_sk#10, i_item_sk#8, d_moy#7, mean#27, cov#28, w_warehouse_sk#38, i_item_sk#37, d_moy#36, mean#54, cov#55]
Arguments: rangepartitioning(w_warehouse_sk#10 ASC NULLS FIRST, i_item_sk#8 ASC NULLS FIRST, d_moy#7 ASC NULLS FIRST, mean#27 ASC NULLS FIRST, cov#28 ASC NULLS FIRST, d_moy#36 ASC NULLS FIRST, mean#54 ASC NULLS FIRST, cov#55 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [id=#57]

(43) Sort [codegen id : 14]
Input [10]: [w_warehouse_sk#10, i_item_sk#8, d_moy#7, mean#27, cov#28, w_warehouse_sk#38, i_item_sk#37, d_moy#36, mean#54, cov#55]
Arguments: [w_warehouse_sk#10 ASC NULLS FIRST, i_item_sk#8 ASC NULLS FIRST, d_moy#7 ASC NULLS FIRST, mean#27 ASC NULLS FIRST, cov#28 ASC NULLS FIRST, d_moy#36 ASC NULLS FIRST, mean#54 ASC NULLS FIRST, cov#55 ASC NULLS FIRST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = inv_date_sk#4 IN dynamicpruning#5
BroadcastExchange (48)
+- * Project (47)
   +- * Filter (46)
      +- * ColumnarToRow (45)
         +- Scan parquet default.date_dim (44)


(44) Scan parquet default.date_dim
Output [3]: [d_date_sk#6, d_year#58, d_moy#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [EqualTo(d_year,2001), EqualTo(d_moy,1)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(45) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#6, d_year#58, d_moy#7]

(46) Filter [codegen id : 1]
Input [3]: [d_date_sk#6, d_year#58, d_moy#7]
Condition : ((d_year#58 = 2001) AND (d_moy#7 = 1))

(47) Project [codegen id : 1]
Output [2]: [d_date_sk#6, d_moy#7]
Input [3]: [d_date_sk#6, d_year#58, d_moy#7]

(48) BroadcastExchange
Input [2]: [d_date_sk#6, d_moy#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#59]

Subquery:2 Hosting operator id = 23 Hosting Expression = inv_date_sk#33 IN dynamicpruning#34
BroadcastExchange (53)
+- * Project (52)
   +- * Filter (51)
      +- * ColumnarToRow (50)
         +- Scan parquet default.date_dim (49)


(49) Scan parquet default.date_dim
Output [3]: [d_date_sk#35, d_year#60, d_moy#36]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [EqualTo(d_year,2001), EqualTo(d_moy,2)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(50) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#35, d_year#60, d_moy#36]

(51) Filter [codegen id : 1]
Input [3]: [d_date_sk#35, d_year#60, d_moy#36]
Condition : ((d_year#60 = 2001) AND (d_moy#36 = 2))

(52) Project [codegen id : 1]
Output [2]: [d_date_sk#35, d_moy#36]
Input [3]: [d_date_sk#35, d_year#60, d_moy#36]

(53) BroadcastExchange
Input [2]: [d_date_sk#35, d_moy#36]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#61]


