== Physical Plan ==
* Sort (56)
+- Exchange (55)
   +- * SortMergeJoin Inner (54)
      :- * Sort (30)
      :  +- Exchange (29)
      :     +- * Project (28)
      :        +- * Filter (27)
      :           +- * HashAggregate (26)
      :              +- Exchange (25)
      :                 +- * HashAggregate (24)
      :                    +- * Project (23)
      :                       +- * BroadcastHashJoin Inner BuildRight (22)
      :                          :- * Project (16)
      :                          :  +- * BroadcastHashJoin Inner BuildRight (15)
      :                          :     :- * Project (10)
      :                          :     :  +- * BroadcastHashJoin Inner BuildRight (9)
      :                          :     :     :- * Filter (3)
      :                          :     :     :  +- * ColumnarToRow (2)
      :                          :     :     :     +- Scan parquet default.inventory (1)
      :                          :     :     +- BroadcastExchange (8)
      :                          :     :        +- * Project (7)
      :                          :     :           +- * Filter (6)
      :                          :     :              +- * ColumnarToRow (5)
      :                          :     :                 +- Scan parquet default.date_dim (4)
      :                          :     +- BroadcastExchange (14)
      :                          :        +- * Filter (13)
      :                          :           +- * ColumnarToRow (12)
      :                          :              +- Scan parquet default.item (11)
      :                          +- BroadcastExchange (21)
      :                             +- * Project (20)
      :                                +- * Filter (19)
      :                                   +- * ColumnarToRow (18)
      :                                      +- Scan parquet default.warehouse (17)
      +- * Sort (53)
         +- Exchange (52)
            +- * Project (51)
               +- * Filter (50)
                  +- * HashAggregate (49)
                     +- Exchange (48)
                        +- * HashAggregate (47)
                           +- * Project (46)
                              +- * BroadcastHashJoin Inner BuildRight (45)
                                 :- * Project (43)
                                 :  +- * BroadcastHashJoin Inner BuildRight (42)
                                 :     :- * Project (40)
                                 :     :  +- * BroadcastHashJoin Inner BuildRight (39)
                                 :     :     :- * Filter (33)
                                 :     :     :  +- * ColumnarToRow (32)
                                 :     :     :     +- Scan parquet default.inventory (31)
                                 :     :     +- BroadcastExchange (38)
                                 :     :        +- * Project (37)
                                 :     :           +- * Filter (36)
                                 :     :              +- * ColumnarToRow (35)
                                 :     :                 +- Scan parquet default.date_dim (34)
                                 :     +- ReusedExchange (41)
                                 +- ReusedExchange (44)


(1) Scan parquet default.inventory
Output [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/inventory]
PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk), IsNotNull(inv_date_sk)]
ReadSchema: struct<inv_date_sk:int,inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(2) ColumnarToRow [codegen id : 4]
Input [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]

(3) Filter [codegen id : 4]
Input [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]
Condition : ((isnotnull(inv_item_sk#2) AND isnotnull(inv_warehouse_sk#3)) AND isnotnull(inv_date_sk#1))

(4) Scan parquet default.date_dim
Output [3]: [d_date_sk#5, d_year#6, d_moy#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,1), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#5, d_year#6, d_moy#7]

(6) Filter [codegen id : 1]
Input [3]: [d_date_sk#5, d_year#6, d_moy#7]
Condition : ((((isnotnull(d_year#6) AND isnotnull(d_moy#7)) AND (d_year#6 = 2001)) AND (d_moy#7 = 1)) AND isnotnull(d_date_sk#5))

(7) Project [codegen id : 1]
Output [2]: [d_date_sk#5, d_moy#7]
Input [3]: [d_date_sk#5, d_year#6, d_moy#7]

(8) BroadcastExchange
Input [2]: [d_date_sk#5, d_moy#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_date_sk#1]
Right keys [1]: [d_date_sk#5]
Join condition: None

(10) Project [codegen id : 4]
Output [4]: [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, d_moy#7]
Input [6]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date_sk#5, d_moy#7]

(11) Scan parquet default.item
Output [1]: [i_item_sk#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int>

(12) ColumnarToRow [codegen id : 2]
Input [1]: [i_item_sk#9]

(13) Filter [codegen id : 2]
Input [1]: [i_item_sk#9]
Condition : isnotnull(i_item_sk#9)

(14) BroadcastExchange
Input [1]: [i_item_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#10]

(15) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_item_sk#2]
Right keys [1]: [i_item_sk#9]
Join condition: None

(16) Project [codegen id : 4]
Output [4]: [inv_warehouse_sk#3, inv_quantity_on_hand#4, d_moy#7, i_item_sk#9]
Input [5]: [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, d_moy#7, i_item_sk#9]

(17) Scan parquet default.warehouse
Output [2]: [w_warehouse_sk#11, w_warehouse_name#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>

(18) ColumnarToRow [codegen id : 3]
Input [2]: [w_warehouse_sk#11, w_warehouse_name#12]

(19) Filter [codegen id : 3]
Input [2]: [w_warehouse_sk#11, w_warehouse_name#12]
Condition : isnotnull(w_warehouse_sk#11)

(20) Project [codegen id : 3]
Output [2]: [w_warehouse_sk#11, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, w_warehouse_name#12, 20, false, true) AS w_warehouse_name#13]
Input [2]: [w_warehouse_sk#11, w_warehouse_name#12]

(21) BroadcastExchange
Input [2]: [w_warehouse_sk#11, w_warehouse_name#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(22) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [inv_warehouse_sk#3]
Right keys [1]: [w_warehouse_sk#11]
Join condition: None

(23) Project [codegen id : 4]
Output [5]: [inv_quantity_on_hand#4, i_item_sk#9, w_warehouse_sk#11, w_warehouse_name#13, d_moy#7]
Input [6]: [inv_warehouse_sk#3, inv_quantity_on_hand#4, d_moy#7, i_item_sk#9, w_warehouse_sk#11, w_warehouse_name#13]

(24) HashAggregate [codegen id : 4]
Input [5]: [inv_quantity_on_hand#4, i_item_sk#9, w_warehouse_sk#11, w_warehouse_name#13, d_moy#7]
Keys [4]: [w_warehouse_name#13, w_warehouse_sk#11, i_item_sk#9, d_moy#7]
Functions [2]: [partial_stddev_samp(cast(inv_quantity_on_hand#4 as double)), partial_avg(cast(inv_quantity_on_hand#4 as bigint))]
Aggregate Attributes [5]: [n#15, avg#16, m2#17, sum#18, count#19]
Results [9]: [w_warehouse_name#13, w_warehouse_sk#11, i_item_sk#9, d_moy#7, n#20, avg#21, m2#22, sum#23, count#24]

(25) Exchange
Input [9]: [w_warehouse_name#13, w_warehouse_sk#11, i_item_sk#9, d_moy#7, n#20, avg#21, m2#22, sum#23, count#24]
Arguments: hashpartitioning(w_warehouse_name#13, w_warehouse_sk#11, i_item_sk#9, d_moy#7, 5), ENSURE_REQUIREMENTS, [id=#25]

(26) HashAggregate [codegen id : 5]
Input [9]: [w_warehouse_name#13, w_warehouse_sk#11, i_item_sk#9, d_moy#7, n#20, avg#21, m2#22, sum#23, count#24]
Keys [4]: [w_warehouse_name#13, w_warehouse_sk#11, i_item_sk#9, d_moy#7]
Functions [2]: [stddev_samp(cast(inv_quantity_on_hand#4 as double)), avg(cast(inv_quantity_on_hand#4 as bigint))]
Aggregate Attributes [2]: [stddev_samp(cast(inv_quantity_on_hand#4 as double))#26, avg(cast(inv_quantity_on_hand#4 as bigint))#27]
Results [5]: [w_warehouse_sk#11, i_item_sk#9, d_moy#7, stddev_samp(cast(inv_quantity_on_hand#4 as double))#26 AS stdev#28, avg(cast(inv_quantity_on_hand#4 as bigint))#27 AS mean#29]

(27) Filter [codegen id : 5]
Input [5]: [w_warehouse_sk#11, i_item_sk#9, d_moy#7, stdev#28, mean#29]
Condition : (((((isnotnull(mean#29) AND isnotnull(stdev#28)) AND NOT (mean#29 = 0.0)) AND ((stdev#28 / mean#29) > 1.0)) AND NOT (mean#29 = 0.0)) AND ((stdev#28 / mean#29) > 1.5))

(28) Project [codegen id : 5]
Output [5]: [w_warehouse_sk#11, i_item_sk#9, d_moy#7, mean#29, CASE WHEN (mean#29 = 0.0) THEN null ELSE (stdev#28 / mean#29) END AS cov#30]
Input [5]: [w_warehouse_sk#11, i_item_sk#9, d_moy#7, stdev#28, mean#29]

(29) Exchange
Input [5]: [w_warehouse_sk#11, i_item_sk#9, d_moy#7, mean#29, cov#30]
Arguments: hashpartitioning(i_item_sk#9, w_warehouse_sk#11, 5), ENSURE_REQUIREMENTS, [id=#31]

(30) Sort [codegen id : 6]
Input [5]: [w_warehouse_sk#11, i_item_sk#9, d_moy#7, mean#29, cov#30]
Arguments: [i_item_sk#9 ASC NULLS FIRST, w_warehouse_sk#11 ASC NULLS FIRST], false, 0

(31) Scan parquet default.inventory
Output [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/inventory]
PushedFilters: [IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk), IsNotNull(inv_date_sk)]
ReadSchema: struct<inv_date_sk:int,inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(32) ColumnarToRow [codegen id : 10]
Input [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]

(33) Filter [codegen id : 10]
Input [4]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4]
Condition : ((isnotnull(inv_item_sk#2) AND isnotnull(inv_warehouse_sk#3)) AND isnotnull(inv_date_sk#1))

(34) Scan parquet default.date_dim
Output [3]: [d_date_sk#32, d_year#33, d_moy#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(35) ColumnarToRow [codegen id : 7]
Input [3]: [d_date_sk#32, d_year#33, d_moy#34]

(36) Filter [codegen id : 7]
Input [3]: [d_date_sk#32, d_year#33, d_moy#34]
Condition : ((((isnotnull(d_year#33) AND isnotnull(d_moy#34)) AND (d_year#33 = 2001)) AND (d_moy#34 = 2)) AND isnotnull(d_date_sk#32))

(37) Project [codegen id : 7]
Output [2]: [d_date_sk#32, d_moy#34]
Input [3]: [d_date_sk#32, d_year#33, d_moy#34]

(38) BroadcastExchange
Input [2]: [d_date_sk#32, d_moy#34]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#35]

(39) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [inv_date_sk#1]
Right keys [1]: [d_date_sk#32]
Join condition: None

(40) Project [codegen id : 10]
Output [4]: [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, d_moy#34]
Input [6]: [inv_date_sk#1, inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, d_date_sk#32, d_moy#34]

(41) ReusedExchange [Reuses operator id: 14]
Output [1]: [i_item_sk#36]

(42) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [inv_item_sk#2]
Right keys [1]: [i_item_sk#36]
Join condition: None

(43) Project [codegen id : 10]
Output [4]: [inv_warehouse_sk#3, inv_quantity_on_hand#4, d_moy#34, i_item_sk#36]
Input [5]: [inv_item_sk#2, inv_warehouse_sk#3, inv_quantity_on_hand#4, d_moy#34, i_item_sk#36]

(44) ReusedExchange [Reuses operator id: 21]
Output [2]: [w_warehouse_sk#37, w_warehouse_name#38]

(45) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [inv_warehouse_sk#3]
Right keys [1]: [w_warehouse_sk#37]
Join condition: None

(46) Project [codegen id : 10]
Output [5]: [inv_quantity_on_hand#4, i_item_sk#36, w_warehouse_sk#37, w_warehouse_name#38, d_moy#34]
Input [6]: [inv_warehouse_sk#3, inv_quantity_on_hand#4, d_moy#34, i_item_sk#36, w_warehouse_sk#37, w_warehouse_name#38]

(47) HashAggregate [codegen id : 10]
Input [5]: [inv_quantity_on_hand#4, i_item_sk#36, w_warehouse_sk#37, w_warehouse_name#38, d_moy#34]
Keys [4]: [w_warehouse_name#38, w_warehouse_sk#37, i_item_sk#36, d_moy#34]
Functions [2]: [partial_stddev_samp(cast(inv_quantity_on_hand#4 as double)), partial_avg(cast(inv_quantity_on_hand#4 as bigint))]
Aggregate Attributes [5]: [n#39, avg#40, m2#41, sum#42, count#43]
Results [9]: [w_warehouse_name#38, w_warehouse_sk#37, i_item_sk#36, d_moy#34, n#44, avg#45, m2#46, sum#47, count#48]

(48) Exchange
Input [9]: [w_warehouse_name#38, w_warehouse_sk#37, i_item_sk#36, d_moy#34, n#44, avg#45, m2#46, sum#47, count#48]
Arguments: hashpartitioning(w_warehouse_name#38, w_warehouse_sk#37, i_item_sk#36, d_moy#34, 5), ENSURE_REQUIREMENTS, [id=#49]

(49) HashAggregate [codegen id : 11]
Input [9]: [w_warehouse_name#38, w_warehouse_sk#37, i_item_sk#36, d_moy#34, n#44, avg#45, m2#46, sum#47, count#48]
Keys [4]: [w_warehouse_name#38, w_warehouse_sk#37, i_item_sk#36, d_moy#34]
Functions [2]: [stddev_samp(cast(inv_quantity_on_hand#4 as double)), avg(cast(inv_quantity_on_hand#4 as bigint))]
Aggregate Attributes [2]: [stddev_samp(cast(inv_quantity_on_hand#4 as double))#50, avg(cast(inv_quantity_on_hand#4 as bigint))#51]
Results [5]: [w_warehouse_sk#37, i_item_sk#36, d_moy#34, stddev_samp(cast(inv_quantity_on_hand#4 as double))#50 AS stdev#52, avg(cast(inv_quantity_on_hand#4 as bigint))#51 AS mean#53]

(50) Filter [codegen id : 11]
Input [5]: [w_warehouse_sk#37, i_item_sk#36, d_moy#34, stdev#52, mean#53]
Condition : (((isnotnull(mean#53) AND isnotnull(stdev#52)) AND NOT (mean#53 = 0.0)) AND ((stdev#52 / mean#53) > 1.0))

(51) Project [codegen id : 11]
Output [5]: [w_warehouse_sk#37, i_item_sk#36, d_moy#34, mean#53, CASE WHEN (mean#53 = 0.0) THEN null ELSE (stdev#52 / mean#53) END AS cov#54]
Input [5]: [w_warehouse_sk#37, i_item_sk#36, d_moy#34, stdev#52, mean#53]

(52) Exchange
Input [5]: [w_warehouse_sk#37, i_item_sk#36, d_moy#34, mean#53, cov#54]
Arguments: hashpartitioning(i_item_sk#36, w_warehouse_sk#37, 5), ENSURE_REQUIREMENTS, [id=#55]

(53) Sort [codegen id : 12]
Input [5]: [w_warehouse_sk#37, i_item_sk#36, d_moy#34, mean#53, cov#54]
Arguments: [i_item_sk#36 ASC NULLS FIRST, w_warehouse_sk#37 ASC NULLS FIRST], false, 0

(54) SortMergeJoin [codegen id : 13]
Left keys [2]: [i_item_sk#9, w_warehouse_sk#11]
Right keys [2]: [i_item_sk#36, w_warehouse_sk#37]
Join condition: None

(55) Exchange
Input [10]: [w_warehouse_sk#11, i_item_sk#9, d_moy#7, mean#29, cov#30, w_warehouse_sk#37, i_item_sk#36, d_moy#34, mean#53, cov#54]
Arguments: rangepartitioning(w_warehouse_sk#11 ASC NULLS FIRST, i_item_sk#9 ASC NULLS FIRST, d_moy#7 ASC NULLS FIRST, mean#29 ASC NULLS FIRST, cov#30 ASC NULLS FIRST, d_moy#34 ASC NULLS FIRST, mean#53 ASC NULLS FIRST, cov#54 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [id=#56]

(56) Sort [codegen id : 14]
Input [10]: [w_warehouse_sk#11, i_item_sk#9, d_moy#7, mean#29, cov#30, w_warehouse_sk#37, i_item_sk#36, d_moy#34, mean#53, cov#54]
Arguments: [w_warehouse_sk#11 ASC NULLS FIRST, i_item_sk#9 ASC NULLS FIRST, d_moy#7 ASC NULLS FIRST, mean#29 ASC NULLS FIRST, cov#30 ASC NULLS FIRST, d_moy#34 ASC NULLS FIRST, mean#53 ASC NULLS FIRST, cov#54 ASC NULLS FIRST], true, 0

