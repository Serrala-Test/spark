== Physical Plan ==
TakeOrderedAndProject (82)
+- * BroadcastHashJoin Inner BuildRight (81)
   :- * Filter (64)
   :  +- * HashAggregate (63)
   :     +- Exchange (62)
   :        +- * HashAggregate (61)
   :           +- * Project (60)
   :              +- * BroadcastHashJoin Inner BuildRight (59)
   :                 :- * Project (57)
   :                 :  +- * BroadcastHashJoin Inner BuildRight (56)
   :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (51)
   :                 :     :  :- * Filter (3)
   :                 :     :  :  +- * ColumnarToRow (2)
   :                 :     :  :     +- Scan parquet spark_catalog.default.store_sales (1)
   :                 :     :  +- BroadcastExchange (50)
   :                 :     :     +- * Project (49)
   :                 :     :        +- * BroadcastHashJoin Inner BuildRight (48)
   :                 :     :           :- * Filter (6)
   :                 :     :           :  +- * ColumnarToRow (5)
   :                 :     :           :     +- Scan parquet spark_catalog.default.item (4)
   :                 :     :           +- BroadcastExchange (47)
   :                 :     :              +- * HashAggregate (46)
   :                 :     :                 +- Exchange (45)
   :                 :     :                    +- * HashAggregate (44)
   :                 :     :                       +- * Project (43)
   :                 :     :                          +- * BroadcastHashJoin Inner BuildRight (42)
   :                 :     :                             :- * Project (40)
   :                 :     :                             :  +- * BroadcastHashJoin Inner BuildRight (39)
   :                 :     :                             :     :- * Filter (9)
   :                 :     :                             :     :  +- * ColumnarToRow (8)
   :                 :     :                             :     :     +- Scan parquet spark_catalog.default.store_sales (7)
   :                 :     :                             :     +- BroadcastExchange (38)
   :                 :     :                             :        +- * BroadcastHashJoin LeftSemi BuildRight (37)
   :                 :     :                             :           :- * BroadcastHashJoin LeftSemi BuildRight (26)
   :                 :     :                             :           :  :- * Filter (12)
   :                 :     :                             :           :  :  +- * ColumnarToRow (11)
   :                 :     :                             :           :  :     +- Scan parquet spark_catalog.default.item (10)
   :                 :     :                             :           :  +- BroadcastExchange (25)
   :                 :     :                             :           :     +- * Project (24)
   :                 :     :                             :           :        +- * BroadcastHashJoin Inner BuildRight (23)
   :                 :     :                             :           :           :- * Project (21)
   :                 :     :                             :           :           :  +- * BroadcastHashJoin Inner BuildRight (20)
   :                 :     :                             :           :           :     :- * Filter (15)
   :                 :     :                             :           :           :     :  +- * ColumnarToRow (14)
   :                 :     :                             :           :           :     :     +- Scan parquet spark_catalog.default.catalog_sales (13)
   :                 :     :                             :           :           :     +- BroadcastExchange (19)
   :                 :     :                             :           :           :        +- * Filter (18)
   :                 :     :                             :           :           :           +- * ColumnarToRow (17)
   :                 :     :                             :           :           :              +- Scan parquet spark_catalog.default.item (16)
   :                 :     :                             :           :           +- ReusedExchange (22)
   :                 :     :                             :           +- BroadcastExchange (36)
   :                 :     :                             :              +- * Project (35)
   :                 :     :                             :                 +- * BroadcastHashJoin Inner BuildRight (34)
   :                 :     :                             :                    :- * Project (32)
   :                 :     :                             :                    :  +- * BroadcastHashJoin Inner BuildRight (31)
   :                 :     :                             :                    :     :- * Filter (29)
   :                 :     :                             :                    :     :  +- * ColumnarToRow (28)
   :                 :     :                             :                    :     :     +- Scan parquet spark_catalog.default.web_sales (27)
   :                 :     :                             :                    :     +- ReusedExchange (30)
   :                 :     :                             :                    +- ReusedExchange (33)
   :                 :     :                             +- ReusedExchange (41)
   :                 :     +- BroadcastExchange (55)
   :                 :        +- * Filter (54)
   :                 :           +- * ColumnarToRow (53)
   :                 :              +- Scan parquet spark_catalog.default.item (52)
   :                 +- ReusedExchange (58)
   +- BroadcastExchange (80)
      +- * Filter (79)
         +- * HashAggregate (78)
            +- Exchange (77)
               +- * HashAggregate (76)
                  +- * Project (75)
                     +- * BroadcastHashJoin Inner BuildRight (74)
                        :- * Project (72)
                        :  +- * BroadcastHashJoin Inner BuildRight (71)
                        :     :- * BroadcastHashJoin LeftSemi BuildRight (69)
                        :     :  :- * Filter (67)
                        :     :  :  +- * ColumnarToRow (66)
                        :     :  :     +- Scan parquet spark_catalog.default.store_sales (65)
                        :     :  +- ReusedExchange (68)
                        :     +- ReusedExchange (70)
                        +- ReusedExchange (73)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 14]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 14]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(6) Filter [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : (((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9)) AND isnotnull(i_item_sk#6))

(7) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 9]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]

(9) Filter [codegen id : 9]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(10) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) ColumnarToRow [codegen id : 7]
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(12) Filter [codegen id : 7]
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Condition : (((isnotnull(i_item_sk#13) AND isnotnull(i_brand_id#14)) AND isnotnull(i_class_id#15)) AND isnotnull(i_category_id#16))

(13) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(cs_sold_date_sk#18 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(14) ColumnarToRow [codegen id : 3]
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]

(15) Filter [codegen id : 3]
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Condition : isnotnull(cs_item_sk#17)

(16) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(17) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]

(18) Filter [codegen id : 1]
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Condition : isnotnull(i_item_sk#19)

(19) BroadcastExchange
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(20) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_item_sk#17]
Right keys [1]: [i_item_sk#19]
Join type: Inner
Join condition: None

(21) Project [codegen id : 3]
Output [4]: [cs_sold_date_sk#18, i_brand_id#20, i_class_id#21, i_category_id#22]
Input [6]: [cs_item_sk#17, cs_sold_date_sk#18, i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]

(22) ReusedExchange [Reuses operator id: 115]
Output [1]: [d_date_sk#23]

(23) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#23]
Join type: Inner
Join condition: None

(24) Project [codegen id : 3]
Output [3]: [i_brand_id#20, i_class_id#21, i_category_id#22]
Input [5]: [cs_sold_date_sk#18, i_brand_id#20, i_class_id#21, i_category_id#22, d_date_sk#23]

(25) BroadcastExchange
Input [3]: [i_brand_id#20, i_class_id#21, i_category_id#22]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=2]

(26) BroadcastHashJoin [codegen id : 7]
Left keys [6]: [coalesce(i_brand_id#14, 0), isnull(i_brand_id#14), coalesce(i_class_id#15, 0), isnull(i_class_id#15), coalesce(i_category_id#16, 0), isnull(i_category_id#16)]
Right keys [6]: [coalesce(i_brand_id#20, 0), isnull(i_brand_id#20), coalesce(i_class_id#21, 0), isnull(i_class_id#21), coalesce(i_category_id#22, 0), isnull(i_category_id#22)]
Join type: LeftSemi
Join condition: None

(27) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_item_sk#24, ws_sold_date_sk#25]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#25), dynamicpruningexpression(ws_sold_date_sk#25 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(28) ColumnarToRow [codegen id : 6]
Input [2]: [ws_item_sk#24, ws_sold_date_sk#25]

(29) Filter [codegen id : 6]
Input [2]: [ws_item_sk#24, ws_sold_date_sk#25]
Condition : isnotnull(ws_item_sk#24)

(30) ReusedExchange [Reuses operator id: 19]
Output [4]: [i_item_sk#26, i_brand_id#27, i_class_id#28, i_category_id#29]

(31) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_item_sk#24]
Right keys [1]: [i_item_sk#26]
Join type: Inner
Join condition: None

(32) Project [codegen id : 6]
Output [4]: [ws_sold_date_sk#25, i_brand_id#27, i_class_id#28, i_category_id#29]
Input [6]: [ws_item_sk#24, ws_sold_date_sk#25, i_item_sk#26, i_brand_id#27, i_class_id#28, i_category_id#29]

(33) ReusedExchange [Reuses operator id: 115]
Output [1]: [d_date_sk#30]

(34) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#25]
Right keys [1]: [d_date_sk#30]
Join type: Inner
Join condition: None

(35) Project [codegen id : 6]
Output [3]: [i_brand_id#27, i_class_id#28, i_category_id#29]
Input [5]: [ws_sold_date_sk#25, i_brand_id#27, i_class_id#28, i_category_id#29, d_date_sk#30]

(36) BroadcastExchange
Input [3]: [i_brand_id#27, i_class_id#28, i_category_id#29]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=3]

(37) BroadcastHashJoin [codegen id : 7]
Left keys [6]: [coalesce(i_brand_id#14, 0), isnull(i_brand_id#14), coalesce(i_class_id#15, 0), isnull(i_class_id#15), coalesce(i_category_id#16, 0), isnull(i_category_id#16)]
Right keys [6]: [coalesce(i_brand_id#27, 0), isnull(i_brand_id#27), coalesce(i_class_id#28, 0), isnull(i_class_id#28), coalesce(i_category_id#29, 0), isnull(i_category_id#29)]
Join type: LeftSemi
Join condition: None

(38) BroadcastExchange
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=4]

(39) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#10]
Right keys [1]: [i_item_sk#13]
Join type: Inner
Join condition: None

(40) Project [codegen id : 9]
Output [4]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16]
Input [6]: [ss_item_sk#10, ss_sold_date_sk#11, i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(41) ReusedExchange [Reuses operator id: 115]
Output [1]: [d_date_sk#31]

(42) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#31]
Join type: Inner
Join condition: None

(43) Project [codegen id : 9]
Output [3]: [i_brand_id#14 AS brand_id#32, i_class_id#15 AS class_id#33, i_category_id#16 AS category_id#34]
Input [5]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16, d_date_sk#31]

(44) HashAggregate [codegen id : 9]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Keys [3]: [brand_id#32, class_id#33, category_id#34]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#32, class_id#33, category_id#34]

(45) Exchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: hashpartitioning(brand_id#32, class_id#33, category_id#34, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(46) HashAggregate [codegen id : 10]
Input [3]: [brand_id#32, class_id#33, category_id#34]
Keys [3]: [brand_id#32, class_id#33, category_id#34]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#32, class_id#33, category_id#34]

(47) BroadcastExchange
Input [3]: [brand_id#32, class_id#33, category_id#34]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [plan_id=6]

(48) BroadcastHashJoin [codegen id : 11]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#32, class_id#33, category_id#34]
Join type: Inner
Join condition: None

(49) Project [codegen id : 11]
Output [1]: [i_item_sk#6 AS ss_item_sk#35]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#32, class_id#33, category_id#34]

(50) BroadcastExchange
Input [1]: [ss_item_sk#35]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

(51) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#35]
Join type: LeftSemi
Join condition: None

(52) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#36, i_brand_id#37, i_class_id#38, i_category_id#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(53) ColumnarToRow [codegen id : 12]
Input [4]: [i_item_sk#36, i_brand_id#37, i_class_id#38, i_category_id#39]

(54) Filter [codegen id : 12]
Input [4]: [i_item_sk#36, i_brand_id#37, i_class_id#38, i_category_id#39]
Condition : (((isnotnull(i_item_sk#36) AND isnotnull(i_brand_id#37)) AND isnotnull(i_class_id#38)) AND isnotnull(i_category_id#39))

(55) BroadcastExchange
Input [4]: [i_item_sk#36, i_brand_id#37, i_class_id#38, i_category_id#39]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=8]

(56) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#36]
Join type: Inner
Join condition: None

(57) Project [codegen id : 14]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#37, i_class_id#38, i_category_id#39]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#36, i_brand_id#37, i_class_id#38, i_category_id#39]

(58) ReusedExchange [Reuses operator id: 106]
Output [1]: [d_date_sk#40]

(59) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#40]
Join type: Inner
Join condition: None

(60) Project [codegen id : 14]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#37, i_class_id#38, i_category_id#39]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#37, i_class_id#38, i_category_id#39, d_date_sk#40]

(61) HashAggregate [codegen id : 14]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#37, i_class_id#38, i_category_id#39]
Keys [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Functions [2]: [partial_sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), partial_count(1)]
Aggregate Attributes [3]: [sum#41, isEmpty#42, count#43]
Results [6]: [i_brand_id#37, i_class_id#38, i_category_id#39, sum#44, isEmpty#45, count#46]

(62) Exchange
Input [6]: [i_brand_id#37, i_class_id#38, i_category_id#39, sum#44, isEmpty#45, count#46]
Arguments: hashpartitioning(i_brand_id#37, i_class_id#38, i_category_id#39, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(63) HashAggregate [codegen id : 30]
Input [6]: [i_brand_id#37, i_class_id#38, i_category_id#39, sum#44, isEmpty#45, count#46]
Keys [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Functions [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#47, count(1)#48]
Results [6]: [store AS channel#49, i_brand_id#37, i_class_id#38, i_category_id#39, sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#47 AS sales#50, count(1)#48 AS number_sales#51]

(64) Filter [codegen id : 30]
Input [6]: [channel#49, i_brand_id#37, i_class_id#38, i_category_id#39, sales#50, number_sales#51]
Condition : (isnotnull(sales#50) AND (cast(sales#50 as decimal(32,6)) > cast(Subquery scalar-subquery#52, [id=#53] as decimal(32,6))))

(65) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#54, ss_quantity#55, ss_list_price#56, ss_sold_date_sk#57]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#57), dynamicpruningexpression(ss_sold_date_sk#57 IN dynamicpruning#58)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(66) ColumnarToRow [codegen id : 28]
Input [4]: [ss_item_sk#54, ss_quantity#55, ss_list_price#56, ss_sold_date_sk#57]

(67) Filter [codegen id : 28]
Input [4]: [ss_item_sk#54, ss_quantity#55, ss_list_price#56, ss_sold_date_sk#57]
Condition : isnotnull(ss_item_sk#54)

(68) ReusedExchange [Reuses operator id: 50]
Output [1]: [ss_item_sk#35]

(69) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [ss_item_sk#54]
Right keys [1]: [ss_item_sk#35]
Join type: LeftSemi
Join condition: None

(70) ReusedExchange [Reuses operator id: 55]
Output [4]: [i_item_sk#59, i_brand_id#60, i_class_id#61, i_category_id#62]

(71) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [ss_item_sk#54]
Right keys [1]: [i_item_sk#59]
Join type: Inner
Join condition: None

(72) Project [codegen id : 28]
Output [6]: [ss_quantity#55, ss_list_price#56, ss_sold_date_sk#57, i_brand_id#60, i_class_id#61, i_category_id#62]
Input [8]: [ss_item_sk#54, ss_quantity#55, ss_list_price#56, ss_sold_date_sk#57, i_item_sk#59, i_brand_id#60, i_class_id#61, i_category_id#62]

(73) ReusedExchange [Reuses operator id: 120]
Output [1]: [d_date_sk#63]

(74) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [ss_sold_date_sk#57]
Right keys [1]: [d_date_sk#63]
Join type: Inner
Join condition: None

(75) Project [codegen id : 28]
Output [5]: [ss_quantity#55, ss_list_price#56, i_brand_id#60, i_class_id#61, i_category_id#62]
Input [7]: [ss_quantity#55, ss_list_price#56, ss_sold_date_sk#57, i_brand_id#60, i_class_id#61, i_category_id#62, d_date_sk#63]

(76) HashAggregate [codegen id : 28]
Input [5]: [ss_quantity#55, ss_list_price#56, i_brand_id#60, i_class_id#61, i_category_id#62]
Keys [3]: [i_brand_id#60, i_class_id#61, i_category_id#62]
Functions [2]: [partial_sum((cast(ss_quantity#55 as decimal(10,0)) * ss_list_price#56)), partial_count(1)]
Aggregate Attributes [3]: [sum#64, isEmpty#65, count#66]
Results [6]: [i_brand_id#60, i_class_id#61, i_category_id#62, sum#67, isEmpty#68, count#69]

(77) Exchange
Input [6]: [i_brand_id#60, i_class_id#61, i_category_id#62, sum#67, isEmpty#68, count#69]
Arguments: hashpartitioning(i_brand_id#60, i_class_id#61, i_category_id#62, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(78) HashAggregate [codegen id : 29]
Input [6]: [i_brand_id#60, i_class_id#61, i_category_id#62, sum#67, isEmpty#68, count#69]
Keys [3]: [i_brand_id#60, i_class_id#61, i_category_id#62]
Functions [2]: [sum((cast(ss_quantity#55 as decimal(10,0)) * ss_list_price#56)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#55 as decimal(10,0)) * ss_list_price#56))#70, count(1)#71]
Results [6]: [store AS channel#72, i_brand_id#60, i_class_id#61, i_category_id#62, sum((cast(ss_quantity#55 as decimal(10,0)) * ss_list_price#56))#70 AS sales#73, count(1)#71 AS number_sales#74]

(79) Filter [codegen id : 29]
Input [6]: [channel#72, i_brand_id#60, i_class_id#61, i_category_id#62, sales#73, number_sales#74]
Condition : (isnotnull(sales#73) AND (cast(sales#73 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#52, [id=#53] as decimal(32,6))))

(80) BroadcastExchange
Input [6]: [channel#72, i_brand_id#60, i_class_id#61, i_category_id#62, sales#73, number_sales#74]
Arguments: HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true]),false), [plan_id=11]

(81) BroadcastHashJoin [codegen id : 30]
Left keys [3]: [i_brand_id#37, i_class_id#38, i_category_id#39]
Right keys [3]: [i_brand_id#60, i_class_id#61, i_category_id#62]
Join type: Inner
Join condition: None

(82) TakeOrderedAndProject
Input [12]: [channel#49, i_brand_id#37, i_class_id#38, i_category_id#39, sales#50, number_sales#51, channel#72, i_brand_id#60, i_class_id#61, i_category_id#62, sales#73, number_sales#74]
Arguments: 100, [i_brand_id#37 ASC NULLS FIRST, i_class_id#38 ASC NULLS FIRST, i_category_id#39 ASC NULLS FIRST], [channel#49, i_brand_id#37, i_class_id#38, i_category_id#39, sales#50, number_sales#51, channel#72, i_brand_id#60, i_class_id#61, i_category_id#62, sales#73, number_sales#74]

===== Subqueries =====

Subquery:1 Hosting operator id = 64 Hosting Expression = Subquery scalar-subquery#52, [id=#53]
* HashAggregate (101)
+- Exchange (100)
   +- * HashAggregate (99)
      +- Union (98)
         :- * Project (87)
         :  +- * BroadcastHashJoin Inner BuildRight (86)
         :     :- * ColumnarToRow (84)
         :     :  +- Scan parquet spark_catalog.default.store_sales (83)
         :     +- ReusedExchange (85)
         :- * Project (92)
         :  +- * BroadcastHashJoin Inner BuildRight (91)
         :     :- * ColumnarToRow (89)
         :     :  +- Scan parquet spark_catalog.default.catalog_sales (88)
         :     +- ReusedExchange (90)
         +- * Project (97)
            +- * BroadcastHashJoin Inner BuildRight (96)
               :- * ColumnarToRow (94)
               :  +- Scan parquet spark_catalog.default.web_sales (93)
               +- ReusedExchange (95)


(83) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_quantity#75, ss_list_price#76, ss_sold_date_sk#77]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#77), dynamicpruningexpression(ss_sold_date_sk#77 IN dynamicpruning#12)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(84) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#75, ss_list_price#76, ss_sold_date_sk#77]

(85) ReusedExchange [Reuses operator id: 115]
Output [1]: [d_date_sk#78]

(86) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#77]
Right keys [1]: [d_date_sk#78]
Join type: Inner
Join condition: None

(87) Project [codegen id : 2]
Output [2]: [ss_quantity#75 AS quantity#79, ss_list_price#76 AS list_price#80]
Input [4]: [ss_quantity#75, ss_list_price#76, ss_sold_date_sk#77, d_date_sk#78]

(88) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_quantity#81, cs_list_price#82, cs_sold_date_sk#83]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#83), dynamicpruningexpression(cs_sold_date_sk#83 IN dynamicpruning#12)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(89) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#81, cs_list_price#82, cs_sold_date_sk#83]

(90) ReusedExchange [Reuses operator id: 115]
Output [1]: [d_date_sk#84]

(91) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#83]
Right keys [1]: [d_date_sk#84]
Join type: Inner
Join condition: None

(92) Project [codegen id : 4]
Output [2]: [cs_quantity#81 AS quantity#85, cs_list_price#82 AS list_price#86]
Input [4]: [cs_quantity#81, cs_list_price#82, cs_sold_date_sk#83, d_date_sk#84]

(93) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_quantity#87, ws_list_price#88, ws_sold_date_sk#89]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#89), dynamicpruningexpression(ws_sold_date_sk#89 IN dynamicpruning#12)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(94) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#87, ws_list_price#88, ws_sold_date_sk#89]

(95) ReusedExchange [Reuses operator id: 115]
Output [1]: [d_date_sk#90]

(96) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#89]
Right keys [1]: [d_date_sk#90]
Join type: Inner
Join condition: None

(97) Project [codegen id : 6]
Output [2]: [ws_quantity#87 AS quantity#91, ws_list_price#88 AS list_price#92]
Input [4]: [ws_quantity#87, ws_list_price#88, ws_sold_date_sk#89, d_date_sk#90]

(98) Union

(99) HashAggregate [codegen id : 7]
Input [2]: [quantity#79, list_price#80]
Keys: []
Functions [1]: [partial_avg((cast(quantity#79 as decimal(10,0)) * list_price#80))]
Aggregate Attributes [2]: [sum#93, count#94]
Results [2]: [sum#95, count#96]

(100) Exchange
Input [2]: [sum#95, count#96]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=12]

(101) HashAggregate [codegen id : 8]
Input [2]: [sum#95, count#96]
Keys: []
Functions [1]: [avg((cast(quantity#79 as decimal(10,0)) * list_price#80))]
Aggregate Attributes [1]: [avg((cast(quantity#79 as decimal(10,0)) * list_price#80))#97]
Results [1]: [avg((cast(quantity#79 as decimal(10,0)) * list_price#80))#97 AS average_sales#98]

Subquery:2 Hosting operator id = 83 Hosting Expression = ss_sold_date_sk#77 IN dynamicpruning#12

Subquery:3 Hosting operator id = 88 Hosting Expression = cs_sold_date_sk#83 IN dynamicpruning#12

Subquery:4 Hosting operator id = 93 Hosting Expression = ws_sold_date_sk#89 IN dynamicpruning#12

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (106)
+- * Project (105)
   +- * Filter (104)
      +- * ColumnarToRow (103)
         +- Scan parquet spark_catalog.default.date_dim (102)


(102) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#40, d_week_seq#99]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(103) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#40, d_week_seq#99]

(104) Filter [codegen id : 1]
Input [2]: [d_date_sk#40, d_week_seq#99]
Condition : ((isnotnull(d_week_seq#99) AND (d_week_seq#99 = Subquery scalar-subquery#100, [id=#101])) AND isnotnull(d_date_sk#40))

(105) Project [codegen id : 1]
Output [1]: [d_date_sk#40]
Input [2]: [d_date_sk#40, d_week_seq#99]

(106) BroadcastExchange
Input [1]: [d_date_sk#40]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=13]

Subquery:6 Hosting operator id = 104 Hosting Expression = Subquery scalar-subquery#100, [id=#101]
* Project (110)
+- * Filter (109)
   +- * ColumnarToRow (108)
      +- Scan parquet spark_catalog.default.date_dim (107)


(107) Scan parquet spark_catalog.default.date_dim
Output [4]: [d_week_seq#102, d_year#103, d_moy#104, d_dom#105]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,2000), EqualTo(d_moy,12), EqualTo(d_dom,11)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(108) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#102, d_year#103, d_moy#104, d_dom#105]

(109) Filter [codegen id : 1]
Input [4]: [d_week_seq#102, d_year#103, d_moy#104, d_dom#105]
Condition : (((((isnotnull(d_year#103) AND isnotnull(d_moy#104)) AND isnotnull(d_dom#105)) AND (d_year#103 = 2000)) AND (d_moy#104 = 12)) AND (d_dom#105 = 11))

(110) Project [codegen id : 1]
Output [1]: [d_week_seq#102]
Input [4]: [d_week_seq#102, d_year#103, d_moy#104, d_dom#105]

Subquery:7 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (115)
+- * Project (114)
   +- * Filter (113)
      +- * ColumnarToRow (112)
         +- Scan parquet spark_catalog.default.date_dim (111)


(111) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#31, d_year#106]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(112) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#31, d_year#106]

(113) Filter [codegen id : 1]
Input [2]: [d_date_sk#31, d_year#106]
Condition : (((isnotnull(d_year#106) AND (d_year#106 >= 1999)) AND (d_year#106 <= 2001)) AND isnotnull(d_date_sk#31))

(114) Project [codegen id : 1]
Output [1]: [d_date_sk#31]
Input [2]: [d_date_sk#31, d_year#106]

(115) BroadcastExchange
Input [1]: [d_date_sk#31]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=14]

Subquery:8 Hosting operator id = 13 Hosting Expression = cs_sold_date_sk#18 IN dynamicpruning#12

Subquery:9 Hosting operator id = 27 Hosting Expression = ws_sold_date_sk#25 IN dynamicpruning#12

Subquery:10 Hosting operator id = 79 Hosting Expression = ReusedSubquery Subquery scalar-subquery#52, [id=#53]

Subquery:11 Hosting operator id = 65 Hosting Expression = ss_sold_date_sk#57 IN dynamicpruning#58
BroadcastExchange (120)
+- * Project (119)
   +- * Filter (118)
      +- * ColumnarToRow (117)
         +- Scan parquet spark_catalog.default.date_dim (116)


(116) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#63, d_week_seq#107]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(117) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#63, d_week_seq#107]

(118) Filter [codegen id : 1]
Input [2]: [d_date_sk#63, d_week_seq#107]
Condition : ((isnotnull(d_week_seq#107) AND (d_week_seq#107 = Subquery scalar-subquery#108, [id=#109])) AND isnotnull(d_date_sk#63))

(119) Project [codegen id : 1]
Output [1]: [d_date_sk#63]
Input [2]: [d_date_sk#63, d_week_seq#107]

(120) BroadcastExchange
Input [1]: [d_date_sk#63]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=15]

Subquery:12 Hosting operator id = 118 Hosting Expression = Subquery scalar-subquery#108, [id=#109]
* Project (124)
+- * Filter (123)
   +- * ColumnarToRow (122)
      +- Scan parquet spark_catalog.default.date_dim (121)


(121) Scan parquet spark_catalog.default.date_dim
Output [4]: [d_week_seq#110, d_year#111, d_moy#112, d_dom#113]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), EqualTo(d_dom,11)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(122) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#110, d_year#111, d_moy#112, d_dom#113]

(123) Filter [codegen id : 1]
Input [4]: [d_week_seq#110, d_year#111, d_moy#112, d_dom#113]
Condition : (((((isnotnull(d_year#111) AND isnotnull(d_moy#112)) AND isnotnull(d_dom#113)) AND (d_year#111 = 1999)) AND (d_moy#112 = 12)) AND (d_dom#113 = 11))

(124) Project [codegen id : 1]
Output [1]: [d_week_seq#110]
Input [4]: [d_week_seq#110, d_year#111, d_moy#112, d_dom#113]


