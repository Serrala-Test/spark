== Physical Plan ==
TakeOrderedAndProject (88)
+- * BroadcastHashJoin Inner BuildRight (87)
   :- * Project (69)
   :  +- * Filter (68)
   :     +- * HashAggregate (67)
   :        +- Exchange (66)
   :           +- * HashAggregate (65)
   :              +- * Project (64)
   :                 +- * BroadcastHashJoin Inner BuildRight (63)
   :                    :- * Project (61)
   :                    :  +- * BroadcastHashJoin Inner BuildRight (60)
   :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (53)
   :                    :     :  :- * Filter (3)
   :                    :     :  :  +- * ColumnarToRow (2)
   :                    :     :  :     +- Scan parquet default.store_sales (1)
   :                    :     :  +- BroadcastExchange (52)
   :                    :     :     +- * Project (51)
   :                    :     :        +- * BroadcastHashJoin Inner BuildRight (50)
   :                    :     :           :- * Filter (6)
   :                    :     :           :  +- * ColumnarToRow (5)
   :                    :     :           :     +- Scan parquet default.item (4)
   :                    :     :           +- BroadcastExchange (49)
   :                    :     :              +- * HashAggregate (48)
   :                    :     :                 +- * HashAggregate (47)
   :                    :     :                    +- * BroadcastHashJoin LeftSemi BuildRight (46)
   :                    :     :                       :- * HashAggregate (35)
   :                    :     :                       :  +- Exchange (34)
   :                    :     :                       :     +- * HashAggregate (33)
   :                    :     :                       :        +- * Project (32)
   :                    :     :                       :           +- * BroadcastHashJoin Inner BuildRight (31)
   :                    :     :                       :              :- * Project (29)
   :                    :     :                       :              :  +- * BroadcastHashJoin Inner BuildRight (28)
   :                    :     :                       :              :     :- * Filter (9)
   :                    :     :                       :              :     :  +- * ColumnarToRow (8)
   :                    :     :                       :              :     :     +- Scan parquet default.store_sales (7)
   :                    :     :                       :              :     +- BroadcastExchange (27)
   :                    :     :                       :              :        +- * BroadcastHashJoin LeftSemi BuildRight (26)
   :                    :     :                       :              :           :- * Filter (12)
   :                    :     :                       :              :           :  +- * ColumnarToRow (11)
   :                    :     :                       :              :           :     +- Scan parquet default.item (10)
   :                    :     :                       :              :           +- BroadcastExchange (25)
   :                    :     :                       :              :              +- * Project (24)
   :                    :     :                       :              :                 +- * BroadcastHashJoin Inner BuildRight (23)
   :                    :     :                       :              :                    :- * Project (21)
   :                    :     :                       :              :                    :  +- * BroadcastHashJoin Inner BuildRight (20)
   :                    :     :                       :              :                    :     :- * Filter (15)
   :                    :     :                       :              :                    :     :  +- * ColumnarToRow (14)
   :                    :     :                       :              :                    :     :     +- Scan parquet default.catalog_sales (13)
   :                    :     :                       :              :                    :     +- BroadcastExchange (19)
   :                    :     :                       :              :                    :        +- * Filter (18)
   :                    :     :                       :              :                    :           +- * ColumnarToRow (17)
   :                    :     :                       :              :                    :              +- Scan parquet default.item (16)
   :                    :     :                       :              :                    +- ReusedExchange (22)
   :                    :     :                       :              +- ReusedExchange (30)
   :                    :     :                       +- BroadcastExchange (45)
   :                    :     :                          +- * Project (44)
   :                    :     :                             +- * BroadcastHashJoin Inner BuildRight (43)
   :                    :     :                                :- * Project (41)
   :                    :     :                                :  +- * BroadcastHashJoin Inner BuildRight (40)
   :                    :     :                                :     :- * Filter (38)
   :                    :     :                                :     :  +- * ColumnarToRow (37)
   :                    :     :                                :     :     +- Scan parquet default.web_sales (36)
   :                    :     :                                :     +- ReusedExchange (39)
   :                    :     :                                +- ReusedExchange (42)
   :                    :     +- BroadcastExchange (59)
   :                    :        +- * BroadcastHashJoin LeftSemi BuildRight (58)
   :                    :           :- * Filter (56)
   :                    :           :  +- * ColumnarToRow (55)
   :                    :           :     +- Scan parquet default.item (54)
   :                    :           +- ReusedExchange (57)
   :                    +- ReusedExchange (62)
   +- BroadcastExchange (86)
      +- * Project (85)
         +- * Filter (84)
            +- * HashAggregate (83)
               +- Exchange (82)
                  +- * HashAggregate (81)
                     +- * Project (80)
                        +- * BroadcastHashJoin Inner BuildRight (79)
                           :- * Project (77)
                           :  +- * BroadcastHashJoin Inner BuildRight (76)
                           :     :- * BroadcastHashJoin LeftSemi BuildRight (74)
                           :     :  :- * Filter (72)
                           :     :  :  +- * ColumnarToRow (71)
                           :     :  :     +- Scan parquet default.store_sales (70)
                           :     :  +- ReusedExchange (73)
                           :     +- ReusedExchange (75)
                           +- ReusedExchange (78)


(1) Scan parquet default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(6) Filter [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(7) Scan parquet default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 6]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]

(9) Filter [codegen id : 6]
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(10) Scan parquet default.item
Output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(12) Filter [codegen id : 4]
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Condition : (((isnotnull(i_item_sk#13) AND isnotnull(i_brand_id#14)) AND isnotnull(i_class_id#15)) AND isnotnull(i_category_id#16))

(13) Scan parquet default.catalog_sales
Output [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(cs_sold_date_sk#18 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(14) ColumnarToRow [codegen id : 3]
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]

(15) Filter [codegen id : 3]
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Condition : isnotnull(cs_item_sk#17)

(16) Scan parquet default.item
Output [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(17) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]

(18) Filter [codegen id : 1]
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Condition : isnotnull(i_item_sk#19)

(19) BroadcastExchange
Input [4]: [i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#23]

(20) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_item_sk#17]
Right keys [1]: [i_item_sk#19]
Join condition: None

(21) Project [codegen id : 3]
Output [4]: [cs_sold_date_sk#18, i_brand_id#20, i_class_id#21, i_category_id#22]
Input [6]: [cs_item_sk#17, cs_sold_date_sk#18, i_item_sk#19, i_brand_id#20, i_class_id#21, i_category_id#22]

(22) ReusedExchange [Reuses operator id: 121]
Output [1]: [d_date_sk#24]

(23) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#18]
Right keys [1]: [d_date_sk#24]
Join condition: None

(24) Project [codegen id : 3]
Output [3]: [i_brand_id#20, i_class_id#21, i_category_id#22]
Input [5]: [cs_sold_date_sk#18, i_brand_id#20, i_class_id#21, i_category_id#22, d_date_sk#24]

(25) BroadcastExchange
Input [3]: [i_brand_id#20, i_class_id#21, i_category_id#22]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#25]

(26) BroadcastHashJoin [codegen id : 4]
Left keys [6]: [coalesce(i_brand_id#14, 0), isnull(i_brand_id#14), coalesce(i_class_id#15, 0), isnull(i_class_id#15), coalesce(i_category_id#16, 0), isnull(i_category_id#16)]
Right keys [6]: [coalesce(i_brand_id#20, 0), isnull(i_brand_id#20), coalesce(i_class_id#21, 0), isnull(i_class_id#21), coalesce(i_category_id#22, 0), isnull(i_category_id#22)]
Join condition: None

(27) BroadcastExchange
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#26]

(28) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#10]
Right keys [1]: [i_item_sk#13]
Join condition: None

(29) Project [codegen id : 6]
Output [4]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16]
Input [6]: [ss_item_sk#10, ss_sold_date_sk#11, i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(30) ReusedExchange [Reuses operator id: 121]
Output [1]: [d_date_sk#27]

(31) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#27]
Join condition: None

(32) Project [codegen id : 6]
Output [3]: [i_brand_id#14 AS brand_id#28, i_class_id#15 AS class_id#29, i_category_id#16 AS category_id#30]
Input [5]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16, d_date_sk#27]

(33) HashAggregate [codegen id : 6]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(34) Exchange
Input [3]: [brand_id#28, class_id#29, category_id#30]
Arguments: hashpartitioning(brand_id#28, class_id#29, category_id#30, 5), ENSURE_REQUIREMENTS, [id=#31]

(35) HashAggregate [codegen id : 10]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(36) Scan parquet default.web_sales
Output [2]: [ws_item_sk#32, ws_sold_date_sk#33]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#33), dynamicpruningexpression(ws_sold_date_sk#33 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(37) ColumnarToRow [codegen id : 9]
Input [2]: [ws_item_sk#32, ws_sold_date_sk#33]

(38) Filter [codegen id : 9]
Input [2]: [ws_item_sk#32, ws_sold_date_sk#33]
Condition : isnotnull(ws_item_sk#32)

(39) ReusedExchange [Reuses operator id: 19]
Output [4]: [i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]

(40) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_item_sk#32]
Right keys [1]: [i_item_sk#34]
Join condition: None

(41) Project [codegen id : 9]
Output [4]: [ws_sold_date_sk#33, i_brand_id#35, i_class_id#36, i_category_id#37]
Input [6]: [ws_item_sk#32, ws_sold_date_sk#33, i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]

(42) ReusedExchange [Reuses operator id: 121]
Output [1]: [d_date_sk#38]

(43) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_sold_date_sk#33]
Right keys [1]: [d_date_sk#38]
Join condition: None

(44) Project [codegen id : 9]
Output [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Input [5]: [ws_sold_date_sk#33, i_brand_id#35, i_class_id#36, i_category_id#37, d_date_sk#38]

(45) BroadcastExchange
Input [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [id=#39]

(46) BroadcastHashJoin [codegen id : 10]
Left keys [6]: [coalesce(brand_id#28, 0), isnull(brand_id#28), coalesce(class_id#29, 0), isnull(class_id#29), coalesce(category_id#30, 0), isnull(category_id#30)]
Right keys [6]: [coalesce(i_brand_id#35, 0), isnull(i_brand_id#35), coalesce(i_class_id#36, 0), isnull(i_class_id#36), coalesce(i_category_id#37, 0), isnull(i_category_id#37)]
Join condition: None

(47) HashAggregate [codegen id : 10]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(48) HashAggregate [codegen id : 10]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(49) BroadcastExchange
Input [3]: [brand_id#28, class_id#29, category_id#30]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [id=#40]

(50) BroadcastHashJoin [codegen id : 11]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#28, class_id#29, category_id#30]
Join condition: None

(51) Project [codegen id : 11]
Output [1]: [i_item_sk#6 AS ss_item_sk#41]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#28, class_id#29, category_id#30]

(52) BroadcastExchange
Input [1]: [ss_item_sk#41]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#42]

(53) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(54) Scan parquet default.item
Output [4]: [i_item_sk#43, i_brand_id#44, i_class_id#45, i_category_id#46]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(55) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#43, i_brand_id#44, i_class_id#45, i_category_id#46]

(56) Filter [codegen id : 23]
Input [4]: [i_item_sk#43, i_brand_id#44, i_class_id#45, i_category_id#46]
Condition : (((isnotnull(i_item_sk#43) AND isnotnull(i_brand_id#44)) AND isnotnull(i_class_id#45)) AND isnotnull(i_category_id#46))

(57) ReusedExchange [Reuses operator id: 52]
Output [1]: [ss_item_sk#41]

(58) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [i_item_sk#43]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(59) BroadcastExchange
Input [4]: [i_item_sk#43, i_brand_id#44, i_class_id#45, i_category_id#46]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#47]

(60) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#43]
Join condition: None

(61) Project [codegen id : 25]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#44, i_class_id#45, i_category_id#46]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#43, i_brand_id#44, i_class_id#45, i_category_id#46]

(62) ReusedExchange [Reuses operator id: 112]
Output [1]: [d_date_sk#48]

(63) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#48]
Join condition: None

(64) Project [codegen id : 25]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#44, i_class_id#45, i_category_id#46]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#44, i_class_id#45, i_category_id#46, d_date_sk#48]

(65) HashAggregate [codegen id : 25]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#44, i_class_id#45, i_category_id#46]
Keys [3]: [i_brand_id#44, i_class_id#45, i_category_id#46]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#49, isEmpty#50, count#51]
Results [6]: [i_brand_id#44, i_class_id#45, i_category_id#46, sum#52, isEmpty#53, count#54]

(66) Exchange
Input [6]: [i_brand_id#44, i_class_id#45, i_category_id#46, sum#52, isEmpty#53, count#54]
Arguments: hashpartitioning(i_brand_id#44, i_class_id#45, i_category_id#46, 5), ENSURE_REQUIREMENTS, [id=#55]

(67) HashAggregate [codegen id : 52]
Input [6]: [i_brand_id#44, i_class_id#45, i_category_id#46, sum#52, isEmpty#53, count#54]
Keys [3]: [i_brand_id#44, i_class_id#45, i_category_id#46]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#56, count(1)#57]
Results [6]: [i_brand_id#44, i_class_id#45, i_category_id#46, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#56 AS sales#58, count(1)#57 AS number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#56 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#60]

(68) Filter [codegen id : 52]
Input [6]: [i_brand_id#44, i_class_id#45, i_category_id#46, sales#58, number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#60]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#60) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#60 as decimal(32,6)) > cast(Subquery scalar-subquery#61, [id=#62] as decimal(32,6))))

(69) Project [codegen id : 52]
Output [6]: [store AS channel#63, i_brand_id#44, i_class_id#45, i_category_id#46, sales#58, number_sales#59]
Input [6]: [i_brand_id#44, i_class_id#45, i_category_id#46, sales#58, number_sales#59, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#2 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#3 as decimal(12,2)))), DecimalType(18,2), true))#60]

(70) Scan parquet default.store_sales
Output [4]: [ss_item_sk#64, ss_quantity#65, ss_list_price#66, ss_sold_date_sk#67]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#67), dynamicpruningexpression(ss_sold_date_sk#67 IN dynamicpruning#68)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(71) ColumnarToRow [codegen id : 50]
Input [4]: [ss_item_sk#64, ss_quantity#65, ss_list_price#66, ss_sold_date_sk#67]

(72) Filter [codegen id : 50]
Input [4]: [ss_item_sk#64, ss_quantity#65, ss_list_price#66, ss_sold_date_sk#67]
Condition : isnotnull(ss_item_sk#64)

(73) ReusedExchange [Reuses operator id: 52]
Output [1]: [ss_item_sk#41]

(74) BroadcastHashJoin [codegen id : 50]
Left keys [1]: [ss_item_sk#64]
Right keys [1]: [ss_item_sk#41]
Join condition: None

(75) ReusedExchange [Reuses operator id: 59]
Output [4]: [i_item_sk#69, i_brand_id#70, i_class_id#71, i_category_id#72]

(76) BroadcastHashJoin [codegen id : 50]
Left keys [1]: [ss_item_sk#64]
Right keys [1]: [i_item_sk#69]
Join condition: None

(77) Project [codegen id : 50]
Output [6]: [ss_quantity#65, ss_list_price#66, ss_sold_date_sk#67, i_brand_id#70, i_class_id#71, i_category_id#72]
Input [8]: [ss_item_sk#64, ss_quantity#65, ss_list_price#66, ss_sold_date_sk#67, i_item_sk#69, i_brand_id#70, i_class_id#71, i_category_id#72]

(78) ReusedExchange [Reuses operator id: 126]
Output [1]: [d_date_sk#73]

(79) BroadcastHashJoin [codegen id : 50]
Left keys [1]: [ss_sold_date_sk#67]
Right keys [1]: [d_date_sk#73]
Join condition: None

(80) Project [codegen id : 50]
Output [5]: [ss_quantity#65, ss_list_price#66, i_brand_id#70, i_class_id#71, i_category_id#72]
Input [7]: [ss_quantity#65, ss_list_price#66, ss_sold_date_sk#67, i_brand_id#70, i_class_id#71, i_category_id#72, d_date_sk#73]

(81) HashAggregate [codegen id : 50]
Input [5]: [ss_quantity#65, ss_list_price#66, i_brand_id#70, i_class_id#71, i_category_id#72]
Keys [3]: [i_brand_id#70, i_class_id#71, i_category_id#72]
Functions [2]: [partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#66 as decimal(12,2)))), DecimalType(18,2), true)), partial_count(1)]
Aggregate Attributes [3]: [sum#74, isEmpty#75, count#76]
Results [6]: [i_brand_id#70, i_class_id#71, i_category_id#72, sum#77, isEmpty#78, count#79]

(82) Exchange
Input [6]: [i_brand_id#70, i_class_id#71, i_category_id#72, sum#77, isEmpty#78, count#79]
Arguments: hashpartitioning(i_brand_id#70, i_class_id#71, i_category_id#72, 5), ENSURE_REQUIREMENTS, [id=#80]

(83) HashAggregate [codegen id : 51]
Input [6]: [i_brand_id#70, i_class_id#71, i_category_id#72, sum#77, isEmpty#78, count#79]
Keys [3]: [i_brand_id#70, i_class_id#71, i_category_id#72]
Functions [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#66 as decimal(12,2)))), DecimalType(18,2), true)), count(1)]
Aggregate Attributes [2]: [sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#81, count(1)#82]
Results [6]: [i_brand_id#70, i_class_id#71, i_category_id#72, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#81 AS sales#83, count(1)#82 AS number_sales#84, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#81 AS sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#85]

(84) Filter [codegen id : 51]
Input [6]: [i_brand_id#70, i_class_id#71, i_category_id#72, sales#83, number_sales#84, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#85]
Condition : (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#85) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#85 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#61, [id=#62] as decimal(32,6))))

(85) Project [codegen id : 51]
Output [6]: [store AS channel#86, i_brand_id#70, i_class_id#71, i_category_id#72, sales#83, number_sales#84]
Input [6]: [i_brand_id#70, i_class_id#71, i_category_id#72, sales#83, number_sales#84, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#65 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_list_price#66 as decimal(12,2)))), DecimalType(18,2), true))#85]

(86) BroadcastExchange
Input [6]: [channel#86, i_brand_id#70, i_class_id#71, i_category_id#72, sales#83, number_sales#84]
Arguments: HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true]),false), [id=#87]

(87) BroadcastHashJoin [codegen id : 52]
Left keys [3]: [i_brand_id#44, i_class_id#45, i_category_id#46]
Right keys [3]: [i_brand_id#70, i_class_id#71, i_category_id#72]
Join condition: None

(88) TakeOrderedAndProject
Input [12]: [channel#63, i_brand_id#44, i_class_id#45, i_category_id#46, sales#58, number_sales#59, channel#86, i_brand_id#70, i_class_id#71, i_category_id#72, sales#83, number_sales#84]
Arguments: 100, [i_brand_id#44 ASC NULLS FIRST, i_class_id#45 ASC NULLS FIRST, i_category_id#46 ASC NULLS FIRST], [channel#63, i_brand_id#44, i_class_id#45, i_category_id#46, sales#58, number_sales#59, channel#86, i_brand_id#70, i_class_id#71, i_category_id#72, sales#83, number_sales#84]

===== Subqueries =====

Subquery:1 Hosting operator id = 68 Hosting Expression = Subquery scalar-subquery#61, [id=#62]
* HashAggregate (107)
+- Exchange (106)
   +- * HashAggregate (105)
      +- Union (104)
         :- * Project (93)
         :  +- * BroadcastHashJoin Inner BuildRight (92)
         :     :- * ColumnarToRow (90)
         :     :  +- Scan parquet default.store_sales (89)
         :     +- ReusedExchange (91)
         :- * Project (98)
         :  +- * BroadcastHashJoin Inner BuildRight (97)
         :     :- * ColumnarToRow (95)
         :     :  +- Scan parquet default.catalog_sales (94)
         :     +- ReusedExchange (96)
         +- * Project (103)
            +- * BroadcastHashJoin Inner BuildRight (102)
               :- * ColumnarToRow (100)
               :  +- Scan parquet default.web_sales (99)
               +- ReusedExchange (101)


(89) Scan parquet default.store_sales
Output [3]: [ss_quantity#88, ss_list_price#89, ss_sold_date_sk#90]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#90), dynamicpruningexpression(ss_sold_date_sk#90 IN dynamicpruning#12)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(90) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#88, ss_list_price#89, ss_sold_date_sk#90]

(91) ReusedExchange [Reuses operator id: 121]
Output [1]: [d_date_sk#91]

(92) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#90]
Right keys [1]: [d_date_sk#91]
Join condition: None

(93) Project [codegen id : 2]
Output [2]: [ss_quantity#88 AS quantity#92, ss_list_price#89 AS list_price#93]
Input [4]: [ss_quantity#88, ss_list_price#89, ss_sold_date_sk#90, d_date_sk#91]

(94) Scan parquet default.catalog_sales
Output [3]: [cs_quantity#94, cs_list_price#95, cs_sold_date_sk#96]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#96), dynamicpruningexpression(cs_sold_date_sk#96 IN dynamicpruning#12)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(95) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#94, cs_list_price#95, cs_sold_date_sk#96]

(96) ReusedExchange [Reuses operator id: 121]
Output [1]: [d_date_sk#97]

(97) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#96]
Right keys [1]: [d_date_sk#97]
Join condition: None

(98) Project [codegen id : 4]
Output [2]: [cs_quantity#94 AS quantity#98, cs_list_price#95 AS list_price#99]
Input [4]: [cs_quantity#94, cs_list_price#95, cs_sold_date_sk#96, d_date_sk#97]

(99) Scan parquet default.web_sales
Output [3]: [ws_quantity#100, ws_list_price#101, ws_sold_date_sk#102]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#102), dynamicpruningexpression(ws_sold_date_sk#102 IN dynamicpruning#12)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(100) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#100, ws_list_price#101, ws_sold_date_sk#102]

(101) ReusedExchange [Reuses operator id: 121]
Output [1]: [d_date_sk#103]

(102) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#102]
Right keys [1]: [d_date_sk#103]
Join condition: None

(103) Project [codegen id : 6]
Output [2]: [ws_quantity#100 AS quantity#104, ws_list_price#101 AS list_price#105]
Input [4]: [ws_quantity#100, ws_list_price#101, ws_sold_date_sk#102, d_date_sk#103]

(104) Union

(105) HashAggregate [codegen id : 7]
Input [2]: [quantity#92, list_price#93]
Keys: []
Functions [1]: [partial_avg(CheckOverflow((promote_precision(cast(cast(quantity#92 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#93 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [2]: [sum#106, count#107]
Results [2]: [sum#108, count#109]

(106) Exchange
Input [2]: [sum#108, count#109]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#110]

(107) HashAggregate [codegen id : 8]
Input [2]: [sum#108, count#109]
Keys: []
Functions [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#92 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#93 as decimal(12,2)))), DecimalType(18,2), true))]
Aggregate Attributes [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#92 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#93 as decimal(12,2)))), DecimalType(18,2), true))#111]
Results [1]: [avg(CheckOverflow((promote_precision(cast(cast(quantity#92 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(list_price#93 as decimal(12,2)))), DecimalType(18,2), true))#111 AS average_sales#112]

Subquery:2 Hosting operator id = 89 Hosting Expression = ss_sold_date_sk#90 IN dynamicpruning#12

Subquery:3 Hosting operator id = 94 Hosting Expression = cs_sold_date_sk#96 IN dynamicpruning#12

Subquery:4 Hosting operator id = 99 Hosting Expression = ws_sold_date_sk#102 IN dynamicpruning#12

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (112)
+- * Project (111)
   +- * Filter (110)
      +- * ColumnarToRow (109)
         +- Scan parquet default.date_dim (108)


(108) Scan parquet default.date_dim
Output [2]: [d_date_sk#48, d_week_seq#113]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(109) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#48, d_week_seq#113]

(110) Filter [codegen id : 1]
Input [2]: [d_date_sk#48, d_week_seq#113]
Condition : ((isnotnull(d_week_seq#113) AND (d_week_seq#113 = Subquery scalar-subquery#114, [id=#115])) AND isnotnull(d_date_sk#48))

(111) Project [codegen id : 1]
Output [1]: [d_date_sk#48]
Input [2]: [d_date_sk#48, d_week_seq#113]

(112) BroadcastExchange
Input [1]: [d_date_sk#48]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#116]

Subquery:6 Hosting operator id = 110 Hosting Expression = Subquery scalar-subquery#114, [id=#115]
* Project (116)
+- * Filter (115)
   +- * ColumnarToRow (114)
      +- Scan parquet default.date_dim (113)


(113) Scan parquet default.date_dim
Output [4]: [d_week_seq#117, d_year#118, d_moy#119, d_dom#120]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,2000), EqualTo(d_moy,12), EqualTo(d_dom,11)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(114) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#117, d_year#118, d_moy#119, d_dom#120]

(115) Filter [codegen id : 1]
Input [4]: [d_week_seq#117, d_year#118, d_moy#119, d_dom#120]
Condition : (((((isnotnull(d_year#118) AND isnotnull(d_moy#119)) AND isnotnull(d_dom#120)) AND (d_year#118 = 2000)) AND (d_moy#119 = 12)) AND (d_dom#120 = 11))

(116) Project [codegen id : 1]
Output [1]: [d_week_seq#117]
Input [4]: [d_week_seq#117, d_year#118, d_moy#119, d_dom#120]

Subquery:7 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (121)
+- * Project (120)
   +- * Filter (119)
      +- * ColumnarToRow (118)
         +- Scan parquet default.date_dim (117)


(117) Scan parquet default.date_dim
Output [2]: [d_date_sk#27, d_year#121]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(118) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#27, d_year#121]

(119) Filter [codegen id : 1]
Input [2]: [d_date_sk#27, d_year#121]
Condition : (((isnotnull(d_year#121) AND (d_year#121 >= 1999)) AND (d_year#121 <= 2001)) AND isnotnull(d_date_sk#27))

(120) Project [codegen id : 1]
Output [1]: [d_date_sk#27]
Input [2]: [d_date_sk#27, d_year#121]

(121) BroadcastExchange
Input [1]: [d_date_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#122]

Subquery:8 Hosting operator id = 13 Hosting Expression = cs_sold_date_sk#18 IN dynamicpruning#12

Subquery:9 Hosting operator id = 36 Hosting Expression = ws_sold_date_sk#33 IN dynamicpruning#12

Subquery:10 Hosting operator id = 84 Hosting Expression = ReusedSubquery Subquery scalar-subquery#61, [id=#62]

Subquery:11 Hosting operator id = 70 Hosting Expression = ss_sold_date_sk#67 IN dynamicpruning#68
BroadcastExchange (126)
+- * Project (125)
   +- * Filter (124)
      +- * ColumnarToRow (123)
         +- Scan parquet default.date_dim (122)


(122) Scan parquet default.date_dim
Output [2]: [d_date_sk#73, d_week_seq#123]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(123) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#73, d_week_seq#123]

(124) Filter [codegen id : 1]
Input [2]: [d_date_sk#73, d_week_seq#123]
Condition : ((isnotnull(d_week_seq#123) AND (d_week_seq#123 = Subquery scalar-subquery#124, [id=#125])) AND isnotnull(d_date_sk#73))

(125) Project [codegen id : 1]
Output [1]: [d_date_sk#73]
Input [2]: [d_date_sk#73, d_week_seq#123]

(126) BroadcastExchange
Input [1]: [d_date_sk#73]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#126]

Subquery:12 Hosting operator id = 124 Hosting Expression = Subquery scalar-subquery#124, [id=#125]
* Project (130)
+- * Filter (129)
   +- * ColumnarToRow (128)
      +- Scan parquet default.date_dim (127)


(127) Scan parquet default.date_dim
Output [4]: [d_week_seq#127, d_year#128, d_moy#129, d_dom#130]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), EqualTo(d_dom,11)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(128) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#127, d_year#128, d_moy#129, d_dom#130]

(129) Filter [codegen id : 1]
Input [4]: [d_week_seq#127, d_year#128, d_moy#129, d_dom#130]
Condition : (((((isnotnull(d_year#128) AND isnotnull(d_moy#129)) AND isnotnull(d_dom#130)) AND (d_year#128 = 1999)) AND (d_moy#129 = 12)) AND (d_dom#130 = 11))

(130) Project [codegen id : 1]
Output [1]: [d_week_seq#127]
Input [4]: [d_week_seq#127, d_year#128, d_moy#129, d_dom#130]


