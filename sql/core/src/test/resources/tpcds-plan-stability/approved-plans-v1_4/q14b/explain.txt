== Physical Plan ==
TakeOrderedAndProject (84)
+- * BroadcastHashJoin Inner BuildRight (83)
   :- * Filter (66)
   :  +- * HashAggregate (65)
   :     +- Exchange (64)
   :        +- * HashAggregate (63)
   :           +- * Project (62)
   :              +- * BroadcastHashJoin Inner BuildRight (61)
   :                 :- * Project (59)
   :                 :  +- * BroadcastHashJoin Inner BuildRight (58)
   :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (51)
   :                 :     :  :- * Filter (3)
   :                 :     :  :  +- * ColumnarToRow (2)
   :                 :     :  :     +- Scan parquet spark_catalog.default.store_sales (1)
   :                 :     :  +- BroadcastExchange (50)
   :                 :     :     +- * Project (49)
   :                 :     :        +- * BroadcastHashJoin Inner BuildRight (48)
   :                 :     :           :- * Filter (6)
   :                 :     :           :  +- * ColumnarToRow (5)
   :                 :     :           :     +- Scan parquet spark_catalog.default.item (4)
   :                 :     :           +- BroadcastExchange (47)
   :                 :     :              +- * BroadcastHashJoin LeftSemi BuildRight (46)
   :                 :     :                 :- * HashAggregate (35)
   :                 :     :                 :  +- Exchange (34)
   :                 :     :                 :     +- * HashAggregate (33)
   :                 :     :                 :        +- * BroadcastHashJoin LeftSemi BuildRight (32)
   :                 :     :                 :           :- * Project (18)
   :                 :     :                 :           :  +- * BroadcastHashJoin Inner BuildRight (17)
   :                 :     :                 :           :     :- * Project (15)
   :                 :     :                 :           :     :  +- * BroadcastHashJoin Inner BuildRight (14)
   :                 :     :                 :           :     :     :- * Filter (9)
   :                 :     :                 :           :     :     :  +- * ColumnarToRow (8)
   :                 :     :                 :           :     :     :     +- Scan parquet spark_catalog.default.store_sales (7)
   :                 :     :                 :           :     :     +- BroadcastExchange (13)
   :                 :     :                 :           :     :        +- * Filter (12)
   :                 :     :                 :           :     :           +- * ColumnarToRow (11)
   :                 :     :                 :           :     :              +- Scan parquet spark_catalog.default.item (10)
   :                 :     :                 :           :     +- ReusedExchange (16)
   :                 :     :                 :           +- BroadcastExchange (31)
   :                 :     :                 :              +- * Project (30)
   :                 :     :                 :                 +- * BroadcastHashJoin Inner BuildRight (29)
   :                 :     :                 :                    :- * Project (27)
   :                 :     :                 :                    :  +- * BroadcastHashJoin Inner BuildRight (26)
   :                 :     :                 :                    :     :- * Filter (21)
   :                 :     :                 :                    :     :  +- * ColumnarToRow (20)
   :                 :     :                 :                    :     :     +- Scan parquet spark_catalog.default.catalog_sales (19)
   :                 :     :                 :                    :     +- BroadcastExchange (25)
   :                 :     :                 :                    :        +- * Filter (24)
   :                 :     :                 :                    :           +- * ColumnarToRow (23)
   :                 :     :                 :                    :              +- Scan parquet spark_catalog.default.item (22)
   :                 :     :                 :                    +- ReusedExchange (28)
   :                 :     :                 +- BroadcastExchange (45)
   :                 :     :                    +- * Project (44)
   :                 :     :                       +- * BroadcastHashJoin Inner BuildRight (43)
   :                 :     :                          :- * Project (41)
   :                 :     :                          :  +- * BroadcastHashJoin Inner BuildRight (40)
   :                 :     :                          :     :- * Filter (38)
   :                 :     :                          :     :  +- * ColumnarToRow (37)
   :                 :     :                          :     :     +- Scan parquet spark_catalog.default.web_sales (36)
   :                 :     :                          :     +- ReusedExchange (39)
   :                 :     :                          +- ReusedExchange (42)
   :                 :     +- BroadcastExchange (57)
   :                 :        +- * BroadcastHashJoin LeftSemi BuildRight (56)
   :                 :           :- * Filter (54)
   :                 :           :  +- * ColumnarToRow (53)
   :                 :           :     +- Scan parquet spark_catalog.default.item (52)
   :                 :           +- ReusedExchange (55)
   :                 +- ReusedExchange (60)
   +- BroadcastExchange (82)
      +- * Filter (81)
         +- * HashAggregate (80)
            +- Exchange (79)
               +- * HashAggregate (78)
                  +- * Project (77)
                     +- * BroadcastHashJoin Inner BuildRight (76)
                        :- * Project (74)
                        :  +- * BroadcastHashJoin Inner BuildRight (73)
                        :     :- * BroadcastHashJoin LeftSemi BuildRight (71)
                        :     :  :- * Filter (69)
                        :     :  :  +- * ColumnarToRow (68)
                        :     :  :     +- Scan parquet spark_catalog.default.store_sales (67)
                        :     :  +- ReusedExchange (70)
                        :     +- ReusedExchange (72)
                        +- ReusedExchange (75)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(6) Filter [codegen id : 11]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(7) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 6]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]

(9) Filter [codegen id : 6]
Input [2]: [ss_item_sk#1, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(10) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(12) Filter [codegen id : 1]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : (((isnotnull(i_item_sk#6) AND isnotnull(i_brand_id#7)) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(13) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(14) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(15) Project [codegen id : 6]
Output [4]: [ss_sold_date_sk#4, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [6]: [ss_item_sk#1, ss_sold_date_sk#4, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(16) ReusedExchange [Reuses operator id: 117]
Output [1]: [d_date_sk#11]

(17) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(18) Project [codegen id : 6]
Output [3]: [i_brand_id#7 AS brand_id#12, i_class_id#8 AS class_id#13, i_category_id#9 AS category_id#14]
Input [5]: [ss_sold_date_sk#4, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#11]

(19) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_item_sk#15, cs_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#16), dynamicpruningexpression(cs_sold_date_sk#16 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(20) ColumnarToRow [codegen id : 5]
Input [2]: [cs_item_sk#15, cs_sold_date_sk#16]

(21) Filter [codegen id : 5]
Input [2]: [cs_item_sk#15, cs_sold_date_sk#16]
Condition : isnotnull(cs_item_sk#15)

(22) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(23) ColumnarToRow [codegen id : 3]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(24) Filter [codegen id : 3]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : isnotnull(i_item_sk#6)

(25) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(26) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_item_sk#15]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(27) Project [codegen id : 5]
Output [4]: [cs_sold_date_sk#16, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [6]: [cs_item_sk#15, cs_sold_date_sk#16, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(28) ReusedExchange [Reuses operator id: 117]
Output [1]: [d_date_sk#11]

(29) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(30) Project [codegen id : 5]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [cs_sold_date_sk#16, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#11]

(31) BroadcastExchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=3]

(32) BroadcastHashJoin [codegen id : 6]
Left keys [6]: [coalesce(brand_id#12, 0), isnull(brand_id#12), coalesce(class_id#13, 0), isnull(class_id#13), coalesce(category_id#14, 0), isnull(category_id#14)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join type: LeftSemi
Join condition: None

(33) HashAggregate [codegen id : 6]
Input [3]: [brand_id#12, class_id#13, category_id#14]
Keys [3]: [brand_id#12, class_id#13, category_id#14]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#12, class_id#13, category_id#14]

(34) Exchange
Input [3]: [brand_id#12, class_id#13, category_id#14]
Arguments: hashpartitioning(brand_id#12, class_id#13, category_id#14, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(35) HashAggregate [codegen id : 10]
Input [3]: [brand_id#12, class_id#13, category_id#14]
Keys [3]: [brand_id#12, class_id#13, category_id#14]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#12, class_id#13, category_id#14]

(36) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_item_sk#17, ws_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#18), dynamicpruningexpression(ws_sold_date_sk#18 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(37) ColumnarToRow [codegen id : 9]
Input [2]: [ws_item_sk#17, ws_sold_date_sk#18]

(38) Filter [codegen id : 9]
Input [2]: [ws_item_sk#17, ws_sold_date_sk#18]
Condition : isnotnull(ws_item_sk#17)

(39) ReusedExchange [Reuses operator id: 25]
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(40) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_item_sk#17]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(41) Project [codegen id : 9]
Output [4]: [ws_sold_date_sk#18, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [6]: [ws_item_sk#17, ws_sold_date_sk#18, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(42) ReusedExchange [Reuses operator id: 117]
Output [1]: [d_date_sk#11]

(43) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_sold_date_sk#18]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(44) Project [codegen id : 9]
Output [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Input [5]: [ws_sold_date_sk#18, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#11]

(45) BroadcastExchange
Input [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=5]

(46) BroadcastHashJoin [codegen id : 10]
Left keys [6]: [coalesce(brand_id#12, 0), isnull(brand_id#12), coalesce(class_id#13, 0), isnull(class_id#13), coalesce(category_id#14, 0), isnull(category_id#14)]
Right keys [6]: [coalesce(i_brand_id#7, 0), isnull(i_brand_id#7), coalesce(i_class_id#8, 0), isnull(i_class_id#8), coalesce(i_category_id#9, 0), isnull(i_category_id#9)]
Join type: LeftSemi
Join condition: None

(47) BroadcastExchange
Input [3]: [brand_id#12, class_id#13, category_id#14]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [plan_id=6]

(48) BroadcastHashJoin [codegen id : 11]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#12, class_id#13, category_id#14]
Join type: Inner
Join condition: None

(49) Project [codegen id : 11]
Output [1]: [i_item_sk#6 AS ss_item_sk#19]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#12, class_id#13, category_id#14]

(50) BroadcastExchange
Input [1]: [ss_item_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

(51) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#19]
Join type: LeftSemi
Join condition: None

(52) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(53) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(54) Filter [codegen id : 23]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : (((isnotnull(i_item_sk#6) AND isnotnull(i_brand_id#7)) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(55) ReusedExchange [Reuses operator id: 50]
Output [1]: [ss_item_sk#19]

(56) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [i_item_sk#6]
Right keys [1]: [ss_item_sk#19]
Join type: LeftSemi
Join condition: None

(57) BroadcastExchange
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=8]

(58) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(59) Project [codegen id : 25]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(60) ReusedExchange [Reuses operator id: 108]
Output [1]: [d_date_sk#11]

(61) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(62) Project [codegen id : 25]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#7, i_class_id#8, i_category_id#9]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#7, i_class_id#8, i_category_id#9, d_date_sk#11]

(63) HashAggregate [codegen id : 25]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#7, i_class_id#8, i_category_id#9]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [partial_sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), partial_count(1)]
Aggregate Attributes [3]: [sum#20, isEmpty#21, count#22]
Results [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#23, isEmpty#24, count#25]

(64) Exchange
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#23, isEmpty#24, count#25]
Arguments: hashpartitioning(i_brand_id#7, i_class_id#8, i_category_id#9, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(65) HashAggregate [codegen id : 52]
Input [6]: [i_brand_id#7, i_class_id#8, i_category_id#9, sum#23, isEmpty#24, count#25]
Keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Functions [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#26, count(1)#27]
Results [6]: [store AS channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#26 AS sales#29, count(1)#27 AS number_sales#30]

(66) Filter [codegen id : 52]
Input [6]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sales#29, number_sales#30]
Condition : (isnotnull(sales#29) AND (cast(sales#29 as decimal(32,6)) > cast(Subquery scalar-subquery#31, [id=#32] as decimal(32,6))))

(67) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#33)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(68) ColumnarToRow [codegen id : 50]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(69) Filter [codegen id : 50]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(70) ReusedExchange [Reuses operator id: 50]
Output [1]: [ss_item_sk#19]

(71) BroadcastHashJoin [codegen id : 50]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#19]
Join type: LeftSemi
Join condition: None

(72) ReusedExchange [Reuses operator id: 57]
Output [4]: [i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]

(73) BroadcastHashJoin [codegen id : 50]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#34]
Join type: Inner
Join condition: None

(74) Project [codegen id : 50]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#35, i_class_id#36, i_category_id#37]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]

(75) ReusedExchange [Reuses operator id: 122]
Output [1]: [d_date_sk#11]

(76) BroadcastHashJoin [codegen id : 50]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(77) Project [codegen id : 50]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#35, i_class_id#36, i_category_id#37]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#35, i_class_id#36, i_category_id#37, d_date_sk#11]

(78) HashAggregate [codegen id : 50]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#35, i_class_id#36, i_category_id#37]
Keys [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Functions [2]: [partial_sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), partial_count(1)]
Aggregate Attributes [3]: [sum#38, isEmpty#39, count#40]
Results [6]: [i_brand_id#35, i_class_id#36, i_category_id#37, sum#41, isEmpty#42, count#43]

(79) Exchange
Input [6]: [i_brand_id#35, i_class_id#36, i_category_id#37, sum#41, isEmpty#42, count#43]
Arguments: hashpartitioning(i_brand_id#35, i_class_id#36, i_category_id#37, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(80) HashAggregate [codegen id : 51]
Input [6]: [i_brand_id#35, i_class_id#36, i_category_id#37, sum#41, isEmpty#42, count#43]
Keys [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Functions [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#44, count(1)#45]
Results [6]: [store AS channel#46, i_brand_id#35, i_class_id#36, i_category_id#37, sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#44 AS sales#47, count(1)#45 AS number_sales#48]

(81) Filter [codegen id : 51]
Input [6]: [channel#46, i_brand_id#35, i_class_id#36, i_category_id#37, sales#47, number_sales#48]
Condition : (isnotnull(sales#47) AND (cast(sales#47 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#31, [id=#32] as decimal(32,6))))

(82) BroadcastExchange
Input [6]: [channel#46, i_brand_id#35, i_class_id#36, i_category_id#37, sales#47, number_sales#48]
Arguments: HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true]),false), [plan_id=11]

(83) BroadcastHashJoin [codegen id : 52]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Join type: Inner
Join condition: None

(84) TakeOrderedAndProject
Input [12]: [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sales#29, number_sales#30, channel#46, i_brand_id#35, i_class_id#36, i_category_id#37, sales#47, number_sales#48]
Arguments: 100, [i_brand_id#7 ASC NULLS FIRST, i_class_id#8 ASC NULLS FIRST, i_category_id#9 ASC NULLS FIRST], [channel#28, i_brand_id#7, i_class_id#8, i_category_id#9, sales#29, number_sales#30, channel#46, i_brand_id#35, i_class_id#36, i_category_id#37, sales#47, number_sales#48]

===== Subqueries =====

Subquery:1 Hosting operator id = 66 Hosting Expression = Subquery scalar-subquery#31, [id=#32]
* HashAggregate (103)
+- Exchange (102)
   +- * HashAggregate (101)
      +- Union (100)
         :- * Project (89)
         :  +- * BroadcastHashJoin Inner BuildRight (88)
         :     :- * ColumnarToRow (86)
         :     :  +- Scan parquet spark_catalog.default.store_sales (85)
         :     +- ReusedExchange (87)
         :- * Project (94)
         :  +- * BroadcastHashJoin Inner BuildRight (93)
         :     :- * ColumnarToRow (91)
         :     :  +- Scan parquet spark_catalog.default.catalog_sales (90)
         :     +- ReusedExchange (92)
         +- * Project (99)
            +- * BroadcastHashJoin Inner BuildRight (98)
               :- * ColumnarToRow (96)
               :  +- Scan parquet spark_catalog.default.web_sales (95)
               +- ReusedExchange (97)


(85) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#10)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(86) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(87) ReusedExchange [Reuses operator id: 117]
Output [1]: [d_date_sk#11]

(88) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(89) Project [codegen id : 2]
Output [2]: [ss_quantity#2 AS quantity#49, ss_list_price#3 AS list_price#50]
Input [4]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, d_date_sk#11]

(90) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_quantity#51, cs_list_price#52, cs_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#16), dynamicpruningexpression(cs_sold_date_sk#16 IN dynamicpruning#10)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(91) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#51, cs_list_price#52, cs_sold_date_sk#16]

(92) ReusedExchange [Reuses operator id: 117]
Output [1]: [d_date_sk#11]

(93) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(94) Project [codegen id : 4]
Output [2]: [cs_quantity#51 AS quantity#53, cs_list_price#52 AS list_price#54]
Input [4]: [cs_quantity#51, cs_list_price#52, cs_sold_date_sk#16, d_date_sk#11]

(95) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_quantity#55, ws_list_price#56, ws_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#18), dynamicpruningexpression(ws_sold_date_sk#18 IN dynamicpruning#10)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(96) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#55, ws_list_price#56, ws_sold_date_sk#18]

(97) ReusedExchange [Reuses operator id: 117]
Output [1]: [d_date_sk#11]

(98) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#18]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(99) Project [codegen id : 6]
Output [2]: [ws_quantity#55 AS quantity#57, ws_list_price#56 AS list_price#58]
Input [4]: [ws_quantity#55, ws_list_price#56, ws_sold_date_sk#18, d_date_sk#11]

(100) Union

(101) HashAggregate [codegen id : 7]
Input [2]: [quantity#49, list_price#50]
Keys: []
Functions [1]: [partial_avg((cast(quantity#49 as decimal(10,0)) * list_price#50))]
Aggregate Attributes [2]: [sum#59, count#60]
Results [2]: [sum#61, count#62]

(102) Exchange
Input [2]: [sum#61, count#62]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=12]

(103) HashAggregate [codegen id : 8]
Input [2]: [sum#61, count#62]
Keys: []
Functions [1]: [avg((cast(quantity#49 as decimal(10,0)) * list_price#50))]
Aggregate Attributes [1]: [avg((cast(quantity#49 as decimal(10,0)) * list_price#50))#63]
Results [1]: [avg((cast(quantity#49 as decimal(10,0)) * list_price#50))#63 AS average_sales#64]

Subquery:2 Hosting operator id = 85 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#10

Subquery:3 Hosting operator id = 90 Hosting Expression = cs_sold_date_sk#16 IN dynamicpruning#10

Subquery:4 Hosting operator id = 95 Hosting Expression = ws_sold_date_sk#18 IN dynamicpruning#10

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (108)
+- * Project (107)
   +- * Filter (106)
      +- * ColumnarToRow (105)
         +- Scan parquet spark_catalog.default.date_dim (104)


(104) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#11, d_week_seq#65]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), EqualTo(d_week_seq,ScalarSubquery#66), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(105) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#11, d_week_seq#65]

(106) Filter [codegen id : 1]
Input [2]: [d_date_sk#11, d_week_seq#65]
Condition : ((isnotnull(d_week_seq#65) AND (d_week_seq#65 = ReusedSubquery Subquery scalar-subquery#66, [id=#67])) AND isnotnull(d_date_sk#11))

(107) Project [codegen id : 1]
Output [1]: [d_date_sk#11]
Input [2]: [d_date_sk#11, d_week_seq#65]

(108) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=13]

Subquery:6 Hosting operator id = 106 Hosting Expression = ReusedSubquery Subquery scalar-subquery#66, [id=#67]

Subquery:7 Hosting operator id = 104 Hosting Expression = Subquery scalar-subquery#66, [id=#67]
* Project (112)
+- * Filter (111)
   +- * ColumnarToRow (110)
      +- Scan parquet spark_catalog.default.date_dim (109)


(109) Scan parquet spark_catalog.default.date_dim
Output [4]: [d_week_seq#68, d_year#69, d_moy#70, d_dom#71]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,2000), EqualTo(d_moy,12), EqualTo(d_dom,11)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(110) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#68, d_year#69, d_moy#70, d_dom#71]

(111) Filter [codegen id : 1]
Input [4]: [d_week_seq#68, d_year#69, d_moy#70, d_dom#71]
Condition : (((((isnotnull(d_year#69) AND isnotnull(d_moy#70)) AND isnotnull(d_dom#71)) AND (d_year#69 = 2000)) AND (d_moy#70 = 12)) AND (d_dom#71 = 11))

(112) Project [codegen id : 1]
Output [1]: [d_week_seq#68]
Input [4]: [d_week_seq#68, d_year#69, d_moy#70, d_dom#71]

Subquery:8 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#10
BroadcastExchange (117)
+- * Project (116)
   +- * Filter (115)
      +- * ColumnarToRow (114)
         +- Scan parquet spark_catalog.default.date_dim (113)


(113) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#11, d_year#72]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(114) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#11, d_year#72]

(115) Filter [codegen id : 1]
Input [2]: [d_date_sk#11, d_year#72]
Condition : (((isnotnull(d_year#72) AND (d_year#72 >= 1999)) AND (d_year#72 <= 2001)) AND isnotnull(d_date_sk#11))

(116) Project [codegen id : 1]
Output [1]: [d_date_sk#11]
Input [2]: [d_date_sk#11, d_year#72]

(117) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=14]

Subquery:9 Hosting operator id = 19 Hosting Expression = cs_sold_date_sk#16 IN dynamicpruning#10

Subquery:10 Hosting operator id = 36 Hosting Expression = ws_sold_date_sk#18 IN dynamicpruning#10

Subquery:11 Hosting operator id = 81 Hosting Expression = ReusedSubquery Subquery scalar-subquery#31, [id=#32]

Subquery:12 Hosting operator id = 67 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#33
BroadcastExchange (122)
+- * Project (121)
   +- * Filter (120)
      +- * ColumnarToRow (119)
         +- Scan parquet spark_catalog.default.date_dim (118)


(118) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#11, d_week_seq#65]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), EqualTo(d_week_seq,ScalarSubquery#73), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(119) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#11, d_week_seq#65]

(120) Filter [codegen id : 1]
Input [2]: [d_date_sk#11, d_week_seq#65]
Condition : ((isnotnull(d_week_seq#65) AND (d_week_seq#65 = ReusedSubquery Subquery scalar-subquery#73, [id=#74])) AND isnotnull(d_date_sk#11))

(121) Project [codegen id : 1]
Output [1]: [d_date_sk#11]
Input [2]: [d_date_sk#11, d_week_seq#65]

(122) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=15]

Subquery:13 Hosting operator id = 120 Hosting Expression = ReusedSubquery Subquery scalar-subquery#73, [id=#74]

Subquery:14 Hosting operator id = 118 Hosting Expression = Subquery scalar-subquery#73, [id=#74]
* Project (126)
+- * Filter (125)
   +- * ColumnarToRow (124)
      +- Scan parquet spark_catalog.default.date_dim (123)


(123) Scan parquet spark_catalog.default.date_dim
Output [4]: [d_week_seq#75, d_year#76, d_moy#77, d_dom#78]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), EqualTo(d_dom,11)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(124) ColumnarToRow [codegen id : 1]
Input [4]: [d_week_seq#75, d_year#76, d_moy#77, d_dom#78]

(125) Filter [codegen id : 1]
Input [4]: [d_week_seq#75, d_year#76, d_moy#77, d_dom#78]
Condition : (((((isnotnull(d_year#76) AND isnotnull(d_moy#77)) AND isnotnull(d_dom#78)) AND (d_year#76 = 1999)) AND (d_moy#77 = 12)) AND (d_dom#78 = 11))

(126) Project [codegen id : 1]
Output [1]: [d_week_seq#75]
Input [4]: [d_week_seq#75, d_year#76, d_moy#77, d_dom#78]


