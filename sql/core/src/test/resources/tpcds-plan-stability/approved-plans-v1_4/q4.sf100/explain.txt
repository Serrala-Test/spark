== Physical Plan ==
TakeOrderedAndProject (118)
+- * Project (117)
   +- * SortMergeJoin Inner (116)
      :- * Project (98)
      :  +- * SortMergeJoin Inner (97)
      :     :- * Project (78)
      :     :  +- * SortMergeJoin Inner (77)
      :     :     :- * Project (59)
      :     :     :  +- * SortMergeJoin Inner (58)
      :     :     :     :- * SortMergeJoin Inner (39)
      :     :     :     :  :- * Sort (21)
      :     :     :     :  :  +- Exchange (20)
      :     :     :     :  :     +- * Filter (19)
      :     :     :     :  :        +- * HashAggregate (18)
      :     :     :     :  :           +- Exchange (17)
      :     :     :     :  :              +- * HashAggregate (16)
      :     :     :     :  :                 +- * Project (15)
      :     :     :     :  :                    +- * SortMergeJoin Inner (14)
      :     :     :     :  :                       :- * Sort (8)
      :     :     :     :  :                       :  +- Exchange (7)
      :     :     :     :  :                       :     +- * Project (6)
      :     :     :     :  :                       :        +- * BroadcastHashJoin Inner BuildRight (5)
      :     :     :     :  :                       :           :- * Filter (3)
      :     :     :     :  :                       :           :  +- * ColumnarToRow (2)
      :     :     :     :  :                       :           :     +- Scan parquet spark_catalog.default.store_sales (1)
      :     :     :     :  :                       :           +- ReusedExchange (4)
      :     :     :     :  :                       +- * Sort (13)
      :     :     :     :  :                          +- Exchange (12)
      :     :     :     :  :                             +- * Filter (11)
      :     :     :     :  :                                +- * ColumnarToRow (10)
      :     :     :     :  :                                   +- Scan parquet spark_catalog.default.customer (9)
      :     :     :     :  +- * Sort (38)
      :     :     :     :     +- Exchange (37)
      :     :     :     :        +- * HashAggregate (36)
      :     :     :     :           +- Exchange (35)
      :     :     :     :              +- * HashAggregate (34)
      :     :     :     :                 +- * Project (33)
      :     :     :     :                    +- * SortMergeJoin Inner (32)
      :     :     :     :                       :- * Sort (29)
      :     :     :     :                       :  +- Exchange (28)
      :     :     :     :                       :     +- * Project (27)
      :     :     :     :                       :        +- * BroadcastHashJoin Inner BuildRight (26)
      :     :     :     :                       :           :- * Filter (24)
      :     :     :     :                       :           :  +- * ColumnarToRow (23)
      :     :     :     :                       :           :     +- Scan parquet spark_catalog.default.store_sales (22)
      :     :     :     :                       :           +- ReusedExchange (25)
      :     :     :     :                       +- * Sort (31)
      :     :     :     :                          +- ReusedExchange (30)
      :     :     :     +- * Sort (57)
      :     :     :        +- Exchange (56)
      :     :     :           +- * Filter (55)
      :     :     :              +- * HashAggregate (54)
      :     :     :                 +- Exchange (53)
      :     :     :                    +- * HashAggregate (52)
      :     :     :                       +- * Project (51)
      :     :     :                          +- * SortMergeJoin Inner (50)
      :     :     :                             :- * Sort (47)
      :     :     :                             :  +- Exchange (46)
      :     :     :                             :     +- * Project (45)
      :     :     :                             :        +- * BroadcastHashJoin Inner BuildRight (44)
      :     :     :                             :           :- * Filter (42)
      :     :     :                             :           :  +- * ColumnarToRow (41)
      :     :     :                             :           :     +- Scan parquet spark_catalog.default.catalog_sales (40)
      :     :     :                             :           +- ReusedExchange (43)
      :     :     :                             +- * Sort (49)
      :     :     :                                +- ReusedExchange (48)
      :     :     +- * Sort (76)
      :     :        +- Exchange (75)
      :     :           +- * HashAggregate (74)
      :     :              +- Exchange (73)
      :     :                 +- * HashAggregate (72)
      :     :                    +- * Project (71)
      :     :                       +- * SortMergeJoin Inner (70)
      :     :                          :- * Sort (67)
      :     :                          :  +- Exchange (66)
      :     :                          :     +- * Project (65)
      :     :                          :        +- * BroadcastHashJoin Inner BuildRight (64)
      :     :                          :           :- * Filter (62)
      :     :                          :           :  +- * ColumnarToRow (61)
      :     :                          :           :     +- Scan parquet spark_catalog.default.catalog_sales (60)
      :     :                          :           +- ReusedExchange (63)
      :     :                          +- * Sort (69)
      :     :                             +- ReusedExchange (68)
      :     +- * Sort (96)
      :        +- Exchange (95)
      :           +- * Filter (94)
      :              +- * HashAggregate (93)
      :                 +- Exchange (92)
      :                    +- * HashAggregate (91)
      :                       +- * Project (90)
      :                          +- * SortMergeJoin Inner (89)
      :                             :- * Sort (86)
      :                             :  +- Exchange (85)
      :                             :     +- * Project (84)
      :                             :        +- * BroadcastHashJoin Inner BuildRight (83)
      :                             :           :- * Filter (81)
      :                             :           :  +- * ColumnarToRow (80)
      :                             :           :     +- Scan parquet spark_catalog.default.web_sales (79)
      :                             :           +- ReusedExchange (82)
      :                             +- * Sort (88)
      :                                +- ReusedExchange (87)
      +- * Sort (115)
         +- Exchange (114)
            +- * HashAggregate (113)
               +- Exchange (112)
                  +- * HashAggregate (111)
                     +- * Project (110)
                        +- * SortMergeJoin Inner (109)
                           :- * Sort (106)
                           :  +- Exchange (105)
                           :     +- * Project (104)
                           :        +- * BroadcastHashJoin Inner BuildRight (103)
                           :           :- * Filter (101)
                           :           :  +- * ColumnarToRow (100)
                           :           :     +- Scan parquet spark_catalog.default.web_sales (99)
                           :           +- ReusedExchange (102)
                           +- * Sort (108)
                              +- ReusedExchange (107)


(1) Scan parquet spark_catalog.default.store_sales
Output [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, ss_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#6), dynamicpruningexpression(ss_sold_date_sk#6 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, ss_sold_date_sk#6]

(3) Filter [codegen id : 2]
Input [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, ss_sold_date_sk#6]
Condition : isnotnull(ss_customer_sk#1)

(4) ReusedExchange [Reuses operator id: 122]
Output [2]: [d_date_sk#8, d_year#9]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#8]
Join type: Inner
Join condition: None

(6) Project [codegen id : 2]
Output [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#9]
Input [8]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, ss_sold_date_sk#6, d_date_sk#8, d_year#9]

(7) Exchange
Input [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#9]
Arguments: hashpartitioning(ss_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(8) Sort [codegen id : 3]
Input [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#9]
Arguments: [ss_customer_sk#1 ASC NULLS FIRST], false, 0

(9) Scan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(10) ColumnarToRow [codegen id : 4]
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]

(11) Filter [codegen id : 4]
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Condition : (isnotnull(c_customer_sk#10) AND isnotnull(c_customer_id#11))

(12) Exchange
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Arguments: hashpartitioning(c_customer_sk#10, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(13) Sort [codegen id : 5]
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Arguments: [c_customer_sk#10 ASC NULLS FIRST], false, 0

(14) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#10]
Join type: Inner
Join condition: None

(15) Project [codegen id : 6]
Output [12]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#9]
Input [14]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#9, c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]

(16) HashAggregate [codegen id : 6]
Input [12]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#9]
Keys [8]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9]
Functions [1]: [partial_sum(((((ss_ext_list_price#5 - ss_ext_wholesale_cost#4) - ss_ext_discount_amt#2) + ss_ext_sales_price#3) / 2))]
Aggregate Attributes [2]: [sum#18, isEmpty#19]
Results [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9, sum#20, isEmpty#21]

(17) Exchange
Input [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9, sum#20, isEmpty#21]
Arguments: hashpartitioning(c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(18) HashAggregate [codegen id : 7]
Input [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9, sum#20, isEmpty#21]
Keys [8]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9]
Functions [1]: [sum(((((ss_ext_list_price#5 - ss_ext_wholesale_cost#4) - ss_ext_discount_amt#2) + ss_ext_sales_price#3) / 2))]
Aggregate Attributes [1]: [sum(((((ss_ext_list_price#5 - ss_ext_wholesale_cost#4) - ss_ext_discount_amt#2) + ss_ext_sales_price#3) / 2))#22]
Results [2]: [c_customer_id#11 AS customer_id#23, sum(((((ss_ext_list_price#5 - ss_ext_wholesale_cost#4) - ss_ext_discount_amt#2) + ss_ext_sales_price#3) / 2))#22 AS year_total#24]

(19) Filter [codegen id : 7]
Input [2]: [customer_id#23, year_total#24]
Condition : (isnotnull(year_total#24) AND (year_total#24 > 0.000000))

(20) Exchange
Input [2]: [customer_id#23, year_total#24]
Arguments: hashpartitioning(customer_id#23, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(21) Sort [codegen id : 8]
Input [2]: [customer_id#23, year_total#24]
Arguments: [customer_id#23 ASC NULLS FIRST], false, 0

(22) Scan parquet spark_catalog.default.store_sales
Output [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, ss_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#6), dynamicpruningexpression(ss_sold_date_sk#6 IN dynamicpruning#25)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(23) ColumnarToRow [codegen id : 10]
Input [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, ss_sold_date_sk#6]

(24) Filter [codegen id : 10]
Input [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, ss_sold_date_sk#6]
Condition : isnotnull(ss_customer_sk#1)

(25) ReusedExchange [Reuses operator id: 126]
Output [2]: [d_date_sk#8, d_year#9]

(26) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#8]
Join type: Inner
Join condition: None

(27) Project [codegen id : 10]
Output [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#9]
Input [8]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, ss_sold_date_sk#6, d_date_sk#8, d_year#9]

(28) Exchange
Input [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#9]
Arguments: hashpartitioning(ss_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(29) Sort [codegen id : 11]
Input [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#9]
Arguments: [ss_customer_sk#1 ASC NULLS FIRST], false, 0

(30) ReusedExchange [Reuses operator id: 12]
Output [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]

(31) Sort [codegen id : 13]
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Arguments: [c_customer_sk#10 ASC NULLS FIRST], false, 0

(32) SortMergeJoin [codegen id : 14]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#10]
Join type: Inner
Join condition: None

(33) Project [codegen id : 14]
Output [12]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#9]
Input [14]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#9, c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]

(34) HashAggregate [codegen id : 14]
Input [12]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#9]
Keys [8]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9]
Functions [1]: [partial_sum(((((ss_ext_list_price#5 - ss_ext_wholesale_cost#4) - ss_ext_discount_amt#2) + ss_ext_sales_price#3) / 2))]
Aggregate Attributes [2]: [sum#26, isEmpty#27]
Results [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9, sum#28, isEmpty#29]

(35) Exchange
Input [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9, sum#28, isEmpty#29]
Arguments: hashpartitioning(c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(36) HashAggregate [codegen id : 15]
Input [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9, sum#28, isEmpty#29]
Keys [8]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9]
Functions [1]: [sum(((((ss_ext_list_price#5 - ss_ext_wholesale_cost#4) - ss_ext_discount_amt#2) + ss_ext_sales_price#3) / 2))]
Aggregate Attributes [1]: [sum(((((ss_ext_list_price#5 - ss_ext_wholesale_cost#4) - ss_ext_discount_amt#2) + ss_ext_sales_price#3) / 2))#22]
Results [8]: [c_customer_id#11 AS customer_id#30, c_first_name#12 AS customer_first_name#31, c_last_name#13 AS customer_last_name#32, c_preferred_cust_flag#14 AS customer_preferred_cust_flag#33, c_birth_country#15 AS customer_birth_country#34, c_login#16 AS customer_login#35, c_email_address#17 AS customer_email_address#36, sum(((((ss_ext_list_price#5 - ss_ext_wholesale_cost#4) - ss_ext_discount_amt#2) + ss_ext_sales_price#3) / 2))#22 AS year_total#37]

(37) Exchange
Input [8]: [customer_id#30, customer_first_name#31, customer_last_name#32, customer_preferred_cust_flag#33, customer_birth_country#34, customer_login#35, customer_email_address#36, year_total#37]
Arguments: hashpartitioning(customer_id#30, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(38) Sort [codegen id : 16]
Input [8]: [customer_id#30, customer_first_name#31, customer_last_name#32, customer_preferred_cust_flag#33, customer_birth_country#34, customer_login#35, customer_email_address#36, year_total#37]
Arguments: [customer_id#30 ASC NULLS FIRST], false, 0

(39) SortMergeJoin [codegen id : 17]
Left keys [1]: [customer_id#23]
Right keys [1]: [customer_id#30]
Join type: Inner
Join condition: None

(40) Scan parquet spark_catalog.default.catalog_sales
Output [6]: [cs_bill_customer_sk#38, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, cs_sold_date_sk#43]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#43), dynamicpruningexpression(cs_sold_date_sk#43 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2)>

(41) ColumnarToRow [codegen id : 19]
Input [6]: [cs_bill_customer_sk#38, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, cs_sold_date_sk#43]

(42) Filter [codegen id : 19]
Input [6]: [cs_bill_customer_sk#38, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, cs_sold_date_sk#43]
Condition : isnotnull(cs_bill_customer_sk#38)

(43) ReusedExchange [Reuses operator id: 122]
Output [2]: [d_date_sk#8, d_year#9]

(44) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_sold_date_sk#43]
Right keys [1]: [d_date_sk#8]
Join type: Inner
Join condition: None

(45) Project [codegen id : 19]
Output [6]: [cs_bill_customer_sk#38, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, d_year#9]
Input [8]: [cs_bill_customer_sk#38, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, cs_sold_date_sk#43, d_date_sk#8, d_year#9]

(46) Exchange
Input [6]: [cs_bill_customer_sk#38, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, d_year#9]
Arguments: hashpartitioning(cs_bill_customer_sk#38, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(47) Sort [codegen id : 20]
Input [6]: [cs_bill_customer_sk#38, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, d_year#9]
Arguments: [cs_bill_customer_sk#38 ASC NULLS FIRST], false, 0

(48) ReusedExchange [Reuses operator id: 12]
Output [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]

(49) Sort [codegen id : 22]
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Arguments: [c_customer_sk#10 ASC NULLS FIRST], false, 0

(50) SortMergeJoin [codegen id : 23]
Left keys [1]: [cs_bill_customer_sk#38]
Right keys [1]: [c_customer_sk#10]
Join type: Inner
Join condition: None

(51) Project [codegen id : 23]
Output [12]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, d_year#9]
Input [14]: [cs_bill_customer_sk#38, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, d_year#9, c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]

(52) HashAggregate [codegen id : 23]
Input [12]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, d_year#9]
Keys [8]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9]
Functions [1]: [partial_sum(((((cs_ext_list_price#42 - cs_ext_wholesale_cost#41) - cs_ext_discount_amt#39) + cs_ext_sales_price#40) / 2))]
Aggregate Attributes [2]: [sum#44, isEmpty#45]
Results [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9, sum#46, isEmpty#47]

(53) Exchange
Input [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9, sum#46, isEmpty#47]
Arguments: hashpartitioning(c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(54) HashAggregate [codegen id : 24]
Input [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9, sum#46, isEmpty#47]
Keys [8]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9]
Functions [1]: [sum(((((cs_ext_list_price#42 - cs_ext_wholesale_cost#41) - cs_ext_discount_amt#39) + cs_ext_sales_price#40) / 2))]
Aggregate Attributes [1]: [sum(((((cs_ext_list_price#42 - cs_ext_wholesale_cost#41) - cs_ext_discount_amt#39) + cs_ext_sales_price#40) / 2))#48]
Results [2]: [c_customer_id#11 AS customer_id#49, sum(((((cs_ext_list_price#42 - cs_ext_wholesale_cost#41) - cs_ext_discount_amt#39) + cs_ext_sales_price#40) / 2))#48 AS year_total#50]

(55) Filter [codegen id : 24]
Input [2]: [customer_id#49, year_total#50]
Condition : (isnotnull(year_total#50) AND (year_total#50 > 0.000000))

(56) Exchange
Input [2]: [customer_id#49, year_total#50]
Arguments: hashpartitioning(customer_id#49, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(57) Sort [codegen id : 25]
Input [2]: [customer_id#49, year_total#50]
Arguments: [customer_id#49 ASC NULLS FIRST], false, 0

(58) SortMergeJoin [codegen id : 26]
Left keys [1]: [customer_id#23]
Right keys [1]: [customer_id#49]
Join type: Inner
Join condition: None

(59) Project [codegen id : 26]
Output [11]: [customer_id#23, year_total#24, customer_id#30, customer_first_name#31, customer_last_name#32, customer_preferred_cust_flag#33, customer_birth_country#34, customer_login#35, customer_email_address#36, year_total#37, year_total#50]
Input [12]: [customer_id#23, year_total#24, customer_id#30, customer_first_name#31, customer_last_name#32, customer_preferred_cust_flag#33, customer_birth_country#34, customer_login#35, customer_email_address#36, year_total#37, customer_id#49, year_total#50]

(60) Scan parquet spark_catalog.default.catalog_sales
Output [6]: [cs_bill_customer_sk#38, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, cs_sold_date_sk#43]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#43), dynamicpruningexpression(cs_sold_date_sk#43 IN dynamicpruning#25)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2)>

(61) ColumnarToRow [codegen id : 28]
Input [6]: [cs_bill_customer_sk#38, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, cs_sold_date_sk#43]

(62) Filter [codegen id : 28]
Input [6]: [cs_bill_customer_sk#38, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, cs_sold_date_sk#43]
Condition : isnotnull(cs_bill_customer_sk#38)

(63) ReusedExchange [Reuses operator id: 126]
Output [2]: [d_date_sk#8, d_year#9]

(64) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [cs_sold_date_sk#43]
Right keys [1]: [d_date_sk#8]
Join type: Inner
Join condition: None

(65) Project [codegen id : 28]
Output [6]: [cs_bill_customer_sk#38, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, d_year#9]
Input [8]: [cs_bill_customer_sk#38, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, cs_sold_date_sk#43, d_date_sk#8, d_year#9]

(66) Exchange
Input [6]: [cs_bill_customer_sk#38, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, d_year#9]
Arguments: hashpartitioning(cs_bill_customer_sk#38, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(67) Sort [codegen id : 29]
Input [6]: [cs_bill_customer_sk#38, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, d_year#9]
Arguments: [cs_bill_customer_sk#38 ASC NULLS FIRST], false, 0

(68) ReusedExchange [Reuses operator id: 12]
Output [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]

(69) Sort [codegen id : 31]
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Arguments: [c_customer_sk#10 ASC NULLS FIRST], false, 0

(70) SortMergeJoin [codegen id : 32]
Left keys [1]: [cs_bill_customer_sk#38]
Right keys [1]: [c_customer_sk#10]
Join type: Inner
Join condition: None

(71) Project [codegen id : 32]
Output [12]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, d_year#9]
Input [14]: [cs_bill_customer_sk#38, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, d_year#9, c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]

(72) HashAggregate [codegen id : 32]
Input [12]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, cs_ext_discount_amt#39, cs_ext_sales_price#40, cs_ext_wholesale_cost#41, cs_ext_list_price#42, d_year#9]
Keys [8]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9]
Functions [1]: [partial_sum(((((cs_ext_list_price#42 - cs_ext_wholesale_cost#41) - cs_ext_discount_amt#39) + cs_ext_sales_price#40) / 2))]
Aggregate Attributes [2]: [sum#51, isEmpty#52]
Results [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9, sum#53, isEmpty#54]

(73) Exchange
Input [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9, sum#53, isEmpty#54]
Arguments: hashpartitioning(c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(74) HashAggregate [codegen id : 33]
Input [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9, sum#53, isEmpty#54]
Keys [8]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9]
Functions [1]: [sum(((((cs_ext_list_price#42 - cs_ext_wholesale_cost#41) - cs_ext_discount_amt#39) + cs_ext_sales_price#40) / 2))]
Aggregate Attributes [1]: [sum(((((cs_ext_list_price#42 - cs_ext_wholesale_cost#41) - cs_ext_discount_amt#39) + cs_ext_sales_price#40) / 2))#48]
Results [2]: [c_customer_id#11 AS customer_id#55, sum(((((cs_ext_list_price#42 - cs_ext_wholesale_cost#41) - cs_ext_discount_amt#39) + cs_ext_sales_price#40) / 2))#48 AS year_total#56]

(75) Exchange
Input [2]: [customer_id#55, year_total#56]
Arguments: hashpartitioning(customer_id#55, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(76) Sort [codegen id : 34]
Input [2]: [customer_id#55, year_total#56]
Arguments: [customer_id#55 ASC NULLS FIRST], false, 0

(77) SortMergeJoin [codegen id : 35]
Left keys [1]: [customer_id#23]
Right keys [1]: [customer_id#55]
Join type: Inner
Join condition: (CASE WHEN (year_total#50 > 0.000000) THEN (year_total#56 / year_total#50) END > CASE WHEN (year_total#24 > 0.000000) THEN (year_total#37 / year_total#24) END)

(78) Project [codegen id : 35]
Output [10]: [customer_id#23, customer_id#30, customer_first_name#31, customer_last_name#32, customer_preferred_cust_flag#33, customer_birth_country#34, customer_login#35, customer_email_address#36, year_total#50, year_total#56]
Input [13]: [customer_id#23, year_total#24, customer_id#30, customer_first_name#31, customer_last_name#32, customer_preferred_cust_flag#33, customer_birth_country#34, customer_login#35, customer_email_address#36, year_total#37, year_total#50, customer_id#55, year_total#56]

(79) Scan parquet spark_catalog.default.web_sales
Output [6]: [ws_bill_customer_sk#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, ws_sold_date_sk#62]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#62), dynamicpruningexpression(ws_sold_date_sk#62 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_price:decimal(7,2),ws_ext_wholesale_cost:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(80) ColumnarToRow [codegen id : 37]
Input [6]: [ws_bill_customer_sk#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, ws_sold_date_sk#62]

(81) Filter [codegen id : 37]
Input [6]: [ws_bill_customer_sk#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, ws_sold_date_sk#62]
Condition : isnotnull(ws_bill_customer_sk#57)

(82) ReusedExchange [Reuses operator id: 122]
Output [2]: [d_date_sk#8, d_year#9]

(83) BroadcastHashJoin [codegen id : 37]
Left keys [1]: [ws_sold_date_sk#62]
Right keys [1]: [d_date_sk#8]
Join type: Inner
Join condition: None

(84) Project [codegen id : 37]
Output [6]: [ws_bill_customer_sk#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, d_year#9]
Input [8]: [ws_bill_customer_sk#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, ws_sold_date_sk#62, d_date_sk#8, d_year#9]

(85) Exchange
Input [6]: [ws_bill_customer_sk#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, d_year#9]
Arguments: hashpartitioning(ws_bill_customer_sk#57, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(86) Sort [codegen id : 38]
Input [6]: [ws_bill_customer_sk#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, d_year#9]
Arguments: [ws_bill_customer_sk#57 ASC NULLS FIRST], false, 0

(87) ReusedExchange [Reuses operator id: 12]
Output [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]

(88) Sort [codegen id : 40]
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Arguments: [c_customer_sk#10 ASC NULLS FIRST], false, 0

(89) SortMergeJoin [codegen id : 41]
Left keys [1]: [ws_bill_customer_sk#57]
Right keys [1]: [c_customer_sk#10]
Join type: Inner
Join condition: None

(90) Project [codegen id : 41]
Output [12]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, d_year#9]
Input [14]: [ws_bill_customer_sk#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, d_year#9, c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]

(91) HashAggregate [codegen id : 41]
Input [12]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, d_year#9]
Keys [8]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9]
Functions [1]: [partial_sum(((((ws_ext_list_price#61 - ws_ext_wholesale_cost#60) - ws_ext_discount_amt#58) + ws_ext_sales_price#59) / 2))]
Aggregate Attributes [2]: [sum#63, isEmpty#64]
Results [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9, sum#65, isEmpty#66]

(92) Exchange
Input [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9, sum#65, isEmpty#66]
Arguments: hashpartitioning(c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9, 5), ENSURE_REQUIREMENTS, [plan_id=15]

(93) HashAggregate [codegen id : 42]
Input [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9, sum#65, isEmpty#66]
Keys [8]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9]
Functions [1]: [sum(((((ws_ext_list_price#61 - ws_ext_wholesale_cost#60) - ws_ext_discount_amt#58) + ws_ext_sales_price#59) / 2))]
Aggregate Attributes [1]: [sum(((((ws_ext_list_price#61 - ws_ext_wholesale_cost#60) - ws_ext_discount_amt#58) + ws_ext_sales_price#59) / 2))#67]
Results [2]: [c_customer_id#11 AS customer_id#68, sum(((((ws_ext_list_price#61 - ws_ext_wholesale_cost#60) - ws_ext_discount_amt#58) + ws_ext_sales_price#59) / 2))#67 AS year_total#69]

(94) Filter [codegen id : 42]
Input [2]: [customer_id#68, year_total#69]
Condition : (isnotnull(year_total#69) AND (year_total#69 > 0.000000))

(95) Exchange
Input [2]: [customer_id#68, year_total#69]
Arguments: hashpartitioning(customer_id#68, 5), ENSURE_REQUIREMENTS, [plan_id=16]

(96) Sort [codegen id : 43]
Input [2]: [customer_id#68, year_total#69]
Arguments: [customer_id#68 ASC NULLS FIRST], false, 0

(97) SortMergeJoin [codegen id : 44]
Left keys [1]: [customer_id#23]
Right keys [1]: [customer_id#68]
Join type: Inner
Join condition: None

(98) Project [codegen id : 44]
Output [11]: [customer_id#23, customer_id#30, customer_first_name#31, customer_last_name#32, customer_preferred_cust_flag#33, customer_birth_country#34, customer_login#35, customer_email_address#36, year_total#50, year_total#56, year_total#69]
Input [12]: [customer_id#23, customer_id#30, customer_first_name#31, customer_last_name#32, customer_preferred_cust_flag#33, customer_birth_country#34, customer_login#35, customer_email_address#36, year_total#50, year_total#56, customer_id#68, year_total#69]

(99) Scan parquet spark_catalog.default.web_sales
Output [6]: [ws_bill_customer_sk#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, ws_sold_date_sk#62]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#62), dynamicpruningexpression(ws_sold_date_sk#62 IN dynamicpruning#25)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_price:decimal(7,2),ws_ext_wholesale_cost:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(100) ColumnarToRow [codegen id : 46]
Input [6]: [ws_bill_customer_sk#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, ws_sold_date_sk#62]

(101) Filter [codegen id : 46]
Input [6]: [ws_bill_customer_sk#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, ws_sold_date_sk#62]
Condition : isnotnull(ws_bill_customer_sk#57)

(102) ReusedExchange [Reuses operator id: 126]
Output [2]: [d_date_sk#8, d_year#9]

(103) BroadcastHashJoin [codegen id : 46]
Left keys [1]: [ws_sold_date_sk#62]
Right keys [1]: [d_date_sk#8]
Join type: Inner
Join condition: None

(104) Project [codegen id : 46]
Output [6]: [ws_bill_customer_sk#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, d_year#9]
Input [8]: [ws_bill_customer_sk#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, ws_sold_date_sk#62, d_date_sk#8, d_year#9]

(105) Exchange
Input [6]: [ws_bill_customer_sk#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, d_year#9]
Arguments: hashpartitioning(ws_bill_customer_sk#57, 5), ENSURE_REQUIREMENTS, [plan_id=17]

(106) Sort [codegen id : 47]
Input [6]: [ws_bill_customer_sk#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, d_year#9]
Arguments: [ws_bill_customer_sk#57 ASC NULLS FIRST], false, 0

(107) ReusedExchange [Reuses operator id: 12]
Output [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]

(108) Sort [codegen id : 49]
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Arguments: [c_customer_sk#10 ASC NULLS FIRST], false, 0

(109) SortMergeJoin [codegen id : 50]
Left keys [1]: [ws_bill_customer_sk#57]
Right keys [1]: [c_customer_sk#10]
Join type: Inner
Join condition: None

(110) Project [codegen id : 50]
Output [12]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, d_year#9]
Input [14]: [ws_bill_customer_sk#57, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, d_year#9, c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]

(111) HashAggregate [codegen id : 50]
Input [12]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, ws_ext_discount_amt#58, ws_ext_sales_price#59, ws_ext_wholesale_cost#60, ws_ext_list_price#61, d_year#9]
Keys [8]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9]
Functions [1]: [partial_sum(((((ws_ext_list_price#61 - ws_ext_wholesale_cost#60) - ws_ext_discount_amt#58) + ws_ext_sales_price#59) / 2))]
Aggregate Attributes [2]: [sum#70, isEmpty#71]
Results [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9, sum#72, isEmpty#73]

(112) Exchange
Input [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9, sum#72, isEmpty#73]
Arguments: hashpartitioning(c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9, 5), ENSURE_REQUIREMENTS, [plan_id=18]

(113) HashAggregate [codegen id : 51]
Input [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9, sum#72, isEmpty#73]
Keys [8]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, d_year#9]
Functions [1]: [sum(((((ws_ext_list_price#61 - ws_ext_wholesale_cost#60) - ws_ext_discount_amt#58) + ws_ext_sales_price#59) / 2))]
Aggregate Attributes [1]: [sum(((((ws_ext_list_price#61 - ws_ext_wholesale_cost#60) - ws_ext_discount_amt#58) + ws_ext_sales_price#59) / 2))#67]
Results [2]: [c_customer_id#11 AS customer_id#74, sum(((((ws_ext_list_price#61 - ws_ext_wholesale_cost#60) - ws_ext_discount_amt#58) + ws_ext_sales_price#59) / 2))#67 AS year_total#75]

(114) Exchange
Input [2]: [customer_id#74, year_total#75]
Arguments: hashpartitioning(customer_id#74, 5), ENSURE_REQUIREMENTS, [plan_id=19]

(115) Sort [codegen id : 52]
Input [2]: [customer_id#74, year_total#75]
Arguments: [customer_id#74 ASC NULLS FIRST], false, 0

(116) SortMergeJoin [codegen id : 53]
Left keys [1]: [customer_id#23]
Right keys [1]: [customer_id#74]
Join type: Inner
Join condition: (CASE WHEN (year_total#50 > 0.000000) THEN (year_total#56 / year_total#50) END > CASE WHEN (year_total#69 > 0.000000) THEN (year_total#75 / year_total#69) END)

(117) Project [codegen id : 53]
Output [7]: [customer_id#30, customer_first_name#31, customer_last_name#32, customer_preferred_cust_flag#33, customer_birth_country#34, customer_login#35, customer_email_address#36]
Input [13]: [customer_id#23, customer_id#30, customer_first_name#31, customer_last_name#32, customer_preferred_cust_flag#33, customer_birth_country#34, customer_login#35, customer_email_address#36, year_total#50, year_total#56, year_total#69, customer_id#74, year_total#75]

(118) TakeOrderedAndProject
Input [7]: [customer_id#30, customer_first_name#31, customer_last_name#32, customer_preferred_cust_flag#33, customer_birth_country#34, customer_login#35, customer_email_address#36]
Arguments: 100, [customer_id#30 ASC NULLS FIRST, customer_first_name#31 ASC NULLS FIRST, customer_last_name#32 ASC NULLS FIRST, customer_preferred_cust_flag#33 ASC NULLS FIRST, customer_birth_country#34 ASC NULLS FIRST, customer_login#35 ASC NULLS FIRST, customer_email_address#36 ASC NULLS FIRST], [customer_id#30, customer_first_name#31, customer_last_name#32, customer_preferred_cust_flag#33, customer_birth_country#34, customer_login#35, customer_email_address#36]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#6 IN dynamicpruning#7
BroadcastExchange (122)
+- * Filter (121)
   +- * ColumnarToRow (120)
      +- Scan parquet spark_catalog.default.date_dim (119)


(119) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#8, d_year#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(120) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#8, d_year#9]

(121) Filter [codegen id : 1]
Input [2]: [d_date_sk#8, d_year#9]
Condition : ((isnotnull(d_year#9) AND (d_year#9 = 2001)) AND isnotnull(d_date_sk#8))

(122) BroadcastExchange
Input [2]: [d_date_sk#8, d_year#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=20]

Subquery:2 Hosting operator id = 22 Hosting Expression = ss_sold_date_sk#6 IN dynamicpruning#25
BroadcastExchange (126)
+- * Filter (125)
   +- * ColumnarToRow (124)
      +- Scan parquet spark_catalog.default.date_dim (123)


(123) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#8, d_year#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(124) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#8, d_year#9]

(125) Filter [codegen id : 1]
Input [2]: [d_date_sk#8, d_year#9]
Condition : ((isnotnull(d_year#9) AND (d_year#9 = 2002)) AND isnotnull(d_date_sk#8))

(126) BroadcastExchange
Input [2]: [d_date_sk#8, d_year#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=21]

Subquery:3 Hosting operator id = 40 Hosting Expression = cs_sold_date_sk#43 IN dynamicpruning#7

Subquery:4 Hosting operator id = 60 Hosting Expression = cs_sold_date_sk#43 IN dynamicpruning#25

Subquery:5 Hosting operator id = 79 Hosting Expression = ws_sold_date_sk#62 IN dynamicpruning#7

Subquery:6 Hosting operator id = 99 Hosting Expression = ws_sold_date_sk#62 IN dynamicpruning#25


