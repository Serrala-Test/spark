== Physical Plan ==
TakeOrderedAndProject (127)
+- * Project (126)
   +- * SortMergeJoin Inner (125)
      :- * Project (107)
      :  +- * SortMergeJoin Inner (106)
      :     :- * Project (86)
      :     :  +- * SortMergeJoin Inner (85)
      :     :     :- * Project (67)
      :     :     :  +- * SortMergeJoin Inner (66)
      :     :     :     :- * SortMergeJoin Inner (46)
      :     :     :     :  :- * Sort (25)
      :     :     :     :  :  +- Exchange (24)
      :     :     :     :  :     +- * Filter (23)
      :     :     :     :  :        +- * HashAggregate (22)
      :     :     :     :  :           +- Exchange (21)
      :     :     :     :  :              +- * HashAggregate (20)
      :     :     :     :  :                 +- * Project (19)
      :     :     :     :  :                    +- * SortMergeJoin Inner (18)
      :     :     :     :  :                       :- * Sort (11)
      :     :     :     :  :                       :  +- Exchange (10)
      :     :     :     :  :                       :     +- * Project (9)
      :     :     :     :  :                       :        +- * BroadcastHashJoin Inner BuildRight (8)
      :     :     :     :  :                       :           :- * Filter (3)
      :     :     :     :  :                       :           :  +- * ColumnarToRow (2)
      :     :     :     :  :                       :           :     +- Scan parquet default.store_sales (1)
      :     :     :     :  :                       :           +- BroadcastExchange (7)
      :     :     :     :  :                       :              +- * Filter (6)
      :     :     :     :  :                       :                 +- * ColumnarToRow (5)
      :     :     :     :  :                       :                    +- Scan parquet default.date_dim (4)
      :     :     :     :  :                       +- * Sort (17)
      :     :     :     :  :                          +- Exchange (16)
      :     :     :     :  :                             +- * Project (15)
      :     :     :     :  :                                +- * Filter (14)
      :     :     :     :  :                                   +- * ColumnarToRow (13)
      :     :     :     :  :                                      +- Scan parquet default.customer (12)
      :     :     :     :  +- * Sort (45)
      :     :     :     :     +- Exchange (44)
      :     :     :     :        +- * HashAggregate (43)
      :     :     :     :           +- Exchange (42)
      :     :     :     :              +- * HashAggregate (41)
      :     :     :     :                 +- * Project (40)
      :     :     :     :                    +- * SortMergeJoin Inner (39)
      :     :     :     :                       :- * Sort (36)
      :     :     :     :                       :  +- Exchange (35)
      :     :     :     :                       :     +- * Project (34)
      :     :     :     :                       :        +- * BroadcastHashJoin Inner BuildRight (33)
      :     :     :     :                       :           :- * Filter (28)
      :     :     :     :                       :           :  +- * ColumnarToRow (27)
      :     :     :     :                       :           :     +- Scan parquet default.store_sales (26)
      :     :     :     :                       :           +- BroadcastExchange (32)
      :     :     :     :                       :              +- * Filter (31)
      :     :     :     :                       :                 +- * ColumnarToRow (30)
      :     :     :     :                       :                    +- Scan parquet default.date_dim (29)
      :     :     :     :                       +- * Sort (38)
      :     :     :     :                          +- ReusedExchange (37)
      :     :     :     +- * Sort (65)
      :     :     :        +- Exchange (64)
      :     :     :           +- * Project (63)
      :     :     :              +- * Filter (62)
      :     :     :                 +- * HashAggregate (61)
      :     :     :                    +- Exchange (60)
      :     :     :                       +- * HashAggregate (59)
      :     :     :                          +- * Project (58)
      :     :     :                             +- * SortMergeJoin Inner (57)
      :     :     :                                :- * Sort (54)
      :     :     :                                :  +- Exchange (53)
      :     :     :                                :     +- * Project (52)
      :     :     :                                :        +- * BroadcastHashJoin Inner BuildRight (51)
      :     :     :                                :           :- * Filter (49)
      :     :     :                                :           :  +- * ColumnarToRow (48)
      :     :     :                                :           :     +- Scan parquet default.catalog_sales (47)
      :     :     :                                :           +- ReusedExchange (50)
      :     :     :                                +- * Sort (56)
      :     :     :                                   +- ReusedExchange (55)
      :     :     +- * Sort (84)
      :     :        +- Exchange (83)
      :     :           +- * HashAggregate (82)
      :     :              +- Exchange (81)
      :     :                 +- * HashAggregate (80)
      :     :                    +- * Project (79)
      :     :                       +- * SortMergeJoin Inner (78)
      :     :                          :- * Sort (75)
      :     :                          :  +- Exchange (74)
      :     :                          :     +- * Project (73)
      :     :                          :        +- * BroadcastHashJoin Inner BuildRight (72)
      :     :                          :           :- * Filter (70)
      :     :                          :           :  +- * ColumnarToRow (69)
      :     :                          :           :     +- Scan parquet default.catalog_sales (68)
      :     :                          :           +- ReusedExchange (71)
      :     :                          +- * Sort (77)
      :     :                             +- ReusedExchange (76)
      :     +- * Sort (105)
      :        +- Exchange (104)
      :           +- * Project (103)
      :              +- * Filter (102)
      :                 +- * HashAggregate (101)
      :                    +- Exchange (100)
      :                       +- * HashAggregate (99)
      :                          +- * Project (98)
      :                             +- * SortMergeJoin Inner (97)
      :                                :- * Sort (94)
      :                                :  +- Exchange (93)
      :                                :     +- * Project (92)
      :                                :        +- * BroadcastHashJoin Inner BuildRight (91)
      :                                :           :- * Filter (89)
      :                                :           :  +- * ColumnarToRow (88)
      :                                :           :     +- Scan parquet default.web_sales (87)
      :                                :           +- ReusedExchange (90)
      :                                +- * Sort (96)
      :                                   +- ReusedExchange (95)
      +- * Sort (124)
         +- Exchange (123)
            +- * HashAggregate (122)
               +- Exchange (121)
                  +- * HashAggregate (120)
                     +- * Project (119)
                        +- * SortMergeJoin Inner (118)
                           :- * Sort (115)
                           :  +- Exchange (114)
                           :     +- * Project (113)
                           :        +- * BroadcastHashJoin Inner BuildRight (112)
                           :           :- * Filter (110)
                           :           :  +- * ColumnarToRow (109)
                           :           :     +- Scan parquet default.web_sales (108)
                           :           +- ReusedExchange (111)
                           +- * Sort (117)
                              +- ReusedExchange (116)


(1) Scan parquet default.store_sales
Output [6]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_sales_price#4, ss_ext_wholesale_cost#5, ss_ext_list_price#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [6]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_sales_price#4, ss_ext_wholesale_cost#5, ss_ext_list_price#6]

(3) Filter [codegen id : 2]
Input [6]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_sales_price#4, ss_ext_wholesale_cost#5, ss_ext_list_price#6]
Condition : (isnotnull(ss_customer_sk#2) AND isnotnull(ss_sold_date_sk#1))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#7, d_year#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#7, d_year#8]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#7, d_year#8]
Condition : ((isnotnull(d_year#8) AND (d_year#8 = 2001)) AND isnotnull(d_date_sk#7))

(7) BroadcastExchange
Input [2]: [d_date_sk#7, d_year#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#7]
Join condition: None

(9) Project [codegen id : 2]
Output [6]: [ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_sales_price#4, ss_ext_wholesale_cost#5, ss_ext_list_price#6, d_year#8]
Input [8]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_sales_price#4, ss_ext_wholesale_cost#5, ss_ext_list_price#6, d_date_sk#7, d_year#8]

(10) Exchange
Input [6]: [ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_sales_price#4, ss_ext_wholesale_cost#5, ss_ext_list_price#6, d_year#8]
Arguments: hashpartitioning(ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#10]

(11) Sort [codegen id : 3]
Input [6]: [ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_sales_price#4, ss_ext_wholesale_cost#5, ss_ext_list_price#6, d_year#8]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(12) Scan parquet default.customer
Output [8]: [c_customer_sk#11, c_customer_id#12, c_first_name#13, c_last_name#14, c_preferred_cust_flag#15, c_birth_country#16, c_login#17, c_email_address#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(13) ColumnarToRow [codegen id : 4]
Input [8]: [c_customer_sk#11, c_customer_id#12, c_first_name#13, c_last_name#14, c_preferred_cust_flag#15, c_birth_country#16, c_login#17, c_email_address#18]

(14) Filter [codegen id : 4]
Input [8]: [c_customer_sk#11, c_customer_id#12, c_first_name#13, c_last_name#14, c_preferred_cust_flag#15, c_birth_country#16, c_login#17, c_email_address#18]
Condition : (isnotnull(c_customer_sk#11) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#12, 16, false, true)))

(15) Project [codegen id : 4]
Output [8]: [c_customer_sk#11, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_customer_id#12, 16, false, true) AS c_customer_id#19, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_first_name#13, 20, false, true) AS c_first_name#20, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_last_name#14, 30, false, true) AS c_last_name#21, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_preferred_cust_flag#15, 1, false, true) AS c_preferred_cust_flag#22, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, c_birth_country#16, 20, false, true) AS c_birth_country#23, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_login#17, 13, false, true) AS c_login#24, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, c_email_address#18, 50, false, true) AS c_email_address#25]
Input [8]: [c_customer_sk#11, c_customer_id#12, c_first_name#13, c_last_name#14, c_preferred_cust_flag#15, c_birth_country#16, c_login#17, c_email_address#18]

(16) Exchange
Input [8]: [c_customer_sk#11, c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25]
Arguments: hashpartitioning(c_customer_sk#11, 5), ENSURE_REQUIREMENTS, [id=#26]

(17) Sort [codegen id : 5]
Input [8]: [c_customer_sk#11, c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25]
Arguments: [c_customer_sk#11 ASC NULLS FIRST], false, 0

(18) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#11]
Join condition: None

(19) Project [codegen id : 6]
Output [12]: [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, ss_ext_discount_amt#3, ss_ext_sales_price#4, ss_ext_wholesale_cost#5, ss_ext_list_price#6, d_year#8]
Input [14]: [ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_sales_price#4, ss_ext_wholesale_cost#5, ss_ext_list_price#6, d_year#8, c_customer_sk#11, c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25]

(20) HashAggregate [codegen id : 6]
Input [12]: [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, ss_ext_discount_amt#3, ss_ext_sales_price#4, ss_ext_wholesale_cost#5, ss_ext_list_price#6, d_year#8]
Keys [8]: [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#8]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#6 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#5 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#3 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#4 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#27, isEmpty#28]
Results [10]: [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#8, sum#29, isEmpty#30]

(21) Exchange
Input [10]: [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#8, sum#29, isEmpty#30]
Arguments: hashpartitioning(c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#8, 5), ENSURE_REQUIREMENTS, [id=#31]

(22) HashAggregate [codegen id : 7]
Input [10]: [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#8, sum#29, isEmpty#30]
Keys [8]: [c_customer_id#19, c_first_name#20, c_last_name#21, c_preferred_cust_flag#22, c_birth_country#23, c_login#24, c_email_address#25, d_year#8]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#6 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#5 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#3 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#4 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#6 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#5 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#3 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#4 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#32]
Results [2]: [c_customer_id#19 AS customer_id#33, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#6 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#5 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#3 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#4 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#32 AS year_total#34]

(23) Filter [codegen id : 7]
Input [2]: [customer_id#33, year_total#34]
Condition : (isnotnull(year_total#34) AND (year_total#34 > 0.000000))

(24) Exchange
Input [2]: [customer_id#33, year_total#34]
Arguments: hashpartitioning(customer_id#33, 5), ENSURE_REQUIREMENTS, [id=#35]

(25) Sort [codegen id : 8]
Input [2]: [customer_id#33, year_total#34]
Arguments: [customer_id#33 ASC NULLS FIRST], false, 0

(26) Scan parquet default.store_sales
Output [6]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_sales_price#4, ss_ext_wholesale_cost#5, ss_ext_list_price#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(27) ColumnarToRow [codegen id : 10]
Input [6]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_sales_price#4, ss_ext_wholesale_cost#5, ss_ext_list_price#6]

(28) Filter [codegen id : 10]
Input [6]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_sales_price#4, ss_ext_wholesale_cost#5, ss_ext_list_price#6]
Condition : (isnotnull(ss_customer_sk#2) AND isnotnull(ss_sold_date_sk#1))

(29) Scan parquet default.date_dim
Output [2]: [d_date_sk#7, d_year#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(30) ColumnarToRow [codegen id : 9]
Input [2]: [d_date_sk#7, d_year#8]

(31) Filter [codegen id : 9]
Input [2]: [d_date_sk#7, d_year#8]
Condition : ((isnotnull(d_year#8) AND (d_year#8 = 2002)) AND isnotnull(d_date_sk#7))

(32) BroadcastExchange
Input [2]: [d_date_sk#7, d_year#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#36]

(33) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#7]
Join condition: None

(34) Project [codegen id : 10]
Output [6]: [ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_sales_price#4, ss_ext_wholesale_cost#5, ss_ext_list_price#6, d_year#8]
Input [8]: [ss_sold_date_sk#1, ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_sales_price#4, ss_ext_wholesale_cost#5, ss_ext_list_price#6, d_date_sk#7, d_year#8]

(35) Exchange
Input [6]: [ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_sales_price#4, ss_ext_wholesale_cost#5, ss_ext_list_price#6, d_year#8]
Arguments: hashpartitioning(ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [id=#37]

(36) Sort [codegen id : 11]
Input [6]: [ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_sales_price#4, ss_ext_wholesale_cost#5, ss_ext_list_price#6, d_year#8]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(37) ReusedExchange [Reuses operator id: 16]
Output [8]: [c_customer_sk#11, c_customer_id#38, c_first_name#39, c_last_name#40, c_preferred_cust_flag#41, c_birth_country#42, c_login#43, c_email_address#44]

(38) Sort [codegen id : 13]
Input [8]: [c_customer_sk#11, c_customer_id#38, c_first_name#39, c_last_name#40, c_preferred_cust_flag#41, c_birth_country#42, c_login#43, c_email_address#44]
Arguments: [c_customer_sk#11 ASC NULLS FIRST], false, 0

(39) SortMergeJoin [codegen id : 14]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#11]
Join condition: None

(40) Project [codegen id : 14]
Output [12]: [c_customer_id#38, c_first_name#39, c_last_name#40, c_preferred_cust_flag#41, c_birth_country#42, c_login#43, c_email_address#44, ss_ext_discount_amt#3, ss_ext_sales_price#4, ss_ext_wholesale_cost#5, ss_ext_list_price#6, d_year#8]
Input [14]: [ss_customer_sk#2, ss_ext_discount_amt#3, ss_ext_sales_price#4, ss_ext_wholesale_cost#5, ss_ext_list_price#6, d_year#8, c_customer_sk#11, c_customer_id#38, c_first_name#39, c_last_name#40, c_preferred_cust_flag#41, c_birth_country#42, c_login#43, c_email_address#44]

(41) HashAggregate [codegen id : 14]
Input [12]: [c_customer_id#38, c_first_name#39, c_last_name#40, c_preferred_cust_flag#41, c_birth_country#42, c_login#43, c_email_address#44, ss_ext_discount_amt#3, ss_ext_sales_price#4, ss_ext_wholesale_cost#5, ss_ext_list_price#6, d_year#8]
Keys [8]: [c_customer_id#38, c_first_name#39, c_last_name#40, c_preferred_cust_flag#41, c_birth_country#42, c_login#43, c_email_address#44, d_year#8]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#6 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#5 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#3 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#4 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#45, isEmpty#46]
Results [10]: [c_customer_id#38, c_first_name#39, c_last_name#40, c_preferred_cust_flag#41, c_birth_country#42, c_login#43, c_email_address#44, d_year#8, sum#47, isEmpty#48]

(42) Exchange
Input [10]: [c_customer_id#38, c_first_name#39, c_last_name#40, c_preferred_cust_flag#41, c_birth_country#42, c_login#43, c_email_address#44, d_year#8, sum#47, isEmpty#48]
Arguments: hashpartitioning(c_customer_id#38, c_first_name#39, c_last_name#40, c_preferred_cust_flag#41, c_birth_country#42, c_login#43, c_email_address#44, d_year#8, 5), ENSURE_REQUIREMENTS, [id=#49]

(43) HashAggregate [codegen id : 15]
Input [10]: [c_customer_id#38, c_first_name#39, c_last_name#40, c_preferred_cust_flag#41, c_birth_country#42, c_login#43, c_email_address#44, d_year#8, sum#47, isEmpty#48]
Keys [8]: [c_customer_id#38, c_first_name#39, c_last_name#40, c_preferred_cust_flag#41, c_birth_country#42, c_login#43, c_email_address#44, d_year#8]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#6 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#5 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#3 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#4 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#6 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#5 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#3 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#4 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#50]
Results [8]: [c_customer_id#38 AS customer_id#51, c_first_name#39 AS customer_first_name#52, c_last_name#40 AS customer_last_name#53, c_preferred_cust_flag#41 AS customer_preferred_cust_flag#54, c_birth_country#42 AS customer_birth_country#55, c_login#43 AS customer_login#56, c_email_address#44 AS customer_email_address#57, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#6 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#5 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#3 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#4 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#50 AS year_total#58]

(44) Exchange
Input [8]: [customer_id#51, customer_first_name#52, customer_last_name#53, customer_preferred_cust_flag#54, customer_birth_country#55, customer_login#56, customer_email_address#57, year_total#58]
Arguments: hashpartitioning(customer_id#51, 5), ENSURE_REQUIREMENTS, [id=#59]

(45) Sort [codegen id : 16]
Input [8]: [customer_id#51, customer_first_name#52, customer_last_name#53, customer_preferred_cust_flag#54, customer_birth_country#55, customer_login#56, customer_email_address#57, year_total#58]
Arguments: [customer_id#51 ASC NULLS FIRST], false, 0

(46) SortMergeJoin [codegen id : 17]
Left keys [1]: [customer_id#33]
Right keys [1]: [customer_id#51]
Join condition: None

(47) Scan parquet default.catalog_sales
Output [6]: [cs_sold_date_sk#60, cs_bill_customer_sk#61, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2)>

(48) ColumnarToRow [codegen id : 19]
Input [6]: [cs_sold_date_sk#60, cs_bill_customer_sk#61, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65]

(49) Filter [codegen id : 19]
Input [6]: [cs_sold_date_sk#60, cs_bill_customer_sk#61, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65]
Condition : (isnotnull(cs_bill_customer_sk#61) AND isnotnull(cs_sold_date_sk#60))

(50) ReusedExchange [Reuses operator id: 7]
Output [2]: [d_date_sk#7, d_year#8]

(51) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_sold_date_sk#60]
Right keys [1]: [d_date_sk#7]
Join condition: None

(52) Project [codegen id : 19]
Output [6]: [cs_bill_customer_sk#61, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65, d_year#8]
Input [8]: [cs_sold_date_sk#60, cs_bill_customer_sk#61, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65, d_date_sk#7, d_year#8]

(53) Exchange
Input [6]: [cs_bill_customer_sk#61, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65, d_year#8]
Arguments: hashpartitioning(cs_bill_customer_sk#61, 5), ENSURE_REQUIREMENTS, [id=#66]

(54) Sort [codegen id : 20]
Input [6]: [cs_bill_customer_sk#61, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65, d_year#8]
Arguments: [cs_bill_customer_sk#61 ASC NULLS FIRST], false, 0

(55) ReusedExchange [Reuses operator id: 16]
Output [8]: [c_customer_sk#11, c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73]

(56) Sort [codegen id : 22]
Input [8]: [c_customer_sk#11, c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73]
Arguments: [c_customer_sk#11 ASC NULLS FIRST], false, 0

(57) SortMergeJoin [codegen id : 23]
Left keys [1]: [cs_bill_customer_sk#61]
Right keys [1]: [c_customer_sk#11]
Join condition: None

(58) Project [codegen id : 23]
Output [12]: [c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65, d_year#8]
Input [14]: [cs_bill_customer_sk#61, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65, d_year#8, c_customer_sk#11, c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73]

(59) HashAggregate [codegen id : 23]
Input [12]: [c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65, d_year#8]
Keys [8]: [c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73, d_year#8]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#65 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#64 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#62 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#63 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#74, isEmpty#75]
Results [10]: [c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73, d_year#8, sum#76, isEmpty#77]

(60) Exchange
Input [10]: [c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73, d_year#8, sum#76, isEmpty#77]
Arguments: hashpartitioning(c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73, d_year#8, 5), ENSURE_REQUIREMENTS, [id=#78]

(61) HashAggregate [codegen id : 24]
Input [10]: [c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73, d_year#8, sum#76, isEmpty#77]
Keys [8]: [c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73, d_year#8]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#65 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#64 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#62 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#63 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#65 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#64 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#62 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#63 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#79]
Results [2]: [c_customer_id#67 AS customer_id#80, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#65 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#64 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#62 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#63 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#79 AS year_total#81]

(62) Filter [codegen id : 24]
Input [2]: [customer_id#80, year_total#81]
Condition : (isnotnull(year_total#81) AND (year_total#81 > 0.000000))

(63) Project [codegen id : 24]
Output [2]: [customer_id#80 AS customer_id#82, year_total#81 AS year_total#83]
Input [2]: [customer_id#80, year_total#81]

(64) Exchange
Input [2]: [customer_id#82, year_total#83]
Arguments: hashpartitioning(customer_id#82, 5), ENSURE_REQUIREMENTS, [id=#84]

(65) Sort [codegen id : 25]
Input [2]: [customer_id#82, year_total#83]
Arguments: [customer_id#82 ASC NULLS FIRST], false, 0

(66) SortMergeJoin [codegen id : 26]
Left keys [1]: [customer_id#33]
Right keys [1]: [customer_id#82]
Join condition: None

(67) Project [codegen id : 26]
Output [11]: [customer_id#33, year_total#34, customer_id#51, customer_first_name#52, customer_last_name#53, customer_preferred_cust_flag#54, customer_birth_country#55, customer_login#56, customer_email_address#57, year_total#58, year_total#83]
Input [12]: [customer_id#33, year_total#34, customer_id#51, customer_first_name#52, customer_last_name#53, customer_preferred_cust_flag#54, customer_birth_country#55, customer_login#56, customer_email_address#57, year_total#58, customer_id#82, year_total#83]

(68) Scan parquet default.catalog_sales
Output [6]: [cs_sold_date_sk#60, cs_bill_customer_sk#61, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2)>

(69) ColumnarToRow [codegen id : 28]
Input [6]: [cs_sold_date_sk#60, cs_bill_customer_sk#61, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65]

(70) Filter [codegen id : 28]
Input [6]: [cs_sold_date_sk#60, cs_bill_customer_sk#61, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65]
Condition : (isnotnull(cs_bill_customer_sk#61) AND isnotnull(cs_sold_date_sk#60))

(71) ReusedExchange [Reuses operator id: 32]
Output [2]: [d_date_sk#7, d_year#8]

(72) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [cs_sold_date_sk#60]
Right keys [1]: [d_date_sk#7]
Join condition: None

(73) Project [codegen id : 28]
Output [6]: [cs_bill_customer_sk#61, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65, d_year#8]
Input [8]: [cs_sold_date_sk#60, cs_bill_customer_sk#61, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65, d_date_sk#7, d_year#8]

(74) Exchange
Input [6]: [cs_bill_customer_sk#61, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65, d_year#8]
Arguments: hashpartitioning(cs_bill_customer_sk#61, 5), ENSURE_REQUIREMENTS, [id=#85]

(75) Sort [codegen id : 29]
Input [6]: [cs_bill_customer_sk#61, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65, d_year#8]
Arguments: [cs_bill_customer_sk#61 ASC NULLS FIRST], false, 0

(76) ReusedExchange [Reuses operator id: 16]
Output [8]: [c_customer_sk#11, c_customer_id#86, c_first_name#87, c_last_name#88, c_preferred_cust_flag#89, c_birth_country#90, c_login#91, c_email_address#92]

(77) Sort [codegen id : 31]
Input [8]: [c_customer_sk#11, c_customer_id#86, c_first_name#87, c_last_name#88, c_preferred_cust_flag#89, c_birth_country#90, c_login#91, c_email_address#92]
Arguments: [c_customer_sk#11 ASC NULLS FIRST], false, 0

(78) SortMergeJoin [codegen id : 32]
Left keys [1]: [cs_bill_customer_sk#61]
Right keys [1]: [c_customer_sk#11]
Join condition: None

(79) Project [codegen id : 32]
Output [12]: [c_customer_id#86, c_first_name#87, c_last_name#88, c_preferred_cust_flag#89, c_birth_country#90, c_login#91, c_email_address#92, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65, d_year#8]
Input [14]: [cs_bill_customer_sk#61, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65, d_year#8, c_customer_sk#11, c_customer_id#86, c_first_name#87, c_last_name#88, c_preferred_cust_flag#89, c_birth_country#90, c_login#91, c_email_address#92]

(80) HashAggregate [codegen id : 32]
Input [12]: [c_customer_id#86, c_first_name#87, c_last_name#88, c_preferred_cust_flag#89, c_birth_country#90, c_login#91, c_email_address#92, cs_ext_discount_amt#62, cs_ext_sales_price#63, cs_ext_wholesale_cost#64, cs_ext_list_price#65, d_year#8]
Keys [8]: [c_customer_id#86, c_first_name#87, c_last_name#88, c_preferred_cust_flag#89, c_birth_country#90, c_login#91, c_email_address#92, d_year#8]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#65 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#64 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#62 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#63 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#93, isEmpty#94]
Results [10]: [c_customer_id#86, c_first_name#87, c_last_name#88, c_preferred_cust_flag#89, c_birth_country#90, c_login#91, c_email_address#92, d_year#8, sum#95, isEmpty#96]

(81) Exchange
Input [10]: [c_customer_id#86, c_first_name#87, c_last_name#88, c_preferred_cust_flag#89, c_birth_country#90, c_login#91, c_email_address#92, d_year#8, sum#95, isEmpty#96]
Arguments: hashpartitioning(c_customer_id#86, c_first_name#87, c_last_name#88, c_preferred_cust_flag#89, c_birth_country#90, c_login#91, c_email_address#92, d_year#8, 5), ENSURE_REQUIREMENTS, [id=#97]

(82) HashAggregate [codegen id : 33]
Input [10]: [c_customer_id#86, c_first_name#87, c_last_name#88, c_preferred_cust_flag#89, c_birth_country#90, c_login#91, c_email_address#92, d_year#8, sum#95, isEmpty#96]
Keys [8]: [c_customer_id#86, c_first_name#87, c_last_name#88, c_preferred_cust_flag#89, c_birth_country#90, c_login#91, c_email_address#92, d_year#8]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#65 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#64 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#62 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#63 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#65 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#64 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#62 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#63 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#98]
Results [2]: [c_customer_id#86 AS customer_id#99, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#65 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#64 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#62 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#63 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#98 AS year_total#100]

(83) Exchange
Input [2]: [customer_id#99, year_total#100]
Arguments: hashpartitioning(customer_id#99, 5), ENSURE_REQUIREMENTS, [id=#101]

(84) Sort [codegen id : 34]
Input [2]: [customer_id#99, year_total#100]
Arguments: [customer_id#99 ASC NULLS FIRST], false, 0

(85) SortMergeJoin [codegen id : 35]
Left keys [1]: [customer_id#33]
Right keys [1]: [customer_id#99]
Join condition: (CASE WHEN (year_total#83 > 0.000000) THEN CheckOverflow((promote_precision(year_total#100) / promote_precision(year_total#83)), DecimalType(38,14), true) ELSE null END > CASE WHEN (year_total#34 > 0.000000) THEN CheckOverflow((promote_precision(year_total#58) / promote_precision(year_total#34)), DecimalType(38,14), true) ELSE null END)

(86) Project [codegen id : 35]
Output [10]: [customer_id#33, customer_id#51, customer_first_name#52, customer_last_name#53, customer_preferred_cust_flag#54, customer_birth_country#55, customer_login#56, customer_email_address#57, year_total#83, year_total#100]
Input [13]: [customer_id#33, year_total#34, customer_id#51, customer_first_name#52, customer_last_name#53, customer_preferred_cust_flag#54, customer_birth_country#55, customer_login#56, customer_email_address#57, year_total#58, year_total#83, customer_id#99, year_total#100]

(87) Scan parquet default.web_sales
Output [6]: [ws_sold_date_sk#102, ws_bill_customer_sk#103, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_price:decimal(7,2),ws_ext_wholesale_cost:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(88) ColumnarToRow [codegen id : 37]
Input [6]: [ws_sold_date_sk#102, ws_bill_customer_sk#103, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107]

(89) Filter [codegen id : 37]
Input [6]: [ws_sold_date_sk#102, ws_bill_customer_sk#103, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107]
Condition : (isnotnull(ws_bill_customer_sk#103) AND isnotnull(ws_sold_date_sk#102))

(90) ReusedExchange [Reuses operator id: 7]
Output [2]: [d_date_sk#7, d_year#8]

(91) BroadcastHashJoin [codegen id : 37]
Left keys [1]: [ws_sold_date_sk#102]
Right keys [1]: [d_date_sk#7]
Join condition: None

(92) Project [codegen id : 37]
Output [6]: [ws_bill_customer_sk#103, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107, d_year#8]
Input [8]: [ws_sold_date_sk#102, ws_bill_customer_sk#103, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107, d_date_sk#7, d_year#8]

(93) Exchange
Input [6]: [ws_bill_customer_sk#103, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107, d_year#8]
Arguments: hashpartitioning(ws_bill_customer_sk#103, 5), ENSURE_REQUIREMENTS, [id=#108]

(94) Sort [codegen id : 38]
Input [6]: [ws_bill_customer_sk#103, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107, d_year#8]
Arguments: [ws_bill_customer_sk#103 ASC NULLS FIRST], false, 0

(95) ReusedExchange [Reuses operator id: 16]
Output [8]: [c_customer_sk#11, c_customer_id#109, c_first_name#110, c_last_name#111, c_preferred_cust_flag#112, c_birth_country#113, c_login#114, c_email_address#115]

(96) Sort [codegen id : 40]
Input [8]: [c_customer_sk#11, c_customer_id#109, c_first_name#110, c_last_name#111, c_preferred_cust_flag#112, c_birth_country#113, c_login#114, c_email_address#115]
Arguments: [c_customer_sk#11 ASC NULLS FIRST], false, 0

(97) SortMergeJoin [codegen id : 41]
Left keys [1]: [ws_bill_customer_sk#103]
Right keys [1]: [c_customer_sk#11]
Join condition: None

(98) Project [codegen id : 41]
Output [12]: [c_customer_id#109, c_first_name#110, c_last_name#111, c_preferred_cust_flag#112, c_birth_country#113, c_login#114, c_email_address#115, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107, d_year#8]
Input [14]: [ws_bill_customer_sk#103, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107, d_year#8, c_customer_sk#11, c_customer_id#109, c_first_name#110, c_last_name#111, c_preferred_cust_flag#112, c_birth_country#113, c_login#114, c_email_address#115]

(99) HashAggregate [codegen id : 41]
Input [12]: [c_customer_id#109, c_first_name#110, c_last_name#111, c_preferred_cust_flag#112, c_birth_country#113, c_login#114, c_email_address#115, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107, d_year#8]
Keys [8]: [c_customer_id#109, c_first_name#110, c_last_name#111, c_preferred_cust_flag#112, c_birth_country#113, c_login#114, c_email_address#115, d_year#8]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#107 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#106 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#104 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#105 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#116, isEmpty#117]
Results [10]: [c_customer_id#109, c_first_name#110, c_last_name#111, c_preferred_cust_flag#112, c_birth_country#113, c_login#114, c_email_address#115, d_year#8, sum#118, isEmpty#119]

(100) Exchange
Input [10]: [c_customer_id#109, c_first_name#110, c_last_name#111, c_preferred_cust_flag#112, c_birth_country#113, c_login#114, c_email_address#115, d_year#8, sum#118, isEmpty#119]
Arguments: hashpartitioning(c_customer_id#109, c_first_name#110, c_last_name#111, c_preferred_cust_flag#112, c_birth_country#113, c_login#114, c_email_address#115, d_year#8, 5), ENSURE_REQUIREMENTS, [id=#120]

(101) HashAggregate [codegen id : 42]
Input [10]: [c_customer_id#109, c_first_name#110, c_last_name#111, c_preferred_cust_flag#112, c_birth_country#113, c_login#114, c_email_address#115, d_year#8, sum#118, isEmpty#119]
Keys [8]: [c_customer_id#109, c_first_name#110, c_last_name#111, c_preferred_cust_flag#112, c_birth_country#113, c_login#114, c_email_address#115, d_year#8]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#107 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#106 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#104 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#105 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#107 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#106 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#104 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#105 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#121]
Results [2]: [c_customer_id#109 AS customer_id#122, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#107 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#106 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#104 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#105 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#121 AS year_total#123]

(102) Filter [codegen id : 42]
Input [2]: [customer_id#122, year_total#123]
Condition : (isnotnull(year_total#123) AND (year_total#123 > 0.000000))

(103) Project [codegen id : 42]
Output [2]: [customer_id#122 AS customer_id#124, year_total#123 AS year_total#125]
Input [2]: [customer_id#122, year_total#123]

(104) Exchange
Input [2]: [customer_id#124, year_total#125]
Arguments: hashpartitioning(customer_id#124, 5), ENSURE_REQUIREMENTS, [id=#126]

(105) Sort [codegen id : 43]
Input [2]: [customer_id#124, year_total#125]
Arguments: [customer_id#124 ASC NULLS FIRST], false, 0

(106) SortMergeJoin [codegen id : 44]
Left keys [1]: [customer_id#33]
Right keys [1]: [customer_id#124]
Join condition: None

(107) Project [codegen id : 44]
Output [11]: [customer_id#33, customer_id#51, customer_first_name#52, customer_last_name#53, customer_preferred_cust_flag#54, customer_birth_country#55, customer_login#56, customer_email_address#57, year_total#83, year_total#100, year_total#125]
Input [12]: [customer_id#33, customer_id#51, customer_first_name#52, customer_last_name#53, customer_preferred_cust_flag#54, customer_birth_country#55, customer_login#56, customer_email_address#57, year_total#83, year_total#100, customer_id#124, year_total#125]

(108) Scan parquet default.web_sales
Output [6]: [ws_sold_date_sk#102, ws_bill_customer_sk#103, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_price:decimal(7,2),ws_ext_wholesale_cost:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(109) ColumnarToRow [codegen id : 46]
Input [6]: [ws_sold_date_sk#102, ws_bill_customer_sk#103, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107]

(110) Filter [codegen id : 46]
Input [6]: [ws_sold_date_sk#102, ws_bill_customer_sk#103, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107]
Condition : (isnotnull(ws_bill_customer_sk#103) AND isnotnull(ws_sold_date_sk#102))

(111) ReusedExchange [Reuses operator id: 32]
Output [2]: [d_date_sk#7, d_year#8]

(112) BroadcastHashJoin [codegen id : 46]
Left keys [1]: [ws_sold_date_sk#102]
Right keys [1]: [d_date_sk#7]
Join condition: None

(113) Project [codegen id : 46]
Output [6]: [ws_bill_customer_sk#103, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107, d_year#8]
Input [8]: [ws_sold_date_sk#102, ws_bill_customer_sk#103, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107, d_date_sk#7, d_year#8]

(114) Exchange
Input [6]: [ws_bill_customer_sk#103, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107, d_year#8]
Arguments: hashpartitioning(ws_bill_customer_sk#103, 5), ENSURE_REQUIREMENTS, [id=#127]

(115) Sort [codegen id : 47]
Input [6]: [ws_bill_customer_sk#103, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107, d_year#8]
Arguments: [ws_bill_customer_sk#103 ASC NULLS FIRST], false, 0

(116) ReusedExchange [Reuses operator id: 16]
Output [8]: [c_customer_sk#11, c_customer_id#128, c_first_name#129, c_last_name#130, c_preferred_cust_flag#131, c_birth_country#132, c_login#133, c_email_address#134]

(117) Sort [codegen id : 49]
Input [8]: [c_customer_sk#11, c_customer_id#128, c_first_name#129, c_last_name#130, c_preferred_cust_flag#131, c_birth_country#132, c_login#133, c_email_address#134]
Arguments: [c_customer_sk#11 ASC NULLS FIRST], false, 0

(118) SortMergeJoin [codegen id : 50]
Left keys [1]: [ws_bill_customer_sk#103]
Right keys [1]: [c_customer_sk#11]
Join condition: None

(119) Project [codegen id : 50]
Output [12]: [c_customer_id#128, c_first_name#129, c_last_name#130, c_preferred_cust_flag#131, c_birth_country#132, c_login#133, c_email_address#134, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107, d_year#8]
Input [14]: [ws_bill_customer_sk#103, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107, d_year#8, c_customer_sk#11, c_customer_id#128, c_first_name#129, c_last_name#130, c_preferred_cust_flag#131, c_birth_country#132, c_login#133, c_email_address#134]

(120) HashAggregate [codegen id : 50]
Input [12]: [c_customer_id#128, c_first_name#129, c_last_name#130, c_preferred_cust_flag#131, c_birth_country#132, c_login#133, c_email_address#134, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107, d_year#8]
Keys [8]: [c_customer_id#128, c_first_name#129, c_last_name#130, c_preferred_cust_flag#131, c_birth_country#132, c_login#133, c_email_address#134, d_year#8]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#107 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#106 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#104 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#105 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#135, isEmpty#136]
Results [10]: [c_customer_id#128, c_first_name#129, c_last_name#130, c_preferred_cust_flag#131, c_birth_country#132, c_login#133, c_email_address#134, d_year#8, sum#137, isEmpty#138]

(121) Exchange
Input [10]: [c_customer_id#128, c_first_name#129, c_last_name#130, c_preferred_cust_flag#131, c_birth_country#132, c_login#133, c_email_address#134, d_year#8, sum#137, isEmpty#138]
Arguments: hashpartitioning(c_customer_id#128, c_first_name#129, c_last_name#130, c_preferred_cust_flag#131, c_birth_country#132, c_login#133, c_email_address#134, d_year#8, 5), ENSURE_REQUIREMENTS, [id=#139]

(122) HashAggregate [codegen id : 51]
Input [10]: [c_customer_id#128, c_first_name#129, c_last_name#130, c_preferred_cust_flag#131, c_birth_country#132, c_login#133, c_email_address#134, d_year#8, sum#137, isEmpty#138]
Keys [8]: [c_customer_id#128, c_first_name#129, c_last_name#130, c_preferred_cust_flag#131, c_birth_country#132, c_login#133, c_email_address#134, d_year#8]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#107 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#106 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#104 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#105 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#107 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#106 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#104 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#105 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#140]
Results [2]: [c_customer_id#128 AS customer_id#141, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#107 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#106 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#104 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#105 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#140 AS year_total#142]

(123) Exchange
Input [2]: [customer_id#141, year_total#142]
Arguments: hashpartitioning(customer_id#141, 5), ENSURE_REQUIREMENTS, [id=#143]

(124) Sort [codegen id : 52]
Input [2]: [customer_id#141, year_total#142]
Arguments: [customer_id#141 ASC NULLS FIRST], false, 0

(125) SortMergeJoin [codegen id : 53]
Left keys [1]: [customer_id#33]
Right keys [1]: [customer_id#141]
Join condition: (CASE WHEN (year_total#83 > 0.000000) THEN CheckOverflow((promote_precision(year_total#100) / promote_precision(year_total#83)), DecimalType(38,14), true) ELSE null END > CASE WHEN (year_total#125 > 0.000000) THEN CheckOverflow((promote_precision(year_total#142) / promote_precision(year_total#125)), DecimalType(38,14), true) ELSE null END)

(126) Project [codegen id : 53]
Output [7]: [customer_id#51, customer_first_name#52, customer_last_name#53, customer_preferred_cust_flag#54, customer_birth_country#55, customer_login#56, customer_email_address#57]
Input [13]: [customer_id#33, customer_id#51, customer_first_name#52, customer_last_name#53, customer_preferred_cust_flag#54, customer_birth_country#55, customer_login#56, customer_email_address#57, year_total#83, year_total#100, year_total#125, customer_id#141, year_total#142]

(127) TakeOrderedAndProject
Input [7]: [customer_id#51, customer_first_name#52, customer_last_name#53, customer_preferred_cust_flag#54, customer_birth_country#55, customer_login#56, customer_email_address#57]
Arguments: 100, [customer_id#51 ASC NULLS FIRST, customer_first_name#52 ASC NULLS FIRST, customer_last_name#53 ASC NULLS FIRST, customer_preferred_cust_flag#54 ASC NULLS FIRST, customer_birth_country#55 ASC NULLS FIRST, customer_login#56 ASC NULLS FIRST, customer_email_address#57 ASC NULLS FIRST], [customer_id#51, customer_first_name#52, customer_last_name#53, customer_preferred_cust_flag#54, customer_birth_country#55, customer_login#56, customer_email_address#57]

