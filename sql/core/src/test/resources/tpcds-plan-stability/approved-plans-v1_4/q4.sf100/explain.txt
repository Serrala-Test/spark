== Physical Plan ==
TakeOrderedAndProject (117)
+- * Project (116)
   +- * SortMergeJoin Inner (115)
      :- * Project (100)
      :  +- * SortMergeJoin Inner (99)
      :     :- * Project (79)
      :     :  +- * SortMergeJoin Inner (78)
      :     :     :- * Project (63)
      :     :     :  +- * SortMergeJoin Inner (62)
      :     :     :     :- * SortMergeJoin Inner (42)
      :     :     :     :  :- * Sort (24)
      :     :     :     :  :  +- Exchange (23)
      :     :     :     :  :     +- * Filter (22)
      :     :     :     :  :        +- * HashAggregate (21)
      :     :     :     :  :           +- Exchange (20)
      :     :     :     :  :              +- * HashAggregate (19)
      :     :     :     :  :                 +- * Project (18)
      :     :     :     :  :                    +- * BroadcastHashJoin Inner BuildRight (17)
      :     :     :     :  :                       :- * Project (12)
      :     :     :     :  :                       :  +- * SortMergeJoin Inner (11)
      :     :     :     :  :                       :     :- * Sort (5)
      :     :     :     :  :                       :     :  +- Exchange (4)
      :     :     :     :  :                       :     :     +- * Filter (3)
      :     :     :     :  :                       :     :        +- * ColumnarToRow (2)
      :     :     :     :  :                       :     :           +- Scan parquet default.customer (1)
      :     :     :     :  :                       :     +- * Sort (10)
      :     :     :     :  :                       :        +- Exchange (9)
      :     :     :     :  :                       :           +- * Filter (8)
      :     :     :     :  :                       :              +- * ColumnarToRow (7)
      :     :     :     :  :                       :                 +- Scan parquet default.store_sales (6)
      :     :     :     :  :                       +- BroadcastExchange (16)
      :     :     :     :  :                          +- * Filter (15)
      :     :     :     :  :                             +- * ColumnarToRow (14)
      :     :     :     :  :                                +- Scan parquet default.date_dim (13)
      :     :     :     :  +- * Sort (41)
      :     :     :     :     +- Exchange (40)
      :     :     :     :        +- * HashAggregate (39)
      :     :     :     :           +- Exchange (38)
      :     :     :     :              +- * HashAggregate (37)
      :     :     :     :                 +- * Project (36)
      :     :     :     :                    +- * BroadcastHashJoin Inner BuildRight (35)
      :     :     :     :                       :- * Project (30)
      :     :     :     :                       :  +- * SortMergeJoin Inner (29)
      :     :     :     :                       :     :- * Sort (26)
      :     :     :     :                       :     :  +- ReusedExchange (25)
      :     :     :     :                       :     +- * Sort (28)
      :     :     :     :                       :        +- ReusedExchange (27)
      :     :     :     :                       +- BroadcastExchange (34)
      :     :     :     :                          +- * Filter (33)
      :     :     :     :                             +- * ColumnarToRow (32)
      :     :     :     :                                +- Scan parquet default.date_dim (31)
      :     :     :     +- * Sort (61)
      :     :     :        +- Exchange (60)
      :     :     :           +- * Project (59)
      :     :     :              +- * Filter (58)
      :     :     :                 +- * HashAggregate (57)
      :     :     :                    +- Exchange (56)
      :     :     :                       +- * HashAggregate (55)
      :     :     :                          +- * Project (54)
      :     :     :                             +- * BroadcastHashJoin Inner BuildRight (53)
      :     :     :                                :- * Project (51)
      :     :     :                                :  +- * SortMergeJoin Inner (50)
      :     :     :                                :     :- * Sort (44)
      :     :     :                                :     :  +- ReusedExchange (43)
      :     :     :                                :     +- * Sort (49)
      :     :     :                                :        +- Exchange (48)
      :     :     :                                :           +- * Filter (47)
      :     :     :                                :              +- * ColumnarToRow (46)
      :     :     :                                :                 +- Scan parquet default.catalog_sales (45)
      :     :     :                                +- ReusedExchange (52)
      :     :     +- * Sort (77)
      :     :        +- Exchange (76)
      :     :           +- * HashAggregate (75)
      :     :              +- Exchange (74)
      :     :                 +- * HashAggregate (73)
      :     :                    +- * Project (72)
      :     :                       +- * BroadcastHashJoin Inner BuildRight (71)
      :     :                          :- * Project (69)
      :     :                          :  +- * SortMergeJoin Inner (68)
      :     :                          :     :- * Sort (65)
      :     :                          :     :  +- ReusedExchange (64)
      :     :                          :     +- * Sort (67)
      :     :                          :        +- ReusedExchange (66)
      :     :                          +- ReusedExchange (70)
      :     +- * Sort (98)
      :        +- Exchange (97)
      :           +- * Project (96)
      :              +- * Filter (95)
      :                 +- * HashAggregate (94)
      :                    +- Exchange (93)
      :                       +- * HashAggregate (92)
      :                          +- * Project (91)
      :                             +- * BroadcastHashJoin Inner BuildRight (90)
      :                                :- * Project (88)
      :                                :  +- * SortMergeJoin Inner (87)
      :                                :     :- * Sort (81)
      :                                :     :  +- ReusedExchange (80)
      :                                :     +- * Sort (86)
      :                                :        +- Exchange (85)
      :                                :           +- * Filter (84)
      :                                :              +- * ColumnarToRow (83)
      :                                :                 +- Scan parquet default.web_sales (82)
      :                                +- ReusedExchange (89)
      +- * Sort (114)
         +- Exchange (113)
            +- * HashAggregate (112)
               +- Exchange (111)
                  +- * HashAggregate (110)
                     +- * Project (109)
                        +- * BroadcastHashJoin Inner BuildRight (108)
                           :- * Project (106)
                           :  +- * SortMergeJoin Inner (105)
                           :     :- * Sort (102)
                           :     :  +- ReusedExchange (101)
                           :     +- * Sort (104)
                           :        +- ReusedExchange (103)
                           +- ReusedExchange (107)


(1) Scan parquet default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(2) ColumnarToRow [codegen id : 1]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(3) Filter [codegen id : 1]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(4) Exchange
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Arguments: hashpartitioning(c_customer_sk#1, 5), ENSURE_REQUIREMENTS, [id=#9]

(5) Sort [codegen id : 2]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(6) Scan parquet default.store_sales
Output [6]: [ss_sold_date_sk#10, ss_customer_sk#11, ss_ext_discount_amt#12, ss_ext_sales_price#13, ss_ext_wholesale_cost#14, ss_ext_list_price#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(7) ColumnarToRow [codegen id : 3]
Input [6]: [ss_sold_date_sk#10, ss_customer_sk#11, ss_ext_discount_amt#12, ss_ext_sales_price#13, ss_ext_wholesale_cost#14, ss_ext_list_price#15]

(8) Filter [codegen id : 3]
Input [6]: [ss_sold_date_sk#10, ss_customer_sk#11, ss_ext_discount_amt#12, ss_ext_sales_price#13, ss_ext_wholesale_cost#14, ss_ext_list_price#15]
Condition : (isnotnull(ss_customer_sk#11) AND isnotnull(ss_sold_date_sk#10))

(9) Exchange
Input [6]: [ss_sold_date_sk#10, ss_customer_sk#11, ss_ext_discount_amt#12, ss_ext_sales_price#13, ss_ext_wholesale_cost#14, ss_ext_list_price#15]
Arguments: hashpartitioning(ss_customer_sk#11, 5), ENSURE_REQUIREMENTS, [id=#16]

(10) Sort [codegen id : 4]
Input [6]: [ss_sold_date_sk#10, ss_customer_sk#11, ss_ext_discount_amt#12, ss_ext_sales_price#13, ss_ext_wholesale_cost#14, ss_ext_list_price#15]
Arguments: [ss_customer_sk#11 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 6]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#11]
Join condition: None

(12) Project [codegen id : 6]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_sold_date_sk#10, ss_ext_discount_amt#12, ss_ext_sales_price#13, ss_ext_wholesale_cost#14, ss_ext_list_price#15]
Input [14]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_sold_date_sk#10, ss_customer_sk#11, ss_ext_discount_amt#12, ss_ext_sales_price#13, ss_ext_wholesale_cost#14, ss_ext_list_price#15]

(13) Scan parquet default.date_dim
Output [2]: [d_date_sk#17, d_year#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(14) ColumnarToRow [codegen id : 5]
Input [2]: [d_date_sk#17, d_year#18]

(15) Filter [codegen id : 5]
Input [2]: [d_date_sk#17, d_year#18]
Condition : ((isnotnull(d_year#18) AND (d_year#18 = 2001)) AND isnotnull(d_date_sk#17))

(16) BroadcastExchange
Input [2]: [d_date_sk#17, d_year#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#19]

(17) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#10]
Right keys [1]: [d_date_sk#17]
Join condition: None

(18) Project [codegen id : 6]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#12, ss_ext_sales_price#13, ss_ext_wholesale_cost#14, ss_ext_list_price#15, d_year#18]
Input [14]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_sold_date_sk#10, ss_ext_discount_amt#12, ss_ext_sales_price#13, ss_ext_wholesale_cost#14, ss_ext_list_price#15, d_date_sk#17, d_year#18]

(19) HashAggregate [codegen id : 6]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#12, ss_ext_sales_price#13, ss_ext_wholesale_cost#14, ss_ext_list_price#15, d_year#18]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#15 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#14 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#12 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#13 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#20, isEmpty#21]
Results [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18, sum#22, isEmpty#23]

(20) Exchange
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18, sum#22, isEmpty#23]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18, 5), ENSURE_REQUIREMENTS, [id=#24]

(21) HashAggregate [codegen id : 7]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18, sum#22, isEmpty#23]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#15 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#14 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#12 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#13 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#15 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#14 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#12 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#13 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#25]
Results [2]: [c_customer_id#2 AS customer_id#26, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#15 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#14 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#12 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#13 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#25 AS year_total#27]

(22) Filter [codegen id : 7]
Input [2]: [customer_id#26, year_total#27]
Condition : (isnotnull(year_total#27) AND (year_total#27 > 0.000000))

(23) Exchange
Input [2]: [customer_id#26, year_total#27]
Arguments: hashpartitioning(customer_id#26, 5), ENSURE_REQUIREMENTS, [id=#28]

(24) Sort [codegen id : 8]
Input [2]: [customer_id#26, year_total#27]
Arguments: [customer_id#26 ASC NULLS FIRST], false, 0

(25) ReusedExchange [Reuses operator id: 4]
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(26) Sort [codegen id : 10]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(27) ReusedExchange [Reuses operator id: 9]
Output [6]: [ss_sold_date_sk#10, ss_customer_sk#11, ss_ext_discount_amt#12, ss_ext_sales_price#13, ss_ext_wholesale_cost#14, ss_ext_list_price#15]

(28) Sort [codegen id : 12]
Input [6]: [ss_sold_date_sk#10, ss_customer_sk#11, ss_ext_discount_amt#12, ss_ext_sales_price#13, ss_ext_wholesale_cost#14, ss_ext_list_price#15]
Arguments: [ss_customer_sk#11 ASC NULLS FIRST], false, 0

(29) SortMergeJoin [codegen id : 14]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ss_customer_sk#11]
Join condition: None

(30) Project [codegen id : 14]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_sold_date_sk#10, ss_ext_discount_amt#12, ss_ext_sales_price#13, ss_ext_wholesale_cost#14, ss_ext_list_price#15]
Input [14]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_sold_date_sk#10, ss_customer_sk#11, ss_ext_discount_amt#12, ss_ext_sales_price#13, ss_ext_wholesale_cost#14, ss_ext_list_price#15]

(31) Scan parquet default.date_dim
Output [2]: [d_date_sk#17, d_year#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(32) ColumnarToRow [codegen id : 13]
Input [2]: [d_date_sk#17, d_year#18]

(33) Filter [codegen id : 13]
Input [2]: [d_date_sk#17, d_year#18]
Condition : ((isnotnull(d_year#18) AND (d_year#18 = 2002)) AND isnotnull(d_date_sk#17))

(34) BroadcastExchange
Input [2]: [d_date_sk#17, d_year#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29]

(35) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ss_sold_date_sk#10]
Right keys [1]: [d_date_sk#17]
Join condition: None

(36) Project [codegen id : 14]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#12, ss_ext_sales_price#13, ss_ext_wholesale_cost#14, ss_ext_list_price#15, d_year#18]
Input [14]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_sold_date_sk#10, ss_ext_discount_amt#12, ss_ext_sales_price#13, ss_ext_wholesale_cost#14, ss_ext_list_price#15, d_date_sk#17, d_year#18]

(37) HashAggregate [codegen id : 14]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ss_ext_discount_amt#12, ss_ext_sales_price#13, ss_ext_wholesale_cost#14, ss_ext_list_price#15, d_year#18]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#15 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#14 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#12 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#13 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#30, isEmpty#31]
Results [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18, sum#32, isEmpty#33]

(38) Exchange
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18, sum#32, isEmpty#33]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18, 5), ENSURE_REQUIREMENTS, [id=#34]

(39) HashAggregate [codegen id : 15]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18, sum#32, isEmpty#33]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#15 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#14 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#12 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#13 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#15 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#14 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#12 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#13 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#35]
Results [8]: [c_customer_id#2 AS customer_id#36, c_first_name#3 AS customer_first_name#37, c_last_name#4 AS customer_last_name#38, c_preferred_cust_flag#5 AS customer_preferred_cust_flag#39, c_birth_country#6 AS customer_birth_country#40, c_login#7 AS customer_login#41, c_email_address#8 AS customer_email_address#42, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#15 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#14 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#12 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#13 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#35 AS year_total#43]

(40) Exchange
Input [8]: [customer_id#36, customer_first_name#37, customer_last_name#38, customer_preferred_cust_flag#39, customer_birth_country#40, customer_login#41, customer_email_address#42, year_total#43]
Arguments: hashpartitioning(customer_id#36, 5), ENSURE_REQUIREMENTS, [id=#44]

(41) Sort [codegen id : 16]
Input [8]: [customer_id#36, customer_first_name#37, customer_last_name#38, customer_preferred_cust_flag#39, customer_birth_country#40, customer_login#41, customer_email_address#42, year_total#43]
Arguments: [customer_id#36 ASC NULLS FIRST], false, 0

(42) SortMergeJoin [codegen id : 17]
Left keys [1]: [customer_id#26]
Right keys [1]: [customer_id#36]
Join condition: None

(43) ReusedExchange [Reuses operator id: 4]
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(44) Sort [codegen id : 19]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(45) Scan parquet default.catalog_sales
Output [6]: [cs_sold_date_sk#45, cs_bill_customer_sk#46, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2)>

(46) ColumnarToRow [codegen id : 20]
Input [6]: [cs_sold_date_sk#45, cs_bill_customer_sk#46, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50]

(47) Filter [codegen id : 20]
Input [6]: [cs_sold_date_sk#45, cs_bill_customer_sk#46, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50]
Condition : (isnotnull(cs_bill_customer_sk#46) AND isnotnull(cs_sold_date_sk#45))

(48) Exchange
Input [6]: [cs_sold_date_sk#45, cs_bill_customer_sk#46, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50]
Arguments: hashpartitioning(cs_bill_customer_sk#46, 5), ENSURE_REQUIREMENTS, [id=#51]

(49) Sort [codegen id : 21]
Input [6]: [cs_sold_date_sk#45, cs_bill_customer_sk#46, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50]
Arguments: [cs_bill_customer_sk#46 ASC NULLS FIRST], false, 0

(50) SortMergeJoin [codegen id : 23]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [cs_bill_customer_sk#46]
Join condition: None

(51) Project [codegen id : 23]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_sold_date_sk#45, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50]
Input [14]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_sold_date_sk#45, cs_bill_customer_sk#46, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50]

(52) ReusedExchange [Reuses operator id: 16]
Output [2]: [d_date_sk#17, d_year#18]

(53) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [cs_sold_date_sk#45]
Right keys [1]: [d_date_sk#17]
Join condition: None

(54) Project [codegen id : 23]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50, d_year#18]
Input [14]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_sold_date_sk#45, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50, d_date_sk#17, d_year#18]

(55) HashAggregate [codegen id : 23]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50, d_year#18]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#50 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#49 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#47 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#48 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#52, isEmpty#53]
Results [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18, sum#54, isEmpty#55]

(56) Exchange
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18, sum#54, isEmpty#55]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18, 5), ENSURE_REQUIREMENTS, [id=#56]

(57) HashAggregate [codegen id : 24]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18, sum#54, isEmpty#55]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#50 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#49 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#47 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#48 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#50 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#49 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#47 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#48 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#57]
Results [2]: [c_customer_id#2 AS customer_id#58, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#50 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#49 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#47 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#48 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#57 AS year_total#59]

(58) Filter [codegen id : 24]
Input [2]: [customer_id#58, year_total#59]
Condition : (isnotnull(year_total#59) AND (year_total#59 > 0.000000))

(59) Project [codegen id : 24]
Output [2]: [customer_id#58 AS customer_id#60, year_total#59 AS year_total#61]
Input [2]: [customer_id#58, year_total#59]

(60) Exchange
Input [2]: [customer_id#60, year_total#61]
Arguments: hashpartitioning(customer_id#60, 5), ENSURE_REQUIREMENTS, [id=#62]

(61) Sort [codegen id : 25]
Input [2]: [customer_id#60, year_total#61]
Arguments: [customer_id#60 ASC NULLS FIRST], false, 0

(62) SortMergeJoin [codegen id : 26]
Left keys [1]: [customer_id#26]
Right keys [1]: [customer_id#60]
Join condition: None

(63) Project [codegen id : 26]
Output [11]: [customer_id#26, year_total#27, customer_id#36, customer_first_name#37, customer_last_name#38, customer_preferred_cust_flag#39, customer_birth_country#40, customer_login#41, customer_email_address#42, year_total#43, year_total#61]
Input [12]: [customer_id#26, year_total#27, customer_id#36, customer_first_name#37, customer_last_name#38, customer_preferred_cust_flag#39, customer_birth_country#40, customer_login#41, customer_email_address#42, year_total#43, customer_id#60, year_total#61]

(64) ReusedExchange [Reuses operator id: 4]
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(65) Sort [codegen id : 28]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(66) ReusedExchange [Reuses operator id: 48]
Output [6]: [cs_sold_date_sk#45, cs_bill_customer_sk#46, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50]

(67) Sort [codegen id : 30]
Input [6]: [cs_sold_date_sk#45, cs_bill_customer_sk#46, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50]
Arguments: [cs_bill_customer_sk#46 ASC NULLS FIRST], false, 0

(68) SortMergeJoin [codegen id : 32]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [cs_bill_customer_sk#46]
Join condition: None

(69) Project [codegen id : 32]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_sold_date_sk#45, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50]
Input [14]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_sold_date_sk#45, cs_bill_customer_sk#46, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50]

(70) ReusedExchange [Reuses operator id: 34]
Output [2]: [d_date_sk#17, d_year#18]

(71) BroadcastHashJoin [codegen id : 32]
Left keys [1]: [cs_sold_date_sk#45]
Right keys [1]: [d_date_sk#17]
Join condition: None

(72) Project [codegen id : 32]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50, d_year#18]
Input [14]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_sold_date_sk#45, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50, d_date_sk#17, d_year#18]

(73) HashAggregate [codegen id : 32]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, cs_ext_discount_amt#47, cs_ext_sales_price#48, cs_ext_wholesale_cost#49, cs_ext_list_price#50, d_year#18]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#50 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#49 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#47 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#48 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#63, isEmpty#64]
Results [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18, sum#65, isEmpty#66]

(74) Exchange
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18, sum#65, isEmpty#66]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18, 5), ENSURE_REQUIREMENTS, [id=#67]

(75) HashAggregate [codegen id : 33]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18, sum#65, isEmpty#66]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#50 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#49 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#47 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#48 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#50 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#49 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#47 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#48 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#68]
Results [2]: [c_customer_id#2 AS customer_id#69, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cs_ext_list_price#50 as decimal(8,2))) - promote_precision(cast(cs_ext_wholesale_cost#49 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(cs_ext_discount_amt#47 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(cs_ext_sales_price#48 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#68 AS year_total#70]

(76) Exchange
Input [2]: [customer_id#69, year_total#70]
Arguments: hashpartitioning(customer_id#69, 5), ENSURE_REQUIREMENTS, [id=#71]

(77) Sort [codegen id : 34]
Input [2]: [customer_id#69, year_total#70]
Arguments: [customer_id#69 ASC NULLS FIRST], false, 0

(78) SortMergeJoin [codegen id : 35]
Left keys [1]: [customer_id#26]
Right keys [1]: [customer_id#69]
Join condition: (CASE WHEN (year_total#61 > 0.000000) THEN CheckOverflow((promote_precision(year_total#70) / promote_precision(year_total#61)), DecimalType(38,14), true) ELSE null END > CASE WHEN (year_total#27 > 0.000000) THEN CheckOverflow((promote_precision(year_total#43) / promote_precision(year_total#27)), DecimalType(38,14), true) ELSE null END)

(79) Project [codegen id : 35]
Output [10]: [customer_id#26, customer_id#36, customer_first_name#37, customer_last_name#38, customer_preferred_cust_flag#39, customer_birth_country#40, customer_login#41, customer_email_address#42, year_total#61, year_total#70]
Input [13]: [customer_id#26, year_total#27, customer_id#36, customer_first_name#37, customer_last_name#38, customer_preferred_cust_flag#39, customer_birth_country#40, customer_login#41, customer_email_address#42, year_total#43, year_total#61, customer_id#69, year_total#70]

(80) ReusedExchange [Reuses operator id: 4]
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(81) Sort [codegen id : 37]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(82) Scan parquet default.web_sales
Output [6]: [ws_sold_date_sk#72, ws_bill_customer_sk#73, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_price:decimal(7,2),ws_ext_wholesale_cost:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(83) ColumnarToRow [codegen id : 38]
Input [6]: [ws_sold_date_sk#72, ws_bill_customer_sk#73, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77]

(84) Filter [codegen id : 38]
Input [6]: [ws_sold_date_sk#72, ws_bill_customer_sk#73, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77]
Condition : (isnotnull(ws_bill_customer_sk#73) AND isnotnull(ws_sold_date_sk#72))

(85) Exchange
Input [6]: [ws_sold_date_sk#72, ws_bill_customer_sk#73, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77]
Arguments: hashpartitioning(ws_bill_customer_sk#73, 5), ENSURE_REQUIREMENTS, [id=#78]

(86) Sort [codegen id : 39]
Input [6]: [ws_sold_date_sk#72, ws_bill_customer_sk#73, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77]
Arguments: [ws_bill_customer_sk#73 ASC NULLS FIRST], false, 0

(87) SortMergeJoin [codegen id : 41]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#73]
Join condition: None

(88) Project [codegen id : 41]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_sold_date_sk#72, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77]
Input [14]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_sold_date_sk#72, ws_bill_customer_sk#73, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77]

(89) ReusedExchange [Reuses operator id: 16]
Output [2]: [d_date_sk#17, d_year#18]

(90) BroadcastHashJoin [codegen id : 41]
Left keys [1]: [ws_sold_date_sk#72]
Right keys [1]: [d_date_sk#17]
Join condition: None

(91) Project [codegen id : 41]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77, d_year#18]
Input [14]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_sold_date_sk#72, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77, d_date_sk#17, d_year#18]

(92) HashAggregate [codegen id : 41]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77, d_year#18]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#77 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#76 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#74 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#75 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#79, isEmpty#80]
Results [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18, sum#81, isEmpty#82]

(93) Exchange
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18, sum#81, isEmpty#82]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18, 5), ENSURE_REQUIREMENTS, [id=#83]

(94) HashAggregate [codegen id : 42]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18, sum#81, isEmpty#82]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#77 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#76 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#74 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#75 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#77 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#76 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#74 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#75 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#84]
Results [2]: [c_customer_id#2 AS customer_id#85, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#77 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#76 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#74 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#75 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#84 AS year_total#86]

(95) Filter [codegen id : 42]
Input [2]: [customer_id#85, year_total#86]
Condition : (isnotnull(year_total#86) AND (year_total#86 > 0.000000))

(96) Project [codegen id : 42]
Output [2]: [customer_id#85 AS customer_id#87, year_total#86 AS year_total#88]
Input [2]: [customer_id#85, year_total#86]

(97) Exchange
Input [2]: [customer_id#87, year_total#88]
Arguments: hashpartitioning(customer_id#87, 5), ENSURE_REQUIREMENTS, [id=#89]

(98) Sort [codegen id : 43]
Input [2]: [customer_id#87, year_total#88]
Arguments: [customer_id#87 ASC NULLS FIRST], false, 0

(99) SortMergeJoin [codegen id : 44]
Left keys [1]: [customer_id#26]
Right keys [1]: [customer_id#87]
Join condition: None

(100) Project [codegen id : 44]
Output [11]: [customer_id#26, customer_id#36, customer_first_name#37, customer_last_name#38, customer_preferred_cust_flag#39, customer_birth_country#40, customer_login#41, customer_email_address#42, year_total#61, year_total#70, year_total#88]
Input [12]: [customer_id#26, customer_id#36, customer_first_name#37, customer_last_name#38, customer_preferred_cust_flag#39, customer_birth_country#40, customer_login#41, customer_email_address#42, year_total#61, year_total#70, customer_id#87, year_total#88]

(101) ReusedExchange [Reuses operator id: 4]
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]

(102) Sort [codegen id : 46]
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Arguments: [c_customer_sk#1 ASC NULLS FIRST], false, 0

(103) ReusedExchange [Reuses operator id: 85]
Output [6]: [ws_sold_date_sk#72, ws_bill_customer_sk#73, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77]

(104) Sort [codegen id : 48]
Input [6]: [ws_sold_date_sk#72, ws_bill_customer_sk#73, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77]
Arguments: [ws_bill_customer_sk#73 ASC NULLS FIRST], false, 0

(105) SortMergeJoin [codegen id : 50]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ws_bill_customer_sk#73]
Join condition: None

(106) Project [codegen id : 50]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_sold_date_sk#72, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77]
Input [14]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_sold_date_sk#72, ws_bill_customer_sk#73, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77]

(107) ReusedExchange [Reuses operator id: 34]
Output [2]: [d_date_sk#17, d_year#18]

(108) BroadcastHashJoin [codegen id : 50]
Left keys [1]: [ws_sold_date_sk#72]
Right keys [1]: [d_date_sk#17]
Join condition: None

(109) Project [codegen id : 50]
Output [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77, d_year#18]
Input [14]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_sold_date_sk#72, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77, d_date_sk#17, d_year#18]

(110) HashAggregate [codegen id : 50]
Input [12]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, ws_ext_discount_amt#74, ws_ext_sales_price#75, ws_ext_wholesale_cost#76, ws_ext_list_price#77, d_year#18]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18]
Functions [1]: [partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#77 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#76 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#74 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#75 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [2]: [sum#90, isEmpty#91]
Results [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18, sum#92, isEmpty#93]

(111) Exchange
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18, sum#92, isEmpty#93]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18, 5), ENSURE_REQUIREMENTS, [id=#94]

(112) HashAggregate [codegen id : 51]
Input [10]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18, sum#92, isEmpty#93]
Keys [8]: [c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8, d_year#18]
Functions [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#77 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#76 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#74 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#75 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))]
Aggregate Attributes [1]: [sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#77 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#76 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#74 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#75 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#95]
Results [2]: [c_customer_id#2 AS customer_id#96, sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ws_ext_list_price#77 as decimal(8,2))) - promote_precision(cast(ws_ext_wholesale_cost#76 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ws_ext_discount_amt#74 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ws_ext_sales_price#75 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))#95 AS year_total#97]

(113) Exchange
Input [2]: [customer_id#96, year_total#97]
Arguments: hashpartitioning(customer_id#96, 5), ENSURE_REQUIREMENTS, [id=#98]

(114) Sort [codegen id : 52]
Input [2]: [customer_id#96, year_total#97]
Arguments: [customer_id#96 ASC NULLS FIRST], false, 0

(115) SortMergeJoin [codegen id : 53]
Left keys [1]: [customer_id#26]
Right keys [1]: [customer_id#96]
Join condition: (CASE WHEN (year_total#61 > 0.000000) THEN CheckOverflow((promote_precision(year_total#70) / promote_precision(year_total#61)), DecimalType(38,14), true) ELSE null END > CASE WHEN (year_total#88 > 0.000000) THEN CheckOverflow((promote_precision(year_total#97) / promote_precision(year_total#88)), DecimalType(38,14), true) ELSE null END)

(116) Project [codegen id : 53]
Output [7]: [customer_id#36, customer_first_name#37, customer_last_name#38, customer_preferred_cust_flag#39, customer_birth_country#40, customer_login#41, customer_email_address#42]
Input [13]: [customer_id#26, customer_id#36, customer_first_name#37, customer_last_name#38, customer_preferred_cust_flag#39, customer_birth_country#40, customer_login#41, customer_email_address#42, year_total#61, year_total#70, year_total#88, customer_id#96, year_total#97]

(117) TakeOrderedAndProject
Input [7]: [customer_id#36, customer_first_name#37, customer_last_name#38, customer_preferred_cust_flag#39, customer_birth_country#40, customer_login#41, customer_email_address#42]
Arguments: 100, [customer_id#36 ASC NULLS FIRST, customer_first_name#37 ASC NULLS FIRST, customer_last_name#38 ASC NULLS FIRST, customer_preferred_cust_flag#39 ASC NULLS FIRST, customer_birth_country#40 ASC NULLS FIRST, customer_login#41 ASC NULLS FIRST, customer_email_address#42 ASC NULLS FIRST], [customer_id#36, customer_first_name#37, customer_last_name#38, customer_preferred_cust_flag#39, customer_birth_country#40, customer_login#41, customer_email_address#42]

