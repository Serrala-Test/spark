== Physical Plan ==
TakeOrderedAndProject (115)
+- * Project (114)
   +- * SortMergeJoin Inner (113)
      :- * Project (95)
      :  +- * SortMergeJoin Inner (94)
      :     :- * Project (75)
      :     :  +- * SortMergeJoin Inner (74)
      :     :     :- * Project (56)
      :     :     :  +- * SortMergeJoin Inner (55)
      :     :     :     :- * SortMergeJoin Inner (36)
      :     :     :     :  :- * Sort (18)
      :     :     :     :  :  +- Exchange (17)
      :     :     :     :  :     +- * Filter (16)
      :     :     :     :  :        +- * HashAggregate (15)
      :     :     :     :  :           +- Exchange (14)
      :     :     :     :  :              +- * HashAggregate (13)
      :     :     :     :  :                 +- * Project (12)
      :     :     :     :  :                    +- * SortMergeJoin Inner (11)
      :     :     :     :  :                       :- * Sort (8)
      :     :     :     :  :                       :  +- Exchange (7)
      :     :     :     :  :                       :     +- * Project (6)
      :     :     :     :  :                       :        +- * BroadcastHashJoin Inner BuildRight (5)
      :     :     :     :  :                       :           :- * Filter (3)
      :     :     :     :  :                       :           :  +- * ColumnarToRow (2)
      :     :     :     :  :                       :           :     +- Scan parquet spark_catalog.default.store_sales (1)
      :     :     :     :  :                       :           +- ReusedExchange (4)
      :     :     :     :  :                       +- * Sort (10)
      :     :     :     :  :                          +- ReusedExchange (9)
      :     :     :     :  +- * Sort (35)
      :     :     :     :     +- Exchange (34)
      :     :     :     :        +- * HashAggregate (33)
      :     :     :     :           +- Exchange (32)
      :     :     :     :              +- * HashAggregate (31)
      :     :     :     :                 +- * Project (30)
      :     :     :     :                    +- * SortMergeJoin Inner (29)
      :     :     :     :                       :- * Sort (26)
      :     :     :     :                       :  +- Exchange (25)
      :     :     :     :                       :     +- * Project (24)
      :     :     :     :                       :        +- * BroadcastHashJoin Inner BuildRight (23)
      :     :     :     :                       :           :- * Filter (21)
      :     :     :     :                       :           :  +- * ColumnarToRow (20)
      :     :     :     :                       :           :     +- Scan parquet spark_catalog.default.store_sales (19)
      :     :     :     :                       :           +- ReusedExchange (22)
      :     :     :     :                       +- * Sort (28)
      :     :     :     :                          +- ReusedExchange (27)
      :     :     :     +- * Sort (54)
      :     :     :        +- Exchange (53)
      :     :     :           +- * Filter (52)
      :     :     :              +- * HashAggregate (51)
      :     :     :                 +- Exchange (50)
      :     :     :                    +- * HashAggregate (49)
      :     :     :                       +- * Project (48)
      :     :     :                          +- * SortMergeJoin Inner (47)
      :     :     :                             :- * Sort (44)
      :     :     :                             :  +- Exchange (43)
      :     :     :                             :     +- * Project (42)
      :     :     :                             :        +- * BroadcastHashJoin Inner BuildRight (41)
      :     :     :                             :           :- * Filter (39)
      :     :     :                             :           :  +- * ColumnarToRow (38)
      :     :     :                             :           :     +- Scan parquet spark_catalog.default.catalog_sales (37)
      :     :     :                             :           +- ReusedExchange (40)
      :     :     :                             +- * Sort (46)
      :     :     :                                +- ReusedExchange (45)
      :     :     +- * Sort (73)
      :     :        +- Exchange (72)
      :     :           +- * HashAggregate (71)
      :     :              +- Exchange (70)
      :     :                 +- * HashAggregate (69)
      :     :                    +- * Project (68)
      :     :                       +- * SortMergeJoin Inner (67)
      :     :                          :- * Sort (64)
      :     :                          :  +- Exchange (63)
      :     :                          :     +- * Project (62)
      :     :                          :        +- * BroadcastHashJoin Inner BuildRight (61)
      :     :                          :           :- * Filter (59)
      :     :                          :           :  +- * ColumnarToRow (58)
      :     :                          :           :     +- Scan parquet spark_catalog.default.catalog_sales (57)
      :     :                          :           +- ReusedExchange (60)
      :     :                          +- * Sort (66)
      :     :                             +- ReusedExchange (65)
      :     +- * Sort (93)
      :        +- Exchange (92)
      :           +- * Filter (91)
      :              +- * HashAggregate (90)
      :                 +- Exchange (89)
      :                    +- * HashAggregate (88)
      :                       +- * Project (87)
      :                          +- * SortMergeJoin Inner (86)
      :                             :- * Sort (83)
      :                             :  +- Exchange (82)
      :                             :     +- * Project (81)
      :                             :        +- * BroadcastHashJoin Inner BuildRight (80)
      :                             :           :- * Filter (78)
      :                             :           :  +- * ColumnarToRow (77)
      :                             :           :     +- Scan parquet spark_catalog.default.web_sales (76)
      :                             :           +- ReusedExchange (79)
      :                             +- * Sort (85)
      :                                +- ReusedExchange (84)
      +- * Sort (112)
         +- Exchange (111)
            +- * HashAggregate (110)
               +- Exchange (109)
                  +- * HashAggregate (108)
                     +- * Project (107)
                        +- * SortMergeJoin Inner (106)
                           :- * Sort (103)
                           :  +- Exchange (102)
                           :     +- * Project (101)
                           :        +- * BroadcastHashJoin Inner BuildRight (100)
                           :           :- * Filter (98)
                           :           :  +- * ColumnarToRow (97)
                           :           :     +- Scan parquet spark_catalog.default.web_sales (96)
                           :           +- ReusedExchange (99)
                           +- * Sort (105)
                              +- ReusedExchange (104)


(1) Scan parquet spark_catalog.default.store_sales
Output [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, ss_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#6), dynamicpruningexpression(ss_sold_date_sk#6 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, ss_sold_date_sk#6]

(3) Filter [codegen id : 2]
Input [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, ss_sold_date_sk#6]
Condition : (isnotnull(ss_customer_sk#1) AND might_contain(Subquery scalar-subquery#8, [id=#9], xxhash64(ss_customer_sk#1, 42), false))

(4) ReusedExchange [Reuses operator id: 126]
Output [2]: [d_date_sk#10, d_year#11]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#6]
Right keys [1]: [d_date_sk#10]
Join type: Inner
Join condition: None

(6) Project [codegen id : 2]
Output [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#11]
Input [8]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, ss_sold_date_sk#6, d_date_sk#10, d_year#11]

(7) Exchange
Input [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#11]
Arguments: hashpartitioning(ss_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(8) Sort [codegen id : 3]
Input [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#11]
Arguments: [ss_customer_sk#1 ASC NULLS FIRST], false, 0

(9) ReusedExchange [Reuses operator id: 119]
Output [8]: [c_customer_sk#12, c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19]

(10) Sort [codegen id : 5]
Input [8]: [c_customer_sk#12, c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19]
Arguments: [c_customer_sk#12 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#12]
Join type: Inner
Join condition: None

(12) Project [codegen id : 6]
Output [12]: [c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#11]
Input [14]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#11, c_customer_sk#12, c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19]

(13) HashAggregate [codegen id : 6]
Input [12]: [c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19, ss_ext_discount_amt#2, ss_ext_sales_price#3, ss_ext_wholesale_cost#4, ss_ext_list_price#5, d_year#11]
Keys [8]: [c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19, d_year#11]
Functions [1]: [partial_sum(((((ss_ext_list_price#5 - ss_ext_wholesale_cost#4) - ss_ext_discount_amt#2) + ss_ext_sales_price#3) / 2))]
Aggregate Attributes [2]: [sum#20, isEmpty#21]
Results [10]: [c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19, d_year#11, sum#22, isEmpty#23]

(14) Exchange
Input [10]: [c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19, d_year#11, sum#22, isEmpty#23]
Arguments: hashpartitioning(c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19, d_year#11, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(15) HashAggregate [codegen id : 7]
Input [10]: [c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19, d_year#11, sum#22, isEmpty#23]
Keys [8]: [c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19, d_year#11]
Functions [1]: [sum(((((ss_ext_list_price#5 - ss_ext_wholesale_cost#4) - ss_ext_discount_amt#2) + ss_ext_sales_price#3) / 2))]
Aggregate Attributes [1]: [sum(((((ss_ext_list_price#5 - ss_ext_wholesale_cost#4) - ss_ext_discount_amt#2) + ss_ext_sales_price#3) / 2))#24]
Results [2]: [c_customer_id#13 AS customer_id#25, sum(((((ss_ext_list_price#5 - ss_ext_wholesale_cost#4) - ss_ext_discount_amt#2) + ss_ext_sales_price#3) / 2))#24 AS year_total#26]

(16) Filter [codegen id : 7]
Input [2]: [customer_id#25, year_total#26]
Condition : (isnotnull(year_total#26) AND (year_total#26 > 0.000000))

(17) Exchange
Input [2]: [customer_id#25, year_total#26]
Arguments: hashpartitioning(customer_id#25, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(18) Sort [codegen id : 8]
Input [2]: [customer_id#25, year_total#26]
Arguments: [customer_id#25 ASC NULLS FIRST], false, 0

(19) Scan parquet spark_catalog.default.store_sales
Output [6]: [ss_customer_sk#27, ss_ext_discount_amt#28, ss_ext_sales_price#29, ss_ext_wholesale_cost#30, ss_ext_list_price#31, ss_sold_date_sk#32]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#32), dynamicpruningexpression(ss_sold_date_sk#32 IN dynamicpruning#33)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(20) ColumnarToRow [codegen id : 10]
Input [6]: [ss_customer_sk#27, ss_ext_discount_amt#28, ss_ext_sales_price#29, ss_ext_wholesale_cost#30, ss_ext_list_price#31, ss_sold_date_sk#32]

(21) Filter [codegen id : 10]
Input [6]: [ss_customer_sk#27, ss_ext_discount_amt#28, ss_ext_sales_price#29, ss_ext_wholesale_cost#30, ss_ext_list_price#31, ss_sold_date_sk#32]
Condition : (isnotnull(ss_customer_sk#27) AND might_contain(Subquery scalar-subquery#34, [id=#35], xxhash64(ss_customer_sk#27, 42), false))

(22) ReusedExchange [Reuses operator id: 137]
Output [2]: [d_date_sk#36, d_year#37]

(23) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#32]
Right keys [1]: [d_date_sk#36]
Join type: Inner
Join condition: None

(24) Project [codegen id : 10]
Output [6]: [ss_customer_sk#27, ss_ext_discount_amt#28, ss_ext_sales_price#29, ss_ext_wholesale_cost#30, ss_ext_list_price#31, d_year#37]
Input [8]: [ss_customer_sk#27, ss_ext_discount_amt#28, ss_ext_sales_price#29, ss_ext_wholesale_cost#30, ss_ext_list_price#31, ss_sold_date_sk#32, d_date_sk#36, d_year#37]

(25) Exchange
Input [6]: [ss_customer_sk#27, ss_ext_discount_amt#28, ss_ext_sales_price#29, ss_ext_wholesale_cost#30, ss_ext_list_price#31, d_year#37]
Arguments: hashpartitioning(ss_customer_sk#27, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(26) Sort [codegen id : 11]
Input [6]: [ss_customer_sk#27, ss_ext_discount_amt#28, ss_ext_sales_price#29, ss_ext_wholesale_cost#30, ss_ext_list_price#31, d_year#37]
Arguments: [ss_customer_sk#27 ASC NULLS FIRST], false, 0

(27) ReusedExchange [Reuses operator id: 119]
Output [8]: [c_customer_sk#38, c_customer_id#39, c_first_name#40, c_last_name#41, c_preferred_cust_flag#42, c_birth_country#43, c_login#44, c_email_address#45]

(28) Sort [codegen id : 13]
Input [8]: [c_customer_sk#38, c_customer_id#39, c_first_name#40, c_last_name#41, c_preferred_cust_flag#42, c_birth_country#43, c_login#44, c_email_address#45]
Arguments: [c_customer_sk#38 ASC NULLS FIRST], false, 0

(29) SortMergeJoin [codegen id : 14]
Left keys [1]: [ss_customer_sk#27]
Right keys [1]: [c_customer_sk#38]
Join type: Inner
Join condition: None

(30) Project [codegen id : 14]
Output [12]: [c_customer_id#39, c_first_name#40, c_last_name#41, c_preferred_cust_flag#42, c_birth_country#43, c_login#44, c_email_address#45, ss_ext_discount_amt#28, ss_ext_sales_price#29, ss_ext_wholesale_cost#30, ss_ext_list_price#31, d_year#37]
Input [14]: [ss_customer_sk#27, ss_ext_discount_amt#28, ss_ext_sales_price#29, ss_ext_wholesale_cost#30, ss_ext_list_price#31, d_year#37, c_customer_sk#38, c_customer_id#39, c_first_name#40, c_last_name#41, c_preferred_cust_flag#42, c_birth_country#43, c_login#44, c_email_address#45]

(31) HashAggregate [codegen id : 14]
Input [12]: [c_customer_id#39, c_first_name#40, c_last_name#41, c_preferred_cust_flag#42, c_birth_country#43, c_login#44, c_email_address#45, ss_ext_discount_amt#28, ss_ext_sales_price#29, ss_ext_wholesale_cost#30, ss_ext_list_price#31, d_year#37]
Keys [8]: [c_customer_id#39, c_first_name#40, c_last_name#41, c_preferred_cust_flag#42, c_birth_country#43, c_login#44, c_email_address#45, d_year#37]
Functions [1]: [partial_sum(((((ss_ext_list_price#31 - ss_ext_wholesale_cost#30) - ss_ext_discount_amt#28) + ss_ext_sales_price#29) / 2))]
Aggregate Attributes [2]: [sum#46, isEmpty#47]
Results [10]: [c_customer_id#39, c_first_name#40, c_last_name#41, c_preferred_cust_flag#42, c_birth_country#43, c_login#44, c_email_address#45, d_year#37, sum#48, isEmpty#49]

(32) Exchange
Input [10]: [c_customer_id#39, c_first_name#40, c_last_name#41, c_preferred_cust_flag#42, c_birth_country#43, c_login#44, c_email_address#45, d_year#37, sum#48, isEmpty#49]
Arguments: hashpartitioning(c_customer_id#39, c_first_name#40, c_last_name#41, c_preferred_cust_flag#42, c_birth_country#43, c_login#44, c_email_address#45, d_year#37, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(33) HashAggregate [codegen id : 15]
Input [10]: [c_customer_id#39, c_first_name#40, c_last_name#41, c_preferred_cust_flag#42, c_birth_country#43, c_login#44, c_email_address#45, d_year#37, sum#48, isEmpty#49]
Keys [8]: [c_customer_id#39, c_first_name#40, c_last_name#41, c_preferred_cust_flag#42, c_birth_country#43, c_login#44, c_email_address#45, d_year#37]
Functions [1]: [sum(((((ss_ext_list_price#31 - ss_ext_wholesale_cost#30) - ss_ext_discount_amt#28) + ss_ext_sales_price#29) / 2))]
Aggregate Attributes [1]: [sum(((((ss_ext_list_price#31 - ss_ext_wholesale_cost#30) - ss_ext_discount_amt#28) + ss_ext_sales_price#29) / 2))#24]
Results [8]: [c_customer_id#39 AS customer_id#50, c_first_name#40 AS customer_first_name#51, c_last_name#41 AS customer_last_name#52, c_preferred_cust_flag#42 AS customer_preferred_cust_flag#53, c_birth_country#43 AS customer_birth_country#54, c_login#44 AS customer_login#55, c_email_address#45 AS customer_email_address#56, sum(((((ss_ext_list_price#31 - ss_ext_wholesale_cost#30) - ss_ext_discount_amt#28) + ss_ext_sales_price#29) / 2))#24 AS year_total#57]

(34) Exchange
Input [8]: [customer_id#50, customer_first_name#51, customer_last_name#52, customer_preferred_cust_flag#53, customer_birth_country#54, customer_login#55, customer_email_address#56, year_total#57]
Arguments: hashpartitioning(customer_id#50, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(35) Sort [codegen id : 16]
Input [8]: [customer_id#50, customer_first_name#51, customer_last_name#52, customer_preferred_cust_flag#53, customer_birth_country#54, customer_login#55, customer_email_address#56, year_total#57]
Arguments: [customer_id#50 ASC NULLS FIRST], false, 0

(36) SortMergeJoin [codegen id : 17]
Left keys [1]: [customer_id#25]
Right keys [1]: [customer_id#50]
Join type: Inner
Join condition: None

(37) Scan parquet spark_catalog.default.catalog_sales
Output [6]: [cs_bill_customer_sk#58, cs_ext_discount_amt#59, cs_ext_sales_price#60, cs_ext_wholesale_cost#61, cs_ext_list_price#62, cs_sold_date_sk#63]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#63), dynamicpruningexpression(cs_sold_date_sk#63 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2)>

(38) ColumnarToRow [codegen id : 19]
Input [6]: [cs_bill_customer_sk#58, cs_ext_discount_amt#59, cs_ext_sales_price#60, cs_ext_wholesale_cost#61, cs_ext_list_price#62, cs_sold_date_sk#63]

(39) Filter [codegen id : 19]
Input [6]: [cs_bill_customer_sk#58, cs_ext_discount_amt#59, cs_ext_sales_price#60, cs_ext_wholesale_cost#61, cs_ext_list_price#62, cs_sold_date_sk#63]
Condition : (isnotnull(cs_bill_customer_sk#58) AND might_contain(ReusedSubquery Subquery scalar-subquery#34, [id=#35], xxhash64(cs_bill_customer_sk#58, 42), false))

(40) ReusedExchange [Reuses operator id: 126]
Output [2]: [d_date_sk#64, d_year#65]

(41) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_sold_date_sk#63]
Right keys [1]: [d_date_sk#64]
Join type: Inner
Join condition: None

(42) Project [codegen id : 19]
Output [6]: [cs_bill_customer_sk#58, cs_ext_discount_amt#59, cs_ext_sales_price#60, cs_ext_wholesale_cost#61, cs_ext_list_price#62, d_year#65]
Input [8]: [cs_bill_customer_sk#58, cs_ext_discount_amt#59, cs_ext_sales_price#60, cs_ext_wholesale_cost#61, cs_ext_list_price#62, cs_sold_date_sk#63, d_date_sk#64, d_year#65]

(43) Exchange
Input [6]: [cs_bill_customer_sk#58, cs_ext_discount_amt#59, cs_ext_sales_price#60, cs_ext_wholesale_cost#61, cs_ext_list_price#62, d_year#65]
Arguments: hashpartitioning(cs_bill_customer_sk#58, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(44) Sort [codegen id : 20]
Input [6]: [cs_bill_customer_sk#58, cs_ext_discount_amt#59, cs_ext_sales_price#60, cs_ext_wholesale_cost#61, cs_ext_list_price#62, d_year#65]
Arguments: [cs_bill_customer_sk#58 ASC NULLS FIRST], false, 0

(45) ReusedExchange [Reuses operator id: 119]
Output [8]: [c_customer_sk#66, c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73]

(46) Sort [codegen id : 22]
Input [8]: [c_customer_sk#66, c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73]
Arguments: [c_customer_sk#66 ASC NULLS FIRST], false, 0

(47) SortMergeJoin [codegen id : 23]
Left keys [1]: [cs_bill_customer_sk#58]
Right keys [1]: [c_customer_sk#66]
Join type: Inner
Join condition: None

(48) Project [codegen id : 23]
Output [12]: [c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73, cs_ext_discount_amt#59, cs_ext_sales_price#60, cs_ext_wholesale_cost#61, cs_ext_list_price#62, d_year#65]
Input [14]: [cs_bill_customer_sk#58, cs_ext_discount_amt#59, cs_ext_sales_price#60, cs_ext_wholesale_cost#61, cs_ext_list_price#62, d_year#65, c_customer_sk#66, c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73]

(49) HashAggregate [codegen id : 23]
Input [12]: [c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73, cs_ext_discount_amt#59, cs_ext_sales_price#60, cs_ext_wholesale_cost#61, cs_ext_list_price#62, d_year#65]
Keys [8]: [c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73, d_year#65]
Functions [1]: [partial_sum(((((cs_ext_list_price#62 - cs_ext_wholesale_cost#61) - cs_ext_discount_amt#59) + cs_ext_sales_price#60) / 2))]
Aggregate Attributes [2]: [sum#74, isEmpty#75]
Results [10]: [c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73, d_year#65, sum#76, isEmpty#77]

(50) Exchange
Input [10]: [c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73, d_year#65, sum#76, isEmpty#77]
Arguments: hashpartitioning(c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73, d_year#65, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(51) HashAggregate [codegen id : 24]
Input [10]: [c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73, d_year#65, sum#76, isEmpty#77]
Keys [8]: [c_customer_id#67, c_first_name#68, c_last_name#69, c_preferred_cust_flag#70, c_birth_country#71, c_login#72, c_email_address#73, d_year#65]
Functions [1]: [sum(((((cs_ext_list_price#62 - cs_ext_wholesale_cost#61) - cs_ext_discount_amt#59) + cs_ext_sales_price#60) / 2))]
Aggregate Attributes [1]: [sum(((((cs_ext_list_price#62 - cs_ext_wholesale_cost#61) - cs_ext_discount_amt#59) + cs_ext_sales_price#60) / 2))#78]
Results [2]: [c_customer_id#67 AS customer_id#79, sum(((((cs_ext_list_price#62 - cs_ext_wholesale_cost#61) - cs_ext_discount_amt#59) + cs_ext_sales_price#60) / 2))#78 AS year_total#80]

(52) Filter [codegen id : 24]
Input [2]: [customer_id#79, year_total#80]
Condition : (isnotnull(year_total#80) AND (year_total#80 > 0.000000))

(53) Exchange
Input [2]: [customer_id#79, year_total#80]
Arguments: hashpartitioning(customer_id#79, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(54) Sort [codegen id : 25]
Input [2]: [customer_id#79, year_total#80]
Arguments: [customer_id#79 ASC NULLS FIRST], false, 0

(55) SortMergeJoin [codegen id : 26]
Left keys [1]: [customer_id#25]
Right keys [1]: [customer_id#79]
Join type: Inner
Join condition: None

(56) Project [codegen id : 26]
Output [11]: [customer_id#25, year_total#26, customer_id#50, customer_first_name#51, customer_last_name#52, customer_preferred_cust_flag#53, customer_birth_country#54, customer_login#55, customer_email_address#56, year_total#57, year_total#80]
Input [12]: [customer_id#25, year_total#26, customer_id#50, customer_first_name#51, customer_last_name#52, customer_preferred_cust_flag#53, customer_birth_country#54, customer_login#55, customer_email_address#56, year_total#57, customer_id#79, year_total#80]

(57) Scan parquet spark_catalog.default.catalog_sales
Output [6]: [cs_bill_customer_sk#81, cs_ext_discount_amt#82, cs_ext_sales_price#83, cs_ext_wholesale_cost#84, cs_ext_list_price#85, cs_sold_date_sk#86]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#86), dynamicpruningexpression(cs_sold_date_sk#86 IN dynamicpruning#33)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_ext_discount_amt:decimal(7,2),cs_ext_sales_price:decimal(7,2),cs_ext_wholesale_cost:decimal(7,2),cs_ext_list_price:decimal(7,2)>

(58) ColumnarToRow [codegen id : 28]
Input [6]: [cs_bill_customer_sk#81, cs_ext_discount_amt#82, cs_ext_sales_price#83, cs_ext_wholesale_cost#84, cs_ext_list_price#85, cs_sold_date_sk#86]

(59) Filter [codegen id : 28]
Input [6]: [cs_bill_customer_sk#81, cs_ext_discount_amt#82, cs_ext_sales_price#83, cs_ext_wholesale_cost#84, cs_ext_list_price#85, cs_sold_date_sk#86]
Condition : (isnotnull(cs_bill_customer_sk#81) AND might_contain(ReusedSubquery Subquery scalar-subquery#34, [id=#35], xxhash64(cs_bill_customer_sk#81, 42), false))

(60) ReusedExchange [Reuses operator id: 137]
Output [2]: [d_date_sk#87, d_year#88]

(61) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [cs_sold_date_sk#86]
Right keys [1]: [d_date_sk#87]
Join type: Inner
Join condition: None

(62) Project [codegen id : 28]
Output [6]: [cs_bill_customer_sk#81, cs_ext_discount_amt#82, cs_ext_sales_price#83, cs_ext_wholesale_cost#84, cs_ext_list_price#85, d_year#88]
Input [8]: [cs_bill_customer_sk#81, cs_ext_discount_amt#82, cs_ext_sales_price#83, cs_ext_wholesale_cost#84, cs_ext_list_price#85, cs_sold_date_sk#86, d_date_sk#87, d_year#88]

(63) Exchange
Input [6]: [cs_bill_customer_sk#81, cs_ext_discount_amt#82, cs_ext_sales_price#83, cs_ext_wholesale_cost#84, cs_ext_list_price#85, d_year#88]
Arguments: hashpartitioning(cs_bill_customer_sk#81, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(64) Sort [codegen id : 29]
Input [6]: [cs_bill_customer_sk#81, cs_ext_discount_amt#82, cs_ext_sales_price#83, cs_ext_wholesale_cost#84, cs_ext_list_price#85, d_year#88]
Arguments: [cs_bill_customer_sk#81 ASC NULLS FIRST], false, 0

(65) ReusedExchange [Reuses operator id: 119]
Output [8]: [c_customer_sk#89, c_customer_id#90, c_first_name#91, c_last_name#92, c_preferred_cust_flag#93, c_birth_country#94, c_login#95, c_email_address#96]

(66) Sort [codegen id : 31]
Input [8]: [c_customer_sk#89, c_customer_id#90, c_first_name#91, c_last_name#92, c_preferred_cust_flag#93, c_birth_country#94, c_login#95, c_email_address#96]
Arguments: [c_customer_sk#89 ASC NULLS FIRST], false, 0

(67) SortMergeJoin [codegen id : 32]
Left keys [1]: [cs_bill_customer_sk#81]
Right keys [1]: [c_customer_sk#89]
Join type: Inner
Join condition: None

(68) Project [codegen id : 32]
Output [12]: [c_customer_id#90, c_first_name#91, c_last_name#92, c_preferred_cust_flag#93, c_birth_country#94, c_login#95, c_email_address#96, cs_ext_discount_amt#82, cs_ext_sales_price#83, cs_ext_wholesale_cost#84, cs_ext_list_price#85, d_year#88]
Input [14]: [cs_bill_customer_sk#81, cs_ext_discount_amt#82, cs_ext_sales_price#83, cs_ext_wholesale_cost#84, cs_ext_list_price#85, d_year#88, c_customer_sk#89, c_customer_id#90, c_first_name#91, c_last_name#92, c_preferred_cust_flag#93, c_birth_country#94, c_login#95, c_email_address#96]

(69) HashAggregate [codegen id : 32]
Input [12]: [c_customer_id#90, c_first_name#91, c_last_name#92, c_preferred_cust_flag#93, c_birth_country#94, c_login#95, c_email_address#96, cs_ext_discount_amt#82, cs_ext_sales_price#83, cs_ext_wholesale_cost#84, cs_ext_list_price#85, d_year#88]
Keys [8]: [c_customer_id#90, c_first_name#91, c_last_name#92, c_preferred_cust_flag#93, c_birth_country#94, c_login#95, c_email_address#96, d_year#88]
Functions [1]: [partial_sum(((((cs_ext_list_price#85 - cs_ext_wholesale_cost#84) - cs_ext_discount_amt#82) + cs_ext_sales_price#83) / 2))]
Aggregate Attributes [2]: [sum#97, isEmpty#98]
Results [10]: [c_customer_id#90, c_first_name#91, c_last_name#92, c_preferred_cust_flag#93, c_birth_country#94, c_login#95, c_email_address#96, d_year#88, sum#99, isEmpty#100]

(70) Exchange
Input [10]: [c_customer_id#90, c_first_name#91, c_last_name#92, c_preferred_cust_flag#93, c_birth_country#94, c_login#95, c_email_address#96, d_year#88, sum#99, isEmpty#100]
Arguments: hashpartitioning(c_customer_id#90, c_first_name#91, c_last_name#92, c_preferred_cust_flag#93, c_birth_country#94, c_login#95, c_email_address#96, d_year#88, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(71) HashAggregate [codegen id : 33]
Input [10]: [c_customer_id#90, c_first_name#91, c_last_name#92, c_preferred_cust_flag#93, c_birth_country#94, c_login#95, c_email_address#96, d_year#88, sum#99, isEmpty#100]
Keys [8]: [c_customer_id#90, c_first_name#91, c_last_name#92, c_preferred_cust_flag#93, c_birth_country#94, c_login#95, c_email_address#96, d_year#88]
Functions [1]: [sum(((((cs_ext_list_price#85 - cs_ext_wholesale_cost#84) - cs_ext_discount_amt#82) + cs_ext_sales_price#83) / 2))]
Aggregate Attributes [1]: [sum(((((cs_ext_list_price#85 - cs_ext_wholesale_cost#84) - cs_ext_discount_amt#82) + cs_ext_sales_price#83) / 2))#78]
Results [2]: [c_customer_id#90 AS customer_id#101, sum(((((cs_ext_list_price#85 - cs_ext_wholesale_cost#84) - cs_ext_discount_amt#82) + cs_ext_sales_price#83) / 2))#78 AS year_total#102]

(72) Exchange
Input [2]: [customer_id#101, year_total#102]
Arguments: hashpartitioning(customer_id#101, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(73) Sort [codegen id : 34]
Input [2]: [customer_id#101, year_total#102]
Arguments: [customer_id#101 ASC NULLS FIRST], false, 0

(74) SortMergeJoin [codegen id : 35]
Left keys [1]: [customer_id#25]
Right keys [1]: [customer_id#101]
Join type: Inner
Join condition: (CASE WHEN (year_total#80 > 0.000000) THEN (year_total#102 / year_total#80) END > CASE WHEN (year_total#26 > 0.000000) THEN (year_total#57 / year_total#26) END)

(75) Project [codegen id : 35]
Output [10]: [customer_id#25, customer_id#50, customer_first_name#51, customer_last_name#52, customer_preferred_cust_flag#53, customer_birth_country#54, customer_login#55, customer_email_address#56, year_total#80, year_total#102]
Input [13]: [customer_id#25, year_total#26, customer_id#50, customer_first_name#51, customer_last_name#52, customer_preferred_cust_flag#53, customer_birth_country#54, customer_login#55, customer_email_address#56, year_total#57, year_total#80, customer_id#101, year_total#102]

(76) Scan parquet spark_catalog.default.web_sales
Output [6]: [ws_bill_customer_sk#103, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107, ws_sold_date_sk#108]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#108), dynamicpruningexpression(ws_sold_date_sk#108 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_price:decimal(7,2),ws_ext_wholesale_cost:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(77) ColumnarToRow [codegen id : 37]
Input [6]: [ws_bill_customer_sk#103, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107, ws_sold_date_sk#108]

(78) Filter [codegen id : 37]
Input [6]: [ws_bill_customer_sk#103, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107, ws_sold_date_sk#108]
Condition : (isnotnull(ws_bill_customer_sk#103) AND might_contain(ReusedSubquery Subquery scalar-subquery#34, [id=#35], xxhash64(ws_bill_customer_sk#103, 42), false))

(79) ReusedExchange [Reuses operator id: 126]
Output [2]: [d_date_sk#109, d_year#110]

(80) BroadcastHashJoin [codegen id : 37]
Left keys [1]: [ws_sold_date_sk#108]
Right keys [1]: [d_date_sk#109]
Join type: Inner
Join condition: None

(81) Project [codegen id : 37]
Output [6]: [ws_bill_customer_sk#103, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107, d_year#110]
Input [8]: [ws_bill_customer_sk#103, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107, ws_sold_date_sk#108, d_date_sk#109, d_year#110]

(82) Exchange
Input [6]: [ws_bill_customer_sk#103, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107, d_year#110]
Arguments: hashpartitioning(ws_bill_customer_sk#103, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(83) Sort [codegen id : 38]
Input [6]: [ws_bill_customer_sk#103, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107, d_year#110]
Arguments: [ws_bill_customer_sk#103 ASC NULLS FIRST], false, 0

(84) ReusedExchange [Reuses operator id: 119]
Output [8]: [c_customer_sk#111, c_customer_id#112, c_first_name#113, c_last_name#114, c_preferred_cust_flag#115, c_birth_country#116, c_login#117, c_email_address#118]

(85) Sort [codegen id : 40]
Input [8]: [c_customer_sk#111, c_customer_id#112, c_first_name#113, c_last_name#114, c_preferred_cust_flag#115, c_birth_country#116, c_login#117, c_email_address#118]
Arguments: [c_customer_sk#111 ASC NULLS FIRST], false, 0

(86) SortMergeJoin [codegen id : 41]
Left keys [1]: [ws_bill_customer_sk#103]
Right keys [1]: [c_customer_sk#111]
Join type: Inner
Join condition: None

(87) Project [codegen id : 41]
Output [12]: [c_customer_id#112, c_first_name#113, c_last_name#114, c_preferred_cust_flag#115, c_birth_country#116, c_login#117, c_email_address#118, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107, d_year#110]
Input [14]: [ws_bill_customer_sk#103, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107, d_year#110, c_customer_sk#111, c_customer_id#112, c_first_name#113, c_last_name#114, c_preferred_cust_flag#115, c_birth_country#116, c_login#117, c_email_address#118]

(88) HashAggregate [codegen id : 41]
Input [12]: [c_customer_id#112, c_first_name#113, c_last_name#114, c_preferred_cust_flag#115, c_birth_country#116, c_login#117, c_email_address#118, ws_ext_discount_amt#104, ws_ext_sales_price#105, ws_ext_wholesale_cost#106, ws_ext_list_price#107, d_year#110]
Keys [8]: [c_customer_id#112, c_first_name#113, c_last_name#114, c_preferred_cust_flag#115, c_birth_country#116, c_login#117, c_email_address#118, d_year#110]
Functions [1]: [partial_sum(((((ws_ext_list_price#107 - ws_ext_wholesale_cost#106) - ws_ext_discount_amt#104) + ws_ext_sales_price#105) / 2))]
Aggregate Attributes [2]: [sum#119, isEmpty#120]
Results [10]: [c_customer_id#112, c_first_name#113, c_last_name#114, c_preferred_cust_flag#115, c_birth_country#116, c_login#117, c_email_address#118, d_year#110, sum#121, isEmpty#122]

(89) Exchange
Input [10]: [c_customer_id#112, c_first_name#113, c_last_name#114, c_preferred_cust_flag#115, c_birth_country#116, c_login#117, c_email_address#118, d_year#110, sum#121, isEmpty#122]
Arguments: hashpartitioning(c_customer_id#112, c_first_name#113, c_last_name#114, c_preferred_cust_flag#115, c_birth_country#116, c_login#117, c_email_address#118, d_year#110, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(90) HashAggregate [codegen id : 42]
Input [10]: [c_customer_id#112, c_first_name#113, c_last_name#114, c_preferred_cust_flag#115, c_birth_country#116, c_login#117, c_email_address#118, d_year#110, sum#121, isEmpty#122]
Keys [8]: [c_customer_id#112, c_first_name#113, c_last_name#114, c_preferred_cust_flag#115, c_birth_country#116, c_login#117, c_email_address#118, d_year#110]
Functions [1]: [sum(((((ws_ext_list_price#107 - ws_ext_wholesale_cost#106) - ws_ext_discount_amt#104) + ws_ext_sales_price#105) / 2))]
Aggregate Attributes [1]: [sum(((((ws_ext_list_price#107 - ws_ext_wholesale_cost#106) - ws_ext_discount_amt#104) + ws_ext_sales_price#105) / 2))#123]
Results [2]: [c_customer_id#112 AS customer_id#124, sum(((((ws_ext_list_price#107 - ws_ext_wholesale_cost#106) - ws_ext_discount_amt#104) + ws_ext_sales_price#105) / 2))#123 AS year_total#125]

(91) Filter [codegen id : 42]
Input [2]: [customer_id#124, year_total#125]
Condition : (isnotnull(year_total#125) AND (year_total#125 > 0.000000))

(92) Exchange
Input [2]: [customer_id#124, year_total#125]
Arguments: hashpartitioning(customer_id#124, 5), ENSURE_REQUIREMENTS, [plan_id=15]

(93) Sort [codegen id : 43]
Input [2]: [customer_id#124, year_total#125]
Arguments: [customer_id#124 ASC NULLS FIRST], false, 0

(94) SortMergeJoin [codegen id : 44]
Left keys [1]: [customer_id#25]
Right keys [1]: [customer_id#124]
Join type: Inner
Join condition: None

(95) Project [codegen id : 44]
Output [11]: [customer_id#25, customer_id#50, customer_first_name#51, customer_last_name#52, customer_preferred_cust_flag#53, customer_birth_country#54, customer_login#55, customer_email_address#56, year_total#80, year_total#102, year_total#125]
Input [12]: [customer_id#25, customer_id#50, customer_first_name#51, customer_last_name#52, customer_preferred_cust_flag#53, customer_birth_country#54, customer_login#55, customer_email_address#56, year_total#80, year_total#102, customer_id#124, year_total#125]

(96) Scan parquet spark_catalog.default.web_sales
Output [6]: [ws_bill_customer_sk#126, ws_ext_discount_amt#127, ws_ext_sales_price#128, ws_ext_wholesale_cost#129, ws_ext_list_price#130, ws_sold_date_sk#131]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#131), dynamicpruningexpression(ws_sold_date_sk#131 IN dynamicpruning#33)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_sales_price:decimal(7,2),ws_ext_wholesale_cost:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(97) ColumnarToRow [codegen id : 46]
Input [6]: [ws_bill_customer_sk#126, ws_ext_discount_amt#127, ws_ext_sales_price#128, ws_ext_wholesale_cost#129, ws_ext_list_price#130, ws_sold_date_sk#131]

(98) Filter [codegen id : 46]
Input [6]: [ws_bill_customer_sk#126, ws_ext_discount_amt#127, ws_ext_sales_price#128, ws_ext_wholesale_cost#129, ws_ext_list_price#130, ws_sold_date_sk#131]
Condition : (isnotnull(ws_bill_customer_sk#126) AND might_contain(ReusedSubquery Subquery scalar-subquery#34, [id=#35], xxhash64(ws_bill_customer_sk#126, 42), false))

(99) ReusedExchange [Reuses operator id: 137]
Output [2]: [d_date_sk#132, d_year#133]

(100) BroadcastHashJoin [codegen id : 46]
Left keys [1]: [ws_sold_date_sk#131]
Right keys [1]: [d_date_sk#132]
Join type: Inner
Join condition: None

(101) Project [codegen id : 46]
Output [6]: [ws_bill_customer_sk#126, ws_ext_discount_amt#127, ws_ext_sales_price#128, ws_ext_wholesale_cost#129, ws_ext_list_price#130, d_year#133]
Input [8]: [ws_bill_customer_sk#126, ws_ext_discount_amt#127, ws_ext_sales_price#128, ws_ext_wholesale_cost#129, ws_ext_list_price#130, ws_sold_date_sk#131, d_date_sk#132, d_year#133]

(102) Exchange
Input [6]: [ws_bill_customer_sk#126, ws_ext_discount_amt#127, ws_ext_sales_price#128, ws_ext_wholesale_cost#129, ws_ext_list_price#130, d_year#133]
Arguments: hashpartitioning(ws_bill_customer_sk#126, 5), ENSURE_REQUIREMENTS, [plan_id=16]

(103) Sort [codegen id : 47]
Input [6]: [ws_bill_customer_sk#126, ws_ext_discount_amt#127, ws_ext_sales_price#128, ws_ext_wholesale_cost#129, ws_ext_list_price#130, d_year#133]
Arguments: [ws_bill_customer_sk#126 ASC NULLS FIRST], false, 0

(104) ReusedExchange [Reuses operator id: 119]
Output [8]: [c_customer_sk#134, c_customer_id#135, c_first_name#136, c_last_name#137, c_preferred_cust_flag#138, c_birth_country#139, c_login#140, c_email_address#141]

(105) Sort [codegen id : 49]
Input [8]: [c_customer_sk#134, c_customer_id#135, c_first_name#136, c_last_name#137, c_preferred_cust_flag#138, c_birth_country#139, c_login#140, c_email_address#141]
Arguments: [c_customer_sk#134 ASC NULLS FIRST], false, 0

(106) SortMergeJoin [codegen id : 50]
Left keys [1]: [ws_bill_customer_sk#126]
Right keys [1]: [c_customer_sk#134]
Join type: Inner
Join condition: None

(107) Project [codegen id : 50]
Output [12]: [c_customer_id#135, c_first_name#136, c_last_name#137, c_preferred_cust_flag#138, c_birth_country#139, c_login#140, c_email_address#141, ws_ext_discount_amt#127, ws_ext_sales_price#128, ws_ext_wholesale_cost#129, ws_ext_list_price#130, d_year#133]
Input [14]: [ws_bill_customer_sk#126, ws_ext_discount_amt#127, ws_ext_sales_price#128, ws_ext_wholesale_cost#129, ws_ext_list_price#130, d_year#133, c_customer_sk#134, c_customer_id#135, c_first_name#136, c_last_name#137, c_preferred_cust_flag#138, c_birth_country#139, c_login#140, c_email_address#141]

(108) HashAggregate [codegen id : 50]
Input [12]: [c_customer_id#135, c_first_name#136, c_last_name#137, c_preferred_cust_flag#138, c_birth_country#139, c_login#140, c_email_address#141, ws_ext_discount_amt#127, ws_ext_sales_price#128, ws_ext_wholesale_cost#129, ws_ext_list_price#130, d_year#133]
Keys [8]: [c_customer_id#135, c_first_name#136, c_last_name#137, c_preferred_cust_flag#138, c_birth_country#139, c_login#140, c_email_address#141, d_year#133]
Functions [1]: [partial_sum(((((ws_ext_list_price#130 - ws_ext_wholesale_cost#129) - ws_ext_discount_amt#127) + ws_ext_sales_price#128) / 2))]
Aggregate Attributes [2]: [sum#142, isEmpty#143]
Results [10]: [c_customer_id#135, c_first_name#136, c_last_name#137, c_preferred_cust_flag#138, c_birth_country#139, c_login#140, c_email_address#141, d_year#133, sum#144, isEmpty#145]

(109) Exchange
Input [10]: [c_customer_id#135, c_first_name#136, c_last_name#137, c_preferred_cust_flag#138, c_birth_country#139, c_login#140, c_email_address#141, d_year#133, sum#144, isEmpty#145]
Arguments: hashpartitioning(c_customer_id#135, c_first_name#136, c_last_name#137, c_preferred_cust_flag#138, c_birth_country#139, c_login#140, c_email_address#141, d_year#133, 5), ENSURE_REQUIREMENTS, [plan_id=17]

(110) HashAggregate [codegen id : 51]
Input [10]: [c_customer_id#135, c_first_name#136, c_last_name#137, c_preferred_cust_flag#138, c_birth_country#139, c_login#140, c_email_address#141, d_year#133, sum#144, isEmpty#145]
Keys [8]: [c_customer_id#135, c_first_name#136, c_last_name#137, c_preferred_cust_flag#138, c_birth_country#139, c_login#140, c_email_address#141, d_year#133]
Functions [1]: [sum(((((ws_ext_list_price#130 - ws_ext_wholesale_cost#129) - ws_ext_discount_amt#127) + ws_ext_sales_price#128) / 2))]
Aggregate Attributes [1]: [sum(((((ws_ext_list_price#130 - ws_ext_wholesale_cost#129) - ws_ext_discount_amt#127) + ws_ext_sales_price#128) / 2))#123]
Results [2]: [c_customer_id#135 AS customer_id#146, sum(((((ws_ext_list_price#130 - ws_ext_wholesale_cost#129) - ws_ext_discount_amt#127) + ws_ext_sales_price#128) / 2))#123 AS year_total#147]

(111) Exchange
Input [2]: [customer_id#146, year_total#147]
Arguments: hashpartitioning(customer_id#146, 5), ENSURE_REQUIREMENTS, [plan_id=18]

(112) Sort [codegen id : 52]
Input [2]: [customer_id#146, year_total#147]
Arguments: [customer_id#146 ASC NULLS FIRST], false, 0

(113) SortMergeJoin [codegen id : 53]
Left keys [1]: [customer_id#25]
Right keys [1]: [customer_id#146]
Join type: Inner
Join condition: (CASE WHEN (year_total#80 > 0.000000) THEN (year_total#102 / year_total#80) END > CASE WHEN (year_total#125 > 0.000000) THEN (year_total#147 / year_total#125) END)

(114) Project [codegen id : 53]
Output [7]: [customer_id#50, customer_first_name#51, customer_last_name#52, customer_preferred_cust_flag#53, customer_birth_country#54, customer_login#55, customer_email_address#56]
Input [13]: [customer_id#25, customer_id#50, customer_first_name#51, customer_last_name#52, customer_preferred_cust_flag#53, customer_birth_country#54, customer_login#55, customer_email_address#56, year_total#80, year_total#102, year_total#125, customer_id#146, year_total#147]

(115) TakeOrderedAndProject
Input [7]: [customer_id#50, customer_first_name#51, customer_last_name#52, customer_preferred_cust_flag#53, customer_birth_country#54, customer_login#55, customer_email_address#56]
Arguments: 100, [customer_id#50 ASC NULLS FIRST, customer_first_name#51 ASC NULLS FIRST, customer_last_name#52 ASC NULLS FIRST, customer_preferred_cust_flag#53 ASC NULLS FIRST, customer_birth_country#54 ASC NULLS FIRST, customer_login#55 ASC NULLS FIRST, customer_email_address#56 ASC NULLS FIRST], [customer_id#50, customer_first_name#51, customer_last_name#52, customer_preferred_cust_flag#53, customer_birth_country#54, customer_login#55, customer_email_address#56]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#8, [id=#9]
ObjectHashAggregate (122)
+- Exchange (121)
   +- ObjectHashAggregate (120)
      +- Exchange (119)
         +- * Filter (118)
            +- * ColumnarToRow (117)
               +- Scan parquet spark_catalog.default.customer (116)


(116) Scan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#12, c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(117) ColumnarToRow [codegen id : 1]
Input [8]: [c_customer_sk#12, c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19]

(118) Filter [codegen id : 1]
Input [8]: [c_customer_sk#12, c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19]
Condition : (isnotnull(c_customer_sk#12) AND isnotnull(c_customer_id#13))

(119) Exchange
Input [8]: [c_customer_sk#12, c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19]
Arguments: hashpartitioning(c_customer_sk#12, 5), ENSURE_REQUIREMENTS, [plan_id=19]

(120) ObjectHashAggregate
Input [8]: [c_customer_sk#12, c_customer_id#13, c_first_name#14, c_last_name#15, c_preferred_cust_flag#16, c_birth_country#17, c_login#18, c_email_address#19]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(c_customer_sk#12, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [buf#148]
Results [1]: [buf#149]

(121) Exchange
Input [1]: [buf#149]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=20]

(122) ObjectHashAggregate
Input [1]: [buf#149]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(c_customer_sk#12, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(c_customer_sk#12, 42), 2000000, 16000000, 0, 0)#150]
Results [1]: [bloom_filter_agg(xxhash64(c_customer_sk#12, 42), 2000000, 16000000, 0, 0)#150 AS bloomFilter#151]

Subquery:2 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#6 IN dynamicpruning#7
BroadcastExchange (126)
+- * Filter (125)
   +- * ColumnarToRow (124)
      +- Scan parquet spark_catalog.default.date_dim (123)


(123) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#10, d_year#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(124) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]

(125) Filter [codegen id : 1]
Input [2]: [d_date_sk#10, d_year#11]
Condition : ((isnotnull(d_year#11) AND (d_year#11 = 2001)) AND isnotnull(d_date_sk#10))

(126) BroadcastExchange
Input [2]: [d_date_sk#10, d_year#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=21]

Subquery:3 Hosting operator id = 21 Hosting Expression = Subquery scalar-subquery#34, [id=#35]
ObjectHashAggregate (133)
+- Exchange (132)
   +- ObjectHashAggregate (131)
      +- Exchange (130)
         +- * Filter (129)
            +- * ColumnarToRow (128)
               +- Scan parquet spark_catalog.default.customer (127)


(127) Scan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#38, c_customer_id#39, c_first_name#40, c_last_name#41, c_preferred_cust_flag#42, c_birth_country#43, c_login#44, c_email_address#45]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(128) ColumnarToRow [codegen id : 1]
Input [8]: [c_customer_sk#38, c_customer_id#39, c_first_name#40, c_last_name#41, c_preferred_cust_flag#42, c_birth_country#43, c_login#44, c_email_address#45]

(129) Filter [codegen id : 1]
Input [8]: [c_customer_sk#38, c_customer_id#39, c_first_name#40, c_last_name#41, c_preferred_cust_flag#42, c_birth_country#43, c_login#44, c_email_address#45]
Condition : (isnotnull(c_customer_sk#38) AND isnotnull(c_customer_id#39))

(130) Exchange
Input [8]: [c_customer_sk#38, c_customer_id#39, c_first_name#40, c_last_name#41, c_preferred_cust_flag#42, c_birth_country#43, c_login#44, c_email_address#45]
Arguments: hashpartitioning(c_customer_sk#12, 5), ENSURE_REQUIREMENTS, [plan_id=22]

(131) ObjectHashAggregate
Input [8]: [c_customer_sk#38, c_customer_id#39, c_first_name#40, c_last_name#41, c_preferred_cust_flag#42, c_birth_country#43, c_login#44, c_email_address#45]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(c_customer_sk#38, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [buf#152]
Results [1]: [buf#153]

(132) Exchange
Input [1]: [buf#153]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=23]

(133) ObjectHashAggregate
Input [1]: [buf#153]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(c_customer_sk#38, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(c_customer_sk#38, 42), 2000000, 16000000, 0, 0)#154]
Results [1]: [bloom_filter_agg(xxhash64(c_customer_sk#38, 42), 2000000, 16000000, 0, 0)#154 AS bloomFilter#155]

Subquery:4 Hosting operator id = 19 Hosting Expression = ss_sold_date_sk#32 IN dynamicpruning#33
BroadcastExchange (137)
+- * Filter (136)
   +- * ColumnarToRow (135)
      +- Scan parquet spark_catalog.default.date_dim (134)


(134) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#36, d_year#37]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(135) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#36, d_year#37]

(136) Filter [codegen id : 1]
Input [2]: [d_date_sk#36, d_year#37]
Condition : ((isnotnull(d_year#37) AND (d_year#37 = 2002)) AND isnotnull(d_date_sk#36))

(137) BroadcastExchange
Input [2]: [d_date_sk#36, d_year#37]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=24]

Subquery:5 Hosting operator id = 39 Hosting Expression = ReusedSubquery Subquery scalar-subquery#34, [id=#35]

Subquery:6 Hosting operator id = 37 Hosting Expression = cs_sold_date_sk#63 IN dynamicpruning#7

Subquery:7 Hosting operator id = 59 Hosting Expression = ReusedSubquery Subquery scalar-subquery#34, [id=#35]

Subquery:8 Hosting operator id = 57 Hosting Expression = cs_sold_date_sk#86 IN dynamicpruning#33

Subquery:9 Hosting operator id = 78 Hosting Expression = ReusedSubquery Subquery scalar-subquery#34, [id=#35]

Subquery:10 Hosting operator id = 76 Hosting Expression = ws_sold_date_sk#108 IN dynamicpruning#7

Subquery:11 Hosting operator id = 98 Hosting Expression = ReusedSubquery Subquery scalar-subquery#34, [id=#35]

Subquery:12 Hosting operator id = 96 Hosting Expression = ws_sold_date_sk#131 IN dynamicpruning#33


