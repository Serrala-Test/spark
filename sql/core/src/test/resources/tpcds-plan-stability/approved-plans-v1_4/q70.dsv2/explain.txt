== Physical Plan ==
TakeOrderedAndProject (47)
+- * Project (46)
   +- Window (45)
      +- * Sort (44)
         +- Exchange (43)
            +- * HashAggregate (42)
               +- Exchange (41)
                  +- * HashAggregate (40)
                     +- * Expand (39)
                        +- * Project (38)
                           +- * BroadcastHashJoin Inner BuildRight (37)
                              :- * Project (9)
                              :  +- * BroadcastHashJoin Inner BuildRight (8)
                              :     :- * Project (3)
                              :     :  +- * Filter (2)
                              :     :     +- BatchScan default.store_sales (1)
                              :     +- BroadcastExchange (7)
                              :        +- * Project (6)
                              :           +- * Filter (5)
                              :              +- BatchScan default.date_dim (4)
                              +- BroadcastExchange (36)
                                 +- * SortMergeJoin LeftSemi (35)
                                    :- * Sort (14)
                                    :  +- Exchange (13)
                                    :     +- * Project (12)
                                    :        +- * Filter (11)
                                    :           +- BatchScan default.store (10)
                                    +- * Project (34)
                                       +- * Filter (33)
                                          +- Window (32)
                                             +- WindowGroupLimit (31)
                                                +- * Sort (30)
                                                   +- * HashAggregate (29)
                                                      +- Exchange (28)
                                                         +- * HashAggregate (27)
                                                            +- * Project (26)
                                                               +- * BroadcastHashJoin Inner BuildRight (25)
                                                                  :- * Project (23)
                                                                  :  +- * BroadcastHashJoin Inner BuildRight (22)
                                                                  :     :- * Project (17)
                                                                  :     :  +- * Filter (16)
                                                                  :     :     +- BatchScan default.store_sales (15)
                                                                  :     +- BroadcastExchange (21)
                                                                  :        +- * Project (20)
                                                                  :           +- * Filter (19)
                                                                  :              +- BatchScan default.store (18)
                                                                  +- ReusedExchange (24)


(1) BatchScan default.store_sales
Output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
DataFilters: [isnotnull(ss_store_sk#1)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_sales]
PartitionFilters: [isnotnull(ss_sold_date_sk#3)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>

(2) Filter [codegen id : 10]
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(3) Project [codegen id : 10]
Output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]

(4) BatchScan default.date_dim
Output [2]: [d_date_sk#4, d_month_seq#5]
DataFilters: [isnotnull(d_month_seq#5), (d_month_seq#5 >= 1200), (d_month_seq#5 <= 1211), isnotnull(d_date_sk#4)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(5) Filter [codegen id : 1]
Input [2]: [d_date_sk#4, d_month_seq#5]
Condition : (((isnotnull(d_month_seq#5) AND (d_month_seq#5 >= 1200)) AND (d_month_seq#5 <= 1211)) AND isnotnull(d_date_sk#4))

(6) Project [codegen id : 1]
Output [1]: [d_date_sk#4]
Input [2]: [d_date_sk#4, d_month_seq#5]

(7) BroadcastExchange
Input [1]: [d_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#4]
Join type: Inner
Join condition: None

(9) Project [codegen id : 10]
Output [2]: [ss_store_sk#1, ss_net_profit#2]
Input [4]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3, d_date_sk#4]

(10) BatchScan default.store
Output [3]: [s_store_sk#6, s_county#7, s_state#8]
DataFilters: [isnotnull(s_store_sk#6)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_county:string,s_state:string>

(11) Filter [codegen id : 2]
Input [3]: [s_store_sk#6, s_county#7, s_state#8]
Condition : isnotnull(s_store_sk#6)

(12) Project [codegen id : 2]
Output [3]: [s_store_sk#6, s_county#7, s_state#8]
Input [3]: [s_store_sk#6, s_county#7, s_state#8]

(13) Exchange
Input [3]: [s_store_sk#6, s_county#7, s_state#8]
Arguments: hashpartitioning(s_state#8, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(14) Sort [codegen id : 3]
Input [3]: [s_store_sk#6, s_county#7, s_state#8]
Arguments: [s_state#8 ASC NULLS FIRST], false, 0

(15) BatchScan default.store_sales
Output [3]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11]
DataFilters: [isnotnull(ss_store_sk#9)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store_sales]
PartitionFilters: [isnotnull(ss_sold_date_sk#11)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>

(16) Filter [codegen id : 6]
Input [3]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_store_sk#9)

(17) Project [codegen id : 6]
Output [3]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11]
Input [3]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11]

(18) BatchScan default.store
Output [2]: [s_store_sk#12, s_state#13]
DataFilters: [isnotnull(s_store_sk#12)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(19) Filter [codegen id : 4]
Input [2]: [s_store_sk#12, s_state#13]
Condition : isnotnull(s_store_sk#12)

(20) Project [codegen id : 4]
Output [2]: [s_store_sk#12, s_state#13]
Input [2]: [s_store_sk#12, s_state#13]

(21) BroadcastExchange
Input [2]: [s_store_sk#12, s_state#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(22) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_store_sk#9]
Right keys [1]: [s_store_sk#12]
Join type: Inner
Join condition: None

(23) Project [codegen id : 6]
Output [3]: [ss_net_profit#10, ss_sold_date_sk#11, s_state#13]
Input [5]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11, s_store_sk#12, s_state#13]

(24) ReusedExchange [Reuses operator id: 7]
Output [1]: [d_date_sk#14]

(25) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#14]
Join type: Inner
Join condition: None

(26) Project [codegen id : 6]
Output [2]: [ss_net_profit#10, s_state#13]
Input [4]: [ss_net_profit#10, ss_sold_date_sk#11, s_state#13, d_date_sk#14]

(27) HashAggregate [codegen id : 6]
Input [2]: [ss_net_profit#10, s_state#13]
Keys [1]: [s_state#13]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#10))]
Aggregate Attributes [1]: [sum#15]
Results [2]: [s_state#13, sum#16]

(28) Exchange
Input [2]: [s_state#13, sum#16]
Arguments: hashpartitioning(s_state#13, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(29) HashAggregate [codegen id : 7]
Input [2]: [s_state#13, sum#16]
Keys [1]: [s_state#13]
Functions [1]: [sum(UnscaledValue(ss_net_profit#10))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#10))#17]
Results [3]: [s_state#13, s_state#13, MakeDecimal(sum(UnscaledValue(ss_net_profit#10))#17,17,2) AS _w1#18]

(30) Sort [codegen id : 7]
Input [3]: [s_state#13, s_state#13, _w1#18]
Arguments: [s_state#13 ASC NULLS FIRST, _w1#18 DESC NULLS LAST], false, 0

(31) WindowGroupLimit
Input [3]: [s_state#13, s_state#13, _w1#18]
Arguments: [s_state#13], [_w1#18 DESC NULLS LAST], rank(_w1#18), 5, Final

(32) Window
Input [3]: [s_state#13, s_state#13, _w1#18]
Arguments: [rank(_w1#18) windowspecdefinition(s_state#13, _w1#18 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#19], [s_state#13], [_w1#18 DESC NULLS LAST]

(33) Filter [codegen id : 8]
Input [4]: [s_state#13, s_state#13, _w1#18, ranking#19]
Condition : (ranking#19 <= 5)

(34) Project [codegen id : 8]
Output [1]: [s_state#13]
Input [4]: [s_state#13, s_state#13, _w1#18, ranking#19]

(35) SortMergeJoin [codegen id : 9]
Left keys [1]: [s_state#8]
Right keys [1]: [s_state#13]
Join type: LeftSemi
Join condition: None

(36) BroadcastExchange
Input [3]: [s_store_sk#6, s_county#7, s_state#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(37) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#6]
Join type: Inner
Join condition: None

(38) Project [codegen id : 10]
Output [3]: [ss_net_profit#2, s_state#8, s_county#7]
Input [5]: [ss_store_sk#1, ss_net_profit#2, s_store_sk#6, s_county#7, s_state#8]

(39) Expand [codegen id : 10]
Input [3]: [ss_net_profit#2, s_state#8, s_county#7]
Arguments: [[ss_net_profit#2, s_state#8, s_county#7, 0], [ss_net_profit#2, s_state#8, null, 1], [ss_net_profit#2, null, null, 3]], [ss_net_profit#2, s_state#20, s_county#21, spark_grouping_id#22]

(40) HashAggregate [codegen id : 10]
Input [4]: [ss_net_profit#2, s_state#20, s_county#21, spark_grouping_id#22]
Keys [3]: [s_state#20, s_county#21, spark_grouping_id#22]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum#23]
Results [4]: [s_state#20, s_county#21, spark_grouping_id#22, sum#24]

(41) Exchange
Input [4]: [s_state#20, s_county#21, spark_grouping_id#22, sum#24]
Arguments: hashpartitioning(s_state#20, s_county#21, spark_grouping_id#22, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(42) HashAggregate [codegen id : 11]
Input [4]: [s_state#20, s_county#21, spark_grouping_id#22, sum#24]
Keys [3]: [s_state#20, s_county#21, spark_grouping_id#22]
Functions [1]: [sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#2))#25]
Results [7]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#25,17,2) AS total_sum#26, s_state#20, s_county#21, (cast((shiftright(spark_grouping_id#22, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#22, 0) & 1) as tinyint)) AS lochierarchy#27, MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#25,17,2) AS _w0#28, (cast((shiftright(spark_grouping_id#22, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#22, 0) & 1) as tinyint)) AS _w1#29, CASE WHEN (cast((shiftright(spark_grouping_id#22, 0) & 1) as tinyint) = 0) THEN s_state#20 END AS _w2#30]

(43) Exchange
Input [7]: [total_sum#26, s_state#20, s_county#21, lochierarchy#27, _w0#28, _w1#29, _w2#30]
Arguments: hashpartitioning(_w1#29, _w2#30, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(44) Sort [codegen id : 12]
Input [7]: [total_sum#26, s_state#20, s_county#21, lochierarchy#27, _w0#28, _w1#29, _w2#30]
Arguments: [_w1#29 ASC NULLS FIRST, _w2#30 ASC NULLS FIRST, _w0#28 DESC NULLS LAST], false, 0

(45) Window
Input [7]: [total_sum#26, s_state#20, s_county#21, lochierarchy#27, _w0#28, _w1#29, _w2#30]
Arguments: [rank(_w0#28) windowspecdefinition(_w1#29, _w2#30, _w0#28 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#31], [_w1#29, _w2#30], [_w0#28 DESC NULLS LAST]

(46) Project [codegen id : 13]
Output [5]: [total_sum#26, s_state#20, s_county#21, lochierarchy#27, rank_within_parent#31]
Input [8]: [total_sum#26, s_state#20, s_county#21, lochierarchy#27, _w0#28, _w1#29, _w2#30, rank_within_parent#31]

(47) TakeOrderedAndProject
Input [5]: [total_sum#26, s_state#20, s_county#21, lochierarchy#27, rank_within_parent#31]
Arguments: 100, [lochierarchy#27 DESC NULLS LAST, CASE WHEN (lochierarchy#27 = 0) THEN s_state#20 END ASC NULLS FIRST, rank_within_parent#31 ASC NULLS FIRST], [total_sum#26, s_state#20, s_county#21, lochierarchy#27, rank_within_parent#31]

