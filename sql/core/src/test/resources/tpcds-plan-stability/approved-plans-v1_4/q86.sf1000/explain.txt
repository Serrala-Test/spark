== Physical Plan ==
TakeOrderedAndProject (24)
+- * Project (23)
   +- Window (22)
      +- * Sort (21)
         +- Exchange (20)
            +- * HashAggregate (19)
               +- Exchange (18)
                  +- * HashAggregate (17)
                     +- * Expand (16)
                        +- * Project (15)
                           +- * SortMergeJoin Inner (14)
                              :- * Sort (8)
                              :  +- Exchange (7)
                              :     +- * Project (6)
                              :        +- * BroadcastHashJoin Inner BuildRight (5)
                              :           :- * Filter (3)
                              :           :  +- * ColumnarToRow (2)
                              :           :     +- Scan parquet spark_catalog.default.web_sales (1)
                              :           +- ReusedExchange (4)
                              +- * Sort (13)
                                 +- Exchange (12)
                                    +- * Filter (11)
                                       +- * ColumnarToRow (10)
                                          +- Scan parquet spark_catalog.default.item (9)


(1) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#3), dynamicpruningexpression(ws_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_net_paid:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3]

(3) Filter [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3]
Condition : isnotnull(ws_item_sk#1)

(4) ReusedExchange [Reuses operator id: 29]
Output [1]: [d_date_sk#5]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join type: Inner
Join condition: None

(6) Project [codegen id : 2]
Output [2]: [ws_item_sk#1, ws_net_paid#2]
Input [4]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3, d_date_sk#5]

(7) Exchange
Input [2]: [ws_item_sk#1, ws_net_paid#2]
Arguments: hashpartitioning(ws_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(8) Sort [codegen id : 3]
Input [2]: [ws_item_sk#1, ws_net_paid#2]
Arguments: [ws_item_sk#1 ASC NULLS FIRST], false, 0

(9) Scan parquet spark_catalog.default.item
Output [3]: [i_item_sk#6, i_class#7, i_category#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(10) ColumnarToRow [codegen id : 4]
Input [3]: [i_item_sk#6, i_class#7, i_category#8]

(11) Filter [codegen id : 4]
Input [3]: [i_item_sk#6, i_class#7, i_category#8]
Condition : isnotnull(i_item_sk#6)

(12) Exchange
Input [3]: [i_item_sk#6, i_class#7, i_category#8]
Arguments: hashpartitioning(i_item_sk#6, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(13) Sort [codegen id : 5]
Input [3]: [i_item_sk#6, i_class#7, i_category#8]
Arguments: [i_item_sk#6 ASC NULLS FIRST], false, 0

(14) SortMergeJoin [codegen id : 6]
Left keys [1]: [ws_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join type: Inner
Join condition: None

(15) Project [codegen id : 6]
Output [3]: [ws_net_paid#2, i_category#8, i_class#7]
Input [5]: [ws_item_sk#1, ws_net_paid#2, i_item_sk#6, i_class#7, i_category#8]

(16) Expand [codegen id : 6]
Input [3]: [ws_net_paid#2, i_category#8, i_class#7]
Arguments: [[ws_net_paid#2, i_category#8, i_class#7, 0], [ws_net_paid#2, i_category#8, null, 1], [ws_net_paid#2, null, null, 3]], [ws_net_paid#2, i_category#9, i_class#10, spark_grouping_id#11]

(17) HashAggregate [codegen id : 6]
Input [4]: [ws_net_paid#2, i_category#9, i_class#10, spark_grouping_id#11]
Keys [3]: [i_category#9, i_class#10, spark_grouping_id#11]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#2))]
Aggregate Attributes [1]: [sum#12]
Results [4]: [i_category#9, i_class#10, spark_grouping_id#11, sum#13]

(18) Exchange
Input [4]: [i_category#9, i_class#10, spark_grouping_id#11, sum#13]
Arguments: hashpartitioning(i_category#9, i_class#10, spark_grouping_id#11, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(19) HashAggregate [codegen id : 7]
Input [4]: [i_category#9, i_class#10, spark_grouping_id#11, sum#13]
Keys [3]: [i_category#9, i_class#10, spark_grouping_id#11]
Functions [1]: [sum(UnscaledValue(ws_net_paid#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#2))#14]
Results [7]: [MakeDecimal(sum(UnscaledValue(ws_net_paid#2))#14,17,2) AS total_sum#15, i_category#9, i_class#10, (cast((shiftright(spark_grouping_id#11, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#11, 0) & 1) as tinyint)) AS lochierarchy#16, (cast((shiftright(spark_grouping_id#11, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#11, 0) & 1) as tinyint)) AS _w1#17, CASE WHEN (cast((shiftright(spark_grouping_id#11, 0) & 1) as tinyint) = 0) THEN i_category#9 END AS _w2#18, MakeDecimal(sum(UnscaledValue(ws_net_paid#2))#14,17,2) AS _w3#19]

(20) Exchange
Input [7]: [total_sum#15, i_category#9, i_class#10, lochierarchy#16, _w1#17, _w2#18, _w3#19]
Arguments: hashpartitioning(_w1#17, _w2#18, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(21) Sort [codegen id : 8]
Input [7]: [total_sum#15, i_category#9, i_class#10, lochierarchy#16, _w1#17, _w2#18, _w3#19]
Arguments: [_w1#17 ASC NULLS FIRST, _w2#18 ASC NULLS FIRST, _w3#19 DESC NULLS LAST], false, 0

(22) Window
Input [7]: [total_sum#15, i_category#9, i_class#10, lochierarchy#16, _w1#17, _w2#18, _w3#19]
Arguments: [rank(_w3#19) windowspecdefinition(_w1#17, _w2#18, _w3#19 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#20], [_w1#17, _w2#18], [_w3#19 DESC NULLS LAST]

(23) Project [codegen id : 9]
Output [5]: [total_sum#15, i_category#9, i_class#10, lochierarchy#16, rank_within_parent#20]
Input [8]: [total_sum#15, i_category#9, i_class#10, lochierarchy#16, _w1#17, _w2#18, _w3#19, rank_within_parent#20]

(24) TakeOrderedAndProject
Input [5]: [total_sum#15, i_category#9, i_class#10, lochierarchy#16, rank_within_parent#20]
Arguments: 100, [lochierarchy#16 DESC NULLS LAST, CASE WHEN (lochierarchy#16 = 0) THEN i_category#9 END ASC NULLS FIRST, rank_within_parent#20 ASC NULLS FIRST], [total_sum#15, i_category#9, i_class#10, lochierarchy#16, rank_within_parent#20]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (29)
+- * Project (28)
   +- * Filter (27)
      +- * ColumnarToRow (26)
         +- Scan parquet spark_catalog.default.date_dim (25)


(25) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(26) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#5, d_month_seq#21]

(27) Filter [codegen id : 1]
Input [2]: [d_date_sk#5, d_month_seq#21]
Condition : (((isnotnull(d_month_seq#21) AND (d_month_seq#21 >= 1200)) AND (d_month_seq#21 <= 1211)) AND isnotnull(d_date_sk#5))

(28) Project [codegen id : 1]
Output [1]: [d_date_sk#5]
Input [2]: [d_date_sk#5, d_month_seq#21]

(29) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]


