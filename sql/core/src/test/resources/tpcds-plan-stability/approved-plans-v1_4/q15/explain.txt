== Physical Plan ==
TakeOrderedAndProject (23)
+- * HashAggregate (22)
   +- Exchange (21)
      +- * HashAggregate (20)
         +- * Project (19)
            +- * BroadcastHashJoin Inner BuildRight (18)
               :- * Project (16)
               :  +- * BroadcastHashJoin Inner BuildRight (15)
               :     :- * Project (9)
               :     :  +- * BroadcastHashJoin Inner BuildRight (8)
               :     :     :- * Filter (3)
               :     :     :  +- * ColumnarToRow (2)
               :     :     :     +- Scan parquet default.catalog_sales (1)
               :     :     +- BroadcastExchange (7)
               :     :        +- * Filter (6)
               :     :           +- * ColumnarToRow (5)
               :     :              +- Scan parquet default.customer (4)
               :     +- BroadcastExchange (14)
               :        +- * Project (13)
               :           +- * Filter (12)
               :              +- * ColumnarToRow (11)
               :                 +- Scan parquet default.customer_address (10)
               +- ReusedExchange (17)


(1) Scan parquet default.catalog_sales
Output [3]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#3), dynamicpruningexpression(cs_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [3]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3]

(3) Filter [codegen id : 4]
Input [3]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3]
Condition : isnotnull(cs_bill_customer_sk#1)

(4) Scan parquet default.customer
Output [2]: [c_customer_sk#5, c_current_addr_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [c_customer_sk#5, c_current_addr_sk#6]

(6) Filter [codegen id : 1]
Input [2]: [c_customer_sk#5, c_current_addr_sk#6]
Condition : (isnotnull(c_customer_sk#5) AND isnotnull(c_current_addr_sk#6))

(7) BroadcastExchange
Input [2]: [c_customer_sk#5, c_current_addr_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#7]

(8) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#5]
Join condition: None

(9) Project [codegen id : 4]
Output [4]: [cs_sales_price#2, cs_sold_date_sk#3, c_current_addr_sk#6, (cs_sales_price#2 > 500.00) AS (spark_catalog.default.catalog_sales.cs_sales_price > 500.00BD)#8]
Input [5]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3, c_customer_sk#5, c_current_addr_sk#6]

(10) Scan parquet default.customer_address
Output [3]: [ca_address_sk#9, ca_state#10, ca_zip#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_zip:string>

(11) ColumnarToRow [codegen id : 2]
Input [3]: [ca_address_sk#9, ca_state#10, ca_zip#11]

(12) Filter [codegen id : 2]
Input [3]: [ca_address_sk#9, ca_state#10, ca_zip#11]
Condition : isnotnull(ca_address_sk#9)

(13) Project [codegen id : 2]
Output [3]: [ca_address_sk#9, ca_zip#11, (substr(ca_zip#11, 1, 5) IN (85669,86197,88274,83405,86475,85392,85460,80348,81792) OR ca_state#10 IN (CA,WA,GA)) AS ((substr(spark_catalog.default.customer_address.ca_zip, 1, 5) IN ('85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792')) OR (spark_catalog.default.customer_address.ca_state IN ('CA', 'WA', 'GA')))#12]
Input [3]: [ca_address_sk#9, ca_state#10, ca_zip#11]

(14) BroadcastExchange
Input [3]: [ca_address_sk#9, ca_zip#11, ((substr(spark_catalog.default.customer_address.ca_zip, 1, 5) IN ('85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792')) OR (spark_catalog.default.customer_address.ca_state IN ('CA', 'WA', 'GA')))#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13]

(15) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [c_current_addr_sk#6]
Right keys [1]: [ca_address_sk#9]
Join condition: (((substr(spark_catalog.default.customer_address.ca_zip, 1, 5) IN ('85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792')) OR (spark_catalog.default.customer_address.ca_state IN ('CA', 'WA', 'GA')))#12 OR (spark_catalog.default.catalog_sales.cs_sales_price > 500.00BD)#8)

(16) Project [codegen id : 4]
Output [3]: [cs_sales_price#2, cs_sold_date_sk#3, ca_zip#11]
Input [7]: [cs_sales_price#2, cs_sold_date_sk#3, c_current_addr_sk#6, (spark_catalog.default.catalog_sales.cs_sales_price > 500.00BD)#8, ca_address_sk#9, ca_zip#11, ((substr(spark_catalog.default.customer_address.ca_zip, 1, 5) IN ('85669', '86197', '88274', '83405', '86475', '85392', '85460', '80348', '81792')) OR (spark_catalog.default.customer_address.ca_state IN ('CA', 'WA', 'GA')))#12]

(17) ReusedExchange [Reuses operator id: 28]
Output [1]: [d_date_sk#14]

(18) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#3]
Right keys [1]: [d_date_sk#14]
Join condition: None

(19) Project [codegen id : 4]
Output [2]: [cs_sales_price#2, ca_zip#11]
Input [4]: [cs_sales_price#2, cs_sold_date_sk#3, ca_zip#11, d_date_sk#14]

(20) HashAggregate [codegen id : 4]
Input [2]: [cs_sales_price#2, ca_zip#11]
Keys [1]: [ca_zip#11]
Functions [1]: [partial_sum(UnscaledValue(cs_sales_price#2))]
Aggregate Attributes [1]: [sum#15]
Results [2]: [ca_zip#11, sum#16]

(21) Exchange
Input [2]: [ca_zip#11, sum#16]
Arguments: hashpartitioning(ca_zip#11, 5), ENSURE_REQUIREMENTS, [id=#17]

(22) HashAggregate [codegen id : 5]
Input [2]: [ca_zip#11, sum#16]
Keys [1]: [ca_zip#11]
Functions [1]: [sum(UnscaledValue(cs_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_sales_price#2))#18]
Results [2]: [ca_zip#11, MakeDecimal(sum(UnscaledValue(cs_sales_price#2))#18,17,2) AS sum(cs_sales_price)#19]

(23) TakeOrderedAndProject
Input [2]: [ca_zip#11, sum(cs_sales_price)#19]
Arguments: 100, [ca_zip#11 ASC NULLS FIRST], [ca_zip#11, sum(cs_sales_price)#19]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (28)
+- * Project (27)
   +- * Filter (26)
      +- * ColumnarToRow (25)
         +- Scan parquet default.date_dim (24)


(24) Scan parquet default.date_dim
Output [3]: [d_date_sk#14, d_year#20, d_qoy#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(25) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#14, d_year#20, d_qoy#21]

(26) Filter [codegen id : 1]
Input [3]: [d_date_sk#14, d_year#20, d_qoy#21]
Condition : ((((isnotnull(d_qoy#21) AND isnotnull(d_year#20)) AND (d_qoy#21 = 2)) AND (d_year#20 = 2001)) AND isnotnull(d_date_sk#14))

(27) Project [codegen id : 1]
Output [1]: [d_date_sk#14]
Input [3]: [d_date_sk#14, d_year#20, d_qoy#21]

(28) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22]


