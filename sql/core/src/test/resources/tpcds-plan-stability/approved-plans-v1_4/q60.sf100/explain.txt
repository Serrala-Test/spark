== Physical Plan ==
TakeOrderedAndProject (68)
+- * HashAggregate (67)
   +- Exchange (66)
      +- * HashAggregate (65)
         +- Union (64)
            :- * HashAggregate (33)
            :  +- Exchange (32)
            :     +- * HashAggregate (31)
            :        +- * Project (30)
            :           +- * BroadcastHashJoin Inner BuildRight (29)
            :              :- * Project (17)
            :              :  +- * BroadcastHashJoin Inner BuildRight (16)
            :              :     :- * Project (10)
            :              :     :  +- * BroadcastHashJoin Inner BuildRight (9)
            :              :     :     :- * Filter (3)
            :              :     :     :  +- * ColumnarToRow (2)
            :              :     :     :     +- Scan parquet default.store_sales (1)
            :              :     :     +- BroadcastExchange (8)
            :              :     :        +- * Project (7)
            :              :     :           +- * Filter (6)
            :              :     :              +- * ColumnarToRow (5)
            :              :     :                 +- Scan parquet default.date_dim (4)
            :              :     +- BroadcastExchange (15)
            :              :        +- * Project (14)
            :              :           +- * Filter (13)
            :              :              +- * ColumnarToRow (12)
            :              :                 +- Scan parquet default.customer_address (11)
            :              +- BroadcastExchange (28)
            :                 +- * Project (27)
            :                    +- * BroadcastHashJoin LeftSemi BuildRight (26)
            :                       :- * Filter (20)
            :                       :  +- * ColumnarToRow (19)
            :                       :     +- Scan parquet default.item (18)
            :                       +- BroadcastExchange (25)
            :                          +- * Project (24)
            :                             +- * Filter (23)
            :                                +- * ColumnarToRow (22)
            :                                   +- Scan parquet default.item (21)
            :- * HashAggregate (48)
            :  +- Exchange (47)
            :     +- * HashAggregate (46)
            :        +- * Project (45)
            :           +- * BroadcastHashJoin Inner BuildRight (44)
            :              :- * Project (42)
            :              :  +- * BroadcastHashJoin Inner BuildRight (41)
            :              :     :- * Project (39)
            :              :     :  +- * BroadcastHashJoin Inner BuildRight (38)
            :              :     :     :- * Filter (36)
            :              :     :     :  +- * ColumnarToRow (35)
            :              :     :     :     +- Scan parquet default.catalog_sales (34)
            :              :     :     +- ReusedExchange (37)
            :              :     +- ReusedExchange (40)
            :              +- ReusedExchange (43)
            +- * HashAggregate (63)
               +- Exchange (62)
                  +- * HashAggregate (61)
                     +- * Project (60)
                        +- * BroadcastHashJoin Inner BuildRight (59)
                           :- * Project (57)
                           :  +- * BroadcastHashJoin Inner BuildRight (56)
                           :     :- * Project (54)
                           :     :  +- * BroadcastHashJoin Inner BuildRight (53)
                           :     :     :- * Filter (51)
                           :     :     :  +- * ColumnarToRow (50)
                           :     :     :     +- Scan parquet default.web_sales (49)
                           :     :     +- ReusedExchange (52)
                           :     +- ReusedExchange (55)
                           +- ReusedExchange (58)


(1) Scan parquet default.store_sales
Output [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_addr_sk#3, ss_ext_sales_price#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 5]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_addr_sk#3, ss_ext_sales_price#4]

(3) Filter [codegen id : 5]
Input [4]: [ss_sold_date_sk#1, ss_item_sk#2, ss_addr_sk#3, ss_ext_sales_price#4]
Condition : ((isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_addr_sk#3)) AND isnotnull(ss_item_sk#2))

(4) Scan parquet default.date_dim
Output [3]: [d_date_sk#5, d_year#6, d_moy#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,9), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#5, d_year#6, d_moy#7]

(6) Filter [codegen id : 1]
Input [3]: [d_date_sk#5, d_year#6, d_moy#7]
Condition : ((((isnotnull(d_year#6) AND isnotnull(d_moy#7)) AND (d_year#6 = 1998)) AND (d_moy#7 = 9)) AND isnotnull(d_date_sk#5))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#5]
Input [3]: [d_date_sk#5, d_year#6, d_moy#7]

(8) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8]

(9) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#5]
Join condition: None

(10) Project [codegen id : 5]
Output [3]: [ss_item_sk#2, ss_addr_sk#3, ss_ext_sales_price#4]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_addr_sk#3, ss_ext_sales_price#4, d_date_sk#5]

(11) Scan parquet default.customer_address
Output [2]: [ca_address_sk#9, ca_gmt_offset#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_gmt_offset), EqualTo(ca_gmt_offset,-5.00), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_gmt_offset:decimal(5,2)>

(12) ColumnarToRow [codegen id : 2]
Input [2]: [ca_address_sk#9, ca_gmt_offset#10]

(13) Filter [codegen id : 2]
Input [2]: [ca_address_sk#9, ca_gmt_offset#10]
Condition : ((isnotnull(ca_gmt_offset#10) AND (ca_gmt_offset#10 = -5.00)) AND isnotnull(ca_address_sk#9))

(14) Project [codegen id : 2]
Output [1]: [ca_address_sk#9]
Input [2]: [ca_address_sk#9, ca_gmt_offset#10]

(15) BroadcastExchange
Input [1]: [ca_address_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#11]

(16) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_addr_sk#3]
Right keys [1]: [ca_address_sk#9]
Join condition: None

(17) Project [codegen id : 5]
Output [2]: [ss_item_sk#2, ss_ext_sales_price#4]
Input [4]: [ss_item_sk#2, ss_addr_sk#3, ss_ext_sales_price#4, ca_address_sk#9]

(18) Scan parquet default.item
Output [2]: [i_item_sk#12, i_item_id#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(19) ColumnarToRow [codegen id : 4]
Input [2]: [i_item_sk#12, i_item_id#13]

(20) Filter [codegen id : 4]
Input [2]: [i_item_sk#12, i_item_id#13]
Condition : isnotnull(i_item_sk#12)

(21) Scan parquet default.item
Output [2]: [i_item_id#13, i_category#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
ReadSchema: struct<i_item_id:string,i_category:string>

(22) ColumnarToRow [codegen id : 3]
Input [2]: [i_item_id#13, i_category#14]

(23) Filter [codegen id : 3]
Input [2]: [i_item_id#13, i_category#14]
Condition : (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#14, 50, false, true) = Music                                             )

(24) Project [codegen id : 3]
Output [1]: [staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_item_id#13, 16, false, true) AS i_item_id#15]
Input [2]: [i_item_id#13, i_category#14]

(25) BroadcastExchange
Input [1]: [i_item_id#15]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#16]

(26) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_item_id#13, 16, false, true)]
Right keys [1]: [i_item_id#15]
Join condition: None

(27) Project [codegen id : 4]
Output [2]: [i_item_sk#12, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_item_id#13, 16, false, true) AS i_item_id#17]
Input [2]: [i_item_sk#12, i_item_id#13]

(28) BroadcastExchange
Input [2]: [i_item_sk#12, i_item_id#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#18]

(29) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#12]
Join condition: None

(30) Project [codegen id : 5]
Output [2]: [ss_ext_sales_price#4, i_item_id#17]
Input [4]: [ss_item_sk#2, ss_ext_sales_price#4, i_item_sk#12, i_item_id#17]

(31) HashAggregate [codegen id : 5]
Input [2]: [ss_ext_sales_price#4, i_item_id#17]
Keys [1]: [i_item_id#17]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#4))]
Aggregate Attributes [1]: [sum#19]
Results [2]: [i_item_id#17, sum#20]

(32) Exchange
Input [2]: [i_item_id#17, sum#20]
Arguments: hashpartitioning(i_item_id#17, 5), ENSURE_REQUIREMENTS, [id=#21]

(33) HashAggregate [codegen id : 6]
Input [2]: [i_item_id#17, sum#20]
Keys [1]: [i_item_id#17]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#4))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#4))#22]
Results [2]: [i_item_id#17, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#4))#22,17,2) AS total_sales#23]

(34) Scan parquet default.catalog_sales
Output [4]: [cs_sold_date_sk#24, cs_bill_addr_sk#25, cs_item_sk#26, cs_ext_sales_price#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_sold_date_sk), IsNotNull(cs_bill_addr_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_bill_addr_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(35) ColumnarToRow [codegen id : 11]
Input [4]: [cs_sold_date_sk#24, cs_bill_addr_sk#25, cs_item_sk#26, cs_ext_sales_price#27]

(36) Filter [codegen id : 11]
Input [4]: [cs_sold_date_sk#24, cs_bill_addr_sk#25, cs_item_sk#26, cs_ext_sales_price#27]
Condition : ((isnotnull(cs_sold_date_sk#24) AND isnotnull(cs_bill_addr_sk#25)) AND isnotnull(cs_item_sk#26))

(37) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#5]

(38) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [cs_sold_date_sk#24]
Right keys [1]: [d_date_sk#5]
Join condition: None

(39) Project [codegen id : 11]
Output [3]: [cs_bill_addr_sk#25, cs_item_sk#26, cs_ext_sales_price#27]
Input [5]: [cs_sold_date_sk#24, cs_bill_addr_sk#25, cs_item_sk#26, cs_ext_sales_price#27, d_date_sk#5]

(40) ReusedExchange [Reuses operator id: 15]
Output [1]: [ca_address_sk#9]

(41) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [cs_bill_addr_sk#25]
Right keys [1]: [ca_address_sk#9]
Join condition: None

(42) Project [codegen id : 11]
Output [2]: [cs_item_sk#26, cs_ext_sales_price#27]
Input [4]: [cs_bill_addr_sk#25, cs_item_sk#26, cs_ext_sales_price#27, ca_address_sk#9]

(43) ReusedExchange [Reuses operator id: 28]
Output [2]: [i_item_sk#12, i_item_id#28]

(44) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [cs_item_sk#26]
Right keys [1]: [i_item_sk#12]
Join condition: None

(45) Project [codegen id : 11]
Output [2]: [cs_ext_sales_price#27, i_item_id#28]
Input [4]: [cs_item_sk#26, cs_ext_sales_price#27, i_item_sk#12, i_item_id#28]

(46) HashAggregate [codegen id : 11]
Input [2]: [cs_ext_sales_price#27, i_item_id#28]
Keys [1]: [i_item_id#28]
Functions [1]: [partial_sum(UnscaledValue(cs_ext_sales_price#27))]
Aggregate Attributes [1]: [sum#29]
Results [2]: [i_item_id#28, sum#30]

(47) Exchange
Input [2]: [i_item_id#28, sum#30]
Arguments: hashpartitioning(i_item_id#28, 5), ENSURE_REQUIREMENTS, [id=#31]

(48) HashAggregate [codegen id : 12]
Input [2]: [i_item_id#28, sum#30]
Keys [1]: [i_item_id#28]
Functions [1]: [sum(UnscaledValue(cs_ext_sales_price#27))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_ext_sales_price#27))#32]
Results [2]: [i_item_id#28 AS i_item_id#33, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#27))#32,17,2) AS total_sales#34]

(49) Scan parquet default.web_sales
Output [4]: [ws_sold_date_sk#35, ws_item_sk#36, ws_bill_addr_sk#37, ws_ext_sales_price#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_sold_date_sk), IsNotNull(ws_bill_addr_sk), IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_bill_addr_sk:int,ws_ext_sales_price:decimal(7,2)>

(50) ColumnarToRow [codegen id : 17]
Input [4]: [ws_sold_date_sk#35, ws_item_sk#36, ws_bill_addr_sk#37, ws_ext_sales_price#38]

(51) Filter [codegen id : 17]
Input [4]: [ws_sold_date_sk#35, ws_item_sk#36, ws_bill_addr_sk#37, ws_ext_sales_price#38]
Condition : ((isnotnull(ws_sold_date_sk#35) AND isnotnull(ws_bill_addr_sk#37)) AND isnotnull(ws_item_sk#36))

(52) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#5]

(53) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_sold_date_sk#35]
Right keys [1]: [d_date_sk#5]
Join condition: None

(54) Project [codegen id : 17]
Output [3]: [ws_item_sk#36, ws_bill_addr_sk#37, ws_ext_sales_price#38]
Input [5]: [ws_sold_date_sk#35, ws_item_sk#36, ws_bill_addr_sk#37, ws_ext_sales_price#38, d_date_sk#5]

(55) ReusedExchange [Reuses operator id: 15]
Output [1]: [ca_address_sk#9]

(56) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_bill_addr_sk#37]
Right keys [1]: [ca_address_sk#9]
Join condition: None

(57) Project [codegen id : 17]
Output [2]: [ws_item_sk#36, ws_ext_sales_price#38]
Input [4]: [ws_item_sk#36, ws_bill_addr_sk#37, ws_ext_sales_price#38, ca_address_sk#9]

(58) ReusedExchange [Reuses operator id: 28]
Output [2]: [i_item_sk#12, i_item_id#39]

(59) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ws_item_sk#36]
Right keys [1]: [i_item_sk#12]
Join condition: None

(60) Project [codegen id : 17]
Output [2]: [ws_ext_sales_price#38, i_item_id#39]
Input [4]: [ws_item_sk#36, ws_ext_sales_price#38, i_item_sk#12, i_item_id#39]

(61) HashAggregate [codegen id : 17]
Input [2]: [ws_ext_sales_price#38, i_item_id#39]
Keys [1]: [i_item_id#39]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#38))]
Aggregate Attributes [1]: [sum#40]
Results [2]: [i_item_id#39, sum#41]

(62) Exchange
Input [2]: [i_item_id#39, sum#41]
Arguments: hashpartitioning(i_item_id#39, 5), ENSURE_REQUIREMENTS, [id=#42]

(63) HashAggregate [codegen id : 18]
Input [2]: [i_item_id#39, sum#41]
Keys [1]: [i_item_id#39]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#38))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#38))#43]
Results [2]: [i_item_id#39 AS i_item_id#44, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#38))#43,17,2) AS total_sales#45]

(64) Union

(65) HashAggregate [codegen id : 19]
Input [2]: [i_item_id#17, total_sales#23]
Keys [1]: [i_item_id#17]
Functions [1]: [partial_sum(total_sales#23)]
Aggregate Attributes [2]: [sum#46, isEmpty#47]
Results [3]: [i_item_id#17, sum#48, isEmpty#49]

(66) Exchange
Input [3]: [i_item_id#17, sum#48, isEmpty#49]
Arguments: hashpartitioning(i_item_id#17, 5), ENSURE_REQUIREMENTS, [id=#50]

(67) HashAggregate [codegen id : 20]
Input [3]: [i_item_id#17, sum#48, isEmpty#49]
Keys [1]: [i_item_id#17]
Functions [1]: [sum(total_sales#23)]
Aggregate Attributes [1]: [sum(total_sales#23)#51]
Results [2]: [i_item_id#17, sum(total_sales#23)#51 AS total_sales#52]

(68) TakeOrderedAndProject
Input [2]: [i_item_id#17, total_sales#52]
Arguments: 100, [i_item_id#17 ASC NULLS FIRST, total_sales#52 ASC NULLS FIRST], [i_item_id#17, total_sales#52]

