== Physical Plan ==
TakeOrderedAndProject (77)
+- * Project (76)
   +- * SortMergeJoin Inner (75)
      :- * Project (57)
      :  +- * SortMergeJoin Inner (56)
      :     :- * Project (37)
      :     :  +- * SortMergeJoin Inner (36)
      :     :     :- * Sort (18)
      :     :     :  +- Exchange (17)
      :     :     :     +- * Filter (16)
      :     :     :        +- * HashAggregate (15)
      :     :     :           +- Exchange (14)
      :     :     :              +- * HashAggregate (13)
      :     :     :                 +- * Project (12)
      :     :     :                    +- * SortMergeJoin Inner (11)
      :     :     :                       :- * Sort (8)
      :     :     :                       :  +- Exchange (7)
      :     :     :                       :     +- * Project (6)
      :     :     :                       :        +- * BroadcastHashJoin Inner BuildRight (5)
      :     :     :                       :           :- * Filter (3)
      :     :     :                       :           :  +- * ColumnarToRow (2)
      :     :     :                       :           :     +- Scan parquet spark_catalog.default.store_sales (1)
      :     :     :                       :           +- ReusedExchange (4)
      :     :     :                       +- * Sort (10)
      :     :     :                          +- ReusedExchange (9)
      :     :     +- * Sort (35)
      :     :        +- Exchange (34)
      :     :           +- * HashAggregate (33)
      :     :              +- Exchange (32)
      :     :                 +- * HashAggregate (31)
      :     :                    +- * Project (30)
      :     :                       +- * SortMergeJoin Inner (29)
      :     :                          :- * Sort (26)
      :     :                          :  +- Exchange (25)
      :     :                          :     +- * Project (24)
      :     :                          :        +- * BroadcastHashJoin Inner BuildRight (23)
      :     :                          :           :- * Filter (21)
      :     :                          :           :  +- * ColumnarToRow (20)
      :     :                          :           :     +- Scan parquet spark_catalog.default.store_sales (19)
      :     :                          :           +- ReusedExchange (22)
      :     :                          +- * Sort (28)
      :     :                             +- ReusedExchange (27)
      :     +- * Sort (55)
      :        +- Exchange (54)
      :           +- * Filter (53)
      :              +- * HashAggregate (52)
      :                 +- Exchange (51)
      :                    +- * HashAggregate (50)
      :                       +- * Project (49)
      :                          +- * SortMergeJoin Inner (48)
      :                             :- * Sort (45)
      :                             :  +- Exchange (44)
      :                             :     +- * Project (43)
      :                             :        +- * BroadcastHashJoin Inner BuildRight (42)
      :                             :           :- * Filter (40)
      :                             :           :  +- * ColumnarToRow (39)
      :                             :           :     +- Scan parquet spark_catalog.default.web_sales (38)
      :                             :           +- ReusedExchange (41)
      :                             +- * Sort (47)
      :                                +- ReusedExchange (46)
      +- * Sort (74)
         +- Exchange (73)
            +- * HashAggregate (72)
               +- Exchange (71)
                  +- * HashAggregate (70)
                     +- * Project (69)
                        +- * SortMergeJoin Inner (68)
                           :- * Sort (65)
                           :  +- Exchange (64)
                           :     +- * Project (63)
                           :        +- * BroadcastHashJoin Inner BuildRight (62)
                           :           :- * Filter (60)
                           :           :  +- * ColumnarToRow (59)
                           :           :     +- Scan parquet spark_catalog.default.web_sales (58)
                           :           +- ReusedExchange (61)
                           +- * Sort (67)
                              +- ReusedExchange (66)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 2]
Input [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, ss_sold_date_sk#4]
Condition : (isnotnull(ss_customer_sk#1) AND might_contain(Subquery scalar-subquery#6, [id=#7], xxhash64(ss_customer_sk#1, 42), false))

(4) ReusedExchange [Reuses operator id: 88]
Output [2]: [d_date_sk#8, d_year#9]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#8]
Join type: Inner
Join condition: None

(6) Project [codegen id : 2]
Output [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#9]
Input [6]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, ss_sold_date_sk#4, d_date_sk#8, d_year#9]

(7) Exchange
Input [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#9]
Arguments: hashpartitioning(ss_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(8) Sort [codegen id : 3]
Input [4]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#9]
Arguments: [ss_customer_sk#1 ASC NULLS FIRST], false, 0

(9) ReusedExchange [Reuses operator id: 81]
Output [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]

(10) Sort [codegen id : 5]
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Arguments: [c_customer_sk#10 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#10]
Join type: Inner
Join condition: None

(12) Project [codegen id : 6]
Output [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#9]
Input [12]: [ss_customer_sk#1, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#9, c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]

(13) HashAggregate [codegen id : 6]
Input [10]: [c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, ss_ext_discount_amt#2, ss_ext_list_price#3, d_year#9]
Keys [8]: [c_customer_id#11, c_first_name#12, c_last_name#13, d_year#9, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Functions [1]: [partial_sum(UnscaledValue((ss_ext_list_price#3 - ss_ext_discount_amt#2)))]
Aggregate Attributes [1]: [sum#18]
Results [9]: [c_customer_id#11, c_first_name#12, c_last_name#13, d_year#9, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, sum#19]

(14) Exchange
Input [9]: [c_customer_id#11, c_first_name#12, c_last_name#13, d_year#9, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, sum#19]
Arguments: hashpartitioning(c_customer_id#11, c_first_name#12, c_last_name#13, d_year#9, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(15) HashAggregate [codegen id : 7]
Input [9]: [c_customer_id#11, c_first_name#12, c_last_name#13, d_year#9, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17, sum#19]
Keys [8]: [c_customer_id#11, c_first_name#12, c_last_name#13, d_year#9, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Functions [1]: [sum(UnscaledValue((ss_ext_list_price#3 - ss_ext_discount_amt#2)))]
Aggregate Attributes [1]: [sum(UnscaledValue((ss_ext_list_price#3 - ss_ext_discount_amt#2)))#20]
Results [2]: [c_customer_id#11 AS customer_id#21, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#3 - ss_ext_discount_amt#2)))#20,18,2) AS year_total#22]

(16) Filter [codegen id : 7]
Input [2]: [customer_id#21, year_total#22]
Condition : (isnotnull(year_total#22) AND (year_total#22 > 0.00))

(17) Exchange
Input [2]: [customer_id#21, year_total#22]
Arguments: hashpartitioning(customer_id#21, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(18) Sort [codegen id : 8]
Input [2]: [customer_id#21, year_total#22]
Arguments: [customer_id#21 ASC NULLS FIRST], false, 0

(19) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_customer_sk#23, ss_ext_discount_amt#24, ss_ext_list_price#25, ss_sold_date_sk#26]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#26), dynamicpruningexpression(ss_sold_date_sk#26 IN dynamicpruning#27)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(20) ColumnarToRow [codegen id : 10]
Input [4]: [ss_customer_sk#23, ss_ext_discount_amt#24, ss_ext_list_price#25, ss_sold_date_sk#26]

(21) Filter [codegen id : 10]
Input [4]: [ss_customer_sk#23, ss_ext_discount_amt#24, ss_ext_list_price#25, ss_sold_date_sk#26]
Condition : (isnotnull(ss_customer_sk#23) AND might_contain(Subquery scalar-subquery#28, [id=#29], xxhash64(ss_customer_sk#23, 42), false))

(22) ReusedExchange [Reuses operator id: 99]
Output [2]: [d_date_sk#30, d_year#31]

(23) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ss_sold_date_sk#26]
Right keys [1]: [d_date_sk#30]
Join type: Inner
Join condition: None

(24) Project [codegen id : 10]
Output [4]: [ss_customer_sk#23, ss_ext_discount_amt#24, ss_ext_list_price#25, d_year#31]
Input [6]: [ss_customer_sk#23, ss_ext_discount_amt#24, ss_ext_list_price#25, ss_sold_date_sk#26, d_date_sk#30, d_year#31]

(25) Exchange
Input [4]: [ss_customer_sk#23, ss_ext_discount_amt#24, ss_ext_list_price#25, d_year#31]
Arguments: hashpartitioning(ss_customer_sk#23, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(26) Sort [codegen id : 11]
Input [4]: [ss_customer_sk#23, ss_ext_discount_amt#24, ss_ext_list_price#25, d_year#31]
Arguments: [ss_customer_sk#23 ASC NULLS FIRST], false, 0

(27) ReusedExchange [Reuses operator id: 81]
Output [8]: [c_customer_sk#32, c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39]

(28) Sort [codegen id : 13]
Input [8]: [c_customer_sk#32, c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39]
Arguments: [c_customer_sk#32 ASC NULLS FIRST], false, 0

(29) SortMergeJoin [codegen id : 14]
Left keys [1]: [ss_customer_sk#23]
Right keys [1]: [c_customer_sk#32]
Join type: Inner
Join condition: None

(30) Project [codegen id : 14]
Output [10]: [c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39, ss_ext_discount_amt#24, ss_ext_list_price#25, d_year#31]
Input [12]: [ss_customer_sk#23, ss_ext_discount_amt#24, ss_ext_list_price#25, d_year#31, c_customer_sk#32, c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39]

(31) HashAggregate [codegen id : 14]
Input [10]: [c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39, ss_ext_discount_amt#24, ss_ext_list_price#25, d_year#31]
Keys [8]: [c_customer_id#33, c_first_name#34, c_last_name#35, d_year#31, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39]
Functions [1]: [partial_sum(UnscaledValue((ss_ext_list_price#25 - ss_ext_discount_amt#24)))]
Aggregate Attributes [1]: [sum#40]
Results [9]: [c_customer_id#33, c_first_name#34, c_last_name#35, d_year#31, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39, sum#41]

(32) Exchange
Input [9]: [c_customer_id#33, c_first_name#34, c_last_name#35, d_year#31, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39, sum#41]
Arguments: hashpartitioning(c_customer_id#33, c_first_name#34, c_last_name#35, d_year#31, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(33) HashAggregate [codegen id : 15]
Input [9]: [c_customer_id#33, c_first_name#34, c_last_name#35, d_year#31, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39, sum#41]
Keys [8]: [c_customer_id#33, c_first_name#34, c_last_name#35, d_year#31, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39]
Functions [1]: [sum(UnscaledValue((ss_ext_list_price#25 - ss_ext_discount_amt#24)))]
Aggregate Attributes [1]: [sum(UnscaledValue((ss_ext_list_price#25 - ss_ext_discount_amt#24)))#20]
Results [3]: [c_customer_id#33 AS customer_id#42, c_preferred_cust_flag#36 AS customer_preferred_cust_flag#43, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#25 - ss_ext_discount_amt#24)))#20,18,2) AS year_total#44]

(34) Exchange
Input [3]: [customer_id#42, customer_preferred_cust_flag#43, year_total#44]
Arguments: hashpartitioning(customer_id#42, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(35) Sort [codegen id : 16]
Input [3]: [customer_id#42, customer_preferred_cust_flag#43, year_total#44]
Arguments: [customer_id#42 ASC NULLS FIRST], false, 0

(36) SortMergeJoin [codegen id : 17]
Left keys [1]: [customer_id#21]
Right keys [1]: [customer_id#42]
Join type: Inner
Join condition: None

(37) Project [codegen id : 17]
Output [4]: [customer_id#21, year_total#22, customer_preferred_cust_flag#43, year_total#44]
Input [5]: [customer_id#21, year_total#22, customer_id#42, customer_preferred_cust_flag#43, year_total#44]

(38) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_bill_customer_sk#45, ws_ext_discount_amt#46, ws_ext_list_price#47, ws_sold_date_sk#48]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#48), dynamicpruningexpression(ws_sold_date_sk#48 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(39) ColumnarToRow [codegen id : 19]
Input [4]: [ws_bill_customer_sk#45, ws_ext_discount_amt#46, ws_ext_list_price#47, ws_sold_date_sk#48]

(40) Filter [codegen id : 19]
Input [4]: [ws_bill_customer_sk#45, ws_ext_discount_amt#46, ws_ext_list_price#47, ws_sold_date_sk#48]
Condition : (isnotnull(ws_bill_customer_sk#45) AND might_contain(ReusedSubquery Subquery scalar-subquery#28, [id=#29], xxhash64(ws_bill_customer_sk#45, 42), false))

(41) ReusedExchange [Reuses operator id: 88]
Output [2]: [d_date_sk#49, d_year#50]

(42) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [ws_sold_date_sk#48]
Right keys [1]: [d_date_sk#49]
Join type: Inner
Join condition: None

(43) Project [codegen id : 19]
Output [4]: [ws_bill_customer_sk#45, ws_ext_discount_amt#46, ws_ext_list_price#47, d_year#50]
Input [6]: [ws_bill_customer_sk#45, ws_ext_discount_amt#46, ws_ext_list_price#47, ws_sold_date_sk#48, d_date_sk#49, d_year#50]

(44) Exchange
Input [4]: [ws_bill_customer_sk#45, ws_ext_discount_amt#46, ws_ext_list_price#47, d_year#50]
Arguments: hashpartitioning(ws_bill_customer_sk#45, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(45) Sort [codegen id : 20]
Input [4]: [ws_bill_customer_sk#45, ws_ext_discount_amt#46, ws_ext_list_price#47, d_year#50]
Arguments: [ws_bill_customer_sk#45 ASC NULLS FIRST], false, 0

(46) ReusedExchange [Reuses operator id: 81]
Output [8]: [c_customer_sk#51, c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#56, c_login#57, c_email_address#58]

(47) Sort [codegen id : 22]
Input [8]: [c_customer_sk#51, c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#56, c_login#57, c_email_address#58]
Arguments: [c_customer_sk#51 ASC NULLS FIRST], false, 0

(48) SortMergeJoin [codegen id : 23]
Left keys [1]: [ws_bill_customer_sk#45]
Right keys [1]: [c_customer_sk#51]
Join type: Inner
Join condition: None

(49) Project [codegen id : 23]
Output [10]: [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#56, c_login#57, c_email_address#58, ws_ext_discount_amt#46, ws_ext_list_price#47, d_year#50]
Input [12]: [ws_bill_customer_sk#45, ws_ext_discount_amt#46, ws_ext_list_price#47, d_year#50, c_customer_sk#51, c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#56, c_login#57, c_email_address#58]

(50) HashAggregate [codegen id : 23]
Input [10]: [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#56, c_login#57, c_email_address#58, ws_ext_discount_amt#46, ws_ext_list_price#47, d_year#50]
Keys [8]: [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#56, c_login#57, c_email_address#58, d_year#50]
Functions [1]: [partial_sum(UnscaledValue((ws_ext_list_price#47 - ws_ext_discount_amt#46)))]
Aggregate Attributes [1]: [sum#59]
Results [9]: [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#56, c_login#57, c_email_address#58, d_year#50, sum#60]

(51) Exchange
Input [9]: [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#56, c_login#57, c_email_address#58, d_year#50, sum#60]
Arguments: hashpartitioning(c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#56, c_login#57, c_email_address#58, d_year#50, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(52) HashAggregate [codegen id : 24]
Input [9]: [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#56, c_login#57, c_email_address#58, d_year#50, sum#60]
Keys [8]: [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#56, c_login#57, c_email_address#58, d_year#50]
Functions [1]: [sum(UnscaledValue((ws_ext_list_price#47 - ws_ext_discount_amt#46)))]
Aggregate Attributes [1]: [sum(UnscaledValue((ws_ext_list_price#47 - ws_ext_discount_amt#46)))#61]
Results [2]: [c_customer_id#52 AS customer_id#62, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#47 - ws_ext_discount_amt#46)))#61,18,2) AS year_total#63]

(53) Filter [codegen id : 24]
Input [2]: [customer_id#62, year_total#63]
Condition : (isnotnull(year_total#63) AND (year_total#63 > 0.00))

(54) Exchange
Input [2]: [customer_id#62, year_total#63]
Arguments: hashpartitioning(customer_id#62, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(55) Sort [codegen id : 25]
Input [2]: [customer_id#62, year_total#63]
Arguments: [customer_id#62 ASC NULLS FIRST], false, 0

(56) SortMergeJoin [codegen id : 26]
Left keys [1]: [customer_id#21]
Right keys [1]: [customer_id#62]
Join type: Inner
Join condition: None

(57) Project [codegen id : 26]
Output [5]: [customer_id#21, year_total#22, customer_preferred_cust_flag#43, year_total#44, year_total#63]
Input [6]: [customer_id#21, year_total#22, customer_preferred_cust_flag#43, year_total#44, customer_id#62, year_total#63]

(58) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_bill_customer_sk#64, ws_ext_discount_amt#65, ws_ext_list_price#66, ws_sold_date_sk#67]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#67), dynamicpruningexpression(ws_sold_date_sk#67 IN dynamicpruning#27)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(59) ColumnarToRow [codegen id : 28]
Input [4]: [ws_bill_customer_sk#64, ws_ext_discount_amt#65, ws_ext_list_price#66, ws_sold_date_sk#67]

(60) Filter [codegen id : 28]
Input [4]: [ws_bill_customer_sk#64, ws_ext_discount_amt#65, ws_ext_list_price#66, ws_sold_date_sk#67]
Condition : (isnotnull(ws_bill_customer_sk#64) AND might_contain(ReusedSubquery Subquery scalar-subquery#28, [id=#29], xxhash64(ws_bill_customer_sk#64, 42), false))

(61) ReusedExchange [Reuses operator id: 99]
Output [2]: [d_date_sk#68, d_year#69]

(62) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [ws_sold_date_sk#67]
Right keys [1]: [d_date_sk#68]
Join type: Inner
Join condition: None

(63) Project [codegen id : 28]
Output [4]: [ws_bill_customer_sk#64, ws_ext_discount_amt#65, ws_ext_list_price#66, d_year#69]
Input [6]: [ws_bill_customer_sk#64, ws_ext_discount_amt#65, ws_ext_list_price#66, ws_sold_date_sk#67, d_date_sk#68, d_year#69]

(64) Exchange
Input [4]: [ws_bill_customer_sk#64, ws_ext_discount_amt#65, ws_ext_list_price#66, d_year#69]
Arguments: hashpartitioning(ws_bill_customer_sk#64, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(65) Sort [codegen id : 29]
Input [4]: [ws_bill_customer_sk#64, ws_ext_discount_amt#65, ws_ext_list_price#66, d_year#69]
Arguments: [ws_bill_customer_sk#64 ASC NULLS FIRST], false, 0

(66) ReusedExchange [Reuses operator id: 81]
Output [8]: [c_customer_sk#70, c_customer_id#71, c_first_name#72, c_last_name#73, c_preferred_cust_flag#74, c_birth_country#75, c_login#76, c_email_address#77]

(67) Sort [codegen id : 31]
Input [8]: [c_customer_sk#70, c_customer_id#71, c_first_name#72, c_last_name#73, c_preferred_cust_flag#74, c_birth_country#75, c_login#76, c_email_address#77]
Arguments: [c_customer_sk#70 ASC NULLS FIRST], false, 0

(68) SortMergeJoin [codegen id : 32]
Left keys [1]: [ws_bill_customer_sk#64]
Right keys [1]: [c_customer_sk#70]
Join type: Inner
Join condition: None

(69) Project [codegen id : 32]
Output [10]: [c_customer_id#71, c_first_name#72, c_last_name#73, c_preferred_cust_flag#74, c_birth_country#75, c_login#76, c_email_address#77, ws_ext_discount_amt#65, ws_ext_list_price#66, d_year#69]
Input [12]: [ws_bill_customer_sk#64, ws_ext_discount_amt#65, ws_ext_list_price#66, d_year#69, c_customer_sk#70, c_customer_id#71, c_first_name#72, c_last_name#73, c_preferred_cust_flag#74, c_birth_country#75, c_login#76, c_email_address#77]

(70) HashAggregate [codegen id : 32]
Input [10]: [c_customer_id#71, c_first_name#72, c_last_name#73, c_preferred_cust_flag#74, c_birth_country#75, c_login#76, c_email_address#77, ws_ext_discount_amt#65, ws_ext_list_price#66, d_year#69]
Keys [8]: [c_customer_id#71, c_first_name#72, c_last_name#73, c_preferred_cust_flag#74, c_birth_country#75, c_login#76, c_email_address#77, d_year#69]
Functions [1]: [partial_sum(UnscaledValue((ws_ext_list_price#66 - ws_ext_discount_amt#65)))]
Aggregate Attributes [1]: [sum#78]
Results [9]: [c_customer_id#71, c_first_name#72, c_last_name#73, c_preferred_cust_flag#74, c_birth_country#75, c_login#76, c_email_address#77, d_year#69, sum#79]

(71) Exchange
Input [9]: [c_customer_id#71, c_first_name#72, c_last_name#73, c_preferred_cust_flag#74, c_birth_country#75, c_login#76, c_email_address#77, d_year#69, sum#79]
Arguments: hashpartitioning(c_customer_id#71, c_first_name#72, c_last_name#73, c_preferred_cust_flag#74, c_birth_country#75, c_login#76, c_email_address#77, d_year#69, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(72) HashAggregate [codegen id : 33]
Input [9]: [c_customer_id#71, c_first_name#72, c_last_name#73, c_preferred_cust_flag#74, c_birth_country#75, c_login#76, c_email_address#77, d_year#69, sum#79]
Keys [8]: [c_customer_id#71, c_first_name#72, c_last_name#73, c_preferred_cust_flag#74, c_birth_country#75, c_login#76, c_email_address#77, d_year#69]
Functions [1]: [sum(UnscaledValue((ws_ext_list_price#66 - ws_ext_discount_amt#65)))]
Aggregate Attributes [1]: [sum(UnscaledValue((ws_ext_list_price#66 - ws_ext_discount_amt#65)))#61]
Results [2]: [c_customer_id#71 AS customer_id#80, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#66 - ws_ext_discount_amt#65)))#61,18,2) AS year_total#81]

(73) Exchange
Input [2]: [customer_id#80, year_total#81]
Arguments: hashpartitioning(customer_id#80, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(74) Sort [codegen id : 34]
Input [2]: [customer_id#80, year_total#81]
Arguments: [customer_id#80 ASC NULLS FIRST], false, 0

(75) SortMergeJoin [codegen id : 35]
Left keys [1]: [customer_id#21]
Right keys [1]: [customer_id#80]
Join type: Inner
Join condition: (CASE WHEN (year_total#63 > 0.00) THEN (year_total#81 / year_total#63) END > CASE WHEN (year_total#22 > 0.00) THEN (year_total#44 / year_total#22) END)

(76) Project [codegen id : 35]
Output [1]: [customer_preferred_cust_flag#43]
Input [7]: [customer_id#21, year_total#22, customer_preferred_cust_flag#43, year_total#44, year_total#63, customer_id#80, year_total#81]

(77) TakeOrderedAndProject
Input [1]: [customer_preferred_cust_flag#43]
Arguments: 100, [customer_preferred_cust_flag#43 ASC NULLS FIRST], [customer_preferred_cust_flag#43]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#6, [id=#7]
ObjectHashAggregate (84)
+- Exchange (83)
   +- ObjectHashAggregate (82)
      +- Exchange (81)
         +- * Filter (80)
            +- * ColumnarToRow (79)
               +- Scan parquet spark_catalog.default.customer (78)


(78) Scan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(79) ColumnarToRow [codegen id : 1]
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]

(80) Filter [codegen id : 1]
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Condition : (isnotnull(c_customer_sk#10) AND isnotnull(c_customer_id#11))

(81) Exchange
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Arguments: hashpartitioning(c_customer_sk#10, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(82) ObjectHashAggregate
Input [8]: [c_customer_sk#10, c_customer_id#11, c_first_name#12, c_last_name#13, c_preferred_cust_flag#14, c_birth_country#15, c_login#16, c_email_address#17]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(c_customer_sk#10, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [buf#82]
Results [1]: [buf#83]

(83) Exchange
Input [1]: [buf#83]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=14]

(84) ObjectHashAggregate
Input [1]: [buf#83]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(c_customer_sk#10, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(c_customer_sk#10, 42), 2000000, 16000000, 0, 0)#84]
Results [1]: [bloom_filter_agg(xxhash64(c_customer_sk#10, 42), 2000000, 16000000, 0, 0)#84 AS bloomFilter#85]

Subquery:2 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (88)
+- * Filter (87)
   +- * ColumnarToRow (86)
      +- Scan parquet spark_catalog.default.date_dim (85)


(85) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#8, d_year#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(86) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#8, d_year#9]

(87) Filter [codegen id : 1]
Input [2]: [d_date_sk#8, d_year#9]
Condition : ((isnotnull(d_year#9) AND (d_year#9 = 2001)) AND isnotnull(d_date_sk#8))

(88) BroadcastExchange
Input [2]: [d_date_sk#8, d_year#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=15]

Subquery:3 Hosting operator id = 21 Hosting Expression = Subquery scalar-subquery#28, [id=#29]
ObjectHashAggregate (95)
+- Exchange (94)
   +- ObjectHashAggregate (93)
      +- Exchange (92)
         +- * Filter (91)
            +- * ColumnarToRow (90)
               +- Scan parquet spark_catalog.default.customer (89)


(89) Scan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#32, c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(90) ColumnarToRow [codegen id : 1]
Input [8]: [c_customer_sk#32, c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39]

(91) Filter [codegen id : 1]
Input [8]: [c_customer_sk#32, c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39]
Condition : (isnotnull(c_customer_sk#32) AND isnotnull(c_customer_id#33))

(92) Exchange
Input [8]: [c_customer_sk#32, c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39]
Arguments: hashpartitioning(c_customer_sk#10, 5), ENSURE_REQUIREMENTS, [plan_id=16]

(93) ObjectHashAggregate
Input [8]: [c_customer_sk#32, c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#37, c_login#38, c_email_address#39]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(c_customer_sk#32, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [buf#86]
Results [1]: [buf#87]

(94) Exchange
Input [1]: [buf#87]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=17]

(95) ObjectHashAggregate
Input [1]: [buf#87]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(c_customer_sk#32, 42), 2000000, 16000000, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(c_customer_sk#32, 42), 2000000, 16000000, 0, 0)#88]
Results [1]: [bloom_filter_agg(xxhash64(c_customer_sk#32, 42), 2000000, 16000000, 0, 0)#88 AS bloomFilter#89]

Subquery:4 Hosting operator id = 19 Hosting Expression = ss_sold_date_sk#26 IN dynamicpruning#27
BroadcastExchange (99)
+- * Filter (98)
   +- * ColumnarToRow (97)
      +- Scan parquet spark_catalog.default.date_dim (96)


(96) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#30, d_year#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(97) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#30, d_year#31]

(98) Filter [codegen id : 1]
Input [2]: [d_date_sk#30, d_year#31]
Condition : ((isnotnull(d_year#31) AND (d_year#31 = 2002)) AND isnotnull(d_date_sk#30))

(99) BroadcastExchange
Input [2]: [d_date_sk#30, d_year#31]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=18]

Subquery:5 Hosting operator id = 40 Hosting Expression = ReusedSubquery Subquery scalar-subquery#28, [id=#29]

Subquery:6 Hosting operator id = 38 Hosting Expression = ws_sold_date_sk#48 IN dynamicpruning#5

Subquery:7 Hosting operator id = 60 Hosting Expression = ReusedSubquery Subquery scalar-subquery#28, [id=#29]

Subquery:8 Hosting operator id = 58 Hosting Expression = ws_sold_date_sk#67 IN dynamicpruning#27


