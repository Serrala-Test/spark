== Physical Plan ==
TakeOrderedAndProject (59)
+- * Project (58)
   +- * BroadcastHashJoin Inner BuildLeft (57)
      :- BroadcastExchange (11)
      :  +- * Project (10)
      :     +- * BroadcastHashJoin Inner BuildLeft (9)
      :        :- BroadcastExchange (5)
      :        :  +- * Project (4)
      :        :     +- * Filter (3)
      :        :        +- * ColumnarToRow (2)
      :        :           +- Scan parquet default.customer_address (1)
      :        +- * Filter (8)
      :           +- * ColumnarToRow (7)
      :              +- Scan parquet default.customer (6)
      +- * Project (56)
         +- * BroadcastHashJoin Inner BuildRight (55)
            :- * Filter (34)
            :  +- * HashAggregate (33)
            :     +- Exchange (32)
            :        +- * HashAggregate (31)
            :           +- * Project (30)
            :              +- * SortMergeJoin Inner (29)
            :                 :- * Sort (23)
            :                 :  +- Exchange (22)
            :                 :     +- * Project (21)
            :                 :        +- * BroadcastHashJoin Inner BuildLeft (20)
            :                 :           :- BroadcastExchange (16)
            :                 :           :  +- * Project (15)
            :                 :           :     +- * Filter (14)
            :                 :           :        +- * ColumnarToRow (13)
            :                 :           :           +- Scan parquet default.date_dim (12)
            :                 :           +- * Filter (19)
            :                 :              +- * ColumnarToRow (18)
            :                 :                 +- Scan parquet default.web_returns (17)
            :                 +- * Sort (28)
            :                    +- Exchange (27)
            :                       +- * Filter (26)
            :                          +- * ColumnarToRow (25)
            :                             +- Scan parquet default.customer_address (24)
            +- BroadcastExchange (54)
               +- * Filter (53)
                  +- * HashAggregate (52)
                     +- Exchange (51)
                        +- * HashAggregate (50)
                           +- * HashAggregate (49)
                              +- Exchange (48)
                                 +- * HashAggregate (47)
                                    +- * Project (46)
                                       +- * SortMergeJoin Inner (45)
                                          :- * Sort (42)
                                          :  +- Exchange (41)
                                          :     +- * Project (40)
                                          :        +- * BroadcastHashJoin Inner BuildLeft (39)
                                          :           :- ReusedExchange (35)
                                          :           +- * Filter (38)
                                          :              +- * ColumnarToRow (37)
                                          :                 +- Scan parquet default.web_returns (36)
                                          +- * Sort (44)
                                             +- ReusedExchange (43)


(1) Scan parquet default.customer_address
Output [2]: [ca_address_sk#1, ca_state#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(2) ColumnarToRow [codegen id : 1]
Input [2]: [ca_address_sk#1, ca_state#2]

(3) Filter [codegen id : 1]
Input [2]: [ca_address_sk#1, ca_state#2]
Condition : ((isnotnull(ca_state#2) AND (ca_state#2 = GA)) AND isnotnull(ca_address_sk#1))

(4) Project [codegen id : 1]
Output [1]: [ca_address_sk#1]
Input [2]: [ca_address_sk#1, ca_state#2]

(5) BroadcastExchange
Input [1]: [ca_address_sk#1]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#3]

(6) Scan parquet default.customer
Output [14]: [c_customer_sk#4, c_customer_id#5, c_current_addr_sk#6, c_salutation#7, c_first_name#8, c_last_name#9, c_preferred_cust_flag#10, c_birth_day#11, c_birth_month#12, c_birth_year#13, c_birth_country#14, c_login#15, c_email_address#16, c_last_review_date#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_addr_sk:int,c_salutation:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:int,c_birth_month:int,c_birth_year:int,c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:int>

(7) ColumnarToRow
Input [14]: [c_customer_sk#4, c_customer_id#5, c_current_addr_sk#6, c_salutation#7, c_first_name#8, c_last_name#9, c_preferred_cust_flag#10, c_birth_day#11, c_birth_month#12, c_birth_year#13, c_birth_country#14, c_login#15, c_email_address#16, c_last_review_date#17]

(8) Filter
Input [14]: [c_customer_sk#4, c_customer_id#5, c_current_addr_sk#6, c_salutation#7, c_first_name#8, c_last_name#9, c_preferred_cust_flag#10, c_birth_day#11, c_birth_month#12, c_birth_year#13, c_birth_country#14, c_login#15, c_email_address#16, c_last_review_date#17]
Condition : (isnotnull(c_customer_sk#4) AND isnotnull(c_current_addr_sk#6))

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ca_address_sk#1]
Right keys [1]: [c_current_addr_sk#6]
Join condition: None

(10) Project [codegen id : 2]
Output [13]: [c_customer_sk#4, c_customer_id#5, c_salutation#7, c_first_name#8, c_last_name#9, c_preferred_cust_flag#10, c_birth_day#11, c_birth_month#12, c_birth_year#13, c_birth_country#14, c_login#15, c_email_address#16, c_last_review_date#17]
Input [15]: [ca_address_sk#1, c_customer_sk#4, c_customer_id#5, c_current_addr_sk#6, c_salutation#7, c_first_name#8, c_last_name#9, c_preferred_cust_flag#10, c_birth_day#11, c_birth_month#12, c_birth_year#13, c_birth_country#14, c_login#15, c_email_address#16, c_last_review_date#17]

(11) BroadcastExchange
Input [13]: [c_customer_sk#4, c_customer_id#5, c_salutation#7, c_first_name#8, c_last_name#9, c_preferred_cust_flag#10, c_birth_day#11, c_birth_month#12, c_birth_year#13, c_birth_country#14, c_login#15, c_email_address#16, c_last_review_date#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#18]

(12) Scan parquet default.date_dim
Output [2]: [d_date_sk#19, d_year#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(13) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#19, d_year#20]

(14) Filter [codegen id : 3]
Input [2]: [d_date_sk#19, d_year#20]
Condition : ((isnotnull(d_year#20) AND (d_year#20 = 2002)) AND isnotnull(d_date_sk#19))

(15) Project [codegen id : 3]
Output [1]: [d_date_sk#19]
Input [2]: [d_date_sk#19, d_year#20]

(16) BroadcastExchange
Input [1]: [d_date_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21]

(17) Scan parquet default.web_returns
Output [4]: [wr_returned_date_sk#22, wr_returning_customer_sk#23, wr_returning_addr_sk#24, wr_return_amt#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_returned_date_sk), IsNotNull(wr_returning_addr_sk), IsNotNull(wr_returning_customer_sk)]
ReadSchema: struct<wr_returned_date_sk:bigint,wr_returning_customer_sk:bigint,wr_returning_addr_sk:bigint,wr_return_amt:decimal(7,2)>

(18) ColumnarToRow
Input [4]: [wr_returned_date_sk#22, wr_returning_customer_sk#23, wr_returning_addr_sk#24, wr_return_amt#25]

(19) Filter
Input [4]: [wr_returned_date_sk#22, wr_returning_customer_sk#23, wr_returning_addr_sk#24, wr_return_amt#25]
Condition : ((isnotnull(wr_returned_date_sk#22) AND isnotnull(wr_returning_addr_sk#24)) AND isnotnull(wr_returning_customer_sk#23))

(20) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cast(d_date_sk#19 as bigint)]
Right keys [1]: [wr_returned_date_sk#22]
Join condition: None

(21) Project [codegen id : 4]
Output [3]: [wr_returning_customer_sk#23, wr_returning_addr_sk#24, wr_return_amt#25]
Input [5]: [d_date_sk#19, wr_returned_date_sk#22, wr_returning_customer_sk#23, wr_returning_addr_sk#24, wr_return_amt#25]

(22) Exchange
Input [3]: [wr_returning_customer_sk#23, wr_returning_addr_sk#24, wr_return_amt#25]
Arguments: hashpartitioning(wr_returning_addr_sk#24, 5), true, [id=#26]

(23) Sort [codegen id : 5]
Input [3]: [wr_returning_customer_sk#23, wr_returning_addr_sk#24, wr_return_amt#25]
Arguments: [wr_returning_addr_sk#24 ASC NULLS FIRST], false, 0

(24) Scan parquet default.customer_address
Output [2]: [ca_address_sk#1, ca_state#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_state)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(25) ColumnarToRow [codegen id : 6]
Input [2]: [ca_address_sk#1, ca_state#2]

(26) Filter [codegen id : 6]
Input [2]: [ca_address_sk#1, ca_state#2]
Condition : (isnotnull(ca_address_sk#1) AND isnotnull(ca_state#2))

(27) Exchange
Input [2]: [ca_address_sk#1, ca_state#2]
Arguments: hashpartitioning(cast(ca_address_sk#1 as bigint), 5), true, [id=#27]

(28) Sort [codegen id : 7]
Input [2]: [ca_address_sk#1, ca_state#2]
Arguments: [cast(ca_address_sk#1 as bigint) ASC NULLS FIRST], false, 0

(29) SortMergeJoin [codegen id : 8]
Left keys [1]: [wr_returning_addr_sk#24]
Right keys [1]: [cast(ca_address_sk#1 as bigint)]
Join condition: None

(30) Project [codegen id : 8]
Output [3]: [wr_returning_customer_sk#23, wr_return_amt#25, ca_state#2]
Input [5]: [wr_returning_customer_sk#23, wr_returning_addr_sk#24, wr_return_amt#25, ca_address_sk#1, ca_state#2]

(31) HashAggregate [codegen id : 8]
Input [3]: [wr_returning_customer_sk#23, wr_return_amt#25, ca_state#2]
Keys [2]: [wr_returning_customer_sk#23, ca_state#2]
Functions [1]: [partial_sum(UnscaledValue(wr_return_amt#25))]
Aggregate Attributes [1]: [sum#28]
Results [3]: [wr_returning_customer_sk#23, ca_state#2, sum#29]

(32) Exchange
Input [3]: [wr_returning_customer_sk#23, ca_state#2, sum#29]
Arguments: hashpartitioning(wr_returning_customer_sk#23, ca_state#2, 5), true, [id=#30]

(33) HashAggregate
Input [3]: [wr_returning_customer_sk#23, ca_state#2, sum#29]
Keys [2]: [wr_returning_customer_sk#23, ca_state#2]
Functions [1]: [sum(UnscaledValue(wr_return_amt#25))]
Aggregate Attributes [1]: [sum(UnscaledValue(wr_return_amt#25))#31]
Results [3]: [wr_returning_customer_sk#23 AS ctr_customer_sk#32, ca_state#2 AS ctr_state#33, MakeDecimal(sum(UnscaledValue(wr_return_amt#25))#31,17,2) AS ctr_total_return#34]

(34) Filter
Input [3]: [ctr_customer_sk#32, ctr_state#33, ctr_total_return#34]
Condition : isnotnull(ctr_total_return#34)

(35) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#19]

(36) Scan parquet default.web_returns
Output [4]: [wr_returned_date_sk#22, wr_returning_customer_sk#23, wr_returning_addr_sk#24, wr_return_amt#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_returned_date_sk), IsNotNull(wr_returning_addr_sk)]
ReadSchema: struct<wr_returned_date_sk:bigint,wr_returning_customer_sk:bigint,wr_returning_addr_sk:bigint,wr_return_amt:decimal(7,2)>

(37) ColumnarToRow
Input [4]: [wr_returned_date_sk#22, wr_returning_customer_sk#23, wr_returning_addr_sk#24, wr_return_amt#25]

(38) Filter
Input [4]: [wr_returned_date_sk#22, wr_returning_customer_sk#23, wr_returning_addr_sk#24, wr_return_amt#25]
Condition : (isnotnull(wr_returned_date_sk#22) AND isnotnull(wr_returning_addr_sk#24))

(39) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [cast(d_date_sk#19 as bigint)]
Right keys [1]: [wr_returned_date_sk#22]
Join condition: None

(40) Project [codegen id : 10]
Output [3]: [wr_returning_customer_sk#23, wr_returning_addr_sk#24, wr_return_amt#25]
Input [5]: [d_date_sk#19, wr_returned_date_sk#22, wr_returning_customer_sk#23, wr_returning_addr_sk#24, wr_return_amt#25]

(41) Exchange
Input [3]: [wr_returning_customer_sk#23, wr_returning_addr_sk#24, wr_return_amt#25]
Arguments: hashpartitioning(wr_returning_addr_sk#24, 5), true, [id=#35]

(42) Sort [codegen id : 11]
Input [3]: [wr_returning_customer_sk#23, wr_returning_addr_sk#24, wr_return_amt#25]
Arguments: [wr_returning_addr_sk#24 ASC NULLS FIRST], false, 0

(43) ReusedExchange [Reuses operator id: 27]
Output [2]: [ca_address_sk#1, ca_state#2]

(44) Sort [codegen id : 13]
Input [2]: [ca_address_sk#1, ca_state#2]
Arguments: [cast(ca_address_sk#1 as bigint) ASC NULLS FIRST], false, 0

(45) SortMergeJoin [codegen id : 14]
Left keys [1]: [wr_returning_addr_sk#24]
Right keys [1]: [cast(ca_address_sk#1 as bigint)]
Join condition: None

(46) Project [codegen id : 14]
Output [3]: [wr_returning_customer_sk#23, wr_return_amt#25, ca_state#2]
Input [5]: [wr_returning_customer_sk#23, wr_returning_addr_sk#24, wr_return_amt#25, ca_address_sk#1, ca_state#2]

(47) HashAggregate [codegen id : 14]
Input [3]: [wr_returning_customer_sk#23, wr_return_amt#25, ca_state#2]
Keys [2]: [wr_returning_customer_sk#23, ca_state#2]
Functions [1]: [partial_sum(UnscaledValue(wr_return_amt#25))]
Aggregate Attributes [1]: [sum#36]
Results [3]: [wr_returning_customer_sk#23, ca_state#2, sum#37]

(48) Exchange
Input [3]: [wr_returning_customer_sk#23, ca_state#2, sum#37]
Arguments: hashpartitioning(wr_returning_customer_sk#23, ca_state#2, 5), true, [id=#38]

(49) HashAggregate [codegen id : 15]
Input [3]: [wr_returning_customer_sk#23, ca_state#2, sum#37]
Keys [2]: [wr_returning_customer_sk#23, ca_state#2]
Functions [1]: [sum(UnscaledValue(wr_return_amt#25))]
Aggregate Attributes [1]: [sum(UnscaledValue(wr_return_amt#25))#39]
Results [2]: [ca_state#2 AS ctr_state#33, MakeDecimal(sum(UnscaledValue(wr_return_amt#25))#39,17,2) AS ctr_total_return#34]

(50) HashAggregate [codegen id : 15]
Input [2]: [ctr_state#33, ctr_total_return#34]
Keys [1]: [ctr_state#33]
Functions [1]: [partial_avg(ctr_total_return#34)]
Aggregate Attributes [2]: [sum#40, count#41]
Results [3]: [ctr_state#33, sum#42, count#43]

(51) Exchange
Input [3]: [ctr_state#33, sum#42, count#43]
Arguments: hashpartitioning(ctr_state#33, 5), true, [id=#44]

(52) HashAggregate [codegen id : 16]
Input [3]: [ctr_state#33, sum#42, count#43]
Keys [1]: [ctr_state#33]
Functions [1]: [avg(ctr_total_return#34)]
Aggregate Attributes [1]: [avg(ctr_total_return#34)#45]
Results [2]: [CheckOverflow((promote_precision(avg(ctr_total_return#34)#45) * 1.200000), DecimalType(24,7), true) AS (CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#46, ctr_state#33 AS ctr_state#33#47]

(53) Filter [codegen id : 16]
Input [2]: [(CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#46, ctr_state#33#47]
Condition : isnotnull((CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#46)

(54) BroadcastExchange
Input [2]: [(CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#46, ctr_state#33#47]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true]),false), [id=#48]

(55) BroadcastHashJoin
Left keys [1]: [ctr_state#33]
Right keys [1]: [ctr_state#33#47]
Join condition: (cast(ctr_total_return#34 as decimal(24,7)) > (CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#46)

(56) Project
Output [2]: [ctr_customer_sk#32, ctr_total_return#34]
Input [5]: [ctr_customer_sk#32, ctr_state#33, ctr_total_return#34, (CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#46, ctr_state#33#47]

(57) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [cast(c_customer_sk#4 as bigint)]
Right keys [1]: [ctr_customer_sk#32]
Join condition: None

(58) Project [codegen id : 17]
Output [13]: [c_customer_id#5, c_salutation#7, c_first_name#8, c_last_name#9, c_preferred_cust_flag#10, c_birth_day#11, c_birth_month#12, c_birth_year#13, c_birth_country#14, c_login#15, c_email_address#16, c_last_review_date#17, ctr_total_return#34]
Input [15]: [c_customer_sk#4, c_customer_id#5, c_salutation#7, c_first_name#8, c_last_name#9, c_preferred_cust_flag#10, c_birth_day#11, c_birth_month#12, c_birth_year#13, c_birth_country#14, c_login#15, c_email_address#16, c_last_review_date#17, ctr_customer_sk#32, ctr_total_return#34]

(59) TakeOrderedAndProject
Input [13]: [c_customer_id#5, c_salutation#7, c_first_name#8, c_last_name#9, c_preferred_cust_flag#10, c_birth_day#11, c_birth_month#12, c_birth_year#13, c_birth_country#14, c_login#15, c_email_address#16, c_last_review_date#17, ctr_total_return#34]
Arguments: 100, [c_customer_id#5 ASC NULLS FIRST, c_salutation#7 ASC NULLS FIRST, c_first_name#8 ASC NULLS FIRST, c_last_name#9 ASC NULLS FIRST, c_preferred_cust_flag#10 ASC NULLS FIRST, c_birth_day#11 ASC NULLS FIRST, c_birth_month#12 ASC NULLS FIRST, c_birth_year#13 ASC NULLS FIRST, c_birth_country#14 ASC NULLS FIRST, c_login#15 ASC NULLS FIRST, c_email_address#16 ASC NULLS FIRST, c_last_review_date#17 ASC NULLS FIRST, ctr_total_return#34 ASC NULLS FIRST], [c_customer_id#5, c_salutation#7, c_first_name#8, c_last_name#9, c_preferred_cust_flag#10, c_birth_day#11, c_birth_month#12, c_birth_year#13, c_birth_country#14, c_login#15, c_email_address#16, c_last_review_date#17, ctr_total_return#34]

