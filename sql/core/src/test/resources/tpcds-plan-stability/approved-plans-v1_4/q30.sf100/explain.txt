== Physical Plan ==
TakeOrderedAndProject (54)
+- * Project (53)
   +- * BroadcastHashJoin Inner BuildRight (52)
      :- * Project (31)
      :  +- * BroadcastHashJoin Inner BuildLeft (30)
      :     :- BroadcastExchange (10)
      :     :  +- * Project (9)
      :     :     +- * BroadcastHashJoin Inner BuildRight (8)
      :     :        :- * ColumnarToRow (2)
      :     :        :  +- Scan parquet default.customer (1)
      :     :        +- BroadcastExchange (7)
      :     :           +- * Project (6)
      :     :              +- * Filter (5)
      :     :                 +- * ColumnarToRow (4)
      :     :                    +- Scan parquet default.customer_address (3)
      :     +- * Filter (29)
      :        +- * HashAggregate (28)
      :           +- Exchange (27)
      :              +- * HashAggregate (26)
      :                 +- * Project (25)
      :                    +- * SortMergeJoin Inner (24)
      :                       :- * Sort (18)
      :                       :  +- Exchange (17)
      :                       :     +- * Project (16)
      :                       :        +- * BroadcastHashJoin Inner BuildRight (15)
      :                       :           :- * Filter (13)
      :                       :           :  +- * ColumnarToRow (12)
      :                       :           :     +- Scan parquet default.web_returns (11)
      :                       :           +- ReusedExchange (14)
      :                       +- * Sort (23)
      :                          +- Exchange (22)
      :                             +- * Filter (21)
      :                                +- * ColumnarToRow (20)
      :                                   +- Scan parquet default.customer_address (19)
      +- BroadcastExchange (51)
         +- * Filter (50)
            +- * HashAggregate (49)
               +- Exchange (48)
                  +- * HashAggregate (47)
                     +- * HashAggregate (46)
                        +- Exchange (45)
                           +- * HashAggregate (44)
                              +- * Project (43)
                                 +- * SortMergeJoin Inner (42)
                                    :- * Sort (39)
                                    :  +- Exchange (38)
                                    :     +- * Project (37)
                                    :        +- * BroadcastHashJoin Inner BuildRight (36)
                                    :           :- * Filter (34)
                                    :           :  +- * ColumnarToRow (33)
                                    :           :     +- Scan parquet default.web_returns (32)
                                    :           +- ReusedExchange (35)
                                    +- * Sort (41)
                                       +- ReusedExchange (40)


(1) Scan parquet default.customer
Output [14]: [c_customer_sk#1, c_customer_id#2, c_current_addr_sk#3, c_salutation#4, c_first_name#5, c_last_name#6, c_preferred_cust_flag#7, c_birth_day#8, c_birth_month#9, c_birth_year#10, c_birth_country#11, c_login#12, c_email_address#13, c_last_review_date#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_addr_sk:int,c_salutation:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:int,c_birth_month:int,c_birth_year:int,c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:int>

(2) ColumnarToRow [codegen id : 2]
Input [14]: [c_customer_sk#1, c_customer_id#2, c_current_addr_sk#3, c_salutation#4, c_first_name#5, c_last_name#6, c_preferred_cust_flag#7, c_birth_day#8, c_birth_month#9, c_birth_year#10, c_birth_country#11, c_login#12, c_email_address#13, c_last_review_date#14]

(3) Scan parquet default.customer_address
Output [2]: [ca_address_sk#15, ca_state#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(4) ColumnarToRow [codegen id : 1]
Input [2]: [ca_address_sk#15, ca_state#16]

(5) Filter [codegen id : 1]
Input [2]: [ca_address_sk#15, ca_state#16]
Condition : (isnotnull(ca_state#16) AND (ca_state#16 = GA))

(6) Project [codegen id : 1]
Output [1]: [ca_address_sk#15]
Input [2]: [ca_address_sk#15, ca_state#16]

(7) BroadcastExchange
Input [1]: [ca_address_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#17]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [c_current_addr_sk#3]
Right keys [1]: [ca_address_sk#15]
Join condition: None

(9) Project [codegen id : 2]
Output [13]: [c_customer_sk#1, c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, c_preferred_cust_flag#7, c_birth_day#8, c_birth_month#9, c_birth_year#10, c_birth_country#11, c_login#12, c_email_address#13, c_last_review_date#14]
Input [15]: [c_customer_sk#1, c_customer_id#2, c_current_addr_sk#3, c_salutation#4, c_first_name#5, c_last_name#6, c_preferred_cust_flag#7, c_birth_day#8, c_birth_month#9, c_birth_year#10, c_birth_country#11, c_login#12, c_email_address#13, c_last_review_date#14, ca_address_sk#15]

(10) BroadcastExchange
Input [13]: [c_customer_sk#1, c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, c_preferred_cust_flag#7, c_birth_day#8, c_birth_month#9, c_birth_year#10, c_birth_country#11, c_login#12, c_email_address#13, c_last_review_date#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#18]

(11) Scan parquet default.web_returns
Output [4]: [wr_returning_customer_sk#19, wr_returning_addr_sk#20, wr_return_amt#21, wr_returned_date_sk#22]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#22), dynamicpruningexpression(wr_returned_date_sk#22 IN dynamicpruning#23)]
PushedFilters: [IsNotNull(wr_returning_addr_sk), IsNotNull(wr_returning_customer_sk)]
ReadSchema: struct<wr_returning_customer_sk:int,wr_returning_addr_sk:int,wr_return_amt:decimal(7,2)>

(12) ColumnarToRow [codegen id : 4]
Input [4]: [wr_returning_customer_sk#19, wr_returning_addr_sk#20, wr_return_amt#21, wr_returned_date_sk#22]

(13) Filter [codegen id : 4]
Input [4]: [wr_returning_customer_sk#19, wr_returning_addr_sk#20, wr_return_amt#21, wr_returned_date_sk#22]
Condition : (isnotnull(wr_returning_addr_sk#20) AND isnotnull(wr_returning_customer_sk#19))

(14) ReusedExchange [Reuses operator id: 59]
Output [1]: [d_date_sk#24]

(15) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [wr_returned_date_sk#22]
Right keys [1]: [d_date_sk#24]
Join condition: None

(16) Project [codegen id : 4]
Output [3]: [wr_returning_customer_sk#19, wr_returning_addr_sk#20, wr_return_amt#21]
Input [5]: [wr_returning_customer_sk#19, wr_returning_addr_sk#20, wr_return_amt#21, wr_returned_date_sk#22, d_date_sk#24]

(17) Exchange
Input [3]: [wr_returning_customer_sk#19, wr_returning_addr_sk#20, wr_return_amt#21]
Arguments: hashpartitioning(wr_returning_addr_sk#20, 5), ENSURE_REQUIREMENTS, [id=#25]

(18) Sort [codegen id : 5]
Input [3]: [wr_returning_customer_sk#19, wr_returning_addr_sk#20, wr_return_amt#21]
Arguments: [wr_returning_addr_sk#20 ASC NULLS FIRST], false, 0

(19) Scan parquet default.customer_address
Output [2]: [ca_address_sk#26, ca_state#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(20) ColumnarToRow [codegen id : 6]
Input [2]: [ca_address_sk#26, ca_state#27]

(21) Filter [codegen id : 6]
Input [2]: [ca_address_sk#26, ca_state#27]
Condition : isnotnull(ca_state#27)

(22) Exchange
Input [2]: [ca_address_sk#26, ca_state#27]
Arguments: hashpartitioning(ca_address_sk#26, 5), ENSURE_REQUIREMENTS, [id=#28]

(23) Sort [codegen id : 7]
Input [2]: [ca_address_sk#26, ca_state#27]
Arguments: [ca_address_sk#26 ASC NULLS FIRST], false, 0

(24) SortMergeJoin [codegen id : 8]
Left keys [1]: [wr_returning_addr_sk#20]
Right keys [1]: [ca_address_sk#26]
Join condition: None

(25) Project [codegen id : 8]
Output [3]: [wr_returning_customer_sk#19, wr_return_amt#21, ca_state#27]
Input [5]: [wr_returning_customer_sk#19, wr_returning_addr_sk#20, wr_return_amt#21, ca_address_sk#26, ca_state#27]

(26) HashAggregate [codegen id : 8]
Input [3]: [wr_returning_customer_sk#19, wr_return_amt#21, ca_state#27]
Keys [2]: [wr_returning_customer_sk#19, ca_state#27]
Functions [1]: [partial_sum(UnscaledValue(wr_return_amt#21))]
Aggregate Attributes [1]: [sum#29]
Results [3]: [wr_returning_customer_sk#19, ca_state#27, sum#30]

(27) Exchange
Input [3]: [wr_returning_customer_sk#19, ca_state#27, sum#30]
Arguments: hashpartitioning(wr_returning_customer_sk#19, ca_state#27, 5), ENSURE_REQUIREMENTS, [id=#31]

(28) HashAggregate
Input [3]: [wr_returning_customer_sk#19, ca_state#27, sum#30]
Keys [2]: [wr_returning_customer_sk#19, ca_state#27]
Functions [1]: [sum(UnscaledValue(wr_return_amt#21))]
Aggregate Attributes [1]: [sum(UnscaledValue(wr_return_amt#21))#32]
Results [3]: [wr_returning_customer_sk#19 AS ctr_customer_sk#33, ca_state#27 AS ctr_state#34, MakeDecimal(sum(UnscaledValue(wr_return_amt#21))#32,17,2) AS ctr_total_return#35]

(29) Filter
Input [3]: [ctr_customer_sk#33, ctr_state#34, ctr_total_return#35]
Condition : isnotnull(ctr_total_return#35)

(30) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [c_customer_sk#1]
Right keys [1]: [ctr_customer_sk#33]
Join condition: None

(31) Project [codegen id : 17]
Output [14]: [c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, c_preferred_cust_flag#7, c_birth_day#8, c_birth_month#9, c_birth_year#10, c_birth_country#11, c_login#12, c_email_address#13, c_last_review_date#14, ctr_state#34, ctr_total_return#35]
Input [16]: [c_customer_sk#1, c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, c_preferred_cust_flag#7, c_birth_day#8, c_birth_month#9, c_birth_year#10, c_birth_country#11, c_login#12, c_email_address#13, c_last_review_date#14, ctr_customer_sk#33, ctr_state#34, ctr_total_return#35]

(32) Scan parquet default.web_returns
Output [4]: [wr_returning_customer_sk#36, wr_returning_addr_sk#37, wr_return_amt#38, wr_returned_date_sk#39]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#39), dynamicpruningexpression(wr_returned_date_sk#39 IN dynamicpruning#23)]
PushedFilters: [IsNotNull(wr_returning_addr_sk)]
ReadSchema: struct<wr_returning_customer_sk:int,wr_returning_addr_sk:int,wr_return_amt:decimal(7,2)>

(33) ColumnarToRow [codegen id : 10]
Input [4]: [wr_returning_customer_sk#36, wr_returning_addr_sk#37, wr_return_amt#38, wr_returned_date_sk#39]

(34) Filter [codegen id : 10]
Input [4]: [wr_returning_customer_sk#36, wr_returning_addr_sk#37, wr_return_amt#38, wr_returned_date_sk#39]
Condition : isnotnull(wr_returning_addr_sk#37)

(35) ReusedExchange [Reuses operator id: 59]
Output [1]: [d_date_sk#40]

(36) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [wr_returned_date_sk#39]
Right keys [1]: [d_date_sk#40]
Join condition: None

(37) Project [codegen id : 10]
Output [3]: [wr_returning_customer_sk#36, wr_returning_addr_sk#37, wr_return_amt#38]
Input [5]: [wr_returning_customer_sk#36, wr_returning_addr_sk#37, wr_return_amt#38, wr_returned_date_sk#39, d_date_sk#40]

(38) Exchange
Input [3]: [wr_returning_customer_sk#36, wr_returning_addr_sk#37, wr_return_amt#38]
Arguments: hashpartitioning(wr_returning_addr_sk#37, 5), ENSURE_REQUIREMENTS, [id=#41]

(39) Sort [codegen id : 11]
Input [3]: [wr_returning_customer_sk#36, wr_returning_addr_sk#37, wr_return_amt#38]
Arguments: [wr_returning_addr_sk#37 ASC NULLS FIRST], false, 0

(40) ReusedExchange [Reuses operator id: 22]
Output [2]: [ca_address_sk#42, ca_state#43]

(41) Sort [codegen id : 13]
Input [2]: [ca_address_sk#42, ca_state#43]
Arguments: [ca_address_sk#42 ASC NULLS FIRST], false, 0

(42) SortMergeJoin [codegen id : 14]
Left keys [1]: [wr_returning_addr_sk#37]
Right keys [1]: [ca_address_sk#42]
Join condition: None

(43) Project [codegen id : 14]
Output [3]: [wr_returning_customer_sk#36, wr_return_amt#38, ca_state#43]
Input [5]: [wr_returning_customer_sk#36, wr_returning_addr_sk#37, wr_return_amt#38, ca_address_sk#42, ca_state#43]

(44) HashAggregate [codegen id : 14]
Input [3]: [wr_returning_customer_sk#36, wr_return_amt#38, ca_state#43]
Keys [2]: [wr_returning_customer_sk#36, ca_state#43]
Functions [1]: [partial_sum(UnscaledValue(wr_return_amt#38))]
Aggregate Attributes [1]: [sum#44]
Results [3]: [wr_returning_customer_sk#36, ca_state#43, sum#45]

(45) Exchange
Input [3]: [wr_returning_customer_sk#36, ca_state#43, sum#45]
Arguments: hashpartitioning(wr_returning_customer_sk#36, ca_state#43, 5), ENSURE_REQUIREMENTS, [id=#46]

(46) HashAggregate [codegen id : 15]
Input [3]: [wr_returning_customer_sk#36, ca_state#43, sum#45]
Keys [2]: [wr_returning_customer_sk#36, ca_state#43]
Functions [1]: [sum(UnscaledValue(wr_return_amt#38))]
Aggregate Attributes [1]: [sum(UnscaledValue(wr_return_amt#38))#47]
Results [2]: [ca_state#43 AS ctr_state#34, MakeDecimal(sum(UnscaledValue(wr_return_amt#38))#47,17,2) AS ctr_total_return#35]

(47) HashAggregate [codegen id : 15]
Input [2]: [ctr_state#34, ctr_total_return#35]
Keys [1]: [ctr_state#34]
Functions [1]: [partial_avg(ctr_total_return#35)]
Aggregate Attributes [2]: [sum#48, count#49]
Results [3]: [ctr_state#34, sum#50, count#51]

(48) Exchange
Input [3]: [ctr_state#34, sum#50, count#51]
Arguments: hashpartitioning(ctr_state#34, 5), ENSURE_REQUIREMENTS, [id=#52]

(49) HashAggregate [codegen id : 16]
Input [3]: [ctr_state#34, sum#50, count#51]
Keys [1]: [ctr_state#34]
Functions [1]: [avg(ctr_total_return#35)]
Aggregate Attributes [1]: [avg(ctr_total_return#35)#53]
Results [2]: [CheckOverflow((promote_precision(avg(ctr_total_return#35)#53) * 1.200000), DecimalType(24,7), true) AS (avg(ctr_total_return) * 1.2)#54, ctr_state#34 AS ctr_state#34#55]

(50) Filter [codegen id : 16]
Input [2]: [(avg(ctr_total_return) * 1.2)#54, ctr_state#34#55]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#54)

(51) BroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#54, ctr_state#34#55]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true]),false), [id=#56]

(52) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ctr_state#34]
Right keys [1]: [ctr_state#34#55]
Join condition: (cast(ctr_total_return#35 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#54)

(53) Project [codegen id : 17]
Output [13]: [c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, c_preferred_cust_flag#7, c_birth_day#8, c_birth_month#9, c_birth_year#10, c_birth_country#11, c_login#12, c_email_address#13, c_last_review_date#14, ctr_total_return#35]
Input [16]: [c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, c_preferred_cust_flag#7, c_birth_day#8, c_birth_month#9, c_birth_year#10, c_birth_country#11, c_login#12, c_email_address#13, c_last_review_date#14, ctr_state#34, ctr_total_return#35, (avg(ctr_total_return) * 1.2)#54, ctr_state#34#55]

(54) TakeOrderedAndProject
Input [13]: [c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, c_preferred_cust_flag#7, c_birth_day#8, c_birth_month#9, c_birth_year#10, c_birth_country#11, c_login#12, c_email_address#13, c_last_review_date#14, ctr_total_return#35]
Arguments: 100, [c_customer_id#2 ASC NULLS FIRST, c_salutation#4 ASC NULLS FIRST, c_first_name#5 ASC NULLS FIRST, c_last_name#6 ASC NULLS FIRST, c_preferred_cust_flag#7 ASC NULLS FIRST, c_birth_day#8 ASC NULLS FIRST, c_birth_month#9 ASC NULLS FIRST, c_birth_year#10 ASC NULLS FIRST, c_birth_country#11 ASC NULLS FIRST, c_login#12 ASC NULLS FIRST, c_email_address#13 ASC NULLS FIRST, c_last_review_date#14 ASC NULLS FIRST, ctr_total_return#35 ASC NULLS FIRST], [c_customer_id#2, c_salutation#4, c_first_name#5, c_last_name#6, c_preferred_cust_flag#7, c_birth_day#8, c_birth_month#9, c_birth_year#10, c_birth_country#11, c_login#12, c_email_address#13, c_last_review_date#14, ctr_total_return#35]

===== Subqueries =====

Subquery:1 Hosting operator id = 11 Hosting Expression = wr_returned_date_sk#22 IN dynamicpruning#23
BroadcastExchange (59)
+- * Project (58)
   +- * Filter (57)
      +- * ColumnarToRow (56)
         +- Scan parquet default.date_dim (55)


(55) Scan parquet default.date_dim
Output [2]: [d_date_sk#24, d_year#57]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [EqualTo(d_year,2002)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(56) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#24, d_year#57]

(57) Filter [codegen id : 1]
Input [2]: [d_date_sk#24, d_year#57]
Condition : (d_year#57 = 2002)

(58) Project [codegen id : 1]
Output [1]: [d_date_sk#24]
Input [2]: [d_date_sk#24, d_year#57]

(59) BroadcastExchange
Input [1]: [d_date_sk#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#58]

Subquery:2 Hosting operator id = 32 Hosting Expression = wr_returned_date_sk#39 IN dynamicpruning#23


