== Physical Plan ==
TakeOrderedAndProject (54)
+- * Project (53)
   +- Window (52)
      +- * Sort (51)
         +- Exchange (50)
            +- * HashAggregate (49)
               +- Exchange (48)
                  +- * HashAggregate (47)
                     +- * Expand (46)
                        +- * Project (45)
                           +- * BroadcastHashJoin Inner BuildLeft (44)
                              :- BroadcastExchange (11)
                              :  +- * Project (10)
                              :     +- * BroadcastHashJoin Inner BuildLeft (9)
                              :        :- BroadcastExchange (4)
                              :        :  +- * Filter (3)
                              :        :     +- * ColumnarToRow (2)
                              :        :        +- Scan parquet default.store_sales (1)
                              :        +- * Project (8)
                              :           +- * Filter (7)
                              :              +- * ColumnarToRow (6)
                              :                 +- Scan parquet default.date_dim (5)
                              +- SortMergeJoin LeftSemi (43)
                                 :- * Sort (16)
                                 :  +- Exchange (15)
                                 :     +- * Filter (14)
                                 :        +- * ColumnarToRow (13)
                                 :           +- Scan parquet default.store (12)
                                 +- * Sort (42)
                                    +- Exchange (41)
                                       +- * Project (40)
                                          +- * Filter (39)
                                             +- Window (38)
                                                +- * Sort (37)
                                                   +- Exchange (36)
                                                      +- * HashAggregate (35)
                                                         +- Exchange (34)
                                                            +- * HashAggregate (33)
                                                               +- * Project (32)
                                                                  +- * BroadcastHashJoin Inner BuildRight (31)
                                                                     :- * Project (25)
                                                                     :  +- * BroadcastHashJoin Inner BuildLeft (24)
                                                                     :     :- BroadcastExchange (20)
                                                                     :     :  +- * Filter (19)
                                                                     :     :     +- * ColumnarToRow (18)
                                                                     :     :        +- Scan parquet default.store_sales (17)
                                                                     :     +- * Filter (23)
                                                                     :        +- * ColumnarToRow (22)
                                                                     :           +- Scan parquet default.store (21)
                                                                     +- BroadcastExchange (30)
                                                                        +- * Project (29)
                                                                           +- * Filter (28)
                                                                              +- * ColumnarToRow (27)
                                                                                 +- Scan parquet default.date_dim (26)


(1) Scan parquet default.store_sales
Output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]

(3) Filter [codegen id : 1]
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(4) BroadcastExchange
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#5]

(5) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_month_seq#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(6) ColumnarToRow
Input [2]: [d_date_sk#6, d_month_seq#7]

(7) Filter
Input [2]: [d_date_sk#6, d_month_seq#7]
Condition : (((isnotnull(d_month_seq#7) AND (d_month_seq#7 >= 1200)) AND (d_month_seq#7 <= 1211)) AND isnotnull(d_date_sk#6))

(8) Project
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_month_seq#7]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#6]
Join condition: None

(10) Project [codegen id : 2]
Output [2]: [ss_store_sk#1, ss_net_profit#2]
Input [4]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3, d_date_sk#6]

(11) BroadcastExchange
Input [2]: [ss_store_sk#1, ss_net_profit#2]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8]

(12) Scan parquet default.store
Output [3]: [s_store_sk#9, s_county#10, s_state#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_county:string,s_state:string>

(13) ColumnarToRow [codegen id : 3]
Input [3]: [s_store_sk#9, s_county#10, s_state#11]

(14) Filter [codegen id : 3]
Input [3]: [s_store_sk#9, s_county#10, s_state#11]
Condition : isnotnull(s_store_sk#9)

(15) Exchange
Input [3]: [s_store_sk#9, s_county#10, s_state#11]
Arguments: hashpartitioning(s_state#11, 5), ENSURE_REQUIREMENTS, [id=#12]

(16) Sort [codegen id : 4]
Input [3]: [s_store_sk#9, s_county#10, s_state#11]
Arguments: [s_state#11 ASC NULLS FIRST], false, 0

(17) Scan parquet default.store_sales
Output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>

(18) ColumnarToRow [codegen id : 5]
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]

(19) Filter [codegen id : 5]
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(20) BroadcastExchange
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13]

(21) Scan parquet default.store
Output [2]: [s_store_sk#9, s_state#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(22) ColumnarToRow
Input [2]: [s_store_sk#9, s_state#11]

(23) Filter
Input [2]: [s_store_sk#9, s_state#11]
Condition : isnotnull(s_store_sk#9)

(24) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#9]
Join condition: None

(25) Project [codegen id : 7]
Output [3]: [ss_net_profit#2, ss_sold_date_sk#3, s_state#11]
Input [5]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3, s_store_sk#9, s_state#11]

(26) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_month_seq#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(27) ColumnarToRow [codegen id : 6]
Input [2]: [d_date_sk#6, d_month_seq#7]

(28) Filter [codegen id : 6]
Input [2]: [d_date_sk#6, d_month_seq#7]
Condition : (((isnotnull(d_month_seq#7) AND (d_month_seq#7 >= 1200)) AND (d_month_seq#7 <= 1211)) AND isnotnull(d_date_sk#6))

(29) Project [codegen id : 6]
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_month_seq#7]

(30) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(31) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#6]
Join condition: None

(32) Project [codegen id : 7]
Output [2]: [ss_net_profit#2, s_state#11]
Input [4]: [ss_net_profit#2, ss_sold_date_sk#3, s_state#11, d_date_sk#6]

(33) HashAggregate [codegen id : 7]
Input [2]: [ss_net_profit#2, s_state#11]
Keys [1]: [s_state#11]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum#15]
Results [2]: [s_state#11, sum#16]

(34) Exchange
Input [2]: [s_state#11, sum#16]
Arguments: hashpartitioning(s_state#11, 5), ENSURE_REQUIREMENTS, [id=#17]

(35) HashAggregate [codegen id : 8]
Input [2]: [s_state#11, sum#16]
Keys [1]: [s_state#11]
Functions [1]: [sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#2))#18]
Results [3]: [s_state#11 AS s_state#19, s_state#11, MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#18,17,2) AS _w2#20]

(36) Exchange
Input [3]: [s_state#19, s_state#11, _w2#20]
Arguments: hashpartitioning(s_state#11, 5), ENSURE_REQUIREMENTS, [id=#21]

(37) Sort [codegen id : 9]
Input [3]: [s_state#19, s_state#11, _w2#20]
Arguments: [s_state#11 ASC NULLS FIRST, _w2#20 DESC NULLS LAST], false, 0

(38) Window
Input [3]: [s_state#19, s_state#11, _w2#20]
Arguments: [rank(_w2#20) windowspecdefinition(s_state#11, _w2#20 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#22], [s_state#11], [_w2#20 DESC NULLS LAST]

(39) Filter [codegen id : 10]
Input [4]: [s_state#19, s_state#11, _w2#20, ranking#22]
Condition : (isnotnull(ranking#22) AND (ranking#22 <= 5))

(40) Project [codegen id : 10]
Output [1]: [s_state#19]
Input [4]: [s_state#19, s_state#11, _w2#20, ranking#22]

(41) Exchange
Input [1]: [s_state#19]
Arguments: hashpartitioning(s_state#19, 5), ENSURE_REQUIREMENTS, [id=#23]

(42) Sort [codegen id : 11]
Input [1]: [s_state#19]
Arguments: [s_state#19 ASC NULLS FIRST], false, 0

(43) SortMergeJoin
Left keys [1]: [s_state#11]
Right keys [1]: [s_state#19]
Join condition: None

(44) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#9]
Join condition: None

(45) Project [codegen id : 12]
Output [3]: [ss_net_profit#2, s_state#11, s_county#10]
Input [5]: [ss_store_sk#1, ss_net_profit#2, s_store_sk#9, s_county#10, s_state#11]

(46) Expand [codegen id : 12]
Input [3]: [ss_net_profit#2, s_state#11, s_county#10]
Arguments: [List(ss_net_profit#2, s_state#11, s_county#10, 0), List(ss_net_profit#2, s_state#11, null, 1), List(ss_net_profit#2, null, null, 3)], [ss_net_profit#2, s_state#24, s_county#25, spark_grouping_id#26]

(47) HashAggregate [codegen id : 12]
Input [4]: [ss_net_profit#2, s_state#24, s_county#25, spark_grouping_id#26]
Keys [3]: [s_state#24, s_county#25, spark_grouping_id#26]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum#27]
Results [4]: [s_state#24, s_county#25, spark_grouping_id#26, sum#28]

(48) Exchange
Input [4]: [s_state#24, s_county#25, spark_grouping_id#26, sum#28]
Arguments: hashpartitioning(s_state#24, s_county#25, spark_grouping_id#26, 5), ENSURE_REQUIREMENTS, [id=#29]

(49) HashAggregate [codegen id : 13]
Input [4]: [s_state#24, s_county#25, spark_grouping_id#26, sum#28]
Keys [3]: [s_state#24, s_county#25, spark_grouping_id#26]
Functions [1]: [sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#2))#30]
Results [7]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#30,17,2) AS total_sum#31, s_state#24, s_county#25, (cast((shiftright(spark_grouping_id#26, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#26, 0) & 1) as tinyint)) AS lochierarchy#32, (cast((shiftright(spark_grouping_id#26, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#26, 0) & 1) as tinyint)) AS _w1#33, CASE WHEN (cast((shiftright(spark_grouping_id#26, 0) & 1) as tinyint) = 0) THEN s_state#24 END AS _w2#34, MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#30,17,2) AS _w3#35]

(50) Exchange
Input [7]: [total_sum#31, s_state#24, s_county#25, lochierarchy#32, _w1#33, _w2#34, _w3#35]
Arguments: hashpartitioning(_w1#33, _w2#34, 5), ENSURE_REQUIREMENTS, [id=#36]

(51) Sort [codegen id : 14]
Input [7]: [total_sum#31, s_state#24, s_county#25, lochierarchy#32, _w1#33, _w2#34, _w3#35]
Arguments: [_w1#33 ASC NULLS FIRST, _w2#34 ASC NULLS FIRST, _w3#35 DESC NULLS LAST], false, 0

(52) Window
Input [7]: [total_sum#31, s_state#24, s_county#25, lochierarchy#32, _w1#33, _w2#34, _w3#35]
Arguments: [rank(_w3#35) windowspecdefinition(_w1#33, _w2#34, _w3#35 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#37], [_w1#33, _w2#34], [_w3#35 DESC NULLS LAST]

(53) Project [codegen id : 15]
Output [5]: [total_sum#31, s_state#24, s_county#25, lochierarchy#32, rank_within_parent#37]
Input [8]: [total_sum#31, s_state#24, s_county#25, lochierarchy#32, _w1#33, _w2#34, _w3#35, rank_within_parent#37]

(54) TakeOrderedAndProject
Input [5]: [total_sum#31, s_state#24, s_county#25, lochierarchy#32, rank_within_parent#37]
Arguments: 100, [lochierarchy#32 DESC NULLS LAST, CASE WHEN (lochierarchy#32 = 0) THEN s_state#24 END ASC NULLS FIRST, rank_within_parent#37 ASC NULLS FIRST], [total_sum#31, s_state#24, s_county#25, lochierarchy#32, rank_within_parent#37]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
ReusedExchange (55)


(55) ReusedExchange [Reuses operator id: 30]
Output [1]: [d_date_sk#6]

Subquery:2 Hosting operator id = 17 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4


