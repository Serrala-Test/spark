== Physical Plan ==
TakeOrderedAndProject (41)
+- * Project (40)
   +- Window (39)
      +- * Sort (38)
         +- Exchange (37)
            +- * HashAggregate (36)
               +- Exchange (35)
                  +- * HashAggregate (34)
                     +- * Expand (33)
                        +- * Project (32)
                           +- * BroadcastHashJoin Inner BuildRight (31)
                              :- * Project (6)
                              :  +- * BroadcastHashJoin Inner BuildRight (5)
                              :     :- * Filter (3)
                              :     :  +- * ColumnarToRow (2)
                              :     :     +- Scan parquet default.store_sales (1)
                              :     +- ReusedExchange (4)
                              +- BroadcastExchange (30)
                                 +- * BroadcastHashJoin LeftSemi BuildRight (29)
                                    :- * ColumnarToRow (8)
                                    :  +- Scan parquet default.store (7)
                                    +- BroadcastExchange (28)
                                       +- * Project (27)
                                          +- * Filter (26)
                                             +- Window (25)
                                                +- * Sort (24)
                                                   +- Exchange (23)
                                                      +- * HashAggregate (22)
                                                         +- Exchange (21)
                                                            +- * HashAggregate (20)
                                                               +- * Project (19)
                                                                  +- * BroadcastHashJoin Inner BuildRight (18)
                                                                     :- * Project (14)
                                                                     :  +- * BroadcastHashJoin Inner BuildRight (13)
                                                                     :     :- * Filter (11)
                                                                     :     :  +- * ColumnarToRow (10)
                                                                     :     :     +- Scan parquet default.store_sales (9)
                                                                     :     +- ReusedExchange (12)
                                                                     +- BroadcastExchange (17)
                                                                        +- * ColumnarToRow (16)
                                                                           +- Scan parquet default.store (15)


(1) Scan parquet default.store_sales
Output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 9]
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]

(3) Filter [codegen id : 9]
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(4) ReusedExchange [Reuses operator id: 46]
Output [1]: [d_date_sk#5]

(5) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join condition: None

(6) Project [codegen id : 9]
Output [2]: [ss_store_sk#1, ss_net_profit#2]
Input [4]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3, d_date_sk#5]

(7) Scan parquet default.store
Output [3]: [s_store_sk#6, s_county#7, s_state#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
ReadSchema: struct<s_store_sk:int,s_county:string,s_state:string>

(8) ColumnarToRow [codegen id : 8]
Input [3]: [s_store_sk#6, s_county#7, s_state#8]

(9) Scan parquet default.store_sales
Output [3]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>

(10) ColumnarToRow [codegen id : 4]
Input [3]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11]

(11) Filter [codegen id : 4]
Input [3]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_store_sk#9)

(12) ReusedExchange [Reuses operator id: 46]
Output [1]: [d_date_sk#12]

(13) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#11]
Right keys [1]: [d_date_sk#12]
Join condition: None

(14) Project [codegen id : 4]
Output [2]: [ss_store_sk#9, ss_net_profit#10]
Input [4]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11, d_date_sk#12]

(15) Scan parquet default.store
Output [2]: [s_store_sk#13, s_state#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
ReadSchema: struct<s_store_sk:int,s_state:string>

(16) ColumnarToRow [codegen id : 3]
Input [2]: [s_store_sk#13, s_state#14]

(17) BroadcastExchange
Input [2]: [s_store_sk#13, s_state#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#15]

(18) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#9]
Right keys [1]: [s_store_sk#13]
Join condition: None

(19) Project [codegen id : 4]
Output [2]: [ss_net_profit#10, s_state#14]
Input [4]: [ss_store_sk#9, ss_net_profit#10, s_store_sk#13, s_state#14]

(20) HashAggregate [codegen id : 4]
Input [2]: [ss_net_profit#10, s_state#14]
Keys [1]: [s_state#14]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#10))]
Aggregate Attributes [1]: [sum#16]
Results [2]: [s_state#14, sum#17]

(21) Exchange
Input [2]: [s_state#14, sum#17]
Arguments: hashpartitioning(s_state#14, 5), ENSURE_REQUIREMENTS, [id=#18]

(22) HashAggregate [codegen id : 5]
Input [2]: [s_state#14, sum#17]
Keys [1]: [s_state#14]
Functions [1]: [sum(UnscaledValue(ss_net_profit#10))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#10))#19]
Results [3]: [s_state#14 AS s_state#20, s_state#14, MakeDecimal(sum(UnscaledValue(ss_net_profit#10))#19,17,2) AS _w2#21]

(23) Exchange
Input [3]: [s_state#20, s_state#14, _w2#21]
Arguments: hashpartitioning(s_state#14, 5), ENSURE_REQUIREMENTS, [id=#22]

(24) Sort [codegen id : 6]
Input [3]: [s_state#20, s_state#14, _w2#21]
Arguments: [s_state#14 ASC NULLS FIRST, _w2#21 DESC NULLS LAST], false, 0

(25) Window
Input [3]: [s_state#20, s_state#14, _w2#21]
Arguments: [rank(_w2#21) windowspecdefinition(s_state#14, _w2#21 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#23], [s_state#14], [_w2#21 DESC NULLS LAST]

(26) Filter [codegen id : 7]
Input [4]: [s_state#20, s_state#14, _w2#21, ranking#23]
Condition : (ranking#23 <= 5)

(27) Project [codegen id : 7]
Output [1]: [s_state#20]
Input [4]: [s_state#20, s_state#14, _w2#21, ranking#23]

(28) BroadcastExchange
Input [1]: [s_state#20]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#24]

(29) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [s_state#8]
Right keys [1]: [s_state#20]
Join condition: None

(30) BroadcastExchange
Input [3]: [s_store_sk#6, s_county#7, s_state#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#25]

(31) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#6]
Join condition: None

(32) Project [codegen id : 9]
Output [3]: [ss_net_profit#2, s_state#8, s_county#7]
Input [5]: [ss_store_sk#1, ss_net_profit#2, s_store_sk#6, s_county#7, s_state#8]

(33) Expand [codegen id : 9]
Input [3]: [ss_net_profit#2, s_state#8, s_county#7]
Arguments: [[ss_net_profit#2, s_state#8, s_county#7, 0], [ss_net_profit#2, s_state#8, null, 1], [ss_net_profit#2, null, null, 3]], [ss_net_profit#2, s_state#26, s_county#27, spark_grouping_id#28]

(34) HashAggregate [codegen id : 9]
Input [4]: [ss_net_profit#2, s_state#26, s_county#27, spark_grouping_id#28]
Keys [3]: [s_state#26, s_county#27, spark_grouping_id#28]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum#29]
Results [4]: [s_state#26, s_county#27, spark_grouping_id#28, sum#30]

(35) Exchange
Input [4]: [s_state#26, s_county#27, spark_grouping_id#28, sum#30]
Arguments: hashpartitioning(s_state#26, s_county#27, spark_grouping_id#28, 5), ENSURE_REQUIREMENTS, [id=#31]

(36) HashAggregate [codegen id : 10]
Input [4]: [s_state#26, s_county#27, spark_grouping_id#28, sum#30]
Keys [3]: [s_state#26, s_county#27, spark_grouping_id#28]
Functions [1]: [sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#2))#32]
Results [7]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#32,17,2) AS total_sum#33, s_state#26, s_county#27, (cast((shiftright(spark_grouping_id#28, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#28, 0) & 1) as tinyint)) AS lochierarchy#34, (cast((shiftright(spark_grouping_id#28, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#28, 0) & 1) as tinyint)) AS _w1#35, CASE WHEN (cast((shiftright(spark_grouping_id#28, 0) & 1) as tinyint) = 0) THEN s_state#26 END AS _w2#36, MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#32,17,2) AS _w3#37]

(37) Exchange
Input [7]: [total_sum#33, s_state#26, s_county#27, lochierarchy#34, _w1#35, _w2#36, _w3#37]
Arguments: hashpartitioning(_w1#35, _w2#36, 5), ENSURE_REQUIREMENTS, [id=#38]

(38) Sort [codegen id : 11]
Input [7]: [total_sum#33, s_state#26, s_county#27, lochierarchy#34, _w1#35, _w2#36, _w3#37]
Arguments: [_w1#35 ASC NULLS FIRST, _w2#36 ASC NULLS FIRST, _w3#37 DESC NULLS LAST], false, 0

(39) Window
Input [7]: [total_sum#33, s_state#26, s_county#27, lochierarchy#34, _w1#35, _w2#36, _w3#37]
Arguments: [rank(_w3#37) windowspecdefinition(_w1#35, _w2#36, _w3#37 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#39], [_w1#35, _w2#36], [_w3#37 DESC NULLS LAST]

(40) Project [codegen id : 12]
Output [5]: [total_sum#33, s_state#26, s_county#27, lochierarchy#34, rank_within_parent#39]
Input [8]: [total_sum#33, s_state#26, s_county#27, lochierarchy#34, _w1#35, _w2#36, _w3#37, rank_within_parent#39]

(41) TakeOrderedAndProject
Input [5]: [total_sum#33, s_state#26, s_county#27, lochierarchy#34, rank_within_parent#39]
Arguments: 100, [lochierarchy#34 DESC NULLS LAST, CASE WHEN (lochierarchy#34 = 0) THEN s_state#26 END ASC NULLS FIRST, rank_within_parent#39 ASC NULLS FIRST], [total_sum#33, s_state#26, s_county#27, lochierarchy#34, rank_within_parent#39]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (46)
+- * Project (45)
   +- * Filter (44)
      +- * ColumnarToRow (43)
         +- Scan parquet default.date_dim (42)


(42) Scan parquet default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(43) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#5, d_month_seq#40]

(44) Filter [codegen id : 1]
Input [2]: [d_date_sk#5, d_month_seq#40]
Condition : ((d_month_seq#40 >= 1200) AND (d_month_seq#40 <= 1211))

(45) Project [codegen id : 1]
Output [1]: [d_date_sk#5]
Input [2]: [d_date_sk#5, d_month_seq#40]

(46) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#41]

Subquery:2 Hosting operator id = 9 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#4


