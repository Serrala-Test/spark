== Physical Plan ==
TakeOrderedAndProject (52)
+- * Project (51)
   +- Window (50)
      +- * Sort (49)
         +- Exchange (48)
            +- * HashAggregate (47)
               +- Exchange (46)
                  +- * HashAggregate (45)
                     +- * Expand (44)
                        +- * Project (43)
                           +- * BroadcastHashJoin Inner BuildRight (42)
                              :- * Project (10)
                              :  +- * BroadcastHashJoin Inner BuildRight (9)
                              :     :- * Filter (3)
                              :     :  +- * ColumnarToRow (2)
                              :     :     +- Scan parquet default.store_sales (1)
                              :     +- BroadcastExchange (8)
                              :        +- * Project (7)
                              :           +- * Filter (6)
                              :              +- * ColumnarToRow (5)
                              :                 +- Scan parquet default.date_dim (4)
                              +- BroadcastExchange (41)
                                 +- * Project (40)
                                    +- SortMergeJoin LeftSemi (39)
                                       :- * Sort (15)
                                       :  +- Exchange (14)
                                       :     +- * Filter (13)
                                       :        +- * ColumnarToRow (12)
                                       :           +- Scan parquet default.store (11)
                                       +- * Sort (38)
                                          +- Exchange (37)
                                             +- * Project (36)
                                                +- * Filter (35)
                                                   +- Window (34)
                                                      +- * Sort (33)
                                                         +- Exchange (32)
                                                            +- * HashAggregate (31)
                                                               +- Exchange (30)
                                                                  +- * HashAggregate (29)
                                                                     +- * Project (28)
                                                                        +- * BroadcastHashJoin Inner BuildRight (27)
                                                                           :- * Project (21)
                                                                           :  +- * BroadcastHashJoin Inner BuildRight (20)
                                                                           :     :- * Filter (18)
                                                                           :     :  +- * ColumnarToRow (17)
                                                                           :     :     +- Scan parquet default.store_sales (16)
                                                                           :     +- ReusedExchange (19)
                                                                           +- BroadcastExchange (26)
                                                                              +- * Project (25)
                                                                                 +- * Filter (24)
                                                                                    +- * ColumnarToRow (23)
                                                                                       +- Scan parquet default.store (22)


(1) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_sold_date_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 12]
Input [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]

(3) Filter [codegen id : 12]
Input [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
Condition : (isnotnull(ss_sold_date_sk#1) AND isnotnull(ss_store_sk#2))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#4, d_month_seq#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#4, d_month_seq#5]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#4, d_month_seq#5]
Condition : (((isnotnull(d_month_seq#5) AND (d_month_seq#5 >= 1200)) AND (d_month_seq#5 <= 1211)) AND isnotnull(d_date_sk#4))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#4]
Input [2]: [d_date_sk#4, d_month_seq#5]

(8) BroadcastExchange
Input [1]: [d_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#6]

(9) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#4]
Join condition: None

(10) Project [codegen id : 12]
Output [2]: [ss_store_sk#2, ss_net_profit#3]
Input [4]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3, d_date_sk#4]

(11) Scan parquet default.store
Output [3]: [s_store_sk#7, s_county#8, s_state#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_county:string,s_state:string>

(12) ColumnarToRow [codegen id : 2]
Input [3]: [s_store_sk#7, s_county#8, s_state#9]

(13) Filter [codegen id : 2]
Input [3]: [s_store_sk#7, s_county#8, s_state#9]
Condition : isnotnull(s_store_sk#7)

(14) Exchange
Input [3]: [s_store_sk#7, s_county#8, s_state#9]
Arguments: hashpartitioning(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#9, 2, false, true), 5), ENSURE_REQUIREMENTS, [id=#10]

(15) Sort [codegen id : 3]
Input [3]: [s_store_sk#7, s_county#8, s_state#9]
Arguments: [staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#9, 2, false, true) ASC NULLS FIRST], false, 0

(16) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_store_sk:int,ss_net_profit:decimal(7,2)>

(17) ColumnarToRow [codegen id : 6]
Input [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]

(18) Filter [codegen id : 6]
Input [3]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3]
Condition : (isnotnull(ss_store_sk#2) AND isnotnull(ss_sold_date_sk#1))

(19) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#4]

(20) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#4]
Join condition: None

(21) Project [codegen id : 6]
Output [2]: [ss_store_sk#2, ss_net_profit#3]
Input [4]: [ss_sold_date_sk#1, ss_store_sk#2, ss_net_profit#3, d_date_sk#4]

(22) Scan parquet default.store
Output [2]: [s_store_sk#7, s_state#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(23) ColumnarToRow [codegen id : 5]
Input [2]: [s_store_sk#7, s_state#9]

(24) Filter [codegen id : 5]
Input [2]: [s_store_sk#7, s_state#9]
Condition : isnotnull(s_store_sk#7)

(25) Project [codegen id : 5]
Output [2]: [s_store_sk#7, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#9, 2, false, true) AS s_state#11]
Input [2]: [s_store_sk#7, s_state#9]

(26) BroadcastExchange
Input [2]: [s_store_sk#7, s_state#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#12]

(27) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#7]
Join condition: None

(28) Project [codegen id : 6]
Output [2]: [ss_net_profit#3, s_state#11]
Input [4]: [ss_store_sk#2, ss_net_profit#3, s_store_sk#7, s_state#11]

(29) HashAggregate [codegen id : 6]
Input [2]: [ss_net_profit#3, s_state#11]
Keys [1]: [s_state#11]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum#13]
Results [2]: [s_state#11, sum#14]

(30) Exchange
Input [2]: [s_state#11, sum#14]
Arguments: hashpartitioning(s_state#11, 5), ENSURE_REQUIREMENTS, [id=#15]

(31) HashAggregate [codegen id : 7]
Input [2]: [s_state#11, sum#14]
Keys [1]: [s_state#11]
Functions [1]: [sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#3))#16]
Results [3]: [s_state#11 AS s_state#17, s_state#11, MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#16,17,2) AS _w2#18]

(32) Exchange
Input [3]: [s_state#17, s_state#11, _w2#18]
Arguments: hashpartitioning(s_state#11, 5), ENSURE_REQUIREMENTS, [id=#19]

(33) Sort [codegen id : 8]
Input [3]: [s_state#17, s_state#11, _w2#18]
Arguments: [s_state#11 ASC NULLS FIRST, _w2#18 DESC NULLS LAST], false, 0

(34) Window
Input [3]: [s_state#17, s_state#11, _w2#18]
Arguments: [rank(_w2#18) windowspecdefinition(s_state#11, _w2#18 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#20], [s_state#11], [_w2#18 DESC NULLS LAST]

(35) Filter [codegen id : 9]
Input [4]: [s_state#17, s_state#11, _w2#18, ranking#20]
Condition : (isnotnull(ranking#20) AND (ranking#20 <= 5))

(36) Project [codegen id : 9]
Output [1]: [s_state#17]
Input [4]: [s_state#17, s_state#11, _w2#18, ranking#20]

(37) Exchange
Input [1]: [s_state#17]
Arguments: hashpartitioning(s_state#17, 5), ENSURE_REQUIREMENTS, [id=#21]

(38) Sort [codegen id : 10]
Input [1]: [s_state#17]
Arguments: [s_state#17 ASC NULLS FIRST], false, 0

(39) SortMergeJoin
Left keys [1]: [staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#9, 2, false, true)]
Right keys [1]: [s_state#17]
Join condition: None

(40) Project [codegen id : 11]
Output [3]: [s_store_sk#7, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, s_county#8, 30, false, true) AS s_county#22, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, s_state#9, 2, false, true) AS s_state#23]
Input [3]: [s_store_sk#7, s_county#8, s_state#9]

(41) BroadcastExchange
Input [3]: [s_store_sk#7, s_county#22, s_state#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#24]

(42) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#7]
Join condition: None

(43) Project [codegen id : 12]
Output [3]: [ss_net_profit#3, s_state#23 AS s_state#25, s_county#22 AS s_county#26]
Input [5]: [ss_store_sk#2, ss_net_profit#3, s_store_sk#7, s_county#22, s_state#23]

(44) Expand [codegen id : 12]
Input [3]: [ss_net_profit#3, s_state#25, s_county#26]
Arguments: [List(ss_net_profit#3, s_state#25, s_county#26, 0), List(ss_net_profit#3, s_state#25, null, 1), List(ss_net_profit#3, null, null, 3)], [ss_net_profit#3, s_state#27, s_county#28, spark_grouping_id#29]

(45) HashAggregate [codegen id : 12]
Input [4]: [ss_net_profit#3, s_state#27, s_county#28, spark_grouping_id#29]
Keys [3]: [s_state#27, s_county#28, spark_grouping_id#29]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum#30]
Results [4]: [s_state#27, s_county#28, spark_grouping_id#29, sum#31]

(46) Exchange
Input [4]: [s_state#27, s_county#28, spark_grouping_id#29, sum#31]
Arguments: hashpartitioning(s_state#27, s_county#28, spark_grouping_id#29, 5), ENSURE_REQUIREMENTS, [id=#32]

(47) HashAggregate [codegen id : 13]
Input [4]: [s_state#27, s_county#28, spark_grouping_id#29, sum#31]
Keys [3]: [s_state#27, s_county#28, spark_grouping_id#29]
Functions [1]: [sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#3))#33]
Results [7]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#33,17,2) AS total_sum#34, s_state#27, s_county#28, (cast((shiftright(spark_grouping_id#29, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#29, 0) & 1) as tinyint)) AS lochierarchy#35, (cast((shiftright(spark_grouping_id#29, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#29, 0) & 1) as tinyint)) AS _w1#36, CASE WHEN (cast((shiftright(spark_grouping_id#29, 0) & 1) as tinyint) = 0) THEN s_state#27 END AS _w2#37, MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#33,17,2) AS _w3#38]

(48) Exchange
Input [7]: [total_sum#34, s_state#27, s_county#28, lochierarchy#35, _w1#36, _w2#37, _w3#38]
Arguments: hashpartitioning(_w1#36, _w2#37, 5), ENSURE_REQUIREMENTS, [id=#39]

(49) Sort [codegen id : 14]
Input [7]: [total_sum#34, s_state#27, s_county#28, lochierarchy#35, _w1#36, _w2#37, _w3#38]
Arguments: [_w1#36 ASC NULLS FIRST, _w2#37 ASC NULLS FIRST, _w3#38 DESC NULLS LAST], false, 0

(50) Window
Input [7]: [total_sum#34, s_state#27, s_county#28, lochierarchy#35, _w1#36, _w2#37, _w3#38]
Arguments: [rank(_w3#38) windowspecdefinition(_w1#36, _w2#37, _w3#38 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#40], [_w1#36, _w2#37], [_w3#38 DESC NULLS LAST]

(51) Project [codegen id : 15]
Output [5]: [total_sum#34, s_state#27, s_county#28, lochierarchy#35, rank_within_parent#40]
Input [8]: [total_sum#34, s_state#27, s_county#28, lochierarchy#35, _w1#36, _w2#37, _w3#38, rank_within_parent#40]

(52) TakeOrderedAndProject
Input [5]: [total_sum#34, s_state#27, s_county#28, lochierarchy#35, rank_within_parent#40]
Arguments: 100, [lochierarchy#35 DESC NULLS LAST, CASE WHEN (lochierarchy#35 = 0) THEN s_state#27 END ASC NULLS FIRST, rank_within_parent#40 ASC NULLS FIRST], [total_sum#34, s_state#27, s_county#28, lochierarchy#35, rank_within_parent#40]

