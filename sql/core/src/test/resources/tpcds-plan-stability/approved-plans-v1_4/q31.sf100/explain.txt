== Physical Plan ==
* Sort (107)
+- Exchange (106)
   +- * Project (105)
      +- * BroadcastHashJoin Inner BuildRight (104)
         :- * Project (51)
         :  +- * BroadcastHashJoin Inner BuildRight (50)
         :     :- * Project (33)
         :     :  +- * BroadcastHashJoin Inner BuildRight (32)
         :     :     :- * HashAggregate (15)
         :     :     :  +- Exchange (14)
         :     :     :     +- * HashAggregate (13)
         :     :     :        +- * Project (12)
         :     :     :           +- * SortMergeJoin Inner (11)
         :     :     :              :- * Sort (8)
         :     :     :              :  +- Exchange (7)
         :     :     :              :     +- * Project (6)
         :     :     :              :        +- * BroadcastHashJoin Inner BuildRight (5)
         :     :     :              :           :- * Filter (3)
         :     :     :              :           :  +- * ColumnarToRow (2)
         :     :     :              :           :     +- Scan parquet spark_catalog.default.store_sales (1)
         :     :     :              :           +- ReusedExchange (4)
         :     :     :              +- * Sort (10)
         :     :     :                 +- ReusedExchange (9)
         :     :     +- BroadcastExchange (31)
         :     :        +- * HashAggregate (30)
         :     :           +- Exchange (29)
         :     :              +- * HashAggregate (28)
         :     :                 +- * Project (27)
         :     :                    +- * SortMergeJoin Inner (26)
         :     :                       :- * Sort (23)
         :     :                       :  +- Exchange (22)
         :     :                       :     +- * Project (21)
         :     :                       :        +- * BroadcastHashJoin Inner BuildRight (20)
         :     :                       :           :- * Filter (18)
         :     :                       :           :  +- * ColumnarToRow (17)
         :     :                       :           :     +- Scan parquet spark_catalog.default.store_sales (16)
         :     :                       :           +- ReusedExchange (19)
         :     :                       +- * Sort (25)
         :     :                          +- ReusedExchange (24)
         :     +- BroadcastExchange (49)
         :        +- * HashAggregate (48)
         :           +- Exchange (47)
         :              +- * HashAggregate (46)
         :                 +- * Project (45)
         :                    +- * SortMergeJoin Inner (44)
         :                       :- * Sort (41)
         :                       :  +- Exchange (40)
         :                       :     +- * Project (39)
         :                       :        +- * BroadcastHashJoin Inner BuildRight (38)
         :                       :           :- * Filter (36)
         :                       :           :  +- * ColumnarToRow (35)
         :                       :           :     +- Scan parquet spark_catalog.default.store_sales (34)
         :                       :           +- ReusedExchange (37)
         :                       +- * Sort (43)
         :                          +- ReusedExchange (42)
         +- BroadcastExchange (103)
            +- * Project (102)
               +- * BroadcastHashJoin Inner BuildRight (101)
                  :- * Project (84)
                  :  +- * BroadcastHashJoin Inner BuildRight (83)
                  :     :- * HashAggregate (66)
                  :     :  +- Exchange (65)
                  :     :     +- * HashAggregate (64)
                  :     :        +- * Project (63)
                  :     :           +- * SortMergeJoin Inner (62)
                  :     :              :- * Sort (59)
                  :     :              :  +- Exchange (58)
                  :     :              :     +- * Project (57)
                  :     :              :        +- * BroadcastHashJoin Inner BuildRight (56)
                  :     :              :           :- * Filter (54)
                  :     :              :           :  +- * ColumnarToRow (53)
                  :     :              :           :     +- Scan parquet spark_catalog.default.web_sales (52)
                  :     :              :           +- ReusedExchange (55)
                  :     :              +- * Sort (61)
                  :     :                 +- ReusedExchange (60)
                  :     +- BroadcastExchange (82)
                  :        +- * HashAggregate (81)
                  :           +- Exchange (80)
                  :              +- * HashAggregate (79)
                  :                 +- * Project (78)
                  :                    +- * SortMergeJoin Inner (77)
                  :                       :- * Sort (74)
                  :                       :  +- Exchange (73)
                  :                       :     +- * Project (72)
                  :                       :        +- * BroadcastHashJoin Inner BuildRight (71)
                  :                       :           :- * Filter (69)
                  :                       :           :  +- * ColumnarToRow (68)
                  :                       :           :     +- Scan parquet spark_catalog.default.web_sales (67)
                  :                       :           +- ReusedExchange (70)
                  :                       +- * Sort (76)
                  :                          +- ReusedExchange (75)
                  +- BroadcastExchange (100)
                     +- * HashAggregate (99)
                        +- Exchange (98)
                           +- * HashAggregate (97)
                              +- * Project (96)
                                 +- * SortMergeJoin Inner (95)
                                    :- * Sort (92)
                                    :  +- Exchange (91)
                                    :     +- * Project (90)
                                    :        +- * BroadcastHashJoin Inner BuildRight (89)
                                    :           :- * Filter (87)
                                    :           :  +- * ColumnarToRow (86)
                                    :           :     +- Scan parquet spark_catalog.default.web_sales (85)
                                    :           +- ReusedExchange (88)
                                    +- * Sort (94)
                                       +- ReusedExchange (93)


(1) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [3]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]

(3) Filter [codegen id : 2]
Input [3]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Condition : (isnotnull(ss_addr_sk#1) AND might_contain(Subquery scalar-subquery#5, [id=#6], xxhash64(ss_addr_sk#1, 42), false))

(4) ReusedExchange [Reuses operator id: 118]
Output [3]: [d_date_sk#7, d_year#8, d_qoy#9]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#7]
Join type: Inner
Join condition: None

(6) Project [codegen id : 2]
Output [4]: [ss_addr_sk#1, ss_ext_sales_price#2, d_year#8, d_qoy#9]
Input [6]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3, d_date_sk#7, d_year#8, d_qoy#9]

(7) Exchange
Input [4]: [ss_addr_sk#1, ss_ext_sales_price#2, d_year#8, d_qoy#9]
Arguments: hashpartitioning(ss_addr_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(8) Sort [codegen id : 3]
Input [4]: [ss_addr_sk#1, ss_ext_sales_price#2, d_year#8, d_qoy#9]
Arguments: [ss_addr_sk#1 ASC NULLS FIRST], false, 0

(9) ReusedExchange [Reuses operator id: 111]
Output [2]: [ca_address_sk#10, ca_county#11]

(10) Sort [codegen id : 5]
Input [2]: [ca_address_sk#10, ca_county#11]
Arguments: [ca_address_sk#10 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_addr_sk#1]
Right keys [1]: [ca_address_sk#10]
Join type: Inner
Join condition: None

(12) Project [codegen id : 6]
Output [4]: [ss_ext_sales_price#2, d_year#8, d_qoy#9, ca_county#11]
Input [6]: [ss_addr_sk#1, ss_ext_sales_price#2, d_year#8, d_qoy#9, ca_address_sk#10, ca_county#11]

(13) HashAggregate [codegen id : 6]
Input [4]: [ss_ext_sales_price#2, d_year#8, d_qoy#9, ca_county#11]
Keys [3]: [ca_county#11, d_qoy#9, d_year#8]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum#12]
Results [4]: [ca_county#11, d_qoy#9, d_year#8, sum#13]

(14) Exchange
Input [4]: [ca_county#11, d_qoy#9, d_year#8, sum#13]
Arguments: hashpartitioning(ca_county#11, d_qoy#9, d_year#8, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(15) HashAggregate [codegen id : 42]
Input [4]: [ca_county#11, d_qoy#9, d_year#8, sum#13]
Keys [3]: [ca_county#11, d_qoy#9, d_year#8]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#2))#14]
Results [2]: [ca_county#11, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#14,17,2) AS store_sales#15]

(16) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_addr_sk#16, ss_ext_sales_price#17, ss_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#18), dynamicpruningexpression(ss_sold_date_sk#18 IN dynamicpruning#19)]
PushedFilters: [IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>

(17) ColumnarToRow [codegen id : 8]
Input [3]: [ss_addr_sk#16, ss_ext_sales_price#17, ss_sold_date_sk#18]

(18) Filter [codegen id : 8]
Input [3]: [ss_addr_sk#16, ss_ext_sales_price#17, ss_sold_date_sk#18]
Condition : (isnotnull(ss_addr_sk#16) AND might_contain(Subquery scalar-subquery#20, [id=#21], xxhash64(ss_addr_sk#16, 42), false))

(19) ReusedExchange [Reuses operator id: 129]
Output [3]: [d_date_sk#22, d_year#23, d_qoy#24]

(20) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_sold_date_sk#18]
Right keys [1]: [d_date_sk#22]
Join type: Inner
Join condition: None

(21) Project [codegen id : 8]
Output [4]: [ss_addr_sk#16, ss_ext_sales_price#17, d_year#23, d_qoy#24]
Input [6]: [ss_addr_sk#16, ss_ext_sales_price#17, ss_sold_date_sk#18, d_date_sk#22, d_year#23, d_qoy#24]

(22) Exchange
Input [4]: [ss_addr_sk#16, ss_ext_sales_price#17, d_year#23, d_qoy#24]
Arguments: hashpartitioning(ss_addr_sk#16, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(23) Sort [codegen id : 9]
Input [4]: [ss_addr_sk#16, ss_ext_sales_price#17, d_year#23, d_qoy#24]
Arguments: [ss_addr_sk#16 ASC NULLS FIRST], false, 0

(24) ReusedExchange [Reuses operator id: 111]
Output [2]: [ca_address_sk#25, ca_county#26]

(25) Sort [codegen id : 11]
Input [2]: [ca_address_sk#25, ca_county#26]
Arguments: [ca_address_sk#25 ASC NULLS FIRST], false, 0

(26) SortMergeJoin [codegen id : 12]
Left keys [1]: [ss_addr_sk#16]
Right keys [1]: [ca_address_sk#25]
Join type: Inner
Join condition: None

(27) Project [codegen id : 12]
Output [4]: [ss_ext_sales_price#17, d_year#23, d_qoy#24, ca_county#26]
Input [6]: [ss_addr_sk#16, ss_ext_sales_price#17, d_year#23, d_qoy#24, ca_address_sk#25, ca_county#26]

(28) HashAggregate [codegen id : 12]
Input [4]: [ss_ext_sales_price#17, d_year#23, d_qoy#24, ca_county#26]
Keys [3]: [ca_county#26, d_qoy#24, d_year#23]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#17))]
Aggregate Attributes [1]: [sum#27]
Results [4]: [ca_county#26, d_qoy#24, d_year#23, sum#28]

(29) Exchange
Input [4]: [ca_county#26, d_qoy#24, d_year#23, sum#28]
Arguments: hashpartitioning(ca_county#26, d_qoy#24, d_year#23, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(30) HashAggregate [codegen id : 13]
Input [4]: [ca_county#26, d_qoy#24, d_year#23, sum#28]
Keys [3]: [ca_county#26, d_qoy#24, d_year#23]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#17))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#17))#14]
Results [2]: [ca_county#26, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#17))#14,17,2) AS store_sales#29]

(31) BroadcastExchange
Input [2]: [ca_county#26, store_sales#29]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=5]

(32) BroadcastHashJoin [codegen id : 42]
Left keys [1]: [ca_county#11]
Right keys [1]: [ca_county#26]
Join type: Inner
Join condition: None

(33) Project [codegen id : 42]
Output [3]: [ca_county#11, store_sales#15, store_sales#29]
Input [4]: [ca_county#11, store_sales#15, ca_county#26, store_sales#29]

(34) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_addr_sk#30, ss_ext_sales_price#31, ss_sold_date_sk#32]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#32), dynamicpruningexpression(ss_sold_date_sk#32 IN dynamicpruning#33)]
PushedFilters: [IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>

(35) ColumnarToRow [codegen id : 15]
Input [3]: [ss_addr_sk#30, ss_ext_sales_price#31, ss_sold_date_sk#32]

(36) Filter [codegen id : 15]
Input [3]: [ss_addr_sk#30, ss_ext_sales_price#31, ss_sold_date_sk#32]
Condition : (isnotnull(ss_addr_sk#30) AND might_contain(ReusedSubquery Subquery scalar-subquery#20, [id=#21], xxhash64(ss_addr_sk#30, 42), false))

(37) ReusedExchange [Reuses operator id: 133]
Output [3]: [d_date_sk#34, d_year#35, d_qoy#36]

(38) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [ss_sold_date_sk#32]
Right keys [1]: [d_date_sk#34]
Join type: Inner
Join condition: None

(39) Project [codegen id : 15]
Output [4]: [ss_addr_sk#30, ss_ext_sales_price#31, d_year#35, d_qoy#36]
Input [6]: [ss_addr_sk#30, ss_ext_sales_price#31, ss_sold_date_sk#32, d_date_sk#34, d_year#35, d_qoy#36]

(40) Exchange
Input [4]: [ss_addr_sk#30, ss_ext_sales_price#31, d_year#35, d_qoy#36]
Arguments: hashpartitioning(ss_addr_sk#30, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(41) Sort [codegen id : 16]
Input [4]: [ss_addr_sk#30, ss_ext_sales_price#31, d_year#35, d_qoy#36]
Arguments: [ss_addr_sk#30 ASC NULLS FIRST], false, 0

(42) ReusedExchange [Reuses operator id: 111]
Output [2]: [ca_address_sk#37, ca_county#38]

(43) Sort [codegen id : 18]
Input [2]: [ca_address_sk#37, ca_county#38]
Arguments: [ca_address_sk#37 ASC NULLS FIRST], false, 0

(44) SortMergeJoin [codegen id : 19]
Left keys [1]: [ss_addr_sk#30]
Right keys [1]: [ca_address_sk#37]
Join type: Inner
Join condition: None

(45) Project [codegen id : 19]
Output [4]: [ss_ext_sales_price#31, d_year#35, d_qoy#36, ca_county#38]
Input [6]: [ss_addr_sk#30, ss_ext_sales_price#31, d_year#35, d_qoy#36, ca_address_sk#37, ca_county#38]

(46) HashAggregate [codegen id : 19]
Input [4]: [ss_ext_sales_price#31, d_year#35, d_qoy#36, ca_county#38]
Keys [3]: [ca_county#38, d_qoy#36, d_year#35]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#31))]
Aggregate Attributes [1]: [sum#39]
Results [4]: [ca_county#38, d_qoy#36, d_year#35, sum#40]

(47) Exchange
Input [4]: [ca_county#38, d_qoy#36, d_year#35, sum#40]
Arguments: hashpartitioning(ca_county#38, d_qoy#36, d_year#35, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(48) HashAggregate [codegen id : 20]
Input [4]: [ca_county#38, d_qoy#36, d_year#35, sum#40]
Keys [3]: [ca_county#38, d_qoy#36, d_year#35]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#31))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#31))#14]
Results [3]: [ca_county#38, d_year#35, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#31))#14,17,2) AS store_sales#41]

(49) BroadcastExchange
Input [3]: [ca_county#38, d_year#35, store_sales#41]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=8]

(50) BroadcastHashJoin [codegen id : 42]
Left keys [1]: [ca_county#11]
Right keys [1]: [ca_county#38]
Join type: Inner
Join condition: None

(51) Project [codegen id : 42]
Output [5]: [store_sales#15, store_sales#29, ca_county#38, d_year#35, store_sales#41]
Input [6]: [ca_county#11, store_sales#15, store_sales#29, ca_county#38, d_year#35, store_sales#41]

(52) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_bill_addr_sk#42, ws_ext_sales_price#43, ws_sold_date_sk#44]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#44), dynamicpruningexpression(ws_sold_date_sk#44 IN dynamicpruning#33)]
PushedFilters: [IsNotNull(ws_bill_addr_sk)]
ReadSchema: struct<ws_bill_addr_sk:int,ws_ext_sales_price:decimal(7,2)>

(53) ColumnarToRow [codegen id : 22]
Input [3]: [ws_bill_addr_sk#42, ws_ext_sales_price#43, ws_sold_date_sk#44]

(54) Filter [codegen id : 22]
Input [3]: [ws_bill_addr_sk#42, ws_ext_sales_price#43, ws_sold_date_sk#44]
Condition : (isnotnull(ws_bill_addr_sk#42) AND might_contain(ReusedSubquery Subquery scalar-subquery#20, [id=#21], xxhash64(ws_bill_addr_sk#42, 42), false))

(55) ReusedExchange [Reuses operator id: 133]
Output [3]: [d_date_sk#45, d_year#46, d_qoy#47]

(56) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ws_sold_date_sk#44]
Right keys [1]: [d_date_sk#45]
Join type: Inner
Join condition: None

(57) Project [codegen id : 22]
Output [4]: [ws_bill_addr_sk#42, ws_ext_sales_price#43, d_year#46, d_qoy#47]
Input [6]: [ws_bill_addr_sk#42, ws_ext_sales_price#43, ws_sold_date_sk#44, d_date_sk#45, d_year#46, d_qoy#47]

(58) Exchange
Input [4]: [ws_bill_addr_sk#42, ws_ext_sales_price#43, d_year#46, d_qoy#47]
Arguments: hashpartitioning(ws_bill_addr_sk#42, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(59) Sort [codegen id : 23]
Input [4]: [ws_bill_addr_sk#42, ws_ext_sales_price#43, d_year#46, d_qoy#47]
Arguments: [ws_bill_addr_sk#42 ASC NULLS FIRST], false, 0

(60) ReusedExchange [Reuses operator id: 111]
Output [2]: [ca_address_sk#48, ca_county#49]

(61) Sort [codegen id : 25]
Input [2]: [ca_address_sk#48, ca_county#49]
Arguments: [ca_address_sk#48 ASC NULLS FIRST], false, 0

(62) SortMergeJoin [codegen id : 26]
Left keys [1]: [ws_bill_addr_sk#42]
Right keys [1]: [ca_address_sk#48]
Join type: Inner
Join condition: None

(63) Project [codegen id : 26]
Output [4]: [ws_ext_sales_price#43, d_year#46, d_qoy#47, ca_county#49]
Input [6]: [ws_bill_addr_sk#42, ws_ext_sales_price#43, d_year#46, d_qoy#47, ca_address_sk#48, ca_county#49]

(64) HashAggregate [codegen id : 26]
Input [4]: [ws_ext_sales_price#43, d_year#46, d_qoy#47, ca_county#49]
Keys [3]: [ca_county#49, d_qoy#47, d_year#46]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#43))]
Aggregate Attributes [1]: [sum#50]
Results [4]: [ca_county#49, d_qoy#47, d_year#46, sum#51]

(65) Exchange
Input [4]: [ca_county#49, d_qoy#47, d_year#46, sum#51]
Arguments: hashpartitioning(ca_county#49, d_qoy#47, d_year#46, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(66) HashAggregate [codegen id : 41]
Input [4]: [ca_county#49, d_qoy#47, d_year#46, sum#51]
Keys [3]: [ca_county#49, d_qoy#47, d_year#46]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#43))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#43))#52]
Results [2]: [ca_county#49, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#43))#52,17,2) AS web_sales#53]

(67) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_bill_addr_sk#54, ws_ext_sales_price#55, ws_sold_date_sk#56]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#56), dynamicpruningexpression(ws_sold_date_sk#56 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_bill_addr_sk)]
ReadSchema: struct<ws_bill_addr_sk:int,ws_ext_sales_price:decimal(7,2)>

(68) ColumnarToRow [codegen id : 28]
Input [3]: [ws_bill_addr_sk#54, ws_ext_sales_price#55, ws_sold_date_sk#56]

(69) Filter [codegen id : 28]
Input [3]: [ws_bill_addr_sk#54, ws_ext_sales_price#55, ws_sold_date_sk#56]
Condition : (isnotnull(ws_bill_addr_sk#54) AND might_contain(ReusedSubquery Subquery scalar-subquery#20, [id=#21], xxhash64(ws_bill_addr_sk#54, 42), false))

(70) ReusedExchange [Reuses operator id: 118]
Output [3]: [d_date_sk#57, d_year#58, d_qoy#59]

(71) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [ws_sold_date_sk#56]
Right keys [1]: [d_date_sk#57]
Join type: Inner
Join condition: None

(72) Project [codegen id : 28]
Output [4]: [ws_bill_addr_sk#54, ws_ext_sales_price#55, d_year#58, d_qoy#59]
Input [6]: [ws_bill_addr_sk#54, ws_ext_sales_price#55, ws_sold_date_sk#56, d_date_sk#57, d_year#58, d_qoy#59]

(73) Exchange
Input [4]: [ws_bill_addr_sk#54, ws_ext_sales_price#55, d_year#58, d_qoy#59]
Arguments: hashpartitioning(ws_bill_addr_sk#54, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(74) Sort [codegen id : 29]
Input [4]: [ws_bill_addr_sk#54, ws_ext_sales_price#55, d_year#58, d_qoy#59]
Arguments: [ws_bill_addr_sk#54 ASC NULLS FIRST], false, 0

(75) ReusedExchange [Reuses operator id: 111]
Output [2]: [ca_address_sk#60, ca_county#61]

(76) Sort [codegen id : 31]
Input [2]: [ca_address_sk#60, ca_county#61]
Arguments: [ca_address_sk#60 ASC NULLS FIRST], false, 0

(77) SortMergeJoin [codegen id : 32]
Left keys [1]: [ws_bill_addr_sk#54]
Right keys [1]: [ca_address_sk#60]
Join type: Inner
Join condition: None

(78) Project [codegen id : 32]
Output [4]: [ws_ext_sales_price#55, d_year#58, d_qoy#59, ca_county#61]
Input [6]: [ws_bill_addr_sk#54, ws_ext_sales_price#55, d_year#58, d_qoy#59, ca_address_sk#60, ca_county#61]

(79) HashAggregate [codegen id : 32]
Input [4]: [ws_ext_sales_price#55, d_year#58, d_qoy#59, ca_county#61]
Keys [3]: [ca_county#61, d_qoy#59, d_year#58]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#55))]
Aggregate Attributes [1]: [sum#62]
Results [4]: [ca_county#61, d_qoy#59, d_year#58, sum#63]

(80) Exchange
Input [4]: [ca_county#61, d_qoy#59, d_year#58, sum#63]
Arguments: hashpartitioning(ca_county#61, d_qoy#59, d_year#58, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(81) HashAggregate [codegen id : 33]
Input [4]: [ca_county#61, d_qoy#59, d_year#58, sum#63]
Keys [3]: [ca_county#61, d_qoy#59, d_year#58]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#55))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#55))#52]
Results [2]: [ca_county#61, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#55))#52,17,2) AS web_sales#64]

(82) BroadcastExchange
Input [2]: [ca_county#61, web_sales#64]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=13]

(83) BroadcastHashJoin [codegen id : 41]
Left keys [1]: [ca_county#49]
Right keys [1]: [ca_county#61]
Join type: Inner
Join condition: None

(84) Project [codegen id : 41]
Output [3]: [ca_county#49, web_sales#53, web_sales#64]
Input [4]: [ca_county#49, web_sales#53, ca_county#61, web_sales#64]

(85) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_bill_addr_sk#65, ws_ext_sales_price#66, ws_sold_date_sk#67]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#67), dynamicpruningexpression(ws_sold_date_sk#67 IN dynamicpruning#19)]
PushedFilters: [IsNotNull(ws_bill_addr_sk)]
ReadSchema: struct<ws_bill_addr_sk:int,ws_ext_sales_price:decimal(7,2)>

(86) ColumnarToRow [codegen id : 35]
Input [3]: [ws_bill_addr_sk#65, ws_ext_sales_price#66, ws_sold_date_sk#67]

(87) Filter [codegen id : 35]
Input [3]: [ws_bill_addr_sk#65, ws_ext_sales_price#66, ws_sold_date_sk#67]
Condition : (isnotnull(ws_bill_addr_sk#65) AND might_contain(ReusedSubquery Subquery scalar-subquery#20, [id=#21], xxhash64(ws_bill_addr_sk#65, 42), false))

(88) ReusedExchange [Reuses operator id: 129]
Output [3]: [d_date_sk#68, d_year#69, d_qoy#70]

(89) BroadcastHashJoin [codegen id : 35]
Left keys [1]: [ws_sold_date_sk#67]
Right keys [1]: [d_date_sk#68]
Join type: Inner
Join condition: None

(90) Project [codegen id : 35]
Output [4]: [ws_bill_addr_sk#65, ws_ext_sales_price#66, d_year#69, d_qoy#70]
Input [6]: [ws_bill_addr_sk#65, ws_ext_sales_price#66, ws_sold_date_sk#67, d_date_sk#68, d_year#69, d_qoy#70]

(91) Exchange
Input [4]: [ws_bill_addr_sk#65, ws_ext_sales_price#66, d_year#69, d_qoy#70]
Arguments: hashpartitioning(ws_bill_addr_sk#65, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(92) Sort [codegen id : 36]
Input [4]: [ws_bill_addr_sk#65, ws_ext_sales_price#66, d_year#69, d_qoy#70]
Arguments: [ws_bill_addr_sk#65 ASC NULLS FIRST], false, 0

(93) ReusedExchange [Reuses operator id: 111]
Output [2]: [ca_address_sk#71, ca_county#72]

(94) Sort [codegen id : 38]
Input [2]: [ca_address_sk#71, ca_county#72]
Arguments: [ca_address_sk#71 ASC NULLS FIRST], false, 0

(95) SortMergeJoin [codegen id : 39]
Left keys [1]: [ws_bill_addr_sk#65]
Right keys [1]: [ca_address_sk#71]
Join type: Inner
Join condition: None

(96) Project [codegen id : 39]
Output [4]: [ws_ext_sales_price#66, d_year#69, d_qoy#70, ca_county#72]
Input [6]: [ws_bill_addr_sk#65, ws_ext_sales_price#66, d_year#69, d_qoy#70, ca_address_sk#71, ca_county#72]

(97) HashAggregate [codegen id : 39]
Input [4]: [ws_ext_sales_price#66, d_year#69, d_qoy#70, ca_county#72]
Keys [3]: [ca_county#72, d_qoy#70, d_year#69]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#66))]
Aggregate Attributes [1]: [sum#73]
Results [4]: [ca_county#72, d_qoy#70, d_year#69, sum#74]

(98) Exchange
Input [4]: [ca_county#72, d_qoy#70, d_year#69, sum#74]
Arguments: hashpartitioning(ca_county#72, d_qoy#70, d_year#69, 5), ENSURE_REQUIREMENTS, [plan_id=15]

(99) HashAggregate [codegen id : 40]
Input [4]: [ca_county#72, d_qoy#70, d_year#69, sum#74]
Keys [3]: [ca_county#72, d_qoy#70, d_year#69]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#66))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#66))#52]
Results [2]: [ca_county#72, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#66))#52,17,2) AS web_sales#75]

(100) BroadcastExchange
Input [2]: [ca_county#72, web_sales#75]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=16]

(101) BroadcastHashJoin [codegen id : 41]
Left keys [1]: [ca_county#49]
Right keys [1]: [ca_county#72]
Join type: Inner
Join condition: None

(102) Project [codegen id : 41]
Output [4]: [ca_county#49, web_sales#53, web_sales#64, web_sales#75]
Input [5]: [ca_county#49, web_sales#53, web_sales#64, ca_county#72, web_sales#75]

(103) BroadcastExchange
Input [4]: [ca_county#49, web_sales#53, web_sales#64, web_sales#75]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=17]

(104) BroadcastHashJoin [codegen id : 42]
Left keys [1]: [ca_county#38]
Right keys [1]: [ca_county#49]
Join type: Inner
Join condition: ((CASE WHEN (web_sales#53 > 0.00) THEN (web_sales#64 / web_sales#53) END > CASE WHEN (store_sales#41 > 0.00) THEN (store_sales#15 / store_sales#41) END) AND (CASE WHEN (web_sales#64 > 0.00) THEN (web_sales#75 / web_sales#64) END > CASE WHEN (store_sales#15 > 0.00) THEN (store_sales#29 / store_sales#15) END))

(105) Project [codegen id : 42]
Output [6]: [ca_county#38, d_year#35, (web_sales#64 / web_sales#53) AS web_q1_q2_increase#76, (store_sales#15 / store_sales#41) AS store_q1_q2_increase#77, (web_sales#75 / web_sales#64) AS web_q2_q3_increase#78, (store_sales#29 / store_sales#15) AS store_q2_q3_increase#79]
Input [9]: [store_sales#15, store_sales#29, ca_county#38, d_year#35, store_sales#41, ca_county#49, web_sales#53, web_sales#64, web_sales#75]

(106) Exchange
Input [6]: [ca_county#38, d_year#35, web_q1_q2_increase#76, store_q1_q2_increase#77, web_q2_q3_increase#78, store_q2_q3_increase#79]
Arguments: rangepartitioning(ca_county#38 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [plan_id=18]

(107) Sort [codegen id : 43]
Input [6]: [ca_county#38, d_year#35, web_q1_q2_increase#76, store_q1_q2_increase#77, web_q2_q3_increase#78, store_q2_q3_increase#79]
Arguments: [ca_county#38 ASC NULLS FIRST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#5, [id=#6]
ObjectHashAggregate (114)
+- Exchange (113)
   +- ObjectHashAggregate (112)
      +- Exchange (111)
         +- * Filter (110)
            +- * ColumnarToRow (109)
               +- Scan parquet spark_catalog.default.customer_address (108)


(108) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#10, ca_county#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(109) ColumnarToRow [codegen id : 1]
Input [2]: [ca_address_sk#10, ca_county#11]

(110) Filter [codegen id : 1]
Input [2]: [ca_address_sk#10, ca_county#11]
Condition : (isnotnull(ca_address_sk#10) AND isnotnull(ca_county#11))

(111) Exchange
Input [2]: [ca_address_sk#10, ca_county#11]
Arguments: hashpartitioning(ca_address_sk#10, 5), ENSURE_REQUIREMENTS, [plan_id=19]

(112) ObjectHashAggregate
Input [2]: [ca_address_sk#10, ca_county#11]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(ca_address_sk#10, 42), 969973, 7759784, 0, 0)]
Aggregate Attributes [1]: [buf#80]
Results [1]: [buf#81]

(113) Exchange
Input [1]: [buf#81]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=20]

(114) ObjectHashAggregate
Input [1]: [buf#81]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(ca_address_sk#10, 42), 969973, 7759784, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(ca_address_sk#10, 42), 969973, 7759784, 0, 0)#82]
Results [1]: [bloom_filter_agg(xxhash64(ca_address_sk#10, 42), 969973, 7759784, 0, 0)#82 AS bloomFilter#83]

Subquery:2 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (118)
+- * Filter (117)
   +- * ColumnarToRow (116)
      +- Scan parquet spark_catalog.default.date_dim (115)


(115) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#7, d_year#8, d_qoy#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(116) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#7, d_year#8, d_qoy#9]

(117) Filter [codegen id : 1]
Input [3]: [d_date_sk#7, d_year#8, d_qoy#9]
Condition : ((((isnotnull(d_qoy#9) AND isnotnull(d_year#8)) AND (d_qoy#9 = 2)) AND (d_year#8 = 2000)) AND isnotnull(d_date_sk#7))

(118) BroadcastExchange
Input [3]: [d_date_sk#7, d_year#8, d_qoy#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=21]

Subquery:3 Hosting operator id = 18 Hosting Expression = Subquery scalar-subquery#20, [id=#21]
ObjectHashAggregate (125)
+- Exchange (124)
   +- ObjectHashAggregate (123)
      +- Exchange (122)
         +- * Filter (121)
            +- * ColumnarToRow (120)
               +- Scan parquet spark_catalog.default.customer_address (119)


(119) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#25, ca_county#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(120) ColumnarToRow [codegen id : 1]
Input [2]: [ca_address_sk#25, ca_county#26]

(121) Filter [codegen id : 1]
Input [2]: [ca_address_sk#25, ca_county#26]
Condition : (isnotnull(ca_address_sk#25) AND isnotnull(ca_county#26))

(122) Exchange
Input [2]: [ca_address_sk#25, ca_county#26]
Arguments: hashpartitioning(ca_address_sk#10, 5), ENSURE_REQUIREMENTS, [plan_id=22]

(123) ObjectHashAggregate
Input [2]: [ca_address_sk#25, ca_county#26]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(ca_address_sk#25, 42), 969973, 7759784, 0, 0)]
Aggregate Attributes [1]: [buf#84]
Results [1]: [buf#85]

(124) Exchange
Input [1]: [buf#85]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=23]

(125) ObjectHashAggregate
Input [1]: [buf#85]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(ca_address_sk#25, 42), 969973, 7759784, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(ca_address_sk#25, 42), 969973, 7759784, 0, 0)#86]
Results [1]: [bloom_filter_agg(xxhash64(ca_address_sk#25, 42), 969973, 7759784, 0, 0)#86 AS bloomFilter#87]

Subquery:4 Hosting operator id = 16 Hosting Expression = ss_sold_date_sk#18 IN dynamicpruning#19
BroadcastExchange (129)
+- * Filter (128)
   +- * ColumnarToRow (127)
      +- Scan parquet spark_catalog.default.date_dim (126)


(126) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#22, d_year#23, d_qoy#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,3), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(127) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#22, d_year#23, d_qoy#24]

(128) Filter [codegen id : 1]
Input [3]: [d_date_sk#22, d_year#23, d_qoy#24]
Condition : ((((isnotnull(d_qoy#24) AND isnotnull(d_year#23)) AND (d_qoy#24 = 3)) AND (d_year#23 = 2000)) AND isnotnull(d_date_sk#22))

(129) BroadcastExchange
Input [3]: [d_date_sk#22, d_year#23, d_qoy#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=24]

Subquery:5 Hosting operator id = 36 Hosting Expression = ReusedSubquery Subquery scalar-subquery#20, [id=#21]

Subquery:6 Hosting operator id = 34 Hosting Expression = ss_sold_date_sk#32 IN dynamicpruning#33
BroadcastExchange (133)
+- * Filter (132)
   +- * ColumnarToRow (131)
      +- Scan parquet spark_catalog.default.date_dim (130)


(130) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#34, d_year#35, d_qoy#36]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,1), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(131) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#34, d_year#35, d_qoy#36]

(132) Filter [codegen id : 1]
Input [3]: [d_date_sk#34, d_year#35, d_qoy#36]
Condition : ((((isnotnull(d_qoy#36) AND isnotnull(d_year#35)) AND (d_qoy#36 = 1)) AND (d_year#35 = 2000)) AND isnotnull(d_date_sk#34))

(133) BroadcastExchange
Input [3]: [d_date_sk#34, d_year#35, d_qoy#36]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=25]

Subquery:7 Hosting operator id = 54 Hosting Expression = ReusedSubquery Subquery scalar-subquery#20, [id=#21]

Subquery:8 Hosting operator id = 52 Hosting Expression = ws_sold_date_sk#44 IN dynamicpruning#33

Subquery:9 Hosting operator id = 69 Hosting Expression = ReusedSubquery Subquery scalar-subquery#20, [id=#21]

Subquery:10 Hosting operator id = 67 Hosting Expression = ws_sold_date_sk#56 IN dynamicpruning#4

Subquery:11 Hosting operator id = 87 Hosting Expression = ReusedSubquery Subquery scalar-subquery#20, [id=#21]

Subquery:12 Hosting operator id = 85 Hosting Expression = ws_sold_date_sk#67 IN dynamicpruning#19


