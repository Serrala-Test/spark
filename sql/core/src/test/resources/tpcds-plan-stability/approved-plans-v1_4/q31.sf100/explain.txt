== Physical Plan ==
* Sort (118)
+- Exchange (117)
   +- * Project (116)
      +- * SortMergeJoin Inner (115)
         :- * Project (97)
         :  +- * SortMergeJoin Inner (96)
         :     :- * SortMergeJoin Inner (78)
         :     :  :- * Project (57)
         :     :  :  +- * SortMergeJoin Inner (56)
         :     :  :     :- * SortMergeJoin Inner (38)
         :     :  :     :  :- * Sort (20)
         :     :  :     :  :  +- Exchange (19)
         :     :  :     :  :     +- * HashAggregate (18)
         :     :  :     :  :        +- Exchange (17)
         :     :  :     :  :           +- * HashAggregate (16)
         :     :  :     :  :              +- * Project (15)
         :     :  :     :  :                 +- * BroadcastHashJoin Inner BuildLeft (14)
         :     :  :     :  :                    :- BroadcastExchange (10)
         :     :  :     :  :                    :  +- * Project (9)
         :     :  :     :  :                    :     +- * BroadcastHashJoin Inner BuildLeft (8)
         :     :  :     :  :                    :        :- BroadcastExchange (4)
         :     :  :     :  :                    :        :  +- * Filter (3)
         :     :  :     :  :                    :        :     +- * ColumnarToRow (2)
         :     :  :     :  :                    :        :        +- Scan parquet default.store_sales (1)
         :     :  :     :  :                    :        +- * Filter (7)
         :     :  :     :  :                    :           +- * ColumnarToRow (6)
         :     :  :     :  :                    :              +- Scan parquet default.date_dim (5)
         :     :  :     :  :                    +- * Filter (13)
         :     :  :     :  :                       +- * ColumnarToRow (12)
         :     :  :     :  :                          +- Scan parquet default.customer_address (11)
         :     :  :     :  +- * Sort (37)
         :     :  :     :     +- Exchange (36)
         :     :  :     :        +- * HashAggregate (35)
         :     :  :     :           +- Exchange (34)
         :     :  :     :              +- * HashAggregate (33)
         :     :  :     :                 +- * Project (32)
         :     :  :     :                    +- * BroadcastHashJoin Inner BuildLeft (31)
         :     :  :     :                       :- BroadcastExchange (27)
         :     :  :     :                       :  +- * Project (26)
         :     :  :     :                       :     +- * BroadcastHashJoin Inner BuildLeft (25)
         :     :  :     :                       :        :- ReusedExchange (21)
         :     :  :     :                       :        +- * Filter (24)
         :     :  :     :                       :           +- * ColumnarToRow (23)
         :     :  :     :                       :              +- Scan parquet default.date_dim (22)
         :     :  :     :                       +- * Filter (30)
         :     :  :     :                          +- * ColumnarToRow (29)
         :     :  :     :                             +- Scan parquet default.customer_address (28)
         :     :  :     +- * Sort (55)
         :     :  :        +- Exchange (54)
         :     :  :           +- * HashAggregate (53)
         :     :  :              +- Exchange (52)
         :     :  :                 +- * HashAggregate (51)
         :     :  :                    +- * Project (50)
         :     :  :                       +- * BroadcastHashJoin Inner BuildLeft (49)
         :     :  :                          :- BroadcastExchange (45)
         :     :  :                          :  +- * Project (44)
         :     :  :                          :     +- * BroadcastHashJoin Inner BuildLeft (43)
         :     :  :                          :        :- ReusedExchange (39)
         :     :  :                          :        +- * Filter (42)
         :     :  :                          :           +- * ColumnarToRow (41)
         :     :  :                          :              +- Scan parquet default.date_dim (40)
         :     :  :                          +- * Filter (48)
         :     :  :                             +- * ColumnarToRow (47)
         :     :  :                                +- Scan parquet default.customer_address (46)
         :     :  +- * Sort (77)
         :     :     +- Exchange (76)
         :     :        +- * HashAggregate (75)
         :     :           +- Exchange (74)
         :     :              +- * HashAggregate (73)
         :     :                 +- * Project (72)
         :     :                    +- * BroadcastHashJoin Inner BuildLeft (71)
         :     :                       :- BroadcastExchange (67)
         :     :                       :  +- * Project (66)
         :     :                       :     +- * BroadcastHashJoin Inner BuildLeft (65)
         :     :                       :        :- BroadcastExchange (61)
         :     :                       :        :  +- * Filter (60)
         :     :                       :        :     +- * ColumnarToRow (59)
         :     :                       :        :        +- Scan parquet default.web_sales (58)
         :     :                       :        +- * Filter (64)
         :     :                       :           +- * ColumnarToRow (63)
         :     :                       :              +- Scan parquet default.date_dim (62)
         :     :                       +- * Filter (70)
         :     :                          +- * ColumnarToRow (69)
         :     :                             +- Scan parquet default.customer_address (68)
         :     +- * Sort (95)
         :        +- Exchange (94)
         :           +- * HashAggregate (93)
         :              +- Exchange (92)
         :                 +- * HashAggregate (91)
         :                    +- * Project (90)
         :                       +- * BroadcastHashJoin Inner BuildLeft (89)
         :                          :- BroadcastExchange (85)
         :                          :  +- * Project (84)
         :                          :     +- * BroadcastHashJoin Inner BuildLeft (83)
         :                          :        :- ReusedExchange (79)
         :                          :        +- * Filter (82)
         :                          :           +- * ColumnarToRow (81)
         :                          :              +- Scan parquet default.date_dim (80)
         :                          +- * Filter (88)
         :                             +- * ColumnarToRow (87)
         :                                +- Scan parquet default.customer_address (86)
         +- * Sort (114)
            +- Exchange (113)
               +- * HashAggregate (112)
                  +- Exchange (111)
                     +- * HashAggregate (110)
                        +- * Project (109)
                           +- * BroadcastHashJoin Inner BuildLeft (108)
                              :- BroadcastExchange (104)
                              :  +- * Project (103)
                              :     +- * BroadcastHashJoin Inner BuildLeft (102)
                              :        :- ReusedExchange (98)
                              :        +- * Filter (101)
                              :           +- * ColumnarToRow (100)
                              :              +- Scan parquet default.date_dim (99)
                              +- * Filter (107)
                                 +- * ColumnarToRow (106)
                                    +- Scan parquet default.customer_address (105)


(1) Scan parquet default.store_sales
Output [3]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]

(3) Filter [codegen id : 1]
Input [3]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_addr_sk#1)

(4) BroadcastExchange
Input [3]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#4]

(5) Scan parquet default.date_dim
Output [3]: [d_date_sk#5, d_year#6, d_qoy#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,1), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(6) ColumnarToRow
Input [3]: [d_date_sk#5, d_year#6, d_qoy#7]

(7) Filter
Input [3]: [d_date_sk#5, d_year#6, d_qoy#7]
Condition : ((((isnotnull(d_qoy#7) AND isnotnull(d_year#6)) AND (d_qoy#7 = 1)) AND (d_year#6 = 2000)) AND isnotnull(d_date_sk#5))

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join condition: None

(9) Project [codegen id : 2]
Output [4]: [ss_addr_sk#1, ss_ext_sales_price#2, d_year#6, d_qoy#7]
Input [6]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3, d_date_sk#5, d_year#6, d_qoy#7]

(10) BroadcastExchange
Input [4]: [ss_addr_sk#1, ss_ext_sales_price#2, d_year#6, d_qoy#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8]

(11) Scan parquet default.customer_address
Output [2]: [ca_address_sk#9, ca_county#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(12) ColumnarToRow
Input [2]: [ca_address_sk#9, ca_county#10]

(13) Filter
Input [2]: [ca_address_sk#9, ca_county#10]
Condition : (isnotnull(ca_address_sk#9) AND isnotnull(ca_county#10))

(14) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_addr_sk#1]
Right keys [1]: [ca_address_sk#9]
Join condition: None

(15) Project [codegen id : 3]
Output [4]: [ss_ext_sales_price#2, d_year#6, d_qoy#7, ca_county#10]
Input [6]: [ss_addr_sk#1, ss_ext_sales_price#2, d_year#6, d_qoy#7, ca_address_sk#9, ca_county#10]

(16) HashAggregate [codegen id : 3]
Input [4]: [ss_ext_sales_price#2, d_year#6, d_qoy#7, ca_county#10]
Keys [3]: [ca_county#10, d_qoy#7, d_year#6]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum#11]
Results [4]: [ca_county#10, d_qoy#7, d_year#6, sum#12]

(17) Exchange
Input [4]: [ca_county#10, d_qoy#7, d_year#6, sum#12]
Arguments: hashpartitioning(ca_county#10, d_qoy#7, d_year#6, 5), ENSURE_REQUIREMENTS, [id=#13]

(18) HashAggregate [codegen id : 4]
Input [4]: [ca_county#10, d_qoy#7, d_year#6, sum#12]
Keys [3]: [ca_county#10, d_qoy#7, d_year#6]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#2))#14]
Results [3]: [ca_county#10, d_year#6, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#14,17,2) AS store_sales#15]

(19) Exchange
Input [3]: [ca_county#10, d_year#6, store_sales#15]
Arguments: hashpartitioning(ca_county#10, 5), ENSURE_REQUIREMENTS, [id=#16]

(20) Sort [codegen id : 5]
Input [3]: [ca_county#10, d_year#6, store_sales#15]
Arguments: [ca_county#10 ASC NULLS FIRST], false, 0

(21) ReusedExchange [Reuses operator id: 4]
Output [3]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]

(22) Scan parquet default.date_dim
Output [3]: [d_date_sk#17, d_year#18, d_qoy#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(23) ColumnarToRow
Input [3]: [d_date_sk#17, d_year#18, d_qoy#19]

(24) Filter
Input [3]: [d_date_sk#17, d_year#18, d_qoy#19]
Condition : ((((isnotnull(d_qoy#19) AND isnotnull(d_year#18)) AND (d_qoy#19 = 2)) AND (d_year#18 = 2000)) AND isnotnull(d_date_sk#17))

(25) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#17]
Join condition: None

(26) Project [codegen id : 7]
Output [4]: [ss_addr_sk#1, ss_ext_sales_price#2, d_year#18, d_qoy#19]
Input [6]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3, d_date_sk#17, d_year#18, d_qoy#19]

(27) BroadcastExchange
Input [4]: [ss_addr_sk#1, ss_ext_sales_price#2, d_year#18, d_qoy#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#20]

(28) Scan parquet default.customer_address
Output [2]: [ca_address_sk#21, ca_county#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(29) ColumnarToRow
Input [2]: [ca_address_sk#21, ca_county#22]

(30) Filter
Input [2]: [ca_address_sk#21, ca_county#22]
Condition : (isnotnull(ca_address_sk#21) AND isnotnull(ca_county#22))

(31) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_addr_sk#1]
Right keys [1]: [ca_address_sk#21]
Join condition: None

(32) Project [codegen id : 8]
Output [4]: [ss_ext_sales_price#2, d_year#18, d_qoy#19, ca_county#22]
Input [6]: [ss_addr_sk#1, ss_ext_sales_price#2, d_year#18, d_qoy#19, ca_address_sk#21, ca_county#22]

(33) HashAggregate [codegen id : 8]
Input [4]: [ss_ext_sales_price#2, d_year#18, d_qoy#19, ca_county#22]
Keys [3]: [ca_county#22, d_qoy#19, d_year#18]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum#23]
Results [4]: [ca_county#22, d_qoy#19, d_year#18, sum#24]

(34) Exchange
Input [4]: [ca_county#22, d_qoy#19, d_year#18, sum#24]
Arguments: hashpartitioning(ca_county#22, d_qoy#19, d_year#18, 5), ENSURE_REQUIREMENTS, [id=#25]

(35) HashAggregate [codegen id : 9]
Input [4]: [ca_county#22, d_qoy#19, d_year#18, sum#24]
Keys [3]: [ca_county#22, d_qoy#19, d_year#18]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#2))#26]
Results [2]: [ca_county#22, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#26,17,2) AS store_sales#27]

(36) Exchange
Input [2]: [ca_county#22, store_sales#27]
Arguments: hashpartitioning(ca_county#22, 5), ENSURE_REQUIREMENTS, [id=#28]

(37) Sort [codegen id : 10]
Input [2]: [ca_county#22, store_sales#27]
Arguments: [ca_county#22 ASC NULLS FIRST], false, 0

(38) SortMergeJoin [codegen id : 11]
Left keys [1]: [ca_county#10]
Right keys [1]: [ca_county#22]
Join condition: None

(39) ReusedExchange [Reuses operator id: 4]
Output [3]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]

(40) Scan parquet default.date_dim
Output [3]: [d_date_sk#29, d_year#30, d_qoy#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,3), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(41) ColumnarToRow
Input [3]: [d_date_sk#29, d_year#30, d_qoy#31]

(42) Filter
Input [3]: [d_date_sk#29, d_year#30, d_qoy#31]
Condition : ((((isnotnull(d_qoy#31) AND isnotnull(d_year#30)) AND (d_qoy#31 = 3)) AND (d_year#30 = 2000)) AND isnotnull(d_date_sk#29))

(43) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#29]
Join condition: None

(44) Project [codegen id : 13]
Output [4]: [ss_addr_sk#1, ss_ext_sales_price#2, d_year#30, d_qoy#31]
Input [6]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3, d_date_sk#29, d_year#30, d_qoy#31]

(45) BroadcastExchange
Input [4]: [ss_addr_sk#1, ss_ext_sales_price#2, d_year#30, d_qoy#31]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#32]

(46) Scan parquet default.customer_address
Output [2]: [ca_address_sk#33, ca_county#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(47) ColumnarToRow
Input [2]: [ca_address_sk#33, ca_county#34]

(48) Filter
Input [2]: [ca_address_sk#33, ca_county#34]
Condition : (isnotnull(ca_address_sk#33) AND isnotnull(ca_county#34))

(49) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ss_addr_sk#1]
Right keys [1]: [ca_address_sk#33]
Join condition: None

(50) Project [codegen id : 14]
Output [4]: [ss_ext_sales_price#2, d_year#30, d_qoy#31, ca_county#34]
Input [6]: [ss_addr_sk#1, ss_ext_sales_price#2, d_year#30, d_qoy#31, ca_address_sk#33, ca_county#34]

(51) HashAggregate [codegen id : 14]
Input [4]: [ss_ext_sales_price#2, d_year#30, d_qoy#31, ca_county#34]
Keys [3]: [ca_county#34, d_qoy#31, d_year#30]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum#35]
Results [4]: [ca_county#34, d_qoy#31, d_year#30, sum#36]

(52) Exchange
Input [4]: [ca_county#34, d_qoy#31, d_year#30, sum#36]
Arguments: hashpartitioning(ca_county#34, d_qoy#31, d_year#30, 5), ENSURE_REQUIREMENTS, [id=#37]

(53) HashAggregate [codegen id : 15]
Input [4]: [ca_county#34, d_qoy#31, d_year#30, sum#36]
Keys [3]: [ca_county#34, d_qoy#31, d_year#30]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#2))#38]
Results [2]: [ca_county#34, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#38,17,2) AS store_sales#39]

(54) Exchange
Input [2]: [ca_county#34, store_sales#39]
Arguments: hashpartitioning(ca_county#34, 5), ENSURE_REQUIREMENTS, [id=#40]

(55) Sort [codegen id : 16]
Input [2]: [ca_county#34, store_sales#39]
Arguments: [ca_county#34 ASC NULLS FIRST], false, 0

(56) SortMergeJoin [codegen id : 17]
Left keys [1]: [ca_county#22]
Right keys [1]: [ca_county#34]
Join condition: None

(57) Project [codegen id : 17]
Output [5]: [ca_county#10, d_year#6, store_sales#15, store_sales#27, store_sales#39]
Input [7]: [ca_county#10, d_year#6, store_sales#15, ca_county#22, store_sales#27, ca_county#34, store_sales#39]

(58) Scan parquet default.web_sales
Output [3]: [ws_bill_addr_sk#41, ws_ext_sales_price#42, ws_sold_date_sk#43]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#43), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ws_bill_addr_sk)]
ReadSchema: struct<ws_bill_addr_sk:int,ws_ext_sales_price:decimal(7,2)>

(59) ColumnarToRow [codegen id : 18]
Input [3]: [ws_bill_addr_sk#41, ws_ext_sales_price#42, ws_sold_date_sk#43]

(60) Filter [codegen id : 18]
Input [3]: [ws_bill_addr_sk#41, ws_ext_sales_price#42, ws_sold_date_sk#43]
Condition : isnotnull(ws_bill_addr_sk#41)

(61) BroadcastExchange
Input [3]: [ws_bill_addr_sk#41, ws_ext_sales_price#42, ws_sold_date_sk#43]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, true] as bigint)),false), [id=#44]

(62) Scan parquet default.date_dim
Output [3]: [d_date_sk#45, d_year#46, d_qoy#47]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,1), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(63) ColumnarToRow
Input [3]: [d_date_sk#45, d_year#46, d_qoy#47]

(64) Filter
Input [3]: [d_date_sk#45, d_year#46, d_qoy#47]
Condition : ((((isnotnull(d_qoy#47) AND isnotnull(d_year#46)) AND (d_qoy#47 = 1)) AND (d_year#46 = 2000)) AND isnotnull(d_date_sk#45))

(65) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [ws_sold_date_sk#43]
Right keys [1]: [d_date_sk#45]
Join condition: None

(66) Project [codegen id : 19]
Output [4]: [ws_bill_addr_sk#41, ws_ext_sales_price#42, d_year#46, d_qoy#47]
Input [6]: [ws_bill_addr_sk#41, ws_ext_sales_price#42, ws_sold_date_sk#43, d_date_sk#45, d_year#46, d_qoy#47]

(67) BroadcastExchange
Input [4]: [ws_bill_addr_sk#41, ws_ext_sales_price#42, d_year#46, d_qoy#47]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#48]

(68) Scan parquet default.customer_address
Output [2]: [ca_address_sk#49, ca_county#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(69) ColumnarToRow
Input [2]: [ca_address_sk#49, ca_county#50]

(70) Filter
Input [2]: [ca_address_sk#49, ca_county#50]
Condition : (isnotnull(ca_address_sk#49) AND isnotnull(ca_county#50))

(71) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ws_bill_addr_sk#41]
Right keys [1]: [ca_address_sk#49]
Join condition: None

(72) Project [codegen id : 20]
Output [4]: [ws_ext_sales_price#42, d_year#46, d_qoy#47, ca_county#50]
Input [6]: [ws_bill_addr_sk#41, ws_ext_sales_price#42, d_year#46, d_qoy#47, ca_address_sk#49, ca_county#50]

(73) HashAggregate [codegen id : 20]
Input [4]: [ws_ext_sales_price#42, d_year#46, d_qoy#47, ca_county#50]
Keys [3]: [ca_county#50, d_qoy#47, d_year#46]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#42))]
Aggregate Attributes [1]: [sum#51]
Results [4]: [ca_county#50, d_qoy#47, d_year#46, sum#52]

(74) Exchange
Input [4]: [ca_county#50, d_qoy#47, d_year#46, sum#52]
Arguments: hashpartitioning(ca_county#50, d_qoy#47, d_year#46, 5), ENSURE_REQUIREMENTS, [id=#53]

(75) HashAggregate [codegen id : 21]
Input [4]: [ca_county#50, d_qoy#47, d_year#46, sum#52]
Keys [3]: [ca_county#50, d_qoy#47, d_year#46]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#42))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#42))#54]
Results [2]: [ca_county#50, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#42))#54,17,2) AS web_sales#55]

(76) Exchange
Input [2]: [ca_county#50, web_sales#55]
Arguments: hashpartitioning(ca_county#50, 5), ENSURE_REQUIREMENTS, [id=#56]

(77) Sort [codegen id : 22]
Input [2]: [ca_county#50, web_sales#55]
Arguments: [ca_county#50 ASC NULLS FIRST], false, 0

(78) SortMergeJoin [codegen id : 23]
Left keys [1]: [ca_county#10]
Right keys [1]: [ca_county#50]
Join condition: None

(79) ReusedExchange [Reuses operator id: 61]
Output [3]: [ws_bill_addr_sk#41, ws_ext_sales_price#42, ws_sold_date_sk#43]

(80) Scan parquet default.date_dim
Output [3]: [d_date_sk#57, d_year#58, d_qoy#59]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(81) ColumnarToRow
Input [3]: [d_date_sk#57, d_year#58, d_qoy#59]

(82) Filter
Input [3]: [d_date_sk#57, d_year#58, d_qoy#59]
Condition : ((((isnotnull(d_qoy#59) AND isnotnull(d_year#58)) AND (d_qoy#59 = 2)) AND (d_year#58 = 2000)) AND isnotnull(d_date_sk#57))

(83) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ws_sold_date_sk#43]
Right keys [1]: [d_date_sk#57]
Join condition: None

(84) Project [codegen id : 25]
Output [4]: [ws_bill_addr_sk#41, ws_ext_sales_price#42, d_year#58, d_qoy#59]
Input [6]: [ws_bill_addr_sk#41, ws_ext_sales_price#42, ws_sold_date_sk#43, d_date_sk#57, d_year#58, d_qoy#59]

(85) BroadcastExchange
Input [4]: [ws_bill_addr_sk#41, ws_ext_sales_price#42, d_year#58, d_qoy#59]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#60]

(86) Scan parquet default.customer_address
Output [2]: [ca_address_sk#61, ca_county#62]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(87) ColumnarToRow
Input [2]: [ca_address_sk#61, ca_county#62]

(88) Filter
Input [2]: [ca_address_sk#61, ca_county#62]
Condition : (isnotnull(ca_address_sk#61) AND isnotnull(ca_county#62))

(89) BroadcastHashJoin [codegen id : 26]
Left keys [1]: [ws_bill_addr_sk#41]
Right keys [1]: [ca_address_sk#61]
Join condition: None

(90) Project [codegen id : 26]
Output [4]: [ws_ext_sales_price#42, d_year#58, d_qoy#59, ca_county#62]
Input [6]: [ws_bill_addr_sk#41, ws_ext_sales_price#42, d_year#58, d_qoy#59, ca_address_sk#61, ca_county#62]

(91) HashAggregate [codegen id : 26]
Input [4]: [ws_ext_sales_price#42, d_year#58, d_qoy#59, ca_county#62]
Keys [3]: [ca_county#62, d_qoy#59, d_year#58]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#42))]
Aggregate Attributes [1]: [sum#63]
Results [4]: [ca_county#62, d_qoy#59, d_year#58, sum#64]

(92) Exchange
Input [4]: [ca_county#62, d_qoy#59, d_year#58, sum#64]
Arguments: hashpartitioning(ca_county#62, d_qoy#59, d_year#58, 5), ENSURE_REQUIREMENTS, [id=#65]

(93) HashAggregate [codegen id : 27]
Input [4]: [ca_county#62, d_qoy#59, d_year#58, sum#64]
Keys [3]: [ca_county#62, d_qoy#59, d_year#58]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#42))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#42))#66]
Results [2]: [ca_county#62, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#42))#66,17,2) AS web_sales#67]

(94) Exchange
Input [2]: [ca_county#62, web_sales#67]
Arguments: hashpartitioning(ca_county#62, 5), ENSURE_REQUIREMENTS, [id=#68]

(95) Sort [codegen id : 28]
Input [2]: [ca_county#62, web_sales#67]
Arguments: [ca_county#62 ASC NULLS FIRST], false, 0

(96) SortMergeJoin [codegen id : 29]
Left keys [1]: [ca_county#50]
Right keys [1]: [ca_county#62]
Join condition: (CASE WHEN (web_sales#55 > 0.00) THEN CheckOverflow((promote_precision(web_sales#67) / promote_precision(web_sales#55)), DecimalType(37,20), true) ELSE null END > CASE WHEN (store_sales#15 > 0.00) THEN CheckOverflow((promote_precision(store_sales#27) / promote_precision(store_sales#15)), DecimalType(37,20), true) ELSE null END)

(97) Project [codegen id : 29]
Output [8]: [ca_county#10, d_year#6, store_sales#15, store_sales#27, store_sales#39, ca_county#50, web_sales#55, web_sales#67]
Input [9]: [ca_county#10, d_year#6, store_sales#15, store_sales#27, store_sales#39, ca_county#50, web_sales#55, ca_county#62, web_sales#67]

(98) ReusedExchange [Reuses operator id: 61]
Output [3]: [ws_bill_addr_sk#41, ws_ext_sales_price#42, ws_sold_date_sk#43]

(99) Scan parquet default.date_dim
Output [3]: [d_date_sk#69, d_year#70, d_qoy#71]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,3), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(100) ColumnarToRow
Input [3]: [d_date_sk#69, d_year#70, d_qoy#71]

(101) Filter
Input [3]: [d_date_sk#69, d_year#70, d_qoy#71]
Condition : ((((isnotnull(d_qoy#71) AND isnotnull(d_year#70)) AND (d_qoy#71 = 3)) AND (d_year#70 = 2000)) AND isnotnull(d_date_sk#69))

(102) BroadcastHashJoin [codegen id : 31]
Left keys [1]: [ws_sold_date_sk#43]
Right keys [1]: [d_date_sk#69]
Join condition: None

(103) Project [codegen id : 31]
Output [4]: [ws_bill_addr_sk#41, ws_ext_sales_price#42, d_year#70, d_qoy#71]
Input [6]: [ws_bill_addr_sk#41, ws_ext_sales_price#42, ws_sold_date_sk#43, d_date_sk#69, d_year#70, d_qoy#71]

(104) BroadcastExchange
Input [4]: [ws_bill_addr_sk#41, ws_ext_sales_price#42, d_year#70, d_qoy#71]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#72]

(105) Scan parquet default.customer_address
Output [2]: [ca_address_sk#73, ca_county#74]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(106) ColumnarToRow
Input [2]: [ca_address_sk#73, ca_county#74]

(107) Filter
Input [2]: [ca_address_sk#73, ca_county#74]
Condition : (isnotnull(ca_address_sk#73) AND isnotnull(ca_county#74))

(108) BroadcastHashJoin [codegen id : 32]
Left keys [1]: [ws_bill_addr_sk#41]
Right keys [1]: [ca_address_sk#73]
Join condition: None

(109) Project [codegen id : 32]
Output [4]: [ws_ext_sales_price#42, d_year#70, d_qoy#71, ca_county#74]
Input [6]: [ws_bill_addr_sk#41, ws_ext_sales_price#42, d_year#70, d_qoy#71, ca_address_sk#73, ca_county#74]

(110) HashAggregate [codegen id : 32]
Input [4]: [ws_ext_sales_price#42, d_year#70, d_qoy#71, ca_county#74]
Keys [3]: [ca_county#74, d_qoy#71, d_year#70]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#42))]
Aggregate Attributes [1]: [sum#75]
Results [4]: [ca_county#74, d_qoy#71, d_year#70, sum#76]

(111) Exchange
Input [4]: [ca_county#74, d_qoy#71, d_year#70, sum#76]
Arguments: hashpartitioning(ca_county#74, d_qoy#71, d_year#70, 5), ENSURE_REQUIREMENTS, [id=#77]

(112) HashAggregate [codegen id : 33]
Input [4]: [ca_county#74, d_qoy#71, d_year#70, sum#76]
Keys [3]: [ca_county#74, d_qoy#71, d_year#70]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#42))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#42))#78]
Results [2]: [ca_county#74, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#42))#78,17,2) AS web_sales#79]

(113) Exchange
Input [2]: [ca_county#74, web_sales#79]
Arguments: hashpartitioning(ca_county#74, 5), ENSURE_REQUIREMENTS, [id=#80]

(114) Sort [codegen id : 34]
Input [2]: [ca_county#74, web_sales#79]
Arguments: [ca_county#74 ASC NULLS FIRST], false, 0

(115) SortMergeJoin [codegen id : 35]
Left keys [1]: [ca_county#50]
Right keys [1]: [ca_county#74]
Join condition: (CASE WHEN (web_sales#67 > 0.00) THEN CheckOverflow((promote_precision(web_sales#79) / promote_precision(web_sales#67)), DecimalType(37,20), true) ELSE null END > CASE WHEN (store_sales#27 > 0.00) THEN CheckOverflow((promote_precision(store_sales#39) / promote_precision(store_sales#27)), DecimalType(37,20), true) ELSE null END)

(116) Project [codegen id : 35]
Output [6]: [ca_county#10, d_year#6, CheckOverflow((promote_precision(web_sales#67) / promote_precision(web_sales#55)), DecimalType(37,20), true) AS web_q1_q2_increase#81, CheckOverflow((promote_precision(store_sales#27) / promote_precision(store_sales#15)), DecimalType(37,20), true) AS store_q1_q2_increase#82, CheckOverflow((promote_precision(web_sales#79) / promote_precision(web_sales#67)), DecimalType(37,20), true) AS web_q2_q3_increase#83, CheckOverflow((promote_precision(store_sales#39) / promote_precision(store_sales#27)), DecimalType(37,20), true) AS store_q2_q3_increase#84]
Input [10]: [ca_county#10, d_year#6, store_sales#15, store_sales#27, store_sales#39, ca_county#50, web_sales#55, web_sales#67, ca_county#74, web_sales#79]

(117) Exchange
Input [6]: [ca_county#10, d_year#6, web_q1_q2_increase#81, store_q1_q2_increase#82, web_q2_q3_increase#83, store_q2_q3_increase#84]
Arguments: rangepartitioning(ca_county#10 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [id=#85]

(118) Sort [codegen id : 36]
Input [6]: [ca_county#10, d_year#6, web_q1_q2_increase#81, store_q1_q2_increase#82, web_q2_q3_increase#83, store_q2_q3_increase#84]
Arguments: [ca_county#10 ASC NULLS FIRST], true, 0

