== Physical Plan ==
* Sort (110)
+- Exchange (109)
   +- * Project (108)
      +- * BroadcastHashJoin Inner BuildRight (107)
         :- * Project (54)
         :  +- * BroadcastHashJoin Inner BuildRight (53)
         :     :- * Project (36)
         :     :  +- * BroadcastHashJoin Inner BuildRight (35)
         :     :     :- * HashAggregate (18)
         :     :     :  +- Exchange (17)
         :     :     :     +- * HashAggregate (16)
         :     :     :        +- * Project (15)
         :     :     :           +- * SortMergeJoin Inner (14)
         :     :     :              :- * Sort (8)
         :     :     :              :  +- Exchange (7)
         :     :     :              :     +- * Project (6)
         :     :     :              :        +- * BroadcastHashJoin Inner BuildRight (5)
         :     :     :              :           :- * Filter (3)
         :     :     :              :           :  +- * ColumnarToRow (2)
         :     :     :              :           :     +- Scan parquet default.store_sales (1)
         :     :     :              :           +- ReusedExchange (4)
         :     :     :              +- * Sort (13)
         :     :     :                 +- Exchange (12)
         :     :     :                    +- * Filter (11)
         :     :     :                       +- * ColumnarToRow (10)
         :     :     :                          +- Scan parquet default.customer_address (9)
         :     :     +- BroadcastExchange (34)
         :     :        +- * HashAggregate (33)
         :     :           +- Exchange (32)
         :     :              +- * HashAggregate (31)
         :     :                 +- * Project (30)
         :     :                    +- * SortMergeJoin Inner (29)
         :     :                       :- * Sort (26)
         :     :                       :  +- Exchange (25)
         :     :                       :     +- * Project (24)
         :     :                       :        +- * BroadcastHashJoin Inner BuildRight (23)
         :     :                       :           :- * Filter (21)
         :     :                       :           :  +- * ColumnarToRow (20)
         :     :                       :           :     +- Scan parquet default.store_sales (19)
         :     :                       :           +- ReusedExchange (22)
         :     :                       +- * Sort (28)
         :     :                          +- ReusedExchange (27)
         :     +- BroadcastExchange (52)
         :        +- * HashAggregate (51)
         :           +- Exchange (50)
         :              +- * HashAggregate (49)
         :                 +- * Project (48)
         :                    +- * SortMergeJoin Inner (47)
         :                       :- * Sort (44)
         :                       :  +- Exchange (43)
         :                       :     +- * Project (42)
         :                       :        +- * BroadcastHashJoin Inner BuildRight (41)
         :                       :           :- * Filter (39)
         :                       :           :  +- * ColumnarToRow (38)
         :                       :           :     +- Scan parquet default.store_sales (37)
         :                       :           +- ReusedExchange (40)
         :                       +- * Sort (46)
         :                          +- ReusedExchange (45)
         +- BroadcastExchange (106)
            +- * Project (105)
               +- * BroadcastHashJoin Inner BuildRight (104)
                  :- * Project (87)
                  :  +- * BroadcastHashJoin Inner BuildRight (86)
                  :     :- * HashAggregate (69)
                  :     :  +- Exchange (68)
                  :     :     +- * HashAggregate (67)
                  :     :        +- * Project (66)
                  :     :           +- * SortMergeJoin Inner (65)
                  :     :              :- * Sort (62)
                  :     :              :  +- Exchange (61)
                  :     :              :     +- * Project (60)
                  :     :              :        +- * BroadcastHashJoin Inner BuildRight (59)
                  :     :              :           :- * Filter (57)
                  :     :              :           :  +- * ColumnarToRow (56)
                  :     :              :           :     +- Scan parquet default.web_sales (55)
                  :     :              :           +- ReusedExchange (58)
                  :     :              +- * Sort (64)
                  :     :                 +- ReusedExchange (63)
                  :     +- BroadcastExchange (85)
                  :        +- * HashAggregate (84)
                  :           +- Exchange (83)
                  :              +- * HashAggregate (82)
                  :                 +- * Project (81)
                  :                    +- * SortMergeJoin Inner (80)
                  :                       :- * Sort (77)
                  :                       :  +- Exchange (76)
                  :                       :     +- * Project (75)
                  :                       :        +- * BroadcastHashJoin Inner BuildRight (74)
                  :                       :           :- * Filter (72)
                  :                       :           :  +- * ColumnarToRow (71)
                  :                       :           :     +- Scan parquet default.web_sales (70)
                  :                       :           +- ReusedExchange (73)
                  :                       +- * Sort (79)
                  :                          +- ReusedExchange (78)
                  +- BroadcastExchange (103)
                     +- * HashAggregate (102)
                        +- Exchange (101)
                           +- * HashAggregate (100)
                              +- * Project (99)
                                 +- * SortMergeJoin Inner (98)
                                    :- * Sort (95)
                                    :  +- Exchange (94)
                                    :     +- * Project (93)
                                    :        +- * BroadcastHashJoin Inner BuildRight (92)
                                    :           :- * Filter (90)
                                    :           :  +- * ColumnarToRow (89)
                                    :           :     +- Scan parquet default.web_sales (88)
                                    :           +- ReusedExchange (91)
                                    +- * Sort (97)
                                       +- ReusedExchange (96)


(1) Scan parquet default.store_sales
Output [3]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [3]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]

(3) Filter [codegen id : 2]
Input [3]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_addr_sk#1)

(4) ReusedExchange [Reuses operator id: 114]
Output [3]: [d_date_sk#5, d_year#6, d_qoy#7]

(5) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#5]
Join condition: None

(6) Project [codegen id : 2]
Output [4]: [ss_addr_sk#1, ss_ext_sales_price#2, d_year#6, d_qoy#7]
Input [6]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3, d_date_sk#5, d_year#6, d_qoy#7]

(7) Exchange
Input [4]: [ss_addr_sk#1, ss_ext_sales_price#2, d_year#6, d_qoy#7]
Arguments: hashpartitioning(ss_addr_sk#1, 5), ENSURE_REQUIREMENTS, [id=#8]

(8) Sort [codegen id : 3]
Input [4]: [ss_addr_sk#1, ss_ext_sales_price#2, d_year#6, d_qoy#7]
Arguments: [ss_addr_sk#1 ASC NULLS FIRST], false, 0

(9) Scan parquet default.customer_address
Output [2]: [ca_address_sk#9, ca_county#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(10) ColumnarToRow [codegen id : 4]
Input [2]: [ca_address_sk#9, ca_county#10]

(11) Filter [codegen id : 4]
Input [2]: [ca_address_sk#9, ca_county#10]
Condition : (isnotnull(ca_address_sk#9) AND isnotnull(ca_county#10))

(12) Exchange
Input [2]: [ca_address_sk#9, ca_county#10]
Arguments: hashpartitioning(ca_address_sk#9, 5), ENSURE_REQUIREMENTS, [id=#11]

(13) Sort [codegen id : 5]
Input [2]: [ca_address_sk#9, ca_county#10]
Arguments: [ca_address_sk#9 ASC NULLS FIRST], false, 0

(14) SortMergeJoin [codegen id : 6]
Left keys [1]: [ss_addr_sk#1]
Right keys [1]: [ca_address_sk#9]
Join condition: None

(15) Project [codegen id : 6]
Output [4]: [ss_ext_sales_price#2, d_year#6, d_qoy#7, ca_county#10]
Input [6]: [ss_addr_sk#1, ss_ext_sales_price#2, d_year#6, d_qoy#7, ca_address_sk#9, ca_county#10]

(16) HashAggregate [codegen id : 6]
Input [4]: [ss_ext_sales_price#2, d_year#6, d_qoy#7, ca_county#10]
Keys [3]: [ca_county#10, d_qoy#7, d_year#6]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum#12]
Results [4]: [ca_county#10, d_qoy#7, d_year#6, sum#13]

(17) Exchange
Input [4]: [ca_county#10, d_qoy#7, d_year#6, sum#13]
Arguments: hashpartitioning(ca_county#10, d_qoy#7, d_year#6, 5), ENSURE_REQUIREMENTS, [id=#14]

(18) HashAggregate [codegen id : 42]
Input [4]: [ca_county#10, d_qoy#7, d_year#6, sum#13]
Keys [3]: [ca_county#10, d_qoy#7, d_year#6]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#2))#15]
Results [2]: [ca_county#10, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#15,17,2) AS store_sales#16]

(19) Scan parquet default.store_sales
Output [3]: [ss_addr_sk#17, ss_ext_sales_price#18, ss_sold_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#19), dynamicpruningexpression(ss_sold_date_sk#19 IN dynamicpruning#20)]
PushedFilters: [IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>

(20) ColumnarToRow [codegen id : 8]
Input [3]: [ss_addr_sk#17, ss_ext_sales_price#18, ss_sold_date_sk#19]

(21) Filter [codegen id : 8]
Input [3]: [ss_addr_sk#17, ss_ext_sales_price#18, ss_sold_date_sk#19]
Condition : isnotnull(ss_addr_sk#17)

(22) ReusedExchange [Reuses operator id: 118]
Output [3]: [d_date_sk#21, d_year#22, d_qoy#23]

(23) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_sold_date_sk#19]
Right keys [1]: [d_date_sk#21]
Join condition: None

(24) Project [codegen id : 8]
Output [4]: [ss_addr_sk#17, ss_ext_sales_price#18, d_year#22, d_qoy#23]
Input [6]: [ss_addr_sk#17, ss_ext_sales_price#18, ss_sold_date_sk#19, d_date_sk#21, d_year#22, d_qoy#23]

(25) Exchange
Input [4]: [ss_addr_sk#17, ss_ext_sales_price#18, d_year#22, d_qoy#23]
Arguments: hashpartitioning(ss_addr_sk#17, 5), ENSURE_REQUIREMENTS, [id=#24]

(26) Sort [codegen id : 9]
Input [4]: [ss_addr_sk#17, ss_ext_sales_price#18, d_year#22, d_qoy#23]
Arguments: [ss_addr_sk#17 ASC NULLS FIRST], false, 0

(27) ReusedExchange [Reuses operator id: 12]
Output [2]: [ca_address_sk#25, ca_county#26]

(28) Sort [codegen id : 11]
Input [2]: [ca_address_sk#25, ca_county#26]
Arguments: [ca_address_sk#25 ASC NULLS FIRST], false, 0

(29) SortMergeJoin [codegen id : 12]
Left keys [1]: [ss_addr_sk#17]
Right keys [1]: [ca_address_sk#25]
Join condition: None

(30) Project [codegen id : 12]
Output [4]: [ss_ext_sales_price#18, d_year#22, d_qoy#23, ca_county#26]
Input [6]: [ss_addr_sk#17, ss_ext_sales_price#18, d_year#22, d_qoy#23, ca_address_sk#25, ca_county#26]

(31) HashAggregate [codegen id : 12]
Input [4]: [ss_ext_sales_price#18, d_year#22, d_qoy#23, ca_county#26]
Keys [3]: [ca_county#26, d_qoy#23, d_year#22]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#18))]
Aggregate Attributes [1]: [sum#27]
Results [4]: [ca_county#26, d_qoy#23, d_year#22, sum#28]

(32) Exchange
Input [4]: [ca_county#26, d_qoy#23, d_year#22, sum#28]
Arguments: hashpartitioning(ca_county#26, d_qoy#23, d_year#22, 5), ENSURE_REQUIREMENTS, [id=#29]

(33) HashAggregate [codegen id : 13]
Input [4]: [ca_county#26, d_qoy#23, d_year#22, sum#28]
Keys [3]: [ca_county#26, d_qoy#23, d_year#22]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#18))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#18))#30]
Results [2]: [ca_county#26, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#18))#30,17,2) AS store_sales#31]

(34) BroadcastExchange
Input [2]: [ca_county#26, store_sales#31]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#32]

(35) BroadcastHashJoin [codegen id : 42]
Left keys [1]: [ca_county#10]
Right keys [1]: [ca_county#26]
Join condition: None

(36) Project [codegen id : 42]
Output [3]: [ca_county#10, store_sales#16, store_sales#31]
Input [4]: [ca_county#10, store_sales#16, ca_county#26, store_sales#31]

(37) Scan parquet default.store_sales
Output [3]: [ss_addr_sk#33, ss_ext_sales_price#34, ss_sold_date_sk#35]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#35), dynamicpruningexpression(ss_sold_date_sk#35 IN dynamicpruning#36)]
PushedFilters: [IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>

(38) ColumnarToRow [codegen id : 15]
Input [3]: [ss_addr_sk#33, ss_ext_sales_price#34, ss_sold_date_sk#35]

(39) Filter [codegen id : 15]
Input [3]: [ss_addr_sk#33, ss_ext_sales_price#34, ss_sold_date_sk#35]
Condition : isnotnull(ss_addr_sk#33)

(40) ReusedExchange [Reuses operator id: 122]
Output [3]: [d_date_sk#37, d_year#38, d_qoy#39]

(41) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [ss_sold_date_sk#35]
Right keys [1]: [d_date_sk#37]
Join condition: None

(42) Project [codegen id : 15]
Output [4]: [ss_addr_sk#33, ss_ext_sales_price#34, d_year#38, d_qoy#39]
Input [6]: [ss_addr_sk#33, ss_ext_sales_price#34, ss_sold_date_sk#35, d_date_sk#37, d_year#38, d_qoy#39]

(43) Exchange
Input [4]: [ss_addr_sk#33, ss_ext_sales_price#34, d_year#38, d_qoy#39]
Arguments: hashpartitioning(ss_addr_sk#33, 5), ENSURE_REQUIREMENTS, [id=#40]

(44) Sort [codegen id : 16]
Input [4]: [ss_addr_sk#33, ss_ext_sales_price#34, d_year#38, d_qoy#39]
Arguments: [ss_addr_sk#33 ASC NULLS FIRST], false, 0

(45) ReusedExchange [Reuses operator id: 12]
Output [2]: [ca_address_sk#41, ca_county#42]

(46) Sort [codegen id : 18]
Input [2]: [ca_address_sk#41, ca_county#42]
Arguments: [ca_address_sk#41 ASC NULLS FIRST], false, 0

(47) SortMergeJoin [codegen id : 19]
Left keys [1]: [ss_addr_sk#33]
Right keys [1]: [ca_address_sk#41]
Join condition: None

(48) Project [codegen id : 19]
Output [4]: [ss_ext_sales_price#34, d_year#38, d_qoy#39, ca_county#42]
Input [6]: [ss_addr_sk#33, ss_ext_sales_price#34, d_year#38, d_qoy#39, ca_address_sk#41, ca_county#42]

(49) HashAggregate [codegen id : 19]
Input [4]: [ss_ext_sales_price#34, d_year#38, d_qoy#39, ca_county#42]
Keys [3]: [ca_county#42, d_qoy#39, d_year#38]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#34))]
Aggregate Attributes [1]: [sum#43]
Results [4]: [ca_county#42, d_qoy#39, d_year#38, sum#44]

(50) Exchange
Input [4]: [ca_county#42, d_qoy#39, d_year#38, sum#44]
Arguments: hashpartitioning(ca_county#42, d_qoy#39, d_year#38, 5), ENSURE_REQUIREMENTS, [id=#45]

(51) HashAggregate [codegen id : 20]
Input [4]: [ca_county#42, d_qoy#39, d_year#38, sum#44]
Keys [3]: [ca_county#42, d_qoy#39, d_year#38]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#34))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#34))#46]
Results [3]: [ca_county#42, d_year#38, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#34))#46,17,2) AS store_sales#47]

(52) BroadcastExchange
Input [3]: [ca_county#42, d_year#38, store_sales#47]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#48]

(53) BroadcastHashJoin [codegen id : 42]
Left keys [1]: [ca_county#10]
Right keys [1]: [ca_county#42]
Join condition: None

(54) Project [codegen id : 42]
Output [7]: [store_sales#16, store_sales#31, ca_county#42, d_year#38, store_sales#47, CASE WHEN (store_sales#47 > 0.00) THEN CheckOverflow((promote_precision(store_sales#16) / promote_precision(store_sales#47)), DecimalType(37,20), true) ELSE null END AS CASE WHEN (ss1.store_sales > 0.00BD) THEN (ss2.store_sales / ss1.store_sales) ELSE CAST(NULL AS DECIMAL(37,20)) END#49, CASE WHEN (store_sales#16 > 0.00) THEN CheckOverflow((promote_precision(store_sales#31) / promote_precision(store_sales#16)), DecimalType(37,20), true) ELSE null END AS CASE WHEN (ss2.store_sales > 0.00BD) THEN (ss3.store_sales / ss2.store_sales) ELSE CAST(NULL AS DECIMAL(37,20)) END#50]
Input [6]: [ca_county#10, store_sales#16, store_sales#31, ca_county#42, d_year#38, store_sales#47]

(55) Scan parquet default.web_sales
Output [3]: [ws_bill_addr_sk#51, ws_ext_sales_price#52, ws_sold_date_sk#53]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#53), dynamicpruningexpression(ws_sold_date_sk#53 IN dynamicpruning#36)]
PushedFilters: [IsNotNull(ws_bill_addr_sk)]
ReadSchema: struct<ws_bill_addr_sk:int,ws_ext_sales_price:decimal(7,2)>

(56) ColumnarToRow [codegen id : 22]
Input [3]: [ws_bill_addr_sk#51, ws_ext_sales_price#52, ws_sold_date_sk#53]

(57) Filter [codegen id : 22]
Input [3]: [ws_bill_addr_sk#51, ws_ext_sales_price#52, ws_sold_date_sk#53]
Condition : isnotnull(ws_bill_addr_sk#51)

(58) ReusedExchange [Reuses operator id: 122]
Output [3]: [d_date_sk#54, d_year#55, d_qoy#56]

(59) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ws_sold_date_sk#53]
Right keys [1]: [d_date_sk#54]
Join condition: None

(60) Project [codegen id : 22]
Output [4]: [ws_bill_addr_sk#51, ws_ext_sales_price#52, d_year#55, d_qoy#56]
Input [6]: [ws_bill_addr_sk#51, ws_ext_sales_price#52, ws_sold_date_sk#53, d_date_sk#54, d_year#55, d_qoy#56]

(61) Exchange
Input [4]: [ws_bill_addr_sk#51, ws_ext_sales_price#52, d_year#55, d_qoy#56]
Arguments: hashpartitioning(ws_bill_addr_sk#51, 5), ENSURE_REQUIREMENTS, [id=#57]

(62) Sort [codegen id : 23]
Input [4]: [ws_bill_addr_sk#51, ws_ext_sales_price#52, d_year#55, d_qoy#56]
Arguments: [ws_bill_addr_sk#51 ASC NULLS FIRST], false, 0

(63) ReusedExchange [Reuses operator id: 12]
Output [2]: [ca_address_sk#58, ca_county#59]

(64) Sort [codegen id : 25]
Input [2]: [ca_address_sk#58, ca_county#59]
Arguments: [ca_address_sk#58 ASC NULLS FIRST], false, 0

(65) SortMergeJoin [codegen id : 26]
Left keys [1]: [ws_bill_addr_sk#51]
Right keys [1]: [ca_address_sk#58]
Join condition: None

(66) Project [codegen id : 26]
Output [4]: [ws_ext_sales_price#52, d_year#55, d_qoy#56, ca_county#59]
Input [6]: [ws_bill_addr_sk#51, ws_ext_sales_price#52, d_year#55, d_qoy#56, ca_address_sk#58, ca_county#59]

(67) HashAggregate [codegen id : 26]
Input [4]: [ws_ext_sales_price#52, d_year#55, d_qoy#56, ca_county#59]
Keys [3]: [ca_county#59, d_qoy#56, d_year#55]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#52))]
Aggregate Attributes [1]: [sum#60]
Results [4]: [ca_county#59, d_qoy#56, d_year#55, sum#61]

(68) Exchange
Input [4]: [ca_county#59, d_qoy#56, d_year#55, sum#61]
Arguments: hashpartitioning(ca_county#59, d_qoy#56, d_year#55, 5), ENSURE_REQUIREMENTS, [id=#62]

(69) HashAggregate [codegen id : 41]
Input [4]: [ca_county#59, d_qoy#56, d_year#55, sum#61]
Keys [3]: [ca_county#59, d_qoy#56, d_year#55]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#52))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#52))#63]
Results [2]: [ca_county#59, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#52))#63,17,2) AS web_sales#64]

(70) Scan parquet default.web_sales
Output [3]: [ws_bill_addr_sk#65, ws_ext_sales_price#66, ws_sold_date_sk#67]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#67), dynamicpruningexpression(ws_sold_date_sk#67 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_bill_addr_sk)]
ReadSchema: struct<ws_bill_addr_sk:int,ws_ext_sales_price:decimal(7,2)>

(71) ColumnarToRow [codegen id : 28]
Input [3]: [ws_bill_addr_sk#65, ws_ext_sales_price#66, ws_sold_date_sk#67]

(72) Filter [codegen id : 28]
Input [3]: [ws_bill_addr_sk#65, ws_ext_sales_price#66, ws_sold_date_sk#67]
Condition : isnotnull(ws_bill_addr_sk#65)

(73) ReusedExchange [Reuses operator id: 114]
Output [3]: [d_date_sk#68, d_year#69, d_qoy#70]

(74) BroadcastHashJoin [codegen id : 28]
Left keys [1]: [ws_sold_date_sk#67]
Right keys [1]: [d_date_sk#68]
Join condition: None

(75) Project [codegen id : 28]
Output [4]: [ws_bill_addr_sk#65, ws_ext_sales_price#66, d_year#69, d_qoy#70]
Input [6]: [ws_bill_addr_sk#65, ws_ext_sales_price#66, ws_sold_date_sk#67, d_date_sk#68, d_year#69, d_qoy#70]

(76) Exchange
Input [4]: [ws_bill_addr_sk#65, ws_ext_sales_price#66, d_year#69, d_qoy#70]
Arguments: hashpartitioning(ws_bill_addr_sk#65, 5), ENSURE_REQUIREMENTS, [id=#71]

(77) Sort [codegen id : 29]
Input [4]: [ws_bill_addr_sk#65, ws_ext_sales_price#66, d_year#69, d_qoy#70]
Arguments: [ws_bill_addr_sk#65 ASC NULLS FIRST], false, 0

(78) ReusedExchange [Reuses operator id: 12]
Output [2]: [ca_address_sk#72, ca_county#73]

(79) Sort [codegen id : 31]
Input [2]: [ca_address_sk#72, ca_county#73]
Arguments: [ca_address_sk#72 ASC NULLS FIRST], false, 0

(80) SortMergeJoin [codegen id : 32]
Left keys [1]: [ws_bill_addr_sk#65]
Right keys [1]: [ca_address_sk#72]
Join condition: None

(81) Project [codegen id : 32]
Output [4]: [ws_ext_sales_price#66, d_year#69, d_qoy#70, ca_county#73]
Input [6]: [ws_bill_addr_sk#65, ws_ext_sales_price#66, d_year#69, d_qoy#70, ca_address_sk#72, ca_county#73]

(82) HashAggregate [codegen id : 32]
Input [4]: [ws_ext_sales_price#66, d_year#69, d_qoy#70, ca_county#73]
Keys [3]: [ca_county#73, d_qoy#70, d_year#69]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#66))]
Aggregate Attributes [1]: [sum#74]
Results [4]: [ca_county#73, d_qoy#70, d_year#69, sum#75]

(83) Exchange
Input [4]: [ca_county#73, d_qoy#70, d_year#69, sum#75]
Arguments: hashpartitioning(ca_county#73, d_qoy#70, d_year#69, 5), ENSURE_REQUIREMENTS, [id=#76]

(84) HashAggregate [codegen id : 33]
Input [4]: [ca_county#73, d_qoy#70, d_year#69, sum#75]
Keys [3]: [ca_county#73, d_qoy#70, d_year#69]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#66))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#66))#77]
Results [2]: [ca_county#73, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#66))#77,17,2) AS web_sales#78]

(85) BroadcastExchange
Input [2]: [ca_county#73, web_sales#78]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#79]

(86) BroadcastHashJoin [codegen id : 41]
Left keys [1]: [ca_county#59]
Right keys [1]: [ca_county#73]
Join condition: None

(87) Project [codegen id : 41]
Output [3]: [ca_county#59, web_sales#64, web_sales#78]
Input [4]: [ca_county#59, web_sales#64, ca_county#73, web_sales#78]

(88) Scan parquet default.web_sales
Output [3]: [ws_bill_addr_sk#80, ws_ext_sales_price#81, ws_sold_date_sk#82]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#82), dynamicpruningexpression(ws_sold_date_sk#82 IN dynamicpruning#20)]
PushedFilters: [IsNotNull(ws_bill_addr_sk)]
ReadSchema: struct<ws_bill_addr_sk:int,ws_ext_sales_price:decimal(7,2)>

(89) ColumnarToRow [codegen id : 35]
Input [3]: [ws_bill_addr_sk#80, ws_ext_sales_price#81, ws_sold_date_sk#82]

(90) Filter [codegen id : 35]
Input [3]: [ws_bill_addr_sk#80, ws_ext_sales_price#81, ws_sold_date_sk#82]
Condition : isnotnull(ws_bill_addr_sk#80)

(91) ReusedExchange [Reuses operator id: 118]
Output [3]: [d_date_sk#83, d_year#84, d_qoy#85]

(92) BroadcastHashJoin [codegen id : 35]
Left keys [1]: [ws_sold_date_sk#82]
Right keys [1]: [d_date_sk#83]
Join condition: None

(93) Project [codegen id : 35]
Output [4]: [ws_bill_addr_sk#80, ws_ext_sales_price#81, d_year#84, d_qoy#85]
Input [6]: [ws_bill_addr_sk#80, ws_ext_sales_price#81, ws_sold_date_sk#82, d_date_sk#83, d_year#84, d_qoy#85]

(94) Exchange
Input [4]: [ws_bill_addr_sk#80, ws_ext_sales_price#81, d_year#84, d_qoy#85]
Arguments: hashpartitioning(ws_bill_addr_sk#80, 5), ENSURE_REQUIREMENTS, [id=#86]

(95) Sort [codegen id : 36]
Input [4]: [ws_bill_addr_sk#80, ws_ext_sales_price#81, d_year#84, d_qoy#85]
Arguments: [ws_bill_addr_sk#80 ASC NULLS FIRST], false, 0

(96) ReusedExchange [Reuses operator id: 12]
Output [2]: [ca_address_sk#87, ca_county#88]

(97) Sort [codegen id : 38]
Input [2]: [ca_address_sk#87, ca_county#88]
Arguments: [ca_address_sk#87 ASC NULLS FIRST], false, 0

(98) SortMergeJoin [codegen id : 39]
Left keys [1]: [ws_bill_addr_sk#80]
Right keys [1]: [ca_address_sk#87]
Join condition: None

(99) Project [codegen id : 39]
Output [4]: [ws_ext_sales_price#81, d_year#84, d_qoy#85, ca_county#88]
Input [6]: [ws_bill_addr_sk#80, ws_ext_sales_price#81, d_year#84, d_qoy#85, ca_address_sk#87, ca_county#88]

(100) HashAggregate [codegen id : 39]
Input [4]: [ws_ext_sales_price#81, d_year#84, d_qoy#85, ca_county#88]
Keys [3]: [ca_county#88, d_qoy#85, d_year#84]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#81))]
Aggregate Attributes [1]: [sum#89]
Results [4]: [ca_county#88, d_qoy#85, d_year#84, sum#90]

(101) Exchange
Input [4]: [ca_county#88, d_qoy#85, d_year#84, sum#90]
Arguments: hashpartitioning(ca_county#88, d_qoy#85, d_year#84, 5), ENSURE_REQUIREMENTS, [id=#91]

(102) HashAggregate [codegen id : 40]
Input [4]: [ca_county#88, d_qoy#85, d_year#84, sum#90]
Keys [3]: [ca_county#88, d_qoy#85, d_year#84]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#81))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#81))#92]
Results [2]: [ca_county#88, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#81))#92,17,2) AS web_sales#93]

(103) BroadcastExchange
Input [2]: [ca_county#88, web_sales#93]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#94]

(104) BroadcastHashJoin [codegen id : 41]
Left keys [1]: [ca_county#59]
Right keys [1]: [ca_county#88]
Join condition: None

(105) Project [codegen id : 41]
Output [6]: [ca_county#59, web_sales#64, web_sales#78, web_sales#93, CASE WHEN (web_sales#64 > 0.00) THEN CheckOverflow((promote_precision(web_sales#78) / promote_precision(web_sales#64)), DecimalType(37,20), true) ELSE null END AS CASE WHEN (ws1.web_sales > 0.00BD) THEN (ws2.web_sales / ws1.web_sales) ELSE CAST(NULL AS DECIMAL(37,20)) END#95, CASE WHEN (web_sales#78 > 0.00) THEN CheckOverflow((promote_precision(web_sales#93) / promote_precision(web_sales#78)), DecimalType(37,20), true) ELSE null END AS CASE WHEN (ws2.web_sales > 0.00BD) THEN (ws3.web_sales / ws2.web_sales) ELSE CAST(NULL AS DECIMAL(37,20)) END#96]
Input [5]: [ca_county#59, web_sales#64, web_sales#78, ca_county#88, web_sales#93]

(106) BroadcastExchange
Input [6]: [ca_county#59, web_sales#64, web_sales#78, web_sales#93, CASE WHEN (ws1.web_sales > 0.00BD) THEN (ws2.web_sales / ws1.web_sales) ELSE CAST(NULL AS DECIMAL(37,20)) END#95, CASE WHEN (ws2.web_sales > 0.00BD) THEN (ws3.web_sales / ws2.web_sales) ELSE CAST(NULL AS DECIMAL(37,20)) END#96]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#97]

(107) BroadcastHashJoin [codegen id : 42]
Left keys [1]: [ca_county#42]
Right keys [1]: [ca_county#59]
Join condition: ((CASE WHEN (ws1.web_sales > 0.00BD) THEN (ws2.web_sales / ws1.web_sales) ELSE CAST(NULL AS DECIMAL(37,20)) END#95 > CASE WHEN (ss1.store_sales > 0.00BD) THEN (ss2.store_sales / ss1.store_sales) ELSE CAST(NULL AS DECIMAL(37,20)) END#49) AND (CASE WHEN (ws2.web_sales > 0.00BD) THEN (ws3.web_sales / ws2.web_sales) ELSE CAST(NULL AS DECIMAL(37,20)) END#96 > CASE WHEN (ss2.store_sales > 0.00BD) THEN (ss3.store_sales / ss2.store_sales) ELSE CAST(NULL AS DECIMAL(37,20)) END#50))

(108) Project [codegen id : 42]
Output [6]: [ca_county#42, d_year#38, CheckOverflow((promote_precision(web_sales#78) / promote_precision(web_sales#64)), DecimalType(37,20), true) AS web_q1_q2_increase#98, CheckOverflow((promote_precision(store_sales#16) / promote_precision(store_sales#47)), DecimalType(37,20), true) AS store_q1_q2_increase#99, CheckOverflow((promote_precision(web_sales#93) / promote_precision(web_sales#78)), DecimalType(37,20), true) AS web_q2_q3_increase#100, CheckOverflow((promote_precision(store_sales#31) / promote_precision(store_sales#16)), DecimalType(37,20), true) AS store_q2_q3_increase#101]
Input [13]: [store_sales#16, store_sales#31, ca_county#42, d_year#38, store_sales#47, CASE WHEN (ss1.store_sales > 0.00BD) THEN (ss2.store_sales / ss1.store_sales) ELSE CAST(NULL AS DECIMAL(37,20)) END#49, CASE WHEN (ss2.store_sales > 0.00BD) THEN (ss3.store_sales / ss2.store_sales) ELSE CAST(NULL AS DECIMAL(37,20)) END#50, ca_county#59, web_sales#64, web_sales#78, web_sales#93, CASE WHEN (ws1.web_sales > 0.00BD) THEN (ws2.web_sales / ws1.web_sales) ELSE CAST(NULL AS DECIMAL(37,20)) END#95, CASE WHEN (ws2.web_sales > 0.00BD) THEN (ws3.web_sales / ws2.web_sales) ELSE CAST(NULL AS DECIMAL(37,20)) END#96]

(109) Exchange
Input [6]: [ca_county#42, d_year#38, web_q1_q2_increase#98, store_q1_q2_increase#99, web_q2_q3_increase#100, store_q2_q3_increase#101]
Arguments: rangepartitioning(ca_county#42 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [id=#102]

(110) Sort [codegen id : 43]
Input [6]: [ca_county#42, d_year#38, web_q1_q2_increase#98, store_q1_q2_increase#99, web_q2_q3_increase#100, store_q2_q3_increase#101]
Arguments: [ca_county#42 ASC NULLS FIRST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (114)
+- * Filter (113)
   +- * ColumnarToRow (112)
      +- Scan parquet default.date_dim (111)


(111) Scan parquet default.date_dim
Output [3]: [d_date_sk#5, d_year#6, d_qoy#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(112) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#5, d_year#6, d_qoy#7]

(113) Filter [codegen id : 1]
Input [3]: [d_date_sk#5, d_year#6, d_qoy#7]
Condition : ((((isnotnull(d_qoy#7) AND isnotnull(d_year#6)) AND (d_qoy#7 = 2)) AND (d_year#6 = 2000)) AND isnotnull(d_date_sk#5))

(114) BroadcastExchange
Input [3]: [d_date_sk#5, d_year#6, d_qoy#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#103]

Subquery:2 Hosting operator id = 19 Hosting Expression = ss_sold_date_sk#19 IN dynamicpruning#20
BroadcastExchange (118)
+- * Filter (117)
   +- * ColumnarToRow (116)
      +- Scan parquet default.date_dim (115)


(115) Scan parquet default.date_dim
Output [3]: [d_date_sk#21, d_year#22, d_qoy#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,3), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(116) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#21, d_year#22, d_qoy#23]

(117) Filter [codegen id : 1]
Input [3]: [d_date_sk#21, d_year#22, d_qoy#23]
Condition : ((((isnotnull(d_qoy#23) AND isnotnull(d_year#22)) AND (d_qoy#23 = 3)) AND (d_year#22 = 2000)) AND isnotnull(d_date_sk#21))

(118) BroadcastExchange
Input [3]: [d_date_sk#21, d_year#22, d_qoy#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#104]

Subquery:3 Hosting operator id = 37 Hosting Expression = ss_sold_date_sk#35 IN dynamicpruning#36
BroadcastExchange (122)
+- * Filter (121)
   +- * ColumnarToRow (120)
      +- Scan parquet default.date_dim (119)


(119) Scan parquet default.date_dim
Output [3]: [d_date_sk#37, d_year#38, d_qoy#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,1), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(120) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#37, d_year#38, d_qoy#39]

(121) Filter [codegen id : 1]
Input [3]: [d_date_sk#37, d_year#38, d_qoy#39]
Condition : ((((isnotnull(d_qoy#39) AND isnotnull(d_year#38)) AND (d_qoy#39 = 1)) AND (d_year#38 = 2000)) AND isnotnull(d_date_sk#37))

(122) BroadcastExchange
Input [3]: [d_date_sk#37, d_year#38, d_qoy#39]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#105]

Subquery:4 Hosting operator id = 55 Hosting Expression = ws_sold_date_sk#53 IN dynamicpruning#36

Subquery:5 Hosting operator id = 70 Hosting Expression = ws_sold_date_sk#67 IN dynamicpruning#4

Subquery:6 Hosting operator id = 88 Hosting Expression = ws_sold_date_sk#82 IN dynamicpruning#20


