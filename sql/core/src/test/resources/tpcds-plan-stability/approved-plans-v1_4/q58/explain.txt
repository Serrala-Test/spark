== Physical Plan ==
TakeOrderedAndProject (62)
+- * Project (61)
   +- * BroadcastHashJoin Inner BuildRight (60)
      :- * Project (44)
      :  +- * BroadcastHashJoin Inner BuildRight (43)
      :     :- * Project (27)
      :     :  +- * Filter (26)
      :     :     +- * HashAggregate (25)
      :     :        +- Exchange (24)
      :     :           +- * HashAggregate (23)
      :     :              +- * Project (22)
      :     :                 +- * BroadcastHashJoin Inner BuildRight (21)
      :     :                    :- * Project (9)
      :     :                    :  +- * BroadcastHashJoin Inner BuildRight (8)
      :     :                    :     :- * Filter (3)
      :     :                    :     :  +- * ColumnarToRow (2)
      :     :                    :     :     +- Scan parquet default.store_sales (1)
      :     :                    :     +- BroadcastExchange (7)
      :     :                    :        +- * Filter (6)
      :     :                    :           +- * ColumnarToRow (5)
      :     :                    :              +- Scan parquet default.item (4)
      :     :                    +- BroadcastExchange (20)
      :     :                       +- * Project (19)
      :     :                          +- * BroadcastHashJoin LeftSemi BuildRight (18)
      :     :                             :- * Filter (12)
      :     :                             :  +- * ColumnarToRow (11)
      :     :                             :     +- Scan parquet default.date_dim (10)
      :     :                             +- BroadcastExchange (17)
      :     :                                +- * Project (16)
      :     :                                   +- * Filter (15)
      :     :                                      +- * ColumnarToRow (14)
      :     :                                         +- Scan parquet default.date_dim (13)
      :     +- BroadcastExchange (42)
      :        +- * Project (41)
      :           +- * Filter (40)
      :              +- * HashAggregate (39)
      :                 +- Exchange (38)
      :                    +- * HashAggregate (37)
      :                       +- * Project (36)
      :                          +- * BroadcastHashJoin Inner BuildRight (35)
      :                             :- * Project (33)
      :                             :  +- * BroadcastHashJoin Inner BuildRight (32)
      :                             :     :- * Filter (30)
      :                             :     :  +- * ColumnarToRow (29)
      :                             :     :     +- Scan parquet default.catalog_sales (28)
      :                             :     +- ReusedExchange (31)
      :                             +- ReusedExchange (34)
      +- BroadcastExchange (59)
         +- * Project (58)
            +- * Filter (57)
               +- * HashAggregate (56)
                  +- Exchange (55)
                     +- * HashAggregate (54)
                        +- * Project (53)
                           +- * BroadcastHashJoin Inner BuildRight (52)
                              :- * Project (50)
                              :  +- * BroadcastHashJoin Inner BuildRight (49)
                              :     :- * Filter (47)
                              :     :  +- * ColumnarToRow (46)
                              :     :     +- Scan parquet default.web_sales (45)
                              :     +- ReusedExchange (48)
                              +- ReusedExchange (51)


(1) Scan parquet default.store_sales
Output [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]

(3) Filter [codegen id : 4]
Input [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet default.item
Output [2]: [i_item_sk#4, i_item_id#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_item_id)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [i_item_sk#4, i_item_id#5]

(6) Filter [codegen id : 1]
Input [2]: [i_item_sk#4, i_item_id#5]
Condition : (isnotnull(i_item_sk#4) AND isnotnull(i_item_id#5))

(7) BroadcastExchange
Input [2]: [i_item_sk#4, i_item_id#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#6]

(8) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#4]
Join condition: None

(9) Project [codegen id : 4]
Output [3]: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#5]
Input [5]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_sk#4, i_item_id#5]

(10) Scan parquet default.date_dim
Output [2]: [d_date_sk#7, d_date#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(11) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#7, d_date#8]

(12) Filter [codegen id : 3]
Input [2]: [d_date_sk#7, d_date#8]
Condition : isnotnull(d_date_sk#7)

(13) Scan parquet default.date_dim
Output [2]: [d_date#9, d_week_seq#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(14) ColumnarToRow [codegen id : 2]
Input [2]: [d_date#9, d_week_seq#10]

(15) Filter [codegen id : 2]
Input [2]: [d_date#9, d_week_seq#10]
Condition : (isnotnull(d_week_seq#10) AND (d_week_seq#10 = Subquery scalar-subquery#11, [id=#12]))

(16) Project [codegen id : 2]
Output [1]: [d_date#9]
Input [2]: [d_date#9, d_week_seq#10]

(17) BroadcastExchange
Input [1]: [d_date#9]
Arguments: HashedRelationBroadcastMode(List(input[0, date, true]),false), [id=#13]

(18) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [d_date#8]
Right keys [1]: [d_date#9]
Join condition: None

(19) Project [codegen id : 3]
Output [1]: [d_date_sk#7]
Input [2]: [d_date_sk#7, d_date#8]

(20) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14]

(21) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#7]
Join condition: None

(22) Project [codegen id : 4]
Output [2]: [ss_ext_sales_price#2, i_item_id#5]
Input [4]: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#5, d_date_sk#7]

(23) HashAggregate [codegen id : 4]
Input [2]: [ss_ext_sales_price#2, i_item_id#5]
Keys [1]: [i_item_id#5]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum#15]
Results [2]: [i_item_id#5, sum#16]

(24) Exchange
Input [2]: [i_item_id#5, sum#16]
Arguments: hashpartitioning(i_item_id#5, 5), ENSURE_REQUIREMENTS, [id=#17]

(25) HashAggregate [codegen id : 15]
Input [2]: [i_item_id#5, sum#16]
Keys [1]: [i_item_id#5]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#2))#18]
Results [2]: [i_item_id#5 AS item_id#19, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#18,17,2) AS ss_item_rev#20]

(26) Filter [codegen id : 15]
Input [2]: [item_id#19, ss_item_rev#20]
Condition : isnotnull(ss_item_rev#20)

(27) Project [codegen id : 15]
Output [6]: [item_id#19, ss_item_rev#20, cast(ss_item_rev#20 as decimal(19,3)) AS CAST(ss_items.ss_item_rev AS DECIMAL(19,3))#21, cast(ss_item_rev#20 as decimal(20,3)) AS CAST(ss_items.ss_item_rev AS DECIMAL(20,3))#22, CheckOverflow((0.90 * promote_precision(ss_item_rev#20)), DecimalType(19,3), true) AS (0.90BD * ss_items.ss_item_rev)#23, CheckOverflow((1.10 * promote_precision(ss_item_rev#20)), DecimalType(20,3), true) AS (1.10BD * ss_items.ss_item_rev)#24]
Input [2]: [item_id#19, ss_item_rev#20]

(28) Scan parquet default.catalog_sales
Output [3]: [cs_item_sk#25, cs_ext_sales_price#26, cs_sold_date_sk#27]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#27), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(29) ColumnarToRow [codegen id : 8]
Input [3]: [cs_item_sk#25, cs_ext_sales_price#26, cs_sold_date_sk#27]

(30) Filter [codegen id : 8]
Input [3]: [cs_item_sk#25, cs_ext_sales_price#26, cs_sold_date_sk#27]
Condition : isnotnull(cs_item_sk#25)

(31) ReusedExchange [Reuses operator id: 7]
Output [2]: [i_item_sk#28, i_item_id#29]

(32) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_item_sk#25]
Right keys [1]: [i_item_sk#28]
Join condition: None

(33) Project [codegen id : 8]
Output [3]: [cs_ext_sales_price#26, cs_sold_date_sk#27, i_item_id#29]
Input [5]: [cs_item_sk#25, cs_ext_sales_price#26, cs_sold_date_sk#27, i_item_sk#28, i_item_id#29]

(34) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#30]

(35) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#27]
Right keys [1]: [d_date_sk#30]
Join condition: None

(36) Project [codegen id : 8]
Output [2]: [cs_ext_sales_price#26, i_item_id#29]
Input [4]: [cs_ext_sales_price#26, cs_sold_date_sk#27, i_item_id#29, d_date_sk#30]

(37) HashAggregate [codegen id : 8]
Input [2]: [cs_ext_sales_price#26, i_item_id#29]
Keys [1]: [i_item_id#29]
Functions [1]: [partial_sum(UnscaledValue(cs_ext_sales_price#26))]
Aggregate Attributes [1]: [sum#31]
Results [2]: [i_item_id#29, sum#32]

(38) Exchange
Input [2]: [i_item_id#29, sum#32]
Arguments: hashpartitioning(i_item_id#29, 5), ENSURE_REQUIREMENTS, [id=#33]

(39) HashAggregate [codegen id : 9]
Input [2]: [i_item_id#29, sum#32]
Keys [1]: [i_item_id#29]
Functions [1]: [sum(UnscaledValue(cs_ext_sales_price#26))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_ext_sales_price#26))#34]
Results [2]: [i_item_id#29 AS item_id#35, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#26))#34,17,2) AS cs_item_rev#36]

(40) Filter [codegen id : 9]
Input [2]: [item_id#35, cs_item_rev#36]
Condition : isnotnull(cs_item_rev#36)

(41) Project [codegen id : 9]
Output [6]: [item_id#35, cs_item_rev#36, CheckOverflow((0.90 * promote_precision(cs_item_rev#36)), DecimalType(19,3), true) AS (0.90BD * cs_items.cs_item_rev)#37, CheckOverflow((1.10 * promote_precision(cs_item_rev#36)), DecimalType(20,3), true) AS (1.10BD * cs_items.cs_item_rev)#38, cast(cs_item_rev#36 as decimal(19,3)) AS CAST(cs_items.cs_item_rev AS DECIMAL(19,3))#39, cast(cs_item_rev#36 as decimal(20,3)) AS CAST(cs_items.cs_item_rev AS DECIMAL(20,3))#40]
Input [2]: [item_id#35, cs_item_rev#36]

(42) BroadcastExchange
Input [6]: [item_id#35, cs_item_rev#36, (0.90BD * cs_items.cs_item_rev)#37, (1.10BD * cs_items.cs_item_rev)#38, CAST(cs_items.cs_item_rev AS DECIMAL(19,3))#39, CAST(cs_items.cs_item_rev AS DECIMAL(20,3))#40]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#41]

(43) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [item_id#19]
Right keys [1]: [item_id#35]
Join condition: ((((CAST(ss_items.ss_item_rev AS DECIMAL(19,3))#21 >= (0.90BD * cs_items.cs_item_rev)#37) AND (CAST(ss_items.ss_item_rev AS DECIMAL(20,3))#22 <= (1.10BD * cs_items.cs_item_rev)#38)) AND (CAST(cs_items.cs_item_rev AS DECIMAL(19,3))#39 >= (0.90BD * ss_items.ss_item_rev)#23)) AND (CAST(cs_items.cs_item_rev AS DECIMAL(20,3))#40 <= (1.10BD * ss_items.ss_item_rev)#24))

(44) Project [codegen id : 15]
Output [11]: [item_id#19, ss_item_rev#20, cs_item_rev#36, cast(ss_item_rev#20 as decimal(19,3)) AS CAST(ss_items.ss_item_rev AS DECIMAL(19,3))#42, cast(ss_item_rev#20 as decimal(20,3)) AS CAST(ss_items.ss_item_rev AS DECIMAL(20,3))#43, cast(cs_item_rev#36 as decimal(19,3)) AS CAST(cs_items.cs_item_rev AS DECIMAL(19,3))#44, cast(cs_item_rev#36 as decimal(20,3)) AS CAST(cs_items.cs_item_rev AS DECIMAL(20,3))#45, CheckOverflow((0.90 * promote_precision(ss_item_rev#20)), DecimalType(19,3), true) AS (0.90BD * ss_items.ss_item_rev)#46, CheckOverflow((1.10 * promote_precision(ss_item_rev#20)), DecimalType(20,3), true) AS (1.10BD * ss_items.ss_item_rev)#47, CheckOverflow((0.90 * promote_precision(cs_item_rev#36)), DecimalType(19,3), true) AS (0.90BD * cs_items.cs_item_rev)#48, CheckOverflow((1.10 * promote_precision(cs_item_rev#36)), DecimalType(20,3), true) AS (1.10BD * cs_items.cs_item_rev)#49]
Input [12]: [item_id#19, ss_item_rev#20, CAST(ss_items.ss_item_rev AS DECIMAL(19,3))#21, CAST(ss_items.ss_item_rev AS DECIMAL(20,3))#22, (0.90BD * ss_items.ss_item_rev)#23, (1.10BD * ss_items.ss_item_rev)#24, item_id#35, cs_item_rev#36, (0.90BD * cs_items.cs_item_rev)#37, (1.10BD * cs_items.cs_item_rev)#38, CAST(cs_items.cs_item_rev AS DECIMAL(19,3))#39, CAST(cs_items.cs_item_rev AS DECIMAL(20,3))#40]

(45) Scan parquet default.web_sales
Output [3]: [ws_item_sk#50, ws_ext_sales_price#51, ws_sold_date_sk#52]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#52), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>

(46) ColumnarToRow [codegen id : 13]
Input [3]: [ws_item_sk#50, ws_ext_sales_price#51, ws_sold_date_sk#52]

(47) Filter [codegen id : 13]
Input [3]: [ws_item_sk#50, ws_ext_sales_price#51, ws_sold_date_sk#52]
Condition : isnotnull(ws_item_sk#50)

(48) ReusedExchange [Reuses operator id: 7]
Output [2]: [i_item_sk#53, i_item_id#54]

(49) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ws_item_sk#50]
Right keys [1]: [i_item_sk#53]
Join condition: None

(50) Project [codegen id : 13]
Output [3]: [ws_ext_sales_price#51, ws_sold_date_sk#52, i_item_id#54]
Input [5]: [ws_item_sk#50, ws_ext_sales_price#51, ws_sold_date_sk#52, i_item_sk#53, i_item_id#54]

(51) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#55]

(52) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ws_sold_date_sk#52]
Right keys [1]: [d_date_sk#55]
Join condition: None

(53) Project [codegen id : 13]
Output [2]: [ws_ext_sales_price#51, i_item_id#54]
Input [4]: [ws_ext_sales_price#51, ws_sold_date_sk#52, i_item_id#54, d_date_sk#55]

(54) HashAggregate [codegen id : 13]
Input [2]: [ws_ext_sales_price#51, i_item_id#54]
Keys [1]: [i_item_id#54]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#51))]
Aggregate Attributes [1]: [sum#56]
Results [2]: [i_item_id#54, sum#57]

(55) Exchange
Input [2]: [i_item_id#54, sum#57]
Arguments: hashpartitioning(i_item_id#54, 5), ENSURE_REQUIREMENTS, [id=#58]

(56) HashAggregate [codegen id : 14]
Input [2]: [i_item_id#54, sum#57]
Keys [1]: [i_item_id#54]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#51))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#51))#59]
Results [2]: [i_item_id#54 AS item_id#60, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#51))#59,17,2) AS ws_item_rev#61]

(57) Filter [codegen id : 14]
Input [2]: [item_id#60, ws_item_rev#61]
Condition : isnotnull(ws_item_rev#61)

(58) Project [codegen id : 14]
Output [6]: [item_id#60, ws_item_rev#61, CheckOverflow((0.90 * promote_precision(ws_item_rev#61)), DecimalType(19,3), true) AS (0.90BD * ws_items.ws_item_rev)#62, CheckOverflow((1.10 * promote_precision(ws_item_rev#61)), DecimalType(20,3), true) AS (1.10BD * ws_items.ws_item_rev)#63, cast(ws_item_rev#61 as decimal(19,3)) AS CAST(ws_items.ws_item_rev AS DECIMAL(19,3))#64, cast(ws_item_rev#61 as decimal(20,3)) AS CAST(ws_items.ws_item_rev AS DECIMAL(20,3))#65]
Input [2]: [item_id#60, ws_item_rev#61]

(59) BroadcastExchange
Input [6]: [item_id#60, ws_item_rev#61, (0.90BD * ws_items.ws_item_rev)#62, (1.10BD * ws_items.ws_item_rev)#63, CAST(ws_items.ws_item_rev AS DECIMAL(19,3))#64, CAST(ws_items.ws_item_rev AS DECIMAL(20,3))#65]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#66]

(60) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [item_id#19]
Right keys [1]: [item_id#60]
Join condition: ((((((((CAST(ss_items.ss_item_rev AS DECIMAL(19,3))#42 >= (0.90BD * ws_items.ws_item_rev)#62) AND (CAST(ss_items.ss_item_rev AS DECIMAL(20,3))#43 <= (1.10BD * ws_items.ws_item_rev)#63)) AND (CAST(cs_items.cs_item_rev AS DECIMAL(19,3))#44 >= (0.90BD * ws_items.ws_item_rev)#62)) AND (CAST(cs_items.cs_item_rev AS DECIMAL(20,3))#45 <= (1.10BD * ws_items.ws_item_rev)#63)) AND (CAST(ws_items.ws_item_rev AS DECIMAL(19,3))#64 >= (0.90BD * ss_items.ss_item_rev)#46)) AND (CAST(ws_items.ws_item_rev AS DECIMAL(20,3))#65 <= (1.10BD * ss_items.ss_item_rev)#47)) AND (CAST(ws_items.ws_item_rev AS DECIMAL(19,3))#64 >= (0.90BD * cs_items.cs_item_rev)#48)) AND (CAST(ws_items.ws_item_rev AS DECIMAL(20,3))#65 <= (1.10BD * cs_items.cs_item_rev)#49))

(61) Project [codegen id : 15]
Output [8]: [item_id#19, ss_item_rev#20, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ss_item_rev#20 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#20 as decimal(18,2))) + promote_precision(cast(cs_item_rev#36 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#61 as decimal(19,2)))), DecimalType(19,2), true))), DecimalType(38,21), true)) / 3.000000000000000000000), DecimalType(38,21), true)) * 100.000000000000000000000), DecimalType(38,17), true) AS ss_dev#67, cs_item_rev#36, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(cs_item_rev#36 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#20 as decimal(18,2))) + promote_precision(cast(cs_item_rev#36 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#61 as decimal(19,2)))), DecimalType(19,2), true))), DecimalType(38,21), true)) / 3.000000000000000000000), DecimalType(38,21), true)) * 100.000000000000000000000), DecimalType(38,17), true) AS cs_dev#68, ws_item_rev#61, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ws_item_rev#61 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#20 as decimal(18,2))) + promote_precision(cast(cs_item_rev#36 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#61 as decimal(19,2)))), DecimalType(19,2), true))), DecimalType(38,21), true)) / 3.000000000000000000000), DecimalType(38,21), true)) * 100.000000000000000000000), DecimalType(38,17), true) AS ws_dev#69, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#20 as decimal(18,2))) + promote_precision(cast(cs_item_rev#36 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#61 as decimal(19,2)))), DecimalType(19,2), true)) / 3.00), DecimalType(23,6), true) AS average#70]
Input [17]: [item_id#19, ss_item_rev#20, cs_item_rev#36, CAST(ss_items.ss_item_rev AS DECIMAL(19,3))#42, CAST(ss_items.ss_item_rev AS DECIMAL(20,3))#43, CAST(cs_items.cs_item_rev AS DECIMAL(19,3))#44, CAST(cs_items.cs_item_rev AS DECIMAL(20,3))#45, (0.90BD * ss_items.ss_item_rev)#46, (1.10BD * ss_items.ss_item_rev)#47, (0.90BD * cs_items.cs_item_rev)#48, (1.10BD * cs_items.cs_item_rev)#49, item_id#60, ws_item_rev#61, (0.90BD * ws_items.ws_item_rev)#62, (1.10BD * ws_items.ws_item_rev)#63, CAST(ws_items.ws_item_rev AS DECIMAL(19,3))#64, CAST(ws_items.ws_item_rev AS DECIMAL(20,3))#65]

(62) TakeOrderedAndProject
Input [8]: [item_id#19, ss_item_rev#20, ss_dev#67, cs_item_rev#36, cs_dev#68, ws_item_rev#61, ws_dev#69, average#70]
Arguments: 100, [item_id#19 ASC NULLS FIRST, ss_item_rev#20 ASC NULLS FIRST], [item_id#19, ss_item_rev#20, ss_dev#67, cs_item_rev#36, cs_dev#68, ws_item_rev#61, ws_dev#69, average#70]

===== Subqueries =====

Subquery:1 Hosting operator id = 15 Hosting Expression = Subquery scalar-subquery#11, [id=#12]
* Project (66)
+- * Filter (65)
   +- * ColumnarToRow (64)
      +- Scan parquet default.date_dim (63)


(63) Scan parquet default.date_dim
Output [2]: [d_date#71, d_week_seq#72]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-01-03)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(64) ColumnarToRow [codegen id : 1]
Input [2]: [d_date#71, d_week_seq#72]

(65) Filter [codegen id : 1]
Input [2]: [d_date#71, d_week_seq#72]
Condition : (isnotnull(d_date#71) AND (d_date#71 = 2000-01-03))

(66) Project [codegen id : 1]
Output [1]: [d_week_seq#72]
Input [2]: [d_date#71, d_week_seq#72]


