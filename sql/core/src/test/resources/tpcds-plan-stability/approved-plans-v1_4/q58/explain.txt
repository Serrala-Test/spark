== Physical Plan ==
TakeOrderedAndProject (80)
+- * Project (79)
   +- * BroadcastHashJoin Inner BuildRight (78)
      :- * Project (53)
      :  +- * BroadcastHashJoin Inner BuildRight (52)
      :     :- * Filter (27)
      :     :  +- * HashAggregate (26)
      :     :     +- Exchange (25)
      :     :        +- * HashAggregate (24)
      :     :           +- * Project (23)
      :     :              +- * BroadcastHashJoin Inner BuildRight (22)
      :     :                 :- * Project (10)
      :     :                 :  +- * BroadcastHashJoin Inner BuildRight (9)
      :     :                 :     :- * Filter (3)
      :     :                 :     :  +- * ColumnarToRow (2)
      :     :                 :     :     +- Scan parquet default.store_sales (1)
      :     :                 :     +- BroadcastExchange (8)
      :     :                 :        +- * Project (7)
      :     :                 :           +- * Filter (6)
      :     :                 :              +- * ColumnarToRow (5)
      :     :                 :                 +- Scan parquet default.item (4)
      :     :                 +- BroadcastExchange (21)
      :     :                    +- * Project (20)
      :     :                       +- * BroadcastHashJoin LeftSemi BuildRight (19)
      :     :                          :- * Filter (13)
      :     :                          :  +- * ColumnarToRow (12)
      :     :                          :     +- Scan parquet default.date_dim (11)
      :     :                          +- BroadcastExchange (18)
      :     :                             +- * Project (17)
      :     :                                +- * Filter (16)
      :     :                                   +- * ColumnarToRow (15)
      :     :                                      +- Scan parquet default.date_dim (14)
      :     +- BroadcastExchange (51)
      :        +- * Filter (50)
      :           +- * HashAggregate (49)
      :              +- Exchange (48)
      :                 +- * HashAggregate (47)
      :                    +- * Project (46)
      :                       +- * BroadcastHashJoin Inner BuildRight (45)
      :                          :- * Project (33)
      :                          :  +- * BroadcastHashJoin Inner BuildRight (32)
      :                          :     :- * Filter (30)
      :                          :     :  +- * ColumnarToRow (29)
      :                          :     :     +- Scan parquet default.catalog_sales (28)
      :                          :     +- ReusedExchange (31)
      :                          +- BroadcastExchange (44)
      :                             +- * Project (43)
      :                                +- * BroadcastHashJoin LeftSemi BuildRight (42)
      :                                   :- * Filter (36)
      :                                   :  +- * ColumnarToRow (35)
      :                                   :     +- Scan parquet default.date_dim (34)
      :                                   +- BroadcastExchange (41)
      :                                      +- * Project (40)
      :                                         +- * Filter (39)
      :                                            +- * ColumnarToRow (38)
      :                                               +- Scan parquet default.date_dim (37)
      +- BroadcastExchange (77)
         +- * Filter (76)
            +- * HashAggregate (75)
               +- Exchange (74)
                  +- * HashAggregate (73)
                     +- * Project (72)
                        +- * BroadcastHashJoin Inner BuildRight (71)
                           :- * Project (59)
                           :  +- * BroadcastHashJoin Inner BuildRight (58)
                           :     :- * Filter (56)
                           :     :  +- * ColumnarToRow (55)
                           :     :     +- Scan parquet default.web_sales (54)
                           :     +- ReusedExchange (57)
                           +- BroadcastExchange (70)
                              +- * Project (69)
                                 +- * BroadcastHashJoin LeftSemi BuildRight (68)
                                    :- * Filter (62)
                                    :  +- * ColumnarToRow (61)
                                    :     +- Scan parquet default.date_dim (60)
                                    +- BroadcastExchange (67)
                                       +- * Project (66)
                                          +- * Filter (65)
                                             +- * ColumnarToRow (64)
                                                +- Scan parquet default.date_dim (63)


(1) Scan parquet default.store_sales
Output [3]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_date_sk)]
ReadSchema: struct<ss_sold_date_sk:int,ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [3]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#3]

(3) Filter [codegen id : 4]
Input [3]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#3]
Condition : (isnotnull(ss_item_sk#2) AND isnotnull(ss_sold_date_sk#1))

(4) Scan parquet default.item
Output [2]: [i_item_sk#4, i_item_id#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [i_item_sk#4, i_item_id#5]

(6) Filter [codegen id : 1]
Input [2]: [i_item_sk#4, i_item_id#5]
Condition : (isnotnull(i_item_sk#4) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_item_id#5, 16, false, true)))

(7) Project [codegen id : 1]
Output [2]: [i_item_sk#4, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_item_id#5, 16, false, true) AS i_item_id#6]
Input [2]: [i_item_sk#4, i_item_id#5]

(8) BroadcastExchange
Input [2]: [i_item_sk#4, i_item_id#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#7]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#2]
Right keys [1]: [i_item_sk#4]
Join condition: None

(10) Project [codegen id : 4]
Output [3]: [ss_sold_date_sk#1, ss_ext_sales_price#3, i_item_id#6]
Input [5]: [ss_sold_date_sk#1, ss_item_sk#2, ss_ext_sales_price#3, i_item_sk#4, i_item_id#6]

(11) Scan parquet default.date_dim
Output [2]: [d_date_sk#8, d_date#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(12) ColumnarToRow [codegen id : 3]
Input [2]: [d_date_sk#8, d_date#9]

(13) Filter [codegen id : 3]
Input [2]: [d_date_sk#8, d_date#9]
Condition : isnotnull(d_date_sk#8)

(14) Scan parquet default.date_dim
Output [2]: [d_date#9, d_week_seq#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(15) ColumnarToRow [codegen id : 2]
Input [2]: [d_date#9, d_week_seq#10]

(16) Filter [codegen id : 2]
Input [2]: [d_date#9, d_week_seq#10]
Condition : (isnotnull(d_week_seq#10) AND (d_week_seq#10 = Subquery scalar-subquery#11, [id=#12]))

(17) Project [codegen id : 2]
Output [1]: [d_date#9 AS d_date#9#13]
Input [2]: [d_date#9, d_week_seq#10]

(18) BroadcastExchange
Input [1]: [d_date#9#13]
Arguments: HashedRelationBroadcastMode(List(input[0, date, true]),false), [id=#14]

(19) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [d_date#9]
Right keys [1]: [d_date#9#13]
Join condition: None

(20) Project [codegen id : 3]
Output [1]: [d_date_sk#8]
Input [2]: [d_date_sk#8, d_date#9]

(21) BroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15]

(22) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#1]
Right keys [1]: [d_date_sk#8]
Join condition: None

(23) Project [codegen id : 4]
Output [2]: [ss_ext_sales_price#3, i_item_id#6]
Input [4]: [ss_sold_date_sk#1, ss_ext_sales_price#3, i_item_id#6, d_date_sk#8]

(24) HashAggregate [codegen id : 4]
Input [2]: [ss_ext_sales_price#3, i_item_id#6]
Keys [1]: [i_item_id#6]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [1]: [sum#16]
Results [2]: [i_item_id#6, sum#17]

(25) Exchange
Input [2]: [i_item_id#6, sum#17]
Arguments: hashpartitioning(i_item_id#6, 5), ENSURE_REQUIREMENTS, [id=#18]

(26) HashAggregate [codegen id : 15]
Input [2]: [i_item_id#6, sum#17]
Keys [1]: [i_item_id#6]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#3))#19]
Results [2]: [i_item_id#6 AS item_id#20, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#19,17,2) AS ss_item_rev#21]

(27) Filter [codegen id : 15]
Input [2]: [item_id#20, ss_item_rev#21]
Condition : isnotnull(ss_item_rev#21)

(28) Scan parquet default.catalog_sales
Output [3]: [cs_sold_date_sk#22, cs_item_sk#23, cs_ext_sales_price#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(29) ColumnarToRow [codegen id : 8]
Input [3]: [cs_sold_date_sk#22, cs_item_sk#23, cs_ext_sales_price#24]

(30) Filter [codegen id : 8]
Input [3]: [cs_sold_date_sk#22, cs_item_sk#23, cs_ext_sales_price#24]
Condition : (isnotnull(cs_item_sk#23) AND isnotnull(cs_sold_date_sk#22))

(31) ReusedExchange [Reuses operator id: 8]
Output [2]: [i_item_sk#4, i_item_id#25]

(32) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_item_sk#23]
Right keys [1]: [i_item_sk#4]
Join condition: None

(33) Project [codegen id : 8]
Output [3]: [cs_sold_date_sk#22, cs_ext_sales_price#24, i_item_id#25]
Input [5]: [cs_sold_date_sk#22, cs_item_sk#23, cs_ext_sales_price#24, i_item_sk#4, i_item_id#25]

(34) Scan parquet default.date_dim
Output [2]: [d_date_sk#8, d_date#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(35) ColumnarToRow [codegen id : 7]
Input [2]: [d_date_sk#8, d_date#9]

(36) Filter [codegen id : 7]
Input [2]: [d_date_sk#8, d_date#9]
Condition : isnotnull(d_date_sk#8)

(37) Scan parquet default.date_dim
Output [2]: [d_date#9, d_week_seq#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(38) ColumnarToRow [codegen id : 6]
Input [2]: [d_date#9, d_week_seq#10]

(39) Filter [codegen id : 6]
Input [2]: [d_date#9, d_week_seq#10]
Condition : (isnotnull(d_week_seq#10) AND (d_week_seq#10 = ReusedSubquery Subquery scalar-subquery#11, [id=#12]))

(40) Project [codegen id : 6]
Output [1]: [d_date#9 AS d_date#9#26]
Input [2]: [d_date#9, d_week_seq#10]

(41) BroadcastExchange
Input [1]: [d_date#9#26]
Arguments: HashedRelationBroadcastMode(List(input[0, date, true]),false), [id=#27]

(42) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [d_date#9]
Right keys [1]: [d_date#9#26]
Join condition: None

(43) Project [codegen id : 7]
Output [1]: [d_date_sk#8]
Input [2]: [d_date_sk#8, d_date#9]

(44) BroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#28]

(45) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [cs_sold_date_sk#22]
Right keys [1]: [d_date_sk#8]
Join condition: None

(46) Project [codegen id : 8]
Output [2]: [cs_ext_sales_price#24, i_item_id#25]
Input [4]: [cs_sold_date_sk#22, cs_ext_sales_price#24, i_item_id#25, d_date_sk#8]

(47) HashAggregate [codegen id : 8]
Input [2]: [cs_ext_sales_price#24, i_item_id#25]
Keys [1]: [i_item_id#25]
Functions [1]: [partial_sum(UnscaledValue(cs_ext_sales_price#24))]
Aggregate Attributes [1]: [sum#29]
Results [2]: [i_item_id#25, sum#30]

(48) Exchange
Input [2]: [i_item_id#25, sum#30]
Arguments: hashpartitioning(i_item_id#25, 5), ENSURE_REQUIREMENTS, [id=#31]

(49) HashAggregate [codegen id : 9]
Input [2]: [i_item_id#25, sum#30]
Keys [1]: [i_item_id#25]
Functions [1]: [sum(UnscaledValue(cs_ext_sales_price#24))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_ext_sales_price#24))#32]
Results [2]: [i_item_id#25 AS item_id#33, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#24))#32,17,2) AS cs_item_rev#34]

(50) Filter [codegen id : 9]
Input [2]: [item_id#33, cs_item_rev#34]
Condition : isnotnull(cs_item_rev#34)

(51) BroadcastExchange
Input [2]: [item_id#33, cs_item_rev#34]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#35]

(52) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [item_id#20]
Right keys [1]: [item_id#33]
Join condition: ((((cast(ss_item_rev#21 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(cs_item_rev#34)), DecimalType(19,3), true)) AND (cast(ss_item_rev#21 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(cs_item_rev#34)), DecimalType(20,3), true))) AND (cast(cs_item_rev#34 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ss_item_rev#21)), DecimalType(19,3), true))) AND (cast(cs_item_rev#34 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ss_item_rev#21)), DecimalType(20,3), true)))

(53) Project [codegen id : 15]
Output [3]: [item_id#20, ss_item_rev#21, cs_item_rev#34]
Input [4]: [item_id#20, ss_item_rev#21, item_id#33, cs_item_rev#34]

(54) Scan parquet default.web_sales
Output [3]: [ws_sold_date_sk#36, ws_item_sk#37, ws_ext_sales_price#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_date_sk)]
ReadSchema: struct<ws_sold_date_sk:int,ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>

(55) ColumnarToRow [codegen id : 13]
Input [3]: [ws_sold_date_sk#36, ws_item_sk#37, ws_ext_sales_price#38]

(56) Filter [codegen id : 13]
Input [3]: [ws_sold_date_sk#36, ws_item_sk#37, ws_ext_sales_price#38]
Condition : (isnotnull(ws_item_sk#37) AND isnotnull(ws_sold_date_sk#36))

(57) ReusedExchange [Reuses operator id: 8]
Output [2]: [i_item_sk#4, i_item_id#39]

(58) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ws_item_sk#37]
Right keys [1]: [i_item_sk#4]
Join condition: None

(59) Project [codegen id : 13]
Output [3]: [ws_sold_date_sk#36, ws_ext_sales_price#38, i_item_id#39]
Input [5]: [ws_sold_date_sk#36, ws_item_sk#37, ws_ext_sales_price#38, i_item_sk#4, i_item_id#39]

(60) Scan parquet default.date_dim
Output [2]: [d_date_sk#8, d_date#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(61) ColumnarToRow [codegen id : 12]
Input [2]: [d_date_sk#8, d_date#9]

(62) Filter [codegen id : 12]
Input [2]: [d_date_sk#8, d_date#9]
Condition : isnotnull(d_date_sk#8)

(63) Scan parquet default.date_dim
Output [2]: [d_date#9, d_week_seq#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(64) ColumnarToRow [codegen id : 11]
Input [2]: [d_date#9, d_week_seq#10]

(65) Filter [codegen id : 11]
Input [2]: [d_date#9, d_week_seq#10]
Condition : (isnotnull(d_week_seq#10) AND (d_week_seq#10 = ReusedSubquery Subquery scalar-subquery#11, [id=#12]))

(66) Project [codegen id : 11]
Output [1]: [d_date#9 AS d_date#9#40]
Input [2]: [d_date#9, d_week_seq#10]

(67) BroadcastExchange
Input [1]: [d_date#9#40]
Arguments: HashedRelationBroadcastMode(List(input[0, date, true]),false), [id=#41]

(68) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [d_date#9]
Right keys [1]: [d_date#9#40]
Join condition: None

(69) Project [codegen id : 12]
Output [1]: [d_date_sk#8]
Input [2]: [d_date_sk#8, d_date#9]

(70) BroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#42]

(71) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [ws_sold_date_sk#36]
Right keys [1]: [d_date_sk#8]
Join condition: None

(72) Project [codegen id : 13]
Output [2]: [ws_ext_sales_price#38, i_item_id#39]
Input [4]: [ws_sold_date_sk#36, ws_ext_sales_price#38, i_item_id#39, d_date_sk#8]

(73) HashAggregate [codegen id : 13]
Input [2]: [ws_ext_sales_price#38, i_item_id#39]
Keys [1]: [i_item_id#39]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#38))]
Aggregate Attributes [1]: [sum#43]
Results [2]: [i_item_id#39, sum#44]

(74) Exchange
Input [2]: [i_item_id#39, sum#44]
Arguments: hashpartitioning(i_item_id#39, 5), ENSURE_REQUIREMENTS, [id=#45]

(75) HashAggregate [codegen id : 14]
Input [2]: [i_item_id#39, sum#44]
Keys [1]: [i_item_id#39]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#38))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#38))#46]
Results [2]: [i_item_id#39 AS item_id#47, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#38))#46,17,2) AS ws_item_rev#48]

(76) Filter [codegen id : 14]
Input [2]: [item_id#47, ws_item_rev#48]
Condition : isnotnull(ws_item_rev#48)

(77) BroadcastExchange
Input [2]: [item_id#47, ws_item_rev#48]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#49]

(78) BroadcastHashJoin [codegen id : 15]
Left keys [1]: [item_id#20]
Right keys [1]: [item_id#47]
Join condition: ((((((((cast(ss_item_rev#21 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ws_item_rev#48)), DecimalType(19,3), true)) AND (cast(ss_item_rev#21 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ws_item_rev#48)), DecimalType(20,3), true))) AND (cast(cs_item_rev#34 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ws_item_rev#48)), DecimalType(19,3), true))) AND (cast(cs_item_rev#34 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ws_item_rev#48)), DecimalType(20,3), true))) AND (cast(ws_item_rev#48 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(ss_item_rev#21)), DecimalType(19,3), true))) AND (cast(ws_item_rev#48 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(ss_item_rev#21)), DecimalType(20,3), true))) AND (cast(ws_item_rev#48 as decimal(19,3)) >= CheckOverflow((0.90 * promote_precision(cs_item_rev#34)), DecimalType(19,3), true))) AND (cast(ws_item_rev#48 as decimal(20,3)) <= CheckOverflow((1.10 * promote_precision(cs_item_rev#34)), DecimalType(20,3), true)))

(79) Project [codegen id : 15]
Output [8]: [item_id#20, ss_item_rev#21, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ss_item_rev#21 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#21 as decimal(18,2))) + promote_precision(cast(cs_item_rev#34 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#48 as decimal(19,2)))), DecimalType(19,2), true))), DecimalType(38,21), true)) / 3.000000000000000000000), DecimalType(38,21), true)) * 100.000000000000000000000), DecimalType(38,17), true) AS ss_dev#50, cs_item_rev#34, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(cs_item_rev#34 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#21 as decimal(18,2))) + promote_precision(cast(cs_item_rev#34 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#48 as decimal(19,2)))), DecimalType(19,2), true))), DecimalType(38,21), true)) / 3.000000000000000000000), DecimalType(38,21), true)) * 100.000000000000000000000), DecimalType(38,17), true) AS cs_dev#51, ws_item_rev#48, CheckOverflow((promote_precision(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(ws_item_rev#48 as decimal(19,2))) / promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#21 as decimal(18,2))) + promote_precision(cast(cs_item_rev#34 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#48 as decimal(19,2)))), DecimalType(19,2), true))), DecimalType(38,21), true)) / 3.000000000000000000000), DecimalType(38,21), true)) * 100.000000000000000000000), DecimalType(38,17), true) AS ws_dev#52, CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_item_rev#21 as decimal(18,2))) + promote_precision(cast(cs_item_rev#34 as decimal(18,2)))), DecimalType(18,2), true) as decimal(19,2))) + promote_precision(cast(ws_item_rev#48 as decimal(19,2)))), DecimalType(19,2), true)) / 3.00), DecimalType(23,6), true) AS average#53]
Input [5]: [item_id#20, ss_item_rev#21, cs_item_rev#34, item_id#47, ws_item_rev#48]

(80) TakeOrderedAndProject
Input [8]: [item_id#20, ss_item_rev#21, ss_dev#50, cs_item_rev#34, cs_dev#51, ws_item_rev#48, ws_dev#52, average#53]
Arguments: 100, [item_id#20 ASC NULLS FIRST, ss_item_rev#21 ASC NULLS FIRST], [item_id#20, ss_item_rev#21, ss_dev#50, cs_item_rev#34, cs_dev#51, ws_item_rev#48, ws_dev#52, average#53]

===== Subqueries =====

Subquery:1 Hosting operator id = 16 Hosting Expression = Subquery scalar-subquery#11, [id=#12]
* Project (84)
+- * Filter (83)
   +- * ColumnarToRow (82)
      +- Scan parquet default.date_dim (81)


(81) Scan parquet default.date_dim
Output [2]: [d_date#9, d_week_seq#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-01-03)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(82) ColumnarToRow [codegen id : 1]
Input [2]: [d_date#9, d_week_seq#10]

(83) Filter [codegen id : 1]
Input [2]: [d_date#9, d_week_seq#10]
Condition : (isnotnull(d_date#9) AND (d_date#9 = 10959))

(84) Project [codegen id : 1]
Output [1]: [d_week_seq#10]
Input [2]: [d_date#9, d_week_seq#10]

Subquery:2 Hosting operator id = 39 Hosting Expression = ReusedSubquery Subquery scalar-subquery#11, [id=#12]

Subquery:3 Hosting operator id = 65 Hosting Expression = ReusedSubquery Subquery scalar-subquery#11, [id=#12]


