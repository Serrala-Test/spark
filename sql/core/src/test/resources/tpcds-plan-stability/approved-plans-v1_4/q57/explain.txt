== Physical Plan ==
TakeOrderedAndProject (53)
+- * Project (52)
   +- * BroadcastHashJoin Inner BuildRight (51)
      :- * Project (44)
      :  +- * BroadcastHashJoin Inner BuildRight (43)
      :     :- * Filter (34)
      :     :  +- Window (33)
      :     :     +- * Sort (32)
      :     :        +- Exchange (31)
      :     :           +- * Project (30)
      :     :              +- Window (29)
      :     :                 +- * Sort (28)
      :     :                    +- Exchange (27)
      :     :                       +- * HashAggregate (26)
      :     :                          +- Exchange (25)
      :     :                             +- * HashAggregate (24)
      :     :                                +- * Project (23)
      :     :                                   +- * BroadcastHashJoin Inner BuildRight (22)
      :     :                                      :- * Project (16)
      :     :                                      :  +- * BroadcastHashJoin Inner BuildRight (15)
      :     :                                      :     :- * Project (10)
      :     :                                      :     :  +- * BroadcastHashJoin Inner BuildRight (9)
      :     :                                      :     :     :- * Project (4)
      :     :                                      :     :     :  +- * Filter (3)
      :     :                                      :     :     :     +- * ColumnarToRow (2)
      :     :                                      :     :     :        +- Scan parquet default.item (1)
      :     :                                      :     :     +- BroadcastExchange (8)
      :     :                                      :     :        +- * Filter (7)
      :     :                                      :     :           +- * ColumnarToRow (6)
      :     :                                      :     :              +- Scan parquet default.catalog_sales (5)
      :     :                                      :     +- BroadcastExchange (14)
      :     :                                      :        +- * Filter (13)
      :     :                                      :           +- * ColumnarToRow (12)
      :     :                                      :              +- Scan parquet default.date_dim (11)
      :     :                                      +- BroadcastExchange (21)
      :     :                                         +- * Project (20)
      :     :                                            +- * Filter (19)
      :     :                                               +- * ColumnarToRow (18)
      :     :                                                  +- Scan parquet default.call_center (17)
      :     +- BroadcastExchange (42)
      :        +- * Project (41)
      :           +- * Filter (40)
      :              +- Window (39)
      :                 +- * Sort (38)
      :                    +- Exchange (37)
      :                       +- * HashAggregate (36)
      :                          +- ReusedExchange (35)
      +- BroadcastExchange (50)
         +- * Project (49)
            +- * Filter (48)
               +- Window (47)
                  +- * Sort (46)
                     +- ReusedExchange (45)


(1) Scan parquet default.item
Output [3]: [i_item_sk#1, i_brand#2, i_category#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_category:string>

(2) ColumnarToRow [codegen id : 4]
Input [3]: [i_item_sk#1, i_brand#2, i_category#3]

(3) Filter [codegen id : 4]
Input [3]: [i_item_sk#1, i_brand#2, i_category#3]
Condition : ((isnotnull(i_item_sk#1) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#3, 50, false, true))) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_brand#2, 50, false, true)))

(4) Project [codegen id : 4]
Output [3]: [i_item_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_brand#2, 50, false, true) AS i_brand#4, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, paddingWithLengthCheck, i_category#3, 50, false, true) AS i_category#5]
Input [3]: [i_item_sk#1, i_brand#2, i_category#3]

(5) Scan parquet default.catalog_sales
Output [4]: [cs_sold_date_sk#6, cs_call_center_sk#7, cs_item_sk#8, cs_sales_price#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_date_sk), IsNotNull(cs_call_center_sk)]
ReadSchema: struct<cs_sold_date_sk:int,cs_call_center_sk:int,cs_item_sk:int,cs_sales_price:decimal(7,2)>

(6) ColumnarToRow [codegen id : 1]
Input [4]: [cs_sold_date_sk#6, cs_call_center_sk#7, cs_item_sk#8, cs_sales_price#9]

(7) Filter [codegen id : 1]
Input [4]: [cs_sold_date_sk#6, cs_call_center_sk#7, cs_item_sk#8, cs_sales_price#9]
Condition : ((isnotnull(cs_item_sk#8) AND isnotnull(cs_sold_date_sk#6)) AND isnotnull(cs_call_center_sk#7))

(8) BroadcastExchange
Input [4]: [cs_sold_date_sk#6, cs_call_center_sk#7, cs_item_sk#8, cs_sales_price#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[2, int, false] as bigint)),false), [id=#10]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [i_item_sk#1]
Right keys [1]: [cs_item_sk#8]
Join condition: None

(10) Project [codegen id : 4]
Output [5]: [i_brand#4, i_category#5, cs_sold_date_sk#6, cs_call_center_sk#7, cs_sales_price#9]
Input [7]: [i_item_sk#1, i_brand#4, i_category#5, cs_sold_date_sk#6, cs_call_center_sk#7, cs_item_sk#8, cs_sales_price#9]

(11) Scan parquet default.date_dim
Output [3]: [d_date_sk#11, d_year#12, d_moy#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [Or(Or(EqualTo(d_year,1999),And(EqualTo(d_year,1998),EqualTo(d_moy,12))),And(EqualTo(d_year,2000),EqualTo(d_moy,1))), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(12) ColumnarToRow [codegen id : 2]
Input [3]: [d_date_sk#11, d_year#12, d_moy#13]

(13) Filter [codegen id : 2]
Input [3]: [d_date_sk#11, d_year#12, d_moy#13]
Condition : ((((d_year#12 = 1999) OR ((d_year#12 = 1998) AND (d_moy#13 = 12))) OR ((d_year#12 = 2000) AND (d_moy#13 = 1))) AND isnotnull(d_date_sk#11))

(14) BroadcastExchange
Input [3]: [d_date_sk#11, d_year#12, d_moy#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14]

(15) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#6]
Right keys [1]: [d_date_sk#11]
Join condition: None

(16) Project [codegen id : 4]
Output [6]: [i_brand#4, i_category#5, cs_call_center_sk#7, cs_sales_price#9, d_year#12, d_moy#13]
Input [8]: [i_brand#4, i_category#5, cs_sold_date_sk#6, cs_call_center_sk#7, cs_sales_price#9, d_date_sk#11, d_year#12, d_moy#13]

(17) Scan parquet default.call_center
Output [2]: [cc_call_center_sk#15, cc_name#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/call_center]
PushedFilters: [IsNotNull(cc_call_center_sk)]
ReadSchema: struct<cc_call_center_sk:int,cc_name:string>

(18) ColumnarToRow [codegen id : 3]
Input [2]: [cc_call_center_sk#15, cc_name#16]

(19) Filter [codegen id : 3]
Input [2]: [cc_call_center_sk#15, cc_name#16]
Condition : (isnotnull(cc_call_center_sk#15) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, cc_name#16, 50, false, true)))

(20) Project [codegen id : 3]
Output [2]: [cc_call_center_sk#15, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, lengthCheck, cc_name#16, 50, false, true) AS cc_name#17]
Input [2]: [cc_call_center_sk#15, cc_name#16]

(21) BroadcastExchange
Input [2]: [cc_call_center_sk#15, cc_name#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#18]

(22) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_call_center_sk#7]
Right keys [1]: [cc_call_center_sk#15]
Join condition: None

(23) Project [codegen id : 4]
Output [6]: [i_brand#4, i_category#5, cs_sales_price#9, d_year#12, d_moy#13, cc_name#17]
Input [8]: [i_brand#4, i_category#5, cs_call_center_sk#7, cs_sales_price#9, d_year#12, d_moy#13, cc_call_center_sk#15, cc_name#17]

(24) HashAggregate [codegen id : 4]
Input [6]: [i_brand#4, i_category#5, cs_sales_price#9, d_year#12, d_moy#13, cc_name#17]
Keys [5]: [i_category#5, i_brand#4, cc_name#17, d_year#12, d_moy#13]
Functions [1]: [partial_sum(UnscaledValue(cs_sales_price#9))]
Aggregate Attributes [1]: [sum#19]
Results [6]: [i_category#5, i_brand#4, cc_name#17, d_year#12, d_moy#13, sum#20]

(25) Exchange
Input [6]: [i_category#5, i_brand#4, cc_name#17, d_year#12, d_moy#13, sum#20]
Arguments: hashpartitioning(i_category#5, i_brand#4, cc_name#17, d_year#12, d_moy#13, 5), ENSURE_REQUIREMENTS, [id=#21]

(26) HashAggregate [codegen id : 5]
Input [6]: [i_category#5, i_brand#4, cc_name#17, d_year#12, d_moy#13, sum#20]
Keys [5]: [i_category#5, i_brand#4, cc_name#17, d_year#12, d_moy#13]
Functions [1]: [sum(UnscaledValue(cs_sales_price#9))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_sales_price#9))#22]
Results [7]: [i_category#5, i_brand#4, cc_name#17, d_year#12, d_moy#13, MakeDecimal(sum(UnscaledValue(cs_sales_price#9))#22,17,2) AS sum_sales#23, MakeDecimal(sum(UnscaledValue(cs_sales_price#9))#22,17,2) AS _w0#24]

(27) Exchange
Input [7]: [i_category#5, i_brand#4, cc_name#17, d_year#12, d_moy#13, sum_sales#23, _w0#24]
Arguments: hashpartitioning(i_category#5, i_brand#4, cc_name#17, d_year#12, 5), ENSURE_REQUIREMENTS, [id=#25]

(28) Sort [codegen id : 6]
Input [7]: [i_category#5, i_brand#4, cc_name#17, d_year#12, d_moy#13, sum_sales#23, _w0#24]
Arguments: [i_category#5 ASC NULLS FIRST, i_brand#4 ASC NULLS FIRST, cc_name#17 ASC NULLS FIRST, d_year#12 ASC NULLS FIRST], false, 0

(29) Window
Input [7]: [i_category#5, i_brand#4, cc_name#17, d_year#12, d_moy#13, sum_sales#23, _w0#24]
Arguments: [avg(_w0#24) windowspecdefinition(i_category#5, i_brand#4, cc_name#17, d_year#12, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#26], [i_category#5, i_brand#4, cc_name#17, d_year#12]

(30) Project [codegen id : 7]
Output [7]: [i_category#5, i_brand#4, cc_name#17, d_year#12, d_moy#13, sum_sales#23, avg_monthly_sales#26]
Input [8]: [i_category#5, i_brand#4, cc_name#17, d_year#12, d_moy#13, sum_sales#23, _w0#24, avg_monthly_sales#26]

(31) Exchange
Input [7]: [i_category#5, i_brand#4, cc_name#17, d_year#12, d_moy#13, sum_sales#23, avg_monthly_sales#26]
Arguments: hashpartitioning(i_category#5, i_brand#4, cc_name#17, 5), ENSURE_REQUIREMENTS, [id=#27]

(32) Sort [codegen id : 8]
Input [7]: [i_category#5, i_brand#4, cc_name#17, d_year#12, d_moy#13, sum_sales#23, avg_monthly_sales#26]
Arguments: [i_category#5 ASC NULLS FIRST, i_brand#4 ASC NULLS FIRST, cc_name#17 ASC NULLS FIRST, d_year#12 ASC NULLS FIRST, d_moy#13 ASC NULLS FIRST], false, 0

(33) Window
Input [7]: [i_category#5, i_brand#4, cc_name#17, d_year#12, d_moy#13, sum_sales#23, avg_monthly_sales#26]
Arguments: [rank(d_year#12, d_moy#13) windowspecdefinition(i_category#5, i_brand#4, cc_name#17, d_year#12 ASC NULLS FIRST, d_moy#13 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#28], [i_category#5, i_brand#4, cc_name#17], [d_year#12 ASC NULLS FIRST, d_moy#13 ASC NULLS FIRST]

(34) Filter [codegen id : 23]
Input [8]: [i_category#5, i_brand#4, cc_name#17, d_year#12, d_moy#13, sum_sales#23, avg_monthly_sales#26, rn#28]
Condition : ((((((isnotnull(d_year#12) AND isnotnull(avg_monthly_sales#26)) AND (d_year#12 = 1999)) AND (avg_monthly_sales#26 > 0.000000)) AND (avg_monthly_sales#26 > 0.000000)) AND (CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#23 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#26 as decimal(22,6)))), DecimalType(22,6), true))) / promote_precision(cast(avg_monthly_sales#26 as decimal(22,6)))), DecimalType(38,16), true) > 0.1000000000000000)) AND isnotnull(rn#28))

(35) ReusedExchange [Reuses operator id: 25]
Output [6]: [i_category#29, i_brand#30, cc_name#31, d_year#32, d_moy#33, sum#34]

(36) HashAggregate [codegen id : 13]
Input [6]: [i_category#29, i_brand#30, cc_name#31, d_year#32, d_moy#33, sum#34]
Keys [5]: [i_category#29, i_brand#30, cc_name#31, d_year#32, d_moy#33]
Functions [1]: [sum(UnscaledValue(cs_sales_price#9))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_sales_price#9))#35]
Results [6]: [i_category#29, i_brand#30, cc_name#31, d_year#32, d_moy#33, MakeDecimal(sum(UnscaledValue(cs_sales_price#9))#35,17,2) AS sum_sales#36]

(37) Exchange
Input [6]: [i_category#29, i_brand#30, cc_name#31, d_year#32, d_moy#33, sum_sales#36]
Arguments: hashpartitioning(i_category#29, i_brand#30, cc_name#31, 5), ENSURE_REQUIREMENTS, [id=#37]

(38) Sort [codegen id : 14]
Input [6]: [i_category#29, i_brand#30, cc_name#31, d_year#32, d_moy#33, sum_sales#36]
Arguments: [i_category#29 ASC NULLS FIRST, i_brand#30 ASC NULLS FIRST, cc_name#31 ASC NULLS FIRST, d_year#32 ASC NULLS FIRST, d_moy#33 ASC NULLS FIRST], false, 0

(39) Window
Input [6]: [i_category#29, i_brand#30, cc_name#31, d_year#32, d_moy#33, sum_sales#36]
Arguments: [rank(d_year#32, d_moy#33) windowspecdefinition(i_category#29, i_brand#30, cc_name#31, d_year#32 ASC NULLS FIRST, d_moy#33 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#38], [i_category#29, i_brand#30, cc_name#31], [d_year#32 ASC NULLS FIRST, d_moy#33 ASC NULLS FIRST]

(40) Filter [codegen id : 15]
Input [7]: [i_category#29, i_brand#30, cc_name#31, d_year#32, d_moy#33, sum_sales#36, rn#38]
Condition : isnotnull(rn#38)

(41) Project [codegen id : 15]
Output [5]: [i_category#29, i_brand#30, cc_name#31, sum_sales#36, rn#38]
Input [7]: [i_category#29, i_brand#30, cc_name#31, d_year#32, d_moy#33, sum_sales#36, rn#38]

(42) BroadcastExchange
Input [5]: [i_category#29, i_brand#30, cc_name#31, sum_sales#36, rn#38]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true], input[1, string, true], input[2, string, true], (input[4, int, true] + 1)),false), [id=#39]

(43) BroadcastHashJoin [codegen id : 23]
Left keys [4]: [i_category#5, i_brand#4, cc_name#17, rn#28]
Right keys [4]: [i_category#29, i_brand#30, cc_name#31, (rn#38 + 1)]
Join condition: None

(44) Project [codegen id : 23]
Output [9]: [i_category#5, i_brand#4, cc_name#17, d_year#12, d_moy#13, sum_sales#23, avg_monthly_sales#26, rn#28, sum_sales#36]
Input [13]: [i_category#5, i_brand#4, cc_name#17, d_year#12, d_moy#13, sum_sales#23, avg_monthly_sales#26, rn#28, i_category#29, i_brand#30, cc_name#31, sum_sales#36, rn#38]

(45) ReusedExchange [Reuses operator id: 37]
Output [6]: [i_category#40, i_brand#41, cc_name#42, d_year#43, d_moy#44, sum_sales#45]

(46) Sort [codegen id : 21]
Input [6]: [i_category#40, i_brand#41, cc_name#42, d_year#43, d_moy#44, sum_sales#45]
Arguments: [i_category#40 ASC NULLS FIRST, i_brand#41 ASC NULLS FIRST, cc_name#42 ASC NULLS FIRST, d_year#43 ASC NULLS FIRST, d_moy#44 ASC NULLS FIRST], false, 0

(47) Window
Input [6]: [i_category#40, i_brand#41, cc_name#42, d_year#43, d_moy#44, sum_sales#45]
Arguments: [rank(d_year#43, d_moy#44) windowspecdefinition(i_category#40, i_brand#41, cc_name#42, d_year#43 ASC NULLS FIRST, d_moy#44 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#46], [i_category#40, i_brand#41, cc_name#42], [d_year#43 ASC NULLS FIRST, d_moy#44 ASC NULLS FIRST]

(48) Filter [codegen id : 22]
Input [7]: [i_category#40, i_brand#41, cc_name#42, d_year#43, d_moy#44, sum_sales#45, rn#46]
Condition : isnotnull(rn#46)

(49) Project [codegen id : 22]
Output [5]: [i_category#40, i_brand#41, cc_name#42, sum_sales#45, rn#46]
Input [7]: [i_category#40, i_brand#41, cc_name#42, d_year#43, d_moy#44, sum_sales#45, rn#46]

(50) BroadcastExchange
Input [5]: [i_category#40, i_brand#41, cc_name#42, sum_sales#45, rn#46]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true], input[1, string, true], input[2, string, true], (input[4, int, true] - 1)),false), [id=#47]

(51) BroadcastHashJoin [codegen id : 23]
Left keys [4]: [i_category#5, i_brand#4, cc_name#17, rn#28]
Right keys [4]: [i_category#40, i_brand#41, cc_name#42, (rn#46 - 1)]
Join condition: None

(52) Project [codegen id : 23]
Output [9]: [i_category#5, i_brand#4, cc_name#17, d_year#12, d_moy#13, avg_monthly_sales#26, sum_sales#23, sum_sales#36 AS psum#48, sum_sales#45 AS nsum#49]
Input [14]: [i_category#5, i_brand#4, cc_name#17, d_year#12, d_moy#13, sum_sales#23, avg_monthly_sales#26, rn#28, sum_sales#36, i_category#40, i_brand#41, cc_name#42, sum_sales#45, rn#46]

(53) TakeOrderedAndProject
Input [9]: [i_category#5, i_brand#4, cc_name#17, d_year#12, d_moy#13, avg_monthly_sales#26, sum_sales#23, psum#48, nsum#49]
Arguments: 100, [CheckOverflow((promote_precision(cast(sum_sales#23 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#26 as decimal(22,6)))), DecimalType(22,6), true) ASC NULLS FIRST, cc_name#17 ASC NULLS FIRST], [i_category#5, i_brand#4, cc_name#17, d_year#12, d_moy#13, avg_monthly_sales#26, sum_sales#23, psum#48, nsum#49]

