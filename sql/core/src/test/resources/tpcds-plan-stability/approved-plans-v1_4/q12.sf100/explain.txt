== Physical Plan ==
TakeOrderedAndProject (22)
+- * Project (21)
   +- Window (20)
      +- * Sort (19)
         +- Exchange (18)
            +- * HashAggregate (17)
               +- Exchange (16)
                  +- * HashAggregate (15)
                     +- * Project (14)
                        +- * BroadcastHashJoin Inner BuildRight (13)
                           :- * Project (11)
                           :  +- * SortMergeJoin Inner (10)
                           :     :- * Sort (4)
                           :     :  +- Exchange (3)
                           :     :     +- * ColumnarToRow (2)
                           :     :        +- Scan parquet default.web_sales (1)
                           :     +- * Sort (9)
                           :        +- Exchange (8)
                           :           +- * Filter (7)
                           :              +- * ColumnarToRow (6)
                           :                 +- Scan parquet default.item (5)
                           +- ReusedExchange (12)


(1) Scan parquet default.web_sales
Output [3]: [ws_item_sk#1, ws_ext_sales_price#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#3), dynamicpruningexpression(ws_sold_date_sk#3 IN dynamicpruning#4)]
ReadSchema: struct<ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [3]: [ws_item_sk#1, ws_ext_sales_price#2, ws_sold_date_sk#3]

(3) Exchange
Input [3]: [ws_item_sk#1, ws_ext_sales_price#2, ws_sold_date_sk#3]
Arguments: hashpartitioning(ws_item_sk#1, 5), ENSURE_REQUIREMENTS, [id=#5]

(4) Sort [codegen id : 2]
Input [3]: [ws_item_sk#1, ws_ext_sales_price#2, ws_sold_date_sk#3]
Arguments: [ws_item_sk#1 ASC NULLS FIRST], false, 0

(5) Scan parquet default.item
Output [6]: [i_item_sk#6, i_item_id#7, i_item_desc#8, i_current_price#9, i_class#10, i_category#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [In(i_category, [Books                                             ,Home                                              ,Sports                                            ])]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string,i_current_price:decimal(7,2),i_class:string,i_category:string>

(6) ColumnarToRow [codegen id : 3]
Input [6]: [i_item_sk#6, i_item_id#7, i_item_desc#8, i_current_price#9, i_class#10, i_category#11]

(7) Filter [codegen id : 3]
Input [6]: [i_item_sk#6, i_item_id#7, i_item_desc#8, i_current_price#9, i_class#10, i_category#11]
Condition : i_category#11 IN (Sports                                            ,Books                                             ,Home                                              )

(8) Exchange
Input [6]: [i_item_sk#6, i_item_id#7, i_item_desc#8, i_current_price#9, i_class#10, i_category#11]
Arguments: hashpartitioning(i_item_sk#6, 5), ENSURE_REQUIREMENTS, [id=#12]

(9) Sort [codegen id : 4]
Input [6]: [i_item_sk#6, i_item_id#7, i_item_desc#8, i_current_price#9, i_class#10, i_category#11]
Arguments: [i_item_sk#6 ASC NULLS FIRST], false, 0

(10) SortMergeJoin [codegen id : 6]
Left keys [1]: [ws_item_sk#1]
Right keys [1]: [i_item_sk#6]
Join condition: None

(11) Project [codegen id : 6]
Output [7]: [ws_ext_sales_price#2, ws_sold_date_sk#3, i_item_id#7, i_item_desc#8, i_current_price#9, i_class#10, i_category#11]
Input [9]: [ws_item_sk#1, ws_ext_sales_price#2, ws_sold_date_sk#3, i_item_sk#6, i_item_id#7, i_item_desc#8, i_current_price#9, i_class#10, i_category#11]

(12) ReusedExchange [Reuses operator id: 27]
Output [1]: [d_date_sk#13]

(13) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#3]
Right keys [1]: [d_date_sk#13]
Join condition: None

(14) Project [codegen id : 6]
Output [6]: [ws_ext_sales_price#2, i_item_id#7, i_item_desc#8, i_current_price#9, i_class#10, i_category#11]
Input [8]: [ws_ext_sales_price#2, ws_sold_date_sk#3, i_item_id#7, i_item_desc#8, i_current_price#9, i_class#10, i_category#11, d_date_sk#13]

(15) HashAggregate [codegen id : 6]
Input [6]: [ws_ext_sales_price#2, i_item_id#7, i_item_desc#8, i_current_price#9, i_class#10, i_category#11]
Keys [5]: [i_item_id#7, i_item_desc#8, i_category#11, i_class#10, i_current_price#9]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#2))]
Aggregate Attributes [1]: [sum#14]
Results [6]: [i_item_id#7, i_item_desc#8, i_category#11, i_class#10, i_current_price#9, sum#15]

(16) Exchange
Input [6]: [i_item_id#7, i_item_desc#8, i_category#11, i_class#10, i_current_price#9, sum#15]
Arguments: hashpartitioning(i_item_id#7, i_item_desc#8, i_category#11, i_class#10, i_current_price#9, 5), ENSURE_REQUIREMENTS, [id=#16]

(17) HashAggregate [codegen id : 7]
Input [6]: [i_item_id#7, i_item_desc#8, i_category#11, i_class#10, i_current_price#9, sum#15]
Keys [5]: [i_item_id#7, i_item_desc#8, i_category#11, i_class#10, i_current_price#9]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#2))#17]
Results [8]: [i_item_desc#8, i_category#11, i_class#10, i_current_price#9, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#2))#17,17,2) AS itemrevenue#18, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#2))#17,17,2) AS _w0#19, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#2))#17,17,2) AS _w1#20, i_item_id#7]

(18) Exchange
Input [8]: [i_item_desc#8, i_category#11, i_class#10, i_current_price#9, itemrevenue#18, _w0#19, _w1#20, i_item_id#7]
Arguments: hashpartitioning(i_class#10, 5), ENSURE_REQUIREMENTS, [id=#21]

(19) Sort [codegen id : 8]
Input [8]: [i_item_desc#8, i_category#11, i_class#10, i_current_price#9, itemrevenue#18, _w0#19, _w1#20, i_item_id#7]
Arguments: [i_class#10 ASC NULLS FIRST], false, 0

(20) Window
Input [8]: [i_item_desc#8, i_category#11, i_class#10, i_current_price#9, itemrevenue#18, _w0#19, _w1#20, i_item_id#7]
Arguments: [sum(_w1#20) windowspecdefinition(i_class#10, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#22], [i_class#10]

(21) Project [codegen id : 9]
Output [7]: [i_item_desc#8, i_category#11, i_class#10, i_current_price#9, itemrevenue#18, CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(_w0#19) * 100.00), DecimalType(21,2), true) as decimal(27,2))) / promote_precision(_we0#22)), DecimalType(38,17), true) AS revenueratio#23, i_item_id#7]
Input [9]: [i_item_desc#8, i_category#11, i_class#10, i_current_price#9, itemrevenue#18, _w0#19, _w1#20, i_item_id#7, _we0#22]

(22) TakeOrderedAndProject
Input [7]: [i_item_desc#8, i_category#11, i_class#10, i_current_price#9, itemrevenue#18, revenueratio#23, i_item_id#7]
Arguments: 100, [i_category#11 ASC NULLS FIRST, i_class#10 ASC NULLS FIRST, i_item_id#7 ASC NULLS FIRST, i_item_desc#8 ASC NULLS FIRST, revenueratio#23 ASC NULLS FIRST], [i_item_desc#8, i_category#11, i_class#10, i_current_price#9, itemrevenue#18, revenueratio#23]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (27)
+- * Project (26)
   +- * Filter (25)
      +- * ColumnarToRow (24)
         +- Scan parquet default.date_dim (23)


(23) Scan parquet default.date_dim
Output [2]: [d_date_sk#13, d_date#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [GreaterThanOrEqual(d_date,1999-02-22), LessThanOrEqual(d_date,1999-03-24)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(24) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#13, d_date#24]

(25) Filter [codegen id : 1]
Input [2]: [d_date_sk#13, d_date#24]
Condition : ((d_date#24 >= 1999-02-22) AND (d_date#24 <= 1999-03-24))

(26) Project [codegen id : 1]
Output [1]: [d_date_sk#13]
Input [2]: [d_date_sk#13, d_date#24]

(27) BroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#25]


