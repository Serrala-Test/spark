== Physical Plan ==
TakeOrderedAndProject (51)
+- * Project (50)
   +- * SortMergeJoin Inner (49)
      :- * Sort (43)
      :  +- Exchange (42)
      :     +- * Project (41)
      :        +- * BroadcastHashJoin Inner BuildRight (40)
      :           :- * Project (34)
      :           :  +- * BroadcastHashJoin Inner BuildRight (33)
      :           :     :- * Filter (14)
      :           :     :  +- * HashAggregate (13)
      :           :     :     +- Exchange (12)
      :           :     :        +- * HashAggregate (11)
      :           :     :           +- * Project (10)
      :           :     :              +- * BroadcastHashJoin Inner BuildLeft (9)
      :           :     :                 :- BroadcastExchange (4)
      :           :     :                 :  +- * Filter (3)
      :           :     :                 :     +- * ColumnarToRow (2)
      :           :     :                 :        +- Scan parquet default.store_returns (1)
      :           :     :                 +- * Project (8)
      :           :     :                    +- * Filter (7)
      :           :     :                       +- * ColumnarToRow (6)
      :           :     :                          +- Scan parquet default.date_dim (5)
      :           :     +- BroadcastExchange (32)
      :           :        +- * Filter (31)
      :           :           +- * HashAggregate (30)
      :           :              +- Exchange (29)
      :           :                 +- * HashAggregate (28)
      :           :                    +- * HashAggregate (27)
      :           :                       +- Exchange (26)
      :           :                          +- * HashAggregate (25)
      :           :                             +- * Project (24)
      :           :                                +- * BroadcastHashJoin Inner BuildLeft (23)
      :           :                                   :- BroadcastExchange (18)
      :           :                                   :  +- * Filter (17)
      :           :                                   :     +- * ColumnarToRow (16)
      :           :                                   :        +- Scan parquet default.store_returns (15)
      :           :                                   +- * Project (22)
      :           :                                      +- * Filter (21)
      :           :                                         +- * ColumnarToRow (20)
      :           :                                            +- Scan parquet default.date_dim (19)
      :           +- BroadcastExchange (39)
      :              +- * Project (38)
      :                 +- * Filter (37)
      :                    +- * ColumnarToRow (36)
      :                       +- Scan parquet default.store (35)
      +- * Sort (48)
         +- Exchange (47)
            +- * Filter (46)
               +- * ColumnarToRow (45)
                  +- Scan parquet default.customer (44)


(1) Scan parquet default.store_returns
Output [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#4), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(sr_store_sk), IsNotNull(sr_customer_sk)]
ReadSchema: struct<sr_customer_sk:bigint,sr_store_sk:bigint,sr_return_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]

(3) Filter [codegen id : 1]
Input [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Condition : (isnotnull(sr_store_sk#2) AND isnotnull(sr_customer_sk#1))

(4) BroadcastExchange
Input [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(input[3, bigint, true]),false), [id=#5]

(5) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_year#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(6) ColumnarToRow
Input [2]: [d_date_sk#6, d_year#7]

(7) Filter
Input [2]: [d_date_sk#6, d_year#7]
Condition : ((isnotnull(d_year#7) AND (d_year#7 = 2000)) AND isnotnull(d_date_sk#6))

(8) Project
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_year#7]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [sr_returned_date_sk#4]
Right keys [1]: [cast(d_date_sk#6 as bigint)]
Join condition: None

(10) Project [codegen id : 2]
Output [3]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3]
Input [5]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4, d_date_sk#6]

(11) HashAggregate [codegen id : 2]
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3]
Keys [2]: [sr_customer_sk#1, sr_store_sk#2]
Functions [1]: [partial_sum(UnscaledValue(sr_return_amt#3))]
Aggregate Attributes [1]: [sum#8]
Results [3]: [sr_customer_sk#1, sr_store_sk#2, sum#9]

(12) Exchange
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#9]
Arguments: hashpartitioning(sr_customer_sk#1, sr_store_sk#2, 5), ENSURE_REQUIREMENTS, [id=#10]

(13) HashAggregate [codegen id : 8]
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#9]
Keys [2]: [sr_customer_sk#1, sr_store_sk#2]
Functions [1]: [sum(UnscaledValue(sr_return_amt#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(sr_return_amt#3))#11]
Results [3]: [sr_customer_sk#1 AS ctr_customer_sk#12, sr_store_sk#2 AS ctr_store_sk#13, MakeDecimal(sum(UnscaledValue(sr_return_amt#3))#11,17,2) AS ctr_total_return#14]

(14) Filter [codegen id : 8]
Input [3]: [ctr_customer_sk#12, ctr_store_sk#13, ctr_total_return#14]
Condition : isnotnull(ctr_total_return#14)

(15) Scan parquet default.store_returns
Output [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#4), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_customer_sk:bigint,sr_store_sk:bigint,sr_return_amt:decimal(7,2)>

(16) ColumnarToRow [codegen id : 3]
Input [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]

(17) Filter [codegen id : 3]
Input [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Condition : isnotnull(sr_store_sk#2)

(18) BroadcastExchange
Input [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Arguments: HashedRelationBroadcastMode(List(input[3, bigint, true]),false), [id=#15]

(19) Scan parquet default.date_dim
Output [2]: [d_date_sk#6, d_year#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(20) ColumnarToRow
Input [2]: [d_date_sk#6, d_year#7]

(21) Filter
Input [2]: [d_date_sk#6, d_year#7]
Condition : ((isnotnull(d_year#7) AND (d_year#7 = 2000)) AND isnotnull(d_date_sk#6))

(22) Project
Output [1]: [d_date_sk#6]
Input [2]: [d_date_sk#6, d_year#7]

(23) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [sr_returned_date_sk#4]
Right keys [1]: [cast(d_date_sk#6 as bigint)]
Join condition: None

(24) Project [codegen id : 4]
Output [3]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3]
Input [5]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4, d_date_sk#6]

(25) HashAggregate [codegen id : 4]
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3]
Keys [2]: [sr_customer_sk#1, sr_store_sk#2]
Functions [1]: [partial_sum(UnscaledValue(sr_return_amt#3))]
Aggregate Attributes [1]: [sum#16]
Results [3]: [sr_customer_sk#1, sr_store_sk#2, sum#17]

(26) Exchange
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#17]
Arguments: hashpartitioning(sr_customer_sk#1, sr_store_sk#2, 5), ENSURE_REQUIREMENTS, [id=#18]

(27) HashAggregate [codegen id : 5]
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#17]
Keys [2]: [sr_customer_sk#1, sr_store_sk#2]
Functions [1]: [sum(UnscaledValue(sr_return_amt#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(sr_return_amt#3))#19]
Results [2]: [sr_store_sk#2 AS ctr_store_sk#13, MakeDecimal(sum(UnscaledValue(sr_return_amt#3))#19,17,2) AS ctr_total_return#14]

(28) HashAggregate [codegen id : 5]
Input [2]: [ctr_store_sk#13, ctr_total_return#14]
Keys [1]: [ctr_store_sk#13]
Functions [1]: [partial_avg(ctr_total_return#14)]
Aggregate Attributes [2]: [sum#20, count#21]
Results [3]: [ctr_store_sk#13, sum#22, count#23]

(29) Exchange
Input [3]: [ctr_store_sk#13, sum#22, count#23]
Arguments: hashpartitioning(ctr_store_sk#13, 5), ENSURE_REQUIREMENTS, [id=#24]

(30) HashAggregate [codegen id : 6]
Input [3]: [ctr_store_sk#13, sum#22, count#23]
Keys [1]: [ctr_store_sk#13]
Functions [1]: [avg(ctr_total_return#14)]
Aggregate Attributes [1]: [avg(ctr_total_return#14)#25]
Results [2]: [CheckOverflow((promote_precision(avg(ctr_total_return#14)#25) * 1.200000), DecimalType(24,7), true) AS (avg(ctr_total_return) * 1.2)#26, ctr_store_sk#13 AS ctr_store_sk#13#27]

(31) Filter [codegen id : 6]
Input [2]: [(avg(ctr_total_return) * 1.2)#26, ctr_store_sk#13#27]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#26)

(32) BroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#26, ctr_store_sk#13#27]
Arguments: HashedRelationBroadcastMode(List(input[1, bigint, true]),false), [id=#28]

(33) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ctr_store_sk#13]
Right keys [1]: [ctr_store_sk#13#27]
Join condition: (cast(ctr_total_return#14 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#26)

(34) Project [codegen id : 8]
Output [2]: [ctr_customer_sk#12, ctr_store_sk#13]
Input [5]: [ctr_customer_sk#12, ctr_store_sk#13, ctr_total_return#14, (avg(ctr_total_return) * 1.2)#26, ctr_store_sk#13#27]

(35) Scan parquet default.store
Output [2]: [s_store_sk#29, s_state#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(36) ColumnarToRow [codegen id : 7]
Input [2]: [s_store_sk#29, s_state#30]

(37) Filter [codegen id : 7]
Input [2]: [s_store_sk#29, s_state#30]
Condition : ((isnotnull(s_state#30) AND (s_state#30 = TN)) AND isnotnull(s_store_sk#29))

(38) Project [codegen id : 7]
Output [1]: [s_store_sk#29]
Input [2]: [s_store_sk#29, s_state#30]

(39) BroadcastExchange
Input [1]: [s_store_sk#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#31]

(40) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ctr_store_sk#13]
Right keys [1]: [cast(s_store_sk#29 as bigint)]
Join condition: None

(41) Project [codegen id : 8]
Output [1]: [ctr_customer_sk#12]
Input [3]: [ctr_customer_sk#12, ctr_store_sk#13, s_store_sk#29]

(42) Exchange
Input [1]: [ctr_customer_sk#12]
Arguments: hashpartitioning(ctr_customer_sk#12, 5), ENSURE_REQUIREMENTS, [id=#32]

(43) Sort [codegen id : 9]
Input [1]: [ctr_customer_sk#12]
Arguments: [ctr_customer_sk#12 ASC NULLS FIRST], false, 0

(44) Scan parquet default.customer
Output [2]: [c_customer_sk#33, c_customer_id#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string>

(45) ColumnarToRow [codegen id : 10]
Input [2]: [c_customer_sk#33, c_customer_id#34]

(46) Filter [codegen id : 10]
Input [2]: [c_customer_sk#33, c_customer_id#34]
Condition : isnotnull(c_customer_sk#33)

(47) Exchange
Input [2]: [c_customer_sk#33, c_customer_id#34]
Arguments: hashpartitioning(cast(c_customer_sk#33 as bigint), 5), ENSURE_REQUIREMENTS, [id=#35]

(48) Sort [codegen id : 11]
Input [2]: [c_customer_sk#33, c_customer_id#34]
Arguments: [cast(c_customer_sk#33 as bigint) ASC NULLS FIRST], false, 0

(49) SortMergeJoin [codegen id : 12]
Left keys [1]: [ctr_customer_sk#12]
Right keys [1]: [cast(c_customer_sk#33 as bigint)]
Join condition: None

(50) Project [codegen id : 12]
Output [1]: [c_customer_id#34]
Input [3]: [ctr_customer_sk#12, c_customer_sk#33, c_customer_id#34]

(51) TakeOrderedAndProject
Input [1]: [c_customer_id#34]
Arguments: 100, [c_customer_id#34 ASC NULLS FIRST], [c_customer_id#34]

