== Physical Plan ==
TakeOrderedAndProject (47)
+- * Project (46)
   +- * BroadcastHashJoin Inner BuildRight (45)
      :- * Project (30)
      :  +- * BroadcastHashJoin Inner BuildRight (29)
      :     :- * Project (23)
      :     :  +- * SortMergeJoin Inner (22)
      :     :     :- * Sort (16)
      :     :     :  +- Exchange (15)
      :     :     :     +- * Filter (14)
      :     :     :        +- * HashAggregate (13)
      :     :     :           +- Exchange (12)
      :     :     :              +- * HashAggregate (11)
      :     :     :                 +- * Project (10)
      :     :     :                    +- * BroadcastHashJoin Inner BuildRight (9)
      :     :     :                       :- * Filter (3)
      :     :     :                       :  +- * ColumnarToRow (2)
      :     :     :                       :     +- Scan parquet default.store_returns (1)
      :     :     :                       +- BroadcastExchange (8)
      :     :     :                          +- * Project (7)
      :     :     :                             +- * Filter (6)
      :     :     :                                +- * ColumnarToRow (5)
      :     :     :                                   +- Scan parquet default.date_dim (4)
      :     :     +- * Sort (21)
      :     :        +- Exchange (20)
      :     :           +- * Filter (19)
      :     :              +- * ColumnarToRow (18)
      :     :                 +- Scan parquet default.customer (17)
      :     +- BroadcastExchange (28)
      :        +- * Project (27)
      :           +- * Filter (26)
      :              +- * ColumnarToRow (25)
      :                 +- Scan parquet default.store (24)
      +- BroadcastExchange (44)
         +- * Filter (43)
            +- * HashAggregate (42)
               +- Exchange (41)
                  +- * HashAggregate (40)
                     +- * HashAggregate (39)
                        +- Exchange (38)
                           +- * HashAggregate (37)
                              +- * Project (36)
                                 +- * BroadcastHashJoin Inner BuildRight (35)
                                    :- * Filter (33)
                                    :  +- * ColumnarToRow (32)
                                    :     +- Scan parquet default.store_returns (31)
                                    +- ReusedExchange (34)


(1) Scan parquet default.store_returns
Output [4]: [sr_returned_date_sk#1, sr_customer_sk#2, sr_store_sk#3, sr_return_amt#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_returned_date_sk), IsNotNull(sr_store_sk), IsNotNull(sr_customer_sk)]
ReadSchema: struct<sr_returned_date_sk:bigint,sr_customer_sk:bigint,sr_store_sk:bigint,sr_return_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [4]: [sr_returned_date_sk#1, sr_customer_sk#2, sr_store_sk#3, sr_return_amt#4]

(3) Filter [codegen id : 2]
Input [4]: [sr_returned_date_sk#1, sr_customer_sk#2, sr_store_sk#3, sr_return_amt#4]
Condition : ((isnotnull(sr_returned_date_sk#1) AND isnotnull(sr_store_sk#3)) AND isnotnull(sr_customer_sk#2))

(4) Scan parquet default.date_dim
Output [2]: [d_date_sk#5, d_year#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(5) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#5, d_year#6]

(6) Filter [codegen id : 1]
Input [2]: [d_date_sk#5, d_year#6]
Condition : ((isnotnull(d_year#6) AND (d_year#6 = 2000)) AND isnotnull(d_date_sk#5))

(7) Project [codegen id : 1]
Output [1]: [d_date_sk#5]
Input [2]: [d_date_sk#5, d_year#6]

(8) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#7]

(9) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [sr_returned_date_sk#1]
Right keys [1]: [cast(d_date_sk#5 as bigint)]
Join condition: None

(10) Project [codegen id : 2]
Output [3]: [sr_customer_sk#2, sr_store_sk#3, sr_return_amt#4]
Input [5]: [sr_returned_date_sk#1, sr_customer_sk#2, sr_store_sk#3, sr_return_amt#4, d_date_sk#5]

(11) HashAggregate [codegen id : 2]
Input [3]: [sr_customer_sk#2, sr_store_sk#3, sr_return_amt#4]
Keys [2]: [sr_customer_sk#2, sr_store_sk#3]
Functions [1]: [partial_sum(UnscaledValue(sr_return_amt#4))]
Aggregate Attributes [1]: [sum#8]
Results [3]: [sr_customer_sk#2, sr_store_sk#3, sum#9]

(12) Exchange
Input [3]: [sr_customer_sk#2, sr_store_sk#3, sum#9]
Arguments: hashpartitioning(sr_customer_sk#2, sr_store_sk#3, 5), ENSURE_REQUIREMENTS, [id=#10]

(13) HashAggregate [codegen id : 3]
Input [3]: [sr_customer_sk#2, sr_store_sk#3, sum#9]
Keys [2]: [sr_customer_sk#2, sr_store_sk#3]
Functions [1]: [sum(UnscaledValue(sr_return_amt#4))]
Aggregate Attributes [1]: [sum(UnscaledValue(sr_return_amt#4))#11]
Results [3]: [sr_customer_sk#2 AS ctr_customer_sk#12, sr_store_sk#3 AS ctr_store_sk#13, MakeDecimal(sum(UnscaledValue(sr_return_amt#4))#11,17,2) AS ctr_total_return#14]

(14) Filter [codegen id : 3]
Input [3]: [ctr_customer_sk#12, ctr_store_sk#13, ctr_total_return#14]
Condition : isnotnull(ctr_total_return#14)

(15) Exchange
Input [3]: [ctr_customer_sk#12, ctr_store_sk#13, ctr_total_return#14]
Arguments: hashpartitioning(ctr_customer_sk#12, 5), ENSURE_REQUIREMENTS, [id=#15]

(16) Sort [codegen id : 4]
Input [3]: [ctr_customer_sk#12, ctr_store_sk#13, ctr_total_return#14]
Arguments: [ctr_customer_sk#12 ASC NULLS FIRST], false, 0

(17) Scan parquet default.customer
Output [2]: [c_customer_sk#16, c_customer_id#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string>

(18) ColumnarToRow [codegen id : 5]
Input [2]: [c_customer_sk#16, c_customer_id#17]

(19) Filter [codegen id : 5]
Input [2]: [c_customer_sk#16, c_customer_id#17]
Condition : isnotnull(c_customer_sk#16)

(20) Exchange
Input [2]: [c_customer_sk#16, c_customer_id#17]
Arguments: hashpartitioning(cast(c_customer_sk#16 as bigint), 5), ENSURE_REQUIREMENTS, [id=#18]

(21) Sort [codegen id : 6]
Input [2]: [c_customer_sk#16, c_customer_id#17]
Arguments: [cast(c_customer_sk#16 as bigint) ASC NULLS FIRST], false, 0

(22) SortMergeJoin [codegen id : 12]
Left keys [1]: [ctr_customer_sk#12]
Right keys [1]: [cast(c_customer_sk#16 as bigint)]
Join condition: None

(23) Project [codegen id : 12]
Output [3]: [ctr_store_sk#13, ctr_total_return#14, c_customer_id#17]
Input [5]: [ctr_customer_sk#12, ctr_store_sk#13, ctr_total_return#14, c_customer_sk#16, c_customer_id#17]

(24) Scan parquet default.store
Output [2]: [s_store_sk#19, s_state#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(25) ColumnarToRow [codegen id : 7]
Input [2]: [s_store_sk#19, s_state#20]

(26) Filter [codegen id : 7]
Input [2]: [s_store_sk#19, s_state#20]
Condition : ((isnotnull(s_state#20) AND (s_state#20 = TN)) AND isnotnull(s_store_sk#19))

(27) Project [codegen id : 7]
Output [1]: [s_store_sk#19]
Input [2]: [s_store_sk#19, s_state#20]

(28) BroadcastExchange
Input [1]: [s_store_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21]

(29) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ctr_store_sk#13]
Right keys [1]: [cast(s_store_sk#19 as bigint)]
Join condition: None

(30) Project [codegen id : 12]
Output [3]: [ctr_store_sk#13, ctr_total_return#14, c_customer_id#17]
Input [4]: [ctr_store_sk#13, ctr_total_return#14, c_customer_id#17, s_store_sk#19]

(31) Scan parquet default.store_returns
Output [4]: [sr_returned_date_sk#1, sr_customer_sk#2, sr_store_sk#3, sr_return_amt#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_returned_date_sk), IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_returned_date_sk:bigint,sr_customer_sk:bigint,sr_store_sk:bigint,sr_return_amt:decimal(7,2)>

(32) ColumnarToRow [codegen id : 9]
Input [4]: [sr_returned_date_sk#1, sr_customer_sk#2, sr_store_sk#3, sr_return_amt#4]

(33) Filter [codegen id : 9]
Input [4]: [sr_returned_date_sk#1, sr_customer_sk#2, sr_store_sk#3, sr_return_amt#4]
Condition : (isnotnull(sr_returned_date_sk#1) AND isnotnull(sr_store_sk#3))

(34) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#5]

(35) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [sr_returned_date_sk#1]
Right keys [1]: [cast(d_date_sk#5 as bigint)]
Join condition: None

(36) Project [codegen id : 9]
Output [3]: [sr_customer_sk#2, sr_store_sk#3, sr_return_amt#4]
Input [5]: [sr_returned_date_sk#1, sr_customer_sk#2, sr_store_sk#3, sr_return_amt#4, d_date_sk#5]

(37) HashAggregate [codegen id : 9]
Input [3]: [sr_customer_sk#2, sr_store_sk#3, sr_return_amt#4]
Keys [2]: [sr_customer_sk#2, sr_store_sk#3]
Functions [1]: [partial_sum(UnscaledValue(sr_return_amt#4))]
Aggregate Attributes [1]: [sum#22]
Results [3]: [sr_customer_sk#2, sr_store_sk#3, sum#23]

(38) Exchange
Input [3]: [sr_customer_sk#2, sr_store_sk#3, sum#23]
Arguments: hashpartitioning(sr_customer_sk#2, sr_store_sk#3, 5), ENSURE_REQUIREMENTS, [id=#24]

(39) HashAggregate [codegen id : 10]
Input [3]: [sr_customer_sk#2, sr_store_sk#3, sum#23]
Keys [2]: [sr_customer_sk#2, sr_store_sk#3]
Functions [1]: [sum(UnscaledValue(sr_return_amt#4))]
Aggregate Attributes [1]: [sum(UnscaledValue(sr_return_amt#4))#25]
Results [2]: [sr_store_sk#3 AS ctr_store_sk#13, MakeDecimal(sum(UnscaledValue(sr_return_amt#4))#25,17,2) AS ctr_total_return#14]

(40) HashAggregate [codegen id : 10]
Input [2]: [ctr_store_sk#13, ctr_total_return#14]
Keys [1]: [ctr_store_sk#13]
Functions [1]: [partial_avg(ctr_total_return#14)]
Aggregate Attributes [2]: [sum#26, count#27]
Results [3]: [ctr_store_sk#13, sum#28, count#29]

(41) Exchange
Input [3]: [ctr_store_sk#13, sum#28, count#29]
Arguments: hashpartitioning(ctr_store_sk#13, 5), ENSURE_REQUIREMENTS, [id=#30]

(42) HashAggregate [codegen id : 11]
Input [3]: [ctr_store_sk#13, sum#28, count#29]
Keys [1]: [ctr_store_sk#13]
Functions [1]: [avg(ctr_total_return#14)]
Aggregate Attributes [1]: [avg(ctr_total_return#14)#31]
Results [2]: [CheckOverflow((promote_precision(avg(ctr_total_return#14)#31) * 1.200000), DecimalType(24,7), true) AS (CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#32, ctr_store_sk#13 AS ctr_store_sk#13#33]

(43) Filter [codegen id : 11]
Input [2]: [(CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#32, ctr_store_sk#13#33]
Condition : isnotnull((CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#32)

(44) BroadcastExchange
Input [2]: [(CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#32, ctr_store_sk#13#33]
Arguments: HashedRelationBroadcastMode(List(input[1, bigint, true]),false), [id=#34]

(45) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ctr_store_sk#13]
Right keys [1]: [ctr_store_sk#13#33]
Join condition: (cast(ctr_total_return#14 as decimal(24,7)) > (CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#32)

(46) Project [codegen id : 12]
Output [1]: [c_customer_id#17]
Input [5]: [ctr_store_sk#13, ctr_total_return#14, c_customer_id#17, (CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#32, ctr_store_sk#13#33]

(47) TakeOrderedAndProject
Input [1]: [c_customer_id#17]
Arguments: 100, [c_customer_id#17 ASC NULLS FIRST], [c_customer_id#17]

