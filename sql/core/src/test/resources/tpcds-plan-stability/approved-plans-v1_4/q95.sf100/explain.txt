== Physical Plan ==
TakeOrderedAndProject (63)
+- * HashAggregate (62)
   +- Exchange (61)
      +- * HashAggregate (60)
         +- * HashAggregate (59)
            +- Exchange (58)
               +- * HashAggregate (57)
                  +- * Project (56)
                     +- * BroadcastHashJoin Inner BuildRight (55)
                        :- * Project (49)
                        :  +- * BroadcastHashJoin Inner BuildRight (48)
                        :     :- * Project (42)
                        :     :  +- * BroadcastHashJoin Inner BuildLeft (41)
                        :     :     :- BroadcastExchange (5)
                        :     :     :  +- * Project (4)
                        :     :     :     +- * Filter (3)
                        :     :     :        +- * ColumnarToRow (2)
                        :     :     :           +- Scan parquet default.customer_address (1)
                        :     :     +- SortMergeJoin LeftSemi (40)
                        :     :        :- * Sort (24)
                        :     :        :  +- Exchange (23)
                        :     :        :     +- SortMergeJoin LeftSemi (22)
                        :     :        :        :- * Sort (10)
                        :     :        :        :  +- Exchange (9)
                        :     :        :        :     +- * Filter (8)
                        :     :        :        :        +- * ColumnarToRow (7)
                        :     :        :        :           +- Scan parquet default.web_sales (6)
                        :     :        :        +- * Sort (21)
                        :     :        :           +- Exchange (20)
                        :     :        :              +- * Project (19)
                        :     :        :                 +- * SortMergeJoin Inner (18)
                        :     :        :                    :- * Sort (15)
                        :     :        :                    :  +- Exchange (14)
                        :     :        :                    :     +- * Filter (13)
                        :     :        :                    :        +- * ColumnarToRow (12)
                        :     :        :                    :           +- Scan parquet default.web_sales (11)
                        :     :        :                    +- * Sort (17)
                        :     :        :                       +- ReusedExchange (16)
                        :     :        +- * Project (39)
                        :     :           +- * SortMergeJoin Inner (38)
                        :     :              :- * Sort (32)
                        :     :              :  +- Exchange (31)
                        :     :              :     +- * Project (30)
                        :     :              :        +- * SortMergeJoin Inner (29)
                        :     :              :           :- * Sort (26)
                        :     :              :           :  +- ReusedExchange (25)
                        :     :              :           +- * Sort (28)
                        :     :              :              +- ReusedExchange (27)
                        :     :              +- * Sort (37)
                        :     :                 +- Exchange (36)
                        :     :                    +- * Filter (35)
                        :     :                       +- * ColumnarToRow (34)
                        :     :                          +- Scan parquet default.web_returns (33)
                        :     +- BroadcastExchange (47)
                        :        +- * Project (46)
                        :           +- * Filter (45)
                        :              +- * ColumnarToRow (44)
                        :                 +- Scan parquet default.date_dim (43)
                        +- BroadcastExchange (54)
                           +- * Project (53)
                              +- * Filter (52)
                                 +- * ColumnarToRow (51)
                                    +- Scan parquet default.web_site (50)


(1) Scan parquet default.customer_address
Output [2]: [ca_address_sk#1, ca_state#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,IL), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(2) ColumnarToRow [codegen id : 1]
Input [2]: [ca_address_sk#1, ca_state#2]

(3) Filter [codegen id : 1]
Input [2]: [ca_address_sk#1, ca_state#2]
Condition : ((isnotnull(ca_state#2) AND (ca_state#2 = IL)) AND isnotnull(ca_address_sk#1))

(4) Project [codegen id : 1]
Output [1]: [ca_address_sk#1]
Input [2]: [ca_address_sk#1, ca_state#2]

(5) BroadcastExchange
Input [1]: [ca_address_sk#1]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#3]

(6) Scan parquet default.web_sales
Output [6]: [ws_ship_date_sk#4, ws_ship_addr_sk#5, ws_web_site_sk#6, ws_order_number#7, ws_ext_ship_cost#8, ws_net_profit#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_ship_date_sk), IsNotNull(ws_ship_addr_sk), IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_ship_date_sk:int,ws_ship_addr_sk:int,ws_web_site_sk:int,ws_order_number:int,ws_ext_ship_cost:decimal(7,2),ws_net_profit:decimal(7,2)>

(7) ColumnarToRow [codegen id : 2]
Input [6]: [ws_ship_date_sk#4, ws_ship_addr_sk#5, ws_web_site_sk#6, ws_order_number#7, ws_ext_ship_cost#8, ws_net_profit#9]

(8) Filter [codegen id : 2]
Input [6]: [ws_ship_date_sk#4, ws_ship_addr_sk#5, ws_web_site_sk#6, ws_order_number#7, ws_ext_ship_cost#8, ws_net_profit#9]
Condition : ((isnotnull(ws_ship_date_sk#4) AND isnotnull(ws_ship_addr_sk#5)) AND isnotnull(ws_web_site_sk#6))

(9) Exchange
Input [6]: [ws_ship_date_sk#4, ws_ship_addr_sk#5, ws_web_site_sk#6, ws_order_number#7, ws_ext_ship_cost#8, ws_net_profit#9]
Arguments: hashpartitioning(ws_order_number#7, 5), true, [id=#10]

(10) Sort [codegen id : 3]
Input [6]: [ws_ship_date_sk#4, ws_ship_addr_sk#5, ws_web_site_sk#6, ws_order_number#7, ws_ext_ship_cost#8, ws_net_profit#9]
Arguments: [ws_order_number#7 ASC NULLS FIRST], false, 0

(11) Scan parquet default.web_sales
Output [2]: [ws_warehouse_sk#11, ws_order_number#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_order_number), IsNotNull(ws_warehouse_sk)]
ReadSchema: struct<ws_warehouse_sk:int,ws_order_number:int>

(12) ColumnarToRow [codegen id : 4]
Input [2]: [ws_warehouse_sk#11, ws_order_number#7]

(13) Filter [codegen id : 4]
Input [2]: [ws_warehouse_sk#11, ws_order_number#7]
Condition : (isnotnull(ws_order_number#7) AND isnotnull(ws_warehouse_sk#11))

(14) Exchange
Input [2]: [ws_warehouse_sk#11, ws_order_number#7]
Arguments: hashpartitioning(ws_order_number#7, 5), true, [id=#12]

(15) Sort [codegen id : 5]
Input [2]: [ws_warehouse_sk#11, ws_order_number#7]
Arguments: [ws_order_number#7 ASC NULLS FIRST], false, 0

(16) ReusedExchange [Reuses operator id: 14]
Output [2]: [ws_warehouse_sk#13, ws_order_number#14]

(17) Sort [codegen id : 7]
Input [2]: [ws_warehouse_sk#13, ws_order_number#14]
Arguments: [ws_order_number#14 ASC NULLS FIRST], false, 0

(18) SortMergeJoin [codegen id : 8]
Left keys [1]: [ws_order_number#7]
Right keys [1]: [ws_order_number#14]
Join condition: NOT (ws_warehouse_sk#11 = ws_warehouse_sk#13)

(19) Project [codegen id : 8]
Output [1]: [ws_order_number#7 AS ws_order_number#7#15]
Input [4]: [ws_warehouse_sk#11, ws_order_number#7, ws_warehouse_sk#13, ws_order_number#14]

(20) Exchange
Input [1]: [ws_order_number#7#15]
Arguments: hashpartitioning(ws_order_number#7#15, 5), true, [id=#16]

(21) Sort [codegen id : 9]
Input [1]: [ws_order_number#7#15]
Arguments: [ws_order_number#7#15 ASC NULLS FIRST], false, 0

(22) SortMergeJoin
Left keys [1]: [ws_order_number#7]
Right keys [1]: [ws_order_number#7#15]
Join condition: None

(23) Exchange
Input [6]: [ws_ship_date_sk#4, ws_ship_addr_sk#5, ws_web_site_sk#6, ws_order_number#7, ws_ext_ship_cost#8, ws_net_profit#9]
Arguments: hashpartitioning(cast(ws_order_number#7 as bigint), 5), true, [id=#17]

(24) Sort [codegen id : 10]
Input [6]: [ws_ship_date_sk#4, ws_ship_addr_sk#5, ws_web_site_sk#6, ws_order_number#7, ws_ext_ship_cost#8, ws_net_profit#9]
Arguments: [cast(ws_order_number#7 as bigint) ASC NULLS FIRST], false, 0

(25) ReusedExchange [Reuses operator id: 14]
Output [2]: [ws_warehouse_sk#11, ws_order_number#7]

(26) Sort [codegen id : 12]
Input [2]: [ws_warehouse_sk#11, ws_order_number#7]
Arguments: [ws_order_number#7 ASC NULLS FIRST], false, 0

(27) ReusedExchange [Reuses operator id: 14]
Output [2]: [ws_warehouse_sk#18, ws_order_number#19]

(28) Sort [codegen id : 14]
Input [2]: [ws_warehouse_sk#18, ws_order_number#19]
Arguments: [ws_order_number#19 ASC NULLS FIRST], false, 0

(29) SortMergeJoin [codegen id : 15]
Left keys [1]: [ws_order_number#7]
Right keys [1]: [ws_order_number#19]
Join condition: NOT (ws_warehouse_sk#11 = ws_warehouse_sk#18)

(30) Project [codegen id : 15]
Output [1]: [ws_order_number#7]
Input [4]: [ws_warehouse_sk#11, ws_order_number#7, ws_warehouse_sk#18, ws_order_number#19]

(31) Exchange
Input [1]: [ws_order_number#7]
Arguments: hashpartitioning(cast(ws_order_number#7 as bigint), 5), true, [id=#20]

(32) Sort [codegen id : 16]
Input [1]: [ws_order_number#7]
Arguments: [cast(ws_order_number#7 as bigint) ASC NULLS FIRST], false, 0

(33) Scan parquet default.web_returns
Output [1]: [wr_order_number#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_order_number)]
ReadSchema: struct<wr_order_number:bigint>

(34) ColumnarToRow [codegen id : 17]
Input [1]: [wr_order_number#21]

(35) Filter [codegen id : 17]
Input [1]: [wr_order_number#21]
Condition : isnotnull(wr_order_number#21)

(36) Exchange
Input [1]: [wr_order_number#21]
Arguments: hashpartitioning(wr_order_number#21, 5), true, [id=#22]

(37) Sort [codegen id : 18]
Input [1]: [wr_order_number#21]
Arguments: [wr_order_number#21 ASC NULLS FIRST], false, 0

(38) SortMergeJoin [codegen id : 19]
Left keys [1]: [cast(ws_order_number#7 as bigint)]
Right keys [1]: [wr_order_number#21]
Join condition: None

(39) Project [codegen id : 19]
Output [1]: [wr_order_number#21]
Input [2]: [ws_order_number#7, wr_order_number#21]

(40) SortMergeJoin
Left keys [1]: [cast(ws_order_number#7 as bigint)]
Right keys [1]: [wr_order_number#21]
Join condition: None

(41) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ca_address_sk#1]
Right keys [1]: [ws_ship_addr_sk#5]
Join condition: None

(42) Project [codegen id : 22]
Output [5]: [ws_ship_date_sk#4, ws_web_site_sk#6, ws_order_number#7, ws_ext_ship_cost#8, ws_net_profit#9]
Input [7]: [ca_address_sk#1, ws_ship_date_sk#4, ws_ship_addr_sk#5, ws_web_site_sk#6, ws_order_number#7, ws_ext_ship_cost#8, ws_net_profit#9]

(43) Scan parquet default.date_dim
Output [2]: [d_date_sk#23, d_date#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-01), LessThanOrEqual(d_date,1999-04-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(44) ColumnarToRow [codegen id : 20]
Input [2]: [d_date_sk#23, d_date#24]

(45) Filter [codegen id : 20]
Input [2]: [d_date_sk#23, d_date#24]
Condition : (((isnotnull(d_date#24) AND (d_date#24 >= 10623)) AND (d_date#24 <= 10683)) AND isnotnull(d_date_sk#23))

(46) Project [codegen id : 20]
Output [1]: [d_date_sk#23]
Input [2]: [d_date_sk#23, d_date#24]

(47) BroadcastExchange
Input [1]: [d_date_sk#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#25]

(48) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ws_ship_date_sk#4]
Right keys [1]: [d_date_sk#23]
Join condition: None

(49) Project [codegen id : 22]
Output [4]: [ws_web_site_sk#6, ws_order_number#7, ws_ext_ship_cost#8, ws_net_profit#9]
Input [6]: [ws_ship_date_sk#4, ws_web_site_sk#6, ws_order_number#7, ws_ext_ship_cost#8, ws_net_profit#9, d_date_sk#23]

(50) Scan parquet default.web_site
Output [2]: [web_site_sk#26, web_company_name#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_company_name:string>

(51) ColumnarToRow [codegen id : 21]
Input [2]: [web_site_sk#26, web_company_name#27]

(52) Filter [codegen id : 21]
Input [2]: [web_site_sk#26, web_company_name#27]
Condition : ((isnotnull(web_company_name#27) AND (web_company_name#27 = pri)) AND isnotnull(web_site_sk#26))

(53) Project [codegen id : 21]
Output [1]: [web_site_sk#26]
Input [2]: [web_site_sk#26, web_company_name#27]

(54) BroadcastExchange
Input [1]: [web_site_sk#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#28]

(55) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ws_web_site_sk#6]
Right keys [1]: [web_site_sk#26]
Join condition: None

(56) Project [codegen id : 22]
Output [3]: [ws_order_number#7, ws_ext_ship_cost#8, ws_net_profit#9]
Input [5]: [ws_web_site_sk#6, ws_order_number#7, ws_ext_ship_cost#8, ws_net_profit#9, web_site_sk#26]

(57) HashAggregate [codegen id : 22]
Input [3]: [ws_order_number#7, ws_ext_ship_cost#8, ws_net_profit#9]
Keys [1]: [ws_order_number#7]
Functions [2]: [partial_sum(UnscaledValue(ws_ext_ship_cost#8)), partial_sum(UnscaledValue(ws_net_profit#9))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#8))#29, sum(UnscaledValue(ws_net_profit#9))#30]
Results [3]: [ws_order_number#7, sum#31, sum#32]

(58) Exchange
Input [3]: [ws_order_number#7, sum#31, sum#32]
Arguments: hashpartitioning(ws_order_number#7, 5), true, [id=#33]

(59) HashAggregate [codegen id : 23]
Input [3]: [ws_order_number#7, sum#31, sum#32]
Keys [1]: [ws_order_number#7]
Functions [2]: [merge_sum(UnscaledValue(ws_ext_ship_cost#8)), merge_sum(UnscaledValue(ws_net_profit#9))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#8))#29, sum(UnscaledValue(ws_net_profit#9))#30]
Results [3]: [ws_order_number#7, sum#31, sum#32]

(60) HashAggregate [codegen id : 23]
Input [3]: [ws_order_number#7, sum#31, sum#32]
Keys: []
Functions [3]: [merge_sum(UnscaledValue(ws_ext_ship_cost#8)), merge_sum(UnscaledValue(ws_net_profit#9)), partial_count(distinct ws_order_number#7)]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#8))#29, sum(UnscaledValue(ws_net_profit#9))#30, count(ws_order_number#7)#34]
Results [3]: [sum#31, sum#32, count#35]

(61) Exchange
Input [3]: [sum#31, sum#32, count#35]
Arguments: SinglePartition, true, [id=#36]

(62) HashAggregate [codegen id : 24]
Input [3]: [sum#31, sum#32, count#35]
Keys: []
Functions [3]: [sum(UnscaledValue(ws_ext_ship_cost#8)), sum(UnscaledValue(ws_net_profit#9)), count(distinct ws_order_number#7)]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#8))#29, sum(UnscaledValue(ws_net_profit#9))#30, count(ws_order_number#7)#34]
Results [3]: [count(ws_order_number#7)#34 AS order count #37, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#8))#29,17,2) AS total shipping cost #38, MakeDecimal(sum(UnscaledValue(ws_net_profit#9))#30,17,2) AS total net profit #39]

(63) TakeOrderedAndProject
Input [3]: [order count #37, total shipping cost #38, total net profit #39]
Arguments: 100, [order count #37 ASC NULLS FIRST], [order count #37, total shipping cost #38, total net profit #39]

