== Physical Plan ==
* Sort (65)
+- * HashAggregate (64)
   +- Exchange (63)
      +- * HashAggregate (62)
         +- * HashAggregate (61)
            +- Exchange (60)
               +- * HashAggregate (59)
                  +- * Project (58)
                     +- * BroadcastHashJoin Inner BuildRight (57)
                        :- * Project (51)
                        :  +- * BroadcastHashJoin Inner BuildRight (50)
                        :     :- * Project (44)
                        :     :  +- * BroadcastHashJoin Inner BuildRight (43)
                        :     :     :- SortMergeJoin LeftSemi (37)
                        :     :     :  :- * Sort (17)
                        :     :     :  :  +- Exchange (16)
                        :     :     :  :     +- SortMergeJoin LeftSemi (15)
                        :     :     :  :        :- * Sort (5)
                        :     :     :  :        :  +- Exchange (4)
                        :     :     :  :        :     +- * Filter (3)
                        :     :     :  :        :        +- * ColumnarToRow (2)
                        :     :     :  :        :           +- Scan parquet default.web_sales (1)
                        :     :     :  :        +- * Project (14)
                        :     :     :  :           +- * SortMergeJoin Inner (13)
                        :     :     :  :              :- * Sort (10)
                        :     :     :  :              :  +- Exchange (9)
                        :     :     :  :              :     +- * Filter (8)
                        :     :     :  :              :        +- * ColumnarToRow (7)
                        :     :     :  :              :           +- Scan parquet default.web_sales (6)
                        :     :     :  :              +- * Sort (12)
                        :     :     :  :                 +- ReusedExchange (11)
                        :     :     :  +- * Sort (36)
                        :     :     :     +- Exchange (35)
                        :     :     :        +- * Project (34)
                        :     :     :           +- * SortMergeJoin Inner (33)
                        :     :     :              :- * Sort (30)
                        :     :     :              :  +- Exchange (29)
                        :     :     :              :     +- * SortMergeJoin Inner (28)
                        :     :     :              :        :- * Sort (22)
                        :     :     :              :        :  +- Exchange (21)
                        :     :     :              :        :     +- * Filter (20)
                        :     :     :              :        :        +- * ColumnarToRow (19)
                        :     :     :              :        :           +- Scan parquet default.web_returns (18)
                        :     :     :              :        +- * Sort (27)
                        :     :     :              :           +- Exchange (26)
                        :     :     :              :              +- * Filter (25)
                        :     :     :              :                 +- * ColumnarToRow (24)
                        :     :     :              :                    +- Scan parquet default.web_sales (23)
                        :     :     :              +- * Sort (32)
                        :     :     :                 +- ReusedExchange (31)
                        :     :     +- BroadcastExchange (42)
                        :     :        +- * Project (41)
                        :     :           +- * Filter (40)
                        :     :              +- * ColumnarToRow (39)
                        :     :                 +- Scan parquet default.date_dim (38)
                        :     +- BroadcastExchange (49)
                        :        +- * Project (48)
                        :           +- * Filter (47)
                        :              +- * ColumnarToRow (46)
                        :                 +- Scan parquet default.web_site (45)
                        +- BroadcastExchange (56)
                           +- * Project (55)
                              +- * Filter (54)
                                 +- * ColumnarToRow (53)
                                    +- Scan parquet default.customer_address (52)


(1) Scan parquet default.web_sales
Output [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_ship_date_sk), IsNotNull(ws_ship_addr_sk), IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_ship_date_sk:int,ws_ship_addr_sk:int,ws_web_site_sk:int,ws_order_number:int,ws_ext_ship_cost:decimal(7,2),ws_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]

(3) Filter [codegen id : 1]
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Condition : ((isnotnull(ws_ship_date_sk#1) AND isnotnull(ws_ship_addr_sk#2)) AND isnotnull(ws_web_site_sk#3))

(4) Exchange
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Arguments: hashpartitioning(ws_order_number#4, 5), ENSURE_REQUIREMENTS, [id=#7]

(5) Sort [codegen id : 2]
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Arguments: [ws_order_number#4 ASC NULLS FIRST], false, 0

(6) Scan parquet default.web_sales
Output [2]: [ws_warehouse_sk#8, ws_order_number#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_order_number), IsNotNull(ws_warehouse_sk)]
ReadSchema: struct<ws_warehouse_sk:int,ws_order_number:int>

(7) ColumnarToRow [codegen id : 3]
Input [2]: [ws_warehouse_sk#8, ws_order_number#4]

(8) Filter [codegen id : 3]
Input [2]: [ws_warehouse_sk#8, ws_order_number#4]
Condition : (isnotnull(ws_order_number#4) AND isnotnull(ws_warehouse_sk#8))

(9) Exchange
Input [2]: [ws_warehouse_sk#8, ws_order_number#4]
Arguments: hashpartitioning(ws_order_number#4, 5), ENSURE_REQUIREMENTS, [id=#9]

(10) Sort [codegen id : 4]
Input [2]: [ws_warehouse_sk#8, ws_order_number#4]
Arguments: [ws_order_number#4 ASC NULLS FIRST], false, 0

(11) ReusedExchange [Reuses operator id: 9]
Output [2]: [ws_warehouse_sk#10, ws_order_number#11]

(12) Sort [codegen id : 6]
Input [2]: [ws_warehouse_sk#10, ws_order_number#11]
Arguments: [ws_order_number#11 ASC NULLS FIRST], false, 0

(13) SortMergeJoin [codegen id : 7]
Left keys [1]: [ws_order_number#4]
Right keys [1]: [ws_order_number#11]
Join condition: NOT (ws_warehouse_sk#8 = ws_warehouse_sk#10)

(14) Project [codegen id : 7]
Output [1]: [ws_order_number#4 AS ws_order_number#4#12]
Input [4]: [ws_warehouse_sk#8, ws_order_number#4, ws_warehouse_sk#10, ws_order_number#11]

(15) SortMergeJoin
Left keys [1]: [ws_order_number#4]
Right keys [1]: [ws_order_number#4#12]
Join condition: None

(16) Exchange
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Arguments: hashpartitioning(cast(ws_order_number#4 as bigint), 5), ENSURE_REQUIREMENTS, [id=#13]

(17) Sort [codegen id : 8]
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Arguments: [cast(ws_order_number#4 as bigint) ASC NULLS FIRST], false, 0

(18) Scan parquet default.web_returns
Output [1]: [wr_order_number#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_order_number)]
ReadSchema: struct<wr_order_number:bigint>

(19) ColumnarToRow [codegen id : 9]
Input [1]: [wr_order_number#14]

(20) Filter [codegen id : 9]
Input [1]: [wr_order_number#14]
Condition : isnotnull(wr_order_number#14)

(21) Exchange
Input [1]: [wr_order_number#14]
Arguments: hashpartitioning(wr_order_number#14, 5), ENSURE_REQUIREMENTS, [id=#15]

(22) Sort [codegen id : 10]
Input [1]: [wr_order_number#14]
Arguments: [wr_order_number#14 ASC NULLS FIRST], false, 0

(23) Scan parquet default.web_sales
Output [2]: [ws_warehouse_sk#8, ws_order_number#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_order_number), IsNotNull(ws_warehouse_sk)]
ReadSchema: struct<ws_warehouse_sk:int,ws_order_number:int>

(24) ColumnarToRow [codegen id : 11]
Input [2]: [ws_warehouse_sk#8, ws_order_number#4]

(25) Filter [codegen id : 11]
Input [2]: [ws_warehouse_sk#8, ws_order_number#4]
Condition : (isnotnull(ws_order_number#4) AND isnotnull(ws_warehouse_sk#8))

(26) Exchange
Input [2]: [ws_warehouse_sk#8, ws_order_number#4]
Arguments: hashpartitioning(cast(ws_order_number#4 as bigint), 5), ENSURE_REQUIREMENTS, [id=#16]

(27) Sort [codegen id : 12]
Input [2]: [ws_warehouse_sk#8, ws_order_number#4]
Arguments: [cast(ws_order_number#4 as bigint) ASC NULLS FIRST], false, 0

(28) SortMergeJoin [codegen id : 13]
Left keys [1]: [wr_order_number#14]
Right keys [1]: [cast(ws_order_number#4 as bigint)]
Join condition: None

(29) Exchange
Input [3]: [wr_order_number#14, ws_warehouse_sk#8, ws_order_number#4]
Arguments: hashpartitioning(ws_order_number#4, 5), ENSURE_REQUIREMENTS, [id=#17]

(30) Sort [codegen id : 14]
Input [3]: [wr_order_number#14, ws_warehouse_sk#8, ws_order_number#4]
Arguments: [ws_order_number#4 ASC NULLS FIRST], false, 0

(31) ReusedExchange [Reuses operator id: 9]
Output [2]: [ws_warehouse_sk#18, ws_order_number#19]

(32) Sort [codegen id : 16]
Input [2]: [ws_warehouse_sk#18, ws_order_number#19]
Arguments: [ws_order_number#19 ASC NULLS FIRST], false, 0

(33) SortMergeJoin [codegen id : 17]
Left keys [1]: [ws_order_number#4]
Right keys [1]: [ws_order_number#19]
Join condition: NOT (ws_warehouse_sk#8 = ws_warehouse_sk#18)

(34) Project [codegen id : 17]
Output [1]: [wr_order_number#14]
Input [5]: [wr_order_number#14, ws_warehouse_sk#8, ws_order_number#4, ws_warehouse_sk#18, ws_order_number#19]

(35) Exchange
Input [1]: [wr_order_number#14]
Arguments: hashpartitioning(wr_order_number#14, 5), ENSURE_REQUIREMENTS, [id=#20]

(36) Sort [codegen id : 18]
Input [1]: [wr_order_number#14]
Arguments: [wr_order_number#14 ASC NULLS FIRST], false, 0

(37) SortMergeJoin
Left keys [1]: [cast(ws_order_number#4 as bigint)]
Right keys [1]: [wr_order_number#14]
Join condition: None

(38) Scan parquet default.date_dim
Output [2]: [d_date_sk#21, d_date#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-01), LessThanOrEqual(d_date,1999-04-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(39) ColumnarToRow [codegen id : 19]
Input [2]: [d_date_sk#21, d_date#22]

(40) Filter [codegen id : 19]
Input [2]: [d_date_sk#21, d_date#22]
Condition : (((isnotnull(d_date#22) AND (d_date#22 >= 10623)) AND (d_date#22 <= 10683)) AND isnotnull(d_date_sk#21))

(41) Project [codegen id : 19]
Output [1]: [d_date_sk#21]
Input [2]: [d_date_sk#21, d_date#22]

(42) BroadcastExchange
Input [1]: [d_date_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#23]

(43) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ws_ship_date_sk#1]
Right keys [1]: [d_date_sk#21]
Join condition: None

(44) Project [codegen id : 22]
Output [5]: [ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, d_date_sk#21]

(45) Scan parquet default.web_site
Output [2]: [web_site_sk#24, web_company_name#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri), IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_company_name:string>

(46) ColumnarToRow [codegen id : 20]
Input [2]: [web_site_sk#24, web_company_name#25]

(47) Filter [codegen id : 20]
Input [2]: [web_site_sk#24, web_company_name#25]
Condition : ((isnotnull(web_company_name#25) AND (web_company_name#25 = pri)) AND isnotnull(web_site_sk#24))

(48) Project [codegen id : 20]
Output [1]: [web_site_sk#24]
Input [2]: [web_site_sk#24, web_company_name#25]

(49) BroadcastExchange
Input [1]: [web_site_sk#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#26]

(50) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ws_web_site_sk#3]
Right keys [1]: [web_site_sk#24]
Join condition: None

(51) Project [codegen id : 22]
Output [4]: [ws_ship_addr_sk#2, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [6]: [ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, web_site_sk#24]

(52) Scan parquet default.customer_address
Output [2]: [ca_address_sk#27, ca_state#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,IL), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(53) ColumnarToRow [codegen id : 21]
Input [2]: [ca_address_sk#27, ca_state#28]

(54) Filter [codegen id : 21]
Input [2]: [ca_address_sk#27, ca_state#28]
Condition : ((isnotnull(ca_state#28) AND (ca_state#28 = IL)) AND isnotnull(ca_address_sk#27))

(55) Project [codegen id : 21]
Output [1]: [ca_address_sk#27]
Input [2]: [ca_address_sk#27, ca_state#28]

(56) BroadcastExchange
Input [1]: [ca_address_sk#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#29]

(57) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ws_ship_addr_sk#2]
Right keys [1]: [ca_address_sk#27]
Join condition: None

(58) Project [codegen id : 22]
Output [3]: [ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [5]: [ws_ship_addr_sk#2, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ca_address_sk#27]

(59) HashAggregate [codegen id : 22]
Input [3]: [ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Keys [1]: [ws_order_number#4]
Functions [2]: [partial_sum(UnscaledValue(ws_ext_ship_cost#5)), partial_sum(UnscaledValue(ws_net_profit#6))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#5))#30, sum(UnscaledValue(ws_net_profit#6))#31]
Results [3]: [ws_order_number#4, sum#32, sum#33]

(60) Exchange
Input [3]: [ws_order_number#4, sum#32, sum#33]
Arguments: hashpartitioning(ws_order_number#4, 5), ENSURE_REQUIREMENTS, [id=#34]

(61) HashAggregate [codegen id : 23]
Input [3]: [ws_order_number#4, sum#32, sum#33]
Keys [1]: [ws_order_number#4]
Functions [2]: [merge_sum(UnscaledValue(ws_ext_ship_cost#5)), merge_sum(UnscaledValue(ws_net_profit#6))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#5))#30, sum(UnscaledValue(ws_net_profit#6))#31]
Results [3]: [ws_order_number#4, sum#32, sum#33]

(62) HashAggregate [codegen id : 23]
Input [3]: [ws_order_number#4, sum#32, sum#33]
Keys: []
Functions [3]: [merge_sum(UnscaledValue(ws_ext_ship_cost#5)), merge_sum(UnscaledValue(ws_net_profit#6)), partial_count(distinct ws_order_number#4)]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#5))#30, sum(UnscaledValue(ws_net_profit#6))#31, count(ws_order_number#4)#35]
Results [3]: [sum#32, sum#33, count#36]

(63) Exchange
Input [3]: [sum#32, sum#33, count#36]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#37]

(64) HashAggregate [codegen id : 24]
Input [3]: [sum#32, sum#33, count#36]
Keys: []
Functions [3]: [sum(UnscaledValue(ws_ext_ship_cost#5)), sum(UnscaledValue(ws_net_profit#6)), count(distinct ws_order_number#4)]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#5))#30, sum(UnscaledValue(ws_net_profit#6))#31, count(ws_order_number#4)#35]
Results [3]: [count(ws_order_number#4)#35 AS order count #38, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#5))#30,17,2) AS total shipping cost #39, MakeDecimal(sum(UnscaledValue(ws_net_profit#6))#31,17,2) AS total net profit #40]

(65) Sort [codegen id : 24]
Input [3]: [order count #38, total shipping cost #39, total net profit #40]
Arguments: [order count #38 ASC NULLS FIRST], true, 0

