== Physical Plan ==
* HashAggregate (63)
+- Exchange (62)
   +- * HashAggregate (61)
      +- * HashAggregate (60)
         +- * HashAggregate (59)
            +- * Project (58)
               +- * BroadcastHashJoin Inner BuildRight (57)
                  :- * Project (51)
                  :  +- * BroadcastHashJoin Inner BuildRight (50)
                  :     :- * Project (44)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (43)
                  :     :     :- * SortMergeJoin LeftSemi (37)
                  :     :     :  :- * SortMergeJoin LeftSemi (20)
                  :     :     :  :  :- * Sort (6)
                  :     :     :  :  :  +- Exchange (5)
                  :     :     :  :  :     +- * Project (4)
                  :     :     :  :  :        +- * Filter (3)
                  :     :     :  :  :           +- * ColumnarToRow (2)
                  :     :     :  :  :              +- Scan parquet default.web_sales (1)
                  :     :     :  :  +- * Sort (19)
                  :     :     :  :     +- * HashAggregate (18)
                  :     :     :  :        +- * HashAggregate (17)
                  :     :     :  :           +- * Project (16)
                  :     :     :  :              +- * SortMergeJoin Inner (15)
                  :     :     :  :                 :- * Sort (12)
                  :     :     :  :                 :  +- Exchange (11)
                  :     :     :  :                 :     +- * Project (10)
                  :     :     :  :                 :        +- * Filter (9)
                  :     :     :  :                 :           +- * ColumnarToRow (8)
                  :     :     :  :                 :              +- Scan parquet default.web_sales (7)
                  :     :     :  :                 +- * Sort (14)
                  :     :     :  :                    +- ReusedExchange (13)
                  :     :     :  +- * Sort (36)
                  :     :     :     +- * HashAggregate (35)
                  :     :     :        +- * HashAggregate (34)
                  :     :     :           +- * Project (33)
                  :     :     :              +- * SortMergeJoin Inner (32)
                  :     :     :                 :- * SortMergeJoin Inner (29)
                  :     :     :                 :  :- * Sort (26)
                  :     :     :                 :  :  +- Exchange (25)
                  :     :     :                 :  :     +- * Project (24)
                  :     :     :                 :  :        +- * Filter (23)
                  :     :     :                 :  :           +- * ColumnarToRow (22)
                  :     :     :                 :  :              +- Scan parquet default.web_returns (21)
                  :     :     :                 :  +- * Sort (28)
                  :     :     :                 :     +- ReusedExchange (27)
                  :     :     :                 +- * Sort (31)
                  :     :     :                    +- ReusedExchange (30)
                  :     :     +- BroadcastExchange (42)
                  :     :        +- * Project (41)
                  :     :           +- * Filter (40)
                  :     :              +- * ColumnarToRow (39)
                  :     :                 +- Scan parquet default.customer_address (38)
                  :     +- BroadcastExchange (49)
                  :        +- * Project (48)
                  :           +- * Filter (47)
                  :              +- * ColumnarToRow (46)
                  :                 +- Scan parquet default.web_site (45)
                  +- BroadcastExchange (56)
                     +- * Project (55)
                        +- * Filter (54)
                           +- * ColumnarToRow (53)
                              +- Scan parquet default.date_dim (52)


(1) Scan parquet default.web_sales
Output [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ws_sold_date_sk#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_ship_date_sk), IsNotNull(ws_ship_addr_sk), IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_ship_date_sk:int,ws_ship_addr_sk:int,ws_web_site_sk:int,ws_order_number:int,ws_ext_ship_cost:decimal(7,2),ws_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ws_sold_date_sk#7]

(3) Filter [codegen id : 1]
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ws_sold_date_sk#7]
Condition : ((isnotnull(ws_ship_date_sk#1) AND isnotnull(ws_ship_addr_sk#2)) AND isnotnull(ws_web_site_sk#3))

(4) Project [codegen id : 1]
Output [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ws_sold_date_sk#7]

(5) Exchange
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Arguments: hashpartitioning(ws_order_number#4, 5), ENSURE_REQUIREMENTS, [id=#8]

(6) Sort [codegen id : 2]
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Arguments: [ws_order_number#4 ASC NULLS FIRST], false, 0

(7) Scan parquet default.web_sales
Output [3]: [ws_warehouse_sk#9, ws_order_number#10, ws_sold_date_sk#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_order_number), IsNotNull(ws_warehouse_sk)]
ReadSchema: struct<ws_warehouse_sk:int,ws_order_number:int>

(8) ColumnarToRow [codegen id : 3]
Input [3]: [ws_warehouse_sk#9, ws_order_number#10, ws_sold_date_sk#11]

(9) Filter [codegen id : 3]
Input [3]: [ws_warehouse_sk#9, ws_order_number#10, ws_sold_date_sk#11]
Condition : (isnotnull(ws_order_number#10) AND isnotnull(ws_warehouse_sk#9))

(10) Project [codegen id : 3]
Output [2]: [ws_warehouse_sk#9, ws_order_number#10]
Input [3]: [ws_warehouse_sk#9, ws_order_number#10, ws_sold_date_sk#11]

(11) Exchange
Input [2]: [ws_warehouse_sk#9, ws_order_number#10]
Arguments: hashpartitioning(ws_order_number#10, 5), ENSURE_REQUIREMENTS, [id=#12]

(12) Sort [codegen id : 4]
Input [2]: [ws_warehouse_sk#9, ws_order_number#10]
Arguments: [ws_order_number#10 ASC NULLS FIRST], false, 0

(13) ReusedExchange [Reuses operator id: 11]
Output [2]: [ws_warehouse_sk#13, ws_order_number#14]

(14) Sort [codegen id : 6]
Input [2]: [ws_warehouse_sk#13, ws_order_number#14]
Arguments: [ws_order_number#14 ASC NULLS FIRST], false, 0

(15) SortMergeJoin [codegen id : 7]
Left keys [1]: [ws_order_number#10]
Right keys [1]: [ws_order_number#14]
Join condition: NOT (ws_warehouse_sk#9 = ws_warehouse_sk#13)

(16) Project [codegen id : 7]
Output [1]: [ws_order_number#10]
Input [4]: [ws_warehouse_sk#9, ws_order_number#10, ws_warehouse_sk#13, ws_order_number#14]

(17) HashAggregate [codegen id : 7]
Input [1]: [ws_order_number#10]
Keys [1]: [ws_order_number#10]
Functions: []
Aggregate Attributes: []
Results [1]: [ws_order_number#10]

(18) HashAggregate [codegen id : 7]
Input [1]: [ws_order_number#10]
Keys [1]: [ws_order_number#10]
Functions: []
Aggregate Attributes: []
Results [1]: [ws_order_number#10]

(19) Sort [codegen id : 7]
Input [1]: [ws_order_number#10]
Arguments: [ws_order_number#10 ASC NULLS FIRST], false, 0

(20) SortMergeJoin [codegen id : 8]
Left keys [1]: [ws_order_number#4]
Right keys [1]: [ws_order_number#10]
Join condition: None

(21) Scan parquet default.web_returns
Output [2]: [wr_order_number#15, wr_returned_date_sk#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_order_number)]
ReadSchema: struct<wr_order_number:int>

(22) ColumnarToRow [codegen id : 9]
Input [2]: [wr_order_number#15, wr_returned_date_sk#16]

(23) Filter [codegen id : 9]
Input [2]: [wr_order_number#15, wr_returned_date_sk#16]
Condition : isnotnull(wr_order_number#15)

(24) Project [codegen id : 9]
Output [1]: [wr_order_number#15]
Input [2]: [wr_order_number#15, wr_returned_date_sk#16]

(25) Exchange
Input [1]: [wr_order_number#15]
Arguments: hashpartitioning(wr_order_number#15, 5), ENSURE_REQUIREMENTS, [id=#17]

(26) Sort [codegen id : 10]
Input [1]: [wr_order_number#15]
Arguments: [wr_order_number#15 ASC NULLS FIRST], false, 0

(27) ReusedExchange [Reuses operator id: 11]
Output [2]: [ws_warehouse_sk#18, ws_order_number#19]

(28) Sort [codegen id : 12]
Input [2]: [ws_warehouse_sk#18, ws_order_number#19]
Arguments: [ws_order_number#19 ASC NULLS FIRST], false, 0

(29) SortMergeJoin [codegen id : 13]
Left keys [1]: [wr_order_number#15]
Right keys [1]: [ws_order_number#19]
Join condition: None

(30) ReusedExchange [Reuses operator id: 11]
Output [2]: [ws_warehouse_sk#20, ws_order_number#21]

(31) Sort [codegen id : 15]
Input [2]: [ws_warehouse_sk#20, ws_order_number#21]
Arguments: [ws_order_number#21 ASC NULLS FIRST], false, 0

(32) SortMergeJoin [codegen id : 16]
Left keys [1]: [ws_order_number#19]
Right keys [1]: [ws_order_number#21]
Join condition: NOT (ws_warehouse_sk#18 = ws_warehouse_sk#20)

(33) Project [codegen id : 16]
Output [1]: [wr_order_number#15]
Input [5]: [wr_order_number#15, ws_warehouse_sk#18, ws_order_number#19, ws_warehouse_sk#20, ws_order_number#21]

(34) HashAggregate [codegen id : 16]
Input [1]: [wr_order_number#15]
Keys [1]: [wr_order_number#15]
Functions: []
Aggregate Attributes: []
Results [1]: [wr_order_number#15]

(35) HashAggregate [codegen id : 16]
Input [1]: [wr_order_number#15]
Keys [1]: [wr_order_number#15]
Functions: []
Aggregate Attributes: []
Results [1]: [wr_order_number#15]

(36) Sort [codegen id : 16]
Input [1]: [wr_order_number#15]
Arguments: [wr_order_number#15 ASC NULLS FIRST], false, 0

(37) SortMergeJoin [codegen id : 20]
Left keys [1]: [ws_order_number#4]
Right keys [1]: [wr_order_number#15]
Join condition: None

(38) Scan parquet default.customer_address
Output [2]: [ca_address_sk#22, ca_state#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,IL), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(39) ColumnarToRow [codegen id : 17]
Input [2]: [ca_address_sk#22, ca_state#23]

(40) Filter [codegen id : 17]
Input [2]: [ca_address_sk#22, ca_state#23]
Condition : ((isnotnull(ca_state#23) AND (ca_state#23 = IL)) AND isnotnull(ca_address_sk#22))

(41) Project [codegen id : 17]
Output [1]: [ca_address_sk#22]
Input [2]: [ca_address_sk#22, ca_state#23]

(42) BroadcastExchange
Input [1]: [ca_address_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#24]

(43) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ws_ship_addr_sk#2]
Right keys [1]: [ca_address_sk#22]
Join condition: None

(44) Project [codegen id : 20]
Output [5]: [ws_ship_date_sk#1, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ca_address_sk#22]

(45) Scan parquet default.web_site
Output [2]: [web_site_sk#25, web_company_name#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri                                               ), IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_company_name:string>

(46) ColumnarToRow [codegen id : 18]
Input [2]: [web_site_sk#25, web_company_name#26]

(47) Filter [codegen id : 18]
Input [2]: [web_site_sk#25, web_company_name#26]
Condition : ((isnotnull(web_company_name#26) AND (web_company_name#26 = pri                                               )) AND isnotnull(web_site_sk#25))

(48) Project [codegen id : 18]
Output [1]: [web_site_sk#25]
Input [2]: [web_site_sk#25, web_company_name#26]

(49) BroadcastExchange
Input [1]: [web_site_sk#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#27]

(50) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ws_web_site_sk#3]
Right keys [1]: [web_site_sk#25]
Join condition: None

(51) Project [codegen id : 20]
Output [4]: [ws_ship_date_sk#1, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [6]: [ws_ship_date_sk#1, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, web_site_sk#25]

(52) Scan parquet default.date_dim
Output [2]: [d_date_sk#28, d_date#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-01), LessThanOrEqual(d_date,1999-04-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(53) ColumnarToRow [codegen id : 19]
Input [2]: [d_date_sk#28, d_date#29]

(54) Filter [codegen id : 19]
Input [2]: [d_date_sk#28, d_date#29]
Condition : (((isnotnull(d_date#29) AND (d_date#29 >= 1999-02-01)) AND (d_date#29 <= 1999-04-02)) AND isnotnull(d_date_sk#28))

(55) Project [codegen id : 19]
Output [1]: [d_date_sk#28]
Input [2]: [d_date_sk#28, d_date#29]

(56) BroadcastExchange
Input [1]: [d_date_sk#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#30]

(57) BroadcastHashJoin [codegen id : 20]
Left keys [1]: [ws_ship_date_sk#1]
Right keys [1]: [d_date_sk#28]
Join condition: None

(58) Project [codegen id : 20]
Output [3]: [ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Input [5]: [ws_ship_date_sk#1, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, d_date_sk#28]

(59) HashAggregate [codegen id : 20]
Input [3]: [ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Keys [1]: [ws_order_number#4]
Functions [2]: [partial_sum(UnscaledValue(ws_ext_ship_cost#5)), partial_sum(UnscaledValue(ws_net_profit#6))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#5))#31, sum(UnscaledValue(ws_net_profit#6))#32]
Results [3]: [ws_order_number#4, sum#33, sum#34]

(60) HashAggregate [codegen id : 20]
Input [3]: [ws_order_number#4, sum#33, sum#34]
Keys [1]: [ws_order_number#4]
Functions [2]: [merge_sum(UnscaledValue(ws_ext_ship_cost#5)), merge_sum(UnscaledValue(ws_net_profit#6))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#5))#31, sum(UnscaledValue(ws_net_profit#6))#32]
Results [3]: [ws_order_number#4, sum#33, sum#34]

(61) HashAggregate [codegen id : 20]
Input [3]: [ws_order_number#4, sum#33, sum#34]
Keys: []
Functions [3]: [merge_sum(UnscaledValue(ws_ext_ship_cost#5)), merge_sum(UnscaledValue(ws_net_profit#6)), partial_count(distinct ws_order_number#4)]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#5))#31, sum(UnscaledValue(ws_net_profit#6))#32, count(ws_order_number#4)#35]
Results [3]: [sum#33, sum#34, count#36]

(62) Exchange
Input [3]: [sum#33, sum#34, count#36]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [id=#37]

(63) HashAggregate [codegen id : 21]
Input [3]: [sum#33, sum#34, count#36]
Keys: []
Functions [3]: [sum(UnscaledValue(ws_ext_ship_cost#5)), sum(UnscaledValue(ws_net_profit#6)), count(distinct ws_order_number#4)]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#5))#31, sum(UnscaledValue(ws_net_profit#6))#32, count(ws_order_number#4)#35]
Results [3]: [count(ws_order_number#4)#35 AS order count #38, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#5))#31,17,2) AS total shipping cost #39, MakeDecimal(sum(UnscaledValue(ws_net_profit#6))#32,17,2) AS total net profit #40]

