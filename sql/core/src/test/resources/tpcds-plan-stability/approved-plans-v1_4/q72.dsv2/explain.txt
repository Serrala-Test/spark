== Physical Plan ==
TakeOrderedAndProject (73)
+- * HashAggregate (72)
   +- Exchange (71)
      +- * HashAggregate (70)
         +- * Project (69)
            +- * SortMergeJoin LeftOuter (68)
               :- * Sort (62)
               :  +- Exchange (61)
               :     +- * Project (60)
               :        +- * BroadcastHashJoin LeftOuter BuildRight (59)
               :           :- * Project (54)
               :           :  +- * BroadcastHashJoin Inner BuildRight (53)
               :           :     :- * Project (48)
               :           :     :  +- * BroadcastHashJoin Inner BuildRight (47)
               :           :     :     :- * Project (42)
               :           :     :     :  +- * BroadcastHashJoin Inner BuildRight (41)
               :           :     :     :     :- * Project (36)
               :           :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (35)
               :           :     :     :     :     :- * Project (30)
               :           :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (29)
               :           :     :     :     :     :     :- * Project (24)
               :           :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (23)
               :           :     :     :     :     :     :     :- * Project (18)
               :           :     :     :     :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (17)
               :           :     :     :     :     :     :     :     :- * Project (12)
               :           :     :     :     :     :     :     :     :  +- * SortMergeJoin Inner (11)
               :           :     :     :     :     :     :     :     :     :- * Sort (5)
               :           :     :     :     :     :     :     :     :     :  +- Exchange (4)
               :           :     :     :     :     :     :     :     :     :     +- * Project (3)
               :           :     :     :     :     :     :     :     :     :        +- * Filter (2)
               :           :     :     :     :     :     :     :     :     :           +- BatchScan default.catalog_sales (1)
               :           :     :     :     :     :     :     :     :     +- * Sort (10)
               :           :     :     :     :     :     :     :     :        +- Exchange (9)
               :           :     :     :     :     :     :     :     :           +- * Project (8)
               :           :     :     :     :     :     :     :     :              +- * Filter (7)
               :           :     :     :     :     :     :     :     :                 +- BatchScan default.inventory (6)
               :           :     :     :     :     :     :     :     +- BroadcastExchange (16)
               :           :     :     :     :     :     :     :        +- * Project (15)
               :           :     :     :     :     :     :     :           +- * Filter (14)
               :           :     :     :     :     :     :     :              +- BatchScan default.warehouse (13)
               :           :     :     :     :     :     :     +- BroadcastExchange (22)
               :           :     :     :     :     :     :        +- * Project (21)
               :           :     :     :     :     :     :           +- * Filter (20)
               :           :     :     :     :     :     :              +- BatchScan default.item (19)
               :           :     :     :     :     :     +- BroadcastExchange (28)
               :           :     :     :     :     :        +- * Project (27)
               :           :     :     :     :     :           +- * Filter (26)
               :           :     :     :     :     :              +- BatchScan default.customer_demographics (25)
               :           :     :     :     :     +- BroadcastExchange (34)
               :           :     :     :     :        +- * Project (33)
               :           :     :     :     :           +- * Filter (32)
               :           :     :     :     :              +- BatchScan default.household_demographics (31)
               :           :     :     :     +- BroadcastExchange (40)
               :           :     :     :        +- * Project (39)
               :           :     :     :           +- * Filter (38)
               :           :     :     :              +- BatchScan default.date_dim (37)
               :           :     :     +- BroadcastExchange (46)
               :           :     :        +- * Project (45)
               :           :     :           +- * Filter (44)
               :           :     :              +- BatchScan default.date_dim (43)
               :           :     +- BroadcastExchange (52)
               :           :        +- * Project (51)
               :           :           +- * Filter (50)
               :           :              +- BatchScan default.date_dim (49)
               :           +- BroadcastExchange (58)
               :              +- * Project (57)
               :                 +- * Filter (56)
               :                    +- BatchScan default.promotion (55)
               +- * Sort (67)
                  +- Exchange (66)
                     +- * Project (65)
                        +- * Filter (64)
                           +- BatchScan default.catalog_returns (63)


(1) BatchScan default.catalog_sales
Output [8]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]
DataFilters: [isnotnull(cs_quantity#7), isnotnull(cs_item_sk#4), isnotnull(cs_bill_cdemo_sk#2), isnotnull(cs_bill_hdemo_sk#3), isnotnull(cs_ship_date_sk#1)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/catalog_sales]
PartitionFilters: [isnotnull(cs_sold_date_sk#8)]
PushedFilters: [IsNotNull(cs_quantity), IsNotNull(cs_item_sk), IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_hdemo_sk), IsNotNull(cs_ship_date_sk)]
ReadSchema: struct<cs_ship_date_sk:int,cs_bill_cdemo_sk:int,cs_bill_hdemo_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_quantity:int>

(2) Filter [codegen id : 1]
Input [8]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]
Condition : (((((((isnotnull(cs_quantity#7) AND isnotnull(cs_item_sk#4)) AND isnotnull(cs_bill_cdemo_sk#2)) AND isnotnull(cs_bill_hdemo_sk#3)) AND isnotnull(cs_ship_date_sk#1)) AND might_contain(Subquery scalar-subquery#9, [id=#10], xxhash64(cs_bill_cdemo_sk#2, 42))) AND might_contain(Subquery scalar-subquery#11, [id=#12], xxhash64(cs_bill_hdemo_sk#3, 42))) AND might_contain(Subquery scalar-subquery#13, [id=#14], xxhash64(cs_sold_date_sk#8, 42)))

(3) Project [codegen id : 1]
Output [8]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]
Input [8]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]

(4) Exchange
Input [8]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]
Arguments: hashpartitioning(cs_item_sk#4, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [8]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8]
Arguments: [cs_item_sk#4 ASC NULLS FIRST], false, 0

(6) BatchScan default.inventory
Output [4]: [inv_item_sk#15, inv_warehouse_sk#16, inv_quantity_on_hand#17, inv_date_sk#18]
DataFilters: [isnotnull(inv_quantity_on_hand#17), isnotnull(inv_item_sk#15), isnotnull(inv_warehouse_sk#16)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/inventory]
PartitionFilters: [isnotnull(inv_date_sk#18)]
PushedFilters: [IsNotNull(inv_quantity_on_hand), IsNotNull(inv_item_sk), IsNotNull(inv_warehouse_sk)]
ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(7) Filter [codegen id : 3]
Input [4]: [inv_item_sk#15, inv_warehouse_sk#16, inv_quantity_on_hand#17, inv_date_sk#18]
Condition : ((isnotnull(inv_quantity_on_hand#17) AND isnotnull(inv_item_sk#15)) AND isnotnull(inv_warehouse_sk#16))

(8) Project [codegen id : 3]
Output [4]: [inv_item_sk#15, inv_warehouse_sk#16, inv_quantity_on_hand#17, inv_date_sk#18]
Input [4]: [inv_item_sk#15, inv_warehouse_sk#16, inv_quantity_on_hand#17, inv_date_sk#18]

(9) Exchange
Input [4]: [inv_item_sk#15, inv_warehouse_sk#16, inv_quantity_on_hand#17, inv_date_sk#18]
Arguments: hashpartitioning(inv_item_sk#15, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(10) Sort [codegen id : 4]
Input [4]: [inv_item_sk#15, inv_warehouse_sk#16, inv_quantity_on_hand#17, inv_date_sk#18]
Arguments: [inv_item_sk#15 ASC NULLS FIRST], false, 0

(11) SortMergeJoin [codegen id : 13]
Left keys [1]: [cs_item_sk#4]
Right keys [1]: [inv_item_sk#15]
Join type: Inner
Join condition: (inv_quantity_on_hand#17 < cs_quantity#7)

(12) Project [codegen id : 13]
Output [9]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_sold_date_sk#8, inv_warehouse_sk#16, inv_date_sk#18]
Input [12]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_quantity#7, cs_sold_date_sk#8, inv_item_sk#15, inv_warehouse_sk#16, inv_quantity_on_hand#17, inv_date_sk#18]

(13) BatchScan default.warehouse
Output [2]: [w_warehouse_sk#19, w_warehouse_name#20]
DataFilters: [isnotnull(w_warehouse_sk#19)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>

(14) Filter [codegen id : 5]
Input [2]: [w_warehouse_sk#19, w_warehouse_name#20]
Condition : isnotnull(w_warehouse_sk#19)

(15) Project [codegen id : 5]
Output [2]: [w_warehouse_sk#19, w_warehouse_name#20]
Input [2]: [w_warehouse_sk#19, w_warehouse_name#20]

(16) BroadcastExchange
Input [2]: [w_warehouse_sk#19, w_warehouse_name#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(17) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [inv_warehouse_sk#16]
Right keys [1]: [w_warehouse_sk#19]
Join type: Inner
Join condition: None

(18) Project [codegen id : 13]
Output [9]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_sold_date_sk#8, inv_date_sk#18, w_warehouse_name#20]
Input [11]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_sold_date_sk#8, inv_warehouse_sk#16, inv_date_sk#18, w_warehouse_sk#19, w_warehouse_name#20]

(19) BatchScan default.item
Output [2]: [i_item_sk#21, i_item_desc#22]
DataFilters: [isnotnull(i_item_sk#21)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(20) Filter [codegen id : 6]
Input [2]: [i_item_sk#21, i_item_desc#22]
Condition : isnotnull(i_item_sk#21)

(21) Project [codegen id : 6]
Output [2]: [i_item_sk#21, i_item_desc#22]
Input [2]: [i_item_sk#21, i_item_desc#22]

(22) BroadcastExchange
Input [2]: [i_item_sk#21, i_item_desc#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(23) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [cs_item_sk#4]
Right keys [1]: [i_item_sk#21]
Join type: Inner
Join condition: None

(24) Project [codegen id : 13]
Output [10]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_sold_date_sk#8, inv_date_sk#18, w_warehouse_name#20, i_item_desc#22]
Input [11]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_sold_date_sk#8, inv_date_sk#18, w_warehouse_name#20, i_item_sk#21, i_item_desc#22]

(25) BatchScan default.customer_demographics
Output [2]: [cd_demo_sk#23, cd_marital_status#24]
DataFilters: [isnotnull(cd_marital_status#24), (cd_marital_status#24 = D), isnotnull(cd_demo_sk#23)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_marital_status), EqualTo(cd_marital_status,D), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string>

(26) Filter [codegen id : 7]
Input [2]: [cd_demo_sk#23, cd_marital_status#24]
Condition : ((isnotnull(cd_marital_status#24) AND (cd_marital_status#24 = D)) AND isnotnull(cd_demo_sk#23))

(27) Project [codegen id : 7]
Output [1]: [cd_demo_sk#23]
Input [2]: [cd_demo_sk#23, cd_marital_status#24]

(28) BroadcastExchange
Input [1]: [cd_demo_sk#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(29) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [cs_bill_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#23]
Join type: Inner
Join condition: None

(30) Project [codegen id : 13]
Output [9]: [cs_ship_date_sk#1, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_sold_date_sk#8, inv_date_sk#18, w_warehouse_name#20, i_item_desc#22]
Input [11]: [cs_ship_date_sk#1, cs_bill_cdemo_sk#2, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_sold_date_sk#8, inv_date_sk#18, w_warehouse_name#20, i_item_desc#22, cd_demo_sk#23]

(31) BatchScan default.household_demographics
Output [2]: [hd_demo_sk#25, hd_buy_potential#26]
DataFilters: [isnotnull(hd_buy_potential#26), (hd_buy_potential#26 = >10000         ), isnotnull(hd_demo_sk#25)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_buy_potential), EqualTo(hd_buy_potential,>10000         ), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string>

(32) Filter [codegen id : 8]
Input [2]: [hd_demo_sk#25, hd_buy_potential#26]
Condition : ((isnotnull(hd_buy_potential#26) AND (hd_buy_potential#26 = >10000         )) AND isnotnull(hd_demo_sk#25))

(33) Project [codegen id : 8]
Output [1]: [hd_demo_sk#25]
Input [2]: [hd_demo_sk#25, hd_buy_potential#26]

(34) BroadcastExchange
Input [1]: [hd_demo_sk#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

(35) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [cs_bill_hdemo_sk#3]
Right keys [1]: [hd_demo_sk#25]
Join type: Inner
Join condition: None

(36) Project [codegen id : 13]
Output [8]: [cs_ship_date_sk#1, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_sold_date_sk#8, inv_date_sk#18, w_warehouse_name#20, i_item_desc#22]
Input [10]: [cs_ship_date_sk#1, cs_bill_hdemo_sk#3, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_sold_date_sk#8, inv_date_sk#18, w_warehouse_name#20, i_item_desc#22, hd_demo_sk#25]

(37) BatchScan default.date_dim
Output [4]: [d_date_sk#27, d_date#28, d_week_seq#29, d_year#30]
DataFilters: [isnotnull(d_year#30), (d_year#30 = 1999), isnotnull(d_date_sk#27), isnotnull(d_week_seq#29), isnotnull(d_date#28)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1999), IsNotNull(d_date_sk), IsNotNull(d_week_seq), IsNotNull(d_date)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_week_seq:int,d_year:int>

(38) Filter [codegen id : 9]
Input [4]: [d_date_sk#27, d_date#28, d_week_seq#29, d_year#30]
Condition : ((((isnotnull(d_year#30) AND (d_year#30 = 1999)) AND isnotnull(d_date_sk#27)) AND isnotnull(d_week_seq#29)) AND isnotnull(d_date#28))

(39) Project [codegen id : 9]
Output [3]: [d_date_sk#27, d_date#28, d_week_seq#29]
Input [4]: [d_date_sk#27, d_date#28, d_week_seq#29, d_year#30]

(40) BroadcastExchange
Input [3]: [d_date_sk#27, d_date#28, d_week_seq#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

(41) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [cs_sold_date_sk#8]
Right keys [1]: [d_date_sk#27]
Join type: Inner
Join condition: None

(42) Project [codegen id : 13]
Output [9]: [cs_ship_date_sk#1, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, inv_date_sk#18, w_warehouse_name#20, i_item_desc#22, d_date#28, d_week_seq#29]
Input [11]: [cs_ship_date_sk#1, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, cs_sold_date_sk#8, inv_date_sk#18, w_warehouse_name#20, i_item_desc#22, d_date_sk#27, d_date#28, d_week_seq#29]

(43) BatchScan default.date_dim
Output [2]: [d_date_sk#31, d_week_seq#32]
DataFilters: [isnotnull(d_week_seq#32), isnotnull(d_date_sk#31)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(44) Filter [codegen id : 10]
Input [2]: [d_date_sk#31, d_week_seq#32]
Condition : (isnotnull(d_week_seq#32) AND isnotnull(d_date_sk#31))

(45) Project [codegen id : 10]
Output [2]: [d_date_sk#31, d_week_seq#32]
Input [2]: [d_date_sk#31, d_week_seq#32]

(46) BroadcastExchange
Input [2]: [d_date_sk#31, d_week_seq#32]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [plan_id=8]

(47) BroadcastHashJoin [codegen id : 13]
Left keys [2]: [d_week_seq#29, inv_date_sk#18]
Right keys [2]: [d_week_seq#32, d_date_sk#31]
Join type: Inner
Join condition: None

(48) Project [codegen id : 13]
Output [8]: [cs_ship_date_sk#1, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, w_warehouse_name#20, i_item_desc#22, d_date#28, d_week_seq#29]
Input [11]: [cs_ship_date_sk#1, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, inv_date_sk#18, w_warehouse_name#20, i_item_desc#22, d_date#28, d_week_seq#29, d_date_sk#31, d_week_seq#32]

(49) BatchScan default.date_dim
Output [2]: [d_date_sk#33, d_date#34]
DataFilters: [isnotnull(d_date#34), isnotnull(d_date_sk#33)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(50) Filter [codegen id : 11]
Input [2]: [d_date_sk#33, d_date#34]
Condition : (isnotnull(d_date#34) AND isnotnull(d_date_sk#33))

(51) Project [codegen id : 11]
Output [2]: [d_date_sk#33, d_date#34]
Input [2]: [d_date_sk#33, d_date#34]

(52) BroadcastExchange
Input [2]: [d_date_sk#33, d_date#34]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

(53) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [cs_ship_date_sk#1]
Right keys [1]: [d_date_sk#33]
Join type: Inner
Join condition: (d_date#34 > date_add(d_date#28, 5))

(54) Project [codegen id : 13]
Output [6]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, w_warehouse_name#20, i_item_desc#22, d_week_seq#29]
Input [10]: [cs_ship_date_sk#1, cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, w_warehouse_name#20, i_item_desc#22, d_date#28, d_week_seq#29, d_date_sk#33, d_date#34]

(55) BatchScan default.promotion
Output [1]: [p_promo_sk#35]
DataFilters: [isnotnull(p_promo_sk#35)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int>

(56) Filter [codegen id : 12]
Input [1]: [p_promo_sk#35]
Condition : isnotnull(p_promo_sk#35)

(57) Project [codegen id : 12]
Output [1]: [p_promo_sk#35]
Input [1]: [p_promo_sk#35]

(58) BroadcastExchange
Input [1]: [p_promo_sk#35]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=10]

(59) BroadcastHashJoin [codegen id : 13]
Left keys [1]: [cs_promo_sk#5]
Right keys [1]: [p_promo_sk#35]
Join type: LeftOuter
Join condition: None

(60) Project [codegen id : 13]
Output [5]: [cs_item_sk#4, cs_order_number#6, w_warehouse_name#20, i_item_desc#22, d_week_seq#29]
Input [7]: [cs_item_sk#4, cs_promo_sk#5, cs_order_number#6, w_warehouse_name#20, i_item_desc#22, d_week_seq#29, p_promo_sk#35]

(61) Exchange
Input [5]: [cs_item_sk#4, cs_order_number#6, w_warehouse_name#20, i_item_desc#22, d_week_seq#29]
Arguments: hashpartitioning(cs_item_sk#4, cs_order_number#6, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(62) Sort [codegen id : 14]
Input [5]: [cs_item_sk#4, cs_order_number#6, w_warehouse_name#20, i_item_desc#22, d_week_seq#29]
Arguments: [cs_item_sk#4 ASC NULLS FIRST, cs_order_number#6 ASC NULLS FIRST], false, 0

(63) BatchScan default.catalog_returns
Output [2]: [cr_item_sk#36, cr_order_number#37]
DataFilters: [isnotnull(cr_item_sk#36), isnotnull(cr_order_number#37)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int>

(64) Filter [codegen id : 15]
Input [2]: [cr_item_sk#36, cr_order_number#37]
Condition : (isnotnull(cr_item_sk#36) AND isnotnull(cr_order_number#37))

(65) Project [codegen id : 15]
Output [2]: [cr_item_sk#36, cr_order_number#37]
Input [2]: [cr_item_sk#36, cr_order_number#37]

(66) Exchange
Input [2]: [cr_item_sk#36, cr_order_number#37]
Arguments: hashpartitioning(cr_item_sk#36, cr_order_number#37, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(67) Sort [codegen id : 16]
Input [2]: [cr_item_sk#36, cr_order_number#37]
Arguments: [cr_item_sk#36 ASC NULLS FIRST, cr_order_number#37 ASC NULLS FIRST], false, 0

(68) SortMergeJoin [codegen id : 17]
Left keys [2]: [cs_item_sk#4, cs_order_number#6]
Right keys [2]: [cr_item_sk#36, cr_order_number#37]
Join type: LeftOuter
Join condition: None

(69) Project [codegen id : 17]
Output [3]: [w_warehouse_name#20, i_item_desc#22, d_week_seq#29]
Input [7]: [cs_item_sk#4, cs_order_number#6, w_warehouse_name#20, i_item_desc#22, d_week_seq#29, cr_item_sk#36, cr_order_number#37]

(70) HashAggregate [codegen id : 17]
Input [3]: [w_warehouse_name#20, i_item_desc#22, d_week_seq#29]
Keys [3]: [i_item_desc#22, w_warehouse_name#20, d_week_seq#29]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#38]
Results [4]: [i_item_desc#22, w_warehouse_name#20, d_week_seq#29, count#39]

(71) Exchange
Input [4]: [i_item_desc#22, w_warehouse_name#20, d_week_seq#29, count#39]
Arguments: hashpartitioning(i_item_desc#22, w_warehouse_name#20, d_week_seq#29, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(72) HashAggregate [codegen id : 18]
Input [4]: [i_item_desc#22, w_warehouse_name#20, d_week_seq#29, count#39]
Keys [3]: [i_item_desc#22, w_warehouse_name#20, d_week_seq#29]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#40]
Results [6]: [i_item_desc#22, w_warehouse_name#20, d_week_seq#29, count(1)#40 AS no_promo#41, count(1)#40 AS promo#42, count(1)#40 AS total_cnt#43]

(73) TakeOrderedAndProject
Input [6]: [i_item_desc#22, w_warehouse_name#20, d_week_seq#29, no_promo#41, promo#42, total_cnt#43]
Arguments: 100, [total_cnt#43 DESC NULLS LAST, i_item_desc#22 ASC NULLS FIRST, w_warehouse_name#20 ASC NULLS FIRST, d_week_seq#29 ASC NULLS FIRST], [i_item_desc#22, w_warehouse_name#20, d_week_seq#29, no_promo#41, promo#42, total_cnt#43]

===== Subqueries =====

Subquery:1 Hosting operator id = 2 Hosting Expression = Subquery scalar-subquery#9, [id=#10]
ObjectHashAggregate (79)
+- Exchange (78)
   +- ObjectHashAggregate (77)
      +- * Project (76)
         +- * Filter (75)
            +- BatchScan default.customer_demographics (74)


(74) BatchScan default.customer_demographics
Output [2]: [cd_demo_sk#23, cd_marital_status#24]
DataFilters: [isnotnull(cd_marital_status#24), (cd_marital_status#24 = D), isnotnull(cd_demo_sk#23)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_marital_status), EqualTo(cd_marital_status,D), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string>

(75) Filter [codegen id : 1]
Input [2]: [cd_demo_sk#23, cd_marital_status#24]
Condition : ((isnotnull(cd_marital_status#24) AND (cd_marital_status#24 = D)) AND isnotnull(cd_demo_sk#23))

(76) Project [codegen id : 1]
Output [1]: [cd_demo_sk#23]
Input [2]: [cd_demo_sk#23, cd_marital_status#24]

(77) ObjectHashAggregate
Input [1]: [cd_demo_sk#23]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(cd_demo_sk#23, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#44]
Results [1]: [buf#45]

(78) Exchange
Input [1]: [buf#45]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=14]

(79) ObjectHashAggregate
Input [1]: [buf#45]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#23, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#23, 42), 1000000, 8388608, 0, 0)#46]
Results [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#23, 42), 1000000, 8388608, 0, 0)#46 AS bloomFilter#47]

Subquery:2 Hosting operator id = 2 Hosting Expression = Subquery scalar-subquery#11, [id=#12]
ObjectHashAggregate (85)
+- Exchange (84)
   +- ObjectHashAggregate (83)
      +- * Project (82)
         +- * Filter (81)
            +- BatchScan default.household_demographics (80)


(80) BatchScan default.household_demographics
Output [2]: [hd_demo_sk#25, hd_buy_potential#26]
DataFilters: [isnotnull(hd_buy_potential#26), (hd_buy_potential#26 = >10000         ), isnotnull(hd_demo_sk#25)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_buy_potential), EqualTo(hd_buy_potential,>10000         ), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string>

(81) Filter [codegen id : 1]
Input [2]: [hd_demo_sk#25, hd_buy_potential#26]
Condition : ((isnotnull(hd_buy_potential#26) AND (hd_buy_potential#26 = >10000         )) AND isnotnull(hd_demo_sk#25))

(82) Project [codegen id : 1]
Output [1]: [hd_demo_sk#25]
Input [2]: [hd_demo_sk#25, hd_buy_potential#26]

(83) ObjectHashAggregate
Input [1]: [hd_demo_sk#25]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(hd_demo_sk#25, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#48]
Results [1]: [buf#49]

(84) Exchange
Input [1]: [buf#49]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=15]

(85) ObjectHashAggregate
Input [1]: [buf#49]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(hd_demo_sk#25, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(hd_demo_sk#25, 42), 1000000, 8388608, 0, 0)#50]
Results [1]: [bloom_filter_agg(xxhash64(hd_demo_sk#25, 42), 1000000, 8388608, 0, 0)#50 AS bloomFilter#51]

Subquery:3 Hosting operator id = 2 Hosting Expression = Subquery scalar-subquery#13, [id=#14]
ObjectHashAggregate (91)
+- Exchange (90)
   +- ObjectHashAggregate (89)
      +- * Project (88)
         +- * Filter (87)
            +- BatchScan default.date_dim (86)


(86) BatchScan default.date_dim
Output [4]: [d_date_sk#27, d_date#28, d_week_seq#29, d_year#30]
DataFilters: [isnotnull(d_year#30), (d_year#30 = 1999), isnotnull(d_date_sk#27), isnotnull(d_week_seq#29), isnotnull(d_date#28)]
Format: parquet
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1999), IsNotNull(d_date_sk), IsNotNull(d_week_seq), IsNotNull(d_date)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_week_seq:int,d_year:int>

(87) Filter [codegen id : 1]
Input [4]: [d_date_sk#27, d_date#28, d_week_seq#29, d_year#30]
Condition : ((((isnotnull(d_year#30) AND (d_year#30 = 1999)) AND isnotnull(d_date_sk#27)) AND isnotnull(d_week_seq#29)) AND isnotnull(d_date#28))

(88) Project [codegen id : 1]
Output [1]: [d_date_sk#27]
Input [4]: [d_date_sk#27, d_date#28, d_week_seq#29, d_year#30]

(89) ObjectHashAggregate
Input [1]: [d_date_sk#27]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(d_date_sk#27, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [buf#52]
Results [1]: [buf#53]

(90) Exchange
Input [1]: [buf#53]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=16]

(91) ObjectHashAggregate
Input [1]: [buf#53]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(d_date_sk#27, 42), 1000000, 8388608, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(d_date_sk#27, 42), 1000000, 8388608, 0, 0)#54]
Results [1]: [bloom_filter_agg(xxhash64(d_date_sk#27, 42), 1000000, 8388608, 0, 0)#54 AS bloomFilter#55]


