== Physical Plan ==
TakeOrderedAndProject (39)
+- * HashAggregate (38)
   +- Exchange (37)
      +- * HashAggregate (36)
         +- * Project (35)
            +- * BroadcastHashJoin Inner BuildRight (34)
               :- * Project (28)
               :  +- * BroadcastHashJoin Inner BuildRight (27)
               :     :- * Project (21)
               :     :  +- * BroadcastHashJoin Inner BuildRight (20)
               :     :     :- * Filter (3)
               :     :     :  +- * ColumnarToRow (2)
               :     :     :     +- Scan parquet spark_catalog.default.supplier (1)
               :     :     +- BroadcastExchange (19)
               :     :        +- * BroadcastHashJoin LeftAnti BuildRight (18)
               :     :           :- * BroadcastHashJoin LeftSemi BuildRight (12)
               :     :           :  :- * Project (7)
               :     :           :  :  +- * Filter (6)
               :     :           :  :     +- * ColumnarToRow (5)
               :     :           :  :        +- Scan parquet spark_catalog.default.lineitem (4)
               :     :           :  +- BroadcastExchange (11)
               :     :           :     +- * Filter (10)
               :     :           :        +- * ColumnarToRow (9)
               :     :           :           +- Scan parquet spark_catalog.default.lineitem (8)
               :     :           +- BroadcastExchange (17)
               :     :              +- * Project (16)
               :     :                 +- * Filter (15)
               :     :                    +- * ColumnarToRow (14)
               :     :                       +- Scan parquet spark_catalog.default.lineitem (13)
               :     +- BroadcastExchange (26)
               :        +- * Project (25)
               :           +- * Filter (24)
               :              +- * ColumnarToRow (23)
               :                 +- Scan parquet spark_catalog.default.orders (22)
               +- BroadcastExchange (33)
                  +- * Project (32)
                     +- * Filter (31)
                        +- * ColumnarToRow (30)
                           +- Scan parquet spark_catalog.default.nation (29)


(1) Scan parquet spark_catalog.default.supplier
Output [3]: [s_suppkey#1, s_name#2, s_nationkey#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/supplier]
PushedFilters: [IsNotNull(s_suppkey), IsNotNull(s_nationkey)]
ReadSchema: struct<s_suppkey:bigint,s_name:string,s_nationkey:bigint>

(2) ColumnarToRow [codegen id : 6]
Input [3]: [s_suppkey#1, s_name#2, s_nationkey#3]

(3) Filter [codegen id : 6]
Input [3]: [s_suppkey#1, s_name#2, s_nationkey#3]
Condition : (isnotnull(s_suppkey#1) AND isnotnull(s_nationkey#3))

(4) Scan parquet spark_catalog.default.lineitem
Output [4]: [l_orderkey#4, l_suppkey#5, l_commitdate#6, l_receiptdate#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/lineitem]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate), IsNotNull(l_suppkey), IsNotNull(l_orderkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(5) ColumnarToRow [codegen id : 3]
Input [4]: [l_orderkey#4, l_suppkey#5, l_commitdate#6, l_receiptdate#7]

(6) Filter [codegen id : 3]
Input [4]: [l_orderkey#4, l_suppkey#5, l_commitdate#6, l_receiptdate#7]
Condition : ((((isnotnull(l_receiptdate#7) AND isnotnull(l_commitdate#6)) AND (l_receiptdate#7 > l_commitdate#6)) AND isnotnull(l_suppkey#5)) AND isnotnull(l_orderkey#4))

(7) Project [codegen id : 3]
Output [2]: [l_orderkey#4, l_suppkey#5]
Input [4]: [l_orderkey#4, l_suppkey#5, l_commitdate#6, l_receiptdate#7]

(8) Scan parquet spark_catalog.default.lineitem
Output [2]: [l_orderkey#8, l_suppkey#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/lineitem]
PushedFilters: [IsNotNull(l_orderkey), IsNotNull(l_suppkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint>

(9) ColumnarToRow [codegen id : 1]
Input [2]: [l_orderkey#8, l_suppkey#9]

(10) Filter [codegen id : 1]
Input [2]: [l_orderkey#8, l_suppkey#9]
Condition : (isnotnull(l_orderkey#8) AND isnotnull(l_suppkey#9))

(11) BroadcastExchange
Input [2]: [l_orderkey#8, l_suppkey#9]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [plan_id=1]

(12) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [l_orderkey#4]
Right keys [1]: [l_orderkey#8]
Join type: LeftSemi
Join condition: NOT (l_suppkey#9 = l_suppkey#5)

(13) Scan parquet spark_catalog.default.lineitem
Output [4]: [l_orderkey#10, l_suppkey#11, l_commitdate#12, l_receiptdate#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/lineitem]
PushedFilters: [IsNotNull(l_receiptdate), IsNotNull(l_commitdate), IsNotNull(l_orderkey), IsNotNull(l_suppkey)]
ReadSchema: struct<l_orderkey:bigint,l_suppkey:bigint,l_commitdate:date,l_receiptdate:date>

(14) ColumnarToRow [codegen id : 2]
Input [4]: [l_orderkey#10, l_suppkey#11, l_commitdate#12, l_receiptdate#13]

(15) Filter [codegen id : 2]
Input [4]: [l_orderkey#10, l_suppkey#11, l_commitdate#12, l_receiptdate#13]
Condition : ((((isnotnull(l_receiptdate#13) AND isnotnull(l_commitdate#12)) AND (l_receiptdate#13 > l_commitdate#12)) AND isnotnull(l_orderkey#10)) AND isnotnull(l_suppkey#11))

(16) Project [codegen id : 2]
Output [2]: [l_orderkey#10, l_suppkey#11]
Input [4]: [l_orderkey#10, l_suppkey#11, l_commitdate#12, l_receiptdate#13]

(17) BroadcastExchange
Input [2]: [l_orderkey#10, l_suppkey#11]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=2]

(18) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [l_orderkey#4]
Right keys [1]: [l_orderkey#10]
Join type: LeftAnti
Join condition: NOT (l_suppkey#11 = l_suppkey#5)

(19) BroadcastExchange
Input [2]: [l_orderkey#4, l_suppkey#5]
Arguments: HashedRelationBroadcastMode(List(input[1, bigint, true]),false), [plan_id=3]

(20) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [s_suppkey#1]
Right keys [1]: [l_suppkey#5]
Join type: Inner
Join condition: None

(21) Project [codegen id : 6]
Output [3]: [s_name#2, s_nationkey#3, l_orderkey#4]
Input [5]: [s_suppkey#1, s_name#2, s_nationkey#3, l_orderkey#4, l_suppkey#5]

(22) Scan parquet spark_catalog.default.orders
Output [2]: [o_orderkey#14, o_orderstatus#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/orders]
PushedFilters: [IsNotNull(o_orderstatus), EqualTo(o_orderstatus,F), IsNotNull(o_orderkey)]
ReadSchema: struct<o_orderkey:bigint,o_orderstatus:string>

(23) ColumnarToRow [codegen id : 4]
Input [2]: [o_orderkey#14, o_orderstatus#15]

(24) Filter [codegen id : 4]
Input [2]: [o_orderkey#14, o_orderstatus#15]
Condition : ((isnotnull(o_orderstatus#15) AND (o_orderstatus#15 = F)) AND isnotnull(o_orderkey#14))

(25) Project [codegen id : 4]
Output [1]: [o_orderkey#14]
Input [2]: [o_orderkey#14, o_orderstatus#15]

(26) BroadcastExchange
Input [1]: [o_orderkey#14]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=4]

(27) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [l_orderkey#4]
Right keys [1]: [o_orderkey#14]
Join type: Inner
Join condition: None

(28) Project [codegen id : 6]
Output [2]: [s_name#2, s_nationkey#3]
Input [4]: [s_name#2, s_nationkey#3, l_orderkey#4, o_orderkey#14]

(29) Scan parquet spark_catalog.default.nation
Output [2]: [n_nationkey#16, n_name#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/nation]
PushedFilters: [IsNotNull(n_name), EqualTo(n_name,SAUDI ARABIA), IsNotNull(n_nationkey)]
ReadSchema: struct<n_nationkey:bigint,n_name:string>

(30) ColumnarToRow [codegen id : 5]
Input [2]: [n_nationkey#16, n_name#17]

(31) Filter [codegen id : 5]
Input [2]: [n_nationkey#16, n_name#17]
Condition : ((isnotnull(n_name#17) AND (n_name#17 = SAUDI ARABIA)) AND isnotnull(n_nationkey#16))

(32) Project [codegen id : 5]
Output [1]: [n_nationkey#16]
Input [2]: [n_nationkey#16, n_name#17]

(33) BroadcastExchange
Input [1]: [n_nationkey#16]
Arguments: HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [plan_id=5]

(34) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [s_nationkey#3]
Right keys [1]: [n_nationkey#16]
Join type: Inner
Join condition: None

(35) Project [codegen id : 6]
Output [1]: [s_name#2]
Input [3]: [s_name#2, s_nationkey#3, n_nationkey#16]

(36) HashAggregate [codegen id : 6]
Input [1]: [s_name#2]
Keys [1]: [s_name#2]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#18]
Results [2]: [s_name#2, count#19]

(37) Exchange
Input [2]: [s_name#2, count#19]
Arguments: hashpartitioning(s_name#2, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(38) HashAggregate [codegen id : 7]
Input [2]: [s_name#2, count#19]
Keys [1]: [s_name#2]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#20]
Results [2]: [s_name#2, count(1)#20 AS numwait#21]

(39) TakeOrderedAndProject
Input [2]: [s_name#2, numwait#21]
Arguments: 100, [numwait#21 DESC NULLS LAST, s_name#2 ASC NULLS FIRST], [s_name#2, numwait#21]

