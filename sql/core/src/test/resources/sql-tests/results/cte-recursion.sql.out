-- Automatically generated by SQLQueryTestSuite
-- Number of queries: 42


-- !query
CREATE TEMPORARY VIEW t AS SELECT * FROM VALUES 0, 1, 2 AS t(id)
-- !query schema
struct<>
-- !query output



-- !query
WITH r(level) AS (
  VALUES (0)
  UNION ALL
  SELECT level + 1 FROM r WHERE level < 10
)
SELECT * FROM r
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
Table or view not found: r; line 4 pos 24


-- !query
WITH RECURSIVE r(level) AS (
  VALUES (0)
  UNION ALL
  SELECT level + 1 FROM r WHERE level < 10
)
SELECT * FROM r
-- !query schema
struct<level:int>
-- !query output
0
1
10
2
3
4
5
6
7
8
9


-- !query
SET spark.sql.cte.recursion.level.limit=100
-- !query schema
struct<key:string,value:string>
-- !query output
spark.sql.cte.recursion.level.limit	100


-- !query
WITH RECURSIVE r(level) AS (
  VALUES (0)
  UNION ALL
  SELECT level + 1 FROM r
)
SELECT * FROM r
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkException
Recursion level limit 100 reached but query has not exhausted, try increasing spark.sql.cte.recursion.level.limit


-- !query
WITH RECURSIVE r(level) AS (
  VALUES (0)
  UNION ALL
  SELECT level + 1 FROM r
)
SELECT * FROM r LIMIT 10
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkException
Recursion level limit 100 reached but query has not exhausted, try increasing spark.sql.cte.recursion.level.limit


-- !query
WITH RECURSIVE r(level) AS (
  VALUES (0)
  UNION ALL
  SELECT level + 1 FROM r
)
SELECT level, level FROM r LIMIT 10
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkException
Recursion level limit 100 reached but query has not exhausted, try increasing spark.sql.cte.recursion.level.limit


-- !query
WITH RECURSIVE r(level) AS (
  VALUES (0)
  UNION ALL
  SELECT level + 1 FROM r
)
SELECT level, level FROM r ORDER BY level LIMIT 10
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkException
Recursion level limit 100 reached but query has not exhausted, try increasing spark.sql.cte.recursion.level.limit


-- !query
WITH RECURSIVE r(c) AS (
  SELECT 'a'
  UNION ALL
  SELECT c || ' b' FROM r WHERE LENGTH(c) < 10
)
SELECT * FROM r
-- !query schema
struct<c:string>
-- !query output
a
a b
a b b
a b b b
a b b b b
a b b b b b


-- !query
WITH RECURSIVE r(level) AS (
  SELECT level + 1 FROM r WHERE level < 10
  UNION ALL
  VALUES (0)
)
SELECT * FROM r
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
Recursive query r should not contain recursive references in its anchor (first) term.;


-- !query
WITH RECURSIVE r(level, data) AS (
  VALUES (0, 'A')
  UNION ALL
  VALUES (0, 'B')
  UNION ALL
  SELECT level + 1, data || 'C' FROM r WHERE level < 3
)
SELECT * FROM r
-- !query schema
struct<level:int,data:string>
-- !query output
0	A
0	B
1	AC
1	BC
2	ACC
2	BCC
3	ACCC
3	BCCC


-- !query
WITH RECURSIVE r(level, data) AS (
  VALUES (0, 'A')
  UNION ALL
  SELECT level + 1, data || 'B' FROM r WHERE level < 2
  UNION ALL
  SELECT level + 1, data || 'C' FROM r WHERE level < 3
)
SELECT * FROM r
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
Recursive query r should not contain recursive references in its anchor (first) term.;


-- !query
WITH RECURSIVE r(level, data) AS (
  VALUES (0, 'A')
  UNION ALL
  VALUES (0, 'B')
  UNION ALL
  SELECT level + 1, data || 'C' FROM r WHERE level < 2
  UNION ALL
  SELECT level + 1, data || 'D' FROM r WHERE level < 3
)
SELECT * FROM r
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
Recursive query r should not contain recursive references in its anchor (first) term.;


-- !query
WITH RECURSIVE r(level) AS (
  SELECT level + 1 FROM r WHERE level < 3
)
SELECT * FROM r
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
Recursive query r should contain UNION or UNION ALL statements only. This error can also be caused by ORDER BY or LIMIT keywords used on result of UNION or UNION ALL.;


-- !query
WITH RECURSIVE r(level) AS (
  VALUES (0), (0)
  UNION
  SELECT (level + 1) % 10 FROM r
)
SELECT * FROM r
-- !query schema
struct<level:int>
-- !query output
0
1
2
3
4
5
6
7
8
9


-- !query
WITH RECURSIVE r(level) AS (
  VALUES (0)
  INTERSECT
  SELECT level + 1 FROM r WHERE level < 10
)
SELECT * FROM r
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
Recursive query r should contain UNION or UNION ALL statements only. This error can also be caused by ORDER BY or LIMIT keywords used on result of UNION or UNION ALL.;


-- !query
WITH RECURSIVE r(level) AS (
  VALUES (0)
  UNION ALL
  SELECT level + 1 FROM r WHERE (SELECT SUM(level) FROM r) < 10
)
SELECT * FROM r
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
Recursive query r should not contain recursive references in its subquery.;


-- !query
WITH RECURSIVE r(level, data) AS (
  VALUES (0, 'A')
  UNION ALL
  SELECT r1.level + 1, r1.data
  FROM r AS r1
  JOIN r AS r2 ON r2.data = r1.data
  WHERE r1.level < 10
)
SELECT * FROM r
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
Recursive reference r cannot be used multiple times in a recursive term.;


-- !query
WITH RECURSIVE r(level, data) AS (
  VALUES (0, 'A')
  UNION ALL
  SELECT level + 1, r.data
  FROM (
    SELECT 'B' AS data
  ) AS o
  LEFT JOIN r ON r.data = o.data
)
SELECT * FROM r
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
Recursive reference r cannot be used here. This can be caused by using it on inner side of an outer join, using it with aggregate in a subquery or using it multiple times in a recursive term (except for using it on different sides of an UNION ALL).;


-- !query
WITH RECURSIVE r(level, data) AS (
  VALUES (0, 'A')
  UNION ALL
  SELECT level + 1, r.data
  FROM r
  RIGHT JOIN (
    SELECT 'B' AS data
  ) AS o ON o.data = r.data
)
SELECT * FROM r
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
Recursive reference r cannot be used here. This can be caused by using it on inner side of an outer join, using it with aggregate in a subquery or using it multiple times in a recursive term (except for using it on different sides of an UNION ALL).;


-- !query
WITH RECURSIVE r(level, data) AS (
  SELECT MAX(level) AS level, SUM(data) AS data FROM VALUES (0, 1), (0, 2)
  UNION ALL
  SELECT level + 1, data FROM r WHERE level < 10
)
SELECT * FROM r ORDER BY level
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
cannot resolve '`level`' given input columns: [col1, col2]; line 2 pos 13


-- !query
WITH RECURSIVE r(id, data) AS (
  VALUES (0, 1L)
  UNION ALL
  SELECT 1, SUM(data) FROM r WHERE data < 10 GROUP BY id
)
SELECT * FROM r
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
Recursive reference r cannot be used here. This can be caused by using it on inner side of an outer join, using it with aggregate in a subquery or using it multiple times in a recursive term (except for using it on different sides of an UNION ALL).;


-- !query
WITH RECURSIVE r(level) AS (
  VALUES (1L)
  UNION ALL
  SELECT SUM(level) FROM r WHERE level < 10
)
SELECT * FROM r
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
Recursive reference r cannot be used here. This can be caused by using it on inner side of an outer join, using it with aggregate in a subquery or using it multiple times in a recursive term (except for using it on different sides of an UNION ALL).;


-- !query
WITH RECURSIVE r(level, data) AS (
  VALUES (0, 'A')
  UNION ALL
  SELECT level + 1, data FROM r WHERE level < 10
)
SELECT COUNT(*) FROM r
-- !query schema
struct<count(1):bigint>
-- !query output
11


-- !query
WITH RECURSIVE r(level, data) AS (
  VALUES (0, 'A')
  UNION ALL
  SELECT DISTINCT level + 1, data FROM r WHERE level < 10
)
SELECT * FROM r
-- !query schema
struct<level:int,data:string>
-- !query output
0	A
1	A
10	A
2	A
3	A
4	A
5	A
6	A
7	A
8	A
9	A


-- !query
WITH RECURSIVE y AS (
  VALUES (1) AS t(id)
),
x AS (
  SELECT * FROM y
  UNION ALL
  SELECT id + 1 FROM x WHERE id < 5
)
SELECT * FROM x
-- !query schema
struct<id:int>
-- !query output
1
2
3
4
5


-- !query
WITH RECURSIVE x AS (
  VALUES (1) AS t(id)
  UNION ALL
  SELECT id + 1 FROM x WHERE id < 5
),
y AS (
  VALUES (1) AS t(id)
  UNION ALL
  SELECT id + 1 FROM y WHERE id < 10
)
SELECT * FROM y LEFT JOIN x ON x.id = y.id
-- !query schema
struct<id:int,id:int>
-- !query output
1	1
10	NULL
2	2
3	3
4	4
5	5
6	NULL
7	NULL
8	NULL
9	NULL


-- !query
WITH RECURSIVE x AS (
  VALUES (1) AS t(id)
  UNION ALL
  SELECT id + 1 FROM x WHERE id < 5
),
y AS (
  VALUES (1) AS t(id)
  UNION ALL
  SELECT id + 1 FROM x WHERE id < 10
)
SELECT * FROM y LEFT JOIN x ON x.id = y.id
-- !query schema
struct<id:int,id:int>
-- !query output
1	1
2	2
3	3
4	4
5	5
6	NULL


-- !query
WITH RECURSIVE x AS (
  SELECT 1 AS id
  UNION ALL
  SELECT id + 1 FROM x WHERE id < 3
),
y AS (
  SELECT * FROM x
  UNION ALL
  SELECT * FROM x
),
z AS (
  SELECT * FROM x
  UNION ALL
  SELECT id + 1 FROM z WHERE id < 10
)
SELECT * FROM z
-- !query schema
struct<id:int>
-- !query output
1
10
10
10
2
2
3
3
3
4
4
4
5
5
5
6
6
6
7
7
7
8
8
8
9
9
9


-- !query
WITH RECURSIVE x AS (
  SELECT 1 AS id
  UNION ALL
  SELECT id + 1 FROM x WHERE id < 3
),
y AS (
  SELECT * FROM x
  UNION ALL
  SELECT * FROM x
),
z AS (
  SELECT * FROM y
  UNION ALL
  SELECT id + 1 FROM z WHERE id < 10
)
SELECT * FROM z
-- !query schema
struct<id:int>
-- !query output
1
1
10
10
10
10
10
10
2
2
2
2
3
3
3
3
3
3
4
4
4
4
4
4
5
5
5
5
5
5
6
6
6
6
6
6
7
7
7
7
7
7
8
8
8
8
8
8
9
9
9
9
9
9


-- !query
WITH t AS (
  WITH RECURSIVE s AS (
    VALUES (1) AS t(i)
    UNION ALL
    SELECT i + 1 FROM s
  )
  SELECT i AS j FROM s LIMIT 10
)
SELECT * FROM t
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkException
Recursion level limit 100 reached but query has not exhausted, try increasing spark.sql.cte.recursion.level.limit


-- !query
WITH RECURSIVE outermost AS (
  SELECT 0 AS level
  UNION ALL
  (WITH innermost AS (
    SELECT * FROM outermost
  )
  SELECT level + 1 FROM innermost WHERE level < 5)
)
SELECT * FROM outermost
-- !query schema
struct<level:int>
-- !query output
0
1
2
3
4
5


-- !query
WITH RECURSIVE t AS (
  WITH RECURSIVE s AS (
    VALUES (1) AS t(i)
    UNION ALL
    SELECT i + 1 FROM s WHERE i < 10
  )
  SELECT i AS j FROM s
  UNION ALL
  SELECT j + 1 FROM t WHERE j < 10
)
SELECT * FROM t
-- !query schema
struct<j:int>
-- !query output
1
10
10
10
10
10
10
10
10
10
10
2
2
3
3
3
4
4
4
4
5
5
5
5
5
6
6
6
6
6
6
7
7
7
7
7
7
7
8
8
8
8
8
8
8
8
9
9
9
9
9
9
9
9
9


-- !query
WITH RECURSIVE t AS (
  WITH RECURSIVE s AS (
    SELECT j, 1 AS i FROM t
    UNION ALL
    SELECT j, i + 1 FROM s WHERE i < 3
  )
  VALUES (1) as t(j)
  UNION ALL
  SELECT j + 1 FROM s WHERE j < 3
)
SELECT * FROM t
-- !query schema
struct<j:int>
-- !query output
1
2
2
2
3
3
3
3
3
3
3
3
3


-- !query
WITH RECURSIVE r(level) AS (
  WITH RECURSIVE r(level) AS (
    VALUES (0)
    UNION ALL
    SELECT level + 1 FROM r WHERE level < 10
  )
  SELECT * FROM r
  UNION ALL
  SELECT level + 1 FROM r WHERE level < 10
)
SELECT * FROM r
-- !query schema
struct<level:int>
-- !query output
0
1
1
10
10
2
2
3
3
4
4
5
5
6
6
7
7
8
8
9
9


-- !query
WITH RECURSIVE r(level) AS (
  (WITH RECURSIVE r(level) AS (
    VALUES (0)
    UNION ALL
    SELECT level + 1 FROM r WHERE level < 10
  )
  SELECT * FROM r)
  UNION ALL
  SELECT level + 1 FROM r WHERE level < 10
)
SELECT * FROM r
-- !query schema
struct<level:int>
-- !query output
0
1
1
10
10
10
10
10
10
10
10
10
10
10
2
2
2
3
3
3
3
4
4
4
4
4
5
5
5
5
5
5
6
6
6
6
6
6
6
7
7
7
7
7
7
7
7
8
8
8
8
8
8
8
8
8
9
9
9
9
9
9
9
9
9
9


-- !query
WITH RECURSIVE r(level, id) AS (
  VALUES (0, 0)
  UNION ALL
  SELECT level + 1, t.id
  FROM r
  LEFT JOIN t ON t.id = r.level
  WHERE level < 10
)
SELECT *
FROM r AS r1
JOIN r AS r2 ON r1.id = r2.id + 1 AND r1.level = r2.level + 1
-- !query schema
struct<level:int,id:int,level:int,id:int>
-- !query output
2	1	1	0
3	2	2	1


-- !query
CREATE TEMPORARY VIEW routes(origin, destination) AS VALUES
  ('New York', 'Washington'),
  ('New York', 'Boston'),
  ('Boston', 'New York'),
  ('Washington', 'Boston'),
  ('Washington', 'Raleigh')
-- !query schema
struct<>
-- !query output



-- !query
WITH RECURSIVE destinations_from_new_york AS (
  SELECT 'New York' AS destination, ARRAY('New York') AS path, 0 AS length
  UNION ALL
  SELECT r.destination, CONCAT(d.path, ARRAY(r.destination)), d.length + 1
  FROM routes AS r
  JOIN destinations_from_new_york AS d ON d.destination = r.origin AND NOT ARRAY_CONTAINS(d.path, r.destination)
)
SELECT * FROM destinations_from_new_york
-- !query schema
struct<destination:string,path:array<string>,length:int>
-- !query output
Boston	["New York","Boston"]	1
Boston	["New York","Washington","Boston"]	2
New York	["New York"]	0
Raleigh	["New York","Washington","Raleigh"]	2
Washington	["New York","Washington"]	1


-- !query
DROP VIEW IF EXISTS routes
-- !query schema
struct<>
-- !query output



-- !query
WITH RECURSIVE fibonacci AS (
  VALUES (0, 1) AS t(a, b)
  UNION ALL
  SELECT b, a + b FROM fibonacci WHERE a < 10
)
SELECT a FROM fibonacci ORDER BY a
-- !query schema
struct<a:int>
-- !query output
0
1
1
2
3
5
8
13


-- !query
DROP VIEW IF EXISTS t
-- !query schema
struct<>
-- !query output

