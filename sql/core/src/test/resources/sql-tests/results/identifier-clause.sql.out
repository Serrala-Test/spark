-- Automatically generated by SQLQueryTestSuite
-- !query
SET hivevar:colname = 'c'
-- !query schema
struct<key:string,value:string>
-- !query output
hivevar:colname	'c'


-- !query
SELECT IDENTIFIER(${colname}'_1') FROM VALUES(1) AS T(c_1)
-- !query schema
struct<c_1:int>
-- !query output
1


-- !query
SELECT IDENTIFIER('c1') FROM VALUES(1) AS T(c1)
-- !query schema
struct<c1:int>
-- !query output
1


-- !query
SELECT IDENTIFIER('t.c1') FROM VALUES(1) AS T(c1)
-- !query schema
struct<c1:int>
-- !query output
1


-- !query
SELECT IDENTIFIER('`t`.c1') FROM VALUES(1) AS T(c1)
-- !query schema
struct<c1:int>
-- !query output
1


-- !query
SELECT IDENTIFIER('c 1') FROM VALUES(1) AS T(`c 1`)
-- !query schema
struct<c 1:int>
-- !query output
1


-- !query
SELECT IDENTIFIER('') FROM VALUES(1) AS T(``)
-- !query schema
struct<:int>
-- !query output
1


-- !query
SELECT IDENTIFIER('c' '1') FROM VALUES(1) AS T(c1)
-- !query schema
struct<c1:int>
-- !query output
1


-- !query
SELECT IDENTIFIER('t').c1 FROM VALUES(1) AS T(c1)
-- !query schema
struct<c1:int>
-- !query output
1


-- !query
SELECT T.IDENTIFIER('c1') FROM VALUES(1) AS T(c1)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "UNRESOLVED_ROUTINE",
  "sqlState" : "42883",
  "messageParameters" : {
    "routineName" : "`T`.`IDENTIFIER`",
    "searchPath" : "[`system`.`builtin`, `system`.`session`, `spark_catalog`.`default`]"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 25,
    "fragment" : "T.IDENTIFIER('c1')"
  } ]
}


-- !query
SELECT T1.c1 FROM VALUES(1) AS T1(c1) JOIN VALUES(1) AS T2(c1) USING (IDENTIFIER('c1'))
-- !query schema
struct<c1:int>
-- !query output
1


-- !query
SELECT map('a', 1).IDENTIFIER('a') FROM VALUES(1) AS T(c1)
-- !query schema
struct<map(a, 1)[a]:int>
-- !query output
1


-- !query
SELECT named_struct('a', 1).IDENTIFIER('a') FROM VALUES(1) AS T(c1)
-- !query schema
struct<named_struct(a, 1).a:int>
-- !query output
1


-- !query
CREATE SCHEMA IF NOT EXISTS s
-- !query schema
struct<>
-- !query output



-- !query
CREATE VIEW s.tab(c1) AS VALUES(1)
-- !query schema
struct<>
-- !query output



-- !query
USE SCHEMA s
-- !query schema
struct<>
-- !query output



-- !query
SELECT * FROM IDENTIFIER('tab')
-- !query schema
struct<c1:int>
-- !query output
1


-- !query
SELECT * FROM IDENTIFIER('s.tab')
-- !query schema
struct<c1:int>
-- !query output
1


-- !query
SELECT * FROM s.IDENTIFIER('tab')
-- !query schema
struct<c1:int>
-- !query output
1


-- !query
SELECT * FROM IDENTIFIER('`s`.`tab`')
-- !query schema
struct<c1:int>
-- !query output
1


-- !query
SELECT * FROM IDENTIFIER('s').IDENTIFIER('tab')
-- !query schema
struct<c1:int>
-- !query output
1


-- !query
SELECT * FROM IDENTIFIER('s').tab
-- !query schema
struct<c1:int>
-- !query output
1


-- !query
SELECT * FROM IDENTIFIER('t' 'a' 'b')
-- !query schema
struct<c1:int>
-- !query output
1


-- !query
SELECT IDENTIFIER('t').* FROM VALUES(1) AS T(c1)
-- !query schema
struct<c1:int>
-- !query output
1


-- !query
SELECT IDENTIFIER('COALESCE')(NULL, 1)
-- !query schema
struct<coalesce(NULL, 1):int>
-- !query output
1


-- !query
SELECT row_number() OVER IDENTIFIER('win') FROM VALUES(1) AS T(c1) WINDOW win AS (ORDER BY c1)
-- !query schema
struct<row_number() OVER (ORDER BY c1 ASC NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):int>
-- !query output
1


-- !query
SELECT row_number() OVER win FROM VALUES(1) AS T(c1) WINDOW IDENTIFIER('win') AS (ORDER BY c1)
-- !query schema
struct<row_number() OVER (ORDER BY c1 ASC NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):int>
-- !query output
1


-- !query
SELECT * FROM VALUES(1),(2),(3) AS T(c1) ORDER BY IDENTIFIER('c1')
-- !query schema
struct<c1:int>
-- !query output
1
2
3


-- !query
SELECT * FROM VALUES(1),(2),(3) AS T(c1) ORDER BY IDENTIFIER('c1') DESC
-- !query schema
struct<c1:int>
-- !query output
3
2
1


-- !query
with identifier('v')(identifier('c1')) AS (VALUES(1)) (SELECT c1 FROM v)
-- !query schema
struct<c1:int>
-- !query output
1


-- !query
USE SCHEMA default
-- !query schema
struct<>
-- !query output



-- !query
DROP VIEW s.tab
-- !query schema
struct<>
-- !query output



-- !query
DROP SCHEMA s
-- !query schema
struct<>
-- !query output



-- !query
SELECT IDENTIFIER('abs')(-1)
-- !query schema
struct<abs(-1):int>
-- !query output
1


-- !query
USE IDENTIFIER('default')
-- !query schema
struct<>
-- !query output



-- !query
CREATE TABLE IDENTIFIER('tab')(c1 INT) USING parquet
-- !query schema
struct<>
-- !query output



-- !query
DROP TABLE IF EXISTS IDENTIFIER('tab')
-- !query schema
struct<>
-- !query output



-- !query
CREATE TABLE tab(IDENTIFIER('c1') INT) USING parquet
-- !query schema
struct<>
-- !query output



-- !query
INSERT INTO tab VALUES (1)
-- !query schema
struct<>
-- !query output



-- !query
INSERT INTO IDENTIFIER('tab') VALUES(1)
-- !query schema
struct<>
-- !query output



-- !query
INSERT INTO tab(IDENTIFIER('c1')) VALUES(1)
-- !query schema
struct<>
-- !query output



-- !query
SELECT c1 FROM tab
-- !query schema
struct<c1:int>
-- !query output
1
1
1


-- !query
DESCRIBE IDENTIFIER('tab')
-- !query schema
struct<col_name:string,data_type:string,comment:string>
-- !query output
c1                  	int


-- !query
DROP TABLE IF EXISTS tab
-- !query schema
struct<>
-- !query output



-- !query
CREATE OR REPLACE VIEW IDENTIFIER('v')(c1) AS VALUES(1)
-- !query schema
struct<>
-- !query output



-- !query
SELECT * FROM v
-- !query schema
struct<c1:int>
-- !query output
1


-- !query
DROP VIEW IDENTIFIER('v')
-- !query schema
struct<>
-- !query output



-- !query
CREATE TEMPORARY VIEW IDENTIFIER('v')(c1) AS VALUES(1)
-- !query schema
struct<>
-- !query output



-- !query
SELECT * FROM v
-- !query schema
struct<c1:int>
-- !query output
1


-- !query
DROP VIEW IDENTIFIER('v')
-- !query schema
struct<>
-- !query output



-- !query
CREATE OR REPLACE VIEW v(IDENTIFIER('c1')) AS VALUES(1)
-- !query schema
struct<>
-- !query output



-- !query
SELECT c1 FROM v
-- !query schema
struct<c1:int>
-- !query output
1


-- !query
DROP VIEW v
-- !query schema
struct<>
-- !query output

