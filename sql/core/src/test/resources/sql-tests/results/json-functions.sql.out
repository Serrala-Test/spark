-- Automatically generated by SQLQueryTestSuite
-- Number of queries: 14


-- !query 0
describe function to_json
-- !query 0 schema
struct<function_desc:string>
-- !query 0 output
Class: org.apache.spark.sql.catalyst.expressions.StructToJson
Function: to_json
Usage: to_json(expr[, options]) - Returns a json string with a given struct value


-- !query 1
describe function extended to_json
-- !query 1 schema
struct<function_desc:string>
-- !query 1 output
Class: org.apache.spark.sql.catalyst.expressions.StructToJson
Extended Usage:
    Examples:
      > SELECT to_json(named_struct('a', 1, 'b', 2));
       {"a":1,"b":2}
      > SELECT to_json(named_struct('time', to_timestamp('2015-08-26', 'yyyy-MM-dd')), map('timestampFormat', 'dd/MM/yyyy'));
       {"time":"26/08/2015"}
  
Function: to_json
Usage: to_json(expr[, options]) - Returns a json string with a given struct value


-- !query 2
select to_json(named_struct('a', 1, 'b', 2))
-- !query 2 schema
struct<structtojson(named_struct(a, 1, b, 2)):string>
-- !query 2 output
{"a":1,"b":2}


-- !query 3
select to_json(named_struct('time', to_timestamp('2015-08-26', 'yyyy-MM-dd')), map('timestampFormat', 'dd/MM/yyyy'))
-- !query 3 schema
struct<structtojson(named_struct(time, to_timestamp('2015-08-26', 'yyyy-MM-dd'))):string>
-- !query 3 output
{"time":"26/08/2015"}


-- !query 4
select to_json(named_struct('a', 1, 'b', 2), named_struct('mode', 'PERMISSIVE'))
-- !query 4 schema
struct<>
-- !query 4 output
org.apache.spark.sql.AnalysisException
Must use a map() function for options;; line 1 pos 7


-- !query 5
select to_json()
-- !query 5 schema
struct<>
-- !query 5 output
org.apache.spark.sql.AnalysisException
Invalid number of arguments for function to_json; line 1 pos 7


-- !query 6
describe function from_json
-- !query 6 schema
struct<function_desc:string>
-- !query 6 output
Class: org.apache.spark.sql.catalyst.expressions.JsonToStruct
Function: from_json
Usage: from_json(jsonStr, schema[, options]) - Returns a struct value with the given `jsonStr` and `schema`.


-- !query 7
describe function extended from_json
-- !query 7 schema
struct<function_desc:string>
-- !query 7 output
Class: org.apache.spark.sql.catalyst.expressions.JsonToStruct
Extended Usage:
    Examples:
      > SELECT from_json('{"a":1}', '{"type":"struct", "fields":[{"name":"a", "type":"integer", "nullable":true}]}');
       {"a":1}
      > SELECT from_json('{"time":"26/08/2015"}', '{"type":"struct", "fields":[{"name":"time", "type":"timestamp", "nullable":true}]}', map('timestampFormat', 'dd/MM/yyyy'));
       {"time":"2015-08-26 00:00:00.0"}
  
Function: from_json
Usage: from_json(jsonStr, schema[, options]) - Returns a struct value with the given `jsonStr` and `schema`.


-- !query 8
select from_json('{"a":1}', '{"type":"struct", "fields":[{"name":"a", "type":"integer", "nullable":true}]}')
-- !query 8 schema
struct<jsontostruct({"a":1}):struct<a:int>>
-- !query 8 output
{"a":1}


-- !query 9
select from_json('{"time":"26/08/2015"}', '{"type":"struct", "fields":[{"name":"time", "type":"timestamp", "nullable":true}]}', map('timestampFormat', 'dd/MM/yyyy'))
-- !query 9 schema
struct<jsontostruct({"time":"26/08/2015"}):struct<time:timestamp>>
-- !query 9 output
{"time":2015-08-26 00:00:00.0}


-- !query 10
select from_json('{"a":1}', 1)
-- !query 10 schema
struct<>
-- !query 10 output
org.apache.spark.sql.AnalysisException
Must be a string literal, but: 1;; line 1 pos 7


-- !query 11
select from_json('{"a":1}', '{"a": 1}')
-- !query 11 schema
struct<>
-- !query 11 output
org.apache.spark.sql.AnalysisException
Illegal json string for representing a schema: {"a": 1}";; line 1 pos 7


-- !query 12
select from_json('{"a":1}', '{"type":"struct", "fields":[{"name":"a", "type":"integer", "nullable":true}]}', named_struct('mode', 'PERMISSIVE'))
-- !query 12 schema
struct<>
-- !query 12 output
org.apache.spark.sql.AnalysisException
Must use a map() function for options;; line 1 pos 7


-- !query 13
select from_json()
-- !query 13 schema
struct<>
-- !query 13 output
org.apache.spark.sql.AnalysisException
Invalid number of arguments for function from_json; line 1 pos 7
