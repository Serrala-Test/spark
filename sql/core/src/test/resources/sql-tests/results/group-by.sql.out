-- Automatically generated by SQLQueryTestSuite
-- Number of queries: 16


-- !query 0
create temporary view myview as values 128, 256 as v(int_col)
-- !query 0 schema
struct<>
-- !query 0 output



-- !query 1
select int_col, count(*) from myview group by int_col
-- !query 1 schema
struct<int_col:int,count(1):bigint>
-- !query 1 output
128	1
256	1


-- !query 2
select 'foo', count(*) from myview group by 1
-- !query 2 schema
struct<foo:string,count(1):bigint>
-- !query 2 output
foo	2


-- !query 3
select 'foo' from myview where int_col == 0 group by 1
-- !query 3 schema
struct<foo:string>
-- !query 3 output



-- !query 4
select 'foo', approx_count_distinct(int_col) from myview where int_col == 0 group by 1
-- !query 4 schema
struct<foo:string,approx_count_distinct(int_col):bigint>
-- !query 4 output



-- !query 5
select 'foo', max(struct(int_col)) from myview where int_col == 0 group by 1
-- !query 5 schema
struct<foo:string,max(struct(int_col)):struct<int_col:int>>
-- !query 5 output



-- !query 6
CREATE OR REPLACE TEMPORARY VIEW testData AS SELECT * FROM VALUES
(1, 1), (1, 2), (2, 1), (2, 2), (3, 1), (3, 2), (null, 1), (3, null), (null, null)
AS testData(a, b)
-- !query 6 schema
struct<>
-- !query 6 output



-- !query 7
SELECT a, COUNT(b) FROM testData
-- !query 7 schema
struct<>
-- !query 7 output
org.apache.spark.sql.AnalysisException
grouping expressions sequence is empty, and 'testdata.`a`' is not an aggregate function. Wrap '(count(testdata.`b`) AS `count(b)`)' in windowing function(s) or wrap 'testdata.`a`' in first() (or first_value) if you don't care which value you get.;


-- !query 8
SELECT COUNT(a), COUNT(b) FROM testData
-- !query 8 schema
struct<count(a):bigint,count(b):bigint>
-- !query 8 output
7	7


-- !query 9
SELECT a, COUNT(b) FROM testData GROUP BY a
-- !query 9 schema
struct<a:int,count(b):bigint>
-- !query 9 output
1	2
2	2
3	2
NULL	1


-- !query 10
SELECT a, COUNT(b) FROM testData GROUP BY b
-- !query 10 schema
struct<>
-- !query 10 output
org.apache.spark.sql.AnalysisException
expression 'testdata.`a`' is neither present in the group by, nor is it an aggregate function. Add to group by or wrap in first() (or first_value) if you don't care which value you get.;


-- !query 11
SELECT COUNT(a), COUNT(b) FROM testData GROUP BY a
-- !query 11 schema
struct<count(a):bigint,count(b):bigint>
-- !query 11 output
0	1
2	2
2	2
3	2


-- !query 12
SELECT a + b, COUNT(b) FROM testData GROUP BY a + b
-- !query 12 schema
struct<(a + b):int,count(b):bigint>
-- !query 12 output
2	1
3	2
4	2
5	1
NULL	1


-- !query 13
SELECT a + 2, COUNT(b) FROM testData GROUP BY a + 1
-- !query 13 schema
struct<>
-- !query 13 output
org.apache.spark.sql.AnalysisException
expression 'testdata.`a`' is neither present in the group by, nor is it an aggregate function. Add to group by or wrap in first() (or first_value) if you don't care which value you get.;


-- !query 14
SELECT a + 1 + 1, COUNT(b) FROM testData GROUP BY a + 1
-- !query 14 schema
struct<((a + 1) + 1):int,count(b):bigint>
-- !query 14 output
3	2
4	2
5	2
NULL	1


-- !query 15
SELECT SKEWNESS(a), KURTOSIS(a), MIN(a), MAX(a), AVG(a), VARIANCE(a), STDDEV(a), SUM(a), COUNT(a)
FROM testData
-- !query 15 schema
struct<skewness(CAST(a AS DOUBLE)):double,kurtosis(CAST(a AS DOUBLE)):double,min(a):int,max(a):int,avg(a):double,var_samp(CAST(a AS DOUBLE)):double,stddev_samp(CAST(a AS DOUBLE)):double,sum(a):bigint,count(a):bigint>
-- !query 15 output
-0.2723801058145729	-1.5069204152249134	1	3	2.142857142857143	0.8095238095238094	0.8997354108424372	15	7
