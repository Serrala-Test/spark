-- Automatically generated by SQLQueryTestSuite
-- Number of queries: 17


-- !query 0
select concat_ws()
-- !query 0 schema
struct<>
-- !query 0 output
org.apache.spark.sql.AnalysisException
requirement failed: concat_ws requires at least one argument.; line 1 pos 7


-- !query 1
select format_string()
-- !query 1 schema
struct<>
-- !query 1 output
org.apache.spark.sql.AnalysisException
requirement failed: format_string() should take at least 1 argument; line 1 pos 7


-- !query 2
select 'a' || 'b' || 'c'
-- !query 2 schema
struct<concat(concat(a, b), c):string>
-- !query 2 output
abc


-- !query 3
select split('aa1cc2ee', '[1-9]+', 2)
-- !query 3 schema
struct<split(aa1cc2ee, [1-9]+, 2):array<string>>
-- !query 3 output
["aa","cc2ee"]


-- !query 4
select split('aa1cc2ee', '[1-9]+')
-- !query 4 schema
struct<split(aa1cc2ee, [1-9]+, -1):array<string>>
-- !query 4 output
["aa","cc","ee"]


-- !query 5
EXPLAIN EXTENDED SELECT (col1 || col2 || col3 || col4) col
FROM (SELECT id col1, id col2, id col3, id col4 FROM range(10))
-- !query 5 schema
struct<plan:string>
-- !query 5 output
== Parsed Logical Plan ==
'Project [concat(concat(concat('col1, 'col2), 'col3), 'col4) AS col#x]
+- 'SubqueryAlias `__auto_generated_subquery_name`
   +- 'Project ['id AS col1#x, 'id AS col2#x, 'id AS col3#x, 'id AS col4#x]
      +- 'UnresolvedTableValuedFunction range, [10]

== Analyzed Logical Plan ==
col: string
Project [concat(concat(concat(cast(col1#xL as string), cast(col2#xL as string)), cast(col3#xL as string)), cast(col4#xL as string)) AS col#x]
+- SubqueryAlias `__auto_generated_subquery_name`
   +- Project [id#xL AS col1#xL, id#xL AS col2#xL, id#xL AS col3#xL, id#xL AS col4#xL]
      +- Range (0, 10, step=1, splits=None)

== Optimized Logical Plan ==
Project [concat(cast(id#xL as string), cast(id#xL as string), cast(id#xL as string), cast(id#xL as string)) AS col#x]
+- Range (0, 10, step=1, splits=None)

== Physical Plan ==
*Project [concat(cast(id#xL as string), cast(id#xL as string), cast(id#xL as string), cast(id#xL as string)) AS col#x]
+- *Range (0, 10, step=1, splits=2)


-- !query 6
select replace('abc', 'b', '123')
-- !query 6 schema
struct<replace(abc, b, 123):string>
-- !query 6 output
a123c


-- !query 7
select replace('abc', 'b')
-- !query 7 schema
struct<replace(abc, b, ):string>
-- !query 7 output
ac


-- !query 8
select length(uuid()), (uuid() <> uuid())
-- !query 8 schema
struct<length(uuid()):int,(NOT (uuid() = uuid())):boolean>
-- !query 8 output
36	true


-- !query 9
select position('bar' in 'foobarbar'), position(null, 'foobarbar'), position('aaads', null)
-- !query 9 schema
struct<locate(bar, foobarbar, 1):int,locate(CAST(NULL AS STRING), foobarbar, 1):int,locate(aaads, CAST(NULL AS STRING), 1):int>
-- !query 9 output
4	NULL	NULL


-- !query 10
select left("abcd", 2), left("abcd", 5), left("abcd", '2'), left("abcd", null)
-- !query 10 schema
struct<left('abcd', 2):string,left('abcd', 5):string,left('abcd', '2'):string,left('abcd', NULL):string>
-- !query 10 output
ab	abcd	ab	NULL


-- !query 11
select left(null, -2), left("abcd", -2), left("abcd", 0), left("abcd", 'a')
-- !query 11 schema
struct<left(NULL, -2):string,left('abcd', -2):string,left('abcd', 0):string,left('abcd', 'a'):string>
-- !query 11 output
NULL			NULL


-- !query 12
select right("abcd", 2), right("abcd", 5), right("abcd", '2'), right("abcd", null)
-- !query 12 schema
struct<right('abcd', 2):string,right('abcd', 5):string,right('abcd', '2'):string,right('abcd', NULL):string>
-- !query 12 output
cd	abcd	cd	NULL


-- !query 13
select right(null, -2), right("abcd", -2), right("abcd", 0), right("abcd", 'a')
-- !query 13 schema
struct<right(NULL, -2):string,right('abcd', -2):string,right('abcd', 0):string,right('abcd', 'a'):string>
-- !query 13 output
NULL			NULL


-- !query 14
set spark.sql.function.concatBinaryAsString=false
-- !query 14 schema
struct<key:string,value:string>
-- !query 14 output
spark.sql.function.concatBinaryAsString	false


-- !query 15
EXPLAIN SELECT ((col1 || col2) || (col3 || col4)) col
FROM (
  SELECT
    string(id) col1,
    string(id + 1) col2,
    encode(string(id + 2), 'utf-8') col3,
    encode(string(id + 3), 'utf-8') col4
  FROM range(10)
)
-- !query 15 schema
struct<plan:string>
-- !query 15 output
== Physical Plan ==
*Project [concat(cast(id#xL as string), cast((id#xL + 1) as string), cast(encode(cast((id#xL + 2) as string), utf-8) as string), cast(encode(cast((id#xL + 3) as string), utf-8) as string)) AS col#x]
+- *Range (0, 10, step=1, splits=2)


-- !query 16
EXPLAIN SELECT (col1 || (col3 || col4)) col
FROM (
  SELECT
    string(id) col1,
    encode(string(id + 2), 'utf-8') col3,
    encode(string(id + 3), 'utf-8') col4
  FROM range(10)
)
-- !query 16 schema
struct<plan:string>
-- !query 16 output
== Physical Plan ==
*Project [concat(cast(id#xL as string), cast(encode(cast((id#xL + 2) as string), utf-8) as string), cast(encode(cast((id#xL + 3) as string), utf-8) as string)) AS col#x]
+- *Range (0, 10, step=1, splits=2)
