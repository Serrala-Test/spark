-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE TEMPORARY VIEW EMP AS SELECT * FROM VALUES
  (100, "emp 1", date "2005-01-01", 100.00D, 10),
  (100, "emp 1", date "2005-01-01", 100.00D, 10),
  (200, "emp 2", date "2003-01-01", 200.00D, 10),
  (300, "emp 3", date "2002-01-01", 300.00D, 20),
  (400, "emp 4", date "2005-01-01", 400.00D, 30),
  (500, "emp 5", date "2001-01-01", 400.00D, NULL),
  (600, "emp 6 - no dept", date "2001-01-01", 400.00D, 100),
  (700, "emp 7", date "2010-01-01", 400.00D, 100),
  (800, "emp 8", date "2016-01-01", 150.00D, 70)
AS EMP(id, emp_name, hiredate, salary, dept_id)
-- !query schema
struct<>
-- !query output



-- !query
CREATE TEMPORARY VIEW DEPT AS SELECT * FROM VALUES
  (10, "dept 1", "CA"),
  (20, "dept 2", "NY"),
  (30, "dept 3", "TX"),
  (40, "dept 4 - unassigned", "OR"),
  (50, "dept 5 - unassigned", "NJ"),
  (70, "dept 7", "FL")
AS DEPT(dept_id, dept_name, state)
-- !query schema
struct<>
-- !query output



-- !query
CREATE TEMPORARY VIEW BONUS AS SELECT * FROM VALUES
  ("emp 1", 10.00D),
  ("emp 1", 20.00D),
  ("emp 2", 300.00D),
  ("emp 2", 100.00D),
  ("emp 3", 300.00D),
  ("emp 4", 100.00D),
  ("emp 5", 1000.00D),
  ("emp 6 - no dept", 500.00D)
AS BONUS(emp_name, bonus_amt)
-- !query schema
struct<>
-- !query output



-- !query
SELECT emp.dept_id, 
       avg(salary),
       sum(salary)
FROM   emp 
WHERE  EXISTS (SELECT state 
               FROM   dept 
               WHERE  dept.dept_id = emp.dept_id) 
GROUP  BY dept_id
-- !query schema
struct<dept_id:int,avg(salary):double,sum(salary):double>
-- !query output
10	133.33333333333334	400.0
20	300.0	300.0
30	400.0	400.0
70	150.0	150.0


-- !query
SELECT emp_name 
FROM   emp 
WHERE  EXISTS (SELECT max(dept.dept_id) a 
               FROM   dept 
               WHERE  dept.dept_id = emp.dept_id 
               GROUP  BY dept.dept_id)
-- !query schema
struct<emp_name:string>
-- !query output
emp 1
emp 1
emp 2
emp 3
emp 4
emp 8


-- !query
SELECT count(*) 
FROM   emp 
WHERE  EXISTS (SELECT max(dept.dept_id) a 
               FROM   dept 
               WHERE  dept.dept_id = emp.dept_id 
               GROUP  BY dept.dept_id)
-- !query schema
struct<count(1):bigint>
-- !query output
6


-- !query
SELECT * 
FROM   bonus 
WHERE  EXISTS (SELECT 1 
               FROM   emp 
               WHERE  emp.emp_name = bonus.emp_name 
                      AND EXISTS (SELECT max(dept.dept_id) 
                                  FROM   dept 
                                  WHERE  emp.dept_id = dept.dept_id 
                                  GROUP  BY dept.dept_id))
-- !query schema
struct<emp_name:string,bonus_amt:double>
-- !query output
emp 1	10.0
emp 1	20.0
emp 2	100.0
emp 2	300.0
emp 3	300.0
emp 4	100.0


-- !query
SELECT emp.dept_id, 
       Avg(salary), 
       Sum(salary) 
FROM   emp 
WHERE  NOT EXISTS (SELECT state 
                   FROM   dept 
                   WHERE  dept.dept_id = emp.dept_id) 
GROUP  BY dept_id
-- !query schema
struct<dept_id:int,avg(salary):double,sum(salary):double>
-- !query output
100	400.0	800.0
NULL	400.0	400.0


-- !query
SELECT emp_name 
FROM   emp 
WHERE  NOT EXISTS (SELECT max(dept.dept_id) a 
                   FROM   dept 
                   WHERE  dept.dept_id = emp.dept_id 
                   GROUP  BY dept.dept_id)
-- !query schema
struct<emp_name:string>
-- !query output
emp 5
emp 6 - no dept
emp 7


-- !query
SELECT count(*) 
FROM   emp 
WHERE  NOT EXISTS (SELECT max(dept.dept_id) a 
                   FROM   dept 
                   WHERE  dept.dept_id = emp.dept_id 
                   GROUP  BY dept.dept_id)
-- !query schema
struct<count(1):bigint>
-- !query output
3


-- !query
SELECT * 
FROM   bonus 
WHERE  NOT EXISTS (SELECT 1 
                   FROM   emp 
                   WHERE  emp.emp_name = bonus.emp_name 
                          AND EXISTS (SELECT Max(dept.dept_id) 
                                      FROM   dept 
                                      WHERE  emp.dept_id = dept.dept_id 
                                      GROUP  BY dept.dept_id))
-- !query schema
struct<emp_name:string,bonus_amt:double>
-- !query output
emp 5	1000.0
emp 6 - no dept	500.0


-- !query
SELECT *
FROM BONUS
WHERE EXISTS(SELECT RANK() OVER (PARTITION BY hiredate ORDER BY salary) AS s
                    FROM EMP, DEPT where EMP.dept_id = DEPT.dept_id
                        AND DEPT.dept_name < BONUS.emp_name)
-- !query schema
struct<emp_name:string,bonus_amt:double>
-- !query output
emp 1	10.0
emp 1	20.0
emp 2	100.0
emp 2	300.0
emp 3	300.0
emp 4	100.0
emp 5	1000.0
emp 6 - no dept	500.0


-- !query
SELECT tt1.emp_name
FROM EMP as tt1
WHERE EXISTS (
  select max(tt2.id)
  from EMP as tt2
  where tt1.emp_name is null
)
-- !query schema
struct<emp_name:string>
-- !query output
emp 1
emp 1
emp 2
emp 3
emp 4
emp 5
emp 6 - no dept
emp 7
emp 8


-- !query
SELECT
  emp.dept_id,
  EXISTS (SELECT dept.dept_id FROM dept)
FROM emp
GROUP BY emp.dept_id ORDER BY emp.dept_id
-- !query schema
struct<dept_id:int,exists():boolean>
-- !query output
NULL	true
10	true
20	true
30	true
70	true
100	true


-- !query
SELECT
  emp.dept_id,
  EXISTS (SELECT dept.dept_id FROM dept WHERE dept.dept_id = emp.dept_id)
FROM emp
GROUP BY emp.dept_id ORDER BY emp.dept_id
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkException
{
  "errorClass" : "PLAN_VALIDATION_FAILED_RULE_IN_BATCH",
  "sqlState" : "XXKD0",
  "messageParameters" : {
    "batch" : "Pullup Correlated Expressions",
    "reason" : "Aggregate: Aggregate [dept_id#x], [dept_id#x, exists#x [dept_id#x && (dept_id#x = dept_id#x)] AS exists(dept_id)#x]\n:  +- Project [dept_id#x]\n:     +- Project [cast(dept_id#x as int) AS dept_id#x, cast(dept_name#x as string) AS dept_name#x, cast(state#x as string) AS state#x]\n:        +- Project [dept_id#x, dept_name#x, state#x]\n:           +- LocalRelation [dept_id#x, dept_name#x, state#x]\n+- Project [cast(id#x as int) AS id#x, cast(emp_name#x as string) AS emp_name#x, cast(hiredate#x as date) AS hiredate#x, cast(salary#x as double) AS salary#x, cast(dept_id#x as int) AS dept_id#x]\n   +- LocalRelation [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]\n is not a valid aggregate expression: [MISSING_AGGREGATION] The non-aggregating expression \"dept_id\" is based on columns which are not participating in the GROUP BY clause.\nAdd the columns or the expression to the GROUP BY, aggregate the expression, or use \"any_value(dept_id)\" if you do not care which of the values within a group is returned. SQLSTATE: 42803\nPrevious schema:dept_id#x, exists(dept_id)#x\nPrevious plan: Sort [dept_id#x ASC NULLS FIRST], true\n+- Aggregate [dept_id#x], [dept_id#x, exists#x [dept_id#x] AS exists(dept_id)#x]\n   :  +- Project [dept_id#x]\n   :     +- Filter (dept_id#x = outer(dept_id#x))\n   :        +- Project [cast(dept_id#x as int) AS dept_id#x, cast(dept_name#x as string) AS dept_name#x, cast(state#x as string) AS state#x]\n   :           +- Project [dept_id#x, dept_name#x, state#x]\n   :              +- LocalRelation [dept_id#x, dept_name#x, state#x]\n   +- Project [cast(id#x as int) AS id#x, cast(emp_name#x as string) AS emp_name#x, cast(hiredate#x as date) AS hiredate#x, cast(salary#x as double) AS salary#x, cast(dept_id#x as int) AS dept_id#x]\n      +- LocalRelation [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]\n",
    "rule" : "org.apache.spark.sql.catalyst.optimizer.PullupCorrelatedPredicates"
  }
}


-- !query
SELECT
  emp.dept_id,
  NOT EXISTS (SELECT dept.dept_id FROM dept WHERE dept.dept_id = emp.dept_id)
FROM emp
GROUP BY emp.dept_id ORDER BY emp.dept_id
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkException
{
  "errorClass" : "PLAN_VALIDATION_FAILED_RULE_IN_BATCH",
  "sqlState" : "XXKD0",
  "messageParameters" : {
    "batch" : "Pullup Correlated Expressions",
    "reason" : "Aggregate: Aggregate [dept_id#x], [dept_id#x, NOT exists#x [dept_id#x && (dept_id#x = dept_id#x)] AS (NOT exists(dept_id))#x]\n:  +- Project [dept_id#x]\n:     +- Project [cast(dept_id#x as int) AS dept_id#x, cast(dept_name#x as string) AS dept_name#x, cast(state#x as string) AS state#x]\n:        +- Project [dept_id#x, dept_name#x, state#x]\n:           +- LocalRelation [dept_id#x, dept_name#x, state#x]\n+- Project [cast(id#x as int) AS id#x, cast(emp_name#x as string) AS emp_name#x, cast(hiredate#x as date) AS hiredate#x, cast(salary#x as double) AS salary#x, cast(dept_id#x as int) AS dept_id#x]\n   +- LocalRelation [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]\n is not a valid aggregate expression: [MISSING_AGGREGATION] The non-aggregating expression \"dept_id\" is based on columns which are not participating in the GROUP BY clause.\nAdd the columns or the expression to the GROUP BY, aggregate the expression, or use \"any_value(dept_id)\" if you do not care which of the values within a group is returned. SQLSTATE: 42803\nPrevious schema:dept_id#x, (NOT exists(dept_id))#x\nPrevious plan: Sort [dept_id#x ASC NULLS FIRST], true\n+- Aggregate [dept_id#x], [dept_id#x, NOT exists#x [dept_id#x] AS (NOT exists(dept_id))#x]\n   :  +- Project [dept_id#x]\n   :     +- Filter (dept_id#x = outer(dept_id#x))\n   :        +- Project [cast(dept_id#x as int) AS dept_id#x, cast(dept_name#x as string) AS dept_name#x, cast(state#x as string) AS state#x]\n   :           +- Project [dept_id#x, dept_name#x, state#x]\n   :              +- LocalRelation [dept_id#x, dept_name#x, state#x]\n   +- Project [cast(id#x as int) AS id#x, cast(emp_name#x as string) AS emp_name#x, cast(hiredate#x as date) AS hiredate#x, cast(salary#x as double) AS salary#x, cast(dept_id#x as int) AS dept_id#x]\n      +- LocalRelation [id#x, emp_name#x, hiredate#x, salary#x, dept_id#x]\n",
    "rule" : "org.apache.spark.sql.catalyst.optimizer.PullupCorrelatedPredicates"
  }
}


-- !query
SELECT
  emp.dept_id,
  SUM(
    CASE WHEN EXISTS (SELECT dept.dept_id FROM dept WHERE dept.dept_id = emp.dept_id) THEN 1
    ELSE 0 END)
FROM emp
GROUP BY emp.dept_id ORDER BY emp.dept_id
-- !query schema
struct<dept_id:int,sum(CASE WHEN exists(dept_id) THEN 1 ELSE 0 END):bigint>
-- !query output
NULL	0
10	3
20	1
30	1
70	1
100	0
