-- Automatically generated by SQLQueryTestSuite
-- Number of queries: 125


-- !query 0
SELECT U&'d\0061t\+000061' AS U&"d\0061t\+000061"
-- !query 0 schema
struct<>
-- !query 0 output
org.apache.spark.sql.catalyst.parser.ParseException

mismatched input '&' expecting {<EOF>, ',', 'CLUSTER', 'DISTRIBUTE', 'EXCEPT', 'FROM', 'GROUP', 'HAVING', 'INTERSECT', 'LATERAL', 'LIMIT', 'ORDER', 'MINUS', 'SORT', 'UNION', 'WHERE', 'WINDOW', '-'}(line 1, pos 31)

== SQL ==
SELECT U&'d\0061t\+000061' AS U&"d\0061t\+000061"
-------------------------------^^^


-- !query 1
SELECT U&'d!0061t\+000061' UESCAPE '!' AS U&"d*0061t\+000061" UESCAPE '*'
-- !query 1 schema
struct<>
-- !query 1 output
org.apache.spark.sql.catalyst.parser.ParseException

mismatched input ''!'' expecting {<EOF>, ',', 'CLUSTER', 'DISTRIBUTE', 'EXCEPT', 'FROM', 'GROUP', 'HAVING', 'INTERSECT', 'LATERAL', 'LIMIT', 'ORDER', 'MINUS', 'SORT', 'UNION', 'WHERE', 'WINDOW', '-'}(line 1, pos 35)

== SQL ==
SELECT U&'d!0061t\+000061' UESCAPE '!' AS U&"d*0061t\+000061" UESCAPE '*'
-----------------------------------^^^


-- !query 2
SELECT U&' \' UESCAPE '!' AS "tricky"
-- !query 2 schema
struct<>
-- !query 2 output
org.apache.spark.sql.catalyst.parser.ParseException

mismatched input ''' expecting {<EOF>, ',', 'CLUSTER', 'DISTRIBUTE', 'EXCEPT', 'FROM', 'GROUP', 'HAVING', 'INTERSECT', 'LATERAL', 'LIMIT', 'ORDER', 'MINUS', 'SORT', 'UNION', 'WHERE', 'WINDOW', '-'}(line 1, pos 24)

== SQL ==
SELECT U&' \' UESCAPE '!' AS "tricky"
------------------------^^^


-- !query 3
SELECT 'tricky' AS U&"\" UESCAPE '!'
-- !query 3 schema
struct<>
-- !query 3 output
org.apache.spark.sql.catalyst.parser.ParseException

mismatched input '&' expecting {<EOF>, ',', 'CLUSTER', 'DISTRIBUTE', 'EXCEPT', 'FROM', 'GROUP', 'HAVING', 'INTERSECT', 'LATERAL', 'LIMIT', 'ORDER', 'MINUS', 'SORT', 'UNION', 'WHERE', 'WINDOW', '-'}(line 1, pos 20)

== SQL ==
SELECT 'tricky' AS U&"\" UESCAPE '!'
--------------------^^^


-- !query 4
SELECT U&'wrong: \061'
-- !query 4 schema
struct<>
-- !query 4 output
org.apache.spark.sql.AnalysisException
cannot resolve '`U`' given input columns: []; line 1 pos 7


-- !query 5
SELECT U&'wrong: \+0061'
-- !query 5 schema
struct<>
-- !query 5 output
org.apache.spark.sql.AnalysisException
cannot resolve '`U`' given input columns: []; line 1 pos 7


-- !query 6
SELECT U&'wrong: +0061' UESCAPE '+'
-- !query 6 schema
struct<>
-- !query 6 output
org.apache.spark.sql.catalyst.parser.ParseException

extraneous input ''+'' expecting <EOF>(line 1, pos 32)

== SQL ==
SELECT U&'wrong: +0061' UESCAPE '+'
--------------------------------^^^


-- !query 7
SELECT U&'d\0061t\+000061' AS U&"d\0061t\+000061"
-- !query 7 schema
struct<>
-- !query 7 output
org.apache.spark.sql.catalyst.parser.ParseException

mismatched input '&' expecting {<EOF>, ',', 'CLUSTER', 'DISTRIBUTE', 'EXCEPT', 'FROM', 'GROUP', 'HAVING', 'INTERSECT', 'LATERAL', 'LIMIT', 'ORDER', 'MINUS', 'SORT', 'UNION', 'WHERE', 'WINDOW', '-'}(line 1, pos 31)

== SQL ==
SELECT U&'d\0061t\+000061' AS U&"d\0061t\+000061"
-------------------------------^^^


-- !query 8
SELECT U&'d!0061t\+000061' UESCAPE '!' AS U&"d*0061t\+000061" UESCAPE '*'
-- !query 8 schema
struct<>
-- !query 8 output
org.apache.spark.sql.catalyst.parser.ParseException

mismatched input ''!'' expecting {<EOF>, ',', 'CLUSTER', 'DISTRIBUTE', 'EXCEPT', 'FROM', 'GROUP', 'HAVING', 'INTERSECT', 'LATERAL', 'LIMIT', 'ORDER', 'MINUS', 'SORT', 'UNION', 'WHERE', 'WINDOW', '-'}(line 1, pos 35)

== SQL ==
SELECT U&'d!0061t\+000061' UESCAPE '!' AS U&"d*0061t\+000061" UESCAPE '*'
-----------------------------------^^^


-- !query 9
SELECT U&' \' UESCAPE '!' AS "tricky"
-- !query 9 schema
struct<>
-- !query 9 output
org.apache.spark.sql.catalyst.parser.ParseException

mismatched input ''' expecting {<EOF>, ',', 'CLUSTER', 'DISTRIBUTE', 'EXCEPT', 'FROM', 'GROUP', 'HAVING', 'INTERSECT', 'LATERAL', 'LIMIT', 'ORDER', 'MINUS', 'SORT', 'UNION', 'WHERE', 'WINDOW', '-'}(line 1, pos 24)

== SQL ==
SELECT U&' \' UESCAPE '!' AS "tricky"
------------------------^^^


-- !query 10
SELECT 'tricky' AS U&"\" UESCAPE '!'
-- !query 10 schema
struct<>
-- !query 10 output
org.apache.spark.sql.catalyst.parser.ParseException

mismatched input '&' expecting {<EOF>, ',', 'CLUSTER', 'DISTRIBUTE', 'EXCEPT', 'FROM', 'GROUP', 'HAVING', 'INTERSECT', 'LATERAL', 'LIMIT', 'ORDER', 'MINUS', 'SORT', 'UNION', 'WHERE', 'WINDOW', '-'}(line 1, pos 20)

== SQL ==
SELECT 'tricky' AS U&"\" UESCAPE '!'
--------------------^^^


-- !query 11
SELECT U&'wrong: \061'
-- !query 11 schema
struct<>
-- !query 11 output
org.apache.spark.sql.AnalysisException
cannot resolve '`U`' given input columns: []; line 1 pos 7


-- !query 12
SELECT U&'wrong: \+0061'
-- !query 12 schema
struct<>
-- !query 12 output
org.apache.spark.sql.AnalysisException
cannot resolve '`U`' given input columns: []; line 1 pos 7


-- !query 13
SELECT U&'wrong: +0061' UESCAPE '+'
-- !query 13 schema
struct<>
-- !query 13 output
org.apache.spark.sql.catalyst.parser.ParseException

extraneous input ''+'' expecting <EOF>(line 1, pos 32)

== SQL ==
SELECT U&'wrong: +0061' UESCAPE '+'
--------------------------------^^^


-- !query 14
SELECT binary('\\xDeAdBeEf')
-- !query 14 schema
struct<CAST(\xDeAdBeEf AS BINARY):binary>
-- !query 14 output
\xDeAdBeEf


-- !query 15
SELECT binary('\\x De Ad Be Ef ')
-- !query 15 schema
struct<CAST(\x De Ad Be Ef  AS BINARY):binary>
-- !query 15 output
\x De Ad Be Ef


-- !query 16
SELECT binary('\\xDe00BeEf')
-- !query 16 schema
struct<CAST(\xDe00BeEf AS BINARY):binary>
-- !query 16 output
\xDe00BeEf


-- !query 17
SELECT binary('DeAdBeEf')
-- !query 17 schema
struct<CAST(DeAdBeEf AS BINARY):binary>
-- !query 17 output
DeAdBeEf


-- !query 18
SELECT binary('De\\000dBeEf')
-- !query 18 schema
struct<CAST(De\000dBeEf AS BINARY):binary>
-- !query 18 output
De\000dBeEf


-- !query 19
SELECT binary('De\\123dBeEf')
-- !query 19 schema
struct<CAST(De\123dBeEf AS BINARY):binary>
-- !query 19 output
De\123dBeEf


-- !query 20
SELECT TRIM(BOTH FROM '  bunch o blanks  ') = 'bunch o blanks' AS `bunch o blanks`
-- !query 20 schema
struct<bunch o blanks:boolean>
-- !query 20 output
true


-- !query 21
SELECT TRIM(LEADING FROM '  bunch o blanks  ') = 'bunch o blanks  ' AS `bunch o blanks  `
-- !query 21 schema
struct<bunch o blanks  :boolean>
-- !query 21 output
true


-- !query 22
SELECT TRIM(TRAILING FROM '  bunch o blanks  ') = '  bunch o blanks' AS `  bunch o blanks`
-- !query 22 schema
struct<  bunch o blanks:boolean>
-- !query 22 output
true


-- !query 23
SELECT TRIM(BOTH 'x' FROM 'xxxxxsome Xsxxxxx') = 'some Xs' AS `some Xs`
-- !query 23 schema
struct<some Xs:boolean>
-- !query 23 output
true


-- !query 24
SELECT SUBSTRING('1234567890' FROM 3) = '34567890' AS `34567890`
-- !query 24 schema
struct<34567890:boolean>
-- !query 24 output
true


-- !query 25
SELECT SUBSTRING('1234567890' FROM 4 FOR 3) = '456' AS `456`
-- !query 25 schema
struct<456:boolean>
-- !query 25 output
true


-- !query 26
SELECT POSITION('4' IN '1234567890') = '4' AS `4`
-- !query 26 schema
struct<4:boolean>
-- !query 26 output
true


-- !query 27
SELECT POSITION('5' IN '1234567890') = '5' AS `5`
-- !query 27 schema
struct<5:boolean>
-- !query 27 output
true


-- !query 28
SELECT 'hawkeye' LIKE 'h%' AS `true`
-- !query 28 schema
struct<true:boolean>
-- !query 28 output
true


-- !query 29
SELECT 'hawkeye' NOT LIKE 'h%' AS `false`
-- !query 29 schema
struct<false:boolean>
-- !query 29 output
false


-- !query 30
SELECT 'hawkeye' LIKE 'H%' AS `false`
-- !query 30 schema
struct<false:boolean>
-- !query 30 output
false


-- !query 31
SELECT 'hawkeye' NOT LIKE 'H%' AS `true`
-- !query 31 schema
struct<true:boolean>
-- !query 31 output
true


-- !query 32
SELECT 'hawkeye' LIKE 'indio%' AS `false`
-- !query 32 schema
struct<false:boolean>
-- !query 32 output
false


-- !query 33
SELECT 'hawkeye' NOT LIKE 'indio%' AS `true`
-- !query 33 schema
struct<true:boolean>
-- !query 33 output
true


-- !query 34
SELECT 'hawkeye' LIKE 'h%eye' AS `true`
-- !query 34 schema
struct<true:boolean>
-- !query 34 output
true


-- !query 35
SELECT 'hawkeye' NOT LIKE 'h%eye' AS `false`
-- !query 35 schema
struct<false:boolean>
-- !query 35 output
false


-- !query 36
SELECT 'indio' LIKE '_ndio' AS `true`
-- !query 36 schema
struct<true:boolean>
-- !query 36 output
true


-- !query 37
SELECT 'indio' NOT LIKE '_ndio' AS `false`
-- !query 37 schema
struct<false:boolean>
-- !query 37 output
false


-- !query 38
SELECT 'indio' LIKE 'in__o' AS `true`
-- !query 38 schema
struct<true:boolean>
-- !query 38 output
true


-- !query 39
SELECT 'indio' NOT LIKE 'in__o' AS `false`
-- !query 39 schema
struct<false:boolean>
-- !query 39 output
false


-- !query 40
SELECT 'indio' LIKE 'in_o' AS `false`
-- !query 40 schema
struct<false:boolean>
-- !query 40 output
false


-- !query 41
SELECT 'indio' NOT LIKE 'in_o' AS `true`
-- !query 41 schema
struct<true:boolean>
-- !query 41 output
true


-- !query 42
SELECT 'hawkeye' ILIKE 'h%' AS "true"
-- !query 42 schema
struct<>
-- !query 42 output
org.apache.spark.sql.catalyst.parser.ParseException

mismatched input ''h%'' expecting {<EOF>, ',', 'CLUSTER', 'DISTRIBUTE', 'EXCEPT', 'FROM', 'GROUP', 'HAVING', 'INTERSECT', 'LATERAL', 'LIMIT', 'ORDER', 'MINUS', 'SORT', 'UNION', 'WHERE', 'WINDOW', '-'}(line 1, pos 23)

== SQL ==
SELECT 'hawkeye' ILIKE 'h%' AS "true"
-----------------------^^^


-- !query 43
SELECT 'hawkeye' NOT ILIKE 'h%' AS "false"
-- !query 43 schema
struct<>
-- !query 43 output
org.apache.spark.sql.catalyst.parser.ParseException

mismatched input 'ILIKE' expecting {<EOF>, ',', 'CLUSTER', 'DISTRIBUTE', 'EXCEPT', 'FROM', 'GROUP', 'HAVING', 'INTERSECT', 'LATERAL', 'LIMIT', 'ORDER', 'MINUS', 'SORT', 'UNION', 'WHERE', 'WINDOW', '-'}(line 1, pos 21)

== SQL ==
SELECT 'hawkeye' NOT ILIKE 'h%' AS "false"
---------------------^^^


-- !query 44
SELECT 'hawkeye' ILIKE 'H%' AS "true"
-- !query 44 schema
struct<>
-- !query 44 output
org.apache.spark.sql.catalyst.parser.ParseException

mismatched input ''H%'' expecting {<EOF>, ',', 'CLUSTER', 'DISTRIBUTE', 'EXCEPT', 'FROM', 'GROUP', 'HAVING', 'INTERSECT', 'LATERAL', 'LIMIT', 'ORDER', 'MINUS', 'SORT', 'UNION', 'WHERE', 'WINDOW', '-'}(line 1, pos 23)

== SQL ==
SELECT 'hawkeye' ILIKE 'H%' AS "true"
-----------------------^^^


-- !query 45
SELECT 'hawkeye' NOT ILIKE 'H%' AS "false"
-- !query 45 schema
struct<>
-- !query 45 output
org.apache.spark.sql.catalyst.parser.ParseException

mismatched input 'ILIKE' expecting {<EOF>, ',', 'CLUSTER', 'DISTRIBUTE', 'EXCEPT', 'FROM', 'GROUP', 'HAVING', 'INTERSECT', 'LATERAL', 'LIMIT', 'ORDER', 'MINUS', 'SORT', 'UNION', 'WHERE', 'WINDOW', '-'}(line 1, pos 21)

== SQL ==
SELECT 'hawkeye' NOT ILIKE 'H%' AS "false"
---------------------^^^


-- !query 46
SELECT 'hawkeye' ILIKE 'H%Eye' AS "true"
-- !query 46 schema
struct<>
-- !query 46 output
org.apache.spark.sql.catalyst.parser.ParseException

mismatched input ''H%Eye'' expecting {<EOF>, ',', 'CLUSTER', 'DISTRIBUTE', 'EXCEPT', 'FROM', 'GROUP', 'HAVING', 'INTERSECT', 'LATERAL', 'LIMIT', 'ORDER', 'MINUS', 'SORT', 'UNION', 'WHERE', 'WINDOW', '-'}(line 1, pos 23)

== SQL ==
SELECT 'hawkeye' ILIKE 'H%Eye' AS "true"
-----------------------^^^


-- !query 47
SELECT 'hawkeye' NOT ILIKE 'H%Eye' AS "false"
-- !query 47 schema
struct<>
-- !query 47 output
org.apache.spark.sql.catalyst.parser.ParseException

mismatched input 'ILIKE' expecting {<EOF>, ',', 'CLUSTER', 'DISTRIBUTE', 'EXCEPT', 'FROM', 'GROUP', 'HAVING', 'INTERSECT', 'LATERAL', 'LIMIT', 'ORDER', 'MINUS', 'SORT', 'UNION', 'WHERE', 'WINDOW', '-'}(line 1, pos 21)

== SQL ==
SELECT 'hawkeye' NOT ILIKE 'H%Eye' AS "false"
---------------------^^^


-- !query 48
SELECT 'Hawkeye' ILIKE 'h%' AS "true"
-- !query 48 schema
struct<>
-- !query 48 output
org.apache.spark.sql.catalyst.parser.ParseException

mismatched input ''h%'' expecting {<EOF>, ',', 'CLUSTER', 'DISTRIBUTE', 'EXCEPT', 'FROM', 'GROUP', 'HAVING', 'INTERSECT', 'LATERAL', 'LIMIT', 'ORDER', 'MINUS', 'SORT', 'UNION', 'WHERE', 'WINDOW', '-'}(line 1, pos 23)

== SQL ==
SELECT 'Hawkeye' ILIKE 'h%' AS "true"
-----------------------^^^


-- !query 49
SELECT 'Hawkeye' NOT ILIKE 'h%' AS "false"
-- !query 49 schema
struct<>
-- !query 49 output
org.apache.spark.sql.catalyst.parser.ParseException

mismatched input 'ILIKE' expecting {<EOF>, ',', 'CLUSTER', 'DISTRIBUTE', 'EXCEPT', 'FROM', 'GROUP', 'HAVING', 'INTERSECT', 'LATERAL', 'LIMIT', 'ORDER', 'MINUS', 'SORT', 'UNION', 'WHERE', 'WINDOW', '-'}(line 1, pos 21)

== SQL ==
SELECT 'Hawkeye' NOT ILIKE 'h%' AS "false"
---------------------^^^


-- !query 50
SELECT 'foo' LIKE '_%' as t, 'f' LIKE '_%' as t, '' LIKE '_%' as f
-- !query 50 schema
struct<t:boolean,t:boolean,f:boolean>
-- !query 50 output
true	true	false


-- !query 51
SELECT 'foo' LIKE '%_' as t, 'f' LIKE '%_' as t, '' LIKE '%_' as f
-- !query 51 schema
struct<t:boolean,t:boolean,f:boolean>
-- !query 51 output
true	true	false


-- !query 52
SELECT 'foo' LIKE '__%' as t, 'foo' LIKE '___%' as t, 'foo' LIKE '____%' as f
-- !query 52 schema
struct<t:boolean,t:boolean,f:boolean>
-- !query 52 output
true	true	false


-- !query 53
SELECT 'foo' LIKE '%__' as t, 'foo' LIKE '%___' as t, 'foo' LIKE '%____' as f
-- !query 53 schema
struct<t:boolean,t:boolean,f:boolean>
-- !query 53 output
true	true	false


-- !query 54
SELECT 'jack' LIKE '%____%' AS t
-- !query 54 schema
struct<t:boolean>
-- !query 54 output
true


-- !query 55
SELECT 'unknown' || ' and unknown' AS `Concat unknown types`
-- !query 55 schema
struct<Concat unknown types:string>
-- !query 55 output
unknown and unknown


-- !query 56
SELECT string('text') || ' and unknown' AS `Concat text to unknown type`
-- !query 56 schema
struct<Concat text to unknown type:string>
-- !query 56 output
text and unknown


-- !query 57
CREATE TABLE toasttest(f1 string) USING parquet
-- !query 57 schema
struct<>
-- !query 57 output



-- !query 58
insert into toasttest values(repeat('1234567890',10000))
-- !query 58 schema
struct<>
-- !query 58 output



-- !query 59
insert into toasttest values(repeat('1234567890',10000))
-- !query 59 schema
struct<>
-- !query 59 output



-- !query 60
insert into toasttest values(repeat('1234567890',10000))
-- !query 60 schema
struct<>
-- !query 60 output



-- !query 61
insert into toasttest values(repeat('1234567890',10000))
-- !query 61 schema
struct<>
-- !query 61 output



-- !query 62
SELECT substr(f1, -1, 5) from toasttest
-- !query 62 schema
struct<substring(f1, -1, 5):string>
-- !query 62 output
0
0
0
0


-- !query 63
SELECT substr(f1, 5, -1) from toasttest
-- !query 63 schema
struct<substring(f1, 5, -1):string>
-- !query 63 output



-- !query 64
SELECT substr(f1, 99995) from toasttest
-- !query 64 schema
struct<substring(f1, 99995, 2147483647):string>
-- !query 64 output
567890
567890
567890
567890


-- !query 65
SELECT substr(f1, 99995, 10) from toasttest
-- !query 65 schema
struct<substring(f1, 99995, 10):string>
-- !query 65 output
567890
567890
567890
567890


-- !query 66
SELECT length('abcdef') AS `length_6`
-- !query 66 schema
struct<length_6:int>
-- !query 66 output
6


-- !query 67
SELECT position('abcdef', 'cd') AS `pos_3`
-- !query 67 schema
struct<pos_3:int>
-- !query 67 output
0


-- !query 68
SELECT position('abcdef', 'xy') AS `pos_0`
-- !query 68 schema
struct<pos_0:int>
-- !query 68 output
0


-- !query 69
SELECT replace('abcdef', 'de', '45') AS `abc45f`
-- !query 69 schema
struct<abc45f:string>
-- !query 69 output
abc45f


-- !query 70
SELECT replace('yabadabadoo', 'ba', '123') AS `ya123da123doo`
-- !query 70 schema
struct<ya123da123doo:string>
-- !query 70 output
ya123da123doo


-- !query 71
SELECT replace('yabadoo', 'bad', '') AS `yaoo`
-- !query 71 schema
struct<yaoo:string>
-- !query 71 output
yaoo


-- !query 72
select hex(256*256*256 - 1) AS `ffffff`
-- !query 72 schema
struct<ffffff:string>
-- !query 72 output
FFFFFF


-- !query 73
select hex(bigint(bigint(bigint(bigint(256)*256)*256)*256) - 1) AS `ffffffff`
-- !query 73 schema
struct<ffffffff:string>
-- !query 73 output
FFFFFFFF


-- !query 74
select md5('') = 'd41d8cd98f00b204e9800998ecf8427e' AS `TRUE`
-- !query 74 schema
struct<TRUE:boolean>
-- !query 74 output
true


-- !query 75
select md5('a') = '0cc175b9c0f1b6a831c399e269772661' AS `TRUE`
-- !query 75 schema
struct<TRUE:boolean>
-- !query 75 output
true


-- !query 76
select md5('abc') = '900150983cd24fb0d6963f7d28e17f72' AS `TRUE`
-- !query 76 schema
struct<TRUE:boolean>
-- !query 76 output
true


-- !query 77
select md5('message digest') = 'f96b697d7cb7938d525a2f31aaf161d0' AS `TRUE`
-- !query 77 schema
struct<TRUE:boolean>
-- !query 77 output
true


-- !query 78
select md5('abcdefghijklmnopqrstuvwxyz') = 'c3fcd3d76192e4007dfb496cca67e13b' AS `TRUE`
-- !query 78 schema
struct<TRUE:boolean>
-- !query 78 output
true


-- !query 79
select md5('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789') = 'd174ab98d277d9f5a5611c2c9f419d9f' AS `TRUE`
-- !query 79 schema
struct<TRUE:boolean>
-- !query 79 output
true


-- !query 80
select md5('12345678901234567890123456789012345678901234567890123456789012345678901234567890') = '57edf4a22be3c955ac49da2e2107b67a' AS `TRUE`
-- !query 80 schema
struct<TRUE:boolean>
-- !query 80 output
true


-- !query 81
select md5(binary('')) = 'd41d8cd98f00b204e9800998ecf8427e' AS `TRUE`
-- !query 81 schema
struct<TRUE:boolean>
-- !query 81 output
true


-- !query 82
select md5(binary('a')) = '0cc175b9c0f1b6a831c399e269772661' AS `TRUE`
-- !query 82 schema
struct<TRUE:boolean>
-- !query 82 output
true


-- !query 83
select md5(binary('abc')) = '900150983cd24fb0d6963f7d28e17f72' AS `TRUE`
-- !query 83 schema
struct<TRUE:boolean>
-- !query 83 output
true


-- !query 84
select md5(binary('message digest')) = 'f96b697d7cb7938d525a2f31aaf161d0' AS `TRUE`
-- !query 84 schema
struct<TRUE:boolean>
-- !query 84 output
true


-- !query 85
select md5(binary('abcdefghijklmnopqrstuvwxyz')) = 'c3fcd3d76192e4007dfb496cca67e13b' AS `TRUE`
-- !query 85 schema
struct<TRUE:boolean>
-- !query 85 output
true


-- !query 86
select md5(binary('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789')) = 'd174ab98d277d9f5a5611c2c9f419d9f' AS `TRUE`
-- !query 86 schema
struct<TRUE:boolean>
-- !query 86 output
true


-- !query 87
select md5(binary('12345678901234567890123456789012345678901234567890123456789012345678901234567890')) = '57edf4a22be3c955ac49da2e2107b67a' AS `TRUE`
-- !query 87 schema
struct<TRUE:boolean>
-- !query 87 output
true


-- !query 88
set escape_string_warning = off
-- !query 88 schema
struct<key:string,value:string>
-- !query 88 output
escape_string_warning	off


-- !query 89
set standard_conforming_strings = off
-- !query 89 schema
struct<key:string,value:string>
-- !query 89 output
standard_conforming_strings	off


-- !query 90
show escape_string_warning
-- !query 90 schema
struct<>
-- !query 90 output
org.apache.spark.sql.catalyst.parser.ParseException

missing 'FUNCTIONS' at '<EOF>'(line 1, pos 26)

== SQL ==
show escape_string_warning
--------------------------^^^


-- !query 91
show standard_conforming_strings
-- !query 91 schema
struct<>
-- !query 91 output
org.apache.spark.sql.catalyst.parser.ParseException

missing 'FUNCTIONS' at '<EOF>'(line 1, pos 32)

== SQL ==
show standard_conforming_strings
--------------------------------^^^


-- !query 92
set escape_string_warning = on
-- !query 92 schema
struct<key:string,value:string>
-- !query 92 output
escape_string_warning	on


-- !query 93
set standard_conforming_strings = on
-- !query 93 schema
struct<key:string,value:string>
-- !query 93 output
standard_conforming_strings	on


-- !query 94
show escape_string_warning
-- !query 94 schema
struct<>
-- !query 94 output
org.apache.spark.sql.catalyst.parser.ParseException

missing 'FUNCTIONS' at '<EOF>'(line 1, pos 26)

== SQL ==
show escape_string_warning
--------------------------^^^


-- !query 95
show standard_conforming_strings
-- !query 95 schema
struct<>
-- !query 95 output
org.apache.spark.sql.catalyst.parser.ParseException

missing 'FUNCTIONS' at '<EOF>'(line 1, pos 32)

== SQL ==
show standard_conforming_strings
--------------------------------^^^


-- !query 96
select 'a\bcd' as f1, 'a\b''cd' as f2, 'a\b''''cd' as f3, 'abcd\'   as f4, 'ab\''cd' as f5, '\\' as f6
-- !query 96 schema
struct<>
-- !query 96 output
org.apache.spark.sql.catalyst.parser.ParseException

mismatched input '\' expecting {<EOF>, ',', 'CLUSTER', 'DISTRIBUTE', 'EXCEPT', 'FROM', 'GROUP', 'HAVING', 'INTERSECT', 'LATERAL', 'LIMIT', 'ORDER', 'MINUS', 'SORT', 'UNION', 'WHERE', 'WINDOW', '-'}(line 1, pos 78)

== SQL ==
select 'a\bcd' as f1, 'a\b''cd' as f2, 'a\b''''cd' as f3, 'abcd\'   as f4, 'ab\''cd' as f5, '\\' as f6
------------------------------------------------------------------------------^^^


-- !query 97
set standard_conforming_strings = off
-- !query 97 schema
struct<key:string,value:string>
-- !query 97 output
standard_conforming_strings	off


-- !query 98
select 'a\\bcd' as f1, 'a\\b\'cd' as f2, 'a\\b\'''cd' as f3, 'abcd\\'   as f4, 'ab\\\'cd' as f5, '\\\\' as f6
-- !query 98 schema
struct<f1:string,f2:string,f3:string,f4:string,f5:string,f6:string>
-- !query 98 output
a\bcd	a\b'cd	a\b'cd	abcd\	ab\'cd	\\


-- !query 99
set escape_string_warning = off
-- !query 99 schema
struct<key:string,value:string>
-- !query 99 output
escape_string_warning	off


-- !query 100
set standard_conforming_strings = on
-- !query 100 schema
struct<key:string,value:string>
-- !query 100 output
standard_conforming_strings	on


-- !query 101
select 'a\bcd' as f1, 'a\b''cd' as f2, 'a\b''''cd' as f3, 'abcd\'   as f4, 'ab\''cd' as f5, '\\' as f6
-- !query 101 schema
struct<>
-- !query 101 output
org.apache.spark.sql.catalyst.parser.ParseException

mismatched input '\' expecting {<EOF>, ',', 'CLUSTER', 'DISTRIBUTE', 'EXCEPT', 'FROM', 'GROUP', 'HAVING', 'INTERSECT', 'LATERAL', 'LIMIT', 'ORDER', 'MINUS', 'SORT', 'UNION', 'WHERE', 'WINDOW', '-'}(line 1, pos 78)

== SQL ==
select 'a\bcd' as f1, 'a\b''cd' as f2, 'a\b''''cd' as f3, 'abcd\'   as f4, 'ab\''cd' as f5, '\\' as f6
------------------------------------------------------------------------------^^^


-- !query 102
set standard_conforming_strings = off
-- !query 102 schema
struct<key:string,value:string>
-- !query 102 output
standard_conforming_strings	off


-- !query 103
select 'a\\bcd' as f1, 'a\\b\'cd' as f2, 'a\\b\'''cd' as f3, 'abcd\\'   as f4, 'ab\\\'cd' as f5, '\\\\' as f6
-- !query 103 schema
struct<f1:string,f2:string,f3:string,f4:string,f5:string,f6:string>
-- !query 103 output
a\bcd	a\b'cd	a\b'cd	abcd\	ab\'cd	\\


-- !query 104
SELECT initcap('hi THOMAS')
-- !query 104 schema
struct<initcap(hi THOMAS):string>
-- !query 104 output
Hi Thomas


-- !query 105
SELECT lpad('hi', 5, 'xy')
-- !query 105 schema
struct<lpad(hi, 5, xy):string>
-- !query 105 output
xyxhi


-- !query 106
SELECT lpad('hi', 5)
-- !query 106 schema
struct<lpad(hi, 5,  ):string>
-- !query 106 output
hi


-- !query 107
SELECT lpad('hi', -5, 'xy')
-- !query 107 schema
struct<lpad(hi, -5, xy):string>
-- !query 107 output



-- !query 108
SELECT lpad('hello', 2)
-- !query 108 schema
struct<lpad(hello, 2,  ):string>
-- !query 108 output
he


-- !query 109
SELECT lpad('hi', 5, '')
-- !query 109 schema
struct<lpad(hi, 5, ):string>
-- !query 109 output
hi


-- !query 110
SELECT rpad('hi', 5, 'xy')
-- !query 110 schema
struct<rpad(hi, 5, xy):string>
-- !query 110 output
hixyx


-- !query 111
SELECT rpad('hi', 5)
-- !query 111 schema
struct<rpad(hi, 5,  ):string>
-- !query 111 output
hi


-- !query 112
SELECT rpad('hi', -5, 'xy')
-- !query 112 schema
struct<rpad(hi, -5, xy):string>
-- !query 112 output



-- !query 113
SELECT rpad('hello', 2)
-- !query 113 schema
struct<rpad(hello, 2,  ):string>
-- !query 113 output
he


-- !query 114
SELECT rpad('hi', 5, '')
-- !query 114 schema
struct<rpad(hi, 5, ):string>
-- !query 114 output
hi


-- !query 115
SELECT ltrim('zzzytrim', 'xyz')
-- !query 115 schema
struct<ltrim(zzzytrim, xyz):string>
-- !query 115 output
trim


-- !query 116
SELECT translate('', '14', 'ax')
-- !query 116 schema
struct<translate(, 14, ax):string>
-- !query 116 output



-- !query 117
SELECT translate('12345', '14', 'ax')
-- !query 117 schema
struct<translate(12345, 14, ax):string>
-- !query 117 output
a23x5


-- !query 118
SELECT ascii('x')
-- !query 118 schema
struct<ascii(x):int>
-- !query 118 output
120


-- !query 119
SELECT ascii('')
-- !query 119 schema
struct<ascii():int>
-- !query 119 output
0


-- !query 120
SELECT chr(65)
-- !query 120 schema
struct<chr(CAST(65 AS BIGINT)):string>
-- !query 120 output
A


-- !query 121
SELECT chr(0)
-- !query 121 schema
struct<chr(CAST(0 AS BIGINT)):string>
-- !query 121 output



-- !query 122
SELECT repeat('Pg', 4)
-- !query 122 schema
struct<repeat(Pg, 4):string>
-- !query 122 output
PgPgPgPg


-- !query 123
SELECT repeat('Pg', -4)
-- !query 123 schema
struct<repeat(Pg, -4):string>
-- !query 123 output



-- !query 124
DROP TABLE toasttest
-- !query 124 schema
struct<>
-- !query 124 output

