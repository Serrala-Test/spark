-- Automatically generated by SQLQueryTestSuite
-- Number of queries: 48


-- !query 0
create temporary view varchar_tbl as select * from values
  ('a'),
  ('A'),
  ('1'),
  ('2'),
  ('3'),
  (''),
  -- ('cd'),
  ('c')
  as varchar_tbl(f1)
-- !query 0 schema
struct<>
-- !query 0 output



-- !query 1
select aggfstr(a,b,c)
  from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c)
-- !query 1 schema
struct<>
-- !query 1 output
org.apache.spark.sql.AnalysisException
Undefined function: 'aggfstr'. This function is neither a registered temporary function nor a permanent function registered in the database 'default'.; line 1 pos 7


-- !query 2
select aggfns(a,b,c)
  from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c)
-- !query 2 schema
struct<>
-- !query 2 output
org.apache.spark.sql.AnalysisException
Undefined function: 'aggfns'. This function is neither a registered temporary function nor a permanent function registered in the database 'default'.; line 1 pos 7


-- !query 3
select aggfstr(distinct a,b,c)
  from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c),
       generate_series(1,3) i
-- !query 3 schema
struct<>
-- !query 3 output
org.apache.spark.sql.AnalysisException
Undefined function: 'aggfstr'. This function is neither a registered temporary function nor a permanent function registered in the database 'default'.; line 1 pos 7


-- !query 4
select aggfns(distinct a,b,c)
  from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c),
       generate_series(1,3) i
-- !query 4 schema
struct<>
-- !query 4 output
org.apache.spark.sql.AnalysisException
Undefined function: 'aggfns'. This function is neither a registered temporary function nor a permanent function registered in the database 'default'.; line 1 pos 7


-- !query 5
select aggfstr(distinct a,b,c order by b)
  from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c),
       generate_series(1,3) i
-- !query 5 schema
struct<>
-- !query 5 output
org.apache.spark.sql.catalyst.parser.ParseException

extraneous input 'order' expecting {')', ','}(line 1, pos 30)

== SQL ==
select aggfstr(distinct a,b,c order by b)
------------------------------^^^
  from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c),
       generate_series(1,3) i


-- !query 6
select aggfns(distinct a,b,c order by b)
  from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c),
       generate_series(1,3) i
-- !query 6 schema
struct<>
-- !query 6 output
org.apache.spark.sql.catalyst.parser.ParseException

extraneous input 'order' expecting {')', ','}(line 1, pos 29)

== SQL ==
select aggfns(distinct a,b,c order by b)
-----------------------------^^^
  from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c),
       generate_series(1,3) i


-- !query 7
select aggfns(distinct a,a,c order by c using ~<~,a)
  from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c),
       generate_series(1,2) i
-- !query 7 schema
struct<>
-- !query 7 output
org.apache.spark.sql.catalyst.parser.ParseException

extraneous input 'order' expecting {')', ','}(line 1, pos 29)

== SQL ==
select aggfns(distinct a,a,c order by c using ~<~,a)
-----------------------------^^^
  from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c),
       generate_series(1,2) i


-- !query 8
select aggfns(distinct a,a,c order by c using ~<~)
  from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c),
       generate_series(1,2) i
-- !query 8 schema
struct<>
-- !query 8 output
org.apache.spark.sql.catalyst.parser.ParseException

extraneous input 'order' expecting {')', ','}(line 1, pos 29)

== SQL ==
select aggfns(distinct a,a,c order by c using ~<~)
-----------------------------^^^
  from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c),
       generate_series(1,2) i


-- !query 9
select aggfns(distinct a,a,c order by a)
  from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c),
       generate_series(1,2) i
-- !query 9 schema
struct<>
-- !query 9 output
org.apache.spark.sql.catalyst.parser.ParseException

extraneous input 'order' expecting {')', ','}(line 1, pos 29)

== SQL ==
select aggfns(distinct a,a,c order by a)
-----------------------------^^^
  from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c),
       generate_series(1,2) i


-- !query 10
select aggfns(distinct a,b,c order by a,c using ~<~,b)
  from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c),
       generate_series(1,2) i
-- !query 10 schema
struct<>
-- !query 10 output
org.apache.spark.sql.catalyst.parser.ParseException

extraneous input 'order' expecting {')', ','}(line 1, pos 29)

== SQL ==
select aggfns(distinct a,b,c order by a,c using ~<~,b)
-----------------------------^^^
  from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c),
       generate_series(1,2) i


-- !query 11
create view agg_view1 as
  select aggfns(a,b,c)
    from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c)
-- !query 11 schema
struct<>
-- !query 11 output
org.apache.spark.sql.AnalysisException
Undefined function: 'aggfns'. This function is neither a registered temporary function nor a permanent function registered in the database 'default'.; line 2 pos 9


-- !query 12
select * from agg_view1
-- !query 12 schema
struct<>
-- !query 12 output
org.apache.spark.sql.AnalysisException
Table or view not found: agg_view1; line 1 pos 14


-- !query 13
select pg_get_viewdef('agg_view1'::regclass)
-- !query 13 schema
struct<>
-- !query 13 output
org.apache.spark.sql.catalyst.parser.ParseException

mismatched input ':' expecting {')', ','}(line 1, pos 33)

== SQL ==
select pg_get_viewdef('agg_view1'::regclass)
---------------------------------^^^


-- !query 14
create or replace view agg_view1 as
  select aggfns(distinct a,b,c)
    from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c),
         generate_series(1,3) i
-- !query 14 schema
struct<>
-- !query 14 output
org.apache.spark.sql.AnalysisException
Undefined function: 'aggfns'. This function is neither a registered temporary function nor a permanent function registered in the database 'default'.; line 2 pos 9


-- !query 15
select * from agg_view1
-- !query 15 schema
struct<>
-- !query 15 output
org.apache.spark.sql.AnalysisException
Table or view not found: agg_view1; line 1 pos 14


-- !query 16
select pg_get_viewdef('agg_view1'::regclass)
-- !query 16 schema
struct<>
-- !query 16 output
org.apache.spark.sql.catalyst.parser.ParseException

mismatched input ':' expecting {')', ','}(line 1, pos 33)

== SQL ==
select pg_get_viewdef('agg_view1'::regclass)
---------------------------------^^^


-- !query 17
create or replace view agg_view1 as
  select aggfns(distinct a,b,c order by b)
    from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c),
         generate_series(1,3) i
-- !query 17 schema
struct<>
-- !query 17 output
org.apache.spark.sql.catalyst.parser.ParseException

extraneous input 'order' expecting {')', ','}(line 2, pos 31)

== SQL ==
create or replace view agg_view1 as
  select aggfns(distinct a,b,c order by b)
-------------------------------^^^
    from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c),
         generate_series(1,3) i


-- !query 18
select * from agg_view1
-- !query 18 schema
struct<>
-- !query 18 output
org.apache.spark.sql.AnalysisException
Table or view not found: agg_view1; line 1 pos 14


-- !query 19
select pg_get_viewdef('agg_view1'::regclass)
-- !query 19 schema
struct<>
-- !query 19 output
org.apache.spark.sql.catalyst.parser.ParseException

mismatched input ':' expecting {')', ','}(line 1, pos 33)

== SQL ==
select pg_get_viewdef('agg_view1'::regclass)
---------------------------------^^^


-- !query 20
create or replace view agg_view1 as
  select aggfns(a,b,c order by b+1)
    from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c)
-- !query 20 schema
struct<>
-- !query 20 output
org.apache.spark.sql.catalyst.parser.ParseException

missing ')' at 'order'(line 2, pos 22)

== SQL ==
create or replace view agg_view1 as
  select aggfns(a,b,c order by b+1)
----------------------^^^
    from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c)


-- !query 21
select * from agg_view1
-- !query 21 schema
struct<>
-- !query 21 output
org.apache.spark.sql.AnalysisException
Table or view not found: agg_view1; line 1 pos 14


-- !query 22
select pg_get_viewdef('agg_view1'::regclass)
-- !query 22 schema
struct<>
-- !query 22 output
org.apache.spark.sql.catalyst.parser.ParseException

mismatched input ':' expecting {')', ','}(line 1, pos 33)

== SQL ==
select pg_get_viewdef('agg_view1'::regclass)
---------------------------------^^^


-- !query 23
create or replace view agg_view1 as
  select aggfns(a,a,c order by b)
    from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c)
-- !query 23 schema
struct<>
-- !query 23 output
org.apache.spark.sql.catalyst.parser.ParseException

missing ')' at 'order'(line 2, pos 22)

== SQL ==
create or replace view agg_view1 as
  select aggfns(a,a,c order by b)
----------------------^^^
    from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c)


-- !query 24
select * from agg_view1
-- !query 24 schema
struct<>
-- !query 24 output
org.apache.spark.sql.AnalysisException
Table or view not found: agg_view1; line 1 pos 14


-- !query 25
select pg_get_viewdef('agg_view1'::regclass)
-- !query 25 schema
struct<>
-- !query 25 output
org.apache.spark.sql.catalyst.parser.ParseException

mismatched input ':' expecting {')', ','}(line 1, pos 33)

== SQL ==
select pg_get_viewdef('agg_view1'::regclass)
---------------------------------^^^


-- !query 26
create or replace view agg_view1 as
  select aggfns(a,b,c order by c using ~<~)
    from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c)
-- !query 26 schema
struct<>
-- !query 26 output
org.apache.spark.sql.catalyst.parser.ParseException

missing ')' at 'order'(line 2, pos 22)

== SQL ==
create or replace view agg_view1 as
  select aggfns(a,b,c order by c using ~<~)
----------------------^^^
    from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c)


-- !query 27
select * from agg_view1
-- !query 27 schema
struct<>
-- !query 27 output
org.apache.spark.sql.AnalysisException
Table or view not found: agg_view1; line 1 pos 14


-- !query 28
select pg_get_viewdef('agg_view1'::regclass)
-- !query 28 schema
struct<>
-- !query 28 output
org.apache.spark.sql.catalyst.parser.ParseException

mismatched input ':' expecting {')', ','}(line 1, pos 33)

== SQL ==
select pg_get_viewdef('agg_view1'::regclass)
---------------------------------^^^


-- !query 29
create or replace view agg_view1 as
  select aggfns(distinct a,b,c order by a,c using ~<~,b)
    from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c),
         generate_series(1,2) i
-- !query 29 schema
struct<>
-- !query 29 output
org.apache.spark.sql.catalyst.parser.ParseException

extraneous input 'order' expecting {')', ','}(line 2, pos 31)

== SQL ==
create or replace view agg_view1 as
  select aggfns(distinct a,b,c order by a,c using ~<~,b)
-------------------------------^^^
    from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c),
         generate_series(1,2) i


-- !query 30
select * from agg_view1
-- !query 30 schema
struct<>
-- !query 30 output
org.apache.spark.sql.AnalysisException
Table or view not found: agg_view1; line 1 pos 14


-- !query 31
select pg_get_viewdef('agg_view1'::regclass)
-- !query 31 schema
struct<>
-- !query 31 output
org.apache.spark.sql.catalyst.parser.ParseException

mismatched input ':' expecting {')', ','}(line 1, pos 33)

== SQL ==
select pg_get_viewdef('agg_view1'::regclass)
---------------------------------^^^


-- !query 32
drop view agg_view1
-- !query 32 schema
struct<>
-- !query 32 output
org.apache.spark.sql.AnalysisException
Table or view not found: agg_view1;


-- !query 33
select aggfns(distinct a,b,c order by i)
  from (values (1,1,'foo')) v(a,b,c), generate_series(1,2) i
-- !query 33 schema
struct<>
-- !query 33 output
org.apache.spark.sql.catalyst.parser.ParseException

extraneous input 'order' expecting {')', ','}(line 1, pos 29)

== SQL ==
select aggfns(distinct a,b,c order by i)
-----------------------------^^^
  from (values (1,1,'foo')) v(a,b,c), generate_series(1,2) i


-- !query 34
select aggfns(distinct a,b,c order by a,b+1)
  from (values (1,1,'foo')) v(a,b,c), generate_series(1,2) i
-- !query 34 schema
struct<>
-- !query 34 output
org.apache.spark.sql.catalyst.parser.ParseException

extraneous input 'order' expecting {')', ','}(line 1, pos 29)

== SQL ==
select aggfns(distinct a,b,c order by a,b+1)
-----------------------------^^^
  from (values (1,1,'foo')) v(a,b,c), generate_series(1,2) i


-- !query 35
select aggfns(distinct a,b,c order by a,b,i,c)
  from (values (1,1,'foo')) v(a,b,c), generate_series(1,2) i
-- !query 35 schema
struct<>
-- !query 35 output
org.apache.spark.sql.catalyst.parser.ParseException

extraneous input 'order' expecting {')', ','}(line 1, pos 29)

== SQL ==
select aggfns(distinct a,b,c order by a,b,i,c)
-----------------------------^^^
  from (values (1,1,'foo')) v(a,b,c), generate_series(1,2) i


-- !query 36
select aggfns(distinct a,a,c order by a,b)
  from (values (1,1,'foo')) v(a,b,c), generate_series(1,2) i
-- !query 36 schema
struct<>
-- !query 36 output
org.apache.spark.sql.catalyst.parser.ParseException

extraneous input 'order' expecting {')', ','}(line 1, pos 29)

== SQL ==
select aggfns(distinct a,a,c order by a,b)
-----------------------------^^^
  from (values (1,1,'foo')) v(a,b,c), generate_series(1,2) i


-- !query 37
select concat_ws(',', collect_list(a)) from (values('aaaa'),('bbbb'),('cccc')) g(a)
-- !query 37 schema
struct<concat_ws(,, collect_list(a)):string>
-- !query 37 output
aaaa,bbbb,cccc


-- !query 38
select concat_ws(',', collect_list(a)) from (values('aaaa'),(null),('bbbb'),('cccc')) g(a)
-- !query 38 schema
struct<concat_ws(,, collect_list(a)):string>
-- !query 38 output
aaaa,bbbb,cccc


-- !query 39
select concat_ws('AB', collect_list(a)) from (values(null),(null),('bbbb'),('cccc')) g(a)
-- !query 39 schema
struct<concat_ws(AB, collect_list(a)):string>
-- !query 39 output
bbbbABcccc


-- !query 40
select concat_ws(',', collect_list(a)) from (values(null),(null)) g(a)
-- !query 40 schema
struct<concat_ws(,, collect_list(a)):string>
-- !query 40 output



-- !query 41
select concat_ws(',', sort_array(array_distinct(collect_list(f1)))) from varchar_tbl
-- !query 41 schema
struct<concat_ws(,, sort_array(array_distinct(collect_list(f1)), true)):string>
-- !query 41 output
,1,2,3,A,a,c


-- !query 42
select min(CASE WHEN unique1> 100 THEN unique1 END) from tenk1
-- !query 42 schema
struct<min(CASE WHEN (unique1 > 100) THEN unique1 END):int>
-- !query 42 output
101


-- !query 43
select sum(CASE WHEN ten > 0 THEN cast(1/ten as integer) END) from tenk1
-- !query 43 schema
struct<sum(CASE WHEN (ten > 0) THEN CAST((CAST(1 AS DOUBLE) / CAST(ten AS DOUBLE)) AS INT) END):bigint>
-- !query 43 output
1000


-- !query 44
select ten, sum(distinct CASE WHEN four > 10 THEN four END)  from onek a
group by ten
having exists (select 1 from onek b where sum(distinct a.four) = b.four)
-- !query 44 schema
struct<ten:int,sum(DISTINCT CASE WHEN (four > 10) THEN four END):bigint>
-- !query 44 output
0	NULL
2	NULL
4	NULL
6	NULL
8	NULL


-- !query 45
select max(CASE WHEN bar > '0' THEN foo END)
from (values ('a', 'b')) AS v(foo,bar)
-- !query 45 schema
struct<max(CASE WHEN (bar > 0) THEN foo END):string>
-- !query 45 output
a


-- !query 46
select (select count(*)
        from (values (1)) t0(inner_c))
from (values (2),(3)) t1(outer_c)
-- !query 46 schema
struct<scalarsubquery():bigint>
-- !query 46 output
1
1


-- !query 47
-- inner query is aggregation query

select aggfns(distinct a,b,c order by a,c using ~<~,b) filter (where a > 1)
    from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c),
    generate_series(1,2) i
-- !query 47 schema
struct<>
-- !query 47 output
org.apache.spark.sql.catalyst.parser.ParseException

extraneous input 'order' expecting {')', ','}(line 3, pos 29)

== SQL ==
-- inner query is aggregation query

select aggfns(distinct a,b,c order by a,c using ~<~,b) filter (where a > 1)
-----------------------------^^^
    from (values (1,3,'foo'),(0,null,null),(2,2,'bar'),(3,1,'baz')) v(a,b,c),
    generate_series(1,2) i
