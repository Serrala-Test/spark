-- Automatically generated by SQLQueryTestSuite
-- !query
select concat_ws()
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
requirement failed: concat_ws requires at least one argument.; line 1 pos 7


-- !query
select format_string()
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
requirement failed: format_string() should take at least 1 argument; line 1 pos 7


-- !query
select 'a' || 'b' || 'c'
-- !query schema
struct<concat(concat(a, b), c):string>
-- !query output
abc


-- !query
select replace('abc', 'b', '123')
-- !query schema
struct<replace(abc, b, 123):string>
-- !query output
a123c


-- !query
select replace('abc', 'b')
-- !query schema
struct<replace(abc, b, ):string>
-- !query output
ac


-- !query
select length(uuid()), (uuid() <> uuid())
-- !query schema
struct<length(uuid()):int,(NOT (uuid() = uuid())):boolean>
-- !query output
36	true


-- !query
select position('bar' in 'foobarbar'), position(null, 'foobarbar'), position('aaads', null)
-- !query schema
struct<locate(bar, foobarbar, 1):int,position(NULL, foobarbar, 1):int,position(aaads, NULL, 1):int>
-- !query output
4	NULL	NULL


-- !query
select left("abcd", 2), left("abcd", 5), left("abcd", '2'), left("abcd", null)
-- !query schema
struct<left(abcd, 2):string,left(abcd, 5):string,left(abcd, 2):string,left(abcd, NULL):string>
-- !query output
ab	abcd	ab	NULL


-- !query
select left(null, -2)
-- !query schema
struct<left(NULL, -2):string>
-- !query output
NULL


-- !query
select left("abcd", -2), left("abcd", 0), left("abcd", 'a')
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkNumberFormatException
{
  "errorClass" : "CAST_INVALID_INPUT",
  "sqlState" : "42000",
  "messageParameters" : {
    "ansiConfig" : "\"spark.sql.ansi.enabled\"",
    "expression" : "'a'",
    "sourceType" : "\"STRING\"",
    "targetType" : "\"INT\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 43,
    "stopIndex" : 59,
    "fragment" : "left(\"abcd\", 'a')"
  } ]
}


-- !query
select right("abcd", 2), right("abcd", 5), right("abcd", '2'), right("abcd", null)
-- !query schema
struct<right(abcd, 2):string,right(abcd, 5):string,right(abcd, 2):string,right(abcd, NULL):string>
-- !query output
cd	abcd	cd	NULL


-- !query
select right(null, -2)
-- !query schema
struct<right(NULL, -2):string>
-- !query output
NULL


-- !query
select right("abcd", -2), right("abcd", 0), right("abcd", 'a')
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkNumberFormatException
{
  "errorClass" : "CAST_INVALID_INPUT",
  "sqlState" : "42000",
  "messageParameters" : {
    "ansiConfig" : "\"spark.sql.ansi.enabled\"",
    "expression" : "'a'",
    "sourceType" : "\"STRING\"",
    "targetType" : "\"INT\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 45,
    "stopIndex" : 62,
    "fragment" : "right(\"abcd\", 'a')"
  } ]
}


-- !query
SELECT split('aa1cc2ee3', '[1-9]+')
-- !query schema
struct<split(aa1cc2ee3, [1-9]+, -1):array<string>>
-- !query output
["aa","cc","ee",""]


-- !query
SELECT split('aa1cc2ee3', '[1-9]+', 2)
-- !query schema
struct<split(aa1cc2ee3, [1-9]+, 2):array<string>>
-- !query output
["aa","cc2ee3"]


-- !query
SELECT split('hello', '')
-- !query schema
struct<split(hello, , -1):array<string>>
-- !query output
["h","e","l","l","o"]


-- !query
SELECT split('', '')
-- !query schema
struct<split(, , -1):array<string>>
-- !query output
[""]


-- !query
SELECT split('abc', null)
-- !query schema
struct<split(abc, NULL, -1):array<string>>
-- !query output
NULL


-- !query
SELECT split(null, 'b')
-- !query schema
struct<split(NULL, b, -1):array<string>>
-- !query output
NULL


-- !query
SELECT split_part('11.12.13', '.', 2)
-- !query schema
struct<split_part(11.12.13, ., 2):string>
-- !query output
12


-- !query
SELECT split_part('11.12.13', '.', -1)
-- !query schema
struct<split_part(11.12.13, ., -1):string>
-- !query output
13


-- !query
SELECT split_part('11.12.13', '.', -3)
-- !query schema
struct<split_part(11.12.13, ., -3):string>
-- !query output
11


-- !query
SELECT split_part('11.12.13', '', 1)
-- !query schema
struct<split_part(11.12.13, , 1):string>
-- !query output
11.12.13


-- !query
SELECT split_part('11ab12ab13', 'ab', 1)
-- !query schema
struct<split_part(11ab12ab13, ab, 1):string>
-- !query output
11


-- !query
SELECT split_part('11.12.13', '.', 0)
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkRuntimeException
{
  "errorClass" : "ELEMENT_AT_BY_INDEX_ZERO"
}


-- !query
SELECT split_part('11.12.13', '.', 4)
-- !query schema
struct<split_part(11.12.13, ., 4):string>
-- !query output



-- !query
SELECT split_part('11.12.13', '.', 5)
-- !query schema
struct<split_part(11.12.13, ., 5):string>
-- !query output



-- !query
SELECT split_part('11.12.13', '.', -5)
-- !query schema
struct<split_part(11.12.13, ., -5):string>
-- !query output



-- !query
SELECT split_part(null, '.', 1)
-- !query schema
struct<split_part(NULL, ., 1):string>
-- !query output
NULL


-- !query
SELECT split_part(str, delimiter, partNum) FROM VALUES ('11.12.13', '.', 3) AS v1(str, delimiter, partNum)
-- !query schema
struct<split_part(str, delimiter, partNum):string>
-- !query output
13


-- !query
SELECT substr('Spark SQL', 5)
-- !query schema
struct<substr(Spark SQL, 5, 2147483647):string>
-- !query output
k SQL


-- !query
SELECT substr('Spark SQL', -3)
-- !query schema
struct<substr(Spark SQL, -3, 2147483647):string>
-- !query output
SQL


-- !query
SELECT substr('Spark SQL', 5, 1)
-- !query schema
struct<substr(Spark SQL, 5, 1):string>
-- !query output
k


-- !query
SELECT substr('Spark SQL' from 5)
-- !query schema
struct<substring(Spark SQL, 5, 2147483647):string>
-- !query output
k SQL


-- !query
SELECT substr('Spark SQL' from -3)
-- !query schema
struct<substring(Spark SQL, -3, 2147483647):string>
-- !query output
SQL


-- !query
SELECT substr('Spark SQL' from 5 for 1)
-- !query schema
struct<substring(Spark SQL, 5, 1):string>
-- !query output
k


-- !query
SELECT substring('Spark SQL', 5)
-- !query schema
struct<substring(Spark SQL, 5, 2147483647):string>
-- !query output
k SQL


-- !query
SELECT substring('Spark SQL', -3)
-- !query schema
struct<substring(Spark SQL, -3, 2147483647):string>
-- !query output
SQL


-- !query
SELECT substring('Spark SQL', 5, 1)
-- !query schema
struct<substring(Spark SQL, 5, 1):string>
-- !query output
k


-- !query
SELECT substring('Spark SQL' from 5)
-- !query schema
struct<substring(Spark SQL, 5, 2147483647):string>
-- !query output
k SQL


-- !query
SELECT substring('Spark SQL' from -3)
-- !query schema
struct<substring(Spark SQL, -3, 2147483647):string>
-- !query output
SQL


-- !query
SELECT substring('Spark SQL' from 5 for 1)
-- !query schema
struct<substring(Spark SQL, 5, 1):string>
-- !query output
k


-- !query
select mask_hash('TestString-123'),
       mask_hash('TestString-123', TRUE),
       mask_hash('TestString-123', FALSE),
       mask_hash(123),
       mask_hash(123, TRUE),
       mask_hash(123, FALSE),
       mask_hash(12345),
       mask_hash(12345, TRUE),
       mask_hash(12345, FALSE),
       mask_hash(12345L),
       mask_hash(12345L, TRUE),
       mask_hash(12345L, FALSE),
       mask_hash(cast('2022-10-14' as date)),
       mask_hash(cast('2022-10-14' as date), TRUE),
       mask_hash(cast('2022-10-14' as date), FALSE),
       mask_hash(cast(12345 as bigint)),
       mask_hash(cast(12345 as bigint), TRUE),
       mask_hash(cast(12345 as bigint), FALSE),
       mask_hash(NULL),
       mask_hash(NULL, TRUE),
       mask_hash(NULL, FALSE)
-- !query schema
struct<mask_hash(TestString-123, false):string,mask_hash(TestString-123, true):string,mask_hash(TestString-123, false):string,mask_hash(123, false):string,mask_hash(123, true):string,mask_hash(123, false):string,mask_hash(12345, false):string,mask_hash(12345, true):string,mask_hash(12345, false):string,mask_hash(12345, false):string,mask_hash(12345, true):string,mask_hash(12345, false):string,mask_hash(CAST(2022-10-14 AS DATE), false):string,mask_hash(CAST(2022-10-14 AS DATE), true):string,mask_hash(CAST(2022-10-14 AS DATE), false):string,mask_hash(CAST(12345 AS BIGINT), false):string,mask_hash(CAST(12345 AS BIGINT), true):string,mask_hash(CAST(12345 AS BIGINT), false):string,mask_hash(NULL, false):string,mask_hash(NULL, true):string,mask_hash(NULL, false):string>
-- !query output
8b44d559dc5d60e4453c9b4edf2a455fbce054bb8504cd3eb9b5f391bd239c90	f3a58111be6ecec11449ac44654e72376b7759883ea11723b6e51354d50436de645bd061cb5c2b07b68e15b7a7c342cac41f69b9c4efe19e810bbd7abf639a1c	8b44d559dc5d60e4453c9b4edf2a455fbce054bb8504cd3eb9b5f391bd239c90	a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3	3c9909afec25354d551dae21590bb26e38d53f2173b8d3dc3eee4c047e7ab1c1eb8b85103e3be7ba613b31bb5c9c36214dc9f14a42fd7a2fdb84856bca5c44c2	a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3	5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5	3627909a29c31381a071ec27f7c9ca97726182aed29a7ddd2e54353322cfb30abb9e3a6df2ac2c20fe23436311d678564d0c8d305930575f60e2d3d048184d79	5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5	5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5	3627909a29c31381a071ec27f7c9ca97726182aed29a7ddd2e54353322cfb30abb9e3a6df2ac2c20fe23436311d678564d0c8d305930575f60e2d3d048184d79	5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5	a18ea86a7b2d8ec2fa56abd88ac829d38e85026dade229f33657db4fec59a514	ba6654775480876a066564107653d9b44d90f45bfd885f62b1cc4f37dccc6edaa9b27e0b0834dbebf52bc32fcde5cf6452c2822c34be908e011ac74555195c79	a18ea86a7b2d8ec2fa56abd88ac829d38e85026dade229f33657db4fec59a514	5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5	3627909a29c31381a071ec27f7c9ca97726182aed29a7ddd2e54353322cfb30abb9e3a6df2ac2c20fe23436311d678564d0c8d305930575f60e2d3d048184d79	5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5	NULL	NULL	NULL


-- !query
SELECT trim(" xyz "), ltrim(" xyz "), rtrim(" xyz ")
-- !query schema
struct<trim( xyz ):string,ltrim( xyz ):string,rtrim( xyz ):string>
-- !query output
xyz	xyz 	 xyz


-- !query
SELECT trim(BOTH 'xyz' FROM 'yxTomxx'), trim('xyz' FROM 'yxTomxx')
-- !query schema
struct<TRIM(BOTH xyz FROM yxTomxx):string,TRIM(BOTH xyz FROM yxTomxx):string>
-- !query output
Tom	Tom


-- !query
SELECT trim(BOTH 'x' FROM 'xxxbarxxx'), trim('x' FROM 'xxxbarxxx')
-- !query schema
struct<TRIM(BOTH x FROM xxxbarxxx):string,TRIM(BOTH x FROM xxxbarxxx):string>
-- !query output
bar	bar


-- !query
SELECT trim(LEADING 'xyz' FROM 'zzzytest')
-- !query schema
struct<TRIM(LEADING xyz FROM zzzytest):string>
-- !query output
test


-- !query
SELECT trim(LEADING 'xyz' FROM 'zzzytestxyz')
-- !query schema
struct<TRIM(LEADING xyz FROM zzzytestxyz):string>
-- !query output
testxyz


-- !query
SELECT trim(LEADING 'xy' FROM 'xyxXxyLAST WORD')
-- !query schema
struct<TRIM(LEADING xy FROM xyxXxyLAST WORD):string>
-- !query output
XxyLAST WORD


-- !query
SELECT trim(TRAILING 'xyz' FROM 'testxxzx')
-- !query schema
struct<TRIM(TRAILING xyz FROM testxxzx):string>
-- !query output
test


-- !query
SELECT trim(TRAILING 'xyz' FROM 'xyztestxxzx')
-- !query schema
struct<TRIM(TRAILING xyz FROM xyztestxxzx):string>
-- !query output
xyztest


-- !query
SELECT trim(TRAILING 'xy' FROM 'TURNERyxXxy')
-- !query schema
struct<TRIM(TRAILING xy FROM TURNERyxXxy):string>
-- !query output
TURNERyxX


-- !query
SELECT btrim('xyxtrimyyx', 'xy')
-- !query schema
struct<btrim(xyxtrimyyx, xy):string>
-- !query output
trim


-- !query
SELECT btrim(encode(" xyz ", 'utf-8'))
-- !query schema
struct<btrim(encode( xyz , utf-8)):string>
-- !query output
xyz


-- !query
SELECT btrim(encode('yxTomxx', 'utf-8'), encode('xyz', 'utf-8'))
-- !query schema
struct<btrim(encode(yxTomxx, utf-8), encode(xyz, utf-8)):string>
-- !query output
Tom


-- !query
SELECT btrim(encode('xxxbarxxx', 'utf-8'), encode('x', 'utf-8'))
-- !query schema
struct<btrim(encode(xxxbarxxx, utf-8), encode(x, utf-8)):string>
-- !query output
bar


-- !query
SELECT lpad('hi', 'invalid_length')
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkNumberFormatException
{
  "errorClass" : "CAST_INVALID_INPUT",
  "sqlState" : "42000",
  "messageParameters" : {
    "ansiConfig" : "\"spark.sql.ansi.enabled\"",
    "expression" : "'invalid_length'",
    "sourceType" : "\"STRING\"",
    "targetType" : "\"INT\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 35,
    "fragment" : "lpad('hi', 'invalid_length')"
  } ]
}


-- !query
SELECT rpad('hi', 'invalid_length')
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkNumberFormatException
{
  "errorClass" : "CAST_INVALID_INPUT",
  "sqlState" : "42000",
  "messageParameters" : {
    "ansiConfig" : "\"spark.sql.ansi.enabled\"",
    "expression" : "'invalid_length'",
    "sourceType" : "\"STRING\"",
    "targetType" : "\"INT\""
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 35,
    "fragment" : "rpad('hi', 'invalid_length')"
  } ]
}


-- !query
SELECT hex(lpad(unhex(''), 5))
-- !query schema
struct<hex(lpad(unhex(), 5, X'00')):string>
-- !query output
0000000000


-- !query
SELECT hex(lpad(unhex('aabb'), 5))
-- !query schema
struct<hex(lpad(unhex(aabb), 5, X'00')):string>
-- !query output
000000AABB


-- !query
SELECT hex(lpad(unhex('aabbcc'), 2))
-- !query schema
struct<hex(lpad(unhex(aabbcc), 2, X'00')):string>
-- !query output
AABB


-- !query
SELECT hex(lpad(unhex('123'), 2))
-- !query schema
struct<hex(lpad(unhex(123), 2, X'00')):string>
-- !query output
0123


-- !query
SELECT hex(lpad(unhex('12345'), 2))
-- !query schema
struct<hex(lpad(unhex(12345), 2, X'00')):string>
-- !query output
0123


-- !query
SELECT hex(lpad(unhex(''), 5, unhex('1f')))
-- !query schema
struct<hex(lpad(unhex(), 5, unhex(1f))):string>
-- !query output
1F1F1F1F1F


-- !query
SELECT hex(lpad(unhex('aa'), 5, unhex('1f')))
-- !query schema
struct<hex(lpad(unhex(aa), 5, unhex(1f))):string>
-- !query output
1F1F1F1FAA


-- !query
SELECT hex(lpad(unhex('aa'), 6, unhex('1f')))
-- !query schema
struct<hex(lpad(unhex(aa), 6, unhex(1f))):string>
-- !query output
1F1F1F1F1FAA


-- !query
SELECT hex(lpad(unhex(''), 5, unhex('1f2e')))
-- !query schema
struct<hex(lpad(unhex(), 5, unhex(1f2e))):string>
-- !query output
1F2E1F2E1F


-- !query
SELECT hex(lpad(unhex('aa'), 5, unhex('1f2e')))
-- !query schema
struct<hex(lpad(unhex(aa), 5, unhex(1f2e))):string>
-- !query output
1F2E1F2EAA


-- !query
SELECT hex(lpad(unhex('aa'), 6, unhex('1f2e')))
-- !query schema
struct<hex(lpad(unhex(aa), 6, unhex(1f2e))):string>
-- !query output
1F2E1F2E1FAA


-- !query
SELECT hex(lpad(unhex(''), 6, unhex('')))
-- !query schema
struct<hex(lpad(unhex(), 6, unhex())):string>
-- !query output



-- !query
SELECT hex(lpad(unhex('aabbcc'), 6, unhex('')))
-- !query schema
struct<hex(lpad(unhex(aabbcc), 6, unhex())):string>
-- !query output
AABBCC


-- !query
SELECT hex(lpad(unhex('aabbcc'), 2, unhex('ff')))
-- !query schema
struct<hex(lpad(unhex(aabbcc), 2, unhex(ff))):string>
-- !query output
AABB


-- !query
SELECT hex(rpad(unhex(''), 5))
-- !query schema
struct<hex(rpad(unhex(), 5, X'00')):string>
-- !query output
0000000000


-- !query
SELECT hex(rpad(unhex('aabb'), 5))
-- !query schema
struct<hex(rpad(unhex(aabb), 5, X'00')):string>
-- !query output
AABB000000


-- !query
SELECT hex(rpad(unhex('aabbcc'), 2))
-- !query schema
struct<hex(rpad(unhex(aabbcc), 2, X'00')):string>
-- !query output
AABB


-- !query
SELECT hex(rpad(unhex('123'), 2))
-- !query schema
struct<hex(rpad(unhex(123), 2, X'00')):string>
-- !query output
0123


-- !query
SELECT hex(rpad(unhex('12345'), 2))
-- !query schema
struct<hex(rpad(unhex(12345), 2, X'00')):string>
-- !query output
0123


-- !query
SELECT hex(rpad(unhex(''), 5, unhex('1f')))
-- !query schema
struct<hex(rpad(unhex(), 5, unhex(1f))):string>
-- !query output
1F1F1F1F1F


-- !query
SELECT hex(rpad(unhex('aa'), 5, unhex('1f')))
-- !query schema
struct<hex(rpad(unhex(aa), 5, unhex(1f))):string>
-- !query output
AA1F1F1F1F


-- !query
SELECT hex(rpad(unhex('aa'), 6, unhex('1f')))
-- !query schema
struct<hex(rpad(unhex(aa), 6, unhex(1f))):string>
-- !query output
AA1F1F1F1F1F


-- !query
SELECT hex(rpad(unhex(''), 5, unhex('1f2e')))
-- !query schema
struct<hex(rpad(unhex(), 5, unhex(1f2e))):string>
-- !query output
1F2E1F2E1F


-- !query
SELECT hex(rpad(unhex('aa'), 5, unhex('1f2e')))
-- !query schema
struct<hex(rpad(unhex(aa), 5, unhex(1f2e))):string>
-- !query output
AA1F2E1F2E


-- !query
SELECT hex(rpad(unhex('aa'), 6, unhex('1f2e')))
-- !query schema
struct<hex(rpad(unhex(aa), 6, unhex(1f2e))):string>
-- !query output
AA1F2E1F2E1F


-- !query
SELECT hex(rpad(unhex(''), 6, unhex('')))
-- !query schema
struct<hex(rpad(unhex(), 6, unhex())):string>
-- !query output



-- !query
SELECT hex(rpad(unhex('aabbcc'), 6, unhex('')))
-- !query schema
struct<hex(rpad(unhex(aabbcc), 6, unhex())):string>
-- !query output
AABBCC


-- !query
SELECT hex(rpad(unhex('aabbcc'), 2, unhex('ff')))
-- !query schema
struct<hex(rpad(unhex(aabbcc), 2, unhex(ff))):string>
-- !query output
AABB


-- !query
SELECT lpad('abc', 5, x'57')
-- !query schema
struct<lpad(abc, 5, X'57'):string>
-- !query output
WWabc


-- !query
SELECT lpad(x'57', 5, 'abc')
-- !query schema
struct<lpad(X'57', 5, abc):string>
-- !query output
abcaW


-- !query
SELECT rpad('abc', 5, x'57')
-- !query schema
struct<rpad(abc, 5, X'57'):string>
-- !query output
abcWW


-- !query
SELECT rpad(x'57', 5, 'abc')
-- !query schema
struct<rpad(X'57', 5, abc):string>
-- !query output
Wabca


-- !query
select decode()
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "_LEGACY_ERROR_TEMP_1042",
  "messageParameters" : {
    "actualNumber" : "0",
    "expectedInfo" : "2",
    "name" : "decode"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 15,
    "fragment" : "decode()"
  } ]
}


-- !query
select decode(encode('abc', 'utf-8'))
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "_LEGACY_ERROR_TEMP_1042",
  "messageParameters" : {
    "actualNumber" : "1",
    "expectedInfo" : "2",
    "name" : "decode"
  },
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 8,
    "stopIndex" : 37,
    "fragment" : "decode(encode('abc', 'utf-8'))"
  } ]
}


-- !query
select decode(encode('abc', 'utf-8'), 'utf-8')
-- !query schema
struct<decode(encode(abc, utf-8), utf-8):string>
-- !query output
abc


-- !query
select decode(1, 1, 'Southlake')
-- !query schema
struct<decode(1, 1, Southlake):string>
-- !query output
Southlake


-- !query
select decode(2, 1, 'Southlake')
-- !query schema
struct<decode(2, 1, Southlake):string>
-- !query output
NULL


-- !query
select decode(2, 1, 'Southlake', 2, 'San Francisco', 3, 'New Jersey', 4, 'Seattle', 'Non domestic')
-- !query schema
struct<decode(2, 1, Southlake, 2, San Francisco, 3, New Jersey, 4, Seattle, Non domestic):string>
-- !query output
San Francisco


-- !query
select decode(6, 1, 'Southlake', 2, 'San Francisco', 3, 'New Jersey', 4, 'Seattle', 'Non domestic')
-- !query schema
struct<decode(6, 1, Southlake, 2, San Francisco, 3, New Jersey, 4, Seattle, Non domestic):string>
-- !query output
Non domestic


-- !query
select decode(6, 1, 'Southlake', 2, 'San Francisco', 3, 'New Jersey', 4, 'Seattle')
-- !query schema
struct<decode(6, 1, Southlake, 2, San Francisco, 3, New Jersey, 4, Seattle):string>
-- !query output
NULL


-- !query
SELECT CONTAINS(null, 'Spark')
-- !query schema
struct<contains(NULL, Spark):boolean>
-- !query output
NULL


-- !query
SELECT CONTAINS('Spark SQL', null)
-- !query schema
struct<contains(Spark SQL, NULL):boolean>
-- !query output
NULL


-- !query
SELECT CONTAINS(null, null)
-- !query schema
struct<contains(NULL, NULL):boolean>
-- !query output
NULL


-- !query
SELECT CONTAINS('Spark SQL', 'Spark')
-- !query schema
struct<contains(Spark SQL, Spark):boolean>
-- !query output
true


-- !query
SELECT CONTAINS('Spark SQL', 'SQL')
-- !query schema
struct<contains(Spark SQL, SQL):boolean>
-- !query output
true


-- !query
SELECT CONTAINS('Spark SQL', 'SPARK')
-- !query schema
struct<contains(Spark SQL, SPARK):boolean>
-- !query output
false


-- !query
SELECT startswith('Spark SQL', 'ark')
-- !query schema
struct<startswith(Spark SQL, ark):boolean>
-- !query output
false


-- !query
SELECT startswith('Spark SQL', 'Spa')
-- !query schema
struct<startswith(Spark SQL, Spa):boolean>
-- !query output
true


-- !query
SELECT startswith(null, 'Spark')
-- !query schema
struct<startswith(NULL, Spark):boolean>
-- !query output
NULL


-- !query
SELECT startswith('Spark', null)
-- !query schema
struct<startswith(Spark, NULL):boolean>
-- !query output
NULL


-- !query
SELECT startswith(null, null)
-- !query schema
struct<startswith(NULL, NULL):boolean>
-- !query output
NULL


-- !query
SELECT endswith('Spark SQL', 'QL')
-- !query schema
struct<endswith(Spark SQL, QL):boolean>
-- !query output
true


-- !query
SELECT endswith('Spark SQL', 'Spa')
-- !query schema
struct<endswith(Spark SQL, Spa):boolean>
-- !query output
false


-- !query
SELECT endswith(null, 'Spark')
-- !query schema
struct<endswith(NULL, Spark):boolean>
-- !query output
NULL


-- !query
SELECT endswith('Spark', null)
-- !query schema
struct<endswith(Spark, NULL):boolean>
-- !query output
NULL


-- !query
SELECT endswith(null, null)
-- !query schema
struct<endswith(NULL, NULL):boolean>
-- !query output
NULL


-- !query
SELECT contains(x'537061726b2053514c', x'537061726b')
-- !query schema
struct<contains(X'537061726B2053514C', X'537061726B'):boolean>
-- !query output
true


-- !query
SELECT contains(x'', x'')
-- !query schema
struct<contains(X'', X''):boolean>
-- !query output
true


-- !query
SELECT contains(x'537061726b2053514c', null)
-- !query schema
struct<contains(X'537061726B2053514C', NULL):boolean>
-- !query output
NULL


-- !query
SELECT contains(12, '1')
-- !query schema
struct<contains(12, 1):boolean>
-- !query output
true


-- !query
SELECT contains(true, 'ru')
-- !query schema
struct<contains(true, ru):boolean>
-- !query output
true


-- !query
SELECT contains(x'12', 12)
-- !query schema
struct<contains(X'12', 12):boolean>
-- !query output
false


-- !query
SELECT contains(true, false)
-- !query schema
struct<contains(true, false):boolean>
-- !query output
false


-- !query
SELECT startswith(x'537061726b2053514c', x'537061726b')
-- !query schema
struct<startswith(X'537061726B2053514C', X'537061726B'):boolean>
-- !query output
true


-- !query
SELECT startswith(x'537061726b2053514c', x'')
-- !query schema
struct<startswith(X'537061726B2053514C', X''):boolean>
-- !query output
true


-- !query
SELECT startswith(x'', x'')
-- !query schema
struct<startswith(X'', X''):boolean>
-- !query output
true


-- !query
SELECT startswith(x'537061726b2053514c', null)
-- !query schema
struct<startswith(X'537061726B2053514C', NULL):boolean>
-- !query output
NULL


-- !query
SELECT endswith(x'537061726b2053514c', x'53516c')
-- !query schema
struct<endswith(X'537061726B2053514C', X'53516C'):boolean>
-- !query output
false


-- !query
SELECT endsWith(x'537061726b2053514c', x'537061726b')
-- !query schema
struct<endswith(X'537061726B2053514C', X'537061726B'):boolean>
-- !query output
false


-- !query
SELECT endsWith(x'537061726b2053514c', x'')
-- !query schema
struct<endswith(X'537061726B2053514C', X''):boolean>
-- !query output
true


-- !query
SELECT endsWith(x'', x'')
-- !query schema
struct<endswith(X'', X''):boolean>
-- !query output
true


-- !query
SELECT endsWith(x'537061726b2053514c', null)
-- !query schema
struct<endswith(X'537061726B2053514C', NULL):boolean>
-- !query output
NULL


-- !query
select to_number('454', '000')
-- !query schema
struct<to_number(454, 000):decimal(3,0)>
-- !query output
454


-- !query
select to_number('454.2', '000.0')
-- !query schema
struct<to_number(454.2, 000.0):decimal(4,1)>
-- !query output
454.2


-- !query
select to_number('12,454', '00,000')
-- !query schema
struct<to_number(12,454, 00,000):decimal(5,0)>
-- !query output
12454


-- !query
select to_number('$78.12', '$00.00')
-- !query schema
struct<to_number($78.12, $00.00):decimal(4,2)>
-- !query output
78.12


-- !query
select to_number('+454', 'S000')
-- !query schema
struct<to_number(+454, S000):decimal(3,0)>
-- !query output
454


-- !query
select to_number('-454', 'S000')
-- !query schema
struct<to_number(-454, S000):decimal(3,0)>
-- !query output
-454


-- !query
select to_number('12,454.8-', '00,000.9MI')
-- !query schema
struct<to_number(12,454.8-, 00,000.9MI):decimal(6,1)>
-- !query output
-12454.8


-- !query
select to_number('00,454.8-', '00,000.9MI')
-- !query schema
struct<to_number(00,454.8-, 00,000.9MI):decimal(6,1)>
-- !query output
-454.8


-- !query
select to_number('<00,454.8>', '00,000.9PR')
-- !query schema
struct<to_number(<00,454.8>, 00,000.9PR):decimal(6,1)>
-- !query output
-454.8


-- !query
select to_binary('', 'base64')
-- !query schema
struct<to_binary(, base64):binary>
-- !query output



-- !query
select to_binary('  ', 'base64')
-- !query schema
struct<to_binary(  , base64):binary>
-- !query output



-- !query
select to_binary(' ab cd ', 'base64')
-- !query schema
struct<to_binary( ab cd , base64):binary>
-- !query output
i�


-- !query
select to_binary(' ab c=', 'base64')
-- !query schema
struct<to_binary( ab c=, base64):binary>
-- !query output
i�


-- !query
select to_binary(' ab cdef= = ', 'base64')
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkIllegalArgumentException
{
  "errorClass" : "CONVERSION_INVALID_INPUT",
  "messageParameters" : {
    "fmt" : "'BASE64'",
    "str" : "' ab cdef= = '",
    "suggestion" : "`try_to_binary`",
    "targetType" : "\"BINARY\""
  }
}


-- !query
select to_binary(
  concat(' b25lIHR3byB0aHJlZSBmb3VyIGZpdmUgc2l4IHNldmVuIGVpZ2h0IG5pbmUgdGVuIGVsZXZlbiB0',
         'd2VsdmUgdGhpcnRlZW4gZm91cnRlZW4gZml2dGVlbiBzaXh0ZWVuIHNldmVudGVlbiBlaWdodGVl'), 'base64')
-- !query schema
struct<to_binary(concat( b25lIHR3byB0aHJlZSBmb3VyIGZpdmUgc2l4IHNldmVuIGVpZ2h0IG5pbmUgdGVuIGVsZXZlbiB0, d2VsdmUgdGhpcnRlZW4gZm91cnRlZW4gZml2dGVlbiBzaXh0ZWVuIHNldmVudGVlbiBlaWdodGVl), base64):binary>
-- !query output
one two three four five six seven eight nine ten eleven twelve thirteen fourteen fivteen sixteen seventeen eightee


-- !query
select to_binary('a', 'base64')
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkIllegalArgumentException
{
  "errorClass" : "CONVERSION_INVALID_INPUT",
  "messageParameters" : {
    "fmt" : "'BASE64'",
    "str" : "'a'",
    "suggestion" : "`try_to_binary`",
    "targetType" : "\"BINARY\""
  }
}


-- !query
select to_binary('a?', 'base64')
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkIllegalArgumentException
{
  "errorClass" : "CONVERSION_INVALID_INPUT",
  "messageParameters" : {
    "fmt" : "'BASE64'",
    "str" : "'a?'",
    "suggestion" : "`try_to_binary`",
    "targetType" : "\"BINARY\""
  }
}


-- !query
select to_binary('abcde', 'base64')
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkIllegalArgumentException
{
  "errorClass" : "CONVERSION_INVALID_INPUT",
  "messageParameters" : {
    "fmt" : "'BASE64'",
    "str" : "'abcde'",
    "suggestion" : "`try_to_binary`",
    "targetType" : "\"BINARY\""
  }
}


-- !query
select to_binary('abcd=', 'base64')
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkIllegalArgumentException
{
  "errorClass" : "CONVERSION_INVALID_INPUT",
  "messageParameters" : {
    "fmt" : "'BASE64'",
    "str" : "'abcd='",
    "suggestion" : "`try_to_binary`",
    "targetType" : "\"BINARY\""
  }
}


-- !query
select to_binary('a===', 'base64')
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkIllegalArgumentException
{
  "errorClass" : "CONVERSION_INVALID_INPUT",
  "messageParameters" : {
    "fmt" : "'BASE64'",
    "str" : "'a==='",
    "suggestion" : "`try_to_binary`",
    "targetType" : "\"BINARY\""
  }
}


-- !query
select to_binary('ab==f', 'base64')
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkIllegalArgumentException
{
  "errorClass" : "CONVERSION_INVALID_INPUT",
  "messageParameters" : {
    "fmt" : "'BASE64'",
    "str" : "'ab==f'",
    "suggestion" : "`try_to_binary`",
    "targetType" : "\"BINARY\""
  }
}


-- !query
select to_binary(
  '∮ E⋅da = Q,  n → ∞, ∑ f(i) = ∏ g(i), ∀x∈ℝ: ⌈x⌉ = −⌊−x⌋, α ∧ ¬β = ¬(¬α ∨ β)', 'utf-8')
-- !query schema
struct<to_binary(∮ E⋅da = Q,  n → ∞, ∑ f(i) = ∏ g(i), ∀x∈ℝ: ⌈x⌉ = −⌊−x⌋, α ∧ ¬β = ¬(¬α ∨ β), utf-8):binary>
-- !query output
∮ E⋅da = Q,  n → ∞, ∑ f(i) = ∏ g(i), ∀x∈ℝ: ⌈x⌉ = −⌊−x⌋, α ∧ ¬β = ¬(¬α ∨ β)


-- !query
select to_binary('大千世界', 'utf8')
-- !query schema
struct<to_binary(大千世界, utf8):binary>
-- !query output
大千世界


-- !query
select to_binary('', 'utf-8')
-- !query schema
struct<to_binary(, utf-8):binary>
-- !query output



-- !query
select to_binary('  ', 'utf8')
-- !query schema
struct<to_binary(  , utf8):binary>
-- !query output



-- !query
select to_binary('737472696E67')
-- !query schema
struct<to_binary(737472696E67):binary>
-- !query output
string


-- !query
select to_binary('737472696E67', 'hex')
-- !query schema
struct<to_binary(737472696E67, hex):binary>
-- !query output
string


-- !query
select to_binary('')
-- !query schema
struct<to_binary():binary>
-- !query output



-- !query
select to_binary('1', 'hex')
-- !query schema
struct<to_binary(1, hex):binary>
-- !query output



-- !query
select to_binary('FF')
-- !query schema
struct<to_binary(FF):binary>
-- !query output
�


-- !query
select to_binary('123', 'hex')
-- !query schema
struct<to_binary(123, hex):binary>
-- !query output
#


-- !query
select to_binary('12345', 'hex')
-- !query schema
struct<to_binary(12345, hex):binary>
-- !query output
#E


-- !query
select to_binary('GG')
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkIllegalArgumentException
{
  "errorClass" : "CONVERSION_INVALID_INPUT",
  "messageParameters" : {
    "fmt" : "'HEX'",
    "str" : "'GG'",
    "suggestion" : "`try_to_binary`",
    "targetType" : "\"BINARY\""
  }
}


-- !query
select to_binary('01 AF', 'hex')
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkIllegalArgumentException
{
  "errorClass" : "CONVERSION_INVALID_INPUT",
  "messageParameters" : {
    "fmt" : "'HEX'",
    "str" : "'01 AF'",
    "suggestion" : "`try_to_binary`",
    "targetType" : "\"BINARY\""
  }
}


-- !query
select to_binary('abc', concat('utf', '-8'))
-- !query schema
struct<to_binary(abc, concat(utf, -8)):binary>
-- !query output
abc


-- !query
select to_binary(' ab cdef= = ', substr('base64whynot', 0, 6))
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkIllegalArgumentException
{
  "errorClass" : "CONVERSION_INVALID_INPUT",
  "messageParameters" : {
    "fmt" : "'BASE64'",
    "str" : "' ab cdef= = '",
    "suggestion" : "`try_to_binary`",
    "targetType" : "\"BINARY\""
  }
}


-- !query
select to_binary(' ab cdef= = ', replace('HEX0', '0'))
-- !query schema
struct<>
-- !query output
org.apache.spark.SparkIllegalArgumentException
{
  "errorClass" : "CONVERSION_INVALID_INPUT",
  "messageParameters" : {
    "fmt" : "'HEX'",
    "str" : "' ab cdef= = '",
    "suggestion" : "`try_to_binary`",
    "targetType" : "\"BINARY\""
  }
}


-- !query
select to_binary('abc', 'Hex')
-- !query schema
struct<to_binary(abc, Hex):binary>
-- !query output

�


-- !query
select to_binary('abc', null)
-- !query schema
struct<to_binary(abc, NULL):binary>
-- !query output
NULL


-- !query
select to_binary(null, 'utf-8')
-- !query schema
struct<to_binary(NULL, utf-8):binary>
-- !query output
NULL


-- !query
select to_binary(null, null)
-- !query schema
struct<to_binary(NULL, NULL):binary>
-- !query output
NULL


-- !query
select to_binary(null, cast(null as string))
-- !query schema
struct<to_binary(NULL, CAST(NULL AS STRING)):binary>
-- !query output
NULL


-- !query
select to_binary('abc', 1)
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
The 'format' parameter of function 'to_binary' needs to be a string literal.; line 1 pos 7


-- !query
select to_binary('abc', 'invalidFormat')
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.AnalysisException
{
  "errorClass" : "_LEGACY_ERROR_TEMP_1101",
  "messageParameters" : {
    "argName" : "format",
    "endingMsg" : " The value has to be a case-insensitive string literal of 'hex', 'utf-8', 'utf8', or 'base64'.",
    "funcName" : "to_binary",
    "invalidValue" : "invalidformat"
  }
}
