-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE OR REPLACE TEMPORARY VIEW basic_pays AS SELECT * FROM VALUES
('Diane Murphy','Accounting',8435),
('Mary Patterson','Accounting',9998),
('Jeff Firrelli','Accounting',8992),
('William Patterson','Accounting',8870),
('Gerard Bondur','Accounting',11472),
('Anthony Bow','Accounting',6627),
('Leslie Jennings','IT',8113),
('Leslie Thompson','IT',5186),
('Julie Firrelli','Sales',9181),
('Steve Patterson','Sales',9441),
('Foon Yue Tseng','Sales',6660),
('George Vanauf','Sales',10563),
('Loui Bondur','SCM',10449),
('Gerard Hernandez','SCM',6949),
('Pamela Castillo','SCM',11303),
('Larry Bott','SCM',11798),
('Barry Jones','SCM',10586)
AS basic_pays(employee_name, department, salary)
-- !query schema
struct<>
-- !query output



-- !query
SELECT
  mode() WITHIN GROUP (ORDER BY col),
  mode() WITHIN GROUP (ORDER BY col DESC)
FROM VALUES (null), (null), (null) AS tab(col)
-- !query schema
struct<mode() WITHIN GROUP (ORDER BY col):void,mode() WITHIN GROUP (ORDER BY col DESC):void>
-- !query output
NULL	NULL


-- !query
SELECT
  mode() WITHIN GROUP (ORDER BY salary),
  mode() WITHIN GROUP (ORDER BY salary DESC)
FROM basic_pays
WHERE salary > 20000
-- !query schema
struct<mode() WITHIN GROUP (ORDER BY salary):int,mode() WITHIN GROUP (ORDER BY salary DESC):int>
-- !query output
NULL	NULL


-- !query
SELECT
  mode() WITHIN GROUP (ORDER BY salary),
  mode() WITHIN GROUP (ORDER BY salary DESC)
FROM basic_pays
-- !query schema
struct<mode() WITHIN GROUP (ORDER BY salary):int,mode() WITHIN GROUP (ORDER BY salary DESC):int>
-- !query output
11798	5186


-- !query
SELECT
  mode() WITHIN GROUP (ORDER BY salary),
  mode() WITHIN GROUP (ORDER BY salary) FILTER (WHERE salary > 10000)
FROM basic_pays
-- !query schema
struct<mode() WITHIN GROUP (ORDER BY salary):int,mode() WITHIN GROUP (ORDER BY salary) FILTER (WHERE (salary > 10000)):int>
-- !query output
11798	11798


-- !query
SELECT
  department,
  mode() WITHIN GROUP (ORDER BY salary),
  mode() WITHIN GROUP (ORDER BY salary) FILTER (WHERE salary > 10000)
FROM basic_pays
GROUP BY department
ORDER BY department
-- !query schema
struct<department:string,mode() WITHIN GROUP (ORDER BY salary):int,mode() WITHIN GROUP (ORDER BY salary) FILTER (WHERE (salary > 10000)):int>
-- !query output
Accounting	11472	11472
IT	8113	NULL
SCM	11798	11798
Sales	10563	10563


-- !query
SELECT
    employee_name,
    department,
    salary,
    mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department)
FROM basic_pays
ORDER BY salary
-- !query schema
struct<employee_name:string,department:string,salary:int,mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING):int>
-- !query output
Leslie Thompson	IT	5186	8113
Anthony Bow	Accounting	6627	11472
Foon Yue Tseng	Sales	6660	10563
Gerard Hernandez	SCM	6949	11798
Leslie Jennings	IT	8113	8113
Diane Murphy	Accounting	8435	11472
William Patterson	Accounting	8870	11472
Jeff Firrelli	Accounting	8992	11472
Julie Firrelli	Sales	9181	10563
Steve Patterson	Sales	9441	10563
Mary Patterson	Accounting	9998	11472
Loui Bondur	SCM	10449	11798
George Vanauf	Sales	10563	10563
Barry Jones	SCM	10586	11798
Pamela Castillo	SCM	11303	11798
Gerard Bondur	Accounting	11472	11472
Larry Bott	SCM	11798	11798


-- !query
SELECT
    employee_name,
    department,
    salary,
    mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ORDER BY salary)
FROM basic_pays
ORDER BY salary
-- !query schema
struct<employee_name:string,department:string,salary:int,mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ORDER BY salary ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):int>
-- !query output
Leslie Thompson	IT	5186	5186
Anthony Bow	Accounting	6627	6627
Foon Yue Tseng	Sales	6660	6660
Gerard Hernandez	SCM	6949	6949
Leslie Jennings	IT	8113	8113
Diane Murphy	Accounting	8435	8435
William Patterson	Accounting	8870	8870
Jeff Firrelli	Accounting	8992	8992
Julie Firrelli	Sales	9181	9181
Steve Patterson	Sales	9441	9441
Mary Patterson	Accounting	9998	9998
Loui Bondur	SCM	10449	10449
George Vanauf	Sales	10563	10563
Barry Jones	SCM	10586	10586
Pamela Castillo	SCM	11303	11303
Gerard Bondur	Accounting	11472	11472
Larry Bott	SCM	11798	11798


-- !query
SELECT
    employee_name,
    department,
    salary,
    mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING)
FROM basic_pays
ORDER BY salary
-- !query schema
struct<employee_name:string,department:string,salary:int,mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING):int>
-- !query output
Leslie Thompson	IT	5186	8113
Anthony Bow	Accounting	6627	11472
Foon Yue Tseng	Sales	6660	10563
Gerard Hernandez	SCM	6949	11303
Leslie Jennings	IT	8113	8113
Diane Murphy	Accounting	8435	9998
William Patterson	Accounting	8870	11472
Jeff Firrelli	Accounting	8992	9998
Julie Firrelli	Sales	9181	9441
Steve Patterson	Sales	9441	9441
Mary Patterson	Accounting	9998	9998
Loui Bondur	SCM	10449	10449
George Vanauf	Sales	10563	10563
Barry Jones	SCM	10586	11798
Pamela Castillo	SCM	11303	11798
Gerard Bondur	Accounting	11472	11472
Larry Bott	SCM	11798	11798


-- !query
SELECT
    employee_name,
    department,
    salary,
    mode() WITHIN GROUP (ORDER BY salary) OVER w
FROM basic_pays
WHERE salary > 8900
WINDOW w AS (PARTITION BY department)
ORDER BY salary
-- !query schema
struct<employee_name:string,department:string,salary:int,mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING):int>
-- !query output
Jeff Firrelli	Accounting	8992	11472
Julie Firrelli	Sales	9181	10563
Steve Patterson	Sales	9441	10563
Mary Patterson	Accounting	9998	11472
Loui Bondur	SCM	10449	11798
George Vanauf	Sales	10563	10563
Barry Jones	SCM	10586	11798
Pamela Castillo	SCM	11303	11798
Gerard Bondur	Accounting	11472	11472
Larry Bott	SCM	11798	11798


-- !query
CREATE OR REPLACE TEMPORARY VIEW intervals AS SELECT * FROM VALUES
(0, INTERVAL '0' MONTH, INTERVAL '0' SECOND, INTERVAL '0' MINUTE),
(0, INTERVAL '10' MONTH, INTERVAL '10' SECOND, INTERVAL '10' MINUTE),
(0, INTERVAL '20' MONTH, INTERVAL '20' SECOND, INTERVAL '20' MINUTE),
(0, INTERVAL '30' MONTH, INTERVAL '30' SECOND, INTERVAL '30' MINUTE),
(0, INTERVAL '40' MONTH, INTERVAL '40' SECOND, INTERVAL '40' MINUTE),
(1, INTERVAL '10' MONTH, INTERVAL '10' SECOND, INTERVAL '10' MINUTE),
(1, INTERVAL '20' MONTH, INTERVAL '20' SECOND, INTERVAL '20' MINUTE),
(2, INTERVAL '10' MONTH, INTERVAL '10' SECOND, INTERVAL '10' MINUTE),
(2, INTERVAL '20' MONTH, INTERVAL '20' SECOND, INTERVAL '20' MINUTE),
(2, INTERVAL '25' MONTH, INTERVAL '25' SECOND, INTERVAL '25' MINUTE),
(2, INTERVAL '30' MONTH, INTERVAL '30' SECOND, INTERVAL '30' MINUTE),
(3, INTERVAL '60' MONTH, INTERVAL '60' SECOND, INTERVAL '60' MINUTE),
(4, null, null, null)
AS intervals(k, dt, ym, dt2)
-- !query schema
struct<>
-- !query output



-- !query
SELECT
  mode() WITHIN GROUP (ORDER BY dt),
  mode() WITHIN GROUP (ORDER BY dt DESC)
FROM intervals
-- !query schema
struct<mode() WITHIN GROUP (ORDER BY dt):interval month,mode() WITHIN GROUP (ORDER BY dt DESC):interval month>
-- !query output
1-8	0-10


-- !query
SELECT
  k,
  mode() WITHIN GROUP (ORDER BY ym),
  mode() WITHIN GROUP (ORDER BY dt DESC)
FROM intervals
GROUP BY k
ORDER BY k
-- !query schema
struct<k:int,mode() WITHIN GROUP (ORDER BY ym):interval second,mode() WITHIN GROUP (ORDER BY dt DESC):interval month>
-- !query output
0	0 00:00:40.000000000	0-0
1	0 00:00:20.000000000	0-10
2	0 00:00:30.000000000	0-10
3	0 00:01:00.000000000	5-0
4	NULL	NULL
