-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE OR REPLACE TEMPORARY VIEW aggr AS SELECT * FROM VALUES
(0, 0), (0, 10), (0, 20), (0, 30), (0, 40), (1, 10), (1, 20), (2, 10), (2, 20), (2, 25), (2, 30), (3, 60), (4, null)
AS aggr(k, v)
-- !query schema
struct<>
-- !query output



-- !query
CREATE OR REPLACE TEMPORARY VIEW basic_pays AS SELECT * FROM VALUES
('Diane Murphy','Accounting',8435),
('Mary Patterson','Accounting',9998),
('Jeff Firrelli','Accounting',8992),
('William Patterson','Accounting',8870),
('Gerard Bondur','Accounting',11472),
('Anthony Bow','Accounting',6627),
('Leslie Jennings','IT',8113),
('Leslie Thompson','IT',5186),
('Julie Firrelli','Sales',9181),
('Steve Patterson','Sales',9441),
('Foon Yue Tseng','Sales',6660),
('George Vanauf','Sales',10563),
('Loui Bondur','SCM',10449),
('Gerard Hernandez','SCM',6949),
('Pamela Castillo','SCM',11303),
('Larry Bott','SCM',11798),
('Barry Jones','SCM',10586)
AS basic_pays(employee_name, department, salary)
-- !query schema
struct<>
-- !query output



-- !query
SELECT
  mode() WITHIN GROUP (ORDER BY v DESC)
FROM aggr
-- !query schema
struct<>
-- !query output
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "UNSUPPORTED_FEATURE.MODE_WITH_DESC",
  "sqlState" : "0A000",
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 10,
    "stopIndex" : 46,
    "fragment" : "mode() WITHIN GROUP (ORDER BY v DESC)"
  } ]
}


-- !query
SELECT
  mode() WITHIN GROUP (ORDER BY v),
  mode() WITHIN GROUP (ORDER BY v) FILTER (WHERE k > 0)
FROM aggr
-- !query schema
struct<mode() WITHIN GROUP (ORDER BY v):int,mode() WITHIN GROUP (ORDER BY v) FILTER (WHERE (k > 0)):int>
-- !query output
10	10


-- !query
SELECT
  k,
  mode() WITHIN GROUP (ORDER BY v),
  mode() WITHIN GROUP (ORDER BY v) FILTER (WHERE k > 0)
FROM aggr
GROUP BY k
ORDER BY k
-- !query schema
struct<k:int,mode() WITHIN GROUP (ORDER BY v):int,mode() WITHIN GROUP (ORDER BY v) FILTER (WHERE (k > 0)):int>
-- !query output
0	0	NULL
1	10	10
2	10	10
3	60	60
4	NULL	NULL


-- !query
SELECT
    employee_name,
    department,
    salary,
    mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department)
FROM basic_pays
ORDER BY salary
-- !query schema
struct<employee_name:string,department:string,salary:int,mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING):int>
-- !query output
Leslie Thompson	IT	5186	5186
Anthony Bow	Accounting	6627	6627
Foon Yue Tseng	Sales	6660	6660
Gerard Hernandez	SCM	6949	6949
Leslie Jennings	IT	8113	5186
Diane Murphy	Accounting	8435	6627
William Patterson	Accounting	8870	6627
Jeff Firrelli	Accounting	8992	6627
Julie Firrelli	Sales	9181	6660
Steve Patterson	Sales	9441	6660
Mary Patterson	Accounting	9998	6627
Loui Bondur	SCM	10449	6949
George Vanauf	Sales	10563	6660
Barry Jones	SCM	10586	6949
Pamela Castillo	SCM	11303	6949
Gerard Bondur	Accounting	11472	6627
Larry Bott	SCM	11798	6949


-- !query
SELECT
    employee_name,
    department,
    salary,
    mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ORDER BY salary)
FROM basic_pays
ORDER BY salary
-- !query schema
struct<employee_name:string,department:string,salary:int,mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ORDER BY salary ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW):int>
-- !query output
Leslie Thompson	IT	5186	5186
Anthony Bow	Accounting	6627	6627
Foon Yue Tseng	Sales	6660	6660
Gerard Hernandez	SCM	6949	6949
Leslie Jennings	IT	8113	5186
Diane Murphy	Accounting	8435	6627
William Patterson	Accounting	8870	6627
Jeff Firrelli	Accounting	8992	6627
Julie Firrelli	Sales	9181	6660
Steve Patterson	Sales	9441	6660
Mary Patterson	Accounting	9998	6627
Loui Bondur	SCM	10449	6949
George Vanauf	Sales	10563	6660
Barry Jones	SCM	10586	6949
Pamela Castillo	SCM	11303	6949
Gerard Bondur	Accounting	11472	6627
Larry Bott	SCM	11798	6949


-- !query
SELECT
    employee_name,
    department,
    salary,
    mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING)
FROM basic_pays
ORDER BY salary
-- !query schema
struct<employee_name:string,department:string,salary:int,mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING):int>
-- !query output
Leslie Thompson	IT	5186	5186
Anthony Bow	Accounting	6627	6627
Foon Yue Tseng	Sales	6660	6660
Gerard Hernandez	SCM	6949	6949
Leslie Jennings	IT	8113	5186
Diane Murphy	Accounting	8435	8435
William Patterson	Accounting	8870	8435
Jeff Firrelli	Accounting	8992	8435
Julie Firrelli	Sales	9181	9181
Steve Patterson	Sales	9441	6660
Mary Patterson	Accounting	9998	8435
Loui Bondur	SCM	10449	6949
George Vanauf	Sales	10563	6660
Barry Jones	SCM	10586	6949
Pamela Castillo	SCM	11303	6949
Gerard Bondur	Accounting	11472	6627
Larry Bott	SCM	11798	6949


-- !query
SELECT
    employee_name,
    department,
    salary,
    median(salary) OVER w,
    mode() WITHIN GROUP (ORDER BY salary) OVER w
FROM basic_pays
WHERE salary > 8900
WINDOW w AS (PARTITION BY department)
ORDER BY salary
-- !query schema
struct<employee_name:string,department:string,salary:int,median(salary) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING):double,mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING):int>
-- !query output
Jeff Firrelli	Accounting	8992	9998.0	8992
Julie Firrelli	Sales	9181	9441.0	9181
Steve Patterson	Sales	9441	9441.0	9181
Mary Patterson	Accounting	9998	9998.0	8992
Loui Bondur	SCM	10449	10944.5	10449
George Vanauf	Sales	10563	9441.0	9181
Barry Jones	SCM	10586	10944.5	10449
Pamela Castillo	SCM	11303	10944.5	10449
Gerard Bondur	Accounting	11472	9998.0	8992
Larry Bott	SCM	11798	10944.5	10449


-- !query
CREATE OR REPLACE TEMPORARY VIEW intervals AS SELECT * FROM VALUES
(0, INTERVAL '0' MONTH, INTERVAL '0' SECOND, INTERVAL '0' MINUTE),
(0, INTERVAL '10' MONTH, INTERVAL '10' SECOND, INTERVAL '10' MINUTE),
(0, INTERVAL '20' MONTH, INTERVAL '20' SECOND, INTERVAL '20' MINUTE),
(0, INTERVAL '30' MONTH, INTERVAL '30' SECOND, INTERVAL '30' MINUTE),
(0, INTERVAL '40' MONTH, INTERVAL '40' SECOND, INTERVAL '40' MINUTE),
(1, INTERVAL '10' MONTH, INTERVAL '10' SECOND, INTERVAL '10' MINUTE),
(1, INTERVAL '20' MONTH, INTERVAL '20' SECOND, INTERVAL '20' MINUTE),
(2, INTERVAL '10' MONTH, INTERVAL '10' SECOND, INTERVAL '10' MINUTE),
(2, INTERVAL '20' MONTH, INTERVAL '20' SECOND, INTERVAL '20' MINUTE),
(2, INTERVAL '25' MONTH, INTERVAL '25' SECOND, INTERVAL '25' MINUTE),
(2, INTERVAL '30' MONTH, INTERVAL '30' SECOND, INTERVAL '30' MINUTE),
(3, INTERVAL '60' MONTH, INTERVAL '60' SECOND, INTERVAL '60' MINUTE),
(4, null, null, null)
AS intervals(k, dt, ym, dt2)
-- !query schema
struct<>
-- !query output



-- !query
SELECT
  mode() WITHIN GROUP (ORDER BY dt)
FROM intervals
-- !query schema
struct<mode() WITHIN GROUP (ORDER BY dt):interval month>
-- !query output
0-10


-- !query
SELECT
  k,
  mode() WITHIN GROUP (ORDER BY ym)
FROM intervals
GROUP BY k
ORDER BY k
-- !query schema
struct<k:int,mode() WITHIN GROUP (ORDER BY ym):interval second>
-- !query output
0	0 00:00:00.000000000
1	0 00:00:10.000000000
2	0 00:00:10.000000000
3	0 00:01:00.000000000
4	NULL
