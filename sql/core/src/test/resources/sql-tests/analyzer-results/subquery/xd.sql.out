-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE TEMPORARY VIEW inner_view(a, b) AS VALUES
    (1, 1),
    (2, 2),
    (3, 3),
    (4, 4),
    (5, 5),
    (8, 8),
    (9, 9)
-- !query analysis
CreateViewCommand `inner_view`, [(a,None), (b,None)], VALUES
    (1, 1),
    (2, 2),
    (3, 3),
    (4, 4),
    (5, 5),
    (8, 8),
    (9, 9), false, false, LocalTempView, true
   +- LocalRelation [col1#x, col2#x]


-- !query
CREATE TEMPORARY VIEW outer_view(a, b) AS VALUES
    (1, 1),
    (2, 1),
    (3, 3),
    (6, 6),
    (7, 7),
    (9, 9)
-- !query analysis
CreateViewCommand `outer_view`, [(a,None), (b,None)], VALUES
    (1, 1),
    (2, 1),
    (3, 3),
    (6, 6),
    (7, 7),
    (9, 9), false, false, LocalTempView, true
   +- LocalRelation [col1#x, col2#x]


-- !query
CREATE TEMPORARY VIEW no_match_view(a, b) AS VALUES
    (1000, 1000)
-- !query analysis
CreateViewCommand `no_match_view`, [(a,None), (b,None)], VALUES
    (1000, 1000), false, false, LocalTempView, true
   +- LocalRelation [col1#x, col2#x]


-- !query
CREATE TEMPORARY VIEW join_view(a, b) AS VALUES
    (1, 1),
    (2, 1),
    (3, 3),
    (7, 8),
    (5, 6)
-- !query analysis
CreateViewCommand `join_view`, [(a,None), (b,None)], VALUES
    (1, 1),
    (2, 1),
    (3, 3),
    (7, 8),
    (5, 6), false, false, LocalTempView, true
   +- LocalRelation [col1#x, col2#x]


-- !query
CREATE TEMPORARY VIEW null_view(a, b) AS SELECT CAST(null AS int), CAST(null as int)
-- !query analysis
CreateViewCommand `null_view`, [(a,None), (b,None)], SELECT CAST(null AS int), CAST(null as int), false, false, LocalTempView, true
   +- Project [cast(null as int) AS CAST(NULL AS INT)#x, cast(null as int) AS CAST(NULL AS INT)#x]
      +- OneRowRelation


-- !query
SELECT
  (
    SELECT
      COUNT(null_view.a) AS aggFunctionAlias
    FROM
      null_view
    WHERE
      null_view.a = no_match_view.a
  )
FROM
  no_match_view
-- !query analysis
Project [scalar-subquery#x [a#x] AS scalarsubquery(a)#xL]
:  +- Aggregate [count(a#x) AS aggFunctionAlias#xL]
:     +- Filter (a#x = outer(a#x))
:        +- SubqueryAlias null_view
:           +- View (`null_view`, [a#x, b#x])
:              +- Project [cast(CAST(NULL AS INT)#x as int) AS a#x, cast(CAST(NULL AS INT)#x as int) AS b#x]
:                 +- Project [cast(null as int) AS CAST(NULL AS INT)#x, cast(null as int) AS CAST(NULL AS INT)#x]
:                    +- OneRowRelation
+- SubqueryAlias no_match_view
   +- View (`no_match_view`, [a#x, b#x])
      +- Project [cast(col1#x as int) AS a#x, cast(col2#x as int) AS b#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
SELECT
  outer_view.a,
  outer_view.b,
  (
    SELECT
      COUNT(innerSubqueryAlias.a) AS aggFunctionAlias
    FROM
      (
        SELECT
          null_view.a,
          null_view.b
        FROM
          null_view
        INTERSECT
        SELECT
          join_view.a,
          join_view.b
        FROM
          join_view
      ) AS innerSubqueryAlias
    WHERE
      innerSubqueryAlias.a = outer_view.a
  ) AS subqueryAlias
FROM
  outer_view
ORDER BY
  a DESC NULLS FIRST,
  b DESC NULLS FIRST,
  subqueryAlias DESC NULLS FIRST
-- !query analysis
Sort [a#x DESC NULLS FIRST, b#x DESC NULLS FIRST, subqueryAlias#xL DESC NULLS FIRST], true
+- Project [a#x, b#x, scalar-subquery#x [a#x] AS subqueryAlias#xL]
   :  +- Aggregate [count(a#x) AS aggFunctionAlias#xL]
   :     +- Filter (a#x = outer(a#x))
   :        +- SubqueryAlias innerSubqueryAlias
   :           +- Intersect false
   :              :- Project [a#x, b#x]
   :              :  +- SubqueryAlias null_view
   :              :     +- View (`null_view`, [a#x, b#x])
   :              :        +- Project [cast(CAST(NULL AS INT)#x as int) AS a#x, cast(CAST(NULL AS INT)#x as int) AS b#x]
   :              :           +- Project [cast(null as int) AS CAST(NULL AS INT)#x, cast(null as int) AS CAST(NULL AS INT)#x]
   :              :              +- OneRowRelation
   :              +- Project [a#x, b#x]
   :                 +- SubqueryAlias join_view
   :                    +- View (`join_view`, [a#x, b#x])
   :                       +- Project [cast(col1#x as int) AS a#x, cast(col2#x as int) AS b#x]
   :                          +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias outer_view
      +- View (`outer_view`, [a#x, b#x])
         +- Project [cast(col1#x as int) AS a#x, cast(col2#x as int) AS b#x]
            +- LocalRelation [col1#x, col2#x]
