-- Automatically generated by SQLQueryTestSuite
-- !query
create temp view l (a, b)
as values
    (1, 2.0),
    (1, 2.0),
    (2, 1.0),
    (2, 1.0),
    (3, 3.0),
    (null, null),
    (null, 5.0),
    (6, null)
-- !query analysis
CreateViewCommand `l`, [(a,None), (b,None)], values
    (1, 2.0),
    (1, 2.0),
    (2, 1.0),
    (2, 1.0),
    (3, 3.0),
    (null, null),
    (null, 5.0),
    (6, null), false, false, LocalTempView, true
   +- LocalRelation [col1#x, col2#x]


-- !query
create temp view r (c, d)
as values
    (2, 3.0),
    (2, 3.0),
    (3, 2.0),
    (4, 1.0),
    (null, null),
    (null, 5.0),
    (6, null)
-- !query analysis
CreateViewCommand `r`, [(c,None), (d,None)], values
    (2, 3.0),
    (2, 3.0),
    (3, 2.0),
    (4, 1.0),
    (null, null),
    (null, 5.0),
    (6, null), false, false, LocalTempView, true
   +- LocalRelation [col1#x, col2#x]


-- !query
select *, (select count(*) from r where l.a = r.c) from l
-- !query analysis
Project [a#x, b#x, scalar-subquery#x [a#x] AS scalarsubquery(a)#xL]
:  +- Aggregate [count(1) AS count(1)#xL]
:     +- Filter (outer(a#x) = c#x)
:        +- SubqueryAlias r
:           +- View (`r`, [c#x,d#x])
:              +- Project [cast(col1#x as int) AS c#x, cast(col2#x as decimal(2,1)) AS d#x]
:                 +- LocalRelation [col1#x, col2#x]
+- SubqueryAlias l
   +- View (`l`, [a#x,b#x])
      +- Project [cast(col1#x as int) AS a#x, cast(col2#x as decimal(2,1)) AS b#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
select *, (select count(*) from r where l.a = r.c group by c) from l
-- !query analysis
Project [a#x, b#x, scalar-subquery#x [a#x] AS scalarsubquery(a)#xL]
:  +- Aggregate [c#x], [count(1) AS count(1)#xL]
:     +- Filter (outer(a#x) = c#x)
:        +- SubqueryAlias r
:           +- View (`r`, [c#x,d#x])
:              +- Project [cast(col1#x as int) AS c#x, cast(col2#x as decimal(2,1)) AS d#x]
:                 +- LocalRelation [col1#x, col2#x]
+- SubqueryAlias l
   +- View (`l`, [a#x,b#x])
      +- Project [cast(col1#x as int) AS a#x, cast(col2#x as decimal(2,1)) AS b#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
select *, (select count(*) from r where l.a = r.c group by 'constant') from l
-- !query analysis
Project [a#x, b#x, scalar-subquery#x [a#x] AS scalarsubquery(a)#xL]
:  +- Aggregate [constant], [count(1) AS count(1)#xL]
:     +- Filter (outer(a#x) = c#x)
:        +- SubqueryAlias r
:           +- View (`r`, [c#x,d#x])
:              +- Project [cast(col1#x as int) AS c#x, cast(col2#x as decimal(2,1)) AS d#x]
:                 +- LocalRelation [col1#x, col2#x]
+- SubqueryAlias l
   +- View (`l`, [a#x,b#x])
      +- Project [cast(col1#x as int) AS a#x, cast(col2#x as decimal(2,1)) AS b#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
select *, (
  select (count(*)) is null
  from r
  where l.a = r.c)
from l
-- !query analysis
Project [a#x, b#x, scalar-subquery#x [a#x] AS scalarsubquery(a)#x]
:  +- Aggregate [isnull(count(1)) AS (count(1) IS NULL)#x]
:     +- Filter (outer(a#x) = c#x)
:        +- SubqueryAlias r
:           +- View (`r`, [c#x,d#x])
:              +- Project [cast(col1#x as int) AS c#x, cast(col2#x as decimal(2,1)) AS d#x]
:                 +- LocalRelation [col1#x, col2#x]
+- SubqueryAlias l
   +- View (`l`, [a#x,b#x])
      +- Project [cast(col1#x as int) AS a#x, cast(col2#x as decimal(2,1)) AS b#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
select *, (
  select (count(*)) is null
  from r
  where l.a = r.c
  group by r.c)
from l
-- !query analysis
Project [a#x, b#x, scalar-subquery#x [a#x] AS scalarsubquery(a)#x]
:  +- Aggregate [c#x], [isnull(count(1)) AS (count(1) IS NULL)#x]
:     +- Filter (outer(a#x) = c#x)
:        +- SubqueryAlias r
:           +- View (`r`, [c#x,d#x])
:              +- Project [cast(col1#x as int) AS c#x, cast(col2#x as decimal(2,1)) AS d#x]
:                 +- LocalRelation [col1#x, col2#x]
+- SubqueryAlias l
   +- View (`l`, [a#x,b#x])
      +- Project [cast(col1#x as int) AS a#x, cast(col2#x as decimal(2,1)) AS b#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
select *, (select count(*) from r where l.a = r.c having count(*) <= 1) from l
-- !query analysis
Project [a#x, b#x, scalar-subquery#x [a#x] AS scalarsubquery(a)#xL]
:  +- Filter (count(1)#xL <= cast(1 as bigint))
:     +- Aggregate [count(1) AS count(1)#xL]
:        +- Filter (outer(a#x) = c#x)
:           +- SubqueryAlias r
:              +- View (`r`, [c#x,d#x])
:                 +- Project [cast(col1#x as int) AS c#x, cast(col2#x as decimal(2,1)) AS d#x]
:                    +- LocalRelation [col1#x, col2#x]
+- SubqueryAlias l
   +- View (`l`, [a#x,b#x])
      +- Project [cast(col1#x as int) AS a#x, cast(col2#x as decimal(2,1)) AS b#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
select *, (select count(*) from r where l.a = r.c having count(*) >= 2) from l
-- !query analysis
Project [a#x, b#x, scalar-subquery#x [a#x] AS scalarsubquery(a)#xL]
:  +- Filter (count(1)#xL >= cast(2 as bigint))
:     +- Aggregate [count(1) AS count(1)#xL]
:        +- Filter (outer(a#x) = c#x)
:           +- SubqueryAlias r
:              +- View (`r`, [c#x,d#x])
:                 +- Project [cast(col1#x as int) AS c#x, cast(col2#x as decimal(2,1)) AS d#x]
:                    +- LocalRelation [col1#x, col2#x]
+- SubqueryAlias l
   +- View (`l`, [a#x,b#x])
      +- Project [cast(col1#x as int) AS a#x, cast(col2#x as decimal(2,1)) AS b#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
set spark.sql.optimizer.decorrelateSubqueryLegacyIncorrectCountHandling.enabled = true
-- !query analysis
SetCommand (spark.sql.optimizer.decorrelateSubqueryLegacyIncorrectCountHandling.enabled,Some(true))


-- !query
select *, (select count(*) from r where l.a = r.c) from l
-- !query analysis
Project [a#x, b#x, scalar-subquery#x [a#x] AS scalarsubquery(a)#xL]
:  +- Aggregate [count(1) AS count(1)#xL]
:     +- Filter (outer(a#x) = c#x)
:        +- SubqueryAlias r
:           +- View (`r`, [c#x,d#x])
:              +- Project [cast(col1#x as int) AS c#x, cast(col2#x as decimal(2,1)) AS d#x]
:                 +- LocalRelation [col1#x, col2#x]
+- SubqueryAlias l
   +- View (`l`, [a#x,b#x])
      +- Project [cast(col1#x as int) AS a#x, cast(col2#x as decimal(2,1)) AS b#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
select *, (select count(*) from r where l.a = r.c group by c) from l
-- !query analysis
Project [a#x, b#x, scalar-subquery#x [a#x] AS scalarsubquery(a)#xL]
:  +- Aggregate [c#x], [count(1) AS count(1)#xL]
:     +- Filter (outer(a#x) = c#x)
:        +- SubqueryAlias r
:           +- View (`r`, [c#x,d#x])
:              +- Project [cast(col1#x as int) AS c#x, cast(col2#x as decimal(2,1)) AS d#x]
:                 +- LocalRelation [col1#x, col2#x]
+- SubqueryAlias l
   +- View (`l`, [a#x,b#x])
      +- Project [cast(col1#x as int) AS a#x, cast(col2#x as decimal(2,1)) AS b#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
select *, (select count(*) from r where l.a = r.c group by 'constant') from l
-- !query analysis
Project [a#x, b#x, scalar-subquery#x [a#x] AS scalarsubquery(a)#xL]
:  +- Aggregate [constant], [count(1) AS count(1)#xL]
:     +- Filter (outer(a#x) = c#x)
:        +- SubqueryAlias r
:           +- View (`r`, [c#x,d#x])
:              +- Project [cast(col1#x as int) AS c#x, cast(col2#x as decimal(2,1)) AS d#x]
:                 +- LocalRelation [col1#x, col2#x]
+- SubqueryAlias l
   +- View (`l`, [a#x,b#x])
      +- Project [cast(col1#x as int) AS a#x, cast(col2#x as decimal(2,1)) AS b#x]
         +- LocalRelation [col1#x, col2#x]


-- !query
reset spark.sql.optimizer.decorrelateSubqueryLegacyIncorrectCountHandling.enabled
-- !query analysis
ResetCommand spark.sql.optimizer.decorrelateSubqueryLegacyIncorrectCountHandling.enabled


-- !query
CREATE OR REPLACE VIEW t1(a1, a2) as values (0, 1), (1, 2)
-- !query analysis
CreateViewCommand `spark_catalog`.`default`.`t1`, [(a1,None), (a2,None)], values (0, 1), (1, 2), false, true, PersistedView, true
   +- LocalRelation [col1#x, col2#x]


-- !query
CREATE OR REPLACE VIEW t2(b1, b2) as values (0, 2), (0, 3)
-- !query analysis
CreateViewCommand `spark_catalog`.`default`.`t2`, [(b1,None), (b2,None)], values (0, 2), (0, 3), false, true, PersistedView, true
   +- LocalRelation [col1#x, col2#x]


-- !query
CREATE OR REPLACE VIEW t3(c1, c2) as values (0, 2), (0, 3)
-- !query analysis
CreateViewCommand `spark_catalog`.`default`.`t3`, [(c1,None), (c2,None)], values (0, 2), (0, 3), false, true, PersistedView, true
   +- LocalRelation [col1#x, col2#x]


-- !query
select ( select sum(cnt) from (select count(*) cnt from t2 where t1.a1 = t2.b1) ) a from t1 order by a desc
-- !query analysis
Sort [a#xL DESC NULLS LAST], true
+- Project [scalar-subquery#x [a1#x] AS a#xL]
   :  +- Aggregate [sum(cnt#xL) AS sum(cnt)#xL]
   :     +- SubqueryAlias __auto_generated_subquery_name
   :        +- Aggregate [count(1) AS cnt#xL]
   :           +- Filter (outer(a1#x) = b1#x)
   :              +- SubqueryAlias spark_catalog.default.t2
   :                 +- View (`spark_catalog`.`default`.`t2`, [b1#x,b2#x])
   :                    +- Project [cast(col1#x as int) AS b1#x, cast(col2#x as int) AS b2#x]
   :                       +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [a1#x,a2#x])
         +- Project [cast(col1#x as int) AS a1#x, cast(col2#x as int) AS a2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
select ( select count(*) from (select count(*) cnt from t2 where t1.a1 = t2.b1) ) a from t1 order by a desc
-- !query analysis
Sort [a#xL DESC NULLS LAST], true
+- Project [scalar-subquery#x [a1#x] AS a#xL]
   :  +- Aggregate [count(1) AS count(1)#xL]
   :     +- SubqueryAlias __auto_generated_subquery_name
   :        +- Aggregate [count(1) AS cnt#xL]
   :           +- Filter (outer(a1#x) = b1#x)
   :              +- SubqueryAlias spark_catalog.default.t2
   :                 +- View (`spark_catalog`.`default`.`t2`, [b1#x,b2#x])
   :                    +- Project [cast(col1#x as int) AS b1#x, cast(col2#x as int) AS b2#x]
   :                       +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [a1#x,a2#x])
         +- Project [cast(col1#x as int) AS a1#x, cast(col2#x as int) AS a2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
select (
  select SUM(l.cnt + r.cnt)
  from (select count(*) cnt from t2 where t1.a1 = t2.b1 having cnt = 0) l
  join (select count(*) cnt from t3 where t1.a1 = t3.c1 having cnt = 0) r
  on l.cnt = r.cnt
) a from t1 order by a desc
-- !query analysis
Sort [a#xL DESC NULLS LAST], true
+- Project [scalar-subquery#x [a1#x && a1#x] AS a#xL]
   :  +- Aggregate [sum((cnt#xL + cnt#xL)) AS sum((cnt + cnt))#xL]
   :     +- Join Inner, (cnt#xL = cnt#xL)
   :        :- SubqueryAlias l
   :        :  +- Filter (cnt#xL = cast(0 as bigint))
   :        :     +- Aggregate [count(1) AS cnt#xL]
   :        :        +- Filter (outer(a1#x) = b1#x)
   :        :           +- SubqueryAlias spark_catalog.default.t2
   :        :              +- View (`spark_catalog`.`default`.`t2`, [b1#x,b2#x])
   :        :                 +- Project [cast(col1#x as int) AS b1#x, cast(col2#x as int) AS b2#x]
   :        :                    +- LocalRelation [col1#x, col2#x]
   :        +- SubqueryAlias r
   :           +- Filter (cnt#xL = cast(0 as bigint))
   :              +- Aggregate [count(1) AS cnt#xL]
   :                 +- Filter (outer(a1#x) = c1#x)
   :                    +- SubqueryAlias spark_catalog.default.t3
   :                       +- View (`spark_catalog`.`default`.`t3`, [c1#x,c2#x])
   :                          +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                             +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [a1#x,a2#x])
         +- Project [cast(col1#x as int) AS a1#x, cast(col2#x as int) AS a2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
select (
  select sum(l.cnt + r.cnt)
  from (select count(*) cnt from t2 where t1.a1 = t2.b1) l
  join (select count(*) cnt from t3 where t1.a1 = t3.c1) r
  on l.cnt = r.cnt
) a from t1 order by a desc
-- !query analysis
Sort [a#xL DESC NULLS LAST], true
+- Project [scalar-subquery#x [a1#x && a1#x] AS a#xL]
   :  +- Aggregate [sum((cnt#xL + cnt#xL)) AS sum((cnt + cnt))#xL]
   :     +- Join Inner, (cnt#xL = cnt#xL)
   :        :- SubqueryAlias l
   :        :  +- Aggregate [count(1) AS cnt#xL]
   :        :     +- Filter (outer(a1#x) = b1#x)
   :        :        +- SubqueryAlias spark_catalog.default.t2
   :        :           +- View (`spark_catalog`.`default`.`t2`, [b1#x,b2#x])
   :        :              +- Project [cast(col1#x as int) AS b1#x, cast(col2#x as int) AS b2#x]
   :        :                 +- LocalRelation [col1#x, col2#x]
   :        +- SubqueryAlias r
   :           +- Aggregate [count(1) AS cnt#xL]
   :              +- Filter (outer(a1#x) = c1#x)
   :                 +- SubqueryAlias spark_catalog.default.t3
   :                    +- View (`spark_catalog`.`default`.`t3`, [c1#x,c2#x])
   :                       +- Project [cast(col1#x as int) AS c1#x, cast(col2#x as int) AS c2#x]
   :                          +- LocalRelation [col1#x, col2#x]
   +- SubqueryAlias spark_catalog.default.t1
      +- View (`spark_catalog`.`default`.`t1`, [a1#x,a2#x])
         +- Project [cast(col1#x as int) AS a1#x, cast(col2#x as int) AS a2#x]
            +- LocalRelation [col1#x, col2#x]


-- !query
DROP VIEW t1
-- !query analysis
DropTableCommand `spark_catalog`.`default`.`t1`, false, true, false


-- !query
DROP VIEW t2
-- !query analysis
DropTableCommand `spark_catalog`.`default`.`t2`, false, true, false


-- !query
DROP VIEW t3
-- !query analysis
DropTableCommand `spark_catalog`.`default`.`t3`, false, true, false
