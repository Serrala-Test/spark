-- Automatically generated by SQLQueryTestSuite
-- !query
create table t0(t0a int not null, t0b int) using parquet
-- !query analysis
CreateDataSourceTableCommand `spark_catalog`.`default`.`t0`, false


-- !query
insert into t0 values (1, 0)
-- !query analysis
InsertIntoHadoopFsRelationCommand file:[not included in comparison]/{warehouse_dir}/t0, false, Parquet, [path=file:[not included in comparison]/{warehouse_dir}/t0], Append, `spark_catalog`.`default`.`t0`, org.apache.spark.sql.execution.datasources.InMemoryFileIndex(file:[not included in comparison]/{warehouse_dir}/t0), [t0a, t0b]
+- Project [cast(col1#x as int) AS t0a#x, cast(col2#x as int) AS t0b#x]
   +- LocalRelation [col1#x, col2#x]


-- !query
create table t1(t1a int, t1b int) using parquet
-- !query analysis
CreateDataSourceTableCommand `spark_catalog`.`default`.`t1`, false


-- !query
insert into t1 values (null, 1)
-- !query analysis
InsertIntoHadoopFsRelationCommand file:[not included in comparison]/{warehouse_dir}/t1, false, Parquet, [path=file:[not included in comparison]/{warehouse_dir}/t1], Append, `spark_catalog`.`default`.`t1`, org.apache.spark.sql.execution.datasources.InMemoryFileIndex(file:[not included in comparison]/{warehouse_dir}/t1), [t1a, t1b]
+- Project [cast(col1#x as int) AS t1a#x, cast(col2#x as int) AS t1b#x]
   +- LocalRelation [col1#x, col2#x]


-- !query
create table t2(t2a int, t2b int) using parquet
-- !query analysis
CreateDataSourceTableCommand `spark_catalog`.`default`.`t2`, false


-- !query
insert into t2 values (2, 2)
-- !query analysis
InsertIntoHadoopFsRelationCommand file:[not included in comparison]/{warehouse_dir}/t2, false, Parquet, [path=file:[not included in comparison]/{warehouse_dir}/t2], Append, `spark_catalog`.`default`.`t2`, org.apache.spark.sql.execution.datasources.InMemoryFileIndex(file:[not included in comparison]/{warehouse_dir}/t2), [t2a, t2b]
+- Project [cast(col1#x as int) AS t2a#x, cast(col2#x as int) AS t2b#x]
   +- LocalRelation [col1#x, col2#x]


-- !query
select * from t0 where t0a in (select t1a from t1)
-- !query analysis
Project [t0a#x, t0b#x]
+- Filter t0a#x IN (list#x [])
   :  +- Project [t1a#x]
   :     +- SubqueryAlias spark_catalog.default.t1
   :        +- Relation spark_catalog.default.t1[t1a#x,t1b#x] parquet
   +- SubqueryAlias spark_catalog.default.t0
      +- Relation spark_catalog.default.t0[t0a#x,t0b#x] parquet


-- !query
select * from t0 where (t0a in (select t1a from t1)) <=> true
-- !query analysis
Project [t0a#x, t0b#x]
+- Filter (t0a#x IN (list#x []) <=> true)
   :  +- Project [t1a#x]
   :     +- SubqueryAlias spark_catalog.default.t1
   :        +- Relation spark_catalog.default.t1[t1a#x,t1b#x] parquet
   +- SubqueryAlias spark_catalog.default.t0
      +- Relation spark_catalog.default.t0[t0a#x,t0b#x] parquet


-- !query
select * from t0 left join t2 on (t0a IN (select t1a from t1)) is null
-- !query analysis
Project [t0a#x, t0b#x, t2a#x, t2b#x]
+- Join LeftOuter, isnull(t0a#x IN (list#x []))
   :  +- Project [t1a#x]
   :     +- SubqueryAlias spark_catalog.default.t1
   :        +- Relation spark_catalog.default.t1[t1a#x,t1b#x] parquet
   :- SubqueryAlias spark_catalog.default.t0
   :  +- Relation spark_catalog.default.t0[t0a#x,t0b#x] parquet
   +- SubqueryAlias spark_catalog.default.t2
      +- Relation spark_catalog.default.t2[t2a#x,t2b#x] parquet


-- !query
select * from t0 left join t2 on (t0a IN (select t1a from t1)) <=> true
-- !query analysis
Project [t0a#x, t0b#x, t2a#x, t2b#x]
+- Join LeftOuter, (t0a#x IN (list#x []) <=> true)
   :  +- Project [t1a#x]
   :     +- SubqueryAlias spark_catalog.default.t1
   :        +- Relation spark_catalog.default.t1[t1a#x,t1b#x] parquet
   :- SubqueryAlias spark_catalog.default.t0
   :  +- Relation spark_catalog.default.t0[t0a#x,t0b#x] parquet
   +- SubqueryAlias spark_catalog.default.t2
      +- Relation spark_catalog.default.t2[t2a#x,t2b#x] parquet
