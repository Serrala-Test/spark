-- Automatically generated by SQLQueryTestSuite
-- !query
CREATE OR REPLACE TEMPORARY VIEW aggr AS SELECT * FROM VALUES
(0, 0), (0, 10), (0, 20), (0, 30), (0, 40), (1, 10), (1, 20), (2, 10), (2, 20), (2, 25), (2, 30), (3, 60), (4, null)
AS aggr(k, v)
-- !query analysis
CreateViewCommand `aggr`, SELECT * FROM VALUES
(0, 0), (0, 10), (0, 20), (0, 30), (0, 40), (1, 10), (1, 20), (2, 10), (2, 20), (2, 25), (2, 30), (3, 60), (4, null)
AS aggr(k, v), false, true, LocalTempView, true
   +- Project [k#x, v#x]
      +- SubqueryAlias aggr
         +- LocalRelation [k#x, v#x]


-- !query
CREATE OR REPLACE TEMPORARY VIEW basic_pays AS SELECT * FROM VALUES
('Diane Murphy','Accounting',8435),
('Mary Patterson','Accounting',9998),
('Jeff Firrelli','Accounting',8992),
('William Patterson','Accounting',8870),
('Gerard Bondur','Accounting',11472),
('Anthony Bow','Accounting',6627),
('Leslie Jennings','IT',8113),
('Leslie Thompson','IT',5186),
('Julie Firrelli','Sales',9181),
('Steve Patterson','Sales',9441),
('Foon Yue Tseng','Sales',6660),
('George Vanauf','Sales',10563),
('Loui Bondur','SCM',10449),
('Gerard Hernandez','SCM',6949),
('Pamela Castillo','SCM',11303),
('Larry Bott','SCM',11798),
('Barry Jones','SCM',10586)
AS basic_pays(employee_name, department, salary)
-- !query analysis
CreateViewCommand `basic_pays`, SELECT * FROM VALUES
('Diane Murphy','Accounting',8435),
('Mary Patterson','Accounting',9998),
('Jeff Firrelli','Accounting',8992),
('William Patterson','Accounting',8870),
('Gerard Bondur','Accounting',11472),
('Anthony Bow','Accounting',6627),
('Leslie Jennings','IT',8113),
('Leslie Thompson','IT',5186),
('Julie Firrelli','Sales',9181),
('Steve Patterson','Sales',9441),
('Foon Yue Tseng','Sales',6660),
('George Vanauf','Sales',10563),
('Loui Bondur','SCM',10449),
('Gerard Hernandez','SCM',6949),
('Pamela Castillo','SCM',11303),
('Larry Bott','SCM',11798),
('Barry Jones','SCM',10586)
AS basic_pays(employee_name, department, salary), false, true, LocalTempView, true
   +- Project [employee_name#x, department#x, salary#x]
      +- SubqueryAlias basic_pays
         +- LocalRelation [employee_name#x, department#x, salary#x]


-- !query
SELECT
  mode() WITHIN GROUP (ORDER BY v DESC)
FROM aggr
-- !query analysis
org.apache.spark.sql.catalyst.parser.ParseException
{
  "errorClass" : "UNSUPPORTED_FEATURE.MODE_WITH_DESC",
  "sqlState" : "0A000",
  "queryContext" : [ {
    "objectType" : "",
    "objectName" : "",
    "startIndex" : 10,
    "stopIndex" : 46,
    "fragment" : "mode() WITHIN GROUP (ORDER BY v DESC)"
  } ]
}


-- !query
SELECT
  mode() WITHIN GROUP (ORDER BY v),
  mode() WITHIN GROUP (ORDER BY v) FILTER (WHERE k > 0)
FROM aggr
-- !query analysis
Aggregate [mode(v#x, 0, 0, true) AS mode() WITHIN GROUP (ORDER BY v)#x, mode(v#x, 0, 0, true) FILTER (WHERE (k#x > 0)) AS mode() WITHIN GROUP (ORDER BY v) FILTER (WHERE (k > 0))#x]
+- SubqueryAlias aggr
   +- View (`aggr`, [k#x,v#x])
      +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
         +- Project [k#x, v#x]
            +- SubqueryAlias aggr
               +- LocalRelation [k#x, v#x]


-- !query
SELECT
  k,
  mode() WITHIN GROUP (ORDER BY v),
  mode() WITHIN GROUP (ORDER BY v) FILTER (WHERE k > 0)
FROM aggr
GROUP BY k
ORDER BY k
-- !query analysis
Sort [k#x ASC NULLS FIRST], true
+- Aggregate [k#x], [k#x, mode(v#x, 0, 0, true) AS mode() WITHIN GROUP (ORDER BY v)#x, mode(v#x, 0, 0, true) FILTER (WHERE (k#x > 0)) AS mode() WITHIN GROUP (ORDER BY v) FILTER (WHERE (k > 0))#x]
   +- SubqueryAlias aggr
      +- View (`aggr`, [k#x,v#x])
         +- Project [cast(k#x as int) AS k#x, cast(v#x as int) AS v#x]
            +- Project [k#x, v#x]
               +- SubqueryAlias aggr
                  +- LocalRelation [k#x, v#x]


-- !query
SELECT
    employee_name,
    department,
    salary,
    mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department)
FROM basic_pays
ORDER BY salary
-- !query analysis
Sort [salary#x ASC NULLS FIRST], true
+- Project [employee_name#x, department#x, salary#x, mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x]
   +- Project [employee_name#x, department#x, salary#x, mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x, mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x]
      +- Window [mode(salary#x, 0, 0, true) windowspecdefinition(department#x, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x], [department#x]
         +- Project [employee_name#x, department#x, salary#x]
            +- SubqueryAlias basic_pays
               +- View (`basic_pays`, [employee_name#x,department#x,salary#x])
                  +- Project [cast(employee_name#x as string) AS employee_name#x, cast(department#x as string) AS department#x, cast(salary#x as int) AS salary#x]
                     +- Project [employee_name#x, department#x, salary#x]
                        +- SubqueryAlias basic_pays
                           +- LocalRelation [employee_name#x, department#x, salary#x]


-- !query
SELECT
    employee_name,
    department,
    salary,
    mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ORDER BY salary)
FROM basic_pays
ORDER BY salary
-- !query analysis
Sort [salary#x ASC NULLS FIRST], true
+- Project [employee_name#x, department#x, salary#x, mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ORDER BY salary ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#x]
   +- Project [employee_name#x, department#x, salary#x, mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ORDER BY salary ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#x, mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ORDER BY salary ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#x]
      +- Window [mode(salary#x, 0, 0, true) windowspecdefinition(department#x, salary#x ASC NULLS FIRST, specifiedwindowframe(RangeFrame, unboundedpreceding$(), currentrow$())) AS mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ORDER BY salary ASC NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)#x], [department#x], [salary#x ASC NULLS FIRST]
         +- Project [employee_name#x, department#x, salary#x]
            +- SubqueryAlias basic_pays
               +- View (`basic_pays`, [employee_name#x,department#x,salary#x])
                  +- Project [cast(employee_name#x as string) AS employee_name#x, cast(department#x as string) AS department#x, cast(salary#x as int) AS salary#x]
                     +- Project [employee_name#x, department#x, salary#x]
                        +- SubqueryAlias basic_pays
                           +- LocalRelation [employee_name#x, department#x, salary#x]


-- !query
SELECT
    employee_name,
    department,
    salary,
    mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING)
FROM basic_pays
ORDER BY salary
-- !query analysis
Sort [salary#x ASC NULLS FIRST], true
+- Project [employee_name#x, department#x, salary#x, mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING)#x]
   +- Project [employee_name#x, department#x, salary#x, mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING)#x, mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING)#x]
      +- Window [mode(salary#x, 0, 0, true) windowspecdefinition(department#x, specifiedwindowframe(RowFrame, unboundedpreceding$(), 1)) AS mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND 1 FOLLOWING)#x], [department#x]
         +- Project [employee_name#x, department#x, salary#x]
            +- SubqueryAlias basic_pays
               +- View (`basic_pays`, [employee_name#x,department#x,salary#x])
                  +- Project [cast(employee_name#x as string) AS employee_name#x, cast(department#x as string) AS department#x, cast(salary#x as int) AS salary#x]
                     +- Project [employee_name#x, department#x, salary#x]
                        +- SubqueryAlias basic_pays
                           +- LocalRelation [employee_name#x, department#x, salary#x]


-- !query
SELECT
    employee_name,
    department,
    salary,
    median(salary) OVER w,
    mode() WITHIN GROUP (ORDER BY salary) OVER w
FROM basic_pays
WHERE salary > 8900
WINDOW w AS (PARTITION BY department)
ORDER BY salary
-- !query analysis
Sort [salary#x ASC NULLS FIRST], true
+- Project [employee_name#x, department#x, salary#x, median(salary) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x, mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x]
   +- Project [employee_name#x, department#x, salary#x, median(salary) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x, mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x, median(salary) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x, mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x]
      +- Window [median(salary#x) windowspecdefinition(department#x, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS median(salary) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x, mode(salary#x, 0, 0, true) windowspecdefinition(department#x, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS mode() WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)#x], [department#x]
         +- Project [employee_name#x, department#x, salary#x]
            +- Filter (salary#x > 8900)
               +- SubqueryAlias basic_pays
                  +- View (`basic_pays`, [employee_name#x,department#x,salary#x])
                     +- Project [cast(employee_name#x as string) AS employee_name#x, cast(department#x as string) AS department#x, cast(salary#x as int) AS salary#x]
                        +- Project [employee_name#x, department#x, salary#x]
                           +- SubqueryAlias basic_pays
                              +- LocalRelation [employee_name#x, department#x, salary#x]


-- !query
CREATE OR REPLACE TEMPORARY VIEW intervals AS SELECT * FROM VALUES
(0, INTERVAL '0' MONTH, INTERVAL '0' SECOND, INTERVAL '0' MINUTE),
(0, INTERVAL '10' MONTH, INTERVAL '10' SECOND, INTERVAL '10' MINUTE),
(0, INTERVAL '20' MONTH, INTERVAL '20' SECOND, INTERVAL '20' MINUTE),
(0, INTERVAL '30' MONTH, INTERVAL '30' SECOND, INTERVAL '30' MINUTE),
(0, INTERVAL '40' MONTH, INTERVAL '40' SECOND, INTERVAL '40' MINUTE),
(1, INTERVAL '10' MONTH, INTERVAL '10' SECOND, INTERVAL '10' MINUTE),
(1, INTERVAL '20' MONTH, INTERVAL '20' SECOND, INTERVAL '20' MINUTE),
(2, INTERVAL '10' MONTH, INTERVAL '10' SECOND, INTERVAL '10' MINUTE),
(2, INTERVAL '20' MONTH, INTERVAL '20' SECOND, INTERVAL '20' MINUTE),
(2, INTERVAL '25' MONTH, INTERVAL '25' SECOND, INTERVAL '25' MINUTE),
(2, INTERVAL '30' MONTH, INTERVAL '30' SECOND, INTERVAL '30' MINUTE),
(3, INTERVAL '60' MONTH, INTERVAL '60' SECOND, INTERVAL '60' MINUTE),
(4, null, null, null)
AS intervals(k, dt, ym, dt2)
-- !query analysis
CreateViewCommand `intervals`, SELECT * FROM VALUES
(0, INTERVAL '0' MONTH, INTERVAL '0' SECOND, INTERVAL '0' MINUTE),
(0, INTERVAL '10' MONTH, INTERVAL '10' SECOND, INTERVAL '10' MINUTE),
(0, INTERVAL '20' MONTH, INTERVAL '20' SECOND, INTERVAL '20' MINUTE),
(0, INTERVAL '30' MONTH, INTERVAL '30' SECOND, INTERVAL '30' MINUTE),
(0, INTERVAL '40' MONTH, INTERVAL '40' SECOND, INTERVAL '40' MINUTE),
(1, INTERVAL '10' MONTH, INTERVAL '10' SECOND, INTERVAL '10' MINUTE),
(1, INTERVAL '20' MONTH, INTERVAL '20' SECOND, INTERVAL '20' MINUTE),
(2, INTERVAL '10' MONTH, INTERVAL '10' SECOND, INTERVAL '10' MINUTE),
(2, INTERVAL '20' MONTH, INTERVAL '20' SECOND, INTERVAL '20' MINUTE),
(2, INTERVAL '25' MONTH, INTERVAL '25' SECOND, INTERVAL '25' MINUTE),
(2, INTERVAL '30' MONTH, INTERVAL '30' SECOND, INTERVAL '30' MINUTE),
(3, INTERVAL '60' MONTH, INTERVAL '60' SECOND, INTERVAL '60' MINUTE),
(4, null, null, null)
AS intervals(k, dt, ym, dt2), false, true, LocalTempView, true
   +- Project [k#x, dt#x, ym#x, dt2#x]
      +- SubqueryAlias intervals
         +- LocalRelation [k#x, dt#x, ym#x, dt2#x]


-- !query
SELECT
  mode() WITHIN GROUP (ORDER BY dt)
FROM intervals
-- !query analysis
Aggregate [mode(dt#x, 0, 0, true) AS mode() WITHIN GROUP (ORDER BY dt)#x]
+- SubqueryAlias intervals
   +- View (`intervals`, [k#x,dt#x,ym#x,dt2#x])
      +- Project [cast(k#x as int) AS k#x, cast(dt#x as interval month) AS dt#x, cast(ym#x as interval second) AS ym#x, cast(dt2#x as interval minute) AS dt2#x]
         +- Project [k#x, dt#x, ym#x, dt2#x]
            +- SubqueryAlias intervals
               +- LocalRelation [k#x, dt#x, ym#x, dt2#x]


-- !query
SELECT
  k,
  mode() WITHIN GROUP (ORDER BY ym)
FROM intervals
GROUP BY k
ORDER BY k
-- !query analysis
Sort [k#x ASC NULLS FIRST], true
+- Aggregate [k#x], [k#x, mode(ym#x, 0, 0, true) AS mode() WITHIN GROUP (ORDER BY ym)#x]
   +- SubqueryAlias intervals
      +- View (`intervals`, [k#x,dt#x,ym#x,dt2#x])
         +- Project [cast(k#x as int) AS k#x, cast(dt#x as interval month) AS dt#x, cast(ym#x as interval second) AS ym#x, cast(dt2#x as interval minute) AS dt2#x]
            +- Project [k#x, dt#x, ym#x, dt2#x]
               +- SubqueryAlias intervals
                  +- LocalRelation [k#x, dt#x, ym#x, dt2#x]
