/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.spark.sql.catalyst.optimizer

import org.apache.spark.sql.catalyst.expressions._
import org.apache.spark.sql.catalyst.plans._
import org.apache.spark.sql.catalyst.plans.logical._
import org.apache.spark.sql.catalyst.rules._

/**
 * Collapse plans consisting empty local relations generated by [[PruneFilters]].
 * 1. InnerJoin with one or two empty children.
 * 2. Project/Generate/Filter/Sample/Join/Limit/Union/Repartition with all empty children.
 * 3. Aggregate with all empty children and grpExprs containing all aggExprs.
 */
object CollapseEmptyPlan extends Rule[LogicalPlan] with PredicateHelper {
  private def isEmptyLocalRelation(plan: LogicalPlan): Boolean =
    plan.isInstanceOf[LocalRelation] && plan.asInstanceOf[LocalRelation].data.isEmpty

  def apply(plan: LogicalPlan): LogicalPlan = plan transformUp {
    case p @ Join(_, _, Inner, _) if p.children.exists(isEmptyLocalRelation) =>
      LocalRelation(p.output, data = Seq.empty)

    case p: LogicalPlan if p.children.nonEmpty && p.children.forall(isEmptyLocalRelation) =>
      p match {
        case _: Project | _: Generate | _: Filter | _: Sample | _: Join |
             _: Sort | _: GlobalLimit | _: LocalLimit | _: Union | _: Repartition =>
          LocalRelation(p.output, data = Seq.empty)
        case Aggregate(ge, ae, _) if ae.forall(ge.contains(_)) =>
          LocalRelation(p.output, data = Seq.empty)
        case _ => p
      }
  }
}
