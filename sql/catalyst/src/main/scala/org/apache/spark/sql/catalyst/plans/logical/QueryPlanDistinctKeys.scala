/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.spark.sql.catalyst.plans.logical

import org.apache.spark.sql.catalyst.expressions.{Alias, AttributeSet, ExpressionSet, NamedExpression}


trait QueryPlanDistinctKeys {

  protected def projectDistinctKeys(
      keys: Set[ExpressionSet], projectList: Seq[NamedExpression]): Set[AttributeSet] = {
    val expressions = keys.flatMap(_.toSet)
    projectList.filter {
      case a: Alias => expressions.exists(_.semanticEquals(a.child))
      case ne: NamedExpression => expressions.exists(_.semanticEquals(ne))
    }.toSet.subsets(keys.map(_.size).min).filter { s =>
      val references = s.map {
        case a: Alias => a.child
        case ne => ne
      }
      keys.exists(_.equals(ExpressionSet(references)))
    }.map(s => AttributeSet(s.map(_.toAttribute))).toSet
  }

  /**
   * This method can be overridden by any child class of QueryPlan to specify a set of AttributeSet
   * that only contains the distinct attributes will generated by this plan.
   */
  lazy val distinctKeys: Set[AttributeSet] = Set.empty[AttributeSet]
}
