/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.spark.sql.catalyst.encoders;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroExample1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = 2596594845256404759L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroExample1\",\"namespace\":\"org.apache.spark.sql.catalyst.encoders\",\"fields\":[{\"name\":\"ips\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"timestamp\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"message\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"AvroExampleMagic1\",\"type\":{\"type\":\"fixed\",\"name\":\"AvroExampleMagic1\",\"size\":4}},{\"name\":\"additional\",\"type\":{\"type\":\"map\",\"values\":\"int\",\"avro.java.string\":\"String\"}}]}");
    public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

    private static SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<AvroExample1> ENCODER =
            new BinaryMessageEncoder<AvroExample1>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<AvroExample1> DECODER =
            new BinaryMessageDecoder<AvroExample1>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     */
    public static BinaryMessageDecoder<AvroExample1> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     */
    public static BinaryMessageDecoder<AvroExample1> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<AvroExample1>(MODEL$, SCHEMA$, resolver);
    }

    /** Serializes this AvroExample1 to a ByteBuffer. */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /** Deserializes a AvroExample1 from a ByteBuffer. */
    public static AvroExample1 fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    @Deprecated public java.util.List<java.lang.String> ips;
    @Deprecated public java.lang.String timestamp;
    @Deprecated public java.lang.String message;
    @Deprecated public org.apache.spark.sql.catalyst.encoders.AvroExampleMagic1 AvroExampleMagic1;
    @Deprecated public java.util.Map<java.lang.String,java.lang.Integer> additional;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public AvroExample1() {}

    /**
     * All-args constructor.
     * @param ips The new value for ips
     * @param timestamp The new value for timestamp
     * @param message The new value for message
     * @param AvroExampleMagic1 The new value for AvroExampleMagic1
     * @param additional The new value for additional
     */
    public AvroExample1(java.util.List<java.lang.String> ips, java.lang.String timestamp, java.lang.String message, org.apache.spark.sql.catalyst.encoders.AvroExampleMagic1 AvroExampleMagic1, java.util.Map<java.lang.String,java.lang.Integer> additional) {
        this.ips = ips;
        this.timestamp = timestamp;
        this.message = message;
        this.AvroExampleMagic1 = AvroExampleMagic1;
        this.additional = additional;
    }

    public org.apache.avro.Schema getSchema() { return SCHEMA$; }
    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0: return ips;
            case 1: return timestamp;
            case 2: return message;
            case 3: return AvroExampleMagic1;
            case 4: return additional;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value="unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0: ips = (java.util.List<java.lang.String>)value$; break;
            case 1: timestamp = (java.lang.String)value$; break;
            case 2: message = (java.lang.String)value$; break;
            case 3: AvroExampleMagic1 = (org.apache.spark.sql.catalyst.encoders.AvroExampleMagic1)value$; break;
            case 4: additional = (java.util.Map<java.lang.String,java.lang.Integer>)value$; break;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'ips' field.
     * @return The value of the 'ips' field.
     */
    public java.util.List<java.lang.String> getIps() {
        return ips;
    }

    /**
     * Sets the value of the 'ips' field.
     * @param value the value to set.
     */
    public void setIps(java.util.List<java.lang.String> value) {
        this.ips = value;
    }

    /**
     * Gets the value of the 'timestamp' field.
     * @return The value of the 'timestamp' field.
     */
    public java.lang.String getTimestamp() {
        return timestamp;
    }

    /**
     * Sets the value of the 'timestamp' field.
     * @param value the value to set.
     */
    public void setTimestamp(java.lang.String value) {
        this.timestamp = value;
    }

    /**
     * Gets the value of the 'message' field.
     * @return The value of the 'message' field.
     */
    public java.lang.String getMessage() {
        return message;
    }

    /**
     * Sets the value of the 'message' field.
     * @param value the value to set.
     */
    public void setMessage(java.lang.String value) {
        this.message = value;
    }

    /**
     * Gets the value of the 'AvroExampleMagic1' field.
     * @return The value of the 'AvroExampleMagic1' field.
     */
    public org.apache.spark.sql.catalyst.encoders.AvroExampleMagic1 getAvroExampleMagic1() {
        return AvroExampleMagic1;
    }

    /**
     * Sets the value of the 'AvroExampleMagic1' field.
     * @param value the value to set.
     */
    public void setAvroExampleMagic1(org.apache.spark.sql.catalyst.encoders.AvroExampleMagic1 value) {
        this.AvroExampleMagic1 = value;
    }

    /**
     * Gets the value of the 'additional' field.
     * @return The value of the 'additional' field.
     */
    public java.util.Map<java.lang.String,java.lang.Integer> getAdditional() {
        return additional;
    }

    /**
     * Sets the value of the 'additional' field.
     * @param value the value to set.
     */
    public void setAdditional(java.util.Map<java.lang.String,java.lang.Integer> value) {
        this.additional = value;
    }

    /**
     * Creates a new AvroExample1 RecordBuilder.
     * @return A new AvroExample1 RecordBuilder
     */
    public static org.apache.spark.sql.catalyst.encoders.AvroExample1.Builder newBuilder() {
        return new org.apache.spark.sql.catalyst.encoders.AvroExample1.Builder();
    }

    /**
     * Creates a new AvroExample1 RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new AvroExample1 RecordBuilder
     */
    public static org.apache.spark.sql.catalyst.encoders.AvroExample1.Builder newBuilder(org.apache.spark.sql.catalyst.encoders.AvroExample1.Builder other) {
        return new org.apache.spark.sql.catalyst.encoders.AvroExample1.Builder(other);
    }

    /**
     * Creates a new AvroExample1 RecordBuilder by copying an existing AvroExample1 instance.
     * @param other The existing instance to copy.
     * @return A new AvroExample1 RecordBuilder
     */
    public static org.apache.spark.sql.catalyst.encoders.AvroExample1.Builder newBuilder(org.apache.spark.sql.catalyst.encoders.AvroExample1 other) {
        return new org.apache.spark.sql.catalyst.encoders.AvroExample1.Builder(other);
    }

    /**
     * RecordBuilder for AvroExample1 instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroExample1>
            implements org.apache.avro.data.RecordBuilder<AvroExample1> {

        private java.util.List<java.lang.String> ips;
        private java.lang.String timestamp;
        private java.lang.String message;
        private org.apache.spark.sql.catalyst.encoders.AvroExampleMagic1 AvroExampleMagic1;
        private java.util.Map<java.lang.String,java.lang.Integer> additional;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(org.apache.spark.sql.catalyst.encoders.AvroExample1.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.ips)) {
                this.ips = data().deepCopy(fields()[0].schema(), other.ips);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.timestamp)) {
                this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.message)) {
                this.message = data().deepCopy(fields()[2].schema(), other.message);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.AvroExampleMagic1)) {
                this.AvroExampleMagic1 = data().deepCopy(fields()[3].schema(), other.AvroExampleMagic1);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.additional)) {
                this.additional = data().deepCopy(fields()[4].schema(), other.additional);
                fieldSetFlags()[4] = true;
            }
        }

        /**
         * Creates a Builder by copying an existing AvroExample1 instance
         * @param other The existing instance to copy.
         */
        private Builder(org.apache.spark.sql.catalyst.encoders.AvroExample1 other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.ips)) {
                this.ips = data().deepCopy(fields()[0].schema(), other.ips);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.timestamp)) {
                this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.message)) {
                this.message = data().deepCopy(fields()[2].schema(), other.message);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.AvroExampleMagic1)) {
                this.AvroExampleMagic1 = data().deepCopy(fields()[3].schema(), other.AvroExampleMagic1);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.additional)) {
                this.additional = data().deepCopy(fields()[4].schema(), other.additional);
                fieldSetFlags()[4] = true;
            }
        }

        /**
         * Gets the value of the 'ips' field.
         * @return The value.
         */
        public java.util.List<java.lang.String> getIps() {
            return ips;
        }

        /**
         * Sets the value of the 'ips' field.
         * @param value The value of 'ips'.
         * @return This builder.
         */
        public org.apache.spark.sql.catalyst.encoders.AvroExample1.Builder setIps(java.util.List<java.lang.String> value) {
            validate(fields()[0], value);
            this.ips = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'ips' field has been set.
         * @return True if the 'ips' field has been set, false otherwise.
         */
        public boolean hasIps() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'ips' field.
         * @return This builder.
         */
        public org.apache.spark.sql.catalyst.encoders.AvroExample1.Builder clearIps() {
            ips = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'timestamp' field.
         * @return The value.
         */
        public java.lang.String getTimestamp() {
            return timestamp;
        }

        /**
         * Sets the value of the 'timestamp' field.
         * @param value The value of 'timestamp'.
         * @return This builder.
         */
        public org.apache.spark.sql.catalyst.encoders.AvroExample1.Builder setTimestamp(java.lang.String value) {
            validate(fields()[1], value);
            this.timestamp = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'timestamp' field has been set.
         * @return True if the 'timestamp' field has been set, false otherwise.
         */
        public boolean hasTimestamp() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'timestamp' field.
         * @return This builder.
         */
        public org.apache.spark.sql.catalyst.encoders.AvroExample1.Builder clearTimestamp() {
            timestamp = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'message' field.
         * @return The value.
         */
        public java.lang.String getMessage() {
            return message;
        }

        /**
         * Sets the value of the 'message' field.
         * @param value The value of 'message'.
         * @return This builder.
         */
        public org.apache.spark.sql.catalyst.encoders.AvroExample1.Builder setMessage(java.lang.String value) {
            validate(fields()[2], value);
            this.message = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'message' field has been set.
         * @return True if the 'message' field has been set, false otherwise.
         */
        public boolean hasMessage() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'message' field.
         * @return This builder.
         */
        public org.apache.spark.sql.catalyst.encoders.AvroExample1.Builder clearMessage() {
            message = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'AvroExampleMagic1' field.
         * @return The value.
         */
        public org.apache.spark.sql.catalyst.encoders.AvroExampleMagic1 getAvroExampleMagic1() {
            return AvroExampleMagic1;
        }

        /**
         * Sets the value of the 'AvroExampleMagic1' field.
         * @param value The value of 'AvroExampleMagic1'.
         * @return This builder.
         */
        public org.apache.spark.sql.catalyst.encoders.AvroExample1.Builder setAvroExampleMagic1(org.apache.spark.sql.catalyst.encoders.AvroExampleMagic1 value) {
            validate(fields()[3], value);
            this.AvroExampleMagic1 = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'AvroExampleMagic1' field has been set.
         * @return True if the 'AvroExampleMagic1' field has been set, false otherwise.
         */
        public boolean hasAvroExampleMagic1() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'AvroExampleMagic1' field.
         * @return This builder.
         */
        public org.apache.spark.sql.catalyst.encoders.AvroExample1.Builder clearAvroExampleMagic1() {
            AvroExampleMagic1 = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'additional' field.
         * @return The value.
         */
        public java.util.Map<java.lang.String,java.lang.Integer> getAdditional() {
            return additional;
        }

        /**
         * Sets the value of the 'additional' field.
         * @param value The value of 'additional'.
         * @return This builder.
         */
        public org.apache.spark.sql.catalyst.encoders.AvroExample1.Builder setAdditional(java.util.Map<java.lang.String,java.lang.Integer> value) {
            validate(fields()[4], value);
            this.additional = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'additional' field has been set.
         * @return True if the 'additional' field has been set, false otherwise.
         */
        public boolean hasAdditional() {
            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'additional' field.
         * @return This builder.
         */
        public org.apache.spark.sql.catalyst.encoders.AvroExample1.Builder clearAdditional() {
            additional = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public AvroExample1 build() {
            try {
                AvroExample1 record = new AvroExample1();
                record.ips = fieldSetFlags()[0] ? this.ips : (java.util.List<java.lang.String>) defaultValue(fields()[0]);
                record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.lang.String) defaultValue(fields()[1]);
                record.message = fieldSetFlags()[2] ? this.message : (java.lang.String) defaultValue(fields()[2]);
                record.AvroExampleMagic1 = fieldSetFlags()[3] ? this.AvroExampleMagic1 : (org.apache.spark.sql.catalyst.encoders.AvroExampleMagic1) defaultValue(fields()[3]);
                record.additional = fieldSetFlags()[4] ? this.additional : (java.util.Map<java.lang.String,java.lang.Integer>) defaultValue(fields()[4]);
                return record;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<AvroExample1>
            WRITER$ = (org.apache.avro.io.DatumWriter<AvroExample1>)MODEL$.createDatumWriter(SCHEMA$);

    @Override public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<AvroExample1>
            READER$ = (org.apache.avro.io.DatumReader<AvroExample1>)MODEL$.createDatumReader(SCHEMA$);

    @Override public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

}
