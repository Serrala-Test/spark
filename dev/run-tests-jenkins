#!/usr/bin/env bash

#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Wrapper script that runs the Spark tests then reports QA results
# to github via its API.

# Go to the Spark project root directory
FWDIR="$(cd `dirname $0`/..; pwd)"
cd "$FWDIR"

COMMENTS_URL="https://api.github.com/repos/apache/spark/issues/$ghprbPullId/comments"

function post_message {
  message=$1
  data="{\"body\": \"$message\"}"
  echo "Attempting to post to Github:"
  echo "$data"

  curl -D- -u x-oauth-basic:$GITHUB_OAUTH_KEY -X POST --data "$data" -H \
    "Content-Type: application/json" \
    $COMMENTS_URL | head -n 8
}

start_message="QA tests have started for PR $ghprbPullId."
if [ "$sha1" == "$ghprbActualCommit" ]; then
  start_message="$start_message This patch DID NOT merge cleanly! "
else
  start_message="$start_message This patch merges cleanly. "
fi
start_message="$start_message<br>View progress: "
start_message="$start_message${BUILD_URL}consoleFull"

post_message "$start_message"

./dev/run-tests
test_result="$?"

result_message="QA results for PR $ghprbPullId:<br>"

if [ "$test_result" -eq "0" ]; then
  result_message="$result_message- This patch PASSES unit tests.<br>"
else
  result_message="$result_message- This patch FAILED unit tests.<br>"
fi

if [ "$sha1" != "$ghprbActualCommit" ]; then
  result_message="$result_message- This patch merges cleanly<br>"
  non_test_files=$(git diff master --name-only | grep -v "\/test" | tr "\n" " ")
  new_public_classes=$(git diff master $non_test_files \
    | grep -e "trait " -e "class " \
    | grep -e "{" -e "("  \
    | grep -v -e \@\@ -e private \
    | grep \+ \
    | sed "s/\+ *//" \
    | tr "\n" "~" \
    | sed "s/~/<br>/g")
  if [ "$new_public_classes" != "" ]; then
    result_message="$result_message- This patch adds the following public classes (experimental):<br>"
    result_message="$result_message$new_public_classes"
  fi 
  source_line_delta=$(git diff master --shortstat -- \
    *src/*.scala *src/*.py *src/*.java | awk '{ print $4 - $6 }')
  test_line_delta=$(git diff master --shortstat -- \
    *test/*.scala *test/*.py *test/*.java | awk '{ print ($4 - $6 > 0 ? $4 - $6 : 0) }')
  echo "SOURCES: $source_line_delta"
  echo "TESTS: $test_line_delta"
  if [[ (-n "$source_line_delta") && ("$source_line_delta" -gt "10") ]]; then
    test_coverage=$(echo "$test_line_delta $source_line_delta" | awk '{printf "%.1f \n", $1/$2}')
    if [ "$test_line_delta" == "0" ]; then test_coverage_string="NON-EXISTENT"
      elif [ "$test_coverage" == "0.1" ]; then test_coverage_string="MINIMAL"
      elif [ "$test_coverage" == "0.2" ]; then test_coverage_string="MINOR"
      elif [ "$test_coverage" == "0.3" ]; then test_coverage_string="MODEST"
      elif [ "$test_coverage" == "0.4" ]; then test_coverage_string="MODERATE"
      elif [ "$test_coverage" == "0.5" ]; then test_coverage_string="DECENT"
      elif [ "$test_coverage" == "0.6" ]; then test_coverage_string="RESPECTABLE"
      elif [ "$test_coverage" == "0.7" ]; then test_coverage_string="THOROUGH"
      elif [ "$test_coverage" == "0.8" ]; then test_coverage_string="IMPRESSIVE"
      elif [ "$test_coverage" == "0.9" ]; then test_coverage_string="EXCELLENT"
      else test_coverage_string="FANTASTIC"
    fi
    result_message="$result_message- This patch has $test_coverage_string test coverage.<br>"
  fi
fi
result_message="${result_message}<br>For more information see test ouptut:"
result_message="${result_message}<br>${BUILD_URL}consoleFull"

post_message "$result_message"
exit $test_result
