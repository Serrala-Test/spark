
#!/usr/bin/env python

#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import argparse
import json


def main():
    """
    Generates Markdown table that contains information associated with error classes.
    :return:
    """
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--input-json', dest='input_json', type=str,
        default='core/src/main/resources/error/error-classes.json',
        help='path to input JSON, e.g., core/src/main/resources/error/error-classes.json')
    parser.add_argument(
        '--output-md', dest='output_md', type=str, default='docs/error-class-table.md',
        help='path to output Markdown, e.g., docs/error-class-table.md')

    args = parser.parse_args()

    with open(args.input_json, 'r') as f:
        error_class_info = json.load(f)

    with open(args.output_md, 'w') as f:
        print("[//]: # (This file is automatically generated. Do not modify directly.)", file=f)
        print("", file=f)  # Markdown requires an empty line before tables
        print("| Error class | SQLSTATE | Message format |", file=f)
        print("| --- | --- | --- | --- |", file=f)

        for error_class in sorted(error_class_info.keys()):
            error_info = error_class_info[error_class]
            # Allow error class to be split across lines, but only at underscores
            error_class_wbr = '_<wbr/>'.join(error_class.split('_'))
            sqlstate = error_info.get('sqlState')
            message_format = '<br>'.join(error_info['messageFormatLines'])
            print(f"| {error_class_wbr} | {sqlstate} | {message_format} |", file=f)


if __name__ == '__main__':
    main()
