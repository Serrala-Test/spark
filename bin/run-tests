#!/usr/bin/env bash
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# This file tests the various functionalities in bin/utils.sh
#
# By default, this prints only the relevant error output at the end if tests fail.
# For debugging, the user can set SPARK_TESTING_VERBOSE to print more information
# while tests are still running.
#
# This script returns an exit code of 1 on test failure.

SPARK_HOME="$(cd `dirname $0`/..; pwd)"
PROPERTIES_FILE="$SPARK_HOME/bin/test.conf"

# Load utility functions
. "$SPARK_HOME/bin/utils.sh"

tests_failed=0
this_test_failed=0
error_output_buffer=""
temp_output_buffer=""

# Echo only if the verbose flag is set
function verbose_echo() {
  if [[ -n "$SPARK_TESTING_VERBOSE" ]]; then
    echo -e "$1"
  fi
}

# Collect error output for echoing at the end if tests fail
# This also echoes the given string if the verbose flag is set
function log_error() {
  verbose_echo "$1"
  if [[ -n "$error_output_buffer" ]]; then
    error_output_buffer=$(echo -e "$error_output_buffer\n$1")
  else
    error_output_buffer="$1"
  fi
}

# Collect temporary output for logging
function collect_temp_output() {
  if [[ -n "$temp_output_buffer" ]]; then
    temp_output_buffer=$(echo -e "$temp_output_buffer\n$1")
  else
    temp_output_buffer="$1"
  fi
}

# Print the result of an individual test
function echo_test_result() {
  if [[ "$this_test_failed" == 1 ]]; then
    log_error "$temp_output_buffer"
    tests_failed=1
  else
    verbose_echo "$temp_output_buffer"
  fi
}

# Test parse_java_property. This takes in three parameters, the name of
# the config, the expected value, and whether or not to ignore whitespace.
function test_parse_java_property() {
  key="$1"
  expected_value="$2"
  ignore_whitespace="$3"
  temp_output_buffer=""
  this_test_failed=0
  parse_java_property "$key"
  actual_value="$JAVA_PROPERTY_VALUE"
  collect_temp_output "  $key -> $actual_value"
  # Ignore whitespace for multi-line arguments
  if [[ -n "$ignore_whitespace" ]]; then
    expected_value=$(echo "$expected_value" | sed "s/[[:space:]]//g")
    actual_value=$(echo "$actual_value" | sed "s/[[:space:]]//g")
  fi
  if [[ "$actual_value" != "$expected_value" ]]; then
    collect_temp_output "    XXXXX TEST FAILED XXXXX"
    collect_temp_output "      expected: $expected_value"
    collect_temp_output "      actual:   $actual_value"
    this_test_failed=1
  fi
  echo_test_result
}

# Test split_java_options. This takes in three or more parameters, the name of the config,
# the expected number of java options, and values of the java options themselves.
function test_split_java_options() {
  key="$1"
  expected_size="$2"
  expected_values=("${@:3}")
  temp_output_buffer=""
  this_test_failed=0
  parse_java_property "$key"
  collect_temp_output "  $JAVA_PROPERTY_VALUE"
  split_java_options "$JAVA_PROPERTY_VALUE"
  if [[ "$expected_size" != "${#SPLIT_JAVA_OPTS[@]}" ]]; then
    collect_temp_output "    XXXXX TEST FAILED XXXXX"
    collect_temp_output "      expected size: $expected_size"
    collect_temp_output "      actual size:   ${#SPLIT_JAVA_OPTS[@]}"
    this_test_failed=1
  fi
  for i in $(seq 0 $((expected_size - 1))); do
    expected_value="${expected_values[$i]}"
    actual_value="${SPLIT_JAVA_OPTS[$i]}"
    collect_temp_output "    -> $actual_value"
    if [[ "$expected_value" != "$actual_value" ]]; then
      collect_temp_output "      XXXXX TEST FAILED (key $key) XXXXX"
      collect_temp_output "        expected value: $expected_value"
      collect_temp_output "        actual value:   $actual_value"
      this_test_failed=1
      break
    fi
  done
  echo_test_result
}

# Test split_java_options. This takes in three or more parameters, the name of the config,
# the expected number of java options, and values of the java options themselves.
function test_quote_java_property() {
  key="$1"
  expected_size="$2"
  expected_values=("${@:3}")
  temp_output_buffer=""
  this_test_failed=0
  parse_java_property "$key"
  split_java_options "$JAVA_PROPERTY_VALUE"
  quote_java_property "${SPLIT_JAVA_OPTS[@]}"
  collect_temp_output "  $JAVA_PROPERTY_VALUE"
  for i in $(seq 0 $((expected_size - 1))); do
    expected_value="${expected_values[$i]}"
    actual_value="${QUOTED_JAVA_OPTS[$i]}"
    collect_temp_output "    -> $actual_value"
    if [[ "$expected_value" != "$actual_value" ]]; then
      collect_temp_output "      XXXXX TEST FAILED (key $key) XXXXX"
      collect_temp_output "        expected value: $expected_value"
      collect_temp_output "        actual value:   $actual_value"
      this_test_failed=1
      break
    fi
  done
  echo_test_result
}

# Test parse_java_property. This should read the literal value as written in the conf file.
log_error "--- Testing parse_java_property ---"
delimiters=("space" "equal" "colon")
test_parse_java_property "does.not.exist" ""
for delimiter in "${delimiters[@]}"; do
  test_parse_java_property "spark.$delimiter.1" "-Dstraw=berry"
  test_parse_java_property "spark.$delimiter.2" "-Dstraw=\"berry\""
  test_parse_java_property "spark.$delimiter.3" "-Dstraw=\"berry again\""
  test_parse_java_property "spark.$delimiter.4" "-Dstraw=\"berry \\\"quote\""
  test_parse_java_property "spark.$delimiter.5" "-Dstraw=\"berry \\\\backslash\""
  test_parse_java_property "spark.$delimiter.6" \
    "-Dstraw=\"berry \\\"quotes\\\" and \\\\backslashes\\\\ \""
  test_parse_java_property "spark.$delimiter.7" \
    "-Dstraw=berry -Dblue=berry -Dblack=berry"
  test_parse_java_property "spark.$delimiter.8" \
    "-Dstraw=\"berry space\" -Dblue=\"berry\" -Dblack=berry"
  test_parse_java_property "spark.$delimiter.9" \
    "-Dstraw=\"berry space\" -Dblue=\"berry \\\"quotes\\\"\" -Dblack=\"berry \\\\backslashes\\\\ \""
  test_parse_java_property "spark.$delimiter.10" \
    "-Dstraw=\"berry space\" -Dblue=\"berry \\\"quotes\\\"\" -Dblack=\"berry \\\\backslashes\\\\ \"" \
    IGNORE_WHITESPACE
done
log_error

# Test split_java_options. Note that this relies on parse_java_property to work correctly.
log_error "--- Testing split_java_options ---"
if [[ "$tests_failed" == 1 ]]; then
  log_error "* WARNING: Tests for parse_java_property failed!"
  log_error "This should also fail tests for split_java_options"
fi
test_split_java_options "spark.space.1" 1 "-Dstraw=berry"
test_split_java_options "spark.space.2" 1 "-Dstraw=berry"
test_split_java_options "spark.space.3" 1 "-Dstraw=berry again"
test_split_java_options "spark.space.4" 1 "-Dstraw=berry \"quote"
test_split_java_options "spark.space.5" 1 "-Dstraw=berry \\backslash"
test_split_java_options "spark.space.6" 1 "-Dstraw=berry \"quotes\" and \\backslashes\\ "
test_split_java_options "spark.space.7" 3 "-Dstraw=berry" "-Dblue=berry" "-Dblack=berry"
test_split_java_options "spark.space.8" 3 "-Dstraw=berry space" "-Dblue=berry" "-Dblack=berry"
test_split_java_options "spark.space.9" 3 \
  "-Dstraw=berry space" "-Dblue=berry \"quotes\"" "-Dblack=berry \\backslashes\\ "
test_split_java_options "spark.space.10" 3 \
  "-Dstraw=berry space" "-Dblue=berry \"quotes\"" "-Dblack=berry \\backslashes\\ "
log_error

# Test quote_java_property. Note that this relies on split_java_options to work correctly.
log_error "--- Testing quote_java_property ---"
if [[ "$tests_failed" == 1 ]]; then
  log_error "* WARNING: Tests for split_java_options failed!"
  log_error "This should also fail tests for quote_java_property"
fi
test_quote_java_property "spark.space.1" 1 "\"-Dstraw=berry\""
test_quote_java_property "spark.space.2" 1 "\"-Dstraw=berry\""
test_quote_java_property "spark.space.3" 1 "\"-Dstraw=berry again\""
test_quote_java_property "spark.space.4" 1 "\"-Dstraw=berry \"quote\""
test_quote_java_property "spark.space.5" 1 "\"-Dstraw=berry \\backslash\""
test_quote_java_property "spark.space.6" 1 \
  "\"-Dstraw=berry \"quotes\" and \\backslashes\\ \""
test_quote_java_property "spark.space.7" 3 \
  "\"-Dstraw=berry\"" "\"-Dblue=berry\"" "\"-Dblack=berry\""
test_quote_java_property "spark.space.8" 3 \
  "\"-Dstraw=berry space\"" "\"-Dblue=berry\"" "\"-Dblack=berry\""
test_quote_java_property "spark.space.9" 3 \
  "\"-Dstraw=berry space\"" "\"-Dblue=berry \"quotes\"\"" "\"-Dblack=berry \\backslashes\\ \""
test_quote_java_property "spark.space.10" 3 \
  "\"-Dstraw=berry space\"" "\"-Dblue=berry \"quotes\"\"" "\"-Dblack=berry \\backslashes\\ \""
log_error

# Final test result
if [[ "$tests_failed" == 0 ]]; then
  echo "BASH tests passed."
else 
  echo -e "XXXXX BASH tests failed XXXXX\n"
  echo -e "$error_output_buffer"
  exit 1
fi

