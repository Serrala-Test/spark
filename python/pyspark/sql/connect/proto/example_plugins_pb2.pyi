#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from pyspark.sql.connect.proto.expressions_pb2 import (
    Expression as spark___connect___expressions_pb2___Expression,
)

from pyspark.sql.connect.proto.relations_pb2 import (
    Relation as spark___connect___relations_pb2___Relation,
)

from typing import (
    Optional as typing___Optional,
    Text as typing___Text,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)

builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int

DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class ExamplePluginRelation(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    custom_field: typing___Text = ...

    @property
    def input(self) -> spark___connect___relations_pb2___Relation: ...
    def __init__(
        self,
        *,
        input: typing___Optional[spark___connect___relations_pb2___Relation] = None,
        custom_field: typing___Optional[typing___Text] = None,
    ) -> None: ...
    def HasField(
        self, field_name: typing_extensions___Literal["input", b"input"]
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal["custom_field", b"custom_field", "input", b"input"],
    ) -> None: ...

type___ExamplePluginRelation = ExamplePluginRelation

class ExamplePluginExpression(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    custom_field: typing___Text = ...

    @property
    def child(self) -> spark___connect___expressions_pb2___Expression: ...
    def __init__(
        self,
        *,
        child: typing___Optional[spark___connect___expressions_pb2___Expression] = None,
        custom_field: typing___Optional[typing___Text] = None,
    ) -> None: ...
    def HasField(
        self, field_name: typing_extensions___Literal["child", b"child"]
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal["child", b"child", "custom_field", b"custom_field"],
    ) -> None: ...

type___ExamplePluginExpression = ExamplePluginExpression

class ExamplePluginCommand(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    custom_field: typing___Text = ...

    def __init__(
        self,
        *,
        custom_field: typing___Optional[typing___Text] = None,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions___Literal["custom_field", b"custom_field"]
    ) -> None: ...

type___ExamplePluginCommand = ExamplePluginCommand
