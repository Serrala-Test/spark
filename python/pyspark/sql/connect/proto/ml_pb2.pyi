#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import pyspark.sql.connect.proto.expressions_pb2
import pyspark.sql.connect.proto.ml_common_pb2
import pyspark.sql.connect.proto.relations_pb2
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class MlEvaluator(google.protobuf.message.Message):
    """MlEvaluator represents a ML Evaluator"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    PARAMS_FIELD_NUMBER: builtins.int
    UID_FIELD_NUMBER: builtins.int
    name: builtins.str
    """The name of the evaluator in the registry"""
    @property
    def params(self) -> pyspark.sql.connect.proto.ml_common_pb2.MlParams:
        """param settings for the evaluator"""
    uid: builtins.str
    """unique id of the evaluator"""
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        params: pyspark.sql.connect.proto.ml_common_pb2.MlParams | None = ...,
        uid: builtins.str = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing_extensions.Literal["params", b"params"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal["name", b"name", "params", b"params", "uid", b"uid"],
    ) -> None: ...

global___MlEvaluator = MlEvaluator

class MlCommand(google.protobuf.message.Message):
    """a MlCommand is a type container that has exactly one ML command set"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class Fit(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        ESTIMATOR_FIELD_NUMBER: builtins.int
        DATASET_FIELD_NUMBER: builtins.int
        @property
        def estimator(self) -> pyspark.sql.connect.proto.ml_common_pb2.MlStage: ...
        @property
        def dataset(self) -> pyspark.sql.connect.proto.relations_pb2.Relation: ...
        def __init__(
            self,
            *,
            estimator: pyspark.sql.connect.proto.ml_common_pb2.MlStage | None = ...,
            dataset: pyspark.sql.connect.proto.relations_pb2.Relation | None = ...,
        ) -> None: ...
        def HasField(
            self,
            field_name: typing_extensions.Literal["dataset", b"dataset", "estimator", b"estimator"],
        ) -> builtins.bool: ...
        def ClearField(
            self,
            field_name: typing_extensions.Literal["dataset", b"dataset", "estimator", b"estimator"],
        ) -> None: ...

    class Evaluate(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        EVALUATOR_FIELD_NUMBER: builtins.int
        @property
        def evaluator(self) -> global___MlEvaluator: ...
        def __init__(
            self,
            *,
            evaluator: global___MlEvaluator | None = ...,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions.Literal["evaluator", b"evaluator"]
        ) -> builtins.bool: ...
        def ClearField(
            self, field_name: typing_extensions.Literal["evaluator", b"evaluator"]
        ) -> None: ...

    class LoadModel(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        NAME_FIELD_NUMBER: builtins.int
        PATH_FIELD_NUMBER: builtins.int
        name: builtins.str
        path: builtins.str
        def __init__(
            self,
            *,
            name: builtins.str = ...,
            path: builtins.str = ...,
        ) -> None: ...
        def ClearField(
            self, field_name: typing_extensions.Literal["name", b"name", "path", b"path"]
        ) -> None: ...

    class SaveModel(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class OptionsEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: builtins.str
            value: builtins.str
            def __init__(
                self,
                *,
                key: builtins.str = ...,
                value: builtins.str = ...,
            ) -> None: ...
            def ClearField(
                self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]
            ) -> None: ...

        MODEL_REF_FIELD_NUMBER: builtins.int
        PATH_FIELD_NUMBER: builtins.int
        OVERWRITE_FIELD_NUMBER: builtins.int
        OPTIONS_FIELD_NUMBER: builtins.int
        @property
        def model_ref(self) -> pyspark.sql.connect.proto.ml_common_pb2.ModelRef: ...
        path: builtins.str
        """saving path"""
        overwrite: builtins.bool
        @property
        def options(
            self,
        ) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
            """saving options"""
        def __init__(
            self,
            *,
            model_ref: pyspark.sql.connect.proto.ml_common_pb2.ModelRef | None = ...,
            path: builtins.str = ...,
            overwrite: builtins.bool = ...,
            options: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions.Literal["model_ref", b"model_ref"]
        ) -> builtins.bool: ...
        def ClearField(
            self,
            field_name: typing_extensions.Literal[
                "model_ref",
                b"model_ref",
                "options",
                b"options",
                "overwrite",
                b"overwrite",
                "path",
                b"path",
            ],
        ) -> None: ...

    class LoadStage(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        NAME_FIELD_NUMBER: builtins.int
        PATH_FIELD_NUMBER: builtins.int
        TYPE_FIELD_NUMBER: builtins.int
        name: builtins.str
        path: builtins.str
        type: pyspark.sql.connect.proto.ml_common_pb2.MlStage.StageType.ValueType
        def __init__(
            self,
            *,
            name: builtins.str = ...,
            path: builtins.str = ...,
            type: pyspark.sql.connect.proto.ml_common_pb2.MlStage.StageType.ValueType = ...,
        ) -> None: ...
        def ClearField(
            self,
            field_name: typing_extensions.Literal[
                "name", b"name", "path", b"path", "type", b"type"
            ],
        ) -> None: ...

    class SaveStage(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class OptionsEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: builtins.str
            value: builtins.str
            def __init__(
                self,
                *,
                key: builtins.str = ...,
                value: builtins.str = ...,
            ) -> None: ...
            def ClearField(
                self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]
            ) -> None: ...

        STAGE_FIELD_NUMBER: builtins.int
        PATH_FIELD_NUMBER: builtins.int
        OVERWRITE_FIELD_NUMBER: builtins.int
        OPTIONS_FIELD_NUMBER: builtins.int
        @property
        def stage(self) -> pyspark.sql.connect.proto.ml_common_pb2.MlStage: ...
        path: builtins.str
        """saving path"""
        overwrite: builtins.bool
        @property
        def options(
            self,
        ) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
            """saving options"""
        def __init__(
            self,
            *,
            stage: pyspark.sql.connect.proto.ml_common_pb2.MlStage | None = ...,
            path: builtins.str = ...,
            overwrite: builtins.bool = ...,
            options: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions.Literal["stage", b"stage"]
        ) -> builtins.bool: ...
        def ClearField(
            self,
            field_name: typing_extensions.Literal[
                "options", b"options", "overwrite", b"overwrite", "path", b"path", "stage", b"stage"
            ],
        ) -> None: ...

    class LoadEvaluator(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        NAME_FIELD_NUMBER: builtins.int
        PATH_FIELD_NUMBER: builtins.int
        name: builtins.str
        path: builtins.str
        def __init__(
            self,
            *,
            name: builtins.str = ...,
            path: builtins.str = ...,
        ) -> None: ...
        def ClearField(
            self, field_name: typing_extensions.Literal["name", b"name", "path", b"path"]
        ) -> None: ...

    class SaveEvaluator(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        class OptionsEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: builtins.str
            value: builtins.str
            def __init__(
                self,
                *,
                key: builtins.str = ...,
                value: builtins.str = ...,
            ) -> None: ...
            def ClearField(
                self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]
            ) -> None: ...

        EVALUATOR_FIELD_NUMBER: builtins.int
        PATH_FIELD_NUMBER: builtins.int
        OVERWRITE_FIELD_NUMBER: builtins.int
        OPTIONS_FIELD_NUMBER: builtins.int
        @property
        def evaluator(self) -> global___MlEvaluator: ...
        path: builtins.str
        """saving path"""
        overwrite: builtins.bool
        @property
        def options(
            self,
        ) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
            """saving options"""
        def __init__(
            self,
            *,
            evaluator: global___MlEvaluator | None = ...,
            path: builtins.str = ...,
            overwrite: builtins.bool = ...,
            options: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions.Literal["evaluator", b"evaluator"]
        ) -> builtins.bool: ...
        def ClearField(
            self,
            field_name: typing_extensions.Literal[
                "evaluator",
                b"evaluator",
                "options",
                b"options",
                "overwrite",
                b"overwrite",
                "path",
                b"path",
            ],
        ) -> None: ...

    class FetchModelAttr(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        MODEL_REF_FIELD_NUMBER: builtins.int
        NAME_FIELD_NUMBER: builtins.int
        @property
        def model_ref(self) -> pyspark.sql.connect.proto.ml_common_pb2.ModelRef: ...
        name: builtins.str
        def __init__(
            self,
            *,
            model_ref: pyspark.sql.connect.proto.ml_common_pb2.ModelRef | None = ...,
            name: builtins.str = ...,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions.Literal["model_ref", b"model_ref"]
        ) -> builtins.bool: ...
        def ClearField(
            self, field_name: typing_extensions.Literal["model_ref", b"model_ref", "name", b"name"]
        ) -> None: ...

    class FetchModelSummaryAttr(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        MODEL_REF_FIELD_NUMBER: builtins.int
        NAME_FIELD_NUMBER: builtins.int
        PARAMS_FIELD_NUMBER: builtins.int
        EVALUATION_DATASET_FIELD_NUMBER: builtins.int
        @property
        def model_ref(self) -> pyspark.sql.connect.proto.ml_common_pb2.ModelRef: ...
        name: builtins.str
        @property
        def params(self) -> pyspark.sql.connect.proto.ml_common_pb2.MlParams: ...
        @property
        def evaluation_dataset(self) -> pyspark.sql.connect.proto.relations_pb2.Relation:
            """Evaluation dataset that it uses to computes
            the summary attribute
            If not set, get attributes from
            model.summary (i.e. the summary on training dataset)
            """
        def __init__(
            self,
            *,
            model_ref: pyspark.sql.connect.proto.ml_common_pb2.ModelRef | None = ...,
            name: builtins.str = ...,
            params: pyspark.sql.connect.proto.ml_common_pb2.MlParams | None = ...,
            evaluation_dataset: pyspark.sql.connect.proto.relations_pb2.Relation | None = ...,
        ) -> None: ...
        def HasField(
            self,
            field_name: typing_extensions.Literal[
                "_evaluation_dataset",
                b"_evaluation_dataset",
                "evaluation_dataset",
                b"evaluation_dataset",
                "model_ref",
                b"model_ref",
                "params",
                b"params",
            ],
        ) -> builtins.bool: ...
        def ClearField(
            self,
            field_name: typing_extensions.Literal[
                "_evaluation_dataset",
                b"_evaluation_dataset",
                "evaluation_dataset",
                b"evaluation_dataset",
                "model_ref",
                b"model_ref",
                "name",
                b"name",
                "params",
                b"params",
            ],
        ) -> None: ...
        def WhichOneof(
            self,
            oneof_group: typing_extensions.Literal["_evaluation_dataset", b"_evaluation_dataset"],
        ) -> typing_extensions.Literal["evaluation_dataset"] | None: ...

    class CopyModel(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        MODEL_REF_FIELD_NUMBER: builtins.int
        @property
        def model_ref(self) -> pyspark.sql.connect.proto.ml_common_pb2.ModelRef: ...
        def __init__(
            self,
            *,
            model_ref: pyspark.sql.connect.proto.ml_common_pb2.ModelRef | None = ...,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions.Literal["model_ref", b"model_ref"]
        ) -> builtins.bool: ...
        def ClearField(
            self, field_name: typing_extensions.Literal["model_ref", b"model_ref"]
        ) -> None: ...

    class DeleteModel(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        MODEL_REF_FIELD_NUMBER: builtins.int
        @property
        def model_ref(self) -> pyspark.sql.connect.proto.ml_common_pb2.ModelRef: ...
        def __init__(
            self,
            *,
            model_ref: pyspark.sql.connect.proto.ml_common_pb2.ModelRef | None = ...,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions.Literal["model_ref", b"model_ref"]
        ) -> builtins.bool: ...
        def ClearField(
            self, field_name: typing_extensions.Literal["model_ref", b"model_ref"]
        ) -> None: ...

    FIT_FIELD_NUMBER: builtins.int
    FETCH_MODEL_ATTR_FIELD_NUMBER: builtins.int
    FETCH_MODEL_SUMMARY_ATTR_FIELD_NUMBER: builtins.int
    LOAD_MODEL_FIELD_NUMBER: builtins.int
    SAVE_MODEL_FIELD_NUMBER: builtins.int
    EVALUATE_FIELD_NUMBER: builtins.int
    SAVE_STAGE_FIELD_NUMBER: builtins.int
    LOAD_STAGE_FIELD_NUMBER: builtins.int
    SAVE_EVALUATOR_FIELD_NUMBER: builtins.int
    LOAD_EVALUATOR_FIELD_NUMBER: builtins.int
    COPY_MODEL_FIELD_NUMBER: builtins.int
    DELETE_MODEL_FIELD_NUMBER: builtins.int
    @property
    def fit(self) -> global___MlCommand.Fit:
        """call `estimator.fit` and returns a model"""
    @property
    def fetch_model_attr(self) -> global___MlCommand.FetchModelAttr:
        """get model attribute"""
    @property
    def fetch_model_summary_attr(self) -> global___MlCommand.FetchModelSummaryAttr:
        """get model summary attribute"""
    @property
    def load_model(self) -> global___MlCommand.LoadModel:
        """load model"""
    @property
    def save_model(self) -> global___MlCommand.SaveModel:
        """save model"""
    @property
    def evaluate(self) -> global___MlCommand.Evaluate:
        """call `evaluator.evaluate`"""
    @property
    def save_stage(self) -> global___MlCommand.SaveStage:
        """save estimator or transformer"""
    @property
    def load_stage(self) -> global___MlCommand.LoadStage:
        """load estimator or transformer"""
    @property
    def save_evaluator(self) -> global___MlCommand.SaveEvaluator:
        """save estimator"""
    @property
    def load_evaluator(self) -> global___MlCommand.LoadEvaluator:
        """load estimator"""
    @property
    def copy_model(self) -> global___MlCommand.CopyModel:
        """copy model, returns new model reference id"""
    @property
    def delete_model(self) -> global___MlCommand.DeleteModel:
        """delete server side model object by model reference id"""
    def __init__(
        self,
        *,
        fit: global___MlCommand.Fit | None = ...,
        fetch_model_attr: global___MlCommand.FetchModelAttr | None = ...,
        fetch_model_summary_attr: global___MlCommand.FetchModelSummaryAttr | None = ...,
        load_model: global___MlCommand.LoadModel | None = ...,
        save_model: global___MlCommand.SaveModel | None = ...,
        evaluate: global___MlCommand.Evaluate | None = ...,
        save_stage: global___MlCommand.SaveStage | None = ...,
        load_stage: global___MlCommand.LoadStage | None = ...,
        save_evaluator: global___MlCommand.SaveEvaluator | None = ...,
        load_evaluator: global___MlCommand.LoadEvaluator | None = ...,
        copy_model: global___MlCommand.CopyModel | None = ...,
        delete_model: global___MlCommand.DeleteModel | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "copy_model",
            b"copy_model",
            "delete_model",
            b"delete_model",
            "evaluate",
            b"evaluate",
            "fetch_model_attr",
            b"fetch_model_attr",
            "fetch_model_summary_attr",
            b"fetch_model_summary_attr",
            "fit",
            b"fit",
            "load_evaluator",
            b"load_evaluator",
            "load_model",
            b"load_model",
            "load_stage",
            b"load_stage",
            "ml_command_type",
            b"ml_command_type",
            "save_evaluator",
            b"save_evaluator",
            "save_model",
            b"save_model",
            "save_stage",
            b"save_stage",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "copy_model",
            b"copy_model",
            "delete_model",
            b"delete_model",
            "evaluate",
            b"evaluate",
            "fetch_model_attr",
            b"fetch_model_attr",
            "fetch_model_summary_attr",
            b"fetch_model_summary_attr",
            "fit",
            b"fit",
            "load_evaluator",
            b"load_evaluator",
            "load_model",
            b"load_model",
            "load_stage",
            b"load_stage",
            "ml_command_type",
            b"ml_command_type",
            "save_evaluator",
            b"save_evaluator",
            "save_model",
            b"save_model",
            "save_stage",
            b"save_stage",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["ml_command_type", b"ml_command_type"]
    ) -> typing_extensions.Literal[
        "fit",
        "fetch_model_attr",
        "fetch_model_summary_attr",
        "load_model",
        "save_model",
        "evaluate",
        "save_stage",
        "load_stage",
        "save_evaluator",
        "load_evaluator",
        "copy_model",
        "delete_model",
    ] | None: ...

global___MlCommand = MlCommand

class MlCommandResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class ModelInfo(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        MODEL_REF_FIELD_NUMBER: builtins.int
        MODEL_UID_FIELD_NUMBER: builtins.int
        PARAMS_FIELD_NUMBER: builtins.int
        @property
        def model_ref(self) -> pyspark.sql.connect.proto.ml_common_pb2.ModelRef: ...
        model_uid: builtins.str
        @property
        def params(self) -> pyspark.sql.connect.proto.ml_common_pb2.MlParams: ...
        def __init__(
            self,
            *,
            model_ref: pyspark.sql.connect.proto.ml_common_pb2.ModelRef | None = ...,
            model_uid: builtins.str = ...,
            params: pyspark.sql.connect.proto.ml_common_pb2.MlParams | None = ...,
        ) -> None: ...
        def HasField(
            self,
            field_name: typing_extensions.Literal["model_ref", b"model_ref", "params", b"params"],
        ) -> builtins.bool: ...
        def ClearField(
            self,
            field_name: typing_extensions.Literal[
                "model_ref", b"model_ref", "model_uid", b"model_uid", "params", b"params"
            ],
        ) -> None: ...

    LITERAL_FIELD_NUMBER: builtins.int
    MODEL_INFO_FIELD_NUMBER: builtins.int
    VECTOR_FIELD_NUMBER: builtins.int
    MATRIX_FIELD_NUMBER: builtins.int
    STAGE_FIELD_NUMBER: builtins.int
    MODEL_REF_FIELD_NUMBER: builtins.int
    @property
    def literal(self) -> pyspark.sql.connect.proto.expressions_pb2.Expression.Literal: ...
    @property
    def model_info(self) -> global___MlCommandResponse.ModelInfo: ...
    @property
    def vector(self) -> pyspark.sql.connect.proto.ml_common_pb2.Vector: ...
    @property
    def matrix(self) -> pyspark.sql.connect.proto.ml_common_pb2.Matrix: ...
    @property
    def stage(self) -> pyspark.sql.connect.proto.ml_common_pb2.MlStage: ...
    @property
    def model_ref(self) -> pyspark.sql.connect.proto.ml_common_pb2.ModelRef: ...
    def __init__(
        self,
        *,
        literal: pyspark.sql.connect.proto.expressions_pb2.Expression.Literal | None = ...,
        model_info: global___MlCommandResponse.ModelInfo | None = ...,
        vector: pyspark.sql.connect.proto.ml_common_pb2.Vector | None = ...,
        matrix: pyspark.sql.connect.proto.ml_common_pb2.Matrix | None = ...,
        stage: pyspark.sql.connect.proto.ml_common_pb2.MlStage | None = ...,
        model_ref: pyspark.sql.connect.proto.ml_common_pb2.ModelRef | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "literal",
            b"literal",
            "matrix",
            b"matrix",
            "ml_command_response_type",
            b"ml_command_response_type",
            "model_info",
            b"model_info",
            "model_ref",
            b"model_ref",
            "stage",
            b"stage",
            "vector",
            b"vector",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "literal",
            b"literal",
            "matrix",
            b"matrix",
            "ml_command_response_type",
            b"ml_command_response_type",
            "model_info",
            b"model_info",
            "model_ref",
            b"model_ref",
            "stage",
            b"stage",
            "vector",
            b"vector",
        ],
    ) -> None: ...
    def WhichOneof(
        self,
        oneof_group: typing_extensions.Literal[
            "ml_command_response_type", b"ml_command_response_type"
        ],
    ) -> typing_extensions.Literal[
        "literal", "model_info", "vector", "matrix", "stage", "model_ref"
    ] | None: ...

global___MlCommandResponse = MlCommandResponse
