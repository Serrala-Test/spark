#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import pyspark.sql.connect.proto.expressions_pb2
import pyspark.sql.connect.proto.ml_common_pb2
import pyspark.sql.connect.proto.relations_pb2
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class MlEvaluator(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    PARAMS_FIELD_NUMBER: builtins.int
    UID_FIELD_NUMBER: builtins.int
    name: builtins.str
    @property
    def params(self) -> pyspark.sql.connect.proto.ml_common_pb2.MlParams: ...
    uid: builtins.str
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        params: pyspark.sql.connect.proto.ml_common_pb2.MlParams | None = ...,
        uid: builtins.str = ...,
    ) -> None: ...
    def HasField(
        self, field_name: typing_extensions.Literal["params", b"params"]
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal["name", b"name", "params", b"params", "uid", b"uid"],
    ) -> None: ...

global___MlEvaluator = MlEvaluator

@typing_extensions.final
class MlCommand(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class Fit(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        ESTIMATOR_FIELD_NUMBER: builtins.int
        DATASET_FIELD_NUMBER: builtins.int
        @property
        def estimator(self) -> pyspark.sql.connect.proto.ml_common_pb2.MlStage: ...
        @property
        def dataset(self) -> pyspark.sql.connect.proto.relations_pb2.Relation: ...
        def __init__(
            self,
            *,
            estimator: pyspark.sql.connect.proto.ml_common_pb2.MlStage | None = ...,
            dataset: pyspark.sql.connect.proto.relations_pb2.Relation | None = ...,
        ) -> None: ...
        def HasField(
            self,
            field_name: typing_extensions.Literal["dataset", b"dataset", "estimator", b"estimator"],
        ) -> builtins.bool: ...
        def ClearField(
            self,
            field_name: typing_extensions.Literal["dataset", b"dataset", "estimator", b"estimator"],
        ) -> None: ...

    @typing_extensions.final
    class Evaluate(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        EVALUATOR_FIELD_NUMBER: builtins.int
        @property
        def evaluator(self) -> global___MlEvaluator: ...
        def __init__(
            self,
            *,
            evaluator: global___MlEvaluator | None = ...,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions.Literal["evaluator", b"evaluator"]
        ) -> builtins.bool: ...
        def ClearField(
            self, field_name: typing_extensions.Literal["evaluator", b"evaluator"]
        ) -> None: ...

    @typing_extensions.final
    class LoadModel(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        NAME_FIELD_NUMBER: builtins.int
        PATH_FIELD_NUMBER: builtins.int
        name: builtins.str
        path: builtins.str
        def __init__(
            self,
            *,
            name: builtins.str = ...,
            path: builtins.str = ...,
        ) -> None: ...
        def ClearField(
            self, field_name: typing_extensions.Literal["name", b"name", "path", b"path"]
        ) -> None: ...

    @typing_extensions.final
    class SaveModel(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        @typing_extensions.final
        class OptionsEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: builtins.str
            value: builtins.str
            def __init__(
                self,
                *,
                key: builtins.str = ...,
                value: builtins.str = ...,
            ) -> None: ...
            def ClearField(
                self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]
            ) -> None: ...

        MODEL_REF_ID_FIELD_NUMBER: builtins.int
        PATH_FIELD_NUMBER: builtins.int
        OVERWRITE_FIELD_NUMBER: builtins.int
        OPTIONS_FIELD_NUMBER: builtins.int
        model_ref_id: builtins.int
        path: builtins.str
        """saving path"""
        overwrite: builtins.bool
        @property
        def options(
            self,
        ) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
            """saving options"""
        def __init__(
            self,
            *,
            model_ref_id: builtins.int = ...,
            path: builtins.str = ...,
            overwrite: builtins.bool = ...,
            options: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        ) -> None: ...
        def ClearField(
            self,
            field_name: typing_extensions.Literal[
                "model_ref_id",
                b"model_ref_id",
                "options",
                b"options",
                "overwrite",
                b"overwrite",
                "path",
                b"path",
            ],
        ) -> None: ...

    @typing_extensions.final
    class LoadStage(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        NAME_FIELD_NUMBER: builtins.int
        PATH_FIELD_NUMBER: builtins.int
        TYPE_FIELD_NUMBER: builtins.int
        name: builtins.str
        path: builtins.str
        type: pyspark.sql.connect.proto.ml_common_pb2.MlStage.StageType.ValueType
        def __init__(
            self,
            *,
            name: builtins.str = ...,
            path: builtins.str = ...,
            type: pyspark.sql.connect.proto.ml_common_pb2.MlStage.StageType.ValueType = ...,
        ) -> None: ...
        def ClearField(
            self,
            field_name: typing_extensions.Literal[
                "name", b"name", "path", b"path", "type", b"type"
            ],
        ) -> None: ...

    @typing_extensions.final
    class SaveStage(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        @typing_extensions.final
        class OptionsEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: builtins.str
            value: builtins.str
            def __init__(
                self,
                *,
                key: builtins.str = ...,
                value: builtins.str = ...,
            ) -> None: ...
            def ClearField(
                self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]
            ) -> None: ...

        STAGE_FIELD_NUMBER: builtins.int
        PATH_FIELD_NUMBER: builtins.int
        OVERWRITE_FIELD_NUMBER: builtins.int
        OPTIONS_FIELD_NUMBER: builtins.int
        @property
        def stage(self) -> pyspark.sql.connect.proto.ml_common_pb2.MlStage: ...
        path: builtins.str
        """saving path"""
        overwrite: builtins.bool
        @property
        def options(
            self,
        ) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
            """saving options"""
        def __init__(
            self,
            *,
            stage: pyspark.sql.connect.proto.ml_common_pb2.MlStage | None = ...,
            path: builtins.str = ...,
            overwrite: builtins.bool = ...,
            options: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions.Literal["stage", b"stage"]
        ) -> builtins.bool: ...
        def ClearField(
            self,
            field_name: typing_extensions.Literal[
                "options", b"options", "overwrite", b"overwrite", "path", b"path", "stage", b"stage"
            ],
        ) -> None: ...

    @typing_extensions.final
    class LoadEvaluator(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        NAME_FIELD_NUMBER: builtins.int
        PATH_FIELD_NUMBER: builtins.int
        name: builtins.str
        path: builtins.str
        def __init__(
            self,
            *,
            name: builtins.str = ...,
            path: builtins.str = ...,
        ) -> None: ...
        def ClearField(
            self, field_name: typing_extensions.Literal["name", b"name", "path", b"path"]
        ) -> None: ...

    @typing_extensions.final
    class SaveEvaluator(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        @typing_extensions.final
        class OptionsEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: builtins.str
            value: builtins.str
            def __init__(
                self,
                *,
                key: builtins.str = ...,
                value: builtins.str = ...,
            ) -> None: ...
            def ClearField(
                self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]
            ) -> None: ...

        EVALUATOR_FIELD_NUMBER: builtins.int
        PATH_FIELD_NUMBER: builtins.int
        OVERWRITE_FIELD_NUMBER: builtins.int
        OPTIONS_FIELD_NUMBER: builtins.int
        @property
        def evaluator(self) -> global___MlEvaluator: ...
        path: builtins.str
        """saving path"""
        overwrite: builtins.bool
        @property
        def options(
            self,
        ) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
            """saving options"""
        def __init__(
            self,
            *,
            evaluator: global___MlEvaluator | None = ...,
            path: builtins.str = ...,
            overwrite: builtins.bool = ...,
            options: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions.Literal["evaluator", b"evaluator"]
        ) -> builtins.bool: ...
        def ClearField(
            self,
            field_name: typing_extensions.Literal[
                "evaluator",
                b"evaluator",
                "options",
                b"options",
                "overwrite",
                b"overwrite",
                "path",
                b"path",
            ],
        ) -> None: ...

    @typing_extensions.final
    class FetchModelAttr(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        MODEL_REF_ID_FIELD_NUMBER: builtins.int
        NAME_FIELD_NUMBER: builtins.int
        model_ref_id: builtins.int
        name: builtins.str
        def __init__(
            self,
            *,
            model_ref_id: builtins.int = ...,
            name: builtins.str = ...,
        ) -> None: ...
        def ClearField(
            self,
            field_name: typing_extensions.Literal["model_ref_id", b"model_ref_id", "name", b"name"],
        ) -> None: ...

    @typing_extensions.final
    class FetchModelSummaryAttr(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        MODEL_REF_ID_FIELD_NUMBER: builtins.int
        NAME_FIELD_NUMBER: builtins.int
        PARAMS_FIELD_NUMBER: builtins.int
        EVALUATION_DATASET_FIELD_NUMBER: builtins.int
        model_ref_id: builtins.int
        name: builtins.str
        @property
        def params(self) -> pyspark.sql.connect.proto.ml_common_pb2.MlParams: ...
        @property
        def evaluation_dataset(self) -> pyspark.sql.connect.proto.relations_pb2.Relation:
            """Evaluation dataset that it uses to computes
            the summary attribute
            If not set, get attributes from
            model.summary (i.e. the summary on training dataset)
            """
        def __init__(
            self,
            *,
            model_ref_id: builtins.int = ...,
            name: builtins.str = ...,
            params: pyspark.sql.connect.proto.ml_common_pb2.MlParams | None = ...,
            evaluation_dataset: pyspark.sql.connect.proto.relations_pb2.Relation | None = ...,
        ) -> None: ...
        def HasField(
            self,
            field_name: typing_extensions.Literal[
                "_evaluation_dataset",
                b"_evaluation_dataset",
                "evaluation_dataset",
                b"evaluation_dataset",
                "params",
                b"params",
            ],
        ) -> builtins.bool: ...
        def ClearField(
            self,
            field_name: typing_extensions.Literal[
                "_evaluation_dataset",
                b"_evaluation_dataset",
                "evaluation_dataset",
                b"evaluation_dataset",
                "model_ref_id",
                b"model_ref_id",
                "name",
                b"name",
                "params",
                b"params",
            ],
        ) -> None: ...
        def WhichOneof(
            self,
            oneof_group: typing_extensions.Literal["_evaluation_dataset", b"_evaluation_dataset"],
        ) -> typing_extensions.Literal["evaluation_dataset"] | None: ...

    @typing_extensions.final
    class CopyModel(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        MODEL_REF_ID_FIELD_NUMBER: builtins.int
        model_ref_id: builtins.int
        def __init__(
            self,
            *,
            model_ref_id: builtins.int = ...,
        ) -> None: ...
        def ClearField(
            self, field_name: typing_extensions.Literal["model_ref_id", b"model_ref_id"]
        ) -> None: ...

    FIT_FIELD_NUMBER: builtins.int
    FETCH_MODEL_ATTR_FIELD_NUMBER: builtins.int
    FETCH_MODEL_SUMMARY_ATTR_FIELD_NUMBER: builtins.int
    LOAD_MODEL_FIELD_NUMBER: builtins.int
    SAVE_MODEL_FIELD_NUMBER: builtins.int
    EVALUATE_FIELD_NUMBER: builtins.int
    SAVE_STAGE_FIELD_NUMBER: builtins.int
    LOAD_STAGE_FIELD_NUMBER: builtins.int
    SAVE_EVALUATOR_FIELD_NUMBER: builtins.int
    LOAD_EVALUATOR_FIELD_NUMBER: builtins.int
    COPY_MODEL_FIELD_NUMBER: builtins.int
    @property
    def fit(self) -> global___MlCommand.Fit: ...
    @property
    def fetch_model_attr(self) -> global___MlCommand.FetchModelAttr: ...
    @property
    def fetch_model_summary_attr(self) -> global___MlCommand.FetchModelSummaryAttr: ...
    @property
    def load_model(self) -> global___MlCommand.LoadModel: ...
    @property
    def save_model(self) -> global___MlCommand.SaveModel: ...
    @property
    def evaluate(self) -> global___MlCommand.Evaluate: ...
    @property
    def save_stage(self) -> global___MlCommand.SaveStage: ...
    @property
    def load_stage(self) -> global___MlCommand.LoadStage: ...
    @property
    def save_evaluator(self) -> global___MlCommand.SaveEvaluator: ...
    @property
    def load_evaluator(self) -> global___MlCommand.LoadEvaluator: ...
    @property
    def copy_model(self) -> global___MlCommand.CopyModel: ...
    def __init__(
        self,
        *,
        fit: global___MlCommand.Fit | None = ...,
        fetch_model_attr: global___MlCommand.FetchModelAttr | None = ...,
        fetch_model_summary_attr: global___MlCommand.FetchModelSummaryAttr | None = ...,
        load_model: global___MlCommand.LoadModel | None = ...,
        save_model: global___MlCommand.SaveModel | None = ...,
        evaluate: global___MlCommand.Evaluate | None = ...,
        save_stage: global___MlCommand.SaveStage | None = ...,
        load_stage: global___MlCommand.LoadStage | None = ...,
        save_evaluator: global___MlCommand.SaveEvaluator | None = ...,
        load_evaluator: global___MlCommand.LoadEvaluator | None = ...,
        copy_model: global___MlCommand.CopyModel | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "copy_model",
            b"copy_model",
            "evaluate",
            b"evaluate",
            "fetch_model_attr",
            b"fetch_model_attr",
            "fetch_model_summary_attr",
            b"fetch_model_summary_attr",
            "fit",
            b"fit",
            "load_evaluator",
            b"load_evaluator",
            "load_model",
            b"load_model",
            "load_stage",
            b"load_stage",
            "ml_command_type",
            b"ml_command_type",
            "save_evaluator",
            b"save_evaluator",
            "save_model",
            b"save_model",
            "save_stage",
            b"save_stage",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "copy_model",
            b"copy_model",
            "evaluate",
            b"evaluate",
            "fetch_model_attr",
            b"fetch_model_attr",
            "fetch_model_summary_attr",
            b"fetch_model_summary_attr",
            "fit",
            b"fit",
            "load_evaluator",
            b"load_evaluator",
            "load_model",
            b"load_model",
            "load_stage",
            b"load_stage",
            "ml_command_type",
            b"ml_command_type",
            "save_evaluator",
            b"save_evaluator",
            "save_model",
            b"save_model",
            "save_stage",
            b"save_stage",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["ml_command_type", b"ml_command_type"]
    ) -> typing_extensions.Literal[
        "fit",
        "fetch_model_attr",
        "fetch_model_summary_attr",
        "load_model",
        "save_model",
        "evaluate",
        "save_stage",
        "load_stage",
        "save_evaluator",
        "load_evaluator",
        "copy_model",
    ] | None: ...

global___MlCommand = MlCommand

@typing_extensions.final
class MlCommandResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class ModelInfo(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        MODEL_REF_ID_FIELD_NUMBER: builtins.int
        MODEL_UID_FIELD_NUMBER: builtins.int
        model_ref_id: builtins.int
        model_uid: builtins.str
        def __init__(
            self,
            *,
            model_ref_id: builtins.int = ...,
            model_uid: builtins.str = ...,
        ) -> None: ...
        def ClearField(
            self,
            field_name: typing_extensions.Literal[
                "model_ref_id", b"model_ref_id", "model_uid", b"model_uid"
            ],
        ) -> None: ...

    LITERAL_FIELD_NUMBER: builtins.int
    MODEL_INFO_FIELD_NUMBER: builtins.int
    VECTOR_FIELD_NUMBER: builtins.int
    MATRIX_FIELD_NUMBER: builtins.int
    STAGE_FIELD_NUMBER: builtins.int
    @property
    def literal(self) -> pyspark.sql.connect.proto.expressions_pb2.Expression.Literal: ...
    @property
    def model_info(self) -> global___MlCommandResponse.ModelInfo: ...
    @property
    def vector(self) -> global___Vector: ...
    @property
    def matrix(self) -> global___Matrix: ...
    @property
    def stage(self) -> pyspark.sql.connect.proto.ml_common_pb2.MlStage: ...
    def __init__(
        self,
        *,
        literal: pyspark.sql.connect.proto.expressions_pb2.Expression.Literal | None = ...,
        model_info: global___MlCommandResponse.ModelInfo | None = ...,
        vector: global___Vector | None = ...,
        matrix: global___Matrix | None = ...,
        stage: pyspark.sql.connect.proto.ml_common_pb2.MlStage | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "literal",
            b"literal",
            "matrix",
            b"matrix",
            "ml_command_response_type",
            b"ml_command_response_type",
            "model_info",
            b"model_info",
            "stage",
            b"stage",
            "vector",
            b"vector",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "literal",
            b"literal",
            "matrix",
            b"matrix",
            "ml_command_response_type",
            b"ml_command_response_type",
            "model_info",
            b"model_info",
            "stage",
            b"stage",
            "vector",
            b"vector",
        ],
    ) -> None: ...
    def WhichOneof(
        self,
        oneof_group: typing_extensions.Literal[
            "ml_command_response_type", b"ml_command_response_type"
        ],
    ) -> typing_extensions.Literal["literal", "model_info", "vector", "matrix", "stage"] | None: ...

global___MlCommandResponse = MlCommandResponse

@typing_extensions.final
class Vector(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class Dense(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        VALUE_FIELD_NUMBER: builtins.int
        @property
        def value(
            self,
        ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
        def __init__(
            self,
            *,
            value: collections.abc.Iterable[builtins.float] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["value", b"value"]) -> None: ...

    @typing_extensions.final
    class Sparse(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        SIZE_FIELD_NUMBER: builtins.int
        INDEX_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        size: builtins.int
        @property
        def index(
            self,
        ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
        @property
        def value(
            self,
        ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
        def __init__(
            self,
            *,
            size: builtins.int = ...,
            index: collections.abc.Iterable[builtins.float] | None = ...,
            value: collections.abc.Iterable[builtins.float] | None = ...,
        ) -> None: ...
        def ClearField(
            self,
            field_name: typing_extensions.Literal[
                "index", b"index", "size", b"size", "value", b"value"
            ],
        ) -> None: ...

    DENSE_FIELD_NUMBER: builtins.int
    SPARSE_FIELD_NUMBER: builtins.int
    @property
    def dense(self) -> global___Vector.Dense: ...
    @property
    def sparse(self) -> global___Vector.Sparse: ...
    def __init__(
        self,
        *,
        dense: global___Vector.Dense | None = ...,
        sparse: global___Vector.Sparse | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "dense", b"dense", "one_of", b"one_of", "sparse", b"sparse"
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "dense", b"dense", "one_of", b"one_of", "sparse", b"sparse"
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["one_of", b"one_of"]
    ) -> typing_extensions.Literal["dense", "sparse"] | None: ...

global___Vector = Vector

@typing_extensions.final
class Matrix(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class Dense(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        NUM_ROWS_FIELD_NUMBER: builtins.int
        NUM_COLS_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        IS_TRANSPOSED_FIELD_NUMBER: builtins.int
        num_rows: builtins.int
        num_cols: builtins.int
        @property
        def value(
            self,
        ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
        is_transposed: builtins.bool
        def __init__(
            self,
            *,
            num_rows: builtins.int = ...,
            num_cols: builtins.int = ...,
            value: collections.abc.Iterable[builtins.float] | None = ...,
            is_transposed: builtins.bool = ...,
        ) -> None: ...
        def ClearField(
            self,
            field_name: typing_extensions.Literal[
                "is_transposed",
                b"is_transposed",
                "num_cols",
                b"num_cols",
                "num_rows",
                b"num_rows",
                "value",
                b"value",
            ],
        ) -> None: ...

    @typing_extensions.final
    class Sparse(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        NUM_ROWS_FIELD_NUMBER: builtins.int
        NUM_COLS_FIELD_NUMBER: builtins.int
        COLPTR_FIELD_NUMBER: builtins.int
        ROW_INDEX_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        IS_TRANSPOSED_FIELD_NUMBER: builtins.int
        num_rows: builtins.int
        num_cols: builtins.int
        @property
        def colptr(
            self,
        ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
        @property
        def row_index(
            self,
        ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
        @property
        def value(
            self,
        ) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
        is_transposed: builtins.bool
        def __init__(
            self,
            *,
            num_rows: builtins.int = ...,
            num_cols: builtins.int = ...,
            colptr: collections.abc.Iterable[builtins.float] | None = ...,
            row_index: collections.abc.Iterable[builtins.float] | None = ...,
            value: collections.abc.Iterable[builtins.float] | None = ...,
            is_transposed: builtins.bool = ...,
        ) -> None: ...
        def ClearField(
            self,
            field_name: typing_extensions.Literal[
                "colptr",
                b"colptr",
                "is_transposed",
                b"is_transposed",
                "num_cols",
                b"num_cols",
                "num_rows",
                b"num_rows",
                "row_index",
                b"row_index",
                "value",
                b"value",
            ],
        ) -> None: ...

    DENSE_FIELD_NUMBER: builtins.int
    SPARSE_FIELD_NUMBER: builtins.int
    @property
    def dense(self) -> global___Matrix.Dense: ...
    @property
    def sparse(self) -> global___Matrix.Sparse: ...
    def __init__(
        self,
        *,
        dense: global___Matrix.Dense | None = ...,
        sparse: global___Matrix.Sparse | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "dense", b"dense", "one_of", b"one_of", "sparse", b"sparse"
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "dense", b"dense", "one_of", b"one_of", "sparse", b"sparse"
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["one_of", b"one_of"]
    ) -> typing_extensions.Literal["dense", "sparse"] | None: ...

global___Matrix = Matrix
