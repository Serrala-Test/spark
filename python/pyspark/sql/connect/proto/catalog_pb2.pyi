#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)

from google.protobuf.internal.containers import (
    ScalarMap as google___protobuf___internal___containers___ScalarMap,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from pyspark.sql.connect.proto.common_pb2 import (
    StorageLevel as spark___connect___common_pb2___StorageLevel,
)

from pyspark.sql.connect.proto.types_pb2 import (
    DataType as spark___connect___types_pb2___DataType,
)

from typing import (
    Mapping as typing___Mapping,
    Optional as typing___Optional,
    Text as typing___Text,
    overload as typing___overload,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)

builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int

DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class Catalog(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    @property
    def current_database(self) -> type___CurrentDatabase: ...
    @property
    def set_current_database(self) -> type___SetCurrentDatabase: ...
    @property
    def list_databases(self) -> type___ListDatabases: ...
    @property
    def list_tables(self) -> type___ListTables: ...
    @property
    def list_functions(self) -> type___ListFunctions: ...
    @property
    def list_columns(self) -> type___ListColumns: ...
    @property
    def get_database(self) -> type___GetDatabase: ...
    @property
    def get_table(self) -> type___GetTable: ...
    @property
    def get_function(self) -> type___GetFunction: ...
    @property
    def database_exists(self) -> type___DatabaseExists: ...
    @property
    def table_exists(self) -> type___TableExists: ...
    @property
    def function_exists(self) -> type___FunctionExists: ...
    @property
    def create_external_table(self) -> type___CreateExternalTable: ...
    @property
    def create_table(self) -> type___CreateTable: ...
    @property
    def drop_temp_view(self) -> type___DropTempView: ...
    @property
    def drop_global_temp_view(self) -> type___DropGlobalTempView: ...
    @property
    def recover_partitions(self) -> type___RecoverPartitions: ...
    @property
    def is_cached(self) -> type___IsCached: ...
    @property
    def cache_table(self) -> type___CacheTable: ...
    @property
    def uncache_table(self) -> type___UncacheTable: ...
    @property
    def clear_cache(self) -> type___ClearCache: ...
    @property
    def refresh_table(self) -> type___RefreshTable: ...
    @property
    def refresh_by_path(self) -> type___RefreshByPath: ...
    @property
    def current_catalog(self) -> type___CurrentCatalog: ...
    @property
    def set_current_catalog(self) -> type___SetCurrentCatalog: ...
    @property
    def list_catalogs(self) -> type___ListCatalogs: ...
    def __init__(
        self,
        *,
        current_database: typing___Optional[type___CurrentDatabase] = None,
        set_current_database: typing___Optional[type___SetCurrentDatabase] = None,
        list_databases: typing___Optional[type___ListDatabases] = None,
        list_tables: typing___Optional[type___ListTables] = None,
        list_functions: typing___Optional[type___ListFunctions] = None,
        list_columns: typing___Optional[type___ListColumns] = None,
        get_database: typing___Optional[type___GetDatabase] = None,
        get_table: typing___Optional[type___GetTable] = None,
        get_function: typing___Optional[type___GetFunction] = None,
        database_exists: typing___Optional[type___DatabaseExists] = None,
        table_exists: typing___Optional[type___TableExists] = None,
        function_exists: typing___Optional[type___FunctionExists] = None,
        create_external_table: typing___Optional[type___CreateExternalTable] = None,
        create_table: typing___Optional[type___CreateTable] = None,
        drop_temp_view: typing___Optional[type___DropTempView] = None,
        drop_global_temp_view: typing___Optional[type___DropGlobalTempView] = None,
        recover_partitions: typing___Optional[type___RecoverPartitions] = None,
        is_cached: typing___Optional[type___IsCached] = None,
        cache_table: typing___Optional[type___CacheTable] = None,
        uncache_table: typing___Optional[type___UncacheTable] = None,
        clear_cache: typing___Optional[type___ClearCache] = None,
        refresh_table: typing___Optional[type___RefreshTable] = None,
        refresh_by_path: typing___Optional[type___RefreshByPath] = None,
        current_catalog: typing___Optional[type___CurrentCatalog] = None,
        set_current_catalog: typing___Optional[type___SetCurrentCatalog] = None,
        list_catalogs: typing___Optional[type___ListCatalogs] = None,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions___Literal[
            "cache_table",
            b"cache_table",
            "cat_type",
            b"cat_type",
            "clear_cache",
            b"clear_cache",
            "create_external_table",
            b"create_external_table",
            "create_table",
            b"create_table",
            "current_catalog",
            b"current_catalog",
            "current_database",
            b"current_database",
            "database_exists",
            b"database_exists",
            "drop_global_temp_view",
            b"drop_global_temp_view",
            "drop_temp_view",
            b"drop_temp_view",
            "function_exists",
            b"function_exists",
            "get_database",
            b"get_database",
            "get_function",
            b"get_function",
            "get_table",
            b"get_table",
            "is_cached",
            b"is_cached",
            "list_catalogs",
            b"list_catalogs",
            "list_columns",
            b"list_columns",
            "list_databases",
            b"list_databases",
            "list_functions",
            b"list_functions",
            "list_tables",
            b"list_tables",
            "recover_partitions",
            b"recover_partitions",
            "refresh_by_path",
            b"refresh_by_path",
            "refresh_table",
            b"refresh_table",
            "set_current_catalog",
            b"set_current_catalog",
            "set_current_database",
            b"set_current_database",
            "table_exists",
            b"table_exists",
            "uncache_table",
            b"uncache_table",
        ],
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "cache_table",
            b"cache_table",
            "cat_type",
            b"cat_type",
            "clear_cache",
            b"clear_cache",
            "create_external_table",
            b"create_external_table",
            "create_table",
            b"create_table",
            "current_catalog",
            b"current_catalog",
            "current_database",
            b"current_database",
            "database_exists",
            b"database_exists",
            "drop_global_temp_view",
            b"drop_global_temp_view",
            "drop_temp_view",
            b"drop_temp_view",
            "function_exists",
            b"function_exists",
            "get_database",
            b"get_database",
            "get_function",
            b"get_function",
            "get_table",
            b"get_table",
            "is_cached",
            b"is_cached",
            "list_catalogs",
            b"list_catalogs",
            "list_columns",
            b"list_columns",
            "list_databases",
            b"list_databases",
            "list_functions",
            b"list_functions",
            "list_tables",
            b"list_tables",
            "recover_partitions",
            b"recover_partitions",
            "refresh_by_path",
            b"refresh_by_path",
            "refresh_table",
            b"refresh_table",
            "set_current_catalog",
            b"set_current_catalog",
            "set_current_database",
            b"set_current_database",
            "table_exists",
            b"table_exists",
            "uncache_table",
            b"uncache_table",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["cat_type", b"cat_type"]
    ) -> typing_extensions___Literal[
        "current_database",
        "set_current_database",
        "list_databases",
        "list_tables",
        "list_functions",
        "list_columns",
        "get_database",
        "get_table",
        "get_function",
        "database_exists",
        "table_exists",
        "function_exists",
        "create_external_table",
        "create_table",
        "drop_temp_view",
        "drop_global_temp_view",
        "recover_partitions",
        "is_cached",
        "cache_table",
        "uncache_table",
        "clear_cache",
        "refresh_table",
        "refresh_by_path",
        "current_catalog",
        "set_current_catalog",
        "list_catalogs",
    ]: ...

type___Catalog = Catalog

class CurrentDatabase(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    def __init__(
        self,
    ) -> None: ...

type___CurrentDatabase = CurrentDatabase

class SetCurrentDatabase(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    db_name: typing___Text = ...

    def __init__(
        self,
        *,
        db_name: typing___Optional[typing___Text] = None,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions___Literal["db_name", b"db_name"]
    ) -> None: ...

type___SetCurrentDatabase = SetCurrentDatabase

class ListDatabases(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    def __init__(
        self,
    ) -> None: ...

type___ListDatabases = ListDatabases

class ListTables(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    db_name: typing___Text = ...

    def __init__(
        self,
        *,
        db_name: typing___Optional[typing___Text] = None,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions___Literal["_db_name", b"_db_name", "db_name", b"db_name"],
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal["_db_name", b"_db_name", "db_name", b"db_name"],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_db_name", b"_db_name"]
    ) -> typing_extensions___Literal["db_name"]: ...

type___ListTables = ListTables

class ListFunctions(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    db_name: typing___Text = ...

    def __init__(
        self,
        *,
        db_name: typing___Optional[typing___Text] = None,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions___Literal["_db_name", b"_db_name", "db_name", b"db_name"],
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal["_db_name", b"_db_name", "db_name", b"db_name"],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_db_name", b"_db_name"]
    ) -> typing_extensions___Literal["db_name"]: ...

type___ListFunctions = ListFunctions

class ListColumns(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    table_name: typing___Text = ...
    db_name: typing___Text = ...

    def __init__(
        self,
        *,
        table_name: typing___Optional[typing___Text] = None,
        db_name: typing___Optional[typing___Text] = None,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions___Literal["_db_name", b"_db_name", "db_name", b"db_name"],
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "_db_name", b"_db_name", "db_name", b"db_name", "table_name", b"table_name"
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_db_name", b"_db_name"]
    ) -> typing_extensions___Literal["db_name"]: ...

type___ListColumns = ListColumns

class GetDatabase(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    db_name: typing___Text = ...

    def __init__(
        self,
        *,
        db_name: typing___Optional[typing___Text] = None,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions___Literal["db_name", b"db_name"]
    ) -> None: ...

type___GetDatabase = GetDatabase

class GetTable(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    table_name: typing___Text = ...
    db_name: typing___Text = ...

    def __init__(
        self,
        *,
        table_name: typing___Optional[typing___Text] = None,
        db_name: typing___Optional[typing___Text] = None,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions___Literal["_db_name", b"_db_name", "db_name", b"db_name"],
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "_db_name", b"_db_name", "db_name", b"db_name", "table_name", b"table_name"
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_db_name", b"_db_name"]
    ) -> typing_extensions___Literal["db_name"]: ...

type___GetTable = GetTable

class GetFunction(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    function_name: typing___Text = ...
    db_name: typing___Text = ...

    def __init__(
        self,
        *,
        function_name: typing___Optional[typing___Text] = None,
        db_name: typing___Optional[typing___Text] = None,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions___Literal["_db_name", b"_db_name", "db_name", b"db_name"],
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "_db_name", b"_db_name", "db_name", b"db_name", "function_name", b"function_name"
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_db_name", b"_db_name"]
    ) -> typing_extensions___Literal["db_name"]: ...

type___GetFunction = GetFunction

class DatabaseExists(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    db_name: typing___Text = ...

    def __init__(
        self,
        *,
        db_name: typing___Optional[typing___Text] = None,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions___Literal["db_name", b"db_name"]
    ) -> None: ...

type___DatabaseExists = DatabaseExists

class TableExists(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    table_name: typing___Text = ...
    db_name: typing___Text = ...

    def __init__(
        self,
        *,
        table_name: typing___Optional[typing___Text] = None,
        db_name: typing___Optional[typing___Text] = None,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions___Literal["_db_name", b"_db_name", "db_name", b"db_name"],
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "_db_name", b"_db_name", "db_name", b"db_name", "table_name", b"table_name"
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_db_name", b"_db_name"]
    ) -> typing_extensions___Literal["db_name"]: ...

type___TableExists = TableExists

class FunctionExists(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    function_name: typing___Text = ...
    db_name: typing___Text = ...

    def __init__(
        self,
        *,
        function_name: typing___Optional[typing___Text] = None,
        db_name: typing___Optional[typing___Text] = None,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions___Literal["_db_name", b"_db_name", "db_name", b"db_name"],
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "_db_name", b"_db_name", "db_name", b"db_name", "function_name", b"function_name"
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_db_name", b"_db_name"]
    ) -> typing_extensions___Literal["db_name"]: ...

type___FunctionExists = FunctionExists

class CreateExternalTable(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    class OptionsEntry(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        key: typing___Text = ...
        value: typing___Text = ...

        def __init__(
            self,
            *,
            key: typing___Optional[typing___Text] = None,
            value: typing___Optional[typing___Text] = None,
        ) -> None: ...
        def ClearField(
            self, field_name: typing_extensions___Literal["key", b"key", "value", b"value"]
        ) -> None: ...
    type___OptionsEntry = OptionsEntry

    table_name: typing___Text = ...
    path: typing___Text = ...
    source: typing___Text = ...

    @property
    def schema(self) -> spark___connect___types_pb2___DataType: ...
    @property
    def options(
        self,
    ) -> google___protobuf___internal___containers___ScalarMap[typing___Text, typing___Text]: ...
    def __init__(
        self,
        *,
        table_name: typing___Optional[typing___Text] = None,
        path: typing___Optional[typing___Text] = None,
        source: typing___Optional[typing___Text] = None,
        schema: typing___Optional[spark___connect___types_pb2___DataType] = None,
        options: typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions___Literal[
            "_path",
            b"_path",
            "_schema",
            b"_schema",
            "_source",
            b"_source",
            "path",
            b"path",
            "schema",
            b"schema",
            "source",
            b"source",
        ],
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "_path",
            b"_path",
            "_schema",
            b"_schema",
            "_source",
            b"_source",
            "options",
            b"options",
            "path",
            b"path",
            "schema",
            b"schema",
            "source",
            b"source",
            "table_name",
            b"table_name",
        ],
    ) -> None: ...
    @typing___overload
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_path", b"_path"]
    ) -> typing_extensions___Literal["path"]: ...
    @typing___overload
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_schema", b"_schema"]
    ) -> typing_extensions___Literal["schema"]: ...
    @typing___overload
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_source", b"_source"]
    ) -> typing_extensions___Literal["source"]: ...

type___CreateExternalTable = CreateExternalTable

class CreateTable(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    class OptionsEntry(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        key: typing___Text = ...
        value: typing___Text = ...

        def __init__(
            self,
            *,
            key: typing___Optional[typing___Text] = None,
            value: typing___Optional[typing___Text] = None,
        ) -> None: ...
        def ClearField(
            self, field_name: typing_extensions___Literal["key", b"key", "value", b"value"]
        ) -> None: ...
    type___OptionsEntry = OptionsEntry

    table_name: typing___Text = ...
    path: typing___Text = ...
    source: typing___Text = ...
    description: typing___Text = ...

    @property
    def schema(self) -> spark___connect___types_pb2___DataType: ...
    @property
    def options(
        self,
    ) -> google___protobuf___internal___containers___ScalarMap[typing___Text, typing___Text]: ...
    def __init__(
        self,
        *,
        table_name: typing___Optional[typing___Text] = None,
        path: typing___Optional[typing___Text] = None,
        source: typing___Optional[typing___Text] = None,
        description: typing___Optional[typing___Text] = None,
        schema: typing___Optional[spark___connect___types_pb2___DataType] = None,
        options: typing___Optional[typing___Mapping[typing___Text, typing___Text]] = None,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions___Literal[
            "_description",
            b"_description",
            "_path",
            b"_path",
            "_schema",
            b"_schema",
            "_source",
            b"_source",
            "description",
            b"description",
            "path",
            b"path",
            "schema",
            b"schema",
            "source",
            b"source",
        ],
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "_description",
            b"_description",
            "_path",
            b"_path",
            "_schema",
            b"_schema",
            "_source",
            b"_source",
            "description",
            b"description",
            "options",
            b"options",
            "path",
            b"path",
            "schema",
            b"schema",
            "source",
            b"source",
            "table_name",
            b"table_name",
        ],
    ) -> None: ...
    @typing___overload
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_description", b"_description"]
    ) -> typing_extensions___Literal["description"]: ...
    @typing___overload
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_path", b"_path"]
    ) -> typing_extensions___Literal["path"]: ...
    @typing___overload
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_schema", b"_schema"]
    ) -> typing_extensions___Literal["schema"]: ...
    @typing___overload
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_source", b"_source"]
    ) -> typing_extensions___Literal["source"]: ...

type___CreateTable = CreateTable

class DropTempView(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    view_name: typing___Text = ...

    def __init__(
        self,
        *,
        view_name: typing___Optional[typing___Text] = None,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions___Literal["view_name", b"view_name"]
    ) -> None: ...

type___DropTempView = DropTempView

class DropGlobalTempView(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    view_name: typing___Text = ...

    def __init__(
        self,
        *,
        view_name: typing___Optional[typing___Text] = None,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions___Literal["view_name", b"view_name"]
    ) -> None: ...

type___DropGlobalTempView = DropGlobalTempView

class RecoverPartitions(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    table_name: typing___Text = ...

    def __init__(
        self,
        *,
        table_name: typing___Optional[typing___Text] = None,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions___Literal["table_name", b"table_name"]
    ) -> None: ...

type___RecoverPartitions = RecoverPartitions

class IsCached(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    table_name: typing___Text = ...

    def __init__(
        self,
        *,
        table_name: typing___Optional[typing___Text] = None,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions___Literal["table_name", b"table_name"]
    ) -> None: ...

type___IsCached = IsCached

class CacheTable(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    table_name: typing___Text = ...

    @property
    def storage_level(self) -> spark___connect___common_pb2___StorageLevel: ...
    def __init__(
        self,
        *,
        table_name: typing___Optional[typing___Text] = None,
        storage_level: typing___Optional[spark___connect___common_pb2___StorageLevel] = None,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions___Literal[
            "_storage_level", b"_storage_level", "storage_level", b"storage_level"
        ],
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "_storage_level",
            b"_storage_level",
            "storage_level",
            b"storage_level",
            "table_name",
            b"table_name",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_storage_level", b"_storage_level"]
    ) -> typing_extensions___Literal["storage_level"]: ...

type___CacheTable = CacheTable

class UncacheTable(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    table_name: typing___Text = ...

    def __init__(
        self,
        *,
        table_name: typing___Optional[typing___Text] = None,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions___Literal["table_name", b"table_name"]
    ) -> None: ...

type___UncacheTable = UncacheTable

class ClearCache(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    def __init__(
        self,
    ) -> None: ...

type___ClearCache = ClearCache

class RefreshTable(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    table_name: typing___Text = ...

    def __init__(
        self,
        *,
        table_name: typing___Optional[typing___Text] = None,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions___Literal["table_name", b"table_name"]
    ) -> None: ...

type___RefreshTable = RefreshTable

class RefreshByPath(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    path: typing___Text = ...

    def __init__(
        self,
        *,
        path: typing___Optional[typing___Text] = None,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions___Literal["path", b"path"]) -> None: ...

type___RefreshByPath = RefreshByPath

class CurrentCatalog(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    def __init__(
        self,
    ) -> None: ...

type___CurrentCatalog = CurrentCatalog

class SetCurrentCatalog(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    catalog_name: typing___Text = ...

    def __init__(
        self,
        *,
        catalog_name: typing___Optional[typing___Text] = None,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions___Literal["catalog_name", b"catalog_name"]
    ) -> None: ...

type___SetCurrentCatalog = SetCurrentCatalog

class ListCatalogs(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    def __init__(
        self,
    ) -> None: ...

type___ListCatalogs = ListCatalogs
