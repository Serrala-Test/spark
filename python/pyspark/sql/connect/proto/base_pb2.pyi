#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
from google.protobuf.any_pb2 import (
    Any as google___protobuf___any_pb2___Any,
)

from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)

from google.protobuf.internal.containers import (
    MessageMap as google___protobuf___internal___containers___MessageMap,
    RepeatedCompositeFieldContainer as google___protobuf___internal___containers___RepeatedCompositeFieldContainer,
    RepeatedScalarFieldContainer as google___protobuf___internal___containers___RepeatedScalarFieldContainer,
)

from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper as google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from pyspark.sql.connect.proto.commands_pb2 import (
    Command as spark___connect___commands_pb2___Command,
    GetResourcesCommandResult as spark___connect___commands_pb2___GetResourcesCommandResult,
    StreamingQueryCommandResult as spark___connect___commands_pb2___StreamingQueryCommandResult,
    StreamingQueryManagerCommandResult as spark___connect___commands_pb2___StreamingQueryManagerCommandResult,
    WriteStreamOperationStartResult as spark___connect___commands_pb2___WriteStreamOperationStartResult,
)

from pyspark.sql.connect.proto.common_pb2 import (
    StorageLevel as spark___connect___common_pb2___StorageLevel,
)

from pyspark.sql.connect.proto.expressions_pb2 import (
    Expression as spark___connect___expressions_pb2___Expression,
)

from pyspark.sql.connect.proto.relations_pb2 import (
    Relation as spark___connect___relations_pb2___Relation,
)

from pyspark.sql.connect.proto.types_pb2 import (
    DataType as spark___connect___types_pb2___DataType,
)

from typing import (
    Iterable as typing___Iterable,
    Mapping as typing___Mapping,
    NewType as typing___NewType,
    Optional as typing___Optional,
    Text as typing___Text,
    cast as typing___cast,
    overload as typing___overload,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)

builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int

DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class Plan(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    @property
    def root(self) -> spark___connect___relations_pb2___Relation: ...
    @property
    def command(self) -> spark___connect___commands_pb2___Command: ...
    def __init__(
        self,
        *,
        root: typing___Optional[spark___connect___relations_pb2___Relation] = None,
        command: typing___Optional[spark___connect___commands_pb2___Command] = None,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions___Literal[
            "command", b"command", "op_type", b"op_type", "root", b"root"
        ],
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "command", b"command", "op_type", b"op_type", "root", b"root"
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["op_type", b"op_type"]
    ) -> typing_extensions___Literal["root", "command"]: ...

type___Plan = Plan

class UserContext(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    user_id: typing___Text = ...
    user_name: typing___Text = ...

    @property
    def extensions(
        self,
    ) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[
        google___protobuf___any_pb2___Any
    ]: ...
    def __init__(
        self,
        *,
        user_id: typing___Optional[typing___Text] = None,
        user_name: typing___Optional[typing___Text] = None,
        extensions: typing___Optional[typing___Iterable[google___protobuf___any_pb2___Any]] = None,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "extensions", b"extensions", "user_id", b"user_id", "user_name", b"user_name"
        ],
    ) -> None: ...

type___UserContext = UserContext

class AnalyzePlanRequest(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    class Schema(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

        @property
        def plan(self) -> type___Plan: ...
        def __init__(
            self,
            *,
            plan: typing___Optional[type___Plan] = None,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions___Literal["plan", b"plan"]
        ) -> builtin___bool: ...
        def ClearField(self, field_name: typing_extensions___Literal["plan", b"plan"]) -> None: ...
    type___Schema = Schema

    class Explain(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        ExplainModeValue = typing___NewType("ExplainModeValue", builtin___int)
        type___ExplainModeValue = ExplainModeValue
        ExplainMode: _ExplainMode

        class _ExplainMode(
            google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[
                AnalyzePlanRequest.Explain.ExplainModeValue
            ]
        ):
            DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
            EXPLAIN_MODE_UNSPECIFIED = typing___cast(AnalyzePlanRequest.Explain.ExplainModeValue, 0)
            EXPLAIN_MODE_SIMPLE = typing___cast(AnalyzePlanRequest.Explain.ExplainModeValue, 1)
            EXPLAIN_MODE_EXTENDED = typing___cast(AnalyzePlanRequest.Explain.ExplainModeValue, 2)
            EXPLAIN_MODE_CODEGEN = typing___cast(AnalyzePlanRequest.Explain.ExplainModeValue, 3)
            EXPLAIN_MODE_COST = typing___cast(AnalyzePlanRequest.Explain.ExplainModeValue, 4)
            EXPLAIN_MODE_FORMATTED = typing___cast(AnalyzePlanRequest.Explain.ExplainModeValue, 5)
        EXPLAIN_MODE_UNSPECIFIED = typing___cast(AnalyzePlanRequest.Explain.ExplainModeValue, 0)
        EXPLAIN_MODE_SIMPLE = typing___cast(AnalyzePlanRequest.Explain.ExplainModeValue, 1)
        EXPLAIN_MODE_EXTENDED = typing___cast(AnalyzePlanRequest.Explain.ExplainModeValue, 2)
        EXPLAIN_MODE_CODEGEN = typing___cast(AnalyzePlanRequest.Explain.ExplainModeValue, 3)
        EXPLAIN_MODE_COST = typing___cast(AnalyzePlanRequest.Explain.ExplainModeValue, 4)
        EXPLAIN_MODE_FORMATTED = typing___cast(AnalyzePlanRequest.Explain.ExplainModeValue, 5)

        explain_mode: type___AnalyzePlanRequest.Explain.ExplainModeValue = ...

        @property
        def plan(self) -> type___Plan: ...
        def __init__(
            self,
            *,
            plan: typing___Optional[type___Plan] = None,
            explain_mode: typing___Optional[
                type___AnalyzePlanRequest.Explain.ExplainModeValue
            ] = None,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions___Literal["plan", b"plan"]
        ) -> builtin___bool: ...
        def ClearField(
            self,
            field_name: typing_extensions___Literal[
                "explain_mode", b"explain_mode", "plan", b"plan"
            ],
        ) -> None: ...
    type___Explain = Explain

    class TreeString(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        level: builtin___int = ...

        @property
        def plan(self) -> type___Plan: ...
        def __init__(
            self,
            *,
            plan: typing___Optional[type___Plan] = None,
            level: typing___Optional[builtin___int] = None,
        ) -> None: ...
        def HasField(
            self,
            field_name: typing_extensions___Literal[
                "_level", b"_level", "level", b"level", "plan", b"plan"
            ],
        ) -> builtin___bool: ...
        def ClearField(
            self,
            field_name: typing_extensions___Literal[
                "_level", b"_level", "level", b"level", "plan", b"plan"
            ],
        ) -> None: ...
        def WhichOneof(
            self, oneof_group: typing_extensions___Literal["_level", b"_level"]
        ) -> typing_extensions___Literal["level"]: ...
    type___TreeString = TreeString

    class IsLocal(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

        @property
        def plan(self) -> type___Plan: ...
        def __init__(
            self,
            *,
            plan: typing___Optional[type___Plan] = None,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions___Literal["plan", b"plan"]
        ) -> builtin___bool: ...
        def ClearField(self, field_name: typing_extensions___Literal["plan", b"plan"]) -> None: ...
    type___IsLocal = IsLocal

    class IsStreaming(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

        @property
        def plan(self) -> type___Plan: ...
        def __init__(
            self,
            *,
            plan: typing___Optional[type___Plan] = None,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions___Literal["plan", b"plan"]
        ) -> builtin___bool: ...
        def ClearField(self, field_name: typing_extensions___Literal["plan", b"plan"]) -> None: ...
    type___IsStreaming = IsStreaming

    class InputFiles(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

        @property
        def plan(self) -> type___Plan: ...
        def __init__(
            self,
            *,
            plan: typing___Optional[type___Plan] = None,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions___Literal["plan", b"plan"]
        ) -> builtin___bool: ...
        def ClearField(self, field_name: typing_extensions___Literal["plan", b"plan"]) -> None: ...
    type___InputFiles = InputFiles

    class SparkVersion(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

        def __init__(
            self,
        ) -> None: ...
    type___SparkVersion = SparkVersion

    class DDLParse(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        ddl_string: typing___Text = ...

        def __init__(
            self,
            *,
            ddl_string: typing___Optional[typing___Text] = None,
        ) -> None: ...
        def ClearField(
            self, field_name: typing_extensions___Literal["ddl_string", b"ddl_string"]
        ) -> None: ...
    type___DDLParse = DDLParse

    class SameSemantics(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

        @property
        def target_plan(self) -> type___Plan: ...
        @property
        def other_plan(self) -> type___Plan: ...
        def __init__(
            self,
            *,
            target_plan: typing___Optional[type___Plan] = None,
            other_plan: typing___Optional[type___Plan] = None,
        ) -> None: ...
        def HasField(
            self,
            field_name: typing_extensions___Literal[
                "other_plan", b"other_plan", "target_plan", b"target_plan"
            ],
        ) -> builtin___bool: ...
        def ClearField(
            self,
            field_name: typing_extensions___Literal[
                "other_plan", b"other_plan", "target_plan", b"target_plan"
            ],
        ) -> None: ...
    type___SameSemantics = SameSemantics

    class SemanticHash(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

        @property
        def plan(self) -> type___Plan: ...
        def __init__(
            self,
            *,
            plan: typing___Optional[type___Plan] = None,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions___Literal["plan", b"plan"]
        ) -> builtin___bool: ...
        def ClearField(self, field_name: typing_extensions___Literal["plan", b"plan"]) -> None: ...
    type___SemanticHash = SemanticHash

    class Persist(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

        @property
        def relation(self) -> spark___connect___relations_pb2___Relation: ...
        @property
        def storage_level(self) -> spark___connect___common_pb2___StorageLevel: ...
        def __init__(
            self,
            *,
            relation: typing___Optional[spark___connect___relations_pb2___Relation] = None,
            storage_level: typing___Optional[spark___connect___common_pb2___StorageLevel] = None,
        ) -> None: ...
        def HasField(
            self,
            field_name: typing_extensions___Literal[
                "_storage_level",
                b"_storage_level",
                "relation",
                b"relation",
                "storage_level",
                b"storage_level",
            ],
        ) -> builtin___bool: ...
        def ClearField(
            self,
            field_name: typing_extensions___Literal[
                "_storage_level",
                b"_storage_level",
                "relation",
                b"relation",
                "storage_level",
                b"storage_level",
            ],
        ) -> None: ...
        def WhichOneof(
            self, oneof_group: typing_extensions___Literal["_storage_level", b"_storage_level"]
        ) -> typing_extensions___Literal["storage_level"]: ...
    type___Persist = Persist

    class Unpersist(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        blocking: builtin___bool = ...

        @property
        def relation(self) -> spark___connect___relations_pb2___Relation: ...
        def __init__(
            self,
            *,
            relation: typing___Optional[spark___connect___relations_pb2___Relation] = None,
            blocking: typing___Optional[builtin___bool] = None,
        ) -> None: ...
        def HasField(
            self,
            field_name: typing_extensions___Literal[
                "_blocking", b"_blocking", "blocking", b"blocking", "relation", b"relation"
            ],
        ) -> builtin___bool: ...
        def ClearField(
            self,
            field_name: typing_extensions___Literal[
                "_blocking", b"_blocking", "blocking", b"blocking", "relation", b"relation"
            ],
        ) -> None: ...
        def WhichOneof(
            self, oneof_group: typing_extensions___Literal["_blocking", b"_blocking"]
        ) -> typing_extensions___Literal["blocking"]: ...
    type___Unpersist = Unpersist

    class GetStorageLevel(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

        @property
        def relation(self) -> spark___connect___relations_pb2___Relation: ...
        def __init__(
            self,
            *,
            relation: typing___Optional[spark___connect___relations_pb2___Relation] = None,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions___Literal["relation", b"relation"]
        ) -> builtin___bool: ...
        def ClearField(
            self, field_name: typing_extensions___Literal["relation", b"relation"]
        ) -> None: ...
    type___GetStorageLevel = GetStorageLevel

    session_id: typing___Text = ...
    client_type: typing___Text = ...

    @property
    def user_context(self) -> type___UserContext: ...
    @property
    def schema(self) -> type___AnalyzePlanRequest.Schema: ...
    @property
    def explain(self) -> type___AnalyzePlanRequest.Explain: ...
    @property
    def tree_string(self) -> type___AnalyzePlanRequest.TreeString: ...
    @property
    def is_local(self) -> type___AnalyzePlanRequest.IsLocal: ...
    @property
    def is_streaming(self) -> type___AnalyzePlanRequest.IsStreaming: ...
    @property
    def input_files(self) -> type___AnalyzePlanRequest.InputFiles: ...
    @property
    def spark_version(self) -> type___AnalyzePlanRequest.SparkVersion: ...
    @property
    def ddl_parse(self) -> type___AnalyzePlanRequest.DDLParse: ...
    @property
    def same_semantics(self) -> type___AnalyzePlanRequest.SameSemantics: ...
    @property
    def semantic_hash(self) -> type___AnalyzePlanRequest.SemanticHash: ...
    @property
    def persist(self) -> type___AnalyzePlanRequest.Persist: ...
    @property
    def unpersist(self) -> type___AnalyzePlanRequest.Unpersist: ...
    @property
    def get_storage_level(self) -> type___AnalyzePlanRequest.GetStorageLevel: ...
    def __init__(
        self,
        *,
        session_id: typing___Optional[typing___Text] = None,
        user_context: typing___Optional[type___UserContext] = None,
        client_type: typing___Optional[typing___Text] = None,
        schema: typing___Optional[type___AnalyzePlanRequest.Schema] = None,
        explain: typing___Optional[type___AnalyzePlanRequest.Explain] = None,
        tree_string: typing___Optional[type___AnalyzePlanRequest.TreeString] = None,
        is_local: typing___Optional[type___AnalyzePlanRequest.IsLocal] = None,
        is_streaming: typing___Optional[type___AnalyzePlanRequest.IsStreaming] = None,
        input_files: typing___Optional[type___AnalyzePlanRequest.InputFiles] = None,
        spark_version: typing___Optional[type___AnalyzePlanRequest.SparkVersion] = None,
        ddl_parse: typing___Optional[type___AnalyzePlanRequest.DDLParse] = None,
        same_semantics: typing___Optional[type___AnalyzePlanRequest.SameSemantics] = None,
        semantic_hash: typing___Optional[type___AnalyzePlanRequest.SemanticHash] = None,
        persist: typing___Optional[type___AnalyzePlanRequest.Persist] = None,
        unpersist: typing___Optional[type___AnalyzePlanRequest.Unpersist] = None,
        get_storage_level: typing___Optional[type___AnalyzePlanRequest.GetStorageLevel] = None,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions___Literal[
            "_client_type",
            b"_client_type",
            "analyze",
            b"analyze",
            "client_type",
            b"client_type",
            "ddl_parse",
            b"ddl_parse",
            "explain",
            b"explain",
            "get_storage_level",
            b"get_storage_level",
            "input_files",
            b"input_files",
            "is_local",
            b"is_local",
            "is_streaming",
            b"is_streaming",
            "persist",
            b"persist",
            "same_semantics",
            b"same_semantics",
            "schema",
            b"schema",
            "semantic_hash",
            b"semantic_hash",
            "spark_version",
            b"spark_version",
            "tree_string",
            b"tree_string",
            "unpersist",
            b"unpersist",
            "user_context",
            b"user_context",
        ],
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "_client_type",
            b"_client_type",
            "analyze",
            b"analyze",
            "client_type",
            b"client_type",
            "ddl_parse",
            b"ddl_parse",
            "explain",
            b"explain",
            "get_storage_level",
            b"get_storage_level",
            "input_files",
            b"input_files",
            "is_local",
            b"is_local",
            "is_streaming",
            b"is_streaming",
            "persist",
            b"persist",
            "same_semantics",
            b"same_semantics",
            "schema",
            b"schema",
            "semantic_hash",
            b"semantic_hash",
            "session_id",
            b"session_id",
            "spark_version",
            b"spark_version",
            "tree_string",
            b"tree_string",
            "unpersist",
            b"unpersist",
            "user_context",
            b"user_context",
        ],
    ) -> None: ...
    @typing___overload
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_client_type", b"_client_type"]
    ) -> typing_extensions___Literal["client_type"]: ...
    @typing___overload
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["analyze", b"analyze"]
    ) -> typing_extensions___Literal[
        "schema",
        "explain",
        "tree_string",
        "is_local",
        "is_streaming",
        "input_files",
        "spark_version",
        "ddl_parse",
        "same_semantics",
        "semantic_hash",
        "persist",
        "unpersist",
        "get_storage_level",
    ]: ...

type___AnalyzePlanRequest = AnalyzePlanRequest

class AnalyzePlanResponse(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    class Schema(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

        @property
        def schema(self) -> spark___connect___types_pb2___DataType: ...
        def __init__(
            self,
            *,
            schema: typing___Optional[spark___connect___types_pb2___DataType] = None,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions___Literal["schema", b"schema"]
        ) -> builtin___bool: ...
        def ClearField(
            self, field_name: typing_extensions___Literal["schema", b"schema"]
        ) -> None: ...
    type___Schema = Schema

    class Explain(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        explain_string: typing___Text = ...

        def __init__(
            self,
            *,
            explain_string: typing___Optional[typing___Text] = None,
        ) -> None: ...
        def ClearField(
            self, field_name: typing_extensions___Literal["explain_string", b"explain_string"]
        ) -> None: ...
    type___Explain = Explain

    class TreeString(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        tree_string: typing___Text = ...

        def __init__(
            self,
            *,
            tree_string: typing___Optional[typing___Text] = None,
        ) -> None: ...
        def ClearField(
            self, field_name: typing_extensions___Literal["tree_string", b"tree_string"]
        ) -> None: ...
    type___TreeString = TreeString

    class IsLocal(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        is_local: builtin___bool = ...

        def __init__(
            self,
            *,
            is_local: typing___Optional[builtin___bool] = None,
        ) -> None: ...
        def ClearField(
            self, field_name: typing_extensions___Literal["is_local", b"is_local"]
        ) -> None: ...
    type___IsLocal = IsLocal

    class IsStreaming(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        is_streaming: builtin___bool = ...

        def __init__(
            self,
            *,
            is_streaming: typing___Optional[builtin___bool] = None,
        ) -> None: ...
        def ClearField(
            self, field_name: typing_extensions___Literal["is_streaming", b"is_streaming"]
        ) -> None: ...
    type___IsStreaming = IsStreaming

    class InputFiles(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        files: google___protobuf___internal___containers___RepeatedScalarFieldContainer[
            typing___Text
        ] = ...

        def __init__(
            self,
            *,
            files: typing___Optional[typing___Iterable[typing___Text]] = None,
        ) -> None: ...
        def ClearField(
            self, field_name: typing_extensions___Literal["files", b"files"]
        ) -> None: ...
    type___InputFiles = InputFiles

    class SparkVersion(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        version: typing___Text = ...

        def __init__(
            self,
            *,
            version: typing___Optional[typing___Text] = None,
        ) -> None: ...
        def ClearField(
            self, field_name: typing_extensions___Literal["version", b"version"]
        ) -> None: ...
    type___SparkVersion = SparkVersion

    class DDLParse(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

        @property
        def parsed(self) -> spark___connect___types_pb2___DataType: ...
        def __init__(
            self,
            *,
            parsed: typing___Optional[spark___connect___types_pb2___DataType] = None,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions___Literal["parsed", b"parsed"]
        ) -> builtin___bool: ...
        def ClearField(
            self, field_name: typing_extensions___Literal["parsed", b"parsed"]
        ) -> None: ...
    type___DDLParse = DDLParse

    class SameSemantics(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        result: builtin___bool = ...

        def __init__(
            self,
            *,
            result: typing___Optional[builtin___bool] = None,
        ) -> None: ...
        def ClearField(
            self, field_name: typing_extensions___Literal["result", b"result"]
        ) -> None: ...
    type___SameSemantics = SameSemantics

    class SemanticHash(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        result: builtin___int = ...

        def __init__(
            self,
            *,
            result: typing___Optional[builtin___int] = None,
        ) -> None: ...
        def ClearField(
            self, field_name: typing_extensions___Literal["result", b"result"]
        ) -> None: ...
    type___SemanticHash = SemanticHash

    class Persist(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

        def __init__(
            self,
        ) -> None: ...
    type___Persist = Persist

    class Unpersist(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

        def __init__(
            self,
        ) -> None: ...
    type___Unpersist = Unpersist

    class GetStorageLevel(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

        @property
        def storage_level(self) -> spark___connect___common_pb2___StorageLevel: ...
        def __init__(
            self,
            *,
            storage_level: typing___Optional[spark___connect___common_pb2___StorageLevel] = None,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions___Literal["storage_level", b"storage_level"]
        ) -> builtin___bool: ...
        def ClearField(
            self, field_name: typing_extensions___Literal["storage_level", b"storage_level"]
        ) -> None: ...
    type___GetStorageLevel = GetStorageLevel

    session_id: typing___Text = ...

    @property
    def schema(self) -> type___AnalyzePlanResponse.Schema: ...
    @property
    def explain(self) -> type___AnalyzePlanResponse.Explain: ...
    @property
    def tree_string(self) -> type___AnalyzePlanResponse.TreeString: ...
    @property
    def is_local(self) -> type___AnalyzePlanResponse.IsLocal: ...
    @property
    def is_streaming(self) -> type___AnalyzePlanResponse.IsStreaming: ...
    @property
    def input_files(self) -> type___AnalyzePlanResponse.InputFiles: ...
    @property
    def spark_version(self) -> type___AnalyzePlanResponse.SparkVersion: ...
    @property
    def ddl_parse(self) -> type___AnalyzePlanResponse.DDLParse: ...
    @property
    def same_semantics(self) -> type___AnalyzePlanResponse.SameSemantics: ...
    @property
    def semantic_hash(self) -> type___AnalyzePlanResponse.SemanticHash: ...
    @property
    def persist(self) -> type___AnalyzePlanResponse.Persist: ...
    @property
    def unpersist(self) -> type___AnalyzePlanResponse.Unpersist: ...
    @property
    def get_storage_level(self) -> type___AnalyzePlanResponse.GetStorageLevel: ...
    def __init__(
        self,
        *,
        session_id: typing___Optional[typing___Text] = None,
        schema: typing___Optional[type___AnalyzePlanResponse.Schema] = None,
        explain: typing___Optional[type___AnalyzePlanResponse.Explain] = None,
        tree_string: typing___Optional[type___AnalyzePlanResponse.TreeString] = None,
        is_local: typing___Optional[type___AnalyzePlanResponse.IsLocal] = None,
        is_streaming: typing___Optional[type___AnalyzePlanResponse.IsStreaming] = None,
        input_files: typing___Optional[type___AnalyzePlanResponse.InputFiles] = None,
        spark_version: typing___Optional[type___AnalyzePlanResponse.SparkVersion] = None,
        ddl_parse: typing___Optional[type___AnalyzePlanResponse.DDLParse] = None,
        same_semantics: typing___Optional[type___AnalyzePlanResponse.SameSemantics] = None,
        semantic_hash: typing___Optional[type___AnalyzePlanResponse.SemanticHash] = None,
        persist: typing___Optional[type___AnalyzePlanResponse.Persist] = None,
        unpersist: typing___Optional[type___AnalyzePlanResponse.Unpersist] = None,
        get_storage_level: typing___Optional[type___AnalyzePlanResponse.GetStorageLevel] = None,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions___Literal[
            "ddl_parse",
            b"ddl_parse",
            "explain",
            b"explain",
            "get_storage_level",
            b"get_storage_level",
            "input_files",
            b"input_files",
            "is_local",
            b"is_local",
            "is_streaming",
            b"is_streaming",
            "persist",
            b"persist",
            "result",
            b"result",
            "same_semantics",
            b"same_semantics",
            "schema",
            b"schema",
            "semantic_hash",
            b"semantic_hash",
            "spark_version",
            b"spark_version",
            "tree_string",
            b"tree_string",
            "unpersist",
            b"unpersist",
        ],
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "ddl_parse",
            b"ddl_parse",
            "explain",
            b"explain",
            "get_storage_level",
            b"get_storage_level",
            "input_files",
            b"input_files",
            "is_local",
            b"is_local",
            "is_streaming",
            b"is_streaming",
            "persist",
            b"persist",
            "result",
            b"result",
            "same_semantics",
            b"same_semantics",
            "schema",
            b"schema",
            "semantic_hash",
            b"semantic_hash",
            "session_id",
            b"session_id",
            "spark_version",
            b"spark_version",
            "tree_string",
            b"tree_string",
            "unpersist",
            b"unpersist",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["result", b"result"]
    ) -> typing_extensions___Literal[
        "schema",
        "explain",
        "tree_string",
        "is_local",
        "is_streaming",
        "input_files",
        "spark_version",
        "ddl_parse",
        "same_semantics",
        "semantic_hash",
        "persist",
        "unpersist",
        "get_storage_level",
    ]: ...

type___AnalyzePlanResponse = AnalyzePlanResponse

class ExecutePlanRequest(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    session_id: typing___Text = ...
    client_type: typing___Text = ...

    @property
    def user_context(self) -> type___UserContext: ...
    @property
    def plan(self) -> type___Plan: ...
    def __init__(
        self,
        *,
        session_id: typing___Optional[typing___Text] = None,
        user_context: typing___Optional[type___UserContext] = None,
        plan: typing___Optional[type___Plan] = None,
        client_type: typing___Optional[typing___Text] = None,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions___Literal[
            "_client_type",
            b"_client_type",
            "client_type",
            b"client_type",
            "plan",
            b"plan",
            "user_context",
            b"user_context",
        ],
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "_client_type",
            b"_client_type",
            "client_type",
            b"client_type",
            "plan",
            b"plan",
            "session_id",
            b"session_id",
            "user_context",
            b"user_context",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_client_type", b"_client_type"]
    ) -> typing_extensions___Literal["client_type"]: ...

type___ExecutePlanRequest = ExecutePlanRequest

class ExecutePlanResponse(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    class SqlCommandResult(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

        @property
        def relation(self) -> spark___connect___relations_pb2___Relation: ...
        def __init__(
            self,
            *,
            relation: typing___Optional[spark___connect___relations_pb2___Relation] = None,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions___Literal["relation", b"relation"]
        ) -> builtin___bool: ...
        def ClearField(
            self, field_name: typing_extensions___Literal["relation", b"relation"]
        ) -> None: ...
    type___SqlCommandResult = SqlCommandResult

    class ArrowBatch(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        row_count: builtin___int = ...
        data: builtin___bytes = ...

        def __init__(
            self,
            *,
            row_count: typing___Optional[builtin___int] = None,
            data: typing___Optional[builtin___bytes] = None,
        ) -> None: ...
        def ClearField(
            self,
            field_name: typing_extensions___Literal["data", b"data", "row_count", b"row_count"],
        ) -> None: ...
    type___ArrowBatch = ArrowBatch

    class Metrics(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

        class MetricObject(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

            class ExecutionMetricsEntry(google___protobuf___message___Message):
                DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
                key: typing___Text = ...

                @property
                def value(self) -> type___ExecutePlanResponse.Metrics.MetricValue: ...
                def __init__(
                    self,
                    *,
                    key: typing___Optional[typing___Text] = None,
                    value: typing___Optional[type___ExecutePlanResponse.Metrics.MetricValue] = None,
                ) -> None: ...
                def HasField(
                    self, field_name: typing_extensions___Literal["value", b"value"]
                ) -> builtin___bool: ...
                def ClearField(
                    self, field_name: typing_extensions___Literal["key", b"key", "value", b"value"]
                ) -> None: ...
            type___ExecutionMetricsEntry = ExecutionMetricsEntry

            name: typing___Text = ...
            plan_id: builtin___int = ...
            parent: builtin___int = ...

            @property
            def execution_metrics(
                self,
            ) -> google___protobuf___internal___containers___MessageMap[
                typing___Text, type___ExecutePlanResponse.Metrics.MetricValue
            ]: ...
            def __init__(
                self,
                *,
                name: typing___Optional[typing___Text] = None,
                plan_id: typing___Optional[builtin___int] = None,
                parent: typing___Optional[builtin___int] = None,
                execution_metrics: typing___Optional[
                    typing___Mapping[typing___Text, type___ExecutePlanResponse.Metrics.MetricValue]
                ] = None,
            ) -> None: ...
            def ClearField(
                self,
                field_name: typing_extensions___Literal[
                    "execution_metrics",
                    b"execution_metrics",
                    "name",
                    b"name",
                    "parent",
                    b"parent",
                    "plan_id",
                    b"plan_id",
                ],
            ) -> None: ...
        type___MetricObject = MetricObject

        class MetricValue(google___protobuf___message___Message):
            DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
            name: typing___Text = ...
            value: builtin___int = ...
            metric_type: typing___Text = ...

            def __init__(
                self,
                *,
                name: typing___Optional[typing___Text] = None,
                value: typing___Optional[builtin___int] = None,
                metric_type: typing___Optional[typing___Text] = None,
            ) -> None: ...
            def ClearField(
                self,
                field_name: typing_extensions___Literal[
                    "metric_type", b"metric_type", "name", b"name", "value", b"value"
                ],
            ) -> None: ...
        type___MetricValue = MetricValue

        @property
        def metrics(
            self,
        ) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[
            type___ExecutePlanResponse.Metrics.MetricObject
        ]: ...
        def __init__(
            self,
            *,
            metrics: typing___Optional[
                typing___Iterable[type___ExecutePlanResponse.Metrics.MetricObject]
            ] = None,
        ) -> None: ...
        def ClearField(
            self, field_name: typing_extensions___Literal["metrics", b"metrics"]
        ) -> None: ...
    type___Metrics = Metrics

    class ObservedMetrics(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        name: typing___Text = ...

        @property
        def values(
            self,
        ) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[
            spark___connect___expressions_pb2___Expression.Literal
        ]: ...
        def __init__(
            self,
            *,
            name: typing___Optional[typing___Text] = None,
            values: typing___Optional[
                typing___Iterable[spark___connect___expressions_pb2___Expression.Literal]
            ] = None,
        ) -> None: ...
        def ClearField(
            self, field_name: typing_extensions___Literal["name", b"name", "values", b"values"]
        ) -> None: ...
    type___ObservedMetrics = ObservedMetrics

    session_id: typing___Text = ...

    @property
    def arrow_batch(self) -> type___ExecutePlanResponse.ArrowBatch: ...
    @property
    def sql_command_result(self) -> type___ExecutePlanResponse.SqlCommandResult: ...
    @property
    def write_stream_operation_start_result(
        self,
    ) -> spark___connect___commands_pb2___WriteStreamOperationStartResult: ...
    @property
    def streaming_query_command_result(
        self,
    ) -> spark___connect___commands_pb2___StreamingQueryCommandResult: ...
    @property
    def get_resources_command_result(
        self,
    ) -> spark___connect___commands_pb2___GetResourcesCommandResult: ...
    @property
    def streaming_query_manager_command_result(
        self,
    ) -> spark___connect___commands_pb2___StreamingQueryManagerCommandResult: ...
    @property
    def extension(self) -> google___protobuf___any_pb2___Any: ...
    @property
    def metrics(self) -> type___ExecutePlanResponse.Metrics: ...
    @property
    def observed_metrics(
        self,
    ) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[
        type___ExecutePlanResponse.ObservedMetrics
    ]: ...
    @property
    def schema(self) -> spark___connect___types_pb2___DataType: ...
    def __init__(
        self,
        *,
        session_id: typing___Optional[typing___Text] = None,
        arrow_batch: typing___Optional[type___ExecutePlanResponse.ArrowBatch] = None,
        sql_command_result: typing___Optional[type___ExecutePlanResponse.SqlCommandResult] = None,
        write_stream_operation_start_result: typing___Optional[
            spark___connect___commands_pb2___WriteStreamOperationStartResult
        ] = None,
        streaming_query_command_result: typing___Optional[
            spark___connect___commands_pb2___StreamingQueryCommandResult
        ] = None,
        get_resources_command_result: typing___Optional[
            spark___connect___commands_pb2___GetResourcesCommandResult
        ] = None,
        streaming_query_manager_command_result: typing___Optional[
            spark___connect___commands_pb2___StreamingQueryManagerCommandResult
        ] = None,
        extension: typing___Optional[google___protobuf___any_pb2___Any] = None,
        metrics: typing___Optional[type___ExecutePlanResponse.Metrics] = None,
        observed_metrics: typing___Optional[
            typing___Iterable[type___ExecutePlanResponse.ObservedMetrics]
        ] = None,
        schema: typing___Optional[spark___connect___types_pb2___DataType] = None,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions___Literal[
            "arrow_batch",
            b"arrow_batch",
            "extension",
            b"extension",
            "get_resources_command_result",
            b"get_resources_command_result",
            "metrics",
            b"metrics",
            "response_type",
            b"response_type",
            "schema",
            b"schema",
            "sql_command_result",
            b"sql_command_result",
            "streaming_query_command_result",
            b"streaming_query_command_result",
            "streaming_query_manager_command_result",
            b"streaming_query_manager_command_result",
            "write_stream_operation_start_result",
            b"write_stream_operation_start_result",
        ],
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "arrow_batch",
            b"arrow_batch",
            "extension",
            b"extension",
            "get_resources_command_result",
            b"get_resources_command_result",
            "metrics",
            b"metrics",
            "observed_metrics",
            b"observed_metrics",
            "response_type",
            b"response_type",
            "schema",
            b"schema",
            "session_id",
            b"session_id",
            "sql_command_result",
            b"sql_command_result",
            "streaming_query_command_result",
            b"streaming_query_command_result",
            "streaming_query_manager_command_result",
            b"streaming_query_manager_command_result",
            "write_stream_operation_start_result",
            b"write_stream_operation_start_result",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["response_type", b"response_type"]
    ) -> typing_extensions___Literal[
        "arrow_batch",
        "sql_command_result",
        "write_stream_operation_start_result",
        "streaming_query_command_result",
        "get_resources_command_result",
        "streaming_query_manager_command_result",
        "extension",
    ]: ...

type___ExecutePlanResponse = ExecutePlanResponse

class KeyValue(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    key: typing___Text = ...
    value: typing___Text = ...

    def __init__(
        self,
        *,
        key: typing___Optional[typing___Text] = None,
        value: typing___Optional[typing___Text] = None,
    ) -> None: ...
    def HasField(
        self, field_name: typing_extensions___Literal["_value", b"_value", "value", b"value"]
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "_value", b"_value", "key", b"key", "value", b"value"
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_value", b"_value"]
    ) -> typing_extensions___Literal["value"]: ...

type___KeyValue = KeyValue

class ConfigRequest(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    class Operation(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

        @property
        def set(self) -> type___ConfigRequest.Set: ...
        @property
        def get(self) -> type___ConfigRequest.Get: ...
        @property
        def get_with_default(self) -> type___ConfigRequest.GetWithDefault: ...
        @property
        def get_option(self) -> type___ConfigRequest.GetOption: ...
        @property
        def get_all(self) -> type___ConfigRequest.GetAll: ...
        @property
        def unset(self) -> type___ConfigRequest.Unset: ...
        @property
        def is_modifiable(self) -> type___ConfigRequest.IsModifiable: ...
        def __init__(
            self,
            *,
            set: typing___Optional[type___ConfigRequest.Set] = None,
            get: typing___Optional[type___ConfigRequest.Get] = None,
            get_with_default: typing___Optional[type___ConfigRequest.GetWithDefault] = None,
            get_option: typing___Optional[type___ConfigRequest.GetOption] = None,
            get_all: typing___Optional[type___ConfigRequest.GetAll] = None,
            unset: typing___Optional[type___ConfigRequest.Unset] = None,
            is_modifiable: typing___Optional[type___ConfigRequest.IsModifiable] = None,
        ) -> None: ...
        def HasField(
            self,
            field_name: typing_extensions___Literal[
                "get",
                b"get",
                "get_all",
                b"get_all",
                "get_option",
                b"get_option",
                "get_with_default",
                b"get_with_default",
                "is_modifiable",
                b"is_modifiable",
                "op_type",
                b"op_type",
                "set",
                b"set",
                "unset",
                b"unset",
            ],
        ) -> builtin___bool: ...
        def ClearField(
            self,
            field_name: typing_extensions___Literal[
                "get",
                b"get",
                "get_all",
                b"get_all",
                "get_option",
                b"get_option",
                "get_with_default",
                b"get_with_default",
                "is_modifiable",
                b"is_modifiable",
                "op_type",
                b"op_type",
                "set",
                b"set",
                "unset",
                b"unset",
            ],
        ) -> None: ...
        def WhichOneof(
            self, oneof_group: typing_extensions___Literal["op_type", b"op_type"]
        ) -> typing_extensions___Literal[
            "set", "get", "get_with_default", "get_option", "get_all", "unset", "is_modifiable"
        ]: ...
    type___Operation = Operation

    class Set(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

        @property
        def pairs(
            self,
        ) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[
            type___KeyValue
        ]: ...
        def __init__(
            self,
            *,
            pairs: typing___Optional[typing___Iterable[type___KeyValue]] = None,
        ) -> None: ...
        def ClearField(
            self, field_name: typing_extensions___Literal["pairs", b"pairs"]
        ) -> None: ...
    type___Set = Set

    class Get(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        keys: google___protobuf___internal___containers___RepeatedScalarFieldContainer[
            typing___Text
        ] = ...

        def __init__(
            self,
            *,
            keys: typing___Optional[typing___Iterable[typing___Text]] = None,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions___Literal["keys", b"keys"]) -> None: ...
    type___Get = Get

    class GetWithDefault(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

        @property
        def pairs(
            self,
        ) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[
            type___KeyValue
        ]: ...
        def __init__(
            self,
            *,
            pairs: typing___Optional[typing___Iterable[type___KeyValue]] = None,
        ) -> None: ...
        def ClearField(
            self, field_name: typing_extensions___Literal["pairs", b"pairs"]
        ) -> None: ...
    type___GetWithDefault = GetWithDefault

    class GetOption(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        keys: google___protobuf___internal___containers___RepeatedScalarFieldContainer[
            typing___Text
        ] = ...

        def __init__(
            self,
            *,
            keys: typing___Optional[typing___Iterable[typing___Text]] = None,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions___Literal["keys", b"keys"]) -> None: ...
    type___GetOption = GetOption

    class GetAll(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        prefix: typing___Text = ...

        def __init__(
            self,
            *,
            prefix: typing___Optional[typing___Text] = None,
        ) -> None: ...
        def HasField(
            self,
            field_name: typing_extensions___Literal["_prefix", b"_prefix", "prefix", b"prefix"],
        ) -> builtin___bool: ...
        def ClearField(
            self,
            field_name: typing_extensions___Literal["_prefix", b"_prefix", "prefix", b"prefix"],
        ) -> None: ...
        def WhichOneof(
            self, oneof_group: typing_extensions___Literal["_prefix", b"_prefix"]
        ) -> typing_extensions___Literal["prefix"]: ...
    type___GetAll = GetAll

    class Unset(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        keys: google___protobuf___internal___containers___RepeatedScalarFieldContainer[
            typing___Text
        ] = ...

        def __init__(
            self,
            *,
            keys: typing___Optional[typing___Iterable[typing___Text]] = None,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions___Literal["keys", b"keys"]) -> None: ...
    type___Unset = Unset

    class IsModifiable(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        keys: google___protobuf___internal___containers___RepeatedScalarFieldContainer[
            typing___Text
        ] = ...

        def __init__(
            self,
            *,
            keys: typing___Optional[typing___Iterable[typing___Text]] = None,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions___Literal["keys", b"keys"]) -> None: ...
    type___IsModifiable = IsModifiable

    session_id: typing___Text = ...
    client_type: typing___Text = ...

    @property
    def user_context(self) -> type___UserContext: ...
    @property
    def operation(self) -> type___ConfigRequest.Operation: ...
    def __init__(
        self,
        *,
        session_id: typing___Optional[typing___Text] = None,
        user_context: typing___Optional[type___UserContext] = None,
        operation: typing___Optional[type___ConfigRequest.Operation] = None,
        client_type: typing___Optional[typing___Text] = None,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions___Literal[
            "_client_type",
            b"_client_type",
            "client_type",
            b"client_type",
            "operation",
            b"operation",
            "user_context",
            b"user_context",
        ],
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "_client_type",
            b"_client_type",
            "client_type",
            b"client_type",
            "operation",
            b"operation",
            "session_id",
            b"session_id",
            "user_context",
            b"user_context",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_client_type", b"_client_type"]
    ) -> typing_extensions___Literal["client_type"]: ...

type___ConfigRequest = ConfigRequest

class ConfigResponse(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    session_id: typing___Text = ...
    warnings: google___protobuf___internal___containers___RepeatedScalarFieldContainer[
        typing___Text
    ] = ...

    @property
    def pairs(
        self,
    ) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[
        type___KeyValue
    ]: ...
    def __init__(
        self,
        *,
        session_id: typing___Optional[typing___Text] = None,
        pairs: typing___Optional[typing___Iterable[type___KeyValue]] = None,
        warnings: typing___Optional[typing___Iterable[typing___Text]] = None,
    ) -> None: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "pairs", b"pairs", "session_id", b"session_id", "warnings", b"warnings"
        ],
    ) -> None: ...

type___ConfigResponse = ConfigResponse

class AddArtifactsRequest(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    class ArtifactChunk(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        data: builtin___bytes = ...
        crc: builtin___int = ...

        def __init__(
            self,
            *,
            data: typing___Optional[builtin___bytes] = None,
            crc: typing___Optional[builtin___int] = None,
        ) -> None: ...
        def ClearField(
            self, field_name: typing_extensions___Literal["crc", b"crc", "data", b"data"]
        ) -> None: ...
    type___ArtifactChunk = ArtifactChunk

    class SingleChunkArtifact(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        name: typing___Text = ...

        @property
        def data(self) -> type___AddArtifactsRequest.ArtifactChunk: ...
        def __init__(
            self,
            *,
            name: typing___Optional[typing___Text] = None,
            data: typing___Optional[type___AddArtifactsRequest.ArtifactChunk] = None,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions___Literal["data", b"data"]
        ) -> builtin___bool: ...
        def ClearField(
            self, field_name: typing_extensions___Literal["data", b"data", "name", b"name"]
        ) -> None: ...
    type___SingleChunkArtifact = SingleChunkArtifact

    class Batch(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

        @property
        def artifacts(
            self,
        ) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[
            type___AddArtifactsRequest.SingleChunkArtifact
        ]: ...
        def __init__(
            self,
            *,
            artifacts: typing___Optional[
                typing___Iterable[type___AddArtifactsRequest.SingleChunkArtifact]
            ] = None,
        ) -> None: ...
        def ClearField(
            self, field_name: typing_extensions___Literal["artifacts", b"artifacts"]
        ) -> None: ...
    type___Batch = Batch

    class BeginChunkedArtifact(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        name: typing___Text = ...
        total_bytes: builtin___int = ...
        num_chunks: builtin___int = ...

        @property
        def initial_chunk(self) -> type___AddArtifactsRequest.ArtifactChunk: ...
        def __init__(
            self,
            *,
            name: typing___Optional[typing___Text] = None,
            total_bytes: typing___Optional[builtin___int] = None,
            num_chunks: typing___Optional[builtin___int] = None,
            initial_chunk: typing___Optional[type___AddArtifactsRequest.ArtifactChunk] = None,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions___Literal["initial_chunk", b"initial_chunk"]
        ) -> builtin___bool: ...
        def ClearField(
            self,
            field_name: typing_extensions___Literal[
                "initial_chunk",
                b"initial_chunk",
                "name",
                b"name",
                "num_chunks",
                b"num_chunks",
                "total_bytes",
                b"total_bytes",
            ],
        ) -> None: ...
    type___BeginChunkedArtifact = BeginChunkedArtifact

    session_id: typing___Text = ...
    client_type: typing___Text = ...

    @property
    def user_context(self) -> type___UserContext: ...
    @property
    def batch(self) -> type___AddArtifactsRequest.Batch: ...
    @property
    def begin_chunk(self) -> type___AddArtifactsRequest.BeginChunkedArtifact: ...
    @property
    def chunk(self) -> type___AddArtifactsRequest.ArtifactChunk: ...
    def __init__(
        self,
        *,
        session_id: typing___Optional[typing___Text] = None,
        user_context: typing___Optional[type___UserContext] = None,
        client_type: typing___Optional[typing___Text] = None,
        batch: typing___Optional[type___AddArtifactsRequest.Batch] = None,
        begin_chunk: typing___Optional[type___AddArtifactsRequest.BeginChunkedArtifact] = None,
        chunk: typing___Optional[type___AddArtifactsRequest.ArtifactChunk] = None,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions___Literal[
            "_client_type",
            b"_client_type",
            "batch",
            b"batch",
            "begin_chunk",
            b"begin_chunk",
            "chunk",
            b"chunk",
            "client_type",
            b"client_type",
            "payload",
            b"payload",
            "user_context",
            b"user_context",
        ],
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "_client_type",
            b"_client_type",
            "batch",
            b"batch",
            "begin_chunk",
            b"begin_chunk",
            "chunk",
            b"chunk",
            "client_type",
            b"client_type",
            "payload",
            b"payload",
            "session_id",
            b"session_id",
            "user_context",
            b"user_context",
        ],
    ) -> None: ...
    @typing___overload
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_client_type", b"_client_type"]
    ) -> typing_extensions___Literal["client_type"]: ...
    @typing___overload
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["payload", b"payload"]
    ) -> typing_extensions___Literal["batch", "begin_chunk", "chunk"]: ...

type___AddArtifactsRequest = AddArtifactsRequest

class AddArtifactsResponse(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    class ArtifactSummary(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        name: typing___Text = ...
        is_crc_successful: builtin___bool = ...

        def __init__(
            self,
            *,
            name: typing___Optional[typing___Text] = None,
            is_crc_successful: typing___Optional[builtin___bool] = None,
        ) -> None: ...
        def ClearField(
            self,
            field_name: typing_extensions___Literal[
                "is_crc_successful", b"is_crc_successful", "name", b"name"
            ],
        ) -> None: ...
    type___ArtifactSummary = ArtifactSummary

    @property
    def artifacts(
        self,
    ) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[
        type___AddArtifactsResponse.ArtifactSummary
    ]: ...
    def __init__(
        self,
        *,
        artifacts: typing___Optional[
            typing___Iterable[type___AddArtifactsResponse.ArtifactSummary]
        ] = None,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions___Literal["artifacts", b"artifacts"]
    ) -> None: ...

type___AddArtifactsResponse = AddArtifactsResponse

class ArtifactStatusesRequest(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    session_id: typing___Text = ...
    client_type: typing___Text = ...
    names: google___protobuf___internal___containers___RepeatedScalarFieldContainer[
        typing___Text
    ] = ...

    @property
    def user_context(self) -> type___UserContext: ...
    def __init__(
        self,
        *,
        session_id: typing___Optional[typing___Text] = None,
        user_context: typing___Optional[type___UserContext] = None,
        client_type: typing___Optional[typing___Text] = None,
        names: typing___Optional[typing___Iterable[typing___Text]] = None,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions___Literal[
            "_client_type",
            b"_client_type",
            "client_type",
            b"client_type",
            "user_context",
            b"user_context",
        ],
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "_client_type",
            b"_client_type",
            "client_type",
            b"client_type",
            "names",
            b"names",
            "session_id",
            b"session_id",
            "user_context",
            b"user_context",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_client_type", b"_client_type"]
    ) -> typing_extensions___Literal["client_type"]: ...

type___ArtifactStatusesRequest = ArtifactStatusesRequest

class ArtifactStatusesResponse(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    class ArtifactStatus(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        exists: builtin___bool = ...

        def __init__(
            self,
            *,
            exists: typing___Optional[builtin___bool] = None,
        ) -> None: ...
        def ClearField(
            self, field_name: typing_extensions___Literal["exists", b"exists"]
        ) -> None: ...
    type___ArtifactStatus = ArtifactStatus

    class StatusesEntry(google___protobuf___message___Message):
        DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
        key: typing___Text = ...

        @property
        def value(self) -> type___ArtifactStatusesResponse.ArtifactStatus: ...
        def __init__(
            self,
            *,
            key: typing___Optional[typing___Text] = None,
            value: typing___Optional[type___ArtifactStatusesResponse.ArtifactStatus] = None,
        ) -> None: ...
        def HasField(
            self, field_name: typing_extensions___Literal["value", b"value"]
        ) -> builtin___bool: ...
        def ClearField(
            self, field_name: typing_extensions___Literal["key", b"key", "value", b"value"]
        ) -> None: ...
    type___StatusesEntry = StatusesEntry

    @property
    def statuses(
        self,
    ) -> google___protobuf___internal___containers___MessageMap[
        typing___Text, type___ArtifactStatusesResponse.ArtifactStatus
    ]: ...
    def __init__(
        self,
        *,
        statuses: typing___Optional[
            typing___Mapping[typing___Text, type___ArtifactStatusesResponse.ArtifactStatus]
        ] = None,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions___Literal["statuses", b"statuses"]
    ) -> None: ...

type___ArtifactStatusesResponse = ArtifactStatusesResponse

class InterruptRequest(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    InterruptTypeValue = typing___NewType("InterruptTypeValue", builtin___int)
    type___InterruptTypeValue = InterruptTypeValue
    InterruptType: _InterruptType

    class _InterruptType(
        google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[
            InterruptRequest.InterruptTypeValue
        ]
    ):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        INTERRUPT_TYPE_UNSPECIFIED = typing___cast(InterruptRequest.InterruptTypeValue, 0)
        INTERRUPT_TYPE_ALL = typing___cast(InterruptRequest.InterruptTypeValue, 1)
    INTERRUPT_TYPE_UNSPECIFIED = typing___cast(InterruptRequest.InterruptTypeValue, 0)
    INTERRUPT_TYPE_ALL = typing___cast(InterruptRequest.InterruptTypeValue, 1)

    session_id: typing___Text = ...
    client_type: typing___Text = ...
    interrupt_type: type___InterruptRequest.InterruptTypeValue = ...

    @property
    def user_context(self) -> type___UserContext: ...
    def __init__(
        self,
        *,
        session_id: typing___Optional[typing___Text] = None,
        user_context: typing___Optional[type___UserContext] = None,
        client_type: typing___Optional[typing___Text] = None,
        interrupt_type: typing___Optional[type___InterruptRequest.InterruptTypeValue] = None,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions___Literal[
            "_client_type",
            b"_client_type",
            "client_type",
            b"client_type",
            "user_context",
            b"user_context",
        ],
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "_client_type",
            b"_client_type",
            "client_type",
            b"client_type",
            "interrupt_type",
            b"interrupt_type",
            "session_id",
            b"session_id",
            "user_context",
            b"user_context",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_client_type", b"_client_type"]
    ) -> typing_extensions___Literal["client_type"]: ...

type___InterruptRequest = InterruptRequest

class InterruptResponse(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    session_id: typing___Text = ...

    def __init__(
        self,
        *,
        session_id: typing___Optional[typing___Text] = None,
    ) -> None: ...
    def ClearField(
        self, field_name: typing_extensions___Literal["session_id", b"session_id"]
    ) -> None: ...

type___InterruptResponse = InterruptResponse
